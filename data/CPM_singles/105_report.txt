 Use the Force!
Push & Pull Robots With an Invisible Force  If you have seen any of the "Star Wars" movies, then you probably remember when Jedi knights like Luke Skywalker and Obi-Wan Kenobi used "The Force" to push, pull, and even throw objects  including some helpless battle droids.
Have you ever wished you could do that in real life?
In this robotics project, you will build and program a LEGO robot that you can push and pull using an "invisible force"  almost like a real Jedi!
We make no promise that you will be taking down the Death Star anytime soon, but this could be a good start.
If you saw any of the "Star Wars" movies, you probably remember Jedi knights like Luke Skywalker or villains like Darth Vader using "The Force" to lift, crush, and throw objects.
Have you ever wished you could use an invisible force to move objects around in the real world?
In this project, you will!
Well, not just any object.
First, you will have to build and program a robot that will respond to an "invisible force" from your hand.
The invisible force will let you push and pull the robot back and forth without actually touching it!
Watch this video of the demonstration robot we built at Science Buddies:This introductory video shows the "invisible force" robot we built at Science Buddies and how it behaves using the ultrasonic sensor and a simple program.Watch this introductory video shows the "invisible force" robot we built at Science Buddies and how it behaves using the ultrasonic sensor and a simple program on YouTube: http://www.youtube.com/watch?feature=player_embedded&v=VZZUlx0lFiQ This project relies on a few key parts in the LEGO Mindstorms kit.
First, you will need to use motors with wheels to build a robot that can move forward and backward.
You will also need to use the NXT's ultrasonic sensor.
An ultrasonic sensor measures the distance to an object by bouncing sound waves off it.
First, the sensor emits a sound wave that travels forward at the speed of sound, away from the sensor.
When that sound wave hits an object, part of it bounces back and eventually returns to the sensor.
The farther away an object is, the longer it takes sound to bounce back and return.
So, by measuring the amount of elapsed time from when the sound is emitted to when it returns, the sensor can determine how far away an object is, as Figure 1 illustrates.
Figure 1.
The farther away an object is from the ultrasonic sensor, the longer sound has to travel to reach the object and then bounce back  which takes more time.
This is how the ultrasonic sensor uses sound to measure distance.
Just building a robot with motors and an ultrasonic sensor won't be enough, however.
You need to write a computer program to tell the robot what to do.
The program you will write for your NXT robot in this project is based on this equation (this equation is called a proportional controller - see the Technical Note at the end of this section for more information):Equation 1.
MotorPower=Constant(MeasuredDistanceDesiredDistance)Motor\: Power = \:Constant \times (Measured\: Distance\: - \:Desired\: Distance) [Please enable JavaScript to view equation]Motor power in the NXT software is a number between 0 and 100 that tells the motor how fast to spin.
At 0 the motor will not move at all, and 100 means it is moving as fast as possible.
Constant is a number you pick  it can be anything!
The value of the constant will determine how fast your robot reacts when you move your hand.Measured distance is the distance to your hand, measured by the ultrasonic sensor.Desired distance is how far you want the robot to be from your hand.
To help you understand this equation, let's use some examples.
Say you pick a value for constant = 2 and desired distance = 30 centimeters (cm).
So, your equation is:Equation 2.
MotorPower=2(MeasuredDistance30)Motor\: Power = 2 \times (Measured\: Distance - 30) [Please enable JavaScript to view equation]Now, think about what happens in three cases:Your hand is less than 30 cm from the robot.Your hand is exactly 30 cm from the robot.Your hand is more than 30 cm from the robot.
We'll use the first case as an example.
Let's pretend your hand is 10 cm from the robot.
So, you plug 10 cm into Equation 2 for the measured distance:Equation 3.
MotorPower=2x(1030)=40Motor\: Power = 2 x (10 - 30) = - 40 [Please enable JavaScript to view equation]The answer is negative 40  and a negative number means the robot will move backward, away from your hand.
The robot "knows" that it is too close  it should be exactly 30 cm away.
Can you use Equation 2 to figure out what will happen if your hand is exactly 30 cm from the robot, or more than 30 cm from the robot?
Figure 2 shows what will happen  but make sure you can explain it using Equation 2!
Figure 2.
This shows how the robot will behave if the desired distance in Equation 2 is set to 30 cm.
If your hand is too close to the robot, it will back up, and if it is too far, the robot will move forward.
If your hand is exactly 30 cm from the robot, the motor power will be 0, so it will stop.
Do you understand how the program will work?
If not, go back and watch the video again  does it make more sense this time?
Once you think you understand how you will be able to push and pull the robot, you are ready to move on to the Procedure section and start building.Technical NoteNote: Understanding the information in this box is not required to complete the rest of the project  we include it just in case you are curious!Equation 1 is called a proportional controller, because the control input is proportional to the error.
In Equation 1, the control input is the motor power, and the error is the difference between the measured difference and the desired distance.
The desired distance can also be referred to as the set point.
The constant that multiplies by the error is called the proportional gain.
So, you can write a more general equation:Equation 4.   u=Kpe u = K_p e[Please enable JavaScript to view equation]u is the control input Kp  is the proportional gaine is the errorThis type of equation is used all the time in robotics and engineering.
For example, you could also use it to control the angle of one of the motors in  your NXT kit  this time the error would be based on your desired angle, and the measured angle from the NXT motor's built-in angle sensor.
A more advanced version of the equation can even be used for things like cruise control in a car, or autopilot in an airplane!
We don't have room to explain it all here  but if you are curious, you can do an Internet search for "PID control" or "proportional integral derivative control."
Build a LEGO Mindstorms robot that you can push and pull by programming it to maintain a preset distance from your hand.
This project will also work with the NXT's light sensor, since it can measure reflected light from your hand.
You will have to change your code, though  not only to use the right sensor block, but because the light intensity value increases as you move your hand closer to the robot  this is the opposite of what happens with the ultrasonic sensor.
Can you figure out why?If you increase the value of the "Constant" block in the program too much, your robot might become unstable  it will bounce back and forth when it approaches a wall, without ever actually coming to a complete stop.
Can you find out how big the constant has to be before this happens?
What happens as you continue to increase the value?
Share your story with Science Buddies!I Did This Project!Please log in and let us know how things went.
View feedback on this project from other usersHide feedback on this project from other usersRecent Feedback Submissions   Sort by Date    Sort by User Name  Toasthasabubblypersonalityderpy2 said:  2014-01-20 17:04:57 What was the most important thing you learned?
More about programming, which I am going to need if the rest of the "era" is the "technology era."
What problems did you encounter?
Performing the programming with EV3 instead of NXT Can you suggest any improvements or ideas?
Please make a tutorial for EV3?
Overall, how would you rate the quality of this project?
Excellent What is your enthusiasm for science after doing your project?
Very high Compared to a typical science class, please tell us how much you learned doing this project.
Much more   Do you agree?
0                        0                Report Inappropriate Comment robotics, engineering project, LEGO, Mindstorms, NXT, NXT-G, light sensor, ultrasonic sensor, proportional controller Motor Ultrasonic sensor Speed of sound Elapsed time Computer program Motor power Constant Measured distance Desired distance Proportional controller (advanced terms  not necessary to do the project) Control input Error Set point Proportional gain Binary
