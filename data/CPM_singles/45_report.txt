 Programming NANORGs in a Virtual World  Imagine yourself as a software engineer, a decade and a half from now.
You are called upon to help solve the world energy crisis by programming nano-organisms (NANORGs) to extract energy from industrial sludge.
Your program must be small enough to fit in the NANORGs' tiny processors, yet at the same time meet several challenges.
First and foremost, your NANORGs need to navigate on their own, extract energy from the sludge, and find collection points to deliver the harvested energy.
Second, you must figure out how to deal with the fraction of the sludge that is radioactive.
This sludge damages random locations in your NANORGs' processor memory when consumed.
Third, your program must also fend off attacks by malicious nano-drones that are also present in the virtual world.
The drones consume energy from the sludge, but never deliver it to the collection points.
They will attempt to copy their program to your NANORGs, turning them into useless drones.
If you're up for a real programming challenge, this is the project for you!
(This project was adapted from Symantec's 2006 University Programming Contest.)
This Science Buddies project is adapted (with permission) from Symantec's 2006 University Programming Competition.
It features a fun software engineering challenge: write an assembly language program to self-direct nano-robots to harvest energy in a virtual world.Assembly language programming forces you to think at the level of the microprocessor.
Your code works at the level of single words of memory, registers in the CPU, and fundamental processor instructions.
Assembly language programming gives you insight into how computers actually work.
This can help make you a better programmer in higher-level languages.
This project requires previous experience in assembly language programming, or previous experience in higher-level programming languages (e.g., BASIC, C, C++) and a willingness to learn assembly language programming.Your goal in this project is to program the NANORGs to extract energy from industrial sludge, found at random locations in the virtual world.
The extracted energy must be delivered to special collection points, which the NANORGs must locate.
Note that the NANORGs also require energy for their own operation.Two additional problems complicate the task.
About one-fifth of the sludge is toxic to your NANORGs, and will cause random mutations of the processor code.
The NANORGs can recognize the type of sludge before consuming it, but can only identify toxic types by experience.
The virtual world is also inhabited by a population of malicious drones, which use energy from the sludge, but never deliver it to collection points.
These drones will reprogram your NANORGs to behave the same way if they get a chance!
Your program will need to defend your NANORGs against these malicious attackers.Here is the scenario in more detail.Overview of the ProjectThe year is 2020 and all is not well.
The world's accelerating consumption of oil during the 2000's and 2010's has largely depleted the world's reserves of oil, leading to mass shortages.
Scientists and engineers all around the world are looking for environmentally safe and cheap alternatives to oil.
The problem has become so large, and the opportunity so immense, that Symantec has decided to direct its Nano-technologies division to try to tackle the energy problem.You have been hired by Symantec Nano-technologies Division to work on a new programmable nano-organism (NANORG) that is capable of converting industrial sludge into a renewable energy source.
Symantec has already developed nano-organisms with the proper hardware to extract energy from the sludge, but needs you to write the control logic for the 16-bit NANORG CPU to make it as efficient as possible at harvesting energy.
Of course, for your organism to function, it must use a portion of the energy it generates for its own operation, so it needs to balance its own energy needs with its goal of outputting as much energy as possible.Once you have written the control program you can test how your NANORGs perform in a virtual world.
In this simulation, fifty NANORG clones containing your logic will be dropped into a large tank of sludge and must consume the sludge and release energy into special collection points in the tank.
Obviously, the NANORG that produces the most energy in the allotted time will be commercialized by Symantec, so it's your job in this project to produce the most efficient organism possible.Unfortunately, in addition to converting sludge into electricity, your organism must also confront several other challenges.
First, about 20% of the sludge is contaminated with radioactive chemicals; eating this sludge will cause your NANORG to undergo small mutations to its programming logic.
Second, and more concerning, your organism must deal with an earlier generation of malicious NANORGs that are also present within the sludge tanks.
These organisms, called "drones," were written by a spy to sabotage Symantec's Nano-technologies Division and are based on the same exact hardware and machine language instruction set as your NANORGs.
However, their programming logic was  intentionally designed to be harmful.
While they also consume sludge, they produce no energy output.
Moreover, if they come into direct contact with a foreign organism (such as yours), they may attempt to spread their logic by copying it into the adjacent organism (mutating your logic until you become one of them!).
Your NANORG's logic must cope with both of these challenges.The project includes a ZIP file for you to download, with all of the materials you will need for the project (see the Materials and Equipment section, below).
The ZIP file includes a simple command-line program that you can run to measure the performance of your control program.
It's the same program that was used for the contest, so you can compare your results to the contest winners.
The ZIP file also contains a detailed instructions document (in PDF format, requires Adobe Acrobat).
These instructions explain the assembly language commands that you can use to program your NANORGs.
The instructions also explain the details of the virtual world which is simulated in the contest program.
The Experimental Procedure section contains brief instructions on downloading the ZIP file and getting started.
In this project, you will design an assembly-language control program for the microprocessors of a colony of nano-organisms (NANORGs) in a virtual world.
Scientists and engineers often make progress by building on the results of their predecessors.
Study the programs written by the contest winners (Symantec, 2006).
What can you learn from them to improve your own program?
There are many approaches you could try.
One approach would be to write your own assembly language code to include a desired feature from one of the winning programs (be sure to give credit for the idea with a citation).
Another (more difficult) approach would be to use one of the winning programs as a starting point, and try to find one or more ways to make a significant improvement.
You'll need a thorough understanding of how the program works in order to do this, and there is no guarantee of success.
You will also need to be scrupulous about citing the source for your starting point, and clearly explaining the improvement(s) that you originated.
Can you increase the average score by 10%, 20% or more?
Remember that it is completely unethical to copy someone else's work and call it your own.
Here are a couple of advanced strategies that you might try when writing your program:   Can you improve your score by increasing the amount of cooperation between your NANORGs?
Can you improve your score by writing your program so that sub-groups of your NANORGs are specialists for certain tasks?
For example, how about a group that specializes in shuttling energy to the collection points?
Or a few defense specialists to neutralize (or recruit) the malicious drones?
Share your story with Science Buddies!I Did This Project!Please log in and let us know how things went.
View feedback on this project from other usersHide feedback on this project from other usersRecent Feedback Submissions   Sort by Date    Sort by User Name  crash said:  2015-02-20 14:46:56 What was the most important thing you learned?
Test What problems did you encounter?
Test Can you suggest any improvements or ideas?
Test Overall, how would you rate the quality of this project?
Excellent What is your enthusiasm for science after doing your project?
Very high Compared to a typical science class, please tell us how much you learned doing this project.
Much more   Do you agree?
0                        0                Report Inappropriate Comment  assembly language, assembler, machine code, opcode, operand, register, instruction pointer, stack pointer.
