 Program to Check a Sudoku Solution  Sudoku puzzles have become extremely popular over the past couple of years.
You can find books of puzzles for beginners to experts, and many newspapers print Sudoku puzzles daily.
This project challenges you to write a computer program to check if your Sudoku solution is correct.
The goal of this project is to write a JavaScript program that will check your solution to a Sudoku puzzle and verify that it is correct.
This is a good intermediate-level programming project.
Who knows, if you get hooked on programming this could even be the beginning for writing a program to solve Sudoku puzzles!PrerequisitesIt is assumed that you know how to use a text editor to write an HTML file containing your program, and that you know how to load and run the file in your browser.You will also need to know the basics of how JavaScript functions can be written to work with HTML FORM elements.
Specifically, you will be working with HTML TEXTAREA and INPUT elements, and using JavaScript String and Array objects in your functions.If you need help with any of this, read the Introduction section in: ABC's of Programming: Writing a Simple 'Alphabetizer' with JavaScript.New MaterialIn this project, you will learn some important methods of program control logic, which you will use again and again as you write more programs.
These methods are used in just about every programming language (though the actual syntax may vary slightly from language to language).
Specifically, you will learn about the JavaScript "for" loop control statements, and "if...else" conditional statements.
You will also learn about 2-dimensional arrays (lists of lists).Writing a JavaScript Program to Check Sudoku SolutionsA Sudoku puzzle consists of a 99 grid of squares, partly filled in with single-digit numbers.
The goal is to fill in all of the squares so that the digits 19 appear once and only once in each row, column, and in each of the 33 sub-squares (colored gray and white).
In order to check that a solution is correct, your program will have to verify that each of the numbers 19 are used once in each of the nine rows, columns, and sub-squares of the puzzle.
To help you get started, we've written four simple JavaScript functions which illustrate how to work with our JavaScript Sudoku FORM:  the ReadCells() function reads each value in the Sudoku form, storing them in a two-dimensional array,   the RestoreCells() function writes these values back to the puzzle (it won't work properly unless you've clicked the "Read Cells" button first),  the ClearPuzzle() function erases all of the entries in the puzzle,  the ClearTextArea() function erases the contents of the TEXTAREA.There are four buttons below the Sudoku FORM, one for each function.
Try them out to see what they do.
We'll show you the JavaScript code for each of the functions later.
Once you understand how the functions work, you'll have a good foundation for writing your solution-checking program.The Sudoku FormHere is the HTML FORM code for the first row of the puzzle:<FORM NAME="Sudoku" METHOD="post"><INPUT TYPE="TEXT" maxLength="1" SIZE="1" ID="C1_1" STYLE="BACKGROUND-COLOR:WHITE;" VALUE="8"><INPUT TYPE="TEXT" maxLength="1" SIZE="1" ID="C1_2" STYLE="BACKGROUND-COLOR:WHITE;" VALUE="2"><INPUT TYPE="TEXT" maxLength="1" SIZE="1" ID="C1_3" STYLE="BACKGROUND-COLOR:WHITE;" VALUE="3"><INPUT TYPE="TEXT" maxLength="1" SIZE="1" ID="C1_4" STYLE="BACKGROUND-COLOR:SILVER;" VALUE=""><INPUT TYPE="TEXT" maxLength="1" SIZE="1" ID="C1_5" STYLE="BACKGROUND-COLOR:SILVER;" VALUE=""><INPUT TYPE="TEXT" maxLength="1" SIZE="1" ID="C1_6" STYLE="BACKGROUND-COLOR:SILVER;" VALUE=""><INPUT TYPE="TEXT" maxLength="1" SIZE="1" ID="C1_7" STYLE="BACKGROUND-COLOR:WHITE;" VALUE="7"><INPUT TYPE="TEXT" maxLength="1" SIZE="1" ID="C1_8" STYLE="BACKGROUND-COLOR:WHITE;" VALUE="1"><INPUT TYPE="TEXT" maxLength="1" SIZE="1" ID="C1_9" STYLE="BACKGROUND-COLOR:WHITE;" VALUE="5"><BR>Each cell in the row is an individual INPUT element.
Because the input will be text, the TYPE attribute is set to "TEXT."
Because answers are limited to a single digit, the maxLength attribute is set to 1 for each cell.
The STYLE attribute is used to set the background color for each cell to either "WHITE" or "SILVER" (light gray).
The VALUE attribute sets the cell's contents.
There is also an ID attribute, which can be used by JavaScript functions to access individual cells.
You'll see how to use the ID attribute shortly.Below the puzzle are four buttons, one for each example function.
Finally, Below the buttons, there is a TEXTAREA element, which is used for writing messages to the user.
When you write your program, you can use a TEXTAREA for messages such as 'Your solution is correct!'
or, 'Oops, I found 4 mistakes.
'The buttons are used to call JavaScript functions to do specific tasks.
For your program, you'll want to have at least two buttons: 'Check Solution' and 'Clear Puzzle.
'Here is the code for one of our example buttons:<INPUT TYPE="button" VALUE="Read Cells" NAME="ReadCellsButton" onClick="ReadCells()">From this you can see that a button is an INPUT element whose TYPE attribute is set to "BUTTON."
The VALUE attribute sets the text that will appear on the face of the button.
When the user clicks on the button, the onClick attribute gives the name of the JavaScript function that is called.
For this button, the function is 'ReadCells().'
When you click the 'Read Cells' button, the 'ReadCells()' function is called.
'ReadCells()' reads the value of each cell in the puzzle, and stores the values in an array that other functions can access.
The next section describes how this function works.The 'ReadCells()' FunctionThe ReadCells() function needs a place to store the values from the Sudoku form.
We will store the values in an Array, which we will call 'puzzle.'
Because the RestoreCells() function also needs access to the values, we will make the puzzle Array a global variable.
This means that the variable is declared outside of any function, which makes it accessible for any function to use.
(As you learn more about object-oriented programming, you will see that there are better ways to take care of this need for access to variables from multiple functions.
In the interest of keeping things simpler, we will use a global variable here.
)Since a Sudoku puzzle has nine rows, each with nine cells, we will make our puzzle array in the same format, i.e.
two-dimensional.
The following code snippet shows how it is done:var puzzle = new Array(9); for (i=0; i < 9; i++)puzzle[i]=new Array(9); Remember that this code is placed at the beginning of our script, outside of any function definitions, so that puzzle is a global variable.
This code is executed once, when the script is first loaded.
The first line defines puzzle as an array with nine elements.
Think of this as the nine rows of the array.
Next, each of the rows needs to have storage space for nine cells.
The for loop takes care of allocating this space.Now if we want to access the value for the second row, third cell, we would write:puzzle[2][3].In other words, the first array index (the number in the first set of square brackets) refers to the row, and the second array index (the number in the second set of square brackets) refers to the cell within that row.
Now that we have the puzzle array created, we can go on to the ReadCells() function.
Here it is: // reads values from the Sudoku form, stores them in the puzzle[][] array, // and writes them to the OutputText TEXTAREAfunction ReadCells(){var cell; document.getElementById('OutputText').value = "ReadCells():\n";for(i = 1; i <= 9; i++){  for(j = 1; j <= 9; j++){  cell = "C" + i + "_" + j;puzzle[i-1][j-1] = document.getElementById(cell).value;}document.getElementById('OutputText').value += puzzle[i-1].join(" ");document.getElementById('OutputText').value += "\n";}}The ReadCells() function reads each element in the Sudoku form, storing it in the corresponding position in the puzzle array.
It also prints out what it has read in the TEXTAREA element.
The first line starts the printout.document.getElementById('OutputText').value = "ReadCells():\n"The document method 'getElementById' is used to refer to the 'OutputText' TEXTAREA element.
The value attribute of the TEXTAREA is changed by this statement to show that this is the output of the ReadCells() function.Next there are two nested for loops, to cycle through the rows and columns of the Sudoku puzzle.
Notice that the loop counter variables, i and j, count from 1 to 9.
Inside the loops, the 'Cell' string is created to refer to the ID attribute of each individual INPUT element:cell = "C" + i + "_" + j;This line of code creates strings like "C1_1", "C1_2", "C1_3", just like the ID's we used for the INPUT elements for the Sudoku FORM.
The next line within the nested for loops grabs the values from the Sudoku FORM and saves them in the puzzle array.
Notice that because arrays in JavaScript are zero-based (i.e., the first cell in the first row would be puzzle[0][0]), we decrement the loop counters when we use them as indices for the puzzle array:puzzle[i-1][j-1] = document.getElementById(cell).value;The remaining lines in the function are in the outer loop, so they are executed at the completion of each row:JavaScript Arrays have a join() method, which joins all of the elements into a single string.
The argument of the .join()  method is the character you wish to use to separate the individual array elements in the joined string.
So the first line joins all of the cells from a single row into one string, and adds this to the TEXTAREA (using the += assignment operator).
The second line simply adds a newline character ('\n' is equivalent to pressing the <Enter> key when you're typing).
The newline character is added so that each row appears on its own line in the TEXTAREA.That's it for the ReadCells() function.
The RestoreCells() function is next.The 'RestoreCells() FunctionThe RestoreCells() function writes the values from the puzzle array back to the Sudoku form.
It's exactly like the ReadCells() function, with two exceptions:  instead of going from the FORM to the puzzle array, the values go the other way;  there is no output to the TEXTAREA element.Here is the function code:// writes values from the puzzle[][] array to the Sudoku formfunction RestoreCells(){var cell;for(i = 1; i <= 9; i++){  for(j = 1; j <= 9; j++){  cell = "C" + i + "_" + j;document.getElementById(cell).value = puzzle[i-1][j-1];}}}The 'ClearPuzzle()' FunctionThe next function is the ClearPuzzle() function.
You'll want something like this for your solution-checking program so that you can easily clear the Sudoku FORM.
As with the ReadCells() and RestoreCells() functions, ClearPuzzle() uses two nested forloops.
In this case, each INPUT element is erased by setting it's VALUE attribute to the empty string ("", two quotation marks with nothing in between them).
Here is the code:// clears the Sudoku formfunction ClearPuzzle(form){var cell;for(i = 1; i <= 9; i++){ for(j = 1; j <= 9; j++){ cell = "C" + i + "_" + j;document.getElementById(cell).value = "";}}}The 'ClearTextArea()' FunctionThe final function is the ClearTextArea() function.
It works much like the ClearPuzzle() function, but it is simpler, because there is only one form element to clear: the TEXTAREA.
// clears the TEXTAREA below the Sudoku puzzlefunction ClearTextArea(form){document.getElementById('OutputText').value = "";}If you've gotten this far, you should have all the information you need to write your Sudoku solution-checker.
Your program will need a Sudoku puzzle FORM, at least two buttons ('Check Solution' and 'Clear Puzzle'), and a TEXTAREA for displaying messages to the user.
Your 'CheckSolution()' function will need to do three things: Read the values from the Sudoku FORM into a two-dimensional array, Check to make sure that the numbers 19 are used once and only once in each row, column, and sub-square.
If mistakes are found, they should be identified: print a message in the TEXTAREA with the total number of mistakes found, change the background color of each cell that has an error.
Here is a code snippet to change the background color of a single cell (assuming that the variable Cell contains the ID string for the cell you wish to change: document.getElementById(Cell).style.backgroundColor='red;'; If the solution is correct, print out a success message.
Remember to test your program thoroughly when it's completed to make sure that it catches all the errors that it should.
Good luck with your project!Note for JavaScript files with Internet Explorer:If you experience difficulty running your JavaScript code in Internet Explorer, we strongly suggest that you install the Firefox web browser and use it instead of Internet Explorer.
For more information or to download the Firefox installer, see: http://www.mozilla.com/firefox/.If you want to continue to use Internet Explorer, try adding the following line at the beginning of your file: <!
saved from url=(0014)about:internet >  This line will cause Internet Explorer to run your file according to the security rules for the Internet zone on your computer.
In our experience this may work, or it may not.
For more information see: http://msdn.microsoft.com/library/default.asp?url=/workshop/author/dhtml/overview/motw.asp andhttp://www.phdcc.com/xpsp2.htm.
The goal of this project is to write a JavaScript program to check a Sudoku puzzle answer.
This is a good intermediate-level programming project for anyone interested in Sudoku puzzles.
For a more basic programming project, try Forms and Functions: Writing a Simple Calculator Program with JavaScript.
Advanced.
Do you think that you're up to the challenge of writing a program to solve Sudoku puzzles?
Share your story with Science Buddies!I Did This Project!Please log in and let us know how things went.
View feedback on this project from other usersHide feedback on this project from other usersRecent Feedback Submissions   Sort by Date    Sort by User Name  marcoschierhorn said:  2012-08-02 07:29:15 What was the most important thing you learned?
Multi-Dimensional Arrays - Loops - Optimizing What problems did you encounter?
Finding the right way to do all queries for getting the row, line and 3x3 in one loop.
Can you suggest any improvements or ideas?
no Overall, how would you rate the quality of this project?
Very Good What is your enthusiasm for science after doing your project?
Compared to a typical science class, please tell us how much you learned doing this project.
Do you agree?
12                        2                Report Inappropriate Comment    SGHidden said:  2011-02-19 08:36:39 What was the most important thing you learned?
I learned how to code in JavaScript What problems did you encounter?
none Can you suggest any improvements or ideas?
Have the program solve and generate the puzzle for users to use Overall, how would you rate the quality of this project?
Excellent What is your enthusiasm for science after doing your project?
Compared to a typical science class, please tell us how much you learned doing this project.
Do you agree?
5                        1                Report Inappropriate Comment  HTML concepts: start tags and end tags, comments, the the the the the the JavaScript concepts: functions, variables, objects, properties, methods, events, arrays (including 2-dimensional arrays); specific JavaScript methods: general programming concepts: reserved words, control statements (e.g., operators: assignment operators, (e.g., comparison operators, (e.g., logical operators (AND, OR and NOT, i.e.,
