 ABC's of Programming: Writing a Simple 'Alphabetizer' with JavaScript  This is a good first-time programming project.
You'll learn how to use JavaScript to create a simple program to alphabetize lists of words.
You'll be able to run your program in your Web browser.
<!-- old browsers can't handle JavaScript functions so comment them out// uses built-in String.sort() method to "alphabetize"function SortText(inText, outText) { var inTextArray = inText.value.split(" "); inTextArray.sort();outText.value = inTextArray.join(" ");}/* here String.sort() calls reverseStrings() function to "reverse-alphabetize" the strings */function ReverseSortText(inText, outText){ var inTextArray = inText.value.split(" "); inTextArray.sort(reverseStrings) outText.value = inTextArray.join(" ");} // called by sort to "reverse-alphabetize" stringsfunction reverseStrings(a, b){ if(a > b)   // if a comes after b ...  return(-1);  // sort it before if(a < b)   // if a comes before b ...  return(1); // sort it after return(0);  // a = b} // clears the TEXTAREAs in the formfunction ClearForm(form){  form.inputText.value = "";  form.outputText.value = "";}// end of JavaScript functions -->This is an example of a first-time programming project.
You will be writing a simple program that can alphabetize a list of words.
The project uses JavaScript, an interpreted programming language supported by most Web browsers.
You will learn how to write an HTML file containing your program, and how to load and run the file in your browser.
In this project, you will learn the basics of how JavaScript functions can be written to work with HTML FORM elements.
Specifically, you will be working with HTML TEXTAREA and INPUT elements, and using JavaScript String and Array objects in your functions.
The more advanced variations of this project (see Possible Variations section, below) may require "if...then" and/or "for" or "while" loop control statements.PreliminariesThese are things you need to know before you get started.
You'll need to write your file with a text editor, which is a program that can  save plain text files.
The "Notepad" program that comes with Windows will do just  fine.
You should not use a word processing program (e.g., Word), because  word processors do not save files as plain text by default.
JavaScript is a programming language for web pages, so the HTML file you will be  writing is like a simple web page.
Here is the basic format of an HTML file: <!-- comment line: ignored by browser, use these as notes to    yourself about your program -->    <HTML>    <HEAD>    [Title and JavaScript functions    go here.]
</HEAD>        <BODY>    [The parts you want to appear on    the page go here.]
</BODY>    </HTML>        HTML uses tags to designate various parts of the document.
Tags are enclosed   by the characters "<" (less-than sign)   and ">" (greater-than sign).
The first   line is a comment, enclosed by "<!--" and   "-->".
Comments in an HTML file are ignored by the browser, so you can use them as notes to yourself.
They can help you remember what the different parts of your program are supposed to do.
You need the tag "<HTML>" at the beginning.
The document   has two sections, a HEAD section, which contains general information about the document, and a BODY section which contains the displayed material.
The HEAD section is where you would specify the title of the document, and also where you would put JavaScript functions used in the document.
The end of the HEAD section is indicated by the end tag, "</HEAD>".
Next comes the BODY section, with material   that you wish to appear on the page.
It is ended by the end tag "</BODY>".
Finally, the end of the document is indicated by the HTML end tag, "</HTML>".
The same pattern applies to all HTML tags: the end tag is made by adding "/" (the forward slash character) to the beginning of the corresponding start tag.
For practice, try using your text editor to write a very simple HTML file like  the one below.
(You can write it yourself, or you can copy and paste from your browser  to your text editor.)
<!-- Science Buddies: HelloWorld.html -->   <HTML>   <HEAD>   <TITLE>Hello, world!</TITLE>   </HEAD>      <BODY>   Hello, world!
</BODY>   </HTML>    Use your text editor to save the file.
Call it something like "HelloWorld.html" (when choosing a name for your file, always end the name with ".htm" or ".html").
Now open your HelloWorld.html file with your  browser.
In your browser, use the "File" menu,  and choose the option "Open..." (for Firefox,  choose "Open File...").
Using the controls  in the File Open dialog box that pops up, navigate to your file and select it.
In Windows, you can also open the file by right-clicking it, selecting "Open with..." and then choosing a web browser from the list of available programs.
You should see "Hello, world!"
on both the browser title bar and on the body of the page.
Getting Started with JavaScriptNow that you've succeeded with writing an HTML file and opening it with your browser, you're ready to delve into JavaScript.
The following link has a step-by-step tutorial that will give you a great introduction to JavaScript programming: http://www.webteacher.com/javascript/index.htmlAfter you've studied the JavaScript tutorial, you should be almost ready to try your hand at writing a JavaScript sorting program.
Before you go on, test your basic HTML and JavaScript knowledge.
See how many terms, concepts and questions you know in the "Terms, Concepts and Questions to Start Background Research" section below.Writing a JavaScript Program to Alphabetize a ListTo help get you started, here is an example of the kind of program we have in mind.
This is just one of many ways to accomplish this task.
You can use this example as a basis for your program, or you can start from scratch.Simple SorterType or paste a list of words, separated by spaces, into the box below, then press the "Alphabetize Words" button to have the list sorted alphabetically.There are five more pieces which you will need to understand in order to write this program: the <TEXTAREA> object, which you can use in an HTML <FORM>.the .split() method of the built-in JavaScript String object, which you can use to break a string into smaller pieces.
(It's the converse of the .join() method, below.
)the Array, a built-in JavaScript object for storing and manipulating lists of things.
the .sort() method of the built-in JavaScript Array object, which you can use to put the array elements into a particular order.
the .join() method of the built-in JavaScript Array object, which you can use to put all of the elements in an Array into a single string.
(It's the converse of the .split() method, above.)1.
You'll use two TEXTAREA objects in your HTML FORM, one for the user to input the list of words, and one for the program to output the alphabetized list.
Here are two examples:<TEXTAREA name="inputText" rows=5 cols=80 wrap=on></TEXTAREA><TEXTAREA name="outputText" rows=5 cols=80 wrap=on readonly></TEXTAREA>First of all, note that TEXTAREA has both a start tag and an end tag.
Any text appearing between these tags will show up in the TEXTAREA on the form.
We've given each TEXTAREA a name (corresponding to its function), and we've specified the size of the TEXTAREA, in terms of rows (rows=5) and columns (cols=80) of text.
We've set both TEXTAREAs to automatically wrap long lines of text (they will be broken only where whitespace occurs).
The TEXTAREA for the output has been set "readonly", which means that the user can only read, but not enter, text here.
To access the text contained in a TEXTAREA object, you use the object's ".value" property, which contains the text as a single JavaScript String object.
For example, the user input text would be obtained with: "s = inputText.value", where s is a String object.2.
OK, so now you know how to use the TEXTAREA object to let your program handle chunks of text.
Now you need to know the built-in JavaScript tools for turning chunks of text into lists that you can manipulate.
JavaScript String objects have a built-in .split() method which you can use to break a string into smaller pieces.
The .split() method has a single argument, the separator character to use for breaking up the string.
In the example above, we asked the user to type or paste a list of words separated by spaces.
So when we want to split the block of text into separate words, we would call the .split() method like this:inputText.value.split(" ");The quotation marks enclose a single space character, so the input text string will be split at each occurrence of a space.
And where does all of the split text end up?3.
In an Array, naturally.
The .split() method returns an Array object.
An Array is a built-in JavaScript object type that you can use for handling lists.
Most programming languages have a similar feature.
In general, an array is simply a series of elements.
You can access an individual element in the array by using it's index in the array.
The first array element has an index of 0, the second element has an index of 1, and so on.
If your array was named inputTextArray, the individual elements would be written like this in JavaScript:inputTextArray[0]inputTextArray[1]inputTextArray[2]etc.An Array object has a .length property that tells you how many elements are in the array.
Remember that array index numbers start with 0, so the index of the last element in an array will be the array length minus 1.
So to access the last element in our example array, we could write:inputTextArray[inputTextArray.length - 1]4.
The JavaScript Array object has two methods that will be useful for this project: .sort() and .join().
By default, the .sort() method will compare the array elements as strings, sorting them in lexicographic ("dictionary" or "telephone book") order.
So, for a first pass, calling the .sort() method with no argument will put our input array into order.
(See the Possible Variations section, below, for some improvements you can make.)5.
Finally, we need to get the alphabetized word list back into the form of a single string in order to put it in the output TEXTAREA.
The .join() method comes in handy here.
The .join() method has a single argument, the separator character, which separates the individual elements as they are placed into a single output string.
It's the converse of the .split() method for strings, which we discussed previously.
You can figure out how to call the .join() method by analogy.Now you've seen all the pieces, you just need to put them together.
Have fun writing your sorting program!
Note for JavaScript files with Internet Explorer:    If you experience difficulty running your JavaScript code in Internet Explorer, we strongly suggest that you install the Firefox web browser and use it instead of Internet Explorer.
For more information or to download the Firefox installer,    see: http://www.mozilla.com/firefox/.
If you want to continue to use Internet Explorer, try adding the following line at the beginning of your file:    <!-- saved from url=(0014)about:internet -->    This line will cause Internet Explorer to run your file according to the security    rules for the Internet zone on your computer.
In our experience this may work, or    it may not.
For more information see http://www.phdcc.com/xpsp2.htm.
The objective of this project is to write a JavaScript program to alphabetize a list of words.
For a more basic project, see: Forms and Functions: Writing a Simple Calculator Program with JavaScript.In the example sort program above, try including Some Capitalized Words in your list, along with all-lowercase words.
What happens?
The ".sort()" method uses the ASCII code values for characters to sort the words (see: Table of ASCII Characters ).
Capital letters and lower-case letters are not equivalent in this sorting scheme.
How can you change the program so that it ignores the case of the letters?The JavaScript .sort() method for Array objects works well for sorting strings alphabetically.
Try sorting the following sequence of numbers, though, and see what happens (you can copy and paste them into the Simple Sorter, above): " 10 8 27 1345 90 ".
The .sort() method can be enhanced by including a comparison function as an argument.
The comparison function has the form: "compareFunction(a, b)", that is, it takes two arguments, which are the two array elements that are to be compared.
If element a should be sequenced before element b, the comparison function should return a value less than 0.
If element a should be sequenced after element b, the comparison function should return a value greater than zero.
If the elements are equal in terms of sequence order, the comparison function should return 0.
As an example, if you wanted to sort in reverse alphabetical order, you could use the following function:function reverseStrings(a, b){if(a > b)//a comes after b, alphabeticallyreturn(-1);//so sequence it earlierif(a < before="" b,="" alphabeticallyreturn(1);//so sequence it later return(1);//so sequence it laterreturn(0);}Write a comparison function that will sort numbers properly.The JavaScript .split() method for separating text is quite limited.
For example, there can be only a single pattern for word breaks, but words in ordinary text are separated by both spaces and punctuation marks.
Write your own splitWords() function to take a paragraph of ordinary text as input and create an array of words as output.
The array entries should contain strings of letters onlyno whitespace characters!
You'll need to learn how to write a loop using the JavaScript "for" or "while" statement.
You can look it up in the JavaScript reference, and you can also study the next JavaScript programming project, on counting words: Paragraph Stats: Writing a JavaScript Program to 'Measure' Text.
Share your story with Science Buddies!I Did This Project!Please log in and let us know how things went.
View feedback on this project from other usersHide feedback on this project from other usersRecent Feedback Submissions   Sort by Date    Sort by User Name  rajpani009 said:  2015-08-16 13:35:03 What was the most important thing you learned?
Area of ScienceProject Idea Title (Click on the link for details on each project.
)Aerodynamics & HydrodynamicsA Change in the Winds: Studying Bernoulli's PrincipleAerodynamics & HydrodynamicsAerodynamics and Bridge DesignAerodynamics & HydrodynamicsAerodynamics and Ice HockeyAerodynamics & HydrodynamicsAerodynamics of Air HockeyAerodynamics & HydrodynamicsArchimedes Squeeze: At What Diameter Does an Aluminum Boat Sink?Aerodynamics & HydrodynamicsBottled-up BuoyancyAerodynamics & HydrodynamicsBuoyancy of Floating CylindersAerodynamics & HydrodynamicsButterfly Wings: Using Nature to Learn About FlightAerodynamics & HydrodynamicsDo Submarines Need Fins?Aerodynamics & HydrodynamicsEfficient Propeller DesignAerodynamics & HydrodynamicsHelicopter Liftoff: How Does the Speed of the Rotor Affect the Amount of Lift?Aerodynamics & HydrodynamicsHow Does a Hovercraft Work?Aerodynamics & HydrodynamicsHow Far Will It Fly?
Build &amp; Test Paper Planes with Different DragAerodynamics & HydrodynamicsHow Low Can It Go?
Design a Kite that Flies Best in Low WindsAerodynamics & HydrodynamicsHow Much Weight Can Your Boat Float?Aerodynamics & HydrodynamicsInto the Wild Blue Yonder: The Science of Launching an Airplane by CatapultAerodynamics & HydrodynamicsInvestigating Fluid ViscosityAerodynamics & HydrodynamicsLet's Go Fly a Kite!Aerodynamics & HydrodynamicsMake a "Whirly Bird" from PaperAerodynamics & HydrodynamicsMake Monkeys Fly in the Blink of an EyeAerodynamics & HydrodynamicsMake the Wind Work for You!Aerodynamics & HydrodynamicsMaking It Shipshape: Hull Design and HydrodynamicsAerodynamics & HydrodynamicsMilk Does Your Body and a Boat Good&mdash;Design Your Own Milk Carton BoatAerodynamics & HydrodynamicsParachutes: Does Size Matter?Aerodynamics & HydrodynamicsRiding on Air&mdash;Build a Real HovercraftAerodynamics & HydrodynamicsRocket AerodynamicsAerodynamics & HydrodynamicsRocking the BoatAerodynamics & HydrodynamicsShowing the Airflow in a Wind TunnelAerodynamics & HydrodynamicsThe 'Ultimate' Science Fair Project: Frisbee AerodynamicsAerodynamics & HydrodynamicsThe Paper Plate HovercraftAerodynamics & HydrodynamicsThe Swimming Secrets of Duck FeetAerodynamics & HydrodynamicsThe True Cost of a Bike Rack: Aerodynamics and Fuel EconomyAerodynamics & HydrodynamicsThe Wright Stuff: Using Kites to Study AerodynamicsAerodynamics & HydrodynamicsUp, Up, and Away in Your Own Hot-air Balloon!Aerodynamics &  What problems did you encounter?
Area of ScienceProject Idea Title (Click on the link for details on each project.
)Aerodynamics & HydrodynamicsA Change in the Winds: Studying Bernoulli's PrincipleAerodynamics & HydrodynamicsAerodynamics and Bridge DesignAerodynamics & HydrodynamicsAerodynamics and Ice HockeyAerodynamics & HydrodynamicsAerodynamics of Air HockeyAerodynamics & HydrodynamicsArchimedes Squeeze: At What Diameter Does an Aluminum Boat Sink?Aerodynamics & HydrodynamicsBottled-up BuoyancyAerodynamics & HydrodynamicsBuoyancy of Floating CylindersAerodynamics & HydrodynamicsButterfly Wings: Using Nature to Learn About FlightAerodynamics & HydrodynamicsDo Submarines Need Fins?Aerodynamics & HydrodynamicsEfficient Propeller DesignAerodynamics & HydrodynamicsHelicopter Liftoff: How Does the Speed of the Rotor Affect the Amount of Lift?Aerodynamics & HydrodynamicsHow Does a Hovercraft Work?Aerodynamics & HydrodynamicsHow Far Will It Fly?
Build &amp; Test Paper Planes with Different DragAerodynamics & HydrodynamicsHow Low Can It Go?
Design a Kite that Flies Best in Low WindsAerodynamics & HydrodynamicsHow Much Weight Can Your Boat Float?Aerodynamics & HydrodynamicsInto the Wild Blue Yonder: The Science of Launching an Airplane by CatapultAerodynamics & HydrodynamicsInvestigating Fluid ViscosityAerodynamics & HydrodynamicsLet's Go Fly a Kite!Aerodynamics & HydrodynamicsMake a "Whirly Bird" from PaperAerodynamics & HydrodynamicsMake Monkeys Fly in the Blink of an EyeAerodynamics & HydrodynamicsMake the Wind Work for You!Aerodynamics & HydrodynamicsMaking It Shipshape: Hull Design and HydrodynamicsAerodynamics & HydrodynamicsMilk Does Your Body and a Boat Good&mdash;Design Your Own Milk Carton BoatAerodynamics & HydrodynamicsParachutes: Does Size Matter?Aerodynamics & HydrodynamicsRiding on Air&mdash;Build a Real HovercraftAerodynamics & HydrodynamicsRocket AerodynamicsAerodynamics & HydrodynamicsRocking the BoatAerodynamics & HydrodynamicsShowing the Airflow in a Wind TunnelAerodynamics & HydrodynamicsThe 'Ultimate' Science Fair Project: Frisbee AerodynamicsAerodynamics & HydrodynamicsThe Paper Plate HovercraftAerodynamics & HydrodynamicsThe Swimming Secrets of Duck FeetAerodynamics & HydrodynamicsThe True Cost of a Bike Rack: Aerodynamics and Fuel EconomyAerodynamics & HydrodynamicsThe Wright Stuff: Using Kites to Study AerodynamicsAerodynamics & HydrodynamicsUp, Up, and Away in Your Own Hot-air Balloon!Aerodynamics &  Can you suggest any improvements or ideas?
Area of ScienceProject Idea Title (Click on the link for details on each project.
)Aerodynamics & HydrodynamicsA Change in the Winds: Studying Bernoulli's PrincipleAerodynamics & HydrodynamicsAerodynamics and Bridge DesignAerodynamics & HydrodynamicsAerodynamics and Ice HockeyAerodynamics & HydrodynamicsAerodynamics of Air HockeyAerodynamics & HydrodynamicsArchimedes Squeeze: At What Diameter Does an Aluminum Boat Sink?Aerodynamics & HydrodynamicsBottled-up BuoyancyAerodynamics & HydrodynamicsBuoyancy of Floating CylindersAerodynamics & HydrodynamicsButterfly Wings: Using Nature to Learn About FlightAerodynamics & HydrodynamicsDo Submarines Need Fins?Aerodynamics & HydrodynamicsEfficient Propeller DesignAerodynamics & HydrodynamicsHelicopter Liftoff: How Does the Speed of the Rotor Affect the Amount of Lift?Aerodynamics & HydrodynamicsHow Does a Hovercraft Work?Aerodynamics & HydrodynamicsHow Far Will It Fly?
Build &amp; Test Paper Planes with Different DragAerodynamics & HydrodynamicsHow Low Can It Go?
Design a Kite that Flies Best in Low WindsAerodynamics & HydrodynamicsHow Much Weight Can Your Boat Float?Aerodynamics & HydrodynamicsInto the Wild Blue Yonder: The Science of Launching an Airplane by CatapultAerodynamics & HydrodynamicsInvestigating Fluid ViscosityAerodynamics & HydrodynamicsLet's Go Fly a Kite!Aerodynamics & HydrodynamicsMake a "Whirly Bird" from PaperAerodynamics & HydrodynamicsMake Monkeys Fly in the Blink of an EyeAerodynamics & HydrodynamicsMake the Wind Work for You!Aerodynamics & HydrodynamicsMaking It Shipshape: Hull Design and HydrodynamicsAerodynamics & HydrodynamicsMilk Does Your Body and a Boat Good&mdash;Design Your Own Milk Carton BoatAerodynamics & HydrodynamicsParachutes: Does Size Matter?Aerodynamics & HydrodynamicsRiding on Air&mdash;Build a Real HovercraftAerodynamics & HydrodynamicsRocket AerodynamicsAerodynamics & HydrodynamicsRocking the BoatAerodynamics & HydrodynamicsShowing the Airflow in a Wind TunnelAerodynamics & HydrodynamicsThe 'Ultimate' Science Fair Project: Frisbee AerodynamicsAerodynamics & HydrodynamicsThe Paper Plate HovercraftAerodynamics & HydrodynamicsThe Swimming Secrets of Duck FeetAerodynamics & HydrodynamicsThe True Cost of a Bike Rack: Aerodynamics and Fuel EconomyAerodynamics & HydrodynamicsThe Wright Stuff: Using Kites to Study AerodynamicsAerodynamics & HydrodynamicsUp, Up, and Away in Your Own Hot-air Balloon!Aerodynamics &  Overall, how would you rate the quality of this project?
Excellent What is your enthusiasm for science after doing your project?
High Compared to a typical science class, please tell us how much you learned doing this project.
Much more   Do you agree?
0                        0                Report Inappropriate Comment    rifaya said:  2014-02-05 09:05:43 What was the most important thing you learned?
how this project do?
What problems did you encounter?
i don't know Can you suggest any improvements or ideas?
no Overall, how would you rate the quality of this project?
Excellent What is your enthusiasm for science after doing your project?
High Compared to a typical science class, please tell us how much you learned doing this project.
More   Do you agree?
0                        0                Report Inappropriate Comment  HTML concepts: start tags and end tags, comments, the the the the the the JavaScript concepts: functions, variables, objects, properties, methods, events, arrays.
specific JavaScript methods: general programming concepts: reserved words, control statements (e.g.,
