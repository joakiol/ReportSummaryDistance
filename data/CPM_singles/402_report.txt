 Forms and Functions: Writing a Simple Calculator Program with JavaScript  This is a good first-time programming project.
You'll learn how to use JavaScript to create a basic calculator program that you can run in your Web browser.
This is an example of a first-time programming project.
You will be writing a calculator that can add, subtract, multiply or divide two numbers.
The project uses JavaScript, an interpreted programming language supported by most Web browsers.
You will learn how to write an HTML file containing your program, and how to load and run the file in your browser.In this project, you will learn the basics of how JavaScript functions can be written to work with HTML  FORM  elements.
Specifically, you will be working with HTML INPUT elements, and using JavaScript's built-in parseValue() and basic math functions.PreliminariesThese are things you need to know before you get started.
You'll need to write your file with a text editor, which is a program that can  save plain text files.
The "Notepad" program that comes with Windows will do just  fine.
You should not use a word processing program (e.g., Word), because  word processors do not save files as plain text by default.
JavaScript is a programming language for web pages, so the HTML file you will be  writing is like a simple web page.
Here is the basic format of an HTML file: <!-- comment line: ignored by browser, use these as notes to    yourself about your program -->    <HTML>    <HEAD>    [Title and JavaScript functions    go here.]
</HEAD>        <BODY>    [The parts you want to appear on    the page go here.]
</BODY>    </HTML>        HTML uses tags to designate various parts of the document.
Tags are enclosed   by the characters "<" (less-than sign)   and ">" (greater-than sign).
The first   line is a comment, enclosed by "<!--" and   "-->".
Comments in an HTML file are ignored by the browser, so you can use them as notes to yourself.
They can help you remember what the different parts of your program are supposed to do.
You need the tag "<HTML>" at the beginning.
The document   has two sections, a HEAD section, which contains general information about the document, and a BODY section which contains the displayed material.
The HEAD section is where you would specify the title of the document, and also where you would put JavaScript functions used in the document.
The end of the HEAD section is indicated by the end tag, "</HEAD>".
Next comes the BODY section, with material   that you wish to appear on the page.
It is ended by the end tag "</BODY>".
Finally, the end of the document is indicated by the HTML end tag, "</HTML>".
The same pattern applies to all HTML tags: the end tag is made by adding "/" (the forward slash character) to the beginning of the corresponding start tag.
For practice, try using your text editor to write a very simple HTML file like  the one below.
(You can write it yourself, or you can copy and paste from your browser  to your text editor.)
<!-- Science Buddies: HelloWorld.html -->   <HTML>   <HEAD>   <TITLE>Hello, world!</TITLE>   </HEAD>      <BODY>   Hello, world!
</BODY>   </HTML>    Use your text editor to save the file.
Call it something like "HelloWorld.html" (when choosing a name for your file, always end the name with ".htm" or ".html").
Now open your HelloWorld.html file with your  browser.
In your browser, use the "File" menu,  and choose the option "Open..." (for Firefox,  choose "Open File...").
Using the controls  in the File Open dialog box that pops up, navigate to your file and select it.
In Windows, you can also open the file by right-clicking it, selecting "Open with..." and then choosing a web browser from the list of available programs.
You should see "Hello, world!"
on both the browser title bar and on the body of the page.
Getting Started with JavaScriptNow that you've succeeded with writing an HTML file and opening it with your browser, you're ready to delve into JavaScript.
The following link has a step-by-step tutorial that will give you a great introduction to JavaScript programming: http://www.webteacher.com/javascript/index.htmlWriting a JavaScript CalculatorTo help get you started, here is an example of a JavaScript calculator that adds two numbers.
This is just one of many ways to accomplish this task.
You can use this example as a basis for your program, or you can start from scratch.
If you build from this example, you will need to add functions and buttons for subtraction, multiplication, and division.
Simple AdderEnter a number: Enter a number: Answer = Here is the JavaScript source code for the simple adder.
After you have gone through the JavaScript tutorial (above), you should be able to read through this code and understand what it is doing.
Note that the two methods for denoting JavaScript comments are different than the method for HTML comments:<!-- 2005/11/08 Science Buddies: JavaScript calculator, adds two numbers --><HTML><HEAD><TITLE>Simple Adder</TITLE><!-- saved from url=(0030)http://www.sciencebuddies.org/ --><!-- When this code is saved as a local file, the preceding line tells Internet Explorer to treat this file according to the security rules for the Internet zone (plus any security rules specific for the Science Buddies website).
--><SCRIPT LANGUAGE="JavaScript"><!-- old browsers can't handle JavaScript functions so comment them out// This is a single-line JavaScript comment.// Below is a multi-line JavaScript comment./* CalculateSum: this function has 3 arguments:Atext, Btext and form.
It converts Atext and Btext to numbers using the built-in JavaScript "parseFloat" method.
It then uses the form argument to output the sum of the numbers to the form's Answer field.
Notice that the function does *not* need to know the the names of the form's input fields.
Those values are passed as arguments.
It does need to know that the form has a field named "Answer" so that it can put the result there.Here is how to end a multi-line JavaScript comment: */function CalculateSum(Atext, Btext, form){var A = parseFloat(Atext);var B = parseFloat(Btext);form.Answer.value = A + B;}/* ClearForm: this function has 1 argument: form.It clears the input and answer fields on the form.
It needs to know the names of the INPUT elements in orderto do this.
*/function ClearForm(form){form.input_A.value = "";form.input_B.value = "";form.Answer.value = "";}// end of JavaScript functions --></SCRIPT></HEAD><BODY><P><FONT SIZE="+2">Simple Adder</FONT></P><FORM NAME="Calculator" METHOD="post"><P>Enter a number: <INPUT TYPE=TEXT NAME="input_A" SIZE=10></P><P>Enter a number: <INPUT TYPE=TEXT NAME="input_B" SIZE=10></P><P><INPUT TYPE="button" VALUE="Add Numbers" name="AddButton" onClick="CalculateSum(this.form.input_A.value, this.form.input_B.value, this.form)"></P><P><INPUT TYPE="button" VALUE="Clear Fields" name="ClearButton" onClick="ClearForm(this.form)"></P><P>Answer = <INPUT TYPE=TEXT NAME="Answer" SIZE=12></P></FORM></BODY></HTML>       Note for JavaScript files with Internet Explorer:    If you experience difficulty running your JavaScript code in Internet Explorer, we strongly suggest that you install the Firefox web browser and use it instead of Internet Explorer.
For more information or to download the Firefox installer,    see: http://www.mozilla.com/firefox/.
If you want to continue to use Internet Explorer, try adding the following line at the beginning of your file:    <!-- saved from url=(0014)about:internet -->    This line will cause Internet Explorer to run your file according to the security    rules for the Internet zone on your computer.
In our experience this may work, or    it may not.
For more information see http://www.phdcc.com/xpsp2.htm.
The objective of this project is to learn how to write a simple calculator with the JavaScript programming language.
You will learn how to write a simple JavaScript calculator that can add, subtract, multiply or divide two numbers.
You will be able to run your program in a Web browser.
Add error-checking to your program.
For example, what happens if the user types in words instead of numbers?
The JavaScript function isNaN() (for "is Not a Number") will be useful (you can look it up in the JavaScript reference).
You will also need to use "if...else" statements to control the flow of the program (you can look up "if...else" statements in the JavaScript reference, and you can also study the next JavaScript programming project, on sorting a list of words: ABC's of Programming: Writing a Simple 'Alphabetizer' with JavaScript.
Devise a way to test the input for validity before running calculations.
If there is a problem, use the built-in JavaScript alert() method to display a message to the user, explaining the problem.
Share your story with Science Buddies!I Did This Project!Please log in and let us know how things went.
View feedback on this project from other usersHide feedback on this project from other usersRecent Feedback Submissions   Sort by Date    Sort by User Name   ve2vdi said:  2016-08-25 15:42:15 What was the most important thing you learned?
The power of javascript What problems did you encounter?
the display Can you suggest any improvements or ideas?
No Overall, how would you rate the quality of this project?
Good What is your enthusiasm for science after doing your project?
Moderate Compared to a typical science class, please tell us how much you learned doing this project.
More   Do you agree?
0                        0                Report Inappropriate Comment    Hephaestus said:  2012-01-27 01:44:40 What was the most important thing you learned?
Computers Rock What problems did you encounter?
Too much to memorize Can you suggest any improvements or ideas?
make scripts short and easy to memorize Overall, how would you rate the quality of this project?
Very Good What is your enthusiasm for science after doing your project?
Compared to a typical science class, please tell us how much you learned doing this project.
Do you agree?
6                        9                Report Inappropriate Comment    plpso said:  2011-06-24 21:34:31 What was the most important thing you learned?
I played with the script, changed the function to multiply and was able to insert it into TinyMCE.
Happily, it functions properly!
What problems did you encounter?
I couldn't figure out how to set the "B value" to a constant number.
I would like my calculator to allow the user to input value A, (which is a quantity) and set value B to a price.
I'm using it as an extended price calculator on my website.
Can someone tell me how to set value B to a multiplier?
Can you suggest any improvements or ideas?
Yes, the problem I'm having would be a great option!
Overall, how would you rate the quality of this project?
Very Good What is your enthusiasm for science after doing your project?
Compared to a typical science class, please tell us how much you learned doing this project.
Do you agree?
22                        1                Report Inappropriate Comment  HTML concepts: start tags and end tags, comments, the the the the the JavaScript concepts: functions, variables, objects, properties, methods, events.
specific JavaScript functions: general programming concepts: reserved words, control statements (e.g., if...else, loops).
