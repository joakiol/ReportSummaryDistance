Proceedings of the 8th International Workshop on Tree Adjoining Grammar and Related Formalisms, pages 25?32,Sydney, July 2006. c?2006 Association for Computational LinguisticsThe weak generative capacity of linear tree-adjoining grammarsDavid Chiang?Information Sciences InstituteUniversity of Southern California4676 Admiralty Way, Suite 1001Marina del Rey, CA 90292, USAchiang@isi.edu1 IntroductionLinear tree-adjoining grammars (TAGs), by anal-ogy with linear context-free grammars, are tree-adjoining grammars in which at most one sym-bol in each elementary tree can be rewritten (ad-joined or substituted at).
Uemura et al (1999),calling these grammars simple linear TAGs (SL-TAGs), show that they generate a class of lan-guages incommensurate with the context-free lan-guages, and can be recognized in O(n4) time.Working within the application domain of mod-eling of RNA secondary structures, they findthat SL-TAGs are too restrictive?they can modelRNA pseudoknots but because they cannot gen-erate all the context-free languages, they cannotmodel even some very simple RNA secondarystructures.
Therefore they propose a more power-ful version of linear TAGs, extended simple linearTAGs (ESL-TAGs), which generate a class of lan-guages that include the context-free languages andcan be recognized in O(n5) time.Satta and Schuler (1998), working within theapplication domain of natural language syntax, de-fine another restriction on TAG which is also rec-ognizable in O(n5) time.
Despite being less pow-erful than full TAG, it is still able to generate lan-guages like the copy language {ww} and Dutchcross-serial dependencies (Joshi, 1985).
Kato etal.
(2004) conjecture that this restricted TAG is infact equivalent to ESL-TAG.In this paper we prove their conjecture, and alsoprove that adding substitution to ESL-TAG doesnot increase its weak generative capacity, whereasadding substitution to SL-TAG makes it weaklyequivalent to ESL-TAG.
Thus these four for-?This research was primarily carried out while the authorwas at the University of Pennsylvania.malisms converge to the same weak-equivalenceclass, the intuition being that the ?hardest?
oper-ation in TAG, namely, adjunction of a wrappingauxiliary tree in the middle of the spine of an-other wrapping auxiliary tree, is subjected to thelinearity constraint, but most other operations areunrestricted.1 Kato et al (2004) show that theseformalisms are more powerful than SL-TAG orgeneral CFG or their union and conjecture, on theother hand, that they are less powerful than TAG.We prove this conjecture as well.2 DefinitionsWe assume a standard definition of TAG, with orwithout substitution, in which adjunction is not al-lowed at foot nodes, and other nodes can have no-adjunction (NA) constraints, obligatory-adjunction(OA), or selective-adjunction constraints.
We usethe symbols ?, ?1, ?2, etc.
to range over nodes ofelementary trees or derived trees, although some-times we use the label of a node to refer to thenode itself.
The spine of an auxiliary tree is thepath from its root node to its foot node, inclusive.The subtree of a node ?
is the set of all nodesdominated by ?, including ?
itself.
The segmentof a tree from ?1 to ?2 (where ?1 dominates ?2)is the set of all nodes in the subtree of ?1 but notin the subtree of ?2.
A segment can be excised,which means removing the nodes of the segmentand making ?2 replace ?1 as the child of its parent.We also assume a standard definition of TAGderivation trees.
We use the symbols h, h1, h2, etc.to range over nodes of derivation trees.
The sub-1Adjunction at root and foot nodes is another operationthat by itself will not take a formalism beyond context-freepower, a fact which is exploited in Rogers?
regular-form TAG(Rogers, 1994).
But allowing this in a linear TAG would cir-cumvent the linearity constraint.25derivation of h is the subtree of h in the deriva-tion tree.
When we cut up derivations into sub-derivations or segments and recombine them, theedge labels (indicating addresses of adjunctionsand substitutions) stay with the node above, notthe node below.Now we define various versions of linear TAG.Definition 1.
A right (left) auxiliary tree is one inwhich the leftmost (rightmost) frontier node is thefoot node, and the spine contains only the root andfoot nodes.
A wrapping auxiliary tree is one whichis neither a left or a right auxiliary tree.Definition 2.
We say that a node of an elementarytree is active if adjunction is allowed to occur atit, and that a node is w-active if adjunction of awrapping auxiliary tree is allowed to occur at it.Definition 3.
A Satta-Schuler linear tree-adjoining grammar (SSL-TAG) is a TAG withsubstitution in which:1.
In the spine of each wrapping auxiliary tree,there is at most one w-active node.2.
In the spine of each left or right auxiliary tree,there are no w-active nodes, nor are there anyother adjoining constraints.Definition 4.
A simple linear tree-adjoininggrammar (SL-TAG), with or without substitution,is a TAG, with or without substitution, respec-tively, in which every initial tree has exactly oneactive node, and every auxiliary tree has exactlyone active node on its spine and no active nodeselsewhere.Definition 5.
An extended simple linear tree-adjoining grammar (ESL-TAG), with or withoutsubstitution, is a TAG, with or without substitu-tion, respectively, in which every initial tree hasexactly one active node, and every auxiliary treehas exactly one active node on its spine and atmost one active node elsewhere.3 PropertiesWe now review several old results and prove a fewnew results relating the weak generative capacityof these formalisms to one another and to (linear)CFG and TAG.
These results are summarized inFigure 1.3.1 Previous resultsProposition 1 (Uemura et al 1999).Linear CFL ( SL-TALLinear CFLSL-TAL CFLSL-TAL ?
CFLSSL-TAL = ESL-TAL = (E)SL-TAL + substTALFigure 1: Summary of results: an edge indicatesthat the higher formalism has strictly greater weakgenerative capacity than the lower.Proposition 2 (Uemura et al 1999).CFL ( ESL-TALProposition 3 (Kato et al 2004).CFL ?
SL-TAL ( ESL-TALProposition 4 (Satta and Schuler 1998; Ue-mura et al 1999).
SSL-TAG and ESL-TAG canbe parsed in O(n5) time.3.2 Weak equivalenceProposition 5.
The following formalisms areweakly equivalent:(i) ESL-TAG(ii) SL-TAG with substitution(iii) ESL-TAG with substitution(iv) SSL-TAGProof.
We prove this by proving four inclusions.L(ESL-TAG) ?
L(ESL-TAG + substitution):Trivial.L(ESL-TAG + substitution) ?
L(SSL-TAG):Trivial.L(SSL-TAG) ?
L(SL-TAG + substitution): Wedeal first with the left and right auxiliary trees, andthen with off-spine adjunction.First, we eliminate the left and right auxiliarytrees.
Since these only insert material to the left orright of a node, just as in tree-insertion grammars(TIGs), we may apply the conversion from TIGs totree-substitution grammars (Schabes and Waters,1995), used in the proof of the context-freeness of26(Step 1a)...X...?...X......XNALX?
XNA......XNAXNA...RX?...XNALX?
XNA...RX?
(Step 1b)XX?
Y ?RXYRXY RX?XY X?
?LXYLXLX?
YFigure 2: Elimination of left/right auxiliary trees.TIG.2 (Step 1a) For each active node X that is notthe root of a left or right auxiliary tree, we createfour copies of the containing elementary tree withX altered in the following ways: first, leave X un-changed; then, add a copy of X above it, makingboth nodes no-adjunction nodes, and add a newleft sister substitution node labeled LX or a newright sister substitution node labeled RX , or both.See Figure 2.
(Step 1b) For each ?
that was origi-nally a left (right) auxiliary tree with root/foot la-bel X , relabel the root node as LX (RX ) and deletethe foot node, and create two copies of the contain-ing elementary tree, one unchanged, and one witha new left (right) sister substitution node.
See Fig-ure 2.
When the modified ?
substitutes at one ofthe new children of an ?, the substitution clearlyresults in the same string that would have resultedfrom adjoining the original ?
to ?.This construction might appear incorrect in twoways.
First, the new grammar has trees with bothan LX and an RX node corresponding to the sameoriginal node, which would correspond to adjunc-tion of two auxiliary trees ?L and ?R at the samenode X in the original grammar.
But this newderivation generates a string that was generable inthe original grammar, namely by adjoining ?L at2This corresponds to Steps 1?4 of that proof (Schabes andWaters, 1995, p. 486).
Since that proof uses a more relaxeddefinition of left and right auxiliary trees, it is probable thatSSL-TAG could also be relaxed in the same way.X , then adjoining ?R at the root of ?L, which isallowed because the definition of SSL-TAG pro-hibits adjunction constraints at the root of ?L.Thus the first apparent problem is really the so-lution to the second problem: in the original gram-mar, a left auxiliary tree ?L could adjoin at the rootof a right auxiliary tree ?R, which in turn adjoinedat a node ?, whereas in the new grammar, ?R doesnot have an LX substitution node to allow this pos-sibility.
But the same string can be generated bysubstituting both trees under ?
in the new gram-mar.
In the case of a whole chain of adjunctionsof left/right auxiliary trees at the root of left/rightauxiliary trees, we can generate the same string byrearranging the chain into a chain of left auxiliarytrees and a chain of right auxiliary trees (which isallowed because adjunction constraints are prohib-ited at all the roots), and substituting both at ?.
(Step 2) Next, we eliminate the case of a wrap-ping auxiliary tree ?
that can adjoin at an off-spinenode ?.
(Step 2a) For each active off-spine node ?,we relabel ?
with a unique identifier ??
and split thecontaining elementary tree at ?:...??...?...T???B?
?...27(Step 2b) After step 2a has been completed for allnodes ?, we revisit each ?, and for every wrapping?
that could adjoin at ?, create a copy of ?
withroot relabeled to T??
and foot relabeled to B??
.XX??T??B??
?Then the original ?
is discarded.
Substituting oneof these copies of ?
at a T??
node and then sub-stituting a B??
tree at the former foot node has thesame effect as adjoining ?
at ?.
Finally, unless ?had an obligatory-adjunction constraint, simulatethe lack of adjunction at ?
by adding the initialtreeT??B??
?L(SL-TAG + substitution) ?
L(ESL-TAG): Thisconstruction is related to Lang?s normal formwhich ensures binary-branching derivation trees(Lang, 1994), but guarantees that one adjunctionsite is on the spine and one is off the spine.
(Step 0a) Ensure that the elementary trees arebinary-branching.
(Step 0b) Add a new root andfoot node to every elementary tree:X?XNAXXX??XNAXXNAX?
(Step 1) We transform the grammar so that noauxiliary tree has more than one substitution node.For any auxiliary tree with spine longer than fournodes, we apply the following transformation: tar-get either the active node or its parent, and callit Y .
Let Z1 be the child that dominates the footnode; let V1 be a fresh nonterminal symbol andinsert V1 nodes above Y and below Z1, and ex-cise the segment between the two V nodes, leav-ing behind an active obligatory-adjunction node.If Y has another child, call it Z2; let V2 be a freshnonterminal symbol and insert a V2 node aboveZ2, and break off the subtree rooted in V2, leav-ing behind a substitution node.
See Figure 3.
Thistransformation reduces the spine of the auxiliarytree by one node, and creates two new trees thatsatisfy the desired form.
We repeat this until theentire grammar is in the desired form.
(Step 2) Next, we transform the grammar sothat no initial tree has more than one substitutionnode, while maintaining the form acquired in step1.
For any initial tree with height greater than threenodes, we apply the same transformation as in step1, except that Y is the child of the root node, Z1is its left child, and Z2 is its other child if it ex-ists and is not already a substitution node.
See Fig-ure 3.
This transformation replaces an initial treewith at most two shorter initial trees, and one aux-iliary tree in the desired form.
Again we repeat thisuntil the entire grammar is in the desired form.
(Step 3) Finally, we convert each substitutionnode into an adjunction node (Schabes, 1990).
Foreach substitution node ?, let X be the label of ?.Relabel ?
to SX with obligatory adjunction andplace an empty terminal beneath ?....X?
?...SX OA?For each initial tree with root label X , convert itinto an auxiliary tree by adding a new root nodelabeled SX whose children are the old root nodeand a new foot node.X?SX NAX SX?3.3 Relation to tree-adjoining languagesOur second result, also conjectured by Kato etal., is that the weak equivalence class establishedabove is a proper subset of TAL.Proposition 6.
The languageL = {ar1bp1bp2cq1cq2ar2ar3cq3cq4bp3bp4ar4}is in TAL but not ESL-TAL.28(Step 1)X...YZ1...X?Z2NA...?X...V1YZ1V1...X?V2Z2NA...?X...V1OA...X?V1NAYZ1V1?V2?V2Z2NA...(Step 2)XYZ1...Z2...?XV1YZ1V1...V2Z2...?XV1OA...V1NAYZ1V1?V2?V2Z2...Figure 3: Separation of substitution nodes.
Some adjunction constraints are omitted to avoid clutter.Proof (L ?
TAL).
The language is generated bythe following TAG:X?XNAa1 Xa2 X?
a3a4XNAYZX?YNAb1 Yb2 Y?
b3b4ZNAc1 Zc2 Z?
c3c4Before proceeding to the other half of the proof,we define a few useful notions.
A marked string(as in Ogden?s Lemma) over an alphabet ?
is astring over ?
?
{0, 1}, where a symbol ?
?, 1?
ismarked and a symbol ?
?, 0?
is not.
Marked stringsover ?
can be projected into ??
in the obvious wayand we will talk about marked strings and theirprojections interchangeably.A decomposed string over ?
is a sequenceof strings over ?, which can be projected into??
by concatenating their members in order, andagain we will talk about decomposed strings andtheir projections interchangeably.
In particular,we will often simply write a decomposed string?w1, .
.
.
, wn?
as w1 ?
?
?wn.
Moreover, we may usethe symbol wi to refer to the occurrence of the ithmember of the decomposition in w; for example, ifw is a marked string, we may say that a symbol inwi is marked, or if w is generated by a TAG deriva-tion, we may say that wi is generated by some setof nodes in the derivation tree.The second half of the proof requires a double-decker pumping lemma.Condition 1 (cf.
Vijay-Shanker (1987), Theo-rem 4.7).
Given a language L and a decom-posed string x1zx2 ?
L with some symbols inz marked, there exists a decomposition of z intou1v1w1v2u2v3w2v4u3 such that one of the vi con-tains a mark, and L contains, for all k ?
1,x1(u1vk1w1vk2u2vk3w2vk4u3)x2Condition 2 (cf.
Uemura et al (1999), Lemma291).
Given a language L and a decomposed stringx1z1z2x2z3z4x3 ?
L with some symbols in one ofthe zi marked, there exist decompositions of the ziinto uiviwi such that one of the vi contains a mark,and L contains, for all k ?
1,x1(u1vk1w1)(u2vk2w2)x2(u3vk3w3)(u4vk4w4)x3Lemma 7.
If L is an ESL-TAL, then there existsa constant n such that for any z ?
L with n sym-bols marked, Condition 1 holds of ?
?
z ?
?.
More-over, it holds such that the w1 and w2 it providescan be further decomposed into z1z2 and z3z4, re-spectively, such that for any marking of n sym-bols of any of the zj , either Condition 1 holdsof z = x1zjx2 (where x1 and x2 are the sur-rounding context of zj) or Condition 2 holds ofz = x1z1z2x2z3z4x3 (where x1, x2, and x3 arethe surrounding context of z1z2 and z3z4).Proof.
Since L is an ESL-TAL, it is generated bysome ESL-TAG G. Let k be the number of ele-mentary trees in G and t be the maximum numberof terminal symbols in any elementary tree of G.Then set n = 2k+1t.The first invocation of Condition 1 is the TAGversion of Ogden?s lemma (Hopcroft and Ullman,1979).
To show that it holds, we need to find apath P in the derivation tree of z that has a cy-cle that generates at least one marked symbol.
De-fine a branch point to be a node h in the derivationtree such that the marked nodes generated by thesubderivation of h are not all generated by the sub-derivation of a single child of h. We seek a P thathas at least k + 1 branch points.
Start by addingthe root of the derivation tree to P .
Thereafter leth be the last node in P .
If h is a leaf, stop; other-wise, add to P the child of h whose subderivationgenerates the most marked symbols.
Note that ifa branch point in P generates m marked symbols,the next branch point generates at least m?t2 .
Ourchoice of n then guarantees that P has at least k+1branch points, at least two of which must corre-spond to the same auxiliary tree.
Call these nodesh1 and h2.These two nodes divide the derivation up intothree phases: first, the derivation segment from theroot to h1, which we call ?
(because it can bethought of as the derived initial tree it generates);then the segment from h1 to h2, which we call ?1(because it can be thought of as the derived aux-iliary tree it generates); then subderivation of h2,which we call ?2.
Note that we can form new validderivations of G by repeating ?2: that is, in termsof derivation trees, stacking ?
on top of one ormore copies of ?1, on top of ?2?or in terms ofderived trees, repeatedly adjoining ?1 into ?
andthen adjoining ?2.If ?2 adjoins into the spine of ?1, then let?u1, u2, u3?
be the parts of z generated by ?,?v1, v2, v3, v4?
the parts generated by ?1, and?w1, w2?
the parts generated by ?2 (see Figure 4a).Then these new derivations generate the stringsu1vk1w1vk2u2vk3w2vk4u3.But if ?2 adjoins at a node to the left of the spineof ?1, then let ?u1, v42, u3?
be the parts of the zgenerated by ?, ?v1, u2, v41, v43?
the parts gener-ated by ?1, and ?w1, w2?
the parts generated by?2 (see Figure 4b).
Then let v2 = v3 = ?
andv4 = v41v42v43; the new derivations will gener-ate the strings u1vk1w1vk2u2vk3w2vk4u3.
The casewhere ?2 adjoins to the right of the spine.Now we focus attention on ?2.
Let S be thelongest path of the derivation of ?2 containingthe root of the derivation and auxiliary trees ad-joined at spine nodes.
This S is unique becauseeach spine can only have one active node.
Let h3be the last node in S, which divides the deriva-tion of ?2 into two phases: the segment from theroot to h3, which we call ?21, and the subderiva-tion of h3, which we call ?22.
This gives a decom-position ?w1, w2?
= ?z1z21z22, z31z32z4?, where?22 generates z21 and z32 (see Figure 5).
Notethat the derivation nodes in S are the only onesthat can generate symbols in z1, z22, z31, and z4at once; the other derivation nodes only gener-ate symbols in a single zi.
We let z2 = z21z22and z3 = z31z32 and hand off the decomposition?w1, w2?
= ?z1z2, z3z4?
to our adversary, whomay choose a zj and mark n symbols in it.Then we recapitulate the reasoning above to geta path P ?
starting from the root of the deriva-tion of ?2 and containing at least k + 1 branchpoints, two of which correspond to the same aux-iliary tree.
Call these nodes h4 and h5 and the seg-ment between them ?3, and let ?v1, v2, v3, v4?
nowstand for the parts of ?w1, w2?
generated by ?3.Once again, we are going to repeat ?3 to gener-ate new derivations, pumping copies of the vi into?w1, w2?.
But the location of the vi depends on h5:if h5 is in S, then the vi will appear inside each ofthe zi, satisfying Condition 2.
Otherwise, they willall appear inside zj .30(a)?
?1?2?1?u1 v1 w1 v2 u2 v3 w2 v4 u3(b)??1?2?
?1u1 v1 w1 v2 w2 v41 v42 v43 u3Figure 4: Anatomy of derived tree in proof of Lemma 7.?21?22?21?z1 z21 z22 z31 z32 z4Figure 5: Anatomy of ?2 in proof of Lemma 7.31Finally we complete the proof of Proposition 6.Proof of Proposition 6 (L /?
ESL-TAL).
SupposeL is an ESL-TAL.
Let z be the string obtained bysetting p = q = r = n, and mark the a1s.
ThenLemma 7 must hold.
The first invocation of Con-dition 1 must give a w1 of the form a?1bn1 bn2 cn1 cn2a?2and a w2 of the form a?3cn3 cn4 bn3 bn4a?4.
Lemma 7must further decompose w1 into z1z2.
Obviously,either z1 contains all the bjs or z2 contains allthe cjs.
Supposing the former, we can obtain acontradiction by marking the b1s: Condition 2is impossible because it would give unequalnumbers of b1s and b2s; Condition 1 is impossiblebecause it would give unequal numbers of b1s andb3s.
On the other hand, if z2 contains all the cjs,we mark the c1s, and both Conditions are againrendered impossible.4 ConclusionThe weak equivalence of the previously proposedESL-TAG and SSL-TAG, along with the fact thatSL-TAG with substitution and ESL-TAG withsubstitution belong to the same class, suggeststhat they represent a useful compromise betweenCFGs and TAGs.
In the two-dimensional languagehierarchy of Rambow and Satta (1999), where thetwo dimensions are rank (how many substructuresdoes a rule combine) and fanout (how many dis-continuous spans of the input does a substructurecover), CFGs comprise the fanout-1 grammars andTAGs are a subset of the the fanout-2 grammars;both have arbitrary rank, whereas linear CFGsand linear TAGs are rank-1.
The grammars dis-cussed here are mixed: a rule can combine onefanout-2 substructure and an arbitrary number offanout-1 substructures.
A related example wouldbe a version of synchronous CFG that allows onlyone pair of linked nonterminals and any numberof unlinked nonterminals, which could be bitext-parsed in O(n5) time, whereas inversion transduc-tion grammar (Wu, 1997) takes O(n6).
It may beof interest to make a more general exploration ofother formalisms that are mixed in this sense.AcknowledgementsThanks to Hiroyuki Seki for discussions that led tothis paper, and to Anoop Sarkar, Giorgio Satta, andWilliam Schuler.
This research was partially sup-ported by NSF grant ITR EIA-02-05456.
S. D. G.ReferencesJohn E. Hopcroft and Jeffrey D. Ullman.
1979.
Intro-duction to Automata Theory, Languages, and Com-putation.
Addison-Wesley, Reading, MA.Aravind K. Joshi.
1985.
Tree adjoining grammars:How much context-sensitivity is necessary for as-signing structural descriptions?
In David Dowty,Lauri Karttunen, and Arnold Zwicky, editors, Nat-ural Language Parsing, pages 206?250.
CambridgeUniversity Press, Cambridge.Yuki Kato, Hiroyuki Seki, and Tadao Kasami.
2004.Subclasses of tree adjoining grammar for RNA sec-ondary structure.
In Proc.
Seventh InternationalWorkshop on TAG and Related Formalisms (TAG+),pages 48?55.Bernard Lang.
1994.
Recognition can be harder thanparsing.
Computational Intelligence, 10(4):484?494.
Special Issue on Tree Adjoining Grammars.Owen Rambow and Giorgio Satta.
1999.
Independentparallelism in finite copying parallel rewriting sys-tems.
Theoretical Computer Science, 223:87?120.James Rogers.
1994.
Capturing CFLs with tree adjoin-ing grammars.
In Proc.
32nd Annual Meeting of theACL, pages 155?162.Giorgio Satta and William Schuler.
1998.
Restrictionson tree adjoining languages.
In Proc.
COLING-ACL, pages 1176?1182.Yves Schabes and Richard C. Waters.
1995.
Treeinsertion grammar: a cubic-time parsable formal-ism that lexicalizes context-free grammar withoutchanging the trees produced.
Computational Lin-guistics, 21:479?513.Yves Schabes.
1990.
Mathematical and Computa-tional Aspects of Lexicalized Grammars.
Ph.D. the-sis, University of Pennsylvania.
Available as techni-cal report MS-CIS-90-48.Yasuo Uemura, Aki Hasegawa, Satoshi Kobayashi, andTakashi Yokomori.
1999.
Tree adjoining grammarsfor RNA structure prediction.
Theoretical ComputerScience, 210:277?303.K Vijayashanker.
1987.
A study of tree adjoininggrammars.
Ph.D. thesis, University of Pennsylva-nia.
Available as technical report MS-CIS-88-03.Dekai Wu.
1997.
Stochastic inversion transductiongrammars and bilingual parsing of parallel corpora.Computational Linguistics, 23:377?404.32
