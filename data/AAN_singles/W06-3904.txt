Towards a redundancy elimination algorithmfor underspecified descriptionsAlexander Koller and Stefan ThaterDepartment of Computational LinguisticsUniversit?t des Saarlandes, Saarbr?cken, Germany{koller,stth}@coli.uni-sb.deAbstractThis paper proposes an efficient algorithm for the redundancy elimination problem: Givenan underspecified semantic representation (USR), compute an USR which has fewer read-ings, but still describes at least one representative of each semantic equivalence class of theoriginal readings.
The algorithm operates on underspecified chart representations whichare derived from dominance graphs; it can be applied to the USRs computed by large-scale grammars.
To our knowledge, it is the first redundancy elimination algorithm whichmaintains underspecification, rather than just enumerating non-redundant readings.1 IntroductionUnderspecification is the standard approach to dealing with scope ambiguities incomputational semantics [12,6,7,2].
The basic idea is to not enumerate all possiblesemantic representations for each syntactic analysis, but to derive a single compactunderspecified representation (USR).
This simplifies semantics construction, andcurrent algorithms support the efficient enumeration of readings from an USR [10].In addition, underspecification has the potential for eliminating incorrect or re-dundant readings by inferences based on context or world knowledge, without evenenumerating them.
For instance, sentences with scope ambiguities often have read-ings which are semantically equivalent.
In this case, we typically need to retainonly one reading from each equivalence class.
This situation is illustrated by thefollowing two sentences from the Rondane treebank, which is distributed with theEnglish Resource Grammar (ERG; [5]), a broad-coverage HPSG grammar.
(1) For travellers going to Finnmark there is a bus service from Oslo to Altathrough Sweden.
(Rondane 1262)(2) We quickly put up the tents in the lee of a small hillside and cook for the firsttime in the open.
(Rondane 892)For the two example sentences, the ERG (Version 01-2006) derives USRs withseven and six quantifiers, respectively, that correspond to various types of nounphrases (including proper names and pronouns).
The USR for (1) describes 3960readings, which are all semantically equivalent to each other.
On the other hand, theUSR for (2) has 480 readings, which fall into two classes of mutually equivalentreadings, characterised by the relative scope of ?the lee of?
and ?a small hillside.
?This paper presents an algorithm for the redundancy elimination problem: Givenan USR, compute an USR which has fewer readings, but still describes at least onerepresentative of each equivalence class ?
without enumerating any readings.
Thisalgorithm computes the one or two representatives of the semantic equivalenceclasses in the above examples, so subsequent modules don?t have to deal with allthe other equivalent readings.
It also closes the gap between the large number ofreadings predicted by the grammar and the intuitively perceived much lower degreeof ambiguity of these sentences.
Finally, it can be helpful for a grammar designerbecause it is much more feasible to check whether two readings are linguisticallyreasonable than 480.We model equivalence in terms of rewrite rules that permute quantifiers withoutchanging the semantics of the readings.
The particular USRs we work with are un-derspecified chart representations, which can be computed from dominance graphs(or USRs in some other underspecification formalisms) efficiently [10].
The algo-rithm can deal with many interesting cases, but is incomplete in the sense that theresulting USR may still describe multiple equivalent readings.To our knowledge, this is the first algorithm in the literature for redundancyelimination on the level of USRs.
There has been previous research on enumeratingonly some representatives of each equivalence class [13,4], but these approachesdon?t maintain underspecification: After running their algorithms, we have a set ofreadings rather than an underspecified representation.Plan of the paper.
We will first define dominance graphs and review the necessarybackground theory in Section 2.
We will then give a formal definition of equiva-lence and derive some first results in Section 3.
Section 4 presents the redundancyelimination algorithm.
Finally, Section 5 concludes and points to further work.2 Dominance GraphsThe basic underspecification formalism we assume here are labelled dominancegraphs [1].
Dominance graphs are equivalent to leaf-labelled normal dominanceconstraints [7], which have been discussed extensively in previous literature.Definition 2.1 A (compact) dominance graph is a directed graph (V,E unionmultiD) withtwo kinds of edges, tree edges E and dominance edges D, such that:(i) the graph (V,E) defines a collection of node disjoint trees of height 0 or 1.
Wecall the trees in (V,E) the fragments of the graph.
(ii) if (v,v?)
is a dominance edge in D, then v is a hole and v?
is a root in G. A nodev is a root (in G) if v does not have incoming tree edges; otherwise, v is a hole.A labelled dominance graph over a ranked signature ?
is a triple G = (V,E unionmultiD,L)aysampleyseex,yaxrepr-ofx,zazcompz1 2 34 5 67ayaxaz123sampleyseex,yrepr-ofx,zcompzayaxsampleyseex,yrepr-ofx,zazcompz123Fig.
1.
A dominance graph that represents the five readings of the sentence ?a representativeof a company saw a sample?
(left) and two (of five) configurations.1 2 34 5 67h2h1h4h3h6h51 34 5 67h2h1h6h5?
?h2h1h4h3h6h521 34 5 6 7Fig.
2.
An example computation of a solved form.such that (V,E unionmultiD) is a dominance graph and L : V  ?
is a partial labellingfunction which assigns a node v a label with arity n iff v is a root with n outgoingtree edges.
Nodes without labels (i.e., holes) must have outgoing dominance edges.We will write v: f (v1, .
.
.
,vk) for a fragment whose root v is labelled with f andwhose holes are v1, .
.
.
,vk.
We will write R(F) for the root of the fragment F , andwe will typically just say graph instead of labelled dominance graph.An example of a labelled dominance graph is shown to the left of Fig.
1.
Treeedges are drawn as solid lines, and dominance edges are drawn as dotted lines, di-rected from top to bottom.
This graph can serve as an USR for the sentence ?a repre-sentative of a company saw a sample?
if we demand that the holes are ?plugged?
byroots while realising the dominance edges as dominance, as in the two (of five) con-figurations shown to the right [7].
Configurations encode semantic representationsof the sentence, and we freely read configurations as ground terms over ?.2.1 Solving dominance graphsAlgorithms for solving a dominance graph in order to compute the readings it de-scribes typically compute its minimal solved forms [1,3].
In this paper, we restrictourselves to hypernormally connected graphs (defined below), for which one canshow that all solved forms are minimal and bijectively correspond to configurations.Let G,G?
be dominance graphs.
We say that G is in solved form iff it is a forest,and G is a solved form of G?
if G is in solved form and more specific than G?
i.e., Gand G?
have the same labels and tree fragments, and the reachability relation of Gextends that of G?.
G?
is solvable if it has a solved form G. If G?
is hypernormallyconnected, then each hole in G has exactly one outgoing dominance edge, and Gcan be mapped to a configuration by identifying the two ends of each dominanceedge; conversely, we can find a unique solved form for each configuration.
Thegraph to the left of Fig.
2 shows one of the (minimal) solved forms of the examplegraph, which corresponds to the configuration in the middle of Fig.
1.Compute-Chart(G)1 if there is an entry for G in the chart2 then return true3 free?
Free-Fragments(G)4 if free = /05 then return false6 if G contains only one fragment7 then return true8 for each F ?
free9 do split?
Split(G,F)10 for each S ?Wccs(G?F)11 do if Compute-Chart(S) = false12 then return false13 add (G,split) to the chart14 return true{1,2,3,4,5,6,7} :?1,h1 7?
{4},h2 7?
{2,3,5,6,7}?
?2,h3 7?
{1,4,5},h4 7?
{3,6,7}?
?3,h5 7?
{5},h6 7?
{1,2,4,5,7}?
{2,3,5,6,7} :?2,h3 7?
{5},h4 7?
{3,6,7}?
?3,h5 7?
{6},h6 7?
{2,5,7}?
{3,6,7} :?3,h5 7?
{6},h6 7?
{7}?
{2,5,7} :?2,h3 7?
{5},h4 7?
{7}?
{1,4,5} :?1,h1 7?
{4},h2 7?
{5}?
{1,2,4,5,7} :?1,h1 7?
{4},h2 7?
{2,5,7}?
?2,h3 7?
{1,4,5},h4 7?
{7}?Fig.
3.
The chart solver and an example chart computed for the dominance graph in Fig.
2.The key concept of the solver we build upon is that of a free fragment [3].
Afragment F in a solvable graph G is free iff there is a solved form in which F is atthe root.
It can be shown that a fragment is free iff it has no incoming dominanceedges and its holes are in different biconnected components of the graph i.e., theyare disconnected if the root of the fragment is removed from the graph [3].
Remov-ing a free fragment from a graph splits the graph into different weakly connectedcomponents (wccs) ?
one for each hole.
Thus each free fragment F induces a splitof G, which consists of a reference to F and a mapping of the other fragments to thehole to which they are connected.
For instance, the example graph has three freefragments: 1, 2, and 3.
By removing fragment 2, the graph is decomposed into twowccs, which are connected to the holes h3 and h4, respectively (see Fig.
2).The solver [10] is shown in Fig.
3.
It computes a chart-like data structure whichassigns sets of splits to subgraphs.
For each subgraph it is called on, the solvercomputes the free fragments, the splits they induce, and calls itself recursively onthe wccs of each split.
It records subgraphs and splits in the chart, and will notrepeat work for a subgraph it has encountered before.
The algorithm returns true iffthe original graph was solvable.
The chart tells us how to build the minimal solvedforms of the graph: For each subgraphs, pick any split, compute a solved form foreach wcc recursively, and plug them into the given hole of the split?s root fragment.As an example, the chart for the graph in Fig.
1 is shown to the right of Fig.
3.Notice that the chart which the solver computes, while possibly exponentiallylarger than the original graph, is still exponentially smaller than the entire set ofreadings because common subgraphs (such as {2,5,7} in the example) are repre-sented only once.
Thus the chart can still serve as an underspecified representation.2.2 Hypernormally connected dominance graphsA hypernormal path [1] in a graph G is a path in the undirected version Gu of G thatdoes not use two dominance edges that are incident to the same hole.
We say thatG is hypernormally connected (hnc) iff each pair of nodes is connected by a simplehypernormal path in G. Hnc graphs are equivalent to chain-connected dominanceconstraints [9], and are closely related to dominance nets [11].
The results in thispaper are restricted to hnc graphs, but this does not limit the applicability of ourresults: an empirical study suggests that all dominance graphs that are generated bycurrent large-scale grammars are (or should be) hnc [8].The key property of hnc dominance graphs is that their solved forms correspondto configurations, and we will freely switch between solved forms and their corre-sponding configurations.
Another important property of hnc graphs which we willuse extensively in the proofs below is that it is possible to predict which holes offragments can dominate other fragments in a solved form.Lemma 2.2 Let G be a hnc graph with free fragment F. Then all weakly connectedcomponents of G?F are hnc.Proposition 2.3 Let F1,F2 be fragments in a hnc dominance graph G. If there is asolved form S of G in which R(F1) dominates R(F2), then there is exactly one holeh of F1 which is connected to R(F2) by a simple hypernormal path which doesn?tuse R(F1).
In particular, h dominates R(F2) in S.Proof.
Let?s say that F1 dominates F2 in some solved form S. There is a run ofthe solver which computes S. This run chooses F1 as a free fragment before itchooses F2.
Let?s call the subgraph in which the split for F1 is chosen, G?.
G?
is hnc(Lemma 2.2), so in particular there is a simple hypernormal path from the hole hof F1 which is in the same wcc as F2 to R(F2); this path doesn?t use R(F1).
On theother hand, assume there were another hole h?
of F1 which is connected to R(F2) bya path that doesn?t use R(F1).
Then the path via R(F2) would connect h and h?
evenif R(F1) were removed, so h and h?
would be in the same biconnected componentof G, in contradiction to the assumption that F1 is free in G?.For the second result, note that F2 is assigned to the hole h in the split for F1.2The following definition captures the complex condition in Prop.
2.3:Definition 2.4 Let G be a hnc dominance graph.
A fragment F1 in G is called apossible dominator of another fragment F2 in G iff it has exactly one hole h whichis connected to R(F2) by a simple hypernormal path which doesn?t use R(F1).
Wewrite ch(F1,F2) for this unique h.3 EquivalenceEquivalence is traditionally defined as the relation between formulas which havethe same interpretation.
However, even first-order equivalence is an undecidableproblem, thus an algorithm which checks for semantic equivalence of different con-figurations of a graph can?t possibly be efficient.
On the other hand, we do not needto solve the full semantic equivalence problem, as we only want to compare formu-las that are readings of the same sentence i.e., different configurations of the sameUSR.
Such formulas only differ in the way that the fragments are combined.
Wecan therefore approximate equivalence by using a rewrite system that permutes frag-ments and defining equivalence of configurations as mutual rewritability as usual.By way of example, consider again the two (equivalent) configurations shownin Fig.
1.
We can obtain the second configuration from the first one by applying thefollowing rewrite rule, which rotates the nodes 1 and 2:ax(az(P,Q),R)?
az(P,ax(Q,R)) (3)The formulas on both sides of the arrow are semantically equivalent in first-orderlogic for any choice of the subformulas P, Q, and R. Thus the equivalence of thetwo configurations with respect to our one-rule rewrite system implies that they arealso semantically equivalent.While we will require that the rewriting approximation is sound i.e., rewritesformulas into equivalent formulas, we cannot usually hope to achieve completenessi.e., there will be semantic equivalences that are not modelled by the rewritingequivalence.
However, we believe that the rewriting-based system will still proveto be useful in practical applications, as the permutation of quantifiers is exactly thekind of variability that an underspecified description allows.We formalise this rewriting-based notion of equivalence as follows.
The defini-tion uses the abbreviation x[1,k) for x1, .
.
.
,xk?1, and x(k,n] for xk+1, .
.
.
,xn.Definition 3.1 A permutation system R is a system of rewrite rules over a signature?
of the following form:f1(x[1,i), f2(y[1,k),z,y(k,m]),x(i,n]) ?
f2(y[1,k), f1(x[1,i),z,x(i,n]),y(k,m])The permutability relation P(R) is the binary relation P(R)?
(?
?N)2 which con-tains exactly the pairs (( f1, i),( f2,k)) and (( f2,k),( f1, i)) for each such rewrite rule.As usual, we say that two terms are equivalent with respect to R, s?R t, iff thereis a sequence of rewrite steps and inverse rewrite steps that rewrite s into t. We saythat R is sound with respect to a semantic notion of equivalence ?
if ?R ??.
If Gis a graph over ?
and R a permutation system, then we write SCR(G) for the set ofequivalence classes Conf(G)/?R, where Conf(G) is the set of configurations of G.A rewrite system (let?s call it Rfol) which is sound for the standard equivalencerelation of first-order logic could use rule (3) and the three other permutations oftwo existential quantifiers, plus the following rule for universal quantifiers:everyx(X ,everyy(Y,Z))?
everyy(Y,everyx(X ,Z))The other three permutations of universal quantifiers, as well as the permutationsof universal and existential quantifiers, are not sound.It is possible to compute SCR(G) by solving G and using a theorem prover forequational reasoning to compute the equivalence classes of the configurations, butthis is very inefficient.
To replace this by a computation on the USR, we must beable to recognise whether two fragments of a graph can be permuted in all config-urations of the graph.
This is not possible in general: If we don?t know in advancexi+1xnx1xi-1y1yk-1yk+1ymy1yk-1yk+1ymzF2F1?
??
?vkv = uiuF2F1x1xi-1xi+1xn?
??
?zvuivk= u(a)F2WF1ui?vjvkw?r?uv(b)Fig.
4.
Diagrams for the proof of Lemma 3.3which hole of one fragment the other fragment can plug, we can?t know whether thetwo fragments can be permuted.
However, in a hnc graph, the hole of a fragmentwhich another fragment can plug is determined uniquely (because of Lemma 2.3),and can be recognised without solving the graph.Definition 3.2 Let R be a permutation system.
Two fragments F1 and F2 with rootlabels f1 and f2 in a graph G are called R-permutable iff they are possible domina-tors of each other and (( f1,ch(F1,F2)),( f2,ch(F2,F1))) ?
P(R).Lemma 3.3 Let R be a permutation system, let F1 = u: f1(u1, .
.
.
,un) and F2 =v: f2(v1, .
.
.
,vm) be R-permutable fragments in the hnc graph G, such that F2 is free,and let C1 be a configuration of G in which u is the father of v. Then:(a) It is possible to apply a R-rewrite step or an inverse R-rewrite step to C1 at u;call the resulting tree C2.
(b) C2 is also a configuration of G.(c) C2 ?R C1.Proof.
Let i = ch(F1,F2) and k = ch(F2,F1); we know that (( f1, i),( f2,k)) ?
P(R).
(a) F1 is a possible dominator of F2, so ui is plugged with v in C1 (Lemma 2.3).Thus the (possibly inverse) rule which justified the tuple (( f1, i),( f2,k)) is applica-ble at u.
(b) We must verify that every dominance edge in G is realised byC2.
As Fig.
4ashows, all dominance edges that do not go out of a hole of F1 are still triviallyrealised byC2.
Now let?s consider dominances out of the holes of F1.?
Dominance edges out of any u j with j 6= i are still satisfied (see the figure).?
Dominance edges from ui to a node in z are still satisfied (see the figure).?
Dominance edges from ui to v: Such edges cannot exist in G as F2 is free.?
Dominance edges from ui to a node w in some y j with j 6= k: Such edges cannotexist either.
F2 is a possible dominator of the fragment W whose root w is, sothere is a simple hypernormal path piw from ch(F2,W ) to w which doesn?t use v;ch(F2,W ) = v j because v j dominates w in C1 (Lemma 2.3).
On the other hand,F2 is a possible dominator of F1, so there is a simple hypernormal path piu fromvk to ui which doesn?t use v. Now if there were a dominance edge from ui to win G, then v j and vk would be in the same biconnected component (they wouldbe connected via piu ?
(ui,w) ?
pi?1w if v were removed), which contradicts thefreeness of F2 (see Fig.
4b).4 Underspecified redundancy eliminationNow we can finally consider the problem of strengthening an USR in order toremove redundant readings which are equivalent to other readings.
We will definean algorithm which gets as its input a graph G, a chart as computed by COMPUTE-CHART, and a permutability relation P(R).
It will then remove splits from the chart,to the effect that the chart represents fewer solved forms of the original graph, but atleast one representative from each class in SCR(G) remains.
The subgraph sharingof the original chart will be retained, so the computed chart is still an USR.The key concept in the redundancy elimination algorithm is that of a permutablesplit.
Intuitively, a split of G is called permutable if its root fragment F is per-mutable with all other fragments in G which could end up above F .
Because ofLemma 3.3, we can then always pull F to the root by a sequence of rewrite steps.This means that for any configuration of G, there is an equivalent configurationwhose root is F ?
i.e., by choosing the split for F , we lose no equivalence classes.Definition 4.1 Let R be a permutation system.
A split S of a graph G is called R-permutable iff the root fragment F of S is R-permutable with all other fragments inG which are possible dominators of F in G.In the graph of Fig.
1, all three splits are Rfol-permutable: For each of the upperfragments, the other two upper fragments are possible dominators, but as all threefragments are labelled with existential quantifiers and Rfol contains all permutationsof existential quantifiers, the fragments are permutable with each other.
And indeed,we can pick any of the three fragments as the root fragment, and the resulting splitwill describe a representative of the single equivalence class of the graph.Proposition 4.2 Let G be a hnc graph, and let S be a permutable split of G. ThenSC(S) = SC(G).Proof.
If G is unsolvable, the claim is trivially true.
Otherwise, let C be an arbi-trary configuration of G; we must show that S = (F,h1 7?
G1, .
.
.
,hn 7?
Gn) has aconfigurationC?
which is equivalent toC.Let?s say that the fragments which properly dominate F in C are F1, .
.
.
,Fn(n ?
0), ordered in such a way that Fi dominates Fj in C for all i < j.
Each Fi isa possible dominator of F , by Prop.
2.3.
Because S is permutable, this means thateach Fi is permutable with F in G. By applying Lemma 3.3 n times (first to F andFn, then to F and Fn?1, and so on), we can compute a configuration C?
of G inwhich F is at the root and such that C?
?R C. But C is a configuration of S, whichproves the theorem.
2This suggests the following redundancy elimination algorithm:Redundancy-Elimination(Ch,G,R)1 for each subgraph G?
inCh2 do if G?
has an R-permutable split S3 then remove all splits for G?
except for S fromChBecause of Prop.
4.2, the algorithm is correct in that for each configurationC ofG, the reduced chart still has a configurationC?
withC?R C?.
The particular choiceof S doesn?t affect the correctness of the algorithm (but may change the numberof remaining configurations).
However, the algorithm is not complete in the sensethat the reduced chart can have no two equivalent configurations.
We will illustratethis below.
We can further optimize the algorithm by deleting subgraphs (and theirsplits) that are not referenced anymore by using reference counters.
This doesn?tchange the set of solved forms of the chart, but may further reduce the chart size.In the running example, we would run REDUNDANCY-ELIMINATION on thechart in Fig.
3.
As we have seen, all three splits of the entire graph are permutable,so we can pick any of them e.g., the split with root fragment 2, and delete the splitswith root fragments 1 and 3.
This reduces the reference count of some subgraphs(e.g.
{2,3,5,6,7}) to 0, so we can remove these subgraphs too.
The resulting chartis shown below, which represents a single solved form (the one shown in Fig.
2).
{1,2,3,4,5,6,7} : ?2,h2 7?
{1,4},h4 7?
{3,6,7}?
{1,4} : ?1,h1 7?
{4}?
{3,6,7} : ?3,h5 7?
{6},h6 7?
{7}?Now consider variations of the graph in Fig.
1 in which the quantifier labels aredifferent; these variant graphs have exactly the same chart, but fewer fragment pairswill be permutable.
If all three quantifiers are universal, then the configurations fallinto two equivalence classes which are distinguished by the relative scope of thefragments 1 and 2.
The algorithm will recognise that the split with root fragment 3is permutable and delete the splits for 1 and 2.
The resulting chart has two solvedforms.
Thus the algorithm is still complete in this case.
If, however, the fragments1 and 2 are existential quantifiers and the fragment 3 is universal, there are threeequivalence classes, but the chart computed by the algorithm will have four solvedforms.
The problem stems from the fact that neither of the existential quantifiers ispermutable as long as the universal quantifier is still in the same subgraph; but thetwo configurations in which 2 dominates 3 are equivalent.Runtime analysis.
Given a graph G with n nodes and m edges, we can compute atable which specifies for each pair u,v of root nodes whether there is a unique holeof u from which v can be reached via a simple hypernormal path which doesn?t useu, and which hole this is.
A naive algorithm for doing this iterates over all u and vand then performs a depth-first search through G, which takes time O(n2(n+m)),which is a negligible runtime in practice.Given this table, we can determine the possible dominators of each fragmentin time O(n) (because there are at most O(n) possible dominators).
Thus it takestime O(n) to decide whether a split is permutable, and time O(n ?S), where S is thenumber of splits in the chart, to run the entire elimination algorithm.
The referencecounting optimisation adds nothing to this asymptotic runtime, as each split maytrigger at most one reference count update for each hole of the split?s root fragment.5 ConclusionWe have presented an algorithm for redundancy elimination on underspecified chartrepresentations.
It checks for each subgraph in the chart whether it has a permutablesplit; if yes, it removes all other splits for this subgraph.
This reduces the set ofdescribed readings, while making sure that at least one representative of each orig-inal equivalence class remains while maintaining underspecification.
Equivalenceis defined with respect to a certain class of rewriting systems which approximatessemantic equivalence of the described formulas and fits well with the underspecifi-cation setting.
The algorithm runs in polynomial time in the size of the chart.The algorithm is useful in practice: it reduces the USRs for (1) and (2) from theintroduction to one and two solved forms, respectively.
In fact, initial experimentswith the Rondane treebank suggest that it reduces the number of readings of atypical sentence by an order of magnitude.
It does this efficiently: Even on USRswith billions of readings, for which the enumeration of readings would take abouta year, it finishes after a few seconds.
However, the algorithm is not complete inthe sense that the computed chart has no more equivalent readings.
We have someideas for achieving this kind of completeness, which we will explore in future work.Another line in which the present work could be extended is to allow equivalencewith respect to arbitrary rewrite systems.References[1] Althaus, E., D. Duchier, A. Koller, K. Mehlhorn, J. Niehren and S. Thiel, An efficient graphalgorithm for dominance constraints, Journal of Algorithms 48 (2003), pp.
194?219.
[2] Blackburn, P. and J. Bos, ?Representation and Inference for Natural Language.
A First Coursein Computational Semantics,?
CSLI Publications, 2005.
[3] Bodirsky, M., D. Duchier, J. Niehren and S. Miele, An efficient algorithm for weakly normaldominance constraints, in: ACM-SIAM Symposium on Discrete Algorithms (2004).
[4] Chaves, R. P., Non-redundant scope disambiguation in underspecified semantics, in:Proceedings of the 8th ESSLLI Student Session, Vienna, 2003, pp.
47?58.
[5] Copestake, A. and D. Flickinger, An open-source grammar development environment andbroad-coverage english grammar using HPSG, in: Proc.
of LREC, 2000.
[6] Copestake, A., D. Flickinger, C. Pollard and I.
Sag, Minimal recursion semantics: Anintroduction., Journal of Language and Computation (2004), to appear.
[7] Egg, M., A. Koller and J. Niehren, The Constraint Language for Lambda Structures, Logic,Language, and Information 10 (2001), pp.
457?485.
[8] Fuchss, R., A. Koller, J. Niehren and S. Thater, Minimal recursion semantics as dominanceconstraints: Translation, evaluation, and analysis, in: Proc.
of ACL, Barcelona, 2004.
[9] Koller, A., J. Niehren and S. Thater, Bridging the gap between underspecification formalisms:Hole semantics as dominance constraints, in: Proc.
of EACL-03, 2003.
[10] Koller, A. and S. Thater, The evolution of dominance constraint solvers, in: Proc.
of ACL-05Workshop on Software, Ann Arbor, 2005.
[11] Niehren, J. and S. Thater, Bridging the gap between underspecification formalisms: Minimalrecursion semantics as dominance constraints, in: Proc.
of ACL-03, 2003.
[12] van Deemter, K. and S. Peters, ?Semantic Ambiguity and Underspecification,?
CSLI, 1996.
[13] Vestre, E., An algorithm for generating non-redundant quantifier scopings, in: Proc.
of EACL,Berlin, 1991, pp.
251?256.
