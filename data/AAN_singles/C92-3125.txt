A Logic Programming View of Relational MorphologyHarvey AbramsonInstitute of Industrial Science, Univers i ty of  TokyoMinato-ku,  Roppongi  7-22-1, Tokyo  106, Japane-mail:  harvey@ godzi l la.
i is.u-tokyo.ac.
jpAbst rac tWe use the more abstract term "relational morphology"in place of tile usual "two-level morphology" in order toemphasize an aspect of Koskenniemi's work which hasbeen overlooked in favor of implementation issues usingthe finite state paradigm, namely, that a mathematicalrelation can be specified between the lexical and surfacelevels of a language.
Relations, whether finite state ornot, can be computed using any of several paradigms,and we present a logical reading of a notation forrelational morphological rules (similar to that ofKoskenniemi's) which can in fact be used toautomatically generate Prolog program clauses.
Like diefinite state implementations, the relation can becomputed in either direction, either from the surface tothe lexieal evel, or vice versa.
At rite very least, thisprovides amorphological complement tologic grammarswhich deal mainly with syntax and semantics, in aprogramming environment which is more user-friendlythan the finite state programming paradigm.
Themorphological rules often compile simply intounification of the arguments in the generatedmorphology predicate followed by a recursive call of thesaid predicate.
Further speed can be obtained when aProlog compiler, rather than an interpreter, is used forexecution.Introduction.
Kimmo Koskenniemi's so called "two-level model" of computational morphology (1983) inwhich phonological rules are implemented asfinite statetransducers has been the subject of a great deal ofattention.
The two-level model is based partly on earlierwork of Johnson (1972), who considered that a set of"simultaneous" phonological rules could be represented bysuch a transducer, and of Kaplan and Kay (1983) whothought that ordered generative rules could be implementedas a cascading sequence of such transducers.
Koskenniemiin fact implemented the phonological rules by a set offinite state tranducers unning in parallel, rather than by asingle large finite state machine into which manycascading machines could be combined.
Subsequent toKoskenniemi's original work, there was a LISP-basedimplementation called KIMMO (Kartunnen 1983), andtwo-level descriptions of English, Rumanian, French andJapanese (Kartunnen and Wittenburg, Khan, Lun, SasakiAlam 1983).
A later LISP based implementation byDalrymple t al (1987) called DKIMMO/TWOL helpedthe user by converting two-level rules into finite statetransducers: in earlier implementations, and in the recentPC-KIMMO system (Antworth 1990), it was the user'stask to generate the machine, s from two-level descriptions.However one very important contribution ofKoskeaniemito morphology, namely the notion that there is a relationbetween the surface and lexical "levels", has beensomewhat overlooked by implementation issues having todo with the couversion of two-level rules into fiuite stateautomata in the various KIMMO systems.
The two-levelrules according to this notion, unlike the rules ofgenerative morphology which transform representationsfrom one level to representations i  the other, express acorrespondence between lexical and surface levels.Furthermore since no directionality is implied ill thedefinition of a relation, unlike geuerative rules, the sameset of two-level rules applies both in going from surfaceto lexieal levels and vice versa.
Rather than beingprocethtral rules, they are declarative.
Consequently, anycorrect implementation of the two-level rules is arelational program which can be used either analytically orgeneratively.
We will henceforth, in order to emphasizethe fact that a relation is being defined by them, refer torelational morphology rules rather than to themathematically neutral term "two-level rules".Despite the recognition that relational morphology rulesare declarative, the main emphasis n using them has beenobscured by the original finite state implementationtechnique.
Recently, Bear (1986) has interpreted such rulesdirectly, using Prolog as an implementation language.This, although an improvement on finite stateimplementations from the point of view of debugging andclarity, still misses an important aspect of relationalmorphology rules as a declarative notation, namely that ifrelational morphology rules define a relation betweensurface and lexieal levels, then that relation can bespecified and implemented using any of several differentrelational programming paradigms.
In this paper, we willshow that logic programming, which can be viewed as arelational programming paradigm, can be used to give adeclarative reading to morphological rules.
Further,because of the execution model for logic programs,embodied in various logic programming languages such asProlog, the declarative reading also has a convenientprocedural reading.
That is, each relational morphologicalrule may be thought of as corresponding to or generating alogic program clause.
The entire set of logic programclauses generated from the relational morphological rules,coupled with some utility predicates, then constitutes amorphological nalyser which can either be used as a standalone program or which can be coupled as a module toother linguistic tools to build a natural languageprocessing system.
Since the roles have been transformedinto logic program clauses, they gain in speed ofexecution over Bear's interpretive method, and furtherspeed can be gained by compiling these clauses usingexisting Prolog compilers.
At the very least, this providesa morphological complement o logic grammars(Abramson and Dahl 1989) which deal mainly with syntaxand semantics, in a programming environment which webelieve is more user-friendly than the finite stateprogramming paradigm.It may be argued that this is a step backwards from thelinear efficiency of finite state processing.
However, whenACRES DE COLING-92, N^NTES, 23-28 ^ o(rr 1992 8 5 0 PRoc.
ov COI.ING-92, NANTES, AUG. 23-28, 1992discussing "efficiency" it is very important to be veryprecise as to where the efficiency lies and what it consistsof.
Finite state processing is linear in the sense that aproperly implemented finite state machine will be able todecide whether a string of length ,~ is acceptable or not ina time which is O(n), ie, for large enough n, a linearmultiple of n. For small values of u, depending on howmuch bookkeeping has to be done, "finite statealgorithms" may perform worse titan algorithms which areformally O(n 2) or higher.
Any processing in addition torecognition may involve time factors which are more thanlinear.
This entirely leaves aside the question of the user-friendliness of the finite state computing paradigm, aquestion of how "efficient" in human terms it is to usefinite state methods.
Anyone who has trieM to implementfinite state automata of substantial size directly (as inKoskenniemi's original implementation, the first KIMMOsystems, and KIMMO-PC) will have realised thatprogramming finite state machines i  distastefully akin todirectly programming Turing machines.
A substantialamount of software is necessary iu order to provide adevelopment, debugging and maintenance environment forea~y use of the finite state computing paradigm.
Therealso remains the theoretical question as to the 'adequacy offinite state morphological descriptions for all, or evenmost, human languages.
However, this is a topic we shallnot venture into in this paper.In our method, a relatively small Prolog programgenerates logic programming clauses from relationalmorphology rules.
The generated clauses (at least in theexperiments sofar) are readable and it is easy to correlatethe generated clause and the original morphological rule,thus promoting debugging.
The standard ebugging toolsof Prolog systems (at the very least, sophisticated tracingfacilities) seem sufficient to deal with rule debugging, andthe readability of the generated clauses hould help in themaintenance and transference of morphological programs.Thus, from the software ngineering point of view, logicprogrannming is a more sophisticated, higher-levelprogramming paradigm than finite state methods.
Also,should finite state descriptions in the end prove inadequate,or even inconvenient, for all of morphology, logicprogramming provides expressive power for reasonableextension of the notation of relational morphology rules.The current availability of Prolog compilers, even forsmall machines, provides another increment of speedyexecution of the generated programs.
Many of themorphological rules produce logic program clauses inwhich checking of the lexical and surface elements andcontexts reduce to unification followed by a recursive callof the morphology predicate.
Compiled Prolog abstractmachine code for such clauses is usually very compact.Prolog compiler indexing mechanisms often make itpossible to access the correct clause to be applied inconstant time.Notational Aspects.
Our tableau notation forrelational morphology rules is as follows:LexLeft <= Lex => LexRight <:>SarfaccLeft <= Surface => SurfaceRightwhich expresses the relation between a lexical and asurface uait (Lex aml Surface, respectively), provided thatthe left and right contexts at both the lexical and surfacelevels (LexLeft, LexRiglnt, SurfaceLeft, andSuffaceRight) are satisfied.Another kind of relational morphology rule which isallowed is:LexLeft => Lex <= LexRight<:>SurfaceLeft => Surface <= SurfaceRight.which expresses a relationship between Lex and Surfaceproviding that the left and fight contexts at the lexicaland surface levels are different from those specified byLexLeft, LexRight, SuffaceLeft, and SurfaceRight.
Thismeans that either LexLefl or LexRight is not satisfied,and also that either SurfaceLeft or SurfaceRight is notsatisfied.More coutpact notation is also accepted, for example:LexLeft:SurfaceLeft<=Lex:Surface=>LexRight:SurfaceRight.LexLeft:SurfaceLeft=>Lex:Sarface<=LexRight:SurfaceRight.In the case where a pair of lexical and surface contexts areidentical, or if the lexical and surface elements areidentical, they need not be repeated.
Such compressedrules as the following are also allowed:Left <= Element => Right.Left => Element <= Right.Sets of symbols may be specified: set(vowel,\[a,e,i,o,u\]).Lexical entries may be specified as follows:lexicon:: {eat=noun,root= craps}.lexicon::{cat=noun,root= pimlo}.This feature notation is that used in the author's DefiniteFeature Grammars (Abramson 1991).Logical reading of relational morphologyroles.
Corresponding to a set of relational morphologyrules, a binary predicate morphology/2 specifies therelation between a lexical and a surface stream ofcharacters:morphology(LexStrcam,S ufface Strcarn).In order to specify the logic program clause whichcorresponds toa relational morphology rule, we have tomanipulate he left and right lexical and surface contexts.We can find the right contexts within LexStream andSurfaceStream, but we have to provide a specification ofthe left contexts, and we do this by defining the abovebinary predicate morphology/2 in terms of a quaternarypredicate morphology/4:morphology(LexS tmanLSurfaceS tream,LeftLexStream,I.,eftS ur faceStream).ACn'ES DE COIJNG-92, NArcri;s, 23-28 Aofzr 1902 1~ 5 1 P~toc.
oF COLING-92.
NANTES, A~JG.
23-28, 1992LeftLexStream and LeftSurfaceStrcam re initially emptyand are represented as reverse order lists of the leftcontexts which have aheady been seen.
The top leveldefinition of morphology/2 is:morphology(LexS tremn,Sur faceSt~un) :-raorphology(LexStream,SurfaceSu'emn,I I,\[1).The fundamental logic program chmse co~reslxmding toarelational morphology rule sneh amLexLeft <= Lex => LexRight<:>SurfaceLeft <= Surface => SurfaceRight.ismorphology(LexS "tman~,S urfaceS tremn,LeftLexStream,l.~efiSl~'aceS "Imam) :-LexStream =lLllLexRest\].SurfaceStream = \[SllSurfaceRestl,\[exeme(Lex,L1), surface(Surface,S 1),lex context (LexLefl,Le fd.exStre,'un ,LexRight,LexRest),sur face eontext(Sur faceLeft.lmftSurfaceStmam,S ur f~eRight,Sur fhceRest),NewLeftLexStreaan = \[Llll~eftLexStream\],NewLeftS urfaceS "tmanl = \[S 111.eftS uriaceStream\],morphology(LexRest,SurfaceRest,NewLeftLexSlaeatm ,Newl.etiS urface?
hean 0.Here, LexStream and SurfaceStreanl are analysed asconsisting of the first characters LI and SI, and theremaining streams, LexRest and SurfaceRest.
It isverified that L1 is the lexeme specified by Lcx, and S1the surface character specified by Surface.
(Lex, Surface,LexLeft, LexRight, SurfimeLeft, and SurfaceRight are asgiven iu rite morphology rule.)
Contexts are checked bythe subgoals lex_context and surface context.
New leftcontext streams are created by prefacing the old leftcontext streams with LI ,and S1 (note again that the leftcontext streams are built np in reverse order).
Finally,the predicate morphology/4 is recursively called on theremainder of the lexical and surface streams, and with llu~new left context streams.Although the logical reading of this appears to involvemany subgoals, in fact tbr many relational morphologyrules, the subgoals are compiled away into simpleunifications.
See the Appendix which contains at .set ofrelational morphology rules dealing with simple Englishplural forms and their corresponding logic programclauses.
Space does not permit us to comnlent on fileexample, or how the compiler works, but the interestedreader may contact he auttmr.
Further papers will dealwith these topics.Conclusions and future research.
We haveprovided here in the setting of logic programming amorphological complement to the logic grammars whichmostly concentrate on syntax and semantics.
However,we have also provided anotation and a logical reading ofthat notation which suggests fi~rther exploration as toexpressiveness and efficiency.
If the context in arelational rule is specified by a regular expressimt, theappropriate context stream is parsed using a small logicgrammar which defines such expressions.
It mayhowever make sen~, in approaching non-concatenativeaspects of morphology, to be able to specify lexicalcontexts with more stnmtt~re thml regular expressionsallow.
The implementation would be easy: in place ofthe logic grammar used to parse regular expressions, amore complicated logic grammar (context free, at least)would be used for lexical context verification.
It is alsothought that metarnles (see Abramson 1988 orAbramson and Dahl 1989) will be u~ful in dealing withnonconeatenative aspects of morphology.
Since theproject is at an early stage, there is not yet an extonsiveset of examples.
We expect o develop a full set of rulesfor English morphology, and it specification of Japaneseverb forms.Ackunwledgment.The author wishes to acknowledgethe support of Ricoh Corporation as a VisitingInformation Fusion Professor at the University ofTokyo's Institute of Industrial Science.
The author "alsowishes to thank Prof. Akira Ishikawa of SophiaUniversity, Tokyo, for comments on this work.
Also,thanks to Profs.
lshizuka and Ishikawa for help intranslating the abstract.References .Abramsou, tl.
1988.
Metarules and an approach toconjunctiou in Definite Clause Translation Grammars.Proceedings of the Fifth International Conlerence andSymposium on Logic Programming.
Kowalski, R,A.
&Bowen, K.A.
(editors), MIT Press, pp.
233-248, 1988.Abramson, H. 1991.
Definite Feature Grammars forNatural and Formal Languages: An Introduction to theFormalism.
Natural Language Understanding and LogicProgramming, III, edited by C.G.
Browu and G. Koch,North-I olland, 1991.Abranlson, H. and Dahl, V. 1989.
Logic Grammars,Symbolic Computation Series, Springer-Verlag.Antworth, iLL. 199(I. PC-KIMMO: A two-levelprocessor for morphological nalysis.
Summer Instituteof Linguistics, Dallas, Texas.Bear, J.
1986.
A morphological recognizer with syntacticand phonological rules.
In Proceedings of COLING '86,272-276.
Association for Computational Liuguistics.Dalrymple, M. et al 1987.
DKIMMO,cTWOL: adevelopment environment lor morphological nalysis.Stanford, CA: Xerox PARC and CSLLJohnson, C.D.
1972.
Formal aspects of phonologicaldescription.
The \[\[ague: Mouton.Kaplan, R.M.
and Kay, M. 1981.
Phonological rules andfinite state transdt, cers.
Paper presented at the 1981Winter meeting of the ACL/USA.Kartmman, L. 1983.
KIMMO: a general morphologicalprocessor.
Texas Linguistic Formn 22:163 - 186.Kartammn, L. and Wittenburg, K. 1983.
A twoqevelmorphological nalysis of English.
Texas LinguisticsForum 22:217-228.ACRES DE COLING-92, NANt'ES, 23-28 AOI\]: 1992 8 S 2 1';~.O{:.
OI, COI,ING-92, NANI'ES, AUG. 23-28, 1992Khan, R. 1983.
A two-level morphological analysis ofRumanian.
Texas Linguistics Forum 22:253+270.Koskenuiemi,  K. 1983.
Two- level  morphology:  ageneral computational model for wordqbun recognitionand production.
Publication No.
11 Helsiuki: Universityof Helsinki Department of General Linguistics.Lun, S. 1983.
A two-level morphological  analysis ofFrench.
Texas Linguistics Forum 22:271-278.Sasaki Alum,  Y.
1983.
A two-level molphologica lanalysis of  Japanese.
Texas Linguistics Forum 22:229-252.Append ix .
E lementary formation of  plttrals inEnglish.
(0) x <= '+' => \[s,'#'l <:>x <= e => \[s,'#'\]+(1) z <= '+' => \[s,'#'l <:>z <= e => \[s,'#'l.
(2) y <= '+' => \[s,'#'l < :>i <= e => Is,'#'\].
(3) s <= '+' => \[s,'#'l <:>s <= e => \[s,'#'\],(4) o <= '+' => \[s,'#'l <:>o <= e => \[s,'#'\].
(5) \[c,h\]  <= '+' => \[s,'#'l <:>\[c,h\] <= e => Is,'#'l.
(6) Is,hi <= '+' =>Is,'#'\] <:>Is,h\] <= e => Is,'#'\].
(7) <= y => '+' <:>in(con) <--- i =>.
(8) not(set(\[\[c,h\],s,\[s,hl,x,z,yl)) <~: '+' ~:> Is,'#'l<7>not(set(\[\[c,h,e\],Is,eJ,\[s,h,el,lx,e I \[z,el,\[i,e\] 1))<= 0 => Is,'#'\].%Note negative context here,(9) set(\[\[c,hl,s,\[s,h\],x,z,y\]) => e <= \[s,'#'l <:>set(\[\[c,h\],s,\[s,h\],x,z,il) =.- c <~ \[s,'#'l.%This is a default ale.
(10) ._ <= iu(X,char_ e) => _ <:>_ <= in(X,char e) => .set(char e,\[a,b,c,d,f,g,h,i,j ,k,l ,m,u,o,p,q,r,s,t,u,v,w,x,y,z,'#' I).set(con,\[b,c,d,f,g,h,j,k,l,m,u,p,q,r,s,t,v,w,x,y,zl),In addition to specifying characters such as s, x, etc., wecan also del iue ~qnences  of  characters noted aS listsIs,h\], not(characte0, uot(sequeuce ol characters), in(con)means any member of the ~t  con, whereas iu(X,char c)is a member of  the set char e ~ssigncd to the variable Xfor unification in another part of the talc.
'+' is used as amnrphenle lamm 'lary, 0 is used as the null symbol, '#' isused as an eadm~ker ,  and ' '  is used to specify a don'tcare context.
By providing a complete specification ofcontext we cnnld remove any consideration of  ordering ofthe rides, l Iowever, it is convenient o depart slightlyl'i~m ~m order free formalism by al lowing default rulessuch as our last one with don't care contexts whichSlW.cify what happens to syuubols not dealt with in anyof the atore-menlioned rules, to appear at the end.
(*) moqfl|ology(\[l,  \[1, A, B).
(0)morphology(\[+, s, #\[A\], \[e, s, #1B\], \[xlC\], \[xlD\]) :-morphology(Is, #1AI, Is, #1B\], \[+, xlC\], \[e, xlD\]).
(1)monf~hology(\[+, s, #1A\], \[e, s, #1B\], \[zlC\], \[zlD\]) :-morphology(Is, #1A\], Is, #1B\], \[+, zlCI, \[e, zlD\]).
(2)ntorphology(\[+, s, #1A\], It, s, #1B\], \[ylC\], \[ilD\]) :-mnq>hology(\[s, #IA\], Is, #1B\], I+, ylC\], \[e, ilD\]).
(3)morphology(l+, s #1AI, It, s, #\[B\], Isle\], \[slD1) :-men phology(Is, #1AI, Is, #1B\], \[~, slCI, \[e, slD\]).
(4)moq>hology(l+, s, #1A\], \[e, s, #1B\], \[olC\], \[oiD\]) :-moq~hology(I s, #1AI, Is, #1BI, \[+, olC.1, \[e, olD\]).
(5)nlorphology(l+, s #1A\], \[e, s, #1B\], \[h, clC\], \[h, clD\]) :-movpholngy(\[s, #1AI, Is, #1BI,\[+, h, clC\], \[e, h, clD\]).
(~,)moq)hology(l+, s #\[AI, le, s, #1B\], \[h, siC1, \[h, slD\]) :-utorphology(\[s, #1A.I, \[s, #Ill/,\[ ~-, h. sIC\], \[e, h, slD\]).
(7)morphology(\[y, +IA\], lilB\], C, IDLE\]) :-con(D),morphulogy(\[+lA\], B, lylC\], \[i, DIE\]).
(8)mcnphology(\[-t., s, #IA\], Is, #IB\], C, 1)) :-not subslxings(C, \[\[h, el, s, \[h, s\], x, z, y\]),not substrings(D, lie, h, e\], le, s\], \[e, h, s\], \[e, xl,\[e, zl, It, ill),morphoh~gy(\[s, IliA\], Is, #1BI, I+IC\], D).
(9)moqfl~ology(\[e, A, BIC\], \[e, D, Ell;I, G, |1) :-not (subsUiugs(G, \[o, Ih, el, s, \[h, si, x, z, y\]),match(Is, #1, IA, BI)),uot (substrings(H, \[u, lh, el, s, \[h, sl, x, z, i\]),umteh(\[s, #\], ID, El)),moq)hology(\[A, BIC\], \[D, ELF\], \[elG1, \[elHl).
(10)moqfltology(\[AIBI, \[AICI, f), E) :-char c(A),utorpholngy(B, C, IAIDJ, \[AIE\]).Clause (*) is generated to termiuate morphologicall)ft~cssing whcu bofll tile \[exical and surface streams ~Ueempty.
In this case, tile left contexts are ignored.Chmses 0-6 cotrcslx)ndiug to rules 0-6 follow the samepattern in which lcxicat and sud~lcc syml~Jls and contextsare specified within tile streams and m'e checked byunif icat ion, fol lowed by a recursive call to themoqfliology/4 predicate on file remainder of tile lexicalilll(l surface stfcums and wiflt new left context streams.S/IC\[I clauses involving ani l icatiou ol  the head attd aAcrEs DE COl,ING-92, NANI~S, 23 28 Aoi)r 1992 8 S 3 l'l?oc:.
O|; COl,IN(;-92.
NANIES, A/JC+.
23-28, 1992body which is only a recursive call of the same predicateare efficiently handled by Prolog compilers.
Clause 7 issimilar except hat it also involves a check to see thatthe first character in the left surface context is aconsonant.Set definitions uch as:set(con,\[b,c,d,f,g,h j k l,m ,n,p,q,r,s,t,v,w,x,y,zl).generat~ unit clauses: con(b)., con(c) ...... con(z).In clause 7, if D in con(D) is instantiated (as it is sincethe D represents a left context which has already beenseen), code generated for this by Prolog compilersamounts to something like an indexed table lookupwhich takes place in constant ime.
Similar remarksapply to clause 10 where it is checked that A is amember of the set char e.Clause 8 involves a combination of a unification checkfor the right context, and a check that the left contextdoes not consist of any of the specified strings.
Here, inorder for the morphology clauses to work in both theanalytical and generating directions, the negution must belogically safe notation, i.e., the arguments to thenegation must be grounded.
Logically safe negationinvolves the use of delaying evaluation of the negationuntil all arguments have been grounded.Clause 9 which involves a negative context, makes ure,using safe negation, that either the right context is not\[s,'#'\] or that the left context does not match any of thesubslxings in the specified set.Sample execution:?- morphology(P,cries).Root = cry %nonstandard plural formation{cat=noun, %original lexicon entryroot=cry )Suffix = s(cat=norm, %modified featureroot=cry,plural=yes}P = cry+s ; %another solution?fail.
%no.
?- morphology('fox+s',P).P = foxes?- morphology('piano+ s',P).P = pianoes; %one plural form for some nouns%which end in "o"P = pianos; %another plural formfail.
%no othersThe same clauses for the predicates morphology/2 andmorphology/4 are used in solving goals in bothdirections.Japanese Summary .~," h, 6 og fL-.
)iKoskemtiemiO96J\[~ {,:-  5 ~ L~,~'~ ?
~  t/.,-tOP5o }J~4, l~t (Koskenniemi~9~o09~L~Jf :)  I~/t~-~Harvey AbramsonACI~S DE COLING-92, NANTES, 23-28 AOfJ'r 1992 8 5 4 Pl~OC.
oi: COLING-92, NANTES, AUG. 23-28, 1992
