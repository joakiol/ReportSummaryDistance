INTEGRATED INFORMATION MANIPULATION SYSTEMS ( IMS)  - -A COGNITIVE VIEWGerhard FischerMan-Machine Communication Research GroupInstitut fuer InformatikUniversitaet StuttgartStuttgart, W-GermanyAbstractThe personal computer of the future will offerits owner an information manipulatio, 9~stem(IMS).
It will be a totally integrated systembeing able to manipulate arbitrary informationstructures, eg programs, prose, graphicalobjects and sound.An IMS will be an important step towardsachieving the goal that we can do all our workon-line -- placing in computer store all of ourspecifications, plans, designs, programs,docummentation, reports, memos, bibliography andreference notes and doing all of our scratchwork, planning, designing, debugging and most ofour intercommunication via the consoles.We outline the basic principles underlying thedesign of an INS.
We discuss the cognitivedimensions (specifically for text processing andprogramming systems) which should serve as thedesign criteria for systems whose goal is toreduce the cognitive burden and augment thecapabilities of a human user.Keywordsman-machine communication, problem solving,routine cognitive Skill, text processing,programming, display-oriented interfaces,uniformity, integrated systems!.
Information manipulation systems (IM5)I.i Function and structure of an IMSThe rapidly increasi,ng sophistication andcheap avai labi l i ty  of computers make itlikely that interactive man-machine systemswill increasingly be exploited to deal withcomplex problems in many domains.
IMSsshould be prototypes for systems in whichthe computer and the human cooperate tosolve problems and achieve tasks morequickly and more rapidly than either coulddo working alone.The effect ive utilization of such combinedman-machine systems will require that theinformation-processing capabilities of thehuman component be as well understood anddesigned as those of the computer.The bas ic  hardware  to suppor t  an IMScons is ts  o f  a persona l  computer ded icatedto a s ing le  user  wh ich  w i l l  have a highreso lu t ion ,  a l l  po in ts  addressabte d i sp layand a mouse as a po in t ing  dev ice .ind iv idua l  machines w i l l  be connected in anetwork  and they w i l l  possess computat iona lpower comparab le  to that  of todays la rgestt imeshar ing -mach ines .
The LISP Mach ine(WEINREB & MOON, 1979) and the SMALLTALKMachine (as a f i r s t  step toward the idea ofa "DYNABOOK"; KAY 1977) are f i r s t  examplesof  the techno logy  we have in mind.The structure of an IMS is illustrated indiagram I.Diagram I: The structure of an IMStext processing \]programmingI to provide tOto preparefil outd?cumentS~forms |\[.c?mputati?nal facilities{ 'info1~aation manipulation system 1/ "-...database manipulation graphicsto access prestored to compose textinformation with pictures--570--Systems of this sort will be used for manyapplications: as office automation systems,as persona i  in fo rmat ion  systems (LAUBSCI4,F ISCHER and BOECKER 1979), as researchtools etc .We are conv inced  that real problemsrequ i re  an IMS and not only a programminglanguage or a text processing system, likethe following examples demonstrate:1) tO write a paper for a conference, we need- graphics (to include diagrams and pictures)- database (to retrieve the references)- programming (to sort the references, toinclude teat runs, etc)2) to support the development and modification ofprograms, we need an interactive programdevelopment system (FISCHER and LAUBSCH, 1980),including all the helpful features of theINTERLISP system (TEITELMAN 1978) like "Do what Imean (DWIM)", Programmer's assistant, UNDO andHistory facilitiesThis paper extends the work and the ideasexpressed in FISCHER (19801.2 UniformityOne of the obstac les  computer  systemspresent  to the user is the d ivers i ty  ofdi f feren~ languages and conventions which auser has to knew tO get a cer ta in  taskdone.
To wr i te  an ord inary  program in aconvent iona l  system the user has to know alarge number  of d i f fe rent  languages,sublanguages and conventions, eg"* the programming language itself (withconventions for specifying the control flow,external and internal data description etc)* the operating system (job control language,linkage editor and loader)* the debugging system (diagnostic system,symbolic assembler etc)* the text  processing system (ed i to r  andformatter)The need for an in tegrated  system isobv ious  to anybody who has tr ied tos t rugg le  through all the idiosyncracies ofthe different systems mentioned above.An IMS of fers  un i fo rmi ty  in severaldimensions to cope with this problem:Linguistic uniformity: All tools (eg the programmingsystem and superimposed modules as well as merespecific creations of the user) are made from thesame material and thus part of the same conceptualworld.
This has the sociological benefit that thesystem's implementor and users share the sameculture.
Each module in the system can be regarded asa "glass-box", ie it can be inspected by the user andthe system can be explored all to the edges.
Thisgives the user an amount of control aver hisenvironment which is not reachable in other systems.Uniformity of i n te ract ion :  This is based on a goodinterface, which provides a uniform structure forfinding, viewing and invoking the differentcomponents of the system.
The crucial aspect for thisinterface is the use of the display screen, whichallows for many tasks the real-time, directmanipulation of iconic information structures whichare displayed on the screen.
Each change is instantlyreflected in the document's image, which reduces thecognitive burden for the user.
The screen should beregarded as an extension of the limited capacity ofour short term memory (is it provides a similarsupport like pencil and paper does for themultiplication of two large numbers).2.
Exper iences  with existinq systemsThe author  has had oppor tun i t ies  to workin tens ive ly  with severa l  advanced systemsdur ing the last few years.
These systemsform the background for the ideas expressedin this paper; they are the current lyex is t ing  sys tems (known to the author)which come c losest  to our idea of aninformation manipulation system.2.1EMACS and MACLISPEMACS (STALLMAN 1979) i s  a rea l - t imed isp lay  o r iented  ed i to r ,  wh ich  can beextended by the user .
This a l lows  users tomake extens ions  that  f ie  the ed i to r  bet te rto  the i r  own d iverse  app l i ca t ions ,  toexper iment  w i th  a l te rnat ive  commandLanguages and to share extens ions  which acegenera l ly  use fu l .
I t  runs  on la rget imeshar ing  machines (eg PDP-IO) and la rgepersona l  computers  (eg LISP machine;WEINREB and MOON, 1979).
It conta insspeciaI  subsystems ("modes"; see Diagram 2)to take advantage  of the structures whichoccur in the systems to be edited.
EMACS isa s ing le  key -s t roke  system, which puts aheavy demand on our recal l  memory.
Forthese reasons,  it is spec i f i ca l l y  suitedfor the expert user.- -571-Diagram 2: Extens ib i l i ty  and Uniformity in E~S(extensibitity means that arbitrary modes can beimplemented and uniformity implies that the user doesnot need to learn a seperate editor for each system)I EMACS II mode "prosel'l I mode "mail" I I mode I'LISP"I* contains commands forwords, sentences andparagraphs;* fill and justify commands* transforms regions fromupper tolower case* contains commandsfor s-expressions* operations forautomatic indenting("pretty pr int ing")EMACS is wel l  in ter faced with the MACLISPprogramming system.
EMACS and MACLISP arekept in the machine as parallel jobs whichis a necessary  requirement  to switch backand forth with a few keyst rokes .
This isquite different from the editing philosophyof the INTERL ISP  system (TEITELMAN 1978)where the editor is an integral part of theINTERLISP system itself.
The advantages andd isadvantages  of these two approaches( "source - f i l e "  versus " res ident ia l "systems) are thorough ly  d i scussed  inSANDEWALL (1978).Power fu l  persona l  computer  sys tems (likethe LISP machine)  cont r ibute  to theextens ib i l i ty  and mod i f iab i l i ty  of anin fo rmat ion  man ipu la t ion  system becausethey make the ent i re so f tware  systeminteraetively extensible by writing it in ah igher  level  language (eg LISP) andal lowing the user to redefine the functionscompos ing  the innards of the system (iethey prov ide the l inqu is t i c  un i formitywhich we have mentioned in 1.2).they  only requi res  the  recoqn i t ion  ofcommands (ie no recall).
These environmentsprov ide proto types  for man-mach inein ter faces  which are heav i ly  based ongraphics .
The problem of not having enoughspace on the screen is solved by allowingthe w indows  to over lap.
The resul t ingconf igurat ion  cons iderab ly  increases  theuser 's  e f fec t ive  work space and itcont r ibutes  to the i l lusion that the useris v iewing a desk top containing a numberof sheets of paper which he can manipulatein various ways.Diagram 3: The DLISP d isp lay fac i l i t ies(from Teitelman 1977)the display shows the following features:- several menues (which are context dependent andtherefore can be kept small in size; they allow therecognition of commends and do not require a recall)- windows to receive and send messages- "WORK AREA" window which allows additionalcommunication with the systemselected text is indicated by reversing the colorof the screen- the virtual size of the screen is increased becausethe windows can overlap2.2 SMALLTALK and DLISPSMALLTALK (KAY 1977) and DLISP (TEITELMAN1977)  are  sys tems at  Xerox  Pa lo  A l toResearch  Center ,  wh ich  re ly  heav i ly  on ah igh  reso lu t ion  b i t  map d isp lay ,  a mouse asa po in t ing  dev ice  and exce l lent  so f tware ,which suppor ts  mul t ip le  w indows w i thassoc ia ted  menues and multiple fonts (seeD iagram 5 for an example) ;  through theiriconic  representat ions  and their  menuesAbi l i t i es  l i ke  suspend ing  an operat ion ,per fo rming  o ther  operat ions  (eg to answerqu ick ly  to  an urgent  request  rece ivedthrough the mai l  sys tem)  and then  re turnw i thout  loss  of context  have turned out tobe essent ia l  fo r  many prob lem so lv ingact iv i t ies .
The techn ique  of using--572--dif ferent windows for different tasks doesmake this switch ing of contexts easy andpainless.These systems combine the best features ofdisplay and hardcopy terminals.
A standardcomplaint  with convent ional  displayterminals is that mater ia l  that the userwants to refer to repeatedly (eg the textof a function, the trace of a programexecution) is d isplaced by subsequent,incidental interactions with the system.
Ina s i tuat ion like this when using a hardcopy terminal the user tears off the parthe is interested in.
The equivalent actionin a window system is to freeze therelevant port ion of the interact ion in aseperate window (eg like the "WORK AREA"window in Diagram 3) whose content will notbe af fected by the following interactions(see TEITELMAN, 1977).The graphical  orientation of these systemshas inspired research (eg SMITH 1977 andBORNING \[979) to create programming systemswhere more and more symbolic descriptionscan be replaced by iconic descr ipt ions.These efforts have the gnat to integratesome of the features wh ichhave  maded isp lay-or iented edit ing systems sosuccessfu l  into programming environments.Teletype-oriented editors require sequencesof commands like "4DOWN 12LEFT 4DELETE" todelete four characters  somewhere in abuffer.
In a display-or iented environmentwe see the content of the buffer on thescreen and can move with the cursor(supported by cont inuous visual feedback)to the object to be manipulated.
An exampleof symbol ic  versus iconic programming isgiven in Diagram 4.
The operat ion to beperformed is to change the value of thethird element of an array.
In the symbolicca.se we have to "tell" the computer that wewant to assign a new value to the thirdelement of an array, whereas in an iconicprogramming environment the array would bedisplayed on the sereen and changeddirectly.Diagram 4:ProgrammingSymbolic versus Iconicsymbolic pcogramming:print x<3>Mathematicsx<5> <-- "Historyprint x<5>Historyiconic programmi.g ("you get what you see"; emphasisis on doinq rather than tellinn_q):28TeacherMathematicsMaleGrade 1229TeacherHistoryMaleGrade 122.2 TINTE and LOGOTINTE (RATHKE i979), also a a real-t imedisplay oriented editor, has limited setof user-def inable keys.
It runs on a smallpersonal computer  and through itsincrementaI  design it can be used by usersof all levels of expert ise.
Incrementaldesign is one of the most essentialfeatures of a complex system, because thenovice user of any reasonably powerfulcomputer system is more confused thanassisted by a full d isplay of theinformat ion and opt ions available to him.
(Note:This paper was written with the help of TINTE).The interface between TINTE and theprogramming system LOGO (BOECKER 1977) isnot as smooth as in the systems describedabove.
The main reason for this is thel imited memory space avai lable in smallcomputers which does not allow to load thetwo systems as parallel jobs.Our research during the last few years hasnot only been concerned with the technologyof provid ing interactive computer service,but also with changes in conceptualizing,v i sua l i z ing  and organ iz ing  work and.research with these systems and inprocedures ?
and methods for workingind iv idual ly  and cooperat ive ly  (FISCHER1979; FISCHER, BROWN and BURTON, 1978;FISCHER and LAUBSCH, 1980).--573--3.
Theoret i ca l  cons iderat ions  for thedesiqn of  an IMSIf a civil engineer has to design a bridge,he acqu i res  a deta i led  knowledge  of thecountry  side in which the br idge will bebui l t  and he wi l l  use the laws of physicsto come up with a plan.Unfor tunate ly  things are not quite aseasy with respect to the design of an IMS.Changing hardware is the smallest problem;the major  obstac le  is that there is nocogn i t ive  theory  o f  su f f i c ient  p red ic t ivepower ( fu l f i l l ing the same function as thelaws of physics for the bridge) which wouldbe spec i f i c  enough to prov ide a completeset of des ign c r i te r ia  for an IMS.
NEWELLand SIMON (1976) argue conv inc ing ly  whyresearch l ike the design of an IHS has tobe carried out as "empirical inquiry"Desp i te  the lack of a complete  cognitivetheory, work in Cogn i t ive  Sc ience hasaccumulated a substantial body of knowledgewh ich  is important for integrated IMSs.
Thescope of this paper does not allow us togive a deta i led  descr ip t ion  of ourtheoretical framework; therefore we mentiononly the most important aspects:i) research in AI and cognitive psychology hasshown that knowledge is at the basis of allproblem solving; the active research in thedevelopment of knowledge representation languages(like KRL and FRL) is based on this insight2) psychological research and empirical evidencesupports the hypothesis that "thinking alwaysbegins with suggestive but imperfect plans andimages; these are progressively replaced bybetter, but usually still imperfect plans".
Thishypothesis indicates the evolutionary character ofcomplex systems, it implies that linearapproximation is an important methodology and thatdebugging processes have to be understoodthoroughly5) problem solving theories about planning (whichoperates in a simplified abstraction space),analogy (which forms the basis for recognitionmethods), debugging (see previous point) andmultiple representations (see 3.2) are not anymore only directed towards the understanding ofabstract and well-structured problems butinvestigate ill-structured problems insemantically rich domains (SIMON 1978)4) knowledge about human information processigcapabilities (eg about the limited capacity of ourshort term memory) shows that for complex systemsthere exists a need to prefold information for theuser so that more pieces of the whole picture canbe maintained in the user's immediate attention atonce5) SIMON (1969) has provided an insightfulanalysis of the structure of ce~le?
systems (byshowing their hierarchical structure, theirproperty of being "nearly decomposable" etc)3.1 Generative ProcessesOne purpose of an IMS is to support  thec reat ive  aspects  of the wr i t ing  andprogramming process.
Wr i t ing  andprogramming often means to make a roughdraft and ref ine it over a cons iderab leperiod of time (in ether words: it subsumesall the processes  required to go from thef irst idea to the final product; see FLOWERand HAYES,  1979).
It inc ludes  theexpectat ion  of an "unacceptab le  firstdraf t"  which wil l  deve lop throughsuccessive changes into a presentable form.An impor tant  genera l  character i s t i c  ofcomputers  is that they al low us to buildquickly low-cost modif iable models which wecan ana lyze and exper iment  with.
Webel ieve,  contrary  to the formal,ver i f i ca t ion  or iented  group in theStructured Programming community, that thisview is as adequate  for programming as itis for writing.Text p rocess ing  and programming areexamples  of generative processes which arebest unders tood  as prob lem solving.Inadequate technologies (eg a typewriter, abatch system) force the wr i ter  orp rogrammer  to limit himself to a small setof s t ra teg ies .
For example he has toproceed in a ser ia l  fashion,  whereby theform of the wr i t ten  word imposesres t r i c t ions  on the generation of languageand ideas.
On the other hand it is wellknown that knowledge is not simply additivewhich impl ies  that a new ins ight  or ideamay requi re  a major  restructuring of whathas been done before.Creat ive  wr i t ing  and programming i s  ani l l - s t ruc tured  prob lem (SIMON 1978) .
Inthese prob lem so lv ing s i tuat ions  theprob lem so lver  has to contribute activelyto the exact spec i f i ca t ion  of the problemand he has to define criteria what will beaccepted as a solution.- -574- -).2 Multiple PerspectivesThe computer  as an act ive medium offersmore pos ib i l i t i es  than paper for a personwho wants to wr i te,  unders tand  or read arepor t  or a program.
For complexdescr ipt ions it is often a big advantage tobe able to generate  mult ip le perspectiveswhich fac i l i ta te  or h igh l ight  cer ta inaspects  of a system.
Multiple perspectivesare able to resolve the basic conflict thatsymbols ,  which are ordered in one fixedorder (eg on a pr in ted  page),  serve aspo inters  to concepts  which form a highlyin ter re la ted  network.
This implies that 9_2os inq le  l inear  order is adequate.
The valueof multiple perspectives can be i l lustratedin a nice way us ing ~ as an example:there may be many d i f fe rent  maps for thesame ter r i to ry  us ing large and smallscales,  showing the perc ip i ta t ion ,  thepopu la t ion  densi ty ,  the economica lstructure and any other relevant criteria.In read ing text ean be selected accordingto the wishes  or needs of the reader (toa l low "dynamic  reading" ;  a display screencan be regarded as a dynamic blackboard):l) for the novice and the expert, different partsmay be left out or included2) to get a global overview, we can generate atable of contents at arbitrary levels ofabstraction5) information can be reordered such that alloecurences of a certain concept are selected(which occur in other representations at arbitraryplaces)S imi la r  poss ib i l i t i es  existrepresentation of programs:for thei) certain modules of the program can be listedselectively (eg all the data accessing functions,all declarative information, all procedures whichachieve a specific subtask); procedures can belisted in different orders (eg alphabetically oraccording to U~ calling structure)2) the calling structure which Shows theconnectivity structure between differentprocedures can be displayed at arbitrary levels ofdetail; the user should be allowed to define a"view specification"3) symbol tables give a receding of informationaccording to a different criterion).5 Problem solving versus routine skillAn IMS Should  also support  the routineski l l  (CARD 1978) of editing a manuscriptor cod ing an known algorithm in the syntaxof a p rogramming language.
In this case ithelps to e l im inate  the boring,t ime-consuming  and unproduct ive  work ofsecretar ies who have to spend long hours toretype manuscr ip ts ,  to make only trivialchanges to a pro to type  of a letter butst i l l  have to retype it as a whole and whobecome greater  exper ts  in us ing scissorsand glue than in anyth ing else.
A routinecogn i t ive  ski l l  means that the methods tobe used are well  known and that thesequence  of act ions  which occur  are of amodest  var iety  ( there fore  there is littlesearch to find out what to do next).4.
Implications for the process of systemdesi__q_n"Truth emerges more readily from error than fromconfusion".4.1 The necessity for empiricalinvestigations\[t is genera l ly  accepted  that when aprogram is to be wr i t ten ,  spec i f icat ionsshould be designed in advance.
But for realdes ign tasks or i l l - s t ruc tured  problems(see 5.i) this is more w ish fu l  th ink ingthan a rea l i s t i c  goal.
The history of thedeve lopment  of text ed i tors  is a goodexample for this assertion (another examplewou ld  be t imeshar ing  systems;  seeNEWELL /S IMON (1976) for an ins ight fu lanalys is  of this topic) and provides a goodi l l us t ra t ion  of the co-evolution ofimp lementat ions  and in ter facespec i f i ca t ions .
As exper ience accumulatesin us ing an imp lementat ion ,  more of thereal needs and benef i t s  are d iscoveredcaus ing  the par t ia l  inter facespec i f i ca t ions  to change.
The chain ofnecessary  steps lead ing to one of thesystems descr ibed  in sect ion  2 s ta r t ingwith the ava i l ib i l ty  of the displayprocessors  would have been simply too longfor anyone to have imag ined  the finalresult  before the first step had been taken(for a genera l  d i scuss ion  of these issuessee FISCHER, BROWN and BUR\[ON, 1978).- -575- -4.2 A design conflictIn the in i t ia l  phase of us ing a textprocess ing system it is very important thatthe in t roduct ion  Of the computer  systemchanges the tasks per fo rmed as little asposs ib le .
For computer  naive user it is at raumat ic  exper ience  anyway to change thetangeb i l i l y  of a piece of paper by thei l l us iveness  of e lec t ron ic  documents  andf i les.
It is a step that drastically altersthe appearance of their tools.As users become more experienced and morefamil iar,  the systems should take advanlaqeof the new medium.
Str ict  adherence  tonormal typ ing conventions in an IMS is nota lways advantageous  (eg good textp rocess ing  systems do not require that theuser pays a t tent ion  to the end of a line,they a l low him to define abbreviations, toexper iment  eas i ly  with the layout,  theytake care automat ica l ly  for constra ints ,etc).
Lack of a t tent ion  to this essentialphenomena is one of the reasons that manyinnovations fail.Regard ing  the efficient use of an IMS as ask i l l  wh ich  develops over a long period oft ime and which gets used repeated ly(F ISCHER,  BROWN and BURTON, 1978) impliesthat we have to pay a t tent ion  to thefollowing design issues:I) time: how long does it take to accomplish atask?2) errors: what kind and how many errors does auser make and how serious are they?5) learning: how long does it take a novice userto learn to use the system (for a secretary, for atrained computer scientist)?4) functionality: what range of tasks can a userperform with the system?
How can it be madeextensible to take care for unforeseenrequirements?5) recall: how easy is it for a user to reesll howto use the system for a task that he has not donefor some time??5.
Empirical f indinqsObserv ing  many people how they use IMS andtaking into account empirical data based onin terv iews  and questionaires, has revealedthe following:i) the systems can reduce the psyc~logical stressof doing something wrong (because wrong things canbe easily corrected)2) they increase the willingness to experimentwith new and different ideas3) the small amount of effort to change things ina non-trivial way (eg to find a majorrearrangenment of a text or a more modularsolution to a programming problem) leads in manycases to an improvement not only in form but alsoin contentMuch more empi r i ca l  work is needed todeve lop a deta i led  requ i rement  ana lys iswhich can serve as a gu ide l ine  for thedes ign of the next generat ion  ofin fo rmat ion  man ipu la t ion  system.Unfor tunate ly  the verd ict  of users is notpar t i cu la ry  re l iab le :  as usual ,  users ofthe respect ive  systems tend to prefer whatthey are used to.6.
ConclusionsIn the 1980's  there wi l l  be a mass iveat tempt  to in t roduce  in fo rmat ionman ipu la t ion  systems into un ivers i t ies ,o f f ices ,  c ler ical  operations and the home.The we l l -be ing  of many workes  as well asthe techn ica l  success  of the systemsthemse lves  wil l  depend on how much thedes ign pays a t tent ion  to cogn i t ivedimensions.One of the major  research  goals for thefuture wil l  be to build totally integratedIMS a l low ing  to make computer  systemsaecess ib te  to many more people and to makecomputer  sys tems do many more things forpeople.AcknowleqdementsI am indebted to the members of several researchgroups at Xerox Palo Alto Research Center and to manymembers of the HIT AI and LOGO Lab for giving me achance to visit both places several limes over alonger period of time and letting me explore and workwith their systems.
H.-D. Boecker has madesubstantial contributions to this paper.--576--ReferencesBoecker, H.-D. (1977): "LOGO Manual",Forschungsgruppe CUU, Projekt PROKOP, DarmstadtBorning, A.
(1979): "Thinglab -- AConstraint-oriented Simulation Laboratory", SSL-79-3,July 1979, Xerox Palo Alto Research Center, CalifCard, S. E. (1978): "Studies in the Psychology ofComputer Text Editing Sytems", SSL-78-1, Xerox PaleAlto Research Center, CalifEngelbart, D. C. and W.K.
English (1968): "A researchcenter for augmenting the human intellect", AFIPSFJCC, pp 395-400Fischer, G. (1979): "Powerful ideas in ComputationalLinguistics - Implications for Problem Solving andEducation", in Proceedings of the 17th Annual Meetingof the Association for Computational Linguistics, SanDiego, pp lll-125Fischer, G. (1980): "Cognitive Dimensions ofInformation Manipulation Systems", in P.R.
Wossidlo(ed): "Textverarbeitung und Informatik", InformatikFachberichte Vol 30, Springer Verlag, pp 17-31Fiseher, G., J.S.
Brown, R. Burton (1978): "Aspectsof a theory of simplification, debugging andcoaching", in Proceedings of the 2nd Conference ofthe Canadian Society for Computational Studies ofIntelligence, Toronto, July 1978, pp 139-145Fischer, G. and J. Laubsch (1980): "LISP-basierteProgrammentwicklungssysteme zur Unterstuetzung desProblemloesungsprozesses", in Heft 3 der Notizen zumInteraktiven Programmieren, Fachausschuss 2 derGesetlschaft fuer Informatik, Darmstadt, Maerz 1980Flower, L. S. and J. R. Hayes (1979): "Problemsolving and the cognitive process of writing", in J.Lochhead and J. Clement (eds): "Cognitive processinstruction", The Franklin Institute, PhiladelphiaKay, A.
(1977): "Mioroelectronics and the personalcomputer", Scientific America, September 1977, pp231-244Laubsch, J., G. Fischer and H.-D. Boecker (1979):"LISP~based systems for educational applications",BYTE, Vol.
4, No.
8, August 1979, pp 18-25Newell, A. and H. Simon (1976): "Computer Science asEmpirical Inquiry: Symbols and Search", CACM, Vol 19,No 3, March 1976, pp 113-126Rathke, C. (1979): "TINTE .- ein in terakt iverTexted i to r " ,  MMK Memo 16, Ins t i tu t  fuer Informatik,Universitaet StuttgartSandewall, E. (1978): "Programming in an interactiveenvironment: The LISP experience", ACM ComputingSurveys, Vol lO, No l, March 1978, pp 35-71Simon, H. (1969): "The Sciences of the Artificial",MIT Press, Cambridge, MaSimon, H. (1978): "The structure of ill-stucturedproblems", in H. Simon: "Models of Discovery", D.Reidel Pulishing Co, Boston, Ha, pp 304-325Smith, D. (1977): "Pygmalion - A Computer Program toModel and St imulate Creative Thought", BirkhaeuserVerlag, Basel und StuttgartStal lman, R. (1979): "EMACS -- the extens ib le ,oustomizable, self-documenting display editor",  MITAI Lab, Memo 519, Cambridge, MaTeitelman, W. (1978): "INTERLISP Reference Manual",Xerox Palo Alto Research Center, Palo Alto, CaTeitelman, W. (1977): "A Display-orientedProgrammer's Assistant", in Proceedings of the 5thInternational Joint Conference on ArtificialIntelligence, Cambridge, Ha, pp 905-915Weinreb, D. and D. Moon (1979): "LISP MachineManual", 2nd preliminary version, January 1979, MITAI Lab, Cambridge, Ms--577--
