Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics, pages 23?27,Jeju, Republic of Korea, 8-14 July 2012. c?2012 Association for Computational LinguisticsPrivate Access to Phrase Tables for Statistical Machine TranslationNicola CanceddaXerox Research Centre Europe6, chemin de Maupertuis38240, Meylan, FranceNicola.Cancedda@xrce.xerox.comAbstractSome Statistical Machine Translation systemsnever see the light because the owner of theappropriate training data cannot release them,and the potential user of the system cannot dis-close what should be translated.
We propose asimple and practical encryption-based methodaddressing this barrier.1 IntroductionIt is generally taken for granted that whoever isdeploying a Statistical Machine Translation (SMT)system has unrestricted rights to access and use theparallel data required for its training.
This is not al-ways the case.
The ideal resources for training SMTmodels are Translation Memories (TM), especiallywhen they are large, well maintained, coherent ingenre and topic and aligned with the application ofinterest.
Such TMs are cherished as valuable as-sets by their owners, who rarely accept to give awaywholesale rights to their use.
At the same time, theprospective user of the SMT system that could bederived from such TM might be subject to confiden-tiality constraints on the text stream needing transla-tion, so that sending out text to translate to an SMTsystem deployed by the owner of the PT is not anoption.We propose an encryption-based method that ad-dresses such conflicting constraints.
In this method,the owner of the TM generates a Phrase Table (PT)from it, and makes it accessible to the user followinga special procedure.
An SMT decoder is deployedby the user, with all the required resources to oper-ate except the PT1.As a result of following the proposed procedure:?
The user acquires all and only the phrase tableentries required to perform the decoding of aspecific file, thus avoiding complete transfer ofthe TM to the user;?
The owner of the PT does not learn anythingabout what is being translated, thus satisfyingthe user?s confidentiality constraints;?
The owner of the PT can track the number ofphrase-table entries that was downloaded bythe user.The method assumes that, besides the PT Ownerand the PT User, there is a Trusted Third Party.
Thismeans that both the User and the PT owner trust suchthird party not to collude with the other one for vi-olating their secrets (i.e.
the content of the PT, or astring requiring translation), even if they do not trusther enough to directly disclose such secrets to her.While the exposition will focus on phrase tables,there is nothing in the method precluding its use withother resources, provided that they can be repre-sented as look-up tables, a very mild constraint.
Pro-vided speed-related aspects can be dealt with, thismakes the method directly applicable to languagemodels, or distortion tables for models with lexi-calized distortion (Al-Onaizan and Papineni, 2006).The method is also directly applicable to Transla-tion Memories, which can be seen as ?degenerate?1If the decoder can operate with multiple PTs, then therecould be other (possibly out-of-domain) PTs installed locally.23phrase tables where each record contains only atranslation in the target language, and no associatedstatistics.The rest of this paper is organized as follows: Sec-tion 2 explains the proposed method; in Section 3 wemake more precise some implementation choices.We briefly touch on related work on Section 4, pro-vide an experimental validation in Sec.
5, and offersome concluding remarks in Sec.
6.2 Private access to phrase tablesLet Alice2 be the owner of a PT, Bob the owner ofthe SMT decoder who would like to use the table,and Tina a trusted third-party.
In broad terms, theproposed method works like this: in an initializa-tion phase, Alice first encrypts PT entries one byone, sends the encrypted PT to Bob, and the en-cryption/decryption keys to Tina.
Alice also sendsa method to map source language phrases to PT in-dices to Bob.When translating, Bob uses the mapping methodsent by Alice to check if a given source phrase ispresent and has a translation in the PT and, if this isthe case, retrieves the index of the corresponding en-try in the PT.
If the check is positive, then Bob sendsa request to Tina for the corresponding decryptionkey.
Tina delivers the decryption key to Bob andcommunicates that a download has taken place toAlice, who can then increase a download counter.Let {(s1, v1), .
.
.
, (sn, vn)} be a PT, where si isa source phrase and vi is the corresponding record.In an actual PT there are multiple lines for a samesource phrase, but it is always possible to reconstructa single record by concatenating all such lines.2.1 InitializationThe initialization phase is illustrated in Fig.
1.
Foreach PT entry (si, vi), Alice:1.
Encrypts vi with key ki We denote the en-crypted record as vi ?
ki2.
Computes a digest di of the source entry si3.
Sends the phrase digests {di}i=1,...,n to Bob2We adopt a widespread convention in cryptography and as-sign person names to the parties involved in the exchange.ivsi kiivkiidid kiiv kiAlice=Bob Tina123 4 5Figure 1: The initialization phase of the method(Sec.
2.1).
Bob receives an encrypted version of the PTentries and the corresponding source phrase digests.
Tinareceives the decryption keys.4.
Sends the encrypted record (or ciphertext){vi ?
ki}i=1,...,n to Bob5.
Sends the keys {ki}i=1,...,n to TinaA digest, or one-way hash function (Schneider,1996), is a particular type of hash function.
It takesas input a string of arbitrary length, and determin-istically produces a bit string of fixed length.
It issuch that it is virtually impossible to reconstruct amessage given its digest, and that the probability ofcollisions, i.e.
of two strings being given the samedigest, is negligible.At the end of the initialization, neither Bob norTina can access the content of the PT, unless theycollude.2.2 RetrievalDuring translation, Bob has a source phrase s andwould like to retrieve from the PT the correspondingentry, if it is present.
To do so (Fig.
2):1.
Bob computes the digest d of s using the samecryptographic hash function used by Alice inthe initialization phase;2.
Bob checks whether d ?
{di}i=1,...,n. If thecheck is negative then s does not have an entryin the PT, and the process stops.
If the check ispositive then s has an entry in the PT: let is bethe corresponding index;24d isisiskisisv isviskisksd =Bobk =+1TinaAlice12345Figure 2: The retrieval phase (Sec.
2.2).3.
Bob requests to Tina key kis ;4.
Tina sends Bob kis and notifies Alice, who canincrement a counter of PT entries downloadedby Bob;5.
Bob decrypts vis ?
kis using key kis , and re-covers vis .At the end of the process, Bob retrieved from thePT owned by Alice an entry if and only if it matchedphrase s (this is guaranteed by the virtual absence ofcollisions ensured by the cryptographic hash func-tions used for computing phrase digests).
Alice wasnotified by Tina that Bob downloaded one entry, asdesired, while neither Tina nor Alice could learn s,unless they colluded.3 ImplementationFor clarity of exposition, in Section 2.2 we presenteda method for looking up PT entries involving one in-teraction for each phrase look-up.
In our implemen-tation, we batch all requests for all source phrasesup to a predefined length for all sentences in a givenfile.
This mirrors the standard practice of filteringthe phrase table for a given source file to translatebefore starting the actual decoding.Out of the large choice of cryptographic hashfunctions in the literature (Schneider, 1996), wechose 128 bits md5 for its widespread availability inmultiple programming languages and environments.For encrypting entries, we used bit-wise XORwith a string of random bits (the key) of the samelength as the encrypted item.
This symmetric en-cryption is known as one-time pad, and it is unbreak-able, provided key bits are really random.Both keys and ciphertext are indexed and sortedby increasing md5 digest of the correspondingsource phrase.
For retrieving all entries matchinga given text file, Bob generates md5 digests for allsource phrases up to a maximum length, sorts them,and performs a join with the encrypted entry file.Matching digests are then sent to Tina for her to joinwith the keys.
It is important that Bob uses the sametokenizer/word segmentation scheme used by Alicein preprocessing training data before extracting thePT.Note that it is never necessary to have any massivedata structure in main memory, and all process stepsexcept the initial sorting by md5 digest are linear inthe number of PT entries or in the number of tokensto look up.
The process results however in increasedstorage and bandwidth requirements, since cipher-text and key have each roughly the same size as theoriginal PT.4 Related workWe are not aware of any previous work directly ad-dressing the problem we solve, i.e.
private accessto a phrase table or other resources for the pur-pose of performing statistical machine translation.Private access to electronic information in general,however, is an active research area.
While effec-tive, the scheme proposed here is rather basic, com-pared to what can be found in specialized literature,e.g.
(Chor et al, 1998; Bellovin and Cheswick,2004).
An interesting and relatively recent sur-vey of the field of secure multiparty computationand privacy-preserving data mining is (Lindell andPinkas, 2009).5 ExperimentsWe validated our simple implementation using aphrase table of 38,488,777 lines created with theMoses toolkit3(Koehn et al, 2007) phrase-basedSMT system, corresponding to 15,764,069 entriesfor distinct source phrases4.3http://www.statmt.org/moses/4The birthday bound for a 128 bit hash like md5 for a col-lision probability of 10?18 is around 2.6 ?
1010.
This means25Figure 3: Time required to complete the initialization asa function of the number of lines in the original PT.This PT was obtained processing the training dataof the English-Spanish Europarl corpus used in theWMT 2008 shared task5.
We used a 2,000 sentencetest set of the same shared evaluation for experi-menting with the querying phase.We conducted all experiments on a single core ofan ordinary Linux server6 with 32Gb of RAM.
Bothinitialization and retrieval can be easily parallelized.Figure 3 shows the time required to complete theinitialization phase as a function of the size of theoriginal PT (in million of lines).
The progressionis largely linear, and the overall initialization timeof roughly 45 minutes for the complete PT indicatesthat the method can be used in practice.
Note thatthe Europarl corpus originating the phrase-table ismuch larger than most TMs available at even largelanguage service providers.Figure 4 displays the time required to completeretrieval for subsets of increasing size of the 2,000sentence test set, and for phrase tables uniformlysampled at 25%, 50%, 75% and 100%.
217,019distinct digests are generated for all possible phraseof length up to 6 from the full test set, resulting inthe retrieval of 47,072 entries (596,560 lines) fromthe full phrase table.
Our implementation of the re-trieval uses the Unix join command on the ciphertextand the key tables, and performs a full scan throughthat if the hash distributed keys perfectly uniformly, then about26 billion entries would be required for the collision probabil-ity to exceed 10?18.
While no hash function, including md5,distributes keys perfectly evenly (Bellare and Kohno, 2004), thenumber of entries likely to be handled in our application is or-ders of magnitude smaller than the bound.5http://www.statmt.org/wmt08/shared-task.html6Intel Xeon 3.1 GHz.Figure 4: Time required for retrieval as a function of thenumber of sentences in the query, for different subsets ofthe original phrase table.those files.
Complexity hence depends more on thesize of the PT than on the length of the query.
Anad-hoc indexing of the encrypted entries and of thekeys in e.g.
a standard database would make thedependency logarithmic in the number of entries,and linear in the number of source tokens.
Digests?prefixes are perfectly suited for bucketing ciphertextand keys.
This would be useful if query batches aresmall.6 ConclusionsSome SMT systems never get deployed becauseof legitimate and incompatible concerns of theprospective users and of the training data owners.We propose a method that guarantees to the owner ofa TM that only some fraction of an artifact derivedfrom the original resource, a phrase-table, is trans-ferred, and only in a very controlled way allowingto track downloads.
This same method also guaran-tees the privacy of the user, who is not required todisclose the content of what needs translation.Empirical validation on demanding conditionsshows that the proposed method is practical on or-dinary computing infrastructure.This same method can be easily extended to otherresources used by SMT systems, and indeed evenbeyond SMT itself, whenever similar constraints ondata access exist.26ReferencesYaser Al-Onaizan and Kishore Papineni.
2006.
Distor-tion models for statistical machine translation.
In Pro-ceedings of the 21st International Conference on Com-putational Linguistics and the 44th annual meeting ofthe Association for Computational Linguistics, ACL-44, pages 529?536, Stroudsburg, PA, USA.
Associa-tion for Computational Linguistics.Mihir Bellare and Tadayoshi Kohno.
2004.
Hash func-tion balance and its impact on birthday attacks.
InAdvances in Cryptology, EUROCRYPT 2004, volume3027 of Lecture Notes in Computer Science, pages401?418.Steven M. Bellovin and William R. Cheswick.
2004.Privacy-enhanced searches using encrypted bloom fil-ters.
Technical Report CUCS-034-07, Columbia Uni-versity.Benny Chor, Oded Goldreich, Eyal Kushilevitz, andMadhu Sudan.
1998.
Private information retrieval.Journal of the ACM, 45(6):965?982.Philipp Koehn, Hieu Hoang, Alexandra Birch, ChrisCallison-Burch, Marcello Federico, Nicola Bertoldi,Brooke Cowan, Wade Shen, Christine Moran, RichardZens, Chris Dyer, Ondr?ej Bojar, Alexandra Con-stantin, and Evan Herbst.
2007.
Moses: open sourcetoolkit for statistical machine translation.
In Proceed-ings of the 45th Annual Meeting of the ACL on Inter-active Poster and Demonstration Sessions, ACL ?07,pages 177?180, Stroudsburg, PA, USA.
Associationfor Computational Linguistics.Yehuda Lindell and Benny Pinkas.
2009.
Secure mul-tiparty computation and privacy-preserving data min-ing.
The Journal of Privacy and Confidentiality,1(1):59?98.Bruce Schneider.
1996.
Applied Cryptography.
JohnWiley and sons.27
