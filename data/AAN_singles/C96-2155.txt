Generation of Paraphrases from Ambiguous Logical FormsHadar ShemtovStanford Univers i ty  and Xerox  PARC3333 Coyote  Hi l l  RoadPalo Alto,  CA  94304shemtov@cs l i .
s tan ford .eduAbstractThis paper presents a method for generatingmultiple paraphrases from ambiguous logicalforms.
The method is based on a chart structurewith edges indexed on semantic informationand annotations that relate edges to the seman-tic facts they express.
These annotations consistof logical expressions that identify particularrealizations encoded in the chart.
The methodallows simultaneous generation from multipleinterpretations, without hindering the genera-tion process or causing any work to be superflu-ously duplicated.1 IntroductionThis paper describes a new generation method thatproduces multiple paraphrases from a semantic inputwhich may contain ambiguities.
The method is anextension of the chart based generation algorithmdescribed in Kay (1996).
The focus in this presentationis on generating multiple paraphrases and the ability tooperate on logical forms that contain more than onesemantic analysis.
The lnotivation for this is to enablea situation (particularly in machine translation) wherethe resolution of ambiguity is postponed to after thegeneration process.
This may open the possibility forconsidering target language statistics (Knight andHatzivassiloglou, 1995; Dagan et al, 1991) or moregenerally for applying other criteria to select he "best"translation, which take into account properties of bothlanguages - for example, prefering ambiguity preserv-ing translations.
It may also enable different kinds ofinteractions between the translation system and thehuman expert who operates i t -  tbr instance, disambig-uation by a monolingual in the target language.The first demonstration f using charts for genera-tion appeared in Shieber (1988).
In that paper theemphasis was to show that a uniform architecture canbe used for both parsing and generation, however theconception of the chart was limited and the generationalgorithm did not appear to be sufficiently attractive.Kay (1996) provides a mole general view of the chartstructure which is designed to provide for generationadvantages comparable to those it provides for pars-ing.
Neumann (1994) proposes another version of auniform chart architecture where the same data struc-tures are used for both generation and parsing.In this discussion of chart generation we will tbcuson one key advantage of the chart structure: the factthat equivalent phrases cml fit into larger structuresonce, regardless of the number of alternatives that theyrepresent.
This is achieved by collapsing different der-iwttions that cover the same subset of input (and havethe same syntactic potential) under a single edge thatrepresents an equivalence class.
This propeity is thebasis for the efficiency gained by using charts as itallows a compact representation in which a polyno-mial number of edges can potentially encode xponen-tially many derivations.
Thus, the ability to recognizeequivalence is an important aspect of chart processingand it is essential that it will be available to the gener-ation process.We will uot describe the underlying generationalgorithm in detail but we assume that familiarity withchart parsing is sufficient for understanding the pro-posed method - the generator can be thought of as aparser that takes logical forms as input and producesstrings as analyses.
Like a packed parsing forest whichrepresents nmltiple parsing results, the chart generatorproduces a "packed generation forest" to represent thevarious string realizations of the semantics.
In themethod we propose here, these forests are annotatedwith information that enables keeping track of the rela~tion between pieces of the semantics and the variousphrases that express them.
We will concentrate on adetailed escription of these annotations as they are acrucial component of our method and they are themajor difference between the current proposal and theone described in Kay (1996).
Belbre we do that wewill sketch a version of Kay's algorithm, emphasizingdata representations rather than algorithmic details.We will also follow Kay in adopting a "flat" represen-tation of event semantics to represent the logical forms(Davidson, 1980; Parsons, 1990).
This style of seman-919tics fits the operation of the generation algorithm verywell and it is attractive to translation since it allows forflexibility and simplicity with regard to syntactic real-ization and treatment of structural mismatchesbetween syntax and semantics.
The flat structure isalso convenient for encoding unresolved ambiguities(Copestake et al, 1996).2 Kay's Chart Generation AlgorithmIn his algorithm, Kay proposes to use two devices toestablish which phrases interact and when phrases canbe folded together under a disjunctive edge.
Onedevice involves indexing edges on semantic variablesand another keeps track of which part of the semanticseach derivation expresses.
In the semantic representa-tion used in the algorithm, each fact is a predicatespecifying a relation between events and entities.
Theevents and entities are represented as variables thatappear in the predicates and connect the various factstogether.
For example, the logical form\[chase(e,d,c), dogs(d), young(d), cats(c), young(c)\]denotes a chasing event (e) in which young dogs (d)chase young cats (c).
Given this semantics as its input,the generator c eates nominal edges with indices d andc as a realization of \[dogs(d),young(d)\] and\[cats(c), young(c)\], respectively, and verbal edgeswith index e as a realization of \[chase(e,d,c)\].
Thepacked generation forest encoding the four differentrealizations of the semantics (obtained by freelychoosing between two ways of expressing each of thearguments: "young dogs"/"puppies" and "youngcats"/"kittens") is given in figure 1.1Concentrating on the first argument, he constitu-ents which render facts about he "dog" (nodes 1 to 6)are indexed on variable d; nodes 3 and 5 are foldedtogether under node 6 as they are syntactically andsemantically equivalent.
The semantic equivalence isestablished on the basis of the indexing variable andthe coverage of facts from the logical form.In parsing, identifying the coverage of the input isstraightforward since phrases consist of consecutiveitems and combine at common end-points; the cover-age of each edge is uniquely defined by its string posi-lNote that he traditional representation f charts (as transi-tion diagrams) is not suitable for generation charts, essen-tially because of the absence of fixed positions.
In order tosimplify the exposition, we choose to represent the packedgeneration forest as an AND-0R tree (in which OR-nodes rep-resent equivalent alternations and AND-nodes representcombination of daughters into larger constituents; OR-nodesare distinguished by the little arcs between their branches).Note that a forest representing multiple paraphrases can bereentrant, as later examples will demonstrate.<S,e> 15\ [ l l l l l l<NP, d> 6\[01 lO0\]/ / / z~<<NP,  d> 5<NP, d> 3 \[01100\]\[o 11 oo1 I<Adj ,d>~ 1 <N,d> 4 \[011001\[OOloo\] \ puppiesyoung <N,d> 2\[010001dogs<VP, e> 14\[10011\]\[1oooo\] \chase \<NP, c> 13\[00011 \]~ ~  P,C> 12<NP, c> 10 \[00011\]\[00011\] <N, Ic> 11<Ad i .c>~ \[ .OO011\]\[00~)~1~ 8 ~ kittensyoung <N,c> 9\[00010\]catsFigure 1tions.
In generation this is not available since thesemantics i unordered and the formation of subsets isrelatively f ree-  different lexical entries may cover dif-ferent parts of the input and different syntactic realiza-tions may choose to pack different facts together.Another source of complication comes from the factthat the generation chart encodes multiple paraphrasesand we need to guarantee that a piece of semantics willnot be expressed more than once.The mechanism used for keeping track of thesemantic overage of each edge consists of a bit arraythat represents he set of semantic facts.
Each slot inthe array corresponds toone fact and indicates whetherthe fact is expressed by that edge.
When edges com-bine to form a larger constituent, heir arrays aniontogether and checked to verify that no fact is dupli-cated.The new generation method we propose in thispaper is different from Kay's mainly in the criteria forindexing phrases and the mechanism used for deter-mining the semantic coverage.
The next sectionsdescribe these differences and demonstrate how theycan be deployed to enable generation from undisam-biguated semantics.3 Generation with Annotated ChartsWe propose acoarser notion of equivalence in order tolet more phrases to be folded together.
We still use thesemantic variables as indices but we do not let the bitarrays be part of the identification of edges.
We com-pensate for this by using a more powerful (and admit-tedly more complicated) mechanism to relate eachconstituent to the subset of the semantics it realizes.920The mechanism consists of an array of boolean condi-tions, each corresponding to one semantics fact.
Acondition identifies acertain partial path in the packedgeneration forest; when this path is selected, the corre-sponding semantic fact is expressed.In the simple cases, when a constituent expressesthe same semantic facts in all of its realizations, thecondition can indeed be thought of as binary: if a slotcontains 1 the corresponding fact is expressed by theedge and conversely if it is 0.
In more complicatedcases, when an edge has different realizations thatcover different parts of the semantics, the indicationsin the arrays are given as boolean expressions com-posed of propositional variables.
Each disjunctiveedge in the chart is annotated with a set of such vari-ables, each of which mutually exclusively defines aparticular alternative derivation of that edge.
Thesepropositional variables compose into larger booleanexpressions that define derivations of larger structures.For a general explanation of the method for usingboolean expressions to handle disjunctions, ee Max-well and Kaplan (1989).The next example shows a chart with semanticarrays and exemplifies how the conditions appearingin their slots control realizations of the input.
Considerthe following logical form:\[dog(d), plural(d), big(d), bark(e,d), loud(e)\[and the chart (forest) that would be constructed from itby the generation algorithm:<S,e> 11\[1 lpl lq2\]<S,e> 9 <S,e> lo\[ l lp l l0\]  \ [ l lp l l l l<NP'd> 4 ~ ~ < V P ,  e> 8\[1 lpl00\[ \ \[00011\]<NP, d> 3 / <VP, e> 6 <Adv,e> 7\[111001 / \[00010\[ \[O00011I loudly<Adj,d> 1 <N,d> 2 <V,e> 5\[00100\] \[ll000\] \[00010\]big dogs barkFigure 2In this drawing, the branches of the OR-nodes arelabeled with propositional variables and below eachedge is the array that indicates its coverage.
Forinstance, node 2, which expresses "dogs," covers thefirst 2 facts, hence its array is \[11000\]; node 5 whichexpresses "bark" contributes the 4th fact \[bark(e,d)\]and accordingly, its array is \[00010\].
Nodes 4 and 11are disjunctive with choices represented bythe propo-sition variables Pl,2 and ql,2 respectively.
The NP ofedge 4 can be realized as "dogs" if P2 is chosen or as"big dogs," if Pl is chosen.
This is reflected in the thirdslot of the array.
It indicates that he third semantic factis expressible in condition Pl.
Likewise, the top-mostS (node 11) is disjunctive since there are two ways toform a sentence: ither using the VP of node 6 or theone of node 8, which also expresses the fifth fact aboutthe barking event being loud.
This explains the reasonthat expression of the fact \[loud(e)\[ is conditioned onthe choice q2 (the 5th slot of the array in node 11).
Thetwo conditions taken together mean that a completeexpression of the semantic input is conditioned onboth Pl and q2 being the choices in the relevant dis-junctions.This example begins to show how the various com-ponents of the representation control the generationprocess.
Before we continue with examples of morecomplex boolean conditions, we explain how the bool-ean arrays are constructed and what exactly is theirlogical interpretation.3.1 Construction of the Boolean ArraysIn addition to the syntactic omposition, the booleanarrays of the daughter constituents union to form thesemantic array of the resulting mother constituent.Usually one daughter will have an array like \[...~0...\],the other \[...013j...\] and their combination will yield\[...oql~ j...\].
However, if both daughters express apartic-ular semantic item the boolean expressions of the cor-responding slots need to be disjoined (from the pointof view of the mother they are alternative r nditions).However, to avoid expressing the same facts morethan once, a further constraint is required to guaranteethat only one of the disjuncts eventually get chosen.This constraint isthe negation of the conjunction of thetwo conditions.
So, if we combine \[...?q0...\] with\[...\[3j~...\] the result is \[...(cql~j)~j...\] and the negativecondition ~(~i&l\]j) is added as a filter to the mothernode.
Whenever this node is traversed, the constraintneeds to be honored.
Note that the negative constraintsare not composed into the boolean expressions.
For amore elaborate xplanation of this device, see Shem-tov (1996).The meaning of combined conditions i  the follow-ing.
A disjunction indicates that there are multiple butmutually exclusive ways of expressing a certainsemantic fact.
In the array \[...(oqll3j)...\] the fact corre-sponding to the given slot can be rendered either bychoosing the ith branch of the oc disjunction or thejthbranch of the I~ disjunction.
A conjunction defines a921part of a certain path in the forest.
It means that at two(or more) different nodes, only certain combinationsof branches can be selected.
In the array \[...(~&l~j)...\]we get a situation where in one oR-node (the ct dis-junction) we need to select the ith branch and inanother (the \]3 disjunction) we need to choose the jthbranch.Another issue that is solved through the logicalinterpretation f the conditions is determining that thewhole input is consumed.
In parsing this is straightfor-ward: there has to be a top-node from string position 0to string position n. In the generation scheme devel-oped here, this is much more complicated.
Facts can beexpressed only under certain conditions and it needs tobe verified that the conditions are honored in a mutu-ally consistent way.
To determine whether all thesemantic facts are expressed, the boolean conditionsfrom all the slots in the array of the top node are con-joined and the result is checked for satisfiability.
If theresult is not satisfiable (no consistent assignment oftruth values) or if it is not consistent with the negativeconstraints, then there is no path in the derivationgraph that corresponds toan expression of all the facts.Admittedly, computing a satisfiable assignment tothevarious propositional variables can be hard (exponen-tial complexity in the general case), however certaincomputational properties which are likely to exist(independence b tween sets of variables) will tend tomake the computation much more efficient.3.2 ParaphrasesJust as a parsing chart excels in compact representa-tion of multiple interpretation of a single string, thegeneration chart is designed to represent multiple(string) realizations of the semantic interpretation a dcompute them at a minimal cost.
As the followingexample demonstrates, the explicit encoding of condi-tions in which each fact is expressed provides a pow-erful way of controlling the realizations of the variousparaphrases.
It also provides a way for verifying thatthey do not overlap and express certain facts superflu-ously.
Let us assume that the verbs "enter" and "rush"both decompose as movement verbs.
The formerwould be represented as \[move(e,agent), into(e,loc)\]and the latter as \[move(e,agent), quick(e)\].
Also let usassume that the meaning of a PP headed by "into" is\[into(e,loc)\] and that \[quick(e)\] is also the semantics ofthe adverb "quickly."
With that, consider the follow-ing logical form\[John(j), move(e,j), into(e,r), room(r), quick(e)\]and the packed generation forest representing its vari-ous derivations (figure 3).
The interesting action is inthe fifth slot.
\[quick(e)\] can be expressed by satisfyingthe condition qt&Pl&r2 which means choosing the left<S,e> 16\[111 l((ql&pl&r2)lq2)\]<S,e> 15 <S,e> 14\[111 l(pl&r2) \] \[11111\] \[111 l(pl&r2)\] \[11111\]VP',e> l301111\]re)/ ~ <VP, e> I I <Adv,e>n/ / \[011 l(pl&r2) \] \[00001 ly ~ u i c k l y<NP, j> 4\[10000\] <VEe> 9 <VEe> 10John \[011 lr2\] \[01110\]< V p p ~\[0100r2\] <VU',e> 5 \[00110\] Ir l~r  2 \[011001 ~ I/ \ entered / "  "q<Vpp,e> 1 <Vpp,e> 2 <P,r> 6 <NP, r> 7\[01000\] \[01001\] \[00100\] \[00010\]moved rushed into the roomFigure 3branches in nodes 16 and 11 and the right branch atnode 3.
This path corresponds to the sentence "Johnrushed into the room."
Another expression can beobtained by choosing q2 at node 16; this leads to node13 on whose right branch the adverb "quickly"expresses \[quick(e)\].
Now, this situation is interestingbecause this fact is already contained in one of thebranches of node I l, as we have already seen.
Toavoid expressing it twice, a further negative constraintis placed on node 13 which requires pl&r2 to be false.The constraint excludes the path that leads to a selec-tion of the verb "rush" but it allows a choice of P2,which means that "enter" can be used to yield "Johnentered the room quickly."
It also allows a choice ofthe verb "move" since pl&rl represents a valid path.This way the sentence "John moved into the roomquickly" is realized.This example demonstrates how multiple para-phrases are constructed out of a variety of lexicalentries and syntactic onstructions and how a record iskept relating the different phrases to the subsets of thesemantic facts that they express, it shows that the gen-eration method is sensitive to the particular lexicaliza-tion patterns that languages use to encode divergentparts of the semantics.9224 Generation from Ambiguous SemanticsThe logical encoding of the boolean conditions mayseem complex and indeed simpler solutions have beenproposed to encode the semantic overage (in Kay'salgorithm for instance).
However, the aim of the gen-eration method we advocate here goes beyond rendi-tion of fully specified semantics.One translation situatiou that the annotated chartapproach can address very simply has to do withoptional and defeasible specifications.
In many situa-tions there may be certain specifications in the input(discourse consideration, indication of preferences,etc.)
that may not be crucial to the adequacy of theresulting expressions.
For instance, in translation onemight prefer to maintain the source language subjectas the target language subject but be willing to accepta translation which violates this if generation wouldotherwise fail.
This can happen when the sourceexpression is passive but the corresponding target lan-guage verb does not passivize.
Similarly, certain psy-chological verbs come in pairs ("fear/frighten", "like/please" etc.)
but not in all languages, therefore a spec-ification to express a pro:titular argument as the dis-course topic might lead to a failure.
For example,translating "John likes it" into Spanish most naturallycomes out as "it pleases John."
The idea is that in suchcases the generator will attempt to find an expressionthat conveys (or honors) all the specifications, but ifsuch an expression is not admitted by the grammm" itwould still produce a grammatical result covering thecrucial parts of the input.A more interesting problem that a chart with boorcan conditions can address is how to use ambiguoussemantics as an input to the generation process.
Giventhat exhaustive disambiguation is not always possible,the idea is that the choice among the source languageanalyses will be delayed and the whole set of semanticinterpretations will comprise the input to the genera-tion process.
The motivation is to gain more informa-tion from the target language in order to improve thequality of the choice.
The crucial advantage that theproposed generation method provides is that it enablesconsidering all of the semantic interpretations "atonce," avoiding the massive duplicated effort thatwould result from enumerating the logical forms andconsidering each one of them individually.The next two simplified examples demonstratehow logical forms which contain disjunctions can beprocessed by the generator and how the rich logicalannotations relate the various paraphrases to the alter-nations in the semantics.
The first example demon-strates a disjunction resulting from a structuralambiguity.
The expression "hydraulic oil filter" lendsitself to two different bracketings, corresponding to"filter for hydraulic oil" and "hydraulic filter for oil.
"These two interpretations are given in the followingdisjunctive logical form:\[filter(f), oil(o), {hydraulic(o) I hydraulic(f)}\]Figure 4 shows the packed generation forest thatencodes the two (incidentally identical) strings thatexpress this piece of semantics.<NP, f> 10\[1 lplql \]<NRf> 8 <NP, f> 9\[1 Ipl l \]  \[lip10\]<Adj,f> 7 <N',f> 6\[0001\] \[1 lpl0\]hydraulic<N',o> 4 <N,f> 5\[01p~0\] \[10001<N, ,o>P3~ P2 filter<Adj,o> I <N,o> 2\[0010\] \[01001hydraulic oilFigure 4The generation from a disjunctive input proceedsjust as before, as if the disjunction is ignored and allthe semantic facts are given equal status.
Then, whenthe results of the generation are to be enmnerated, thelogical structure of the input reappears and affects theinterpretation f tile boolean array.
In this example, weknow that either tile third fact or the fourth l~lct (but notboth) can be expressed.
Accordingly, we allow eitherthe third or the fourth boolean condition to be satisfied.If we choose to satisfy the former, we let Pl be true andql be false.
This forces a traversal of nodes 9 and 3which amounts to generating from \[filter(f), oil(o),hydraulic(o)\].
If oil the other we choose to express theother interpretation, we reverse the conditions.
Thisrequires a selection of the left branch in node 10 (ql)which means that \[hydraulic(f)\] gets expressed innode7.
At node 4 we refrain from expressing \[hydranlic(o)\]since we set Pl (the condition in the third slot) to false.This way we reconstruct the logical structure of thedisjunctive logical form and select one interpretationat a time from the set of possible paraphrases.The next example shows how an NP is generatedfrom a specification that results from a lexical ambigu-ity.
Let us consider the following logical form thatcould be produced from analyzing "little dog" in a lm~-923guage that interprets "little" as an ambiguous adjectivedenoting either smallness in size or youngness in age.\[dog(d), {small(d) I young(d) }We assume that this semantics licenses "small dog,""young dog" and "puppy" (but not "young puppy" or"small puppy").
Figure 5 shows the generation forestthat encodes these renditions of the input.<NEd> 8\[1 (rl&p!
)((rl&P2)lq2)\]<He, d> 7 X\[lpl(p21q2)\], o ,~<Adj,d> 3 <N,d> 6\[0plp2\] \[10q2\]<Adj,d> !
<Adj,d> 2 <N,d> 4 <N,d> 5\[010\] \[0011 \[100\] \[101\]small young dog puppyFigure 5Node 3 merges two different adjectives which areindexed on the same variable but express two differentfacts; Node 6 merges two nominal phrases with com-patible but not completely overlapping meanings.Now, if our goal is to enumerate he paraphrases cor-responding to the first interpretation, we satisfy thecondition in the second slot \[small(d)\] and dissatisfythe condition in the third slot \[young(d)\].
As a result,we select he left branches of nodes 8 and 3 so as to sat-isfy h&pl.
Note that at node 6 we can only choose theleft branch because otherwise the condition of the thirdslot would also be satisfied, contrary to the mutuallyexclusive nature of the semantic alternation.
When thegoal is to generate the second interpretation, wereverse the conditions and try to satisfy (rl&Pa)lq2.
Ifrl and p2 are set to true we get "young dog" If q2 isselected we choose the right branches of nodes 8 and 6and get "puppy.
"These two examples demonstrate how we manipu-late the boolean conditions of the semantic overagearrays to allow generation from a disjunctive input andstill gain the benefits of the chart generation algorithm.5 Future WorkThe method we propose in this paper can be deployedas an infrastructure for solving certain other problemsin generation and translation.
In future work (Shem-toy, 1996) we intend to use the ideas developed here totackle the problem of ambiguity preserving transla-tion.
Our approach is to take a parsing chart as aninput, read from it an ambiguous logical form encod-ing multiple source language interpretations and thenuse it to create a generation chart encoding multipletarget language strings.
A separate process will thensearch for strings that express more than one interpre-tation; If such strings are found, we say that the ambi-guity of the source language is preserved by the targetlanguage.
We hope that by using this approach it willbe possible to avoid certain types of disambiguationsaltogether.AcknowledgmentsI wish to thank Martin Kay, John Maxwell and RonaldKaplan for their interest, comments and encourage-ment.
I am also indebted to the anonymous reviewersof this paper.ReferencesCopestake, Ann; Flickinger, Dan; Malouf, Robert;Riehemann, Susanne and Sag, Ivan (1996).
"Trans-lation Using Minimal Recursion Semantics."
InProceedings, 6th International Conference on The-oretical and Methodological Issues in MachineTranslation.Dagan, Ido; Itai, Alon and Schwall, Ulrike (1991).
"Two languages are more informative than one."
InProceedings, 29th annual meeting of the ACL.130-137.Davidson, David (1980) Essays on Actions andEvents.
Oxford: The Clarendon Press.Kay, Martin (1996).
"Chart Generation."
In Proceed-ings, 34th annual meeting of the ACL.Knight, Kevin and Hatzivassiloglou, Vasileios (1995).
"Two-Level, Many-Paths Generation."
In Pro-ceedings, 33rd annual meeting of the ACL.
252-260Maxwell, John T. III and Kaplan, Ronald M.
(1989).
"A Method for Disjunctive Constraint Satisfac-tion".
In Current Issues in Parsing Technology,edited by Masaru Tomita, 173-190.
Kluwer.Neumann, Giinter (1994).
A Uniform ComputationalModel for Natural Language Parsing and Genera-tion.
Ph.D. Thesis, University of the Saarland.Parsons, Terence (1990).
Events in the Semantics ofEnglish.
Cambridge, Mass.
: MIT Press.Shemtov, Hadar (1996).
Ambiguity Preserving Trans-lation.
Ph.D. Thesis (in preparation), Stanford Uni-versity.Shieber, Stuart (1988).
"A Uniform Architecture forParsing and Generation."
In Proceedings,COLING-88.
614-619.924
