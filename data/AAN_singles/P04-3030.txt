Wysiwym with wider coverageRichard Power and Roger EvansInformation Technology Research InstituteUniversity of BrightonLewes RoadBrighton BN2 4AT, UKFirstname.Lastname@itri.bton.ac.ukAbstractWe describe an extension of the Wysiwymtechnology for knowledge editing through nat-ural language feedback.
Previous applicationshave addressed relatively simple tasks requiringa very limited range of nominal and clause pat-terns.
We show that by adding a further editingoperation called reconfiguration, the technologycan achieve a far wider coverage more in linewith other general-purpose generators.
The ex-tension will be included in a Java-based librarypackage for producing Wysiwym applications.1 IntroductionWysiwym (What You See Is What You Meant)is a user-interface technology through which adomain expert can formally encode knowledgeby structured editing of an automatically gener-ated feedback text (Power and Scott, 1998).
Thetechnology has hitherto addressed two practicalcontexts: the automatic production of multilin-gual technical documentation, and the formula-tion of queries to a database or expert system.In the first case, Wysiwym editing encodes thedesired content of the document in an interlin-gua, from which versions can be generated inmutliple languages; in the second case, it yieldsa query encoded in a formal query language suchas SQL.
The benefit is the same in either con-text: since editing is mediated through a presen-tation in natural language, there is no need forthe user to be acquainted with the formal detailsof knowledge representation or query languages.Elsewhere (Evans and Power, 2003) we havedescribed a library package for developingWysiwym applications.
This package was aconsolidation of work carried out in a series ofearly applications (Power and Scott, 1998; Pi-wek et al, 2000; Bouayad-Agha et al, 2002),requiring a very restricted linguistic coverage,especially as regards the range of clausal andnominal patterns.
We present here an exten-sion to this library which allows a coveragemore in line with general-purpose generatorslike FUF/SURGE (Elhadad and Robin, 1992),KPML/PENMAN (Bateman, 1996) and Real-Pro (Lavoie and Rambow, 1997).
The exten-sion is based on two new ideas: first, a changeto the underlying semantic model, replacingatomic entity types with feature structures; sec-ondly, a corresponding change in the user inter-face, which now offers an extra editing operation(called reconfiguration) through which complexentity types may be modified.
The purpose ofthis paper (and the accompanying demonstra-tion) is to describe these novelties.2 Editing with simple typestakepatientaspirinARG?1ARG?2Figure 1: A-box with simple typesIn early Wysiwym applications, the editingprocess served to build an A-box like that shownin figure 1, comprising a set of entities (repre-sented by rectangles), each entity having a sim-ple type (represented by labels within rectan-gles) and a set of relationships (represented bylabelled arcs).
The graph in this figure is rootedin a take entity, denoting a taking event, theparticipants being a patient entity (the taker)and an an aspirin entity (the takee).
The in-tended meaning of the graph is expressed by theEnglish sentence ?the patient takes an aspirin?.The construction of the graph through Wysi-wym editing proceeds as follows.
The startingpoint is an empty A-box, which consists onlyin a constraint on the root entity ?
for in-stance, the requirement that it should be somekind of event.
This unpromising A-box is sup-plied as input to a natural language generatorwith two special features: (a) it can generatetexts from an A-box in any state of completion(even empty); (b) it can generate menus open-ing on anchors within the text, in addition tothe text itself.
The resulting feedback text ispresented to the user through a special interfacein which some spans are mouse-sensitive an-chors, marking points where a new entity maybe added to the A-box.
Anchors are normallyshown through a colour code; here we will em-ploy square brackets:[Some event].When the user mouse-clicks on an anchor, amenu pops up listing all entity types allowedin the relevant context ?
in this case, all eventtypes.arrivebreathe.
.
.take.
.
.After the user chooses one of these options, suchas ?take?, a new entity of the specified type iscreated, and added to the A-box at the currentlocation (in this case, the root of the graph).
As-suming the ontology decrees that a take eventhas two participants, a person and an object,the new A-box will include two anchors allow-ing these entities to be defined:[Some person] takes [some object].Opening the anchor ?some person?
will yield alist of options including ?patient?
; opening ?someobject?
will yield options including ?an aspirin?
;in this way two more entities can be introduced,so obtaining the complete graph in figure 1.3 Limitations in coverageFor some applications, the above procedureworks well, but it allows far too few variations tocope with real documents or queries of normallinguistic complexity.
A single choice of eventtype (?take?)
is assumed by default to imply justone out of the thousands of possible clause pat-terns that could be obtained by varying mood,tense, polarity, modality, etc., or by adding ad-verbial modifiers:forcedoes the patient take an aspirin?take an aspirintimethe patient took an aspirinthe patient will take an aspirinpolaritythe patient does not take an aspirinmodalitythe patient may take an aspirinthe patient must take an aspirinthe patient might take an aspirinthe patient should take an aspirinmodifierthe patient takes an aspirin [at some time]the patient takes an aspirin [somewhere]the patient takes an aspirin [in some manner]the patient takes an aspirin [with some frequency]By combining just the above features, we ob-tain over 300 combinations; these would mul-tiply further if we included the semantic fea-tures controlling perfective, progressive, voice,and wh-questions.
Such a large set of optionschallenges the feasibility of Wysiwym, or in-deed any other approach to knowledge editingby domain experts.4 Editing with complex typesOur favoured (indeed, only) proposal for em-bracing these variations is based on an analogywith a drawing tool.
In Wysiwym, choosingtake from a menu of event types introducesan event entity, implicitly defaulted to presenttime, positive polarity, and so forth.
In a draw-ing tool, choosing the rectangle icon from apalette of shapes introduces a rectangle entity,implicitly defaulted to a certain size, colour, andborder (to name just three features).
Havingintroduced a rectangle entity, however, the usercan reconfigure it by changing these features oneat a time.
Why should an equivalent operationnot be provided for the semantic features un-derlying a clause?takeTIME  presentPOLARITY  positiveMODALITY  undefARG?1ARG?2MULTIPLICITY  singleIDENTIFIABILITY  unidentifiableaspirinpatientMULTIPLICITY  singleIDENTIFIABILITY  identifiableFigure 2: A-box with complex typesTo add this extra editing operation we mustreplace the simple entity types employed inearly Wysiwym systems by complex types, asillustrated in figure 2 (to simplify, just a few ofthe possible features are shown).
To reconfig-ure an entity, the user selects the correspondingspan in the feedback text (all such spans will bemouse-sensitive), and chooses from a menu ofoptions, each corresponding to a change in justone feature.With this potentially huge increase in thenumber of editing operations for a given feed-back text, the idea of precomputing all possi-ble menus and popping one up on demand be-comes less attractive, both computationally andto the user.
Instead, when the user selects aspan of text, the menu of reconfigurations forthat span is computed on the fly, and displayedin a static menu pane adjacent to the main textpane, which can be browsed and searched - seefigure 3.
At every stage during the interaction,the user sees a feedback text (right pane), withone span highlighted through a colour code, anda list of options for reconfiguring the currentlyselected unit (left pane).
If the selected unithappens to be an anchor (square brackets), theoperation will be one of choosing an initial en-tity type rather than reconfiguring an existingone, but the appearance of the interface will bethe same.
The user can continue the interactionin two ways: either by choosing an option fromthe menu pane, or by selecting a different cur-rent unit by mouse-clicking within the feedbacktext pane.To illustrate, we will suppose that the currentA-box is as depicted in figure 2, and that the?patient?
entity is currently selected.
Highlight-ing the selected span in bold face rather than acolour code, the feedback text and the menu ofreconfiguration options might be as follows:The patient takes an aspirin.identifiabilityA patientmultiplicityThe patientsThe labels (identifiability etc.)
could ofcourse be replaced by more familiar words (e.g.,article, number).
Assuming that the user ishappy with the subject of the sentence, he/shewill ignore the reconfiguration options and in-stead click around the word ?takes?
in the feed-back text, so selecting the whole event entity:The patient takes an aspirin.polarityThe patient does not take an aspirin.timeThe patient took an aspirin.The patient will take an aspirin.modalityThe patient must take an aspirin.The patient may take an aspirin.The patient might take an aspirin.If the first reconfiguration option is chosen, set-ting polarity to negative, the revised optionswill conserve this new value throughout, exceptfor the new polarity option, which will now beto change the value back to positive:The patient does not take an aspirin.polarityThe patient takes an aspirin.timeThe patient did not take an aspirin.The patient will not take an aspirin.modalityThe patient must not take an aspirin.The patient may not take an aspirin.The patient might not take an aspirin.Figure 3 also shows the use of tags in the feed-back text, such as Leaflet, Section, Paragraph.These provide anchor points to select and re-configure linguistic units which have no exclu-sive text of their own.
Such tags would not formpart of the final output text in a document au-thoring scenario.5 Benefits of the approachThese techniques make it possible to constructcomplex, fluent and expressive texts using apoint-and-click interface, with no typing of text.The benefits of previous Wysiwym systems arealso retained here: the text is guaranteed tohave a coherent internal representation whichcan be constrained to conform to a controlledlanguage or house style specification, or gener-ated (and edited) in a different language.
Theinternal representation can be used to monitorthe document content, for example to provideauthoring support, or it can be transformed intoan alternative representation for further pro-cessing.Although the motivation for this extensionwas to provide effective support for documentauthoring, the underlying model offers addi-tional functionality in other knowledge creationscenarios as well.
The examples in this paperuse the complex types of the knowledge objectsto represent linguistic variation, but might justFigure 3: Snapshot of applicationas easily represent other kinds of semantic de-tail, for example in an object-oriented programspecifciation scenario.6 ConclusionIn this paper we have described an extension toour earlier Wysiwym approach which supportsmore sophisticated interactions with the under-lying knowledge base, allowing a far wider rangeof linguistic expressions to be constructed.
Thismakes the system more suitable for real author-ing tasks, particularly in controlled languageor multilingual contexts, while also enhancingits potential for constructing and editing otherkinds of complex knowledge.The system has been implemented as an ex-tension to our Wysiwym library (Evans andPower, 2003), using a wide-coverage grammarbased on the subcategorisation frames found inthe XTAG (Doran et al, 1994) categories, anddeployed in the domain of medical informatics.The demonstration requires a PC with Java andSicstus Prolog.ReferencesJohn A. Bateman.
1996.
KPML: The komet-Penman (Multilingual) Development Envi-ronment.
Technical report, Institut fu?r In-tegrierte Publikations- und Informationssys-teme (IPSI), GMD, Darmstadt, March.
Re-lease 0.9.Nadjet Bouayad-Agha, Richard Power, DoniaScott, and Anja Belz.
2002.
PILLS: Multilin-gual generation of medical information docu-ments with overlapping content.
In Proceed-ings of the Third International Conference onLanguage Resoures and Evaluation (LREC2002), pages 2111?2114, Las Palmas.Christy Doran, Dania Egedi, Beth Ann Hockey,B.
Srinivas, and Martin Zaidel.
1994.
XTAGsystem - a wide coverage grammar for english.In Proceedings of the 15th International Con-ference on Computational Linguistics (COL-ING 94), pages 922?928, Kyoto, Japan.Michael Elhadad and Jacques Robin.
1992.Controlling content realization with func-tional unification grammars.
In Aspectsof Automated Natural Language Generation,pages 89?104.
Springer Verlag.Roger Evans and Richard Power.
2003.
Wysi-wym: Building user interfaces with natu-ral language feedback.
In Research notesand demonstration papers at EACL-03, pages203?206, Budapest, Hungary.B.
Lavoie and O. Rambow.
1997.
RealPro: Afast, portable sentence realizer.
In Proceed-ings of the Conference on Applied NaturalLanguage Processing (ANLP?97), Washing-ton, DC.Paul Piwek, Roger Evans, Lynne Cahill, andNeil Tipper.
2000.
Natural language genera-tion in the mile system.
In Proceedings of theIMPACTS in NLG Workshop, pages 33?42,Schloss Dagstuhl, Germany.R.
Power and D. Scott.
1998.
Multilingual au-thoring using feedback texts.
In Proceedingsof the 17th International Conference on Com-putational Linguistics and 36th Annual Meet-ing of the Association for Computational Lin-guistics, pages 1053?1059, Montreal, Canada.
