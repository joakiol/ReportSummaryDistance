ON FORMALIZATIONS OF MARCUS' PARSERR.
Nozoboor-FarshiDept.
of Computing Science, University of Alberta, Edmonton,Canada T6G 2H1Abstract: LR(k,t), BCP(m,n) and LRRL(k) grammars, and theirrelations to Marcus parsing are discussed.1.
IntroductionIn his 1JCA1-83 paper \[1\], R.C.
Berwick suggested that thestripped own version of Marcus' parser \[4\] (i.e., with no featuresor transformations) can be formally characterized by LR(k,t)parsers \[7,8\].
Berwick's COLING-84 paper \[2\] seems to suggest thatMarcus-style parsers may be adequately formalized by boundedcontext parsable BCP(m,n) grammars\[8,9\].In this paper we show that both classes of LR(k,t) andBCP(m,n) grammars are inadequate means to formalize Marcus'mechanism even when it is applied to parsing bare context-freegrammars.
We briefly describe a new class of unambiguouscontext-free grammars, LRRL(k), for which deterministicnon-canonical bottom-up table driven parsers are generatedautomatically.
These parsers employ k-symbol fully reduced rightcontext in making parsing decisions.
LRRL(k) grammars include asa subset ho;;e context-free grammars that arc parsablc by Marcus'partially top?down method.2.
Operation of Marcus' parserLet us first recall that Marcus' parser has two datastructures: a pushdown stack which holds the constructs yet to becompleted, and a finite size buffer which holds the lookaheadsymbols.
The lookaheads can be completed constructs as well as bareterminals.
I n addition, the parser has three basic operations:(1) Attach: attaches a constituent in the buffer to the current activenode (stack top).
(2) Create (push): creates a new active node, i.e., when the parserdecides thai Ihe first constituent(s) in the buffer begin a new higherconstituent, a new node of the specified type is created and pushedon the stack.
However the create operation has a second mode inwhich the newly created node is first attached to the old active node,and then pushed on the stack.
Marcus indicates this by use of"attach a new node of 'type' to active node" in the grammar rules.Following Ritchie \[6\], we use a shorter notation: 'cattach' for thissecond mode.
(3) Drop (pop): pops the top node of the stack (CAN).
However ifthis node is not attached to a higher level node, it will be dropped inthe first position of the window defined on the buffer.
Marcus usesdifferent notations, namely "drop" and "drop into buffer", in thegrammar to indicate the etTect of drop operations.
This suggeststhat a grammar writer must be aware of the attachment of thecurrent active node.
Here, we adhere to his provision aboutdifferentiating between these two modes of drop operations.However we feel that there is no need for such a provision sincePARSIFAl_.
(the grammar interpreter) can take care of that byinserting an unattached node into the buffer, and the grammar cantest the contents of the buffer to see if such insertion has takenplace.The three basic operations plus "attention shift" and"restore buffer" (forward and backward window movements on thebuffer) are sufficient for parsing some context-free grammarswhich we informally denote by MP(k) (i.e., Marcus parsable with klookabeads).Now let us consider the context-free grammar G,:(1) S'-~S(2) S --,.d(3) S --.-A S B(4) A-).a(5) A-).a S(6) l~-}bThe following gives a Marcns-style parser for L(G,), i.e., agrammar G~ written in a PIDGIN-like language that can beinterpreted by PAF.SI FAI.. "\['he symbols inside square brackets referto the contents of buffer positions, except \[CAN = \] which indicatesthe current active node.
The grammar has no attention shift rules.l'acke._._~t I\[ : Initial rule.\[a or d\] create S'; activate 2.l':._.Acke.__.t 2 : Create and attach an S node.\[ true .1 deactivate 2; cattach S; activate 3 and 6.l'ackel 3 : S-parsing.\[ d \] attach first," deactivate 3; activate 7.\[ a \] cattach A; activate 4.\[ Sb \] attach first; deactivate 3; cattach B; activate 5.Packet 4 : A-parsing,\[ a \] attach first; create S; activate 3.\[ Sb \] drop CAN.\[ Sa or Sd \] attach first; drop CAN; deactivate 3; activate 2.Packet 5 : B-parsing.\[ b \] attach first; drop CAN; activate 7.Paeke_.__.jt 6 : Completion of an attached S node.\[ true \] drop C/tN; activate 8.
(with priority p~ o( default priority)l'aeket 7 : Completion of an unattached S node.\[ true \] drop CAN into buffer.
(with priority p~ <p~ )Pneke.~t_8 : B-prediction.\[ CAN=S \] \[ b \] deactivate 8; cattach B; activate 5.\[ CAN=S' \] \[ empty \] "Parse is finished".In the Marcus parser active packets are associated with theactive node.
that is, when a new node is created, some packets willusually he activated as well.
Unless a packet is deactivated explicitlythis association remains with the node.
So when a node on the stackbecomes the active node again as a result of 'pop' operations, itsassociated packets will be reactivated.We do not attempt o show formally the equivalence of G~and G~, since there is no formal characterization of Marcus-styleparsers yet.
However one may, by going through examples, convinceoneself that the parser given in PIDGIN parses L(G~).
Such anexample is illustrated in detail next.Example : The following diagrams illustrate the parsing of thesentence addb, L(G~) by the parser described by G2.
The symbolsinside the boxes are on the stack, and those inside the circles arealready attached to a higher level symbol on the stack.
The numbersshown above each stack node are the packet nttmbers associated withthat node.
G2 uses a buffer of size 2 shown on the right.533Act ive  Packets  S tack122 IN3,6 ~3,6 4 4 \[D--\[D---~3,6 4 3 3 s~- - - I~  \[\]3,6 4 73.6 42,6 2,6 ~~ \[~b6 3,6a6 6.76 8?6 56,78"Parse  is f in i shed .
"Bu \[ f e r-nema i nderI-~Z\] dab~db~8bI d~_..I bThis example shows the power of the Marcus parser inemploying completed subtrees as lookaheads.
The grammar G, is notLR(k) for any fixed k. Any a can be reduced to an A via productionA~a or can be considered as a first symbol in production A~aS(i.e., a reduce/shift conflict in LR parser).
However, in the firstcase a is followed by an Sb.
and in the latter by an Sd or an Sa.
Bypostponing the parsing decisions about the completion of A's,Marcus' parser is able to produce the correct parse.5343.
LRlk,t) GrammarsLR(k,t) grammars were originally proposed by Knuth in hislandmark paper on parsing of LR(k) grammars \[3\], and laterdeveloped by Szymanski \[7,8\], Essentially the LR(k,t) parsingtechnique is a non-canonical extension of tile LR(k) technique, inwhich instead of the reduction of the handle (the leftmost phrase)of a right sentcntial form, we must be able to determine that in anysentential form at least one of the t (a fixed number) leftmostphrases is reducible to a specific non-terminal.
In other words, agrammar G is not l.R(k,t) if in parsing of an input sentence thedecision about reduction of t or more questionable phrases in asentential form needs to be delayed.
Tile reduction decision isreached by examining the whole left context and k symbols to theright of a phrase in a sentential form.Now, it is easy to see that G, is not LR(k,t) for any finitenumbers k and t. For given k and t, L(Gt) includes sentences withprefix a a where n>k+t .
In such sentences t initial a's havedifferent interpretations depending on the other parts of thesentences.
For example consider the two sentences:andbn n n(I) n>k+t (If) a (db) n>k +tS' S'I IS S/ ~u a s Ba S b a d b/ / I~  ~ A s Ba S b a d bA S B A S BI I I i I Ia d b a d bIn (l) all t initial a's must be reduced to A's, while in (I I)  none ofthem is a phrase.
Therefore an LR(k.t) parser will need to delayreduction of more than t possible phrases in parsing of" a sentencewith a prefix a '~, n>k+t ,  and thus G, is not LR(k,t) for any givenk and t. In fact, LR(k,t) parsers put a limit t on the number ofdelayed ecisions at any time during the parsing.
In Marcus parsing,depending on characteristics of the grammar there may be no limiton this number.We have shown that MP(k)q'-LR(k',t) for any k' and t. Aninteresting question is whether LR(k,t)cMP(k')  for some k'.
Theanswer is negative.
Consider the LR (0) = LR (0,1) grammar G~:S-~,A A~cA A-~aS~B B-~cB B~bWith any finite buffer, Marcus' parser will be flooded with c's,before it can decide to put an A node or a B node on the stack.
Theweakness of Marcus' parser is in its insistence on being partiallypredictive or top-down.
Purely bottom-up LRRL(k) parsersremedy this shortcoming.,4.
BCP(m,n) GrammarsThe bounded context parsable grammars were introduced byWilliams \[9\].
In parsing these grammars we need to be able toreduce at least one phrase in every sentential form (in a bottom-upfashion) by looking at m symbols to the left and n symbols to theright of a phrase.
BCP-parsers use two stacks to work in thisfashion.It is trivial to show that BCP grammars are unsuitable forformalizing the Marcus parser.
A BCP-parser ignores theinformation extractable from the left context (except the last msymbols).
Whereas in the Marcus parser, the use of tlmtinformation is the compelling reason for deployment of thepacketing mechanism.
In fact there are numerous imple LP,(k)grammars that are not BCP, but are parsed by the Marcus parser.An example is the grammar G4 :S ~aA S-~bBA..~d A~cAB~d B.~cBA Marcus-style parser after attaching the first symbol in an inputsentence will activate different packets to parse A or B depending onwhetller the first symbol was a or b.
However, a BCP-parser cannotreduce the only phrase, i.e., d in the sentences ac...cd and bc...cd.Because a number of c's more than m shields the necessary contextfor reduction of A.,d or 11~d.5.
LRRL(k) GrammarsLRRI,(k) parsing basically is a non-canonical bottom-upparsing technique which is influenced by the "wait and see" policyof Marcus' parser.
By LRRL(k) grammars, we denote a family ofgrammar classes that are parsed left to right with k reduced/ookaheads in a deterministic maimer.
The difference between theseclasses lies in the nature of lookaheads that they employ.
Roughly,the class with more 'complex' lookaheads includes the class with'simpler' lookaheads.
Here, we discuss the basic I~RRL(k)gramnlars.
Further details abmtt LRRL(k) grammars and thealgorithm for generation of basic LRRI, parsers are given in \[5\].A basic LRRL(k) parser employs k-symbol fully reducedright contexts or lookaheads.
The k fully reduced right context of aphrase in a parse tree consists of the k non-null deriving nodes thatfollow the phrase in the leftnlost derivation of the tree.
Thus thesenodes dominate any sequence of k subtrees to the immediate right of"the phrase that have non?null frontiers.
This generalized lookaheadpolicy implies Ihat when a questionable handle in a right sententialform is reached, the decision to reduce it or not may be reached byparsing ahead a segment of the input that can be reduced to arelevant fully reduced right context of length k. For example, inparsing a sentence in L(G~), after seeing the initial a there is ashift oreduce conflict as to whether we should reduce according torule (4) or continue with the nile (5).
However the 2-symbol fullyreduced context for reduction is SB, and for the shift operation isSS, which indicates a possible resolution of conflict if we can parsethe lookaheads.
Therefore we postpone the reduction of thisquestionable phrase and add two new auxiliary productionsSUBGOAL-RED(4).-,,.SB and SUBGOAL-SHIFT~SS, and continuewith the parsing of these new constructs.
Upon completion of oneof these productions we will be able to resolve the conflictingsituation.
Fnrthermore, we may apply the same policy to the parsingof lookahead contexts themselves.
This feature of LRRL(k)parsing, i.e., the recursive application of the method to thelookahead information, is the one that differentiates this methodfrom any other.
The method is recursively applied whenever theneed arises, i.e., at ambivalent points during parsing.Note that the lookahead scheme does not allow us toexamine any remaining segment or the input that is not a part of theIookahead context, The parsed context is put in a buffer of size k.and no reexamination f the segment of the input sentence that hasbeen reduced to this right context is carried out.
In addition, theright context which is k symbols or less does not contain a completephrase, i.e., the symbols in the right context do not participate inany future reductions involving only these symbols.The parsing algorithm for an LRRL(k) grammar is basedon construction of a Characteristic Finite State Machine.
A CFSM israther similar to the deterministic finite automaton that is used inl,R(k) parsing for recognition of viable prefixes.
However there arethree major differences:(1) The nature of lookaheads.
The lookaheads are fully reducedsymbols as opposed to bare terminals in LR(k) parsers.
(2) Introduction of auxiliary productions.
(3) Partitioning of states which coqceals conflicting items.The information extracted from this machine is in tabulated formthat acts as the finite control for the parsing algorithm.The basic I~RRL grammars, when augmented with atlributesor features, generate a class of languages that includes the subsets ofEnglish which are parsable by a Marcus type parser.
Thusintroduction of LRRI, grammars provides us with a capability forautomatic generation of Marcus style parsers from a conlext-freebase grannnar plus the information about the feature set, theirpropagation and matching rules, and a limited number of'transfornmtional rules (e.g., auxiliary inversion and handling oftraces).
We believe tha| such a description of a language m adeclarative grammar form is much more understandable than theprocedurally defined form in Marcus' parser.
Not only does thepresence of parsing notions uch as create, drop, etc.
in a PI DGI Ngrammar make it difficult to determine xactly what language (i.e.what subset of English) is parsed by the grammar, but it is also veryhard to determine whether a given arbitrary language can he parsedin this style arid if so, how to construct a parser.
Furthermore,modification of existing parsers and verification of their correctnessand completeness seems lo be unmanageable.We may pause here to observe that I,RP, I, parsiug is abottom-up method, while Marcus' parser is not strictly a boltom-upone.
In fact it proceeds in a rap-down maimer and when need arisesit contiuues in a bottom-up fashion.
However.
as lleawick \[1\] notes,the use of top-down prediction iu such a parser does not affect itsbasic bottom-up completion of coustructs.
In fact the inclusion ofMP(k) granlmals in the more general class of LRRI,(k) grammarsis analogous to the inclusion of l,L(k) grammars in lhe class ofLR(k) graunnars.
In the Marcus parser incomplete nodes are put onthe stack, while in a bottom-up arser completed nodes lhat seek aparent reside on the stack.6.
ConehlsionWe have shown that the class of context-free grammarsparsablc by a Marcus-type parser is neither a subcla,;s of l,R(k,t)nor a subclass of BCP(m,n) grammars.
We have introducedI,P, RL(k) grammars, which formalize the concepts of Marcusparsing in a purely bottom-up parser.
One may consider thelookahcad policy used in basic I,RRL(k) grammars as the oppositeextreme to lhc one employed in l,R(k) grammars.
In 1.R(k) parsingthe lowest level of nodes, i.e., terminals are used as lookaheads,while in basic I,RRL(k) parsing the highest level nodes that followthe current construct act as lookaheads.
A modified version of thesegrammars combines the two policies.
The most general class ofI,RRL(k) grammars which is defined in \[5\] considers lookaheads atarbitrary levels.
It can be shown that for a fixed k, this class ofgrammars i the largest known class that generalizes the concepts ofLR(k) parsing while retaining the property that membership of anarbitrary grammar in the class is still decidable.At'knowiedgemeutsThe author is indebted to I)r. L,K.
Schnberl for his suggestions and carehd reviewof the draft of this paper.
The research was supported by tile Natural Sciences andEngineering Research Council of Canada Qperating Grant A8818 under Dr. SchubcWssupervision,Re\[ereuees\[l) I(,C. Uerwtck.
A deterministic parser with broader coverage.IJCAI 83, Proceedings of the gth International Joint Conference onArtificial Intelligence, pp.
710-712.
August 1983.\[2\] R.C.
Berwick.
Bounded context parsing and easy learnabllity,COLING 84, Proceedings of the 10th International Conference on ComputationalLinguistics, pp.
20-23.
Stanford University.
July 1984.\[3\] D.E, Knuth.
On the translation of languages from left to right.Information and Control, vol.
8, pp.
607-639, 1965.\[4\] M.P, Marcus.
A Ttleory of Syntactic Recognition for Natural ..angauge.MIT Press, Cambridge, MA.
1980.\[5\] R, Nozohoor-Farshi.
LRRL(k) grammars: a left to right parsing technique withreduced Iookaheads.
Ph.D, thesis in preparation.
Dept, o\[ Computing Science,University of Alberta.
1986.\[6\] G.D. Ritchie.
The implementation f a PIDGIN interpreter.Automatic Natural L.anguage Parsing, eds.
K. Spark Jones and Y, Wilks, pp.
69-80.Ellis Horwood, Chlchester.
England.
1983.\[7} T.G.
Szymanski.
Generalized bottom-up arsing.
Ph.D. thesis,Dept.
of Computer Science, Cornell University.
1973.\[S\] T.G.
Szymanski and J.H.
Williams.
Non-canonical extensions of bottom-up arsingtechniques.
SIAM Jmtrnal of Computing, vol.
5, no.
2, pp.
231.250, June 1976.\[9\] J.H.
Williams.
Bounded context parsable grammars.Information and Control, vol.
28, pp.
314-334.
1975,535
