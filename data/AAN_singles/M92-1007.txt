BBN PLUM :MUC-4 Test Results and Analysi sRalph Weischedel, Damaris Ayuso, Sean Boisen ,Heidi Fox, Herbert Gish, Robert Ingria,BBN Systems and Technologie s10 Moulton St .Cambridge, MA 0213 8weischedel@bbn.comGOALSOur mid-term to long-term goals in data extraction from text for the next one to three years are to achieve muc hgreater portability to new languages and new domains, greater robustness, and greater scalability .
The nove laspect to our approach is the use of learning algorithms and probabilistic models to learn the domain-specific an dlanguage-specific knowledge necessary for a new domain and new language.
Learning algorithms should contributeto scalability by making it feasible to deal with domains where it would be infeasible to invest sufficient huma neffort to bring a system up.
Probabilistic models can contribute to robustness by allowing for words, constructions,and forms not anticipated ahead of time and by looking for the most likely interpretation in context.We began this research agenda approximately two years ago.
During the last twelve months, we have focusedmuch of our effort on porting our data extraction system (PLUM) to a new language (Japanese) and to two ne wdomains.
During the next twelve months, we anticipate porting PLUM to two or three additional domains .For any group to participate in MUC is a significant investment.
To be consistent with our mid-term and long -term goals, we imposed the following constraints on ourselves in participating in MUC-4 :We would focus our effort on semi-automatically acquired knowledge.We would minimize effort on handcrafted knowledge, and most generally .We would minimize MUC-specific effort .Though the three self-imposed constraints meant our overall scores on the objective evaluation were not as high as ifwe had focused on handtuning and handcrafting the knowledge bases, MUC-4 became a vehicle for evaluating ourprogress on the long-term goals.MEASURING SUCCESS IN ACHIEVING OUR SHORT-TERM GOAL SPLUM had demonstrated quite high recall in MUC-3 and scored among the top systems .
We chose to focus o nthe following goals in MUC-4 :Increasing precision and reducing overgeneration, without hurting recall .Demonstrating a broad range of tradeoff in recall and precision.Goal 1 : Increasing precision and reducing overgeneration, without hurting recall .
As the graph in Figure 1shows, we doubled our precision in MUC-4 (compared to MUC-3) and reduced our overgeneration by roughly onethird.
The overall impact was to increase PLUM's F-Measure by 50% .
Naturally one would ideally base thi smeasurement on the new test sets for MUC-4 (TST3, TST4) ; however, between MUC-3 and MUC-4 both thedefinition of the templates to be produced and the evaluation function changed dramatically, so that there was n oeasy way to run the MUC-3 version of PLUM on TST3 and TST4 to produce results comparable to that of th eMUC-4 version of the system.
However, since the Government had converted our MUC-3 TST2 templates to theMUC-4 format, and since we had never examined the corpus of messages or the answer key to TST2, we coul deasily use it as a basis for comparison.Goal 2: Demonstrating a broad range of tradeoff in recall and precision.
As Figure 2 illustrates, the user ca nselect from a broad range of system performance, emphasizing either recall or precision to various degrees.
Nosystem had displayed such a span favoring recall versus favoring precision in MUC-3 .
Only one other system, GE's ,demonstrated a broad range; at a cost of 17 points of recall, GE's system could achieve an increase of roughly 8points of precision.
For PLUM, the tradeoff of recall for precision was far more balanced .87Figure 1 : PLUM's precision was doubled; overgeneration was cut by 1/3 ; overall performance (F-Measure )increased 50% ; all without hurting recall.5040302020304050RecallFigure 2: By varying parameters, a wide range of recall and precision can be obtained .Two independent parameters primarily contributed to this : a discrete parameter controlling how aggressively o rconservatively two descriptions are fused into a single view of the same event, and a continuously variable threshol don a classification algorithm predicting whether a paragraph is relevant or irrelevant (with respect to reporting anyterrorist incident).
Together, these two parameters offer a user the ability to turn a knob to emphasize recall orprecision based on their application preference .MUC-3 System vs. MUC-4 System on TST2?
5/91 - MUC-3n 5/92 - MUC-488KEY SYSTEM FEATURE STwo design features stand out in our minds: partial understanding and statistical language modeling .
By partia lunderstanding we mean that the parser and grammar are designed to find analyses for a non-overlapping sequence o ffragments.
When cases of permanent, predictable ambiguity arise, such as a prepositional phrase that can b eattached in multiple ways, or most conjoined phrases, the parser finishes the analysis of the current fragment, an dbegins the analysis of a new fragment .
Therefore, the entities mentioned and some relations between them areprocessed in every sentence, whether syntactically ill-formed, complex, novel, or straightforward .
Furthermore, thisparsing is done using essentially domain-independent syntactic information.
The semantic interpreter and the rest o fthe system in turn do not assume having complete understanding.The second key feature is the use of statistical algorithms to guide processing .
Determining the part of speec hof highly ambiguous words is done by well-known Markov modeling techniques .
To improve the recognition ofLatin American names, we employed a statistically derived five-gram (five letter) model of words of Spanish origi nand a similar five-gram model of English words .
This model was integrated into the part-of-speech tagger.Another usage of statistical algorithms was a statistical induction algorithm to learn case frames for verbs fro mexamples .
This saved substantial effort compared to building the case frames by hand.
The algorithm and empiricalresults are described in [3] .Figure 3 : Impact of Paragraph classifier on recall and precision in the ALL TEMPLATES row .The statistical methods mentioned above were already available and used in the MUC-3 version of PLUM .
Anew statistical algorithm employed in MUC-4 is a classification algorithm that automatically learns features todiscriminate among classes .
Given a list of relevant paragraphs and a list of irrelevant ones (made available by Ne wMexico State University), we employed a chi square measurement to determine word stems (though other featurescould be used as well) whose presence or absence in text is significantly correlated with the text being relevant (o rirrelevant) .
Given that ordering, the user must select how many features to use .
At runtime, the classifier sums thelogarithm of the odds that the paragraph is relevant given the presence of the features .
If the sum exceeds a user-specified threshold, the paragraph is considered relevant .
If the classifier predicts that the paragraph is relevant,then events found in the paragraph can be used to generate templates ; if not, terrorist events that would otherwisehave been produced from that paragraph are blocked .
The performance of the overall system, given variou sthresholds of the text classifier, is shown in Figure 3 .Precision4241 .5 ?41 ?40.540 ?n39.5 ?39 ?38.5 ?3031323334RecallU353889A more detailed description of the system components, their individual outputs, and their knowledge bases ispresented in Ayuso et al, [1] .
We expect the particular implementations to change and improve substantially duringthe next three years of research and development .RESULTSAppendix G lists detailed test scores.
A number of systems performed better on TST4 than on TST3, and som eperformed significantly worse on TST4 than TST3 .
The results on the two test sets were so disparate for PLUM tha twe decided to look into the causes of the abnormally low recall of PLUM on TST3 .
As table 1 shows, the followingproperties of TST3 stand in stark contrast with TST4, TST1?
and the 1300 message development corpus:?
The percentage of relevant articles was abnormally high for TST3 .?
The density of templates produced, i.e., the number of templates per 100 messages was abnormally high ,roughly 50% higher than the 1300 message development set, TST1, and TST4 .?
The density of human targets produced, i.e., the number of human target slot fills per 100 messages, wasabnormally high, roughly double the number in TST1, TST4, or the development corpus .RelevantMessagesIrrelevantMessagesMarginalMessagesRequiredTemplatesper 100MessagesOptionalTemplatesper 100MessagesHuma nTargetsper 100MessagesTST3 65% 31% 4% 119 17 162TST4 48% 45% 7% 73 5 84DEV 0001-1300 42% 50% 8% 71 11 93TST1 55% 50% 5% 88 7 84TST2 57% 35% 8% 100 28 151Table 1: Based on this comparison of development messages and four test sets, TST4 is a morerepresentative of the MUC-4 domain than TST3.Taken together, the first two observations above suggest the following:Systems tuned to overgenerate (i .e., produce a high percentage of templates, whatHirschman labels the "lazy merge problem" in this volume) should perform significantl ybetter on TST3 than TST4.The observations above suggest, in part, why PLUM's recall for TST3 was abnormally low:?
PLUM's merging algorithm is under user-control, and was set to avoid overgeneration, therefore yieldin gworse performance on TST3 than on TST4 .
?A large number of human targets exercise two known weaknesses of the MUC-4 version of PLUM: (1)known, temporary grammar problems and (2) a challenge for discourse processing to be able to collect target sacross sentences.?
A bug in the official scoring program was encountered for TST3, but not for TST4 .
If this bug is corrected, weestimate it would improve PLUM's scores by at least one point in recall, at least one point in precision, and atleast two points in overgeneration.
(That clearly is not sufficient to fully account for the discrepancy inperformance on TST3 and TST4 .
)One other point confirming the normalcy of TST4, contrasted with the abnormal characteristics of TST3, can beseen in PLUM's performance under various settings .
Prior to the test, we ran PLUM with numerous parametersettings on TST1, TST2, and one set of 100 messages from the development set.
This predicted the setting thatwould maximize the F-Measure, or come indistinguishably close to the maximum F-measure.
That predictionproved correct (consistent) with TST4, but was 2 points under the maximum actually achieved for TST3 via one ofour optional runs.9 0Table 2 : A summary of scores on TST3 and TST4.Required Run on TST3 (settings favor precision) Optional Run on TST3 (settings favor recall )SLOT REC PRE OVG SLOT REC PRE OVGMATCHED/MISSING 30 69 10 MATCHED/MISSING 49 72 9MATCHED/SPURIOUS 51 44 43 MATCHED/SPURIOUS 55 28 64MATCHED ONLY 51 69 10 MATCHED ONLY 55 72 9ALL TEMPLATES 30 44 43 ALL TEMPLATES 49 28 64SET FILLS ONLY 33 71 14 SET FILLS ONLY 52 75 9STRING FILLS ONLY 23 64 12 STRING FILLS ONLY 43 70 15TEXT FILTERING 83 87 13 TEXT FILTERING 90 67 5 1P&R 2P&R P&2R P&R 2P&R P&2RF-MEASURES 35 .68 40.24 32 .04 F-MEASURES 35.64 30.62 42 .61Optional Run on TST3 (settings maximize F- TST3 and TST4 Combined (settings favormeasure)SLOT REC PRE OVGprecision)SLOT REC PRE OVGMATCHED/MISSING 38 69 10 MATCHED/MISSING 35% 71% 9 %MATCHED/SPURIOUS 52 38 50 MATCHED/SPURIOUS 52% 44% 44 %MATCHED ONLY 52 69 10 MATCHED ONLY 52% 71% 9 %ALL TEMPLATES 38 38 50 ALL TEMPLATES 35% 44% 44 %SET FILLS ONLY 40 70 12 SET FILLS ONLY 37% 73% 11 %STRING FILLS ONLY 30 64 15 STRING FILLS ONLY 29% 68% 12 %TEXT FILTERING 98 80 20 TEXT FILTERING 83% 81% 19 %P&R 2 P&R P&2R P&R 2 P&R P&2RF-MEASURES 38 .00 38 .00 38 .00 F-MEASURES 38.74 41 .76 36 .1 3Required Run on TST4 (settings favor precision)SLOT REC PRE OVGMATCHED/MISSING 40 72 8MATCHED/SPURIOUS 53 42 47MATCHED ONLY 53 72 8ALL TEMPLATES 40 42 47SET FILLS ONLY 42 75 9STRING FILLS ONLY 36 72 1 2TEXT FILTERING 8 2P&R7 12 P&R29P&2RF-MEASURES 40 .98 41 .58 4038Table 2 summarizes PLUM's performance on TST3 where precision is maximized (the required run), where recallis maximized, and where F is maximized.
It also lists the required run for TST4.
In addition, since TST3 and TST4were so disparate in character, we computed the score of PLUM if TST3 and TST4 together constituted the test.EFFORT SPENTWe estimate that 4 person months specific to MUC-4 went into our effort.
These were spent approximately asfollows: domain-dependent lexical additions, 0 .5 person months; grammar, 0.5 person months; semantic rules ,0.75 person months; discourse, 1 .0 person months; backend, 0.75 person months ; and overhead (evaluation ,fulfilling requirements, etc .
), 0.5 person months .TRAINING DATA AND TECHNIQUESThe 1300 messages of the development corpus were used at various levels as training data.
PLUM was run overall 1300 messages to detect, debug, and correct any causes of system breaks .
The perpetrator organization slot for9 1all 1300 messages was used to quickly add names to the domain-dependent lexicon .
After running our part-of-speech tagger (POST) over the development corpus, the statistical algorithm for predicting words of Spanish origi nwas run over the list of previously unknown words.
Those predicted as Spanish in origin were then reviewedmanually to add Spanish names to the lexicon .A subset of the development set was used more intensively as training data .
Approximately 95,000 words oftext (about 20% of the development corpus) was tagged by the University of Pennsylvania as to part of speech an dlabelled as to syntactic structure as part of the DARPA-funded TREEBANK project.
The bracketed text firs tprovided us with a frequency-ranked list of head verbs, head nouns, and nominal compounds .
For each of these weadded a pointer to the domain model element that is the most specific super-concept containing all things denoted bythe verb, noun, or nominal compound.
As mentioned earlier, the TREEBANK data was then used with the lexicalrelation to the domain model to hypothesize case frames for verbs .
The automatically hypothesized verb cas eframes were then reviewed manually and added to the lexicon .
This is detailed in [3] .The 100 messages of TST1 and TST2 were used as blind test sets to measure our progress at least once a week.Throughout, we only looked at the summary output from the scoring procedure, rather than adding to the lexicon ordebugging the system based on particular messages .The training mentioned above had already been used in preparing for MUC-3, with the obvious exception thatTST2 was not available in preparation for MUC-3 .
What we added in MUC-4 was training regarding therelevance/irrelevance of paragraphs.
We tried training at the article level; however, the fact that an article could b emostly irrelevant except for a single paragraph mentioning a terrorist incident made the training much less effectiv ethan training based on labelling individual paragraphs as irrelevant.CONCLUSIONSSuccesses.
Though the structure of PLUM did not change radically between MUC-3 and MUC-4, the one ne wcomponent, a statistically based text classification algorithm, was quite successful .
It was trained fullyautomatically .
Once the system is trained on sets of text representing the various classes, such as relevantparagraphs versus irrelevant paragraphs for the MUC domain, the user need do only two things : select a cutoff forwords to be used for each class in the log probability model and set a continuous variable which serves as th ethreshold for inclusion in a given class .
The result was a significant, continuous tradeoff in recall versus precision .A second new success in our experience this year was the heuristic for when to merge (fuse) two descriptionsinto a single event representation.
Many of the heuristics do not require domain-specific knowledge .
The heuristi cwas not knowledge-intensive, yet significantly reduced overgeneration, while increasing precision .These two heuristics together enabled us to double precision and reduce overgeneration by one third, thuseffecting an overall improvement in performance (F-measure) by 50% compared to the MUC-3 version of PLUM.What Limited Success.
Having an investment in the terrorist domain and FBIS corpus inhibited significan tchanges that we might otherwise have made, such as (1) moving away from a purely deterministic parser (i .e., abeam search of width one) to a more general probabilistically controlled beam search, (2) moving from the presentsemantic interpreter to a more declarative one, and (3) replacing the MUC backend with a general purpose onedriven by knowledge bases derived in part from training data.Improvements Desired .
Improving syntactic coverage is a priority.
Increased coverage normally leads t ogreater perceived ambiguity in the system; we hope to counter that through probabilistic models .
A second priorityis improving coverage of the discourse component.
The template generator today is based on handcrafted rules ofthumb.
Within the next year we hope to develop and test an acquisition algorithm that would acquire most of therules from examples in a new domain .
Lastly, though the classification algorithm was a pleasant success, we believean even more accurate classifier is possible .Lessons Learned .
There are several lessons we believe we learned this year:1 .
Automatic training and acquisition of knowledge bases can yield relatively good performance at reduce dlabor .
Suppose one plots F-measure on TST3 and TST4 together against total effort in MUC-3 and MUC- 4together .
PLUM achieved high performance with very little labor (7 person-months in MUC-4 and MUC-3combined).
Of the top eight sites in MUC-4, compared to our effort, one group put in at least 50% moreeffort than we did; all other groups put in roughly 2-6 times the effort in MUC-3 and MUC-4 combined .922.
Substantial tradeoff in recall and precision is achievable, in particular nearly even tradeoff of recall forprecision is achievable over a broad range.3.
User control of the recall/precision tradeoff is attainable via a continuous variable, e .g, via a knob the usercan turn to prefer recall or to prefer precision in varying degrees .4.
A test set of 100 messages seems too small to accurately assess system performance .
Scores for threesystems decreased dramatically in moving from TST3 to TST4 ; of those, two were in the top eight systems.By contrast, scores for five systems increased dramatically in moving from TST3 to TST4 .
Since thediscrepancy between TST3 and TST4 was great for half of the systems, and since those systems divide dalmost evenly on which test set gave higher performance, it is clear that a set of 100 messages, unles scarefully chosen to balance characteristics of the test set, is too small .5.
Unfortunately, given the statistics in Table 1, TST4 seems more representative than TST3 .
Withhindsight it seems clear that combining the results of TST3 and TST4 would have given a useful measure .
tACKNOWLEDGMENT SThe work reported here was supported in part by the Defense Advanced Research Projects Agency and wasmonitored by the Rome Air Development Center under Contract No .
F30602-91-C-0051 .
The views andconclusions contained in this document are those of the authors and should not be interpreted as necessarilyrepresenting the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency orthe United States Government.REFERENCES[1] Ayuso, D.M., Boisen, S ., Fox, H., Ingria, R., and Weischedel, R. "BBN: Description of the PLUM System asUsed for MUC-4".
MUC-4 Proceedings, 1992 .
[2] Weischedel, R., Ayuso, D.M., Bobrow, R., Boisen, S ., Ingria, R ., and Palmucci, J ., Partial Parsing, A Report onWork in Progress, Proceedings of the Fourth DARPA Workshop on Speech and Natural Language, 1991a.
[3]Weischedel, R., Meteer, M ., and Schwartz, Applications of Statistical Language Modelling to Natural LanguageProcessing, unpublished manuscript, 1991b.1 One can reasonably combine the scores by adding the scoring entries for the columns POS (possible), AC T(actual), COR (correct), PAR (partial), MIS (missing), and SPU (spunous), then using the definitions of recall ,precision, overgeneration, and F on the totals .93
