-1 -A Spelling Correction Program Based on a Noisy Channel ModelMark D. KemighanKenneth W. ChurchWilliam A. GaleAT&T Bell Laboratories600 Mountain Ave.Murray Hill, N.J., USAAbstractThis paper describes a new program, correct,which takes words rejected by the Unix?
spellprogram, proposes a list of candidate corrections,and sorts them by probability.
The probabilityscores are the novel contribution of this work.Probabilities are based on a noisy channel model.It is assumed that the typist knows what wordshe or she wants to type but some noise is addedon the way to the keyboard (in the form of typosand spelling errors).
Using a classic Bayesianargument of the kind that is popular in thespeech recognition literature (Jelinek, 1985), onecan often recover the intended correction, c, froma typo, t, by finding the correction c thatmaximizes Pr (c )Pr ( t l c ) .
The first factor,Pr(c), is a prior model of word probabilities; thesecond factor, Pr(t\[c), is a model of the noisychannel that accounts for spellingtransformations on letter sequences (e.g.,insertions, deletions, substitutions and reversals).Both sets of probabilities were trained on datacollected from the Associated Press (AP)newswire.
This text is ideally suited for thispurpose since it contains a large number of typos(about wo thousand per month).1.
IntroductionThe correct program reads a list of misspelledwords from the input stream (stdin) ,and prints aset of candidate corrections for each word on theoutput stream (stdout).
Correct also produces aprobability along with each correction (unlessthere is only one candidate correction).
Here issome sample output produced by the Unix?command, "spell < paper \] correct," wherepaper is a text file containing the misspelledwords in column 1:TypodeteredlaywernegotationsnotcampaigningprogessionususallyCorrectionsdeterred (100%) metered (0%) petered (0%)lawyer (100%) layer (0%) lawer (0%)negotiations??
?tprogressic~l (94%) procession (4%)profession (2%)usually2.
Proposing Candidate CorrectionsThe first stage of correct finds words on a fixedlist that differ from the typo t by a singleinsertion, deletion, substitution or reversal.
Thelist was collected from many sources, includingspell, the AP newswire, and several machinereadable dictionaries.
For example, given theinput typo, acress, the first stage generatescandidate corrections in the table below.
Thus,the correct word actress could be transformed bythe noisy channel into the typo acress byreplacing the t with nothing, @, at position 2.
2This unusually difficult example was selected toillustrate the four transformations; most typohave just a few possible corrections, and there israrely more than one plausible correction.Typo Correction Transformationacress actress @ t 2 deletionacress cress a # 0 insertionacress caress ac ca 0 reversalacress access r c 2 substitutionacress across e o 3 substitutionacress acres s # 4 insertionacress acres s # 5 insertion1.
???
indicates that no correction was found.2.
"/'he symbols @ and # represtmt nulls in the typo andcorrection, respectively.
"Ilae transformations are namedfrom the txoint of view of the correction, not the typo.205-2 -3.
ScoringEach candidate correction, c, is scored byPr(c) Pr(tlc), and then normalized by the sumof the scores for all proposed candidates.
Theprior, Pr(c), is estimated by(freq(c) + 0.5)/N, where freq(c) is thenumber of times that the word c appears in the1988 AP corpus (N = 44 million words))The conditional probabilities, Pr(tlc), arecomputed from fbur confusion matrices (seeappendix): (1) del\[x,y\], the number of times thatthe characters xy (in the correct word) weretyped as x in the training set, (2), add\[x,y\], thenumber of times that x was typed as xy, (3)sub\[x,y\], the number of times that y was typedas x, and (4) rev\[x,y\], the number of times thatxy was typed as yx.
Probabilities are estimatedfrom these matrices by dividing by chars\[x,y\] orchars ix\], the number of times that xy and xappeared in the training set, respectively.
4del\[cp_l, cp_~\] if deletionchars\[cp_l, ce\] 'add\[cp_l, tp\] , if insertionchars \[ ct, _ 1 \]Pr(tlc) =sub\[tp, cp\] , if substitutionchars\[cp\]rev\[cp, Cp+t\]chars\[cp, cp+t\] ' if reversalwhere cp is the pth character of c, and likewisetp is the p ~ character of t. The five matrices arecomputed with a bootstrapping procedure.Initially assume a uniform distribution over thepossible confusions.
Then run the program overthe training set (1988 AP corpus) to findcorrections for the words that spell rejects.
Usethese corrections to update the confusionmatrices, and iterate.
The matrices are smoothedusing the Good-Turing method (Good, 1953).3.
Following Box and Tiao (1973), we can assume anuninformative prior and reach a posterior distribution forp.
The expectation of this distribution amounts to usingr+.5 instead of r. We call this the expected likelihoodestimate.
See Gale and Church (1990) for a discussion ofthe shortcomings of this method.4.
The chars matrices can be easily replicated, and aretherefore omitted from the appendix.Returning to the acress example, the sevenproposed transformations are scored bymultiplying the prior probability (which isproportional to 0.5 + column 4 in the tablebelow) and the channel probability (column 5) toform a raw score (column 2), which arenormalized to produce probabilities (column 1).The final results are: acres (45%), actress (37%),across (18%), access (0%), caress (0%), cress(0%).
This example is very hard; in fi~ct, thesecond choice is probably right, as can be seenfrom the context: ...was called a "stellar andversatile acress whose combination of sass andglamour has defined her ....
The program wouldneed a much better prior model in order tohandle this case.
In the future, a program mightbe able to lake advantage of the fact that actressis considerably more plausible than acres as anantecedent for whose.c % Raw freq(c) Pr(tlc)actress 37% .157 1343 55./470,000cress 0% .000 0 46./32,000,000caress 0% .000 4 .95/580,000access 0% .000 2280 .98/4,700,000across 18% .077 8436 93./10,000,000acres 21% .092 2879 417./13,000,000acres 23% .098 2879 205./6,000,0004.
EvaluationMany typos such as absorbant have just onecandidate correction, but others such as adustedhave multiple corrections.
The table belowshows examples of typos with less than tencandidate corrections, the corrections ordered bylikelihood.# Typo Corrections0 admininistration1 absorbant2 adusted3 ambitios4 compatability5 afte6 dialy7 poice8 piots9 spashabsorbentadjusted ustedambitious ambitions ambitioncompatibility compactabilitycomparability computabilityafter fate aft ate antedaily diary dials dial dimly dillypolice price voice poise pice poncepoirepilots pivots riots plots pits pots pintspioussplash smash slash spasm stash swashsash pash spasMost typos have relatively few candidatecorrections.
The table below shows the number206-3 -of tylx~S 5 broken out by the number ofcorrections in seven month-long samples of theAP newswire.
In March, for example, therewere '720 typos with 0 corrections, 1120 typoswith 1 correction, 269 with 2 corrections, etc.The fired cohtmn shows that there is a generaltrend for fewer choices, though the 0-choice caseis spe~zial.
(The system was trained on the APwire li'om 2/88 o 2/89; the results below werecomputed from AP wire during 3/89 - 9/89).5678910+TotalMarch April May June720 604 542 6061120 997 1037 1007269 224 209 223109 92 89 10158 57 62 4554 41 20 26July Aug Sept Total492 465 508 3937958 944 930 6993199 224 214 156279 87 82 63943 59 43 36728 24 28 22135 22  19 19 22 17 23\[ 15720 11 13 7 11 15 17\[ 9419 14 14 5 7 7 16\[ 8215 11 6 11 10 8 16l 77154 97 79 75 53 77 781 6132573 2 i -~ 2090 2125 1902 1927 19~t145~We decided to look at the 2-candidate case inmore detail in order to test how often the topscoring candidate agreed with a panel of threejudges.
The judges were given 564 triples and afew concordance lines:absurb absorb absurdfinancial community .
*E* *S* " It is absurb and probablyobscene for any person so engaged to undThe first word of the triple was a spell reject; theother two were the candidates (in alphabeticalorder).
The judges were given a 5-way forcedchoice.
They could circle any one of the threewords, if they thought hat was what the authorhad intended.
Alternatively, if they thought hatthe author had intended something else, theycould write down "other".
Finally, if theyweren't sure, they conld write ',9,,.
Thedistribution of responses is shown in thefollowing table.choice 0choice 1choice 2other?totalJudge 1 Judge 2 Judge 399 124 93188 176 167175 159 15128 26 3074 79 1235~ 5~ 5~The results show tlmt spell is rejecting too manywords, since choice 0 (spell error) is selectedabout 20% of the time.
In these cases, correctwas given a non-problem to correct:acquirees acquirers acquiresbe acquirers, as they have been,  than acquirees .
*E* *S* Ifthe industrials had attracted bids titSince we were mostly concerned with evaluatingthe scoring function, we didn't want to bedistracted with errors in spell and other problemsthat are beyond the scope of this paper.Therefore, we decided to consider only thosecases where at least two judges circled one ofthe two candidates, and they agreed with eachother.
This left 329 triples.The following table shows that correct agreeswith the majority of the judges in 87% of ttle329 cases of interest.
In order to help c~dibratethis result, three inferior methods ,are alsoevaluated.
The no-prior method ignores theprior probability.
The no-channel methodignolvs the channel probability.
Finally, theneither method ignores both probabilities andselects the first candidate in "all cases.
As thefollowing table shows, correct is significantlybetter than the three inferior alternatives.
Boththe channel and the prior probabilities provide asignificant contribution, and the combination issignificantly better than either in isolation.
Thesecond half of the table evaluates the judgesagainst one another and shows that theysigniticantly out-perlbrm correct, indicating thatthere is plenty of room for further improvement.
6All three judges found the task more diffmultand time consuming than they had expected.5.
For the purposes of this experiment, a type is a lowercaseword rejected by the Unix@ spell program.6.
Judges were only scored on triples for which theyselected "1"  or "2,"  and for which the other two judgesagreed on "1"  or "22'  A triple was scored "correct"for one judge if that judge agreed with the other two and"incorrect" if that judge disagreed with the other two.207 ,-4 -Each judge spent about half a day grading the564 triples.Methodcorrectno-priorno-channelneitherJudge 1Judge 2Judge 3Discrimination %286/329 87 + 1.9263/329 80 _+ 2.2247/329 75 _+ 2.4172/329 52 + 2.8271/273 99 + 0.5271/275 99 + 0.7271/281 96 _+ 1.1We were also interested in testing whether thescore predicted accuracy.
The figure at the endof this paper shows that this is indeed so.
Thehorizontal axis shows the score from one of thethree predictors (as the lines are lableled)averaged over a group of 20 typos.
The verticalaxis shows the fraction of this group that wereright.
The diagonal line indicates perfection.For example, consider a group of typos whoseaverage score was .8.
Perfect accuracy would beachieved if exactly 80 percent of this groupagreed with the majority opinion of the judges.The curved lines above and below the perfectionline show one standard deviation limits forestimating probabilities from samples of 20.
Theobservations on correct are outside of the onestandard eviation limits about as much as wouldbe called for by chance, while each of the othertwo methods has more points outside than wouldresult just by chance.
We conclude that thescores from correct predict accuracy fairly well;scores from the other two methods are moreproblematic.5.
ConclusionsThere have been a number of spelling correctionprograms in the past such as Kucera (1988) thatgenerated a list of candidates by looking forinsertions, deletions, substitutions and reversals,rauch as we have been doing here.
Ourcontribution is the emphasis on scoring.Mcllroy, the author of the Unix spell program(1982), intentionally focused on the spellingdetection problem, and argued (privatecommunication) that spelling correction was abad idea so long as the corrector couldn'tseparate the plausible candidates from theimplausible ones.
He felt that it was probablymore distracting than helpful to bury the userunder a long list of mostly implausiblecandidates.
In this work, we have attempted toshow that it is possible to sort the candidates bya likelihood function that agrees well enoughwith human judges to be helpful.In future work, we would hope to extend theprior model to take advantage of context.
Wenoticed that the human judges were extremelyreluctant to cast a vote given only theinformation available to the program, and thatthey were much more comfortable when theycould see a concordance line or two.
Perhapsour program could take advantage of thesecontextual cues by adopting very simplelanguage modeling techniques uch as trigrams,that have proven effective for speech recognitionapplications (Jelinek, 1985).
Hopefully moreinteresting language models would improveperformance even more,ReferencesBox, G. E. P., and G. C. Tiao, 1973 BayesianInference in Statistical Analysis, Addison-Wesley,Reading, Massachusetts.Gale, W., Church, K., (1990, submitted), "What'sWrong with Adding One?
"Good, I.J., (1953), "The population frequencies ofspecies and the estimation of population parameters,"Biometrika, v. 40, pp.
237-264.Jelinek, F. (1985) "Self-organized LanguageModeling for Speech Recognition," IBM Report.Kucera, H., (1988), "Automated Word SubstitutionUsing Numerical Rankings of Structural DisparityBetween Misspelled Words & Candidate SubstitutionWords," Patent Number: 4,783,758.Mcllroy, M., (1982), "Development of a SpellingList," IEEE Transactions on Communications, Vol.COM-30, No.
1.Accuracy of Probabilitiesood?5u,)?5,/' ~ J0,5 0.6 0.7 0.8 0.9 1.0predicted probability208-5 -6.
Appendix: Confusion MatricesXbCdefghiJk1mnopqrstuvwxyZ@del\[X, Y\] = Deletion of Y after XY (Deleted Letter)a b , c .
.
.
.
.
.
d e f g h i j k 1 m n o p q r s t u v w x y z0 7 58 21 3 5 18 8 61 0 4 43 5 53 0 9 0 98 28 53 62 1 0 0 2 02 2 1 0 22 0 0 0 183 0 0 26 0 0 2 0 0 6 17 0 6 1 0 0 0 037 0 70 0 63 0 0 24 320 0 9 17 0 0 33 0 0 46 6 54 17 0 0 0 1 012 0 7 25 45 0 10 0 62 1 1 8 4 3 3 0 0 I1 1 0 3 2 0 0 6 080 1 50 74 89 3 1 1 6 0 0 32 9 76 19 9 1 237 223 34 8 2 1 7 1 04 0 0 0 13 46 0 0 79 0 0 12 0 0 4 0 0 11 0 8 1 0 0 0 1 025 0 0 2 83 1 37 25 39 0 0 3 0 29 4 0 0 52 7 1 22 0 0 0 1 015 12 1 3 20 0 0 25 24 0 0 7 1 9 22 0 0 15 1 26 0 0 1 0 1 026 1 60 26 23 1 9 0 1 0 0 38 14 82 41 7 0 16 71 64 1 1 0 0 1 70 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 04 0 0 1 15 1 8 1 5 0 1 3 0 17 0 0 0 1 5 0 0 0 1 0 0 024 0 1 6 48 0 0 0 217 0 0 211 2 0 29 0 0 2 12 7 3 2 0 0 11 015 10 0 0 33 0 0 1 42 0 0 0 180 7 7 31 0 0 9 0 4 0 0 0 0 021 0 42 71 68 1 160 0 191 0 0 0 17 144 21 0 0 0 127 87 43 1 1 0 2 011 4 3 6 8 0 5 0 4 1 0 13 9 70 26 20 0 98 20 13 47 2 5 0 1 025 0 0 0 22 0 0 12 15 0 0 28 1 0 30 93 0 58 1 18 2 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 18 0 0 0 0 063 4 12 19 188 0 11 5 132 0 3 33 7 157 21 2 0 277 103 68 0 10 1 0 27 016 0 27 0 74 1 0 18 231 0 0 2 1 0 30 30 0 4 265 124 21 0 0 0 1 024 1 2 0 76 1 7 49 427 0 0 31 3 3 11 1 0 203 5 137 14 0 4 0 2 026 6 9 10 15 0 1 0 28 0 0 39 2 111 1 0 0 129 31 66 0 0 0 0 1 09 0 0 0 58 0 0 0 31 0 0 0 0 0 2 0 0 1 0 0 0 0 0 0 1 040 0 0 1 11 1 0 11 15 0 0 1 0 2 2 0 0 2 24 0 0 0 0 0 0 01 0 17 0 3 0 0 I 0 0 0 0 0 0 0 6 0 0 0 5 0 0 0 0 1 02 1 34 0 2 0 1 0 1 0 0 1 2 1 1 1 0 0 17 1 0 0 1 0 0 01 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 220 14 41 31 20 20 7 6 20 3 6 22 16 5 5 17 0 28 26 6 2 1 24 0 0 2XT-bCdefghiJk1mnopqrstuvwxyZ@add\ [X ,  Y\] = Inser t ion  o f  Y a f te r  XY (Inserted Letter)a b c d e f g h i j k 1 m n o p q r s t u v w x y z15 1 14 7 10 0 1 1 33 1 4 31 2 39 12 4 3 28 134 7 28 0 1 1 4 13 11 0 0 7 0 1 0 50 0 0 15 0 1 1 0 0 5 16 0 0 3 0 0 0 019 0 54 1 13 0 0 18 50 0 3 1 1 1 7 1 0 7 25 7 8 4 0 1 0 018 0 3 17 14 2 0 0 9 0 0 6 1 9 13 0 0 6 119 0 0 0 0 0 5 039 2 8 76 147 2 0 1 4 0 3 4 6 27 5 1 0 83 417 6 4 1 10 2 8 01 0 0 0 2 27 1 0 12 0 0 10 0 0 0 0 0 5 23 0 1 0 0 0 1 08 0 0 0 5 1 5 12 8 0 0 2 0 1 1 0 1 5 69 2 3 0 1 0 0 04 1 0 1 24 0 10 18 17 2 0 1 0 1 4 0 0 16 24 22 1 0 5 0 3 010 3 13 13 25 0 I 1 69 2 1 17 11 33 27 1 0 9 30 29 11 0 0 1 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 02 4 0 1 9 0 0 1 1 0 1 I 0 0 2 1 0 0 95 0 1 0 0 0 4 03 1 0 1 38 0 0 0 79 0 2 128 1 0 7 0 0 0 97 7 3 1 0 0 2 0I1 1 1 0 17 0 0 1 6 0 1 0 102 44 7 2 0 0 47 1 2 0 1 0 0 015 5 7 13 52 4 17 O 34 0 1 1 26 99 12 0 0 2 156 53 1 1 0 0 1 014 1 1 3 7 2 1 0 28 1 0 6 3 13 64 30 0 16 59 4 19 1 0 0 1 123 0 1 1 10 0 0 20 3 0 0 2 0 0 26 70 0 29 52 9 1 1 1 0 0 00 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 015 2 1 0 89 1 1 2 64 0 0 5 9 7 10 0 0 132 273 29 7 0 1 0 10 013 1 7 20 41 0 1 50 101 0 2 2 10 7 3 1 0 1 205 49 7 0 1 0 7 039 0 0 3 65 1 10 24 59 1 0 6 3 1 23 1 0 54 264 183 11 0 5 0 6 015 0 3 0 9 0 0 1 24 I 1 3 3 9 1 3 0 49 19 27 26 0 0 2 3 00 2 0 0 36 0 0 0 10 0 0 1 0 1 0 1 0 0 0 0 1 5 1 0 0 00 0 0 1 10 0 0 1 1 0 1 1 0 2 0 0 1 1 8 0 2 0 4 0 0 00 0 18 0 1 0 0 6 1 0 0 0 1 0 3 0 0 0 2 0 0 0 0 1 0 05 1 2 0 3 0 0 0 2 0 0 1 1 6 0 0 0 1 33 1 13 0 1 0 2 02 0 0 0 5 1 0 0 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 446 8 9 8 26 11 14 3 5 1 17 5 6 2 2 10 0 6 23 2 11 1 2 1 1 2209-6 -XabCdCfghiJk1I nnoPqrstuvwxYZsub\[X, Y\] = Substitution of X (incorrect) for Y (correct)Y (correct)a b c d e f g h i j k 1 m n o p q r s t u v w x y z0 0 7 1 342 0 0 2 118 0 1 0 0 3 76 0 0 1 35 9 9 0 1 0 5 00 0 9 9 2 2 3 1 0 0 0 5 11 5 0 10 0 0 2 1 0 0 8 0 0 06 5 0 16 0 9 5 0 0 0 I 0 7 9 1 10 2 5 39 40 1 3 7 1 1 01 10 13 0 12 0 5 5 0 0 2 3 7 3 0 1 0 43 30 22 0 0 4 0 2 0388 0 3 11 0 2 2 0 89 0 0 3 0 5 93 0 0 14 12 6 15 0 1 0 18 00 15 0 3 1 0 5 2 0 0 0 3 4 1 0 0 0 6 4 12 0 0 2 0 0 04 1 11 11 9 2 0 0 0 1 1 3 0 0 2 1 3 5 13 21 0 0 1 0 3 01 8 0 3 0 0 0 0 0 0 2 0 12 14 2 3 0 3 1 11 0 0 2 0 0 0103 0 0 0 146 0 1 0 0 0 0 6 0 0 49 0 0 0 2 1 47 0 2 1 15 00 1 1 9 0 0 1 0 0 0 0 2 1 0 0 0 0 0 5 0 0 0 0 0 0 01 2 8 4 1 1 2 5 0 0 0 0 5 0 2 0 0 0 6 0 0 0 .4  0 0 32 10 1 4 0 4 5 6 13 0 1 0 0 14 2 5 0 11 10 2 0 0 0 0 0 01 3 7 8 0 2 0 6 0 0 4 4 0 180 0 6 0 0 9 15 13 3 2 2 3 02 7 6 5 3 0 1 19 1 0 4 35 78 0 0 7 0 28 5 7 0 0 1 2 0 291 1 1 3 116 0 0 0 25 0 2 0 0 0 0 14 0 2 4 14 39 0 0 0 18 00 11 1 2 0 6 5 0 2 9 0 2 7 6 15 0 0 1 3 6 0 4 1 0 0 00 0 1 0 0 0 27 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 14 0 30 12 2 2 8 2 0 5 8 4 20 1 14 0 0 12 22 4 0 0 1 0 011 8 27 33 35 4 0 1 0 1 0 27 0 6 1 7 0 14 0 15 0 0 5 3 20 13 4 9 42 7 5 19 5 0 1 0 14 9 5 5 6 0 11 37 0 0 2 19 0 7 620 0 0 0 44 0 0 0 64 0 0 0 0 2 43 0 0 4 0 0 0 0 2 0 8 00 0 7 0 0 3 0 0 0 0 0 1 0 0 1 0 0 0 8 3 0 0 0 0 0 02 2 1 0 1 0 0 2 0 0 I 0 0 0 0 7 0 6 3 3 1 0 0 0 0 00 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 9 0 0 0 0 0 0 00 0 2 0 15 0 1 7 15 0 0 0 2 0 6 1 0 7 36 8 5 0 0 1 0 00 0 0 7 0 0 0 0 0 0 0 7 5 0 0 0 0 2 21 3 0 0 0 0 3 0XbCdCfghiJkImnoPqr$tuvwxYZrev \ [X ,  Y \ ]  = Reversa l  o f  XYYa b c d e f g h i j k 1 m n o p q r s t u v w x y z0 0 2 I 1 0 0 0 19 0 1 14 4 25 10 3 0 27 3 5 31 0 0 0 0 00 0 0 0 2 0 0 0 0 0 0 1 1 0 2 0 0 0 2 0 0 0 0 0 0 00 0 0 0 1 0 0 1 85 0 0 15 0 0 13 0 0 0 3 0 7 0 0 0 0 00 0 0 0 0 0 0 0 7 0 0 0 0 0 0 0 0 1 0 0 2 0 0 0 0 0I 0 4 5 0 0 0 0 60 0 0 21 6 16 11 2 0 29 5 0 85 0 0 0 2 00 0 0 0 0 0 0 0 12 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 04 0 0 0 2 0 0 0 0 0 0 1 0 15 0 0 0 3 0 0 3 0 0 0 0 012 0 0 0 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 0 0 0 0 0 015 8 31 3 66 1 3 0 0 0 0 9 0 5 11 0 1 13 42 35 0 6 0 0 0 30 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0I1 0 0 12 20 0 1 0 4 0 0 0 0 0 1 3 0 0 1 1 3 9 0 0 7 09 0 0 0 20 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 4 0 0 0 0 015 0 6 2 12 0 8 0 1 0 0 0 3 0 0 0 0 0 6 4 0 0 0 0 0 05 0 2 0 4 0 0 0 5 0 0 1 0 5 0 1 0 11 1 1 0 0 7 1 0 017 0 0 0 4 0 0 1 0 0 0 0 0 0 1 0 0 5 3 ,  6 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 012 0 0 0 24 0 3 0 14 0 2 2 0 7 30 1 0 0 0 2 10 0 0 0 2 04 0 0 0 9 0 0 5 15 0 0 5 2 0 1 22 0 0 0 1 3 0 0 0 16 04 0 3 0 4 0 0 21 49 0 0 4 0 0 3 0 0 5 0 0 11 0 2 0 0 022 0 5 1 1 0 2 0 2 0 0 2 1 0 20 2 0 11 I1 2 0 0 0 0 0 00 0 0 0 I 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 4 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 8 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 00 1 2 0 0 0 1 0 0 0 0 3 0 0 0 2 0 1 10 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0210
