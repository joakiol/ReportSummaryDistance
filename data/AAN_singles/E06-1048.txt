Unifying Synchronous Tree-Adjoining Grammars andTree Transducers via BimorphismsStuart M. ShieberDivision of Engineering and Applied SciencesHarvard UniversityCambridge, MA, USAshieber@deas.harvard.eduAbstractWe place synchronous tree-adjoininggrammars and tree transducers in thesingle overarching framework of bimor-phisms, continuing the unification ofsynchronous grammars and tree transduc-ers initiated by Shieber (2004).
Along theway, we present a new definition of thetree-adjoining grammar derivation relationbased on a novel direct inter-reduction ofTAG and monadic macro tree transducers.Tree transformation systems such as tree trans-ducers and synchronous grammars have seen re-newed interest, based on a perceived relevanceto new applications, such as importing syntacticstructure into statistical machine translation mod-els or founding a formalism for speech commandand control.The exact relationship among a variety of for-malisms has been unclear, with a large numberof seemingly unrelated formalisms being inde-pendently proposed or characterized.
An initialstep toward unifying the formalisms was taken(Shieber, 2004) in making use of the formal-language-theoretic device of bimorphisms, previ-ously used to characterize the tree relations defin-able by tree transducers.
In particular, the tree re-lations definable by synchronous tree-substitutiongrammars (STSG) were shown to be just those de-finable by linear complete bimorphisms, therebyproviding for the first time a clear relationship be-tween synchronous grammars and tree transduc-ers.In this work, we show how the bimorphismframework can be used to capture a more powerfulformalism, synchronous tree-adjoining grammars,providing a further uniting of the various and dis-parate formalisms.After some preliminaries (Section 1), we be-gin by recalling the definition of tree-adjoininggrammars and synchronous tree-adjoining gram-mars (Section 2).
We turn then to a set of knownresults relating context-free languages, tree homo-morphisms, tree automata, and tree transducersto extend them for the tree-adjoining languages(Section 3), presenting these in terms of restrictedkinds of functional programs over trees, using asimple grammatical notation for describing theprograms.
This allows us to easily express gener-alizations of the notions: monadic macro tree ho-momorphisms, automata, and transducers, whichbear (at least some of) the same interrelationshipsthat their traditional simpler counterparts do (Sec-tion 4).
Finally, we use this characterization toplace the synchronous TAG formalism in the bi-morphism framework (Section 5), further unify-ing tree transducers and other synchronous gram-mar formalisms.
We also, in passing, provide anew characterization of the relation between TAGderivation and derived trees, and a new simplerand more direct proof of the equivalence of TALsand the output languages of monadic macro treetransducers.1 PreliminariesWewill notate sequences with angle brackets, e.g.,?a,b,c?, or where no confusion results, simply asabc, with the empty string written ?
.Trees will have nodes labeled with elements ofa RANKED ALPHABET, a set of symbols F, eachwith a non-negative integer RANK or ARITY as-signed to it, determining the number of childrenfor nodes so labeled.
To emphasize the arity ofa symbol, we will write it as a parenthesized su-perscript, for instance f (n) for a symbol f of ar-ity n. Analogously, we write F(n) for the set ofsymbols in F with arity n. Symbols with arityzero (F(0)) are called NULLARY symbols or CON-377STANTS.
The set of nonconstants is written F(?1).To express incomplete trees, trees with ?holes?waiting to be filled, we will allow leaves to be la-beled with variables, in addition to nullary sym-bols.
The set of TREES OVER A RANKED AL-PHABET F AND VARIABLES X, notated T(F,X),is the smallest set such that (i) f ?
T(F,X) forall f ?
F(0); (ii) x ?
T(F,X) for all x ?
X; and(iii) f (t1, .
.
.
, tn) ?
T(F,X) for all f ?
F(?1), andt1, .
.
.
, tn ?
T(F,X).
We abbreviate T(F, /0), wherethe set of variables is empty, as T(F), the setof GROUND TREES over F. We will also makeuse of the set of n numerically ordered variablesXn = {x1, .
.
.
,xn}, and write x, y, z as synonymsfor x1, x2, x3, respectively.Trees can also be viewed as mappings fromTREE ADDRESSES, sequences of integers, to thelabels of nodes at those addresses.
The address ?is the address of the root, 1 the address of the firstchild, 12 the address of the second child of the firstchild, and so forth.
We will use the notation t/p topick out the subtree of the node at address p in thetree t. Replacing the subtree of t at address p bya tree t ?, written t[p 7?
t ?]
is defined as (using ?
forthe insertion of an element on a list)t[?
7?
t ?]
= t ?f (t1, .
.
.
, tn)[(i ?
p) 7?
t ?]
=f (t1, .
.
.
, ti[p 7?
t ?
], .
.
.
, tn) for 1 ?
i ?
n .The HEIGHT of a tree t, notated height(t), is de-fined as follows: height(x) = 0 for all x ?
X andheight( f (t1, .
.
.
, tn)) = 1+maxni=1 height(ti) for allf ?
F .We can use trees with variables as CONTEXTSin which to place other trees.
A tree in T(F,Xn)will be called a context, typically denoted with thesymbol C. For a context C ?
T(F,Xn) and a se-quence of n trees t1, .
.
.
, tn ?
T(F), the SUBSTITU-TION OF t1, .
.
.
, tn INTO C, notated C[t1, .
.
.
, tn], isdefined inductively as follows:( f (u1, .
.
.
,um))[t1, .
.
.
, tn]= f (u1[t1, .
.
.
, tn], .
.
.
,um[t1, .
.
.
, tn])xi[t1, .
.
.
, tn] = ti .A tree t ?
T(F,X) is LINEAR if and only if novariable in X occurs more than once in t.We will use a notation akin to BNF to specifyequations defining functional programs of varioussorts.
As an introduction to the notation we willuse, here is a grammar defining trees over a rankedalphabet and variables (essentially identically tothe definition given above):f (n) ?
F(n)x ?
X ::= x0 | x1 | x2 | ?
?
?t ?
T(F,X) ::= f (m)(t1, .
.
.
, tm)| xThe notation allows definition of classes of ex-pressions (e.g., F(n)) and specifies metavariablesover them ( f (n)).
These classes can be primitive(F(n)) or defined (X), even inductively in termsof other classes or themselves (T(F,X)).
We usethe metavariables and subscripted variants on theright-hand side to represent an arbitrary elementof the corresponding class.
Thus, the elementst1, .
.
.
, tm stand for arbitrary trees in T(F,X), andx an arbitrary variable in X.
Because numericallysubscripted versions of x appear explicitly on theright hand side of the rule defining variables, nu-merically subscripted variables (e.g., x1) on theright-hand side of all rules are taken to refer tothe specific elements of x, whereas otherwise sub-scripted elements (e.g., xi) are taken generically.2 Tree-Adjoining GrammarsTree adjoining grammar (TAG) is a tree gram-mar formalism distinguished by its use of a treeadjunction operation.
Traditional presentationsof TAG, which we will assume familiarity with,take the symbols in elementary and derived treesto be unranked; nodes labeled with a given non-terminal symbol may have differing numbers ofchildren.
(Joshi and Schabes (1997) present agood overview.)
For example, foot nodes of aux-iliary trees and substitution nodes have no chil-dren, whereas the similarly labeled root nodesmust have at least one.
Similarly, two nodes withthe same label but differing numbers of childrenmay match for the purpose of allowing an ad-junction (as the root nodes of ?1 and ?1 in Fig-ure 1).
In order to integrate TAG with tree trans-ducers, however, we move to a ranked alphabet,which presents some problems and opportunities.
(In some ways, the ranked alphabet definition ofTAGs is slightly more elegant than the traditionalone.)
Although the bulk of the later discussionintegrating TAGs and transducers assumes (with-out loss of expressivity (Joshi and Schabes, 1997,fn.
6)) a limited form of TAG that includes adjunc-tion but not substitution, we define the more com-plete form here.We will thus take the nodes of TAG trees to belabeled with symbols from a ranked alphabet F;a given symbol then has a fixed arity and a fixed378T?S TcS?a Sa S?b Sb?1 : ?2 : ?2 :?1 : S /0 S /0Figure 1: Sample TAG for the copy language{wcw | w ?
{a,b}?
}.number of children.
However, in order to main-tain information about which symbols may matchfor the purpose of adjunction and substitution, wetake the elements of F to be explicitly formed aspairs of an unranked label e and an arity n. (Fornotational consistency, we will use e for unrankedand f for ranked symbols.)
We will notate theseelements, abusing notation, as e(n), and make useof a function |?| to unrank symbols in F, so that|e(n)| = e.To handle foot nodes, for each non-nullary sym-bol e(i) ?
F(?1), we will associate a new nullarysymbol e?, which one can take to be the pair of eand ?
; the set of such symbols will be notated F?.Similarly, for substitution nodes, F?
will be the setof nullary symbols e?
for all e(i) ?
F(?1).
Theseadditional symbols, since they are nullary, willnecessarily appear only at the frontier of trees.
Fi-nally, to allow null adjoining constraints, for eachf ?
F(i), we introduce a symbol f /0 also of arity i,and take F /0 to be the set of all such symbols.
Wewill extend the function |?| to provide the unrankedsymbol associated with these symbols as well, so|e?| = |e?| = |e(i) /0| = e.A TAG is then a quadruple ?F,S, I,A?, where Fis a ranked alphabet; S?F is a distinguished initialsymbol; I is the set of initial trees, a finite subset ofT(F?F /0 ?F?
); and A is the set of auxiliary trees,a finite subset of T(F?F /0?F??F?).
An auxiliarytree ?
whose root is labeled f must have exactlyone node labeled with | f |?
?F?
and no other nodeslabeled in F?
; this node is its foot node, its addressnotated foot(?
).
In Figure 1, ?1 and ?2 are initialtrees; ?1 and ?2 are auxiliary trees.In order to allow reference to a particular tree inthe set P, we associate with each tree in P a uniqueindex, conventionally notated with a subscripted?
or ?
for initial and auxiliary trees respectively.This further allows us to have multiple instancesof a tree in I or A, distinguished by their index.
(We will abuse notation by using the index and thetree that it names interchangably.
)The trees are combined by two operations, sub-stitution and adjunction.
Under substitution, a?S : S?STc?1 : 1S?a Sa?1 :S?b Sb?2 :1 1S /0 S /0Figure 2: Sample core-restricted TAG for the copylanguage {wcw | w ?
{a,b}?
}.node labeled e?
(at address p) in a tree ?
canbe replaced by an initial tree ?
?
with the corre-sponding label f at the root when | f | = e. Theresulting tree, the substitution of ?
?
at p in ?
, is?
[p 7?
?
?].
Under adjunction, an internal node of?
at p labeled f ?
F is split apart, replaced byan auxiliary tree ?
rooted in f ?
when | f | = | f ?|.The resulting tree, the adjunction of ?
at p in ?
,is ?
[p 7?
?
[foot(? )
7?
?/p]].
This definition (byrequiring f to be in F, not F?
or F?)
maintainsthe standard convention, without loss of expres-sivity, that adjunction is disallowed at foot nodesand substitution nodes.The TAG in Figure 1 generates a tree setwhose yield is the non-context-free copy language{wcw | w ?
{a,b}?
}.
The arities of the nodes aresuppressed, as they are clear from context.A derivation tree D records the operations overthe elementary trees used to derive a given derivedtree.
Each node in the derivation tree specifiesan elementary tree ?
, the node?s child subtrees Direcording the derivations for trees that are adjoinedor substituted into that tree.
A method is requiredto record at which node in ?
the tree specifiedby child subtree Di operates.
For trees recordingderivations in context-free grammars, there are ex-actly as many substitution operations as nontermi-nals on the right-hand side of the rule used.
Thus,child order in the derivation tree can be used torecord the identity of the substitution node.
But forTAG trees, operations occur throughout the tree,and some, namely adjunctions, can be optional, soa simple convention using child order is not pos-sible.
Traditionally, the branches in the derivationtree have been notated with the address of the nodein the parent tree at which the child node oper-ates.
Figure 4 presents a derivation tree (a) us-ing this notation, along with the corresponding de-rived tree (b) for the string abcab.For simplicity below, we use a stripped downTAG formalism, one that loses no expressivity inweak generative capacity but is easier for analysispurposes.First, we make all adjunction obligatory, in the379ABA?B?a b231B /0Figure 3: Sample TAG tree marked with diacriticsto show the permutation of operable nodes.sense that if a node in a tree allows adjunction, anadjunction must occur there.
To get the effect ofoptional adjunction, for instance at a node labeledB, we add a vestigial tree of a single node ?B = B?,which has no adjunction sites and does not itselfmodify any tree that it adjoins into.
It thus foundsthe recursive structure of derivations.Second, now that it is determinate whether anoperation must occur at a node, the number ofchildren of a node in a derivation tree is deter-mined by the elementary tree at that node; it is justthe number of adjunction or substitution nodes inthe tree, the OPERABLE NODES.
All that is leftto determine is the mapping between child orderin the derivation tree and node in the elementarytree labeling the parent, that is, a permutation pion the operable nodes (or equivalently, their ad-dresses), so that the i-th child of a node labeled ?in a derivation tree is taken to specify the tree thatoperates at the node pii in ?
.
This permutation canbe thought of as specified as part of the elemen-tary tree itself.
For example, the tree in Figure 3,which requires operations at the nodes at addresses?
, 12, and 2, may be associated with the permuta-tion ?12,2,??.
This permutation can be marked onthe tree itself with numeric diacritics i , as shownin the figure.Finally, as mentioned before, we eliminate sub-stitution (Joshi and Schabes, 1997, fn.
6).
Withthese changes, the sample TAG grammar andderivation tree of Figures 1 and 4(a) might be ex-pressed with the core TAG grammar and deriva-tion tree of Figures 2 and 4(c).3 Tree Transducers, Homomorphisms,and Automata3.1 Tree TransducersInformally, a TREE TRANSDUCER is a functionfrom T(F) to T(G) defined such that the symbolat the root ofthe input tree and a current state de-termines an output context in which the recursiveimages of the subtrees are placed.
Formally, wecan define a transducer as a kind of functional pro-gram, that is, a set of equations characterized bythe following grammar for equations Eqn.
(Theset of states is conventionally notated Q, withmembers notated q.
One of the states is distin-guished as the INITIAL STATE of the transducer.
)1q ?
Qf (n) ?
F(n)g(n) ?
G(n)xi ?
X ::= x0 | x1 | x2 | ?
?
?Eqn ::= q( f (n)(x1, .
.
.
,xn)) = ?(n)?
(n) ?
R(n) ::= g(m)(?
(n)1 , .
.
.
,?
(n)m )| q j(xi) where 1 ?
i ?
nIntuitively speaking, the expressions in R(n) areright-hand-side terms using variables limited tothe first n.For example, the grammar allows definition ofthe following set of equations defining a tree trans-ducer:2q( f (x)) = g(q?
(x),q(x))q(a) = aq?
( f (x)) = f (q?(x))q?
(a) = aThis transducer allows for the following deriva-tion:q( f ( f (a)) = g(q?
( f (a),q( f (a))))= g( f (q?(a)),g(q?
(a),q(a)))= g( f (a),g(a,a))The relation defined by a tree transducer withinitial state q is {?t,u?
| q(t) = u}.
By virtue ofnondeterminism in the equations, multiple equa-tions for a given state q and symbol f , tree trans-ducers define true relations rather than merelyfunctions.TREE HOMOMORPHISMS are a subtype of treetransducers, those with only a single state, henceessentially stateless.
Other subtypes of tree trans-ducers can be defined by restricting the trees ?1Strictly speaking, what we define here are nondetermin-istic top-down tree transducers.2Full definitions of tree transducers typically describe atransducer in terms of a set of states, an input and outputranked alphabet, and an initial state, in addition to the set oftransitions, that is, defining equations.
We will leave off thesedetails, in the expectation that the sets of states and symbolscan be inferred from the equations, and the initial state de-termined under a convention that it is the state defined in thetextually first equation.Note also that we avail ourselves of consistent renamingof the variables x1, x2, and so forth, where convenient forreadability.380that form the right-hand sides of equations, theelements of R(n) used.
A transducer is LINEARif all such ?
are linear; is COMPLETE if ?
con-tains every variable in Xn; is ?
-FREE if ?
6?
Xn; isSYMBOL-TO-SYMBOL if height(?)
= 1; and is aDELABELING if ?
is complete, linear, and symbol-to-symbol.Another subcase is TREE AUTOMATA, treetransducers that compute a partial identity func-tion; these are delabeling tree transducers that pre-serve the label and the order of arguments.
Be-cause they compute only the identity function, treeautomata are of interest for their domains, not themappings they compute.
Their domains definetree languages, in particular, the so-called REGU-LAR TREE LANGUAGES.3.2 The Bimorphism Characterization ofTree TransducersTree transducers can be characterized directly interms of equations defining a simple kind of func-tional program, as above.
There is an elegant alter-native characterization of tree transducers in termsof a constellation of elements of the various sub-types of transducers ?
homomorphisms and au-tomata ?
we have introduced, called a bimor-phism.A bimorphism is a triple ?L,hi,ho?, consistingof a regular tree language L (or, equivalently, atree automaton) and two tree homomorphisms hiand ho.
The tree relation defined by a bimor-phism is the set of tree pairs that are generablefrom elements of the tree language by the homo-morphisms, that is,L(?L,hi,ho?)
= {?hi(t),ho(t)?
| t ?
L} .We can limit attention to bimorphisms in whichthe input or output homomorphisms are restrictedto a certain type, linear (L), complete (C), epsilon-free (F), symbol-to-symbol (S), delabeling (D), orunrestricted (M).
We will write B(I,O) where Iand O characterize a subclass of homomorphismsfor the set of bimorphisms for which the input ho-momorphism is in the subclass indicated by I andthe output homomorphism is in the subclass indi-cated by O.
Thus, B(D,M) is the set of bimor-phisms for which the input homomorphism is adelabeling but the output homomorphism can bearbitrary.The tree relations definable by tree transducersturn out to be exactly this class B(D,M) (Comonet al, 1997).
The bimorphism notion thus allowsus to characterize the tree transductions purely interms of tree automata and tree homomorphisms.We have shown (Shieber, 2004) that the treerelations defined by synchronous tree-substitutiongrammars were exactly the relations B(LC,LC).Intuitively speaking, the tree language in such abimorphism represents the set of derivation treesfor the synchronous grammar, and each homomor-phism represents the relation between the deriva-tion tree and the derived tree for one of the pro-jected tree-substitution grammars.
The homomor-phisms are linear and complete because the tree re-lation between a tree-substitution grammar deriva-tion tree and its associated derived tree is exactlya linear complete tree homomorphism.
To charac-terize the tree relations defined by a synchronoustree-adjoining grammar, it similary suffices to finda simple homomorphism-like characterization ofthe tree relation between TAG derivation trees andderived trees.
In Section 5 below, we show thatlinear complete embedded tree homomorphisms,which we introduce next, serve this purpose.4 Embedded Tree TransducersEmbedded tree transducers are a generalizationof tree transducers in which states are allowedto take a single additional argument in a re-stricted manner.
They correspond to a restric-tive subcase of macro tree transducers with onerecursion variable.
We use the term ?embed-ded tree transducer?
rather than the more cumber-some ?monadic macro tree transducer?
for brevityand by analogy with embedded pushdown au-tomata (Schabes and Vijay-Shanker, 1990), an-other automata-theoretic characterization of thetree-adjoining languages.Wemodify the grammar of transducer equationsto add an extra argument to each occurrence of astate q.
To highlight the special nature of the extraargument, it is written in angle brackets before theinput tree argument.
We uniformly use the other-wise unused variable x0 for this argument in theleft-hand side, and add x0 as a possible right-handside itself.
Finally, right-hand-side occurrencesof states may be passed an arbitrary further right-hand-side tree in this argument.q ?
Qf (n) ?
F(n)xi ?
X ::= x0 | x1 | x2 | ?
?
?Eqn ::= q?[x0]?
( f (n)(x1, .
.
.
,xn)) = ?(n)?
(n) ?
R(n) ::= f (m)(?
(n)1 , .
.
.
,?
(n)m )| x0| q j??
(n)j ?
(xi) where 1 ?
i ?
n381Embedded transducers are strictly more expres-sive than traditional transducers, because the extraargument allows unbounded communication be-tween positions unboundedly distant in depth inthe output tree.
For example, a simple embeddedtransducer can compute the reversal of a string,e.g., 1(2(2(nil))) reverses to 2(2(1(nil))).
(Thisis not computable by a traditional tree transducer.
)It is given by the following equations:r??
(x) = r??nil?(x)r??x0?
(nil) = x0r??x0?
(1(x)) = r??1(x0)?(x)r??x0?
(2(x)) = r??2(x0)?
(x)(1)This is, of course, just the normal accumulatingreverse functional program, expressed as an em-bedded transducer.
The additional power of em-bedded transducers is, we will show in this sec-tion, exactly what is needed to characterize the ad-ditional power that TAGs represent over CFGs indescribing tree languages.
In particular, we showthat the relation between a TAG derivation treeand derived tree is characterized by a determinis-tic linear complete embedded tree transducer (DL-CETT).The relation between tree-adjoining languagesand embedded tree transducers may be implicit ina series of previous results in the formal-languagetheory literature.3 For instance, Fujiyoshi andKasai (2000) show that linear, complete monadiccontext-free tree grammars generate exactly thetree-adjoining languages via a normal form forspine grammars.
Separately, the relation betweencontext-free tree grammars and macro tree trans-ducers has been described, where the relation-ship between the monadic variants of each is im-plicit.
Thus, taken together, an equivalence be-tween the tree-adjoining languages and the im-age languages of monadic macro tree transducersmight be pieced together.
In the present work,we define the relation between tree-adjoining lan-guages and linear complete monadic tree trans-ducers directly, simply, and transparently, by giv-ing explicit constructions in both directions, care-fully handling the distinction between the un-ranked trees of tree-adjoining grammars and theranked trees of macro tree transducers and otherimportant issues of detail in the constructions.The proof requires reductions in both directions.First, we show that for any TAG we can constructa DLCETT that specifies the tree relation betweenthe derivation trees for the TAG and the derived3We are indebted to Uwe Mo?nnich for this observation.trees.
Then, we show that for any DLCETT wecan construct a TAG such that the tree relation be-tween the derivation trees and derived trees is re-lated through a simple homomorphism to the DL-CETT tree relation.4.1 From TAG to TransducerGiven an elementary tree ?
with the label A at itsroot, let the sequence pi = ?pi1, .
.
.
,pin?
be a per-mutation on the nodes in ?
at which adjunctionoccurs.
(We use this ordering by means of the dia-critic representation below.)
Then, if ?
is an aux-iliary tree, construct the equationqA?x0?(?
(x1, .
.
.
,xn)) = b?cand if ?
is an initial tree, construct the equationqA??(?
(x1, .
.
.
,xn)) = b?cwhere the right-hand-side transformation b?c is de-fined by4bA /0(t1, .
.
.
, tn)c = A(bt1c, .
.
.
,btnc)b k A(t1, .
.
.
, tn)c = qA?bA /0(t1, .
.
.
, tn)c?
(xk)bA?c = x0bac = a(2)Note that the equations are linear and complete,because each variable xi is generated once as thetree ?
is traversed, namely at position pii in thetraversal (marked with i ), and the variable x0 isgenerated at the foot node only.
Thus, the gener-ated embedded tree transducer is linear and com-plete.
Because only one equation is generated pertree, the transducer is trivially deterministic.By way of example, we consider the core TAGgrammar given by the following trees:?
: 1 A(e)?A : A /0( 1 B(a), 2 C( 3 D(A?
)))?B : 1 B(b,B?
)?B : B?
?C : C?
?D : D?4It may seem like trickery to use the diacritics in this way,as they are not really components of the tree being traversed,but merely reflexes of an extrinsic ordering.
But their use isbenign.
The same transformation can be defined, a bit morecumbersomely, keeping the permutation pi separate, by track-ing the permutation and the current address p in a revisedtransformation b?cpi,p defined as follows:bA /0(t1, .
.
.
, tn)cpi,p = A(bt1cpi,p?1, .
.
.
,btncpi,p?n)bA(t1, .
.
.
, tn)cpi,p = qA?bA /0(t1, .
.
.
, tn)cpi,p?
(xpi?1(p))bA?cpi,p = x0bacpi,p = aWe then use b?cpi,?
for the transformation of the tree ?
.382?1?2?1?21 ?2abSaSTcbSSS?S?1?2?1(a) (b) (c)Figure 4: Derivation and derived trees for the sam-ple grammars: (a) derivation tree for the gram-mar of Figure 1; (b) corresponding derived tree;(c) corresponding derivation tree for the core TAGversion of the grammar in Figure 2.Starting with the auxiliary tree ?A =A /0( 1 B(a), 2 C( 3 D(A?
))), the adjunction sites,corresponding to the nodes labeled B, C, and D ataddresses 1, 2, and 21, have been arbitrarily givena preorder permutation.
We therefore constructthe equation as follows:qA?x0?
(?A(x1,x2,x3))= bA /0( 1 B(a), 2 C( 3 D(A?
)))c= A(b 1 B(a)c,b 2 C( 3 D(A?
))c)= A(qB?bB /0(a)c?
(x1),b 2 C( 3 D(A?
))c)= A(qB?B(bac)?
(x1),b 2 C( 3 D(A?
))c)= ?
?
?= A(qB?B(a)?(x1),qC?C(qD?D(x0)?(x3))?
(x2))Similar derivations for the remaining trees yieldthe (deterministic linear complete) embedded treetransducer defined by the following set of equa-tions:qA??(?
(x1)) = qA?A(e)?(x1)qA?x0?
(?A(x1,x2,x3)) =A(qB?B(a)?(x1),qC?C(qD?D(x0)?(x3))?(x2))qB?x0?
(?B(x1)) = qB?B(b,x0)?(x1)qB?x0?
(?B()) = x0qC?x0?
(?C()) = x0qD?x0?
(?D()) = x0We can use this transducer to compute the derivedtree for the derivation tree ?(?A(?B(?B),?C,?D)).qA??(?
(?A(?B(?B),?C,?D)))= qA?A(e)?
(?A(?B(?B),?C,?D))= A( qB?B(a)?(?B(?B)),qC?C(qD?D(A(e))?(?D))?
(?C))= A(qB?B(b,B(a))?(?B),C(qD?D(A(e))?
(?D)))= A(B(b,B(a)),C(D(A(e))))As a final step, useful later for the bimor-phism characterization of synchronous TAG, it isstraightforward to show that the transducer so con-structed is the composition of a regular tree lan-guage and a linear complete embedded tree homo-morphism.4.2 From Transducer to TAGGiven a linear complete embedded tree transducer,we construct a corresponding TAG as follows: Foreach rule of the formqi?[x0]?
( f (m)(x1, .
.
.
,xm)) = ?we build a tree named ?qi, f ,??.
Where this treeappears is determined solely by the state qi, sowe take the root node of the tree to be the state.Any foot node in the tree will also need to bemarked with the same label, so we pass this infor-mation down as the tree is built inductively.
Thetree is therefore of the form qi /0(d?ei) where theright-hand-side transformation d?ei constructs theremainder of the tree by the inductive walk of ?
,with the subscript noting that the root is labeledqi.d f (t1, .
.
.
, tm)ei = f /0(dt1ei, .
.
.
,dtmei)dq j???
(xk)ei = k q j(d?ei)dx0ei = qi?daei = aNote that at x0, a foot node is generated of theproper label.
(Because the equation is linear, onlyone foot node is generated, and it is labeled ap-propriately by construction.)
Where recursive pro-cessing of the input tree occurs (q j???
(xl)), wegenerate a tree that admits adjunctions at q j. Therole of the diacritic k is merely to specify the per-mutation of operable nodes for interpreting deriva-tion trees; it says that the k-th child in a derivationtree rooted in the current elementary tree is takento specify adjunctions at this node.The trees generated by this TAG are intendedto correspond to the outputs of the correspondingtree transducer.
Because of the more severe con-straints on TAG, in particular that all combinato-rial limitations on putting subtrees together mustbe manifest in the labels in the trees themselves,the outputs actually contain more structure thanthe corresponding transducer output.
In particu-lar, the state-labeled nodes are merely for book-keeping.
A homomorphism removing these nodesgives the desired transducer output.
Most impor-tantly, then, the weak generative capacity of TAGsand LCETTs are identical.383Some examples may clarify the construction.Recall the reversal embedded transducer in (1)above.
The construction above generates a TAGcontaining the following trees.
We have giventhem indicative names rather than the cumbersomeones of the form ?qi, f ,??.?
: r /0(1 : r?
(nil))?nil : r?
/0(r??
)?1 : r?
/0(1 : r?
(1 /0(r??
)))?2 : r?
/0(1 : r?
(2 /0(r??
)))It is simple to verify that the derivation tree?
(?1(?2(?2(?nil))))derives the treer(r?6(2(r?(2(r?(1(r?
(nil))))))))Simple homomorphisms that extract the inputfunction symbols on the input and drop the book-keeping states on the output reduce these trees to1(2(2(nil))) and 2(2(1(nil))) respectively, just asfor the corresponding tree transducer.5 Synchronous TAGs as BimorphismsThe major advantage of characterizing TAGderivation in terms of tree transducers (via thecompilation (2)) is the integration of synchronousTAGs into the bimorphism framework.
A syn-chronous TAG (Shieber, 1994) is composed of aset of triples ?tL, tR,_?
where the two trees tL andtR are elementary trees and _ is a set of links spec-ifying pairs of linked operable nodes from tL andtR.
Without loss of generality, we can stipulate thateach operable node in each tree is impinged uponby exactly one link in _.
(If a node is unlinked,the triple can never be used; if overlinked, a setof replacement triples can be ?multiplied out?.)
Inthis case, a projection of the triples on first or sec-ond component, with a permutation defined by thecorresponding projections on the links, is exactly aTAG as defined above.
Thus, derivations proceedjust as in a single TAG except that nodes linked bysome link in _ are simultaneously operated on bypaired trees derived by the grammar.In order to model a synchronous grammar for-malism as a bimorphism, the well-formed deriva-tions of the synchronous formalism must be char-acterizable as a regular tree language and the rela-tion between such derivation trees and each of thepaired derived trees as a homomorphism of somesort.
For synchronous tree-substitution grammars,derivation trees are regular tree languages, and themap from derivation to each of the paired derivedtrees is a linear complete tree homomorphism.Thus, synchronous tree-substitution grammars fallin the class of bimorphisms B(LC,LC).
The otherdirection can be shown as well; all bimorphismsin B(LC,LC) define tree relations expressible byan STSG.A similar result follows immediately for STAG.Crucially relying on the result above that thederivation relation is a DLCETT, we can usethe method of Shieber (2004) directly to char-acterize the synchronous TAG tree relations asjust B(ELC,ELC).
We have thus integrated syn-chronous TAG with the other transducer and syn-chronous grammar formalisms falling under thebimorphism umbrella.AcknowledgementsWe wish to thank Mark Dras, Uwe Mo?nnich, Re-becca Nesson, James Rogers, and Ken Shan forhelpful discussions on the topic of this paper.
Thiswork was supported in part by grant IIS-0329089from the National Science Foundation.ReferencesH.
Comon, M. Dauchet, R. Gilleron, F. Jacquemard,D.
Lugiez, S. Tison, and M. Tommasi.
1997.Tree automata techniques and applications.
Avail-able at: http://www.grappa.univ-lille3.fr/tata.
Release of October 1, 2002.A.
Fujiyoshi and T. Kasai.
2000.
Spinal-formedcontext-free tree grammars.
Theory of ComputingSystems, 33:59?83.Aravind Joshi and Yves Schabes.
1997.
Tree-adjoining grammars.
In G. Rozenberg and A. Salo-maa, editors, Handbook of Formal Languages, vol-ume 3, pages 69?124.
Springer, Berlin.Yves Schabes and K. Vijay-Shanker.
1990.
Determin-istic left to right parsing of tree adjoining languages.In Proceedings of the 28th Annual Meeting of the As-sociation for Computational Linguistics, pages 276?283, Pittsburgh, Pennsylvania, 6?9 June.Stuart M. Shieber.
1994.
Restricting the weak-generative capacity of synchronous tree-adjoininggrammars.
Computational Intelligence, 10(4):371?385, November.
Also available as cmp-lg/9404003.Stuart M. Shieber.
2004.
Synchronous grammarsas tree transducers.
In Proceedings of the SeventhInternational Workshop on Tree Adjoining Gram-mar and Related Formalisms (TAG+7), pages 88?95, Vancouver, Canada, May 20-22.384
