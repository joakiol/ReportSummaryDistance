CHINESE STRING SEARCHING USING TtIE KMP ALGORITHMRobert W.P.
LukDepartment of Computing, Hong Kong Polytechnic University, Kowloon, Hong KongE-mail: csrluk@comp.polyu.edu.hkAbstractThis paper is about the modification of KMP(Knuth, Morris and Pratt) algorithm for stringsearching of Chinese text.
The difficulty is searchingthrough a text string of single- and multi-bytecharacters.
We showed that proper decoding of theinput as sequences of characters instead of bytes isnecessary.
The standard KMP algorithm can easily bemodified for Chinese string searching but at theworst-case time-complexity of O(3n) in terms of thenumber of comparisons.
The finite-automatonimplementation can achieve worst-case timecomplexity of O(2n) but constructing the transitiontable depends on the size of the alphabet, Z, which islarge for Chinese (for Big-5, Z > 13,000).
A mappingtechnique reduces the size the alphabet to at most IPIwhere P is the pattern string.1.
IntroductionThe alphabet size of Chinese (to be more preciseHanyu) is relatively large (e.g.
about 55,000 in HanyuDa Cidian) compared with Indo-European languages.Various internal codes (e.g.
GB, Big5, and Unicode)have been designed to represent a selected subset(5000-16,000) which requires two or more bytes torepresent.
For compatability with existing single-bytetext, the most significant bit of the first byte is used todistinguish between multi-byte characters and single-byte characters.
For instance, Web browsers (e.g.N etscape) cannot interpret the annotations representedby their equivalent 2-byte characters.
Thus, Chinesestring searching algorithms have to deal with amixture of single- and multi-byte characters.This paper will focus in 2-byte characters becausetheir internal codes are widely used.
Two modifiedversions of the KMP algorithms are presented: theclassical one and the finite-automaton implemenation.Finally, we discuss the practical situations in Chinesestring searching.2.
The ProblemDirectly using existing fast string searchingalgorithms (Knuth et al,1977; Boyer andMoore,1977) for on-line Chinese text can lead toerrors in identification as in using the find option ofNetscape in Chinese window.
For example, the patternstring, P=~ (i.e.
AA,AA in hexidecimal) cansuccessfully match with the second and third bytes ofthe text string, T:??
'7/ (i.e.
A4,AA,AA,43 inhexidecimal) which is incorrect.
The error occurswhere the second byte of the character in 7' isinterpreted as the first-byte of the pattern character.Thus, it is necessary to decode the input data ascharacters.Two well-known string searching algorithms werediscovered by Knuth, Morris and Pratt (1977) (KMP),and Boyer and Moore (1977) (BM).
The KMPalgorithm has better worst-case time complexitywhere as the BM algorithm has better average-casetime complexity.
Recently, there has been someinterest in improving (Hume arid Sunday, 1991;Crochemore et al, 1994) the time complexity orproving a smaller bound (Cole, 1994) of the time-complexity of the BM algorithm, as well as in theefficient construction (Baeza-Yates et al, 1994) of theBM algorithm.
These algorithms derived from BMassumes that knowing the positional index, i, of thetext string, 7, can access and interpret the data, T\[i\], asa character.
However, with a text string of single- andmulti-byte characters, i can point to the first-byte orthe second-byte of a 2-byte character which thecomputer cannot determine in the middle of the textstring.
It has to scan left or right until a one-bytecharacter, the beginning of the text string or the end ofthe text string is encountered.
For example, the BMalgorithm moves to position i : 4 (= lIPID formatching in Table 1.
At this position, T\[4\] (= A4) doesnot match with P\[4\].
Since the computer cannotdetermine whether T\[4\] is the first or second byte ofthe 2-byte character, it cannot use the delta tables todetermine the next matching states.
Even worst, forsome internal code (e.g.
Big-5), it is not possible todirectly convert the byte sequc~ce into thecorresponding character sequence in the backwarddirection.
Thus, as a first step, we focus on modifyingthe KMP for Chinese string searching.i I 12 3 14 5 \ [6  7 \ [8Til A4 A3 A4 A0 A4 \]A7 A4 I I)FP < ~ >P\[i 1 3C A4 I A4 3E'Fable I: Matching between the text string, T:L~?~aH?~f3and the pattern string, p=<na>.
Here, 7'\[\] and P\[\[ showsthe hexidecimal value of each byte in T and P.3.
Knuth-Morris-Pratt Algorithm.3.1 SearchingFigure 1 is the listing of the modified version ofKMP algorithm (Knuth et aL, 1977) for searchingl l l lChinese string.
Here, i is the positional index of thetext string but the position is specified in terms ofbytes.
By comparison, j is the positional index of thepattern string, P, and the position is in terms ofcharacters.
Characters in P are stored in two arraysPI\[\]  and P2\[\].
Here, PI\[\]  stores the first-byte andP2\[\] stores the second byte of two-byte characters inP.
If there are single-byte characters in P, they arestored in Pl\[\]  and the data in corresponding positionsof P2\[\] are undefined.
Here, we assumed that a NULLcharacter is patched at those positions.
For example, ifP=<c~?<~?
?i>, then the values in PI\[\]  and P2\[\] areshown in Table 2.1 ,function Chinese_KMP{ int i=l; j=l ;while CO" <= IPO ~ 0 <= li7\]0) {(lone-byte-character(Till)/* decode single- or 2-byte characters */7 { while (0"!
:0) && (T\[i\]/=PI\[j\]))/* 1-byte character matching */8 j = next\[j\]; /*failure link */9 i++; /* update iposition */1o }11 else { while ((j!=O) && ((F\[iI!=PI\[j\]) II(l'\[i+ l\]!=P2li\]))) /* matching */12 j = next\[j\]; /*failure link */13 i+ = 2; /* update i position */14 }15 j += 1; /* update j position */16 } /* while-loop ends */17 if (J > IPD then returnO-IIPll);/* compute matehed position */18 else return(O); /* no matchedposition */19 }Figure 1: A modified version of KMP for Chinese stringsearching.
The function, one-byte-character, determinewhether the current input is a single or 2-byte character, bytesting whether the converted integer value of T\[i\] ispositive or negative.
If the converted value is negative, then7".//.\] is the first-byte of a 2-byte character.
Here, J T I and l J 7\]\]are the length of the text string, 7; in terms of characters andbytes, respectively.The program in Figure 1 determines (in line 6)whether the current input character is a single- ortwo-byte character.
If it is a single-byte character, thestandard KMP algorithm operates for that single-bytecharacter, T\[i\], in line 7 to 10.
Otherwise, i is pointingat a two-byte character.
This implies that: (a) matching2-byte characters is carried out where the data inT\[i+ 1\] is the second byte of the character (line 11);and (b) i is incremented by 2 instead of 1, because it iscounting in terms of bytes (line 12).
Sincej is countingin terms of characters, the increment o f j  One 15) isone whether the characters in P are single or two bytes.When the pattern string is found in T, the position ofthe first matched character in T is returned.
Since theposition is in terms of bytes, it is the last matchedposition, i, minus the length of P in terms of bytes (i.e.IIPII).Character < ~?
< ~?
?i >P\[Jlj 1 2 3 4 5 6PI\[j\] 3C A4 3(2 \]' A4 A5 3EP2\[jJ N1JLL A3"  NULL t- A3 69 NUI,L.
.
.
.
.
.f (P \[J l) < a < a b >next\[j\] 0 1 0 1 3 O 'Table 2: The values of the patterns indexed byj.
llere, P\[\] isa conceptual rray which can hold both single- and 2-bytecharacters.
This array is implemented as two arrays: PI\[\]and P2\[\] which stores the first and second byte of the 2-bytecharacters, respectively.
The function, f(), maps two bytecharacters into single-byte characters, simplifying thegeneration of values in the array, next\[\], and the failure linksin fl\[\].3.2 Generating nextllThe array, next\[\], contains the failure link valueswhich can be generated by existing algorithms(Standish, 1980) for single-byte characters.
The basicidea is to map the 2-byte characters !
:~ ~ to single-bytecharacters and then use existing algorithms.
Themapping is implemented as an array, f\[\].
Eachcharacter in P is scanned from left-ro-right.
Wheneveran unseen character is found, it is assigned a charactervalue that is the negative of the amount of different2-byte characters een so far.
For example, the thirdunseen 2-byte character is mapped to a one-bytecharacter, the value of which is (char) -3.The mapping scheme is practical.
First, the numberof different characters that can be represened with anegative value is 127 and usually IP\] < 128 characters.Second, the time-complexity ofmapping, O(\] IP\[ D, canbe done in linear time with respect to IPj and inconstant ime with respect o 17\].
This is importantbecause it is added to the total time-complexity ofsearching.
To achieve O(1 tPI D, the function, found(),uses an array, f\[\], of size 1El (where I2 is the alphabet)to store the equivalent single-byte characters.
Aperfect hash function (section 4), hO, converts the 2-byte characters into an index off\[\].
After searching, itis necessary to clear\]'\[\].
This can be (tone in O(\]IPLDby assigning NULL characters to the locations in f\[\]corresponding to 2-byte characters in P.4.
Finite automaton implementation.Since \[I 711 is large, reducing its multiplicative factorin the time complexity would be mtractive.
In Knuth etal., (1977), this was done using a finite automatonwhich searches in O(\]IT\]D instead of 0(21171L).Standish (1980) provided an accessible algorithm tobuild the automaton, M. First, failure link values arecomputed (similar to computing values in next\[.\]) as inAlgorithm 7.4 (Standish, 1980) and then the statetransitions are added as in Algorithm 7.5 (Standish1980).
A direct approach is to compute the conceptualautomaton, Me, which regards the 2-byte characters as1112one-byte and then convert the automaton for multi-byte processing.
Since the space-time complexity inconstructing the automaton depends on the size of thealphabet (i.e.
o(\]ElxlQcD where Qc is the set of statesof  Me) which is large, this approach is not attractive.For instance, if IQcl - /0  and I~1 ~ I0,000, then about100,000 milts of storage (integers) are needed!
I,'urtherprocessing is needed to convert he automaton for 2-byte processing!4.1 Automaton lmplemeutation.Another approach uses the different characters in Pas the reduced alphabet, Er, which is much smallerthan 121.
We use a mapping function as discussed insection 3.2 to build a mapping of 2-byte characters toone-byte.
These one-byte characters and the standardone-byte characters (e.g.
ASC\[1) fbrm Er.
The NULl,character, Z, represents all the characters in )..; but notin Zr = {X} ( = Z * 02r ~ {)@').
Given that the multi-byte string, P, is translbrmed into a single-byte string,l", existing algorithms can be used to construct heautomaton.For each pattern string, 1', string searching willexecute the tbllowing steps:(a) convert 2-byte characters to one-byte in P to lbrmt" (i.e.
lbrm ?r) using mapping as in section 3.2;(b)compute the failure link values of 1" using /Algorithm 7.4 in (Standish, 1980);(c) compute the success transitions and store them in80 as in (Standish, 1980);(d)compute the failure transitions using the failurelink values using Algorithm 7.5 in (Standish, 1980)and store the transitions in 80;(e) use the atttomaton, M, with state transition fimction80, to search for t"  in T;(1) output he matched position, if any;(g) clear that mapping lhnction that forms Zr using P.4.2 Constructing the automaton.For step (c) and (d), the operation of Algorithm 7.5was illustrated with an example of  a binary alphabet in(Standish, 1980).
Here, we illustrate the use of a largeralphabet, Zr, and ?
e Er.
Suppose the pattern string, 1',is as shown in Table 2 which also contains thecorresponding P' and failure link values, fl\[\].
Thesuccess transitions are added to 80 as 80'-I, P'\[j\]+- j(e.g.
8(0,<)4- l and 8(I,a)<-- 2).
The failure transitionsare computed from 0 to I/"1 becausefl\[j\] <j.
For stateO, 8(0,00+- 0 ifo~ ~ P'\[1\] andcz c Er (i.e.
8(O,a) 4-- O,8(0,b)4- O, 6(0,>)4- O, 8(O,X) 4- 0 but 8(0,o 0 ~- I).For other states, 8(j, c04- 8(fl\[/\],c 0 ifc~ ?
P'\[j\] and ?xZr (e.g.
8(1,a)4- 807\[lJ, a)-8(O,a)=O and 8(I,<)4-8(fl\[1\],<)~8(0,<)=1).
Effectively, the states in8(/l\[/\],.)
are copied across to the corresponding entriesin 8(j,.)
except for the successfid transition from j.Figure 2 illustrates how a:ro~ of entries in 6(/l\[/\],.)
arccopied across to compute 80,.
).I iZ3456Figurea0_2040/b X00??
t 5 0 .fl\[1\] j Kay:0 " ~ copy state trarlsiliolTs from0 one location to the othero ' \  failure link points backJ ~ to previous state transitions1 / for copying22: An illustration of  c?mstructing the lhiluretransitions ofM.
I lere,j :: 4 and the failure link oi)' (i.e.Jl\[4/:- 2) is used to determine which of the previous row of thestate transition ruble, 60, is used for updating the values ofthe current row in 80.
The underlined entries are the successtransistions.Figure 3 shows the program that computes the statetransitions using the faihtre links.
The programcomputes for state 0, the last states and the other statesseparately.
The last state is distinguished because ithas no success transitions where as the other has one\['or each state.
The program for generating failure linksis not given because:(1) it is similar to computing next\[\];(2) a version is available (Algorithm 7.4 in Standish,1980) which does not need any modification.I void buildtransitions 023{4 int i=O, j=O, k=O;56 .)rot.
(i=-\[)\]2\[;i<=\]~.l\[;i F ~) /* build lransistions at\] = 0 */7 if((chaO i =-Pll\]) 60,i)=1;8 else ~(0,0=0;9 jb r ( j= l j  < \]l'l;j+ 19 \[ /* build other transitions which hassuccess (ranistions */to k =fibl;I t  ./o; (i=-IE2l;i<=lZll; i+-t)12 if((cha,') i = =  l'iJ'+l\]) 8(j,i)~j+l, '13 else ~(j,i)-= 8(k,O; }14 k :Cfl\[\]l'\[\];/* fldlure U'ansitions fo r j  - \[PI */15 ./'or O=-\]Z2\[,'i<=\[Ell;i+-I) /* there is no successtransi(ion in (his case */16 8(j,i) = 8(k,i);17)Figure 3: I~uilding the state mmsit ions given ttmt the thiha'elinks are known.
Note that the algorithm assumed that Zr :ZIuE2 where ZI and Z2 arc the one-byte (e.g.
ASCII)clmracter alphabet and the transtbrmed l-byte characteralphabet representing the different wo-byte characters in P,respectively.
Futhermore, since \[Y,2\[ < 128 and Z2 c Z. Amultiplicative fimtor of the space-tim,," complexity can bereduced if mapping is also carried out for single-byte as wellas 2-byte characters in 1'.
The correctness of the aboveprogram can be shown by mapping all the characters not in:'2r to E because they have idenitical state mmsition wdues(i.e.
dividing the alphabet into equivalent classes of identicaltransition vahms).4.3 Searching.1113Searching is implemented as state transitions of M(Figure 4).
Initially, the state of the automaton, M, isset to 0.
The next state is determined by the currentcharacter read from the text string, T, at position i andthe current state.
If the current state is equal to IP'I,then P is in Tat position i - \[\[Pl\].1 intFAKMP 02{3 int i=l; state=O;4 while ((state/= IPO && (i <= IITID) {5 ifone-byte-character(7\[i\]) /* decoding front-end */6 input character = (inO Till;7 else { input_character =found(T\[i\], T\[i+l\]);8 i++}; /* update for 2-byte character */9 state = 8(state, inputcharacter);10 i++;11 }12 if(state == IPD return (i- IlPlL~,13 else return(O);14 }Figure 4: String searching of multi-byte characters u ing thefinite automaton.5.
Practical considerations.The KMP algorithm (Knuth et al, 1977) wasconsidered to perform better when the pattern stringhas recurrence patterns.
Otherwise, it is about he sameas the brate-force implementation with quadratictime-complexity.
For Chinese string searching, it isnot uncommon to search for reduplicating words (e.g.~3"'S~.3 and ?O?
(31AOIAO) (Chen et al, 1992) which hasrecurrence patterns.
Such repetition to form words isused in making emphasis as well as an essential part ofyes-no questions.
Otherwise, recurrence patterns in Poccur only incidentally (e.g.
nn~j~n~WA~3Aq"ttranslated as the Department of Chinese, ChineseUniversity of Hong Kong).Apart from recurrence, if there are a lot of backingup operations, the KMP algorithm would performbetter than the brute-force implementation.
Such casesoccur where a proper prefix of the pattern string hashigh occurrence frequency in the text string (e.g.function words).
In Chinese string searching, this willhappen for technical terms that have a high frequencyprefix constituent.
For instance, Chinese law articleshave many terms beginning with the word ~?~ (i.e.China).
A search through the Chinese law text forP :~%~H will require many backing up (orcommitting a false start) in the brute-forceimplementation when words or phrases like ~D%"k<ffS,c~%"?>)fi~g, cm?OkDAv and c~c~%',D~k are encountered.Sometimes, patterns which are words can matchwith text where the matched string of the text is notfunctioning as a word.
For example, nj.\[ (which meansconference) can be regarded as a word but in thephrase, 2"~j.l?
}~@?i.s"?~Abe, the first character(underlined) of the matched string (in italics) is part ofa name and the second character (in italics) function asa verb, Thus, Chinese text is often pre-segmented andstring searching has to patch delimiters to thebeginning and end of the pattern, P. However, thesearching accuracy depends on the segmentationalgorithm which is usually implemented as adictionary look-up procedure.
If a dictionary has poorcoverage, the text tends to be over-segmented (Luk,1994) and the recall performance of searching willdrop drastically.
Such cases occur if a generaldictionary isused in segmenting technical articles (e.g.in law, medicine, computing, etc).REFERENCESBAEZA-YATES, R.A., C. CIIOFFROT, ?9.
G.H.
GONNET (1994)"On Boyer-Moore automata", Algorithmica, 21, pp.
268-292.BOYER, R. & S. MOORE (1977) "A fast string searchingalgorithm", Communications ofACM, 20, pp.
72-772.CItF, N, F-Y., R-P. J. MO, C-R. HUANG, K-J.
CtaEN (1992)"Reduplication i  Mandarin Chinese: their formation rules,syntactic behavior and ICG representation", Proc.
ofR.
O. C.Computational Linguistics Conference V, Taipei, Taiwan,pp.
217-233.COLE, R. (1994) "Tight bounds on the complexity of theBoyer-Moore string matching algorithm", SIAM Journal ofComputing, 23:5, pp.
1075-1091.COLUSSI, L. (1994) "Fastest pattern matching in strings",Journal of Algorithms, 16, pp.
163-189.CROCHEMORE, M. A. CZUMAJ, L. GASIENIEC, S. JAROMINEK,T.
LECROQ, W. PLANDOWSK'{, & W. RYTrER (1994)"Speeding up two string-matching algorithms",AIgorithmica, 12, pp.
247-267.11UME, A.
AND D .M.
SUNDAY (1991) "Fast string searching",Software - Practice and Experience, 21:11, pp.
1221-1248.KNUTH, D.E., J. MORRIS & V. PRATt (1977) "Fast patternmatching in strings", SIAM Journal of Computing, 6, pp.323-350.LUK, R.W.P.
(1994) Chinese word segmentation usingmaximal matching and bigram techniques, Proc.
of R.O.CComputational Linguistic Conference VII, Hsinchu,Taiwan, pp.
273-282.STANDISH, T.A.
(1980) Data Structure Techniques,Addison-Wesley: Reading, Mass.1114
