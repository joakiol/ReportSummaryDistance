LEXICAL SEMANTICS IN HUMAN-COMPUTER COMMUNICAT IONJarrett RosenbergXerox Office Systems Division3333 Coyote Hill RoadPaiD Alto, CA 94304 USAABSTRACTMost linguistic studies of human-computercommunication have focused on the issues of syntax anddiscourse structure.
However, another interesting andimportant area is the lexical semantics of commandlanguages.
The names that users and system designersgive the objects and actions of a computer system cangreatly affect its usability, and the lexical issues involvedare as complicated as those in natural languages.
1"hispaper presents an overview of the various studies of namingin computer systems, examining such issues assuggestiveness, memorability, descriptions of categories.and the use of non.words as names.
A simple featuralframework for the analysis of these phenomena ispresented.0.
IntroductionMost research on the language used in human-computercommunication has focused on issues of syntax and discourse; it ishoped that eke day computers will understand a large subset ofnatural anguage, and the most obvious problems thus appear tobe in parsing and understanding sequences of utterances.
Theconstraints provided by the sublanguages u ed in current naturallanguage interfaces provide a means for making these issuestractable.
Until computers can easily understand thesesublanguages, we must continue to use artificial commandlanguages, although the increasing richness of these languagesbrings them closer and closer to being sublanguages themselves.This fact suggests that we might profitably view the commandlanguages of computer systems as natural anguages, having thesame three levels of syntax, semantics, and pragmatics {perhapsalso morpho-phonemics, if one considers the form in which theinteraction takes place with the system: special keys, variantcharacters, etc.
).A particularly interesting and, till recently, neglected area ofinvestigation is the lexical semantics of command languages.What the objects and actions of a system are called is not onlypractically important but also as theoretically interesting as thelexical phenomena of natural languages.
In the field of naturallanguage interfaces there has been some study of complexreferences, uch as Appelt's (1983) work on planning referringexpressions, and Finin's (1982) work on parsing complex nounphrases, but individual lexical items have not been treated inmuch detail.
In contrast, the human factors research on commandlanguages and user-interface design has looked at lexicalsemantics in great detail, though without much linguisticsophistication.
In addition, much of this research ispsycholinguistic rather than strictly linguistic in character,involving phenomena such as the learning and remembering ofnames as much as their semantic relations.
Nevertheless, alinguistic analysis may shed some light on these psycholinguisticphenomena.
In this paper l will present an overview of the kindsof research that have been done in this area and suggest a simplefeatural framework in which they may be placed.I.
Names for ActionsBy far the greatest amount of research on lexical semantics incommand languages has been done with names for actions.
It iseasy to find instances of commands whose names are cryptic ordangerously misleading (such as Unix's cat for displaying a file,and Tenex's list for printing), or ones which are quiteunmemorable (as are most of those in the EMACS editor).Consequently, there have been a number of studies examining thesuggestiveness of command names, their learnability andmemorability, their compositional structure, and their interactionwith the syntax of the command language.Suggestiveness.
In my own research (Rosenberg, 1982) \[have looked at how the meaning of a command name in ordinaryEnglish may or may not suggest its meaning in a text editor.
Thisprocess of suggestiveness may be viewed as a mapping from thesemantics of the ordinary word to the semantics of the systemaction, in which the user, given the name of command, attempts topredict what it does.
This situation is encountered most oftenwhen first learning a system, and in the use of menus.
A fewsimple experiments showed that if one obtains sets of features forthe names and actions, a straightforward calculation of theirsimilarity can predict people's guesses of what particularcommand names denote.Memorabil ity.
If we look at the converse mapping fromactions to names, i.e., when, given a system action, me attemptsto remember its name, we find a number of studies reportingsimilar results.
Barnard et al (19821 had subjects learn a ~et ofeither specific or general commands, and found that suhject~learning the less distinctive, general names used a help menu ofthe commands and their definitions more el'ten, were lessconfident in recalling the names, and were less able to recall theactions of the commands.
Black and Moran (1982) found thathigh-frequency (and thus more general) words were less well428remembered than low-frequency ones, and so were more"'discriminable" names Iones having a greater similarity to theireorrespondLng actions}.
Seapin {1981l also found that generalnames like select and read were less well recalled than computer-oriented ones like search and display.
Both Black and Moran{ 1982} and Landauer et al ( i9831 found that users varied widely inthe names they preferred to give to system actions, and that user-provided names tended to be more general and thus lessmemorable,Congruence and h ie rarch ica lness .
Carroll (1982) hasdemonstrated two important properties of command namesemantics: congruence and hierarchicalness.
Two names arecongruent if their relations are the same as those of the actionsonto which they are mapped Thus the inverse actions of addingand subtracting text are best named by a pair of inverses uch asinsert and delete.
As might be expected, then, Carroll found thatcongruent names like raise-lower are easier to learn than non-congruent ones like reach-down.Hierarchicalness has to do with the compositionality ofsemantic components and their surface realization.
Systemactions may have common semantic components along withadditional, distinguishing, ones (e.g., moving vs. copying, deletinga character vs. deleting a word}.
The degree of commonality mayrange from none (all actions are mutually disjoint} to total (allactions are vectors in some n-dimensional matrix).
Furthermore,words or phrases naming such hierarchical actions may or maynot have some of their semantic components realized on thesurface: for example, while both advance and move forward mayhave the semantic t'eatures + MOVE and + FORWARD, only thelatter has them realized on the surface.
Thus, in hierarchicalnames the semantic omponents and their relationships are morereadily perceived, thus enhancing their distinctiveness.
Notsurprisingly, Carroll has found that hierarchical names, such asmove forward-move backward, are easier to learn than non-hierarchical synonyms uch as advance-retreat.
Similar resultson the effect of hierarchical structuring are reported by Scapin( 1982}.Names and the command language syntax.
There are twoobvious ways in which the choice of names for commands caninteract with the syntax of the command language.
The firstinvolves selection restrictions associated with the name.
Forexample, one usually deletes objects, but stops processes: thus onewouldn't normally expect a command named delete to take bothfiles and process-identifiers as objects.The second kind of interaction involves the syntactic framesassociated with a word.
For example, the sentence frame forsubstitute {"substitute x for y"} requires that the new informationbe specified before the old, while the frame for replace ("replace ywith x") is just the opposite.
A name whose syntactic frame isinconsistent with the command language syntax will thus causeerrors.
It should be noted that Barnard et al {1981} have shownthat total syntactic onsistency can override this constraint andallow users to avoid confusion, but their results may be due to thefact that the set of two-argument commands they studied alwayshad one argument in common, thus encouraging a consistentplacement.
Landauer et ol.
(1983) found that using the samename for semantically s imilar but syntactically differentcommands created problems.Non-words as names.
Some systems use non-words uch asspecial characters or icons as commands, either partly or entirely.Hemenway (1982) has shown that the issues involved incontructing sets of command icons are much the same as withverbal names.
There are two basic types of non-words: those withsome semantics {e.g., '?'
or pictorial icons} and those with little ornone (e.g., control characters or abstract icons}.
Non-words withsome semantics behave much like words (so, for example, '?'
isusually used as a name for a query command}.
Meaningless non-words must have some surface property such as their shapemapped onto their actions.
For example, an abstract l ine-drawingicon in a graphics program (a "brush") might have its shape serveas an indicator of what kind of line it draws.
Control charactersare often mapped onto names for actions which begin with thesame letter (e.g., CONTROL-F might mean "move the cursorForward one character"}.
Similar considerations hold for the useof non-words to denote objects.2.
Names for ObjectsIn addition to studies of command names, there have been anumber of interesting studies of how users (or system designers}denote objects.
One version of this has been called the "YellowPages problem:" how does a user or a computer describe a givenobject in a given context?Naming objects.
Furnas et al (1983} asked subjects todescribe or name objects in various domains o that other peoplewould be able to identify what they were talking about.
Thesubjects were either to use key words or normal discourse.
It wasfound that the average likelihood of any two people using thesame main content word in describing the same object rangedfrom about 0.07 to 0.18 for the different domains tudied.Carroll 11982) studied how people named their files on an \[BMCMS system (CMS filenames are limited to 18 characters and arethus usually abbreviated).
Subjects gave him a list of their filesalong with a description of their contents, and from this, Carrollinferred what the "unabbreviated" fi lenames were.
He found that85 percent of the fi lenames used simple organizing paradigms, twoof which involved the concepts of congruence and hierarchicalnessdiscussed above.Naming categories.
Dumais and Landauer'11983} describetwo major problems in naming and describing categories incomputer systems.
The first is that of inaccurate category names:a name for a category may not be very descriptive, or people'sinterpretation of it may differ radically.
The second problem isthat of inaccurate classification: categories may be fuzzy oroverlapping, or there may be many different dimensions by whichan object may be classified.
Dumais and Landauer examinedwhether categories which are hard to describe could be betternamed simply by giving example of their members.
They foundthat presenting three examples worked as well as using adescription, or a description plus examples.
In another studyinvolving people's descriptions of objects (Dumais and Landauer,1982} they found that their subjects' descriptions were oftenvague, and rarely used negations.
The most common paradigm for429describing objects was to give a superordinate rm followed byseveral of the item's distinctive features.Deixis.
The pragmatic issue of deixis should be mentioned,since some systems allow context-dependent references in somecontexts such as history mechanisms.
For example, inINTERLISP the variable IT refers to the value of the user's lastevaluated top-level expression, but sometimes this interpretationdoes not map exactly onto the one the user has.
Physical pointingdevices uch as the "mouse" allow deixis as a more natural way ofdenoting objects, actions, and properties in cases where it isdifficult or tedious to indicate the referent by a referringexpression.There are, of course, many other aspects of the lexica\[semantics of command languages which cannot be covered here,such as abbreviations {Benbasat and Wand, 1984}, automaticspelling correction of user inputs (Durham et al, 1983}, andgeneric names (Rosenberg and Moran, 1984}.3.
A Featura l  F rameworkWhile the above results are interesting: they aredisappointing in two respects.
To the designer of computersystems they are disappointing because it is not clear how they arerelated to each other: there are no general principles to use indeciding how to name commands or objects, or what similarities ortradeoffs there are among the different aspects of naming incomputer systems.
To the linguist or psycholinguist they aredisappointing because there is no theory or analytic framework fordescribing what is happening.
In my own work (Rosenberg, 1983}\[ have tried to formulate a simple featural framework in which toplace these disparate results.
My intention has been to develop asimple analysis which can be used in design, rather than alinguistic theory, but linguists will easily recognize its mixedparentage.
At least a framework using semantic features has theadvantage of simplicity, and can be converted into a moresophisticated theory if desired.In such a featural approach the features of a name or actioncan be thought of as properties falling into four major classes:Semantic features are those elemental components ofmeaning usually treated in discussions of lexical semantics.For example, insert has the semantic feature + ADD.Pragmatic features are meaning components which arecontext dependent in some sense, involving phenomenasuch as deixis or presuppositions.
For example, ananaphorie referent like it has some sort of pragmaticfeature, however one wishes to describe it.
\[t goes withoutsaying that the distinction between semantic andpragmatic features is not a clear one, but for practicalpurposes that is not terribly important.Syntactic features are the sorts of selection restrictions, etc.which coordinate the lexical item into larger linguisticunits such as entire commands.
For example, substituterequires that the new object be specified before the old one.t, Surface features are perceptual properties such as sound orshape.
The usefulness of including them in the analyis isseen in the discussion of non-words as names.As Bolinger {1965l pointed out long ago, names and actionshave a potentially infinite number of features, but in therestricted world of command languages we can consider them tohave a finite, even relatively small number.
Furthermore, onlysome features of a name or action are relevant at given time due tothe particular contexts involved: the task context is that of the taskthe user is performing (e.g., text editing vs. database querying);the name context is that of the other names being used; and theaction context is that of the other actions in the system.
Thesethree kinds of context emphasize some features of the names andactions and make others irrelevant.Applying this framework to system naming, we can representsystem actions and objects and their names as sets of features.The most important aspect of these feature representations istheir similarity (or, conversely, their distinctiveness}.
Thisfeatural similarity has been formally defined in work by Tversky{1977, 1979}.Within these two domains of names and actions (or objects},distinctiveness is of primary importance, since it preventsconfusion.
Between the two domains, similarity is of primaryimportance, since it makes for a better mapping between items inthe two domains.
Although the details of this process vary amongthe different phenomena, this paradigm serves to unify a numberof different results.For example, suggestiveness and memorability may both beinterpreted in terms of a high degree of similarity between thefeatures of a name and its referent, with high distinctivenessamong names and referents reducing the possibilities of confusivnon either end.
And the analysis easily extends to include non-words, since those without semantics map their surface featuresonto the semantic features of their referents.The role of syntactic and pragmatic features is analogous, butthe issue there is not simply one of how similar the two sets offeatures are, but also of how, for example, the selectionrestrictions of a name mesh with the rules of the commandlanguage.
Where the analysis will lead in those domains is aquestion I am currently pursuing.4.
Conc lus ionThus it can be seen that, while syntax and discourse structureare important phenomena in human-computer communication.the lexical semantics of command languages is of equalimportance and interest.
The names which users or systemdesigners give to the actions and objects in a command languagecan greatly faciliate or impair a system's u~efulness.Furthermore, similar issues of semontic relations, deixis,ambiguity, etc.
occur with the lexical items of command languagesas in natural anguage.
This suggests both that linguistic theorymay be of practical aid to system designers, and that the complexlexical phenomena of command languages may be of interest olinguists.430ReferencesAppelt, D. 1983.
Planning English referring expressions.Technical Note 312.SRI International.Merilo Park, CA.Barnard, P., N. Hammond, J. Morton, and J.
Long.
1981.Consistency and compatibility inhuman-computerdialogue.
Int.
J. of Man-Machine Studies.
l 5:87-134.Barnard, P., N. Hammond, A. MacLean, andJ.
Morton.
1982Learning and remembering interactivecommands i  atext-editing task.
Behaviour and Information Technology.1:347-358.Benbasat, l.. and Y. Wand.
1984.
Command abbreviationbehavior in human-computer interaction.
Comm.
ACM.27(4): 376-383.Black, J., and T. Moran.
1982 Learning and rememberingcommand names.
Proc.
Conference on Human Factors inComputing Systems.
(Gaithersburg, Maryland).
pp.
8-11.Bolinger D. 1982.
The atomization ofmeaning.
Language.41:555-573.Carroll.
J.
1982.
Learning, using, and designing filenames andcommand paradigms.
BehaviourandlnfbrmationTechnology.
1:327-348.Dumais, S., and T. Landauer.
1982.
Psychological investigationsof natural terminology for.command and query languages.in A. Badre and B. Shneiderman, eds., Directions inHumansComputer Interaction.
Norwood, NJ: Ablex.Dumais, S., and T. Landauer.
1983.
Using examples to describecategories.
Proc.
CIt1"83 Conference on Human Factors inComputing Systems.
(Boston}.
pp.
112-115.Durham, l., D. Lamb, and J. Saxe.
1983.
Spellingcorrection inuser interfaces.
Comm.
ACM.
26(10): 764-773.Finin, 2'.
1982.
The interpretation f nominal compounds indiscourse.
Technical Report MS-CIS-82-03.
University ofPennsylvania Dept.
of Computer and information Science,Philadelphia, PA.Furnas, G., T. Landauer, L.Gomez, and S. Dumais.
1983.Statistical semantics: analysis of the potentialperformance ofkey-word information systems.
BellSystem Technical Journal.
62(6}:1753-1806.Hemenway, K. 1982.
Psychological issues in the use of icons incommand menus.
Proe.
Conference on Human Factors inComputing Systems.
(Gaithersburg, Maryland).
pp.
20-24.Landauer, T., K. Galotti, and S. Hartwell.
1983.
Naturalcommand names and initial learning: astudy of text-editing terms.
Comm.
ACM.
26(7): 495-503.Rosenberg, J.
1982.
Evaluating the suggestiveness of commandnames.
Behaviour and Information Technology.
1:371-400.Rosenberg, J.
1983.
A featural approach to command names.Proc.
CHI'83 Conference on Human Factors in ComputingSystems.
(Boston).
pp.
116-119.Rosenberg, J. and T. Moran.
1984.
Generic ommands.
Proe.First IFIP Conference on Human.Computer Interaction.London, September r984.Scapin, D. 1981.
Computer commands in restricted naturallanguage: some aspects of memory and experience.Human Factors.
23:365-375.Scapin, D. 1982.
Generation effect, structuring and computercommands.
Behaviour and Information Technology.1:401-410.Tversky, A.
1977.
Features ofsimilarity.
Psychological Review.84:327-352.Tversky, A.
1979.
Studies in similarity.
In E. Rosch and B.
Lloyd,eds., Cognition and Categorization.
Hillsdale, NJ:Erlbaum.431
