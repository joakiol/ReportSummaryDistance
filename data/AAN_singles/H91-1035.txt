F ixed and F lexib le Phrase Structure:Coord inat ion  in Tree Ad jo in ing Grammars  1Aravind K. Joshi and Yves SchabesDepartment of Computer and Information ScienceUniversity of PennsylvaniaPhiladelphia, PA 19104Phrase-structure grammars assign a unique phrase struc-ture (constituency) to an unambiguous sentence.
Thus, forexample, John likes apples will be bracketed as follows (ig-noring the phrase labels and ignoring some brackets notessential for our present purpose):(1) (John (likes apples))There are systems, however, for example, CombinatoryCategorial Grammars (CCGs)(Steedman, 1990) which as-sign multiple structures to unambiguous strings.
Thus CCGassigns the following two groupings to John likes apples:(2) (John (likes apples))(3) ((John likes) apples)The work on CCG was presented by Mark Steedman inan earlier DARPA SLS Workshop (Steedman, 1989).In this paper, we show how a CCG-like account for coor-dination can be constructed in the framework of lexicalizedtree-adjoining grammars (TAGs) (Joshi, 1987; Schabes etal., 1988; Schabes, 1990).
2.
In particular, we show how afixed constituency can be maintained at the level of the ele-mentary trees of lexicalized TAGs  and yet be able to achievethe kind of flexibility needed for dealing with the so-callednon-constituents.
This is the key significance of this contri-bution.
In a CCG,  being a constituent is the same as being afunction.
We show that this need not be the case and stan-dard notions of constituency can be maintained.
The keyidea is that we use the lexicalized trees of TAG as structuredcategories with the associated functional types.
Because oflack of space, we will illustrate our ideas by examples only.The justification in CCG for such multiple structuresis their use in coordination and in defining intonationalphrases.
Thus the bracketing (2) is necessary for (4) andthe bracketing (3) for (5).
(4) (John ((likes apples) and (hates pears)))(5) (((John likes) and (Bill hates)) beans)Lexicalized TAGs  (with substitution and adjunction) aresimilar to CCGs  in the sense that for each lexical item theelementary tree(s) which is (are) anchored on that lexicalitem can be regarded as the (structured) category (cate-gories) associated with that item.
Figure 1 and Figure 2give examples of elementary trees that can be found in lexi-con for a Lexicalized TAG.
The associated functional typesare shown below each elementary tree.Also, (2) corresponds to the intonational phrasing if theprevious context is (6) and (3) if the previous context is (7).
(6) Who likes apples?
(John (likes apples))(7) What  does John like?
((John likes) apples)IThis research is partially supported by Darpa grant N0014.85-K0018, ARO grant DAAL03-89-C-0031PRI and NSF grant-IRIS4-10413 A02.We are grateful to Jamie Henderson, Anthony Kroch, Mitch Marcus,Stuart Shieber, Mark Steedman and K. Vijay-Shanker for providingvaluable comments.Furthermore, each tree can be interpreted as a func-tion on the types of arguments it requires.
For example,we say that the category of the verb gave (see Figure 1)is the elementary tree associated with it and not the primi-tive category V; the functional interpretation of its category,NP ?
NP  ?
NP  ~ S, is a function expecting three treesrooted in NP and which returns an S-rooted tree.
By com-bining elementary trees with substitution or adjunction, wecan assign a structured category (the derived tree) and afunctional interpretation to sequences of lexical items evenin the cases when the sequence is discontinuous or when itdoes not define a constituent in the conventional sense.
See2It is known that TAGs are weakly equivalent to CCGs, i.e., theyboth generate the same sets of strings but not strongly because theydo not assign the same structural descriptions195Figure 3 for some examples.The coordination schema (&) combines two lexical stringswith their structured categories and their functional types:(Ix, 0"z, n )  & (12, 0"2, r2) = (1, 0", r),  where: Ix, 12, 1 are lexi-cal strings; 0"z, 0"2, 0" are structured categories (trees); andrz, r2, r are functional types.The lexical strings in Figure 3 are John eats, eats cook-ies, thinks John eats, and gave NP D book.
The first threestrings are contiguous but the fourth string is not contigu-ous, in the sense that it is interrupted by one or more non-terminals, which are the argument positions for the asso-ciated functional type.
We will say that the first threestrings satisfy the Lexical String Contiguity (LSC) condi-tion and the fourth string does not satisfy LSC 3.
Our struc-tured categories are like un-Curried functions.
LSC allowsus to achieve Currying in a certain sense.
Henceforth we willrequire that the structured categories that enter into coor-dination as well as the structured category resulting fromcoordination always satisfy LSC.The coordination (Ix, 0"z, n )  & (12, 0"2, r2) succeeds if:?
the lexical strings lz and 12 both sgtisfy LSC;?
the functional types are identical (rl = r2 = r);?
the least nodes dominating lx in 0"z and 12 in 0"2 havethe same label.The resulting structured category, cr = az & 0"2, is ob-talned by:1. equating the corresponding shared arguments in 0"1and 0"2 (preserving linear precedence of arguments inal and 0"2;)2. coordinating at the least nodes dominating/1 and 12;3. collapsing the supertrees above the nodes at whichcoordination was made;4. selecting the argument positions uch that LSC holdsfor 0.;5. if the anchor of 0"2 is the same as the anchor if az,then the anchor of 0"2 is erased and equated with theanchor of 0.1 (the decision to erase the anchor of 0"2 isbased on the fact that the complements of the anchormust always be in the appropriate direction, on theright for English).Now we will give a series of examples to il lustrate thecoordination schema.
Figure 4 shows how Mary a book andSusan a flower can be coordinated to derive sentences like:3LSC is not a syntact ic  onstraint .
It can be regarded as a phono-logical constraint  in a certain sense.
More details will be provided inan expanded version of this paper  at a late date.
(8) John gave Mary a book and Susan a flowerIn Figure 4, the tree corresponding to gave Mary a bookand Susan a flower has been obtained by:1. equating the NP nodes in o"1 and 0.2;2. coordinating the VP nodes;3. collapsing the supertrees above the VP nodes;4. selecting the left most NP as argument.5.
erasing the anchor (gave) in 0"2 and equating the an-chor node in 0"2 with the V node in 0.1.Similarly, the sentence,(9) John likes and Bill hates bananasis obtained by coordinating John likes and Bill hates (seeFigure 5).Note that John likes and Bill hates have been 'coordi-nated' but John likes and Bill hates have not been groupedtogether (i.e., bracketed as constituents).
The phrase struc-ture of the elementary trees has been preserved.
This isin contrast o the analysis provided by CCG.
CCG groupsJohn likes and Bill hates as constituents and then invokesthe coordination schema X = XandX where X is a con-stituent.
John likes is turned into a constituent in a CCGby 'type-raising' John to a category which essentially en-codes the information that John is in the subject position.In the elementary tree o'1 the structure already encodes theinformation that whatever is substituted for the leftmostNP in 0"1 is in the subject position.Some additional examples follow.
(10) John eats cookies and drinks beer (see Figure 6)(11) John cooked and ate the beans (see Figure 7)Examples in which o'1 and 0"2 invoke more than one ele-mentary tree can also be handled in a similarly fashion.
Wewill only give the examples and not show the trees due tothe lack of space.
(12) John thinks Mary and Bill believes Susan willwin .
(13) John gave Mart/three and Susan \]our recentlypublished novels.So far, we have not said anything about the so-calledgapped sentences, for example196(14) John likes apples and Bill pears.It can be shown that the gapped sentences and othersentences related to gapped sentences have to be obtainedby assuming that the left conjunct (al) is built up to S, i.e.,its functional type is a constant, S. A structured category,a, (where the functional type is a constant S) can be viewedretroactively as corresponding to various functional types,for example, NP x l ikes x NP  ~ S.Note that this functional type cannot be obtained bystaring with er in Figure 2, where the functional type isNP x NP  --~ S.We now take a2 to be of the same functional type as ax, i.e., NP x l ikes x NP  --~ S and instantiate the coordina-tion schema s before.
Note that the lexical anchor of a2 isguaranteed to be the same as the lexical anchor of al be-cause both have the functional type NP x l ikes x NP  --~ S.Hence, the anchor in a2 will be erased following the speci-fication in the coordination schema described earlier 4.
Wewill not discuss all the details of this retroactive approachdue to lack of space.
This approach also handles entenceswhich are closely related to gapping, for example,(15) John likes apples and pears (too)The too is introduced to show that the interpretation isdifferent from the case where apples and pears is obtainedby NP and NP  coordination.
In (15) we have S and Scoordination.In summary, we have shown how constituency and func-tional types can be kept apart and still the kind of flexibilityin the constituent structures that CCG allow can be real-ized by using lexicalized TAG with an associated coordina-tion schema.
In an expanded version of this paper, we willdescribe several details concerning (1) how this approachextends to coordination with cross-serial dependencies (asin Dutch) as well as as to languages with constituent ordersdifferent from English, (2) some processing implications and(3) the computation of the semantic interpretation usingthe machinery of synchronous TAG (Shieber and Schabes,1990).REFERENCESAravlnd K. Joshi.
1987.
An Introduction toTree AdjoiningGrammars.
In A. Manaster-Ramer, ditor, Mathematics ofLanguage.
John Benjarnins, Amsterdam.4This approach is inspired by Steedman's approach to gapping,which depends on type-raising.
Steedman requires an additional stip-ulation to rule out certain unwanted consequences of type-raising.
Itappears that in our approach this problem can be avoided.
Spacedoes not permit us to give all the details.Yves Schabes, Anne Abeill~, and Aravind K. Joshi.
1988.Parsing strategies with 'lexlcalized' grammars: Applica-tion to tree adjoining rammars.
In Proceedings of the12 th International Conference on Computational Linguis-tics (COLING'88), Budapest, Hungary, August.Yves Schabes.
1990.
Mathematical and Computational As-pects of Lexicalized Grammars.
Ph.D. thesis, University ofPennsylvania, Philadelphia, PA, August.
Available as tech-nicM report (MS-CIS-90-48, LINC LAB179) from the De-partment of Computer Science.Shieber, Stuart and Schabes, Yves, 1990.
Synchronous TreeAdjoining Grammars.
In Proceedings of the 13 th Inter-national Conference on Computational Linguistics (COL-ING'90).
Helsinki.Mark Steedrnan.
1989.
Intonation and syntax in spokenLanguage systems.
In DARPA Speech and Natural LanguageWorkshop, Cape Cod, MA, October.Mark Steed_man.
1990.
Gapping as constituent coordina-tion.
Linguistics and Philosophy, 13:207-263, April.NP NPI ID N NI I Ia cookies JohnD NP NPSNP,LV NP$ NP.
l,IgaveNP ?
NP ?
NP --~ SNP N VPA A AD$ N ADJ N* VP* ADVI I Ibook tall quicklyD --~ NP N --g N VP ~ VPS S kAV NP$ V S*I Ieats thinksNP x NP  --~ S NP  x S -~ SFigure 1: Examples of elementary trees with their functionaltype.a:SANP$ VPv NP$IlikesNP x NP  --~ SFigure 2: Structured category for likes197SAs NP$ VPANP VP V NPN V NP$ eats NI I IJohn eats cookiesNP --~ S NP .-9SSN'$ vP sV Sthinks NP VP V NP$ NPI A I A N V NP$ D,L N gaveI I IJohn eats bookNP xNP --~ S NP xNP xD--~SF igure  3: Examples of derived trees with their functional types.Or1: S VP ?r2: S ~Y: ~~'?A '~~d V Pvo NP NP V0 NP NP V0 .
.~  NP_y NP NPI I A I I A I , / \  I Agave N D N gave N D N gave N D N N D NI I I I I I I I l I I IMary a book Susan a flower Mary a book Susan a flower11: gave Mary a book 12: gave Susan a flower h gave Mary a book and Susan a flowerxI: NP ---~ S x2: NP --~ S ~:: NP --~ SF igure  4: Coordination of Mary a book and Susan a flower.S SS S and SNP VP NP VP NP VP NP VPN NI IJohn likes Bill hates John likes Bill hates11: John likes 12: Bill hatesxI: NP -9S  ~2: NP  --~ Sl: John likes and Bill hatesx: NP --g SF igure  5: Coordination of John likes and Bill hates.198at: 02:S VP SV NP V NPI I I Icats N drinks NI Icookies beer11: eats cookies 12: drinks beerx l :  NP --e S x2: NP -+ SSNP, I. vpVP and VPV NP  V NPI I I Icats N drinks NI Icookies beerh eats cookies and drinks beerx: NP ---~ SFigure 6: Coordination of e=ts cookies and drinks beer in (10).~ I : ~2: ~:S S $VP NP$ VPV NP$cooked ate V and Vl Icooked ate11: cooked 12: ate h cooked and atexl  : NP  x NP --~ S x2: NP  ?
NP -o S x: NP ?
NP -o SFigure 7: Coordination of cooked and ate in (11).199
