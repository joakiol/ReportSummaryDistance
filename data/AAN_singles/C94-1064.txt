PARSING AS TREE TRAVERSALDale Gerdemann*Seminar ffir Sprachwissenschaft, Universiti t T bingen tABSTRACTThis paper presents a unified approachto parsing, in which top-down, bottom-up and left-corner parsers m:e relatedto preorder, postorder and inorder treetraversals.
It is shown that the sim-plest bottom-up and left-corner parsersare left recursive and must be con-verted using an extended Greibach nor-mal form.
With further partial exe-cution, the bottom-up and left-cornerparsers collapse togethe~ as in the I\]IJPparser of Matsumoto.1 INTRODUCTIONIn this paper, I present a unified ap-proach to parsing, in which top-down,bottom-up and left-corner parsers arerelated to preorder, postorder and in-order tree traversals.
To some extent,this connection is already clear sincefor each parsing strategy the nodes ofthe parse tree are constructed accord-ing to the corresponding tree traversal.It is somewhat rickier though, to ac-tually use a tree traversa.l program asa parser since the resulting pa.rser maybe left recursive.
This left recursion can*The research presented in this paper waspartially sponsored by Teilprojekt Bd "Con-straints on Grammar for Efficient Generation"of the Sonderforschungsbereich 340 of theDeutsche Forschungsgemeinschaft.
I wouhlalso like to thank Guido Minnen and DieterMartini for helpflfl comments.
All mistakesare of course my own.?KI.
Wilhelmstr.
113, D-72074 T(ibingen,Germany, dg@sfs.nphil.uni-tuebingen.de.be eliminated, however, by employing aversion of Greibach Normal Form whichis extended to handle argument instan-tiations in definite clause grammars.The resulting parsers resemble thestandard Prolog versions of versions ofsuch parsers.
One can then go one stepfurther and partially execute the parserwith respect o a particular grammar---as is normally done with definite clausegra,,nn~a,'s (Per(,ir~ ~ Warren \[JO\]).
asurprising result of this partial execu-tion is l.ha.t the bottom-up and left-corner parsers become identical whenthey are 1)oth partially executed.
Thismay explain why the BUP parser of~/lil.tSllll\]OtO eta \ ] .
\[6\] \[71 was ,'eferre.d tOas a bottona-u I) parser even though itclearly follows a left-corner strategy.TREE TRAVERSALPRO G RAM SFollowing O'Keefe \[8\], we can imple-ment i)reorder, postorder and inordertree tra.versals as I)CCs, which will then1)e converted directly into top-down\])otl.om-u 1) and heft-corner l)arsers, re-spectively.
The general schema is:x ._o r d e r('\]'t'ee) --*(x_ordered node labels in Tree).Note tha.t in this case, since we aremost likely to call x_order with theTree va.riable instantiated, we are us-ing the DCG in generation mode rathertha.n as a parser.
When used as a parser396on the str inglS , the procedure will re-turn all trees whose x_order  traw~rsalproduces S. The three, instantiat ions ofthis procedure are as \['ollows:Z preorder traversalpre(empty) --> \[\].pre(node(Mother,Left,Right)) -->\[Mother\],pre(Left),pre(Right).postorder traversalpost(empty) --> \[\].post(node(Mother,Left,Right)) -->post(Left),post(Right),\[Mother\].inorder traversalin(empty) --> \[\].in(node(Mother,Left,Right)) -->in(Left),\[Mother\],in(Right).2.1 D IRECT ENCODING OFPARSING STRATEGIESAnalogous to these three tl'aversal pro-grams, there are three parsing strage-gies, which differ from the tree traversalprograms in only two respects.
First,the base case for a parser should be toparse a lexical i tem rathe,: than to parsean empty  string.
And second, in the re-cursive clauses, the mother  care.gory fitsinto the parse tree and is licensed by theauxil iary predicate ru le /3  but it doesnot figure into the string that is parsed.As was the case for the three treetraversal programs,  the three parsersdiffer from each other only with respectto the right hand side order.
\])'or sim-plicity, I assume that  phrase structurerules are binary branching, though theapproach can easily be generalized tonon-bi uary branching.
1% top-down parsertd(node(PreTerm,lf(Word))) -->\[Word\],{word(PreTerm,Word)}.td(node(Mother,Left,Right)) -->{rule(Mother,Left,Right)},gd(Left),td(Right).bottom-up parserbu(node(PreTerm,lf(Word))) -->\[Word\],{word(PreTerm,Word)}.bu(node(Mother,Left,Right)) -->bu(Left),bu(Right),{rule(Mother,Left,Right)}.Y, left-corner parseric(node(PreTerm,lf (Word))) -->\[Word\] ,{word (Pr eTerm, Word) }.ic (node (Mother, Left ,Right) ) -->ic(Lef%),{rule (Mother, Left, Right) },ic (Right).iks seen here the on\]y difference be-tween the t\]lree strategies concerns |,he.choice of when to select a phrase struc-ture  rule.
2 Do you start  with a. rule andthen try to satisfy it as iu the top-downapl~roa.ch , or do you parse the (laugh-t(ers of a. rule.
first before selecting therule as in the bot tom-up approach,  ordo you l,al(e an inte, 'mediate strategy asin the left-corner al)l)roach.lq'he only ln'oblematic ease is for left cornersince the corresponding tre.e traw~'rsal inorderis normally defined only for bina,'y trees.
Butinorder is easily extended to non-binary treesas follows: i. visit the left daughter in inorder,ii.
visit the mot, her, iii.
visit the rest; of the.daughters in inorder.eAs opposed to, say, ~t choice of whether touse operations of expanding and matching oroperations of shifting and reducing.397GREIBACH NORMALFORM PARSERSWhile this approach reflects the logicof the top-down, bot tom-up  and left-corner parsers in a clear way, the result-ing programs are not all usable in Pro-log since the bot tom-up  and the left-corner parsers are left-recursive.
Thereexists, however, a general technique forremoval of left-recursion, namely, con-version to Oreibach normal  form.
Thestandard Oreibach normal  form conver-sion, however, does not allow for I )CGtype rules, but we can easily take careof the Prolog arguments  by a techniquesuggested by Prob lem 3.118 of Pereira& Shieber \[9\] to produce what I willcall Extended Greibach Normal Form(ECINF).
3 Pereira & Shieber's idea hasbeen more formal ly presented in theGeneralized Greibaeh Normal Form ofDymetman (\[1\] \[2\]), however, the sim-plicity of the parsers here does not jus-tify the extra  compl icat ion in Dymet-man's  procedure.
Using this transfor-mat ion,  the bot tom-up  parser then be-comes as follows: 4aEGNF is similar to normal GNF exceptthat the arguments attached to non-terminalsmust be manipulated so that the original in-stantiations are preserved.
For specific gram-mars, it is pretty e~y to see that such a ma-nipulation is possiMe.
It is nmch more dif-tlcult (and beyond the scope of this paper)to show that there is a general rule tbr suchmanipulations.4The Greibach NF conversion introducesone auxiliary predicate, which (followingIIopcroft & Ulhnan \[4\]) I have called b. Ofcourse, the GNF conversion also does not tellus what to do with the auxiliary procedures incurly brackets.
What I've done here is silnplyto put these auxiliary procedures in the trans-formed grammar in positions corresponding towhere they occurred in the original grammar.It's not clear that one can always find such a"corresponding" position, though in the caseof the bottom-up and left-corner parsers ucha position is easy to identify.% EGNF bottom-upbu(node(PreTerm,lf(Word))) -->\[Word\],{word(PreTerm,Word)}.bu(Node) -->\[Word\],{word(PreTerm,Word)}.b(node(PreTerm,lf(Word)),Node).b(L,node(Mother,L,R)) - ->bu(R) ,{ ru le (gother ,L ,R)} .b (L ,Node)  - ->bu(R) ,{rule(Mother,L,g)},b(node(Mother,L,R),Node).This, however is not very ef\[icientsince the two clauses of both bu andb differ only in whether or not thereis a final call to b.
~Ve can reducel.he a.mount of backtracking by encod-ing this optiolmlity in the b procedureitself.% Improved EGNF bottom-upbu(Node) -->\[Word\],{word(PreTerm,Word)},b(node(PreTerm,lf(Word)),Node).b(Node,Node) --> \[\].b(L,Node) -->bu(R),{rule(Mother,L,R)},b(node(Mother,L,R),Node).l~y tile same I",GNI: transform~Ltionand improvement, s, tile resulting left-corner parser is only minimal ly  differentfrom the bot tom-up  parser:Improved EGNF Left-cornerIc(Node) -->\[Word\],{word(PreTerm,Word)},b(node(PreTerm,lf(Word)),Node).398b(Node,Node) --> \[ \] .b(L,Node) -->{rule(Mother,L,g)},Xc(R),b(node(Hother,L,R),Node).4 PART IAL  EXECUTIONThe improved ECNF bottom-np altdleft-corner parsers (lilIhr now only in theposition of the auxiliary l)redicate incurly brackets.
If this auxiliary pred-icate is partially executed out with re-spect to a particular gramlnar, the twopltrsers will become identical.
For ex-ample, if we have a rule of the \['orl)l:s( t ree(s ,NP,VP))  -->np(RP),vp(VP).For either parser, this will result inone b clause of the form:b(np(NP),Node) -->lc (vp(VP) ) ,b (node(s ( t ree(s ,NP,VP) ) ,np(RP),vp(VP)),Node).This is essentially eqtfivalent o thekind of rules produced by Matsumotoet al (\[6\] \ [7 \ ] ) in  their "bottom-up"l)arser BUI).
s As seen here, Mal, sumo(.oet alwere not wrong to call their parserbottom-ui) , but they could have just aswell called it left-corner.5 CONCLUSIONIn most standard presentations, impletop-down, bottom-up and h'.ft-corneraThis rule is not precis('.ly the same as (.herules used in BUP since Matsumoto et al con>pile their rules a lltth!
further to take adv~tll-tage of the first argument and predicate nameindexing used in Prolog.parsers are described in terms of pairsc)f op(wations such a.s expand/ma(,c\]l,shift/reduce or sprout/nlatch, l{tlt itis enl, irely unclear wha.
(, expa.nding andmatching has to do with shifting, re-ducing or sprouting.
By relating pars-ing (.o tree tri~versal, however, it b(:-comes much clearer how these three ap-proac\]ms 1,o parsing rcbd;e to each other.This is a natural comparison, sinceclearly t, he l)OSSiloh: orders in which atree can be traversed should not d i ff(H' frolll the possible orders in which aparse I, ree can be constructed.
~Vhltt'snew in this paper, however, is tile ideagha.
(, such tree traversal programs couldbe translated into p~trsers usillg ex-tended (',reibach Nor,ha.1 Form.Such a unified approach to parsing ismostly useful simply (,o understand howthe different l>arsers are related.
It issm'prising Co see, for examph:, that withpartial executiol L the bottom-up and\]el't-cornc.r parsers be('ome, the same.The similarity bel;weeu t>ot(,om-u 1) andh:ft-corner pa.rsing ha.s caused a certainall/Ollllt (If (:onI'usion in the literature.l"or example, (,It('.
so-calh'd "botton>ui)"chart i)arse.r l)resenl,ed (among otherl)laces) in Cazda.r "~ Me.llish \[3\] in factuses a left-corner strategy.
This waspointed out by Wiren \[ll\] but has notreceive(l much attention in the litera-I.ure.
It is hoped I.ha.1, the unifi('.d ap-proa.ch to parsing l)re.seifix:d h(:re willhel l) 1,o clear u I> ol, her such confusions.Finally, one Inight )nent io l )a co)l--heel.ion to C, ovcrnm('.nt-llinding parsingja.s presented ill ,Iolmson & Stabhn' \[5\].These a.uthors present a generate amdtest approa.
(:h, in which X-bar struc-l, lli'es ~llTe ramlomly generated m~d thentesl, ed agldnst lIB principles.
Once (,helogic of the program is expressed in sucha ma.uner, cfIi('iency considerations areused in order to fold the testing pro-cedures into the generation procedure.399One could view the strategy takel~ inthis paper as rather similar.
Runninga tree traversal program in reverse islike randomly generating phrase struc-ture.
Then these randomly generatedstructures are tested against the con-straints, i.e., the phrase structure rules.What I have shown here, is that the de-cision as to where to fold in the con-straints is very significant.
Folding inthe constraints at different positions ac-tually gives completely different parsingstrategies.References\[1\] Marc Dymetman.
A generalizedgreibach normal form for definit;eclause grammars.
In COLING-92vol.
I, pages 366-372, 1992.\[2\] Marc Dymetman.
Tra'asforma-tions de Grammaires logiques.
Ap-plicatios au probIeThc de la re-versibilite~n Traduclion A~do'ma-tique.
PhD thesis, Uniw;rsite/leGrenoble, Grenoble, France, 1992.The.~e d'Etat.\[3\] Gerald Gazdar and Chris Mel-lish.
Natural Lang~tage Processi.ngin Prolo 9.
Addison-Wesley, Read-ing, Mass, 1989.\[4\] John Itopcroft and .
)effrcy lJlhmm.Introduction to Automata 7'h,c-ory and Computation.
Addison-Wesley, Reading, Mass, 197!
).\[5\] Mark Johnson and Edward Sta-bler, 1993.
Lecture Notes forCourse taught at the LSA SummerSchool in Columbus Ohio.\[6\] Y. Matsumoto, H. tIirakawa.,I{ Miyoshi, and I1 Yasukawa.
Bup:A bottom-up arser embedded inprolog.
New Ceneration Comp~tl-ing, 1(2):145-158, 11983.\[7\]Is\]\[10\]\[11\]Yuji Matsumoto.
Natwral Lan-guage Parsin 9 Systems baaed onLogic Programming.
PM) thesis,Kyoto University, 1989.Richard O'Keefe.
The Craft ofProlog.
MIT Press, Cambridge,Mass, 1990.Fernando C. N. Pereira and Stu-art Shieber.
ProIo 9 and NaturalLanguage Analysis.
CSLI LectureNotes No.
10.
Chicago UniversityPress, Chicago, 1987.Fernando C. N. Pereira and DavidlI.
1).
W~m:en.
Definite clausegrammars-a surw'.y of the formal-ism and a comparison with aug-mented transition etworks.
ArliJi-cial \['ntelligence , 13:231-278, 1980.Also in Grosz et.
al., :1986.IVlats \Viren.
A comparison of rule-invocation strategies in context-free chart parsing.
In EACLProceedings, 3lh Annual Meeting,l)ages 226-233, 11987.400
