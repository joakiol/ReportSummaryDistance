BID IRECT IONAL PARSING OFLEX ICAL IZED TREE ADJO IN ING GRAMMARS*Alberto Lavelli and Giorgio SattaIstituto per ia Ricerca Scientifica eTeenologicaI - 38050 Povo TN, Italye-mail: lavelli/satta@irst.itAbst rac tIn this paper a bidirectional parser for LexicalizedTree Adjoining Grammars will be presented.
Thealgorithm takes advantage of a peculiar characteristicof Lexicalized TAGs, i.e.
that each elementary tree isassociated with a lexical item, called its anchor.
Thealgorithm employs a mixed strategy: it works bot-tom-up from the lexical anchors and then expands(partial) analyses making top-down predictions.
Evenif such an algorithm does not improve tim worst-casetime bounds of already known TAGs parsing meth-ods, it could be relevant from the perspective oflinguistic information processing, because it em-ploys lexical information i a more direct way.1.
In t roduct ionTree Adjoining Grammars (TAGs) are a formal-ism for expressing rammatical knowledge that ex-tends the domain of locality of context-free gram-mars (CFGs).
TAGs are tree rewriting systems spec-ified by a finite set of elementary trees (for a detaileddescription of TAGs, see (Joshi, 1985)).
TAGs cancope with various kinds of unbounded dependenciesin a direct way because of their extended domain oflocality; in fact, the elementary trees of TAGs arethe appropriate domains for characterizing such de-pendencies.
In (Kroch and Joshi, 1985) a detailed is-cussion of the linguistic relevance of TAGs can befound.Lexicalized Tree Adjoining Grammars (Schabes etal., 1988) are a refinement ofTAGs such that eachelementary tree is associated with a lexieal item,called the anchor of the tree.
Therefore, LexicalizedTAGs conform to a common tendency in modemtheories of grammar, namely the attempt to embedgrammatical information within lexical items.Notably, the association between elementary treesand anchors improves also parsing performance, aswill be discussed below.Various parsing algorithms for TAGs have beenproposed in the literature: the worst-case time com-plexity varies from O(n 4 log n) (Harbusch, 1990) toO(n 6) (Vijay-Shanker and Joshi, 1985, Lang, 1990,Schabes, 1990) and O(n 9) (Schabes and Joshi, 1988).
*Part of this work was done while Giorgio Satta wascompleting his Doctoral Dissertation at theUniversity of Padova (Italy).
We would like to thankYves Schabes for his valuable comments.
We wouldalso like to thank Anne Abeill6.
All errors are ofcourse  our  own.As for Lexicalized TAGs, in (Schabes et al, 1988) atwo step algorithm has been presented: during thefirst step the trees corresponding to the input stringare selected and in the second step the input string isparsed with respect to this set of trees.
Another paperby Schabes and Joshi (1989) shows how parsingstrategies can take advantage of lexicalization iorder to improve parsers' performance.
Two majoradvantages have been discussed in the cited work:grammar filtering (the parser can use only a subsetof the entire grammar) and bottom-up information(further constraints are imposed on the way trees canbe combined).
Given these premises and startingfrom an already known method for bidirectional CFlanguage recognition (Satta and Stock, 1989), itseems quite natural to propose an anchor-driven bidi-rectional parser for Lexicalized TAGs that tries tomake more direct use of the information containedwithin the anchors.
The algorithm employs a mixedstrategy: it works bottom-up from the lexical an-chors and then expands (partial) analyses makingtop-down predictions.2 .
Overv iew of  the A lgor i thmThe algorithm that will be presented is a recog-nizer for Tree Adjoining Languages: a parser can beobtained from such a recognizer by additional pro-cessing (see final section).
As an introduction to thenext section, an informal description of the studiedalgorithm is here presented.
We assume the follow-ing definition of TAGs.Definition 1 A Tree Adjoining Grammar (TAG)is a 5-tuple G=(VN, Vy, S, l, A), where VN is afinite set of non-terminal symbols, Vy is a finite setof terminal symbols, Se VN is the start symbol, 1and A are two finite sets of trees, called initial treesand auxiliary trees respectively.
The trees in the setIuA are called elementary trees.We assume that the reader is familiar with thedefinitions of adjoining operation and foot node (see0oshi, 1985)).The proposed algorithm is a tabular method thataccepts aTAG G and a string w as input, and decideswhether we L(G).
This is done by recovering(partial) analyses for substrings of w and by combin-ing them.
More precisely, the algorithm factorizesanalyses of derived trees by employing a specificstructure called state.
Each state retains a pointer to anode n in some tree ae luA ,  along with two addi-tional pointers (called Idol and rdot) to n itself or to- 27  -its children in a.
Let an be a tree obtained from themaximal subtree of a with root n, by means ofsome adjoining operations.
Informally speaking andwith a little bit of simplification, the two followingcases are possible.
First, ff ldot, rdo~n, state s indi-cates that the part of an dominated by the nodesbetween ldot and rdot has already been analyzed bythe algorithm.
Second, if ldot=rdot=n, state s indi-cates that the whole of an has already been analyzed,including possible adjunctions to its root n.Each state s will be inserted into a recognitionmatrix T, which is a square matrix indexed from 0 tonw, where nw is the length of w. If state s belongsto the component tij of T, the partial analysis (thepart of an) represented by s subsumes the substringof w that starts from position i and ends at positionj, except for the items dominated by a possible footnode in an (this is explicitly indicated within s).The algorithm performs the analysis of w start-ing from the anchor node of every tree in G whosecategory is the same as an item in w. Then it tries toextend each partial analysis o obtained, by climbingeach tree along the path that connects the anchornode to the root node; in doing this, the algorithmrecognizes all possible adjunctions that are present inw.
Most important, every subtree 7'of a tree derivedfrom aEluA,  such that 7'd0es not contain the an-chor node of a, is predicted and analyzed by the algo-rithm in a top-down fashion, from right to left (leftto right) if it is located to the left (right) of the paththat connects the anchor node to the root node in a.The combinations ofpartial analyses (states) andthe introduction of top-down prediction states is car-ried out by means of the application of six proce-dures that will be defined below.
Each procedure ap-plies to some states, trying to "move" outward oneof the two additional pointers within each state.The algorithm stops when no state in T can befurther expanded.
If some state has been obtained thatsubsumes the input string and that represents a com-plete analysis for some tree with the root node ofcategory S, the algorithm succeeds in the recogni-tion.3 .
The  A lgor i thmIn the following any (elementary orderived) treewill be denoted by a pair (N, E), where N is a finiteset of nodes and E is a set of ordered pairs of nodes,called arcs.
For every tree a=(N, E), we define fivefunctions of N into Nu {_1_} ,l called father, leftmost-child, rightmost-child, left-sibling, and right-sibling(with the obvious meanings).
For every tree a=(N,E) and every node n~N, a function domaina is de-fined such that domaindn)-'~, where/3 is the maxi-mal subtree in a whose root is n.IThe symbol "_1_" denotes here the undefined element.For  any TAG G and for every node n in sometree in G, we will write cat(n)=X, X~ VNuVZ,whenever X is the symbol associated to n in G. Forevery node n in some tree in G, such thatcat(n)~ VN, the set Adjoin(n) contains all root nodesof auxiliary trees that can be adjoined to n in G.Furthermore, a function x is defined such that, forevery tree a~ luA ,  it holds that z(a)=n, where nindicates the anchor node of a.
In the following weassume that the anchor nodes in G are not labelledby the null (syntactic) ategory symbol e. The set ofall nodes that dominate the anchor node of some treein IuA will be called Middle-nodes (anchor nodesincluded); for every tree a=(N, E), the nodes nEN inMiddle-nodes divide a in two (possibly empty) leftand right portions.
The set Left-nodes (Right-nodes)is defined as the set of all nodes in the left (right)portion of some tree in IuA.
Note that the three setsMiddle-nodes, Left-nodes and Right-nodes constitutea partition of the set of all nodes of trees in IuA.The set of all foot nodes in the trees in A will becalled Foot-nodes:Let w---a I ... anw, nw >1, be a symbol string; wewill say that nw is the length of w.Definition 2 A state is defined to be any 8-tuple\[n, ldot, lpos, rdot, rpos, fl, fr, m\] such that:n, ldot, rdot are nodes in some tree ~ IuA;lpos, rpos~ {left, right};fl, fr are either the symbol "-" or indices in theinput string such thatfl<fr;mE {-, rm, Ira}.The first component in a state s indicates a noden in some tree a, such that s represents some partialanalysis for the subtree domaina(n).
The secondcomponent (ldot) may be n or one of its children inif lpos=left, domaina(ldot) is included in the par-tial analysis represented by s, otherwise it is not.The components rdot and rpos have a symmetricalinterpretation.
The pair fl, fr represents the part ofthe input string that is subsumed by the possiblefoot node in domaina(n).
A binary operator indicatedwith the symbol ?
is defined to combine the com-ponents fl, fr in different states; such an operator isdefined as follows: f~f  equalsfiff= -, it equalsf iff= -, and it is undefined otherwise.
Finally, the com-ponent m is a marker that will be used to block ex-pansion at one side for a state that has already beensubsumed at the other one.
This particular techniqueis called subsumption test and is discussed in (Sattaand Stock, 1989).
The subsumption test has themain purpose of blocking analysis proliferation dueto the bidirectional behaviour of the method.Let IS be the set of all possible states; we willuse a particular equivalence r lation O.C- Isxls de-fined as follows.
For any pair of states s, s', sO.s"holds if and only if every component in s but thelast one (the m component) equals the corresponding- 28  -component in s'.The algorithm that will be presented employs thefollowing function.Definition 3 A function F is defined as follows: 2F: V~, -.> ~(Is)F(a) = {s I s=\[father(n), n left, n, right, -, -, -\],cat(n)=a and z(oO=n for some treeot~ IuA }The details of the algorithm are as follows.Algor i thm 1Let G=(VN, Vy, S, I, A) be a TAG and let w=al ...anw, nw >--1, be any string in V~*.
Let Tbe a recogni-tion matrix of size (nw+l)x(nw+l) whose compo-nents tij are indexed from 0 to nw for both sides.Developmatrix T in the following way (a new slates is added to some entry in T only if SOjq does nothold for any slate Sq already present in that entry).1.
For every slate se F(ai), l<i<-nw, add s to ti-l,i.2.
Process each slate s added to some entry in T bymeans of the following procedures (in any order):Left-expander(s), Right-expander(s),Move-dot-left(s), Move-dot-right(s),Completer (s ) ,  Adjoiner(s);until no state can be further added.3.
if s=\[n, n, left, n, right,-, -, -\]e to,nw for somenode n such that cat(n)=S and n is the root of atree in I, then output(true)', else output(false).C3The six procedures mentioned above are definedin the following.Procedure 1 Left-expanderInput A state s=\[n, ldot.
lpos, rdot, rpos, fl, fr, m\]in ti,j.Precondition me-Ira, ldot~n and lpos=right.DescriptionCase 1: ldot~ VN, ldot~ Foot-nodes.Step 1: For every state s'~\[ldot, ldot, left, ldot,right, fl", fr", -\] in ti',i, i'<_i, add slate s'=\[n,ldot, left, rdot, rpos, fl~fl '', frOfr '', -\] to ti,j;set m=rm in s if left-expansion is successful:,Step 2: Add state s'=\[ldot, ldot, right, ldot, right,-, -, -\] to ti, i.
For every state s"=\[n", n", left,n", right, f l",  fr",  "\] in ti ' , i ,  i '< i ,n" ~ Adjoin( ldot ), add state s'=\[ ldot, ldot, right,ldot, right, -, -, -\] to tfr"fr".Case 2: ldotE V~.. 3If ai=cat(ldot), add state s~\[n, ldot, left, rdot,rpos, fi, fr,-\] to ti-Ij (if eat(ldot)=e, i.e.
the nullcategory symbol, add state s' to tij); set m=rmin s if left-expansion is successful.Case 3: ldot~ Foot-nodes.Add state s~\[n, ldot, left, rdot, rpos, i', i, -\] to2Given a generic set ;1, the symbol P(.,q) denotes theset of all the subsets of .,~ (the power set of ,~).3We assume that a 0 is undefined.ti, J, for every i'<~, and set m=rm in s. QProcedure 2 Right-expanderInput A slate s=\[n, ldot, lpos, rdot, rpos, fl, fr, m\]in tij.Precondition m#m, rdotg-n and rpos=-left.DescriptionCase 1: rdot~ VN, rdot~ Foot-nodes.Step 1: For every slate s"=\[rdot, rdot, left, rdot.?
te  to  ?
.~  , t  t rtght, fl , fr , "\] m tj,j,, j~_j , add state s =\[n,ldot, lpos, rdot, right, flOfl", fr~fr", "\] toti "'; set m=lm in s if left-expansion is dsuccessful;Step 2: Add state s~\[rdot, rdot, left, rdot, left, -o-, -\] to tjj.
For every slate s"--\[n", n", left,n'~, right, f l" ,  f r ' .
"\] in tj,j., j< j ' ,n" ~ Adjoin(rdot), add state s'=\[rdot, rdot, left,rdot, left, -, -, -\] to tfr"f/'.Case 2: rdote V~.
4If aj+l=cat(rdot), add state s~\[n, ldot, lpos, rdot,rigl~t, f l ,fr, "\] to ti,j+l (if cat(rdot)=e, i.e.
thenull category symbol, add state s' to tij); setm=Im in s if right-~xpansion is successful.Case 3: rdot?
Foot-nodes.Add state s- in,  ldot, lpos, rdot, right, j, j', -\] totij', for every j<j', and set m=lm in s. t3Procedure 3 Move-dot-leftInput A slate s=\[n, ldot, lpos, rdot, rpos, fl, fr, m\]in tij.Precondition m~lm, and ldot~n, lpos=left, orldot=n, lpos=right.DescriptionCase 1: lpos=right.
~Add slate s~\[n, rightmost-child(n), right, rdot,rpos, fl, fr, -\] to tij; set m=rm in s;Case 2: lpos=left, left-sibling(n)~l.Add state s'=\[n, left-sibling(ldot), right, rdot,rpos, fl, fr, "\] to tij; set m=rm in s.Case 3: lpos=-left, left-sibling(ldot)=?.Add slate s'=\[n, n, left, rdot, rpos, fl, fr, -\] to tijand set m=rm in s. (3Procedure 4 Move-dot-rightInput A slate s=\[n, ldot, lpos, rdot, rpos, fl,fr, m\]in tij.Precondition m#rm, and rdot~n, rpos=right, orrdot=n, rpos=-left.DescriptionCase 1: rpos=left.Add slate s'=\[n, ldot, lpos, leftmost-child(n), left,fl, fr, -\] to tij; set m=lm in s;Case 2: rpos=right, right-sibling(n)~Z.Add state s~\[n, ldot, lpos, right-sibling(rdoO,left, fl, fr, "\] to ti4; set m=lm in s.Case 3: rpos=right, rtght-sibling(ldot)=?.Add state s'=\[n, ldot, lpos, n, right, fl,fr, -\] totij and set m=lm in s. Q4See note 3.- 29 -Procedure  5 CompleterInput A state s=\[n, n, left, n, right, fl, fr, m\] in tij.Precondition n is not the root of an auxiliary tree.DescriptionCase 1: nE Middle-nodes.Add state s'=\[father(n), n, left, n, right, fl, fr, -\]to ti~ j.Case 2: n~Left-nodes.For every state s"=\[n", Idol", right, rdot, rpos,fl", fr", m"\] in t'f,j ,J'>J', such ,that ldot"=n andm"~lm, add state s =\[n , idol', left, rdot, rpos,f lu f f ' ,  fr@fr", "\] in t i f ;  i f  left-expansion issuccessful for slate s', set m =rm in s .Case 3: nERight-nodes.For every state s"=\[n", Idol, lpos, rdot", left, ff ' ,f,", m'q in ti',i, i'<i, such that rdot"=n andm"#rm, add state s -  \[n", Idol, lpos, rdot", right,H pt  ?
, ?
?
* ffi~ft , f,~gf, , -\] m ti',j, ff nght-expansmn issuccessful for state s", set m"--lm in s".
~.Procedure 6 AdjoinerInput A state s=\[n, n, left, n, right, fl, fr, m\] in tij.Precondition Void.DescriptionCase 1: apply always.For every state s"=\[n", n", left, n ", right, i, j, -\]?
~ .
t ~  ?
.
?
t?
?
?
m ti'~, t _t,j~_j, n eAdjom(n), add state s'=\[n,n, lelt, n, right, fl, fr, "\] to ti'd'.Case 2: n is the root of an auxiliary tree.Step 1: For every state s"=\[n", n", left, n",~l_,fn such that right, f f ' ,  fr", "\] in ", n , left, n , n~ Adjoin(n"), add state "'right, ff', fr", -\] to ti~; ,Step 2: For every state s =\[n', Idol", right, rdot,rpos, ft", fr", m"\] in tj.j,,,j'>j, such thatne Adjoin(Idol") and m ~lm, add states'=\[ldot", Idol", right, Idol", right, -, -, -\] toStepl~/:r'For every state s"=\[n", Idol, lpos, rdot",left, ft", fr", m'q in ti',i, i" <i, such thatn~Adjoin(rdot")  and m"~rm, add states'=\[rdot", rdot", left, rdot", left, -, -, -\] totftft.
(:24.
Formal  ResultsSome definitions will be introduced in the fol-lowing, in order to present some interesting proper-ties of Algorithm I.
Formal proofs of the statementsbelow can be found in (Satta, 1990).Let n be a node in some tree a~l~A.
Each states=\[n, Idol, lpos, rdot, rpos, fl, fr, m\] in I S identifiesa tree forest ?
(s) composed of all maximal subtreesin a whose roots are "spanned" by the two positionsIdol and rdot.
If ldot~n, we assume that the maximalsubtree in a whose root is Idol is included in ?
(s) ifand only if lpos=left (the mirror case holds w.r.t.rdot).
We define the subsumption relation < on I S asfollows: s~_s' iff state s has the same first componentas state s' and ?
(s) is included in ?(s9.
We also saythat a forest ?
(s) derives a forest ~ (?
(s) =~ ~)whenever I//can be obtained from ~(s) by means ofsome adjoining operations.
Finally, E denotes theimmediate dominance relation on nodes of ae IuA,and ~(a) denotes the foot node of a (if a~ A).
Thefollowing statement characterizes the set of all statesinserted in T by Algorithm 1.Theorem 1 Let n be a node in a~ IuA  and let n'be the lowest node in a such that n'~ Middle-nodesand (n, n?
)EE*; let alo s=\[n, Idol, lpos, rdot, rpos,fl, fr, m\] be a state in I S. Algorithm 1 inserts a state.
~ 0 ?
?
s ,  s_s , m t i h ~j+h , hl,ha->O, if and only if one of.
. "
| .
.the following condl~ons i met:( i )  n~ Middle-nodes (n'=n) and ?
(s) =~ IV, where !//spans ai+l ... aj (with the exception of stringaf.t+ 1 ... aft if ~(a) is included in qJ(s)) (seeFigure 1),(ii) n~ Left-nodes, s=s' , hl=h2=O and ?
(s) ~ V/' ,where ~: spans ai+t ... aj (with the exception ofstring aA+ 1 ... af if ~(a) is included in ?
(s)).Moreover', n' is t~  root of a (maximal) subtree zin a such thai z ~ ~, IV strictly includes i f  andevery t ree /~ A that has been adjoined to somenode in the path from n' to n spans a string thatis included in al ... ai (see Figure 2);(iii) the symmetrical case of (ii).a i +1 "'" af t X af ,+1 "" aiFigure 1.n"y a i + l .
.a f lXa f r+ l .
aj -Figure 2.In order to present the computational complexityof Algorithm 1, some norms for TAGs are here in~troduced.
Let A be a set of nodes in some trees of aTAG G, we defineIGIA, k = ~ Ichildren(n)l k ?nE .91:The following result refers to the Random AccessMachine model of computation.- 30  -Theorem 2 If some auxiliary structures (vector oflists) are used by Algorithm t for the bookkeepingof all states that correspond to completely analyzedauxiliary trees, a string can be recognized inO(nt.IAI.max{IGIN.M,I+IGIM,2}) time, where M=Middle-nodes and N denotes the set of all nodes inthe trees of G.5.
A Linguistic ExampleIn order to gain a better understanding ofAlgorithm 1 and to emphasize the linguistic rele-vance of TAGs, we present a running example.
Inthe following we assume the formal framework ofX-bar Theory (Jackendoff, 1977).
Given the sen-tence:(1) Gianni ncontra Maria per casolit.
Gianni meets Maria by chancewe will propose here the following analysis (seeFigure 4):(2) \[ca \[c' lip \[NP Gianni\] \[r inc?ntrai \[vp* \[vP\[w e i \ [~  Maria\]\]\] \[pp er caso\]\]\]\]\]\]Note that the Verb incontra has been moved to theInflection position.
Therefore, the PP adjunctionstretches the dependency between the Verb incontraand its Direct Object Maria.
These cases may raisesome difficulties in a context-free framework, be-cause the lack of the head within its constituentmakes the task of predicting the object(s) rather inef-ficient.Assume a TAG G=(VN, VZ, S, I, A), whereVN={IP, r, vP, v', NP}, V~:={Gianni, Maria,incontra, PP},I={o~} andA={fl} (see Figure 3; eachnode has been paired with an integer which will beused as its address).
In order to simplify the compu-tation, we have somewhat reduced the initial tree aand we have considered the constituent PP as a ter-minal symbol.
In Figure 4 the whole analysis treecorresponding to (2) is reported.Let x(a)=5, z(fl)=13; from Definition 3 it fol-lows that:F(5)= {\[4, 5, left, 5, right, -, -, -\]},F(13)={\[ll, 13, left, 11, right,-,-,-\]}.A run of Algorithm 1 on sentence (1) is simpli-fied in the following steps (only relevant steps arereported).First of all, the two anchors are recognized:1) s1=\[4, 5, left, 5, right, -, -, -\] is inserted in tl.2and s2=\[l l ,  13, left, 13, right, -, -, -\] isinserted in t3,4, by line 1 of the algorithm.Then, auxiliary tree fl is recognized in the followingsteps:2) s3=\[ll, 12, right, 13, right, -, -, -\] is insertedin t3.
4 and m is set to rm in state s2, by Case2 of the move-dot-left procedure;3) s4=\[ll, 12, left, 13, right, 2, 3, -\] is insertedin t2.4 and m is set to rm in state s3, by Case3 of the left-expander p ocedure;4) ss=\[l l ,  11, left, 13, right, 2, 3, -\] is insertedin t2,4 and m is set to rm in state s4, by Case3 of the move.dot-left procedure;5) st=\[11, 11, left, 11, right, 2, 3, -\] is insertedin h,4 and m is set to lm in state Ss, by Case3 of the move-dot-right procedure.Or: IP (I)(2) NPIO) Giannir (4)incontra i (5) VP (6)IV' G)(8) e i NPIMma(9)(1o): VP  0;)(12) VP PP (13)per casoFigure 3.IPNP I'Giar~ mcomra i VPVP PPper casoV'?i NPIMariaFigure 4.After the insertion of state s7--\[4, 5, left, 6, left, -, -,-1 in tl,2 by Case 2 of the move-dot-right procedure,the VP node (6) is hypothesized by Case 1 (Step 2,via state s6) of the right-expander p ocedure with theinsertion of state ss-\[6, 6, left, 6, left, -, -, -1 in t2.
2.The whole recognition of node (6) takes place withthe insertion of state s9;\[6, 6, left, 6, right, -, -, -1in: t2,3.
Then we have the following step:6) s10=\[6, , left, 6, right, -, -, -\] is inserted in-31t2,4, by the adjoiner procedure.The analysis proceeds working on tree a and reach-ing a final configuration i  which state s~t=\[1,left, 1, right, -, -, -\] belongs to to,4.6 ,  D iscuss ionWithin the perspective of Lexicalized TAGs,known methods for TAGs recognition/parsing pre-sent some limitations: these methods behave in aleft-to-right fashion (Schabes and Joshi, 1988) orthey are purely bottom-up (Vijay-Shanker and Joshi,1985, Harbusch, 1990), hence they cannot ake ad-vantage of anchor information in a direct way.
Thepresented algorithm directly exploits both the advan-tages of lexicalization mentioned in the paper bySchabes and Joshi (1989), i.e.
grammar filtering andbottom-up information.
In fact, such an algorithmstarts partial analyses from the anchor elements, di-rectly selecting the relevant rees in the grammar,and then it proceeds in both directions, climbing tothe roots of these trees and predicting the rest of thestructures in a top-down fashion.
These capabilitiesmake the algorithm attractive from the perspective oflinguistic information processing, even if it does notimprove the worst-case time bounds of alreadyknown TAGs parsers.The studied algorithm recognizes auxiliary treeswithout considering the substring dominated by thefoot node, as is the case of the CYK-like algorithmin Vijay-Shanker and Joshi (1985).
More precisely,Case 3 in the procedure Left-expander nondeterminis-tically jumps over such a substring.
Note that thealternative solution, which consists in waiting forpossible analyses subsumed by the foot node, wouldprevent he algorithm from recognizing particularconfigurations, due to the bidirectional behaviour ofthe method (examples are left to the reader).
On thecontrary, Earley-like parsers for TAGs (Lang, 1990,Schabes, 1990) do care about substrings dominatedby the foot node.
However, these algorithms areforced to start at each foot node the recognition of allpossible subtrees of the elementary trees whose rootscan be the locus of an adjunction.In this work, we have discussed a theoreticalschema for the parser, in order to study its formalproperties.
In practical cases, such an algorithmcould be considerably improved.
For example, theabove mentioned guess in Case 3 of the procedureLeft-expander could take advantage of look-aheadtechniques.
So far, we have not addressed topics suchas substitution or on-line recognition.
Our algorithmcan be easily modified in these directions, adoptingthe same proposals advanced in (Schabes and Joshi,1988).Finally, a parser for Lexicalized TAGs can beobtained from Algorithm 1.
To this purpose, it suf-fices to store elements in IS into the recognitionmatrix T along with a list of pointers to those en-tries that caused such elements to be placed in thematrix.
Using this additional information, it is notdifficult to exhibit an algorithm for the constructionof the desired parser(s).Re ferencesHarbusch, Karin, 1990.
An Efficient ParsingAlgorithm for TAGs.
In Proceedings of the 28thAnnual Meeting of the Association for ComputationalLinguistics.
Pittsburgh, PA.Jackendoff, Ray, 1977.
X.bar Syntax: A Study ofPhrase Structure.
The M1T Press, Cambridge, MA.Joshi, Aravind K., 1985.
Tree AdjoiningGrammars: How Much Context-Sensitivity Is Requiredto Provide Reasonable Structural Descriptions?.
In: D.Dowty et al (eds).
Natural Language Parsing:Psychological, Computational and TheoreticalPerspectives.
Cambridge University Press, New York,NY.Kroch, Anthony S. and Joshi, Aravind K., 1985.Linguistic Relevance of Tree Adjoining Grammars.Technical Report MS-CIS-85-18, Department ofComputer and Information Science, University ofPennsylvania.Lang, Bernard, 1990.
The Systematic Constructionof Earley Parsers: Application to the Production ofO(n 6) Earley Parsers for Tree Adjoining Grammars.
InProceedings of the 1st International Workshop onTree Adjoining Grammars.
Dagstuhl Castle, F.R.G..Satta, Giorgio, 1990.
Aspetti computazionali dellaTeoria della Reggenza e del Legamento.
DoctoralDissertation, Univ'ersity of Padova, Italy.Satta, Giorgio and Stock, Oliviero, 1989.
Head-Driven Bidirectional Parsing: A Tabular Method.
InProceedings of the 1st International Workshop onParsing Technologies.
Pittsburgh, PA.Schabes, Yves, 1990.
Mathematical andComputational Aspects of Lexicalized Grammars.
PhDThesis, Department of Computer and InformationScience, University of Pennsylvania.Schabes, Yves; Abeill6, Anne and Joshi, AravindK., 1988.
Parsing Strategies for 'Lexicalized'Grammars: Application to Tree Adjoining Grammars.In Proceedings of the 12th International Conferenceon Computational Linguistics.
Budapest, Hungary.Schabes, Yves and Joshi, Aravind K., 1988.
AnEarley-Type Parsing Algorithm for Tree AdjoiningGrammars.
In Proceedings of the 26th AnnualMeeting of the Association for ComputationalLinguistics.
Buffalo, NY.Schabes, Yves and Joshi, Aravind K., 1989.
TheRelevance of Lexicalization to Parsing.
InProceedings of the 1st International Workshop onParsing Technologies.
Pittsburgh, PA. To also appearunder the title: Parsing with Lexicalized TreeAdjoining Grammar.
In: M. Tomita (ed.).
CurrentIssues in Parsing Technologies.
The MIT Press.Vijay-Shanker, K. and Joshi, Aravind K., 1985.Some Computational Properties of Tree AdjoiningGrammars.
In Proceedings of the 23rd AnnualMeeting of the Association for ComputationalLinguistics.
Chicago, IL.- 32  -
