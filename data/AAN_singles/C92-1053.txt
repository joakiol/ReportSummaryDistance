ORGANIZ ING DIALOGUE FROM AN INCOHERENT STREAM OF GOALS*ELISE H. TURNERDepartment of Computer ScienceUniversity of New HampshireDurham, NH, 03824USAAbstract--Human discourse appears coherent when it re-fleets coherent human thought.
However, computers do notnecessarily store or process information in the same waythat people do a.ud~ therefore, cannot rely on the structureof their reuouing for the structure of thehr dialogue,s.
In-stead, computer-generated conversation must rely on someother mechanism for its orgsaiisation.
In this paper, wediscuss one such mechanism.
We describe a template hatprovides a guide for conversation.
The template is builtfrom schemata representing discourse convention.
As goalsarrive from the problem solver they are added to the tem-plate.
Because accepted iscourse structures are used toconnect a new goal to the existing template, goals are or-ganiaed into sub-groups that follow conventional, coherentpatterns of discourse.
We present JUDIS, an interface to adistributed problem solver that uses this approach to orga-nise dialogues f~om an incoherent stream of goals.I INTRODUCTIONConversation seems coherent and is easy to follow be-cause it reflects the way people think.
When thespeaker thinks coherently, his or her communicationgoals will be properly organised to follow linguistic con-vention.
So s models of human language generation canallow domain goals to directly motivate conversationand add clue words only when the occasional utteranceviolates convention \[5; 8\].However~ computer-generated conversation cannotrely on problem solving for its organisation.
Some prob-lem solvers make no attempt to be "cognitively plausi-ble" and do not produce goals in sequences that wouldappear coherent to human users.
The combined goalsfrom a distributed problem solver where several inde-pendent reasoners use a single interface to communicatewith the user are also likely to be incoherent.
Even ifindividual problem solvers produce coherent streams ofgoals, the stream of goals from the aggregate is likelyto switch back and forth between sub-problems thatare being addressed by the individual systems.
We call* Some of the work described inthis paper was done at the Com-puter Science Depaxtment of Georgia Institute of Technology,AtlJnts, Georgia, 30332, supported by the NSF under llrmatlST-S608362.
The &uther wishes to thank the anonymous re-viewers for their comments.the sequence of goals produced by such systems an in-coherent stream of goab because the goals are orderedin a way that would not seem reasonable to a humanlistener.
Interfaces to such systems, while being re-sponsive to the goals of problem solving, must rely onsomething else to give dialogue its organisation.In this paper, we describe a template that can providecomputer-generated conversation with a coherent orga-nisation while meeting the needs of the problem solvers.This template is built from schemata representing ex-pected discourse structure.
These schemata includegeneral inguistic conventions as well as expected or-ganisations for specific situations.
Before conversationbegins the template is very abstract, giving only broaddescriptions of topics that might be expected in a spe-cific domain.
These expectations provide a frameworkfor organising oals from the problem solvers.
Newgoals are associated with the existing template, orga-nising them into groups that are related by conven-tional discourse structure.
Goals are added by findingschemata which connect hem to the template.
Sincethe schemata specify acceptable conversational struc-ture, the template represents a coherent conversation.The dialogue in Figure 1 was organised using sucha template.
The arrows in the figure show the orderin which goals arrived at the interface.
The tall of thearrow shows when a goal arrived at the interface; thehead, where it is realised in the dialogue.
Each time thearrows cross, the goal has been delayed to fit more nat-urally into the conversation.
Goals have been groupedby the course that they relate to as well as being fur-ther organised by attributes uch as ingredients of themain-dish of a course (utterances 10a~10d).
The dia-logue also includes a story to connect wo utterances(10a and 10b), which adds variety to the structure ofthe conversation.This dialogue was generated by JUDIS  \[15\], an in-terface to Julia, an advisor for meal-planning \[3\].
I Ju-t JUDIS is rcsponsihle for the organlsing the conversation madworks with conceptl instead of actual English ut ter~c~s.
Con-cepts are converted toEnsllsh and En~ah trandated into theconceptual l nguage by the NLPTool \[2\].
JUDIS ~ workedwith the NLPTool to participate in Engiish dialogues, hut wunot col~ected to the NLPTool for this ?x~ple.
In the fillur~,EnsUsb is used to make the dialogue readable.The Julla described here is the original version of the system.AcrEs DE COLING-92, NANTES, 23-28 AOt3T 1992 3 3 8 PRec.
OF COLING-92, NANTES, AUO.
23-28.
1992(1)  User :  i ' l a  p lann ing  a d inner  and  wou ld  l i keto ~erve  Mexclan food .
(2) JUDIS:I 'm thinking of chili for a ll~illcourse.
D~s  everyone llke spicy food?
(3) User: No, Tom hates splcy food.~(4)  JUDIS:Would you like enchiladas?
(5) Uses :  What are  enchiladas?~(6)  dODIS:They'ge a Mex lc~ food made oftortillas and rmsat.
They also containonion and garlic.
(7) User :  OK.(8) dOD~S:het'~ have guacarnole for at~ appetizer.~ 191 User :  OK.(IOakTUDIS: I ~ugt  r~bered  a case whereq t sonmol3e had  a par ty  ~d cou ld  ,tot mashh tile avocados  because  they wore  u l t r ib~.
( lOb} Later .
go - -one  cou ld  not  eat  theenchiladas because he wa~ allergic toI cileese.
(10c) Make sure no one i s  allergic to cheeseand that the av~ados  at'e rlpe enough.
(10d) You n~ay w~it to use red onions becausethey are sweet.
(10o) Shall we g,z~e the appetizer at thetable or as her d'oeuveres?
(Ii) User: At the table.
~ (12) JUDIS: Would sopapllla or fried ice c re~ for dessert.?
(13) User: SopapJlla.
(14) JUDIS: | just remembered a meal whereso?msone couldn't eat suaca~le  becausehe was allergic to tcwnat~s.
Are ally ofyour guests allergic to somal i s?
(15) User : No.Figure 1: A dialogue with JUDIS.lia is a distributed problem solver comprised of a case-based reasoner and a planner which uses more tradi-tional problem solving techniques.
The problem solversand the interface share their world knowledge.
Whena problem solver has a goal to either give or get infor-mation, the goal is sent to JUDIS where it is convertedinto an appropriate utterance and attached to the tem-plate.
We refer to these goal-motivated utterances asrequests.I I  REPRESENTING DISCOURSE STRUCTURBWe have chosen conversation MOPS (C-MOPS) \[6;16\] as the representation for discourse structure inJUDIS.
C -MOPS participate in an abstraction hier-archy which allows generalised conventions as well assituation-specific expectations to he represented.
A d~-namic memory \[7; 14\] can retrieve the most predictiveMOP for the current situation.A MOPs and C-MOPsA memor~ orgsnization packet (MOP) \[14\] is aschematic structure used to organise long-term, con-Aa research  on prob lem so lv ing  cont inued ,  " Ju l ia "  w i ts  ainuused to refer only to the problem solvers and the dclign of theproblem solverl changed.
JUDIS receives goal* from ?
micr?~version of the caterer and am input from the keyboard.
Thegoads in the example came as input and reflect he problemsolving of systen~ sugge.ted for the catererer a chitecture, Atthe tlm?
that 3UDIS wa.
implemented, ?
complete ?nd inte-grated veralon of the caterer wu not available.ceptual, episodic memory.
An episode is representedby scenes which have bccn performed to achieve somegoal.
Episodes are stored in and retrieved from dy-namic memory.
This memory changes when ueneral~edepisodes are created as individual episodes that sharefeatures are stored in memory.
The generalizations oc-cur at many different levels forming a hierarchy of gen-eralisations and their specializations, Episodes in dy~narnic memory are linked by predictive indices, selectedfeature-value pairs which mark differences between gen-eraliaed episodes and their contributing specialiaations.These indices are followed when an episode is retrievedfrom dynamic memory, allowing a system to he Ure-minded" of MOPs which match some predictive featureof the current situation.
We use the term "MOP" todescribe both a single episode and an episode with itsindices and npecialisations.
In the context of being re-trieved from memory or Junta, tinted in the template,"MOP" will refer to a single episode.
In the context ofrepresentations stored in memory, "MOP" includes theindices and specialisatioas.When the events stored are conversations, we referto these structures as conversation MOPs or C~MOPs.Kellermann, ei al.
\[6\] suggest C-MOPs as the cog-nitive structures for representing discourse structure.C-MOPs can appear as scenes in other C-MOPs, allow-ing for the recursion ecessary in any representation fdiscourse structure.
The scenes of a C-MOP can hegiven n total or partial ordering to capture the propersequencing of a conversation.
Also, C-MOPs combineintention, in the form of an associated goal, with con-vention captured by generalised episodes.
Kenermannet al's experiments suggested that C-MOPs represent?ing discourse structure are divided into scenes by topic.In many ways C-MOPs are like other schemata thatcapture discourse structure leg., 0; 10\].
Their scenesspecify conventional patterns ofdiscourse.
These scenescan be either mandatorll or optional.
Many typesof schemata can be easily tralmlated into a declara-tive representation that explicitly gives the structureof the conversation and, so, are suitable for buildingthe template.
All types of schemata must allow recur-stun, so a template built front any type of schematacould be expanded.
C -MOPs  have one characteristic,however, that makes them particularly useful for or-ganising requests.
They participate in a generalisa-tion/apecialisation hierarchy.
This hierarchy has twoadvantages: it allows the heat prediction for a given sit-uation to be returned from memory, and it allows thosepredictions to be tuned as new information is learnedabout the situation.B The Generalization/Specialization HierarchyThe ability to capture convention in the generalisa-tion/apecialisation hierarchy is important for our workin organising dialogues.
In principle, generalisationsAcrEs DE COLING-92, NANTES, 23-28 AO6T 1992 3 3 9 PROC.
OF COLING-92, NANTES, AUG. 23-28, 1992are formed as a language user participates in conver-sation with other language users \[7; 14\].
Becausethese conversations follow convention, the generaliza-tions of these conversations will represent abstract dis-course convention \[6\].
When specific circumstancesconstrain these conventions, pecialhsations are formedand indexed by these circumstances.
Consequently, theC-MOP retrieved for a given situation will he the onethat is most predictive.
2 The expectations it representswill be shared by other language users, including theother conversant, and will contain ell the informationavailable for the specific situation.
Since our researchis currently focused on how knowledge of discoursestructure can be used to organize goals, instead of onelucidating those structures, JUDIS' C-MOPs and thegeneraiisation/speciaiisation hierarchy arc hand-coded.Our C-MOPs are derived from others' research on dis-course structure, where possible.
Although JUDIS doesnot generalize C-MOPs from experience, we have beencareful to use a generalization/specialization h erarchywhich we believe could have been built from experience.One important characteristic of the generaliza-tion/specialisation hierarchy is its ability to capturesituation specific detail.
This ability is especially im-portant given that computers do not think like people.Specializations can be used to enumerate the accept-able ways to discuss a topic.
The interface can thenrely on the appropriate C-MOP to organize the conver-sation instead of being dependent on the knowledge or-ganization and problem solving methods of the domainreasoners.
The specialization can also rule out waysof organizing the dialogue that follow a standard is-course convention but would not be expected by humanreasoners.
For example, a general problem-solving con-vention allows for a goal-subgoal ordering \[5\].
However,in meal-planning some orderings eem more acceptablethan others.
In JUDIS, specialisations for discussing ameal include talking about the main course before theother courses or discussing the meal in chronological or-der, but a specialization for discussing the dessert firstis not included, sThe generalization/specialization hierarchy also al-lows the template to be tuned as the situation changesor new information is discovered.
If the new informa-tion is an index of a C-MOP, that O-MOP can be re-placed with the indexed specialisation.
This idea is im-portant for adding new requests to the template.
Wecan think of some cases of adding a request as find-ing a speciaiization that includes the current request as~JUDIS' retrieval algorithm \[15\] orders the features mad pur-sues the indices equentially until a.n index is not found.
Thisis s departure from traditional implementatlorm of dynamicmemory that pttrsue indices "in pared/el" \[c?, 7\].
Our alSo-rithm allows JUDIS' memory to return the Jingle C-MOP that,accordlnJ to the ordering, best matches the current situation.l~e~re could be fm-'ther speclallsatlona toallow the dessert ohe mentioned first, but we would expect hese to arise, and bereturned, only under special clrcmnmtance*.well an the request hat has just arrived.
For example,request 6, about avocados, is added to the templateas a discussion of the ingredients in guacexnole.
Whenrequest 7, concerning onions, arrives, the dlecu~ion ofthe ingredients i specialized to a list that includes bothavocados and onions.C Conversation MOPs in JUDISJUDIS relies on C-MOPs to represent all parts of theconversation.
This includes C-MOPs for the entireconversation, individual topics, utterances, and ques-t ion/aaswer sequences.
The C-MOPs that are moatimportant for organizing conversation in JUDIS arethe LXST-CMOP and NARRATIVE-CMOP which can beused to organize topics and the TOPIc -CMOP itself.3UDIS also has a CATERER-CMOP which containsspecialiscd knowledge about conversations for planningmeals and organizes the overall discussion of the meal.Some C-MOPs, such as the CXTERER-CMOP, arerepresented eclaratively in memory with topics sadtheir ordering iven explicitly.
This makes instsatiatingthe C-MOP easy and allows the interface to be indepen-dent of problem solving knowledge when organizing thedialogue.
However, not all C-MOPs should be repre-sented this way.
JUDIS also represents some C-MOPs,such as the LIsT-CMOP and the NARRATIV*e-CMOP,procedurally.
Explicit representations are created fromother knowledge only when such a C-MOP is instanti-ated.
Thin allows JUDIS to create conversations thathave not yet been experienced but foilow conventionsthat have been generalised from experience.
It alsosaves space because JUDIS builds these C-MOPs fromworld knowledge that is shared with the problem solversand does not have to explicitly represent all possible C-MOPs.The CATERER-CMOP organizes the discussion of themeal.
3UDIS has very little information about the de-tails of the conversation, but is able to identify thebroad topics that are likely to be discussed: OENEaXL-INFOj APPETIZER, MAIN-COURSE and DESSERT.
Thespecialisations are indexed by specific problem solvingstrategies, main-first and chronological-order, that im-pose acceptable orderings on the topics.The ToP Ic -CMOP has three scenes: CHANGE-TOPIC, DISCUSSION, and CLOSE-TOPIC.
The change-topic and close-topic are used to mark unexpectedmoves in the conversation and do not affect how we or-gsaise requests in the template.
The discussion scenecan be a TOPIc-CMOP~ an UTTERANCE-CMOP~ or aQUESTION/ANSWER-CMOP.
The sabjecL of the TOPIC-or DISCUSSION-CMOP tells what the C-MOP will beabout.
We use this term to avoid confusing the topicof a C-MOP with the Tov lc -CMOP.The NARRATIVE-CMOP is a simplified version ofRumelhart 's \[13\] story grammar and specifies how tobuild C-MOPs directly from MOPs in episodic memory.ACRES DE COL1NG-92.
NAMES, 23-28 AOI~r 1992 3 4 0 PROC.
OF COLING-92, NAr,'rES, AUG. 23-28, 1992To a large extent, the narrative-CMOP is a great deallike the episode in memory which it will relate.
All ofthe scenes in the episode become scenes in the C-MOPand keep their ordering.
A setting and a conclusionare added as mandatory scenes.
Scenes that satisfysome request of the problem solver are also marked anmandatory, as are unusual scenes which enable them.The LIST-CMOP converts values found in a slot ofa frame into -roPlc-CMOPs which become its scenes.The LlST-CMOP has speclalisations which include anordering ~ct ion  \[11\].
The predictive feature "info-type" indexes these specialisations.
For example, ifconstructing a list of ingredients, which are dividedinto main, secondary and spices, a list with the "main-first" ordering function is returned.
All scenes in LIST-CMOPs used to organize requests are optional.
Con-sequently, only requests from the problem solvers willbe included in the conversation.
However, there arespecializations, retrieved in the context of question an-swering, that contain mandatory scenes.Clearly, JUDIS is limited in the types of dialoguesthat it can organise by the small number of C~MOPsthat are implemented.
Most noticeably absent from ourlist is a general problem-solving C-MOP.
We were ableto avoid implementing this C-MOP because planninga meal can be seen as filling in values for attributes ina frame and captured in the LIsT-CMOP.
In addition,we expect he interface to have enough control over theconversation to ensure that this limited type of prob-lem solving will suffice.
In other domains, or if theuser were expected to take a more active part in prob-lem solving, a general problem-solving C-MOP wouldbe needed.
A problem-solving C-MOP would be moredifficult to inatantinte from a procedure than the LIST-or NARRATIVE-CMOP.
The interface would have to doa great deal of domain planning to make predictionsabout topics that would be included in the dialogue.Some of this effort could be saved by creating only ab-stract templates and allowing the reasoning followedby the problem solvers to link requests to the template.Finding a procedure to create problem-solving C-MOPswithout re-creating all of the reasoning needed to solvethe problem is an important area of future research.I I I  ADDING A RI~QUEST TO TH R TEMPLATgAt the beginning of a meal-planning session, 3UDISretrieves n C-MOP that is instantiated to become thetemplate.
This guides the conversation from beginningto end.
The opening and dosing follow well-establishedsequences, o we are only concerned here with the mid-dle portion of the dialogue where the meal will be dis-cussed.
One of the specializations of the CATgRgR-CMOP will be included to predict the middle of theconversation.
The template for the example dialogueincludes the MAIN-F IRST-CMOP.
Requests from theproblem solvers are organized into a coherent dialogueby adding them to the template.
A new request isadded to the template by becoming a scene in a pre-dicted C-MOP.
JUDIS first checks to see if the newrequest matches a request already in the template.
Ifnot, the new request is added by merging it into aDISCUSSloN-CMOP already in the template.A Finding Potential TopicsThe first step of adding a new request o a DISGUS$ION-CMOP is finding a C-MOP where the request can beadded.
A request can be added to a diectmaion whentheir ,ubjeetl match, when the subject of the refttestis an attribute or value of the subject in the template,or when the new request is associated Ioith the sameknowledge structure as the request in the template.
In-stead of searching semantic memory to find the po~i-ble connections between requests \[cf.
I 4\], JUDIS usesknowledge from the reasoners' problem solving.
Theproblem solvers send the interface two pieces of infor-mation with each request.
The chain of reasoning fromthe meal being planned to the attributes that the prob-lem solver wan considering when this goal was createdis used to find the subject of the request.
If a valueappears at the end of the path it is the subject.
Oth-erwise the request asks for a value for the attribute.
Inthis cane, the attribute will be the subject for the pur-pose of adding the request o the template.
The chainof reasoning also allows a request o be linked with anyattribute on the chain.
The problem solvers also sendinformation about the knowledge structure that was be-ing examined when the goal was created.
If the requestis associated with a frame, a slot can also be sent.
If therequest is associated with an episode, the episode andany episodes that contain it, if the problem solver hasexamined them in association with thin request, are sentto the interface.
For example, when a reasoner sendsa goal to find out if guacnmole would be appropriatefor the appetiser, it also sends guacamole0 ,  the framerepresenting guacamole in semantic memory, and (mealappetizer main-dich) an the chain of reasoning.
4We use information from the problem solvers for tworeasons.
Most importantly, this assures that the con-section between the utterances will be acceptable in thecontext of the current conversation.
Also, thin informa-tion reduces JUDIS' processing effort and can be easilycollected as the problem solvers perform the domaintask.
Using it, JUDIS  can simply match informationfrom the problem solvers instead of searching the se-mantic memory  for all possible connections.To rely on information from problem solving, thatinformation must be Ucognitively plausible" in somesense.
Information from the same data structures must4 Guaceanole is placed in the represent Jt lon of the meal as soonas it is cot~sidered by a problem solver and would be the subjectof this requeat.AcrEs DE COLING-92, NANTES, 23-28 ^o~t' 1992 3 4 1 PROC.
O~: COLING-92, N^NrEs, AO(;.
23-28, 1992appear to human users to be linked.
Chains of rea-soning followed by the problem solvers must appear tobe coherent.
If this is not the case for problem solversused by an interface, it must rely on other knowledgestructures to provide it with acceptable links betweentopics.
Also, if the problem solvers do not share seman-tic memory, there must be a way to match knowledgestructures that should be considered the same.B Merging Requests into DiJcussiontAll requests can he merged into the template for conver-sation at some level.
If no predicted topic could includethe request, it can be added to the maintenance phasewhere it will be handled as a true interruption \[5\].
Ifa topic which could have included this request has al-ready been dosed, the change-topic s ene will mark thereturn to a previous topic \[15\].
Utterance 14 in Fig-ure 1 is an example of JUDIS returning to a previoustopic.If problem solver goals on the same subject arriveat the interface sufficiently near each other, they willbe grouped together in the template.
If not, the topicwill be closed before all of the requests that should beassociated with it have arrived.
JUDIS can return tosuch topics, so, in the worse case, the conversation isno worse than conversation without the template.
Ifthere are not long delays between requests on the sametopic, most requests will be merged into the dialoguethrough a DISCUSSIOH-CMOP.JUDIS examines each DISCUSSlON-CMOP in thetemplate until it finds one that can be merged with thenew request.
It looks at the most specific subjects firstso that subjects that are most closely connected will bejoined.
New requests can be merged with DISCUSSION-CMOPs  in several ways:Rep lace  a d i scuss ion  scene that  has  no  re-quests  as scenes.
The simplest form of a DISCUSSION-CMOP is an UTTERANCE or  QUESTION/ANSWER-CMOP.
These are the forms of a request.
If noother requests have been associated with a subject, thediscussion-CMOP can be replaced by the new request.Extend  the reasoning to add  a new topic.Sometimes the subject of a new request is a very specificaspect of an expected topic.
If the request were sim-ply added, the connection between it and the expectedtopic could be lost.
This would cause the dialogue toappear incoherent.
It is also difficult for JUDIS  to addother requests to a topic which has been filled by atoo-specific subject.We avoid these problems by adding C-MOPs  to thetemplate that extend a discussion from a general sub-ject to a more specific one.
We have added a ATTR-VAL-CMOP that links the predicted topic to the morespecific request.
Each attribute in the chain of rea-soning and its value are added to the discussion.
Fig-ure 2a shows a request concerning Uavocado" beingadded to the template by this method.
Because it isconnected to the appetiser TOPIC-CMOP through spe-cific attributes, another equest, 9, can be easily addedthrough the "presentation" attribute.
If a specific at-tribute will be mentioned, the attributes which connectit to the topic can be mentioned first.Connect  scenes through knowledge s t ruc -tu res .
Two requests can also be connected becausethey are part of the same knowledge structure.
If bothare values in the aarne slot of a frame or are values ofthe same attribute of the meal being plannedj a LIST-CMOP is used to connect them.
If both are scenesin the same episode, a NARRATIVE-CMOP connectsthem.
Here the requests do not have to have the samesubject, but are linked to a discussion through one of itsscenes.
When the type of connection is found, JUDISsearches memory to find the best C-MOP to instan-tiate.
This is done to make sure that any speciailsa-tions appropriate for the current situation are found.For example, the LIsT-CMOP is specialised to have amain-first ordering when ingredients are connected.IV" EXECUTING THE TEMPLATEIn conversation new problem solving goals arise as theconversation is being conducted.
It is impossible toknow all of the goals in advance and then arrange theminto the best conversation.
Instead, the template mustbe built and executed simulatneously.
This means thatthe template must reflect a coherent conversation at alltimes.
JUDIS  achieves this because each goal is addedto the template through C-MOPs.The template is only used an a guide to organise con-versation.
When JUDIS  is to take its turn in conver-sation, it combines information about the priorities ofthe requests and how those requests lit into the tem-plate to choose its next utterance (see \[15\] for details).Sometimes the priorities help determine decisions thatare not specified by the template, such ms chosing thescene to execute first in a partially ordered C-MOP.Other times a goal is so urgent that the template isoverridden.V ORGANIZING A D IALOGUE WITH JUDIS:  ANEXAMPLEConsider utterances 10a-10d in the example dialogue.As the arrows indicate, the goals which motivated theserequests are rc~organised to make the dialogue coher-ent.
When the initial template in built, JUDIS  pre-dicts that the GENERAL-INFO I MAIN-COURSE l APP I~-TIZER and DZSSZRT topics will be included in the dia-logue.
At this point, JUDIS  knows only that the ap-petiser will be discussed but knows none of the details.Then a request to tell the user about a possible fail-ure with avocados comes from the case-based reasoner.Since the subject of the request is not the appetiserbut one of the ingredients of the appetiser, a path isACTES DE COLING.92, NANTES, 23-28 AoLrr 1992 3 4 2 PROC.
OF COLING-92, NAIXrFES, AUG. 23-28, 1992Figure 2: Adding requests to the temlpate.formed of values and their attributes from the appe-tizer " roP Ic -CMOP to the avocados, as shown in Fig-ure 2a.
Next, the from-scratch reasoner discovers thatred onions can make guacamole sweeter and decides tosend a goal to $UDIS to inform the user.
The subjectof this reques L "onion", is also an ingredient in gua-camole.
When JUDIS tries to insert the request as avalue of the ingredient attribute, it must find a struc-ture that will incorporate both the avocado-request, al-ready associated with the ingredients, and the onion-request which is to be added.
JUDIS relies on the infor-mation about how the two requests are connected, thatthey are both values of the same slot of a frame, to be-gin its search of memory  for a C -MOP that can containboth requests.
It finds the L IST -CMOP for ingredientsand adds a list of all of the ingredients of guacamoleto the template (see Figure 2b).
The onion and avo~cado request become the discussions of the onion andavocado ToP Ic -CMOPs  that are scenes of the new list.Next, the request about enchiladas comes from thecase-based reasoner.
Because this request is associatedwith the same episode as the avocado request, 3UDISmakes these requests into a narrative (see Figure 2c).This narrative contains not only the goal-achieving re-quests (last part of utterance 10a and utterance 10b),but also the mandatory setting (first half of utterance10a) and conclusion scenes (utterance 10c).The organisation given by the template and the pri-orities of the requests determine how this portion of thetemplate will be executed.
Though not requested by aproblem solver, utterance 8 is included in the dialogueto link the ingredients to the expected appetiser topic.The narrative containing the avocado and enchilada re-quest has a higher goal priority than the onion request,so it is said first.
After the narrative, the onion requestis executed to finish the list.VI D iscuss ionJUDIS is an implemented system which embodies ourapproach for merging goals into an existing conver-sational structure.
JUDIS relies on its knowledge ofconventional discourse structure as a tool for achievingthe goals of the system.
JUDIS' selection of discoursestructures to guide the conversation and options takenwithin those structures are motivated by the goals ofthe system.
This in in contrast o McKeown's TEXTsystem \[10\] which relies on heuristics based on featuresof the lmxguage to select options to pursue within a dis-course structure.
JUDIS is able to re-organise its goalsto fit into the global organisation of the conversationbecause it relies on predictions and commitments forthe whole conversation, an represented in the template.Other methods of generating language from discoursestructure \[e.g., 10; 12\] do not use expectations aboutthe dialogue but rely only on information about thecurrent state of the world and the structure of the dis-course to this point.One of the most important advantages of our ap-proach is that it allows an incoherent stream of goalsto be organised to produce a coherent dialogue.
Theremay be cases where ma occasional utterance still mustbe marked with a clue word, but s by forcing the goalsto hc moderated by the template, we give them a deepstructure that provides coherence just as the underlyingprocessing in humans upports their dialogueg' conven-tional structure.
Our approach also has two importantadvantages that are side-effects of using the templateto guide the generation of conversation:The  d ia logue  addresses  the  needs  of  the  proh-lena solvers.
JUDIS' dialogue is motivated by thecommunication goals that it is sent from the problemsolvers.
The requests which achieve these goals dic-tate the details of the template.
Only requests and themandatory scenes of the C-MOPs  that connect themare included in the dialogue.
This assures that the con-versation will be coherent without including optionalscenes of a schema that are chosen by language-basedheuristics which may have little to do with the currentdomain task \[cf, 10\].Utterances which  fol low convent ion  are  in-c luded in the  d ia logue  w i thout  be ing  mot ivatedby  an  expl ic i t  goal .
When mandatory scenes areneeded to connect wo requests in a coherent dialoguethey are included when a new request is merged intothe tamp|ate.
For example, when two requests are con-nected by a narrative, the setting, conclusion and en-abling scenes are added to the template when the narra-tive is created.
In speech act based approaches \[e.g., 1;5; 8\], such conventional utterances would be motivatedby a speaker's intention.
By including these utterancesas part of the discourse structure which will achievethe problem solving goals, JUDIS avoids the cost ofgenerating discourse goals and trying to achieve them,Acids DE COLING-92, NANTES.
23-28 AOI~q' 1992 3 4 3 Paoc.
OF COLING-92.
NANTES, AUG. 23-28, 1992and it can easily distinguish between utterances thatare motivated by goals and those that are mandatedby convention.The technique for organisation described above wasused successfully to organise the dialogue shown in theexample and several others from similar goals.
JUDISwas also able to interrupt he organization prescribedby the template to handle urgent goals and was able toadd requests to the dialogue that did not correspond totopics that were given by the caterer's-CMOP.The success of JUDIS depends, in part, on severalcharacteristics of the problem solving domain and thereasoners.
Most importantly, JUDIS is an interface toan advisory system.
Although JUDIS was designedto allow the user to take more initiative than is of-ten expected in natural anguage interfaces \[15; 16\],JUDIS' method of organising dialogue is most success-ful if JUDIS controls the conversation to a large extent.To allow more user involvemen L more C-MOPs wouldbe needed so that JUDIS could build a template forany organization known to the user.
JUDIS would alsoneed to handle failure of the template - to identify fail-ure and recover when the template no longer predictsthe conversation.
This is an important area for futureresearch.Another assumption i our implementation f JUDISis that the problem solvers will use problem solvingstrategies and knowledge structures which correspondto those used by humans.
Although the combinedstream of goals from the problem solvers may not beorganized in a way that would seem coherent o peo-ple, JUDIS can rely on information from the problemsolvers to help it build the connections that lead to acoherent conversation.
We feel that the method of or-ganization described here could also benefit individualproblem solvers that do not produce a coherent streamof communication goals and problem solvers that do nothave such well-organised knowledge.
In these cases, theinterface must keep a separate knowledge base or relyon declaratively represented C-MOPs.
This also meansthat we would loose the advantages of using problemsolving information as a basis for organizing the dia-logue.JUDIS is also helped because very few of its goals areurgent.
In a system that very often needs to get addi-tional information from the user in order to continue,it may be difficult to make full use of the template.
Itwould be overridden often or it would delay problemsolving.JUDIS has begun to address the problem of organiz-ing dialogue so that even conversation motivated by anincoherent stream of goals can be easy to understand.Most important o our method is the ability to formpartial predictions about the dialogue that can be ex-panded as goals arrive from the problem solver.
In thisway, 3UDIS can group utterances together to form acoherent whole.REFERENCESi\] Sandra Mary Carberry.
Pragmatic modeling innformation system interfaces.
Technical Report86-07, Department of Computer Science, Univer-sity of Delaware, 1988.
Ph.D. thesis.\[2\] Richard E. Cullingford.
Natural LanguageProcessing: A Knowledge Engineering Approach.Rowan and Littlefield, To,own, New Jersey, 1986.\[3\] Richard E. Cullingford and Janet L. Kolod-her.
Interactive advice giving.
In Proeesdinys ofthe 1986 IBBE International Conference on Sys-tenw, Man and Cybernetics, pages 709-714, At-lanta, Georgia, 1986.\[4\] Barbara J.
Gross.
The representation a d roseof focus in a system for understanding dialogs.
InProceedings of the Fifth International Conferenceon Arti\]icial Intelligence, pages 67-76, Los Altos,California, 1977.
Will iam Kanfmann, Inc.\[5\] Barbara J.
Gross and Candace L. Sidner.
At-tention, intention, and the structure of discourse.Computational Linguistics, 12(3):175-204, 1986.~\] Kathy Kellermann, Scott Broetsmann, Tae-sop Lira, and Kenji Kitao.
The conversationMOP: Scenes in the stream of discourse.
DiscourseProee#scs~ 12(1):27-61, 1989.\[7\] J.L.
Kolodner.
Retrieral and OrganizationalStrategies in Conceptual Memory.
Lawrence Erl-bantu Associates, Publishers, Hillsdale, New Jer-sey~ 1984.\[8\] Diane J. Litman and James F. Allen.
A planrecognition model for subdialogues in conversa-tion.
Cognitive Science, 11:163-200, 1987.\[9\] Will iam C. Mann.
Discourse structures fortext generation.
In Proceedings of the Tenth In-ternational Conference on Computational Linguis-tics, pages 367-375, 1984.\[10\] Kathleen R. McKeown.
Tezt Generation: Us-ing Discourse Strategies and Focus Con4traintm toGenerate Natural Languauge Tezt.
CambridgeUniversity Press, New York, 1985.\[11\] L. Polanyi and R. Scha.
A syntactic approachto discourse semantics.
In Proceedings of the TenthInternational Conference on Computational Lin-guiztics, pages 413-419, 1984.\[12\] Rachel Reichman.
Getting Compatera to TalkLike You and Me: Discourse Contezt, Focus, andSemantics (An A TN Model).
The MIT Pre~,Cambridge, Mass, 1985.\[13\] David E. Rumelhart.
Notes on a schema forstories.
In Daniel G. Bobrow and Allan Collins,editors, Representation and Understanding.
Aca-demic Press, New York, 1975.\[14\] R.C.
Schank.
Dynamic Memory.
CambridgeUniversity Press, New York, 1982.\[15\] Elias H. Turner.
Integrating intention andconvention to organise problem solving dialogues.Technical Report GIT-ICS-9O/02, School of Infor-mation and Computer Science, Georgia Instituteof Technology, 1990.
Ph.D. thesis.\[16\] Elise H. Turner and Richard E. Cultingford.Using conversation MOPs in natural anguage in-terfaces.
Discourse Processes, 12(1):63-90, 1989.ACRES DE COLING-92, NANTES, 23-28 AOUT 1992 3 4 4 PROC.
Or COLING-92, NhrcrEs, AUG. 23-28, 1992
