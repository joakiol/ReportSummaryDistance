Proceedings of COLING 2014, the 25th International Conference on Computational Linguistics: System Demonstrations,pages 90?94, Dublin, Ireland, August 23-29 2014.RDF Triple Stores and a Custom SPARQL Front-End forIndexing and Searching (Very) Large Semantic NetworksMilen Kouylekov?and Stephan Oepen??
?University of Oslo, Department of Informatics?Potsdam University, Department of Linguistics{milen |oe}@ifi.uio.noAbstractWith growing interest in the creation and search of linguistic annotations that form general graphs(in contrast to formally simpler, rooted trees), there also is an increased need for infrastructuresthat support the exploration of such representations, for example logical-form meaning represen-tations or semantic dependency graphs.
In this work, we lean heavily on semantic technologiesand in particular the data model of the Resource Description Framework (RDF) to represent,store, and efficiently query very large collections of text annotated with graph-structured repre-sentations of sentence meaning.
Our full infrastructure is available under open-source licensing,and through this system demonstration we hope to receive feedback on the general approach,explore its application to additional types of meaning representation, and attract new users andpossibly co-developers.1 Motivation: The ProblemMuch work in the creation and use of language resources has focused on tree-shaped data structures,1as are commonly used for the encoding of, for example, syntactic or discourse annotations.
Conversely,there has been less focus on supporting general graphs until recently, but there is growing interest ingraph-structured representations, for example to annotate and process natural language semantics.
Inthis work, we demonstrate how semantic technologies, and in particular the data model of the ResourceDescription Framework (RDF) can be put to use for efficient indexing and search in (very) large-scalecollections of semantic graphs.We develop a mapping to RDF graphs for a variety of semantic representations, ranging from un-derspecified logical-form meaning representations to ?pure?
bi-lexical semantic dependency graphs, asexemplified in Figures 1 and 2 below, respectively.
Against this uniform data model, we populate off-the-shelf RDF triple stores with semantic networks comprising between tens of thousands and tens ofmillions of analyzed sentences.
To lower the technological barrier to exploration of our triple stores, weimplement a compact ?designer?
query language for semantic graphs through on-the-fly expansion intoSPARQL.
In sum, the combination of standard RDF technologies and specialized query and visualizationinterfaces yields a versatile and highly scalable infrastructure for search (and in principle limited formsof reasoning) over diverse types of graph-structured representations of sentence meaning.In our view, there is little scientific innovation in this work, but our approach rather demonstrates sub-stantial design and engineering creativity.
Our semantic search infrastructure is built from the combina-tion of industrial-grade standard technologies (Apache Jena, Lucene, and Tomcat) with an open-sourceapplication for, among others, format conversion, query processing, and visualization implemented inJava.
Thus, the complete tool chain is available freely and across platforms.
Its application to additionaltypes of meaning representation (and possibly other graph-structured layers of linguistic analysis) shouldbe relatively straightforward, and we thus believe that our infrastructure can be of immediate value toboth providers and consumers of large-scale linguistic annotations that transcend tree structures.This work is licenced under a Creative Commons Attribution 4.0 International License; page numbers and the proceedingsfooter are added by the organizers.
http://creativecommons.org/licenses/by/4.0/1Formally, trees are a restricted form of graphs, where every node is reachable from a distinguished root node by exactlyone directed path.90?
h1,h4:_a_q(x6, h7, h5), h8:_similar_a_to(e9, x6), h8:comp(e11, e9, ), h8:_technique_n_1(x6),h2:_almost_a_1(e12, h13), h14:_impossible_a_for(e3, h15, i16),h17:_apply_v_to(e18, i19, x6, x20), h21:udef_q(x20, h22, h23), h24:_other_a_1(e25, x20), h24:_crop_n_1(x20),h24:_such+as_p(e26, x20, x27), h40:implicit_conj(x27, x33, x38),h31:udef_q(x33, h32, h34), h35:_cotton_n_1(x33), h46:_and_c(x38, x43, x47),h41:udef_q(x43, h42, h44), h45:_soybean_u_unknown(x43), h48:udef_q(x47, h49, h50), h51:_rice_n_1(x47){ h49=qh51, h42=qh45, h32=qh35, h22=qh24, h15=qh17, h13=qh14, h7=qh8, h1=qh2} ?Figure 1: Example logical form meaning representation (MRS; taken from DeepBank).2 Technology: Core ComponentsOur system architecture comprises two core components, viz.
(a) the RDF repository, a database storingsemantic networks in RDF triple form, and (b) the Web application, an interface for interactive searchand visualization over the RDF repository.Representing Semantic Graphs in RDF The RDF data model is based on statements about resourcesin the form of subject?predicate?object triples.
The subject denotes the resource, and the predicatedenotes traits or aspects of the resource, thus expressing a relationship between the subject and theobject.
A database that can store such expression and evaluate queries to them is called a triple store.In Kouylekov and Oepen (2014), we describe the conversion of different types of semantic struc-tures into RDF graphs.
To date, we have addressed three types of meaning representations, viz.
(in de-creasing complexity) (a) scope-underspecified logical formulas in Minimal Recursion Semantics (MRS;Copestake et al., 2005); (b) variable-free Elementary Dependency Structures (EDS; Oepen and L?nning,2006); and (c) bi-lexical dependency graphs as used in Task 8 at SemEval 2014 on Broad-CoverageSemantic Dependency Parsing (SDP; Oepen et al., 2014; Ivanova et al., 2012).
For all three formats, wedraw on (a) gold-standard annotations from DeepBank (Flickinger et al., 2012), a re-annotation of thevenerable Penn Treebank WSJ Corpus (Marcus et al., 1993); and on (b) much larger collections of auto-matically generated analyses over the full English Wikipedia from the WikiWoods Treecache (Flickingeret al., 2010).To store MRS, EDS, and SDP structures, we created small ontologies for each type of representation,building on a common core of shared ontology elements.
In a nutshell, the EDS and SDP ontologiesprovide a generic representation of directed graphs with (potentially complex) node and edge labels;the dependencies proper, i.e.
labeled arcs of the graph, are encoded as RDF object properties.
TheMRS ontology, on the other hand, distinguishes different types of nodes, corresponding to full predica-tions vs. individual logical variables vs. hierarchically organized sub-properties of variables.
Mappingthe (medium-complexity) EDS graphs from DeepBank and WikiWoods onto RDF, for example, yieldsaround 12 million and 4.3 billion triples, respectively (for the semantic dependencies of about 37 thou-sand and 48 million sentences in the two resources).Web Application The core of our Web application is a search engine that executes SPARQL queriesagainst the RDF repository.
SPARQL is an RDF query language to search triple stores, allowing one toretrieve and manipulate RDF data.
It is fully standardized and considered one of the key technologiesof the Semantic Web.
A SPARQL query can consist of triple patterns, conjunctions, disjunctions, andoptional filters and functions.
The query processor searches for sets of triples that match the patternsexpressed in the query, binding variables in the query to the corresponding parts of each triple.A similar technique is almost impossible to apply to other crops, such as cotton, soybeans and rice.topARG2ARG3 ARG1ARG2 _and_cARG1 mweARG1BVARG1 conjARG1Figure 2: Example bi-lexical semantic dependencies (SDP; taken from DeepBank).91PREFIX sdp:<http://wesearch.delph-in.net/rdf/sdp#>PREFIX dm:<http://wesearch.delph-in.net/rdf/sdp/dm#>select ?graphwhere {GRAPH ?graph {?101 sdp:form "quarterly"^^xsd:string .
?x dm:lemma "result"^^xsd:string .
{?100 dm:pos "vbp"^^xsd:stringUNION ?100 dm:pos "vbg"^^xsd:stringUNION ...}?101 dm:arg1 ?x .
{?100 dm:arg1 ?x UNION ?100 dm:arg2 ?xUNION ?100 dm:arg3 ?x UNION ?100 dm:arg4}FILTER((!bound(?101) || !bound(?100) || ?101 != ?100)&& (!bound(?101) || !bound(?x) || ?101 != ?x)&& (!bound(?100) || !bound(?x) || ?100 != ?x))}}GROUP BY ?graphORDER BY ?graphFigure 3: Core of the auto-generated SPARQL query corresponding to our running example.Our infrastructure supports the definition of families of ?meta?
query languages, to address semanticstructures in a form that is more compact and much better adapted to the specific target format thanSPARQL.
An example of such a ?designer?
language is the WeSearch Query Language (WQL), whichwas used in the context of the SemEval 2014 SDP task.2By way of informal introduction, consider thefollowing example query:(1) /v*[ARG*x]quarterly[ARG1 x]x:+resultThis example is comprised of three predications, one per line.
The following characters have operatorstatus: ?/?
(slash), ?*?
(asterisk), ?[?
and ?]?
(left and right square bracket), ?:?
(colon), and ?+?
(plussign).
This is a near-complete list of operator characters in WQL.
Each predication can be composed of(i) an identifier, followed by a colon if present; (ii) a form pattern; (iii) a lemma pattern, prefixed by aplus sign, if present; (iv) a part-of-speech (PoS) pattern, prefixed by a slash, if present; and (v) a list ofarguments, enclosed in square brackets, if present.
Patterns can make use of Lucene-style wildcards, withthe asterisk matching any number of characters, and a question mark (???)
to match a single character.Thus, our example query searches for a verbal predicate (any PoS tag starting with ?v?
), that takesany form of the lemma ?result?
as its argument (in the range ARG1.
.
.
ARGn), where this argument isfurther required to be the ARG1of a node labeled ?quaterly?.The auto-generated SPARQL expression that corresponds to this example query is shown in Figure3.
The query generator replaces the wildcarded PoS pattern by the union of all matching tags (that startwith ?v?, e.g.
?
?100 dm:pos "vbp" UNION ...?
Likewise, the underspecified argument relationof this predication is replaced by the union of all possible argument types.
Finally, the query processorensures a one-to-one correspondence between query elements and matching graph elements, i.e.
multipledistinct query components cannot match against the same target (graph component), or vice versa.
Thisis accomplished in SPARQL through the filter expressions towards the end of the generated query.2See http://wesearch.delph-in.net/sdp/ for an on-line demonstration and additional documentation.92Figure 4: Screenshot of the interactive search interface, querying (semantic) object control structures.Figure 4 shows a screenshot from the SemEval SDP user interface, demonstrating how WQL facilitatesconcise (and reasonably transparent) search for semantic ?object?
control, i.e.
a configuration involvingtwo predicates sharing an argument in a specific assignment of roles.Within the capabilities of the SPARQL back-end, different dialects of the meta query language can beimplemented in a modular fashion, for example distinguishing different types of nodes and introducingadditional node properties, as in the more complex MRS universe.
Our query front-end transforms ?meta?queries into equivalent SPARQL expressions, and the search interface allows users to inspect the resultof this transformation (and matching results), to possibly refine the search incrementally either at the?meta?
query layer or directly in SPARQL.3 Demonstration: Indexing and SearchOur proposed interactive demonstration will seek to highlight (a) the flexibility of our infrastructure, i.e.walk through a series of queries of increasing complexity against different target formats; (b) its scala-bility, by comparing response times for different types of queries and different target formats over thelarge DeepBank and the vast WikiWoods indexes; and (c) the ease of ?behind the scenes?
functionality,showing how additional semantic annotations in various formats can be ingested into the index.
As partof this latter aspect of the demonstration, we will optionally discuss how we apply string-level index-ing (in Apache Lucene) and basic frequency statistics in query interpretation and optimization, whichjointly with parallelization over ?striped?
RDF triple stores can yield greatly reduced response times forcommon types of queries to the WikiWoods index.
We envision that parts of the demonstration can beorganized in an audience-driven manner, for example taking as input the (possibly informal) charac-terization of a semantic configuration, collectively transforming it into a query against our DeepBankor WikiWoods stores, observing linguistic or technical properties of matching results, and refining thesearch incrementally.Our software infrastructure is entirely open-source and (increasingly) modularized and parameterizedto facilitate adaptation to additional types of annotation.
Please see the project web page for licensingand access information, as well as for pointers to a variety of existing on-line demonstrations:http://wesearch.delph-in.net/93ReferencesCopestake, A., Flickinger, D., Pollard, C., and Sag, I.
A.
(2005).
Minimal Recursion Semantics.
Anintroduction.
Research on Language and Computation, 3(4), 281 ?
332.Flickinger, D., Oepen, S., and Ytrest?l, G. (2010).
WikiWoods.
Syntacto-semantic annotation for En-glish Wikipedia.
In Proceedings of the 7th International Conference on Language Resources andEvaluation.
Valletta, Malta.Flickinger, D., Zhang, Y., and Kordoni, V. (2012).
DeepBank.
A dynamically annotated treebank of theWall Street Journal.
In Proceedings of the 11th International Workshop on Treebanks and LinguisticTheories (p. 85 ?
96).
Lisbon, Portugal: Edi?
?es Colibri.Ivanova, A., Oepen, S., ?vrelid, L., and Flickinger, D. (2012).
Who did what to whom?
A contrastivestudy of syntacto-semantic dependencies.
In Proceedings of the Sixth Linguistic Annotation Workshop(p. 2 ?
11).
Jeju, Republic of Korea.Kouylekov, M., and Oepen, S. (2014).
Semantic technologies for querying linguistic annotations.
Anexperiment focusing on graph-structured data.
In Proceedings of the 9th International Conference onLanguage Resources and Evaluation.
Reykjavik, Iceland.Marcus, M., Santorini, B., and Marcinkiewicz, M. A.
(1993).
Building a large annotated corpora ofEnglish: The Penn Treebank.
Computational Linguistics, 19, 313 ?
330.Oepen, S., Kuhlmann, M., Miyao, Y., Zeman, D., Flickinger, D., Haji?c, J., .
.
.
Zhang, Y.
(2014).
SemEval2014 Task 8.
Broad-coverage semantic dependency parsing.
In Proceedings of the 8th InternationalWorkshop on Semantic Evaluation.
Dublin, Ireland.Oepen, S., and L?nning, J. T. (2006).
Discriminant-based MRS banking.
In Proceedings of the 5thInternational Conference on Language Resources and Evaluation (p. 1250 ?
1255).
Genoa, Italy.94
