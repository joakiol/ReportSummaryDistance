TEMPLATE DESIGN FOR INFORMATION EXTRACTIONBoyan OnyshkevychUS Depar tment  o f  DefenseFt.
Meade,  MD 20755emaih baonysh@afterl ife .ncsc .mil1.
ABSTRACTThe design of the template for an information extraction applica-tion (or exercise) mfieets the nature of the task and therefore cru-cially affects the success of the attempt to capture informationfrom text.
This paper addresses the template design requirementby discussing the general principles or desiderata of templatedesign, object-oriented vs.fiat template design, and template deft-nition notation, all reflecting the results and lessons learned in theTIPSTER/MUC-5 template definition effort which is explicitlydiscussed ina Case Study in the last section of this paper.2.
GENERAL CONSIDERATIONSThe design of the template needs to balance anumberof (often conflicting) goals, as reflected by these desiderata,which apply primarily to object-oriented templates (seebelow), but also have applicability to fiat-structure t m-plates as well.
Some of these desiderata reflect well-known,good data-base design practices, whereas others are partic-ular to Information Extraction.
Some of these desiderata arefurther illusl~ated in the Case Study section below.?
DESCRIPTIVE ADEQUACY - the requirementfor a template to represent all of the informationnecessary for the task or application at hand.
Attimes the inclusion of one type of informationrequires the inclusion of other, supporting, infor-mation (for example, measurements require speci-fication of units, and temporally dynamic relationsrequire temporal parametrization).?
CLARITY - the ability to represent informationin the template unambiguously, and for that infor-mation to be manipulable by computer applica-tions without further inference.
Depending on theapplication, any ambiguity in the text may resultin either representation f that ambiguity in thetemplate, or representation f default (or inferred)values, or omission of that ambiguous informationaltogether.?
DETERMINACY - the requirement that therebe only one way of representing a given item orcomplex of information within the template.
Sig-aificant difficulties may arise in the informationextraction application if the same interpretation fa text can legally produce differing structures.?
PERSPICUITY - the degree to which the designis conceptually clear to the human analysts whowill input or edit information in the template orwork with the results; this desideratum becomesslightly less important if more sophisticatedhuman-machine interfaces are utilized, or if ahuman is not "in the loop".
Using object typeswhich reflect conceptual objects (or Platonic ide-als) that are familiar to the analysts facilitatesunderstanding of those objects, thus the template.?
MONOTONIC1TY -a requirement that the tem-plate design monotonically (or incrementally)reflects the data content.
Given an instantiatedtemplate, the addition of an item of informationshould only result in the addition of new objectinstantiations or new fills in existing objects, butshould not result in the removal or restructuring ofexisting objects or slot fills.?
APPLICATION CONSIDERATIONS - the par-ticular task or application may impose structuralor semantic onstraints on the template design; forexample, a requirement for use of a particularevaluation methodology or system for evaluationmay impose practical limits on embeddedness andlinking.One other consideration comes into play when thereis a current or potential requirement for multiple templatedesigns in similar or disparate domains.?
REUSABILITY - elements (objects) of a tem-plate are potentially reusable in other domains;eventually a library of such objects can be builtup, facilitating template building for new domainsor requirements.1413.
OB JECT-ORIENTED TEMPLATEDES IGNThe MUC3 and MUC4 terrorist domain templateswere "flat" data structures with 24 slots; this led to consid-erable awkwardness in representing the relationshipsbetween data items in different slots.
For example, in orderto correlate the name of a terrorist target with the national-ity of that target, a "cross-reference" notation had to beintroduced.
Additionally, large portions of the templatewould remain blank if there were no discussion of that typeof information (e.g., if there were no human targets dis-cussed at all).In response to these difficulties, and in response toincreased movement towards object-oriented data bases inGovernment and commercial applications, the templatedesign for the T1PSTER/MUC5 task is object-oriented.
Inother words, instead of using one template to capture all therelevant information, there are multiple sub-template ypes(object ypes), each representing related information, aswell as the relationships toother objects.
A completed tem-plate is a set of filled-in objects of different ypes, repre-senting the relevant information in a particular document.Each object hus captures information about one thing (e.g.,a company, a person, or a product), one event, or an interre-lationship between things, between events, or betweenthings and events.
A filled-in template for a particular docu-ment may, therefore, have zero, one, or many object instan-tiations of a given type.
A completed template will typicallyhave multiple objects of various types, interconnected bypointers from object to associated object.
If there is noinformation in the document to fill in a given object, thatobject is not incorporated into the completed template.
If adocument is not relevant o the domain, no objects areinstantiated beyond the "header" object which holds thedocument number, date of analysis, etc.For example, both MUC5/TIPSTER domains had anobject type ENTITY, which captured information aboutcompanies, organizations, or governments.
Each companyparticipating in a joint venture (in the JV domain) would berepresented bya separate ENTITY object, with informationabout he NAME of the company (or government ororgani-zation), any ALIASES that are used to refer to it in the text,its TYPE (specifically COMPAN~ GOVERNMENT, orORGANIZATION), its LOCATION, its NATIONALITY(e.g., Honda USA Inc. is a Japanese company located in theUS), pointers to objects representing PERSONS andFACILITYs associated with that company, as well aspointers to objects representing joint venture or parent-child relationships in which the company participates.Although the task in MUC-5 and TIPSTER was tobuild a separate template for each document, he use of thisobject-oriented approach, and leveraging the current boomof object-oriented data bases and analysis tools, will facili-tate the migration of this technology to a data base-buildingeffort.4.
CASE STUDY:  T IPSTER/MUC5The template definition process in the TIPSTER/MUC-5 exercise consisted of a lengthy process of reconcili-ation of multiple, often contradictory, goals.
In addition tothe desiderata mentioned above (or an earlier, less well-understood version of that fist), the templates needed to sat-isfy the programmatic goals of TIPSTER and the represen-tativeness requirements of the participating overnmentAgencies.
The TIPSTER program was chartered to push thestate of the art in Information Extraction in order to reach abreakthrough which would allow the wide-spread transferof this technology to operational use; additionally, TIP-STER intended to chart out the capabilities of the technol-ogy.To meet these goals, the tasks and templates weredesigned to (implicitly) cover a range of linguistic phenom-ena (e.g., coreference r solution, metonymy, implicature)and to (explicitly) require the full range of InformationExtraction techniques (e.g., string fills, normalization,small-set classification, large-set classification).
The taskhad to be structured in such a way that the management ofthe various funding Agencies would see that he technologyhad applicability to the type and size of tasks addressed bytheir Agency.
This set of goals resulted in a need to define aset of tasks which would be substantially more challengingand extensive than the tasks from previous MUCs or currentoperational systems.
Although still considered to be verysubstantial nd extensive, the final template design reflectsubstantial trimming and reduction of information contentfrom earlier versions, reflecting pragmatic programmaticconsiderations.In the TIPSTER/MUC-5 exercise, templates weredefined for two domains (see "Tasks, Domains, and Lan-guages for Information Extraction" in this volume).
Thetemplate isdefined in a BNF-llke formalism which specifiesthe syntax of the template (the formalism is defined inAppendix A below); the semantics are defined in the FillRules document that was developed for each language/domain pair (see "Corpora nd Data Preparation for Infor-marion Extraction" in this volume).The template that evolved over time didn't meet theMonotonicity desideratum in some cases.
Although the"data bases" being built in the TIPSTER/MUC5 tasks werenot dynamic over time, a small omission in a system tern-142plate (vs. the "key" or answer template)at times reflected aMonotonicity failure in that the small omission resulted inmajor differences in the templates.
For example, in the JointVentures domain, an ACTIVITY object could point to two(or more) INDUSTRY objects; however, if REVENUE (orSTART TIME or END TIME) information within thatACTIVITY were only applicable to one of the INDUS-TRYs, that one ACTIVITY object would be split into twoACTIVlTYs, each pointing to an individual INDUSTRY,along with any information specific to that ACTIVITY.Figure 1, for example illustrates how a (hypothetical) cor-~ ACTIVITY-1 )/,~ ACTIVITY-2 )Figurel: Example of a correct emplate structurerect template structure piece might appear (diagrammati-cally); note two ACTIV ITY  objects.
In Figure 2/ \In the TIPSTER/MUC-5 template for Joint Ventures,executives (and others) of the companies involved in the tieups were represented in objects called PERSON, which rep-resented the name and position of those individuals.Because the position information is not an intrinsic staticproperty of that individual but rather transitory relationalinformation (i.e., it reflects the nature of that individual'srelation to a given company), the template design causedproblems when the individual in question changed positions(often an executive of a parent company would become thepresident or director of a child company).
Thus the Descrip-tive Adequacy desideratum was violated, since the templatewas not able to represent the change in that relationshipsbetween the individual and the companies.
If we created anew object for a person for each position, we would violatethe Perspicuity desideratum (since a PERSON objectwouldn't represent a person per se, but a person in a panic-ular job).
Thus it would have preferable to either epresentthat relational information with the appropriate parameters(time and associated entity) or not at all.A Determinacy desideratum inadequacy becameapparent when it was noticed that he analysts who filled thetemplates had differing notions of how to represent multipleproducts in the JV domain.
If two products, say "dieseltrucks" and "four-door sedans" were to be manufactured asthe ACTIVITY of a tie up, some analysts would instantiateone INDUSTRY object, then have multiple fills for thePRODUCT/SERVICE.
Other analysts, however, wouldinstantiate wo INDUSTRY objects, put one product in each,then reference both INDUSTRYs from the same ACTIV-ITY.
Although this was clarified in the Fill Rules, the ana-lysts would occasionally err.
A preferable solution wouldhave been to allow only one PRODUCT~SERVICE perINDUSTRY, thus avoiding any possible Determinacy failureon this point (and ameliorating the Monotonicity failure dis-cussed above).Figure2: Same template without REVENUE(representing a template missing the REVENUE informa-tion) the omission of REVENUE information would not onlyresult in a missing REVENUE object, it would also result ina spurious INDUSTRY fill on the ACT IV ITY  object (aswell as an entire missing ACT IV ITY  object).
Within thescope of the evaluation conducted in TIPSTER/MUC-5,this difference would result in a scoring penalty far greaterthan for one object.1435.
APPENDIX A: NOTATION< .
.
.
> data object type (i.e., if indicated as a filler, any instantiation ofthat data object type is allowable).
Every new instantiation is named bythe type concatenated with: ' - I ,  the normalized document number, ' - I ,  anda one-up number for uniqueness.
The angle-brackets are retained in theinstantiation, as a type identifier/delimiter.what follows is the structure of the data objectwhat follows is a specification of the allowable fillers for this slotwhat follows is the set itemizationchoose one of the elements from the ... list.
Note that one of the ele-ments (typically "OTHER") may be a string fill where information whichdoes not fit any of the other classes is represented (as a string); thisset element would be identified by double quotes in the definition, anddelimited by double quotes in the fill.
( { .
.
. )
)  choose one element from the set named by ... (like {...) except that thelist is too long to fit on the line)#<... (...)#>these delimiters identify a hierarchical set fill item.
The first termafter #< is the head of the subtree being defined in this term, and isitself a legal set fill term.
What follows that term is a set of termswhich are also allowable set fill choices, but are more specific than thehead term.
The most specific term specified by the text needs to be cho-sen. For example, the term #<RAM (DRAM, SRAM)#> means that RAM, DRAM, andSRAM are all legal fills; if the text specifies DRAM, then choose D W ,but if the text specifies just RAM, then select RAM.
In scoring, specialconsideration will be given when an ancestor of a term is selected insteadof the required one (as opposed to scoring 0 as in the case of a flat setfill).
Note that items in the set (i.e., inside the { .
.
.
1 )  can them-selves be hierarchical item.
Note that one of the elements (typically"OTHER") may be a string fill where information which does not fit any ofthe other classes is represented (as a string); this set element would beidentified by double quotes in the definition, and delimited by doublequotes in the fill.one or more of the previous structure; newline character separatesmultiple structureszero or more of the previous structure; newline character separates multi-ple structures; if zero, leave blankzero or one of the previous structure, but if zero, use the symbol \'-"instead of leaving position blankexactly one of the previous structureI OR (refers to specification, not answers or instantiations)( .
.
. )
delimiters, no meaning (don't appear in instantiations) NB: DOES NOT MEAN'OPTIONAL'( ( .
.
.
I )  delimiters, doesn't appear in instantiation, but contents are OPTIONAL buteither all the contents appear, or none of them, in the case where thereare no connectors (e.g., 1 )  or operators (e.g., + or " )  within thesedelimiters: for example, with A ((B C ) )  D, only A D and A B C D are legal.If there is a connector inside these delimiters, then the either null orone of the forms are allowed fills: ( ( A  I C)) means that the legal fillsare 1) empty 2) A,  and 3 )  C. Note that these delimiters essentially meanthat the contents appear zero or one times.
Also nbte that "OPTIONALuhere means that the position are left blank if no info, not that scoringtreats these terms as optional.
