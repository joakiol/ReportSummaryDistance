Natural Language Access to Data Bases"Interpreting Update Requests 1James Davidson and S. Jerrold Kaplan 2Computer Science DepartmentStanford UniversityStanford, CA 94305For natural language data base systems to operate effectively in practical domains, theymust have the capabilities required by real applications.
One such capability is understand-ing and performing update requests.
The processing of natural language updates raisesproblems not encountered in the processing of queries.
These difficulties stem from thefact that the user will naturally phrase requests with respect to his conception of thedomain, which may be a considerable simplification of the actual underlying data basestructure.
Updates that are meaningful and unambiguous from the user's standpoint maynot translate into reasonable changes to the underlying data base.
Update requests may beimpossible (cannot be performed in any way), ambiguous (can be performed in severalways), or pathological (can be performed only in ways that cause undesirable side effects).Drawing on work in linguistics and philosophy of language, we have developed a domain-transparent approach to identifying and performing "reasonable" changes in response to auser's update request, using only knowledge sources typically present in existing data basesystems.
A simple notion of "user model" and explanation with respect to the user's stateof knowledge are central to the design.
This paper describes a prototype system PIQUE(Program for Interpretation f Query~Update in English), which implements this approach.1.
Introduct ionNatural language is a desirable access mechanism fordata base systems because it frees the user from thetask of understanding the details of the data basestructure.
A number of systems have provided naturallanguage query capabilities (for example, Hendrix etal.
1978); however, few of these allow the user toperform updates (changes) to the data base using nat-ural language.
(For an example of one that does allowsimple updates, see Henisz-Dostert  and Thompson1974.
)1 This work is part of the Knowledge Base Managementproject (DARPA contract #N00039-82-C-0250) ,  which is investi-gating the application of artificial intelligence techniques to issuesin the field of data base management.
The views and conclusionscontained in this document are those of the authors and should notbe interpreted as representative of the official policies, either ex-pressed or implied, of DARPA or the U.S. Government.2 Authors '  current address: Teknowledge Inc., 525 UniversityAvenue, Palo Alto, CA 94301The provision of update capabilities introduces prob-lems not seen in handling queries.
These problemsarise because the user is phrasing his requests withrespect to his view of the data base, which may be asimplification or transformation of the actual data basestructure.
While a wel l - formed query expressed interms of the user's view of the data base will alwaysresult in the same answer, regardless of how the querymay be mapped into the actual data base structure forexecution, this is not the case for an update expressedon a view.Since updates request modification of the content ofthe data base, different mappings of the update re-quest into the actual data base structure may result indifferent effects.
Some of these effects may be unde-sirable or unanticipated.
Specifically, the user maymake requests that are impossible (cannot be per-formed in any way, due to hidden constraints on thedata base), ambiguous (can be performed in severalways), or pathological (can be performed only in waysthat cause unanticipated side effects).
While humanCopyright 1983 by the Association for Computational Linguistics.
Permission to copy without fee all or part of this material is grantedprovided that the copies are not made for direct commercial advantage and the Journal reference and this copyright notice are included onthe first page.
To copy otherwise, or to republish, requires a fee and/or  specific permission.0362-613X/83/020057-12503.00American Journal of Computational Linguistics, Volume 9, Number 2, April-June 1983 57James Davidson and S. Jerrold Kaplan Natural Language Access to Data Bases: Interpreting Update Requestsspeakers would intuitively reject these unusual read-ings, a computer program may be unable to distinguishthem from more appropriate ones.For example, a simple request o "Change the teach-er of CS345 from Smith to Jones" might be carriedout by altering the number of a course that Jones al-ready teaches to be CS345, by changing Smith's nameto be Jones, or by modifying a "teaches" link in thedata base.
While all of these may literally carry out theupdate, they may implicitly cause unanticipatedchanges uch as altering Jones's salary to be Smith's.Our approach to this problem is to treat updates asrequesting that the data base be put into a self-consistent state in which the request is satisfied; theproblem is then to select the most desirable of(potentially) several such states.
The most desirablesuch state is considered to be the "nearest"  one to thecurrent state (in the sense that it involves the leastdisruption).
A set of domain-independent heuristics isused to rank the potential changes along these dimen-sions.This process may be guided by various linguisticconsiderations, such as the difference between trans-parent and opaque readings of the user's request, thedistinction between the sense and reference of refer-ring expressions, and the interpretation of counterfac-tual conditionals.This paper describes a system, PIQUE, which imple-ments this approach by retaining a model of the user'sview and considering possible methods of performingthe update in light of the model.
Given an updaterequest, the system generates the set of possiblechanges to the underlying data base that will literallyfulfill the request.
These candidate changes are thenevaluated as to their effects on the user's view, theunderlying data base, and the data base constraints.
Ifpossible, an appropriate one is selected; otherwise aninformative message is presented to the user.2.
The ProblemAs a hypothetical example of the problems that canarise during updates, consider a relational data base ofemployees, salaries, departments, and managers, con-sisting of two relations:Employees:EMP SAL DEPTAdams 30 InvntryWhite  35 Mkt ingBrown 25 SalesSmith 25 SalesPu l lum 25 SalesDepartments:DEPT MGRSales JonesMkt ing  BakerInvntry F isherCons iderthefo l lowing dialogue:QI: List  the employeesmanagers.and theirRq: EMP MGRAdams F isherWhite  BakerBrown JonesSmith JonesPu l lum JonesQ2: Change Brown's  manager  f rom Jonesto Baker.R2 : Done.The system has apparently fulfilled the user's request.Q3: What is the average salary pa idto Jones 's  employees?R3: $0.Q4: L ist  Jones 's  employees.R4 : NILFrom these responses, the user realizes that somethinghas gone wrong.Q5: L ist  the employees and theirmanagers.R5: EMP MGRAdams F isherWhite BakerBrown BakerSmith BakerPu l lum BakerThe user sees that the system has made two unantici-pated changes - changing Smith's and Pullum's manag-ers - in addition to the one that was requested.From the user's point of view, his request is mean-ingful and unambiguous.
He sees a set of values, andasks to change one of them.
(He might not evenknow that employees and managers are linked via theirdepartments.
)The problem lies in the fact that his update requestcan be performed in two ways:a) by making the manager of the Sales departmentbe Baker.b) by moving Brown from the Sales department tothe Marketing department;58 American Journal of Computational Linguistics, Volume 9, Number 2, April-June 1983James Davidson and S. Jerrold Kaplan Natural Language Access to Data Bases: Interpreting Update RequestsBoth of these literally fulfill the request.
The system,lacking any means for deciding between these, hasapparently chosen (a), making Baker the manager ofthe Sales department,  with the unanticipated effectthat two other employees have had their managerschanged.3.
A More Formal CharacterizationThis problem can be explained more formally.
Givena data base structure, define the user's view function Fas the transformation that is applied to the data baseto yield the conceptual ization with which the userworks.
For instance, in the example in section 2, theview function, as defined by Q1, is a transformationconsisting of a join and a projection, which is appliedto the original two files to yield a single new file withonly two attributes.
Define the user's view as theresult of applying the view function to a given state ofthe data base; in the example, this produces a file withfive entries, as shown in R1.A user's update request (call it u) is a request toupdate the view.
In the example, the request is statedin Q2.
Since the view is only 'virtual' (derived fromthe data), we cannot modify it directly, but must makechanges to the underlying data base.
Call the result oftranslating the update request to the data base levelT(u).
The object is to find the change to the underly-ing data base that comes closest to having the desiredeffect on the user's view.
That is, we want the trans-lation T(u) that produces a revised data base such that,when the view function is applied to that data base,the result is the view requested by the user.In graphical terms:D represents the initial state of the data base,D t the state that results after applying the trans-lated update T(u);U ??
u(F(D))  = F (D ' )  F(D)D ~D'  = T(u) (D)T(u)In mathematical terms, the mapping F from the under-lying data base D to the user's view F(D) induces ahomomorphism.
Loosely defined, a homomorphism isa function that preserves the structure of its argumentsunder given operations.
In this case, the operationsare changes to the underlying data base, and corre-sponding changes to the user's view.
The difficultieswith updates expressed on the view, rather than theunderlying data base, arise from the characteristics ofthe inverse of this homomorphism: elements in theuser's view (states of the "conceptual"  data base) mapunder F 1 into a set of states of the underlying database.
This set may be empty (if the view update can-not be accomplished in any way), or have many ele-ments (in the case of a request that is ambiguous withrespect to D).
If the mapping F is invertible, i.e.
F n isalso a function, then an isomorphism is induced.
Inthis case, each requested update will have a single,unambiguous interpretation in the underlying database, and the difficulties addressed here do not arise.However, in general this is not the case.The ideal update translation will produce a state ofthe data base that, when transformed by the user'sview function, exactly yields the revised state that herequested.
In actuality, our implementation will con-sider changes to the data base that literally fulfill theuser's request but may not yield precisely the intendedview u(F(D)).
In the example, there were two transla-tions of the user's request; update (b) yielded the ex-act view, update (a) a different one.4.
Description of the PIQUE SystemWe have implemented a prototype system (PIQUE)that addresses this problem by processing update re-quests in four phases.
(1) Decide what the user's current view of the database is.The system maintains an ongoing model of theuser's conception of the data base, derived fromthe dialogue.
(2) Use the view to generate a set of candidateupdates T(u), which perform the update.When an update comes in, it is assumed to bean update to the user's view.
That is, the userrequests changes with respect to his conceptuali-zation of the data base.
The candidate transla-tions are updates to the data base, each of whichliterally accomplishes the user's request.
(3) Use a set of ordering heuristics to rank thesecandidates, in terms of how accurately they fulfillthe user's request.These candidates are evaluated according to theordering heuristics, to measure how much impactthey have on the user's view.
For example, acandidate that causes side effects (unrequestedchanges to the user's view) is ranked lower thanone that does not cause such side effects.
"Pragmat ic"  information contained in the database schema is also used in making the decision.
(4) Take action, depending on the number of candi-dates and their ranking.When the candidates have been ranked, actionis taken.
This might consist of performing one ofthe candidates, offering a choice to the user, orexplaining why the update cannot be performed atall.These phases are considered in turn.American Journal of Computational Linguistics, Volume 9, Number 2, April-June 1983 59James Davidson and S. Jerrold Kaplan Natural Language Access to Data Bases: Interpreting Update Requests4.1 Inferring the user's viewThe user of a natural language data base system typi-cally has a conception of the data base that is a subsetof the relations, attributes, connections, and recordsactually present.
In order to interpret updates correct-ly, the system must take into account the user's cur-rent conception of the data base.
Our approach is tobuild a user model based on the concepts of which theuser has indicated an awareness, those that have oc-curred in his queries and updates.This is implemented by making use of the connectiongraphs corresponding to the user's inputs.
A systemthat processes natural language inputs must find pathsthrough the data base, defined by operations such asjoins, which connect the concepts mentioned in theinput.
(The LADDER system, for example, providesthis service with the help of navigation informationstored in a separate structural schema.)
This set ofpaths is called the connection graph.The importance of this work is that the connectiongraph provides a good model for the structure of theuser's view.
That is, each query implicitly induces aview of the data base that the user holds, at least untilthe next input.
When an update is received, it can bechecked for compatibil ity with the current view, to seeif it could be an attempt to update that view.
Thiscompatibil ity test basically checks to see whether theconcepts and relationships mentioned in the update arecompletely contained in the view.
(The actual match-ing criterion is more complicated than simple inclusion,but this will serve for explanatory purposes.)
If theupdate and view are compatible, the user is assumed tobe continuing an interaction with that view.Consider the example of section 2.
The user poses aquery that mentions employees and their managers.He then makes an update request of a similar form.Because the update request is compatible with theview induced by the previous query, the user is as-sumed to be referring to that view and to be asking tochange it.
Note that although departments are neededin the connection graph, they are not mentioned bythe user, and therefore do not appear in the view.Views are stacked as the dialogue progresses, andupdates can be checked for compatibil ity with all pre-vious views (most recent first).
This enables the sys-tem to correctly handle a situation in which a userreturns to a previous view for further work.Note that an update also induces a connection graph,just as a query does.
If an update request is not com-patible with any of the views defined previously, theconnection graph for the update itself can be used todefine the view.
This occurs if the user is making anupdate unrelated to any of the information that he hasexamined.
In this case, the view must be inferredfrom the update alone.
Thus, to return to the exampleof section 2, "Change Brown's manager from Jones toBaker" might be meaningful even if the user has notpreviously asked about these things.This strategy is conservative, in that the only con-cepts that will appear in views are those of which theuser has indicated at least some awareness.
As a re-suit, the system will never assume a view that is morecomplex than the one actually held by the user, andthus will never mislead him by introducing a new con-cept during a response or explanation.
The errors thatoccur will consist of underestimating the user's famili-arity with the data base; the system will tend to bepedantic, rather than mysterious.This strategy also provides a notion of focus: as theuser discusses different parts of the data base, theview changes automatically.
This is important,  be-cause the notion of side effect changes as the user'sfocus changes.
Changes occurring to previous viewsare less important than changes occurring to the cur-rent view.The concept of user modelling is well known in arti-ficial intelligence (Mann et al 1977).
A commonapproach is to record an explicit list of the things theuser knows (for example, Cohen 1978).
Our model,however, is much simpler.
Given the role of the viewinformation in the inferencing heuristics, this model isadequate for our purposes.
Davidson (1982) discussesthe issue of modeling in more detail.4.2 Generating candidate updatesOne of the crucial steps of the algorithm describedabove is the generation of candidate updates that canthen be evaluated for plausibility.
In most cases, aninfinite number of changes to the data base are possi-ble that would literally carry out the request (mainlyby creating and inserting "dummy"  values and links).However, this process can be simplified by generatingonly candidate updates that can be directly derivedfrom the user's phrasing of the request.
This limita-tion is justified by observing that most reasonableupdates correspond to different readings of expres-sions in referentially opaque contexts.A referentially opaque context is one in which twoexpressions that refer to the same real world conceptcannot be interchanged in the context without chang-ing the meaning of the utterance (Quine 1971).
Natu-ral language data base updates often contain opaquecontexts.For example, consider that a particular individual (ina suitable data base) may be referred to as "Dr.Smith", "the instructor of CS100",  "the youngestassistant professor",  or "the occupant of Room 424".While each of these expressions may identify the samedata base record (that is, they have the sameextension), they suggest different methods for locatingthat record (their intensions differ).
In the context of adata base query, where the goal is to unambiguouslyspecify the response set (extension), the method by60 American Journal of Computational Linguistics, Volume 9, Number 2, April-June 1983James Davidson and S. Jerrold Kaplan Natural Language Access to Data Bases: Interpreting Update Requestswhich they are accessed (the intension) does not nor-mally affect the response.
Updates, on the otherhand, are often sensitive to the substitution of exten-sionally equivalent referring expressions.
"Change theinstructor of CSI00 to Dr.
Jones."
may not be equiv-alent to "Change the youngest assistant professor toDr.
Jones."
or "Change Dr. Smith to Dr.
Jones.
"Each of these may imply different updates to the un-derlying data base.For operating with an expression in an opaque con-text, therefore, we must consider the sense of the ex-pression, in addition to its referent (Frege 1952).
In adata base system, this sense is embodied in the proce-dure used to evaluate the referring expression; thereferent is the entity obtained via this evaluation.
Arequest for a change to a referring expression is thusnot specifically a request o perform a substitution onthe referent of the expression, but rather a request ochange the data base so that the sense of the expres-sion now has a new referent.
That is, after the up-date, evaluating the same procedure should yield thenew (requested) result.For example, consider a data base of ships, ports,and docks, where ships are associated with docks, anddocks with ports.
Assume that there is currently aship named Totor in dock 12 in Naples (and no othership in Naples), and consider the following updates:Change Totor to Pequod.Change the ship in dock 12 to Pequod.Change the ship in Naples to Pequod.The referring expressions (italicized) have the samereferent in all three cases, but the senses differ.
Theexpression "Totor"  is resolved by means of a lookupin the ships relation; "the ship in dock 12" requires ajoin between the ships and docks relations; "the ship inNaples" requires a join between all three relations.Consider the ways of performing each request, asindicated by the sense of the referring expression.The first version can be implemented only by making adirect substitution on the ships relation, correspondingto renaming the ship.
The second admits this possibil-ity, but also the possibility of moving a new ship intothe dock (if there is already a ship named Pequod).The third allows the first two, plus the possibility ofmoving a different dock into Naples (if there is a docksomewhere lse with the Pequod in it).
(This will laterbe ruled out for other reasons, as explained in the nextsection, but cannot be excluded on purely linguisticgrounds.
)Thus, the particular eferring expression selected bythe user motivates a set of possible actions that maybe appropriately taken, but does not directly indicatewhich is intended or preferred.This characteristic of natural language updates sug-gests that the generation of candidate updates can beperformed as a language driven inference (Kaplan1978) without severely limiting the class of updates tobe examined.
Language driven inference is a style ofnatural language processing in which the inferencingprocess is driven (and hence limited) by the phrasingof the user's request.In this instance, the candidate updates are generatedby examining the referring expression presented in theupdate request.
The procedure implied by this expres-sion follows an "access path" through the data basestructure.
The candidate updates computed by theprogram consist of changing links or pointers alongthat path, or substituting values in the final record(s)identified.For example, consider the structure of the "ships"data base:The candidate translations for the third request(changing "the ship in Naples") correspond to thefollowing changes to the data base:(1) making a change to the Ships file (i.e., renamingthe ship);(2) changing link (b) (moving a new ship into thedock);(3) changing link (a) (moving a new dock into theport).If the expression "the ship in dock 12" were used,only options 1 and 2 would be generated; similarly, if"Totor"  were used, only option 1 would be generated.4.3 The selection of appropriate updatesAt first examination, it would seem to be necessary toincorporate a semantic model of the domain to selectan appropriate update from among the candidate up-dates.
While this approach would surely be effective,the overhead required to encode, store, and processthis knowledge for each individual data base may beprohibitive in practical applications.
In general, therequired information might not be available.
What isneeded is a general set of heuristics that will select anappropriate update in a reasonable majority of cases,without specific knowledge of the domain.The heuristics that are applied to rank the candidateupdates are based on the idea that the most appropri-ate one is likely to cause the minimum disruption tothe user's conception of the data base.
This concept isdeveloped formally in the work of Lewis, presented inhis 1973 book, Counterfactuals.
In this work, Lewisexamines the meaning and formal representation ofsuch statements as " I f  kangaroos had no tails, theywould topple over."
(p. 8) He argues that to evaluatethe correctness of this statement (and similar counter-factual conditionals) it is necessary to construct inone's mind the possible world minimally different fromthe real world that could potentially contain the condi-tional (the "nearest" consistent world).
He points outAmerican Journal of Computational Linguistics, Volume 9, Number 2, April- June 1983 61James Davidson and S. Jerrold Kaplan Natural Language Access to Data Bases: Interpreting Update Requeststhat this hypothetical world does not differ only inthat kangaroos don't  have tails, but also reflects otherchanges required to make that world plausible.
Thushe rejects the idea that in the hypothetical world kan-garoos might use crutches (as not being minimallydifferent), or that they might leave the same tracks isthe sand (as being inconsistent).The application of this work to processing naturallanguage data base updates is to regard each transac-tion as presenting a "counterfactual"  state of theworld, and request hat the "nearest"  reasonable worldin which the counterfactual is true be brought about.For example, the request "Change the teacher ofCS345 from Smith to Jones."
might correspond to thecounterfactual " I f  Jones taught CS345 instead ofSmith, how would the data base be different?"
alongwith a speech act requesting that the data base be putin this new state.To select this nearest world, three sources of infor-mation are used:(a) the side effects entailed by the different candi-dates;(b) pragmatic information contained in the data baseschema;(c) semantic constraints attached to the data baseschema.
(a) Side ef fectsAs illustrated in the example of section 2, updates mayhave effects on the user's view and the data base be-yond those literally requested.
Using the rationale of"minimal disruption", updates that do not have sideeffects are preferable to those that do.
For each candi-date, we consider the number and type of side effectscaused, and rank the candidates accordingly.
In database management terms, the update with the fewestside effects on the user's data sub-model is selected asthe most appropriate.Considering the example from section 2, note thatthe two candidates have different effects on the user'sview.
The one that was actually performed - candi-date (a), changing the name of the manager of theSales department - also changes two other values inthe view.
The other candidate - (b), moving Brownto the Marketing department - does not have theseeffects.
Therefore, the latter more exactly fulfills theuser's request, and would be preferred.The side effects that actually occur for a particularcandidate are in a sense accidental, in that they de-pend on the particular state of the data base.
Forexample, the number of side effects caused by chang-ing the manager of the Sales department depends uponhow many other employees happen to work in thatdepartment.
To avoid this property of contingency, amore stable approach is to consider what side effectscould result from performing the given candidate inany state of the data base.
This set of potential sideeffects can be determined by analyzing the restrictionsin the data base schema concerning the cardinality anddependency of relationships between entities.
Thesignificance of this concept is that the constraints oncardinality and dependency may be strong enough toensure that the set of potential side effects (and hencethe set of actual ones) is empty - indicating that thegiven candidate does not have any side effects in thecurrent state, and more important, could not have sideeffects in any state.Consider once again the example of section 2.
Ofthe two updates, (a) causes actual side effects, (b)doesn't.
A stronger eason for preferring (b) is that itcannot cause side effects to the user's view, regardlessof the state of the data base.
To see this, note thatthe cardinality of the relationship between employeesand departments is typically N: I  - each employeeworks for only one department.
Thus, an employeecan have only one manager, and moving the employeeto a new department cannot cause any changes to thisaspect of the view beyond the one requested.
Thepotential side effects of (a) consist of changes to themanagers of employees other than Brown; the twoactual side effects are an example of this.This calculation can be generalized, by considering agraphical representation of the view, in which nodesrepresent relations, and arcs stand for the joins(relationships) between relations.
For relationshipsthat are N: I  as in the example, the arc is labeled toindicate the direction of the functional determination.Thus, the graph for the example would be:The view graph can be used to evaluate the side ef-fects for each translation, with the following rule:Consider the value or link being changed by thetranslation in question, and the relation of whichit is a part.
If that relation is a root of the viewgraph, that is, if there exist paths following thearrows, from the relation in question to all theother relations of the graph, then the translationwill not have any side effects.For the example in question, translation (a) consistedof a change to Departments, while (b) entailed achange to Employees (to move Brown to another de-partment).
In the graph, Employees is a root, butDepartments is not - the link from Departments toEmployees runs the "wrong"  way.
Thus, the transla-tion (b) cannot entail side effects, although (a) may;this is consistent with the previous observation.In Davidson (1983), this analysis is carried furtherand developed more formally.
We identify a numberof different types of side effects and establish graphi-cal conditions for the presence and absence of each.Further, theorems are introdueed concerning compari-62 American Journal of Computational Linguistics, Volume 9, Number 2, Apri l - June 1983James Davidson and S. Jerrold Kaplan Natural Language Access to Data Bases: Interpreting Update Requestsson of side effects for different translations, and theoptimality of certain translations is proved.In the ranking of candidates for appropriateness,only potential side effects are considered.
Explana-tions, when needed, are phrased with respect to actualside effects, if any exist, otherwise to potential ones.
(b) Pragmatic informationThere may be information in the data base schema tohelp the selection among candidate updates.
For ex-ample, certain attributes and links in the schema maybe designated at design time as static, indicating thatthey rarely change, or dynamic, indicating that theyfrequently change.
This information is used duringimplementation to select methods for accessing theinformation.
It may also be of use when ranking can-didate updates.Considering the last example from section 4.2, wenote that one of the candidates changes the ship bymoving a new dock into Naples.
This is consistentwithin the data base and fulfills the update request;but, the data base schema would indicate that such achange is unlikely (because the location of a dock is astatic attribute), and this candidate's desirability wouldbe downgraded Similarly, there may be general rulesthat names change less often than other attributes.Note that this information is merely heuristic; if theonly candidate is one that involves such a change, itwill be performed.
(c) Semant ic  const ra in tsThe schema will often contain semantic onstraints thatrestrict the allowable states of the data base.
Exam-ples of these are functional dependencies (for example,"Two employees cannot have the same employee num-ber.")
,  range constraints ( "No  employee can makemore than $45,000.
"), and existence constraints (" I f  anemployee works in a particular department, here mustbe a record for that department in the departmentsrelation.
").These figure in the process of update interpretation,in the elimination of candidates that are otherwiseacceptable.
In the example of section 4.2, if there isalready a ship named Pequod in the data base, therenaming change could cause a name conflict, resultingin the rejection of this candidate.Whereas the pragmatic information discussed abovewas heuristic, the semantic constraints are absolute.Candidates that violate semantic onstraints will neverbe performed.
However,  it is still advantageous togenerate and consider these candidates, since it is of-ten possible to formulate a meaningful explanation forthe user about the nonfulfil lment of the request.Our current ordering heuristics incorporate thesesources of information.
In increasing order of prefer-ence, they are:- updates that violate semantic onstraints associatedwith the deta base;- updates that violate pragmatic guidelines;- updates with side effects on the user's currentview;- updates with no side effects.While this approach can certainly fail in cases wherecomplex domain semantics rule out the "s implest"change, in most cases it is sufficient to select a reason-able update from among the various possibilities.Consider again Lewis' "Counterfactual"  framework.We see that the method of generating candidates dis-cussed in section 4.2 defines the accessibility of differ-ent states of the world (data base); the semanticconstraints define consistency," pragmatic constraintsand side effect information are measures of distancebetween states of the data base.4.4 Action takenIf one candidate is better than the others, it is per-formed.
If there are a number of candidates that can-not be distinguished by the heuristic ranking, the useris told about them and offered a choice.
If no candi-date is admissible (because, for instance, all candidatesviolate semantic onstraints on the data base), the useris so informed.In a number of cases, circumstances must be ex-plained to the user.
For instance, if the candidateactually performed has side effects, the user must benotified.
If a semantic constraint is violated, the usermust be told how.Our approach to explanation assumes that the user isfamiliar only with his own view of the data base, andso all explanations must be phrased with respect tothis understanding (following McKeown 1979).Therefore, options are presented in terms of their ef-fects on the user's view (rather than the actualchanges proposed),  and violations of semantic con-straints are discussed with respect to attributes thatthe user has already seen.
In this way, we ensure thatexplanations are always comprehensible.5.
Examples of the System in OperationPIQUE runs in INTERLISP (Teitelman 1978) on theDEC System-20 at SRI International as part of theKBMS system (Wiederhold et al 1981).
The naturallanguage parser is written in LIFER, a semantic gram-mar system designed by Gary Hendrix (1977).
Thedata base access uses SODA, a LISP-compatible variantof the relational calculus developed by Bob Moore(1979); the SODA interpreter used was written by BilLewis, and has been modified and extended by JimDavidson to handle updates.Note that some of the information printed by thecurrent system is presented merely for pedagogicalpurposes, to show the intermediate stages of the com-putation.
In the course of a real run, such information(shown indented in the transcripts below) would besuppressed.
The user's input is preceded by >.American Journal of Computational Linguistics, Volume 9, Number 2, April- June 1983 63James Davidson and S. Jerrold Kaplan Natural Language Access to Data Bases: Interpreting Update RequestsAssume a sample data base containing the followinginformation:Individual employees, with salary, department, andemployee number (employee number and name areassumed to be unique):ESD: EMP SAL DEPTAdams 30 Invnt ryWhi te  35 Mkt ingBrown 25 Sa lesSmi th  30 Sa lesPu l lum 25 Sa lesEE: EMP EMPNOAdams 103Whi te  431Brown 554Smi th  222Pu l lum 181Departments have managers and location, and aregrouped into divisions (department ames are assumedto be unique):DMLD: DEPT  MGR LOC DIVSa les  Jones  SF IMkt ing  Baker  LA IIInvnt ry  F i sher  SD IAdver t  Lark in  NY IIDivis ionsareassigned vice presidents:DV: D IV  VPI LaskerII K l ineII HannanIII Burgess1.
Example of an update performed using side effectheurist ics.Consider once again the example shown in section 2,this time with the real system:THE EMPLOYEES AND THEIR  MAN-  >(L ISTAGERS)EMPADAMSWHITEBROWNSMITHPULLUMMGRF ISHERBAKERJONESJONESJONESNext, the userentersarequest to  update hisview.Enter  next  command:>(CHANGE BROWN'S  MANAGER FROM JONESTO BAKER)The program now generatesthecandidate updates.
Asindicated, there aretwo ofthese.The poss ib le  ways  of per fo rmingthe update:I.
In the re la t ion  DMLD change theMGR at t r  of the tup leDEPT  MGR LOC D IVSALES JONES SF Ito the va lue  BAKER2.
In the re la t ion  ESD change theDEPT  at t r  of the tup leEMP SAL DEPTBROWN 25 SALESto the va lue  MKT INGNote that the update of changing the DEPT attributeof the tuple (MKTING BAKER) to Sales would makeBaker one of the managers of Brown.
But, it wouldalso leave Jones as a manager of Brown, and thus doesnot fulfill the user's request, even literally.
For thisreason, it has not even been considered by the system.These candidates are then evaluated, in terms of theaccuracy with which they fulfill the user's request.
Inthe absence of any strong preference for either one,the decision is made on the basis of potential sideeffects to the user's view.These  t rans la t ions  have  the fo l -l ow ing  e f fects -I. E f fec ts  are:In the view: potent ia l l y  chang ingthe MGR of o ther  EMPS.2.
E f fec ts  are:None.The program concludes that update (2) is superior to(1), since (1) has the possibility of changing the man-ager of other employees.
(In actuality, (1) wouldchange the managers of both Smith and Pullum.
)Des i red  t rans la t ion  is: 2.Rev ised  v iew is:EMP MGRADAMS F ISHERWHITE  BAKERBROWN BAKERSMITH JONESPULLUM JONESThe result accords with the user's wishes; only therequested change has been made to his view.2.
Example  of an update per formed using pragmat icin format ionConsider the same data base, with a slightly differentdialogue:>(WHAT ARE THE LOCATIONS OF THE EM-PLOYEES )64 American Journal of Computational Linguistics, Volume 9, Number 2, April-June 1983James Davidson and S. Jerrold Kaplan Natural Language Access to Data Bases: Interpreting Update RequestsEMP LOCADAMS SDWHITE  LABROWN SFSMITH SFPULLUM SFEnter  next  command:>(MOVE ADAMS FROM SD TO LA)The system interprets this as a request to changeAdams'location.The poss ib le  ways  of per fo rmingthe update:I.
In the re la t ion  DMLD change theLOC att r  of the tup leDEPT  MGR LOC DIVINVNTRY F ISHER SD Ito the va lue  LA2.
In the re la t ion  ESD change theDEPT at t r  of the tup leEMP SAL DEPTADAMS 30 INVNTRYto the va lue  MKT INGTwo candidates are identified, corresponding to (1)physically moving the department to a different loca-tion, or (2) reassigning the employee.Now, the candidates are evaluated.These  t rans la t ions  have the fol -low ing  s ide e f fec ts  on the view:I. E f fec ts  are:V io la t ion  of p ragmat ic  const -ra ints .2.
E f fec ts  are:None.The "location" attribute of the DMDL relation, repre-senting the location of the department, is marked inthe data base schema as "static", indicating that itrarely changes.
Thus, update (1) is unlikely.
Thesystem detects this.
Note that update (1) also haspotential side effects on the user's view, but the viola-tion of the pragmatic constraint is a stronger reasonfor rejection.Des i red  t rans la t ion  is: 2.Rev ised  v iew is:EMP LOCADAMS LAWHITE  LABROWN SFSMITH SFPULLUM SFOnce again, the user's request has been fulfilled ex-actly.3.
Example  of a request  b locked by a semant icconstraint :Assume a semantic constraint - a functional dependen-cy stating that each employee number may be assignedto only one employee.> (LIST THE NAMES AND EMPLOYEE NUM-BERS FOR ALL  EMPLOYEES IN THE SALESDEPARTMENT)EMP EMPNOBROWN 554SMITH 222PULLUM 181> (CHANGE SMITH' S EMPLOYEE NUMBER TO103)The program generates the ways of performing theupdate.
There is only one of these.The poss ib le  ways of per fo rmingthe update:I.
In the re la t ion  EN change theEMPNO at t r  of the tup leEMP EMPNOSMITH 222to the va lue  103.\[The effects engendered by this candidate are nowlisted; the candidate would violate a semantic database constraint.\]These  t rans la t ions  have  the fo l -low ing  ef fects :I. E f fec ts  are:V io la t ion  of semant ic  const ra in ts .The system now tells the user what has happened,explaining why the update couldn't be performed, andhow the semantic constraint would be violated.This  update  cou ld  not  be per fo rmed,because  of semant ic  const ra in ts :The EMPNO va lue  of 103 has a l readybeen ass igned to the tup leEMP EMPNOADAMS I 03wh ich  has the DEPT  va lue  of INVNTRY.This  update  wou ld  v io la te  the func-t iona l  dependency  EMPNO --> EMP.Note that, without the DEPT value printed out, theuser may not realize why he cannot see the (ADAMS103)  tuple.
The explanation is thus phrased withrespect to the user view.4.
Example of a genuine ly  ambiguous  update.Now, a dialogue concerning a different part of thedata base:>(WHICH VP 'S  ARE IN CHARGE OF WHICHDEPARTMENTS ?
)American Journal of Computational Linguistics, Volume 9, Number 2, April-June 1983 65James Davidson and S. Jerrold Kaplan Natural Language Access to Data Bases: Interpreting Update RequestsVP DEPTLASKER SALESLASKER INVNTRYKLINE MKTINGKLINE ADVERTHANNAN MKTINGHANNAN ADVERTEnter  nextcommand:>(REPLACE LASKER WITH KLINE AS VP INCHARGE OF THE SALES DEPT)The system now generates the list of candidate up-dates.
There aretwo of these.The poss ib le  ways of per fo rmingthe update:I.
In the re lat ion DV change theVP attr  of the tupleDIV VPI LASKERto the va lue KLINE2.
In the re la t ion  DMLD change theDIV attr  of the tupleDEPT MGR LOC DIVSALES JONES SF Ito the value IIAgain, the effects o feach  on the user's view are com-puted.These t rans la t ions  have the fol-lowing effects:I. E f fects  are:In the view: potent ia l l y  changingthe VP of other  DEPTs.2.
Ef fects  are:In the view: potent ia l l y  inser t ingor de le t ing  other  VPs for thisDEPT.Thus, both candidates have side effects on the view.Since the system cannot decide a priori that one ofthese is superior to the other, no decision can be madehere.
The only solution is to ask the user.
Note that,since the user is presumed to know nothing about thestructure of the underlying data base, the only mean-ingful way to distinguish between the updates is todescribe them in terms of their (actual) side effects onhis view.
This is another example of explanationphrased with respect o a view.There are 2 methods of per fo rmingthis update.Update (I) wi l l  have the side ef fectofrep lac ing  the tuple (LASKER INVNTRY)wi th (KLINE INVNTRY)Update (2) wi l l  have the side ef fectofinsert ing the tuple ((HANNAN SALES))Whi?h would  you prefer?>If the user cannot make a choice, the update is aban-doned.\[Note that the actual side effects are in fact examplesof the classes described by the potential ones.\]6.
Discussion and Evaluat ionWe discuss the effectiveness of PIQUE as a mechanismfor performing natural language updates.
Four aspectsare considered: coverage, portabil ity, efficiency, andcorrectness.Coverage concerns the range of inputs accepted bythe system.
We distinguish linguistic coverage - therange of linguistic phenomena handled by the system -from logical coverage - the range of domain capabili-ties that can be performed using the natural languagefront end.Linguistic capabilities have not been stressed inPIQUE, and linguistic coverage is therefore quite limit-ed.
Many phenomena - ellipsis, relative clauses, con-junctions, passive voice - are handled only in simplecases, if at all.
Extension of the system to fully handlethese could be accomplished through expansion of thegrammar.Logical coverage concerns the classes of requeststhat can be expressed by means of the interface lan-guage.
Data base interfaces, unlike many artificialintelligence applications, have a task space that is well-defined - specifically, by the capabilities of the under-lying data manipulation language.
The class of queriesaccepted by PIQUE is a natural (and common) subsetof the relational calculus expressions: chain-structured,conjunctive queries.
These are queries where the set ofpredicates to be satisfied is a simple conjunction, andwhere the set of joins defines a chain; this correspondsto a form of select-project-join expression.
The up-dates are deletions and replacements, again with con-junctive qualifications.Portability deals with the ease of adaptation for newdata bases or domains.
The philosophy adopted in thedesign of PIQUE is somewhat different from that oftypical AI systems.
Rather than try to capture, repre-sent, and encode the domain- and world-knowledgerequired to perform a thorough semantic analysis ofthe problem, we attempt to exploit whatever knowl-edge is already implicitly or explicitly present in theapplication (in this case, the content and structure ofthe data base and the user's phrasing of the updaterequest).
Consequently, the implementation is simpli-fied and the techniques are more easily transported tonew domains.The system uses five major modules: parser andgrammar; user modeler; candidate generator; rankingheuristics; and data base schema.
For transport o a66 American Journal of Computational Linguistics, Volume 9, Number 2, April-June 1983James Davidson and S. Jerrold Kaplan Natural Language Access to Data Bases: Interpreting Update Requestsnew application, only the first and last (natural lan-guage grammar, and data base schema) would requiremodification.
These are both modules that wouldneed revision or replacement anyway, independent ofthe update capability.Efficiency concerns the time and space requirementsof the system, and how these increase as the data basebecomes larger.
The algorithms of PIQUE are de-signed to avoid potentially expensive data base refer-ences, by using the data base schema where possible.Thus, the candidate generation and ranking are per-formed on an intensional (structural) basis, and the setof heuristics used do not refer to the data base state.As a result, the system is relatively insensitive to in-creases in the size of the data base.Correctness is used here to indicate the degree towhich the system's actions match the intended results;any "intell igent" system has the possibility of error.We consider now the correctness of the PIQUE ap-proach.
Note first that one class of errors is unavoida-ble - these are the "pathological" cases in which theuser's intent is beyond the discovery of the program.For example, the user's real meaning in "ChangeBrown's manager from Jones to Baker."
may havebeen to have Brown fired, and a new employee namedBrown hired for Baker.
In such situations, it is unlike-ly that any program will behave correctly; the bestresult achievable is probably to provide enough feed-back to enable the user to discover the error.Many of the remaining difficulties are associatedwith the ranking of candidate translations.
The empha-sis here has been placed on consistency of behavior.The consideration of side effects, and the emphasis onexactness of translations, are designed to ensure thatthe system's actions will be visible to the user, andunexpected effects will not occur.
Side effect consid-erations have also been favored because of applicabili-ty (they are useful in a broad class of situations), per-spicuity (they can be understood by the user), andrichness (they operate at multiple levels, and provideresults more complex than a simple yes-no response).Of course, the performance of the system sufferswhen limited information is available.
In part becauseof its generality, there is a definite risk that the systemwill take inappropriate actions or fail to notice prefer-able options.
A more knowledge-based approachwould likely yield more accurate and sophisticatedresults.
The process of responding appropriately toupdates could be improved by taking advantage ofdomain specific knowledge external to the data base,using partial case-structure semantics, or tracking dia-logue focus, to name a few possible extensions.
Tomitigate these shortcomings, the system is engineeredto fail "soft ly",  by presenting options to the user orrequesting clarifications by re-phrasing the request.As data bases encode richer semantic knowledge, assuggested by Wiederhold and E1-Masri (1979) andHammer  and McLeod (1978), the ranking heuristicscan be easily extended to take advantage of theseadditional knowledge sources.7.
ConclusionWe have studied the subjective problem of interpretingnatural language updates to a data base system.
Inparticular, we have examined the problems associatedwith vague requests, which lack sufficient detail toenable a unique interpretation.Drawing on work in artificial intelligence, the philos-ophy of language, and data base theory, we have de-veloped and implemented a domain-transparent ap-proach to this problem.
This method is characterizedby the maintenance of a form of "user model"  forinterpreting requests, and the use of a collection ofheuristics to rank alternative translations.
Particularattention has been paid to the requirements ofefficiency and portability.8.
BibliographyCohen, Philip.
1978 On Knowing What to Say: Planning SpeechActs.
Technical Report #118, Computer Science Department,University of Toronto.Davidson, James.
1982 Natural Language Access to Databases:User Modeling and Focus.
Proceedings of the Fourth BiennialConference of the Canadian Society for Computational Studies ofIntelligence.
Saskatoon, Saskatchewan, pp.
204-211.Davidson, James.
1983 Interpreting Natural Language DatabaseUpdates.
Ph.D. thesis, Computer Science Department, StanfordUniversity, Stanford, California.Dayal, Umeshwar.
1979 Schema-Mapping Problems in DatabaseSystems.
Technical Report TR-11-79, Center for Research inComputing Technology, Harvard University, Cambridge, Mas-sachusetts.Frege, Gottlob.
1952 On Sense and Reference.
In Geach, P. andBlack, M., Eds.
(Black, M.
(Tr.
)), Translations from the Philo-sophical Writings of Gottlob Frege.
Blackwell, Oxford, England.Hammer, Michael and McLeod, Dennis.
1978 The Semantic DataModel: A Modelling Mechanism for Data Base Applications.A CM SIGMOD Conference Proceedings: 26-36.Hendrix, Gary.
1977 Human Engineering for Applied NaturalLanguage Processing.
Proceedings of the Fifth International JointConference on Artificial Intelligence.
Cambridge, Massachusetts:183-191.Hendrix, Gary et al 1978 Developing a Natural Language Inter-face to a Complex System.
ACM Transactions on DatabaseSystems 3: 105-147.Henisz-Dostert, Bozena and Thompson, Frederick.
1974 The RELSystem and REL English.
In Zampolli, A. and Calzolari, Eds.,Computational and Mathematical English.
Casa Editrice Olschki,Firenze, Italy.Kaplan, S. Jerrold and Davidson, James.
1981 Interpreting Natu-ral Language Database Updates.
In Proceedings of the 19thAnnual Meeting of the Association for Computational Linguistics.Stanford, California: 139-141.Kaplan, S. Jerrold.
1979 Cooperative Responses from a PortableNatural Language Data Base Query System.
Technical ReportHPP-79-19, Computer Science Department, Stanford Universi-ty, Stanford, California.American Journal of Computational Linguistics, Volume 9, Number 2, April- June 1983 67James Davidson and S. Jerrold Kaplan Natural Language Access to Data Bases: Interpreting Update RequestsKaplan, S. Jerrold.
1978 Indirect Responses to Loaded Questions.Proceedings of the Second Workshop on Theoretical Issues in Natu-ral Language Processing.
Urbana-Champaign, Illinois.Keller, Arthur M. 1982 Updates to Relational Databases ThroughViews Involving Joins.
In Scheuermann, Peter, Ed., ImprovingDatabase Usability and Responsiveness.
Academic, New York:363-384.Lewis, D. 1973 Counterfactuals.
Harvard University Press, Cam-bridge, Massachusetts.Mann, William; Moore, James; and Levin, James.
1977 A Com-prehension Model for Human Dialogue.
Proceedings of the FifthInternational Joint Conference on Artificial Intelligence.
Cam-bridge, Massachusetts: 77-87.McKeown, Kathleen.
1979 Paraphrasing Using Given and NewInformation in a Question-Answer System.
Proceedings of the17th Annual Meeting of the Association for ComputationalLinguistics.
LaJolla, California: 67-72.Moore, Robert.
1979 Handling Complex Queries in a DistributedData Base.
Technical Note 170 (October), Artificial Intelli-gence Center, SRI International, Menlo Park, California.Quine, Willard.
1971 Reference and Modality.
In Linsky, Leo-nard, Ed., Reference and Modality.
Oxford University Press,Oxford, England.Teitelman, Warren.
1978 lnterlisp Reference Manual.
XeroxPARC, Palo Alto, California.Wiederhold, Gio and EI-Masri, Ramez.
1979 The Structural Mod-el for Database Design.
Proceedings of the International Confer-ence on Entity-Relationship Approach to Systems Analysis andDesign.
North Holand Press, Amsterdam, Holland: 247-267.Wiederhold, Gio; Kaplan, S. Jerrold; and Sagalowicz, Daniel.
1981Research in Knowledge Base Management Systems.
ACMS1GMOD Record 11 (3).68 American Journal of Computational Linguistics, Volume 9, Number 2, April-June 1983
