A MODULAR ARCHITECTUREFOR CONSTRAINT-BASED PARSINGFrancois  Bar thd lemy ~"  Fran(;ois Roua ix  00 INRIA Roequeneourt, BP 105, 78153 Le Chesnay cedex, France& Universidade Nova de Lisboa, 2825 Monte de Caparica, PortugalABSTRACTThis paper presents a framework and a system forimplementing, comparing and analyzing parsersfor some classes of Constraint-Based Grammars.The framework consists in a uniform theoreticdescription of parsing algorithms, and providesthe structure for decomposing the system intological components, with possibly several inter-changeable implementations.
Many parsing al-gorithms can be obtained by compositi(m of themodules of our system.
Modularity is also ,~ wayof achieving code sharing for the common partsof these various algorithms.
Furthermore, tile de-sign lielpi~ reusing the existing modules when im-plementing other algorithms.
The system usesthe flexible modularity provided by the program-mifig languages hleool-90, 1)ased on a type systemthat ensures the safety of module composition.1 INTRODUCTIONWe designed a system to study parsing.
Our aimwas not to implement only one parsing algorithm,but as many as possible, in such a way that wecould compare their performances.
We wanted tostudy parsers' behavior ather than using them toexploit their parses.
Furthermore, we wanted asystem opened to new developments, impossibh~to predict at the time we began our project.We achieved these aims by detining a mo(lulararchitecture that gives us in addition code sharingbetween alternative implementations.Onr system, called APOC-II, implements morethan 60 ditferent parsing algorithms for Context-Free Grammars, Tree-Adjoining Grammars, andDefinite-Clause Grammars.
The different gener-ated parsers are comparable, because they are im-plemented in the same way, with common datastructures.
Experimental comparison can involvemore than 20 parsers for a given grammar andgive results independent from the implementa-tion.Fnrthermore, adding new modules multipliesthe mHnber of parsing Mgorithm.
APOC-II isopen to new parsing techniques to such an ex-tent that it can be seen as a library of tools forparsing, including constraint solvers, look-ahead,parsing strategies and control strategies.
Thesetools make prototyping of parshlg algorithms eas-ier an(l qui(:ker.The system is I)ase(1 on a general frameworkthat divides parsing matters in three differenttasks.
First, tl,e compili~tion that translates agrammar into a push-down automaton (tescrib-ing how a parse-tree is built.
The automaton canbe non-determinlstic if several trees have to beeonsidere(l when parsing a string.
Second, theinterl)retation of the push-down ~mtomaton thathas to deal with non-determinism.
Third, theconstraint solving, used by 1)oth eomi)ilation andinterpretation to perform operations related toconstraints.Several algorithms can perform each of thesethree tasks: the compiler can generate ither top-down or bottom-up automata, the interl)reter canmake use of backtracldng or of tal)ulation andthe solver has to deal with different kinds of con-straints (first-order terms, features, ... ).Our architecture allows different combinationsof three components (one for each basic task) re-sulting into a specific parsing system.
We use theAlcoo\[-90 progranmfing language to implementour mo(hlles.
This language's type system allowsthe definition of alternative implementations ofa conlponent and enmlres the safety of modulecond)ination, i.e.
each module provides what isneede(1 by other mo(lules and re(:eives what it re-quires.The same kind of modularity is used to split themain components (conll)iler, interpreter, solver)into independent snb-modnles.
Some of thesesub-modules can bc shared by several differentimplementations.
For instance the coml)utationof look-ahead is the same for LL(k) and LR(k)techniques.The next section defines the class of grammarwe consider.
Then, ~t general framework for pars-ing and the sort of modularity it requires are pre-sented.
Section 4 is devoted to the AIcool-90 lan-guage that provides a convenient module system.Section 5 is the detailed description of tile APOC-454II system that implements the gonoral ff~tmeworkusing Alcool-90.2 CONSTII.AINT- B ASED C~RAMMARSThe notion of Constraint-Based Gramm~tr aii-ile~tred ill computational linglfistic.
It is rt usefulallstraction of several classes of grammars, inelud-h lg  the most commonly used to describe NatuntILanguage in view of COmlmter processing.Wo give our own definition of constraint-lmsedgrammars that may slightly differ from other def-initions.Def in i t ion  1 ConstTnint-11ased GrammarA constraint-based grammar is a 7-tuple{Nt ,  T, (~, V, Am, C L, R} where?
N t  is a set of symbols called non-terminals?
7' is a set of symbols called terminals?
a is a f lmetion from Nt  O 7' to the natm'alintegers called the arity of the symbol,s?
V is an infinite set of variables?
Aa: is an element of Nt  called the a:dom?
CL  is a constraint language (see definition be-loin) having V as variable set and being closedit~'tder enaming a~td conjunction?
R is a finite set of rules of the form:- ,  (2 ' , )  .
.
.
.
, <2;,)such that so E Nt ,  sl ~ Nt  U 7' for 0 < i _<.
n,c e CL,  X i  are tuples of (t(sl) distinct va,'i-ables, and the same wwiabIe cannot appear intwo different tupIes.in this definitio,t, we use the notion (if con-st ra int  language to define the syntax and the se-mantics of the constraints usod 1)y the grammars.Wo refer to the definition given Iiy H/Sfcld andSmollm in \[ITS88\].
This detinition is especiallysuitable for constraints used in NLP (unrestrictedsynt*tx, multiplicity (if interpretation donmins).The closure under renaming property has ~tlso1lees detined by IISfeld and Snlolka.
It ensurestlt~tt constraints are independent from the vari-able names.
This grmtnds the systematic renam-ing of grammar ules to avoid wtriallle conflicts.Def in i t ion  2 Constrnint LanguageA constraint Language is a 4-tuple (V,C,u, I )  suchthat:?
V is an infinite set of variables?
C is a decidable set whose elements are calledcons traints?
u is fanction that associates a finite set ofvariables to eaeh constraint?
I is a non-empty set of interpretationsIi'or bt<:k of Slm<:e we <lo not recall in detail whatitll i n terpret&t io l l  Jill(| the "<'losuro l l l ldel" I'(!IlH.III ~ing" pr<)perty are, and refer to \[IIS88\].The semantics of Constra.int-Based Gnmmlarsis defined by the .
'-;(?lllalltics of the constra.int lan-guage ~tll(l l, ho notion of syntax tree.
A synta.xtrce is a tree which \]ms at grammttr rule (remtmedwith fi'esh v~triables) as latml of ea.ch nodo.
Aconstraint is associatted to at parse tree: it is theconjunction of all the constr~dnts of the labels andthe oqualities between the tUllle of wtriables fromthe non-termilml ,if the loft-hand side of a labeland the tlq)le of the relewmt symbol of tim right>hand side of tim l~dml of its p~trent.An hnportant lloint ~dmut p;trse trees is tlt*ttthe ordor of terminal symbols of tll(~ ini)ut stringand the order of the symhols in rig}lt-h;md sidesof rules are signitica.nt.A Context-Free Gramma, r is obtained justby ,'omoving tutiles and constr~dnts fl'om thogrammar rules.
Most i)m'sing techniques forConstraint-Bas(~d Grainmars use the underlyillgcontext-fro(!
structure, to guido parsing.
This al-lows the ,'euse of cont.ext-fl'ee lntrsing tccl,niques.T}Io g~r;tllllll;H's wo h l tve  just definod OIICOIII-pass several c lasses  {if i ; r&l l l l l l ; trs llSOd ill N \ ] , \ ]  ),including log;it p;l'amlttlal'S (Definite Clause Cram-mars and variants), UIlifica~tion Cramlmtrs, TreeAdjoining (h'ammars I and, at least p~trtially,i,exical-I;'unctioval C~l'~tlllllHli's ;ilia I/oral Phras(~~.I'IIC~/.III'(~ (.*fl'~llllllllLl'S.
()1" ('OllI'S(~ 1 t,h(!r(~ ;tl'(~ syn-tac t i ca l  differ(mces 1)(~twe(m these (:lassos altdConstraint-Based (ll'amlmU'S.
A simple t:ransla.-t.ion \['r()lll on(?
syntax t,/) {.he ()th(,r  is n(~(:essary.3 A G ENF.RAI, \]?RAMEWOI{K FOIl.PARSINGThis section is devoted to it general fralneworkfor iiarsing ill which most of the i)arsing inethods,inch ld ing~ all the l nos t  COtlllllOtl OliOS, ar(\] express -ible.
It is ;in extension of ~ contoxt-freo framo-work \[Lan74\].
it is based on an explicit separationlletween tho parsing strategy that descrilies howI TAGs  have an under ly ing context- free st ructure,  al-though this is not ol)vi(ms in their  formM definit ion.
Seefor instance \[ I ,angl\] .455syntax trees are built (e.g.
top-<lown, bottom-Ill)), and the control strategy that <lcals with thenon-determinism of the parsing (e.g.
backtrack-ing, tabulation).3 .1  EPDAsThis separation is based on an intermediate r pre-sentation that describes how a grammar is usedfollowing a given parsing strategy.
This inter-mediate representation is a Push-Down Automa-ton.
It is known that most context-free parserscan be encoded with such a stack machine.
Ofcourse, the usual formalism has to be extendedto take constraints into account, and possibly usethem to disambiguate the parsing.
We.
call Ex-tended Push-Down Automaton (EPDA) the ex-tended formalism.For lack of space, we do not give here the for-mal definition of EPDA.
hfformally, it is a ma-chine using three data structures: a stack contain-ing at each level a stack symbol and its tuple ofvariables; a representation f the terminal stringthat distinguishes those that have already beenused and those that are still to be read; finallya constraint.
A configuration of an automatonis a triple of these three data.
Transitions arepartial fimctions from configurations to configu-rations.
We add some restrictions to these tran-sitions: the only clmnge allowed for the stringis that at most one more terminal is read; onlythe top of the stack is accessible and at most onesymbol can be added or removed from it at once.These restrictions are needed to employ directlythe generic tabular techniques for automata exe-cution described in \[BVdlC92\].
EPDAs may benon-deterministic, .e.
several transitions are ap-plicable on a given configuration.Parsing for Constraint-Based Grammarsblen(ls two tasks:?
The structural part, that consists in buihlingthe skeleton of parse trees.
This l)art is similarto a context-free parsing with the underlyingcontext-free projection of the grammar.?
Solving the constraints of this skeleton.The two tasks are related in the following way:constraints appear at the nodes of the tree; thestructure is not a valid syntax tree if the con-straint set is unsatisfiable.
Each task can be per-formed in several ways: there are several context-free parsing methods (e.g.
LL, LR) and con-straints sets can be solved globally or incremen-tally, using various orders, and several ways ofmixing the two tasks are valid.
Tree constructioninvolves a stack mechanism, and constraint solv-ing results in a constraint.
The different parsingteelmiques can be described as computations onthese two data structures.
EPDAs are thus ableto enco<le various l)arsers for Constraint C~ram-n lars .Automatic translation of grammars into EP-DAs is possible using extensions of usual context-free teelmiques \[Bar93\].3 .2  ARCIII 'rECTUP=EThanks to the intermediate representation(EPDA), parsing can be divi<led into two inde-pendent passes: tile compilation that translatesa gran ln la r  into an extended autonlaton; tim exe-cution that takes an EPDA and a string and pro-duees a forest of syntax trees.
To achieve the in-dependence, the compihw is not allowed to makeany assumptions about the way the automata itproduces will lie executed, and the interpreter incharge of the execution is not allowed to makeassumptions about the automata it executes.We add to this scheme reused from context-free parsing a thir<l component: the solver (in anextensive meaning) in charge of all the oi>erationsrelated to constraints and wu'iables.
We will tryto make it as in<lel)en<teilt from the other twomodules (compiler and interpreter) as possible.There is not a fidl in<lependenee, since both thecompiler and the interpreter involve constraintsand related operations, that are: l)erfornmd bythe solver.
We just want to define a (:lear inter-face between the solver and the other modules,an interface independent from the kind of theconstraints and from the solving algorithms be-ing used.
rl'be same coml)iler (resp.
interl)reter )used with different solvers will work on ditl'erentclasses of grammars.
For instance, the same com-piler can compih~ Unilh:ation Grammars an<l Def-inite Clause Grammars, using two solvers, oneimplenmnting feature unilieation, the second oneiml)lementing tirst-order unilieation.We can see a complete parsing system as theeoml)ination of three modules, compiler, inter-prefer, solver.
When ea(:h module has severalimplementations, we wouhl like to take any com-bination of three modules.
This schematic ab-straction captures l)arsing algorithms we are in-terested in.
However, actually defining interfacesfor a practical system without restricting open-endedness or the abstraction (interehangeabilityof components) was the most difficult technicaltask of this work.4563.3  SOLVERSThe main problem lies in the dclinition of thesolver's interface.
Some of the required ol)era-lions are ol)vious: renaming of constraints andtul)les, constraint lmilding, extraction of the vari-al)les from a constraint, etc.By the way, remark that constraint solving canbe hidden within the solver, and thus not ap-pear in the interface.
There is an equivalencerelation between constraints given by their inter-pretations.
This relation can lie used to replacea constraint by another eqniwdent one, l)ossiblysiml)ler.
The solving call also be explicitly used toenR)ree the simplification of constraints at somepoints of tile parsing.Unfortunately some special techniques requiremore specific operations on constraints.
For in-stance, a family of parsing strategies related toEarley's algorithm m~tke use of the restrictio~ op-erator defined by Shieber in \[Shi85\].
Another ex-aml)le: some tabular techni(lues take Benetit froma projectioil operator that restricts constraintswith respect o a subset of their variat)les.We.
could define the solver's inte.rface as thecartesian product of all the operations used by;tt least one technique.
There are two reasons tore}cot such an apI)roaeh.
The first one is thatsome seldom used operations are ditli(:ult to de-line on some constraints domains, it is the case,among others, of tile projection.
The second rea-son is that it woul(\[ restrict to the techniques aI:ready existing and known by us at the momentwhen we design tile interface.
This contradictsthe open-endedness requirement.
A new ollera-tion can appear, useful for a new parsing methodor  for optimizing the old ones.We prefer a flexible detlnition of the interface.Instead of defining one single interface, we will al-low each alternative iniF, lenlentation of the solverto define exactly what it ol\['ers and each iml)h~-nmntation of the compiler or of the interpreterto detine what it demands.
The conll)ination ofmodules will involve the checking that the @r<'.rencompasses the demand, that all tile needed op-erations are implemented.
This imposes restric-tions on the combination of niodules: it is theoverhead to obtain an open-ended system, openedto new developments.We found it language providing the.
kind of llex-il)le modularity we needed: Alcool--90.
We nowpresent his language.4 ' \] ' I IE LANGUAGE ALCOOL 90Alcool-90 is an experimental extension of thefunctional anguage ML with run-time overload-ing \[I{ou90\].
Overloading is used as a tool forseamless integration of abstract data types illthe ML type system, retaining strong typing,and type inference prollerties.
Abstract datatypes (encapsulating a data structure represen-tation and its constructors ~uld interpretive flmc-tiol,s) i)rovide wdues for overloaded symbols, asclasses provide methods for messages ill object-o,'ientcd terminology, i{owever, strong typingmeans that the compiler guarantees that errors()f kind "method not found" never hal)pen.Abstract programs axe programs referring tooverloaded syml)ols, which vahles will be deter-nfined at run-time, consistently with the callingenvironment.
By grouping Mlstract l)rograms,we obtain parameterized abstra.ct data types (orfllnctors), the calling environment being here a~particular instantiation of the I)arameterized adt.Thus, we obtain Jut environment equivalent o amodule system, each module being an adt, even-tually llarameterized.D)r instance, ill APOC-II, (:ompilers h~tve anabstract data type parameterized by a solver.Alcool-90 also proposes an innow~tive nviron-ment where we exploit anlbiguities due to over-loading for semi-automated 1)rogram configura-tion : the type iufin'elice eoullnltes interfaces of%llissing" COIllpollents to colnplete a progralll, ae-cording to the use of overloaded synlbols in theprogram.
A search algo,'ithm finds componentssatisfying those interfaces, eventually by tind-ing suitable parameters for parameterized compo-nents.
Naturally, instantiatiot, of parameterizedcoml)onents i also type-safe : actual parametersmust have interfaces matching formal parameters(schematically : the actual parameter must pro-vide at least the functions required by the inter-face of the formal parameter).For instance, only the solvers provi(lil,gShieber's restriction can })e used as the.
aetlial pa.-ramcter of Earley with restriction compiler.
Butthese solvers can also be '.lse(l l)y a.ll the eoml)ilersthat do not use the restriction.Simple module systems have severe limita-tions when several implementations of compo-nents with simil~tr interfaces (:()exist in a system,or when some component Inay be employed in dif-ferent contexts.
Ada generics provided a first stepto lnodule parameterization, th(mgh at the costof heavy declar~tions a.nd difficulties with typeequiwdence.
SML pral)oses a very powerful mod-ule system with paranleterization, but lacks sepa-rate comllilation and still requires a large amountof user decl~u'ations to detine and use functors.Object-oriented languages lack the type securitythat Alcoo\[-90 guarantees.457The Alcool-90 approach benefits from the sim-plification ot modules as abstract data types byadding inference facilities: the compiler is able toinfer the interfaces of parameters required by amodule.
Moreover, the instantiation of a functoris simply seen as a type application, thus no ef-forts are required from the programmer, while itsconsistency is checked by the compiler.This approacl, is mostly useful when multipleimplementations with similar interfaces are avail-able, whether they will coexist in the program orthey will be used to generate several configura-tions.
Components may have similar interfacesbut different semantics, although they are inter-changeable.
Choosing a configuration is simplychoosing fl'om a set of solutions to missing emn-ponents, computed by the compiler.Several other features of Alcool-90 have notlinen used in this experiment, namely the inheri-tance operator on abstract data types, and an ex-tension of tile type system with dynamics (wheresome type checking occurs at run-time).5 APOC- I IAPOC-II is a system written in Alcool-90, imple-menting numerous parsing techniques within theframework described in section 3.
The user canchoose between these techniques to buihl a parser.By adding new modules written in Alcool-90 tothe library, new techniques can freely be addedto the system.APOC-II has two levels of modularity: the firstone is that of the three main components distin-guished above, compiler, interpreter and solver.Each of these components i  implemented by sev-eral alternative modules, that are combinable us-ing Alcool-90 discipline.Tile second level of modularity consist in split-ring each of the three main components i,lto sev-era.1 modules.
This makes the sharing of commonparts of different hnplementations possible.We give now examples of splitting APOC-qluses at the moment, in order to give an idea ofthis second level of modularity.
This splitting hasproved convenient so far, but it is not fixed andimposed to fllrther developments: ~t new imple-mentation can be added even if it uses a com-pletely different internal structure.A solver is made of:?
a module for wtriables, variabh: generationand renaming,?
a parser for constraints,?
a pretty-printer for constraints,?
a constraint builder (creation of abstract syn-tax trees for constraints, e .g .
building con-straints expressing equality of variables),?
a solver ill the restrictive meaning, in chargeof constraint reduction,?
an interface that encapsulate all the othermodules.A compiler includes:?
a grammar parser (that uses tile constrMntparser given by the solver),?
a module for look-ahead (for computation oflook-ahead sets by static anMysis of the gram-I\[lar ),?
a module for EPDA representation and han-dling,?
~t transition generator which translates gram-mar rules into EPDA tra.nsitions therefore de-ternfining the p~trsing strategy (cf.
figure 1),?
Control code, using previous modules, defin-ing the "compih?'
function, tile only one ex-ported.The two interpreters implemented so far havevery different structures.
The tlrst one usesbacktracking and the second one uses tabulation.They share some modules however, such as amodule handling transitions and a lexer of inlmtstrings.Tile interest of the modular architecture is intile eomtfin~ttorhtl effect of module composition.It leads to many diiferent parsing algorithms.The tigure 1 summarizes the different ~spects ofthe parsing algorithms that can vary more or lessindependently.For example, the built-in parsing method ofProlog for DCGs is ol~t.ained by combining timsolver for \])CGs, the top-down strategy, 0 sym-bol of look-ahead a.nd a backtracking interpreter(and other modules not mentioned in Iigure 1 be-cause they do not change the algorithm, but a.tmost its implenmntation).Some remarks about :figure 1:?
we call Earle?\] parsing strategy the way Earleydeduction \[PW8a\] builds a tree, *tot the con-trol method it uses.
It difl'e.rs from top-downby the way constrMnts are taken into account.?
the difference between garley-like tabulationand graph-structure stacks is the data struc-ture used for item storage.
Several variantsare possible, that actually change the parser'sbehavior.458Solver Context- tYee Grammars  - 1)et inite C lause  Grammars(grammar class) Tree Ad jo in ing  Grammars  - Uni\] ication Grammars .
.
.parsing strategy top -down - pure  bot tom-up - Ear ley  - Ear ley  with  res t r i c t ion(transition generator )  le f t -corner  - LR  - precedence  - PLR .
.
.look-ahead eontext- lYee look -ahead of 0 or 1 symbo lcontext- free look-ahead of k symbols  - contca't-scnsit ivc look-aheadinterpreter backt rack ing  - Ear ley- l ike  tabu la t ion  - Graph-str 'acturcd S tacks .
.
.Agenda management Synchron izat ion  - lifo - fifo - wLrio'as weights .
.
.
(for tabulation only)Figure 1: modules of APOC-IIModules written iii.
bold font are ah'eady iml)lemented, where.as modules written in italic m'e possibleextensions to the system.?
we call synchronization sL kind of breadth-firstse~trch where sc~tnnlng a terminal is performedonly whe.n it is needed by all the paths of thesearch-tree.
The search is synchronized withthe.
input string.
It is the order used by l,;str-h.'y's algorithin.?
at the moment, only gener ic  look-ahead, thatis look-ahestd based on the f i rst  and fo l lowsets, has been considered.
Some more aCCll-rate look-ahead techniques uch as the onesinvolved in SLR(k) pa,'sing are probal>ly notindepen<lent fi'om the parsing strategy and<:armor be an independent mo<lule.Building a parsing system with APOC-II con-sists roughly in choosing one module of each rowof figure 1 and combining them.
Some of thecombinations are not possible.
Thanks to type-checking, Alcool-90 will detect the incompatibil-ity and provide a tyl)e-based explanation of theprobh;m.At the moment, APOC-II otDrs more than 60ditDrent parsing algorithms.
Given a g, ralrHn.%r,there is a choice of more than 20 different parsers.Adding one module does not add only one morealgorithm, but sewn'M new vstri;tltts.The techniques iinplemented by APOC-II arenot original.
For instance, the LR conq)ilationstrategy comes from a paper I)y Nilsson, \[Nil86\],left-corner parsing has been used 1)y Matsumotoand Tanaka in \[MT83\].
As far as we know, how-ever, LR and left-era'her p~trsers have not beenprolmsed for Tree-Adjoining C, rammars before.Notice that the modularity is also useful to varyimplementation of algorithms.
D)r instance, afirst prototype can be quickly written by imple-menting constraints reduction in a naive way.
Arefined version can be written later, if needed.6 CONCLUSIONAPOC-II has several advantages.
First of all, itprovides comparable implementations of the mostcomnmn parsing Mgorithms.
Their efficiency canbe abstractly measured, for instance by countingthe number of eomlmtation step (EPDA transi-tion applicatiol 0 performed to eomlmte a tree ora complete forest of parse trees.
We call thiskind of measm'ements abstract \])ecallse it doesnot rely neither on the implementlttion nor  onthe machine that runs the parser.
Other compar-isons could be done statically, on the automatonor on the pstrse forest (e..g. number of transitions,alllOllllt ,)f determi~lisnl, size of the forest, alllOlllltof structure slurring).
()therwise, APOC-II cstn be.
used as a to(~lkitthat provides :t library of modules usefld to imple-lllent quickly ll(!W parse.r generators.
For instance,one has only to write a solver to obtain up to 22parsing a.lgorithms (perhaps less if tit(', solw!r pro-vides only basic operations).
The library containstools to deal with some constraints, look-ahead,lexing, tabulation, etc.
Reusing these tools when-ever it is possible saves a lot of work.The limitations of APOC-II are that it is mainlyconvenient for parsing strategies that stre some-how static, i.e.
statically determined at com-pih!
time.
Also, al)stractloll (full independencebetween coral>tiers and i,~terpreters) cannot Imachieved for some optimized algorithms.
For in-Sl,&llCe, Nederhof presents in \[Ned93\] a parsingstrategy called ELI{ for which tsdmlar executioncan be optimized.
To implement his a.lgorithmtit ollr system, one would have to write a Ilowinterpreter dedicated to ELR-EPDAs.\?e think that our experiment shows the in-t(~rest of a tlexible modul;trity for studies abolltparsing.
We believe that the same technique canfiuitfully apply on other domains of Ns~tural Lan-guage Processing.4,597 ACKNOWLEDGEMENTSThe authors are grateflfl to Gabriel Pereira Lopesfor his hell).REFERENCES\[Bar93\] Franqois Barthdlemy.
Outils pour l'3-nalyse syntaxique contextuelle.
Thb~-se de doetorat, Universitd 'Orldans,1993.\[BVdlC921 F. Barthdlemy and E. Villemontede 13 Clergerie.
Subsnmption--oriented push-down autom3t3, hiProe.
of PLILP'92, pages 100 114,june 1992.\[II8881 M. ItShfeld and G. Smolk3.
DefiniteRelations over Constraint Languages.Technical Report 53, LILOG, IWBS,IBM Deutschland, october 1988.\[Lan74\] Bernard Lang.
Deterministic tech-niques for efficient non-dc'terministicparsers, hi Proe.
of the 2 '~'l Collo-quium on automata, languages andPrvgramrning, pages 255-269, Saar-brlieken (Germany), 1974.
Springer-Verlag (LNCS 14).\[Lan91\] Bernard Lang.
The systematic con-struction of earley parsers: Applica-tion to the production of o(n a) earleyparsers for tree adjoining rammars.In First International Workshop onTree Adjoining Grammars, 1991.\[MTSal Y. Matsumoto and H. Tanaka.
Bup:A bottom-up 3rser embedded in In'O-log.
New Generation Computing,1:145-158, 1983.\[Ned93\] Mark-Jan Nederhof.
A multidisei-plin3ry approach to 3 parsing algo-rithm.
In Proceedings of the TvmntcWorkshop on Language Technology -TWLT6, december 1993.\[Ni1861 Ulf Nilsson.
Aid: An Mternative im-plementation f DCGs.
New Genera-tion Computing, 4:383-399, 1986.\[pwsa\] F. C. N. Pereir3 and D. II.
D. War-ren.
Parsing as deduction.
In Proc.
ofthe 21st Annual Meeting of the Asso-ciation for Computationnal Linguis-tic, pages 137-144, Cambridge (Mas-saehussetts), 1983.\[Rou90\]\[Shi85\]Franqois Rouaix.
ALCOOL-90: Ty-page de 13 surcharge dons un langavefonetionnel.
ThSse de doctorat, Uni-versitd Paris 7, 1990.Stu3rt M. Shieber.
Using re-striction to extend parsing algori-thms for complex--feature--based for-malisms.
In Proceedings of the 23 r'~Annual Meetin 9 of the Associationfor Computational Linguistics, pages145-152, Chic3go (Illinois), 1985.460
