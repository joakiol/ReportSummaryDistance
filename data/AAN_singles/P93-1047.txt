EXTENDING K IMMO'S  TWO-LEVEL  MODEL OFMORPHOLOGY *Anoop SarkarCentre for Development ofAdvanced ComputingPune University Campus, Pune 411007, Indiaanoop~parcom.ernet.inAbstractThis paper describes the problems faced while us-ing Kimmo's two-level model to describe certainIndian languages such as Tamil and Hindi.
Thetwo-level model is shown to be descriptively inad-equate to address these problems.
A simple ex-tension to the basic two-level model is introducedwhich allows conflicting phonological rules to co-exist.
The computational complexity of the exten-sion is the same as Kimmo's two-level model.INTRODUCTIONKimmo Koskenniemi's two-level model (Kosken-niemi, 1983, Koskenniemi, 1984) uses finite-statetransducers to implement phonological rules.
Thispaper presents the experience of attempting a two-level phonology for certain Indian languages; theproblems faced in this attempt and their resolu-tion.
The languages we consider are Tamil andHindi.
For the languages considered we want toshow that practical descriptions of their morphol-ogy can be achieved by a simple generalization fthe two-level model.
Although the basic two-levelmodel has been generalized in this paper, the ex-tensions do not affect he complexity or the basictenets of the two-level model.SOME PROBLEMS FOR THETWO-LEVEL MODELThe two-level model is descriptively adequate formost morphological processes occuring in Indianlanguages.
However, there are some cases wherethe basic two-level fails to give an adequate de-scription.
One problem is caused by the largenumber of words imported from Sanskrit in lan-guages uch as Hindi, Tamil and Tibetan.
Theother problem occurs in Tamil where phonologydisambiguates between different senses of a mor-pheme.
The cases where these occur is common*I would like to thank P. Ramanujan and R. Doctorfor their help, and Dr. Darbari for his support.and productive.
They cannot be considered as ex-ceptional.For example, in Tamil the verb 1;ula?
(to besimilar) is derived from the Sanskrit base wordtu la  (similarity).
The past participle of tu la iexhibits the following property.
(LR and SR refer tothe lexical and surface nvironments respectively).
(i) LR: tulai+OtaSR: tolaiOtta(adj.
who resembles \[something\])In this example, the consonant insertion at themorpheme boundary is consistent with Tamilphonology, but the realization of u as o in the en-vironment of tu follows a morphology that origi-nates in Sanskrit and which causes inconsistencywhen used as a general rule in Tamil.
The follow-ing example illustrates how regular Tamil phonol-ogy works.
(2) LR: kudi+OtaSR: kudiOtta(adj.
drunk)(3) LR: to la i+0taSR: tolaiOtta(adj.
who has lost \[something\])From examples (1) through (3) we see that thesame environment gives differing surface realiza-tions.
Phonological rules formulated within thetwo-level model to describe this data have to bemutually exclusive.
As all phonological rules areapplied simultaneously, the two-level model candescribe the above data only with the use of arbi-trary diacritics in the lexical representation.
Thesame problem occurs in Hindi.
In Table 1 (6) and(7) follow regular Hindi phonology, while (4) and(5) which have descended from Sanskrit displaythe use of Sanskrit phonology.
All these exam-ples show that any model of this phonological be-haviour will have to allow access for a certain classof words to the phonology of another languagewhose rules might conflict with its own.304Nom.
Sing.
Ob.
Sing.
(4) pita pita(5) data data(6) phita phite(7) ladka ladkeNom.
Plu.pitadataphiteladkeOb.
Plu.pitaodat aophitoladkoTable 1: Behaviour of certain Hindi words that use Sanskrit phonologyThere is one other problem that comes upin Tamil where the phonology disambiguates be-tween two senses of a stem.
For instance, for theword padi  which means either, 1. to read, or 2.to settle; differing phonological rules apply to thetwo senses of the word.
If, as in (8) gemination isapplied the continuous participial of padi  meansreading, whereas, if nasalized, in (9), it means set-fling (e.g.
of dust).
(8) LR: padi+0tu+0konduSR: padiOttuOkkondu(reading)(9) LR: padi+Otu+konduSR: padiOntuOkondu(settling)The two-level model could be conceivably be usedto handle the cases given above by positing ar-bitrary lexical environments for classes of wordsthat do not follow the regular phonology of thelanguage, e.g.
in (1) we could have the lexical rep-resentation as tUlai with rules transforming it tothe surface form.
To handle (8) and (9) we couldhave lexical forms pad i I  and padiY tagged withthe appropriate sense and with duplicated phono-logical rules.
But introducing artificial exical rep-resentations has the disadvantage that two-levelrules that assume the same lexical environmentacross classes of words have to be duplicated, lead-ing to an inefficient set of rules.
A more adequatemethod, which increases notational felicity with-out affecting the computational complexity of thetwo-level model is described in the next section.EXTENDING THE TWO-LEVELMODELThe extended two-level model presented allowseach lexical entity to choose a set of phonologi-cal rules that can be applied for its recognitionand generation.Consider the two level rules 1 that apply to ex-ample (1).
Rule 1 transforms u to o in the properiThe notations used are: * indicates zero or moreinstances of an element, parentheses are optional ele-ments, - stands for negation and curly braces indicatesets of elements that match respectively.
0 stands forenvironment while Rule 2 geminates t .
2Rla: u:o ~ CV* +:0 t : tRib: O:t ~ {B,NAS}C +:0 t:twhere, C - consonantsV- vowelsB - voiced stopsNAS - nasalsWe cannot allow the rule R1 to apply to (2)and so we need some method to restrict its ap-plication to a certain set (in this case all wordslike (1) borrowed from Sanskrit).
To overcomethis, each lexical entry is associated with a subsetof two-level rules chosen from the complete set ofpossible rules.
Each morpheme applies its respec:tive subset in word recognition and generation.Consider a fictional example- - ( l l )  below--toillustrate how the extended model works.1 2 3(II) LR: haX + mel + lekSR: hom Orael OOekRl la :  a:o ~ C X: (+:0)Rl lb:X:{m,O} ~ a: (+:0) {m, m}Rl lc :  l :0  ~ l : l  (+:0)R l la  transforms a to o in the proper environ-ment, R l lb  geminates m and R l l c  degeminates1.
3 Assume rule R l la  that is applied to a in mor-pheme 1--haX--cannot be used in a general waywithout conflicts with the complete set of two-levelrules applicable.
To avoid conflict we assign a sub-set of two-level rules, say P1, to morpheme 1 whichit applies between its morpheme boundaries.
Mor-phemes 2 and 3 both apply rule subset P2 betweentheir respective boundaries.
For instance, P1 herewill be the rule set {Rl la ,  R l lb ,  R l lc}  and P2will be {Rl lb,  lZllc}.
Note that we have to sup-the null character in both the lexical and surface rep-resentations.2The description presented here is simplified some-what as the purpose of presenting it is illustrativerather than exhaustive.3In rule Rl lb a: means lexical a can be realized asany surface character.305ply eac h morpheme nough rules within its sub-set to allow for the left-context and right-contextof the rules that realize other surrounding mor-phemes.
All the rules are still applied in parallel.At any time in the recognition or generation pro-cess there is still only one complete set of two-levelrules being used.
Any rule (finite state transducer)that fails and which does not belong to the sub-set claimed by a morpheme being realized is setback to the start state.
This mechanism allowsmutually conflicting phonological rules to co-existin the two-level rulebase and allow them to applyin their appropriate environments.For instance, if we have a lexical entry laXin addition to the morphemes introduced in (11),then we can have realizations uch as (12) byadding R12 to the above rules.
(12) LR: laX+mel+lekSR: limOmelOOekR12: a : i  ?
: C X: (+:0)Thus lax uses a rule subset P3 which consistsof rules {R12, Rl lb,  Rllc}.
Notice R12 and R l laare potentially in conflict with each other.In the method detailed above we ignore cer-tain rule failures by resetting it to its start state.Can this be justified within the two-level model?Each rule has a lexical to surface realization whichit applies when it finds that the left context andthe right context specified in the rule is satisfied.In the extended model, if a rule fails and it doesnot belong to the rule set associated with the cur-rent morpheme, then by resetting it to its startstate we are assuming that the rule's left contexthas not yet begun.
The left context of the rule canbegin with the next character in the same mor-pheme.
This property means that we can haveconflicting rules that apply within the same word.In practice it is better to use an equivalentmethod where a set of two-level rules that cannotapply between its boundaries i  stored with a mor-pheme.
If one or more of these rules fail and theybelong to the set associated with that morphemethen the rule is simply reset to the start state elsewe try another path towards the analysis of theword.The model presented handles both additiveand mutually exclusive rules, whereas in a systemin which a few morphs pecify additional rules andinherit the rest, mutually exclusive rules have tobe handled with the additional complexity of thedefeasible inheritance of two-level rules.It is easy to see that the extensions do not in-crease the computational complexity of the basictwo-level model.
We have one additional lexicaltag per morpheme and one check for set member-ship at every failure of a rule.CONCLUSIONWe have shown that some examples from lan-guages uch as Tamil and Hindi cannot be effec-tively described under Kimmo's two-level model.An extension to the basic two-level model is dis-cussed which allows morphemes to associate withthem rule subsets which correspond to a certainphonology which gives the morpheme a valid de-scription.
The extension to Kimmo's two-levelmodel gives us the following advantages:* rules that conflict in surface realization can beused,?
it gives more descriptive power,?
the number of rules are reduced,?
no increase in computational complexity overKimmo's two-level model.We have implemented the extended two-levelmodel using the standard method of represent-ing phonological rules by deterministic finite stateautomata (Antworth, 1990, Karttunen, 1983) andusing PATRICIA (Knuth, 1973) for the storage oflexical entries.REFERENCESAntworth, Evan L., 1990.
PC-KIMMO: a two-level processor for morphological analysis.
Oc-casional Publications in Academic ComputingNo.
16.
Dallas, TX: Summer Institute of Lin-guistics.Karttunen, Lauri, 1983.
KIMMO: a general mor-phological processor.
Texas Linguistic Forum22:163-186.Knuth, Donald E., 1973.
The Art of ComputerProgramming.
Vol.
3/Sorting and Searching.Addison Wesley, Reading, MA.Koskenniemi, Kimmo, 1983.
A Two Level modelfor Morphological Analysis.
In Proc.
8th Int'lJoint Conf.
of AI (IJCAI'83), Karlsruhe.Koskenniemi, Kimmo, 1984.
A General Com-putational Model for Word-Form Recognitionand Production.
In Proc.
lOth Int'l Conf.
onComp.
Ling.
(COLING'84), pp.
178-181, Stan-ford University.306
