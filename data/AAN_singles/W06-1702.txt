BE: A Search Engine for NLP ResearchMichael J. Cafarella, Oren EtzioniDepartment of Computer Science and EngineeringUniversity of WashingtonSeattle, WA 98195-2350{mjc,etzioni}@cs.washington.eduMany modern natural language-processing applica-tions utilize search engines to locate large numbers ofWeb documents or to compute statistics over the Webcorpus.
Yet Web search engines are designed and op-timized for simple human queries?they are not wellsuited to support such applications.
As a result, theseapplications are forced to issue millions of successivequeries resulting in unnecessary search engine load andin slow applications with limited scalability.In response, we have designed the Bindings Engine(BE), which supports queries containing typed vari-ables and string-processing functions (Cafarella andEtzioni, 2005).
For example, in response to the query?powerful ?noun??
BE will return all the nouns in itsindex that immediately follow the word ?powerful?,sorted by frequency.
(Figure 1 shows several possibleBE queries.)
In response to the query ?Cities such asProperNoun(Head(?NounPhrase?
))?, BE will return alist of proper nouns likely to be city names.president Bush <Verb>cities such as ProperNoun(Head(<NounPhrase>))<NounPhrase> is the CEO of <NounPhrase>Figure 1: Examples of queries that can be handledby BE.
Queries that include typed variables andstring-processing functions allow certain NLP tasksto be done very efficiently.BE?s novel neighborhood index enables it to do sowith O(k) random disk seeks and O(k) serial diskreads, where k is the number of non-variable terms inits query.
A standard search engine requires O(k + B)random disk seeks, where B is the number of vari-able ?bindings?
found in the corpus.
Since B is typ-ically very large, BE vastly reduces the number of ran-dom disk seeks needed to process a query.
Such seeksoperate very slowly and make up the bulk of query-processing time.
As a result, BE can yield severalorders of magnitude speedup for large-scale language-processing applications.
The main cost is a modest in-crease in space to store the index.To illustrate BE?s capabilities, we have built an ap-plication to support interactive information extractionin response to simple user queries.
For example, in re-sponse to the user query ?insects?, the application re-turns the results shown in Figure 2.
The applicationFigure 2: Most-frequently-seen extractions forquery ?insects?.
The score for each extraction is thenumber of times it was retrieved over several BE ex-traction phrases.generates this list by using the query term to instantiatea set of generic extraction phrase queries such as ?in-sects such as ?NounPhrase??.
In effect, the applicationis doing a kind of query expansion to enable naive usersto extract information.
In an effort to find high-qualityextractions, we sort the list by the hit count for eachbinding, summed over all the queries.The key difference between this BE application,called KNOWITNOW, and domain-independent infor-mation extraction systems such as KNOWITALL (Et-zioni et al, 2005) is that BE enables extraction at in-teractive speeds ?
the average time to expand and re-spond to a user query is between 1 and 45 seconds.With additional optimization, we believe we can reducethat time to 5 seconds or less.
A detailed description ofKNOWITNOW appears in (Cafarella et al, 2005).ReferencesM.
Cafarella and O. Etzioni.
2005.
A Search En-gine for Natural Language Applications.
In Procs.of the 14th International World Wide Web Confer-ence (WWW 2005).M.
Cafarella, D. Downey, S. Soderland, and O. Etzioni.2005.
Knowitnow: Fast, scalable information ex-traction from the web.
In Procs.
of EMNLP.O.
Etzioni, M. Cafarella, D. Downey, S. Kok,A.
Popescu, T. Shaked, S. Soderland, D. Weld, andA.
Yates.
2005.
Unsupervised named-entity extrac-tion from the web: An experimental study.
ArticialIntelligence, 165(1):91?134.910
