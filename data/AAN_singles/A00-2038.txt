A New Algorithm for the Alignment of Phonetic SequencesGrzegorz KondrakDepartment of Computer ScienceUniversity of TorontoToronto, Ontario, Canada M5S 3G4kondrak@cs.toronto.eduAbstractAlignment of phonetic sequences i  a necessarystep in many applications in computational phonol-ogy.
After discussing various approaches to pho-netic alignment, I present a new algorithm that com-bines a number of techniques developed for se-quence comparison with a scoring scheme for com-puting phonetic similarity on the basis of multival-ued features.
The algorithm performs better on cog-nate alignment, in terms of accuracy and efficiency,than other algorithms reported in the literature.1 IntroductionIdentification of the corresponding segments in se-quences of phones is a necessary step in many appli-cations in both diachronic and synchronic phonol-ogy.
Usually we are interested in aligning sequencesthat represent forms that are related in some way:a pair of cognates, or the underlying and the sur-face forms of a word, or the intended and the ac-tual pronunciations of a word.
Alignment of pho-netic sequences presupposes transcription fsoundsinto discrete phonetic segments, and so differs frommatching of utterances in speech recognition.
Onthe other hand, it has much in common with thealignment of proteins and DNA sequences.
Manymethods developed for molecular biology can beadapted to perform accurate phonetic alignment.Alignment algorithms usually contain two maincomponents: a metric for measuring distance be-tween phones, and a procedure for finding the op-timal alignment.
The former is often calculated onthe basis of phonological features that encode cer-tain properties of phones.
An obvious candidate forthe latter is a well-known dynamic programming(DP) algorithm for string alignment (Wagner andFischer, 1974), although other algorithms can usedas well.
The task of finding the optimal alignment isclosely linked to the task of calculating the distancebetween two sequences.
The basic DP algorithmaccomplishes both tasks.
Depending on the appli-cation, either of the results, or both, can be used.Within the last few years, several different ap-proaches to phonetic alignment have been reported.Covington (1996) used depth-first earch and a spe-cial distance function to align words for histori-cal comparison.
In a follow-up paper (Covington,1998), he extended the algorithm to align wordsfrom more than two languages.
Somers (1998) pro-posed a special algorithm for aligning children's ar-ticulation data with the adult model.
Gildea and Ju-rafsky (1996) applied the DP algorithm to pre-aligninput and output phonetic strings in order to im-prove the performance oftheir transducer inductionsystem.
Nerbonne and Heeringa (1997) employed asimilar procedure to compute relative distance be-tween words from various Dutch dialects.
Somecharacteristics of these implementations are juxta-posed in Table 1.In this paper, I present a new algorithm for thealignment of cognates.
It combines various tech-niques developed for sequence comparison with anappropriate scoring scheme for computing phoneticsimilarity on the basis of multivalued features.
Thenew algorithm performs better, in terms of accuracyand efficiency, than comparable algorithms reportedby Covington (1996) and Somers (1999).
Althoughthe main focus of this paper is diachronic phonol-ogy, the techniques proposed here can also be ap-plied in other contexts where it is necessary to alignphonetic sequences.2 Comparing PhonesTo align phonetic sequences, we first need a func-tion for calculating the distance between individualphones.
The numerical value assigned by the func-tion to a pair of segments i referred to as the cost,or penalty, of substitution.
The function is often ex-tended to cover pairs consisting of a segment andthe null character, which correspond to the opera-288Algorithm Calculation Calculation Dynamic Phonologicalof alignment of distance programming featuresCovington (1996)Somers (1998)Nerbonne and Heeringa (1997)Gildea and Jurafsky (1996)explicitexplicitimplicitexplicitTable 1: Comparison oflions of insertion and deletion (also called indels).A distance function that satisfies the following ax-ioms is called a metric:1.
Va, b : d(a, b) >_ 0 (nonnegative property)2.
Va, b : d(a,b) = 0 ?~ a = b (zero property)3.
Va, b : d(a,b) = d(b,a) (symmetry)4.
Va, b, c : d(a, b) + d(b, c) > d(a, c) (triangle in-equality)2.1 Covington's Distance Function vs.Feature-Based MetricsCovington (1996), for his cognate alignment algo-rithm, constructed a special distance function.
Itwas developed by trial and error on a test set of 82cognate pairs from various related languages.
Thedistance function is very simple; it uses no phono-logical features and distinguishes only three typesof segments: consonants, vowels, and glides.
Manyimportant characteristics of sounds, such as placeor manner of articulation, are ignored.
For example,both yacht and will are treated identically as a glide-vowel-consonant sequence.
The function's valuesfor substitutions are listed in the "penalty" columnin Table 2.
The penalty for an indel is 40 if it is pre-ceded by another indel, and 50 otherwise.
Coving-ton (1998) acknowledges that his distance functionis "just a stand-in for a more sophisticated, perhapsfeature-based, system".
1Both Gildea and Jurafsky (1996) and Nerbonneand Heeringa (1997) use distance functions basedon binary features.
Such functions have the abilityto distinguish a large number of different phones.The underlying assumption is that he number of bi-nary features by which two given sounds differ isICovington's distance function is not a metric.
The zeroproperty is not satisfied because the function's value for twoidentical vowels is greater than zero.
Also, the triangle in-equality does not hold in all cases; for example: p(e,i) = 30and p(i,y) = 10, but p(e,y) = 100, where p(x,y) is the penaltyfor aligning \[xl with lyl.implicitnoexplicitimplicitnonoyesyesnomultivaluedbinarybinaryalignment algorithms.a good indication of their proximity.
Phonetic seg-ments are represented by binary vectors in whichevery entry stands for a single articulatory feature.The penalty for a substitution is defined as the Ham-ming distance between two feature vectors.
Thepenalty for indels is established more or less arbi-trarily.
2 A distance function defined in such a waysatisfies all metric axioms.It is interesting to compare the values of Cov-ington's distance function with the average Ham-ming distances produced by a feature-based met-ric.
Since neither Gildea and Jurafsky (1996) norNerbonne and Heeringa (1997) present heir fea-ture vectors in sufficient detail to perform the cal-culations, I adopted a fairly standard set of 17 bi-nary features from Hartman (1981).
3 The averagefeature distances between pairs of segments corre-sponding to every clause in Covington's distancefunction are given in Table 2, next to Covington's"penalties".
By definition, the Hamming distancebetween identical segments i zero.
The distancebetween the segments covered by clause #3 is alsoconstant and equal to one (the feature in questionbeing \[long\] or \[syllabic\]).
The remaining averagefeature distances were calculated using a set of mostfrequent phonemes represented by 25 letters of theLatin alphabet (all but q).
In order to facilitate com-parison, the rightmost column of Table 2 containsthe average distances interpolated between the min-imum and the maximum value of Covington's dis-lance function.
The very high correlation (0.998)between Covington's penalties and the average dis-tances demonstrates that feature-based phonologyprovides a theoretical basis for Covington's manu-ally constructed distance function.2Nerbonne and Heeringa (1997) fix the penalty for indels ashalf the average of the values of all substitutions.
Gildea andJurafsky (1996) set it at one fourth of the maximum substitutioncost.3In order to handle all the phones in Covington's data set,two features were added: \[tense\] and \[spread glottis\].289123456Clause in Covington'sdistance function"identical consonants or glides""identical vowels""vowel ength difference only""non-identical vowels""non-identical consonants""no similarity"Covington'spenalty103060100AverageHammingdistance0.00.01.02.24.818.29Interpolatedaveragedistance0.00.012.427.358.1100.0Table 2: The clause-by-clause comparison of Covington's distance function (column 3) and a feature-baseddistance function (columns 4 and 5).2.2 Binary vs. Multivalued FeaturesAlthough binary features are elegant and widelyused, they might not be optimal for phonetic align-ment.
Their primary motivation is to classifyphonological oppositions rather than to reflect thephonetic haracteristics of sounds.
In a strictly bi-nary system, sounds that are similar often differ in adisproportionately large number of features.
It canbe argued that allowing features to have several pos-sible values results in a more natural and phoneti-caUy adequate system.
For example, there are manypossible places of articulation, which form a near-continuum ranging from \[labial\] to \[glottal\].Ladefoged (1995) devised a phonetically-basedmultivalued feature system.
This system has beenadapted by Connolly (1997) and implemented bySomers (1998).
It contains about 20 features withvalues between 0 and 1.
Some of them can takeas many as ten different values (e.g.
\[place\]),while others are basically binary oppositions (e.g.\[nasal\]).
Table 3 contains examples of multivaluedfeatures.The main problem with both Somers's and Con-nolly's approaches i that they do not differenti-ate the weights, or saliences, that express the rel-ative importance of individual features.
For ex-ample, they assign the same salience to the fea-ture \[place\] as to the feature \[aspiration\], whichresults in a smaller distance between \[p\] and \[k\]than between \[p\] and \[phi.
I found that in orderto avoid such incongruous outcomes, the saliencevalues need to be carefully differentiated; specifi-cally, the features \[place\] and \[manner\] should beassigned significantly higher saliences than otherfeatures (the actual values used in my algorithm aregiven in Table 4).
Nerbonne and Heeringa (1997)experimented with weighting each feature by infor-mation gain but found it had an adverse ffect onthe quality of the alignments.
The question of howto derive salience values in a principled manner isstill open.2.3 Similarity vs. DistanceAlthough all four algorithms listed in Table 1 mea-sure relatedness between phones by means of a dis-tance function, such an approach does not seem tobe the best for dealing with phonetic units.
The factthat Covington's distance function is not a metric isnot an accidental oversight; rather, it reflects certaininherent characteristics of phones.
Since vowels arein general more volatile than consonants, the pref-erence for matching identical consonants over iden-tical vowels is justified.
This insight cannot be ex-pressed by a metric, which, by definition, assigns azero distance to all identical pairs of segments.
Noris it certain that the triangle inequality should holdfor phonetic segments.
A phone that has two dif-ferent places of articulation, such as labio-velar \[w\],can be close to two phones that are distant from eachother, such as labial \[b\] and velar \[g\].In my algorithm, below, I employ an alternativeapproach to comparing segments, which is based onthe notion of similarity.
A similarity scoring schemeassigns large positive scores to pairs of related seg-ments; large negative scores to pairs of dissimilarsegments; and small negative scores to indels.
Theoptimal alignment is the one that maximizes theoverall score.
Under the similarity approach, thescore obtained by two identical segments does nothave to be constant.
Another important advantage ofthe similarity approach is the possibility of perform-ing local alignment of phonetic sequences, which isdiscussed in the following section.3 Tree Search vs.
Dynamic  P rogrammingOnce an appropriate function for measuring simi-larity between pairs of segments has been designed,290Feature Phonological Numericalname term valuePlaceMannerHighBack\[bilabial\]\[labiodental\]\[dental\]\[alveolar\]\[retroflex\]\[palato-alveolar\]\[palatal\]\[velar\]\[uvular\]\[pharyngeal\]\[glottal\]\[stop\]\[affricate\]\[fricative\]\[approximant\]\[high vowel\]\[mid vowel\]\[low vowel\]\[high\]\[mid\]\[low\]\[front\]\[central\]\[back\]1.00.950.90.850.80.750.70.60.50.30.11.00.90.80.60.40.20.01.00.50.01.00.50.0Table 3: Multivalued features and their values.we need an algorithm for finding the optimal align-ment of phonetic sequences.
While the DP algo-rithm, which operates in quadratic time, seems tobe optimal for the task, both Somers and Covingtonopt for exhaustive search strategies.
In my opinion,this is unwarranted.Somers's algorithm is unusual because the se-lected alignment is not necessarily the one thatminimizes the sum of distances between individ-ual segments.
Instead, it recursively selects themost similar segments, or "anchor points", in thesequences being compared.
Such an approach asa serious flaw.
Suppose that the sequences to bealigned are tewos and divut.
Even though the corre-sponding segments are slightly different, the align-ment is straightforward.
However, an algorithm thatlooks for the best matching segments first, will er-roneously align the two t's.
Because of its recursivenature, the algorithm has no chance of recoveringfrom such an error.
44The criticism applies regardless ofthe method of choosingthe best matching segments ( ee also Section 5).Syllabic 5 Place 40Voice 10 Nasal 10Lateral 10 Aspirated 5High 5 Back 5Manner 50 Retroflex 10Long 1 Round 5Table 4: Features used in ALINE and their saliencesettings.Covington, who uses a straightforward depth-firstsearch to find the optimal alignment, provides thefollowing arguments for eschewing the DP algo-rithm.First, the strings being aligned are rel-atively short, so the efficiency of dy-namic programming on long strings is notneeded.
Second, dynamic programmingnormally gives only one alignment foreach pair of strings, but comparative re-construction may need the n best alter-natives, or all that meet some criterion.Third, the tree search algorithm lends it-self to modification for special handlingof metathesis or assimilation.
5 (Coving-ton, 1996)The efficiency of the algorithm might not be rel-evant in the simple case of comparing two words,but if the algorithm is to be of practical use, it willhave to operate on large bilingual wordlists.
More-over, combining the alignment algorithm with somesort of strategy for identifying cognates on the basisof phonetic similarity is likely to require comparingthousands of words against one another.
Having apolynomially bound algorithm in the core of such asystem is crucial.
In any case, since the DP algo-rithm involves neither significantly larger overheadnor greater programming effort, there is no reasonto avoid using it even for relatively small data sets.The DP algorithm is also sufficiently flexible toaccommodate most of the required extensions with-out compromising its polynomial complexity.
Asimple modification will produce all alignments hatare within e of the optimal distance (Myers, 1995).By applying methods from the operations researchliterature (Fox, 1973), the algorithm can be adaptedto deliver the n best solutions.
Moreover, the basicset of editing operations (substitutions and indels)5Covington does not elaborate on the nature of the modifi-cations.291can be extended to include both transpositions ofad-jacent segments (metathesis) (Lowrance and Wag-ner, 1975) and compressions and expansions (Oom-men, 1995).
Other extensions of the DP algorithmthat are applicable to the problem of phonetic align-ment include affine gap scores and local compari-son.The motivation for generalized gap scores arisesfrom the fact that in diachronic phonology not onlyindividual segments but also entire morphemes andsyllables are sometimes deleted.
In order to takethis fact into account, the penalty for a gap can becalculated as a function of its length, rather than asa simple sum of individual deletions.
One solutionis to use an affine function of the form gap(x) =r + sx, where r is the penalty for the introduction of agap, and s is the penalty for each symbol in the gap.Gotoh (1982) describes a method for incorporatingaffine gap scores into the DP alignment algorithm.Incidentally, Covington's penalties for indels can beexpressed by an affine gap function with r -- 10 ands= 40.Local comparison (Smith and Waterman, 1981)is made possible by using both positive and neg-ative similarity scores.
In local, as opposed toglobal, comparison, only similar subsequences arematched, rather than entire sequences.
This oftenhas the beneficial effect of separating inflectionaland derivational ffixes from the roots.
Such affixestend to make finding the proper alignment more dif-ficult.
It would be unreasonable to expect affixesto be stripped before applying the algorithm to thedata, because one of the very reasons to use an au-tomatic aligner is to avoid analyzing every word in-dividually.4 The algorithmMany of the ideas discussed in previous sectionshave been incorporated into the new algorithm forthe alignment of phonetic sequences (ALINE).
Sim-ilarity rather than distance is used to determine aset of best local alignments that fall within E ofthe optimal alignment.
6 The set of operations con-tains insertions/deletions, substitutions, and expan-sions/compressions.
Multivalued features are em-ployed to calculate similarity of phonetic segments.Affine gaps were found to make little differencewhen local comparison isused and they were subse-6Global and serniglobal comparison can also be used.
Ina semiglobal comparison, the leading and trailing indels areassigned a score of zero.algorithm Alignmentinput: phonetic sequences x and youtput: alignment of x and ydefine S(i,j) = _oo when i < 0 orj < 0for i +-- 0 to Ixl doS(i, 0) ~ 0forj ~ 0 to lYl dos(o, j) ~ ofor i +-- 1 to Ix\[ dofor j ~ 1 to lYl doS(i, j) ~-- max(S(i- 1, j) + Gskip(xi),S(i, j--1) + Gskip(Yj),S(i-- l, j--1) + Gsub(xi,yj),S ( i-  1, j -2)  + t~exp (xi, y j -  lYj ),S(i-2, j -  1) + t~exp(Xi-lxi,yj),0)T +-- (1 - e) x maxi,j S(i,j)for i +-- 1 to Ix\[ dofor j ~ 1 to \[Y\[ doff S(i, j) > T thenRetrieve(i, j 0)Figure 1: The algorithm for computing the align-ment of two phonetic sequences.quently removed from ALINE.
7 The algorithm hasbeen implemented in C++ and will be made avail-able in the near future.Figure 1 contains the main components of thealgorithm.
First, the DP approach is applied tocompute the similarity matrix S using the G scor-ing functions.
The optimal score is the maximumentry in the whole matrix.
A recursive procedureRetrieve (Figure 2) is called on every matrix en-try that exceeds the threshold score T. The align-ments are retrieved by traversing the matrix until azero entry is encountered.
The scoring functions forindels, substitutions and expansions are defined inFigure 3.
Cskip, Csub, and Cexp are the maximumscores for indels, substitutions, and expansions, re-spectively.
Cvwt determines the relative weight ofconsonants and vowels.
The default values are Cskip= -10, Csub = 35, Cexp = 45 and Cvwt = 10.
The difffunction returns the difference between segments pand q for a given feature f .
Set Rv contains fea-tures relevant for comparing two vowels: Syllabic,Nasal, Retroflex, High, Back, Round, and Long.
Set7They may be necessary, however, when dealing with lan-guages that are rich in infixes.292procedure Retrieve(i, j s )if S(i, j) = 0 thenprint(Out)print("alignment score is s")elseif S(i- l, j -1)  + Gsub(xi,Yj) + s ~ Tthenpush(Out, "align Xi with yj")Retrieve(i- 1, j -  1, s + Osub(Xi ,y j))pop(Out)if S(i,j-1) + (Iskip(yj) + S >_ Tthenpush(Out, "align null with yj")Retrieve(i, j -1, s + Gskip(yj)pop(Out)if S(i- 1, j -  2) + CSexp (xi, y j -  lYj) + s _> T thenpush(Out, "align xi with Yj-lYj")Retrieve(i- 1, j -2, s + Oexp(Xi,Yj-lYj))pop(Out)if S( i - l , j )  + (~skip(Xj) -I- s \]> Tthenpush(Out, "align xi with null")Retrieve(i- 1,j, s + t~skip(Xj))pop(Out)if S( i -2, j -1) + Oexp(yj,xi-ixi) + s > Tthenpush(Out, "align xixi_ 1 with yj")Retrieve(i-2, j - 1, s + Gexp(yj,xi-lXi))pop(Out)Figure 2: The procedure for retrieving alignmentsfrom the similarity matrix.Rc contains features for comparing other segments:Syllabic, Manner, Voice, Nasal, Retroflex, Lateral,Aspirated, and Place.
When dealing with double-articulation consonantal segments, only the nearestplaces of articulation are used.
For a more detaileddescription of the algorithm see (Kondrak, 1999).ALINE represents phonetic segments as vectorsof feature values.
Table 4 shows the features thatare currently used by ALINE.
Feature values areencoded as floating-point numbers in the range\[0.0, 1.0\].
The numerical values of four principalfeatures are listed in Table 3.
The numbers arebased on the measurements performed by Lade-foged (1995).
The remaining features have exactlytwo possible values, 0.0 and 1.0.
A special fea-ture 'Double', which has the same values as 'Place',indicates the second place of articulation.
Thanksto its continuous nature, the system of features andtheir values can easily be adjusted and augmented.5 Eva luat ionThe best alignments are obtained when local com-parison is used.
For example, when aligning En-o,k,'dp)ffsub (P, q)Gexp (p, qlq2)whereV(p)= Cskip= Csub-~(p ,q) -V(p) -V(q)= Cexp-8(p, q l ) -~(p,  q2)-V(p) - max(V(ql), V(q2))0 ifp is a consonant= Cvwl otherwise~(P,q)whereR= ~ diff(p, q, f) x salience(f)fERRc if p or q is a consonant= Re otherwiseFigure 3: Scoring functions.glish grass with Latin gramen, it is importa~nt tomatch only the first three segments in each word;the remaining segments are unrelated.
ALINE obvi-ously does not know the particular etymologies, butit can make a guess because \[s\] and \[m\] are not verysimilar phonetically.
Only local alignment is able todistinguish between the essential and non-essentialcorrespondences in this case (Table 5).The operations of compression and expansionprove to be very useful in the case of complex cor-respondences.
For example, in the alignment ofLatin factum with Spanish hecho, the affricate \[if\]should be linked with both \[k\] and \[t\] rather thanwith just one of them, because it originates from themerger of the two consonants.
Note that taking a se-g r ~e sg r ~ m e nII g r s IIII g r a m II enII g r II sII g r a II menTable 5: Three alignments of English grass andLatin gramen obtained with global, semiglobal, andlocal comparison.
The double bars delimit thealigned subsequences.293Covington ' salignments ALINE' s alignmentsthree : tr~s 0 r i y IIt r ~ s II0 r iy IIt r ~ IIblow : flare b l - - o w IIf 1 a r e - IIb l o II wf 1 fi II refull : pl~nus f - - u 1 IIp 1 ~ n u s IIf u 1 IIp 1 II ~nusfish : piscis f - - i ~ IIp i s k i s \]lf i ~ IIp i s II kisI :  ego a y II ay  IIe g o - II e II gotooth : dentis - t u w 0 II t uw 0d e n t i - s den II t i sTable 6: Examples of alignments of English and Latin cognates.quence of substitution and deletion as compressionis unsatisfactory because it cannot be distinguishedfrom an actual sequence of substitution and dele-tion.
ALINE posits this operation particularly fre-quently in cases of diphthongization f vowels (seethe alignments in Table 6).Covington's data set of 82 cognates provides aconvenient test for the algorithm.
His English/Latinset is particularly interesting, because these twolanguages are not closely related.
Some of thealignments produced by Covington's algorithm andALINE are shown in Table 6.
ALINE accuratelydiscards inflectional affixes in piscis and flare.
Infish/piscis, Covington's aligner produces four alter-native alignments, while ALINE selects the cor-rect one.
Both algorithms are technically wrongon tooth/dentis, but this is hardly an error consid-ering that only the information contained in thephonetic string is available to the aligners.
OnCovington's Spanish/French data, ALINE does notmake any mistakes.
Unlike Covington's aligner,it properly aligns \[1\] in arbol with the second \[r\]in arbre.
On his English/German data, it selectsthe correct alignment in those cases where Coving-ton's aligner produces two alternatives.
In the fi-nal, mixed set, ALINE makes a single mistake indaughter/thugat~r, in which it posits a dropped pre-fix rather than a syncopated syllable; in all othercases, it is fight on target.
Overall, ALINE clearlyperforms better than Covington's aligner.Somers (1999) tests one version of his algo-rithm, CAT, on the same set of cognates.
CAT em-ploys binary, rather than multivalued, features.
An-other important characteristic s that it pre-alignsthe stressed segments in both sequences.
SinceCAT distinguishes between individual consonants,in some cases it produces more accurate alignmentsthan Covington's aligner.
However, because of itspre-alignment s rategy, it is guaranteed to producewrong alignments in all cases when the stress hasmoved in one of the cognates.
For example, inthe Spanish/French pair cabeza/cap, it aligns \[p\]with \[0\] rather than \[b\] and falls to align the two\[a\]'s.
The problem is even more acute for closelyrelated languages that have different stress rules.
8In contrast, ALINE does not even consider stress,which, in the context of diachronic phonology, istoo volatile to depend on.
Except for the single caseof daughter/thugat~r, ALINE produces better align-ments than Somers's algorithm.6 Future  D i rec t ionsThe goal of my current research is to combine thenew alignment algorithm with a cognate identifica-tion procedure, The alignment of cognates is possi-8For example, stress regularly falls on the initial syllablein Czech and on the penultimate syllable in Polish, while inRussian itcan fall anywhere in the word.294ble only after the pairs of words that are suspectedof being cognate have been identified.
Identificationof cognates i , however, an even more difficult askthan the alignment itself.
Moreover, it is hardly fea-sible without some kind of pre-alignment betweencandidate l xemes.
A high alignment score of twowords should indicate whether they are related.
Anintegrated cognate identification algorithm wouldtake as input unordered wordlists from two or morerelated languages, and produce alist of aligned cog-nate pairs as output.
Such an algorithm would be astep towards developing a fully automated languagereconstruction system.AcknowledgmentsI would like to thank Graeme Hirst, Elan Dresher,Steven Bird, and Carole Bracco for their comments.This research was supported by Natural Sciencesand Engineering Research Council of Canada.ReferencesJohn H. Connolly.
1997.
Quantifying target-realization differences.
Clinical Linguistics &Phonetics, 11:267-298.Michael A. Covington.
1996.
An algorithm to alignwords for historical comparison.
ComputationalLinguistics, 22(4):481-496.Michael A. Covington.
1998.
Alignment of mul-tiple languages for historical comparison.
InProceedings of COLING-ACL'98: 36th AnnualMeeting of the Association for ComputationalLinguistics and 17th International Conference onComputational Linguistics, pages 275-280.Bennett L. Fox.
1973.
Calculating the Kth short-est paths.
INFOR - Canadian Journal of Op-erational Research and Information Processing,11(1):66-70.Daniel Gildea and Daniel Jurafsky.
1996.
Learningbias and phonological-rule induction.
Computa-tional Linguistics, 22(4): 497-530.Osamu Gotoh.
1982.
An improved algorithmfor matching biological sequences.
Journal ofMolecular Biology, 162:705-708.Steven Lee Hartman.
1981.
A universal alphabetfor experiments in comparative phonology.
Com-puters and the Humanities, 15:75-82.Grzegorz Kondrak.
1999.
Alignment of pho-netic sequences.
Technical Report CSRG-402, University of Toronto.
Available fromftp.cs.toronto.edu/csri-technical-reports.Joseph B. Kruskal.
1983.
An overview of sequencecomparison.
In David Sankoff and Joseph B.Kruskal, editors, Time warps, string edits, andmacromolecules: the theory and practice of se-quence comparison, pages 1-44.
Reading, Mass.
:Addison-Wesley.Peter Ladefoged.
1995.
A Course in Phonetics.New York: Harcourt Brace Jovanovich.Roy Lowrance and Robert A. Wagner.
1975.
Anextension of the string-to-string correction prob-lem.
Journal of the Association for ComputingMachinery, 22:177-183.Eugene W. Myers.
1995.
Seeing conserved signals.In Eric S. Lander and Michael S. Waterman, edi-tors, Calculating the Secrets of Life, pages 56-89.Washington, D.C.: National Academy Press.John Nerbonne and Wilbert Heeringa.
1997.Measuring dialect distance phonetically.
InProceedings of the Third Meeting of the ACLSpecial Interest Group in ComputationalPhonology (SIGPHON-97).
Available athttp://www.cogsci.ed.ac.uk/sigphort/.B.
John Oommen.
1995.
String alignment withsubstitution, insertion, deletion, squashing~ andexpansion operations.
Information Sciences,83:89-107.T.
E Smith and Michael S. Waterman.
1981.
Iden-tification of common molecular sequences.
Jour-nal of Molecular Biology, 147:195-197.Harold L. Somers.
1998.
Similarity metrics foraligning children's articulation data.
In Proceed-ings of COLING-ACL'98: 36th Annual Meetingof the Association for Computational Linguisticsand 17th International Conference on Computa-tional Linguistics, pages 1227-1231.Harold L. Somers.
1999.
Aligning phoneticsegments for children's articulation assessment.Computational Linguistics, 25(2):267-275.Robert A. Wagner and Michael J. Fischer.
1974.The string-to-string correction problem.
Jour-nal of the Association for Computing Machinery,21(1):168-173.295
