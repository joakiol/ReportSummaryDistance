Fernando C. PereiraAT&T Bell Laboratories600 Mountain Ave.Murray Hill, NJ 07974pere ira?research, att.
tomBeyond Word N-GramsYoram SingerInstitute Computer ScienceHebrew UniversityJerusalem 91904, Israels inger?cs, huj i. ac.
ilNaftal i  T ishbyInstitute of Computer ScienceHebrew UniversityJerusalem 91904, Israelt ishby?cs, huj i. ac.
ilAbstractWe describe, analyze, and experimentally evaluate a new probabilistic model for word-sequence prediction in natural languages, based on prediction suffi~v trees (PSTs).
By usingefficient data structures, we extend the notion of PST to unbounded vocabularies.
We also showhow to use a Bayesian approach based on recursive priors over all possible PSTs to efficientlymaintain tree mixtures.
These mixtures have provably and practically better performance thanalmost any single model.
Finally, we evaluate the model on several corpora.
The low perplexityachieved by relatively small PST mixture models suggests that they may be an advantageousalternative, both theoretically and practically, to the widely used n-gram models.1 In t roduct ionFinite-state methods for the statistical prediction of word sequences in natural language havehad an important role in language processing research since Markov's and Shannon's pioneeringinvestigations (C.E.
Shannon, 1951).
While it has always been clear that natural texts are notMarkov processes of any finite order (Good, 1969), because of very long range correlations betweenwords in a text such as those arising from subject matter, low-order alphabetic n-gram models havebeen used very effectively for such tasks as statistical language identification and spelling correction,and low-order word n-gram models have been the tool of choice for language modeling in speechrecognition.
However, low-order n-gram models fail to capture even relatively local dependenciesthat exceed model order, for instance those created by long but frequent compound names ortechnical terms.
Unfortunately, extending model order to accommodate hose longer dependenciesis not practical, since the size of n-gram models is in principle exponential on the order of themodel.Recently, several methods have been proposed (Ron et al, 1994; Willems et al, 1994) thatare able to model longer-range regularities over small alphabets while avoiding the size explosioncaused by model order.
In those models, the length of contexts used to predict particular symbolsis adaptively extended as long as the extension improves prediction above a given threshold.
Thekey ingredient of the model construction is the prediction suffix tree (PST), whose nodes representsuffixes of past input and specify a predictive distribution over possible successors of the suffix.
Itwas shown in (Ron et al, 1994) that under realistic conditions a PST is equivalent o a Markovprocess of variable order and can be represented efficiently by a probabilistic finite-state automaton.For the purposes of this paper, however, we will use PSTs as our starting point.The problem of sequence prediction appears more difficult when the sequence lements are wordsrather than characters from a small fixed alphabet.
The set of words is in principle unbounded, since95in natural language there is always a nonzero probability of encountering a word never seen before.One of the goals of this work is to describe algorithmic and data-structure changes that support theconstruction of PSTs over unbounded vocabularies.
We also extend PSTs with a wildcard symbolthat can match against any input word, thus allowing the model to capture statistical dependenciesbetween words separated by a fixed number of irrelevant words.An even more fundamental new feature of the present derivation is the ability to work with amixture of PSTs.
Here we adopted two important ideas from machine learning and informationtheory.
The first is the fact that a mixture over an ensemble of experts (models), when the mixtureweights are properly selected, performs better than almost any individual member of that ensemble(DeSantis et al, 1988; Cesa-Bianchi et al, 1993).
The second idea is that within a Bayesianframework the sum over exponentially many trees can be computed efficiently using a recursivestructure of the tree, as was recently shown by Willems et al (1994).
Here we apply these ideasand demonstrate that the mixture, which can be computed as almost as easily as a single PST,performs better than the most likely (maximum aposteriori - -  MAP) PST.One of the most important features of the present algorithm that it can work in a fully online(adaptive) mode.
Specifically, updates to the model structure and statistical quantities can beperformed adaptively in a single pass over the data.
For each new word, frequency counts, mixtureweights and likelihood values associated with each relevant node are appropriately updated.
Thereis not much difference in learning performance between the online and batch modes, as we willsee.
The online mode seems much more suitable for adaptive language modeling over longer testcorpora, for instance in dictation or translation, while the batch algorithm can be used in thetraditional manner of n-gram models in sentence recognition and analysis.From an information-theoretic perspective, prediction is dual to compression and statisticalmodeling.
In the coding-theoretic nterpretation of the Bayesian framework, the assignment ofpriors to novel events is rather delicate.
This question is especially important when dealing witha statistically open source such as natural language.
In this work we had to deal with two sets ofpriors.
The first set defines a prior probability distribution over all possible PSTs in a recursivemanner, and is intuitively plausible in relation to the statistical self-similarity of the tree.
Thesecond set of priors deals with novel events (words observed for the first time) by assuming ascalable probability of observing a new word at each node.
For the novel event priors we used asimple variant of the Good-Turing method, which could be easily implemented online with our datastructure.
It turns out that the final performance is not terribly sensitive to particular assumptionson priors.Our successful application of mixture PSTs for word-sequence prediction and modeling makethem a valuable approach to language modeling in speech recognition, machine translation and sim-ilar applications.
Nevertheless, these models still fail to represent explicitly grammatical structureand semantic relationships, even though progress has been made in other work on their statisticalmodeling.
We plan to investigate how the present work may be usefully combined with mod-els of those phenomena, especially local finite-state syntactic models and distributional models ofsemantic relations.In the next sections we present PSTs and the data structure for the word prediction problem.We then describe and briefly analyze the learning algorithm.
We also discuss everal implementationissues.
We conclude with a preliminary evaluation of various aspects of the model On several Englishcorpora.96i2 Pred ic t ion  Suff ix Trees over Unbounded SetsLet U C E* be a set of words over the finite alphabet ~E, which represents here the set of actual andfuture words of a natural language.
A prediction suffix tree (PST) T over U is a finite tree withnodes labeled by distinct elements of U* such that the root is labeled by the empty sequence , andif s is a son of s' and s' is labeled by a 6 U* then s is labeled by wa for some w 6 U.
Therefore, inpractice it is enough to associate ach non-root node with the first word in its label, and the fulllabel of any node can be reconstructed by following the path from the node to the root.
In whatfollows, we will often identify a PST node with its label.Each PST node s is has a corresponding.prediction fu ction 7s : U' --+ \[0, 1\] where U' C U U {?
}and ?
represents a novel event, that is the occurrence of a word not seen before in the contextrepresented by s .
The value of 7, is the next-word probability function for the given context s. APST T can be used to generate a stream of words, or to compute prefix probabilities over a givenstream.
Given a prefix wl .
.
.wk  generated so far, the context (node) used for prediction is foundby starting from the root of the tree and taking branches corresponding to Wk, wk-1, ?
?
?
until aleaf is reached or the next son does not exist in the tree.
Consider for example the PST shown inFigure 1, where some of the values o f% are:7'andthefirst '(world) = 0.1, 7'andthefirst '(t ime) = 0.6 ,7,andthefirst,(boy) = 0.2 , 7,andthefirst,(~b) ---- 0.i .When observing the text ~... long ago and the first', the matching path from the root endsat the node 'and the first'.
Then we predict that the next word is time with probability0.6 and some other word not seen in this context with probability 0.1.
The prediction probabilitydistribution 7s is estimated from empirical counts.
Therefore, at each node we keep a data structureto track of the number of times each word appeared in that context.A wildcard symbol, '*', is available in node labels to allow a particular word position to beignored in prediction.
For example, the text ' .
.
.
but  th i s  was' is matched by the node label' th i s  *', which ignores the most recently read word 'was'.
Wildcards allow us to model conditionaldependencies of general form P(zt lxt_i l ,  z t - i2 , .
.
.
,  zt- i~) in which the indices il < i2 < .
.
.
< iLare not necessarily consecutive.We denote by CT(Wl"  .wn) = w, -k"  .w ,  = s the context (and hence a corresponding nodein the tree) used for predicting the word wn+l with a given PST T. Wildcards provide a usefulcapability in language modeling since syntactic structure may make a word strongly dependent onanother a few words back but not on the words in between.One can easily verify that every standard n-gram model can be represented by a PST, but theopposite is not true.
A trigram model, for instance, is a PST of depth two, where the leaves areall the observed bigrams of words.
The prediction function at each node is the trigram conditionalprobability of observing a word given the two preceding words.3 The  Learn ing  A lgor i thmWithin the framework of online learning, it is provably (see e.g.
(DeSantis et al, 1988; Cesa-Bianchiet al, 1993)) and experimentally known that the performance of a weighted ensemble of models,each model weighted according to its performance (the posterior probability of the model), is notworse and generally much better than any single model in the ensemble.
Although there mightbe exponentially many different PSTs in the ensemble, it has been recently shown (Willems et al,1994) that a mixture of PSTs can be efficiently computed for small alphabets.973 2Figure 1: A small example of a PST ofwords for language modeling.
The num-bers on the edges are the weights of thesub-trees tarting at the pointed node.These weights are used for tracking amixture of PSTs.
The special string* represents a 'wild-card' that can bematched with any observed word.Here, we will use the Bayesian formalism to derive an online learning procedure for mixtures ofPSTs of words.
The mixture elements are drawn from some pre-specified set T, which in our caseis typically the set of all PSTs with maximal depth < D for some suitably chosen D.For each PST T E T and each observation sequence w l , .
.
.
,  wn, T's likelihood (or evidence)P(wl , .
.
.
,  wnlT) on that observation sequence is given by:nP(wl ,  .
.
.
,  w ,  IT )  - -  I I  70~( ,o l  ..... wi_l)(wi), (1)i : lwhere CT(wo) = e is the null (empty) context.
The probability of the next word, given the past nobservations, is provided by Bayes formula,P(Wl, ?
.
.
,  wn-1, w,) (2)P(w~'lwl"" 'wn-1) = P(wl , .
.
.
,wn-1)_ ETeTPo(T)P(Wl, ' " ,wn- I ,Wnl  T)-- ~TeTPo(T)P(wl , .
.
.
,  wn-1 IT) ' (3)where Po(T) is the prior probability of the PST, T.A nMve computation of (3) would be infeasible, because of the size of 7".
Instead, we use arecursive method in which the relevant quantities for a PST mixture are computed efficiently fromrelated quantities for sub-PSTs.
In particular, the PST prior Po(T) is defined as follows.
A node shas a probability c~, of being a leaf and a probability 1- a,  of being an internal node.
In the lattercase, its sons are either a single wildcard, with probability rio, or actual words with probability1 - f~.
To keep the derivation simple, we assume here that the probabilities as are independentof s and that there are no wildcards, that is, f~, -- 0, c~ -- c~ for all s. Context-dependent priorsand trees with wildcards can be obtained by a simple extension of the present derivation.
Let usalso assume that all the trees have maximal depth D. Then Po(T) = a '~ (1 - a) ~2 , where n~ is thenumber of leaves of T of depth less than the maximal depth and n2 is the number of internal nodesof T.To evaluate the likelihood of the whole mixture we build a tree of maximal depth D containingall observation sequence suffixes of length up to D. Thus the tree contains a node s iff s --(wi-k+l,.
.
.
,wi) with 1 < k _< D, 1 < i < n. At each node s we keep two variablesJ The first,~In practice, we keep only a ratio related to the two variables, as explained in detail in the next section.98!Ln(s), accumulates the likelihood of the node seen as a leaf.
That is, Ln(s) is the product of thepredictions of the node on all the observation-sequence suffixes that ended at that node:Ln(s) = IX P(wi\]s) : H 7,(w/) .
(4){ i l eT(Wl ..... wi--1):s, i_<i_<n} {i l OT(Wl .
.
.
.
.
wi-1)=, ,  l<i~n}For each new observed word wn, the likelihood values Ln(s) are derived from their previous valuesL~-i (s).
Clearly, only the nodes labeled by w,~_l, wn-2w,~-l, .
.
.
,  w,~-D..'w,~-i will need likeli-hood updates.
For those nodes, the update is simply multiplication by the node's prediction forwn; for the rest of the nodes the likelihood values do not change:Ln-l(S) Ts(wn) s~C(wl , .
.
.
,wn-1) ,  I s \ [<D L,~(s) i~ - i  (s) otherwise , (5)The second variable, denoted by Lmixn(s), is the likelihood of the mixture of all possible treesthat have a subtree rooted at s on the observed suffixes (all observations that reached s).
Lmixn(s)is calculated recursively as follows:Lmiz~(s) = o~L,~(s) + (1 - c~) IX Lmixn(us) , (6)ueUThe recursive computation of the mixture likelihood terminates at the leaves:Lmiz,~(s) = L,~(s) if Isl = D.  (7)In summary, the mixture likelihood values are updated as follows:Lmiz~(s) = {L~(s)o~Ln(s) + (1 - or) \[Iueu rmixn(us)Lmix,~_l(s)s = C(wl , .
.
.
,w ,_ i ) ,  Is\] = Ds = C(wl , .
.
.
,W,_ l ) ,  Isl < Dotherwise(8)At first sight it would appear that the update of Lmixn would require contributions from anarbitrarily large subtree, since U may be arbitrarily large.
However, only the subtree rooted at(wn_ls\[_ 1s) is actually affected by the update.
Thus the following simplification holds:IX Lmiz,~(us)= Lmiz,~(Wn_l,l_lS) ?
H Lmiz~(us).
(9)uEU uEU, u~tOn_i,I_ xNote that Lmizn(s) is the likelihood of the weighted mixture of trees rooted at s on all pastobservations, where each tree in the mixture is weighted with its proper prior.
Therefore,Lrniz,~(e) = ~ Po(T)P(wl,...,wnIT) ,TET(I0)where T is the set of trees of maximal depth D and e is the null context (the root node).
CombiningEquations (3) and (10), we see that the prediction of the whole mixture for next word is the ratioof the likelihood values Lmi~n(e) and Lmixn_l(e) at the root node:P(wnlwl, .
.
., wn-1) = Lmix,~(e)/Lmiz,~_l(e) .
(li)A given observation sequence matches a unique path from the root to a leaf.
Therefore the timefor the above computation is linear in the tree depth (maximal context length).
After predicting99the next word the counts are updated simply by increasing by one the count of the word, if theword already exists, or by inserting a new entry for the new word with initial count set to one.Based on this scheme several n-gram estimation methods, such as Katz's backoff scheme (Katz,1987), can be derived.
Our learning algorithm has, however, the advantages of not being limitedto a constant context length (by setting D to be arbitrarily large) and of being able to performonline adaptation.
Moreover, the interpolation weights between the different prediction contextsare automatically determined by the performance of each model on past observations.In summary, for each observed word we follow a path from the root of the tree (back in thetext) until a longest context (maximal depth) is reached.
We may need to add new nodes, withnew entries in the data structure, for the first appearance of a word.
The likelihood values of themixture of subtrees (Equation 8) are returned from each level of that recursion up to the root node.The probability of the next word is then the ratio of two consecutive likelihood values returned atthe root.For prediction without adaptation, the same method is applied except that nodes are not addedand counts are not updated.
If the prior probability of the wildcard, j3, is positive, then at eachlevel the recursion splits, with one path continuing through the node labeled with the wildcard andthe other through the node corresponding to the proper suffix of the observation.
Thus, the updateor prediction time is in that case o(2D).
Since D is usually very small (most currently used wordn-grams models are trigrams), the update and prediction times are essentially linear in the textlength.It remains to describe how the probabilities, P(wls  ) = 7s(w) are estimated from empiricalcounts.
This problem has been studied for more than thirty years and so far the most commontechniques are based on variants of the Good-Turing (GT) method (Good, 1953; Church and Gale,1991).
Here we give a description of the estimation method that we implemented and evaluated.We are currently developing an alternative approach for cases when there is a known (arbitrarilylarge) bound on the maximal size of the vocabulary U.Let n l ,n2 , .
.
s  s .
,nr,S respectively, be the counts of occurrences of words wl, w2, ?
.., w~, at a givencontext (node) s, where r" is the total number of different words that have been observed at nodes.
The total text size in that context is thus n" = ~1 n~.
We need estimates of 7,(wl) and of7,(w0) the probability of observing a new word w0 at node s. The GT method sets 7,(w0) - t_~- , - -  ns  ,where tl is the total number of words that were observed only once in that context.
This methodhas several justifications, such as a Poisson assumption on the appearance of new words (Fisher etal., 1943).
It is, however, difficult to analyze and requires keeping track of the rank of each word.Our learning scheme and data structures favor instead any method that is based only on wordcounts.
In source coding it is common to assign to novel events the probability ~+r" In this casethe probability 7,(wl) of a word that has been observed n~ times is set to n~ As reported in(Witten and Bell, 1991), the performance of this method is similar to the GT estimation scheme,yet it is simpler since only the number of different words and their counts are kept.Finally, a careful analysis should be made when predicting novel events (new words).
Thereare two cases of novel events: Ca) an occurrence'of an entirely new word~ that has never been seenbefore in any context; (b) an occurrence of a word that has been observed in some context, but isnew in the current context.The following coding interpretation may help to understand the issue.
Suppose some text iscommunicated over a channel and is encoded using a PST.
Whenever an entirely new word isobserved (first case) it is necessary to first send an indication of a novel event and then transfer theidentity of that word (using a lower level coder, for instance a PST over the alphabet E in which thewords in U are written.
In the second case it is only necessary to transfer the identity of the word,100by referring to the shorter context in which the word has already appeared.
Thus, in the secondcase we incur an additional description cost for a new word in the current context.
A possiblesolution is to use a shorter context (one of the ancestors in the PST) where the word has alreadyappeared, and multiply the probability of the word in that shorter context by the probability thatthe word is new.
This product is the probability of the word.In the case of a completely new word, we need to multiply the probability of a novel event by anadditional factor Po(wn) interpreted as the prior probability of the word according to a lower-levelmodel.
This additional factor is multiplied at all the nodes along the path from the root to themaximal context of this word (a leaf of the PST).
In that case, however, the probability of the nextword wn+l remains independent of this additional prior, since it cancels out nicely:Lmizn+l(e) ?
Po(w,~) Lmixn+l(e) (12)P(wn+l\[wl,...,w~) = Lrnix~(e) ?
Po(w,~) - Lmix,~(e)Thus, an entirelY new word can be treated simply as a word that has been observed at all the nodesof the PST.
Moreover, in many language modeling applications we need to predict only that thenext event is a new word, without specifying the word itself.
In such cases the update derivationremains the same as in the first case above.4 Efficient Imp lementat ion  of PSTs  of WordsNatural language is often bursty (Church, this volume), that is, rare or new words may appear andbe used relatively frequently for some stretch of text only to drop to a much lower frequency ofuse for the rest of the corpus.
Thus, a PST being build online may only need to store informationabout those words for a short period.
It may then be advantageous to prune PST nodes and removesmall counts corresponding to rarely used words.
Pruning is performed by removing all nodes fromthe suffix tree whose counts are below a threshold, after each batch of K observations.
We used apruning frequency K of 1000000 and a pruning threshold of 2 in some of our experiments.Pruning during online adaptation has two advantages.
First, it improves memory use.
Second,and less obvious, predictive power may be improved.
Rare words tend to bias the predictionfunctions at nodes with small counts, especially if their appearance is restricted to a small portionof the text.
When rare words are removed from the suffix tree, the estimates of the predictionprobabilities at each node are readjusted reflect better the probability estimates of the more frequentwords.
Hence, part of the bias in the estimation may be overcome.To support fast insertions, searches and deletions of PST nodes and word counts we used ahybrid data structure.
When we know in advance a (large) bound on vocabulary size, we representthe root node by arrays of word counts and possible sons subscripted by word indices.
At othernodes, we used splay trees (Sleator and Tarjan, 1985) to store both the counts and the branches tolonger contexts.
Splay trees support search, insertion and deletion in amortized O(log(n)) time peroperation.
Furthermore, they reorganize themselves to so as to decrease the cost of accessing tothe most frequently accessed elements, thus speeding up access to counts and subtrees associatedto more frequent words.
Figure 2 illustrates the hybrid data structure:The likelihood values Lmix,~(s) and L,~ (s) decrease xponentially fast with n, potentially caus-ing numerical problems even if log representation is used.
Moreover, we are only interested in thepredictions of the mixtures; the likelihood values are only used to weigh the predictions of differentnodes.
Let ~s(w,~) be the prediction of the weighted mixture of all subtrees rooted below s (includ-ing s itself) for w,~.
By following the derivation presented in the previous section it can be verified101I I ....... i.................... \[ .......... .
.
.
.
.
?
.
.
.
.
.. .
.
.
o?Figure 2: The hy-brid data structurethat represents thesuffix tree andthe prediction func-tions at each node.that,whereDefine"~,(w,~+l) = qn(s)7,(w,~+l ) + (1 - q,~(s))'~(~,_l,i , ) ( ' IOn+l)  , (13)= o~L,~(s)/(o~Lr~(S)+(1-a)IILmixn(us)) (14)uEU(1 - a) l-Iueu Lmixn(us)= 1/ (1+ aLr,(S) ) (15)o~Ln(s)Rn(s) = log (1 - c 0 N-~-L-mi~en(us) \] (16)Setting Ro(s) = log(c~/(1 - c0 )  for all s, Rn(s) is updated as follows:R,~+l(S) = Rn(s)+ log (7 , (Wn+l) ) -  log ('~(w,_r,i,)(w,~+l)) , (17)and qn(s) = 1/(1 + e-n"(')) .
Thus, the probability of w,~+l is propagated along the path corre-sponding to suffixes of the observation sequence towards the root as follows,{ ~, , , (w.+a)  s = C(w~, .
.
.
,w . )
,  Isl = D(18)Finally, the prediction of the complete mixture of PSTs for Wn is simply given by ~(wn).5 Eva luat ionWe tested our algorithm in two modes.
In online mode, model structure and parameters (counts)are updated after each observation.
In batch mode, the structure and parameters are held fixedafter the training phase, making it easier to compare the model to standard n-gram models.
Ourinitial experiments used the Brown corpus, the Gutenberg Bible, and Milton's Paradise Lost assources of training and test material.
We have also carried out a preliminary evaluation on theARPA North-American Business News (NAB) corpus.102For batch training, we partitioned randomly the data into training and testing sets.
We thentrained a model by running the online algorithm on the training set, and the resulting model, keptfixed, was then used to predict the test data.As a simple check of the model, we used it to generate text by performing random walks overthe PST.
A single step of the random walk was performed by going down the tree following thecurrent context and stop at a node with the probability assigned by the algorithm to that node.Once a node is chosen, a word is picked randomly by the node's prediction function.
A result ofsuch a random walk is given in Figure 3.
The PST was trained on the Brown corpus with maximaldepth of five.
The output contains everal well formed (meaningless) clauses and also cliches suchas "conserving our rich natural heritage," suggesting that the model captured some longer-termstatistical dependencies.every year public sentiment for conserving our rich natural heritage is growing but that heritageis shrinking even faster no joyride much of its contract if the present session of the cab driver inthe early phases conspiracy but lacking money from commercial sponsors the stations have hadto reduce its vacationingFigure 3: Text created by a random walk over a PST trained on the Brown corpus.In online mode the advantage of PSTs with large maximal depth is clear.
The perplexity of themodel decreases significantly as a function of the depth.
Our experiments so far suggest hat theresulting models are fairly insensitive to the choice of the prior probability, a, and a prior whichfavors deep trees performed well.
Table 1 summarizes the results on different exts, for trees ofgrowing maximal depth.
Note that a maximal depth 0 corresponds to a 'bag of words' model (zeroorder), 1 to a bigram model, and 2 to a trigram model.In our first batch tests we trained the model on 15% of the data and tested it on the rest.
Theresults are summarized in Table 2.
The perplexity obtained in the batch mode is clearly higher thanthat of the online mode, since a small portion of the data was used to train the models.
Yet, evenin this case the PST of maximal depth three is significantly better than a full tr igram model.
Inthis mode we also checked the performance of the single most likely (maximum aposteriori) modelcompared to the mixture of PSTs.
This model is found by pruning the tree at the nodes thatobtained the highest confidence value, Ln(s), and using only the leaves for prediction.
As shownin the table, the performance of the MAP model is consistently worse than the performance of themixture of PSTs.As a simple test of for applicability of the model for language modeling, we checked it on textwhich was corrupted in different ways.
This situation frequently occurs in speech and handwritingrecognition systems or in machine translation.
In such systems the last stage is a language model,usually a trigram model, that selects the most likely alternative between the several options passedby the previous; stage.
Here we used a PST with maximal depth 4, trained on 90% of the text ofParadise Lost.
Several sentences that appeared in the test data were corrupted in different ways.We then used the model in the batch mode to evaluate the likelihood of each of the alternatives.
InTable 3 we demonstrate one such case, where the first alternative is the correct one.
The negativelog likelihood and the posterior probability, assuming that the listed sentences are all the possiblealternatives, are provided.
The correct sentence gets the highest probability according to the model.Finally, we trained a depth two PST on randomly selected sentences from the NAB corpustotaling approximately 32.5 million words and tested it on two corpora: a separate randomlyselected set of sentences from the NAB corpus, totaling around 2.8 million words, and a standard103Tezt Maximal Number of Perplexity Perplezity PerplexityDepth Nodes (a = 0.5) (a = 0.999) (a = 0.001)Bible(GutenbergProject)Paradise LostbyJohn MiltonBrownCorpus0123450123451757376688243899477384743830187545913712817219962927135911264776957169172267544367096282.184.655.942.937.836.5423.0348.7251.1221.2212.5209.3452.8276.5202.9165.8160.5158.7282.184.658.250.949.849.6423.0348.7289.7285.3275.2265.6452.8276.5232.6224.0223.9223.8282.184.655.542.537.535.6423.0348.7243.9206.4202.1201.6452.8276.5197.1165.6159.7158.7Table 1: The perplexity of PSTs for the online mode.ARPA NAB development test set of around 8 thousand words.
The PST perplexity on the firsttest set was 168, and on the second 223.
In comparison, a trigram backoff model built formthe same training set has perplexity of 247.7 on the second test set.
Further experiments usinglonger maximal depth and allowing comparisons with existing n-gram models trained on the full(280 million word) NAB corpus will require improved data structures and pruning policies to staywithin reasonable memory limits.6 Conc lus ions  and  Fur ther  WorkPSTs are able to capture longer correlations than traditional fixed order n-grams, supporting bettergeneralization ability from limited training data.
This is especially noticeable when phrases longerthan a typical n-gram order appear repeatedly in the text.
The PST learning algorithm allocatesa proper node for the phrase whereas a bigram or trigram model captures only at runcated versionof the statistical dependencies among words in the phrase.Our current learning algorithm is able to handle moderate size corpora, but we hope to adaptit to work with very large training corpora (100s of millions of words).
The main obstacle to thoseapplications is the space required for the PST.
More extensive pruning may be useful for such largetraining sets, but the most promising approach may involve a batch training algorithm that buildsa compressed representation of the PST final from an efficient representation, such as a suffix array,of the relevant subsequences of the training corpus.104Tezt  Mazimal Depth Perplezity (or = 0.5) Perplezity (MAP Model)Bible(GutenbergProject)Paradise LostbyJohn MiltonBrownCorpus012345012345012345411.3172.9149.8141.2139.4139.0861.1752.8740.3739.3739.3739.3564.6407.3396.1394.9394.5394.4411.3172.9150.8143.7142.9142.7861.1752.8746.9747.7747.6747.5564.6408.3399.9399.4399.2399.1Table 2: The perplexity of PSTs for the batch mode.Negative Log.
Likl.
Posterior Probabilityfrom god and over wrath grace shall abound 74.125 0.642from god but over wrath grace shall aboundfrom god and over worth grace shall aboundfrom god and over wrath grace will aboundbefore god and over wrath grace shall aboundfrom god and over wrath grace shall a boundfrom god and over wrath grape shall abound82.50075.25078.56283.62578.68781.8120.0020.2950.0300.0010.0270.003Table 3: The likelihood induced by a PST of maximal depth 4 for different corrupted sentences.ReferencesT.C.
Bell, J.G.
Cleary, I.H.
Witten.
1990.
Text Compression.
Prentice Hall.P.F.
Brown, V.J.
Della Pietra, P.V.
deSouza, J.C. Lai, R.L.
Mercer.
1990.
Class-based n-grammodels of natural anguage.
In Proceedings of the IBM Natural Language ITL, pages 283-298,Paris, France, March.N.
Cesa-Bianchi, Y. Freund, D. Haussler, D.P.
Helmbold, R.E.
Schapire, M. K. Warmuth.
1993.How to use expert advice.
Proceedings of the 24th Annual ACM Symposium on Theory ofComputing (STOC).K.W.
Church and W.A.
Gale.
1991.
A comparison of the enhanced Good-Turing and deletedestimation methods for estimating probabilities of English bigrams.
Computer Speech andLanguage, 5:19-54.105A.
DeSantis, G. Markowski, M.N.
Wegman.
1988.
Learning Probabilistic Prediction Functions.Proceedings of the 1988 Workshop on Computational Learning Theory, pp.
312-328.R.A.
Fisher, A.S. Corbet, C.B.
Williams.
1943.
The relation between the number of species andthe number of individuals in a random sample of an animal population.
J.
Animal Ecology,Vol.
12, pp.
42-58.G.I.
Good.
1953.
The population frequencies of species and the estimation of population parame-ters.
Biometrika, 40(3):237-264.G.I.
Good.
1969.
Statistics of Language: Introduction.
Encyclopedia of Linguistics, Informationand Control.
A. R. Meetham and R. A. Hudson, editors, pages 567-581.
Pergamon Press,Oxford, England.D.
Hindle.
1990.
Noun classification from predicate-argument structures.
In 28th Annual Meetingof the Association for Computational Linguistics, pages 268-275, Pittsburgh, Pennsylvania.Association for Computational Linguistics, Morristown, New Jersey.D.
Hindle.
1993.
A parser for text corpora.
In B.T.S.
Atkins and A. Zampoli, editors, Computa-tional Approaches to the Lexicon.
Oxford University Press, Oxford, England.
To appear.S.M.
Katz.
1987.
Estimation of probabilities from sparse data for the language model componentof a speech recognizer.
IEEE Trans.
on ASSP 35(3):400-401.R.E.
Krichevsky and V.K.
Trofimov.
1981.
The performance of universal encoding.
IEEE Trans.on Inform.
Theory, pp.
199-207.P.
Resnik.
1992.
WordNet and distributional nalysis: A class-based approach to lexical discovery.In AAAI Workshop on Statistically-Based Natural-Language-Processing Techniques, San Jose,California, July.J.
Rissanen.
1986.
A universal prior for integers and estimation by minimum description length.The Annals of Statistics, 11(2):416-431.D.
Ron, Y.
Singer, N. Tishby.
1994.
The power of amnesia: learning probabilistic automata withvariable memory length.
Machine Learning (to appear in COLT94 special issue).C.E.
Shannon 1951.
Prediction and Entropy of Printed English.
Bell Sys.
Tech.
J., Vol.
30, No.
1,pp.
50-64.D.D.
Sleator and R.E.
Tarjan.
1985.
Self-Adjusting Binary Search Trees.
Journal of the ACM,Vol.
32, No.
3, pp.
653-686.F.M.J.
Willems, Y.M.
Shtarkov, T.J. Tjalkens.
1994.
The context ree weighting method: basicproperties.
Submitted to IEEE Trans.
on Inform.
Theory.I.H.
Witten and T.C.
Bell.
1991.
The zero-frequency problem: estimating the probabilities of novelevents in adaptive text compression.
IEEE Trans.
on Inform.
Theory, 37(4):1085-1094.106
