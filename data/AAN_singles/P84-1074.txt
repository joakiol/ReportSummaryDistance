LFG ~ystsm in PrologH ide~ Ya~u'~awaThe Second LaboratoryInstitute for New Generation Computer Technology (ICOT)To~/o, 108, JapanABSTRACTIn order to design and maintain a latE?
scalegrammar, the formal system for representingsyntactic knowledEe should be provided.
LexlcalFunctional Grammar (LFG) \[Kaplan, Bresnan 82\] is apowerful formalism for that purpose, In thispaper, the Prolog implementation of LFG system isdescribed.
Prolog provides a Eood tools for theimplementation of LFG.
LFG can be translated intoDCG \[Perelra,IIarren 80\] and functional structures(f-structures) are generated durlnK the parsingprocess.I INTRODUCTIOr~The fundamental purposes of syntacticanalysis are to check the Eramnatlcallty and toclariDI the mapping between semantic structuresand syntactic constituents.
DCG provides toolsfor fulfillln 6 these purposes.
But, due to thefact that the arbitrary 9rolog programs can beembedded into DCG rules, the grammar becomes toocomplicated to understand, debug and maintain.So, the develo~ent of the formal system torepresent syntactic knowled~es is needed.
Themain concern is to define the appropriate set ofthe descriptive primitives used to represent thesyntactic knowledges.
LFG seems to be promisingformalism from current llngulstlc theories whichsatisfies these requirements.
LFG is adopted forour prelimlna~y version of the formal system andthe Prolog implementation of LFG is described inthis paper.ii SII:~.Z OVERVI~ OF LFGin this section, the simple overview of LF~is described (See \[Eaplan, Bresnan 82\] for details).
LFG is an e::tention of context free grammar(C~'G) and has two-levels of representation, i.e.c-structures (constituent structures) andf-~tructures (functional structures).
Ac-structure is generated by CFG and represents thesurface uord and phrase configurations in a~entence, and the f-structure is generated by thefunctional equations a=sociated with the o~rammarrules and represents the conflo~uratlon of thesurface ~ra=matical functions.
Fi~.
I shows thec-structure and f-structure for the sentence "ae~f.rl handed the baby a toy" ( \ [Kap lan ,Bresnan 82 \ ] ) .npIdet---nIIfasI.... VpIv ...... np- ...... npdet---n det--nglrl hands the baby a toy(a) c-structuresubJ spec ahum ngpred "glrl"tense pastpred "hand<(T subJ)(T obJ2)(T obJ)>"obJ spec thenum sgpred "baby"obJ2 spec anum sgpred "toy"(b) f-structureFig.
1 The eY~mgle c-structure and f-structureAs shown in Fig.
I, f-structure is ahierarchical structure constructed by the pairs ofat~rlbute and its value.
An attribute represents~ra=matlcal function or syntactic feature.Lexlcal entries specify a direct mappinE betueensemantic arguments and confizuratlons of surfacegrammatlcal functions, and ~rammar rules specify adirect mapping between these surface Cr~umatlcalfunctions and particular constituent structureconflguratlons.
To represent these Cra=matlcalrelations, several devices and schemata areprovided in LFG as shown below.
(a) meta variables(1) T & $ (immediate dominance)(il) ~ & ~ (bounded dominance)(b) functional notationsa designator (T subj) indicatesthe aSubja attribute of thef- structure.
(c) Equational schemal l) ( functional equation)ii) ~ (set inclusion)the va!ue ofmother node's358(d) Constrainln~ schema{i) =c (equational constraint)(ii) d (existential constraint)where d is a desIcnator(ill) negation of (1) and (il)Fi~.
2 sh~#s the e~anple ~ra~uar rules andle"~ical entries in LF~, wl~ch senerate thec-structure and the f-structure in Fig.
1.1. s -> np vp(T subJ)=+ T=+2.
np -> det n1=~ T=~3.
vp -> v np npT=+ (T obJ)=~ CT obJ2)=+~.
det-> \[a\](T spec):a (T num):s~5.
det -> \[the\](T spec) =the6.
n-> \ [g i r l \ ](T nu~):sg ('~ pred):'glrl"7. n -> \[baby\](T nun):sg (T pred)='baby"8. n -> \[toy\](r num)=sg (T pred)='toy"9. v -> \[handed\](T tense) =past(T pred)='hand<(~ subJ)(T obJ2)(T obJ)>"FiE.
2 Example ~rammar rules and lex~oal entriesof LFG.
(from \[Kaplan,Bresnan 82\])As sh~n in Fi~.
~, the prlnltlves tore~resent ~r3~.atlcal relations are encoded in~ra~:aar rules and le~cal  entries.
Each syntaotlenode h~s i~s own f-structure and the partial valueof the f-structure is defined by the Equational~ch~m.
For exauple, the functional equation "(~sub~)=$" associated with the dau~hter "np" node of~r~-u~r rule I. of Fi~.
2 specifies that thevalue of the "sub~" attribute of the f-structureof th~ ~other "s" node is the f-structure o/ itsd~u~ter "np" node.
~ne value constraints on thef-~tructure are specified by the Constraln~r~schema, i:oreover, the o~rauatlcallty of thesentence is defined by the three conditions shownbel~.
(I) ~nlqueness: a particular attribute may have at:cost one value in a ~iven f-structure.
(2) Completeness: a f-structure must contain allthe ~overnable ~r~uatical functions ~overned byIt~ predicate.
(~) Coherence: all the ~overr~ble ~ran~uatlcalfunctions that a f-structure contain must be~overned by its predicates.ZZZ Z;~L~L:TATIO:~ OF L,.
'G P~--~rTZVE~As indicated in section iI, two distinct~chenata ~re enploycd in the constructions off-~trucbures.
In the current lupleuentatlon,f-3tructures are ~enerated durln~" the ~arslr~process by executin~ the functional equations and~et inclusions associated with each syntacticnode.
After ~e  .,~urslr~ is done, the f-structures~.~ checked whether their value assicr~ents areconsistent ~ith the value conutralnts on them.The Completeness condition on ~r~at lc~ l !~y  isalso checked after the parsln~.
~e L~'~Jprimitives are realized by the Prolo~ procra~s andembedded into the DCG rules.
The Equationalschema is executed durln~ the parsln~ process bythe execution of DCG rules.
The functionalequation can be seen as the extension of ~eunification Of Prolog by introduclr~ equality onf-structures.A.
Representations of Data TypesThe prlnltlve data types constructi.~f-structures are symbols, semantic predicates,subsidiary f-structures, and sets of sy=bols,semantic predicates, or f-structures.
In currentimplementation, these data types are representedas fol lows:I) symbols ==> atem or In te~r2) semantic predicates ==> sea(X)where X is a predicate3) f-structure ==> Id:Obtwhere the "Id" is an identifier variable(ID-varlable).
Each syntactic node has uniqueID-variable which is used to Identify itsf-structure.
The "Obt" is a ordered blrmrytree each leaf contains the pair of anattribute and its value.q) set ==> {elementl, element2, ..., element;!
}A f-structure can be seen as a partiallydefined data structure, because its value ispartially Emnarated by the Equational schemaduring the paralng process.
An ordered binarytree, obt for short, is suitable for representln~partially defined data.
An obt is a binary treewhose labels are ordered.
A binary tree "Obt" isrepresented by an term of the following foru.Obt = obt(v(Attr,Value),Less,Greater)The "v(Attr,Value)" is a leaf node of thetree.
The "Attr" is an attribute name and used asthe  labe l  of  the lea f  node, and the "Value" i s  i t sva lue .
The "Less"  and "Greater"  are  a l so  b inaryt rees .
The "Obt" i s  o rdered when the  "Less"( "Greater" )  i s  a l so  ordered and each labe l  of  i t slea f  nodes i s  less  (g reater )  than the labe l  of"ObtW,i .e.
"At t r " .
I f  none of the lea f  of a t reeis defined, it is represented by a logicalvariable, l~en its label is defined later, thelogical variable is In~antlated.
The insertionof a label and its value into an obt is done byonly oneunlflcatlon, without rewrltln~ the tree.This is the merit in uslnE an ordered blna~j tree.For m Y-mple, the f-structure for the nounphrase "a glrl", the value of the "subJ" in Fi~.1(b), can be ~-a~leal ly represented in Fig.
3.The "Vi"'s in Fig.
3 are the variablesrepresenting the unlnstantlated subtrees.B.
Functional !~otatlon359iD-variable --> v(spec,a)v( nun ,  aS)  .
.
.
.
.
.
.
.
.
.
+I~-- ..... v(per3,3)~i~.
3+.
.
.
.+Vl v2 v3 v~the ~raphical representalon of an obtThe functional notations are represented by!D-variables instead of l~ta variables ~ and $,i.e.
~Mta variables must be replaced by theobject level variable.
For example, thedesignator (7 subj) associated with the category3, i s  described as \[subJ, IdS\], where Ida is theZD-variable for S. ~e  meta variables for boundeddominance are represented by the termscontrollee(Cat) and controller(Cat), where the"Cat" is the name of the syntactic category of thecontroller or ccntrollee.C.
Predicates for LFG PrimitivesThe predicates for each LFG primitives are asfollows : (d,dl,d2 are designators, s is a set,and " is a negation symbol)I) dl = d2 -> equate(dl,d2,01d,New)2) d & s -> include(d,s,Old,New)3) dl =c d2 -> eonstrain(dl,d2,01dC,NewC)4) d -> exlst(d,OldC,~lewC)5) "(dl =c d2) -> ne&_constraln(dl,d2,01dC,~ewC)6) "d -> not_exist(d,OldC,~ewC)The "Old" and "New, are global valueassIcnnenta.
~%ey are used to propagate thechan~es of ~iobal value assignments made by theexecution of each predicate.
The "OldC" and"~;ewC" are constraint lists and used to gather allthe constraints in the analysis.Desides these predicates, the additionalpredicates are provided for checking a constraintsdurln~ the parsing process.
They are used to k~llthe parsing process zeneratlng inconsistent resultas soon as the inconsistency is found.~e  predicate "equate" gets the temporaryvalues of the desi~nators dl and d2, consultingthe global value assignments.
Then "equate"performs the unification of their values.
Theunification is similar to set-theoretlc unionexcept that it is only defined for sets ofnondistlnct attributes.
Fig.
4 shows the exampletrace output of the "equate" in the course ofanalyzing the sentence "a girl hands the baby a~oy".in order to keep grammar rules highlyunderstandable, it would be better to hideunnecessary data, such as c!obal value assicr~entsor constraint lists.
The macro notations similarto the original notation of LFG are provided tousers for that purpose.
The macro expandertranslates the macro notations into Prologprograms corresponding to the LFG primitives.The value of the designator Det isspec theThe value of the designator ~!
ishum sgper 3pred aeu(glrl)Result of unification isspec thehum sgper  3pred sem(glrl)Fig.
4 Tracing results of equate.This macro expansion results in considerableimprovement of the wrltability and theunderstandability of the grammar.The syntax of macro notations are :(a) d l  = d2 -> eqCd l ,d2)(b )  d e s -> InclCd,s)Co) d l  =c d2 -> o(d l ,d2)(d) d -> ex(d)(e) "(dl  =c d2) -> not_c(dl ,d2)( f )  "d -> not~ex(d)These macro notations for LFG primitives areplaced at the third arsument of the each predicatein DCG rules correspondln~ to syntactic categoriesas shown in Fig.
5 (a), which corresponds to thegrammar rule I. in Fig.
2.s(s(Np, Vp),Id_$,\[\]) -->np(Np, I~_Np,\[eq(\[subJ,Id..S\],Id..:Ip\]),vp(Vp, Id_Vp,\[eq(I~_S, Id..Vp)\]).
(a) The DCG rule with macro for LF~s( s( Np, Vp), I~_$, Old, :;ew, 01dO, I~ewC) -->np( Np, IdJ1p, Old, Oldl, OldC, OldC1 ),{equate( \[subj, Id_S\], Id_~Ip, Oldl, 01d2) },vp( Vp, Id__Vp, Old2,01d3, OldC1, ~ewC),{equate(Id_S, Id_Vp, Old3 ,New) }.
(b) The result of macro expansionFig.
5 Example DCG rule for LFG analysisThe variables "~d_S", ,IdjIp,, and "Id_Vp"are the ID-variables for each syntactic category.For example, the ~rs=mar rule in Fi~.
5 (a) istranslated into the one shown in Fig.
5 (b).~cro  descriptions are translated Into thecorresponding predicate in the case of a ~r~arrule.
In the case of a le:cical entry, macrodescriptions are translated into the correspondingpredicate, which is executed further more and thef-structure of the lexical entry is generated.D.
Issues on the ImplementationThough f-structures are constructed durin~the parsing process, the execution of theEquational schema is independent of the parsing360strate~'.
This is necessary to keep the crayuaarrules highly declarative.
There are someadvantages of using Prolog in implementin~ LFG.First, the Uniqueness condition on a f-structureis fulfilled by the ori~inal unification ofProlog.
Second, an ordered binary tree is a gooddata structure for representing a f-structure.The use of an ordered binary tree reduces theprocessin~ time by 30 percents compared with thecase using a llst for representing a f-structure.And third, the use of ID-varlable also effective,because the sharing of a f-structure can be doneoaly by one unification of the corresponding!D-variables.Though the computational complexity of the~quational schema is very expensive, the LF~provides expressive and natural account forlin~ulstic evidence.
In order to overcome theinefficiency, the introduction of parallel orconcurrent execution mechanism seems to be apromising approach.
The computation model of LFGis similar to the constraint model of computation\[Steele 80\].~qe Prolos implementation of LF~ by Reyle andFray \[Reyle, Frey 83\] aimed at more directtranslation of functional equations into DCG.Although their implementation is more efficient,it does not treat the Constraining schema, setinclusions, the compound functional equation suchas (" vco:~p subj), and the bounded dominance.
Andtheir z r~ar  rules seem to be too complex bydirect encoding of f-structures into them.
Inorder to provide an formal system havlr~ powerfuldescription capabilities for representingsyntactic knowled~es, the more LFG primitives arerealized than their implementation and the ~rammarrules are more understandable and can be moreeasily modified in my implementation.Time used in analysis is972 ms. (parsing)19 ms.(checkin~ constraints)~I ms. (for checFin~ completeness)subJ spec thenun sgper 3pred sem(glrl)pred sam(persuade (\[subj, A\], \[obJ, A\], \[ vcomp, A\]) )obj  spec thenum sgper 3pred sam(baby)tense pastvcomp subj spee thehUm sgper 3pred sam(baby)Inf ?pred sam(so ( \[ subJ, B\] ) )to ?Fig.
6 The result of analyzi.~ the sentence,?
the glrl persuaded the baby to So"VII.
AC~I~!LEDGE~NTSThe author is thankful to Dr. K. Furuka~a,the chief of the second research laboratory ofICOT Research Center, and the me, bars of thenatural language processing ~roup in ICOT ResearchCenter, both for their discussion.
The author isgrateful to Dr. E. Fuchl, Director of the ICOTResearch Center, for providing the opportunity toconduct this research.!'~.
~i'-" RESULT OF A~' EXPER~NTFig.
6 shows the result of analyzing thesentence "the ~irl persuaded the baby to go".
LFGsystem is written in Dec-10 Prolog \[Pereira,et.al.73\] and executed on Dec 2060.As shorn in Fi~.
6, the functional control\[::aplan, Eresnan 82\] is realized in the f-structureof vp.
~e  value of the "subj" attribute of the"vcoup" is functionally controlled by the "obJ" ofi;he f-structure of the "s" node.
The time usedfor syntactic analysis includes the time consumedby parsinj process and the time consumed ~j~quational schema.V.
CO:ICLUSTONThe Prolog implementation of LFG isdescribed.
It is the first step of the formalnysteu for represent!nz syntactic kno~;ledzes.
As"- result, it beco.&es quite obvious that Prolos issuitable for i:iD!e:~entln.- LFG.Further research on the for::al syster~ will becarried by analyzing the wider variety of actualutt-rznce~ to e':tract the more pri:~i tlves~-eces~.r."
for the analyses, and to ~ive the;:ccesaary sc:-e:~aca for tho~e pri_~itives.VIII.
REFEREIICE$\[Kaplan, Bresnan 82\] "Lexical-Functlonal Gr~ar :A Formal System for Grammatical Representation" in~lental Representation of Grammatical Relations",Bresnan ads., I ET Press, 1982\[Reyle,Frey 83\] "A Prolog T_mplementation ofLexlcal Functional Grammar", Pros.
of L/CAI-83,PP.
693-695, 1983\[ Perelra, at.
al.
78\] "User' s Guide to D~CSystem- I0 Prolog", Department of ArtificialIntelligence, Univ.
of Edlnbur-:h, 1978\[Pereira,'.
;arren 30\] "Definite Clause Gr-~--_r forLanguage Analysis -- A Survey of the For~...allsm anda Comparison with Au~ented Transition -'.
'etworks",Artificial Intelligence, 13, PP.
231-278, I%80\[Steele 80\] "The Definition and !mpl-~uentation ofa Computer Pr ogr -~.unin~.
Lanzuase base~ onConstraints", .~ET AI-TR-595, 19~0361
