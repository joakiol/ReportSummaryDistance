Proceedings of the 12th European Workshop on Natural Language Generation, pages 9?15,Athens, Greece, 30 ?
31 March 2009. c?2009 Association for Computational LinguisticsTowards a Generation-Based Semantic Web Authoring ToolRichard PowerDepartment of ComputingOpen UniversityMilton Keynes, UKr.power@open.ac.ukAbstractWidespread use of Semantic Web tech-nologies requires interfaces through whichknowledge can be viewed and edited with-out deep understanding of DescriptionLogic and formalisms like OWL and RDF.Several groups are pursuing approachesbased on Controlled Natural Languages(CNLs), so that editing can be performedby typing in sentences which are automat-ically interpreted as statements in OWL.We suggest here a variant of this approachwhich relies entirely on Natural LanguageGeneration (NLG), and propose require-ments for a system that can reliably gen-erate transparent realisations of statementsin Description Logic.1 IntroductionWe describe here a simple prototype of an edit-ing tool that allows a user to create an ontologythrough an open-ended Natural Language inter-face.
By ?open-ended?
we mean that when intro-ducing class or property names into the ontology,the user also decides how they should be expressedlinguistically: thus the lexicon of the Natural Lan-guage interface is not predetermined.
The purposeof such a tool is to support knowledge editing onthe Semantic Web, which at present requires train-ing in graphical user interfaces like Prote?ge?
(Rec-tor et al, 2004), or direct coding in OWL and RDF.Linking OWL to Controlled Natural Language iscurrently the topic of an OWL1-1 task force, andseveral groups are already working in this area(Schwitter and Tilbrook, 2004; Thompson et al,2005; Bernstein and Kaufmann, 2006; Pool, 2006;Dongilli, 2007); the novelty in our approach is thatwe rely entirely on Natural Language Generation(NLG), extending the WYSIWYM (or ConceptualAuthoring) method (Power and Scott, 1998; Hal-lett et al, 2007) so that it supports knowledge edit-ing for ontologies as well as for assertions aboutindividuals.The idea of linking formal and natural lan-guages can be traced back to Frege (1879), whoobserved that mathematical proofs were made upof formulae interspersed with passages in natu-ral language, and invented formal logic as a wayof rendering these passages in a precise notation.With the arrival of Artificial Intelligence in the1950s, formal logic became the foundation forknowledge representation and automatic reason-ing ?
a trend leading to the recent concept of a?semantic web?
that would open up knowledge en-coding and utilisation to a world-wide community(Berners-Lee et al, 2001).
However, accessibleknowledge management requires accessible pre-sentation: hence the current interest in methods of?sugaring?
formal logic into natural language text(Ranta, 1994; Horacek, 1999), thus in a sense turn-ing Frege upside-down.1.1 Description LogicThe theoretical underpinning of OWL (and henceof the semantic web) is a discipline that evolvedunder various names in the 1980s and 1990s andis now called Description Logic (Baader et al,2003).
This refers not to a single logical language,but to a family of languages.
All of these lan-guages allow statements to be built from individu-als, classes and properties, but they differ in the re-sources provided in order to construct classes andproperties, thus allowing different balances to bedrawn between the conflicting demands of expres-siveness and tractability (i.e., decidability and ef-ficiency of reasoning).Figure 1 shows some common class construc-tors, using mathematical notation rather thanOWL syntax (which is equivalent, but muchlengthier).
There are in fact three versions ofOWL (Lite, DL and Full) which provide pro-9Description Syntaxatomic class A (etc.
)universal class >negation ?Cintersection C uDunion C unionsqDvalue restriction ?R.Cexists restriction ?R.Cenumeration {a}Table 1: Class constructorsgressively more constructors, not only for classesbut also for properties and axioms.
Having cho-sen the desired logic, the ontology builder isfree to introduce new atomic classes (and alsoproperties and individuals), which can be givenany name consistent with the RDF naming con-ventions (i.e., names must be Unique ResourceIdentifiers).
Thus a new class might be namedhttp://myontology.net/parent and a newproperty http://myontology.net/hasChild, al-though for brevity we will henceforth omit names-paces (i.e., parent, hasChild).
Statements aboutclasses can then be expressed by axioms, the mostimportant of which are C v D (C is subsumed byD) and C ?
D (C is equivalent to D).
For instance:(1) parent ?
person u ?hasChild.>(2) person v ?hasChild.personThe meanings are probably obvious: (1) a parent isdefined as a person with one or more children; (2)every person only has persons as children.
Notethat expressing these axioms in clear English is nottrivial ?
for instance, in (2) we must take care notto imply that every person has children.A collection of such axioms is called a TBox:intuitively, a TBox expresses concept defini-tions and generalisations.
Description Logicsalso contain names for individual instances (e.g.,Abraham, Isaac) and formulas expressing factsabout individuals: thus father(Abraham) wouldexpress class membership (?Abraham is a father?
),and hasChild(Abraham, Isaac) a relationshipbetween individuals (?Isaac is Abraham?s child?
).A collection of such assertions is called an ABox,and TBox and ABox together make up a Knowl-edge Base (KB).1.2 Reasoning servicesThe reason for proposing Description Logic as thefoundation for the Semantic Web is that it allowsfor efficient reasoning services.
Much effort is stillgoing into the mathematical task of proving decid-ability and efficiency results for increasingly ex-pressive dialects.
Informally, the standard reason-ing services are as follows:1.
Class Satisfiability: Checking whether in agiven KB it is possible for a class to have atleast one member.2.
Subsumption: Checking whether a givenKB implies a specified subsumption relation-ship between two classes.3.
Consistency: Checking whether a given KBis consistent.4.
Instance Checking: Checking whether agiven KB implies a specified ABox assertionthat an individual a belongs to a class C.Consider for instance the following miniature KB:man unionsq woman ?
personman v ?womanman(Abraham)In respect to this KB, a reasoning engine should beable to show (1) that the class man u woman isunsatisfiable, (2) that man is subsumed by person(man v person), (3) that the KB is consis-tent, and (4) that the assertion person(Abraham)holds.The ability to perform these reasoning tasks ef-ficiently can be exploited not only in applicationsthat utilize knowledge in problem-solving, but inknowledge editing and natural language genera-tion.
For instance, when an ontology builder addsa new axiom to a KB, the editor can run the sub-sumption and consistency checks and give feed-back on whether the axiom is informative, redun-dant, or inconsistent.
Or when producing a naturallanguage gloss for the class ?hasChild.female,the generator could choose between ?somethingwith at least one female child?
and ?someonewith at least one female child?
by checking thesubsumption relationship ?hasChild.female vperson.2 Aligning DL to CNLWe have explained informally the technical fea-tures of description logics.
Briefly, they includerules for constructing classes, axioms, and asser-tions about individuals; the resulting expressions10are interpreted through a relatively simple model-theoretic semantics (Baader et al, 2005).
Theyalso include efficient algorithms for performingreasoning tasks.
We now turn to issues in thedesign of Controlled Natural Languages (CNLs)which can be aligned with specific DLs, and thusserve as useful interfaces for working with com-plex formalisms like OWL and RDF.As a provisional list of requirements, we wouldsuggest the following:1.
Completeness: A sentence (or text) can begenerated for any axiom permitted by the DL.2.
Uniqueness: Different sentences are gener-ated for different axioms.3.
Transparency: Sentences in the CNL are ac-curately interpreted by human readers.4.
Fluency: Sentences in the CNL are inter-preted easily by human readers and judgednatural.5.
Interpretability: Sentences conforming tothe CNL can be automatically interpreted torecover the corresponding DL axiom.6.
Editability: Interactive texts in the CNL canbe manipulated by domain experts in order toextend and revise the KB.7.
Extensibility: Domain experts can extendthe CNL by linking lexical entries to new in-dividuals, classes or properties in the KB.Note that these are essentially practical require-ments, which concern the CNL?s role as an inter-face for a particular DL.
We see no reason to insistthat the alignment between DL and CNL shouldconform to general theories of natural language se-mantics.2.1 CompletenessIf we propose to use generated CNL as an inter-face to a knowledge base, it is important that gen-eration should be reliable.
A minimal test of re-liability is that the grammar and lexicon are com-plete, in the sense that they produce a text for anywell-formed semantic input.
Elsewhere, we havedescribed a generation method that allows com-pleteness to be checked by a computer program(Hardcastle and Power, 2008).
For any non-trivialDL the set of classes is infinite (e.g., through recur-sion on C uD or ?R.C); however, completenesscan be proved through an enumeration of all localcontexts for which a linguistic realisation rule isneeded.
As well as guaranteeing reliability, com-pleteness checking is obviously useful as an aid togrammar development.2.2 UniquenessAlthough necessary, completeness is not a suffi-cient condition on the grammar of a CNL, sinceit could be trivially met by generating the samestring (perhaps ?Hallo World?)
for any semantic in-put.
It would also be useful to have an automaticcheck that the same sentence is not generated fortwo different semantic inputs ?
i.e., that everysentence in the CNL has a unique meaning.
Thisseems a harder problem than completeness, andwe have not seen any proposals on how it could bedone.To pose this problem precisely we would needto define what is meant by ?different?
semantic in-puts.
Complex class descriptions can be manipu-lated by well-known logical equivalences like DeMorgan?s laws: for instance, ?
(C u D) is equiv-alent to (?C) unionsq (?D).
Should these be treated asdifferent inputs or the same input?
We think userswould probably prefer them to be treated as differ-ent, but the issue needs to be investigated further.2.3 TransparencyTransparency is obviously at the heart of the en-terprise: completeness and uniqueness proofs areno help if the generated texts are unclear to humanreaders.
Unlike the preceding requirements, trans-parency is a matter of degree: we cannot expect,far less prove, that every sentence in the CNL willbe accurately understood by all target users on alloccasions.
Transparency can only be assessed, andgradually improved, through experiments and userfeedback.2.4 FluencyFluency is another aspect of readability: whereastransparency concerns accuracy of interpretation,fluency concerns ease.
These requirements poten-tially conflict.
For instance, to express the axiomparent v ?hasChild.> fluently we could say?every parent has a child?, while for transparencywe might prefer the pedantic ?every parent has oneor more children?.
In a CNL designed for editinga KB, transparency will have priority, but one canimagine other purposes (e.g., an informal report)for which fluency would matter more.112.5 InterpretabilityThis is an essential requirement for knowledge ed-itors that rely on automatic parsing and interpreta-tion of texts typed in by human authors (Schwit-ter and Tilbrook, 2004; Bernstein and Kaufmann,2006).
A recent innovation has been to pursue thegoal of ?roundtripping?
(Davis et al, 2008), so thata CNL text can be generated from an existing on-tology, revised in a text editor, and then interpretedautomatically to obtain an updated ontology in theoriginal format.
For our approach, which relies en-tirely on generation, automatic interpretability isnot essential (although one can imagine contextsin which it would be useful, for instance to allowknowledge encoding outside the NLG-based edit-ing environment).2.6 EditabilityThe key feature of Conceptual Authoring (WYSI-WYM) is that editing operations are defined on thesemantic input, not the text.
This means that au-thors cannot produce a text in the normal way bytyping in words from left to right.
Some kind ofnon-specific initial configuration has to be grad-ually refined through semantic distinctions madeby choices from menus (an example will be givenlater).
To validate the approach, it has to beshown that this editing process is efficient and eas-ily learned.
Usability results from ABox editingapplications have been encouraging (Hallett et al,2007), but whether similar results can be achievedfor KB editing (TBox as well as ABox) remainsunproven.2.7 ExtensibilityOntology development requires that authorsshould be able to introduce new terms for indi-viduals, classes and properties.
The designer of aCNL-based editor cannot foresee what these termswill be, and therefore cannot provide a mapping tosuitable lexical entries.
This must be done by theontology developer, and take-up accordingly de-pends on making this task not only feasible buteasy (Hielkema et al, 2007).
We will explore twoideas on how this might be done: (a) providing awide-coverage lexicon from which users can se-lect words to extend the CNL, and (b) using con-ventions for controlling the naming of classes andproperties, so that the two decisions (term name,CNL lexical entry) become essentially a single de-cision.3 Editing processAs a first experiment we have written a Prologprogram which allows a KB to be built up fromscratch for a very simple DL with only one kindof statement (C v D), four class constructors(A, >, ?R.C, {a}), and one property construc-tor (property inversion, which will be explainedshortly).
Using just these resources we can formu-late ABox assertions as well as TBox axioms bythe trick of representing individuals through enu-merated classes.
For instance, man(Abraham)can be asserted through the axiom {Abraham} vman (the class containing only Abraham is a sub-class of the class of men).A generic grammar is provided for realisingaxioms and complex class descriptions (a hand-ful of rules suffices); the grammar assumes thatthe words for realising individuals, atomic classesand properties will conform to the following (verystrict) regulations:1.
Individuals are realised by proper names2.
Atomic classes are realised by count nouns3.
Properties are realised either by transitiveverbs or by count nounsWe also simplify by assuming that the name of ev-ery atomic term in the DL is identical to the rootform of the word realising the term ?
for instance,the count noun realising the class person will be?person?.When the editor is launched there are no indi-viduals, atomic classes or properties, and the onlyword in the lexicon is ?thing?, which denotes theclass > (i.e., the class containing all individuals).The KB is construed as a sequence of axioms, andto start the ball rolling it is seeded with a singlevacuous axiom > v >.
The program generates asentence expressing this axiom and adds a list ofediting options as follows:1: Every thing/1 is a thing/2.t Add a new terma Add a new axiomA/C Edit class C in axiom AA/d Delete axiom ANote that in every sentence expressing an axiom,the head word of every span denoting a class isgiven a numerical label; in a simple Prolog inter-face this allows the class to be selected for edit-ing.
There is no point in attempting any edit-ing yet, since no terms have been introduced.12Word Syntax TypeMary name individualpet noun classanimal noun classown verb propertyTable 2: Lexical entries for termsThe user should therefore choose option t to adda new term.
This is done by specifying threethings: a word (any string), a syntactic category(either name, noun, or verb), and a logical type(individual, class, or property).
In this waythe user might define the set of terms in figure 2from the people+pets domain, which will be fa-miliar to students of Description Logic.Editing of the axiom > v > can now begin.Assuming that the target is pet v animal, theuser first selects the first class in the first axiomby typing 1/1 (in a GUI this would be done sim-ply by clicking on the word).
The program re-turns a menu of substitutions computed from thecurrent ontology and expressed in English phrasesadapted to the context of the selected class:1 Mary2 Every pet3 Every animal4 Everything that owns one or more things5 Everything owned by one or more thingsThese phrases express respectively the classes{Mary}, pet, animal, ?own.> and ?own?1.>which can be formed from the terms in figure 2.Note that the last class results from the inversion ofthe property own: if own(a, b) means that a ownsb, the inverse own?1(a, b) means that b owns a ?a relationship that can conveniently be expressedby passivisation (a is owned by b).When the user chooses option 2 (in a GUI thiswould of course be done by clicking on the menuitem), the program updates the knowledge baseand regenerates:1: Every pet/1 is a thing/2Selecting the second class by typing 1/2 nowyields the same menu of options, differentlyphrased to suit the different context of the classin the axiom:1 Mary2 a pet3 an animal4 owns one or more things5 is owned by one or more thingsChoosing option 3 completes the first axiom, afterwhich the user can use the option a (see above) toobtain a second default axiom for editing:1: Every pet/1 is an animal/22: Every thing/1 is a thing/2A similar series of operations on the second ax-iom (starting by selecting 2/1) might then yieldthe following:1: Every pet/1 is an animal/22: Mary/1 owns/2 one or more pets/3Even in such a simple example, we can see howediting could be supported by the reasoning ser-vices.
For instance, if the user added a third ax-iom ?Mary owns one or more animals?, the pro-gram could point out that this is redundant, since{Mary} v ?own.animal can be deduced frompet v animal and {Mary} v ?own.pet.4 DiscussionWe have shown through a small prototype how aKB could be built up from scratch using an NLG-based authoring tool, with the lexicon almost en-tirely specified by the ontology developer.
Al-though modest in scope, the prototype extendsprevious work on Conceptual Authoring (WYSI-WYM) in several ways:?
It allows editing of the TBox as well asthe ABox, by defining editing operations onclasses rather than individuals (with individ-uals treated as singleton enumerated classes).?
It allows users to extend the CNL through theconstrained choice of words/phrases to ex-press new individuals, classes and properties.?
It allows feedback based on reasoning ser-vices (e.g, on whether a new axiom is incon-sistent, informative or redundant).An obvious objection to our approach is thatwe are increasing the load on users by requiringthem to build not only a KB but also a CNL lexi-con.
Much will therefore depend on the tools thatsupport users in the latter task.
Ideally, the con-struction of a lexical entry would depend on mak-ing a single selection from a wide-coverage lexi-con that has already been built by computationallinguists.
However, although this ideal is feasiblefor classes and properties like pet and own whichcan be mapped to single words, any encounterwith real ontologies is likely to reveal terms likehasDietaryPreference that would have to be13expressed by a phrase.
Probably there are solu-tions to this problem ?
one could imagine forinstance an algorithm that builds new entries in aphrasal lexicon from examples ?
but they remainto be demonstrated and tested.More generally, an important question iswhether such a method will scale up.
It seems towork reasonably well in the above example witha handful of class constructors, terms and axioms,but what happens when we tackle an expressiveDL like OWL Full, and support the editing of aKB with thousands of terms and axioms?As regards more expressive DLs, we have al-ready cited promising work on developing CNLsfor OWL.
As one might expect, the Boolean classconstructors (CuD, CunionsqD, ?C) can lead to prob-lems of structural ambiguity, e.g.
in a descriptionlike old u (man unionsq woman).
Here an NLG-basededitor should have the advantage over one that re-quires human authoring of texts, since it can applythe best available aids of punctuation and format-ting (Hallett et al, 2007), a task that would requiregreat care and skill from human authors.Increasing the number of terms would mean thatduring editing, classes had to be selected fromthousands of alternatives; some kind of searchmechanism would therefore be needed.
A simplesolution already used in WYSIWYM applications(Bouayad-Agha et al, 2002; Hallett et al, 2007;Evans et al, 2008) is a menu equipped with a textfield allowing users to narrow the focus by typ-ing in some characters from the desired word orphrase.
In an ontology editor this search mech-anism could be enhanced by using the ontologyitself in order to pick options that are concep-tual rather than orthographic neighbours ?
for in-stance on typing in ?dog?
the user would obtain afocussed list containing ?poodle?
and ?pekingese?as well as ?doggerel?.Increasing the number of axioms has no ef-fect on the editing process, since we are assum-ing that axioms will be realised by separate sen-tences, each generated without regard to context.However, a text comprising a long list of unor-ganised axioms hardly makes for easy reading ornavigation.
There is therefore potential here fora more interesting application of NLG technologythat would draw on topics like generation of refer-ring expressions, pronominalisation, aggregation,discourse planning, and summarisation.
Present-ing a KB through a fluent and well-organised re-port would give users a valuable return on their ef-forts in linking terms to lexical entries, and wouldaddress a pressing problem in ontology building?
how to maintain trasparency in an ontologyas it expands, possibly through contributions frommultiple users.In a word, the advantage of applying NLG inthis area is flexibility.
Once we have a mappingfrom logical terms to lexical entries in Englishor another natural language, we can tailor gener-ated texts to different tasks in knowledge manage-ment, using fluent organised reports for purposesof overview and navigation, and short pedanticallyprecise sentences for editing ?
backed up if nec-essary with footnotes explaining unintuitive log-ical implications in detail, or painstakingly for-matted Boolean constructions that avoid potentialstructural ambiguities.ReferencesFranz Baader, Diego Calvanese, Deborah L. McGuin-ness, Daniele Nardi, and Peter F. Patel-Schneider,editors.
2003.
The Description Logic Handbook:Theory, Implementation, and Applications.
Cam-bridge University Press.F.
Baader, I. R. Horrocks, and U. Sattler.
2005.
De-scription logics as ontology languages for the se-mantic web.
Lecture Notes in Artificial Intelligence,2605:228?248.T.
Berners-Lee, J. Hendler, and O. Lassila.
2001.
Thesemantic web.
Scientific American, 284(5):34?43.A.
Bernstein and E. Kaufmann.
2006.
GINO ?
aguided input natural language ontology editor.
InProceedings of the 5th International Semantic WebConference, Athens, Georgia.Nadjet Bouayad-Agha, Richard Power, Donia Scott,and Anja Belz.
2002.
PILLS: Multilingual gener-ation of medical information documents with over-lapping content.
In Proceedings of the Third In-ternational Conference on Language Resoures andEvaluation (LREC 2002), pages 2111?2114, LasPalmas.Brian Davis, Ahmad Ali Iqbal, Adam Funk, ValentinTablan, Kalina Bontcheva, Hamish Cunningham,and Siegfried Handschuh.
2008.
Roundtrip ontol-ogy authoring.
In International Semantic Web Con-ference, volume 5318 of Lecture Notes in ComputerScience, pages 50?65.
Springer.Paolo Dongilli.
2007.
Discourse Planning Strategiesfor Complex Concept Descriptions.
In Proceedingsof the 7th International Symposium on Natural Lan-guage Processing, Pattaya, Chonburi, Thailand.14R.
Evans, P. Piwek, L. Cahill, and N. Tipper.
2008.Natural Language Processing in CLIME, a Multi-lingual Legal Advisory System.
Journal of NaturalLanguage Engineering, 14(1):101?132.Gottlob Frege.
1879.
Begriffsschrift.
Halle.Catalina Hallett, Donia Scott, and Richard Power.2007.
Composing queries through conceptual au-thoring.
Computational Linguistics, 33(1):105?133.D.
Hardcastle and R. Power.
2008.
Fast, Scalableand Reliable Generation of Controlled Natural Lan-guage.
In Proceedings of SETQA-NLP Workshop atthe 46th Annual Meeting of the Association for Com-putational Linguistics, Ohio, US.F.
Hielkema, C. Mellish, and P. Edwards.
2007.
UsingWYSIWYM to create an open-ended interface forthe semantic grid.
In Proceedings of the 11th Eu-ropean Workshop on Natural Language Generation,Schloss Dagstuhl.Helmut Horacek.
1999.
Presenting Proofs in aHuman-Oriented Way.
In Proceedings of the 16thInternational Conference on Automated Deduction,pages 142?156, London, UK.
Springer-Verlag.J.
Pool.
2006.
Can controlled languages scale to theweb?
In 5th International Workshop on ControlledLanguage Applications (CLAW?06), Boston, USA.R.
Power and D. Scott.
1998.
Multilingual authoringusing feedback texts.
In Proceedings of the 17th In-ternational Conference on Computational Linguis-tics and 36th Annual Meeting of the Association forComputational Linguistics, pages 1053?1059, Mon-treal, Canada.Aarne Ranta.
1994.
Type theory and the informal lan-guage of mathematics.
In Proceedings of the 1993Types Worshop, Nijmegen, LNCS 806, pages 352?365.
Spinger Verlag.Alan Rector, Nick Drummond, Matthew Horridge,Jeremy Rogers, Holger Knublauch, Robert Stevens,Hai Wang, and Chris Wroe.
2004.
OWL Pizzas:Practical Experience of Teaching OWL-DL: Com-mon Errors and Common Patterns.
In 14th Interna-tional Conference on Knowledge Engineering andKnowledge Management, pages 63?81.R.
Schwitter and M. Tilbrook.
2004.
Controlled nat-ural language meets the semantic web.
In Pro-ceedings of the Australasian Language TechnologyWorkshop, pages 55?62, Macquarie University.C.
Thompson, P. Pazandak, and H. Tennant.
2005.Talk to your semantic web.
IEEE Internet Comput-ing, 9(6):75?78.15
