Proceedings of NAACL HLT 2007, Companion Volume, pages 61?64,Rochester, NY, April 2007. c?2007 Association for Computational LinguisticsRelationship between Non-Projective Edges, their Level Types,and Well-NestednessJir??
HavelkaInstitute of Formal and Applied LinguisticsCharles University in Prague, Czech Republichavelka@ufal.mff.cuni.czAbstractDependency analysis of natural languagegives rise to non-projective structures.The constraint of well-nestedness on de-pendency trees has been recently shownto give a good fit with empirical linguis-tic data.
We present a reformulation ofthis constraint using properties of non-projective edges and show its formal re-lationship to level types of non-projectiveedges; we also derive a simple O(n2) al-gorithm for checking well-nestedness.1 IntroductionDependency analysis of natural language has beengaining an ever increasing interest thanks to its ap-plicability in many tasks of NLP?a recent exampleis the dependency parsing work of McDonald et al(2005), which introduces an approach based on thesearch for maximum spanning trees, capable of han-dling non-projective structures naturally.In this context, the issue of delimiting dependencystructures permissible in natural language grows inimportance (see e.g.
Nivre (2006)).
We would liketo point out that since neither syntactic structures independency treebanks, nor structures arising in de-pendency parsing need a priori fall into any formalsubclass of dependency trees, we need means of de-scribing any non-projective structure.11The importance of such means is evident from the asymp-totically negligible proportion of projective trees to all depen-dency trees.
(Unrestricted dep.
trees (i.e.
labelled rooted trees),Kuhlmann and Nivre (2006) compare several con-straints on dependency structures and among theconsidered ones find well-nestedness to be in goodaccord with empirical data.
However, they do not in-clude level types of non-projective edges introducedby Havelka (2005), which present another means ofcharacterizing any non-projective structure and haveinteresting formal properties.
We link properties ofnon-projective edges and their level types to the con-straint of well-nestedness and show that they providea more fine-grained means capable of capturing it.The paper is organized as follows: Sect.
2 con-tains formal preliminaries; Sect.
3 and 4 review def-initions and show the necessary properties of theconstraint of well-nestedness and level types of non-projective edges; Sect.
5 presents the main resultsconcerning the relationship between non-projectiveedges (and their level types) and well-nestedness.2 Formal preliminariesTo make the paper as self-contained as possible, weprovide a concise reference with definitions and sim-ple properties used in subsequent sections.Definition 1 A dependency tree is a triple(V,?,"), where V is a finite set of nodes, ?
a de-pendency relation on V , and " a total order on V .Relation?
models linguistic dependency, and sorepresents a directed, rooted tree on V .
There aremany ways of characterizing rooted trees, we givehere a characterization via the properties of?
: thereis a root r?V such that r??
v for all v?V and therewell-nested dep.
trees, and projective dep.
trees are counted bysequences A000169, A113882, and A006013 (offset 1), resp.,in the On-Line Encyclopedia of Sequences (Sloane, 2007).
)61is a unique edge p?
v for all v ?V , v %= r.
Relation??
is the reflexive transitive closure of ?
and isusually called subordination.The following definitions allow us to formulateour results succinctly.
For each node i we defineits level as the length of the path r ??
i; we de-note it leveli.
The symmetrization ?
= ???
?1makes it possible to talk about edges (pairs of nodesi, j such that i ?
j) without explicitly specifyingthe parent (head etc.
; i here) and the child (de-pendent etc.
; j here); so ?
represents directededges and ?
undirected edges.
To retain the abil-ity to talk about the direction of edges, we defineParenti?
j ={i if i?
jj if j?
iand Childi?
j ={j if i?
ji if j?
i.Our notation for rooted subtrees is Subtreei = {v ?V | i??
v}, Subtreei?
j = {v?V | Parenti?
j ??
v},and for ancestors Anci = {v ?V | v??
i}, Anci?
j ={v ?
V | v ??
Parenti?
j}.
To be able to talk con-cisely about the total order on nodes ", we de-fine open and closed intervals whose endpoints neednot be in a prescribed order: (i, j) = {v ?
V |min"{i, j} ?
v ?
max"{i, j}} and [i, j] = {v ?
V |min"{i, j} " v " max"{i, j}}, resp.
For any edgei?
j we define its gap as follows Gapi?
j = {v ?V | v ?
(i, j) & v /?
Subtreei?
j}.
An edge with anempty gap is projective, an edge whose gap is non-empty is non-projective.
(See e.g.
(Havelka, 2005)for the characterization of projectivity via propertiesof edges and further references.
)Property 2 Let a be a node and i ?
j any edgedisjoint from a.
Then i ?
Subtreea ?
j ?
Subtreea.PROOF.
From the assumption i %= a %= j it followsthat i, j ?
Subtreea ?
Parenti?
j ?
Subtreea.Proposition 3 Let i?
j, u?
v be disjoint edges.
(i) If u,v ?
(i, j), then u ?
Gapi?
j ?
v ?
Gapi?
j .
(ii) If u ?
Gapi?
j and v /?
Gapi?
j , then v /?
[i, j].PROOF.
(i) follows immediately from the definitionof Gapi?
j and Property 2.
To prove (ii), assume v ?
(i, j) and using (i) arrive at a contradiction.3 Well-nestednessKuhlmann and Nivre (2006) claim that the constraintof well-nestedness seems to approximate well de-pendency structures occurring in natural language.Definition 4 A dependency tree T is ill-nested ifthere are disjoint subtrees T1, T2 of T and nodesx1,y1 ?
T1 and x2,y2 ?
T2 such that x1 ?
(x2,y2) andx2 ?
(x1,y1).
A dependency tree T that is not ill-nested is well-nested.2It is easy to express the constraint in terms ofedges?it will prove crucial in Sect.
5.Theorem 5 A dependency tree T is ill-nested iffthere are edges i1 ?
j1, i2 ?
j2 in disjoint subtreesT1, T2 of T , resp., such that i1 ?
(i2, j2), i2 ?
(i1, j1).PROOF.
Direction?
is obvious.Direction ?
: Let ri be the root of Ti.
To findi1 ?
j1, first suppose that r1 ?
(x2,y2).
Consider thefirst edge vk ?
vk+1 on the downward path v0 = r1,v1, .
.
.
,vm = y1, m > 0, such that vk ?
(x2,y2) andvk+1 /?
[x2,y2].
If r1 /?
[x2,y2], consider the first edgevk+1 ?
vk on the upward path v0 = x1,v1, .
.
.
,vn =r1, n > 0, such that vk ?
(x2,y2) and vk+1 /?
[x2,y2].Let us denote i1 = vk and j1 = vk+1, and possibly re-name x2,y2 so that i1 ?
(x2,y2) and x2 ?
(i1, j1).
Tofind i2 ?
j2 such that i1 ?
(i2, j2), i2 ?
(i1, j1), pro-ceed similarly as above.
Obviously, edges i1 ?
j1,i2 ?
j2 are in disjoint subtrees.4 Level types of non-projective edgesLevel types of non-projective edges allow theirstructural classification with interesting formal prop-erties.
They were introduced by Havelka (2005),who presents them in more detail.Definition 6 The level type (or just type) of a non-projective edge i?
j is defined as followsTypei?
j = levelChildi?
j ?minn?Gapi?
j leveln .The type of an edge is the distance of its childnode and a node in its gap closest to the root (dis-tance here means difference in levels)?for sampleconfigurations see Figure 13.
Note that there maybe more than one node witnessing an edge?s type.The type of an edge is not bounded?it can take anyinteger value (depending on the height of a tree).Our definition of level type of non-projectiveedges extends naturally the original definition im-2The original definition requires x1 ?
x2 ?
y1 ?
y2, howeverour equivalent formulation leads to shorter theorems and proofs.3We adopt the following convention: nodes are drawn top-down according to their increasing level, with nodes on thesame level on the same horizontal line; nodes are drawn fromleft to right according to the total order on nodes; edges aredrawn as solid lines, paths as dotted curves.
We assume that nonode on a path lies in the span of an edge the path crosses.62positive type type 0 negative typeFigure 1: Sample non-projective edgesplicit in (Havelka, 2005), where classes correspond-ing to positive, zero and negative types are defined.We now show a relationship between edges of cer-tain types that will allow us to derive a relationshipbetween non-projective edges and well-nestedness.Theorem 7 For any non-projective edge i?
j in adependency tree T with Typei?
j ?
0 (< 0) there isa non-projective edge v?
u in T with Typeu?v ?
0(> 0) such that u ?
argminn?Gapi?
j leveln and eitheri ?
Gapu?v, or j ?
Gapu?v.PROOF.
Let u be any node in argminn?Gapi?
j leveln.From the assumption Typei?
j ?
0 node u has a par-ent v /?
Gapi?
j.
Obviously i ?
j, v ?
u are dis-joint, thus from Proposition 3 we have v /?
[i, j], andso either i ?
(u,v), or j ?
(u,v).
Since levelv ?levelParenti?
j , we have that Parenti?
j /?
Subtreev, andso either i ?
Gapu?v, or j ?
Gapu?v.
Finally fromTypei?
j ?
0 (< 0) we get levelu?
levelChildi?
j ?
0(> 0), hence Typeu?v ?
0 (> 0).5 Well-nestedness & non-projective edgesWe give characterizations of well-nestedness solelyin terms of properties of non-projective edges andshow some applications.5.1 Characterization using pairs of edgesFirst we give a characterization of pairs of edges inTheorem 5 in terms of their gaps.Theorem 8 Let i1 ?
j1, i2 ?
j2 be two edges in adependency tree T .
They are in disjoint subtrees T1,T2, resp., and satisfy i1 ?
(i2, j2), i2 ?
(i1, j1) iff thefollowing condition holds(inp) i1 ?
Gapi2?
j2 & i2 ?
Gapi1?
j1 .PROOF.
Direction ?
: Root Tk in Parentik?
jk , k =1,2.
Condition (inp) obviously implies i1 ?
(i2, j2),i2 ?
(i1, j1), which in turn implies that edges i1?
j1,i2 ?
j2 are disjoint.
From Property 2 we get thatboth Parenti2?
j2 /?
Subtreei1?
j1 and Parenti1?
j1 /?Subtreei2?
j2 , hence subtrees T1, T2 are disjoint.Direction ?
: Let us consider the edge i2 ?
j2and node i1.
Since T1 is disjoint from T2, we havethat i1 /?
Subtreei2?
j2 , and therefore i1 ?
Gapi2?
j2 .The proof that i2 ?
Gapi1?
j1 is analogous.Condition (inp) allows us to talk about pairs ofedges causing ill-nestedness and so characterizewell-nestedness using properties of pairs of edges.Definition 9 We say that any two non-projectiveedges i1 ?
j1, i2 ?
j2 in a dependency tree T sat-isfying condition (inp) form an ill-nested pair ofedges.Corollary 10 A dependency tree T is ill-nested iff itcontains an ill-nested pair of edges.PROOF.
Follows from Theorems 5 and 8.5.2 Sufficient condition for ill-nestednessThe results of Section 4 and previous subsection givethe following relationship between types of non-projective edges and well-nestedness.Theorem 11 If a dependency tree contains a non-proj.
edge of nonpositive type, then it is ill-nested.PROOF.
Follows from Theorems 7 and 10.We see that types of non-projective edges andwell-nestedness share a common ground; however,the statement of Theorem 11 cannot be strengthenedto equivalence (it is easy to see that also two edgesof positive type can satisfy (inp)).5.3 Characterization using single edgesNow we show that well-nestedness can be character-ized in terms of properties of single non-projectiveedges only.
We define the ill-nested set of an edgeand show that it gives the desired characterization.Definition 12 The ill-nested set of any edge i?
jis defined as followsIni?
j = {u?
v | u ?
Gapi?
j & v /?
[i, j]& u,v /?
Anci?
j} .The next proposition exposes the relationship ofedges in Ini?
j to the gap of i?
j.Proposition 13 For any edge i?
j Ini?
j = {u?
v |u ?
Gapi?
j & v /?
Gapi?
j & u,v /?
Anci?
j}.PROOF.
The inclusion ?
is obvious.
The inclusion?
follows from Proposition 3 (u ?
Gapi?
j and v /?Anci?
j imply that edges i?
j, u?
v are disjoint).63We are ready to formulate the main result of thissection, which gives as corollary a characterizationof well-nestedness using properties of single edges.Theorem 14 Let i?
j be an edge in a dependencytree T .
The edges that form an ill-nested pair withthe edge i?
j are exactly the edges in Ini?
j .PROOF.
Direction?
: Let u?
v be an edge formingan ill-nested pair with the edge i?
j, i.e.
i?Gapu?vand u?Gapi?
j.
This implies i?
(u,v) and u?
(i, j),which immediately gives v /?
[i, j].
Supposing u ?Anci?
j or v ?
Anci?
j we get i ?
Subtreeu?v, whichis in contradiction with i ?
Gapu?v, and thereforeu,v /?
Anci?
j.
Hence u?
v ?
Ini?
j.Direction?
: Let u?
v ?
Ini?
j (i.e.
u ?
Gapi?
j,v /?
[i, j], and u,v /?
Anci?
j; without loss of gen-erality assume i ?
(u,v)).
From the assumptionsu ?
Gapi?
j and v /?
[i, j] we get that edges i ?
j,u?
v are disjoint.
Using Property 2, from the as-sumption u,v /?
Anci?
j we get i /?
Subtreeu?v, thusi ?
Gapu?v.
Hence i?
j, u?
v satisfy (inp).Corollary 15 A dependency tree T is ill-nested iffIni?
j %= /0 for some non-projective edge i?
j in T .PROOF.
Follows from Theorems 8 and 14.5.4 Checking well-nestednessOur characterization of well-nestedness gives also anovel way of checking it.
Here is a pseudocode ofan algorithm for fully determining all ill-nested sets:1: for all edges i?
j do2: for all edges u?
v s.t.
u ?
(i, j) do3: check u?
v ?
Ini?
jIts time complexity is obviously O(n2), since thecheck on line 3 can be implemented so as to takeconstant time (by precompuing ?
?, which can bedone in O(n2) time).
The bound is the sameas for the reported algorithms for checking well-nestedness (M?hl, 2006).However, the following theorem allows well-nestedness checking to be linear for projective trees,to be faster for random input, and to remain O(n2).Theorem 16 In any ill-nested pair of edges, at leastone of the edges is of nonnegative type (witnessed byan end-point of the other edge).PROOF.
Let i1 ?
j1, i2 ?
j2 satisfy (inp).
Letus suppose that levelChildi1?
j1 ?
levelChildi2?
j2 .
SincelevelChildu?v ?
levelu for any edge u ?
v, we havethat levelChildi1?
j1 ?
leveli2 , and hence Typei1?
j1 ?0.
If levelChildi1?
j1 ?
levelChildi2?
j2 , it is analogouslyproved that i2 ?
j2 is of nonnegative type.Havelka (2005) presents a linear algorithm forfinding all non-projective edges of nonnegative type.Thus well-nestedness can be checked as follows:first find all edges of nonnegative type, and thencheck their ill-nested sets for non-emptiness.
Com-puting ??
on demand for subtrees of the processededges, we preserve worst-case quadratic complexity.6 ConclusionWe have presented new formal results linking prop-erties of non-projective edges and their level types towell-nestedness.
This work extends the current bodyof research on non-projective dependency structuresin natural language.
In particular, we offer new in-sights into formal properties of non-projective edgesthat, if possible, both provide adequate means forlinguistic description and at the same time are use-ful as features in machine-learning approaches.Acknowledgement This work was supported byprojects 1ET201120505 of the Ministry of Edu-cation of the Czech Republic and 374/2005/A-INF/MFF of Grant Agency of Charles University.ReferencesJir??
Havelka.
2005.
Projectivity in Totally OrderedRooted Trees: An Alternative Definition of Projec-tivity and Optimal Algorithms for Detecting Non-Projective Edges and Projectivizing Totally OrderedRooted Trees.
Prague Bulletin of Mathematical Lin-guistics, 84:13?30.Marco Kuhlmann and Joakim Nivre.
2006.
Mildly Non-Projective Dependency Structures.
In Proceedings ofCOLING/ACL, pages 507?514.Ryan McDonald, Fernando Pereira, Kiril Ribarov, andJan Hajic?.
2005.
Non-Projective Dependency Pars-ing using Spanning Tree Algorithms.
In Proceedingsof HLT/EMNLP, pages 523?530.Mathias M?hl.
2006.
Drawings as models of syntac-tic structure: Theory and algorithms.
Diploma thesis,Programming Systems Lab, Universit?t des Saarlan-des, Saarbr?cken.Joakim Nivre.
2006.
Constraints on Non-Projective De-pendency Parsing.
In Proc.
of EACL, pages 73?80.Neil J.
A. Sloane.
2007.
On-Line Encyclopediaof Integer Sequences.
Published electronically atwww.research.att.com/~njas/sequences/.64
