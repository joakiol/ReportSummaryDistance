Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics?System Demonstrations, pages 61?66,Berlin, Germany, August 7-12, 2016.c?2016 Association for Computational LinguisticsJEDI: Joint Entity and Relation Detection using Type InferenceJohannes Kirschnick1, Holmer Hemsen1, Volker Markl1,21DFKI Project Office Berlin, Alt-Moabit 91c, Berlinfirstname.lastname@dfki.de2Technische Univerist?at BerlinDatabase Systems and Information Management GroupEinsteinufer 17, 10587 Berlin, Germanyfirstname.lastname@tu-berlin.deAbstractFREEBASE contains entities and relationinformation but is highly incomplete.
Rel-evant information is ubiquitous in webtext, but extraction deems challenging.
Wepresent JEDI, an automated system tojointly extract typed named entities andFREEBASE relations using dependencypattern from text.
An innovative methodfor constraint solving on entity types ofmultiple relations is used to disambiguatepattern.
The high precision in the evalua-tion supports our claim that we can detectentities and relations together, alleviatingthe need to train a custom classifier for anentity type1.1 IntroductionFinding, tagging and extracting relations in webtext is one of the more challenging tasks in In-formation Extraction (IE).
It consists of correctlylabeling entities as instances of a particular type(such as Person, Organization or Location) and de-tecting relations between them, such as worksIn,bornIn or even more fine grained ones such as re-ceiveDegree.
These relations are stored for fur-ther analysis in knowledge bases, but often exist-ing ones are highly incomplete.
Min et al (2013)report that in the collaborative-edited FREEBASE2knowledge base 93.8% of the person entities aremissing a place of birth entry.
To close the cap au-tomated methods are needed that can detect theserelations, by analyzing the abundance of web text.A typical process to detect relations uses thelinking words (pattern) between two entities to la-bel a relation, but this poses the challenge of deal-ing with ambiguous pattern.1Demonstrator is available at jedi.textmining.tu-berlin.de2Freebase is available at www.freebase.comDependencyParse Detect RelationsCreate CandidateMultigraphPattern CorpusInput Text Entities and RelationsJEDI SystemFigure 1: JEDI System Overview.
Text is anno-tated with dependency information.
Candidate en-tities connecting shortest path pattern are scoredagainst a corpus.
Constraint solving on the rela-tion types resolves ambiguities and determines thefinal relations.Consider the following sentences that both con-tain the pattern receive indicating completely dif-ferent relations: ?Bill received his B.A.
in Bibli-cal Studies from Wheaton College.
?, and ?Leo re-ceived an Oscar for Revenant.
?.The first sentence contains the binary relationreceiveDegree, linking a person to a degree, butin the second, the same pattern indicates the per-sonAward relation.
To correctly disambiguate, weneed to incorporate context.
This paper proposesthe novel method of using the entity types of mul-tiple binary relations to solve the disambiguation.Motivation Typically labeling relations and en-tities is done in sequence, leading to a pipelinearchitecture which first detects entities and subse-quently tries to link them to extract relations.
Asdetection errors can easily propagate, there is po-tential in executing these steps jointly.
It is drivenby the motivation that instead of focusing on indi-vidual binary assignments, multiple entities foundin the text can be used to constraint and restricteach other?s entity and relation types.Figure 1 shows an overview of the entire solu-tion.
Entity mentions and potential relations indi-61cated by a pattern form a multi graph.
Selectinga particular type for an entity prunes the numberof potential relations that this entity can partici-pate in.
Furthermore, having established a relationbetween a pair of entities further restricts the po-tential relations that can hold between any otherentity and one of the pair?s members due to in-ferred type restrictions.
Thus all candidate entitiesin a sentence are considered together to support orrestrict any contained relations.Contributions This paper presents and evalu-ates JEDI a system to translate the relation detec-tion problem into a constraint satisfaction prob-lem.
The graph of entities and potential relationsforms a resolution graph, where each entity is con-strained on the potential types it can hold.
Solv-ing this problem jointly resolves entity and rela-tion types without training an entity classifier, al-lowing to detect the large number of relation andtypes defined in FREEBASE.The evaluation shows high precision across avariety of texts and relations.
We furthermore re-lease the implementation as open source and pro-vide a web demonstrator to showcase the system.2 Related WorkMost prominent for relation extraction is the ideathat entities that co-occur with a similar contexthave similar meanings, driven by the distribu-tional hypothesis (Harris, 1954).
The shortestpath kernel is a good estimator for approximat-ing the distribution and has been used by Bunescuand Mooney (2005).
Culotta and Sorensen (2004)showed that it is possible to train a relation clas-sifier on the extracted pattern to predict a smallnumber of relations.Kate and Mooney (2010) proposed a card styleresolution algorithm, which infers recursively themost probable relation assignment for a given en-tity pair, but still requires an entity classifier andonly works for a small number of relations.Mintz et al (2009) proposed to use clusteringto group together entity co-occurrences based ontheir shortest path, to extract relation types.
Thiseliminates the need for a classifier for relation de-tection, but requires one for entity extraction.
Pat-tern can only be assigned to one relation and thuscapture only the most dominating meaning.
Theproblem of relation extraction can also be solvedusing matrix decomposition, as shown by Riedelet al (2013).
Their work targets FREEBASE rela-tions, but demands a complex training step whichdecomposes the co-occurrence matrix and is de-pendent on the text domain as well.The SOFIE system (Suchanek et al, 2009) useslogical reasoning to find instances of a relationin text.
It does not require any pre-training as itlearns the extraction rules alongside the relationdetection, but is limited in the amount of data itcan process, because of the costly resolution step.Similar to our approach Singh et al (2013) pro-posed to model the entity tagging and relation ex-traction problem jointly, using belief propagationto find relation instances, but targeting a muchsmaller number of relations.
The idea to incorpo-rate types into the relation extraction process wasexplored by Koch et al (2014) improving the re-lation detection performance.Contrary to existing systems JEDI does not needa pre-trained entity classifier.
We leverage a verylarge corpus of shortest path patterns as referenceand use constraint propagation to solve ambigui-ties.
Our system also maps into the large numberof predefined FREEBASE relations, alleviating theneed to manually specify any relations.
The sys-tem can be easily incorporated into a more com-plex IE pipeline that uses the results for examplefor entity linking.3 Pattern CorpusTo detect meaningful patterns we use FREEPAL(Kirschnick et al, 2014).
A dataset of 10 mil-lion lexico-syntactic pattern-relation assignmentsbuilt using distant supervision (Mintz et al, 2009).Each pattern was generated from a shortest depen-dency path between two known FREEBASE enti-ties in a sentence that participate in a known rela-tion.
The corpus uses CLUEWEB09 as text basisand the FACC1 entity annotations (Gabrilovich etal., 2013) to generate a distribution of relationsover pattern.
An entropy score indicates the degreeof ambiguity, which we use for scoring the relationassignments.
Overall more than 75% of the con-tained pattern were observed with more than onerelation, requiring a disambiguation method.4 Jointly Detecting Entities andRelationsThe process of detecting relations is described inFigure 2 and consists of the following steps, de-scribed in the following:?
Pre-process input text621.
Input Text2.
Candidate Entities3.
Shortest Path Between Entities 4.
Pattern - relation assignment DatabaseEntity1 (X)Bill GothardBill GothardB.A .Entity2 (Y)B.A .
Wheaton CollegeWheaton CollegeShortest Path[ X] receive [Y][ X] receive from [Y]receive [X ] from [Y]Dependency Path[ X] receive [Y][ X] receive from [Y]receive [X [ from [Y]Typed RelationpersonDegreepersonNomiantedForAwardpersonReceivedAwardpersonEducationInstitutionpersonEmployeeHistoryCompanyawardPresentingOrganizationawardPresentedBydegreeFromEducationInstitutionB.A.
{Degree, Award}Bill Gothard {Person, Award}Wheaton College {Educational Institution, Organization}?
BA = Degree    Wheaton College = Educational Institute  BA = Award   Wheaton College = Organization?
Bill Gothard = Person   B.A.
= Degree  Bill Gothard = Person   B.A.
= Award?
Bill Gothard = Person   Wheaton College = Educational Institution  Bill Gothard = Person   Wheaton College = OrganizationType Domain of EntitiesConstraintsEntity1 (X)Bill GothardBill GothardB.A .Entity2 (Y)B.A .
Wheaton CollegeWheaton CollegeRelationpersonDegree personEducationInstitutiondegreeFromEducationInstitution7.
Solution to constraint problemBill GothardB.A.Wheaton College[X ] receive from [Y][X ] receive [Y ]5.
Entity Multigraphreceive [X ] from [Y]Figure 2: Solution overview: Candidate Entities (2) are selected from the source text (1).
Shortest pathin the dependency tree is extracted (3), pruned against pattern-relation assignment database (4), typeinformation is translated into a multi graph (5) which defines the constraint satisfaction problem (6).
Thesolution yields an assignment of entity types and relations (7).
(Types are omitted for readability)?
Selection of candidate entities?
Extract shortest dependency path (pattern)between all pairwise candidate entities?
Match the pattern using the FREEPAL corpusto determine candidate relations?
Translate the relation detection into a con-straint satisfaction problem which determinesthe potential types of all entities and thus theconnecting relations4.1 Pre-ProcessingThe target text is annotated with part-of-speechtags and dependency information using the Stan-ford CoreNLP Toolkit (Manning et al, 2014).
Co-reference resolution is applied to further link en-tity mentions across sentence boundaries provid-ing more link targets between entities.4.2 Selecting Candidate EntitiesInstead of trying to find any of the 10 million pat-tern from the pattern corpus in a given text, whereevery match would provide a candidate subjectand object pair for a relation, we reverse the prob-lem and produce a set of candidate entities and tryto match the connecting pattern with the corpus.JEDI works with any candidate entities, pro-duced for example by an existing entity tagger orjust based on simple heuristics.
One such simpleheuristic is to use nouns, with the extension to jointogether adjacent nouns to effectively form nounphrases.
Nouns are grouped, if they are directlyadjacent and connected through a dependency linkof the type poss or nsubj, while also allowing theconnecting word ?of?.
This captures entities ofthe form ?University of Illinois?
and ?WheatonCollege?, but fails to separate appositions such as?Bishop Oldham?
or ?Professor Smith?, but thiscan be later rectified.
This heuristic can be easilychanged as the remaining processing does not de-pend on the text form or type of the entities.
Usingnouns also helps in finding entities generally notcovered by specific NER systems, such as ?bibli-cal studies?
as a field of study, without specificallytraining a tagger for this target type.634.3 Extracting the Shortest PathFinding the shortest path between two entitiesequals finding a path in the dependency graph be-tween the head words of each entity.
We use asimplified instance of Collins Head finding rule(Collins, 2003) to determine the head in multi-word entities.
The pattern is derived by pickingup all tokens in their lemmatized form on the path,substituting the start with X and the end with thelabel Y.
To make the pattern more readable, all to-kens are sorted based on their appearance in thesource text.This produces pattern of the form [X] receive[Y] [1-dobj-2,1-nsubj-0].
The pattern is furtherenriched with the individual dependency annota-tions to differentiate similar textual pattern3.Conjunctions We apply a simple normalizationto conjunctions inspired by CLAUSIE (Corro andGemulla, 2013).
Removing the last token in pat-terns containing a conjunction dependency.Coreference Resolution Coreference informa-tion expands mentions across sentence bound-aries.
Mentions that are connected through a chainare treated as if they are the same entity, if thesource of the chain is marked as a candidate entity.Thus we substitute the coreference target with thesource in the extraction process.4.4 Pattern-Relation AssignmentsThe shortest path generation process generates alarge number of pattern.
To reduce the searchspace, all extracted pattern are matched against theFREEPAL corpus.
This produces for each matcha list of potential relations that this pattern hasbeen observed with.
Only pattern with an entropysmaller than 3.74and that have been observed atleast five times are considered.
This reduces thenoise by filtering out very unspecific pattern suchas [X] be [Y], but at the same time still allows fora lot of ambiguous pattern.Each pattern is associated with a list of FREE-BASE relations, for which the argument types areretrieved.
This is used to restrict the X and Y en-tity types of the pattern respectively.
We use theFREEBASE type normalization presented in FIGER(Ling and Weld, 2012) to reduce the number of en-tity types down to 112.3Dependency information for all pattern is omitted in thepaper for readability, but used during the resolution process.4This entropy cutoff was derived empirically.To address the problem of arbitrary granularity,we broaden the accepted argument types using asimple type hierarchy.
For example, the diedInrelation, which indicates that a person died in aparticular location, restricts the subject argumentto be of type deceased person.
While this is veryspecific it prevents linking to this entity in otherrelations, which only accept the more generic per-son type.
The type hierarchy is generated by re-trieving the type hints category for each type, us-ing the FREEBASE API.
While this does not pro-duce a complete type hierarchy, it adds the mostcommonly used sub types for a given type.4.5 Constraint Solving using Type InferenceThe extracted pattern for each pair of entities forma multi-graph, where edges are assigned a confi-dence score based on the FREEPAL entropy.
Theresolution process tries to eagerly generate a typeassignment for each entity, so that at least one edgebetween connected vertices, a particular relation,holds according to the type requirements.
Thechoco library (Prud?homme et al, 2015) is usedfor constraint solving.
Each edge is transformedinto a constraint, using logical conjunctions be-tween all connected vertex pairs and disjunctionfor each edge between two vertices and their types.This emits for each relation a constraint with allpossible type and subtype combinations.Scoring Constraint solving produces more thanone potential solution.
We use a scoring mecha-nism to rank the different solutions, taking into ac-count the number of matched entities, the entropyscore taken from the FREEPAL dataset, as well asthe type hierarchy.
This ensures that if possible,the most specific type assignment for a large num-ber of entities is favored in the resolution process.Backtracking If there is no assignment possi-ble - there is a conflict in the graph.
Conflictscan arise when detecting relations that are not partof the corpus for a given pattern or wrong pat-tern as a result of erroneously linking entities ina co-reference chain.
Backtracking is used to re-peatedly remove vertices and all associated edgesfrom the graph until either a solution is found orall nodes are removed in which case there is nosolution.
To find the highest scoring assignmentbacktracking is used to evaluate multiple differentgraphs, even when a solution is found.64Relation P R FEducation Degree 0 0 0Place of Birth 0.76 0.60 0.68Place of Death 0.89 0.27 0.41Student Graduate 0.78 0.41 0.53Table 1: Baseline performance.
Precision, Re-call and F-measure without Coreference Resolu-tion and type inference using the Noun strategy.Stopping The search is terminated early whenan adjustable time limit is hit, to ensure that themost probable solution is found early.
This trade-off guarantees that the algorithm finishes in fi-nite time, at the expense of not always finding theglobal optimal solution.Result Once a solution is found, all vertices ofthe graph are bound to a type.
The qualifying re-lation between any two connected vertices is se-lected as the one which has the highest score as-sociated with it.
This produces triples of the form<entity, entity, relation>.5 EvaluationThe ?Relation Extraction Corpus?5is used forevaluation ?
comparing precision, recall and F-measure.
The corpus contains text snippets forfour separate relations: person holding an educa-tion degree educationDegree (1580 triples), placeof death (1955 triples), place of birth (8703triples) and person graduated from education in-stitute studentGraduate (32653 triples).
Each ex-cerpt is annotated by humans as to whether it sup-ports a particular binary relation.5.1 ResultsBaseline Table 1 shows the baseline perfor-mance of the noun strategy without constraintsolving, using the most likely relation for an iden-tified pattern based on the FREEPAL entropy score.The results show high precision for all relationsexcept for education degree.
This supports theuse of the FREEPAL dataset for relation extrac-tion, as it covers already a large variety of patterninstances.
No instances of the education degreerelation were found as almost all pattern for thisrelation are dominated by the received award rela-tion.5https://code.google.com/p/relation-extraction-corpus/Relation P R FEducation Degree 0.94 0.61 0.74Place of Birth 0.77 0.60 0.67Place of Death 0.88 0.35 0.50Student Graduate 0.76 0.37 0.50Table 2: Type inference performance withoutCoreference Resolution using the Noun strategy.Resolution Strategies and Comparison ResultsNamed Entities Nouns Akbik (2014)Relation P R F P R F P R FEducation Degree 0.96 0.03 0.05 0.96 0.74 0.83 0.87 0.29 0.44Place of Birth 0.77 0.52 0.62 0.83 0.58 0.68 0.82 0.19 0.31Place of Death 0.92 0.48 0.63 0.92 0.48 0.63 0.82 0.13 0.22Student Graduate 0.78 0.51 0.62 0.77 0.51 0.61 0.92 0.17 0.29Table 3: Performance with type inference andCoreference Resolution using Named Entitiesand Nouns as entity markers, comparing to Ak-bik (2014), reporting Precision, Recall and F-measures.Type Inference The effect of type inference canbe seen in Table 2.
Instances of the degree rela-tion are found with high precision, while the otherrelations are still found, highlighting that the reso-lution process is not introducing errors.Table 3 shows the performance of the entitycandidate selection strategy (See section 4.2), in-cluding Coreference Resolution.
The Noun strat-egy is compared with Named Entities obtainedwith the Stanford NER classifier (Finkel et al,2005).
For reference we present the results fromAkbik et al (2014), where the authors used a man-ual process to find a set of extraction pattern for agiven relation.Using the simple NOUNS strategy for selectingcandidate entities performs on par or better to theNER strategy.
Coreferences further improve theF-measure by up to .11 points.
This supports ourclaim that we can detect entities and relations to-gether, alleviating the need to train a custom clas-sifier for an entity type - nouns are sufficient.
Theeducation degree relation (not part of the results)is a good example for an entity type, where thestandard NER tagger almost always fails to iden-tify the degree entity.6 ConclusionWe present JEDI a system to extract typed namedentities and FREEBASE relations together.
Short-est dependency pattern are used to link entities,and constraint solving on the relation argument65Figure 3: Demo system showing output of the re-lation detection process with found entity typesand connecting FREEBASE relations.types is used to disambiguate pattern with multi-ple meanings.The evaluation shows that the method increasesthe precision and recall scores for ambiguous re-lations significantly.
As the resolution takes ad-vantage of entities that are connected in chains, itis further possible to detect n-ary relations usingonly binary pattern.
The method proves to workwell without any pre-training of NER classifiersand validates that pattern learned using distant su-pervision are effective.
This makes it possible toexpand existing knowledge bases with informationfound in web text.A web demonstrator of the complete sys-tem as shown in Figure 3 is available atjedi.textmining.tu-berlin.de.
The system is imple-mented as an UIMA module such that it can beeasily incorporated into existing IE pipelines, thesource code is hosted at github.com/jkirsch/jedi.AcknowledgmentsWe would like to thank the anonymous reviewersfor their helpful comments.
Johannes Kirschnickreceived funding from the German Federal Min-istry of Economics and Energy (BMWi) un-der grant agreement 01MD15007B (SD4M) andHolmer Hemsen under 01MD15010A (SDW).ReferencesAlan Akbik, Thilo Michael, and Christoph Boden.2014.
Exploratory Relation Extraction in Large TextCorpora.
In COLING, pages 2087?2096.Razvan C Bunescu and Raymond J Mooney.
2005.
Ashortest path dependency kernel for relation extrac-tion.
In HLT/EMNLP, pages 724?731.Michael Collins.
2003.
Head-driven statistical mod-els for natural language parsing.
Computational lin-guistics, 29(4):589?637.Luciano Del Corro and Rainer Gemulla.
2013.ClausIE : Clause-Based Open Information Extrac-tion.
In WWW, pages 355?365.Aron Culotta and Jeffrey Sorensen.
2004.
Dependencytree kernels for relation extraction.
ACL, pages 423?429.Jenny Rose Finkel, Trond Grenager, and ChristopherManning.
2005.
Incorporating non-local informa-tion into information extraction systems by Gibbssampling.
ACL, pages 363?370.Evgeniy Gabrilovich, Michael Ringgaard, and Amar-nag Subramanya.
2013.
FACC1: Freebase anno-tation of ClueWeb corpora, Version 1 (Release date2013-06-26, Format version 1, Correction level 0).ZS Harris.
1954.
Distributional structure.
Word, pages775?794.Rohit J. Kate and Raymond J. Mooney.
2010.
Joint en-tity and relation extraction using card-pyramid pars-ing.
CoNLL, pages 203?212.Johannes Kirschnick, Alan Akbik, and Holmer Hem-sen. 2014.
Freepal: A Large Collection of DeepLexico-Syntactic Patterns for Relation Extraction.In LREC, pages 2071?2075.Mitchell Koch, John Gilmer, Stephen Soderland, andDaniel S Weld.
2014.
Type-Aware Distantly Super-vised Relation Extraction with Linked Arguments.In EMNLP, pages 1891?1901.Xiao Ling and DS Weld.
2012.
Fine-Grained EntityRecognition.
AAAI, pages 94?100.Christopher D Manning, Mihai Surdeanu, John Bauer,Jenny Finkel, Steven J Bethard, and David Mc-Closky.
2014.
The Stanford CoreNLP Natural Lan-guage Processing Toolkit.
In ACL (System Demon-strations), pages 55?60.Bonan Min, Ralph Grishman, Li Wan, Chang Wang,and David Gondek.
2013.
Distant supervision forrelation extraction with an incomplete knowledgebase.
In HLT-NAACL, pages 777?782.Mike Mintz, Steven Bills, Rion Snow, and Dan Juraf-sky.
2009.
Distant supervision for relation extrac-tion without labeled data.
ACL, pages 1003?1011.Charles Prud?homme, Jean-Guillaume Fages, andXavier Lorca, 2015.
Choco Documentation.
Avail-able at http://www.choco-solver.org.Sebastian Riedel, Limin Yao, Andrew McCallum, andBenjamin M Marlin.
2013.
Relation Extractionwith Matrix Factorization and Universal Schemas.In HLT-NAACL, pages 74?84.Sameer Singh, Sebastian Riedel, Brian Martin, Jiap-ing Zheng, and Andrew McCallum.
2013.
Jointinference of entities, relations, and coreference.
InAKBC, pages 1?6.Fabian M. Suchanek, Mauro Sozio, and GerhardWeikum.
2009.
SOFIE: A Self-Organizing Frame-work for Information Extraction.
In WWW 2009.66
