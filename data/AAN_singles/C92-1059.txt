A TREATMENT OF NEGATIVE  DESCRIPT IONS OFTYPED FEATURE STRUCTURESKIYOSHI  KOGURENTT Bas ic  P~esearch Laborator ies9-11, M idor i - cho  3 -chome,  Musash ino-sh i ,  Tokyo ,  180 Japankogure@atom.nt t .
jpAbst ractA formal treatment of typed feature structures(TFSs) is developed to augment TFSs, so that neg-ative descriptions of them can be treated.
Negativedescriptions of TFSs can make linguistic descriptionscompact and thus easy to understand.
Negative de-scriptions can be classified into three primitive nega-tive descriptions: (1) negations of type symbols, (2)negations of feature existences, and (3) negations offeature-address value agreements.
The formalizationproposed in this paper is based on A'it-Kaci's com-plex terms.
The first description is treated by extend-ing type symbol attices to include complement typesymbols.
The second and third are treated by aug-meriting term structures with structures representingthese negations.
Algorithrrts for augmented-TFS uni-fication have been developed using graph unification,and programs using these algorithms have been writ-ten in Conmaon Lisp.1 I n t roduct ionIn unification-based or information:based linguisticframeworks, the most important objects are struc-tures called 'feature structures' (FSs), which are usedto describe linguistic objects and phenomena.
A fea-ture structure is either atomic or complex: an atomicFS is denoted by an atomic symbol; a complex FSconsists of a set of feature-value pairs each of whichdescribes an aspect of an object.
Partial informationon aJ~ object is merged by applying the unificationoperation to FSs.ILeseareh on unification-based linguistic theorieshas been accompanied by research on FSs themselves.Several extensions on FSs or on feature descriptionsand formal treatments of the extensions have beenproposed.Disjunctive and negative descriptions on FSs helpmake the linguistic descriptions simple, compact, andthus easy to understand.
For disjunctive feature de-acrq)tions, Kay\[14\] introduces them into FUG (lqlnc-tmnal Unification Grammar) and gives the procedu-ral semantics.
Karttunen\[ l l \ ]  also proposes proce-dural treatments of disjunctions in conjunction withrelatively simple negations.
ILounds and Ka.sper\[19,13\] propose a logic-based formalism--feature logic-which uses automata to model FSs and can treat dis-Junctive feature descriptions, and they obtain impor-tant results.For negative descriptions of PSs, one of the most.fundamental properties of FSs, the partiality of in-formation they carry, makes its insufficient o adoptrelatively simple treatments.
Classical interpretationof negation, for example, does not, allow evaluationof negations to be freely interleaved with unification.Moshier and Rounds\[17\] propose a formal frameworkwhich treats negative feature descriptions on the b`a~isof intuitionistic logic.
Ilowever, their |bHnalism hastrouble treating double negations.
Dawar\[5\] l)rOl)OSeSa formal treatment b~ed on three-valued logic.In order to treat feature domains of complex FSsand to treat taxonomic hierarchies of symbolic timture values, type (or sort) hierarchies have been in-troduced, allowing definition of typed (or sorted)feature-structures (TFSs).
A TFS consists of a typesymbol from a lattice and a set of rearm:e-value pairs.A TFS can be seen as a generalized concept of bothatomic and cornplex FSs.
Pollard and Sag/18\] iatt'o-duce sorts into IIPSG (Ilead-drivcn Phr~Lse Strllcttn'eGrammar) and use sorted FSs to describe linguisticobjects.Ait-Kaci\[1\] proposes an Mgebraie fratnewot'k usingthe C-types and ~-types, one of promising lbt'maliza-tions of TFSs, based on lattice theory.
This lbrmal-ization was originally ainmd at formalizing and in-tegrating various kinds of knowledge representat.ioiTframeworks m AI.
In this approach, types are defined,as equivalence clmsses of complex term structures.
Asubsumption relation is defined on these term struc-.tures.
The join and meet operations on thenT cor-respond to tile generalization and uniilcation Ol)era-tions on TFSs, respectively.
This approach essentiallyadopLs 'type-as-set' seulantics.
Subtype relationshipson type correspond to subsnmption relationships ondenotations of types.
Based on this framework, anextension to Prolog, LOGIN\[2\], has becn developed.Smolka\[20\] proposes a feature logic with subsorts.In this approach, negative descriptkms can be decom-poscd into three kinds of prinfitivc negations, namely,negations of sorts or complement sorts which denotetile complements ofsets that positive counterlmrl.s lie-note, negations of feature existences, and negationsof feature-address agreement or feature-address disagreement.
Slnolka extends t~aturc descriptions buta feature-structure interpretation of an extended escription does not include negat.iw~ information andcorresponds to a simple TI"S.Some TIeS based m~tural language processing sys-tems have been developed\[7, 24, 12, 15, 8, 22\].
Car-imnter and Pollard\[4\] propose an interlhce to buikltype lattices.Formalizations of extended FSs and of extettd('dfeature-descriptions, described above, arc classilicdinto two classes: (1) extensions of FSs themselves,and (2) extensions not of FSs themselves hut ofDature-descriptions.
Previous attempts to introducetype hierarchies fall into the former clzLss while previous treatments of disjunctive and neg~diw~ &'scrip-tions mainly fall into the latter.ACRES DE COIJNG,92, NAMES, 23-28 AOt33" 1992 3 8 0 Pl~oc.
OF COL1NG-92, NANTES, AUG. 23-28, 1992This paper proposes an extension to Ait-Kaci's ~/,-type that incorporates three kinds of the primitivenegative descriptions described below into the q:-type.Ai't-Kaei's t - type formalization uses term structures.In this paper, both these type structures and the tyl)esymbol lattice on which term strnctures are delinedare e?tcuded to treat negative descril)tions.
Negations of type symbols are treated by extending typesymbol lattices, aud negations of feature cxistmmesattd feature-address disagreements are treated by ex-tending term structures.
This extension can be seenas intuitionistie.
The extension is classified into class(1) abow'..Based on this paper's formalization, unilieation al-gorithms have been developed usiug graph unificationtechniques\[23, 16\].
Programs based on these algerrithms have been implemented in Common Lisp.2 Requirements of NegativeDescriptions of TFSsIn describing linguistic information using (tyl)ed) fea-ture structures, negative descriptions make the de-.scription compact, intuitive, and hence easy to under-stand.
For example, we want to deserihe the gram-rnaI, ical agreement for an English verb, say "eat", nat-urally a.s follows.. .
.
.
.
.
.
.
.
, I. r ,,e,.
.
.
.
.
.
: '"h\] sg (1)This description specifies compactly and directly thatit is not the case that the person attribute is thirdand that the number attribute is singular.
If wecould not use such complex negative descriptions, wewould write it using disjunctive descriptions with sim-ple complement types as follows.sy,(ag,'eeme,d ag,{l .
.
.
.
.
.
,, ~3rd \ ]  \]'\[syii(agreeme;',l all, tinumbe'r msg\] I J" (2)or{ sy,( .g,~,ae,,t  ,,g~\[ve~ ... .
1st\]\] 1sy,ftag,'eemenl agl Ip ....... 2nd\ ] \ ]}  (3)sy,(  a.qreeme,d ag,  f, ,umber p l \ ] \ ]  JIn this case, (1) is e*Lsier to understand than (2) or(3).In the above ease., we can describe the informa-tion because the complex negative descriptions C~tllbe transformed into the disjmlction of simple negativedescriptions {with ml almost same inteuded mean-ing) and because both person and number featurestake their values from {lst ,  2nrl, 3rd} and {st ,  pl}.However, it is not always the case that such transfor-mations are possible and that feature takes its valuefrom a finite set.Let us consider more.
complicated cases using dif-t 1 ference lists expressed using featm'e structures.
Theempty list of categories i represented as follows.x~ H)In the above example, the tag symbol, X1 shows thatfeatures in and out must take the same value.tin HPSG and JPSG (Japanese Ptlrase StructureGrammar), a difference list is very convenient \['or express-ing subcat and slash feature values.llow can oniy nomemptiness be expressed?
Thisis impossible using complement type symbols or disjunctions becmlsc we can consider the set of MI finitelength lists whose elements can bc taken froltl inlinitcsets.
l)ireet or indirect extension of feature strueturesis required.So far, we have discussed the requirement of nega-tive descriptions of type symbols and of l;eature-valueagreeumnts from the viewpoint of capability of de-scribing linguistic inR)rmation.
There are other advantages of allowing negative descriptions.
Consider,for exannlde , debttgging processes of gramJt,atical de-scriptlous by parsing sample sentences.
We may obta iu  unexpected  resul ts  Sllch ll.~ il ~l'FS with an t lnexpeeled type symbol, a TFS with an unexpected leatare value agreement and so on.
\[1/ such sittlations,negatiw~ descriptions can be usefld tools R)r delectingtheir re~mons.To t/l;tke linguistic descriptions compact and thusea.uy to understand, to treat natural language fll-clently, and to detect error reasons rapidly, it is neces-sary to develo 1) formalizations and nu'.thods of treat-ing negative descriptions.a Formal Treatment of NegativeDescriptions of TFSsAs stated earlier, a typed t~:at, ure structure (TI"S)cousists  Of ~t tYl)e syu lbo l  al ld a set of feal, tlre-vs.blepairs.
Thus, descriptions of TFSs are chLssitied intodescriptions of TFSs having:(1) a certain type symbol (or having a subtype syn,-hol of a certain type symbol),(2) a feature, and(3) two feature-address vahtes that agree.A TFS can be described by using conjunct, ions anddisjunctions of such kinds of descriptions.
A eonjmle-tiw* and disjunctive TFS can be formalized as Nit-Kaei's t - type and ~-type, respectively.
That is, at - type,  which has a complex term structure called ag, term a.s its syntax, represents a conjunction of suchkinds of descriptkms or at col0unctiw~ typed feaLltrl!structure, and an e-type is a maximal set of ?
typesrepresenting the disjunction of them.Negative counterparts of these descriptions areebLssified into deseriptions of TFSs:(1') not having a certain tyl)c symbol (or having atype symbol which is not subsunmd by a certaintype symhol),(2') not having a certain feature, and(3') having two thature-addrcss values that do notagree.By ineorporat iug  s t r l le t t l res  represel l l ,  i l lg stlch lll!g-ative descriptions into a O term, a 'FFS with the netative descriptions can be formalized.
Such a lerm iscalled an allglnented t - te rm and a type with an allg-mented ~/, term ~m its syntax is called an allgllu!ntedO-type.
From augmented g:-t.erms, an augmentedteru l  eilll be COllStl'lleted ill the S~Lllle Illallll#!l" tlHlt fill( - te r lu  is eonst r l le ted  frolu ?-t, errns.Next, augmented C-terms and C-types are defined.Ter ln  s t ruc tures  are  f irst a l lg lueuted  with st r t lc t l l resrepresenting inhibited features and disagreement offeature address values.
Then, type symbol htttieesare extended to inch,de complement type symbols assuggested in \[1\].AcrEs DE COLING-92, NAN'rgs.
23-28 AO?~r 1992 3 8 1 1)l~oc.
OF COLING-92, NANTES, AUG. 23-28, 19923.1 Typed Feature  S t ructures  asAugmented  C-TypesIn order to define complex term structures, a signa-ture is used to specify their vocabulary.
It serves asthe interface between their syntax and semantics.
Asignature is formally defined as follows.Definit ion 1 A signature is a quadruple (7-,<_T,2-,  V) consisting of:1. a set 7- of type symbols containing T and _L,2.
a partial order _<7- on 7" such that(a) ?
is the least and T is the greatest element,and(b) every pair of type symbols a, b E 7- have aleast upper bound or join, which is denotedby a VT" b and a greatest lower bound ormeet, which is denoted by a AT b,3.
a set .T" of feature symbols, and4.
a set I\] of tag symbolswhere 7-, 2- and l?
are pairwise disjoint.A simple 'type-as-set' semantics is adopted forthese objects.
That is, a type symbol in 7- denotesa set of objects in an interpretation.
Here, 7- and.1_ denote the sets called the universe, written as U,and the empty set 0, respectively.
Another elementa denotes a nonempty subset of U, written as \[a\].The partial order <~- denotes the subsumption rela-tion between these sets; for any type symbols a, b,and c,1.
a <~ b if and only if I s |  c lb\],2. a Y:r b = c if and only if \[a\] O \[b\] = \[el, and3.
a AT- b = c if and only if \[a\]N \[b\] = \[c\].A feature symbol denotes a function from a subsetof U to U.
A feature path is a finite string of featuresymbols and denotes the function obtained by tilecomposition of the functions that tile feature symbolsdenote.A term is defined from a signature.
First, a termdomain is defined as a skeleton built from featuresymbols.Definit ion 2 A term domain A on 2- is a set of finitestrings of feature symbols in 2" (inclnding the emptystring ~) such that1.
Aisprefix-elosed: Yp, q(52-*,ifp.q(s A, thenp (5 A; and2.
A is finitely branching: if p (5 A, then {f (52"1 p .
f  (5 A} is finitewhere '.'
is the string concatenation operator.An element of a term domain is called a featureaddress or a feature path.
By definition, the emptystring e must belong to all term domains and is calledthe root address.
A term domain is represented bya rooted directed graph within which each arc has afeature symbol as its label.A suhdomain of a term domain, corresponding toa subgraph, is defined ms follows.Definit ion 3 Given a term domain A and a featureaddress p t5 A, the subdomain of A at p is defined tobe the term domain Alp := {p' I P' P* (5 A}.
The setof all subdomains of A is denoted by Subdom(A) .Next, flesh is put on the term structure's kele-ton as defined as a term domain by assigning severalkinds of objects to each feature address.
Ait-Kaci'sterm structure, the basis of the C-type, is defined byassigning a type symbol and a tag symbol to eachfeature address as follows.Definit ion 4 A term is a triple (A, r, v) where A isa term domain on .T, r is a type symbol function fi'om2-* to T such that r ( f *  - A) = {T}, and v is a tagsymbol 5ruction front A to Y.Given a tag symbol fimction v, Addr .
denotes thefunction from a tag symboJ to tile set of addresses:Addro(X) :-- {pGAIv (p)=X}.
(5)In order to treat negations of feature xistences attdfeature-address value disagreement, the term struc-ture defined above is augmented by assigning addi-tional objects, a set of inhibited features and a set ofdisagreement tag symbols, to each feature addrcss.Definit ion 5 An augmented term is a quintuple(A , r ,o ,?
,X)  where A is a term domain on 5 v, ris a type symbol timer(on from ~'* to T such thatr(2-* - A) = {T}, v is a tag symbol function frontA to V, ?
is an inhibited feature filnction front 5 r*to 2 ~ such that ?
(p) is finite for any p (5 A and~(~'* - A) = {0}, and X is a disagreement tag sym-bol function from J'* to 2 v such that X(P) is finitefor any p (5 A and X(f'* - A) _- {0}, 2The inhibited feature fimction ?
specifies which fea-tures cannot exist at a given address.
There is thusinconsistency if there is an address p in A such that?
(p)n{fe2- lp .
f ( sA}  # O.
(6)The disagreement tag symbol fimction X specifies,for a given address, substructures with which its ar-gument disagrees.
There is thus inconsistency if thereis an address p in A such that,(p) e x(1,).
(7)The disagreement address function Disagr.
,  x frmnA to 2 ~:', based on v and X, takes an address as itsargument, and gives the set of addresses with Milchthe argument address must disagree, called the dis-agreement address et and defined as:Disagrv,x(P) := U Addr .
(X) ,  (8)Xex(v)Augmented terms are hereafter referred to simplyas terms unless stated otherwise.Definit ion 6 Given a term ~ : (A , r ,v ,?
,X)  and afeature address p in A, the subterm o f /a t  the addressp is the term tip = (A/p,r/p,v/p,~b/p,x/p) whererip :Jr* ~ T, v/p : Alp ~ V, ?/p :2-" ~ 2 F, andX/P : .T" ~ 2 v are defined by(r/p)(q) := 7-(p-q), (9a)(v/p)(q) := v(p.q), (91)(?/p)(q) := ?
(p.q) ,  (9r)(X/P)(q) := X(P'q).
(9(1)For a term t = (A, r, v, ?, X), a type symbol a (sim-ilarly, a tag symbol or a term t') is said to occnr in tif there is a feature address p in ,X such that r(p) = a(similarly, v(p) = X or X (5 X(P), or lip = t').A term t = (A  r, v, ?, X) is said to be regular if theset of all subterms of t, Subterm(t )  := {t/p \] p (5A}, is finite, tlereafter, we will consider mdy regularterms.
Ill a regular term, only finite numbers of typesymbols and tag symbols occur.2For any set S, 2 s denotes the set of subsets of S.ACRES DE COLING-92, NANTES, 23-28 AOt3T 1992 3 8 2 PRO(=.
OF COLING-92, NANTES, AUG. 23-28, 1992~e,aptyXl:{}:{} :dl ist: \['"o,,, x2:{j...,~:{}:r \ ] x 2Xa:{}:{} :d l i s t\[ X4 :{} :{X6}: l i s t  \]= in \[first X5: {} : {} : T \]out X6 : {} : {X4} : listFigure 1: Examples of Augmented Terms ill MatrixNotationlem~ty tnonemptyXl :{}  :{}:d l is t  X3 :{}:{)  :dlist,.
(~o.t  .C l io , , ,x4:{} :{x6}.
( _  .
.
.
.
_%.X2:{fi,'st}:{} l ist I x6:{}:{x4}l l .
t  li"~t I ii.,,xs:{}:{}TFigure 2: Examples of Augmented ' l~rms ill DirectedGraph NotationIn a term, any two feature addresses bearing tilesame symbol are said to corefer.
Thus, tile corefer-enee relation g of a terln is a relation defined on A ,asthe kernel of the tag flnlctiou v; i .e,  ~ := Ker (v )  =v - I  o v. IIere, g is an equivalence relation and a ~-class is called a corefereuee class.Def in i t ion  7 A terln t is referentially consistent ifthe same subtern* occurs at all feature addresses in acoreference class.If a term is referentially consistent, then by defini-tion, for any Ph p:Z E A, if v(pl)  = v(p2) then, for allp such that Pt ' P C A, it follows that P2 ' P (5 A andv(pl " p) = v(p~ .
p).
Therefore, if a term is referen-tially consistent, g is a right-invariant eqnivalence orright-eongrueuee on A.
That  is, for any Pl, P2 E A,if Pt*?P2 then (Pl ' P)~:(P2 ' P) for any p such thatPl .pEA.Def in i t ion  8 A well-formed term (wft) is areferentially-consistent regnlar term.
The set of allwell-formed terms is denoted by 14,'.TtrT.A term can be represented in matrix notation.
Ex-amples of terms are showu in Figllre 1.
In this figure,T,  d l ist  and l ist are type symbols, in, out and .firstare feature symbols, and X1, X2, .
.
.
are tag sym-bols.
A matr ix  represents a set of feature-value pairspreceded by a tag symbol, followed by a set of iuhib-ited features and followed by a set of disagreement tagsymbols.
In the term te,,vlv, its snbterms at in and atout corefer while t,~o,,,,,vty is a term ill which its sub-terms at in aud at out should not corefer.
The termte.m?1y should not have the feature address in ..firstWillie tnonempty II&S that address,A term can also be represented by directed graphs(DGs).
t~,,~,t~ anti t ........ ply in Figure 1 are shown asDGs in Figure 2.The set WY5 r of well-formed terms includes manyterms that llave tile same type syml)ol function, tilesame coreferenee r lations, the same inhibited featurefunction, and the same disagreelnent address fllllC-lion but different tag symbol fiUlCtions.
These termshave the same infornlation and can describe the sameliugttistic object or tile same linguistic phenomena.These ternls construct equivalence classes by reualll-lug tag symbols in a certain manner.De l in l t ion  9 Two terlns tl = (Al,rl,Vl,?q,?
(1}and t~ = (A2, r2, V~, ~2, X-~) are altlhabetical variantsof each other if and only if1.
Al = A2,2.
Ker (v l )  = Ker (v2) ,3. rl = r2,4.
?1 = ?2, and5.
D isagr~, ,x  ` = D isagr~,x  , .This is written as 11 ~t~.According to 'type-as-set'  semantics, tile symbolsT aud ?
denote, respectively, tile le&st informativetype tile whole universe U aud the overdefined orincousistel,cy type.--the empty set 0.
Therefore, aterm containing ?
should be interpreted as inconsistent.
Such an inconsistency is called a type inconsis-tency. '
Ib treat such inconsistency, a relation 1~1 onW.~'T  is llefiued as follows.Def in i t ion  10 For ally two terms t l ,  t=, G \]4,'.T'T,tl gl t2 if and mdy if .?
occurs in both tl and i 2.There are other kinds of inconsistency as mentionedearlier.
If a term contains an address p such that?
){P)fq {f ~: J : ' l p ' f  (~ A} i?
0, it is inconsistentbecause it means that there are features that shoulduot exist at.
the address.
Such an inconsistency iscalled a feature inconsistency.Ill addition, if a terln contains an address p suchthat v(p) E X(P), it is inconsistent because it meansthat tile subterm at p does not agree with itself.
Suchan inconsistency is called a tag illconsisteucy.llence, the three kinds of inconsistency are treatedintegratedly by a relation .~ on )4, 'S 'T delincd as fol-lows.Def in i t ion  11 For any two terms it, Z2 C W.T'T,tl U 12 if and ouly if each of them contaius at legistone address p such thatt.
r (p)  : ?,2.
?
(p )n{f  e J lp .
f  e A} ?
O, or 3..(p) e x(v).Clearly, if J~ occurs in a terln, it also occurs in allternls in its ?~-class.
This is also trne for feature incon-sistency and tag inconsistency, lh.
'nce, the relations (~and -U are such that their union ~ becomes an equiv-alence relation.
Thus, we call detincd the augnlentedt - types  as follows.Def in i t ion  12 An augmented &-tyl)e (or ~b-tyl)e forshort) It\] is an element of tile quotient set, q~ :=Syutactic structures of augmented g,-tyl)es will I)e(:ailed augmented ~p-ternls.
An augmented typed-feature-structure Call  t)e formalized as an anglllentedt - type.The set of type symbols 7- has the partial order ~7-which denotes a subsumption relation between theset denoted by type symbols.
The partial orderingon 7 can lie extended to augnmuted g~-terms and t -types.
Tile sul)smnption orders on )&.T"T and onare ilefined t~s follows.Acrgs DE COLING-92, NANTES, 23-28 AO~' 1992 3 8 3 PROC.
OF COLING-92, NAm'ES, AUG. 23-28, 1992Def in i t ion  13 Let t l  = (AI ,  r t ,  vl,~bl, Xt) and t2 =(A2,r~,v2,C~,X2) be WFTs .
i l  is said to be sub-sumed by t2, written tt _< i2, if and only if eithertt ~J_or1.
A~ __ At ,2.
Ker (v~)  C_ Ker (v l ) ,3. vp e Y', n(p) _<r r~(v),4.
Vp E 2-*, #:(p) _c ~t(p), ~nd5.
Yp (5 5 r*,  D isagr~,x , (p )  C_ Disagro~,x ~(p).The subsumpt ion  order on ?
are defined by \[/1\] _< \[t2\]if tl _< t2 is well-defined.Latt ice operat ions on ?
can be defined to be com-patible with the above subsumpt ion  order relation asfollows.Theorem 1 If (7";_<7") is a lattice, then so is ~ .P roo f .
This theorem can he proved in a very simi-lar manner  to the counterpart  for A'/t-Kaci's 0-terms.Therefore, instead of providing the proof  in detail,only the definitions of the least upper bounds- -or jo ins - -and  greatest lower bounds~r  meets - -a reprovided below.
Let t t : (ml ,7" l ,P l ,g\ ] ) l ,X I )  andt~ = (A~,r~,v2,ck2,X2) be WFTs .First,  the join of t~ and t2, ta = tl V t2 =(Aa, ra, Va, ~ba, Xa), is defined as follows:Aa = Alna= (10a)va : Aa ---* ~1 such thatKer (va)  = ~x Ntis,  (lOb)and Vp E .T*rs(p)  = rx(p) Vz  T~(p), (10c)~ba(p) =-- (pl(p)N~b2(p), and (lOd)XS(P) = {us(q) I q E (D isagro , ,x t (p )NDisagro~,x~ (p))}.
(10e)Next, the meet of t, and t2, t4 = t, A t~ =(A4, r4, v4, ~b4, X4), is defined as follows:A 4 = At*\], ( l l a )v4 : A~ ~ I; such thatKer (v4)  = r\[*l, ( l lb )and Vp G 9 r"r4(p) : VT{7"i(q)\]P~pq, i : 1 ,2} , ( l i e )U{~i(q) lpnpq, i=  1,2}, ( l id )  ~(v)  =andx4p)  =whereA\[ ' \ ]  =A l , , l  =g\[.l =U{v4(q) lqaqr,r C (Disagrv~,?~(p)oDisagro~.
?~(P))  }~1 le)coU At"l,n=0 { A1 UA~ for n = O, A \ [ ' -q  U {p E 9 r I ptct'lq, q E A i " -q}for n > I,x\["\],n=0tempty V tnonemptyX/ :{}  :{} :d l i s t= \ [ in  XS:{}: (} : l l s t  \]out X9 {} {} list~etnp\[y A ~Tlollelllpl~X10 : {} : {} : dl istI Xl l  : {first} : {Xll} : list= it, \ [ f i r s t  X12:{}  : {} :T  \]out XllF igure 3: Examples of Join and Meet.
of Augmentedtb-Termso /?2 ) 'for n = 0,i?\['d = ~\ [ , -  l\] O{(p~ ?
p,p~.
v) I p l~t"- ' lv2),for n> 1attd r~,uA~ is the rellexive extension of ~i f rom Aito A1UA2 for i=  1, 2.The condit ions ( l l a - l l e )  define a meet, that  col-lapses to J- whenever condit ions ( l ie - - l ie )  l)roduccsome address p such that  type inconsistency, featureinconsistency, or tag inconsistency occurs at p.The V is a join operat ion and A is a meet operat ionwhich are compat ib le with the subsumpt iou  order de-fined in Definition 13.
\ [ \ ]Examples of join and meet operat ions on aug-mented e - terms are shown in Figure 3.
The join andmeet operat ions on augmented ~-types correspondto the general izat ion and unif ication operat ions onTFSs.A'it-Kaei defines an ~-type as a maximal  set of ~b-types.
It is also possible to defir, e an augmented ~-type as a maximal  set of augmented ~b-types in thesame manner,  mak ing disjunctive and negative de-scriptions possible.3.2 Type  Symbol  Lat t i ce  Extens ion  toInc lude  Complement  Type  Symbolsq_?eating a negative desGil)t ion of a given type syln-bol, say a,  requires a type symbol  I) such that  b hasonly information that  unif ication of it with a yiekls in-consistency, or such that  aVT h = -V and aAT  b = ?.Such a symbol  is called a complement ype symbol  ofa and written as a ~.
If a given type symbol lattice(7-; _<7") is a Boolean lattice, that  is, a comI)lcmented 3distr ibutive lattice, we do not need to do anything.Otherwise,  we nmst  extend the lattice to include thecmnplements of the type symbols contained in thegiven lattice.For a finite type symbol  lattice T ,  for example,a Boolean lattice T ~ can he constructed a.s follows.Let ..4 := {at .
.
.
.
.
aN} be the set of atolns of 7-,that  is, type symbols which cover j_.4 If there are, ton-atomic type symbols  which cover only one sym-bol, for each such symbol  a, a new atom is addedaA lattice is called complemented if its all elementshave complements.t3\]~a is said to cover b if b <7 a attd b <7 c <7- aimplies e = b.Ac'IXS DE COLING-92, NANTES, 23-28 ^ otrr 1992 3 8 4 Paoc.
OF COLING-92, NANTES.
AUG. 23-28.
1992tsymbol: node structure{a type symbol}arcs: ~a set of arc structures) __~a set of feature symbols)es:  ~a set of rtode structures) anoaes:fo~a~: ~a .odo s.nc*nro/ I NZLarc structure\[ #atn,~!
I (a feat .
.
.
.
ymbol}\[ vM ....
I {a node structure}Figure 4: Data StructuresFnnetion Unify(nodel, node~)beginnode1 := Dereference( node l );node~ := Det,e\]erence( node2 );if node1 = node2 thenreturn(node1);qodel .forward := node~;node2.tsymbol := nodel.tsymbol AT node2.tsymbol;if node2.tsymbol = J_ thenreturn(J_)node2.ifeatures := nodel.i\]eatures LI node~.J\]eatures;if node2.ifeaturesr'l{arc.feature I arc ?
nodel .arcs LJ node2.arcs}# 0 thenreturn(.L );aodee.dnodes := node1 .dnodes O node2.dmMes;if {node1, node2} {7 node2.dnodes # ~ theaireturn(.L );arcpairs := Shared-Arc-Pairs(node1, node~);for (arc1, arc2) in arcpairs dobeginvalue := Unify( arcl .value, arce.value);if vMue = .1. thenreturn(l);end;arcs : :  Complement~Arcs(node1, node'2);rlodcS2.aFcs := arcs LJ llode~.arcs;return(node*);endFigure 5: A Destrnctive Graph Unification Functionso that a covers all additional type symbol.
The ex-tended lattice "T ~ is tile set of subsets of A with setinclusion ordering.
An element {al}iet E "T' denotesUie/\[al\].
The join and mcct operations on T '  arethe set-nniou and set-intersection perations, respec-tively.
The complement of an element {ai}ie/ in T 'is the set-complement of it with respect o .4, that is,{~ ?
.4 l a ?
{ad,e~}.4 Imp lementat ion  of  Augmented  TFSUnificationThe unification operation for augmented 1/,-terms oraugmented TFSs has been implemented using graphunification techniques.
A term structure is repre-sented as a directed graph by assigning a graph nodeto each x-class as in Figure 2.
The unification oper-ation for such DGs corresponds to a graph mergingoperation.
This takes two DGs and merges ~-cla.ssesof the same feature-aAdress into a n-class.In a destructive graph unification method, which isvery simple, suci~ a graph is represented by tile datastructures in Figure 4.
A node structure consists oflive fields: lsymbol for a type symbol, arcs for a setof feature-vafile pairs, ifeatures for a set of inhibitedfeatures, dnodes for a set of disagreement odesi.e., disagreement K-classes, and forward.
The fieldfor'warY1 is used for the Union-Find algoritfim\[9\] tocalculate unions of K-classes in tile salne nlanner ,'Lqlluet's algorithm\[10}.
By traversing two DGs' nodeswith the same feature-address sinmltaneously, calcu-lating the union of their x-classes, and copying arcs,their unification can be calculated as in Figure 5.The function Unify takes two input nodes and putsthem in a K-class by letting one input be tim forwardfield values.
The flmction then examines three kindsof inconsistency; namely, type inconsistcncy, fea-ture inconsistency, and tag inconsistency.
Tim fimc-tion finally treats arcs in order to make tile resultgraph right-cougruent.
For treating arcs, tile functionUnify assumes two fimctions, Shared_Arc_Pairs andComplement_Arcs.
The function Shared_Arc_Pairstakes two nodes as its inpnts aud gives a set ofarc pairs each consisting of both inputs' arcs with ashared feature.
The flmctiou Complement_Arcs alsotakes two nodes and gives a set of arcs whose featuresexist in the first node but not in the second.An inhibited feature fimetion is implemented usingtile tfeatnres field of nodes.
When unification of twonodes results in a node witfi an arc witfi a feature ini features, it yields J- because of feature inconsistency.A disagreement tag symbol fnnetion is implementedusing dnodes.
Unification of two nodes which haveeach other in their dnodes yields 3. because of taginconsistency, q_'hese computations require negligibleadditional computation.qb simplify the exphmation, the destructive versionof graph unification is used above.
Other versionsbased ou more efficient graph unillcation methodssuch ;~s Wroblewski's and Kogure's method\[23, 16\]have also been developed.
1,'urthermore, it is easyto modify other graph unification methods\[21, 6\]toallow augmented TFSs.,5 Conclusion\]'his paper has proposed an augmentatiotl of fea-ture structures {FSs) which introduces negative in-formation into FSs ill unification-based tbrmalisms.Unification-based linguistic formalisnm nse l".qs to de-scribe linguistic objects and phenotneua, l~ecanse lin-guistic information (:an |)e described compactly usingdisjunctive and uegatiw: descriptions, FSs and feaoture descriptions are required to treat such (lescrip-trans, in this paper, FSs have been augnlent.ed, usinga promising method of fornudizat.iou, Ait-l(aci's $~type, to allow three kinds of negatiw~ descriptions ofthem to be treated.In a formalizalion of typed feature structures, neg-ative descriptions can be decomposed rata three kindsof negations: negations of type sytnbols, negations offeature existences, aud llegations of feature-addressvalue agreements.
It.
is shown thai the second andthird kinds Call be treated by ailglncIItlllg tlrl'nl stlill%Lures to include structures representing such kinds ofdescriptions.
Subsnmption relations on augmentedterms are defined.
It.
is also shown that the first kindcall be treated by exteuditlg type symbol lattices t()include complement type synd)ols.The proposed formalization cau provide fficient al-AcrEs DE COLING-92, NANTES, 23-28 AOl3"r 1992 3 8 $ PROC.
OF COLING-92, Nhr, n'Es.
AUG. 23-28.
1992gorithms for generalization a d unification operationsas well as treat primitive negations.
The formaliza-tion can be integrated with logic-based frameworkssuch as \[20\] which can treat wider ranges of descrip-tions but which do not have such efficient algorithmsfor these operations.
Logic-based frameworks can beused to obtain the data structures for this paper'sformalization.Unification algorithms for augmented terms or aug-mented TFSs have been developed using graph uni-fication techniques.
Unification programs based onthese algorithms have been developed in CommonLisp.The augmentation of TFSs makes linguistic de-scriptions compact and easy to understand.
In anHPSG-based grammar, for example, non-emptinessof a subcat or slash feature value can be easily de-scribed by nsing feature-address value disagreement.Moreover, negative descriptions make debugging pro-eessss of grammatical descriptions easier.AcknowledgmentsThis research was performed in the VCAT project ofthe Takeuchi Research Group in NTT Basic ResearchLaboratories.
The author would like to thank IkuoTakeuehi, Akira Shimazu, Shozo Naito, MasahitoKawamori, Mikio Nakano, and other colleagues of thegroup for their encouragement a d thought-provokingdiscussions.Re ferences\[1\] Hassan Ait-Kaei.
An algebraic semantics approachto the effective resolution of type equations.
Journalof Theoretical Computer Science, 45:293-351, 1986.\[2\] Hassan Ait-Kaci and Roger Nasr.
Latin: a logic pro-gramming language with built-in inheritance.
Jour-nal of Logic Programming, 3:185-215, 1986.\[3\] Garrett Birkhoff, Lattice Theory.
Americau Mathe-matical Society, Providence, Rhode Island, USA, 3rdedition, 1967.\[4\] Bob Carpenter and Carl Pollard.
htclusion, disjoint-hess and choice: the logic of linguistic classification.In Proceedings o\] the 29th Annual Meeting of the As-sociation for Computational Linguistics, pages 9-16,ACL, University of California, Berkeley, California,USA, 1991.\[5\] Annuj Dawar and K. Vijay-Shanker.
A three-valuedinterpretation of negation in feature structure de-scriptions.
In Proceedings of the 271h Annual Meet-ing of Association for Computational Linguistics,pages 18-24, ACL, Vancouver, British Columbia,Canada, 1989.\[6\] Martin Emele.
Unification with lazy non-rednndantcopying.
In Proceedings o\] the ~9th Annual Meet-ing of the Association \]or Computational Linguistics,pages 325-330, ACL, University of California, Berke-ley, California, USA, 1991.\[7\] Martin Emele and Rdmi Zajac.
RETIF: A Rewrit-ing System \]or Typed Feature Structures.
TechnicalReport TR-I-0071, ATR, Kyoto, Japan, 1989.\[8\] Martin Emele and Rdmi Zajac.
Typed unificationgrammars.
In Proceedings of the 13th InternationalConference on Computational Linguistics, Vol.
3,pages 293-298, 1990.\[9\] J. E. ltopcroft and R. M. Karp.
An Algorithm forTesting the Equivalence of Finite Automata.
Tech-nical Report TR-71-114, Dept.
of Computer Science,Cornell University, lthaca, New York, USA, 1971.\[10\] G~rard Huet.
Rdsolution d'Equations dans des Lan-gages d'Order 1, 2, ..., w. PhD thesis, Universit6 deParis VH, France, 1976.\[11\] Lauri Katttunen.
Features and values.
In Proceedingsof the lOIh International Conference on Computa-tional Linguistics, pages 28-33, Stanford, California,USA, 1984.\[12\] Robert T. Kasper.
Unification and classification: anexperiment in information-hazed parsing.
In Proceed-ings of the International Workshop on Parsing Tech-nologies, pages 1 7, Pittsbnrgh, Pennsylvania, USA,1989.\[13\] Robert T. Kasper and William C. Rounds.
A logi-cal semantics for feature structure.
In Proceedings ofthe 241h Annual Meeting o\] the Association for Com-putational Linguistics, ACL, New York, New York,USA, 1986.\[14\] Martin Kay.
Parsiug in functional unitication gram-mar.
In D. R. Dowty, editor, Natural Language Pars-in9, chapter 7, pages 251-278, Cambridge UniversityPress, 1985.\[15\] Kiyoshi Kogure.
Parsing Japanese spoken sentencesbased on HPSG.
In Proceedings of the InternationalWorkshop on Parsing Technologies, pages 132-141,Pittsburgh, Pennsylvania, USA, 1989.\[16\] Kiyoshi Kogure.
Strategic lazy incremental copygraph unification.
In Proceedings of the 131h Inter-national Conference on Computational Linguistics,Vol.
2, pages 223-228, 1990.\[17\] M. Drew Moshier and William C. Rounds.
A logicfor partially specified ata structures.
In Proceedingsof the ldth ACM Symposium on Principles of Pro-gramming Language, pages 156 167, Munich, WestGermany, 1987.\[18\] Carl Pollard and Ivan Sag.
An Information.BasedSyntax and Semantics--Volume 1: bhndamentals.CSLI Lecture Notes Number 13, CSLI, 1987.\[19\] William C. Rounds and Robert T. Kasper.
A com-plete logical calculus for record structures represent-ing linguistic information.
In Proceedings of Sympo-sium on Logic in Computer Science, IEEE ComputerSociety, 1986.\[20\] Gert Smolka.
A Feature Logic with Subsorts.
Tech-nical Report LILAC Report 33, IBM Deutschland,7000 Stuttgart 80, West Germany, 1988.\[21\] Hideto Tomabechi.
Quasi-destructive graph unifi-cation.
In Proceedings of the 291h Annnal Meet-ing of the Association for Computational Linguistics,pages 315-322, ACL, University of California, Berke-ley, California, USA, 1991.\[22\] Yoshihiro Ueda and Kiyoshi Kogure.
Generationfor dialogue translation using typed feature struc-tnre unification.
In Proceedings of the 13th h~ter.national Conference on Computational Linguistics,Vol.
1, pages 64-66, 1990.\[23\] David A. Wroblewski.
Nondestructive graph unifi-cation.
In Proceedings of the 6th National Confer-ence on Artificial Intelligence, pages 582-587, AAAI,Seattle, Washington, USA, 1987.\[24\] R6mi Zajac.
A transfer model using a typed fea-ture structure rewriting system with inheritance.
InProceedings of the PTth Annual Meeting of Associa-tion for Computational Linguistics, pages 1-6, ACL,Vancouver, British Columbia, Canada, 1989.Ac-rEs DE COLING-92, NANTEs, 23-28 ^o~'r 1992 3 8 6 Paoc.
oF COLING-92, NANTES, AUG, 23-28, 1992
