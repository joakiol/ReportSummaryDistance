THE SYNTAX AND SEMANTICS OF USER-DEFINED MODIFIERSIN ATRANSPORTABLE NATURAL LANGUAGE PROCESSORBruce W. BallardDept.
of Computer  ScienceDuke UniversityDurham, N.C. 27708ABSTRACTThe Layered Domain Class system (LDC) is anexperimental natural language processor beingdeveloped at Duke University which reached theprototype stage in May of 1983.
Its primary goals are(I) to provide English-language retrieval capabilitiesfor structured but unnormaUzed data files created bythe user, (2) to allow very complex semantics, in termsof the information directly available from the physicaldata file; and (3) to enable users to customize thesystem to operate with new types of data.
In this paperwe shall discuss (a) the types of modifiers LDC providesfor; (b) how information about the syntax andsemantics of modifmrs is obtained from users; and (c)how this information is used to process English inputs.I INTRODUCTIONThe Layered Domain Class system (LDC) is anexperimental natural language processor beingdeveloped at Duke .University.
In this paper weconcentrate on the typ.~s of modifiers provided by LDCand the methods by which the system acquiresinformation about the syntax and semantics of user-defined modifiers.
A more complete description isavailable in \[4,5\], and further details on matters notdiscussed in this paper can be found in \[1,2,6,8,9\].The LDC system is made up of two primarycomponents .
First, the Ic'nowledge aeTui.~i2ioncomponent ,  whose job is to find out about  thevocabulary  and semant ics  of the language to be usedfor a new domain, then  inquire about  the composit ionof the  under ly ing input  file.
Second, the User-PhaseProcessor, which enables  a user  to obtain stat ist ica lreductions on his or her data by typed English inputs.The top-level design of the User-Phase processorinvolves a linear sequence of modules for scavtvtir~g theinput and looking up each token in the dictionary;pars/rig the scanned input to determine its syntacticstructure; translatiort of the parsed input into anappropriate formal query; and finally query processing.. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.This research has been supported in part by theNational Science Foundation, Grants MCS-81-16607 andIST-83-01994; in part by the National Library ofMedicine, Grant LM-07003; and in part by the Air ForceOffice of Scientif ic Research,  Grant 81-0221.The User-Phrase portion of LDC resembles familiarnatural language database query systems such asINTELLECT, JETS.
LADDER, LUNAR.
PHLIQA, PLANES, REL,RENDEZVOUS,  TQA, and USL (see \[10-23\]) while theoverall LDC system is similar in its objectives to morerecent systems such as ASK, CONSUL, IRUS, and TEAM(see \[24-319.At the time of this writing, LDC has beencompletely customized  for two fairly complex domains.f rom which examples  are drawn in the remainder  of thepaper,  and several  s impler  ones.
The complex domainsare  a 2~a l  gTz, des domain, giving course grades  fors tudents  in an academic  depar tment ,  and a bu~di~tg~rgsvtizatiovt domain,  conta in ing informat ion on thefloors, wings, corr idors,  occupants ,  and so forth for oneor more buildings.
Among the simpler domains LDC hasbeen customized  for are files giving employeeinformat ion and s tock  market  quotat ions.II MODIFIER TYPES PROVIDED FORAs shown in \[4\].
LDC handles inputs about ascomplicated asstudents who were given a passing grade by aninstructor Jim took a graduate course fromAs suggested here, most of the syntactic and semanticsophistication of inputs to LDC are due to noun phrasemodifiers, including a fairly broad coverage of relativeclauses.
For example, if LDC is told that "students takecourses from instructors", it will accept such relativeclause forms asstudents who took a graduate course from Trivedicourses Sarah took from Rogersinstructors Jim took a graduate course fromcourses that were taken by Jimstudents who did not take a course from RosenbergWe summarize the modifier types distinguished by LDCin Table i. which is divided into four parts roughlycorresponding to pre-norninal, nominal, post-nominal,and negating modifiers.
We have included severalmodifier types, most of them anaphorie, which areprocessed syntactically, and methods for whosesemantic processing are being implemented along thelines suggested in \[7\].52Most of the  names  we give to mod i f ie r  types  a re  self-exp lanatory ,  but  the  reader  will no t i ce  that  we havechosen  to categor i ze  verbs ,  based  upon  the i rsemantics, as tr~Isial verbs, irrtplied para~ter  verbs;and operational verbs.
"Trivial" verbs, which involve nosemantics to speak of, can be roughly paraphrased as"be associated with".
For example, students who  take acertain course are precisely those students associated~ith the database records related to the course.
"Implied parameter" verbs can be paraphrased as alonger "trivial" verb phrase by adding a parameter andrequisite noise words for syntactic acceptability.
Forexample, students who fai/a course are those studentswho rrmlce a grade of F in the course.
Finally,"operational" verbs require an operation to beperformed on one or more of its noun phrasearguments, rather than simply asking for a comparisonof its noun phrase referent(s) against values inspecified fields of the physical data file.
For example,the students who oz~tscure J im are precisely thosestudents who  Trtake a grade h~gher than the grade ofJirm At present, prepositions are treated semanticallyas trivial verbs, so that "students in AI" is interpretedas "students associated with records related to the AIcourse".Table 1 - Modif ier Types Available in LDCModif ier Type Example UsageSyntaxImp lementedSemanticsImplementedOrdinal the second floor yes yes3uperlative the largest office yes yesAnaphoric better studentsComparative more  desirable instructors yes noAdjective the large roomsclasses that were small yes yesAnaphoricArgument-Taking Adjective adjacent offices yes noAnaphoricImplied-Parameter Verb failing students yes noNoun Modifier conference rooms yes yesSubtype offices yes yesArgument-Taking Noun classmates of JimJim's classmates yes yesAnaphoricArgument-Taking Noun the best classmate yes noPrepositional Phrase  students in CPS215 yes  (yes)Comparative Phrase students better than Jima higher grade than a C yes yesTrivial instructors who teach AIVerb Phrase students who took AI from Smith yes yesImplied-ParameterVerb Phrase students who failed AI yes yesOperationalVerb Phrase students who outscored Jim yes yesArgument-Taking Adjective offices adjacent to X-238 yes yesNegations the non graduate students(of many  sorts) offices not adjacent to X-23Binstructors that did not teach M yes yesetc.53III KNOWLEDGE ACQUISITION FOR MODIFIERSThe job of the knowledge acquis i t ion moduleof LDC, called "Prep" in Figure 1, is to' find out about(a) the vocabulary of the  new domain and (b) thecomposit ion of the phys ica l  data  file.
This paper  isconcerned only with vocabulary  acquisit ion, whichoccurs  in three stages.
In Stage 1, Prep asks the userto name each ent~.ty, or conceptua l  data  item, of thedomain.
As each ent i ty  name is given, Prep asks forseveral simple kinds of information,  as inENTITY NAME?
sectionSYNONYMS:  classTYPE (PERSON, NUMBER,  LIST, PATTERN, NONE)?pat te rnGIVE 2 OR 3 EXAMPLE NAMES: epsSl.12, ee34.1NOUN SUBTYPES: noneADJECTIVES: large, smallNOUN MODIFIERS: noneHIGHER LEVEL ENTITIES: c lassLOWER LEVEL ENTITIES: s tudent ,  ins t ruc torMULTIPLE ENTITY?
yesORDERED ENTITY?
yesPrep next  determines  the case s t ruc ture  of verbshaving the given ent i ty  as sur face subject ,  as inACQUIRING VERBS FOR STUDENT:A STUDENT CAN pass a coursefail a coursetake a course from an instructormake  a grade from an instructormake  a grade in a courseIn Stage 2, Prep learns the rnorhological variants ofwords not known to it, e.g.
plurals for nouns,comparative and superlative forms for adjectives, andpast tense and participle forms for verbs.
For example,PAST-TENSE VERB ACQUISITIONPLEASE GIVE CORRECTED FORMS, OR HIT RETURNFAIL FAILED >BITE BITED > bitTRY TRIED >In Stage 3, Prep acquires the semantics of adjectives,verbs, and other  modifier types, based upon thefollowing principles.1.
Systems which a t tempt  to acquire complexsemant ics  f rom relatively untrained users  hadbet ter  restr ict  the class of the  domains  they seekto provide an interface to.For this reason,  LDC rest r ic ts  itself to a class ofdomains \[1\] in which the impor tant  re lat ionshipsamong domain entit ies involve h ierarch ica ldecomposit ions.2.
There need not be any correlat ion between the typeof modif ier  being defined and the way in which itsrr~eaTt/rtg re lates to the under ly ing data file.For this reason, Prep acquires the mean ings  of alluser -def ined modif iers in the same manner  byproviding such  primitives as id, the identity funct ion;va2, which retr ieves a specif ied field of a record; vzzern,which re turns  the size of its a rgument ,  which isassumed to be a set; sum,  which re turns  the sum of '.
'-slist of inputs; aug, which re turns  the average of its listof inputs; and pct, which re turns  the percentage  of itslist of boolean arguments  which are true.
Other user-def ined adject ives may also be used.
Thus, a "desirableinst ructor"  might be def ined as an ins t ruc tor  who gavea good grade to more than  half  his s tudents ,  where a"good grade" is def ined as a grade of B or above.
Thesetwo adjectives may be specif ied as shown below.ACQUIRING SEMANTICS FOR DESIRABLE INSTRUCTORPRIMARY?
sectionTARGET?
gradePATH IS: GRADE /STUDENT /SECTION-FUNCTIONS?
good /id /petPREDICATE?
> 50ACQUIRING SEMANTICS FOR GOOD GRADEPRIMARY?
gradeTARGET?
gradePATH IS: GRADEFUNCTIONS?
valPREDICATE?
>= BAs shown here,  Prep requests  th ree  pieces ofinformat ion for each adject ive-ent i ty  pair, namely  (1)the  pv-/.rn.ary (highest- level)  and ~c~rget \[lowest-level)ent i t ies  needed to specify the desired adjectivemeaning;  (2) a list of furtcticvts cor respond ing  to thearcs  on the path f rom the pr imary  to the ta rget  nodes;and  finally (3) a pred/cate to be applied to thenumer ica l  value obtained f rom the series of funct ioncalls just  acquired.IV UTILIZATION OF THE INFORMATION ACQUIREDDURING PREPROCESSINGAs shown in Figure i, the English-languageprocessor of LDC achieves domain independence byrestricting itself to (a) a domain-independent.linguistically-motivated phrase-structure grammar  \[6\]and (b) and the domain-specific files produced by theknowledge acquisition module.The simplest file is the pattern file, whichcaptures the morphology of domain-specific propernouns, e.g.
the entity type "room" may have valuessuch as X-238 and A-22, or "letter, dash.
digits".
Thisinformation frees us from having to store all possiblefield values in the dictionary, as some systems do, or tomake  reference to the physical data file when new datavalues are typed by the user, as other systems do.The domain-specific d/ctlon~ry file containssome standard terms (articles, ordinals, etc.)
and alsoboth root words and inflections for terms acquiredfrom the user.
The sample dictionary entry( longest  Superl  long (nt meet ing week))says that " longest" is the superlat ive form of theadjective "long", and may occur in noun phrases whose'head noun refers to entities of type meeting or week.By having this information in the dictionary, the parsercan perform "local" compatibility checks to assure the54I UserUser ., > PREPPattern Dictionary Compat  File / / ///SCANNER ~I PARSERF i lef---*1 TRANSLATORAugmented Phrase-Structured GrammarMacroFile \) RETRIEVAL iT Text-Edited Data FileFigure 1 - Overview of LDCintegrity of a noun phrase being built up, i.e.
to assureall words in the phrase can go together  on non-syntact ic grounds.
This aids in disambiguation, yetavoids expensive interaction with a subsequentsemant ics module.related to negation Interest ingly,  most meaningfulinterpretat ions of phrases containing "non" or "not"can be obtained by insert ing the retrieval r2.odule's Notcommand at an appropr iate point in the macro bodyfor the modifier in question.
For example,An opportunity to perform "non-local"compatibil ity checking is provided for by the eompatfile, which tells (a) the case st ructure of each verb, i.e.which preposit ions may occur and which entity typesmay fill each noun phrase "slot", and (b) which pairs ofentity types may be linked by each preposition.
Theformer information will have been acquired directlyfrom the user, while the latter is predicted byheurist ics based upon the sorts of conceptualrelat ionships that  can occur in the "layered" domainsof interest  \[1\].Finally, the macro file contains the meaningsof modifiers, roughly in the form in which they wereacquired using the specification language discussed inthe previous section.
Although this required us  toformulate our own retr ieval query language \[3\], havingcomplex modifier meanings directly exceutable by theretrieval module enables us to avoid many of theproblems typically arising in the translat ion from parsest ructures  to formal retrieval queries?
Furthermore,some modifier meanings can be derived by the systemfrom the meanings of other modifiers, ra ther  thanseparately acquired from the user?
For example, if themeaning of the adjective "large" has been given by theuser, the system automatical ly processes "largest" and"larger than ..." by appropriately interpret ing themacro body for "large".A partially unsolved problem in macroprocessing involves the resolution of scope ambiguitiesstudents  who were not  failed by Rosenbergmight or might not be intended to include studentswho did not take a course from Rosenberg.
Theretrieval query commands generated by the positiveusage of "fail", as instudents that Rosenberg failedwould be the sequenceinstructor  -- Rosenberg;student  -> failso the question is whether  to introduce "not" at thephrase levelnot i inst ructor  = Rosenberg;s tudent  -> fail~or instead at the verb levelinstructor = Rosenberg;not ~student -> fail\]Our cur rent  system takes the literal reading, and thusgenerates the first interpretat ion given?
The examplepoints out the close relationship between negationscope and the important  problem of "presupposition",in that  the user may be interested only in students  whohad a chance to be failed?55REFERENCESI.
BaUard, B.
A "Domain Class" approach to transportablenatural language processing.
Cogn~tio~ g~td /YrczinTheory, 5 (1982), 3, pp.
269-287.Ballard, B. and Lusth, J.
An Engl ish- language processingsystem that "learns" about new domains.
AF~PS N?~on~Gomputer Conference, 1983. pp.
39-46.Ballard, B. and Lusth, J.
The design of DOMINO: aknowledge-based information retrieval processor foroffice enviroments.
Tech.
Report CS-1984-2, Dept.
ofComputer Science, Duke University, February 1984.Ballard, B., Lusth, J. and Tinkham, N. LDC-I: atransportable, knowledge-based natural languageprocessor for office environments.
ACM Tt'~ns.
o~ Off~ce/~-mah~ ~ystoma, 2 (1984), 1, pp.
1-25.BaUard, B., Lusth, J. and Tinkham, N. TransportableEnglish language processing for office environments.AF~'  Nat~mw~ O~m~uter Conference, 1984, to appear inthe proceedings.Ballard, B. and Tinkham, N. A phrase-structuredgrammatical formalism for transportable naturallanguage processing, llm~r.
J. Cow~p~t~zt~na~ L~n~ist~cs,to appear.Biermann, A. and Ballard, B.
Toward natural languagecomputation.
Am~r.
~.
Com~ut=~mu=l ~g=iet~cs, 6(1980), 2, pp.
71-86.Lusth, J.
Conceptual Information Retrieval for ImprovedNatural Language Processing (Master's Thesis).
Dept.
ofComputer Science, Duke University, February 1984.Lusth, J. and Ballard, B.
Knowledge acquisition for anatural language processor.
Cue,'ere*we o~ .4~t~-ieJ.~tetH@e~ws, Oakland University, Rochester, Michigan,April 1983, to appear in the proceedings.I0.
Bronnenberg, W., Landsbergen, S., Scha, R.,Schoenmakers, W. and van Utteren, E. pHLIQA-1, aquestion-answering system for data-base consultation innatural English.
/Wt~s  tecA, Roy.
38 (1978-79), pp.229-239 and 269-284.11.
Codd, T. Seven steps to RENDEZVOUS with the casualuser.
\[n Do2~ Base M?m,o, gem, en?, J. Kimbie and K.Koffeman (Eds.
), North-Holland, 1974.12.
Codd, T. RENDEZVOUS Version I: Aa experimentalEnglish-language query formulation system for casualusers of relational data bases.
IBM Research ReportRJ2144, San Jose, Ca., 1978.13.
Finin, T., Goodman, B. and Tennant, H. JETS: achievingcompleteness through coverage and closure.
Int.
J. Conf.on Ar t~ j~/n~e/~igence ,  1979, pp.
275-281.14.
Harris, L. User-oriented ata base query with the Robotnatural language system.
Int.
J. M~n-M~ch~ne ~d ies ,  9(1977), pp.
697-713.15.
Harris, L. The ROBOT system: natural languageprocessing applied to data base query.
ACM Nct~ion~tC~rnference, 1978, pp.
165-172.16.
Hendrix, G. Human engineering for applied naturallanguage processing.
/n~.
$.
Co~f.
o~ .4~t~j~c~a~~?tott@jev~e, 1977, pp.
183-191.2.3.4.5.8.7.8.9.17.
Hendrix, G., Sacerdoti, E., Sagalowicz, D. and Slocum, J.Developing a natural language interface to complex data.ACM Tr(uts.
on D=t~bsse ~l/stsrrts, 3 (1978), 2, pp.
105-147.18.
Lehmann, H. Interpretation of natural language in aninformation system.
IBM $.
_N~s.
Des.
22 (1978), 5, pp.560-571.19.
Plath, W. REQUEST: a natural language question-answering system.
IBM J: ~s.
Deo., 20 (1976), 4, pp.
326-335.20.
Thompson, F. and Thompson, B.
Practical naturallanguage processing: the gEL system as prototype.
InAd~vtces ~t Com~ters,  Vol.
3, M. Rubinoff and M.
Yovits,Eds., Academic Press, 1975.21.
Waltz, D. An English language question answering systemfor a large relational database.
Cowzm.
ACM 21 (1978), 7,pp.
526-539.22.
Woods, W. Semantics and quantification in naturallanguage question answering.
In Advances ~,n Computers,Vol.
17, M. Yovits, Ed., Academic Press, 1978.23.
Woods, W., Kaplan, R. and Nash-Webber, B.
The Lunar3L'iencos Natural Lar~w, ge ~tfov~rn~t~n ~Jstsm:\]~?rrt.
Report 2378, Bolt, Beranek and Newman,Cambridge, Mass., 1972.24.
Ginsparg, J.
A robust portable natural language database interface.
Cmlf.
on Ap'1)lied Nc~t~ral L~znguageProcessing, Santa Munica, Ca., 1983, pp.
25-30.25.
Grosz, B.
TEAM: A transportable natural languageinterface system.
Omf.
o~ ~plied Nut, rat L~-tLagsProcessiz~, Santa Monica, Ca., 1983, pp.
39-45.28.
Haas, N. and Hendrix, G. An approach to acquiring andapplying knowledge.
.~rst N;t. Cor~.
o~.~tell~qTence, Stanford univ., Palo Alto, Ca., 1980, pp.
235-239.27.
Hendrix, G. and Lewis, W. Transportable natural-languageinterfaces to databases.
Proc.
19th A~z~t  Meet~w of theACL, Stanford Univ., 1981, pp.
159-165.28.
Mark, W. Representation and inference in the Consulsystem.
~t.
Jo'i, nt Conf.
on ~ct#,f~c'i~l \[nteU{gence, 1981.29.
Thompson, B. and Thompson, F. Introducing ASK, asimple knowledgeable system.
Co~I.
on AppLied Natu~ztL~tg1~zge i~rocsssing, Santa Monica, Ca., 1983, pp.
17-24.30.
Thompson, F. and Thompson, B.
Shifting to a higher gearin a natural language system.
Na~-na~ CornF~terCoexistence, 1981, 657-662.31.
WUczynski, D. Knowledge acquisition in the Consulsystem.
Int.
Jo~,nt Conf.
on .4rt~f~c~ /ntsUwence, 1981.56
