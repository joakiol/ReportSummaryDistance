Reversible Unification Based Machm.
FranslatlonGertjan van NoordOTS RUU Trans 103,512 JK UtrechtValmoord~hutruu59.BH~netMarch 28, 1990Abstract\[n this paper it will be shown how unification grammarscan be used to build a reversible machine translationsystem.Unification grammars are often used to define the re-lation between strings and meaning representations ina declarative way.
Such grammars are sometimes usedin a bidirecLional way, thus the same grammar is usedfor both parsing and generation, in this paper 1 willshow how ~.o use bidirectional unification grammars todethle reversible relations between language dependentmeaning representations.
Furthermore it is shown howto obtain a completely reversible MT system using aseries of (bidirectional) unification grammars.l IntroductionThe notion of a rew:rsible MT system was first ex-pressed by Landsbergen \[11\].
Such a system will inprinciple produce a set of possible translations, by em-ploying linguistic knowledge only.
Choosing the bestiranslation from the set.
of linguistically possible trans-lations will rsually require other sources of knowledge,either incorporated in the systenl or provided (interac-tively) by the.
user.
The relation 'possible translation' issymmetric whereas the relation 'best translation' is not.Thus an MT system may consist of a reversible core,implementi~:g the symmetric relation ~possible transla-tion', and additional components (not necessarily re-versible) to select tile best translation.Not only is it pos.siblc to build reversible (modules of)MT systems; it has also been claimed that reversiblesystems are preferable.
For example Isabelle \[6\] clahnsthat reversible MT systems are to be preferred to oth-(:rs be(:~nlse in reversible MT systems a better under-standing of the translation re.lation is achieved; suchsystems will eventually exhibit better practicM perfor-mance.
Moreover, the arguments in favour of usingbidirectional grammars in NL1 ), such as those given in\[1, 8\] carry over to translation as well.Because o\[ tile declarative nature of unification- andlogic grammar formMisms grammars written in theseformalisms are increasingly used in a bidirectional way,thus the sa.me grammar is used for both parsing andgeneration.
Some recent developments are reported in\[3, 24, 16, 21, 2, 18, 19, 22, 20\].In this paper I will show how to use such bidirec-tional unification grammars to build a completely re-versible, multi l ingual, MT system.
For each languagethere is a unification grammar that defines a reversiblerelation between strings and language dependent lnean-ing representations (logical forms ).
Moreover, for eachlanguage pair (or set of languages) there is a unifica-tion grammar that defines a reversible relation betweensuch language dependent logicM forms.
Translation isthus detined by a series of three unification granrmars.A specific version of the system that is describedhere is implemented as the (:ore of the experiments!MiMo2 translation system \[23\].
This system aims attranslating international news items on fe lctext .
Apartfrom unification grammars the system rises a bidirec-tional two-level orthography component.
Langu age de.-pendent meanings are represented as simple predicateargument structures with some extra labels indicating'universal'  meaning such as tense and aspect.
The cur.-rent system (November 1989) includes grammars forDutch, Spanish and English.The paper is set up as follows.
In section 2, I willgive some examples that show how bidirectional uni-tication grammars can be used t.o define relation~ between logical forms of diiferent languages.
In section 3,reversibility is detined in terms of symmetry and con>patability.
Possible approaches to obtedu reversibilityare discussed.
In section 4, I wilt compare the currentapproach with some other approaches in tile unificationbased translation paradigm and discuss some problemsand future directions.2 Unif ication-based Transferin this section 1 wilt give some exan@les of the use ofa unification grammar (in PATR II \[17\] notation) todefine the relation between language dependent logi-cal forms.
For i l lustrative purposes I will assume log-ical fl)rms are represented by feature structures con-sisting of the attr ibutes pred, ar.ql, art2 together withsome attribu tes representing 'universM' meanings uchas tense, aspect, munber and person; I will not touchupon issues such a~s quantif ication and modification.The logical forlns of English and Spanish are labeled bythe attr ibutes 9 b and sp respectively.
As an example299the logical form of 'The army opened fire at the civil-ians' is represented as in figure 1.
Such feature struc-Figure 1: An example of a logical formgb =pred = open_fire_at?~ult tber  : .
sg\ [wed=c iv i l i an \ ]arg2 = number -- pltures will often be related ill a straightforward way toa Spanish equivalent., except for the value of the prodattributes.
A very simple rule in PATR II style maylook as in figure 2.
This rule simply states that theFigure 2: A simple rule0 - -+123(0 gb pred) = (1 gb)(0 gb argl) = (2 gb)(0 gb arg2> = (3 gb)(0 sp pred) = <1 sp)(0 sp  gl) = (2 sp>(0 sp arg2) = (3 sp)translation of a logical form is composed of the transla-tion of its arguments.
If the rule applies to the featurestructure in 1 tile three daughters of the rule will beinstantiated as in figure 3, and the value of sp will bebound to the sp values of these daughters.
An exampleFigure 3: Three instantiat ions\[ gb = open_fire_at \]\[ 1 gb = namber = pl'~umber  ~- sgof the rule for the first daughter will be a lexical entryand looks as iu figure 4.
The simple English expression'army' has to be translated as a complex expression iSpanish: 'Nerza militar'.
The rule will look a.s in 5where it is assumed that the construction is analyzedin Spanish as an ordinary noun-adjective construction,and where the logical form of the adjective takes thelogical form of the noun as its argument.
The transla-tion for 'civilian' is defined in a similar rule (althoughthe translation of 'number' is different).
Note that thisexample of complex transfer is similar to the famous'schimmel - grey horse' cases.
As a result of the ruleFigure 4: A lexical entry0 --~<0 gb) = open_fire_at(0 sp> = romper_el_fuego_aFigure 5: A rule for 'fuerza rnil itar'0 ---~(0 gb pred) = ,army(0 ap pred pred) = mi l i ta r(0 sp argl  pred) = fuerza(0 sp argl  nmnber) = (0 gb number}applications the feature structure in figure 1 will getinstantiated to tile feature structure in 6, from whichthe generator generates the strir~g 'La fllerza militarrompio el fuego a la poblacion civil'.Figure 6: The feature structure after transfer9b =sppred  = open_ f i re_at\[ p red  .
.
.
.
.
.
.
y \ ]a rg l  :-x n.ur~zbe,  = s 9pred  = c iv i l i anarg2 =: t~umber  ---- plp red  = romper_e l _ fuego_aar 9 1 =at92  =\]ar91 pred = \ ]uerza,zttrllbev ~.
sffp red  = poblacioI~at9!
L ,;.,arnber = s 9In the foregoing examples the relation between Iogi-car forms is rather straightforward.
Note however thattile full power of a unification grammar can be used tosettle more difficult translation cases, because differelltattributes can be used to represent the 'translationalsyntax'.
For instance we can build a tree as value ofthe attribute tree to represetlt tile derivational historyof the translation process.
Or we can %hread'informa-tion through different nodes to be able to make transla-tions dependent on each other.
Translation parameterssuch as style and subject field can be percolated as at-tributes of nodes to obtain consistent translations; butthese attributes themselves need not be translated.3 Revers ib le  Un i t i ca t ionGrammarsA unification grammar defined in formalisms uch asPATR II and 1)CG \[12\] usually defines a relation be-tween a string of words and a logical form.
In sign-based approaches such as UCG \[26\] and flPSG \[14\] thisstring of words is not assigned a privileged status butis the value of one of the attributes of a feature struc-ture.
I will assume a formalism similar to PATR II,300but without the context-free ba~e; the string is repre-sented as the value of one of the attributes of a featurestructure.
Thus more generally, unification grammarsdefine relations between the values of two (or more 1)attributes - for example the relation between the valueof the attributes string and If, or between the value ofthe attributes sp and gb; these relations are all relationsbetween feature structures.3.1 \]ReversibilityI will call a binary relation reversible if the relation issymmetric and computable.
Both symmetry and com-putability will be explained in the following subsec-tions.
A grammar G is reversible for a relation R iff Ris reversible and defined by G. For example, a grammarthat relates trings to logical forms is reversible if boththe parsing and generation problem is computable, andthe relation between strings and logical forms is sym-metric; the parsing problem is computable if for a givenstring all corresponding logical forms can be enumer-ated by some terminating procedure; such a procedureshould halt if the given string does not have a corre-sponding logical form.
Thus: reversible -- symmetric +computable.
Note that reversibility as defined here isdifferent from bidirectionality.
The latter merely saysthat grammars are to be used in two directions, butdoes not state how the two directions relate.It is easy to see that a composition of reversible re-lations is a a reversible relation too; i.e.
if some fea-ture structure fl is related to some feature structuref~ via the reversible relations .Ri(fi,fi+l), each de-fined by some reversible grammar Gi, then R'(f l ,  fn)is reversible.
Thus an MT system that defines a rela-tion R(,%, st) via the relations t~ ( s~, 5), Ry ( l~, lt ) andRa(lt, st) is reversible if R1,2,3 are reversible.3.1.1 SymmetryA relation R C A x B is symmetric iff R(a, b) impliesR(b, a ~) where a and a' are equivalent.
For an MT sys-tem we want to define 'equivalence' in such a way thatthe translation relation is a symmetric relation betweenstrings, ttowever, strings are feature structures thus wcmust define equivalence for feature structures to obtainthis effect.Unification grammars as they are commonly usedimplement a rather weak notion of equivalence betweenfeature structures: feature structures a and b are equiv-Ment if they ca~ ~if>.
:Def in i t ion I (Weak equivalence)Two feature structures fl, f2 are weakly equivalent ifffl U f2 exists.if feature structures are taken to stand for all theirgrouml iustances this yields an acceptable versionof sym ;~e.try.
Moreover, under the assumption that1 Note that it is possible to define a unification gra~nmarthat relates everal language dependent logical forms; in thisapproach a multilingual transfer system consists of only onetransfer gramm,'mfeature structures which represent strings are alwaysground (i.e.
these feature structures cannot be ex-tended), this results in a symmetric relation between(feature structures that represent) strings.It is also possible to define a 'strong' notion of equiv-alence for feature structures that does not rely on thisassumption.Def in i t ion 2 (St rong equivalence)  Two featurestructures f l , f2 are strongly equivalent (fl =-- f2) iff/2 E A and A E f2.A grammar that defines a computable r lation betweentwo attributes under the strong definition of equiva-lence might be cMled strongly reversible.
Similarly aweakly reversible grammar is reversible under a weakdefinition of equivalence.
Again these results can begenerMized to a series of unification grammars.
Thestrong version of equivalence can be motivated on theground that it may be easier to obtain computability;this is the topic of the next subsection.
In section 3.2I will discuss possible relaxations of the strong versionof equivalence to obtain 'mildly' reversible grammars.3.1.2 Computab i l i tyA relation R C A x B is computable iff for a givena E A the set {b C B\]R(a,b)} can be enumerated bysome terminating procedure.
To discuss cornputabil-ity it is useful to look a bit more careful at the re-lations we are interested in.
These relations are allbinary relations between feature structures, ttowever,in tile case of the relation between strings and logicalforms, strings will always be related to logical forms andlogical forms will be related to strings.
Similarly forthe relation between l)utch and Spanish logical forms.Clearly, the domain and range of the relation is struc-tured and can be partioned into two sets A and \]3,\[or example the set of feature structures representingstrings and the set of feature structures representinglogical forms.
The relation R C A U B x A U B can bepartitioned similarly into the relations r C A x I\] andits inverse, r -~ C B x A.
The problem to compute Ris now replaced by two problems: the computation ofr and r -1.
For example the problem to compute therelation between logical forms and strings consists ofthe parsing- and generation problem.
It is now possi-ble to incorporate the notion of equivalence, to obtaina definition of a parser, generator and translator.
Forexample, an Mgorithm that computes the foregoing re-lation r will enumerate for a given features tructurefl all feature strnctures fy, such that r(fa, fy) and f~and f3 are equivalent.
In the case of strong equivalencethis implies that f l~  f3 (completeness), and fa U fl(coherence).
In other words, the input should not beextended (coherence) and should completely be derived(completeness).
This usage of the terms completenessand coherence was introduced in \[24\].
In the followingI will discuss ways to obtain computability of one suchpartition.It is well known that relations defined by unrestrictedunification grammars are not computable in general a~s301such grammars have Turing power \[13\]; it is thus notdecidable whether the relation is defined for some giveninput.
Usually some constraint on grammars i definedto remedy this.
For example the off-line-parsabilityconstraint \[13, 5\] ensures that the recognition problemis solvable.
Moreover this constraint also implies thatthe parsing problem as defined here is computable; i.e.the proof procedure will always terminate (because theconstraint implies that there is a limit to the depth ofpossible parse trees for all strings of a given length).llowever the off-line-parsability constraint assumesa context-free base of the formalism.
A generalizationof the off-line-parsability constraint for any binary re-lation defined by unification grammars will consist ofthree parts; the first and third of these parts are usuallyimplicit in the case of parsing.Pirst, the value of the input must be built in a well-behaved compositional way.
For example in the case ofparsing: each daughter of a rule dominates part of thestring dominated by the mother of that rule.
Similarlyfor transfer and generation: each daughter of a rulehas a value for I f  that is part of the value of If of themother.Second, a special condition is defined for rules wherethe input vMue of the mother is the same as the in-put value of one of the daughters.
\[:or parsing suchrules have exactly one daughter.
A chain of applica-tions of such rules is disallowed by some constraint orother; this is the core of most definitions of the off-line parsabilityoconstraint.
For example in \[13\] such achain is disMlowed as the principal functor of a termmay only occur once in a chain.
For a slightly moregeneral definition, cf.
\[5\].
For generation and transfera similar constraint can be defined.
In the terminologyof \[18, 19\] the 'head' of a rule is a daughter with thesame logical form as its mother.
A chain of these headsmust be disallowed.Third, the input should not get extended uring theproof procedure.
In the case of parsing this is achievedeaMly because the input is ground 2.
For generationand transfer this is not necessarily the case.
This is thepoint where the usefulness of the coherence conditioncomes in; the coherence requirement explicitly statesthat extension of the input is not allowed.
For thisreason strong reversiblity may be easier to obtain thanweak reversibility.
In the next subsection I will discusstwo relaxations of strong symmetry that will not affectthe computability properties discussed here.Generalizing the terminology introduced by \[13\] aproof procedure is strongly stable iff it always termi-nates for grammars that adhere to a generalized off-lineparsability constrMnt.
In \[15\] a general proof procedurefor DCG based on head-driven generation \[18, 19, 22\]is defined that is strongly stable for a specific instanti-ation of the generalized off-line parsability constraint.?
'Note that this is the reason that most DCG parsersexpect that the input value of the string has an atomictail, i.e.
parse(\[john, kisses,mary\], ~)will work fine, butparse(\[john, kisses, mary\]X\], X) will cause problenas.3 .2  Poss ib le  re laxat ionsIt is easy to see that the completeness and coherencerequirenrents make life hard for the rulewriter as she/heneeds to know exactly what the possible values of in-puts are for some component.
It is possible to relax thecompleteness and coherence requirement in two waysthat will not affect the reversibility properties betweenstrings.
The useflfiness of these relaxations depends onthe analyses a user wishes to define.3.2.1 Cyc l i c  and  non-cyc l i c  a t t r ibutesThe first relaxation assumes that there is a sort sys-tem defined for feature structures that makes it pos-sible to make a distinction between cyclic and non-cyclic attributes (cf.
\[5\]).
For the moment a non-cyclic attribute may be defined a.s an attribute witha finite number of possible values (i.e.
it is not recur-sive).
For example the attributes argl and arg2 willbe cyclic whereas number will be non-cyclic.
The com-pleteness and coherence condition is restricted to cyclicattributes.
As the proof procedure can only further in-stantiate non-cyclic attributes no termination problemsoccur because there are only a finite number of possi-bilities to do this.
The definition of 'equivalence' forfeature structures is now slightly changed.
\[\[b definethis properly it is necessary to define the notion non-cyclic extension.
A non-cyclic extension of a featurestructure only instantiates non-cyclic attributes.
Thisresults in the following definition of equivalence:Def in i t ion 3 (Non-cycl ic  equ iva lent )  Two featurestructures f:, f2 are non.cyclic equivalent iff f~ _=__ f~where f~ are non-cyclic extensions of f,~.It will be clear that the usefulness of this definitiondepends heavily on the style of grammar writing thatis used.
Note that it is of course also possible to declarefor each non-cyclic attribute whether the completenessand coherence requirements hold.3.2.2 Reent ranc lesThe second relaxation is not without ramifications forthe organization of a transfer grammar.
Tlfis relax-ation has to do with reentrancies in feature structures.Some constructions such as control verbs and relativeclauses may be represented using reentrancies; for ex-ample 'the soldiers tried to shoot the president' maybe represented by a feature structure where the firstargument of 'try' is reentrant with the first argumentof 'shoot', cf.
figure 7.
The translation of such logicalforms to Dutch equivalents can be defined as in rule 8.In this rule the reentrancy is explicitly mentioned fortwo reasons.
The first reason is simply that in thecase of different possible translations of ar91 we wantthe same translation for both argl and the embeddedargl.
Note that the translation of 'soldier' into Dutchcan be both 'soldaat' or 'militair'.
If the reentrancy isnot mentioned the system has to try to generate fromfour different Dutch logical forms, two of which withoutmatching argl's.302Figure 7: A logical form containing reentrancygb=pred = tryargl = \[\] \[ pred = soldiernumber = pl \]ar.q2 = argl = \[\] pred = presidentarg2 = nu'mber = sgFigure 8: Translat ing subject control0 - - .123(0 gb pred) = (1 gb)<0 nl pred} = <~ ~p>(0 n l  argl) = (0 nl arg2 argl)<o gb ~rg1> = <2 gb)(0 nl ~rg1> = <2 ~p><0 gb arg2} = (3 gb><o n:L ~g2} = <3 ~p>The reentrancy is also mentioned because this is re-quired by the completeness condition.
It is possible torelax the completeness and coherence condition withrespect to these reentrancies, again without directingthe reversibility properties of the system by slightlychanging the definition of equiva\]ence.
There is a trade-off between simplicity of the transfer grammar (in thepresence of this relaxation) and the efficiency of thesystem.
In the case of this relaxation the system willeventually lind the good translations, but it may take awhile.
On the other hand, if we are to mention all (pos-sibly unbounded) reentrancies xplicitly then the trans-fer grammar will have to be complicated by a threadingmechanism to derive such reen trancies.
Again, the spe-cific use o:\[ reentrancies in the logical forms that are de-fined will deterlnine whether this relaxation is desiredor not.4 F ina l  remarksThe objective to build a reversible MT system usinga series of unification grammars is similar to the ob-jective of the CRITTER system as expressed in \[3, 7\],and the work of Zajac in \[25\].
Instead of using unifica-tion grammars CRITTER uses logic grammars; Zajacuses a type system including an inheritance mechanismto define transfer-like rules.
In these two approachesless attention is being paid to an exact definition of re-versibility; although our work may be compatible withthese approaches.A somewhat different approach is advocated in \[9\].In that approach a system is described where an I, FGgrammar for some source language is augnlented withequations that define (part of) the target level repre-sentations.
A generator derives from this partial de-scription a string according to some LFG grammar ofthe target language.
Instead of a series of three gram-mars this architecture thus assumes two grammars, oneof which both defines the source language and the rela-tion with the target language.
The translation relationis not only defined between logical forms but may relate~ll levels of representation ( c.structure, f-structure,a-structure).
Although in this approach monolingualgrammars may be used in a bidirectional way it is un-clear whether the translation equations can be usedbidirectionally 3An important problem for the approach advocatedhere is the problem of logical form equivalence.
Shieber\[16\] noted that unification grammars usually definea relation between strings and some canonical ogicalform.
Depending on the nature of logical forms thatare being used, severM representations of a logical formmay have the same 'meaning'; just as in first orderpredicate calculus the formulas p v q and q v p are logi-cally equivalent; a unification grammar will not know ofthese equivalences and, consequently, all equivalenceshave to be defined separately (if such equivalents arethought of as being translational equiwdents); for ex-ample in a transfer grammar two rules may be definedto translate p V q into both p' V q' and q' V p' if theseformulas arc thought of ,~ being equivalent.
Of coursethis technique can only be applied if the number ofequivalences is finite, it is not possible to define that pis equivalent with .
.
.
.
.
p for any even number of --'s.The approach discussed so far can be extended justas unification grammars for parsing and generationhave been extended.
Apart from equationM constraintsit will be useful to add others such as disjunction andnegation.
Moreover it seems useful to allow some ver-sion of universal constraints or some inheritance mech-anisrn to be able to express generalizations and excep-tions more easily.AcknowledgementsI want to thank Joke Dorrepaal, Pim van der Eijk,Maria Florenza, Dirk Iteylen, Steven Krauwer, JanLandsbergen, Michael Moortgat, IIerbert Ruessink andLouis des Tornbe.
I was supported by the Euro-pean Community and the NBBI through the Eurotraproject.References\[1\] Douglas E. Appelt.
Bidirectional gr~nmars and thedesign of natm'al language generation systems.
In The-oretical Issues in Natural Language Processing 3, 1987.\[2\] Jonathaal Calder, Mike Rcape, and tlenk Zeevat.
Analgorittma for generation i unification catcgorial gram-mar.
In Fourth Con.ference of the European Chapter ofthe Association for Computational Linguistics, 1989.\[3\] Marc Dymetman ~ld PielTe Isabellc.
Reversible logicgrannnars for machine translation.
In Proceedings ofthe Second International Conference on Theoretical3Although parsing of LFG's is decidable no such resultis available for generation; ote furthermore that accordingto \[9\] extension is Mlowed dm'ing generation.303and Methodological issues in Machine Translation ofNatural Languages, 1988.\[4\] Barbara Qrosz, Karen Sparek Jones, and Bonny LynnWebber, editors.
Readings in Natural Language Pro-cessing.
Morgan Kaufinann, 1986.\[5\] Andrew Haas.
A generalization of the offline parsablegrammars.
In '27th Annual Meeting oJ the Associationfor Computational Linguislies, 1989.\[6\] Pien'e Isabelle.
Towards reversible MT systems.
In MTSummit \]I, 1989.\[7\] Pien'e Isabelle, Marc Dymetman, and Elliott Macldo-vitch.
CRITTER: a translation system for a~'ieulturMmarket reports.
In Proceedings o/ the 12th Interna-tional Conference on Computational Linguistics, Bu-dapest, 1988.\[8\] Paul S. Jacobs.
Achieving bidirection'Mity.
In Proceed-ings o\] the 12th International Conference on Compu-tational Linguistics, 1988.\[9\] Ronald Kaplan, Klaus Netter, Jiirgen Wedekind, andAnnie Zaenen.
Translation by structural correspon-dences.
In Fourth Conference o\] the European Chap-ter of the Association for Computational Linguistics,1989.\[10\] Margaret King, editor.
Machine Translation, the Stateo\] the .4 ft. Edinburgh University Press, 1987.\[11\] Jan Landsbergen.
Isomorphic grammars and their usein the Rosetta translation system, 1984. paper pre-sented at the tutorial on Machine Translation, Luganot984, Also appears in \[10\].\[12\] Femando C.N, Pereira and David WaITen.
Definiteclause grammars for language analysis - a survey of theformMism and a comparison with augmented transitionnetworks.
Artificial Intelligence, 13, 1980. reprinted in114\].\[13\] Femando C.N.
Pereira and David Wan'ca.
Parsing asdeduction.
In 21st Annual Meeting of the Association/or Computational Linguistics, 1983.\[14\] Carl Pollard and Ivan Sag.
In.formation Based Syntaxand Semantics.
Center for the Study of Langalage andInformation Stanford, 1987.\[15\] Herbert Ruessink attd Gertjan van Noord, Remarks onthe bottom-up generation Mgorithm.
Technical report,Department of Linguistics, OTS RUU Utrecht, 1989.\[16\] Stuart M. Stfieber.
A mfiform architecture for parsingand generation.
In Proceedings o/ the 12th Interna-tional Conference on Computational Linguistics, 1988.\[17\] Stuart M. SIfieber, Hans Uszkoreit, Fernando C.N.Pereira, J. Robinson, and M. Tyson.
Tile formalismand implementation of PATR-II.
In B. J. Grosz andM.
E. Stickel, editors, Research on Interactive Acqui-sition and Use o\] Knowledge.
SRI report, 1983.\[18\] Stuart M. Shieber, Gertjan van Noord, Robert C.Moore, and Fernando C.N.
Pereira.
A semantic-head-driven generation Mgorithm for unification based for-mMisms.
In 27th Annual Meeting of the Association.for Computational Linguistics, 1989.\[19\] Stuart M. Shieber, Gertjan van Noord, Robert C.Moore, and Fernando C.N.
Pereira.
Semantic-head-driven generation.
Computational Linguistics, 1990.To appear.\[20\] Tomek Strzalkowsld.
Automated inversiot) of a unifica-tion parser into a unification generator.
Technical re-port, Courant Institute of Mathematical Sciences, NewYork University, 1989. technical report 465.\[21\] Gertjau van Noord.
BUG: A directed lmttom-up gen-erator for unification ba~sed fonnMisms.
Working Pa-persia Natural Language Processing, Katholieke Uni-versiteit Leuven, Stichting Taaltechnologie Utrecht, 4,1989.\[22\] Gertjan van Noord.
An overview of head-drivenbottom-up generation.
In Robert Dale, Chris Mellish,and Michael Zock, editors, Current Research in Natu-ral Language Generation.
1990.\[23\] Gertjan vail Noord, Joke DorrepaM, Louis des Tombe,and Pim van der Eijk.
The MiMo2 research system.OTS RUU Utrecht.\[24\] Jiirgen Wedekind.
Generation as structure drivenderivation.
In Proceedings o/ the 12th InternationalConference on Computational Linguistics, 1988.\[25\] Rdmi Zajac.
A transfer model using a typed featurestructure rewriting system with inheritcnce, In 27thAnnual Meeting of the Association for ComputationalLinguistics, 1989.\[26\] \[leak Zeevat, Ewau Klein, and Jo Calder.
Unificationcategorial grammar.
In Nicholas tIaddock, Ewan Klein,and Glyn Morrill, editors, Categorial Grammar, Uni-fication Grammar and Parsing.
Centre for CognitiveScience, 1987.
Volume 1 of Working Papel.
's in Cogni-tive Science.304
