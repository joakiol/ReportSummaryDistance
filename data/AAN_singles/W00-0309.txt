Task-based dialog management using an agendaWei Xu and Alexander I. RudnickySchool of Computer Science - Carnegie Mellon University5000 Forbes Ave - Pittsburgh, PA 15213{xw, air\] @cs.
cmu.
eduAbstractDialog man tigement addresses two specificproblems: (1) providing a coherent overallstructure to interaction that extends beyond thesingle turn, (2) correctly managing mixed-initiative interaction.
We propose a dialogmanagement architecture based on the followingelements: handlers that manage interactionfocussed on tightly coupled sets of information,a product that reflects mutually agreed-uponinformation and an agenda that orders the topicsrelevant to task completion.1 IntroductionSpoken language interaction can take manyforms.
Even fairly simple interaction can be veryuseful, for example in auto-attendant systems.For many other applications, however, morecomplex interactions eem necessary, eitherbecause users cannot always be expected toexactly specify what they want in a singleutterance (e.g., obtaining schedule information)or because the task at hand requires ome degreeof exploration of complex alternatives (e.g.,travel planning).
Additionally, unpredictablecomplexity is introduced through error ormisunderstanding and the system needs to detectand deal with these cases.
We are interested inmanaging interaction in the context of a goal-oriented task that extends oveg multiple tums.Dialog management i  the context of purposefultasks must solve two problems: (1) Keep trackof the overall interaction with a view to ensuringsteady progress towards task completion.
Thatis, the system must have some idea of how muchof the task has been completed and moreimportantly some idea of what is yet to be done,so that it can participate in the setting ofintermediate goals and generally shepherd theinteraction towards a successful completion ofthe task at hand.
(2) Robustly handle deviationsfrom the nominal progression towards problemsolution.
Deviations are varied: the user may askfor something that is  not satisfiable (i. e.,proposes a set of mutually-incompatibleconstraints), the user may misspeak (or, morelikely, the system may misunderstand) a requestand perhaps cause an unintended (and maybeunnoticed) deviation from the task.
The usermight also underspecify a request while thesystem requires that a single solution be chosen.Finally the user's conception of the task mightdeviate from the system's (and its developers)conception, requiring the system to alter theorder in which it expects to perform the task.Ideally, a robust dialog management architecturecan accommodate all of these circumstanceswithin a single framework.We have been exploring dialog managementissues in the context of the Communicator \[3\]task.
The Communicator handles a complextravel task, consisting of air travel, hotels andcar reservations.2 Model ing DialogExisting approaches to dialog management aredifficult to adapt o the current problem becausethey either impose a rigid structure on theinteraction or because they are not capable ofmanaging data structures beyond a certain levelof complexity.
Call-flow based systems (moregenerally, graph-based systems) handle thecomplexity of dialog management by explicitlyenumerating all possible dialog states, as well asallowable transitions between states.
This servesthe purpose of partitioning the problem into a42finite set of states, with which can be associatedtopic-specific elements (such as grammar,prompts, help and interactions with other systemcomponents, e.g., database interaction).Transition between states is predicated on theoccurrence of specific events, either the user'sspoken inputs or through (e.g.)
a change in back-end state.
It is the nature of these systems thatthe graphs are often but not exclusively trees.Except for the simplest tasks, graph systemshave several limitations: Unless the graph iscarefully designed, users will find themselvesunable to switch to a topic that is coded in adifferent sub-tree without going through thecommon par~e~t of the two.
Often this is throughthe root node-of the dialog.
Similarly it is notalways possible to navigate an existing tree, inorder, e.g., to correct information supplied in anearlier node.beforehand the exact type of trip an individualmight take (though the building blocks of anitinerary are indeed known).
The system benefitsfrom being able to construct the itinerarydynamically; we denote these solution objectsproducts.
Users also expect to be able tomanipulate and inspect the itinerary underconstruction.
By contrast, frame systems do notafford the user the ability to manipulate theform, past supplying fillers for slots.
Theexception is the selection of an item from asolution set.
We do not abandon the concept of aform altogether: an itinerary is actually ahierarchical composition of forms, where theforms in this case correspond to tightly-boundslots (e.g., those corresponding tothe constraintson a particular flight leg) and which can betreated as part of the -same topic.Frame-based systems provide an alternate, moreflexible approach.
Here the problem is cast asform filling: the form specifies all relevantinformation (slots) for an action.
Dialogmanagement consists of monitoring the form forcompletion, setting elements as these arespecified by the user and using the presence ofempty slots as a trigger for questions to the user.Form-filling does away with the need to specifya particular order in which slots need to be filledand allows for a more natural, unconstrained,form of input.
While ideally suited for tasks thatcan be expressed in terms of filling a singleform, form-filling can be combined with graphrepresentations (typically ergodic) to support aset of (possibly) related activities, each of whichcan be cast into a form-filling format.Both graph and frame systems hare the propertythat the task usually has a fixed goal which isachieved by having the user specify information(fill slots) on successive turns.
Using a filled outform the system performs ome action, such asinformation retrieval.
While this capabilityencompasses a large number of usefulapplications it does not necessarily extend tomore complex tasks, for example ones where thegoal is to create a complex data object (e.g.
\[1\]).We have been building a system that allowsusers to construct travel itineraries.
This domainposes several problems: there is no "form" assuch to fill out, since we do not know3 Task Structure and ScriptsIntuitively (as well as evident from ourempirical studies of human travel agents andclients) travel planning develops over time as asuccession of episodes, each focused on aspecific topic (such as a given flight leg, a hotelin a particular city, etc.).
Users treat he task as asuccession of topics, each of which ought to bediscussed in full and closed, before moving onto the next topic.
Topics can certainly berevisited, but doing so corresponds to an explicitconversational move on the part of theparticipants.Our first dialog manager took advantage of thistask structure (\[3\]).
By analogy to what weobserved in the human-human data we refer to itas a script-based ialog manager.
Script in thiscontext simply refers to an explicit sequencingof task-related topics.
Each topic is expressed asa form-filling task, with conventional free-orderinput allowed for form slots and a slot-statedriven mixed-initiative interaction (i.e., ask theuser about any empty slot).
The topic-specificform is actually composed of two parts:constraint slots (typically corresponding toelements of a query) and a solution slot(containing the result of an executed query).43The control strategy is also actually morecomplex: slots are pre-ordered based on their(domain-derived) ability to constrain thesolution; this ordering provides a defaultsequence in which the system selects elements toask the user about.
Control is predicated on thestate of a slot (whether constraint or solution).The state can either be "empty", in which casethe system should ask the user for a value, filledwith a single value, in which case it is"complete", or filled with multiple values.
Thelast case is cause to engage the user in aclarification sub-dialog whose goal is to reducemultiple values to a single value, either byselecting-ma item in the solution set or byrestating a-constraint.
Figure 1 shows thestructure of the Flight Leg topic in the script-based system.Fligh, Leg"'?~?
?.o ~ 19e,,'tinatian~ Database lookupAvailable \]lightsFigure 1 Task-based ialog control in a script-basedsystem, as determined by the structure of a compoundschema, with contributions from three simple schema.4 An Agenda-based ArchitectureWhile capable of efficiently handling routinetravel arrangements, the script-based approachhas a number of perceived limitations: the scriptis very closely identified with the product datastructure.
Specifically, we used a fixed productstructure that served as a form to fill out.
Whilethe entire form does not need to be filled out tocreate a valid itinerary, it nevertheless et limitson what the user can construct.
Instead wewanted a form structure that could bedynamically constructed over the course of asession, with contributions from both the userand the system.
The script-based approach alsoseemed to make navigation over the productdifficult.
While we implemented a simple undoand correction mechanism that allowed the userto revisit preceding product elements, users haddifficulty using it correctly.
While some of thedifficulty could be traced to inadequate supportof orientation, the source was more likely theinability of the system to treat the productstructure independent of the script.We sought to address-these problems byintroducing two new data structures: an agendato replace a fixed script and a dynamic productthat can evolve over the course of a session.
Inthe agenda-based system, the product isrepresented as a tree, which reflects the naturalhierarchy, and order, of the information eededto complete the task.
A dynamic product issimply one that can be modified over the courseof a session, for example by adding legs to a tripas these are requested by the user rather thanworking from a fixed form.
Operationally, thismeans providing a set of operators over treestructures and making these available to the userand to the system.
In our case, we  defined alibrary of sub-trees (say air travel legs or localarrangements) and a way to attach these to theproduct structure, triggered either by the settingof particular values in the existing tree orthrough explicit requests on the part of the user("and then I'd like to fly to Chicago").Each node in the product ree corresponds to ahandler, which encapsulates computationrelevant to a single information item.
Allhandlers have the same form: they specify a setof receptors corresponding to input nets, atransform to be applied to obtain a value and aspecification of what the system might say to theuser in relation to the information governed bythe handler.
Handlers correspond to the schemaand compound schema of the script-basedsystem (see Figure 1).The agenda is an ordered list of topics,represented by handlers that govern some singleitem or some collection of information.
Theagenda specifies the overall "plan" for carryingout a task.
The system's priorities for action arecaptured by the agenda, an ordered list ofhandlers generated through traversal of theproduct structure.
The handler on the top of theagenda has the highest priority and representsthe focused topic.
A handler can capture44relevant input from the user and can generateprompts to the user.
A single handler deals onlywith a mini dialog centering on a particularpiece of information (e.g.
departure date).
Theagenda is a generalization f a stack.
It indicatesboth the current focus of interaction (i.e., thetop-most handler) as well as all undealt-withbusiness, and captures the order in which suchbusiness should be dealt with.
(The system'shigh-level goal is to ensure that all values in thecurrent product ree have valid settings.)
As allitems in the agenda are potentially activatablethrough what the user speaks, the user hascorresponding control over the topic in focus.The agenda .aLso contains generic handlers thatsort to the bottom-of the agenda.
These can beused to consume any inputs that are not caughtby product-derived handlers (for example,requests for help).
Figure 2 shows how asimplest handler looks likeHandler UserHandleOutputIf !ValidNLG("query user_name")Return focused_waiting_answerEndifReturn pass_controlHandleInputIf \[name I identification\]ReadProfileValidateEndifReturn pass_controlFigure 2 An example of handlerThe order of the agenda is generated from theleft-to-right, depth-first traversal of the producttree.
When a user input comes in, the systemcalls each handler per their order in the agendaand each handler will try to interpret he userinput.
We call the process of letting each handlerto consume user input as input pass.
When ahandler captures a single piece of information,the information is marked as consumed.
Thisguarantees that a single information item can beconsumed by only one handler.
After an inputpass, if the user's input does not directly cause aparticular handler to generate a question, thenthe system will go through an output pass duringwhich each handler will have a chance togenerate a prompt about itself (e.g.
the handlerfor departure date can ask user for a departuredate).AI:U2:A3:U4:A5:A6:U7:A8:U9:A10:Ul1:A12:U13:A14:A15:U16:A17:U18:AI9:Hello.
You've reached the \[Communicator\].Tell me your lull namehi i'd like to fly to seattle tuesday morningTraveling to Seattle on Tuesday, Augusteleventh in the morning.
Your full name?\[John Doe\]Hello, \[John\], I'm glad to hear from youagain.
You can now ask me for help.OK.
Let's see I have a United flightdeparting Pittsburgh at ten forty five a.m.arriving into Seattle at one fifty seven p.m.Is that OK?YesWill you returnto Pittsburgh from Seattle?no i will go to Los AngelesTraveling to Los Angeles.
on what dateSorry can we go back to talk about theprevious leg againFor the first leg, you are on a United flight1446 departing Pittsburgh at ten forty fiveA.M.
tomorrow, arriving in Seattle at onefifty seven P.M. Do you want to take that?actually i want o leave on wednesdaya flight on wednesday.I have a flight departing Pittsburgh at tenforty five a.m., arrives Seattle at one fiftyseven p.m. Is that OK?YesOK and on what day do you want to departSeattle?next MondayTraveling on Monday, August sixteenth.Figure 3 An example dialogThe framework can determine the next step fromthe return code of a handler, it can choose tocontinue the current pass, exit input pass andswitch to output pass, exit current pass and waitfor input from user, etc.
During a pass, a handlercan also declare itself as the focus through itsreturn code.
In this case, it will be promoted tothe top of the agenda.
In order to preserve thecontext of a specific topic, we use a methodcalled sub-tree promotion.
In this method, ahandler is first promoted to the left-most nodeamong its siblings.
The system also handles thedependencies among the nodes of the producttree.
A typical dependent relationship is between45The initial product ree (simplified)TravelUserFlightDestlDate 1Time1NextUserTravelFlightlDestlDate 1Time 1NextFlightlTravel Destl~ Date1iDestl rimelDatel UserTime 1 travelNext Nextinitial A1Figure 4NextFlightlDestlDate 1FimelUserFravelProduct ree at utterance A 10Date2 Flightl FlightlFlight; Destl DestlDest2 Destl DatelTime2 Timel Time1Next Date2 Date2Flightl Flight,~ Flight2Destl Dest2 Dest2Datel Time2 rime2rime 1 Next NextUser User Usertravel Travel TravelA3 A6 A8 A10 A12 A15Date2Flight;Dest2rime2Flight~DestlDatelrime 1NextUsertravelAI7Figure 5 The change of agenda long the sessiona parent node and a child node.
Usually, thevalue of a parent node is dependent on itschildren.
Each node maintains a list of itsdependent nodes and it will notify its dependentsabout any changes of its value.
The dependentnode can then declare itself invalid and thereforea candidate topic for conversation.The dialog in figure 3, generated using thesystem, shows a number of features: the abilityto absorb an implicit change of topic on the partof the user (A1-A3), adding to an existingitinerary (A8-A10) and handling an explicittopic shift (U11).
Figure 2 and Figure 3 showhow the product ree and agenda evolve over thecourse of the dialog5 System ImplementationThe Communicator is telephone-based and isimplemented as a modular distributed system,running across NT and Linux platforms.Currently the task is captured in anapproximately 2500-word language based oncorpora derived from human-human, Wizard ofOz and human-computer interaction in thisdomain.
Domain information is obtained fromvarious sources on the Web.
The system hasinformation about 500 destinations worldwide,though with a majority of these are in the UnitedStates.
To date, we have collectedapproximately 6000 calls, from over 360individuals.466 Summary and ConclusionsThe agenda-based approach addresses theproblem of dialog management in complexproblem-solving tasks.
It does so by treating thetask at hand as one of cooperatively constructinga complex data structure, a product, and usesthis structure to guide the task.
The productconsists of a tree of handlers, each handlerencapsulates processing relevant o a particularschema.
Handlers correspond to simple orcompound schema, the latter acting essentiallyas multi-slOi=fofms.
A handler encapsulatesknowledge n~cessary for interacting about aspecific information slot, including specificationof user and system language and of interactionswith domain agents.
Handlers that deal withcompound schema coordinate tightly boundschema and correspond to specific identifiabletopics of conversation.
We define tightly boundas those schema that users expect to discussinterchangeably, without explicit shifts inconversational focus.We believe that individual handlers can beauthored independently of others at the samelevel of hierarchy; in turn we believe this willsimplify the problem of developing dialogsystems by managing the complexity of theprocess.The agenda contains all topics relevant o thecurrent ask.
The order of handlers on the agendadetermines how user input will be will beattached to product nodes.
Both the system andthe user however have the ability to reorderitems on the agenda, the system to foregrounditems that need to be discussed, the user toreflect heir current priorities within the task.factored out as independent pro~esses.We believe that the agenda mechanism can beadapted easily to less-complex domains thatmight currently be implemented as a standardform-based system (for example a movieschedule service).
We do not know as yet howwell the technique will succeed for domains ofcomplexity comparable to travel planning butwith different task structure.References\[1\] James F. Allen, Lenhart K. Schubert, GeorgeFerguson, Peter Heeman, Chung Hee Hwang,Tsuneaki Kato, Marc Light, Nathaniel G. Martin,Bradford W. Miller, Massimo Poesio, and DavidR.
Traum, "The TRAINS Project: A case study inbuilding a conversational p anning agent" Journalof Experimental nd Theoretical AI, 7(I 995), 7-48.\[2\] Bansal, D. and Ravishankar, M. "New features forconfidence annotation" In Proceedings of the 5thInternational Conference on Spoken LanguageProcessing (ICSLP), December 1998, Sydney,Australia\[3\] Rudnicky, A., Thayer, E., Constantinides, P.,Tchou, C., Shern, R., Lenzo, K., Xu W., Oh, A.
"Creating natural dialogs in the Carnegie MellonCommunicator system" Proceedings ofEurospeech, 1999, Paper 014.\[4\] Ward, W. and Issar, S. "Recent improvements inthe CMU spoken language understanding system"In Proceedings of the ARPA Human LanguageTechnology Workshop, March 1994, 213-216.The mechanisms described in this paper do notcover all necessary aspects of dialogmanagement but do provide an overall controlarchitecture.
For example, clarificationprocesses, which involve possibly extendedinteraction with respect o the state of a valueslot, fit into the confines of a single handler andare implemented as such.
Ideally they could be47
