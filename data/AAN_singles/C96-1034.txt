A pr inciple-based hierarchical representation ofMarie-H616ne CanditoTALANAUniversit6 Paris 7 Tour centrale 86me 6tage pi6ce 80175251 Paris cedex 05 FRANCEe-mail : marie-helene.candito@linguist.
jussieu.frLTAGsAbstractLexicalized Tree Adjoining Grammarshave proved useful for NLP.
However,numerous redundancy problems faceLTAGs developers, as highlighted by Vijay-Shanker and Schabes (92).We present a compact hierarchicalorganization of syntactic descriptions, thatis linguistically motivated and a tool thatautomatically generates the tree families ofan LTAG.
The tool starts from the syntactichierarchy and principles of well-formednessand carries out all the relevant combinationsof linguistic phenomena.1 Lexicalized TAGsLexicalized Tree Adjoining Grammar (LTAG) isa formalism integrating lexicon and grammar (Joshi,87; Schabes et al, 88).
It has both linguisticadvantages (e.g elegant handling of unboundeddependencies and idioms) and computationaladvantages, particularly due to lexicalization(Schabes et al, 88).
Linguists have developed overthe years sizeable LTAG grammars, especially forEnglish (XTAG group, 95; Abeill6 et al, 90) andFrench (Abeill6, 91).In this formalism, the lexical items areassociated with the syntactic structures in whichthey can appear.
The structures are lexicalizedelementary trees, namely containing at least onelexical node at the frontier (called the anchor of thetree).
The elementary tree describes the maximalprojection of the anchor.
So a verb-anchored tree hasa sentential root.
Features tructures are associatedwith the trees, that are combined with substitutionand adjunction.
Adjunction allows the extendeddomain of locality of the formalism : all treesanchored by a predicate contains nodes for all itsarguments.Such a lexicalized formalism needs a practicalorganization.
LTAGs consist of a morphologicallexicon, a syntactic qexicon of lemmas and a set oftree schemata, i.e.
trees in which the lexical anchor ismissing.
In the syntactic lexicon, lemmas elect thetree schemata they can anchor.
When the grammar isused for parsing for instance, the words of thesentence to be parsed are associated with therelevant ree schemata to form complete lexicalizedtrees.Tile set of tree schemata forms the syntactic partof the grammar.
The tree schemata selected bypredicative items are grouped into families, andcollectively selected.
A tree family contains thedifferent possible trees for a given canonicalsubcategorization (orpredicate-argument structure).The arguments are numbered, starting at 0 for thecanonical subject.
Along with the "canonical" trees, afamily contains the ones that would betransformationally related in a movement-baseapproach.
These are first the trees where a"redistribution" of the syntactic function of thearguments has occurred, for instance the passivetrees, or middle (for French) or dative shift (forEnglish), leading to an "actual subcategorization"different from the canonical one.
When such aredistribution occurs, the syntactic function of thearguments change (or the argument may not berealized anymore, as in the agentless passive).
Forinstance, the subject of a passive tree is number l,and not 0 (figure 1).
This is useful from a semanticpoint of view, in the case of selectional restrictionsattached to the lexical items, or of asyntactic/semantic interface.s sN0$ V0 N15 N15 Vm$ V0P N0$IparFigure 1.
Declarative transitive tree and corresponding fullpassive for French 1And secondly, a family may contain the treeswith extracted argument (or cliticized in French).There are different ypes of trees for extraction.
\]nthe English grammar for instance, there are trees forwh-questions and trees for relative clauses (that areadjoined to NPs).
In the French grammar there arealso separate trees for cleft sentences with gaps inthe clause, while the corresponding it-clefts arehandled as relative clauses in the English grammar.NrNO* SC V0 N15I quiSN0$ VrC l l~V0Figure 2.
Two trees of the strict ransitive family for French :the relativized subject and the cliticized object.1The French LTAG comprises trees with flat structure (noVP node); in the passive tree, the auxiliary issubstituted; the samesymbol N is used for nominal phrases and nouns, the differencebeing expressed with a feature <det> (Abeill6, 91).
we do notshow the feature quations for the sake of clarity.
For the Frenchgrammar, the average number of equations per tree is 12.194So a family contains all the schemata for a givencanonical subcategorization.
Yet, in the syntacticlexicon, a particular lemma may select a family onlypartially.
For instance a lemma might select thetransitive family, ruling out the passive trees.On the other hand, the features appearing in thetree schemata re common to every lemma selectingthese trees.
The idiosyncratic features (attached tothe anchor or upper in the tree) are introduced in thesyntactic lexicon.2 Development and maintenanceproblems with LTAGsThis extreme lexicalization entails that asizeable I,TAG comprises hundreds of elementarytrees (over 600 for the cited large grammars).
And ashighlighted by Vijay-Shanker and Schabes (92),information on syntactic structures and associatedfeatures equations is repeated in dozens of treeschemata (hundreds for subjecbverb agreement forinstance).This redundancy problem is present at all levelsof grammar development.
The writing of an I,TAG isa rather fastidious task; its extension and/ormaintenance is very difficult, since maintaining thegrammar means for instance adding an equation tohundreds of trees.
Extending it means adding newtre, es along with their equations, and it can alsoentail the addition of new features in existing trees.Furthermore, the amount of work may growexponentially with the size of the grammar, since allcombinations ofphenomena must be handled.And finally, in addit ion to the practicalproblems of grammar writing, updating and storage,redundancy makes it hard to get a clear vision of thetheoretical and practical choices on which thegrammar is based.3 Existing solutionsA few solutions have been proposed for theproblems described above.
Solutions to theredundancy problem make use of two tools forlexicon representation : inheritance networks andlexical rules.
Vijay-Shanker and Schabes (92) havefirst proposed a scheme for the efficientrepresentation f LTAGs, more precisely of the treeschemata of an I.TAG.
They have thought of amonotonous inheritance network to represent heelementary trees, using partial descriptions of trees(Rogers and Vijay-Shanker, 92 and 94) (see section4.1 for further detail).
They also propose to use"lexical and syntactic rules" to derive new entries.The core hierarchy should represent the "canonicaltrees", and the rules derive the ones withredistribution of the functions of arguments (passive,dative shift...) and the ones with extracted argumentBecker (93; 95) also proposes a hybrid systemwith the same dichotomy : inheritance network forthe dimension of canonical subcategorization frameand "meta-rules" for redistribution or extraction (orboth).
The language for expressing the meta-rules ivery close to the elementary tree language, exceptthat meta-rules use meta-variables standing forsubtrees, l le proposes to integrate the meta-rules tothe XTAG system which would lead to an efficientmaintenance and extension tool.
(Evans et al, 95) have proposed to use I)ATRto represent in a compact and efficient way anI,TAG for English, using (default) inheritance (andthus full trees instead of partial descriptions) andlexical rules to link tree structures.
They argue theadvantage of using ah:eady existing software.
Butsome information is not taken into account : thelexical rules do not update argument index.
Forinstance the dative shift rule for English changes thesecond complement - the PP - into a NP, which isnot semantically satisfying.
The passive rules simplydiscards the first complement (representing thecanonical direct objet), the other complementsmoving up.
But then the relation between the activeobject and the passive subject is lost.The three cited solutions give an efficientrepresentation (without redundancy) of an f.TAG,but have in our opinion two major deficiencies.First these solutions use inheritance networksand lexical rules in a purely technical way.
They giveno principle about the form of the hierarchy or thelexical rules 2, whereas we believe that addressing thepractical problem of redundancy should give theopportunity of formalizing the well-formedness ofelementary trees and of tree families.And second, the ,wnerative aspect of thesesolutions is not developed.
Certainly the lexical rulesare proposed as a tool for generation of newschemata or new classes in a inheritance network.But the automatic triggering, ordering and boundingof the lexical rules is not discussed.4 Proposed solution : efficientrepresentation and semi-automaticgenerationWe propose a system for the writing and/or  theupdating of an \[,TAG.
It comprises a principled andhierarchical representat ion of lexico-syntacticstructures.
Using this hierarchy and p,'inciples ofwell-formedness, the tool carries out all the relevantcrossings of linguistic phenomena to generate the treefamilies.This solution not only addresses the problem ofredundancy but also gives a more principle~basedrepresentation of an LTAG.
The implementation ofthe principles gives a real generative power to thetool.
So in a sense, our work can relate to (Kasper etal., 95) that describes an algorithm to translate aHead-driven Phrase Structure Grammar (I-\['PSG) intoan LTAG.
The inheritance hierarchy of tlPSG and itsprinciples are "flattened" into a lexicalized formalismsuch as \[,TAG.
The idea is to benefit from aprinciple-based formalism such as 1 IPSG and fromcomputational properties of an I,TAG.2Becker gives a linguistic principle for the bounding of hismeta-rules, but he has no solution tor the application of thisprinciple.1954.1 Hierarchical representation of anLTAG4.1.1 Formal  cho ices  : a monoton icinher i tance network ,  w i thout  meta-ru lesLike the solutions described in section 3, oursystem uses a multiple inheritance network.
Yet, itdoes not use meta-rules.
Though they could be afurther step of factorization, it seemed interesting to"get the whole picture" of the grammar within thehierarchy, and not only the base trees.Further, we have chosen monotonic inheritance,especially as far as syntactic descriptions areconcerned.
Default inheritance does not seem to bejustified to represent tree schemata, from thelinguistic point of view.
Default inheritance is oftennecessary to deal with exceptions.
One may want toexpress generalizations despite a few more specificexceptions.
Now the set of tree schemata we intendto describe hierarchically is empty of lexicalidiosyncrasies, which are in the syntactic lexicon (cf.section 1).
The set of tree schemata representssyntactic phenomena that are all productive noughto allow monotonicity.
This resulting hierarchy willthen be more transparent and will benefit from moredeclarativity.Technical ly,  monoton ic i ty  in syntact icdescriptions is al lowed by the use of partialdescriptions of trees (Rogers and Vijay-Shanker, 92;94), as was proposed in (Vijay-Shanker andSchabes, 92) (see section 4.1.3).4.1.2 General  organ izat ion  of  the hierarchySection 1 briefly described the organization of anLTAG in families of trees.
The rules for theorganizat ion of a family, its coherence andcompleteness, are flattened into the different rees.With the approach of an automatic generation ofTAG trees, we have found necessary to explicit theserules, which are defined using the notions ofargument and syntactic function.Fo l lowing a funct ional  approach  tosubcategor izat ion (see for instance LexicalFunctional Grammar,  (Bresnan, 82)), we clearlyseparate the "redistributions" of syntactic functionsof the arguments from the different realizations of agiven syntactic function (in canonical, extracted,cliticized.., posit ion).
We intend the termredistribution in a broad sense for manipulation of thenumber and functions of arguments.
It includes casesof reduction of arguments (e.g.
agentless passive),restructuration (dative-shift for English) or evenaugmentat ion of arguments (some causativeconstructions 3, introducing an agent whose functionis subject).
Redistribution is represented in oursystem by pairing arguments and functions, and notin terms of movementSo the proposed hierarchy of syntacticdescriptions (for the family anchored by a verb)comprises the three following dimensions :3We talk about some causative constructions analysed ascomplex predicates with co-anchors in French as in'Jean a fait s'assoir les enfants.
*Jean made sit ihe children.
(Jean made the children sit)dimension 1 : the canonical subcategorization h'ameThis dimension defines the types of canonicalsubcategorization.
Its classes contain information onthe arguments of a predicate, their index, theirpossible categories and their canonical syntacticfunction.d imens ion  2 : the redistribution of syntacticfunctionsThis dimension defines the types of redistribution offunctions (including the case of no redistribution atall).
The association of a canonical subcategorizationframe and a compatible redistribution gives anactual subcategorization, namely a list of argument-function pairs, that have to be locally realized.d imens ion  3 : the syntactic realizations of thefunctionsIt expresses the way the different syntactic functionsare positioned at the phrase-structure l vel (incanonical position or in cliticized or extractedposition).
This last dimension is itself partitionedaccording to two parameters : the syntactic functionand the syntactic onstruction.4.1.3 Monoton ic  inher i tance  and part ia ldescr ipt ions of treesThe hierarchy is a strict multiple inheritance networkwhose terminal classes represent the elementary treesof the LTAG.
These terminal classes are not writtenby hand but automatically generated followingprinciples of well-formedness, either technical orlinguistic.A partial description is a set of constraints thatcharacterizes a set of trees.
Adding information tothe description reduces monotonically the set ofsatisfying trees.
The partial descriptions of Rogersand Vijay-Shanker (94) 4 use three relations : left-of,parent and dominance (represented with a dashedline).
A dominance link can be further specified as apath of length superior or equal to zero.
These linksare obviously useful to underspecify a relationbetween two nodes at a general evel, that will bespecified at an either lower or lateral level.
Figure 3shows a partial description representing a sentencewith a nominal subject in canonical position, givingno other information about possible othercomplements.
The link between the S and V nodes isunderspecified, allowing either presence or absenceof a cliticized complement on the verb.
In the case ofa clitic, the path between the S and V nodes can bespecified with the description of figure 4.
Then, if wehave the information that the nodes labelledrespectively S and V of figures 3 and 4 are the same,the conjunction of the two descriptions i equivalentto the description of figure 5.4Vijay-Shanker & Schabes (92) have used the partialdescriptions introduced in (Rogers & Vijay-Shanker, 92), but wehave used the more recent version of (Rogers & Vijay-Shanker,94).
The difference between the two verskms lies principally inthe definition of quasi-trees, first seen as partial models of treesand later as distinguished sets of constraints.196SIS VrN VO CI VOFigure 3 Figure 4sN Vr/ \CI VOFigure 5In the hierarchy of syntactic descr ipt ions wepropose,  the part ial  descr ipt ion associated with aclass is the unification of the own description of theclass with all inher i ted part ia l  descr ipt ions.
Asshown in the above example, the conjunctkm of twodescr ipt ions may require statements of identity ofnodes.
Rogers and Vijay-Shanker (94) foresee, in thecase of an app l icat ion  to 'FAG, the systemat icidentity of lexical anchors.
Further, Vi jay-Shankerand Schabes (92) make also use of a part icularfunction to state identity of argumental  nodes.
Butthis is not enough as one might need to state equalityof any type of nodes (like the S nodes in the aboveexample).
To achieve this in our' system, one s implyneeds to "name" both nodes in the same way.dimension 1Callonifa\[ StlbCat ffa\[llC/ /  "\\  / / f/ />t .
.
./ \ ...!
strict Iransitivc~ \ /dimclmion 2redistribution f syntacticftulclionspersonal fttllpaSSIVeRemember we talk about descr ipt ions of trees.
Inthese objects, nodes are referred to by constants.Two nodes, in two conjunct descriptions, referred toby the same constant are the same node, and twonodes referred to by different constants can either beequal or different.
Equal ity of nodes can also beinferred, mainly using the fact that a tree node hasonly one direct parent node.We trove added atomic features associated witheach constant, such as category, index, quality (i.e.foot, anchor  or subst i tu t ion  node),  canonica lsyntactic function and actual syntactic function.These features belong to the meta- formal ism ofI~TAG hierarchical organization.
We will call themmeta-features (as opposed to the features attachedto the nodes of the TAG trees).
In the conjunction oftwo descript ions,  the identi f icat ion of two nodesknown to be the same (either by inference or becausethey have the same constant) requires the unificationof such meta-features.
Ira case of failure, the wholeconjunction fails, or rather, leads to an unsatisfiabledescription.dimension 3realization fsyntaclic fullclionssubjecl par-objectc'Inollical posi l lon wh-qucsl ioncdpt)Sl\[IOllhand-writtenhicnuchyI WOnOVnl-pass h genclatcd class(strict ransitive, \]personal full lmssive.
|!
)!~.r-obj wh-qucstmned)~Figure 6.
(_'reation ofa terminal class totally defil~.ed by ffs super-classes.4.2 Automatic generation of elementarytreesThe three dimensions introduced in section 4.1.2constitute the core hierarchy.
Out of this syntacticdatabase  and fo l low ing  pr inc ip les  of wel l -formedness the generator creates elementary trees.This is a two-steps process : it first creates someterminal classes with inherited propert ies only - theyare totally defined by their: list of super-classes.
Thenit translates these terminal classes into the relevante lementary tree schemata, in the XTAG 5 format, sothat they can be used for parsing.The tree schemata are generated grouped infamil ies.
This is s imp ly  ach ieved by fixing acanonical  subcat frame (dimension 1), associat ingXTAG (\[ amubek et al, 92) is a tool for writin~ and usingLTAGs, including among other things a tree editor and a syntacticparser.with it all relevant redistr ibutions (dimension 2) andrelevant realizations of functions (dimension 3).
Atthe development stage, generation can also be donefol lowing other criterions.
For instance, one cangenerate all the passive trees, or all trees withextracted complements...4.2.1 Principles of well-formednessThe generation of elementary trees from moreabstract data needs the characterization of what is awell-formed elementary tree in the framework of\[,TAG.
The common factor to various expressions ofl inguistic principles made for \[,TAGs is theargument-predicate co-occurrence principle (Krochand Joshi, 85; Abeill6, 91) : the trees for a predicativeitem contain positions for all its arguments.But for a given predicate, we expect thecanonical arguments to remain constant throughredistribution of functions.
The canonical subject197(argument 0) in a passive construction, even whenunexpressed, is still an argument of the predicate.
Sothe principle should be a principle of predicate-functions co-occurrence : the trees for a predicativeitem contain positions for all the functions of itsactual subcategorization.
I  the solution we propose,this principle is translated as :1- subcat principle : a terminal class must inherit ofa canonical subcategorization (dimension 1) and acompatible redistribution, including the case of noredistribution at all (dimension 2).
This pair ofsuper-classes defines an actual subcategorization.2- completeness/coherence/unicity principle : theterminal class must inherit exactly one type ofreal ization for each function of the actualsubcategorization 6.Well-formedness of elementary trees is alsoexpressed through the form of the hierarchy itself(the content of the classes, the inheritance links, theinheritance modes for the different slots...).
Thisinformation spread into the hierarchy is used for treegeneration following technical principles of well-formedness.
Due to a lack of space we detail onlythe following principle, useful to understand nextsection.3- unification principle : the unifications of partialdescriptions and meta-equations required byinheritance must succeed; the unification of nodeswith same constant is mandatory; moreover twonodes with the same value for the meta-feature"function" must unify.Figure 6 shows an example of generation of aterminal class, corresponding to the tree, for French,for the full passive of a strict transitive verb, in awh-question on the agent (see figure 7).
it can beillustrated by the sentence :(Je me demande) par qui Jean sera accompagn6.By whom will Jean be accompanied?SrPP S~ N 0 , 1 ,  N I ~ 0I parFigure 7.
Tree for French, for the full passive of a strict transitiveverb, in a wh-question on the agent.The corresponding terminal class W0n0Vnl-pass inherits the canonical subcat STRICTTRANSITIVE and the redistribution PERSONALFULL PASSIVE.
This defines the following actualsubcategorization : arg0/par-object; argl/subject.Then the terminal class inherits the relevantrealization for each of the cited functions (SUBJECTIN CANONICAL POSITION and PAR-OBJ -QUESTIONED).6Fol lowing from the functional representat ion ofsubcategorization, this principle relates to the principles of well-formedness of functional structures in LFG.4.2.2 From terminal classes to elementarytreesThe terminal classes representing elementarytrees inherit a (constructed) partial description oftree, with meta-equations and equations.
To getelementary trees from these classes, we need totranslate the partial descriptions into trees.
This isdone by taking the least tree(s) satisfying thedescription.
We do not go into the details for brevityreasons, but intuitively the minimal tree is computedby taking the underspecified links to be path oflength zero when their ends are compatible, of lengthone otherwise (figure 8).
A description can leaveunderspecified the order of some daughters, leadingto several minimal trees.
Rogers and Vijay-Shanker(94) give a formal mechanism to obtain trees fromdescriptions.s sNP VI' NP VI'' I!
!v vFigure 8.
Translating a dashed line into a path of length one.After obtaining tree(s) from the partialdescription, the generator translates the nodeconstants into the concatenation of syntacticcategory and index (if it exists).4.2.3 A detailed exampleLet us go back to the tree of figure 7.
The nextfigure shows in detail the super-classes 7 (introducedat figure 6) for the class W0n0Vnl-pass representingthis tree :STRICT TRANSITIVEmeta-equations :?arg0.canonical-function =subject?arg0.ind =0?argl.canonical-function =object?argl,ind = 1PAR-OBJECTwh-questionned positiontopology : / ~ N ,  N?PI' ?S?par~"NN~ \[ ?questparmeta-equations :?Sr.cat = S ?parP.cat = P?Sr.ind - r ?SP.cat : SP?quest.cat : N?questfunction = par-objf PERSONAL FULLPASSIVEtopology : ?S?sup VOII?infmeta-equations :?S.cat = S?sup.cat =V ?inf.cat = V?inf.ind = in ?inf.qual = $?arg0.function = par-obj~argl.function = subjectf ?NOMINAL SUBJECTcanonical positiontopology : ?S?subject ?supmeta-equations :?subject.functkm = subject?s.ubject.c.at = N ,,Figure 9.
Super-classes of W0n0Vnl-pass.7We only show the direct super-classes.
They are givenwith their specific properties and with their inherited propertiesas well.
The "equations" slot is not shown.
In the partialdescriptions shown, the constants naming the nodes start with ?.198The conjunct ion of the inherited partialdescriptions leads to the following description :?Sr?PP ?S?parP ?quest ?subject ?sup VOI : par ?in~Figure 10.
Inherited partial description.The nodes with same constants have unified(?S/?S) and the constants with same "function"meta-feature have also unified : ?subject/?argl and?quest /?arg0 (cf.
principle 3).
Then the nodeconstants are translated and the least satisfying treeis computed, leading to the target ree of figure 7.5 ApplicationsThe tool has been used to update and augmentthe French LTAG developed at Paris 7.
A hierarchyhas been wr i t ten that gives a compact  andtransparent representation of the verbal familiesalready existing in the grammar.
The writing of theh ierarchy has been the occasion of updat ingstructures and equations, insuring uniform andcoherent handling of phenomena.
Furthermore theautomatic generation from the hierarchy guaranteesthe well-formedness of the families, with all possibleconjunctions of phenomena.
Extra phenomena suchas nominal subject inversion, impersonal middleconstructions, ome causative constructions or freeorder of complements have been added.The generative power of the tool is effective : outof about 90 hand-written classes, the tool generates730 trees for the 17 families for verbs withoutsentential complements 8, 400 of which were presentin the pre-existing rammar.
The tool is currentlyused to add trees for some elliptical coordinations.We see several possible applications of the tool.We could try to generate a grammar with weakerconstraints, useful for corpora with recurrent ill-formed sentences.
Secondly, we could obviously usethe tool to build a grammar for another language,either from scratch or using the hierarchy designedfor French.
Using this already existing hierarchy andthe implemented principles of well-formedness willlead to a grammar for another language "compatible"with the French grammar.
This could be anadvantage in the perspective of machine translationfor instance.Because the principles of wel l - formednessimplemented are general and capture mainly theextended omain of locality of LTAG, the generatorwe have presented can very well be used to generatea grammar  with different under ly ing linguisticchoices (for instance the GB perspective used in theEnglish grammar cited).8 By the time of conference, we will be able to give figuresfor the families with sentential complements al o.6 ConclusionWe have presented a hierarchical and principle-based representation of syntactic information.
Itinsures transparency and coherence in syntacticdescript ions and allows the generat ion of theelementary trees of an LTAG, with systematiccrossing of linguistic phenomena.7 ReferencesA.
AbeillG K. Bishop, Sharon Cote and Y. Schabes.
1990.A lexicalized Tree Adjoining Grammar for English.Technical Report, University of l'ennsylvania.A.
Abeill6.
199l.
Une grammaire lexicalisOe d'ArbresAdjoints pour le frangais, PhD thesis, UniversityParis 7.T.
Becket.
1993.
IIyTAG : a new type of Tree AdjoiningGrammars for Hybrid Syntactic Representation ofFree Order Languages, PhD thesis, University ofSaarbr6cken.T.
Becker.
1994.
Patterns in Metarules.
Proceedings of thethird International Workshop on Tree AdjoiningGrammars (TAG+3), Paris.C.
l)oran, D. Egedi, B.A.
Hockey, B. Srinivas and M.Zaidel.
1994.
XTAG System - A wide CoverageGrammar for English.
Proceedings of COLlN(,'94,Kyoto.R.
Evans, G. Gazdar and D. Weir.
1995.
EncodingLexicalized Tree Adjoining Grammar with aNonmonotonic Inheritance t lierarchy, l'roceedings ofAC1,'95, Boston.A.
Joshi.
1987.
Introduction to Tree Adjoining Grammar, inA.
Manaster Ramer (ed), The Mathematics ofLanguage, J. Benjamins, pp.
87-114.R.
Kasper, B. Kiefer, K. Netter and K. Vilay-Shanker.1995.
Compilation of I IPSG to TAG.
Proceedings ofACL'95, Boston.A.
Kroch and A.
\]oshi.
1985.
The linguistic relevance ofTree Adjoining Grammars.
Technical report,University of Pennsylvania.P.
Paroubek, Y. Schabes and A.
\]oshi.
1992.
XTAC.
~ Agraphical Workbench for developing Tree AdjoiningGrammars.
ProceedhGs of 3-ANLP, Trento.\].
Rogers and K. Vijay-Shanker.
1992.
Reasoning withdescriptions of trees.
Proceedings ACL'92, pp.
72-80.\].
Rogers and K. Vijay-Shanker.
1994.
Obtaining treesfrom their descriptions : an application to Tree-Adjoining Grammars.
Computational Intelligence,vol.
10, N ?
4, pp.
401-421.Y.
Schabes, A. Abeill6 and A. Joshi.
1988.
Parsingstrategies with lexicatized grammars : TreeAdjoining Grammars.
Proceedings of COLING'88,Budapest, w~l.
2, pp.
578-583.K.
Vijay-Shanker and Y. Schabes.
1992.
StructureSharing in Lexicalized Tree Adjoining Grammar.Proceedings of COl~ING'92, Nantes, pp.
205-21 t.XTAG research group.
1995.
A lexicalized Tree AdjoiningGrammar for English, Technical Report IRCS 95-03,University of Pennsylvania.199
