Generation, Lambek Calculus, Montague's Semanticsand Semantic Proof NetsSyivain PogodallaSylvain.Pogodalla@xrce.xerox.comXerox Research Centre Europe6, chemin de Maupertuis38240 Meylan - -  FranceAbstractMost of the studies in the framework of Lambekcalculus have considered the parsing process andignored the generation process.
This paper wantsto rely on the close link between Lambek calculusand linear logic to present a method for the genera-tion process with semantic proof nets.
We expressthe process as a proof search procedure based on agraph calculus and the solutions appear as a matrixcomputation preserving the decidability properties,and we characterize a polynomial time case.1 IntroductionFrom the type logical grmnmars point of view, theparametric part of the language analysis is the lexi-con, and the constant one is the logical rules.
Thisshould of course hold both for parsing and genera-tion, hence we can consider the reversibility proper-ties of such grammars.
And a relevant problem is tocompare the complexity of the two cases.For Lambek calculus (Lambek, 1958), the pars-ing complexity is still an open problem.
But thequestion arises to know how to generate in thisframework, and how d(~cult (on the computationalside) it is.
(Merenciano and Morrill, 1997) an-swered with a labelled deductive system guidedwith A-term unification.
But a drawback of this lat-ter mechanism consists in its algorithmic undecid-ability (from second order unification).Relying on the linear logic (Girard, 1987) (whichprovides a powerful framework to express Lam-bek calculus, specially with proof nets for the lat-ter (Roorda, 1991; Lamarche and Retor6, 1996)),this paper wants to adress the problem of findingthe way we can associate given lexical entries to fita given semantic expression and generate a syntacti-cally correct expression (for the moment, we do notcare to the choice of the lexical items).
For this pur-pose, we express our problem as a proof search onein (multiplicative) linear logic which is decidable.Moreover, we characterize the semantic recipes oflexical items that provide a polynomial solution forthe syntactic realization process.
Then we give anexample of this process.2 Proof Nets for Linear LogicLinear logic (Girard, 1987) proposes for proofs amorn compact and accurate syntax than sequent cal-culus: proof nets (they group distinct sequentialproofs that only have inessential differences).
Theyhave both a related to sequential proof definitionand a geometrical definition: they can be definedas a class of graphs (proof structures) satisfying ageometrical property so that every proof net corre-sponds to a sequential proof and every proof struc-ture built from a sequential proof has this prop-erty (Retor6, 1998).In this paper, we only consider proof nets of theintuitionistic implicative linear logic: sequents aremade of several antecedent formulas, but only onesuccedent formula.
To deal with the intuitionis-tic notion for proof nets (since we consider one-sided sequents), we use the notion of polarities withthe input (o: negative) and the output (o: posi-tive) (Danes, 1990; Lamarche, 1995) to decorateformulas.
Positive ones correspond to succedentformulas and negative ones to antecedent formulas.Given the links of table 1, we define proof struc-tures (we consider implicative fragment) as graphsmade of these links such that:1. any premise of any link is connected to exactlyone conclusion of some other link;2. any conclusion of any link is connected to atmost one premise of some other link;3. input (resp.
output) premises are connected toinput (resp.
output) conclusions of the sametype.Proof nets are proof structures that respect he cor-rectness criterion.628Table 1: LinksName Axiom Tensor Par Cutpl 1)~ Pl P2Premises none P l ,  P2 P l  ~ P2 P l ,  P2Conclusions Cl, c2 c noneTypes cl :A + c2 :A -CPl :A +p2:B-c : (A - -o /3) -p l  :A -P2 : 13 +c: (A -o B)+pl :A -P2 : A +The last link of table 1, the Cut link, allows thecombination of proofs of 17 I- A and of A, A t- /3into a single proof of I', A I- /3.
In sequential cal-culs, tile cut-elimination property states that thereexists a normal (not using the Cut rule) proof forthe same sequent only IYom premises of 17 and A(and builds it).Of course, this property hokls for proof nets too.And to enforce the intrinsic definition of these latter,a simple rewriting process (described in table 2) ac-tually performs the cut-elimination (in case of com-plex fornmlas as in the third rewriting rule, thoserules can apply again on the result and propagateuntil reaching atoms).2.1 Proof Nets for Lambek CalculusAs Lambek calculus is an intuitionistic l'ragment ofnon commutative linar logic (with two linear impli-cations: "\"  on the left and "/"  on the right), proofnets for it naturally appeared in (Roorda, 1991).They slightly differ from those of table 1 :?
we get two tensor links: one for the fornmla( /3 /A) -  (the one in table 1) and one for theformula ( /3 \A) -  (just inverse the polarities ofthe premises).
And two par links: one for thefommla (A \B)  + and one for (A /B)  + (idem);?
formulas in Lambek's equents arc ordered, sothat conclusions of the proof nets are cyclicallyordered and axiom links may not cross.From a syntactic ategory, we can unfold the for-mula to obtain a graph which only lacks axiom linksto become aproof structure.
So that the parsing pro-cess in this framework is, given the syntactic ate-gories of the items and their order, to put non cross-ing axiom links such that the proof structure is aproof net.
It means there is a proof of ,5' given typesin a certain order.
Proving that John lives in Pallsis a correct sentence w.r.t, the lexicon of table 3(the two first columns) is finding axiom links be-tween the atoms in the figme 1 (a) so that the proofstructure is correct.
Figure l(b) shows it actuallyhappens (for technical reasons, ill the proof net, theorder ot' the syntactic ategories i the inverse of theorder of the words in the sentence to be analysed.Figure 1 (c) shows John lives Palls in cannot be suc-cessfully parsed).2.2 Proof Nets for Montague's SemanticsCapitalizing on tile fact that both A-torms (with theCurry-Howmzl isomorphism) and proof nets repre-sent proofs of intuitionistic implicative linear logic,(de Groote and Retor6, 1996) propose to use proofnets as semantic recipes: since proof nets encodelinear A-terms, instead of associating a )~-term in tileMontagovian style to a lexicai entry, they associatea proof net (decorated with typed constants).
An ex-ample of such a lexicon is given in table 31 (par linksencode abstraction, and tensor links encode applica-tion).Of course, to respect semantic types based onMontagovian basic types e and t, they use the fol-lowing homomorphism:7\[(NP) = e "H(S) : I 7t (A\B)  = 7t(A) --o'H(B)7t(N) = e --o I 7t(A/13) = ~(B)  --o 7t(A)Let us illustrate the process in parsing tile sen-tence John lives in Paris.
First we have to findthe syntactic proof net of figure l(b) as explainedin 2.1.
It provides the way syntactic omponantscombine, hence how semantic recipes of each lexi-cal item combine: we take its homomorphic imageI Unlike in (de Groote and Retor6, 1996), we restrict our-selves for llle moment to linear ~-terms.629Table 2: Cut-elimination rewriting rulesYr - -q  ............... +Y xL , q lx I x.2 Yl Y'2Y;13S- ,5 '+ "q9N P --q\]/S- N P +OC------------ ?
?
.............. 0 ?
/ /  ~'-,\ /,"o l\r l)- ~ X~V c I\r P, O,S "+Paris in li "s John(a) Unfolding of the syntac-tic typos,d :itrl ........ jl 'S'+(b) Matching the dual atomsto obtain a prool' neti !
N/')ri!
;~' ; i ' \ r~ht  S+(c) Incorrect prool' structurefor parsing Jolm lives I'aris inFigure 1 : Parsing of John lives in Parisas in figure 3(a).
The substitution of every inputwith its semantic definition we would like to per-form on the ~-calculus ide appears on the logicalside as plugging selnantic proof nets with cut-links.Then, the fl-reduction we would like to perforlnhas its logical counterpart in the cut-elimination onthe resulting proof net.
it gives a new proof net (onfigure 3(b)) we can use as the semantic analysis ofJohn lives in Paris.
If necessary, we can come backto the k-term expression: (in p)(live j).In other words, the syntactic proof net yields aterm t expressing how the elementary parts combine(in this case t = (ab)(cd)).
Then the resulting proofnet of figure 3(b) corresponds to the/3-normal formof t\[)~x.*y.
(in x )y/a, p/b, Az.live z / c, j/d\].3 What is Generation?We can now state the problem we arc dealing with:given a semantic proof net (like the one in fig-ure 3(b)), we want to put together syntactic entrieswith axiom links such that:1. this yields a correct (syntactic) proof net;2. the meaning of the resulting proof net matchesthe given semantic expression.Thus, if we define:* l\]o the semantic proof net of the expression wewant to generate;?
Hi the semantic proof nets associated to thegiven lexical entries i we use;.
Ti the nnfolding in proof slructure of the syn-tactic formula of the lexical item i (as in fig-ure 1 (a));?
F the forest made of the syntactic trees (7~) ofall the considered lexical entries plus the out-put (the type we want to derive),the generation problem (see figure 4) is to find amatching M of atomic formulas of F such that:1.
F endowed with M (let us call this proof struc-ture F/) is a correct proof net;2. when cut-linking 7\[(1 v/) with tile lIi, and elim-inating these cuts, we obtain 110.We note that the problem is intrinsically decidable(because the finitness of the number of the match-ings) without making any assumption on the formof tile semantic entries.
Of course, we want to keepthese good properties in our algorithm.630Table 3: Lexiconlexical entw syntaxic category associated.k-termJohn NP  jMary N / ~ mParis N l ~ pLives N / ~\,5' Xa:.
l ive :cin (S\ ,S ' ) /NI"  k:c.)~j.
(in ,~)~jsemantic proof net\] \[John (cf.
tigure 2(a))\]\[Mary (cf.
ligure 2(b))l lpari s (cf.
figure 2(c))lltive (cf.
figure 2(d))\]lin (cf.
figure 2(el)c' + ~ .
.
.
.
.
Ja c- c-'- ~--~,m c- c-' ~-----ap c- ,i!e '"\[/(a) tljohn (b) \]I John (c) Ill,aris (d) lllivc" .
/ /1 ,in(el \]\]inFigure 2: Semantic proof nets of the lexicon of table 34 Cut-el iminat ionas Matrix ComputationU:dng proof nets resulling from a cut-eliminationto guide a proof search on proof nets b@)re cut-elimination relies on the algebraic representation fcut-elimination on proof nets expressed in (Girard,1989) and rel'ormulated in (Retor6, 1990; Girard,1995).
Due Io lack of space, we can not developpil, but tile principle is to express cut-elimination be-tween axioms with incidence matrices and paths ingraphs.Let us consider a proof net U.
We can defineU the incidence matrix of axiom links', c, tile inci-dence matrix of cut links (we assume wilhout lossof generality that llley happen only between axiomlinks), and \]\[ the incidence matrix of axiom links of1I where 111 is lhe proof net resulting from all lhe cut-eliminations on U.
Then we have (Girard, 1989):\ ] l - -  (:l - ~2)U(:l - ~l:;)- '( : l  - ~)  ( l )We want to give an equiwflent relation to (1) fo-cusing on some axiom links we are interested in.Without loss of generality, we assume tile lack ofany axiom link in U such that none of its conclu-sions are involved in cut links.Then we can choose an el'tier for tile atoms (fromlhe proof net before the cut-elimination, there isthree subsets of atoms: those not involved in a cutlink, those involved in a cut link and whose dual isnot involved in a cut link, and those involved in acut link and their dual as well) such that:f o :: o 1 n t::o o lu = o-\["(Y'~0"IU;iJ, , .
0 i<~ic4\]Note that all the atoms belonging to the matchingwe are looking for in the generation process (seeligure 4) are in U:I.If we detine A = ( llJ 1111 - o~ eU 1 l/J1 and X =U:~(1 - ~r.l U3)- J, we can state tilt theorem:Theorem 1 Lel g/ be a correcl proof net reducingin Res(o, U) after cul-eliminalion.
These relationsare equivalenl:?
u)  = (: i  -   )cr(t - -?
(q / j i l l  - a:l *(/1 )U1 = o'21&(l - o,lU3) -1 l~r u?
A - -  I (T2X(T  2 andU:~ = X -1 + o4.Of course, all the terms are defined.We bast the proof search algorithm correspondingto the generation process we are dealing with on thisthird relation.Indeed, the axiom links we are looking for arethose whose two conclusions are involved in cutlinks.
That is we want Io complete U3 (knowingall the other matrices).
The previous theorem statesthat solving tile equation (1) correponds to solving631' I=================================== i:i::::\]:::::: :i }iiiiiiiiiiiiiiiii ::(a) Before cut-elimination% __~g 7:1p m l ive j(b) After cut-eliminationItFigure 3: Semantic proof nets for (in p)(live j)~ - " ' ~ ' ' ;L cut -c l im ina lkm I l l )  lFigure 4: The generation problemthe equation A = cr2X tcr2 in X with X inversible.Then, we have to solve U3 = X -1 + or4 such thattU~ = U3 and U~ -- 1.Theorem 2 If or4 = 0 and there exists a solution,then the latter is unique and completely defined (asmatrices product)from A and ~2.If cq 7~ 0 we generally have many solutions, and wehave to investigate this case to obtain good compu-tational properties for example in adding word orderconstraints.Nevertheless, we can decide the case we are han-dling as soon as we are given the lexical entries.5 ExampleLet us process on an example the previous results.We still use the lexicon of table 3, and we want togenerate (if possible) a sentence whose meaning isgiven by the proof net of figure 3(b).We first need to associate very atom with an in-dex (in the figures, we indicate a number i besidethe atom).
Of course, we have to know how to rec-ognize the atoms that are the same in U (figure 5(b))and in I\[ (figure 5(a)).
This can be done by lookingat the typed constants decorating the input conclu-sions (for the moment, we don't have a general pro-cedure).We also assume in this numbering that we knowwhich of the atoms in ~(F )  is linked to t + (theunique output).
In our case where ?4 = 0, it isnot a problem to make such a statement.
In othercases, the complexity would increase at most poly-nomially.Then, the given\] 00000001000000010000Ut = 000100000001000 0 0 0 0 1 0000000 l0000000000000000000000000000010~1 = 000100000000000000000And the uniquematrices are:0000 117 =00010 0-O0O0O000 ~2 =O00000000.solution is:x=u~=0:100000010000000000000100000 \] 000000100000000000100100000.00000100.-1000000 \ ]0000001000000000000000000010000100.000001.\[;'??
?i\]  oooo  0010 0100 0000 0001632We can add this matching to the syntactic forest offigure 6(a) (do not forget that the link between S+alld c~,- is in U1 and not in U3, and that U:3 representsedges between atoms with i E \[17, 22\]) and obtainon F the matching of figure 6(b).We still have to ensure the correctness of thisproof net (because we add all the tensor and parlinks), but it has a quadratic omplexity (less thanthe matricial computation).
In this case, it is cor-rect.Actually, this only gives us the axiom links.
Itstill requires to compute the word order to have nocrossing axiom link.
This can be done from the ax-iom links easier than quadratic time (it is a bracket-ing problem).6 ConclusionWe showed that the problem of generation in theLambek calculus fi-amework is decidable, and werelied on selnantic proof nets to express it as aguided proof search.
On top of keeping the decid-ability property of this framework, we characterizedthe semantic proof nets that euable a polynomialtime processing.Nevertheless, some work remains: we shouldsoon work on the atom numbering and the choiceof the lexical items to enable a practical ilnplemen-tation of this work.
Moreover, we want to benefitfrom the power of linear logic (and modalities) todeal with non linear A-terms.Finally, since different extensions of Lambek cal-culus based on proof nets (Moortgat, 1996; Lecomteand Retord, 1995) have been considered, we hopeour proposal and its good properties to apply toother linguistic approaches.AcknowledgmentsI would like to thank Christian Retord who pointedout to me Girard's algebraic interpretation of the cutelimination, and the anonymous reviewers for theirhelpful colnments.ReferencesVincent Danos.
1990.
Une Application tie laLogique Lin&tire ?t I Etude des Processus tie Nor-malisation (principalement du A-calcul).
Ph.D.thesis, Universitd Paris VII, June.Philippe de Groote and Chritian Retord.
1996.On the semantic readings of proof-nets.
InGlyn Morrill Geert-Jan Kmijff and Dick Oehrle,editors, Formal Grammar, pages 57-70, Prague,August.
FoLLI.Jean-Yves Girard.
1987.
Linear logic.
TheoreticalConq)uter Science, 50:1-102.Jean-Yves Girard.
1989.
Geometry of interactionI: Interpretation of system F. In C. Bonotto,R.
Ferro, S. Valentini, and A. Zanardo, editors,Logic Colloquium '88, pages 221-260.
Nortll-Holland.Jean-Yves Girard.
1995.
Geometry of interactionIII: The general case.
In J.-Y.
Girard, Y. La-font, and L. Regniel; editors, Advances in Lin-ear Logic, pages 329-389.
Cambridge UniversityPress, Proceedings of the Workshop on LinearLogic, ithaca, New York, June 1993.Franqois Lamarche and Christian Retor6.
1996.Proof-nets for the lambek calculus - an overview.In V. Michele Abrusci and Claudio Casadio, edi-tors, PIvceedings 1996 Roma Workshop.
Proof~and Linguistic Categories, pages 241-262.
Ed-itrice CLUEB, Bologna, April.Franqois Lamarche.
1995.
Games semantics forfull propositional linear logic.
In Proceedings,Tenth Annual IEEE Symposittm on l_z~gic in Com-puter Science, pages 464-473, San Diego, Cal-ifornia, 26-29 June.
IEEE Computer SocietyPress.Joachim Lambek.
1958.
The mathematics ofsentence structure.
American MathematicalMonthly, 65(3):154-170.Alain Lecomte and Christian Retord.
1995.
Pore-set logic as an alternative categorial grammar.
InFormal Grammar, Barcelona.Josep M. Merenciano and Glyn Morrill.
1997.Generation as deduction on labelled proof nets.In Christian Retord, editor, hvceedings of LACL-96, volume 1328 of LNA I, pages 310-328, Bed in.Springer.Michael Moortgat.
1996.
Categorial type logics.
InJohan van Benthem and Alice ter Meulen, edi-tors, Handbook of lx~gic and Lzmguage, pages 5-91.
Elsevier Science Publishers, Amsterdam.Christian Retor6.
1990.
A note on turbo cut elimi-nation.
Manuscript, September.Christian Retor6,.
1998.
Handsome proofilets:R&b-graphs, series-parallel graphs and perfectmatchings.
Technical Report 1234, IRISA.l)irk Roorda.
1991.
Resource Lz)gics: Proof-theoretical hlvestigations.
Ph.D. thesis, Univer-sity of Amsterdam, September.6333 4t __Z- 6 7(a) Marking atoms on \]I. .
.
.
.
F .
i ,~  .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
..-,1 12,!
18 '_e~_+:3 _~./)e- -19 22 20 21l ivesgIqPc.17.
.
.
.
.
.
~lives .
.
.
.
.
.
.
.
.
.
.
.
.,5 I 7~-,:+/~/~+ ~-/, ,  ~A ?
oc-----~:" !~to,~ np,:,~ .
.
.
.
.
.,4 - .7  \~  : ,:::: ....... , i...... --:'- ............. live :: :: 116...!..
!
::l~ ..... .P.
::I~_~77ZT-Z7272 ~!............
_ \ ](b) Marking atoms oll UIFigure 5: Defining the indices on U and \]1lr- 20Np+21'~ N, .
- i  72Pearls 11"~ lives Jol~l S + S+(a) The syntactic forest (b) The syntactic forest endowed withthe matching described by U3Figure 6: App ly ing the matching on the syntactic forest634
