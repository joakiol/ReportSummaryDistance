HypertagsAlexandra KINYONTalana / Lattice, Univ.
Paris 7UFRL case 70032 pl Jussieu 75005 Paris, FranceAlex andra.Kinyon @ linguist.j ussieu.frAbstractSrinivas (97) enriches traditionalmorpho-syntactic POS tagging withsyntactic information by introducingSupertags.
Unfortunately, words areassigned on average a much higher numberof Supertags than traditional POS.
In thispaper, we develop the notion of Hypertag,first introduced in Kinyon (00a) and inKinyon (00b), which allows to factor theinformation contained in ~everal Supertagsinto a single structure and to encodeflmctional information in a systematiclnanner.
We show why other possiblesolutions based on mathematical propertiesof trees are unsatisfactory and also discussthe practical usefulness of this approach.IntroductionAs a first step prior to parsing, traditional Partof Speech (POS) tagging assigns limitedmorpho-syntactic nformation to lexical items.These labels can be more or less fine-graineddepending on the tagset , but syntacticinformation is often absent or limited.
Also, mostlexical items are assigned several POS.
Althoughlexical ambiguities are dealt with by POS taggers,either in a rule-based or in probabilistic manner, itis useful to delay this decision at a further parsingstep (e.g.
Giguet (98) shows that knowingconstituent boundaries is crucial for solvinglexical ambiguity correctly).
In order to do so, itwould help to be able to encode several POS intoone compact representation.In order to assign richer syntactic informationto lexical items Joshi & Srinivas (94) andSrinivas (97) introduce the notion of Supertags,developed within the fiamework of TreeAdjoining Grammars (TAG).
The idea behindSupertags is to assign to each word in a sentence,instead of a traditional POS, an "elementarytree", which constitutes a primitive syntacticstructure within the TAG frmnework.
Asupertagged text can then be inputed to a parseror shallow parser, thus alleviating the task of theparser.
Several problems remain though:?
Even when no lexical ambiguity occurs, eachword can anchor several trees (several hundredsfor some verbs) I.
On average for English a wordis associated with 1.5 POS and with 9 supertags(Joshi (99)).
One common solution to theproblem is to only retain the "best" supertag foreach word, or eventually the 3 best supertags foreach word, but then early decision has an adverseeffect on the quality of parsing if the wrongsupertag(s) have been kept : one typically obtainsbetween 75% and 92% accuracy whensupertagging, depending on the type of text beingsupertagged and on the technique used) (cfSrinivas (97), Chen & al (99), Srinivas & Joshi(99)).
This means that it may be the case thatevery word in 4 will be assigned the wrongsupertag, whereas typical POS taggers usuallyachieve an accuracy above 95%.?
Supertagged texts rely heavily on the TAGframework and therefore may be difficult toexploit without being familiar with thisfornaal ism.?
Supertagged texts are difficult to read andthus difficult to annotate manually.?
Some structural information contained inSupertags is redundant?
Some information is missing, especially withrespect to syntactic functions 2.So our idea is to investigate how supertags canbe underspecified so that instead of associating aset of supertags to each word, one could associateone single structure, which we call hypertag, andwhich contains the same information as a set ofsupertags as well as functional informationOur practical goal is fourfolds :a) delaying decision for parsingb) obtaining a compact and readablerepresentation, which can be manually annotated1 See Barrier & al.
(00) for precise data for French, usingthe FFAG wide-coverage grammar developped atTALANA, University of I'aris 7.2 The usefulness offunctional information ill POS tagginghas also been discussed within the reductionist paradigm(cf Voutilainen &Tapanainen (93)).446as a step towards building a treebank for French(cf Abeill6 & al.
(00a), Cl6ment & Kinyon (00)).c) extracting linguistic information on a largescale such as lcxical preferences for verbsubcategorization frames.
(cf Kinyon (99a))(1) Building an efficient, but nonethelesspsycholinguistically motivated, processing modelfor TAGs (cf Kinyon (99b))Ttms, in addition of being well-definedcomputational objects (Point a), hypertags houldI)e "readable" (point b) and also motivated from alinguistic point of view (Points c & d).In the first part of this paper, we brieflyintroduce the LTAG frmnework and giveexmnples of supertags.
In a second part, weinvestigate several potential ways to underspecifysupertags, and show why these solutions areunsatisfactory.
In a third part, we explain thesolution we have adopted, building up on thenotion of MetaGrammar introduced by Candito(96) and Candito (99).
Finally, we discuss howthis approach can be used in practice, and why itis interesting for frameworks other than LTAGs.1 Br ief  Overv iew of LTAGsA LTAG consists of a t'inite set ofelementary trees of finite depth.
Eachelementary tree nmst "anchor" one or morelcxical item(s).
The principal anchor is called"head", other anchors are called "co-heads".
Allleaves in elementary trees are either "anchor","foot node" (noted *) or "substitution node"(noted $)..
These trees are of 2 types ?
auxiliaryor initial 3.
A tree has at most 1 foot-node.
A treewith a foot node is an auxiliary tree.
Trees thatare not auxiliary are initial.
Elementary treescombine with 2 operations : substitution andadjunction, but we won't develop this point sinceit is orthogonal to our concern and refer to Joshi(87) for more details.
Morphosyntactic featuresare encoded in atomic feature structuresassociated to nodes in elementary trees, in orderto handle phenomena such as agreement.Moreover, linguistic constraints on the well-formedness of elementary trees have beenformulated :?
Predicate Argulnent Cooccurence Principle :there must be a leaf node for each realizedargument of the head of an elementary tree.?
Semantic consistency : No elementary tree issemantically void?
Semantic minimality : an elementary treecorresponds at most to one semantic unitFigure 1 shows a non exhaustive set ofSupertags (i.e.
elementary trees) which can beassigned to "beats ''4 , which is a verb in trees ctl(canonical tree), ~2 (object extraction), 131(ob.iect relative) and \[32 (subject relative) and anoun in tree oG.
So an LTAG can be seen as alarge dictionary, were in addition of traditionalPOS, lexical entries are associated with severalstructures encoding their nlorphological as wellas some of their syntactic properties, thesestructures being very similar to small constituenttrees.e?l c?2S S~05 v NI,I.
s' s'beats expl V NI,I, Cl~mp NO,I- VI I I I(Vb : "J beats M.") it is that beats(rb: "It is Mary that J. beats")N NNI* S' NO* S'NComp NO$ V Camp V NI$ II \[ I I 1,eatsthat beats who beats(Vb : "The man that (Vb : "The man rho (Noaa :"3 beats")M. beats .,.")
beats 31 ...")HGURE 1 : some supertags fi)r "beats"2 Underspeci fy ing SupertagsThe idea of underspecifying constituent rees(and thus elementary trees) is not new.
Severalsolutions have been proposed in the past.
We willnow investigate how these solutions couldpotentially be used to encode a set of supertags ina compact manner.2.1 Parse forestSince elementary trees are constituentstructures, one could represent a set of elementarytrees with a graph instead of a tree (cf.
Tomita(91)).
This approach is not particularly interestingthough.
For example, if one considers the treesczl and 131 fi'om figure 1, it is obvious that theyhardly have any structural information incommon, not even the category of their root.Therefore, representing these 2 structures in agraph would not help.
Moreover, packed3 Traditionally initial trees arc called a, and auxiliary lines 4 For sake of readability, morphological features arc notS\]IOWI1.447structures are notoriously difficult to manipulateand yield unreadable output.2.2 Logical formulaeWith this approach, developped for instance inKalhneyer (99), a tree can be represented by alogical formula, where each pair of nodes is eitherin relation of dominance, or in relation ofprecedance.
This allows to resort to 1 ~' orderlogic to represent a set of trees byunderspecifying dominance and/or precedencerelations .
Unfortunately, this yields an outputwhich is difficult to read.
Also, the approachrelies only on mathematical properties of trees(i.e.
no linguistic motivations)2.3 Linear types of treesThis approach, introduced in Srinivas (97),used in other work (e.g.
Halber (99)) is morespecific to TAGs.
The idea is to relax constraintson the order of nodes in a tree as well as oninternal nodes.
A linear type consists in a 7-tuple<A,B,C,D,E,F,G> where A is the root of the tree,B is the category of the anchor, C is the lexicalanchor, D is a set of nodes which can receive anadjunction, E is a set of co-anchors, F a set ofnodes marked for substitution, and G a potentialfoot node (or nil in case the tree is initial).
Inaddition, elements of E and F are marked + ifthey are to the left of the anchor, - if they are tothe right.czl or2S SNO P NO,,L V PP NI,,LI / \  I /",,donne a N2-1- donne il N2,,\[-FIGURE 2 :two trees with the same linear typeFor example, the tree NOdonneNl'~N2 for"Jean donne une pomme gl Marie" (J. gives anapple to M.) and the tree N0donne~lN2Nl for"Jean donne & Marie une pomme" (J. gives M. anapple) which are shown on Figure 2, yield theunique linear type (a)(a) <S,V,donnc, { S,V,PP}, { h+ }, { N0-,NI +,N2+ }, nil>(b) <S,V,gives, {S,V,PP}, { to+ }, { N0-,N1 +,N2+} ,nil>This approach is robust, but not reallylinguistic : it will allow to refer to trees that arenot initially in the grammar.
For instance, thelinear type (b) will correctly allow the sentence"John gives an apple to Mary", but alsoincorrectly allow "*John gives to Mary an apple".Moreover, linear types are not easily readable s.Finally, trees that have more structuraldifferences than just the ordering of branches willyield different linear types.
So, the treeN0giveNltoN2 (J. gives an apple to M.) yieldsthe linear type (b), whereas the tree N0giveN2Nl(J. gives M. an apple) yields a different lineartype (c), and thus both linear types should label"gives".
Therefore, it is impossible to label"gives" with one unique linear type.
(c) <S,V,gives, { S,V}, { }, { N0-,N 1 +,N2+} ,nil>2.4.
Partition approachThis approach, which we have investigated,consists in building equivalence classes topartition the grammar, each lexical item thenanchors one class instead of a set of trees.
Butbuilding such a partition is prohibitively costly : awide coverage grammar for French containsapprox.
5000 elementary trees (cf Abeilld & al.
(99), (00b)), which means that we have 25~'~possible subsets.
Also, it does not work from alinguistic point of view :(a) Quand Jean a brisd la glace ?
(When did J. break the ice ?
)(b) Jean a brisd la glace (J. broke the ice)(c) Quelle chaise Jean a brisd ce matin ?
(Which chair did J. break this morning ?
)In (a) brisd potentially anchors N0briseNI(canonical transitive), WhN0brise (objectextraction) and NOBriseGlace (tree for idiom).But in (b), we would like brim not to anchorWhN0brise since there is no Wh element in thesentence, therefore these three trees should notbelong to the same equivallence class : We canhave class A={N0briseN1,NOBriseGlace} andClassB={WhN0brise}.
But then, in (c), brisdpotentially anchors WhN0brise and N0briseNIbut not NOBriseGlace since glace does not appearin the sentence.
So NOVN1 and NOBriseGlaceshould not be in the same equivalence class.
Thishints that the only realistic partition of thegrammar would be the one were each classcontains only one tree, which is pretty useless.4.
Exploiting a MetaGrammarCandito (96), (99) has developed a tool togenerate semi-automatically elementary trees Sheuse an additional ayer of linguistic description,called the metagrammar (MG), which imposes ageneral organization for syntactic information ina 3 dimensional hierarchy :5 This type of format was considered as a step towardscreating a trccbank for French (of Abcilld & al 00a), butunfommatcly proved impossible to manually annotate.448?
Dimension 1: initial subcategorization?
Dimension 2: redistribution of functions andtransitivity alternations?
D imension 3: surface realization ofarguments, clause type and word orderEach terminal class in dimension 1 describes apossible initial subcategorization (i.e.
a treefamily).
Each terminal class it\] dimension 2describes a list of ordered redistributions offunctions (e.g.
it allows to add an argument forcausatives).
Finally, each terminal class indimension 3 represents the surface realization of a(final) flmction (e.g.
cliticized, extracted ...).Each class in the hierarchy corresponds to thepartial description of a tree (cf.
Rogers & Vijay-Shanker (94)).
An elementary tree is generated byinheriting from one terminal class in dimension 1,fi'om one terminal class in dimension 2 and fl'olllU terulinal classes ill dinlension 3 (were n is thenumber of arguments of the elementary tree).
6The hierarchy is partially handwritten.
Thencrossing of linguistic phenomena (e.g.
passive +extraction), terminal classes, and from thereelementary trees are generated automatically offline.
This allows to obtain a grammar which cat\]then be used to parse online.
When the grau\]maris generated, it is straight forward to keep track ofthe terminal classes each elementary treeinherited from : Figure 3 shows seven elementarytrees which can superiag "domw" (gives), as wellas the inheritance patterns 7 associated to each ofthese supertags.
All the exainples below will referto this figure.The key idea then is to represent a set ofelementary trees by a disjunction for eachdilnension of the hierarchy.
Therefore, a hypertagconsists in 3 disjunctions (one for dimension 1,one for dinlension 2 and one for dimension 3).The cross-product of the disiunctions can then beperforined automatically and from there the set ofelementary trees referred to by the hypertag will6 The idea to use the MG to obtain a colnpactrepresentation f a set of SuperTags was briefly sketchedin Candito (99) and Abeill6 & al.
(99), by resorting toMetaFeatures, but the approach ere is slightly differentsince only inlbrmation about he classes in the hierarchy isused.7 We call inheritance patterns Ihe structure used to store allthe terminal classes atree has inherited from.
{ ) CA .
.
.
.
.
.
.
.
.
.
.oq,~ V~)i .... .
.
.
ioII 1 : It0 '?li i ('Ill 2) qN ~ ' P  ~ II,i ....... i,,, 2 .
.
.
.
.
.
.
lislril,,,,ioi, .1\[~)imension3: suhj:tlominai.canonlcal \[\[\[ / /~ .x  ollj ....... ina, ........ |cal IIdonne h N2-L ~l'O )j : II(lltl IIn -canon efll\]\[(J donne lille pOlllMt~ h M. /J gives an apple to M)c~2N ~ N  I.L \[~)i ....... ioi, 1: n0vnl (hi12) qI Dimc.sio.
2 : .o redistril>ution tI lii ....... ion 3 :\] suhj ....... inal ........ ieal II~ / I obJ ....... i,,,,I ........ i~.l II(J, donlIc \[I ~.~.
\[\]Dt3 pOlllmO /J gi','es to M an apll\]?
)0'.~ F)  i ....... ion |: I, OVlll(~ln2) "~1s ~ I Dimension 2 : hObj-clnply /N~NI .L~ \] I)i ....... ion 3 :\[ sulij ....... inal ........ ical I\[I L_  I ebj : nominal-canonical I\]define(J. dOlitle LilLe pOlliille/J gives an apple)\[;4 ~l i  ....... ioi, I : nll~ nl(hi,2)~ ~  I I)hllensi(ll l 2 : no redistribution \[Conll~ %' Nll$ PP \[ I obj : relallvizcd-object I II I / \  L i.o,,J: ...... ,,,,,, .
.
.
.
.
.
.
.
++.~que donne l'\[ep N2.\[-/ a(1 peru n ?
que donne J. h M, IThe allph, wDich gives J. to M.)t\]5 \[~)i ....... ioi, 1: n0viil(hn2) q NN I * ~ S _ '  ~ I Dime.d.n 2 :no redistril}utlon .1~ ~  l l) i  ....... i0113 :l st lhj  ........ ilHll .
.
.
.
.
.
.
.
.
i ' l  IICotnl> N0-L V PP l \] obj : rehttivized-olljcct I II I ~ L l,,-.,,J ........ i,,,,: .......... i,.,~que donne P\[cp N2,~//l(l,a pomme que J. donne D M. IThe allph, whictl J. gil'es to M.JI}6N ~) i  ....... ion I: n0vnl(',,,2) qI m ....... io,, 2 :aohj-cmply t NI* - -  ~ ~ I I ) i  ....... ion 3 :l suhj ........ iual-i.verled \ ] l  / AComp V NI)~ L i ob.i : relali;ized-object .~JI iqlte dotlttd(La pomme que donne J.
/The apph' which give.i J.
)\[:17 UI i  ....... ion 11 n(l',nl(hn2) qy s' ~ I I)imc.sio.
2 : Mll, j-elnpty .
lNI* l m ....... io.
3 :l +,,i,j ........ inal .......... it,,: \]Ic , , ~  v L I obj : relali+ized.ohject 11I iqtte donne(La potlltJl# qtte J. dotltte /The allPh' which J. gil.es )F IGURE 3 : SuperTags and associatedinher itance patternsbe automatically retrieved We will now ilhlstratethis, first by showing how hypertags are built, andthen by explaining how a set of trees (and thus ofsupertags) is retrieved from the informationcontained in a hypemig.4.1 Bui ld ing hypertags : a detailed exampleLet us start with a simple exemple were wewant "donner" to be assigned the supertags o~1 (J.dmme tree pomme D M.I J. gives an apple to M.)and o~2 (J donne h M. tree l)omme/J, gives M. an449apple).
On figure 3, one notices that these 2 treesinherited exactly fi'om the same classes : therelative order of the two complements is leftunspecified in the hierarchy, thus one samedescription will yield both trees.
In this case, thehypertag will thus simply be identical to theinheritance pattern of these 2 trees :Dimension 1 : n0vnl (hn2)Dimension 2 : no redistributionDimension 3 subj :nominal-canonical \[obj : nominal-canonical \]\[ a-~'}bj: nominal-canonical\[Let's now add tree o{3 (J. donne une pomme /J.
gives an apple) to this hypertag.
This tree hadits second object declared empty in dimension 2(thus it inherits only two terminal classes fromdimension 3, since it has only 2 argumentsrealized).
The hypertag now becomes 8 :Dim.
1: n0vnl(an2)Dim.
2 : no redistribution OR StObj- emptyI)im.
3 lsubj :nonainal-canonical \[obj : nominal-canonicala-obj: nominal-canonicalLet's now add the tree 134 for the objectrelative to this hypertag.
This tree has beengenerated by inheriting in dimension 3 fi'om theterminal class "nominal inverted" for its subjectand from the class "relativized object" for itsobject.
This information is simply added in thehypertag, which now becomes :I)i,l~.
: n0wll (~.12)ira.
2 : no redistribution 0P, il0bj- empty lira.
3 subj :nominal-canonical OR nominal-inverledl Iobj : nominal-canonical OR relativized-oblect I II a-0bj: n0minal-canonical iiAlso note that for this last example thestructural properties of 134 were quite differentthan those of ?~1, 0{2 and cG (for instance, it has aroot of category N and not S).
But this has littleimportance since a generalization is made inlinguistic terms without explicitly relying on theshape of trees.it is also clear that hypertags are built in amonotonic fashion : each supertag added to ahypertag just adds information.
Hypertags allowto label each word with a unique structure 9. and8 What has been added to a supertag is shown in boldcharacters.9 We presented a simple example for sake of clarity, buttraditional POS ambiguity is handled in the same way,except hat disjunctions are then added in dimension 1 ascontain rich syntactic and ftmctional informationabout lexical items (For our example here theword donne~gives).
They are linguisticallymotivated, but also yield a readable output.
Theycan be enriched or modified by Imman annotatorsor easily fed to a parser or shallow parser.4.2 Retrieving information from hypertagsRetrieving inforlnation from hypertags ispretty straightforward.
For example, to recoverthe set of supertags contained in a hypertag, onejust needs to perform the cross-product betweentile 3 dimensions of the hypertag, as shown orlFigure 4, in order to obtain all inheritancepatterns.
These inheritance patterns are thenmatched with tile inheritance patterns containedin the grammar (i.e.
tile right colunm in Figure 3)to recover all the appropriate supertags.Inheritance patterns which are generated but don'tmatch any existing trees in tile grammar aresimply discarded.We observe that the 4 supertags 0{1, c~2 and0{3 and \]34 which we had explicitly added to tilehypertag in 4.1 are correctly retrieved.
But also,the supertags 135, 136 and 137 arc retrieved, whichwe did not explicitly intend since we never addedthem to the hypertag.
But if a word can anchorthe 4 first trees, then it will also necessarilyanchor tile three last ones : for instance we hadadded the canonical tree without a second objectrealized into the hypertag (tree or2 ), as well asthe tree for tile object relative with a secondobject realized realized (tree 134 ), so it isexpected that tile tree for the object relativewithout a second object realized can be retrievedfrom the hypertag (tree 136) even though we neverexplicitly added it.
In fact, the automatic rossingof disjunctions in the hypertag insuresconsistency.Also note that no particular" mechanism isneeded for dimension 3 to handle argumentswhich are not realized : if hObj-empty is inheritedfrom dilnension 2, then only subject and objectwill inherit from dimeusiou three (since onlyarguments that are realized inherit from thatdimension when the grammar is generated).Information can be modified at runtime in ahypertag, depending on the context of lexicalitems.
For example "relativized-object" can besuppressed in dimension 2 from the hypertagshown on Figure 4, in case no Wh element isencountered in a sentence.
Then, the correct setof supertags will still be retrieved from thewell.450Content of the llypertagDim ension2 Dim en sio n3Subject Object a-obj1 i Il .-/\ ~ ~ 1 1 1 i 1~1 0<2 \[~5 N o \[~ cs3 \[~6 N. \[7,7 (Jorresllonding Corresl)onl(lhigI,'~'~' \[%qsertagsc?r-resls?
'idi"glol'il-ierilancelJatter'sl t r~, e\[ (el Figure 3) IFIGURE 4 : Retrieving Inheritance patterns and Supertagsfronl a Hypertaghypertag by automatic rossing (that is, trees o~1,(;~2 and o'.3), since the other inheritance l)atternsgenerated won't refer to any tree ill the grainmar(here, tie tree inherits in diillension 3,vuhject:in, verted-nominal, without inheriting alsoobjecl: IwlalivizeU-oluect)4.3 Practical useWe have seen that an LTAG can be seen as adictionary, in which each lexical entry isassociated to a set of elementary trees.
Withhypertags, each lexical entry is now paired withone unique structure.
Therefore, automaticallyhypertagging a text is easy and involves a simpledictionary lookup.
The equiwllent of finding the"right" supertag for each lexical item in a lext (i.e.reducing ambiguity) then consists in dynamicallyremoving information from hypertags (i.e.suppressing elements in disjunctions).
This can beachieved by specific rules, which are currentlybeing developed.
The resulting output carl theneasily be manually annotated in order to build agold-standard corpus : manually removinglinguistically relevant pieces fronl information ina disjunction from a single structure is simplerthan dealing with a set of trees.
In addition ofobvious advantages in terms of display (tleestructures, especially when presented in a nongraphical way, are unreadable), the task itselfbecomes easier because topological problems aresolved automatically: annotators need justanswer questions uch as "does this verb have anextracted object ?
", "is the subject of this verbinverted ?"
to decide which terminal classe(s)nlust be kept i?
.We believe that these questionsare easier to iulswcr than "Which of these treeshave a node N I marked wh+ at address 1.1 9"(for an extracted object).Moreover, supertagged text are difficult to useoutside of an LTAG framework, contrary tohypertagged texts, which contain higher levelgeneral inguistic information.
An example wouldbe searching and extracting syntactic data oil alarge scale : suppose one wants to extract all tileoccurrences where a given verb V has arelativized object.
To do so on a hypertagged textsimply involves performing a "grep" ell all linescoutainhig a V whose hypertag containsdimension .7 : objet:relalivized-object , withoutknowing anything about the LTAG framework.Performing the same task with a supertagged textinvolves knowing how LTAGs encode relativizedobjects in elementary trees and scanning potentialtrees associated with V. Another examl)le wouldbe using a hypertagged text as an input to a parserbased oil a framework other than LTAGs : forinstance, information in hypertags could be usedby an LFG parser to constrain the construction ofan IV-structure, whereas it's uuclear how tills couldbe achieved with supertags.10 This of course implies that one must be very careful inchoosing evocative names for terminal classes.451The need to "featurize" Supertags, in order topack ambiguity and add functional informationhas also been discussed for text generation illDanlos (98) and more recently in Srinivas &Rainbow (00).
It would be interesting to comparetheir approach with that of hypertags.ConclusionWe have introduced the notion of Hypertags.Hypertags allow to assign one unique structure tolexical items.
Moreover this structure is readable,linguistically and computationally motivated,and contains much richer syntactic informationthan traditional POS, thus a hypertagger would bea good candidate as the front end of a parser.
Itallows in practice to build large annotatedresources which are useful for extractingsyntactic information on a large scale, withoutbeing dependant on a ~iven grammaticalformalism.We have shown how hypertags are built, howinformation can be retrieved from them.
Furtherwork will investigate how hypertags can becombined irectly.RefereneesAbeilld A., Candito M.H., Kinyon A.
(1999) FFAG :current status & parsing scheme.
Prec.
Vextal'99.Venice.Abeilld A., Cldment L., Kinyon A.
(2000a) Building aTreebank for French.
Prec.
LREC'2000.
Athens.Abeilld A., Candito M.H., Kinyon A.
(2000b) Currentstatus of FTAG.
Proc TAG+5.
Paris.Barrier N. Barrier S. Kinyon A.
(2000).
Lcxik : amaintenance tool for FTAG.
Prec.
TAG+5.
Paris.Candito M-H. (1996) A principle-based hierarchicalrepresentation of LTAGs, Prec.
COLING'96Kopenhagen.Candito M.-H, (1999) Reprdsentation modulairc ctparamdtrable de grammaircs 61ectroniqueslexicalisdes.
Application au frangais e ta  l'italien.PhD dissertation.
University Paris 7.Chen J., Srinivas B., Vijay-Shanker K. 1999 NewModels for Improving Supertag Disambiguation.Prec.
EACL'99 pp.
188-195.
Bergen.Cldment L, Kinyon A.
(2000) Chunking, marking andsearching a morphosyntactically annotated corpusfor French.
Prec.
ACIDCA'2000.
Monastir.Danlos L (1998) GTAG : un formalisme lexicalis6pour la gdndration automatique d  TAG.
TAL 39:2.Giguet E. (1998) Mdthodes pour l'analyse automatiquede structures formelles sur documentsmultilingues.PhD thesis.
Universitd e Cacn.Halber A.
(1999) Stratdgie d'analyse pour lacomprdhension de la parole : vers une approchebase de Grammaires d'Arbres Adjoints Lexicalisdes.PhD thesis.
ENST.
ParisJoshi A.
(1987) An introduction to Tree AdjoiningGrammars.
In Mathematics of Language.
A.Manaster-Ramer (eds).
John Benjamins PublishingCompany.
Amsterdam.Philadelphia.
pp.
87-114.Joshi A.
(1999) Explorations era domain of locality.CLIN'99.
Utrecht.Joshi A. Srinivas B.
(1994) Disambiguation of SuperParts of Speech (or Supertags) : Ahnost parsing.Proceeding COLING'94.
Kyoto.Kalhneyer L 0999) Tree Description Grammars andUndcrspecified Representations.
PhD thesis,Universit'At Ti.ibingen.Kinyon A.
(1999a) Parsing preferences with LTAGs :exploiting the derivation tree.
Prec.
ACL'99.CollegePark, MdKinyon A.
(1999b) Some remarks about thepsycholinguistic relevance of LTAGs.
Prec.CLIN'99.
Utrecht.Srinivas B.
(1997) Complexity of lexical descriptionsand its relevance tbr partial parsing, PhD thesis,Univ.
of Pennsylvania.Srinivas B., Joshi A.
(1999) Supertagging : Anapproach to almost parsing.
ComputationalLinguistics 25:2.Srinivas B. Rainbow O.
(2000) Using TAGs, a TrceModel, and a Language Model for Generation.
Prec.TAG+5.
Paris.Tomita M. (1991) Generalized LR Parsing.
MasaruTomita (eds).
Kluwer academic publishers..Rogers J., Vijay-Shanker K. (1994) Obtaining treesfroln their descriptions : an application to TAGs.Computational Intelligence, 10:4 pp 401-421.Voutilainen A. Tapanainen P. (1993) Ambiguityresolution in a reductionistic parser.
Prec.
EACL'93.452
