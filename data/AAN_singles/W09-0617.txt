Proceedings of the 12th European Workshop on Natural Language Generation, pages 106?109,Athens, Greece, 30 ?
31 March 2009. c?2009 Association for Computational LinguisticsGenerating Natural Language Descriptions of Ontology ConceptsNiels Schu?tteDublin Institute of TechnologyDublin, Irelandniels.schutte@student.dit.ieAbstractThis paper gives an overview of ongo-ing work on a system for the generationof NL descriptions of classes defined inOWL ontologies.
We present a generalstructuring approach for such descriptions.Since OWL ontologies do not by defaultcontain the information necessary for lex-icalization, lexical information has to beadded to the data via annotations.
A rule-based mechanism for automatically deriv-ing these annotations is presented.1 OverviewThere exists a body of works regarding the ver-balization of content from RDF data or ontologieslike OWL.
Some approaches (such as (Galanis andAndroutsopoulos, 2007)) rely on rich domain de-pendent resources, while other approaches try todo away with such resources as much as possibleand derive information such as lexicalization datathat is not explicitly included in the ontology fromthe available data.2 Data Model and Message DefinitionThe goal of the system is to generate natural lan-guage texts from class definitions in an OWL on-tology that serve as a description of the class.To generate textual descriptions, linguistic rep-resentations for the contents of the ontology haveto be found.
Since OWL ontologies do not by de-fault contain the information necessary for lexical-ization, lexical information has to be added to thedata.
In the current system, classes are assumedto represent simple objects of the world and there-fore to be realizable as noun phrases that can belexicalized with the name of the class.Attributes of classes are described in OWL bydefining restrictions that apply to so called prop-erties.
Properties are binary relations among on-tology objects.
They are realized as syntacticstructures that connect objects.
During annotation,each property is assigned a certain relation typethat determines the syntactic structure that is usedto realize the property.2.1 Relation typesThe relation types form an abstraction over thepossible structural realizations of properties byproviding a specification of a surface structure thatcan be used to realize the property.
Dependingon the type of the relation, a number of other at-tributes of the relation may be specified to deter-mine details of the realization, such as lexical-izations for some elements of the structure and aspecification about how to fill the parameters ofthe configuration with the parameters of the prop-erty.
At the moment there exists a small set of re-lation types that covers most of the relations in theexample ontologies that were considered for thesystem.
This approach corresponds with the re-sults presented in (Hewlett et al 2005) where theauthors affirm to have found a small set of patternsthat covers most of the properties in a number ofmajor ontologies.The relation type of a property also determineswhether a property can be expressed as an adjec-tive modifier.
This information can be exploitedin aggregation operations to create more concisetext.The two most important relation types are theones called simple and roleplaying.simple specifies that the properties should berealized as a simple configuration of two partici-pants that are connected with a verb in the activeform.
This type fits preferably for properties like?eats?
or ?produces?.
The objects in the domainand range position of the property are most oftenmapped straight to domain and range parametersof the relation.
Apart from this, it has to be deter-mined which word to use to lexicalize the verb that106appears in the realization of the property.
A typ-ical sentence formed with a property of this type(in this example the property ?eats?)
would beA mouse eats only cheese.roleplaying specifies that the property should berealized as a configuration in which one partici-pant fulfills a certain role for another participants.This relation is typically used to realize proper-ties like ?hasColor?
or ?hasHabitat?, since eventhough the property itself is a binary relation, itsname suggests to express it as a configuration thatinvolves, apart from the domain and range objects,a third object whose lexicalization is derived fromthe name of the property.
A sentence for the prop-erty ?hasParent?
of this type would be:A child has at most 2 humans as parent.2.2 Automatic AnnotationIn this section we describe our approach to auto-matically generating annotations using rules basedon a part of speech analysis of the property name.A rule consists of a pattern and a specification ofthe relation that is to be used to realize the prop-erty.
The pattern is a sequence of part of speechelements.
A pattern fits a property, if the propertyname can be split into words whose part of speechare equal to the sequence specified by the pattern1.If the pattern fits, the relation is instantiated ac-cording to the specification associated in the rulewith the pattern.
Keywords can be used to assignthe objects in the domain or range position to thedomain or range slot of the relation.
Names ofparts of speech detected in the pattern can also beused to assign parts of the property name as lexi-calization to elements of the relation.
The follow-ing rule is currently used in the system:VP -> Simple (SUBJ, OBJ, VP)It assigns properties like ?eats?
to simple rela-tions that use the domain object of the property asdomain object and the range subject likewise.
Theelement of the property name ?VP?
(in the exam-ple for ?eats?, simply ?eats?)
is used to lexicalizethe verb of the relation.
Detected elements are al-ways reduced to their stem before assigning lexi-calizations (e.g.
?eat?
is actually assigned insteadof ?eats?).
The following rule currently assignsproperties like ?hasColor?
to roleplaying relations.1We are currently exploring if this approach should be ex-tended to regular expressions instead of sequences.VP NP -> RolePlaying(SUBJ, OBJ, VP, NP)COND has(VP)The COND part specifies an additional condi-tion where certain parts of the pattern have to befilled with special words.
The inclusion of specialconditions for the rules allows it to create morespecific patterns.At this stage, the automatic assignment is onlyperformed for annotating properties.
It is howeverpossible to extend this approach to classnames tocreate linguistically more complex lexicalizationsfor classes.3 StructuringThe description texts generated by our system arestructured based on analysis of texts from encyclo-pedia entries and the possible relations among theavailable pieces of information.
The informationavailable in the definition is dissected into discretemessage objects.
Before structuring begins, thesystem attempts to summarize some of the infor-mation from the definition.For example it is possi-ble to combine cardinality restrictions without los-ing information.The structure of the descriptions consists of anintroductory passage, whose main purpose it isto give a quick burst of information about theclass, and a sequence of subsequent sections thatpresents the remaining information about the classstructured according to the properties of the class.The description is closed with the presentation ofthe classes the subject class is disjoint with.
Ingeneral each element is realized as one complexsentence.The introduction starts off with informationabout what kind of thing the class is.
This is re-alized by introducing the messages presenting theimmediate superclasses of the class.
To set theclass apart from the superclasses the introductionis enriched with as much additional informationas possible and textually sensible.
This informa-tion is linked as closely as possible to the super-class message.
This is realized by adding mes-sages that can be transformed into adjective modi-fiers to the reference to the subject class in the firstsentence, and adding more information as a rela-tive sentence.
This results in sentences such as:A grizzly bear is a large bear that lives only inNorth America.107This phrase consists of three distinct pieces ofinformation from the ontology: the immediate su-perclass of the class ?grizzly bear?
and two re-strictions for a property named ?hasSize?
(e.g.
?hasSize {Large}) and ?livesIn?
(e.g.
?
livesInNorthAmerica).
The first restriction was chosenfor this position because it can be expressed asan adjective.
Whether and how a message can betransformed into an adjective is determined by theattributes of the relation type of the property ofthe restriction that is the source of the message.
Inthis case, a manual annotator has decided that thevalues of the ?hasSize?
property can be alterna-tively be directly used as adjectives of the subjectof the description instead of using the default re-alization of the roleplaying relation.
This decisioncan just as well be made heuristically in the auto-matic annotation generation process.
The criterionhere would be that the word ?Size?
that specifiesthe role played by the range object refers to animmediate quality of the class.
Other candidatesfor a class of such words are ?Color?
or ?Gender?.However there exists a great number of propertiesthat fit the roleplaying pattern for which such atransformation would not be appropriate.
Exam-ples include the properties ?hasParents?
or ?has-Maker?.
In these properties the role refers to anobject external to the class rather than to an imme-diate quality of it.The rest of the available information is orderedinto groups according to the property (propertygroups) that is restricted by the restriction that iscontained in the message.
This produces groupsof messages that all pertain to the same property.Those property groups are the first step towardstext sections that deal with one particular attributeof the class that is described through restrictionson each property addressed.4 MicroplanningIn the next step, microplanning is performed toderive complete text specifications.
Most of thestructuring that is left to be done is performed inthe property groups and is linked with microplan-ning operations such as aggregation and is there-fore performed at this stage.Depending on the types of the restrictions in themessages, rhetorical structures are formed insideeach group.
Figure 1 gives an overview of pos-sible structures inside a group.
The boxes repre-sent complexes of messages based on groups ofrestrictions.
The names refer to the names for re-striction types used in the Manchester Syntax forOWL, with CARD summarizing all cardinality re-strictions.
The labels on the arcs represent rhetor-ical relations that connect the complexes.Figure 1: Structure inside groupsThe SOME restrictions and CARD restrictionscan be combined, since both make statementsabout the positive existence of objects.
This com-bination is linked to the ONLY restrictions via anelaboration.
VALUE restrictions finally can beconnected to this complex via an exemplificationrelation since they make a statement about con-crete objects as opposed to the statements aboutpossible objects made by the other restrictions.An example for a statement generated froma moderately complex structure containing anONLY restriction and an EXACTLY restrictionwould be this sentence:A gizzly bear has only bears as parents and it hasexactly two bears as parents.The semantic content behind this sentence is agroup of messages concerning the property ?has-Parent?, that contains messages derived from therestrictions ?
parent bear and = hasParent 2.
Fig-ure 2 presents the structure that is formed insidethe group.
The SOME block formed from thecardinality restrictions and the SOME restrictionswhich are not present in this example.
The result-ing block is then connected to the ONLY block.
Itshould be noted that the ONLY restriction is ex-ploited to determine the term that is used to lex-icalize the range object of the message from thecardinality restriction, since the restrictions giventhrough it are normally more specific than the nor-mal range defined for the property.108Figure 2: Example of structure inside a group inactionThe task of Referring Expression Generationstage in this system currently only makes sure anappropiate pronoun is used in subsequent refer-ence to the subject of the description.
In generalthe neutral pronoun ?it?
is used, unless a restric-tion is found that can be interpreted as an informa-tion about the gender of the class.A complete description text for the concept of agrizzly bear taking reference expressions into ac-count may be:A grizzly bear is a large bear that lives only innorth america.
It has only bears as parents and ithas exactly two bears as parents.
A grizzly bearcan not be an ice bear or a brown bear.The first sentence is the introduction of the de-scription.
The second sentence is the realizationof the property group of the property ?hasParent?.The last sentence finally presents the classes thesubject class is disjoint with and closes the de-scription.Surface Generation is performed by the KPMLlanguage generation system (Bateman, 1997).
Thestructural relations of the text plan, the linguisticrelations inside the messages and the representa-tions of classes are enriched with SPL plan frag-ments that combine to form a complete specifica-tion for a text.
The type of a restriction is realizedas a modification of the message.5 ConclusionThe system generates sensible texts for a numberof classes in a number of ontologies.
The proposedschema for the structure of the text appears to pro-duce natural sounding introductions to the text aswell a sensible organization for the remaining bulkof the information.
We are not aware of a sys-tem that performs the same task to the same de-gree without relying on more domain specific re-sources.
The system does not and can not cover allimaginable ontologies.
Problems especially arisefrom complex class definitions that contain nestedclass definitions, since they can require quite com-plex linguistic structures.
For evaluation, testersfamiliar with the OWL formalism will be asked tojudge whether the produced texts accurately rep-resent the specified information, and whether thetexts appear natural.The structure-based annotation mechanismprofits from well organized approaches to namingclasses and properties, but runs into problems ifnames cannot be fitted into the expected patterns.In this case, the generated annotations have to bechecked manually and need to be corrected.
If for-mal patterns like simple grammars for naming canbe agreed upon during the design of the ontology,these patterns can be exploited directly to generateannotations.
This might be worth considering as astep in ontology development.AcknowledgementsThe author would like to thank John Bateman forhis input to the work and his help with this pa-per, and John Kelleher for his reviewing and com-ments.ReferencesDimitrios Galanis and Ion Androutsopoulos 2007.Generating Multilingual Personalized DescriptionsfromOWLOntologies on the Semantic Web: the Nat-uralOWL SystemXiantang Sun and Chris Mellish 2006.
Domain Inde-pendent Sentence Generation from RDF Represen-tations for the Semantic WebDaniel Hewlett and Aditya Kalyanpur and VladimirKolovski and Christian Halaschek-Wiener 2005.Effective NL Paraphrasing of Ontologies on the Se-mantic Web.Ehud Reiter and Robert Dale 2000.
Building naturallanguage generation systems.
Cambridge Press.Bateman, J.
A.
1997.
Enabling technology for mul-tilingual natural language generation: the KPMLdevelopment environment Journal of Natural Lan-guage Engineering 3(1)109
