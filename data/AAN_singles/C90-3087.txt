CORPUS WORK WITH PC BETAA PresentationBenny Brodda,University of StockholmDept.
for Comp.
LingS-106 91 Stockholm, Swedenbenny@com.qz.se0.
Abstract.PC Beta is a PC oriented tool for corpus workin this term's broadest possible sense.
WithPC Beta one can prepare texts for corpuswork, e.g.
standardize texts in different ways(very important when texts from differentsources together will constitute a corpus), onecan process texts, and one can analyze texts.Making ordinary concordances and similarthings with PC Beta is, of course, very simple,and, in fact, PC Beta give, s "concordancemaking" a new dimension.
One can performmorphological nalyses, one can use PC Betaas a "tagger", i.e.
provide the words withdifferent kinds of tags.
In all, PC Beta is aversatile program, and it is in many cases theonly program needed (together with func-tions belonging to the MS/PC-DOS operativesystem) for pursuing a complete corpus pro-ject.The program's main distinctive feature issimplicity: it is rule controlled, and the rulesadhere to a format that any linguist can learnto understand very quickly.
But beware, inspite of its innocent appearence the programi,; a little tiger..
The Programming System1.1 Background.PC Beta ihas its origin in a program calledBeta, which the author developed uring theyears 1974-78.
Beta was then specificallytied to a trade mark management project, inwhich it was used for morpho/phonologicalparsing of trade marks at the word level.
Betawas then optimized for surface-orientedanalysis and processing, and it turned out tobe useful for morpho/phonological p rsing ofthat type for "ordinary" language as well (cf.Brodda & Karlsson, 1981, and K~illgren,1982).
Even if experience has shown that Betacan be used for much more advanced types ofanalyses (of.
Brodda, 1983, Kfillgren, 1984a,Kfillgren, 1984b and Brodda, 1988), it is stillin surface oriented analysis (not necessarilyconfined to the word level) that its virtuesbecome most apparent, although it may beused also for traditional parsing, traditionalmorphological nalysis, etc.During the years 1980-88 furtherdevelopment of the program was done oll aDEC 10 computer, and a version calledBetaText eventually emerged, which hadseveral features pecifically aimed at facilitat-ing "corpus work", i.e.
the processing and/oranalysis of text corpora of the Brown, Lon-don-Oslo-Bergen, l.xmdon-Lund types (cf.Erman, 1987, and Brodda, 1988).
It is ex-periences with BetaText hat lie behind thedevelopment ofPC Beta (cf.
Malkior & Carl-vik, 1990).One very important feature of PC Beta isthat it takes ordinary text files as input andyields ordinary text files as output; PC Beta isa text processing system, not a database sys~tern.
When you work with PC Beta, 1 Mb textrequires 1Mb disk space.
This means that onecan work with quite susbstantial text corporaon a standard PC/XT or AT with 20Mb disk,and still have space for auxiliary programs,sorting etc.
; PC Beta itself and its auxiliary1 405files takes less than 35kb of diskspace, andrule files are typically only a few kb each,although they may presently be as large as 50kb.Now a few words on hardware require-ments.
The version of PC Beta presented herewill run on any IBM/PC compatible com-puter, and, in fact, there is astonishingly muchyou can do with PC Beta on an ordinary PCwith only two floppy disks.
Working with ahard disk is, of course, easier, and is necessaryif you need to work with larger texts than250kb or so.
PC Beta becomes more "snappy"if you have a PC with a 286 processor, not tomention one with a 386 processor.During the spring of 1990 we will have aMacintosh version ready, to begin with onlyas a direct transfer from the PC version (bysimply recolnpiling the source code on aMac), but later we hope to get a "real" MAC-Beta, a version that will be programmed morein the Macintosh fashion.1.2.
What is PC Beta?Technically speaking, PC Beta is a straightfor-ward production system in the sense ofRosner, 1983.
Whenever PC Beta is used, itsactions are completely controlled by a set ofrules, so called productions, which the usersupplies (a production is, in short, a rewriterule which may be more complex than rewriterules of the type linguists are used to; cf.
e.g.Smullyan, 1961;).
"Completely" means hereexactly what it says; there are practically nobuilt in actions in the program and the userhas full control over what the program shoulddo with the text it processes.
Furthermore, therules conform to a format hat any linguist canlearn to under stand and write in quite a shorttime, thus making himself his own comput-ational inguist.Before describing the rules and their func-tions, let me mention briefly that when de-signing the Beta rule format, I had the follow-ing goal in mind: simple things should besimple to do, but one should also have thepossibility to do complex things when the ap-plication so demands.
There are numerousexamples of rule systems (a "rule system" =the actual rules plus accompanying decla-rations and specifications) that are almost rid-iculously simple.
A rule system, for instance,for producing aKWIC concordance of all thewords in an arbitrary text requires in principleone rule only (plus a few specifications of theinput and output formats).
A rule system forrinsing a text from control characters can evenbe of length zero.
A rule system for addingline numbers to a text needs only one speci-fication of the type "NUM = 5", informing theprogram that a line number field (of widthfive in this case) is to be added in front of everyrecord in the output file.
One can learn towrite rule systems for simple tasks like theones mentioned in a few hours.
But using PCBeta is like playing chess, one can learn therules of the game in a couple of hours, andwith some experience one can become quitea good at it, but it still takes a lot of experienceand imagination to become a master.Fortunately, every new user of PC Betadoes not have to "invent the wheel".
In thecourse of time quite substantial experience inusing the program has been made.
"Brodda(1990)", referred to several times in this ar-ticle is, in fact, a straightforward "com-pendium", exclusively dedicated to the use ofPC Beta in corpus work and will containdetailed escriptions of a host of rule systems,all useful in practical corpus work activities.
Itwill also provide a lot of hints on what one hasto think about when pursuing a corpus pro-ject, both in general and with PC Beta specifi-cally.1.3.
How does the program work?The computational setup in PC Beta is thefollowing: PC Beta reads one record (cf.
sec-tion 4, below) at a time from the given inputfile and places it in an internal workingstorage, WS.
An internal state variable isgiven an initial value = 1 and a cursor is -metaphorically - placed at the leftmost endof WS./ks long as no rule is applicable at thecurrent position of the cursor, this is movedrightwards one step at a time until, eventually,an applicable rule is found.
If this happens,the rule is applied (the content of WS ischanged, for instance), upon which the cursoris moved to a position defined by that rule.From there new applicable rules are searchedfor, until - hopefully - the cursor moves406 2outside WS to the right, and the processing ofthe current record is over.
The current con-tent of WS is then sent to the chosen outputchannel and a new record is brought in fromthe input file, and so on until the input file isis emptied.The rule file that controls the actions ofPC Beta contains primarily the rules them-selves, but also some necessary declarations,essentially definitions of various state andcharacter sets, and for mat descriptions, uchas information about whether there is a lineheader field in the input file and, if so, howwide it is.
("Line header" a "line ID" in line-initial position; cf.
section 2.1).
The main partis, of course, contained in the rules section ofthe program, and I shall now proceed to de-scribe briefly how PC Beta rules are con-structed.Theoretically - in practice they lookdifferently - a PC Beta rule is a 7-tuple:(1) < Observed string, Contextcondition(s), State condition,Resulting string, Resulting state,Move, Resulting actions >The first three elements in (1) define ruleconditions: "Observed string" must be an ex-plicitely given string (cf.
section 5) and thecondition is fulfilled if an instance of "Ob-served string" is found at the current positionof the cursor.
"Context condition" breaksdown to two subconditions, one left contextcondition (of the ob served string) and oneright context condition (of the same string).
"State condition" is a condition on the inter-nal state.
The last four elements in (1) abovedefine what happens when the rule conditions are fulfilled.
"Resulting string" is astring that replaces (the instance of) the ob-served sting in WS.
"Resulting state" definesthe new value of the internal state.
"Move" isa directive of where in WS to put the cursorafter the application of the rule.
This positionis typically defined relative to the newly in-serted "resul ring string", but the cursor mayalso be directed to other places in the stringunder processing.The component "Resulting actions" in (1)is extremely important in corpus work appli-cations.
In PC Beta there is a possibility todefine specific sets of states with reservednames, and a specific action is tied to eachsuch set; whenever the internal state happensto become a member of such a set, the corre-sponding action is in voked.
Such internalstates are collectively referred to as "actionstates" (cf.
Brodda, 1988).
Now, some of theactions that can be invoked in this way aretypical "things" one wants to do in typicalcorpus applications: move an observed stringout to a KWOC-field, print the current recordwhen something interesting has been found-- this is excerption - and perhaps formatthe output in such a way that the position ofthe cursor always appears in a predefinedprint position - this is how KWIC concor-dances are obtained - and so on.Before leaving this topic I think there is atheoretical point calling for a remark here.
Asanybody with some minimum knowledge ofmathematical linguistics can see, the rule for-mat (1) is a kind of generalization of Turingmachine rules, which implies that the PC Betaprogramming system in principle is a generalTuring machine.
Thus, it is a trivial con-sequence that with PC Beta one can achievewhatever text warping one can ever dream up.There is no other limit than imagination andcomputer space.
Thus, when I claim that onecan do complex things with PC Beta it is, sortof, a very trivial remark.What I mean is that one can do quite manythings, some rather complex, under the head-ing "Computational Linguistics" in a naturalway.
The rule format (as well as the wholesetup) is tuned to be efficient for typical appliocations in that area, and with special attentionto surface oriented analysis.
This format hasbeen arrived at after years of experimentingand actual testing in true situations; in win-ciple I began with a system that was muchmore ambitiuos than the present and then Iprimarily sacrified features that turned out tobe unnecessary and/or never used.
Someother features have been modified and a fewother added (but very conservatively).
Whatis left is a kind of basic tool for computationallinguistics.3 4071.4.
What is a record?As mentioned above, PC Beta is record-oriented: it reads in and processes one recordat a time.
Now, what is a re cord?
In computerconnections text lines usually constitute thebasic physical records when a text isprocessed, but, with the exception of poetry,text lines do not constitute very natural in-guistic units, and therefore one has to havemeans to overrule this default record defini-tion.
In PC Beta we have adopted a simple,yet very effective, way to accomplish this.
Thelogical records one can define are typicallywords, sentences or paragraphs; largerchunks than normal paragraphs can usuallynot be kept in the working storage of thepresent version of PC Beta.
(The limit isaround 3500 characters.
)When line headers are present, each re-cord is associated with the line header of theline where the record begins, and this lineheader is then the one that usually appearswhen the record is output.As I mentioned earlier, the internal stateis by default reset o 1 whenever a new recordis brought into WS.
This implies that eachlogical record is processed as if in isolation.This default is, how ever, easily overruled, andthen the value of the internal state is kept asit was from the preceding record, when a newrecord is brought in.
In some sense, PC Betaconsiders the whole text as one logical recordwhen run in this mode.1.5.
More on PC Beta rules.In section 3, above, I described PC Beta rulesfrom an abstract point of view.
Now, PC Betarules are not abstract entities, they are veryconcrete: they contain an ordinary rewritecomponent of the type "X - Y" where X andY denote strings ("X is rewritten as Y"), andthese strings must be explicit.
Thus, an allegedphonological rule of the type: "V -+ (back)/..." ismeaningless unless the symbol"V" itself (and not only objects classified as"V"s) appears in the text.
Furthermore, inthiscase a letter V appearing in the right environ-ments is simply rewritten as the string"+ (back)", which perhaps is not exactly whata phonological rule of the type mentionedwould mean.The "concretism" isnot a shortcoming ofPC Beta, it is a deliberately chosen feature.One reason for this choice is that all suchbuilt-in properties delimit generality (other-wise: which action is the program supposed totake if you actually want to rewrite "V" as"+ (back)"?).
Another eason is efficiency: ifthe program in all situations has to checkwhether the user actually means what a rulesays, or whether there is an implicit categoryinvolved that is going to be changed in someabstract way, then it will take time.
A third-and the main -  reason is that I am per-sonally a concrete linguist, I simply think thatrules in linguistics hould be concrete as far aspossible.Of course I have to admit that there areinstances when it would be conver6ent torefer to, say, any vowel simply as "V" in the rewrite part of a rule.
Are there ways to achievethis in PC Beta?
Yes, there are.
In Brodda &Karlsson 1981 it is shown that such abstractions are easily taken care of by meta rules,Beta-rules that expand abstract categorieslike the ones mentioned and also modify rulesin other ways.
A slightly more complex ex-ample of this type will be described below(section 2.3).1.6.
Rule conditions and the internalstate.Each rule contains two context conditions,one for the left context and one for tile rightcontext, plus one condition on the currentinternal state.
All these three conditions areevaluated in a similar way, and all three mustbe fulfilled for the rule to be applicable; asuperordinate condition is, of course, that the"observed string" actually is located at thecurrent position of the cursor.The context and state conditions appear inthe rules as the names of three sets, two char-acter sets and one "state" set.
The contextconditions are fulfilled if the character to theleft of (the in stance of) the observed stringbelongs to the set denoted by the left-contextcondition, and, similarly, the character to theright of the observed string belongs to the setdenoted by the right-context condition, thesesets being defined under the heading CHAR-SET ("character sets") in the actual rule file.408 4The internal state, IS, is an internal variablethat can take arbitrary positive integers asvalues.
The internal state is intitialized to 1when the processing begins, and usually againwhen a new record is brought into the workingstorage.
From there on the internal state issuccessively updated through the applicationsof rules, and by having a condition on thisinternal state in each rule one can achievelogical chaining of whole sets of rules.Roughly one can say that the context condi-tions take care of the immediate environmentwhereas the internal state condition embo-dies more abstract and arbitrarily complexconditions on the structure in which the ob-served string appears.The state condition in a rule is again justa name, now referring to a set of positiveintegers (i.e.
possible states) defined underthe heading STATESET ("state sets") in therule file, and the condition is fulfilled if thecurrent internal state is a member of that set.To understand this way of evaluating stateconditions i  the whole key to understandingPC Beta programming.A critic may wonder why we do not allowmore complex (near) context conditions thanjust conditions on the immediate l ft and rightcharacters.
The reason is efficiency.
Testing acharacter for membership n a character set(or a state for membership n a state set) isdone in a very fast and simple way, whereastesting astring for membership in a string setv:equires ome sort of lexicon lookup proce-dure, which is, generally speaking, a compara-tively more complex operation.
- OK, but if arule actually requires specific strings in itscontext conditions, how do you handle that?L_ Simple, move the cursor around a little andestablish the context conditions as specificchanges in the internal state via the applica-tions of rules.- But isn't that just a makeshift?Don't you need lexicon lookups for estab-lishing certain contexts as "observed strings"?Undoubtedly there is a point there, so in thenext release of PC Beta (due to appear, abouta year or st) from now) we will probably allowa third heading, STRINGSET, under whicharbitrary sets of strings may be defined, thename of which may then be used as left orright hand conditions in rules as alternativesto character conditions.
The reason why thisis not implemented already is, primarily, thatin most cases character contexts are perfectlysufficient, and, besides, it is not entirely clearto us what conventions this string set featureshould follow in all details, technically ortheoretically; it will take some experimentingto decide that.REFERENCESBrodda, B.
& Karlsson, F. "An Experiment with Auto-matic Morphological Analysis of Finnish", PubLNo.
7, Department of Linguistics, University ofHelsinki, 1981.Brodda,B.
"Problems with tagging - and a solution",Nord.
Journal of Linguistics, 5, 1982, pp.
93-116.Brodda, B.
"An Experiment with Heuristic Parsing ofSwedish" in Karlsson, F.
(ed.)
Papers from the 7thScandinavian Conference ofLinguistics, Universityof Helsinld, 1983.Brodda,B.
"Tracing Turns in the London-Lund Corpuswith BetaText" in Literary and Linguistic Comput-ing, Vol.
3, No.
2, 1988.Brodda,B.
"Corpus Work with PC Beta", Inst.
of Linguis-tics, University of Stockholm, 1990, forthcoming.Erman,B.
"Pragmatic Expressions in English" (disser-tation), Stockholm Studies in English, Acta Univ.Stockholmiensis, 1987.Kiillgren,G.
"FINVX - a System for the Bakwards Ap-plication of Finnish Consonant Gradation Rules",P1LUS No.
42, Inst.
of Linguistics, University ofStockholm, 1982.K/illgren,G.
"Automatisk Excerpering av substantiv ur16pande text", IRI-rapport 1984.
'1, Inst.
f6r Riittsin-formatik, University of Stockholm, 1984(a).Khllgren,G.
"HP, a Heuristic Finite State Parser basedon Morphology", in Shgvall-Hein (ed.)
"De Nord.Datalingvistikdagama 1983", Uppsala University,Uppsala, 1984(b).Malkior, S. & Carlvik, M. PC Beta Reference.
Instituteof Linguistics, University of Stockholm, 1990.Rosner,M.
"Production Systems" in "Parsing NaturalLanguages", M. King (ed.
), Academic Press, 1983Smullyan, R.M.
"Theory of Formal Systems", Annals ofMath.
Studies, New York, 1961.5 409
