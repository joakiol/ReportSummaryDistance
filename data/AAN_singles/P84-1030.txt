 O B L E M  LOCALIZATION STRATEGIESFOR PRAGMATI~S ~ IN NATURAL-LANGUAGE FRONT ENDS?Lance A. Remshaw & Ralph ~L WelschedelDepartment of Ccaputer and Information SciencesUnivers i ty  of DelawareNewark, Delaware 19716 USAABSTRACTProblem localization Is the identification ofthe most slgnlflcant failures i n  the AND-OR treeresulting from an unsuocass/ul attempt to achieve agoal, for instance, In planning, backward-chnin inginference, or top-down parnin~ We examine beurls-tics and strategies for problem localization in thecontext of using a planner to check for pragmaticfailures in natural language input to computer sys-tems, such as a cooperative natural languageinterface to Unix ??
.
Our heuristics call forselecting the most hopeful branch at ORs, but themost problematic one at ANDs.
Surprise scores andspeclal-purpose rules are the maln strategies sug-gested to determine this.I PRAGMATIC OVERSHOOT AND PRCBLEM LOCALIZATIONEven if the syntactic and semantic content ofa request is correct, so that a natural languagefront end can derive s coherent representation ofits meaning, its praamatlc content or the structureof the underlying system may make aSy directresponse to the request impossible or mlsleadln~According to Sondbelmer end Welschedel (Sondhelmer,1980), an input  exh ib i t s  ~ ~ I f  therepresentat ion  of  i t s  meaning i s  beyond the  capa-b i l i t i es  of  the under ly ing  system.
Kaplan (1979),Mays (1980e),  and Carberry (1984) have each workedon strategies for dealing wltb particular classesof such praamatlc failures.
This paper addressesthe problem of identifying the most si~ctflcantreason that a plan to achieve a user goal cannot becarried out.The approach to pragmatic fnilure taken Inthls paper is to use a planner to verify thepresumptions in a request.
The presumptions behinda request become the subEoals of e plan to fulfillthe request.
Oslng Mays' (1980a) example, thequery "Which faculty members take coursas?"
Is herehandled as an instance of an IDENTIFY -SET-~EHS?
This material Is based upon work supported bythe National Sclence Foundation under grantsLST-8009673 and IST-8311~00.?
?
Unix is a trademark of Bell Laboratories.goal, and the pragmatlcs of the query are checkedby looklng for a plan to ach ieve  that goal.
Deter-mining both that faculty members and courses doexist and that faculty members can take courses aresubEoals within that plan.
A presuppositlonalfailure is noted if the planner is unable to com-plete a p lan fo r  the goal.Furthermore,  ?r~formation fo r  recovery process -ing  or exp leaatory  responses  can be der ivedd i rec t ly  from the fn i led  p lan by ident i fy ing  what-ever  blocked goal in  the  p lann ing  t ree  of subgoalsI s  most n ign i f~cant .
Thus, in  the example above,i f  the p lanner  fa i led  because I t  was unable to showthat  facu l ty  can take courses ,  the  he lp fu l  responsewould be to exp la in  this presumption failure.
Weconcentrate here on identifying the signifleantblocks rather than on generating natural languageresponses.The examples in this paper will be drawn froma pleaning System intended to function as the prag-matic overshoot component of a cooperative naturallanguage in ter face  to  the Unix operat ing  system.We chose Unix, much as Wilensky (1982) did for hisUnix Consultant, as a fomiliar domain that wasstill complex enough to require interesting plan-ning~ In this system, the praRmatics of a userrequest are tested by building a tree of planstructures whose leaves are elementary facts avail-able to the operating system.
For instance, thefollowing planning tree Is built in response to therequest to print a file:(PRINT-FILE ?user ?file ?device)& (IS-TEXT-FILE ?file)& (UP-AND-RUNNING ?device)& (READ-PERM ?user ?file)I (WORLD-READ-PERM-BIT-SET ?file)I (READ-PERM-USER ?user ?file)& (IS-O~NER ?user ?file)& (USER-READ-PERM-BIT-SET ?
f i le ) "\[ (READ-PERM-GROUP ?user  ?file)& (SA~-GROUP ?user ?file)& (OROUP-REAI>-PERM-BIT-SET ?file)I (READ-PERM-SUPER-USER ?user)& (AUTHORIZED-SUPER-USER ?user)& (SUPEH-USER-PASSWORD-GIV~ ?user)(The ch i ld ren  of  AND nodes are  preceded by amper-sands,  and OR ch i ld ren  by ver t i ca l  bars .
In i t ia lquest ion  marks precede p lea  var iab les . )
I f  a s ing ienode In thls planning tree fails, say (IS-TEXT-FILE?f i le) ,  that Information can be used In explniningthe failure to the user.139The failure of certain nodes could alsotrigger recovery processing, as in the followingexample, where the failure of (UP-AND-RUNNING?device) triggers the suggestion of an alternativedevice:User: Please send the file to the laser printer.System: The laser printer is dowmIs the line printer satisfactory?This planning scheme offers a way of recognizingand responding to such temporarily unfulfillablerequests as well as to other pragmatic failuresfrom requests unfulfillable in context, which is animportant, though largely untouched, problem.A difficulty arises, however, when more thanone of the planning tree precondition nodes fail.Even in a tree that was entirely made up of ANDnodes, multiple failures would require either allst of responses, or else scme way of choosingwhich of the failures is most meaningful to report.In a plan tree containing OR nodes, where there areoften many alternative ways that have all failed ofachieving particular goals, it becomes even moreimportant that the system be able to identify whichof the failures is most significant.
This processof identifying the significant failures is called"problem localization", and this paper describesheuristics and strategies that can be used forproblem localization in failed planning trees.II HEURISTICS FOR PROBLEM LOCALIZATIONThe basic heuristics for problem localizationcan be derived by considering how a human expertwould respond to someone who was pursuing an impos-aible goal.
Hot finding any suosessful plan, theexpert tries to explain the block by showing thatevery plan must fail.
Thus, if more than onebranch of an AND node in a plan fails, the mostsignificant one to be reported is the one that theuser is least likely to  be able to change, since itmakes the strongest case.
(The planner must checkall the branches of an AND node, even after onefails, to know which is most significant toreport.)
For instance, if all three of the childrenof PRINT-FILE in our example fail, (I~-TEXT-FILE?file) is the one that should be reported, since itis least llkely that the user can affect that node.If the READ-PERM failure were reported first, theuser would waste time changing the read permissionof a non-text file.
Unix's actual behavior, whichreports the first problem that it happens to dis-cover in trying to execute the co@mend, is oftenfrustrating for exactly that reason.
This heuris-tic of reporting the most serious failure at an ANDnode is closely related to ABSTRIP's use of "crltl-callty" numbers to divide a planner into levels ofabstraction, so that the most critical features aredealt with first (Sacerdoti, 1974).The s i tuat ion  i s  d i f fe rent  a t  OR nodes,  whereon ly  a s ing le  ch i ld  has  to  sueseed.
Here the  mostser ious  fa i lu re  can sa fe ly  be ignored ,  as  long  assome other  branch can be repa i re~ Thus the  mostsi~if lcant branch at an OR node should be the onethe user is most likely to be able to affect.
In?
our  example, READ-PERM-USER shou ld  usually bereported rather than READ-PERM-SUPER-USER, if bothhave failed, since most users have more hope ofchanging the former than the letter.
There is aduality here between the AND and OR node heuristicsthat is llke the duality in the minimax evaluationof a move in a game tree, where one picks the bestscore at nodes where the choice is one's own, andthe worst score at nodes where the opponent gets tochoose.III STRATEGIES FOR PR~LEM LOCALIZATIONIdentification of the most significant failurerequires the addition to the planner of knowledgeabout significance to be used in problea loealiza-t io~ Many mechanisms are possible, ranging fromfixed, pre-set ordering of the children of nodes upthrough complex knowledge-based mechanlqms thatinclude knowledge about the user,s probable goals.In this paper, we suggest a combination of statist-Ical "surprise scores" and speclal-purpose rules.Statistical ~Us ln ISuror i se  ScoresThis strategy relies on statistics that thesystem keeps dynamically onthe  number of timesthat each branch of each plan has succeeded orfailed.
These are used to define a success ratiofor each branch.
For example, the PRINT-FILE planmight be annotated as follows:SUCCESSES RATIO(PRINT-FILE ?user ?file ?device)& (IS-TEXT-FILE ?file) 235 3 0.99& (UP-AND-RUNNING ?dev ice)  185 53 0.78& (READ-PERM ?user ?file) 228 10 0.96FAILURESFrom these ratios, we derive surprise scoresto provide some measure of how usual or unusual iti s  fo r  a par t i cu la r  node to  have succeeded orfailed in the context of the goal giving rise tothe node.
The surprise score of a successful nodeis defined as 1.0 minus the success ratio, so thatthe success of a node llke I~-TEXT-FILE, thatalmost always succeeds, is less surprising than thesuccess of UP-AND-RUNNING.
Failed nodes get nega-tive surprise scores, with the absolute value ofthe score again reflecting the amount of surprise.The surprise score of a failed node is set to thenegative of the success ratio, so that the failureof IE-TEXT-FILE would be more surprising than thatof UP-AND-RUNNING, and that would be reflected by amore strongly negative score.Here is an example of our PRINT-FILE planinstantiated for an unlucky user who has failed onall but two preconditions, with surprise scoresadded:140SURPRISESUCCESS/FAILURE SCORE(PR~T-FILE Ann Filel laser)& (IS-TEXT-FIIE Filel) -.99& (UP-AND-RUNNING laser) -.78& (READ-PERM Ann Filel) -.96I (WORLD-READ-PERF,-BIT-SET Filel) -.02\] (READ-PERM-USER Ann Filel) -.87& (IS-0WNER Ann Fllel) -.87& (USER-READ-PERM-BIT-SET Fllel) +.01J (READ-PERF,-GROUP Ann Filel) -.55& (SA~-GROUP Ann Filel) +.05-.58I -.02-.03-.02FFFFFFSFS& (GROUP-READ-PERM-BIT-SET Filel) F(BEAD-PERF~SUPER-USER Ann) F& (AUTHORIZED-SUPER-USER Ann) F& (SUPER-USER-PASSWORD-GIVEN Ann) FNote tbat the success of USER-READ-PERM-BIT-SET isnot very surprising, s ince  that node almost alwayssucceeds; the failure of a node llke READ-PERM-SUPER-USER, which seldom succeeds, is much lesssurprising than the failure of UP-AND-RUNNING.We suggest keeping statistics and derivingsurprise scores because we believe that they pro-vide a useful if imperfect handle on judging thesignlflcence cf failed nodes.
Regarding OR nodes,strongly negative surprise scores identify branchesthat in the past experience of the system have usu-ally succeeded, and these are the best guesses tobe likely to succeed again.
Thus READ-PERM-USER,the child of READ-PERM with the most strongly nega-tive score, turns out to be the most likely to betractable.
The negatlve surprise scores at afailed OR node give a profile of the typical suc-cess ratios; to select the nodes that are generallymost likely to succeed, we pick the most surprisingfailures, those with the most strongly negatlvesurprise scores.At AND nodes, on the other hand, the goal isto identify the branch that is most critical, thatis, least likely to succeed.
Surprisingly, we findthat the most critical branch tends in thls casealso to be the most surprlalng failure.
In ourexample, IS-TEXT-FILE, which the user can do noth-ing about, is the most surprising failure underPRINT-FILE, READ-PERM is next most surprising, andUP-AND-RUNNING, for which simply waiting oftenworks, comes last.
Therefore at AND nodes, llke atOR nodes, we will report the child wlth the mostnegative surprise score; at AND nodes, this tendsto identify the most critical failures, while at ORnodes, it tends to select the most hopeful.
Notethat the combined effect of the AND and OR stra-tegies is to choose from among all the failed nodesthose that were statistically most likely tosucceed.The main advantage of the statistical surprisescore strategy is its low cost, both to design andexecute.
Another nice feature is the self-adjusting character of the surprise scores, basedas they are on success statistics that the systemupdates on an onEolng basis.
For example, thelikelihood of GROUP-READ-PERM being reported woulddepend on how often that feature was used at a par-tlcular site.
The main difficulty is that surprisescores are only a rough guide to the actual siEnl-ficance of a failed node.
The true significance ofa failure in the context of a particular commandmay depend on world knowledge that is beyond thegrasp of the planning system (e.~, the laserprinter is down for days this time rather thanhours), or even on a part of the planning contextitself that is not reflected in the statisticalaverages (e.~, READ-PERM-SUPER-USER is much morelikely to succeed when READ-PERM is called as partof  a system d,-,p ceamand than when it is called aspart of PRINT-FILE).
To get a more accurate graspon the significance of particular failures, moreknowledge-intenslve strategies must be employed.~.
Svecial-Purnose Problem Localization RulesAs a mechanism for adding extra knowledge, wepropose supplementing the surprise scores withconditlon-action rules attached to particular nodesin the planning tree.
The cendltlons in theserules can test the success or failure of othernodes in the tree or determine the hi~er-levelplanning context, while the actions alter the prob-lem localization result by changing the surprisescores attached to the nodes.The speclal-purpose rules which we have founduseful so far add information about the criticalityof particular nodes.
Consider the following plan-a ing  tree, which is somewhat more successful thanthe previous one:SURPRISESUCCESS/FAILURE SCORE(PRINT-FILE Ann File2 laser)& (IS-TEXT-FILE Flle2) S& (UP-AND-RUNNING laser) S& (READ-PERM Ann Flle2) FI (WORLD-READ-PERM-BIT-SET Flle2) F\] (READ-PERM-USER Ann File2) F& (IS-OWNER Ann File2) F& (USER-REAI~PERM-BIT-SET File2) 3I (READ-PERM-GROUP Ann Flle2) F& (SA~.-GROUP Ann Flle2) S& (GRODP-READ-PERM-BIT-SET Flle2) FI (READ-PERM-~PER-USER Ann) F& (AUTHORIZED-S~PER-USER Ann) S& (SUPER-USER-PASSWORD-GIVEN Ann) F+.01?.22- .
96- .02- .
87- .
87?.01- .55?.05- .58- .02+.
97-.02Relying on surprise scores alone, the most signifi-cant child of READ-PERM would be READ-PERM-USER,since its score is most strongly negative.
How-ever, since IS-OWNER has failed, a node which mostusers are powerless to change, it is clearly nothelpful to choose READ-PERM-USER as the path toreport.
This is an example of the general rule thatif we know that one child of an AND node is critl-cal, we should include a rule to suppress that ANDnode whenever that child fails.
Thus we attach thefollowln8 rule to READ-PENM-USER:IF (FAILED-CHILD (IS-OWNER ?user ?file))TH~ (SUPPRESS-SCORE 0.8)In our current formulation, the numeric argument toSUPPRESS-SCORE gives the factor (i.e., percentage)141by which the score  should  be reduced.
The- ru le ' sa f fec t  i s  to  change READ-PERM-USER's score  to - .17 ,which prevents it from being selected.With READ-PERM-USER suppressed, the surprisescores would then select READ-PERM-GROUP, which isa reasonab le  choice,  but probably not the  best  one.While the failure of IS-~NER makes us lessinterested in READ-PERM-USER, the very surprisingsuccess of AUTHORIZED-SUPER-USER should draw thesystem's a t tent ion  to  the READ-PERM-SUPER-USERbranch.
We can arrange for this by attaching toREAD-PERM-SUPER-USER a ru le  that  s ta tes :IF ( ~CCESSFUL-CHILD( AUTH 0RIZ ED--qU PER-USER ?user))THEN (ENHANCE-SCORE 0.8)This rule would change READ-PERM-SUPER-USER's scorefrom -.02 to -.79, and thus cause it to be thebranch of  READ-PEBM selected for reportln~While our current rules are ell in these twoforms, either suppressing or enhancing a parent'sscore on the basis of a critical child's failure orsuccess, the mechanlam of special-purpose rulescould be expanded to handle more complex forms ofdeduction.
For example, it mlght be useful to addrules that calculate a criticality score for eachnode, working upward frem preassigned scoresassigned to the leaves.
If the rules could accessinformation about the state of the system, theycould also use that in Judging criticality, so thatan UP-AND-RUNNING failure would be more critical Ifthe device was expected to be down for a long time.OtheF Problem Loca l i za t ionWhile our System depends on surprise scoresand rules, an entire range of strategies is possi-ble.
The s imp les t  s t ra tegy  would be to  hand-codethe problam localization into the plans themselvesby the ordering of the branches.
At AND nodes, thechildren that are more critical would be listedfirst, while at OR nodes, the lees critical, morehopeful, children would come first.
In such ablocked tree, the first failed child could bese lec ted  below each node.
A form of  this hand-coded strategy is in  force in a~y planner thatstops exploring an AND node when a single childb locks ;  that  e f fec t ive ly  se lec ts  the  f i r s t  ch i ldtes ted  as  the  s ign i f i cant  fa i lu re  in  every case ,s ince  the o thers  a re  not even explored.
Hand-coding is an alternative to surprise scores forproviding an initial comparative ranking of thechildren at each node, but it also would need sup-plementingwlth a strategy that can take account ofunusual situations, such as our specisi-purposerules.It might be possible to improve the parfor~-mance of a surprise score System without adding thecomplexity of special-purpose rules by using a for-mula that  allows the surprising success or failureof a child to Inarease or decrease the chances o?i t s  parent  be ing  repor ted .
While such a fo rmulacould perhaps  do much of the  work now done byspec ia l -purpose  ru les ,  i t  seams a harder  approachto  cont ro l ,  and one more l i ke ly  to  be sens i t i ve  toinaccurac ies  in  the  surpr i se  scores  themse lves .Proper Level  p..~Deta.4.1One f ina l  quest ion  concerns  ident i fy ing  theproper  leve l  of deta i l  fo r  he lp fu l  responses .
Thes t ra teg ies  d i scussed  so fa r  have a l l  focused  onchoos ing  which of  mu l t ip le  b locked ch i ld ren  torepor t ,  so that  they ident i fy  a path frem the  rootto  a lea f .
Yet the  leaves  of  the  p lann ing  t ree  maywel l  be too deta i led  to  represent  he lp fu lresponses .
A se lec t ion  s t ra tegy  could repor t  thenode conta in ing  the  appropr ia te  leve l  of deta i l  fo ra g iven  user .
Model ing the  exper t i se  o?
a user  andus ing  that  to se lec t  an appropr ia te  descr ip t ion  ofthe  problem are  s ign i f i cant  problems in  natura l?
language generat ion  which we have not addressed.IV RELATED APPLICATION ARE~While developed here  in  the  context  of  a p rag-mat ice  p lanner ,  s t ra teg ies  fo r  problem loca l i za t ioncould have wide app l i cab i l i ty .
For ins tance ,  theMYCIN-llke "How?"
and "why?"
questions (Shortllffe,1976) used in the explanation components of manyexpert systems already use either the already-builtsuccess fu l  proof  t ree  or the  por t ion  cur rent lybe ing  exp lo red  as  a source of  exp lanat ion~ Swat-tout  (1983) adds ext ra  knowledge that  a l lows  thesystem to  Jus t i fy  i t s  answers in  the  user ' s  te rms ,but the  user  must s t i l l  d i rec t  the  exp lo ra t ion .
Ane f fec t ive  problem loca l i za t ion  fac i l i ty  would al lowthe  System to answer the quest ion  "Why not?e ;  thati s ,  the  user  could ask why a cer ta in  goal  was notsubstant ia ted ,  and the  System would rep ly  by iden-t i f y ing  the  surpr i s ing  nodes that  a re  l i ke ly  to  bethe slgnlflcant causes of the failure.
Such "Whynot?
n questions could be useful not only in expla-nation but also in debugEin~/In the same way, since the execution of a PRO-LCQ progr-m can be seen as the exploration of andAND-OR tree, effective problem localization tech-niques could be use fu l  in  debugging the fa i ledt rees  that  resu l t  frem incor rec t  log ic  programs.Another example is recovery processing intop-down paralng, such as using au~nented transi-tion networks (Woods, 1970).
When an ATN fails toparse a sentence, the blocked parse tree is quitesimilar to a blocked planning tree.
Weischedel(1983) suEaests an approach to understanding ill-formed input that makes use of meta-rules to relaxsome of' the constraints on ATN arcs that blockedthe original parse.
Recovery processing in thatmodel requires searching the blocked parse tree fornodes to which meta-rules can be applied.
A prob-lem localization strategy could be used to sort the142llst of blocked nodes, so that the most llkely can-didatea would be tested first.
The statistics ofsuccess ratios here would describe likely pathsthrough the grammar.
Nodes that exhibit surprisingfailure would be prime candidates for mets-ruleprocessiag~Before problem lor~al izat ion can be appl ied  inthese  re la ted  areas ,  fu r ther  work needs to  be doneto  see how many of the heur i s t i cs  and s t ra teg iesthat  apply to problem loca l i za t ion  in  the p lanningcontext  can be car r ied  over.
The la rger  and morecomplex trees of an ATN or PROLO~.
program may wellrequire development of further strategies.
Ho~-ever, the nature of the problem is such that evenan imperfect result is likely to be useful.V IMPLEMENTATION DE~CRIPTIONThe examples in  th i s  paper are taken frem anIn ter l i sp  implementat ion of  a p lanner  which doesprs~at ics  checking fo r  a l im i ted  set  of Unix-do,  s in  requests .
The problem loca l i za t ion  c~-ponent uses a combination of surprise scores andspecial purpose rules, as desoA'ibed.
The statis-tics were derived by running the planner on a testset of commands in a simulated Unix environment.VI CONCLUSIONSIn planning-based pra~matlcs processing, prob-lem localization addresses the largely untouchedproblem of prov id ing he lp fu l  responses to  requestsunfulfillable in  context .
Problem loca l i za t ion  inthe planning context requires identifying the mosthopeful and t rac tab le  choice at  OR nodes, but themost c r i t i ca l  and prob lemat ic  one at  AND nodes.S ta t i s t i ca l  surpr i se  scores  provide a cheap bute f fec t ive  base s t ra tegy  for  problem loca l i za t ion ,and cond i t ion -act ion  ru les  are an appropr ia temechanism for adding further sophistlcatio~Fur ther  work should address  (1) app ly ingrecovery s t ra teg ies  to the loca l i zed  problem, i fany recovery i s  appropr ia te ;  (2) invest igat ingother applications, such as expert systems,back~ard-chnining inference, and top-down parsing;and (3) exploring natural language generation torepor t  a block at  an appropr ia te  leve l  of  deta i l .VII REFER~ CE -~Carberry,  E $andra.
"Understanding Pragmat ica l lyI l l -Formed Input.
?
~ of  ~he In tern~1984.Kaplan, Samuel J.
~ ~ From aPortable Natural ~ Data ~ase Ouerv System.PbD.
D isser ta t ion ,  Computer and In format ion  Sc i -ence Dept .
,  Un ivers i ty  of Pennsylvania,  1979.Mays, Eric.
"Correcting Misconceptions About DataBase S t ruc ture .  "
~ of the ~ ofthe Canadian Soc iety  fo r  ~ Stud ies  o f~ .
Victoria, British Col,~bla,Canada, May 1980, 123-128.Maya, Eric.
WFailtmes in Natural Language Systems:Applications to  Data Base Query Systems.
?~ of t~e Ltnn~ Ammal  aa~Aonal Conre~ence on ~ ~ (AAA~-~0~.
Stan-ford, Ca l i fo rn ia ,  August 1980, 3~-330.Sacerdot i ,  F~ D. =Planning in  a Hierarchy ofAbst rac t ion  Spaces . "
~ ~(197~l), 115-135.$hortllffe, F. ~ Comvuter Based Medical Cons~t~-~ons:  ~ (North-Holland, 1976).Sondheimer, N. and R. ~t Weischedel.
"A Rule-BasedApproach to I l l -Formed Input.
?
~ o f  the8th ~ ~ on ~~ ,  1 980.Swartout,  Willlam R. " IPLA~: A System for  Creat-ing  and Explaining Expert Consultlng Programs.
?~ 21 (1983), 285-325.Weischedel, Ralph ~ and Norman K.
Sondheimer.?
Meta-Rules as a Basis for ProcessinE Ill-FormedInput.
= AmeriQan Journal o f  .~.Ji~JI.~4ZJ~~ (1983) , to  appear.Wilensk~, Robert.
"Talking to  UNIX in  Eng l i sh :  AnOverview of UC."
~ of the 1982 Nat iona lCo~e~nae of ~ ~ (AA~-~) ,103-106.Woods, Willi am A.
"T rans i t ion  Network Grammarsfo r  Natural  Language Ana lys i s . "
~.dm~g?.i,Q/,,~l~ ofthe ~ 1.~ (Oct. 1970), 591-606.143
