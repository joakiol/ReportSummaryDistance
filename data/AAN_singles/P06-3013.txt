Proceedings of the COLING/ACL 2006 Student Research Workshop, pages 73?78,Sydney, July 2006. c?2006 Association for Computational LinguisticsExtraction of Tree Adjoining Grammars from a Treebank for KoreanJungyeul ParkUFR LinguistiqueLaboratoire de linguistique formelleUniversit?
Paris VII - Denis Diderotjungyeul.park@linguist.jussieu.frAbstractWe present the implementation of a systemwhich extracts not only lexicalized gram-mars but also feature-based lexicalizedgrammars from Korean Sejong Treebank.We report on some practical experimentswhere we extract TAG grammars and treeschemata.
Above all, full-scale syntactictags and well-formed morphological analy-sis in Sejong Treebank allow us to extractsyntactic features.
In addition, we modifyTreebank for extracting lexicalized gram-mars and convert lexicalized grammars intotree schemata to resolve limited lexicalcoverage problem of extracted lexicalizedgrammars.1 IntroductionAn electronic grammar is an interface between thecomplexity and the diversity of natural languageand the regularity and the effectiveness of a lan-guage processing, and it is one of the most impor-tant elements in the natural language processing.Since traditional manual grammar development isa time-consuming and labor-intensive task, manyefforts for automatic and semi-automatic grammardevelopment have been taken during last decades.Automatic grammar development means that asystem extracts a grammar from a Treebank whichhas an implicit Treebank grammar.
The grammarextraction system takes syntactically analyzed sen-tences as an input and produces a target grammar.The extracted grammar would be same as theTreebank grammar or be different depending onthe user?s specific purpose.
The automatically ex-tracted grammar has the advantage of the coher-ence of extracted grammars and the rapidity of itsdevelopment.
However, as it always depends onthe Treebank which the extraction system uses, itscoverage could be limited to the scale of a Tree-bank.
Moreover, the reliable Treebank would behardly found, especially in public domain.Semi-automatic grammar development meansthat a system generates the grammar using the de-scription of the language-specific syntactic (or lin-guistic) variations and its constraints.
A meta-grammar in Candito (1999) and a tree descriptionin Xia (2001) are good examples of a semi-automatic grammar development.
Even usingsemi-automatic grammar development, we needthe good description of linguistic phenomena forspecific language which requires very high levelknowledge of linguistics and the semi-automatically generated grammars would easilyhave an overflow problem.Since we might extract the grammar automati-cally without many efforts if a reliable Treebank isprovided, in this paper we implement a systemwhich extracts a Lexicalized Tree AdjoiningGrammar and a Feature-based Lexicalized TreeAdjoining Grammar from Korean Sejong Treebank(SJTree).
SJTree contains 32,054 eojeols (the unityof segmentation in the Korean sentence), that is,2,526 sentences.
SJTree uses 43 part-of-speechtags and 55 syntactic tags.Even though there are many previous works forextracting grammars from a Treebank, extractingsyntactic features is tried for the first time.
55 full-scale syntactic tags and well-formed morphologi-cal analysis in SJTree allow us to extract syntacticfeatures automatically and to develop FB-LTAG.73First, we briefly present features structureswhich are focused on FB-LTAG and other previ-ous works for extracting a grammar from a Tree-bank.
Then, we explain our grammar extractionscheme and report experimental results.
Finally,we discuss the conclusion.2 Feature structures and previous workson extracting grammars from a Tree-bankA feature structure is a way of representing gram-matical information.
Formally feature structureconsists of a specification of a set of features, eachof which is paired with a particular value (Sag etal., 2003).
In a unification frame, a feature struc-ture is associated with each node in an elementarytree (Vijay-Shanker and Joshi, 1991).
This featurestructure contains information about how the nodeinteracts with other nodes in the tree.
It consists ofa top part, which generally contains informationrelating to the super-node, and a bottom part,which generally contains information relating tothe sub-node (Han et al, 2000).In FB-LTAG, the feature structure of a newnode created by substitution inherits the union ofthe features of the original nodes.
The top featureof new node is the union of the top features (f1 ?
f)of the two original nodes, while the bottom featureof the new node is simply the bottom feature (g1)of the top node of the substituting tree since thesubstitution node has no bottom feature as shownin Figure 1.Y XY?XYt:f1b:g1t:ft:f1 ?
fb:g1?Figure 1.
Substitution in FB-LTAGThe node being adjoined into splits and its top fea-ture (f) unifies with the top feature (f1) of the rootadjoining node, while its bottom feature (g) unifieswith the bottom feature (g2) of the foot adjoiningnode as shown in Figure 2.X YY*?t:f1b:g1t:f2b:g2Yt:fb:gXYYt:f1 ?
fb:g1t:f2b:g2 ?
gFigure 2.
Adjunction in FB-LTAGSeveral works for extracting grammars, especiallyfor TAG formalism are proposed.
Chen (2001)extracted lexicalized grammars from English PennTreebank and there are other works based onChen?s procedure such as Johansen (2004) andNasr (2004) for French and Habash and Rambow(2004) for Arabic.
Chiang (2000) used Tree Inser-tion Grammars, one variation of TAG formalismfor his extraction system from English Penn Tree-bank.
Xia et al (2000) developed the uniformmethod of a grammar extraction for English, Chi-nese and Korean.
Neumann (2003) extracted Lexi-calized Tree Grammars from English PennTreebank for English and from NEGRA Treebankfor German.
As mentioned above, none of theseworks tried to extract syntactic features for FB-LTAG.3 Grammar extraction schemeBefore extracting a grammar automatically, wetransform the bracket structure sentence in SJTreeinto a tree data structure.
Afterward, using depth-first algorithm for a tree traverse, we determine ahead and the type of operations (substitution oradjunction) for children nodes of the given node ifthe given node is a non-terminal node.3.1 Determination of a headFor the determination of a head, we assume theright-most child node as a head among its siblingnodes in end-focus languages like Korean.
For in-stance, the second NP is marked as a head in [NPNP] composition while the first NP is marked foradjunction operation for the extracted grammar G1which uses eojeols directly without modification ofSJTree (see the section 4 for the detail of extrac-tion experiments).
Likewise, in [VP@VVVP@VX] composition where the first VP has aVV (verb) anchor and the last VP has a VX (auxil-iary verb) anchor, a principal verb in the first VPcould be marked for adjunction operation and anauxiliary verb in the second VP would be a head,that is, the extracted auxiliary verb tree has everyargument of whole sentence.
This phenomenoncould be explained by argument composition.Head nodes of the extracted grammar for a verbbalpyoha.eoss.da (?announced?)
in (1) are in boldface in Figure 3 which represents bracketed sen-tence structure in SJTree74(1) ??
????
??
??
???
???
?.ilbon oimuseong.eunJapan ministy_of_foreign_affairs.Nomjeukgak  haemyengimmediately elucidationseongmyeng.eul balpyo.ha.eoss.dadeclaration.Acc announce.Pass.Ter?The ministry of foreign affairs in Japan im-mediately announced their elucidation.?
(S (NP_SBJ (NP ilbon/NNP)(NP_SBJ oimuseong/NNG+eun/JX))(VP (AP jeukgak/MAG)(VP (NP_OBJ (NP haemyeng/NNG)(NP_OBJ seonmyeng/NNG+eul/JKO))(VP balpyo/NNG+ha/XSV+eoss/EP+da/EF+./SF))))Figure 3.
Bracketed sentence in SJTree for (1)3.2 Distinction between substitution and ad-junction operationsUnlike other Treebank corpora such as EnglishPenn Treebank and French Paris 7 Treebank, full-scale syntactic tags in SJTree allow us to easilydetermine which node would be marked for substi-tution or adjunction operations.
Among 55 syntac-tic tag in SJTree, nodes labeled with NP (nounphrase), S (sentence), VNP (copular phrase) andVP (verb phrase) which end with _CMP (attribute),_OBJ (object), and _SJB (subject) would bemarked for substitution operation, and nodes la-beled with the other syntactic tags except a headnode would be marked for adjunction operation.
Inthis distinction, some VNP and VP phrases mightbe marked for substitution operation, which meansthat VNP and VP phrases are arguments of a head,because SJTree labels VNP and VP instead of NPfor the nominalization forms of VNP and VP.
InFigure 4, for example, NP_SBJ and NP_OBJnodes are marked for substitution operation andAP node is marked for adjunction operation.Children nodes marked for substitution opera-tion are replace by substitution terminal nodes (e.g.NP_SBJ?)
and calls recursively the extraction pro-cedure with its subtree where a root node is thechild node itself.
Children nodes marked for ad-junction operation are removed from the main treeand also calls recursively the extraction procedurewith its subtree where we add its parent node of agiven child node as a root node and a sibling nodeas a foot node (e.g.
VP*).
As defined in the TAGformalism, the foot node has the same label as theroot node of the subtree for an adjunction operation.3.3 Reducing trunkExtracted grammars as explained above are notalways ?correct?
TAG grammar.
Since nodesmarked for adjunction operation are removed,there remain intermediate nodes in the main tree.In this case, we remove these redundant nodes.Figure 4 shows how to remove the redundant in-termediate nodes from the extracted tree for a verbbalpyoha.eoss.da (?announced?)
in (1).VPNP_SBJ ?
VPSNP_OBJ ?
VPbalpyoha.eoss.daVPNP_SBJ ?SNP_OBJ ?
VPbalpyoha.eoss.da?Figure 4.
Removing redundant intermediate nodesfrom extracted trees3.4 Extracting features55 full-scale syntactic tags and morphologicalanalysis in SJTree allow us to extract syntactic fea-tures automatically and to develop FB-LTAG.Automatically extracted FB-LTAG grammarseventually use reduced tagset because FB-LTAGgrammars contain their syntactic information infeatures structures.
For example, NP_SBJ syntactictag in LTAG is changed into NP and a syntacticfeature <case=subject> is added.
Therefore, we useactually 13 reduced tagset for FB-LTAG gram-mars.
From full-scale syntactic tags which endwith _SBJ (subject), _OBJ (object) and _CMP (at-tribute), we extract <case> features which describeargument structures in the sentence.Alongside <case> features, we also extract<mode> and <tense> from morphological analysesin SJTree.
Since however morphological analysesfor verbal and adjectival endings in SJTree aresimply divided into EP, EF and EC which meannon-final endings, final endings and conjunctiveendings, respectively, <mode> and <tense> fea-tures are not extracted directly from SJTree.
In thispaper, we analyze 7 non-final endings (EP) and 77final endings (EF) used in SJTree to extract auto-matically <mode> and <tense> features.
In gen-eral, EF carries <mode> inflections, and EP carries<tense> inflections.
Conjunctive endings (EC) arenot concerned with <mode> and <tense> featuresand we only extract <ec> features with its stringvalue.
<ef> and <ep> features are also extracted75with their string values.
Some of non-final endingslike si are extracted as <hor> features which havehonorary meaning.
In extracted FB-LTAG gram-mars, we present their lexical heads in a bare in-finitive with morphological features such as <ep>,<ef> and <ec> which make correspond with itsinflected forms.<det> is another automatically extractable fea-ture in SJTree and it is extracted from both syntac-tic tag and morphological analysis unlike otherextracted features.
For example, while <det=-> isextracted from dependant nouns which alwaysneed modifiers (extracted by morphological analy-ses), <det=+> is extracted from _MOD phrases(extracted by syntactic tags).
From syntactic tagDP which contains MMs (determinative or demon-strative), <det=+> is also extracted1.The actual procedure of feature extraction is im-plemented by 2 phases.
In the first phase, we con-vert syntactic tags and morphological analysis intofeature structure as explained above.
In the secondphase, we complete feature structure onto nodes ofdorsal spine.
For example, we put the same featureof VV bottom onto VV top, VP top/bottom and Sbottom because nodes in dorsal spine share certainnumber of feature of VV bottom.
The initial treefor a verb balpyoha.eoss.da is completed like Fig-ure 5 for a FB-LTAG (see Park (2006) for details).1 Korean does not need features <person> as in English and<gender > or <number> as in French.
Han et al (2000) pro-posed several features for Korean FBLTAG which we do notuse in this paper, such as <adv-pp>, <top> and < aux-pp> fornouns and <clause-type> for predicates.
While postpositionsare separated from eojeol during our grammar extraction pro-cedure, Han el al.
considered them as ?one?
inflectional mor-phology of noun phrase eojeol.
As we will explain the reasonwhy we separate postpositions from eojeol in the section 4, theseparation of postpositions would be much efficient for thelexical coverage of extracted grammars.
In Han et al <adv-pp> simply contains string value of adverbial postpositions.<aux-pp> adds semantic meaning of auxiliary postpositionssuch as only, also etc.
which we can not extract automaticallyfrom SJTree or other Korean Treebank corpora because syn-tactically annotated Treebank corpora generally do not containsuch semantic information.
<top> marks the presence or ab-sence of a topic marker in Korean like neun, however topicmarkers are annotated like a subject in SJTree which meansthat only <case=subject> is extracted for topic markers.<clause-type> indicates the type of the clause which has itsvalues such as main, coord(inative), subordi(native), ad-nom(inal), nominal, aux-connect.
Since the distinction of thetype of the clause is very vague except main clause in Korea,we do not adopt this feature.
Instead <ef> is extracted if aclause type is a main clause and <ec> is extracted for othertype.SNP?
VPVPNP?VVbalpyohab: <ep> = eossb: <ef> = dab: <mode> = declb: <tense> = pastt:  <ep> = x, <ef> = y, <mode> = i, <tense> = jt:  <ep> = x, <ef> = y, <mode> = i, <tense> = jb: <ep> = x, <ef> = y, <mode> = i, <tense> = jt:  <ep> = x, <ef> = y, <mode> = i, <tense> = jb: <ep> = x, <ef> = y, <mode> = i, <tense> = jt:  -b: <ep> = x, <ef> = y, <mode> = i, <tense> = j<cas> = nom<det> = +<cas> = acc<det> = +Figure 5.
Extracted FB-LTAG grammar forbalpyoha.eoss.da (?announced?
)4 Extraction experiments and results4.1 Extraction of lexicalized treesIn this paper, we extract not only lexicalized treeswithout modification of a Treebank, but also ex-tract grammars with modifications of a Treebankusing some constraints to improve the lexical cov-erage in extracted grammars.?
G1: Using eojeols directly without modifi-cation of SJTree.?
G2: Separating symbols and postpositionsfrom eojeols.
Separated symbols are ex-tracted and divided into ?
and ?
treesbased on their types.
Every separated post-position is ?
tree.
Complex postpositionsconsisted of two or more postpositions areextracted like one ?
tree2.
Finally, convert-ing NP ?
trees into ?
trees and removingsyntactic tag in NP ?
trees.Figure 6 and 7 show extracted lexicalized gram-mars G1 and G2 from (1) respectively.
Theoreti-cally extracting order is followed by word order inthe sentence.VPAP VP*jeukgak/MAG?3:SNP_SBJ?
VPVPNP_OBJ?
?3:NP_SBJ?1:oimuseong/NNG+eun/JX?1:seongmyeng/NNG+eul/JKObalpyo/NNG+ha/XSV+eoss/EP+da/EF+./SFNP_SBJ*NP_SBJNP_OBJ?2: ?2:NP_OBJ*NP_OBJhaemyeng/NNGNPilbon/NNPNPFigure 6.
Extracted lexicalized grammars G12  For extracting trees of symbols and of postposition, wenewly add SYM and POSTP syntactic tags which SJTree doesnot use.
See Figure 11 for extracted symbol and postpositiontrees.76VPAP VP*jeukgak/MAG?1:SNP_SBJ?
VPVPNP_OBJ?
?5:POSTPNP_SBJ?NP_SBJeun/JX?6:POSTPNP_OBJ?NP_OBJeul/JKO?7:ilbon/NNPNP?1:oimuseong/NNGNP?2:haemyeng/NNGNP?3:seongmyeng/NNGNP?4:SYMS*S.SF?2:balpyo/NNG+ha/XSV+eoss/EP+da/EFFigure 7.
Extracted lexicalized grammars G24.2 Extraction of feature-based lexicalizedtreesWe extract feature-based lexicalized trees usingreduced tagset because FB-LTAG grammars con-tain their syntactic information in features struc-tures.
Extracted grammars G3 remove syntactictags, eventually use reduced tagset, add extractedfeature structures and use infinitive forms as lexi-cal anchor.?
G3: Using reduced tagset and a lexical an-chor is an infinitive and adding extractedfeature structures.G3 row in Table 1 below shows the results of ex-traction procedures above.
Figure 8 shows ex-tracted feature-based lexicalized grammars G3from (1)VPADVP VP*jeukgakADV?1:POSTPNP?NPeunJX?6:POSTPNP?NPeulJKO?7:ilbonNP?1:NNPhaemyengNP?3:NNGseongmyengNP?4:NNGSYMS*S.SF?2:SNP?
VPVPNP?VVbalpyoha<cas> = nom<det> = +<cas> = acc<det> = +b: <ep> = eossb: <ef> = dab: <mode> = declb: <tense> = past<cas> = xoimuseongNP?2:NNG<cas> = x <cas> = x <cas> = x<cas> = nom <cas> = acc<cas> = x <cas> = x?5:Figure 8.
Extracted feature-based lexicalizedgrammars G3 3.# of ltrees(lexicalized tree)Average frequen-cies per ltreesG1 18,080 1.38G2 15,551 2.57G3 12,429 3.21Table 1.
Results of experiments in extracting lexi-calized and feature-based lexicalized grammars3 To simplify the figure, we note only feature structure whichis necessary to understand.4.3 Extraction of tree schemataAs mentioned in the Introduction, one of the mostserious problems in automatic grammar extractionis its limited lexical coverage.
To resolve this prob-lem, we enlarge our extracted lexicalized gram-mars using templates which we call tree schemata.The lexical anchor is removed from extractedgrammars and anchor mark is replaced to form treeschemata (for example, @NNG where the lexical-ized anchor in extracted lexicalized grammars is acommon noun).
The number of tree schemata ismuch reduced against that of lexicalized grammars.Table 2 shows the number of template trees andthe average frequency for each template grammars.T1 means G1?s tree schemata.# of tree schemata Average frequenciesper tree schemataT1 1,158 21.55T2 1,077 37.05T3 385 103.65Table 2.
Results of experiments in convertingtemplate grammars5 EvaluationsFirst of all, the lexical coverage for G1 and G2 istested on the part of Sejong corpus which containsabout 770,000 ?morphologically analyzed?
eojeols.After modification of SJTree, the extracted gram-mar G2 is increased to 17.8 % compared with G1for its lexical coverage.
G2 and G3 have same lexi-cal coverage since they have same lexical entries.Extracted grammars in this paper are evaluatedby its size and its coverage.
The size of grammarsmeans tree schemata according to the number ofsentences as shown in Figure 9.
The coverage ofgrammar is the number of occurrences of unknowntree schemata in the corpus by the total occur-rences of tree schemata as shown in Table 3.
(a) Threshold =1  (b) Threshold =2Figure 9.
The size of grammars77Threshold = 1 Threshold = 2G1 0.9326 0.9591G2 0.9326 0.9525G3 0.9579 0.9638Table 3.
Coverage of grammars: 90% of trainingset (2,273 sentences) and 10% of test set (253 sen-tences)We manually overlap our 163 tree schemata forpredicates from T3, which contain 14 subcategori-zation frames with 11 subcategorization frames ofa FB-LTAG grammar proposed in Han et al(2000) to evaluate the coverage of hand-craftedgrammars 4 .
Our extracted template grammarscover 72.7 % of their hand-crafted subcategoriza-tion frames5.6 ConclusionIn this paper, we have presented a system forautomatic grammar extraction that produces lexi-calized and feature-based lexicalized grammarsfrom a Treebank.
Also, to resolve the problem oflimited lexical coverage of extracted grammars, weseparated symbols and postposition, and then con-verted these grammars into template grammars.Extracted grammars and lexical-anchor-less tem-plate grammars might be used for parsers to ana-lyze the Korean sentences and frequencyinformation might be used to remove ambiguitiesamong possible syntactic analyses of parsers.ReferencesCandito, Marie-H?l?ne.
1999.
Organisation modulaireet param?trable de grammaire ?lectronique lexicali-s?es.
Ph.D. thesis, Universit?
Paris 7.4 Our extracted tree schemata contain not only subcategoriza-tion frames but also some phenomena of syntactic variations,the number of lexicalized trees and the frequency informationwhile Han el al.
(2000) only presents subcategorization framesand some phenomena.5 Three subcategorization frames in Han el al.
(2000) whichcontain prepositional phrases are not covered by our extractedtree schemata.
Generally, prepositional phrases in SJTree arelabeled with _AJT which is marked for adjunction operation.Since there is no difference between noun adverbial phraseand prepositional phrases in SJTree like [S na.neun [NP_AJTojeon.e ?morning?]
[NP_AJT hakgyo.e ?to school?]
ga.ss.da] (?Iwent to school this morning?
), we do not consider _AJTphrases as arguments.Chen, John.
2001.
Towards Efficient Statistical ParsingUsing Lexicalized Grammatical Information.
Ph.D.thesis, University of Delaware.Chiang, David.
2000.
Statistical Parsing with an Auto-matically-Extracted Tree Adjoining Grammar.
InData Oriented Parsing, CSLI Publication, pp.
299-316.Habash, Nizar and Owen Rambow.
2004.
Extracting aTree Adjoining Grammar from the Penn ArabicTreebank.
In Proceedings of Traitement Automatiquedu Langues Naturelles (TALN-04).
Fez, Morocco,2004.Han, Chunghye, Juntae Yoon, Nari Kim, and MarthaPalmer.
2000.
A Feature-Based Lexicalized Tree Ad-joining Grammar for Korean.
IRCS Technical Re-port 00-04.
University of Pennsylvania.Johansen, Ane Dybro.
2004.
Extraction des grammairesLTAG ?
partir d?un corpus ?tiquette syntaxiquement.DEA m?moire, Universit?
Paris 7.Nasr, Alexis.
2004.
Analyse syntaxique probabilistepour grammaires de d?pendances extraites automa-tiquement.
Habilitation ?
diriger des recherches, Uni-versit?
Paris 7.Neumann, G?nter.
2003.
A Uniform Method for Auto-matically Extracting Stochastic Lexicalized TreeGrammar from Treebank and HPSG, In A.
Abeill?
(ed) Treebanks: Building and Using Parsed Corpora,Kluwer, Dordrecht.Park, Jungyeul.
2006.
Extraction d?une grammaired?arbres adjoints ?
partir d?un corpus arbor?
pour lecor?en.
Ph.D. thesis, Universit?
Paris 7.Sag, Ivan A., Thomas Wasow, and Emily M. Bender.2003.
Syntactic Theory: A Formal Introduction, 2nded.
CSLI Lecture Notes.Vijay-Shanker, K. and Aravind K. Joshi.
1991.
Unifica-tion Based Tree Adjoining Grammar, in J.
Wedekinded., Unification-based Grammars, MIT Press, Cam-bridge, Massachusetts.Xia, Fei, Martha Palmer, and Aravind K. Joshi.
2000.
AUniform Method of Grammar Extraction and Its Ap-plication.
In The Joint SIGDAT Conference on Em-pirical Methods in Natural Language Processing andVery Large Corpora (EMNLP/VLC-2000), HongKong, Oct 7-8, 2000.Xia, Fei.
2001.
Automatic Grammar Generation fromTwo Different Perspectives.
Ph.D. thesis, Universityof Pennsylvania, PA.78
