Enriching Partial ly-Specif ied Representations for Text Real izat ionUsing an Attr ibute Grammar *Songsak Channarukul Susan W. McRoy Syed S. Ali{ songsak, mcroy, syali} @cs.uwm.
eduNaturat.,L~,ng~uage,and:J4rmwledge:,Rep~esentation.Research Group.
?http ://tigger.
ca.
uwm.
edu/ ~lkrrgElect r ica l  Eng ineer ing  and Computer  Science Depar tmentUn ivers i ty  of Wiscons in -M i lwaukeeAbst rac tWe present a new approach to enriching under-specified representations of content to be realizedas text.
Our approach uses an attribute gram-mar to propagate missing information where neededin a tree that represents the text to be realized.This declaratively-specified grammar mediates be-tween application-produced output and the input toa generation system and, as a consequence, can eas-ily augment an existing generation system.
End-applications that use this approach can produce highquality text without a fine-grained specification ofthe text to be realized, thereby reducing the bur-den to the application.
Additionally, representationsused by the generator are compact, because valuesthat can be constructed from the constraints en-coded by the grammar will be propagated where nec-essary.
This approach is more flexible than default-ing or making a statistically good choice because itcan deal with long-distance dependencies ( uch asgaps and reflexive pronouns).
Our approach differsfrom other approaches that use attribute grammarsin that we use the grammar to enrich the represen-tations of the content to be realized, rather thanto generate the text itself.
We illustrate the ap-proach with examples from our template-based text-realizer, YAG.1 In t roduct ionTypically, a text realization system requires a greatdeal of syntactic information from an applicationin order to generate a high quality text; however,an application might not have this information (un-less it has been built with text generation in mind).This problem has been referred to as the Genera-tion Gap (Meteer, 1990).
Meteer first identified thegeneration gap problem as arising at the text plan-ning stage.
A text planner must decide what contentneeds to be expressed and creates a correspondingtext plan for generating it.
A sentence planner isthen used to select an appropriate syntactic struc-?Th is  work was supported by a gift from Intel Corporation;and by the National Science Foundation, under grants IRI-9701617 and IRI-9523666.ture for a given plan.
Typically, neither a text plan-ner nor a sentence planner is concerned with fine-grained syntactic issues, such as whether the subjectof the sentence is a singular or plural noun.
Thus,it becomes the responsibility of a text realizer to in-fer the missing information and to generate the bestpossible text from a given input.Most generation systems (such as FUF/SURGE(Elhadad, 1992), Penman (Mann, 1983), Real-Pro (Lavoie and Rainbow, 1997), TG/2 (Busemann,1996), and YAG (Channarukul, 1999; McRoy et al,1999)) alleviate this problem by using defaulting,in which a grammar writer specifies a default foreach syntactic onstraint.
This approach is inflexi-ble and prone to errors, because there might not beone default that suits all applications or situations.Another approach that has been proposed is to fillin the missing information on the basis of word co-occurrence data collected from a large corpus of text(see Nitrogen (Knight and Hatzivassiloglou, 1995)).However, statistical approaches have difficulty whenthere are long-distance dependencies among con-stituents in a text.In this paper, we present a new approach to re-solving the so-called generation gap that uses an At-tribute Grammar (Knuth, 1968) to enrich partially-specified inputs to a realization system to pro-duce high quality texts.
Attribute Grammars are adeclarative formalism for defining rules for attributepropagation (see Section 3).
They have been usedprimarily for specifying the .semantics of program-ruing languages, although a few researchers have alsoused them to drive a text generator (see (Levisonand Lessard, 1990), for exaanple).
The main advan-tage of our approach is that it allows a generatorto enjoy the computational efficiency of a template-based realization system, while reducing the linguis-tic burden on an application and increasing the qual-ity of the generated texts.Our work differs from previous uses of attributegrammars in natural language generation, whichare similar to Levison and Lessard (Levison andLessard, 1990)in that they apply attribute gram-mars directly to text realization.
For example, Lev-163L((template CLAUSE)(process-type MENTAL)(process "want")(processor ((template NOUN-PNRASE)(head ((template CONJUNCTION)(first ((template NOUN-PHRASE)(head "Jack")(np-type PROPER),~(gender .MASCULINE) :(definite NOART)))(second ((template PRONOUN)) )))(person SECOND)(number PLURAL)) )(phenomenon ((template NOUN-PHRASE)(head "dog")(definite NOART)(possessor ((template NOUN-PHRASE)(head "sister")(gender FEMININE)(definite NOART)(possessor ((template NOUN-PHRASE)(rear-circum ((template CLAUSE)(mood T0-INFINITIVE)(process-type MATERIAL)(process "swim")) ) )Figure 1: A Feature Structure for(head "Jack")(np-type PROPER)(gender MASCULINE)(pronominal YES)(definite NOART)) )))))the Sentence "Jack and I want his sister's dog to swim.
"ison and Lessard extend a context-free grammarwith attributes and semantic rules similar to classi-cal attribute grammars presented by Knuth (Knuth,1968).
Attributes in their system assist the realiza-tion by propagating information down a tree thatspecifies the complete syntactic structure of the out-put text.
By contrast, our work employs attributegrammars, not to realize a text, but to perform ageneration gap analysis prior to actual realization.We use both inherited and synthesized attributes(i.e., propagating information both down and up atree) to share information and to determine appro-priate values for any missing features.2 An  Overv iew o f  YAGYAG (Yet Another Generator) (Channarukul, 1999;McRoy et al, 1999) is a template-based text-realization system that generates text in real-time.YAG uses templates to express text.
structures corre-sponding to fragments of the target language.
Tem-plates in YAG are declarative and modular.
Coln-plex texts can be generated 173" embedding templatesinside other tenlplates.Values for the tenlplates are provided by an appli-cation; inputs can include either,a conceptual repre-sentation of content or a feature structure.
When aninput is only partially specified, defaults defined in atemplate will be applied.
Figure I shows an exampleof YAG's feature-structure based input; YAG wouldrealize this example as "Jack and I want his sister'sdog to swim.
".
This input is partially specified, andthus is more compact and easier for an applicationto specify, than a complete specification.
Figure 2shows the features that have been omitted and thedefaults used t75 YAG to realize the sentence fromtile input.Although the input is already more compact hana full specification, further simplification of the in-put provided from an application would have beenpossible, if certain inferences could be made.
For ex-ample, Figure 3 shows an input structure that couldreplace the one given in Figure 1.
In Figure 3, it wasnot necessary for the application to specify that theconjunction of two noun phrases is a phlral nounphrase, nor that component noun phrases (propernouns, pronouns, and possessives) hould not, con-tain an article.
In the case of conjunctions, there isno default that would provide the correct outputs inall cases, because the same conjunction template isused to conjoin adjectives and clauses.
Instead, ourapproach uses an attribute grammar to make theappropriate inferences and enrich the feature struc-164Template Name \] Template Slot Default Allowed VMuesCLAUSE sentenceNOUN-PHRASEmoodprocess-type?modetensefutureprogressiveperfectivevoicequalitynp-typepersonnumbergenderdefiniteregular-nouncountableinflectedpronominalYESDECLARATIVEtypeASCRIPTIVE.nil"PRESENTNONONOACTIVEPOSITIVECOMMONTHIRDSINGULARNEUTRALNOYESYESYESNOYES, NODECLARATIVE, YES-N0, WH, IMPERATIVE,T0-INFINITIVEASCRIPTIVE, MENTAL, MATERIAL,COMPOSITE, POSSESSIVE, LOCATIVE,TEMPORAL, VERBAL, EXISTENTIALATTRIBUTI~E,,EQUATIVE,.CAUSATIVEPRESENT, PASTYES, NOYES, N0YES, N0ACTIVE, PASSIVEPOSITIVE, NEGATIVECOMMON, PROPERFIRST, SECOND, THIRDSINGULAR, PLURALNEUTRAL, MASCULINE, FEMININEYES, N0, NOARTYES, NOYES, NOYES, NOYES, NOPOSSESSOR pronominal YES YES, NOPRONOUN PERSONALFIRSTSINGULARNEUTRALpersonnumbergenderPERSONAL, OBJECTIVE, REFLEXIVE,POSSESSIVE-PRONOUN,POSSESSIVE-DETERMINER,RELATIVE, DEMONSTRATIVEFIRST, SECOND, THIRDSINGULAR, PLURALNEUTRAL, MASCULINE, FEMININECONJUNCTION sentence NO YES, NOFigure 2: Some Defaults from YAG's Syntactic Templates.
((template CLAUSE)(process-type MENTAL)(process "want")(processor ((template CONJUNCTION)(first ((template NOUN-PHRASE)(head "Jack")(np-type PROPER)(gender MASCULINE) ))(second ((template PRONOUN)) )))(phenomenon ((template NOUN-PHRASE)(head "dog")(possessor ((template NOUN-PHRASE)(head "sister")(gender FEMININE)?
~(possessor<(template NOUN-PHRASE)(head "Jack")(np-type PROPER)(gender MASCULINE)(pronominal YES)) )))))(rear-circum ((template CLAUSE)(mood T0-INFINITIVE)(process-type MATERIAL)(process "swim")) ) )Figure 3: A (shorter) Feature Struclur() of the Sentence "Jack and I want his ._zste7 s dog to swim.
".165ture input  so that neither the appl ication, nor thetemplates  need to be altered to handle dependencies,like conjunctions, correctly.3 At t r ibute  GrammarsAn at t r ibute  grammar  consists of a context-freegrammar ,  a finite set of at t r ibutes,  and a set of se-mant ic  rules.
The ,.C-,on.~eezt-Free :Grammar (CFG)specifies the syntax of a language by expressing howto construct  a syntax tree from non-terminal  and ter-minal  symbols  defined in a language.
The Attributesand Semantic Rules specify the semantics.
A finiteset of at t r ibutes  is associated with each non-terminalsymbol.
Each of these sets is divided into two dis-jo int  subsets, namely Inherited Attributes and Syn-thesized Attributes.
Inher i ted att r ibutes propagatedown a syntax tree whereas synthesized at t r ibutespropagate  upward.
A semant ic  rule specifies how tocompute the value of an a t t r ibute  from others.
Thisspecif ication implicitly defines dependencies amongat t r ibutes  in an at t r ibute grammar ,  locally (within aproduct ion)  and globally (among product ions) .
At-tribute Evaluation is the process of comput ing valuesfor every attr ibute instance in the tree according tothe semant ic  rules defined for each product ion.An example of an a t t r ibute  grammar  and its com-ponents is given in F igure 4 (adapted from (Alblas,1991)).
This  attr ibute grammar  consists of two non-terminals,  two terminals, andthree  product ion rules.The inherited attr ibutes of the non-terminal  A are aand b.
Its synthesized at t r ibutes  are x and y. Noat t r ibutes  are assigned to the non-terminal  S.nonterminals: S, A.terminals: s, t.start symbol: S.description of attributes:a, b: integer, inh of A;x, y: integer, syn of A;productions and semantic rules:1) S -> A.A.a := A.x2) AO -> AI s.Al.a := AO.a; Al.b := Al.y;AO.x := Al.x; AO.y := l3) A -> t .A.y := A.a; A.x := A.bFigure 4: An Example Att r ibute Grammar .As mentioned earlier, semantic rules define depen-dencies among attr ibutes?
Figure 5 shows depen-dency graphs corresponding to the semantic rules ofFigure 4.
In the graphs, a dotted line represents ader ivat ion of a production rule, 'while an arrow de i-notes an att r ibute dependency.
Thus.
.4 ~ B meansS abAxy  abAxy(% IabAxy  abAxy  s t(1) (2) (3)?
.
.
F igure5:  Dependency Graphs.B is dependent  on A, but not the other way around.In other words, we cannot know B before we knowA.4 Extend ing  a Grammar  to  Enab leGenerat ion  Gap Ana lys i sTo make a generation gap analysis possible, a gram-mar wr i ter  must first extend the grammar  of hisor her exist ing generator to capture the propaga-tion semant ics of a target language.
This extensioninvolves defining attr ibutes (synthesized and inher-ited) and associated semantic rules.
Next, a smallprogram must  be built to construct  a tree froma given input  and retrieve semantic rules and at-t r ibutes from associated grammar  units.A t t r ibute  evaluation begins by instant iat ing eachinherited at t r ibute  with values from the input andthen the remaining at t r ibutes  are evaluated.
Thisprocess is incremental in the sense that  new infor-mat ion gained from previous evaluat ions might leadto the discovery of addit ional  information.
Whenall a t t r ibutes  remain unchanged, or there is a con-flict detected in the input, the process terminates.The generator  then passes the enriched input to thereal izat ion component.Consider the following f ragment of input fromFigure 3 that  uses the CONJUNCTION template tojoin a noun phrase and a pronoun.
( ( template  CONJUNCTION)( : f i r s t  ( ( template  NOUN-PHRASE)(head " Jack" )(np- type  PROPER)(gender  MASCULINE) ))( second ( ( template  PRONOUN))  ))This f ragment is the subject  of the sentence, there-fore features uch as person  and number  would berequired to enforce tile subject-verb agreement of En-glish.
F igure 6 shows a dependency graph ~ for thisi The notatio, used in the dependency graph is the fol-lowing:The oval represents a template slot that is bound to an atomicvalue.
The rectangle denotes a slot that is bound to anotherfeature structure.
The top text in a rectangle specifies a slotname, and the bottom text is the name of a template ~kssignedto this slot,.
A value with an underline'means a default of theabove slot.
The bold fdnt represents a value yielded fromattribute valuations.166J CONJUNCTIONsentence , ' ' '= : : - .
.
oetson number gender definite sentence errorfirst secood  , 1I 1/  / - ._o.
\definite , ' , T , ' ,  person umber gender definite sentencePROPER "Jack" THIRD SINGULAR MASCULINE NOART@ @ @ @PERSONAL FIRST SINGULAR NEUTRALFigure 6: A Dependency Graph of the CONJUNCTION Template corresponding to the text "Jack and I".fragment.
The dependencies are based on the se-mantic rules given in F igure 7 (Section 6 describessyntax of these rules.
).The semantic rules in F igure 7 give constraintinformation for the CONJUNCTION template,  theNOUN-PHRASE template,  and the PRONOUN template.For the CONJUNCTION template ,  the grammar  will:e Use the sentence  feature of the current tem-plate (which is NO by default).o Pass up the person  feature found by compar-ing the person  features associated with tile twoconjuncts (i.e., pass up second person wheneverthe conjuncts combine either first person andsecond or third person, or they combine secondperson and third person; pass up third person ifboth conjuncts use th ird person; otherwise passtip nil);?
Constrain the number  feature to be PLURAL,the gender  feature to be NEUTRAL, the de f in i tefeature to be NOART, and the sentence  featureto the same as the sentence feature of the con-junets.For tile NOUN-PHRASE teinplate,  the grammar  willRequire this template  to enforce the inheritedvalues of the de f in i te ,  number ,  and np- typefeatures.Require the (embedded) DETERMINER templateenforce the number  feature of the current tem-plate.Pass up four features (def in i te ,  number ,  per -son,  and np- type)  to any templates that  usethis noun phrase, where the fotlcrwJng con-straints apply:The  definiteness feature that  is passed isYES whenever the current template has in-herited YES for this value or there is a pos-sessor or a determiner and one of thempasses up YES for this feature.
(If there isneither possessor nor determiner then thegrammar considers the np- type:  if it isCOMMON, it uses NO (for indefinite) and if itis PROPER, it uses NOARTThe  number  feature  passed is the valuepassed from the determiner, if there is one,or the value from the current template.The  person  feature  passed is the one fromthe current template.The  r ip - type  feature  passed is COMMON if thevalue of definite is NO and PROPER if thevalue is NOART.For tile PRONOUN template, the grammar  will:o Pass tip the person ,  number ,  and gender  val-ues fl'om the current template (possibly usingdefault  values), along with the constraint hatttle string realized for it not be a sentence andnot be preceded by an article.In - the example shown in Figure 6, inherited at-tr ibutes 2 have been initialized to the associated val-ues given in an input.
If the input does not specify avalue for an inherited attr ibute,  then the value n i lis used.The attr ibute evaluation is depth-first, and re-quires nmltiple traversals.
Here, the NOUN-PHRASEsub-tree is evaluated twice, as we discover that  thede f in i te  feature must be NOART.
Since tile PRONOUN2 Inherited attributes are placed on the left side of eachnode.
Synthesized attributes are on the right.167Template Name Semantic RulesCONJUNCTIONNOUN-PHRASEPRONOUN((this sentence) (this inh sentence))((this syn person) (CASE (UNION (first syn person)(second syn person)) OF((first nil)(second nil)((first second) second).
((first third) second)((second third) second)(third third)) ))((this syn number) PLURAL)((this syn gender) NEUTRAL)((this syn definite) NOART)((this syn sentence) (UNION (first syn sentence) (second syn sentence)))((this definite) (this inh definite))((this number) (this inh number))((this np-type) (this inh np-type))((determiner inh number) (this inh number))((this syn definite) (IF (AND (NULL (this possessor))(NULL (this determiner))) THEN(UNION (this definite)(CASE (this np-type) OF((common NO)(proper NOART))) )ELSE(UNION (this definite)(possessor syn definite)(determiner syn definite)) ))((this syn number) (UNION (determiner syn number) (this number)) )((this syn person) (this person))((this syn np-type) (CASE (this definite) OF( (NO COMMON)(NOART PROPER)) ))((this syn person) (this person))((this syn number) (this number))((this syn gender) (this gender))((this syn sentence) NO)((this syn definite) NOART)Figure 7: Semantic  Rules of the CONJUNCTION, NOUN-PHRASE, and PRONOUN template.template has no inherited attr ibutes,  a single evalua-tion would be sufficient.
The CONJUNCTION sub-treeis also traversed twice because the sentence  featureis re-assigned once (from n i l  to NO).Figure 8 shows the tree and dependencies, for thefragment, "his sister's dog".
It shows how the deft-niteness of a noun phrase is dependent on the ex-istence of a possessor.
For example, if a posses-sor (such as "his" or "Jack's") is specified, a nounphrase will not need an article.Note that this feature structure can be generateddifferently as "'Jack's sister's dog".
"her dog".
"thedog o~ Jack's sister".
"'the do q o/ h.is sister", and"the dog o/ hens".
\Vhile some of these variationsrequire further investigation to determine how totransform a tree so that it reflects a new orderingof constituents,  some can be implemented using se-mantic rules.
For example , - - to -avo id- /anawkwardconstruct ion such as ",lack's sister's do q" in the sen-oo<  ....~ f--nml~nalPROPER 'Jack THIRD SINGULAR f',IASCU LIN E NIl%R1 YESFigure 8: A Dependency Graph of the NOUN-PHRASE-Template  corresponding to  the text, "his sister'sdog ".168tence "Jack and I want Jack's sister's dog to swim.
",in favor of "his sister's dog", without he applicationhaving to request a pronoun explicitly, as in the ex-ample shown above, we could add a rule to forcethe pronomina l  feature of the inner most posses-sor to be YES, whenever a (repeated) noun phrase isa possessor of a possessor of the primary noun.5 The Use of the  Gehei-ation Gap ...........Analysis to Resolve ConflictingIn fo rmat ionOne side benefit of the use of attribute grammarsis that they can help resolve inconsistencies in theinput provided from an application.
Previously, ageneration system might not be able to recognizesuch conflicts, and therefore might generate a textthat is ungrammatical, or it might simply fail toproduce an output at all.The following is an example input that has aconflict; the values of the number  feature in theNOUN-PHRASE and PRONOUN templates are inconsis-tent.
( (template NOUN-PHRASE)(head "book" )(number PLURAL)(determiner ((template PRONOUN)(type DEMONSTRATIVE)(distance NEAR)(number SINGULAR)) ))Executed literally, a generator would producethe phrase "this books", rather than "this book" or"these books".
Figure 9 shows a dependency graphcorresponding to the above input./-2>number number errornumber ~ number errorDEMONSTRATIVE NEAR SINGULARFigure 9: A Dependency Graph corresponding tothe text "this book" or "these books".With the use of an appropriate attribute gram-mar, an analysis of this structure would detect a con-flict when the vahm SINGULAR o f the -number  fea-ture propagates upward and conflicts with the valuePLURAL of the number  feature of the NOUN-PIIRASEtemplate.
In this case, a generator can choose tooverride one of the conflicting features and generatea text from the revised input.6 Imp lementat ion,~Gy.ammars,.in_~a.:tem.plate-hased.
syst m differ suf-ficiently from phrase-based systems so that tradi-tional attribute grammars pecifications cannot beused without changes.
In particular, grammars ina template-based system are not restricted to syn-tactic text structure as they are in phrase-basedsystems, but mw include either syntactic specifica-tions, semantic specifications, or a mixture of both.Therefore template-based grammars do not restrictderivations on the right side of a production to somespecific non-terminals, as they would be in a phrase-based grammar.In our approach, a template is equivalent to thenon-terminal on the left side of a production.
Tem-plate slots are equivalent o terminals and non-terminals on the right side depending on their valueat the time of generation.
Slots that are bound toa simple value are considered terminals, while thosethat are bound to a feature structure are considerednon-terminals.
The evaluation function of terminalsis actually a constant function whose return value isthe value to which the terminal has been bound.We have defined a small language sufficient tospecify attribute grammars in a template as givenin Figure 10.
Additional keywords are also defined.The keyword th i s  refers to the current template.The keywords inh and syn indicate an inherited at-tribute and a synthesized attribute, respectively.We have implemented an attribute grammar-based propagation analysis program in Lisp asan extension to YAG.
Some templates have beenaugmented with semantic propagation rules.
Itwas not necessary to define attributes for YAG'stemplate-based grammar because template slots al-ready served as attributes.
The program has beenable to identify missing information (using the de-fined semantic propagation rules) and to reject in-puts that have a conflict.Other generation systems that intend to use an at-tribute grammar approach to enrich their partially-specified input will need to analyze the character-istics of their grammar formalism.
Basically, oneneeds to identify the smallest unit of a grammar(e.g., a category (cat) in FUF/SURGE), and thendefine semantic rules similar to those presented inthis paper for each grammar unit.
From a giveninput, a generator should be able to pick semanticrules associated with information provided in an ill-put.
.~n attribute valuation is then executed asdescribed.169AttributeGrammar ::- EvalRulesEvalRules ::- "(" EvalRule EvalRules ")" I nilEvalRule ::- "(" Attr ibute Stmt ")"Stmt ::- Expr \[ CaseStmt \[ IfStmtExpr ::- At t r ibute  \[ constant \["( .... UNION" Stmt Stmt ")" I,,(.
,,TNTEKSECTirSN,,.~Simrt.Stmt ,,).Attribute ::- inherited \[ synthesizedCaseStmt ::- "( .... CASE" Expr "OF" Alters ")"Alters ::- "(" Alter Alters ")" I nilAlter ::- "(" value result ")"result ::- ExprI fS tmt  : : -  "(  .
.
.
.
IF"  Cond "THEN" Strut " ) "  \[" (  .
.
.
.
I F "  Cond "THEN" Strut"ELSE" Strut " ) "Cond : : -  "(  .
.
.
.
NULL" Expr  " ) "  I" (  .
.
.
.
ECIUAL" Expr  Expr " ) "  I"(" "NOT" Cond ")" \["(" "AND" Cond Cond ")" l" ( "  "OR" Cond Cond " ) "Figure 10: The Syntax of YAG's Attribute Gram-mars Specification.7 Conc lus ionWe have presented a new approach to enrichingunder-specified representations of content to berealized as text using attribute grammars withsemantic propagation rules.
Our approach is notintended to replace defaulting mechanisms used inthe current generation systems.
Instead it improvesthe quality of input to the generator for betterrealization.
Defaults are still used if the analysisfails to discover useful information.AcknowledgementThe authors are indebted to John T. Boyland forhis helpful comments and suggestions.Re ferencesHenk Alblas.
1991. hltroduction to attribute gram-mars.
In Henk Alblas and Bo~ivoj Melichar, edi-tors, Attribute Grammars, Applications and Sys-tems, vohune 545 of Lecture Notes in ComputerScience, pages 1 15.
Springer-Verlag, New York--Heidelberg-Berlin.
June.
Prague.Stephan Busemalm.
1996.
Best-first surface realiza-tion.
In Donia Scott.
editor.
Proceedings of theEighth International Workshop o?~ Natural Lan-guage Gencration.
pages 101-110.Songsak Channavnkul.
i999.
YAG: A Natural Lan-guage Generator for Real-Time Systems.
Mas-ter's thesis, University of Wisconsin-Milwaukee,December.Michael Elhadad.
1992.
Using argumentation tocontrol lexical choice: A functional unification-based approach.
Ph.D. thesis, Computer ScienceDepartment, Columbia University.Keven Knight and Vasileios Hatzivassiloglou.
1995.T.wo~level, many-paths generation..In:Proceedings..?
of ACL.Donald E. Knuth.
1968.
Semantics of context-free languages.
Mathematical Systems Theory,2(2):127-145, June.
Correction: MathematicalSystems Theory 5, 1, pp.
95-96 (March 1971).Benoit Lavoie and Owen Rambow.
1997.
A fastand portable realizer for text generation systems.In Proceedings o/ the Fifth Conference on Ap-plied Natural Language Processing, pages 265-268,Washington.Michael Levison and Gregory Lessard.
1990.
Ap-plication of attribute grammars to natural lan-guage sentence generation.
In Pierre Deransartand Martin Jourdan, editors, Attribute Gram-mars and their Applications (WAGA), volume461 of Lecture Notes in Computer Science, pages298-312.
Springer-Verlag, New York-Heidelberg-Berlin, September.
Paris.William C. Mann.
1983.
An overview of thePenman text generation system.
In Proceedingsof the Third National Conference on ArtificialIntelligence (AAA\[-83), pages 261-265, Wash-ington, DC, August 22-26,.
Also appears asUSC/Information Sciences Institute Tech ReportRR-83-114.Susan W. McRoy, Songsak Channarukul, andSyed S. Ali.
1999.
A Natural Language Gener-ation Component for Dialog Systems.
In WorkingNotes of the AAAI  Workshop on Mixed-InitiativeIntelligence, at the 1999 Meeting of the AmericanAssociation for Artificial Intelligence, Orlando,FL.Marie W. Meteer.
1990.
The "Generation Gap" TheProblem of Exprcssibility in Text Planning.
Ph.D.thesis, University of Massachusetts.170
