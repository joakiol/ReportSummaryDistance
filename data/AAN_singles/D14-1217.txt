Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 2028?2038,October 25-29, 2014, Doha, Qatar.
c?2014 Association for Computational LinguisticsLearning Spatial Knowledge for Text to 3D Scene GenerationAngel X. Chang, Manolis Savva and Christopher D. ManningStanford University{angelx,msavva,manning}@cs.stanford.eduAbstractWe address the grounding of natural lan-guage to concrete spatial constraints, andinference of implicit pragmatics in 3D en-vironments.
We apply our approach to thetask of text-to-3D scene generation.
Wepresent a representation for common sensespatial knowledge and an approach to ex-tract it from 3D scene data.
In text-to-3D scene generation, a user provides as in-put natural language text from which weextract explicit constraints on the objectsthat should appear in the scene.
The maininnovation of this work is to show howto augment these explicit constraints withlearned spatial knowledge to infer missingobjects and likely layouts for the objectsin the scene.
We demonstrate that spatialknowledge is useful for interpreting natu-ral language and show examples of learnedknowledge and generated 3D scenes.1 IntroductionTo understand language, we need an understandingof the world around us.
Language describes theworld and provides symbols with which we rep-resent meaning.
Still, much knowledge about theworld is so obvious that it is rarely explicitly stated.It is uncommon for people to state that chairs areusually on the floor and upright, and that you usu-ally eat a cake from a plate on a table.
Knowledgeof such common facts provides the context withinwhich people communicate with language.
There-fore, to create practical systems that can interactwith the world and communicate with people, weneed to leverage such knowledge to interpret lan-guage in context.Spatial knowledge is an important aspect of theworld and is often not expressed explicitly in nat-ural language.
This is one of the biggest chal-Figure 1: Generated scene for ?There is a roomwith a chair and a computer.?
Note that the systeminfers the presence of a desk and that the computershould be supported by the desk.lenges in grounding language and enabling natu-ral communication between people and intelligentsystems.
For instance, if we want a robot that canfollow commands such as ?bring me a piece ofcake?, it needs to be imparted with an understand-ing of likely locations for the cake in the kitchenand that the cake should be placed on a plate.The pioneering WordsEye system (Coyne andSproat, 2001) addressed the text-to-3D task and isan inspiration for our work.
However, there aremany remaining gaps in this broad area.
Amongthem, there is a need for research into learning spa-tial knowledge representations from data, and forconnecting them to language.
Representing un-stated facts is a challenging problem unaddressedby prior work and the focus of our contribution.This problem is a counterpart to the image descrip-tion problem (Kulkarni et al., 2011; Mitchell et al.,2012; Elliott and Keller, 2013), which has so farremained largely unexplored by the community.We present a representation for this form of spa-tial knowledge that we learn from 3D scene dataand connect to natural language.
We will showhow this representation is useful for groundinglanguage and for inferring unstated facts, i.e., thepragmatics of language describing physical envi-ronments.
We demonstrate the use of this repre-sentation in the task of text-to-3D scene genera-2028RoomTablePlateCakecolor(red)?There is a room with a table and a cake.
There is a red chair to the right of the table.
?a) Scene TemplateInput Textsupports(o0,o1) supports(o0,o2)right(o2,o1)o3cakec) 3D Sceneo0roomo1table o2chairsupports(o1,o4)supports(o4,o3)o4plateParseInferGroundLayoutb) Geometric SceneRenderViewChairFigure 2: Overview of our spatial knowledge representation for text-to-3D scene generation.
We parseinput text into a scene template and infer implicit spatial constraints from learned priors.
We then groundthe template to a geometric scene, choose 3Dmodels to instantiate and arrange them into a final 3D scene.tion, where the input is natural language and thedesired output is a 3D scene.We focus on the text-to-3D task to demonstratethat extracting spatial knowledge is possible andbeneficial in a challenging scenario: one requiringthe grounding of natural language and inference ofrarelymentioned implicit pragmatics based on spa-tial facts.
Figure 1 illustrates some of the inferencechallenges in generating 3D scenes from naturallanguage: the desk was not explicitly mentionedin the input, but we need to infer that the computeris likely to be supported by a desk rather than di-rectly placed on the floor.
Without this inference,the user would need to be much more verbose withtext such as ?There is a room with a chair, a com-puter, and a desk.
The computer is on the desk, andthe desk is on the floor.
The chair is on the floor.
?Contributions We present a spatial knowledgerepresentation that can be learned from 3D scenesand captures the statistics of what objects occurin different scene types, and their spatial posi-tions relative to each other.
In addition, we modelspatial relations (left, on top of, etc.)
and learn amapping between language and the geometric con-straints that spatial terms imply.
We show thatusing our learned spatial knowledge representa-tion, we can infer implicit constraints, and generateplausible scenes from concise natural text input.2 Task Definition and OverviewWe define text-to-scene generation as the task oftaking text that describes a scene as input, and gen-erating a plausible 3D scene described by that textas output.
More concretely, based on the inputtext, we select objects from a dataset of 3D modelsand arrange them to generate output scenes.The main challenge we address is in transform-ing a scene template into a physically realizable 3Dscene.
For this to be possible, the system must beable to automatically specify the objects presentand their position and orientation with respect toeach other as constraints in 3D space.
To do so, weneed to have a representation of scenes (?3).
Weneed good priors over the arrangements of objectsin scenes (?4) and we need to be able to groundtextual relations into spatial constraints (?5).
Webreak down our task as follows (see Figure 2):Template Parsing (?6.1): Parse the textual de-scription of a scene into a set of constraints on theobjects present and spatial relations between them.Inference (?6.2): Expand this set of constraints byaccounting for implicit constraints not specified inthe text using learned spatial priors.Grounding (?6.3): Given the constraints and pri-ors on the spatial relations of objects, transform thescene template into a geometric 3D scenewith a setof objects to be instantiated.Scene Layout (?6.4): Arrange the objects and op-timize their placement based on priors on the rel-ative positions of objects and explicitly providedspatial constraints.3 Scene RepresentationTo capture the objects present and their arrange-ment, we represent scenes as graphs where nodesare objects in the scene, and edges are semantic re-lationships between the objects.We represent the semantics of a scene using ascene template and the geometric properties usinga geometric scene.
One critical property which iscaptured by our scene graph representation is thatof a static support hierarchy, i.e., the order in whichbigger objects physically support smaller ones: thefloor supports tables, which support plates, whichcan support cakes.
Static support and other con-straints on relationships between objects are rep-resented as edges in the scene graph.20290.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0p(Scene|Knife+Table)Kitchen Counter Dining TableLiving Room KitchenFigure 3: Probabilities of different scene typesgiven the presence of ?knife?
and ?table?.Figure 4: Probabilities of support for some mostlikely child object categories given four differentparent object categories, from top left clockwise:dining table, bookcase, room, desk.3.1 Scene TemplateA scene template T = (O, C, Cs) consists of aset of object descriptions O = {o1, .
.
.
, on} andconstraints C = {c1, .
.
.
, ck} on the relationshipsbetween the objects.
A scene template also has ascene type Cs.Each object oi, has properties associated withit such as category label, basic attributes such ascolor and material, and number of occurrences inthe scene.
For constraints, we focus on spatial re-lations between objects, expressed as predicates ofthe form supported_by(oi, oj) or left(oi, oj)whereoiand ojare recognized objects.1 Figure 2a showsan example scene template.
From the scene tem-plate we instantiate concrete geometric 3D scenes.To infer implicit constraints on objects and spa-tial support we learn priors on object occurrencesin 3D scenes (?4.1) and their support hierarchies(?4.2).3.2 Geometric SceneWe refer to the concrete geometric representationof a scene as a ?geometric scene?.
It consists ofa set of 3D model instances ?
one for each ob-ject ?
that capture the appearance of the object.
Atransformation matrix that represents the position,orientation, and scaling of the object in a scene isalso necessary to exactly position the object.
Wegenerate a geometric scene from a scene templateby selecting appropriate models from a 3D modeldatabase and determining transformations that op-1Our representation can also support other relationshipssuch as larger(oi, oj).timize their layout to satisfy spatial constraints.
Toinform geometric arrangement we learn priors onthe types of support surfaces (?4.2) and the relativepositions of objects (?4.4).4 Spatial KnowledgeOur model of spatial knowledge relies on the ideaof abstract scene types describing the occurrenceand arrangement of different categories of objectswithin scenes of that type.
For example, kitchenstypically contain kitchen counters on which platesand cups are likely to be found.
The type of sceneand category of objects condition the spatial rela-tionships that can exist in a scene.We learn spatial knowledge from 3D scene data,basing our approach on that of Fisher et al.
(2012)and using their dataset of 133 small indoor scenescreated with 1723 Trimble 3D Warehouse mod-els (Fisher et al., 2012).4.1 Object Occurrence PriorsWe learn priors for object occurrence in differentscene types (such as kitchens, offices, bedrooms).Pocc(Co|Cs) =count(Coin Cs)count(Cs)This allows us to evaluate the probability of dif-ferent scene types given lists of object occurringin them (see Figure 3).
For example given input ofthe form ?there is a knife on the table?
then we arelikely to generate a scene with a dining table andother related objects.4.2 Support Hierarchy PriorsWe observe the static support relations of objectsin existing scenes to establish a prior over what ob-jects go on top of what other objects.
As an exam-ple, by observing plates and forks on tables mostof the time, we establish that tables are more likelyto support plates and forks than chairs.
We esti-mate the probability of a parent category Cpsup-porting a given child category Ccas a simple con-ditional probability based on normalized observa-tion counts.2Psupport(Cp|Cc) =count(Ccon Cp)count(Cc)We show a few of the priors we learn in Figure 4as likelihoods of categories of child objects beingstatically supported by a parent category object.2The support hierarchy is explicitly modeled in the scenedataset we use.2030Figure 5: Predicted positions using learned rela-tive position priors for chair given desk (top left),poster-room (top right), mouse-desk (bottom left),keyboard-desk (bottom right).4.3 Support Surface PriorsTo identify which surfaces on parent objects sup-port child objects, we first segment parent modelsinto planar surfaces using a simple region-growingalgorithm based on (Kalvin and Taylor, 1996).
Wecharacterize support surfaces by the direction oftheir normal vector, limited to the six canonicaldirections: up, down, left, right, front, back.
Welearn a probability of supporting surface normal di-rection Sngiven child object category Cc.
For ex-ample, posters are typically found on walls so theirsupport normal vectors are in the horizontal di-rections.
Any unobserved child categories are as-sumed to havePsurf(Sn= up|Cc) = 1 sincemostthings rest on a horizontal surface (e.g., floor).Psurf(Sn|Cc) =count(Ccon surface with Sn)count(Cc)4.4 Relative Position PriorsWe model the relative positions of objects basedon their object categories and current scene type:i.e., the relative position of an object of categoryCobjis with respect to another object of categoryCrefand for a scene type Cs.
We condition on therelationship R between the two objects, whetherthey are siblings (R = Sibling) or child-parent(R = ChildParent).Prelpos(x, y, ?|Cobj, Cref, Cs, R)When positioning objects, we restrict the searchspace to points on the selected support surface.The position x, y is the centroid of the target ob-ject projected onto the support surface in the se-mantic frame of the reference object.
The ?
is theangle between the front of the two objects.
We rep-resent these relative position and orientation pri-ors by performing kernel density estimation on theRelation P (relation)inside(A,B) V ol(A?B)V ol(A)outside(A,B) 1 - V ol(A?B)V ol(A)left_of(A,B) V ol(A?
left_of (B))V ol(A)right_of(A,B) V ol(A?
right_of (B))V ol(A)near(A,B) 1(dist(A,B) < tnear)faces(A,B) cos(front(A), c(B)?
c(A))Table 1: Definitions of spatial relation usingbounding boxes.
Note: dist(A,B) is normalizedagainst the maximum extent of the bounding boxofB.
front(A) is the direction of the front vectorof A and c(A) is the centroid of A.Keyword Top Relations and Scoresbehind (back_of, 0.46), (back_side, 0.33)adjacent (front_side, 0.27), (outside, 0.26)below (below, 0.59), (lower_side, 0.38)front (front_of, 0.41), (front_side, 0.40)left (left_side, 0.44), (left_of, 0.43)above (above, 0.37), (near, 0.30)opposite (outside, 0.31), (next_to, 0.30)on (supported_by, 0.86), (on_top_of, 0.76)near (outside, 0.66), (near, 0.66)next (outside, 0.49), (near, 0.48)under (supports, 0.62), (below, 0.53)top (supported_by, 0.65), (above, 0.61)inside (inside, 0.48), (supported_by, 0.35)right (right_of, 0.50), (lower_side, 0.38)beside (outside, 0.45), (right_of, 0.45)Table 2: Map of top keywords to spatial relations(appropriate mappings in bold).observed samples.
Figure 5 shows predicted posi-tions of objects using the learned priors.5 Spatial RelationsWe define a set of formal spatial relations that wemap to natural language terms (?5.1).
In addi-tion, we collect annotations of spatial relation de-scriptions from people, learn a mapping of spatialkeywords to our formal spatial relations, and traina classifier that given two objects can predict thelikelihood of a spatial relation holding (?5.2).5.1 Predefined spatial relationsFor spatial relations we use a set of predefined rela-tions: left_of, right_of, above, below, front, back,supported_by, supports, next_to, near, inside, out-side, faces, left_side, right_side.3 These are mea-sured using axis-aligned bounding boxes from theviewer?s perspective; the involved bounding boxesare compared to determine volume overlap or clos-est distance (for proximity relations; see Table 1).3Wedistinguish left_of(A,B) asA being left of the left edgeof the bounding box of B vs left_side(A,B) as A being left ofthe centroid of B.2031Feature # Descriptiondelta(A,B) 3 Delta position (x, y, z) between the centroids of A and Bdist(A,B) 1 Normalized distance (wrt B) between the centroids of A and Boverlap(A, f(B)) 6 Fraction of A inside left/right/front/back/top/bottom regions wrt B: V ol(A?f(B))V ol(A)overlap(A,B) 2 V ol(A?B)V ol(A)and V ol(A?B)V ol(B)support(A,B) 2 supported_by(A,B) and supports(A,B)Table 3: Features for trained spatial relations predictor.Figure 6: Our data collection task.Since these spatial relations are resolvedwith re-spect to the view of the scene, they correspond toview-centric definitions of spatial concepts.5.2 Learning Spatial RelationsWe collect a set of text descriptions of spatial rela-tionships between two objects in 3D scenes by run-ning an experiment on Amazon Mechanical Turk.We present a set of screenshots of scenes in ourdataset that highlight particular pairs of objects andwe ask people to fill in a spatial relationship of theform ?The __ is __ the __?
(see Fig 6).
We col-lected a total of 609 annotations over 131 objectpairs in 17 scenes.
We use this data to learn pri-ors on view-centric spatial relation terms and theirconcrete geometric interpretation.For each response, we select one keyword fromthe text based on length.
We learn a mapping ofthe top 15 keywords to our predefined set of spa-tial relations.
We use our predefined relations onannotated spatial pairs of objects to create a binaryindicator vector that is set to 1 if the spatial relationholds, or zero otherwise.
We then create a simi-lar vector for whether the keyword appeared in theannotation for that spatial pair, and then computethe cosine similarity of the two vectors to obtaina score for mapping keywords to spatial relations.Table 2 shows the obtained mapping.
Using justthe top mapping, we are able to map 10 of the 15AboveAbove OnLeft RightFront BehindFigure 7: High probability regions where the cen-ter of another object would occur for some spatialrelations with respect to a table: above (top left),on (top right), left (mid left), right (mid right), infront (bottom left), behind (bottom right).keywords to an appropriate spatial relation.
The 5keywords that are not well mapped are proximityrelations that are not well captured by our prede-fined spatial relations.Using the 15 keywords as our spatial relations,we train a log linear binary classifier for each key-word over features of the objects involved in thatspatial relation (see Table 3).
We then use thismodel to predict the likelihood of that spatial re-lation in new scenes.Figure 7 shows examples of predicted likeli-hoods for different spatial relations with respect toan anchor object in a scene.
Note that the learnedspatial relations are much stricter than our prede-fined relations.
For instance, ?above?
is only usedto referred to the area directly above the table, notto the region above and to the left or above and infront (which our predefined classifier will all con-sider to be above).
In our results, we showwe havemore accurate scenes using the trained spatial re-lations than the predefined ones.2032Dependency Pattern Example Text{tag:VBN}=verb >nsubjpass {}=nsubj >prep ({}=prep >pobj {}=pobj) The chair[nsubj] is made[verb] of[prep] wood[pobj].attribute(verb,pobj)(nsubj,pobj) material(chair,wood){}=dobj >cop {} >nsubj {}=nsubj The chair[nsubj] is red[dobj].attribute(dobj)(nsubj,dobj) color(chair,red){}=dobj >cop {} >nsubj {}=nsubj >prep ({}=prep >pobj {}=pobj) The table[nsubj] is next[dobj] to[prep] the chair[pobj].spatial(dobj)(nsubj, pobj) next_to(table,chair){}=nsubj >advmod ({}=advmod >prep ({}=prep >pobj {}=pobj)) There is a table[nsubj] next[advmod] to[prep] a chair[pobj].spatial(advmod)(nsubj, pobj) next_to(table,chair)Table 4: Example dependency patterns for extracting attributes and spatial relations.6 Text to Scene generationWe generate 3D scenes from brief scene descrip-tions using our learned priors.6.1 Scene Template ParsingDuring scene template parsing we identify thescene type, the objects present in the scene, theirattributes, and the relations between them.
Theinput text is first processed using the StanfordCoreNLP pipeline (Manning et al., 2014).
Thescene type is determined by matching the wordsin the utterance against a list of known scene typesfrom the scene dataset.To identify objects, we look for noun phrasesand use the head word as the category, filteringwith WordNet (Miller, 1995) to determine whichobjects are visualizable (under the physical objectsynset, excluding locations).
We use the Stanfordcoreference system to determine when the sameobject is being referred to.To identify properties of the objects, we extractother adjectives and nouns in the noun phrase.
Wealsomatch dependency patterns such as ?X ismadeof Y?
to extract additional attributes.
Based on theobject category and attributes, and other words inthe noun phrase mentioning the object, we identifya set of associated keywords to be used later forquerying the 3D model database.Dependency patterns are also used to extractspatial relations between objects (see Table 4 forsome example patterns).
We use Semgrex patternsto match the input text to dependencies (Cham-bers et al., 2007).
The attribute types are deter-mined from a dictionary using the text express-ing the attribute (e.g., attribute(red)=color, at-tribute(round)=shape).
Likewise, spatial relationsare looked up using the learned map of keywordsto spatial relations.As an example, given the input ?There is a roomwith a desk and a red chair.
The chair is to the leftof the desk.?
we extract the following objects andspatial relations:Objects category attributes keywordso0room roomo1desk desko2chair color:red chair, redRelations: left(o2, o1)6.2 Inferring ImplicitsFrom the parsed scene template, we infer the pres-ence of additional objects and support constraints.We can optionally infer the presence of addi-tional objects from object occurrences based on thescene type.
If the scene type is unknown, we usethe presence of known object categories to pre-dict the most likely scene type by using Bayes?rule on our object occurrence priors Poccto getP (Cs|{Co}) ?
Pocc({Co}|Cs)P (Cs).
Once wehave a scene type Cs, we sample Poccto find ob-jects that are likely to occur in the scene.
We re-strict sampling to the top n = 4 object categories.We can also use the support hierarchy priorsPsupportto infer implicit objects.
For instance, foreach object oiwe find the most likely supportingobject category and add it to our scene if not al-ready present.After inferring implicit objects, we infer the sup-port constraints.
Using the learned text to prede-fined relation mapping from ?5.2, we can map thekeywords ?on?
and ?top?
to the supported_by re-lation.
We infer the rest of the support hierarchyby selecting for each object oithe parent object ojthat maximizes Psupport(Coj|Coi).6.3 Grounding ObjectsOnce we determine from the input text what ob-jects exist and their spatial relations, we select 3Dmodels matching the objects and their associatedproperties.
Each object in the scene template isgrounded by querying a 3D models database with2033?There is a desk and a keyboard and a monitor .
?Input Text Basic + Support Hierarchy + Relative Positions?There is a coffee table and there is a lamp behind the coffee table.
There is a chair in front of the coffee table.
?UPDATE UPDATENo Relations Predefined Relations Learned RelationsFigure 8: Top Generated scenes for randomly placing objects on the floor (Basic), with inferred SupportHierarchy, and with priors on Relative Positions.
Bottom Generated scenes with no understanding ofspatial relations (No Relations), scoring using Predefined Relations and Learned Relations.the appropriate category and keywords.We use a 3D model dataset collected fromGoogle 3DWarehouse by prior work in scene syn-thesis and containing about 12490 mostly indoorobjects (Fisher et al., 2012).
These models havetext associated with them in the form of names andtags.
In addition, we semi-automatically annotatedmodels with object category labels (roughly 270classes).
We used model tags to set these labels,and verified and augmented them manually.In addition, we automatically rescale models sothat they have physically plausible sizes and orientthem so that they have a consistent up and frontdirection (Savva et al., 2014).
We then indexed allmodels in a database that we query at run-time forretrieval based on category and tag labels.6.4 Scene LayoutOnce we have instantiated the objects in the sceneby selecting models, we aim to optimize an over-all layout score L = ?objLobj+ ?relLrelthat isa weighted sum of object arrangement Lobjscoreand constraint satisfaction Lrelscore:Lobj=?oiPsurf(Sn|Coi)?oj?F (oi)Prelpos(?
)Lrel=?ciPrel(ci)where F (oi) are the sibling objects and parent ob-ject of oi.
We use ?obj= 0.25 and ?rel= 0.75 forthe results we present.We use a simple hill climbing strategy to find areasonable layout.
We first initialize the positionsFigure 9: Generated scene for ?There is a roomwith a desk and a lamp.
There is a chair to theright of the desk.?
The inferred scene hierarchy isoverlayed in the center.of objects within the scene by traversing the sup-port hierarchy in depth-first order, positioning thechildren from largest to first and recursing.
Childnodes are positioned by first selecting a supportingsurface on a candidate parent object through sam-pling of Psurf.
After selecting a surface, we sam-ple a position on the surface based on Prelpos.
Fi-nally, we check whether collisions exist with otherobjects, rejecting layouts where collisions occur.We iterate by randomly jittering and repositioningobjects.
If there are any spatial constraints that arenot satisfied, we also remove and randomly repo-sition the objects violating the constraints, and it-erate to improve the layout.
The resulting scene isrendered and presented to the user.7 Results and DiscussionWe show examples of generated scenes, and com-pare against naive baselines to demonstrate learnedpriors are essential for scene generation.
We2034Figure 10: Generated scene for ?There is a roomwith a poster bed and a poster.
?Figure 11: Generated scene for ?living room?.also discuss interesting aspects of using spatialknowledge in view-based object referent resolu-tion (?7.2) and in disambiguating geometric inter-pretations of ?on?
(?7.3).Model Comparison Figure 8 shows a compari-son of scenes generated by our model versus sev-eral simpler baselines.
The top row shows the im-pact of modeling the support hierarchy and the rel-ative positions in the layout of the scene.
The bot-tom row shows that the learned spatial relationscan give a more accurate layout than the naivepredefined spatial relations, since it captures prag-matic implicatures of language, e.g., left is onlyused for directly left and not top left or bottomleft (Vogel et al., 2013).Figure 12: Left: chair is selected using ?the chairto the right of the table?
or ?the object to the right ofthe table?.
Chair is not selected for ?the cup to theright of the table?.
Right: Different view resultsin different chair being selected for the input ?thechair to the right of the table?.7.1 Generated ScenesSupport Hierarchy Figure 9 shows a generatedscene along with the input text and support hier-archy.
Even though the spatial relation betweenlamp and desk was not mentioned, we infer that thelamp is supported by the top surface of the desk.Disambiguation Figure 10 shows a generatedscene for the input ?There is a room with a posterbed and a poster?.
Note that the system differen-tiates between a ?poster?
and a ?poster bed?
?
itcorrectly selects and places the bed on the floor,while the poster is placed on the wall.Inferring objects for a scene type Figure 11shows an example of inferring all the objectspresent in a scene from the input ?living room?.Some of the placements are good, while others canclearly be improved.7.2 View-centric object referent resolutionAfter a scene is generated, the user can refer to ob-jects with their categories andwith spatial relationsbetween them.
Objects are disambiguated by bothcategory and view-centric spatial relations.
We usethe WordNet hierarchy to resolve hyponym or hy-pernym referents to objects in the scene.
In Fig-ure 12 (left), the user can select a chair to the rightof the table using the phrase ?chair to the right ofthe table?
or ?object to the right of the table?.
Theuser can then change their viewpoint by rotatingand moving around.
Since spatial relations are re-solved with respect to the current viewpoint, a dif-ferent chair is selected for the same phrase from adifferent viewpoint in the right screenshot.7.3 Disambiguating ?on?As shown in ?5.2, the English preposition ?on?,when used as a spatial relation, correspondsstrongly to the supported_by relation.
In ourtrained model, the supported_by feature also hasa high positive weight for ?on?.Our model for supporting surfaces and hierar-chy allows interpreting the placement of ?A onB?
based on the categories of A and B. Fig-ure 13 demonstrates four different interpretationsfor ?on?.
Given the input ?There is a cup on thetable?
the system correctly places the cup on thetop surface of the table.
In contrast, given ?Thereis a cup on the bookshelf?, the cup is placed on asupporting surface of the bookshelf, but not nec-essarily the top one which would be fairly high.2035Figure 13: From top left clockwise: ?There is acup on the table?, ?There is a cup on the book-shelf?, ?There is a poster on the wall?, ?There isa hat on the chair?.
Note the different geometricinterpretations of ?on?.Given the input ?There is a poster on the wall?, aposter is pasted on the wall, while with the input?There is a hat on the chair?
the hat is placed onthe seat of the chair.7.4 LimitationsWhile the system shows promise, there are stillmany challenges in text-to-scene generation.
Forone, we did not address the difficulties of resolvingobjects.
A failure case of our system stems fromusing a fixed set of categories to identify visualiz-able objects.
For example, the sense of ?top?
refer-ring to a spinning top, and other uncommon objecttypes, are not handled by our system as concreteobjects.
Furthermore, complex phrases includingobject parts such as ?there?s a coat on the seat ofthe chair?
are not handled.
Figure 14 shows someFigure 14: Left: A water bottle instead of winebottle is selected for ?There is a bottle of wine onthe table in the kitchen?.
In addition, the selectedtable is inappropriate for a kitchen.
Right: A floorlamp is incorrectly selected for the input ?There isa lamp on the table?.example cases where the context is important inselecting an appropriate object and the difficultiesof interpreting noun phrases.In addition, we rely on a few dependency pat-terns for extracting spatial relations so robustnessto variations in spatial language is lacking.
Weonly handle binary spatial relations (e.g., ?left?,?behind?)
ignoringmore complex relations such as?around the table?
or ?in the middle of the room?.Though simple binary relations are some of themost fundamental spatial expressions and a goodfirst step, handling more complex expressions willdo much to improve the system.Another issue is that the interpretation of sen-tences such as ?the desk is covered with paper?,which entails many pieces of paper placed on thedesk, is hard to resolve.
With a more data-drivenapproach we can hope to link such expressions toconcrete facts.Finally, we use a traditional pipeline approachfor text processing, so errors in initial stagescan propagate downstream.
Failures in depen-dency parsing, part of speech tagging, or coref-erence resolution can result in incorrect interpre-tations of the input language.
For example, inthe sentence ?there is a desk with a chair in frontof it?, ?it?
is not identified as coreferent with?desk?
so we fail to extract the spatial relationfront_of(chair, desk).8 Related WorkThere is related prior work in the topics of mod-eling spatial relations, generating 3D scenes fromtext, and automatically laying out 3D scenes.8.1 Spatial knowledge and relationsPrior work that required modeling spatial knowl-edge has defined representations specific to thetask addressed.
Typically, such knowledge is man-ually provided or crowdsourced ?
not learned fromdata.
For instance, WordsEye (Coyne et al., 2010)uses a set of manually specified relations.
TheNLP community has explored grounding text tophysical attributes and relations (Matuszek et al.,2012; Krishnamurthy and Kollar, 2013), gener-ating text for referring to objects (FitzGerald etal., 2013) and connecting language to spatial re-lationships (Vogel and Jurafsky, 2010; Golland etal., 2010; Artzi and Zettlemoyer, 2013).
Mostof this work focuses on learning a mapping fromtext to formal representations, and does not model2036implicit spatial knowledge.
Many priors on realworld spatial facts are typically unstated in text andremain largely unaddressed.8.2 Text to Scene SystemsEarly work on the SHRDLU system (Winograd,1972) gives a good formalization of the linguis-tic manipulation of objects in 3D scenes.
By re-stricting the discourse domain to a micro-worldwith simple geometric shapes, the SHRDLU sys-tem demonstrated parsing of natural language in-put for manipulating scenes.
However, generaliza-tion to more complex objects and spatial relationsis still very hard to attain.More recently, a pioneering text-to-3D scenegeneration prototype system has been presented byWordsEye (Coyne and Sproat, 2001).
The authorsdemonstrated the promise of text to scene genera-tion systems but also pointed out some fundamen-tal issues which restrict the success of their system:much spatial knowledge is required which is hardto obtain.
As a result, users have to use unnaturallanguage (e.g., ?the stool is 1 feet to the south ofthe table?)
to express their intent.
Follow up workhas attempted to collect spatial knowledge throughcrowd-sourcing (Coyne et al., 2012), but does notaddress the learning of spatial priors.We address the challenge of handling naturallanguage for scene generation, by learning spatialknowledge from 3D scene data, and using it to in-fer unstated implicit constraints.
Our work is simi-lar in spirit to recent work on generating 2D clipartfor sentences using probabilistic models learnedfrom data (Zitnick et al., 2013).8.3 Automatic Scene LayoutWork on scene layout has focused on determininggood furniture layouts by optimizing energy func-tions that capture the quality of a proposed layout.These energy functions are encoded from designguidelines (Merrell et al., 2011) or learned fromscene data (Fisher et al., 2012).
Knowledge of ob-ject co-occurrences and spatial relations is repre-sented by simple models such as mixtures of Gaus-sians on pairwise object positions and orientations.We leverage ideas from this work, but they do notfocus on linking spatial knowledge to language.9 Conclusion and Future WorkWe have demonstrated a representation of spatialknowledge that can be learned from 3D scene dataand how it corresponds to natural language.
Wealso showed that spatial inference and grounding iscritical for achieving plausible results in the text-to-3D scene generation task.
Spatial knowledge iscritically useful not only in this task, but also inother domains which require an understanding ofthe pragmatics of physical environments.We only presented a deterministic approach formapping input text to the parsed scene template.An interesting avenue for future research is toautomatically learn how to parse text describingscenes into formal representations by using moreadvanced semantic parsing methods.We can also improve the representation used forspatial priors of objects in scenes.
For instance, inthis paper we represented support surfaces by theirorientation.
We can improve the representation bymodeling whether a surface is an interior or exte-rior surface.Another interesting line of future work wouldbe to explore the influence of object identity in de-termining when people use ego-centric or object-centric spatial reference models, and to improveresolution of spatial terms that have different in-terpretations (e.g., ?the chair to the left of John?
vs?the chair to the left of the table?
).Finally, a promising line of research is to exploreusing spatial priors for resolving ambiguities dur-ing parsing.
For example, the attachment of ?nextto?
in ?Put a lamp on the table next to the book?
canbe readily disambiguated with spatial priors suchas the ones we presented.AcknowledgmentsWe thank the anonymous reviewers for theirthoughtful comments.
We gratefully acknowl-edge the support of the Defense Advanced Re-search Projects Agency (DARPA) Deep Explo-ration and Filtering of Text (DEFT) Program underAir Force Research Laboratory (AFRL) contractno.
FA8750-13-2-0040.
Any opinions, findings,and conclusion or recommendations expressed inthis material are those of the authors and do notnecessarily reflect the view of the DARPA, AFRL,or the US government.ReferencesYoav Artzi and Luke Zettlemoyer.
2013.
Weakly su-pervised learning of semantic parsers for mappinginstructions to actions.
Transactions of the Associ-ation for Computational Linguistics.2037Nathanael Chambers, Daniel Cer, Trond Grenager,David Hall, Chloe Kiddon, Bill MacCartney, Marie-Catherine de Marneffe, Daniel Ramage, Eric Yeh,and Christopher D. Manning.
2007.
Learning align-ments and leveraging natural logic.
In Proceedingsof the ACL-PASCAL Workshop on Textual Entail-ment and Paraphrasing.Bob Coyne and Richard Sproat.
2001.
WordsEye: anautomatic text-to-scene conversion system.
In Pro-ceedings of the 28th annual conference on Computergraphics and interactive techniques.Bob Coyne, Richard Sproat, and Julia Hirschberg.2010.
Spatial relations in text-to-scene conversion.InComputational Models of Spatial Language Inter-pretation, Workshop at Spatial Cognition.BobCoyne, Alexander Klapheke, MasoudRouhizadeh,Richard Sproat, and Daniel Bauer.
2012.
Annota-tion tools and knowledge representation for a text-to-scene system.
Proceedings of COLING 2012: Tech-nical Papers.Desmond Elliott and Frank Keller.
2013.
Image de-scription using visual dependency representations.In Proceedings of Empirical Methods in NaturalLanguage Processing (EMNLP).Matthew Fisher, Daniel Ritchie, Manolis Savva,Thomas Funkhouser, and Pat Hanrahan.
2012.Example-based synthesis of 3D object arrangements.ACM Transactions on Graphics (TOG).Nicholas FitzGerald, Yoav Artzi, and Luke Zettle-moyer.
2013.
Learning distributions over logicalforms for referring expression generation.
In Pro-ceedings of Empirical Methods in Natural LanguageProcessing (EMNLP).Dave Golland, Percy Liang, and Dan Klein.
2010.A game-theoretic approach to generating spatial de-scriptions.
In Proceedings of Empirical Methods inNatural Language Processing (EMNLP).Alan D. Kalvin and Russell H. Taylor.
1996.
Super-faces: Polygonal mesh simplification with boundederror.
Computer Graphics and Applications, IEEE.Jayant Krishnamurthy and Thomas Kollar.
2013.Jointly learning to parse and perceive: Connectingnatural language to the physical world.
Transactionsof the Association for Computational Linguistics.Girish Kulkarni, Visruth Premraj, Sagnik Dhar, SimingLi, Yejin Choi, Alexander C. Berg, and Tamara L.Berg.
2011.
Baby talk: Understanding and generat-ing simple image descriptions.
In Computer Visionand Pattern Recognition (CVPR), 2011 IEEE Con-ference on.Christopher D. Manning, Mihai Surdeanu, John Bauer,Jenny Finkel, Steven J. Bethard, and David Mc-Closky.
2014.
The Stanford CoreNLP natural lan-guage processing toolkit.
In Proceedings of the52nd Annual Meeting of the Association for Com-putational Linguistics: System Demonstrations.Cynthia Matuszek, Nicholas Fitzgerald, Luke Zettle-moyer, Liefeng Bo, and Dieter Fox.
2012.
A jointmodel of language and perception for grounded at-tribute learning.
In International Conference onMa-chine Learning (ICML).Paul Merrell, Eric Schkufza, Zeyang Li, ManeeshAgrawala, and Vladlen Koltun.
2011.
Interactivefurniture layout using interior design guidelines.
InACM Transactions on Graphics (TOG).George A. Miller.
1995.
WordNet: a lexical databasefor English.
Communications of the ACM.Margaret Mitchell, Xufeng Han, Jesse Dodge, AlyssaMensch, Amit Goyal, Alex Berg, Kota Yamaguchi,Tamara Berg, Karl Stratos, andHal Daum?
III.
2012.Midge: Generating image descriptions from com-puter vision detections.
In Proceedings of the 13thConference of the European Chapter of the Associa-tion for Computational Linguistics.Manolis Savva, Angel X. Chang, Gilbert Bernstein,Christopher D. Manning, and Pat Hanrahan.
2014.On being the right scale: Sizing large collections of3D models.
Stanford University Technical ReportCSTR 2014-03.Adam Vogel and Dan Jurafsky.
2010.
Learning to fol-low navigational directions.
In Proceedings of ACL.Adam Vogel, Christopher Potts, and Dan Jurafsky.2013.
Implicatures and nested beliefs in approxi-mate Decentralized-POMDPs.
In Proceedings of the51st Annual Meeting of the Association for Compu-tational Linguistics.Terry Winograd.
1972.
Understanding natural lan-guage.
Cognitive psychology.C.
Lawrence Zitnick, Devi Parikh, and Lucy Vander-wende.
2013.
Learning the visual interpretationof sentences.
In IEEE Intenational Conference onComputer Vision (ICCV).2038
