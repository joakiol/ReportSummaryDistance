Squibs and DiscussionsParsing and Empty NodesMark Johnson*Brown UniversityMartin Kay tStanford University and Xerox PARCThis paper describes a method for ensuring the termination of parsers using grammars that freelyposit empty nodes.
The basic idea is that each empty no& must be associated with a lexical itemappearing in the input string, called its sponsor.
A lexical item, as well as labeling the no&forthe corresponding word, provides labels for a fixed number, possibly zero, of empty nodes.
Thenumber of nodes appearing in the parse tree is thus bounded before parsing begins.
Terminationfollows trivially.
The technique is applicable to any standard parsing algorithm.1.
IntroductionOne way of guaranteeing that a parsing algorithm will terminate is to ensure that eachstep consumes some finite amount of the input.
There are two main situations in whichthis does not automatically occur, both arising from properties of the grammar.
The firstcomes from nonbranching dominance chains of unbounded length.
The second comesfrom empty nodes.
Most modern grammars do not admit unbounded nonbranchingchains, so that the problem of handling the phenomenon i  parsing does not arisein practice.
It is widely believed that these grammars also do not admit unboundednumbers of empty nodes.
However, these generally constitute a problem in the designof parsing algorithms because the parser's domain of locality does not coincide withthat of the constraints that govern their appearance.This paper presents a proposal for constraining the appearance ofempty nodes thatis applicable to a wide variety of parsing strategies and linguistic theories, includingmany of those within the GB framework.
Ideas like the ones to be presented here havebeen a part of other parsing systems, e.g., Fong (1991a, 1991b) and Millies (1991), andour notion of sponsorship, which we introduce below, can be viewed as a weak versionof lexicalization in TAGs that is specifically focused on determining the distribution ofempty nodes.
The novelty of our approach lies principally in the identification of asingle simple constraint as sufficient o ensure termination of the process.
While itsmotivation is computational, its justification is primarily linguistic.
The next sectionpresents the problem that empty nodes pose for standard parsing techniques.
Section 3introduces the notion of sponsorship, and Section 4 discusses linguistic examples thatdemonstrate the role we see it playing.
Section 5 shows how this proposal might beintegrated into general parsing strategies.
The conclusion summarizes what has beenachieved, suggests avenues for further development, and draws parallels with somedifferent approaches.
* Cognitive and Linguistic Sciences, Box 1978, Brown University, Providence, RI.
E-maihMark_Johnson@brown.edut Xerox Parc, 333 Coyote Hill Rd., Palo Alto, CA 94304.
(~) 1994 Association for Computational LinguisticsComputational Linguistics Volume 20, Number 2IPNP I'Sandy I VPgave VP NPVP AP a big picture of GeorgeI I &V' yesterdayA IV' NP IIA IVNP t .
.
.
.
.
.
.
.
.
.
.
.
-JI I*--t KimFigure 1Extraposition and verb movement.2.
The Problem with Empty NodesThe empty-node problem arises for the following reason.
Given a parsing scheme witha standard notion of locality, there is no limit on the number of empty nodes that itmight be necessary to posit before a configuration emerges in which the constraintsgoverning the appearance of any of them can be verified.We claim that most standard parsing algorithms will face difficulties in constrain-ing the appearance of empty nodes in structures like the one in Figure 1.A bottom-up arser would have to consider the possibility that every V' shouldbe combined with a following empty NP, like the upper V' in Figure 1, to form anotherV', which could then be treated in like manner.
If the subcategorization frame of the Vhead were available, it could be used to bound the number of V r nodes posited.
But, ina structure involving verb movement, he head of the V chain is only integrated ontothe structure after all of the V' nodes have been constructed, so its subcategorizationframe is not available when the V ~ nodes are constructed.
Similarly, the head of theNP chain is integrated too late to constrain the positing of V' nodes.A top-down parser would fare no better because the example is a classic case ofleft recursion.
It might be argued that a top-down parser would have encountered theI head of the V chain before beginning to construct the V' nodes and could thereforeuse its subcategorization frame to determine how many to construct.
However, thiswould require an analysis of the grammar that is beyond the scope of standard parsingprocedures.
Notice that the V trace from which the subcategorization frame is projectedis incorporated into the structure only after all the of V ~ nodes have been constructed.Finally, the number of VP nodes is not determined by the subcategorization frame.No amount of grammar analysis will allow a top-down parser to predict he numberof adjuncts attached to VP.A head-first parser (Kay 1989; van Noord 1993) seems best adapted to the treat-ment of empty nodes.
This mixed parsing strategy in effect predicts a head top-downand builds its complements and specifiers bottom-up.
The trace of the verb wouldbe identified immediately after the I gave had been recognized, since that trace is the290Mark Johnson and Martin Kay Parsing and Empty Nodeshead of the complement of the I.
But it is not clear how such a strategy would copewith empty nodes that do not stand in a head-to-head relationship, such as the traceassociated with the adjoined NP.
The construction of the NP a big picture of Georgewould take place only after that of all of the V ~ nodes to its left.In summary, all of these parsing strategies suffer from the problem that they canposit too many--in some cases infinitely many---empty nodes.
They do this becausethere is no limit on the number of empty nodes that can be posited before the con-straints governing their appearance are verified.Sometimes relatively simple strategies suffice to constrain the appearance ofemptynodes and ensure parser termination.
For example, given a grammatical constraintthat all empty nodes be siblings of appropriate l xical heads, then simply delaying theintroduction of an empty node until the node that dominates it is constructed sufficesto constrain the number of empty nodes that a bottom-up arser posits.
Similarly,for some theories of filler-gap dependencies, notably those based on 'slash features'(Gazdar, Klein, Pullum, and Sag 1985; Pereira 1981), it is possible to use a kind ofprediction to constrain the possible occurrences of empty nodes in a wide variety ofparsing strategies.
However, with more complex theories of grammar, such as thosewithin the GB framework, it is no longer so clear how, or even if, these sorts oftechniques can be applied.3.
SponsoringOur solution to this problem is a device inspired by the notion of licensing in GB(Abney 1986).
According to this conception, the presence and location of each emptynode is justified by the specific structural relations it stands in with other nodes.
Forexample, every noun phrase might be required to receive Case and a &role, and itmay be that the phrase would have to appear at different places in the structure forboth of these assigrunents o be made.
However, it may also be that the phrase canbe represented in one, or both, positions by a related empty category, a trace of thephrase, which is licensed by its fulfillment of this specific role.To guarantee that only a finite number of empty nodes is posited in any analysis,we propose that, whatever parsing strategy is used, there be a global constraint on thenumber of empty nodes that can be posited in any single search path.
We require thatevery empty node be sponsored by some lexical or morphological item that appearsin the input.
By sponsoring we mean that every empty node is associated with somenonempty lexical item, which we call its sponsor, and that the number of empty nodesthat a single lexical token can sponsor is fixed by the lexicon, so that the set of allempty nodes to appear in the parse can be determined irectly by a simple inspectionof the lexical items in the input string.Sponsorship is closely related to lexicalization in TAGs and CFGs (Schabes 1990,1992; Schabes, AbeillG and Joshi 1988; Schabes and Waters 1993; Vijay-Shanker andSchabes 1992).
In a lexicalized grammar every node in the parse tree originates fromsome lexical entry, so parsing becomes a jigsaw puzzle-like problem of finding aconsistent way of assembling the pieces of trees associated with each lexical item.Sponsoring is a weaker notion, in that only some of the constituent structure, namelythe lexical items and empty nodes, are specified in lexical entries.
This seems plausiblein a framework in which general principles of grammar (e.g., X ~ theory, Case theory,etc.)
determine the overall structure of the parse tree.
In addition, finding an appro-priate association of constituent structure nodes with lexical items can be a difficulttask.
Because the sponsoring approach is only concerned with empty nodes, it shouldbe easier to apply it to a wider variety of grannnatical theories than a lexicalization291Computational Linguistics Volume 20, Number 2Lexicon~ii~;:iiiii:iiii!i~iii ' ,5ExtendedLexical Items/  Non-emptyEmptyFigure 2The structure of the lexicon and ELIs.approach, which requires that every node (empty or not) be associated with a lexicalitem (but see the remarks in the conclusion below).We now discuss one way to formulate a sponsoring approach.
A lexical item andthe set of empty categories that it sponsors constitute an extended lexical item (ELI) assketched in Figure 2.
In simple systems, uch as the parser described in the next section,each lexical and morphological entry explicitly specifies the traces that it sponsors, butin more sophisticated implementations this could be determined automatically fromprinciples of the grammar and properties of the lexical entry.
It is not intended thatsponsoring be used to change grammar, but only to impose relatively weak globalconstraints on the appearance of empty categories.There are several variants of the basic idea.
For example, one could require thatall the empty nodes supplied by the lexicon be used in the analysis.
On the one hand,this could lead to a proliferation of lexical entries.
On the other, it could prune thesearch space more effectively if the role of each empty node were made as specific aspossible.As we remarked, previous proposals have made the number of empty nodes-posited a function of the length of the input string.
The novelty of our proposal istwofold.
First, it provides a finer way of estimating the number of empty nodes thatwill occur.
In fact, in the simplest version of the theory, the number of empty andnonempty terminals in a sentence is simply the sum of the sizes of the ELIs of thewords in it.
The number of empty categories i therefore this number minus the num-ber of words.
The fact that the number of empty nodes is bounded before parsingbegins is the most important part of our proposal.Our second proposal is that each of the items in an ELI is marked to show thespecific role it must fill.
Only one member, for example, will be capable of receivinga 0-role, and this member will not be capable of filling any position in which a 0-roleis not assigned.292Mark Johnson and Martin Kay Parsing and Empty NodesCPNP C'which book C IPdoes NP I'i the professor I VP I, I It___.
t V'V CPIthink NP C'It GA IthatI .
.
.
.IPNP I'the student I VPI Iknows V'V NP' I I tI - - t  tIFigure 3Cyclic WH-movement in English.4.
Linguistic Aspects of SponsoringThe goal of this section is to demonstrate hat the constraints hat sponsoring imposesare plausible with respect o current linguistic assumptions.
To the extent hat theyare, an important step will have been taken in establishing the decidability of thesetheories.Consider once again the example in Figure 1.
Because there is a government rela-tionship between the V trace and the NP trace, and a movement relationship betweenthe gave node under I and the V trace, it seems reasonable to include both of thesetraces in the ELI that permits gave to appear under I.
The alternative clearly exists ofallowing every N to sponsor an NP trace to allow, for example, for heavy NP shift of itsmaximal projection.
It does not matter that this would lead to the provision of emptyNP nodes in cases where no movement could occur, because the structures producedby the parser must independently satisfy all the requirements of the grammar.Now consider an example involving cyclic WH-movement, asdepicted in Figure 3.For English, WH-items such as which could sponsor the NP trace at the base of thechain (in Figure 3 the NP trace in embedded object position).
However, we havealready motivated a trace for the subcategorized complement, which should also serveas the foot of the WH-chain.
Sponsors must also be found for the intermediate races.293Computational Linguistics Volume 20, Number 2NPIGeorgeIPI'AI VPI Awants V CPL.__ t C'AC IPI Ae NP I'PRO I VPI Ito V'IVIwinFigure 4Empty C and PRO in English.Because the number of intermediate races that can appear in WH-constructions is notbounded, these intermediate races cannot be sponsored by either the WH-item or theembedded verb.
However, they can be sponsored by the bridge verbs that govern theirCP parents.
For example, the intermediate NP trace in Figure 3 is sponsored by theverb think.Another possibility, inspired by the work of Grimshaw (1990) and Speas and Fukui(1986) on extended projections, is that inflection sponsors a complete set of emptyfunctional nodes (and their specifiers) that can appear in the clause.
In this example,the intermediate race would be sponsored by the inflection -s on knows.
While thefirst approach is perhaps more elegant, the second one also covers relative clauses, asdiscussed below.
Either way, each potential location of an intermediate race will havea sponsor; it is the independent constraints on WH-movement that are responsible forensuring that, if a trace appears, it will be properly incorporated into a WH-chain.The verb movement in Figure 3 can be treated as before.
Presumably the ELI fordoes that permits it to appear under C also sponsors the corresponding trace in I, andthe ELI for knows (or perhaps for the inflectional ending -s) that permits the verb toappear under I also sponsors the trace in V.Next, consider the example in Figure 4.
As well as the by now familiar V to !movement, it also exhibits two examples of empty categories that are not membersof chains, so their sponsors cannot be determined on this basis.
Responsibility forsponsorship of the empty C as well as the PRO could be ascribed to the verb wantsthat governs the CP in which they appear.
This is a control verb and is in any caseresponsible for identifying George as the antecedent of the PRO.
According to thisview the inflected verb wants (i.e., the lexical stem and the inflection) sponsors a totalof three empty categories.
Alternatively, one could allow the infinitive marker to tosponsor PRO and the empty complementizer.
This approach is consistent with the294Mark Johnson and Martin Kay Parsing and Empty NodesJNPADet N'I Athe N' CPI AN NP C'I Iman Op C IPAe NPI ASandy I VPI Isaw V 'A AVNP' I I II _ _ t  tIJFigure 5Empty operators in relative clauses.view that inflection sponsors all of the empty functional nodes of the clause in whichit appears.English relative clauses are a major challenge for the sponsoring approach.
Eventhough relative clauses hare many of the structural properties of WH-question con-structions such as cyclic movement, they can appear in a greater diversity of forms.
Allwe attempt here is a survey of the problems encountered in developing the sponsoringaccount of empty nodes in relative clause constructions and their possible solutions.Consider the case of a relative clause introduced by an empty operator Op (ratherthan an overt relative pronoun), such as the example in Figure 5.The analyses discussed above provide sponsors for every empty node except heempty relative operator Op in the specifier position of CP.
Because the number ofrelative clauses introduced by empty operators i not bounded (examples such as Ex-ample I seem to be indefinitely iterable) we are effectively forced to the conclusion thatinflection, or some other lexical element present inside each relative clause, sponsorsthe empty operator Op in examples uch as Example 1 and Figure 5.Example 1A man lOp1 Kim likes hi, lOp2 Sandy hates t2\] ... and \[Op3 Ivan ignores t3\] ...Even though the structure of reduced relative clauses uch as Example 1 is not aswell understood as ordinary relatives, they presumably involve empty operators aswell.
Assuming that we analyze the passive morphology on the participle as inflection(this seems linguistically motivated if we assume that movement to subject positionis A-movement), the empty operator and all of its traces would be appropriatelylicensed.295Computational Linguistics Volume 20, Number 2IPIPNP I'Kim I VPwrote VP PPI V NP P' I~-- t Det N' P NPr - - - ~CPNP C'Ithat C IPI eNP  I' I , I. .
.
.
.
t I VPwill V NPIanAN'INIarticleI Aon Det N'Iher NItypewriterI /Nchange Det NI Ithe fieldFigure 6Relative clause extraposition.Example  2A horse \[cpOp\[ipt\[vp ridden t\] past the barn \]\] fell.Finally, relative clauses can extrapose quite freely, as in Figure 6.
(This diagram as-sumes that extraposed relative clauses adjoin to IP, but nothing rests on this assump-tion.
)The sponsoring mechanisms discussed above account for all of the empty nodesexcept for the trace of the extraposed relative clause (adjoined to N ~ in Figure 6).
As ananonymous Computational Linguistics reviewer points out, an apparently unboundednumber of relative clauses can be extraposed from a single NP.Example  3A \[N'\[N'\[N' photo tl\]t2\]t3\] appeared in today's paper \[CP3 taken by Mapplethorpe\]\[cP2 showing him smiling\]...  \[cp, that I think you would like\].Just as in the case of empty operator elative clauses, this iterability suggests thatthe extraposition traces must be sponsored by lexical items that appear inside theextraposed relative clauses.
The inflection element in the relative clause seems to bethe most appropriate lexical item to sponsor these traces.To summarize, it seems that it is possible to identify sponsors for the empty nodesfor a variety of linguistic constructions.
Of course, the above examples do not demon-strate that it will always be possible to identify appropriate sponsors.
In any giventheory a detailed analysis of each construction is required to determine the appropriatesponsors.296Mark Johnson and Martin Kay Parsing and Empty Nodes5.
ImplementationThe diagram in Figure 7 shows the structure of a possible implementation f a parsingsystem that exploits the notion of sponsoring.
Square cornered boxes are used for data,and round corners for processes.
Lexical access is applied to the input string to produce(nondeterministically) the extended lexical item (ELI) of each word.
Its output is splitinto a sequence of lexical items and a bag of empty nodes.The parser can be based on any standard algorithm.
It is special only in that all theterminal items in the phrases it constructs come either from the string of lexical itemsor from the bag of empty nodes, so it is impossible for any empty node to appearmore than once in an analysis.An obvious defect of the architecture in this simple form is that, in the absenceof some form of prediction, the parser will consider at all points in the string allthe structures that can be built entirely from empty nodes.
A simple solution to thisproblem is to compute all the trees consisting solely of empty nodes sponsored bylexical items appearing in the utterance to be parsed before beginning the main parsingprocess.
This will make it possible to use a parser that does not deal with empty nodesexplicitly.
The idea is to modify the interface between the parser and the grammar.The fact that sponsoring can be implemented entirely within the "rule-maker" interfaceshows that it can be used with any parsing algorithm.
We take it that the main job ofthis interface will be to manufacture "rules" that enshrine the local well-formednessconstraints on individual nodes.
The modification consists in adding rules to this set.A rule a ~ bl .
.
.
bn will be passed in its original form to the parser, which can use itto build a phrase from n nonempty daughters.
In addition, the rule maker supplies theparser with rules derived from this one by replacing k < n of the bi with empty trees,yielding a rule with n-k  items on the right-hand side.
The parser treats all these ruleson equal footing.
Apart from the sponsoring relationship, there is no requirement thatany of the k empty trees be related to the n-k  nonempty trees that the parser propergets to see.There are certain bookkeeping tasks that can best be undertaken by the rule maker.The most important of these have to do with ensuring that no empty terminal appearsmore than once in any structure.
Concomitantly, it makes it possible to verify, at the endof the parse, that all empty terminals appear in the structure, if this is a requirement.The rule maker can also be used to percolate constraints up or down the tree, possiblydischarging some of them in the process.One remaining problem is to arrange for the parser to include the empty treesin the structures that it builds.
We assume that this information accompanies theInputstring~ LexicalitemsEmptynodesAnalysesFigure 7A simple architecture.297Computational Linguistics Volume 20, Number 2Input ~ Lexicalstring itemsnodesAnalysesFigure 8The modified architecture.rule, perhaps in the form of features on the parent category, as in many unificationgrammars.6.
ConclusionsIt has not been our purpose here to solve the problem of parsing for GB, but only toprovide a mechanism for ensuring that empty nodes do not cause nontermination ofparsing in an important class of cases.
We have made only very general remarks on thearchitecture of a parsing system that would incorporate these ideas, largely becausewe believe that the details of such a design would depend heavily on the mechanismthat was chosen for managing constraints.
Efficient implementation would depend ona good resolution of a number of interacting trade-offs, and there are several of thesewithin our scheme that need to be explored.
In particular, the components of an ELIcould be more or less narrowly specified for the roles they are to fill.
If the nodes arehighly specialized, there will be greater ambiguity in the lexicon and consequentlygreater nondeterminism in the parser.
On the other hand, many of these search pathswill presumably be curtailed earlier than they would have been with less specializednodes.A major determinant of system performance will clearly be the manner in whichconstraints are enforced.
It is possible to distinguish a class of constraints that arise inthe course of parsing but which cannot, in general, be discharged there, and shouldtherefore be treated as part of the result that the parser delivers.
Notable among theseare contraindexing constraints from the Binding theory.Ensuring that each node in an ELI fills the role for which it was intended couldbe resolved through the general constraint mechanism.
However, more specializedmechanisms could sometimes be useful.
Suppose, for example, that the lexical entryfor a noun contained a node specifically intended to receive Case.
If these were theonly nodes whose Case attribute was unspecified, all others having an explicit zerovalue, the required mechanism could consist simply in having all rules assign a valueto this feature, that value being zero except for rules that assign a substantive Case.A somewhat different problem consists of verifying that nodes from a given ELIappear in a certain structural configuration.
Assigning each node a unique identifierallows this problem to be solved straightforwardly by the general constraint mecha-nism.It might be advantageous for the ELI to encode very specific information abouta lexical item and the empty nodes that it sponsors.
For example, the ELI for a WH298Mark Johnson and Martin Kay Parsing and Empty Nodesitem might specify that the traces it sponsors are coindexed with the WH item itself.Assuming that indices are just unbound variables (thus coindexing is unification andcontraindexing is an inequality constraint), an interesting technical problem arises ifthe basic parsing engine uses a chart (Kay 1967, 1980).
Because it is fundamental tosuch devices that the label on an edge is copied before it is used as a component ofa larger phrase, the variables representing indices will be copied or renamed and theindices on the WH item and its sponsored trace will no longer be identical.
However,it is important that the sharing of variables among the components of an ELI berespected when they come together in a phrase.
One way of overcoming this problemis to associate a vector of variables with each edge, in which each variable that isshared between two or more edges is assigned a unique position.
Whenever edges arecombined their associated vectors are unified, thus ensuring that the correspondingvariables in each edge are identified.Finally, our linguistic examples uggest to us that a more focused notion of spon-soring might be formulated.
We observe that, modulo adjunction, empty nodes tendto stand in fixed structural relations to their sponsors.
If this is indeed generally true,then these strong locality constraints should clearly be exploited in the parsing process.This amounts to adopting the framework of Tree Adjoining Grammars (Frank 1990;Joshi, Levy, and Takahashi 1975; Kroch and Joshi 1985; Schabes 1990).
The emphasiswould then fall on deriving the initial and auxiliary trees from the general principlesof grammar.AcknowledgmentsThis research was supported by the Institutfi.ir maschinelle Sprachverarbeitung at theUniversity of Stuttgart.
We would like tothank Professor Christian Rohrer and themembers of the Institut for providing uswith this opportunity.
We are also indebtedto Lauri Karttunen and two anonymousComputational Linguistics reviewers for theirhelpful comments during the preparation ofthis paper.ReferencesAbney, Steven (1986).
"Licensing andparsing."
North Eastern Linguistic Society17, 1-15.Fong, Sandiway (1991a).
"Thecomputational implementation fprinciple-based parsing."
InPrinciple-Based Parsing: Computation andPsycholinguistics, edited by RobertC.
Berwick, Steven P. Abney, and CarolTenny, 39-65.
Kluwer AcademicPublishers.Fong, Sandiway (1991b).
Computationalproperties of principle-based grammaticaltheories.
Doctoral dissertation,Massachusetts Institute of Technology.Frank, Robert (1990).
Computation andlinguistics theory: A government bindingparser using tree adjoining rammar.Master's dissertation, University ofPennyslvania.Gazdar, Gerald; Klein, Ewan; Pullum,Geoffrey; and Sag, Ivan (1985).
GeneralizedPhrase Structure Grammar.
Blackwell.Grimshaw, Jane (1990).
Argument Structure.MIT Press.Joshi, Aravind K.; Levy, L. S.; andTakahashi, M. (1975).
"Tree adjunctgrammars."
Journal of Computer and SystemSciences, 10(1).Kay, Martin (1967).
"Experiments with apowerful parser."
2~me ConferenceInternational sur le traitment automatique d slanguages, Grenoble, France.Kay, Martin (1980).
"Algorithm schemataand data structures in syntacticprocessing."
In Readings in NaturalLanguage Processing, edited by BarbaraJ.
Grosz, Karen Sparck Jones, and BonnieLynn Weber, 35-70.
Morgan Kaufmann.Kay, Martin (1989).
"Head-driven parsing.
"In Proceedings, 1st International Workshop onParsing Technologies, Pittsburgh, PA, 52---62.Kroch, Anthony, and Joshi, Aravind K.(1985).
"Linguistic relevance of treeadjoining rammars."
Technical ReportMS-CIS-85-18, Department of Computerand Information Science, University ofPennsylvania.Millies, Sebastian (1991).
"Modularity,parallelism and licensing in aprinciple-based parser for German.
"CLAUS Report Nr.
17,Computerlinguistik, Universit/it desSaarlandes.299Computational Linguistics Volume 20, Number 2Pereira, Fernando C. N.
(1981).
"Extraposition grammars."
ComputationalLinguistics, 7(4), 243-256.Schabes, Yves (1990).
Mathematical ndcomputational aspects of lexicalized grammars.Doctoral dissertation, University ofPennsylvania.Schabes, Yves (1992).
"Stochastic lexicalizedtree-adjoining grammars."
In Proceedings,Fifteenth International Conference onComputational Linguistics (COLING-92).Nantes, France, 426-432.Schabes, Yves; AbeillG Anne; and Joshi,Aravind K. (1988).
"Parsing strategieswith 'lexicalized' grammars: applicationto tree adjoining rammars."
InProceedings, 12th International Conference onComputational Linguistics.
Budapest,Hungary.Schabes, Yves, and Waters, Richard C.(1993).
"Lexicalized context-freegrammars."
In Proceedings, 31st AnnualMeeting of the Association for ComputationalLinguistics.
Columbus, Ohio, 121-129.Speas, M., and Fukui, N. (1986).
"Specifiersand projections."
In MIT Working Papers inLinguistics 8, Department of Linguisticsand Philosophy, MIT, Cambridge, MA.van Noord, Gertjan (1993).
Reversibility innatural anguage processing.
Doctoraldissertation, University of Utrecht.Vijay-Shanker, K., and Schabes, Yves (1992).
"Structure sharing in lexicalizedtree-adjoining grammars."
In Proceedings,15th International Conference onComputational Linguistics (COLING-92).Nantes, France, 205-211.300
