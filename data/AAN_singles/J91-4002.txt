Systemic Classification and its EfficiencyChr i s  Brew"Department of Experimental PsychologyandHuman Communication ResearchCentreThis paper examines the problem of classifying linguistic objects on the basis of informationencoded in the system network formalism developed by Halliday.
It is shown that this problemis NP-hard, and a restriction to the formalism, which renders the classification problem solublein polynomial time, is suggested.
An algorithm for the unrestricted classification problem,which separates a potentially expensive second stage from a more tractable first stage, is thenpresented.1.
IntroductionIn this paper we describe algorithms that enable the system networks of SystemicGrammar (HaUiday 1976, 1975) to be exploited in applications, such as natural lan-guage understanding, that require incremental description refinement.
We are attractedto the system network formalism on three main counts:Potential Reversibility.
System networks fit well with a model of linguistic behavioras goal-directed action, since they encode grammatical information in the form of setsof interconnected choices that a language user needs to make in order to produceapposite and communicative utterances.
It seems natural to exploit this informationfor comprehension as well as generation.Computational Convenience.
System networks look simple, yet are expressive noughto allow the development of substantial grammars.
If this apparent simplicity is re-flected in the mathematical properties of the system network formalism then it maybe possible to design cheap description refinement algorithms that use the networks.Wider Applications.
If the networks turn out to be easy to process, they may havewider applications in tasks requiring representation f nonlinguistic knowledge.
Wethink that the tasks for which such networks are most likely to be appropriate are thosefor which conventional taxonomic representations are nearly, but not quite, sufficient.Our algorithms (presented in the final part of this paper) operate by converting asmuch as possible of the information contained in the networks to taxonomic form.?
University of Sussex, U.K., and 2 Buccleuch Place, Edinburgh, U.K., currently at Sharp Laboratories ofEurope Ltd., Oxford, U.K.
Supported by a studentship provided by the Science and EngineeringResearch Council's Information Technology Initiative.
I am grateful to several colleagues forconstructive discussions ofthis work, and particularly to Stephen Isard and Robert Dale, who werekind enough to provide detailed commentary on earlier drafts.
I am also indebted to two anonymousreferees for suggestions that substantially improved the paper.
None of those mentioned areresponsible for any remaining errors or infelicities.Q 1991 Association for Computational LinguisticsComputational Linguistics Volume 17, Number 4questionANIMACYPNpersonal PERSONdemonstr fPLACE IFigure 1Winograd's pronoun etwork.animateinanimateCASEfirstsecondthirdsubjectiveobjectivereflexivepossessivepossdetsingularNUMBER I pluralnearfarI feminineGENDER masculineneuterIn this paper we shall be presenting formal arguments about the capabilities ofthe system network formalism, working at a level of detail that would make the pre-sentation of large scale linguistic examples prohibitively tedious.
Our main examplewill therefore be the network shown in Figure 1.
This network provides informationabout the choices a speaker needs to make in order to correctly produce English pro-nouns.
Similar networks can describe the choices that have to be made in order togenerate other components of an utterance, such as sentences, verb phrases, or into-nation contours, but for present purposes pronouns will prove sufficient illustration.We have applied the ideas described in this paper to a parsing system that acceptsthe language generated by the grammar of a pre-existing (Houghton 1986; Houghtonand Isard 1987) dialog generation system.Our algorithms are presented in a somewhat stylized form, since the primary in-tention is to expose the nature of the problems involved rather than to provide detailedinformation about the implementation of our parsers.
For instance, we describe datastructures that are closely related to the tapes of a two-tape Turing machine, but inthe corresponding implementation the behavior of these data structures i  mimickedby a program that manipulates nested Prolog terms.
Were we to present he details ofthe real implementation, it would tend to obscure the most significant properties ofthe algorithm.376Chris Brew Systemic Classification and its EfficiencyRealization Rulesquestion animate subjective ~ whoquestion animate objective ~ whomquestion animate possessive ---* whosequestion inanimate --* whatdemonstr singular near --, thisdemonstr singular far ~ thatdemonstr plural near --* thesedemonstr plural far - *  thosepersonal first singular subjective --* Ipersonal first singular objective --* mepersonal first singular reflexive --* myse l fpersonal first singular possessive ---* minepersonal first singular possdet --* mypersonal second singular subjective ~ youpersonal second singular objective --* youpersonal second singular reflexive --* yourse l fpersonal second singular possessive --* yourspersonal second singular possdet ~ yourpersonal first plural subjective ~ wepersonal first plural objective -*  uspersonal first plural reflexive --* ourselvespersonal first plural possessive --* ourspersonal first plural possdet --.
ourpersonal second plural subjective --* youpersonal second plural objective -*  youpersonal second plural reflexive --* yourse lvespersonal second plural possessive --+ yourspersonal second plural possdet ~ yourpersonal third singular subjective feminine ~ shepersonal third singular subjective masculine --* hepersonal third singular subjective neuter --* itpersonal third singular objective feminine --+ herpersonal third singular objective masculine ~ h impersonal third singular objective neuter --* itpersonal third singular reflexive feminine --* herselfpersonal third singular reflexive masculine ~ h imse l fpersonal third singular reflexive neuter --* itselfpersonal third singular possessive feminine --* herspersonal third singular possessive masculine --+ hispersonal third singular possessive neuter --* itspersonal third singular possdet feminine --* herpersonal third singular possdet masculine ~ hispersonal third singular possdet neuter --+ itspersonal third plural subjective --* theypersonal third plural objective --* thempersonal third plural reflexive --* themselvespersonal third plural possessive ~ theirspersonal third plural possdet --* theirFigure 2Realization rules for Winograd's pronoun etwork.377Computational Linguistics Volume 17, Number 42.
System Networks in NLP2.1 Systemic Language ProductionIn many language-generation systems, such as those described by Davey (1978), Wino-grad (1972), Houghton (1986), Houghton and Isard (1987), and Mann and Matthiessen(1985), system networks are used to structure the decisions the system needs to makein the course of producing a syntactic onstituent.
Each network lays out a set of inter-connected options, but does not specify how the system chooses between the optionsin a particular situation.In systemic grammar, language production involw,~s the task of traversing a net-work, gradually making choices that incrementally specify various aspects of the formof an utterance.
As choices are made the system collects features that are eventuallyrealized in an appropriate form.
A brief example of how this process might be appliedto Figure 1 is given below.2.1.1 I~oughton's Dialog System.
The system on which our work is based (Houghton1986; Houghton and Isard 1987) is an unusual synthesis of ideas from systemic gram-mar with a unification-based phrase structure grammar.
It is at its most systemic in itsapproach to what (Halliday 1975, p. 5) refers to as functions in structure, but containsnothing directly corresponding to the macro-functions by which Halliday character-izes the functions of language.
In other words, Houghton's ystem retains the role ofsystemic networks in codifying choice, but the architecture does not align with tripar-tite systemic distinction between textual, ideational, anti interpersonal macro-functions(Winograd 1983, p. 288).An interaction between two simulated agents is largely controlled by a representa-tional level of interaction frames, which lays out a space of possible moves that allowan agent o initiate conversations, request information from an interlocutor, signal as-sent, convey information, and so on.
This work is in the tradition of Davey (1978)and Power (1979), emphasizing the gamelike structure of multi-agent dialog in pref-erence to the textual structure of extended monolog.
In this context here seems to belittle need for an explicit representation f the systemic macro-functions: Houghton'sinteraction frames suffice.The interaction frames pecify a repertoire of actions available to a simple planningmechanism that the agents use to carry out tasks specified by the system designer.
Theagents make no distinction between different ypes of action, and linguistic behavioronly arises when it becomes necessary for an agent to enlist help to achieve its top-level goal.
It is just as valid to find something out by looking as by asking, althoughinteresting linguistic behavior will only occur in the latter case.Houghton (1986) defines the interaction of Making Something Known as follows:Part ic ipants  --- in i t iator <has_type AGENT>addressee <has_type AGENT>prop <has_type FACT>End Goal --- know(addressee,prop)Effect --- know(addressee,know( in i t iator ,prop))Precondi t ion --- know(ini t iator ,not(know(addressee,prop)) )Response --- addressee -> update wor ldv iewinit iator -> check acceptanceReply --- accept or reject informat ion378Chris Brew Systemic Classification and its Efficiencyand comments thatThe goal of this interaction is to get the addressee to know something.The immediate ffect here is that they will at least know that you knowit, and the precondition is that the initiator believes the addressee doesnot already know it.
The response of an addressee is to attempt ointegrate that information into its current beliefs.
The initiator waitsfor uptake of the information, which is indicated by the addressee'sreply.
(Houghton 1986, p. 90).In order to achieve the goal of informing someone that a door is locked, the speakerwould instantiate in i t ia tor  to point to herself, addressee to indicate her addresseeand prop to stand for something like locked(door_a), setting up the environmentwithin which linguistic decisions are to be made.In principle an agent is free to draw on any available information in order toreach decisions about the choices offered within Houghton's ystemic networks, andthe outcome of these choices will affect he eventual form of the utterance.
In practicethe types of information available to the agent can be brought into a rough and readycorrespondence with the types of information carried by Halliday's macro-functions.We present our view of the correspondence solely to provide orientation for readersalready familiar with systemic grammar and the tri-partite systemic distinction firstmentioned above.Information about interpersonal factors is available from inspection ofthe state of the current dialog game.
This allows the agent to keep' trackof why it is trying to speak.
At this level we are only interested in thetype of dialog game, the speaker's role within that dialog, and the stagethat has been reached within the execution of that game.Information about ideational factors comes primarily from thepropositional content embedded within the instantiated interactiontemplate.
Reference to the propositional content ensures that the systemknows what it is trying to express.
The distribution of propositionalcontent between elements of the eventual utterance is mediated by asimple (de)compositional semantics using a lambda calculus-likerepresentation similar to that provided by Pereira and Shieber (1987).The propositional content hat is assigned to a particular constituent isextensively used by the chooser functions that determine the choicesmade in the course of realizing that constituent, but it is not the soledeterminant of the eventual form of the utterance.Information about the component that Halliday calls textual is almostunnecessary in Houghton's ystem, since the tightly constrainedstructure of the dialogs make explicit signalling of topic or textualinterconnections largely redundant.
Houghton's agents are too simpleand too single-minded to indulge in the sort of topic shifts that seemtypical of real dialog, so there is no need to make available textualresources capable of signalling such shifts.
Textual factors neverthelessplay a role in the patterning of pronominalization decisions, and theinformation ecessary for making these decisions comes primarily from379Computational Linguistics Volume 17, Number 4a record of the preceding dialog maintained by the system.
This is partof the task of deciding how to say what it is that needs to be said.Given the simplicity of the domain and the actors, the nature of the dialog, theabsence of an explicitly represented version of Halliday's tripartite distinction, and thecentral role of the planning system, the issue of how tlhe various components interactloses much of the importance it has in standard systemic grammar.
While Houghtondoes provide a mechanism by which making a choice at a particular node of a systemicnetwork may, as a side effect, pre-empt decisions that might otherwise need to be madelater, the issue of parallel selection of features does not matter as much as it would ina system where autonomous textual, ideational, and interpersonal components wereacting in tandem to constrain the form of a text.In standard systemic grammars the connection between features and utterancesis encoded in the form of realization rules.
In Houghton's ystem the realization rela-tions are specified indirectly by means of an association between sets of features andthe production of a context-free phrase structure grammar.
Generation begins witha single node that will eventually span the whole sentence, and proceeds by recur-sively expanding that node until a complete phrase marker is produced.
Whenever anode needs to be expanded the system collects a set of features by traversing one ormore systemic networks, then uses the features to select an appropriate productionfrom the context-free part of the grammar.
The recursive generation of constituentsterminates when it reaches a situation where all the current leaf nodes can be realizedlexically.
The phrase structure component encodes the range of available constructionsand mediates the distribution of semantic ontent o the leaves of the tree.
For a moredetailed account of the generation process see the descriptions in Houghton (1986)and Houghton and Isard (1987).2.1.2 The Generation of Pronouns.
Having sketched the reasons for which we becameinterested in the properties of systemic networks and their role in a grammar, we nowreturn to the discussion of system networks as formal objects in their own right, whichis the main subject of this paper.
Sample realization rules for English pronouns areprovided in Figure 2.
For pronouns, the realization relationship is particularly simple,since every distinct set of features that can be produced by the network maps onto asingle lexical item.
Throughout the rest of the paper we shall be using the generation ofpronouns as a place holder for the more elaborate generation process outlined above.Let us consider two situations in which a hypothetical language-generation systemmight need to generate a pronoun, and trace the choices that need to be made.
In bothcases the system is attempting to brief its client about a government decision, but inthe first situation it has just produced the sentence The government has decided to raisetaxes, but in the second the corresponding sentence was The government have decidedto raise taxes.
These sentences are both grammatically acceptable in British English, butin one case the government are seen as a collection of people while in the other it isbeing treated as an entity in its own right.
1 In either case the system now wants to tellthe user that the government is/are unlikely to carry out its/their decision before thenext election.
21 The sentence containing this footnote isdeliberately infelicitous, illustrating the mistake that wewouldn't want the system to make.2 Stephen Isard points out that the parallel sentences The government has fallen and The government havefallen describe very different situations; evidently it is an oversimplification t  suppose that ageneration system has an entirely free choice between the alternative ways of referring to governments.380Chris Brew Systemic Classification and its EfficiencyThe system's understanding of pronoun use is based on the network shown inFigure 1, which it will use in choosing an appropriate pronoun for each of thesesituations.The traversal of the network starts at the left-hand side.
The first choice that hasto be made is the one between question, personal and demonstr.
In both cases weneed a personal pronoun rather than a question pronoun or a demonstr one.
We arenow faced with the need for decisions on CASE, PERSON and NUMBER.
Let us stipulatethat the government, however we describe it, is to be the subject of the sentence; thepronoun therefore receives the feature subject i re  in both cases.
The pronoun also hasto be th i rd  person, since neither the system nor its client is the subject of the plannedsentence.
However the choice of NUMBER depends on the choice that was made earlierin the discourse, so in the first case the system will need to choose s ingular and in thesecond it will need plural .
If it chooses p lura l  it has reached the edge of the network,and can use the collected feature set to access the appropriate pronoun, which is they.However, if it chooses ingular it still needs to decide whether the governmentrequires a feminine, masculine or neuter pronoun, since otherwise it cannot decidebetween she, he, and it.
The system network formalizes the availability or otherwiseof the GENDER choice by placing the corresponding system in a position that can onlybe reached if the pronoun being generated is both th i rd  and singular.
Of course, amore elaborate process is involved in the generation of complex constituents, but theprinciple remains the same: networks are traversed, produce sets of features, and thefeatures are used to guide the construction or selection of sub-constituents.2.2 Systemic Language AnalysisBy specifying the range of options available to the language user a system networkdefines a set of possible outcomes to the generation process, and hence also a space ofpossible structures corresponding to the various feature sets that can be obtained bytraversing the network.
It may be that the networks admit structures that are never infact used by the system as a whole, but without knowledge of the details of the mecha-nism by which choices are made we cannot exploit any additional constraints imposedby the process of realization.
In this paper we focus on the use of the networks as aknowledge source in their own right.
Systemic networks form a terminological repre-sentation system in the sense of the term used in work on KL-ONE and its successors(Brachman and Schmolze 1985; Nebel 1990).
We would like to understand the natureof the knowledge they express well enough to be able to use system networks as thebasis of a general, and perhaps computationally convenient, erminological languagefor use in linguistic applications.
Our approach is very close to that of Mellish (1988),as well as to a multitude of other formalisms involving partial descriptions, uch asShieber (1986).By way of example, consider the word your, as it is described by the network andrules in Figures 1 and 2.
Without further information we do not know whether it iss ingular or plural ,  although we can be sure that it is second, personal and possdet.This information will sometimes be provided by context.
In the sentence You shouldnot take my word for it, but bolster your own intuitions by inspecting the realization rulesfor yourselves, we eventually discover that the writer is addressing the sentence to anaudience of more than one person.
In generation the system would presumably havemade a decision about which mode of address was more appropriate, but when usingthe same networks and rules for interpretation the partial nature of the information atour disposal complicates the task of using the knowledge ncoded by the networks.Note that the clinching yourselves appears everal words after the instance of your inquestion, and that it could equally well have been yourself.381Computational Linguistics Volume 17, Number 42.2.1 Systemic Classification.
Following Mellish, we refer to the task of using systemnetworks in comprehension as systemic lassification.
We conceive of this as an ac-tivity similar to the taxonomic lassification carried out by biologists.
By making useof the observable features of a specimen we attempt to pin down the point at whichthat specimen ought to be accommodated within the space of structural descriptionswe have at our disposal.
On the assumption that the slpeaker's linguistic options arecorrectly described by a particular collection of networks, a listener is entitled to makeinferences from this assumption, and to use knowledge of the form of the systemnetworks in the search for a plausible global hypothesis about the properties of theutterance that the speaker seems to have produced.
Because the choices made by aspeaker are interdependent, a plausible hypothesis about part of the description of anutterance may allow us to reconstruct part or all of the missing portion of the descrip-tion.
The job of a scheme for systemic lassification is to provide efficient and correctalgorithms for the construction of consistent descriptions and the rejection of inconsis-tent hypotheses.
Nebel (1990) discusses a slightly more general notion of classification,applicable to a knowledge representation language like NIKL (Kaczmarek, Bates, andRobins 1986), BACK (Von Luck et al 1986) or LOOM (MacGregor and Bates 1987).The notions of subsumption that operate in such rich formalisms are more sophisti-cated, but the essential idea of classification, amely the organization of terms intoa pre-computed subsumption hierarchy, remains the same.
As in Mellish's work, themain goal is to gain efficiency by pre-computing some or all of the useful subsump-tion relationships that hold between descriptions.
For the purposes of this paper thedescriptions are feature-based systemic descriptions and the role of the pre-computedsubsumption graphs described by Nebel is played by the specially designed encod-ings that ensure that subsumption i formation is readily available at run-time.
Thereis of course a price to pay for this run-time fficiency, since we have to pre-process thenetworks in order to establish the encoding relations that will be of use at run-time.For the purposes of analyzing an utterance, the most important property of thefeature system induced by a system network is the followingAny system network defines a set of atomic labels that can be com-bined to form descriptions of linguistic objects.
It also provides acom-plex of constraining principles that conspire to declare inconsistentcertain combinations of features.For example, the network in Figure 1 expresses the constraint that no pronoun canbe specified as both feminine and masculine, and also the constraint that only thirdperson singular pronouns can bear either of these features.2.3 Prior Work on Systemic Language AnalysisWinograd (1983) and McCord (1977) have both provided techniques that re-expresssystem networks and their associated realization rules as hand-crafted recognitionprograms.In both cases this amounts to a proceduralization f the grammar, and runs therisk of making it even harder than necessary to debug a malfunctioning grammar.
Weprefer to adopt a more declarative approach, in which the grammar is represented ina form as close as possible to that with which linguists actually work.Patten and Ritchie (1986) have produced a formal account of what a systemic gram-mar is.
This covers the whole of Systemic Grammar, including the realization rules andthe details of the way in which choices are made as well as the networks that are thepresent concern.
Patten and Ritchie are primarily concerned with language-generation382Chris Brew Systemic Classification and its Efficiencyrather than comprehension, but since they aim for a declarative specification of thegeneration relationship between systemic grammars and the utterances they license,it might be possible to use their grammars in either direction.
For Patten and Ritchiea systemic grammar is encoded as a set of rules for a production system, and thegeneration process involves the application of these rules.Kasper (1987a, 1987b) has designed algorithms that involve the encoding of bothsystem networks and the associated realization rules as constraints expressed within afeature logic involving disjunction.
He then implements the key operation of unifica-tion by applying a general technique for unification of disjunctive feature descriptions(Kasper 1988).
These techniques decompose the problem of disjunctive unification intothree stages, only the last of which is exponentially hard.
We are not attempting tomatch his general algorithms for disjunctive unification, but rather to design specialpurpose algorithms that are particularly suitable for use with system networks, andparticularly for those networks that play a role in Houghton's ystem.In practice the set of constraints that Kasper develops from his systemic grammaris too large to solve conveniently with the constraint-solving technology availableto him, so he augments the constraint grammar with a small hand-crafted phrasestructure component.
The main motivation for this move is the search for efficiencyrather than any particular wish to use a phrase structure grammar.
Kasper's basicstrategy remains that of building up a large set of constraints that can then be solvedby general theorem-proving techniques.Like Kasper, we use a chart parser, but in our case the phrase structure grammaris an essential component of the knowledge used by the system rather than a small ad-dition required for the sake of efficiency.
This makes no difference from a formal pointof view, but reflects our strategy of using appropriate special purpose mechanisms inpreference to potentially costly general techniques.
Although system networks, sys-temic realization rules, and context-free grammars can all be translated into formulaeof Kasper's extended FUG, our approach as been to investigate ways in which theknowledge contained in these components can be exploited using simpler methods.While Kasper's approach involves the translation of system networks into a moregeneral constraint formalism, Mellish (1988) displays encodings that reduce the keyoperations of systemic lassification to straightforward manipulations of PROLOG-like terms.
Unfortunately, it turns'out hat system networks ometimes need a ratheropaque ncoding, which would require costly re-translation if users needed to inspectthe workings of an NLP system that used it.
The general encoding is in principlecapable of handling any system of constraints expressed in the propositional calculus,and makes no use of the particular structure of systemic descriptions.Mellish's approach to the implementation of systemic lassification is to constructstructure preserving mappings from the space of systemic descriptions to an isomor-phic space in which classes of entities are represented by terms taken from the GAFlattice.
3These terms act as partial descriptions of linguistic objects, and are combinedusing the operation of term unification.
Unfortunately the only generally applica-ble mapping that Mellish is able to offer has unpleasant properties, producing largeterms whose internal structure has little in common with the structure of relation-ships between the descriptive feature labels used in the network.
4Although the termsproduced by the brute force mapping are spectacularly arge, our main objection to3 For most purposes this lattice is the same as the recursively defined space of terms used by PROLOG,but for a technical introduction see (Reynolds 1970).4 The terms produced represent classes of objects by a technique little different from exhaustiveenumeration.383Computational Linguistics Volume 17, Number 4this approach is the loss of transparency associated with the mapping.
It doesn't seemlikely that a linguist would feel comfortable with the output of the mapping, so agrammar development system would presumably have to include facilities for trans-lating the machine representation back into more readable form.
Although the simplermappings that Mellish has developed for more restricted forms of network do offermore perspicuity, we feel that even in those cases our representations are at least asaccessible to the human user as Mellish's, which do not in any case generalize to thefull system network formalism.Our view of the nature of system networks is close to those of Mellish and Kasper,since we try to separate questions about he underlying meaning of the networks fromdecisions about the processes by which they can be exploited.
We treat system net-works as alternative notations for sets of logical axioms constraining the co-occurrenceof property symbols in descriptions.
Nothing more elaborate than the propositionalcalculus is required.
In principle one could apply standard theorem-proving techniquesto these axioms, but in practice it is better to employ special purpose techniques thatmake more use of the structure inherent in the networks.
The translation of systemnetworks into logical axioms is very similar to the one described in Mellish (1988), butby adopting a slightly different labeling scheme we obtain a little extra clarity, whichhelps when we come to design algorithms that make use of the axioms produced.2.3.1 Classification and Consistency Checking.
In order to carry out classification weneed to answer the following questions1.
When is an object an instance of a given description?2.
When may two given descriptions describe the same object?3.
Given two descriptions of the same object, how may the descriptions becombined to produce a more fully specified escription?and in order to answer the questions we need to understand the behavior of the keyoperations of subsumption checking and unification as they apply to the descriptionspace within which we are operating.
Both these operations can effectively be treatedas special cases of consistency checking.This is the operation of checking a conjunction of positive and negative booleanattributes for consistency with the axioms derived from a network.
This should succeedif the conjunctive description picks out a nonempty class of objects from those capableof being derived from the network, but to fail if there is no object which can meet theconstraints imposed.Unification.
For descriptions consisting of atomic symbols generated from a systemnetwork the operation of unification between two descriptions D1 and D2 consists oftwo stages.1.
The formation of the conjunction D such that D contains the union of allthe feature specifications given in D1 or D2.2.
The checking of this new description D for consistency with theconstraints arising from the system network.We shall see that it is the consistency checking that makes this operation potentiallycostly.384Chris Brew Systemic Classification and its EfficiencySubsumption.
One description D1 subsumes another D2 if all possible objects correctlydescribed by D2 are also correctly described by D1.
If A subsumes B then B D A. Ifthat is so then B A -~A is unsatisfiable.
If A is an atomic symbol then B A -~A can bechecked irectly for consistency; otherwise -~A has to be expanded out, yielding(B A -~al) V (B A -~a2) V... (B A -~an)In order to prove that B D A we have to show that none of the alternatives givenabove can ever be satisfied.
The subsumption check fails the moment any of the dis-junctive alternatives is found to be a description of a legal object.
While the individualbranches of this checking process can be carried out as efficiently (or inefficiently) asunification itself, the preliminary expansion to disjunctive normal form is potentiallycostly.
This is doubly unfortunate since the expansion depends on the input expres-sions, and therefore cannot be carried out at compile time.
This problem evaporatesif we restrict ourselves to networks lacking disjunctive systems, 5 since Mellish's term-encoding techniques allow both subsumption and unification to be implemented usingstandard operations familiar in logic programming.Realization Rules and Disjunction.
Although the features mentioned in the systemnetworks may in fact correspond to large disjunctions of different low-level featureswhen the networks and the realization rules are compiled together into one largeconstraint system, we treat the realization rules by a different mechanism and cantherefore continue to regard the features as atomic.
Our primary concern is to ensurethat the basic feature-matching operation carried out by our chart parser is efficientenough to be carried out many times in the course of analyzing utterances.
The im-plicit disjunction between the different productions of Houghton's phrase structuregrammar is handled by the usual techniques of chart parsing, which are describedin, for example, section 3.6 of Winograd's textbook (Winograd 1983).
Since these tech-niques are acceptably efficient, there is no pressing need to adopt Kasper's approach,within which the realization rules are conjunctive constraints, and the effect of includ-ing realizations i to change the representation f choice systems from disjunctions ofatomic formulae into disjunctions of complex formulae.
As before, our approach is toreplace the general mechanism with a less powerful technique that is well attuned tothe task in hand.2.4 Labeling System NetworksThis section describes the process of translating system networks into logical axioms.As an intermediate stage we build a specially labeled version of the network withwhich we are working.
In order to do this we need a more formal characterization fsystem networks than we have yet presented.A system network is made up of possibly labeled lines tied together by systems.In the system networks described by Mellish some, but not necessarily all, of the linesare labeled with items chosen from a set of distinct atomic symbols.
The examplein Figure 1 shows such a labeling.
In this scheme there is only one sort of label, nodistinction being made between words that are usually thought of as feature names(such as NUMBER) and those that would more naturally be feature values (such assingular or plural).
We would in any case like a labeling scheme that makes aclean distinction between feature names and feature values, and it turns out that5 These are defined in the next section.385Computational Linguistics Volume 17, Number 4demonstrfemininemasculineneuterChoice systemdemonstrVpersonalpersonalDisjunctive systempnpnAnd!ystem pnsingularthird } singularthirdAConjunctive systemFigure 3Types of system.suitable slight modifications inMellish's scheme greatly simplify the task of translatingnetworks into equivalent sets of axioms.
We start by introducing the new labelingscheme, and showing where it differs from Mellish's version.The differences between the labeling schemes are small.
Networks labeled in ourstyle continue to represent the same information as would be contained in the samenetworks labeled by Mellish or Winograd.
All that is gained is a measure of uniformityand clarity, which helps simplify the task of translating networks into logic.2.4.1 Types of System.
There are four distinct ypes of system, each of which has onecollection of lines as its right-hand side and another collection as its left-hand side.For a given system s these are notated as RHS(s) and LHS(s), respectively.The choice system has one line on its left-hand side and a number of lines greaterthan one as its right-hand side.
Informally it represents a choice of exactly one attributefrom those given by the labels attached to the lines in the right-hand side.The system at the top left of Figure 3 is a choice system in which the alternationbetween feminine, masculine, and neuter is expressed.The system at the top right of the figure represents a form of conjunction.
Wherethe choice system contains a vertical ine standing for disjunction, the and systemrepresents conjunction with a left curly bracket (i.e.
{).
Again exactly one line mustappear on the left-hand side of the system, and there should be a larger number oflines on the right-hand side.
And systems mean that all the right-hand lines of thesystem will be tried whenever the left-hand line is reached.
Since no choice is made,no feature is generated by traversing an and system.The next two types of system both have compound entry conditions, with oneline on their right-hand side, but several feeding in to their left-hand side.
Since theyrepresent forms of disjunction and conjunction they will be referred to as disjunctivesystems and conjunctive systems respectively.
We only make progress through theright-hand line of a conjunctive system if all the left-hand lines of the system are386Chris Brew Systemic Classification and its Efficiencytraversed.
For disjunctive systems we can get through to the right-hand line if one ormore of the lines on the left-hand side are traversed.
The system at the bottom leftof the figure is a disjunctive system, and the one at the bottom right is a conjunctivesystem.2.4.2 Well-Formedness Requirements for System Networks.
This section sets out ourdefinition of what it means when we say that a system network is well formed.
Givena system network, the precedes relation between lines is the smallest relation such that1.
nl precedes n2 ifnl E LHS(s), n2 E RHS(s)for some system s in the network.2.
nl precedes n2 if for any line n3 in the network nl precedes n3 and n3precedes n2.If nl precedes n2 then nl is a predecessor f n2.
In a well-formed system network noline may precede itself.
Strictly speaking, this is a deviation from Systemic Grammar aspresented in Hudson (1971), which explicitly permits cyclic systems.
For our purposescyclic networks are unsatisfactory, because useful cyclic paths in the network have tobe traversed more than once.
If network traversal is to terminate, the choices made onthe last traversal of such a path have to differ from those made on earlier traversals.The sets of features that could be generated by a network would then depend not justupon the structure of the network but also on the way it was used by a particulargeneration system.
Our techniques would have nothing to say about this situation,since we are examining the networks in their own right, and do not have access to thecriteria by which the choices are made.
We are therefore outlawing cyclic networksfor the moment.Assuming that the graph formed by the system network is acyclic implies thatthere must be at least one line that is not preceded by any other.
If there is morethan one such line, then the network has multiple entry points and no obvious intu-itive meaning.
For the sake of definiteness we decree that such networks will not betranslated as such, but will instead be prefixed with a single and connective, whoseleft-hand side contains a single new line, and whose right-hand side comprises theset of lines that would otherwise have had no predecessor.
There is now exactly oneline with no predecessor, which can be referred to as the root.
The root of Figure 4is the line labeled with e. It is possible to draw networks in which certain regions ofthe network can never be reached.
The simplest case of this involves distinct branchesof a choice system feeding into a conjunctive system, as shown in Figure 4.
Here thechoice between bl and b2 will never be reached.
At best this is a waste of space.
Wesay that networks containing unreachable portions are unparsimonious, and declarethem to be ill formed.
While it may not always be easy to see whether a complicatednetwork is parsimonious, the necessary work can be carried out when the network isdefined, and need not carry a run-time cost.2.4.3 Basic Labelings.
In this section we introduce the idea of a basic labeling, whichis intended as a formalization of what we take to be the uncontroversial part of theprocess of labeling a system network.
A basic labeling is defined to be a partial function387Computational Linguistics Volume 17, Number 4al //a3blb2Figure 4An unparsimonious system.from lines to names such thata line receives a name if and only if there is a choice system to whoseright-hand side it is directly attached.no two lines carry the same name.In practice, system networks are labeled in ways that are very nearly basic label-ings.
The major difference is that some nodes attached to the left but not to the right ofchoice systems get given labels that correspond approximately to feature names.
Sincethese labels add nothing to the meaning of the network they can safely be ignored.The restriction to networks without duplicated labels simplifies the discussion inthe rest of the paper, but it is not hard to transform networks with duplicated labelsinto ones in which all labels are distinct.
The details of this transformation are notdiscussed here.2.4.4 Exhaustive Labelings.. Every exhaustive labeling builds on a basic labeling, andis a labeling in which every line in the network is labeled with some value.
In contrastto the conventional systemic labelings, in which labels are constrained to be atomicnames, exhaustive labelings assign boolean conjunctions and disjunctions of atomicnames as labels for some lines.
The full definition of an exhaustive labeling follows.Let Y" be a 1-1 function from lines to names for these lines.
~- is an exhaustivelabeling of a network if and only if the following conditions hold:1.
That part of Y that provides names for lines attached irectly to theright of choice systems must be a basic labeling.2.
If Y: assigns a line name llhs to the line directly attached to the left-handside of an and system, then it must also assign that name to the linesdirectly attached to the right-hand side of that system.388Chris Brew Systemic Classification and its EfficiencyquestionpersonaldemonstrquestionquestionpersonalpersonalpersonaldemonstrdemonstranimateinanimatepersonalVquestionfirstsecondsubjectiveobjectivereflexivepossessivepossdetthird thirdsingularpersonalV singulardemonstr t pluralnearfarfemininemasculineneuterFigure 5An exhaustively abeled network.3.
If Y assigns line names 11,12~... Im to the lines entering a conjunctivesystem (where l I is the label for the line appearing at the top of thesystem and lm that at the bottom), then it must assign the labelll A 12/k... lm to the line that leaves that system.4.
If 3 v assigns line names 11~ 12~... lm to the lines entering a disjunctivesystem (adopting the same ordering convention as above), then it mustassign the label 11 V 12 V... Im to the line that leaves that system.The ordering convention we introduced above is a technical convenience rather than anessential part of the nature of an exhaustive labeling; all that matters is that appropriateexpressions representing conjunctions and disjunctions are propagated to the right-hand lines of conjunctive and disjunctive systems.One exhaustive labeling for the sample network given earlier is shown in Figure 5.Three of the systems in the diagram involve complex entry conditions.
This expressesitself in the presence of complex labels having the form of boolean combinations.389Computational Linguistics Volume 17, Number 42.5 Translating the Labeled NetworksIn this section we show how to convert an exhaustively labeled network into a set ofaxioms expressing the information from the network in the framework of propositionalcalculus.
This work is closely related to a similar translation scheme given in Mellish(1988), but because our scheme works with slightly different labelings the results area bit easier to understand.The translation scheme in Mellish's paper can be applied to all four types ofsystems in an exhaustively abeled network, and the correct results will be produced,but it turns out that many of the systems in an exhaustively labeled network map intouninteresting tautologies.Mellish proposed that a choice system such as the one for GENDER in Figure I shouldbe translated asAMO{femininG masculine, neuter} (1)GENDER - feminine V masculine V neuter (2)where AMO stands for a complex formula meaning 'at most one of.'
(Mellish actuallypresents these axioms in a predicate calculus notation, but we have suppressed thisdetail, which makes no difference.)
In the example of a choice system given above thefull expansion of the complex formula would be-~(feminine A masculine)A~(feminine A neuter) A -~(masculine A neuter) (3)In Figure 5 we have removed the GENDER label from the left-hand side of the choicesystem and replaced it with the appropriate complex label.
When we employ Melish'sscheme the translation becomes:AMO{feminine, masculine, neuter} (4)third A singular -- feminine V masculine V neuter (5)but the essential principle remains the same.
Two intimately linked axioms arise fromeach choice system.
Where necessary we shall refer to the axiom involving AMO as theexclusivity axiom and the other one as the accessibility axiom.
It is easy to constructthe exclusivity axiom given the corresponding accessibility axiom, but the converse isnot true.
We shall therefore be basing our implementation  the use of the accessibilityaxiom, with the exclusivity axiom understood to be implicitly present.For and systems Mellish proposes a translation that is as if the label from the left ofthe and system had been written onto the lines to the direct right of the and system.
Inour scheme the label actually has been written there by the time the translation comesinto operation, so there is no need to provide an independent translation for andsystems.
Instead the systems to the right of the and system will automatically receivetranslations reflecting the presence of the and system.
This happens for the three andsystems of Figure 5, with question, personal, and demonstr being propagated acrossthe system in the appropriate way.For disjunctive and conjunctive systems applying Mellish's translation would againyield a tautology.
Where Mellish translates the disjunctive system of Figure 3 (whichcarries the feature name NUMBER on its right-hand branch) aspersonal V demonstr =_ NUMBER (6)390Chris Brew Systemic Classification and its Efficiencyapplying Mellish's translation to our labeling scheme yields the tautologouspersonal V demonstr =_ personal V demonstr (7)Intuitively it looks as if the real work that goes on in a system network happensin choice systems, and the other lines exist only in order to link together choice sys-tems in the appropriate ways.
From any point of view except hat of a mathematicaltroublemaker this was probably obvious from the outset.The axioms derived from the pronoun network in Figure 5 are the following.question =_ animate V inanimate (8)demonstr =_ near v farquestion V personal =_ subj v obj V refl V possess V possdetpersonal V demonstr =- singular V pluralpersonal ~ first V second V thirdthird A singular =_ feminine V masculine V neuter(9)(10)(11)(12)(13)The algorithm for translating system networks into a more standard form is nowcomplete, so we move on to consider the ways in which this information can be used.2.6 Computational TractabilityIn the next section we address the question of whether the labeling schemes developedso far can form the basis of efficient algorithms for carrying out the task of systemicclassification.We start by showing that system networks can be used to express NP-hard prob-lems.
This is something of a disappointment, since the original goal of this work wasto show that the network formalism could function as a low-power version of moregeneral feature formalisms.
The idea was that linguists who chose to express theirgrammars within the network formalism would be sacrificing a measure of notationalconvenience in order to gain a guarantee of acceptable computational behavior.
Sincewe must currently assume that NP-hard problems are intractable, we are unable toprovide the desired guarantee.2.6.1 Systemic Classification is NP-Hard.
In this section we show that the problemof systemic lassification is at least as hard as problems known to be NP-hard.
Thisis done by constructing a polynomial time mapping 11 from instances of the NP-hardproblem called 3SAT to networks that can be tricked into solving this problem for us.This is a standard technique from complexity theory.
For an introduction to similarlinguistic applications of complexity theory see Barton, Berwick, and Ristad (1988).If there were a polynomial time algorithm for checking arbitrary system networks,it would follow that 3SAT could be solved by the composition of the mapping that con-structs the network with the algorithm that checks the network.
Since this compositionis itself a polynomial time algorithm we would then have a polynomial time solutionfor 3SAT, and hence for all other problems of the complexity class W'.
Thus the suc-cessful construction of1I implies that systemic lassification is itself NP-hard.
(WhetherNP-hard problems can be solved in polynomial time is still an open question at thetime of writing, but, for the moment at least, they must be considered intractable).Kasper's demonstration that general disjunctive unification is NP-complete, taken to-gether with the reducibility of systemic lassification to that problem, indicates that391Computational Linguistics Volume 17, Number 4VY -qyXb?_I bla2I alFigure 6A network for 3SAT.systemic lassification is NP-complete as well as NP-hard.
We think this upper boundon the complexity class to be of purely theoretical interest, since our parsers dependon efficient description-matching as a primitive, and an NP-hard problem is in ourview already too expensive to be solved regularly in an efficient parsing system.
Weare aware that the complexity result only applies to the worst case, but in the absenceof a satisfactory account of precisely what constraints a grammar writer has to observeto avoid the bad cases, we are uneasy about providing these grammar writers with apotentially explosive general mechanism.
Our guess is that there is something aboutthe human cognitive system that ensures that hard cases won't arise naturally, but it isdangerous to assume that they won't arise, not least because one possible way of us-ing the technology provided here is as a target representation forautomatic grammardevelopment environments hat present he user with higher level primitives.
What-ever modularity constraints may be observed by a human writer, it is unclear thatsimilar constraints will automatically hold over the output of an automatic grammartransformer.The 3SAT problem.
3SAT is the problem of determining the satisfiability of a booleanformula, stated in conjunctive normal form, in which exactly three variables occur ineach clause of the conjunction.
These variables may either be positive or negated, andmay be repeated from clause to clause.
It is known that 3SAT is just as hard as theproblem of satisfiability for general boolean formulae (Barton, Berwick, and Ristadprovide a demonstration of this fact on pp.
52-55 of Barton, Berwick, and Ristad\[1988\]).
A sample input formula for 3SAT is(x vyv~)/x (y vz v u) A (~vy v u) A (xvz v~) (14)392Chris Brew Systemic Classification and its Efficiencyand the problem is to find an assignment of true and fa lse to variables uch that thewhole expression comes out true.A mapping from 3SAT instances to networks.
We now construct the mapping IIthat takes a 3SAT instance and constructs a network that can be used to solve thatinstance.
The following steps are necessary.
Let the name of the 3SAT instance be Eand its length NE.Make a list of the variable names used in E, counting positive andnegative occurrences of a variable as the same.
This can certainly bedone in time polynomial in NE using a standard sorting algorithm suchas merge sort.
Let the name of the list of variable names be V and itslength Nv.
Because the drawings are prone to get very intricate we usethe example of the very simple expression(xVyVz) A (z V ~V~) (15)(which has already been illustrated in Figure 6 )Construct a network consisting of a large and system feeding Nv parallelbinary choice systems.
Each choice system carries two labels, onecorresponding toa variable name in V and the other formed by negatingthe label on the other branch of the system.
The choice of prefix shouldbe such that all labels on the resulting network are unique.
This part ofthe process is polynomial in the length of V.For every clause in E, add a ternary disjunctive system linking the linesof the network having the labels corresponding to the three symbols ofthe clause.
This part of the process involves canning down the Nvsystems of the network once for each clause of E, and is therefore alsopolynomial in NE.Finally, binary choice systems are attached to the outputs of all thedisjunctive systems introduced in the last stage.
These systems are labeledwith generated labels distinct from those already used in the network.This step is clearly also polynomial in NE, requiring the creation of anumber of choice systems equal to the number of clauses in E.The network given in Figure 6 is the one that would be produced from E. In orderto use the constructed network to solve the satisfiability problem for E, we check anexpression corresponding to the conjunction of all the three member clauses in E. Thisis built by choosing an arbitrary label from each of the rightmost choice systems.
Theconjunction of these labels is a consistent description whenever all the clauses of Ecan be satisfied by the same value assignment.
The choice systems to the left of thedisjunction express the facts that no variable can be simultaneously true and false.
Itshould now be obvious that any correct checking algorithm will in fact succeed in justthose circumstances where there is at least one value assignment for the variables of E393Computational Linguistics Volume 17, Number 4that makes E come out true.
This means that systemic lassification cannot be solvedin polynomial time unless 3SAT, and hence all of A/'7 v, can.3.
Algorithms for Consistency Checking3.1 Isolating the Sources of IntractabilityGiven that there is no efficient way of applying all the constraints imposed by a systemnetwork, it would help if we could isolate the source or sources of the inefficiency.If this can be done, it might allow an algorithm for constraint application in whicha cheap first stage does most of the work, calling on an expensive second stage onlywhen it is needed.
It turns out that the presence of disjunctive systems i the main causeof the inefficiency, so we now move to a method for the removal of these systems.The idea is that the nondisjunctive rsion of a disjunctive network expresses some,but not all, of the constraints present in the original network.We have two equivalent representations for the constraints induced by a systemnetwork, and shall feel free to switch between the view of networks as geometricobjects and the view of axiom sets as constraints on the structure of linguistic entities.We shall refer to diagrams of networks in the hope that this will help the reader gainintuitions about what is going on.
Readers who find the diagrams unhelpful shouldignore them.There is a simple transformation that maps networks involving disjunction intonearly equivalent versions not containing any disjunctive systems.
Although this tem-porarily ignores some of the information implicit in the disjunctive network, everydescription the transformed network would reject as inconsistent is also rejected bythe full network from which it is derived.
The right-hand sides of choice systems areleft untouched by the transformation, so the exclusivity axioms of the original networkcontinue to hold.System networks form directed acyclic graphs, so it is possible to use the prece-dence relationship defined above to form a topologically sorted list of the atomic labelsin the network.
Precedence is not a total ordering on the atomic labels, so some othercriterion, such as lexicographic ordering, is needed to produce an unambiguously or-dered list.
We call the position of a label in this list its depth.
It does not matter whatthe extra criterion for ordering the depth list is, as long as it is consistently appliedand no two labels have the same depth.
By extension, choice systems also have adepth, defined to be the depth of the shallowest label in the right-hand side of thesystem.
Atomic symbols in the sets of axioms derived from system networks inheritthe depth of the corresponding labels in the network, and axioms inherit he depth ofthe corresponding choice systems.The idea is that every fragment of the original network that flows out of the rightof a disjunctive system is detached from that system and re-attached nearer the root ofthe network.
This point is the point at which the various paths leading from the rootto the disjunctive system most recently diverged.
Although the formal details of howto do this in a general network are somewhat intricate, an illustration is provided inFigure 7.
The two systems that have been moved are those that were originally fedby disjunctive systems in Figure 5, namely those which express choices for CASE andNUMBER.
These have both been moved back from their original ocation and re-attachedimmediately to the right of the root of the network.The new network now allows various combinations of features not allowed bythe original network.
It would, for example, permit the generation of a ref lexive,demonstrative, far, s ingular pronoun, if one existed (it would presumably be that-394Chris Brew Systemic Classification and its EfficiencyPNCASEsubjectiveobjectivereflexive\[P ?
;seSdie:animatequestion inanimateneardemonstr Ifarfirstperson secondthirdNUMBERsingplufeminineGENDER masculineneuterFigure 7A simplified network.self).
Some of the constraints expressed in the original network are lost in the trans-formed version.3.2 Relaxing Sets of AxiomsRelaxation is the formal counterpart of the network rewriting described in the lastsection.
For clarity, it is defined over sets of axioms rather than over networks, simplybecause it is far easier to achieve the necessary clarity when working in the domainof propositional formulae.In a set of axioms, the precedes relationship between labels in the axioms is definedin much the same way as it was for labels in a network, namely, as the smallest relation395Computational Linguistics Volume 17, Number 4a2blb2Cla2 V bl r1 C2Figure 8A small example network.such that:1. ll precedes 12 ifI1 E LHS(a), 12 E RHS(a)for some axiom a.2.
ll precedes 12 if for any label 13 in the set of axioms ll precedes 13 and 13precedes 12.The common predecessors of a set of symbols S are defined to be the membersof that set P(S) that precede very member of S. Every fully elaborated escriptioncontaining any member of S must also contain every member of P(S).
The deepestcommon predecessors of S are those members of P(S) having no successor in P(S).
Thetransformed set of axioms is formed by replacing every axiom involving disjunctionin the LHS with a rule made up of the same RHS and a new LHS consisting ofthe conjunction of a specially generated identifying feature with the deepest commonpredecessors of the elements of the old LHS.
As an example we use the network givenin Figure 8, which was used by MeUish to demonstrate the necessity for repeatedvariables in the terms representing systemic descriptions.
It has been exhaustivelylabeled, showing the disjunction introduced by the presence of a disjunctive systemfeeding the rightmost choice system.
This network demonstrates that the consistency ofdescriptions i not always deriveable from information about the pairwise consistencyof individual features.
For example, while al is consistent with b2 and also with cl, itdoes not follow that the combined escription al A b2 A Cl is also consistent.In Figure 9 the result of peeling away the disjunction is shown.
Immediatelypreceding the choice system for Cl and c2 is a degenerate choice system with one entryand one exit.
This system is there in order that the special marker feature genfeat canbe inserted on the right-hand side of a choice system, and goes hand in hand with thedefinition of basic labelings given earlier.396Chris Brew Systemic Classification and its Efficiencyala2e genfeatblb2ClC2Figure 9A transformed version of the example.A record is kept of the correspondences between the features introduced to standfor left-hand sides and the expansions for which they stand.
This is used, if necessary,in a second stage of checking.
In the example above we would have had to note thatgenfeat ~ cl V C 2and to retain this information for future checking.3.3 Overview of the Checking AlgorithmOur consistency checking algorithm works by implementing a sort of parallel search,working back from the right of the network toward its root.
The run-time behaviorof the algorithm depends on the properties of the networks used.
If the networkinvolves disjunctive systems then true parallelism is required, with multiple processesconstructing mutually inconsistent partial descriptions on the basis of the same seeddescription.
Since parallel processes may need private copies of part or all of the targetexpression, this approach will involve us in potentially exponential mounts of workcopying data structures.If disjunctive systems are not present, cheaper approaches are possible, becausewe can organize matters o as to require no more than one copy of the target expres-sion.
This allows us to demonstrate he tractability of consistency checking for systemnetworks lacking disjunction, while the checking procedure for full system networksremains just as costly as we would expect given its equivalence to 3SAT.In what follows we shall be introducing a way of decomposing sets of axioms intocomponents corresponding to a nondisjunctive network and a group of disjunctivesubnetworks.
This involves the construction of new expressions based on the axiomsof the original network.
Strictly we ought not to use the term 'axiom' for the resultsof our manipulations, but we shall continue to do so, since the algorithms applyequally well to networks that never had disjunctive systems in the first place as to thetransformed versions of networks that did.397Computational Linguistics Volume 17, Number 4Our algorithms decompose the problem of systemic lassification i to three stages:...An off-line step in which a general system network is broken down intoa relaxed version lacking disjunction ancl a set of constraints expressingthe information missing from the relaxed version of the network.A first stage of checking in which the relaxed form of the network isapplied to an input expression.A second (optional) stage in which the information missing from therelaxed network is re-applied to the results of the first cheek.In the compilation step the axioms from the original network are converted into anordered list of relaxed axioms.
These axioms contain special generated features that actas hooks for a group of aliasing rules that have the job of expressing the informationpresent in the original axioms but absent from their relaxed counterparts.The first stage of checking involves successive inspection of the relaxed axiomsfor applicability to the expression being checked.
If the right-hand side of an axiommatches the expression then the left-hand side of the axiom is combined to form anextension of the expression.
Because the compilation step has organized the axiomsin order of depth this algorithm is able to make all legitimate deductions from therelaxed form of the network, and also to fail if the expression given is outlawed bythis relaxed form.In the second stage of checking we use the output of the first stage, attempting todischarge any generated features that have been introduced.
In the worst case this willinvolve polynomial expense, since the problem is that of simultaneously satisfying anumber of constraints each of which may individually be satisfiable in a number ofdifferent ways.Although the difficulty of this constraint satisfaction task depends both on thestructure of the network and on the details of the expression being checked, we canmake a certain amount of progress with this task even in the compilation step.
Thisis because the structure of the network may tell us that the constraint satisfactionproblem can be decomposed into subtasks that will never interact whatever the natureof the input expression.
By inspection of a system network we can derive a metric thatindicates the possible computational cost of applying the information contained in thatnetwork, as well as an indication of how much of that information can be recoveredwithout getting involved in the costly search processes that can be occasioned by thepresence of disjunctive systems.3.4 Representation.This section deals with the way in which expressions and axioms are represented foruse in the checking algorithm.
As mentioned previously this presentation is somewhatabstract, and describes idealized data structures rather than their somewhat moreintricate realizations.For the network in Figure 8 the original set of axioms ise ~ al V a2 (16)e ~ bl V b2 (17)a2 V bl --- cl v c2 (18)398Chris Brew Systemic Classification and its Efficiencyand the checking rules relevant o the first stage aree~alVa2 (19)e = bl V b2 (20)e A genfeatl ~ cl V c2 (21)3.4.1 Representation of Expressions.
All boolean expressions can be reduced to theform of a disjunction of conjunctions of (possibly negated) atomic symbols.
The ex-pressions to be checked will consist either of simple conjunctions of unnegated atomicsymbols, or, if we need to support subsumption checking, conjunctions of a singlenegated atomic symbol with a number of unnegated symbols.
The algorithm will infact handle any number of negated atomic symbols, but we do not make any use ofthis capability.
An appropriate representation f such expressions i as a vector of slotscapable of taking three values along each dimension.
Each of the N slots correspondsto one and only one of the N atomic symbols in the set of axioms, and the order of theslots is the order of increasing depth given by the depth relationships in the network.We shall illustrate these vectors using strings of symbol specifications.
Within such astring there are three possible types of symbol specification:?
the presence of a positive specification for a symbol is represented usinga boldface capital etter (A1)?
the presence of a negated specification for a symbol is represented with aboldface capital etter with a line above (~)?
the absence of any specification for a symbol is represented using alighter lower case font (al).
Explicit representation f absent symbolsmeans that every symbol in the repertoire must appear (in some form) inevery vector.For the example network in Figure 8 the correspondence b tween expressions andtheir representations is as follows.al A b2is represented byandis represented by(C2~ C1~ B2, bl, a2, A1, e)-~C 1(C2~ C1} b2} bl, a2~ a~, e)The elements of a symbol vector are implicitly conjoined, and there is no mechanismfor expressing disjunction.3.4.2 Representation of Axioms.
The right-hand sides of axioms consist of ranges ofatomic symbols having neighboring depths.
In principle one can represent these rangesby specifying a starting depth and a number of symbols, or one can use a slightlymore intuitive representation as vectors of implicitly disjoined feature specifications.The individual feature specifications would then be represented in the way used abovefor those in target expressions.399Computational Linguistics Volume 17, Number 4For the purposes of the algorithm all we actually :need to know is the range ofdepths over which the mutually exclusive alternatives !in the axiom extend, since weare primarily interested in checking how many members the right-hand side of anaxiom shares with the target expression.The left-hand sides of axioms are more problematic, requiring the representation farbitrary boolean expressions in disjunctive normal form.
However, for the simplifiedsets of axioms in which we are primarily interested, this form reduces to a singleconjunction of atomic symbols, which can readily be represented using the scheme fortarget expressions given above.Examples of axioms and their representation follow.e ~ R 1 V a 2is represented by(C2, Cl, b2, bl, a2, al, e) ~ (c2, Cl, b2, bl, A2, A1, e)whileis represented bya2 V bl ~ Cl V c2(C2, Cl, b2, bl, A2, al, e) V (c2, Cl, b2, B1, a2, al, e) = (C2, C1, b2, bl, a2, al, e)In order to convert these axioms into nondisjunctive quivalents we transform thedisjunctive axiom by generating a new feature for its left-hand side, givinge A genfeatl =~ cl V C 2which is represented by an eight-element vector (because we have introduced an extrafeature name, and need an extra slot).
The axiom becomes(c2, cl, b2, bl, a2, al, GENFEAT1, E) =- (C2, C1, b2, bl, a2, al, genfeatl, e)This illustrates the fact that the representations of expressions in the first and secondstage of checking differ slightly because of the introduction of generated features.The checking algorithm organizes the axioms into a list of decreasing depth.
Theaxiom at the head of this list (initially, the deepest axiom of all) is the current axiom.In the set of axioms given above the appropriate order would be axiom 21, axiom 20,then axiom 19.3.5 The First Stage of CheckingThe current axiom a is applicable to the target expression E if E contains a positiveoccurrence of at least one of the elements of RHS(a).
In this case we have to distinguishbetween the case where the intersection contains exactly one element and that whereit contains more than one.
In the latter case we have a violation of the exclusivityaxiom associated with the accessibility axiom that we have explicitly represented.
Thetarget expression is therefore inconsistent with the network from which the axiomswere derived.If a is applicable and does not lead directly to an inconsistency we need to insert hematerial from LHS(a) into E, forming a new expression E'.
This is fairly straightforwardfor networks lacking disjunction in the left-hand side of axioms.
The substitution can400Chris Brew Systemic Classification and its Efficiencyfail if the target expression already includes a negated specification for any of thefeatures contained in the left-hand side of the axiom, but otherwise the substitutionresults in the generation of an expression E t, which is simply the conjunction of E andLHS(a).
At this stage we do not need to check for mutually exclusive features, sincethis kind of failure will be detected in a later iteration of the procedure.If LHS(a) is a disjunction containing multiple elements, as can happen if we aredealing with a full system network, rather than a relaxed version that has been trans-formed to remove the disjunction, then the algorithm requires the setting up of asmany parallel processes as there are elements in the disjunction, as well as extensivecopying of those parts of the target expression that may yet be modified.
Each processmay attempt o write a different combination of features in its own personal copy ofthe relevant parts of the target expression, and it is crucial that the activities of theseparate processes, whether or not they actually run in parallel, be prevented frominterfering with one another, as would happen if they modified a common copy of thesame data structure.
This is obviously the expensive part of the checking procedure,since there can be a very considerable number of quasi-parallel or parallel processesif we happen to be dealing with an awkward case.3.6 The Cost of the First Stage of CheckingIt is possible to code up the algorithm for the first stage of checking as an algorithmoperating on a two-tape Turing machine, in which one input tape represents he axiomsused and the other represents he expression to be checked.
Analysis of this algorithmreveals that it is the substitution step that will prove most costly.
It turns out that thepossible space needed to represent the axiom tape is proportional to the square ofthe number of atomic labels in the set of axioms, and that the Turing machine needsno more than three passes over this tape to complete the necessary substitutions.
Inany event both time and space bounds for the first stage of checking are certainlypolynomial in the number of labels in the network being checked.
63.7 The Second Stage of CheckingThe second stage of checking has the job of re-imposing the constraints that wereignored in the first stage.
By inserting generated features, we have effectively markedthe locations at which extra material may have to be introduced.
While it wouldobviously work to simply throw away the results of the first stage of checking, andre-check the original expression (using the original axioms) from scratch, it is moresatisfactory to turn the work we have already done to our advantage.
This sectiondescribes one way of doing this.
The parsing system adopts a different, but in essenceequivalent, approach, building PROLOG terms as the output of the first stage, thencompiling the alias rules into clauses of a procedure that attempts to find a consistentsubstitution for generated features.In Winograd's pronoun network (shown in Figure 1) the first stage of checkingfor the descriptionsubjective A singular (22)would yieldsubjective A singular A genfeatl A genfeat2 A pn (23)6 Al though we introduce a potentially large number  of extra labels in the transformation from disjunctiveto nondisjunctive networks, these can be omitted without affecting the correctness of the first stage ofchecking.
The labels are introduced as a convenience for use during the second stage of checking,rather than as an essential part of the first stage.
In any case, as pointed out by an anonymous  referee,the number  of these labels is bounded by the number  of choice systems in the network as a whole.401Computational Linguistics Volume 17, Number 4which contains two generated features, 7 one corresponding to the expressiongenfeatl - question V personal (24)and the other togenfeat2 =_ personal V demonstr.
(25)In this case it should be obvious that all we have to do is choose compatible values fromthe disjunctive parts of expressions 24 and 25, and that this is achieved by choosingpersonal in both cases.
This has no further consequences.
In this simple case we findthat the fullest description we can be sure of on the basis of what we know is:subjective A singular A personal A pn.
(26)Unfortunately, looking for noncontradictory choices of substitution for generated fea-tures will not always gain us the information which we need to know.
We illustratethis with reference to Figure 10, which provides a network for the pronoun system ofan imaginary language closely related to English.The path leading from pn to the choice between f i r s t ,  second, and th i rd  involvespassing through an extra choice system encoding the alternation between honori f icand famil iar,  so we would have inserted fami l iar  rather than personal.
The dia-gram abbreviates personal, honorific, and familiar to pers, hon, and faln respec-tively.
In the imaginary language in question the choice of an honorific makes it unnec-essary to consider further features of the pronoun.
Translating the network producessubjective A singular A familiar A pn (27)We now need to know whether a pronoun that is fami l iar  is necessarily also per-sonal, which involves the re-use of the axiom,personal = honorific V familiar (28)and we also needpn =_ question V personal V demonstrto ensure that the ill-formed...familiar A question...does not get accepted.In the worst case it actually turns out that nearly all the axioms present in theoriginal network can be needed for the second stage of checking.
In more typical net-works, such as the one constructed by glueing together the networks from Houghton'sdialog generation application, only a few axioms will be involved in the second stageof checking, and this subset of the axioms can be picked out as a preprocessing step,which we will shortly describe.7 The pn in expression 23 arises because the left-hand sides of the transformed axioms are made from theconjunction of the generated feature and the deepest enclosing features, rather than simply thegenerated features on their own.402Chris Brew Systemic Classification and its EfficiencyquestionhondemonstrIanimateinanimatefirstsecondthirdsubjectiveobjectivereflexivepossessivepossdetsingularpluralnearfarfemininemasculineneuterFigure 10The pronouns of an imaginary language.3.8 Islands of UncertaintyOne way of viewing the transformation that originally removed disjunction is as adevice for temporarily allowing an island of uncertainty to persist in part of the net-work.
The job of the second stage of checking is to deal with this uncertainty, andthe potential complexity arises from the possibility that many interacting axioms con-tribute to the uncertainty.
Often there will be several small and independent islandsof uncertainty, each involving only a few axioms, and it will be possible to decomposethe checking task into more manageable portions.We now show how to characterize the subsets of axioms involved in each island ofuncertainty.
The starting point for this operation is the original network, not the trans-formed version containing generated features.
The relevant portion of the networkfor any given generated feature is that falling between the corresponding disjunctivesystem and the deepest common predecessors of the left-hand lines of that system.Anything nearer to the root than that will have been checked in the first stage ofchecking.
So in order to pick out the potentially relevant axioms for each generatedfeature, we form a list of labels starting with those involved in the left-hand side ofthe disjunctive system and working back to the deepest common predecessors, which403Computational Linguistics Volume 17, Number 4do not need to be included.
This list is then used to choose axioms; every axiom thathas a right-hand side containing one of the features on the list must be included.In the case of Winograd's network (Figure 5), the list for the disjunctive systems is\[question,personal, demonstr\]and the only relevant axiom ispn =_ question v personal V demonstr (29)For the imaginary language introduced above we would construct the list\[familiar, question,personal,demonstr\]and we therefore need the axiompersonal - familar V honor!tic (30)as well as axiom 29.For every generated feature in the network we collect a set of relevant axioms.Ideally the sets of axioms will be disjoint, which means that the islands of uncertaintyinduced by the disjunctive left-hand sides can be handled independently.
In fact theexamples we are using represent the opposite case, in which different generated fea-tures are associated with nondisjoint (actually identical) sets of axioms.
Our methodfor carrying out the substitutions collects nondisjoint sets of axioms into larger sets.The procedure operates on structures of the formI /= {Ei, Ai}where Ei is a set of expressions relating generated features to disjunctive left-handsides, and Ai is the union of the sets of axioms found to be relevant o these left-hand sides.
The sets of axioms Ai must be disjoint.
Each Ii can therefore be processedseparately.
8We construct ways of substituting for generated features by replacing each gen-erated feature with an element of the corresponding disjunctive left-hand side.
Thenumber of possible substitutions depends both on the number of generated featuresin the network and on the way they interact.
The more sharing there is between thesets of axioms corresponding to the generated features the greater will be the numberof distinct ways of substituting for the generated features.In the first example we have to consider the following possibilities:genfeatl = question genfeat2 = personal (31)genfeatl = question genfeat2 = demonstr (32)genfeatl = personal genfeat2 = personal (33)genfeatl = personal genfeat2 = demonstr (34)of which only the expression 33 satisfies the exclusivi W axiom for axiom 29.
Since thereare no other relevant axioms either for genfeatl or for genfeat2 the check is complete.8 There may be more fficient algorithms than this, but we have not yet found the need to explore them.404Chris Brew Systemic Classification and its EfficiencyIn the second example, axiom 29 does not do quite as much for us, because thepossible combinations of substitutions are:genfeat l = questiongenfeatl = questiongenfeatl = familiargenfeatl = familiargenfeat2 = familiar (35)genfeat2 = demonstr (36)genfeat2 = familiar (37)genfeat2 = demonstr (38)only one of which (expression 36) can be eliminated by checking against he exclusivityaxioms.
Instead we find ourselves checkingsubjective A singular A familiar A question A pn (39)subjective A singular A familiar A pn (40)subjective A singular A familiar A demonstr A pn (41)against the axioms.
In fact the presence of fami l iar  combines with axiom 30 todemand the addition of personal.
Demonstr and question are incompatible withpersonal so only the expression produced from expression 40 can satisfy axiom 29.The full expansion of this expression issubjective A singular A familiar A personal A pn (42)which is the required answer.It may seem unnecessarily elaborate to separate out the effects of disjunctive ax-ioms, but a major reason for doing so is that the partitioning of the set of axioms thatis involved can be carried out as a compilation step, which both prepares the axiomsfor the simpler first stage of checking and gives us an informal measure of the extentto which we are going to be able to decompose the potentially expensive second stageof the problem into small and independent problems.In the set of axioms coming from the network in Figure 6, we find that everyintroduced feature interacts with every other one, producing a compile time clue thatif we are unlucky we shall have to check an unreasonably arge number of possibleways of carrying out the substitution.
If a situation like this arose in a natural anguageapplication we should probably begin to look for a way of redesigning the network,and consider whether the costly accuracy produced by the second stage of checkingactually helps our application much or at least start to suspect hat the applicationshould not be expected to produce reliable real-time response.For Houghton's networks it turns out that the second stage of checking is rarelyneeded at all, so we have implemented only a simple version of the second stage ofchecking.
In this implementation we make the pessimistic assumption that all gen-erated features may interact.
The more sophisticated approach outlined above willcertainly produce significant improvements for some networks, but we do not cur-rently have access to a large corpus of independently constructed networks, so cannottell for sure whether the effort of implementing the slightly trickier algorithm wouldin fact be justified by linguistic practice.4.
ConclusionsThis paper has explored the potential of system networks as a classification tool forlinguists.
The results of this enterprise can be divided into a group of technical re-suits about networks as such and a collection of less formal ideas about the practicalimplications of these results for the working computational linguist.405Computational Linguistics Volume 17, Number 4The technical results come first...The problem of systemic lassification is an inherently hard one, forwhich computational tractability cannot be guaranteed.The source of the intractability is the use of disjunctive systems in thenetworks.
Restricting the algorithm to use only choice, and, andconjunctive systems gains us tractability at the expense of some loss ofexpressive power.
Mellish (1988) reports an application in which thisroute was taken with satisfactory esults.
It is :not yet clear whether therestriction to nondisjunctive networks will be acceptable as a basis forlarge natural language grammars.Note that the networks are not the only possible source of disjunction in a largenatural anguage system, since when realization rules are taken into account hechoice systems of the system networks can stand for disjunctions of general featurestructures.
9 This objection carries most force in the context of a purely constraint basedsystem like Kasper's, since in our hybrid parser each line of analysis is committed to aparticular choice of realization rule before feature matching isnecessary.
Effectively thecontrol regime of the nondeterministic parser is dealing with some of the search thatis necessary in order to resolve the disjunctions implicit in the grammar.
The chart-parsing part of this involves only a number of feature-matching operations polynomialin the size of the grammar and the length of the input string, 1?
so the complexity ofthe overall parsing process hinges on the efficiency of the feature-matching al orithminvolved.
The actual performance of the parser may be much better than that indicatedby the theoretical properties of the algorithm, but if so the efficiency depends uponcontingent properties of the grammar used, so it would be unwise to provide a defini-tive guarantee that a parser will maintain acceptable performance as the grammar isdeveloped and extended.For practical purposes the following results are probably of more interest.1.
A given system network can be compiled into a set of axioms withoutreference to the particular expressions to be checked with these axioms.Although this process is potentially expensive, it can be carried outoff-line.2.
The potentially expensive part of systemic lassification can be separatedfrom a cheaper first stage.
The first stage is comparable in cost totaxonomic lassification, and can be implemented efficiently usingcurrent echnology.
The second stage may turn out to be exponentiallyexpensive in the worst case, but for some applications, uch as theparsers we have implemented, the second stage proves unnecessary.
Theissue of how the algorithms would perform on yet larger grammars i asyet unexplored.3.
Even the second stage can often be rendered more manageable by thedecomposition f the algorithm into two stages, since the 'islands' ofpotential intractability end to be isolated from one another, and can9 This was pointed out to us by one of the Computational Linguistics referees.10 These results, and the reasons for treating them with some caution, are covered by Barton, Berwick,and Ristad (1988), particularly in Chapters 7 and 8.406Chris Brew Systemic Classification and its Efficiency.often be treated as independent subproblems.
In the worst case axiomsare interdependent, and general algorithms for the unification ofdisjunctive constraints, uch as the ones of Kasper (1987b) and Eisele andD6rre (1988) are likely to out-perform the techniques described here.
Wesee our algorithms more as illustrations of the nature of the problem thanas competitors of the more sophisticated algorithms presented by others.The representations u ed by our algorithms are close to those present inthe networks themselves, o systems built on our algorithms hould beeasier to debug than those in which the networks are compiled intolow-level formalisms.
As a by-product of the production of theserepresentations we can obtain an informal measure of the likely cost ofusing a particular set of networks.We have provided a preliminary analysis of the nature of the information contained insystem networks, indicated why the flexible use of this information is likely to be costly,and sketched techniques that will somewhat alleviate the undesirable consequences ofthis situation.
While we are unable to provide the linguist with the desired guarantee ofcomputational tractability in the general case, we have provided tools and techniquesthat will aid linguists and implementors in the production of efficient grammars builtin the systemic formalism.ReferencesBarton, G. Edward; Berwick, Robert C.; andRistad, Eric Sven.
(1988).
ComputationalComplexity and Natural Language.Cambridge, MA: The MIT Press.Brachman, Ronald J., and Schmolze,James G. (1985).
"An overview of theKL-ONE knowledge representationsystem."
Cognitive Science, 9(2):171-216.Davey, Anthony.
(1978).
DiscourseProduction: A Computer Model of SomeAspects of a Speaker.
Edinburgh, U.K.:Edinburgh University Press.Eisele, Andreas, and D6rre, Jochen.
(1988).
"Unification of disjunctive featuredescriptions."
In Proceedings, 25th AnnualMeeting of the Association for ComputationalLinguistics.
Buffalo, NY.Halliday, M. A. K. (1976).
"The form of afunctional grammar."
In Halliday: Systemand Function in Language, edited byG.
R. Kress, 7-25.
Oxford, U.K.: OxfordUniversity Press.Halliday; M. A. K. (1975).
Learning How toMean - -  Explorations in the Development ofLanguage.
London: Edward Arnold.Houghton, George A.
(1986).
"Theproduction of language in dialogue: Acomputational model."
Doctoraldissertation, University of Sussex.Houghton, George A., and Isard, Stephen D.(1987).
"Why to speak, what to say andhow to say it: modelling languageproduction in discourse."
In ModellingCognition, edited by P. Morris, 249-267,New York: John Wiley.Hudson, Richard A.
(1971).
English ComplexSentences.
Dordrecht: North Holland.Kaczmarek, Thomas S.; Bates, Raymond;and Robins, Gabriel.
(1986).
"Recentdevelopments in NIKL."
In Proceedings,5th National Conference ofthe AmericanAssociation for Artificial Intelligence.Philadelphia, PA.Kasper, Robert T. (1988).
"An experimentalparser for systemic grammars."
In"Proceedings, 12th International Conference onComputational Linguistics (COLING 88).Budapest.Kasper, Robert T. (1987).
"Feature structures:A logical theory with application tolanguage analysis."
Doctoral dissertation,University of Michigan.Kasper, Robert T. (1987).
"A unificationmethod for disjunctive featuredescriptions."
In Proceedings, 25th AnnualMeeting of the Association for ComputationalLinguistics.
Stanford, CA.von Luck, Kai; Nebel, Bernhard; Peltason,Christoph; and Schmiedel, Albrecht.(1986).
"BACK to consistency andincompleteness."
In GWAI-85: 9th GermanWorkshop on Artificial Intelligence, ditedby H. Stoyan, 245-257, Berlin: SpringerVerlag.MacGregor, Robert, and Bates, Raymond.(1987).
"The loom knowledgerepresentation language."
Technical407Computational Linguistics Volume 17, Number 4Report ISI/RS-87-188 InformationSciences Institute, University of SouthernCalifornia.Mann, William C., and Matthiessen,Christian.
(1985).
"Nigel: A systemicgrammar for text generation."
In SystemicPerspectives on Discourse, edited byR.
O. Freedle, Ablex.McCord, Michael.
(1977).
"Proceduralsystemic grammars."
International Journalof Man-Machine Studies, 9(3):255-286.Mellish, C. S. (1988).
"Implementingsystemic lassification by unification.
"Computational Linguistics, 14(1):40-51.Nebel, Bernhard.
(1990).
"Reasoning andRevision in Hybrid RepresentationSystems."
Number 422 in Lecture Notes inArtificial Intelligence.
Berlin: SpringerVerlag.Patten, Terry, and Ritchie, Graeme.
(1986).
AFormal Model of Systemic Grammar.Research Paper 290, Department ofA.I.,Edinburgh University.Pereira, Fernando A., and Shieber, Stuart M.(1987).
Prolog and Natural LanguageAnalysis.
CSLI Lecture Notes No.
10.Center for the Study of Language andInformation, Stanford, CA.Power, Richard.
(1979).
The organization ofpurposeful dialogue.
Linguistics.17(1-2):107-152.Reynolds, John C. (1970).
"Transformationalsystems and the algebraic structure ofatomic formulae."
In Machine Intelligence,Volume 5, edited by Bernard Meltzer andDonald Michie.
Edinburgh, U.K.:Edinburgh University Press.Shieber, Stuart M. (1986).
An Introduction toUnification Based Approaches to Grammar.CSLI Lecture Notes, Number 4.
Center forthe Study of Language and Information,Stanford, CA.Winograd, Terry.
(1972).
UnderstandingNatural Language.
New York: AcademicPress.Winograd, Terry.
(1983).
Language as aCognitive Process: Volume 1: Syntax.Reading, MA: Addison-Wesley.408
