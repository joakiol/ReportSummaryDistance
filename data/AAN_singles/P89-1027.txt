TREATMENT OF  LONG DISTANCE DEPENDENCIES  IN  LFG AND TAG:FUNCTIONAL UNCERTAINTY  IN  LFG IS A COROLLARY IN  TAG"Aravind K. JoshiDept.
of Computer & Information ScienceUniversity of PennsylvaniaPhiladelphia, PA 19104joshi@linc.cis.upenn.eduK.
Vijay-ShankerDept.
of Computer & Information ScienceUniversity of DelawareNewark, DE 19716vijay@udel.eduABSTRACTIn this paper the functional uncertainty machin-ery in LFG is compared with the treatment of longdistance dependencies in TAG.
It is shown thatthe functional uncertainty machinery is redundantin TAG,  i.e., what functional uncertainty accom-plishes for LFG follows f~om the TAG formalismitself and some aspects of the linguistic theory in-stantiated in TAG.
It is also shown that the anal-yses provided by the functional uncertainty ma-chinery can be obtained without requiring powerbeyond mildly context-sensitive grammars.
Somelinguistic and computational aspects of these re-sults have been briefly discussed also.1 INTRODUCTIONThe so-called long distance dependencies are char-acterized in Lexical Functional Grammars (LFG)by the use of the formal device of functional un-certainty, as defined by Kaplan and Zaenan \[3\]and Kaplan and Maxwell \[2\].
In this paper, werelate this characterization to that provided byTree ~,djoining Grammars (TAG), showing a di-rect correspondence b tween the functional uncer-tainty equations in LFG analyses and the elemen-tary trees in TAGs that give analyses for "long dis-tance" dependencies.
We show that the functionaluncertainty machinery is redundant in TAG, i.e.,what functional uncertainty accomplishes for LFGfollows from the TAG formalism itself and somefundamental spects of the linguistic theory in-stantiated in TAG.
We thus show that these anal-yses can be obtained without requiring power be-yond mildly context-sensitive grammars.
We also*This  work was partial ly supported (for the first au-thor) by the DRRPA grant N00014-85-K0018, A l tO grantDAA29-84-9-0027, and  NSF grant IRI84-10413-A02.
Thefirst author  also benefited from some discussion with MarkJohnson and Ron Kaplan at the Titisee Workshop on Uni-fication Grammars ,  March, 1988.briefly discuss the linguistic and computationalsignificance of these results.Long distance phenomena are associated withthe so-called movement.
The following examples,1.
Mary Henry telephoned.2.
Mary Bill said that Henry telephoned.3.
Mary John claimed that Bill said that Henrytelephoned.illustrate the long distance dependencies due totopicalization, where the verb telephoned and itsobject Mary can be arbitrarily apart.
It is diffi-cult to state generalizations about these phenom-ena if one relies entirely on the surface structure(as defined in CFG based frameworks) ince thesephenomena c nnot be localized at this level.
Ka-plan and Zaenan \[3\] note that, in LFG, rather thanstating the generalizations on the c-structure, theymust be stated on f-structures, ince long distancedependencies are predicate argument dependen-cies, and such functional dependencies are rep-resented in the f-structures.
Thus, as stated in\[2, 3\], in the sentences (1), (2), and (3) above,the dependencies are captured by the equations(in the LFG notation 1) by 1" TOPIC =T OBJ,T TOPIC =T COMP OBJ, and 1" TOPIC =TCOMP COMP OBJ, respectively, which statethat.
the topic Mary is also the object of tele.phoned.
In general, since any number of additionalcomplement predicates may be introduced, theseequations will have the general form"f TOPIC =T COMP COMP ... OBJKaplan and Zaenen \[3\] introduced the formaldevice of functional unc'ertainty, in which this gen-eral case is stated by the equation1 Because of lack of space, we will not  define the LFGnotation.
We assume that  the reader is familiar with it.220T TOP IC  -T COMP?OBJThe functional uncertainty device restricts thelabels (such as COMP ?)
to be drawn from theclass of regular expressions.
The definition of f-structures is extended to allow such equations \[2,3\].
Informally, this definition states that if f is af-structure and a is a regular set, then ( fa)  = vholds if the value of f for the attribute s is a f-structure f l  such that (flY) -- v holds, where syis a string in a, or f = v and e E a.The functional uncertainty approach may becharacterized as a localization of the long dis-tance dependencies; a localization at the level of f-structures rather than at the level of c-structures.This illustrates the fact that if we use CFG-likerules to produce the surface structures, it is hardto state some generalizations directly; on the otherhand, f-structures or elementary trees in TAGs(since they localize the predicate argument depen-dencies) are appropriate domains in which to statethese generalizations.
We show that there is a di-rect link between the regular expressions used inLFG and the elementary trees of TAG.I .
I  OUTL INE  OF THE PAPERIn Section 2, we will define briefly the TAG for-malism, describing some of the key points of thelinguistic theory underlying it.
We will also de-scribe briefly Feature Structure Based Tree Ad-joining Grammars (FTAG), and show how someelementary trees (auxiliary trees) behave as func:tions over feature structures.
We will then showhow regular sets over labels (such as COMP ?)
canalso be denoted by functions over feature struc-tures.
In Section 3, we will consider the example oftopicalization as it appears in Section 1 and showthat the same statements are made by the twoformalisms when we represent both the elemen-tary trees of FTAG and functional uncertaintiesin LFG as functions over feature structures.
Wealso point out some differences in the two analy-ses which arise due to the differences in the for-malisms.
In Section 4, we point out how thesesimilar statements are stated differently in the twoformalisms.
The equations that capture the lin-guistic generalizations are still associated with in-dividual rules (for the c-structure) of the grammarin LFG.
Thus, in order to state generalizationsfor a phenomenon that is not localized in the c-structure, extra machinery such as functional un-certainty is needed.
We show that what this extramachinery achieves for CFG based systems followsas a corollary of the TAG framework.
This resultsfrom the fact that the elementary trees in a TAGprovide an extended omain of locality, and factorout recursion and dependencies.
A computationalconsequence of this result is that we can obtainthese analyses without going outside the powerof TAG and thus staying within the class of con-strained grammatical formalisms characterized asmildly context.sensitive (Joshi \[1\]).
Another con-sequence of the differences in the representations(and localization) in the two formalisms is as fol-lows.
In a TAG, once an elementary tree is picked,there is no uncertainty about the functionality inlong distance dependencies.
Because LFG relieson a CFG framework, interactions between uncer-tainty equations can arise; the lack of such interac-tions in TAG can lead to simpler processing of longdistance dependencies.
Finally, we make some re-marks as to the linguistic significance of restrict-ing the use of regular sets in the functional uncer-tainty machinery by showing that the linguistictheory instantiated in TAG can predict that thepath depicting the "movement" in long distancedependencies can be characterized by regular sets.2 INTRODUCTION TO TAGTree Adjoining Grammars (TAGs) are tree rewrit-ing systems that are specified by a finite set ofelementary trees.
An operation called adjoining ~is used to compose trees.
The key property ofthe linguistic theory of TAGs is that TAGs allowfactoring of recursion from the domain of depen-dencies, which are defined by the set of elemen-tary trees.
Thus, the elementary trees in a TAGcorrespond to minimal inguistic structures thatlocalize the dependencies such as agreement, sub-categorization, and filler-gap.
There are two kindsof elementary trees: the initial trees and auxiliarytrees.
The initial trees (Figure 1) roughly corre-spond to "simple sentences".
Thus, the root of aninitial tree is labeled by S or ~.
The frontier is allterminals.The auxiliary trees (Figure 1) correspondroughly to minimal recursive constructions.
Thus,if the root of an auxiliary tree is labeled by a non-terminal symbol, X,  then there is a node (calledthe foot node) in the frontier which is labeled byX.
The rest of the nodes in the frontier are labeledby terminal symbols.2We do not consider lexicalized TAGs (defined by Sch-abes, Abeille, and Joshi \[7\]) which allow both adjoiningand sub6titution.
The ~uhs  of this paper apply directlyto  them.
Besides, they are formally equivalent to TAGs.221~ Up: WP' AI IP, VAg~m~ A~am~tm2.
The relation of T/to its descendants, i.e., theview from below.
This feature structure iscalled b,.troo?S X brooc"-...~.
.
.
.
.
.
.
v JA a m .
~ p  mat  ?Figure 1: Elementary Trees in a TAGWe will now define the operation of adjoining.Consider the adjoining of/~ at the node markedwith * in a.
The subtree of a under the nodemarked with * is excised, and/3 is inserted in itsplace.
Finally, the excised subtree is inserted be-low the foot node of w, as shown in Figure 1.A more detailed description of TAGs and theirlinguistic relevance may be found in (Kroch andao hi \[51).2.1 FEATURE STRUCTURE BASEDTREE ADJO IN ING GRAMMARS(FTAG)In unification grammars, a feature structure is as-sociated with a node in a derivation tree in orderto describe that node and its relation to featuresof other nodes in the derivation tree.
In a FTAG,with each internal node, T/, we associate two fea-ture structures (for details, see \[9\]).
These twofeature structures capture the following relations(Figure 2)1.
The relation ofT/to its supertree, i.e., the viewof the node from the top.
The feature struc-ture that describes this relationship is called~.Figure 2: Feature Structures and AdjoiningNote that both the t ,  and b, feature structureshold for the node 7.
On the other hand, with eachleaf node (either a terminal node or a foot node),7, we associate only one feature structure (let uscall it t,3).Let us now consider the case when adjoiningtakes place as shown in the Figure 2.
The notationwe use is to write alongside ach node, the t and bstatements, with the t statement written above theb statement.
Let us say that troo~,broot and tloot=bLoo~ are the t and b statements of the root andfoot nodes of the auxiliary tree used for adjoiningat the node 7.
Based on what t and b stand for, itis obvious that on adjoining the statements , andtroot hold for the node corresponding to the rootof the auxiliary tree.
Similarly, the statements b,and b/oo~ hold for the node corresponding to thefoot of the auxiliary tree.
Thus, on adjoining, weunify t ,  with troot, and b, with b/oot.
In fact,this adjoining-is permissible only if t.oo~ and t.are compatible and so are b/oot and b~.
If we donot adjoin at the node, 7, then we unify t ,  withb,.
More details of the definition of FTAG may befound in \[8, 9\].We now give an example of an initial tree and anauxiliary tree in Figure 3.
We have shown only thenecessary top and bottom feature structures forthe relevant nodes.
Also in each feature structure3The linguistic relevance of this restriction has been dis-cussed elsewhere (Kroch and Joshi \[5\]).
The general frame-work does not  necessar i ly  requ i re  it .222shown, we have only included those feature-valuepairs that are relevant.
For the auxiliary tree, wehave labeled the root node S. We could have la-beled it S with COMP and S as daughter nodes.These details are not relevant o the main pointof the paper.
We note that, just as in a TAG, theelementary trees which are the domains of depen-dencies are available as a single unit during eachstep of the derivation.
For example, in al  the topicand the object of the verb belong to the same tree(since this dependency has been factored into al )and are coindexed to specify the movemeat due totopicalization.
In such cases, the dependencies be-tween these nodes can be stated directly, avoidingthe percolation of features during the derivationprocess as in string rewriting systems.
Thus, thesedependencies can be checked locally, and thus thischecking need not be linked to the derivation pro-cess in an unbounded manner.t -  .
.
.
t -  .
, .o,: ?
b .~ ' :~\ ]  P,: s " \ [d~: l~!I I .
-mI IFigure 3: Example of Feature Structures Associ-ated with Elementary Treesto adjoining, since this feature structure is notknown, we will treat it as a variable that gets in-stantiated on adjoining.
This treatment can beformalized by treating the auxiliary trees as func-tions over feature structures (by A-abstracting thevariable corresponding to the feature structure forthe tree that will appear below the foot node).Adjoining corresponds to applying this function tothe feature structure corresponding to the subtreebelow the node where adjoining takes place.Treating adjoining as function application,where we consider auxiliary trees as functions, therepresentation f/3 is a function, say fz, of theform (see Figure 2)~f.
($roo, A ...(broot A f ) )If we now consider the tree 7 and the node T?, toallow the adjoining of/3 at the node ~, we mustrepresent 7 by(...~.
A f~(b.)
A...)Note that if we do not adjoin at ~7, since t, and/3, have to be unified, we must represent 7 by theformula( .
.
.~Ab~A.
.
.
)which can be obtained by representing 7 by2.2 A CALCULUS TO REPRESENTFTAGIn \[8, 9\], we have described a calculus, extendingthe logic developed by Rounds and Kasper \[4, 6\],to encode the trees in a FTAG.
We will very brieflydescribe this representation here.To understand the representation f adjoining,consider the trees given in Figure 2, and in partic-ular, the node rl.
The feature structures associatedwith the node where adjoining takes place shouldreflect he feature structure after adjoining and aswell as without adjoining.
Further, the featurestructure (corresponding to the tree structure be-low it) to be associated with the foot node is notknown prior to adjoining, but becomes pecifiedupon adjoining.
Thus, the bottom feature struc-ture associated with the foot node, which "is b footbefore adjoining, is instantiated on adjoining byunifying it with a feature structure for the treethat will finally appear below this node.
Prior( .
.
.t~ A X(b~) A .
.
.
)where I is the identity function.
Similarly, wemust allow adjoining by any auxiliary tree adjoin-able at 7/(admissibility of adjoining is determinedby the success or failure of unification).
Thus, if/31,... ,/3, form the set of auxiliary trees, to allowfor the possibility of adjoining by any auxiliarytree, as well as the possibility of no adjoining at anode, we must have a function, F, given byF = Af.
( f~x(f)  V .
.
.
V f :~( f )  V f)and then we represent 7 by(.
.
.
t ,  A F(b,)  A ..
.
).In this way, we can represent the elementary trees(and hence the grammar) in an extended versionof K-K logic (the extension consists of adding A-abstraction and application).2233 LFG AND TAG ANALYSESFOR LONG DISTANCE DE-PENDENCIESWe will now relate the analyses of long distance de-pendencies in LFG and TAG.
For this purpose, wewill focus our attention only on the dependenciesdue to topicalization, as illustrated by sentences1, 2, and 3 in Section 1.To facilitate our discussion, we will consider eg-ular sets over labels (as used by the functionaluncertainty machinery) as functions over featurestructures (as we did for auxiliary trees in FTAG).In order to describe the representation of regu-lar sets, we will treat all labels (attributes) asfunctions over feature structures.
Thus, the labelCOMP,  for example, is a function which given avalue feature structure (say v) returns a featurestructure denoted by COMP : v. Therefore, wecan denote it by Av.COMP : v. In order to de-scribe the representation f arbitrary regular setswe have to consider only their associated regularexpressions.
For example, COMP ?
can be repre-sented by the function C* which is the fixed-point 4ofF = Av.
(F (COMP : v) V v) sThus, the equationT TOPIC  =T COMP*OBJis satisfied by a feature structure that satisfiesTOPIC  : v A C*  (OBJ  : v).
This featurestructure will have a general form described byTOPIC  : v A COMP : COMP : .
.
.
OB J  : v.Consider the FTAG fragment (as shown in Fig-ure 3) which can be used to generate the sentences1, 2, and 3 in Section 1.
The initial tree al  willbe represented by cat : "~ A F ( top ic  : v A F (pred  :te lephonedAobj  : v)).
Ignoring some irrelevant de-tails (such as the possibility of adjoining at nodesother than the S node), we cnn represent ax asa l  = topic : v A F (ob j  : v)Turning our attention to /~h let us consider thebottom feature structure of the root of/~1.
Sinceits COMP ~ the feature structure associated withthe foot node (notice that no adjoining is allowedat the foot node and hence it has only one featurestructure), and since adjoining can take place atthe root node, we have the representation of 81 ast in  \[8\], we have established that the fixed-point exists.aWe use the fact that R" = R 'RU {e}.aLf(comp : f ^ s~bj : ( .
.
. )
^ .
.
.
)where F is the function described in Section 2.2.From the point of view of the path from the rootto the complement, he NP and VP  nodes areirrelevant, so are any adjoinings on these nodes.So once again, if we discard the irrelevant infor-mation (from the point of view of comparing thisanalyses with the one in LFG), we can simplifythe representation f 81 asAf .F (comp : f )As explained in Section 2.2, since j31 is the onlyauxiliary tree of interest, F would be defined asF = a / .Z l ( / )v / .
Using the definition of/~1 above,and making some reductions we haveF = Af.F(comp : f )  V fThis is exactly the same analysis as in LFG usingthe functional uncertainty machinery.
Note thatthe fixed-point of F i sC , .
Now consider al.
Ob-viously any structure derived from it can now berepresented astopic  : v A C * (obj : v)This is the same analysis as given by LFG.In a TAG, the dependent i ems are part of thesame elementary tree.
Features of these nodes canbe related locally within this elementary tree (asin a , ) .
This relation is unaffected by any adjoin-ings on nodes of the elementary tree.
Althoughthe paths from the root to these dependent i emsare elaborated by the adjoinings, no external de-vice (such as the functional uncertainty machin-ery) needs to be used to restrict he possible pathsbetween the dependent nodes.
For instance, inthe example we have considered, the fact thatTOPIC  = COMP : COMP.
.
.
: OB J  followsfrom the TAG framework itself.
The regular pathrestrictions made in functional uncertainty state-ments such as in TOPIC  = COMP*OBJ  is re-dundant within the TAG framework.4 COMPARISON OF THE TWOFORMALISMSWe have compared LFG and TAG analyses oflong distance dependencies, and have shown thatwhat functional uncertainty does for LFG comesout as a corollary in TAG, without going beyondthe power of mildly context sensitive grammars.224Both approaches aim to localize long distance de-pendencies; the difference between TAG and LFGarises due to the domain of locality that the for-malisms provide (i.e., the domain over which state-ments of dependencies can be stated within theformalisms).In the LFG framework, CFG-like productionsare used to build the c-structure.
Equations areassociated with these productions in order to buildthe f-structure.
Since the long distance depen-dencies are localized at the functional level, addi-tional machinery (functional uncertainty) is pro-vided to capture this localization.
In a TAG, theelementary trees, though used to build the "phrasestructure" tree, also form the domain for localizingthe functional dependencies.
As a result, the longdistance dependencies can be localized in the el-ementary trees.
Therefore, such elementary treestell us exactly where the filler "moves" (even inthe case of such unbounded ependencies) and thefunctional uncertainty machinery is not necessaryin the TAG framework.
However, the functionaluncertainty machinery makes explicit the predic-tions about the path between the "moved" argu-ment (filler) and the predicate (which is close tothe gap).
In a TAG, this prediction is not explicit.Hence, as we have shown in the case of topicaliza-tion, the nature of elementary trees determines thederivation sequences allowed and we can confirm(as we have done in Section 3) that this predic-tion is the same as that made by the functionaluncertainty machinery.4.1 INTERACTIONS AMONG UNCER-TA INTY  EQUATIONSThe functional uncertainty machinery is a meansby which infinite disjunctions can be specified ina finite manner.
The reason that infinite numberof disjunctions appear, is due to the fact that theycorrespond to infinite number of possible deriva-tions.
In a CFG based formalism, the checking ofdependency cannot be separated from the deriva-tion process.
On  the other hand, as shown in \[9\],since this separation is possible in TAG,  only fi-nite disjunctions are needed.
In each elementarytree, there is no uncertainty about the kind of de-pendency between a filler and the position of thecorresponding gap.
Different dependencies corre-spond to different elementary trees.
In this sensethere is disjunction, but it is still only finite.
Hav-ing picked one tree, there is no uncertainty aboutthe grammatical function of the filler, no matterhow many COMPs come in between due to adjoin-ing.
This fact may have important consequencesfrom the point of view of relative fficiency of pro-cessing of long distance dependencies in LFG andTAG.
Consider, for example, the problem of in-teractions between two or more uncertainty equa-tions in LFG as stated in \[2\].
Certain strings inCOMP ?
cannot be solutions for( f  TOP IC)  = (.f COMP"  GF)when this equation is conjoined (i.e., when it in-teracts) with ( f  COMP SUBJ  NUM)  = S INGand ( f  TOP IC  NUM)  = PL.
In this case, theshorter string COMP SUBJ  cannot be used forCOMP"  GF because of the interaction, althoughthe strings COMP i SUB J, i >_ 2 can satisfy theabove set of equations.
In general, in LFG, extrawork has to be done to account for interactions.On the other hand, in TAG, as we noted above,since there is no uncertainty about the grammat-ical function of the filler, such interactions do notarise at all.4.2 REGULAR SETS IN FUNCTIONALUNCERTAINTYFrom the definition of TAGs, it can be shown thatthe paths are always context-free s ts \[11\].
If thereare linguistic phenomena where the uncertaintymachinery with regular sets is not enough, thenthe question arises whether TAG can provide anadequate analysis, given that paths are context-free sets in TAGs.
On the other hand, if regularsets are enough, we would like to explore whetherthe regularity requirement has a linguistic signif-icance by itself.
As far as we are aware, Kaplanand Zaenen \[3\] do not claim that the regularityrequirement follows from the linguistic considera-tions.
Rather, they have illustrated the adequacyof regular sets for the linguistic phenomena theyhave described.
However, it appears that an ap-propriate linguistic theory instantiated in the TAGframework will justify the use of regular sets forthe long distance phenomena considered here.To illustrate our claim, let us consider the el-ementary trees that are used in the TAG anal-ysis of long distance dependencies.
The elemen-tary trees, Sl and/31 (given in Figure 3), are goodrepresentative examples of such trees.
In the ini-tial tree, ?zt, the topic node is coindexed with theempty NP node that plays the grammatical roleof object.
At the functional evel, this NP nodeis the object of the S node of oq (which is cap-tured in the bottom feature structure associatedwith the S node).
Hence, our representation of225at (i.e., looking at it from the top) is given bytopic : v A F(obj : v), capturing the "movement"due to topicalization.
Thus, the path in the func-tional structure between the topic and the objectis entirely determined by the function F, whichin turn depends on the auxiliary trees that canbe adjoined at the S node.
These auxiliary trees,such as/~I, are those that introduce complemen-tizer predicates.
Auxiliary trees, in general, in-troduce modifiers or complementizer predicates asin/~1.
(For our present discussion we can ignorethe modifier type auxiliary trees).
Auxiliary treesupon adjoining do not disturb the predicate ar-gument structure of the tree to which they areadjoined.
If we consider trees such as/~I, the com-plement is given by the tree that appears belowthe foot node.
A principle of a linguistic theoryinstantiated in TAG (see \[5\]), similar to the pro-jec~ion principle, predicts that the complement ofthe root (looking at it from below) is the featurestructure associated with the foot node and (moreimportantly) this relation cannot be disrupted byany adjoinings.
Thus, if we are given the featurestructure, f ,  for the foot node (known only af-ter adjoining), the bottom feature structure of theroot can be specified as comp : jr, and that of thetop feature structure of the root is F(comp : f ) ,where F, as in a,, is used to account for adjoiningsat the root.To summarize, in a l ,  the functional dependencybetween the topic and object nodes is entirely de-termined by the root and foot nodes of auxiliarytrees that can be adjoined at the S node (the ef-fect of using the function F).
By examining suchauxiliary trees, we have characterized the latterpath as Af.F(comp : f ) .
In grammatical terms,the path depicted by F can be specified by right-linear productionsF -* F comp : / ISince right-linear grammars generate only regularsets, and TAGs predict he use of such right-linearrules for the description of the paths, as just shownabove, we can thus state that TAGs give a justi-fication for the use of regular expressions in thefunctional uncertainty machinery.4.3 GENERATIVE  CAPACITY  ANDLONG DISTANCE DEPENDENCYWe will now show that what functional uncer-tainty accomplishes for LFG can be achievedwithin the FTAG framework without requiringpower beyond that of TAGs.
FTAG,  as describedin this paper, is unlimited in its generative ca-pacity.
By placing no restrictions on the featurestructures associated with the nodes of elemen-tary trees, it is possible to generate any recursivelyenumerable language.
In \[9\], we have defined arestricted version of FTAG, called RFTAG, thatcan generate only TALs (the languages generatedby TAGs).
In RFTAG, we insist that the fea-ture structures that are associated with nodes arebounded in size, a requirement similar to the finiteclosure membership restriction in GPSG.
This re-stricted system will not allow us to give the analy-sis for the long distance dependencies due to top-icalization (as given in the earlier sections), sincewe use the COMP attribute whose value cannot bebounded in size.
However, it is possible to extendRFTAG in a certain way such that such analysiscan be given.
This extension of RFTAG still doesnot go beyond TAG and thus is within the class ofmildly context-sensitive grammar formalisms de-fined by Joshi \[1\].
This extension of RFTAG isdiscussed in \[10\].To give an informal idea of this extension anda justification for the above argument, let us con-sider the auxiliary tree,/~1 in Figure 3.
Althoughwe coindex the value of the comp feature in thefeature structure of the root node of/~1 with thefeature structure associated with the foot node, weshould note that this coindexing does not affectthe context-freeness of derivation.
Stated differ-ently, the adjoining sequence at the root is inde-pendent of other nodes in the tree in spite of thecoindexing.
This is due to the fact that as the fea-ture structure of the foot of/~1 gets instantiatedon adjoining, this value is simply substituted (andnot unified) for the value of the comp feature ofthe root node.
Thus, the comp feature is beingused just as any other feature that can be usedto give tree addresses (except hat comp indicatesdominance at the functional level rather than atthe tree structure level).
In \[10\], we have formal-ized this notion by introducing raph adjoininggrammars which generate xactly the same lan-guages as TAGs.
In a graph adjoining grammar,/~x is represented as shown in Figure 4.
Noticethat in this representation the comp feature is likethe features 1 and 2 (which indicate the left andright daughters of a node) and therefore not usedexplicitly.5 CONCLUSIONWe have shown that for the treatment of long dis-tance dependencies in TAG, the functional un-226NP VP ltcampFigure 4: An Elementary DAGcertainty machinery in LFG is redundant.
Wehave also shown that the analyses provided bythe functional uncertainty machinery can be ob-tained without going beyond the power of mildlycontext-sensitive grammars.
We have briefly dis-cussed some linguistic and computational spectsof these results.We believe that our results described in this pa-per can be extended to other formalisms, such asCombinatory Categorial Grammars (CCG), whichalso provide an e~ended omain of locality.
It isof particular interest o carry out this investiga-tion in the context of CCG because of their weakequivalence to TAG (Weir and Joshi \[12\]).
Thisexploration will help us view this equivalence fromthe structural point of view.REFERENCES\[1\] A. K. Joshi.
How much context-sensitivityis necessary for characterizing structural de-scriptions - -  Tree Adjoining Grammars.
In D.Dowty, L. Karttunen, and A. Zwicky, editors,Natural Language Processing q Theoretical,Computational nd Psychological Perspective,Cambridge University Press, New York, NY,1985.
Originally presented in 1983.\[2\] R. M. Kaplan and J. T. Maxwell.
An al-gorithm for functional uncertainity.
In 12 thInternational Conference on Comput.
Ling.,1988.\[3\] R. M. Kaplan and A. Zaenen.
Long distancedependencies,constituent structure, and func-tional uncertainity.
In M. Baltin and A.Kroch, editors, Alternative Conceptions ofPhrase Structure, Chicago University Press,Chicago.
IL, 1988.\[4\]\[5\]\[6\]\[7\]\[8\]\[9\]\[lO\]\[11\]\[12\]R. Kasper and W. C. Rounds.
A logical se-mantics for feature structures.
In 24 th meet-ing Assoc.
Comput.
Ling., 1986.A.
Kroch and A.K.
Joshi.
Linguistic Rele-vance of Tree Adjoining Grammars.
TechnicalReport MS-CIS-85-18, Department o f  Com-puter and Information Science, University ofPennsylvania, Philadelphia, 1985. to appearin Linguistics and Philosophy, 1989.W.
C. Rounds and R. Kasper.
A completelogical calculus for record structures repre-senting linguistic information.
In IEEE Sym-posium on Logic and Computer Science, 1986.Y.
Schabes, A. Abeille, and A. K. Joshi.
Newparsing strategies for tree adjoining gram-mars.
In 12 th International Conference onAssoc.
Comput.
Ling., 1988.K.
Vijayashanker.
A Study of Tee AdjoiningGrammars.
PhD thesis, University of Penn-sylvania, Philadelphia, Pa, 1987.K.
Vijay-Shanker and A. K. Joshi.
Fea-ture structure based tree adjoining rammars.In 12 th International Conference on Comput.Ling., 1988.K.
Vijay-Shanker and A.K.
Joshi.
Unificationbased approach to tree adjoining grammar.1989.
forthcoming.K.
Vijay-Shanker, D. J. Weir, and A. K.Joshi.
Characterizing structural descriptionsproduced by various grammatical formalisms.In 25 th meeting Assoc.
Comput.
Ling., 1987.D.
J. Weir and A. K. Joshi.
Combinatory cat-egorial grammars: generative power and rela-tionship to linear context-free rewriting sys-tems.
In 26 ta meeting Assoc.
Comput.
Ling.,1988.227
