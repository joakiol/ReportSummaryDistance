Proceedings of the EACL 2009 Demonstrations Session, pages 29?32,Athens, Greece, 3 April 2009. c?2009 Association for Computational LinguisticsFoma: a finite-state compiler and libraryMans HuldenUniversity of Arizonamhulden@email.arizona.eduAbstractFoma is a compiler, programming lan-guage, and C library for constructingfinite-state automata and transducers forvarious uses.
It has specific support formany natural language processing appli-cations such as producing morphologi-cal and phonological analyzers.
Foma islargely compatible with the Xerox/PARCfinite-state toolkit.
It also embraces Uni-code fully and supports various differ-ent formats for specifying regular expres-sions: the Xerox/PARC format, a Perl-likeformat, and a mathematical format thattakes advantage of the ?Mathematical Op-erators?
Unicode block.1 IntroductionFoma is a finite-state compiler, programming lan-guage, and regular expression/finite-state librarydesigned for multi-purpose use with explicit sup-port for automata theoretic research, construct-ing lexical analyzers for programming languages,and building morphological/phonological analyz-ers, as well as spellchecking applications.The compiler allows users to specify finite-stateautomata and transducers incrementally in a simi-lar fashion to AT&T?s fsm (Mohri et al, 1997) andLextools (Sproat, 2003), the Xerox/PARC finite-state toolkit (Beesley and Karttunen, 2003) andthe SFST toolkit (Schmid, 2005).
One of Foma?sdesign goals has been compatibility with the Xe-rox/PARC toolkit.
Another goal has been to al-low for the ability to work with n-tape automataand a formalism for expressing first-order logi-cal constraints over regular languages and n-tape-transductions.Foma is licensed under the GNU general pub-lic license: in keeping with traditions of free soft-ware, the distribution that includes the source codecomes with a user manual and a library of exam-ples.The compiler and library are implemented in Cand an API is available.
The API is in many wayssimilar to the standard C library <regex.h>, andhas similar calling conventions.
However, all thelow-level functions that operate directly on au-tomata/transducers are also available (some 50+functions), including regular expression primitivesand extended functions as well as automata deter-minization and minimization algorithms.
Thesemay be useful for someone wanting to build a sep-arate GUI or interface using just the existing low-level functions.
The API also contains, mainly forspell-checking purposes, functionality for findingwords that match most closely (but not exactly) apath in an automaton.
This makes it straightfor-ward to build spell-checkers from morphologicaltransducers by simply extracting the range of thetransduction and matching words approximately.Unicode (UTF8) is fully supported and is infact the only encoding accepted by Foma.
It hasbeen successfully compiled on Linux, Mac OS X,and Win32 operating systems, and is likely to beportable to other systems without much effort.2 Basic Regular ExpressionsRetaining backwards compatibility with Xe-rox/PARC and at the same time extending the for-malism means that one is often able to constructfinite-state networks in equivalent various ways,either through ASCII-based operators or throughthe Unicode-based extensions.
For example, onecan either say:ContainsX = ?
* X ?
*;MyWords = {cat}|{dog}|{mouse};MyRule = n -> m || p;ShortWords = [MyLex1]1 ?
?
?<6;or:29Operators Compatibility variant Function[ ] () [ ] () grouping parentheses, optionality?
?
N/A quantifiers\ ?
term negation, substitution/homomorphism: : cross-product+ ?
+ ?
Kleene closures?<n ?>n ?
{m,n} ?<n ?>n ?
{m,n} iterations1 2 .1 .2 .u .l domain & range.f N/A eliminate all unification flags?
$ $.
$?
?
$ $.
$?
complement, containment operators/ ./.
/// \\\ /\/ / ./.
N/A N/A ?ignores?, left quotient, right quotient, ?inside?
quotient?
/?
= 6= N/A language membership, position equivalence?
< > precedes, follows?
?
?
?
- .P.
.p.
| & ?
.P.
.p.
union, intersection, set minus, priority unions=> -> (->) @-> => -> (->) @-> context restriction, replacement rules?
<> shuffle (asynchronous product)?
?
.x.
.o.
cross-product, compositionTable 1: The regular expressions available in Foma from highest to lower precedence.
Horizontal linesseparate precedence classes.30define ContainsX ?
* X ?
*;define MyWords {cat}|{dog}|{mouse};define MyRule n -> m || _ p;define ShortWords Mylex.i.l & ?
?<6;In addition to the basic regular expression oper-ators shown in table 1, the formalism is extendedin various ways.
One such extension is the abil-ity to use of a form of first-order logic to makeexistential statements over languages and trans-ductions (Hulden, 2008).
For instance, supposewe have defined an arbitrary regular language L,and want to further define a language that containsonly one factor of L, we can do so by:OneL = (?x)(x ?
L ?
?
(?y)(y ?
L?
?
(x = y)));Here, quantifiers apply to substrings, and we at-tribute the usual meaning to ?
and ?, and a kind ofconcatenative meaning to the predicate S(t1, t2).Hence, in the above example, OneL defines thelanguage where there exists a string x such thatx is a member of the language L and there doesnot exist a string y, also in L, such that y wouldoccur in a different position than x.
This kindof logical specification of regular languages canbe very useful for building some languages thatwould be quite cumbersome to express with otherregular expression operators.
In fact, many of theinternally complex operations of Foma are builtthrough a reduction to this type of logical expres-sions.3 Building morphological analyzersAs mentioned, Foma supports reading and writ-ing of the LEXC file format, where morphologicalcategories are divided into so-called continuationclasses.
This practice stems back from the earliesttwo-level compilers (Karttunen et al, 1987).
Be-low is a simple example of the format:Multichar_Symbols +Pl +SingLEXICON RootNouns;LEXICON Nounscat Plural;church Plural;LEXICON Plural+Pl:%?s #;+Sing #;4 An API exampleThe Foma API gives access to basic functions,such as constructing a finite-state machine froma regular expression provided as a string, per-forming a transduction, and exhaustively matchingagainst a given string starting from every position.The following basic snippet illustrates how touse the C API instead of the main interface ofFoma to construct a finite-state machine encod-ing the language a+b+ and check whether a stringmatches it:1. void check_word(char *s) {2. fsm_t *network;3. fsm_match_result *result;4.5. network = fsm_regex("a+ b+");6. result = fsm_match(fsm, s);7. if (result->num_matches > 0)8. printf("Regex matches");9.10 }Here, instead of calling the fsm regex() function toconstruct the machine from a regular expressions,we could instead have accessed the beforemen-tioned low-level routines and built the network en-tirely without regular expressions by combininglow-level primitives, as follows, replacing line 5in the above:network = fsm_concat(fsm_kleene_plus(fsm_symbol("a")),fsm_kleene_plus(fsm_symbol("b")));The API is currently under active develop-ment and future functionality is likely to includeconversion of networks to 8-bit letter transduc-ers/automata for maximum speed in regular ex-pression matching and transduction.5 Automata visualization andeducational useFoma has support for visualization of the ma-chines it builds through the AT&T Graphviz li-brary.
For educational purposes and to illustrateautomata construction methods, there is some sup-port for changing the behavior of the algorithms.31For instance, by default, for efficiency reasons,Foma determinizes and minimizes automata be-tween nearly every incremental operation.
Oper-ations such as unions of automata are also con-structed by default with the product constructionmethod that directly produces deterministic au-tomata.
However, this on-the-fly minimizationand determinization can be relaxed, and a Thomp-son construction method chosen in the interface sothat automata remain non-deterministic and non-minimized whenever possible?non-deterministicautomata naturally being easier to inspect and an-alyze.6 EfficiencyThough the main concern with Foma has notbeen that of efficiency, but of compatibility andextendibility, from a usefulness perspective it isimportant to avoid bottlenecks in the underly-ing algorithms that can cause compilation timesto skyrocket, especially when constructing andcombining large lexical transducers.
With thisin mind, some care has been taken to attemptto optimize the underlying primitive algorithms.Table 2 shows a comparison with some exist-ing toolkits that build deterministic, minimizedautomata/transducers.
One the whole, Fomaseems to perform particularly well with patho-logical cases that involve exponential growth inthe number of states when determinizing non-deterministic machines.
For general usage pat-terns, this advantage is not quite as dramatic, andfor average use Foma seems to perform compa-rably with e.g.
the Xerox/PARC toolkit, perhapswith the exception of certain types of very largelexicon descriptions (>100,000 words).7 ConclusionThe Foma project is multipurpose multi-modefinite-state compiler geared toward practical con-struction of large-scale finite-state machines suchas may be needed in natural language process-ing as well as providing a framework for re-search in finite-state automata.
Several wide-coverage morphological analyzers specified in theLEXC/xfst format have been compiled success-fully with Foma.
Foma is free software and willremain under the GNU General Public License.As the source code is available, collaboration isencouraged.GNU AT&TFoma xfst flex fsm 4?
?a?15 0.216s 16.23s 17.17s 1.884s?
?a?20 8.605s nf nf 153.7sNorth Sami 14.23s 4.264s N/A N/A8queens 0.188s 1.200s N/A N/Asudoku2x3 5.040s 5.232s N/A N/Alexicon.lex 1.224s 1.428s N/A N/A3sat30 0.572s 0.648s N/A N/ATable 2: A relative comparison of running a se-lection of regular expressions and scripts againstother finite-state toolkits.
The first and second en-tries are short regular expressions that exhibit ex-ponential behavior.
The second results in a FSMwith 221 states and 222 arcs.
The others are scriptsthat can be run on both Xerox/PARC and Foma.The file lexicon.lex is a LEXC format English dic-tionary with 38418 entries.
North Sami is a largelexicon (lexc file) for the North Sami languageavailable from http://divvun.no.ReferencesBeesley, K. and Karttunen, L. (2003).
Finite-StateMorphology.
CSLI, Stanford.Hulden, M. (2008).
Regular expressions and pred-icate logic in finite-state language processing.In Piskorski, J., Watson, B., and Yli-Jyra?, A.,editors, Proceedings of FSMNLP 2008.Karttunen, L., Koskenniemi, K., and Kaplan,R.
M. (1987).
A compiler for two-level phono-logical rules.
In Dalrymple, M., Kaplan, R.,Karttunen, L., Koskenniemi, K., Shaio, S., andWescoat, M., editors, Tools for MorphologicalAnalysis.
CSLI, Palo Alto, CA.Mohri, M., Pereira, F., Riley, M., and Allauzen, C.(1997).
AT&T FSM Library-Finite State Ma-chine Library.
AT&T Labs?Research.Schmid, H. (2005).
A programming language forfinite-state transducers.
In Yli-Jyra?, A., Kart-tunen, L., and Karhuma?ki, J., editors, Finite-State Methods and Natural Language Process-ing FSMNLP 2005.Sproat, R. (2003).
Lextools: a toolkit forfinite-state linguistic analysis.
AT&T Labs?Research.32
