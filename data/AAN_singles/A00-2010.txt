Generation in the Lambek Calculus Framework:  an Approach withSemantic Proof NetsSylvain Pogodallasylvain.pogodalla @ xrce.xerox.comXerox Researce Centre Europe6, chemin de Maupertuis38240 Meylan - -  France1 IntroductionThc lincar logic (Girard, 1987) provides a power-ful framcwork to cxprcss categorial gt'ammars (Aj-dukicwicx, 1935) and Lambek calculus (Lambek, 1958),and a lot of work has presented proof nets uses for lin-guistic purposcs, with a special look at proof nets forLambek calculus (Roorda, 1991; Lamarche and Retor6,1996).
But they have mainly explored the syntactic a-pabilities of proof nets, describing parsing processes.This paper wants to focus on the generation capa-bilities of proof nets thanks to their semantic readingsas expressed in (de Groote and Retor6, 1996).
Themain features of our proposal consist in the use of proofnets lot Lambek calculus, of the Curry-Howard iso-morplaisna (Howard, 1980; Girard et al, 1988), of se-mantic proof nets with semantic expressions ?t la Mon-tagu?
(Montague, 1974; Dowry et al, 1981), and in analgorithm for proof search with a target proof net.Unlike a previous proposal for generation in the Lam-bek calculus framework (Merenciano and Mort'ill, 1997),this point of view avoids the use of the A-term unificationto lead the generation process.
And the algorithmic un-decidability of this latter mechanism (from second orderunification) does not occur any more.In this work, we do not consider the choice of lexi-cal items from a given semantic expression the syntacticrcalization of which we want to generate, but rather tileway we can associate given lexical entries to fit the givensemantic expression and generate a syntactically correctcxpression.
For this purpose, we express our problem asa proof search one in (multiplicative) linear logic whichis decidable.
Moreover, we characterize the semanticrecipes of lexical items that provide a polynomial solu-tion for the generation process.2 Multi Usage Proof Nets2.1 Proof Nets(Girard, 1987) introduced proof nets formalism as thenatural deduction syntax for linear logic, also studiedin (Retor6, 1993).
They represent proofs in linear logicwith more accuracy than sequential proofs: on one handthey are more compact, on the other hand they identifyunessentially different sequential proofs (for instance inthe order of the rules introduction).From a one-sided sequent and a sequential proof ofit, we obtain a proof net by unfolding every formula asa tree (whose nodes are the binary connectives and theleaves are formulas, e.g.
atomic ones) and linking to-gether the formulas occurring in the same axiom rule oftile sequent calculus.But proof nets have a more intrinsic definition that pre-vents us to come back every time to sequential proofs.They can be defined as graphs with a certain property(i.e.
verifying a correctness criterion) such that everyproof net with this property corresponds to a sequentialproof and such that every proof net built from a sequen-tial proof has this property.
So that we do not present hesequent calculus but only the proof net calculus.In this paper, we do not consider all the proof nets, buta part of the multiplicative ones: those of the intuition-istic implicative linear logic.
In this case, sequents aremade of several antecedent \[brmulas, but only one succe-dent formula.
To deal with tile intuitionistic notion withproof nets (since we consider one-sided sequents), weuse the notion of polarities with the input (,: negative)and the output (o: positive) (Danos, 1990; Lamarche,1995) to decorate formulas.
Positive ones correspond tosuccedent formulas and negative ones to antecedent for-mulas.Given the links of table 1, we define proof structuresas graphs made of these links such that:1. any premise of any link is connected to exactly oneconclusion of some other link;2. any conclusion of any link is connected to at mostone premise of some other link;3. input (resp.
output) premises are connected to input(resp.
output) conclusions of the same type.Note that the two links for tile negative and positiveimplications correspond to the two connectives of the lin-ear logic: Tensor and Par, so that we name these linksafter these latter connectives.
But in the following, onlythe graphical forms of the links play a role.Proof nets are proof structures that respect he correct-ness criterion.We mentioned the intrinsic definition of proof nets thatenables the complete representation f sequential proofs.Tile cut elimination property of sequent calculus also ap-pears intrinsically in the proof net formalism with a sire-"/1131 70Table 1: LinksName Axiom Tensor Par CutLink CI C2 ~ 2C~, g2" ' \ l / /CP, 'cmises none  t)1, P2 Pl , P2 Pl ,  P2Conc lus ions  c l ,  c2 c noneC 1 :A  +o , :A -Pl : ,4-P2 : B +e : (A -o  B)+CPl : A +P2 : /3 -c : (A  ---0 B) -,,O I :A -P2 :A+TypesTable 2: Cut-elimination rewriting rulesx x y yi ......................... !
...............................Y Y x x,l' 1 ./3 2YYi Y2Yxl x:) Yl Y2L Jpie rewriting process described in table 2 (in case of com-plex formulas as in the third rewriting rule, those rulescan apply again on the result and propagate until reach-ing atoms).2.2 Syntactic Proof NetsDefinitions of proof nets tbr Lambek calculus first ap-peared in (Roorda, 1991 ).
They naturally raised as Lam-bek calculus is an intuitionistic fragment of non commu-tative linar logic (with two linear implications: "'\" onthe left and " /"  on tile right), and the consequences onthe proof net calculus we presented in section 2.1 are:.
we get two tensor links: one for the formulas(B /A) -  (the one in table 1) and one lbr the for-mula (B \A) -  (just inverse the polarities of thepremises).
And two par links : one for the lbrmula(A \B)  + and one for (A /B)  + (idem);?
formulas in Lambek's equents are ordered, so thatconclusions of the proof nets are cyclically orderedand axiom links may not cross.If T v is the set of basic types (e.g.
S, NP .
.
.
), the setT of syntactic types ~bllows T ::= ~\[T \T \ [T /T .Note that from a syntactic ategory, we can untbld theformula to obtain a graph which only lacks axiom linksto become a proof structure.
So that the parsing processin this framework is, given the syntactic ategories of theitems and their order, to put non crossing axiom linkssuch that the proof structure is a proof net.
It means thereis a proof of .b' given types in a certain order.
For tech-nical reasons, the order of the conclusions (i.e.
the typesused) in the proof net to prove S is the reverse order ofthe words associated to these types.As an example, with the lexicon of table 3, provingthat John lives in Paris is a correct sentence leads to findaxiom links between the atoms in the figure l(a).
Fig-ure I(b) shows it actually happens and proves the syn-tactic correctness of the sentence.Table 3: Lexiconlexical entry syntaxiccategoryJohn NPParis N Plives N P\,b'in (,S'\,S') / N P2.3 Semantic Proof NetsIn this section, we present how (de Groote and RetortL1996) propose to use proof nets as semantic recipes.
Asa slight difference with this work, we only deal in thispaper with semantic recipes that correspond to linear A-terms in the Montague's semantics framework.The idea of expressing the semantics with proofnets refers to the fact that both the A-terms (with theCurry-Howard isomorphism) and the proof nets repre-sent prooS; of intuitionistic implicative linear logic.
Andindeed, the linear A-terms may be encoded as proof nets.On the other hand, given an intuitionistic implicativeproof net, a simple algorithm (given in (de Groote and71.S'- ,q'+II<~---.i- o~ ,5'- .,?~+?
.V P -  \], N P iParis in 1" " Ives John(a) Unfolding of the syntactic typeso S+Figure I: ParsingRotor6, 1996), based on (Lamarche, 1995)'s dependencypaths), wc can obtain a A-term.Then, instead of associating a A-term to a \[exical entry,wc can associate a proof net.
For instance, on the seman-tic side, we can use the Montagovian types e and t andtyped constants.
Of course, we want to keep the compo-sitionalily principle of Montague's emantics that mapsany syntactic association rule with a semantic associa-tion rule.
We express it in a straightforward way with theft~llowing homomorphism (for as many basic categoriesas required):"H(.
:VP) = e 7?
(A \B)  = "K(A)  ~ "H(B)"H(,~') = t "H(A/B)  = "H(B) --o "H(A)And for a lexical item, given its syntactic type, we as-SUlne its semantic proof net to verify:?
the type of its unique output conclusion is the ho-momorplaic image of the syntactic type:?
its input conclusions (if any) are decorated withtyped constants.An example of such a lexicon is given in table 4.Figure 2: Syntactic proof net for John lives in ParisLet us illustrate the process on a short example.
Weuse the lexicon of table 4 to parse the sentence John livesin Paris.
The first thing is to define with the syntactic at-egories of the different lexical items the syntactic proofnet of figure 2.
It provides the way we should composethe semantic recipes of each lexical item: we take its ho-momorphic image as in figure 4(a), and we substitute toevery input its semantic definition with cut-links.Then the cut-elimination on the resulting proof netgives a new proof net (on figure 4(b)) we can use as thesemantic analysis of Jolm lives in Paris.
If necessary, wecan come back to the A-term expression:(in p) ( l i ve  j).i(b) Matching the dual atoms to obtain aproof netof John lives in Paris3 Generation: Stating the ProblemLet us now consider the problem of generation.
We havea given semantic proof net (like the one in figure 4(b))and we want to gather syntactic entries with axiom linkssuch that:I. this yields a correct (syntactic) proof net;2. the meaning of the resulting proof net matches thegiven semantic expression.As we already said it, we assume that we have some lex-ical entries, and we try to make the generation with theseentries, each one used once and only once.Thus, if we define:* I/0 the semantic proof net of the expression we wantto generate;* IIi the semantic proof nets associated to the givenlexical entries i we use;* Ti the unfolding in proof structure of the syntacticformula of the lexical item i;?
F the forest made of the syntactic trees of all theconsidered lexical entries plus the output (the typewe want to derive).The generation problem (see figure 5) is to find a match-ing M of atomic formulas of F such that:1.
F endowed with M (let us call this proof structureF ' )  is a correct proof net;2. when cut-linking H(F' )  with the Hi, and eliminat-ing these cuts, we obtain H0.This problem is not an original one: making proofsearch with proof nets always leads to look for match-ing between atomic formulas of opposite polarities.
Sothat an answer to this problem would consist in taking f 'and try every possible matching.
This brute-force tech-nique would of course appear essentially inefficient, andour purpose is to use everything we know to prune tilesearch domain.Nevertheless, note that even with such an algorithm,we already reach the decidability (because the finitnessof the number of the matchings) without making any as-sumption on the form of the semantic entries (neither onthe order of the associated A-terms, nor the presence of afree variable).
And we want to keep these good proper-ties in our algorithm.72Table 4: Lexiconlexical entry syntaxic ategoryJo h n N PMary N P mPa,is pLivesInSeeksXPmP\S(,5'\,s')/:vP(.VP'~,S')/(((NP\,S')/XP)\(Xp\,b'))associated A-termJAa: .
l i ve  xA~..A~/.
(in .r).qA.r .
(try(xf ind))semantic proof netII john (cf.
figure 3(a))\[IMary (cf.
figure 3(b))IIPari s (cf.
figure 3(c))\[Iliv?
(cf.
figure 3(d))gin (cf.
figure 3(e))(cf.
figure 3(t))(a)1 ljohn, , i  i1 9,L<- <% ,p- ~+;i m <+~~nl~ - ,,!o y 'W(b) (c) (d) Fllive (e) FlinFIMary 1-!.
Parisfindi.
.
.
.
.
.
.
.
.
<-1\] ,4 5 6 16 17 , - _ IY  ) ,+try(f) Hseek sFigure 3: Semantic proof nets of the lexicon of table 44 Cut -e l iminat ionas  Matr ix  Computat ionThis section first establishes ome equivalent relationsbetween cut-elimination on proof nets and matrix equa-lions.
We then show how to use these equations in thegeneration process and how we can solve them.
It en-ables us to characterize the properties required by the se-mantic proof nets to have a polynomial resolution of thegeneration process.4.1 PrinciplesFirst, as expressed in (Girard, 1989) and refornmlatedin (Retord, 1990: Girard, 1993; Girard, 1995), we statethe algebraic representation f cuFeliminalion on proofnets.
Due to lack of space, we can not develop it, but tileprinciple is to express cut-elimination between axiomswith incidence matrices and paths in graphs.Let us consider aproof net U.
We denote by (e i ) 1 < i<.~all the vertices taking place for atoms in ft. We candefine U the incidence matrix of axiom links, cr the in-cidence matrix of cut links (we assume without loss ofgenerality that they happen only between axiom links),and II the incidence matrix of axiom links of-ff where ~-is the proof net resulting from all the cut eliminations on731 llJohnI t - t  +L - - -  ?
...........................................................................................................\[IParis6-iiii iiiI t(a) Before cut-elimination (b) After cut-eliminationFigure 4: Semantic proof nets tor (in p)( l ive \])Match ing  :11- !
,,,Figure 5: The generation problemThen we have (Girard, 1989):I1 = (1 - o.a)U(l + ~-" (o .U)k ) (1 -  o. :') (1)1~1 (e/~) ) is  U = Moreover, s ince(c rU) i sn i lpotent , ( l+~  kinversible, and its inverse is (1 - crU).
The next sectionmake explicit he relation ( I ) with a special choice of thebase (~ i ).4.2 Matrix Relation for Cut EliminationIn tile problem we are dealing with, we know II and someof the axiom links in/~'.
Let us assume that Vi E \[1,p\],both ?
i and 13(ei ) i are not cut-linked in L; (this assump-tion entails no loss of generality).4.3 Expressing the Reduction of U into IIIn this section, we want to give a relation equivalent to ( I )which focuses on some axiom links we are interested in.As mentioned in section 4.2, we can consider the (ei)such that in ~" :?
Vi E \[1,p\], ei is not cut-linked (then, because ofthe hypothesis made in section 4.2, B(ei)  is cut-linked);?
'7'i E \ [p+ 1. p+ m\], ei is cut-linked but B(ei) is notcut-linked;?
Vi E \[p + m + 1, p + 1~ + n\], both e.i and B(ei ) arecut-linked.Note: Remember we assume that there is no axiom linksuch that both its conclusions are not cut-linked.
So p =I I I .I B(e ) is the atom in \[7 such that here is an axiom link between eand BIe).Icul -elilninal~,~n lit,IThen in this base, we express tile matrices (every ax-iom link of t--7 has at least one of its conclusion involvedin a cut link):0 Uj !
0 \] 6 \]6 ..... 6ro : :o io~o.= / ::ai   il\[rl~:: o ::o \]n =/6 i676 i iLO:,O ioJIf we define A = ( tU l I I1  - o .
l tU l ) ( - r l  and X =Uz(1 - o'4U3) -1,  we can state the theorem:Theorem 1 Let -U be a correct proof net reducing inRes(cr, U) after cut elimination.
These relations areequivalent:?
Res(cr, U) = (1 - o:-')U(1 - o .U) - l (1  - o "2)?
( tUlII1 - o.1 tLil)U1 = o.=,~,h(1 - o'4t'3) -1 to.._,?
A = tcr,_Xcr'., arrd U3 = X -1  -~ 0"4.Of course, all tire terms are defined.We base the proof search algorithm corresponding to thegeneration process we are dealing with on this third rela-tion, as explained in the next sections.4.4 Solving the EquationsIn this section (proof search oriented), we consider" thatthe axiom links we are looking for are those whose twoconclusions are involved in cut links.
That is we want tocomplete U3.
As in the previous ection we proceeded74by equivalence, solving the equation (1) correponds tosolving the equation.4 = ?r,.Y tcr._, (2)in .Y with X inversible.
Then, we have to solve(r3 : X -1  +0"4such that tU3 = (ra and U a = 1.Let 0"._, ?
.~,,,,,,(1R), X = (xi, j)  E A4,+(IR)and.1 E .XA,,(LR).
Let the two sequences 1 < it < .
.
.
<i/ < m and 1 < Ji < .
.
.
< j/ < m be such that with(( , ,  6) ?
\ [ i ,  ,1l\] ?
\ [ \ [ ,  l l \ ] ,  Eab = (5iaSjb)i,jEtl,m\]x\[1,,1\] 2<, : E,,j, : ),,+I lIn other words, 0.
'-uj = 1 ca> Ell E \[1,1\] A i = i h A j =i l l  ?Thenl /cr.,X tcr.-_, = ( E EittJq ) * X * t( E Ei,.+j,.., )/ t= l  /-,=1l /= E E (a i i l l+t>Jq J+2OJ i la ) l<- i ' JS rnl l  =1 lz=lIt follows that i fA  = (aij)i,j = o'2-'~-" to2 thenV(11,12) E \[1,1\]'+',xj,,j,~ = aiqi,2.
(3)A consequence of this result is that if o4 = 0, then/ = n and we determine X completely with relation (3),and then the same for  Ua.
This configuration correspondto the fact that in the (given) semantic proof nets, no out-put contains the two conclusions of a same axiom link.In this latter case, the computation is not so simple andshould be mixed with word o,'der constraints.5 ExampleLet us process on an example the previous results.
Westill use the lexicon of table 4, and we want to generate(if possible) a sentence whose meaning is given by theproof net of ligure 7: (try(find j ))m.We first need to associate very atom with all index (inthe figures, we only indicate a number i beside the atomto express it is el).
Of course, we have to know how torecognize the ei that are the same in U (figure 6) and in11 (figure 7).
This can be done by looking at the typedconstants decorating the input conclusions (for the mo-ment.
we don't have a general procedure in the complexcases).We also assume in this numbering that we know whichof the atoms in H(F)  are linked to t + (the unique out-put).
In our case where 0.4 = 0, it is not a problem to, { l i f i= j-5 , j  = Oi f i#  jmake such a statement.
In other cases, tile complexitywould increase polynomially.Then, the given matrices are:"000100000000100000100000010000001000000000000100000000100000000100000000-0000000000"00000000 H i=O0O0O010O1000010000~0001000000000000010010000000010000000000000000100000000000100000100000010000000000001000" 1 _~_So0000000000"000000000000000000000000000000000000000000000001000000000000000001000000000000000000000000.0" 2 =00001000-00010000100000000100000000100000000000000O0O0100000000000000001000000001.4 = (U-11 I I1  - o" 1 tu1) tUl l  =000100000000001000000000000010100000000001000000000000000000000000000100000000000010000000-000000100According to the definition of the (it) and tile (jr) fami-lies such that 0.2 = E l  El+j+, we have:; 4 +2 ,o I2 3 4 5 6 7 8Then.1;5,2 - -  1 - -  a l ,  4.1~3,4 - -  1 - -  a5 ,  2ah:;,8 ~ 1 ~ a7 ,10./?2, 5 -= 1 --~ a4,1./.
'i, 7 ~ 1 - a3 ,  9;l~8, 6 ~-- 1 --~ a lo ,7X4, 3 -= I = a2, 5397,1 = 1 = ag, 3and in this case 0"4 = 0, so according to tile preceedingnotes .
\  is completely determined andX = Ua =i ooooo il 000100~001000010000000000  ooooooC 000010 3We can add this matching to the syntactic forest of fig-ure 8(a) (do not forget that//3 represents the edges be-tween ei with i E \[17,22\])and obtain on F the matchingof figure 8(b).75~LmB- !
irl+%+- \ i//" /"+\\ //" \i ;  =~i ,  /+t*'.e-ct " -21i,1 51 16 7Y ' "C  : :try j mfind F igure 7: Marking atoms on I I8t +t!
22 23 24 25 ; ~ _ ~  26 e+t+t- ~.---seekse +27(a) The syntactic foreste-J~4m28e-~ t 4Mao"21 22 23 24 2526e i ~ 5 "1"seeks27 ~I128J~,hn Mary8t ?
(b) The syntactic forest endowed with the matching described byFigure 8: Applying the matching on the syntactic forestWe still have to ensure the correctness of this proof net(because we add all the tensor and par links), but it has aquadratic complexity (less than the matrix computation).In this case, it is correct.Note:?
Actually, this only gives us the axiom links.
It stillnecessitates to compute the word order to have nocrossing axiom link.
This can be done from the ax-iom links easier than quadratic time: it is a well-bracketing check.
Here, it is easy to see that putting76the John item on the left would achieve the result ofMary seeks John,?
The choice of seeks and its high order type (for in-tcnsionnality) shows there is no limitation on the or-der of the A-term.6 Conc lus ionWe took advantage of proof nets on the semantic pointof view and we expressed the generation process as aguided proof search.
On top of keeping the decidabilityproperty of this framework, we characterized the seman-tic proof nets that enable a polynomial time process.Such properties are crucial because it is the central partof the generation process (considering Lambek calculus).But there are other things left to look at.
As the very nextsteps, we should work on the atoms numbering and thechoice of the lexical items.
Appropriate interactions be-tween word order contraints and matrix resolution in thehard case should also be considered.
Moreover, anotherpoint is to benefit from the power of linear logic and dealwith non linear A-terms.Finally.
since different extensions of Lambek calcu-lus based on proof nets (Moortgat, 1996; Lecomte andRetor6, 1995) have been considered, we hope our pro-posal and its good properties to apply to other linguisticapproaches.AcknowledgmentsI would like to thank Christian Retor6 who pointed outto me Girard's algebraic interpretation of the cut elimi-nation.Re ferencesKazimierz Ajdukiewicz.
1935.
Die syntaktische Kon-nexitat.
Studia Philosophica, 1:1-27.
English trans-lation in Storrs McCall (ed), Polish Logic 1920-1939,Oxford University Press, pp.
207-231.Vincent Danos.
1990.
Une Application de la LogiqueLin6aire fs I'F.tude des Processus de Normalisation(principalement duA-calcul).
Ph.D. thesis, Universit6Paris VII, June.Philippe de Groote and Chritian Retor& 1996.
Onthe semantic readings of proof-nets.
In Glyn MorrillGccrt-Jaal Kruijff and Dick Oehrle, editors, FormalGrammar, pages 57-70, Prague, August.
FoLLI.David R. Dowty, Robert E. Wall, and Stanley Peters.1981.
hztroduction to Montague Semantics.
KluwerAcademic Publishers.Jean-Yves Girard, Yves Lafont, and P. Taylor.
1988.Proofs" and Tyl?es.
Cambridge Tracts in TheoreticalComputer Science 7.
Cambridge University Press.Jean-Yves Girard.
1987.
Linear logic.
TheoreticalComputer Science, 50: I - 102.Jean-Yves Girard.
1989.
Geometry of interaction I: In-terpretation of system F. In C. Bonotto, R. Ferro,S.
Valentini, and A. Zanardo, editors, Logic Collo-quium '88, pages 221-260.
North-Holland.Jean-Yves Girard.
1993.
Linear logic: Its syntax and se-mantics.
In J.-Y.
Girard NS Y. Latont and L. Regnier.editors, Advances in Linear Logic, Ithaca, New York,June,Jean-Yves Girard.
1995.
Geometry of interaction III:The general case.
In J.-Y.
Girard, Y. Lafont, andL.
Regnier, editors, Advances in Linear Logic, pages329-389.
Cambridge University Press.
Proceedingsof the Workshop on Linear Logic, Ithaca, New York,June 1993.W.
A. Howard, 1980.
To H. B. Curry: Essays on combi-natory logic, Lambda Calculus and Formalism, chap-ter The Formula~-as-Types Notion of Construction,pages 479-490.
Academic Press,Franqois Lamarche and Christian Retor6.
1996.
Proof-nets for the lambek calculus - an overview.
InV.
Michele Abrusci and Claudio Casadio, editors,Proceedings 1996 Roma Workshop.
Proofs and Lin-guistic Categories, pages 241-262.
Editrice CLUEB,Bologna, April.Franqois Lamarche.
1995.
Games semantics for fullpropositional linear logic.
In Proceedings, Tenth An-nual IEEE Symposium on Logic in Computer Science,pages 464-473, San Diego, California, 26-29 June.IEEE Computer Society Press.Joachim Lambek.
1958.
The mathematics of sen-tence structure.
American Mathematical Monthly,65(3):!
54-170.Alain Lecomte and Christian Retor6.
1995.
Pomsetlogic as an alternative categorial grammar.
In FormalGrammar, Barcelona.Josep M. Merenciano and Glyn Morrill.
1997.
Genera-tion as deduction on labelled proof nets.
In ChristianRetor6, editor, Proceedings of the 1st InternationalConference on Logical Aspects of Computational Lin-guistics (LACL-96), volume 1328 of LNAI, pages 310-328, Berlin, September23-25.
Springer.Richard Montague.
1974.
Formal Philosophy: SelectedPapers of Richard Montague.
Yale University Press,New Haven, CT.Michael Moortgat.
1996.
Categorial type logics.
In Jo-han van Benthem and Alice ter Meulen, editors, Hand-book of Logic attd Language, pages 5-91.
ElsevierScience Publishers, Amsterdam.Christian Retor6.
1990.
A note on turbo cut elimination.Manuscript, September.Christian Retor6.
1993.
R~seaux et s~quents ordonn~s.Ph.D.
thesis, University of Paris VII.Dirk Roorda.
1991.
Resource Logics: Proof-theoreticalhtvestigations.
Ph.D. thesis, University of Amster-dam, September.77
