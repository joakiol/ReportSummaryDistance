ABSTRACTREL, Rapidly Extenslble Language System, permits a variety oflanguages to coexist within a single computer system.
Here the term"language" is understood to include a particular data base.
New lan-guages may be defined by constructing a new base language with itssyntax and semantics, by extending the terminology from a given baselevel in order to reflect specific concepts, or by associating a givenbase language with a certain data base.REL consists of an operating environment, a language processor,and the set of currently defined languages.
The structural propertiesof these languages which determine the characterization and organizationof the language processor are described.
In particular, representationand manipulation of syntax and semantics are discussed, the mechanismof language extension is outlined, and the concept of a generator isintroduced.I.
INTRODUCTIONLanguage plays a twofold role.
For an individual, or a group ofindividuals with some common interest, it establishes a framework withinwhich to express the structuration of their experience and conceptuali-zation of their environment.
In a social organization it provides theconventions through which these individuals or groups exchange and relatetheir views.
In this second role, language facilitates communicationbetween co--,unitles with divergent interests.
In its first role lan-guage supports the creative process within a given conununlty.
St becomeshighly idiosyncratic and dynamic in nature as the community, or individualdevelops distinctive and specific concepts~ and continuously reconcilesthem with further observations of its environment.In such a community, the computer functions as an external memorywhich allows efficient and rapid presentation end organization of itsstored information according to the various concepts developed.
Sincethese concepts are expressed in a highly specific language, one must beable to converse with the computer in that very language.
REL, a RapidlyExtenslble Language System~ is a conversational computer system designedfor these purposes \[1\].
REL provides a community with a base languagesuitable to its own interests.
As the co~nunity develops the conceptualstructure which deals most efficiently with its environment, it constructs/ !recurs ive ly  f rom the  base  leve l  a h ie rarchy  o f  new terms or  ad jus tsthem.
S ince  the  conceptua l  s t ruc ture  i s  determined  by observat ionso f  the  env i ronment  ( the  "data" ) ,  so i s  the  language.
Language anddata  thus  become c lose ly  in ter re la ted .
I f  chosen  appropr ia te ly ,  thebase  language w i l l  remain  invar lant  and a l l  conceptua l  changes  w i l lbe re f lec ted  in  i t s  ex tens ions .REL i s  des igned  to suppor t  a la rge  number o f  d iverse  groups .
Asa consequence ,  i t  must  be ab le  to  hand le  a la rge  var ie ty  o f  languages .E f f i c iency  cons iderat ions ,  as  we l l  as  the  necess i ty  fo r  easy  fo rmat ionand extens ion  o f  a par t i cu la r  language suggest  that  a s ing le  processorbe prov ided  wh ich  dea ls  w i th  a l l  the  implemented languages .
In  o rderto  determine  the  prec i se  nature  o f  the  language processor  we mustdeve lop  a s t ruc tura l  descr ip t ion  o f  language .
Th is  descr ip t ion ,  intu rn ,  w i l l  spe l l  out  the  deta i led  o rgan izat ion  o f  the  language pro -cessor .
I t  i s  these  quest ions  that  the  present  paper  w i l l  concernitself with.2.
LANGUAGES AND LANGUAGE PROCESSORWe sha l l  base  our  s t ruc tura l  descr ip t ion  of  a language on theformal ism presented  ear l ie r  by F. B. Thompson \ [2 ,3 \ ] .
I t  pos tu la tes  aone- to -one  correspondence between the syntact i c  and semant ic  aspects .A language re fers  to some domain of  d i scourse  cons is t ing  of  ob jec tsand relationships among them.
One can order the objects and relation-ships into a finite number of sets, or "semantic categories" accordingto their structural properties.
As a practical example, the orderingmay he with respect to representation within the computer memory.There exist certain "transformations" mapping categories to categories;these deal wlth the structural properties of the sets and apply toany of their elements.
On the syntactic level, the equivalent ofcategories and transformations are the syntactic classes ("partsof speech") and rewrite rules of the grammar.
A particular compositionof rules in the graummr (a parsing tree) corresponds to a particularcomposition of underlying transformations.
The meaning of a sentenceis the effect of a given sequence of transformations on the domain ofdiscourse.The language processor is designed to handle these "formal languages".Even though the majority of the languages in the system can be expectedto evolve from a relatively small set of base languages, the languageprocessor must provide for languages with diverse characteristics.
Ourdefinition of formal language spans a large variety of grmmnars, rangingf rom those  that  a re  easy  to  descr ibe  to  o thers  that  a re  d i f f i cu l t  tocharacter i ze  in  a conc ise  fash ion .
How much o f  th i s  spect rum shou ldbe covered  by the  language processor?
In  o ther  words ,  how complexshou ld  i t s  a rch i tec ture  be?
I f  we push  i t s  des ign  towards accommo-dat ing  the  ent i re  spect rum,  the  language processor  w i l l  be very  ine f f i -c ient  in  dea l ing  w i th  fo rmal ly  s imp le  languages  because  i t  wouldconstant ly  have to t reat  aspects  per t inent  to  on ly  a few complexlanguages .
I f  we were to  ta i lo r  the  processor  to  e f f i c ient  man ipu la t iono f  languages  o f  l i t t le  complex i ty  we would l im i t  the  express iveness  whichany language w i th in  the  sys tem cou ld  a t ta in .
We chose  a compromise - -a so lu t ion  in  which the  language processor  dea ls  w i th  those  s t ruc tura lp roper t ies  that  a re  common to the  major i ty  of  what  we cons ider  in -te res t ing  languages ,  and which  are  s imp le  to  fo rmal i ze  in  te rms  of  thedemands on computer  memory, and complex i ty  o f  p rograms.
The remaindero f  th i s  paper  spec i f ies  and d i scusses  these  proper t ies .
On the  o therhand ,  a l l  i n fo rmat ion  regard ing  the  present  s ta te  and h i s to ry  o f  thesentence  ana lys i s  i s  made ava i lab le  to  any language.
Languages  w i thspecific characteristics are thus  allowed to perform certain steps inthe analysis, and change the status of the analysis, on their own.The compos i te  o f  syntact i c  ru les  and under ly ing  t rans format ions  i sa " language s t ruc ture" .
Language i s  the  comblnat lon  o f  the  languages t ruc ture  and a par t i cu la r  data  base  w i th  ob jec ts  and re la t ionsh ips .The language processor  dea ls  w i th  a language 'on ly  in  te rms  o f  i t s  s t ruc tureand i s  ent i re ly  d ivorced  f rom the  data .
The language i t se l f t  th rough i t st rans format ions ,  i s  respons ib le  fo r  car ry ing  out  a l l  the  w~mlpu la t lonso f  i t s  data .3.
ANALYSIS OF A SENTENCEThe c lose  cor respondence  between the  syntact i c  and semant icaspects  o f  a language suggests  a syntax -d l rec ted  ana lys i s .
Thesyntact i c  ana lys i s  o f  a sentence  prov ides  c lues  as  to  the  semant ict rans format ions  to be app l led~ the i r  combinat ion  and sequence .
Thussentence  ana lys i s  p roceeds  in  two major  s tages ,  syntact i c  ana lys i sand semant ic  in terpreta t ion .The syntact i c  ana lys i s  i t se l f  cons i s ts  o f  th ree  phases  per fo rmedin  success ion :  (1) pars ing ,  (2) feature  tes ts ,  and (3) syntax  comple-t ion .
The f i r s t  examines  the  phrase  marker  accumulated  so fa r  ino rder  to  determine  whether  a new ru le  o f  grammar can be app l ied  tosome por t ion  o f  i t .
The second phase  i s  suggested  by the  fac t  thatr i ch  languages  may inc lude  a la rge  number o f  s t ruc tura l  ca tegor iesand,  consequent ly ,  a h igh  number o f  grammar ru les .
I t  i s  o f ten  poss ib leto  es tab l i sh  categor ies  whose s t ruc tura l  p roper t ies  d i f fe r  on ly  inminor  respects ,  and to group them in to  more comprehens ive  sets .
Forexample ,  cons ider  the  s ingu lar  and p lu ra l  forms o f  a noun.
Par ts  o fspeech w i l l  denote  such  sets  o f  ca tegor ies ,  e .g .
"noun" ;  a par t  o fspeech  may then  be qua l i f i ed  by " features"  (N. Chomsky \ [4\])  accord ingto  the  spec i f i c  character i s t i cs ,  e .g .
s ingu la r  or  p lu ra l .
Fur thermore ,e lements  in  a g iven  category  must  o f ten  by subcategor i z led  in  te rms  o fthe i r  ana ly t i ca l  character i s t i cs .
Take as an example the  precedence  ru lesgovern ing  the sequence of  a r i thmet ica l  operat ions  on numbers.
Featurescan serve  th i s  purpose  as well.As a consequence,  a ru le  of  g rammr i s  expressed  in  terms ofpar ts  of  speech ,  and may be ass igned subru les  operat ing  on features .This  o f fe rs  two d is t inc t  advantages .
F i r s t ,  the number of  ru les ,  andwi th  i t  the amount of  search ing  necessary ,  i s  reduced cons iderab ly .Second, many ru les  need not  d i s t ingu ish  among a l l  the categor ies  in  aset  so that  the to ta l  number of  grammar u les  and subru les  i s  less  thanthe number of  ru les  had no features  been employed.
In  many pract i ca lcases, subrules assume an extremely simple form.
If a feature can beexpressed as a binary choice, then for all features being mutuallyindependent the subrule may be formulated as "the grammar rule appliesif, for each of its parts of speech, all features in a given llst holdand all in a second llst do not hold."
In other words, the subrule maybe expressed in form of two bit maps per part of speech, one identifyingthe features which must hold, the other specifying those which must nothold; features not referred to in either map are ignored.I f  the subru le  assumes a more compl icated form, the language pro -v ides  an exp l i c i t  program, the "syntax  complet ion"  rout ine ,  to accompl ishthe ana lys i s  necessary .
Such a program may a lso  be needed to per formaspects  of  the syntact i c  ana lys i s  not  covered by the language processor .Indeed,  each ru le  has i t s  syntax  complet ion par t  to determine the syntact i cpor t ion  of  the resu l t ,  poss ib ly  on the bas is  o f  i t s  a rguments .A node in the phrase marker denotes either a "phrase" or a funetlonsymbol.
A phrase consists of syntactic information (part of speech andfeatures), and a semantic interpretatlonwhich for the time being weassume to describe a particular element in the category denoted by thesyntax.
In a string matched by a rule of grmmmar, the phrases constitutethe arguments of the corresponding rule while function symbols only servethe purpose of identifying the rule.
For example, in the stringN + N (N - part of speech "number") the N constitute the arguments ofthe rule N---->N + N I, and "+" is a function symbol.
Thus syntax comple-tlon and semantic transformation are functions mapping categories to acategory, and individual objects to an obJect~ respectively.
The syntaxcompletion furnishes the syntactic portion of the resulting phrase~ thetransformation determines its interpretation.In many languages, the rules will be context-free, that is, ofthe form a---~bl...b n. For more interesting languages, we may expectthe granmmr to include general rewrite rules of the form al...am---~ bl...b n.Since the combination of syntax completion and semantic transformationgives rise only to a single phrase, the language must provide anThis notation is referred to as "generative".
In the remainder ofthis paper the terms "left-hand side" and "right-hand side" refer tothis form./Indlvldual pair for each a i.Sentence analysls consists of repeated applications of the foursteps:recognlt lon of a rule (parsing), feature subrule, syntax comple-tion, and semantic transformation.
Since the language processor acceptsgeneral rewrite rule grammars, the primary objective in parsing is to avoidany redundant analyses, that is, repetitions of portions of the analysis.This is achieved by means of a very elegant algorithm due to Martin Kayand adapted to our purposes.
Basically, parsing is slngle pass, right-to-left 2, bottom-to-top; all analyses of a sentence allowed by the grammarare produced.The details of the algorlthm cannot be discussed here.
Let usbriefly indicate that it achieves its objectives by means of dummynodes; the connections between these nodes carry the phrases orfunction symbols.
This is shown in figure i.
The analysis at anystage is described in terms of a directed graph.
The parser exploresall possible paths through the graph from a given node to its rightbefore advancing to the next node to the left.
The result of a ruleis inserted as a new connection, or, in case of a general rewrite rule,as a sequence of nodes and connections.
If several phrase markersdevelop they cannot be distinguished and are only recoEnlzed by thefact that more than one successful analysis is observed.
Likewise,I2 The parser organization is symmetric and could easily be changedto left-to-rlght direction.10pars lngs  that  did not  cont r ibute  to  the f ina l  ana lyses  appear  in  thegraph in  the same way as those that  did cont r ibute .So far we implied that syntax and semantics for a given rule areperformed simultaneously; syntactic and semantic analysis proceed "inparallel".
A rule may not only fall to apply on syntactic grounds but onsemantic grounds as well.
Its arguments may not map into any object; thepath matched by the rule is meaningless.
As a consequence~ by simultaneously ,considering the semantic aspects the size of the parsing graph may hekept considerably below what it would otherwise he, with concomitantreduction in parsing time.
On the other hand, spurious parsings may notbe recognized i~mediately but only after they participated in the analysisto considerable extent.
The corresponding transformations may often becomplex end tlme-consumlng, especially when manipulating large-slzedata bases.
Many of these parsings are finally excluded on syntacticgrounds.
Unnecessary execution of such transformations can be avoidedby postponing the semantic analysis until the syntactic analysis hasbeen completed; in this case syntactic and semantic analyses are per-formed "serially".
The decision as to which alternative is the appropriateone under given circumstances is made by the language itself; itnotifies the language processor of its choice?A statement entered into the system must be converted into a formsuitable for analysis.
In turn, the result of the analysis must beI Ire turned  to  the  user  in  in te l l ig lb le  form.
Nost languages w i l l  w ish tot reat  some aspects  of  input  and output  in  a spec i f i c  way.
For example,p re -ed?t lng  of  the s ta tement ,  o r  subst i tu t ion  of  lex lca l  i tems may bedes i red  pr io r  to ana lys i s .
On output ,  the language may examine thepars ing  graph fo r  success fu l  ana lyses ,  t reat  s t ruc tura l  ambigu i t iesappropr ia te ly ,  or  in i t ia te  the execut ion  of  postponed semant ics .
As aconsequence,  input  and output  rout ines  are  par t  o f  a language,  as idefrom some bas ic  serv ices  prov ided by the system.F ig .
2 summarizes the bas ic  o rgan izat ion  of the language processoras d i scussed  in  th i s  sect ion .124.
COMPILATION AND LANGUAGE EXTENSIONWhen postponing the semantic analysis, the language processormust "compile" information during the syntactic analysis which enables itto perform the appropriate semantic transformations in the correct sequence,Since the syntactic analysis reflects the individual transformatlonsD andthe sequence in which they are to be combined, the compiled informationcontains a list of transformations in precisely the order in which theircorresponding rules applied.
Transformations require arguments, hencethe compiled information must also contain a llst of those.A list of transformations associated wlth a phrase marker repre-sents that portion of it whose semantic analysis must still be performed.In the example figure 3, this portion is marked by broken lines.
Nowconsider the phrase marker in terms of the semantic analysis alone.By removing all broken lines and the nodes they connect to, one obtainsthe present status of the semantic analysis.
The remainder of the analysismust, clearly, be performed on all those symbols which do not have anancestor in the tree, excluding, of course, function symbols since theydo not participate as arguments.
Because transformations expect theirargtunents in left-to-rlght order, the phrases are listed in that veryorder.
Figure 4a shows the compiled information for the given example.13After a step in the semantic analysis has been carried out, thecompiled information must  reflect the new status of the analysis.
Thusin figure 4b transformation T/ has been executed, "adding" node~ tothe phrase marker.
Correspondingly, T/ has been removed from thelufo~tlo,  n i le phrases ~3 and ~ have been substituted by phrase ~Figures 4c,d illustrate this process through the subsequent two steps.The semantic analysis is completed when no transformation is left; thellst of arguments has been reduced to a single element, the result.The arguments of a particular transformation are identified by theirtotal number, and their position in the list of arguments.
Thesespecifications remain unchanged during successive steps because ofthe strict rlght-to-left order of the analysis.I f  no spur ious  pars iugs  were ever  found dur ing syntact i c  ana lys i s ,and the poss ib i l i ty  of s t ruc tura l  ambigui ty  could be exc luded,  thelanguage processor  would have to ma inta in  only a s ing le  compiled in fo r -mat ion and update i t  for  each ru le  which did not  fa i l  on syntact i c  grounds.Since usua l ly  that  i s  not the case ,  each phrase in  the pars ing  graphcar r ies ,  in  p lace  of  i t s  in te rpreta t ion ,  the compiled in fo rmat ion  re f lec t -ing the ana lys i s  which gave r i se  to i t  and which, i f  executed,  de l iveredthe ac tua l  in te rpreta t ion  of the phrase .
Whenever a ru le  app l ies ,  theresu l t ing  phrase rece ives  a new compiled in fo rmat ion  der ived from thatof each of i t s  arguments ,  and the character i s t i cs  of  the present  ru le .14Our discussion so far did not distinguish between gr--,--r rulesconstituting the base level of the language and those which are itsextensions.
The base level, being the invariant portion of the language,cannot be changed in the conversational mode.
Its syntax completions andtransformations are computer programs which determine the structural cate-gories as well as the "primitive" operations on them.
Extensions arerecursively constructed from the base level in conversational mode.There are  two extreme pos i t ions  fo r  hand l ing  extens ions ,  (1)s t r ing  man ipu la t ion ,  or  (2) compi la t ion  in to  some bas ic  notat ion ,  fo rexample the base leve l  of the language.
In  the f i r s t  case ,  a def ineds t r ing  of  symbols i s  always rep laced  by the s t r ing  o f  symbols whichconst i tu tes  i t s  de f in i t ion .
Redef in i t ion  of  a term e f fec t ive ly  propa-gates  to redef ine  a l l  terms d i rec t ly  or  ind i rec t ly  der ived  from i t .However~ i f  the h ie rarchy  of  compounded extens ions  i s  deep there  i sexcess ive  expans ion  of the or ig ina l  s t r ing  w i th  concomitant  cos t  inpars ing  t ime.
I fp  on the o ther  hand,  the extens ion  i s  compiled downto  the base  leve l  a redef in i t ion  cannot propagate .
We have chosen acompromise pos i t ion  that  incorporates  most of  the advantages  of  both :syntact i c  ana lys i s  i s  car r ied  out  whi le  the semant ics  are  postponed.Hence the  semant ic  aspects  of  a new term are  determined by the t rans -fo rmat ions  of  the terms which are  d i rec t ly  re fer red  to in  i t s  de f in i -t ion ,  be they base leve l  or  extens ion  terms.
At the  same t ime,  th i scompromise pos i t ion  i s  ident ica l  to the compi la t ion  scheme in t roducedabove, permi t t ing  use of  th i s  scheme for  language extens ion  as we l l .the15The language processor  shou ld  t reat  base  leve l  and extens ion  ru lesa11ke.
Indeed ,  one can ident i fy  the  syntax  complet ion  rout ine  andsemant ic  t rans format ion  fo r  an extens ion  ru le .
Both a re  obta ined  byana lyz lng  the  de f in ing  express ion .
For example ,  in  the  extens ionf (x ,y )  : x * x + 4 /ythe  syntax  fo r  the  le f t -hand  s ide  o f  the  new ru le  i s  g iven  by the  syntaxo f  the  phrase  dominat ing  the  express ion  "x * x + 4 /y" ;  syntax  complet ions imp ly  reproduces  th i s  por t ion .
The new t rans format ion  co inc ides  w i ththe  compi led  in fo rmat ion  fo r  the  express ion .In general, an extension rule will again be a function on somearguments with given structural properties.
In the example above, thet rans foz~mt ion  fo r  f (x ,y )  operates  on any pa i r  of  ob jec ts  from thecategor ies  descr ibed  by  x and y .
Hence x and y a re  ent i re ly  syntact i cin  nature ;  they  represent  spec i f i c  s t ruc tura l  ca tegor ies  but  have noin terpreta t ion .
They are  the  " f ree  var iab les"  in  the  de f in i t ion .Var iab les  serve  two purposes  in  an extens ion .
( i )  They determine  the  r ight -hand  s ide  of  the  new ru le .
The cate -gor ies  they  represent  a re  descr ibed  by par t  o f  speech  andfeatures .
The par t  o f  speech  determines  the  sequence  o fsymbols  in  the  ru le ;  fo r  example ,  i f  x and y a re  numberivar iab les ,  the  ru le  reads  f (N ,N) .
The features  spec i fy  thesubru les .16(2) In the compiled in fo rmat ion ,  argument l i s t  e lements  whichcorrespond to var iab les  have no in terpreta t ion .
They rece ivethe in terpreta t ion  on "de f in i t ion  expans ion" ,  that  i s ,  beforethe semant ics  are performed on the given arguments.
There fore ,they must conta in  some key which re la tes  them to the cor res -ponding argument.
This key i s  provided by the var iab les  whichmay thus  be cons idered as "p lace  markers" .
Suppose the pos i t ionof the argument in the rule serves as key.
Then ~i' ~2' andin figure 4a have no interpretation and are labeled by i, i, and2, respectively.Certain decisions with regard to language extension, such aswhether to reject certain definitions on the basis of their analysis,or how to deal with structural or other ambiguities, must be left to alanguage itself.
Consequently, each language includes a base levelrule which determines the result of an extension.
The language pro-cessor merely performs the compilation, ensures that the new rule isstored in standard form, and controls subsequent definition expansion.A language may also employ the extension mechanism if it wishes to avoidthe use of a lexicon, and instead enter the referent words identifyingobjects in its universe of discourse in the form of a grammar rule.
Inthis case each character must be considered a function symbol.175.
GENERATORSWe not ice  that  genera l  rewr i te  ru les  and def in i t ion  expans ion  havea proper ty  in  common.
In  each case a l l s t  o f  funct ions  i s  g iven.
Eachfunct ion  i s  exerc i sed  in  tu rn ,  and the resu l t  of  each s tep  i s  u t i l i zedin  a manner which depends on ly  on the c r i te r ion  govern ing the  l i s t .
In" the  case  of  a genera l  rewr i te  ru le  the resu l t s  enter  the phrase  markeras a sequence of  phrases ,  wh i le  fo r  de f in i t ion  expans ion  they par t i c ipatein  subsequent  s teps .Th is  i s  an ins tance  of  a phenomenon known in  l i s t -p rocess ing  as"generat ion"  \ [5 \ ] .
The genera l  scheme of  generat ion  i s  shown in  f ig .
5.A generator  can be cons idered  a re la t ion  between two sets ,  an orderedset  ~of  a rguments ,  and a set  ~of  resu l t s .
In  the course  of const ruct ingthe set  ~,  the generator  repeated ly  se lec ts ,  accord ing  to  some in terna lc r i te r ia ,  an e lement from a set  of  p rocesses  E, supp l ies  i t  w i th  anordered  set  ~of  input  a rguments ,  and rece ives  an output  se t ,wh ich  i tmay s imply  co l lec t ,  or  u t i l i ze  in  fu r ther  ac t ions .
Two cases  are  ofspecial interest:(z) For each selection J, ~j ?
~; each process operates on the sameset of elements, namely the set of arguments for the generator.Further, each successive selection of a process is independent oflprevious ones; there is a llst of processes which are applied inturn until the llst is exhausted.
Generators of this kind willbe termed "operator generators".L18(2) There i s  only a s ing le  process ,  that  i s ,  ~= {p}.
For eachse lec t ion  ( "pu ls ing" ) ,  i t  i s  supp l ied  w i th  a set~ which i s  iden-t i ca l  to~,  except  that  one and the same element In~ i s  subst i tu tedon each pu ls ing .
Again, each success ive  se lec t ion  i s  independentof p rev ious  ones.
Generators  of  th i s  type w i l l  be denoted as"operand " generators  .Under th i s  scheme, genera l  rewr i te  ru les  become an operator  gene-ra tor ;  each "elementary" syntax completion/transformatlon pair utilizesthe arguments of the rule.
Definition expansion exhibits some aspectsof an operator generator, but the first condition (_ij = a) does not hold.However, it is the only generator of interest which does not fall intoone of the two specified classes.There is a variety of other phenomena in languages that may con-veniently and efficiently be represented by generators:Ambiguity.
- -  More complex languages ,  and cer ta in ly  natura llanguages ,  permit  loca l  ambigu i t ies  w i th in  a sentence ;  usua l lythese  are  reso lved  by cons ider ing  a wider  context  w i th in  the sentence .I t  i s  those  ambigu i t ies  that  we wish to deal  w i th ;  of  course ,  th i sinc ludes  the case of  an ambiguous entence .
Ambigu i t ies  a r i se  when agrammr inc ludes  severa l  ru les  w i th  ident ica l  r ight -hand s ides  whichd i f fe r  in  the i r  feature  subru les ,  syntax  complet ions ,  or  semant ic  t rans -fo rmat ions .
The f i r s t  two cases  of  ambigui ty  are  syntact i c  in  nature ,  theth i rd  one semant ic .
A l l  th ree  are descr ibed  by operator  generators19since the same set of arguments is processed by a sequence of subrules,syntax completions, and/or transformations.
Syntactic operator ambiguitiescan usually be resolved within limited contexts and on syntactic grounds.On the other hand, semantic operator ambiguity may render the meaning ofthe entire sentence ambiguous, and may be introduced deliberately in orderto compare different concepts in a variety of situations.
Ambiguity alsoarises when a transformation maps its arguments into more than one obJect~thus associating various meanings with a given string.
In the subsequentanalysis, such ambiguous interpretations of phrases will act as an operandgenerator.
On each pulsing, the transformation of an applying rule willbe provided with a new interpretation.Numerical quantification.
-- Central to many programming languagesis the notion of a loop, often taking the form of a "do" or "for" state-ment.
A given sequence of expressions is repeatedly executed, each timefor a new value of one of its variables.
Cumulative sum (~) and product(~) are other examples of operand generators in arithmetic languages.Linguistic quantification.
-- In ordinary language we have suchexpressions as "all" or "some".
In examining the sentence "Does someboy live in Boston?
"~ one must consider each boy in turn until one isfound which satisfies the condition, or all are checked negatively.Similarly, "what", "how many", "at least 3", e~c.
are handled byoperand generators.20An operand generator  thus  re fers  to aggregates  of  ob jec ts .
Theind iv idua l  ob jec ts  are  eva luated  in  the la rger  context  o f  a l l  or  par t  ofthe sentence ,  and the resu l t s  summarized in  accordance w i th  the par t i c t t la rp r inc ip le  character i zed  by the generator .
Except in  the case of  ambigu i ty ,such a pr inc ip le  must be exp l i c i t l y  expressed  in  the language.
Conse-quent ly ,  operand generators  enter  the ana lys i s  through a ru le  of  grammar.The cor respond ing  semant ic  t rans format ions  d i f fe r  from the ones d i scussedso fa r  in  that  they resu l t  in aggregates  ra ther  than s ing le  e lementsw i th in  a semant ic  category .
However, the prev ious  cons iderat ions  s t i l lhold i f  we requ i re  a t rans format ion  to produce a s ing le  in terpretat ionfo r  the resu l t ing  phrase .
This in terpretat ion  may now be of a rb i t ra rycomplex i ty ;  in  the case of  a generator ,  i t  may l i s t  a l l  a l te rnat ives ,  ora method to const ruct  them, and ident i fy  the par t i cu la r  generator .As a consequence,  the in terpretat ion  of  a phrase  a l so  conveyss t ruc tura l  p roper t ies  of  a language to the language processor .
I tmay ident i fy  a s ing le  element ( "data" ) ,  a generator ,  o r  compiledin fo rmat ion ,  and s imi la r ly  may d i f fe rent ia te  between the base leve land extens ions .At the t ime generators  are  encountered in  an ana lys i s  there  i so f ten  insu f f i c ient  context  to sum up a l te rnat ives .
Hence the resu l tof generators  may aga in  be a generator  phrase .
A par t i cu la r  generatorthus  propagates  through the ana lys i s  unt i l  i t  i s  in  a pos i t ion  tosummarize the e f fec t  of  the a l te rnat ives  i t  in t roduced.
As an except ion ,21ambiguity does not summarize but excludes individual altern~tlves as theybecome meaningless in a given context.
Among the operator generators,general rewrite rules add sequences of phrases to the phrase marker whilesyntactic ambiguity may introduce structural ambiguity.
Semantic operatorambiguity, if not resolved, propagates through the subsequent analysisin form of an operand generator.Detection of a generator indicates to the language processor thatthe present stage of the analysis is to apply separately to each of itsalternatives.
On pulsing, the generator produces a new structuraldes~rlptlon of the environment to which the analysis is reapplled.Pulsing will therefore cause the language processor to recurse at itspresent stage.
A separate portion of the language processor directspulsing, establishes the new environment, and controls recursion.Figure 6 shows the updated language processor organization.A selected alternative may itself represent a generator; forexample, on definition expansion or operator ambiguity a transformationmay again consist of compiled information.
Hence recursion may continuefor several levels.
Moreover, several generators may occur on a givenlevel, for example, when several arguments of a rule are generatorphrases.
By accepting one generator at a time such cases are resolvedinto a sequence of recurslons.
Generators thus cause the languageprocessor to recurse to arbitrary depth.22The use  of  generators  ra i ses  a number of  in t r i ca te  i ssues  whichwe cannot  fu r ther  pursue  here .
The i r  t reatment  and i11ust ra t lon  byexamples  must be reserved  fo r  fu ture  pub l l ca t lon .6.
LANGUAGE STRUCTURES23In order to be able to analyze a sentence in a given language, thelanguage processor must have access to a standardized description ofthe language.
This description consists of two major components.1.
Grammar tab le .
- -  Th is  conta ins  the r lght -hand s ides  of  a l lru les  of  grammar.
The ru les  are  organ ized  in  the form of  a "symbolt ree"  in  which a symbol i s  e i ther  a par t  of  speech or  a funct ion  symbol,a node car ry ing  a s ing le  symbol.
A ru le  cor responds  to a path  s tar t ingfrom the top;  the b i t  maps ident i fy ing  i t s  feature  subru les  area t tached to  the las t  node in  the path .
The t ree  arrangement  matches thepars ing  s t ra tegy ;  as the parser  advances or  backt racks  in  the pars inggraph i t  per fo rms ident ica l  ac t ions  in  the symbol t ree .S ince pars ing  and feature  tes t ing  const i tu te  major funct ions  oflanguage processor ,  i t  i s  advantageous to re ta in  the grammar tab le  inh igh-speed memory dur ing  the ent i re  ana lys i s  of  a sentence .
Even i fthe  gram~aar tab le  i s  o r  becomes too extens ive ,  base leve l  ru lesshou ld  cont inue  to  res ide  in  h igh-speed memory wh i le  extens ion  ru les  maybe re legated  to per iphera l  s to rage  s ince  they rare ly  par t i c ipate  in  theana lys i s  beyond the leve l  of the input  s t r ing .
In  such a case ,  however,s to rage  organ izat ion  must be such as to minimize the number of  re ferencesIto per iphera l  s to rage .242.
Definitions.
-- The remainder of a rule, syntax completionand semantic transformation, is generally too voluminous to be part ofthe grammar table.
Therefore, it is maintained separately on peripheralstorage, linked to the corresponding node in the grammar table.
Defi-nltlons are of two kinds:(a) Base level rule.
The definition, in principle, consists of theprograms for syntax completion and transformation.
For rulesintroducing generators into the analysis, it also includes thepulser.
Since operator generators cannot be introduced by a ruleof grammar, they are part of the language processor.
(b) Extension rule.
The analysis of the defining expression determinesfor the rule both the syntax of its result and its transformation.Entering a definition for an extension rule is not always trivial.Since we tolerate ambiguity, accept general rewrite rules, andpermit deletion or replacement of deflnltlons~ considerablebookkeeping may be necessary to ensure that any new meaning pro-pagates to terms based on the rule in question.
Because defini-tions must be in standard format, the bookkeeping is a functionof the language processor.I t  fo l lows that  the language processor ,  dur ing sentence  ana lys i s ,requests  cons iderab le  in fo rmat ion  from per iphera l  s to rage ,  some of i tperhaps repeated ly .
This  suggests  page organ izat ion  of memory.
How-ever ,  i t  i s  important  that  the language processor  be able to dea l  w l th/725pages explicitly in order to arrange the various components of a lan-guage in an optimal fashion with regard to page transfers.Among the temporary configurations guiding the language processorare the parsing graph, and the syntax and interpretations of its phrases.Since theconfiguratlons are described by lists~ the language processordemands a llst-formatted work area in core memory.
This area is alsoused to describe the environment of generators, or control the recurslon.Manipulation of data is a concern of the language of which theyare part.
Data structures may cover a wide range, from simple fo rmatssuch as single numbers to complex ones such as hierarchical file organiza-tions or interconnected rings.
If the data are transient in nature andlimited in size, they may be embedded in the list work area.
In mostcases, however, they must be retained on peripheral storage.
Again,by Controlling their arrangement on memory pages a language may beable to minimize the number of page transfers.7.
CONCLUSIONS26Some o f  the  not ions  under ly ing  the  REL language processor  weref i r s t  in t roduced  in  connect ion  w i th  the  DEACON pro jec t  \ [2 \ ] .
However,th i s  language processor  exh ib i t s  vas t ly  inc reased  capab i l i t i es ,  espe-c la l l y  the  fac i l l ty  of  accommodat ing a wide var ie ty  o f  languages ,  theinc lus ion  o f ,  and emphas is  on ,  language extens ion ,  and the  t reatmento f  generators .
A f i r s t  vers ion  conta in ing  most  o f  the  descr ibed  pro -per t ies  has  been in  use  under  the  Ca l tech  t ime-shar ing  sys tem s incespr ing  of  1968.
S ince  then ,  i t  has  served  as the  bas i s  fo r  thedeve lopment  o f  a nember of  languages ,  and prov ided  us  w i th  more ins ightin to  the i r  s t ruc tura l  descr ip t ions .
Th is  exper ience  led  to  the  rev isedvers ion  of  the  language processor  which const i tu tes  the  sub jec t  ofth i s  paper .
The processor  i s  suppor ted  by a mul t ip rogramming  operat ingsys tem geared  to the  needs  o f  REL \ [ I \ ] .Of necess i ty ,  th i s  a r t i c le  represents  a ra ther  b r ie f  sur~ary .
Inthe  accompanying paper  on REL Eng l i sh ,  some of  the  top ics  d i scussed  w i l lbe i l l us t ra ted  by one o f  the  more prom4nent  app l i ca t ions  of  REL.REFERENCES27\[1\] Thompson, F. B., Lockemann, P. C., Dostert, B. H. and Deverill,R.
S., REL: A Rapidly Extenslble Language System, to appearin Proc.
24th Natl.
ACM.
Conf.
(1969)\[2\] Thompson, F. B., English for the computer, Proc.
AFIPSFall Joint Comp.
Conf.
29 (1966), 349-356\[3\] Thompson, F. B. ,  Man-machlne communication, in :  Seminar onComputational Linguistics, Public Health Service Publ.No.
1716, 57-68\[4\] Chomsky, N., Aspects of the theory of syntax, The MITPress, 1965, 75ff.\[5\] Newell, A., et al, Information Processing Language - VManual, The RAND Corp., Prentlce-Hall Inc., 19643 * 4 + 6 / 3(a)28X3~_*  + /(b)Fig.
1.
Phrase marker  for the statement "3*4 + 6/3".
(a) Standard representat ion,(b) representat ion as connected graph with nodes.J~= part  of speech for "number" .29input parserf 1I syntaxcompletion J~ yeSAcon ~ile\]~ noI semantic soutputFig.
2.
Basic organization f language processori$ I  '~ ~.. 'T.. .
-T - .30Fig.
3.
Phrase marker  of a simple ar i thmet ic  statement.Broken l ines indicate reductions whose semanticswere postponed.
Subscripts are used to identifyindividual phrases.ar~ trans arg trans arg~r  I T/  S, Z J~l T ,  I, Z -/~5J~Z T,  I, 2 J~'-2 T+ I, Z jV" 6.lC 3 T+ 1, 2 J~6X 4trans ar~T+ I, 2 Y~7 ---(a) (b) (c) (d)transFig.
4.
Compiled information for fig.
3.
Values supplied witha t ransformat ion identify posit ion and number ofcorresponding arguments.
(a) Information pr ior  to semantic analys is ,(b-d) during success ive steps of the seroantic analysis.argumentsinputgeneratori \] output 0-processes~o IFig.
5.
Generator schemeresultb31inputgenerator controlparserIT~ feature Isubrulesyntaxcompletion II" ~ s emantic soutput IFig.
6.
Organization of language processor
