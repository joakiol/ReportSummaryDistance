The translation of constitutent structureinto connectionist networksHelmut SCHNELLE and Roll  WILKENSSprachwissenschaftliches InstitutRuhr UniversitatD-4630 Bochum 1GermanygrammarsAbstract: Description of a connectionist mplementation of anEarley parser.1.
IntroductionWe are going to describe a connectivity structure which is aquasi neuronal representation of the computational knowledgeusually presented in terms of rules and algorithms.
Our systemprovide.,; the proof that connectionist networks can representcognitive knowledge of high complexity a fact that hasrecently been questioned by critics of connectionism (cp.FODOR and PYLYSHYN 1988).
However, our system is ofthe variety of an implementational connectionism i ple-menting systems, whose computational knowledge is alreadydefined by rules - it is not a system which generates newknowledge structures through learning.More specifically, our system implements parsers forconstituent s ructure grammars according to Earley's rules interms of networks of Boolean operators.
The implementationis automatic, i.e.
executed by a compi-ler which automaticallytranslates a grammar into a set of Boolean equations.
Ourconnectionist net is thus like a special purpose parser networkdefined by the Boolean equations in the same way as anycostums pecific circuit definition.
We shall now explain theessential ideas which characterize the parallel (connectionist)networks compiled from constituent s ructure rule systemsthrough parallelizing Earley's algorithm.
The formaldef'mifions of the compilation algorittun and of the definitionof the resulting connectionist network can be found inSCHNELLE and DOUST (1989).In the following paragraphs our essential ideas will bepresented by means of a simple example, the system ofconstituent s ructure rules S ?-> aA, S --> Ab, A --> aa, A --> a to be applied in a parsing process on the string aab.2.
Earley's RepresentationLet us first summarize the essentials ofEarley's algo-rithm.It operates in two stages: In the first stage, a parse list iscomputed and in the second stage the correct parse is filteredout from the parse list.
For the string aab the informationcontained in the parse list can be represented asin figure 1 by asuperposition f possible sub-trees found applicable in goingthrough the string from left to fight.
The correct parse "filteredout" is represented in figure 2.Earley uses another way of representing parse lists andcorrect parses.
He represents hem by means of dotted rulesymbols and dominance scope numbers entered in ists, one foreach input interval.
The parse list containing the sameinformation given in the superposifion of the trees is as infigure 3.
The meaning of such a list should be clear: TheSSa a bSAa a bFigure 1: Figure 2:Parse list tree Correct parse treesymbols of the input string represented at the bottom exist inthe intervals <0,1>, <1,2>,<2,3>.
At each completed inter-val, the rules which have found application so far are entered inthe corresponding list.s, together with a number indicating thenumber of intervals dominated by the head symbol of the rule.List 0 List 1 List 2 List 3<S->aA., 2><A->aa.
, 2><A->a., 1> <A->a.
,1> <S->Ab., 3>a a bFigure 3.
Parse list information with completed otted rulesymbols according to EarleyLet us indicate a feature which is essential in view of ourconnectionist implementation: Each piece of information iEarley's ystem is in fact a triple< list number, dotted symbol, length of dominance >.The representation in figure 3 is, however, not yet complete asa representation of the parse list.
In fact, the parsing process asdef'med by Earley makes use of further dotted symbols derivedfrom the rules of the underlying constituent s ruture, namelyall dotted rule symbols which can be obtained by placingexactly one dot between symbols to the right of the arrow.
Thesystem of dotted rule symbols for our grammar ispresented infigure 4.
All dotted rule symbols are needed for controlling theparse process.S ->aA.
,  S ->a.A ,  S ->.aA ,S->Ab.,  S ->A.b ,  S ->.AbA->aa.
,  A ->a.a ,  A ->.aa ,A ->.a ,  A ->.a.a.
, .b.
, .S .Figure 4 The set of dotted rule symbols derived from theexample grammar1 53The cornplete parse is computed list by list from left to rightas the input string is read in.
In principle many dotted rulesymbols in the hst could be placed simulta-nously but only ina parallel system like the one we shall present, not in Earley'scompletely sequential implementation  a yon Neumannmachine.3.Our representationHow are we going to implement Earley's algorithm in acormectionist net?
We follow the localist principle ofconnectionist implementation: One concept - one unit, but weapply it to the triples in Earley's represen-tation: One triple -one unit.
This principle applied to our example of threeintervals and, correspondingly, to 3 as the longest possibledominance and to 14 dotted rules (as eninnerated in figure 4)yields 3"14"3 = 126 units.
In general, a system with n dottedrules and length of input string 1 would have n*l 2 units.
Theconnectivities between the units must be defined in such a waythat they generate activity patterns over the three-dimensionalsystem of units (each member of a triple indi- eating adimension), such that a unit becomes active (1) exactly whenthe corresponding triple is specified in the Earley algorithm.All other units not specified in the algorithm must remaininactive (0).
The parse list given in figure 3 would berepresented by the activity pattern over the units in a threedimensional space indicated in figure 5./ '~  -?
Ab..i-~ aa.3 2// !S  * Ab.1.//)S -~ Ab./ b.Figure 5.
Terminal stage of parse list generation (forterminal dotted rules only).
The arrows show how a pattern ofactivity in this system can be used to represent the correctparse tree given in figure 2.The repr(mentation outlined so far seems to have an essentialdisadvantage: The space built by the units which represent theparse hst structures seems to be unlimited, since it depends onthe length of the input string.
This is indeed the case.However, the structurally essential feature is not the space usedfor representing the complete parse list structure but only thespace in wlfich the process of generating the parse list structureis executed.
Our system can indeed be subdivided archi-tectonically into the representation spaces - one for the parselist, one for the correct parse, and a limited space containingthe units which generate the representations.
It is only thislatter space - comprising rammar units (0,Y,0),(-1,Y,0) andcontrol units (0,Y,-1).
(-I,Y,-1) for all dotted rules Y - whichhas an inhomogenous connectivity structure whose specificityis determined by the constituent structure rule system fromwhich it is compiled.
Obvviously, this space of inhomogenousconnectivity is limited in our implementation a d is 2"2"n(where n is the number of dotted rules).In this space 2*n units are control bit units whereas 2*nunits correspond directly to dotted rule symbols of the originalgrammar such that their connectivities represent the logical andprocedural interdependencies b tween these symbols in Earley'salgorithm.
The extension of this space is thus independent ofthe length of the input string to be parsed.-Qr ",' / oi ,*~?~:" ..'.L-/?'
<" :,:i~' ~'\] :'.
"::'~Z '~" ~ii": ."
.."5 ."
:- ".
'.i~ )..::.
:':':' 2, ~ :: :: .
: .
: :.
::::::::::::::::::::: 4, ~ :  :::: :.
:~)~:.:.:.:.:.
:., )): :.
:: ::: :: :: :::::::::::::::::::: 5m ', ' : :  ::':'::'iI / i : :  : :::: : :Ii!!!i:i:!:i:!:!.
/ 7,, ::iili :: :: ::: :: :: ===================== 8I , i:: ::i !
iii!
:: :.
: : : .
:  ::::::::::::::::::::: ,o:,-,iiii  i i::ii  iiiii:i:i i  -1 wH' ii::i:: i ,3" -P  1Figure 6.
The architecture of the connectionist parsersystem.
(Parse list representation corresponding to figures 1 inspace HI and correct parse representation corresponding tofigure 2 in space 4.
Input representations i  paces I arid II)In contrast to this, the units in the representation space havea homogenous connectivity among them, which is completelyindependent of the gramrnar implemented.
Instead, thisconnectivity corresponds to the circuit connectivity of a shiftregister implemented asan integrated circuit.The overall architecture which derives from our automaticcompilation process applied to a given constituent s ructure isnow given as in figure 6.
Space I and H contain therepresentations of the input string, the units in space HIrepresent the parse list under construction and after completion,I\[1b-.A A.i',-~I 2J iJ- -  12 a-~-- 13 b.5.$ ->nA.5 -~a.AS ->.=AS ->Ab:S -> A .bS ->.Ab7 A ->o o.8 A->o.a9 A ->.oaI 0  A -> a.11 A ->.aFigure 7 The internal connectivity of the units in theprocessing space derived from our simple grammar54 2space IV represents he same for the correct parse.
Space IX(resp.
X) is the inhomogenous processing space whoseconnectivity corresponds trictly to the structure of thegrammar f om which it is compiled.The inhomogenous internal connectivity within space IX isrepresented infigure 7.
The units represented are also connectedto the neighbouring units in the representation space 1II and tocontrol bits which determine the shifting processes in therepresentation space.8 -1 ~ 3~/  x7/ X -~'~" L J ; ;  zk-_ , / /u_  /8 -t -2-2 -~1/1 I~.,M // - I / i  t/X-~/ ////-4-~ ,AS-.~q~ ~  S-~.bA-~ .~A-.liA-~I.A-.I-3 -4Figure 8 The initial stage of processing.
The activity of acontrol bit unit (0, .S.
,-1) forces the parser to shift the inputstring in the next step4.
An outline of the cormectionist parsing processThe computational process is as follows: Initially the inputstring is in space I ( or is transferred to this space from a wordrecognizer array analysing acoustic or graphic input).
The firstinput symbol is read into the processing space - more correctlyinto a connected buffer place of space VII, i.e.
the unit (-2, .a.,1) is activated and simultanously the unit (0, .S., O) - i. e. theinitializer unit.
(Cp.
figure 8).S.~-~q.~-?~.S-A.bS-,?~~lmoff-l.1 87/ !
"./VVVVVV ,Vv:,-1 -2 -3i~ - /  t l  .
~.~-~.A5-.aftA -a ,~1-2 -3Figure 9 An intermediate stage occurring after reading in thefirst symbolDue to the connectivities in position 0 ( i.e.
in space IX) theunits (0, S -> .aA , 0) and (0, S -> .Ab, 0) becomesimuhanously active, and then, depending on them,simultanously the units (0, A-> .aa, 0) and (0, A-> .a, 0).To scan-in the the first terminal the complete pattern ofactivity has to be shifted one step to the left with the exceptionof the activation of unit (-2..t. ,1).
The activity of this unit isttransferred to the unit (0, .t.
, 1).
(This is done because theunits located at X=-I are used as a temporary buffer by theparser.)
Figure 9 shows the state after this shifting process hasbeen carried out.
But simultanously the parser has to performthe computation of the parse list for the terminal just read.Since the units (O, A ->.a,0), (0,A ->.aa,0) and (0,S->.aA,0)were active while the terminal "a" was read, the parser mustactivate the units (0,A->a.,1), (0,A->a.a,1) and (0,S->a.A,1).And the activity of the unit (0,A->a.,1) forces the unit (0,S->A.b,1) to become active.
These actions take place accordingto the cormectivifies in space IX of figure 6 represented infigure 7.It should be clear by now how, in principle, the parsingprocess develops over the connectionist space until the finalstage represented schematically in figure 5 is reached.
It shouldalso be clear, in principle, how the process of generating thecomplete parse is produced in space IV through the operationof the units in space X.
They determine the "filtering out" ofcertain unconfirmed parse tree information i the parse list in aprocess of stepwise information shift from III to IV.
We shallnot discuss tiffs process here.5.
Perspectives for further esearchFrom a linguistic point of view, it is important to be able togenerate connectionist networks for more complicatedgrammars, in particular for tmification based grammars and forprinciples and parameters based approaches such as thoserecently developed by Chomsky.
So far we have been able todefine the appropriate r presentation space - i.e.
the extensionof our spaces HI and IV - and to develop first ideas about heconnectivities derived from symbolic definitions ofgrammatical properties, i.e.
the structures in our spaces IX andX.
We are optimistic about he possibilities of translating anyunification based formalism working with feature structuresinto a corresponding cormectionist network.ReferencesFeldman, J.A.
(1988) Structured neural networks in natureand in computer science.
In: Eckmiller, R. v.d.
Maisburg, Chr.Neural Computers, Berlin etc.
: SpringerFodor, J.A., Py|yshyn, Z.W.
(1988) Cormectionism andcognitive architecture, A critical analysis, Cognition 28:3 - 71Schnelle, H., Doust, R, (1990)) A net-linguistic chartparser, In: Reilly, N., Sharkey, N.E.
ConnectionistApproaches to Languages, Vol.I, Amsterdam: North-Holland3 55
