Proceedings of the EACL 2009 Demonstrations Session, pages 21?24,Athens, Greece, 3 April 2009. c?2009 Association for Computational LinguisticseHumanities Desktop - An Online System for Corpus Management andAnalysis in Support of Computing in the HumanitiesRu?diger Gleim1, Ulli Waltinger2, Alexandra Ernst2, Alexander Mehler1,Tobias Feith2 & Dietmar Esch21Goethe-Universita?t Frankfurt am Main, 2Universita?t BielefeldAbstractThis paper introduces eHumanities Desk-top- an online system for corpus manage-ment and analysis in support of Comput-ing in the Humanities.
Design issues andthe overall architecture are described aswell as an initial set of applications whichare offered by the system.1 IntroductionSince there is an ongoing shift towards computerbased studies in the humanities new challengesin maintaining and analysing electronic resourcesarise.
This is all the more because research groupsare often distributed over several institutes anduniversities.
Thus, the ability to collaborativelywork on shared resources becomes an importantissue.
This aspect also marks a turn point inthe development of Corpus Management Systems(CMS).
Apart from the aspect of pure resourcemanagement, processing and analysis of docu-ments have traditionally been the domain of desk-top applications.
Sometimes even to the point ofcommand line tools.
Therefore the technical skillsneeded to use for example linguistic tools have ef-fectively constrained their usage by a larger com-munity.
We emphasise the approach to offer low-threshold access to both corpus management aswell as processing and analysis in order to addressa broader public in the humanities.The eHumanities Desktop1 is designed as a gen-eral purpose platform for scientists in humanities.Based on a sophisticated data model to manage au-thorities, resources and their interrelations the sys-tem offers an extensible set of application modulesto process and analyse data.
Users do not need toundertake any installation efforts but simply canlogin from any computer with internet connection1http://hudesktop.hucompute.orgFigure 1: The eHumanities Desktop environmentshowing the document manager and administra-tion dialog.using a standard browser.
Figure 1 shows the desk-top with the Document Manager and the Adminis-tration Dialog opened.In the following we describe the general archi-tecture of the system.
The second part addressesan initial set of application modules which arecurrently available through eHumanities Desktop.The last section summarises the system descrip-tion and gives a prospect of future work.2 System ArchitectureFigure 2 gives an overview of the general archi-tecture.
The eHumanities Desktop is implementedas a client/server system which can be used viaany JavaScript/Java capable Web Browser.
TheGUI is based on the ExtJS Framework2 and pro-vides a look and feel similar to Windows Vista.The server side is based on Java Servlet technol-ogy using the Tomcat3 Servlet Container.
The coreof the system is the Command Dispatcher which2http://extjs.com3http://tomcat.apache.org21manages the communication with the client andthe execution of tasks like downloading a docu-ment for example.
The Master Data include infor-mation about all objects managed by the system,for example users, groups, documents, resourcesand their interrelations.
All this information isstored in a transactional Relational Database (us-ing MySQL4).
The underlying data model is de-scribed later in more detail.
Another importantcomponent is the Storage Handler: Based on anautomatic mime type5 detection it decides howto store and retrieve documents.
For examplevideos and audio material are best stored as fileswhereas XML documents are better accessible viaa XML Database Management System or spe-cialized DBMS (e.g.
HyGraphDB (Gleim et al,2007)).
Which kind of Storage Backend is usedto archive a given document is transparent to theuser- and also to developers using the StorageHandler.
The Document Indexer allows for struc-ture sensitive indexing of text documents.
Thatway a full text search can be realised.
Howeverthis feature is not fully integrated at the momentand thus subject of future work.
Finally the Com-mand Dispatcher connects to an extensible set ofapplication modules which allow to process andanalyse stored documents.
These are briefly intro-duced in the next section.To get a better idea of how the described com-ponents work together we give an example of howthe task to perform PoS tagging on a text docu-ment is accomplished: The task to process a spe-cific document is sent from the client to the server.As a first step the Command Dispatcher checksbased on the Master Data if the requesting useris logged in correctly, authorized to perform PoStagging and has permission to read the documentto be tagged.
The next step is to fetch the docu-ment from the Storage Handler as input to the PoSTagger application module.
The tagger creates anew document which is handed over to the StorageHandler which decides how to store the resource.Since the output of the tagger is a XML documentit is stored as a XML Database.
Finally the in-formation about the new document is stored in theMaster Data including a reference to the originalone in order to state from which document it hasbeen derived.
That way it is possible to track onwhich basis a given document has been created.4http://dev.mysql.com5http://www.iana.org/assignments/media-types/Finally the Command Dispatcher signals the suc-cessful completion of the task back to the Client.Figure 3 shows the class diagram of the masterdata model.
The design is woven around the gen-eral concept that authorities have access permis-sions on resources.
Authorities are distinguishedinto users and groups.
Users can be members ofone or more groups.
Furthermore authorities canhave permissions to use features of the system.That way it is possible to individually configurethe spectrum of functions someone can effectivelyuse.
Resources are distinguished by documentsand repositories.
Repositories are containers, sim-ilar to directories known from file systems.
An im-portant addition is that resources can be memberof an arbitrary number of repositories.
That way adocument or a repository can be used in differentcontexts allowing for easy corpus compilation.A typical scenario which benefits from such adata model is a distributed research group consist-ing of several research teams: One team collectsdata from field research, a second processes andannotates the raw data and a third team performsstatistical analysis.
In this example every grouphas the need to share resources with others whilekeeping control over the data: The statistics teamshould be able to read the annotated data but mustnot be allowed to edit resources and so on.Figure 2: Overview of the System Architecture.Figure 3: UML Class Diagram of the Master Data.22Figure 4: The eHumanities Desktop environment showing a chained document and the PoS Taggerdialog.3 ApplicationsIn the following we outline the initial set of appli-cations which is currently available via eHuman-ities Desktop.
Figure 4 gives an idea of the lookand feel of the system.
It shows the visualisationof a chained document and the PoS Tagger win-dow with an opened document selection dialog.3.1 Document ManagerThe Document Manager is the core of the desktop.It allows to upload and download documents aswell as sharing them with other users and groups.It follows the look and feel of the Windows Ex-plorer.
Documents and repositories can be createdand edited via context menus.
They can be movedvia drag and drop between different repositories.Both can be copied via drag and drop while press-ing the Ctrl-key.
Note that repositories only con-tain references- so a copy is not a physical redupli-cation.
Documents which are not assigned to anyrepository the current user can see are gathered ina special repository called Floating Documents.
Adouble click on a file will open a document viewerwhich offers a rendered view of textual contents.The button ?Access Permissions?
opens a dialogwhich allows to edit the rights of other users andgroups on the currently selected resources.
Finallya search dialog at the top makes documents search-able.3.2 PoS TaggingThe PoS-Tagging module enables users to pre-process their uploaded documents.
Besides to-kenisation and sentence boundary detection, a tri-gram HMM-Tagger is implemented in the pre-processing system (Waltinger and Mehler, 2009).The tagging module was trained and evaluatedbased on the German Negra Corpus (Uszkoreitet al, 2006) (F-measure of 0.96) and the En-glish Penn Treebank (Marcus et al, 1994) (F-measure of 0.956).
Additionally a lemmatisationand stemming module is included for both lan-guages.
As an unifying exchange format the com-ponent utilises TEI P5 (Burnard, 2007).3.3 Lexical ChainingAs a further linguistic application module a lex-ical chainer (Mehler, 2005; Mehler et al, 2007;Waltinger et al, 2008a; Waltinger et al, 2008b)has been included in the online desktop environ-ment.
That is, semantically related tokens of agiven text can be tracked and connected by meansof a lexical reference system.
The system cur-rently uses two different terminological ontolo-gies - WordNet (Fellbaum, 1998) and GermaNet(Hamp and Feldweg, 1997) - as chaining resourceswhich have been mapped onto the database for-mat.
However the list of resources for chainingcan easily be extended.233.4 Lexicon ExplorationWith regards to lexicon exploration, the system ag-gregates different lexical resources including En-glish, German and Latin.
In this module, not onlyco-occurrence data, social and terminological on-tologies but also social tagging enhanced data areavailable for a given input token.3.5 Text ClassificationAn easy to use text classifier (Waltinger et al,2008a) has been implemented into the system.
Inthis, an automatic mapping of an unknown textonto a social ontology is enabled.
The systemuses the category tree of the German and EnglishWikipedia-Project in order to assign category in-formation to textual data.3.6 Historical Semantics CorpusManagementThe HSCM is developed by the research projectHistorical Semantics Corpus Management (Jussenet al, 2007).
The system aims at a texttechno-logical representation and quantitative analysis ofchronologically layered corpora.
It is possible toquery for single terms or entire phrases.
The con-tents can be accessed as rendered HTML as wellas TEI P56 encoded.
In its current state is supportsto browse and analyse the Patrologia Latina7.4 ConclusionThis paper introduced eHumanities Desktop- aweb based corpus management system whichoffers an extensible set of application moduleswhich allow online exploration, processing andanalysis of resources in humanities.
The useof the system was exemplified by describing theDocument Manager, PoS Tagging, Lexical Chain-ing, Lexicon Exploration, Text Classification andHistorical Semantics Corpus Management.
Fu-ture work will include flexible XML indexing andqueries as well as full text search on documents.Furthermore the set of applications will be gradu-ally extended.ReferencesLou Burnard.
2007.
New tricks from an old dog:An overview of tei p5.
In Lou Burnard, Milena6http://www.tei-c.org/Guidelines/P57http://pld.chadwyck.co.uk/Dobreva, Norbert Fuhr, and Anke Lu?deling, edi-tors, Digital Historical Corpora- Architecture, An-notation, and Retrieval, number 06491 in DagstuhlSeminar Proceedings, Dagstuhl, Germany.
Interna-tionales Begegnungs- und Forschungszentrum fu?rInformatik (IBFI), Schloss Dagstuhl, Germany.Christiane Fellbaum, editor.
1998.
WordNet: An Elec-tronic Lexical Database.
MIT Press, Cambridge.Ru?diger Gleim, Alexander Mehler, and Hans-Ju?rgenEikmeyer.
2007.
Representing and maintaininglarge corpora.
In Proceedings of the Corpus Lin-guistics 2007 Conference, Birmingham (UK).Birgit Hamp and Helmut Feldweg.
1997.
Germanet - alexical-semantic net for german.
In In Proceedingsof ACL workshop Automatic Information Extractionand Building of Lexical Semantic Resources for NLPApplications, pages 9?15.Bernhard Jussen, Alexander Mehler, and AlexandraErnst.
2007.
A corpus management system for his-torical semantics.
Appears in: Sprache und Daten-verarbeitung.Mitchell P. Marcus, Beatrice Santorini, and Mary A.Marcinkiewicz.
1994.
Building a large annotatedcorpus of english: The penn treebank.
Computa-tional Linguistics, 19(2):313?330.Alexander Mehler, Ulli Waltinger, and Armin Weg-ner.
2007.
A formal text representation modelbased on lexical chaining.
In Proceedings of theKI 2007 Workshop on Learning from Non-VectorialData (LNVD 2007) September 10, Osnabru?ck, pages17?26, Osnabru?ck.
Universita?t Osnabru?ck.Alexander Mehler.
2005.
Lexical chaining as asource of text chaining.
In Jon Patrick and ChristianMatthiessen, editors, Proceedings of the 1st Compu-tational Systemic Functional Grammar Conference,University of Sydney, Australia, pages 12?21.Hans Uszkoreit, Thorsten Brants, Sabine Brants, andChristine Foeldesi.
2006.
Negra corpus.Ulli Waltinger and Alexander Mehler.
2009.
Web aspreprocessed corpus: Building large annotated cor-pora from heterogeneous web document data.
Inpreparation.Ulli Waltinger, Alexander Mehler, and Gerhard Heyer.2008a.
Towards automatic content tagging: En-hanced web services in digital libraries using lexi-cal chaining.
In 4th Int.
Conf.
on Web InformationSystems and Technologies (WEBIST ?08), 4-7 May,Funchal, Portugal.
Barcelona.Ulli Waltinger, Alexander Mehler, and MaikStu?hrenberg.
2008b.
An integrated model oflexical chaining: Application, resources and itsformat.
In Angelika Storrer, Alexander Geyken,Alexander Siebert, and Kay-Michael Wu?rzner,editors, Proceedings of KONVENS 2008 ?Erga?nzungsband Textressourcen und lexikalischesWissen, pages 59?70.24
