Computational Aspects of M-grammarsJoep RousPhi l ips Research Laborator ies ,  P.O.
Box 80.0005600 JA  Eindhoven, The Nether landsE-mail :  rous@rosetta.pr l .phi l ips.nl  (uucp)ABSTRACTIn this paper M-grammars that are used in the Rosettatranslation system will be looked at as the specifica-tion of attr ibute grammars.
We will show that theattr ibute evaluation order is such that instead of thespecial-purpose parsing and generation algorithms in-troduced for M-grammars in Appelo et al(1987), alsoEarley-like context-free parsing and ordinary generationstrategies can be used.
Furthermore, it is i l lustratedthat the attr ibute grammar approach gives an insightinto the weak generative capacity of M-grammars andinto the computational complexity of the parsing andgeneration process.
Finally, the attr ibute grammar ap-proach will be used to reformulate the concept of iso-morphic grammars.M-grammarsIn this section we will introduce, very globally, the gram-mars that are used in the Rosett ,  machine translationsystem which is being developed at Philips ResearchLaboratories in Eindhoven.
The original Rosetta gram-mar formalism, called M-grammars, was a computa-tional variant of Montague grammar.
The formalismwas introduced in Landsbergen(1981).
Whereas rulesin Montague grammar operate on strings, M-grammarrules (M-rules) operate on labelled ordered trees, calledS-trees.
The nodes of S-trees are labelled with syntac-tic categories and attribute-value pairs.
Because of thereversibility of M-rules, it is possible" to define two al-gorithms: M-Parser and M-Generator .
The M-Parseralgorithm starts with a surface: structure in the formof an S-tree and breaks it down into basic expressionsby recursive application of reversed M-rules.
The resultof the M-Parser algorithm is a syntactic derivation treewhich reflects the history of the analysis process.
Theleaves of the derivation tree are names of basic expres-sions.
The M-Generator algorithm generates a set ofS-trees by bottom-up application of M-rules, the namesof which are mentioned in a syntactic derivation tree.Analogous to Montague Grammar, with each M-rule arule is associated which expresses its meaning.
This al-lows for the transformation of a syntactic derivation treeinto a semantic derivation tree by replacing the name ofeach M-rule by the name of the corresponding mean-ing rule.
In Landsbergen (1982) it was shown that theformalism is very well fit to be :used in an interlingualmachine translation system in which semantic derivationtrees make up the interlingua.
In the analysis part ofthe translation system an S-tree of the source languageis mapped onto a set of semantic derivation trees.
Next,each semantic derivation tree is mapped onto a set ofS-trees of the target language.
In order to guaranteethat for a sentence which can be analysed by means ofthe source language grammar a translation can alwaysbe generated using the target language grammar, sourceand target grammars in the Rosetta system are attuned.Grammars, attuned in the way described in Landsber-gen (1982), are called isomorphic.Appelo et al(1987) introduces ome extensions of theformalism, which make it possible to assign more struc-ture to an M-grammar.
The new formalism was calledcontrolled M-grammars.
In this new approach a gram-mar consists of ~ set of subgrammars.
Each of the sub-grammars contains a set of M-rules and a regular ex-pression over the alphabet of rule names.
The set ofM-rules is subdivided into meaningful rules and trans-formations.
Transformations have no semantic relevanceand will therefore not occur in a derivation tree.
Theregular expression can be looked at as a prescription ofthe order in which the rules of the subgrammar have tobe applied.
Because of these changes in the formalism,new versions of the M-Parser and M-Generator algo-rithm were introduced which were able to deal with sub-grammars.
These algorithms, however, are complex andresult in a rather cumbersome implementation.
In thispaper we will show that they can be replaced by normalcontext-free parse and generation algorithms if we inter-pret an M-grammar as the specification of an attr ibutegrammar (Knuth (1968), Deransart et al(1988)).M-grammars  as  a t t r ibute  grammarsThe control expression which is used in the definition ofa Rosetta subgrammar specifies a regular language overthe alphabet of rule names.
Another way to define sucha language is by means of a regular grammar.
Let con-trol expression cei of subgrammar i define the regularlanguage ?(i).
Then we can construct a minimal regu-lar grammar gi which defines the same language.
Thegrammar gi will have the following form:?
A set of non-terminals Ni = {~/ .
.
.
.
.
I/M' }?
A set of terminals Ei.
Ei is the smMlest set suchthat there is a terminal f EE i  for e~u:h M-rule r .?
Start symbol I ??
210  -?
A set of production rules P~ containing the follow-ing type of rules:- I~ "* ~I~, where f E El_ _.We will use the regular grammar defined above as astarting point for the construction of an attr ibuted sub-grammar.
An elegant view of attr ibute grammars can befound in Hemerik (1984).
Hemerik defines an attr ibutegrammar as a context free grammar with parametrizednon-terminals and production rules.
In general, non.terminals may have a number of parameters ,  attributes- associated with them.
Production rules of an attr ibutegrammar are pairs (rule form, rule condition).
From arule form, production rules can be obtained by meansof substitution of values for the attr ibute variables thatsatisfy the rule condition.
In the grammars presentedin this paper, non-terminals have only one attr ibute oftype S-tree.
The attr ibute grammar ules that are usedthroughout this paper also have a very restricted form.A typical attr ibute grammar ule r with context freeskeleton A - .
BC  will look like:A<o>- -*B<p>C<q>(o, (p, q)) ~Here, A < o >--.
B < p > C < q > is the rule form,o,p, q are the attributes and (o, (p,q)) E ~ is the rulecondition, g defines a relation between the attributes atthe left-hand side and the attr ibutes at the right-handside of the rule form.For each subgrammar rgi, (1 < i < M) we will con-struct an attr ibuted subgrammar agi.
Each constructedattr ibuted subgrammar agi will have a start symbol J'T/.First, however, we define two new attributed subgram-mars that have no direct relation with a subgrammarof a given M-grammar: the start subgrammar and theterminal subgrammar.
The terminal subgrammar agtwith start symbol ~ contains a rule of the form\[ ~<o>- -*~O=Zfor each basic expression z of the M-grammar.
The startsubgrammar ago with start symbol S contains a rule ofthe form\[ S < o >~/~.?
<p>o = p A cat(p) E ezportcat$(i)for the start symbol of each attr ibuted subgrammar.The attr ibute condition in this rule means that S~treesthat are exported by subgrammar i have a syntactic at-egory which is in the set ezportcats(i).For each subgrammar rgi specified by the M-grammarwe can construct an attr ibuted subgrammar agi beingthe 5-tuple (/~, U {S), { I>, ra } U g , , Pi , \]~i , ( T , Fi ) ) as fol-lows:?
ag~ has 'domain' (T, Fi), where T is the set of possi-ble S-trees and F~ is a collection of relations of typeT m ?
T, m > 0.
F~ contains all relations defined bythe M-rules of subgrammar i.s The set of production rules of a9i can be con-structed as follows:- If r9i contains a rule of the form I~ --* fI~,where f corresponds with an n-ary mean ing-ful M-rule r, agi contains the following at-tribute grammar ule:Ii <o  >-.~I~ <pl  > S<p2 >.
.
.?
.
.S<pn> I>(o,(P, .... ,P.)) e RrHere, ~ and \[/k are non-terminals of the at-tributed sugrammar agi, S is the start sym-bol of the complete grammar, the terminalis the name of the M-rule and Rr is the binaryrelation between S-trees amd tuples of S-treeswhich is defined by M-rule t. The terminalsymbol I:> marks the end of the scope of theproduction rule in the strings generated bythe grammar.
The variables o ,p l .
.
.p ,  arethe attr ibutes of the rule.
All attributes areof type S-tree.One possible interpretation of the attr ibutegrammar ule is that the S-tree o is receivedfrom non-terminal ~'~ of the current subgram-mar.
According to the relation defined by M-rule r, the S-tree o corresponds to the S-treespl, ...,Pn.
S-tree pl is passed to another non-terminal of the current subgrammar, whereasp2, ..., pn are offered to the start symbol of theattr ibute grammar.- If rgi contains a rule of the form I~ --* ~I~where e corresponds with unary t rans forma-t ion r, agi contains the following attr ibutegrammar ule:\[ ii < <p>(o,p) e lz,Notice that an attr ibute rule correspondingwith a transformation r does not produce theterminal f.- If rgi contains a rule of the form lJl --.
I~, theagl contains the following attr ibute grammarrule:\[ <p>omp-- If rgi contains a rule of the form I~ - .
?
thenags contains the following rule:\[ JJi ~o>- .
.QS<p>o = p ^ cat(p) ~ headcats(i)Rules of this form mark the beginning of asubgrammar.
The terminal symbol O is usedfor this purpose.
The attr ibute relation isa restriction on the kind of S-trees that isallowed to enter the subgrammar.
Only S-trees with a syntactic category in the setheadcats(i) are accepted.-211  -The set of all attr ibuted subgrammars can be joinedto one single attr ibute grammar (N, ~, P, S, (T, F) )  asfollows:?
The non-terminal set of the attr ibute grammar isthe union of all non-terminals of all subgrammars,Mi.e.
N = U~=0 ~i .?
The terminal set E of the attr ibute grammar is theunion of all terminals of all subgrammars (includingthe terminal subgrammar): E = { I>, 13} U U~0 ~i.?
The set of production rules is the union of all pro-M - duction rules of the subgrammaxs, P = Ui=0 P~.?
The startsymbol f the composed grammar is iden-tical to the the startsymbol S of the start subgram-mar.
The attr ibute of the start symbol of an at-tribute grammar is called the designated attr ibute(Engelfriet (1986)) of the attr ibute grammar.
Theoutput set of an attr ibu(e grammar is the set of allpossible values of its designated attribute.?
The composed grammar ha.s: domain (T, F)  whereM F = Ui=0 Fi and T is the set of all possible S-trees.In the rest of the paper we call an attr ibute grammarwhich has been derived from an M-grammar in this wayan attributed M-grammar or amg.Computat iona l  AspectsBecause ach meaningful attr ibuted rule r produces theterminal symbol ~ and because ach terminal rule x pro-duces terminal symbol ~, the strings of ?
(X) ,  the lan-guage defined by an arag X, will contain the deriva-tional history of the string itself.
:The history is partial,because the grammar ules for transformations do notproduce a terminal.
Moreover, the form of the grammarrules is such that each string is a prefix representationof its own derivational history.Given an amg X, withfunction of type ?(X)MGen(d)----ac!
{ta set of terminals ~, a recognition---, 2 T can be defined as:IS<t>~x dAdEE*}The reverse of MGen is the generation function of typeT --* 2 ~x) ,  which can be defined as:MPars(t) =d,!
{dl S<t>~x d ^  d ~ ~*}These functions can of course be defined for each at-tribute grammar in this form.
However, in the case ofamg's  the MPars and MGen functions are both com-putable because ach M-rule r defines both a computablefunction and its reverse:(o,(p, .... , v . )
)  ~ :~.o~f~(p ,  .
.
.
.
.
p. )  ~.
(p,, ...,v.) ~ f;-'(o)Because of this property of the M-rules the grammar hastwo possible interpretations:?
one for recognition purposes with only synthesizedattributes, in which the rules can be written as:\[ i l  <T o >--.
Hy <Tp~ > s <Tp~ > ... .
.
.S  <TP .
> t>o e A(p~,  ...,p-)This interpretation is to be used by MGen in thegeneration phase of the Rosetta system.?
one for generation purposes with only inherited at-tributes containing the following type of rules:Ii <~o>- -H~ <lp~ > S<~w >.
.
.?
.
.
.S  <~.p.
> I>(p,  .... ,p.) ~ f~(o)The generative interpretation of the rules will beused by MPars in the analysis phase of the Rosettatranslation system.From the definitions of MPars and MGen the reversibil-ity property of the grammar follows immediately:d E MPars(t) 4, t E MGen(d)The reversibility property which has always been one ofthe tenets of the Rosetta system (Landsbergen (1982))has recently received the appreciation of other re-searchers in the field of M.T.
as well (Isabelle (1989),Rohrer (1989), van Noord (1990)).In order to give the M-grammar formalism a place inthe list of other linguistic formalisms like LFG, FUG,TG, TAG and GPSG x, we will investigate some com-putational aspects of amg's  in this section.
Given anamg grammar X, we can calculate the value of the des-ignated attr ibute for an element of ?(X).
For this cal-culation an ordinary context free recognition algorithm(Earley(1970), Leermakers(1.991)) can be used.
Becausethe grammar may contain cycles of the form\[ r J<o>--.
l~<p>\[o,p) eits context-free backbone is not finitely ambiguous.Hence, an amg is not necessarily off-line parsable (Pereira and Warren (1983), Haas (1989)).
The termoff-line parsable is somewhat misleading because a two-stage parse process for grammars which ate infinitelyambiguous is very well feasible.
In the first stage ofthe parse process, in which the context free backbone isused, a finite representation f the infinitely many parsetrees, e.g.
in the form of a parse matrix, is determined.Next, in the second stage, the attr ibutes ate calculated.However, measure conditions on the attributes are nec-essary to guarantee termination of the parse process.These measure conditions are constraints on the size(according to a Certain measure) of the attr ibute val-ues that occur in each cycle of the underlying contextfree grammar.The generative interpretation of amg X can be used in astraight-forward language generator which generates allcorresponding elements of ?
(X)  for a given value of thedesignated at t r ibute .
Obviously, it can only be guaran-teed that the generation process will always terminate iflcf.
Perrault (1984) for a comparison of the mathematicalproperties of these formalisms.- 212  -the grammar satisfies ome restrictions.
Suggestions forgrammar constraints in the form of termination condi-tions for parsing and generation are given in Appelo etal.
(1987).For an insight into the weak generative capacity of theformalism we have to examine the set of yields of theS-trees in the output set of an amg.
Let us call thisset the output language defined by an amg.
It is notpossible to characterize xactly the set of output Inn.guages that can be defined by an amg without definingwhat the termination conditions are.
The precise formof the termination conditions, however, is not imposedby the M-grammar formalism.
The formalism merelydemands that some measure on the attribute values isdefined which garantuees termination of the recognitionand generation process.
In order to get an idea of theweak generative capacity of the formalism, we assume,for the moment, the weakest condition that guaranteestermination.
It can be shown that each deterministicTuring Machine can be implemented by means of anamg such that the language defined by the TM is theoutput language of that amg.
Not all grammars thatcan be constructed in this way satify the terminationcondition, however.
The termination condition is onlysatisfied by Turing Machines that halt on all inputs,which is exactly the class of machines that define theset of all recursive languages.
Consequently, the outputlanguages that can be defined by amg's  or M-grammars,in principle, are the languages that can be recognized bydeterministic Taring Machines in finite time.At this point it is appropriate to mention the bifurca~tion of grammatical formalisms into two classes: theformalisms designed as linguistic tools (e.g.
PATR-II,FUG, DCG) and those intended to be linguistic theories(e.g.
LFG, GPSG, GB) (cf.
Shieber (1987) for a motiva-tion of this bifurcation).
The goals of these formalismswith respect o expressive power are, in general, at oddswith each other.
While great expressive power is consid-ered to be an advantage of tool-oriented formalisms, it isconsidered to be an undesirable property of formalismsof the theory type.
The M-grammax formalism clearlybelongs to the category of linguistic tools.By strengthening the termination conditions it is pos-sible to restrict the class of output languages that canbe defined by an amg.
For instance, the class of out-put languages can be restricted to the languages thatare recognizable by a deterministic TM in 2 c" time a ifwe assume that the termination conditions imposed onan amg are the weakest conditions that satisfy the con-stralnts formulated in Rounds (1973).
A reformulationof these constraints for amg's  is as follows:, The time needed by an attribute evaluating func-tion is proportional to somepolynomial in the sumof the size of its arguments.:?
There is a positive constant ), such that in eachfully attributed erivation tree, the size of each at-tribute value is less than or equal to the size of2This includes all context sensitive languages (Cook09~I ) ) .the constant ,~ times the size of the value of thedesignated attribute.Rounds used these conditions to show that the languagesrecognisable in exponential time make up exactly theset which is characterized by transformational gram-mars (as presented in Chomsky (1965)) satisfying thetermiaad-length non-decreasing condition.T~?~ power of the formalism with respect o generativecapacity has of course its consequences for the compu-ttttoaa\] complexity of the generation and recognition~prQeess, Here too, the exact form of the terminationcondition is important.
Obeying the termination condi-tions that we adhere to in the current Rosetta system,it can be proved that the recognition and the generationproblems axe NP-hard, which makes them computation.ally intractable.
In comparison with other formalisms,M-grammaxs axe no exception with respect o the com-plexity of these issues.
LFG recognition and FUG gener-ation have both been proved to be NP-hard in Barton etai, (1987) and Ritchie (1986) respectively.
Recognitionin GPSG has even been proved to be EXP-POLY-haxd(Barton et a\].
1987).
We should keep in mind, however,that the computational complexity analysis is a worst-ease analysis.
The average-case behaviour of the parseand generation algorithm that we experience in the dallyuse of the Rosetta system is certainly not exponential.I somorph ic  GrammarsThe decidability of the question whether two M-grammars axe isomorphic is another computational s-pect related to M-grammars.
Although this mathemati-cal issue appears not to be very relevant from a practicalpoint of view, it enables us to show what grammar iso-morphy means in the context of stag's.According to the Rosetta Compositionality Principle(Landsbergen(1987)) to each meaningful M-rule r ameaning rule mr corresponds which expresses the se-mantics of r. Furthermore, there is a set of basic mean-ings for each basic expression of an M-grammar.
Weea~ easily express this relation of M-grammar ules andbasic expressions with their semantic ounterparts in ana~ag, Instead of incorporating the M-rule name e inthe gttributed production rule as we did in the previouss~tlons, we now include the name of the correspondingmeaning rule 6~r as follows:\[ !~ < o >--.
~,i~ <pl>S<p2> .
.
.S<p,> I>E 7zrThe terminal subgrammar must be adapted in order togenerate basic meanings instead of basic expressions.
Ifbasic expression m corresponds with the basic mean-ings m~ .
.
.
.
.
mJ= .
.
.
.
, mz" then we replace the originalrule in the terminal subgrammar for z by n rules ofthe form:W~ will call a gra~mmar that has been derived in this wayfrom azt amg a semantic amg, or suing.
The strings- 213 ,of the language defined by an samg are prefix repre-sentations of semantic derivation trees.
The languagedefined by an samg is called the set of strings which arewell-\]ormed with respect o X.Let us repeat here what it means for two M-grammarsto be isomorphic:"...Two grammars are isomorphic iff each semanticderivation tree which is welbformed with respect o onegrammar is also well-formed with respect o the othergrammar..." (Landsbergen (1987)).
We can reformulatethe original definition of isomorphic M-grammars in ~.very elegant way for samg's :Def in i t ion:  Two samg's  X~ and X2 are isomorphic iffthey are equivalent, hat is iff ?
(XI) = ?
(X2)This definition says that writing isomorphic grammarscomes down to writing two attr ibute grammars whichdefine the same language.
From formal language the-ory (e.g.
Hopcroft and Ullman (1979)) we know thatthere is no algorithm that can test an arbitrary p~ir ofcontext-free grammars G1 and G2 to determine whether?
(G~) = ?(G2).
It can also be shown that samg's  candefine any recursive language.
Consequently, checkingthe equivalence of two arbitrary samg's  will be an un.decidable problem.
Rosetta grammars that are used fortranslation purposes, however, are not arbitrary samg's:they are not created completely independently.
Thestrategy followed in Rosetta to accomplish the defini-tion of equivalent grammars, that is, grammars that de-fine identical languages, is to attune two samg's  to eachother.
This grammar attuning strategy is extensively de-scribed in Appelo et al(1987), Landsbergen (1982) andLandsbergen (1987) for ordinary M-grammars.
Here,we will show what the attuning strategy means in thecontext of samg's ,  together with a few extensions.The attuning measures below must not be looked at asthe weakest possible conditions that guarantee isomor-phy.
The list merely is an enumeration of conditionswhich together should help to establish isomorphy.
Iftwo samg's  Xa and X2 have to be isomorphic, the fol-lowing measures are proposed:, The production rules of both samg's  must be con-sistent.
;.If both grammars have a production rule ii~ Whichthe name of the meaning rule m appears, then theright-hand side of the rules should contain the samenumber of non terminals, since m is a function witha fixed number of arguments, independent of thegrammar it is used in., The terminal sets o\] both samg's  should be ~uaP.In the context of the ord in~y M-grammar formal-ism this condition is formulated as:- for each basic expression in one M-grammar therehas to be at least one basic expression in the otherM-grammar with the same meaning (which comesaThis condition is equivalent to the attuning measures de-scribed in Appelo et al (1987), Landsbergen (1982)andLandsbergen(1987).down to the condition that the terminal set of theterminal subgrammars should be identical)- for each meaningful rule in one M-grammar therehas to be at least one meaningful rule in the otherM-graanmar which has the same meaning.?
The underlying contezt Jree grammars oJ bothsamg's  should be equivalent.Equivalence of the underlying context free gram-mars can be established by putting an equivaleneecondition on the underlying grammar of corre-sponding subgrammars of the samg's  in question.Suppose that for each subgrammar of an samg?
X1 a subgrammar of another samg 3(2 would ex-ist that performs the same linguistic task and viceversa.
Such an ideal situation could be expressedby a relation g on the sets of subgrammars of bothsamg's .
Let i and j be subgrammars of the samg'sX1 and Xa respectively, such that (i, j )  E g ,  thenthe underlying grammars 4 Bi and B i have to beconstructed in such a way that they define the samelanguage.
( Notice that Bi and B i are regulargrammars.)
More formally:v( i , i )  e g:  c (B , )  = ~(o i ) .
~The three attuning conditions above guarantee thatthe underlying context free grammars of two attunedsamg's  are equivalent.
However, the language definedby an samg is a subset of the language defined by its un-derlying grammar.
The rule conditions determine whichelements are in the subset and which are not.
Becauseof the great expressive power of M-rules, the attuningmeasures place no effective restrictions on the kind oflanguages an samg can define.
Hence, it can be provedthat:Theorem:  The question whether two attuned samg'sare isomorphic is undecidable.Because of the equivalence between samg's  and M-grammars this also applies to arbitrary attuned M-gr~nmars.
Future research is needed to find extensionsfor the attuning measures in a way that guarantees i o-m0tphy if grammar writers adhere to the attuning con-dil~ions.
The extensions will probably include restric-tions on the form of the underlying grammar and onthe expressive power of M-rules.
Also formal attuningmeasures between M-rules or sets of M-rules of differentgrammars are conceivable.4Because we are dealing with a subgrammar, the non-terminal S is discarded from the production rules of the un-derlying rammar.SThis attuning measure sketches an ideal sittmtion.
Inpractice for each subgrarnmar ofan samg there is not a cor-responding fully isomorphic subgrammar but only a partiallyisomorphic subgranunar of the other suing.
However, the re-quirement of fully isomorphic subgranunars is not the weak-est attuning condition that guarantees the equivalence of theunderlying context free grammars.
F_,quivalence an also beguaranteed if XI and X~ satisfy the following condition whichexpresses partial isomorphy between subgranunars:U~x~ ~(nd = Uj~x~ L(B~)- 214  -The current Rosetts grammars obey the three previ-ously mentioned attuning measures.
In practice thesemeasures provide a good basis to work with.
Therefore,the undecidability of the isomorphy question is not anurgent topic at the moment.Conc lus ionsIn thib paper we presented the interpretation of an M-grammar as a specification of an attribute grammar.We showed that the resulting attribute grammar is re-versible and that it can be used in ordinary contextfree recognition and generation algorithms.
The gen-eration algorithm is to be used in the analysis phase ofRosetta, whereas the recognition algorithm should beused in the generation phase.
With respect o the weakgenerative capacity it has been concluded that the setof languages that can be generated and recognized e-pends on the termination conditions that are imposedon the grammar.
If the weakest ermination conditionis assumed, the set of languages that can be defined byan M-grammar is equivalent to the set of languages thatcan be recognized by a deterministic Turin8 Machinein finite time.
Using more realistic termination condi-tions, the computational complexity of the recognitionand generation problem can still be classified as NP-hard and, consequently, as computationally intractable.Finally, it was concluded that the question whether twoattuned M-grammars are isomorphic, is undecidable.AcknowledgementsThe author wishes to thank Jan Landsbergen, JanOdijk, Andr~ Schenk and Petra de Wit for their helpfulcomments on earlier versions of the paper.
The authoris also indebted to Lisette Appelo for encouraging himto write the paper and to Ren6 Leermakers with whomhe had many fruitful discussions on the subject.Re ferencesAppelo, L. , C. Fellinger and J. Landsbergen (1987),'Subgrammars, Rule Classes and Control in theRosetta Translation System', Philips ResearchM.S.
14.131, Proceedings of 3rd ACL Conference, European Chapter, pp.
118-133.Barton, G., R. Berwick and E. Ristad (1987), Com.putational Compi~ity and Natural Language, MITPress, Cambridge, Mass.Chomsky, N. (1965), Aspects of the Theory of Syntax,MIT Press, Cambridge, Mass.Cook, S. A.
(1971), Characterizations of PushdownMachines in Terms of Time-bounded Computers,Journal of the Association for Computing Machin-ery 18, 1, pp.
4-18.Deransart, P., M. Jourdan, B. Lorho (1988), 'AttributeGrammars', Lecture Notes in Computer Science323, Springer-Verlag, Berlin.Earley, J.
(1970), 'An efficient context-free parsing al-gorithm', Commun.
ACM 13 (1970), pp.
94-102.Engelfriet, J.
(1986), 'The Complexity of LanguagesGenerated by Attribute Grammars', SIAM Journalon Computing 15, l, pp.
70-86.Haas, A.
(1989), 'A Generalization of the OffiineParsable Grammars', Proceedings of the ~7th An-nual Meeting of the Association for ComputationalLinguistics, pp.
237-242.Hemerik, C. (1984), 'Formal definitions of program-ming languages as a basis for compiler construc-tion', Ph.D.
th., University of Eindhoven.Hopcroft, J.E.
and J.D.
Ullman (1979), 'Introductionto Automata Theory, Languages and Computa-tion', Addison Wesley Publishing Company, Read-ing, Mass.Isabelle, P. (1989) , 'Towards Reversible M.T.
Systems',MT Summit'lI, pp.
67-68.Knuth, D.E.
(1968), 'Semantics of Context-Free Lan-guages', Math.
Systems Theory ~, 2, pp.
127-145(June 1968).Landsbergen, J.
(1981), 'Adaptation of Montaguegrammar to :the requirements of parsing', in: For-real Methods in the Study of Language Part ~, MCTract 136, Mathematical Centre, Amsterdam.Landsbergen, J.
(1982), 'Machine Translation based onlogically isomorphic Montague grammars', Coling8~, North-H011and, Amsterdam, pp.
175-181.Landsbergen, J.
(1987), 'Isomorphic grammars andtheir use in the Rosetta Translation system', Ma-chine Translation, the State of the Art, M.
King(ed.
), Edinburg University Press.Leermakers, R (1991), 'Non-deterministic recursive as-cent parsing', Proceedings of the 5th ACL Confer.ence, European Chapter, forthcoming.Noord, van G. (1990), 'Reversible Unification BasedMachine ~l~anslation', i  Proceedings ofthe 13th In-ternational Conference on Computational Linguis-tics, Helsinki.Pereira, F., D. Warren (1983), 'Parsing as deduction',Proceedings .of the ~lth Annual Meeting of the As-sociation for Computational Linguistics, pp.
137-144. :'Perrault, C.R.
C1984), 'On the Mathematical Proper-ties of Linguistic Theories', Computational Linguis-tics 10, pp.
165-176.Ritchie, G. (1986), 'The computational complexity ofsentence derivation in functional unification gram-mar', Proceedings of Coling'86, pp.
584-586.Rohrer, C. (1989), 'New directions in MT systems',MT Summit II, pp.
120-122.Rounds, W. (1975), 'A grammatical characterizationof the exponential languages', Proceedings of the16th Annual Symposium on Switching Theory andAutomata, IEEE Computer Society, New York, pp.135-143.Shieber, S. M. (!987), 'Separating Linguistic Analysesfrom Linguistic Theories', in Linguistic Theory andComputer Applications, Academic Press.- 215  -
