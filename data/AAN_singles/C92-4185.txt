UNIFYING DISJUNCTIVE FEATURE STRUCTURESLENA S 'FROMBACKDeparlment of Coinputer ,and htforntatiol~ ScienceLink0ping UniversityS-58183 LinkOping, SwedenTelephone +46 13282676elnail: lcsti(Wida, liu.seAbst rac tThis paper describes an algorithm for unifying dis-junctive feature structnres.
Unl ike previous algo-rithms, except Eisele & l)6n'e (1990), this algorithmis as fast as an algorithm withont disjunction whendisjunctions do not participate in the unification, it isalso as fast as an algorithm handling only local dis-junctions when there are only local disjunctions, andexpensive only in tile case of unifying fnll disjunc-tion.
The description is given in the f iamework ofgraph unification algoritbnls which ulakes it easy toimplement as an extension of such an algorithm.1 In t roduct ionDis junct ion is all important extension to featurestructure languages since it increases the compact-uess of the descriptions.
The mmn problem with in-c luding d is junct ion in tile structures is that theunification operation becomes NP-complete.
There-lore there have been many proposals on how to uni-fy disjunctive feature structures, the most importantbeing Kart tunen's  (1984) uni f icat ion with con-straints, Kasper's (1987) unification by successiveapproximation, Eisele & D0rru's (1988) value unifi-cation and lately Eisele & D0rre's (1990a, b) unifi-cation with named disjunctions.
Since Kasper's andEisele & D0rre's algorithms eem to be more gener-al and efficient han Karttunen's algorithm I will re-strict my discussion to them.hi Kasper's algorithin the structures to be unifiedare divided into two parts, one that does not containany disjunctions and one that is a conjunction of alldisjunctions in the structure.
Tile idea is to unify thenon-disjunctive parts first and then unify the resultwith the disjunctions, thus trying to exclude as manyalternatives as possible.
The last step is to compareall disjunctions with each other, making it possibleto discard further alternatives.
Atis this comparisonthat is expensive.
The algorithm is always expensivefor disjunctions, regardless of whether they coutainpath equivalences or not and independent of wheth-er they are affected by the unification or not.
This isdue to the representation, where all disjunctions aremoved to the top level of the strncture, which meansthat larger parts of the structures are moved into thedisjunctions and must be compared by the algo-rithm.
Carter (1990) has made a development of thisalgorithm which improves the efficiency when nsedtogether with bottom-up arsing.Eisele & D01Te'S (1988) approach is based on thefact that unification of path equivalences should re-turn uot only a local value, but also a global valuethat affects some other part of the struetm'e.
Theirsolution is to compute tbe local value and save tileglobal value a~s a global Jesuit.
The global resultswill be unified with the result of the first unification.This new unification can also generate a new globaldisjunction so that the unification with global resultswill be repeated until no new global result is gener-ated.
This solution generates at least one, but ottenmore than one, exUa nnification for each path equiv-alence.
Thus, tile algorithm is always expensive forpath equivalences, regardless of whether they arecontained inside disjuncttous or not.Tbe approach taken by Eisele & D0rre (1990) issimilar to file approach taken in tills paper.
They use'nmned disjunction' (Kaplan & Maxwell 1989) andone of their central ideas i.e.
to use a disjunction asthe value of a variable to decide when the value isdependent on the choice in some disjunction is simi-itu" to the way of unifying variables in the presentpaper, ltowevcr, they use feature terms for repre-setmug the structures and their algorithm is de-scribed by a set of rewrite rules lot feature terms.This makes the algorithm different from algorittunsdescribed for graph unification.What is special with the algorithm in the presentpaper is filat it is1.
As efficient as au algorithm not handling disjunc-tion wlleu the participating structures do not con-tain any disjuuclions.2.
As efficient as an algorithm allowing only localdisjunctions when the participating structuresonly contain such disjunction.3.
Expensive only when non-local disjunction is in-volved.The description is given in a way that makes thealgorithin easy to implement as an extensron of agraph unification algorithm.2 The  FormulasFeature structures are represented by fornlulas.
Thesyntax of the formulas, especially the way of con-structing complex graphs, is chosen so as to get aclose relation to feature st~ uctmes.
This also makesit easy to construct a unification procedure s~milar toACTES DE COLING-92, NANTES.
23 28 AOt';r 1992 116 7 PROC.
O1: COLING-92.
NANTES, AUG. 23-28, 1992graph unification and give the formulas a semanticsbased on graph models.
For disjunction a generali-zation of Kaplan & Maxwell 's (1989) 'named dis-junct ion '  is  used .
The i r  idea  is to g ive  thedisjunctions names so that it is possible to restrictthe choices in them.
Kaplan and Maxwell use onlybinary disjunctions, and if the left alternative in onedisjunction is chosen the left alternative in all dis-junctions with the same name has to be chosen.
Inthis paper I do not restrict he algorithm to binarydisjunctions.
Instead of g iv ing the disjunction aname I give each alternative a name.
Alternativeswith the same name are then connected so that ifone of them is chosen we also have to choose all theothers.We assume four basic sets A, F, X and E of atoms,feature attributes, variables and disjunction switchesrespectively.
These sets contain symbols denoted bystrings.
They are all assumed to be enumerable andpmrwise disjoint.
From these basic sets we definethe set S of feature structures.
S contains the follow-ing structures:?
T : no information?
.L : failure?
a fo ra l laE  A :a toms?
x for all x E X : variables?
\[ft:sl ..... fn:sn\] for anyf  i E F, s i E S, n > 0 suchthat fr- ~ for i~j: complex feature slructure?
{ot :S l , .
.
.
,On:Sn}fOranyoiE  )2, s iE S, n20such that of,-~crj for i~j : disjunctionA formula is defined to be a pair (s, v) where s is afeature structure and v:X- )S  a valuation functionthat assigns tructures to variables.
We demand thatthe formulas are acyclic.An example of a formula is given in figure 1.
Var-iables are denoted by using the symbol # and anumber.
The same formula is also given in matrixformat which will be used to make the exampleseasier to read.
(\[a: \ [e :#1\ ] ,b :3 ,c :# l \ ] ,  {(#1,  \ [d :4 \ ] )}Figure 1We can observe that according to this definflionformulas are not unambiguously determined.
Thesame formula can for example be expressed withdifferent variables.
There is also nothing said aboutthe value of the valuation function v for variablesnot occurring in the formulas.3 SemanticsThe semantics given for these formulas is similar tothe one given by Kasper & Rounds (1986) for theirlogic of feature structures.
This logic is modified inthe same way as in Reape (1991) to allow for theuse of variables instead of equational coustraints asused by Kasper and Rounds.
As Kasper and RoundsI wil l  use a graph model for the formulas whereeach formula is satisfied by a set of graphs.
I wil luse b to denote the transit ion function betweennodes in the graph.
We also need to define a valua-tion to describe the semantics of variables.
Given agraph a valuation is a function V:X-->N.
By thisfnnction every variable is assigned a node in thegraph as its value.Satisfaction is defined by the following rules.
Themodel M = (G, V, L) where G is a graph, V a valua-tion and L a subset of the switches occurring in theformula.satisfies a formula at node i iff it fulfils anyof these cases.
1 will use the notion sat(i) if node i inthe graph satisfies a formula.?
M sat(i) {T, v) for all v?
M sat(i) ( t ,  v) for no v?
M sat(i) (a, v) iff node i in G is the leaf a E A?
M sat(i) (x, v) iff V(x)=i and M sat(i) (v(x), v)?
M sat(i) (\[fl:Sl ..... fn:Sn\], v) iff for all k = 1 ... n~(if~z)=jk and M sat(jr :) (s k, v)?
M sat(i) ({ol :s  I ..... On:Sn}, v) iffprecisely one ofo t ... o n is in L and M sat(i) (s k, v) for k such thatOkE LThese rules correspond to the usual sansfactiondefinitions for feature structures.
The snbset ofswitches L forces us to choose exactly one alterna-tive in each disjunction and the model should satisfythis alternative.4 Un i f i ca t ionin this section I will define a set of rewrite rules forcomputing the unification of two formulas.
1 willstart by inu'oducing the operator ^ into our formu-las.
The syntax and semantics is given by the fol-lowing rules:?
M sat(i)fst/,fs;~ i f f fs I andfs 2 are formulas and Msat(i) fs  I and M sat(i) fs 2?
M sat(i) (SlAS2, v) i f fM sat(i) (s 1, v} and M sat(i)<s2, v)The operator ^ can be viewed as the unificationoperator.
By the definition we can see that it is inter+preted as a conjunction or intersection of the twoparticipating formulas, which is the normal interpre-tation of unification.
The task of unifying two for-mulas is then the task of rewriting two tormulascontaining ^ into a formula not containing A. Herewe can note that since a formula is not unambigu-ously determined the unified formula is not unique.Actually there is a set of formulas that all have theAerE.s DE COLING-92, NANTES.
23-28 AOt~'r 1992 l 1 6 8 PROC.
OF COLING-92, NANTES, AUG. 23-28, 1992same model as the unification of the l"ormulas.
Theaim here is to compute one of these formulas as arepresentative for this set, and thus a representativefor the unification of fs  t and fs 2.
The rewrite rulesgiven below correspond to the unification algorithmfor formulas not containing disjunction.1, (s t, vl)A(s 2, v,~) ~ (slAs 2, v) if v I and v 2 are dis-joint and v(x)=vl(x) for all x in v 1, v(x)=vHx) forall x in v),.2.
(~/~2,  v )~(s2~ 1, v)3.
(T,~, v) ~ (s, v)4.
(aAa, v) r. (a, v) where aEA5.
(a/49, v) r.
(?, v) where ae:b and a,bEA6.
(a^lfl:Sl..~,:sn\], v) ~ (.1_, v) where a6 A7.
<_t~,, v> ~ <?, v>8.
<xm, v> - <x, v~>where (v(x)^s, v) ~ (s t , Vl) and xeX, v;~(x)=s Iand v2=v I for all other variables9.
(\[fll:Sll"fln:Sln\]m\[f21:s21"f2m:SemI, v)~ (s, v e )where s is tim complex feature structure contam-ing:fl,:suj for any j  such that fLr~fek for all k-~-~f)):s)i for any j  such that/2f,-eflt_ _ for all kf lj.
'S3i for any j,k such that f u=f,~ t where (s ljAs2t,V(F1) ) ~ (S3i, Vi)and i describes ome enumerauon of the result-ing formulas vo=v and <x3p, vp) is the last of timformulas.The first rule is a kind of entry rule and can be in-terpreted as saying that it is possible to unify twoformulas if the variables occumng within them aredisjoint.
"l~le second rule says that unification iscommutative, and are used to avoid duplicating theother rules.
The next rule says that T unifies witheverything.
Rules four to six says that an atom onlyunifies with itself and becomes failure when unifiedwith some other atom or a complex structnre.
Theseventh rule says that unifying failure always yieldsfailure.
The eighth rule deals with unification of var-iables.
Here we have to start with unifying the valueof the variable with the other saucmre.
This unifica-tion gives a new pair of feature structure and valua-tion function as result where the new valuationfunction contains the changes of variables that havebeen made during this unification.
The result of theunification of a variable is the pair of the variableand the new valuation function where the value ofthe variable is replaced with the unified one.
Rulenine deals with the umfication of two complex fea-ture structures and says that the result is the struc-ture obtained by unifying the values of the commonattributes of the two structures and then adding allatmbutes that occurs in either of the structures to theresult.Figure 2 gives an example that illustrates whatmodifications that must be made to the rewrite rulesto be able to handle unification of disjunction.
Uni-fying a disjunction is basically unifying each of itsalternatives.
But the exmnple also shows what mnsto{ol.2:#libel ^I ?:\[)'lb..
#1I (/:Iib:o1:02:#1#1C.'
I\[et \[a.
31Figme 2happen if a variable occurs within the disjuncUon.The value of the variable is global sitice it can affectparts of the structure outside the disjunction.
There-fore this value must be dependent on what alterna-tive that is chosen m the disjunction.
This is done byrepresenting the value of the variable as a new dis-junction where we only choose the unified value ifthe alternative o 7 is chosen, qb express this in therewrite rule we index all rules by the list of switchesthat are Uaversed in the formula.
This is expressedby replacing the m with __x in all rules where X is alist of the switches passed to reach this point of theunification.
We also need to split rule 8 into tworules depending on if any disjunctions have beenpassed to reach the variable.
The new rules are giv-en below and we assume that the switches occurringin each formula are unique.8.a(xm, v) ~0 (x, v~_:{'.st))where (v(x)^s, v) ~ (s t, v 1) x~X, vHx)=s I andv2=v I for all other variables8.b(x,~', v) ~ lot .... 'O(x, v~) ,where (v(x)^s, v) ~ol  ... om (si, Vl), xCX,vJx)={ol :l o2: I...\[ o~:sl o .
.
.
.
.
:v(x)... IOnow2: v(x) } cr new I: v(x) }, v~ = v I for all other vari -ables and Onewi s a switch name not used before.10.
({Ol:Sll...On:Sln}AS, v).----X,~ ({Ol:S21...Crn:S2n }, Vn)where (Sli^S, v(i 1)) i~?lu'~ (s2i, vi) and v o =vIn StrOmblick (1991, 1992) these rewrite rules areproved to compute the unification of two foimulas.5 Discuss ionThe syntax and semantics of the formulas are verys imi lar  to what is g iven in Reape (1991 pp 35)which is a development of the semantics given inKasper & Rounds (1986) that allows the use of vari-ACrEs DE COLING-92, NANa~2S, 23-28 XOt;r 1992 l 1 6 9 PROC.
OF COLING-92, NANTES, AUO.
23-28, 1992ables to express equational constraints.
The differ-ence is that I use formulas of the form \[/l:sl...f,:sn\]instead of an ordinary conjunction and that we usenamed isjunction.
This restricts the syntax of theformulas omewhat and makes them closer to ordi-nary feature structures.
The restricted syntax is alsothe reason why we need to include a valuation func-tion in the formulas.It is easy to represent the formulas as ordinary di-rected acyclic graphs where variables are represent-ed as references to the same substructure in thegraphs.
If we think of the formulas as graphs it isalso easy to compare the rewrite rules 1-9 abovewith an ordinary graph unification algorithm.
Doingthis we can conclude that each of the rewrite rolesthree to nine corresponds toa case in the unificationalgorithm.
The only difference is that when varia-bles are represented asreentrant subgraphs we neverhave to look-up the variable to find its value.
Themain advantage with defining unification by a set ofrewrite rules is that the procedure can be proved tobe correct.6 Detection of failure andimprovementsThe problem with the rewrite rules is that theysometimes produces formulas which have no model.Such formulas must be detected in order to knowwhen the unification fails.
As long as the formulasonly contain local disjunction this is not a problemand it is easy to change the rewrite rules in order topropagate a failure to the top level in the formula.The ninth rule is, for example, changed to return (.
?,vp) whenever any of the values of the attributes inthe resulting formula is fail.When nonlocal disjunction is included we mustfind some of keeping track of which choices ofswitches in the disjunctions that represent a failure.This can be done by building a tree where the pathsrepresents possible choices of switches and the leafnodes in the tree contains a value that is false if thischoice represents a subset of switches for which theformula has no model and true otherwise.
Figure 3shows an example of a formula and its correspond-ing choice tree.
To reach the leaf b in the tree theswitches 0.1, 03, and crn have been chosen and or2,0.4, and 03 have not.
So 0.3 is both chosen and notchosen and the value of this leaf must be false.
Con-tinuing this reasoning for the other paths in the treewe could see that the leafs b, e, and f must have thevalue false and the other leafs must have the valuetrue.
If some value of an alternative is .1_ the corre-sponding leafs in the choice tree must be false.
Ifwe, for example assume that the value of or4 is failwe must assign false to the leafs c,f ,  and g.Choice trees can be built ones for each formulaand merged during the unification of formulas.
Abetter solution is to only build the choice trees whenthey are needed, i.e.
when a disjunction alternataveO2:#1 { O3: ...
}On.
'{ O3: ~l }04:03 f:?," true a03.
"~n "",~- false Ool ~- ./"  o4 "~- true e/~\ 03 ~" trlte d,,2 "C~" '~-* - I  alse,.
.
03 ._~- false fon" J'~ true gFigure 3where the disjunction shares ome switch name withanother disjunction fails.
If this is done we onlyhave to do the expensive work when really neededwhich is when we have failure in a non-local dis-junction and achieves a better performance ofthe al-gorithm for all other cases.Str6mhiick (1991, 1992) discusses how the choicetree is best used.
The papers also discuss how thechoice tree can be used to remove failed alternativesfrom a formula without destroying the interpretationof the formula.
The main idea here is to see whatswitches that must be chosen to reach each disjunc-tion alternative in the formula.
For this set ofswitches we find all leafs in the choice nee that canbe reached if these switches are chosen.
If all theseleafs are false the alternative should be removed.For example, if we assume that the value of 0.4 infigure 3 is fail and that we have assigned false to thecorresponding leafs in the choice tree, we can alsosee that there is no way of reaching a leaf with thevalue true if we have to choose tin.
In this case wecan as well remove both 04 and on from the featureStrUCture.The two papers mentioned above also discussvmious improvements that can be made in order toget a more efficient algorithm.
Most important hereis that we can build only parts of the choice tree andthat the notion of switches for a disjunction can beextended to allow sets of switches in order to avoidcreating too many new disjunctions.7 Imp lementat ionThe algorithm has been implemented in XeroxCommon Lisp and is running on the Sun Sparcsta-tions.ACTES DE COLING-92.
NANTES, 23-28 AOt~'r 1992 1 l 7 0 PROC.
OF COLING-92, NANTES, AUG. 23-28, 19928 Complex i tyTo analyze the complexity of this algorith m 1 willlook at threc cases.
If we assume that there are nodisjunctions in the formulas the procedure can beimplemented almost linearly.
If we have local dis-junction in the formulas, i.e.
disjunctions which donot contain variables and which not are connectedby switch nantes, the total complexity becomes ex-ponential on the maximum depth of disjunctions oc-curring within each other.
For the third case we haveto add the complexity for the removal strategieswhen alternatives have failed.
The complexity forthis procedure is also exponential in the size of a",where a is the total nnmbcr of alternatives OccutTingin the formulas.
For a more complete discussion ofthe complexity see StrOmhack (1991, 1992)When considering complexity one must remem-ber that the second case will only be pcrforn~edwhen there are disjunctions inthe formula nd whenthese disjunctions are actually affecWA by the unifi-cation.
Disjunctions in some subpart of the formulanot affected by the unification never affect the com-plexity.
It is also reasonable toassume that m mostcase.q when a disjunction really participates in theunification, some of its alternatives will be removeddue to failure.
The same thing holds for the lastcase; it will only be performed when some global al-ternative has failed.
This means that this procedurecan at most be performed once for each ordinary al-ternative in the initial formulas.Comparing this to the other proposed alternativeswe can see that Kasper's (1987) algorithm has a bet-ter worst case complexity (2a/2).
On the other handthis complexity holds for all disjunctions in thestructure regardless of whetlmr they arc ',fffected bythe unification or not.
The algorithm by Eisele &D0rre (1988) has a similar worst case complexity.The disadvantage h re is that this 'algorithm is ex-pensive ven if the structures do not contain any dis-junctions at all.
The third algorithm (Eisele & D~3rre1990a, b) will also be NP-complete inrite worst caseand will probably have a stinilar performartce com-pared to the algorithm descritxxl in this paper.9 ConclusionThis paper describes an algot~ithm for unifyingdisjunctions which calls for as little computation aspossible for each ease.
Disjunctions only affect thecomplexity when they directly parucipate ~ areaffected by the unification, which is the only casewhen we expand to disjunctive normal form.
Themost expensive work is done only when there is afailure in a disjunction which affects ome other partof the structure.
The only algorithm that shows im-ilar complexity is the algorithm proposed by Eisele& D0rre (1990).
However the description given byEisele and DOne is harder to relate and implementas a graph unification algorithm.
This paper showsthat it is possible to use Snililar ideas together withgraph unification.
The de,,;cription given here is fair?ly easy to implement as mi extension of a graph uni~ficatiou algorithm.AcknowledgementsThis work is part of the project I)ynamic !,anguagetlndcrstanding suppmted by the Swedish Councilfor Research in the Itumauities and the SwedishBored for Industrial and "l~echnical Development.
1would also like to thank Lars Ahrcnberg and "lhreLaugholln for valuable comments on this work.Re ferencesCrater, David (1990).
Efficient Disjunctive Unificationfor Bottom-Up l'msmg.
Proe.
13th International Confer-ence on Computational Linguistics, vol.
3, pp 70-75.Eisele, Andreas and Jochen D0rre (1988).
Unification ofDisjunctive Feattne Descriptions.
Proc.
26th AnnualMeeting of the Association fi~r Computational Linguis-tics, pp 286-294.Eisele, Andreas and Jochen DOtre (1990a).
Disjt/r~ctiveUnification.
IWBS Rep()rt 124, IWtIS, IBM Deutsehlat~d,W.
Gemmny, May 1990.Eisele, Andreas eald Jochen DOne (19tX)b).
Feature Logicwith Disjtmctive Unification.
Proe.
13th InternationalConference on Compntatiomll Linguistics, vol.
2, pp 100o105.Kalttnnen, Lauri (1984).
Featttres and Values.
lOth Inter-national Conference on Computational l dnguistics122ndAnnual Meeting of the Association for ComputationalLinguistics, Stanford, California, pp 28-33.Karttenen, Lauri (1986).
D-PATR: A Developnlent EaWl-ronment for Unification Based Grammars.
Proc.
llth In-ternational Conference on Computational Linguistics,Bonn, Federal Republic of Gemmny, pp 74~80.Kaplall, Ronald M. mid John T. Maxwell it (1989).
AnOverview of Disjunctive Constraint Satisfaction.
Proc.International Workshop on I'arsing Technologies, Pitts-bulgh, Pennsylvania, pp18-27.Kasper, Robert T. (1987).
A ihtihcatien Method for Dis-junctive Feature Descriptions.
25th Annual Meeting &the Association for Computational Linguistics.
pp 235-242.Reape, Mike (199 l).
An Introduction to file Semantics ofUnification-Based Grmnmar Formalisms.
DeliverableR3.2.A DYANA - ESPRIT B~ic Research Action BR3175.Rotmds, Willianl C. and Robert Kasper (1986).
A Com-plete Logical Calculus for Record StmcttHes Represent-ing Linguistic Information.
Proe.
Symposium on Logic inComputer Science, Cambridge Massachusetts, pp 39 - 43Str0mback, Lena (1991).
Unifying Disjuucti ve FeatureStructures.
Teclmical Report LiTH-1DA-R-91-34, l~e-partmeslt ofComputer and lnfommtion Science,LinkOping Univelsity, Link0pixlg, Sweden.Str~,mbitck, Lena (1992).
Studies in Extended Uni\]icationFormalisms for Linguistic Description.
Licentiate thesis.Depmtment of Compute; and hfformation Scie~:e,Link6ping University, LinktJping, Sweden.ACRES Ul!
COLING-92, NANTES, 23-28 AO(7l' 1992 l 1 7 1 PROC.
OF COLING-92, NANTES, AUG. 23-28, 1992
