Compiling and Using Finite-State Syntactic RulesKimmo Koskenniemi, Pasi Tapanainen and Atro VoutilainenUniversity of HelsinkiResearch Unit for ComputaHonal LinguisticsHaUituskatu 11SF-O0100 I..lelsinkJF~andAbstractA language-independent framework for syntac-tic finlte-state parsing is discussed.
The articlepresents a framework, a formalism, a compilerand a parser for grammars written in this for-realism.
As a substantial example, fragmentsfrom a nontrivial finite-state grammar of Eng-lish are discussed.The linguistic framework of the presentapproach is based on a surface syntactic tag-ging scheme by F. Karlsson.
This representa-tion is slightly less powerful than phrasestructure tree notation, letUng some ambigu-ous constructions be described more concisely.The finite-state rule compiler implements whatwas briefly sketched by Koskenniemi (1990).
Itis based on the calculus of finite-statemachines.
The compiler transforms rules intorule-automata.
The run-time parser exploitsone of certain alternative strategies in perform-ing the effective intersection of the rule autom-ata and the sentence automaton.Fragments of a fairly comprehensive finite-stategranmmr of English axe presented here, includ-ing samples from non-finite constructions as ademonstration of the capacity of the presentformalism, which goes far beyond plain disam-blguation or part of speech tagging.
Thegrammar itself is directly related to a parserand tagging system for English created as apart of project SIMPR I using Karlsson's CG(Constraint Grammar) formalism.1.
IntroductionThe present finite-state approach to syntaxshould not be confused with eg.
attempts tocharacterize syntactic structures with regular1.
Esprit 11 project No.
2083, Structuredinformation Management: Proceaalng andRetrieval.Afn'Es DE COLING-9Z NANTES, 23-28 Aou'r 1992phrase structure grammars.
Instead of usingt rees  as  a means of representlng structures, weuse syntactic tags associated with words, andthe finite-state rules constrain the choice oftags.
This style of representaUon was adoptedfrom Karlsson's CG approach and an earlierFinnish parser called FPARSE (Karlsson 1985,1990).The current approach employs a shallow sur-face oriented syntax.
We expect it to be usefulin syntactic tagging of large text corpora.
Infer-mat/on retrieval, and as a starting point formore elaborate syntactic or semantic analysis.1.1 Representat ion  o f  sentencesWe represent the sentences as regu/ar expres-sions, or equivalently, asfinite-state networks,which list all combinatory possibilities to inter-pret them.
Consider the sentence:the program runs.A (simplified) representation forthe morpholog-ically processed but syntactically unanalyzedsentence as a regular expression could beroughly as follows:0@the DEF ART\[8 I @/ I 8< I 8>\]\[ \[program N NOM SG \[eSUBJ \[ 8OBJ I8PREDC} \] 1\[Drogram V PRES NON-SG3 8FINV 8MAINV\] i\[program V INF\]\]\[8 I 8/  I 8< I @>\]\[ \[run V PRES SG3 @FINV 8MAINV\] I\[run N NOM PL \[eSUBJ I 8OBJ I 8PREDC\]\]\]88Here 8S represents a sentence boundary, @ aword  boundary, 8/ an ordinary clause hound-amy, @< a begi,Lrflng of a center embeddedclause, and @> the end of such an embedding.Square brackets '\[...r are used for grouping,and vertical bars' I' separate alternaUves.
Eachword has been assigned all possible syntactlcroles It could assume in sentences (eg.
0SUBJ1 5 6 PROC.
oF COLING-92, NANTES.
AUG. 23-28, 1992or @OBJ or ~PREDC).
Note that between each twowords there might be a clause boundary or aplain word boundary.
The regular expressionrepresents a number of str ings (some 320)which we call the readings of the (unanalyTed)sentence.
The following is one of them:@8 the DEF ART 8/program V PRES NON-SG3 8FINV 8MAINV 0run N NOM PL 8PREDC 8@This one is very ungranmmtlcal,  though.
It willbe the task of the rule component to excludesuch, and leave only the grammatical  one(s)intact:88 the DEF ART 8program N NOM SG 8SUBJ @run V PRES SG3 8FINV 8MAINV 88Note that in this f ramework,  the parsing doesnot build any  neW structures.
The  granu-natiealreading Is already present in the input repre-sentation.1.2  The  ro le  o f  ru lesThe task for the rules here is (as is the ease withthe CG approach by Karlsson) to:?
exclude those interpretations of ambiguouswords which are not possible in the currentsentence,?
choose the correct ype of boundariesbetween each two words, and?
detern~Ine which syntactic tags are theappropriate ones.Rules should preferably express meaningfulconstraints which result  in the exclusion of allungramnmtical lternatives.
Each rule shouldthus be a grammatical statement which effec-tively forbids certain tag combinations.Rules in the CG formalism are typically dedi-cated for one of the above tasks,  and  they areexecuted as successive groups.In finite-state syntax, rules are logically unor-dered.
Furthermore, In order to achieve wordlevel disambiguation, one typically uses ruleswhich describe the occurrences of boundariesand syntactic tags in grammat/ca//y correctstructures rather than indicating how theincorrect interpretations can be identified.Thus, the three effects are achieved, eve** ffindividual finite-state rules cannot be classifiedinto corresponding three groups.1.3 Rule automataFinite-state rules are represented using regularexpressions and they are transformed intofinite-state automata by a rule compiler.The whole finite-state grammar consists of a setof rules which constrain the possible choices ofword Interpretations, tags and boundaries toACRES DE COLING-92, NAN'D!S, 23-28 AO6T 1992only those which are considered grammatical.The entire grammar Is effectively equivalent tothe (theoretical) intersection of all individualrule automata.
However, such an intersectionwould be impractical to compute due to Itshuge size.The logical task for any finite-state parser in thecurrent approach is to compute the intersec-tion of the unanalyzed sentence automaton andeach rule automaton.
Actual parsing can bedone in several alternative ways which areguaranteed to yield the same result, but  whichvary in terms of efficiency.2.
The finite-state rule formalismTapanainen (1991 )has implemented a compilerand a parser for finite-state gramnmrs.
Thecompilation and the parsing is based on a Com-mon Lisp finite-state program package writtenby him.
Tapanainen also reports in his Master'sthesis (1991) new methods for optimizing theresult of the compilation and improving thespeed of parsing.The current rule compiler has only few built- inrules or definitions.
Instead, It has a formalismfor defining relevant expressions and new ruletypes.
There are two types of def init ions forthis purpose.
The first one defines a constantregu lar  express ion  wh ich  can  la ter  on bereferred to by its name:name = expressionISome basic notat ions are defined in th is  waysuch as the dot which stands for a sequence oftokens within a single word:?
= \ tOo  I o I o /  I O< I o>\ ]1The backs lash  ' \ '  denotes  any sequence oftokens not containing occurrences of its argu-ment  (which here l is ts  all types of word andclause boundaries).
A variat ion of the dot is adot -dot ' .
. "
which represents  a sequence oftokens within the same clause:?
<> - o< \[- I ?
I Q/ I *  ~>;?
.
= \ [ -  I ?
I ~<>\]*sThe second type of definitions has parameters,and it can be used for expressions which varyaccording to their values:name(paranb, .., param,) - expressionlThe expression is a regular expression formu-lated using constant terms and the parametersymbols param i.
An example of this type of def-init ions is the loll@wing which requires everyclause to be of a given form X:c lause(X)  - \ \[ \ [~  I ~/  I 0<\]- iX  I - .
.
\ ]\ [~> I O /  I O0\ ] \ ]1 5 7 PROC.
OF COLING-92, NANTES, AUG. 23-28, 1992The formula forbids subsequences  which arec lauses but  not of form x (the middle term iseasier to understand as \[ -x & .. \]).Exper ience  wi th  wr i t ing  ac tua l  large sca legrammars  with in the f in l te-state f rameworkhas indicated that  we need more flexibility indefining ru les  than  what  was first expected.This flexibility is achieved by having one verygeneral rule format:expressionlThe expression simply defines a constraint forall sentences, ie.
it is already as such equiva-lent to a rule automaton, Forbidding unwantedcombinations or sequences, uch as two finiteverbs within the same clause, can be excludedcg.
by a rule:UNIQUE (FINV)Here, UNIQUE Is a definit ion which has  beenmade using the formalisms above, and is avail-able for the grammar writer.
Using the UNIQUEdefinition, one can express general principles,such as that there is at most one main verb, atmost one subject etc.
in each clause.Most of the ac tua l  ru les  st i l l  use  the r ightarrow format:express ion ->le f t -context  _ r ight-context;All three parts of the rules are regular expres-sions.
The rule requires that any occurrence ofexpress ion must  be surrounded by the givencontext.3.
English finite-state grammarThe Engl ish f in ite-state grammar  d iscussedhere was written by Voutilainen.
The grammaritself is much more comprehensive than whatcan be descr ibed in th is  paper.
Although thegrammar  already covers most  of the areas  ofEnglish grammar that it is intended to cover, itis still far from complete in details.
The gram-mar, when complete, will be part  of Voutilai-nen's PhD dissertation (forthcoming).
This sec-t ion presents  ome genera l  pr inc ip les  fromthat  grammar, and a few examples from morecomplex phenomena.3.1 Goa ls  of  the grammarThe present  g rammar  has  many goals  andcharacter ist ics  s imi lar  to those of the SIMPRConstraint Granmmn?
the ability to parse unrestricted runn ingtexts with a large dictionary,* concrete, surface-orlented description iterms of dependency syntax.The current  f in ite-state syntax uses,  indeed,the same ENGTWOL lexicon as the SIMPR CGsyntax (Karlsson et al 1991).
The set of syn-tac t i c  features  are adopted  f rom the  CGdescr ipt ion a lmost  as such with a few addl-tions.In the present f inite-state approach, however,we aim at:?
more general and linguistically motivatedrules (fewer, more powerful and generalrules in the grammar),?
more accurate treatment of Intrasententialstructure (three types of clause boundariesinstead of one), and?
a satisfactory description of certain complexconstructions and sentence structures.The present formal ism can achieve somewhatmore general and powerful rules than the cur-rent CG formalism through tile use of full reg-ular expression otation.3.2 C lause  boundar iesSome power and accuracy is gained through acommitment  o use  a notat ion  for c lauseboundar ies  which is exact in defining whenwords belong to the same or a different clause.The two formal i sms are equiva lent  in manycases:@@ The dog chased a cat@/which ate the mouse @@The more elaborate clause boundary mark ingmakes  a difference in case of center-embed-ding:@@ The man @< who came first @> got the job @@This convent ion indicates that  there are twoclauses:The man .. got the job.. who came first ..3.3 Const i tuent  s t ructureHead-modifier relations are expressed (hereand in the CG) with tags, eg.
:a DET @DN>big A @AN>cat N @SUBJThe head of  a NP is tagged as a ma jor  const i tu -ent, here as a subject.
In case the const i tuentis a coordinated one, each of the coordinatedhead gets the same tag:John's N GEN @GN>brother N NOM SG @SUBJand COORD @CCaunts N NOM PL @SUBJThe genitival at t r ibute O>GN modif ies at leastthe next  noun  (bro ther )  but  poss ib ly  a lsosome further ones at the same level of coordi-nation (aunts).Aclms DE COLING-92, NANTES, 23-28 AOUT 1992 1 5 8 Foot.
OF COLING-92, NANTES, AUG. 23-28, 19923.4 An exampleLet us  consider the following (classical) sen-tenceTime flies like an arrow.The input to the finite-state syntax comes fromthe ENGTWOL morpholog ica l  analyzer  wlthsome modifications and extensions in the setsof features associated with words:8O\[\[time N NOM ~G\[@<P I 8NN> I @APP 18PCOMPL-O/N/ -F  I8PCOMPL-O/N I @PCOMPL-S /N/ -F  I8PCOMPL-S /N  I 8 I -OBJ / -F  I 8 I -OBJ  I@OBJ / -F  { 8OBJ I 8SUBJ / -F  { @SUBJ  \]\] I\[time <Eva>\[\[V IMP VF IN 8+FMAINV\] I\[V INF \ [8<NOM-FMAINV IO-~%~AINV/-F { 8-FMAINV\] \] \] \] \]\[8 I 8/ I ~< I 8>\]lilly <Eva> <SV> v PRES SG3 VF IN  8+FMAINV\]\[fly N NOM PL\[8<P { 8APP I 8PCOMPL-O/N/ -F  {@PCOMPL-O/N  I OPCOMPL-S /N / -F  l8PCOMPL-S /N  I @I -OBJ / -F  { 81-OBJ  I8OBJ / -F  I 8OBJ  I 8SUBJ / -F  I 8SUBJ\] \]\]\[8 I 8 /  I @< I @>\]\[\[like PREP \[O<NOM I 8ADVL I 8ADVL/INV\]\]\[like N NOM SG\[8<P i @NN> I @APP { 8PCOMPL-O/N/ -F@PCOMPL-O/N  { 8PCOMPL-E/N/ -F  I8PCOMPL-S /N  { 8 I -OBJ / -F  { @I-OBJ  I8OBJ / -F  I 8OBJ { 8SUBJ / -F  I 8SUBJ\]\[like <SVOC/A> <Eva> <SV> V\[ \ [SUBJUNCTIVE VF IN 8+FMAINV\] I\[IMP VF IN  @+FMAINV\] I\[INF \ [@<NOM-FMAINV { 8 -FMAINV/ -F  I@-FMAINV\] {\[PRES NON-SG3 VF IN @+FMAINV\] \] \] \]\[8 ) 8/ } 8< I 8>\]\ [an <Indef> DET CENTRAL ART SG 8DN>\]\[@ I 8 /  I @< I 8>\]\[\[arrow V \[lIMP VF IN  @+FMAINV\] {(INF \ [8<NOM-FMAINV l8 -FMAINV/ -F  I 8-FMAINV\] \]\[arrow N NOM SG\[8<P I 8NN> i 8APP I 8PCOMPL-O/N/ -F8PCOMPL-O/N  \[ 8PCOMPL-S /N / -F  I@PCOMPL-S /N  I 8I -OBJ / -F  I @I-OBJ  I8OBJ / -F  I 8OBJ  I 8SUBJ / -F  I 8SUBJ\]\]\]88Th is  smal l  sample  sentence  representat ionconta ins  some 21 mi l l ion readings.Each  syntact i c - funct ion  labe l  s ta r ts  w i th  S.Many of  the  common labe ls  l ike ~SUBJ havebeen  rep laced by  the  combinat ion  of ~SUBJ / -Fand 8SUBJ  to ref lect the dist inct ion of  subjectsof non- f in i te  const ruct ions  f rom those  of themain  verb.
A s imi lar  d ist inct ion is made in theverbal entries.The grammar  is commit ted  to exclude onlythose  read ings  wh ich  are ungrammat ica l .ACRES DE COLING-92, NANTF~, 23-28 AO6T 1992Thus, several readings may pass the rules, inthls case, the following six:i.
88 time N NOM SG 8t~>fly N NOM PL @SUBJ 8like <SVOC/A> <EVa> <SV>V PRES NC~-SG3 VFIN 8+FMAINV 8an <Indef> DET ~ ART SG 8DN> 8arrc~ N NOM SG 8OBJ 882.
88 time N NOM SO 8SUBJ 8fly <Eva> <SV> V PRES SG3 VFIN @+FMAINV @like PREP 8ADVL 8an <Indef> DET CENTRAL ART SG @DN> 8arrow N NOM SG 8<P 883.
88 time N NOM SG 8SUBJ 8fly <s~/o> <SV> V PRES SG3 VFIN @+FMAINV @like N NCt4 SG 8OBJ 8an <Indef> DET CENTRAL ART SG 8DN> @arrow N NOM SG @APP 884.
88 time <Eva> V IMP VFIN @+FMAINV 8fly N NOM PL 8St~J @like <SVOC/A> <SVO> <S~V>V PRES NON-SG3 VFIN 8+FMAINV 8an <Indef> DI~.P CENTRAL ART SG @DN> @arrow N NOM SG @OBJ 8@5.
88 time <55\]0> V IMP VFIN 8+FMAINV 8fly N NOM PL 80BJ @l ike PREP 8<NOM 8an <Indef> DET CENTRAL ART SG 8DN> 8arrow N NOM SG 8<P 886.
88 time <55/0> V IMP VFIN @+FMAINV @fly N NOM PL @OBJ 8like PREP @ADVL 8an <Indef> DET CENTRAL ART SG 8DN> @arrow N NOM SG 8<P @83.5 Overv iew of rulesThe finite-state grammar for English consistsof some 200 rules dedicated for several areas ofthe grammar:?
Internal structure of nominal and non-finiteverbal phrases.
The structure is describedas head-modifier relations, including deter-miners, premodiflers and postmodiflers.?
CoordinaUon at various levels of the gram-mar.?
Surface-syntactlc functions of nominalphrases.The st ructure of noun phrases  is descr ibedusing two approaches together.
A coarse struc-ture is fixed with the mechanism of deflnIUons.It would not be feasible to use that mechanismalone (because it would lead to a context-freedescripUon).
The deflniUons are supplementedwith ordinary finite-state rules which enforcefurther restrictions.1 5 9 PROC.
OF COLING-92, NANTES, AUO.
23-28, 19923.6  Non- f in i te  Const ruct ionsBetween the level of the nominal  phrase and thefinite clause, there is an Intermediary level, thatof non-finite t~nsmtct/ons ( ee Quirk & el.1985).
These constructions resemble nounphrases when seen as parts of the surroundingclause because they act eg.
as subjects, objects,preposition complements, etc., postmodifiers,or adverbials, eg.
:(Wa~ng home} was wearisome.?
She wants  (to come} 1.She was fond of (singing in the dark}.The dog (barking in the corridor} was irritable.
('fired by her journey}, she fell asleep.Internally, non-finite constructions are likefinite c lauses because the main verb of a non-finite construction can have subjects, objects,adverbials etc.
of Its own.Both finite and non-finite constructions have averbal skeleton, which in a finite constructionstarts with a JO~e verb and ends with the firstmain verb.
The finite verbal  ske letons In thefollowing examples are underlined:Shs sinas.Will she ~ ?She would no t have been singinq unless ..A non-finite verbal skeleton starts  with certaink inds of non-finite verb (to+infinitive.
presentparticiple, past  participle, non-finite auxiliary)and ends with the first main verb to the right:It is easy lode it.~red by her journey, she went into her room.They knew it all, ~ there before.Non-finite verb chains do not contain center-embedded verbs,  whereas  a non-f inite con-s t ruc t ion  can be center -embedded wi th in  afinite verb chain only ff it is (a part  off a nomi-nal phrase:Can \[shooting hunters} be dangerous?Can men (shooting hunters} be dangerous?The use of syntact ic tags instead of a hierar-chical  t ree-s t ructure  forces us  to a very fiatdescript ion of sentences.
This might  result  inproblems when descr ibing c lauses  with non-finite const ruct ions  with a smal l  set of tags,eg.
:The boy \[kicking @MAINV\] the \[ball @OBJ\]\[saw @MAINV\] the \[cow @OBJ\].A useful  concept in clause-level syntax is theun iqueness  principle.
We wlsh  to say,  forInstance, that  In a clause, there is at most onel.
The~ is another way to interpret thissentence without any non-finite construc-tions by including 'to come' in the finite verbchain.
We have adopted the current inter-prctation in order to achieve certaing lin-guistle generallzaUona.
(possibly co-ordinated) subject, object, or pred-icate complement.
Un iqueness  holds for thefinite clause, and each non-finite constructionseparately, and this will be very difficult o for-mulate,  ff we use same tags for both domains(as in the above example).The syntactic tags as given In the f inite-stateversion of ENGTWOL capitalize heavily on non-finite construct ions in order to overcome thisproblem:The boy \[kicking @MAINV/-F\] the (ball @OBJ/-F\]\[saw @MAINV\] the \[cow @OBJ\].Here, the object in the non-finite constructionis furnished with a label different from the cor-responding label used in the finite construc-tion, so there is no r isk of confusion betweenthe two levels.The dupl icat ion  of certa in  labels  for certa incategories Increases the amount  of ambiguity,but ,  on the o ther  hand,  the new ambigu i tyseems to be of a fairly control lable type.
Thedescr ipt ion of non-f in i te const ruct ions  boi lsdown to two subtasks .
One is to express con-straints on the Internal structure of non-finiteconstruct ions;  the other, the control on theirdistribution.In terms of verb chain and const i tuent  struc-ture, non-finite construct ions  resemble finiteconstruct ions .
Their  ma in  difference is thatword order in non-finite constructions i  muchmore rigid.We proceed  w i th  some examples  of ru lesdescribing non-finite constructions.
An infini-tive act ing as ma in  verb in a non-f inite con-s t ruc t ion  is p receded by to  ac t ing  as  anInfinitive marker  or by a subject of a non-finitephrase or by a co-ordinated infinitive.So we wish.
for instance,  the following utter-ances to be accepted:He wants \[to @INFMARK>\] \[go INF @-FMAINV/-F\].She saw \[her @SUBJ/-F\] \[go INF @-FMAINV/-F\].She saw \[her @SUBJ/-F\]\[come INF @-FMAINV/-F\] and \[go INF @-FMAINV/-F\].The constraint is expressed as a rule:I J.n~-ma:l.n/-f .~,\[\[~INFIKiERX> \[@ laOm'l\]*\] J\[leub::l/-~ l<*\] I\[ ltnt'-ma:l.n/-f I1-~* I\]phr-cc\]l  ~_I tems preceded by an exc lamat ion mark  areconstant definitions, t/ - f  signals any constit-uent that can occur In a postverbal position ina non-finite construction.A past  participle as a main verb in a non-finiteconstruct ion must  a lways be preceded by anappropriate klnd of auxi l iary or clause bound-my.Acr~ DE COLING-92, NANTES, 23-28 ^OI~T 1992 1 6 0 Pave.
OF COLING-92, NANTES, AUG. 23-28, 1992For example:\[Having @-FAUXW-FJ \[gone PCP2 @-FMAINV/-F\]home, they rested.This constraint corresponds to a rule:I pcp2-n la ; l .n / -  ~ =>\[lI~r:l.m-aux/-f I lc lb\] taffy1* -_ IThere are further rules for the distribution ofnon-finite constructions with present partici-ples, etc.
Further rules have been written forthe description of the Internal structure of non-finite constructions which, in turn, is fairlystraight-forward.
The overall experience Is thata fairly adequate description of these types ofphenome~m can be achieved by the set of syn-tactic tags proposed above accompanied by amanageable s t of finite-state rules.4.
ImplementationWe need a compiler for transforming the ruleswritten in the finite-state formalism Into finite-state automata, and a parser which first trans-forms sentences into finite-state networks, andthen computes the logical intersection of therule-automata and the sentence automaton.4.1 Compilation of the ru lesThe grammar consisting of rules is first parsedand checked for formal  errors us ing a GNUf lex  and b i son  parser  generator  programs.The rest of the compilation Is done In CommonLisp by t ransforming the ru les written in theregular expression formal ism Into f inlte-stateautomata.FuU-seale grammars  tend to be large contain-Ing maybe a few hundred finite-state rules.
Inorder to facilitate the parsing of sentences, thecompi ler  t r ies to reduce the number  of ru leautomata  fter each rule has  been compiled.Methods were developed for determining whichof the automata should be merged together byintersecting them (Tapanainen 1991).
The keyidea behind this is the concept of an activationa lphabet .
Some ru le-automata urn  out to bei r re levant  for cer ta in  sentences ,  s imp lybecause  the sentences  do not  conta in  anysymbols (or combinat ions of symbols) neces-sary to cause the automaton to fail.
Such rule-automata  can be ignored when parsing thosesentences.
Furthermore, It turned out to be agood strategy to merge automata with s imilaract ivat ion a lphabets  ( rather  than  arb i t raryones, or those resul t ing in smal lest  intersec-tions).4.2 Parsing sentencesThe implementation f the parsIng process Isopen to many choices which do not change tileresults of tile parsing, but which may have astgnifiemlt effect on the time mid space require-ments of the parsing.
As a theoretical staxlJ i~point one could take tile following setup.Parser  A: Assume that we first enumerate allreadings of a sentence-automaton.
Each read-tng Is, In turn, fed to each of the rule-automala.Those readings that are accepted by all rule-autonmta form the set of parses.Parser A is clearly Infeasible In practice becauseof the immense number  of readings repre-sented by tile sentence-automaton (millionseven in relatively simple sentences, and tilenumber  grows exponentially wllh sentencelength).A second elementary mad theoretical pproach:Parser  B: Take the sentence automaton andIntersect with each rule-autonmton In turn.This is more feasible, but experiments haveshown that the number  of states In the inter-mediate results tends to grow prohibitivelylarge when we work with full scale grmnmarsand complex sentences {Tapanainen 1991).This is ml Important property of l lnite-stateautomata.
All automata Involved are reasona-bly small, and even tile end result Is very small,but file Intermediate r sults can be extremelylarge imore than 100,000 states and beyondthe capacity of tile machines and algorithms wehave\].A fm-ther refinement of the above strategy I3would be to carefully choose tile order in whichthe Intersecting Is done:Pcu'ser C: Intersect the rule-automata with thesentence automaton In the order where youfirst evaluate ach of the remaining automataaccording to how much they reduce thenumber of readings remaining.
"lhe one whichmakes the greatest reduction is chosen at eachstep.This strategy seems to be feasible but  mucheffort Is spent on the repeated evaluation.
Itturns  out that one nlay even use a one-timeestimation for the order:ParserD:.
Perform a tentatWe Intersection of thesentence autmnalon and each of the rules first.Then Intersect the rules with the sentenceautomaton one by one tn the decreasing orderof their capacity to reduce the number of read-hags from the or~Ttnal sentence automaton.We may also choice to operate In parallelInstead of rule by rule:Parser  E: Simulate the Intersection of all rulesand the sentence automaton by trying to enu-merate readings In the sentence automaton butconstraining the process by the rule-automata.Each tune when a taale rejects the next tokenAcl~.s DE COL1NG-92, NANVES, 23-28 AO~r 1992 1 6 1 PI~OC.
ov COL1NG~92, NANTES.
AU(;.
23-28, 1992proposed, the corresponding branch In thesearch process is abandoned.This strategy seems to work fairly satisfactorily.It was used In the initial stages of the grammardevelopment and testing together with twoother principles:?
merging of automata into a smaller set ofautomata during the compflatlon phaseusing the activation alphabet of eachautomaton as a guideline?
excluding some automata before the parsingof each sentence according to the presenceof tokens in the sentence and the activationalphabets of the merged automata.Some further improvements were achieved bythe following:Parser I~.
Manually separate a set of rules defin-ing the coarse clause structure into a phase tobe first intersected with the sentence automa-ton.
Then use the strategy E with the remainingrules.
The initial step establishes a fairly goodapproximation of feasible clause boundaries.This helps the parsing of the rest of the rules byrejecting many incorrect readings earlier.Parsing simple sentences like "time flies like anarrow" takes some 1.5 seconds, whereas thefollowing fairly complex sentence takes some 10seconds to parse on a SUN SPARCstation2:Nevertheless the number of cases in whichassessment could not be related to factual rentalevidence has so far not been so great as to render thewhole system suspect.The sentence automaton Is small in terms ofthe number of states, but it represents some10 a5 distinct readings.5.
AcknowledgmentsThe work ofTapanainen \] is a part of the activityof the Research Unit for Computational Lin-guistics (RUCL) partly sponsored by the Acad-emy of Finland.
Voutilainen is a member of theSIMPR project at RUCL, sponsored by the Finn-ish Technology Development Center (TEKES).The SIMPR CG parser, grammars and diction-aries were designed and written by F. Karlsson,A.
Voutilainen, J. Helkklltl, and A. Anttila.Many of these results and innovations areeither directly used here, or have had a directinfluence on the present results.1.
Electronic mall addressee ofthe authorsare: Klmmo.
Ko,ske nnleml @HelsLnkl.Fl,Pasl.Tapanalnen@Helslnkl.Fl,avoutlla@llng.helslnkl, flAcrEs DE COLING-92, NANTES, 23-28 ^Ot3T 19926.
ReferencesE.
EJerhed, K. Church: Finite-State Parsing.F.
Karlsson (ed.)
Papers from the Seventh Scan-dlnavlan Conference on Linguisi~s.
Universityof Helsinki, Department ofGeneral Linguistics,Publications, No.
10. pp.
410-432.F.
Karlsson 1985.
Parsing Finnish in termsof Process Grammar.
F. Karlsson (ed.)
Computa-lionel Morphosyntax: Report on Research 1981-84.
University of Helsinkl, Department of Gen-eral Linguistics, Publications, No.
13.F.
Karlsson 1990.
Constraint Grammar as aFramework for Parsing Running Text.
H. Karl-gren (ed.)
COLING-90: Papers Presented to the13th International Conference on ComputationalL/tu3uist/cs.
Helsinkl, Vol.
3, pp.
168-173.F.
Karlsson, A. Voutilalnen, J. Helkkil~i, A.Anttfla, 7 January 1991.
Na/ural Language Pro-cesslruJ for Information Retrleval Purposes.SIMPR Document No.
SIMPR-RUCL-1990-13.4e.
Research Unit for Computational Lin-guistics, University of Helslnkl, Finland.
220PP.F.
Karlsson, A. Voutflalnen, J. Helkkilgt, A.Anttila (forthcoming.l, Constraint Grammar: ALanguage-Independent System for Parsing Run-nlng TexLL.
Karttunen, K.Koskermiemi, IL Kaplan1987.
A Compiler for Two-level PhonologicalRules.
Tools for Morphological Analysis (M. Dal-rymple, IL Kaplan, L, Karttunen, K. Kosken-nlemi, S. Shalo, M. Wescoat}.
Center for theStudy of Language and Information, Stanford.Report No.
CSLI-87-108.K.
Koskenniemi 1983.
Two-level Morphology:A General Computational Model for Word-FormRecognition and Production.
University of Hel-sinki, Department of General Linguistics, Pub-lications, No.
11.
160 pp.K.
Koskennierni 1990.
Finite-state Parsingand Disambiguation.
H Karlgren (ed.)
COLING-90: Papers Presented to the 13th InternationalConference on Computational Linguistics.
Hel-sinki, Vol.
2, pp.
229-232.R.
Quirk, S. Greenbaum, G. Leech, J. Svart-vik 1985.
A Comprehensive Grammar of theEng//sh Language.
London, Longman.P.
Tapanainen 1991.
P, dre//isind automaat-teina esitett~en kielioppisOfintfjen sovel-tamioen luonnollisen kielen JOsent(ljdssd.
("Natural language parsing with finite-statesyntactic rules.'}
Master's Thesis.
Departmentof Computer Science, University of Helsinki.1 6 2 PRec.
OF COLING-92, NANTES, AUG. 23-28, 1992
