Simplifying Deterministic ParsingAlan W. Carter  zDepartment ofComputer ScienceUniversity of British ColumbiaVancouver, B.C.
V6T IW5Michael J .
Frelllng 2Department ofComputer ScienceOregon State UniversityCorvallis, OR 07331ABSTRACTThis paper presents a model for deterministic parsing whichwas designed to simplify the task of writing and understanding adeterministic grammar.
While retaining structures and operationssimilar to those of Mareus's PARSIFAL parser \[Marcus 80\] thegrammar language incorporates the following changes.
(1) The useof productions operating in parallel has essentially been eliminatedand instead the productions are organized into sequences.
Not onlydoes this improve the understandability of the grammar, it is feltthat, this organization corresponds more closely to the task of per-forming the sequence of buffer transformations and attachmentsrequired to parse the most common constituent types.
(2) A generalmethod for interfacing between the parser and a semavtic represen-tation system is introduced.
This interface is independent of theparticular semantic representation used and hides all details of thesemantic processing from the grammar writer.
(3) The interface alsoprovides a general method for dealing with syntactic ambiguitieswhich arise from the attachment of optional modifiers uch as prepo-sitional phrases.
This frees the grammar writer from determiningeach point at which such ambiguities can occur.1.
INTRODUCTIONMarcus has effectively described the advantages of a deter-ministic parsing model as is embodied in his PARSIFAL system.Unfortunately a hindrance to the usability of PARSIFAL is the com-plexity of its grammar.
The popularity of Woods' ATN parsingmodel \[Woods 70\] demonstrates that the ease with which a grammarcan be written and understood is one of the greatest factors contri-buting to its usability.
This paper describes DPARSER (Determinis-tic PARSER) which is an implementation f an alternate determinis-tic parsing model intended to reduce the complexity of deterministicgrammars.DPARSER has been implemented and a small grammar writ-ten.
In developing the grammar the focus has been on dealing withthe syntactic ambiguities between the attachment of phrases andthus it can currently handle only simple noun and verb phrases.2.
CONSTITUENT BUFFERDPARSER maintains a constituent buffer which is manipu-lated by the grammar to derive the constituent structure of theinput sentence.
Each node of the buffer contains a constituent con-sisting of a set of feature-type, feature-value pairs, and a set of sub-constituents.
When parsing begins the constituent buffer contains asingle node with an associated subgrammar for parsing sentence con-stituents.
As the subgrammar of the sentence node examines thebuffer positions to its right, words are brought in from the input sen-tence to fill the empty positions.
When the grammar discovers asubconstituent phrase to be parsed, it performs a PUSH operationspecifying a subgrammar for parsing the constituent and the posi-tion of the rightmost word in the constituent phrase.
The PUSItoperation inserts a new node into the buffer immediately precedingthe constituent phrase and begins executing the specifiedIsupported in part by an I.W.
Killaw Predoctoral Fellowship2supported in part by the Blum-Kovler Foundation, Chicago, Ill.subgrammar.
This subgrammar may of course perform its ownPUSH operations and the same process will be repeated.
Once thesubeonstituent is complete control returns to the sentence node andthe buffer will contain the parsed constituent in place of those whichmade up the constituent phrase.
The sentence node can now attachthe parsed constituent removing it from the buffer.
When all thesubconstituents of the sentence node have been attached the parsingis complete.To familiarize the reader with the form of the constituentbuffer we consider the processing of the sentence Jones teaches thecourse, as the final NP is about to be parsed.
Figure 1 shows thecurrent state of each buffer node giving its position, state of execu-tion, essential syntactic features, and the phrase which it dominatesso far.
Following the terminology of Marcus we refer to the nodeswhich have associated subgrammars a active nodes and the onecurrently executing is called the current active node.
All buffer posi-tions are given relative to the current active node whose position islabeled **" .The buffer in its current state contains two active nodes: theoriginal sentence node and a new node which was created to parsethe sentence predicate (i.e.
verb phrase and its complements}.
Thenext modification of the buffer takes place when the subgrammar forthe predicate node examines its first position causing the word the tobe inserted in that position.
At this point a bottom-up arsingmechanism recognizes that this is the beginning of a noun phraseand a PUSH is performed to parse it; this leaves the buffer in thestate shown in Figure 2 .The subgrammar for the noun phrase now executes andattaches the words the and course.
It then examines the buffer formodifiers of the simple NP which causes the final punctuation, ".
",to be inserted into the buffer.
Since the period can not be part of anoun phrase, the subgrammar ends its execution, the PUSH isFigure 1.POSITION -1 activeSYNCLASS S SENT-TYPE DECL(Jooc,)POSITION * current activeSYNCLASS PHED VTYPE ONE-OBJ{te~cAe,)UNSEEN WORDS: the course.before pushln$ to parse the NPFigure 2.POSITION -2 activeSYNCLASS S SENT-TYPE DECL(Jo.co)POSITION -1 activeSYNCLASS PRED VTYPE ONE-OBJ{te*ehe,)POSITION * current activeSYNCLASS NP0POSITION 1 not activeSYNCLASS DET WORD THE EXT DEF(,he)UNSEEN WORDS:  course.pxrsin~ the noun phrase239completed, and the predicate node again becomes the current activenode.
The resulting state of the buffer is shown in Figure 3; thewords the and course have been replaced by the noun phrase consti-tuent which dominates them.Aside from PUSH and ATTACH, the following three opera-tions are commonly used by the grammar to manipulate the consti-tuent buffer.LABEL label a constituent with a syntactic featureMOVE move a constituent from one position to anotherINSERT insert a word into a specified positionExamples of these actions are presented in the following section.The differences between the data structures maintained byPARSIFAL and DPARSER are for the most part conceptual.PARSIFAL's active nodes are stored in an active node stack which isseparate from the constituent buffer.
To allow active nodes to parseconstituent phrases which are not at the front of the buffer an offsetinto the buffer can be associated with an active node.
The controlof which active node is currently executing is affected throughoperations which explicitly manipulate the active node stack.Church's deterministic parser, YAP \[Church 80\], uses a consti-tuent buffer consisting of two halls: an upper buffer and a lowerPOSIT ION -I activeSYNCLASS S SENT-TYPE DECLNo"~')POSITION * current activeSYNCLASS PRED VTYPE ONE-OBJ(tcachc,\]POSIT ION I not activeSYNCLASS NP NVFORM N3PS{the course)POSITION 2 not activeSYNCLASS FINAL-PUNCT WORD .(.)Figure3.
after the push is completedbuffer.
The grammar ules try to attach nodes from the lower bufferto those in the upper buffer.
While this structure is similar toPARSIFAL's, it does not draw such a rigid distinction betweenactive and inactive nodes.
There are no separate subgrammars asso-ciated with the nodes which constituents are being attached to, andnodes may be moved freely from one buffer to the other allowingthem to be attached before they are complete.
While our consti-tuent structure does maintain active nodes with separate subgram-mars, the control of the parsing process is similar to that used byChurch in that it is possible for incomplete nodes to be attached.As will be seen in a latter section this is an essential feature ofDPARSER's constituent buffer.3.
SEQUENCESIn DPARSER each constituent is assigned a sequence.
Eachsequence consists of n list of steps which are applied to the buffer inthe order specified by the sequence.
A step operator indicates howmany times each step can apply: steps marked with ~+" need neverapply, those marked by "="  must apply once, and those marked by"*" can apply any number of times.
A step may call anothersequence which has the effect of inserting immediately followingthat step, the steps of the named sequence.Each step consists of a list of rules where the priority of therules are made explicit by their ordering in the list.
Each rule is ofthe form\[Pl\] \[P~\] " " \ [P J  --> (a l ){a2) ' " (a )Each precondition, p,.
tests a buffer node for the presence or absenceof specified feature-type, feature-value pairs.
When a rule is appliedeach action, a c is evaluated in the specified order.
In attempting toapply a step each of the step's rules is tested in order, the first onewhose preconditions match the current buffer state is performed.In order to recognize certain constituent ypes bottom-up,sequences may be associated with a bottom-up precondition.
Whenthe parser encounters a node which matches uch a precondition, aPUSH to the sequence is performed.
This mechanism is equivalentto PARSIFAL's attention shifting rules and is used primarily forparsing noun phrases.In order to clarify the form of a sequence, the examplesequence TRANS-MAJOR-S shown in Figure 4 is discussed in detail.This sequence is associated with the initial sentence node of everyinput sentence.
It performs the operations necessary to reduce thetask of parsing an input sentence to that of parsing a normal sen-tence constituent as would occur in a relative clause or a sentencecomplement.
While this sequence will misanMyze certain sentencesit does handle a large number through a small set of rules.STEP 1 handles the words which and who which behavedifferently when they appear at the beginning of a sentence.
Thefirst rule determines if which is the first word; if it is then it labels itas a determiner.
The second rule handles who which is labels as aNP.STEP: I \[:STEP: 211I1I1\[1I1STEP: 3\[lSTEP: 4 \[:+WORD WHICH\] --> (LABEL 1 {SYNCLASS DET} {EXT WH})WORD WHO\] --> {LABEL I {SYNCLASS NP} {EXT WH})EXT W~l ->(LABEL * {SENT-TYPE QUEST} {QUEST-TYPE NP})SYNCLASS NP\] --> (LABEL * {SENT-TYPE DECL})ROOT HAVE\]f2 SYNCLASS NP\]\[3 TENSE TENSELESS\] -->(LABEL * {SENT-TYPE IMPER})VTYPE AUXVERB\] -->(LABEL * {SENT-T'ITE QUEST} {QUEST-TYPE YN})TENSE TENSELESS\] ---> {LABEL * {SENT-TYPE IlVIPER})+E.XT WH\]\[2 VTYPE AUXVERB\]\[3 SYNCLASS NP\]\[4 NOT PTYPE FINAL l --> {MOVE 1 Wlt-COMP)+QUEST.TYPE (YN NP-QUEST)\] --> {MOVE 2 l}STYPE LMPER\] --> (INSERT I you)Fisure 4.
SEQUENCE TRANS-MAJOR-S.
.....STEP 2 examines the initial constituents of the sentence todetermine whether the sentence is imperative, interrogative, declara-tive, e tc .
.
Since each sentence must be analyzed as one of thesetypes the step is modified by the "-----" operator indicating that oneof the step's rules must apply.
The first rule tests whether the ini-tial constituent of the sentence is a WH type NP; NP's like who,which professor, what time, etc.
fall into this category.
If thisprecondition succeeds then the sentence is labeled as a questionwhose focus is a noun phrase.
The second rule tests for a leadingNP and, if it is found, the sentence is labeled as declarative.
Notethat this rule will not be tested if the first rule is successful andthe step depends on this feature of step evaluation.
The followingrule tries to determine if have, appearing as the first word in a sen-tence, is a displaced auxiliary or is the main verb in an imperativesentence.
If the rule succeeds then the sentence is labeled asimperative, otherwise the following rule will label any sentencebeginning with an auxiliary as a yes/no type question.
The finalrule of the step labels sentences which begin with a tenseless verb asimperatives.STEP 3 picks up a constituent which has been displaced to thefront of the sentence and places it in the special WH-COMP regis-ter.
Generally a constituent must have been displaced if it is a WHtype Nap followed by an auxiliary followed by another NaP; however,an exception to this is sentences like Who is the professor?
in whichthe entire sentence consists of these three constituents.STEP 4 undoes any interrogative or imperative transforma-tions.
The first rule moves a displaced auxiliary around the NP insentences like Has Jones taught Lisp ~ and When did Jones teachLisp f. Note that for the latter sentence the previous step wouldhave picked up when and hence did would be at the front of thebuffer.
The second rule of this step inserts you into the buffer infront of imperative sentences.Like DPARSER, PARSIFAL's grammar language is composedof a large set of production rules.
The major difference between thetwo languages i how the rules are organized.
PARSIFAL's rules are240divided into packets everal of which may be active at once.
At anypoint in the parsing each of the rules in each active packet may exe-cute if its precondition is matched.
In contrast o this organization,DPARSER's sequences impose a much stronger control on the orderof execution of the productions.Aside from the bottom up parsing mechanism the only com-petition between rules is between those in the individual steps.
Thepurpose of constraining the order of execution of the productions ito reflect he fact that the parsing of a particular constituent type isessentially a sequential process.
Most of the rules involved in theparsing of a constituent can only apply at a particular point in theparsing process.
This is particularly true of transformational rulesand rules which attach constituents.
Those rules which can apply atvarious points in the parsing may be repeated within the sequence sothat they will only be tested when it is possible for them to applyand they will not be allowed to apply at points where they shouldnot.
Clearly the necessity to repeat rules at different points in asequence can increase the size of the grammar; however, it is feltthat a grammar which clearly specifies the possible set of actions ateach point can be more easily understood and modified.4.
SEMANTIC  PROCESSINGWhile semantic processing was outside Marcus's central con-cern a semantic system was developed which operates in parallelwith PARSIFAL , constructing the semantic representation as itssubconstituents were attached.
In order to deal with syntacticambiguities the action part of rules can contain semantic tests whichcompare the semantic well-formedness of interpretations resultingfrom a set of possible attachments.
Such comparative tests canchoose between one or more constituents o attach in a particularsyntactic role; for example a rule for attaching a direct object canuse such a test to choose whether to attach a displaced constituentor the next constituent in the buffer.
Comparative tests can also beused to decide whether to attach an optional modifier (such as aprepositional phrase) or leave it because it better modifies a higherlevel node.
Unfortunately this latter class of tests requires each rulewhich attaches an optional modifier to determine ach node whichit is syntactically possible to attach the node to.
Once this set ofsyntactically possible nodes is found, semantics must be called todetermine which is the best semantic hoice.
Such tests complicatethe grammar by destroying the modularity between the subgram-mars which parse different constituent types.For the LUNAR system \[Woods 73\] Woods added an experi-mental facility to the basic ATN framework which allowed an ATNto perform such comparative tests without requiring them to beexplicitly coded in the grammar.
The Selective Modifier Placementmechanism was invoked upon completion of an optional modifiersuch as a PP.
It then collected all the constituents which couldattach the modifier and performed the attachment it determined tobe the best semantic fit.
A mechanism similar to this is incor-porated as a central part of DPARSER and is intended to be usedwhenever an attachment is locally optional.
Before giving the detailsof this mechanism we discuss the semantic interface in general.In DPARSER a narrow interface is maintained between syntaxand semantics which alleviates the grammar writer of any responsi-bility for semantic processing.
The interface consists of theATTACH action which immediately performs the specified attach-ment and the W-ATTACH test which only succeeds if the attach-ment can be performed in light of the other constituents which maywant to attach it.Both ATTACH and IF-ATTACH have the same parameters:the buffer position of the constituent to be attached and a labelidentifying the syntactic relationship between the constituent and itsparent.
Such a label is equivalent to a "functional label" of theBUS system \[Bobrow & Webber 80\].
When an attachment is per-formed the semantic system is passed the parameters of the attach-ment which it then uses to recompute the interpretation of thecurrent active node.W-ATTACH tests are included as the final precondition ofthose grammar ules which wish to attach a trailing modifier; thetest returns true if it is syntactically possible for the modifier to beattached and the modifier best semantically modifies that node.
Ifthe test is true then the attachment is performed as a side effect ofthe test.To the grammar writer the IF-ATTACH test has the prescientcapability to foresee which active node should be allowed to attachthe modifier and immediately returns true or false.
However, theimplementation requires that when an IF-ATTACH test is per-formed, the current active node must be suspended and the nodewhich pushed to it restarted.
This node can then execute normallywith the suspended active node appearing like any other node in thebuffer.
The node continues executing until it either completes, inwhich case the process continues with the next higher active node,or it encounters the IF-ATTACHed node.
If, at this point, theactive node issues another IF-ATTACH then this new request isrecorded with the previous ones and the process continues with thenext higher active node.
This sequence of suspensions will end if anactive node becomes blocked because it expects a different consti-tuent type than the one in the position of the IF-ATTACHed node.When this occurs the interpretations which would result from eachof the pending IF-ATTACH tests are computed and the attachmentwhose interpretation the semantic system considers to be the mostplausible is performed.
Alternately, a sequence of suspensions maybe terminated when an active node ATTACHes the node that thesuspended active nodes had tried to IF-ATTACH.
Such a situation,an example of which occurs in the parsing of the sentence Is theblock in the boar, indicates that the pending W-ATTACH requestsare syntactically impossible and so must fail.The following example shows how the IF-ATTACH mechanismis used to handle sentences where the attachment of a prepositionalphrase is in question.
We consider the parsing of the sentence Jonesteaches the course in Lisp.
We start the example immediately fol-lowing the parsing of the PP (Figure 5).
At this point the sequencePOSITION -2 activeSYNCLASS S SENT-TYPE DECL(Jo..)POSITION -I activeSYNCLASS PRED VTYPE ONE-OBJ(te6che,)POSITION * current activeSYNCLASS NP NVFORM N3PS(the to.m)POSITION 1 not activeSYNCLASS PP(in L~,p)UNSEEN WORDS: .Fi\[~ure 6. after the completion of 'in Lisp'for the noun phrase is about to apply the rule shown in Figure 6"which tries to attach PP modifiers.
Since the precondition precedingthe IF-ATTACH test is true the IF-ATTACH test is made.
Thiscauses the current active node to be suspended until it can bedecided whether the attachment can be performed {Figure 7).Control now returns to the predicate node which attaches thesuspended NP as the object of the verb.
As normally occurs afteran attachment, he NP node is removed from the buffer; however,because the node will eventually be restarted it retains a virtualbuffer position.
The sequence for parsing the predicate now appliesthe same IF-ATTACH rule (Figure 6) to attach any prepositionalphrase modifiers.
Again since the PP is the first constituent in thebuffer the IF-ATTACH test is performed and the predicate node issuspended returning control to the sentence active node (Figure 8).When the sentence node restarts it execution, it attaches thepredicate of the sentence leaving the buffer as shown in Figure 9.\[I SYNCLASS PP\]~F-ATTACH I PP-MOD\] -~Figure 6. rule for attaehin?~ prepositional phrases241Fisure 7.POSITION -I activeSYNCLASS S SENT-TYPE  DECL(Jones/POSITION * current activeSYNCLASS PRED VTYPE ONE-OBJ(teaches)POSITION 1 suspended activeSYNCLASS NP NVFORM N3PS(the co,~rse)POSIT ION 2 not activeSYNCLASS PP(in Lisp)POSITION 3 not activeSYNCLASS I:'INAL-PUNCT WORD .f3after the NP has tried to attach the PPFigure 8.POSIT ION * activeSYNCLASS S SENT-TYPE DECL(Jo.ss)POSITION 1 suspended activeSYNCLASS PRED VTYPE ONE-OBJ(teaches)DELETED suspended activeSYNCLASS NP NW'FORM N3PS(the course)POSITION 2 not activeSYNCLASS PP6a Limp)POSITION 3 not activeSYNCLASS FINAL-PUNCT WORD.
(3after the PRED node has tr ied to attach the PPPOSIT ION * current activeSYNCLASS S SENT-TYPE  DECL(Jones teaches the course)DELETED suspended activeSYNCLASS PRED VTYPE ONE-OBJ(teaches the course)DELETED suspended activeSYNCLASS NP NVFORM N3PS(the course)POSITION 1 not activeSYNCLASS PP6n L"p)POSIT ION 2 not activeSYNCLASS F INAL-PUNCT WORD.(3Figure0.
after the subject and predicate have been attachedIlaving found a complete sentence the sentence node executes a finalstep which expects to find the final punctuation; since there is nonethe step fails.
This failure triggers the arbitration of the set ofpending IF-ATTACH requests for the attachment of the PP.
In thiscase the semantic system determines that the PP should modify theNP.
The parser then restarts the NP node at the point where iti~ued the IF-ATTACH and allows it to make the attachment (Fig-ure 10).
The NP node then tries again to attach a PP but seeingonly the period it realizes that its constituent is complete and ter-minates.Next the monitor restarts the predicate active node but doesnot allow it to make the attachment.
This results in the nodeeventually terminating without performing any more actions.
Atthis point each of the IF-ATTACH requests have been processed andthe step whose failure caused the processing of the requests isretried.
This time it is successful in finding the final punctuationand attaches it.
The parse is now complete {Figure 11).Aside from prepositional phrase attachment there are manyother situations where optional modifiers can arise.
For example inPOSIT ION - I  activeSYNCLASS S SENT-TYPE DECL(Jones teaches the course in lisp)DELETED suspended activeSYNCLASS PRED VTYPE ONE-OBJ(teaches the course in Lisp)DELETED * current activeSYNCLASS NP NVFORM N3PS(the co,Jrse in Lisp)POSIT ION I not activeSYNCLA3S FINAL-PUNCT WORD.
(3Figure 10. after the PP is attachedPOSIT ION * current activeSYNCLASS S SENT-TYPE DECL(Jones teaches the course ia Lisp .
)Fisure I t .the sentence !
saw the boy using the telescope the phrase using thetelescope may modify boy as a relative clause where the relative pro-noun has been deleted, or it may modify saw where the prepositionby has been deleted.
Another example is the sentence Is the block inthe boz?.
In this sentence the PP in the b0z must, for syntactic rea-sons, complement the verb; however, in the local context of parsingthe NP the block, it is possible for the PP to modify it.
IF-ATTACH can easily be extended to attach optional pre-modifiers; itcould then be used to derive the internal structure of such complexnoun phrases a8 the Lisp course programming assignment.The IF-ATTACH test is proposed as a mechanism to solve thisgeneral c l~s  of problems without requiring the grammar writer toexplicitly list all constituents to which an unattached constituentcan be attached.
Instead, it is sufficient o indicate that a trailingmodifier is optional and the monitor does the work in determiningwhether the attachment should be made.5.
CONCLUSIONA grammar language for deterministic parsing has been out-lined which is designed to improve the understandabil ity of thegrammar.
Instead of allowing a large set of rules to be active atonce, the grammar language requires that rules be organized intosequences of steps where each step contains only a small number ofrules.
Such an organization corresponds to the essentially sequentialnature of language processing and greatly improves the perspicuityof the grammar.
The grammar is further simplified by means of ageneral method of interfacing between syntactic and semantic pro-cessing.
This interface provides a general mechanism for dealingwith syntactic ambiguities which arise from optional post-modifiers.REFERENCESBobrow, R.J. and B.L.
Webber \[19801 "PSI-KLONE: Parsing and SemanticInterpretation i tile BBN Natural Language Understanding Sys-tem", in Proceedings of the CSCSI/SCEIO Conference 1080.Carter, A.W.
\[1083\] "DPARSER -- A Deterministic Parser', MastersThesis, Oregon State University.Church, K.W.
\[10801 On Memory Limitations in Natural Language Pro.cenin?, ~flT/LCS Technical Report #245, Cambridge, Mass.Marcus, M.P.
\[1076\] "A Design for a Parser for English", in Proceedings ofthe ACM Conference 1978.Marcus, M.P.
\[1080\] A Theory of Syntactic Recognition for NaturalLanguage, The ~flT Press, Cambridge, Mass.Rustin R. \[1973\] Natura~ Language Proc,ssing, Algorithmics Press, NewYork.Woods, W.A.
\[1970\] "Transition Network Grammars for Natural LanguageAnalysis", in Communications of the ACM 13:591.Woods, W.A.
\[19731 "An Experimental Parsing System for Transition Net-work Grammars', in \[Rustin 73 I.242
