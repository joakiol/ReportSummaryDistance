Grammar Modularity and its Impacton Grammar DocumentationStefanie DipperUniversita?t Potsdam Humboldt-Universita?t zu BerlinInstitut fu?r Linguistik Inst.
fu?r deutsche Sprache und LinguistikD-14415 Potsdam D-10099 BerlinGermany Germanydipper@ling.uni-potsdam.de stefanie.dipper@rz.hu-berlin.deAbstractThis paper addresses the documentation oflarge-scale grammars.1 We argue that grammarimplementation differs from ordinary softwareprograms: the concept of modules, as knownfrom software engineering, cannot be trans-ferred directly to grammar implementations,due to grammar-specific properties.
Theseproperties also put special constraints on theform of grammar documentation.
To fulfillthese constraints, we propose an XML-based,grammar-specific documentation technique.1 IntroductionResearch in the field of grammar development fo-cuses on grammar modularization, ambiguity man-agement, robustness, testing and evaluation, main-tainability and reusability.
A point which has of-ten been neglected is the detailed documentationof large-scale grammars?despite the fact that thor-ough documentation of the grammar code is a pre-requisite for code maintainability and reusability.In this paper, we argue that documenting large-scale grammars is a complex task that requires spe-cial, grammar-specific documentation techniques.The line of reasoning goes as follows.
We showthat maintainability (and, hence, reusability) of agrammar depends to a large extent on the modular-ization of the grammar rules: a large-scale gram-mar remains maintainable only if linguistic gener-alizations are encoded explicitly, i.e., by modules(sec.
3.1).
However, in contrast to modules in ordi-nary software programs, (certain) grammar modulescannot be black boxes (sec.
3.2).
This property putsspecial constraints on the form of grammar docu-mentation (sec.
4).
Finally, we present an XML-based documentation technique that allows us to ac-comodate these constraints (sec.
5).1The paper is based on my doctoral dissertation (Dipper,2003), which I wrote at the IMS Stuttgart.
I am very gratefulto Anette Frank for invaluable discussions of the dissertation.Many thanks go to Bryan Jurish and the anonymous reviewersfor helpful comments on the paper.To illustrate the needs of documentation, we referto a German LFG toy grammar (Lexical-FunctionalGrammar, cf.
sec.
2).
Our argumentation, however,applies not only to grammars in the LFG formalismbut to any grammar that is modularized to a certainextent.2 Lexical-Functional GrammarLFG is a constraint-based linguistic theory (Bresnan(2001), Dalrymple (2001)).
It defines different lev-els of representation to encode syntactic, semanticand other information.The levels that are relevant here are constituentstructure (c-structure) and functional structure (f-structure).
The level of c-structure represents theconstituents of a sentence and the order of the ter-minals.
The level of f-structure encodes the func-tions of the constituents (e.g.
subject, adjunct) andmorpho-syntactic information, such as case, num-ber, and tense.The c-structure of a sentence is determined by acontext-free phrase structure grammar and is repre-sented by a tree.
In contrast, the f-structure is rep-resented by a matrix of attribute-value pairs.
Thestructures are linked by a correspondence function(or mapping relation), called ?
?-projection?.The (simplified) analysis of the sentence in (1)illustrates both representation levels, see fig.
1.
(1) Maria liest oft Bu?cherM.
reads often books?Maria often reads books?As an example, we display the CP rule in (2)(which gives rise to the top-most subtree in fig.
1).
(2) CP ?
NP C?(?SUBJ)=?
?=?The arrows ?
and ?
refer to f-structures; they de-fine the ?-projection from c-structure nodes to f-structures.
The ?-arrow refers to the f-structure ofCPNP C?Maria V VPliest ADV NPoft Bu?cher????????????
?PRED ?read<SUBJ,OBJ>?SUBJ?
?PRED ?Maria?CASE nomNUM sg??OBJ?
?PRED ?book?CASE accNUM pl?
?ADJUNCT{ [PRED ?often?
]}TENSE present????????????
?Figure 1: LFG c-structure and f-structure analysis of Maria liest oft Bu?cherthe mother node (= the CP), the ?-arrow to the f-structure of the node itself (= NP, C?
).2That is, the above rule states that CP dominatesan NP and a C?
node; the NP functions as the sub-ject (SUBJ) of CP, and C?
is the head of CP (shar-ing all features, by unification of their respective f-structures).However, the NP preceding C?
may as well func-tion as the direct (OBJ) or indirect object (OBJ2),depending on case marking.
We therefore refine theCP rule by making use of disjunctive annotations,marked by curly brackets, cf.
(3).
(3) CP ?NP C?
{ (?SUBJ)=?
(?CASE)=nom ?= ?| (?OBJ)=?
(?CASE)=acc| (?OBJ2)=?
(?CASE)=dat }3 Grammar ModularityLarge grammars are similar to other types of largesoftware projects in that modularity plays an impor-tant role in the maintainability and, hence, reusabil-ity of the code.
Modularity implies that the softwarecode consists of different modules, which in ordi-nary sofware engineering are characterized by twoprominent properties: (P1) they are ?black boxes?,and (P2) they are functional units.Black boxes Modules serve to encapsulate dataand are ?black boxes?
to each other.
That is, theinput and output of each module (i.e.
the interfacesbetween the modules) are clearly defined, while themodule-internal routines, which map the input tothe output, are invisible to other modules.Functional units Usually, a module consists ofpieces of code that belong together in some way(e.g.
they perform similar actions on the input).2Whenever an arrow is followed by a feature, e.g.
SUBJ,they are enclosed in parentheses, (?SUBJ).That is, the code is structured according to func-tional considerations.Modular code design supports transparency, con-sistency, and maintainability of the code.
(i) Trans-parency: irrelevant details of the implementationcan be hidden in a module, i.e.
the code is not ob-scured by too many details.
(ii) Consistency is fur-thered by applying once-defined modules to manyproblem instances.
(iii) Maintainability: if a certainfunctionality of the software is to be modified, thesoftware developer ideally only has to modify thecode within the module encoding that functionality.In this way, all modifications are local in the sensethat they do not require subsequent adjustments toother modules.Turning now to modules in grammar implemen-tations, we see that similar to modules in ordinarysoftware projects, grammar modules encode gener-alizations (functional units, property P2).
However,we argue below that (certain) grammar modules arenot black boxes (whose internal structure is irrel-evant, property P1), because these generalizationsencode important linguistic insights.3.1 Grammar ModulesSimilarly to modules in ordinary software projects,modules in grammar implementations assemblepieces of code that are functionally related: theydo this by encoding linguistic generalizations.
Alinguistic generalization is a statement about prop-erties that are common to/shared by different con-structions.
A grammar module consists of a coher-ent piece of code that encodes such common prop-erties and in this sense represents a functional unit.In a modularized grammar, all constructions thatshare a certain property should make use of thesame grammar module to encode this property.Generalizations that remain implicit (i.e.
gener-alizations that are not encoded by modules) areerror-prone.
If the analysis of a certain phe-nomenon is modified, all constructions that adhereto the same principles should be affected as well,automatically?which is not the case with implicitgeneralizations.Which sorts of modules can be distinghuished ina grammar implementation?
In this paper, we limitourselves to two candidate modules: (i) syntacticrules and (ii) macros.Syntactic rules Each syntactic rule, such as theCP rule in (3), can be viewed as a module.
A syn-tactic category occurring on the right-hand side ofa rule (e.g.
NP in (3)) then corresponds to a mod-ule call (routine call); the f-structure annotations ofsuch a category ((?SUBJ)=?)
can be seen as the in-stantiated (actual) parameters that are passed to theroutine.
Groups of rules (e.g.
CP, C?, and C) formhigher-level modules: X?-projections.To sum up, syntactic rules can sensibly be viewedas modules (cf.
also Wintner (1999), Zajac andAmtrup (2000)).
Their internal expansion is irrele-vant for the calling rule (property P1), and they forma linguistically motivated unit (property P2).3Macros Grammar development environments(such as XLE, Xerox Linguistic Environment,described in Butt et al (1999, ch.
11)) providefurther means of abstraction to modularize thegrammar code, e.g.
(parametrized) macros andtemplates.
Each macro/template can be viewed as amodule, encoding common properties.4An example macro is NPfunc in (4), which maybe used by the closely related annotations of NPs indifferent positions in German, e.g.
the annotationsof NPs dominated by CP and by VP, cf.
(5).
(Macrocalls are indicated by ?@?.
)(4) NPfunc ={ (?SUBJ)=?
(?CASE)=nom| (?OBJ)=?
(?CASE)=acc| (?OBJ2)=?
(?CASE)=dat }(5) CP ?
NP C?
@NPfunc ?=?VP ?
ADV NP??
(?ADJUNCT) @NPfunc3With regard to f-structure, however, these modules are notcanonical black boxes.
LFG provides powerful referencingmeans within global f-structures, i.e.
f-structure restrictions arenot (and can in general not be) limited to local subtrees.
In away, f-structure information represents what is called ?globaldata?
in software engineering: all rules and macros are essen-tially operating on the same ?global?
data structures.4XLE macros/templates can be used to encapsulate c-structure and f-structure code.
Moreover, macros/templates canbe nested, and can thus be used to model constraints similar totype hierarchies (Dalrymple et al, To Appear).That is, NPfunc is used to encapsulate the alterna-tive NP functions in German.
This encoding tech-nique has the advantage that the code is easier tomaintain.
For instance, the grammar writer mightdecide to rename the function OBJ2 by IOBJ.
Thenshe/he simply has to modify the definition of themacro NPfunc rather than the annotations of all NPsin the code.
Clearly, NPfunc represents a functionalunit; the question of whether NPfunc is a black boxto other modules, such as the syntactic rule CP, isaddressed in the next section.3.2 Code Transparency and Black BoxesThe above example shows how macros can be usedto encode common properties.
In this way, the in-tentions of the grammar writer are encoded explic-itly: it is not by accident that the NPs within the CPand VP are annotated by identical annotations.
Inthis sense, the use of macros improves code trans-parency.
Further, macros help guarantee code main-tainability: if the analysis of the NP functions ismodified, only one macro (NPfunc) has to be ad-justed.In another sense, however, the grammar code isnow obscured: the functionality of the CP and VPrules cannot be understood properly without the def-inition of the macro NPfunc.
Macro definitions mayeven be stacked, and thus need to be traced back tounderstand the rule encodings.
In this sense, onemight say that the use of macros hinders code trans-parency.5In order to distinguish these opposing views moreprecisely we introduce two notions of transparency,which we call intensional and extensional.Intensional transparency of grammar codemeans that the characteristic defining properties ofa construction are encoded by means of suitablemacros, i.e in terms of generalizing definitions.Hence, all constructions that share certain definingproperties make use of the same macros to encodethese properties (e.g.
the CP and VP rules in (5)).Conversely, distinguishing properties of differ-ent constructions are encoded by different macros?even if the content of the macros is identical.Extensional transparency means that linguis-tic generalizations are stated ?extensionally?, i.e.macros are replaced by their content/definition(similar to a compiled version of the code).
Thegrammar rules thus introduce the constraints di-rectly rather than by calling a macro that would in-troduce them (similar to the CP rule in (3)).5The same argumentation applies to type hierarchies: to un-derstand the functionality of a certain type, constraints that areinherited from less specific, related types must be traced back.Comparing both versions, the extensional version(3) may seem easier to grasp and, hence, more trans-parent.
To understand the generalized version in (5),it is necessary to follow the macro calls and look upthe respective definitions.
Obviously, one needs toread more lines of code in this version, and oftenthese lines of code are spread over different placesand files.
For instance, the CP rule may be part of afile covering the CP internal rules, while the macroNPfunc figures in some other file.Especially for people who are not well acquaintedwith the grammar, the intensional version thus re-quires more effort for understanding.
In contrast,people who work regularly on the grammar codeknow the definitions/functionalities of macros moreor less by heart.
They certainly grasp the grammarand its generalizations more easily in the intensionalversion.One might argue that to know the name of amacro, such as NPfunc, often suffices to ?under-stand?
or ?know?
(or to correctly guess) the func-tionality of the macro.
Hence, a macro would be ablack box (whose definition/internal structure is ir-relevant), similar to modules in ordinary softwareprograms.However, there is an important difference be-tween grammar implementations and canonicalsoftware programs: grammars encode linguistic in-sights.
The grammar code by itself represents im-portant information in that it encodes formalizationsof linguistic phenomena (in a particular linguisticframework).
As a consequence, users of the gram-mar are not only interested in the pure functionality(the input-output behaviour) of a grammar module.Instead, the concrete definition of the module is rel-evant, since it represents the formalization of a lin-guistic generalization.We therefore conclude that macro modules, suchas NPfunc, are only defined by property P2 (func-tional unit), not by property P1 (black box).The criteria of maintainability and consistencyclearly favour intensional over extensional trans-parency.
We argue that the shortcomings of inten-sional transparency?namely, poorer readability forcasual users of the grammar?can be compensatedfor by a special documentation structure.4 Grammar DocumentationIn large software projects, code documentationconsists of high-level and low-level documenta-tion.
The high-level documentation comprises in-formation about the function and requirements of(high-level) modules and keeps track of higher-leveldesign decisions (e.g.
which modules are distin-guished).
More detailed documentation includeslower-level design decisions, such as the reasons forthe chosen algorithms or data structures.The lowest level is that of code-level documen-tation.
It reports about the code?s intent ratherthan implementation details however, i.e.
it focuseson ?why?
rather than ?how?.
For instance, itsummarizes relevant features of functions and rou-tines.
A large part of the code-level documenta-tion is taken over by ?good programming style?,e.g.
?use of straightforward and easily understand-able approaches, good variable names, good routinenames?
(McConnell (1993, p. 454)).The level that is of interest to us is that of code-level documentation.
In contrast to documentationof other types of software, grammar documentationhas to focus both on ?why?
and ?how?, due to thefact that in a grammar implementation the code inand of itself represents important information, as ar-gued above.
That is, the details of the input?outputmapping represent the actual linguistic analysis.
Asa consequence, large parts of grammar documenta-tion consist of highly detailed code-level documen-tation.Moreover, the content/definition of certain de-pendent modules (such as macros) is relevant tothe understanding of the functionality of the motherrule.
Hence, the content of dependent modules mustbe accessible in some way within the documentationof the mother rule.One way of encoding such dependencies is bymeans of links.
Within the documentation of themother rule, a pointer would point to the documen-tation of the macros that are called by this rule.The reader of the documentation would simply fol-low these links (which might be realized by hyper-links).6 However, a typical grammar rule calls manymacros, and macros often call other macros.
Thishierarchical structure makes the reading of link-based documentation troublesome, since the readerhas to follow all the links to understand the func-tionality of the top-most module.7We therefore conclude that the structure of the6Certain programming languages provide tools for the au-tomatic generation of documentation, based on commentswithin the program code (e.g.
Java provides the docu-mentation tool Javadoc, URL: http://java.sun.com/javadoc/).
The generated documentation makes use of hy-perlinks as described above, which point to the documentationof all routines and functions that are used by the documentedmodule.7Routines and functions in ordinary software may be hier-archically organized as well.
In contrast to grammar modules,however, these modules are (usually) black boxes.
That is, areader of the documentation is not forced to follow all the linksSource Documentation(XML)Source Grammar(LFG)Perl Processing Perl ScriptsGrammar (XML)XSLT Processing StylesheetsDocumentation(LATEX)Documentation(HTML)Documentation(.
.
.
)Figure 2: XML-based grammar documentationdocumentation should be independent of the struc-ture of the grammar code.
We suggest a documenta-tion method that permits copying of relevant gram-mar parts (such as macros) and results in a user-friendly presentation of the documentation.5 An XML-based GrammarDocumentation TechniqueIn our approach, grammar code and documentationare represented by separate documents.
The docu-mentation of a rule comprises (automatically gen-erated) copies of the relevant macros rather thansimple links to these macros.
In a way, our docu-mentation tool mirrors a compiler, which replaceseach macro call by the content/definition of the re-spective macro.
In constrast to a (simple) com-piler, however, our documentation keeps a recordof the macro calls (i.e.
the original macro calls arestill apparent).
In the terminology introduced above,our documentation thus combines extensional trans-parency (by copying the content of the macros) withintensional transparency (by keeping a record of themacro calls).The copy-based method has the advantage thatthe structure of the documentation is totally inde-pendent of the structure of the code which is beingdocumented.We propose an XML-based documentationmethod, i.e.
the source documentation and thegrammar code are enriched by XML markup.
XSLTstylesheets operate on this markup to generate theactual documentation (e.g.
an HTML document ora LaTeX document, which is further processed toto understand the functionality of the top-most module.result in a postscript or PDF file).
The XML tagsare used to link and join the documentation text andthe grammar code.
In this way, the documentationis independent of the structure of the code.Fig.
2 presents the generation of the output doc-umentation.
The source documentation is createdmanually in XML format (e.g.
by means of an XMLeditor); the source grammar is written manually inLFG/XLE format.
Next, XML markup is added tothe source LFG grammar via Perl processing.
Spe-cific XML tags within the documentation refer totags within the grammar code.
The XSLT process-ing copies the referenced parts of the code to theoutput documentation.This approach guarantees that the code fragmentsthat are displayed in the documentation are alwaysup-to-date: whenever the source documentation orgrammar have been modified, the output documen-tation is newly created by XSLT processing, whichnewly copies the code parts from the most recentversion of the grammar.5.1 Further Features of the ApproachThe described documentation method is a powerfultool.
Besides the copying task, it can be exploitedin various other ways, both to further the readibil-ity of the documentation and to support the task ofgrammar writing (see also the suggestions by Er-bach (1992)).8Snapshots Grammar documentation is much eas-ier to read if pictures of c- and f-structures illustratethe analyses of example sentences.
XLE supports8Except for the different output formats, all of the featuresmentioned in this paper have been implemented.the generation of snapshot postscript files, display-ing trees and f-structures, which can be included ina LaTeX document.
Note, however, that after anygrammar modification, such snapshots have to beupdated, since the modified grammar may now yielddifferent c- and f-structure analyses.In our approach, snapshots are updated automat-ically: All example sentences in the source docu-mentation are marked by a special XML tag.
XLEsnapshots are triggered by this markup and auto-matically generated and updated for the entire doc-umentation, by running the XSLT stylesheet.Indices In our approach, the documentation doesnot follow the grammar structure but assemblesgrammar code from different modules.
Moreover,documentation may refer to partial rules only (ormacros).
That is, the complete documentation ofan entire rule can be spread over different sectionsof the documentation.User-friendly documentation therefore has to in-clude an index that associates a grammar rule (ormacro) with the documentation sections that com-ment on this rule.
That is, besides referencing fromthe documentation to the grammar (by copying), thedocumentation must also support referencing (in-dexing) from various parts of the grammar to therelevant parts of the documentation.Again, such indices are generated automaticallybased on XML tags in our approach.Test-Suites Example sentences in the documenta-tion can be used to automatically generate a test-suite.
In this way, the grammar writer can easilycheck whether the supposed coverage?as reportedby the documentation?and the actual coverage ofthe grammar are identical.It is also possible to create specialized test-suites.For instance, one can create a test-suite of inter-rogative NPs, by extracting all examples occurringwithin the section documenting interrogative NPs.Up to now, we have seen how to create and ex-ploit XML-based grammar documentation.
Thenext section addresses the question of how to main-tain such a type of documentation.5.2 MaintainabilityA grammar implementation is a complex softwareproject and, hence, often needs to be modified, e.g.to fix bugs, to widen coverage, to reduce overgen-eration, to improve performance, or to adapt thegrammar to specific applications.
Obviously, thedocumentation sections that document the modifiedgrammar parts need to be modified as well.99As mentioned above, in some respects, the (output) doc-umentation is updated automatically by our XML/XSLT-basedIn our approach, grammar code and docu-mentation are represented by separate documents.Compared to code-internal comments, such code-external documentation is less likey to remain up-to-date, because it is not as closely associated with thecode.
This section discusses techniques that couldbe applied to support maintenance of our XML-based documentation.We distinguish three types of grammar modifi-cations.
(i) An existing rule (or macro) is deleted.
(ii) An existing rule is modified.
(iii) A new rule isadded to the code.In case (i), the XSLT processing indicateswhether a documentation update is necessary: Anyrule that is documented in the documentation is ref-erenced by its ?id?
attribute.
If such a rule is deletedfrom the code, the referenced ?id?
attribute does notexist any more.
In this case, the XSLT process-ing prints out a warning that the referenced elementcould not be found.If, instead, rules are modified or added (cases (ii)and (iii)), utilities such as the UNIX command ?diff?can be applied to the output text files: Suppose thatthe grammar has been modified while leaving thedocumentation text untouched.
Now, if the LaTeXfiles are newly generated, the only parts that maypossibly have changed are the parts citing grammarcode.
These parts can be located by means of the?diff?
command.
If such changes between the lastand the current LaTeX files have occurred, thesechanges indicate that the surrounding documenta-tion sections may need to be updated.
If no changeshave occurred, despite the grammar modifications,this implies that the modified parts are not docu-mented in the (external) documentation and, hence,no update is necessary.
By this technique, the gram-mar writer gets precise hints as to where to searchfor documentation parts that may need to be ad-justed.To sum up, maintenance of the documentationtext can be supported by techniques that give hintsas to where the text needs to be adjusted.
In the sce-narios sketched above, the grammar writer wouldfirst modify the grammar only and generate somenew, temporary output documentation.
Comparingthe current with the last version of the output doc-umentation would yield the desired hints.
After anupdate of the documentation text, a second run ofthe XSLT processing would generate the final out-put documentation.approach.
XSLT operates on the most recent version of thegrammar, therefore all grammar-related elements within theoutput documentation that are generated via XSLT are automat-ically synchronized to the current grammar (e.g.
snapshots).6 Conclusion and OutlookIn this paper, we discussed the importance of main-tainability and documentation in grammar devel-opment.
A modular and transparent design of thegrammar and detailed documentation are prerequi-sites for reusability of the grammar code in general.A modularized grammar is ?intensionally trans-parent?, as we put it, and thus favours maintain-ability.
However, for casual users of the grammar,modularity may result in decreased readability.
Thisis related to the fact that grammar modules are notblack boxes, since they encode linguistic general-izations.
We argued that this can be compensatedfor by a special documentation technique, which al-lows for user-friendly documentation that is inde-pendent of the structure of the grammar code.Similar to common grammar-specific tools thatare provided by grammar development environ-ments, we propose a grammar-specific documenta-tion technique (which ought to be integrated intothe grammar development environments, as alsosuggested by Erbach and Uszkoreit (1990), Erbach(1992)).Our XML-based documentation technique is avery powerful means that can be exploited to sup-port the difficult task of grammar (and documen-tation) development in various further ways.
Forinstance, the grammar code can be ?translated?
toa pure XML document, i.e.
each atomic elementof the code (syntactic categories such as NP; f-structure elements, e.g.
?, SUBJ, =) is marked bya tag.
This markup can be used in various ways, forinstance:?
The grammar code can be displayed with re-fined highlighting, e.g.
c-structure and f-structureelements can be printed in different colours.
Thisimproves the transparency and readability of thecode.?
The grammar code can be mapped to a repre-sentation that uses annotated trees instead of rules.This may result in a better understanding of thecode.
(However, the mapping to the annotated-treerepresentation is not trivial, since c-structure rulesmake use of regular expressions.
)ReferencesJoan Bresnan.
2001.
Lexical-Functional Syntax,volume 16 of Textbooks in Linguistics.
Oxford,UK: Blackwell.Miriam Butt, Tracy Holloway King, Mar?
?a-EugeniaNin?o, and Fre?de?rique Segond.
1999.
A GrammarWriter?s Cookbook.
Number 95 in CSLI LectureNotes.
Stanford, CA: CSLI.Mary Dalrymple, Ron Kaplan, and Tracy H. King.To Appear.
Lexical structure as generalizationsover descriptions.
In Miriam Butt and Tracy H.King, editors, Proceedings of the LFG04 Confer-ence.
CSLI Online Proceedings.Mary Dalrymple.
2001.
Lexical Functional Gram-mar, volume 34 of Syntax and Semantics.
NewYork et al: Academic Press.Stefanie Dipper.
2003.
Implementing and Docu-menting Large-Scale Grammars?German LFG,volume 9(1) of AIMS (Arbeitspapiere des Insti-tuts fu?r Maschinelle Sprachverarbeitung).
Uni-versity of Stuttgart.Gregor Erbach and Hans Uszkoreit.
1990.
Gram-mar engineering: Problems and prospects.CLAUS Report No.
1.
Report on the Saarbr u?ckenGrammar Engineering Workshop, University ofthe Saarland, Germany.Gregor Erbach.
1992.
Tools for grammar engineer-ing.
In Proceedings of ANLP-92, pages 243?244,Trento, Italy.Steve McConnell.
1993.
Code Complete.
A Prac-tical Handbook of Software Construction.
Red-mond, WA: Microsoft Press.Shuly Wintner.
1999.
Modularized context-freegrammars.
In Proceedings of MOL6?SixthMeeting on Mathematics of Language, pages 61?72, Orlando, Florida.Re?mi Zajac and Jan W. Amtrup.
2000.
Modularunification-based parsers.
In Proceedings of theSixth International Workshop on Parsing Tech-nologies, Trento, Italy.
