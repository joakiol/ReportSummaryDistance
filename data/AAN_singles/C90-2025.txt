Funetor -Dr iven Natura l  Language Generat ion w i thCategor ia l -Uni f icat ion GrammarsDale G, erdemannBeckman Inst i tute for AdvancedScience and TechnologyUnivers i ty of Ill inoisat Urbana-Champaign405 N. MathewsUrbana,  IL 61801USAErhard W. HinrichsBeckman Inst i tute for AdvancedScience and TechnologyUniversity of Ill inoisat Urbana-Champaign405 N. MathewsUrbana~ IL 61801USA1.
IntroductionIn this paper we develop a functor-driven approachto natural language generation which pairs logicalforms, expressed in first-order predicate logic, withsyntactically well-formed English sentences.
Gram-matical knowledge is expressed in the fi'amework ofcategorial unifieation-qrammars developed by Kart-tunen (1986), Wittenburg (1986), Uszkoreit (1986),and Zeevat et.
al.
(1987).
The semantic omponentof the grammar makes crucial use of the principle ofminimal type assignment whose importance has beenindependently motivated in recent work in naturallanguage semantics (see Partee and Rooth 1983).The principle of type-raising as necessary which fol-lows fi'om minimal type assignment has been imple-mented using Wittenburg's (1987,1989) idea of su-pereombinators.
This use of supercombinators toachieve semantic compatibility of types generalizesWittenburg's trictly syntactic use of such combina-tors.The use of categorial unification grammars makesit possible to develop an efficient top-down controlregime for natural anguage generation.
Rather thangenerating the syntactic output string in a leftoto-right fashion, our algorithm always generates thatpart of the output string first that belongs to thefunetor category in a given phrase, before it gener-ates any of the arguments of the functor category.This fnnctor-driven strategy is similar to the head-driven approach to natural language generation de-veloped by Shieber el.
al.
(1989).
However, unlikethe head-driven approach, which uses a mixed regimeof top-down and bottom-up processing, our algo-r ithm always has sufficient op-down information toguide the generation process.
Moreover, due to theprinciple of minimal type assigmnent in the seman-tics, our approach avoids problems of efficiency thatarise for the head-driven approach for those classesof grammars that do not satisfy this principle.
Thework reported here is implemented in the naturallanguage system UNICORN, which can be used fornatural language parsing (see Gerdemann and Hin-richs 1989) and na.tural anguage generation.2.
The  Grammar  Formal i sm:  Catego-r im Un i f i ca t ion  GrammarThe grammatical formalism that we adopt for cat-egorial unification grammar is similar to that pro-posed in Uszkoreit (1986).
Following the schema forsyntactic rules developed for PATR-style grammars,we formulate the ca tegorial grammar ule of func-tional application by the rule schema in fig.
1.
TheFigure 1: Function Applicationz l  node (i.e.
the node at the end of the path (zl})represents a functor category that combines with anargument at x2 to yield as a result the category atx0.
The rule also specifies that the semantic trans-lation (trans) of the result category x0 is inheritedfrom the functor xl.
As is characteristic of categorialgrammars, our syntactic rules are highly schematic,with most of the grammatical information encodedin the categorial lexicon.
For example, constraints onword order are encoded in lexical representations offunctor categories, rather than in the syntactic rulesthemselves.
To this end we adopt an attribute phon(for: phonology) which is used to encode linear orderfor syntactic strings.
The values for p~taon are  struc-tured as difference lists.
The use of this data struc-ture, inherited from PROLOG, allows us to concate-nate functor categories with their arguments eitherto the left or to the right.
It also allows us to statesyntactic rules without having to make reference toconstituent order.
* The graphs in fig.
2 display par-tial lexical entries for the intransitive verb smiles,1In this respect, our representation is more compact thanother categorial-unitlcation grammar formalisms which stateorder constraints in the categorial lexicon and in each syntac-tic rule.
In particular, we don't need to distinguish betweenforward application and backward applicationi 145l,.
c. / - ,% j.%@//'N@~ o_ '~(v4 / #/~ frome ssmi les~Figure 2: Phonology Rulesfor the proper name Tom and for the sentence Tomsmiles.
The phon attribute for argument categoriessuch as proper names is encoded as a singleton listwhich contains the argument string in question, e.g.Tom.
The phon attribute for functor categories isdesigned to combine the string for the functor cate-gory with the phon feature structure of its argumentcategories.
In the case of the intransitive verb smiles,the morpheme smiles appears as the first element ina list that is appended to the difference list for itssubject argument.
When the phonology attributesfor Ibm and smiles are combined by function ap-plication, the resulting sentence xhibits the correctword order, as fig.
2c shows.
For the sake of con>pleteness, we also include the representation of thepreposition from as an example of a forward functorin fig.
2d.For the remainder of this paper we will concen-trate on the interplay between syntax and semanticsfor the purposes of language generation.
We will as-sume that information about word order propagatesfrom the lexicon in the manner we just outlined byexample.3.
Natural  Language Generation withCategorial-Unif ication GrammarsIn this section we describe our functor-driven ap-proach to natural language generation which pairslogical forms (represented in first-order predicatelogic) with syntactically well-formed expressions ofEnglish.
For example, given a first-order fornmlasuch as(1) gx\[person'(x) --~ smile'(x)\]we want to generate a sentence such as Everyonesmiles.Ill order to produce the appropriate sentence, thegenerator is supplied with a start Dag as in fig.
3.s ~., ~iksmil e&every)e rso l lFigure 3: Start Dag for Everyone smilesThe first order formula (1) is represented in fig.
3under the attribute trans (for: logical form transla-tion).
The value for the attribute cat specifies thatthe translation corresponds to a syntactic expressionof category s (for: sentence).
Unlike functional cat-egories which take other syntactic categories as ar-guments, s is a basic category, i.e.
a category whichdoes not take an argument.The task of the generator is to further instantiatestart Dags such as that in fig.
3 so that appropriatesyntactic expressions are generated in the most effi-cient manner possible.3.1 A Functor-Dr iven Generat ion A lgor i thmOne advantage of the use of categorial grammarsis that efficient generation can be effected by a com-pletely general principle: at each step in the deriva-tion of a syntactic expression, constituents tha.t cor-respond to functor categories are to be generated be-fore the generation of constituents that correspondto the functor's argument categories.
The strategyunderlying this principle is that in any grammaticalconstruction, functor categories always provide moresyntactic and semantic information than any of theargument categories.
By generating the fnnctor cat-146 2a.
o@.~i ,  ' b.
/ ' / ~ ?
~ 4 " .
.
oc.
ransI?
'V";~//" ~'O '~  ~b personpersons np smileFigure 5: Generat ing ?
'verg.one sraile.~J1"'.4I r \+sl~: "-.~'e, \ smilepersonit,'igure 4: Start  Dag u~Jifies with function appl icat ion;i ' l l le.
::gory first, the choice of argnmenI~ categories will be:~e.verely con~-trained, which sigJ:ificantly prunes the;;earch space in whieh the algorithm has t.o operate.We will i l lustrate our approach by discussing thefunetor-driven order of processing for the generationof the sentence Ever'gone <<-rsz'i, les.
First the genera-tor will make a top-down predict ion by unifying thee.
',bart Dag in fig..3 with the m0 node of the functional;xpplication rule shown in fig.
1.
The resulting Dagis shown in fig.
4.The predicted Dag in fig.
4 then becomes sub-.
}eel; to the principle of generating functor categories!'h-st.
Identif ication of a functor eategory in a ruleof categoriab.unit ication grammar  is straightforward:Ihe functor category is represented by the subdagwhose wflue for the attr ibute c~tt is a Dag with atoi;,'ibut.es art  and reszUt a.nd whose 'ce.~zlt are is reen-!rant with the value of the subdag rooted in ):0.Thus, in the case of fig.
4, the functor category isz l .
2 At this point there is enough information onthe z l  node to uniquely det, ermine the choice of afunctor category, whereas the choice of an argumentcategory would be eompletciy unconst.raired.
Whenthe !exical entry for eve,";t/cne (fig.
5a.)
unifies withthe a:l node, the result is the Dag in fig.
oh.
~ Then,at this point, the z2 node is fully enough instant iatedto uniquely determine the choice of .~miles (fig.
5e)hom the lexicon.3.2 Non-min imal ly  Type  Ra ised  FunctorsNow consider w\]',at, happens when non-quantif iedNPs like To~Tz are type-raised as in ~'\[ontague (1974).That is, suppose that the lexical entry for Torn is theDag ill fig.
6a rather than the lower type in fig.
6b.It turns out that if the type raised NP is used, itwill not be possible to constrain the choice of func-for in generation.
For example, fig.
7a shows therule of f lmction appl icat ion (fig.
1) in which the z0node has been unified with a start  \])ag appropriate.to generate Tom ~miles.
In fig.
7b, the z l  node hasunified with a type-raised entry for Hatred, show-.ing that the start  Dag has done nothing to constrainthe choice of functor.
Thus, apart  fl-om introducingspurious ambiguity into the grammar (see Witten-burg 1987 for detai led discussion), the operat ion oftype-raising, when used unconstrained, can also leadto considerable inefficiency in generation.
In order2Alternatively, one could could simply take ?1.
to alwaysbe the functor since, given our use of the phon attribute, theorder of xl and x2 no longer corresponds to linear order.aA problem that arises here is that the ~1 node in fig.
4will also unify with the lexieal entry for s~r~iles (fig.
5c) givinga nonsensical translation.
Clearly, what needs to be done isto modify the semantic representations so that quantified ex-pressions will not unify with non-quantified expressions.
Oneline that could be investigated would be to have a type systemwhich distinguishes quantified and non-quantified signs as inPollard and Sag (1987).3 14  "7~~p fOS "~ "~ ~ l t0 ' St m Psmile ~Ep / - ,4harryC.
-~ooPs iFigure 7: Generating Torn smiles<,2)#tom ~np ~ ~p tomFigure 6: Lexical entries for Totv ,to constrain rite use of type-raising, we adopt theprinciple of minimal type a.,sigament suggesl;ed onindependent grounds by Partee and Rooth (1(.
)83).Part:ee and Rooth argued for t, he principle of mini-real type assigament, to account fox" seopal propertiesof NPs in a variety of coordinate structures.
Amongthe examples they discuss is tthe contrast betweensentences sud~ as (2) a,,d (3).
(2) Every student failed or got' a D.(3) Every student failed or every student got a D.(2) and (3) have different truthtrue if some students failed andwhile others got a D and did notwould be false in that situat,ion.point out that appropriate truthconditions.
(2) isdid not get a D,fail.
(3), however,Partee and Roothconditions for (2)can only obtained if intransitive verbs are given anon-Wpe-raised intterpretation and if their conjunc-tion is represented by the k-abstract in (4).
When(4) is combined with the translation for every stu-dent, the desired reduced formula in (5) is obtained.
(4:) Aa\[fail'(a:)V goLa_D'(z)\](5) Vm\[student'(z) .... \[failed'(ac) v got,_~LD'(~;)\]lThe use of conjoined type-raised predicates as in (6),however, would incorrectly yield the formula in (7),which is appropriate for (3) but not for (2).
(6) v p(Az.goLa_D'(z) )(7) V \[stud nt,'( ) - ,  VV0-\[student'( ) --+ got,_a_D'(z)\]On the other hand, Partee and Rooth point' outthat for the interprc't,ation of senttences uch as (8):intransitive verbs do ha.ve to be Wpe-raised, since (9)is a paraphrase of (8).
(8) A tropical storm was expected to form off t.llecoast of Florida and did form there within a fewdays of the forecast.
(9) A tropical st'orm was expected to form off thecc, ast of Florida and A tropical storm did formthere within a few day's of the forecast'.In order to reconcile this conflict, Partee andRooth propose that extensionM intransitive verbssuch as formed should be assigned t,o the lowest pos-sible type and be type-raised only when t,hey are con-joined with an intensional verb such as be ezpected.Given the principle of minimal  type assignment,the entry for smile3 fig.
5c will now be the main func-tor in generating the sentence To~n s~..iles.
It.
can beseen that smiles (and no other non-type-raised cat.-egory) will unify with the z l  node of fig.
7a.
Theresulting prediction is shown in fig.
7c.
At this pointthe x2 node is constrained to unify with the mini-mal, non-type-raised entry fox: Torn (fig.
6by.
Thus,the principle of minimal type assignment urns outto be crucial tor constructing efficient generation al-gorithms for categorial-unification grammars.3.,3 A l low ing  Type-Ra is ing  as NeededAs seen in the previous section, efficient genera-tion requires the use of basic (non-type-raised) NPs,whenever possible.
However, this is not' t,o suggest'148 4a..~~xC~x b.
~ ~~~ np ~c~~Figure 8: Type-Rais ingthat the operat ion of type-rais ing can be el iminatedfrom the grammar  altogether.
For example, t,ype-raising needs to apply in the case of conjoined NP'ssuch as Tom and every boy.
If we assume, as in Wit -tenburg (1986), that  and is assigned the category in(10), 4 then to parse or generate a conjoined NP likeTom and every boy the category for Torn will haveto be raised so that  its type will match that of everyboy.
(10) (XIX)iXWhat  is needed then is sonle operat ion that willconvert the non-type-raised entry for \[/bm in fig.
6bto its raised counterpart  in fig.
6a.
One way of in-corporat ing the necessary operat ion into the gram-mar would be via the type-rais ing rule in fig.
8a, inwhich the non-type-raised entry unifies with the x lnode to yield the type-raised result at z0 '5 ttowever,the problem with the rule in fig.
8a is that  it willallow type-rais ing not just as needed but also any-where else.
So the problem of spurious predict ionslike that.
in fig.
7b reemerges.Clearly, what is needed is some way of allowingtype-rais ing only in those cases where it is needed.Partee and Rooth suggest that  type raising shouldbe constrained by some kind of processing strategy, 6withou~ indicat ing how such a processing strategy4We use a non-directional calculus here, since word orderis encoded into lexical items.
The domain is to the right oftt~e bar and the range is to the left.
The capital Xs representa variable over categories.
This is just a schematic represen-tation of a considerably more complicated category.SNote again thai., since phonology is encoded into lexicalitems, we can get by with a single rule of type-raising whereasmost formalisms would require two.
The phonological coun-terpart of type-raising would be:?
4 /~Partee and Rooth were actually more interested in psy-eholinguis?ic processing strategies.
Still their ideas carry overstraightforwardly to computational linguistics.can be implemented.
It turns out that  the processingstrategy that  Partee and Rooth suggest can be stateddeclarat ivcly as part  of the grammar,  if the operat ionof type-rais ing is incorporated into a supercombinator(in the sense of Wi t tenburg 1987,89) that  combinestype-rais ing and functional appl icat ion into a singleoperation.Wi t tenburg himself was interested in constrainingtype-rais ing in order to el iminate the spurious ambi-guity problem of eombinatory categorial grammars.He noted that in some of Steedman's  (1985,1988)grammars  type-raising was needed just in those caseswhere an NP needed to compose with an adjacentfunctor, tie, therefore, proposed that  the type-raising rule be included into the function composit ionrule.
The use of type-rais ing in coordinate structuresthat  we have considered in this paper, is quite simi-lar: We want type-raising to be licensed, just in casean NP is adjacent to a funetor that is locking fora type-raised argument.
We, therefore, incorporatetype-rais ing into the function appl icat ion rule as seenin fig.
8b.
Now, the old type-rais ing rule in fig.
8a isno longer needed, and spurious type-raising will nolonger be a problem.The type-rais ing supereombinator  schema infig.
8b is, for example, used in the generation of coo ld inate structures uch as Tom and every boy.
Spacewill not allow us to fully present an analysis of suchan NP here, but.
the important  point is that a non-type-raised lexical entry such as that  in fig.
6b willbe able to unify with the x2 node, and when it.
doesso, the subdag at the end of the path (zl cat art) willbecome identical to the type-raised entry for Tom infig.
6a.4.
Conc lus ionIn this paper we have argued t,hat a functor-drivengeneration algorithnl for categorial  unification gram-mars leads to efficient natura l  language generation,if the algorithm incorporates Part,ee and Rooth's(1983) principle of minimal  type assignment.
Inorder to have minimal  type assignment and stillallow type-raising in rest.ricted contexts, we haveadopted Wit tenburg 's  (1986) idea of supercombina-5 149tors.
Type-rMsing has been incorporated into thefunction application rule so that type-raising canonly apply when some functor is looking for a type-raised argument.
This use of supercombinators toachieve semantic compatibility generalizes Wittm>burg's strictly syntactic application of these combi-n at ors.ReferencesGerdemann, D. and Hinrichs, E. 1988.
UNI-CORN: a unification parser for attribute-valuegrammars.
Studies in the Linguistic Sciences,18(2):41-86Karttunen, L. 1986.
D-patr: a development envi-ronment for unification-based grammars.
InCOLING-86.Montague, R. 1974.
The Proper treatment of quan-tification in ordinary English.
In R. Thorns-son (Ed.
), \]7ormal Philosophy: Selected Papersof Richard A.~ontague, Yale University Press,New }taven.Partee, B. and Rooth, M. 1983.
Generalized conjunc-tion and type ambiguity.
In R. Bau erle, C.Schwarze, and A. yon Stechow (Eds.
), Mean-ing, Use and Interpretation o/Language, 361-383, Walter de Gruyter.Pollard, C. and Sag, I.
1987.
An Information-BasedApproach to Syntax and Semantics: Volumei Fundamentals.
CSL\[ Lecture Notes No.
13,Chicago University Press, Chicago.Shieher, S. 1988.
A uniform architecture for parsingand generation.
In COLING-88, 614-9.Shieber, S., van Noord, G., Moore, R. C., andPereira, F. C. N. 1989.
A semantic-head-driven generation algorit, hm for unification-based formalisms.
In ACL Proceedings, 27thAn.nual Meeting, 7-17.Steedman, M. 1985.
Dependency and coordination ithe grammar of dutch and english.
Language,61:523-568.Steedman, M. 1988.
Combinat.ors and grammar.
InR.
Oehrle, E. Bach, and D. Wheeler (Eds.
),Categorfal Grammar ar,,d Natural LanguageStructures, 417-442, Reidel, Dordrecht.Uszkoreit, H. 1986.
Categoriat unification grammar.In COLING-86.Wall, R. and Wittenburg, K. 1989.
Predictive normalforms for composition in categorial grammars.In Proceedings of International Workshop onParsing Technologies, 152-161.Wittenburg, K. 1986.
Natural Language Pars-ing with Cornbinatory Categorial Grammar ina Graph-Unification-Based Forrnalism.
PhDthesis, The University of Texas at Austin.Wittenburg, K. 1987.
Predictive combinators: amethod for efficient parsing of combinatoryc~ttegorial grammars.
In Proceedings of the25th Annual Meeting of the Association forComputational Linguistics, 73-80.Zeevat, H, Klein, E, and Calder, J.
1987.
UnificationcategoriM grammar.
In N. Haddock, E. Klein,and G. Morrill (Eds.
), Edinburgh Working Pa-pers in Cognitive Science, 195-222, Centre forCognitive Science, University of Edinburgh.150 6
