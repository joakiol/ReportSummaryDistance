Integration of a Lexical Type Database with a Linguistically InterpretedCorpusChikara Hashimoto,?
Francis Bond,?
Takaaki Tanaka,?
Melanie Siegel??
Graduate School of Informatics, Kyoto University?
Machine Translation Research Group, NTT Communication Science Laboratories?
Language Technology Lab, DFKI?
hasimoto@pine.kuee.kyoto-u.ac.jp?{takaaki,bond}@cslab.kecl.ntt.co.jp?
siegel@dfki.deAbstractWe have constructed a large scaleand detailed database of lexical typesin Japanese from a treebank that in-cludes detailed linguistic information.The database helps treebank annota-tors and grammar developers to shareprecise knowledge about the grammat-ical status of words that constitute thetreebank, allowing for consistent largescale treebanking and grammar devel-opment.
In this paper, we report onthe motivation and methodology of thedatabase construction.1 IntroductionTreebanks constructed with detailed linguistic in-formation play an important role in various as-pects of natural language processing; for exam-ple, grammatical knowledge acquisition; worldknowledge acquisition (Bond et al, 2004b);and statistical language model induction.
Suchtreebanks are typically semi-automatically con-structed by a linguistically rich computationalgrammar.A detailed grammar in turn is a fundamen-tal component for precise natural language pro-cessing.
It provides not only detailed syntacticand morphological information on linguistic ex-pressions but also precise and usually language-independent semantic structures of them.However, such a deep linguistic treebank anda grammar are often difficult to keep consistentthrough development cycles.
This is both becausemultiple people, often in different locations, par-ticipate in a development activity, and becausedeep linguistic treebanks and grammars are com-plicated by nature.
Thus, it is often the case thatdevelopers lose sight of the current state of thetreebank and grammar, resulting in inconsistency.We have constructed a linguistically enrichedtreebank named ?Hinoki?
(Bond et al, 2004a),which is based on the same framework as theRedwoods treebank (Oepen et al, 2002) and usesthe Japanese grammar JACY (Siegel and Ben-der, 2002) to construct the treebank.1 In the con-struction process, we have also encountered theproblem just mentioned.
We are aiming to re-solve this problem, which we expect many otherproject groups that are constructing detailed lin-guistic treebanks have encountered.
Our strategyis to take a ?snapshot?
of one important aspect ofthe treebank and grammar for each developmentcycle.
To be more precise, we extract informa-tion about lexical items that are being used in tree-banking from the treebank and grammar and con-vert it into an electronically accesible structureddatabase (the lexical-type database).
Such a snap-shot, the database, certainly helps treebank anno-tators and grammar developers to share preciseand detailed knowledge of the treebank and gram-mar and thus to make them consistent throughoutthe development cycle.2Lexical items whose information is included1Currently, the Hinoki treebank contains about 121,000sentences (about 10 words per sentence).2We think we also need another snapshot, that of thegrammar rules and principles being used.
In this paper, how-ever, we do not deal with it, and hopefully we will report onit some other time.31in the database are grouped together accordingto their grammatical behavior, and we will referto each of the groups as a lexical type in therest of the paper.
A typical lexical item con-sists of an identifier, and then a triple consist-ing of the orthography, lexical-type and predicate:e.g., inu n 1 = ?
??
?, common-noun-lex,dog n animal?.
The grammar treats all mem-bers of the same lexical type in the same way.
thelexical type is the locus of syntactic and structuralsemantic information.
Examples of lexical typeswill be described in ?2.The database could also benefit a wide rangeof language researchers, not just those who aretreebanking.
As the development of the treebankand grammar proceeds, together they describe thelanguage (Japanese in this study) with increasingaccuracy.
As a result, the database that we ob-tain from the sophisticated treebank and grammarcan be thought of as showing us the real view ofthe Japanese lexicon.
Thus, though many of thedetails of the treebank and grammar are frame-work dependent, the database will provide NLPresearchers who are aiming at deep linguistic pro-cessing of Japanese with a basic and reliable ref-erence Japanese lexicon.
The correctness can beverified by examining the treebanked examples.Such a resource is useful for Japanese languageteachers, lexicographers, and linguists, in addi-tion to NLP researchers.The next section describes the framework oftreebanking and motivates the need for the lexicaltype database.
The third section discusses whatinformation the lexical type database should con-tain to facilitate treebanking and grammar devel-opment; illustrates the contents of the database;and shows how the database is created.
The fourthsection discusses the usefulness of the lexical typedatabase for many purposes other than treebank-ing.
An overview of related works follows in thefifth section.
Finally, we conclude the paper witha discussion of our plans for future work.2 Background to the DatabaseThe treebanking process is illustrated in Fig-ure 1.
As the figure shows, our treebank issemi-automatically generated by a computationalgrammar (and a parser).
Each sentence is parsedand the intended reading chosen from the possi-Development (refinement)GRAMMARTreebanking (manual annotation)TREEBANKautomatic parsingfeedbackFigure 1: Treebanking Cyclesble interpretations.
In doing so, we find the gram-mar?s flaws such as insufficient coverage and spu-rious ambiguities.
The feedback allows us to re-fine the grammar so that it can have wider cov-erage and be more appropriately restricted.
Cur-rently this process is carried out by several people,distributed over four continents.Although most treebanks are rarely updated,we consider the updating an integral part of theprocess.
Thus our treebank is dynamic in thesense of Oepen et al (2004).As is often the case with detailed linguistictreebanking, our grammar and treebank consistof very fine-grained linguistic information.
Forexample, our grammar, hence our treebank, dis-tinguishes several usages of the Japanese dativemarker ni.
The Japanese sentence (1) can repre-sent the two meanings described in (1a) and (1b).Lexical type names for each usage of ni are writ-ten in typewriter font.3(1) hanasiai-wadiscussion-TOPsinya-nimidnight-DATitarureacha.
?The discussion comes (to a conclusion)at midnight.
?ni as adv-p-lex-1b.
?The discussion continues until mid-night.
?ni as ga-wo-ni-p-lexThe dative phrase, sinya-ni (midnight-DAT), canact as either an adjunct (1a)4 or an object of itaru?reach?
(1b).
Below is an example showing otherusages of ni.
(2) Ken-wa-TOPyuka-ofloor-ACCkirei-niclean-DATmigakupolish3These are actual names of the lexical types implementedin our grammar and might not be understandable to peoplein general.4The object, a conclusion, is expressed by a phonolog-ically null pronoun.
This is the so-called ?pro-drop?
phe-nomenon.32a.
?Ken polishes a floor clean.?
(The floor is clean.
)ni as naadj2adv-end-lexb.
?Ken cleanly polishes a floor.?
(His way of polishing the floor is clean.
)ni as adv-p-lex-6The dative phrase, kirei-ni (clean-DAT), is used asan adjunct in both (2a) and (2b), but their usagesand meanings are different.
The usage in (2b) isan ordinary adverb that describes the manner ofKen?s polishing the floor as clean, while in (2a)the dative phrase describes the resulting situationof the floor after polishing as clean.
In addition,the nis in (1) and (2) are different in that the for-mer takes nouns as its complement while the lat-ter takes adjectives.
Thus, the four usages in (1a),(1b), (2a) and (2b) must be distinguished so thatwe can obtain correct syntactic structures and se-mantic representations.
In our terms, these nis aresaid to belong to different lexical types.5 Simi-larly, our grammar distinguishes usages of otherwords, notably functional ones.However, as we augment the grammar withfiner distinctions, the grammar becomes more andmore opaque and difficult to maintain, and so isthe treebank.
This is problematic in three ways.Firstly, when we annotate parser outputs of onesentence, we have to see which parse is correctfor the sentence.
Consequently, we have to distin-guish which word usage is correct for each wordin the sentence.
However, this task is not alwaystrivial, since our grammar?s word usage distinc-tion is very fine grained as shown above.
Sec-ondly, when we add a word to the grammar toget wider coverage, we have to see which lexicaltype the word belongs to.
That is, we are requiredto be familiar with lexical types of the grammar.Thirdly, in collaborative grammar development, itsometimes happens that a developer accidentallyintroduces a new lexical type that represents over-lapping functionality with an existing type.
Thiscauses spurious ambiguity.
As a result, the gram-mar will be unnecessarily bloated, and the tree-bank will also be easily inconsistent.
Again, wesee that comprehensive knowledge of the gram-mar?s lexical types is indispensable.5Usages of the Japanese dative marker, ni, are extensivelydiscussed in, for example, Sadakane and Koizumi (1995).In summary, it is important to make clear (i)what lexical types are assumed in a grammar anda treebank and (ii) how differently they are usedfrom each other, so that we can make the treebankannotation and grammar development consistent.Our solution to the problem is to construct alexical type database of a treebank and a gram-mar.
The database is expected to give us explicitinformation on (i) what lexical types are imple-mented in the grammar and are used in the tree-bank and (ii) how a word is used in Japanese andis distinguished from other words.3 Architecture of the DatabaseThis section details the content of thedatabase and the method of its construc-tion.
The database itself is on-line athttp://pc1.ku-ntt-unet.ocn.ne.jp/tomcat/lextypeDB/.3.1 Content of the DatabaseFirst of all, what information should be includedin such a database to help treebank annotators andgrammar developers to work consistently?
Ob-viously, once we construct an electronic lexicon,whatever information it includes, we can easilysee what lexical types are assumed in the gram-mar and treebank.
But we have to carefully con-sider what to include in the database to make itclear how each of the lexical types are used anddistinguished.We include five kinds of information:(3) Contents of the Databasea.
Linguistic discussioni Nameii Definitioniii Criteria to judge a word as belong-ing to a given lexical typeiv Reference to relevant literatureb.
Exemplificationi Words that appear in a treebankii Sentences in a treebank that containthe wordsc.
Implementationi The portion of grammar source filethat corresponds to the usage33ii Comments related to the portioniii TODOsd.
Links to ?confusing?
lexical typese.
Links to other dictionariesThat is, we describe each lexical type indepth (3a?3c) and present users (treebank an-notators and grammar developers) explicit linksto other lexical types that share homony-mous words (3d) (e.g.
adv-p-lex-1 vsga-wo-ni-case-p-lex in (1)) to make itclear what distinguishes between them.
Further,we present correspondences to other computa-tional dictionaries (3e).Linguistic discussion To understand lexicaltypes precisely, linguistic observations and anal-yses are a basic source of information.Firstly, the requirements for naming lexical-types in a computational system (3ai) are thatthey be short (so that they can be displayed inlarge trees) and easily distinguishable.
Typenames are not necessarily understandable for any-one but the developers, so it is useful to linkthem to more conventional names.
For examplega-wo-ni-p-lex is a Case Particle (???
).Next, the definition field (3aii) contains awidely accepted definition statement of the lexi-cal type.
For example, ga-wo-ni-p-lex (1b)can be defined as ?a particle that indicates that anoun it attaches to functions as an argument of apredicate.?
Users can grasp the main characteris-tics from this.Thirdly, the criteria field (3aiii) provides userswith means of investigating whether a given wordbelongs to the class.
That is, it provides posi-tive and negative usage examples.
By such us-age examples, developers can easily find dif-ferences among lexical types.
For example,adv-p-lex-1 (1a) subcategorizes for nouns,while adv-p-lex-6 (2b) subcategorizes foradjectives.
Sentences like (1a) and (2b) that fitsuch criteria should also be treebanked so thatthey can be used to test that the grammar coverswhat it claims.
This is especially important forregression testing after new development.Finally, the reference field (3aiv) points to rep-resentative papers or books dealing with the lex-ical type.
This allows the grammar developers toquickly check against existing analyses, and al-lows users as well to find more information.Exemplification Examples help users under-stand lexical types concretely.
As we have con-structed a treebank that is annotated with linguis-tic information, we can automatically extract rele-vant examples exhaustively.
We give the databasetwo kinds of examples: words, that are instancesof the lexical types (3bi), and sentences, tree-banked examples that contain the words (3bii).This link to the linguistically annotated corpusexamples helps treebankers to check for consis-tency, and grammar developers to check that thelexical types are grounded in the corpus data.Implementation Grammar developers need toknow the actual implementation of lexical types(3ci).
Comments about the implementation (3cii)are also helpful to ascertain the current status.Although this section is necessarily framework-dependent information, all project groups that areconstructing detailed linguistic treebanks need todocument this kind of information.
We take ourexamples from JACY (Siegel and Bender, 2002),a large grammar of Japanese built in the HPSGframework.
As actual implementations are gen-erally incomplete, we use this resource to storenotes about what remains to be done.
TODOs(3ciii) should be explicitly stated to inform gram-mar developers of what they have to do next.We currently show the actual TDL defini-tion, its parent type or types, category ofthe head (SYNSEM.LOCAL.CAT.HEAD), valency(SYNSEM.LOCAL.CAT.VAL), and the semantictype (SYNSEM.LOCAL.CONT).Links to ?confusing?
lexical types For users todistinguish phonologically identical but syntacti-cally or semantically distinct words, it is impor-tant to link confusing lexical types to one anotherwithin the database.
For example, the four lexicaltypes in (1) and (2) are connected with each otherin terms of ni.
That way, users can compare thosewords in detail and make a reliable decision whentrying to disambiguate usage examples.66Note that this information is not explicitly stored inthe database.
Rather, it is dynamically compiled from thedatabase together with a lexicon database, one of the com-ponent databases explained below, when triggered by a userquery.
User queries are words like ni.34Links to other dictionaries This informationhelps us to compare our grammar?s treatmentwith that of other dictionaries.
This compar-ison would then facilitate understanding oflexical types and extension of the lexicon.
Wecurrently link lexical types of our grammarto those of ChaSen (Matsumoto et al, 2000),Juman (Kurohashi and Nagao, 2003), ALT-J/E (Ikehara et al, 1991) and EDICT (Breen,2004).
For example, ga-wo-ni-case-p-lexis linked to ChaSen?s ??-???-??
(particle-case particle-general),Juman?s ???
(case particle), andALT-J/E?s ???-???-???????
(adjunct-case particle-noun/par-ticle suffix).Figure 2 shows the document generated fromthe lexical type database that describes the lexicaltype, ga-wo-ni-p-lex.3.2 Method of Database ConstructionThe next question is how to construct such adatabase.
Needless to say, fully manual construc-tion of the database is not realistic, since thereare about 300 lexical types and more than 30,000words in our grammar.
In addition, we assumethat we will refer to the database each time weannotate parser outputs to build the treebank andthat we develop the grammar based on the tree-banking result.
Thus the database constructionprocess must be quick enough not to delay thetreebanking and grammar development cycles.To meet the requirement, our method of con-struction for the lexical type database is semi-automatic; most of the database content is con-structed automatically, while the rest must be en-tered manually.
This is depicted in Figure 3.?
Content that is constructed automatically?
Lexical Type ID (Grammar DB)?
Exemplification (3b) (Treebank DB)?
Implementation (3ci,ii) (Grammar DB)?
Link to ?confusing?
lexical types (3d)(Lexicon DB)?
Link to Other Lexicons (3e) (OtherLexDB)?
Content that is constructed manually?
Linguistic discussion (3a)?
TODOs (3ciii)3.2.1 Component DatabasesTo understand the construction process, de-scription of the four databases that feed the lex-ical type database is in order.
These are the gram-mar database, the treebank database, the lexicondatabase, and the OtherLex database.?
The grammar database contains the actualimplementation of the grammar, written astyped feature structures using TDL (Kriegerand Schafer, 1994).
Although it contains thewhole implementation (lexical types, phrasaltypes, types for principles and so on), onlylexical types are relevant to our task.?
The lexicon database gives us mappings be-tween words in the grammar, their orthogra-phy, and their lexical types.
Thus we can seewhat words belong to a given lexical type.The data could be stored as TDL, but weuse the Postgresql lexdb (Copestake et al,2004), which simplifies access.?
The treebank database stores all treebank in-formation, including syntactic derivations,words, and the lexical type for each word.The main treebank is stored as structuredtext using the [incr tsdb()] (Oepen et al,2002).
We have also exported the deriva-tion trees for the treebanked sentences intoan SQL database for easy access.
The leavesof the parse data consist of words, and theirlexicon IDs, stored with the ID of the sen-tence in which the word appears.?
We also use databases from other sources,such as ChaSen, Juman and Edict.3.2.2 Automatic ConstructionNext we move on to describe the automaticconstruction.
Firstly, we collect all lexical typesassumed in the grammar and treebank from thegrammar database.
Each type constitutes the IDof a record of the lexical type database.Secondly, we extract words that are judged tobelong to a given lexical type and sentences thatcontains the words (Example (3b)) from the tree-bank database compiled from the Hinoki tree-bank (Bond et al, 2004a).
The parsed sentences35??
?, ga-wo-ni-p-lex (?,?,?
)Linguistic Discussionga-wo-ni-p-lex particles attach to a noun and indicate what grammatical relation (e.g., subject or object)the noun takes on in relation to a predicate.
It does not mean anything by itself.Right Wrong?????????
?????????????????????
10??????
?Literature[1] Koichi Takezawa.
A Configurational Approach to Case Marking in Japanese.
Ph.D. dissertation,University of Washington, 1987.
[ bib ][2] Shigeru Miyagawa.
Structure and Case Marking in Japanese (Syntax and Semantics 22).
AcademicPress, 1989.
[ bib ]ExamplesLexical Entries (6)?
(ga),?
(ni-case),?
(o)Example Sentences (54280)Examples for?
(ga)??????????
??????????????????????????????????????????????????????????????????
???????????????????
?Examples for?
(ni-case)????????
???????????????????????
?Examples for?
(o)??????????????????????
?More ExamplesTDL SummaryTDL Definitionga-wo-ni-p-lex := case-p-lex &[SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD noun_head].Supertype Head Category Valency Contentcase-p-lex overt-case-p_head p_sat mrsTODODative subjects of stative predicates are not recognized."????????????
"See also mental-stem-lex.LinksCHASEN?s Lexical type JUMAN?s Lexical type ALT-J/E?s Lexical type??-???-??
???
???-???-??????
?Lexical Type ListFigure 2: Screenshot of the lexical type ga-wo-ni-p-lex36ManualInputGrammar DB- Lexical Type ID- SourceOtherLex DB- Other Lex ID- Other Lex Type- OrthographyLexical Type DB- Lexical Type ID- Linguistic Discussion- Exemplification- Implementation- TODOs- Other LexiconsLexicon DB- Lexicon ID- Orthography- Lexical Type IDTreebank DB- Lexicon ID- Orthography- Sentence IDUser:-)OtherLexInterfaceQuery?Confusing?LinksFigure 3: The Lexical Type Database Constructioncan be seen in various forms: plain text, phrasestructure trees, derivation trees, and minimal re-cursion semantics representations.
We use com-ponents from the Heart-of-Gold middleware topresent these as HTML (Callmeier et al, 2004).Thirdly, implementation information except forTODOs is extracted from the grammar database(3ci,ii).Fourthly, in order to establish ?confusing?
lex-ical type links (3d), we collect from the lexicondatabase homonyms of a word that users enter asa query.
To be more precise, the lexicon databasepresents all the words with the same orthogra-phy as the query but belonging to different lexicaltypes.
These lexical types are then linked to eachother as ?confusing?
in terms of the query word.Fifthly, we construct links between our lexicaltypes and POS?s of other lexicons such as ChaSenfrom OtherLex DB (3e).
To do this, we preparean interface (a mapping table) between our lexi-cal type system and the other lexicon?s POS sys-tem.
As this is a finite mapping it could be mademanually, but we semi-automate its construction.The similarity between types in the two databases(JACY and some other lexicon ) is calculated asthe Dice coefficient, where W (LA) is the numberof words W in lexical type L:sim(LA, LB) =2?
|(W (LA ?
LB)||W (LA)|+ |W (LB)|(1)The Dice coefficient was chosen because of itsgenerality and ease of calculation.
Any pairwhere sim(LA, LB) is above a threshold shouldpotentially be mapped.
The threshold must be setlow, as the granularity of different systems canvary widely.3.2.3 Manual ConstructionLinguistic discussion (3a) and implementationTODOs (3ciii) have to be entered manually.
Lin-guistic discussion is especially difficult to collectexhaustively since the task requires an extensivebackground in linguistics.
We have several lin-guists in our group, and our achievements in thistask owe much to them.
We plan to make the in-terface open, and encourage the participation ofanyone interested in the task.The on-line documentation is designed to com-plement the full grammar documentation (Siegel,2004).
The grammar documentation gives a topdown view of the grammar, giving the overall mo-tivation for the analyses.
The lexical-type docu-mentation gives bottom up documentation.
It caneasily be updated along with the grammar.Writing implementation TODOs also requiresexpertise in grammar development and linguis-tic background.
But grammar developers usuallytake notes on what remains to be done for eachlexical type anyway, so this is a relatively simpletask.After the database is first constructed, how isit put to use and updated in the treebanking cy-cles described in Figure 1?
Figure 4 illustratesthis.
Each time the grammar is revised based ontreebank annotation feedback, grammar develop-ers consult the database to see the current statusof the grammar.
After finishing the revision, thegrammar and lexicon DBs are updated, as are thecorresponding fields of the lexical type database.Each time the treebank is annotated, annotatorscan consult the database to make sure the chosenparse is correct.
Following annotation, the tree-bank DB is updated, and so is the lexical typedatabase.
In parallel to this, collaborators who are37Development (refinement)GRAMMARTreebanking (manual annotation)TREEBANKautomaticparsingfeedbackLEXICAL TYPEDATABASEWWWReferenceUpdating Grammar and Lexicon DBsReferenceUpdating Treebank DBLinguistic DiscussionFigure 4: Database Construction Intergrated with Treebanking CyclesChaSenJuman ALT-J/EThe Lexical TypeDatabaseEDICT LexicalResource2LexicalResource1ChaSenInterfaceJumanInterfaceALT-J/EInterfaceEDICTInterface Interface2Interface1Figure 5: Synthesis of Lexical Resourcesfamiliar with linguistics continue to enter relevantlinguistic discussions via the WWW.4 Lexical Type Database as a GeneralLinguistic ResourceIn this section, we discuss some of the ways thedatabase can benefit people other than treebankannotators and grammar developers.One way is by serving as a link to other lexi-cal resources.
As mentioned in the previous sec-tion, our database includes links to ChaSen, Ju-man, ALT-J/E, and EDICT.
Currently, in JapaneseNLP (and more generally), various lexical re-sources have been developed, but their intercor-respondences are not always clear.
These lexicalresources often play complementary roles, so syn-thesizing them seamlessly will make a Japaneselexicon with the widest and deepest knowledgeever.
Among our plans is to realize this bymeans of the lexical type database.
Consider Fig-ure 5.
Assuming that most lexical resources con-tain lexical type information, no matter how fineor coarse grained it is, it is natural to think thatthe lexical type database can act as a ?hub?
thatlinks those lexical resources together.
This willbe achieved by preparing interfaces between thelexical type database and each of the lexical re-sources.
Clearly, this is an intelligent way to syn-thesize lexical resources.
Otherwise, we have toprepare nC2 interfaces to synthesize n resources.The problem is that construction of such an inter-face is time consuming.
We need to further testgeneric ways to do this, such as with similarityscores, though we will not go on further with thisissue in this paper.Apart from NLP, how can the database be used?In the short term our database is intended to pro-vide annotators and grammar developers with aclear picture of the current status of the treebankand the grammar.
In the long term, we expect tocreate successively better approximations of theJapanese language, as long as our deep linguisticbroad coverage grammar describes Japanese syn-tax and semantics precisely.
Consequently, thedatabase would be of use to anyone who needs anaccurate description of Japanese.
Japanese lan-guage teachers can use its detailed descriptionsof word usages, the links to other words, and thereal examples from the treebank to show for stu-dents subtle differences among words that lookthe same but are grammatically different.
Lexi-cographers can take advantage of its comprehen-siveness and the real examples to compile a dic-tionary that contains full linguistic explanations.The confidence in the linguistic descriptions isbased on the combination of the precise grammarlinked to the detailed treebank.
Each improves theother through the treebank annotation and gram-mar development cycle as depicted in Figure 1.5 Related WorkTsuchiya et al (2005) have been constructing adatabase that summarizes multiword functional38expressions in Japanese.
That describes eachexpression?s linguistic behavior, usage and ex-amples in depth.
Notable differences betweentheir database and ours are that their database ismostly constructed manually while ours is con-structed semi-automatically, and that they targetonly functional expressions while we deal with allkinds of lexical types.Hypertextual Grammar development (Dini andMazzini, 1997) attempted a similar task, but fo-cused on documenting the grammar, not on link-ing it to a dynamic treebank.
They suggested cre-ating the documentation in the same file alongwith the grammar, in the style of literate program-ming.
This is an attractive approach, especiallyfor grammars that change constantly.
However,we prefer the flexibility of combining differentknowledge sources (the grammar, treebank andlinguistic description, in addition to external re-sources).The Montage project (Bender et al, 2004) aimsto develop a suite of software whose primary au-dience is field linguists working on underdocu-mented languages.
Among their tasks is to fa-cilitate traditional grammatical description fromannotated texts by means of one of their products,the Grammar export tool.
Although in the paperthere is little explicit detail about what the ?tradi-tional grammatical description?
is, they seem toshare a similar goal with us: in the case of Mon-tage, making grammatical knowledge assumed inunderdocumented languages explicit, while in ourcase making lexical types assumed in the treebankand the computational grammar understandableto humans.
Also, some tools they use are usedin our project as well.
Consequently, their pro-cess of grammatical description and documenta-tion looks quite similar to ours.
The differenceis that their target is underdocumented languageswhose grammatical knowledge has so far not beenmade clear enough, while we target a familiarlanguage, Japanese, that is well understood butwhose computational implementation is so largeand complex as to be difficult to fully compre-hend.Another notable related work is the COMLEXsyntax project (Macleod et al, 1994).
Their goalis to create a moderately-broad-coverage lexiconrecording the syntactic features of English wordsfor purposes of computational language analysis.They employed elves (?elf?
= enterer of lexicalfeatures) to create such a lexicon by hand.
Natu-rally, the manual input task is error-prone.
Thusthey needed to prepare a document that describesword usages by which they intended to reduceelves?
errors.
It is evident that the documentplays a role similar to our lexical type database,but there are important divergences between thetwo.
First, while their document seems to be con-structed manually (words chosen as examples oflexical types in the documentation are not alwaysin the lexicon!
), the construction process of ourdatabase is semi-automated.
Second, somewhatrelatedly, our database is electronically accessibleand well-structured.
Thus it allows more flexi-ble queries than a simple document.
Third, unlikeCOMLEX, all the lexical types in the databaseare actually derived from the working Japanesegrammar with which we are building the tree-bank.
That is, all the lexical types are definedformally.
Fourth, examples in our database are allreal ones in that they actually appear in the tree-bank, while most of the COMLEX examples werecreated specifically for the project.
Finally, we aredealing with all kinds of lexical types that appearin the treebank, but the COMLEX project targetsonly nouns, adjectives, and verbs.6 Future WorkWe are currently experimenting with movingsome of the information (in particular the typename and criteria) into the actual grammar files,in the same way as Dini and Mazzini (1997).
Thiswould make it easier to keep the information insync with the actual grammar.We have discussed the motivation, contents andconstruction of the lexical type database.
We planto evaluate the database (i) by measuring tree-bank inter-annotator agreement and (ii) by evalu-ating the coverage, the amount of spurious ambi-guity, and efficiency of the grammar before andafter introducing the database in the treebank-ing and grammar development cycles.
We ex-pect that treebank annotators will be more con-sistent when they can refer to the database andthat grammar developers can more easily find thegrammar?s flaws (like lack of lexical items andoverlapping implementations of the same lexical39type) by looking into the database.Although this paper deals with a lexical typedatabase of Japanese, the importance of such adatabase certainly holds for any large scale deepgrammar.
We use the tools from the DELPH-IN collaboration7 and plan to make our addi-tions available for groups working with other lan-guages.
In particular, we plan to construct a lex-ical type database for the Redwoods treebank,which is semi-automatically constructed from theEnglish Resource Grammar (ERG) (Flickinger,2000).AcknowledgementsWe would like to thank the other membersof Machine Translation Research Group, DanFlickinger, Stephen Oepen, and Jason Katz-Brown for their stimulating discussion.ReferencesEmily M. Bender, Dan Flickinger, Jeff Good, and Ivan A.Sag.
2004.
Montage: Leveraging Advances in GrammarEngineering, Linguistic Ontologies, and Mark-up for theDocumentation of Underdescribed Languages.
In Pro-ceedings of the Workshop on First Steps for the Documen-tation of Minority Languages: Computational LinguisticTools for Morphology, Lexicon and Corpus Compilation,LREC2004, Lisbon, Portugal.Francis Bond, Sanae Fujita, Chikara Hashimoto, ShigekoNariyama, Eric Nichols, Akira Ohtani, Takaaki Tanaka,and Shigeaki Amano.
2004a.
The Hinoki Treebank?
Toward Text Understanding.
In Proceedings of the5th International Workshop on Linguistically InterpretedCorpora (LINC-04), pages 7?10, Geneva.Francis Bond, Eric Nichols, and Sanae Fujita TakaakiTanaka.
2004b.
Acquiring an Ontology for a Funda-mental Vocabulary.
In 20th International Conferenceon Computational Linguistics (COLING-2004), pages1319?1325, Geneva.J.
W. Breen.
2004.
JMDict: a Japanese-mulitlingual dictio-nary.
In Coling 2004 Workshop on Multilingual Linguis-tic Resources, pages 71?78, Geneva.Ulrich Callmeier, Andreas Eisele, Ulrich Scha?fer, andMelanie Siegel.
2004.
The DeepThought core archi-tecture framework.
In Proceedings of LREC-2004, vol-ume IV, Lisbon.Ann Copestake, Fabre Lambeau, Benjamin Waldron, Fran-cis Bond, Dan Flickinger, and Stephan Oepen.
2004.
Alexicon module for a grammar development environment.In 4th International Conference on Language Resourcesand Evaluation (LREC 2004), volume IV, pages 1111?1114, Lisbon.7http://www.delph-in.net/Luca Dini and Giampolo Mazzini.
1997.
HypertextualGrammar Development.
In Computational Environmentsfor Grammar Development and Linguistic Engineering,pages 24?29, Madrid.
ACL.Dan Flickinger.
2000.
On building a more effi cient gram-mar by exploiting types.
Natural Language Engineering,6 (1) (Special Issue on Efficient Proceeding with HPSG,pages 15?28.Satoru Ikehara, Satoshi Shirai, Akio Yokoo, and HiromiNakaiwa.
1991.
Toward an MT system without pre-editing ?
effects of new methods in ALT-J/E?.
In ThirdMachine Translation Summit: MT Summit III, pages 101?106, Washington DC.
(http://xxx.lanl.gov/abs/cmp-lg/9510008).Hans-Ulrich Krieger and Ulrich Schafer.
1994.
T DL ?
atype description language for constraint-based grammars.In Proceedings of the 15th International Conference onComputational Linguistics.Sadao Kurohashi and Makoto Nagao.
2003.
Building aJapanese parsed corpus ?
while improving the parsingsystem.
chapter 14, pages 249?260.Catherine Macleod, Ralph Grishman, and Adam Meyers.1994.
The Comlex Syntax Project: The First Year.
InProceedings of the 1994 ARPA Human Language Tech-nology Workshop.Yuji Matsumoto, Akira Kitauchi, Tatsuo Yamashita, Yoshi-taka Hirano, Hiroshi Matsuda, Kazuma Takaoka, andMasayuki Asahara, 2000.
Morphological Analysis Sys-tem ChaSen version 2.2.1 Manual.
Nara Institute of Sci-ence and Technology, Dec.Stephan Oepen, Dan Flickinger, Kristina Toutanova, andChristoper D. Manning.
2002.
LinGO Redwoods: ARich and Dynamic Treebank for HPSG.
In Proceedingsof The First Workshop on Treebanks and Linguistic The-ories, pages 139?149, Sozopol, Bulgaria.Stephan Oepen, Dan Flickinger, and Francis Bond.
2004.Towards Holistic Grammar Engineering and Testing.Grafting Treebank Maintenance into the Grammar Re-vision Cycle.
In Proceedings of the IJCNLP WorkshopBeyond Shallow Analysis, Hainan,China.Kumi Sadakane and Masatoshi Koizumi.
1995.
On the na-ture of the ?dative?
particle ni in Japanese.
Linguistics,33:5?33.Melanie Siegel and Emily M. Bender.
2002.
Effi cient DeepProcessing of Japanese.
In Proceedings of the 3rd Work-shop on Asian Language Resources and InternationalStandardization, Taipei, Taiwan.Melanie Siegel.
2004.
JACY a practical Japanese HPSG.ms.Masatoshi Tsuchiya, Takehito Utsuro, Suguru Matsuyoshi,Satoshi Sato, and Seiichi Nakagawa.
2005.
A corpusfor classifying usages of japanese compound functionalexpressions.
In Proceedings of Pacific Association forComputational Linguistics 2005, Tokyo, Japan.40
