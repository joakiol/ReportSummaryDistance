Proceedings of EACL '99Representing a System of Lexical Types Using DefaultUnificationAl ine  V i l l av icenc ioComputer  LaboratoryUniversity of CambridgeNew Museums SitePembroke StreetCambridge CB2 3QGENGLANDAline.Vil lavicencio@cl.cam.ac.ukAbst rac tDefault inheritance is a useful tool forencoding linguistic generalisations thathave exceptions.
In this paper we showhow the use of an order independenttyped default unification operation canprovide non-redundant highly structuredand concise representation to specify anetwork of lexical types, that encodeslinguistic information about verbal sub-categorisation.
The system of lexicaltypes is based on the one proposed byPollard and Sag (1987), but uses themore expressive typed default featurestructures, is more succinct, and able toexpress linguistic sub-regularities moreelegantly.1 In t roduct ionSeveral authors have highlighted the importanceof using defaults in the representation f linguisticknowledge, in order to get linguistically adequatedescriptions for some natural anguage phenom-ena ((Gazdar, 1987), (Bouma, 1992), (Daelemanset al 1992), (Briscoe, 1993)).
Defaults have beenused in the definition of inflectional morphology,specification of lexical semantics, analysis of gap-ping constructions and ellipsis among others.
Inthis paper we use defaults to structure the lexicon,concentrating onthe description of verbal subcat-egorisation i formation.The issue of how to organise lexical informa-tion is especially important when a lexicalised for-malism like Categorial Grammar (CG) or Head-Driven Phrase Structure Grammar (HPSG) is em-ployed, since the burden of linguistic descriptionis concentrated in the lexicon and if lexical en-tries are organised as unrelated lists, there is asignificant loss of generalisation a d an increasein redundancy.
Alternatively, it is possible to useinheritance networks, which provide representa-tions that are able to capture linguistic regulari-ties about classes of items that behave similarly.This idea is employed in Pollard and Sag's (1987)sketch of an HPSG lexicon as a monotonic mul-tiple orthogonal inheritance type hierarchy.
How-ever, this work fail to make use of defaults, whichwould significantly reduce redundancy in lexicalspecifications and would enable them to elegantlyexpress sub-regularities (Krieger and Nerbonne,1993).
In this paper we demonstrate hat usingdefault unification, namely the order-independentand persistent version of default unification de-scribed in (Lascarides et al 1996b) and (Las-carides and Copestake, 1999), to implement a de-fault inheritance network results in a fully declar-ative specification of a lexical fragment based onPollard and Sag's (1987), but that is both moresuccinct and able to express elegantly linguisticsub-regularities, such as the marked status of sub-ject control of transitive subject-control verbs.In section 2, a brief description of the use of de-faults and YADU is given.
In section 3, we presentthe results of representing the proposed lexicalfragment in terms of default multiple inheritancenetworks.
Finally, we discuss the results achievedand future work.2 Defau l t  Inher i tance  and  YADUIn this work, a default multiple orthogonal inher-itance network is used to represent lexical infor-mation.
Thus, with different subnetworks used toencode different kinds of linguistic knowledge, theidea is that linguistic regularities are encoded nearthe top of the network, while nodes further downthe network are used to represent sub-regularitiesor exceptions.
Such an approach to representingthe lexicon has some advantages, like its abilityto capture linguistic generalisations, conciseness,uniformity, ease of maintenance and modification,and modularity (Daelemans et al 1992).This default multiple inheritance network is im-261Proceedings of EACL '99plemented using YADU (Lascarides and Copes-take, 1999), which is an order independent defaultunification operation on typed feature structures(TFS).
YADU uses an  extended efinition of TFSScalled typed default feature s t ructures  (TDFSs), toexplicitly distinguish the non-default informationfrom the default one, where a TDFS is composedby an indefeasible TFS ( I ) ,  which contains thenon-default information and a defeasible TFS (D),which contains the default information, with a '/ 'separating these two TFSS (I on the left-hand andD on the right-hand).
As a consequence, duringdefault unification on-default information can al-ways be preserved and only consistent default in-formation is incorporated into the defeasible TFS.Another important point is that default unifica-tion of two feature structures is deterministic, al-ways returning a single value.
Moreover, defaultspecifications can be made to act as indefeasibleinformation, using YADU's DefFill operation (Las-carides and Copestake, 1999), that has a TDFS asinput and returns a TFS by incorporating all thedefault information into the indefeasible TFS, sayat the interface between the lexicon and the rest ofthe system.
YADU also provides the possibility ofdefining defaults that are going to persist outsidethe lexicon, with the p operator (Lascarides et al1996b), which was already shown to be significant,for example, for the interface between the lexiconand pragmatics, where lexically encoded semanticdefaults can be overridden by discourse informa-tion (Lascarides et al 1996a).
Furthermore, YADUsupports the definition of inequalities, which areused to override default reentrancies when no con-flicting values are defined in the types involved(Lascarides and Copestake, 1999).YADU (~'~) can be informally defined as an op-eration that takes two TDFSS and produces a newone, whose indefeasible part is the result of uni-fying the indefeasible information defined in theinput TDFSs; and the defeasible part is the resultof combining the indefeasible part with the maxi-mal set of compatible default elements, accordingto type specificity, as shown in the example below.Throughout this paper we adopt the abbreviatorynotation from (Lascarides et al 1996b) where In-defensible/De feasible is abbreviated to Indefeasi-ble if Indefeasible = Defensible and T/Defeasibleis abbreviated to ~Defensible.t'~-t?
I=  ~ n =?
D= :~For a more detailed introduction to YADU see(Lascarides and Copestake, 1999).3 The  proposed  lex ica l  networkThe proposed verbal subcategorisation hierar-chy 1, which is based on the sketch by Pollard andSag (1987) is shown in figure i.
In this hierarchy,types are ordered according to the number andtype of the subcategorisation arguments theyspecify.
The subcategorisation arguments of aparticular category 2 are defined in its SUBCATfeature as a difference-list.
Thus, the verbalhierarchy starts with the intrans type, whichby default specifies the need for exactly oneargument, the NP subject, where e-list is a typethat marks the end of the subcategorisation list:(1) intrans type:\[SuBCAT: <HEAD: np, TAIL: /e- l ist>\].Now all the attributes pecified for the sub-categorised subject NP in intrans are inheritedby instances of this type and by its subtypes 3,namely, trans and intrans-control.
However, sincethese types subcategorise for 2 arguments, theyneed to override the default of exactly one argu-ment, specified by the e-list value for TAIL, andadd an extra argument: an NP object for trans,and a predicative complement for intrans-control.In this way, the specification of the trans type is:(2) trans type:\[SUBCAT:<TAIL:/e~list>\].HEAD: r ip ,  TAIL: TAIL:Similarly, the instances and subtypes of transinherit from intrans all the attributes for thesubject NP and from trans the attributes for theobject NP, in addition to their own constraints.With the use of defaults there is no need forspecifying a type like strict-trans, as defined inPollard and Sag's hierarchy, since it containsexactly the same information as their trans type,except that the former specifies the SUBCATFor reasons of space we are only showing the partsof the lexical hierarchy that are relevant for this paper.2Linguistic information is expressed using a sim-plified notation for the SUBGAT list, and for reasons ofclarity, we are only showing categories in an atomicform, without the attributes defined.3In this paper, we are not assuming the coveragecondition, that any type in a hierarchy has to be re-solvable to a most specific type.262Proceedings of EACL '99inlranslntrans-control tmns walkin~ans-rai d i~ 'ans '~~ ..... ) ike?
trans-controlmtra.ns-equi\]try ~-equi\[,,,,Ntrans-raising / "~ super-equigive //subject-controlbelieve .
/  " .
ask..." promtsepersuadeFigure 1: The Proposed Hierarchyattribute as containing exactly two arguments:(3) Pollard and Sag's strict-trans type:\[SUBCAT: <HEAD: rip, TAIL: HEAD: np, TAIL:TAIL: e-list>\],while the latter works as an intermediate type,where SUBGAT contains at least two arguments,as shown in (4), offering its subtypes the possibil-ity of adding extra arguments.
(4) Pollard and Sag's trans type:\[SUBCAT: <HEAD: rip, TAIL: HEAD: np>\],Defaults automatically provide this possibility,by defeasibly marking the end of the subcat-egorisation list, which defines the number ofarguments needed, avoiding the need for theseredundant specifications, where the informationcontained in one lexical sign is repeated in others.Furthermore, these defaults are used to capturelexical generalisations, but outside the lexicon,we want them to act as indefeasible constraints;therefore, we apply the DefFill operation to thesedefault specifications, except where marked aspersistently default.
In this way, a type liketrans, after DefFill, has the consistent defaultsincorporated and specifies, indefeasibly the needfor exactly two arguments, as Pollard and Sag'sstrict-trans hown in (3):(5) trans type DefFilled:\[SUBCAT: <HEAD: np, TAIL: HEAD: np, TAIL:TAIL: e-list>\].Apart from supporting this kind of gen-eralisation, defaults are also used to expresssub-regularities, as, for example, in the case ofsuper-equi and subject-control verbs, which areboth exceptions to the general case specifiedby trans-equi.
The type trans-equi encodestransitive-equi verbs by specifying that thepredicative complement of the transitive verbis by default controlled by the object (e.g.
Theteacher persuaded the doctor to go):(6) trans-equi type:\[SUBCAT: <TAIL: HEAD: np/ \ [ \ ] ,  TAIL: TAIL:HEAD: vp( INF, SUBCAT:<HEAD: np/ \ [ \ ]  >),TAIL: TAIL: TAIL: e-list>\].For super-equi verbs, the predicative comple-ments can be controlled by either the object orthe subject.
Therefore, the default object-controlin the super-equi type, inherited from trans-equi,should be explicitly marked with the p operatorto persist until discourse interpretation, as shownin (7), since all other features are made indefeasi-ble prior to parsing.
(7) super-equi type:\[SUBCAT: ~TAIL: HEAD: np/v \['~, TAIL:TAIL: HEAD: Yp( INF, SUBCAT: ~HEAD:np/v \[\] >) >\].This default would only survive in the absenceof conflicting discourse information (as in e.g.
:They needed someone with medical training.
So,the teacher asked the doctor to go (since she hadnone), which is object-controlled).
Otherwise,if there is conflicting information, this default isrejected (as in e.g.
: They needed someone withteaching experience.
So, the teacher asked thedoctor (to be allowed) to go, where the controlis by the subject).
A description of the precisemechanism to do this can be found in (Las-carides et al 1996a).
Transitive subject-controlverbs follow the pattern specified by trans-equi,but contrary to this pattern, it is the subjectthat controls the predicative complement andnot the object (e.g.
The teacher promised to go):(8) subject-control type:\[SUBCAT: <HEAD: np \ [ \ ] ,  TAIL: HEAD: np/ff \ ] ,TAIL: TAIL: HEAD: vp( INF, SUBCAT: <HEAD:rip\[\] >) >, \[\] ~ \[~\].In this case, the constraint on subject-controlspecifies that the coindexation is determined bythe subject, and as it does not conflict with the de-fault coindexation by the object-control, inequal-ities (~) are used to remove the default value.263Proceedings of EACL '99As a result of using default inheritance to repre-sent information about verbal subcategorisation,it is possible to obtain a highly structured andsuccinct hierarchy.
In comparison with the hier-archy defined by Pollard and Sag (1987), this oneavoids the need of redundant specifications andassociated type declarations, like the strict-transtype, which are needed in a monotonic encoding.In this way, while Pollard and Sag's hierarchy isdefined using 23 nodes, this is defined using only19 nodes, and by defining 2 more nodes, it is possi-ble to specify subject-control and super-equi types.By avoiding this redundancy, there is a real gain inconciseness, with the resulting hierarchy extend-ing the information defined in Pollard and Sag's,with the addition of sub-regularities, in a morecompact encoding.4 Conc lus ionIn this paper we demonstrated how the use of de-fault unification in the organisation of lexical in-formation can provide non-redundant descriptionof lexical types.
In this way, we implemented adefault inheritance network that represents ver-bal subcategorisation nformation, using YADU.
Itresulted in a significant reduction in lexical re-dundancy, with linguistic regularities and sub-regularities defined by means of TDFSS, in a lexi-con that is succinctly organised, and that is alsoeasier to maintain and modify, when compared toits monotonic ounterpart.
The resulting verbalhierarchy is able not only to encode the same in-formation as Pollard and Sag's but also to spec-ify more sub-regularities, in a more concise way.Such an approach as the advantage ofoptionallyallowing default specifications to persist outsidethe lexicon, which is important for the specifica-tion of control in super-equi verbs and for lexicalsemantics.
Moreover, as an order independent op-eration, it provides a declarative mechanism fordefault specification, with no cost in formal ele-gance.
Finally, as YADU operates directly on fea-ture structures, defaults are allowed as a fully in-tegrated part of the typed feature structure sys-tem, and, as a consequence YADU integrates wellwith constraint-based formalisms.
Further workwill complement these results by comparing theadequacy of different default unification oPera-tions, like the one used in DATR, for this kindof linguistic description.
This work is part of alarger project concerned with the investigation ofgrammatical cquisition within constraint-basedformalisms.5 AcknowledgementsI would like to thank Ted Briscoe, Ann Copes-take and Fabio Nemetz for their comments andadvice on this paper.
Thanks also to the anony-mous reviewers for their comments.
The researchreported on this paper is supported by doctoralstudentship from CAPES/Brazil.ReferencesBouma, Gosse.
1992.
Feature Structures and Non-monotonicity.
Computational Linguistics, 18.2.Briscoe, Ted.
1993.
Introduction.
Inheritance, De-faults and the Lexicon.
Ted Briscoe, Ann Copes-take and Valeria de Paiva eds.
Cambridge Uni-versity Press, Cambridge.Daelemans, Walter, Koenraad De Smedt and Ger-ald Gazdar.
1992.
Inheritance in Natural Lan-guage Processing.
Computational Linguistics,18.2.Gazdar, Gerald.
1987.
Linguistic Applicationsof Default Inheritance Mechanisms.
Linguis-tic Theory and Computer Applications.
PeteWhitelock, Mary M. Wood, Harold Somers,Rod Johnson and Paul Bennett eds.Krieger, Hans-Ulrich.
and John Nerbonne.
1993.Feature-Based Inheritance Networks for Com-putational Lexicons.
Inheritance, Defaults andthe Lexicon.
Ted Briscoe, Ann Copestake andValeria de Paiva eds.
Cambridge UniversityPress, Cambridge.Lascarides, Alex, Ann Copestake and Ted Briscoe.1996a.
Ambiguity and Coherence.
Journal ofSemantics, 13.1, 41-65.Lascarides, Alex, Ted Briscoe, Nicholas Asher andAnn Copestake.
1996b.
Order Independent Per-sistent Typed Default Unification.
Linguisticsand Philosophy, 19.1, 1-89.Lascarides, Alex and Ann Copestake.
1999.Default Representation i  Constraint-basedFrameworks.
To appear in Computational Lin-guistics, 25.2.
An earlier version of the paperis available at http://www.csli.stanford.edu/,-~aac/papers/yadu.gzPollard, Carl.
and Ivan A.
Sag.
1987.
Information-Based Syntax and Semantics, CSLI lecture notesseries, Number 13.264
