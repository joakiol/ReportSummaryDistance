Proceedings of the 5th Workshop on Important Unresolved Matters, pages 49?56,Prague, Czech Republic, June 2007. c?2007 Association for Computational LinguisticsFinding Variants of Out-of-Vocabulary Words in ArabicAbdusalam F.A.
Nwesri S.M.M.
Tahaghoghi Falk ScholerSchool of Computer Science and Information TechnologyRMIT University, GPO Box 2476V, Melbourne 3001, Australia{nwesri,saied,fscholer}@cs.rmit.edu.auAbstractTransliteration of a word into another lan-guage often leads to multiple spellings.
Un-less an information retrieval system recog-nises different forms of transliterated words,a significant number of documents will bemissed when users specify only one spellingvariant.
Using two different datasets, weevaluate several approaches to finding vari-ants of foreign words in Arabic, and showthat the longest common subsequence (LCS)technique is the best overall.1 IntroductionThe pronunciation of a word in one language isconverted into the phonemes of another languagethrough transliteration.
This is particularly com-mon with proper nouns.
However, phonetics dif-fer across languages, and transliteration usually re-sults in many spellings for the same word.
Thisis an issue even across languages that use substan-tially the same character set; simple examples wouldbe ?colour?
and ?color?
across British and Ameri-can usage, and ?ambience?
and ?ambiance?
acrossFrench and English.A change in character sets compounds the prob-lem: for instance, there are at least 32 Englishforms for the Arabic name of the Libyan leader?Kaddafi?,1 and Nwesri et al (2006) have identi-fied 28 different spellings for the name of the for-mer Serbian president Milosevic in the eleventh TextREtrieval Conference (TREC) Arabic newswire col-lection.
Users typically submit only one spellingvariant in their query, and current Arabic text re-trieval systems return only documents that containthat variant (Abdelali et al, 2004).
We apply tech-1http://www.geocities.com/Athens/8744/spelling.htmniques used to identify similar strings in other lan-guages such as English, and present a novel ap-proach to identify and retrieve different variants offoreign words in Arabic.2 The Arabic LanguageArabic is a Semitic language written from right toleft, with most words derived from three-characterroot words.
The Arabic alphabet has 28 characters,each with a distinct sound.
Short vowels do not haveany associated characters, but are instead indicatedby diacritics attached to other characters.
For ex-ample, the letter 	?
/f/ with the diacritic Fatha 	?is pronounced /fa/,2 with the diacritic Kasra 	?
ispronounced /fI/, and with the diacritic Damma 	?
ispronounced /fU/.In general written Arabic, diacritics are not in-dicated; readers must rely on context to determineimplicit diacritics, and so how the word should bepronounced.
For example, some of the variants ofthe word I.
J?
are I.J?
/kataba/ ?he wrote?, I.J?
/kU-tUb/ ?books?, or I.
J?
/kUtIba/ ?is written?.There are also three long vowels ?
representedby the letters { @ ??}
?
that are more pronouncedthan short vowels.
For instance, the letter 	?
canbe followed by the long vowel @ /a:/ to form A 	?
/fa:/,by?
/u:/ to form ?
?
/fu:/, and by ?/i:/ to form ??
/fi:/.2.1 Foreign WordsFrom an information retrieval (IR) perspective, for-eign words in Arabic can be classified into two gen-eral categories: translated and transliterated (Nwesriet al, 2006).
Translated words, sometimes referredto as Arabised words, are foreign words that aremodified or remodelled to conform to Arabic word2We use the International Phonetic Alphabet.49paradigms, and are well assimilated into the lan-guage.
The assimilation process includes changesin the structure of the borrowed word, includingsegmental and vowel changes, addition or dele-tion of syllables, and modification of stress pat-terns (Al-Qinal, 2002).
Foreign words of this cate-gory usually have a single consistent spelling vari-ant, for example ??Q?
?virus?, 	?J?P@ ?archive?,and ?KX@P ?radio?.Where equivalent native terms are not availableearly enough for widespread adoption, foreign termsare used directly with their original pronunciationrepresented using Arabic letters.
As these do notappear in standard Arabic lexicons ?
that may in-clude adopted words ?
they are considered to beOut-Of-Vocabulary (OOV) words.With transliterated words, the phonemes of a for-eign word are replaced with their nearest Arabicequivalents.
Since Arabic phonemes cannot repre-sent all phonemes found in other languages, the orig-inal phonemes are usually not represented uniformlyby different transliterators, resulting in multiplespelling variants for the same foreign word (Stallsand Knight, 1998).Faced with the need to use new foreign terms, na-tive speakers often cannot wait for formal equiva-lents to be defined.
This is particularly true for newsagencies, which encounter new foreign nouns andtechnical terms daily.
This urgency leads to moretransliteration than translation, with the associatedproblem of multiple spellings.2.2 Spelling VariantsIn Arabic, short vowels must be indicated using dia-critics, but these are rarely used in general text, andthere are no standard rules on when and where di-acritics must be indicated.
Context does not helpin predicting diacritics for foreign words such asproper nouns or technical terms, and so long vowelsare often used to make the pronunciation explicit inthe spelling of the word without relying on diacrit-ics.
This, too, is subject to variation; some translit-erators add a long vowel after each consonant in theword, while others add just enough long vowels toclarify word segments with ambiguous pronuncia-tion.The absence of certain sounds in Arabic, andvarying pronunciations across dialects, also con-tributes to the multiplicity of spellings.
For instance,the sound /g/ has no standard equivalent in Ara-bic, since transliterators represent it according tohow they pronounce it.
For instance, the Englishletter G /g/ is at times mapped to the Arabic let-ters  	?
/G/, ?
/q/, or k.
/Z/ (Abduljaleel and Larkey,2003); we have also observed it mapped to the let-ter ?
/k/: 	??
?AK.
P?
?, 	??
?AK.
P??, 	??
?AK.
P?k.
,and 	??
?AK.
P??
are transliterations of ?Gorbachev?we have found on the Web.Similarly, the interpretation of character combi-nations varies between transliterators.
Moreover,Typographical and phonetic errors during translit-eration may add even more variants (Borgman andSiegfried, 1992).2.3 Retrieval of VariantsWhen different variants of a word exist, only a sub-set of related documents can be found when thesearch uses only one variant.
Typical search en-gine users are unlikely to recognise the problem andhence do not add other variants to their query.
Cur-rently, major search engines such as Google, Yahoo,and MSN search use exact match for Arabic search,and no publicly available Arabic Information Re-trieval (AIR) system has been reported to retrievedifferent spelling variants (Abdelali et al, 2004).In this paper we explore how the different vari-ants of a foreign word may be captured.
We testexisting similarity techniques, and introduce threetechniques to search for variants of foreign wordsin Arabic.
In the first technique, we convert differ-ent variants to a single normalised form by remov-ing vowels and conflating homophones.
In the sec-ond technique, we extend the well-known Soundextechnique ?
commonly used to identify variants ofnames in English ?
to the OOV problem in Arabic,and in the third technique, we modify the EnglishEditex algorithm to identify similar foreign wordsin Arabic.3 Related WorkApproaches to identify similar-sounding but differ-ently spelt words have been heavily investigated inEnglish; among these are techniques that make useof string or phonetic similarity.50String similarity approaches include the Edit Dis-tance (Hall and Dowling, 1980), used to measurethe similarity of two strings by counting the minimalnumber of character insertions, deletions, or replace-ments needed to transform one string into another.To transpose a string s of length n into a string tof length m, edit(m,n) computes the minimal stepsrequired as follows:edit(0, 0) = 0edit(i, 0) = iedit(0, j) = jedit(i, j) = min[edit(i ?
1, j) + 1,edit(i, j ?
1) + 1,edit(i ?
1, j ?
1) + d(si, ti)]where d(si, ti) = 1 if si = ti, 0 otherwise.This measure can be used to rank words in thecollection with respect to a query word.
Zobel andDart (1995) showed that Edit Distance performedthe best among the techniques they evaluated formatching English names.
It is not known how thistechnique will perform with Arabic words.Another candidate approach that can be usedto identify similar foreign words in Arabic isn-grams (Hall and Dowling, 1980).
This approachis language independent; the strings are divided intograms (substrings) of length n, and the similarity ofthe strings is computed on the basis of the similarityof their n-grams.
Pfeifer et al (1996) compute thesimilarity as the number of shared grams divided bythe total number of distinct grams in the two strings.gramCount = | Gs ?
Gt || Gs ?
Gt |where Gs is the set of grams in string s. For ex-ample, with n=2, the similarity of ?ahmed?
and?ahmmed?
using this measure is 0.8 because bothstrings contain the four 2-grams ah, hm, me, anded, while there are five distinct 2-grams across thetwo strings.Gram distance (Ukkonen, 1992) is another stringsimilarity technique.
When grams are not repeated?
which is the case in names ?
the similarity iscomputed as (Zobel and Dart, 1996):gramDist(s, t) =| Gs | + | Gt | ?2 | Gs ?
Gt |According to this measure, the similarity between?ahmed?
and ?ahmmed?
is 1.With the Dice (1945) measure, the similarity ofstrings s and t is computed as twice the number ofcommon n-grams between s and t, divided by thetotal number of n-grams in the two strings:Dice(s, t) = 2?
| Gs ?
Gt || Gs | + | Gt |where Gs denotes the set of n-grams in s, and Gtdenotes the set of n-grams in t.The longest common subsequence (LCS) algo-rithm measures the similarity between two stringsbased on the common characters in the twostrings (Wagner and Fischer, 1974; Stephen, 1992).Similarity is normalised by dividing the length ofthe common subsequence by the length of the longerstring (Melamed, 1995).
The similarity between be-tween ?ahmed?
and ?ahmmed?
is (5/6=0.833).Phonetic approaches to determine similarity be-tween two words include the well-known Soundexalgorithm developed by Odell and Russell, patentedin 1918 and 1922 (Hall and Dowling, 1980).
Thishas predefined codes for the sounds in a language,with similar-sounding letters grouped under onecode.
During comparisons, all letters in a word barthe first one are encoded, and the resulting represen-tation is truncated to be at most four characters long.A variant of Soundex is the Phonix algorithm (Gadd,1990), which transforms letter groups to letters andthen to codes; the actual mappings are different fromSoundex.
Both Soundex and Phonix have been re-ported to have poorer precision in identifying vari-ants of English names than both Edit Distance andn-grams (Zobel and Dart, 1995).Aqeel et al (2006) propose an Arabic version ofEnglish Soundex (Asoundex-final).
They include di-acritics in a list of Arabic names, and created queriesby altering some of these names by adding, deleting,or inserting characters.Most Arabic names are meaningful words ?
forexample, Y?m?
?the praised one?
?
and rarely dohave spelling variants.
This leads to morphologicalambiguity as names may match verbs, pronouns andother categories of the language.
We have found thatusing Asoundex-final with the misspelt query 	??
?Eon an Arabic collection with 35 949 uniquewords returns ??j.
m' ?exaggeration?, 	?
Qm' ?shebecomes sad?, ??
?m' ?she resolves?, 	?
?m' ?shehelps?, 	?
?m' ?improvement?, 	?
?m' ?immun-isation?, ?
?m' ?she governs?, ?
Q?E ?she defeats?.Moreover, it is not clear when and how diacritics51are removed, nor where the long vowel ?belongsin their implementation.Editex, developed by Zobel and Dart (1996),enhances the Edit Distance technique by incorpo-rating the letter-grouping strategy used by Soundexand Phonix, and has been shown to have betterperformance than these two algorithms, as well asEdit Distance, on a collection of 30 000 distinctEnglish names.
The similarity between two stringss and t is computed as:edit(0, 0) = 0edit(i, 0) = edit(i ?
1, 0) + d(si ?
1, s1)edit(0.j) = edit(0, j ?
1) + d(tj ?
1, tj)edit(i.j) = min[edit(i ?
1, j) + d(si ?
1, si),edit(i, j ?
1) + d(tj ?
1, tj),edit(i ?
1, j ?
1) + r(si, tj)]where: r(si, tj) is 0 if si=tj , 1 ifgroup(si)=group(tj), and 2 otherwise; andd(si, tj) is 1 if si 6= tj and si is ?h?
or ?w?, andr(si, tj) otherwise.4 DataWe used two different data sets.
The first set is gen-erated from text crawled from the Web, and the sec-ond is prepared by manual transliteration of foreignwords from English to Arabic.4.1 Crawled DataThis set is derived from a one-gigabyte crawl of Ara-bic web pages from twelve different online newssites.
From this data we extracted 18 873 073 Ara-bic words, 383 649 of them unique.
We used theMicrosoft Office 2003 Arabic spellchecker to builda reference list of OOV words.
To avoid dupli-cates in the 40 514 OOV words returned by thespellchecker, we removed the first character if it isan Arabic preposition, and if the string remainingafter that character exists in the collectionWe alsoremoved the definite article ?Al?
to obtain a listof 32 583 words.
Through manual inspection, weidentified 2 039 foreign words.To evaluate alternative techniques, we use a ref-erence list of foreign words and their variants.
Toidentify variants, we generated all possible spellingvariants of each word according to the patterns wedescribe in Section 4.1.1, and kept only the patternsthat exist in our collection; 556 clusters of foreignTable 1: Variants of the word ?Beckham?
generatedby adding vowels??K.
??
AK.
???K.
??JK.???K.
???
AK.
????K.
???JK.?A?K.
?A?
AK.
?A??K.
?A?JK.???K.
???
AK.
????K.
??
?JK.words remain.4.1.1 Generation of VariantsTo generate foreing words variants, we first re-move any vowels and then reinsert vowel combi-nations of the three long vowels {?
?
@} betweenthe consonants that remain.
For a word of length n,this process generates 4(n?1) variants.
Consider theword ?A?JK.
?Beckham?.
We remove vowels to ob-tain ??K.
, and then add all possible vowels to obtainthe variants shown in Table 1.As discussed in Section 2.2, inconsistent repre-sentation of sounds between transliterators adds tothe variations in spelling.
Thus, the number ofpossible transliterations for a foreign word is givenby 4(n?1) multiplied by the number of possibletransliterations for each of its consonants.
In our ex-ample, the letter  ? /q/ may also be used in placeof ? /k/, and so we generate another set; since therepresentation tends to be consistent within a givenword, we need to create only as many sets as thereare Arabic representations for the sound.We validate the generated variants against ourcollection and keep only those that appear in thecrawled text.
For our example word ?Beckham?,we found only two correct variants: ?A?JK.
and ??JK.
.Some of the generated variants could be correct Ara-bic words that would be valid when checked againstthe collection.
Many of the generated clusters werefound to be noisy ?
that is, they included many na-tive Arabic words.
We manually corrected theseclusters by removing unrelated Arabic words.
Theaverage cluster length is 2.8 words; the smallestcluster has two variants, and the largest has nine,with a total of 1 718 words.4.2 Transliterated DataOur second collection reflects one pattern in whichOOV words are introduced by ordinary users52transliterating English words into Arabic.
We ex-tracted a list of 1 134 foreign words from theTREC 2002 Arabic collection, and passed these tothe Google translation engine to obtain their En-glish equivalents.
We manually inspected these andcorrected any incorrect translations.
We also re-moved the 57 words mapped by Google to multi-ple English words.
These are usually a word anda possible conjunction or preposition.
For examplethe word h. Q.?????
?Luxembourg?
is transliteratedto ?For June?.
We passed the English list to sevenArabic native speakers and asked them to translit-erate each word in the list back into Arabic, evenif the word has an Arabic equivalent.
Four of thetranslators are PhD candidates in the sciences or en-gineering, and have finished an advanced-level En-glish course; the other three are currently enrolledin an intermediate-level English course.
Participantswere asked to type in their transliteration next toeach English word.
We noticed that some translit-erators had only basic computing skills, and mademany spelling mistakes.
For example, instead oftyping the character @, we found that transliteratorssometimes mistakenly type ?.We clustered transliterations by the original En-glish words, removed duplicates from each cluster,and also removed 103 clusters where all transliter-ators agreed on the same version of transliteration.This left 3 582 words in 207 clusters of size 2, 252clusters of size 3, 192 clusters of size 4, 149 clus-ters of size 5, 93 clusters of size 6, and 47 clustersof size 7.
Finally, we incorporated these transliter-ations into a list with 35 949 unique Arabic nativewords prepared by Nwesri et al (2006).5 AlgorithmsWe propose three algorithms to identify foreignwords in Arabic text.
The first is normalisation,which aims to handle different types of typograph-ical errors described in Section 2.1.
The secondand third techniques are extensions to the EnglishSoundex and Editex techniques.5.1 NormalisationTo deal with different typographical styles in writ-ing foreign words, we first remove vowels from ev-ery foreign term.
We keep vowels unchanged if theyTable 2: Normalisation of equivalent consonants toa single formOriginal Normalised?
?
P ?
?H ?
?h.?
?
?
?H Hare the first or the last characters of the word, sincethey are generally pronounced in Arabic.
The longvowel letters are sometimes used as consonants, andthese may be followed immediately by another longvowel.
For example, the vowel letter ?/i/ may befollowed by the long vowel ?
/u:/ to form ?K/ju:/.For such cases, we keep the first vowel and removethe second.
Two vowels can also be used togetheras diphthongs, as in ?
@ /aw/ and ?
@ /aj/.
We re-tain vowels that are followed by another vowel orpreceded by a vowel that forms a diphthong.
Wealso conflate similar consonants based on statisti-cal analysis of letter mappings between English andArabic (Abduljaleel and Larkey, 2003; Stalls andKnight, 1998), and confirming through a web searchthat these consonants are used interchangeably inweb documents.3 Table 2 shows all consonants weconsider to be equivalent.Our process may lead to ambiguity where a simi-lar native word exists; for instance, the spelling vari-ants ?A?JK.
and ??JK.
for ?Beckham?
are normalisedto ??K.
, which is identical to the Arabic word mean-ing either ?how much?
or ?in you?.
Adding a cus-tom prefix to the normalised form is one way to ad-dress this issue; we add the letter ?
??
to the begin-ning of each normalised word.
For example, variantsfor Beckham are thus normalised to ??K.
?.
Since theletter ?
never occurs at the beginning of any Arabicword, no ambiguity remains.5.2 Phonetic ApproachOur phonetic algorithm aims to replace similarsounds with a single code.
As noted earlier, we donot envisage that this algorithm has use for nativeArabic words, as these are usually distinct, and pro-3All phonetic groups are created based on transliterationmapping between English and Arabic letters53Table 3: Mappings for our phonetic approachCharacters Code@ ?
?0?
H ?
H 	?
?
1?
?
P ?
2X 	X 3h.?
?
?
4?
?
h 5?
6?
7	?
8?
9H.
AP Bp Cnunciation is rarely ambiguous.
Table 3 shows Ara-bic letters and their corresponding codes.
To nor-malise foreign words, we replace each letter but thefirst by its phonetic code, and drop any vowels.
Wehave found ?
as have (Aqeel et al, 2006) and (Zo-bel and Dart, 1996) ?
that it is better to encode allletters, rather than only the first four characters; forbrevity, we show only the results for coding all char-acters, under the label ?Soutex?.5.3 Arabic EditexBased on groups identified in Table 4, we have mod-ified the Editex algorithm of Zobel and Dart (1996).It works as in English except that we drop the func-tionality used to consider the two silent charactersin the English version as silent characters in Arabicare rare and usually occur at the beginning or at theend of the word.
Specifically, we replace d(si, tj)by r(si, tj).
We call the Arabic version of this algo-rithm ?AEditex?.6 EvaluationTo evaluate the effectiveness of our approaches, weconsider each word in the list to be a query, andpose this to the entire collection.
The query resultshould be other words in the same cluster.
We con-sider every word to be a query to avoid any bias to-wards string similarity techniques as phonetic basedTable 4: AEditex letter groupsCharacters Group@ ?
?0H H 1H ?
2?
?
3?
?
4?
?
5P ?
6X 	X 7h.?
?
?
8techniques fail to capture misspelled words whereasstring similarity techniques do.The results returned by the different algorithmsdescribed in the previous section are not directlycomparable, as some algorithms return rankedresults and others return unranked results.
Rankedresults could also form a weak ordering in whichmultiple results belong to the same rank (Ragha-van et al, 1989).
Standard information retrievalmeasures are not appropriate for evaluating suchtechniques.
Zobel and Dart (1996) address this byusing standard precision and recall, but randomlypermute results of equal ranks and calculate theaverage of recall and precision over ten differentpermutations.
Raghavan et al(1989) proposea different measure called Probability of Rele-vance (PRR).
This measure assumes that the userrandomly selects a document from the topmostranks.
At any point the precision is defined as theprobability that the random examined document isrelevant.
Recall is the number of relevant documentsthat the user has seen so far.
If we require NRrelevant documents ?
in our case, words ?
from aranked result, we start by looking at the top answerand continue until we get to the NRth relevantword at rank k. The PRR measure is calculatedas (Raghavan et al, 1989):PRR = NRNR + j + (i.s)/(r + 1)Where j is the number of non-relevant words foundin ranks before k, s is the number of remaining rel-evant words still to be retrieved in rank k, i is thenumber of non-relevant words in rank k, and r is the5400.20.40.60.810  0.5  1PrecisionRecallNORMSoutexLCSAEditexEdit DistancegramCountDiceAsoundex-FinalgramDistExact matchFigure 1: Results on the crawled datanumber of relevant words in rank k. Interpolationis used to smooth results and calculate an averageacross all queries.6.1 Results and DiscussionResults from running algorithms using queries inboth datasets against their respective collection areshown in Figure 1 and Figure 2.
The average preci-sion (average PRR in our case) for each algorithm isshown in Table 5.
The algorithms produce signifi-cantly better results than exact match (p<0.0001).On the first data set, NORM performs the best.LCS is the second best algorithm, followed by AEdi-tex and Edit Distance.
Soutex shows better perfor-mance than all other algorithms except NORM af-ter 50% recall, but performs poorly at lower recalllevels.
Both the gramCount and Dice algorithmshave similar performance with average precision ataround 46%.
Asoundex-final and gramDist showpoorer performance than other algorithms, with av-erage precision at 38%.Asoundex-final performs poorly; As mentionedearlier, the absence of diacritics in typical Arabictext makes it hard to generalise this technique to re-trieve names.Results from the transliterated dataset generallyfavour the string similarity algorithms.
LCS outper-forms all other techniques with an average precisionof 78%, followed by Edit Distance at 70%, and thenAEditex at 62%.
Soutex performs better than both00.20.40.60.810  0.5  1PrecisionRecallLCSEdit DistanceAEditexSoutexgramCountDiceNORMAsoundex-FinalgramDistExact matchFigure 2: Results on the transliterated dataTable 5: Average precision resultsData setAlgorithm First SecondNORM 0.660 0.536LCS 0.619 0.782Edit Distance 0.572 0.700AEditex 0.576 0.624Soutex 0.530 0.590gramCount 0.451 0.595Dice 0.457 0.568Asoundex-final 0.368 0.446gramDist 0.376 0.401Exact Match 0.300 0.261the gramCount and Dice algorithms.
It performsbetter than AEditex at 50% and higher recall lev-els.
NORM performs better than the Asoundex-finaland gramDist algorithms.
The gramDist algorithmis again the worst.
All algorithms showed signifi-cant improvements above the baseline (p<0.0001).Although NORM and Soutex algorithms do notproduce the best performance, they have the advan-tage of being run at index time to encode foreignwords which can be later used in retrieval.
The al-ternative algorithms such as Edit Distance are morecomputationally expensive and can only be used atquery time.557 ConclusionForeign words transliterated into Arabic can appearwith multiple spellings, hindering effective recall ina text-retrieval system.
In this work, we have eval-uated nine techniques to find such variants.
EditDistance, Gram Count, Dice, Asoundex-final, GramDistance, and Longest Common Subsequence arelanguage independent techniques used to find vari-ant names in other languages; Soutex and AEdi-tex are extended techniques to accommodate Ara-bic Words; and NORM is a novel technique to findOOV variants in Arabic.
We show that these tech-niques are effective for finding foreign word vari-ants.
The phonetic approaches generally performbetter on a collection of newswire text than on amanually transliterated word list, although our Sou-tex algorithm performs well on both datasets.
LCSwas the best of the string-similarity techniques, es-pecially with the manually transliterated dataset, andis the most robust choice overall.The way the transliterated dataset was created af-fected the results of phonetic approaches; the datasethas many spelling mistakes, with words interpreteddifferently and often wrongly by users not fluent inEnglish.
Often users only hear these words in thenews, and are not even familiar with the spelling ofthe word in the original language.
To construct amore realistic data set, we could ask Arabic writersto transliterate words from a recording; this wouldallow pronunciation to be accurately captured byusers not fluent in English.Information retrieval systems must cater for com-mon spelling variants; our results help understandhow to identify these in Arabic text.ReferencesAhmed Abdelali, Jim Cowie, and Hamdy S. Soliman.
2004.Arabic information retrieval perspectives.
In Proceedingsof the 11th Conference on Natural Language Processing,Journes d?Etude sur la Parole - Traitement Automatique desLangues Naturelles (JEP-TALN), Fez, Morocco.Nasreen Abduljaleel and Leah S. Larkey.
2003.
Statisticaltransliteration for English-Arabic cross-language informa-tion retrieval.
In Proceedings of the International Confer-ence on Information and Knowledge Management, pages139?146, New Orleans, LA, USA.
ACM Press.Jamal B. S. Al-Qinal.
2002.
Morphophonemics of loanwordsin translation.
Journal of King Saud University, 13:1?132.Syed Uzair Aqeel, Steve Beitzel, Eric Jensen, David Grossman,and Ophir Frieder.
2006.
On the development of namesearch techniques for Arabic.
Journal of the American Soci-ety for Information Science and Technology, 57(6):728?739.Christine L. Borgman and Susan L. Siegfried.
1992.
Getty?ssynoname and its cousins: A survey of applications of per-sonal name-matching algorithms.
Journal of the AmericanSociety for Information Science, 43(7):459?476.Lee R. Dice.
1945.
Measures of the amount of ecologic associ-ation between species.
Ecology, 26(3):297?302, July.T.
Gadd.
1990.
Phonix: the algorithm.
Program, 24(4):363?369.Patrick A. V. Hall and Geoff R. Dowling.
1980.
Approximatestring matching.
ACM Computing Surveys, 12(4):381?402.Dan Melamed.
1995.
Automatic evaluation and uniform filtercascades for inducing N-best translation lexicons.
In DavidYarovsky and Kenneth Church, editors, Proceedings of theThird Workshop on Very Large Corpora, pages 184?198,Somerset, New Jersey.
Association for Computational Lin-guistics.Abdusalam F Ahmad Nwesri, S. M. M. Tahaghoghi, and FalkScholer.
2006.
Capturing out-of-vocabulary words in Ara-bic text.
In Proceedings of the 2006 Conference on Em-pirical Methods in Natural Language Processing (EMNLP2006), pages 258?266, Sydney, Australia, 22?23 July.
Asso-ciation for Computational Linguistics.Ulrich Pfeifer, Thomas Poersch, and Norbert Fuhr.
1996.
Re-trieval effectiveness of proper name search methods.
Inf.Process.
Manage., 32(6):667?679.Vijay Raghavan, Peter Bollmann, and Gwang S. Jung.
1989.A critical investigation of recall and precision as measuresof retrieval system performance.
ACM Trans.
Inf.
Syst.,7(3):205?229.Bonnie Glover Stalls and Kevin Knight.
1998.
Translatingnames and technical terms in Arabic text.
In COLING/ACLWorkshop on Computational Approaches to Semitic Lan-guages, pages 34?41, Montreal, Quebc, Canada.Graham A Stephen.
1992.
String search.
Technical report,School of Electronic Engineering Science, University Col-lege of North Wales.Esko Ukkonen.
1992.
Approximate string-matching withq-grams and maximal matches.
Theor.
Comput.
Sci.,92(1):191?211.Robert A. Wagner and Michael J. Fischer.
1974.
The string-to-string correction problem.
J. ACM, 21(1):168?173.Justin Zobel and Philip Dart.
1995.
Finding approximatematches in large lexicons.
Software - Practice and Expe-rience, 25(3):331?345.Justin Zobel and Philip Dart.
1996.
Phonetic string matching:lessons from information retrieval.
In The 19th annual in-ternational ACM SIGIR conference on Research and devel-opment in information retrieval, pages 166?172, New York,NY, USA.
ACM Press.56
