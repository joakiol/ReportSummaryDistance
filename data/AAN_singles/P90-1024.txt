ZERO MORPHEMESIN UNIFICATION-BASED COMBINATORY CATEGORIAL GRAMMARChinatsu AoneThe University of Texas at Austin&MCC3500 West Balcones Center Dr.Austin, TX 78759(aone@mcc.com)Kent WittenburgMCC3500 West Balcones Center Dr.Austin, TX 78759(wittenburg@mcc.com)ABSTRACTIn this paper, we report on our use ofzero morphemes in Unification-BasedCombinatory Categorial Grammar.
After illus-trating the benefits of this approach with severalexamples, we describe the algorithm for compil-ing zero morphemes into unary rules, which al-lows us to use zero morphemes more efficientlyin natural language processing.
1 Then, we dis-cuss the question of equivalence of a grammarwith these unary rules to the original grammar.Lastly, we compare our approach to zero mor-phemes with possible alternatives.1.
Zero Morphemes in Categorial GrammarIn English and in other naturallanguages, it is attractive to posit the existenceof morphemes that are invisible on the surfacebut have their own syntactic and semantic defini-tions.
In our analyses, they are just like anyother overt morphemes except for having nullstrings (i.e. "
"), and we call them zero mor-phemes.
Most in Categorial Grammar and relat-ed forms of unification-based grammars, on theother hand, take the rule-based approach.
Thatis, they assume that there are unary rules thatchange features or categories of their arguments(cf.
Dowty 1977, Hoeksema 1985, Wittenburg1986, Wood 1987).
Below, we will discuss theadvantages of our zero morpheme approachover the rule-based approach.Zero morphemes should be distin-guished from so-called "gaps" in wh-questionsand relative clauses in that zero morphemes arenot traces or "place holders" of any other overtmorphemes in a given sentence.
There are at1.
The work described here is implemented inCommon Lisp and being used in the Lucynatural language understanding system atMCC.188least two types of zero morphemes: zero mor-phemes at the morphology level and those atthe syntax level.A zero morpheme at the morphologylevel applies to a free morpheme and forms aninflected word.
Such examples are presenttense zero morpheme (PRES) as in 'Ilike+PRES dogs" and a singular zero morpheme(SG) as in "a dog+SG".
These two are the coun-terparts of a third person singular present tensemorpheme C+s" as in "John like+s dogs" and aplural morpheme C+s" as in 'two dog+s'~, re-spectively.
(1) dog +SGN\[num:null\] N\[num:sg\]~N\[num:null\]dog +sN\[num:null\] N\[num:pl\]\N\[num:null\]Notice that, unlike the rule-based approach, thedeclarative and compositional nature of the zeromorpheme approach makes the semantic analy-sis easier, since each zero morpheme has itssemantic definition in the lexicon and thereforecan contribute its semantics to the whole inter-pretation just as an overt morpheme does.
Also,the monotonicity of our 'feature adding" ap-proach, as opposed to "default feature" ap-proach (e.g., Gazdar 1987), is attractive in com-positional semantics because it does not have toretract or override a semantic translation contrib-uted by a word with a default feature.
For exam-ple, "dog" in both "dog+SG" and "dog+s" contrib-utes the same translation, and the suffixes"+SG" and "+s" just add the semantics of num-ber to their respective head nouns.
In addition,this approach helps reduce redundancy in thelexicon.
For instance, we do not have to definefor each base verb in the lexicon their present-tense counterparts.a man REL-MOD the daughter of whomN (N\N)/S\[reI:+\] NP/N N (N\N)/NP NP\[rel:+\]apply> .
.
.
.
.
N\[rel:+\]\Napply< .
.
.
.N\[rel:+\]Iapply> ,, NP\[rel:+\]LIFTS\[reh+\]/(S/NP)apply>S\[rel:+\]apply>N\NJohn likedNP (S\NP)/NP~p~pe-ra is ings/NP compose>Figure 1: Derivation of "a man the daughter of whom John liked"Some zero morphemes at the syntax levelare those which may apply to a constituent larg-er than a single word and change the categoriesor features of the constituent.
They are like ordi-nary derivational or inflectional morphemes ex-cept that their application is not confined within aword boundary.
In English, one example is thenoun compounding zero morpheme (CPD),which derives a noun modifier from a noun.
InCategorial Grammar, its syntactic type is(N/N)\N.
2 For instance, a noun compound "dogfood" might have the following derivation.
(2) dog CPD foodN (N/N)\N Napply<N/NN apply>In knowledge-based or object-orientedsemantics (cf.
Hirst 1987); which our LUCY sys-tem uses, the treatment of compound nouns isstraightforward when we employ a zero mor-pheme CPD.
3 In LUCY, CPD has a list of trans-lations in the semantic lexicon, each of which isa slot relation (a two-place predicate as its syn-tactic type) in the knowledge base.
For exam-ple, for "dog food" CPD may be translated into(food-typically-eaten x y), where x must be an in-stance of class Animal and y that of Food.Thus, a translation of CPD is equivalent to a2.
CPD is leftward-looking to parallel the defini-tion of a hyphen as in "four-wheeler".3.
Some compound nouns are considered as"idiomatic" single lexical entries, and they donot have a CPD morpheme.
(e.g.
"elephantgarlic")189value bound to the "implicit relation" called nnthat Hobbs and Martin (1987) introduce to re-solve compound nouns in TACITUS.
In ourcase, having CPD as a lexical item, we do nothave to introduce such an implicit relation at thesemantics level.An analogous zero morpheme providesa natural analysis for relative clauses, deriving anoun modifier from S. This zero morpheme,which we call REL-MOD, plays an important rolein an analysis of pied-piping, which seems diffi-cult for other approaches such as Steedman(1987, 1988).
(See Pollard (1988) for his criti-cism of Steedman's approach.)
Steedman as-sumes that relative pronouns are type-raised al-ready in the lexicon and have noun-modifier type(N\N)/(S/(SINP).
In Figure 1, we show a deriva-tion of a pied-piping relative clause "a man thedaughter of whom John liked " using REL-MOD.4 sOther zero morphemes at the syntaxlevel are used to deal with optional words.
Wedefine a zero morpheme for an invisiblemorpheme that is a counterpart of the overt one.An example is an accusative relative pronoun asin "a student (who) I met yesterday".
Anotherexample of this kind is '~ou" in imperative4.
We assume that accusative wh-words are ofbasic NP type in the lexicon.
A unary ruleLIFT, which is similar to type-raising rule,lifts any NP of basic type with \[rel:+\] featureto a higher type NP, characteristic of frontedphrases.
This feature is passed up by wayof unification.5.
We actually use predictive versions of com-binators in our runtime system (Wittenburg1987).XX/Y yI unifyA/BR: X/Y Y ==> X M: A/BA A-'=> ~ ""-'> IA/B B BFigure 2: Compiling a zero morphemesentences.
Having a zero morpheme for theunrealized '~'ou" makes parsing and theinterpretation of imperative sentencesstraightforward, s(3)IMP IMP-YOU finish dinnerS\[mood:imp\]/S NP (S\NP)/NP NP\[case:nom\]apply>S\NPapply<S apply>S\[mood:imp\]Analogous to the treatment of optionalwords, VP-ellipsis as in "Mary likes a dog, andBill does too" is handled syntactically by defininga syntax-level zero morpheme for an elided verbphrase (called VP-ELLIPSIS).
During thediscourse process in LUCY, the antecedent ofVP-ELLIPSIS is recovered.
7(4)BillNPdoes  VP-ELLIPSISS\NP/(S\NP) S\NPS\NPSapply>apply<Now to summarize the advantages forhaving zero morphemes, first, zero morphemeslike PRES and SG reduce redundancy in thelexicon.
Second, zero morphemes eem to be anatural way to express words that do not appear6.
Each sentence must have one of the threemood features -- declarative, interrogative,and imperative mood.
They are added byzero morphemes DECL, QUES, and IMP,respectively.7.
See Kameyama and Barnett (1989).190on the surface but have their overt counterparts(e.g., null accusative relative pronouns,vp-ellipsis).
Third, since each zero morphemehas its own syntax and semantic interpretation imuch the same way as overt morphemes, andsince the semantic interpretations of binary rulesthat combine a zero morpheme with itsargument (or functor) are kept as simple as theyare in Categorial Grammar, semanticinterpretations of sentences with zero mor-phemes are compositional and straightforward.Typically in the rule-based approach, thesemantic operations of unary rules are morecomplicated: they might perform such operationsas introducing or retracting some semanticprimitives that do not exist in the semanticlexicon.
But with our zero morpheme approach,we can avoid such complication.
Lastly, usingzero morpheme REL-MOD makes the analysisof pied-piping and preposition fronting of relativeclauses in Categorial Grammar possible.In the following section, we propose anapproach that keeps all these advantages ofzero morphemes while maintaining the efficiencyof the rule approach in terms of parsing.2.
Compiling Zero MorphemesIn natural language processing, simplyproposing zero morphemes at each juncture in agiven input string during parsing would be anightmare of inefficiency.
However, using thefact that there are only a few binary rules inCategorial Grammar and each zero morphemecan combine with only a subset of these rulesbecause of its directionality compatibility, we canpre-compile zero morphemes into equivalentunary rules and use the latter for parsing.
Ourapproach is an extension of the predictive com-binator compilation method discussed inWittenburg (1987).
The idea is that we first unifya zero morpheme M with the left or right daugh-Let M be a zero morpheme, R be a binary rule.
For each M in the grammar, do the following:For each binary rule R in the grammarif the syntax graph of M unifies with the left daughter of Rthen call the unified binary graph R', andmake the right daughter of R' the daughter of a new unary rule R1make the parent of R' the parent of R1if the syntax graph of M unifies with the right daughter of Rthen call the unified binary graph R'make the left daughter of R' the daughter of a new unary rule R1make the parent of R' the parent of RI.Figure 3: Algorithm for compiling zero morphemester of each binary rule R. If they unify, we createa specialized version of this binary rule R', main-taining features of M acquired through unifica-tion.
Then, we derive a unary rule out of thisspecialized binary rule and use it in parsing.Thus, if M is of type NB, R is forward applica-tion, and M unifies with the left daughter of R,the compiling procedure is schematized as inFigure 2.Now I shall describe the algorithm forcompiling zero morphemes in Figure 3.
Duringthis compiling process, the semantic interpreta-tion of each resulting unary rule is also calculat-ed from the interpretation of the binary rule andthat of the zero morpheme.
For example, if thesemantics of M is M', given that the semantic in-terpretation of forward application is ~,fun-;~arg(fun arg), we get Zarg(M' arg) for the se-mantic interpretation of the compiled unary rule.
8We also have a mechanism to mergetwo resulting unary rules into a new one.
Thatis, if a unary rule R1 applies to some category A,giving A', and then a unary rule R2 applies to A',giving A", we merge R1 and R2 into a newunary rule R3, which takes A as its argumentand returns A".
For example, after compilingIMP-rule and IMP-YOU-rule from zero mor-phemes IMP and IMP-YOU (cf.
(3)), we couldmerge these two rules into one rule, IMP+IMP-YOU rule.
During parsing, we use the mergedrule and deactivate the original two rules.3.
The Grammar with Compiled zero mor-phemesThe grammar with the resulting unaryrules has the same generative capacity as the8.
See Wittenburg and Aone (1989) for the de-tails of Lucy syntax/semantics interface.191source grammar with zero morphemes in thelexicon because these unary rules are originallyderived by only using the zero morphemes andbinary rules in the source grammar.
Thus, aderivation which uses a unary rule can alwaysbe mapped to a derivation in the original gram-mar, and vice versa.
For example, look at thefollowing example of CPD-RULE vs. zero mor-pheme CPD:(5) a. dog foodN NN/I~' cpd-ruleNapply>b.
dog CPD foodN (N/N)\N NN/N apply<N apply>Now, if we assume that we useCategorial Grammar with four binary rules,namely, apply>, apply<, compose>, and com-pose<, as Steedman (1987) does, we can pre-dict, among 8 possibilities (4 rules and the 2daughters for each rule), the maximum numberof unary rules that we derive from a zero mor-pheme according to its syntactic type.
9 If a zeromorpheme is of type NB, it unifies with the leftdaughters of apply>, apply< and compose> andwith the right daughters of apply> and corn-9.
Zero morphemes do not combine with wh-word type-raising rule LIFT, which is the onlyunary rule in our grammar besides the com-piled unary rules from zero morphemes.pose>.
Thus, there are 5 possible unary rulesfor this type of zero morpheme.
If a zero mor-pheme is of type A\B, there are also 5 possibili-ties.
That is, it unifies with the left daughter ofapply< and compose<, and the right daughtersof apply>, apply< and compose<.
If a zero mor-pheme is of basic type, there are only 2 possibil-ities; it unifies only with the left daughter ofapply< and the right daughter of apply>.Furthermore, in our English grammar,we have been able to constrain the number ofunary rules by pre-specifying for compilationwhich rules to unify a given zero morphemewith.
1?
We add such compiler flags in thedefinition of each zero morpheme.
We can dothis for the morphology-level zero morphemesbecause they are never combined with anythingother than their root morphemes by binary rules,and because we know which side of a rootmorpheme a given zero affix appears and whatare the possible syntactic types of the rootmorpheme.
As for zero morphemes at thesyntax level, we can ignore composition ruleswhen compiling zero morphemes which are inislands to "extraction", since these rules are onlynecessary in extraction contexts.
CPD,REL-MOD and IMP-YOU are such syntax-levelzero morphemes.
Additional facts about Englishhave allowed us to specify only one binary rulefor each syntax-level zero morpheme in ourEnglish grammar.
An example of a zeromorpheme definition is shown below.
(6) (defzeromorpheme PRES:syntax S\[tns:pres\]\S\[tns :null\]:compile-info (:binary-rule compose<:daughter R))4.
Comparison in View of Parsing ZeroMorphemesIn this section, we compare ourapproach to zero morphemes to alternativeways from the parsing point of view.
Since wedo not know any other comparable approachwhich specifically included zero morphemes innatural language processing, we compare oursto the possible approaches which are analogousto those which tried to deal with gaps.
Forexample, in Bear and Karttunen's (1979)treatment of wh-question and relative pronoungaps in Phrase Structure Grammar, a gap isproposed at each vertex during parsing if thereis a wh-question word or a relative pronoun inthe stack.
We can use an analogous approachfor zero morphemes, but clearly this will beextremely inefficient.
It is more so because 1)there is no restriction such as that there shouldbe only one zero morpheme within an S clause,and 2) the stack is useless because zero mor-phemes are independent morphemes and arenot "bound" to other morphemes comparable towh-words.Shieber (1985) proposes a moreefficient approach to gaps in the PATR-IIformalism, extending Earley's algorithm by usingrestriction to do top-down filtering.
While anapproach to zero morphemes similar toShieber's gap treatment is possible, we can seeone advantage of ours.
That is, our approachdoes not depend on what kind of parsingalgorithm we choose.
It can be top-down as wellas bottom-up.5.
ConclusionHoeksema (1985\] argues for therule-based approach over the zero morphemeapproach, pointing out that the postulation ofzero morphemes requires certain arbitrarydecisions about their position in the word or inthe sentence.
While we admit that sucharbitrariness exists in some zero morphemes wehave defined, we believe the advantages ofpositing zero morphemes, as discussed inSection 1, outweigh this objection.
Ourapproach combines the linguistic advantages ofthe zero morpheme analysis with the efficiencyof a rule-based approach.
Our use of zeromorphemes is not restricted to the traditionalzero-affix domain.
We use them, for example, tohandle optional words and VP-ellipsis, extendingthe coverage of our grammar in a natural way.ACKNOWLEDGEMENTSWe would like to thank MegumiKameyama and Michael O'Leary for their help.10.
In fact, we use more than two kinds of com-position rules for the compilation of the mor-phology-level zero morphemes.
(e.g.
PRESin (1)) But this does not cause any "rule pro-liferation" problem for this reason.192REFERENCESBear, John and Lauri Karttunen.
1979.
PSG: ASimple Phrase Structure Parser.
In R. Bley-Vroman and S. Schmerling (eds.
), TexasLinguisticForurn.
No.
15.Dowty, David.
1979.Montague Grammar.Company.Word Meaning andD.
Reidel PublishingGazdar, Gerald.
1987.
Linguistic Applicationsof Default Inheritance Mechanisms.
In P.Whitelock et al (eds.
), Linguistic Theory andComputer Applications.
Academic Press.Hirst, Graeme.
1987.
Semantic lnterpretationand the Resolution of Ambiguity.
CambridgeUniversity Press.Hobbs, Jerry and Paul Martin.
1987.
LocalPragmatics.
In Proceedings IJCAk87.Hoeksema, Jack.
1985.
Categoria/Morphology.
Garland Publishing, Inc. NewYork & London.Kameyama, Megumi and Jim Bamett.
1989.VP Ellipsis with Distributed KnowledgeSources.
MCC Technical Report numberACT-HI-145-89.Categorial Grammars and Natural LanguageStructures.
D. Reidel Publishing Company.Wittenburg, Kent.
1986.
Natural LanguageParsing w i th  Combinatory CategorialGrammar in a Graph-Unification-BasedFormalism.
Doctoral dissertation, TheUniversity of Texas, Austin.1987.
Predictive combina-tots: A Method for Efficient Processing ofCombinatory Categorial Grammars.
InProceedings of the 25th Annual Meetings ofthe Association for Computational Linguistics.Wittenburg, Kent and Chinatsu Aone.
1989.Aspects of a Categorial Syntax/SemanticsInterface.
MCC Technical Report numberACT-HI-143-89.Wood, Mary.
1987.
Paradigmatic Rules forCategorial Grammars.
CCIJUMIST Report,Centre for Computational Linguistics,University of Manchester, Institute of Scienceand Technology.Pollard, Carl.
1988.
Categorial Grammar andPhrase Structure Grammar: An Excursion onthe Syntax-Semantics Frontier.
In R. Oehrleet al (eds.
), Categorial Grammars andNatural Language Structures.
D. ReidelPublishing Company.Shieber, Stuart.
1985.
Using Restriction toExtend Parsing Algorithms for Complex-Feature-Based Formalisms.
In Proceedingsof the 23rd Annual Meetings of theAssociation for Computational Linguistics.145-152.1986.
An Introduction toUnification-Based Approaches to Grammar.CSLI, Stanford University, California.Steedman, Mark.
1985.
Dependency andCoordination in the Grammar of Dutch andEnglish.
Language.
61:523-568.1987.
Combinatory Grammarsand Parasitic Gaps.
Natural Language andLinguistic Theory.
5:403-439.Grammars,1988.
Combinators andIn R. Oehrle et al (eds.
),193
