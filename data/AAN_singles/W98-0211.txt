How to build a (quite general) linguisticJ o  Ca lderUniversity of Ed inburghLanguage Technology Group2 Buccleuch PlaceEdinburghScotlandJ .
Ca lderCed.
ac .
ukdiagram editorAbst rac tWe propose a design for an editor, Thistle, which al-lows the construction and manipulation f a wide va-riety of linguistic (and other) diagrams and a generalmethod for attaching semantics to such diagrams.This design represents a generalization f all systemsproposed in the computational linguistic literatureof which we are aware.
We discuss theoretical andpractical problems which have hindered the develop-ment of such systems to date and then indicate howour approach deals with those problems.
We offeran illustrative range of applications for this design.The current implementation permits instances of theeditor for linguistic theories uch as HPSG, varietiesof CCG, DRT, and various kinds of tree diagram.The display engine may be used to deliver diagramsvia the World Wide Web..An appendix gives an al-most complete specification for a significant class ofdiagrams.All of the classes of diagram described or men-tioned here are available as on-line demonstrationsvia:http ://www.
itg.
ed.
ac.
uk/software/thistle/demos/index, html1 In t roduct ionWe propose a novel design, Thistle, for an editorfor diagrams representing various kinds of linguisticinformation.
We argue for the compromises we sug-gest as a trade-off between generality and usability.We demonstrate he latter property through a widerange of applications.2 Mot ivat ionWithin linguistics and computational linguistics, di-agrams play a crucial role in representing the con-tent of theories (the use of trees to define inclusionhierarchies, for example), in standing as informaldemonstrations of the truth of particular claims and,therefore, in sharing ideas with the community asa whole.
Popular graphical devices include trees,attribute-value matrices (AVMs) ,  e.g.
(Pollard andSag, 1994), and conventions such as those used inDiscourse Representation Theory (DRT) (Kamp andReyle, 1993).
It has been clear for a number of yearsthat the linguistic ommunity would benefit from ageneral purpose "diagram editor" allowing users toconstruct and manipulate diagrams.
A large rangeof uses exists for such a program, including the de-bugging of existing rammars, the construction anddelivery of teaching and drilling materials and theproduction of diagrams for publication in some me-dia or other.
Even more generally, such a systemoffers a way of defining and interacting with docu-ments with complex structure.Why hasn't he community produced such an ob-viously desirable program?
First, change has been acharacteristic of the technical devices used in manybranches of linguistics.
Further, it seems in principleimpossible to predict which graphical conventionsare likely to gain currency in linguistic discourse andpublications.
Moreover, if diagrams can vary in un-predictable ways, there might seem to be no hope ofproviding a uniform interface for the user.
A con-sequence of these factors is that the implementationand maintenance osts of such a program appear un-acceptably high, perhaps unquantifiably so.There seem to be two responses to this situation.One response, as seen in the tree editors described by(Paroubek et al 1992) and by (Calder, 1993) and inthe feature structure ditor designed by (Kieffer andFettig, 1995), is to fix a relatively small amount ofgraphical devices and restrict he operations definedover, and potential combinations of, those devices(perhaps to the extent that only operations whichdon't violate consistency with respect o a particulargrammar are allowed).An alternative r sponse isto aim for the generalityof the kind seen in the general field of diagram edit-ing and visual programming, of which (Viehstaedtand Minas, 1995), other papers from that source,and (Myers et al 1990) are good examples.
And, ofcourse, constructing diagrams by hand in a genericdrawing package represents a common, but in ex-tremis measure.
There are several reasons why, forour purposes, generality is a disadvantage.First, generality in this context typically goesalong with complexity in the mathematical objects76to be depicted, often requiring the use of sophisti-cated layout algorithms, cf.
(Battista et al 1994).Second, there is a corresponding complexity in thespecification of diagrams.
That complexity may re-quire arbitrary computation to be performed andtherefore demand the power of an unrestricted pro-gramming language to describe that computation.Finally, it seems to be an assumption of such ap-proaches that the well-formedness of a diagramshould equate with the consistency of the interpre-tation of that diagram in the domain representedby the diagram.
See (Serrano, 1997) for a clearstatement of this position.
This is much too stronga requirement in the cases of interest to us: onemay wish to construct an inconsistent AVM, for ex-ample, precisely to verify that some other processorcorrectly detects the inconsistency.
One may alsowish to construct diagrams in formalisms which areundecidable, for example formulae in first or higherorder logics.
In that situation, it cannot make senseto ask an editor to enforce consistency.
In the end, inan appropriately general system, it should be possi-ble to decide on a case-by-case basis whether consis-tency with respect o the domain in question shouldbe enforced.We discuss in the next section how the design wepresent here obviates these problems, and allows theinexpensive and portable implementation f an ap-propriately general editor.3 Des ignWe provide in this section a high-level specificationof the editor.
Details of implementation are given insection 5.3.1 Assumpt ionsWe make two basic assumptions.
First, the well-formedness of diagrams is stated in terms of a con-text free grammar.
This point will be illustrated be-low.
Such an assumption is entirely in accord withpractice in the areas of the specification of syntaxand semantics of linguistic and semantic formalisms,including the graphical conventions used by suchformalisms.
Second, there is a small set of graph-ical primitives to state the layout of diagrams anda means for labelling parts of diagrams.
Our con-text free assumption above means that, generally,we can require the layout problem to be determin-istic for each proper subpart of a diagram and thusfor diagrams as a whole, as well.3.1.1 Graph ica l  pr imi t ivesOur current specification makes use of three kinds ofprimitives.
Leaf elements which specify the typefacein which to set a sequence of characters, for examplep la in ,  i ta l i c ,  et cetera (a total of seven).
Shapeprimitives urround asingle figure, for example withbrackets of various kinds or with a box or circle andso on (a total of five).
Layout primitives arrangeone or more figures into larger diagrams, and theseprovide for vertical, horizontal, tree and array lay-outs (six primitives).
1 So, leaf primitives are fullyspecified by a series of characters; layout primitivestake one or more operands each of which may beany of the primitives; shape primitives require a sin-gle operand.
2 These primitives have been selectedon the grounds of generality, while preserving theproperty that layout is deterministic.3.1.2 Speci fy ing d iagramsIn addition to specifying layout, we also need to in-dicate when a type of diagram has variable subparts,and what types of diagram may appear in those sub-parts.
To take a particular example, we may wishto say that a drs consists of a universe, which is acollection of referents, and its conditions.
Each ofthe conditions may be atomic, an implication or ofstill other types.
As a point of terminology, whereany number of diagrams may appear in a particu-lar location, we will say that the diagrams that mayoccur there represent a repeating type.Each of the elements in italic above indicates thetype of a particular subpart of a larger diagram, andconstitute a context free rule relating a diagram andits subparts.
In the abstract (i.e.
ignoring details oflayout) and with the usual interpretation of Kleenestar, we end up with the following characterization: 3(1) drs ~ referent* condition*In order for the content of a diagram to be inter-pretable, we allow the subparts of a diagram to benamed, for example (and again in the abstract):(2) drs -4 universe:referent*conditions:condition*The names of subparts must be unique within anyone type of diagram.
All that remains is for suchspecifications to include layout information.
A pos-sible specification would then be as follows, wheresquare brackets delimit sequences of specifications,and hbox and vbox provide horizontal and verticalfin general, these primitives may take options to controldetails of layout, for example the selection of smaller or largerfonts, or alignment within layouts.
In examples here, theseoptions have been suppressed for clarity.
Similarly, primitivesfor controlling the appearance of branches and horizontal andvertical padding are not described here.Available tree layouts include the "standard" vertical ori-entation commonly used in linguistic presentations, and hor-izontally disposed endro- (or clado-)grams.2See Figure 2 for an example of a tree described fully usingsome of these primitives.3Details of the concrete syntax our prototype adopts aregiven in section 5 below.77dispositions.drs -+ box(vbox(\[hbox(universe:referent*),l ine ,vbox(conditions:condition" )\]))(3)In some cases (see for example the treatment oftrees shown in the Appendix), more than one type ofdiagram may appear in some position in a diagram.In this case, one may specify a 'union' of diagramtypes.
Overall (and ignoring labels), a grammar ofdiagrams allow two kinds of production rules:(4) M --+ Cl .
.
.Cm,m > 1N ~ C~I .
.
.
IC , ,n  > 1where M and N are non-terminal symbols and therewrite for any non-terminal is unique.
C is a non-terminal or terminal symbol.
4 The first states that adiagram of type M consists exactly of subdiagramsof types C1.
.
.Cm.
The second, a diagram unionstates that diagram types C1 .
.
.C ,  are alternativeways of realizing a diagram of type N. It is clear thatany context free grammar can be rewritten so as tofall within this class.
This choice of organizationcontributes greatly to the simplicity of the editor'suser interface.The labelling of subparts of a diagram allows thecontent of a diagram to be represented in terms ofsets of paths through the diagram.
In general, apath is a sequence of elements of one of the followingforms (where t is a diagram type, v the name of asubpart and n an integer):(5) tv ~vnThe first assigns a diagram type and picks out asubpart of the diagram.
The second references thenth diagram within a repeating type.
A path maybe terminated by a pair t s where s is a sequence ofcharacters.
So, a path such as(6) drs conditions i implication leftrefers to the LHS DRS in an implication which ap-pears as the (say) first element in tile conditions ofa DRS.
Similarly(7) drs universe 1 id "x"identifies the content of the first referent in a DRS'suniverse.Ultimately, this type of specification is interest-ingly reminiscent of proposals for "rule-to-rule" se-mantics, for example (Gazdar et al 1985), where4 For completeness, a treatment of terminals is required andcan be given straightforwardly in terms of arbitrary sequencesover a limited alphabet.the interpretation (and in our case that can be takento mean "graphical interpretation") of a structure isgiven in terms of a function of its subparts.
Morepractically, one effect of the restriction to contextfree rules is that it is extremely easy to generatean SGML document ype definition (DTD) (Gold-farb, 1990) for the content of a particular classof diagrams.
This at once provides a validator fordata that the editor may be expected to display anda means of specifying stream-based communicationprotocols between the editor and other applications.Needless to say, the existence of a declarative spec-ification of diagram types goes a long way towardsavoiding the problem of obsolescence.
In our imple-mentation, SGML is used as the 'persistence format'for user's data.3.2 User  in ter faceOne of the most obvious benefits of the above as-sumptions is that the range of possible actions a usermay perform on a diagram is extremely limited, re-gardless of how complex a class of diagrams is.
Ingeneral, the actions of the user consist only of se-lecting a subpart of a diagram and choosing one ofthe diagram types allowed at that point or of per-forming some other action on the selected subpart.Notice how the grammar is used to constrain therange of possible types at any one location.
The only"structure-based" editors we are aware of with com-parable generality are those, such as psgml (Staflin,1996), which interpret an SGML DTD to determineallowable material in a context dependent way.The virtues of this simplicity should be obvious,but are worth stating.
First, for educational pur-poses, users unfamiliar with some class of diagramsare explicitly guided through possible choices, in away which provides immediate feedback on the con-sequence of choices.
Second, this form of interactionis efficient.
Effectively, the user provides all and onlythat information required to fully specify a diagram.Finally, there will be a corresponding simplicity inthe relationship of the editor with a back-end pro-cessor controlling the operations of the editor for thepurpose of animating operations over diagrams.3.3 L imi ta t ionsThere are substantial restrictions in the design wepropose.
There are many classes of diagrams usedin linguistics which are more complex than trees,for example autosegmental diagrams, cf.
(Bird andKlein, 1990), state transition diagrams, as used infinite state morphology, or the networks of SystemicFunctional Grammar.
In order to support the con-struction of diagrams in those particular areas, morecomplex systems are inevitably required.
Our pro-posal is not intended to be so general, for preciselythe reasons and benefits discussed above.On the other hand, there are other limitations78J ~V \[inf\] VP \[base, SUBCAT <~>\]to V \[ base \] NP S \[fin, comp 1bother kim that Sandy walkedFigure 1: From (Pollard and Sag, 1994, p225).closer to home.
A natural operation over attributesin an AVM is to order them (and their values) insome way.
Similarly, an AVM editor might allowtype constraints as discussed in (Carpenter, 1992)to be automatically verified.
One might build suchinformation into a diagram specification (and it maybe feasible in some cases to do so automatically).These limitations stem from the essential part ofour design which separates clearly the graphical con-ventions at use in some class of diagrams from theinterpretation of the content of diagrams.
Underthat view, if one requires ome formally equivalent,but graphically different representation f some in-formation, it makes sense for the determination ofequivalence to be made by a processor dedicated toa particular formalism.
In other words, issues to dowith the interpretation of a diagram are not to bedecided by the editor.
It" is our opinion that thebenefits fully justify this distinction.4 ApplicationsThis system has been used to deliver drilling mate-rials to undergraduates studying syntactic trees anda simplified form of DRT.
Figure 6 in the appendixbelow shows how an editor based on the relevantclass of diagrams.
Experiments reveal (Cox et al1998) that viewing dynamic diagrams (perhaps withan accompanying discussion by one or more people)enhances performance significantly on tasks such assyntactic category labelling and tree construction.This enhancement is seen even when the grammarrules and categories are novel, and is (most intrigu-ingly) still significant if no verbal explanation of thediagrams is provided.We have also provided an interface to a locallydeveloped tokenization engine.
This tool providesa graphical interface to complex rules.
Off-the-shelf technology, in the form of an SGML pro-cessor (Thompson and McKelvie, 1996), providesa simple mapping to the format required by thetokenizer.
We have developed (on the basis of(Smithers, 1997)) a treatment of diagrams in (Pol-lard and Sag, 1994), used to construct Figure 1.Finally, we have provided Web-based visualizationtools for a major corpus of dialogues (Anne Ander-son et al 1991).Other classes of diagrams for which we haveprovided reasonably comprehensive grammars are:trees with unlimited branching and multipart nodelabels; categorial derivations in alternative styles;metrical trees; cladistic or cluster diagrams.There are many other kinds of applications whichcan be envisaged for such a system.
Here we mentionjust a few.
The "derivation checkers" or tree editorsof (Calder, 1993) and (Paroubek et al 1992) can beviewed as a mode in which each action by a user isverified for consistency with respect o a grammar.Recasting that mode within the context of delayingsystems for the interpretation of constraint-basedformalisms (e.g.
(DSrre and Dorna, 1993)) wouldprovide a debugger in which the grammar writercould perform an instantiation and view the results,perhaps in an animated fashion.
On the other hand,the "off-line" construction of trees would provide away of querying tree banks in a more perspicuousway than via the manual construction of a query insome query language.5 Implementat ionThe system described here has been implemented inJava.
Figure 6 is a screen capture of an editor in-stance using a diagram class specification very muchlike that given in the Appendix.
There, a tree hasbeen constructed and a partial conversion of anothertree to a DRS has been performed.
In this imple-mentation, a box containing an ellipsis indicates aposition permitting one or more occurrence of a di-agram type or types, a box containing a questionmark indicates a location allowing a single occur-fence of the available types, and a question mark onits own indicates a location where characters mayappear.
In the state shown in the figure, the low-est ellipsis (i.e.
the one immediately below 'Pip') isselected.
The state of the buttons labelled by dia-gram type names reflect the choice open to the userat that position in structure.
On instantiating a di-agram at a location marked by an ellipsis, a newdiagram is introduced and the location of the ellip-sis moved rightward or downward according to theenclosing layout?
Ellipses may be hidden (or re-vealed) by choosing the option Show ... (or Hide ...).The operation Kill allows the deletion of any selecteddiagram, while Yank will be available if the most re-cently deleted material is of a type compatible withthe currently selected position.
Other operations in-clude preparing a printable form of the image or aDTD for the class of diagrams.We use a function-like syntax to indicate the prim-itives and their operands.
To indicate how drawing5There is also an operation Insert which inserts an ellipsisto the left or above the current selection.79tree(plain("NP"),\[tree(plain("Det"), \[italic("the")\]),tree(plain("N"), \[italic("cat")\])\])Figure 2: A description of a tree in terms of graphi-cal primitivesdiagram_spec(drs,box(vbox(\[hbox(var(universe,  \ [ re ferent \ ] ) ) ,line(),vbox(var(conditions, \[condition\]))\])))Figure 3: Concrete syntax for DRSsprimitives may be combined, Figure 2 illustrates theuse of a description of a diagram and could be pro-cessed by th4 editor to draw a subtree of the tree onthe left of Figure 6.A diagram type is specified by means of a state-ment such as shown in Figure 3.
(Further ex-amples are given in the Appendix.)
A variablesubpart of a diagram is indicated by the syntaxvar(name, type).
That is, a diagram of the statedtype may appear in this position and be referredto by the stated name.
The use of square brack-ets, as in both uses of vat above, is equivalent tothe Kleene star in the abstract formulation of sec-tion 3.1.2, i.e.
any number of diagrams of that typemay occur at this position.
As a further illustration,consider the definitions hown in Figure 4.
As theirnames uggest, he first of these limits the daughtersof a tree to two, while the second allows any numberof daughters.
The last line illustrates the concretesyntax for diagram unions.diagram_spec(two_branch,tree(\[var(mother, category),vat(left, leaf or_tree),vat(right, leaf_or_tree)\])diagram_spec(arbitrarytree,tree(\[var(mother, category),oar(daughter, \[leaf_or_tree\])\]))diagram_union(tree_top, \[one_branch,two_branch\] )Figure 4: Some example tree specifications6 Conclusions, and current andfuture workWe have presented a design for a linguistic diagrameditor which, although limited in the range of graph-ics it permits, nevertheless provides a configurablesystem of substantial benefit o a wide class of users.An implementation is available, and already in usefor a wide range of applications.We have recently extended the system to allow se-quences of diagrams to be constructed and viewed.In our current work, development of a back end pro-cessor for DRSs is in hand.
More generally, a rangeof potential architectures for interaction are underconsideration.
We expect hat a variety of kinds ofinteraction will be necessary.
Evaluation of the ed-ucational usefulness of the system continues.
In thefuture, we expect o provide diagram specificationsfor still other formalisms, and an interface allowingthe dynamic ontrol of the editor by other programs.We anticipate that the restriction to context free or-ganization of diagrams will be acceptable for manypurposes.
On the other hand, extensions to the sys-tem to allow at least some of the diagram types dis-cussed in Section 3.3 would make the system moreuseful still and, in future work, we are keen to exam-ine strategies which involve the semiautomatic lay-out of complex diagrams.AcknowledgementsThe work reported here was supported in part bygrant TTT Text Tokenization Tool from the Engi-neering and Physical Science Research Council andby grant The Vicarious Learner from the Economicand Social Research Council.
The author would liketo thank Richard Tobin for critical comments on ear-lier proposals.A Specification for a DRS and treeeditorThe specifications shown in Figure 4 and 5 pro-vide an almost complete specification for an editorlike that shown in Figure 6, permitting the editingof trees with limited branching and DRSs.
It hasbeen simplified by the omission of some options con-trolling details of alignment and of the definitionsof the diagram types three_branch, impl icat ion,re ferent  and equation.
The definition of the di-agram union t ree_top needs to be extended fromthat given in Figure 4.
Also not included is the state-ment of diagram types allowed at the outermost leveland their layout.
The options to hbox and bracketcontrol the separator used within the horizontal boxand the shape of bracket respectively.B Screen layout of the editorFigure 6 shows the on-screen layout of the instanceof the editor discussed in Section 4 above.80diagram_union(leaf_or_tree, lone_branch, two_branch, three_branch, lexical, referent\])diagram_spec(one_branch, tree(\[var(mother, category), var(daughter, leaf_or_tree)S))diagram_spec(category, plain(var(Name, Text)))diagram_spec(lexical, italic(var(Lex, Text)))diagramunion(condition, \[atomic, equation, implication, tree_topS)diagram_spec(atomic, hbox(\[separator(plain( .... )\],\[plain(var(relation, Text)),bracket(\[delimiter(round)S,hbox(\[separator(plain(", "))\],\[vat(referents, \[referent\])\]))\]\]))Figure 5: Part of a diagram specification for the diagram editor shown in Figure 6.ReferencesAnne Anderson et al 1991.
The HCRC Map TaskCorpus.
Language and Speech, 34.4, pp351-366.Giuseppe di Battista, Peter Eades, Roberto Tamas-sin, and Ioannis G. Tollis.
1994.
Algorithms fordrawing graphs: an annotated bibliography Com-putational Geometry Theory and Applications 4,pp235-282.Steven Bird and Ewan Klein.
1990.
Phonologicalevents.
In Journal of Linguistics, 26, pp33-56.Jo Calder 1993 Graphical Interaction withConstraint-based Grammars.
In Proceedingsof the Third Pacific Rim Conference on Compu-tational Linguistics, Vancouver, 22-24th April,1993, pp160-169.Bob Carpenter 1992.
The Logic off Typed FeatureStructures, Cambridge Tracts in Theoretical Com-puter Science, Cambridge: University Press.Jochen D6rre and Michael Dorna.
1993.
CUF: AFormalism for Linguistic Knowledge Representa-tion in Jochen D6rre (ed.)
Computational As-pects of Constraint-Based Linguistics Description,ILLC/Department of Philosophy, University ofAmsterdam, DYANA-2 Deliverable R1.2.A.Richard Cox, Jean McKendree, Richard Tobin andJohn Lee.
(to appear) Vicarious learning from di-alogue and discourse: A controlled comparison.Instructional Science.Gerald Gazdar, Ewan Klein, Geoffrey Pullum andIvan Sag.
1985.
Generalized Phrase StructureGrammar, Basil Blackwell: Oxford.Charles F. Goldfarb.
1990.
The SGML Handbook.Clarendon Press: Oxford.Hans Kamp and Uwe Reyle.
1993.
From Discourse toLogic, Kluwer Academic: Dordrecht and London.Bernd Kiefer and Thomas Fettig.
1995, Fegramed:An Interactive Graphics Editor for Feature Struc-tures, Research Report RR-95-06, Universitit desSaarlandes, Saarbriicken.Brad A. Myers, Dario Giuse, Roger B. Dannen-berg, Brad Vander Zanden, David Kosbie, Ed Per-vin, Andrew Mickish, and Philippe Marchal.
1990.Garnet: Comprehensive Support for Graphical,Highly-Interactive User Interfaces.
In IEEE Com-puter 23.11, pp71-85.Patrick Paroubek, Yves Schabes and Aravind K.Joshi 1992 XTAG--A Graphical Workbench forDeveloping Tree Adjoining Grammars.
In Proceed-ings of the Third Conference on Applied NaturalLanguage Processing, Trento, Italy, 31 March-3April, 1992, pp216-223.Carl Pollard and Ivan A.
Sag.
1994.
Head-DrivenPhrase Structure Grammar.
CSLI: Stanford andUniversity of Chicago Press: Chicago and London.J.
Artur Serrano.
1997.
The Use of SemanticConstraints on Diagram Editors.
In Proceedingsoff VL'95, 11th International IEEE Symposiumon Visual Languages, Darmstadt, Germany, 5-6September 1995.Gulliver Smithers.
1997.
A Diagram Editor Specifi-cation for Head-driven Phrase Structure Gram-mar.
Unpublished dissertation, Department ofLinguistics, University of Edinburgh.Lennart Staflin.
1996.
PSGML, a ma-jor mode for SGML documents.See http ://www.
lysator, liu.
se/project s/about_psgml, html.Henry S. Thompson and David McKelvie.
1996.A software architecture for SGML annotation inSGML Europe, Graphical Communications Asso-ciation: Alexandria, VA.81File Edit Optionst o_br chl ,, qu tionl on _br n hliii\[Vdrs, 1, Tdrs, Vconditions, 2, TContinuation\]I ,~..  :H .
s?
,  ?
*.%$ ~.,.~ .&  '~ , . '
:  ?
| three_branch!.XSNP VPPN V1 NPchased Det NI Ithe catSx VPIV01barkedPip(?, ~)/-.I I iFigure 6: Screen capture of a tree and a DRS constructed using the editor.
Although not reflected in thispicture, the selected point of structure is the ellipsis immediately below the word 'Pip'.
The shaded wordsrepresents types which are not available at that location.
They are: 'lexical', 'category', referent' and 'drs'.The line immediately above the diagrams indicates the path to the currently selected location.Gerhard Viehstaedt and Mark Minas.
1995.
Gener-ating editors for direct manipulation of diagrams.In Brad Blumenthal, Juri Gornostaev and ClausUnger, editors, Proc.
5th International Conferenceon Human-Computer Interaction (EWHCI'95),Moscow, Russia, LNCS 1015, pp17-25.
Springer-Verlag.82
