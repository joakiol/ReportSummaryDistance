Lexical Resource Reconciliation in the Xerox LinguisticEnvironmentRona ld  M.  Kap lanXerox Palo Alto Research Center3333 Coyote Hill RoadPalo Alto, CA, 94304, USAkapl an~parc, xerox, comPau la  S. NewmanXerox Palo Alto Research Center3333 Coyote Hill RoadPalo Alto, CA, 94304, USApnewman?parc,  xerox, tomAbst ractThis paper motivates and describes thoseaspects of the Xerox Linguistic Environ-ment (XLE) that facilitate the constructionof broad-coverage L xical Functional gram-mars by incorporating morphological andlexical material from external resources.Because that material can be incorrect, in-complete, or otherwise incompatible withthe grammar, mechanisms are provided tocorrect and augment the external materialto suit the needs of the grammar developer.This can be accomplished without directmodification of the incorporated material,which is often infeasible or undesirable.Externally-developed finite-state morpho-logical analyzers are reconciled with gram-mar requirements by run-time simulationof finite-state calculus operations for com-bining transducers.
Lexical entries derivedby automatic extraction from on-line dic-tionaries or via corpus-analysis tools are in-corporated and reconciled by extending theLFG lexicon formalism to allow fine-tunedintegration of information from differencesources.1 In t roduct ionThe LISP-based LFG Grammar Writers Workbench(GWB) (Kaplan and Maxwell, 1996) has long servedboth as a testbed for the development of parsing al-gorithms (Maxwell and Kaplan, 1991; Maxwell andKaplan, 1993) and as a self-contained environmentfor work in syntactic theory.
The C/Unix-based Xe-rox Linguistic Environment (XLE) further developsthe GWB parsing algorithms, extends them to gen-eration, and adapts the environment to a differentset of requirements.This paper motivates and describes the morpho-logical and lexical adaptations ofXLE.
They evolvedconcurrently with PARGRAM, a multi-site XLF_~based broad-coverage rammar writing effort aimedat creating parallel grammars for English, French,and German (see Butt et.
al., forthcoming).
TheXLE adaptations help to reconcile separately con-structed linguistic resources with the needs of thecore grammars.The paper is divided into three major sections.The next section sets the stage by providing a shortoverview of the overall environmental features of theoriginal LFG GWB and its provisions for morpho-logical and lexicon processing.
The two followingsections describe the XLE extensions in those areas.2 The  GWB Data  BaseGWB provides a computational environment tai-lored especially for defining and testing grammarsin the LFG formalism.
Comprehensive editing fa-cilities internal to the environment are used to con-struct and modify a data base of grammar elementsof various types: morphologicalrules, lexical entries,syntactic rules, and "templates" allowing named ab-breviations for combinations ofconstraints.
(See Ka-plan and Maxwell, 1996; Kaplan and Bresnan, 1982;and Kaplan, 1995 for descriptions of the LFG for-malism.)
Separate "configuration" specifications in-dicate how to select and assemble collections of theseelements to make up a complete grammar, and al-ternative configurations make it easy to experimentwith different linguistic analyses.This paper focuses on the lexical mapping process,that is, the overall process of translating between thecharacters in an input string and the initial edges ofthe parse-chart.
We divide this process into the typ-ical stages of tokenization, morphological analysis,and LFG lexicon lookup.
In GWB tokenizing is ac-complished with a finite-state transducer compiledfrom a few simple rules according to the methods54described by (Kaplan and Kay, 1994).
It tokenizesthe input string by inserting explicit token bound-ary symbols at appropriate character positions.
Thisprocess can produce multiple outputs because of un-certainties in the interpretation of punctuation suchas spaces and periods.
For example, "I like Jan."results in two alternatives ("I@like@Jan@.
@" and"I@like@Jan.@.
@") because the period in "Jan."could optionally mark an abbreviation as well as asentence nd.Morphological analysis is also implemented as afinite-state transducer again compiled from a set ofrules.
These rules are limited to describing onlysimple suffixing and inflectional morphology.
Themorphological transducer is arranged to apply to in-dividual tokens produced by the tokenizer, not tostrings of tokens.
The result of applying the mor-phological rules to a token is a stem and one or moreinflectional tags, each of which is the heading for anentry in the LFG lexicon.
Morphological ambiguitycan lead to alternative analyses for a single token, sothis stage can add further possibilities to the alterna-tives coming from the tokenizer.
The token "cooks"can be analyzed as "cook +NPL" or "cook +V3SG",for instance.In the final phase of GWB lexical mapping, thesestem-tag sequences are looked up in the LFG lexiconto discover the syntactic ategory (N, V, etc.)
andconstraints (e.g.
(1" NUM)=PL) to be placed on asingle edge in the initial parse chart.
The category ofthat edge is determined by the particular combina-tion of stems and tags, and the corresponding edgeconstraints are formed by conjoining the constraintsfound in the stem/tag lexical entries.
Because of theambiguities in tokenization, morphological nalysisand also lexical lookup, the initial chart is a networkrather than a simple sequence.The grammar writer enters morphological rules,syntactic rules, and lexical entries into a database.These are grouped by type into named collections.The collections may overlap in content in that differ-ent syntactic rule collections may contain alternativeexpansions for a particular category and differentlexical collections may contain alternative definitionsfor a particular headword.
A configuration containsan ordered list of collection ames to indicate whichalternatives to include in the active grammar.This arrangement provides considerable supportfor experimentation.
The grammar writer can in-vestigate alternative hypotheses by switching amongconfigurations with different inclusion lists.
Also,the inclusion list order is significant, with collec-tions mentioned later in the list having higher prece-dence than ones mentioned earlier.
If a rule for thesame syntactic ategory appears m more than oneincluded rule collection, or an entry for the sameheadword appears in more than one included lexicalcollection, the instance from the collection of high-est precedence is the one included in the grammar.Thus the grammar writer can tentatively replace afew rules or lexical entries by placing some very smallcollections containing the replacements later in theconfiguration list.We constructed XLE around the same database-plus-configuration model but adapted it to operatein the C/Unix world and to meet an additional setof user requirements.
GWB is implemented in a res-idential Lisp system where rules and definitions ontext files are "loaded" into a memory-based databaseand then selected and manipulated.
In C/Unix wetreat the files themselves as the analog of the GWBdatabase.
Thus, the XLE user executes either a"create-parser" or "create-generator" command toselect a file containing one or more configurationsand to select one of those configurations to specifythe current grammar.
The selected configuration, inturn, names a list of files comprising the data base,and identifies the elements in those files to be usedin the grammar.This arrangement s ill supports alternative ver-sions of lexical entries and rules, but the purposeis not just to permit easy and rapid exploration ofthese alternatives.
The XLE database facilities alsoenable linguistic specifications from different sourcesand with different degrees of quality to be combinedtogether in an orderly and coherent way.
For XLEthe goal is to produce efficient, robust, and broadcoverage processors for parsing and generation, andthis requires that we make use of large-scale, in-dependently developed morphological nalyzers andlexicons.
Such comprehensive, well-engineered com-ponents exist for many languages, and can relievethe grammar developer of much of the effort andexpense of accounting again for those aspects of lan-guage processing.3 XLE  Morphological ProcessingOne obvious obstacle to incorporating externally de-veloped morphological nalyzers, even ones based onfinite-state technology, is that they may be suppliedin a variety of data-structure formats.
We overcamethis obstacle by implementing special software inter-preters for the different ransducer formats.
But, aswe learned in an evolutionary process, a more fun-damental problem in integrating these componentswith syntactic processing is to reconcile the analysesthey produce with the needs of the grammar.Externally-available morphological components55are, at present, primarily aimed at relatively unde-manding commercial applications uch as informa-tion retrieval.
As such, they may have mistakes orgaps that have gone unnoticed because they have noeffect on the target applications.
For example, func-tion words are generally ignored in IR, so mistakesin those words might go undetected; but those wordsare crucial in syntactic processing.
And even correctanalyses generally deviate in some respects from thecharacterizations desired by the grammar writer.These mistakes, gaps, and mismatches are oftennot easy to correct at the source.
It may not bepractical to refer problems back to the supplier asthey are uncovered, because of inherent ime lags,economic feasibility, or other factors.
But the gram-mar writer may not have the tools, permissions, orskills, to modify the source specifications directly.3.1 Basic  ApproachIt is often the case that repairs to an external trans-ducer whose behavior is unsatisfactory can be de-scribed in terms of operations in the calculus of reg-ular relations (Kaplan and Kay, 1994).
Transducersthat encode the necessary modifications can be com-bined with the given one by combinations of com-position, union, concatenation, and other operatorsthat preserve regularity.For example, suppose an externally created finite-state morphological nalyzer for English maps sur-face forms such as "email" into stem+inflectional-morpheme sequences such as "email -I-Nmass", butthat certain other relatively recent usages (e.g.
"email" as a verb) are not included.
A more ad-equate transducer can be specified as Exeernal  UAddit ion, the union of the external transducer witha locally-defined modification transducer.
XLE pro-vides a facility for constructing simple Addit iontransducers from lists of the desired input/outputpairs:email  : emai l  +Nsgemails: email  +Nplemail  : email  +VpresThe relational composition operator is also quiteuseful, since it enables the output of the exter-nal transducer to be transformed into more suit-able arrangements.
For example, suppose the giventransducer maps "buy" into "buy +VBase", where+VBase subsumes both the present-tense and in-finitival interpretations.
This is not a helpful resultif these two interpretations are treated by separateentries in the LFG lexicon, but this problem canbe repaired by the composition Externa l  o TagFst,where TagFst is a transducer specified as+Vbase : +Verb +Inf+Vbase : +Verb +Not3SgFinally, in cases where the output of the exter-nal analyzer is simply wrong, corrections can be de-veloped again in a locally specified way and com-bined with a "priority union" operator that blocksthe incorrect analyses.
The priority union of reg-ular relations A and B is defined as A Up B =A U lid(Dora(A)) o B\].
The relation A Up B con-tains all the pairs of strings in A together with allthe pairs in B except those whose domain string isalso in the domain of A.
With this definition the ex-pression Cor rect ion  Up Externa l  describes a trans-ducer that implements the desired overrides.In principle, these and other modifications to anexternally supplied transducer can be built by us-ing a full-scale regular expression compiler, such asthe Xerox calculus described in (Karttunen et.
al.,1997).
The calculus can evaluate these correctiveexpressions in an off-line computation to create asingle effective transducer for use in syntactic pro-cessing.
However, in practice it is not always pos-sible to perform these calculations.
The externaltransducer might be supplied in a form (e.g.
highlycompressed) not susceptible to combination.
Or (de-pending on the modifications) the resultant rans-ducer may grow too large to be useful or take toolong to create.Therefore, our approach is to allow transducercombining operations to be specified in a "mor-phological configuration" (morph-config) referencedfrom the XLE grammar configuration.
The effectsof the finite-state operations specified in the morph-config are simulated at run time, so that we obtainthe desired behavior without performing the off-linecalculations.
In the case of union, the analysis isthe combination of results obtained by passing theinput string through both transducers.
For compo-sition, the output of the first transducer is passedas input to the second.
For priority union, the firsttransducer is used in an attempt o produce an out-put for a given input; the result from the secondtransducer is used only if there is no output fromthe first.Specifying the transducer combining operationsin the XLE morph-config rather than relying on ascript for an offline computation has another impor-tant advantage: it gives the grammar writer a singleplace to look to understand exactly what behavior toexpect from the morphological nalyzer.
It removesa serious audit-trail problem that would otherwisearise in large-scale grammar development.56nmm\[\]\[\]\[\]\[\]mmm\[\]i\[\]m\[\]l\[\]mmmm3.2 The  Role of  Token izat ionThe role of tokenization i  a production-level parseris more than a matter of isolating substringsbounded by blanks or punctuation or, in genera-tion, reinserting blanks in the appropriate places.The tokenizer must also undo various conventions oftypographical expression to put the input into thecanonical form expected by the morphological na-lyzer.
Thus it should include the following capabili-ties in addition to substring isolation:.
Normalizing: removing extraneous white-spacefrom the string.?
Editing: making prespecified types of modifica-tions to the string, e.g., removing annotationsor SGML tags in an annotated corpus.?
Accidental capitalization handling: analyzingcapitalized words, at least in certain contextssuch as sentence-initial, as, alternatively, theirlower-case quivalents,?
Contraction handling: separating contractedforms such as:l~homme --> le hommedu --> de leJohn's --> John _possThese forms represent combinations of elementsthat would typically appear under different syn-tactic nodes.
That is, the elements of "du"fall under both PREP and NP, and those of"John's" within an NP and a POSS attached tothe NP.
Separating these in the tokenizing pro-cess avoids what would otherwise be unnecess-sary grammatical complications.?
Compound word isolation: determining whichspace-separated words should be considered assingle tokens for purposes of morphologicalanalysis and parsing, at least as an alternative,This function can range from simply shieldingblank-containing words from separation, e.g., "apriori", "United States" to recognizing and sim-ilarly shielding highly structured sequences suchas date (Karttunen et.
al., 1997) and time ex-pressions.Because a tokenizing transducer is not onlylanguage-specific but often specific to a particu-lar application and perhaps also to grammar-writerpreference, it may be necessary to build or modifythe tokenizing transducer as part of the grammar-writing effort.Logically, the relationship between the effectivefinite-state tokenizer, which carries out all of theabove functions, and the morphological nalyzer canbe defined as:tokenizer o \[morph analyzer @\]*That is, the tokenizer, which inserts token bound-aries (?)
between tokens, is composed with a cyclictransducer that expects a ?
after each word.
How-ever, the feasibility considerations applying to theof\[line compilation of morphological transducers ap-ply as well to the pre-compilation of their composi-tion with the effective tokenizer.
So the XLE morph-config file provides for the specification of a separatetokenizer, and the cycle and composition in the ex-pression above are simulated at run-time.Further, it is advantageous to allow the effectivetokenizer to also be specified in a modular way, asregular combinations of separate transducers inter-preted by run-time simulation.
The need for modu-larity in this case is based on both potential trans-ducer size, as combining some of the tokenizer func-tions can lead to unacceptably large transducers,and on the desirability of using the same morph-config specifications for both parsing and genera-tion.
Most of the tokenizer functions are appropriateto both of these processes but some, such as white-space normalization, are not.
Our modular specifi-cation of the effective tokenizer allows the grammarwriter to mark those components that are used inonly one of the processes.3.3 XLE  Morph-Conf igThe current XLE morph-config provides for thesecapabilities in a syntactically-sugared form so thata grammar writer not interested in the finite-state-calculus can nevertheless combine externally sup-plied transducers with locally-developed ones, andcan easily comprehend the expected behavior of theeffective transducer.The general structure of the morph-config is illus-trated by the following:# English Morph ConfigTOKENI ZE:P !b lank-normal izer  token izerANALYZE USEFIRST:morph-overridemain-morphP!accent-fix main-morphANALYZE USEALL:morph-addlmorph-add257The transducers named in the TOKENIZE sectionare applied in sequence to each input string, withthe result being the same as that of applying theircomposition.
However those prefixed\[ by P!
or G!
areapplied only in parsing or generation respectively.The individual output tokens are submitted tothe transducers specified in the ANALYZE sections.There may be two such sections.
The ANALYZEUSEFIRST section is borrowed directly from theRank Xerox transducer "lookup" facility (Karttunenet.
al., 1997).
Each line in this section specifies aneffective transducer equivalent to the result of com-posing all the transducers mentioned on that line.The effective transducer esulting from the entiresection is equivalent o the combination, by prior-ity union, of the effective transducers pecified bythe individual ines.So, in the above example of an ANALYZE USE-FIRST section, the large main-morph, assumed tobe externally supplied, handles most inputs, but itsincorrect analyses are blocked by the preemptive re-suits of the morph-override transducer?
And if nei-ther the override transducer nor the main transducerobtains an analysis during parsing, the transduc-tion specified as the composition of an accent fixer(e.g., for correcting erroneous accents) with the maintransducer is applied.
The accent fixer is not usedin generation, so that only properly accented stringsare produced?In the ANALYZE USEALL  section, transducerson a single line are again interpreted as composed,but the resultant transducers from separate linesare understood as combined by simple union witheach other and with the (single) effective ANALYZEUSEFIRST transducer.
In this way the grammarwriter can specify one or more small transducers de-livering alternative analyses where the results of theexternal analyzer are correct, but additional analy-ses are needed.The meaning of all the specifications in a morph-config file can be represented as an expression inthe finite-state calculus that describes a single ef-fective transducer.
This transducer maps from thecharacters of an input sentence to a finite-state ma-chine that represents all possible sequences of mor-pheme/tag combinations.
The network structure ofthat machine is isomorphic to the initial parse-chart.For our simple morph-config example, the effectiveparsing transducer isblank-normalizer0tokenizer0morph-override \]Up main-morph |Up accent - f i xo  main-morphJU @morph-addlUmorph-add24 XLE Lexicon StructuresThe lexical extensions XLE  makes to the GWBdatabase setup are also aimed at obtaining broadcoverage via the use of independently developed re-sources.
External lexical resources may be derivedfrom machine readable dictionaries or large corporaby means of corpus analysis tools that can automat-ically produce LFG lexical entries (for example, thetools described by Eckle and Held, 1996).
However,the results of using such repositories and tools arerelatively error-prone and cannot be used withoutcorrection.
In this section we describe the conven-tions for combining lexical information from differ-ent sources.As in GWB,  an entry in the XLE  lexicon con-tains one or more subentries associated with differ-ent parts of speech, and separate entries for stemsand affixes, e.g.,cook N BASE (" PRED)= 'cook ~(" NTYPE) =c COUNT;V BASE (" PRED)='cook<( ~ SUBJ)(" 0BJ)>'.+NpI N SFX (" NTYPE) = COUNT(" NUMBER) = PL.These entries specify the syntactic categories forthe different senses of the morphemes together withthe LFG constraints that are appropriate to eachsense?
The syntactic category for a sense, the onethat matches the preterminal nodes of the phrase-structure grammar, is created by packing togethertwo components that are given in the entry, themajor category indicator (N and V above) and acategory-modifier (BASE and SFX).
The noun andverb senses of "cook" are thus categorized as N-BASE and V-BASE,  and the category of the plu-ral morpheme is N-SFX.
These categories are dis-tinct from the N and V that are normally referencedby higher-level syntactic rules, and this distinctionpermits the grammar to contain a set of "sublexi-cal" rules that determine what morphotactic combi-58nations are allowed and how the constraints for anallowable combination are composed from the con-straints of the individual morphemes.
The sublexicalrule for combining English nouns with their inflec-tional suffixes isN --> N-BASE N-SFXHere the constraints for the N are simply the con-junction of the constraints for the base and suffix,and this rule represents the interpretation that isbuilt in to the GWB system.
By distinguishing themorphological categories from the syntactic ones andproviding the full power of LFG rules to describemorphological compositions, the XLE system allowsfor much richer and more complicated patterns ofword formation.Also as in GWB, the lexicon for a grammar canbe specified in the configuration by an ordered listof identifiers for lexical entry collections uch as:LEXENTRIES (CORPUS ENGLISH)(CORRECTIONS ENGLISH).To find the effective definition for a given headword,the identified lexicons are scanned in order and thelast entry for the headword is used.
Thus the orderof lexicon identifiers in an XLE configuration allowshand-created accurate ntries to be identified laterin the list and override all earlier (errorful) entries.This is a practical approach to correction; the al-ternative approach of manually correcting erroneousentries in situ requires the edits to be redone when-ever new versions of the external lexicon are created.But more can be done, as discussed in the next sec-tion.4.1 Lex icon Ed i t  Ent r iesWe found that an erroneous entry in an externallyprovided lexicon often contains many subentries thatare completely acceptable and should not be thrownaway.
However, the complete overrides afforded bythe configuration priority order do not allow thesedesirable subentries to be preserved.For this reason, we defined a new kind of lexicalentry, called an "edit entry", that allows more finelytuned integration of multiple entries for a head-word.
The category-specific subentries of an edit en-try are prefixed by operators pecifying their effectson the subentries collected from earlier definitionsin the priority sequence.
For example, the externallexicon might supply the following preposition anddirectional-adverb subentries for the word "down":down P BASE @PREP;ADV BASE QDIRADV.where QPREP and QDIRADF invoke the LFG templatesthat carry the constraints common to all preposi-tions and directional adverbs.
The following editentry specified later in the lexicon sequence can beused to add the less likely transitive verb reading(e.g.
"He downed the beer"):down +V BASE @TRANS;ETC.The + operator indicates that this V subentry is tobe disjoined with any previous verb subentries (nonein this case).
The ETC flag specifies that previoussubentries with categories not mentioned explicitlyin the edit entry (P and ADV in this case) are to beretained.We allow three other operators on a category Cbesides +.
!C indicates that all previous category-Csubentries for the headword should be replaced bythe new one.
-C prefixes otherwise mpty subentriesand specifies that all previous category-C subentriesfor the headword should be deleted.
For example,if the above verbal meaning of "down" actually ap-peared in the external exicon and was not desired,it could be deleted by an edit entry:down -V;ETC.Finally, =C indicates that all previous category-Csubentries hould be retained.
This is useful whenthe flag ONLY appears instead of ETC.
ONLY sets thedefault hat the subentries for all categories not men-tioned in the current entry are to be discarded; =Ccan be used to override that default just for the cat-egory C..Combinations of these operators and flags allowquite precise control over the assembly of a final ef-fective entry from information coming from differentsources.
To give one final example, if the constraintsprovided for the adverbial reading were insufficientlyrefined, the correcting entry might be:down +V BASE @TRANS;!ADV BASE @DIRADV(" ADV-TYPE) =VPADV-FINAL;ETC.This adds the verbal entry as before, but replaces theprevious adverb entry with a new set of constraints.Edit entries have been especially valuable in theGerman branch of the PARGRAM effort, which useslexicons automatically derived from many sources.Subentries in the sequence of automatic lexiconsare generally prefixed by + so that each lexiconcan make its own contributions.
Then manually-coded lexicons are specified with highest precedenceto make the necessary final adjustments.594.2 Default def in i t ions  and unknown wordsMorphological nalysis coupled with sublexical rulesdetermines which categories a word belongs to andwhat suffixes it can take.
Subentries in the LFG lex-icons specify additional syntactic properties whichfor many words are not predictable from their mor-phological decompositions.
There are large sets ofwords in each category, however, that have exactlythe same syntactic properties; most common ouns,for example, do not take arguments.
XLE providesfor default specifications that permit many redun-dant individual entries to be removed from all lexi-cons.The lexical entry for the special headword-Lunknown contains subentries giving the defaultsyntactic properties for each category.
The entry-Lunknown N BASE @CN;V BASE @TRANS.indicates that the default properties of morpholog-ical nouns are provided by the common-noun tem-plate ?ON and that verbs are transitive by default.-Lunknoun is taken as the definition for each lower-case word at the beginning of the scan through theordered list of lexicons, and these subentries will pre-vail unless they are overridden by more specific infor-mation about the word.
Another special headword-LUnknown gives the default definition for upper-casewords (e.g.
for proper nouns in English).To illustrate, suppose that the morphological n-alyzer produces the following analysisdoors : door -Np1but that there is no explicit lexical entry for "door".Edges for both N-SO and V-SC, with constraintsdrawn from the -Lunknown entry would be addedto the initial chart, along with edges for the tags.But only the sublexical ruleN --> N-BASE N-SFXwould succeed, because the morphological nalyzersupplied the -Npl tag and no verbal inflection.
Thusthere is no need to have a separate ntry for "door"in the lexicon.
This feature contributes to the ro-bustness of XLE processing since it will produce themost common definition for words known to the mor-phology but not known to the lexicon.5 SummaryWhile GWB provides a self-contained environmentfor work in syntactic theory exploration, XLE isintended for production grammar development forparsing and generation.
It must herefore provide forthe careful integration ofexternally--created morpho-logical and lexical resources.
These resources cannotbe used directly because they typically contain er-rors or are otherwise inconsistent with the needs ofgrammar developers.XLE contains several mechanisms for reconcil-ing external resources with grammar-specific lexi-cal and syntactic requirements.
XLE allows thegrammar writer to assemble ffective tokenizers andmorphological nalyzers by combining externally-provided components with locally-developed ones.These combinations are expressed with the finite-state calculus, many of whose operations are sim-ulated at run-time.
XLE also allows the grammarwriter to obtain effective LFG lexical definitions bymeans of edit entries that combine information fromvarious external sources with manually coded anddefault definitions.
These extensions to the originalGWB specifications have proven extremely helpfulin our large*scale grammar development efforts.6 AcknowledgementsWe would like to thank the participants of the Par-gram Parallel Grammar project for raising the is-sues motivating the work described in this paper,in particular Miriam Butt and Christian Rohrer foridentifying the lexicon-related problems, and TracyHolloway King and Marfa-Eugenia Nifio for bring-ing morphological problems to our attention.
Wealso thank John Maxwell for his contribution to-wards formulating one of the approaches described,and Max Copperman for his help in implementingthe facilities.
And we thank Max Copperman, MaryDalrymple, and John Maxwell for their editorial as-sistance.ReferencesMiriam Butt, Tracy Holloway King, Marfa-EugeniaNifio, and Fr~d~rique Segond.
Forthcoming.
Agrammar writer's handbook, CSLI, Stanford, CA.Judith Eckle and Ulrich Heid.
1996.
Extracting rawmaterial for a German subcategorization lexiconfrom newspaper text.
In International Conferenceon Computational Lexicography (COMPLEX-96),Budapest, September.Ronald M. Kaplan.
1995.
The formal architecture oflexical-functional grammar.
In M. Dalrymple, R.M.
Kaplan, J. T. Maxwell, A. Zaenen editors, For-mal Isssues in Lexical-Functional Grammar, CSLIPublications, Stanford, CA.Ronald M. Kaplan and Joan Bresnan.
1982.Lexical-functional grammar: a formal system forgrammar epresentation.
In J. Bresnan, editor,60The Mental Represenation of Grammatical Rela-tions, M1T Press, Cambridge, MA.Ronald M. Kaplan and John T. Maxwell 1996LFG grammar writers workbench.
Available atftp://ftp.parc.xerox.com/pub/lfg/19940 Ronald M. Kaplan and Martin Kay.
Regularmodels of phonological rule systems.
Computa-tional Linguistics, 20:3, pages 331-378.L.
Karttunen, J-P. Chanod, G. Grefenstette, A.Schiller 1997.
Regular expressions for languageengineering.
In Natural Language EngineeringCambrige University Press.John T. Maxwell, and Ronald M. Kaplan.
1991.A method for disjunctive constraint satsifaction.In M. Tomita, editor, Current Issues in ParsingTechnology.
Kluwer Academic Publications.John T. Maxwell, and Ronald M. Kaplan.
1993.The interface between phrasal and functional con-straints.
Computational Linguistics, 19:4, pages571-590.61
