Proceedings of the 5th ACL-HLT Workshop on Language Technology for Cultural Heritage, Social Sciences, and Humanities, pages 63?68,Portland, OR, USA, 24 June 2011. c?2011 Association for Computational LinguisticsThe ARC Project: Creating logical models of Gothic cathedrals usingnatural language processingCharles HollingsworthInst.
for Artificial IntelligenceThe University of GeorgiaAthens, GA 30602cholling@uga.eduStefaan Van LiefferingeRebecca A. SmithLamar Dodd School of ArtThe University of GeorgiaAthens, GA 30602Michael A. CovingtonWalter D. PotterInst.
for Artificial IntelligenceThe University of GeorgiaAthens, GA 30602AbstractThe ARC project (for ArchitectureRepresented Computationally) is an at-tempt to reproduce in computer form thearchitectural historian?s mental model ofthe Gothic cathedral.
This model includesthe background information necessary tounderstand a natural language architecturaldescription.
Our first task is to formalizethe description of Gothic cathedrals in alogical language, and provide a means fortranslating into this language from naturallanguage.
Such a system could then beused by architectural historians and othersto facilitate the task of gathering and usinginformation from architectural descriptions.We believe the ARC Project will representan important contribution to the preservationof cultural heritage, because it will offera logical framework for understanding thedescription of landmark monuments of thepast.
This paper presents an outline of ourplan for the ARC system, and examines someof the issues we face in implementing it.1 IntroductionThe ARC project is designed to assist architecturalhistorians and others with the task of gathering andusing information from architectural descriptions.1The architectural historian is confronted with an1This research benefited from the generous support of a Dig-ital Humanities Start-Up Level I Grant from the National En-dowment for the Humanities (Grant Number HD5110110), aUniversity of Georgia Research Foundation Grant, and fromThe University of Georgia President?s Venture Fund.overwhelming amount of information.
Even if werestrict ourselves to Gothic architecture (our primaryarea of interest), any given building has probablybeen described dozens, if not hundreds, of times.These descriptions may have been written in dif-ferent time periods, using different vocabularies,and may describe the same building during differentstages of construction or renovation.
Descriptionsmay be incomplete or even contradictory.
An archi-tectural historian should be able to extract necessaryinformation about a building without encounteringanything contradictory or unclear.To facilitate information gathering, we propose alogic-based knowledge representation for architec-tural descriptions.
Our approach is similar to thatused by Liu et al (2010), but while their representa-tion took the form of a set of production rules for anL-system, ours is more closely tied to the semanticsof natural language.
Descriptions of various cathe-drals would then be translated into this representa-tion.
The resulting knowledge base would be usedto give intelligent responses to queries, identify con-flicts among various descriptions, and highlight rela-tionships among features that a human reader mighthave missed.2 Why Gothic?In addition to being major monuments of culturalheritage, Gothic cathedrals are particularly well-suited for logical analysis.
The structure of Gothicfollows a logical form.
Despite variations, Gothiccathedrals present a number of typical features, suchas pointed arches, flying buttresses, and a plan on aLatin cross (Figure 1).
The repetition of elements63Figure 1: Example of a cathedral ground plan (Chartres,France), from Viollet-le-Duc (1854-68)like columns and vaulting units allows for more suc-cinct logical descriptions (Figure 2).
And the his-torical importance of Gothic means that a wealth ofdetailed descriptions exist from which we can buildour knowledge base.The study of Gothic cathedrals is also importantfor cultural preservation.
Some cathedrals have beenmodified or renovated over the years, and their orig-inal forms exist only in descriptions.
And tragediessuch as the 1976 earthquake which destroyed thecathedral in Venzone underscore the importance ofarchitectural information.
A usable and versatile ar-chitectural knowledge base would greatly facilitatethe task of restoring damaged buildings.3 Outline of the ARC systemThe outline of the ARC system is the result of closecollaboration between architectural historians andartificial intelligence researchers.
While the systemis still in its infancy, the complete ARC system willhave three distinct modes of interaction, to be usedby three different types of user.
We will refer toFigure 2: Nave of Notre Dame de Paris, showing the rep-etition of elements.
(Photograph by S. Van Liefferinge)these modes as superuser mode, administrator mode,and user mode.
The superuser mode will be used towrite and edit a generic model for Gothic architec-ture that will serve as background information priorto dealing with any specific descriptions.
The ad-ministrator mode will be used to enter the details ofparticular buildings.
The purpose of the user modewill be to allow end users to submit queries to theknowledge base.3.1 Superuser modeA small set of superusers will be able to create andedit the generic model of a Gothic cathedral.
Thiswill consist of information about features generallyconsidered typical of Gothic (such as the cruciformground plan and use of pointed arches) as well asmore common-sense information (such as the factthat the ceiling is above the floor).
These are factsthat are unlikely to be explicitly stated in an archi-tectural description because the reader is assumedto know them already.
Individual descriptions needonly describe how a particular building differs fromthis generic model.
The generic model will be un-derdetermined, in that it will remain silent about fea-tures that vary considerably across buildings (suchas the number of vaulting units in the nave).The generic description will be written in adomain-specific architectural description language(ADL) modeled on English, and translated into alogical programming language such as Prolog.
The64A column is a type of support.
Everycolumn has a base, a shaft, and a cap-ital.
Most columns have a plinth.
Thebase is above the plinth, the shaft isabove the base, and the capital is abovethe shaft.
Some columns have a neck-ing.
The necking is between the shaftand the capital.Figure 3: Sample ADL listing.general task of rendering the semantics of natu-ral language into logic programming is addressedextensively by Blackburn and Bos (2005), and anarchitecture-specific treatment is given by Mitchell(1990).
However, our goal is not a complete imple-mentation of English semantics.
Rather, our task ismore like natural language programming, in whichthe computer is able to extract its instructions fromhuman language.
(For treatments of natural lan-guage programming systems in other domains, seeNelson (2006) and Lieberman and Liu (2005).)
Inparticular, historical details, asides, and other lan-guage not pertaining to architecture would be treatedas comments and safely ignored.
A syntactic parsercan extract those sentences and phrases of interest tothe system and pass over the rest.
The ADL shouldallow anyone reasonably familiar with architecturalterminology to work on the description without thesteep learning curve of a programming language.It should be able to understand multiple wordingsfor the same instruction, perhaps even learning newones over time.
As our eventual goal is to be ableto understand real-world architectural texts, gram-matical English sentences should not produce errors.Any such misunderstanding should be seen as an op-portunity to improve the system rather than a failureon the part of the user.
As an example of how a por-tion of a column description in an ADL might look,see Figure 3.
In order to implement this ADL, anumber of interesting problems must be solved.
Thefollowing section describes a few we have dealt withso far.Referring to unnamed entitiesThe simple statement ?Every column has a base?does not have a straightforward rendering in a log-ical language like Prolog.
In order to render it, wemust be able to say that for each column, there existssome (unnamed) base belonging to that column.
Todo this, we use Skolemization (after Skolem (1928)),a technique for replacing existential quantifiers withunique identifiers (Skolem functions).
Blackburnand Bos (2005) demonstrate the use of Skolem func-tions in capturing natural language semantics, and acontemporary application is demonstrated by Cua etal.
(2010).
Our implementation is a modified versionof that described by Covington et al (1988).To say ?Every column has a base?, we insert tworules into the knowledge base.
The first declares theexistence of a base for each column:base(base inst(X, 1)) :- column(X).The second tells us that the base belongs to the col-umn:has(X, base inst(X, 1)) :- column(X).Here base inst(X, 1) is a Skolem function for aninstance of base, where X is the name of the objectto which it belongs, and 1 is its index.
(In the caseof a base, there is only one per column.)
Thus acolumn named column1 would have a base namedbase inst(column1, 1), and so forth.Context sensitivitySentences are not isolated semantic units, butmust be understood in terms of information pro-vided by previous sentences.
In the listing in Fig-ure 3, the statement ?the base is above the plinth?
isinterpreted to mean ?each column?s base is abovethat column?s plinth?.
In order to make the cor-rect interpretation, the system must know that thepresent topic is columns, and recognize that ?base?and ?plinth?
are among the listed components ofcolumns.We assume the superuser?s description consti-tutes a single discourse, divided into topics by para-graph.
Accessibility domains correspond to para-graphs.
When the description mentions ?the base?,it is assumed to refer to the base mentioned earlier inthe paragraph as a component of the column.
Thatthe column is the paragraph?s topic is indicated inthe first sentence.
Our treatment of discourse refer-ents and accessibility domains is similar to that ofdiscourse representation theory (Kamp and Reyle,1993).65Default reasoningWe must have a way to dismiss facts from theknowledge base on the basis of new evidence.
Ourmodel describes the ?typical?
Gothic cathedral, notevery Gothic cathedral.
There is usually an excep-tion to an apparent rule.
To handle this, we makeuse of defeasible or nonmonotonic reasoning, as de-scribed by Reiter (1987) and Antoniou (1997).
(Sev-eral variants of defeasible reasoning are also de-scribed by Billington et al (2010).
)The ADL accommodates exceptions through theuse of modifiers.
Words like ?all?
and ?every?
indi-cate a rule that holds without exception.
Words like?most?
or ?usually?
indicate that a rule is present bydefault in the model, but can be altered or removedby future assertions.
Finally, the word ?some?
in-dicates that a rule is not present by default, but canbe added.
The system?s internal logical represen-tation can keep track of which rules are defeasibleand which are not.
Attempts to make an assertionthat conflicts with a non-defeasible rule will fail,whereas assertions contradicting a defeasible rulewill modify the knowledge base.
Conclusions deriv-able from the defeated rule will no longer be deriv-able.
Our implementation is a somewhat simplifiedversion of the system presented by Nute (2003).Partial orderingDefeasible reasoning can help us resolve a par-ticular type of ambiguity found in natural language.Architectural descriptions contain many partial or-dering relations, such as ?above?
or ?behind?.
Theserelations are irreflexive, antisymmetric, and transi-tive.
When such relations are described in natu-ral language, as in the description in Figure 3, theyare typically underspecified.
We say that an item is?above?
another, without making explicit whether itis immediately above.
We also do not specify whichis the first (e.g.
lowest) element in the series.
In ourgeneric model, if it is simply stated that one item isabove another, we insert a non-defeasible rule in theknowledge base, such asabove(capital, shaft)The further assertionimmediately(above(capital, shaft))is also made, but is defeasible.
Should another itembe introduced that is above the shaft but below thecapital, the immediately relation no longer holds.We can also deal with underspecificity by recogniz-ing when more than one state of affairs might corre-spond to the description.
For example, if it has beenasserted that item A is above item C, and that itemB is above item C, we have no way of knowing thepositions of A and B relative to each other.
A queryIs A above B?
must then return the result maybe.3.2 Administrator modeThe administrator mode is used to input informa-tion about particular buildings, as opposed to Gothiccathedrals in general.
When an administrator be-gins an interactive session, the generic model de-signed by the superuser is first read into the knowl-edge base.
The administrator simply describes howthe particular cathedral in question differs from thegeneric model, using the same architectural descrip-tion language.
We would also like for the adminis-trator mode to accept real-world cathedral descrip-tions in natural language rather than ADL.
This is anontrivial task, and complete understanding is likelya long way away.
In the short term, the systemshould be able to scan a description, identify certainsalient bits of information, and allow the adminis-trator to fill in the gaps as needed.
To illustrate theproblem of understanding real-world descriptions,we present the following excerpt from a descriptionof the Church of Saint-Maclou:The nave arcade piers, chapel open-ing piers, transept crossing piers, andchoir hemicycle piers are all composed ofcombinations of five sizes of individualplinths, bases, and moldings that rise fromcomplex socles designed around polygonsdefined by concave scoops and flat faces.All the piers, attached and freestandingon the north side of the church, are com-plemented by an identical pier on the op-posite side.
However, no two piers onthe same side of the church are identical.
(Neagley, 1998) p. 29.There are important similarities between this de-scription and our own architectural description lan-guage.
We see many key entities identified (navearcade piers, chapel opening piers, etc.
), as well as66words indicating relationships between them (com-posed, identical, etc.)
Even if complete understand-ing is not currently feasible, we could still use tech-niques such as named entity extraction to add detailsto our model.3.3 User modeThe user mode will consist of a simple query an-swering system.
Users will input queries such as?How many vaulting units are in the nave at Saint-Denis??
or ?Show me all cathedrals with a four-story elevation.?
The system will respond with themost specific answer possible, but no more, so thatyes/no questions might be answered with ?maybe,?and quantitative questions with ?between four andsix?, depending on the current state of the knowl-edge base.
Unlike web search engines, which onlyattempt to match particular character strings, oursystem will have the advantage of understanding.Since descriptions are stored as a logical knowledgebase rather than a string of words, we can ensure thatmore relevant answers are given.4 ConclusionThe ARC project is a great undertaking, and presentsus with a number of problems that do not have readysolutions.
We have presented just a few of theseproblems, and the techniques we have developed forsolving them.
There is still much work to be donein implementing the architectural description lan-guage, and processing real-world descriptions.
Inaddition, there are some capabilities we would liketo add to the system, such as producing graphicalrenderings from descriptions.It is our hope that the ARC system, when com-pleted, will be of great benefit to architectural his-torians, or anyone interested in Gothic cathedrals.Having a knowledge base of cathedral designs thatcan respond to queries will make the historian?s taskeasier.
The system?s ability to identify vague or con-tradictory statements allows us to see how historicaldescriptions differ from one another.
And the pro-cess of rendering architectural descriptions in a log-ical form could provide new insights into the designand structure of cathedrals.ReferencesGrigoris Antoniou.
1997.
Nonmonotonic Reasoning.The MIT Press, Cambridge, MA.David Billington, Grigoris Antoniou, Guido Governatoriand Michael Maher.
2010.
An Inclusion Theorem forDefeasible Logics.
ACM Transactions on Computa-tional Logic Vol.
12, No.1, Article 6, October 2010.Patrick Blackburn and Johan Bos.
2005.
Representationand Inference for Natural Language: A First Course inComputational Semantics.
CSLI Publications, Stan-ford, California.Michael A. Covington, Donald Nute, Nora Schmitz andDavid Goodman.
1988.
From English to Prolog viaDiscourse Representation Theory.
ACMC ResearchReport 01-0024, The University of Georgia.
URL(viewed May 5, 2011): http://www.ai.uga.edu/ftplib/ai-reports/ai010024.pdfJeffrey Cua, Ruli Manurung, Ethel Ong and Adam Pease.2010.
Representing Story Plans in SUMO.
In Pro-ceedings of the NAACL HLT 2010 Second Workshopon Computational Approaches to Linguistic Creativ-ity.
Association for Computational Linguistics, LosAngeles, California, June 2010, 40-48.Hans Kamp and Uwe Reyle.
1993.
From Discourse toLogic.
Kluwer, Dordrecht.Henry Lieberman and Hugo Liu.
2005.
Feasibility Stud-ies for Programming in Natural Language.
End-UserDevelopment.
H. Lieberman, F. Paterno, V. Wulf, eds.Kluwer, Dordrecht.Yong Liu, Yunliang Jiang and Lican Huang.
2010.
Mod-eling Complex Architectures Based on Granular Com-puting on Ontology.
IEEE Transactions on Fuzzy Sys-tems, vol.
18, no.
3, 585-598.William J. Mitchell.
1990.
The Logic of Architecture:Design, Computation, and Cognition.
The MIT Press,Cambridge, MA.Linda Elaine Neagley.
1998.
Disciplined Exuberance:The Parish Church of Saint-Maclou and Late GothicArchitecture in Rouen.
The Pennsylvania State Uni-versity Press, University Park, PA.Graham Nelson.
2006.
Natural Language, SemanticAnalysis and Interactive Fiction.
URL (viewed May 5,2011): http://www.inform-fiction.org/I7Dowloads/Documents/WhitePaper.pdfDonald Nute.
2003.
Defeasible Logic.
In Proceed-ings of the Applications of Prolog 14th InternationalConference on Web Knowledge Management And De-cision Support (INAP?01), Oskar Bartenstein, UlrichGeske, Markus Hannebauer, and Osamu Yoshie (Eds.
).Springer-Verlag, Berlin, Heidelberg, 151-169.Raymond Reiter.
1987.
Nonmonotonic Reasoning.
Ann.Rev.
Comput.
Sci.
1987.2: 147-86.67Thoralf Skolem.
1928.
U?ber die mathematische Logik(Nach einem Vortrag gehalten im Norwegischen Math-ematischen Verein am 22.
Oktober 1928).
In SelectedWorks in Logic.
Jens Erik Fenstad, ed.
Universitets-forlaget, Oslo - Bergen - Tromso?, 1970, 189-206.Euge`ne-Emmanuel Viollet-le-Duc.
1854-68.
Dictio-nnaire raisonne?
de l?architecture franc?aise du XIeau XVIe sie`cle.
vol.
2.
Libraries-ImprimeriesRe?unies, Paris.
Image URL (viewed May 5,2011): http://fr.wikisource.org/wiki/Fichier:Plan.cathedrale.Chartres.png68
