Natural Language Dialogue Servicefor Appointment Scheduling Agents*Stephan Busemann,  Th ie r ry  Dec le rck ,  Abde l  Kader  D iagne ,Luca  D in i ,  Jud i th  K le in ,  Sven  SchmeierDFK I  GmbHStuhlsatzenhausweg 3, 66123 Saarbriicken, Germanybusemann?dfk?, un i - sb ,  deAbst rac tAppointment scheduling isa problem faceddaily by many individuals and organiza-tions.
Cooperating agent systems havebeen developed to partially automate thistask.
In order to extend the circle of par-ticipants as far as possible we advocate theuse of natural anguage transmitted by e-mail.
We describe COSMA, a fully imple-mented German language server for exist-ing appointment scheduling agent systems.COSMA can cope with multiple dialogues inparallel, and accounts for differences in di-alogue behaviour between human and ma-chine agents.
NL coverage of the sub-language is achieved through both corpus-based grammar development and the use ofmessage xtraction techniques.1 Mot ivat ionAppointment scheduling is a problem faced dailyby many individuals and organizations, and typical-ly solved using communication in natural anguage(NL) by phone, fax or by mail.
In general, cooper-ative interaction between several participants i re-quired.
Since appointments are often scheduled onlyafter a sequence of point-to-point connections thiswill, at times, necessitate r peated rounds of com-munication until all participants agree to some dateand place.
This is a very time-consuming task thatshould be automated.Systems available on the market alow for calendarand contact management.
As (Busemann and Mer-get, 1995) point out in a market survey, all planningand scheduling activity remains with the user.
Co-operative agent systems developed in the field of Dis-tributed AI are designed to account for the schedul-ing tasks.
Using distributed rather than centralized*This work has been supported by a grant from theGerman Federal Ministry of Education, Science, Re-search and Technology (FKZ ITW-9402).calendar systems, they not only guarantee a maxi-mum privacy of calendar information but also offertheir services to members or employees in externalorganizations.
Although agent systems allow usersto automate their scheduling tasks to a considerabledegree, the circle of participants remains restrictedto users with compatible systems.To overcome this drawback we have designed andimplemented COSMA, a novel kind of NL dialoguesystems that serves as a German language front-end system to scheduling agents.
Human languagemakes agent services available to a much broaderpublic.
COSMA allows human and machine agentsto participate in appointment scheduling dialoguesvia e-mall.
We are concerned with meetings all par-ticipants hould attend and the date of which is ne-gotiable.2 Des ign  gu ide l inesCOSMA is organized as a client/server architecture.The server offers NL dialogue service to multipleclient agent systems.
Up to now, three differenttypes of agent systems have been hooked up to theNL server.
Agents developed in-house were usedfor the early system described in (Busemann et al,1994).
In a subsequent version, the MEKKA agentsdeveloped by Siemens AG (Lux et al, 1992) havebeen adapted.
We present in Section 4 a third kindof client system, the PASHA II user agent.Given the use of distributed calendar systems,techniques used by both human and machine agentsfor cooperatively scheduling appointments must bebased on negotiation dialogues.
However, humandialogue behaviour differs from interaction betweenmachine agents considerably, as will be discussed inSection 4.
A human-machine interface to existingappointment scheduling agent systems hould com-ply to the following requirements:?
Human utterances must be analyzed to corre-spond closely to agent actions.?
Machine utterances must conform to human di-alogue strategies.25Artificial communication languages have been de-signed for human discourse, e.g.
(Sidner, 1994), aswell as for agent-agent interaction, e.g.
(Steiner etal., 1995).
What would be needed for COSMA isa mapping between strategies implemented in suchlanguages.
Since the type of agent system connect-ed to the COSMA server is not restricted by its dia-logue behaviour, preference was given to implementapplication-dependent mappings instead of develop-ing a generic formalism.
As a consequence, COSMAoperates with general and reusable processing mod-ules that interpret domain- and task-specific data.The same principle was also adopted for NL anal-ysis.
The server must analyze human-generated textand verbalize machine-initiated goals.
For a plausi-ble application, the server must be:?
complete with respect o a sublanguage: all rel-evant information related to appointments mustbe analyzed,?
sufficiently robust to deal with inconsistentanalysis results.Within the HPSG-based approach to grammar de-scription adopted for the early system (Uszkoreit etal., 1994), achieving these goals turned out to bedifficult.
This "deep" approach to NLU describesNL expressions at general inguistic levels (syntaxand surface semantics), and attempts to capture thecomplete meanings of all and only the grammati-cal sentences.
However, an NL system in a realis-tic application should not fail on unexpected input.Moreover, the surface semantic representations de-rived by the grammar were too close to NL for anagent system to deal with.With the present version of the NL server theseproblems are solved by adopting a "shallow" anal-ysis approach, which extracts meanings from thoseportions of a text that are defined as interesting andrepresents hem in an agent-oriented way.
Instead offailing on unexpected input, shallow parsing meth-ods always yield results, although they may not cap-ture all of the meaning intended by the user.
By justdescribing the verbalizations ofrelevant information,shallow parsing rammars are highly domain-specificand task-oriented.
In COSMA, shallow analysis is di-vided up into an application of the message xtrac-tion component sines (discussed in Section 5) anda semantic analysis component IMAS (Section 6).The former extracts appointment-related informa-tion from users' input texts.
It is based on finite-state automata that were defined with help of anannotated corpus of e-mail messages.
The task ofthe latter is to derive a client-oriented semantic rep-resentation, including the communicative intentionand the complete specification of time points needed,which is based on context and semantic inferences.The robustness requirement is fulfilled by recog-nizing failures within the server during semanticanalysis, and possibly within the client systems, andby clarification dialogues (cf.
Section 6.1).After an overview of generation in COSMA (Sec-tion 7) we discuss component interaction in Sec-tion 8.
A novel type of object-oriented architectureis needed to treat multiple dialogues in parallel.
Vir-tual partial system instances are maintained as longas a dialogue is going on.
One such instance is shownin Figure 1.3 A complete  sample  d ia logueA complete sample dialogue taken from the sys-tem's present performance will serve as a referencethroughout the paper.
Every utterance is numberedand labeled; the labels indicate speakers.
We as-sume a three-party e-mail negotiation between a hu-man (H), who does not use a scheduling agent sys-tem, and two machine agents (A, B) that scheduleappointments for their respective owners.
In theserver, human interactions with multiple machinepartners are treated as different NL dialogues (inthe present case between H and A, and H and B).In what follows, H is the initiator, but COSMA al-so copes with machine-initiated dialogues (cf.
Sec-tion 4).
1(01)H(02)A, BIch wiirde Sie gem am Montag, dem 2.11.96wegen der bevorstehenden Projektbegutach-tung treffen.
\[I would like to meet you onMonday Nov. 2 1996 about the upcomingproject review.\]COSMA hat die folgende Zeitangabe ver-standen, die nicht konsistent ist: Mon-tag, den 2.
11.
1996.
KSnnten Sie bitteden Wochentag oder das Datum korrigieren?\[COSMA has understood the following timeexpression, which is not consistent: Monday,Nov.
2 1996.
Could you please correct theweekday or the date?\](03) Ich meinte natiirlich Montag den 4.
11.
\[IH meant of course Monday, Nov. 4.\](04) Am 4.
11.
1996 pat3t es bei mir zwischen 13A und 18 Uhr.
\[Nov. 4, 1996 would suit mebetween 1 and 6 p.m.\](05) Leider kann ich am 4.11.
1996 nicht kommen.B \[Unfortunately I can't come on Nov. 4 1996.\](06)HDer vorige Vorschlag wurde abgelehnt.KSnnen wit uns stattdessen am Dienstagtreffen?
\[The previous proposal was reject-ed.
Can we meet instead on Tuesday?\]1Agent-agent interaction is based on a formal repre-sentation language rather than on NL.26Shallow Analysis  i!i!i!iiiii!i!i!!iii!i!iiiiiiili!ilili!ililili!i!ii!!iiii!
.
.
.
.
.
.
.
.Figure 1: The COSMA architecture: a client connected to a server instance may issue requests to receive asemantic representation for a text, or to generate a text from a semantic representation.
The generic serverinterface invokes the necessary server processes and maintains interaction with the client.
(07)A(0s)B(09)H(10)A,B(11)HZu folgenden Zeiten geht es bei mir: am 5.11.
1996 zwischen 8 und 12 Uhr und zwischen16 und 18 Uhr.
\[The following times wouldsuit me: Nov. 5, 1996 between 8 and 12 a.m.and between 4 and 6 p.m.\]Am 5.
11.
1996 pagt es bei mir zwischen 10und 12 Uhr.
\[Nov. 4, 1996 would suit mebetween 10 and 12 a.m.\]Wie w~re es dann um 10?
\[How about 10then?\]Ich sage den 5.
11.
1996 um 10 Uhr zu.
\[Iaccept Nov. 5, 1996 at 10 a.m.\]Das Treffen wird also am 5.
11.
1996 um 10Uhr stattfinden.
\[The meeting will take placeon Nov. 5, 1996 at 10 a.m.\]In (01) H sends by mistake an inconsistent tempo-ral expression to A and B, giving rise to clarificationdialogues initiated by each of A and B (02).
Therepair provided by H (03) is underspecified with re-spect to clock time (see also (06)), hence the agentsoffer free time slots in accordance to their calendars(04, 07, 08).
These time slots are blocked until fur-ther notice?
Since B rejects the proposed ate (05),a new loop is started by H (06).
When H noticesthat Tuesday is promising, she chooses to refine herproposal by suggesting a clock time (09).
Dynamiccontext knowledge allows the server to reconstructa full time specification that is interpreted by theagents as an alternative proposal.
Refinements can2Cancellations of reserved slots due to a high-priorityrequcst are a straight-forward extension of the presentcoverage.thus be dealt with completely in the server, whereasthe agents may or may not have a concept of refine-ment.
After all agents accept a proposal, the dateis confirmed by the initiator (11).
Upon receipt ofthe confirmation, the agents fix the date in their cal-endars.
Server and agents consider the dialogues ascompleted.4 Dia log ing schedul ing agents4.1 The PASHA II systemPASHA II agents (Schmeier and Schupeta, 1996)are designed according to the InterRaP agent ar-chitecture (Fischer et al, 1995), a layer-based agentmodel that combines deliberative and reactive be-haviour.
The "heart" of an agent is the cooperativeplanning layer, in which negotiation strategies arerepresented as programs and executed by a languageinterpreter.
This supports easy modification and ex-change of plans.
The local planning layer consistsof a constraint planner which reasons about timeslots in the agent's (i.e.
its owner's) calendar.
Incontrast o the planning layers, the behaviour-bascdlayer consists of the agent's basic reactive behaviourand its procedural knowledge.
The world interfacerealizes the agent's sensing and acting capabilitiesas well as the connection to its owner.
PASHA IIagents are connected to the Unix CM calendar man-agement ool, but can easily be hooked up to othercalendar systems.PASHA II agents are easily adapted to the owner'spreferences.
For instance, any time slots the ownerdoes not wish the agent to use can be blocked.
Byvirtue of this mechanism, a working day could bedefined as an interval from e.g.
8 a.m. until 6 p.m.27except for Saturdays, Sundays and holidays.
More-over, gaps between appointments may be specifiedin order to permit sufficient ime between meetings.4.2 Adapt ing  agents  to the  COSMA serverTaking PASHA II as a representative, we describethe requirements for an agent system to connect othe COSMA server.In ter face  to the  server.
The four main modulesinclude the basic TCP/ IP  connection to the server;a parser of semantic representations of the server'sanalysis results, which yields PASHA II structures;an instantiation mechanism for semantic generationtemplates; and a control regime that keeps track ofthe current dialogue.
The control regime confirmsresults of the server, or it activates the server's back-track mechanism if the semantic representation re-ceived does not fit within the current dialogue step,or it issues a request for repair if backtracking shouldnot yield any further results.Rece iv ing  and sending e-mai l .
The PASHA IIinteraction mechanism includes, besides communica-tion via TCP/ IP  protocols, e-mail interaction.
Theagent may poll its owner's mailbox or have one of itsown.
Either the agent or its owner is referred to asactor in the agent's e-mail messages (see Section 7).D ia logue behav iour .
An agent has to generateand understand ifferent dialogue actions represent-ed by corresponding cooperation primitives uch asproposing, accepting, rejecting, canceling or fixing ameeting (Steiner et ai., 1995).Agent-agent interaction usually relies on an ini-tiating agent being responsible for the success of anegotiation.
The initiator's broadcast proposal istriggered by its owner, who determines partners, du-ration and an interval within which the appointmentshould be scheduled.
The agent proposes the firstslot in the interval that is available according to itscalendar.
In case of a rejection of one or more partic-ipants, the initiator would continue to propose newtime slots to all partners until everyone agrees toa common date or there is no such slot within theinterval.
Note that in case of rejection (see (05))PASHA II agents do not use counter-suggestions.In human-human negotiation, efficiency is a majorgoal.
Humans often follow the least effort principle(Dahlb/ick, 1992): the initiator broadcasts a propos-al including a time interval within which the meetingshould take place (e.g.
(03)) and expects refinementsor counter-proposals from the participants.
As theexample shows this may imply the use of underspec-ified temporal descriptions.
This strategy requiresless communication because a greater amount of in-formation is exchanged in one dialogue step betweenthe participants.Handling underspecified temporal information byoffering free time slots (see (04), (07), and (08)) isamong the extensions of PASHA II at the local plan-ning layer.
Note that this strategy can be instanti-ated in different ways, as becomes clear from dealingwith expression such as next week: Only a selectionof free time slots can be provided here, which is ex-plicitly marked using e.g.
for instance.
Moreover, weconsider it indispensable to have agents understandand generate counter-proposais to avoid inefficientplain rejections like (05).5 Cover ing  the  domain  language5.1 Corpus -based  annotat ionIn order to determine the coverage of the sub-language relevant for the application and to measureprogress during system development, a corpus of 160e-mails was selected as reference material from sev-eral hundred e-mails collected from the domain ofappointment scheduling.
The e-mails were manual-ly analyzed and annotated with major syntactic andsemantic features as well as speechact information.A combination of two relational database systemswas employed to ease the storage, maintenance, x-tension and retrieval of the NL data:(i) DITo (Nerbonne et al, 1993), a full textdatabase where the e-mails can be accessed,(ii) tsdb (Oepen et al, 1995), an elaborated factdatabase which permits the extraction of specificlinguistic constructions together with the associat-ed linguistic annotations.
3Annotation \] ExamplePreposit ional Phrases: Wie wgre es \[How about\] ...PP_tempPP_temp-datePP_temp-dayPP_temp-durPP_temp-timein dieser Woche?
\[in this week.~am 4.117 \[on the 4th of Nov..~am Montag?
\[on Monday.~yon 8 bis 127 \[from 8 to 12.~um I07 \[at 10.~Ich komme \[I come\] ...NP_tempNP_temp-dateNP_temp-dayNPAemp-timezwei Stunden spllter.\[two hours later.\]am Montag, den 4.
11.\[on Monday, the 4th of Nov.\]Montag, 14 h. \[Monday, 2 pm.\]Montag, 14 h. \[Monday, 2 pm.\]Figure 2: Semantic annotation of PPs and NPs (an-notated linguistic material in italics)The annotation work is based on the TSNLPframework (Lehmann et al, 1996) where detailedcategory and function lists are defined for the struc-turai and dependency structure annotation of lin-guistic material for NLP test suites.
For COSMA,the classification has been extended according to se-mantic information relevant for the appointment do-main.
For instance, PPs and NPs were specified fur-ther, introducing a more fine-grained semantic anno-SDiTo and tsdb entries are linked via e-mailidentifiers.28tation for temporal expressions, as is shown in Fig-ure 2.The results of database queries provided valu-able insights into the range of linguistic phenome-na the parsing system must cope with in the do-main at hand.
Grammar development is guided bya frequency-based priority scheme: The most im-portant area - temporal expressions of various cate-gories - followed by basic phenomena including dif-ferent verbal subcategorizations, local and thematicPPs, and the verbal complex are successfully cov-ered.5.2 Message ext ract ion  w i th  smesThe message xtraction system sines (Neumann etal., 1997) is a core engine for shallow processing witha highly modular architecture.
Given an ASCII text,sines currently produces predicate argument struc-tures containing shallow semantic analyses of PPsand NPs.
The core of the system consists of:?
a tokenizer, which scans the input using a setof regular expressions to identify the fragmentpatterns (e.g.
words, date expressions, etc.),?
a fast lexical and morphological processing of1,5 million German word forms,?
a shallow parsing module based on a set of finitestate transducers,?
a result combination and output presentationcomponent.Based on the information delivered by the mor-phological analysis of the identified fragment pat-terns, the system performs a constituent analysis.In order to combine complements and adjuncts intopredicate-argument structures, special automata forverbs are then activated over the sequence of con-stituents analyzed so far.
Starting from the mainverb 4, a bidirectional search is performed whose do-main is restricted by special clause markers, sinesoutput yields information about the utterance rele-vant for the subsequent semantic analysis.5.3 Semi -automat ic  g rammar  deve lopmentThe concrete realization of the automata is basedon the linguistic annotations of the e-mail frag-ments in the corpus.
The annotations render a semi-automatic description of automata possible.
For in-stance, verb classification directly leads to the lexicalassignment of a corresponding automaton in s ines .By deriving parts of the grammar directly from cor-pus annotations, maintenance and extension of thegrammars are eased considerably.On the other hand, corpus extension can be sup-ported by sines analyses.
Existing automata can be4If no vcrb is found, a "dummy" entry triggers pro-ccssing of verbless expressions, which occur frequently inc-mail communication.used to annotate new material with available linguis-tic information.
Manual checking of the results re-veals gaps in the coverage and leads to further efine-ment and extension of the automata by the grammarwriter.This way, grammar development can be achievedin subsequent feedback cycles between the annotatedcorpus and sines automata.
The implementation ofthe annotation procedure based on the sines outputformat is underway.6 Semant ic  in terpretat ionSemantic representations produced by sines aremapped into a format suitable for the PASHA-IIclient by the IMAS component (Information extrac-tion Module for Appointment Scheduling).
IMASis based on a domain-dependent view of semanticinterpretation: information-gathering rules explorethe input structure in order to collect all and on-ly the relevant information; the resulting pieces ofinformation are combined and enriched in a mono-tonic, non-compositional way, thereby obtaining anIL (Interface Level) expression, which can be inter-preted by the agent systems.
In spite of the non-compositionality of this process, the resulting ex-pressions have a clear model-theoretic interpretationand could be used by any system accepting first or-der logic representations as input.IL expressions have been designed with the goalof representing both a domain action that is eas-ily mapped onto an agent system's cooperationprimitive, and the associated temporal informa-tion, which should be fully specified due to con-textual knowledge.
Temporal information is par-titioned into RANGE, APPOINTMENT and DURATIONinformation.
RANGE denotes the interval withinwhich a certain appointment has to take place(e.g.
in (03)).
APPOINTMENT denotes the intervalof the appointment proper (e.g.
in (10)).
Inter-vals in general are represented by their boundaries.DURATION, on the contrary, encodes the duration ofthe appointment expressed in minutes.
The back-bone of an IL expression is thus the following:COOPRANGEidentifierLEFT-BOUNDR IGHT-BOUNDAPPTDURATION digitHOUR digitM INUTE digitHOUR digitM INUTE digitIMAS relies on three basic data structures.
Thesentence  s t ructure  contains all the IL expressionsobtained from the analysis of a single sentence.
Theyare ranked according to their informativeness.The text  s t ruc ture  contains all the sentencestructures obtained from the analysis of a whole mes-sage.
Here ranking depends not only on informative-29ness but also on "dialogue expectation": sentencestructures are favoured that contain a domain ac-tion compatible with the IL expression previouslystored in the discourse memory.
As a result, the NLserver will pass to the client the most informative ILexpression of the most informative and contextuallymost relevant sentence of the analyzed text.
5The d iscourse memory  is structured as a se-quence containing all information collected duringthe dialogue.
Thus it contains both IL expressionscommitted by the client and semantic input struc-tures from generation.
The discourse memory isused by IMAS as a s tack .
-The procedural core of IMAS is represented by thetransformation of the input sines representation intoa set of IL expressions.
This process is organizedinto three steps:Linguistic extraction.
The semantic represen-tation of the input sines structure is explored by aset of rules in such a way that all information rele-vant for the appointment domain is captured.
Forevery type of information (e.g.
domain action, hourof appointment, duration, etc.)
a different set ofrules is used.
The rules are coded in a transparentand declarative language that allows for a (possiblyunderspecified) escription of the sines input (rep-resented as a feature structure) with its associated"information gathering" action.Anchoring.
Most utterances concerning the do-main of appointment scheduling are incomplete atleast in two respects.
Either they contain expres-sions which need to be delimited in order to be prag-matically plausible (underspecification, e.g.
(09)), orthey refer to intervals which are not explicitly men-tioned in the sentence (temporal anaphora).
Thefirst class includes probably any NL time expres-sion; even a simple expression such as (01) requiressome extralinguistic knowledge to be understood inits proper contextual meaning (in (01) the "workingday" interval of the respective day must be known).The reconstruction of underspecified temporal ex-pressions is performed by a set of template fillingfunctions which make use of parameters specified bythe client system at the beginning of the dialogue.Temporal anaphora include expressions uch ason Monday, tomorrow, next month, whose inter-pretation depends on the discourse context.
Solv-ing anaphoric and deictic relations involves a rathercomplex machinery which borrows many conceptsfrom Discourse Representation Theory.
In particu-lar, we assume a procedure according to which theantecedent of an anaphoric temporal expression isfirst looked up in the IL expressions of the text al-ready parsed (with a preference for the most recentexpressions); if no one is found, the discourse memo-ry is consulted to retrieve from previous parts of the~If the client is not satisfied with such an expression,backtracking will pass the next-bcst structure tc.dialogue a temporal expression satisfying the con-straints under analysis.
If the search fails again,the expression is interpreted deictically, and resolvedw.r.t, to the time the message was sent.Inferences.
IL expressions can be enriched anddisambiguated by performing certain inferences in-volving temporal reasoning.
Besides trivial cases oftemporal constraint resolution, such as guessing theendpoint of an appointment from its startpoint andits duration, our inference ngine performs disam-biguation of domain actions by comparing intervalsreferred to by different dialogue utterances.
For in-stance, if an utterance u describing an interval I isambiguous between a refinement and a modificationand the previous utterance refers to an interval J in-cluding I, then u can be disambiguated safely as de-noting a refinement.
Analogous inferences are drawnby just checking the possible combinations ofdomainactions across the current dialogue (a rejection canhardly be followed by another cancellation, a fixingcannot occur after a rejection, etc.).
The constraintsguiding this disambiguation procedure are encodedas filters on the output of IMAS and reduce the setof pragmatically adequate IL expressions.6.1 Handling of analysis failuresSometimes IMAS produces an output which cannotbe used by the PASHA-II client.
This happens whenthe human message is either too vague ( What abouta meeting?
), or contains an inconsistent temporalspecification (as in (01)).
In these cases IMAS storesthe available information, and the server generates arequest for clarification in order to recover the nec-essary temporal specifications or to fix the alreadyavailable ones.
This request is mailed to the hu-man partner.
It includes the list of misspelled wordsfound in the input message, which may give the part-ner a clue for understanding the source of the error.Once a clarification is provided, the server attemptsto build an IL expression by merging and/or replac-ing the information already available with the newlyextracted one (cf.
(03)).
If the resulting IL expres-sion satisfies the constraints on well-formedness, it isshipped to the PASHA-II client.
Otherwise the clar-ification subdialogue goes on along the same lines.7 Generat ionClient systems usually want to express in NL a coop-eration primitive and a date expression.
Hence NLgeneration is based on a semantic template filled bythe client.
Depending on its content he templateis unified with a prefabricated structure specifyinglinguistic-oriented input to the generator.
The sameholds for failure messages, uch as (02), and for spec-ifications of free time slots, as in (07), where simplerules of aggregation take care not to repeat he fulldate specification for each clock time mentioned.The production system TG/2  (Busemann, 1996)30proved to be sufficiently flexible to accomplish thistask by its ability to generate preferred formulationsfirst.
For instance, COSMA clients can parameterizeTG/2 so as to refer to their owner by a first per-son pronoun or by a full name, or to use formal orinformal form of addressing the human hearer, orto prefer deictic time descriptions over anaphoricalones.8 A nove l  a rch i tec tureA NLP server which can both provide a range of nat-ural language services and process multiple dialoguesfor a variety of applications in parallel requires (1) anarchitecture that ensures a high degre of reusabilityof NLP resources, (2) the availability of a robust in-terface that guarantees transparency and flexibilitywith respect o data representation a d task spec-ification, (3) client-driven server parametrization,(4) support for incremental, distributed and asyn-chronous robust data processing, and (5) advancedconcepts for synchronization with respect o paralleldialogue processing for multiple clients.
Due to thelimited functionality of common architectural styles(Garlan and Shaw, 1993) with respect o these re-quirements, a novel object-oriented, manager-basedand generic architecture has been designed and im-plemented.
It combines techniques from different ar-eas - in particular, from object technology (Booch,1994) and from coordination theory including work-flow management (Malone and Crowston, 1991) -and is based on two main concepts: the cooperat-ing managers approach (COCONUTS) and the virtualsystem architecture model.8.1 A manager-based approachManagers in the COCONUTS model are control unitswhich coordinate or perform specific activities andcooperate with each other in a client/server form.Their responsabilities, properties, behaviour and in-terface are determined by the classes they belong to.The prominent COCONUTS managers are: the da-ta manager, which provides ervices related to rep-resentation, printing, conversion and transmissionof data; the report manager, which supports spec-ification, generation and printing of processing re-ports; the global interface manager, which provides ageneric server interface; the computing componentsmanagers (toMs), which encapsulates the system'scomponents and let them appear as servers; and, fi-nally, the workflow manager, which is the main con-trol unit.8.2 Coordinat ion and controlCoordinating internal system activities with respectto parallel dialogue processing (including backtrack-ing and failure recovery facilities) requires very pow-erful and flexible mechanisms for task scheduling,synchronization a d control.
In COCONUTS this taskis carried out by the workflow manager, which al-so manages interdependencies between these activ-ities while avoiding redundant ones and controllingthe flow of work among the involved managers (e.g.,passing subtasks from one manager to another ina correct sequence, ensuring that all fulfill their re-quired contributions and taking default actions whennecessary).
The behaviour and function of the work-flow manager are determined by the following se-quence of operations: identifying and formulatinga workflow goal, decomposing it into subgoals, de-termining and allocating resources for achieving thesubgoals, elaborating and, eventually, executing anoperation plan.
It also provides a range of special-ized exception handlers to ensure robustness (seeSection 6.1).8.3 A generic server interfaceFlexible and reliable client/server communication ismade possible by the generic server interface moduleGSI.
It includes a declarative, feature-based repre-sentation and task specification language CCL andan object-oriented communication and data trans-fer module ccI.
For CCL a parser, a printer and aninference ngine are available, ccI contains variouskinds of interlace objects containing higher-level pro-tocols and methods for reliable TCP/ IP-based com-munication, data encoding/decoding and buffering,as well as priority and reference management.
Notethat interface objects are accessible through theirTCP/ IP-based internet addresses and can be asso-ciated to any component (cf.
Figure 1).
This way,subsystems can, on demand, be used as servers, e.g.sines or the generator.8.4 Integrating heterogenous componentsEach COSMA server component is encapsulated by aCCM (computing component manager), which makesits functionality available to other managers.
ACCM has, among other things, a working (short-term) memory, a long-term memory and a variety ofbuffers for storing and managing computed solutionsfor subsequent use.
Using these features a CCM eas-ily simulates incrementality and realizes intelligentbacktracking by providing the computed solutionsin a selective manner.
A component can be releasedby a CCM it is bound to when the latter does nolonger need its services; e.g.
if the component has al-ready computed all solutions.
This permits efficientresource sharing, as several CCMS can be associat-ed to one component.
Thus, associating interfaceobjects with CCMs provides a flexible way of realiz-ing distributed processing performed by componentsimplemented in different languages and running ondifferent machines.8.5 The  v i r tua l  sys tem architectureThe virtual system architecture allows for efficientparallel dialogue processing.
It is based on the con-31cept of cooperating object-oriented managers withthe ability to define one-to-many relationships be-tween components and ?CMs.
The key idea consistsin adopting a manager-based/object-based view ofthe architecture shown in Figure 1.
This architec-ture represents a virtual system (also called opera-tion context), which is a highly complex object con-sisting of a variety of interacting managers.
It mayinherit from different classes of operation contexts,whose definitions are determined by the underlyingdomains of application.
Thus, multiple dialogues areprocessed in parallel just by running each dialoguein a separate virtual system.
As soon as a dialogue iscompleted, the assigned virtual system can be reusedto process another one.
Conceptually, no constraintsare made on the number of active virtual systems inthe server software.
In order to ensure correct pro-cessing, a manager may operate in only one virtualsystem at a time.
Note that managers can still beshared by virtual systems and they behaviour canvary from one system to another.9 Conc lus ionWe described COSMA, a NL server system for exist-ing machine agents in the domain of appointmentscheduling.
The server is implemented in CommonLisp and C. The PASHA II agent is implemented inDFKI-Oz (Smolka, 1995).Robust analysis of human e-mail messages isachieved through message xtraction techniques,corpus-based grammar development, and client-oriented semantic processing and representation.The virtual server architecture is a basis for the flex-ible use of heterogeneous NLP systems in real-worldapplications including, and going beyond, COSMA.Future work includes extensive in-house tests thatwill provide valuable feedback about the perfor-mance of the system.
Further development of Cos-MA into an industrial prototype is envisaged.Re ferencesGrady Booch.
1994.
Object-Oriented Analysis andDesign with Applications.
Benjamin/Cummings,Menlo Park.Stephan Busemann and Iris Merget.
1995.
EineUntersuchung kommerzieller Terminverwaltungs-Software im Hinblick auf die Kopplung mitnatiirlichsprachlichen Systemen.
Technical Doc-ument D-95-11, DFKI, Saarbriicken.Stephan Busemann et al 1994.
COSMA-multi-participant NL interaction for appointmentscheduling.
Technical Report RR-94-34, DFKI,Saarbrficken.Stephan Busemann.
1996.
Best-first surface realiza-tion.
In Donia Scott, editor, Eighth InternationalNatural Language Generation Workshop.
Proceed-ings, Herstmonceux, Univ.
of Brighton.Nils Dahlb~ck.
1992.
Representations of Discourse.Cognitive and Computational Aspects.
Ph.D. the-sis, Department ofComputer and Information Sci-ence.
LinkSping University.Klans Fischer et al 1995.
Unifying control in alayered agent architecture.
Technical Memo TM-94-05, DFKI, Saarbrficken.David Garlan and Mary Shaw.
1993.
An intro-duction to software architecture.
SEI-93-TR-033,Software Engineering Institute, Carnegie MellonUniversity, Pittsburg, Pennsylvania 15213.Sabine Lehmann et al 1996.
TSLNP - Test Suitesfor Natural Language Processing.
In Proceedingsof COLING-96, pages 711-716, Copenhagen.Andreas Lux et al 1992.
A Model for SupportingHuman Computer Cooperation.
In AAAI  Work-shop on Cooperation among Heterogeneous Intel-ligent Systems, San Jose, Ca.Thomas W. Malone and Kevin Crowston.
1991.
To-ward an interdisciplinary theory of coordination.Technical Report CCS TR 120, Center for Co-ordination Science, Sloan School of Management,MIT, Cambridge, MA.John Nerbonne t al.
1993.
A Diagnostic Tool forGerman Syntax.
Machine Translation, 8(1-2).Giinter Neumann et al 1997.
An information ex-traction core system for real world German textprocessing.
In this volume.Stephan Oepen et al 1995.
The TSNLP database:From tsct(1) to tsdb(1).
Report to LRE 62-089,DFKI.Sven Schmeier and Achim Schupeta.
1996.
Pasha II- a personal assistant fo scheduling appointments.In First Conference on Practical Application ofMulti Agent Systems, London.Candace L. Sidner.
1994.
An artificial discourselanguage for collaborative negotiation.
In Proc.12th National Conference on Artificial Intelli-gence.
Volume 1, pages 814-819, Seattle, WA.Gert Smolka.
1995.
The Oz Programming Model.Research Report RR-95-10, DFKI, Saarbrficken.Donald Steiner et al 1995.
The conceptualframework of MAIL.
In Cristiano Castelfranchiand Jean-Pierre Mfiller, editors, From Reactionto Cognition.
5th European Workshop on Mod-elling Autonomous Agents in a Multi-Agent World(MAAMAW 93), pages 217-230.
Springer, LNAI,Vol.
957.Hans Uszkoreit et al 1994.
DISCO-An HPSG-based NLP System and its Application forAppointment Scheduling.
In Proceedings ofCOLING-94, Kyoto.32
