An ENcient Parser Gener;ttor fl)r Nat;rea,1 LanguageMasayuk i  ISIt l I* l (azuhisa OHTA Iliro~dd SA ITOFuj i tsu Inc. Apple Technology, Inc. Keio Univers i tymasayuk i~.nak.math.ke io .ac .
j  p k-ohta@kol)o.apple.coln hxs~nak .math .ke io .ac .
jpAbst rac tWe.
have developed a parser generator for natu-ral language i)rocessing.
The generator named"NLyace" accepts grammar ules written in theYacc format.
NLyacc, unlike Yacc, can handlearbitrary context-free grammars using the gen-eralized Lll.
parsing Mgorithm.
The parser pro-duced by NLyacc elliciently parses given sen-tences and executes emantic actions.
NLyacc,which is a free and sharable software, runs onUNIX workstations and personal computers.1 Parser  Generator  for NLPYacc\[4\] was designed for unambiguous progl'anl-ming languages.
Thus, Yacc cat) not elegantlyhandle a script language with a natural lan-guage flavor, i.e.
Yacc forces a grammar writerto use tricks for handling ambiguities.
To rem-edy this situation we have developed Nl,yaccwhich can handle arbitrary context-fi'ee gr;tnl-mars t and allows a grammar writer to writenatural rules and semantic actions.
Althoughthere are several parsing algorithms for a gen-eral context-fi'ee language, such as ATN, CYI(,and garley, "the generalized Eli.
parsing algo-rithm \[2\]" would be the best in terms of itscompatibi l ity with Yacc and its efficiency.An ambiguous grammar causes a conflict inthe parsing table, a state which has more thanone action in an entry.
The.
generalized LRparsing proceeds exactly tit(.'
same way as thestm~dard one except when it encounters a con-flict.
The standard deterministic LR parserchooses only one action in this situation.
Thegeneralized I,R parser, on the other hand, per-forms all the actions in the multiple entry by*This work was done while lshil stayed at l)ept, ofComputer Science, Keio University, Japan.1To be exact, NLyacc ca,t not handle ;t circular rulelike "A --+ A".splitting the parse stack fin' each action.
Theparser merges the divided sta.ck br;tnches, onlywhen they have the same top state.
This mergeroperation is important for efficiency.
As a re-suit, the stacl( becomes a. gra.plt instead of asimph,, linear state sequence.There is already a generalized LR parserfor natural language processing developed atCarnegie Mellon University \[3\].
Nl,yacc diflhrsfi'om CMU's system in the following points.?
NLyacc is written in C, while CMU's inLisp.?
CMU's cannot handh', c rules, while NI,y-ace does.
c rules are handful for writingnatural rules.The way to execute semantic actions dif-fers.
CMU's evaluates an Ll?
(\]-like se-mantic action attached to each rule whenreduce action is performed on that rule.NLyacc executes a semantic action in twolevels; one is perfin'med during parsingfor syntactic control and the.
other is per-formed onto each successfifl final p;~rse.
Wewill desc.ribe the details of NLyacc's ap-proach in the next section.NLyacc is , ,pper-compatible to Yacc.
NLy-acc consists of three modules; a reader, a pars-ing table constructor, and a drive routine forthe gene.ralized LR parsing.
The reader acceptsgrammar ruh;s in the Yacc format.
The tableconstructor produces a generalized LR.
parsingt;tble instead of the standard I,R.
parsing table.We describe the de.tails of the parser in the nextsectiou.4172 Execut ion  o f  Semant ic  Ac -t ionsNLyacc differs from Yacc mainly in the exe-cution process of semantic actions attached toeach grammar ule.
Namely, Yacc evaluates asemantic action a.q it parses the input.
We ex-amine if this evaluation mechanism is suitablefor the generalized LR.
parsing here.
If we canassume that there is only one final parse, theparser can ewtluate semantic actions when onlyone branch exists on top of the stack.
Althoughhaving only one final parse is often the cruse inpractical applications, the constraint of beingunambiguous i  too strong in generM.2.1 Hand l ing  S ide  E f fec tsNext, we examine what would happen if seman-tic actions are executed uring parsing.
Whena reduce action is performed, the parser eval-uates the action attached to the current rule.As described in the previous section, the parsestack grows in a graph form.
Thus, when theaction contains side effects like an assignmentoperation to a variable shared by different ac-tions, that side effect must not propagate to tileother paths in the graph.If an environment, which is a set of v,zdue ofvariables, is prepared to each path of the parsebranches, such side effect can be encapsulated.When a stack splits, a copy of the environmentshould be created for each branch.
When theparse branches are merged, however, each en-vironment can not be merged.
Instead, themerged state must have all the environments.Thus, the number of environments grows expo-nentially as parsing proceeds.
Therefore thisapproach decreases the parsing e\[Iiciency dras-tically.
Also this high cost operation would bevain when the parse fails in the middle.
Tosum it up, although this approach retains com-patibility with Yacc, it sacrifices efficiency toomuch.2.2 Two K inds  o f  Semant ic  Act ionsWe, therefore, take another approach to han-dling semantic actions in NLyacc.
Namely, theparser just keeps a list of actions to be exe-cuted, and performs all the actions after pars-ing is done.
This method can avoid the problem418above during parsing.
After parsing is done,the semantic action evMuator performs the taskas it traces all the history paths one by one.This approach retains parsing efficiency and canavoid the execution of useless semantic actions.A drawback of this approach is that semanticactions can not control the syntactic parsing,because actions are not evaluated until tile pars-ing is clone.
To compensate the cons above, wehave introduced a new semantic action enclosedwith \[ \] to enable a user to discard semanticallyincorrect parses in the middle of parsing.Namely, there are two types of semantic ac-tions:An action enclosed with \[ \] is executedduring parsing .just as done in Yacc.
If' return 0;' is execute<t in the action, thepartial parse having invoked this actionfails and is disca.rded.
* An action enclosed with { ) is executed al-ter the syntactic parsing.In the example below, the bracketed actionchecks if the subtraction result is negative, and,if true, discar<ts its partial parse.number : number  '-' number\[ $$ = $1-33; i f (35  < 0) re turn  0; \]{ $$ = 31-33; pr int(  ..... , 31, $3, $$); }2.3 Keep ing  Parse  H is to ryOur generalized Lll.
parsing algorithm is differ-ent from tile original one \[2\] in that ore' algo-rithm keeps a history of parse actions to exe-cute semantic actions after the syntactle pars-ing.
The original algorithm uses a packe<l forestrepresentation for the stack, whereas our algo-rithm uses a list representation.The algorithm of keeping the parse history isshown as follows.1) If the next action is "sh i f t  s", then make< s > as the history, where < s > is a list ofonly one element s.2) If the next action is " reduce  r : A -+ B IB2"".11~", then make append( lh,  l I2 ,  ..., I In ,  l - r \ ] )as the history, where Hi  is a history of Bi ,  ris the rule number of production "A  -+ 1~1132?
"1\ ] , / ' ,  an<l the function 'append' concatenatesmultiple lists and returns the result.Now we describe how to execute semantic ac-tions using the parse history.
First, before start-ing to parse, the parser ca.lls "yyinit" functionto initialize wtriables in the semantic actions.Our system requires the.
user to define "yyinit"to set initial values to the variables.
Next, theparser starts parsing and l)erforms a shift ac-tion or a reduce action according to the parsehistory and evaluates the apl)ropriate semanticactions.2.4 E f f i c ient  Memory  ManagementWe use a list structure to implement he.
parsestack, because the stack becomes a complexgrN)h structure as described l)reviously.
Be-cause the parser discards fa.iled branches of thestack, the system rechfims the memory allo-cated for the discarded parses using the "markand sweep garhage collection algorithm \[1\]" touse memory efficiently.
'Phis garl)age collectionis triggered only when the memory is exhaustedin our current implementation.3 DistributionPor tab i l i tyCurrently, NLyacc runs on UNIX worksta.-tions and DOS personal computers.Debugg ing  GrammarsFor grammar debugging, NLyacc providesl)arse trace information such as a history ofshift/reduce actions, execution information of' \[\] actions.
'When NLya.cc encounters an error state,"yyerror" function is called just a.s in Yacc.D is t r ibut ionNLyacc is distributed through e-mail (ple:tsecontact n lyacc~nak .math .ke io .ac .
jp ) .
I)is-tribution package includes all the source codes,a manual, and some sample grammars.Re ferences\[1\] J. McCarthy.
Recursive flmctions of symbolicexpressions and their computation by machine,part 1.
Communications ofthe A CM, 3(4), April1960.\[2\] M. Tomita.
EJficieut Parsing for Nalural Lan-guage.
Kluwer Academic P.blishers, l~oston,MA, 1985.\[3\] M. Tomita and J. G. Carbonell.
The universalparser architecture for knowledge-based machinetranslation.
In Proceedings, lOlh hdcvaationalJoint Um~ference on Arlificial IMelligence (IJ-CAI), Milan, A,gust 1987.\ [ J \ ]  yacc  - yet another compiler-compiler: l)arsingl)rogram generator, in UNLV manual.Appendix - Sample Runs -A sa,mple grammar helow covers a sm~fll set ofl'~nglish sentences.
The.
parser I)ro(h:,ees syntac-tic trees o fag iven  sentence.
Agreement checkis done by the semantic actions./* grml~ar.y */%{#include <stdio.h>#include <stdlib.h>#include "gran~ar,h"#include "proto.h"%}%token NOUN VERB DET PREP%%SS : SS : NP VP{ pr_ t ree($1) ;  }\[ return checkl($1, $2); \]{ $$ = mk_tree2("S", $1, $2); }S : S PP { $5NP : NOUN \[ $${ $$NP : DET NOUN \[ $${ 55NP : NP PP \[ 55{ $$PP : PREP NP { $$VP : VERB NP \[ $5{ $$%%FILE* yyin;extern int yydebug;int main(argc, argv)int argc;char *argv\[\];{int result;= mk_tree2("S", $1, $2); }: $1; \]: mk treel("NP", $I); }= $2; return check2($1, $2);\]= mk tree2("NP", $I, $2); }= $1;  \]= mk_tree2("NP",  $1, 52); }= mk_tree2("PP", $1, 52); }= $1; \]= mk_%ree2("VP", $1, $2); }yydebug = I;419yyin = stdin;read_dictionary("dict");yyinitialize_heap();result = yyparse();printf("Result = Zd\n", result);yyfree_heap();return O;void yyinit(){}int yyerror(message)char* message;{fprintf(stderr, "%s\n", message);ex i t ( l ) ;}int checkl(seml, sem2)SEMPTR seml, sem2;{return (seml->seigen & sem2->seigen);}int check2(seml, sem2)SEMPTR seml, sem2;{return (seml->seigen & sem2->seigen);}/* grammar.h */#define SPELLING_SIZE 32#define HINSBI_SIZE 32#define BUFFER_SIZE 64typedef st ruct  word{struct word *next;char *spelling;int hinshi; /* parts of speech */int seigen; /* constraints */} WORD;typedef enum tag{TLEAF, TNDDE} TAG;typedef struct node{TAG tag;union {WORD* _lea~;struct {char *_pos;struct node *_left;struct node * right;420} _pair;} contents;} NODE, *NODEPTR;#define leaf contents._leaf#define pos contents._pair._pos#define left contents._pair, left#define right contents, pair._righttypedef WORD SEM, *SEMPTR;#define YYSTYPE NODEPTR#define YYSEMTYPE SEMPTR/* dict */I:NOUN:OIYou:NOUN:22you:NOUN:22He:NOUN:04he:NOUN:04She:NOUN:04she:NOUN:04It:NOUN:04it:NOUN:04We:NOUN:IOwe:NOUN:IOThey:NOUN:40they:NOUN:40see:VERB:73sees:VERB:04a:DET:07the:DET:77with:PREP:O0telescope:NOUN:07man:NOUN:07Sample Runs# sentence no.l}\[e sees a man with a telescope "D# parse 1S:(S:(NP:(NOUN:He)VP:(VERB:seesNP:(DET:a NOUN:man)))PP:(PREP:with NP:(DET:aNOUN:telescope)))# parse 2S:(NP:(NOUN:He)VP:(VERB:seesNP:(NP:(DET:a NOUN:man)PP:(PREP:withNP:(DET:a NOUN:telescope)))))# sentence no.2He see a man "D# The semantic actions prune syntactically-# sound but semantically-incorrect parses.
