Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 127?132,Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational LinguisticsFluid Construction Grammar for Historical and Evolutionary LinguisticsPieter Wellens1, Remi van Trijp2, Katrien Beuls1, Luc Steels2,31VUB AI Lab 2Sony Computer Science 3 ICREA Institute forPleinlaan 2 Laboratory Paris Evolutionary Biology (UPF-CSIC)1050 Brussels (Belgium) 6 Rue Amyot PRBB, Dr Aiguidar 88pieter|katrien@ 75005 Paris (France) 08003 Barcelona (Spain)ai.vub.ac.be remi@csl.sony.fr steels@ai.vub.ac.beAbstractFluid Construction Grammar (FCG) is anopen-source computational grammar for-malism that is becoming increasingly pop-ular for studying the history and evolutionof language.
This demonstration showshow FCG can be used to operationalise thecultural processes and cognitive mecha-nisms that underly language evolution andchange.1 IntroductionHistorical linguistics has been radically trans-formed over the past two decades by the ad-vent of corpus-based approaches.
Ever increas-ing datasets, both in size and richness of anno-tation, are becoming available (Yuri et al 2012;Davies, 2011), and linguists now have more pow-erful tools at their disposal for uncovering whichchanges have taken place.
In this demonstration,we present Fluid Construction Grammar (Steels,2011, FCG), an open-source grammar formalismthat makes it possible to also address the questionof how these changes happened by uncovering thecognitive mechanisms and cultural processes thatdrive language evolution.FCG combines the expressive power of fea-ture structures and unification with the adaptiv-ity and robustnes of machine learners.
In sum,FCG aims to be an open instrument for de-veloping robust and open-ended models of lan-guage processing that can be used for both pars-ing and production.
FCG can be downloaded athttp://www.fcg-net.org.2 Design PhilosophyFluid Construction Grammar is rooted in acognitive-functional approach to language, whichis quite different from a generative grammar suchas HPSG (Pollard and Sag, 1994).
A genera-tive grammar is a model of language competencethat licenses well-formed structures and rejects ill-formed utterances.
Such grammars often decideon the well- or ill-formedness of utterances by us-ing a strong type system that defines a set of fea-tures and possible values for those features.
Theburden of efficient and robust language process-ing with a generative grammar largely rests on theshoulders of the language processor.A cognitive-functional grammar, on the otherhand, functions more like a transducer betweenmeaning and form.
In parsing, such a grammartries to uncover as much meaning as possible froma given utterance rather than deciding on its gram-maticality.
In the other direction, the grammartries to produce intelligible utterances, which arewell-formed as a side-effect if the grammar ad-equately captures the conventions of a particularlanguage.
A cognitive-functional grammar canbest be implemented without a strong type systembecause the set of possible features and values forthem is assumed to be open-ended.
Efficient androbust language processing also becomes a jointresponsibility of the grammar and the linguisticprocessor.3 Reversible Language ProcessingAs a construction grammar, FCG represents alllinguistic knowledge as pairings of function andform (called constructions).
This means that anylinguistic item, be it a concrete lexical item (seeFigure 1) or a schematic construction, shares thesame fundamental representation in FCG.Each construction consists of two poles (a se-mantic/functional one and a syntactic/form one),each represented as a feature structure.
By using aseparate semantic and syntactic pole, FCG allowsthe same construction to be efficiently parsed andproduced by the same processing engine by sim-ply changing the direction of application.127resettag ?meaning-849footprints?top-unit-1611(meaning(==(identify-person?kim-1?context-243?person-119)(bindperson?person-119[kim])))(==0kim-lexlex)footprintstag ?form-946?top-unit-1611kim-lex (lex)?top-unit-1611(==0kim-lexlex)(form(==(string?word-kim-1"Kim")))?top-unit-1611sem synargssem-catfootprints?word-kim-1?
?meaning-849(?kim-1)((sem-functionreferring)(sem-classperson))(==1kim-lexlex)footprintssyn-cat?word-kim-1?
?form-946(==1kim-lexlex)((lex-catproper-noun)(syn-functionnominal))Babel web interface http://localhost:8000/1 of 1 12/6/12 11:08 PMFigure 1: Lexical construction for the propernoun ?Kim?
as shown in the FCG web interface.All constructions are mappings between semantic(left) and syntactic feature structures (right).FCG processing uses two different kinds of uni-fication called match and merge.
The match phaseis a conditional phase which checks for applicabil-ity of the construction.
The merge operation mostclosely resembles classical (yet untyped) unifica-tion.
In production (i.e.
going from meaning toform), the processor will consider a construction?ssemantic pole as a set of conditions that need to besatisfied, and the syntactic pole as additional infor-mation that can be contributed by the construction.In parsing (i.e.
going from form to meaning), theroles of the poles are reversed.Since FCG pays a lot of attention to the inter-action between linguistic knowledge and process-ing, it makes it possible to investigate the conse-quences of particular aspects of grammar with re-gard to representation, production, parsing, learn-ing and propagation (in a population of languageusers).
For example, a small case system may beeasier to represent and produce than a large sys-tem, but it might also lead to increased ambigu-ity in parsing and learning that the larger systemwould avoid.
Fluid Construction Grammar canbring these differences to the surface for furthercomputational analysis.It is exactly this ability to monitor the impact ofgrammatical choices, that has sparked the interestof an increasingly wide audience of historical andevolutionary linguists.
With FCG, different histor-ical stages can be implemented (which addressesquestions about representation and processing) butFCG also comes bundled with a reflective learn-ing framework (Beuls et al 2012) for learning thekey constructions of each stage.
That same archi-tecture has proven to be adequately powerful toimplement processes of grammaticalization so thatLinguistic system 1ReconstructionIndividual LearningPopulationAlignmentGrammaticalizationLinguistic system 2ReconstructionIndividual LearningPopulationAlignment1.2.3.1.2.3.4.Figure 2: Schematic overview of the experimentalmethodology for historical and evolutionary lin-guists.
The example here shows only two linguis-tic stages but there could be more.actual linguistic change over time can be modeled(van Trijp, 2010; Beuls and Steels, 2013; Wellensand Loetzsch, 2012).4 How to set up an evolutionarylinguistics experiment in FCG?As the FCG processor can both produce andparse utterances it is possible to instantiate notone but a set or population of FCG processors(or FCG agents) that can communicatively inter-act with each other.
Experiments in historical orevolutionary linguistics make use of this multi-agent approach where all agents engage in situatedpairwise interactions (language games) (Steels,2012b).In this systems demo we will focus on a re-cent experiment in the emergence of grammaticalagreement (Beuls and Steels, 2013).
The languagegame consists of two agents in which one agent(the speaker) has to describe one or more (maxthree) objects in a scene to the other agent (thehearer).
Each object can be described by one ormore words.
It follows that without any grammat-ical marking it would be difficult (often impossi-ble) for the hearer to figure out which words de-scribe the same object and thus to arrive at a suc-cessful interpretation.
The hypothesis is that theintroduction of agreement markers helps solve thisambiguity.Next to setting up a language game script themethodology consists of operationalizing the lin-guistic strategies required for a population to boot-strap and maintain a particular linguistic system (inthis case nominal agreement).
Examples of lin-128!"!
"routine processingdiagnosticproblem repairdiagnostic diagnostic diagnosticproblemrepair meta-layer processingFigure 3: Reflective meta-layer architecture oper-ating as part of an FCG agent/processor.guistic systems already investigated include Ger-man case (van Trijp, 2012a; van Trijp, 2013),the grammatical expression of space (Sprangerand Steels, 2012), the emergence of quantifiers(Pauw and Hilferty, 2012) and the expression ofaspect in Russian (Gerasymova et al 2012) [foran overview see (Steels, 2011; Steels, 2012a)].An experiment generally investigates multi-ple linguistic systems of increasing complexitywhere each system can, but need not, map to astage along an attested grammaticalization path-way.
Most often a stage is introduced in orderto gradually increase the complexity of the emer-gent dynamics.
In this demo we posit four sys-tems/strategies, (1) a baseline purely lexical strat-egy, (2) a strategy to bootstrap and align formal(meaningless) agreement markers, (3) a strategy tobootstrap and align meaningful agreement mark-ers, and finally (4) a strategy that allows re-useof existing lexical constructions as markers (gram-maticalization).Implementing and linking together all the com-ponents involved in a single system is a highlynon-trivial undertaking and our methodology pre-scribes the following four steps to undertake foreach system (see also Figure 2).Reconstruction: A full operationalization of allthe constructions (lexical and grammatical)involved in the chosen linguistic phenom-ena.
When multiple agents are initializedwith these constructions they should be ableto communicate successfully with each other.This stage serves primarily to test and verifyintuitions about the different linguistic sys-tems.Individual Learning: Implementation of learn-ing algorithms (or re-use of existing ones)Figure 4: Meaningful marker strategy.so that one agent can learn the constructionsbased on the input of another agent.
Theselearning operations are generally divided intodiagnostics and repair strategies (see Fig-ure 3).
Diagnostics continually monitor FCGprocessing for errors or inefficiencies andgenerate problems if they are found.
Repairstrategies then act on these problems by al-tering the linguistic inventory (e.g.
adding,removing or changing constructions).Population Alignment: There exists a large gapbetween the cognitive machinary needed forlearning an existing linguistic system (step 2)and bootstrapping, aligning and maintaininga complete linguistic system from scratch.
Inthis step individual learning operators are ex-tended with alignment strategies.Grammaticalization: Moving from one linguis-tic system to another is the final step of theexperiment.
The challenge is to find and im-plement the mechanisms that drive grammat-icalization (Heine and Kuteva, 2007) in linewith observed grammaticalization pathways.As an example we?ll give a short sketch of onepossible game as played in the meaningful markerstrategy as schematically shown in Figure 4.
Thesketch shows a context of four objects (O1 to O4),each described by three features.
The speakerchooses topic O1 + O2 which, given his vocab-ulary (shown top right), results in uttering ?shuq-fon sizhic zabu?.
Words ?shuqfon?
and ?sizhic?both describe parts of O1 and ?zabu?
of O2.
Inorder to explicitly communicate this linking thespeaker attaches the markers ?-ti?
and ?-ta?
so thattheir meaning is compatible with the objects theyare linking as shown in the Figure.
This allows129Figure 5: A network of constructions.
Diamond shaped nodes represent lexical constructions, egg shapednodes represent grammatical constructions and rectangular nodes represent semantic categories.
Arrowscan be read as ?primes?.
For example the preposition between [BETWEEN.PREP] primes the categoryLOCATIVE RELATION which in turn primes both the [LOCATIVE RELATION] and [SPATIAL PHRASE]constructions.
Both of these constructions also require a semantic category [REFERENT].the hearer to arrive at a single non-ambiguous in-terpretation.
For more details we refer the readerto (Beuls and Steels, 2013) and the web demo athttp://ai.vub.ac.be/materials/plos-agreement/.5 Features of FCGA number of key features of FCG have alreadybeen introduced.
Reversible bidirectional process-ing, a single data representation for all linguisticknowledge, a reflective meta-layer architecture forlearning and a multi-agent component for manag-ing multiple interacting FCG instances.
Other fea-tures, some of which are unique to FCG, include,but are not limited to:Web interface: FCG comes with a richHTML/AJAX based web interface (Loet-zsch, 2012) where it can show fine-grainedinformation to the user in a user-friendlymanner through the use of expandableelements.
See Figure 6.Customizable processing: Linguistic process-ing is implemented as a search process(Bleys et al 2011).
The user has easyaccess to the most important parametersinfluencing this process.
Examples of theseare the heuristics and the tests that determinewhether a node represents an acceptablesolution.
FCG comes bundled with a libraryof heuristics and goal tests and with a bitof programming skills users can add newprimitives easily.Customizable construction inventory: By de-fault, FCG stores all constructions in onelarge set.
FCG however supplies a num-ber of different taxonomies, both for concep-tual and efficiency reasons.
One popular op-tion is to organize constructions in smallersubsets (Beuls, 2011) like lexical, morpho-logical, functional, etc.
Another option isto use networks (Wellens, 2011) that canlearn co-occurrence relations between con-structions and ?prime?
constructions whenthey are likely to apply (see Figure 5).Interfaces to external repositories: FCGcan connect to external repositories likeFramenet (Baker et al 1998) and Wordnet(Miller, 1995) to load thousands of lexicalentries (Micelli et al 2009; Wellens andBeule, 2010).Robustness: FCG continues operation as far asit can get even if some constructions do notapply (Steels and van Trijp, 2011).
Sup-plied with appropriate diagnostics and repairstrategies FCG can even recover from errors(van Trijp, 2012b).Open source: Best of all, FCG is freely down-loadable and open source (http://www.fcg-net.org).
It is written in Common Lisp(CLOS) and compatible with most popu-lar lisp implementations (SBCL, CCL, Lisp-works, ...).130toptopParsing "block"Applying construction set (70)  in directionFound a solutioninitialstructure topapplicationprocessappliedconstructionsresultingstructuretopMeaning:((apply-class ?ref-2 ?src-2 ?class-1) (bind object-class ?class-1 block))sem syninitialtoptopcxn-appliedapplication resultstatus cxn-appliedsourcestructure topappliedconstructionresultingstructure topresultingbindings ((?form-84 form ((string block-83 "block"))) (?block-unit-2 .
block-83) (?top-39 .
top))added infirst merge block-83added insecondmergeblock-83cxn supplier :ordered-by-labelremaining labels (cat  gram)remaining cxns (right-lex speaker-lex unique-lex hearer-lex)block-morph (morph t)sem synblock-morph (morph t)sem syn block-83 block-lex(lex t)noun-cat(cat t)noun-cat (cat t) block-lex (lex t) block-morph (morph t)noun-unit-273footprintsmeaningrefsem-catblock-83(block-lex)((bind object-class ?class-1 block))?class-1((sem-function ((value ?sem-function-value-4) (valence (identifier))))(class (object-class)))sem syn noun-unit-273 block-83expanded search tree nodeexpanded unitFigure 6: An example of parsing the noun ?Block?
as shown in the FCG web interface.
Users can clickon nearly every element to show an expanded version.The reader is encouraged to take a look athttp://www.fcg-net.org/projects/design-patterns-in-fluid-construction-grammar for a selection ofdemonstrations of Fluid Construction Grammar.6 ConclusionFluid Construction Grammar is a mature technol-ogy that can be used by computational linguiststo complement more traditional corpus-based ap-proaches.
FCG builds on many existing andproven technologies and adds new innovations tothe mix resulting in a user friendly, yet powerfuland extensible framework for in-depth investiga-tions in natural language phenomena.AcknowledgmentsThe FCG formalism is being developed at the Ar-tificial Intelligence Laboratory of the Vrije Uni-versiteit Brussel and the Sony Computer ScienceLaboratory in Paris.
Pieter Wellens has beensupported by the ESF EuroUnderstanding projectDRUST funded by FWO and by the Vrije Uni-versiteit Brussel.
Katrien Beuls received fund-ing from a strategic basic research grant from theagency for Innovation by Science and Technol-ogy (IWT).
Remi van Trijp is funded by the SonyComputer Science Laboratory Paris.
We wouldalso like to thank Michael Spranger for his con-tributions to the FCG formalism.131ReferencesCollin F. Baker, Charles J. Fillmore, and John B. Lowe.1998.
The Berkeley FrameNet Project.
In Proceed-ings of the 17th international conference on Compu-tational linguistics, Morristown, NJ, USA.
Associa-tion for Computational Linguistics.Katrien Beuls and Luc Steels.
2013.
Agent-basedmodels of strategies for the emergence and evo-lution of grammatical agreement.
PLoS ONE,8(3):e58960, 03.Katrien Beuls, Remi van Trijp, and Pieter Wellens.2012.
Diagnostics and repairs in Fluid Construc-tion Grammar.
In Luc Steels and Manfred Hild, ed-itors, Language Grounding in Robots.
Springer Ver-lag, Berlin.Katrien Beuls.
2011.
Construction sets and unmarkedforms: A case study for Hungarian verbal agree-ment.
In Luc Steels, editor, Design Patterns in FluidConstruction Grammar, pages 237?264.
John Ben-jamins, Amsterdam.Joris Bleys, Kevin Stadler, and Joachim De Beule.2011.
Search in linguistic processing.
In Luc Steels,editor, Design Patterns in Fluid Construction Gram-mar, pages 149?179.
John Benjamins, Amsterdam.Mark Davies.
2011.
N-grams and word frequencydata from the corpus of historical american english(coha).Kateryna Gerasymova, Michael Spranger, and KatrienBeuls.
2012.
A language strategy for aspect: En-coding aktionsarten through morphology.
In LucSteels, editor, Experiments in Cultural LanguageEvolution, pages 257 ?
276.
John Benjamins.Bernd Heine and Tania Kuteva.
2007.
The Genesisof Grammar: A Reconstruction.
Oxford UniversityPress, October.Martin Loetzsch.
2012.
Tools for grammar engineer-ing.
In Luc Steels, editor, Computational Issuesin Fluid Construction Grammar.
Springer Verlag,Berlin.V.
Micelli, R. van Trijp, and J.
De Beule.
2009.
Fram-ing fluid construction grammar.
In N.A.
Taatgen andH.
van Rijn, editors, the 31th Annual Conferenceof the Cognitive Science Society, pages 3023?3027.Cognitive Science Society.George A. Miller.
1995.
Wordnet: a lexical databasefor english.
Commun.
ACM, 38:39?41, November.Simon Pauw and Joseph Hilferty.
2012.
The emer-gence of quantifiers.
In Luc Steels, editor, Experi-ments in Cultural Language Evolution, pages 277 ?304.
John Benjamins.Carl Pollard and Ivan A.
Sag.
1994.
Head-DrivenPhrase Structure Grammar.
University of ChicagoPress, Chicago.Michael Spranger and Luc Steels.
2012.
Emergentfunctional grammar for space.
In Luc Steels, editor,Experiments in Cultural Language Evolution, pages207 ?
232.
John Benjamins, Amsterdam.Luc Steels and Remi van Trijp.
2011.
How to makeconstruction grammars fluid and robust.
In LucSteels, editor, Design Patterns in Fluid ConstructionGrammar, pages 301?330.
John Benjamins, Ams-terdam.Luc Steels, editor.
2011.
Design Patterns in FluidConstruction Grammar.
John Benjamins.Luc Steels, editor.
2012a.
Computational Issues inFluid Construction Grammar, volume 7249 of Lec-ture Notes in Computer Science.
Springer, Berlin.Luc Steels, editor.
2012b.
Experiments in CulturalLanguage Evolution.
John Benjamins, Amsterdam.Remi van Trijp.
2010.
Grammaticalization and seman-tic maps: Evidence from artificial language evolu-tion.
Linguistic Discovery, 8:310?326.Remi van Trijp.
2012a.
Not as awful as it seems : Ex-plaining german case through computational exper-iments in fluid construction grammar.
In Proceed-ings of the 13th Conference of the European Chap-ter of the Association for Computational Linguistics,pages 829?839.Remi van Trijp.
2012b.
A reflective architecture forlanguage processing and learning.
In Luc Steels,editor, Computational Issues in Fluid ConstructionGrammar.
Springer Verlag, Berlin.Remi van Trijp.
2013.
Linguistic assessment crite-ria for explaining language change: A case study onsyncretism in German definite articles.
LanguageDynamics and Change, 3(1).Pieter Wellens and Joachim De Beule.
2010.
Primingthrough constructional dependencies: a case studyin fluid construction grammar.
In The Evolutionof Language ( EVOLANG8), pages 344?351.
WorldScientific.Pieter Wellens and Martin Loetzsch.
2012.
Multi-dimensional meanings in lexicon formation.
In LucSteels, editor, Experiments in Cultural LanguageEvolution, pages 143?166.
John Benjamins, Ams-terdam.Pieter Wellens.
2011.
Organizing constructions in net-works.
In Luc Steels, editor, Design Patterns inFluid Construction Grammar, pages 181?201.
JohnBenjamins, Amsterdam.Lin Yuri, Michel Jean-Baptiste, Lieberman Aiden Erez,Orwant Jon, Brockman Will, and Slav Petrov.
2012.Syntactic annotations for the google books ngramcorpus.
In ACL (System Demonstrations).
The As-sociation for Computer Linguistics.132
