Translating a Unification Grammar with Disjunctions into Logical ConstraintsMikio Nakano and Akira Shimazu*NTT Basic Research Laborator ies3-1 Mor inosato -Wakamiya ,  Atsugi  243-0198 JapanE-mai l :  nakano@atom.br l .nt t .co.
jp ,  sh imazu@jaist .ac .
jpAbstractThis paper proposes a method for generating a logical-constraint-based internal representation from a unifica-tion grammar formalism with disjunctive information.Unification grammar formalisms based on path equa-tions and lists of pairs of labels and values are betterthan those based on first-order terms in that the formeris easier to describe and to understand.
Parsing withterm-based internal representations is more efficient thanparsing with graph-based representations.
Therefore, itis effective to translate unification grammar formalismbased on path equations and lists of pairs of labels andvalues into a term-based internal representation.
Pre-vious translation methods cannot deal with disjunctivefeature descriptions, which reduce redundancies in thegrammar and make parsing efficient.
Since the pro-posed method translates a formalism without expandingdisjunctions, parsing with the resulting representation isefficient.1 IntroductionThe objective of our research isto build a natural languageunderstanding system that is based on unification.
Thereason we have chosen a unification-based approach isthat it enables us to describe grammar declaratively,making the development and amendment of grammareasy.Analysis systems that are based on unification gram-mars can be classified into two groups from the viewpointof the ways feature structures are represented: (a) thoseusing labeled, directed graphs (Shieber, 1984) and (b)those using first-order terms (Pereira nd Warren, 1980;Matsumoto et al, 1983; Tokunaga et al, 1991).In addition to internal representation, grammar for-malisms can be classified into two groups, (i) those thatdescribe feature structures with path equations and listsof pairs of labels and values (Mukai and Yasukawa,1985; Ai't-Kaci, 1986; Tsuda, 1994), and (ii) those thatdescribe feature structures with first-order terms (Pereiraand Warren, 1980; Matsumoto et al, 1983; Tokunaga et* Presently with Japan Advanced Institute of Science and Technology.al., 1991).
Since formalisms (i) are used in the familyof the PATR parsing systems (Shieber, 1984), hereafterthey will be called PATR-Iike formalisms.Most of the previous systems are either ones thatgenerate representation (a) from formalisms (i) or onesthat generate representation (b) from formalisms (ii).However, representation (b) is superior, and formalism(i) is far better.
Representation (b) is superior forthe following two reasons.
First, unification of termsis more efficient of that of graphs because the datastructure of terms is simpler (Sch6ter, 1993).
l Second,it is easy to represent and process named disjunctions(DSrre and Eisele, 1990) in the term-based representation.Named disjunctions are effective when two or moredisjunctive feature values depend on each other.
Thetreatment of named disjunctions in graph unificationrequires a complex process, while it is simple in ourlogical-constraint-based representations.
Formalism (i)is better because term-based formalism is problematicin that readers need to memorize the correspondencebetween arguments and features and it is not easy toadd new features or delete features (Gazdar and Mellish,1989).Therefore, it is effective to translate formalism (i)into representation (b).
Previous translation methods 2(Covington, 1989; Hirsh, 1988; SchSter, 1993; Erbach,1995) are problematic n that they cannot deal with dis-junctive feature descriptions, which reduce redundanciesin grammar.
Moreover, incorporating disjunctive infor-mation into internal representation makes parsing moreefficient (Kasper, 1987; Eisele and DSrre, 1988; Maxwelland Kaplan, 1991; Hasida, 1986).This paper presents a method for translating rammarformalism with disjunctive information based on pathequations and lists of pairs of labels and values into term-I Since unspecified features are represented by variables in termunification, when most of the features are unspecified, it is inefficientto represent feature structures by terms.
In current linguistic theoriessuch as HPSG (Pollard and Sag, 1994), however, thanks to the typespecifications, the number of features that a feature structure can haveis reduced, so it does not cause as much trouble.2Methods that generate r presentation (b)after generating represen-tation (a) are included.934based representations, without expanding disjunctions.The formalism used here is feature-based formalism withdisjunctively defined macros (FF-DDM), an extension ofthe PATR-Iike formalisms that incorporates a descrip-tion of disjunctive information.
The representation usedhere is logical-constraint-based grammar representation(LCGR), in which disjunctive feature structures are rep-resented by Horn clauses.2 Unification Grammar Formalisms withDisjunctive InformationThe main difference between PATR and FF-DDM isthat there can be only one definition for one macroin PATR while multiple definitions are possible in FF-DDM.
These definitions are disjuncts.
I f  the conditionsin one of the definitions of a macro are satisfied, thecondition the macro represents i satisfied.
In FF-DDM,the grammar is described using four kinds of elements:type definitions, phrase structure rules, lexical entries,and macro definitions.Some examples are shown below.
The first is anexample of type definition.
(1) (deftype s ignpos agr  subj)This means that there is a type named sign and thefeature structures of type sign can have POS, AGR, andSUBJ features.This is an example of a phrase structure rule.
(2) (defrule psr l  (s -> np vp)(<s pos> = sentence<np pos> = noun<vp pos> = verb<vp subj> = <rip><np agr> = <vp agr><s agr> = <vp agr>))Here psrl is the name of this rule.
Variable s denotesthe feature structure of the mother node, and np  andv-p are variables that denote the feature structures of thedaughter nodes.
Rule psr l  denotes the relationshipbetween three feature structures , np, and v-p. Thefourth argument is a set of path equations.
The pathequation <s pos> = sentence  indicates that thePOS feature value in the feature structure representedby the variable s is sentence.
The path equation <vpsub j> = <np> means the suaJ feature value o fvp  isidentical to the feature structure np.
A path can be a listof pairs of labels and values, although we do not explainthis in detail in this paper.Next we show an example of a lexical item.
(3) (defword wa lk  (sign)(<sign pos> = verb<s ign  agr> = <s ign  subj agr>)(not3s <s ign  agr>))Here s ign is the variable that represents the lexicalfeature structure for walk.
The disjunctively definedmacro (not3s  <s ign  agr>)  in the last line showsthat the AGR feature value of s ign  must satisfy one ofthe definitions of not3  s.Examples of macro definitions, or definitions ofno t 3 s, are shown below.
(4) (defddmacro not3s  (agr)(<agr num>= sing)( i s t -or -2nd <agr  per>))(5) (defddmacro not3s  (agr)(<agr num>= plural ) )I f  one of these is satisfied, the condition for macronot3  s is satisfied.
Two definitions, (4) and (5) stand ina disjunction relation.
33 Logical-Constraint-Based GrammarRepresentation3.1 Logical Constraint Representation ofDisjunctive Feature StructuresWe will first define logical constraints.
A logical con-straint (constraint for short) is a set of positive literals offirst-order logic.
Each positive literal that is an elementof a constraint is called a constraint element.An example of a constraint is (6).
Constraint elementsare written in the DEC-10 Prolog notation.
The namesof variables tart with capital etters.
(6) {p(X),  q(X, f ( r ) )}A definition clause of a predicate is a Horn clause havingthat predicate as the predicate of its head.
For example,(7) is a definition clause ofp.
4(7) p(f(X, Y)) , - -{r(X) ,  s(Y)}The bodies of definition clauses can be considered asconstraints, that is, bodies can be considered to constrainthe variables in the head.
For example, definition clause(7) means that, for a pair of the variables X and Y,p(f(X, Y)) is true if the instances atisfy the constraint{r (X) ,  s(Y)}.
We omit the body when it is empty.
Theset of definition clauses registered in the system is calleda database.Feature structures that do not include any disjunctionscan be represented by first-order terms.
For example, (8)is described by (9).POS v\] (8) sign AGRsuBJ signagr \[ PER 3rd sing \] \[ agr 3rd J3Since there is no limitation on the number of arguments of a macro,named isjunctions can be described.4Horn clauses are described in a different notation from DEC-10Prolog so as to indicate xplicitly that he bodies can be recognized asconstraints.935(9) sign(v, agr( sing, 3rd), sign(_, agr( sing, 3rd), _))Feature structure (8) is a O'ped feature structure usedin typed unification grammars (Emele and Zajac, 1990).The set of features that a feature structure can haveis specified according to types.
In this paper, we donot consider type hierarchies.
Symbol "_" in (9) is ananonymous variable.
The arguments of function symbolsign correspond to POS feature, AGR feature, and SUBJfeature values.Disjunctions are represented by the bodies of definitionclauses.
A constraint element in a body whose predicatehas multiple definition clauses represents a disjunction.For example, in our framework a disjunctive featuredescri ~tlon (10) 5 is represented by (11).POS vl ist "\[ sign AGR *1 agr PER \[2ndJ(10) l agr \[NUM plural\]suB, sign \[ AO, *1 \]POS n \]sign AGR agr\[ NUMPER 3rdSing\](11) pCsign(v, Agr, sign(_, Agr,_)))~--{not_3s(Agr)}p( sign(n, ag (  ing, 3 d), _))not_3s( agr( sing, Per))  *--{ l st_or.2nd( Per ) }not_3s(ag (pt  al, _))l st_or_2nd( l st ) ~--l st_or_2nd( 2nd) ,--Literal p(X) means that variable X is a candidate for thedisjunctive f ature structure (DFS) specified by predicatep.
The constraint element lst_or_2nd(Per) in (11)constrains variable Per to be either 1st or 2nd.
Ina similar way, not_3s(Agr) means that Agr is a termhaving the form agr(Num, Per), and that either Num issing and Per is subject o 1 st_or_2nd(Per) or that Numis plural.
As this example shows, constraint elements inbodies represent disjunctions and each definition clauseof their predicates represents a disjunct.3.2 Unification by Logical ConstraintTransformationUnification of DFSs corresponds to logical constraintsatisfaction.
For example, the unification of DFSs p(X)and q(Y) is equivalent to obtaining all instances of Xthat satisfy {p(X), q(X)}.In order to be able to use the result of one unificationin another unification, it would be useful to output resultsin the form of constraints.
Such a method of satisfactionis called constraint transformation (Hasida, 1986).
Con-straint transformation returns a constraint equivalent tothe input when it is satisfiable, but it fails otherwise.5 Braces represent disjunctions.The efficiency of another unification using the result-ing constraint depends on which form of constraint thetransformation process has returned.
Obtaining compactconstraints corresponds to avoiding unnecessary expan-sions of disjunctions in graph unification (Kasper, 1987;Eisele and DSrre, 1988).
Some constraint transformationmethods whose resulting constraints are compact havebeen proposed (Hasida, 1986; Nakano, 1991).
By usingthese algorithms, we can efficiently analyze using LCGR.3.3 Grammar RepresentationLCGR consists of a set of phrase structure rules, a set oflexical items, and a database.Each phrase structure role is a triplate ( V --, ~,C /, where V is a variable, ~ is a list of variables,and C is a constraint on V and variables in ~.
Thismeans if instances of the variables atisfy constraint C,they form the syntactic structure permitted by this rule.For example, ( X --~ Y Z, {psr l (X,Y,Z)} ) meansif there is a set of instances x, y, and z of X, Y,and Z that satisfies {psrl(X, Y, Z)}, the sequence of aphrase having feature structure y and that having featurestructure z can be recognized as a phrase having featurestructure x.Each lexical item is a pair (w,p), where w is a wordand p is a predicate.
This means an instance of Xthat satisfies {p(X)} can be a lexical feature structurefor word w. For example, (walk, lex_walk I meansinstances of X that satisfy {lex_walk(X)} are lexicalfeature structures for walk.The database is a set of definite clauses.
Predicatesused in the constraints and predicates that appear in thebodies of the definite clauses in the database should havetheir definition clauses in the database.4 Translation AlgorithmLCGR representation is generated from the grammarin the FF-DDM formalism as follows.
(i) Predicatesthat represent feature values are generated from typedefinitions.
(ii) Phrase structure rules, lexical items, andmacro definitions are translated into LCGR elements.
(iii) Redundancies are removed from definite clausesby reduction.
Below we explain the algorithm throughexamples.Creating predicates that represent feature valuesLet us consider the following type definition.
(12) (deftype signpos agr subj)Then a feature structure of the type sign is representedby three-argument term sign(_, _, _), and its argumentsrepresent Pos, AGR, and SUBJ features.
By using this, thefollowing three definite clauses are created and added tothe database.936(13) pos(sign(X,_,_),X)agr(sign(_,X,_),X)subj(sign(_,_,X),X) .--Translation of phrase structure rules, lexical items,and macro definitions Each of the phrase structurerules, lexical items, and macro definitions is translatedinto a definite clause and added to the database.
This isdone as follows.
(I) Create a literal to be the head.
In the case ofa phrase structure rule and a lexical item, let anewly created symbol be the predicate and all thevariables in the third element be the arguments.With macro definition, let the macro name be thepredicate and all the variables in the third elementbe the arguments.
(II) Compute the body by using path equations anddisjunctively defined macros, and add the createdHorn clause to the database.By using the predicates created at the step (I),phrase structure rules and lexical items in LCGRare created.For example, let us consider the following lexical itemfor verb walk.
(14) (defword walk (sign)(<sign pos> = verb<sign agr> = <sign subj agr>)(not3s <sign agr>))First at the step (I), a new predicate cO and LCGRvariable Sign that corresponds to s ign  are created,cO(Sign) being the head.
At the step (II), <s ignpos> in the second line is replaced by the variableX1 and pos(Sign, X1 ) is added to the body.
Thesymbol verb  is replaced by the LCGR constant verb.Then eq(X l, verb) is added to the body, where eq is apredicate that represents he identity relation and that hasthe following definition clause.eq(X, X) ~--As for the third line, the path <s ign  agr> atthe left-hand side is replaced by X2, <s ign  sub jagr> at the right-hand side is replaced by X4,and {agr(Sign, X2), subj(Sign, X3), agr(X3, X4)}is added to the body.
Then eq(X2, X4) is addedto the body.
For macro (not3s  <s ign  agr>) ,<s ign  agr> is replaced by X5, and agr(Sign, X5)and not3s(X5) are added to the body.
Then (15) isadded to the database.
(15) c0(Sign) *-- { pos( Sign, X 1), eq( X 1, verb),agr(Sign, X2), subj(Sign, X3), agr(X3, X4),eq(X2, X4), agr(Sign, X5), not3s(X5)}Finally, (walk, cO) is registered as a lexical item.
Phrasestructure rules and macro definitions are translated in the(III)same way.
Horn clause (16) is generated from (2), and (S ~ NP VP, {el(S, NP, VP)} ) is registered.
(16) el(S, NP, VP) (---{ pos(S, X1), eq(Xl, sentence),pos(NP, X2), eq(X2, noun), pos(VP, X3),eq(X3, verb), subj(VP, X4), eq(X4, NP),agr(NP, X5), agr(VP, X6), eq(X5, X6),agr(S, X7), agr(VP, X8), eq(X7, X8)}In the same way, Horn clauses (17) are generated fromthe macro definitions (4) and (5).
(17) not3s( Agr ) *--{num( Agr, X 1), eq( X l, sing),per( Agr, X2), l st_or_2nd( X 2 ) }not3s( Agr ) ~{num( Agr, X 1), eq( X 1, plural)}In the above translation process, ifa macro m has multipledefinitions, predicate m' also has multiple definitions.This means disjunctions are not expanded uring thisprocess.Removing Redundancy by Reduction In the defini-tion clauses created by the above proposed method, manypredicates that have only one definition clause are used,such as predicate q, predicates representing feature val-ues, and predicates representing macro that have only onedefinition.
We call these predicates definite predicates.If these definition clauses are used in analysis as theyare, it will be inefficient because the definition clause ofdefinite predicates must be investigated very time theseclauses are used.Therefore, by using the procedure reduce (Tsuda,1994) each literal whose predicate is definite in the bodyis replaced by the body of its definition clause.Let us consider (18) below as an example.
If the soledefinition clause of c2 is (19), c2(X, Y) in (18) is unifiedwith the head of (19).
Then, (18) is transformed into(20).
(18) cl(f(X), Y) ,--{eZ(X, Y)}(19) c2(g(A, B), Y) *-{c3(A), c4(B)}(20) cl(f(g(A, B)), Y) ~--{c3(A), c4(B)}By using this operation, Horn clause (15) above is trans-formed into the following one.cO(sign(verb, X 6, sign(X7, X 6, X8)))~ {not3s( X 6) }Since not3s has two definitions, not3s(X6) is not re-placed.
Consequently, the disjunction denoted by not3sis not expanded in this translation.5 Exper imentThe advantage of this method compared to the previousmethods is that it can translate without expanding dis-junctions.
To show this, we compared the time takenfor two analyses: the first using a grammar translated937into terms after expanding disjunctions 6 and the secondusing a grammar translated without expanding disjunc-tions through our method.
The computation times weremeasured using a bottom-up chart parser (Kay, 1980)in Allegro Common Lisp 4.3 running on Digital Unix3.2 on DEC Alpha station 500/333MHz.
It employsconstraint projection (Nakano, 1991) as an efficient con-straint transformation method.
We measured the timefor computing all parses.
We used a Japanese grammarbased on Japanese Phrase Structure Grammar (JPSG)(Gunji, 1987) that covers fundamental grammatical con-structions of Japanese sentences.
For all of 21 examplesentences (5 to 16 words), the time taken for analysisusing the grammar translated without disjunction expan-sion was shorter (43% to 72%).
This demonstrates theadvantage of our method.6 ConclusionThis paper presented a method for translating a grammarformalism with disjunctive information that is based onpath equations and lists of pairs of labels and valuesinto logical-constraint-based grammar epresentations,without expanding disjunctions.
Although we did nottreat type hierarchies in this paper, we can incorporatethem by using the method proposed by Erbach (1995).AcknowledgmentsWe would like to thank Dr. Ken'ichiro Ishii, Dr. TakeshiKawabata, and the members of the Dialogue Understand-ing Research Group for their comments.
Thanks also goto Ms. Mizuho Inoue and Mr. Yutaka Imai who helpedus to build the experimental system.ReferencesHassan Ai't-Kaci.
1986.
LOGIN: A logic programminglanguage with built-in inheritance.
Journal of LogicProgramming, 3:185-215.Michael Covington.
1989.
GULP 2.0: An extensionof Prolog for unification-based grammar.
TechnicalReport AI- 1989-01, The University of Georgia.Jochen D6rre and Andreas Eisele.
1990.
Feature logicwith disjunctive unification.
In COLING-90, vol-ume 2, pages 100-105.A.
Eisele and J. D6rre.
1988.
Unification of disjunctivefeature descriptions.
In ACL-88, pages 286-294.Martin C. Emele and R6mi Zajac.
1990.
Typed unifi-cation grammars.
In COLING-90, volume 3, pages293-298.Gregor Erbach.
1995.
ProFIT: Prolog with features,inheritance and templates.
In EACL-95, pages 180-187.6Note that disjunctions whose elements are all atomic values arenot expanded.Gerald Gazdar and Chris Mellish.
1989.
Natural Lan-guage Processing in Lisp: An Introduction to Compu-tational Linguistics.
Addison-Wesley.Takao Gunji.
1987.
Japanese Phrase Structure Gram-mar.
Reidel, Dordrecht.K6iti Hasida.
1986.
Conditioned unification for naturallanguage processing.
In COLING-86, pages 85-87.Susan Hirsh.
1988.
P-PATR: A compiler for unification-based grammars.
In V. Dahl and E Saint-Dizier, ed-itors, Natural Language and Logic Programming, II,pages 63-78.
Elsevier Science Publishers.Robert T. Kasper.
1987.
A unification method for dis-junctive feature descriptions.
In ACL-87, pages 235-242.Martin Kay.
1980.
Algorithm schemata nd data struc-tures in syntactic processing.
Technical Report CSL-80-12, Xerox PARC.Yuji Matsumoto, Hozumi Tanaka, Hideki Hirakawa,Hideo Miyoshi, and Hideki Yasukawa.
1983.
BUP: Abottom-up arser embedded in Prolog.
New Genera-tion Computing, 1:145-158.John T. Maxwell and Ronald M. Kaplan.
1991.
A methodfor disjunctive constraint satisfaction.
In MasaruTomita, editor, Current Issues in Parsing technology,pages 173-190.
Kluwer.Kuniaki Mukai and Hideki Yasukawa.
1985.
Com-plex indeterminates in Prolog and its applicationto discourse models.
New Generation Computing,3(4): 145-158.Mikio Nakano.
1991.
Constraint projection: An efficienttreatment of disjunctive feature descriptions.
In ACL-91, pages 307-314.Fernando C. N. Pereira and David H. D. Warren.
1980.Definite clause grammars for language analysis--asurvey of the formalism and a comparison with aug-mented transition networks.
Artificial Intelligence,13:231-278.Carl J. Pollard and Ivan A.
Sag.
1994.
Head-DrivenPhrase Structure Grammar.
CSLI, Stanford.Andreas Sch6ter.
1993.
Compiling feature structuresinto terms: an empirical study in Prolog.
TechnicalReport EUCCS/RP-55, Centre for Cognitive Science,University of Edinburgh.Stuart M. Shieber.
1984.
The design of a computerlanguage for linguistic information.
In COLING-84,pages 362-366.Takenobu Tokunaga, Makoto Iwayama, and HozumiTanaka.
1991.
Handling gaps in logic grammars.Trans.
of Information Processing Society of Japan,32(11):1355-1365.
(in Japanese).Hiroshi Tsuda.
1994. cu-Prolog for constraint-basednatural anguage processing.
IEICE Transactions onInformation and Systems, E77-D(2): 171-180.938
