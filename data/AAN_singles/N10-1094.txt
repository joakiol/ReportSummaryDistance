Human Language Technologies: The 2010 Annual Conference of the North American Chapter of the ACL, pages 661?664,Los Angeles, California, June 2010. c?2010 Association for Computational LinguisticsA Treebank Query System Based on an Extracted Tree GrammarSeth Kulick and Ann BiesLinguistic Data ConsortiumUniversity of Pennsylvania3600 Market St., Suite 810Philadelphia, PA 19104{skulick,bies}@ldc.upenn.eduAbstractRecent work has proposed the use of an ex-tracted tree grammar as the basis for treebankanalysis and search queries, in which queriesare stated over the elementary trees, which aresmall chunks of syntactic structure.
However,this work was lacking in two crucial ways.First, it did not allow for including lexicalproperties of tokens in the search.
Second,it did not allow for using the derivation treein the search, describing how the elementarytrees are connected together.
In this work wedescribe an implementation that overcomesthese problems.1 Introduction(Kulick and Bies, 2009) describe the need for tree-bank search that compares two sets of trees over thesame tokens.
Their motivation is the problem ofcomparing different annotations of the same data,such as with inter-annotator agreement evaluationduring corpus construction.
The typical need is torecognize which annotation decisions the annotatorsare disagreeing on.
This is similar to the problem ofdetermining where the gold trees and parser outputdiffer, which can also be viewed as two annotationsof the same data.As they point out, for this purpose it would be use-ful to be able to state queries in a way that relates tothe decisions that annotators actually make, or thata parser mimics.
They provide examples suggestingthat (parent, head, sister) relations as in e.g.
(Collins,2003) are not sufficient, and that what is needed isthe ability to state queries in terms of small chunksof syntactic structure.Their solution is to use an extracted tree gram-mar, inspired by Tree Adjoining Grammar (Joshiand Schabes, 1997).
The ?elementary trees?
of theTAG-like grammar become the objects on whichqueries can be stated.
They demonstrate how the?lexicalization?
property of the grammar, in whicheach elementary tree is associated with one or moretoken, allows for the the queries to be carried out inparallel across the two sets of trees.However, the work was lacking in two crucialways.
First, it did not allow for including lexicalproperties of a token, such as its Part-of-Speech tag,together with the elementary tree search.
This madeit impossible to formulate such queries as ?find allADVP elementary trees for which the head of thetree is a NOUN NUM?.
Even more seriously, therewas no way to search over the ?derivation tree?,which encodes how the extracted elementary treescombine together to create the original tree.
Thismade it impossible to carry out searches such as?find all verb frames with a PP-LOC modifying it?,and in general to search for the crucial question ofwhere annotators disagree on attachment decisions.In this paper we describe how we have solvedthese two problems.2 Tree ExtractionFollowing (Kulick and Bies, 2009), we draw our ex-amples from the Arabic Treebank1 For our gram-1Part 3, v3.1 - Linguistic Data Consortium LDC2008E22.Also, we use the Buckwalter Arabic transliteration schemehttp://www.qamus.org/transliteration.htm.661SVPPVtHTmtcrashedI??m'NP-SBJNPNOUNTA}rpairplane?QK A?NPNOUNtdrybtrainingI.
KPYKADJPADJEskrypmilitary?KQ???PP-LOCPREPfiyin?
?NP...Figure 1: Sample tree#1SVPPVtHTmtcrashedNP[t]-SBJ?<1.1.2>#2NP< 1 >NOUNTA}rpairplaneNPNOUNtdrybtraining#3 ADJPADJEskrypmilitary#4 PP[b]-LOCPREPfiyinNP?Figure 2: Extracted trees from Figure 1mar we use a TAG variant with tree-substitution,sister-adjunction, and Chomsky-adjunction (Chiang,2003), using head rules to decompose the full treesand extract the elementary trees.
Sister adjunctionattaches a tree (or single node) as a sister to an-other node, and Chomsky-adjunction forms a recur-sive structure as well, duplicating a node.
As oneexample, the full tree is shown in Figure 1, and theextracted elementary trees2 are shown in Figure 2.We briefly mention two unusual features of this ex-traction, and refer the reader to (Kulick and Bies,2009) for detail and justification.
(1)The function tags are included in the tree ex-traction, with the syntactic tags such as SBJ treated2We will use ?etree?
as shorthand for ?elementary tree?.#1#2,S,<1.1.2>#3,M,<1>#4,A,<1.1.2>Figure 3: Derivation Tree for Figures 1 and 2as a top feature value, and semantic tags such as LOCtreated as a bottom feature value, extending the tra-ditional TAG feature system to handle function tags.
(2) Etree #2 consists of two anchors, rather thansplitting up the tree decomposition further.
This isbecause this is an instance of the ?construct state?construction in Arabic, in which two or more wordsare grouped tightly together.The nodes in the elementary trees are numberedwith their Gorn address, and we make two such ad-dresses explicit, in trees #1 and #2.
These addressesappear in the derivation tree in Figure 3.
Each nodein the derivation tree refers to one etree in Figure 2,and each node (except the root) is labelled with theaddress in the parent etree to which it attaches, andthe attachment type (M for Chomsky-adjunction, Afor sister-adjunction, and S for substitution).3 The ?symbol at the node NP[t]-SBJ in tree #1 indicatesthat it is a substitution node.
Etree #3 Chomsky-adjoins at the root of etree #2, thus forming a a newNP node.
Etree #4 sister-adjoins at the NP[t]-SBJnode in etree #1, thus becoming a sister to that node.It is often the case that the same elementary treestructure will be repeated in different elementarytrees extracted from a corpus.
We call each suchstructure an ?etree template?, and a particular in-stance of that template, together with the ?anchors?
(tokens) used in that instance of the template, iscalled an ?etree instance?.The extracted tokens, etree templates, etree in-stances, and derivation trees are stored in a MySQLdatabase for later search.
The derivation tree is im-plemented with a simple ?adjacency list?
represen-tation as is often done in database representations ofhierarchical structure.
The database schema is orga-nized with appropriate indexing so that a full tree isrepresented by a derivation tree, with integers point-3This derivation tree is slightly simplified, since with sister-adjunction it includes more information to indicate the directionand order of attachment.662LEX : (L1) text="fiy"ETREE: (E1) (S (VP A$NP[t]-SBJ?
{dta:1}))(E2) (PP A${lex:L1} NP?
)DTREE: (D1) E2(D2) (E1 E2{dta:1})Figure 4: Examples of one lexical restriction, two etreequeries, and two dtree queriesing to the etree instances, which in turn use integersto represent the etree template in that etree instanceand also point to the anchors of that etree instance.The section of ATB we are working with has402,246 tokens, resulting in 319,981 etree instancesand only 2804 etree templates, which gives an indi-cation of the huge amount of duplication of structurein a typical treebank representation.
From the per-spective of database organization, the representationof the etree templates can be perhaps be viewed as atype of database ?normalization?, in which duplicateinformation is placed in a separate table.3 Query ProcessingWe now describe the algorithm used for searchingon the database with the extracted tree grammar, fo-cusing on how the algorithm now allows searchingbased on the derivation tree and lexical information.Queries are specified as ?etree queries?
and?dtree queries?.
Sample queries are shown in Figure4.
The query processing is as follows:Step 1:The etree templates are searched to determine whichmatch a given etree query.4 This is a simple treematching between each template and query, all ofwhich are small small trees.
It is within this treematching that several of the typical relations can bespecified, such as precedence and dominance.
A ta-ble stores the information on which templates matchwhich queries.In addition, the Etree queries can now include twonew properties.
First, they can include a specifica-4Each etree query has a ?distinguished?
anchor marked A$that indicates the anchor (word) of an etree template that is as-sociated with that query.
The reason for that is that if an etreetemplate has more than one anchor, we only want one to triggerthat query, so that the etree is not counted twice.tion for a lexical restriction, such as lex:L1 in E2in Figure 4.
However, step 1 of the query processingdoes not actually check this, since it is simply go-ing through each template, without examining anyanchors, to determine which have the appropriatestructure to match a query.
Therefore, we store inanother table the information that for a (template,query) to match it must be the case that an anchorat a particular address in that template satisfies aparticular lexical restriction.
It in effect producesspecialized information for the given template as towhat additional restrictions apply for that (template,query) pair to succeed as a match, in each etree in-stance that uses that etree template.
For example,in this case the stored information specifies that anetree instance with template (PP A NP?)
matchesthe query E2 if the instance has an anchor with thetext fiy at address 1.1 (the anchor A).Similarly, the etree query can include a specifica-tion dta (as in E1), for ?derivation tree address?,indicating that the corresponding address in eachmatching template needs to be stored for later ref-erence in derivation tree searching.
In this case, thetemplate for etree instance #1 will match etree queryE1, with the additional information stored that theaddress 1.1.2 will be used for later processing.An important point here is that this additional in-formation is not necessarily the same for the differ-ent templates that otherwise match a query.
For ex-ample, the two templates(1) (S (VP A NP[t]-SBJ<1.1.2>)(2) (SBAR (S (VP A NP[t]-SBJ<1.1.1.2>))both match query E1, but for (1) the storedaddress dta:1 is 1.1.2, while for (2) the storedaddress is is 1.1.1.2.
The same point holds forthe address of the anchor with a lexical restriction.Step 2:For a given query, the matching etree instances arefound.
First it finds all etree instances such that the(template, query) is a match for the instance?s etreetemplate.
It then filters this list by checking the lexi-cal restriction, if any, for the anchor at the appropri-ate address in the etree instance, using the informa-tion stored from step 1.
In the above example, thiswill select etree instance #4 as satisfying query E2,since the template for instance #4 was determined instep 1 to match E2, and the particular instance #4663also satisfies the lexical restriction in query E2.Step 3:The final results are reported using the dtree queries.Some dtree queries are singletons naming an etreequery, such as D1, indicating that the dtree query issimply that etree query.
In this example, any etreeinstance that satisfies the etree query E2 is reportedas satisfying the dtree query D1.The dtree query can also specify nodes in a deriva-tion tree that must satisfy specified etree queries andalso be in a certain relationship in the derivation tree.For example, dtree query D2 in Figure 4 specifiesthat the query is for two nodes in a parent-child re-lationship in the derivation tree, such that the parentnode is for an etree instance that satisfies etree queryE1, and the child is an instance that satisfies etreequery E2.
Furthermore, the address in the deriva-tion tree is the same as the address dta:1 that wasidentified during Step 1.
Note that the address is lo-cated on the parent tree during Step 1, but appears inthe derivation tree on the child node.Steps 1 and 2 identify etree instance #1 as satis-fiying etree query E1, with dta:1 stored as address<1.1.2> for the template used by instance #1.These steps also identifed etree instance #4 as sat-isfying etree query E2.
Step 3 now determines thatetree instances #1 and #4 are in a derivation tree re-lationship that satisfies dtree query D2, by checkingfor a parent-child relationship between them withthe address <1.1.2>.5 So dtree query D1 is findingall PP etrees headed by ?fiy?, and dtree query D2 isfinding all clauses with a subject after the verb, witha PP attaching next to the subject, where the PP isheaded by ?fiy?.We consider the distinguished anchor (see foot-note 4) for a dtree query to be the distinguished an-chor of the parent node.
The earlier work on com-paring two sets of trees (Kulick and Bies, 2009) canthen use this to report such searches as ?the annota-tors agree on the same verbal structure, but one hasa PP modification and the other does not?.4 Conclusion and Future WorkOur immediate concern for future work is to workclosely with the ATB team to ensure that the de-sired queries are possible and are integrated into the5It is also possible to specify the nature of that relationshipby the attachment type, substitution or modification.work on comparing two sets of trees.
We expect thatthis will involve further specification of how queriesselect etree templates (Step 1), in interesting waysthat can take advantage of the localized search space,such as searching for valency of verbs.We are also working on an evaluation of the speedof this system, in comparison to systems such as(Ghodke and Bird, 2008) and Corpus Search6.
Thesearch algorithm described above for derivation treesearches can be made more efficient by only lookingfor relevant etree instances in the context of walkingdown the derivation tree.
In general, while searchingfor etree instances is very efficient, even with lex-ical restrictions, complex searches over the deriva-tion tree will be less so.
However, our hope, and ex-pectation, is that the vast majority of real-life dtreequeries will be local (parent,child,sister) searches onthe derivation tree, since each node of the derivationtree already encodes small chunks of structure.AcknowledgementsWe thank Aravind Joshi, Anthony Kroch, MitchMarcus, and Mohamed Maamouri for useful discus-sions.
This work was supported in part by the De-fense Advanced Research Projects Agency, GALEProgram Grant No.
HR0011-06-1-0003 (both au-thors) and by the GALE program, DARPA/CMOContract No.
HR0011-06-C-0022 (first author).
Thecontent of this paper does not necessarily reflect theposition or the policy of the Government, and no of-ficial endorsement should be inferred.ReferencesDavid Chiang.
2003.
Statistical parsing with an automat-ically extracted tree adjoining gramar.
In Data Ori-ented Parsing.
CSLI.Michael Collins.
2003.
Head-driven statistical modelsfor natural language parsing.
Computational Linguis-tics, 29:589?637.Sumukh Ghodke and Steven Bird.
2008.
Querying lin-guistic annotations.
In Proceedings of the ThirteenthAustralasian Document Computing Symposium.A.K.
Joshi and Y. Schabes.
1997.
Tree-adjoining gram-mars.
In G. Rozenberg and A. Salomaa, editors,Handbook of Formal Languages, Volume 3.Seth Kulick and Ann Bies.
2009.
Treebank analysis andsearch using an extracted tree grammar.
In Proceed-ings of The Eigth International Workshiop on Tree-banks and Linguistic Theories.6http://corpussearch.sourceforge.net.664
