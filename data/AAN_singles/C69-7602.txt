ifMETAPRINT 3(ME TAMETAPRINT I)Responses to "COMPUTERIZED LINGUISTICS: KALF  A COMMENTARY"- Mart in  Minow -Rather  than  a t tempt  a summary  of  the  rep l ies  to"metapr in t "  1inc luded here ,  I fee l  i t  wou ld  be  more  use fu l  fo r  me to d i scuss  one  of  myprograms.PURPOSEThe  program generates  sentences  f rom a generat ive  (context -sens i t ive ,t rans format iona l )  g rammar .
It  i s  a lmost  ident ica l  in  funct ion  to  that  p re -sented  by  Joyce  F r iedman in  prepr in t  14.LANGI JAGEWhi le  I had  prev ious ly  wr i t ten  a context - f ree  generator  in  assemblylanguage,  these  programs were  wr i t ten  in  SNOBOL3,  wh ich  i s  in tendedspec i f i ca l ly  fo r  s t r ing  process ing .
There  were  both  advantages  and  d is -advantages  inherent  in  th i s  cho ice .
The  language prov ides  s imple ,  power -fu l  operat ions  fo r  pars ing  s t r ings  and  a l lows  easy  def inat ion  of  push-down s tacks  and  l i s t s .
In add i t ion ,  a pr imi t ive  was  ava i lab le  wh ich  re -cogn izes  s t r ings  ba lances  w i th  respect  to parentheses ,  Because  of  th i s ,I chose  to  represent  t rees  as  fu l l y  parenthes ized  s t r ings .
What  i s  moreimpor tant  than  th i s  i s  the  fac t  that  SNOBOL manages  a l l  s to rage  auto -mat ica l ly ,  Thus  the  program has  a lmost  no  pre -def ined  l im i ts ,The  major  d i sadvantage  of  my cho ice  was  that  I was  complete ly in -exper ienced  in  the  language and  unfami l ia r  w i th  the  recurs ive  techn iquespermi t ted .
Thus  the  program was  extraordinarily i ne f f i c ient ,THE PROGRAMBot the context-sensitive generator  and the transformations programwere  written in two separate stepts, one converting the rules f rom afo rm as similar to that used by the linguist as possible to a fo rm con-venient for storing on the machine.
In general, all rules containingabbreviatory devices (braces and parentheses) were  expanded to a numberof sub-rules.
These  were  then punched out and used as input to the gene-ra tor  i t se l f .
The  s i ze  of  the  programs i sCF  generator  (assembly)CS ru le  readerCS  generatorTransformat ions  "rule readerTrans format ions  executor2500 cards300  s ta tements~ 360~ 280- 600In add i t ion ,  each  program conta ined  .approx imate ly  one  comment  fo reach  4 s ta tements  s ince  th i s  was  the  on ly  way  I cou ld  unders tand  whatI rea l ly  in tended to  wr i te .
These  were  wr i t ten  as  the  program was  wr i t tenand  proved inva luab le .
I shou ld  note  that  I genera l ly  over -document  myprograms as  r tend  to  bor row a lgor i thms f rom them years  la ter .l zDEVELOPMENT T IMESThe  CS program took  about  s ix  weeks  to  get  runn ing  wh i le  the  t rans -fo r : '~at ions  program !ook  the  bet ter  par t  o f  four  months  be fore  i t  workedwe l l  enough that  I cou ld  a t tempt  to  t rans form a " rea l "  sentence .
Due  topersona l  reasons ,  I was  unab le  to  debug the  grammar /program we l lenough to  cons ider  d i s t r ibut ion .
The  cost  of  p rocess ing  a rea l  t reewas  a l so  proh ib i t ive  (20 minutes  a t  7094 t ime) .
I aga in  note  that  th i swas  caused  more  by  my inexper ience  w i th  SNOBOL than  by  any  fau l tsinherent  in  the  language.
The  work  cou ld  hard ly  be  done  so  qu ick ly  inassembly  language or  FORTRAN as  I f i r s t  wou ld  have  to  wr i te  a la rgeset  of  subrout ines  fo r  s t r ing  hand l ing ,  input -output ,  e tC .INFLUENCE OF THE LANGUAGEThe s t rongest  externa l  in f luences  on  the  program was  the  fac t  thatdata  must  be  punched on  cards .
Thus  a two d imens iona l  notat ion ,  asused  by  F romkin  and  R ice  (prepr in t  53)  fo r  example ,  seemed too  d i f f i -cu l t  to  program to  war rant  the  e f fo r t .
T rees  and  ru les  thus  must  bewr i t ten  in  a l inear  manner ,  us ing  parentheses  fo r  s t ructure  ident i f i ca t ion .
(Though the  programmer  may indent  i tems when punch ing .  )
Any  o therl im i ta t ions  were  pr imar i ly  caused  by  my inexper ience .
Note  espec ia l lythat  there  i s  no  l im i ta t ion  on  the  number  of  characters  in  a s t r ing .CONVERSIONUnt i l  I found out  about  F r iedmanls  program (prepr in t  14) I had  cons ideredrewr i t ing  the  t rans format ions  program in  SNOBOL4 - -  a s t r ing  process inglanguage s imi la r  to,  but  incompatab le  w i th ,  i t s  p redecessor .
I t  seems,however ,  that  on ly  the  a lgor i thm (preserved  in  the  commentary)  cou ld  bet rans fer red  as  SNOBOL4 s increased  capab i l i t ies  a l lowed a much moree f f i c ient  approach  to  t ree  pars ing .OPERATING SYSTEMSWhi le  i t  wou ld  be  very  n ice  to  be  ab le  to  generate  sentences  in  a t ime-shar ing  env i ronment ,  I fee l  that  the  Ianguages  cur rent ly  ava i lab le  andespec ia l ly  the  amount  of  work  that  must  go  in to  in ter fac ing  programs w i thoperat ing  sys tems prec lude  any  such  e f fo r t  a t  the  present  t ime.
Oneso lu t ion  i s  to  have  fu l l  cont ro l  over  a smal l  computer ,  however ,  th i smay excess ive ly  l im i t  the  s i ze  of  the  program.
Whi le  there  doesn ' tseem to be  any  c lear -cut  answer ,  I seem to  be  re luc tant ly  choos ingthe  power  and  n i t -p ick ing  of  the  la rge  operat ing  sys tem so  as  not  to  l im i tthe  programs.
I hope  somebody conv inces  me that  I am wrong.i3\]openhagen~ 28th August 1969.~JIt may bc too late for  you to include this  in your  summary,  butnow it 's wr i t te~ I send it anyhow.The f i rs t  step in the invest igat ion  repor ted  in my paper,  CA 3.3,is a u rogram for sort ing e. text into words and word de l imi ters ,  and~hus qua l i f ies  as a data process ing  program.
In my vie:v, th is  p ro -gram presents  the features  you are in terested in to ~ h igher  degreeth~n -the fo l lowing programs which  are <~atamatical ly much s impler ,invo lv ing  on ly  mcn ipu la t ions  of the numer ica l  codes for words  and?
~etermlned by the f i rst  progr~,m~ - L in~u ls t i ca l l y  of other symbols  a ?course the later  programs conta in  all the essent ia ls .Th,~.
,~ai:'~m-r~ ~va.~izble to me,,at Cooenhagen Un ivers i ty  is a GiZR(~;~_:ish make) wi th  a centra l  store of -4096 40-b i t  c,L!s ~n?
po~iphe--r<~l stere of ab.
300 00O c ~l!s.
P rogramming  is done in L lgo l  w i th,-::-~ensio:z~ wh ich  make the s ingle bits of each word eas i ly  nccess ib ie ,T.hc datam~_t has no opera.tot, but is ave i lab!o  to the personne l  ofse-,e::'ol " ~"-'" ~ ~ - Jn~i~u~c~ which undoubted ly  cont r ibutes  to more ~reoue-_ t"ethn ica l  breakdowns then comparable  operator -managed datamats  have.The text v.-~ oh J-mined on 6 -poc i t i cn  p.r.per %ape ,,'id~out pari'~:;chc3k, ~.nd it "ook some ingenu i ty  to convert  it to the usu.<i 8.?pos--i-~io:.\] ~:pe .
.~ l l  the same it is much che,~per to get the text ou theseT,z'intf.ng nrck ino oroduce,?
tapes than to cod ~.
them a:*ev;,The convc,~'ion w,~s m.~,\]e not to f!exov:ritcr code, but , .
.
, i th  le t%arscoded i n  ~ " "~ '~ .\]p::.. ..... I~ order ,'a=1, b=2 etc ) o.nd other  symbols w i th  vn l -res fco~ ~..~ un:7:-.r<i3.. '.
word ~.
.
.
.
.
.
{'efined ns a ~qu~o ~ ....... of let ters  at:nest inte::'rup~ed ~',., n .
.
.
.
.
.
.
lower c~e sy~2bc!
a f ter  the f irst;  and each" cO to ,m --~ : fou :~?
::n. the t _~: : t  is f i rst  store,4 in .
'.u ~r~.v (zz l e~: ;Lbbe on the saic ...... ).
Who:l a non- le t te r  symbol  is found the word  isthen conver-'e ,~ to storage for~:~.
: 5 let ters  arc plnc,,q in the f i rst  25bitu of " c ~- i i t:.
: n,::.
:t t',;o b" ~s i:'/5.oatr~ whether  ~.h.. word hzs nomore th,<~z 5 -c ca~.
'rs, '.znd if not ..... th.,_ ~,~lS is the f i rst  part  of theword or ,'-~, i,q'tqr~ I/!
bits are left empty if it is the f i rst  pc~r% ofthe word~ el2o t':.o : ~:~-~' i.
":t+ei:: ' -r-~ c%c:red~ :~nd one bit ind icateswhe~her  i t  i s  "~'~,.~,.
en!
~.~-14~o,,,.
',.-oi'(i ~.._ not , .I.,'o:.v co:,,es \[:\]te ,:'J.otior..~,t./ l,,'~ok--uD- :,:!ith o, word stored l ike descr ib -ed the alp}!nbetio orderin,q co inc ides w i th  ~z numer ica l  o rder ing  whe'ncel ls  -ire in terpreted as integers  (%he \[,it wh ich  in inte{~ei ~ mode ind-icates s ign is ~l,'.,e.ys ie?t empty~ i,e.
as +)~ The d ic t ionary  is s tor -ed in an ar ray  of l o rs th  3?90 to c\].\]on, room :for other var iab les  in-o!uding the word mrm'ay o~ loncth 60 men-~i-.r.ad abo'?o~ it is numbered201 A000 ~ - r~zser.s " .
Each  ~e,: r word found is - _.o.
exp\].a-\[ne a in l-~:e p,1.1ur -.
.s-bored under  t'_,e fiz-sb vacen, t "ltt:qbe??
; ".11d :?<;er,'?
occurrence of it isind icated by this number  in the output.%'he alph~.bctJo or /c r ime ::_s ta\]:en care of by l ist  pl'ooessing" thevacant  12 bibs in the f i rst  part  of a word :is usc?
to store the num-ber ,of the next war(!
in z lphnbat ic  order.
To avo id  hav ing  l;o ,Zothrouc-h-~he ,Thole d ic t ionary  an index is kept  of initif~!s ind icmt ingthe nuzTbcr of the f i rst  word with each in i t ia l .
(Some reduct ion  ofsearch t ime ceulc~ undoubted ly  be obta ined if ~he in i t io l s  were sub-d iv ided by the value of the next let ter~)The ou%~a% of -6he program cons is ts  of the d ic t ionary ,  number  andlet ter  sequence for ca.oh %~ord~ ordered e i ther  by numbers  or a lpha-bet ice l !y ,  and the processed  text sZr ing,  words  g iven by the i r  num-ber above 200, other  symbols  by their  number  be low I00, depending, onthe ~aiue of ~'~ l;'qt case symbo?
,, space w}-ich only separates  twowords is suppressed~ other poss ib i l i t i es  of reduct ion  do not v resen%near ly  the same reduct ion  of space requ i rement .
)-2  - 14?
In this way, the central store will hold a dictionary of ab.2500-3000 words (words up to 5 letters take one cell, with 6-12 let-ters they take 2 oells, 13-19 3 cells etc.)
which in a unitary textwill hold all but the very infrequent words.The program builds heavily on the type of datamat used, only themost general principles will be transferable.
Some slight alterat-ions have benn necesse~ry to enable the program to be run on anotherdatamat of the same make which is operator-run (but still totallywithout time?sharing or similar devices).
I cannot to any degree ofaccurmcy assess the initial time used for programming, ~ ich  wasnot excessive, or that for debugging, which was considerable.
Bothparts of the work ~rere done over a long period in b~tween other work.Gust~v LeunbachAnswers to  quest ionnaire ~5Type of Project: Model l ing of L inguist ic SystemLanguage: Assembly language, IBM 360/65 I, 5DOK (h.s.
)The computer used works in a time snaring setup, in which we are one of ~ number of users;No comversat ional  methods are used.Ch~}ice of Language: Owing to the fact that 50~ of t~e central corestorage is permanent ly occupied by the time shar-ing system, the space avai lable to our programis only 20~ to 251 K; this is barely suff icient;hence, in order to compress the job as much aspossible, the entire appl icat ion was programmedin assembly language.
The formulat ion of the pro-blem and the program, therefore are in many waysinf luenced or, rather, determined by the charact-er ist ics of the part icular  machine.Development time: The flow charting, def ining of algoritJ~ms, andl inguist ic research had all been done previously,in three years work, for another machine {GE 425};the time required to remodel the entire appl ica-tion for use on the IBM 360 was approx imate ly  3months.
- The l inguist ic approach and the algo-rithmic formulat ions it requires and makes pos-sible are highly unorthodox and, therefore, notat all suitable for formulat ion in an exist inghigh- level  language.The system works without vocabulary lobk-up; thesentences to be analysed are input on punchedcards; such storage of words as occursdur ing  theanalysis procedure, is achieved by numeric code.There are no character  manipulat ion subroutines;input and output def in i t ion is in IOCS.
No extern-al storage is used.The program is thoroughly defined by the sequenceof operat ions determined by the l inguist ic pro-cedure.5inca the appl icat ion is exclusively experimental ,there is continual  exchange end modi f icat ion ofboth program and algorithms; end the program waswritten, from the outset, with this in mind, i.e.a l lowing for easy alterat ion in many areas.Notes comprehensib le  only to the programmer whodevised the program.165izo of Program: 3200 ins t ruct ions ,  no commentary.The modQl 360 we are using disposes of approxi-mately iBO machine instruct ions;  the Mult istoreprogra~ employs no more than 30 of these (ofwhich about 6 or 8 could be reduced to others,so tha~ the total of used instruct ions could bebrought down to approximately  22, or 12~ of theinstruct ions avai lable in the machine).This is a typical symptom of the s ituat ion ofl inguist ic,  art i f ic ia l  intel l igence,  art i f ic ia lperception, etc., programming in general: themachines actual ly avai lable are far too compl i -cated, i.e.
they can do innumerable things whichare not needed in that kind of program; on theother hand, machines special ly designed for thesetasks would have to have larger central cores.No doubt processing times could be greatly short-ened on special purpose machines.Time sharing: Yes.
If we had a console in our office, it cer-tainly would save time.Job Control:  5ince the computer  has to be used by other peopleand for other tasks as well, one has to acceptjob control;  if we had a computer exclus ively forthis part icu lar  use of ours, we should do awaywith job control.Change of Machine: Since the program was to some extent determinedby the part icular  machine (capacity, byte confi-guration, etc.)
we are using, it is not transfer-able to another type.
Being purely experimental ,this was no.._~t an objective.Language: Yes.
The requirements being so very specif ic (seeabove) programming in a machine or iented languageis essential .Teaching: No.Linguist  Programmers:  No.
The analyt ical  work to be done to under-stand the workings of natural language is sti l lso enormous that they should not scatter theirattent ion and efforts; they should, however, havefair ly clear ideas about what can and what cannotbe implemented on a computer and, above all, howminutely all formulat ions of l inguist ic  rules haveto be defined, if they are to work sat is factor i lyon a computer.L4,17Lloyd Rice1929 12th Street - Apt.
ASanta Monica, California 90404August 26, 1969(preprint number  53)In reply to some of your ideas expressed in "Metaprlnt", I-,- semdlng a brief history of the phonological testing program(see preprlnt #53).
The program has been through severaltranslations and parts of it have actually run on two machineswh?1e other  par ts  have not yet  been coded.?
he project began about a year ago, when a fairly simple program~ms written in Super Basic on the Tymshare, Inc. timesharingsystem.
That program accepted a single test form, placing it ina binary matrix of feature values.
Rules were written directlyin Super Basic coding, performing the desired operations on thebit matrix.
Later in the school year we decided to try to setup a similar system on the IBM 360/91 on campus and the SuperBasle program ~s  rewritten in PL/I.
This program was stillsimply a rule executor and the rules had to be coded in PL/I.IM\[ffi~'ultles with the IBM system led to the abandonment of thisproject.
There were two main causes here which lead into thecurrent system called PHONOR.
First, I was completely turnedoff by the IBM system performance (91 means 91% down time).
Themore important reason, however, is that I wanted more flexibilityin the scope display than the primitive batch job system allowed,Durlmg the t~ume the proErem was being rewritten in PL/I, I wasthinklnE more and more about a better system of rule specificationaQd input than coding in a standard computer language, not verysuitable for a linguistic researcher to use the system.
Someearly th~aklng about the string matching process and a graduallyImprov?ng knowledge of Chomsky and Halle's SPE led to a rulecumpiler a~orltb~ which accepted a string of text stating therule us~ a notation quite similar to the SPE format and producedas output a llst of matching proCess operations.
I soon realizedthat these matehlng operations could be coded and stored fairlycompactly as they were produced by the compiler and then read by aseparate rule interpreter sys t~ which contained the test matrixMartin Minow 2 26 August 1969f8and performed the matching operations in the order in which thecompiler had stored them.
This led to the present system writtenfor the LINC-8 in our lab.Input to the compiler will be either from the teletype cr from aspecified file on disk or mag tape.
The input rules may bedisplayed on the scope in a two-dimensional format very close tothe SP__EE formalism.
This input may he edited, compiled or savedin a file.
When the interpreter is loaded (by a single c~mmandto the compiler system) the most recently compiled set of rulesis loaded.
Operation of the interpreter is under complete inter-active control of the linguistic researcher at the console, whomay enter test forms, specify which rules to apply and set crreset flags for various printout options as the interpreter runs.The compiler may also be recalled at any time.I have not added substantially to the basic compiler algorithmsince writing the conference paper.
I have worked out a subroutinegeneration system to take care of the case mentioned in the lastparagraph.
Actually most of the coding in the compiler is (willbe) concerned with more mundane housekeeping tasks such as inputtext manipulation and settln E up storage for the coded output.As the program nears completion, I will definitely have clearerdocumentation of its structure and capabilities.
I tend to avoidthis as most progra~ners do unless I can get it done while I'm inthe mood of blowing my horn (as now).
Then it flows out pretty well.I hope to remain responsive to suggestions as the program is usedand desire to make it available as widely as possible.Sincerely yaurs,D~ :kscFHONC< 19The Ln%eracttve Phor, ole~ic /ul ste~The heart of t~s  system is a rule expr~ ~Jon lar,~guage consisting of operationsto be perforaed on the strir 4 of phonologlca?
nits stored in the test matrix.These operations are described in the paper using the PL/I language and comprisepush-down stack operations, unit match instructions, matrix modification instr-uctions and various for=~ of branch instructions.
The system actually consists oftwo parts ; I) A uompilor, which reads the rules as they are entered and translatesthem to the rule expression language, and II) An interpreter, which contains thetest matrix, accepts a t%st string from the console ar~ interprets the rule expressionlanguage, modifying the test matrix as indicated by the rule coding.PHONOR is now being written for the Digital Equipment Corp. LINC-8 with twollnctape units and 8K of core memory.
The interpreter is written in PDP-8 machinelanguage and is now completed.
The compiler is bein~ written in LINC IAP-6 assemb~language and will be running sometime in October, 1969.
One memory field (@K) isdedicated to storage of the rule expression coding when the interpreter is running.I expect to get 30 to 40 average sized rules in the memory field.
Additional fieldsof r~les may be stored on Linctape and read in under program control.
The presentsystem has an upper limit of 128 rules.One item described in the paper which the present system will not.
supportis the notation" "X", meaning any string o f  units not containlng the boundary symbol"#".
This would require a more complex matching algorithm than I have yet workedout.
If it appears that such a notational device is useful it will be consideredas a future extension.
I hope to be able to include in the near future the capa-bility of handling indexed disjunctions (angle brackets in Chomsky and Halle, SPE).This brings up a number of questinns relating to disjunctively ordered rules (as inSP~E) and the exact sequence of matchir~g units within a rule.
PHONCR treatsdisjunctions somewhat differently than the system of SP__~ in that computationalefficiency is g~ven priority over descriptive efficiency.
I think it is a short-coming of the current ideas on descriptive simplicity in a gray,nat that dynamiccomputational simplicity is not taken into account.
It is my hope that future useof the PHONO~ system will help in setting up new models for overall operation~lsimplicity in the phonological component.For more information on this system, write toD.
Lloyd RicePhoneti~ Lab, Humanities Bldg.
1110UCIALos Angeles.
Ca.
90024\ [nON HALLD~pART~RNT OF CO~dPUTER SCIENCECORNELL  UNIVERSITYITHACA, N.Y.  14850Telephone (607)25~4117August 18, 196920(p repr in t  number  4)I refer to your metaprint entitled "Computerized Linguistics".For your information I should like to answer the questions which youraise in so far as they apply to the SMART document retrieval system:i.
The SMART system is infox~nation retrieval oriented.2.
The system is programmed fop a batch processing computer(IBM 360 model 65) largely in Fortran IV, with some ofinner routines and executive programs in assembly language.3.
The choice of language was determined by the programmingsystems available with our computer and the preferencesof the programmers.4.
The planning, flowchartlng, and programming took approxi-mately thmee years from 1961 to 196~, and a total ofapproximately i0 man years.5.
The total number of programming steps ?assembly languageinstructions) is approximately 150,000.6.
The proETam is not easily transferTable onto anothermachine.7.
For many years I have been teaching a graduate courseentitled "Automatic Information Organization and Retrie-val" in which linguistic analysis pr6cedumes are used.I should he glad to participate in the panel session if it isheld within the first couple of days of the Conference (since I mustleave early).
I shall be glad to amplify on the comments given above.Sincerely,t ~  t ?~k Gerard SaltonProf~essorComputer ScienceGS:zl)G. Veillon ZiI -  PROJECT Mechanical translationThe program is used both for actual processing and for testinglinguistic models.A complete program is running on an IBM 7044 computer(3ZK memory)  and a new version is being written for theIBM 360-67.I I -  LANGUAGEProgramming for the 7044 were written in IV~AP(macro assembly language).
The program consists ofeight steps, along with a supervisor embedded in theIBSYS (IBJOB) system which interfaces the differentprograms with each other and with input-output devices.This is, of course, a batch-processing system.In the new program, the most  important algorithms,which have to be very efficient, will be written inassembler language.
Auxiliary programs will bewritten in PLt.
This p rogram must  run both underconversational mode (using Cp-Cms system) andbatch-processing mode.
Conversational mode willbe used for debugging and for testing linguistic models,while batch-processing will only be used for production.The language choice never influences the problem defination.III- STRUCTURE of the programThe program is composed of eight different steps, eachroughly corresponding to a particular linguistic model.These  are :- !
- p re -ed i t ingZ - d ic t ionary  look -up3 - morphological analysis4 - syntactical analysis5 - tree transformations (intermediate language)6 - syntactical generation7 - morpho log ica l  generat ion8 -  pos t -ed i t ing22Each  step requ i res :!
- the program i tse l f2 - the input text (_which is the output ofthe prev ious  step)3 - l inguist ic  parameters :  g rammar  and lex icography4 -  the output text.The las t  th ree  are  encoded to preserve  program ef f ic iency.Grammars ,  for  example ,  may be pre -compi led  by aspec ia l  subrout ine .It is  a l so  necessary  to prov ide aux i l i a ry  programs;  givinginput, output, and if necessary ,  in termed iary  resu l t s  ahuman-  readab le  fo rm.Thus,  we need to wr i te  two d i f ferent  types of p rograms,tl~e processor  - -  which must  be very  ef f ic ient  and i s iusua l lyquite shor t  - -  IS wr i t ten  in assembler  language.
Theaux i l i a ry  programs - -  which need not be par t i cutar i l yeff ic ient,  but must  be eas i ly  modi f iab le  - -  a re  wr i t tenin a prob lem-or iented  language,  PL I .
The ta t terrepresent  60% of the programming work  ( includingcompi le rs ,  text fi le updating, d ic t ionar ies ,  e tc .
)IV - T IME REQUIREDTh is  depends on the nature  of the step.
In the case  ofsyntact i ca l  ana lys i s ,  p robab ly  the most  impor tant ,the fo l lowing rough ly  ho lds:s ta tement  of p rog lem:  about two or th ree  yearsdef ining data s t ruc tures  and sys tem programming:s ix  monthsprogramming and debugging the a lgor i thm:  one yearprogramming and debugging aux i l i a ry  programs:one yearcomputer  t ime for  p rogram debugging:ten hours  (7044)The complete  7044 program,  including al l  e ight s teps ,conta ins  about 65 000 mach ine  ins t ruct ions ,  20 000 forthe program,  45 000 for  aux i t ia ry  rout ines .23V - PROGRAM CONVERSIONAf ter  the 7044 progra~ s "~ e debugged,  we beganchang ing  to the 360-67 .
%%e are  t ry ing  to conver ta l l  a lgor i thms d i rec t ly .
The rnoe,~ impor tant  changes  arere la t ive  to data  managment .
We had many prob lemsw i th  tape dev ices  for  the f i l es  and fee l  that  the d i rec t -accesscapab i l i t i es  of the newer  mach ine  w i l l  p rove  very  use fu l .In wr i t ing  the f i r s t  p rogram,  we were  very  caut ious  aboutp rogram e f f i c iency .
Whi le  th is  is ,  of course ,  impor tant ,i t  d id  become very  t ime consuming  for  the l ingu is t i c  debugg ing(of g rammars)  and d ic t ionary  updat ing .
Th is  was  par t lydue to batch-process ing .
With the new computer ,  we sha l la lways  use  conversat iona l  node for  debugg ing .
The programthus  must  be executab le  in  both conversat iona l  and batch  modes .The most  impor tant  p rob lem is  to make  the f i l es  comparab leunder  both sys tems.PL !
seems to g ive  us a l l  the power  we need,  but we in tendto l im i t  i ss  use  to  aux i l i a ry  programs.I th ink  i t  i s  impor tant  to speak  a l i t t le  about  a r t i f i c ia ll anguages  for  l ingu is t i cs .
We were  ob l iged  to def inespec ia l  l anguages  for  th i s  purpose .In some cases ,  we wrote  a compi le r ;  wh i le  in o thers ,such  as  t ree  t rans format ion ,  we used  a soph is t i ca tedmacro  processor .
Macro  assembly  i s  very  a t t rac t ive  - -the operat ions  be ing  easy  to def ine,  descr ibe ,  and mod i fy .In our  case ,  language def in ing  and macro  .wr i t ing  tookon ly  th ree  months .
Unfor tunate ly ,  macro  assembly  i svery  s low and, in  the case  of the 360, not  su f f i c ient lypower fu l .
We were  thus  ob l iged  to wr i te  our  own compi le r ,ins tead  of us ing  the IBM so f tware  d i rec t ly .
