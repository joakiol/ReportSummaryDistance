A LOGICAL SEMANTICS FOR FEATURE STRUCTURESRobert T. Kasper and William C. RoundsElectrical Engineering and Computer Science DepartmentUniversity of MichiganAnn Arbor, Michigan 48109Abst rac tUnification-based grammar formalisms use struc-tures containing sets of features to describe lin-guistic objects.
Although computational algo-rithms for unification of feature structures havebeen worked out in experimental research, thesealgcwithms become quite complicated, and a moreprecise description of feature structures is desir-able.
We have developed a model in which de-scriptions of feature structures can be regardedas logical formulas, and interpreted by sets of di-rected graphs which satisfy them.
These graphsare, in fact, transition graphs for a special typeof deterministic finite automaton.This semantics for feature structures extendsthe ideas of Pereira and Shieber \[11\], by providingan interpretation for values which are specifiedby disjunctions and path values embedded withindisjunctions.
Our interpretati6n differs from thatof Pereira and Shieber by using a logical modelin place of a denotational semantics.
This logicalmodel yields a calculus of equivalences, which canbe used to simplify formulas.Unification is attractive, because of its gener-ality, but it is often computations/\]), inefficient.Our mode\] allows a careful examination of thecomputational complexity of unification.
Wehave shown that the consistency problem for for-mulas with disjunctive values is NP-complete.
Todeal with this complexity, we describe how dis-junctive values can be specified in a way whichdelays expansion to disjunctive normal form.1 Background:Un i f i ca t ion  in GrammarSeveral different approaches to natural lan-guage grammar have developed the notion offeature structures to describe linguistic objects.These approaches include linguistic theories, suchas Generalized Phrase Structure Grammar (GPSG) \[2\],Lexical Functional Grammar (LFG) \[4\], and Sys-temic Grammar \[3\].
They also include grammarformalisms which have been developed as com-putational tools, such as Functional UnificationGrammar (FUG) \[7\], and PATR-II \[14\].
In thesecomputational formalisms, unificat/on is the pri-mary operation for matching and combining fea-ture structures.Feature structures are called by several differ-ent names, including f-structures in LFG, andfunctional descriptiona in FUG.
Although theydiffer in details, each approach uses structurescontaining sets of attributes.
Each attribute iscomposed of a label/value pair.
A value may bean atomic symbol, hut it may also be a nestedfeature structure.The intuitive interpretation of feature struc-tures may be clear to linguists who use them,even in the absence of a precise definition.
Of-ten, a precise definition of a useful notation be-comes possible only after it has been applied tothe description of a variety of phenomena.
Then,greater precision may become necessary for clari-fication when the notation is used by many differ-ent investigators.
Our model has been developedin the context of providing a precise interpreta-tion for the feature structures which are used inFUG and PATR-II.
Some elements of this logi-cal interpretation have been partially describedin Kay's work \[8\].
Our contribution is to givea more complete algebraic account of the logi-cal properties of feature structures, which can beused explicitly for computational manipulationand mathematical nalysis.
Proofs of the math-ematical soundness and completeness of this log-ical treatment, along with its relation to similarlogics, can be found in \[12\].2 D is junct ion  andNon-Loca l  Va luesKarttunen \[5\] has shown that disjunction andnegation are desirable extensions to PATR-IIwhich are motivated by a wide range of linguistic257die : ,,?reement : number : 8ia?aumber : pl \]Figure 1: A Feature Structure containing ValueDisjunction.phenomena.
He discusses specifying attributes bydisjunctive values, as shown in Figure 1.
A ~aluedisjuactioa specifies alternative values of a singleattribute.
These alternative values may be eitheratomic or complex.
Disjunction of a more gen-eral kind is an essential element of FUG.
Geaera/disjunction is used to specify alternative groupsof multiple attributes, as shown in Figure 2.Karttunen describes a method by which the ba-sic unification procedure can be extended to han-dle negative and disjunctive values, and explainssome of the complications that result from intro-ducing value disjunction.
When two values, Aand B, are to be unified, and A is a disjunction,we cannot actually unify B with both alternativesof A, because one of the alternatives may becomeincompatible with B through later unifications.Instead we need to remember .a constraint hatat least one of the alternatives of A must remaincompatible with B.An additional complication arises when one ofthe alternatives of a disjunction contains a valuewhich is specified by a non-local path, a situa-tion which occurs frequently in Functional Unifi-cation Grammar.
In Figure 2 the obj attribute inthe description of the adjunct attribute is giventhe value < actor >, which means that the objattribute is to be unified with the value foundat the end of the path labeled by < actor > inthe outermost enclosing structure.
This unifica-tion with a non-local value can be performed onlywhen the alternative which Contains it is the onlyalternative remaining in the disjunction.
Oth-erwise, the case = objective attribute might beadded to the value of < actor > prematurely,when the alternative containing adjunct is notused.
Thus, the constraints on alternatives of adisjunction must also apply to any non-local val-ues contained within those alternatives.
Thesecomplications, and the resulting proliferation ofconstraints, provide a practical motivation for thelogical treatment given in this paper.
We suggesta solution to the problem of representing non-local path values in Section 5.4.3 Log ica l  Formulas  forFeature  S t ructuresThe feature structure of Figure 1 can also berepresented by a type of logical formula:die = case : (hOrn V acc)A a~'eement : ((gender : fern A number : sing)V number : pl)This type of formula differs from standard propo-sitional ogic in that a theoretically unlimited setof atomic values is used in place of boolean val-ues.
The labels of attributes bear a superficialresemblance to modal operators.
Note that noinformation is added or subtracted by rewritingthe feature matrix of Figure 1 as a logical formula.These two forms may be regarded as notationalvariants for expressing the same facts.
While fea-ture matrices eem to be a more appealing andnatural notation for displaying linguistic descrip-tions, logical formulas provide a precise interpre-tation which can be useful for computational ndmathematical purposes.Given this intuitive introduction we proceed toa more complete definition of this logic.4 A Log ica l  Semant icsAs Pereira and Shieber \[11\] have pointed out, agrammatical formalism can be regarded in a waysimilar to other representation languages.
Oftenit is useful to use a representation language whichis disctinct from the objects it represents.
Thus,it can be useful to make a distinction between thedomain of feature structures and the domain oftheir descriptions.
As we shall see, this distinc-tion allows a variety of notational devices to beused in descriptions, and interpreted in a consis-tent way with a uniform kind of structure.4.1 Domain of FeatureStructuresThe PATR-II system uses directed acyclicgraphs (dags) as an underlying representation forfeature structures.
In order to build complexfeature structures, two primitive domains are re-quired:258cat  ~ Ssubj = \[ case = nominat ive \]actor =< sub.7' >voice = passivegoal =< subj >cat = ppadjunct = prep = byobj =< actor >= \[ case = objective \]mood = declarative \]mood interrogative \] fFigure 2: Disjunctive specification containing non-local values, using the notation of FUG.1.
atoms (A)2. labels (L)The elements of both domains are symbols, usu-ally denoted by character strings.
Attribute I~belt (e.g., acase~) are used to mark edges in adag, and atoms (e.g., "gen z) are used as prim-itive values at vertices which have no outgoingedges.A dag may also be regarded as a transitiongraph for a partially specified deterministic fi-nite automaton (DFA).
This automaton recog-nises strings of labels, and has final states whichare atoms, as well as final states which encode noinformation.
An automaton is formally describedby a tuple.~ = (Q,L,  5,qo, F)where L is the set of labels above, 6 is a partialfunction from Q ?
L to Q, and where certain el-ements of F may be atoms from the set A. Werequire that ~ be connected, acyclic, and have notransitions from any final states.DFAs  have several desirable properties as a do-main for feature structures:1. the value of any defined path can be denotedby a state of the automaton;2. finding the value of a path is interpreted byrunning the automaton on the path string;3. the automaton captures the crucial proper-ties of shared structure:(a) two paths which axe unified have thesame state as a value,(b) unification is equivalent to a state-merge operation;4. the techniques of automata theory becomeavailable for use with feature structures.A consequence of item 3 above is that the dis- ,"tinction between type identity and token identityit clearly revealed by an automaton; two objectsare necessarily the same token, if and only if theyare represented by the same state.One construct of automata theory, the Neroderelation, is useful to describe quivalent paths.
If#q is an automaton, we let P(A) be the set of allpaths of ~4, namely the set {z E L* : 5(q0, z)is defined }.
The Nerode relation N(A)  is theequivalence relation defined on paths of P(~) byletting4 .2  Domain  o f  Descr ip t ions :Log ica l  FormulasWe now define the domain FML of logical for-mulas which describe feature structures.
Figure 3defines the syntax of well formed formulas.
In thefollowing sections ymbols from the Greek alpha-bet axe used to stand for arbitrary formulas inFML.
The formulas NIL  and TOP axe intendedto convey gno information z and ~inconsistent in-formation s respectively.
Thus, NIL  correspondsto a unification variable, and TOP correspondsto unification failure.
A formula l : ~b would indi-cate that a value has attribute l, which is itself avalue satisfying the condition ~b.259NILTOPaEA~< 191 >, .
.
.
,  < 19, >\] where each 19~ E L*l :~bwhere lELand~bEFML?v?Figure 3: The domain, FML, of logical formulas.Conjunction and disjunction will have their or-dinary logical meaning as operators in formulas.An interesting result is that conjunction can beused to describe unification.
Unifying two struc-tures requires finding a structure which has allfeatures of both structures; the conjunction oftwo formulas describes the structures which sat-isfy all conditions of both formulas.One difference between feature structures andtheir descriptions hould be noted.
In a featurestructure it is required that a particular attributehave a unique value, while in descriptions it ispouible to specify, using conjunction, several val-ues for the same attribute, as in the formulas bj : (19e.so.
: 3) ^ s bj: :A feature structure satisfying such a descriptionwill contain a unique value for the attribute,which can be found by unifying all of the valuesthat are specified in the description.Formulas may also contain sets of paths, de-noting equivalence classes.
Each element of theset represents an existing path starting from theinitial state of an automaton, and all paths in theset are required to have a common endpoint.
IfE = I< z >, < y >~, we will sometimes write Eas < z >=< y >.
This is the notation of PATR-II for pairs of equivalent paths.
In subsequentsections we use E (sometimes with subscripts) tostand for a set of paths that belong to the sameequivalence class.4.3 Interpretat ion of FormulasWe can now state inductively the exact con-ditions under which an automaton Jl satisfies aformula:1.
A ~ N IL  always;2.
11 ~ TOP never;3.
/l ~ a ?=~ /I is the one-state automaton awith no transitions;4.
A ~ E ?=~ E is a subset of an equivalenceclass of N(~);5.
A ~ l : cb ?=~ A/ l  is definedand A/ I  ~ ~;where ~/ I  is defined by a subgraph of the au-tomaton A with start state 5(qo, l), that isira = (Q,L, 6, qo, F),then .~/l = (Q', L, 6, 6(qo, l), f ' ) ;where Qi and F '  are formed from Q and F byremoving any states which are unreachable from6(q0, 0.Any formula can be regarded as a specificationfor the set of automata which satisfy it.
In thecase of conjunctive formulas (containing no oc-curences of disjunction) the set of automata satis-fying the formula has a unique minimal element,with respect to subsumption.
* For disjunctiveformulas there may be several minimal elements,but always a finite number.4.4 Ca lcu lus  o f  FormulasIt is possible to write many formulas whichhave an identical interpretation.
For example, theformulas given in the equation below are satisfiedby the same set of automata.case : (gen V ace V dat) A case : ace = case : aceIn this simple example it is clear that the rightside of the formula is equivalent o the left side,and that it is simpler.
In more complex examplesit is not always obvious when two formulas areequivalent.
Thus, we are led to state the laws ofequivalence shown in Figure 4.
Note that equiv-alence (26) is added only to make descriptions ofcyclic structures unsatisfiable.1A subsumption order can be defined for the domain ofautomata, just as it is defined for dags by Shieber \[15\].A formal definition of subsurnption for this domain ap-pears in \[12\].260Failure:l : TOP  = TOPConjunction (unification}:?
A TOP = TOPCANIL  = ~baAb = TOP,  Va, b6Aanda#baA l :?
= TOP/:?AZ:,#, = t:(?A?)Disjunction:?
v NIL  = NIL?vTOP =z :?v~:?
= t : (?v?)Commutative:?A?
= ?^??v?
= ?v?Associative:(?^?
)^x = ?^(?^x)(?v?
)vx  = ?
,v (?vx)Idempotent:?A~ = ~b4v4 = @Distributive:(~v?
)^x = (~^x) v(?^x)(~,A?
)Vx  = (~VX)^(?VX)Absorption:(?A?
)V~ = ~,(?v?)A?
= 4,Path Equivalence:E1 AE2E, ^ E2EAz :cEl :E{,)E----- E2 whenever E1 _C E2= E1 ^  (E2 u{zy  I ~ e El})for any y such that 3z : z ~ El  and zy E E2-- EA(A  y :c )  wherexeEglEE= E A {z} if" z is a prefix of a string in E= NIL= TOP for any E such that there are stringsz, zy  E E and y # e(1)(2)(3)(4)(s}(6}(7)is)(9)(1o)(11)(n)(13)(14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(2s)(26)Figure 4: Laws of Equivalence for Formulas.2615 Complex i ty  of  D is junct iveDescr ip t ionsTo date, the primary benefit of using logicalformulas to describe feature structures has beenthe clarification of several problems that arisewith disjunctive descriptions.5 .1  NP-completeness  o f  cons is tencyproblem fo r  fo rmulasOne consequence of describing feature struc-tures by logical formulas is that it is now rel-atively easy to analyse the computational com-plexity of various problems involving featurestructures.
It turns out that the satisfiabilityproblem for CNF formulas of propositional logiccan be reduced to the consistency (or satisfia-bility) problem for formulas in FML.
Thus, theconsistency problem for formulas in FML is NP-complete.
It follows that any unification algo-rithm for FML formulas will have non-polynomialworst-case complexity (provided P ~ NP!
), sincea correct unification algorithm must check forconsistency.Note that disjunction is the source of this com-plexity.
If disjunction is eliminated from the do-main of formulas, then the consistency problem isin P. Thus systems, such as the original PATR-II,which do not use disjunction in their descriptionsof feature structures, do not have to contend withthis source of NP-completeness.5 .2  D is junct ive  Normal  FormA formula is in disjt, neti,~s normal form (DNF)if and only if it has the form ~1 V .. .
v ~bn, whereeach ~i is either1.
sEA2.
~bx A .
.
.
A ~bm, where each ~bl is either(a) lx : .
.
.
: lk : a, where a E A, and nopath occurs more than once(b) \[< pl > , .
.
.
,<  p~ >\], where each p~ EL*, and each set denotes an equivalenceclass of paths, and all such sets disjoint.The formal equivalences given in Figure 4 al-low us to transform any satisfiable formula intoits disjunctive normal form, or to TOP if it isnot satisfiable.
The algorithm for finding a nor-mal form requires exponential time, where theexponent depends on the number of disjunctionsin the formula (in the worst case).5.3 Avoiding expansion to DNFMost of the systems which are currently usedto implement unification-based grammars dependon an expansion to disjunctive normal form inorder to compute with disjunctive descriptions.
2Such systems are exemplified by Definite ClauseGrammar \[10\], which eliminates disjunctive termsby multiplying rules which contain them into al-ternative clauses.
Kay's parsing procedure forFunctional Unification Grammar \[8\] also requiresexpanding functional descriptions to DNF beforethey are used by the parser.
This expansion maynot create much of a problem for grammars con-tainlng a small number of disjunctions, but if thegrammar contains 100 disjunctions, the expan-sion is clearly not feasible, due to the exponentialsise of the DNF.Ait-Kaci \[1\] has pointed out that the expan-sion to DNF is not always necessary, in work withtype structures which are very similar to the fea-ture structures that we have described here.
Al-though the NP-completeness result cited aboveindicates that any unification algorithm for dis-junctive formulas will have exponential complex-ity in the worst case, it is possible to develop algo-rithms which have an average complexity that isless prohibitive.
Since the exponent of the com-plexity function depends on the number of dis-junctions in a formula, one obvious way to im-prove the unification algorithm is to reduce thenumber of disjunctions in the formula be/ors ez-pan.sion to DNF.
Fortunately the unification oftwo descriptions frequently results in a reductionof the number of alternatives that remain consis-tent.
Although the fully expanded formula maybe required as a final result, it is expedient to de-lay the expansion whenever possible, until afterany desired unifications are performed.The algebraic laws given in Figure 4 providea sound basis for simplifying formulas contain-ing disjunctive values without expanding to DNF.Our calculus differs from the calculus of Ait-Kaci by providing a uniform set of equivalencesfor formulas, including those that contain dis-junction.
These equivalences make it possible to ~2One exception is Kar t tunen 's  implementation, whichwas described in Section 2, but  it handles only valuedisjunctions, and does not handle non-local path  valuesembedded within disjunctions.262eliminate inconsistent terms before expanding toDNF.
Each term thus eliminated may reduce, byas much as half, the sise of the expanded formula.5.4  Representing Non-local PathsThe logic contains no direct representation fornon-local paths of the type described in Sec-tion 2.
The reason is that these cannot be in-terpreted without reference to the global con-text of the formula in which they occur.
Recallthat in Functional Unification Grammar a non-local path denotes the value found by extractingeach of the attributes labeled by the path in suc-cessively embedded feature structures, beginningwith the entire structure currently under consid-eration.
Stated formally, the desired interprets-tion of I :< p > isA~l :<p> in the context o f~3B ~ and 3wEL*  :E/ to  = A and 5(qo, ,  l) = 5(qo, ,p).This interpretation does not allow a direct com-parison of the non-local path value with othervalues in the formula.
It remains an unknownquantity unless the environment is known.Instead of representing non-local paths directlyin the logic, we propose that they can be usedwithin a formula as a shorthand, but that allpaths in the formula must be expanded beforeany other processing of the formula.
This pathexpansion is carried out according to the equiva~lences 9 and 6.After path expansion all strings of labels in aformula denote transitions from a common origin,so the expressions containing non-local paths canbe converted to the equivalence class notation,using the schema11 : .
.
.
: In  :<p> = \[<11 .
.
.
.
,In >,<p >\].Consider the passive voice alternative of the de-scription of Figure 2, shown here in Figure 5.This description is also represented by the firstformula of Figure 6.
The formulas to the right inFigure 6 are formed by1.
applying path expansion,2.
converting the attributes containing non-local path values to formulas representingequivalence classes of paths.By following this procedure, the entire functionaldescription of Figure 2 can be represented by thelogical formula given in Figure 7.voice = passivegoal =< subj  >cat = ppprep = byadjenct  =obj =< actor >= \[ case----objective \]Figure 5: Functionalnon-local values.voice : passive^ goal :< subj  >^ adjunct  : (eat : pp^ prep : by^ obj :< actor >^ obj : ease : objective)Description containingpathexpansionvoice : passive^ goal :< sub3" >^ adjunct  : eat : pp^ adjunct  : prep : by^ adjunct  : obj :< actor >^ adjunct  : obj : ease : objectivepathequivalence==~voice : passive^ \[< goat >, < subj  >\]^ adjunct  : cat : pp/~ adjunct  : prep : by^ \[< adjunct  obj >, < actor >\]^ ad junct  : obj : case : objectiveFigure 6: Conversion of non-local values to equiv-alence classes of paths.263cat : sA sub j  : case : nominat iveA( (vdce  : ac~ve^ \[< acto,.
>, < subj >i)V(voice : pas~ve^ |< goal >, < subj >\]A adjunct  : cat : ppA adjunct : prep : byA \[< ad junct  obj >, < actor >\]^ adjunct  : obj : case : objective)}^(mood : declarativeVmood : interrogat ive)Figure 7: Logical formula representing the de-scription of Figure 2.It is now possible to unify the description ofFigure 7 (call this X in the following discus-sion) with another description, making use of theequivalence classes to simplify the result.
Con-sider unifTing X with the descriptionY = actor : case : nominat ive .The commutative law (10) makes it possible tounify Y with any of the conjuncts of X.
If weunify Y with the disjunction which contains thevo/ce attributes, we can use the distributive law(16) to unify Y with both disjuncts.
When Y isunified with the term containing\[< adjunct  obj >, < actor >\],the equivalence (22) specifies that we can add thetermadjunct  : obj : case : nominat ive .This term is incompatible with the termad junct  : obj : case : objective,and by applying the equivalences (6, 4, 1, and2) we can transform the entire disjunct to TOP.Equivalence (8) specifies that this disjunction canbe eliminated.
Thus, we are able to use thepath equivalences during unification to reduce thenumber of disjunctions in a formula without ex-panding to DNF.Note that path expansion does not require anexpansion to full DNF, since disjunctions are notmultiplied.
While the DNF expansion of a for-mula may be exponentially arger than the origi-nal, the path expansion is at most quadraticallylarger.
The size of the formula with paths ex-panded is at most n x p, where n is the lengthof the original formula, and p is the length of thelongest path.
Since p is generally much less thann the size of the path expansion is usually not avery large quadratic.5.5 Va lue  D is junct ion  andGeneral DisjunctionThe path expansion procedure illustrated inFigure 6 can also be used to transform formulascontaining value disjucntion into formulas con-taining general disjunction.
For the reasons givenabove, value disjunctions which contain non-localpath expressions must be converted into generaldisjunctions for further simplification.While it is possible to convert value disjunc-tions into general disjunctions, it is not alwayspossible to convert general disjunctions into valuedisjunctions.
For example, the first disjunctionin the formula of Figure 7 cannot be convertedinto a value disjunction.
The left side of equiva-lence (9) requires both disjuncts to begin witha common label prefix.
The terms of thesetwo disjuncts contain several different prefixes(voice, actor, subj ,  goat, and adjunct) ,  so theycannot be combined into a common value.Before the equivalences ofsection 4 were formu-lated, the first author attempted to implement afacility to represent disjunctive feature structureswith non-local paths using only value disjunction.It seemed that the unification algorithm would besimpler if it had to deal with disjuncti+ns onlyin the context of attribute values, rather thanin more general contexts.
While it w~ possi-ble to write down grammatical definitions usingonly value disjunction, it was very difficult toachieve a correct unification algorithm, becauseeach non-local path was much like an unknownvariable.
The logical calculus presented hereclearly demonstrates that a representation f gen-eral disjunction provides a more direct method todetermine the values for non-local paths.2646 ImplementationThe calculus described here is currently beingimplemented as a program which selectively ap-plies the equivalences of Figure 4 to simplify for-mulas.
A strategy (or algorithm) for simplifyingformulas corresponds to choosing a particular or-der in which to apply the equivalences whenevermore than one equivalence matches the form ofthe formula.
The program will make it possi-ble to test and evaluate different strategies, withthe correctness of any such strategy following di-rectly from the correctness of the calculus.
Whilethis program is primarily of theoretical interest, itmight yield useful improvements to current meth-ods for processing feature structures.The original motivation for developing thistreatment of feature structures came from workon an experimental parser based on Nigel \[9\], alarge systemic grammar of English.
The parser isbeing developed at the USC/Information SciencesInstitute by extending the PATR-II system of SRIInternational.
The systemic grammar has beentranslated into the notation of Functional Uni-fication Grammar, as described in \[6\].
Becausethis grammar contains a large number (severalhundred) of disjunctions, it has been necessary toextend the unification procedure so that it han-dles disjunctive values containing non-local pathswithout expansion to DNF.
We now think thatthis implementation f a relatively large grammarcan be made more tractable by applying some ofthe transformations to feature descriptions whichhave been suggested by the logical calculus.7 ConclusionWe have given a precise logical interpreta-tion for feature structures and their descriptionswhich are used in unification-based grammar for-malisms.
This logic can be used to guide and im-prove implementations of these grammmm, andthe processors which use them.
It has alloweda closer examination of several sources of com-plexity that are present in these grammars, par-ticularly when they make use of disjunctive de-scriptions.
We have found a set logical equiva-lences helpful in suggesting ways of coping withthis complexity.It should be possible to augment this logic toinclude characterizations of negation and implica-tion, which we are now developing.
It may  also beworthwhile to integrate the logic of feature struc-tures with other grammatical formalisms basedon logic, such as DCG \[10\] and LFP \[13\].References\[1\] Ait-Kaci, H. A New Model of Computa-tion Based on a Calculus of Type Subsump-tion.
PhD thesis, University of Pennsylva-nia, 1984.\[2\] Gazdar, G., E. Klein, G.K. Pullum, and I.A.Sag.
Generalized Phrase Structure Gram-mar.
BlackweU Publishing, Oxford, Eng-land, and Harvard University Press, Cam-bridge, Massachusetts, 1985.\[3\] G.R.
Kress, editor.
Halliday: System andFunction in Language.
Oxford UniversityPress, London, England, 1976.\[4\] Kaplan, R. and J. Bresnan.
Lexical Func-tional Grammar: A Formal System forGrammatical Representation.
I  J. Bresnan,editor, The Mental Representation ofGram-matical Relations.
MIT Press, Cambridge,Massachusetts, 1983.\[5\] Karttunen, L. Features and Values.
In Pro-ceedings of the Tenth International Confer-ence on Computational Linguistics, StanfordUniversity, Stanford, California, July 2-7,1984.\[6\] Kasper, R. Systemic Grammar and Func-tional Unification Grammar.
In J. Ben-son and W. Greaves, editors, Proceedings ofthe I~ h International Systemics Workshop,Norwood, New Jersey: Ablex (forthcoming).\[7\] Kay, M. Functional Grammar.
In Pro-ceedings of the Fifth Annual Meeting of theBerkeley Linguistics Society, Berkeley Lin-guistics Society, Berkeley, California, Febru-ary 17-19, 1979.\[8\] Kay, M. Parsing in Functional UnificationGrammar.
In D. Dowty, L. Kartunnen,and A. Zwicky, editors, Natural LanguageParsing.
Cambridge University Press, Cam-bridge, England, 1985.\[9\] Mann, W.C. and C. Matthiessen.
Nigel:A Systemic Grammar for Text Generation.USC / Information Sciences Institute, RR-83-105.
Also appears in R. Benson andJ.
Greaves, editors, Systemic Perspectiveson Discourse: Selected Papers Papers fromthe Ninth International Systemics Work-shop, Ablex, London, England, 1985.265\[10\] Pereira, F. C. N. and D. H. D. Warren.
Defi-nite clause grammars for language analysis -a survey of the formalism and a comparisonwith augmented transition etworks.
Arh'~-?ial Intelligence, 13:231-278, 1980.\[11\] Pereira, F. C. N. and S. M. Shieber.
The se-mantics of grammar formalisms seen as com-puter languages.
In Proceedings of the TenthInternational Conference on ComputationalLinguist,s, Stanford University, Stanford,California, July 2-7, 1984.\[12\] Rounds, W. C. and R. Kasper.
A CompleteLogical Calculus for Record Strucutres Rep-resenting Linguistic Information.
Submittedto the ~ymposium onLogic in Computer Sci-ence, to be held June 16-18, 1986.\[13\] Rounds, W. C. LFP: A Logic for Linguis-tic Descriptions and an Analysis of its Com-plexlty.
Submitted to Computational Lir,-Cui.~tics.\[14\] Shieber, S. M. The design of a computer lan-guage for linguistic information.
In Proceed-ing8 o\[ t~ Tenth International Con/erenceon Computational Linguistics, Stanford Uni-versity, Stanford, California, July 2-7, 1984.\[15\] Shieber, S. M. An Introduction toUai~ation-bo~ed Approaches to Grammar.Chicago: University of Chicago Press, CSLILecture Notes Series (forthcoming).266
