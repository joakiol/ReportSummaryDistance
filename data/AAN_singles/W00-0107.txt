A Measure  of Semant ic  Complex i ty  for Natura l  Language SystemsShannon Pollard*and Alan W. BiermannDepartment ofComputer Science, Duke UniversityBox 90129, D224, LSRC, Durham, NC 27708-0129office: (919)660-6583 fax: (919)660-6519e-mail: shannon@cs.duke.eduAbstractThis paper will describe a way to organize the salientobjects, their attributes, and relationships betweenthe objects in a given domain.
This organizationallows us to assign an information value to each col-lection, and to the domain as a whole, which cor-responds to the number of things to "talk about"in the domain.
This number gives a measure of se-mantic complexity; that is, it will correspond to thenumber of objects, attributes, and relationships inthe domain, but not to the level of syntactic diver-sity allowed when conveying these meanings.Defining a measure of semantic omplexity for adialog system domain will give an insight towardsmaking a complexity measurement standard.
Withsuch a standard, natural anguage programmers canmeasure the feasibility of making a natural lan-guage interface, compare different language proces-sors' ability to handle more and more complex do-mains, and quantify the abilities of the current stateof the art in natural anguage processors.1 IntroductionQuantification of task difficulty has been applied tomany areas in artificial intelligence, including in-formation retrieval (Bagga, 1997) (Bagga and Bier-mann, 1997), machine learning (Niyogi, 1996), pars-ing and grammatical formalisms(G. Edward Bar-ton et al, 1987), and language learning in general(Ristad, 1993).
In addition to providing a way ofcomparing systems, these measures quantify taskcomplexity before a system is built.
The goal ofthis paper is to measure the complexity of domainsfor dialog processing.
With a standard measure ofcomplexity, domains can be compared and analyzedwithout having to build the dialog system first.
Thismeasure would be an indication of the cost, amountof code, accuracy, reliability, and execution time ofthe finished dialog system specified by the domain.The hope is to have a single number or pair of num-bers that correlates trongly with these standardmeasures.
* Supported by the Defense Advanced Research ProjectsAgency, CPoF project, Grant F30602-99-C-0060Specifically, if domain D1 has complexity C1 anddomain D2 has complexity C2 where C2 > C1, thenwe would expect D2 to have a greater cost of soft-ware, more lines of code, less accuracy, less reliabil-ity, and longer execution time.Section 2 will describe the difference in seman-tic and syntactic complexity and explain why weconsider each separately.
In section 3 we define theterms in the complexity analysis, which is explainedin section 4.
Sections 5and 6 discuss how to computeinformation measures that are needed in the com-plexity analysis, and in sections 7 and 8 we presentfuture work and conclude.2 Semant ic  vs .
Syntact i c  complex i tyThe complexity measurement described above mustbe one that takes into account both the semantic andsyntactic omplexity of the domain.
Semantic om-plexity is the number of "things" that we can talkabout in the domain.
This will include all the ob-jects in the domain, the attributes of those objects towhich one might refer, and the relationships betweenthe objects that the user can express.
Syntactic om-plexity refers to the variety of ways that the user willbe allowed to refer to an object, attribute, or rela-tionship.
For example, a domain could include onlytwo boys but if the user is allowed to refer to them inmany ways (e.g., "Bob", "Jim", "he", "they", "thetwo boys next to the water cooler at the back of theroom"), then the domain is semantically simple butsyntactically complex.
Likewise a domain with 100objects that are each referred to only as Object1,Object2, etc.., is semantically complex but syntac-tically simple.Semantic and syntactic omplexities form a trade-Off when it comes to building a language processorfor a domain.
To build a reliable and accurate pro-cessor, the domain must be sufficiently restrained.The more syntactic variety allowed the user, thefewer objects allowed in the domain.
So, the moreobjects in the world, the more restricted the user'sgrammar and vocabulary.
This leads to a tendencyto consider the two fronts separately, and then con-sider a complete complexity measure as a combina-42tion of both.
Having measures of syntactic and se-mantic complexity separately will help to find wherethe best compromise lies.This paper addresses semantic omplexity only.
Ittherefore does not completely define the complexitymeasure described in the introduction, but hopefullytakes a step toward defining such a measure.
Syntac-tic complexity measures such as grammar perplexity(Cole and Zue, 1995) should augment his semanticmeasure to give a full complexity measure.3 Domain TermsTo analyze a domain's complexity, the domainexpert must first specify the domain in whichthe system will work by determining the objectsin the domain, each object's attributes, and therelationships between objects.
Consider as anexample the small domain of a simple army map,where there are a few objects on the map and theuser can display, move, and show or set attributesof them.
This example will be used to show how todefine a domain using the following terms:Objects are the types of salient things in thedomain.
They correspond roughly to the subjectsand objects of sentences used in the dialog.
In thearmy display domain, the objects will be tanks,troops, bridges, forests, and hills.
Notice that atype of object only needs to be specified once at thishigh level.
Bridge is one object in our world, eventhough the actual program is able to distinguishmany different bridges.Attributes of an object are the things that theprogram needs to know about the object in order touse it in the domain.
They correspond roughly toadjectives that describe the object, or things thatdistinguish one of the objects from the others ofthat type.
In our example, the domain requires thename and position of the bridge and the materialof which the bridge is made.
These three pieces ofinformation include everything the system needs toknow about any bridge.
In the following figure, theattributes of an object are listed underneath eachobject type.Classes are objects, attributes, predicates, orother classes that are grouped together.
A classcan act as an object in the sense that it can havea name and have relationships with other objects.In our example domain, we will want to distinguishobjects that can move from those that cannot, i.e.,a MobileObject class as a grouping of Tanks andTroops.
There are always three trivial classes: theclass of all objects, all attributes (of all objects),and all predicates.43Tank i T roop  BridgeF~d/F~ FdcmMFoe NameID No.
i Nan~Pcdd~ion Po6llloa PoattlolaRange or sight ~ of sight MatcdalRange of art I~?
of art.IForest Hi l lName NameAreaArm , ElcvadonPolitloa I PomttionFigure 1: Example Domain Objects and AttributesPredicates are the relationships between theobjects in the world.
Any meaning that the usercan convey using one or more of the objects houldbe represented by a predicate.
They correspondto the relationship words, like the verbs andprepositions in a sentence, and one can usuallyfind the predicates needed from looking at theallowed operations.
For the example domain, thefollowing is the list of allowable predicates, in atypical programming language format to distinguis hpredicates from arguments.Display(Object) \["Display the tanks"\]Move(MobileObject,Object) \["Move Troop at posi-tion 100, 400 to the hill"\]Show(Attribute,Object) \["Show the range of sightof Tank 434"\]Set(Object,Attribute,Attribute) \["The forest has anarea of 100 square yards.
"\]Notice that classes can be written as predicatearguments to mean that any object in the class canbe an argument.
Specifically, the Object type refersto all objects, MobileObject refers to either Tank orTroop, and Attribute refers to any object's attribute.4 Complex i ty  FormulasNow that the domain is specified, we can anMyzeits semantics by estimating the number of bits of in-formation conveyed by referring to each different as-pect of the domain.
This is common in informationtheory (Ash, 1965); that is, when the user makes astatement, it must be encoded, and the number ofbits needed to encode the statement is a measure ofits information content.
Since the number of bits re-quired to encode a statement in a given domain cor-responds directly to the number of salient objects,this information measurement is useful in assigninga semantic omplexity measurement.To get a. complexity measure for an entire do-main, we begin at the lowest level and make countscorresponding to the information content describedabove.
The counts from lower levels are combined togive a higher level count.
Specifically, first each at-tribute value for a specific object is computed, thenattribute values are combined to give object values,which are combined to give class values, and so forthuntil a value for the entire domain is computed.Define B(X) to be the number of bits conveyed byan instance of random variable X, and IX\] to be thenumber of possible values of X.
(Possible ways ofcomputing B(X) will be given in the next sections.
)The random variable will represent different events,depending on where we are in the complexity anal-ysis, but in general, the variable will represent thespecification of possible attributes, objects, classes,or predicates.We start by defining the complexity of a singleattribute for a single object.
We give the formu-las for computing the different levels of complex-ity (attribute level, object level, etc) and then workthrough the example domain.The complexity of attribute i for object j, denotedACatt~,obji isAGtt,,obji = B(A)where A is the specification of an attribute value.The object complexity of object j is the sum of allits attributes' complexities:OC?bj$ "~- E ACatt~,objiiA simple sum is used because identifying one ob-ject uniquely corresponds to knowing each of its at-tributes.
Therefore, the sum of the attribute infor-mation is the same as the complete object informa-tion.Since objects can be grouped together into classes,a class complexity is the number of bits conveyed bydistinguishing one type of object from that class,plus the maximum object complexity that occurs inthat class:CC.,...
= B(O) + max (OCob#)obj~classwhere O is the specification of an object in class.When a member of a class is specified, the amountof information conveyed is equal to the informationin the object type specification (B(O)), plus the in-formation conveyed by the actual object itself.
Themost that can be is the maximum object complexityin the class.
Classes of predicates and attributes aredefined in the same way.For each predicate, the complexity is the sum ofthe complexities of its arguments:PCpred= E CC?,assclasseargThis is the same as the object complexity as a sumof the complexities of its attributes.In general, predicate arguments will be classes.
Ifa single object is the only possibility for an argu-ment rather than a class of objects, then the objectcomplexity can be used.
This would be the same asmaking a class of one object: the class complexityof one object is equal to the complexity of the onemember of the class.The entire domain's emantic omplexity is thenthe same as the complexity of the class of all predi-cates defined for the domain.
Specifically, for a do-main with a set of predicates P, the semantic om-plexity SEMC isSEMC = B(P) + max PCpred pred~Pwhere P is the specification of a predicate in thedomain.Any statement that the user can make should cor-respond to some predicate in the domain model.
Theinformation given in the sentence is the informationgiven by the predicate specification (B(P)) plus theinformation given in the arguments to the predicate,which is as much as the greatest predicate complex-ity.5 Us ing  Equa l  P robab i l i tyAssumpt ionsNow we find a formula for B(X), the bits of infor-mation conveyed when referring to certain parts ofthe domain.
For the army map example, we assumethat all objects are equally likely to be referred to,and all attributes, classes, and relationships are alsoequally likely.
So a troop is as likely to be referredto as a tank, or as a forest, etc.
Also, a tank on themap is equally likely to be friend, foe, or unknown.Every value for the attributes will be equally likely.Under this assumption, the number of bits of in-formation conveyed by referring to one entity out ofv possible entities is log2v.
That is, for the equallyprobable case, B(X) = log2\[X\[.Now we fill in the table from Figure 1, beginningwith attribute values.
A domain expert would decidehow many different values are allowed for each at-tribute.
In this example, we will specify that Tank'sPriend/Foe value is either friend, foe, or unknown -three possibilities.ACFriend/Foe,Tank -~- Iog23 ~ 2Assuming that there are 128 ID number possibili-ties, 65,000 positions, and 1,000 possible ranges, andassuming equal probability, we take the log of eachnumber and fill in the complexity beside each at-tribute for that object.
Following the hierarchy, wenow add the attribute complexities to get the com-plexity of the tank object.44MoblleObJectTank 45Fdend/Foe 2ID No.
7Position 16Range of sight 10Range of art.
1043 TroopFriend/Foe 2Name 5Position 16Range of sight 10Range of art.
10BridgeNamePositionMaterial21216Forest 2s HillName 2 NameAreaArea 10ElevationPosition 16 Position33210516ObjectAttribute 20Oblect 48MoblleObject 46Display(Object)Move(MobileObject, Object)Show(Attribute,Object)Set(Object,Attribute,Attribute)48 Total SemanticComplexity94 = 966888Figure 2: Map Domain Complexity Analysis under the Equal Probability AssumptionNow we have OCtank = 45 and let's say in likemanner we get OCtroop = 43.
These two types ofobjects comprise the MobileObject class, so now wecan compute this complexity:CCMobileObject = log2 2 + maxobj~MobileObject (OCobj)= 1 + OC~.k= 46Similar formulas are used for predicate and com-plete domain complexity measurements, and the restof the example should be obvious from Figure 2.6 More  Genera l  In fo rmat ionMeasurementIn most cases, the equal probability assumption willnot hold.
For example, the bridges in the domaincan be made of any of eight materials, but if all ofthe visible bridges are made of wood, then the Mate-rial attribute for Bridge will probably be wood mostof the time.
In this case, referring to the "woodenbridge" on the map doesn't give much more informa-tion than just "bridge."
For this more general case,define B(X) to be B(X1, X2, ...X,) where each Xiis a possible value of X.
Also define pl,p2, ...Pn tobe their associated probabilities.
ThenB(Xt ,  X2, ...Xn) = - Ep l  logpii=1These probabilities can be determined using fre-quency counts from sample dialogs, or estimatedbased on domain knowledge.7 Future  WorkThe next step in this research is to obtain several do-mains that have been built into a dialog system andanalyze them.
The Circuit Fix-It Shoppe(Smith andD.R.Hipp, 1994) has been analyzed, but the resultswill only be interesting in comparison to other realdomains.
This comparison will not only help us ver-ify the correctness ofthe analyses, but also bring uppossible situations that the analysis may not cover.Next, we will want to identify a measure of syn-tactic complexity.
This could be related to gram-mar perplexity.
It should take into account vocab-ulary size, grammar constraints, and the amount ofambiguity in the grammar.
We would like to beable to analyze the domains with both the seman-tic complexity and the syntactic omplexity, and seethat the results match our intuitions of complexityand the standards of lines of code, reliability, costof software, and execution time.
We would also be45interested in observing the correlation between thesyntactic and semantic omplexities.8 Conclus ionThis paper describes a way to organize the objects,attributes, classes, and relationships in a domainand to use these classifications to define a semanticdomain complexity.
This measurement, along witha syntactic omplexity measurement, will give nat-ural language programmers a way to quantify thecomplexity of a given domain in terms of real-worldcosts: cost of software, reliability, accuracy, and ex-ecution time.
After defining a syntactic omplexitymeasure, domains can be analyzed against hese realcosts to be sure that the measure is accurate.
Sucha measure will allow natural anguage systems pro-grammers a way to analyze domains and estimatethe costs of building a natural anguage system be-forehand, based on the domain's emantic and syn-tactic constraints.
A standard complexity measurewill also allow a comparison of different languageprocessors' ability to handle more and more com-plex domains and quantify the abilities of the cur-rent state of the art in natural anguage processors.ReferencesRobert B. Ash.
1965.
Information Theory.
Inter-science Publishers.Amit Bagga and Alan W. Biermann.
1997.
Ana-lyzing the complexity of a domain with respectto an information extraction task.
Proceedings ofthe tenth International Conference on Research onComputational Linguistics (ROCLING X), pages175--94, August.Amit Bagga.
1997.
Analyzing the performance ofmessage understanding systems.
In Proceedingsof the Natural Language Processing Pacific RimSymposium (NLPRS '97), pages 637---40, Decem-ber.Ron Cole and Victor Zue.
1995.
Survey of the stateof the art in human language technology, Novem-ber.Jr G. Edward Barton, Robert C. Berwick, andEric Sven Ristad.
1987.
Computational Complex-ity and Natural Language.
The MIT Press, Cam-bridge, Massachusetts.Partha Niyogi.
1996.
The Informational Complexityof Learning from Examples.
Ph.D. thesis, MIT.Eric Sven Ristad.
1993.
The Language ComplexityGame.
MIT Press.R.W.
Smith and D.R.Hipp.
1994.
Spoken NaturalLanguage Dialog Systems: A Practical Approach.Oxford University Press, New York.46
