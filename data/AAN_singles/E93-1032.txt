Towards efficient parsing withproof-netsAlain LecomteGRILUniversit6 Blaise Pascal63037-Clermont-FerrandFranceemail: lecomte@ shm.grenet.frAbstractThis paper presents a method for parsingassociative Lambek grammars based on graph-theoretic properties.
Connection graphs, whichare a simplified version of proof-nets, areactually a mere conservative extension of theearlier method of syntactic connexion,discovered by Ajduckiewicz \[1935\].
The methodamounts to find alternating spanning trees ingraphs.
A sketch of an algorithm for findingsuch a tree is provided.
Interesting properties oftime-complexity for this method are expected.It has some similarities with chart-parsing(\[KOnig, 1991, 1992\], \[Hepple, 1992\]) but isdifferent at least in the fact that intervals arehere edges and words are vertices (or trees)instead of the contrary in classical chart-parsing.1 In t roduct ionIn this paper, we present a method for parsing Lambekgrammars based on graph-theoretic properties.
Weexpect hat it may be done efficiently by an algorithm(time-polynomial even in the worst case) which aims atfinding an alternating spanning tree in a graph.
We donot give the explicit formulation of such an algorithmin this paper: we will only give an idea and anillustration of it.
This paper is thus mostly devoted tothe properties on which the method is based.
We callconnection graphs the special kind of proof-nets weexplore, just in order to make explicit some differencewith the usual method of proof-nets, as it can be foundin \[Roorda, 1991; 1992\] and \[Moortgat 1992\], but thetwo concepts are very similar.
In many respects,connection graphs are a mere conservative extension ofthe earlier method of syntactic onnection, discovered byAjduckiewicz \[1935\].
The method amounts to link thenodes of an ordered sequence of trees in such a way thatproperties of connexion, "non overlapping", acyclicityand "strong connectivity" are verified.
Connectiongraphs are simpler than proof-nets in that they loosesome information.
As they are here formulated, they areonly convenient for the associative version of theproduct-free Lambek calculus.
One of their advantageslies in the geometrical viewpoint hey provide on theproofs of a sequent.
By means of this viewpoint,questions of provability may be reduced to graph-theoretical problems.
For instance, every reading of asentence isprovided by an alternating spanning tree.In many aspects, the method resembles the wellknown method of chart-parsing.
Ktnig \[1991, 1992\]was the first to apply chart-parsing toLambek calculus.Hepple \[1992\] has recently improved this application.An obvious difference with the method proposed herelies in the fact that, in ours, words are points andintervals between them are edges instead of the contraryin chart-parsing.
In both cases, computationaladvantages are found by keeping correct partial analysesafter they have been obtained.
A chart is actually used inboth methods.2 Connect ion  Graphs2.1 Links and NodesDefinition 1: Let S be a set of signed vertices (i-e:labelled with letters belonging to an alphabet A andwith a + or - sign).
We define three types of links:?
external links:+a .
.
.
.
.
.
.
a or -a .... .
.
+a, between complementaryvertices (same letter and opposite signs)?
internal inks:269?
type 1:fight-oriented: left-oriented:+B +B% s" % /-A -A?
type 2:right-oriented: left-oriented:-B -B \ /+A +A2.2 Connection Graphs (inductive definition)We define by induction the class of connection graphsand the associated notions of unit and of linking asequence of units.?
every external ink is a connection graph, whichlinks the units +a and -a,?
(I) if (z is a connection graph which links asequence of units x and a unit +A and if \[3 is aconnection graph which links y, -B and z (where z= z' +C) 1, then the following schemes define newconnection graphs:(a)y -B \ X Z+A('o)y x -B z /+Athey will be noted respectively: o~ r 13 and c~ 1 \[~,and they link respectively: y, - (B/A), x, z and y, x,-(AkB), z where -(B/A) and -(AkB) are new units.?
(II) if ~ is a connection graph which links -A, xand +B, then:(a) if -A is the left end of the linking, we get a newconnection graph which links x and +(AkB) by thescheme:x +Bs',?-A1 We use small  latin letters for sequences of  units andcapital latin letters with a sign for units.
(b) if -A is the right end just before +B, then we geta new connection graph which links x and +(B/A)by the scheme:x +B%%-Athey are respectively noted: tl(a) and tr(ot).Example:-b .
.
.
.
.
.
.
.
+b is a connection graph which links -b and+b, idem for -c .
.
.
.
.
.
.
.
+c.By (Ib), we get:_ KIIII:.
: .
.
.
.
.
.
.
.+cwhich is a connection graph which links -(b/c), -cand +b-a ........ +a is also a connection graph and we obtainby (la):"?%,?.+a +cwhich is a connection graph which links -a, -(a~(b/c)), -c and +band we obtain by (Ha):/N..-- /+a +c -awhich links - (a~(b/c)), -c and +(akb).Proposition l: for any sign +_, we have for all A, Band C :_+ (AkB)IC = +__ A\(BIC)Proof: assume we have a connection graph \[3 whichlinks y, -(AXB), z and a connection graph a which linksx and +C, then, by (Ia) we obtain a connection graphwhich links y, -((AkB)/C), x and z.
But since 13 linksunits having already a type 2 link, it necessarily comesfrom a \[y', -B, z\] and a Ix', +A\] such that y' x' = y.From \[y', -B, z\] and \[x, +C\] we obtain a connectiongraph which links y', -(B/C), x and z and from thisgraph and the graph which links Ix', +A\], we get agraph which links y', x', -(A~(B/C)), x and z, that meansa graph which links y, -(A~(B/C)), x and z, which isidentical to the graph which links y, -((AkB)/C), x andz.
02.3 Alternating treesDefinition 2: Let L1 and L2 respectively the sets oftype 1 links and type 2 links.
An alternating tree onL1uL2  is a tree in which all the nodes at a same levelhave the same sign, all the edges are type 1 or type 2links and the sign of a node is alternatively + and -along any path from the root to any leaf.270Proposition 2: Let G be a connection graph and E bethe set of its external links.
The set G-E is an orderedset of units, each of them consisting in an alternatingtree, noted -A if the root is negative and +A if the rootis positive.Proof.
by induction on building a connection graph.1) Let G consist in a single external link, if we removethe external link, we get two distinct vertices: +a and -a,which are alternating trees.2) Let us assume the property true for ~ which links y,-B, z and for ct which links x and +A.
-B, as a unit, isan alternating negative tree and +A is an alternatingpositive tree.
By (Ia) and 0b), a type 2 link is addedfrom the root of -B.
We thus keep a tree the root ofwhich is negative and the type of the added link is thesame as that of the links at the same level.
Moreover,no cycle is added because before this operation, the twographs were not already connected.
-(B/A) and -(AkB) arethus alternating Irees.3) Let us assume now the property true for ct whichlinks -A, x and +B, then it is also true for tl(?0 andtr(cx) because a type 1 link is added from the positiveroot of +B.
Obviously, no cycle is added when weexclude the external links.
02.4  Numbering the nodes of a connectiongraphLet F be the ordered set of alternating trees in aconnection graph G.Proposition 3: F contains one and only one positivetree.
It is the last tree of the set.
Its root will be calledthe positive root of G.Proof."
very easy, by induction on building a connectiongraph.0Proposit ion 4: Let us assume that G contains 2nvertices.
There is one and only one way of numberingthese vertices in order that the following conditions arefull filled:?
i fX and Y are alternating trees and X< Y (X beforeY in the order defined on 1-') the set I X of numbersassociated to X and the set Iy  are such that: IX < Iy(where I < I" means: ~ Vi" i~l and i'El' ==~ i<i')?
type 1 links:+B +B% J'-A -AIA < IB IA > IB?
type 2 links:-B -B \ /+A +AI B < I A IA < I BProof: easy.
(cf one of the several ways of enumeratingthe nodes of a tree).0Example:- "'" ..-c ~" ..... "": +b 5; 6 +a 1 -I-12 -aDefinition 3: a connection graph G is said to be wellnumbered if and only if its nodes are numbered accordingto Proposition 4.2.5  Completeness of Connect ion Graphswith respect to the Associative Product-freeLambek CalculusWe show that every deduction d in the calculus A (forAssociative Product-free Lambek calculus) may betranslated into a connection graph %(d).axiom: a ---> a is translated into:-a ....... -+a or +a .
.
.
.
.
.
.
.
.
.
.
arules:\[L/q: if x ---> A translates into 13 and y B z --> Ctranslates into y, y B/A x z translates into l\] ~r  y\[L\\]: y x AkB z translates into 13 @1 7\[R/\]: translates into tr(a) where ~ is the translationo fA  x---> B\[R\\]: translates into tl(cx).0Remark: this translation is not a one-to-one mapping,because several deductions can be translated into thesame connection graph.
We assume here that connectiongraphs provide a semantics for derivations.
It is possibleto show that this semantics is isomorphic to theassociative directed lambda calculus (see Wansing 1990).2.6  Soundness of Connection Graphs withrespect to AThis paragraph is very similar to Roorda 1991, chap IIl,?4 .Lemma 1: I f  we remove a type 1 link from aconnection graph G, we keep a connection graph.Proof: we may assume that this link has been added atthe last stage of the construction.
(>Definition 4: a type 2 link is called separable if itcould have been added in the last stage of theconslruction.Lemma 2: I f  a connection graph, consisting of morethan one link, has no terminal type 1 link, it has aseparable type 2 link.Proof'.
obvious.Proposition 5: To every connection graph G theunits of which are: -A1.
-A 2 .
.
.
.
.
-A n, +B, therecorresponds a deduction in A of the sequent:AI*.
A2* .
.
.
.
.
An* --~ B*271(where X* is the formula associated with the alternatingtree X)Proof: by induction on the structure of G. G hasnecessarily a last link, in the order of the construction.As seen in the previous lemma, it is necessarily either atype 1 link or a type 2 link.
In the first case, whenremoving it, we still have a connection graph.
In thesecond case, when removing it, we get two connectiongraphs ct and \[3 which correspond, by inductionhypothesis, respectively to x ---> A and y B z---> C.2.7 Non-Overlapping propertyDefinition 5: given a connection graph G, we callinterval every set of integers \[i, j\] (ie: {x; i<x<j} suchthat i and j are indices associated with ending points ofan external link (and i<j).Two intervals \[i, j\] and \[i', j'\] do not overlap if and onlyif:?
\[i, j\] n \[i', j'\] = glor ?
\[i, j\] D \[i', jq and i ~ i' and j ~: j'or ?
\[i', j'\] D \[i, j\] and i ?
i' and j ?
j'Given a family I of intervals, we say that it satisfies theNon Overlapping Condition (NOC) if it does notcontain any pair of intervals which overlap.Theorem 1: in a well numbered connection graph G,the family of intervals associated with all the externallinks satisfies NOC.Proof: easy, by induction.<)2.8 Linking the posit ive rootTheorem 2: in a connection graph G, the positive rootis connected by an external ink either to a negativevertex in the same tree (just below it) or to a negativeroot.2.9 Connect iv i ty and acycl ic ity byexternal links and type 2 linksTheorem 3: Let G be a connection graph.
Let L1 bethe set of its type 1 links.
G-L1 is connected andacyclic (it is a tree).Proof: a type 2 link connects two connection graphs forthe first time they meet and a type 1 link does neitherconnect wo graphs, nor modify the topology of type 2links and external inks.
02.10 One-to-one mapping between nodesTheorem 4: for every i in a connection graph G, let(~(i) be the node linked to i by an external ink, ~ is aone-to-one mapping from S onto S.Proof: trivial by induction.
02-11 Strong connectivityDefinition 6: given a graph G, a spanning tree of Gis defined as a tree on the complete set of nodes of G. Atree is said to be alternating on L2 u E, if each of itspaths from the root to a leaf is alternatively composedby L2-edges and E-edges.Theorem 5: every connection graph G admits analternating spanning tree with the positive root of G asthe root.Proof'.?
true for any axiom,?
Let us assume it is true for tx and 7.
Then by (la) andfro):?
by induction hypothesis, there is a path from the rootof +C to the root of -B which is alternating.
Since itarrives at a negative vertex, its last link cannot be oftype 2, then it is an external ink.?
There is also a path from the root of +A to any leaf ofthe spanning tree of ix, which is alternating.
Since itcomes from a positive vertex, it cannot begin with atype 2 link, hence it begins with an extrernal link.Thus, by inserting a type 2 link between the externallink arriving at -B and the external ink starting from+A, we get a path starting from the positive root of +Cand arriving at any leaf of ct, inserted into 7, which isalternating.Therefore, there is an alternating path from the positiveroot of +C to any leaf of ct0)7.Let us assume now it is true for ct which links -A, xand +B.
The transformation t r or t I does not modify theset of paths starting from the positive root of +B.
0Definition 7: a node in a connection graph G will besaid strongly connected to another node in the samegraph if they are connected by an alternating path.Definition 8: a link will be said to be strong if itstwo ends are srongly connected.Theorem 6: in a connection graph G, every type 1link is strong.Proof: this is shown when installing a new type 1 link.Such an installation does not modify the topology ofG-L1 .
The previous graph (before applying t1 or t r) wasnecessarily a connection graph.
Thus by Theorem 5, itwas scanned by an alternating spanning nee with as rootthe positive root of the graph.
This tree is preserved byt I or t r, it contained an alternating path connecting thetwo vertices which are now linked by a type 1 link.
0As a matter of recapitulation, we enumerate now thefollowing properties, satisfied by any connection graph.?
one-to-one mapping by external links (CG0)?
positive root property + uniqueness of the positiveroot (CG1)?
non-overlapping condition (CG2)?
strong connectivity (CG3)?
connectivity and acyclicity on L2 u E (CG4)?
alternating spanning tree (CGS)?
G -E  is a set of well numbered alternating trees(CG6)Proposition 6: CG5 is  a consequence of CG0,CG1,  CG3,  CG4.272Proof: By CG4,  G-L1 is a tree on S, it is therefore aspanning tree of G. Let us consider a path ~ from thepositive root +b (which is the root of the positive tree+B, and which is unique according to CG1) to a leaf a.We must notice that a cannot be positive, because if itwas, it would necessarily be an end of a type 2 link andthis type 2 link would be the last edge on the path a,but by CG0,  it would be linked by an external ink toanother node and thus it would not be a leaf.
Thus, a isnecessarily negative, and we can write -a instead of a. If-a is isolated (as a negative root of a negative tree), wecan remove the last external ink and the type 2 linkbefore the last, we are led to the same problem: a pathc '  arriving at a negative leaf, but or' is shorter than ~.If -a is not isolated, it is necessarily the end of a type1 link, but by CG3, there is an alternating path joining-a and the positive node +c which is the other end.Removing this path and the type 2 link arriving at +c,we still get the same problem of a path c '  arriving at anegative node, but again a '  is shorter than g. We canproceed like that until we have a mere external inkbetween the positive root +b and a vertex -b.
In thiscase, the path is obviously alternate.3 We l l  L inked  Graphs  (WLG)Definition 9: Let -A1, -A2 .
.
.
.
.
-An, +B a sequenceof alternating trees on the set S of  signed vertices.
Wecall Well Linked Graph on \[-A1, -A2 .
.
.
.
.
-An, +B\] theresult of adding external links in order that CG0, CG1,CG2, CG3, CG4 are satisfied.Propos i t ion  7: every connection graph is a welllinked graph.Proof: obvious according to the previous ?.0Theorem 7: every well linked graph is a connectiongraph.
(ie: every well linked graph could be obtained by theinductive construction of a connection graph, with thesequence of alternating trees as G-E).Proof: given a WLG on I-A1, -A2 .
.
.
.
.
-An, +B\], it hasa unique positive root +b (the root of +B).
Thus itsatisfies the property of uniqueness of the positive root.Let us assume there is a type 1 link from +b, then letus remove:?
if it is left-oriented: the leftmost one?
if it is right-oriented: the rightmost one.Let us assume for instance that it is left-oriented:?
The tree below this link may be moved towards theleft end of the sequence of trees by the inverse of  theconstruction rule (IIa).
This move preserves thetopological structure of  EuL2 ,  therefore, CG1, CG3and CG4 are preserved.
This move implies a re-numbering but it does not destroy the non-overlappingproperty.
Thus CG2 is preserved.
CG0 is triviallypreserved.
The argument is similar for a right-orientedlink.
Thus after this removal, we keep a WLG.Let us assume now there is no type 1 link from +b.Then there is an external link which links +b to a vertex-b situated among the negative trees.
If -b is not relatedto another node, we get an elementary WLG: -b .... +b,which is obviously a connection graph.
If -b is relatedto another node, then by CG5, either -b is a leaf, or it isthe starting point of a type 2 link.
Let us assume -b is aleaf (of a non atomic tree), then -b is linked by a type 1link to a vertex +a (and not to +b since we haveassumed there is no longer type 1 link from +b).Because of CG3, -b and +a are connected by analternating path on EuL2 ,  thus -b is necessarily thestarting point of a type 2 link, but in this case, -b is nota leaf.
Therefore -b is not a leaf and it is the startingpoint of a type 2 link.
Let +c the other end of this link.?
Let us assume that this link is left-oriented: weremove the leftmost one if many.
In this case, thescanning tree is broken into two parts and theconnection graph is also separated into two pieces.
Onecontains +b, the other contains +c.Let us consider the first one:?
it keeps CG3 and CG4:for example CG3:- let us consider a type 1 link situated in this part.
Itdoes not come from +b since we have assumed there isno longer type 1 link from +b.- its ends are linked by an alternating path.
Let usassume that the removed type 2 link belonged to thispath.
By removing it, we get either a single externallink: -b ... .
.
.
+b, but such a piece does not contain anytype 1 link, or another kind of graph.
If we want thisgraph has a type 1 link, it necessarily must containanother type 2 link starting from -b, and arriving, say,at +d, But an alternating path between two ends of atype 1 link can neither arrive by an external ink at -bsince -b is already connected by such a link to thepositive root +b (and we have assumed there is no type1 link attached to +b), nor pass through +d since, inthis case, the path would have two consecutive type 2links, which contradicts the definition of an alternatingpath.
Therefore, the removed type 2 link cannot be onthe alternating path linking the ends of a type 1 link inthis part of the graph.
Finally, no alternating path in thefirst component is destroyed by this removal, among allthe alternating paths connecting ends of type 1 links.Let us consider the second one:- let us consider a type 1 link situated in this part and letus assume that its ends are linked by an alternating pathpassing through the removed type 2 link.
The proof isthe same as previously: the path can neither arrive at -bby an external ink nor by a type 2 link.
Moreover, ithas one and only one positive root +c, because it doesnot contain +b, and +c is necessarily linked by anexternal link to either a negative root or a negativevertex just below it (if not, there would be a type 1 link+x - -  -c, with -c externally linked to +c, the alternatingpath from -c to +x would thus necessarily pass through+c and -b, which is impossible according to the firstpart of the proof).273When all the type 2 links attached to -b are removed,there remains only the external link -b ... .
+b which is aWLG, and we can perform this decomposition for eachpart resulting from a previous step.It would then be possible to reconstruct he graphaccordint o the induction schemes (I) and (II), startingonly from axioms.Corollary: well linked graphs are sound and completewith respect o the calculus A.4 Method of  const ruct ion  of  a wel ll inked graphAn alternating tree was defined by a set of signedvertices and a set of typed links which link them.
Weare now adding two new kinds of entity in order tofacilitate tree-encoding.4.1 Colours and anti-colours4.1.1 ColoursLet us assign to each vertex in a sequence of trees \[-A1,-A2 .
.
.
.
.
-An, +B\] a colour (originally unknown andrepresented by a free variable X) in order that:a) two nodes linked by a type 2 link have same coloursb) two nodes which are not linked or which are linkedby a type-1 link have not the same colours (X ~ Y).Proposition 8:for every connection graph G with setof type 1 links L1, the connectivity and acyclicity of G-L1  translates into: every external link links two nodeshaving differents colours.
After linking by an externallink, the two colours are equalized (X = Y).4.1.2 AnticoloursAnticolours are assigned to nodes in an alternating treein order that:a) two nodes linked by a type 1 link have sameanticolour,b) if a positive node receives an anticolour a,  (by (a) orby an external link), the negated anticolour 9ct istransmitted to all other positive nodes having samecolour.Rule:1) When joining two nodes by an external ink, whichare associated with different (positive) anticolours tx and13, ?t and ~ are said to be equalized, that means: put in asame multi-set.2) When joining a node having a negated anticolour 913to a node having a colour X by an external ink, theanticolour --,13 is transmitted to the colour X as a label.3) When linking two ends of a type 1 link by externallinks, the two occurrences of the same (positive)anticolour tx must meet only one colour, or two colourswhich have been already equalized and such that one ofthe two is not labelled by a negated anticolour 913 if 13 isan anticolour already equalized to ix.Proposition 9: in a connection graph G, the strongconnectivity translates into: the anticolour proper to atype 1 link meets only one colour (or colours whichhave been equalized).Corollary: Every connection graph verifies: CGO,CGI ,  CG2,  CG3 ' ,  CG4 ' ,  CG5 ' ,  CG6 where:CG3' is the condition on unifying anti-colours, CG4'the conditions on colours, CG5' the fact that anyconnection graph is monocoloured.4.2 Method4.2.1 CategoriesDefinition 9: We call a category any set of 6-tupleseach consisting in:?
a label taken from an alphabet A,?
a sign (+ or -)?
an index (integer),?
a colour (free variable)?
an anticolour (free variable of a second sort)?
the indication of being a root if it is the case.Definition 10: We call an ordered category a categorywhere 6-tuples are ordered according to their index.Proposition 10: each alternating tree has one andonly one encoding into an ordered category.Examples:-a(l~-bsss o_dtranslates into: {<+,b,I,X,U,_>, <-,d,2,Y,U,_>,<+,c,3,X,~U, >, <-,a,4,X,_,r> }--a(~b (~ctranslates into: {<+,b,I,X, gU,_>, <-,d,2,Y,U, >,<+,c,3,X,U,_>, <-,a,4,X,_,r> }Definition 11: two 6-tuples are said to be mergeableif:?
they have same literal label,?
they have opposite signs,?
they have different colours,?
if one of them has an anticolour ~, the other mustnot have a colour which has been labelled by a negatedanticolour --,13 such that ~ and 13 have already beenequalized, in a same multiset.?
if one node is the positive root, the other is anegative root or a negative node just below it in thesame tree (same anticolour).274fig 1: (three alternating spanning trees = three readings)-a -a 7 - a ~  i a  1110,~ v+a-a 3-a ~ a  ~ a  112+a +a4 /a  +a +a-a ~ 8 -a 9 ""'"~-a-a 34-2-2 A sketch of an algorithmWe scan the ordered list of nodes from left to right,creating links at each step, between the current node andall the possible mergeable nodes on its left or justshifting.
When nodes are shifted, they are pushed onto astack.
Links are recorded on the chart in the followingway.
Each link is a node of the chart (in consequence,the chart has no more than n 2 nodes, where n is thenumber of nodes on the reading tape R).
A link 1 isjoined by arcs in the chart to all links already recorded11 .
.
.
.
1 n such that 1 makes a correct partial linking byinsertion into the linkings represented by the pathsarriving at 11 .
.
.
.
In.
and 1 has a left extremity whichcoincides with either the rightmost right extremity of alink already recorded on such a path, or with a top ofstack attached to such a previously recorded link.
Thus,a link 1 may be an arriving point for several paths.
Inthis case, we will consider 1 as a new starting point.That means that when joining a new link 1' to linksabove 1 in the chart, we only test the correctness ofa partial linking down to the link I.
We consider herethat if 1 is in the chart at this place, there is necessarilya correct path up to it, and all the partial paths from I tothe current node are, by definition, correct.
Thus, whenadding a link above 1 (and before a possible new"crossroads"), even if there are many paths joining I toit, there is at least one correct path from the bottom ofthe chart to the current node.
Each time a link isrecorded and joined to other ones, we record for each arcarriving at it, the possible tops of stack, the possible+a 12+a 1211 +a 12rightmost right extremities, the list of nodes throughwhich the path has passed since the previousembranchment, the list of equalized colours (possiblylabelled with negated anticolours) and the list ofequalized anticolours (for the piece of path coming fromthe previous embranchment).
When joining a new link,we have to retrieve a new top of the stack, if added byconsuming a previous one or a previous rightmost fightextremity, and to test the correctness of the path.
Thisnecessitates a descent along paths down to the bottom ofthe chart.
This descent is made deterministic because ofthe informations tored on arcs.
If n is the number ofnodes in the original sequent, a maximum of n 2 linksmay be created, and there can be a maximum of n 4 arcsin the chart.
At step i, there can be a maximum of i 4arcs.
We add new links on the basis of stackinformations stored on arriving arcs at each previouslyrecorded link.
Each checking does not take more than isteps, and there are at most i2 nodes to check at step i.For a given link to add, when looking for new tops ofthe stack and checking the correctness of the newlinking, we explore the current state of the chart byscanning no more than twice (one in one direction, onein the other) each arc it contains.
Thus joining a newlink to previous ones entails a maximum of 2i 7 steps.At step i, i new links can be added.
Thus step i entails amaximum of 2i 8 steps.
Thus, when reaching step n, wehave done a maximum of 2Y.i 8 steps (i=l to n), that isO(n9).
This is obviously a too big order.
Nevertheless,275the method is time-polynomial and more improvementscan be expected in the future.Example:Suppose we have to demonstrate he sequent:(a/a)/(a/a) a/a a/a a a\a --) a(cf fig 1)At beginning steps 1, 2, 3, 4, nodes are pushed onto thetop of the stack.
At step 5, the link (4 5) is created andrecorded in the chart.
The new top of stack 3 is attachedto it.
At step 6, (3 6) is added (with new top of stack 2),on the top of the previous link.
At step 7, (6 7) iscreated and joined to (4 5) (with top of stack 3) and notto (3 6) (because they have the node 6 in common).
(27) is joined to (3 6) (with top of stack 1).
At step 8, (38) is created and joined to (6 7) (with top of stack 2),but not to (2 7) because of anticolours (7 receives 913and 8 receives ~ and they have same colour).
(1 8) is notcreated because they have same colour.
At step 9, (2 9)is created and joined to (3 8), and (8 9) is created too,but joined to (6 7) and (2 7).
At step 10, (1 10) is joinedto (8 9), (3 10) is joined to (8 9) and (6 7), (9 10) to (38).
(7 10) is also joined to (8 9) and (3 8) because 7 is arightmost right extremity in paths leading to thesenodes.
In such a circumstance, the node previouslylinked to the released right extremity, here 2 or 6 ispushed onto the stack.
After that, (2 11) may be added to' (7  10) and (9 10) but not to (2 11) because ofanticolours.
And finally, (1 12) may be joinedto (2 11)and (11 12) to (1 10).
By looking at the list of nodesattached to links installed in the chart, we see that theselast moves lead to complete linkings.
By going down tothe bottom of the chart, we find the three solutions: \[1\[2 \[3 \[4 5\] 6\] 7\] \[8 9\] 10\]\[11 12\], \[1 \[2 \[3 \[4 5\] 6\] \[7 \[89\] 10\] 11\] 12\] and \[1 \[2 \[3 \[4 5\] \[6 7\] 8\] \[9 10\] 11\] 12\](cf fig 2).fig2: the final chart.
(1 12) (11 12) --./f (7 10) (3 10) (1.10) (9 10)~ ~  12 9)(4 515- Conc lus ionWe have presented a conception of parsing essentiallybased on a geometrical viewpoint.
It amounts to build acorrect linking of nodes in an ordered sequence of typesrepresented astrees.
Such a linking corresponds toanalternating spanning tree in a graph.
We have shownthat this method is sound and complete with respect tothe associative product free Lambek calculus and wehave given an idea of what an algorithm for finding sucha spanning tree could be.References\[Ajduckiewicz,1935\] K.Ajduckiewicz.
Die SyntaktischeKonnexitltt, Studia Philosophica 1, 1-27, engl.transl.
'Syntactic Connexion', in S. McCall(ed)(1967), 207-231.\[Busacker and Saaty, 1965\] R.Busacker and T.Saaty.Finite Graphs and Networks, An Introduction withApplications, McGraw-Hill, New-York.\[Hepple, 1992\] Mark Hepple.
Chart Parsing LambekGrammars: Modal extensions and lncrementality,Proceedings of COLING, Nantes, 23-28 july.\[K6nig, 1991\] Esther K6nig.
Parsing CategorialGrammar, DYANA, deliverable 2.1.2.C., reproducedin \[Lecomte, 1992a\].\[KOnig, 1992\] Esther KOnig.
Chart Parsing and theTreatment of Word Order by Hypothetical Reasoning,in \[Lecomte, 1992a\].\[Lecomte, 1992a\] Alain Lecomte (ed.
).Word Order inCategorial Grammar, ADOSA, Clermont-Ferrand.\[Lecomte, 1992b\] Alain Lecomte.
Proof-Nets andDependencies, Proceedings of COLING, Nantes, 23-28 july.\[Moortgat, 1992\] Michael Moortgat.
LabelledDeductive Systems for categorial theorem proving.Proceedings of the 8th Amsterdam Colloquium,Dekker & Stokhof (eds).\[Roorda, 1991\] Dirk Roorda.
Resource Logics: Proof-theoretical Investigations, PhD Thesis, Faculteit vanWiskunde n Informatica, Amsterdam.\[Roorda, 1992\] Dirk Roorda.
Proof Nets for LambekCalculus, Journal of Logic and Computation, 2(2):211-233.\[Wansing, 1990\] Heinrich Wansing.
Formulaes-as-types for a Hierarchy of Sublogics of IntuitionisticPropositional Logic.
Gruppe fur Logik,Wissentheorie und Information an der FreienUniversit/tt Berlin.276
