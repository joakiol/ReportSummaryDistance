I///l//l/////llLanguage Mode l  and  Sentence  St ructure  Man ipu la t ions  fo rNatura l  Language App l i ca t ion  SystemsZensh i ro  Kawasak i ,  Keiji Tak ida ,  and  Masato  Ta j imaDepar tment  of Intellectual Information SystemsToyama University3190 Gofuku, Toyama 930-0887, Japan{kawasaki ,  zak ida ,  and Zaj ima}@ecs.Zoyama-u.
ac.
jpAbst rac tThis paper presents a language model andits application to sentence structure manip-ulations for various natural language ap-plications including human-computer com-munications.
Building a working naturallanguage dialog systems requires the inte-gration of solutions to many of the impor-tant subproblems of natural anguage pro-cessing.
In order to materialize any of thesesubproblems, handling of natural anguageexpressions plays a central role; naturallanguage manipulation facilities axe indis-pensable for any natural anguage dialogsystems.
Concept Compound Manipula-tion Language (CCML) proposed in thispaper is intended to provide a practicalmeans to manipulate sentences by meansof formal uniform operations.1 In t roduct ionSentence structure manipulation facilities such astransformation, substitution, translation, etc., axeindispensable for developing and maintaining natu-ral language application systems in which languagestructure operation plays an essential role.
For thisreason structural manipulability is one of the mostimportant factors to be considered for designing asentence structure representation scheme, i.e., a lan-guage model.
The situation can be compared todatabase management systems; each system is basedon a specific data model, and a data manipulationsublanguage designed for the data model is providedto handle the data structure (Date, 1990).In Concept Coupling Model (CCM) proposed inthis paper, the primitive building block is a Con-cept Frame (CF), which is defined for each phrasalor sentential conceptual unit.
The sentence analysisis carried out as a CF  instantiation process, in whichseveral CFs axe combined to form a Concept Com-pound (CC), a nested relational structure in whichthe syntactic and semantic properties of the sen-tence are encoded.
The simplicity and uniformity ofthe CC representation format lead to a correspond-ing simplicity and uniformity in the CC structureoperation scheme, i.e., CC  Manipulation Language(CCML).Another advantage of the CCM formalism is thatit allows inferential facilities to provide flexible hu-man computer interactions for various natural lan-guage applications.
For this purpose conceptual re-lationships including synonymous and implicationalrelations established among CFs are employed.
Suchknowledge-based operations axe under developmentand will not be discussed in this paper.In Section 2 we present the basic components ofCCM,  i.e,, the concept frame and the concept com-pound.
Section 3 introduces the CC manipulationlanguage; the major features of each manipulationstatement are explained with illustrative xamples.Concluding observations axe drawn in Section 4.2 Concept  Coup l ing  Mode l2.1 Concept Compound and ConceptFrameIt is assumed that each linguistic expression suchas a sentence or a phrase is mapped onto an ab-stract data structure called a concept compound(CC) which encodes the syntactic and semantic in-formation corresponding to the linguistic expressionin question.
The CC is realized as an instance of adata structure called the concept frame (CF) whichis defined for each conceptual unit, such as an entity,a property, a relation, or a proposition, and servesas a template for permissible CC structures.
CFsaxe distinguished from one another by the syntacticand semantic properties of the concepts they repre-sent, and axe assigned unique identifiers.
CFs axeclassified according to their syntactic categories assentential, nominal, adjectival, and adverbial.
TheCCM lexicon is a set of CFs; each entry of the lex-icon defines a CF.
It should be noted that in thispaper inflectional information attached to each CFdefinition is left out for simplicity.Kawasaki, Takida and Tajima 281 Language Model and Sentence Structure ManipulationsZenshiro Kawasaki, Keiji Takida nd Masato Tajima (1998) Language Model and Sentence Structure Manipulations forNatural Language Applications Systems.
In D.M.W.
Powers (ed.)
NeMIazP3/CoNLL98 Workshop on Human ComputerConversation, ACL, pp 281-286.2.2 SyntaxIn this section we define the syntax of the formaldescription scheme for the CF and the CC, and ex-plain how it is interpreted.
A CF is comprised offour types of tokens.
The first is the concept identi-fier which is used to indicate the relation name of theCF structure.
The second token is the key-phrase,which establishes the links between the CF and theactual linguistic expressions.
The third is a list ofattribute values which characterize the syntactic andsemantic properties of the CF.
Control codes for theCCM processing system may also be included in thelist.
The last token is the concept pattern which isa syntactic template to be matched to linguistic ex-pressions.
The overall structure of the CF is definedas follows:(I) c (g ,  A, P),where C and K are the concept identifier and thekey-phrase respectively, A represents a list of at-tribute values of the concept, and P is the conceptpattern which is a sequence of several terms: vari-ables, constants, and the symbol * which representsthe key-phrase itself or one of its derivative xpres-sions.
The constant term is a word string.
The vari-able term is accompanied by a set of codes whichrepresent the syntactic and semantic properties im-posed on a CF to be substituted for it.
These codes,each of which is preceded by the symbol +, are classi-fied into three categories: (a) constraints, (b) roles,and (c) instruction codes to be used by the CCMprocessing system.
No reference is made to the se-quencing of these codes, i.e., the code names areuniquely defined in the whole CCM code system.The CF associated with the word break in thesense meant by John broke the box yesterday isshown in (2):(2) breakOl O('break', \[sent, dyn, base\],'$1(+nomphrs + hum + subj + agent) ?$2( +nomphrs + Chert + obj + patnt)').In this example the identifier and the key-phrase arebreakOlO and break respectively.
The attribute listindicates that the syntactic ategory of this CF issertt(ential) and the semantic feature is dyn(amic).The attribute base is a control code for the CCMprocessing system, which will not be discussed fur-ther in this paper.
The concept pattern of this CFcorresponds to a subcategorization fraxae of the verbbreak.
Besides the symbol ?
which represents thekey-phrase break or one of its derivatives, the pat-tern includes two variable terms ($1 and $2), whichare called the immediate constituents of the con-cept breakOlO.
The appended attributes to thesevariables impose conditions on the CFs substitutedfor them.
For example, the first variable should bematched to a CF which is a nom(inal-)phr(a)s(e)with the semantic feature hum(an), and the syntac-tic role subj(ect) and the semantic role agent are tobe assigned to the instance of this variable.The CC is an instantiated CF and is defined asshown in (3):(3) C(H,R,A,where the concept identifier C is used to indicatethe root node of the CC and represents he ,wholeCC structure (3), and H, R, and A are the head,role, and attribute slot respectively.
The head slotH is occupied by the identifier of the C's head, i.e.,C itself or the identifier of the C's component whichdetermines the essential properties of the C. Therole slot R, which is absent in the corresponding CFdefinition, is filled in by a list of syntactic and se-mantic role names which are to be assigned to Cin the concept coupling process described in Sec-tion 2.3.
The last slot represents he C's structure,an instance of the concept pattern P of the corre-sponding CF, and is occupied by the constituent list.The members of the list, X1,X2,..., and Xn, are theCCs corresponding to the immediate constituentsof C. The tail element M of the constituent list,which is absent in non-sentential CCs, has the formmd_(H,R,A, \[M1, ..., Mini), where M1,...,Mm rep-resent CCs which are associated with optional ad-verbial modifiers.By way of example, the concept st'~ruCture corre-sponding to the sentence in (4a) is shown in (4b),which is an instance of the CF in (2).
(4a) John broke the box yesterday.
(4b) break010(break010,0,\[sent, dyn, fntcls, past, agr3s\],\[johnO060(johnO060,\[subj, agent\],\[nomphr s,prop, hum, agr 3s, mascIn\] ,B),boxO0010(box00010,\[obj, patnt\],\[the_, encrt, nomphr s, agr3s\],0),md_(\[yeste010\],\[modyr\],\[advphr s,mo~,\[yeste010(yeste010,0,\[advphrs, timeAdv\],I) 3) 3).In (4b) three additional attributes, i.e., f(i)n(i)t(e-)cl(au)s(e), past, and agr(eement-)3(rd-person-)s(ingular), which are absent in the CF definition,enter the attribute list of break010.
Also note thatthe constituent list of break010 contains an optionalmodifier component with the identifier od_, whichdoes not have its counterpart in the correspondingCF definition given in (2).Kawasaki, Takida and Tajima 282 Language Model and Sentence Structure ManipulationsIIIIlIlIIIIlIIIIIIIIIIIIIIIIIIIIIil!1AI2.3 Concept CouplingAs sketched in the last section, each linguistic ex-pression such as a sentence or a phrase is mappedonto an instance of a CF.
For example, the sentence(4a) is mapped onto the CC given in (4b) which isan instance of the sentential CF defined in (2).
Inthis instantiation process, three other CFs given in(5) are identified and coupled with the CF in (2) togenerate the compound given in (4b).
(5a) johnOO60('john',\[nomphrs, prop, hum, agr3s, mascln\], I .
,).
(Sb) boxOOOlO('box', \[nomphrs, cncrt, base_n\], ' * ').
(5c) yesteOl O(l yesterday I, \[advphrs, timeAdv\], ' * i).All three CFs in (5) are primitive CFs, i.e., theirconcept patterns do not contain variable terms andtheir instances constitute ultimate constituents inthe CC structure.
For  example (Sb) defines a CFcorresponding to the word box.
The identifier andthe key-phrase are box00010 and box respectively.The attribute list indicates that the syntactic ate-gory, the semantic feature, and the control attributeare noro(inal-)phr(o)s(e), c(o)~c~(e)t(e), and base(-}n(oun} respectively.
The concept pattern consistsof the symbol *, for which box or boxes is to'be sub-stituted.In the current implementation of concept cou-pling, a Definite Clause Grammar (DCG) (Pereiraand Warren, 1980) rule generator has been devel-oped.
The generator converts the run-time dictio-nary entries, which are retrieved from the base dic-tionary as the relevant CFs for the input sentenceanalysis, to the corresponding DCG rules.
We shallnot, however, go into details here about the algo-rithm of this rule generation process.
The inputsentence is then analyzed using the generated DCGrules, and finally the source sentence structure is ob-tained as a CC, i.e., an instantiated CF.
In this waythe sentence analysis can be regarded as a process ofidentifying and combining the CFs which frame thesource sentence.3 Concept  CompoundMan ipu la t ionsThe significance of the CC representation format isit's simplicity and uniformity; the relational struc-ture has the fixed argument configuration, and ev-ery constituent of the structure has the same datastructure.
Sentence-to-CC conversion correspondsto sentence analysis, and the obtained CC encodessyntactic and semantic information of the sentence;the CC representation can be used as a model forsentence analysis.
Since CC, together with the rele-vant CFs, contains ufficient information to generatea syntactically and semantically equivalent sentenceto the original, the CC representation can also beemployed as a model for sentence generation.
Inthis way, the CC representation can be used as alanguage model for sentence analysis and generation.Kawasaki, Takida and TajimaAnother important feature of the CC representa-tion is that structural transformation relations caneasily be established between CCs with differentsyntactic and semantic properties in tense, voice,modality, and so forth.
Accordingly, if a conve-nient CC structure manipulation tool is available,sentence-to-sentence transformations can be realizedthrough CC-to-CC transformations.
The simplicityand uniformity of the CC data structure allows us todevise such a tool.
We call the tool Concept Com-pound Manipulation Language (CCML).Suppose a set of sentences are collected for a spe-cific natural language application such as second lan-guage learning or human computer communication.The sentences are first transformed into the corre-sponding CCs and stored in a CC-base, a file ofstored CCs.
The CC-base is then made to be avail-able to retrieval and update operations.The CCML operations are classified into three cat-egories: (a) Sentence-CC conversion operations, (b)CC internal structure operations, (c) CC-base oper-ations.
The sentence-CC conversion operations con-sists of two operators: the sentence-to-CC conver-sion which invokes the sentence analysis programand parses the input sentence to obtain the corre-sponding CC as the output, and the CC-to-sentenceconversion which generates a sentence correspondingto the indicated CC.
The CC internal structure oper-ations are concerned with operations uch as mod-ifying values in a specific slot of a CC, and trans-forming a CC to its derivative CC structures.
TheCC-base operations include such operations as cre-ating and destroying CC-bases, and retrieving andupdating entries in a CC-base.
The current imple-mentation of these facilities are realized in a Prologenvironment, in which these operations are providedas Prolog predicates.In the following sections, the operations men-tioned above are explained in terms of their effectson CCs and CC-bases, and are illustrated by meansof a series of examples.
All examples will be basedon a small collection of sample sentences shown in(7), which are assumed to be stored in a file namedsophie.text.
(7a) Sophie opened the big envelope apprehensively.
(To) Hilde began to describe her plan.
(7c) Sophie saw that the philosopher was right.
(7d) A thought had suddenly struck her.3.1 Sentence-CC ConversionsTwo operations, $get_cc and $get_sent, are providedto inter-convert sentences and CCs.$get_cc~ $get_sentThe conversion of a sentence to its CC can be re-alized by the operation $get_cc as a process of con-cept coupling described in Section 2.3.
The reverseprocess, i.e., CC-to-sentence conversion, is carriedout by the operation $get_sent, which invokes the283 Language Model and Sentence Structure Manipulationssentence generator to transform the CC to a corre-sponding linguistic expression.
The formats of theseoperations are:(8) Sget_cc( Sent, CC).
(9) $get_sent( CC, Sent).The arguments Sent and CC represent a sentenceor a list of sentences, and a CC or a list of CCs,respectively.
For the $get_cc operation, the inputsentence (list) occupies the Sent position and CCis a variable in which the resultant CC (list) is ob-tained.
For the $get_sent operation, the roles of thearguments are reversed, i.e., CC is taken up by aninput CC (list) and Sent an output sentence (list).Example:(10a) Get CC for the sentence Sophie opened the bigenvelope apprehensively.The query (10a) is translated into a CCML state-ment as:(10b) $get_cc('Sophie opened the big envelopeapprehensively', CC).Note that the input sentence must be enclosed in sin-gle quotes.
The CC of the input sentence isobtainedin the second argument CC, as shown in (10c):(10c) CC =openOOlO(openO010, D, \[sent, f ntels, past, agr 3s\] ,\[sophiOlO( sophiOlO, \[subj\],\[nomphrs, prop, hum, agr3s, femnn\], D),bigOOO20( envelO01, \[obj\],\[the_, det_modf ,adj_mod, cncrt,nomphrs, agr3s\],\[envelOO l ( envelO01, ~,\[cncrt, nomphrs, agr3s, f _n\], ~)\]),md_(\[ar e010\], \[modyr\], \[advphrs,\[app,'eO10(azo,'e010, D, \[ dvphrs\], U)\])\])-3.2 CC Internal  S t ructure  Operat ionsSince the CC is designed to represent an abstractsentence structure in a uniform format, well-definedattributive and structural correspondences can beestablished between CCs of syntactically and seman-tically related sentences.
Transformations betweenthese derivative xpressions can therefore be realizedby modifying relevant portions of the CC in ques-tion.For manipulating the CC's internal structure,CCML provides four basic operations ($add, Sdelete,Ssubstitute, Srestructure) and one comprehensive op-eration ($trans form ).$addThis operation is used to axid values to a slot.
Theformat is:(11) Sadd(CC, Slot, ValueList, CCNew).For the CC given in the first argument CC, the el-ements in ValueList are appended to the slot indi-cated by the second argument Slot to get the mod-ified CC in the last argument CCNew.Example:(12a) For the CC given in (10c), add the valueperf(e)ct o the slot attribute.
(12b) $add( C C , attribute, ~ver f ct\] , C C New ).In (12b) the first argument CC is occupied by theCC shown in (10c).
The last argument .CCNew isthen instantiated as the CC corresponding to thesentence Sophie had opened the envelope apprehen-sively.
Note that imperf(e)ct is a default attributevalue assumed in (10c).$deleteIn contrast o add, this operation removes the in-dicated values from the specified slot.
The formatis:(13) Sdelete( CC, Slot, ValueList, CCNew).$subst i tuteThis operation is used to replace a value in a slotwith another value.
The format is:(14) Ssubstitute( C C, Slot, OldV alue, N ewV alue,CCNew).Example:(15a) For the CC in (10c), replace the attribute valuepast by pres( e )nt.
(15b) $substitute( CC, attribute, past,presnt, C C New ).By this operation CCNew is instantiated as a CCcorresponding to the sentence Sophie opens the en-velope apprehensively.$restructureThis operation changes the listing order of imme-diate constituents, i.e., the component CCs in thestructure slot of the specified CC.
The format is:(16) Srestrueture( CC, Order, CC New),where the first argument CC represents he CC tobe restructured and the second argument Order de-fines the new ordering of the constituents.
The gen-eral format for this entry is:(17) \[Pl,P2,Ps, ..,pn\],where the integer p~ (i = 1, 2, ..., n) represents theold position for the pi-th constituent of the CC inquestion, and the current position of Pi in the list(17) indicates the new position for that constituent.For example, \[2,1\] means that the constituent CCsin the first and second positions in the old structureare to be swapped.
The remaining constituents arenot affected by this rearrangement.$transformThe above mentioned basic operations yield CCswhich do not necessarily correspond to actual (gram-matical) linguistic expressions.
The higher levelstructural transformation peration, $transform, isa comprehensive operation to change a CC into oneof its derivative CCs which directly correspond toactual linguistic expressions.
Tense, aspect, voice,sentence types (statement, question, etc), and nega-tion are among the currently implemented transfor-mation types.
The format is:(18) Strans form( C C, TransTypeList, C C New).The second argument TransTypeList defines thetarget transformation types which can be selectedfrom the following codes:Kawasaki, Takida and Tafima 284 Language Model and Sentence Structure Manipulationsmmmm!1mmIIIImmIImmmmIIIImmIIIIIIIIII!1IIIIIIIIIIIIIIIIIIVoice: act( i)v( e ), pas( si )v( e ).Negation: a f firm(a)t(i)v(e), neg(a)t(i)v(e).Tense: pres(e)nt, past,/ut(u)r(e).Perfective: per f ( e )ct, imper f ( e )ct.Progressive: cont(inuous), n(on-)cont(inuous).Sentence Type~ stat(e)m(e)nt, quest(io)n,dir(e)ct(i)v(e), excl(a)m(a)t(io)n.Note that the $transform operation does not re-quire explicit indication of the attribute type foreach transformation code in the above list.
Thisis possible because the code names are uniquely de-fined in the whole CCM code system.Examples:(19a) Get the interrogative form of the sentenceHilde began to describe her plan.The above query is expressed as a series of CCMLstatements:(19b) $get_cc(~Hilde began to describe her plan ~,CC),Stransf orm( CC, \[questn\], CCNew),Sget_sent( CC New, SentNew).The result is obtained in SentNew as:(19c) SentNew='Did Hilde begin to describe herplan?
'Note that the same values are substituted for like-named variables appearing in the same query in allof their occurrences, e.g., CC and CCNew in (19b).Another example of the use of $transfarm is givenin (20):(20a) Get the present perfect passive form of the sen-tence Sophie opened the big envelope apprehensively.
(20b) $get_cc(tSophie opened the big envelopeapprehensively ~, CC ) ,$trans form( C C, ~resnt, per f ct, pasv\],CCNew),$get_sent( CC New, SentNew ).
(20c) SentNew='The big envelope has been openedby Sophie apprehensively.
'3.3 CC-base Operations3.3.1 Storage operationsThe CC-base storage operations are: $create_ccb,Sactivate_ccb, Sdestroy_ccb, Ssave_ccb, and Sre-store_ccb.$create_ecbThe general format of $create_ccb is:(21) $create_ccb( SentenceFileName,CC BaseFileName).The file indicated by the first argument Sentence-FileName contains a set of sentences (one sentenceper line) to be converted to their CC structures.
The$create_ccb operation invokes the sentence analyzerto transform each sentence in the file into the cor-responding CC and store the results in the CC-baseindicated by CCBaseFileName (one CC per line).Example:(22a) Convert all sentences in the text filesophie.text shown in (7) into their CCs and storethe result in the CC-base named sophie.ccb.
(22b) $create_ccb(' sophie.text',' sophie.ccb').The first line of the file sophie.ccb is taken by the CCgiven in (10c) which corresponds tothe first sentencein the file sophie.text shown in (7).$activate_ccbThe format of $activate_ccb is:(23) $activate_ccb( CC BaseFileName).This operation copies the CC-base indicated byCCBaseFileName to the "current" CC-base whichcan be accessed by retrieval and update operationsexplained in the following sections.
If another CC-base file is subsequently "activated", CCs from thisnew CC-base file are simply appended to the currentCC-base.Example:(24a) Activate sophie.ccb.
(24b) $activate(' sophie.ccb').$destroy_ccbThere are two formats for $destro~_ccb:(25a) $destroy_ccb(CCBaseFileName).
(25b) $destroy_ccb.CCBaseFileName is taken up by the name of a CC-base file to be removed.
If current is substituted forCCBaseFileName in (25a) or the operation is usedin the (25b) format, the current CC-base is removed.$save_eebThe formats are:(26a) $save_ccb( C C BaseF ileN ame ).
(26b) $save_ccb.The $save_ccb operation is used to store the cur-rent CC-base into the file indicated by CCBaseFile-Name.
The current CC-base is destroyed by thisoperation.
If CCBaseFileName is current in (26a)or the operation is used in the (26b) format, the cur-rent CC-base is stored temporarily in the system'swork space.
Note that the Ssave_ccb operation dis-cards already existing CC-base in the work spacewhen it is executed.$restore_ccbThis operation takes no arguments.
The existingcurrent CC-base is destroyed and the saved CC-basein the work space is activated.
The format is:(27) $restore_ccb.3.3.2 Retrieval operationsRetrieval operations are applied to the currentCC-base.
Relevant CC-bases hould therefore be ac-tivated prior to issuing retrieval operations.$retrieve_ecThe $retrieve_cc operation searches the currentCC-base for CCs which satisfy the specified condi-tions.
Note that if a CC contains component CCswhich satisfy the imposed conditions, they are alsofetched by this operation; CCs within a CC are allsearched for..The general format of $retrieve_cc isas fallows:(28) $retrieve_cc( S electionaIC onditionList,Kawasaki, Takida and Tajima 285 Language Model and Sentence Structure ManipulationsRetrievedC List),where SelectionalConditionList is a list of con-stralnts imposed on CCs to be retrieved.
Each el-ement of the list consists of either of the followingterms:(29a) SlotName = ValueList.
(29b) RoleN ame : C ondition List.SlotName is occupied by a slot name of the CCstructure, i.e., identifier, head, role, attribute, orstructure.
ValueList is a list of values correspond-ing to the value category indicated by SlotName.The (29b) format is used when conditions are tobe imposed on the immediate constituent CC withthe role value indicated by RoleName.
The con-ditions are entered in ConditionList, which is alist of terms of the format (29a).
Each element ofSelectionalConditionList represents an obligatorycondition, i.e., all the conditions in the list should besatisfied simultaneously.
More general ogical con-nectives uch as negation and disjunction are notavailable in the current implementation.
The re-trieval result is obtained in the second argumentRetrievedCCList as a list.Examples:(30a) Get al finite subordinate clauses in the filesophie.text.
(30b) Sdestroy_ccb,$cr eate_ccb( t sophie.text',' sophie.ccb') ,$activate_ccb(' sophie.ccU ),$retrieve_cc(\[attribute = fntcls,attribute = sub_cls\], CCL ),$get_sent( CC L, SL ).
(30c) SL=\['That the philosopher was right.
'\].
(31a) Assuming that the current CC-base is the oneactivated in (30), get sentences/clauses whose sub-jects have the semantic feature hum(an).
(315) $retrieve_cc(\[subject : \[attribute = hum\]\],$get.sent( CC L, SentL ).
CC L ),(31c) Senti,=\['Sophie opened the big envelopeapprehensively.
','Hilde began to describe her plan.
"'To describe her plan.
','Sophie saw that the philosopher was right.
','That the philosopher was right.
'\].Note that all the embedded sentences are includedin the retrieved CC list.
Since the non-overt subjectof describe in the sentence (7b) is analyzed as Hildein the CC generation process, the infinitival clauseTo describe her plan is also retrieved.3.3.3 Update operat ionsCCML provides two update operations, i.e.,Sappend_cc and $delete_cc.
These operations areused to add or delete the specified CCs from theCC-base indicated.Sappend_ccThe formats axe:(32a) $append_cc( C C , C C B File ).
(325) $append.cc( C C ).The first argument CC indicates a CC or a list ofCCs to be appended to the CC-base specified inthe second argument CCBFile.
If the named CC-base is current or the operation is used in the for-mat (32b), the $append_cc operation makes the ap-pended CC(s) indicated in the first argument be di-rectly accessible by retrieval operations.Example:(33a) Append the CC for the sentence Sophie sawthat the philosopher was right to the current CC-base.
(335) Sget_cc( 'Sophie saw that the philosopherwas right', CC),Sappend_cc(CC).Sdelete_cc(34a) $delete_cc( C C , C C B File ).
(34b) $delete_cc( C C ).Removal of the indicated CC(s) from the currentCC-base is carried out by this operation.
The in-terpretation of the arguments and their uses are thesame as those of $append_cc.4 ConclusionsA sentence structure manipulation language CCMLbased on the language model CCM was proposed.In CCM each sentence is transformed into a CC,a nested relational structure in which the syntac-tic and semantic properties of the sentence are en-coded in a uniform data structure.
This uniformityin CC's data structure leads to a corresponding uni-formity in the CCML operations.
The CCML op-erations implemented so fax cover a wide range ofareas in sentence structure manipulations includingsentence-CC inter-conversion perations, CC inter-nal structure operations, and CC-base operations.The manipulation language CCML proposed in thispaper is expected to be used in various natural an-guage application systems uch as second-languagelearning systems and human computer communica-tion systems, in which sentence structure manipula-tion plays an essential role.Re ferencesC.
J.
Date.
1990.
An Introduction to DatabaseSystems, Volume 1, Fifth Edition.
Addison-Wesley Publishing Company, Inc., Reading, Mas-sachusetts.F.
Pereira and D. H. D. Warren.
1980.
Definiteclause grammars for language analysis - A sur-vey of the formalism and a comparison with aug-mented transition etworks.
Artificial Intelligence13:231-278.Kawasaki, Takida and Tafima 286 Language Model and Sentence Structure ManipulationsIBmIIm|mmmmm
