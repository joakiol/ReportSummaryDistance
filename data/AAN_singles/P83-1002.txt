FACTORING RECURSION AND DEPENDENCIES: AN ASPECT OF TREE ADJOINING GRAMMARS (TAG) ANDA COMPARISON OF SOME FORMAL PROPERTIES OF TAGS, GPSGS, PLGS, AND LPGS *Aravind K. JoshiDepartment of Computer and Information ScienceR.
268 Moore SchoolUniversity of PennsylvaniaPhiladelphia, PA 19104I.IWrRODUCTIONDur ing  the  las t  few years  there  i s  v igorousactivity In constructing highly constrainedgrammatical systems by eliminating thetransformational component either totally orpartially.
There is increasing recognition ofthe fac t  that  the ent i re  range  o f  dependenc iesthat  t rans format iona l  grammars  in  the i r  var iousincarnat ions  have t r ied  to  account  fo r  can besatisfactorily captured by classes of rules thatare non-transformational and at the same Clmehighly constrlaned in terms of the classes ofgrammars  and languages  that  they  de f ine .Two types  o f  dependencies are  espec ia l l yimportant: subcategorlzatlon and filler-gapdependenc ies .
Moreover , these  dependenc ies  canbe unbounded.
One o f  the  mot ivat ions  fo rtransformations was co account for unboundeddependencies.
The so-callednon-transformational grammars account for theunbounded dependencies in different ways.
In acree-adJoinlng grammar (TAG), which has beenintroduced earlier in (Joshi,1982),unhoundedness is achieved by factoring thedependencies and recursion in a novel and, webelleve, in a linguistically interesting manner.All dependencies are defined on a finite set ofbasic structures (trees) which are bounded.Unhoundedness is then a corollary of apar t i cu la r  composition operat ion  calledad~olnlng.
There are thus no unboundeddependencies in a sense.In this paper, we will ~irsC brieflydescribe TAG's, which have the fo l low ingImpor tant  properties: (l) we can represent theusual transformational relations more or lessdirectly in TAG's, (2) the power of TAG's ison ly  slightly more than that of context-freegrammars (CFG's) in what appears to be Just theright way, and (3) TAG's are powerful enough tocharacter i ze  dependenc ies  (e .g .
,subcategorlzatlon, as in verb subcategorlzatlon,and filler-gap dependencies, as in the case ofmoved constltutents in wh-questlons) which might*GPSG: Generalized phrase structure grammar,PLG: Phrase linking grammar, and LFG: Lex lca lfunctional grannnar.This work is partially supported by the NSFGrant MCS 81-07290.be a t  unbounded d is tance  and nested  or crossed .We will then compare some of the formalproperties of TAG's, GPSG*s,PLG's, and LFG*s, inparticular, concerning (I) the types oflanguages, reflecting different patterns ofdependencies that can or cannot be generated bythe  d i f fe rent  types  of grammars ,  (2)  the  degreeof free word ordering permitted by differentgrammars, and (3) parsing complexity of thedifferent gra--,-rs.2.TREE ADJOINING GRAMMAR(TAG)A t ree  ad jo in ing  grammar (TAG), G = ( I ,A )cons i s ts  o f  two f in i te  se ts  o f  e lementary  t rees .The trees in I will be called the initial treesand the trees in A, the auxil iary trees.
A tree{~ is an initial tree if the root node ofis labeled S and the frontier nodes are allterminal symbols (the interior nodes are allnon-termlnals).
A tree ~ is an auxil iary treeif the root node of ~ is labeled by anon-terminal, say, X, and the frontler nodes areall terminals except one which is also labeledX, the same label as that of the root.
The nodelabeled by X on the frontier will be called thefoot node of ~ .
The internal nodes arenon-terminals.~t.
~ermfmJ$ , ,hA l~As de f ined  above ,  the  in i t ia l  t rees  and theaux i l i a ry  t rees  a re  not  const ra ined  in anymanner  o ther  than  as ind icated  above .
The idea ,however ,  i s  that  both  the  in i t ia l  and theauxil iary trees will be minimal in some sense.An initial tree will correspond to a minimalsententlal tree (i.e., for example, withoutrecurslng on any non-terminal) and an auxiliarytree, with the root node and the foot nodelabeled X, will correspond to a minimalstructure that must be brought into theder ivat ion ,  i f  one recurses  on X.
* I wish to thank Bob Berwlck, Tim Finin, JeanGallier, Gerald Gazdar, Ron Kaplan, Tony Kroch,Bill Marsh, Milch Marcus, Ellen Prince, GeoffPullum, R. Shyamasundar, Bonnie Webber, ScottWeinstein, and Takashi Yokomori for theirvaluable commentsWe will now define a composition operationcalled adjoining (or adJunction) which composesan aux i l i a~ t ree  ~ with a t ree  ~ ?
~tt ree  w i th  a node labe led  X and le t  ~ ~ anaux i l i a ry  t ree  ~th  the  root  labe led  X a l so .~te  Chat ~ ~st  ~ve,by  def in i t ion ,  a node(and on ly  one) labe led  X on the frontier.~Jo ln lng can now ~ defined as follows.
IfIs ad jo in ing  to  ~ a t  the node n then theresulting tree ~ is as sho~ in Fig.l.se/FiG, :L.The tree t dominated by X in ~ isexc ised,  ~ i s  inser ted  a t  the  node n inand the  t ree  t i s  a t tached  to the  foot  node( labe led  X)  of ~ , i .
e .
,  ~ i s  inser ted  or' ad jo ined '  to the node n in ~ pushing tdownwards.
Note that adjoining is not asubst i tu t ion  operat ion  in  the  usua l  sense .Example 2.1: Let G - (I,A) be a TAG wherem+ b ~ r/~  / xbo- bt+i-- , (Z) +++: dbT x(~ So,, b <:x,, T bThe root  node and the  foot  node o f  eachaux i l i a ry  t ree  i s  c i rc led  fo r  conven ience .
Letus  took a t  some der ivat ions  in  G.~ wlll be adjoined to  ~/o a t  theindicated node in  ~ .
The resulting treeIs then ~b ~- r  o$(~ .T .
bbWe can continue the  derivation byad~olnlng, say /@@, at S as indicated ing?
.The resulting tree ~fX is then.
sL"?
P4 F ?
~ "\[ 4 ' ' z ' "@- bNote that ~o is an initial tree# asententiat tree.
The derived trees y i  and MRare  a l so  sentential trees,We will now defineT(G): The set of all trees derived in Gstarting from the initial Crees in I.
This setwill be called the tree setof G.LCG): The set of all terminal strings ofthe trees in  TCG).
This set will be called thestrln~ language(or language) of G.The relationship between TAG's CFG's andthe corresponding string languages can besummarized as follows (Joehl, Levy, andTakahashl, 1975).Theorem 2.1: For every CFG, G', there isan equivalent TAG, G, both weakly and strongly.Theorem 2.2: For every TAG, G, one of thefollowing statements holds:(a)there is a cfg, G', that is both weaklyand s t rong ly  equ iva lent  to G,(b ) there  is a c fg ,G ' ,  that  i s  weak lyequ iva lent  to G but not s t rong ly  equ iva lent  toG, Or(3) there is no cfg, G', that is weaklyequivalent to G.Parts (a) and (c) appear in (Joshl, Levy,and Takahashl, 1975).
Part (b) is implicit inthat paper, but it is important to state Itexplicitly as we have done here.
For the TAG,G, in Example 2.1, it can be shown that there isa CFG, G', such that G" Is both weakly andstrongly equivalent to O.
Examples 2.2 and 2.3below illustrate parts (b) and (c) respectively.Example 2.2: Let G - (I,A) be a TAG whereI:AeSo-'I"$-r~z"  I Ii", i~"T"Some derivations in G.te.
?~ : - ' / I/ O, "1" ~,,/ , iO.
"I"| "b$!ei O.
"3".,, .
t!e./ndi'u~ili aide ~i ?a~i3.
.
.
.$Clearly, L(G)=L= { a'~e be/ n ~/ 0}, whichIs a cfl.
Thus there must exist a CFG, G',which ts at  leas t  weakly equivalent to G. Itcan be shown however that there Is no CFG, G',which Is strongly ,equivalent to G,l.e.,T(G)=T(G').
This follows from the fact thatT(G), the tree set of G, i s"non- recogntzab\ ]e ' , i .e .
,  there  i s  no finites ta te  bottom to  top automaton that  can recogn izeprec ise ly  T (G) .
Thus a TAG may generate  a c f l ,yet assign structural descriptions to thestrings that cannot be assigned by any CFG.Example 2.3: Let C - (I,A) be a TAG where" \ [ :  o<d = SIeA;" ,  d3  O- "1-" /1~11~ b "I" cI t  can  be shown that  L(C) - L1 = { w e cn /n ~ 0} ,  w i s  a s t r ing  o f  a ' s  and b ' s  such  that(1 )  the  number o f  a ' s  = the number o f  b 's  and(2)  fo r  any in i t ia l  subst r lng  o f  w, the  numberof a's ~ the  number of b 's .
}Ll can be character i zed  as fo l lows .
Wes tar t  w i th  the  language L = ( (ba) "e  c~/  n ~ 0}.
L!
i s  then  obta ined  by tak ing  s t r ings  in  Land mov ing  (d ts locs t tng)  some a ' s  to  the  le f t .It can be shown that L!
is a strictlycontext-sensitlve language (csl), thus there canbe no CFG that is weakly equivalent to G.TAG's have more power than CFG's, however,the extra power is quite limited.
The languageLl has equal number of a's ,b's had c's;however, the a's and b 's  are mixed in a certainway.
The Language L2 ={a~b~e cn/ n O} issimilar to Li, except that all a's come beforeall b's.
TAG's are not powerful to generate L2.The so-called copy inguage L3 ~ {w e w /w 6{a,b} P} also cannot be generated by a TAG.The fact that TAG's cannot generate L2 andL3 is important, because it shows that TAG's areonly slightly more powerful than CFG's.
The wayTAG's acquire this power is linguisticallysignificant.
With some modifications of TAG'sor rather the operation of adjoinlnR, which Islinguistically motivated, it is possible togenerate L2 and L3, but only in some specialways.
(This modification consists of allowingfor the possibility for checking ieft-riRht treecontext ( In  terms of a proner analysis) as wellas top-bottom tree context (in terms ofdomination) around the node at which adiunctlonis made.
Thls is the notion of localconstraints in (Joshi and Levy,1981)).
Thus L2and L3 in some ways characterize the limitingcases of context-sensitlvlty that can beachieved by TAG's and TAG's with localconst ra in ts .In (JoshI,Levy, and Takahashi,1975) it isalso shown thatCFL's  C TAL 's  C I L ' s  ~ CSL 's .where I L ' s  denotes  indexed  languages .3.
We will now consider TAG's with links.The elementary trees (initial and auxlliar-~ "-=-trees) are  the appropr ia te  domains forcharacter i z ing  cer ta in  dependenc ies .
The domainof  the dependency i s  de f ined  by the e lementaryt ree  itself.
However, the dependency can becharaeCer l zed  explicit ly by introducing aspec ia l  re la t ionsh ip  between cer ta in  specL f ledpa i rs  of  nodes of  an e lementary  t ree .
Th isrelationship is pictorially exhibited by an arc(a dotted line) from one node to the oti,er.
Forexample,  in the t ree  below, the nodes labe led  Band q are l inked ,A~-  cI-, ,, l'-c ~:  F G' I ~ /~"~ ~ .
-  -~  ~=.We will require the following conditions tohold for a llnk In an elementary tree.
If anode n\[ is tlnked to a node n2 then (1) n2c-commands nl and (2) nl dominates a null s t r ing(or  a temi .a l  symbol in  the non- l ingu is t i cformal  grammar examples ) .The notion of a link introduced here isclosely related to that of Peters and Rltchie(1982).A TAG with links is a TAG where some of theelementary trees ~y  have links as definedabove.
Henceforth, we may often refer to a TAGwith links as just a TAG.
Links are defined onthe e lementary  t rees .
However, the impor tantidea is that the composition operation ofadjoining will preserve the links.
Linksdefined on the elementary trees may becomestretched as the derivation proceeds.\[n a TAG the dependencies are defined onthe elementary trees(which are bounded) andthese dependencies are then preserved by thead~olnlng(recurslve) operation.
This is howrectlrsion and dependencies are factored in aTAG.
This is in contrast to transformationalgrammars (TC) where recursion is defined in thebase and the transformations essentially carryout the checking of the dependencies.
The PiG'sand LFG's share this aspect'of TG,i.e.,tee.talon builds up a set of structures, some ofwhich are filtered out by transfotn~atlons in aTG, by the const ra in ts  on l i nk ing  in  a PiG, andby the constraints i n t roduced  via functionalstructures in LFG.
In a GPSG on the other hand,recurslon and the checking of the dependenciesgo hand in hand in a sense.
In a TAG,dependencies are defined initially on boundedstructures and recurslon simply preserves chem.In the APPENDIX we have given some examplesto show how certain sentences could be deirvedin a TAG.Example 2.4: Let G = (I,A) be a TAG withlinks whereIe,IXi'-,bI S // Io.." Sl--r:Some derivations in  G:!e..'I t "" .
, , i - , .
B .
?
OL_'- "%= ?
f " i/ t',.L.
',.5%,,/ = o,.
o,.
e. b b?
s O-'; I" ~,' i.
'"l.- Io ' o1e.,w- -  o, e bi..,....,.IY~" S/i/O.
", .%/ i , \ ' .,-.:,_."I=.
.
.
.
.
.""
- .L":-'~Sc,,*" I ' "l"s-'-.1.~ b5Ie .%J : ct~s~e-4l0~?
andes  each have one l ink .
~%and ~63show how the l ink ing  is preserved inad jo in ing .
In ~ one of  the l inks  iss t re tched.
I t  should be c lear  now, how, ingeneral ,  the l inks  w i l l  be preserved dur ing theder ivat ion .
We note in th i s  example that in ~?the dependencies between the a 's  and the b 's  asre f lec ted  tn the terminal  s t r ing  are proper lynested, whi le in ~ two of them are proper lynested, and the third one is cross-serlal and iti s  crossed wi th  respect Co the nested ones.
Thetwo elementary trees /~  and Ps have only onel ink  each.
The nesttngs and crossings in  ~and ~3 are the resu l t  of ad jo in ing .
There aretwo points Co note here: (I) TAG's with linkscan character i ze  cer ta in  c ross -ser ia ldependenc ies  as  we l l  as ,  o f  course ,  nes teddependenc ies .
(2 )  The c ross -ser ia l  dependenc iesas  we l l  as  the  nested  dependenc ies  a r i se  as  aresu l t  o f  ad jo in ing .
But th i s  i s  not  the  on lyway they  can ar i se .
I t  i s  poss ib le  to  have  twol inks  in  an  e lementary  t ree  wh ich  representc rossed  or  nes ted  dependenc ies ,  wh ich  w i l l  thenbe preserved  dur ing  the  der ivat ion .I t  i s  c lear  from Example 2 .4  that  thestring language of TAG with links is notaffected by the links.
Thus if G is a TAG withlinks.
Then L(G)-L(G') where G" is a TAG whichi s  obta ined  from G by remov ing  a l l  the  l inks  inthe  e lementary  t rees  o f  G. The l inks  do nota f fec t  the  weak generat ive  capac i ty .
However,they  make cer ta in  aspects  o f  the  s t ruc tura ldescription exp l i c i t ,  which is imp l i c i t  in theTAG without the l i nks .TAG's (or TAL's) also have the followingth ree  impor~ant  p roper t ies :( l )  L imi ted  c ross -ser ia l  dependenc ies :Although TAG's permit c ross -ser ia l  dependencies,these  are  res t r i c ted .
The res t r i c t ion  i s  thati f  there  a re  two sets  o f  c ross ing  dependenc ies ,then they must be e i ther  d i s jo in t  or one of  themmust be proper ly  nested ins ide the other .Hence, languages such as the double copylanguage, L4 - {w e w e w / w ~ {a,b} ~} or L5 ={anb "@dne~/  n ~ \[} cannot be generated byTAG's.
For deta i l s ,  see (Joshi,1983).(2)Constant.
~rowth property: In a TAG,G,ateach step of  the der ivat ion ,  we have asententlal tree with the terminal string whichis a string in L(G).
As we adjoin an auxiliaryt ree,  we augment the length of the terminals t r ing  by the length of the terminal  s t r ing  of(not counting the s ing le  non-terminal  symbolin the frontier of ~ ).Thus for any string, w,of L(G), we havewhere wgls the terminal string of someinitial tree and wg,l ~ i~  m, the terminalstring of the \[-th auxiliary tree, assumingthere are m auxil iary trees.
Thus w is a linearcombination of the length of the terminal stringo~ some Inltial tree and the lengths of theterminal strings of the auxiliary trees.
Th~constant growth property severely restricts theclass of languages generated by TAG's.Hence,languages such as L6 = { a ~" / n ~ l} orL8 ~{a n% /n ~ \[} cannot be generated by TAG's.
(3)Polynomial  parstn~:TAL's can be parsedin time O(n~ ) ( Josh i  and Yokomori, 1983).Whether or not an O(n5 ) a lgor i thm ex is ts  forTAL's is not known at  present.3.
A COMPARISION OF GPSG's,TAG's,PFG's,andLFG's WITH RESPECT TO SOME OF THEIR FORMALPROPERTIESTABLE I lists (i) a set of languagesreflecting different patterns of dependenciesChat can or cannot be generated by the d i f fe renttypes of grammars, and (li) the three propertiesJust mentioned ahove.As regards the degree of free word orderpermitted by each grammar, the languages1,2,3,4,5, and 6 In TABLE I give some idea ofthe degree of freedom.
The language in 3 inTABLE I is the extreme case where the a's,b's,and c's can he any order, as long as thenumber of a's =the number of b's=the number ofc 'S.
GPSG~and TAG's cannot generate th islanguage (although for TAG's a proof is not inhand yet), LFG's can generate this language.In a TAG for each elementary t ree ,  we canadd mare elementary t rees,  sys temat ica l l ygenerated from the given tree to provideadd i t iona l  freedom of word order ( tn  a somewhatsimllar fashion as in (Pullum,1982)).
Since theadjoining operation in a TAG gives someadditional power to a TAG beyond chat of a CFG,th i s  device of augmenting the set of elementarytrees should give more freedom, for example, bya l low ing  some l im i ted  scrambling of an itemouts ide of the const i tuent  i t  belongs co. Eventhen a TAG does not seem co be capable ofgeneratlng the language in 3 in TABLE I. Thusthere is extra freedom but it is quite limited.lwl .
,  i'~.l~" al.lw~i+ %~w~l+ ---.a,.lw.liITABLE IGPSG TAG(and CFG) (with orwithout localconst ra in ts )PLC LFGno yes yes  yesto Language obca lned  bys tar t ing  withL={(ba)n~n/n  ~ 1} andthen  d i s locat ing  some a ' sto  the  le f t .2o Same as  I above exceptthat  the  d i s located  a ' s  a reto  the  le f t  o f  a l l  b ' s .
.3.
L={w / w is string ofequal number of a's,b's and noc ' s  but  mixed in  any order}4?
L={x ~y/  n~l ,  x ,y  a res t r ings  o f  a ' s  and b*s  such  thatthe  number o f  a ' s in  x and y =the number of b's in x and y- n}5.
Same as  above except that  thel ength  of x = length  of  y.6.
L={w ~/  n~ t ,  w is string ofa ' s  and b 's  and the number o f  a ' sin w = the number of b 's  in  w - n}7.
L={a ~b"  c" I n~ l )8.
L f{a  n b ~ c n d" /n~t}9.
L={a~b ~ ~ d" ~ e/n  7 1}IO.
L= {w w/ w i s  s t r ingof a's and b 's}(copy  language)11.
L=(w w wl w is string ofa 's  and b's}(double copy language)12.
L=ia ~ c TM b ~ d m /m ~ l,n ~ 1}13.
L={a ~ ~ c W /n ~1, p ~ n)14.
L-{a ~ In~ It15.
L -{a  nz /n~ 1}16.
L imi ted  c ross -ser ia ldependenc ies .17.
Constant  growth property18.
Po lynomia l  pars ingno yes  yes  yesyes  no(?
)no no yesno yes  no(?
)no yes  yes (  ?
)no yes nono yes nono no nono yes  yes (?
)no no ?no no no ( ?
)no yes  ?no no no ( ?
)no no no( ?
)no yes  ?yes  yes  yes (  ?
)yes  yes  ?yesyesyes (?
)yes (?
)yesyesyesyesyes?yes<?)yesyesno(?
)nono(?
)Notat ion :  ?
: answer  unknown to the  author ,  yes (? )
:  con jec tured  yesno(? )
:  con jec tured  no.12REFERENCES\ [ \ [ \ ]  Gazdar,G.,"Phrase structure grammars"in The Nature of Syntactic Representations(eds.P.
Jacobson and G.K. Pullum),D. Reidel,Dordrecht, (to appear).\[2\] Joshi, A.K.
and Levy, L.S.,"Phrasestructure trees bear more fruit than you wouldhave thought", AJCL, 1982.\[3\] Joshl, A.K., Levy, L.S., and Takahashi,M.,"Tree adjunct grammars", Journal of theComputer and System Sciences,1975.\[4\] J osht ,  A.K.,"How muchcontext -sens i t iv i ty  Is requ i red  to  prov ideadequate  structural descrlpclons ?
", in Naturallanguage processing: Psycholln~ulstic, - -Theoretical, and Computational Perseptives,(edso Dowry, O., Karttunen, L., and Zwicky,A.
), Cambridge University Press, (to appear).\[5\] Joshl, A.K.
and Yokomorl, T.,"Parsln8of tree adjoining grammars", Tech.
Rep.Department of Computer and Information Science,University of Pennsylvanla,1983.\[6\] Joshl, A.K.
and Kroch, T., "Linguisticslgniflcance of TAG's" (tentative title),for thcoml ng.\[7\] Kaplan R. and Bresnan J.W., "Lexlcalfunct iona l  grammar-s formal system forgrammat ica l  representat ion" ,  in The MentalRepresentation of Grammatical Relatlons~ed.Bresnan,  J.
), MIT Press ,  1983.\[8\] Peters ,  S. and R i tchte ,  R.W., "Phrasel ink ing  grammars" ,Tech.
Rep. Un ivers i ty  ofTexas at Austin, Department of Linguistics,1982.\ [9\]  Pullum, G.K.,"Free word order andphrase  structure rules", in Proceed ing  of NELS\[_~2(eds.
Puste .
|ovsky,  J .
and Sells, P . )
,Amherst,  MA, 1982.APPENDIXWe will give here some examples to show howcertain sentences could be derived in a TAG.For further details about thls TAG and itslinguistic relevance, see (Joshi,1983 and Joshland Kroch, forthcoming).
Only the releva- ~trees of the TAG, G-(I,A) are shown below.
Thefollowing points are worth noting: (1)In a TAGthe derivation starts with an initial tree.
Theappropriate lexlcal insertions are made for theInltlal tree and the corresponding constraintsas specified by the lexicon can be checked(e .g .
,  agreement and subcacegor i zac ion) .
Thenas the der ivat ion  proceeds ,  as each aux i l i a ryt ree  is  brought  in to  the der ivat ion ,  theappropr ia te  lex ica l  i tems are  inser ted  and theconstraints checked.
Thus in a TAG, lexicalinsertion goes hand in hand with the derivation.
(2) Each one of the two finite sets, I and A canbe qu i te  la rge ,  but  these sets  need not  beexpllcltely listed.
The crees in \[ roughlycorrespond to all the "minimal' sentencescorresponding to different subcategorlzationframes together with the "transforms" of thesesentences.
We could , of course, provide rulesfor obtaining the trees in I from a given subsetof I.
These rules achieve the effect ofconventional transformational rules, however,these rules can be formulated not as the usualtransformational rules but directly as treerewriting rules, since both the domains and theco-domains of the rules are finite.Introduction of links can ~,~ considered as apart of this rewriting.
In any case, theserules will be abbreviatory in the sense Chatthey will generate only finite sets of trees.Their adoption will be only a matter ofconvenience and does not affect the TAG in anyessential ~nner .
The set of auxiliary trees isalso finite.
Again these trees could themselvesbe "derived" from the corresponding trees in Iby i n t roduc ing  appropr ia te  tree rewrltlng rules.Again these rules will be abbrevlacory only asdiscussed above.
It is in this sense that thetrees in I and A capture the usualtransformational relations more or lessdirectly.Some der ivat ions :( l )The  g i r l  who met 8ill i s  a sen ior .We s tar t  w i th  the in l t ta l  t ree  ~ w i th  theappropr ia te  tex lca l  inser t ions .S ~--z..--~/P VP~r e~ v ~PI I ;~ /~-'tk e. ~;~ Io..NISe..n ,'~ ?13Adjoining 8t  (with the appropriate lexicalinsertions) to~ at the indicated node in ~ ,ve obtain ~I ./ " \  Z.~ ', / \e V NP ) kip v~' % ~i ~ i 1 / \  , ,  INt"I I i V Ivp'.l t l l l  ) I I !
4i--Z._l lk l  mee I,' i l  ~ i~llii..-'?
"rl,,t ~i~i i i k , I  mlit I ; l l  {i  0, i l~ i l r(2)John persuaded Bill to invite Hary.N9 ,~p| / .~ ,tim "To vl ?V xPI Iinv;te IAd~otnin~ /~ ro ~".1 at  the tndit'~ated nodein  ~.lr, ~ ohta in  Y i "~JP '4pI / \~#t,i;,,'11~ii,~'ll ~e l  l i t i e i L  l l ' l lt I / t ~ _  \]/ I , " /~_'~ ~'o~'" I ~.
;  I I \% / "' t I -'Iril ,~i ~i) f ro.
.
.
.  "
V ~PI I ~,i~ l ' t t  i(3)Nho did John persuade Bill to invite ?~l  ~ o{ I i  -.. 344  \ .S  "/ ' 'x' ' '~v I / \~, ~a To V?V ,'SAP"~, I ".
I?
"% i' l ' l l l ' f l  ~"Ad~ointng ~J  to  ~C% at the ind icated  nodein IC~L, we obta in  y~.
.
?3o NP ~?/ ~ ~I v NPra' t "" ~'a k,, ldp~v.fu., l l  ;r~?tl.S" "  , /{~ - A P/,ili~ lle' .,i?
, ,  a /~- -~ '~- -  :I- ~ ~ V ~P, '~ peY~.,~.
\[ ', mo v , ' h@"- GIll ) .
.
, I ", I14Note the l i nk  In  ~ i s  ' p reserved '  i n~ ,i t  i s  " s t re tched '  resu l t in  8 in  the  so -ca l ledunbounded dependency.
(&)John tried to please Mary.i ",._-NP vpl /~-~o 1-o ,,/P'V NPOn the other hand(5 ) john  seems to  l i ke  Mary.
cou ld  bederived as follows.
We will start with ~#~./~.
S z"-z --~"~P V?-r~ v f/ \:T~,  4 UP\[ iIAdJ?
inin8 J7  ~o ~ at the ind icated  nodein Y~ we obta in  ~l"~'r =,~4I t/t Hr" vP 'l I / '~  '\ -t.i~'~ j~i'~ f~ "~?
~ .
.
?-to VP~e i \V NPAdJo in in~ ~Mto  Y~.
a t  the  ind icated  nodein  ~'*t , we obta in  ~*~.ISI o /~ .
.
!m V YPI "i i !
/~wPIr~A~JaQm~ - to  l (ka /,4 o P.~15
