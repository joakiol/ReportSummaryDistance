CONCURRENT LEXICALIZED DEPENDENCY PARSING:A BEHAVIORAL VIEW ON ParseTalk EVENTSSusanne Schacht, Udo tlahn & Norbert Br6kerCL I \ ] -  Computational Linguistics Research GroupFreiburg UniversityD-79085 I:reiburg, Germanyemail: {sue, hahn, nobi }@coling.uni-freiburg.dcAbstract.
The behavioral specification of an obj~t-ori-cnted grammar model is considered.
The model is basedon full lexicalization, hcad-oricntation via valency con-straints and dependency relations, inhcritancc as a meansfor non-redundant lexicon specification, and conct, rrcncyof computation.
The compntation model relies upon theactor l)aradigm, with concurrency entering throt~gh asyn-~:hronous message passing between actors.
In pa,ticular,we here elaborate on principlcs of how the global lyzhaviorof a lexically distributexl grammar and its correspondingparser can be specified in terms of evcnt ype networks andcvent networks, resp.1 INTRODUCTIONIn this paper, we propose a grammar model that combineslexical organization of grammatical knowledge with lexi-calized control of the corresponding parser in a coherentobject-oriented specification framework.
We build uponrecent developments in the lield of linguistic grammar the-ory which have already iekled a rigid lexical mod,lariza-tion, but extend thcm by assigning full procedural auton-omy to lexical units.
In particular, we treat lexic,'ll items asactive lexieal processes commtnticating with each other bymessage passing.
Titus, they dynamically establish etero-geneous communication lines in order to dctcnninc eachlexical item's fimctional role.
While the issue of lexieali-ze(I control has early becn invcstigatcd in the l)aradigm ofconceptual parsers (e.g., Riesbcck & Schank 1978), andword expell parsing in particular (Small & Ricger, 1982),we here elaborate on improving ils lcxical commtmicationfacilities by formalizing the parscr's message passing pro-tocol according to actor computation principles.
As thisprotocol allows for asynchronous message passing, con-currency enters as a theoretical notion at the level of grant-mar specification, ot only as an implcmentational fcatttrc.Correspondingly, we introduce a behavioral description interms of event ype networks which rcpresent grammaticalinterrelations at the level of actor definitions, while eventnetworks represent the I)arsing process in terms of actualmessages exchanged between instantiated actors.
The Par-seTalk model outlined in this paper can thereft)re be con-sidcred as an attempt o rcmedy the lack of theoreticalintegration of parallelism at the level of grammar design.2 ParseTalk's GRAMMAR MODELThe ParseThlk grammar mcxlel (of.
Br6kcr, Hahn &Schacht (1994) for a more comprehensive treatment) con-siders dependency relations between words as the funda-meatal notion of lingnistic analysis.
This corresponds tothe head-orientation found in most modern grammar theo-ries.
Grammatical spccilications are given in the format ofvalency constraints attached to each lexical unit, on whichlhe comptttalion of concrete dependency relations isbased.
A modilicr is said to depend on its head if the mod-ifier satisfies the constraints placed on it.
These constraintsincorl?
)rate iulormation about the hierarchy of wordclasses (encapsulating declarative and behavioral proper-ties of lexical items), nmrphosyntax (containing Ihe gram-malical conditions of the combination of lcxical items tol)hrascs as expressed by a unification \[ormalism, similar toShieber, 1986), linear ordering (stating precedence rela-tions between ahead and its modiliers), and permitted con-ceptnal roles (expressed in terms of a hybrid, classilica-tion-based knowledge represenlation formalism; cf.
Mac-Gregor, 1991).
Dependencies are thus asymmelric binaryrelations that can be established by local computationsinvolving only two lexical items 1 and simnllaneonsly akegrammatical s well as conceptual well-formedness crite-ria into account.P,y way of inheritance (for a rcccnt survey of apl)lyinginheritance mechanisms in modern gramlnar theory, of.l)aclemans, I)e Sine(It & Gazdar, 1992) the cnlirc collec-tion of lexical items is nrganizc(l in a lexieal hierarchy, thelexical items forming its leaves and the intermediary nodesrepresenting grammatical generalizations in terms of wordclasses.
This form of specification is similar to variottsproposals currently investigated within the unificationgrammar connnunity (e.g., Evans & Gazdar, 1990).t We exlend this definition to incoqxmLtc the notion of phrases as well.Ahhough phrases are not explicitly represenled (c,g., by non-lexicalcategories), we consider each complete suhtrce of Ihe delx~ndency treea phrase (Ihis definition allows discontinuous phrases as well).
Adependency is thus not trealed a~: a relation between words (as in WordGrammar (lludson, 199(\], p.1171, but between a word and a dependentphrase (as in l)epcndency Unification (\]rammar (llellwig, 1988)).
Theroot of a phrase is taken to be the rel~resent:ttlve of tim whole phrase,4893 ParseTalk 's  COMPUTATION MODELAlthough the object-oriented pm-adigm seems to bc wellsuitexl to support he distribution of data through encapsu-lation and the distribution of control via message passing,most object-based calculi rely on synchronous messagesand dmrcfore do not provide for concurrency.
One of thefew exceptions that aim at the methodologically cleancombination of object-oriented features with concurrencyand distribution is the actor model of computation (Agha& Hewitt, 1987).
It assumes a collection of independentobjects, the actors, communicating via asynchronous,point-to-point message passing.
All messages art guaran-teed to be delivered and processed, but in an unpredictableorder and indeterminate ime.
Each actor has an identity(its mail address), a state (consisting of the addresses of itsacquaintances, i.e., the set of other actors it may send mes-sages to) and a behavior (i.e., its reaction to incoming mes-sages).
Tile arrival of it message at an actor is called anevent; it triggers an action described by the correspondingmethod definition, a composition of the following atomicactions: creating a new actor (create actorType (acquain-tances)); sending a message to an acqtminted or a newlycreated actor (send actor message); or specifying newacquaintances for itself (become (acquaintances)).
Anactor system is dynamic, since new actors can be createdand the communication topology is reconfignrable in thecourse of actor computations.The actor model does not contain synchronizationprimitives, but we assume one-at-a-time s rialized actorsfor our specification, i.e., actors that cannot process morethan out message at a time and that process each messagestep by step (cf.
Hcwitt & Atkinson (1979) for expressingthis convention in terms of patterns of simple actors).
Thedistribution of comlmtation among the collection of actorsis dins dm only source of parallelism.
Furthermore, in or-der to compute complex, but well understo~x\[ and locallydetermined linguistic conditions and functions, such asunification of feature structures iuld queries ent to a (con-ceptual) knowledge base, we esud)Iish a synchronous re-quest-reply protocol (of.
Licberman, 1987).The ParseTalk model extends Ihe formal foundalkmsof the basic actor model according to the requirements setup by tilt natural anguage processing application.
Theseextensions are expressible by the primitives of the basicmodel.
We distinguish between word actors, relationsbetween word actors and a special set of messages wordactors exchange.?
Word Actors: The grammatical knowledge associatedwith each lexieal item is represented in a word actordefinition.
Upon instantiation of a specific word actor,d~e acquaintances specilied in the definition will be ini-tialized with actors which stand for the lexical item'smorphosyntactic features, its conceptu,'d representation,valency constraints and, after instantiation and subse-quent parsing events, governed lexical items and furthergrammatical relations (e.g., adjacency, textual rela-tions).?
Word actor relations: Acquainumces of word actorsare tagged according to linguistic criteria in order toserve as navigation aids in linguistic structures (themessage distribution mechanism described below).
Tex-tual relations, e.g., are distinguished from linear adja-cency and hierarchical dependency relations.
Taggingimposes a kind of typing onto acquaintances that ismissing in odmr actor systems.?
Word actor messages: In contrast o simple messageswhich unconditionally trigger the execution of the cor-responding method at the receiving actor, we definecomplex word actor messages as full-lledgcd actorswith independent computational capabilities.
Departureand arrival of complex messages are actions which areperformed by the message itself, laking the sender andthe target actors as parameters.
Upon arrival, '~ complexmessage determines whether a copy is forwarded to se-lected acquaintances of its receiver and whether the re-ceiver may process the message on its own.
Hence, weredefine an arrival event to be an uninterruptable s -quence of a computation event and distribution events.The computation event corresponds to an re'rival of asimple message at the receiving word actor, i.e.
an eventin the basic model; it consists of the execution of an ac-tor's lee(hod that may change the actor's tate and trig-ger additional messages.
The distribution events pro-vide for the lorwarding of the message and are realizedby cre,qtiug new complex mess.ages.
They depend on the(unchanged) state of the receiving actor or on the resultof the computation event and take place before and afterthe computaliou event.
This extension accounts for thecomplexity of interactions I)ctween word actors.We define tl~c semantics of an actor program in terms oftwo kinds of networks.
First, we consider event typeswhich refer to message keys and can easily be determinedfrom ,'1 given actor program.
Next, we turn to actual eventsthat involve instantiated actors.
Both, event types andevents, arc partially ordered by the transitive closures ofrelations alll()ng them, causes t and causes, resp., that giverise to event type networks and event networks.A program (in our apl)lication: a lexical grammar) isgiven by a set of actor d@nitions.
The definition charac-lerizcs the type ()1" an actor.
Given a program, event types,written as I* <- key\], can be syntactically deterlnined byinspecting the method delinitions wilhin the program.
Letan actor type aName I)e defined by:.
?kelg?J.~ aName (acquaintance 1 ... acquaintancek)meth key 1 (param 1 ... paramrn ) (action1).
.
.meth key n (param 1 ... paraml) (actionn)with action i delincd by the following grammar fragment:action ::= action; action\] if condition (action) \[ ~ (action) \]I .keJ3?L actor messageKey ( param* )\] becom_____~e ( acquaintance* )Wc may now map message keys to sets of message keys,defining the function sctipt~,r~zm e as follows:490scriptaNa,ne : Keys -4 2 7(?~.scriptaA(ome (keYi) = send(action!)
withsent{(action) :={msgKey } if action = send actor msgKoy (param, ...)setu{(al) u sertd{a2) if action = \[\[ condition a I else a 2sent{(al) if action = if condition a 1sentf((at) u senaC(a2) if action = a l ;  a2elseFor a program P, script is the union of all given script,m,, ewith name e { aroma I P contains a delinition for aNamo }and yields a set containing the keys of those messages thatcan be provoked by a ,nessage with the key mKey.
Now, arelation between event types is delined hy causes!
:(\[* ?= mKey\], \[* ?=- nKey\])  < cat tses  t:<=> nKey ~ scrit)t(mKey ).Turning to actual events now, we define an actor a/as beingcomposed of an identity n (taken from lhe set of naturalnumbers, N), a state e Sand a behavior e 9{.
l lence, .9/,the set of actors, is a subset of N x S x O~.,5 = 2 { (y: z,) ly is an identifier, z e A\ ] ,  an  element of`5 asso-ciates acqna in tance  names  and va lues ,  wh ich  are  actors .Since actors change their acquaintances, their state is validin lime, i.e.
lit a par t i cn la r  event .
The  state  o f  an ac tor  a.receiving a message m will be written as S?l a <= ml' Slatechanges caused by the message apply at the end of theevent \[a <=- m\] (by executing a become action).q# is a set of fnnetions, delhted as folk>ws: The states<, e of an lictor ,X'flt tile event e (the reception of a mc.ssagem) is determined by iL,; initial state given after its creationevent, arid the repeated application of its state transitionfunction, transit~c, which maps pairs of stales (s c S) andmessages (m ~ 9?1 c .90 to new slates:tra,sitx: (`5 x 9t4} -> ,5The sand actions an actor ,1" perlk)rms at a partictflar eventare expressed as pairs of target actors and messages to besent; the target actors are either ,'lcqnainlances o\[" the send-ing actor or supplied as message parluneters.
They are de-termined by the functiontask~ (,5 x Ov 6 -> 2 (m('q) ?
~6where ~l(N) denotes the projection onto the first compo-!tent of N, viz.
N.The behavior of an actor A'can then be stated by thefunction be~ar;e~Ce q~ that comhines transit,@nd tas~.,,f.inthat it maps pairs of suites and messages to pairs consistingof the new slate of the actor and a set of pairs of targetactor identities and ,nessages, viz.,bebave~: (S x 9v~ -> ( S x 2 (Tq(& x 94)).Abstracting from a local actor perspective the behaviorof an entire actor system (in our applicatkm: lhe lexicalparser composed of a collection of word actors) is deter-mined by the way multiple events are related under Ihecauses relation (though events are written as \[actor <=,nessagel, the message key is used as an abbreviation forthe messages in Section 5):( \ [a~ nil, \[,6<=- hi)< ca,ses:?~ (Xl(&, '0 e tasfCa(Sa,\[a~ ml, "0.Event.'.
; that ;ire not ordered by the transitive closure ofcauses can take place in parallel or, if they refer to thesame lictor, ill an arbitrary order.4 EVENTTYPE NI .
, ;TWORK SPECIF ICAT IONOF  A GRAMMAR FRAGMENTThe protocol (messages and associated actions) for estab-lishing dependencies on!lined below encodes structuralrestrictions of the dependency structure (projectivity),ensures incremental general!on of dependency trees, andprovides a domesticated fornl of concurrency.Consider a newly instantiated word actor wn (cf.
Fig.
1)se,'!rching bottom-up for its head by sending a search-Head message to its immediate left neighbor, w,.
l. ThesearchHead message is recursivcly forwarded by a se-quence of distrihution events to the head of each receivingactor (i.e., w,,_ I, w k, wj); mess,'lges only p.'lss the outerfringe of the already eslablished dependency tree (theseam circled in lvig.1).
Since only the actors receiving thesearchHead message may later govern w n, projectivetrees are generated 2.
""X -~- - - searchHead \], /  " ' ~  i,j,k,n: text positions /z z .~  " ' -o?
'i ~ ....... %I;iflure l, \[:olwarding a search messageTo allow for domesticated concurrency as required foradequate linguistic and cognitive processing (Clark &Gibson, 1988), a receipt protocol allows w n to keep trackof all events (transitively) caused by its searchHead mes-sage.
This protocol requires each actor receiving a search-Head message to reply Io the initiator of the searchHeadmessage hy a receipt message when the receivers compu-lalion has linished 3.
Since complex messages can bequasi-recursively forwarded, the number of replies cannotbe determined in advance.
Therefore, the receipt messagecontains all actors to which the searchHead message hasbeen dislrihnted, enabling the initiator w n to keep Irack ofall receivers and wait for a receipt message from each 4.Only after all events caused by the searchHead messagehave terminated, the next word actor w,,~l is instantiatedby sendiag a scanNext message to the text scanning actor.2 Of coutse w may be l, ovemed by any word actor govemhlg w. lml ' ' I1  J ,pdue (o Ih?
incremenlality of the analysis, each head c,f wj must Imhx!ated to Ihe right of w n.3 Note Ihat "eom\[\]tllalioll" here may irldlltIe a tll.llllbef of evetlls Lhat arecaused by Ihe soarchHoad message, viz.
the hoadFound and hoadAa-copted messages described below.,I We plall I0 extend our algolilhm It, a gCllefic \[efl1"litla|\[olI dcteclionscheme similar to tim proposal in Shavit & France;,,, 1986.491I I'1O Cotlslrailll / I conxtraml I / ..~./;~o~,, t\[satisf ied / \[ ..... ;",.~,,/ \[ / .
.
.
.
.
J~ '~J  Istructural \].. ~ .
~ ' ~  / l ambigm' ty  J ~ ~ ,L - " t. I )..,i,..
I?
, ?
.- modijiers'j ( ,.<=-,.,,...,-o, j \]i<-.,,o.
I..o..,, .
.
.
.
, , L'/JFigure 2.
Event type networkUpon reception of a searchHead message,  a wordactor w k checks whether w n satisfies the couslraints forone of Wk'S valencies.
If no constraints are satislied, areceipt message is sent back to signal termination of thisparticular event at w k. If w n may Iill a valency of w k, aheadFound message is sent back to w,, thus possiblyimposing additional grammatical restrictions on the tar-geted item.
If w, is still ungoverned, it adjusts its gram-matical description (and those of iLs modiliers, if neces-sary, by sending updateFoatures to each) and signalsacceptance of the new head hy a headAccepted messagedirected to w k. These interrelations are sttmmarized in theevent ype network in Fig.2.This three-step protocol allows ,qlternative attachmenL,;to be checked in parallel (concurrent processing ofsearchHead messages at different actors).
Structuralambiguities are detected whenever a headFound messagearrives at an actor w n which is already governed.
In thiscase, w n duplicates itself and its modifiers (using thecopyStrueture message), resulting in w,, and asks theprospective head to copy itself (hy sending a duplicat-eStructure message), w n becomes head of the copies ofthe modifiers of w n (because ach is answering the copy-Structure message with a hoadAccepted message) andwill be governed by the copy of the head (because thecopy sends another headFound message to wn; for a moredetailed discussion, of.
Hahn, Schacht & BrOker, forth-coming).The unpacked representation f antbiguity is necessarybecause of the simultaneous incorpor,'~tion of conceptualanalysis into the parsing process.
Difl'ercnt syntactic struc-tures result in different conceptual nalyses, which meansfllat there is no common structure to share anymore (cf.Akasaka (1991) for a similar argument).
The set of actorsrepresenting several readings of one lexical item can pro-ceed concurrently, thus introducing further concurrency.5 EVENT NETWORK SPECIF ICAT ION OF ASAMPLE PARSEWe will now consider a partM event network in order toillustrate the parse of "Compaq entwickelt  einen Notebookmit  einer 120-MByte-Hardd isk  "5.
At some point afterreading the sentence, the configuration shown on I7ig.3will h;tve been reached.
The preposition \[mit\] 6 is not yetintegrated ue to a mandatory valency that must tm satis-lied prior to making conceptual restrictions available.Upon establishment of a corresponding dependency be-tween Imit\] and \[ttarddisk\] (Fig.3), \[mit\] slarts to searchfor its head.
This search results in the dependency treedepicted on Fig.4.enlwickeltCompaq No|el)ookeinenmit120-MB-ltarddisk/ s~JeceinerFigure 3.
Contiguration before application of "mit" via saarehHeadentwickeltCompaq Notebookeinen m i %120-M B-I larddiskeiner iFigure 4.
After establishment of dependencyThe events caused by the satisfaction of the mandatoryvalency at \[mit\] (headAecepted event at top left of Fig.5)\[mit\] <= ileadAt:cepted )il,'igure 5.
Event network5 A rough English translation of this reads as "Compaq develops a note-book with a 120-MByte haul divE'.
Notice that from a syntactic per-speclive cilher Ihe verb "entwicla~lt" or the noun "Notebook" may takea preposilional phrase wifll "mlt" specifying an instrument or a part,resp.
This |x~teutial stnlctural ambiguity dc~s not (recur in our m~xleldue to parallel evalualicm of constraints in different knowledge sources.6 Word actors represenllng a lexical item "x" will be wrilten as \[x\].492are specified in tim event network in Fig.5.
The dotted lineindicates an alternative possibility how the seanNextevent could have been triggered.
Of the two receipt events,the last one taking place triggers the seanNext event (notethat both involve the same actor, (mitt, so that they mustbe ordered, even in a distril)utcd system without globallime).6 CONCLUSIONSThe ParseTalk model of natural language understandingaims at the integration of a lexically distributed, depen-dency-I)ased grammar Sl)CCification with a solid formalfoundation for concurrent, object-oriented parsing.
Theassociated concurrent compu~ttion model is based el} theactor paradigm of object-oriented programming, with sev-eral extensions relating to special reqtfirements of natura llangtmge processing.
These cover mechanisms for com-plex message distribution, synchronization i  terms ofrequest-reply protocols, and the distinction of dislriht, tionand computation events.
We have shown how the semanticspecification of actor systems can be used for the consider-ation of global interrelatious of word actors at the gram-mar level (event ype networks) and the parser level (eventnetworks).
While event type networks provide a general,global view on the behavioral aspects of ottr grannnarspecification, the current formalism slill lacks the ability tostlPi)ort ret inal  reasoning about computat iona l  prope, rtiesof distributed systems, such as deadlock freeness, termina-tion.
On tim oflmr hand, event networks illustrate the cont-imtations during real parses, but do not allow predictionsin general cases.
Providing a type discipline for actor deti-nitions may Ix: a reasonable apl)roach to till the method-ological gap between both layers of description.The ParseT?flk model has been exlmritnentally vali..dated by a prototype system, aparser for Germ;re.
The cur-rent fifll-form lexicon contains a hierarchy of 54 word-class specifications and nearly 1000 lexieal entries; amod-ule for lnorphological nalysis is trader development.
Theparser's coverage is currently restricted to the analysis ofassertional sentences, with focus on complex noun andprepositional phrases.
The Parse'l?flk system is imple-inented in Smalltalk, with extensions that allow for coarse-grained parallelism through physic,'d distribution in aworkstation cluster (Xu, 1993) and asynchronous ntessagepassing.
It is loosely coupled with lhe l.OOM knowledgerepresentation system (MacGregor & Bates, 1987).
Wecurrently use a knowledge base with 120 concept delini-}ions covering the domain of information technology.
Fur-thennore, an interactive graphical grammar/parser ngi-neering workbench is supplied which supports the devel-opment and maintenance of the ParseTalk grammar sys-leln.AcknowledgmentsThe work reported in this paper is funded by grants fl'omDFG (grants no, l la 2097/1-l, t la 2097/1-2) within a spe-cial research programme on cognitive linguistics.
We liketo thank our colleagues, P. Neuhaus, M. Klenner, and Th.llanneforth, for valuable comments and supllort.ReferencesAGIIA, G. & IIEWI'Iq; C, (1987).
Concurrent programming usingactors, In A.Yonezawa & M. Tokoro, Eds.
Object-Oriented Concur-rent l'rogramming, pp.37-53.
MIT Press.AKASAKA, K. (1991).
Parallel parsing system based on dependencygrammar.
In C. ltmwn & G. Koch, Fxls.
Natural Language Under.standing and logic Programming, IlL pp, 147-157.
North-I lolland.BR(')KF.R, N.; \]IAIIN, U.
& SCI1ACIIT, S. (1994).
Concurrent lexicali-zed dependency parsing: the l'arseTalk model COLIN(; '94: Prec.15th Intl.
Conf.
on Computational Linguistics (this volume).CI.ARK, R. & (\]\]I~.SON, E. (1988), A parallel m(xlel for adult sentenceprocessing.
Prc, c. lOth Annual Conf.
of the Cognitive Science Soci-ety.
pp.270-276, l lillsdale, N J: 1.. F.rllxmm.DAFI.EMANS, W.; l)e SMEDT, K. & GAZI)AI~, (1.
(1992), Inheritancein natural language processing.
Computational l,inguistics, lg (2),205-218.FVANS, R, & GAZI)AR, G. (199(}).
"lTae DATR Papers, Vol.
1, Univ.
ofSussex, IIrighlon.
(Cognitive Science Research Paper, CSRP 139).IIAIIN, U.; SCIlACIIT, S. & FIR()KF.R, N. (fonficoming).
Concurrent,object-oriented natural language parsing: tire ParseThlk m(xlel.International Journal of Ilnman-Computer Studies, SF, ecial Issueon Object-oriented Approaches in Artificial Inlelligenee andIlnman-Computer Interaction,tlF.I.I~WIG, 1~ (1988).
C.fiart parsing accolding to tire slot and filler prin-ciple.
COLING '88: Prec.
12th Intl.
Conf.
on Computational Lin-guistics.
Vol.l, pp.242-244.IIF.WITI', C. & ATKINSON, R, (1979).
Specification and proof tech-niques R~r smializers.
Iied;J ;.
Trans'actiom" on Software Engit;eering,SI,;-S (1), 10-23.l l lJ D.'q O N, R. (1990).
English Word (;ram*mar.
I~ a sil 1~ lack well,I.II:nI{I,IMAN, I1.
(1987).
Concmrenl object-orle,ted programming inAct 1.
In A. Yollezawa & M. Tokoro, F.ds.
Object-Oriented Concur-rent Prograt~uning.
pp.9-36.
MI'I' Press.MaeGRFZ~OI~, R. (1991).
"Itm cw~lving technology of classilicalion-based knowledge representation syslems.
In J. Sowa, l!d.
Principh!sof Semantic NetworL~'.
Exploration,~" in the Representation ofKnowledge.
pp.3g5-4(X).
Morgan Kaufmam*.MacGl~liGOl(, R. & I~A'I'F.S, R. (1987).
The LOOM Knowledge Repte.sentation System.
University of Sou}hem California (ISI ReprintSeries, ISI/RS-87-188)RIF.SI\]F.CK, C, & SCIIANK, R, (1978).
Comprehensioll by computer:CXlW.ctation-based ;tmdysis of sentences in eonlext, In W.J,M \[.ev-eh & G.IL Flores d'Arcais, Eds.
ShMies in the Perception ofl.an.St}age.
pp.247-293.
J. Wiley,SIIAVIT, N & FRANCI'~Z, N. (1986).
A new approach to detection oflocally indicative stability.
In 1+.
Kolt, Ed.
AutotmJla, Languagesand I'rogramming.
Proceedings ICALP 1986.
Springer.SIIIF.I~ER, S. (1986).
An In}redaction to Unifteation-based Approache,~.to Gratmnar.
Chicago University PressSMALl., S & RIF.GFI~., C. (1982).
Parsing and comprehending wiHIword exlmrts (a Iheop), alld its realization).
In W. l.efinmt & M. Rin-gle, Eds.
Strategies for Natural l~Jnguage Proce.~wing.
pp.g9-147.L.
l:.llhaum.X U, W. (1993), l)L~'trilmted, Shared and PersLvtent Objects.
A Model forDistributed Object Oriented Programmblg.
l.ondol~ Universily,l)ept, of Computer Science (Ph.l),l)iss.
).493
