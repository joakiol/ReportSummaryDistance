AUTOMATIC PLANNING FROM AFRAMES POINT OF VIEWRichard E. FikesSRI Art i f ic ial  Intel l igence CenterI.
IntroductionIn this note I would like to considersome of the ways in which Minsky's ideasconcerning frames relate to automaticplanning systems.
I will proceed by makingsome observations about how knowledge isrepresented in planners and will relate someof the frame ideas to actual runningsystems.
Hopefully, the presentat ion willincrease the reader's understanding andintuit ion of both the systems and the ideas.Typically, a planning system is onethat assists in the accompl ishment of tasksby generating plans and then monitor ingtheir execution.
The active agent thatactual ly carries out the plans might beanother part of the system (e.g.
amechanical  manipulator) ,  or a human that thesystem is providing instruct ions to.
A taskis usual ly specif ied to such a system bydescribing an initial s i tuation and adesired (goal) situation.
The system isaware of a col lect ion of actions that theactive agent can carry out, and the plan itproduces is a sequence of these actions thatare expected to transform the init ials i tuation into the desired situation.Taking a broader view, a planner can bethought of as being a constructor ofscenarios or thematic frames for whateverreasons they are needed.
For example, thesystem may be involved in understanding anatural language narrative that describes asequence of actions, or it may bepart ic ipat ing in an instruct ional  dialoguewith a human about some procedure, or it maybe answering questions about how some taskwould be accomplished.II.
Action Frames as Plan StepsThe building blocks that a planner usesto construct a new plan can be useful lythought of as frames that describe someaction.
In order for a planner to make useof such exist ing "action" frames, they mustinclude certain descr ipt ive informationabout themselves.
In particular, theplanner needs to know under what condit ionsthe action represented by a frame can becarried out.
These are the action's,,preconditions" or ,,applicabilityconditions".
They provide a source  ofsubgoals during the planning process andal low the planner to assure that anexecutable plan is being produced.
Inaddition, the planner needs a descr ipt ion ofthe transformations that execution of anaction is expected to make.
Thisinformation allows the planner to simulatehypothetical  action sequences and therebyinvestigate their results.
Finally, theplanner needs to know what kinds of tasks orsubgoals each action is useful forachieving.
This information indicates tothe planner which actions to considerputting into the plan being constructed.8.Typically, the action frames that areavai lable to a planner as potential  plansteps actual ly  represent an entire class ofact ions by containing slots that must bef i l led by specif ic values.
For example, arobot act ion for moving a box might includeslots for the name of the box, the start inglocation of the move, and the final locationof the move; hence, the action can be usedto move any box from any location to anyother location.
An action frame willspecify constraints on the values that canfill its slots such as type requirementsand, for the box example, perhaps arestr ict ion that the two locations be in thesame room.
A s ignif icant part of theplanning act iv i ty is the determining ofvalues for these slots that both satisfy theframe's constraints and produce an instanceof the frame that is useful in the new plan.Hence, the planning process involves bothselect ing and " instantiat ing" a sequence ofaction frames that wil l  ach ievethe  desiredgoal situation.III.
Plans as Action FramesOne would like for the plans producedby a planner to be retained as new frames sothat the system could be considered to belearning new scenarios and new themes.
Insome of our earl ier work with the STRIPSplanning system we made a reasonablysuccessful  attempt at developing such alearning mechanism \[Fikes, Hart, andNilsson, 1972\].
The chal lange in such aneffort is to have the system derive andstore with the new frame the informationrequired for its use by other parts of thesystem including the planner.
Thisinformat ion includes all the kinds ofinformat ion that is included with theor iginal  act ion frames, namely a set ofprecondit ions for the plan, a descr ipt ion ofthe effects of the plan's execution, andindicat ions of the class of tasks the planis relevant to achieving.
In addit ion, forthe new frame to be useful in s i tuat ionsother than just reoccurrences of the one forwhich it was or ig inal ly  constructed, it mustsomehow be general ized so that, like theother action frames, there are slots at theframe's "terminals" that can be fi l led in?
with values suited to any of a class ofs i tuat ions and goals.The basic goal of the STRIPS learningwork was to general ize and save plans sothat they could be used as single steps infUture plans.
Two aspects of this work seemworth ment ioning here.A.
KernelsFirst, the precondit ions for the planwere direct ly avai lable as a side effect ofthe determinat ion of "kernels" precedingeach step of the plan.
The kernel precedingstep i of a plan is a partial  descr ipt ion ofthe s ituat ion that the planner expects toexist after execution of the first i-I stepsof the plan.
In particular, it specif ies aset of re lat ional  statements that must betrue if the remainder of the plan is tosucceed.
Hence, in effect, the kernel foreach step is the precondit ions for theremainder of the plan.
The kernels for aplan can be computed in a direct manner byconsider ing what relat ional  statements weremade true by each step in the plan and byknowing what statements were needed toassure the achievement of the final goal andeach action's precondit ions.A plan's kernels provide extremelyvaluable information for many uses of theplan, and therefore are prime candidates forinclusion in the plan's action frame.
Firstof all, the kernel preceeding the first stepof the plan specif ies the precondit ions forthe plan.
Second, the kernels specify whattests the execution monitor should makeafter each action to determine whether theplan is proceeding as expected.
Third, thekernels are useful for modifying orextending the plan to accomodate a newsituation or new task goals.
That is,instead of forming a completely new plan toaccompl ish some task goal, the planner hasthe option of modifying an exist ing f ramebyadding and/or changing some of its steps.The basic information that is needed toal low such modif icat ion ~ to occur iscontained in the  kernels since each kernelindicates what must remain true between anytwo adjacent steps in a plan.
Hence, theplanner can add any number of steps betweenstep i-I and step i of an exist ing plan aslong as the kernel between those two stepsis not violated.H.
Plan General izat ionThe second comment to be made about theSTRIPS learning work relates to thegeneral izat ion that was done on the plansbefore they were stored.
The goal was to"unbind" the slots in each of the plan'ssteps so that, whenever possible, theybecame unvalued slots in the frame for theentire plan.
The logical structure of theplan imposes restr ict ions on this unbindingprocess so that some pairs of slots arerequired to take on the same value (i.e.,they become a single slot in the new frame),and others must retain their binding (i.e.,they lose their status as slots in the newframe).
For example, if one step of theplan causes the robot to go to a door, andthe next step causes the robot to go througha door, then the door in those two stepsmust be the same door.This general izat ion process essential lyparameterizes the plan and thereby providesit with enough general ity to make itworthwhi le to save.
For example, consider aplan that takes a robot from room RI throughaoor DI into room R2 and then has the robotbring box BI from room R2 back into room ~Ithrough door DI.
That plan would begeneral ized so that it would take the robotz rom any room into any adjacent room throughany connecting door and then take any box inthe room into any adjacent room through anyconnect ing door.
The general izat ion removesall bindings to the part icular rooms, doors,and box, and allows the room into which thebox is taken to be different from the one inwhich the robot was init ial ly located.9.Hence, we can expand ourcharacter izat ion of the act iv i t ies of aplanner to include the instant iat ion andmodif icat ion of plans that have beenpreviously produced, general ized, andstored.
This type of act ivity correspondsto Minsky's frame matching processes, wherevalues are being assigned to frame terminalsto produce an instance of a frame thatmatches the situation of interest.IV.
Subplanners vs Action FramesThe question arises as to whetherthematic or action frames in the spirit ofthe STRIPS general ized plans are a usefulway of storing knowledge about plans andplanning strategies.
It is essential  thatthere be some means of communicat ing to ourplanning systems knowledge about scenariosand strategies for accompl ishing tasks inthe domain of interest.
For example, in anequipment maintenance domain, the planningstrategy for assembl ing any given devicemight be to create a plan to install  eachcomponent of the device, and the scenariofor connect ing two components to each othermight be to first posit ion the componentswith respect to each other and then fastenthem together.In most planning systems, however, Suchplanning strategies and domain ~pecif icscenarios are not stored in frame-l ike datastructures, but are represented procedural lyas "subplanners" (e.g.
consequent theorems,i f -needed methods, goal team members) thatare appl icable to highly specif icsituations.
In many cases, such proceduralrepresentat ions seem to be necessary,pr imari ly because of the complexity of thestrategies involved.
For example, inFahlman's BUILD program \[Fahlman, 1974\], theplanner has the task of bui ld ing.compl icatedtowers out of toy blocks of severaldifferent shapes.
The basic planningstrategy is to build the tower from thebottom up by adding a block to the toweronly after all the blocks that are tosupport it are already in place.
Thisstrategy is embedded in a procedure thatcomputes the support relat ionships for theentire tower and then uses thoserelat ionships Lo determine a block placementordering.
Such a procedural representat ionsuffers @rom the standard diff iculty chatthe strategy is "hidden" inside uneprocedure so that the system cannot answerquestions about it, modify it, invest igateits properties, etc.
However, it isdiff icult to imagine how such a st rategycould be represented as an action frame orthematic frame since the number and orderingof the steps depends on the part icular towerbeing constructed.
Similar arguments wouldhold for robot route finding situations andthe equipment assembly example given above.There do seem to be interest ingplanning domains where it is desirable toinput to the system thematic framescontaining scenarios with all of their stepsexpl ic i t ly included.
In such <~ases, thesystem is Deing told that the identity andorder of the steps in the plan are not inquestion.
The planner's task is one of~etermining values for the scenario's slots~i.e.
determining an instantiation) thatboth satisfy the scenario's constraints andmatch the situation and task goal that theplanner is considering.For example, we have found suchexplicit scenarios useful in a managementsupport system currently being developed atSRI.
In that work, we wish to allow amanager to specify to the system variousoperational procedures that he uses in hisorganization.
The system can then act as anadministrative assistant by planning andmonitoring the execution of these proceduresat the manager's request.
The planningactivity in this system is primarily one ofscheduling the individual steps of anoperation, and this scheduling is concernedwith assuring the availability of resoursesand personnel at specific times.In particular, we have been consideringmanagement problems on board a Navy aircraftcarrier.
One operation of interest in thatdomain is the flying of training missions.Such a mission involves steps such aspreflight and postflight maintenance of theaircraft, fueling the aircraft, briefing and~ebriefing the pilot, launching andrecovering the aircraft, etc.
These stepsand the order in which they must occur donot vary from mission to mission, hence theycan be included in a thematic frame that ispart of the definition of a mission.The mission scenario or action framehas many terminals with unassigned values,and the planner's basic task is to find anacceptable set of values for them.
Most ofthese slots specify the start or the endtime of some step in the plan; othersspecify the identity of the pilot andaircraft, the amount of fuel to be carried,bearings and locations to indicate theflight route, ere.We include at each terminal of themission's action frame a set of constraintson the value to be assigned there.
The mostcommon constraints are those that arederived from the temporal partial orderingof the steps (e.g.
fueling of the aircraftmust occur after the preflight maintenanceand before the launch).
Default values areincluded at the terminals, usually expressedas functions of other slot values in theframe.
For example, the default value forthe start of preflight mainten@nce isexpressed as the time of launch minusconstant.
These default values allow theplanner to make feasibility estimates and tomake scheduling decisions before all of theconstraints from the other schedulers haveoeen determined.Also included at each  terminal is aspecification of what part of the system canbe called upon to determine a value for theterminal.
These are typically cails onplanners and schedulers that are responsiblefor other operational areas on the carriersuch as maintenance, pilot assignment,aircraft assignment, the flight deck, etc.Hence, the mission planner engages in a*,egotiation dialogue with these otherplanners in an attempt to reach agreement onan acceptable schedule.
In this domain,Minsky's idea of action frames as arepresentation of the system's understandingof various procedures seems a natural anduseful one.We conclude, then, that action framesare a useful representation as opposed tocompletely procedural subplanners insituations where the identity and orderingof the steps in a scenario do not vary fromsituation to situation.
When that is notthe case ,  a more traditional planningactivity is required to construct anappropriate scenario; the strategyinformation needed to perform such scenarioconstruction is often complex and canapparently be most naturally representedprocedurally rather than in a frame-likestructure.i0.V.
Subplanners as Action FramesEven though subplanners are proceduralin nature, they can usefully be embedded inframe-like structures as if they wereactions ~o be included as single steps in aplan.
That is, we can talk about thepreconditions, effects, task relevance, etc.of subplanners such as the tower builder,the route tinder, and the device assembleras if they were single actions.
These"meta-action, frames can provide the systemwith descriptive information to allow suchactivities as planning, question answering,and discourse about the "scenario,, eventhough the actual steps in the scenario forany particular situation have not beendetermined.
The subplanner acts as animplicit scenario and it can be calledwhenever the scenario needs to be madeexplicit.The availabil ity of such meta-actlonframes allows the system to do "hierarchicalplanning,, in the sense that a meta-actloncan be included in a plan without callingits subplanner to determine the p lan  stepsthat it represents.
This approach toplanning has been carefully explored bySacerdoti in two systems \[Sacerdoti,~974,1975\], and found to PrOVide significantadvantages both during the generation andthe execution of Plans.
~n these systems,plans tend to grow in a top-down"breadth-first, manner in that typically acomplete plan will be constructed using nighlevel meta-actions %efore the detailed stepsof any of the meta-actions are determined.Since a meta-action's subplanner may itselfProduce a plan containing meta-actions, amultiple level plan hierarchy can be formed,and the planner can make independentdecisions for each meta-action as to whetherits subplanner should be called.The advantages of hierarchical planningderive basically from the fact that by usingmeta-aetions the system can ignore detailedactions until it is confident that they willbecome part of the final plan.
Indeed, inmany situations the detailed steps may notbe needed at all.
For example, the systemmay be giving instructions to a human who isskilled in the task domain and thereforedoes not need detailed instructions; or thesystem may be only answering a specificquestion about a task such as "Can the robotfetch the box?"
or "How long will it take toreplace the pump?
".REFERENCES\[I\] Fahlman, S. E., "A Planning System forHobot Construction Tasks", ArtificialIntelligence Journal, Vol.
5 (1974), pp1-49.\[2\] Fikes, R. E., Hart, P. E., andNilsson, N. J., "Learning and ExecutingGeneralized Robot Plans", ArtificialIntelligence Journal, Vol.
3 (1972), pp251-288.\[3\] Sacerdotl, E. D., "Planning in aHierarchy of Abstraction Spaces", ArtificialIntelligence Journal, Vol.
5 (1974), pp115-135.\[4\] Sacerdoti, E. D., "A Structure forFlans and Behavior", Ph.D. Thesis ,t'orthcoming.Ii.
