INCREMENTAL  F IN ITE-STATE PARSINGSalah A'it-Mokhtar, Jean-P ierre ChanodRank  Xerox Research Cent re6, Chemin  de Mauper tu i sF-38240 Mey lan ,  Franceh i t@grenob le ,  rx rc .
xerox ,  tomChanod@grenob le .
rx rc .
xerox ,  comAbst rac tThis paper describes a new finite-stateshallow parser.
It merges constructive andreductionist approaches within a highlymodular architecture.
Syntactic informa-tion is added at the sentence level in anincremental way, depending on the contex-tual information available at a given stage.This approach overcomes the inefficiencyof previous fully reductionist constraint-based systems, while maintaining broadcoverage and linguistic granularity.
Theimplementation relies on a sequence ofnetworks built with the replace operator.Given the high level of modularity, the coregrammar is easily augmented with corpus-specific sub-grammars.
The current systemis implemented for French and is being ex-panded to new languages.1 BackgroundPrevious work in finite-state parsing at sentencelevel falls into two categories: the constructive ap-proach or the reductionist approach.The origins of the constructive approach go backto the parser developed by Joshi (Joshi, 1996).
It isbased on a lexical description of large collections ofsyntactic patterns (up to several hundred thousandrules) using subcategorisation frames (verbs + essen-tial arguments) and local grammars (Roche, 1993).It is, however, still unclear whether this heavily lex-icalized method can account for all sentence struc-tures actually found in corpora, especially due tothe proliferation of non-argumental complements incorpus analysis.Another constructive line of research concentrateson identifying basic phrases uch as in the FASTUSinformation extraction system (Appelt et al, 1993)or in the chunking approach proposed in (Abney,721991; Federici et al, 1996).
Attempts were made tomark the segments with additional syntactic infor-mation (e.g.
subject or object) (Grefenstette, 1996)using simple heuristics, for the purpose of informa-tion retrieval, but not for robust parsing.The reductionist approach starts from a largenumber of alternative analyses that get reducedthrough the application of constraints.
The con-straints may be expressed by a set of elimi-nation rules applied in a sequence (Voutilainen,Tapanainen, 1993) or by a set of restrictions appliedin parallel (Koskenniemi et al, 1992).
In a finite-state constraint grammar (Chanod, Tapanainen,1996), the initial sentence network represents allthe combinations of the lexical readings associatedwith each token.
The acceptable readings resultfrom the intersection of the initial sentence networkwith the constraint networks.
This approach led tovery broad coverage analyzers, with good linguisticgranularity (the information is richer than in typicalchunking systems).
However, the size of the interme-diate networks resulting from the intersection of theinitial sentence network with the sets of constraintsraises serious efficiency issues.The new approach proposed in this paper aims atmerging the constructive and the reductionist ap-proaches, so as to maintain the coverage and gran-ularity of the constraint-based approach at a muchlower computational cost.
In particular, segments(chunks) are defined by constraints rather than pat-terns, in order to ensure broader coverage.
At thesame time, segments are defined in a cautious way,to ensure that clause boundaries and syntactic func-tions (e.g.
subject, object, PP-Obj) can be definedwith a high degree of accuracy.2 The  incrementa l  parser2.1 OverviewThe input to the parser is a tagged text.
We cur-rently use a modified version of the Xerox Frenchtagger (Chanod, Tapanainen, 1995).
The revisionsare meant to reduce the impact of the most frequenterrors of the tagger (e.g.
errors between adjectivesand past participles), and to refine the tagset.Each input token is assigned a single tag, generallyrepresenting the part-of-speech and some limitedmorphological information (e.g the number, but notthe gender of nouns).
The sentence is initially rep-resented by a sequence of wordform-plus-tag pairs.The incremental parser consists of a sequence oftransducers.
These transducers are compiled fromregular expressions that use finite-state calculus op-erators, mainly the Replace operators (Karttunen,1996).
Each of these transducers adds syntactic in-formation represented by reserved symbols (annota-tions), such as brackets and names for segments andsyntactic functions.
The application of each trans-ducer composes it with the result of previous appli-cations.If the constraints tipulated in a given transducerare not verified, the string remains unchanged.
Thisensures that there is always an output string at theend of the sequence, with possibly underspecifiedsegments.Each transducer performs a specific linguistictask.
For instance, some networks identify segmentsfor NPs, PPs, APs (adjective phrases) and verbs,while others are dedicated to subject or object.
Thesame task (e.g.
subject assignment or verb segmen-tation) may be performed by more than one trans-ducer.
The additional information provided at eachstage of the sequence is instrumental in the defini-tion of the later stages of the sequence.
Networksare ordered in such a way that the easiest asks areaddressed first.2.2 Non-monotonicityThe replace operators allow one not only to add in-formation but also to modify previously computedinformation.
It is thus possible to reassign syntacticmarkings at a later stage of the sequence.
This hastwo major usages:?
assigning some segments with a default markingat some stage of the process in order to providepreliminary information that is essential to thesubsequent stages; and correcting the defaultmarking later if the context so requires?
assigning some segments with very generalmarking; and refining the marking later if thecontext so permits.In that sense, our incremental parser is non-monotonic: earlier decisions may be refined or even73revised.
However, all the transducers can, in prin-ciple, be composed into a single transducer whichproduces the final outcome in a single step.2.3 Caut ious  segmentat ion  and  syntacticmarkingEach transducer defines syntactic onstructions us-ing two major operations: segmentation and syn-tactic marking.
Segmentation consists of bracket-ing and labeling adjacent constituents that belongto a same partial construction (e.g.
a nominal or averbal phrase, or a more primitive/partial syntacticchain if necessary).
Segmentation also includes theidentification of clause boundaries.
Syntactic mark-ing annotates segments with syntactic functions (e.g.subject, object, PPObj).The two operations, segmentation and syntacticmarking, are performed throughout the sequence inan interrelated fashion.
Some segmentations dependon previous yntactic marking and vice versa.If a construction is not recognized at some point ofthe sequence because the constraints are too strong,it can still be recognized at a later stage, using otherlinguistic statements and different background infor-mation.
This notion of delayed assignment is crucialfor robust parsing, and requires that each statementin the sequence be linguistically cautious.
Cautioussegmentation prevents us from grouping syntacti-cally independent segments.This is why we avoid the use of simplifying ap-proximations that would block the possibility of per-forming delayed assignment.
For example, unlike(Abney, 1991), we do not systematically use longestpattern matching for segmentation.
Segments arerestricted by their underlying linguistic indetermi-nacy (e.g.
post-nominal adjectives are not attachedto the immediate noun on their left, and coordinatedsegments are not systematically merged, until strongevidence is established for their linkage).2.4 Incremental parsing and linguisticdescriptionThe parsing process is incremental in the sense thatthe linguistic description attached to a given trans-ducer in the sequence:?
relies on the preceding sequence of transducers* covers only some occurrences of a given linguis-tic phenomenon?
can be revised at a later stage.This has a strong impact on the linguistic char-acter of the work.
The ordering of the linguisticdescriptions i in itself a matter of linguistic descrip-tion: i.e.
the grammarian must split the descriptionof phenomena into sub-descriptions, depending onthe available amount of linguistic knowledge at agiven stage of the sequence.This may sound like a severe disadvantage of theapproach, as deciding on the order of the transduc-ers relies mostly on the grammarian's intuition.
Butwe argue that this incremental view of parsing isinstrumental in achieving robust parsing in a prin-cipled fashion.
When it comes to parsing, no state-ment is fully accurate (one may for instance find ex-amples where even the subject and the verb do notagree in perfectly correct French sentences).
How-ever, one may construct statements which are truealmost everywhere, that is, which are always true insome frequently occuring context.By identifying the classes of such statements, wereduce the overall syntactic ambiguity and we sim-plify the task of handling less frequent phenomena.The less frequent phenomena apply only to segmentsthat are not covered by previous linguistic descrip-tion stages.To some extent, this is reminiscent of the optimal-ity theory, in which:?
Constraints are ranked;?
Constraints can be violated.Transducers at the top of the sequence are rankedhigher, in the sense that they apply first, thus block-ing the application of similar constructions at a laterstage in the sequence.If  the constraints attached to a given transducerare not fulfilled, the transducer has no effect.
Theoutput annotated string is identical to the inputstring and the construction is bypassed.
However,a bypassed construction may be reconsidered at alater stage, using different linguistic statements.
Inthat sense, bypassing allows for the violation of con-straints.2.5 An  example  o f  inc rementa l  descr ip t ion :F rench  Sub jec tsAs French is typically SVO, the first transducer inthe sequence to mark subjects checks for NPs on theleft side of finite verbs.Later in the sequence, other transducers allowfor subject inversion (thus violating the constrainton subject-verb order), especially in some specificcontexts where inversion is likely to occur, e.g.within relative or subordinate clauses, or with mo-tion verbs.
Whenever a transducer defines a verb-subject construction, it is implicitly known at this74stage that the initial subject-verb construction wasnot recognized for that particular clause (other-wise, the application of the verb-subject construc-tion would be blocked).Further down in the sequence, transducers mayallow for verb-subject constructions outside thepreviously considered contexts.
I f  none of thesesubject-pickup constructions applies, the final sen-tence string remains underspecified: the output doesnot specify where the subject stands.It should be observed that in real texts, not onlymay one find subjects that do not agree with theverb (and even in correct sentences), but one mayalso find finite verbs without a subject.
This is thecase for instance in elliptic technical reports (esp.failure reports) or on cigarette packs with inscrip-tions like Nuit gravement ~la santg 1.This is a major feature of shallow and robustparsers (Jensen et al, 1993; Ejerhed, 1993): theymay provide partial and underspecified parses whenfull analyses cannot be performed; the issue of gram-maticality is independent from the parsing process;the parser identifies the most likely interpretationsfor any given input.An additional feature of the incremental parserderives from its modular architecture: one may han-dle underspecified elements in a tractable fashion, byadding optional transducers to the sequence.
For in-stance, one may use corpus specific transducers (e.g.sub-grammars for technical manuals are speciallyuseful to block analyses that are linguistically ac-ceptable, but unlikely in technical manuals: a goodexample in French is to forbid second person sin-gular imperatives in technical manuals as they areoften ambiguous with nouns in a syntactically unde-cidable fashion).
One may also use heuristics whichgo beyond the cautious tatements of the core gram-mar (to get back to the example of French subjects,heuristics can identify any underspecified NP as thesubject of a finite verb if the slot is available at theend of the sequence).
How specific grammars andheuristics can be used is obviously application de-pendent.3 Arch i tec tureThe parser has four main linguistic modules, each ofthem consisting of one or several sequenced trans-ducers:1 Seriously endangers your health.
This example rep-resents an interesting case of deixis and at the same timea challenge for the POS tagger as Nuit is more likely tobe recognized as a noun (Night) than as a verb (Endan-gers) in this particular context.?
Primary segmentation?
Subject tagging?
Segment expansion (Optional)?
Other syntactic functions taggingThe input text is first tagged with part-of-speechinformation using the Xerox tagger.
The tagger uses44 morphosyntactic tags such as NOUN-SG for sin-gular nouns and VERB-P3SG for verb 3rd personsingular.The morphosyntactic tags are used to mark AP,NP, PP and VP segments.
We then use the segmen-tation tags and some additional information (includ-ing typography) to mark subjects which, in turn,determine to what extent VCs (Verb Chunks) canbe expanded.
Finally, other syntactic functions aretagged within the segments.Marking transducers are compiled from regularexpressions of the form A ?-> T1 .
.
.
T2 that con-tains the left-to-right longest match replace opera-tor ?-> .
Such a transducer marks in a left-to-rightfashion the maximal instances of A by adding thebracketing strings T1 and T2.4 P r imary  Segmentat ionA segment is a continuous sequence of words that aresyntactically linked to each other or to a main word(the Head).
In the primary segmentation step, wemark segment boundaries within sentences as shownbelow where NP stands for Noun Phrase, PP forPreposition Phrase and VC for Verb Chunk (a VCcontains at least one verb and possibly some of itsarguments and modifiers).Example :\[VC \[VC Lorsqu' \[NP on NP\] tourne VC\] \[NP lecommutateu.v NP\] \[PP de d4marrage PP\] \[PP sur laposition PP\] \[AP auxiliaire AP\] , \[NP i'aiguille NP\] retourne alors \[PP ~ z4ro PP\] VC\]?/SENT 2All the words within a segment should be linked towords in the same segment at the same level, ex-cept the head.
For instance, in the NP le commu-tateur (the switch), le should be linked to commu-tateur (the head) which, in turn, should be linkedto the verb tourne, and not to the verb retourne be-cause the two words are not in the same segment.The main purpose of marking segments is thereforeto constrain the particular linguistic space that de-termines the syntactic function of a word.2 Turning the starter switch to the auxiliary position,the pointer will then return to zero.As one can notice from the example above, seg-mentation is very cautious, and structural ambiguityinherent o modifier attachment (even postnominaladjectives), verb arguments and coordination is notresolved at this stage.In order to get more robust linguistic descriptionsand networks that compile faster, segments are notdefined by marking sequences that match classicalregular expressions of the type \[Det (Coord Det)Adj* Noun\], except in simple or heavily constrainedcases (APs, Infinitives, etc).
Rather, we take ad-vantage of the fact that, within a linguistic segmentintroduced by some grammatical words and termi-nated by the head, there is no attachement ambigu-ity and therefore these words can be safely used assegment delimiters (Bbs, 1993).
We first mark pos-sible beginnings and endings of a segment and thenassociate ach beginning tag with an ending if someinternal constraints are satisfied.
Hence, the mainsteps in segmentation are:?
Tag potential beginnings and ends of a segment?
Use these temporary tags to mark the segment* Remove the temporary tags.4.1 AP  Segmentat ionAdjective phrases are marked by a replacementtransducer which inserts the \[AP and AP\]  bound-aries around any word sequence that matches theregular expression (RE):\[ (ADVP) ADJ ( COMMA \[ (ADVP) ADJCOMMA \]+ ) ( COORD (ADVP) ADJ ) \]ADVP stands for adverb phrase and is defined as:\[ ADV+ \[\[COORD\[COMMA\] DV?\]* \]4.2 NP  Segmentat ionUnlike APs, NPs are marked in two steps where thebasic idea is the following: we first insert a specialmark wherever a beginning of an NP is possible, i.e,on the left of a determiner, a numeral, a pronoun,etc.
The mark is called a temporary beginning ofNP (TBeginNP).
The same is done for all possibleends of NP (TEndNP), i.e.
nouns, numerals, pro-nouns, etc.
Then, using a replacement transducer,we insert the \ [NP and NP\]  boundaries around thelongest sequence that contains at least one tempo-rary beginning of NP followed by one temporary endof NP:75\[TBeginNP -$\[TEndNP\] TEndNP \] @->BeginNP ... EndNPThis way, we implicitly handle complicated NPssuch as le ou les responsables ( the-SG or the-PL per-son(s) in charge), les trois ou quatre affaires (thethree or four cases), etc.4.3 PP  Segmentat ionOnce NP boundaries are marked, we insert on theleft of any preposition a temporary PP beginningmark (TBeginPP = <PP) :<PP Avec ou <PP sans \[NP le premierministre NP 3\]Then the longest sequence containing at least oneTBeginPP followed by one EndNP is surroundedwith the \[PP and PP\] boundaries using the RE:\[TBeginPP -$ \[EndNPITVerb\] Encl~P\] @->BeginPP .
.
.
EndPPwhich eventually leads to:\[PP Avec ou sans le premier ministre PP\]4.4 VC Segmentat ionA VC (Verb Chunk) is a sequence containing at leastone verb (the head).
It may include words or seg-ments (NPs, PPs, APs or other VCs) that are pos-sibly linked as arguments or adjuncts to the verb.There are three types of VCs: infinitives, presentparticiple phrases and finite verb phrases.
We firstmark infinitives and present participle segments asthey are simpler than finite verb phrases-they arenot recursive, they cannot contain other VCs.4.4.1 In f in i t i vesThe infinitive phrases are recognized using the reg-ular expression:\[(PREPO) (NEG) (ADVP) PC* INF\[(ADVP PastPartV+) I PastPartV*\]\]e.g.
: sans m~me prdvenir (without even warning):\[VC \[NP Mr NP\] \[NP Guilhaume NP\] supprime VC\]\[PP des ~missions PP\] \[VC sans m~me pr~venirVC\] \[NP leurs  responsables NP\]4.4.2 P resent  Par t i c ip le  SegmentsThe present participle phrases are recognized us-ing the regular expression:\[ (EN) (NEG) PC* PrePart\[(ADVP PastPartV+) \[ PastPartV*\]\]e.g.
: en ddnongant (while denouncing)\[VC en d6non~ant VC\] \[NP les  provocat ionsNP\] \[ADJ mensong~res ADJ\]a With or without the prime minister.764.4.3 F in i te  Verb SegmentsHere we use the basic idea described in the NPmarking: temporary beginnings (TBeginVC) andends (TEndVC) of VC are first marked.Temporary beginnings of VCs are usually intro-duced by grammatical words such as qui (relativepronoun), lorsque, et (coordination) etc.
However,not all these words are certain VC boundaries: etcould be an NP coordinator, while que (tagged asCONJQUE by the HMM tagger) could be used incomparatives (e.g.
plus blanc que blanc).
Therefore,we use three kinds of TBeginVC to handle differ-ent levels of uncertainty: a certain TBeginVC (TBe-ginVC1), a possible BeginVC (TBeginVC2) and aninitial TBeginVC (TBeginVCS) automatically in-serted at the beginning of every sentence in the inputtext.
With TBeginVCS, we assume that the sen-tence has a main finite verb, as is usually the case,but this is just an assumption that can be correctedlater.A temporary end of VC (TEndVC) is then in-serted on the right of any finite verb, and the processof recognizing VCs consists of the following steps:* Step 1: Each certain TBeginVC1 is matchedwith a TEndVC, and the sequence is markedwith \[VC and VC\].
The matching is appliediteratively on the input text to handle the caseof embedded clauses (arbitrarily bound to threeiterations in the current implementations).
* Step 2: The same is done with the TBeginVCS(inserted at the beginning of a sentence).?
Step 3: If there is still a TEndVC that was notmatched in (1) or (2), then it is matched witha possible TBeginVC2, if any, and the sequenceis marked with \[VC and VC\].?
Step 4: Any TBeginVC that was not matchedin (1), (2) or (3) is removed.Verb  Segmentat ion  Example :In i t ia l  inputLorsqu' \[NP on NP\] appuie \[PP sur 1'interrupteur PP\] \[PP de feux PP\] \[PP ded~tresse PP\] , \[NP tous_les indicateurs NP\] \[PPde direct ion PP\] c l ignotent simultan~ment e\[NP un t r iangle  NP\] lAP rouge AP\] c l ignote \[PPdans 1' interrupteur PP\] ./SENT 44 When the hazard warning switch is pressed all thedirection indicators will flash in unison and the switchwill flash a red triangle.Temporary  tagg ing of  VC boundar ies<VCS <VC1 Lorsqu'  \[NP on NP\] appuie VC> \[PPsur  1'  in ter rupteur  PP\] \[PP de feux PP\] \[PP dedftresse PP\] , \[NP tousles indicateurs NP\] \[PPde direction PP\] clignotent VC> simultan4ment<VC2 et \[NP un triangle NP\] \[AP rouge AP\]clignote VC> \[PP dans i' interrupteur PP\]?/SENTVC mark ing\[VC \[VC Lorsqu' \[NP on NP\] appuie VC\] \[PP surI' interrupteur PP\] \[PP de feux PP\] \[PP ded4tresse PP\] , \[NP tousles indicateurs NP\] \[PPde direction PP\] clignotent VC\] simultan4ment\[VC et \[NP un triangle NP\] lAP rouge AP\]clignote VC\] \[PP dans i' interrupteur PP\]?/SENT5 Marking Syntactic FunctionsThe process of tagging words and segments withsyntactic functions is a good example of thenon-monotonic nature of the parser and its hy-brid constructive-reductionnist approach.
Syntac-tic functions within non recursive segments (AP, NPand PP) are addressed first because they are easierto tag.
Then other functions within verb segmentsand at sentence level (subject, direct object, verbmodifier, etc.)
are considered.Potential subjects are marked first: an NP is apotential subject if and only if it satisfies ome ty-pographical conditions (it should not be separatedfrom the verb with only one comma, etc.).
Thisprevents the NP Jacques, for example, from beingmarked as a subject in the sentence below:\[VC \[NP le president NP\]/SUBJ \[PP du CSA PP\],\[NP Jacques NP\] \[NP Boutet NP\] , a d4cid4 VC\]\[VC de publier VC\] \[NP la profession NP\] \[PP defoi PP\] ./SENT 5Then constraints are applied to eliminate some of thepotential subject candidates.
The constraints aremainly syntactic: they are about subject uniqueness(unless there is a coordination), the necessary shar-ing of the subject function among coordinated NPs,etc.
The remaining candidates are then consideredas real subjects.
The other syntactic functions, suchas object, PP-Obj, verb modifier, etc.
are taggedusing similar steps.5The USA president, Jacques Boutet, decided topresent his profession of faith.776 Expand ing  Verb  SegmentsBecause primary segmentation is cautious, verb seg-ments end right after a verb in order to avoid arbi-trary attachment of argument or adjunct segments(NPs, PPs and APs on the right of a verb).
How-ever, experiments have shown that in some kinds oftexts, mainly in technical manuals written in a "con-trolled language", it is worth applying the "nearestattachment" principle.
We expand VCs to includesegments and to consider them as arguments or ad-juncts of the VC head.
This reduces tructural am-biguity in the parser output with a very small errorrate.
For instance, expanding VCs in the sentencegiven in the previous section leads to the followingstructure:\[VC \[NP le prfsident NP\]/SUBJ \[PP du CSA PP\],\[NP Jacques NP\] \[NP Boutet NP\] , a d~cid~ \[VCde publier \[NP la profession NP\] \[PP de foi PP\]VC\] VC\] ./SENTNevertheless, as this principle leads to a significantnumber of incorrect attachments in the case of morefree-style texts, the VC expansion etwork is option-ally applied depending on the input text.7 Per fo rmanceAs mentioned above, the parser is implemented asa sequence of finite state networks.
The total sizeof the 14 networks we currently use is about 500KBytes of disk space.
The speed of analysis isaround 150 words per second on a SPAP~Cstation 10machine running in a development environment thatwe expect o optimize in the future.
As for linguisticperformance, we conducted a preliminary evaluationof subject recognition over a technical manual text(2320 words, 157 sentences) and newspaper articlesfrom Le Monde (5872 words, 249 sentences).
Theprecision and recall rates were respectively 99.2%and 97.8% in the first case, 92.6% and 82.6% in thecase of the newspaper articles.
This difference inperformance is due to the fact that, on the one hand,we used the technical manual text to develop theparser and on the other hand, it shows much lessrich syntactic structures than the newspaper text.We are currently conducting wider experiments toevaluate the linguistic accuracy of the parser.8 Pars ing  SamplesBelow are some parsing samples, where the output isslightly simplified to make it more readable.
In par-ticular, morphosyntactic tags are hidden and onlythe major functions and the segment boundaries ap-pear.A l'interpr~tation des sentiments pr~sidentiels s'a-joute l'atmosphdre de surench~re politique quiprdc~de tout congr~s du Patti socialiste.\[VC \[PP A/PrepN> I'/DET> interpretationPP\]IPPObj \[PP des/PrepN> sentiments PP\]IPPObj\[AP pr~sidentiels AP\]/<NM s' ajoute)Mg VC\] \[NPI'/DET> atmosphere NP\]/<SUBJ \[PP de/PrepN>surench~re PPI/PPObj \[AP politique AP\]/<NM \[VC\[NP qui NP\]/SUBJ precede VC\] tout/VM \[NPcongr~s NP\]/OBJ \[PP du/PrepN> Patti PP\]/PP0bjlAP socialiste AP\]/<NM ./SENTLes dgputgs azerbaidjanais ont adressg d Moscou unultimatum exigeant la levge de l'~tat d'urgence, et leretrait des troupes, faute de quoi ils reconsidgreraient" l'acte d'union " intdgrant l'Azerbaidjan ~ I'URSS.\[VC \[NP Les/DET> d~put~s NP\]/SUBJ lAPazerbaidjanais AP\]/<NM ont adress~\]MV VC\] \[PP~/PrepN> Moscou PP\]IPPObj \[NP tm/DET>ultimatum NP\]/OBJ \[VC exigeant VC\] \[NP Ia/DET>levee NP\]/OBJ \[PP de/PrepN> I'/DET> ~tatPP\]/PPObj \[PP d'/PrepN> urgence PP\]/PPObj , et\[NP Ie/DET> re t ra i t  NP\]/N \[PP des/PrepN>troupes PP\]/PPObj , \[VC faute_de_quoi \[NP ilsNP\]/SUBJ reconsid~reraient VC\] \[NP I'/DET> acteNP\]/OBJ \[PP d'/PrepN> union PP\]/PPObj \[VCint~grant VC\] \[NP I'/DET> Azerbaidjan NP\]/0BJ \[PP~/PrepN> I'/DET> URSS PP\]/PPObj ./SENTA l'heure, vendredi soir, off les troupes sovidtiquess'appr~taient ~ pdndtrer dans Bakou, la minusculeRdpublique autonome du Nakhitchevan, territoireaz6vi enclav~ en Armdnie d la fronti~re de l'Iran,proclamait unilatdralement son ind@endance, parddcision de son propre Soviet supreme.\[VC \[PP A/PrepN> I'/DET> heure PP\]/PPObj , \[NPvendredi NP\]/N \[NP soir NP\]/<NM , \[VC o~ \[NPles/DET> troupes NP\]/SUBJ lAP sovi~tiquesAP\]/<NM s' appr~taient VC\] \[VC ~ p~n~trer VC\]\[PP dans/PrepN> Bakou PP\]/PPObj , \[NP la/DET>lAP minuscule AP\]/NM> R~publique NP\]/SUBJ lAPautonome AP\]/<NM \[PP du/PrepN> NakhitchevanPP\]/PPObj , \[NP te r r i to i re  NP\]/N \[AP az~riAP\]/<NM \[AP enclav~ AP\]/<NM \[PP en/PREPArmfinie PP\]/PP0bj \[PP $/PrepN> la/DET>fronti~re PP\]/PPObj \[PP de/PrepN> I'/DET> IranPP\]/PPObj , proclamaitlMV VC\] unilatfiralement/VM\[NP son/DET> ind~pendance NP\]/OBJ \[PP par/PrepN>d~cision PP\]/PP0bj \[PP de/PrepN> son/DET>lAP propre AP\]/NM> Soviet PP\]/PPObj78lAP supr@me AP\]/<NM ./SENT9 Conc lus ionThe incremental finite-state parser presented heremerges both constructive and reductionist ap-proaches.
As a whole, the parser is constructive:it makes incremental decisions throughout the pars-ing process.
However, at each step, linguistic on-traints may eliminate or correct some of the previ-ously added information.
Therefore, the analysis isnon-monotonic and handles uncertainty.The linguistic modularity of the system makes ittractable and easy to adapt for specific texts (e.g.technical manuals or newspaper texts).
This is doneby adding specialized modules into the parsing se-quence.
This way, the core grammar is clearlyseparated from optional inguistic descriptions andheuristics.Ongoing work includes expansion of the Frenchgrammar, a wider evaluation, and grammar devel-opment for new languages.
We will also experimentwith our primary target applications, informationretrieval and translation assistance.AcknowledgementsWe would like to thank Kenneth It.
Beesley andLauri Karttunen for their editorial advice and Gre-gory Grefenstette for the valuable discussions we hadabout finite-state parsing and filtering.Re ferencesSteven P. Abney, 'Parsing by chunks', in Principled-Based Parsing, eds., It.
Berwick, S. Abney, andC.
Tenny, Kluwer Academic Publishers, Dor-drecht, (1991).Douglas E. Appelt, Jerry It.
Hobbs, John Bear,David Israel, and Mabry Tyson 'FASTUS: AFinite-State Processor for Information Extractionfrom Iteal-World Text', in Proceedings IJCAI-93,Chambery, France, August 1993.Gabriel G. B~s, 'Axiomas y algoritmos en la de-scripci6n de las len, guas naturales', V CongresoArgentino de Lingiiistica, Mendoza, 1993.Jean-Pierre Chanod and Pasi Tapanainen, 'TaggingFrench - comparing a statistical and a constraint-based method', in Proceedings of the Seventh Con-ference of the European Chapter of the Associa-tion for Computational Linguistics, pp.
149-156,Dublin, (1995).Jean-Pierre Chanod and Pasi Tapanainen.
'A Ro-bust Finite-State Parser for French', in ESSLLI'96Workshop on Robust Parsing, August 1996 12-16,Prague, Czech Republic.Eva Ejerhed, 'Nouveaux courants en analyse syntax-ique', Traitement automatique des langues, 34(1),(1993).Stefano Federici, Simonetta Montemagni and VitoPirrelli 'Shallow Parsing and Text Chunking: aView on Underspecification in Syntax', in ESS-LLI'96 Workshop on Robust Parsing, August 199612-16, Prague, Czech Republic.Gregory Grefenstette, 'Light Parsing as Finite-StateFiltering', in Proceedings ECAI '96 workshopon "Extended finite state models of language" Aug.11-12, 1996, Budapest.Karen Jensen, George E. Heidorn, and Stephen D.Richardson, eds., Natural language processing:the PLNLP approach, number 196 in TheKluwer international series in engineering andcomputer science, Kluwer Academic Publishers,Boston/Dordrecht/London, 1993.Aravind Joshi.
'A Parser from Antiquity: An EarlyApplication of Finite State Transducers to Natu-ral Language Parsing', in Proceedings ECAI '96workshop on "Extended finite state models of lan-guage", Budapest, August 11-12, 1996, Budapest.Lauri Karttunen, 'Directed replacement', in Proceed-ings of the 34th Annual Meeting of the Associationfor Computational Linguistics, Santa Cruz, USA,(June 1996).
Association for Computational Lin-guistics.Kimmo Koskenniemi, Pasi Tapanainen, and AtroVoutilainen, 'Compiling and using finite-state syn-tactic rules', in Proceedings of the FourteenthInternational Conference on Computational Lin-guistics COLING-92 vol.
I, pp.
156-162.
Nantes,(1992).Emmanuel Roche, Analyse syntaxique transforma-tionnelle du franfais par transducteurs etlexique-grammaire, Ph.D. dissertation, Universit6 deParis 7, 1993.Atro Voutilainen and Pasi Tapanainen, 'Ambigu-ity resolution in a reductionistic parser', in Pro-ceedings of the Sixth Conference of the Euro-pean Chapter of the Association for Computa-tional Linguistics, pp.
394-403, Utrecht, (1993).79
