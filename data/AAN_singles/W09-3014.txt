Proceedings of the Third Linguistic Annotation Workshop, ACL-IJCNLP 2009, pages 82?89,Suntec, Singapore, 6-7 August 2009. c?2009 ACL and AFNLPSchema and Variation: Digitizing Printed DictionariesChristian Schneiker and Dietmar SeipelDepartment of Computer ScienceUniversity of Wu?rzburg, Germany{schneiker, seipel}@informatik.uni-wuerzburg.deWerner WegsteinDepartment of Computational PhilologyUniversity of Wu?rzburg, Germanywerner.wegstein@uni-wuerzburg.deAbstractIn this paper we show how to exploit typo-graphical and textual features of raw text forcreating a fine?grain XML Schema Markupwith special focus on capturing linguistic vari-ation in dictionaries.
We use declarative pro-gramming techniques and context?free gram-mars implemented in PROLOG.1 IntroductionIn 1996, Cambridge University Press proudly pre-sented an outstanding milestone in electronic publish-ing: Samuel Johnson: A Dictionary of the English Lan-guage on CD?ROM, edited by Anne McDermott; con-taining the First Edition 1755 and the significantly re-vised Fourth Edition 1773 (McDermott, 1996).
?TheDictionary is not only the first great work of Englishlexicography but also a literary and historical resourceof immense value, and this electronic edition has beenprepared to the highest standards by a team of scholarsat the University of Birmingham.?
(Cambridge Univer-sity Press Catalogue, 2009)The announcement highlighted all the key charac-teristics of electronic texts: accessability, complete-ness, use of multi?media environment, searchabilityand highest standards applied by scholars, i.e.
philolog-ical reliability and precision, wrapped in leading edgetechnology (Ga?rtner/Wisbey, 1974).
Today, more thana decade and at least one electronic product life-cyclelater, the CD is still on sale ?
as far as we could findout unchanged ?
and has not lost anything of its formervalue.In the context of digitizing the cultural heritage thereis even a strong and growing demand for digitizingresearch tools like dictionaries (cf., e.g., Gallica Dig-ital Library Charter/Chapter: Time period covered).But, in the field of electronic text editing, requirementsgrow rapidly and standards develop fast.
The usersof electronic texts today want to search not only forwords, phrases, headwords, quotations, and authors ofsources.
They would like to get access to and searchfor variant forms, grammatical categories, usage indi-cators and the structuring of the description of wordsenses, etc., not only in single dictionaries, but ?
per-haps using a grid environment ?
in fully connecteddictionary networks (cf.
the dictionary search, possi-ble within the Trier Dictionary Net and as a TextGridfeature).
In the context of these new user scenarios,possibly grid?based, usable for collabortive researchand secured safely in longterm archive structures, wetry to put fine?grain encoding ideas into practise usingJoachim Heinrich Campe?s dictionary of the GermanLanguage as testbed.This is one of the reasons why TEXTGRID (2009),the first grid project in German eHumanities, fundedby the Federal Ministry of Education and Research,chose the Campe Dictionary (1811): 6 volumes withaltogether about 6.000 pages and about 140.000 en-tries, published between 1807 and 1813 as one testbedfor their TEXTGRID Lab, a Virtual Research Library.It entails a grid?enabled workbench that will process,analyse, annotate, edit and publish text data for aca-demic research and TEXTGRIDRep, a grid repositoryfor long?term storage.
Electronic dictionaries are usedin a wide field of new research areas such as the grow-ing community of eHumanities.
One of the mainprojects for the German humanities is the communityproject TEXTGRID, which aims to develop a platformfor the collaborative editing, annotation, analysis andpublication of texts (TEXTGRID, 2009).
According tothe TEI Consortium (2009), large text corpora fromdifferent epochs have to be parsed and annotated forperforming further analysis, such as building a meta?lemma list for the project interdependencies betweenlanguage and genomes.In general, there are the following important prereq-uisites for state of the art text encoding in the Human-ities.
The encoding should use international standards,especially XML and related standards, e.g., TEI P5 with82XML Schema.
Also the combination of text and imageis necessay.
The text capture should aim at referencequality for the encoded text.
A fine?grain encodingpreserving lexicographical and textual variation with-out blurring (distorting) the content modelling of XMLelements is helpful.
Finally, a TEI schema (Relax NG)that is flexible enough to encode variation in lexico-graphical and textual structures without loosening thegrip of the constraints is necessary to define clear cutelement content.In this paper, we present an annotation workflow us-ing declarative programming techniques for fine?graintext markup, and we apply it for retro?digitizing aprinted version of the Campe Dictionary.
Our pars-ing and annotation toolkit is based on SWI?PROLOGand the XML query and transformation language FN-QUERY (Seipel, 2002), which is implemented in SWI?PROLOG.
Using PROLOG technology for parsing andannotating is common in natural language process-ing.
It has, e.g., been used within the Jean Paulproject at the Berlin?Brandenburg Academy of Sci-ences (Seipel et al, 2005), where XML transforma-tions based on FNQUERY turned out to be easier towrite than XSLT transformations.
A frequently appliedmethod in PROLOG programming is to find the properlevel of abstraction and to write suitable macros for fre-quently occurring patterns in the code; PROLOG evenallows to design dedicated special?purpose languages(O?Keefe, 1990).
Definite clause grammars have beendeveloped as an abstraction for parsing; this has, e.g.,been very successful for parsing controlled natural lan-guages (Fuchs et al, 1994; Fuchs et al, 1995; Schwit-ter, 2008).Structure of the Paper.
The rest of this paper isorganized as follows: In Section 2, we sketch theworklflow for capturing text from the printed text cor-pus and the semi?automatic error correction to producea source file for our parsing and annotation toolkit.
Sec-tion 3 gives an overview of the structure of the differententries in the dictionary; we will explain this structurewith the lemma ?Der Aal?, and we will examplify thevariation of entries.
The next section shows the annota-tion of the different lemma variants and the parsing ofnouns and verbs.
In Section 5, we describe the parsingand annotation of the sense block with citations and ref-erences, punctuation, linebreaks and hyphenation.
Thelast section gives a conclusion of our work.2 The Campe Workflow for Text CaptureSince the Campe Dictionary was written in the early19th century, the text could not be captured with mod-ern methods of optical character recognition (OCR).Thus, in a first step, the whole corpus had to bedoubled?keyed in China.
This could also avoid un-consciously corrected spelling variants in old Germantext, which is frequently done by native speakers.
Fig-ure 1 shows the typographical layout of an entry in theCampe Dictionary.The second step in the text capture workflow wasthe correction of illegible characters according to thecontext, as well the manual correction of printing er-rors provided by the publishers.
For providing an effi-cient and easy?to?undo workflow system for these cor-rections, we decided to use a semi?automatic process:corrections made by human experts could be repeatedon the whole context by using regular expressions ina standard POSIX?Regex environment, and automaticcorrections could be done by processing the workflowlogfiles of other volumes of the Campe Dictionary.One of the main concerns in this preprocessing stepswas the pre?annotation of abbreviatons used by the au-thor such as etc., s. a. and z. b. or even abbreviatedauthor names like C. for Campe.
These had to bechecked manually and pre?annotated by a parser writ-ten in PROLOG, which can also recognize named enti-ties.After logging all these corrections in UNIX diff files,the base file for the text conversion into XML could begenerated.3 The Structure of EntriesWithin the parsing process, the only annotations avail-able so far for structure recognition were the declara-tion of the different font sizes used by Joachim Hein-rich Campe, the numbering of the line and page breaksin the dictionary, and paragraphs; thus, we found a verylimited XML structure in the source file which we usedfor the first basic transformaions.In most available dictionaries, each entry is encap-sulated in its own paragraph, and thus, it could be eas-ily detected.
In the following preannotated example,which is the result of the double key process, an en-try is annotated with paragraph and is followed by anelement W_2, which shows the lemma of the entry ina larger font; recognizing both elements is necessary,because there could exist other paragraph elementswhich do not represent entries.
This preliminary struc-ture, which is not yet according to TEI, is used as thestarting point for the annotation process.<paragraph><W_2>Der Aal</W_2>,<W_1>des -- es, Mz.
die -- e</W_1>, ...</paragraph>The following annotation process derives an encod-ing based on the TEI P5 Guidelines (TEI Consortium,2009), using a Relax NG Schema.
The encoding struc-ture uses elements to markup an entry of a dictionary,which consists of 1) a form block with inflectional andmorphological information and 2) a sense block han-dling semantic description and references, quotations,related entries, usage as well as notes.
In the future,83Figure 1: Excerpt from the Campe DictionaryFigure 2: Rendering of an Annotated Entrythis encoding will help us to structure the digital worldaccording to semantic criteria and thus provide an es-sential basis for constructing reliable ontologies.
Theannotation of the form block and of the sense blockwill be described in the Sections 4 and 5, respectively.For both, we have to be able to handle many forms ofvariation.The Variation Problem.
Lexicographical structures,such as in the Campe Dictionay, can have a lot of varia-tion in entry and headword.
E.g., volume 1 has 26.940entries.
The morphological structure is as follows: at-tributes are used to form elements for the encoding ofinflectional, lexical and dialect variation [orthograph-ical, ...], as well as variation in usage.
In semanticalstructures, attributes to elements of the sense block areused to encode semantics.Variation could, e.g., consist of several headwordslinked by conjunctions like ?oder?
and ?und?
; the ad-ditional headwords are usually printed with a smallerfont size than the first headword of the entry.
The fol-lowing example shows such a variant with more thanone headword and its appropriate inflectional forms.Abbreviations like ?d.
Mz.
w. d.
Ez.?
or ?Mz.
s.
Ez.
?are defining a plural form with the same notation as thesingular.
These inflections have to be recognized andannotated; in the following preannotated example, thesingluar form element is repeated.<paragraph><W_2>Der Aalstreif</W_2>,<W_1>des -- es, Mz.
die -- e</W_1>,oder <W_1>der Aalstreifen, des?$0002.18 -- s</W_1>,d.
<W_1>Mz.</W_1> w. d. Ez.</paragraph>4 Annotating the Form Block in TEIWe use declarative programming in PROLOG and FN-QUERY as a solution for text conversion in general.
Inthe following, we will illustrate and discuss this fornouns and verbs.
This reflects our workflow for an-notating the Campe Dictionary, but our approach canalso be applied to other dictionaries.4.1 NounsThe lemma line ?Der Aal?
is encoded as follows:84<form type="lemma"><gramGrp><pos value="noun" /><gen value="m" /></gramGrp><form type="determiner"><orth>Der</orth></form><form type="headword"><orth>Aal</orth></form></form>For the inflected lemma line ?Mz.
die ?
e?
we wouldlike to obtain the following TEI structure:<form type="inflected"><gramGrp><gram type="number"><abbr>Mz.</abbr> </gram><case value="nominative"/><number value="plural"/></gramGrp><form type="determiner"><orth>die</orth></form><form type="headword"><orth><oVar><oRef>-- e</oRef></oVar></orth></form></form>The Parsing Workflow in PROLOG.
A sequence?Xs?
of form elements is read using the new PROLOGpredicate ?sequence?, which we have implemented.This is a compact way of specifying lists of tokens ofthe same type (in our case form).campe_parse_headword(Xs) -->sequence(?
*?, form, Xs).In standard PROLOG, we would have to encode this in amore verbous way using recursion.
In addition, the ruleabove uses the definite clause grammar (DCG) notation(?-->?)
of PROLOG (Gazdar, 1989; O?Keefe, 1990).For handling complex specifications, a more com-pact grammar formalism than standard DCG?s isneeded (Abramson, 1989; Sperberg?McQueen, 2003).For parsing text, we have mainly used an additionalgrammar formalism (?==>?
), which we have devel-oped, the so?called extended definite clause gram-mars (EDCG?s); the technical details of EDCG?s aredescribed in Schneiker et al (2009).
The followingEDCG rules can derive an XML structure that is veryclose to the TEI for the inflected lemma line above.
Therules almost look like the rules of a context?free gram-mar.
A form element consists of a grammar determinerfollowed by a form headword.form ==>grammar_determiner,form_headword.A grammar determiner is either a gram element fol-lowed by a determiner, or simply a determiner.
Thealternative is encoded by ?
;?, which stands for ?or?
inPROLOG.
The cut ?!?
freezes the first alternative, if wedetect a gram element; i.e., then a simple determiner isnot allowed.grammar_determiner ==>( gram, !, determiner; determiner ).Tokens from the input strean are read using the list no-tation ?[...]?.
A gram element can only be of the form?Mz.
?, and a determiner is a token ?X?, that is a campedeterminer.
The bracket notation ?{...}?
does not readfrom the input stream; instead, it is used for expressingtest conditions on the tokens.gram ==> [?Mz.?
].determiner ==> [X],{ campe_is_determiner(X) }.Finally, a form headword is an orth element, which it-self must be the sequence ?--?
followed by any othertoken.
The wildcard for arbitrary tokens is the anony-mous variable ?_?
of PROLOG.form_headword ==> orth.orth ==> [?--?, _].The 6 EDCG rules above form an EDCG grammar,which can be applied to the stream of input tokens.Thus, we obtain the following XML structure; the tagnames are generically taken from the EDCG rules.
Atthis stage, the most important and complicated steps ofthe parsing have been done.
In some further steps offine tuning, the desired TEI structure can be obtainedusing XSLT or the FNTRANSFORM component of FN-QUERY.<form><grammar_determiner><gram>Mz.</gram><determiner>die</determiner></grammar_determiner><form_headword><orth>-- e</orth></form_headword></form>Finally, sequences of campe headwordscan be parsed using the PROLOG predicate?campe_parse_headword?.Visualization of EDCG Rules.
EDCG?s could beeasily visualized using derivation trees (Figure 3); eachnon?terminal is shown in an ellipse, the terminals aredenoted by rectangles, representing the leaves of the85formgrammer_determiner form_headwordgram determinervdeterminerMz.
campe_is_determiner campe_is_determinerorth[--, _]Figure 3: Visualization of the EDCG-rules for parsing formstree.
Nodes could be either emtpy circles for conjunc-tions ?
the ?,?
in the EDCG?s ?
or circles with a ???
fora logical disjunctions ?
denoted by ?;?
in PROLOG.Handling of Variation.
Grammar formalisms likeDCG?s or EDCG?s can very well handle variation.
Thedifferent alternatives can be represented using multiplerules for an XML element or by the alternative construct?;?
within a single rule.
Moreover, since our grammarformalisms are very compact and thus easily readable,it is possible for the implementer to understand evenlarger sets of rules and to keep track of the complexstructures.Finally, when several ways of parsing a sequenceof tokens are possible, the backtracking mechanism ofPROLOG explores all alternatives, and it can return allpossible results.
If later inconsistencies make previouschoices of parsing rules impossible, then PROLOG goesback to the last choice point and explores the next alter-native.
In other programming languages, backtrackinghas to be implemented explicitely, whereas it is implicitin PROLOG.
This overhead makes backtracking moredifficult to handle in other programming languages.4.2 VerbsEach verb could have additional information about itscorresponding part of speech.
This information is high-lighted with a roman font type in the Campe Dictionaryand 8 groups could be isolated:v. 7?
?verb?,imp.
7?
?impersonal?,intr.
7?
?intransitive?,ntr.
7?
?neuter?,rec.
7?
?reciprocal?,regelm.
7?
?regular?,trs.
7?
?transitive?,unregelm.
7?
?irregular?In our base file, we find two different variants of pre?annotated pos elements depending on the current pro-cessing stage:<A>v.</A><A>trs.</A><A>unregel.</A>or<hi _>v.</hi><hi _>trs.</hi><hi _>unregel.</hi>where ?_?
stands for the attribute/value pair?rend=?roman?
?, which would be annotated asfollows:<gramGrp><pos value="verb"><abbr><hi rend="roman">v.
</hi></abbr></pos><subc value="transitive"><abbr>trs.</abbr></subc><subc value="irregular"><abbr>unregelm.</abbr></subc></gramGrp>Inflected forms are possible for verbs, too.865 Annotating the Sense Block in TEILists in the sense block can have many different formsand a complex nesting structure, like different senseblocks, citations, hyphenations, references and differ-ent font types.For annotating these sequences and variation, we fre-quently use the predicate sequence of the DDK.
More-over, for parsing lists, we make extensive use of PRO-LOG?s backtracking feature.5.1 Structuring the Sense BlockThe sense block could have a complex nesting structurefor defining different meanings of a lemma.
In a printeddictionary, often arabic or roman numbers a used forcreating a fine?grained structure.<W_2>Aba?ngsten und Aba?ngstigen</W_2>,<abbr><A>v.</A></abbr>I) <abbr><A>trs.</A></abbr>1) Sehr a?ngsten oder ...2) Durch Angstmachen zu etwas ...II) <abbr><A>rec.</A></abbr> ...<W_1>Das Aba?ngsten,<lb n="0003.91" /> Aba?ngstigen.Die Aba?ngstung, Aba?ngstigung</W_1>.Each sense could be part of another subsense, or anew sense could be created.
Using PROLOG?s back-tracking feature, we can find a suitable interpretationof such a structure and annotate it in XML:<sense n="I"><lbl type="ordering">I)</lbl> ...<sense n="1"><lbl type="ordering">1)</lbl> ...</sense><sense n="2"><lbl type="ordering">2)</lbl> ...</sense></sense>PROLOG is very well?suited for parsing such nestedstructures.
In general, roman or arabic numberingcould be used for a listing at any depth.
E.g., the text1)...2)...1)...2)...3)could be structured as a list ?1,2(1,2,3)?
with twoelements, where the second element has three subele-ments, or as a list ?1,2(1,2),3?
with three elements,where the second element has two subelements.
Bothalternatives can be generated by backtracking.
But, ifwe extend the text by ?...3)?, then our PROLOG ap-proach correctly structures the above prefix in the firstway; otherwise there would be two consecutive top?listelements with the same numbering.5.2 Citations and ReferencesCitations and cross references to other entries are usedall over the text corpus.Citations.
Often, citations could be recognized bybible citations and names of authers like Lessing orRichter, which are often pre?annotated in a larger fontsize.Um Geld zu fischen, Geld!
Um Geld,?$0004.71 Geld einem Juden<W_1>abzubangen</W_1>, Geld!<W_1>Lessing</W_1>.These citations are annotated with a cit tag contain-ing the citation as a quote tag and the correspondingauthor in bibl and author.<cit type="quote"><quote> ... </quote><bibl><author n="#Lessing"><hi rend="spaced">Lessing</hi></author></bibl></cit>References.
Cross references to other entries of theCampe Dictionary are usally marked with ?S.
?, ?Sieheda?
or ?s.a.?
in the sense block.<W_1>Die Abberufung</W_1>.
S. d.<W_1>s.
Essiga?lchen, Kleistera?lchen</W_1>These references are annoated with xr containing anlbl tag with an attribute for marking it as a reference.The target of this references is annotated with ref andthe corresponding entries as the target attribute.<xr><lbl type="reference">s.</lbl><ref target="Essiga?lchen, Kleistera?lchen">Essiga?lchen<c type="$,">,</c>Kleistera?lchen</ref></xr>5.3 PunctuationFor annotating punctuation in a lemma, which can ap-pear between single headwords, the DCG predicatecampe_punctuation is used: for each token we checkif it is a punctuation mark, and ?
if so ?
annotate itwith a c tag.
The meta?predicate sequence used inthe DCG predicate campe_punctuations parses sucha list of elements.campe_punctuations(Xs) -->sequence(?
*?,campe_punctuation, Xs).87campe_punctuation(X) -->( [A],{ is_punctuation(A), X = c:[A] }; [X] ).5.4 Linebreaks and HyphenationsLinear structures like linebreaks and hyphenations areparsed using a combination of FNQUERY and DCG?s.A linebreak is annotated as an lb element; e.g.,?$0001.24 becomes <lb n="0001.24" />.
In thebase file, each hyphenation is labeled with an equalssign as a separator followed by a line break element.auf Muenzen das Zei=<lb n="0001.24" />chen der ersten StadtThe hyphenation itself should not be visual later inthe rendered representation of the XML document, sowe have removed the delimiter symbol and defined thissyllable division as an attribute rend of the surrounding<w> element.
1auf Muenzen das<w rend="Zei-chen">Zei=<lb n="0001.24"/>chen</w>der ersten StadtThis sequence could be parsed easily with stan-dard DCG rules in PROLOG.
The predicatecreate_hyphenation_element creates the hyphen-ation XML element with the required attribute and con-tent.campe_hyphenations(Xs) -->sequence(?
*?,campe_hyphenation, Xs).campe_hyphenation(X) -->( campe_hyphenation_element(X); [X] ).The difference between standard DCG?s (operator?-->?)
and the new EDCG formalism (operator ?==>?
)proposed by us is that EDCG?s are more compact andmore readable, since they hide the output argumentsfor the derived syntax tree and produce a generic XMLstructure instead.5.5 Font TypesThe different font types in the Campe Dictionary, likethe roman font family or larger fonts sizes for head-words and inflected forms, are pre?annotated in thecapturing process.1We would like to remark that for a better text processingan additional attribute is required.
This attribute has to repre-sent the correct spelling of the hyphenated word without anydelimiter symbolFor transforming these annotations according to ourTEI schema, we used our transforming technologyFNTRANSFORM which is implemented in PROLOG.These transformations could also be processed usingXSLT stylesheets.6 Conclusions and Future WorkFor retro?digitizing old printed German dictionaries,we have presented a workflow for parsing and annotat-ing these text corpora according to the Text EncodingInitiative.
With declarative programming techniqueslike EDCG?s and FNQUERY, a fast and reliable parsercould be implemented.
Combined with transformationlanguages like FNTRANSFORM and XSLT, we are ableto handle different types of variation, such as differ-ent types of entries, inflected forms, lemma variants,and flexible XML schemas.
To exemplify these anno-tations, we have processed the Campe Dictionary with6 volumes and over 140.000 different entries.
The tech-niques, which we have applied to the German CampeDictionary, could be used for handling other types oftext copora as well, and of course also other languageslike English or French.In a current project, a web interface for a free com-munity access is implemented for our toolkit as astreaming editor.
With this editor, an easy to use graph-ical user interface gives access to a huge platform forparsing and annotating text corpora for the eHumani-ties, with the ability to reuse the already implementedparser for handling other text corpora.
The declarativetoolkit DDK, which includes all of the described frame-works, is available on the web.A subject of future work will be the implementationof an XSLT preprocessor in PROLOG to provide a nativeinterface for handling EDCG?s within XSLT; the pathlanguage XPATH is already implemented in our XMLtoolkit FNQUERY.ReferencesABRAMSON, H.; DAHL, V.: Logic Grammars.Springer, 1989BLU?MM, M.
(ed.
): Die textsortenspezifische Kern-kodierung fu?r Dokumente in TEI P5, TextGrid 2007,2009.http://www.textgrid.de/fileadmin/TextGrid/reports/Textsortenspezifische Kernkodierung 2009.pdf,accessed 30.04.2009CAMBRIDGE UNIVERSITY PRESS CATALOGUE, ADictionary of the English Language on CD?ROM.http://www.cambridge.org/catalogue/catalogue.asp?isbn=9780521557658, accessed 30.04.2009CAMPE, Joachim Heinrich: Wo?rterbuch der deutschenSprache.
5 Volumes, Braunschweig 1807?1811COVINGTON, M.A.
: GULP 3.1: An Extension ofProlog for Unification?Based Grammar.
Research88Report AI?1994?06, Artificial Intelligence Center,University of Georgia, 1994DEREKO: The German Reference Corpus Project.http://www.ids-mannheim.de/kl/projekte/korpora/,2009FUCHS, N.E.
; FROMHERZ, M.P.J.
: TransformationalDevelopment of Logic Programs from ExecutableSpecifications ?
Schema Based Visual and Tex-tual Composition of Logic Programs.
Beckstein, C.;Geske, U.
(eds.
), Entwicklung, Test und Wartungdeklarativer KI?Programme, GMD Studien Nr.
238,Gesellschaft fu?r Informatik und Datenverarbeitung,1994FUCHS, N.E.
; SCHWITTER, R.: Specifying Logic Pro-grams in Controlled Natural Language.
Proc.
Work-shop on Computational Logic for Natural LanguageProcessing (CLNP), 1995GA?RTNER, K.; WISBEY, R.: Die Bedeutung desComputers fu?r die Edition altdeutscher Texte.
Kriti-sche Bewahrung.
Beitra?ge zur deutschen Philologie.Festschrift fu?r Werner Schro?der zum 60.
Geburtstag.Hg.
von Ernst?Joachim Schmidt, Berlin, 1974GAZDAR, G.; MELLISH, C. Natural Language Pro-cessing in Prolog.
An Introduction to ComputationalLinguistics.
Addison?Wesley, 1989HAUSMANN, F.J.; REICHMANN, O.; WIEGAND, H.E.
;ZGUSTA, L.
(eds.
): Wo?rterbu?cher / Dictionaries /Dictionnaires ?
Ein internationales Handbuch zurLexikographie / An International Encyclopedia ofLexicography / Encyclope?die internationale de lex-icographie.
Vol.
1 1989; Vol.
2 1990; Vol.
3 1991;Berlin et.
al.HIRAKAWA, H.; ONO, K.; YOSHIMURA, Y.: Auto-matic Refinement of a POS Tagger Using a Reli-able Parser and Plain Text Corpora.
Proc.
18th Inter-national Conference on Computational Linguistics(COLING), 2000LANDAU, S.: Dictionaries.
The Art and Craft of Lexi-cography.
2nd Edition, Cambridge, 2001LLOYD, J.: Practical Advantages of Declarative Pro-gramming.
CSLI Lecture Notes, Number 10, 1987MCDERMOTT, A.
(ed.
): Samuel Johnson.
A Dictionaryof the English Language on CD?ROM.
The First andFourth Edition.
Introduction and CD, Cambridge,1996O?KEEFE, R.A.: The Craft of Prolog.
MIT Press, 1990PEREIRA, F.C.N.
; SHIEBER, S.M: Prolog and NaturalLanguage Analysis.
Lecture Notes, CSLI, Number10, 1987SCHNEIKER, C.; SEIPEL, D.; WEGSTEIN, W.;PRA?TOR, K.: Declarative Parsing and Annota-tion of Electronic Dictionaries.
Proc.
6th Interna-tional Workshop on Natural Language Processingand Cognitive Science (NLPCS), 2009SCHWITTER, R.: Working for Two: a BidirectionalGrammer for a Controlled Natural Language.
Proc.28th International Conference on Artificial Intelli-gence (AI), 2008SEIPEL, D.: Processing XML?Documents in Prolog.Proc.
17th Workshop on Logic Programmierung(WLP), 2002SEIPEL, D.; PRA?TOR, K.: XML TransformationsBased on Logic Programming.
Proc.
18th Workshopon Logic Programming (WLP), 2005SPERBERG?MCQUEEN, C. M.: Logic Grammars andXML Schema.
Proc.
Conference on Extreme MarkupLanguages, 2003.TEI CONSORTIUM (eds.
): TEI P5: Guidelines forElectronic Text Encoding and Interchange.
2 Vols.Oxford/Providence/Charlotteville/Nancy, 2008http://www.tei-c.org/release/doc/tei-p5-doc/en/html/index.html, accessed 30.04.2009TEXTGRID: A Modular Platform for CollaborativeTextual Editing ?
a Community Grid for the Human-ities.
http://www.textgrid.de, 200989
