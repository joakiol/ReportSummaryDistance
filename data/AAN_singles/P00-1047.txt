A Polynomial-Time Fragment of Dominance ConstraintsAlexander Koller Kurt Mehlhorn?
Joachim Niehrenkoller@coli.uni-sb.de mehlhorn@mpi-sb.mpg.de niehren@ps.uni-sb.deUniversity of the Saarland / ?Max-Planck-Institute for Computer ScienceSaarbru?cken, GermanyAbstractDominance constraints are logicaldescriptions of trees that are widelyused in computational linguistics.Their general satisfiability problemis known to be NP-complete.
Herewe identify the natural fragment ofnormal dominance constraints andshow that its satisfiability problemis in deterministic polynomial time.1 IntroductionDominance constraints are used as partialdescriptions of trees in problems through-out computational linguistics.
They havebeen applied to incremental parsing (Mar-cus et al, 1983), grammar formalisms (Vijay-Shanker, 1992; Rambow et al, 1995; Duchierand Thater, 1999; Perrier, 2000), discourse(Gardent and Webber, 1998), and scope un-derspecification (Muskens, 1995; Egg et al,1998).Logical properties of dominance constraintshave been studied e.g.
in (Backofen et al,1995), and computational properties havebeen addressed in (Rogers and Vijay-Shanker,1994; Duchier and Gardent, 1999).
Here, thetwo most important operations are satisfia-bility testing ?
does the constraint describe atree?
?
and enumerating solutions, i.e.
thedescribed trees.
Unfortunately, even the sat-isfiability problem has been shown to be NP-complete (Koller et al, 1998).
This has sheddoubt on their practical usefulness.In this paper, we define normal domi-nance constraints, a natural fragment of dom-inance constraints whose restrictions shouldbe unproblematic for many applications.
Wepresent a graph algorithm that decides sat-isfiability of normal dominance constraintsin polynomial time.
Then we show how touse this algorithm to enumerate solutions ef-ficiently.An example for an application of normaldominance constraints is scope underspecifi-cation: Constraints as in Fig.
1 can serveas underspecified descriptions of the semanticreadings of sentences such as (1), consideredas the structural trees of the first-order rep-resentations.
The dotted lines signify domi-nance relations, which require the upper nodeto be an ancestor of the lower one in any treethat fits the description.
(1) Some representative of everydepartment in all companies saw asample of each product.The sentence has 42 readings (Hobbs andShieber, 1987), and it is easy to imaginehow the number of readings grows exponen-tially (or worse) in the length of the sen-tence.
Efficient enumeration of readings fromthe description is a longstanding problem inscope underspecification.
Our polynomialalgorithm solves this problem.
Moreover,the investigation of graph problems that areclosely related to normal constraints allows usto prove that many other underspecificationformalisms ?
e.g.
Minimal Recursion Seman-tics (Copestake et al, 1997) and Hole Seman-tics (Bos, 1996) ?
have NP-hard satisfiabilityproblems.
Our algorithm can still be used asa preprocessing step for these approaches; infact, experience shows that it seems to solveall encodings of descriptions in Hole Seman-tics that actually occur.
?u ??
?comp ?u ??
?w ??
??
??
dept ?w ??
?x ??
??
??
repr ?x ??
?y ??
??
?
?spl ?y ??
?z ??
?prod ?z ?
?in ?w ?
u ?of ?x ?
w ?see ?x ?
y ?of ?y ?
z ?Fig.
1: A dominance constraint (from scope underspecification).2 Dominance ConstraintsIn this section, we define the syntax and se-mantics of dominance constraints.
The vari-ant of dominance constraints we employ de-scribes constructor trees ?
ground terms overa signature of function symbols ?
rather thanfeature trees.f ?g ?a ?
a ?Fig.
2: f(g(a, a))So we assume a signa-ture ?
function symbolsranged over by f, g, .
.
.,each of which is equippedwith an arity ar(f) ?0.
Constants ?
functionsymbols of arity 0 ?
are ranged over by a, b.We assume that ?
contains at least one con-stant and one symbol of arity at least 2.Finally, let Vars be an infinite set of vari-ables ranged over by X,Y,Z.
The variableswill denote nodes of a constructor tree.
Wewill consider constructor trees as directed la-beled graphs; for instance, the ground termf(g(a, a)) can be seen as the graph in Fig.
2.We define an (unlabeled) tree to be a fi-nite directed graph (V,E).
V is a finite set ofnodes ranged over by u, v, w, and E ?
V ?
Vis a set of edges denoted by e. The indegree ofeach node is at most 1; each tree has exactlyone root, i.e.
a node with indegree 0.
We callthe nodes with outdegree 0 the leaves of thetree.A (finite) constructor tree ?
is a pair (T,L)consisting of a tree T = (V,E), a node labelingL : V ?
?, and an edge labeling L : E ?N, such that for each node u ?
V and each1 ?
k ?
ar(L(u)), there is exactly one edge(u, v) ?
E with L((u, v)) = k.1 We draw1The symbol L is overloaded to serve both as anode and an edge labeling.constructor trees as in Fig.
2, by annotatingnodes with their labels and ordering the edgesalong their labels from left to right.
If ?
=((V,E), L), we write V?
= V , E?
= E, L?
=L.
Now we are ready to define tree structures,the models of dominance constraints:Definition 2.1.
The tree structure M?
ofa constructor tree ?
is a first-order structurewith domain V?
which provides the dominancerelation ??
and a labeling relation for eachfunction symbol f ?
?.Let u, v, v1, .
.
.
vn ?
V?
be nodes of ?
.
Thedominance relationship u?
?v holds iff thereis a path from u to v in E?
; the labeling rela-tionship u:f ?
(v1, .
.
.
, vn) holds iff u is labeledby the n-ary symbol f and has the childrenv1, .
.
.
, vn in this order; that is, L?
(u) = f ,ar(f) = n, {(u, v1), .
.
.
, (u, vn)} ?
E?
, andL?
((u, vi)) = i for all 1 ?
i ?
n.A dominance constraint ?
is a conjunctionof dominance, inequality, and labeling literalsof the following form where ar(f) = n:?
::= ?
?
??
| X?Y | X 6=Y| X:f(X1, .
.
.
, Xn)X 1 X 2YX fFig.
3: An unsat-isfiable constraintLet Var(?)
be the set ofvariables of ?.
A pair ofa tree structure M?
anda variable assignment ?
:Var(?)
?
V?
satisfies ?iff it satisfies each literalin the obvious way.
Wesay that (M?
, ?)
is a solution of ?
in thiscase; ?
is satisfiable if it has a solution.We usually draw dominance constraints asconstraint graphs.
For instance, the con-straint graph for X:f(X1, X2) ?
X1?Y ?X2?Y is shown in Fig.
3.
As for trees, weannotate node labels to nodes and order treeedges from left to right; dominance edges aredrawn dotted.
The example happens to beunsatisfiable because trees cannot branch up-wards.Definition 2.2.
Let ?
be a dominance con-straint that does not contain two labeling con-straints for the same variable.2 Then the con-straint graph for ?
is a directed labeled graphG(?)
= (Var(?
), E, L).
It contains a (par-tial) node labeling L : Var(?)
?
and anedge labeling L : E ?
N ?
{?
}.The sets of edges E and labels L ofthe graph G(?)
are defined in dependenceof the literals in ?
: The labeling literalX:f(X1, .
.
.
, Xn) belongs to ?
iff L(X) = fand for each 1 ?
i ?
n, (X,Xi) ?
E andL((X,Xi)) = i.
The dominance literal X?Yis in ?
iff (X,Y ) ?
E and L((X,Y )) = ?.Note that inequalities in constraints are notrepresented by the corresponding constraintgraph.
We define (solid) fragments of a con-straint graph to be maximal sets of nodes thatare connected over tree edges.3 Normal Dominance ConstraintsSatisfiability of dominance constraints can bedecided easily in non-deterministic polyno-mial time; in fact, it is NP-complete (Kolleret al, 1998).X 1 X 2fY fY 1 Y 2XFig.
4: OverlapThe NP-hardnessproof relies on thefact that solid frag-ments can ?overlap?properly.
For illustra-tion, consider the con-straint X:f(X1, X2) ?Y :f(Y1, Y2) ?
Y ?X ?
X?Y1, whose con-straint graph is shown in Fig.
4.
In a solu-tion of this constraint, either Y or Y1 must bemapped to the same node as X; if X = Y ,the two fragments overlap properly.
In theapplications in computational linguistics, wetypically don?t want proper overlap; X should2Every constraint can be brought into this form byintroducing auxiliary variables and expressing X=Yas X?Y ?
Y ?X.never be identified with Y , only with Y1.
Thesubclass of dominance constraints that ex-cludes proper overlap (and fixes some minorinconveniences) is the class of normal domi-nance constraints.Definition 3.1.
A dominance constraint ?is called normal iff for all variables X,Y,Z ?Var(?),1.
X 6= Y in ?
iff both X:f(.
.
.)
andY :g(.
.
.)
in ?, where f and g may beequal (no overlap);32.
X only appears once as a parent andonce as a child in a labeling literal (tree-shaped fragments);3. if X?Y in ?, neither X:f(.
.
.)
norZ:f(.
.
.
Y .
.
.)
are (dominances go fromholes to roots);4. if X?Y in ?, then there are Z, f suchthat Z:f(.
.
.
X .
.
.)
in ?
(no empty frag-ments).Fragments of normal constraints are tree-shaped, so they have a unique root and leaves.We call unlabeled leaves holes.
If X is a vari-able, we can define R?
(X) to be the root ofthe fragment containing X.
Note that byCondition 1 of the definition, the constraintgraph specifies all the inequality literals in anormal constraint.
All constraint graphs inthe rest of the paper will represent normalconstraints.The main result of this paper, which weprove in Section 4, is that the restriction tonormal constraints indeed makes satisfiabilitypolynomial:Theorem 3.2.
Satisfiability of normal domi-nance constraints is O((k+1)3n2 log n), wheren is the number of variables in the constraint,and k is the maximum number of dominanceedges into the same node in the constraintgraph.In the applications, k will be small ?
inscope underspecification, for instance, it is3Allowing more inequality literals does not makesatisfiability harder, but the pathological case X 6= Xinvalidates the simple graph-theoretical characteriza-tions below.bounded by the maximum number of argu-ments a verb can take in the language if wedisregard VP modification.
So we can saythat satisfiability of the linguistically relevantdominance constraints is O(n2 log n).4 A Polynomial Satisfiability TestNow we derive the satisfiability algorithmthat proves Theorem 3.2 and prove it correct.In Section 5, we embed it into an enumera-tion algorithm.
An alternative proof of The-orem 3.2 is by reduction to a graph problemdiscussed in (Althaus et al, 2000); this moreindirect approach is sketched in Section 6.Throughout this section and the next, wewill employ the following non-deterministicchoice rule (Distr), where X,Y are differentvariables.
(Distr) ?
?
X?Z ?
Y ?Z?
?
?X?R?
(Y ) ?
Y ?Z?
?
?
Y ?R?
(X) ?
X?ZIn each application, we can pick one of thedisjuncts on the right-hand side.
For instance,we get Fig.
5b by choosing the second disjunctin a rule application to Fig.
5a.The rule is sound if the left-hand side is nor-mal: X?Z ?
Y ?Z entails X?Y ?
Y ?X,which entails the right-hand side disjunctionbecause of conditions 1, 2, 4 of normality andX 6= Y .
Furthermore, it preserves normality:If the left-hand side is normal, so are bothpossible results.Definition 4.1.
A normal dominance con-straint ?
is in solved form iff (Distr) is notapplicable to ?
and G(?)
is cycle-free.Constraints in solved form are satisfiable.4.1 Characterizing SatisfiabilityIn a first step, we characterize the unsatisfia-bility of a normal constraint by the existenceof certain cycles in the undirected version ofits graph (Proposition 4.4).
Recall that a cy-cle in a graph is simple if it does not containthe same node twice.Definition 4.2.
A cycle in an undirectedconstraint graph is called hypernormal if itdoes not contain two adjacent dominanceedges that emanate from the same node.f ??
Xg ??
Y ?a ?
Z b ?g ??
Yf ??
X?a ?
Z b ?
(a) (b)Fig.
5: (a) A constraint that entails X?Y ,and (b) the result of trying to arrange Yabove X.
The cycle in (b) is hypernormal,the one in (a) is not.For instance, the cycle in the left-handgraph in Fig.
5 is not hypernormal, whereasthe cycle in the right-hand one is.Lemma 4.3.
A normal dominance constraintwhose undirected graph has a simple hyper-normal cycle is unsatisfiable.Proof.
Let ?
be a normal dominance con-straint whose undirected graph contains asimple hypernormal cycle.
Assume first thatit contains a simple hypernormal cycle C thatis also a cycle in the directed graph.
There isat least one leaf of a fragment on C; let Ybe such a leaf.
Because ?
is normal, Y hasa mother X via a tree edge, and X is on Cas well.
That is, X must dominate Y but isproperly dominated by Y in any solution of?, so ?
is unsatisfiable.In particular, if an undirected constraintgraph has a simple hypernormal cycle C withonly one dominance edge, C is also a directedcycle, so the constraint is unsatisfiable.
Nowwe can continue inductively.
Let ?
be a con-straint with an undirected simple hypernor-mal cycle C of length l, and suppose we knowthat all constraints with cycles of length lessthan l are unsatisfiable.
If C is a directedcycle, we are done (see above); otherwise,the edges in C must change directions some-where.
Because ?
is normal, this means thatthere must be a node Z that has two incomingdominance edges (X,Z), (Y,Z) which are ad-jacent edges in C. If X and Y are in the samefragment, ?
is trivially unsatisfiable.
Other-wise, let ?1 and ?2 be the two constraints ob-tained from ?
by one application of (Distr) toX,Y,Z.
Let C1 be the sequence of edges weobtain from C by replacing the path from Xto R?
(Y ) via Z by the edge (X,R?
(Y )).
Cis hypernormal and simple, so no two dom-inance edges in C emanate from the samenode; hence, the new edge is the only dom-inance edge in C1 emanating from X, andC1 is a hypernormal cycle in the undirectedgraph of ?1.
C1 is still simple, as we haveonly removed nodes.
But the length of C1is strictly less than l, so ?1 is unsatisfiableby induction hypothesis.
An analogous ar-gument shows unsatisfiability of ?2.
But be-cause (Distr) is sound, this means that ?
isunsatisfiable too.Proposition 4.4.
A normal dominance con-straint is satisfiable iff its undirected con-straint graph has no simple hypernormal cy-cle.Proof.
The direction that a normal constraintwith a simple hypernormal cycle is unsatisfi-able is shown in Lemma 4.3.For the converse, we first define an ordering?1 ?
?2 on normal dominance constraints: itholds if both constraints have the same vari-ables, labeling and inequality literals, and ifthe reachability relation of G(?1) is a subsetof that of G(?2).
If the subset inclusion isproper, we write ?1 < ?2.
We call a con-straint ?
irredundant if there is no normalconstraint ??
with fewer dominance literalsbut ?
?
??.
If ?
is irredundant and G(?
)is acyclic, both results of applying (Distr) to?
are strictly greater than ?.Now let ?
be a constraint whose undirectedgraph has no simple hypernormal cycle.
Wecan assume without loss of generality that?
is irredundant; otherwise we make it irre-dundant by removing dominance edges, whichdoes not introduce new hypernormal cycles.If (Distr) is not applicable to ?, ?
is insolved form and hence satisfiable.
Otherwise,we know that both results of applying the ruleare strictly greater than ?.
It can be shownthat one of the results of an application of thedistribution rule contains no simple hypernor-mal cycle.
We omit this argument for lack ofspace; details can be found in the proof ofTheorem 3 in (Althaus et al, 2000).
Further-more, the maximal length of a < increasingchain of constraints is bounded by n2, wheren is the number of variables.
Thus, appli-cations of (Distr) can only be iterated a fi-nite number of times on constraints withoutsimple hypernormal cycles (given redundancyelimination), and it follows by induction that?
is satisfiable.4.2 Testing for Simple HypernormalCyclesWe can test an undirected constraint graphfor the presence of simple hypernormal cyclesby solving a perfect weighted matching prob-lem on an auxiliary graph A(G(?)).
Perfectweighted matching in an undirected graphG = (V,E) with edge weights is the prob-lem of selecting a subset E ?
of edges such thateach node is adjacent to exactly one edge inE?, and the sum of the weights of the edgesin E?
is maximal.The auxiliary graph A(G(?))
we consider isan undirected graph with two types of edges.For every edge e = (v, w) ?
G(?)
we havetwo nodes ev, ew in A(G(?)).
The edges areas follows:(Type A) For every edge e in G(?)
we havethe edge {ev, ew}.
(Type B) For every node v and distinctedges e, f which are both incident to vin G(?
), we have the edge {ev, fv} if ei-ther v is not a leaf, or if v is a leaf andeither e or f is a tree edge.We give type A edges weight zero and type Bedges weight one.
Now it can be shown (Al-thaus et al, 2000, Lemma 2) that A(G(?
))has a perfect matching of positive weight iffthe undirected version of G(?)
contains a sim-ple hypernormal cycle.
The proof is by con-structing positive matchings from cycles, andvice versa.Perfect weighted matching on a graph withn nodes and m edges can be done in timeO(nm log n) (Galil et al, 1986).
The match-ing algorithm itself is beyond the scope ofthis paper; for an implementation (in C++)see e.g.
(Mehlhorn and Na?her, 1999).
Nowlet?s say that k is the maximum number ofdominance edges into the same node in G(?
),then A(G(?))
has O((k + 1)n) nodes andO((k + 1)2n) edges.
This shows:Proposition 4.5.
A constraint graph can betested for simple hypernormal cycles in timeO((k + 1)3n2 log n), where n is the number ofvariables and k is the maximum number ofdominance edges into the same node.This completes the proof of Theorem 3.2:We can test satisfiability of a normal con-straint by first constructing the auxiliarygraph and then solving its weighted match-ing problem, in the time claimed.4.3 Hypernormal ConstraintsIt is even easier to test the satisfiability ofa hypernormal dominance constraint ?
a nor-mal dominance constraint in whose constraintgraph no node has two outgoing dominanceedges.
A simple corollary of Prop.
4.4 for thisspecial case is:Corollary 4.6.
A hypernormal constraint issatisfiable iff its undirected constraint graph isacyclic.This means that satisfiability of hypernor-mal constraints can be tested in linear timeby a simple depth-first search.5 Enumerating SolutionsNow we embed the satisfiability algorithmsfrom the previous section into an algorithmfor enumerating the irredundant solved formsof constraints.
A solved form of the normalconstraint ?
is a normal constraint ??
whichis in solved form and ?
?
?
?, with respect tothe ?
order from the proof of Prop.
4.4.4Irredundant solved forms of a constraintare very similar to its solutions: Their con-straint graphs are tree-shaped, but may still4In the literature, solved forms with respect to theNP saturation algorithms can contain additional la-beling literals.
Our notion of an irredundant solvedform corresponds to a minimal solved form there.1.
Check satisfiability of ?.
If it is unsatis-fiable, terminate with failure.2.
Make ?
irredundant.3.
If ?
is in solved form, terminate with suc-cess.4.
Otherwise, apply the distribution ruleand repeat the algorithm for both results.Fig.
6: Algorithm for enumerating all irre-dundant solved forms of a normal constraint.contain dominance edges.
Every solution ofa constraint is a solution of one of its irre-dundant solved forms.
However, the numberof irredundant solved forms is always finite,whereas the number of solutions typically isnot: X:a?Y :b is in solved form, but each so-lution must contain an additional node witharbitrary label that combines X and Y into atree (e.g.
f(a, b), g(a, b)).
That is, we can ex-tract a solution from a solved form by ?addingmaterial?
if necessary.The main workhorse of the enumeration al-gorithm, shown in Fig.
6, is the distributionrule (Distr) we have introduced in Section 4.As we have already argued, (Distr) can be ap-plied at most n2 times.
Each end result is insolved form and irredundant.
On the otherhand, distribution is an equivalence transfor-mation, which preserves the total set of solvedforms of the constraints after the same itera-tion.
Finally, the redundancy elimination inStep 2 can be done in time O((k+1)n2) (Ahoet al, 1972).
This proves:Theorem 5.1.
The algorithm in Fig.
6 enu-merates exactly the irredundant solved formsof a normal dominance constraint ?
in timeO((k +1)4n4N log n), where N is the numberof irredundant solved forms, n is the numberof variables, and k is the maximum numberof dominance edges into the same node.Of course, the number of irredundantsolved forms can still be exponential in thesize of the constraint.
Note that for hypernor-mal constraints, we can replace the quadraticsatisfiability test by the linear one, and wecan skip Step 2 of the enumeration algorithmbecause hypernormal constraints are alwaysirredundant.
This improves the runtime ofenumeration to O((k + 1)n3N).6 ReductionsInstead of proving Theorem 4.4 directly aswe have done above, we can also reduce it toa configuration problem of dominance graphs(Althaus et al, 2000), which provides a moregeneral perspective on related problems aswell.
Dominance graphs are unlabeled, di-rected graphs G = (V,E unionmulti D) with tree edgesE and dominance edges D. Nodes with no in-coming tree edges are called roots, and nodeswith no outgoing ones are called leaves; dom-inance edges only go from leaves to roots.
Aconfiguration of G is a graph G?
= (V,E unionmulti E?
)such that every edge in D is realized by a pathin G?.
The following results are proved in (Al-thaus et al, 2000):1.
Configurability of dominance graphs is inO((k + 1)3n2 log n), where k is the max-imum number of dominance edges intothe same node.2.
If we specify a subset V ?
?
V of closedleaves (we call the others open) and re-quire that only open leaves can haveoutgoing edges in E ?, the configurabilityproblem becomes NP-complete.
(Thisis shown by encoding a strongly NP-complete partitioning problem.)3.
If we require in addition that every openleaf has an outgoing edge in E ?, the prob-lem stays NP-complete.Satisfiability of normal dominance constraintscan be reduced to the first problem in thelist by deleting all labels from the constraintgraph.
The reduction can be shown to becorrect by encoding models as configurationsand vice versa.On the other hand, the third problem canbe reduced to the problems of whether thereis a plugging for a description in Hole Seman-tics (Bos, 1996), or whether a given MRS de-scription can be resolved (Copestake et al,1997), or whether a given normal dominanceconstraints has a constructive solution.5 Thisreduction is by deleting all labels and makingleaves that had nullary labels closed.
Thismeans that (the equivalent of) deciding satis-fiability in these approaches is NP-hard.The crucial difference between e.g.
satisfi-ability and constructive satisfiability of nor-mal dominance constraints is that it is pos-sible that a solved form has no constructivesolutions.
This happens e.g.
in the examplefrom Section 5, X:a ?
Y :b.
The constraint,which is in solved form, is satisfiable e.g.
bythe tree f(a, b); but every solution must con-tain an additional node with a binary label,and hence cannot be constructive.For practical purposes, however, it can stillmake sense to enumerate the irredundantsolved forms of a normal constraint even if weare interested only in constructive solution:It is certainly cheaper to try to find construc-tive solutions of solved forms than of arbitraryconstraints.
In fact, experience indicates thatfor those constraints we really need in scopeunderspecification, all solved forms do haveconstructive solutions ?
although it is not yetknown why.
This means that our enumera-tion algorithm can in practice be used withoutchange to enumerate constructive solutions,and it is straightforward to adapt it e.g.
toan enumeration algorithm for Hole Semantics.7 ConclusionWe have investigated normal dominance con-straints, a natural subclass of general dom-inance constraints.
We have given anO(n2 log n) satisfiability algorithm for themand integrated it into an algorithm that enu-merates all irredundant solved forms in timeO(Nn4 log n), where N is the number of irre-dundant solved forms.5A constructive solution is one where every nodein the model is the image of a variable for whicha labeling literal is in the constraint.
Informally,this means that the solution only contains ?material??mentioned?
in the constraint.This eliminates any doubts about thecomputational practicability of dominanceconstraints which were raised by the NP-completeness result for the general language(Koller et al, 1998) and expressed e.g.
in(Willis and Manandhar, 1999).
First experi-ments confirm the efficiency of the new algo-rithm ?
it is superior to the NP algorithmsespecially on larger constraints.On the other hand, we have argued thatthe problem of finding constructive solutionseven of a normal dominance constraint is NP-complete.
This result carries over to otherunderspecification formalisms, such as HoleSemantics and MRS.
In practice, however, itseems that the enumeration algorithm pre-sented here can be adapted to those problems.Acknowledgments.
We would like tothank Ernst Althaus, Denys Duchier, GertSmolka, Sven Thiel, all members of the SFB378 project CHORUS at the University of theSaarland, and our reviewers.
This work wassupported by the DFG in the SFB 378.ReferencesA.
V. Aho, M. R. Garey, and J. D. Ullman.
1972.The transitive reduction of a directed graph.SIAM Journal of Computing, 1:131?137.E.
Althaus, D. Duchier, A. Koller, K. Mehlhorn,J.
Niehren, and S. Thiel.
2000.
An ef-ficient algorithm for the configurationproblem of dominance graphs.
Submit-ted.
http://www.ps.uni-sb.de/Papers/abstracts/dom-graph.html.R.
Backofen, J. Rogers, and K. Vijay-Shanker.1995.
A first-order axiomatization of the the-ory of finite trees.
Journal of Logic, Language,and Information, 4:5?39.Johan Bos.
1996.
Predicate logic unplugged.
InProceedings of the 10th Amsterdam Colloquium.A.
Copestake, D. Flickinger, and I. Sag.1997.
Minimal Recursion Semantics.
An In-troduction.
Manuscript, ftp://csli-ftp.stanford.edu/linguistics/sag/mrs.ps.gz.Denys Duchier and Claire Gardent.
1999.
Aconstraint-based treatment of descriptions.
InProceedings of IWCS-3, Tilburg.D.
Duchier and S. Thater.
1999.
Parsing withtree descriptions: a constraint-based approach.In Proc.
NLULP?99, Las Cruces, New Mexico.M.
Egg, J. Niehren, P. Ruhrberg, and F. Xu.1998.
Constraints over Lambda-Structures inSemantic Underspecification.
In ProceedingsCOLING/ACL?98, Montreal.Z.
Galil, S. Micali, and H. N. Gabow.
1986.
AnO(EV log V ) algorithm for finding a maximalweighted matching in general graphs.
SIAMJournal of Computing, 15:120?130.Claire Gardent and Bonnie Webber.
1998.
De-scribing discourse semantics.
In Proceedings ofthe 4th TAG+ Workshop, Philadelphia.Jerry R. Hobbs and Stuart M. Shieber.
1987.An algorithm for generating quantifier scopings.Computational Linguistics, 13:47?63.A.
Koller, J. Niehren, and R. Treinen.
1998.
Dom-inance constraints: Algorithms and complexity.In Proceedings of the 3rd LACL, Grenoble.
Toappear as LNCS.M.
P. Marcus, D. Hindle, and M. M. Fleck.
1983.D-theory: Talking about talking about trees.In Proceedings of the 21st ACL.K.
Mehlhorn and S. Na?her.
1999.
TheLEDA Platform of Combinatorial and Geomet-ric Computing.
Cambridge University Press,Cambridge.
See also http://www.mpi-sb.mpg.de/LEDA/.R.A.
Muskens.
1995.
Order-independence andunderspecification.
In J. Groenendijk, editor,Ellipsis, Underspecification, Events and Morein Dynamic Semantics.
DYANA DeliverableR.2.2.C.Guy Perrier.
2000.
From intuitionistic proof netsto interaction grammars.
In Proceedings of the5th TAG+ Workshop, Paris.O.
Rambow, K. Vijay-Shanker, and D. Weir.1995.
D-Tree grammars.
In Proceedings of the33rd ACL, pages 151?158.J.
Rogers and K. Vijay-Shanker.
1994.
Obtainingtrees from their descriptions: An application totree-adjoining grammars.
Computational Intel-ligence, 10:401?421.K.
Vijay-Shanker.
1992.
Using descriptions oftrees in a tree adjoining grammar.
Computa-tional Linguistics, 18:481?518.A.
Willis and S. Manandhar.
1999.
Two accountsof scope availability and semantic underspecifi-cation.
In Proceedings of the 37th ACL.
