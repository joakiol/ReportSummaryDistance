CONCURRENT PARSING IN PROGRAMMABLE LOGIC ARRAY (PLA-) NETSPROBLEMS AND PROPOSALSHelmut SchnelleRUHR-Universit~t BochumSp~achwissenschaft l iches InstitutD-4630 Bochum 1West-GermanyABSTRACTThis contr ibution attempts a conceptual andpractical  introduction into the pr inciples ofwir ing or construct ing special machines for lan-guage processing tasks instead of programming auniversal machine.
Construct ion would in princi-ple provide higher descript ive adequacy in com-putat ional ly based linguistics.
After all, ourheads do not apply programs on stored symbolarrays but are appropriately wired for under-standing or producing language.Introductor~ Remarksi.
For me, computational l inguistics is notprimari ly a technical discipl ine implementingperformance processes for independently definedformal structures of l inguistic competence.Computational l inguistics should be a foundatio-nal discipline: It should be related to process-or iented linguistics as the theory of logicalcalculi is to formal l inguistics (e.g.
genera-tive linguistics, Montague-grammars etc.).2.
As it stands, computational l inguisticsdoes not yet meet the requirements for a founda-tional discipline.
Searle's arguments against theclaims of artif icial intell igence apply fully tocomputational linguistics: Programmed solutionsof tasks may execute the task satisfactori ly with-out giving a model of its execution in the orga-nism.
Our intentional l inguistic acts are causedby and realized in complicated concurrent pro-cesses occcurring in networks of neurons and areexperienced as spontaneous.
This also applies tospecial cases such as the recognit ion of syntac-tic structure (parsing).
These processes are notcontrolled and executed by central processorunits.3.
Computational l inguistics must meet thechallenge to satisfy the double criterion of des-criptive adequacy: Adequacy in the descript ion ofwhat human beings do (e.g.
parsing) and adequacyin the descript ion of ho__~w they do it (namely byspontaneous concurrent processes corresponding tounconscious intuit ive understanding).
It must tryto meet the challenge to provide the foundationsfor a descriptively and explanatori ly adequateprocess-or iented linguistic, even when it is clearthat the presently available conceptual means fordescribing complicated concurrent processes -mainly the elements of computer architecture -are far less understood than programming theoryand programming technique.4.
Note: It does not stand to quest ion thatthere is any problem which, in principle, couldnot be solved by programming.
It is simply thecase that almost all solutions are descr ipt ivelyinadequate for representing and understandingwhat goes on in human beings even where they pro-vide an adequate representation of input - outputrelations - and would thus pass Turing's test.5.
In my opinion, the main features to be rea-lized in more adequate computational systems are- concurrency of local ized operations (in-stead of central ly control led sequentialprocesses), and- signal processing (instead of symbol manipu-lation).These features cannot be represented by a programon an ordinary von Neumann machine since thistype of machine is by definit ion a sequential ,cen-trally control led symbol manipulator.
This doesnot exclude that programs may simulate concurrentprocesses.
For instance, programs for testinggate array designs are of this kind.
But simu-lating programs must clearly separate the fea-tures they simulate from the features which areonly specif ic for their sequential  operation.Electronic worksheet programs (in part icularthose used for p lanning and testing of gate arrays)are appropriate simulators of this type sincetheir display on the monitor shows the network andsignal flow whereas the specif ics of program exe-cut/on are concealed from the user.6.
How should computational l inguist ics be de-veloped to meet the chal lenge?
I think that thegeneral method has already been specif ied by yonNeumann and Burks in their attempt to compare be-havior and structure in computers and brains interms of cel lular automata.
They have shown inthis context that we have always two alternatives:Solutions for tasks can be real ized by programsto be executed on an universal central ly con-trol led (von Neumann) machine, or they can bereal ized by construct ing a machine.
Since ordi-nary - i.e.
non-cel lular-von-Neumann machines -are sequential, real ization of concurrent pro-cesses can only be approached by constructing (ordescribing the construction of such a system, e.g.the brain).150My Approach7.
In view of this, I have developed theoreti-cal net- l inguistics on the basis of neurologicalinsights.
My primary intention was to gain in-sights into the principles of construction andfunctionin~ (or structure and behavior) more thanto arrive at a very detai led descriptive neuro-logical adequacy (as e.g.
in H. Gigley's ap-proach, cp.
her contribution on this conference).8.
The method which to me seemed the mostfruitful one for pr incipled analysis is theone applied in systematic architecture for pro-cessor construction.
In setting up idealizedarchitectures we should proceed in steps:- select appropriate 9~erat iona lpr imi t ives ,- bui ld basic network modules and definetheir properties- construct complex networks from modulesshowing a behavior which is typical forthe field to be described.A possible choice is the following:- take logical operators of digital switchingnetworks as primitives (and show how theyare related to models of neurons),- take AND-planes and OR-planes (the consti-tuents of progralmmable array logic-PLA) to-gether with certain simple configurationssuch as shift-registers,- show how linguistic processes (such as gene-rators and parsers for CF grammars) could bedefined as a combination of basic modules.9.
The method is described and applied in Mead/Conway (1980).
They show how logical operatorscan be realized.
Their combination into a com-binational logic module presents three types ofdesign problems (cp.
ibid.
p. 77), the first twobeing simple, the third being related to our prob-lem: "a complex function must be implemented forwhich no direct mapping into a regular structureis known" (ibid.
p. 79).
"Fortunately, there is away to map irregular combinational functions ontoregular structures, using the progra/mnable logicarray (PLA) ...
This technique of implementingcombinational functions has a great advantage:functions may be signif icantly changed withoutrequiring major changes in either the design orlayout of the PLA structure.
\[Figure 13 il lus-trates the overall  structure of a PLA.
The diagramincludes the input and output registers, in orderto show how easi ly these are integrated into thePLA design.
The inputs stored during \[clocksig-nal\] ~l in the input register are run vert ical lythrough a matrix of circuit elements called theAND plane.
The AND plane generates specif ic logiccombinations of the inputs.
The outputs of theAND plane leave at r ight angles to its input andrun horizontal ly through another matr ix cal ledthe OR plane.
The outputs of the OR plane thenrun vertical ly and are stored in the output re-gister during \[clocksignal\] ~2" (ibid.
p. 80).F?
"~ ~w l,lal,e~Pt " ~ I-- ROgA s terLI ...............
I"----'l OR p|anq1 .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
l~'l~Ju,e I; Ovegall stcucLuro of Z|,a PLA Icf.
Mea,\]/Conway, 1980, |,.
81k"There is a very straightforward way to imple-ment finite state machines in integrated systems:we use the PLA form of combinational logic andfeedback some of the outputs to inputs ... Thecircuit 's structure is topological ly regular, hasa reasonable topological interface as a subsystem,and is of a shape and size which are functions ofthe appropriate parameters.
The function of thiscircuit is determined by the 'programming' of itsPLA logic" (ibid.
p. 84).iO.
As a first example of the appl ication ofthese methods, it has been shown in Schnelle(forthcoming) how a complex PLA network composedfrom AND-planes, OR-planes, ordinary registers,and shift registers can be derived by a generaland formal method from any CF-grammar, such thatthe network generates a sequence of control sig-nals,tr iggering the product ion of a correspondingterminal symbol (or of a string of terminal sym-bols).
The structure derived is a set of units,one for each non-terminal occurr ing in the gram-mar and one for each terminal symbol.
Before pre-senting the network realizing simple units ofthis type, we give an informal indication of itsfunctioning.
A unit for a nonterminal symbol oc-curring to the left of an arrow in the CF gra~muarto be real ized which allows m rule alternativesand occurs at n places to the right of the rulearrow has the form of figure 2a.
A unit for aterminal symbol - say "A" - occurr ing at n placesto the right of an arrow has the form of figure2b.
The "STORE" - units can be realized by OR-planes, the "READ"-units by AND-planes.
The flip-flops (FF) are simple register units and the shiftregister is a simple PLA network of well  knownstructure.
The reader should note that the no-tions such as "store", "read" and "address" aremetaphorical  and chosen only to indicate the func-tioning: The boxes are no_~t subprograms or rulesbut circuits.
There are neither addresses noracts of selection,nor storing or reading of sym-bols.151I i ,I llllU l s ( .
?c l / i t  e r+le/++:l:t i l l , j  l lmXti , .+ .
,+ m+ i .+ .
:,l i \ [uL (~ "~%ll,J r+s~l"-F .
- : -1  ....I mI_ .
L .
.
~;+-+ +~ ~_~I_I i .P lgufc  2a: (;+ll?+l'al+ \ [o~m o i  ~ .1111.
++al J z | l *< j~i l lO l1 -Le \ [mtn; l |  +yal lx ,  I o+ LII<~ ( j l~ J lmlnrmore compl icated cases the signal flow cannot beproper ly organized by a schematic adaptat ion ofthe system real ized for production.
I am there-fore planning to investigate real izat ions of con-current signal flows for bottom-up processors.
Atthe moment I do not yet  have a general method forspecifying bottom-up processors in terms of net-works.12.
In order to i l lustrate concurrent infor-mation flow during parsing let me present twosimple examples.
The first example provides de-tails by an extremely simple wir ing diagram offigure 3, which realizes the "gran~mar" S + ;~,S + AC.I ," ?
I i_t~-_+~+ ~.
l  .... _h++; ...+_+_.
_ .++';,+.
'L + L,;:,II.. .
.
.
.
.
- \]I III .... i ;+  , " .
.
.
.
.
.
.
; 'c:";:'+r t:,T. .
.
.
............. t .
.
.
.
.
?
.
.
.
.
.
1~!r,~-Il~Inlor nctlv~tlnn x ~ ~ x #p(.
js1+r.
21++ C.enorml  rn ,m o \ [  +~ .
, s t?
reml l~(n%l.
L .
.mI .
*~L  ~yml~-~l o (  th .
< I rm~r(tile .~ymt*)!
"~" (, thl, ~a~q)ii.
The complex networks definable by a generalmethod from CF-granunar specif ications, as shownin Schnelle (forthcoming) can be easily extendedinto a predictive top-to-bottom, left-to-r ightparser such that the predict ion paths are gener-ated in paral lel  by concurrent signal flows (aswill be i l lustrated below).
At the real?zations ofa terminal symbol a TEST PREDICTION "a" is in-cluded, as indicated in figure 2b.
However, adetai led analysis of this system shows that inr l~ur~ 3It i l lustrates the general type of wir ing wherethe hyphenated units must be mult ip l ied into nstorage units, whenever there are n inputs.
Thebox for PRINT "a" or TEST PREDICTION "a" shows amult ip l ic i ty of 2 storage units marked 3 and 4 forthe case of two input and output lines.
For thedetails of PLA construct ion of such networks thereader is referred to Schnelle (forthcoming).13.
We shall now i l lustrate the signal flowoccurr ing ?n a PLA real ization of the grammar:S + Ac, S + aD, A ?
a, A + ab, D + bd, D + d. Agrammatical ly perspicuous topology of the networkis shown in figure 4.
The double lines are wires,the boxes have an internal structure as explainedabove.
For a parse of the string abd the wir ingrealizes the following concurrent signal flow on152the wires corresponding to the numbers indicatedin figure 4.Gra~ar:  S~AcS -aDA-aA*abD-bdD-d3 15Since the only possible generation derivable fromthis parse information is $1, DI, the structureis \[a\[bd\]D\] S whereas the informations AI and A2remain unused, i.e.
non confirmed, by the com-plete parse.14.
We have presented only very simple i l lus-trations of concurrent information flow and theirreal izations in integrated circuits.
Much moreresearch wil l  be necessary.
Our contributiontried to i l lustrate (together with Schnelle forth-coming) how current VLSI design methods - andsimulation programs used in the context of suchdesigns - could be applied.
It is hoped thatseveral years of experience with designs of suchtypes may lead to fruitful foundational conceptsfor process-or iented linguistics, which solvesits tasks by constructing descript ively adequatespecial machines instead of programming universalyon Neumann machines.ReferencesC.
Mead, L. Conway (1980) Introduction to VLSIDesign, Reading, Mass.
: Addison WesleyH.
Schnelle (forthcoming) Array logic for syn-tactic production processors - An exercisein structured net-l inguistics -.In: Ec.
Hajicov&, J. Mey (eds.),Petr.
Sgall FestschriftFigure 4(Whenever a signal reaches a TEST PREDICTION "x"box via a line numbered y we write y(x); "Ai"means: the i-th rule-alternative at A).Time Active lines(i) i , 2(a)(2) 3(a), 4(a)(3) Read "a"(4) 5, 6(b), 7 AI(5) iO(c), 8(b), 14(d)(6) Read "b"(7) g, 12(d) A2(8) lO(c)(9) Read "d"(iO) 13 D1(11) 16 $2Parse information153
