THE NONDIRECT IONAL REPRESENTATION OF SYSTEMICFUNCTIONAL GRAMMARS AND SEMANTICS  AS TYPED FEATURESTRUCTURESJohn A. Bateman* Martin Emele and Stefan Momma**Project KOMET, GMD/IPSI  Project POLYGLOSS, IMS-CLDarmstadt,  Germany University of Stuttgart,  Germanybateman~darmst  ad .gmd.de {emele,momma}@in formatik.uni-stuttgart.deAbstractA small fragment of the Systemic Functional Grammarof the PENMAN system is reformulated in the Typed Fea-ture Structure language.
Through this reformulation wcgain full reversibility for the SFG description and accessfor unification-based grammar descriptions to the richsemantic levels of description that SFG supports.
Weillustrate this reformulation with respect o both gener-ation mid semantic aalalysis and set out the future goalsfor research this result establishes.1 In t roduct ionThe current state of the art in natural language pro-cessing calls for components Callable of sophisticateddeep semantic analysis, modular representation ofresources, and re-usability of those resources acrossdifferent NLP applications.
Furthermore, it has beendemonstrated that the sheer diversity of interactionsbetween distinct kinds of linguistic information isguaranteed to defeat any staged approach to genera-t ion/understandiug that successively maps betweenlevels of representation \[1\].
One strategy for ad-dressing these problems is to stratify resources othat inter-stratal mappings are simplified.
This isaimed at allowiug high-level information to apply asearly in analysis ms possible at a minimal cost.
Anumber of current processing architectures call forsuch a design.
The stratification technique is alsoone way of ensuring modularity and improved re-usability.
However, one important problem with al-most all existing linguistic resources i that the inter-stratal mappings between, for example, strings andsemantics, are anything but simple.
This,is becausethe standard syntax-semantics-pragmatics modular-ization under-stratifies by imposing fewer distinc-tious than are necessary.Computational systemic-functional grammars \[4\]offer significant solutions to this deficiency by impos-ing a higher degree of stratification (cf.
Section 3),thus keeping inter-stratal relations simple.
SFGshave supported the constrnction of natural anguagegeneration components that are able to take highlyabstract, purely semantic specifications a  input andproduce corresponding surface strings as output.Furthermore, the generation task ha.s required ex-tensive work on the more abstract strata: withouta rich breadth of communicative goals, grammati-cal resonrces for expression cannot be satisfactorilyconstrained.Problematic with current computational instanti-ations of SFG, however, is that implementations havebeen directionally committed: the higher strata ofinformation have not been available for constraininglower level analyses.
This problem has been com-pounded by a further lack of detail at the lower, syn-tagmatic/constituency stratum in SFG.
In contrast"Also on indefinite leave from the Penman Project,USC/Information Sciences Institute, Marina del Rey, LosAngeles.?
*Supported by BMFT Grant No.
08 B3116 3to tile generation perspective, work oriented towardsanalysis - -  particularly within current information-based grammars such as LFG and HPSG - -  has paidcxtensive attention to the less abstract strata of thelinguistic system and have produced highly detailedaccounts of syntagmatic organization.
A combina-tion of the two paradigms hmdd enable us to fillgaps in the respective coverage of strata.Information-based grammars have already beenpresented using declarative representations such asfeature structures.
In this paper, we present a for-realization of all tile information to be found in thestrata of computational SFG and their inter-stratalmappiugs in terms of feature structures also in or-der to initiate a combined description of the twoparadigms.
In particalar, we will formalize SFG interms of the Typed-Feature System (TFS) devel-oped within the POLYGLOSS project at Stuttgart.TFS has previously been applied to the strata ofthe linguistic system addressed by HPSG and LFG.Here, we argne further that  it is appropriate o adoptthis representation for SFGs and the higher strataof the linguistic system that SFG proposes.
Theresult of this inquiry is then to provide the basisfor populating a highly-stratified processing archi-tecture with maximally appropriate linguistic repre-sentations.
Moreover, the higher levels of abstractionare rarely dealt with within a theory that  talks aboutsyntax.
Rather, their treatment is left to a separateprocess using a separate representation language anda completely separate processing strategy.
Our ap-proach offers a solution to this problem as well byprovidiug a unique framework to talk about (almost)all levels of linguistic information in a single formallanguage using a single processing scheme.2 A convergence  o f  concernsWe now briefly introduce both SFG and TFS; sub-stantial introductious are provided elsewhere and sohere we shall only offer sufficient details to under-stand the examl)les offered in the paper.2 .1  The  SFG f rameworkAnalogously to HPSG and LFG, SFG belongs to thefamily of grammatical  frameworks based on state-ments of the co-occurrence possibilities of grammat-ical features.
In contrast, however, SFG places cen-tral focus on grammar as a complex resource forachieving commmficative and social goals.
WithinSFG the entire grammatical description of a lan-guage is organized around a factorization of the taskof finding grammatical  structures appropriate for theexpression of specified meanings and it is this orien-tation that has made it so appealing for the task ofgeneration.The organization of the PENMaN-style architec-ture within which the SFG of English we are workingwith is embedded ecomposes the mapping from ab-stract semantics to surface string as follows.
Nearestthe surface there are realization statementa of syn-tagmatic organization, or syntactic form.
These areACTES DE COLING-92, NANTES, 23-28 AOt)r 1992 9 1 6 PROC.
OF COLING-92.
NANTES, AUG. 23-28, 1992classified it* terms of a grantmatical system networkthat denotes the paradigmatic, functional 'alterna-tives offered by syntactic forms.The decisions in the grammatical  systems networkare motivated by serum*tic distinctions that classifysemantic ircumstances ax:cording to the grammati-cal features which are appropriate to express thosesituations: this classification is the cmnbined respon-sibility of choosers attd inquiries.
Finally, the possi-bilities for classification that the inquiries have aredefined in terms of an abstract ontology called theupper model.
Knowledge about particular domainsis subordinated to the upper model so that the con-cepts of those donlains can inherit their possibilitiesfor linguistic realization from those already specifiedfor the upper model concepts.
Also, lexical informa-tion is typically a.qsociatcd with the domain concepts.All of these components are currently imple-mented and used within the PENMAN and KOMETprojects.
The upper model and domain nmdcl areimplemented in the knowledge rcpresentation lan-guage LOOM (developed at USC/ISI); the remain-ing theoretical constructs involved in the generationprocess are realized ms macros defined in Common-Lisp.
These latter are, therefore, in implenmntationstrictly procedural attd do not support analysis.
Forfurther details of the underlying theory atnl its ap-plication in the area of text generation see \[4\].2 .2  The  TFS  f rameworkThe TFS formalism is a rewriting system for typedfeature terms fonowing ideas from \[5\].
The majorgoal when designing TFS `as a grannnar descriptionlanguage was to develop a formalism that inherentlysupports botix modular, hierarchically organized e-scriptions and a declarative formulation of relation-ships between (partial) elements front different lin-guistic modules.The objects used to represent linguistic informa-tion are typed feature terms, i.e., feature termsthat have a type symbol associated with each nodein the directed graph representing an ordinary fea-ture term.
A linguistic description consists of a setof feature type definitions which contain informationabout the placement of the feature term in the typehierarchy and about the set of well-formedness con-straints that  hold for this particular type.
The fea-ture type definitions define the well-formedness con-straints for all representatiun levels, sinmltaneouslyspecifying what constitutes a 'well-formed linguisticsign', i.e., an object containing all the informationthat can be collected about an utterance - be itanalyzed (where the phonological lotto of the utter-once is the inpnt), or generated (where parts of the'content' of the complete description serves ms tileinput); an example of such an object appears belowin Figure 3.Given a partial description (a feature term with(possibly partial) type information) as input, the in-terpreter computes the set of most specific featureterms derivable from that term by first classifyingthe term according to the features it contains andtheir values, and subsequently reeursively applyingfeature type definitions to all type symbols containedin the term.
Only one operation is used: Rewritingbased on unifying substitutions of feature terms.
Forfull details of the formalism and its ilnplementationsee \[6, 7\].
Since the TFS language is fundamentallya constraint-based language, and none of the opera-tions involved is dependent on a particular order of,e.g., the availability of certain pieces of information,no directionality is involved in the constraint-solvingprocess.
Thus, a snccessful encoding of the informa-tion contained in a systemic grammar description inTFS will of necessity be strictly bidirectional.
Infact, the specification of well-formed linguistic signssimultaneously for all strata represented means thatthe term non-directionality is a better characteriza-tion of the distinctive property of this kind of systemthan, for example, "reversibility".3 Mode l l ing  o f  SFG i n  TFSWe now describe in some detail how each of thestrata, atnl the relations between them that are de-tilted within cmnputational SFG, may be defined uni-formly within TFS.
This supports the general clv:immade within SFG that statements of linguistic re-sources should be non-directional.
We will beginwith the least abstract stratmn - the system net-work -a t td  work up to the most abstract level -the upper model.
We then describe the inter-stratalmaptfings that exist between these.3 .1  The  System NetworkA system network can Ixe represented ,as a directedacyclic graph with labelled arcs whose nodes arechoice points called systems and whose outward di-rected labelled arcs denote the terms of the system.Each system has two or more terms, or output fea-tures, which at the stratum of granlmar epresentminimal gralnmaticM alternations.
Reflecting theextensive stratification of the arclfitecture, nothingis said in the system network proper abont how tochoose between these alternations.
The inward di-rected arcs for each systent denote an entry conditionwhich deternfines the paradigmatic context in whichthe alternation represented by the system is relevant.As shown already in \[3\], the network is formallyequivalent to the specification of a subsumption hi-erarchy and so the translation of the connectivity ofthat network Mone into TFS is quite straightforward.The resnlt is a lattice with most general type RANK.The system nctwurk does not itself generate gram-mat*cat structures; this information is also stratifiedout.
In SFG grammatical  structure is built up interms of 'syntagmatic specifications' which are de-rived by means of realization statements associatedwith paradigmatic selections.
Kasper \[2\] shows howthese realization statements can be represented interms of feature structure descriptions.
We largelyadopt this representation here.
The possible real-ization statements arc listed in the table shown be-low, together with their translations into TFS fea-ture ternxs.+F ~F~.'
R/iN K\]Expand: F 1 (F2) \[F 1 : \[F 2 :#lmRANK\] , F 2 :tiltlnflectify/ F l : :11 \[F 1 : \[11 :+\]\]Classify:Cooflate: F1/F 2 IF1 :#1, F2 :#1\]Preselect: F1 : I t  \[F1 : f l \ ]Lexify: F !
1 IF : lex-name\]An Inser t  statement ( +F in traditional sys-temic notation) corresponds to the introduction ofthe feature F into the feature term, at the sametime classified as requiring a value of type RANK.The Presolect, Classify/Inflectify and Lexifystatements have similar translations, tile only dif-ference being that they do not only determine tiletype of the value of the feature they introduce, butalso specifically determine the value itself; l ex i fy  isthen the limiting case where a type drawn front thesublattice of lexical items may be specified irectly.A second class of statements i used to express coolabelling of structures.
Conf la te  (Fx/F2) expressesAC1ES DE COLING-92, NAI~rEs, 23 28 AOb~L" 1992 9 l 7 PROC.
OF COLING-92, NA~rrEs, AUG. 23-28, 1992the identity between two features in a complex struc-ture.
In the feature structure description we denotethis by introducing a reentrancy.
The way TFS de-notes reentrancies i  by use of a tag (e.g.
#1) thatappears at the two endpoints of the paths that arebeing made reentrant.3 .2  Upper  Mode l  and  Domain  Mode lThe representation f the Upper Model in LOOM isalso straightforward to translate into the TFS no~tation.
Every concept in the hierarchy correspondsto a type in TFS, where the content of the : i s  slotcorresponds to the specification of the appropriatesupertype for the given concept.There are two possible ways to build up tile hier-archy of concepts for the Upper Model: we can followa pure top-down strategy, specifying via stepwise re-finement what subconcepts make up a given concept.This is appropriate whenever the LOOM definitioncontains a statement about :d i s jo in t -cover ing .The second possibility is to build up the hierarchybottom up, i.e., for a type we specify what its super-type is.
This is mostly used when the type-definltionhas additional constraints, which are then conjunc-tively conjoined to the supertype specification, thusrefining the definition of the current ype.
An exam-pie for such a translation is shown in Figure 1.
Tileresult of the translation is a type lattice with umsti~enerai type UM-THING.
(de /concept  P rocess:is (:and UM-Thing :primitive):constraints (:at-least 1 Participant): d is jo int-cover lng(Material-process Mental -ProcessRelat ional-Process Verbal-Process) )PROCESS < UM-THIIG.PROCESS - MATERIAL-PRQCESS I MENTAL-PROCESSREL?TIONAL-PROCESS I VERBAL-PROCESS.pEflCESS \[participant : UM-THIHG\] .Figure i: LOOM definition and TFS definition forthe concept ProcessSubsequently, semantic specifications - - isomor-phic to the Sentence Plan Language (SPL) stan-dardly used as input to PENMAN-style text gener-ation systems or to a set of LOOM A-Box asser-tions - -  are then defined by a type LOCAL-PLANwhich specifies the semantic process, semantic par-ticipants, and certain details of textual presenta-tion and interpersonal effect.
The semantic specifi-cation (simplified for illustration purposes) for thesentence Kim devours every cookie, for example,can be seen under the nora attr ibute in the fea-ture structure shown in Figure 3.
In this expres-sion, DEVOUR, C00KIE, and KIM are concepts ill thedomain model that are subordinated to types de-fined in the upper nmdel in the standard way definedfor interfacing with PENMAN-style systems, favor ,se t - to ta l i ty - ind iv idua l i ty  are semantic orre-lates of textual inquiries concerning the comnmnica-t ire functions of referring expressions, speechactis the semantic orrelate of an interpersonal inquiryconcerned with il locutionary force.
A full specifica-tion would contain ...... y ....... details (cf.
\[4\]).3 .3  Choosers  and  Inqu i r ies :  in ter -s t ra ta l  re la t ionsh ipsAs noted in Section 3.1, the systemic network alonedoes not specify the senlantic motivations for selecotions of particular grammatical features from thenetwork.
This task is handled in PENMAN-Styleimplementations of SFGs by tile stratum of theehooser~inquiry semantics.
Choosers are typicallydescribed, and used in generation, as decision trees,and one such tree is associated with each grammati-cal system in the system network.
This rather simpleorganization can also, however, be straightforwardlyinterpreted in terms of the semantic onditions of ap-plicability that choosers define for each grammaticalfeatare.
This provides for a declarative modelling inTFS as follows.Tile decisional components of the decision tree arebranching inquiries.
In the m-iginai procedural im-plementation of the PENMAN system, a branchinginquiry takes as argument a semantic entity (identi-fied via the grammatical label fro' the constituent re-alizing that entity) and returns a value from a closedset of possible responses that are defined for each in-quiry.
The chooser then provides a series of actionsthat are to be followed for each possible response,analogously to a case-statement i  Lisp.Our encoding of this level of organization i TFSmoves away from the implementation in PENMAN bymaking use of the fact that choosers are themselveshierarchically organized.
While in PENMAN this or-ganization is maintained only indirectly by the as-sociation with grammatical systems, in TFS we de-fine tile sublattice xplicitly using types defined forchoosers.
There is titan no need for the branchinginquiries ince chooser decision trees may be directlyfolded into tim hierarchy and their possible outcomesare represented as distinct ypes.In PENMAN the arguments required for thebranching inquiries are picked out in a way that de-pends on another type of inquiry: an identifying in-quiry.
The function of these is precisely to locateparticular semantic entities with respect o seman-tic entities that are already kimwn.
It is clear thatfor these inquiries to be implemented, a specific se-mantic representation must have been selected.
Wehave, for the time being, folded this information i tothe TFS translation: that is, we use the concreteimplementations of identifying inquiries (which arerather simple) to fix the particular path that wespecify as a value for the sere attr ibute.
Identifyinginquiries are used in chooser actions of the followingform: (ides'airy F 1 (inq-ID F 2)).
This specifies thatthe semantic entity returned by applying the inquiryinq- ID to the semantic entity associated with tilegrammatical constituent labelled as F 2 is associatedwith the grammatical constituent labelled as F 1.
Inthe TFS translation, wherever mention is made to asemantic entity by means of these grammatical con-stituents, we instead pick out the semantic entitydirectly by incorporating sufficient path informationin the partial feature structure description in the sereslot.
The translation of the above identify action is: l\ [syn:  \[F I :#$2\ ] ,  sem: \[F 1 : \ [ .
.
.
\[ l i s t \ ] .
.
.
\ ]  \]\]:- inq-ID\[syn:#Si, sem:#Sl\]where, as explained above, the precise path underthe first seta slot is defined by the implementationof the inquiry inq- ID with respect o the upper anddomain models.
For the identification: ( ident i fyGr-actor (actor- id Gr-process)), for example, thecorresponding TFS term is:\[nyn: \[Gr~actor:#Si\] , ~em: \[process: \[actor:#Sl\]\]\]:- actor-ID\[sem:#Sl, syn:#S2\].Inquiries of this type are necessary since they pro-vide an additional interface structure between ac-tual upper model concel)ts and objects in the systemIUsing Prolog's "neck" symbol to introduce thecondition.AcrEs DE COLING-92, NAN'rES, 23-28 AOUr 1992 9 1 8 PEso.
or COI.1NGO2, NAI~rES, AUG. Z3-28.
1992network.
Subsequently, the relationships they dclinebetween the grammatical  nd ontolugical sublatticesare folded into tile types of the chooser sublatticcdirectly as described above.Finally, the concrete statement hat a partic-ular grammatical  feature is entailed by the se-mantic circumstances that pertain i.~ made by tilechoose chooser action which takes as parameterthe grammatical feature front the grammatical sys-tem to which the chooser is a.ssigncd that is tobe selected.
This action is trivially represented 1)yadding in the granunatical feature as a type con-straint on the eyn side of the relation at the al)pro1)riate chooser subtype; i.e., (choose 61tAld-FZsTtrltE)\[nyn : GRAM-FEATURE\] .Choosers as a whole then form a snblattice whosemost genera\[ type is RANK-CII00SER.
Figure 2 shows;tic example translation of two chooser nodes frontthis snblattice, where we see tile above translationprinciples at work.
2((hSK (SThTIC-CONDITION-Q GR-PROCESS)(STATIC(ASK (MENTAL-PROCESS~Q GR-PROCESS)(MENTALI IDENTIFY GR-ACTOR (SENSER-ID GR~PROCESS)) Cn0OS~ ~ZNTAL))(NONME~TAL ...)))))PTC-STATIC-MENTAL-CHOOSER\[sen: \[process:NENTAL-PROCESS\[senaer:#al\]\],myn: MEgThL\[gr-actor:#a2\]\] :-CH00SER\[sem:#ai, syn:#a2\].PTC-STATIC-NONMENT?L-CHDOSFAt\ [sem:\ [proce~n:(MATERIhL-PROCESS \[VERBAL-PROCESS I RELATIONM,-PROCESS)JJ.Figure 2: Translationofchooser nodesAn important point to note here is the strictseparation of 'syntactic'  and sclnantic informationthat is enforced.
Complete modularity of thesya and sere descriptions is maint~dned and thechoosers&inquiries are detined as a lattice of rela-tions between these informational domains: there isno intermixing of categories within informational (lo-mains.
Associations t)etween semantics and syntaxare preserved only in the conditions that specify themappings across trata.
Tile lattice of relations thatthe CH00SER-sublattice d fines permits the implicitdefinition of the complete cross product of the RiNKand UM-THING sub-lattices.
This avoids the combina-torial explosion of type symbols that would otherwiseensue.
The existence of a particular subtype of subCH\[10SER on a certain level of hierarchical emllcddingexcludes all others on that level tiiat wouhl exist hadwe taken the complete cross product.4 Demonst ra t ion  o f  generat ion  andana lys i s4 .1  Generat ionWhen we want to generate, we provide a sl)ecificationof the semantic omlnunicativc functions that are tobe achieved by the linguistic: realization.
Generationis then initiated by providing thc local l)lan as the2The second type definition gives a statement of thenegative condition, which is presently represented hy adisjunction of thc categories defined in the upper modela~s sisters of HENTAL~PRDCESS; fllture vessions will rely onnegation.value oi the Beta attr ibute of tile top-most chooser.After classifying the input structure according totile features it contains (already ielding a paxticularsubtype of CHOOSER), the type of the topmost nodeof the input structure is then recursively expanded.Expansion is performed by rewriting all embeddedtypes through unifying substitution of their defini-tio~ls until no filrther rewriting is possible (i.e., untilall types are ground types).
Expansion terminateswith a conq)lcte description coralmtible with the in-put partial description and with the definitions illthe feature type system representing "all the linguis-tic strata defined.
In the general case, we will endup with not just sac description, lint rather witha set which is then to be interpreted as a disjunc-tion of possil~le solutions to the initial problem.
Thecomplete structure which is the result of the inter-prctation of the semantic specification (given underthe nero feltture) is given in Figure 3.4 .2  Ana lys i sAs stated in Section 1, SFG suffers front a lack ofspecificity in its syntagmatic representations; thekind of specifications that we find inunediately un-derlying strings in the PENMAN and KOMET systems,for example, gives representations (expressed accord-ing to our TFS definitions of Section 3.1 above) suchas the following:R.ANK \ [gr -procean : LEI-DEV'OOR,subject: \[thihg: LEI~KIM\],dixectcomplsment : \[thing: LEI-COOKIE,doietie: LEX-EVERY\] \] \]However, information-based syntax, such :asHPSG, does provide cxtensive detail at  this level.Now, due to the strict modularity enforced in ourtranslation, it is possible to explore combinations ofapproaches and, moreover, to combine descriptionsfrom a theory like HPSG with the kind of descrip-tions employed in Systemic Linguistics or its Com-putational instautlations.
This has been shown tobe possible il~ a simple experiment carried out byMartin Emelc where an existing HPSG grammar wastaken and the semantics of that grammar (a simplesituation semantics-informed frame-like representa-tion) was rewritten to give tim syntagmatic cate-gories and structures of the SFG.
This makes it pos-sible to describe the information ot)tained front thetwo approaches within a single executable declara-tive specification.
Her('., however, our  utain concernhas been with making available the higher-levels ofspecification, and so wc will abstract away front thestring to syutagmatic structure component of themapl)iug and take as the ' input'  specification thelowest level ofinforroation obtained from the SFG, asshown at)ove.
Therefore, we proceed by putt ing thisspecification in tile syn slot of the IthNK-CHOOSER re-lation.
Tcrnl rewriting applies to construct the sereside of tim relation and also to complete tile synsl)ecification.
The result is again tile COml)lete spec-ification of the set of constraints titat describe thestructure, which is again the structure shown in Fig-ure 3.
This is precisely the same linguistic-sign thatwas produced as a result of "generation", start ingfroln the imrc semautic part of the descril)tion -thus il lustrating the ra(licld nondfiectionality of therepresentation.5 Conc lus ions  and  l, Mture  WorkTile (:lose fit between the linguistic description re-quired in a TFS-based architecture and those I)eingpursued within SFG have motivated a detailed in-vestigation of the nmtual compatibility of the rep-resentational nd formal mechanisms and linguisticACTES DE COLlNG-92, NANi\].
:S, 23-28 ho(;r 1992 9 1 9 PRoc.
ov COLlNG-92.
NAI~TES, AUG. 23-28.
1992PTC-NONSTATIC-NONVERBAL-NONMENTAL-CHOOSER\[actor: KIM~f .
.
.
.
.
+1 \ ] \ ]|minimal-attention: - \] | |.
.
.
.
.
LOCAL-PLAN COOKIE|f .
.
.
.
.
.
| | | p .
.
.
.
.
.
.
:EVOUn\[act~:Lspeechact: |set-totality-individuality: eolleetionJ J J|spelling: idevour ' \ ]Lsmgutar:~ INDIVIDUAL-NAME|thing: LEX-KIM|eommon:\[\] \[case: NOM l noun:syn; MATERIAL ~MOOD_UNIT ~Un~ect:\[: \[~\] \ ] lgr-process:gr-actor:subject:finite:mood:\[deict ic: LEX" EV E RY\[:pe~ilng r: "+every"\] \]directcontplement: \[\]EVERY\[ .
\[spelling: "cookie"\] \[theme: \[\] |thing: LEX-COOKIE\[sing~dar: + \[ \ [medium: \[\] \[_case: OBLIQUE \[common: + J Joak \[\]Figure 3: Feature structure for "Kim devours every cookie.
"descriptions beiug developed within the PENMAN,KOMET and POLYGLOSS projects.
We have shownthat systemic-functional grammars and semanticscan easily be converted to the TFS formalism.
Thishas produced a fragment that can both generate andanalyse.
Furthermore, the analysis achieved with ourexperimental fragment supports the mapping fromsurface representation to deep semantic levels of rep-resentation that are far removed from the contingen-cies of surface syntax.
These represeutatimts alsopreserve breadth, in that the semantic distinctionsnecessary for generation concerning 'pragmatic '  in-formation such as textual organization and interper-sonal communicative goals are also recovered.
It isespecially imt)ortaut hat all of these diverse levelshave now been made accessible for analysis withina system where there is only one representationalformalism and only one interpretational device op-erating on the representations.This paper has described and motivated the basisfor a host of important further research questions,some of which we are now following up.
For exam-ple, the fragment we have illustrated here is verysmall: the problem of handling large lattices needsto be addressed both on implementational aud the-oretical evels.
A fldl specification of the grammarcomponent of PENMAN alone as we describe it herewould involve tens, possibly hundreds, of thousandsof types: this ueeds to be supported by sufficientlypowerful and robust implementations.
But on thetheorcticai level, there are also further nmdulari-ties within the SFG account hat we have not yetutilized to constrain term explosions due to form-ing cross-products across ublattices: two areas hereclearly present hemselves --- stronger modulariza-tion according to the paradigmatic/syntagmatic di-mensiou and according to functional regions in thegrammar \[4\], which already provide a meta-level oforganization across ublattices that remains unused.A fnrther area is a closer study of the similarities anddiffereuces between, e.g., the information of the SFGand the HPSG modules - -  it is to be expected thatthere is currently duplication which could be moreeffectively distributed, perhaps providing a more ef-fective TFS translation.
Finally, the availability ofa representation f some systenfic-functional gram-mars in a standard formalism should further facil-itate comparison and evaluation of the grammati-c',d description with respect o other current cmn-putational accounts of grammar: it should be morestraightforward to identify the distinctive featuresand claims of the approach, thus opening the doorto an easier exchange of information and analyses.Further, performing the TFS translation for the en-tire PENMAN grammar would provide an effectivetest of the TFS formalism (and its implementation)overall since there are no comparable grammars (i.e.,paradigmatic feature based without a phrase struc-ture skeleton) of this size available lsewhere.References\[1\] Martin Emele, Ulrich Held, Stefan Momma, andR~mi Zajac.
Interactions between linguistic con-straints: Procedural vs. declarative approaches.Machine T~nnslation, To appear in special issue ongeneration.\[2\] Robert T. Kasper.
An Experimental Parser for Sys-temic Grammars.
In Proceedings of the l?th Inter.national Conference on Computational Linguistics,August 1988, Budapest, Hungary, 1988.\[31 Robert T. Kasper.
Unification and classification: anexperiment in information-based parsing.
In Pro-ceedings of the International Workshop on ParsingTechnologies, pages 1-7, 1989.
28-31 August, 1989,Carnegie-Mellon University, Pittsburgh, PA.\[4\] Christian M.I.M.
Matthiessen and John A. Bate-man.
Test generation and systemic.functional lin-guistics: experiences from English and Japanese.Frm~ces Pinter, London, 1991.\[5\] Hassan Ai't-Kaci.
An Algebraic Semantics Approachto the Effective Resolution of Type Equations.
The-oretical Computer Science 45, 293 351.
{6\] Martin C. Emele and R~mi Zajac.
A Fixed PointSemantics for Feature Type Systems.
In: St~phaneKaplan and Mitsuhiro Okada (eels.
): Proceedingsof the ~nd International CTRS Workshop, Mon-treal, Canada, June 1990.
Heidelberg: Springer1992, LNCS 516, pp.
383-388.\[7\] Martin Emele and R~tni Zajac.
Typed Unifica-tion Grammars.
In: Proceedings of the 13th Inter.national Conference on Computational Linguistics(CoLing 90), Helsinki, 20 - 24 August, 1990.AcI~ DE COLING-92, NANTr~S.
23-28 AO~' 1992 9 2 0 PROC.
Ol: COLING-92, NANI~S.
AUC.
23-28.
1992
