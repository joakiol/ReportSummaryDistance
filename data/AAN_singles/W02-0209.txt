A Flexible Framework for DevelopingMixed-Initiative Dialog SystemsJudith HOCHBERG, Nanda KAMBHATLA, Salim ROUKOSIBM T.J. Watson Research CenterYorktown Heights, NY 10598, USA{judyhoch, nanda, roukos}@us.ibm.comAbstractWe present a new framework for rapiddevelopment of mixed-initiative dialogsystems.
Using this framework, a developercan author sophisticated dialog systems formultiple channels of interaction byspecifying an interaction modality, a richtask hierarchy and task parameters, anddomain-specific modules.
The frameworkincludes a dialog history that tracks input,output, and results.
We present theframework and preliminary results in twoapplication domains.1 IntroductionDeveloping a mixed-initiative dialog system is acomplex task.
The developer must model theuser?s goals, the ?results?
(domain objects)retrieved, and the state of the dialog, andgenerate the system response at each turn of thedialog.
In mixed-initiative systems, as opposedto directed dialog systems, users can influencethe dialog flow, and are not restricted toanswering system questions in a prescribedformat (e.g.
Walker 1990, Chu-Carroll 2000).Compounding these challenges, dialogapplications have evolved from simple look-uptasks to complex transactional systems liketelephony banking and stock trading (Zadroznyet al 1998), and air travel information systems.These systems increasingly cater to multiplechannels of user interaction (telephone, PDA,web, etc.
), each with its own set of modalities.To simplify the development of such systems,researchers have created frameworks thatembody core dialog functionalities.In MIT?s framework, a developer creates adialog system by specifying a dialog controltable comprising actions and their triggeringevents.
The developer has great freedom indesigning this table, but must specify basicactions such as prompting for missinginformation.
As a result, these tables canbecome quite complex ?
the travel systemcontrol table contains over 200 ordered rules.MIT has applied this framework to both weatherand travel (Zue et al 2000, Seneff and Polifroni2000).In IBM?s form-based dialog manager, orFDM (Papineni et al 1998), a developer definesa set of forms that correspond to separate tasksin the application, such as finding a flight leg.The forms have powerful built-in capabilities,including mechanisms that trigger various typesof prompts, and allow the user to specifyinheritance and other relationships betweentasks.
Just as in the MIT framework, domain-specific modules perform database queries andother backend processes; the forms calladditional developer-defined modules that affectthe dialog state and flow.
FDM has supporteddialog systems for air travel (Papineni et al1999, Axelrod 2000) and financial services(IBM 2001, IBM 2002).
The University ofColorado framework also has a form-basedarchitecture (Pellom et al 2001), while CMUand Bell Labs?
frameworks allow thespecification of deep task hierarchies (Wei andRudnicky 2000, Potamianos et al 2000).Our goal is to design a framework that isboth powerful, embodying much dialogfunctionality, and flexible, accommodating avariety of dialog domains, modalities, and styles.Our new framework goes beyond FDM inbuilding more core functionality into its taskmodel, yet provides a variety of software tools,such as API calls and overwritable functions, forcustomizing tasks.
The framework allowsdevelopers to specify a wide range ofrelationships among tasks, and provides a focusmodel that respects these relationships.
Tosupport the task framework we introduce aPhiladelphia, July 2002, pp.
60-63.
Association for Computational Linguistics.Proceedings of the Third SIGdial Workshop on Discourse and Dialogue,dialog history component that remembers input,output, and cumulative task results.
Section 2 ofthis paper describes the framework, and section3 some applications.
In section 4 we discussfuture plans and implications.2 The HOT frameworkOur framework?
s moniker is HOT, which standsfor its three components: dialog History, domainObjects, and Task hierarchy.
It is implementedas a Java library.
In this section, we describe theHOT framework.
We assume the existence of anapplication specific natural language parser thatbrackets and labels chunks of text correspondingto domain specific attributes, and a naturallanguage generation module for generatingprompts from abstract specifications.2.1 Task hierarchyA task defines a unit of work for a dialogsystem.
The HOT framework enables thespecification of tasks that are organized as ahierarchy (e.g.
Fig.
1).
The terminal tasks in thehierarchy  (UserID, Fund, and Shares) derivecanonical values of domain attributes (such asfund symbol) from parsed portions of user input.The RootTask specifies methods for managingthe dialog, e.g.
for disambiguating amongdifferent sub-tasks in case of ambiguous userinput.
All other tasks perform scripted actionsusing the output produced by other non-terminalor terminal tasks: generate a user profile, a sharetransaction, or a price quote.The task hierarchy constitutes a plan for thedialog.
It remains to be seen whether it can alsobe used for planning domains in which taskinput can come either from a user or from anexternal process such as an environmentalmonitor, as in [Allen at al.
2001].The framework allows developers to easilyspecify five different relationships among tasksin a hierarchy.
Many of these will beexemplified in Section 3.1.
Subtasking: UserID is a subtask of Loginbecause Login needs the user?
s ID to log theuser in.2.
Ordering: Login precedes all other tasks, butBuy, Sell, and Price are unordered.3.
Cardinality: Login is executed only once persession, and UserId, Fund, and Shares areexecuted only once per parent task.However, Buy, Sell, and Price can beexecuted multiple times.4.
Inheritance: Buy and Sell can potentiallyinherit a fund name from Price and viceversa.5.
Subdialog: The user can carry out certainsubdialogs, such as a Price query within aBuy task.2.2 Focus modelAt each turn of the dialog, we automaticallyscore the user?
s input to infer the task that theuser wants to work on.
Only a non-terminal taskcan receive focus.
As in FDM, scoring isprimarily based on the number of matchesbetween attributes in the parsed user input,different task attributes, and the last systemprompt.
The developer can specify theappropriate system behavior if the inferred userfocus conflicts with task relationships, e.g.
if auser wants to Buy but has not yet Logged in.
Inthe absence of such conflicts, the frameworktriggers execution of the inferred task.
If thetask completes without ending a turn, the focusmodel returns focus to a previously started taskif possible, or else defaults to the developer?
spreference for what to do next.2.3 Task functionalityWithin RootTask, a developer can specify themodalities of interaction and the specificbackends used, create an initial task layout, andset some dialog parameters.
Developers mustspecify how they want RootTask to respond tovarious focus situations.
For example, if notasks are eligible for focus, this may represent anerror condition in one application, but theexpected end of a dialog in another application.For all other tasks, task functionality can bedivided into operations that happen before andafter the task calls its backend processRootUserID Fund NameLoginNumberof SharesBuy PriceSellFundNameNumberof SharesFundNameFigure 1: A task hierarchy for a simplemutual fund application.
(accessing a database, the Internet, or otherinformation channel) to create a result.
Pre-backend functionality involves assessing, andpossibly confirming with the user, theparameters to be sent to the backend.
Post-backend functionality acts on different backendoutcomes: for example, informing the user of aresult, confirming a result, or requesting furtherconstraints.
Because the framework alreadydefines these functionalites, the developer?
s roleis to define the backend and its result, and tochoose the pre-defined functionalities that apply.As tasks execute, they post communicativeintentions ?
dialog acts (e.g., ?Inform?,?Confirm?)
and the domain objects they concern(e.g., flights) ?
to the dialog history.
A separateNLG module generates the text of the systemresponse based on these communicativeintentions and the specific modalities in use.2.4 Dialog HistoryThe dialog history provides developers with anorganized way to store system data regardless ofthe application domain.
We store the user input(attribute-value pairs), the system response(communicative intentions), and the cumulativeresults for each dialog turn.
The developer canadditionally store the user input at various stagesof processing.
Results can be generic objects(e.g., a String representing a fund name) orcomplex, domain-specific objects.
The resultsare tagged with a core set of status indicatorsthat developers can add to.
The dialog historyalso serves as a task stack, since the currentresult from each task indicates the task?
s status.The dialog history is reminiscent of BBN?
sstate manager (Stallard 2000), but the latter alsoincludes many dialog managementresponsibilities that we reserve to tasks.3 ApplicationsWe are currently implementing the HOTframework described above.
In this section, wedescribe two sample applications built using thisframework as implemented so far.3.1 Mutual FundsWe built a mutual funds application, using theframework to create a task hierarchy and to addtask relationships such as ordering andinheritance, as described in section 2.1.
Wecustomized the tasks by writing backendmethods and specifying confirmation strategies,the domain attributes of interest to each task, anddomain-specific result objects (UserProfile andShareTransaction).
Figure 2 shows an actualdialog with this application.The dialog flows through a combination ofdeveloper specifications and the HOTframework, with the framework doing most ofthe work.
In turn 1, only Login is specified asactive, so the framework generates an initialprompt for it.
In turn 2, the framework scoresthe input and executes both UserID and Signin.It informs the user of Login?
s success (asspecified), then issues a general prompt becauseLogin enabled all other tasks when it finished(as specified).
In turn 3, the framework issuesan error message because of the conflict betweenLogin?
s cardinality of 1 and the user?
s input.
Inturn 4, the fund name lookup finds anambiguous result; the framework looks to thedeveloper to specify what type of prompt toissue in response.
In turn 5, the frameworkcorrectly interprets the user?
s selection, andrequests fund name confirmation (as specified).In turn 6, Sell runs its Number of Sharessubtask.
In turn 7, the user performs anauthorized Price subdialog from within Sell.Price inherits the fund name from Sell, executesthe task, and returns focus to Sell.
In turn 8, theframework requests confirmation prior toUser System1  Welcome to HOT-DM.User ID?2 1677 Greetings Judy Hochberg!How may I help you?3 I want to signin again.Sorry, you can only sign in once.How may I help you?4 I want to sellWatson fundWatson Yorktown fund orWatson Hawthorne fund?5 the first one Is Watson Yorktown the fundyou want to sell?6 yes How many shares?7 can you tellme what theprice isThe price of Watson Yorktownis $100.2 per shareHow many shares?8 I want to sell30 sharesDo you want to sell 30 shares ofWatson Yorktown fund?9 yes i do Transaction #1: sold 30 shares ofWatson Yorktown fund at$100.2 per share on 2/18/2002How may I help you?Figure 2: A dialog with a mutual funds applicationbuilt using the HOT framework.executing the sale (as specified).
In turn 9, notethat the Sell backend accesses the dialog historyto determine the correct transaction number.3.2 TravelWe have developed a travel information dialogsystem using the HOT framework.
For thisapplication, we reused several components ofthe IBM DARPA Communicator system.
Thesystem accepts either standard text input or textfrom instant messaging from a mobile platform.Figure 3 shows a screen shot of a dialog on a?
Palm?
(PDA) interface to the travel system.4 DiscussionWe have presented a new framework fordeveloping mixed-initiative dialog systems.
Thisframework, dubbed HOT, enables developers torapidly develop dialog systems by specifyingtasks, their relationships, and relevant domainobjects.
We are currently implementing thisframework as a toolkit and have developed twosample applications in two different modalities.The new framework departs from otherframeworks in the range of functionality that itcovers.
Its task model triggers not onlyinformational prompts and confirmations, butalso customizable responses to task problems ofdifferent sorts, such as underspecification.
Thetask relationships modeled are likewise quiterich, including subdialog and inheritance.Finally, the dialog history provides a genericspecification of output semantics, a way to tracktask status, and uniform access to dialog resultsof varying complexity.
Our future goal iscontinue to build functionality, especially inNLG, without sacrificing flexibility.ReferencesJ.
Allen, G Ferguson, and Amanda Stent (2001) Anarchitecture for more realistic conversationalsystems.
Proc.
Intelligent User Interfaces.S.
Axelrod, (2000) Natural Language Generation inthe IBM Flight Information System.
Proc.
ANLP-NAACL Workshop on Conversational Systems.J.
Chu-Carroll (2000) MIMIC: An Adaptive MixedInitiative Spoken Dialogue System for InformationQueries.
Proc ANLP.IBM (2001) http://www-3.ibm.com/software/speech/news/20010609trp.htmlIBM (2002) http://www-3.ibm.com/software/speech/enterprise/dcenter/demo_2.htmlK.
Papineni, S. Roukos, and T. Ward (1999) Free-Flow Dialog Management Using Forms.
Proc.Eurospeech, pp.
1411-1414.B.
Pellom, W. Ward, J. Hansen, K. Hacioglu, J.Zhang, X. Yu, and S. Pradhan (2001) University ofColorado Dialog Systems for Travel andNavigation.
Proc.
HLT.A.
Potamianos, E. Ammicht, and H-K. Kuo (2000)Dialogue Management in the Bell LabsCommunicator System.
Proc.
ICSLP.S.
Seneff and J. Polifroni (2000) DialogueManagement in the Mercury Flight ReservationSystem.
Proc.
Satellite Dialogue Workshop,ANLP-NAACL.D.
Stallard (2000) Talk?N?Travel: A ConversationalSystem for Air Travel Planning.
Proc ANLP.M.
Walker (1990)  Mixed Initiative in Dialogue: AnInvestigation into Discourse Segmentation.
Proc.ACL90, pp.
70-78.X.
Wei and A. Rudnicky (2000) Task-based dialogmanagement using an agenda.
ProcANLP/NAACL Workshop on ConversationalSystems, pp.
42-47.V.
Zue, S. Seneff, J.
Glass, J. Polifroni, C. Pao, T.Hazen, and L. Hetherington (2000) JUPITER: ATelephone-Based conversational Interface forWeather Information.
IEEE Trans.
Speech andAudio Proc., 20/Y, pp.
100-112.W.
Zadrozny, C. Wolf, N. Kambhatla, and Y. Ye,1998.
Conversation Machines for TransactionProcessing.
PROC AAAI/IAAI, pp.
1160-1166.
Figure 3: A dialog in a ?
Palm?
interface toan air travel dialog system.
