Systematic Verb Stem Generation for Arabic ?Jim YaghiDocRec Ltd.,34 Strathaven Place, Atawhai,Nelson, New Zealand.jim@docrec.comSane M YagiDepartment of English,University of Sharjah,Sharjah, U.A.E.saneyagi@yahoo.comAbstractPerforming root-based searching, concordancing,and grammar checking in Arabic requires anefficient method for matching stems with roots andvice versa.
Such mapping is complicated by thehundreds of manifestations of the same root.
Analgorithm based on the generation method used bynative speakers is proposed here to provide a map-ping from roots to stems.
Verb roots are classifiedby the types of their radicals and the stems theygenerate.
Roots are moulded with morphosemanticand morphosyntactic patterns to generate stemsmodified for tense, voice, and mode, and affixedfor different subject number, gender, and person.The surface forms of applicable morphophonemictransformations are then derived using finite statemachines.
This paper defines what is meant by?stem?, describes a stem generation engine that theauthors developed, and outlines how a generatedstem database is compiled for all Arabic verbs.1 IntroductionMorphological parsers and analysers for Arabic arerequired to dissect an input word and analyse itscomponents in order to perform even the simplestof language processing tasks.
The letters of themajority of Arabic words undergo transformationsrendering their roots unrecognisable.
Without theroot, it is difficult to identify a word?s morphose-mantic template, which is necessary for pinpointingits meaning, or its morphosyntactic pattern, whichis essential for realising properties of the verb,such as its tense, voice, and mode, and its subject?snumber, gender, and person.
It is fundamental thatan analyser be able to reverse the transformationsa word undergoes in order to match the separatedroot and template with the untransformed ones in itsdatabase.
Unfortunately, defining rules to reversetransformations is not simple.?
The authors wish to thank the anonymous reviewers of thisarticle as their suggestions have improved it significantly.Research in Arabic morphology has primarily fo-cused on morphological analysis rather than stemgeneration.Sliding window algorithms (El-Affendi, 1999)use an approximate string matching approach ofinput words against lists of roots, morpholog-ical patterns, prefixes, and suffixes.
Algebraicalgorithms (El-Affendi, 1991), on the other hand,assign binary values to morphological patterns andinput words, then perform some simple algebraicoperations to decompose a word into a stem andaffixes.
Permutation algorithms (Al-Shalabi andEvens, 1998) use the input word?s letters to generateall possible trilateral or quadrilateral sequenceswithout violation of the original order of the letterswhich is then compared with items in a dictionary ofroots until a match is found.
Linguistic algorithms(Thalouth and Al-Dannan, 1990; Yagi and Harous,2003) remove letters from an input word that belongto prefixes and suffixes and place the remainderof the word into a list.
The members of this listare then tested for a match with a dictionary ofmorphological patterns.The primary drawback of many of these tech-niques is that they attempt to analyse using the infor-mation found in the letters of the input word.
Whenroots form words, root letters are often transformedby replacement, fusion, inversion, or deletion, andtheir positions are lost between stem and affix let-ters.
Most attempts use various closest match algo-rithms, which introduce a high level of uncertainty.In this paper, we define Arabic verb stems such thatroot radicals, morphological patterns, and transfor-mations are formally specified.
When stems aredefined this way, input words can be mapped to cor-rect stem definitions, ensuring that transformationsmatch root radicals rather than estimate them.Morphological transformation in our definitionis largely built around finite state morphology(Beesley, 2001) which assumes that these trans-formations can be represented in terms of regularrelations between regular language forms.
Beesley(2001) uses finite state transducers to encode theintersection between roots, morphological patterns,and the transformation rules that account for mor-phophonemic phenomena such as assimilation,deletion, epenthesis, metathesis, etc.In this paper, a description of the database re-quired for stem generation is presented, followed bya definition of stem generation.
Then the databasetogether with the definition are used to implement astem generation engine.
This is followed by a sug-gestion for optimising stem generation.
Finally, adatabase of generated stems is compiled in a formatuseful to various applications that the conclusion al-ludes to.In the course of this paper, roots are representedin terms of their ordered sequence of three or fourradicals in a set notation, i.e., {F,M,L,Q}.
Whenthe capitalised Roman characters F, M, L, and Qare used, they represent a radical variable or placeholder.
They stand for First Radical (F), MedialRadical (M), Last Radical in a trilateral root (L), andLast Radical in a quadrilateral root (Q).For readability, all Arabic script used here is fol-lowed by an orthographic transliteration betweenparentheses, using the Buckwalter standard1.
Buck-walter?s orthographic transliteration provides a one-to-one character mapping from Arabic to US-ASCIIcharacters.
With the exception of a few charac-ters, this transliteration scheme attempts to matchthe sounds of the Roman letters to the Arabic ones.The following list is a subset of the less obvioustransliterations used here: ?
(@), ?
(Y), ?
(a), ?
(i),?
(u), ?
(o), and ?
(~).2 Stem Generation DatabaseTemplateentry_idTemplatesList->string_idRootTypePatternVariantVoiceTenseTransform->transform_idAffixes->affix_idMainDictionarystem_idRootsList->root_identry->entry_idRootsListroot_idFMLRTemplateListstring_idstringFigure 1: The stem generation database tables andtheir relations.1The complete table of orthographic transliteration may befound at http://www.qamus.org/transliteration.htmArabic stems can be generated if lists of all rootsand all morphological patterns are provided.
It isnecessary that this data be coupled with a databasethat links the roots with their morphological patterns(or templates) so that only valid stems are gener-ated for each root.
The roots in this database maybe moulded with morphosemantic and morphosyn-tactic patterns to generate intermediate form stems.The stemsmay then be transformed into final surfaceforms with a number of specific morphophonemicrules using a finite state transducer compiling lan-guage.Figure 1 shows a summary of the stem generationtables and their relations.
The RootsList table con-tains all verb roots from the popular Arabic dictio-nary, Al-Waseet, (Mustapha et al, 1972), with F, M,L, and Q representing the table fields for up to fourradicals per root.
A root identifier is used to linkthis table to the Template table.
The Template tablelists all morphosemantic and morphosyntactic pat-terns used to generate stems from roots of a certaintype.
This table also specifies the syntactic proper-ties of stems (voice and tense) generated by using thetemplate entry.
The MainDictionary table links theRootsList and Template tables together and specifieswhich entries apply to which roots.Stems generated with these tables are unaffixedstems.
The affix id field links each entry to a subjectpronominal affix table that uses transformation rulesgenerating affixed stems.
Although object pronom-inal affixes are not dealt with in this paper, they aregenerally agglutinating in nature and therefore causeno morphophonemic alterations to a stem.
Theycan be added for generation or removed for analysiswithout affecting the stem at all.Affixation and transformation rules are bothspecified using PERL regular expressions (Friedl,2002).
Regular expressions (Regexp) is an alge-braic language that is used for building finite statetransducers (FSTs) that accept regular languages.
Inthe next section, Regexp is used to performmorpho-phonemic transformations and to generate affixedforms of stems.
If generated stems are to be usefulfor root extraction and morphological analysis, it isessential at every stage of generation to be able totrack exactly which letters are members of the rootradical set, which belong to the template, and whattransformations occur on the untransformed stemproducing the final surface form.3 Definition of Stem GenerationIn order to be useful in analysis applications, Arabicstems need to be in a surface form which will onlyundergo agglutinating changes for any further mor-phological modification.
Stems should be defined interms of the root radicals,morphosemantic and mor-phosyntactic template letters, and morphophonemicalterations.
By doing so, inversing stem transforma-tions becomes trivial.
We require the automatic stemgenerator to always be aware of the origin of each ofthe letters in stems it generates and to be able to dis-tinguish between letters in the original radical set orin the template string.
The stem generator may thenbe used to compile a complete list of all affixed stemsfrom database roots while retaining all transforma-tion information.
The resulting list of stems maythen be turned into a searchable index that holds thecomplete morphological analysis and classificationfor each entry.Since originally Arabic words can have a maxi-mum of four root radicals, a root radical set R isdefined in terms of the ordered letters of the root asfollows:R = {rF, rM, rL, rQ} (1)In the database, pattern, root, variant, and voice-tense ids identify a particular morphological patterns.
Templates are used to generate a stem from a root.The text of s is defined in terms of the letters and di-acritics of the template in sequence (x1...xl) and theradical position markers or place holders (hF, hM,hL, and hQ), that indicate the positions that lettersof the root should be slotted into:s = x1x2...hF...hM...hL...hQ...xn (2)Stem Generator (SG) uses regular expressions asthe language for compiling FSTs for morphophone-mic transformations.
Transformation rules take intoaccount the context of root radicals in terms of theirpositions in the template and the nature of the tem-plate letters that surround them.
Transformationsare performed using combinations of regular expres-sion rules applied in sequence, in amanner similar tohow humans are subconsciously trained to processthe individual transformations.
The resulting tem-plate between one morphophonemic transformationand the next is an intermediate template.
However,in order to aid the next transformation, the trans-formed radicals are marked by inserting their placeholders before them.
For example, hF ??
hM ??
hL ??
(FraMsaLma) is an intermediate template formedby the root radical set R ={?, ?, ?}
({r, s, m})and the morphological pattern s = hF ?
hM ?
hL ?
(FaMaLa).To create the initial intermediate template i0 fromthe radical set R and morphological pattern s, afunction Regexp(String, SrchPat,ReplStr) isdefined to compile FSTs from regular expressions.The function accepts in its first argument a stringthat is tested for a match with the search pattern(SrchPat) in its second argument.
If SrchPatis found, the matching characters in String arereplaced with the replace string (ReplStr).
Thisfunction is assumed to accept the standard PERLregular expression syntax.A function, CompileIntermediate(R, s), ac-cepts the radical set R and morphological patterns to compile the first intermediate template i0.
Aregular expression is built to make this transforma-tion.
It searches the morphological pattern text forradical place holders and inserts their respectiveradical values after them.
Since Regexp performssubstitutions instead of insertions, replacing eachmarker with itself followed by its radical value iseffectively equivalent to inserting its radical valueafter it.
Let p be a search pattern that matches alloccurrences of place holders hF, hM, hL, or hQin the morphological pattern, then an initial inter-mediate form i0 may be compiled in the followingmanner:i0 = CompileIntermediate(R, s)= Regexp(s, p, pRp)= {x1...hFrF...hMrM...hLrL...hQrQ...xn}(3)Let T = {t1...tm} be the transformation rules ap-plied on each intermediate template to create subse-quent intermediate templates.
Transformation rulesare defined as:tj = (SrchPatj , ReplStrj) (4)A second function Transform(i, t) is required toperform transformations.
A subsequent intermedi-ate template ij+1 is the recursive result of transform-ing the current intermediate template ij with the nextrule tj+1.
Each transformation is defined as:ij+1 = Transform(ij , tj+1) for 0 ?
j < m= Regexp(ij , SrchPatj+1, ReplStrj+1)(5)At any point in the transformation process, thecurrent transformed state of radicals (R?)
and tem-plate string (s?
)may be decomposed from the currentintermediate template as follows:CompileIntermediate?1(ij) = (R?, s?)
(6)To turn final intermediate template im into aproper stem, a regular expression is built thatdeletes the place holders from the intermediatetemplate.
To do this with a regular expression, theplace holders matched are replaced with the nullstring during the matching process as follows:Regexp(im, p, null) (7)Basic stems are only modified for tense and voice.Additional morphosyntactic templates or affixationrules further modify proper stems for person, gen-der, number, and mode.
Affixation rules are regu-lar expressions like transformation rules.
However,these rules modify final intermediate templates byadding prefixes, infixes, or suffixes, or modifying ordeleting stem letters.
They require knowledge ofthe radical positions and occasionally their morpho-phonemic origins.
Adding affixes to a stem operateson the intermediate template which retains the nec-essary information.Let a be the affixation rule that is being applied toa certain intermediate template:a = (SrchPat,ReplStr) (8)Now using the function Transform that wasdefined earlier, affixes are added to im to producethe intermediate affixed template im+1:im+1 = Transform(im, a)= Regexp(im, SrchPat,ReplStr)(9)To convert for output im+1 to an affixed stem, onemay remove place holders using the following:Regexp(im+1, p, null) (10)With this definition, generated stems are de-scribed by intermediate templates.
Intermediatetemplates retain knowledge of the current state oftemplate and radical letters without losing the abil-ity to recall their origins.
This algorithm, therefore,would avoid guesswork in the identification of rootradicals.
Automatic rule-based stem generationand analysis are both facilitated by this feature ofintermediate templates.4 Stem Generation EngineA stem generation engine may be built on the ba-sis of the definition just advanced.
The three com-ponents, Stem Transformer, Affixer, and Slotter, ap-plied in sequence, make up SG.
Stem Transformerapplies the appropriate transformation rules to themorphological pattern, Affixer adds specific affixesto the transformed template; and Slotter applies theradicals to the transformed affixed template to pro-duce the final affixed stem.SG begins with a stem ID from the MainDic-tionary table as input to Stem Transformer (See Fig-ure 1).
The root and entry associated with the stemID are used to identify the radicals of the root, themorphological pattern string, a list of transformationrules, and an affix table ID.i    transform_ruletemplate_stringF M L RStem TransformerTransformedIntermediate StemDecomposeIntermediate Stem TransformComposethtemplate_string F M L Ri=0...nfinal when i=nwhen i<nfinal when i=nsearch_patternreplace_stringFigure 2: Stem TransformerStem Transformer applies transformation rulesthat are localised to the root radicals and lettersof the template in the contexts of one another.
Toprepare the template and root for transformation, theengine begins by marking radicals in the template.Stem Transformer is applied incrementally usingthe current radical set, the template string, and onetransformation rule per pass, as in Figure 2.
The out-put of each pass is fed back into StemTransformer inthe form of the jth-rule-transformed template stringand radicals, along with the (j+1)th transformationrule.
When all rules associated with the template areexhausted, the resultant template string and radicalsare output to the next phase.To illustrate, assume the morphological patterns =m?
hF ?
u?
hM ?
hL ?
(AiFotaMaLa), the radical setR ={?, ?, ?}
({@,k,r}), and the transformation ruleset T = {1, 12}.Stem Transformer generates a proper stem usingthe following steps:Equation 3 above creates the initial intermediatetemplate when passed the radical set and morpho-logical template, thus producing:i0 = CompileIntermediate(R, s)= m?
hF ??
u?
hM ??
hL ??
(AiF@taMkaLra)The first transformation rule t1 = 1, t1 ?
T is aregular expression that searches for au (t) followinghF and replaces u (t) with a copy of rF.
To trans-form i0 into i1 with rule t1, Equation 5 is used, thusproducing:i1 = Transform(i0, t1)= m?
hF ??
??
hM ??
hL ??
(AiF@o@aMkaLra)Next, a gemination rule t2 = 12, t2 ?
T is appliedto i1.
The gemination regular expression searchesfor an unvowelled letter followed by a vowelled du-plicate and replaces it with the geminated vowelledletter.
Once more, Equation 5 is used to make thetransformation:i2 = Transform(i1, t2)= m?
hF ?H hM ??
hL ??
(AiF@~aMkaLra)To obtain the proper stem from the intermediatetemplate, the final intermediate template i2 may besubstituted into Equation 7:Stem = Regexp(i2, p, null)= m??H????
(Ai@~akara)To summarise, the final output of Stem Trans-former is a root moulded into a template and atemplate-transformed radical set.
These outputsare used as input to the affixation phase whichsucceeds stem transformation.
Affixer, appliediteratively to the product of Stem Transformer,outputs 14 different subject-pronominally affixedreplace_string (affix)F M L RAffixerTransformedIntermediate StemDecomposeIntermediate Word TransformCompose Generic IntermediateStem Matchtemplate_string F M L Rfinal finalfrom Stem Transformertemplate_stringFigure 3: The Affixer Phasemorphosyntactic forms for every input exceptthe imperative which only produces 5.
There are9 different tense-voice-mode combinations persubject pronominal affix, so most roots produce 117affixed stems per dictionary entry.
Affixer is runwith different replace strings that are specific to thetype of affix being produced.
It modifies copies ofthe transformed stem from the previous phase, as inFigure 3.
Using the example cited shortly before,Affixer is passed the last intermediate template imand the affix regular expression a.
In this example,a is a regular expression that searches for hLrL andreplaces it with hLrL?
u?
(LrLato); this correspondsto the past active third person feminine singularaffix.Now applying Equation 9 produces:i3 = Transform(i2, a)= m?
hF ?H hM ??
hL ??
u?
(AiF@~aMkaLrato)In the last stage of stem generation, Slotter re-places the place holders in the transformed templatewith the transformed radical set, producing the finalform of the affixed stem.
For the example, the resultof applying Equation 10 is:Regexp(i3, p, null) = m??H???u??
(Ai@~akarato)TransformF M L RSlotterfrom Affixertemplate_stringTransformTransformtemplate_stringreplace R literal with R valuereplace L literal with L valuetemplate_stringreplace M literal with M valueTransformtemplate_stringreplace F literal with F valueAffixed WordfinalFigure 4: The Slotter Phase5 OptimisationData produced for the use of SG was designedinitially with no knowledge of the actual patternsand repetitions that occur with morphophonemicand affix transformation rules.
In fact, SG is madeto create stems this way: A root is added to amorphosemantic template, then morphosyntactictemplates are applied to it, inducing in some pat-terns morphophonemic transformation.
However,while this may be useful in many language teachingtools, it is extremely inefficient.
The original datawas used to discover patterns that would allowstems to be created in an optimal manner.Following the classification in Yaghi (2004), thereare 70 verb root types associated with 44 theoreti-cally possible morphological patterns.
There is anelement of repetition present in the classification.
Inaddition, the Template table lists sequences of rulesthat operate on morphological patterns in a mannersimilar to how native speakers alter patterns phone-mically.
These rules could be composed into a sin-gle FST that yields the surface form.For example, in the previous section, the mor-phophonemic transformation rule set T = {1, 12}could have been written into one rule.
In its non-optimised form the rule duplicates rF in place ofu (t) creating intermediate form m?
hF ??
??
hM ??
hL ??
(AiF@o@aMkaLra) and then deletes the first of theduplicate letters and replaces it with a gemination di-acritic that is placed on the second repeat letter.
Theresulting surface form is m??H????
(Ai@~akara).
Instead,one rule could achieve the surface form by replac-ing the letter u (t) in the template with a geminated?
(@) yielding the same result.Compiling separate regular expressions for eachtransformation rule is costly in terms of processingtime especially when used with back-references, asSG does.
Back-references group a sub-pattern andrefer to it either in the search pattern or substitutestring.
Such patterns are not constant and are re-quired to be recompiled for every string they areused with.
It is desirable, therefore, to minimise thenumber of times patterns are compiled.
To optimisefurther, the transformation may be made on the mor-phological pattern itself, thus producing a sound sur-face form template.
This procedure would eliminatethe need to perform morphophonemic transforma-tions on stems.Each template entry in the Template table (seeFigure 1) is given a new field containing the surfaceform template.
This is a copy of the morphologicalpattern with morphophonemic transformations ap-plied.
A coding scheme is adopted that continuesto retain letter origins and radical positions in thetemplate so that this will not affect affixation.
Anytransformations that affect the morphological pat-tern alone are applied without further consideration.The coding scheme uses the Roman charactersF,M,L, andQ to represent place holders in the templates.Each place holder is followed by a single digit in-dicating the type of transformation that occurs tothe radical slotted in that position.
The codes havethe following meanings: 0=no alteration, 1=dele-tion, 2=substitution, 3=gemination.
If the code usedis 2, then the very next letter is used to replace theradical to which the code belongs.Take for example, the Template table entry for theroot type 17 (all roots with F=?
(w) and L=?
(y)), itsmorphological pattern m?
hF?u?
hM ?
hL ?
(AiFotaMaLa),and its variant (ID 0).
The morphophonemictransformation rules applied to the template areT={20,12,31,34,112}.
These rules correspond tothe following:?
20=change rF to a duplicate of the next letteru (t)?
12=geminate duplicate letters?
31=delete diacritic after the?
(y) in positionhL?
34=convert ?
(y) to m (A)?
112=convert m to ?
(Y)Surface Form m?
rF2uH rM0?
rL2?
(Ai F2t~a M0a L2Y)Affix rL??
u?
??
m ( L2yotumaA)Combined Result m?
rF2uH rM0?
rL2??
u?
??
m (Ai F2t~a M0a L2yotumaA)Table 1: Surface form template aligned with an affix entry rule.The surface form template can be rewritten asm?
hF2uH hM ?
hL2?
(AiF2t~aM0aL2Y).
This can beused to form stems such as m?vH???
(Ait~adaY) by slot-ting the root {?, ?, ?}
({w,d,y}).The affix tables use a similar notation for codingtheir rules.
Every affix rule indicates a change to bemade to the surface form template and begins with aplace holder followed by a code 0 or 2 unless the ruleredefines the entire template in which case the entrybegins with a 0.
Radical place holders in affix rulesdefine changes to the surface form template.
Thesechanges affect the template from the given radicalposition to the very next radical position or the endof the template, whichever is first.Affix rules with code 0 following radical placeholders signify that no change should be made tothat section of the surface form template.
However,a code 2 after a place holder modifies the surfaceform template in that position by replacing the letterthat follows the code with the rest of that segment ofthe rule.
Affix rules using code 2 after place holdersoverride any other code for that position in the sur-face form template because affixation modifies mor-phophonemically transformed stems.Creating affixed stems from templates andaffixes formatted in this way becomes far moreoptimal.
If a surface form template was specifiedas m?
rF2uH rM0?
rL2?
(AiF2t~aM0aL2Y) and itwas to be combined with the affix rule rL2??
u?
??
m(L2yotumaA) then SG simply needs to align theaffix rule with the surface form template using theplace holder symbol in the affix rule and replaceappropriately as in Table 1.With the resulting affixed surface form templateSGmay retain the radicals of the original root wherethey are unchanged, delete radicals marked withcode 1 and 3, and substitute letters following code2 in place of their position holders.
If the exampleabove is used with the root {?, ?, ?}
({w, d, y}),the final stem is: m?vH???w??
?n (Ait~adayotumaA, mean-ing "the two of you have accepted compensation fordamage").To use the original regular expression transfor-mations would take an average of 18000 secondsto produce a total of 2.2 million valid stems in thedatabase.
With the optimised coding scheme, thetime taken is reduced to a mere 720 seconds; that is4% of the original time taken.6 Generated Stem Database CompilerFigure 5: Output from the Stem Generation CGIOnce the dictionary database has been completedand debugged, an implementation of SG generatesfor every root, template, and affix the entire list ofstems derived from a single root and all the pos-sible template and affix combinations that may ap-ply to that root entry.
The average number of dic-tionary entries that a root can generate is approxi-mately 2.5.
Considering that each entry generates117 different affixed stems, this yields an average ofapproximately 300 affixed stems per root.
However,some roots (e.g., {?,u,o} ({k,t,b})) produce 13different entries, which makes approximately 1,500affixed stems for each of such roots.The generated list is later loaded into a B-Treestructured database file that allows fast stem searchand entry retrieval.A web CGI was built that uses the Stem Genera-tion Engine to produce all affixed stems of any givenroot.
A section of the results of this appears in Fig-ure 5.7 ConclusionsIn this paper, we have discussed our attempt at imi-tating the process used by Arabic speakers in gener-ating stems from roots.
We formulated a definitionof the process, facilitating an encoding of Arabicstems.
The encoding represents stems in terms oftheir components while still allowing a simple map-ping to their final surface forms.
A stem?s compo-nents are a root, morphosemantic and morphosyn-tactic templates, and any morphophonemic alter-ations that the stem may have underwent.
In do-ing so, the problem has been reduced to the muchsmaller task of obtaining stems for the words sub-ject to analysis, and then matching these against thesurface forms of the pre-analysed stems.
The encod-ing retains most of the information essential to stemgeneration and analysis, allowing us to trace the var-ious transformations that root radicals undergowheninflected.
Root extractors and morphological anal-ysers can match an input word with a defined verbstem, then use the information in the definition to de-termine with certainty the stem?s root and morpho-logical pattern?s meaning.
The authors intend to usea similar strategy to define stems for Arabic nouns.Mapping from words to defined stems is nowmuch easier.
The stem generation algorithm hereattempts to produce a comprehensive list of allinflected stems.
Any verb may be found in thislist if some simple conjoin removal rules are firstapplied.
Conjoins are defined here as single letterconjunctions, future or question particles, emphasisaffixes, or object pronominal suffixes that aggluti-nate to a verb stem.
Because conjoins may attachto a verb stem in sequence and without causingany morphological alteration, extracting stemsfrom Arabic words becomes similar to extractingstems from English words.
In fact, many of theArabic word analysis approaches reviewed in theintroduction to this paper would yield more accurateresults if applied to stem extraction instead of rootextraction.
It would become possible to use for thispurpose conventional linguistic, pattern matching,or algebraic algorithms.The dictionary database described here can beused to form the core of a morphological analyserthat derives the root of an input word, identifies itsstem, and classifies its morphosemantic and mor-phosyntactic templates.
An analyser based on theseprinciples may be used in many useful applications,some of which are detailed in Yaghi (2004).
Exam-ple applications include root, lemma based, and ex-act word analysis, searching, incremental searching,and concordancing.ReferencesS.
S. Al-Fedaghi and F. S. Al-Anzi.
1989.
ANew Algorithm to Generate Arabic Root-PatternForms.
In Proceedings of the 11th National Com-puter Conference and Exhibition, pages 391?400,Dhahran, Saudi Arabia, March.Riyad Al-Shalabi and Martha Evens.
1998.
AComputational Morphology System for Arabic.In Proceedings of the COLING/ACL98, pages66?72, Montr?eal, Qu?ebec, Canada, August.Kenneth R Beesley.
2001.
Finite-State Morpho-logical Analysis and Generation of Arabic at Xe-rox Research: Status and Plans in 2001.
In ARA-BIC Language Processing: Status and Prospects,Toulouse, France, July.
Arabic NLP Workshop atACL/EACL 2001.Mohammed A. El-Affendi.
1991.
An Algebraic Al-gorithm for Arabic Morphological Analysis.
TheArabian Journal for Science and Engineering,16(4B).Mohammed A. El-Affendi.
1999.
Performing Ara-bicMorphological Search on the Internet: ASlid-ing Window Approximate Matching Algorithmand its Performance.
Technical report, CCIS Re-port King Saud University.Jeffery E. F. Friedl.
2002.
Mastering Regular Ex-pressions.
O?Reilly, 2nd edition, July.Lama Hamandi, Rached Zantout, and Ahmed Gues-soum.
2002.
Design and Implementation of anArabic Morphological Analysis System.
In Pro-ceedings of the International Conference on Re-search Trends in Science and Technology 2002,pages 325?331, Beirut, Lebanon.IbrahimMustapha, Ahmed H.Al-Zayat, Hamid Ab-delQadir, and Mohammed Ali Al-Najjar, editors.1972.
Al-Moajam Al-Waseet.
Cairo Arab Lan-guage Academy, Cairo, Egypt.B.
Thalouth and A. Al-Dannan.
1990.
A Compre-hensive Arabic Morphological Analyzer Genera-tor.
In Pierre Mackay, editor, Computers and theArabic Language.
Hemisphere Publishing, NewYork.Jim Yaghi.
2004.
Computational Arabic Verb Mor-phology: Analysis and Generation.
Master?s the-sis, University of Auckland.Sane M. Yagi and Saad Harous.
2003.
Arabic Mor-phology: An Algorithm and Statistics.
In Pro-ceedings of the 2003 International Conference onArtificial Intelligence (IC-AI 2003), Las Vegas,Nevada.
