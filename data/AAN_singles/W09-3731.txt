Proceedings of the 8th International Conference on Computational Semantics, pages 295?298,Tilburg, January 2009. c?2009 International Conference on Computational SemanticsFormalisation of Intensionality as AlgorithmsRoussanka LoukanovaComputational Linguistics, Uppsala University and TiLPS, Tilburg Universiyrloukano@stp.lingfil.uu.se1 Background and Recent DevelopmentIn a sequence of papers, Moschovakis developed a class of languages of re-cursion as a new approach to the mathematical notion of algorithm and de-velopment of computational semantics, e.g., see Moschovakis [7], for FLR,and Moschovakis [8], for L?ar.
In particular, the language and theory ofacyclic recursion L?aris intended for modeling the logical concepts of mean-ing and synonymy, from the perspective of the theory of computability, bytargeting adequateness of computational semantics of NL.
L?aris a higherorder type theory, which is a proper extension of Gallin?s TY2, Gallin [3],and, thus, of Montague?s Intensional Logic (IL).
L?arhas a highly expressivelanguage, an effective reduction calculus and strong mathematical proper-ties.
It models the notion of algorithm by abstract mathematical objects,which are tuple of functions defined by mutual recursion, called acyclic re-cursors.
The referential intensions of the meaningful L?arterms are acyclicrecursors defined by their canonical forms, which are recursion terms.
Forthe construction of recursion terms (where-terms), the language L?aruses arecursion operator, denoted by the constant where that applies over a headterm A0and a set of assignments, called body, {p1:= A1, .
.
.
, pn:= An},where each Aiis a term of the same type as the recursion variable pi(1 ?
i ?
n): A0where{p1:= A1, .
.
.
, pn:= An}.
The where-terms rep-resent recursive computations by designating functional recursors: intu-itively, the denotation of the term A0depends on the functions denotedby p1, .
.
.
, pnthat are computed recursively by the system of assignments{p1:= A1, .
.
.
, pn:= An}.
In an acyclic system of assignments, the com-putations close-off.
The formal syntax of L?arallows only recursion termswith acyclic systems of assignments, while the FLR allows cyclicity, but islimited with respect to its type system.
The languages of recursion (e.g.,FLR and L?ar) have two semantic layers: denotational semantics and ref-295erential intensions.
The recursion terms of L?arare essential for encodingthat two-fold semantic information.
Denotational Semantics: For anygiven semantic structure A, there is at most one, well-defined denotationfunction, den, from terms and variable assignments to objects in the do-main of A.
Thus, for any variable assignment g, an L?arterm A of type?
denotes a uniquely defined object den(A)(g) of the subdomain A?of A.L?arhas a reduction calculus that reduces each term A to its canonical formcf(A) ?
A0where {p1:= A1, .
.
.
, pn:= An} (unique modulo congruence, i.e.,with respect to renaming bound variables and reordering of assignments).Intensional Semantics: The notion of intension in the languages of re-cursion covers the most essential, computational aspect of the concept ofmeaning.
Intuitively, Int(A) is the algorithm for computing its denotationden(A).
Formally, the referential intension, Int(A), of a meaningful expres-sion A is the recursor that is defined by the canonical form cf(A) of A. Twomeaningful expressions are synonymous iff their referential intensions arenaturally isomorphic, i.e., they are the same algorithms.
Thus, the algorith-mic meaning of a well-formed expression (i.e., its sense) is the informationfor how to ?compute?
its denotation, i.e., expressions have sense by carry-ing instructions for acquiring what they denote in a structure (model).
Thecanonical form cf(A) of a meaningful term A encodes its intension, i.e., thealgorithm for computing its denotation, via: (1) the basic semantic facts,which consist of {p1:= A1, .
.
.
, pn:= An} and the ?head pattern?
A0,that are needed for computing the denotational interpretation den(A), and(2) a rank order of the steps for incremental computation of the denotationden(A)(g), e.g., a terminating order of the recursive steps that compute eachden(Ai)(g), for i ?
{0, .
.
.
, n}.
Thus, the languages of recursion offer a for-malisation of central computational aspects of Frege?s distinction betweensense and denotation, with two semantic ?levels?
:NL Syntax =?
L?r=?
Referential Intensions (Algorithms) =?
Denotations?
??
?ComputationalSemantics2 Open Problems for the Language of Acyclic Re-cursion as Semantic Theory of NLRelational Type Theory with Partiality Acyclic recursion terms andacyclic recursors model terminating algorithms for computing the denota-tions of meaningful expressions.
The idea of restricting recursion languagesto acyclicity, as in L?ar, is that, for certain applications to NL semantics,partiality and self-reference are not needed.
In 80?s, Barwise and Perry296(e.g., [1]) introduced Situation Theory with the ideas that partiality, factualcontent and situatedness are crucial features of the meaning concepts thatinvolve mental states, incl.
attitudes.
Situation Theory models partialityand the inherent relational and situational nature of information, in general,not only linguistic, by diverging from the traditional type theoretic settings.Situation Semantics proceeds as a special case of application of SituationTheory to NL semantic information.
By taking up the ideas of partiality,Muskens [9] realized the ideas of Situation Semantics by generalizing Gallin?sTY2with partial relations and building corresponding generalized Montaguegrammars, i.e., Partial Type-theoretic Grammars.
The importance of par-tial relational structures to semantics of NL is well investigated by SituationTheory.
Furthermore, Muskens [9] demonstrated that encoding relationaltype systems is not only inadequate in the case of partial relational struc-tures, but needless.
That opens a need of extending the language L?arto afull higher order type theory for modeling recursors with partial functionsand relations.Factuality and State Variation L?aruses states (similar to indexes forpossible worlds and times, situations, contexts) at all levels of its own syntaxand semantics.
However, the potential expressiveness of L?arfor represen-tation of state dependant semantic objects has not been fully developed.There is a need of more finely grained semantic concepts by a type theoryof recursion that: (a) represents denotation functions with values that arepartial, situated objects with factual content, and, (b) uses terms with inter-nal variation of state constants and state variables that occur inside terms.Such terms are more adequate representation of information that dependson varying1states.
Work in the direction of representing locality of semanticfacts in L?ar, has been done (however without state variation in individualterms) by Kalyvianaki [5],[4].Denotation and Intention Muskens [10] refined the denotation func-tion by a revision of Thomason?s Intentional Logic.
The result is a logi-cal grammar that takes propositions as primitive objects, with a relationthat associates propositions with sets of possible worlds.
The techniques ofMuskens [10] offer a possibility for refining the denotational semantics of re-cursion languages by splitting it into two sub-layers: (a) situated denotations(as above), and, (b) denotational intention:Syn L?r=?
Intensions (Algorithms) =?
Denotations{Sit DenotationsDenotational Intentions1Similarly to, for example, the varying resource situations in Situation Theory.297Underspecification Underspecified semantic representation becamemajor effort of contemporary research, see Bunt [2] for a comprehensiveoverview of the field.
Representing semantic underspecification of NL withlanguages of recursion needs to be developed.
Initial work, see Loukanova [6],shows the unique expressiveness of L?arto accommodate its inherent facilitiesfor representing semantic underspecification of NL expressions.Representation of Attitudes Semantics of attitudes, such as know,believe, etc., in the languages of recursion, is an open problem.Syntax-Semantics Interface A major work to be done is to definerender relations from NL to languages of recursion.
Initial work shows thatthat is a realistic task.
A more demanding task, with potential applications,e.g., to machine translation, is a render relation with inverse to NL.References[1] J. Barwise and J. Perry.
Situations and Attitudes.
Cambridge, MA:MIT press,1983.
[2] H. Bunt.
Semantic underspecification: Which technique for what purpose?
InH.
Bunt and R. Muskens, editors, Computing Meaning, volume 3 of Studies inLinguistics and Philosophy 83, pages 55?85.
Springer, Dordrecht, 2007.
[3] D. Gallin.
Intensional and Higher-Order Modal Logic.
North-Holland, 1975.
[4] E. Kalyvianaki.
Algorithmic Natural Language Semantics.
PhD thesis, Uni-versity of Athens, 2007.
[5] E. Kalyvianaki.
Factual content in algorithmic natural language semantics.In V. V. Nurmi and D. Sustretov, editors, Proceedings of the Twelfth ESSLLI2007 Student Session, pages 123?133, Dublin, Ireland, 2007.
[6] R. Loukanova.
Typed lambda language of acyclic recursion and scope under-specification.
In R. Muskens, editor, Workshop on New Directions in Type-theoretic Grammars, ESSLLI 2007, pages 73?89, Dublin, Ireland, 2007.
[7] Y. N. Moschovakis.
Sense and denotation as algorithm and value.
Number 2in Lecture Notes in Logic, pages 210?249.
Springer, 1994.
[8] Y. N. Moschovakis.
A logical calculus of meaning and synonymy.
Linguisticsand Philosophy, 29:27?89, 2006.
[9] R. Muskens.
Meaning and Partiality.
Studies in Logic, Language and Infor-mation.
Stanford: CSLI Publications, 1995.
[10] R. Muskens.
Sense and the computation of reference.
Linguistics and Philos-ophy, 28:473?504, 2005.298
