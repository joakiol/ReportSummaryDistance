An HPSG-to-CFG Approximation of JapaneseBernd Kiefer, Hans-Ulrich Krieger, Melanie SiegelGerman Research Center for Artificial Intell igence (DFKI )Stuhlsatzenhausweg 3, D-66123 Saarbri icken{kiefer, krieger, siegel}@dfki, deAbstractWe present asimple approximation method for turn-ing a Head-Driven Phrase Structure Grammar into acontext-free grammar.
The approximation methodcan be seen as the construction of the least fixpointof a certain monotonic hmction.
We discuss an ex-periment with a large HPSG for Japanese.1 In t roduct ionThis paper presents a simple approximationmethod for turning an HPSG (Pollard and Sag,1994) into a context-free grmnmar.
The the-oretical underpinning is established through aleast fixpoint construction over a certain mono-tonic function, similar to the instantiation ofa rule in a bottom-up passive chart parser orto partial evaluation in logic programming; see(Kiefer and Krieger, 2000a).1.1 Bas ic  IdeaThe intuitive idea underlying our approach isto generalize in a first step the set of all lexiconentries.
The resulting structures form equiv-alence classes, since they abstract from word-specific information, such as FORN or STEM.
Theabstraction is specified by means of a restrictor(Shiet)er, 1985), the so-called lexicon rcstrictor.The grammar rules/schemata are then instan-tiated via unification, using the abstracted lexi-con entries, yielding derivation trees of depth 1.We apply the rule restrictor to each resultingfeature structure, which removes all informationcontained only in the daughters of the rule.
Dueto the Locality Principle of HPSG, this deletiondoes not alter the set of derivable feature struc-tures.
Since we are interested in a finite fixpointfrom a practical point of view, the restrictionalso gets rid of information that will lead to in-finite growth of feature structures during deriva-tion.
Additionally, we throw away informationthat will not restrict the search space (typically,parts of tile semantics).
The restricted fea-ture structures (together with older ones) thenserve as tile basis for the next instantiation step.Again, this gives us feature structures encodinga derivation, and again we are applying the rulerestrictor.
We proceed with the iteration, untilwe reach a fixpoint, meaning that further itera-tion steps will not add (or remove) new (o1" old)feature structures.Our goal, however, is to obtain a context-fl'eegrammar, trot since we have reached a fixpoint,we can use the entire feature structures as (com-plex) context-free symbols (e.g., by nlappingthem to integers).
By instantiating the HPSGrules a final time with feature structures fromthe fixpoint, applying the rule restrictor andfinally classifying the resulting structure (i.e.,find tile right structure from the fixpoint), onecan easily obtain tile desired context-free grain-mar (CFG).1.2 Why is it Wor th?Approximating an HPSG through a CFG ~ isinteresting for the following practical reason:assuming that we have a CFG that comes closeto an HPSG, we can use the CFG as a cheap fil-ter (running time complexity is O(IGI 2 x n 3) foran arbitrary sentence of length n).
The mainidea is to use the CFG first and then let theHPSG deterministically replay the derivationslicensed by the CFG.
The important point hereis that one can find for every CF productionexactly one and only one HPSG rule.
(Kasperet al, 1996) describe such an approach for wordgraph parsing which employs only the relativelyunspecific CF backbone of an HPSG-like grmn-mar.
(Diagne et al, 1995) replaces the CF back-bone through a restriction of the original HPSG.This grammar, however, is still an unification-1046based grammar, since it employs coreferenceconstraints.1..3 Content  of  PaperIn tile next section, we describe the JapaneseHPSG that is used in Verbmobil, a project thatdeals with the translation of spontaneously spo-ken dialogues between English, German, andJapanese speakers.
After that, section 3 ex-plains a simplified, albeit correct version of theimplemented algorithm.
Section 4 then dis-cusses the outcome of the approximation pro-cess .2 Japanese  GrammarThe grammar was developed for machine trans-lation of spoken dialogues.
It is capable of deal-ing with spoken language phenomena nd un-grammatical or corrupted input.
This leads onthe one hand to the necessity of robustness andon the other hand to mnbiguitics that must bedealt with.
Being used in an MT system for spo-ken language, the grammar must firstly acceptfragmentary input and bc able to deliver partialanalyses, where no spanning analysis is awdl-able.
A coinplete fragmentary utterance could,e.g., be:dai~oubuOKayThis is an adjective without any noun or (cop-ula) verb.
There is still an analysis available.If an utterance is corrupted by not being fullyrecognized~ the grammar delivers analyses forthose parts that could be understood.
An ex-ample would be the following transliteration ofinput to the MT system:son desu ne watakushiso COP TAG ino hou wa dai~oubuGEN side 'FOP okaydesu da ga kono hiCOP but this daywa kayoubi desu ~teTOP Tuesday COP TAG(lit.
: Well, it is okay for my side, butthis day is ~l~msday, isn't it?
)Here, analyses for the following fragments arcdelivered (where the parser found opera wa inthe word lattice of the speech recognizer):sou dcsu nc watakushiso COP TAG Ino hou wa dai{oubuGEN side TOP okaydCSltCOP(Well, it is okay for my side.
)era  TOP(The opera)hone hi wa kayoubithis day TOP Tlmsdaydesu ncCOP TAG(This (lay is 3hmsday, isn't it?
)Another necessity for partial analysis comesfl'om real-time restrictions imposed by the MTsystem.
If tile parser is not allowed to producea spanning analysis, it delivers best partial frag-ments.rl'tle grammar must also be applicable to phe-nomena of spoken language.
A typical problemis tile extensive use of topicalization and evenomission of particles.
Also serialization of parti-cles occur nlore often than in written language,as described in (Siegel, 1999).
A well-definedtype hierarchy of Japanese particles is necessaryhere to describe their functions in the dialogues.Extensive use of honorification is another sig-nificance of spoken Japanese.
A detailed de-scription is necessary for different purposes inan MT system: honorification is a syntacticrestrictor in subject-verb agreement and com-plement sentences, l~lrthermore, it is a veryuseflfl source of information for the solutionof zero pronominalization (Metzing and Siegel,1994).
It is finally necessary for Japanese gener-ation in order to tind the appropriate honorificforms.
The sign-based in%rmation structure ofHPSG (Pollard and Sag, 1994) is predestinedto describe honorification on the different levelsof linguistics: on the syntactic level for agree-ment phenomena, on tile contextual level foranaphora resolution and connection to speakerand addressee reference, and via co-indexing onthe semantic level.
Connected to honorificationis the extensive use of auxiliary and light verbconstructions that require solutions in the areasof morphosyntax, semantics, and context (see(Siegel, 2000) for a more detailled description).Finally, a severe problem of tile Japanesegrammar in the MT system is the high po-1047tential of ambiguity arising from the syntax ofJapanese itself, and especially from the syntaxof Japanese spoken language.
For example, theJapanese particle ga marks verbal argmnents inmost cases.
There are, however, occurrences ofga that are assigned to verbal adjuncts.
Allow-ing g a in any case to mark arguments or ad-juncts would lead to a high potential of (spuri-ous) ambiguity.
Thus, a restriction was set onthe adjunctive g a, requiring the modified verbnot to have any unsaturated ga arguments.The Japanese language allows many verbalarguments to be optional.
For example, pro-nouns are very often not uttered.
This phe-nomenon is basic for spoken Japanese, such thata syntax urgently needs a clear distinction be-tween optional and obligatory (and adjacent)arguments.
We therefore used a descriptionof subcategorization that differs from standardHPSG description in that it explicitly states theoptionality of arguments.3 Bas ic  Algor i thmWe stm't with the description of the top-levelfunction HPSG2CFG which initiates the ap-proximation process (cf.
section 1.1 for themain idea).
Let 7~ be the set of all rules/ruleschemata, 12 the set of all lexicon entries, Rthe rule restrictor, and L the lexicon restrictor.We begin the approximation by first abstract-ing from the lexicon entries /2 with the help ofthe lexicon restrictor L (line 5 of the algorithm).This constitutes our initial set To (line 6).
Fi-nally, we start the fixpoint iteration calling It-crate with the necessary parameters.1 HPSG2CFG(T~, 12, R, L) :~==~2 local To;3 T0 := (~;4 for each  l E/25 l :=  L(1);6 To := To u {l};7 Iterate(T~, R, To).After that, the instantiation of the ruleschemata with rule/lexicon-restricted elementsfrom the previous iteration Ti begins (line 11-14).
Instantiation via unification is performedby Fill-Daughters which takes into account asingle rule r and Ti, returning successful instan-tiations (line 12) to which we apply the rulerestrictor (line 13).
The outcome of this restric-tion is added to the actual set of rule-restrictedfeature structures Ti+l iff it is new (rememberhow set union works; line 14).
In case that re-ally new feature structures have not been addedduring the current iteration (line 15), meaningthat we have reached a fixpoint, we immediatelyexit with T/ (line 16) from which we generatethe context-free rules as indicated in section 1.1.Otherwise, we proceed with the iteration (line17).8 Iterate(g, R, Ti) :?==v9 local Ti+j;10 Ti+~ := Ti;11 for each r E T~12 for each t C Fill-Daughters(r, Ti) do13 t := R(t);14 Ti+I := Ti+I U {t};15 i f  Ti = T/+I16 then  re turn  Cornpute-CF-Rules(TG i)17 else Iterate(7~, R, Ti+l).We note here that the pseudo code above isonly a naYve version of the implemented algo-rithm.
It is still correct, but not computation-ally tractable when dealing with large HPSGgrammars.
Technical details and optimizationsof the actual algorithm, together with a descrip-tion of the theoretical foundations are describedin (Kiefer and Krieger, 2000a).
Due to spacelimitations, we can only give a glimpse of theactual implementation.Firstly, the most obvious optimization appliesto the function Fill-Daughters (line 12), wherethe number of unifications is reduced by avoid-ing recomputation of combinations of daugh-ters and rules that already have been checked.To do this in a simple way, we split the set Tiinto Ti \ T/.-1 and T/_I and fill a rule with onlythose permutations of daughters which containat least one element from T/ \ r / _  1 .
This guaran-tees checking of only those configurations whichwere enabled by the last iteration.Secondly, we use techniques developed in(Kiefer et al, 1999), namely the so-called rulefilter and the quick-check method.
The rule fil-ter precomputes the applicability of rules intoeach other and thus is able to predict a fail-ing unification using a simple and fast tablelookup.
The quick-check method exploits the1048flint that unification fails snore often at cer-tain points in feature structnres than at oth-ers.
In an off  line stage, we parse a test cor-pus, using a special unifier that records all fail-ures instead of bailing out after the first onein order to determine the most prominent fail-ure points/paths.
These points constitute theso-called quick-check vector.
When executing aunification during approximation, those pointsare efficiently accessed and checked using typeunification prior to the rest of the structure.
Ex-actly these quick-check points are used to buildthe lexicon and the rule restrictor as describedearlier (see fig.
1).
During ore: experinmnts,nearly 100% of all failing unifications in Fill-Daughters could be quickly detected using theabove two techniques.Thirdly, instead of using set union we usetlhe more elaborate operation during the addi-tion of new feature structures to T/.+I.
In fact,we add a new structure only if it is not sub-sumed by some structure already in tile set.
Todo this efficiently, tile quick-check vectors de-scribed above are employed here: before per-fl)rming full feature structure subsnmption, wepairwise check the elements of the vectors us-ing type subsumption and only if this succeedsdo a full subsmnption test.
If we add a newstructure, we also remove all those structures in7)ql that are subsumed by the slew structurein order to keep the set small.
This does notchange the language of tile resulting CF gram-mar because a more general structure can beput into at least those daughter positions whichcan be fillcd by the more specific one.
Conse-quently, fbr each production that employs themore specific structure, there will be a (pos-sibly) more general production employing themore general structure in the same daughter po-sitions.
Extending feature structure subsump-lion by quick-check subsumption definitely paysoff: more than 98% of all failing subsumptionscould be detected early.Further optimizations to make the algorithmworks in practice are described in (Kiefer andKrieger, 2000b).4 Eva luat ionThe Japanese HPSG grammar used in our ex-periment consists of 43 rule sdmmata (28 unary,15 binary), 1,208 types and a test lexicon of2,781 highly diverse entries.
The lexicon restric-tot, as introduced in section 1.1 and depicted infigure 1, maps these entries onto 849 lexical ab-stractions.
This restrictor tells us which parts ofa feature structure have to be deleted---it s thekind of restrictor which we are usually going touse.
We call this a negative restrictor, contraryto tile positive restrictors used in the PATR-II system that specii\[y those parts of a featurestructure which will survive after restricting it.Since a restrictor could have reentrance points,one can even define a reeursivc (or cyclic) re-strictor to foresee recursive mbeddings as is thecase in HPSG.The rule restrictor looks quite silnilar, cut-ling off additionally information contained onlyin the daughters.
Since both restrictors removethe CONTENT feature (and hence the semanticswhich is a source of infinite growth), it hal>pened that two very productive head-adjunctschemata could be collapsed into a single rule.Tiffs has helped to keep the number of featurestructures in the fixpoint relatively small.We reached the fixpoint after 5 iterationsteps, obtaining 10,058 featnre structures.
Thecomtmtation of the fixpoint took about 27.3CPU hours on a 400MHz SUN Ultrasparc 2witht~?anz Allegro Common Lisp under Solaris 2.5.Given tim feature structures from the fixpoint,the 43 rules might lead to 28 x 10,058-t- 15 x10,058 x 10,058 = 1, 51.7,732,084 CF produc-tions in the worst case.
Our method produces19,198,592 productions, i.e., 1.26% of all pos-sible ones.
We guess that the enormous et ofproductions is due tile fact that the grammarwas developed for spoken Japanese (recall sec-tion 2 on the mnbiguity of Japanese).
Likewise,the choice of a 'wrong' restrictor often leads to adramatic increase of structures in the fixpoint,and hence of CF rules--we are not sure at thispoint whether our restrictor is a good compro-mise between tile specificity of the context-freelanguage and the number of context-free rules.We are currently implementing a CF parser thatcan handle such an enormous et of CF rules.In (Kiefer and Krieger, 2000b), we report ona similar experiment that we carried out usingthe English Verbmobil grmnmar, developed atCSLI, Stanford.
In this paper, we showed thatthe workload on the HPSG side can be drasti-cally reduced by using a CFG filter, obtained1049-PHONFORMSYNSEM LOCAL-CONTENTCONTEXTHEADCATSUBCAT3PEC ~\ ]"NONLOCAL-CONTENTCONTEXTLOCAL~ATM0DMARK \[~\]FORMALMODUSP0SPTYPE10BJIII II OBJ2 I i I IVAL ~ 1I SpR l J  !I SUBJ I 1 I ISUBCATHEADPOS 11 SPEC FORMAl MARKMODFigure 1: The lexicon restrictor used during the approximation of the Japanese grammar.
Inaddition, the rule restrictor cuts off the DAUGHTERS feature.from the HPSG.
Our hope is that these resultscan be carried over to the Japanese grammar.AcknowledgmentsThis research was supported by the GermanMinistry for Education, Science, Research, andTechnology under grant no.
01 IV 701 V0.Re ferencesAbdel Kader Diagne, Walter Kasper, and Hans-Ulrich Krieger.
1995.
Distributed parsing withHPSG grammars.
In Proceedings of the ~th Inter-national Workshop on Parsing Technologies~ IW-PT'95, pages 79-86.Walter Kasper, Hans-Ulrich Krieger, JSrg Spilker,and Hans Webcr.
1996.
From word hypotheses tological form: An efficient interleaved approach.
InD.
Gibbon, editor, Natural Language Processingand Speech Technology, pages 77-88.
Mouton deGruyter, Berlin.Bernd Kiefer and Hans-Ulrich Krieger.
2000a.A context-free approximation of Head-DrivenPhrase Structure Grmnmar.
In Proceedings of the6th International Workshop on Parsing Technolo-gies, IWPT2000, pages 135-146.Bernd Kicfcr and Hans-UMch Kricger.
2000b.
Ex-periments with an HPSG-to-CFG approximation.Research report.Bernd Kicfcr, Hans-Ulrich Kricger, John Carroll,and Rob Malouf.
1999.
A bag of useful techniquesfor emcient and robust parsing.
In Proceedings ofthe 37th Annual Meeting of the Association forComputational Linguistics, pages 473-480.Dieter Metzing and Melanin Siegel.
1994.
Zero pro-noun processing: Some requirements tbr a Verb-mobil system.
Verbmobil-Memo 46.Carl Pollard and Ivan A.
Sag.
1994.
Head-DrivenPhrase Structure Grammar.
Studies in Contem-porary Linguistics.
University of Chicago Press,Chicago.Stuart M. Shiebcr.
1985.
Using restriction to extendparsing algorithms for complex-feature-based for-malisms.
In Proceedings of the 23rd Annual Meet-ing of the Association for Computational Linguis-tics, pages 145-152.Melanin Siegel.
1999.
The syntactic processing ofparticles in Japanese spoken language.
In PTv-cecdings of the 13th Pacific Asia Confcrcncc onLanguage, Information and Computation, pages313-320.Melanic Siegel.
2000.
Japanese honorification i anHPSG framework.
In Proceedings of the l~th Pa-cific Asia Conference on Language, Informationand Computation, pages 289-300.1050
