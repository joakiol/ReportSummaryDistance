On aligning treesJ o  Ca lderUn ivers i ty  of  Ed inburghLanguage Techno logy  Group,  Human Communicat ion  Research  Cent re  andCent re  for Cogn i t ive  Science2 Bucc leuch  P laceEd inburgh ,  Scot land  EH8 9LWJ .
Ca\ ] .derCed.
ac .
ukAbstractThe increasing availability of corpora nno-tated for linguistic structure prompts thequestion: if we have the same texts, anno-tated for phrase structure under two dif-ferent schemes, to what extent do the an-notations agree on structuring within thetext?
We suggest he term tree alignmentto indicate the situation where two markupschemes choose to bracket off the same textelements.
We propose a general method fordetermining agreement between two anal-yses.
We then describe an efficient im-plementation, which is also modular inthat the core of the implementation can bereused regardless of the format of markupused in the corpora.
The output of theimplementation on the Susanne and Penntreebank corpora is discussed.1 In t roduct ionWe present here a general design for, and mod-ular implementation of, an algorithm for comput-ing areas of agreement between structurally anno-tated corpora.
Roughly speaking, if two corporabracket off the same stretches of words in their struc-tural analysis of a text, the corpora agree that thatstretch of text should be considered a single unit atsome level of structure.
We will (borrowing a usagefrom (Church and Gale, 1993) term this agreement(sub)tree alignment.We make the following assumptions, which appearreasonable for markup schemes with which we arefamiliar:?
the "content" of each text consists of a sequenceof "terminal" elements.
That is, the content isa collection of elements generally correspond-ing to words and punctuation and this will beroughly constant across the two corpora.
It mayalso contain additional elements to represent,for example, the positing of orthographicallynull categories.?
the two corpora whose trees are to be alignedcontain identifiable structural markup.
That is,structural "delimiters" are distinct from otherforms of markup and content.?
two corpora agree on an analysis when theybracket off the same content.?
The corpora may contain additional markupprovided this is distinct from content and struc-tural markup.Our goal, then, is to determine those stretches ofa text's content which two corpora agree on.
Whymight we want to do this?
There are several reasons:?
increase confidence in markup and determineareas of disagreementIf two or more corpora gree on parts of an anal-ysis, one may "trust" that choice of groupingmore than those groupings on which the cor-pora differ.
Alignment can be used to detectdisagreements between manual annotators.?
verify preservation of analyses across multipleversions of a corpusIf all the subtrees of a corpus are aligned withthose of another, then the second is consistentwith the first, and represents analyses at leastas detailed as those in the first.
Such automaticchecking will be useful both in the case of man-ual edits to a corpus, and also in the case whereautomatic analysis is performed.?
import markup from one corpus to anotherIf one corpus contains "richer" information thananother, for example in terms of annotation75of syntactic function or of lexical category, themarkup from the first may be interpreted withrespect o analyses in the second.?
determine constant markup transformationsHaving identified aligned subtrees, the labels ofa pair of trees may be recorded, and the resultsfor the pair of corpora analysed to determineconsistent differences in markup.?
determine constant ree transformationsA set of pairings between aligned subtrees canbe used as a bootstrap for semi-automaticmarkup of corpora.We can also identify some specific motivationsand applications.
First, in the automatic determina-tion of subcategorization information, confidence inthe choice of subcategorization may be improved byanalyses which confirm that subcategorization fromother corpora.
Second, the algorithm we have devel-oped is robust in the face of minor editorial differ-ences, choice of markup for punctuation, and overallpresentation of the corpora.
We have processed theSusanne corpus (Sampson, 1995) and Penn treebank(Marcus et al 1993) to provide tables of word andsubtree alignments.
Third, on the basis of the com-puted alignments between the two corpora, and thetree transformations they imply, the possibility isnow open to produce, semi-antomatically, versionsof those parts of the Brown corpus covered by thePenn treebank but not by Susanne, in a Susanne-like format.
Finally, in the development of phrasalparsers, our results can be used to obtain a measureof how contentious the analysis of different phrasetypes is.Obviously, the utility of algorithms uch as theone we present here is dependent on the quality andreliability of markup in the corpora we process.2 The  TaskIn this section, we provide a general characterizationof agreement in analysis between two corpora.We assume the existence of two corpora, C l andC rl.
The contents of each corpus is a sequence ofelements drawn from a collection of terminal ele-ments, markers for the left and right structural de-limiters (LSD and RSD, respectively) and possiblyother markup irrelevant to the content of the text orits structural analysis.
Occurrences of structural de-limiters are taken to be properly nested.
We assumeonly that the terminal elements of some corpus can1for left and right.be determined, and not that the definition of termi-nal element correspond to some notion of, say, word.A consequence of this is that markers in a corpus forempty elements may be retained, and operated on,even if such markers are additional to the originaltext, and represent part of a hypothesis as to thetext's linguistic organization.The following sequences can then be computedfrom each corpus:W (z,*} the terminal elementsS {t,*} the terminal elementsand structural delimitersSo S is the corpus retaining structural annotation,and W is a "text only" version of the corpus.
As eachof these is a sequence, we can pick out elements ofeach by an index, that is W~ will pick out the nthterminal element of the left corpus.The following definitions allow us to refer to struc-tural units (subtrees) within the two corpora.
(Weomit the superscript indicating which corpus we aredealing with.
)Number ing  subt rees  We number the subtrees ineach corpus as follows.
If Si is the ith occurrence ofLSD in S and Sj is the matching RSD of Si, then theextent of subtree (i) of S is the sequence S i .
.
.
Sj.The terminal yield of a subtree is then its extentless any occurrences of LSD and RSD.
This can beconveniently represented as the stretch of terminalelements included within a pair of structural delim-iters, i.e.yield(t) = (k,l)where Wk is the first element in the extent of t andWt the last.
We'll refer to a subtree's number as itsindex.
Let Subtrees(C) be the set of yields in C.Two corol lar ies The following result will be use-ful later on: for two subtrees from a corpus, if t < t ~then either t t is a subtree of t or there is no domi-nance relation between t and t t.Likewise, we claim that, if a subtree is greaterthan unary branching, then it is uniquely identifiedby its yield.
To see this, suppose that there are twodistinct subtrees, t, t r such that yield(t) = yield(t )or = ( i , j ) .
Then, no terminal element intervenesbetween Wi and t's LSD, or between Wj and t'sRSD, and the same condition holds of t ~.
It musttherefore follow that t is a subtree of t ~ or vice versaand that they are connected by a series of only unarybranching trees.A l ignment  of  te rmina l  e lements  We want tocompute the minimal set of differences between W l76and W r, i.e.
a monotone, bijective partial functiondefined as follows: 2Let 5 be the largest subset of i x j for0 < i < length(W l) and 0 < j < length(W r) suchthat 5 is monotone and bijective, and5( i )= j  if either W/ t=W~or 1 < i < length(Wt),=1 < j < length(Wr),and Wit+l = W ~ j+ lIn other words, 6 records exact matches between theleft and right corpora, or mismatches involving onlya single element, with exact matches to either side.This allows minor editorial differences and choice ofmarkup for terminal elements to have no effect inoverall alignment.A l igned subt rees  We now offer the following def-inition.
Two trees in C t and C r are aligned, if theyshare the same yield (under the image of ~), i.e.
:(W\[, W;) e Subtrees(C r) and(WE(i), W~t(j)/E Subtrees(C t)Two subtrees are strictly aligned if the above con-ditions hold and neither tree is a unary branch.
(This definition will be extended shortly.)
We sawabove that, if a tree is not unary branching then itsyield is unique.Unary  branch ing  In the case of unary branch-ing, the inverse of yield will not be a function.
Inother words, two subtrees have the same yield.
Thesituation is straightforward if both corpora share thesame number of unary trees for some yield: we canpair off subtrees in increasing order of index.
(Re-call that, under dominance, a higher subtree indexindicates domination by a lower index.)
In this casewe will say that the unary trees in question are alsostrictly aligned.If the two corpora differ on the number of unarybranches relating two nodes, there is no principledway of pairing off nodes, without exploiting moredetailed, and probably corpus- or markup-specificinformation about the contents of the corpora.Linking to original corpus  For each of the cor-pora we assume we can define two functions, oneterminal ocation will give the location in the orig-inal corpus of a terminal element (e.g.
a function2Of course, in the general case, such a function maynot be unique: It seems a reasonable assumption i  thecase of substantial texts in a natural anguage that thefunction will be unique (although perhaps empty).from terminal indices to, say, byte offsets in a file),and the other tree location will give the location inthe original corpus of a subtree (in terms, say, ofbyte offsets of the left and right delimiters).
Treelocations will therefore include any additional infor-mation within the corpus tored between the left andright delimiters.Output  of  the procedure  The following infor-mation may be output from this procedure in theform of tables?
of subtree indices indicating strict alignment oftwo trees?
a table of pairs of sequences of subtree indicesindicating potential alignment?
of pairs of terminal element indices, (i.e.
thefunction 5) and?
of single terminal element mismatches, for laterprocessing to detect consistent differences inmarkup.?
of the results of applying the functions terminallocation and tree location to the relevant infor-mation above.This output can be thought of as a form of "standoff" annotation, from which other forms of informa-tion about the corpora can be derived.3 A por tab le  imp lementat ionIn this section we describe the implementation f theabove procedure which abstracts away from detailsof the markup used in any particular corpus.
Theoverall shape of the implementation is shown in Fig-ure 1.
The program described here is implementedin Perl.Normal i za t ion  We can abstract away from de-tails of the markup used in a particular corpus byproviding the following externally defined functions.annotation removal and t rans format ionAs our procedure works only in terms of ter-minal elements and structural annotation, allother information may be removed from a cor-pus before processing.
We also take this oppor-tunity to transform the LSD and RSD used inthe corpus into tokens used by the core proces-sor (that is, { and } respectively).
We may alsochoose at this point to normalize other aspectsof markup known to consistently differ betweenthe two corpora.77leR corpusright corpus, Normalize to token stream//j t/Terminal alignmentFigure 1: Overall view of processingterminal  and tree locations Similarly, separateprograms may be invoked to provide tables ofbyte offsets of terminals and start- and end-points of trees.With these functions in place, we proceed to thedescription of the core algorithm.Comput ing minimal differences We use theprogram d i f f  and interpret its output o computethe function 6.
Specifically we use the Free SoftwareFoundations gd i f f  with the options --minimal,--ignore-case and --ignore-all-space, to guar-antee optimal matches of terminals, and allowing ed-itorial decisions that result in differences in capital-ization.Subtree indexing and al ignment detectionWe use the following for representation f subtreesand the time-efficient detection of aligned trees.Trees in the right corpus (which we can think ofas the target) are represented aselements in a hashtable, whose key is computed from the terminal in-dices of the start and end of its yield.
Each elementin the hash table is a set of numbers, to allow forthe hashing of multiple unary trees to the same cellin the table.In processing the subtrees for the left corpus, wecan simply check whether there is an element in thehash table for the terminal indices of the yield ofthe tree in the left corpus under the image of thefunction 6.4 An  exampleIN this section we give a brief example to illustratethe operations of the algorithm.
The start of theSusanne corpus is shown in the table here:the \[O\[S\[Nns:s.\[Nns..Nns\]Fultoncountygrandjury .Nns:s\]say \[Vd.Vd\]Friday \[Nns:t.Nns:t\]while the corresponding part of the treebank looksas follows.
( (S(NP (DT The) (NNP Fulton) (NNP County)(NNP Grand) (NNP Jury) )(VP (VBD said)78(NP (NNP Friday) )The process of numbering the terminal elementsand computing the set of minimal differences willgive rise to a normalized form of the two corporasomething like the following, where the two leftmostcolumns come from Susanne, the others from Penn.
(The numbers here have been altered slightly for thepurposes of exposition.
)Susanne word position Penn word positionthe 2 the 1Fulton 3 Fulton 2County 4 County 3Grand 5 Grand 4Jury 6 Jury 5Note that the function ~ will in this case map 2to 1, 3 to 2 and so on.
Note that the whole of thissequence of words is bracketed off in both corpora.Accordingly, we will record the existence of a treespanning 1 to 5 in the treebank.
The alignment ofthe corresponding tree from Susanne will be detectedby the noting that 5(2) = 1 and 5(6) = 5.5 Resul ts  of processing on twocorporaWe have processed the entire Susanne corpus and thecorresponding parts of the Penn treebank, and pro-duced tables of alignments for each pair of marked-up texts.
Inputs for this process were a Susannefile and the corresponding "combined" file from thetreebank (i.e.
including part:of-speech information).Recalling that the treebank marks up the relation-ship between pre-terminal and terminal as a unarytree (and that Susanne doesn't do this), the treebankregularly contains more trees than Susanne.First, a definition: a tree is maximal if it is notpart of another tree within a corpus.
We ignore max-imal trees of depth one in both corpora (as these cor-respond to indications of textual units rather thansentence-internal structural markup).
Each maxi-mal tree containing a tree of greater than depth onein the treebank may also contain sentence punctua-tion which is treated within the structural markup.As such markup is typically treated as external tostructural annotations within Susanne, trees con-taining a sentence and sentence punctuation cannotbe a possible target for alignment across the twocorpora.
We can take the number of maximal treesof depth more than one within Susanne as an indi-cation of the number of trees within the treebankwhich are unalignable as a consequence of decisionsabout markup.
This figure comes to 2431.With those considerations, we report he followingfindings:?
There are 156584 terminal elements in Susanneand of those we find a total of 145583 (93%) forwhich a corresponding element is identified inthe treebank.
The corresponding figure for thetreebank is 86% (of 169782 terminal elementsin the treebank).?
There are 110484 trees in Susanne (including1952 maximal trees of depth one) and so a to-tal of 108532 potentially aligned trees.
Of these76011 (70%) are aligned with trees in the tree-bank.?
There are 301086 trees in the treebank, ofwhich we can eliminate 169782 as trees indi-cating preterminals (which includes 122174 con-taining just a textual delimiter), and an esti-mated further 2431 as representing trees includ-ing sentence punctuation.
This gives a total of128873 (= 59%) of trees in the treebank pos-sibly aligned with those in Susanne are in factaligned.The figures above bear out the impression thattrees in the Penn treebank are more highly artic-ulated than those in Susanne, even leaving asidethe additional structure induced by the treatmentof punctuation and preterminals in the treebank.The entire process of computing the above out-put completes in approximately fifty minutes on anunloaded Sun SparcStation 20.6 Conclus ions and L imitat ionsWe have seen above a formal characterization a dimplementation f an algorithm for determining theextent of agreement between two corpora.
The corealgorithm itself and output formats are completelyindependent ofthe markup used for the different cor-pora.
The alignments computed for the Susanne cor-pus and corresponding portion of the Penn treebankhave been presented and discussed.Having computed the alignment of trees acrosscorpora, one option is to compute (either explic-itly or in some form of stand-off annotation) a cor-pus combining the information from both sources,thereby allowing the use of the distinctions made byeach corpus at once.There are many future experiments of obvious in-terest, particularly those to do with examining po-tential factors in cases of agreement or disagreement:?
analysis of consistency of annotation by markuplabelCertain phrase types may be more consistentlyannotated than others, so that we can be moreconfident in our analyses of such phrases.79?
analysis of consistency of annotation by depthin treeFrom the above discussion we can see thatalignment of maximal trees approximates 100%,while that for terminals approximates 90%.Therefore (and unsurprisingly) the bulk of dis-agreement lies somewhere in between.
Is thatdisagreement evenly distributed or are therefactors to do with the complexity of analysisat play?These proposals have to do essentially with formalaspects of markup.
Other, perhaps more interestingquestions, touch on the linguistic content of anal-yses, and whether for example particular linguisticphenomena are associated with divergence betweenthe corpora.The assumption that trees within corpora arestrictly nested represents an obvious limitation onthe scope of the algorithm.
In cases where markupis more complex, other strategies will have to bedeveloped for detecting agreement between corpora.That said, the class of markup for which the algo-rithm presented here is applicable is very large, in-cluding perhaps most importantly normalized formsof SGML (Goldfarb, 1990), for example that pro-posed by (Thompson and McKelvie, 1996).7 AcknowledgementsI would like to thank Chris Brew for conversations onthe topics discussed in this paper and the anonymousreferees for their comments.
This work was fundedby the UK DTI/SERC-funded SALT Programme aspart of the project ILD: The Integrated LanguageDatabase.applications.
In SGML Europe.
Graphical Com-munications Association: Alexandria, VA.Re ferencesKenneth W. Church and William A. Gale.
1993.
AProgram for Aligning Sentences in Bilingual Cor-pora.
Computational Linguistics, 19:75-102.Charles F. Goldfarb 1990.
The SGML Handbook.Oxford: Clarendon Press.Mitchell P. Marcus, Beatrice Santorini and MaryAnn Mercinkiewicz.
Building a Large AnnotatedCorpus of English: The Penn Treebank.
Compu-tational Linguistics, 19:313-330.Geoffrey Sampson 1995.
English for the Computer:The SUSANNE Corpus and Analytic Scheme.Oxford: Clarendon Press.Henry S. Thompson and David Mckelvie.
1996 Asoftware architecture for simple, efficient SGML80
