LIl~(k)- I 'msing of C( ut 1 A-Cont(xt,-\]~ (c Grammars : )  -) 0 " ~ ~ ~ ' *  ~ *G~se\]a Pit;schl ?B  ln fo rn la t ik ,  Universil.
i;t des Saarland(!s1).-6612',/Saar\])r{icken, ( \ ]e rmany E-marl:  p i t sch~cs .un i - sb .deAbst rac t(hmpled-Cmltext--l:ree ( l rammars are a t~eneralizati(mof context-free, grammars obtained by combining nonter-minals to parcnthescs which can only be substituted si-mnltaneously, l/efl~rring to the generative capacity of thegrammars we obtain an inlinite \]licrarchy <)f lanl4uages thatcomprlscs the context-free languages as the first and all thelattguages generated by ~lYee Adjoining Crammars (TA(;s)as the second eh'.ment.
Ilere, we present a genera\]izati(inof the context-free LR(k)--notion, which characterizes sub-classes of Couph:d-Context-\[:ree (}ralltlltars and ihelefmefor TAGs-  which c;tn be.
pa.rsed in linear time.
The pars-\]rig proce.dure described works incrementally so that it canbe used for on-llne l)arsing o\ [natura l  language.
\]'~xanlplesshow that important Tree Adjobling Languages, e.g.
thosemodelling cross-serial dependencies, c:tn \])e ge.nerate.d byLR(k) Coupled--Context.-\]:ree (Iranlmars.\] In t roduct ionill order  to process ll&ttlra\[ I;t/l~ll;l~,eS 3 ;Vfl first }laveto model the synta?
formally.
Many investigations ;is~e.g., \[lligS,l \] show th~tt this cannot be done by context-free gralii l l lars ((Jl!'(ls).
I"or context-sensitive ~.,,l'allllllarswhich are powerful enough, it is kn(iwlt that the anal5'-sis is PSl)ACl:,--coml~lete.
q'hus, there is a trade-off' hetween tile power of the.
formalism and it;; analysis coln-plexlty.
To solve this dilenlma, much work has \]men donetO char;t(:terize l;tllgl|al~e classes ill Detweett coltt(!xt-freeand context-sensitlve languages he{rig powerful enough tomodel the syntax  o\[' natural \]allgllages hut endowed withat Imlynomial time analysis.
(2mll)\[{:(l-(;onl.ext-I"ree Grammars represent such a. forma\]isnl yeneralizhlg CI"Cs.
Theirsuitability to model syntactical phenmnen:t fo\]h)ws \[romthe fact that they include tit{.'
\]itllgllaJ!,eS ~.
;CllCl'il(Cd by (heTree Adjoining (h 'ammars (TACs) (i\]' \[.hls87\] as (me sub-class.
Anlung other properties, both f()rmallsms are ;d)leto model tim linguistic phenomenon of cross s(:ri;d depen.dencies, which is not context.free hut \]'rcquently appearsin natural languages (of.
\[Shi86\]).The formalism of (fOul)led-Context-Free (',ramnlars \]titsbeen introdu<:ed in \[CIIR92\] and \[Cua92\].
It h,'.hmt, s to ~l~(:family (ff v'egulate<l striwg rewriting syslems investigatedin \[1)P89\].
The inc:ruased generat ive capa<:ity is o\])laincdby allowing to rewrite sintultanemlsly a {retain iHllllbCl'of elements.
Other regulated string rewriting systems its,e.g., the Scatte.red (Jontext (ll'allllllars of \[(',llft.q\] general-ize CFCs by allowing simultaneous rewriting of arbitrarycombinations o\] elements.
\[n \[I)P89\], it is shown that thisresults in languages which are not sentillnear.
But semilin=earity is important since it formalizes the "conslant-growthlm)pe.rty" of natural lanyuages (cf.
\[3os85\]).
In co,,t,'ast othese, all languages defined by our I'urmallsnl are semi\[{near*'\['his research as been supported hy a (h'aduh:rtenkol\]cg-fellowship of the I)cutsche l"orschtmgsgenleinschaf(.because of two restrlctions.
First, only those elementseanhe rewritteu simultaneously whh:h were produced by thesame re.writing.
Second, the Coupled-Conte?t-Free (\]ram-llial'S coltsi(ler e\]ellleltts Iewr\ [ t ten SillllllLalleo|tsly ;ts COil|-portents of ;t parenthesis.
Those can only l)e substituted ifthey form a parenthesis and t\]ley can only he suhstitutetl\[)y seqlteltc(!s of pa.r(.
*lll,heses cov'rectly nested.When characterizhq4 Cuup\]ed-Context-I'~ree (~\]r&ll~l\[Htrsby lhe maximal number o1" elements rewritten simultan(>ously - width we call the rm& o\[" the grammar we getan infinite hierarchy.
The generative capacity grows withthe rank.
The smallest element of the hierarc\] W - theone of rank I ?
are (~l;'(;s. The next element, namelyCouple.d-Context-Free ( Iramnlars of rank 2, generates t}lesame class of Tanguag.es as the Tree Adioini ,g (~raIlllnaFsof \[Jl/I'75\] and \[Jos87\].
llence, all noth)ns and algorithmsdesignled for Couph~d-Conl.ext-Free (il'ilIiIllt;tl's Of riLItk 2can easily be translated onto 't'A(ls (eL \[Cua92\]).l~ec:allse of the enJarl,e(I geIterat, lve capacity, it is notsutprising that the coutllh:xity of analysing I:tl<gIHtges gen-er~tled by (Jouph:d-Context-l"ree (h'anm,ars is larger thanit is in the context free case.
\[t even increa.ses with grow-i,m rattk (c:L \[11P9,1\]).
Therefore, we aim to characterizesuhclasses of the set of all lall,~ll~t.ff, es geller~tl.ed hy (,'Oul)led-(.~oiHexl,-.Vree (~'4t'atllllltaFs which are powerful ellOltgh tomodel the important phenomena of natural liu,guages, I)utwhich are of at lower c(mq)lexity.The deternliuistic (:onlext-free parsing with Llt(k)-~,~" ............ leads t .
.
.
.
li ...... r tinl ......... lysis (of.
\[Knu65\]),the best lmssible.
Therefbre, its generalization is very at-tractive.
A fh'st a l tempt in this direction was done in\[.'qVg()\].
I~u(.
there, only TA(Is are ilwestiga|.ed.
\]\]ere, weinvesilgatc~ the whole hi(Hallchy Of Couph:d Context-l"ree(lramma~s.
Allhou,;h their enlarged generative (Stl)a{:ityseems to I)e c(mlradictory Io a. Ihm;u' time cOnll)\]exlty ofq\]le pals{rig algmithm, we can present an Ll~(k)-notiont'{, (:oup\[(:d-Co,ttext-l"vee Crammars dcs{:ril,ing a class oflaugual'j:s, which can actnal\]y bc anMysed in linear time.This increase ill power a.s to the linear time ~tlHtlysis is ilaidhy an expensive ln'eprocessil~g.
It in taking into account(he comple?
rclntlons \])etwe{'n parewthese.s that involvesILL(: ill(:rease ill conll)lexity, l\[owever, these costs are to hepaid only once for each grammar.
The suhchuss describedhy our I,l~(k)-notion for a lixed k i.rows with the rank.
"\['he al~orithm of \[.q\:90\] fnr l , l?
(k)/l 'AGs does not ful-lill the imp( , tant  Valid Prefix I)roperty.
This means thatfor any prefix o1" the iUl)Ul: aheady accepted, there exists asuffix such that the whoh', word is in the language analysed.It allows to detect illegal inputs as soon its possible, whichis necessary for efllcient parsing.
Our algorithm fulfillsthis property.
Addition;lily, the algorithm its well as thenotion defined here ,'eprescnt genera.lizations o\] their con-text-free C<)lllt(,et'pltrts which are ll~ttllra\] ill tit<: sense thatthey strictly contain tit{: context-free sitnation as the spe-cial case of (;ouple(\[-(Jonl, exl.-Free (\]ranLulars o\] rank 1.401An example of an important LR(k)-Coupled-Context-Free Grammar is the one generating the language {w$w Iw ~ {a, b}*} which reflects the syntactical construction ofcross-serial dependencies.The paper starts by defining the Coupled-Context-FreeGrammars.
Thcn, wc shortly recall the context-free Libparsing procedure.
Subsequently, the deterministic finiteautomaton used there to guide the analysis is modifiedsuch that it can handle Couplcd-Cm~text-Frec Grammars.Based on it, the parsing algorithm for LR(O) Coupled-Context-Free Grammars is derived.
Tiffs results in thegeneralized efinition of the LR(O)-notlon.
As for CFCs,the LR(k)-Coupled-Context-Free Grammars result fromthe LR(0)-ones by resolving decision conflicts using alookahead of at most k symbols.2 Coup led-Context -F ree  GrammarsCoupled-Context-Free Grammars are defined over ex-tended semi-Dyck sets which are a generalization of scml-Dyck sets.
Elements of these sets can be regarded as se-quences of parentheses that are correctly nested.
Senti-Dyek sets play an important role in the theory of formallanguages.
To extend the family of context-free languagesby using them wc consider parentheses of arbitrary finiteorder define(\[ as follows:Def init ion I (Parentheses  Set)A finite sc tK  := ((ki,~ .
.
.
.
.
ki, , , , ,) l i ,  mi ~ N} is a Paren-theses Set iff it satisfies ki,j # kt,,,, Jot" i ?
I or j # m.The elements eric are erdled Parentheses.
All parenthesesof a fixed length r are summarized as~:\[~\] := ((~,., .
.
.
.
.
~,,,,,,) ~ ~: I ,n, = ~},,hct.e ~C\[O\] := {~}.
(~ de.otes O,e e.,Vt,a ,,otd.)
"the s,.2 ofall (first) components of parenthesis in K is denoted byeon,p(~C) := {~, I (~, .
.
.
.
.
~, .
.
.
.
.
~,) e ~c} ,esp.co,marc) := {~, I (~,  .
.
.
.
.
~,) e ~c}.Straightforward frmn this, we getDefinit ion 2 (Extended Semi-Dyck Set)Let ~ be a parentheses set and 7' an arbiteary set where7" VI K = T m comp( K) = O. E D( K, T), the extended semi-Dyck set over E and T, is indnetively defined by(El) T* C ED(K, T).
(E2) ~C\[~1 c ~D(~C, T).
(E3) u~ .
.
.
.
.
u, E ED(IC, T) , (k ,  .
.
.
.
.
k ,+, )  e K\[," + 11==~ k~u~ ""kru~k~+~ G ED(K ,T ) .
(E4) u,v e ED(K ,T )  ~ u.  v ~ E1)(K,T) .
(E5) ED(K ,  7") is the smallest set f,,lfilling em,ditions(E1)-(E4).Now, we define how to generate new elements in ED(K,  T)starting from given ones.Def init ion 3 (Parenthesis Rewri t ing System)A Parenthesis Rewriting System over ED(/C, T) is a fiaite,nonempty set P of productions of the form{(k,  .
.
.
.
.
k~) ~ (.~ .
.
.
.
.
o,.)
I(~, .
.
.
.
.
~,) C- ,~, .
,  .
.
.
.
.
,,.
e ED(~,  "r)}.The left and the right side of p := (X~,.
.
.
,X~) -*(o:1 .
.
.
.
.
o6,) G P is denoted by?
S (p ) := (x,  .
.
.
.
.
x~), thc sonrce oh,, a,,d?
V(p) := (or, .
.
.
.
.
e~,.
), the drain ofp.Now, we can deline our grammars.
The term "coupled"expresses that a certain number of (:ontext-free rewritingsis executed in parallel and controlled by K\[.
"Definit ion 4 (Couph;d-Context - l ,  Yeo Grammar)A Coupled-Context-Free Grammar over ED(K ,T )  is auordered ~-luple (IC, T, l 7 ,S) whcr'e l' is a ParenthesesRewritin 9 Syste,n over ED(K~,7') and S 6 KIll.
There-fore, IC can be regaeded as a set of couph:d nonterminctls.The set of (all these granmmrs is denoted by CG' I,'G.- ~(~ At last, we give the definition of derivation in CCI  ,.Let (;' = (K,T, P,S) C- ,(.1 G and V := cornp(l?
)UT.We define the relation ::~zc; as a subset of V* ?
V' consist-ing of all derivation steps of rank r for G' with "r > l.p =>a '0 holds for 99,~/, G V* if and only if there ex-\[st (k, .
.
.
.
,k,) -~ (-* .
.
.
.
.
- , )  e P, ,*,,,*,,,, e V' ,  andu2, .
.
.
,Ur  E ED(K ,T )  such that9~ = ulkau.fl~2...u,.k,.u,.+l and~\]~ .~: I t l t~ l / /2e?
2 ?
, , l t v ( 'g r?
l r+ l  ,-'~6' denotes the reflexive, transitive CIOSII|'(: Of ~'(~', ( )b-viously, 'al .u,+\] (5 I')D(/C,'/') follows from S =*>c; (p for~2 and ~b siuce the result of the substitution is a sequenceof parentheses correctly nestcd if and only if the originalword was.
The language generated by C is defined asLaG) := {w ~ 7'" 1.9 -4~, ,,}.A sequence ~1, .
.
.
,  90, with 9~i -~c; (~'~i-{-1 for all I <i < n and ~1 -- g, (P. = ?
is called a derivation o\]'(,from g in C. A deriwttion is righhaost if and only if in eachderivation step, the parenthesis ending at the rlghtnlostpoint is substituted.
In analogy to C\]"Cls, it is obvionsthat for any derivation in CC1;'C there exists exactly oneri~htmost (h'.riwtt k,i.Ex,, ,np\[ , ,  ~ c: _- ({s, (x ,  x ) ) ,  {a, (',S,'t}, P, s) is i,,cc/,'6'(2) ,.here 1' := {S - .
XSYf, (X, X) -~ (aXb, e~,t) I(.~, ea)}.
c ~e,,e,'(,.,s the lan:tt,.g.
{.
"~*'e"d" I '* -> ~},e.g.
S :~'6' X$.~ =>(~ aXb$c~;d :>c; aaXbb$ccX-dd=>c1 aaabbbeccdddIn order to be able to describe the generative cal)ac-ity of Coupled-Context-Free Crammars of different ranksexltctly, we need the following notions:Definit ion 5 (Rank, CCFG( l ) )Foe any (5' = (K,7', P,S) G C(21,'C,', let the rank of (l bed,'finc,l ,,s ,'ank(G) := ,,,ax {" I (< .
.
.
.
.
k,.)
C ,~}.
The.at,we define for all l > l:CCl,'C(l) := {c, E ccrc ; '  l ,.a,,k(c') < l}The following theorem prowm in \[Gua92\] shows thatCCI,'(I In,\[his up an infinite hierarchy of languages and,at the same time, represents a prel)er extension of CI"Csnot exceeding the lmwer of context-sensitive granlolars:Theorem 1 ( l l i e rarehy)Let CI"L be the family of all eontext-free, CSL  the familyof all context-sensitive languages, TAL  the family of alllanguages generated by 7'A (.Is and CCI;'L(I) Ihe one gener-ated by CCFG(l ) .
It hohls:(1) c't,u, = cc/, 't,(1), "eAL = c'cl.'t,(2).
(2) cct.
't,(l) ~ C'C'FL(I + ~) /o,.
.
.
l > i.
(a) 6'CVL(I) c cs / ,  /or ,n l > i.Sometimes, i* is useful to "neglect" the relations be-gtween the components of a parenthesis for a short time.Then, wc investlg~tte C/ :== (eomp()C),7', P ' ,S )  insteadof G = (K, T, P, S) C~ .C I 'G  forP' :-- U {ki - ,  ~v~ll _< i <.
r}.
(~ ,...,~..)-.(,,,...,,~,.
)~PSince C' is certainl~ a CI'G we &mote 6" (resl).
P'),by CI"(G)  (resp.
CI ' ( I ' ) )  in the sequel.
Obvmus,y, G'satisfies LaG) C LAG").4023 Context -F ree  L \ ]?
, -Pars ingNow, we shortly recall the deterministic ontext-freeLR(k) -pars ing  strategy of I (nuth  (or.
\[Kmt65\]).
1,'or slm-plicity, we restrict ourselves on the case k = O.
The strat-egy essentially renlains unchanged if lookahead is neces-sary.
It uses a deterministic finite antoniaton (dfa) todrive a pushdown stack while scilnli i i ig the inpnt  fromleft to right.
'l.
'}uis, it COllstrllcts a riglitnlost derivationbottom-up.
The states of the d.fa for a given LR(0)-CI"Gconsist of subsets of the set of all context-free items for (;(N,T, P,S'), i.e.
of the set { \ [X  --~ ~,.fit\] I x .
.
.
.
i~ e v ) .
'\['hey result from dcternilning the deternlinistic w~rslon ofthe following nondeternfinistic automaton for (:l:\]!\]aeh context-free item is a state.There are.
three kinds of state transitions:\ [x  ...... yf~\] "~Z \ [x  .
.
.
.
Y.fq,\ [X  .~ , r  .
?
-~  .
.
, , i7}  , b': -' <,,./~\], a,,d\ [Y  > "~.X~\]-<, \[X --, .<,.1.In the (leternllnlstic version, all those context-free \tentsare grouped in one state which can he reaclled from tileinitial st~tte by the sail)e Setltle.itce of symbols) with allypossible number of e-transltions in-between.The stack symbols are the states of the dfa.
At first,the state containing the item \[S' - ,  .S\] is llushed.
(Theaddithmal )rodnction .S '~ --, ,S' serves to define exactly thestart and the end of the analysis.)
Then, we iterate thefollowing actions delmndhlg on the toImlost state q:(Shi f t )  l fq  contains \ [X- ,~* .a / f \ ]  and a is the next inputsynt\])ol to be read, we push the state reached froln r 1vl .
.
.
.
.
( i t  coiitaiits at least {X ~ <,a.fl\].
)(Reduce)  i f  q contai,,s \ [X  -~ c<.
}, we I,Ol, tim I-I tov,i l , iststates.
Let q' be the state now OH top of the stack.Then, we push the state reached via X from q'.
(q'eoutains at least one it.e,n \ [Y - - .
T.XS\] and \ [X  -~ .~\]while the new topniost state contains \[Y -~ 7X.
@)'l?he pushdown is driven determlnlsth:ally hy the Ilia ifthis d fa contains no state wliere th('~e are two differ-ent Reduce-items (Ih:duce-lteduce conllict) or as well itShift- as a lt.ednee-itent (Shift-Reduce conflict).
A (~'1"(1 isLR(O) ill" the states of its dfa show no Shift-i\[e.dnce and 11oReduce-l/.educe conflict.
For LR(k)-grammars, conflicts inthe LR(O)-dfa are solved by it h)okahead of k syml)ols.4 The F in i te  AutomatonOne possibility to generalize dfa is to construct theusnal dJa for 6'F(G), (I E CCI,'G.
In l)rinciph!, thisidea is used in \[SVg0\].
"|'lie fl)llowing example showsthat this produces unnecessary contlicts: I,et (; --.-({s , (X ,A_~) ,S )} ,{ .
, * , ,~ , i~},V , .
s  ') c= c 'cva(2) re ,  Z" :={s- -~ XXD$,D - ,  D,Z l d, (x ,~; )  ---+ (t,,e) l (,O,,<:d)}a,,d C(a )  = {b,:d"$,,d,e<t,P$1,, > 1).
its <q<, is sl.>w,,hi Figure l. (~ is not LI~(O) in this way since this dSaohvlously has a Sllift-l\[educe conflict (in the box doublylined).
This conflict cannot he solved by loekahead sinceat this point, the lookahead is always d x.
Therefore, (l isnot LR(k) for ~tlly k ~ 0.
But this conflict is liOt neces-sary.
I",g., when analysiug bedd bottoni-up, we first haw..to reduce X --+ b.
This inlplies that lie|ere coming to theconflict state, we have to choose X - ,  e in order to geta correct derlwttion.
This is the case \])ecause X an(I Xresnlthlg from applyh~g the productiou 5; '-~ XX D$ ar(:/ x  .
.
.
.
.
.
b I IN - ,  ,e J ID -+ .d lLx --, J .
.
.
.
L - - -l : igure 1: dfa(( ; )<:mq)h'.d and therefm'e haw~ to be substitut~M by coupledI)roducLiolls.To awfid these conflicts, we extend the dfa.
If" we use thecontext-free LR-I)arsing strate.gy, we know which produc-t\o,, we have to choose for any Xi  G eoinp(K.) \ compl (K.)because we first encounter alld reduce the correspondingX1 E co,lpj (hT).
Suppose that we can store the infornla-tlm, ahout X .
.
.
.
.
.
X,., (Xl .
.
.
.
.
X,.)
E K.\[,'\], when X~ isreduced, let us say as the "future".
(\[low to do this isshown in Section 5.)
Can we use this to awfid the conflict?Now, our automaton needs additim,fl transitions unders,,ch ~,~ c cv (P )  where S(7,~) ?
,,o,,,V~(JC) h,)las.
"rh,,s,we split ways inside the dfa which lead to conflict si.ates.
"Fo formalize our  atltOlt)aiA}ll) We need the followingDefinlt .hni 6 (1 -C losure)/,'o,.
<,..\ 'c= ,.o,,,p4sc ), t,.~ , 'e .<,h.bte(X) :=(v  c ...... ~,,(E.) I - Ix  - .
Y .
e o r (v )} .reachabb:+(X) denotes its reflexive transitive closure.
For.
, y  q E f,({\[X --, a./7\] \[ X --+ c~fl G CI"(I ')}), wc definethe I-Closure(q) as q untied to Ihe set{\[X .
.
.
.
q l X e ,:o,,,I,,(X:), X - ,  ,~ e C'F(P)  .
.d.-3Y c coi,+,(sc) : (3\[z - , /~Yv\ ]  c ,s,,,,J x e ,.~.~.h.bte'(Y))}.i- Closure formalizes the construction of the deterministicversion of a nondeterministic finite autonhM, On as it is donefor the dJ'a of (Jl"Cls.
Its special feature is that it useso,,ly those X ~ ,* E CI"(P) f,,lfilling X C- e,,,,,p,(K).
IfA" c ,,o,,,v(JC) \ c,,,,,v, UC), ti,e expa,,di,,g prod,,,:ti<),, isdetc.rmhmd hy the corresponding first component.l )e f ln l thm 7 (1)1"/1((_;))Let G' = (K, 7', 1", .q') ~ CCb'(l. The l)ete.rmildstk: l"hdteAutonlaton for (I is defined as DI"A((1) :=(Qa, ~a,  ~G, S'c~, l"a),,,he,',: S'.
:= l-Cto..,,'e({\[,V'-~ .Sl}) is 0. ;  initial state,>2~ :--=eo,,u,(Jc)u ~/'u D, e cv( l ' ) l s (p )  ?_ co,,,vi(sc))the input alphabet,  bc, the transit ion funct ion de f ined/or(2 eOliip(~C) U' r  a,,d L e C'F(P),  S (L  ) ?
c,,,,,,l(/C), by6<dq, ~) : :  1-Cto.~,,i.4{\[xs->-s~.~J\] I\[A'j .
.
.
.
J.~fls\] c q)),5c,,(q, fi) := i-CIosurc({\[S(fi) --~ "P(I')\] I~\[x :  - ,  .~ .s ( fd /~s \ ]  c q}),(2(;' is the set of the states given by{'l I =~" C= (eo,.p(IC) U "rU OF(P))" : ~ ; (S .
,  u) = 'd,,,,,~ l,'~, := (,~ c O.  I \ [X  ~ - .
\ ]  c q,x  - .
<,< ~ cs , ' (v ) )  isthe set of the final states.403sl /x  ~ ~_  I ds , -~  .
s_  ~ s  ~ xX .D,  Is~'xxD* l  I v_ .
, ,  I D ~ 'D' II x -~ '~ I ~_12_~ .
.
.
.
ID ~.
, lF igure  2: DFA(G)The first difference to the usual context-free automatonis that  we allow transit ions nnder fl C CI;'(P), if wehave S(f l )  ?~ comps(It).
The second point is that weuse 1-Closure instead of the usual closure.
DFA(G')  forthe example grammar  is shown in Figure 2.
The conflict isremovcd because we can now dist inguish two cases by look-ing at the informat ion addit ional ly stored.
Ill \[SV90\], onlythe first i(te~t was realized ohviously leading to a weakerantolnaton.5 The  Ana lys i s"Po use DFA(G) ,  the usual pnshdown is extended bya data-st ructure  consist ing in a list of part ial  derivationtrees.
This  list future collects all information determinedby Reduce's relative to first nonterminal  components and isused to drive the transit ions under p G CF(P) in DFA(G)as soon as we have to invest igate nontermlnal  componentsXi ~ compl(K. ).
The change between the two differentkinds of control leads to a new character izat ion of conflicts.For better  explanat ion,  we use a list past paralM tofuture where all Reduce operat imls performed so far alestored.
An example for ti le new data-structnres i  shownin Figure 3.
We use it to explain how they arc built upduring the analysis.
The first operations on this past wereShift(w1), Shift(w2), Reduce(A -+ w2).
From CFGs, weknow that  any Reduce takes place at the end of the sen-tentlal  {'orm generated so far.
This  remains true.
Thus, weCall a.rgue completely analogolls as f~kl' its l)(18l iS COtlC(!l'lICd.But we investigate coupled productions as, e.g.,(Z,,Z~) --, (w~A,U,V~), A, (Z~,Z~), (V l ,U~)  C- *C. Weknow that  coupled nonterminal  components are located a tthe same depth of the derivation tree and that they aresubst i tnted by components of tile same coupled produc-tion.
Therefore, when inserti i lg any p, S(p) G eomlh(K. ),in past, e.g., Zl -~ ,viA, we addit ional ly insert the cou-pled productions, e.g., Z2 --+ UtU2, in future.
In general,Yt -~w4 "-'-tll ",~-past fld.
"~ B2 - "  B:l -~ V22-, i"-.
I / /%,Z, N ws wo a D Z~ Ql (225, \  Awl A wa U1 U2*lJ 2F igure  3: The  New Data -St ructuresthere are two cases to distinguish depending oil l)l insertedin pnst.
If Dips)  cont,(ins only sYmbols in /C\[1\] O 'F (i.e.only uncoupled ones), the conpled p2,... ,p,, are insertedas the first up to the (r - 1)th element in future.
(E.g.
for(Z1,Z~) ---+ (wlA,  U1U'~).)
Otherwise, we behave as it isdo,le for (Y , ,~)  ~ (Z~N,Z./&Q2)in V@,re a.
~ .... thesllbtr~es i,, Iut,,re for those sy,nbols i .
"(V~) .
.
.
.
.
"D(V,,)coupled to first comlmnents in 7)(pt) become the sons ofthese elements.
T|ms, wc maintain the property that  thesymbols at each fixed depth ill past and future togetherform an element of 13D(~,T) .Thereby, in addit ion to Shift's which are handled asusual, we know what to do during a se(ltlelice Of Reduceoperatk)ns relative to elements of co,np~(K).
Now, let usbe in the situation that  we have to use the informationin future, e.g.
a transit ion under B2 --+ a =: pi frmn thetopnlost state.
Then, we create a pointer prise(tee walkingon future.
We ptlsh ~Sc;(qtov, pl) ;rod make presence pointonto the first son {" o1' "D(pi).
Let q be the new topmoststate.
We have to dist inguish three cases:GT': If ~" is tile next input symbol,  we push ~a(q,~).Otherwise, the whole, input is rejected, preseuce nowpoints on the brother of ~'.e G eomp(~) \ comlh(J~): fulurealready stores theexp;tn-sion ~ --+ ft. We push 6c~(q,( - -  fl).
presence nowpoints on the first symbol in ft.(7_ eompl(K): \],du,'e does not store information +tl)oltt(, but ~ and its coupled components rel)resent ;tcomplete independent analysis probh:n~ which has tobc solved rccurslvely.
E.g., this is the casc for D,(I:~, U~) ......
I (q~, Q~).
The recursive call of the pro-cedure starts  with tlu'.
topmost state since, it containsall i tems \[~" -~ .~,\].
Each recursion needs separatedata-structures.
I)etails are described in \[Pitg3\].If l)Feserlce encolll lters no brot\]ler~ We }13.ve to redllce.
LetY -~ 3' be the production at whose last synlbol presencepoints.
We pop 171 -I- 1 states.
The addit ional  Imp conl-l)ared to the context.-fi'ee case results from the transit ionunder }: ~ 7. peesenee walks to tim brother of Y in fut,,reand we push 6c;(q', Y) if q' is the IleW toi)nlost state.
1\[ Yis the root of the tirst tree in f , l , , 'e,  its complete subtreeis nlovcd \['rom f l ttm'e to past and presence  is deleted.~Ve Ollllllt 19 ~ 1) whell redueiug its last conll)onent.
"\['hus, ollr result ix a uiphtmost dcrlval.ion in inverse or(h:r.13 q?he  Def in i t ionGo far, we.
did not discuss the situation that there /tredistinct transit ions fitting for the same state in DFA((\[).S h if t- Red u ce and Red nce- Red u(:e con flic ts are for bklde.n asthey are for Cl"(\]s. The new conflicts result if we have todecide whether we.
push &~(q,,,,, f j ) ,  f j  e CI"(P), or Shiftresp.
Reduce as usual.
If a state q shows such a <'llew"conflict, it contains two items of the kind \[Zi -~ 7i.Yflli\]and \[Xt ---* (tt.~fll\], ~ Q :\[', or \[XI -* (~t.\].
~l'his is easy todeeide as far as we are wadking on future, since tile infor-lllatiolI llecessal'y is store.d there, r\]'}lllSl We only \],ave areal con\[\[let if" i = 1 :tnd l =: 1 holds for the M)ove items.Obviolmly, this cannot })e decided determinlst ical ly,  slucewe would h:tve to know about the structure of the deriva-tion tree not constructed so far.
E.g., in the first conflict,we wouhl \]lave to s;ty whether ~" is ,~ son of )~ (cltoose&;(q,) 5 .
.
.
.
21(f,))) or whet| let  e is a son of X, (choose8c:(q,~)).
It follows that( we need a modified dclinitio,I of"conllicts" compared to CI;'Cs.404l )e f ln i thm 8 ((hmtl lcl ,)Fo,.
,,,,y 0 =: (/C, 7', P,,S') c.2 6'CI,'G, DI,'A((;) show,~ ,contlict q at least one of it,~ slules conlai.s a subset of lhefollowing kind:( ILR) {\ [X - r  c~.\], \[~ .
.
.
.
#diS ,  Y ~ ,,o,,,v, fie),2: --, .
, Y  - ,  fle or (?
)}( s40  {\[x -~ ~.\],{Y-~ ft.,v\] I x ,Y  c: ,,o,,,,~Oc),x ~- ,Y - ,  #.v ~ e l f (u ) , .
~i 71(xq0  {IX--, .
.
.# \ ] , \ [ z .
,  %~3.\] I x ,  z ~ eo,,,Vs(,~:),x - .
.
.# ,  z -> vS,~ e c's,'(u),,< ~ % ~9 c ,..o,,,p(;c) \ co,,, , ,( ;c)}Ut-/c) { \ [x  - ,  ~,\], \ [z  -+ %5,1\] I x ,  z ~!
, ;o , .a  (x:),',.
e ~o,,,p(~c) \ eo,s,m (~:),x - ,  ,~,z - ,  ~5 , /e  o r (p ) , )Def in i t ion  9 (Lie(o) in COl,'(;)(I G C(71,'(I is ./;R(0) < > l)I;'A((;') h.s no conflicts.Thenrem 2 Let Of f  CUb'(2 be I,R(O).
Our cdgorilhmdeterministieally solves the wordprohlem for any w ~?
7",n := \[wl, in time O(n) by eortstrt.
:ting, rightmosl de,'iva-6on rela6ue to G if 'to (i L(C), and, if w (L (O) ,  byrejecting tits i.put.
In .ddition, the algorithm ,~hows literValid Prefix I'ropert!l.Proot5 The linear time eomphMl, y follows since we onlyneed a Ct)llStltllt itlllOllllt Of additional steps per eontext-fi'ce step lor past and fulure.
DI,'A(G) is determined onlyonce for each G'.
The VPP hohls since it holds for tllecontcxt-fi'ec algorithm and fldure additionally e.sures thattim ctmpling is correct.
~1LR(k)- (?oupled-Context..l"ree (lI';tllllll~tl'S l'CSIlIl~ \[lOmthe above by resolving conflicts in I)I"A((;) by addi.g sth)okahead set to tim items which are involved in it con-flict.
For this purpose, we lsse Lhe m;tpphtgs b'll~ST'~~tst(I l"OLLOWk as defined fin" LL(k) ~ (\]Oul)led-Context-Free Grammars in \[Pit94\].
There, these mappings aregeneralized such that they take the couplinl, Imtween theeOllll)otleltts of each lloiaterlllilla\] ilttoo ;I.CCOIIIS~, illSte;td o\[working simply on C/"(G).
Thus, we tre;tt only colnpleteparentheses as ~t context-free IiotltersIlillal it l ld the i'(~Sllltis much ltlo|:e ex~Lct as, e.g., ill \[SVgl)\].
This results in anadequate generalization of the LR(k)-notion for CCI"C.s .
.
.
.
w,- 12x@_, x ~~~;?v / \ ]Ix .
.
.
.
t, r " l .
t " i .
l  .
.
.
.L;- .
.
.
.
.
l q,, - .
.
.
.
x.,,l \[,- .
.
.
.
.
.
l \] \[.,.
,,,.,..,l\],I -:l .\[ '1 \[-C-:J:~Z:j IA;:Y, Sbq I~;,),(1 \[:?
;-,,:,~:~.JExample  2 The lanyuage {a"b"c"d'* \] "n > l} generalcdby the gmut.u."
in l'):rttmple 1 shows the .LR(O)-properly.DFA(G) is shown i .
Figure 4.l~x,~,~q,h, :t 7'/,e: l.,,.,,.
:., (,w$,,, lw ~ {., ~,}') .,o&ni,,qcross-seri(d cpemh'ncics c.n be .qencroled by lhe L R( l )-r .
.
, , .
, .
, s .
({s, (._5 x)) ,  {,,., I,},/', s) ~ ?cro(2)  ,,..,,eP : :  {s-~ x ,x ,  (x, x)-~ (.x, ,,x) lO, x, ~x)I  (~, ~:)}.Re ferences\[I) P89\] ,1.
I)assow, C. P,~.n: Regulated Reweiti.g its For-rn.l l,m~gem9 e 77wory.
Springer 11989\[G1169\] S.A. Greibach, J.E.
/\[opcroft: Seallercd Con?lexl (;r.mmnrs.
J.
(9olnp,lt.
Syst.
S(:i.
3 (1969),pp.
232-247\[CHI{91~\] Y. Cluan, C. llotz, A. Reichert: Tree (:ramrn.rswith mullilinem" lnte~7.'elallon.
Technical Re-port, Univ.
Saarbrik:lu:n 1992\[(\]ua92\] Y.
(',II&SH l(lammerqraramatiken, Nelzgrmmna-liken und l.lerprelalionen yon Nelzen.
PhDthesis, U'niv.
,q~tarbrlicken 199'2\[1IP94\] G. llotz, (',.
Pitsch: It.st IIrdform Annlysis ofCoupled-Oonle:rl-l"ree (/rammm's.
In Pro(:.
ofICAI,P'g4\[liigS,l\] .1.
Iligginbotham: l';nglish is nol a Contexl-f, YeeLangu.ye.
lang.
lilquiry 15 (1984), pp.
225-235\[,112\['75\] A.K.
Joshi, I,.S.
l,evy, M, TakMm~hi: 7)'ee Ad-junct (h'amut,rs.
,I. Comput.
,Syst.
Sci.
10(1975).
pp.
136-163\[,Ios85\] A.K.
,Ioshl.
Tree Adjoinim.!
CTvlmm.rs: llowMuch Conle:vl-.$'ensilivity is I~equired to PtvvideHeasomdde Sh'uelural Descriptions.
In Natural\[,;tnguage Parsing, (~ambridge U,iver..fity Press1985, pp.
206-2/;0\[.los87\] A.K.
.
Ioshi :  hsh'oduction to Tree Adjoinin9(;r.zttzttars.
lit M a.thematics of Language, JohnBelLiamins l'ublishing Comp~uty 1987\[Knu65\] D.E.
Kntttls.
On the Translation o/Languagesfrom Left 1o INflht.
I .
formation ;und Control g(1965), pp.
607-(;39SPit93\] (\].
Pitsch: An(llyse yon l(lammer!lrmnm.tiken.l 'hl) thesis, Univ.
~t~trbrfi(:ken 1993\[Pitg,l\] (\].
Pitsch: LL(k) l'arsin 9 of Couple,l-Oonh::,:l-/"tee (/r.mmnrs.
to iq)peal iik (iJOmlmt;tLionalI nlelli~en(:e 199,t\[.qhia/;\] .q..qhielmr.
I';videm:e again*st Uonleittl /"reenessof Natm'al L,nguage.
Linguistics and Philoso-phy 8 (198(i), pp.
333-3,13\[SV!
)0\] Y. Schid)es, K. Vi.iay-,%:tnl(er: DeterministicLeft Io I?dght Parsin 9 of 7Yce Adjoining Lmt-9uages.
ACI,'90, pp.
276-283F igured:  I .
.
.
.
{a"b"c"d" l n '~ 1)405
