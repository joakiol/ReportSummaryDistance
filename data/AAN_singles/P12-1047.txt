Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics, pages 449?458,Jeju, Republic of Korea, 8-14 July 2012. c?2012 Association for Computational LinguisticsString Re-writing KernelFan Bu1, Hang Li2 and Xiaoyan Zhu31,3State Key Laboratory of Intelligent Technology and Systems1,3Tsinghua National Laboratory for Information Sci.
and Tech.1,3Department of Computer Sci.
and Tech., Tsinghua University2Microsoft Research Asia, No.
5 Danling Street, Beijing 100080,China1bufan0000@gmail.com2hangli@microsoft.com3zxy-dcs@tsinghua.edu.cnAbstractLearning for sentence re-writing is a funda-mental task in natural language processing andinformation retrieval.
In this paper, we pro-pose a new class of kernel functions, referredto as string re-writing kernel, to address theproblem.
A string re-writing kernel measuresthe similarity between two pairs of strings,each pair representing re-writing of a string.It can capture the lexical and structural sim-ilarity between two pairs of sentences with-out the need of constructing syntactic trees.We further propose an instance of string re-writing kernel which can be computed effi-ciently.
Experimental results on benchmarkdatasets show that our method can achieve bet-ter results than state-of-the-art methods on twosentence re-writing learning tasks: paraphraseidentification and recognizing textual entail-ment.1 IntroductionLearning for sentence re-writing is a fundamentaltask in natural language processing and informationretrieval, which includes paraphrasing, textual en-tailment and transformation between query and doc-ument title in search.The key question here is how to represent the re-writing of sentences.
In previous research on sen-tence re-writing learning such as paraphrase identifi-cation and recognizing textual entailment, most rep-resentations are based on the lexicons (Zhang andPatrick, 2005; Lintean and Rus, 2011; de Marneffeet al, 2006) or the syntactic trees (Das and Smith,wrote     .
Shakespeare  wrote  Hamlet.
*    was written by       .
Hamlet was written by Shakespeare.
(B) *** *(A)Figure 1: Example of re-writing.
(A) is a re-writing ruleand (B) is a re-writing of sentence.2009; Heilman and Smith, 2010) of the sentencepairs.In (Lin and Pantel, 2001; Barzilay and Lee, 2003),re-writing rules serve as underlying representationsfor paraphrase generation/discovery.
Motivated bythe work, we represent re-writing of sentences byall possible re-writing rules that can be applied intoit.
For example, in Fig.
1, (A) is one re-writing rulethat can be applied into the sentence re-writing (B).Specifically, we propose a new class of kernel func-tions (Scho?lkopf and Smola, 2002), called string re-writing kernel (SRK), which defines the similaritybetween two re-writings (pairs) of strings as the in-ner product between them in the feature space in-duced by all the re-writing rules.
SRK is differentfrom existing kernels in that it is for re-writing anddefined on two pairs of strings.
SRK can capture thelexical and structural similarity between re-writingsof sentences and does not need to parse the sentencesand create the syntactic trees of them.One challenge for using SRK lies in the high com-putational cost of straightforwardly computing thekernel, because it involves two re-writings of strings(i.e., four strings) and a large number of re-writingrules.
We are able to develop an instance of SRK,referred to as kb-SRK, which directly computes thenumber of common rewriting rules without explic-449itly calculating the inner product between featurevectors, and thus drastically reduce the time com-plexity.Experimental results on benchmark datasets showthat SRK achieves better results than the state-of-the-art methods in paraphrase identification and rec-ognizing textual entailment.
Note that SRK is veryflexible to the formulations of sentences.
For ex-ample, informally written sentences such as longqueries in search can also be effectively handled.2 Related WorkThe string kernel function, first proposed by Lodhiet al (2002), measures the similarity between twostrings by their shared substrings.
Leslie et al(2002) proposed the k-spectrum kernel which repre-sents strings by their contiguous substrings of lengthk.
Leslie et al (2004) further proposed a number ofstring kernels including the wildcard kernel to fa-cilitate inexact matching between the strings.
Thestring kernels defined on two pairs of objects (in-cluding strings) were also developed, which decom-pose the similarity into product of similarities be-tween individual objects using tensor product (Basil-ico and Hofmann, 2004; Ben-Hur and Noble, 2005)or Cartesian product (Kashima et al, 2009).The task of paraphrasing usually consists of para-phrase pattern generation and paraphrase identifica-tion.
Paraphrase pattern generation is to automat-ically extract semantically equivalent patterns (Linand Pantel, 2001; Bhagat and Ravichandran, 2008)or sentences (Barzilay and Lee, 2003).
Paraphraseidentification is to identify whether two given sen-tences are a paraphrase of each other.
The meth-ods proposed so far formalized the problem as clas-sification and used various types of features suchas bag-of-words feature, edit distance (Zhang andPatrick, 2005), dissimilarity kernel (Lintean andRus, 2011) predicate-argument structure (Qiu et al,2006), and tree edit model (which is based on a treekernel) (Heilman and Smith, 2010) in the classifica-tion task.
Among the most successful methods, Wanet al (2006) enriched the feature set by the BLEUmetric and dependency relations.
Das and Smith(2009) used the quasi-synchronous grammar formal-ism to incorporate features from WordNet, namedentity recognizer, POS tagger, and dependency la-bels from aligned trees.The task of recognizing textual entailment is todecide whether the hypothesis sentence can be en-tailed by the premise sentence (Giampiccolo et al,2007).
In recognizing textual entailment, de Marn-effe et al (2006) classified sentences pairs on thebasis of word alignments.
MacCartney and Man-ning (2008) used an inference procedure based onnatural logic and combined it with the methods byde Marneffe et al (2006).
Harmeling (2007) andHeilman and Smith (2010) classified sequence pairsbased on transformation on syntactic trees.
Zanzottoet al (2007) used a kernel method on syntactic treepairs (Moschitti and Zanzotto, 2007).3 Kernel Approach to SentenceRe-Writing LearningWe formalize sentence re-writing learning as a ker-nel method.
Following the literature of string kernel,we use the terms ?string?
and ?character?
instead of?sentence?
and ?word?.Suppose that we are given training data consistingof re-writings of strings and their responses((s1, t1),y1), ...,((sn, tn),yn) ?
(?????
)?Ywhere ?
denotes the character set, ??
=?
?i=0?i de-notes the string set, which is the Kleene closure ofset ?, Y denotes the set of responses, and n is thenumber of instances.
(si, ti) is a re-writing consist-ing of the source string si and the target string ti.yi is the response which can be a category, ordinalnumber, or real number.
In this paper, for simplic-ity we assume that Y = {?1} (e.g.
paraphrase/non-paraphrase).
Given a new string re-writing (s, t) ?????
?, our goal is to predict its response y.
That is,the training data consists of binary classes of stringre-writings, and the prediction is made for the newre-writing based on learning from the training data.We take the kernel approach to address the learn-ing task.
The kernel on re-writings of strings is de-fined asK : (?????)?
(?????)?
Rsatisfying for all (si, ti), (s j, t j) ?
????
?,K((si, ti),(s j, t j)) = ??
(si, ti),?
(s j, t j)?where ?
maps each re-writing (pair) of strings intoa high dimensional Hilbert space H , referred to as450feature space.
By the representer theorem (Kimel-dorf and Wahba, 1971; Scho?lkopf and Smola, 2002),it can be shown that the response y of a new stringre-writing (s, t) can always be represented asy = sign(n?i=1?iyiK((si, ti),(s, t)))where ?i ?
0,(i = 1, ?
?
?
,n) are parameters.
That is,it is determined by a linear combination of the sim-ilarities between the new instance and the instancesin training set.
It is also known that by employing alearning model such as SVM (Vapnik, 2000), such alinear combination can be automatically learned bysolving a quadratic optimization problem.
The ques-tion then becomes how to design the kernel functionfor the task.4 String Re-writing KernelLet ?
be the set of characters and ??
be the set ofstrings.
Let wildcard domain D ?
??
be the set ofstrings which can be replaced by wildcards.The string re-writing kernel measures the similar-ity between two string re-writings through the re-writing rules that can be applied into them.
For-mally, given re-writing rule set R and wildcard do-main D, the string re-writing kernel (SRK) is definedasK((s1, t1),(s2, t2)) = ??
(s1, t1),?
(s2, t2)?
(1)where ?
(s, t) = (?r(s, t))r?R and?r(s, t) = n?
i (2)where n is the number of contiguous substring pairsof (s, t) that re-writing rule r matches, i is the num-ber of wildcards in r, and ?
?
(0,1] is a factor pun-ishing each occurrence of wildcard.A re-writing rule is defined as a triple r =(?s,?t ,?)
where ?s,?t ?
(?
?
{?})?
denote sourceand target string patterns and ?
?
ind?(?s)?
ind?
(?t)denotes the alignments between the wildcards in thetwo string patterns.
Here ind?(? )
denotes the set ofindexes of wildcards in ?
.We say that a re-writing rule (?s,?t ,?)
matches astring pair (s, t), if and only if string patterns ?s and?t can be changed into s and t respectively by sub-stituting each wildcard in the string patterns with anelement in the strings, where the elements are de-fined in the wildcard domain D and the wildcards?s[i] and ?t [ j] are substituted by the same elements,when there is an alignment (i, j) ?
?
.For example, the re-writing rule in Fig.
1 (A)can be formally written as r = (?
s,?
t,?)
where?
s = (?,wrote,?
), ?
t = (?,was,written,by,?)
and?
= {(1,5),(3,1)}.
It matches with the string pair inFig.
1 (B).String re-writing kernel is a class of kernels whichdepends on re-writing rule set R and wildcard do-main D. Here we provide some examples.
Obvi-ously, the effectiveness and efficiency of SRK de-pend on the choice of R and D.Example 1.
We define the pairwise k-spectrum ker-nel (ps-SRK) K psk as the re-writing rule kernel un-der R = {(?s,?t ,?
)|?s,?t ?
?k,?
= /0} and anyD.
It can be shown that K psk ((s1, t1),(s2, t2)) =Kspeck (s1,s2)Kspeck (t1, t2) where Kspeck (x,y) is equiv-alent to the k-spectrum kernel proposed by Leslie etal.
(2002).Example 2.
The pairwise k-wildcard kernel (pw-SRK) K pwk is defined as the re-writing rule kernelunder R= {(?s,?t ,?
)|?s,?t ?
(??{?})k,?
= /0} andD = ?.
It can be shown that K pwk ((s1, t1),(s2, t2)) =Kwc(k,k)(s1,s2)Kwc(k,k)(t1, t2) where Kwc(k,k)(x,y) is a spe-cial case (m=k) of the (k,m)-wildcard kernel pro-posed by Leslie et al (2004).Both kernels shown above are represented as theproduct of two kernels defined separately on stringss1,s2 and t1, t2, and that is to say that they do notconsider the alignment relations between the strings.5 K-gram Bijective String Re-writingKernelNext we propose another instance of string re-writing kernel, called the k-gram bijective string re-writing kernel (kb-SRK).
As will be seen, kb-SRKcan be computed efficiently, although it is definedon two pairs of strings and is not decomposed (notethat ps-SRK and pw-SRK are decomposed).5.1 DefinitionThe kb-SRK has the following properties: (1) Awildcard can only substitute a single character, de-noted as ???.
(2) The two string patterns in a re-writing rule are of length k. (3) The alignmentrelation in a re-writing rule is bijective, i.e., thereis a one-to-one mapping between the wildcards in451the string patterns.
Formally, the k-gram bijectivestring re-writing kernel Kk is defined as a stringre-writing kernel under the re-writing rule set R ={(?s,?t ,?
)|?s,?t ?
(??{?})k,?
is bijective} and thewildcard domain D = ?.Since each re-writing rule contains two string pat-terns of length k and each wildcard can only substi-tute one character, a re-writing rule can only matchk-gram pairs in (s, t).
We can rewrite Eq.
(2) as?r(s, t) = ??s?k-grams(s)??t?k-grams(t)?
?r(?s,?t) (3)where ?
?r(?s,?t) = ?
i if r (with i wildcards) matches(?s,?t), otherwise ?
?r(?s,?t) = 0.For ease of computation, we re-write kb-SRK asKk((s1, t1),(s2, t2))= ?
?s1 ?
k-grams(s1)?t1 ?
k-grams(t1)?
?s2 ?
k-grams(s2)?t2 ?
k-grams(t2)K?k((?s1 ,?t1),(?s2 ,?t2))(4)whereK?k = ?r?R?
?r(?s1 ,?t1)?
?r(?s2 ,?t2) (5)5.2 Algorithm for Computing KernelA straightforward computation of kb-SRK wouldbe intractable.
The computation of Kk in Eq.
(4)needs computations of K?k conducted O((n?
k +1)4) times, where n denotes the maximum lengthof strings.
Furthermore, the computation of K?k inEq.
(5) needs to perform matching of all the re-writing rules with the two k-gram pairs (?s1 , ?t1),(?s2 , ?t2), which has time complexity O(k!
).In this section, we will introduce an efficient algo-rithm, which can compute K?k and Kk with the timecomplexities of O(k) and O(kn2), respectively.
Thelatter is verified empirically.5.2.1 Transformation of ProblemFor ease of manipulation, our method transformsthe computation of kernel on k-grams into the com-putation on a new data structure called lists of dou-bles.
We first explain how to make the transforma-tion.Suppose that ?1,?2 ?
?k are k-grams, we use?1[i] and ?2[i] to represent the i-th characters ofthem.
We call a pair of characters a double.
Thus???
denotes the set of doubles and ?Ds ,?Dt ?
(???
?1 = abbccbb ;               ?
?2 = abcccdd;?
?1 = cbcbbcb ;               ?
?2 = cbccdcd;Figure 2: Example of two k-gram pairs.??
?= ?a?a???b?b?????????c?c???c?c???????????????
?= ?c?c???b?b???c?c???????????????c?c??????
?Figure 3: Example of the pair of double lists combinedfrom the two k-gram pairs in Fig.
2.
Non-identical dou-bles are in bold.?
)k denote lists of doubles.
The following operationcombines two k-grams into a list of doubles.?1?
?2 = ((?1[1],?2[1]), ?
?
?
,(?1[k],?2[k])).We denotes ?1 ?
?2[i] as the i-th element of thelist.
Fig.
3 shows example lists of doubles combinedfrom k-grams.We introduce the set of identical doubles I ={(c,c)|c ?
?}
and the set of non-identical doublesN = {(c,c?)|c,c?
?
?
and c 6= c?}.
Obviously, I?N =???
and I?N = /0.We define the set of re-writing rules for doublelists RD = {rD = (?Ds ,?Dt ,?
)|?Ds ,?Dt ?
(I?{?
})k,?is a bijective alignment} where ?Ds and ?Dt are listsof identical doubles including wildcards and withlength k. We say rule rD matches a pair of doublelists (?Ds ,?Dt ) iff.
?Ds ,?Dt can be changed into ?Dsand ?Dt by substituting each wildcard pair to a dou-ble in ???
, and the double substituting the wild-card pair ?Ds [i] and ?Dt [ j] must be an identical dou-ble when there is an alignment (i, j) ?
?
.
The ruleset defined here and the rule set in Sec.
4 only differon the elements where re-writing occurs.
Fig.
4 (B)shows an example of re-writing rule for double lists.The pair of double lists in Fig.
3 can match with there-writing rule.5.2.2 Computing K?kWe consider how to compute K?k by extending thecomputation from k-grams to double lists.The following lemma shows that computing theweighted sum of re-writing rules matching k-grampairs (?s1 ,?t1) and (?s2 ,?t2) is equivalent to com-puting the weighted sum of re-writing rules for dou-ble lists matching (?s1?
?s2 ,?t1?
?t2).452a b * 1  c                    a b ?
c c ?
?
(a,a) (b,b)  ?
(c ,c)  (c ,c)  ?
?c b c ?
?
c ?
(c, c ) (b,b)  (c ,c)  ?
?
(c ,c)  ?
(A) (B)Figure 4: For re-writing rule (A) matching both k-grampairs shown in Fig.
2, there is a corresponding re-writingrule for double lists (B) matching the pair of double listsshown in Fig.
3.?????????=??a?a?????b?b?????????????????????c?c?????????????=??a?a?????b?b?????????????????????c?c???
?Figure 5: Example of #???(?)
for the two double listsshown in Fig.
3.
Doubles not appearing in both ?Ds and?Dt are not shown.Lemma 1.
For any two k-gram pairs (?s1 ,?t1) and(?s2 ,?t2), there exists a one-to-one mapping fromthe set of re-writing rules matching them to the set ofre-writing rules matching the corresponding doublelists (?s1?
?s2 ,?t1?
?t2).The re-writing rule in Fig.
4 (A) matches the k-gram pairs in Fig.
2.
Equivalently, the re-writingrule for double lists in Fig.
4 (B) matches the pairof double lists in Fig.
3.
By lemma 1 and Eq.
5, wehaveK?k = ?rD?RD??rD(?s1?
?s2 ,?t1?
?t2) (6)where ?
?rD(?Ds ,?Dt ) = ?
2i if the rewriting rule fordouble lists rD with i wildcards matches (?Ds ,?Dt ),otherwise ?
?rD(?Ds ,?Dt ) = 0.
To get K?k, we just needto compute the weighted sum of re-writing rules fordouble lists matching (?s1 ?
?s2 ,?t1 ??t2).
Thus,we can work on the ?combined?
pair of double listsinstead of two pairs of k-grams.Instead of enumerating all possible re-writingrules and checking whether they can match the givenpair of double lists, we only calculate the number ofpossibilities of ?generating?
from the pair of doublelists to the re-writing rules matching it, which can becarried out efficiently.
We say that a re-writing ruleof double lists can be generated from a pair of doublelists (?Ds , ?Dt ), if they match with each other.
Fromthe definition of RD, in each generation, the identi-cal doubles in ?Ds and ?Dt can be either or not sub-stituted by an aligned wildcard pair in the re-writingAlgorithm 1: Computing K?kInput: k-gram pair (?s1 ,?t1) and (?s2 ,?t2)Output: K?k((?s1 ,?t1),(?s2 ,?t2))1 Set (?Ds ,?Dt ) = (?s1?
?s2 ,?t1?
?t2) ;2 Compute #???
(?Ds ) and #???
(?Dt );3 result=1;4 for each e ?
???
satisfies#e(?Ds )+#e(?Dt ) 6= 0 do5 ge = 0, ne = min{#e(?Ds ),#e(?Dt )} ;6 for 0?
i?
ne do7 ge = ge +a(e)i ?
2i;8 result = result ?g;9 return result;rule, and all the non-identical doubles in ?Ds and ?Dtmust be substituted by aligned wildcard pairs.
Fromthis observation and Eq.
6, K?k only depends on thenumber of times each double occurs in the doublelists.Let e be a double.
We denote #e(?D) as the num-ber of times e occurs in the list of doubles ?D.
Also,for a set of doubles S?
??
?, we denote #S(?D) asa vector in which each element represents #e(?D) ofeach double e ?
S. We can find a function g suchthatK?k = g(#???(?s1??s2),#???(?t1?
?t2)) (7)Alg.
1 shows how to compute K?k.
#???(.)
is com-puted from the two pairs of k-grams in line 1-2.
Thefinal score is made through the iterative calculationon the two lists (lines 4-8).The key of Alg.
1 is the calculation of ge based ona(e)i (line 7).
Here we use a(e)i to denote the numberof possibilities for which i pairs of aligned wildcardscan be generated from e in both ?Ds and ?Dt .
a(e)i canbe computed as follows.
(1) If e ?
N and #e(?Ds ) 6= #e(?Dt ), then a(e)i = 0for any i.
(2) If e?N and #e(?Ds ) = #e(?Dt ) = j, then a(e)j =j!
and a(e)i = 0 for any i 6= j.
(3) If e ?
I, then a(e)i =(#e(?Ds )i)(#e(?Dt )i)i!.We next explain the rationale behind the abovecomputations.
In (1), since #e(?Ds ) 6= #e(?Dt ), it isimpossible to generate a re-writing rule in which all453the occurrences of non-identical double e are substi-tuted by pairs of aligned wildcards.
In (2), j pairs ofaligned wildcards can be generated from all the oc-currences of non-identical double e in both ?Ds and?Dt .
The number of combinations thus is j!.
In (3),a pair of aligned wildcards can either be generatedor not from a pair of identical doubles in ?Ds and?Dt .
We can select i occurrences of identical doublee from ?Ds , i occurrences from ?Dt , and generate allpossible aligned wildcards from them.In the loop of lines 4-8, we only need to con-sider a(e)i for 0?
i?min{#e(?Ds ),#e(?Dt )}, becausea(e)i = 0 for the rest of i.To sum up, Eq.
7 can be computed as below,which is exactly the computation at lines 3-8.g(#???
(?Ds ),#???
(?Dt )) = ?e????
(ne?i=0a(e)i ?2i) (8)For the k-gram pairs in Fig.
2, we first createlists of doubles in Fig.
3 and compute #???(?)
forthem (lines 1-2 of Alg.
1), as shown in Fig.
5.
Wenext compute Kk from #???
(?Ds ) and #???
(?Dt ) inFig.
5 (lines 3-8 of Alg.
1) and obtain Kk = (1)(1+?
2)(?
2)(2?
4)(1 + 6?
2 + 6?
4) = 12?
12 + 24?
10 +14?
8 +2?
6.5.2.3 Computing KkAlgorithm 2 shows how to compute Kk.
It pre-pares two maps ms and mt and two vectors of coun-ters cs and ct .
In ms and mt , each key #N(.)
maps aset of values #???(.).
Counters cs and ct count thefrequency of each #???(.).
Recall that #N(?s1?
?s2)denotes a vector whose element is #e(?s1 ?
?s2) fore ?
N.
#???
(?s1 ?
?s2) denotes a vector whose ele-ment is #e(?s1?
?s2) where e is any possible double.One can easily verify the output of the al-gorithm is exactly the value of Kk.
First,K?k((?s1 ,?t1),(?s2 ,?t2)) = 0 if #N(?s1 ?
?s2) 6=#N(?t1 ??t2).
Therefore, we only need to considerthose ?s1 ?
?s2 and ?t1 ?
?t2 which have the samekey (lines 10-13).
We group the k-gram pairs bytheir key in lines 2-5 and lines 6-9.Moreover, the following relation holdsK?k((?s1 ,?t1),(?s2 ,?t2)) = K?k((?
?s1 ,??t1),(?
?s2 ,?
?t2))if #???(?s1?
?s2) = #???(??s1??
?s2) and #???(?t1?
?t2) = #???(?
?t1 ??
?t2), where ?
?s1 , ?
?s2 , ?
?t1 , ?
?t2 areAlgorithm 2: Computing KkInput: string pair (s1, t1) and (s2, t2), windowsize kOutput: Kk((s1, t1),(s2, t2))1 Initialize two maps ms and mt and two counterscs and ct ;2 for each k-gram ?s1 in s1 do3 for each k-gram ?s2 in s2 do4 Update ms with key-value pair(#N(?s1??s2),#???(?s1?
?s2));5 cs[#???(?s1?
?s2)]++ ;6 for each k-gram ?t1 in t1 do7 for each k-gram ?t2 in t2 do8 Update mt with key-value pair(#N(?t1??t2),#???(?t1?
?t2));9 ct [#???(?t1?
?t2)]++ ;10 for each key ?ms.keys?mt .keys do11 for each vs ?ms[key] do12 for each vt ?mt [key] do13 result+= cs[vs]ct [vt ]g(vs,vt) ;14 return result;other k-grams.
Therefore, we only need to take#???(?s1?
?s2) and #???(?t1?
?t2) as the value un-der each key and count its frequency.
That is to say,#???
provides sufficient statistics for computing K?k.The quantity g(vs,vt) in line 13 is computed byAlg.
1 (lines 3-8).5.3 Time ComplexityThe time complexities of Alg.
1 and Alg.
2 areshown below.For Alg.
1, lines 1-2 can be executed inO(k).
The time for executing line 7 is lessthan #e(?Ds ) + #e(?Dt ) + 1 for each e satisfying#e(?Ds ) 6= 0 or #e(?Dt ) 6= 0 .
Since ?e????
#e(?Ds ) =?e????
#e(?Dt ) = k, the time for executing lines 3-8is less than 4k, which results in the O(k) time com-plexity of Alg.
1.For Alg.
2, we denote n = max{|s1|, |s2|, |t1|, |t2|}.It is easy to see that if the maps and counters in thealgorithm are implemented by hash maps, the timecomplexities of lines 2-5 and lines 6-9 are O(kn2).However, analyzing the time complexity of lines 10-454a b * 1  c00.511.522.51 2 3 4 5 6 7 8C/n avg2window size  KWorstAvg.Figure 6: Relation between ratio C/n2avg and window sizek when running Alg.
2 on MSR Paraphrases Corpus.13 is quite difficult.Lemma 2 and Theorem 1 provide an upper boundof the number of times computing g(vs,vt) in line 13,denoted as C.Lemma 2.
For ?s1 ?k-grams(s1) and ?s2 ,?
?s2 ?k-grams(s2), we have #???(?s1?
?s2) =#???(?s1??
?s2) if #N(?s1?
?s2) = #N(?s1??
?s2).Theorem 1.
C is O(n3).By Lemma 2, each ms[key] contains at mostn?
k + 1 elements.
Together with the fact that?key ms[key] = (n?
k + 1)2, Theorem 1 is proved.It can be also proved that C is O(n2) when k = 1.Empirical study shows that O(n3) is a loose upperbound for C. Let navg denote the average length ofs1, t1, s2 and t2.
Our experiment on all pairs of sen-tences on MSR Paraphrase (Fig.
6) shows that C is inthe same order of n2avg in the worst case and C/n2avgdecreases with increasing k in both average case andworst case, which indicates that C is O(n2) and theoverall time complexity of Alg.
2 is O(kn2).6 ExperimentsWe evaluated the performances of the three typesof string re-writing kernels on paraphrase identifica-tion and recognizing textual entailment: pairwise k-spectrum kernel (ps-SRK), pairwise k-wildcard ker-nel (pw-SRK), and k-gram bijective string re-writingkernel (kb-SRK).
We set ?
= 1 for all kernels.
Theperformances were measured by accuracy (e.g.
per-centage of correct classifications).In both experiments, we used LIBSVM with de-fault parameters (Chang et al, 2011) as the clas-sifier.
All the sentences in the training and testsets were segmented into words by the tokenizer atOpenNLP (Baldrige et al, ).
We further conductedstemming on the words with Iveonik English Stem-mer (http://www.iveonik.com/ ).We normalized each kernel by K?
(x,y) =K(x,y)?K(x,x)K(y,y)and then tried them under differentwindow sizes k. We also tried to combine thekernels with two lexical features ?unigram precisionand recall?
proposed in (Wan et al, 2006), referredto as PR.
For each kernel K, we tested the windowsize settings of K1 + ...+Kkmax (kmax ?
{1,2,3,4})together with the combination with PR and wereport the best accuracies of them in Tab 1 andTab 2.6.1 Paraphrase IdentificationThe task of paraphrase identification is to examinewhether two sentences have the same meaning.
Wetrained and tested all the methods on the MSR Para-phrase Corpus (Dolan and Brockett, 2005; Quirket al, 2004) consisting of 4,076 sentence pairs fortraining and 1,725 sentence pairs for testing.The experimental results on different SRKs areshown in Table 1.
It can be seen that kb-SRK out-performs ps-SRK and pw-SRK.
The results by thestate-of-the-art methods reported in previous workare also included in Table 1. kb-SRK outperformsthe existing lexical approach (Zhang and Patrick,2005) and kernel approach (Lintean and Rus, 2011).It also works better than the other approaches listedin the table, which use syntactic trees or dependencyrelations.Fig.
7 gives detailed results of the kernels underdifferent maximum k-gram lengths kmax with andwithout PR.
The results of ps-SRK and pw-SRKwithout combining PR under different k are all be-low 71%, therefore they are not shown for clar-Method Acc.Zhang and Patrick (2005) 71.9Lintean and Rus (2011) 73.6Heilman and Smith (2010) 73.2Qiu et al (2006) 72.0Wan et al (2006) 75.6Das and Smith (2009) 73.9Das and Smith (2009)(PoE) 76.1Our baseline (PR) 73.6Our method (ps-SRK) 75.6Our method (pw-SRK) 75.0Our method (kb-SRK) 76.3Table 1: Comparison with state-of-the-arts on MSRP.455a b * 1  c73.57474.57575.57676.51 2 3 4Accuracy (%)w i ndow size kmaxkb_SR K+ PRkb_SR Kps_SRK +PRpw_SRK +PRP RFigure 7: Performances of different kernels under differ-ent maximum window size kmax on MSRP.ity.
By comparing the results of kb-SRK and pw-SRK we can see that the bijective property in kb-SRK is really helpful for improving the performance(note that both methods use wildcards).
Further-more, the performances of kb-SRK with and withoutcombining PR increase dramatically with increasingkmax and reach the peaks (better than state-of-the-art)when kmax is four, which shows the power of the lex-ical and structural similarity captured by kb-SRK.6.2 Recognizing Textual EntailmentRecognizing textual entailment is to determinewhether a sentence (sometimes a short paragraph)can entail the other sentence (Giampiccolo et al,2007).
RTE-3 is a widely used benchmark dataset.Following the common practice, we combined thedevelopment set of RTE-3 and the whole datasets ofRTE-1 and RTE-2 as training data and took the testset of RTE-3 as test data.
The train and test sets con-tain 3,767 and 800 sentence pairs.The results are shown in Table 2.
Again, kb-SRKoutperforms ps-SRK and pw-SRK.
As indicatedin (Heilman and Smith, 2010), the top-performingRTE systems are often built with significant engi-Method Acc.Harmeling (2007) 59.5de Marneffe et al (2006) 60.5M&M, (2007) (NL) 59.4M&M, (2007) (Hybrid) 64.3Zanzotto et al (2007) 65.75Heilman and Smith (2010) 62.8Our baseline (PR) 62.0Our method (ps-SRK) 64.6Our method (pw-SRK) 63.8Our method (kb-SRK) 65.1Table 2: Comparison with state-of-the-arts on RTE-3.a b * 1  c60.561.562.563.564.565.51 2 3 4Accuracy (%)w i ndow size kmaxkb_SR K+ PRkb_SR Kps_SRK +PRpw_SRK +PRPRFigure 8: Performances of different kernels under differ-ent maximum window size kmax on RTE-3.neering efforts.
Therefore, we only compare withthe six systems which involves less engineering.
kb-SRK still outperforms most of those state-of-the-artmethods even if it does not exploit any other lexicalsemantic sources and syntactic analysis tools.Fig.
8 shows the results of the kernels under dif-ferent parameter settings.
Again, the results of ps-SRK and pw-SRK without combining PR are toolow to be shown (all below 55%).
We can see thatPR is an effective method for this dataset and theoverall performances are substantially improved af-ter combining it with the kernels.
The performanceof kb-SRK reaches the peak when window size be-comes two.7 ConclusionIn this paper, we have proposed a novel class of ker-nel functions for sentence re-writing, called stringre-writing kernel (SRK).
SRK measures the lexicaland structural similarity between two pairs of sen-tences without using syntactic trees.
The approachis theoretically sound and is flexible to formulationsof sentences.
A specific instance of SRK, referredto as kb-SRK, has been developed which can bal-ance the effectiveness and efficiency for sentencere-writing.
Experimental results show that kb-SRKachieve better results than state-of-the-art methodson paraphrase identification and recognizing textualentailment.AcknowledgmentsThis work is supported by the National Basic Re-search Program (973 Program) No.
2012CB316301.ReferencesBaldrige, J. , Morton, T. and Bierner G. OpenNLP.http://opennlp.sourceforge.net/.456Barzilay, R. and Lee, L. 2003.
Learning to paraphrase:An unsupervised approach using multiple-sequencealignment.
Proceedings of the 2003 Conference of theNorth American Chapter of the Association for Com-putational Linguistics on Human Language Technol-ogy, pp.
16?23.Basilico, J. and Hofmann, T. 2004.
Unifying collab-orative and content-based filtering.
Proceedings ofthe twenty-first international conference on Machinelearning, pp.
9, 2004.Ben-Hur, A. and Noble, W.S.
2005.
Kernel methods forpredicting protein?protein interactions.
Bioinformat-ics, vol.
21, pp.
i38?i46, Oxford Univ Press.Bhagat, R. and Ravichandran, D. 2008.
Large scale ac-quisition of paraphrases for learning surface patterns.Proceedings of ACL-08: HLT, pp.
674?682.Chang, C. and Lin, C. 2011.
LIBSVM: A library for sup-port vector machines.
ACM Transactions on Intelli-gent Systems and Technology vol.
2, issue 3, pp.
27:1?27:27.
Software available at http://www.csie.ntu.edu.tw/?cjlin/libsvmDas, D. and Smith, N.A.
2009.
Paraphrase identifi-cation as probabilistic quasi-synchronous recognition.Proceedings of the Joint Conference of the 47th An-nual Meeting of the ACL and the 4th InternationalJoint Conference on Natural Language Processing ofthe AFNLP, pp.
468?476.de Marneffe, M., MacCartney, B., Grenager, T., Cer, D.,Rafferty A. and Manning C.D.
2006.
Learning to dis-tinguish valid textual entailments.
Proc.
of the SecondPASCAL Challenges Workshop.Dolan, W.B.
and Brockett, C. 2005.
Automatically con-structing a corpus of sentential paraphrases.
Proc.
ofIWP.Giampiccolo, D., Magnini B., Dagan I., and Dolan B.,editors 2007.
The third pascal recognizing textual en-tailment challenge.
Proceedings of the ACL-PASCALWorkshop on Textual Entailment and Paraphrasing,pp.
1?9.Harmeling, S. 2007.
An extensible probabilistictransformation-based approach to the third recogniz-ing textual entailment challenge.
Proceedings of theACL-PASCAL Workshop on Textual Entailment andParaphrasing, pp.
137?142, 2007.Heilman, M. and Smith, N.A.
2010.
Tree edit models forrecognizing textual entailments, paraphrases, and an-swers to questions.
Human Language Technologies:The 2010 Annual Conference of the North AmericanChapter of the Association for Computational Linguis-tics, pp.
1011-1019.Kashima, H. , Oyama, S. , Yamanishi, Y. and Tsuda, K.2009.
On pairwise kernels: An efficient alternativeand generalization analysis.
Advances in KnowledgeDiscovery and Data Mining, pp.
1030-1037, 2009,Springer.Kimeldorf, G. and Wahba, G. 1971.
Some results onTchebycheffian spline functions.
Journal of Mathemat-ical Analysis and Applications, Vol.33, No.1, pp.82-95, Elsevier.Lin, D. and Pantel, P. 2001.
DIRT-discovery of inferencerules from text.
Proc.
of ACM SIGKDD Conferenceon Knowledge Discovery and Data Mining.Lintean, M. and Rus, V. 2011.
Dissimilarity Kernelsfor Paraphrase Identification.
Twenty-Fourth Interna-tional FLAIRS Conference.Leslie, C. , Eskin, E. and Noble, W.S.
2002.
The spec-trum kernel: a string kernel for SVM protein classifi-cation.
Pacific symposium on biocomputing vol.
575,pp.
564-575, Hawaii, USA.Leslie, C. and Kuang, R. 2004.
Fast string kernels usinginexact matching for protein sequences.
The Journalof Machine Learning Research vol.
5, pp.
1435-1455.Lodhi, H. , Saunders, C. , Shawe-Taylor, J. , Cristianini,N.
and Watkins, C. 2002.
Text classification usingstring kernels.
The Journal of Machine Learning Re-search vol.
2, pp.
419-444.MacCartney, B. and Manning, C.D.
2008.
Modeling se-mantic containment and exclusion in natural languageinference.
Proceedings of the 22nd International Con-ference on Computational Linguistics, vol.
1, pp.
521-528, 2008.Moschitti, A. and Zanzotto, F.M.
2007.
Fast and Effec-tive Kernels for Relational Learning from Texts.
Pro-ceedings of the 24th Annual International Conferenceon Machine Learning, Corvallis, OR, USA, 2007.Qiu, L. and Kan, M.Y.
and Chua, T.S.
2006.
Para-phrase recognition via dissimilarity significance clas-sification.
Proceedings of the 2006 Conference onEmpirical Methods in Natural Language Processing,pp.
18?26.Quirk, C. , Brockett, C. and Dolan, W. 2004.
Monolin-gual machine translation for paraphrase generation.Proceedings of EMNLP 2004, pp.
142-149, Barcelona,Spain.Scho?lkopf, B. and Smola, A.J.
2002.
Learning withkernels: Support vector machines, regularization, op-timization, and beyond.
The MIT Press, Cambridge,MA.Vapnik, V.N.
2000.
The nature of statistical learningtheory.
Springer Verlag.Wan, S. , Dras, M. , Dale, R. and Paris, C. 2006.
Usingdependency-based features to take the ?Para-farce?out of paraphrase.
Proc.
of the Australasian LanguageTechnology Workshop, pp.
131?138.Zanzotto, F.M.
, Pennacchiotti, M. and Moschitti, A.2007.
Shallow semantics in fast textual entailment457rule learners.
Proceedings of the ACL-PASCALworkshop on textual entailment and paraphrasing, pp.72?77.Zhang, Y. and Patrick, J.
2005.
Paraphrase identifica-tion by text canonicalization.
Proceedings of the Aus-tralasian Language Technology Workshop, pp.
160?166.458
