Syntactic Analysis by Alternating Computation andInspection.By Gustav leunbachThe Danish Institute for Educational Research.Automated precedures for analyzing a given text of somelanguage into a sequence of morphemes representing wordc lasses and flexions, is important for machine trans-lation, for automatic abstracting and indexing, and pos-sibly for other technical purposes.
It is a commonplacethat an automatic procedure cannot resolve every possibleutterance of the language, and it is one among severalproblems for programmers of such procedures whether toleave some sequences unresolved or to present them forinspection to a person acting on the basis of somelinguistic knowledge (theoretical and/or practical).It Is also a question of theoretical interest to whatextent a given automatic procedure will function and howmuch it wil l be improved by the addition of one or an-other set of rules.
The purpose of this paper is not tostudy existing programs from this viewpoint, but ratherto build up a program from nothing, investigating stepby step the economy of various additions to it.In addition to the word Inspection for which a definitionhas been attempted above, the title of the paper containsanother key-word, Computation, which is taken to meanany mamipulation of symbols by a fixed set of rules.
Inthis context the symbols are linguistic entities such asphonemes, letters, morphemes, words or sentence clauses,as well as formal symbols, e.g.
numerals, used by defin-ition to represent these entities and relationships be-tween them.Computation may be performed either by means of an el-ectronic computer, a datamat, or by clerical assistance.The advantages of the use of datamats can be in themain summed up into three areas:\].
Accuracy.
Errors due to malfunction of the datamatwil l  in almost all cases be easily distinguished fromcorrect~results.
There will, however, often be a needfor coding to a datamatic medium, and the errors associ-ated with clerical computation may be expected to appearin this part of the work.2.
Speed.
My personal experience - competing with toomany others for access to a datamat with too frequenttechnical breakdowns - has taught me not to overempha-siz~ ~his  advantage.o3.
Control labi l i ty of instruction.
If a clerk performscomputational work on a text of a language he knows, itis not possible to prevent his common sense from inter-?
ering with the program he is performing, often withbenefit, but at times in ways that are harmful to thepurpose of the investigation.
If the lamguage is com-pletely unknewn to him, and he knows that it is - in-correct knowledge is even more harmful than correctknowledge - he wil l  tend to develop headaches and loseboth accuracy and speed.
The datamat performs exactlythe instructions contained in the program - programmingerrors may be much harder to detect tham errors due tomechanical malfunctioning, but this matter pertains tothe f ield of program writ ing technique in general.The text which I have used in my study is a written one- I lack the necessary facil ities for handling orallanguage - a Western novel in Danish coded on paper tapefor use in typographical machinery - of course in a tapeformat almost incompatible with those used by datamats,but with some inventiveness it has been transferredcharacter by character into type of normal format forthe datamat in question.
- In the composit ion of thenovel no ~ i te rary  merit was intended, but since stylist-ic analysis is not a part of my program this is  not aserious defect.The symbols of the code are readily divided into lettersand non-letter symbol, the latter being normal symbolsof written language (space, case shifts,comma, point etc.)
and typographical symbols such asitalizing and de-italizing codes.In the first computational phase the text is sorted intowords and separators between words; a word is definedas an unbroken sequence of letter symbols, with the ex-ception that a lower case symbol is al lowed if the wordbegins with a capital.The words are sorted alphabetically and each word isgiven a number above 200; all non-letter symbols havenumbers below 100 (with separate values of each in upperand lower case); a space directly between two words issuppressed, else the text is stored as a sequence ofnumerals in the two mentioned intervals.
The text isbroken up into units of a maximum size determined by thestorage rules of the datamat, but as far as possibleterminated by full stop, question mark or the like.Thus, when a later computational phase implies typingout the context of a certain expression, the contextwill not be a f ixed number of words before and after,but in most cases a l inguistically relevant section ofthe text.The occurrences of each word are counted, not with thepurpose of  investigating any of the current theories ofword frequencies, but for two specific reasons: I. Thewords which occur only once are listed for inspectionwith the purpose of f inding as many misprints as possiblefor correction in a later computational program (thetapes available for this study are the input before proof-reading).2.
A list of most frequent words is printed.
This wil lcontain some words directly related to subject matter -the name of the novel's leading character is placed atab.
no.
15 in frequency order - but mostly it wil l  bewords whose meaning is largely defined by their placein the syntactic structure, and many of the instructionsin a program for computational analysis wil l  deal withthe treatment of these words.
Even when words of con-crete denotation enter this list, their frequency (inthis text) may make it good economy to add in format ionabout word class etc.
for them.A further computational program in the first phase com-pares all words in the alphabetic l ist,with a set off lexions and indicates which words possibly may be de-rived from ether words in the list.
This informationis added to the word list.II~I xllrAt this stage the first set of general computationalrules for sentence construction is introduced, partiallyby inspection of the list of most frequent words.
Thislist is likely to contain instances of the following wordclasses:Personal pronouns in subject form (I, he, we etc.
)Personal pronouns in non-subject form (me, him, usetc.
)Pronouns with nominal function (who etc.
)Pronouns with nominal or adjectival function.Prepositions whose usual function is to adverbializethe following nominal clause.AuXiliary verbs which fulfill the function of thefinite verb, but are usually fallowed by otherverb forms.Conjunctions.Adverbs which are characterized~by their positionin relation to the finite verb.Particles which form a complete sentence (yes) .
(Note: 0oncrete examples are supplanted by theirEnglish counterparts whenever possible, which itoften is, due to the structural similarity betweenDanish and English.
Three important differencesmay be noted: The definite article is a separateword if an adjective is present, else it is appendedto the noun as a flection.
The present tense of averb is always different from the infiniti~and hasno personal flexion.
The past participle is differ-ent from the past tense.
)Homonyms may occur in the list with one meaning in oneof the above classes and another meaning in a class ofwords of concrete denotation.
Example:"s~" (at aboutthe 20th place by frequency order) may be an adverb~ranslated as "so"  or "then" or the verb form "saw".
The~r~les by which such words are treated must contain aw~rning; it may be reasonable to include word class in-formation for the second meaning.The numbers between 100 and 200 are available for thecoding of the grammatical information mentioned here.The text may contain sentences which are completely anal-yzed by the first set of rules:"He likes m~' "He hasgiven it to her."
Such sentences establish certain wordsas finite verb forms (reserving the possibi l ity thatthe~may be homonyms) and others as participles.
Othersentences wil l  with great l ikelihood establish certainwords as nouns or adjectives.Semicolons are sentence separators with at least thesame degree of certainty as full stop, only they do notcancel out a subsequent upper case shift as a signal ofa proper name, Commas may be sentence separators, butin many instances they are alternatives to the conjunct-ions "and" and "or" ;computat ional  rules must thus tosome extent treat these conjunctions and comma as equals("and/or" may also be sentence separators).Now examples of incompletely analyzed sentences will betyped out for inspection with computed tentative assign-ments to word classes, including c0mputed hypotheses ofohomonymy.
A count is made of the proportion of the textwhich has been analyzed.
The inspector may judge itnecessary to have typed out the sentences on which theassignment of certain words depend - guided hy the fre-quency count: with very rare words it may be useless,with very frequent words it may be necessary to restrictoutput.The inspected sentences may reveal other less frequentwords which ought to be assigned to the above-mentionedstructured word classes.
Or they may point to thenecessity of assigning word classes to some words of con-crete denotation (particularly homonyms), or to acceptor reject computed analyses of words i~to root morphemeand flexion morpheme.
Or s~pposed sentence separatorsmay be revealed to be abbreviation points and re-codedaccordingly (this may le@d to general computational rulessuch as re-coding all instances of "Mr.").After this, the whole text is again computed, and ex-amples of incompletely analyzed sentences "on a higherlevel" are presented for inspection, etc.
(If a "hardcore" remains, this may contribute to the list of in-stances of unresolvable ambi@uity for future treatisesof structural linguistics.)
The important point is thatevery inspection phase is strictly limited; else com-putation would be of no help.
