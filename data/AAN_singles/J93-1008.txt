The Problem of Logical-Form EquivalenceStuar t  M. Shieber*Harvard University1.
History of the ProblemThis note discusses the problem of logical-form equivalence, a problem in naturallanguage generation first noted in print by Douglas Appelt (1987).
Appelt describes theproblem, which we first came across in pursuing joint work on the GENESYS naturallanguage generation system, as a problem following from the goal of eliminating theneed for a strategic generation component to possess detailed grammatical knowledge.In a paper describing the GENESYS tactical generation component (Shieber 1988), Iclaimed that the problem was "AI-complete," in the sense that its resolution wouldinvolve a solution to the general knowledge representation problem.Since the publication of these two papers, several researchers have claimed to havesolved the problem of logical-form equivalence.
In this paper, I review the problemand attempt to highlight certain salient aspects of it that have been lost in the pursuingof solutions, in order to reconcile the apparently contradictory claims of the problem'sintractability and its resolution.2.
Review of Natural Language GenerationIn order to standardize on a particular context in which to view the problem of logical-form equivalence, I review some concepts in natural anguage generation.A grammar, for the purposes of the argument here, can be taken to be a formalstatement of a relation between strings of a natural anguage and representations oftheir meanings in some logical or other artificial anguage.
We will call such repre-sentations logical forms.
For each meaning of a string (recalling that strings may beambiguous), the grammar ought to pair the string with a logical form representingthat meaning.
There may, in general, be several representations of any given meaningin the logical-form language; the one paired with the string by the grammar will bereferred to as the canonical logical form for that string (under the given interpretation).
Itis not necessary for the grammar to pair the string with all logical forms that happento represent the same meaning, and in fact, such a profligate approach would be un-fortunate.
It would make it more difficult, for instance, to determine whether a stringwas truly ambiguous.
1Under this view, the parsing problem involves computing the relation in the direc-tion from string to meaning.
In particular, from a string, the canonical logical form or* Aiken Computation Laboratory, Harvard University, Cambridge, MA.1 This problem isreminiscent of the "spurious ambiguity" problem noted for combinatory categorialgrammar (CCG).
A number of distinct CCG analyses for a string may have identical semantics due to auniformly available choice between application and composition.
Identical semantics an arise fromcoincidental convergence of the meanings oftwo intrinsically distinct analyses as well.
Thus, thenumber of CCG analyses of a string is not a measure ofthe string's true ambiguity, nor is the numberof semantically distinct analyses.
(~) 1993 Association for Computational LinguisticsComputational Linguistics Volume 19, Number 1forms are computed.
The generation problem involves computing the relation in thedirection from meaning to string.
More precisely, this is the tactical generation problem,as opposed to the more difficult strategic generation problem (Thompson 1977)--theproblem of deciding what to say.
I will assume that this latter problem is solved bysome other computational device, which I will refer to as a reasoner, that also manip-ulates logical forms.
The reasoner may be a strategic generator proper (as describedin the generation literature) or some more specialized program.
All that is requiredis that it be a computational rtifact hat needs the ability to construct utterances toconvey certain meanings, and that it supplies meaning representations, logical forms,to a (tactical) generator for this purpose.
See Section 4 for further discussion of theseassumptions.3.
Def in i t ion of the ProblemGiven a logical form (presumably supplied by such a reasoner), a generator 2 must,then, find a string with that meaning, that is, a string whose canonical logical formmeans the same as the given one.
This is the problem of logical-form equivalence, the problemof constructing a generator that can generate not just from canonical logical forms butfrom all logical forms that mean the same.The notion of meaning identity of logical forms is thus crucial to the problem.Meanings are something that we have a priori intuition of only for natural anguagesentences, not logical forms; so meaning identity for logical forms must be predicatedon meaning identity for natural language sentences.
Suppose there are two sentences$1 and $2 with canonical logical forms L1 and L2.
At minimum, the notion of meaningidentity for logical forms should be such that if $1 and $2 mean the same, then L1 andL2 do, and conversely, if $1 and $2 do not mean the same, then neither do L1 and L2.Any logical forms that are not the canonical form for any sentence are, in a sense, freeto mean the same as any other logical forms, but ideally, the logic (again, the term isused broadly) from which the logical forms are taken should define meaning identityin a consistent manner, as for example, through a uniform direct semantics for logicalforms, or proof-theoretically, or computationally.
Indeed, the reasoner embodies omesuch notion of meaning identity of logical forms implicitly in whatever computationaloperations it performs on logical forms.
It is natural, then, to take a notion of logicalequivalence for the logical form language as an approximation to meaning identity.It is important to keep in mind, however, that the standard for meaning identity oflogical forms is consistency with natural anguage meaning identity, and it is mean-ing identity, not logical equivalence, that is the basis for the problem of logical-formequivalence.One might be tempted to remove the requirement that a generator be able togenerate from noncanonical logical forms.
The reason that it is not sufficient to generateonly from canonical logical forms comes from seeing a generator as it fits into alarger computational context.
Recall that a generator is a peripheral device for use bysome other computational mechanism, the reasoner, when it needs to utter a string toconvey a given meaning.
If the generator required a canonical logical form as input,the reasoner would be burdened with having to construct the canonical logical-formrepresentation for the meaning it wanted to convey, not merely some representation2 Here and following, I will use the term "generator" forwhat is more strictly referred to by the term"tactical generator."
Asshould be clear from the foregoing discussion, our "reasoner" subsumes"strategic generator.
"180Stuart M. Shieber The Problem of Logical-Form Equivalencefor the meaning.
Which of the many logical forms representing a given meaning iscanonical is a grammatical issue, not a semantic one, and reasoners hould not haveto truck with grammatical issues.
It is only in the context of a generator's use by areasoner that the spirit of the logical-form equivalence problem can be seen.
(It is nocoincidence that the problem first confronted us in the context of using the CL-PATRgenerator with the KAMP reasoner in building the GENESY8 system.)4.
Scope of the ProblemThe problem of logical-form equivalence is so called for historical reasons; the in-terface between the KAMP planner and the CL-PATR generator used representationsreferred to as logical forms.
The problem itself holds for any generation system thatdivides into a language-independent strategic reasoning component and a language-dependent tactical generation component, whether this representation be sentencesof a logic narrowly construed or sentences of some other representation language(semantic networks, a knowledge representation language, specialized interface lan-guages, bundles of answers to systemic hooser questions, and so forth).
Throughoutthis paper, the term 'logical form" refers to the elements of whatever representation language servesas the interface between the reasoner and generator.
(The term language is to be construedvery broadly here as well.)
As I will argue, for any such language, either the strategiccomponent will have to perform linguistic reasoning, or the interface representationlanguage together with the tactical component will constitute a solution to the AIproblem.To further clarify the generality of the problem, note that the two components--reasoner and generator--need not operate sequentially.
The interface representationmay be communicated from the strategic to the tactical component in parts, and a sin-gle representation need never exist at any one point in time.
The sum total of inputsdriving the tactical generator constitutes a virtual logical form of the utterance.
Forinstance, the GENESYS system coroutined the KAMP planner and CL-PATR generator,the logical form representation being communicated incrementally between the two.At no point was a single logical representation ever used, or even constructed.
Sim-ilarly, the tactical component of a systemic generator may ask multiple questions ofa reasoner to drive the generation through choice points in the various systems.
Therecursively structured bundle of answers to the various questions erves as a virtuallogical form for the system.
See Sections 7 and 9 for further discussion of systemicand functional approaches to generation.On the other hand, there are restrictions on the scope of the problem.
The problemof logical-form equivalence relies on the distinction between a language-free r asonerand a language-sensitive g nerator.
If, as is often proposed, this distinction shouldbe eliminated, then the problem of logical-form equivalence disappears.
However,the single-component approach to generation does not thereby achieve an advantage,for the single remaining component encompasses all of the reasoning and linguisticaspects of generation, and is therefore at least as complex as the two components ofthe model presupposed here.
In fact, the elimination of the division opens the doorto greater complexity, modular systems with simple interfaces in general being moreconstrained than nonmodular ones.
Whether the elimination of the strategic/tacticaldistinction is a useful move is, therefore, an independent, primarily empirical question,one about which I am personally agnostic and about which this squib will have nothingto contribute.181Computational Linguistics Volume 19, Number 15.
Examples of the ProblemTo construct some examples, we need to specify a particular logical-form language andits relation to natural language sentences, thus imposing a notion of meaning identityon the logical forms.
Let us take the language to be a first-order logic and consider thefollowing pairings of strings and canonical logical forms that a hypothetical grammarmight induce.
(Item) StringCanonical Logical Form(i) John threw a large red ball.~x.throw(j~ x) A large(x) A red(x) A ball(x)(ii) John threw a red ball that is large.3x.throw(j~ x) A red(x) A ball(x) A large(x)(iii) John threw a large ball that is red.3x.throw(j, x) A large(x) A ball(x) A red(x)Because these sentences mean the same (although they may differ in pragmatic effect)while their logical forms differ in permutation of conjuncts, we will take meaningidentity for first-order logical forms to include commutativity and associativity ofconjunction.
In fact, we can go further, by assuming (for the nonce) that meaningidentity is reasonably well approximated by the standard first-order-logic notion oflogical equivalence.By the commutativity and associativity of conjunction, all three of these sentencesspecify the same proposition.
A generator confronted with a request to construct a sen-tence conveying the proposition represented by, say, 3x.throw(j~ x) A ball(x) A large(x) Ared(x) ought to be able to generate all of these strings, or at least one of them.
(Ideally,further specification of the intended pragmatic effect ought to control which string isgenerated, but such issues are incidental to the problem being discussed here.)
Similarequivalences based on logical properties of other operators--including associativityand commutativity of disjunction, de Morgan's laws, laws of distributivity, equiva-lence of quantifier prefixes, and so forth--all introduce instances of the problem for agenerator.These considerations lead us to the reason for calling the problem of logical-formequivalence a problem.
Logical equivalence is in general not computable, even forrelatively inexpressive logics (like first-order logic).
There are restricted cases in whichit is computable; for instance, propositional logic has a decidable quivalence problem.However, even for such restricted logics, the problem is not effectively solved unlessthe notion of canonical form implicit in the grammar corresponds exactly to a notionof normal form for the logic (e.g., disjunctive normal form for propositional logic).Otherwise, we cannot use the existence of a normal form to compute the canonicalform to drive the generator.
Rather, all that can be done is to generate sentences blindly,and test equivalence post facto, which is an extremely profligate approach.
3As an approximation to meaning identity, the logical equivalence of first-orderlogic is too fine-grained.
Intuitively at least, more logical forms should be equivalentthan are provably equivalent by the laws of the logic alone.
These further equivalencescan be captured through their statement in a theory, thereby forming a better approx-imation to the meaning identity relation than logically valid equivalence alone.
Not3 However, see the later discussion of Levine's proposal that works exactly this way.182Stuart M. Shieber The Problem of Logical-Form Equivalencesurprisingly, such theory-relative equivalences can engender instances of the prob-lem of logical-form equivalence, too.
Suppose we are using a first-order languageaugmented with some generalized quantifiers and equality to represent meanings.
Agrammar might have the following pairings for a set of synonymous sentences: 4(Item) StringCanonical Logical Form(iv) Clapton was the leader of Derek and the Dominos.the(x, leader-of(dd, x), c = x)(v) The leader of Derek and the Dominos was Clapton.the(x, leader-of( dd, x ) , x = c)(vi) Clapton led Derek and the Dominos.led(c, dd )It is a (presumably nonlogical) fact thatVx, y.led(x, y) - leader-of(y, x).Relative to this fact, along with certain logical equivalences concerning the referentialuniqueness induced by the quantifier the and substitution of equals for equals, the(theory-relative) quivalence of all of these logical forms can be proved.
As before, agenerator ought to be able to generate any of these strings from any of their logicalforms.
And as before, the generator should also be taking into account pragmaticissues such as focus and presupposition i guiding the generation.
Thus, we shouldbe able to direct the generator to utter a sentence that means led(c, dd) while focusingc and have it generate sentence (iv) above.Above, we saw that the logical equivalence of first-order logic by itself is too fine-grained a notion of equivalence.
At the same time, it is too coarse-grained aswell.
Forexample, consider conjoining a tautology with the logical form in (vi).led(c, dd) A (rain V -.rain)This formula is logically equivalent to (vi), but might well be the canonical logicalform for the sentence(vii) Clapton led Derek and the Dominos and either it is raining or it is notraining.Certainly, one would not want a generator to produce (vi) and (vii) interchangeably;they do not mean the same.
This can serve as a reminder that the problem of logical-form equivalence is concerned with logical notions of equivalence only insofar as thesearegood approximations to meaning identity.
(Section 8 addresses this point in more detail.
)Many logics--relevance logics, for example--do not have these formulae as equivalent;their notions of logical equivalence are presumably more appropriate, for this one caseat least, for building reasoners to interact with generators.4 The example isderived from that encountered in the work on GENESYS and described by Appelt.
Thereason that hese particular logical forms are deemed the canonical ones for these sentences derivesfrom the relatively direct relation between the syntactic form of the sentences and the associated logicalform, as codified in a particular grammar.183Computational Linguistics Volume 19, Number 16.
An Apparent SolutionThe problem, in its barest form, may seem to be that a generator must be able to"undo" all of the equivalences given by the axioms (logical and nonlogical) of thelogic that it uses to express logical forms.
(This appearance of the problem comes aboutexactly because of the confusion between the meaning identity relation and the logicalequivalence approximations thereto.
We will purposefully indulge in this confusionfor the moment.)
For sufficiently expressive logics (and logics as simple as first-orderlogic are sufficiently expressive), computing whether two formulae are equivalent isundecidable, and for decidable logics such as propositional logic, searching throughthe infinite number of equivalents i , in any case, impractical.An obvious method for resolving the problem of logical form equivalence, then,would be to restrict he power of the logic.
By doing so, the logical equivalence r lationbecomes weaker, so that equivalence classes of logical forms are smaller, and searchingequivalents for those that are canonical should be that much easier, perhaps evendeterministic.
In fact, both of the published claims of solution to the logical-formequivalence problem are of this variety.
The first such claim that has come to myattention is due to Calder, Reape, and Zeevat (1989).
They state thatWe must generate all sentences whose semantic representations arelogically equivalent o the semantic representation being generatedunder the rules of inference and axioms of the semantic representa-tion language.
5 In the case of InL \[their epresentation language\], theprimary axioms are simply associativity and commutativity.
However,these two axioms alone give the equivalence problem factorial com-plexity.Since there are only a factorial number of equivalent logical forms, searching for thecanonical one is a finite (though, as the authors note elsewhere, still impractical) pro-cess.
John Levine (1990) reports on an interesting system called PRAGMA that in-corporates an apparent solution to the logical-form equivalence problem based onconsidering formulae identical if they have identical normal forms of a certain sort.The normal form is constructed as a clause form with equalities removed and withliterals sorted in a standard way.
Again, the notion of equivalence is weak, thoughstronger than that of Calder, Reape, and Zeevat (1989).It may be of some historical interest o describe the solution that was implementedin the GENESY$ system, a solution that, to the best of my knowledge, has never be-fore been described in published form.
It, too, involved setting up a weak notion ofequivalence, but of an entirely different sort.
We implemented a simple term rewritingsystem that used a leftmost-outermost rewriting strategy, and specified rewrite rulesthat attempted to rewrite the given logical form into its canonical equivalent.
Somerewrite rules implemented logical equivalences such as commutativity, others nonlog-ical equivalences such as the led/leader-of type of relationship, and so forth.
The use ofa rewriting system, and especially the leftmost-outermost strategy, gave us extremelyfine control over the notion of equivalence that the generator was able to operatewithin, but the method was essentially ad hoc and thought of purely as an expedient,as opposed to a true solution to the problem.5 Note the authors' elegant statement of the original definition of the problem given in Section 3,although they use logical equivalence as a replacement formeaning identity.--SMS184Stuart M. Shieber The Problem of Logical-Form EquivalenceIn summary, the apparent solutions to the problem of logical-form equivalencerest on the observation that the choice of logical equivalence is free.
It can thereforebe chosen so as to make the task of the generator easier.7.
The Inadequacy of the Apparent SolutionThere is a simple reductio against such apparent solutions to the logical-form equiv-alence problem.
The extreme version of this approach to a solution is to weaken thenotion of logical equivalence to one of syntactic identity.
This notion of equivalence isextremely easy to compute, so that a generator can easily produce all strings whosecanonical logical forms are equivalent to the given logical form.
Nonetheless, there isan overwhelming feeling that the question has not so much been solved as begged.The reason is perhaps obvious.
This notion of logical equivalence is not a goodapproximation of meaning identity; it is far too intensional.
But the entire basis forpursuing the use of a logical equivalence relation was that it served as an approxima-tion to meaning identity.
Thus, such solutions that weaken the notion of equivalencemiss the spirit of the logical-form equivalence problem.Such solutions do not unburden a reasoner from reasoning about canonicality oflogical forms.
Any divergence between the logic defining equivalence for the generatorand the notion of meaning identity assumed by the reasoner implicitly embeds a claim:that the reasoner makes insufficiently many semantic distinctions.
These distinctionsare manifest in the meanings of natural anguage sentences, meanings that the reasoneris reasoning about; therefore it should be cognizant of these distinctions.
For instance,if the generator logic eschews commutativity of conjunction, whereas the reasonerincorporates it, the claim is thereby made that the properties conveyed by the nominals"large red ball" and "large ball that is red" differ; this claim is much stronger than theclaim that they differ in pragmatic effect.
In a similar vein, the notions of equivalenceimplicit in the work of Calder, Reape, and Zeevat and in the work of Levine do notconflate the logical forms (i), (ii), and (iii).
The reasoner must choose the appropriateone by looking ahead to the generation process.Thus, Calder, Reape, and Zeevat and Levine solve an artificial variant of thelogical-form-equivalence problem; logical equivalence has become an end in itself,rather than a means to an end.
6 They show that the notion of equivalence in the logicused for the generator's logical forms is computable.
But the actual problem wouldrequire that the notion of logic be appropriate for the reasoner to use as well, that itembody a notion of meaning identity.
Without meaning identity to keep us honest,we could take advantage of the divergence between the two notions of equivalence tosolve the problem by fiat.In addition to the theoretic inadequacy due to divergence of the generator's equiv-alence notion from true meaning identity, there is a practical problem in the particularnotions that Calder, Reape, and Zeevat and Levine choose.
Although equivalence isdecidable in their schemes, it is still computationally extremely expensive.
In Calder,Reape, and Zeevat's logic, there are a factorial number of equivalent logical forms.
Todirectly incorporate their solution into a generator requires constructing the factorialnumber of equivalents and generating separately from each of them.
This is a suffi-ciently expensive process that they do not actually implement the ability to generate6 It should be emphasized that the work of Calder, Reape, and Zeevat and Levine is only incidentallyconcerned with the logical-form-equivalence problem, and includes many other interesting ideas.
Thediscussion here is not intended to denigrate their research efforts in any way.
I am merely using theirside discussions of the logical-form-equivalence problem to clarify some alternative conceptions.185Computational Linguistics Volume 19, Number 1from noncanonical logical forms in their system, wisely preferring to direct their effortsto defining notions of "semicanonicality" that admit of more efficient processing.Levine's notion of equivalence is stronger (in that it finds more formulae to beequivalent); so much so that generation of all logical equivalents i impossible--thereare infinitely many, in general.
Levine states that "the problem of logical form equiva-lence can be solved relatively easily for the sentence generator.., since it only attemptsto equate the goal logical form with the constructed logical form when tree formationis complete."
Thus, all that is necessary is a method for checking equivalence, notgenerating equivalents, and this is efficiently computable.
It does, however, mean thatthe canonical logical form 'cannot itself be used to guide the generation process (sincethe particular logical form that will serve that purpose is not known until "tree forma-tion is complete").
The generation process is therefore not particularly goal-directed,and many currently proposed tactical generation algorithms cannot be used.
This pre-sumably leads to less efficient generation, though Levine does not indicate any suchproblem.
Surprisingly, Levine states that "this process is guided by the syntactic fea-tures attached to the sentence level node, but some semantic information from thegoal logical form is also used to cut down the search space," which seems to contra-dict the idea of allowing divergence between the constructed and goal logical formsthroughout the generation process.It might be thought hat the problem rests in using logical notations for represent-ing meanings.
Systemic grammarians, for instance, might think that their methods areimmune to the problem of logical-form equivalence, because they do not represent themeaning as such in a logical-form expression.
Rather, to guide generation they mustmerely query an oracle as to the answers to a definite set of questions.
The answersthat the oracle provides control the choices in the grammar and lead to the genera-tion of the utterance.
This feeling of relief is illusory.
At some point, the oracle mustanswer questions on the basis of its representation f the situation to be described inthe utterance.
(This representation is analogous to a logical form.)
If it answers thequestions by direct lookup (as is done in the systemic generators I am aware of), thenit requires the representation of the described situation to be in a kind of canonicalform.
If it answers the questions by reasoning from the representation, then we areback to constructing a canonical form from a noncanonical one, and arbitrary reason-ing might be needed.
To the extent hat the reasoning is constrained but the reasoneris not burdened with grammatical issues, the problem of logical-form equivalence hasbeen solved.
Thus, the use of a systemic grammar does not make the problem moot;the problem is well defined in the systemic ontext.
Furthermore, existing systemicgrammar generators do not, to my knowledge, solve the problem.
7Solutions to the problem of logical-form equivalence are thus revealed to lie alonga continuum with respect o how close the match is between two notions of equiva-lence: (i) the relation of meaning identity on logical forms and (ii) the notion of logicalequivalence that the generator is insensitive to (that is, the generator treats two logicalforms as equivalent in this sense if either can equally well serve as the input andyield the same generated output).
What is needed to solve the logical-form equiv-alence problem then?
Essentially, any semantic distinction in the logic that ramifiesin the syntax of the natural language must be somehow efficiently distinguishablein the semantic representation, and any semantically distinguishable facet of the se-mantic representation must have syntactic ramifications.
The logical form language7 It might be argued, however, that systemic or other functional approaches to language might have aleg up on constructing a solution.
I discuss this possibility in Section 9.186Stuart M. Shieber The Problem of Logical-Form Equivalencemust allow for the representation f all and only the semantic distinctions that ramifysyntactically, s It may make these distinctions by representing them explicitly or byhaving them be efficiently computable (that is, not by arbitrary reasoning), but theymust be manifestable somehow.It seems that a resolution of the logical-form equivalence problem must wait untila representation language has been invented that characterizes exactly the semanticdistinctions that ramify in natural anguage syntax.
But this, reiterating my previousargument (Shieber 1988), is one manifestation of the AI knowledge representationproblem.
There, I used the fact that the knowledge representation problem has notbeen solved (and might be considered AI-complete) as a proof, by reduction so tospeak, of the AI-completeness of the logical-form equivalence problem.
Certainly, theargument is not a proof in principle, but merely one in practice; such a representationhas not been developed so far but perhaps one will be devised some day.
Nonetheless,I am not sanguine about the prospects.8.
Relations to PhilosophyOne reason that ready solution of the problem of logical-form equivalence is not likelyis that it is essentially a philosophical problem, not a technological one.
It may be thatthis accounts for its intransigence.
The problem centers on precisely specifying anotionof meaning identity.
This is a problem that has arisen in various notorious problemsin the philosophy of language over the last century.
I list a few examples here.Identity of predicates.The question of when two predicates are identical ("mean the same") haslong been a thorny philosophical problem.
Russell addresses it in hisphilosophy of logical atomism (1983).
It is a central question in thetheory of universals (Armstrong 1978).
Typically, the question is phrasedas a concern over lexical predicates (e.g., renate/chordate).
The problemof logical-form equivalence is the syntactic onstruction counterpart tothis problem.Substitution in opaque contexts.It is widely acknowledged that Liebniz's law does not hold in certaincontexts (Frege 1892).
Intensional verbs, for instance, disallow suchsubstitution.
Thus, logical equivalence diverges from meaning identitywith respect o this test at least.
Nonetheless, certain substitutions mightbe allowed--which ones is a contentious topic--for instance,substitutions based on commutativity of conjunction.
The issue hingeson examination of synonymy of sentences like the following:John knows that Clapton led Derek and the Dominos.John knows that Clapton was the leader of Derek and theDominos.John knows that Clapton led Derek and the Dominos and eitherit is raining or it is not raining.8 This raises the interesting possibility, noted by Zellig Harris (1988), that he only language appropriatefor representing the semantics ofnatural language s ntences are the sentences themselves.187Computational Linguistics Volume 19, Number 1In a sense, generation is inherently an intensional process.
If it were not,then a generator could concern itself only with the truth value of thelogical form it was to generate from, uttering either "true" or "false" forall inputs.
One can think of the process of generation of an utterance asimplicitly incorporating an intensional context--something akin to "I tellyou that..." or "I want you to believe that .. .
.  "
Indeed, all dialog worksthis way.
Russell (1940) expresses a similar sentiment: "In adult life, allspeech ... is, in intention, in the imperative mood.
When it seems to be amere statement, it should be prefaced by the words 'know that'."
It isnot surprising, then, that there is a close relationship between theproblem of logical-form equivalence and the philosophy of propositionalattitudes and other intensional phenomena.Reducing meaning to truth.Davidson (1984) attempts to build a theory of meaning on a theory oftruth, that is, on a characterization f Tarskian T-sentences such as"Clapton led Derek and the Dominos" is true if and only ifClapton led Derek and the Dominos.Foster (1976) notes the need for excluding such T-sentences as"Clapton led Derek and the Dominos" is true if and only ifClapton led Derek and the Dominos and either it is rainingor it is not raining.Although true, these sentences are undesirable in the enterprise ofcharacterizing the meaning of the sentence on the left-hand side.Davidson's reply (1976) postulates the need, inter alia, for a canonicalproof procedure that maintains a "translation relationship" between theleft and right side of the biconditional in the T-sentences.
Much of theargument against Davidson's approach centers on the difficulty orimpossibility of constructing such a canonical proof procedure, andcounterarguments re t on the existence of such procedures.
The questionremains open.Any line of inquiry that requires a precise specification of the notion "meansthe same as" is, not surprisingly, going to get itself ensnared in a fair amount ofphilosophical f otsam.9.
Applicable TechnologyIt is important hat researchers be aware of the philosophical nature of the problem,so that they do not attempt o develop technological fixes to what is, at heart, not atechnological problem.
Nonetheless, it may be that some technology can be useful indeveloping approximate solutions to the problem of logical-form equivalence---logicsthat come closer to embodying meaning identity or methods for characterizing certainclasses of meaning-identical logical forms.
Some work that may be of potential use inthis program of research--but certainly not an exhaustive listing--is discussed in thissection.Functional linguists, including those working in the systemic grammar tradition,have done a great deal of work in codifying the distinctions between logically equiv-alent sentences.
By building on this work, better representational l nguages may be188Stuart M. Shieber The Problem of Logical-Form Equivalencederivable.
Of particular significance along these lines is the work of Hans Weigand(1990) who has explored the idea of designing knowledge representation languageson the basis of "linguistically motivated principles," based on the functional grammarof Dik (1981).
He is coming at the same problem, but from the opposite direction.Some recent work by knowledge representation designers has concentrated onlow-power efficient knowledge representation languages.
McAllester and Givan's workon efficient inference systems based on analogies with natural anguage syntax (1989a,1989b) is especially exciting in its potential application to the problem.The lexical functions of Mel'~uk (1982) were originally proposed as a kind ofuniversal theory of lexical relationships.
But they might also serve as a useful taxonomyon which to build a notion of meaning identity.
Although the functions that Mel'~ukdefines may or may not be exhaustive as far as meaning identity goes, they certainly goa long way toward characterizing the most common such relationships.
(For instance,the relationship between (iv) and (vi) above is related to the lexical function $1 inMel'~uk's terminology.
)It will be interesting to see to what extent hese or other approaches can aid inapproximating solutions to the problem of logical-form equivalence.10.
SummaryIn summary, the problem of logical-form equivalence is really a problem of the diver-gence between two notions of equivalence, one associated with a generator, a kind oflogical equivalence, and one associated with a reasoner, a notion of meaning identity.The crucial role of the reasoner's notion of equivalence was not made clear in earlierdescriptions of the problem.
Previous proposed solutions to the problem have, notsurprisingly therefore, addressed a weaker variant of the problem, defined solely interms of the generator's notion of equivalence, and consequently, have incorporatedweak solutions to the problem.
I remain agnostic as to the possibility of a strong so-lution to the problem of logical-form equivalence, but the relationships to difficultproblems in core AI and the philosophy of language cast a long shadow.
Nonetheless,approximate solutions based on certain techniques from computational linguistics andAI may provide for some illumination.AcknowledgmentsI have benefited greatly from discussionswith Douglas Appelt, Barbara Grosz, DavidIsrael, David McDonald, Fernando Pereira,James Pustejovsky, Jason Stanley, and DavidWaltz on the topic of this paper.
Theopinions expressed here are my own, andare not necessarily shared by them, nor arethey responsible for any remaining errors ofform or substance.ReferencesAppelt, Douglas E. (1987).
"Bidirectionalgrammar and the design of naturallanguage generation systems."
InProceedings, TINLAP-3, edited by YorickWilks.
Las Cruces, NM, January 7-9,185-191.
Reprinted (1989) in TheoreticalIssues in Natural Language Processing,edited by Yorick Wilks, 199-205.Lawrence Erlbaum Associates.Armstrong, D. M. (1978).
Universals andScientific Realism.
Cambridge UniversityPress.Calder, Jonathan; Reape, Mike; and Zeevat,Henk (1989).
"An algorithm forgeneration in unification categorialgrammar."
In Proceedings, 4th Conference ofthe European Chapter of the Association forComputational Linguistics.
Manchester,England, April 1989, 233-240.Davidson, Donald (1984).
"Truth andmeaning."
In Inquiries into Truth andInterpretation, 17-36.
Oxford UniversityPress.Davidson, Donald (1976).
"Reply to Foster.
"In Truth and Meaning: Essays in Semantics,edited by Gareth Evans and JohnMcDowell, 33-41.
Oxford UniversityPress.189Computational Linguistics Volume 19, Number 1Dik, Simon C. (1981).
Functional Grammar,Volume 7 of Publications in LanguageSciences.
Foris.Foster, J.
A.
(1976).
"Meaning and truththeory."
In Truth and Meaning: Essays inSemantics, 1-32.
Oxford University Press.Frege, Gottlob (1892).
"Ober Sinn undBedeutung."
Zeitschrift far Philosophie undPhilosophische Kritik, volume 100,number 1, pages 25-50.
Reprinted as "Onsense and meaning" in Translations fromthe Philosophical Writings of Gottlob Frege,edited by Peter Geach and Max Black,Basil Blackwell, 56-78.Harris, Zellig (1988).
Language andInformation.
Columbia University Press.Levine, John M. (1990).
"PRAGMA--Aflexible bidirectional dialogue system."
InProceedings, Eighth National Conference onArtificial Intelligence, AAAI Press, 964-969.McAllester, David, and Givan, Robert(1989a).
"Natural anguage syntax andfirst order inference."
AI Memo No.
1176,Massachusetts Institute of Technology.McAllester, David, and Givan, Robert(1989b).
"Taxonomic syntax for first orderinference."
AI Memo No.
1134,Massachusetts Institute of Technology.Mel'~uk, Igor (1982).
"Lexical functions inlexicographic description."
In Proceedings,Eighth Annual Meeting of the BerkeleyLinguistics Society.
Berkeley, California,427-444.Russell, Bertrand (1983).
"The philosophy oflogical atomism.
In The Philosophy ofLogical Atomism and Other Essays,1914-1918, edited by John G. Slater,155-244.
George Allen and Unwin,London.Russell, Bertrand (1940).
An Inquiry intoMeaning and Truth.
George Allen andUnwin, London.Shieber, Stuart M. (1988).
"A uniformarchitecture for parsing and generation.
"In Proceedings, 12th International Conferenceon Computational Linguistics.
Budapest,Hungary, August, 614-619.Thompson, Henry (1977).
"Strategy andtactics: A model for languageproduction."
In Papers from the 13thRegional Meeting, Chicago Linguistic Society,Chicago, Illinois, 651-668.Weigand, Hans (1990).
LinguisticallyMotivated Principles of Knowledge BaseSystems, Volume 12 of Functional GrammarSeries.
Foris.190
