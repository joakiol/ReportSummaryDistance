ENGLISH WORDS AND DATA BASES: HOW TO BRIDGE THE GAPRemko J.H.
SchaPhilips Research LaboratoriesEindhovenThe NetherlandsABSTRACTIf a q.a.
system tries to transform an Eng-lish question directly into the simplest possibleformulation of the corresponding data base query,discrepancies between the English lexicon and thestructure of the data base cannot be handled well.To be able to deal with such discrepancies in asystematic way, the PHLIQAI system distinguishesdifferent levels of semantic representation; itcontains modules which translate from one levelto another, as well as a module which simplifiesexpressions within one level.
The paper shows howthis approach takes care of some phenomena whichwould be problematic in a more simple-minded set-up.I INTRODUCTIONIf a question-answering system is to cover anon-trivial fragment of its natural input-language,and to allow for an arbitrarily structured database, it cannot assume that the syntactic/semanticstructure of an input question has much in commonwith the formal query which would formulate in termsof the actual data base structure what the desiredinformation is.
An important decision in the designof a q.a.
system is therefore, how to embody in thesystem the necessary knowledge about the relationbetween English words and data base notions.Most existing programs, however, do not facethis issue.
They accept considerable constraints onboth the input language and the possible data basestructures, so as to be able to establish a fairlydirect correspondence between the lexical items ofthe input language and the primitives of the database, which makes it possible to translate inputquestions into query expressions in a ratherstraightforward fashion.In designing the PHLIQAI system, bridging thegap between free English input and an equally un-constrained data base structure was one of the maingoals.
In order to deal with this problem in a sys-tematic way, different levels of semantic analysisare distinguished in the PHLIQAI program.
At eachof these levels, the meaning of the input questionis represented by an expression of a formal logicallanguage.
The levels differ in that each of themassumes different semantic primitives.At the highest of these levels,the meaning ofthe question is represented by an expression of theEnglish-oriented Formal Language (EFL); this lan-guage uses semantic primitives which correspond tothe descriptive lexical items of English.
The prim-itives of the lowest semantic level are the prim-itives of the data base (names of files, attributes,data-items).
The formal language used at this levelis therefore called the Data Base Language (DBL).Between EFL and DBL, several other levels of mean-ing representation are used as intermediary steps.Because of the space limitations imposed on thepresent paper, I am forced to evoke a somewhat mis-leading picture of the PHLIQA set-up, by ignoringthese intermediate levels.Given the distinctions just introduced, theproblem raised by the discrepancy between the Eng-lish lexicon and the set of primitives of a givendata base can be formulated as follows: one mustdevise a formal characterization of the relationbetween EFL and DBL, and use this characterizationfor an effective procedure which translates EFLqueries into DBL queries.
I will introduce PHLIQA'ssolution to this problem by giving a detailed dis-cussion of some examples I which display complica-tions that Robert Moore suggested as topics for thepanel discussion at this conference.II THE ENGLISH-ORIENTED LEVEL OF MEANINGREPRESENTATIONThe highest level of semantic representationis independent of the subject-domain.
It contains asemantic primitive for every descriptive lexicalitem of the input-language 2.
The semantic types ofthese primitives are systematically related to thesyntactic categories of the corresponding lexicalitems.
For example, for every noun there is a con-stant which denotes the set of individuals whichfall under the description of this noun: corre-sponding to "employee" and "employees" there is aconstant EMPLOYEES denoting the set of all employ-ees, corresponding to "department" and "depart-ments" there is a constant DEPARTMENTS denotingthe set of all departments.
Corresponding to ann-place verb there is an n-place predicate.
Forinstance, "to have" corresponds to the 2-placepredicate HAVE.
Thus, the input analysis component.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.I There is no space for a definition of the logicalformalism I use in this paper.
Closely related log-ical languages are defined in Scha (1976), Lands-bergen and Scha (1979), and Bronnenberg et a1.
(1980).2 In previous papers it has been pointed out thatthis idea, taken strictly, leads not to an ordinarylogical language, but requires a formal languagewhich is ambiguous.
I ignore this aspect here.
WhatI call EFL corresponds to what was called EFL- insome other papers.
SeeLandsbergenand Scha (1979)and Bronnenberg et al (1980) for discussion.57of the system translates the question"How many departments have more than i00employees ?"
(i)intoCount({x E DEPARTMENTS ICount({y e EMPLOYEESIHAVE(x,y)}) > I00}).
(2)III THE DATA BASE ORIENTED LEVEL OF MEANINGREPRESENTATIONA data base specifies an interpretation of alogical language, by specifying the extension ofevery constant.
A formalization of this view ondata bases, an& its application to a CODASYL database, can be found in Bronnenberg et ai.
(1980).The idea is equally applicable to relational databases.
A relational data base specifies an inter-pretation of a logical language which contains forevery relation R \[K, At, .... An\] a constant K de-noting a set, and n functions Al,..., An which havethe denotation of K as their domain.
~Thus, if we have an EMPLOYEE file with aDEPARTMENT field, this file specifies the extensionof a set EMPS and of a function DEPT which has thedenotation of EMPS as its domain.
In terms of sucha data base structure, (i) above may be formulatedasCount({xe (for: EMPS, apply: DEPT) 1Count((y e EMPSIDEPT(y)=x}) > i00}).
(3)I pointed out before that it would be unwise todesign a system which would directly assign themeaning (3) to the question (I).
A more sensiblestrategy is to first assign (I) the meaning (2).The formula (3), or a logically equivalent dne, maythen be derived on the basis of a specification ofthe relation between the English word meanings usedin (i) and the primitive concepts at the data baselevel.IV THE RELATION BETWEEN EFL AND DBLThough we defined EFL and DBL independently ofeach other (one on the basis of the possible Eng-lish questions about the subject-domain, the otheron the basis of the structure of the data baseabout it) there must be a relation between them.The data base contains information which can serveto answer queries formulated in EFL.
This meansthat the denotation of certain EFL expressions isfixed if an interpretation of DBL is given.We now consider how the relation between EFLand DBL may be formulated in such a way that it caneasily serve as a basis for an effective transla-tion from EFL expressions into DBL expressions.The most general formulation would take the form ofa set of axioms, expressed in a logical languageencompassing both EFL and DBL.
If we allow the fullgenerality of that approach, however, it leads tothe use of algorithms which are not efficient andwhich are not guaranteed to terminate.
An alterna-tive formulation, which is attractive because itcan easily be implemented by effective procedures,is one in terms of translation rules.
This is theapproach adopted in the PHLIQAI system.
It is de-scribed in detail in Bronnenberg et al (1980) andcan be summarized as follows.The relation between subsequent semanticlevels can be described by means of local transla-tion rules which specify, for every descriptiveconstant of the source language, a correspondingexpression of the target language I ?
A set of suchtranslation rules defines for every source languagequery-expression an equivalent target language ex-presslono An effective algorithm can be constructedwhich performs this equivalence translation for anyarbitrary expression.A translation algorithm which applies thetranslation rules in a straightforward fashion,often produces large expressions which allow forconsiderably simpler paraphrases.
As we will seelater on in this paper, it may be essential thatsuch simplifications are actually performed.
There-fore, the result of the EFL-to-DBL translation isprocessed by a module which applies logical equi-valence transformations in order ~o simplify theexpression.At the most global level of description, thePHLIQA system can thus be thought to consist of thefollowing sequence of components: Input analysis,yielding an EFL expression; EFL-to-DBL translation!simplification of the DBL expression; evaluation ofthe resulting expression.For the example introduced in the sections IIand III, a specification of the EFL-to-DBL transla-tion rules might look llke this:DEPARTMENTS ~ (for: EMPS, apply: DEPT)EMPLOYEES ?
EMPSHAVE ?
(%x,y: DEPT(y)=x)These rules can be directly applied to the formula(2).
Substitution of the right hand expressions forthe corresponding left hand constants in (2), fol-lowed by X-reduction, yields (3).V THE PROBLEM OF COMPOUND ATTRIBUTESIt is easy to imagine a different data basewhich would also contain sufficient information toanswer question (i).
One example would be a database which has a file of DEPARTMENTS, and which hasNUMBER-OF-EMPLOYEES as an attribute of this fileoThis data base specifies an interpretation of alogical language which contains the set-constantDEPTS and the function #EMP (from departments tointegers) as its descriptive constants.
In terms ofthis data base, the query expressed by (i) would be:Count (~x e DEPTSI #EMP (x) > i00}).
(5)If we try to describe the relation betweenEFL and DBL for this case, we face a difficultywhich dld not arise for the data base structure ofsection III: the DBL constants do not allow theconstruction of DBL expressions whose denotationsinvolve employees.
So the EFL constant EMPLOYEEScannot be translated into an equivalent DBL expres-sion - nor can the relation HAVE, for lack of asuitable domain.
This may seem to force us to giveup local translation for certain cases: instead, wewould have to design an algorithm which looks outfor sub-expressions of the formI ignore the complexities which arise because ofthe typing of variables, if a many-sorted logic isused.
Again, see Bronnenberget al (1980), fordetails.58(%y: Count( {x EEMPLOYEES IHAVE(y,x)} )), where y isranging over DEPARTMENTS, and then translates thiswhole expression into: #~.
This is not attractive- it could only work if EFL expressions would befirst transformed so as to always contain this ex-pression in exactly this form, or if we would have analgorithm for recognizing all its variants.Fortunately, there is another solution.
Thoughin DBL terms one cannot talk about employees, onecan talk about objects which stand in a one-to-onecorrespondence to the employees: the pairs consis-ting of a department d and a positive integer i suchthat i is not larger than than the value of #E~for d. Entities which have a one-to-one correspon-dence with these pairs, and are disjoint with theextensions of all other semantic types, may be usedas "proxies" for employees.
Thus, we may define thefollowing translation:EMPLOYEES ~ U(for: DEPTS,apply: (%d:(for: INTS(#EMP(d)),apply:(~ x:idemp ~ d,x>)))))DEPARTMENTS ~ DEPTSHAVE * (%y: rid(y\[2\])\[l\] = y\[l\])where id is a functionwhich establishes a one-em -to-one correspondence between its domain and itsrange (its range is disjoint with all other seman-tic types); rid is the inverse of id ; INTS is a emp function which assigns to any integer i the set ofintegers j such that 0<j~i.Application of these rules to (2) yields:Count({x E DEPTS ICount({y~ U(for: DEPTS,apply:(%d:(for: INTS(#EMP(d)),apply:(%x:id ~ d,x>))))) 1rid(y)\[l\] = x}) > i00}~ mp (6)which is logically equivalent to (5) above.It is clear that this data base, because ofits greater "distance" to the English lexicon, re-quires a more extensive set of simplification rulesif the DBL query produced by the translation rulesis to be transformed into its simplest possibleform.
A simplification algorithm dealing succesful-ly with complexities of the kind just illustratedwas implemented by W.J.
Bronnenberg as a componentof the PHLIQAI system.VI EXTENDING THE DATA BASE LANGUAGEConsider a slight variation on question (I):"How many departments have more than i00 people ?"
(7~)We may want to treat "people" and "e~!oyees" asnon-synonymous.
For instance, we may want to beable to answer the question "Are all employees em-ployed by a department ?"
with "Yes", but "Are allpeople employed by a department ?"
with "I don'tknow".
Nevertheless, (7) can be given a definiteanswer on the basis of the data base of section IlLThe method as described so far hasaproblem withthis example: although the answer to (7) is de-termined by the data base, the question as formula-ted refers to entities which are not represented inthe data base, cannot be constructed out of suchentities, and do not stand in a one-to-one corre-spondence with entities which can be so constructed.In order to be able to construct a DBL translationof (7) by means of local substitution rules of thekind previously illustrated, we need an extendedversion of DBL, which we will call DBL*, containingthe same constants as DBL plus a constant NONEMPS,denoting the set of persons who are not employees.Now, local translation rules for the EFL-to-DBL*translation may be specified.
Application of thesetranslation rules to the EFL representation of (7)yields a DBL* expression containing the unevaluableconstant NONEMPS.
The system can only give a defi-nite answer if this constant is eliminated by thesimplification component.If the elimination does not succeed, PHLIQAstill gives a meaningful "conditional answer".
Ittranslates NONEMPS into ~ and prefaces the answerwith "if there are no people other than employees,...".
Again, see Bronnenberg et al (1980) fordetails.VII DISCUSSIONSome attractive properties of the translationmethod are probably clear from the examples.
Localtranslation rules can be applied effectively andhave to be evoked only when they are directly re-levant.
Using the techniques of introducing "prox-ies" (section V) and "complementary constants"(section VI) in DBL, a considerable distance be-tween the English lexicon and the data base struc-ture can be covered by means of local translationrules.The problem of simplifying the DBL* expres-sion (and other, intermediate expressions, in thefull version of the PHLIQA method) can be treatedseparately from the peculiarities of particulardata bases and particular constructions of theinput language.VIII ACKNOWLEDGEMENTSSome of the ideas presented here are due toJan Landsbergen.
My confidence in the validity ofthe translation method was greatly enhanced by thefact that others have applied it succesfully.
Espe-cially relevant for the present paper is the workby Wim Bronnenberg and Eric van Utteren on thetranslation rules for the PHLIQAI data base.
BipinIndurkhya (1981) implemented a program which showshow this approach accommodates the meaning postu-lates of Montague's PTQ and similar fragments ofEnglish.IX REFERENCESW.J.H.J.
Bronnenberg, H.C. Bunt, S.P.J.
Landsbergen,R.J.H.
Scha, W.J.
Schoenmakers and E.P.C.
van Utte-ren: The Question Answering System PHLIQAI.
In:L. Bolc (sd): Natural Lan~uase Question AnsweringSystems.
M~nchen, Wien: Hanser.
London, Basing-stoke: Macmillan.
1980.B.
Indurkhya: Sentence Analysis Prosrams Based onMontague Grammar__~.Unpubl.
Master's Thesis.
Phi-lips International Institute.
Eindhoven.
1981.S.P.J.
Landsbergen and R.J.H.
Scha: Formal Lan-guages for Semantic Representation.
In: S. All~nand J.S.
PetSfi (eds): AsRects of AutomatizedText Processing.
Hamburg: Buske.
1979.R.J.H.
Sch~ Semantic Types in PHLIQAI.
Preprintsof the 6 ~h International Conference on C0mputa-tional Linsuistics.
Ottawa.
1976.59
