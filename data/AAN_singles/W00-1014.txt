Dialogue and Domain Knowledge ManagementSystemsin DialogueAnnika Flycht-Eriksson and Arne JSnssonDepartment ofComputer and Information ScienceLinkSping University, SE-581 83, LINKOPING, SWEDENannfl@ida.liu.se arnjo@ida.liu.seAbst ractIntelligent dialogue systems must be ableto respond properly to a variety of re-quests involving knowledge of the dia-logue, the task at hand, and the domain.This requires advanced knowledge rea-soning performed by various processingmodules.
We argue that it is impor-tant to understand the nature of the var-ious reasoning mechanisms involved andto separate not only, for instance, inter-pretation, generation, and dialogue man-agement but also domain knowledge andtask reasoning.
This facilitates portabili-ty of the dialogue system to new domainsand makes it easier to enhance its capa-bilities.
In this paper we will focus on thedialogue and domain knowledge reason-ing components and show how they cancooperate to achieve natural interaction.1 In t roduct ionAs information services and domains grow morecomplex the complexity of dialogue systems in-creases.
They tend to need more and more domainknowledge and the domain reasoning mechanismsalso have to become more sophisticated.
Utilis-ing domain knowledge reasoning is in many casesnecessary for a dialogue system to interpret andrespond to a request in an intelligent manner, es-pecially as requests can be vague and sometimesambiguous.
This involves not only requests forinformation from application specific knowledgesources, but also requests related to the propertiesand structures of the application and requests thatare outside the scope of the application.
Thus,dialogue systems must be able to access, gath-er and integrate knowledge from various domainknowledge sources and application systems in or-der to determine the precise meaning of a requestand produce an appropriate r sponse.
However,although the dialogue system gather informationfrom various sources it differs from the informa-tion retrieval problem discussed for instance inStein et al (1999).
We assume that the tasks arewell-defined and that the users have articulatedinformation needs that they can express in specif-ic terms.In this paper we will discuss how these differenttasks can be performed in dialogue systems of sim-ple service character, i.e.
dialogue systems thatcan provide information given a set of parameterscollected from the user (Hayes and Reddy, 1983).2 Types  o f  requests  andc la r i f i ca t ionsUsers interacting with a dialogue system utilisevarious communicative acts.
Bunt (1989) makes adistinction between factual information acts anddialogue control acts.
The latter is used to controlthe dialogue and the former involves any transferof factual information.
Factual information re-quests can be further divided into two basic typesof requests:?
Task related requests.
Requests where theresponse from the dialogue system includesdomain and task specific information?
System related requests.
Requests where theresponse includes information on what can bedone with the system or pointers to other in-formation sourcesTo be able to respond to questions on the sys-tem's capabilities and how to interpret he pro-vided information, the dialogue system needs torepresent knowledge about itself, here called sys-tem information.
Also, if an answer can not befound in the application system(s) the dialoguesystem should give as helpful information as pos-sible, for example suggesting other resources theuser can consult.
For this purpose knowledge isneeded on where such information can be found.The requests for task related information can bedivided into simple and complex requests.
Sim-ple requests are basically requests for information121~ InterpreterI i Generatori Dialogue 1history~ .
I ....
I"-~ Dialogue I_M agor rKnowledge KnowledgeModule 1 Module 2KnowledgeModule 3KnowledgeModule nFigure 1: A dialogue system architecture.
The picture shows different processing modules: Interpreter,Generator, Dialogue Manager and Domain Knowledge Manager.
Some of the knowledge sources: dia-logue model, domain task model, system task model, and various knowledge modules, are also depicted,but not the grammar and lexicon.concerning properties of and relations betweensimple objects, for which the answers can be val-ues of properties or names of objects.
A simpleobject is typically an entity that can be identifiedby a name or a set of distinguishing features.
Sim-ple requests can be specified by an arbitrary setof parameters.
The parameters describe certainproperties which constraints he search for an ob-ject, or the requested properties of an object orset of objects.
A typical example of a simple re-quest is How fast is a Volvo 850?, which can bedirectly mapped onto a structure specifying thatthe requested object is 'Volvo 850' and the prop-erty requested is its 'speed', which in turn can beconverted to an application system request.Complex requests on the other hand are con-cerned with the specification and construction ofcompound objects.
The specification of such anobject requires that the user provides informationon a specific set of parameters, which often in-volves several dialogue turns.
The specification isused to construct a matching object by retriev-ing, and sometimes integrating, knowledge fromone or several domain and application knowledgesources.
Examples of complex requests are foundin timetable information applications, uch as theATIS dialogues.
To answer requests on a trip,the system needs to have a number of parame-ters specified, such as departure and arrival timeand place, before it is able to access the time-tables.
However, for such systems there are al-so simple requests that can be directly mappedto a request from the background system, for in-stance, requests regarding meals on a flight thatcan be identified by a flight number, e.g.
Is break-fast served on flight SK2818f.Since requests are specified by a set of entitiesthe system needs capabilities to identify entitiesfrom descriptions (Hayes and Reddy, 1983).
Anattempt to map a description to an entity can havethree different outcomes, a unique entity is found,the description is ambiguous and corresponds toseveral objects, or the description is unsatisfiableand no matching object can be found.
There existseveral strategies to deal with these problems, butall of them include some clarification from the useror domain reasoning.
In dealing with ambiguousdescriptions the system should be able to provideoptions or find a distinguishing feature that canbe used to ask the user for clarification.
Unsatisfi-able descriptions can be dealt with in three differ-ent ways: inform the user of the problem givingas helpful information as possible, find near missesby relaxing some of the features in thedescription,or find and inform the user of faulty presupposi-tions.3 D ia logue  sys tem arch i tec turesDialogue systems often have a modular archiotecture with processing modules for interpreta-tion, dialogue management, background systemaccess, and generation, see figure 1.
The pro-cessing modules utilise a number of knowledgesources, such as, grammar, lexicon, dialogue mod-122el, domain model, and task model (for an overviewof some systems, see Flycht-Eriksson (1999)).
Inthis paper focus is on dialogue management anddomain knowledge management, which includesbackground system access.3.1 Dialogue managementThe role of the Dialogue Manager differs slightlybetween different dialogue system architectures,but it's primary responsibility is to control theflow of the dialogue by deciding how the systemshould respond to a user utterance.
This is doneby inspecting and contextually specifying the in-formation structure produced by an interpreta-tion module.
If some information is missing ora request is ambiguous, clarification questions arespecified by the Dialogue Manager and posed tothe user.
Should a request be fully specified andunambiguous the background system can be ac-cessed and an answer be produced.
As a basisfor these tasks the Dialogue Manager can utilisea dialogue model, a task model, and a dialoguehistory.The Dialogue model holds a generic descriptionof how the dialogue is to be constructed, i.e.
todecide what action to take in a certain situation.It is used to control the interaction, which in-volves determining: 1) what the system shoulddo next (and what module is responsible for car-rying out the task) and 2) deciding what com-municative action is appropriate at a given dia-logue state.
There are various proposals on dia-logue models which can be divided in two groups:intention-based and structurally based.
They dif-fer in how they model the dialogue, especiallyif the user's goals and intentions behind the ut-terance need to be captured or not.
Structural-ly based models are often controlled using a di-alogue grammar whereas intention-based utiliseplan operators.
Furthermore, plan-based sys-tems use plan operators to model not only dia-logue knowledge but also task, domain and metaknowledge (c.f.
Lambert and Carberry (1991),Ramshaw (1991), Ferguson et al (1996)).
Thisallows for plan recognition to be the only process-ing mechanism needed.The System Task model represents how the sys-tem's tasks are performed, cf.
Application De-scription (Hagen, 1999).
However, the terms taskand task model can refer to very different phe-nomena.
It is important to make a clear distinc-tion between the system's task(s) and the user'stask(s) (van Loo and Bego, 1993; Dahlb~ck andJSnsson, 1999).
A user task is non-linguistic andtakes place in the real world.
Models of suchtasks involve the user's goals and how they can beachieved (cf.
Wahlster and Kobsa (1989)).
Mod-els of system tasks describe how the system's com-municative and other tasks, e.g.
database access,are carried out.A typical example of the difference betweenthe two types of task models can be found in atime-table system where the user states that (s)heneeds to be at the train station to catch a cer-tain train and requests information on buses go-ing there.
The information that the user is goingto the train station is user task model informa-tion, indicating that buses arriving after the de-parture thne of the train are not relevant.
Thesystem task model on the other hand models theinformation required for complex requests, uch asdate and departure place in a time-table system(cf.
Bennacef et al (1996)).
It is used by the Di-alogue Manager when collecting user informationin order to perform a background system access.In plan-based systems the domain models takes asimilar role, but wider as they often also involvesadvanced problem solving.
We will in this papernot consider user task models, only system taskmodels.The Dialogue history records the focus of atten-tion (Grosz and Sidner, 1986) and contains infor-mation about objects, properties, and relations aswell as other dialogue information such as speechact information and system task information.3.2 Domain Knowledge ManagementIf a request is fully specified it can be used to re-trieve the desired information from a backgroundsystem.
This task is seldom discussed in litera-ture on dialogue systems, perhaps because it isconsidered a rather straight forward task.
Thereare, however, several problems related to this.
Forexample, in cases where the background system isdistributed and consists of several domain and ap-plication system knowledge sources the dialoguesystem must know which of them to access, inwhat order, and how the results should be inte-grated into one answer.
This type of knowledgecan be represented in a domain task model.Other problems related to domain knowledgereasoning and application access where mentionedin section 2.
Although fully specified, requests cancontain vague or ambiguous information or evensome errors that can not be detected and han-died without extensive domain knowledge.
Thistype of domain knowledge is stored in domainknowledge sources, called knowledge modules infigure 1.
They contain knowledge of the worldthat is talked about and can vary much in formand content.
Information from a domain knowl-edge source is primarily used to find the relevant123Interpreter\[ GeneratorTimetableSystemand HelpInformationFigure 2: The MALIN dialogue system architecture in an application for local bus traffic time-tableinformation.
The dialogue model used is a dialogue gr~.mrnar, the dialogue history is modelled as adialogue tree, and Information Specification Forms correspond to the system task model.
The domainand application knowledge modules perform spatial and temporal reasoning, and provide time-table andsystem information controlled by recipes and integration rules.items and relations that are discussed, to supplydefault values, etc.
The knowledge representedin a domain knowledge source is often coupled tothe application system, e.g.
a database system.In such cases it is often used to map informationfrom a Dialogue Manager to concepts uitable fordatabase search.
It is for example common thatuser's give vague temporal descriptions that has tobe mapped to more precise time intervals beforethe information can be used to access an applica-tion system.To develop a Dialogue Manager that easily canbe cnstomi~ed to new domains and in which dif-ferent dialogue strategies can be explored, the Di-alogue Manager should only be concerned withphenomena related to the dialogue with the user.It should not be involved in the process of access-ing the background system or performing domainreasoning.
These tasks should instead be carriedout by a separate module, a Domain KnowledgeManager.The Domain Knowledge Manager is responsiblefor retrieving and coordinating knowledge fromthe different domain knowledge sources and ap-plication systems that constitutes the backgroundsystem.
The Dialogue Manager can deliver a re-quest to the Domain Knowledge Manager and inreturn expects an answer etrieved from the back-ground system.
If a request is under-specified orcontains inconsistencies from the Domain Knowl-edge Manager's point of view, a specification ofwhat clarifying information is needed will insteadbe returned to the Dialogue Manager.4 MAL INIn what follows we describe and exemplify a di-alogue system with separate modules for dia-logue management and domain knowledge man-agement.
The presentation will be based on theMALIN dialogue system architecture:, figure 2,which has been used to implement an applicationfor time-table information for local bus traffic inostergStland.One issue in the design of a dialogue system ishow to control the various modules and the userinteraction.
In some systems there is no moduleresponsible for the communication, i stead a sep-arate module, called hub (Aberdeen et al, 1999)or facilitator (Martin et al, 1999), is used for co-ordinating the modules and the internal informa-tion flow.
Alternatively, the Dialogue Manager isthe central unit of the system where the overallsystem behaviour is determined.The approach taken in MALIN is a combina-tion where a Dialogue Manager is the central con-troller of the interaction and the Domain Knowl-edge Manager is based on an agent architecture.XMALIN (Multi-modal Application of LINLIN) is a re-finement of the LINLINsystem (Ahrenberg et al, 1990;JSnsson, 1997) to handle also multi-modal interactionand more advanced applications.1244.1 The D ia logue  ManagerIn the MALIN dialogue model the dialogue is struc-tured in terms of discourse segments, and a dis-course segment in terms of moves and embed-ded segments.
Utterances are analysed as linguis-tic objects which function as vehicles for atom-ic move segments.
An initiative-response (IR)structure determines the compound iscourse seg-ments, where an initiative opens the IR-segmentby introducing a new goal and the response clos-es the IR-segment (Dahlb~ck, 1991).
The dis-course segments are classified by general speechact categories, such as question (Q) and an-swer (A) (JSnsson, 1997), rather than specialised(cf.
(Hagen, 1999)), or domain related (Alexander-sson and Reithinger, 1995).
The action to carryout for the Dialogue Manager, as modeled in a di-alogue grammar, depends on how domain entitiesare specified and their relation to other entities inthe domain and the dialogue history.In the MALIN dialogue system architecture thereis only One dialogue history maintained by the Di-alogue Manager.
Thus, the other modules in thesystem have no memory of the previous interac-tion since this could cause conflicts.
The dialoguehistory records focal information, that is, whathas been talked about and what is being talkedabout at the moment.
It is used for dialogue con-trol, disambiguation of context dependent utter-ances, and context sensitive interpretation.
Thedialogue history is represented as a dialogue tree.The nodes in the dialogue tree record informationutilising various information structures dependingon the application.For simple information requests we have identi-fied two important concepts, termed Objects andProperties (JSnsson, 1997) where Objects modelsthe set of objects in the database and Proper-ties denotes a complex predicate ascribed to thisset.
The parameters Objects and Properties axeapplication dependent.
We also utilise Markers forvarious purposes (J5nsson and StrSmb~ck, 1998),but they will not be further discussed in this pa-per.
Structures that represent information aboutobjects and properties (and markers) are termedOPMs.
Figure 3 shows an example OPM whichrepresents the request Which bus lines passes theNorth gate ?.For complex requests the Dialogue Managerneeds an information structure that holds the pa-rameters needed before successful access of thebackground system can be performed.
We callsuch structures Information Specification Forms(ISFs) (Dahlb~ck and JSnsson, 1999).
Just likeOPMs the ISFs are application dependent and be-Obj : #1 \[ BusIine : ?
\]#2\ [  Stop: North gate \]Prop : PassesBy : Stop ~2Figure 3: An OPM for the utterance Which buslines passes the North gate?.sides holding information they are also used as sys-tem task models, i.e.
to inform the Dialogue Man-ager which parameters that has to be provided bythe user.
We have identified a number of differ-ent user information eeds (Qvarfordt, 1998) forwhich ISFs are needed.
The most common, calledtrip information, occurs when the user needs toknow how and when on a particular day, most of-ten the present day, one can travel from one pointto another in town by bus.
An ISF for such re-quests model information on departure and arrivaldestinations and information on arrival and/or de-parture time, which is required information.
Theuser can also give information about the traveltype, but this is optional.
Figure 4 shows an emp-ty Trip ISF.Type : TripArt  : req.Dep : req.TT ime : req.TType : opt.Figure 4: An empty trip ISF.Another common information eed, called routeinformation, is when the caller wants informationon which busses or trains that go from one pointto another.
This ISF is similar to the Trip ISFbut time information is no longer required.For the time-table information application bothstructures, ISF and OPM, are needed.
This is notthe case for all types of applications but we believethat if an ISF is needed an OPM can also oftenbe useful.4.2 The  Dom~;~ Knowledge ManagerThe domain knowledge sources and applicationsystems in MALIN are implemented as agents andwill from now on be called domain agents.
Do-main agents provide different services, typically toretrieve and reason about some information giv-en some parameters, and can also request servicesfrom each other.
Communication and cooperationamong the agents are achieved by passing mes-sages.125Agent ServiceSpatial Reasoning Agent getBusStops(From.BusStop, From.Place, From.Street, From.Area,From.Town, FromBusStops)Spatial Reasoning Agent getBusStops(To.BusStop, To.Place, To.Street, To.Area, To.Town,ToBusStops)Temporal Reasoning Agent getTime(TTime.Time, TravelTime)Timetable Agent getTrips(FromBusStops, ToBusStops, TravelTime)Figure 5: An ex~nple of an uninstantiated recipe for trip information.UI: I want to go to the city cem;er.$2: The city center is a big area.
Can you point in the map or give more specific information likea landmark or a street?U3: Are there any bus stops near the Garden square?$4: There are several bus stops near the Garden square.< Shows the bus stops in ti~e map >U5: Then I want to go there from the University.$6: When do you want to go?UT: On the 31st of April before lunch.$8: The 31st is not a valid date:, there are only 30 days in April.
Give a new date please.U9: The 30th of April.S10: The alternative trips are shown in the table.< Shows a table of  trips >Figure 6: A hypothetical dialogue with the MALIN dialogue system for a local bus time-table informationapplication.
The dialogue is constructed based on a corpus of 43 dialogues collected with users of thecurrent information service in order to illustrate some of the features of the dialogue and domainknowledge managers and our multi-modal system.In the application of MALIN "tO time-table in-formation, four different domain agents are used,see figure 2.
The Temporal Reasoning Agent con-tain~ a calendar and reasons about temporal ex-pressions.
The Spatial Reasoning Agent utilisesa Geographical Information System and reason-ing mechanism used to deduce the relations be-tween geographical objects (Flycht-Eriksson andJSnsson, 1998).
The Timetable Agent retrievestime-table information for local bus and train traf-fic from an Internet source.
There is also a Sys-tem Information Agent which provides ystem in-formation like references to human operators forquestions outside the scope of thne-table informa-tion.The processing of a request performed by theDomain Knowledge Manager is based on a knowl-edge structure called recipe.
A recipe is applica-tion specific and consists of a series of service callsfrom different agents, which are executed in orderto construct an answer to a specific request, seefigure 5 for an example.
Domain Knowledge Man-agement in general involves three steps.
First theDomain Knowledge Manager has to decide howto treat the request, i.e.
to produce one or morerecipes.
In most cases one recipe is enough, butsometimes the user has provided ambiguous infor-mation that cannot be resolved by the interpreteror the Dialogue Manager, in which cases severalrecipes are needed.
The next step is to processthe recipe(s).
The processing must be carefullymonitored and aborted if an error occurs.
Final-ly, alternatives must be inspected and integratedinto one answer that can be sent back to the Di-alogue Manager.
For more details on the DomainKnowledge Manager, see Flycht-Eriksson (2000).4.3 Communicat ion  between DM andDKMTo illustrate how the Dialogue Manager (DM) andthe Domain Knowledge Manager (DKM) coop-erates in processing of requests and handling ofclarifications, consider the hypothetical dialogueshown in figure 6.
The dialogue tree in figure 7shows the resulting structure of the dialogue.The first utterance, U1, initiates a trip ISF.
In-formation about the arrival location provided bythe user is inserted in the ISF in the field Art,126DIR1U1 IR2IR3U3 $4IR4 IR5 S10S6 U7 S8 U9Figure 7: The dialogue tree resulting from the dialogue in figure 6.which results in the structure presented in figure 8included in IR1 in the dialogue tree.
The ISF indi-cates that information about the departure placeand time has to be further specified by the userby the marker req in the fields Dep and TTime(TravelThne).Type : TripArt : \[ Area :Dep : req.TTime : req.TType : opt.City center \]Figure 8: The ISF in IR1 after processing of U1.However, before continuing the dialogue andasking the user for the information that is miss-ing in the ISF, the DM asks the DKM to validatethe provided values.
This validation is performedin order to detect vague or erroneous informationthat might have been given by the user.The arrival ocation in a trip ISF will be used tofind suitable bus stops that can be used to searchthe time-table database.
The validation of thearrival ocation therefore means that the SpatialReasoning Agent tries to map the location to asmall set of bus stops.
In this case it discoversthat Area: City Centre is a too vague descriptionsince it corresponds totoo many stops, in our casemore than 5 stops.
The DM is informed of this andis also given the information that more specificinformation like a point, a landmark or a street isrequired, figure 9.
Thus, the user will not be askedto provide the value of another parameter since itwould be an implicit confirmation that the arrivalplace is correct, instead a new IR-unit, IR2 in thedialogue tree, is created and a clarification, $2, isinitiated based on the information from the DKMthat indicates the problematic tem, the type ofproblem, and a possible solution to the problem.Status :Item :Type :Solution :Error 1 Area : City center \]TooMany : BusStops\[ U : 5\ ] \ ] \ ]SpecInfo : (Point,Landmark,Street)Figure 9: The response from the DKM to the do-main validation of the arrival ocation.Instead of answering the system's question theuser takes the initiative by requesting new infor-mation, U3.
This request results in a new m-unit,IR3, to be inserted in the dialogue tree as a clar-ification of the system's clarification in IR2, asshown in figure 7.
The utterance is a simple re-quest and the DM utilises an OPM to model this,figure 10.Oh j :Prop :#l iS t?p :  ?
\] \] #2 Landmark : Garden \]square JNear : Place2 :Figure 10: The OPM in IR3 after processing ofU3.To answer this request means reasoning aboutspatial relations between geographical objects.The request is therefore sent to the DKM whichasks the Spatial Reasoning Agent for information.The request is successfully processed and somenearby bus stops are found and sent back to theDM utilising the structure in figure 11.
The DMcan then ask the generator to present them to theuser, $4.127Status :Stops:Su~es8Name:Id :Name:Id :Name:Id :Cen~.~rum \] "Snickareg.
301268Linnegatan \]1220 J~Stora forget \[450 JFigure 11: The response from the DKM to theOPM in IR3.The user responds to this answer by confirminghis departure location, U5, and thereby respondsto the request $2 of IR2.
He also provides anarrival location.
This new information is repre-sented in the OPM of IR2, figure 12.Oh j :Prop :a mark  ?r enl \] sqr#2 Landmark : University \]A r t  : #1 \]Dep : #2 \]Figure 12: The OPM in II:t2 after processing ofU5.The DM resumes processing of the ISF in IR1and updates it with the arrival and departure loca-tion based on the information i  the OPM of IR2.Information about the arrival ocation is added tothe previously provided information in the fieldArt.
The new information about the departurelocation is inserted in the field Dep, yielding thestructure in figure 13.Type : Tr ipt Area : A r t  : Landmark :Dep : Landmark :TT ime : req.TType : opt.City center \]Garden squareUniversity \]Figure 13: The ISF in IR1 after updates with in-formation from the subtree in IR2.Again the DM asks the DKM for domain val-idation of the partially specified ISF.
Since bothlocations can be mapped to a limited number ofbus stops the ISF is approved by the DKM.
TheDM now needs to have a time to complete theISF, and consequently a new IR-unit, IR4 in thedialogue tree, is created and the user is, in utter-ance $6, asked for this.
The answer U7 is a validresponse to $6 and produces a new OPM, see fig-ure 14.Oh j:Prop :Figure 14:U7.Day :Date : Month :#1POD :T ime : Mod :\[ TTime: #I \]31AprillunchbeforeThe OPM in IR4 after processing ofThe new information from IR4 is then insertedas TTime in the ISF of IR1.
This results in a fullyspecified Trip ISF, figure 15.Type :Art :Dep :TT ime :TType :TripArea : City centerLandmark : Garden squareLandmark : University \].
\[ Day : 31 "/~a~e : L Month:  April 1~.
| POD:  lunch I1,me: \[ Mod : before \]opt.Figure 15: The ISF of 1R1 after updates with in-formation from IR4.The ISF is again sent to the DKM for valida-tion.
When the Temporal Reasoning Agent triesto map the temporal description in TTime to aformat suitable for time-table database search itdiscovers the erroneous date.
The DKM then re-turns a response, figure 16, to the DM informing itof the error.
The DM initiates a new clarificationIR-unit, IR5, and a clarification is formulated, $8.Status : ErrorI tem : Date : Month : AprilType : NotVal id : Up : 30Solution : Spec lnfo  : {Date} \]Figure 16: The response from the DKM to thedomain validation of the time description.The user responds to the system's clarificationrequest and provides a new date, ug.
The re-sponse is modelled in an OPM in IR5, figure 17.\[ I I oo : 30 Obj : #1  Date  : Month  : Apr i lP rop :  \[ TT ime : ~1 \]Figure 17: The OPM of ItL5 after U9.128The information i the clarification request IR-unit, IR5, is propagated tothe ISF of IR1 which isupdated.
This time the new information replacesthe old in -VTime since it was erroneous.
The re-sulting ISF is presented in figure 18.Type :Art  :Dep :TTimc :Time :TType :Tr/pArea : Citycenter \]Landmark : Gardensquare JLandmark : University \].
r Day  : 30 " / 1lJa~e: \[ Month: April J JPOD: lunch \]Mod : before J opt.Figure 18: The ISF of IR1 after integration withthe information i  IR5.Once more a validation of the ISF is performedby the DKM.
This time no problems are detectedand a search for suitable trips can fmaUy be done.The DKM does this by first asking the SpatialReasoning Agent to map the departure and arrivallocations to two sets of bus stops, then asking theTemporal Reasoning Agent o map the vague tem-poral description to a precise time interval.
Giventhis information the DKM then searches the time-table database to find one or more trips that ful-fill the requirements.
The resulting trips are sentback to the DM and displayed to the user, S10.4.4 Implementat ionThe MALIN dialogue system customised for thetraffic information application is currently un-der development.
The Dialogue Manager fromthe LINLIN dialogue system architecture has beenadapted to allow also ISFs and we are currentlyspecifying the dialogue grammar and how to han-dle focus tracking utilising ISFs and OPMs at thesame time.The Domain Knowledge Manager is function-al utilising a Spatial Reasoner for one sub-areaof OstergStland and a Temporal Reasoner.
TheTimetable Agent retrieves trip information ~omthe current Internet based timetables.
Recipesare developed for accessing these modules, but theSystem and Help Information knowledge source isnot yet implemented.5 Conclusions and future workIn this paper we have presented an architecturefor dialogue systems where a Domain KnowledgeManager and a Dialogue Manager cooperate toachieve natural interaction.
Information provid-ing dialogue systems based on this architecturecan handle a variety of requests; imple and com-plex concerning the domain, and requests for sys-tem related information.Separating domain knowledge reasoning fromdialogue and task knowledge reasoning has a num-ber of advantages.
First of all, it is clearer whatthe responsibilities and possibilities of the differ-ent modules are, e.g.
the dialogue manager han-dles the dialogue and not domain reasoning.
Fur-thermore, it facilitates customisation to new ap-plication domains.
Another important feature isthat domain knowledge sources can easily be re-placed, added, removed, and reused.
This impliesthat a system can be made more intelligent byadding new domain agents without changing thedialogue and task models.Future challenges are to apply the proposed ar-chitecture, utilising a Domain Knowledge Manag-er, to other domains and types of dialogue sys-tems, such as advisory or tutoring systems.
Forsuch systems other knowledge sources like usermodels and argumentation models are relevantand have to be incorporated in the system archi-tecture.6 AcknowledgmentsThis work is supported by The Swedish Transport& Communications Research Board (KFB) andthe Center for Industrial Information Technology(CENIIT).
We are indebted to Lars Degerstedt,H~tk~n Johansson and Lena Santamarta for fruit-ful discussions.Re ferencesJohn Aberdeen, Sam Bayer, Sasha Caskey,Lauire Damianos, Alan Goldschen, LynetteHirschman, Dan Loehr, and Hugo Trappe.1999.
Implementing practical dialogue sys-tems with the DARPA communicator architec-ture.
In Proceedings of IJCAI'g9 Workshop onKnowledge and Reasoning in Practical DialogueSystems, August, Stockholm.Lars Ahrenberg, Arne J5nsson, and NtisDahlbiick.
1990.
Discourse representationand discourse management for natural lan-guage interfaces.
In Proceedings of the SecondNordic Conference on Text Comprehension iMan and Machine, T~by, Sweden.Jan Alexandersson a d Norbert Reithinger.
1995.Designing the dialogue component in a speechtranslation system.
In Proceedings of theNinth Twente Workshop on Language Technol-ogy (TWLT-9), pages 35--43.129S.
Bennacef, L. Devillers, S. Rosset, and L. Lamel.1996.
Dialog in the RAILTEL telephone-basedsystem.
In Proceedings of Inliernational Con-ference on Spoken Language Processing, IC-SLP'g6, volume 1, pages 550-553, Philadelphia,USA, October.Harry C. Bunt.
1989.
Information dialoguesas communicative action in relation to part-ner modelling and information processing.
InM.
M. Taylor, F. N~el, and D. G. Bouwhuis,editors, The Structure of Multimodal Dialogue,pages 47-73.
Elsevier Science Publishers B.V.(North-Holland).Nils Dahlb$ck and Arue JSusson.
1999.
Knowl-edge sources in spoken dialogue systems.
InProceedings of Eurospeeeh'99, Budapest, Hun-gary.Nils Dahlb~ck.
1991.
Representations of Dis-course, Cognitive and Computational Aspects.Ph.D.
thesis, LinkSping University.George Ferguson, James Allen, and Brad Miller.1996.
TRAINS-95: Towards a mixed-initiativeplanning assistant.
In Proceedings of the ThirdConference on Artificial Intelligence PlanningSystems, AIPS-96, pages 70-77.Armika Flycht-Eriksson and Arne JSnsson.
1998.A spoken dialogue system utilizing spatial infor-mation.
In Proceedings of International Con-ference on Spoken Language Processing, IC-SLP'98, page 1207, Sydney, Australia.Annika Flycht-Eriksson.
1999.
A survey of knowl-edge sources in dialogue systems.
In Proceed-ings of IJCAI'g9 workshop on Knowledge andReasoning in Practical Dialogue Systems, Au-gust, Stockholm, pages 41--48.Annika Flycht-Eriksson.
2000.
A domain knowl-edge manager for dialogue systems.
In Proceed-ings of the 1,~th European Conference on Arti-ficial Intelligence, ECAI 2000.
IOS Press, Am-sterdam.Barbara J. Grosz and Candace L. Sidner.
1986.Attention, intention and the structure of dis-course.
Computational Linguistics, 12(3):175-204.Eli Hagen.
1999.
An approach to mi<ed initia-tive spoken information retrieval dialogue.
Us-er modeling and User-Adapted Interaction, 9(1-2):167-213.Philip J. Hayes and D. Raj Reddy.
1983.
Stepstoward graceful interaction i  spoken and writ-ten man-machine communication.
I ternation-al Journal of Man-Machine Studies, 19:231-284.Arne JSnsson and Lena Str5mb~ick.
1998.
Ro-bust interaction through partial interpretationand dialogue management.
In Proceedings ofColing/A CL '98, Montrdal.Arue J5nsson.
1997.
A model for habitable andefficient dialogue management for natural an-guage interaction.
Natural Language Engineer-ing, 3(2/3):103-122.Lynn Lambert and Sandra Carberry.
1991.
Atripartite plan-based model of dialogue.
In Pro-ceedings of the 29th Annual Meeting of the A CL,Berkeley, pages 193-200.David L. Martin, Adam J. Cheyer, and Douglas B.Moran.
1999.
The open agent architecture:A framework for building distributed softwaresystems.
Applied Artificial Intelligence, 13(1-2):91-128, January-March.Peruilla Qvaffordt.
1998.
Usability of multi-modal timetables: Effects of different levels ofdomain knowledge on usability.
Master's thesis,LinkSping University.Lance A. Ramshaw.
1991.
A three-level model forplan exploration.
In Proceedings of the 29th An-nual Meeting of the A CL, Berkeley, pages 39-46.Adelheit Stein, Jon Atle Gulla, and Ulrich Thiel.1999.
User-tailored planning of mixed initiativeinformation-seeking dialogues.
User Modelingand User-Adapted Interaction, (9):133-166.Wire van Loo and Harry Bego.
1993.
Agent tasksand dialogue management.
In Workshop onPragmaties in Dialogue, The XIV:th Scandina-vian Conference of Linguistics and the VIII:thConference of Nordic and General Linguistics,GSteborg, Sweden.Wolfgang Wahlster and Alfred Kobsa.
1989.
Usermodels in dialog systems.
In User Models inDialog Systems.
Springer-Verlag.130
