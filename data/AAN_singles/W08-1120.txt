Building a Large-scale Commercial NLG System for an EMRMary Dee HarrisCatalis, Inc.7801 N. Capital of Texas Hwy., Ste.
260Austin, TX 78731mdharris@thecatalis.comAbstractNatural language generation technology ismature enough for implementing an NLG sys-tem in a commercial environment, but the cir-cumstances differ significantly from buildinga research system.
This paper describes thechallenges and rewards of building a commer-cial NLG component for an electronic medicalrecords system.
While the resulting NLG sys-tem has been successfully completed, the pathto that success could have been somewhatsmoother knowing the issues in advance.1 IntroductionIn 2002 I was hired by a small start-up company toadd narrative generation to their electronic medicalrecords (EMR) system under development.
Aftersix months, we had a first-cut system producingnarrative based on a doctor's selection of itemsfrom the graphical interface during an encounterwith a patient.
This paper describes the rewardsand challenges of building such a system in acommercial environment, in hopes the lessons Ilearned can contribute to successful future com-mercial systems for natural language generation.The company has always been funded by invest-ment money with some recent revenue income.The founders were both medical doctors, with littlecorporate experience and even less knowledge oftechnology.
They had the vision; the rest of us didthe work.
The company's product is a general-purpose EMR system on a tablet PC with hand-writing recognition and extensive graphical repre-sentation of human anatomy.
Its foundation is anelaborate database of medical content, outliningspecific requirements for information collection.Much of this medical information is arranged intemplates, one for each complaint.
When a patientcomes into the doctor's office complaining of chestpains, the template for Chest Pain provides the ap-propriate selections for the doctor to record perti-nent information related to that condition.
Otherparts of the system deal with physical examina-tions, procedures, prescription of medication, or-ders for lab tests and procedures, and so on.My mission was to implement a narrative genera-tion system to record the doctor/patient encounter,following the traditional narrative created by thedoctor's dictation, which is then transcribed into anarrative.
These narratives serve as a legal recordof the encounter and are used in court in malprac-tice suits.
Thus the narrative is an extremely im-portant part of the patient record and must becomplete and accurate.
Otherwise the doctor ?
andour company ?
could be liable for malpractice.2 ChallengesThe challenges of designing the narrative systemwere many.
The narrative must be completelyaccurate to avoid liability.
While the initial targetswere small practices and clinics, the system wouldexpand into larger clinics and hospitals.
So thesystem had to be scalable.
The scope of the projectalso had to be scalable.
Beginning with hundredsof medical templates often with multiple names,157there are now thousands for many specialties withdifferent requirements for format and style.Another challenge was the na?vet?
of the companyand its staff.
The CEO had a grand vision, but lit-tle concept of the technology for language genera-tion.
He believed the automated narrative waspossible, but there was little understanding of theextent of commitment of staff, time, and money forbuilding such a system.One less obvious challenge is the difference be-tween research and commercial applications.
Ourlimited finances allowed us few available commer-cial products.
However, the freely available re-sources that academics rely on were usuallyavailable only for research.
In our field of healthcare technology, the UMLS was the primary re-source available to us.
The Unified Medical Li-brary System1 developed at the National Library ofMedicine has resources which include a medically-oriented dictionary of English called SPECIALISTand  tools to access it, a semantic network relatedto health care, and a Metathesaurus -- "a verylarge, multi-purpose, and multi-lingual vocabularydatabase that contains information about biomedi-cal and health related concepts, their variousnames, and the relationships among them."
Thislack of resources was a mixed blessing:  all ourtools and program components belong to the com-pany with no financial or licensing strings at-tached.One usual way to start any NLP project is to ac-quire a large sample of the texts to be processed.However because of privacy issues, we had no"live" data representing medical narratives.
Thetwo doctors wrote some imaginary scenarios toserve as samples and provided feedback on ourguesses of what the medical language should be.So the project started with no outside resources,little support, no samples, but a lot of enthusiasm.3 Plan of AttackDespite the challenges, I knew NLG technologywould be able to fulfill the requirements for thisapplication so the planning began.
The originalidea was to follow a standard development model:1  http://www.nlm.nih.gov/research/umls/proof-of-concept (POC) system, prototype, andproduction system.
The POC would have simplesentences and a restricted vocabulary, but enoughto convince the company that the technology couldprovide a feasible solution.
The prototype wouldextend the capability, adding a  grammar and amore extensive vocabulary as well as being robustenough to handle more data.
The POC was built inabout six months with a Java developer assistingme with the design ?
it sounded like a secondgrader had written the narrative, but it was accurateand proved that we could do it.The prototype never got built due to managementdecisions and some bad luck.
We had no internalstaff to devote to the task.
To make matters morecomplicated, Steve Shipman, the original Java de-veloper who knew some computational linguistics,was replaced by a developer with no real knack forlinguistics whose  English was a second language.I had to teach him the linguistic terminology andthe language structures before he could write thecode to handle them.The next problem arose when the management sawthe narrative output -- simple as it was -- and im-mediately started adding templates for us to han-dle.
Despite my protests that it wasn't ready fordeployment, we had to add additional features suchas aggregation and negation to this simple-mindedversion.
It took several years before we got the go-ahead to write the full-blown system, by whichtime we had several thousand templates in the sys-tem.
We finally spent six months on the new sys-tem, followed by nearly a year of testing.
Becausethe POC had been put into production, we had toestablish a dual model that ran both old and newversions.
We are still trying to get al the originalparts converted to work on the full-blown produc-tion system so we can eliminate the POC section.4 System ArchitectureThe architecture of the Narrative Engine followedthe basic design described in Reiter and Dale(2000) for an NLG system, with adaptations to fitour data model.
Because the narrative output hadto be so accurate and the style so sophisticated tosatisfy the physician client base, I doubted thatcompletely automated generation would be suffi-158cient.
So following the lead of machine transla-tion, I chose to implement human-assisted com-puter generation.
That seemed the onlyappropriate approach, used similarly by CoGenTexin their Exemplars method (White and Caldwell,1998).
We considered using Exemplars, but theyare Java-based which was not appropriate for oursituation.
Most of our NLG staff didn't know Javasince we hired liberal arts and linguistics majors.We developed a plan language called Linguo, afterLisa Simpson's robot by that name.
Linguo helpsus write plans to describe the translation frommedical findings for a particular patient into ap-propriate medical language for an encounter.
Theplan writers select the predicate best suited foreach finding in a template.
That predicate thendetermines the semantic structure, followingJackendoff (1990; 1991).
These plans are general-ized to handle many similar findings, rather thanbeing a one-to-one translation.
The basic designfor the Narrative Engine held up well through thevarious implementations, with only minor adjust-ments required.
2Figure 1  Architecture of Narrative Engine5  Proof of ConceptThe initial POC was string-based, for speed of de-velopment ?
a decision I would come to regret, butprobably necessary to get the project underway.The POC system had no separate grammar, buthandled syntactic and morphological issues in the2 This paper does not detail the technology specifically as it isproprietary.
The company has patent applications pending formuch of the design.
This is another important contrast withthe research community where sharing ideas is the norm.code.
We created two XML files for the transla-tion into English:  predicate templates and clausetemplates.
The predicate templates define the se-mantic roles for each predicate in our restrictedvocabulary, while the clause templates match thesemantic forms to syntactic structures.
The finalstage of processing was the Sentence Realizer thatconverted the syntactic structures into English.The Narrative Engine was a separate module in theapplication that received medical findings (the in-dividual items that the doctor selected) and thatoutput English text to the application for the note.5 Commercial DevelopmentThe commercial version of the Narrative Enginewas called Component-Based Processing (CBP) todistinguish it from the string-based POC.
We nowhad two lexicons:  a semantic one containing thefinding names for all the medical templates and theUMLS SPECIALIST syntactic lexicon.
We addedbracketed forms to specify language structures foreach finding name, to go with the basic syntacticinformation.
For example, the phrase "the rightshoulder" would be represented as  [np [det the][adjright][n shoulder]].
We hired a computational lexi-cographer, Ken Litkowski, to help produce thebracketed forms for the 60,000 plus entries.
Creat-ing these forms was not trivial since the findingphrases vary from a single word to a complex nounphrase to a complete clause.Using the bracketed forms allowed us to extendour aggregation capability to a linguistically solidmethod of analyzing the component structure toidentify corresponding parts to coordinate.
Wealso added a means for asymmetric aggregation,known as hypotactic aggregation (Shaw, 2002).Besides being able to coordinate similar items, asThe patient described the pain as sharp and throbbing,we can now combine dissimilar findings, as inThe skin was closed with 14  2-0 monofilament suturesusing continuous stitch.One major addition to the Narrative Engine wasthe syntactic grammar set up as a properties fileallowing modification of the grammar withoutcode changes.
We can test new features easily and159try extensions to the language with no impact onthe overall system.
The clause templates used inthe POC were replaced with verb templates sincemuch of that work was now handled by the gram-mar.
Verb templates describe the alternation pat-terns (Levin, 1993) and include the irregular forms.Another change was the integration of the narrativeprocess into the application more completely.
Thisintegration was not simply a code change, but achange in perception of the project as a whole.The company came to understand that adding thenarrative capability had increased the value of theEMR in the marketplace.
At this time, ours is theonly EMR with real natural language generation,not handled by templates or canned text.6 RecommendationsMany of the choices made during development ofthis system would be changed, if I had the luxuryof starting over.
I would like to offer up somesuggestions for others to avoid the difficulties Ifaced.
Consider these ideas before you start.?
Educate your clients.
Your clients are mostlyin your own company.
Not everyone is goingto understand the importance of the work andthe need for resources or have the basic lin-guistic knowledge to comprehend the require-ments.
I gave many tutorials to help our staffunderstand what we were doing.?
Be clear about the costs of building the NLGsystem.
Your estimates will be wrong, almostby definition, but you have to start somewhere.Since the uninitiated cannot imagine the poten-tial until they see it, they will have many moreideas of how to apply the technology once theysee it, thus extending the requirements.
Hereagain, educate the company regarding the staffrequirements (developers, linguists, quality as-surance, marketing) and the training needed tomake them productive.
Consider the data de-velopment requirements as well as the coding.?
Be careful how you plan out the developmentstages.
A proof-of-concept system is a greatidea to demonstrate that the technology is fea-sible, but it is tempting to take it and run withit.
You need to build the system in stages, butmake sure the staging is spelled out in advancewith an understanding from management ofthe process.?
Deployment and customer acceptance is thegoal, not completion of the code.
We foundthat the customers were gratified by the abilityto eliminate the dictation and transcriptionprocess, but they do have opinions about thewording sometimes.
We work with specialiststo develop the medical templates and the narra-tive before we implement.?
Remember that a commercial system is notcutting-edge technology, no matter what man-agement thinks.
A commercial system shoulduse time-proven, reliable methods robustenough for inevitable modifications.
Somefeatures will be untested, but the basic founda-tion of the system must be reliable.?
Make sure you have the funding to completethe project.
A champion within the companycan help fight your battles.None of these recommendations should precludeanyone from trying to build a large-scale commer-cial product, but knowing in advance where thepitfalls lie can ease the process.
It takes more thana good idea and a knowledge of the technology tomake it work, but the effort can be worthwhile inthe end.
The language component of our EMRsystem has helped doctors increase their ability tosee more patients by reducing the time required totake notes, dictate them, and pay for their tran-scription.
So the doctors appreciate the automatednarrative capability even though they have no ideahow it is accomplished.ReferencesRay Jackendoff.
1990.
Semantic Structures.
MIT Press.Ray Jackendoff.
1991.
Parts and Boundaries.
Lexicaland Conceptual Structures.
Blackwell.Beth Levin.
1993.
English Verb Classes and Alterna-tions:  A Preliminary Investigation.
University ofChicago Press.Ehud Reiter and Robert Dale.
2000.
Building NaturalLanguage Generation Systems.
Cambridge Univer-sity Press.James C. Shaw.
Clause Aggregation.
Dissertation,Columbia University.
2002.Michael White and Ted Caldwell.
1998.
Exemplars:Practical, Extensible Framework for Dynamic TextGeneration.
Proceedings of the Ninth InternationalWorkshop on Natural Language Generation.160
