On Underspecif ied Processing of Dynamic SemanticsAlexander Keller, Joachim NiehrenUniversity of the Saarland, Saarbriicken, Germany{koller@coli I niehren@ps}, uni-sb, deAbstractWe propose a new inference system which oper-ales on underspecified semantic representationsof scope and anaphora.
This system exploitsanaphoric accessibility conditions from dynamicselnantics to disambiguate scope ambiguities ifpossible.
The main feature of the system isthat it deals with underspecified descriptions di-rectly, i.e.
without enumeratlng readings.1 IntroductionA particularly appealing aspect of lmdersl)eci-fication (van Deemter and Peters, 1996; Reyle,1993; Muskens, 1995; Pinkal, 1996; Bos, 1996)is that it can in principle deal very efficientlywith local ambiguit ies - ambiguities which areonly due to lack of inibrmation at an interme-diate stage of processing and go away by theend of the analysis.
An example for this effectis (1): The scope ambiguity that is perceivedalter processing the first sentence is no longerpresent after the second one.
This effect canbe explained in a framework of dynamic selnan-tics (Groelmndijk and Stokhof, 1991; Kamp andReyle, 1993) by the fact that a wide-scope uni-versal quantifier would make the indefinite inac-cessible for anaphoric reference from the secondsei/tence.
(1) Every man loves a woman.Her nanle is Mary.In this paper, we show how this particulartype of local ambiguity can be processed effi-ciently.
The approach we propose mploys de-terministic inference rules that can exclude thereadings which violate anaphoric accessibilityconditions without enlnnerating them.
Theserules operate directly on underspecified descrip-tions and fully maintain underspecifiedness.
Wealso show how this behaviour Call be capturedby constraint propagation i an existing imple-mentation of tree descriptions using finite setconstraints (Duchier and Niehren, 2000; Kellerand Niehren, 2000; Duchier and Gardent, 1999).More specifically, we introduce DPL struc-tuT"cs~ extended trce structures that encode for-mulas of dynamic predicate logic (DPL) in muchthe same way as Egg et al's (1998) lambdastructnres encode A-terms.
Then we define aconstraint language tbr the description of DPLstructures, called CL(DPL), in analogy to Egget al's constraint langague for lambda struc-tures (CLLS).
We characterize those DPL struc-tures in which all restrictions oil anaphoric ac-cessibility are obeyed by talking directly aboutthe syntactic structure of a DPL formula.
Thisis ill contrast o the standard procedure in dy-nanfic semantics, where the dynamic behaviouris produced by the semantics of the logic; we donot need to (and do not) talk about interpreta-tion of DPL structures and model accessibilityby purely "static" means.The paper is structured as follows.
In Sec-tion 2, we introduce DPL structures and treedescrit)tions in the language CL(DPL).
In Sec-tion 3, we add syntactic restrictions on admis-sible variable bindings to DPL structures andpresent axioms that characterize these restric-tions.
In Section 4:, we turn these axioms intodeterministic nfhrence rules and combine themwith deterministic inference rules known froman existing ilfference algorithm for dominanceconstraints.
We obtain a procedure that can dothe kind of underspccified reasoning describedabove without enmncrating readings.
In Section5, we sketch all imtflelnentation f our inf'erencesystem based on finite set constraint prograln-ming.
This implementation can be obtained byadapting an existing ilnI)lelnentation f a solverfor dominance constraints.
Finally, we concludeand point to further work in Section 6.2 Tree Descr ipt ionsIn this section, we define the Constraint Lan-guage tbr DPL structures, CL(DPL), a lan-guage of tree descriptions which conserw~tivelyextends donfinance constraints (Marcus et al,1983; Rainbow et al, 1995; Keller et al, 2000)by variable binding constraints.
CL(DPL) isa close relative of the Constraint Language for460Lamb(la Structures (CLLS), 1)resented in (Egget al, 1998).
It; is interl)reted over DPL struc-tures - trees extended by a variable 1)indingfunction which can be used to encode tbrmulasof dynamic (or static) predicate logic.
We willdefine DPL structures in two steps and then thelanguage to talk al)out them.2.1 Tree St rueturesFor the definitions below, we assulne a signatureY\] = {(~12, varl0,Vl~,~ll,Al.z, manll , likel2,... } ofnode labels, each of which is equipped with afixed arity n _> 0.
The labels A,_~,_V,... are the.tirst-order commctives.
Node lal)els are.
rangedover by f, g, a, b, and the arity of a lal)el f isdenoted by ar(./'); i.e.
if J'l,~ C E then ar(f) = n.Let N l)e the set; of natural numbers ~.
> 1.As usual, we write N* tbr the set of words overN, C for the elnl)ty word, and 7r~-' for the con-catellatioll of two words 7r, 7r t C N*.
A wor(t 7t isa prefiz of 7c' (written rc _< re') if there is a word7r u such  that  7rTr tt = 7r t.A node of a tree is the word rr E N* whichaddresses the node.
The empty word e C N*is called the root node.
A tree domain A is anonempty, t)refixed-closed subset of N* which isclosed under the left-sil)ling relation.Def in i t ion  2.1 A t ree s t r l l c t i l re  iS a t'a\])l(:(A,  c,) consisting of a finite, tree dmn, ain A anda total labeling t'unction co ?
: A -+ E s'ach th, al,for all rr 6 A and i G N:c A 1 < i <We say that the nodes r 6 rcl , .
.
.
,  7c~ m'e in thelabeling ,'elationsh/ip 7c: J' On , .
.
.
,  7r,~) ill!
a (Tr) = J'and tbr each 1 < i < n, ~-i = ~-i.
Similarly, wesay that a node ~c properly dom, inatcs a node7c' and write 7r<\]+rc ' iffrr is a proper prefix of7c'.
We take Ir and It' to be disjoint (~r J_ ~r') ifttley are different and neither node dominatesthe other.
So any two nodes in a tree structureare in one of the four relations = (equality), <1 +,~>+ (the inverse of <1+), or _L.
We shall ~lso t)einterested the coml)inations of these l"elatiolls byset operators: intersection, coml)lementation ,union, and inversion.
For instance, the dom-inance relation <~* is detined as the union ofnode equality and proper dominance = U<1 +.Finally, we detine the ternary non-interventionrelation ~(Tr<l*Td<Frc") to hold ifl' it is not thecase that 1)oth ~r < ~r' and ~r' < re"..' ~rvar  a ~ma0 \lovar  ?
var  t r  var - .Figm'e 1: I)PL structure tbr the meaning of (1).2.2 DPL  s t ruc turesNow we extend tree structures by variablebinding and obtain DPL structures.
To thisend, we I)artition E into three sets: connee-tive.s Econ = {V_,A,_%...}, predicate symbolsEpred = {man, likes,...}, and tcr'm symbolsEre,., .
= {var, peter, mother_of,...} which sub-stone, the variable symbol var and fimction sym-1)ols.Def in i t ion  2.2 A DPL structure is a triple(A,c&A) con.~isting of a trcc structure.
(A,c,)and a partial varial)le t)inding flmction A : AA which sati.sfies for all % ~r t ~ A:1. the .
< r.co,, u .fo,.all 7ci C A;2.
< the,,,, fo,.all 7ci ~ A;I)PL structures can be used to re, present ibr-mulas of first-order predicate logic.
For in-stance, the DPL structure in Fig.
1 representsthe (unique) meaning of (1).
So far, however,variables bound by a quantifier do not need tobe in any special position in a DPL structure; inparticular, not in its scope.
To entbrce seepingas in static predicate logic, we could simpy addthe condition ~c'<~*~r in condition 3 of Definition2.2.
We will define an appropriate counterpart\]'or DPL in Section 3 (properness).Modeling variable binding with an explicitbinding flmction instead of variable nmnes wasfirst proposed in (Egg et al ,  1998) .
There, bind-ing flmctions heJp to avoid a capturing problemin the context of scope underspecitication whicht)ecomes most ~q)l)arent in the presence of ellip-sis.
Her(; the 1)inding flmction mainly gives us adifferent t)erspective on variable binding which461R : :=  <+1>+1 = I?I -*::= X: f (X \ ] , .
.
.
,X , , )  (fin C E)I xRzII\[ ~A~'.Figure 2: Syntax of CL(DPL)is useflfl for defining properness of DPL struc-tures.2.3 The Constraint Language CL(DPL)The syntax of CL(DPL) is defined in Fig-ure 2.
It provides constraints tbr all therelations discussed above.
There are label-ing constraints X: .
f (X~,.
.
.
,Xr~),  expressivecombinations XRY of dominance constraints'with set operators (Dtu:hier and Niehren,200(}; Cornell, 1994), non-intervention con-straints ~( X <1* Y <~* Z), and binding constraintsa(X)=Z.CL(DPL) is interpreted over DPL structures.A variable assignment into a DPL structure 54is a total flmction fi'om the set of variables of aconstraint o the domain of 54.
A pair (54, oz)of a DPL structure 54 and a variable assign-ment (t into 54 satisfies a constraint qo ifl' itsatisfies all of its atomic constraints; that is, ifthe relation with the same sylnbol holds of thenodes assigned to their arguments.
We also callthe pair (54, oz) a solution and Ad a model of ~o.Only some of the atonfic constraints inCL(DPL) are used in mlderspecified escrip-tions in t)articular, labeling, dominance, andbinding constraints; the other constraints arehelpful in processing the others.
These threetypes of constraints can be transparently dis-played in constraint graphs.
For instance, theconstraint graph ill Fig.
3 represents a con-straint describing the readings of example (1)including the scope ambiguity.
The nodes ofthe graph stand for variables in tile constraint;labels and solid edges represent labeling COl>straints, dotted edges, donlinance constraints,and dashed arrows, binding constraints, hi ad-dition, the constraint graph represents an in-equality constraint X-~=Y between each twovariables whose nodes carry a label.
A con-straint with the latter property is called overlap-free.
The intuition is that the solid-edge treefragments in the constraint graph must neveroverlap properly in a solution.3 Dynamic Semantics in CL(DPL)The semantics of DPL is built in a way thatallows quantifiers to bind only variables in cer-tain positions: inside their scopes and, if it is anexistential quantifier, from the left-hand sidesof conjunctions and implications into the right-hand sides.
In CL(DPL), we model this as apurely syntactic restriction on the accessibilityof binders which we define as a structural prop-erty of DPL structures.
DPL structures whichhave this property will be called proper.A useflll auxiliary concept tbr the definitionis that of an infimum of two nodes with respectto the dominance relation q*, which constitutesa lower senfilattice because of the underlyingtreeness of DPL structures.
Furthermore, wewill use the standard DPL notions of internallyv@" = {A,~} and ex- dynamic COlUlectives ~conte rna lh  d, static connect ives ~con'~stat = {2, V, __=::k, _V}.The semantics definition of DPL gives these twogroups special relevance tbr variable binding.Now we can define pTvper \])PL structures astbllows.Def in i t ion 3.1 A DPL structure 54 is calledproper '~f or each, node ~r of 54 on which ~ isdefined, one of th, e following cases holds truewh, ere p, is the i'nfimum of rc and A(TC).1.  ff = ;~(~), or2.
)@r) is labeled 'with ~_, ttl<l*.~(Tr), p,2q*% I tis labeled with art internally dynamic con-nective, and no node between ttl and A(Tc),inclusively, is labeled with an externallystatic connective.Intuitively, the first branch of the definitioucorresponds to usual binding of variables insidetile scope of a quanfifer.
In the second branch,the positions of the variable and the (existen-tial) quantifier in the DPL structure are dis-.joint, and the quantifier is dominated by tileleft child of the infimum.
Then the infimummust be labeled with an internally dynamic on-nective, and there must be no externally staticconnective between this node and the quantifier.This restriction is what we are going to exploit462, .
.
- ' 'r ,/?
/womb2',1% ..)...':'-\ , , '\vatFigure 3: Constraint graph for (1).to capture the influence 055 scope.
There is 51osuch restriction for the lmth 1)etwcen the inti-mmn and the w~riM)le.Sohll;ions of & constraint hnt violate the (ly-nmnie accessibility conditions are now excludedsilnply by restricting the, class of ~utmissible so-lutions to i)roper ones.
As exl)ected from thelinguistic intuition, only one sohd;ion of the nm-ning exmnple (1) is proper: the one where "awoman" is assigned wide scope (Fig.
1).
Tit(;other solution is not prot)er because the pathKern the infimum ((lellol;cd by Z0 in Fig.
3) tothe antecedent contains ;~ mfiversal qu~mtiticl".Prot )erness  o f  ;~ I)PI, sl;ruct;u5"(' ('t~sl I)(; ~tx io ln-atized synta,ctically: A \])PL sl;rucl;urc is 1)rot)eriff the CI~(I)I'I~)~xioms ( l )y , , \ ] ) to  ( l )yn4) inFig.
4 ~re, wflid over it.
The rule (Dynl) threesuniversM qmmtifiers to bind only variM)les intheir scopes, and the rules (l)yn2) to (Dyn4)enforce properness of binding when a wtrial)leis not in the scope of its binder.4 Underspec i f ied  Reason ingWe next present a procedure for mMorspeci-tied reasoning with dynmnic semmltics.
Th('goal is to narrow an mMerst)ecified (les(;rit)tionsuch that improi)er DPL-structure, s are removedflom the solution set.
Narrowing should applyas soon as possible, so unde, rspeciliedness (:~m be5naintmned and readings need not t)e enmner-ated.
We present ml intb, rence procedure tlmtcan do this and go through two exmnples.4.1 In fe rence  ProcedureThis infi;rence procedure ,s'atuvatt,.s a,constrMntttccording to the rules in Figures 4 and 5; thatis, whenever a constraint conttdns the lefl;-hmMside of a rule,, i t  adds il;s right-hand side, untilno new conjuncts ca, n 1)e ndded.
Fig.
4 containssimply the prot)erness axioms from the, l)revi-ous sections, turned into deterministic proofrules.
The rules in Pig.
5 are t)ropagation rulest'ronl Algorithm DO in (Duchier and Niehren,2000), plus new rules for non-intervention con-strainl;s. Algorithm DO contains some ~Mdi-tional rules, in I)ari;iculm' distribution rules thatperform case distinctions, because DO is a com-plete solver tbr dominance constraints with setoperators, wlfich improves on (Duchier and Oar-dent, 1999; Keller et M., 1998).
We have omit-ted the (listril)ution rules here l)e,(;ause we do'not wmlt to perform case distinctions; l)y ndding1;\]1(;115 ~tg~l, i l~ WC COll\]d ellll511era, I;e all proper so-lutions, ~:ls Schiehlen (1997) does tbr UDI1T.The new rules (NonI1) ~md (NonI2) Mlowto derive dominan(:e infbrmation from non-intervention constraints.
As we will see, themost interesting rule in Fig.
4 is (l)yn2),which derives explicit non-intervention i t'orma-lion fi'om the structurM t)roperLies of dynamic1)inding.
Note that while the rules in Fig.
5are sound over ;my DPL strucl;ure, those in Fig.4 are only serum eve5" proper DPL structures.This is intended: Application of a prot)ernessrule is s'upposcd to exclude (improper) solutions.4.2 ExamplesThe inii;rence rules go a long w:ty towards mak-ink tile eft'cot of dynamic seminal;its on scopee, xt)lieit.
Let us consider |;15(; running examplein Figure 3 to see how this works; we show howto derive Y3<I*X, which specifies the relativequantifier scope.First of all, we need to make the information463(Dynl)(Dyn2)(Dyn3)(Dyn4)a(x)=Y A Y:V(z') Y<*XZ(X)=Y A Z:f(Zl, Z2) A ZI<1*Y A Z2<\]*X A W:g(W1,..., Wn)~dyn ~st~tt ( fe  or,, e~(X)=Y A Z:f (Z1, .
.
.
,  Zn) A Zi<:1*X A Zj<:\]*Y --+ falseA(X)=Y A Z:f (Z1, .
.
.
,Zn)  A Zi<l*X A &<1*Y -~ falseFigure 4: Properness axioms.
(Trans)(Lab.Dom)(NegDisj)(Lab.Disj)(Inter)(Inv)(Child.down)(NegDom)(NonI1)(NonI2)X <a* Y A Y <q* Z -+ X <1* Zx: f ( .
.
.
,z , .
.
. )
x<+yX <1* Z A Y <F Z --+ X~ -L Y,xs,...)XR1Y A XR2Y -+ XRYXRY -+ YR-1X-+ -~(Z~ <*W<a*Y)v~dY'1 i ?
j) (.fl,, ~ Econ - ,-,co,,,(.fl,, e E, i < j)Xi ?
Xj where i < jif RINR2 C RX<:\]+Y A X:f(Xl,... ,Xn) AX-~ ?
Y A X J_Z -+ Z-~<a*Y-~(X<*Y<1*Z) A X<*Y  --+ Y~<*Z~(X<\]*Y<I*Z) A Y<*Z --," X-~<1*Y---> X i <F YFigure 5: Propagation rules for dominance and non-intervention constr~dnts.Z2<1*Za explicit by application of (Lab.Dom)and (Inter).
In this instance, (Inter) is used asa rule of weakening.
(Lab.Dom) Zg:A(Za, Z4) -~ Z,~<1+ Za(Inter) Z.~<Y'- Za --+ Z2<F Z3Now we can apply the rule (Dyn2) to the vari-able binding constraint A(Za) = Y (drawn inboldface in the graph) and the V labeling con-straint to derive a non-intervention constraint.
(Dyn2) Z0:A(Z:j, Z2) A ZI<1*X1 A X:V_(X1)A Z2<q*Za A A(Z3) = 1/All that is left to do is to make the positivedominance intbrmation contained in the newnon-intervention constraint explicit.
As theconstraint also contains Zo<1*X, we can apply(NonI1) on the new non-intervention constraintand derive X~<FY.
(NonIl) =(Zo<1*X<1*Y) A Zo<1*X --+ X~<1*YOn the other hand, we can derive non-disjointness of X and Y because (Trans),(Lab.Dom), and (Inter) allow the deriw~tion ofX<FW and Y<1*W:(NegDisj) X<*W A Y<I*W ~ X= ?
YWe can now combiue all of our constraints tbrX and Y with the intersection rule and obtainY<1*X, which basically determines the order ofthe two quantifiers:(Inter) X~<*Y A X-~ ?
Y ~ Y<*XBy exploiting the fact that the constraint isoverlap-ti'ee (i.e.
contains an inequality cost-straint for each two labeled variables), we (:aneven derive Y3<I*X by repeated application ofthe rules (Child.down), (Lab.Disj), (NegDisj),and (NegDom).
This means that we have flfllydisambiguated the scope ambiguity by saturn-tion with deterministic nference rules.Now let us consider a more complicated ex-ample.
Fig.
6 is the underspecified descriptionof the semantics of(2) Every visitor of a company saw one of itsdepartments.The constraint graph has five solntions, threeof which are proper.
Unfortunately, the con-straint language is not expressive nough todescribe these three solutions ill a single con-straint: Both X and Z can be either above orbelow Y, even in a proper solution, but if X isbelow Y, Z must be too, and i fX  is above Y, Zmust be anywhere below X (but; may be above464?
IX  V ,, Y " " " - -  q ,,,Zcompany ."
" -x " .
."
i ".
, "  "var " researcher i ".
/ o f~- - - -~  depar.tmen-gh'~ ; ,"~".
var \~!
.." ' Var ~ var'~ ."""
var ~"."
?
i .." "", ".
L" i . "
/v a r ' ~  vat ~ .
.
.
.
.
.
.Figure 6: Constraint graph for (2).YI).
In other words, this constraint is an exam-pie where the inference procedure is not strongenough to narrow the description.
In this case,we must still resort to pertbrming nondetermin-istic case distinctions; at worst, the rules willapply on solved forms of CL(1)PL) constraints.constraints over these set variables; examplesfor set constraints are V C V' and V =V~ U V.2.
The new non-intervention constraint~(X<1*Y<1*Z) can be encoded asY e <+(x)  u _L(Z) u >+(Z).5 Process ing  w i th  F in i te  SetConst ra in tsThis inferen('e procedure fits nicely with all im-ph;mentation of (lominance constraints t)ased onconstraint programming (Marriott and Stuckey,1.998; Koller and Niehren, 2000) with tiniteset constraints (Miiller, 1999).
Constraint pro-gramlning is a technology for solving combina-toric puzzles eificiently.
The main idea is toreplace "generate and test" by "propagate anddistrilmt(f'.
Constraint prot~agation t)eribrmsdeterministic nferences which prune the searchspace, whereas distribution tmrfonns (nondeter-rain|st|c) case distinctions.Duchier and Niehren (2000) show how toimplenmnt a (lominance constraint solver byencoding donfinance constraints as finite setconstraints and disjunctive propagators.
Thissolver does not handle non-intervention con-strain|s, lint we show here that they can tmadded very naturally.
The (Dyn) rules still haveto be implemented as saturation rules.The idea of this implementation is to encodea solution (Ad, ~) of a donfinance constraints byintroducing for each variable X in the constraintand each relation symbol R C {<1 +, t> +, =, J_ }a finite set variable R(X).
This w~riable is sup-posed to denote the set of all variables denotingnodes that are in tile relation R to ~(X):l~,(X) = {Y  e W(~o)I (M,  ~) b- YI~.X}Dominance constr~fints can now be stated asThe bull| in t)rot)agation tbr set constraints au-tomatically implenmnts the rules (NonI1) and(NonI2).
For instance, assume that X<1*Y t)e-longs to ~; then there will 1)e a set constraintY ?
<1 +(X), so set constraint propagation willderive Y ~ ~_(Z) U t>+(Z).
This is the |mined|-at(; encoding of Y_L U t>+Z, which is equiwdentto Y~<1* Z.6 Conc lus ionIn this paper, we have shown how a sl)ecific typeof local anti)|gully, which is produced by the in-teraction of intersentential naphora nd scopeambiguities, can l)e processed ell|clearly ill theframework of underspecification.
We h~ve de-fined \])PL structures, which can be used tomodel fonmflas of DPL, and proper DPL struc-tures, ill which w~riable binding must obey theaccessibility conditions of DPL.
Finally, we haveshown how an underspecified description can benarrowed to a description of its proper solutions,sometimes without even partial enumeration ofreadings, and integrated this operation into allimplelnentation f dominance constraints whichis based on tin|re set constraints.Se, en from the perspective of DPL, our defini-tion of tlrot)ern(;ss i tmrely syntactic and tech-nically has nothing to do with dynamic seman-tics.
We could state such a definition t/ecausethe expli(;it variable binding flmctions gave us astructure-in(let)endear h ndle on variable bind-ing that excluded all tbnns of capturing.
Thisdeviates from the standard perspective of indef-465inites changing the context, but has the advan-tage of being extremely modular in that the ac-cessibility conditions are factorized out explic-itly.
For instance, it is simple to represent hemeaning of "Bach-Peters entences" by relaxingthese conditions; it should also be easy to adaptour tbrmalism to other frameworks of dynamicsemantics.
Of course, the question of how tointerpret a DPL structure remains open.Another open question is how the approachpresented here can be extended to higher-ordersystems of dynamic semantics (e.g.
DynanficLambda Calculus (Kuschert, 1999)).
In thiscontext, it could be worthwhile to restore timdistinction of variable binding and anaphoriclinking from CLLS.Finally, it should be interesting to find otherclasses of local ambiguity that lend themselvesto a treatment as presented here.
So far, thereare not many related examples; one is lexicalambiguity in parsing of dependency grammar,as presented in (Duchier, 1999).
However, webelieve that the work presented here providesfurther illustration that underspecified process-ing can go a long way towards efficient process-ing of local ambiguities.Acknowledgments .
This work was sup-ported by the l)eutsche Forschungsgemeinschaftin the SFB 378.
As always, we thank all mem-bers of the SFB 378 project CHORUS at theUniversity of the Saarland.
We are also gratefulto the participants at the Dagstuhl workshop onDynamic Semantics in February 1999 for com-ments and discussions on an earlier version ofthis paper.ReferencesJohan Bos.
1996.
Predicate logic unplugged.
InProceedings of the lOth Amsterdam Colloquium,pages 133-143.Thomas Cornell.
1994.
On determining the consis-tency of partial descriptions of trees.
In Proceed-ings of ACL.Denys Duchier and Claire Gardent.
1999.
Aconstraint-based treatment of descriptions.
In 2 dInt.
Workshop on Comp.
Semantics, pages 71-85.Denys Dnchier and Joachim Niehren.
2000.
Domi-nance constraints with set operators.
In 1st Int.Conf.
on Computational Logic, LNCS, July.Denys Duchier.
1999.
Axiomatizing dependencyparsing using set constraints.
In Prw:.
of the 6 TMM.
on Mathematics of Language, pages 115 126.Markus Egg, Joachim Niehren, Peter Ruhrberg,and t;'eiyn Xu.
1998.
Constraints over lambda-strnctures in semantic umlerspecification.
I  joint17 th Int.
Conf.
on Comp.
Ling.
and 3# t' Ann.Meet.
of the ACL., pages 353 359.Jeroen Oroenendijk and Martin Stokhof.
1.991.
Dy-namic predicate logic.
Linguistics ~ Philosophy,14:39-100.Hans Kmnp and Uwe Reyle.
1993.
From Discourseto Logic.
Kluwer, Dordrecht.Alexander Koller and Joachim Niehren.
2000.
Con-straint progrmnming in computational linguistics.In Proe.
of the 8 th CSLI Workshop on Logic, Lan-guage, and Computation.
CSLI Press.
To appear.Alexander Koller, Joachim Niehren, and RalfTreinen.
1998.
Dominance constraints: Algo-rithms and complexity.
In 2 d Conf.
on LogicalAsp.
of Comp.
Ling.
To appear as LNCS in 2000.Alexander Koller, Kurt Mehlhorn, and JoachimNiehren.
2000.
A polynomial-time fragment ofdominance constraints.
In P~vccedings of th, c 38thA CL.
To appear.Susanna Kusclmrt.
1999.
Dynamic Meaning andAccomodation.
Ph.D. thesis, Dept.
of ComputerScience, University of the Saarland.Mitchell P. Marcus, Donald Hindle, and Mar-garet M. Fleck.
1983.
D-theory: Talking abouttalking about trees.
In 21 st Ann.
Meet.
of theACL, pages 129 136.Kim Marriott and Peter ,l. Stuckey.
1998.
Program-ruing with, Constraints: An Introduction.
MITPress.Tobias Mfiller.
1999.
Problem solving with filfite setconstraints in Oz.
A Tutorial.
Documentation ofthe Mozart system of Oz.
www.mozart-oz, org.R.A.
Muskens.
1995.
Order-Independence and Un-derspecification.
In J. Oroenendijk, editor, Ellip-sis, Underspccification, Events and Morv in Dy-namic Semantics.
DYANA Deliverable R.2.2.C.Manfred Pinkal.
1996.
Radical underspeeification.In Prveeedings of the lOth Amsterdam Collo-quium, pages 587-606.Owen Rainbow, K. Vijay-Shanker, and David Weir.1995.
D-Tree Grmnmars.
In Proceedings ofA CL '95.Uwe Reyle.
1993.
Dealing with ambiguities byunderspecification: construction, representation,and deduction.
,Iournal of Semantics, 10:123-179.Michael Schiehlen.
1997.
Disambiguation of under-specified iscourse repesentation strnctnres Ul~(teranaphoric onstraints.
In 2 ~'d Int.
Workshop.
onComputational Semantics, Tilburg.Kees van Deemter and Stmfley Peters.
1996.
Se-mantic Ambiguity and Underspecification.
CSLIPress.466
