FEATURE-BASED ALLOMORPHY*Hans-U l r i ch  Kr ieger  Hannes  P i rkerGerman Research Center  forArtif icial Intel l igence (DFK I )Stuh lsatzenhausweg 3W-66 Saarbr/ icken 11, Germany{krieger,pirker} @dfki.uni-sb.deJohn NerbonneAlfa Informat ica,  P .O.Box  716Oude Ki jk in 't J a ts t raat  41Ri jksunivers i te i t  GroningenNL 9700 AS Groningen,  Hol landnerbonne@let .
rug.n lAbst rac tMorphotactics and allomorphy are usuallymodeled in different components, leading to in-terface problems.
To describe both uniformly,we define finite automata (FA) for allomorphy inthe same feature description language used formorphotactics.
Nonphonologically conditionedallomorphy is problematic in FA models butsubmits readily to treatment in a uniform for-malism.1 Background and  Goa lsALLOMORPHY or MORPHOPHONEMICS describesthe variation we find among the different formsof a morpheme.
For instance, the German sec-ond person singular present ending -st has threedifferent allomorphs, -st, -est, -t, determined bythe stem it combines with:'say' 'pray' 'mix'(1) lsg pres ind2sg pres ind3sg pres indsag+esag+stsag+tbet + ebet+ estbet-/-etmix+emix+tmix+tMORPHOTACTICS describes the arrangement ofmorphs in words, including, e.g., the propertiesof -st that it is a suffix (and thus follows thestem it combines with), and that it combineswith verbs.
While allomorphy is normally de-scribed in finite automata (FA), morphotacticsis generally described in syntax-oriented models,e.g., CFGs or feature-based grammars.The present paper describes both allomor-phy and morphotactics in a feature-based lan-guage like that of Head-Driven Phrase Struc-ture Grammar (HPSG) (Pollard and Sag 1987).
*This work was supported by research grant ITW9002 0 from the German Bundesministerium ffirForschung und Technologie to the DFKI DISCOproject.
We are grateful to an anonymous ACL re-viewer for helpful comments.The technical kernel of the paper is a feature-based definition of FA.
1 While it is unsurprisingthat the languages defined by FA may also bedefined by feature description languages (FDL),our reduction goes beyond this, showing how theFA themselves may be defined.
The significanceof specifying the FA and not merely the lan-guage it generates i that it allows us to use FAtechnology in processing allomorphy, even whilekeeping the interface to other grammar compo-nents maximally transparent (i.e., there is NOinterface--all inguistic information is specifiedvia FDL).Our motivation for exploring this applicationof typed feature logic is the opportunity it pro-vides for integrating in a single descriptive for-malism not only (i) allomorphic and morpho-tactic information but also (ii) coneatenativeand non-concatenative allomorphy.
The latteris particularly useful when concatenative andnon-concatenative allomorphy coexists in a sin-gle language, as it does, e.g., in German.2 F in i te  Automata  as  TypedFeature  S t ructuresAn FA A is defined by a 5-tuple (Q, E, 5, q0, F),where Q is a finite set of STATES, ~ a finite IN-PUT ALPHABET, (~ : Q x ~ ---y Q is the TRAN-SITION FUNCTION, q0 E Q the INITIAL STATE,and F _C Q the set of FINAL STATES.
2 Forreasons of simplicity and space, we only referto the simplest form of FA, viz., DETERMIN-ISTIC finite automata without e-moves whichconsume exactly one input symbol at a time.This is of course not a restriction w.r.t, ex-pressivity: given an arbitrary automaton, wecan always construct a deterministic, equiva-I See Krieger 1993b for the details and severalextensions.2We assume a familiarity with automata theory(e.g., Hopcroft and Ullman 1979).140lent one which recognizes the same language(see Hopcroft and Ullman 1979).
Fortunately,our approach is also capable of representing andprocessing directly non-deterministic FA with e-moves and allows for edges which are multiple-symbol consumers.Specifying an automaton in our approachmeans introducing for every state q E Q a possi-bly recursive feature type with the same name asq.
We will call such a type a CONFIGURATION.Exactly the attributes EDGE, NEXT, and INPUTare appropriate for a configuration, where EDGEencodes disjunctively the outgoing edges of q,NEXT the successor states of q, and INPUT thesymbols which remain on the input list whenreaching q.S Note that a configuration does notmodel just a state of the automaton, but an en-tire description at a point in computation.\[ EDGE input-symb \](2) proto-confi9 _= | NEXT config |/ INPUT list(input-symb)JWe now define two natural subtypes of proto-con fig.
The first one represents the non-finalstates Q \ F.  Because we assume that exactlyone input symbol is consumed every time anedge is taken, we are allowed to separate theinput list into the first element and the rest listin order to structure-share the first element withEDGE (the consumed input symbol) and to passthe rest list one level deeper to the next state.
(3) non-final-conflg =_proto-config "\]EDGE \ [ \ ]  /NEXTIINPUT \ [ \ ]  /INPUT ( \[-i-\].
\ [ \ ]  )JThe other subtype encodes the final states ofF which possess no outgoing edges and thereforeno successor states.
To cope with this fact, weintroduce a special subtype of T, called under,which is incompatible with every other type.
Inaddition, successfully reaching a final state withno outgoing edge implies that the input list isempty.
(4) final-config =proto- config \]EDGE undef lNEXT undef lINP  ( ) JaNote that EDGE is not restricted in bearing onlyatomic symbols, but can also be labeled with com-plex ones, i.e., with a possibly underspecified fea-ture structure (for instance in the case of 2-1evelmorphology--see below).AFigure 1: A finite automaton A recognizing thelanguage ?
(A) = (a + b)*c.Of course, there will be final states with out-going edges, but such states are subtypes of thefollowing DISJUNCTIVE type specification:(5) config =_ non-final-con.fig V J~inal-configTo make the idea more concrete, let us studya very small example, viz., the FA A (see Fig-ure 1).
A consists of the two states X and Y,from which we define the types X and Y, whereY (7) is only an instantiation of final-config.In order to depict the states perspicuously, weshall make use of DISTRIBUTED DISJUNCTIONS.DSrre and Eisele 1989 and Backofen et al 1990introduce distributed disjunctions because they(normally) allow more efficient processing of dis-junctions, sometimes obviating the need to ex-pand to disjunctive normal form.
They add noexpressive power to a feature formalism (assum-ing it has disjunction), but abbreviate some oth-erwise prolix disjunctions:{$1 a VPATH2 $1 ~ V fl} =PATH3 .
.
,  \] {\[PA ,a \] \[P,THlb \]}PATH2 o~ V PATH2 flPATH3 \[ .
.
.
\] PATH3 \[ .
.
.
\]The two disjunctions in the feature structureon the left bear the same name '$1', indicat-ing that they are a single alternation.
Thesets of disjuncts named covary, taken in order.This may be seen in the right-hand side of theequivalence.
4We employ distributed isjunctions below (6)to capture the covariation between edges and4Two of the advantages of distributed disjunc-tions may be seen in the artificial example above.First, co-varying but nonidentical elements can beidentified as such, even if they occur remotely fromone another in structure, and second, features truc-tures are abbreviated.
The amount of abbreviationdepends on the number of distributed isjunctions,the lengths of the paths PATH1 and PATH2, and--inat least some competing formalisms--on the size ofthe remaining structure (cf.
PATH3 \[.. .
\] above).141their successor states: if a is taken, we musttake the type X (and vice versa), if b is used,use again type X, but if c is chosen, choose thetype Y.
(6)"non-final-config \]X- -  EDGE $1{aVbVc}NEXT $1{X V X V Y}(7) Y - \[ final-config \]Whether an FA A ACCEPTS the input or notis equivalent in our approach to the question ofFEATURE TERM CONSISTENCY: if we wish toknow whether w (a list of input symbols) willbe recognized by A, we must EXPAND the typewhich is associated with the initial state q0 of Aand say that its INPUT is w. Using the terminol-ogy of Carpenter 1992: (8) must be a TOTALLYWELL-TYPED feature structure.\[q?
\](8) INPUT WComing back to our example (see Figure 1),we might ask whether abc belongs to /2(A).We can decide this question, by expanding thetype X with \[INPUT (a,b,c)\].
This will leadus to the following consistent feature structurewhich moreover epresents, for free, the com-plete recognition history of abc, i.e., all its solu-tions in the FA./ / EDGE \ [ \ ]  c(9) \]NEXT \[NEXT IEYGE under| | NEXT \]NEXT underI | \[INPUT \ [ \ ]  ( >/ | INPUT r-~ ( ~\ ] .~\ ]  )/ LINPUT~ < \ [~ '~LINPUT < 5q"Note that this special form of type expansionwill always terminate, either with a unificationfailure (A does not accept w) or with a fullyexpanded feature structure, representing a suc-cessful recognition.
This idea leads us to thefollowing ACCEPTANCE CRITERION:(10)w ?
?
(A) ?=~(NEXT)" \[{NP  ()where f ?
FNotice too that the acceptance criterion does notneed to be checked explicitly--it's only a logi-cal specification of the conditions under whicha word is accepted by an FA.
Rather the effectsof (10) are encoded in the type specifications ofthe states (subtypes of final-config, etc.
).Now that we have demonstrated the feature-based encoding of automata, we can abbrevi-ate them, using regular expressions as "featuretemplates" to stand for the initial states of theautomaton derived from them as above.
5 Forexample, we might write a feature specification\[NORPHIFORN (a + b)*c\] to designate words ofthe form accepted by our example automaton.As a nice by-product of our encoding tech-nique, we can show that unification, disjunction,and negation in the underlying feature logic di-rectly correspond to the intersection, union, andcomplementation f FA.
Note that this state-ment can be easily proved when assuming aclas-sical set-theoretical semantics for feature struc-tures (e.g., Smolka 1988).
To give the flavor ofhow this is accomplished, consider the two reg-ular expressions 1 : ab*c and/22 -- a*bc.
Wemodel them via six types, one for each state ofthe automata.
The initial state of/21 is A, thatof/22 is X.
The intersection of?1 and/22 is givenby the unification of A and X. Unifying A andX leads to the following structure:(11): |EDGE a\[NEXT BJ \[NEXT $1 {XV Y}J \[NEXT B ANow, testing whether w belongs to /21 N/22 isequivalent to the satisfiability (consistency) of(12) A A X A \[INPUT w\],where type expansion yields a decision proce-dure.
The same argumentation holds for theunion and complementation f FA.
It has to benoted that the intersection and complementa-tion of FA via unification do not work in general5'Template' is a mild abuse of terminology sincewe intend not only to designate the type correspond-ing to the initial state of automaton, but also tosuggest what other types are accessible.142for FA with e-moves (Ritchie et al 1992, 33-35).This restriction is due to the fact, that the in-tersected FA must run "in sync" (Sproat 1992,139-140).The following closure properties are demon-strated fairly directly.Let A1 = (Qt,Et,61,qo, Ft) and As =(Os, ~2, ~S, q~), Fs).
* A l f7As  ~ qoAq~o?
A tUAs  ~ qoVqto?
A1 ~ -~qoIn addition, a weak form of functional uncer-tainty (Kaplan and Maxwell 1988), representedthrough recursive type specifications, is appro-priate for the expression also concatenation a dKleene closure of FA.
Krieger 1993b providesproofs using auxiliary definitions and apparatuswe lack space for here.3 A l lomorphyThe focus of this section lies in the illustrationof the proposal above and in the demonstrationof some benefits that can be drawn from the in-tegration of allomorphy and morphotactics; weeschew here the discussion of alternative the-ories and concentrate on inflectional morphol-ogy.
We describe inflection using a word-and-paradigm (WP) specification of morphotactics(Matthews 1972) and a two-level treatment ofallomorphy (Koskenniemi 1983).
We also indi-cate some potential advantages ofmixed modelsof allomorphy--finite state and other.
63.1 WP Morphotact l cs  in FDLSeveral WORD-GRAMMARS use FDL morphotac-tics (Trost 1991, Krieger and Nerbonne 1992 onderivation); alternative models are also avail-able.
Krieger and Nerbonne 1992 propose anFDL-based WP treatment of inflection.
Thebasic idea is to characterize all the elementsof a paradigm as alternative specifications ofabstract lexemes.
Technically, this is realizedthrough the specification of large disjunctionswhich unify with lexeme specifications.
TheSThe choice of two-level allomorphy is justifiedboth by the simplicity of two-level descriptions andby their status as a "lingua franca" among compu-tational morphologists.
Two-level analyses in FDLsmay also prove advantageous if they simplify the po-tential compilation into a hybrid two-level approachof the kind described in Trost 1991.three elements of the paradigm in (1) would bedescribed by the distributed isjunction in (13).
(13) weak-paradigm -wordFORH ,pp,nd(U,r )STEN~ NORPH I ENDING,s1SyNILOCIHEADIAGR \ [N  UHPERThis treatment providesface to syntactic/semantichelps realize the goal oflinguistic knowledge in a(Pollard and Sag 1987).
(+,e) V }( +,s,t> v(-I-,t)sg, {lv:v3}a seamless inter-information, andrepresenting ALLsingle formalismNevertheless, the model lacks a treatmentof allomorphy.
The various allomorphs of -stin (1) are not distinguished in the FDL, andKrieger and Nerbonne 1992 foresaw an interfaceto an external module for allomorphy.
It wouldbe possible--but scientifically poor--to distin-guish all of the variants at the level of mor-photactics, providing a brute-force solution andmultiplying paradigms greatly.
7 The character-ization in Section 2 above allows us to formu-late WITHIN FDL the missing allomorphy com-ponent.3.2 Two-Level Al lomorphyTwo-level morphology has become popular be-cause it is a declarative, bidirectional andefficient means of treating allomorphy (seeSproat 1992 for a comprehensive introduction).In general, two-level descriptions provide con-straints on correspondences between underly-ing (lexical) and surface levels.
We shall useit to state constraints between morphemic unitsand their allomorphic realizations.
Because two-level automata characterize relations betweentwo levels, they are often referred to (and oftenrealized as) transducers.
The individual rulesthen represent constraints on the relation beingtransduced.The different forms of the suffix in 2nd personsingular in (1) are predictable given the phono-logical shape of the stem, and the alternationscan be described by the following (simplified)two-level rules (we have abstracted away frominessential restrictions here, e.g., that (strong)verbs with i/e-umlaut do not show epenthesis):rTzoukermann and Libermann 1990 show thatmultiplying paradigms need not degrade perfor-mance, however.143(14)e-epenthesis in the bet- case+:e  .
{d,t}_{s,t}s-deletion in the mix- cases:O ?
:~ {s,z,z,  ch}+:O tThe colon ':' indicates a correspondence be-tween lexical and surface levels.
Thus thefirst rule states that a lexical morph bound-ary + must correspond to a surface e if it oc-curs after d or t and before s or t. The sec-ond specifies when lexical s is deleted (corre-sponds to surface 0).
Two-level rules of thissort are then normally compiled into transduc-ers (Dalrymple t al.
1987, p.35-45).3.3 FDL Specif ication of  Two-LevelMorpho logyTwo-level descriptions of allomorphy can bespecified in FDLs straightforwardly if we modelnot transducers, but rather two-level accep-tors (of strings of symbol pairs), followingRitchie et al 1992.
We therefore employ FAover an alphabet consisting of pairs of symbolsrather than single symbols,The encoding of these FA in our approachrequires only replacing the alphabet of atomicsymbols with an alphabet of feature structures,each of which bears the attributes LEX and SURF.A pair of segments appearing as values of thesefeatures tand in the lexical-surface correspon-dence relation denoted by ':' in standard two-level formalisms.
The values of the attributesSTEM and ENDING in (13) are then not lists ofsymbols but rather lists of (underspecified) fea-ture structures.
Note that the italicized t etc.found in the sequences under MORPHIENDING (13)denote types defined by equations such as (16)or (17).
(To make formulas shorter we abbrevi-ate 'alphabet' etymologically as 'aft'.
)(15) a\]~ =\[LEX $1{"a"V .
. "
s "V"s"V '+"V"+"}  \]SURF $d"a"  V .
"s"  V 0 V "e" v 0}(16) t = ^ \[LZX "t"\] = \] LEX "t"SURF "t"(17) + =-- (~  A \[LEX "+"\] : LEX "+"SURF "e" v 0aSince our formalisation of FA cannot allow e-transitions without losing important properties, weare in fact forced to this position.It is the role of the collection of FA to re-strict underspecifled lexical representations tothose obeying allomorphic onstraints.
This isthe substance of the allomorphy constraint (18),which, together with the Acceptance Criterion(10), guarantees that the input obeys the con-straints of the associated (initial states of the)FA.NORPH\]FORM \[~\](18) allomorphy =_ INPUT \ [ \ ]Rules of the sort found in (14) can be directlycompiled into FA acceptors over strings of sym-bol pairs (Ritchie et al 1992, p.19).
Making useof the regular expression otation as templates(introduced in Section 2 above), (19-21) displaya compilation of the first rule in (14).
Here thecomposite rule is split up into three differentconstraints.
The first indicates that epenthesisis obligatory in the environment specified andthe latter two that each half of the environmentspecification is necessary.
9(19) epenth-1 =_Nallomorphy \]0RPH \[FORM (11"* {t,d} +:0 {s,t} 7r*)\]J(20) epenth-2 =_allomorphy(21) epenth.3 =_allomorphy+ o3.4 Limits of Pure FA MorphologyFinite-state morphology has been criticized (i)for the strict finite-stateness of its handlingof morphotactics (Sproat 1992, 43-66); (ii) formaking little or no use of the notion of inflec-tional paradigms and inheritance relations be-tween morphological c asses (Cahill 1990); and(iii) for its strict separation of phonology frommorphology--i.e., standard two-level rules canonly be sensitive to phonological contexts (in-cluding word and morpheme boundaries), andapply to all forms where these contexts hold.In fact, allomorphic variation is often "fos-silized", having outlived its original phonologicalmotivation.
Therefore some allomorphic rules97r* denotes the Kleene closure over alphabet 11"and A the complement of A with respect o ~r.144are restricted in nonphonological ways, apply-ing only to certain word classes, so that somestems admit idiosyncratic exceptions with re-spect o the applicability of rules (see Bear 1988,Emele 1988, Trost 1991)?To overcome the first difficulty, a numberof researchers have suggested augmenting FAwith "word grammars", expressed in terms offeature formalisms like PATR II (Bear 1986)or HPSG (Trost 1990).
Our proposal followstheirs, improving only on the degree to whichmorphotactics may be integrated with allomor-phy.
See Krieger and Nerbonne 1992 for pro-posals for treating morphotactics in typed fea-ture systems.We illustrate how the FDL approach over-comes the last two difficulties in a concretecase of nonphonologically motivated allomor-phy.
German epenthesizes schwa (< e >) atmorph boundaries, but in a way which is sensi-tive to morphological environments, and whichthus behaves differently in adjectives and verbs?The data in (22) demonstrates some of these dif-ferences, comparing epenthesis inphonologicallyvery similar forms?free, adj super frei+st freiest(22) free, v 2s pres be+frei+st befreistwoo, v 2s pres frei+st freistWhile the rule stated in (14) (and reformu-lated in (19)-(21)) treats the verbal epenthesiscorrectly, it is not appropriate for adjectives, forit does not allow epenthesis to take place aftervowels.
We thus have to state different rules fordifferent morphological categories.The original two-level formalism could onlysolve this problem by introducing arbitrary dia-critic markers?
The most general solution is dueto Trost 1991, who associated two-level ruleswith arbitrary filters in form of feature struc-tures.
These feature structures are unified withthe underlying morphs in order to check the con-text restrictions, and thus serve as an interfaceto information provided in the feature-based lex-icon.
But Trost's two-level rules are a com-pletely different data structure from the featurestructures decorating transitions in FA.We attack the problem head on by restrict-ing allomorphic onstraints to specific classesof lexical entries, making use of the inheritancetechniques available in structured lexicons?
Thecases of epenthesis in (22) is handled by definingnot only the rule in (19-21) for the verbal cases,but also a second, quite similar ule for the moreliberal epenthesis n adjectives) ?
This frees the1?In fact, the rules could be specified so that theT?
.
?allomorphyepenth-1 epenth-2 epenth-3 wordAdj Verb ...Figure 2: Nonphonological  Condit ioning ofallomorphy is achieved by requiring that onlysome word classes obey the relevant constraints?Adjectives inherit from two of the epenthesisconstraints in the text, and verbs (without i/eumlaut) satisfy all three.
This very naturalmeans of restricting allomorphic variation to se-lected, nonphonologically motivated classes isonly made available through the expression ofallomorphy in type hierarchy of the FDL.
(Thetypes denote the initial states of FA, as ex-plained in Section 2.
)rule from operating on a strictly phonologicalbasis, making it subject o lexical conditioning?This is illustrated in Figure 2.But note that this example demonstrates notonly how feature-based allomorphy can over-come the strictly phonological base of two-levelmorphology (criticism (iii) above), but it alsomakes use of the inheritance structure in mod-ern lexicons as well.4 Conc lus ionsIn this section we examine our proposal vis-b.-visothers, suggest future directions, and provide asummary.4.1 Comparison to other  WorkComputational morphology is a large and ac-tive field, as recent textbooks (Sproat 1992and Ritchieet al 1992) testify?
This im-pedes the identification of particularly im-portant predecessors, among whom nonethe-less three stand out.
First, Trost 1991'suse of two-level morphology in combinationverbal rule inherited from the more general adjecti-val rule, but pursuing this here would take us some-what afield.145with feature-based filters was an importantimpetus.
Second, researchers at Edinburgh(Calder 1988, Bird 1992) first suggested usingFDLs in phonological and morphological de-scription, and Bird 1992 suggests describing FAin FDL (without showing how they might be socharacterized, however--in particular, providingno FDL definition of what it means for an FAto accept a string).Third, Cahill 1990 posed the critical question,viz., how is one to link the work in lexical inher-itance (on morphotactics) with that in finite-state morphology (on allomorphy).
This ear-lier work retained a separation of formalismsfor allomorphy (MOLUSC) and morphotactics(DATR).
Cahill 1993 goes on to experiment withassuming all of the allomorphic specification i tothe lexicon, in just the spirit proposed here.
11Our work differs from this later work (i) in thatwe use FDL while she uses DATR, which aresimilar but not identical (cf.
Nerbonne 1992);and (ii) in that we have been concerned withshowing how the standard model of allomorphy(FA) may be assumed into the inheritance hier-archy of the lexicon, while Cahill has introducedsyllable-based models.4.2 Future  WorkAt present only the minimal examples inSection 2 above have actually been imple-mented, and we are interested in attemptingmore.
Second, a compilation into genuine fi-nite state models could be useful.
Third,we are concerned that, in restricting ourselvesthus far to acceptors over two-level alpha-bets, we may incur parsing problems, which amore direct approach through finite-state trans-ducers can avoid (Sproat 1992, p.143).
SeeRitchie et al 1992, 19-33 for an approach toparsing using finite-state acceptors, however.4.3 SummaryThis paper proposes a treatment of allomor-phy formulated and processable in typed featurelogic.
There are several reasons for developingthis approach to morphology.
First, we preferthe GENERALITY of a system in which linguis-tic knowledge of all sorts may be expressed--atleast as long as we do not sacrifice processingefficiency.
This is an overarching goal of HPSG(Pollard and Sag 1987)--in which syntax andsemantics i  described in a feature formalism,and in which strides toward descriptions ofmor-photactics (Krieger 1993a, Riehemann 1993,lICf.
Reinhard and Gibbon 1991 for another sortof DATR-based allomorphyGerdemann 1993) and phonology (Bird 1992)have been taken.
This work is the first to showhow allomorphy may be described here.
Theproposal here would allow one to describe seg-ments using features, as well, but we have notexplored this opportunity for reasons of space.Second, the uniform formalism allows the ex-act and more transparent specification of depen-dencies which span modules of otherwise dif-ferent formalisms.
Obviously interesting casesfor the extension of feature-based descriptionsto other areas are those involving stress andintonation--where phonological properties candetermine the meaning (via focus) and even syn-tactic well-formedness (e.g., of deviant word or-ders).
Similarly, allomorphic variants covary inthe style register they belong to: the Germandative singular in -e, dera Kinde, belongs to aformal register.Third, and more specifically, the feature-based treatment of allomorphy overcomes thebifurcation of morphology into lexical aspects--which have mostly been treated in lexical in-heritance schemes--and phonological spects--which are normally treated in finite-state mor-phology.
This division has long been recognizedas problematic.
One symptom of the problemis seen in the treatment of nonphonologicallyconditioned allomorphy, such as German um-laut, which (Trost 1990) correctly criticizes asad hoc in finite-state morphology because thelatter deals only in phonological (or graphemic)categories.
We illustrated the benefits of theuniform formalism above where we showed howa similar nonphonologically motivated alterna-tion (German schwa epenthesis) is treated ina feature-based description, which may deal inseveral levels of linguistic description simultane-ously.ReferencesBackofen, R., L. Euler, and G. G6rz.
1990.
Towardsthe Integration of Functions, Relations and Typesin an AI Programming Language.
In Proc.
ofGWAI-90.
Berlin.
Springer.Bear, J.
1986.
A Morphological Recognizer withSyntactic and Phonological Rules.
In Proc.
ofCOLING, 272-276.Bear, J.
1988.
Morphology with Two-Level Rulesand Negative Rule Features.
In Proc.
of COLING,28-31.Bird, S. 1992.
Finite-State Phonology in HPSG.
InProc.
of COLING, 74-80.Cahill, L. J.
1990.
Syllable-Based Morphology.
InProc.
of COLING, 48-53.Cahill, L. J.
1993.
Morphonology in the Lexicon.
InProc.
of the 7th European A CL, 87-96.146Calder, J.
1988.
Paradigmatic Morphology.
In Proc.of the 5th European A CL.Carpenter, B.
1992.
The Logic of Typed FeatureStructures.
No.
32Tracts in Theoretical Com-puter Science.
Cambridge: Cambridge UniversityPress.Dalrymple, M., R. Ka-plan, L. Karttunen, K. Koskenniemi, S. Shaio,and M. Wescoat.
1987.
Tools for MorphologicalAnalysis.
Technical Report CSLI-1987-108, CSLI,Stanford University.DSrre, J., and A. Eisele.
1989.
Determining Consis-tency of Feature Terms with Distributed Disjunc-tions.
In Proc.
of GWAI-89 (15th German Work-shop on AI), ed.
D. Metzing, 270-279.
Berlin.Springer-Verlag.Emele, M. 1988.
Uberlegungen zu einer Two-LevelMorphologie fiir das Deutsche.
In Proc.
der4.
Osterreichischen Artificiai-lntelligence- Tagungund des WWWS, ed.
H. Trost, 156-163.
Berlin:Springer.
Informatik-Fachberichte 176.Gerdemann, D. 1993.
Complement Inheritance asSubcategorization Inheritance.
In German Gram-mar in HPSG, ed.
J. Nerbonne, K. Netter, andC.
Ponard.
Stanford: CSLI.Hopcroft, J. E., and J. D. Ullman.
1979.
In-troduction to Automata Theory, Languages, andComputation.
Reading, Massachusetts: Addison-Wesley.Kaplan, R., and J. Maxwell.
1988.
An Algorithm forFunctional Uncertainty.
In Proc.
of Coling 1988,303-305.
Budapest.Koskenniemi, K. 1983.
Two-Level Model for Mor-phological Analysis.
In Proc.
of IJCAI, 683-685.Krieger, H.-U.
1993a.
Derivation Without Lexi-cad Rules.
In Constraint Propagation, Linguis-tic Description and Computation, ed.
R. Johnson,M.
Rosner, and C. Rupp.
Academic Press.Krieger, H.-U.
1993b.
Representing and Pro-cessing Finite Automata Within Typed Fea-ture Formalisms.
Technical report, DeutschesForschungsinstitut fiir Kiinstfiche Intelligenz,Saarbriicken, Germany.Krieger, H.-U., and J. Nerbonne.
1992.
Feature-Based Inheritance Networks for ComputationalLexicons.
In Default Inheritance withinUnification-Based Approaches to the Lexicon, ed.T.
Briscoe, A. Copestake, and V. de Paiva.
Cam-bridge: Cambridge University Press.
Also DFKIResearch Report RR-91-31.Matthews, P. 1972.
Inflectional Morphology: A The-oretical Study Based on Aspects of Latin VerbConjugation.
Cambridge, England: CambridgeUniversity Press.Nerboune, J.
1992.
Feature-Based Lexicons--An Example and a Comparison to DATR.
InBeitriige des ASL-Lexikon- Workshops, Wandlitz(bei Berlin), ed.
D. Reimann, 36-49. also DFKIRR-92-04.Pollard, C., and I.
Sag.
1987.
Information-BasedSyntax and Semantics, Vol.L Stanford: CSLI.Reinhard, S., and D. Gibbon.
1991.
Prosodic In-heritance and Morphological Generalizations.
InProc.
of the 6th European ACL, 131-137.Riehemarm, S. 1993.
Word Formation in LexicalType Hierarchies.
A Case Study of bar-Adjectivesin German.
Master's thesis, Eberhard-Karls-Universit~it Tiibingen, Seminar f/Jr Sprachwis-senschaft.Ritchie, G. D., G. J. Russell, A. W. Black, and S. G.Pulman.
1992.
Computational Morphology: Prac-tical Mechanisms for the English Lexicon.
Cam-bridge: MIT Press.Smolka, G. 1988.
A Feature Logic with Subsorts.Technical Report 33, WT LILOG-IBM Germany.Sproat, R. 1992.
Morphology and Computation.Cambridge: MIT Press.Trost, H. 1990.
The Application of Two-Level Mor-phology to Non-concatenative G rman Morphol-ogy.
In Proc.
of COLING, 371-376.Trost, H. 1991.
X2MORF: A Morphological Com-ponent Based on Augmented Two-Level Mor-phology.
Technical Report RR-91-04, DFKI,Saarbrficken, Germany.Tzoukermann, E., and M. Libermann.
1990.
AFinite-State Morphological Processor for Spanish.In Proc.
of COLING, Vol.
3.147
