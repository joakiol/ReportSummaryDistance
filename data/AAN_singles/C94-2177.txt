Reverse Queries in DATR*Hagen Langer(~n ivers i ty  o f  ( )s ta l l ) f l i ck ,  Germanyhlai~ger((~)jupite, r .
rz .mf i -osnal ) rue( :k .deAbst rac tI)ATI{ is a declarative re.presentation language ti)r lex-.ical i i fformation and as such, fit prin(:iple, neul;ral withresl)(;ct; 1;o i)arl;icul&r l)rocessing st,rat,egies.
PreviousDATR (:l)mt)iler/inl;erI)ret(!r sy,qt(!ms upport  only oneal:l:e.4s ,%rat,egy ~hnt, closely resembles the set, of inti~r-.otlce rllleS of the procedm:sd s(mumti(:s of \])A.Tli (Evmls& C,~tz(lar 1989a).
In this i/al)er w(!
present, an alt,ern;>1;ivc access st,r~tl;egy ('ri:'uc'l'.s('.
q'ucr!/ .stral, cgy ) ~br a him-trivial subsel; of  I )A 'F \ ] / .1 The Reverse Query ProblemDATR (Evans & Gazdm" 1989@ has l)ecome.
Olte of theiiiosl; widely used fornlatl languages tin' the I'(~l)t'ese.tll;;t-t,ion of lexicad infornlat,ion.
!
)N\[ ' l l  ~q)plil:ations ha.rebeen (h~velol)ed for a wide variety of lmlguages (includ-ing English, .lat/mmse , Kikuyu, Arabi(:, l,at,in, and oth-ers) ;rod mmly different; subdonudns of le, xical rel)resen-tat,ion, including inilect,ional morphology, undt~rspeci-fication l)honltlogy, nlm-(:onca.t,enative morphophonol-ogy, lexicaI senlanti(:s, and tone systems I.We presutlI)OSe that the reader of the llresenl; paper is\[)mlilia.r with the basic Datur(!s of \])AT\[/.
as spe(:ilie(1in Ewms & Gazda.r \ [1989@7'he ;all;(tu;tcy of st lexi(:on repr(~se.nt,;~t;ion f rnmlisln de-pends basical ly on two major  fact,ors:?
it,s declarative c:cpres.sivenes.s: is the ff)rmalism, inprin(:iple, i:al)al)le of rel)resent,ing l;he phenomena in?
This research was partly SUpl)orted by the (~ermau l,'e(h!ralMinistry of Heseareh and Technology (BMfI', project VEI~P,-MOBIl,) at the University of l~ielelk~ld.
I would like tel thank1)afy(Id Gibbon for vely ttseful COllltHeltL8 o11 ali earlier draft ofI;his paper.1 See Cahill \[\[9.93\], Gibbon \[ \[9!
)2\], (lazdm" \[I 9921, ;rod Kilbm'y\[1992\] for reeelll; I)ATR applicatious in Lhese areas.
An informalintroducl, ion I,o I)ATR is given in (lazdar \[19!10\].
'l'he sl.andatdsyntax and semantics of I)ATI{ is defined in I,iwms gz (~az(lar\[198!
)a, 19891)\].
hul)lementation issues are discussed iu (:libbon& Almua \[1991\], Jenkins \[1990\], aud in Gibbon \[19931 .
M,)ser\[I 992a, 1992b, 1992(:, 1992d\] provides interesting insights into thefl~rmal properties of I)N\['I/(see also the I)A'\['I/ represen/ations offinil,e state allLomal.a, dilI'e~ent kiiMs of logics, regisl, er operationsere.
in Evans & (l~z(la,' \[1990\], and l,;ml;er \[1993\]).
Andry etal.
\[19931 describe how I)ATR can lm used in speech-oriented~tl)l)lieal.ion.~;.qll(*,st,ion~ &lid does it allow lbr a.n explicit t,re;~t,-lllonl; of generalisat,ions, subgene, ralisations, ;rod ex--Cel)tions'.
~?
its l'ailg~e of acct',ssing .strategies: are th(w0, &cc0s.qillt, ~strategies for all apl)lical;ions which 1)rt'.suppose a lex-icon (e.g.
parsing, general;ion, ...), a.nd tlo t,hey supporl; t;he development, Ill;:tillt,t!ll~tllt:(}, ;-I, II(\] evahmLionof lexi(:a in an a(h~(ltlat,l~ manner?Most; of t,h(!
previous work oil i)A~I'l/ has focussed out,hc forlnc'r set, of (:rigeria, i.e.
t,he det;larative featuresof  l;he language, its exl)ressive i:~Lpalfili|;ies, mid its a(t-equ;t i :y l()r Lhe r(>forinul~l;ion of l)r(>l;h(~oret,i(; nt()rln~tllinguistic concepts.
This paper is mainly con(:erImdwith f;he latter set of criteria of adequacy.
However, inthe (:ase of I)ATI{, the l imited access iu only one di-re(:tion lms led to a somewhat l)ro(:edural view of \[;helanguage whi(:h, in 1)artil:ular cases, has also had a.nimpact on the declarative rel)resenl;al;ion,q I;hem,qelves.I)AT\]/.
has ofl;en been (:h~r;u:I;erised as a fiim.ctional ttildd(ttg'.l'glti'lti.s't{(: 1}LllglHtglL These fe}Ll;llt'(hq 31'o, ()f COllt'SO,not prolmrl;ies of the bmgm~ge it,self, but rather of I;hela.uguage l;ogether with a particulm: procedural  ild;erpre.t,ation.
Actually, l;he t,erm deterministic is ill)i; }l,l)-t)lic~fl)le to  a declarative l~mguage, but only makes s(!ltseif applied to a procedural  laalgua.ge or a particuta.r pro-cedural intert)retal;ion of a langnage.
The I )ATR i nterpreter/couq/ i ler  systems develol)Cd st) t~l '2 have inCOmlnon that  (,hey supt)orL italy one way of accessingthe inli)rmat, ion relIres(mt(~'(1 in & I)ATR theory.
'Fhisaccess st;ral;egy, whi(:h we will refer to as the sl, anda'rdpT"ocedur'al intcrprctatio'n of \])ATR, closely resembh~sthe inference rules defined in Evans & Gaz(lar \[11989a\].Even if one considers DATR neither a.s a tool for i)a.rs -ing nor for generatioll  tasks, \[)lit, rather as a purely ret/resent,ational device, the one-way-only access to DATRt,heories turns ollt, to 1)e OllO ()f the major  drawbacks oft;he model.One (If (;tie i:bdins stated for DATR in F, wms &.
Gaz-(l&r \[\] 989\] is t,haA; it is i :onqnttationally ;ra(:l;able, lhlt~for many practical purpl/Ses, including lexicon iIevelo 1)tnt!llL sl, lld ew~,lual;ion, it is llOt, sufficient, t,hal; t,her( ~.
is ,:~lly21)ATI;i/ impl-et;mn~ati ..... i,ave I .
.
.
.
.
.
.
.
leveloped by iC Evans(I)A'\['I(90), I).
(lit)bon (I)I)ATI{, ODE), A. Sikorski (TPI)A-'I'll,q), .l.
Kilbury (QI)ATII), (I. I)rexel (YAI)\]"), M. I)uda (I IU I~I)ATII), mid other.s.1089arbitrary accessing strategy at all, bnt there should bean appropr iate way for accessing whatever informationthat  is necessary for the purpose in question.
This is astrong motivation for investigating alternative strate-gies for processing DATR representations.
This paperis concerned with the reverse query problem, i.e.
theproblem how a given DATR value can be mapped ontothe queries that  evaluate to it.
A standard query con-sists of a node and a path, e.g.
Sheep:<orth plur>, an<levaluates to a sequence, of atoms (value), e.g.
sheep.
Areverse query, on the other hand, starts with the value,e.g.
sheep, and queries the set of node-path pairs whichevaluate to it, for instance, Sheep:<orth sing> andSheep:<orth plur>.
Our solution can be be regardedas an inversion of the parsing-as-deduction al)proach ofthe logic programming tradit ion, since we treat reverse-query theorem proving as a parsing problem.
We adopta wellknown strategy frora parsing technology: we iso-late the context-fi 'ee "backbone" of DATR and use amodified chart-parsing algorithm for CF-PSG as a the-orem prover for reverse queries.I, b r  the purposes of the present paper we will intro-duce a DATR notat ion that  slightly differs fi'om thestandard notat ion given in Evans & Gazdar \[1989\] inthe following respects:?
the usual DATR abbreviat ion conventions are spelledout* the global environment of a DATR descriptor is ex-plicitly represented (even if it is uninstant iated)?
each node-path pair N:P is associated with the setof extensional suffixes of N:P that  are defined withinthe DATR theoryIn standard DATR notation, what  one might call anon-terminal  symbol, is a node-path pair (or an abbre-viation for a node-path pair).
In our notat ion a DATRnonterminal symbol is an ordered set \[N, P, (7, N ' ,  P'\].N and N ~ are nodes or variables ranging over nodes.P and P '  are paths or variables ranging over paths.
Cis the set of path suffixes of N:P.A DATR terminal symbol of a theory 0 is an atomthat  has at least one occurence in a sentence in 0 whereit is not an attr ibute,  i.e.
where it does not occur in apath.The suffix-set w.r.t, a t)refix p and a set of sequences S(written as alp, S)) is the set of the remaining suifixesof strings in S which contain thc prefix p: alp,  S) -{slp^s ~ S}.Let N:P be the left hand side of a DATR sentence ofsome DATR theory 0.
Let be II the set of pat, hs occur-ring under node N in 0.
The path extension constraintof P w.r.t.
N and 0 (written as C(P,N,O), or simplyc) is defined as: C(P, N, O) = G(I", n).Thus, the constraint of a path P is the set of path suf-fixes extending P of those paths that  have P as a prefix.Example :  Consider the DATR theory 0:N:<> == 0<a> == 1<a b> == 2.The constraint of <> (w.r.t.
N and 0) is {<a>,<ab>}, the constraint  of <a> is {< b >}, and the con-straint of <a  b> is ~.We s W that  a sequence S - st .
.. s,~ (1 _< n) satisfies aconstraint C ill {a: 6 cl.ax = s}  - ~ (i.e.
a sequenceS satisfies a constraint C iff there is no pretix of S inC).Now having defined some basic notions, we can givethe rules that map standard DATR notat ion ont;o ourrepresentation:Mapping rulesN:P =-- 0N:P == atonl ::~N:P == N2:1'2 ::>N:P == N2 =>N:P == P2 :::>N:P =--  "N2:P2"N:P =-- "N2"N:P == "P2" :=>\[N,P,C,N',P'\] -~ e\[N,P,C,N',P'\] -+ atom\[N,P,C,N',P'\] --+ \[N2,P2,C,N',P'\]\[N,P,C,N',P'\] -+ \[N2,P,C,N',P'\]\[N,P,C,N',P'\] --;.
\[N,P2,C,N',P'\]\[N,P,C,N',P'\] -~ \[N2,P2,C,N%P2\]\[N,P,C,N',P'\] -~ \[N2,P',C,N2,P'\]\[N,P,C,N',P'\] --+ \[N',I'2,C,N',I'2\]l low these inat)ping principles work can 1)erhaps best heclaritied by a larger example.
Consider the small DAq'R the-ory, below, wifich we will use ms an example case throughoutthis paper:House:<> == Noutl<root> == house.Sheep:<> : :  Noun<root.> == sheep<affix plur> :--- .Foot:<> == Sheep<root> == foot<root plur> == feet.Noun:<orth> --= "<root>"  "<affix>"<affix sing> ==<affix sing gen> == s<affix plur> == s.The appl ication of the mapping rules to the DATR the-ory above yields tile following result; (unstant iated vari-ables are indicated by bold letters):\[ I fouse,<>,{<root>},N',P' \]  ~ \[Noun,<>,{<root>},N',P' \ ]\[House,<root>,{},N',P'\] ~ houso\[Sheep,<>,{<root>,<atflx plur>},N' ,P' \ ]  -}\[Noun,< >,{ <root >,<affix plur> },N',P'\]\[Sheep,<root>,~,N',P '\] --+ sheep\[Sheep,<affix plur>,ql,N',P'\] --~ e\[Foot,<>,{<root>,<root plur>},N' ,P ' \ ] - -}\[Sheep,<>,{<root>,<root plur>},N',P' \]\ [Foot,<root>,{<plur>},N',P' \]  - ,  foot7090\[l.bot,<root plur>,(b,N',P'\] ~ feet\[Noun,<orth>,~,N',P'\] --* \ [N' ,<root>,~,N',<root>\]\[N',<aflix>,(t,N',<aflix>\]\[Noun,<allix sing>,{<gen>},N',P'\] -+ e\[Nmm,<a\[\[ix sing gen>,~,N',P'\] ~ s\[Noun,<aI\[ix plur>,0,N', l"\]  --~ sThe general aim of this (somewhat redundant;) notationis 1;o lint everyl;hing that is needed for drawing infm-trices from a sentence (especially its global enviromnentmM possibly compel;ing clauses al; the same node) intot, he rcpresenl;ation of the.
sentxmc(; itself.
Similar inter-hal representat ions are used in several I)ATII.
imple-lnentations.2 In fe rence  in DATRBol;h sl;mMmd inference a.nd reverse query inferencecan be regarded as COmlflex sul)stil;ul;ion Ol)eral, ions de-fined for sequences of DATR terminal and iiolt-l;Crtllinalsymbols which apply if part icular eal;thing crit(wia ~rr(:sal;istk!d.
In case of DATI{.
standa.rd procedural Selnan-tics, a step of inference is tim subst i tut ion of a I)ATt{IlonternfinM by a sequcnt:e of \])A'FR torminal and non-ternfinal symbols.
The matching criterion applies to agivon DAT\]{ query and the left hmld sides of the sen-tenets of the 1)A'HI, theory, if  the LfIS of a I)ATIIsentences atisfies the matching criterion, a modifiedvcrsioIl of the right ha.IM side is sttl)sl.il.lll;ed lbr theLItS.
Since the maL(:hing criterion is such l;hat there isat most one sent0.nce in a t)A:.HI theory with a match-ing I,HS, DATR standard inDrence is determilfistic mMfunctional.
The start ing point of DA'FR staiMm:d in-ference is single nonterminal  a.nd tim derivation processterminates if a Se(lUenc('.
of I.ernfinals is obl;ailmd (or ifthere is no IAIS in the theory that  sa.l;isfics the matchingcriterion, in which case the process of inference termi-tortes with a failure).In terms of DAq'\]I. roverse query t)rocedural semmt-tics, a step of inti;ren(;e is the.
subst itut ion of a sub-sc;qll{m(:(~ of a given sequence of I)ATR.
terminal andnon-terminal  symt)ols by a. I )ATlt non-ternfinal.
Timmatching criterion applies l,o the subsequence and the.right hand sides of the sentences o\[ the DATR theory.If the matching criterion is satisfied, a modifie.d ver-sion of the LHS of the I)ATlt  sentence is subst i tutedfor the m~tching subsequencc.
In contrast to I)A'FI/,s tandard inli!rmm(!, the matching c:riterion is sut:h thatthere might be several I)AT\]/.
senl;encos in a given t;hc-ory which satisfy il;.
DA\[I'II reverse query iM'erence ishence neither flmctional, nor deterministic.
Start ingpoinI; of a reverse query is a sequence of l;(n:lninals (avalll(!).
A th',rivati(m (,erminaI;cs, if the subst itut ionsfinally yield a singh; nonter\]uinal with identical \]oc, aland global cnvirolmmnt (or if there are no matchingsentences in the theory, in which case the dcrivatioilfails).We now define the inaA;(:hing criteria for I )ATR terminalsymbols, I)ATI{ nonterminM symbols and sequences ofDATft symbols.
These matching criteria relate extra>sional lemlnal;a (i.e.
already derived tmrtial analyses)to I )ATR definil;ional sentences (i.e.
"rules" that  mayyield a fm'tho, r roduction) w.r.t, a given DATR theory0.A term.thai symbol t, 'matches another tc.r'minal sy'm-bolt 2 ifl' t, - t2.
We also say that t, rrtatt'Jte.s t.2with art arbit~nry suJfi:c and art empty constTnint h, o fder to provide compatibi l i ty with the definitions tbrnontermimfls, below.1.
A nontcrmi'nal IN, 1'1, C1, N', P'\] matches anothernonto.rminal \[N, 12.2, C2, N', Pq with a s~tf.Jirr E a'nd aconstraint C2 if (@ H'2 = P~E,  &n(l (l)) E s;~|;isfies C1.2.
A nonterminal IN, P~, C1, N', i"\] match.ca notlmrnont, o.rminal \[N, P.e, C2, N', I"\] with an e.rnpt~/ s'uf/i:ca'ttd a constraint a(.\[~,Cu) if (a) P, = I~AI,:, and (b)E satisfies C~.Example :  The non-terminal  symbol \[Node, <ab>,{<c d e>},Nf,P\[I matches \[Node,<~ b c d>,~, N~, l~\] with suffix ,5' = <c d> and constraint ~.l?rom the definitions, giwm abovo., we can derive thematching criterion for sequences:1.
The ernpt!/ sequence matches the empty sequencewith a.n empty suffix and constraint  V).2.
A non-empty sequence of (terminal and non-tcrmilml) symbols s'~ .
.
.
s',~ (1 < n) matches another se-quen(:e of (terminal and non-terminal)  symbols sj .
.
.
s,,with suttix E mM constraint C if(a) for ca.all symbol sl (1 < i < n): s{ m~l;cho, s s,.
withsuffix /3 and constradnt Ci, and(b) C = C~ u (&  .
.
.
o C .
.To put it roughly, this definition requires thai: the sym-bols of the sequences match one another with the sarrte(possibly eml>ty) suffix.
Tho.
re'suiting constraint  of thes('.quence is t, he ration of the constraints of the sylnbols.Example :  The string of nontcrminal  symbols\[N1,<a>,C~,N'I,P'I\] \[N2,<x>,C>N'2,P'2\]matches \[Nl,<a b>,{<c>,<d>},N ' l ,P ' l \ ]  \[N2,<x b>,{ <e> } ,N'2,P'2\] with suffix <b> ~md constraint { <c>,<d>, <e>}.
:~aThe matching criteria, defined above, do not; cover non-t, erminals with evaluable paths, i.e.
paths that include (anarbitrary nu tuber of possibly recursively e.mbcdded) nonter-mimds.
The matching cril, erion for nonterminals has to beextended in order to account fl)r sLatemcnts with evaluabh~paths: l,et, lit!
eval(tt, e, 0) a funcLion I;hat maps a sl;ringof I)ATR t, erminal attd nonl, erHlinal symbols (~ = At ...  A,,on|;o a string of I)NH/.
terminals ~' such that (a) each ter-minal synfl)ol Ai(I < i < rt) in (~ is mapped onl, o il, self in:~, and (b) each nonU'*minal Aj \[Nj, l}, (5'~, Nj, \ [ j \ ]( l  <j < rl,) in ~ is mapped onto ell(; se, quence, a~.. .
aj '  in c~'such t;hat, N'j : l'^j e = aj ' .
.
,  aj '  in 0. ,A, refers to (recur-10913 The Algor i thmMetaphorically, DATR can be regarded as a formal-ism that exhibits a context-free backbone 4.
In anal--ogy to a eontext-flee phrase structure rule, a DATRsentence has a left hand side that consists of exactlyone non-terminal symbol (i.e.
a node-path pair) anda right hand side that consists of an arbitrary num-ber of non-terminal and terminal symbols (i.e.
DATRatoms).
I I l  contrast to context-free phrase structuregrmmnar, DATR nonterminals are not atomic sym-hols, but highly structured complex objects.
Addition-ally, DATR difli?rs from CF-PSG in that there is not aunique start symbol but a possibly infinite set of them(i.e.
the set of node-path pairs that, taken as the.
start-ing point of a query, yMd a value).Despite these differences, the basic similarity ofDATR sentences and CF-PSG rules suggests that, inprinciple, any parsing algorithm for CF-PSGs couhlbe a suitable starting point for constructing a reversequery algorithm for DATR.
The algorithm adoptedhere is a bottom-up chart parser.A chart parser is an abstract machine that performsexactly one action.
This action is monotonically addingitems to an abstract data-structure called ehart, whichmight be thought of as a graph with annotated arcs(which are also often referred to as edges) or a matrix.There are basically two diff'erent kinds of items:?
inactive items (which represent completed amdysesof substrings of the input string)?
active items (which represent incomplete analyses ofsubstrings of the input string)if one thinks of a chm't in terms of a graph structureconsisting of vertices connected by arcs, then an itemcan be defined as a triple (START, END, LABEL),where START and END are vertices connected by anarc labeled with LABEL.
Active and inactive itemsditfer with respect to the structure of the label, in-active items are labeled with a category representingthe analysis of the substring iven by the START andEND position.
An active item is labeled with a cate-gory representing the analysis for a substring startingat; START and ending at sorne yet unknown positionX (END < X) and a list of categories that still have tosire) DATR path extension (of.
Evans & ('azdar 1989a).Notice that e has no index and thus has to be the sametbr all nonterminals Aj.
Let X1 IN, 15, Ct, N', P'\] bea nonterminal symbol including an evaluable path PI.
Xtmatches \[N, P'2, C2, N', P'\] with a suffix /3.
and a constraint(L, if (at eval(Pt, 1,/, 0) = 7r, and (b) \[N, real'.
', C~, N', P'\]matches \[N, P'2, C~, N ~,/)q with suffix 15' and constraint C.,(according to the matching criteria, defined above).4The similarity of certain I)ATR sentences and context-free phrase structure rules has first been mmltioned in Gilt-bon \[1992\].l)e i)roven to he proper analyses of a sequence of con-nected substrings tarting at END and ending at X.For the purpose of processing DATR rather than CI,'-PSGs, each active item is additionally associated witha path sutfix.
Thus an active item has the structure:(START,END,CAT0, CATj ... CAT, ,  SUFFIX)Consider the following examples: the inactive item(0, 1, \[House,<orth s ing>,{<gen>},House,P' \ ] )represents the intbrmation that the substring of theinput string consisting of the first symbol is thevahm of the query House:<orth sing> (with arty ex-tensional path suffix, but not  gcn) in the globalenvironment hat consists of the node House andsome still uninstantiated path P ' .
The active item((),l,\[Noun, <orth>,0,House,P' \] ,\[Itouse,<affix>,O,House,P'\],e)represents the information that  there is a t)artial anal-ysis for a substring of the input string that starts withthe first symbol and ends somewhere to the right.
Thissubstring is the value of the query Noun:<orth> withinthe global environment consisting of the node Houseand some uninstantiated glohal path P ' ,  if there is asubstring starting from vertex 1 that turns out to hethe value of the query Itouse:< a~ix> in the same globalenvironment .IIousc:P '.The general aim is to get al inactive items la-.heled with a start symbol (i.e.
a DATR nonterminalwith identical local and global environment) for thewhole string which a derivable from the given gram-mar.
There are different strategies to achieve this.
Theone we have adopted here is hased on a chart-parsingalgorithm proposed in Kay \[1980\].Here is a brief description of the.
procedures:?
parse is the main proeedm:e that scans the i n l )u t  ,increments the pointer to the current chart position,and invokes the other procedures?
reduce searches t;he DATR theory for appropriaterules in order to achieve fllrther reductions of inac-tiw'~ items?
add-epsilon applies epsik)n productions?
complete combines inactive and active items?
add-item adds items to the chartWe will now giw'~ a more detailed description of theprocedures in a pseudo-code notation (the input argu-ments of a procedure are given in parentheses after theprocedure nainc).
Since the only chart-modif) ing ot>('.ration is carried out as a side effcc.t of the procedureadd-item, the,'e are no output wdues, at all.The procedure parse takes as input arguments a ver-tex that indicates the current chart position (in theinitial state this 1)osition is 0) and the suffix of the1092input str ing sUu'ting at this position.
As long its there.intoning suItix of tlm inlmt str ing is n(m-(;mpty, parsecalls the procedures add-cpsilon, red'ace, and complete,ilICI'{~IIR!II|;S I,h{!
pointer to l;he currel lt ,  ch;41:l; position,and si;m'i,s again with t.he new currelg; vcrLex.p rocedm'e  parsc(VEl{~Fl'3X, S I .. ?
,% )variables:VER3PEX, NEXT-.VER3~EX (integer)SI .
.
.
Sn (str ing of t)A'I'\]:L symbols)data: A DATR theory 0I) eg ini f  n > 0thenNEX'\[':VIBIIlI'I+,X :-- VI,;I/I\['EX + 1ca l l -p roe  ad<l:epsilon (VEI{;I'EX)ca l l -p roc  reduce(VEllSl 'EX, $1, NI, 'XT-VFI/TI,;X)ca l l -p roe  complete(VEI(Pl , ;X,  $1, NEX'I'-VEIIlFI,;N)ea l l -p roe  parse.
(NEXT-VEI IS\[ 'F,X,S2 .
.
.
S,,)else add-e.psilon (VEI/flT;X)en( iThe 17r<>ce<hn'e add-cpsilo'n ill,'-;(!l't;s ar<:s For the epsihmpr{}(lu{:ti{}ns inLo l;he charL:p rocedure  add- c.p,+il<m(V E\]{SI TBX)variables: VI,;R/IT;X (integer)data: A I)ATR, the,{Try 0i }eg info r -each  rule CAT ~ e: in 0ca.
l l -proc redu{:e(VEl{l 'EX, CAT, V\],;II3T;X)ca l l -p roc  (:omplete(Vl,;R'l?EX, CAT, VER\[PIBX)endThe, l}lO(:<~durc 'reduce Lakes all inactive item as tim in-l)tll; a,rgumcnL and s{~;~l{;h{!s l,}lO I)ATll, Llmory for tulcsthai; have a mat(:hinp; le, fl;-c{>ruer <:at<~g(}ry.
t,'or ea,(:hsuch rule f{mn{1, 'rc.d'acc inv{}kes tim lTr{Tc{~<htr{~ add..itcm.procedm'e  "red'ucc(Vi ,CATI,V2)data: A I )ATR theory 0beg inif is-tx~rminal(CA'l't )thenfi}r-e.aeh rllle\[No,Po,Co,N'o,P'o\] > CNI' j  .
.
.CAT , ,  in 0cal l - t}roc a<ld-itcn~(Vl ,V2, \[No ,1 }o ,C{}, N 'o, t' 'o\],CATI .
.
.
CAT,,,X)e lsefo r -each  rule\[No,l o, ,0,N 0,I 0\] > CATt ...({A'I',, in 0such t;ha.t ( JA f l '  matches (JATI with snlIix S;rod constra int  Cea l t -p roc  add il;{!in(Vt ,V2,\[N{,,I'{,,C u o(S,C0),N'{,,P'(,\], ::A%...CA%,S)e l ldThe procedure complete takes ;m inat:tiv(~ il;{;nl as a.ninpuL ~o',glllllelll; ittK\[ s(};/,7'c}los |;h(!
{;h&l'|; for ac t ive  il;elnSwhi(:h ('an tTe, c(TmI)leted wiLh it,.p rocedure  complete(V1 ,CAT,V2)data: A <:hart CIIbeg ini f  is-terminal (CAT)| ;hen  fo r -each  a.cl;ive item(Vo,V, ,CATo,CAT, CAT2 .
.
.
CAT,~,S) in CIIea l l -p roc  add- i tem(Vo ,V2,M,CAT2 .. .
CA'\]?,, ,S)e lse  fo r -each  act;iv(', il;em(V0 ,V~,\[No,I'o,(-Jo,N'o,I"o\],CAT, .
.
.
CAT,, ,S) in CIIsuch l;hat (JA'FI lna.t(:hes CAT with consl;rainL (',and su\[lix ,Sea l l -p rocadd-iten,(V,},V2,\[No,Po,o(S, G,)U C,N',P' \] ,CAT2 .. .
Cat,~,S)endThe procedure add.item is t;\[1(.'
chart -modi fy ing ope.r-al;i{Tn.
\[L t,akes an a{%ive item its an in lmt argttnw.tit.\[f Lhis acLive i{;em has no 1)ending categories, it L'; re-garded as a.n inact iw'  item.
In this case add-item ins(!rl, sa new (:harl enLry for t;he ilxm~, provided il; is not al-r('.ady includ{;d in l;he chart,  and calls the proceduresreduce ;rod cornplcl.< If tit(: i tem is an active item, thenit; is inserted hfl;o the (:hart;, provided it, is not ah'eadyinside.)
i ~ }I procedm'e  add-il.cm(V~ ,V:,\[No,l o,(,o,N o,t o\],(~A'l'~ .. .
CAT, ,S )data: A charl, CIIbeg ini f  CAT, .
.
.
CA'\[',~ -: ethe.nif ' ~A -, , , ), (V~,V~,\[No, I  oS ,Co ,N  o,1 o\]) E CItthen  end,',Is,, (3 \ [  ::: CII tO (Vt ,V2,\[No,I'~S,Co,N',,,P'o\])elseif(V, ,V~,\[No,Po,Co,N'o,I"o\],CAT~ ...  ( ;AT, ,S)  (- CIIthen  e.nde lse  CH : -  CII tO(VI,V2,\[N{I ' C ,v, ,} , lCv~,  .
.
.CAT, , ,S)end4 Cyc lesA hard problem ior I )ATR interpr(~ters are c:vclc,% i.e.I)ATI(, s tatements  and sets of I)N.\['I{ s tatements  wlfic, hinvolve r(;(:ursive detiifitions such thai; s tandard  infer-ence (71 reverse-query illf(!r(',Iic(~ (\[o(;s i1(7|; necess:u'ily Ix'r-in inate afLer a linite mlmber of steps of iMi,rence.
Here&l'(: SOIlIO (!X~l,IilpleS O\[' cycles:?
simple cgclc.s: N:<a> - : -  <a>.?
path lc'n.gthcning cycle.s: N:<a> =--  <a  a>.?
paUt .sh.orte'ain.9 C?lclc.s: N:<a a> =-= <a>.1093While simple cycles have to be considered as semanti-cally ill-formed and thus typically occur as typing er-rors only, both path lengthening and path shorteningcycles occur quite frequently in many DATR represen-tations.
Note that path lengthening cycles turn out tobe path shortening cycles in the reverse query direc-tion, and vice versa.
The DATR inference ngine canbe prevented from going lost in path-lengthening andpath-shortening cycles by a limit on path length.
Thisfinite bound on path length can be integrated into ouralgorithm by modifying the add-item procedure suchthat only items with a path shorter than the permittedmaximum path length are added to the chart.5 Complex i tyCF-PSG parsing is known to have a cubic complexityw.r.t, the length of the input string.
Though it is cru-cial for our approach that we exploit he CF-backboneof DATR for computing reverse queries, this result isof no significance, here.
I)ATR is %1ring-equivalent(Moser 1992d), and ~ISMng-equivalence has also beenshown for a proper subset of DATR (Langer 1993).These theoretical results may a priori outrule DATRas an implementation la guage for large scale real timeapplications, but not as a develot)ment environment forprototype l xica which can be transformed into efficienttask-specific on-line lexica (Andry et al 1992).
Witha finite bound on path length our algorithm works, inpractice 5, fast enough to be regarded as a usefifl toolfor the development of small and medium scale lexicain DATR.6 Conc lus ionsWe have proposed an algorithm for the evaluation ofreverse queries in DATR.
This algorithm akes DATR-based representations applicable for various parsingtasks (e.g.
morphological parsing, lexicalist syntacticparsing), and provides an important tool for lexicondevelopment and evaluation i  DATR.References\[Andry et al 1992\] F~'an(;ois Andry, Nor-man M. lh'aser, Scott McGlashan, Siraon Thorn-ton & Nick J. Youd \[1992\]: Making DATR Workfor Speech: Lexicon Compilation in SUNDIAL.
In:Cornp.
Ling.
Vol.
18, No.
3, pages 245-267.5A prolog implementation f the algorithm described in thispaper is freely available as a DOS executable program.
Please,contact he author for fllrther information.\[Cahill 1993\] Lynne J. Cahill: Morphonology in theLexicon.
in Sixth Co@fence of the E.uropean Chap-ter of the Association for Computational Linguis-tics, pages 87-96, 1993.\[Evans & Gazdar 1989a\] Roger Evans & Gerald Gaz-dar: Inference in DATR.
In li'o~tr'th Conference ofthe European Chapter of th, e Association for" Com-putational Linguistics, pages 66-71, 1989.\[Evans & Gazdar 1989b\] Roger Ewms & Gerald Gaz-dar: The Semantics of DATR.
In: Anthony G.Cohn led.\]: P~vcecdings of th, e Seventh Conferenceof the Society for" the Study of Artificial Intelligenceand Simulation of Behaviour, pages 79-87,London1989, Pitman/Morgan Kaufinann.\[Evans k Gazdar (eds.)
1990\] Evans, Roger & GeraldGazdar \[eds.\]: The DATR Papers.
Brighton: Uni-versity of Susse?
Cognitive Science Research PaperCSRP 139, 1990.\[Gazdar 1992\] Gerald Gazdar: Paradigm I~mctionMorphology in DATR.
In: L. J. Cahill & ll,iehardCoates \[eds.\]: Sussex Papers in General and Com-putational Linguistics: Presented to the Linguis-tic Association of Great Britain Conference atBrighton Polytechnic, 6th-8th April 1992.
Cogni-tive Science Research Paper (CSRP) No.
239.
Uni-versity of Sussex, 1992, pages 43-54.\[Gibbon 1992\] Dafydd Gibbon: ILEX: A linguistic ap-proach to computational lexiea.
In: Ursula Klenkled.\]: Computatio Linguae.
AuNiitze zur algorith-mischen nnd quantitativen Analyse der Sprache,pages 32-53.\[Gibbon 1993\] Dafydd Gibbon: Generalised DATRfor flexible access: Prolog specification.
En-glish/Linguistics Occasional Papers 8.
University ofBielefeld.\[Gibbon & Ahona 1991\] Dafydd Gibbon & FirminAhoua: DDATR: un logieiel de traitementd'hdritage par ddfaut pour la moddlisation lexi-cal.
Chiers Ivoriens de Recherche Linguistique ( ivl)27.
Universitd Nationale de C6te d'Ivoire.
Abidjan,1991, pages 5-59.\[Jenkins 1990\] Elizabeth A. Jenkins: Enhancementsto tbe Sussex Prolog DATR hnplemeutation.
I :Evans & Gazdar \[eds.\] \[1990\], pp.
41-61.\[Kay 1980\] Martin Kay: Algorithm Schemata ndData Structures in Syntactic Processing.
XEROX,Palo Alto.\[Kiltmry 1993\] James Kilbury: Para<ligm-BasedDerivational Morphology.
In: Giinther GSrz led.I:KONVENS 92.
Springer, Berlin etc.
1992, pages159-168.1094\[Langer 1993\] lt;~gen Langer: DATR without nodesmM global inheritance.
In: Proc.
of 4.
F;~chtagungDcklaTntivc und prozedurab~ Aspcktc d~r @Tnchvcr-arbcitung der \])GfS/CI~, University of Iiamburg,pages 7\]-76.\[Moser 1992a\] I,ionel Moser: DATR Paths as Argu-ments.
Cognitive Science Research l'al)e.r CSR,P216, University of Sussex, Brighton.\[Moser 1992b\] Lionel Moser: Lexical Consl;r~thlts in/)AT1L Cognitive Science Resea.rch Paper CSRP215, University of Susse, x, Brighton.\[Moser 1992(:\] Lionel Moser: Evaluation in DATRis co-NP-Itard.
Cognitive St:ience \[1.ese;~rch P;tperCSRP 240, University of Sussex, Brighton.\[Moser 1992d\] Lionel Moser: Simulating Turing M~L-chines in DATR.
Cognitive Scien(:(~ Research PaperCSRP 2411, Univ(,rsity of Sussex, Brighton.1095
