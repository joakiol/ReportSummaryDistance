Spelling Correction in Agglutinative LanguagesKemal  Of lazer  and Cemaledd in  G/ i zeyDepar tment  of Computer  Engineering and In format ion ScienceBi lkent UniversityAnkara, 06533, Turkeyko@cs, bilkent, edu.
tr1 In t roduct ionSpelling correction is an important component ofany system for processing text.
Agglutinative lan-guages uch as Turkish or Finnish, differ from lan-guages like English in the way lexical forms are gen-erated.
Typical nominal or a verbal root may gener-ate thousands (or even millions) of valid forms whichnever appear in the dictionary.
For instance, wecan give the following (rather exaggerated) exam-ple from Turkish:uygarla~tzramayabileceklerimizdenmi~sinizcesine 1whose morpheme breakdown is:uygar -lag -tzr -areacivilized +BECOME CAUS +NEG-yabil -ecek -let -irniz+POT +FUT +3PL +POSS-1SG-den -mi~ -siniz -cesine+ABL +NARR +2PL +AS-IFMethods developed for spelling correction for lan-guages like English (see the review by Kukich (Ku-kich, 1992)) are not readily applicable to agglutina-tive languages.
This poster presents an approach tospelling correction in agglutinative languages thatis based on two-level morphology and a dynamic-programming based search algorithm.
After anoverview of our approach, we present results fromexperiments with spelling correction in Turkish.2 Spe l l ing  cor rec t ion  a lgor i thmOur approach comprises two-steps: (1) determiningall the roots from the dictionary that can be the rootof the misspelled word, and (2) generating (system-atically) all the possible words that "resemble" thegiven character string, from these roots.
The firststep of the problem is relatively easy because of thestatic structure of the root dictionary.
Techniquesdeveloped for spelling correction, say, in English canusually be applied here.
The second step involvesproducing all the possible words from the selectedroots and requires a generate and test search proce-dure.1This is an adverb meaning roughly "(behaving) asif you were one of those whom we might not be ablecivilize.
"We denote the set of the surface forms of the rootsin the language by R. We denote by X and Ystrings formed using the alphabet of the language.X will denote the surface form of the incorrect ormisspelled string, and Y will typically denote thesurface string that is a (possibly partial) candidateword.
Yle~ will denote the lexical form of this candi-date string?
We assume the existence of a function,surface() to generate surface strings from lexical st-rings, i.e., surface(Yze~) = Y.
The edit distancemetric ed(Z ,Y )  (Du and Chang, 1992) measureshow many unit operations (insertion, deletion, re-placement of single character and transposition oftwo adjacent characters) are necessary to convertone string X into another Y.We would like to abstract he behavior of a mor-phological generator and analyzer for the given lan-guage by two finite state automata.
A finite stategenerator Mg = (P, 6, V, S, F) where P is a set ofstates, $ is the state transition function, V is theoutput alphabet, S is the starting state, and F isa set of final states, generates, all correctly formedwords of the language.
The transitions of Mg areof the form /5(pi) = pj (Pi and pj 6 P), with anoutput v~ 6 V which denotes the lexical form ofa morpheme in the language and also labels thetransition.
It should be noted that it is possible togo from one state Pi to another pj by more than onetransition, outputting a different morpheme.
We saya string Ytez is generated by Mg, if Y)e, is formedby concatenating, in order, the outputs of the ma-chine as we traverse starting from S to one of thestates in F. We denote by L(Mg) as the set of alllexical strings generated by Mg. We also assume afinite state recognizer Mr which recognizes whethera given surface string is in the language or not.The spelling correction problem can now be for-mulated as follows: Given an incorrect word X(rejected by Mr), a!ad an edit distance thresholdt, find the solution set of possible correct wordsS(X,t) = {Yled(X,Y) < t and Y = surface(Yt~,)and Y~e, 6 L(Mg)} in viable time and space.2Lexical and surface are used in the two-level mor-phology sense.194The set of all the possible roots for the incorrectword X is defined as PR(X,t) = {r \[ ed(X\[i\],r) <t and 1 < i < m and r E R}.
3 We assume thatPR(X,t)  can be computed by a standard q-gramtechnique.
Using a small number (3 - 5) of 2-grams,gives satisfactory solutions in our case.Assuming that we have a set of root words foundas described above, we now have to generate words inthe language having these roots, that do not deviatefrom the given misspelled string by more than thethreshold.
The solution requires a generate and testprobing of the finite-state automaton Mg, startingwith the start state S. We now have to find all thepaths from this state to one of the final states usingthe roots in PR(X, t), so that when the morphemesalong this path are concatenated and surface stringis generated, it is within an edit distance t of X.When the search starts morphemes are concate-nated to root and the length of the candidate lexicalstring Yle~ increases.
After one step of the search,the partial surface string Y is compared with a suit-able prefix of X.
In most of the cases the candidateY will deviate from these prefixes of X by more thanthe threshold without reaching a final state, so thatwe can no longer get to a viable solution.
In suchcases we do not consider any further transitions fromthat state.
Special attention has to paid when a suf-fixation changes the surface realization of morphemeimmediately to the left.3 Resu l ts  f rom exper iments  w i thspe l l ing  cor rect ion  in  Turk i shWe first present a spelling correction example fromour implementation where we used bigrams (q = 2),and we chose the number of bigrams to use for deter-mining the root, k, as 3 (see Figure 1).
We testedEXAMPLEMisspelled t:word: qal?rnalamylaThreshold : 2Solutions: yam?malamyla yatl?malanylaon left edge yapl?malarlyla yakl?malarlylai?~,?malamyla qlk1?rnalarlylaCandidate lq.oots:46a~ qakl 6al qah qam qan 6ap gar qat qatlqag qak qakl?
qal qah?
~ap qat qatl?
qav~av qaySolutions: 5 Lexical SurfaceEdit distance 1 <jat+H?+mA+lArH+ylA qatl?malanyla~ap+ H?-b rnA+lArH-bylA qapl?malamylaqah?-l-mA+lArH+ylA ~ah?rnalarlyla (corr.
)Edit Distance 2 qav+mA+lArH+ylA qavmalamylaq'at +mA+IArH+ylA  qatmalamylaFigure 1: Spelling correction example3X\[i\] denotes the string of the first i characters of X.4The duplicate entries in the list of candidate rootsin fact have different part-of-speech categories andhencedifferent morphota~=tics.5A small subset of the whole solution set is given, dueto space limitations.Table 1: Average number of operations per mis-spelled word.i IR cl?en L Ed.
is.
30.9 311.22 108.4 4462.0Ed6peDrm" I S?ln" \] %Accuracy2498.4 3.6 95.120680.4 52.0 95.1our algorithm on a set of 141 randomly selected in-correct words from Turkish text with edit distances1 (86%) and 2 (14%) to their correct form.
Themorphological nalyzer and generator that we usedwas our two-level specification for Turkish (Oflaser,1993), developed using the PC-KIMMO system.
Itis, however, rather slow and can analyze only about2 forms per second and can generate about 50 formsa second on Sun Sparcstations.
So, instead of usingtimings, we counted the number of times certain ex-pensive operations we called.
The statistics hown inTable 1 show the average number of morphologicalrecognitions and generations, and the edit distanceoperations required, and the number of correct solu-tions offered per misspelled input word.
The last col-umn indicates the percentage of cases the intendedcorrect form was found.
We also have developed aalgorithm for ranking the solutions which offers theintended correct form as the first in 74% of the caseswhen t = 1.4 Conc lus ionsThis poster has presented a spelling correction algo-rithm for agglutinative languages that is based on atwo-level morphological generator and analyzer, anda intelligent generate and test search procedure.5 AcknowledgementThe research was supported in part by a NATO Sci-ence for Stability Grant, TU-LANGUAGE.ReferencesM .W.
Du and S. C. Chang.
1992 A model and a fastalgorithm for multiple errors spelling correction.Acta Informatica, 29:281-302.K.
Kukich.
1992 Techniques for automatically cor-recting words in text.
ACM Computing Surveys,24:377-439.K.
Oflazer.
1993 Two-level description of Turkishmorphology.
In Proceedings of the Sixth Confer-ence of the European Chapter of the Associationfor Computational Linguistics, April.
A full ver-sion appear in Literary and Linguistic Computing,Vol.9 No.2, 1994.195
