Hyper textua l  Grammar  Deve lopment  *Luca Dini and Giampaolo MazziniCentro per l'Elaborazione del Linguaggio e dell'Informazione (CELI)Via G. Ferraris 109, Palazzo Tartara 13100 Vercelli (Italy)E-mail: {mazzini ,dini}~celi.
sns.
itAbst ractWe will present a new model of grammardocumentation which exploits the poten-tialities of an hypertextual representationof lingware.
As we will show this modelinsures the following benefits:?
Constant coherence between the doc-umentation and the various pieces oflinguistic information.?
Valuable organization of the linguis-tic knowledge, in order to increase theproductivity of the grammar writer.?
Possibility of sharing grammatical re-sources and related documentationwith other sites in a completely intu-itive way.1 IntroductionIn recent years a big stress has been put on the viewof grammar development as a subtype of softwaredevelopment.
The attention reserved to phases likegrammar design, testing and validation, as well asthe key role assumed by issues such as reusabilityand portability, is a clear sign of the tendency tonarrow the gap between grammar and software de-velopment (Nagao 1988, Boitet 1989, Schfitz 1995).A further element of similarity is represented bythe fact that grammar development is nowadays al-ways involving more than one single grammar de-veloper, the standard situation being one of coop-eration among different sites (cf., for instance, theLS-GRAM, ERGO, and Vermobil scenarios).
In thisrespect, it mirrors the same evolution of industrialsoftware systems, which privileged a distributed ar-chitecture over a centralized one.We are grateful for suggestions and discussions toGregor Erbach, Stephan Oepen, Axel Theofilidis.There is a point, however, where methodologiesin grammar writing and in software ngineering stilldiverge: documentation.
It has been pointed outby many authors (e.g.
Metzeger & Boddie 1996)that documentation should take at least 10% ofthe person-power allocated to a project, and that,in any case, documentation should be taken as se-riously as design, programming and testing.
Forthese reasons, different programming styles have de-veloped different techniques in order to guaranteeboth consistency and user-friendliness of documen-tation, the most striking example being representedby Computer-Aided Software Engineering, whichevolved, originally, as a tool for software documen-tation.On the side of grammar engineering, on the con-trary, the topic seems to have been underestimated,and even projects where grammar documentationwas central (such as LS-GKAM) conceived it in aquite traditional and obsolete way, i.e.
as a processof editing huge reports after the end of the imple-mentation phase (cf.
the criticisms to this approachmade by Booch (1996)).The present work aims at providing a new modelof grammar documentation, byexploiting the poten-tialities of an hypertextual format.
As we will showour model insures the following benefits:?
Constant coherence between the documentationand the various pieces of linguistic information.?
Valuable organization of the linguistic knowl-edge, in order to increase the productivity ofthe grammar writer.?
Possibility of sharing grammatical resourcesand related documentation with other sites ina completely intuitive way.The program implementing this model (Hyper-Gram) is currently fully compatible with ALEP, andit will be soon integrated with PAGE.
In any case,24its extension to other grammar development plat-forms is quite unproblematic, and in the future wewill consider the integration with a broader ange ofgrammar development tools.2 Des iderata2.1 Documentat ion  in Sof tware andGrammar  Eng ineer ingIn Booch (1996) documentation-driven projects aredescribed as a "...degenerate of requirements-drivenprocesses, a case of bureaucracy gone mad in the faceof software...".
Their most salient feature is the needof producing documentation packages as deliveriesfor the various phases of the project.
What usuallyhappens in these cases is that the implementativework stops a couple of weeks before the deadline,and a massive documentation work is performed,all in once, until the delivery is pushed out of thedoor.
On the contrary, in standard requirements-driven projects there is no temporal gap betweencode writing and documentation writing (cf.
alsoMetzeger & Boddie, 1996).This situation can be generalized to grammarwriting, where the standard practice seems to con-fine the writing of the documentation to a kind ofleftovers.
As a consequence, in many cases, docu-mentation does not reflect the rationale under cer-tain choices of the implementation, but reduces toan informal description of formally represented lin-guistic structures.
Moreover, in successive releasesof the same implementation, the links between thedocumentation and the implementation tend to be-come weaker and weaker.
In big projects it is almostimpossible to ensure the coherence between the im-plementation and the documentation.This situation is particularly problematic in casesof distributed grammar development, when moresites are involved in cooperative work.
Under thesecircumstances, lack of synchronization between doc-umentation and real code could cause serious com-munication problems and a general delay in the workflOW.Also, both reusability and usability are affectedby poor or incoherent documentation.
On the sideof reusability, the costs for learning and maintainingan undocumented grammar are often comparable tothe costs of a development from scratch.
On the sideof usability, grammar documentation is the base forproducing final user documentation, without whichno natural language system will ever be able to at-tract any industrial user (cf.
Zoeppritz, 1995).2.2 Documentat ion  in GrammarEng ineer ingOne of the key point of recent developments inGrammar Engineering is represented by the conver-gence of certain linguistic theories (e.g.
LFG andHPSG) and real grammar development (cf.
Cole& al 1997, Ch.
3.3).
Thus, certain theoreticalresults can be easily incorporated in actual imple-mentations, and certain computational treatmentshave proved to be able to provide valuable hints totheoretical research.
This mutual relationship con-stitutes a good rationale for the view of grammarwriting mainly as documentation writing.
Both thephase of grammar design and implementation couldbe conceived as the production of a set of abstractlinguistic generalizations, where the actual imple-mentative platform only plays a role in restrictingthe power of the tools to express such generaliza-tions.
Indeed, as soon as migration tools among dif-ferent platforms are available (cf.
Dini 1997, Bloch1997, EAGLES 1996) the concrete syntax of the im-plementation plays a much lighter role than in thepast, and the documentation becomes, in a sense,the grammar.
1 From the opposite perspective, theavailability of clear and well designed ocumentationwould would make grammar eports attractive fortheoretical linguists (Cf.
Erbach & Uszkoreit 1990).3 HyperGramHyperGram (Hypertextual Grammars) is a modelfor grammar development and documentation i -spired to the idea of literate programming, which wasfirst proposed by Knuth (1974) (cf.
Knuth (1992),for an overview).
Actually, the main source of inspi-ration is the hyper-literate programming approach(Steinman ~; Yates 1995, 1996), a revision of liter-ate programming stressing the importance of hyper-textual connections between pieces of code, in orderto increase both the quality of the documentationand the productivity of the programmer.
ThereforeHyperGram is meant o serve as a tool both for doc-umenting rammars and for facilitating the work ofthe grammar engineer.
21The similarity with the literate programming ap-proach immediately comes to mind.
Such a similaritywill be emphasized in section 3 where the HyperGrammodel will be presented.2In a sense, documentation tools need to be tailoredwith respect o the kind of linguistic organization (orlinguistic theory) which is chosen as the basis for theimplementation.
In the case we are considering in thispaper, we have in mind a typed, unification-based userlanguage, which fits very well the hypertextual organi-zation of the lingware.
Indeed values of attributes are25The main goals that the model is intended toreach, which, we think, constitute possible answersto real needs of a typical user of systems like ALEPor PAGE in the context of a grammar developmentproject, are the following:1.
It allows to produce an updated printed docu-mentation at any stage of the process of gram-mar development, avoiding inconsistencies be-tween the real grammar code and the code ex-emplified in the report; inconsistencies of thissort are frequent in standard reports.2.
It produces an hypertextual version of the doc-umented resources, which can be directly madeavailable for public consultation, e.g.
via theInternet;3.
It provides the grammar writer with the possi-bility of accessing the lingware during the de-velopment or debugging work, by means of aunique hypertextual interface, which empha-sizes user-friedliness and efficiency.
This inter-face allows the direct interaction with the realgrammar modules which can be edited, modi-fied, compiled and so on.4 HyperGram's ModulesThe general organization of the HyperGram system 3is shown in fig.
1, where the relations between thevarious modules and the linguistic resources aremade explicit.
The basic idea is that during the pro-cess of grammar production an integrated HTMLtext containing both the documentation and thelinks to the lingware is maintained.
Such a reportwill be available at any time either for browsing (us-ing a standard http compliant program) or print-ing.
The coherence between the HTML version ofthe lingware and the one which is actually compiledis preserved through a set of automatic ompilationsteps completely transparent to the grammar engi-neer.
Also the distinction between "reporting" and"implementing" looses much of its importance, asrelevant pieces of documentation can be accessedand modified in a hypertextual fashion directly dur-ing grammar editing.
The single conversion stepsare described in details in the remaining sections.easily understandable as links to piece of informationcontained in the type system.
These pieces of informa-tion, the types, refer, in turn, to other sets linguisticconstraints which can be analougously interpreted in ahypertextual fashion.3The instance of HyperGram that we will describein the following is centered on documentation f ALEPlingware.
Analogous considerations hold for the PAGEversion.4.1 HG-convers ionThe module labeled as HG-conversion in fig.
1 is aprogram written in emacs-l?sp aimed at assigningan hypertextual structure to the lingware files usedby the system.
The various conversion steps are thefollowing:* The lingware files (written in plain ASCII) areassigned a basic HTML tagging, in such a waythat the original indentation of the code (forinstance the one automatically produced byemacs modes for grammar editing) is main-tained (using the <PRE> tag).
The originallingware files are of course left unchanged, whilethe HTML files (HTML lingware, in the figure)are saved in a directory specified by the userwhen the HyperGram system is configured.
* Some hypertextual links among linguistic de-scriptions used in the lingware are expressedby means of the standard anchor mechanism ofHTML, by interpreting the grammar formalism.The main idea is to use hypertextual links toexpress the logical relations holding among thevarious objects involved in the grammar struc-ture, namely types, phrase structure rules andmacros (or templates).
For instance, whenevera type or a macro is used as the value of anattribute in a linguistic description of any sort(i.e.
a type declaration, a rule, or the body ofa macro definition), an HTML anchor is pro-duced, pointing to the definition of the relevanttype or macro; when a type is introduced in thetype declaration, it is anchored to the fragmentsof hierarchy where it appears.
And so on.4.2 Integrated ReportIn order to produce an integrated HTML version ofthe documentation, the following preconditions haveto be satisfied:?
Every rule, or type declaration or macro defini-tion in the lingware is labeled by means of anunambiguous identifier.
This identifier can beexpressed either as the value of a specific at-tribute in the body of the expression, or as anexternal comment.?
Wherever a particular piece of lingware code isspecifically documented in the report, a pointerto its identifier (in the sense specified above) isinserted, rather than a copy of the code itself;let us refer to that pointer as main pointer.
Ifthe code is referred to in other sections of thereport, then a different pointer to the same iden-tifier has to be established (secondary pointer).26( )IReportALIEP ling.HG-conver~ianHTML ling.linking|W3~lr~HG hlml21+4mxFigure 1: The general work flow of HyperGramUnlike the main pointer, which must be unique,it is possible to specify many secondary pointersto the same identifier.Once these relations between the documentationtext and the documented code are made explicit bythe grammar writer, the integrated hypertextual re-port is automatically produced by a compiler (themodule labeled linking in the figure).The work done by this compiler is rather sim-ple.
It converts the pointers and identifiers describedabove into HTML anchors, with the following gen-eral organization:The pointers used in those sections of the reportwhere parts of code are documented (i.e.
themain pointers) are translated into anchors tothe appropriate rules (or types or macros) inthe HTML-lingwaxe files containing them;Similar anchors are established in all the otherpoints of the report where a rule is referred toby means of a secondary pointer,In the HTML-lingware, each object is anchoredto the section of the report where it is morespecifically described: namely, where its mainpointer is declared.In this way an updated, standard HTML-basedhypertextual version of the whole grammatical mod-ule and of the related documentation is in principleavailable at any time for Intranet/Internet consulta-tion.4.3 Documentat ion  Pr in t ingIn spite of our belief that the best format to de-liver grammar documentation is the hypertextualone, there might be case where also printed docu-mentation is required.
Thus we developed a moduleaimed at producing a printable version of the doc-umentation, labeled as HG html21atex in fig.
1.
Aset of emaes- l i sp  functions is devoted to convertthe original hypertextual documentation, which, asdescribed above, is assumed to have been origi-nally written in HTML format, into a printableLATEXdocument.The HG html21atex module interprets the point-ers and the identifiers declared in the report and inthe grammar files respectively, as described above insection 4.2.
As a result, every rule or type or macrois included in the printed report in only one point,27namely where the main pointer to :it has been pre-viously declared.
This is automatically done by theprogram, which retrieves the parts of code associ-ated to each pointer from the actual grammar files,and includes them in the report at the appropriateplace.In all the other parts of the report where a piece oflingware is mentioned, but not specifically described,a ~,TF_ ~ internal cross-reference is introduced.
Thisis precisely the reason for the use of different ypes ofpointers in the report (see 4.2 above).
Indeed, underthis assumption, the point where the code must ap-pear in the printed report is unambiguously specifiedby means of the unique main pointe.r.
In the hyper-textual version of the integrated report this kind ofdistinction is not relevant, as any reference to thelingware is simply an anchor to a specific part of alingware file.4.4 Browsing and Editing the LingwareThe interface chosen in the HyperGram model forthe hypertextual navigation within the lingware andthe associated ocumentation is the emacs-internalHTML browser emacs-w3.A set of specific emacs-lisp functions have beenadded in order to integrate the standard navigationprocedures with the possibility for the user to ac-cess the source lingware, to edit it and, possibly,to compile it in the relevant grammar developmentplatform.
Crucially, the HTML version of lingwarefiles should never be accessed by the grammar devel-oper; it is automatically produced or updated oncethe lingware has been modified.
Moreover, the userfriendliness of the navigation through the lingwareis enhanced by making explicit the type of relationexpressed by an anchor (for instance the relation be-tween a type used as a value in a rule and its def-inition in the type theory) by means of a specialformatting, such as a particular font or color for thetext.Here is how the browsing mechanism within gram-mar files will look from the point of view of the user:?
having an existing grammatical file (call itrg._fi le), written in the relevant user language,a single command in an emacs buffer will al-low the user 1) to create an updated HTML file(hg_.file) bearing all the information describedabove in terms of internal and external hyper-textual inks; 2) to invoke the emacs-w3 browseron that file; and 3) to browse it.?
if an anchor that points to a different grammarfile is followed, the relevant hg_file is generatedif it does not exist, while if it is already existent,it is updated when necessary (i.e.
if the corre-sponding rg_file has been modified after the dateof its creation).when browsing an hg_file in a emacs-w3 buffer,a single command allows to switch to the un-derlying rg_file, with the cursor located in thesame region.
A parallel command allows to goback to the hypertext, which is automaticallyupdated if necessary, namely if the rg_file hasbeen modified; also in this case the cursor loca-tion is maintained.The whole mechanism allows the grammar writerto systematically use hypertextual navigation withinthe grammatical module, taking a possible advan-tage from the fact that the hypertextual model pro-posed here makes some relations among linguisticobjects explicit.
Since it is important o keep inmind these relations when working on a complexgrammar, with a highly structured type theory, thehypertextual approach could provide a substantialhelp to the grammar writer.
In many cases, it couldrepresent a preferable alternative to the use of moresophisticated tools for graphical representation oflinguistic objects, in that, on the one hand, it is fullyintegrated with the editing tool, and, on the otherhand, it covers in an uniform way all the object usedin the grammar module, not only the type theory.5 Conc lus ionsThe system is oriented towards the need of fastgrammar development, easy training for researcherswhich start working on an existing grammar, andhigh quality documentation, which are undoubtedlycrucial points for the success of a grammar projectbased on available language engineering platformsand for the reusability of its results.
These needsemerge with a particular elevance when consider-ing distributed projects for grammar developmentwhere both information sharing among cooperatinggroups and public dissemination of the results viathe World Wide Web become crucial.Also, the possibility of producing in short timepaper versions of the documentation seems to fit theneeds of a standard grammar development projects,where many checking points are still based on theevaluation of printed documentation.ReferencesBoitet, Charles, 1989, Sofwteare and Lingware En-gineering in Modern M(A)T Systems.
In I.S.Batori, W. Lenders and W. Putschke, Computa-tional Linguistics - An International Handbook28on Computer Oriented Language Research andApplications, Walter de Gruyter, Berlin andNew York.Booch, Grady (1996).
Object Solutions.
Addison-Wesley, Menlo Park, CA.Cole, Ronald; Joseph Mariani; Hans Uszko-reit; Annie Zaenen; Victor Zue, (1997).Survey of the State of the Art in Hu-man Language Technology.
Web version:http ://www.
cse.
ogi.
edu/CSLU/HLTsurvey/.Dini Luca (1997).
The ALEP2PAGE GrammarTranslator, In Proceedings of the 3rd ALEPUser Group Workshop.
IAI, pp.
27-33.EAGLES (1996).
Formalisms Working Group Fi-nal Report.
Version of September 1996.Erbach, Gregor; Hans Uszkoreit (1990).
GrammarEngineering: Problems and Prospects.
CLAUSReport No.
l, July 1990.Metzeger, Philip; John Boddie (1996).
Managing aProgramming Project.
Prentice Hall PTR, NewJersey.Knuth, Donald E. (1974).
Computer Programmingas an Art.
In Communications of the ACM 17,pp.
667-673.Knuth, Donald E. (1992).
Literate Programming.CSLI Lecture Notes, no.
27.Schiitz, JSrg (1995).
Language Engineering - Fix-ing Positions.
IAI Memo, ME0695Steinman, Jan; Barbara Yates (1995).
ManagingProject Documents.In TheSmalltalk Report, June 1995, also available athttp ://www.
Byt esmi~hs, tom/pubs/index, h~ml.Steinman, Jan; Barbara Yates (1996).
Doc-uments on the Web in The Smalltalk Re-port, June/July 1996, also available athttp ://www.
Byt esmiths, com/pubs/index, html.Zoeppritz, Magdalena (1995).
Software Er-gonomics of Natural Language Systems, in Lan-guage Engineering, Gerhard Heyer and HansHaugeneder Eds., Vierweg, Wiesbaden.29
