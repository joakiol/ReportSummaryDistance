DATR Theories and DATR ModelsBill KellerSchool of Cognitive and Computing SciencesThe University of SussexBrighton, UKemail: billk@cogs.susx.ac.ukAbst ractEvans and Gazdar (Evans and Gazdar,1989a; Evans and Gazdar, 1989b) intro-duced DATR as a simple, non-monotoniclanguage for representing natural anguagelexicons.
Although a number of implemen-tations of DATR exist, the full language hasuntil now lacked an explicit, declarative se-mantics.
This paper rectifies the situationby providing a mathematical semantics forDATR.
We present a view of DATR as a lan-guage for defining certain kinds of partialfunctions by cases.
The formal model pro-vides a transparent treatment of DATR'snotion of global context.
It is shown thatDA-I'R's default mechanism can be accoun-ted for by interpreting value descriptors asfamilies of values indexed by paths.1 In t roduct ionDATR was introduced by Evans and Gazdar (1989a;1989b) as a simple, declarative language for repre-senting lexical knowledge in terms of path/valueequations.
The language lacks many of the con-structs found in general purpose, knowledge repre-sentation formalisms, yet it has sufficient expressivepower to capture concisely the structure of lexicalinformation at a variety of levels of linguistic des-cription.
At the present ime, DATR is probably themost widely-used formalism for representing natu-ral language lexicons in the natural language pro-cessing (NLP) community.
There are around a do-zen different implementations of the language andlarge DATR lexicons have been constructed for usein a variety of applications (Cahill and Evans, 1990;Andry et al, 1992; Cahill, 1994).
DATR has beenapplied to problems in inflectional and derivationalmorphology (Gazdar, 1992; Kilbury, 1992; Corbettand Fraser, 1993), lexical semantics (Kilgariff, 1993),morphonology (Cahill, 1993), prosody (Gibbon andBleiching, 1991) and speech (Andry et al, 1992).
Inmore recent work, the language has been used toprovide a concise encoding of Lexicalised Tree Ad-joining Grammar (Evans et al, 1994; Evans et al,1995).A primary objective in the development of DATRhas been the provision of an explicit, mathematicallyrigorous emantics.
This goal was addressed in oneof the first publications on the language (Evans andGazdar, 1989b).
The definitions given there dealwith a subset of DATR that includes core features ofthe language such as the notions of local and globalinheritance and DATR's default mechanism.
Howe-ver, they exclude some important and widely-usedconstructs, most notably string (or 'list') values andevaluable paths.
Moreover, it is by no means clearthat the approach can be generalized appropriatelyto cover these features.
In particular, the formal ap-paratus introduced by Evans and Gazdar in (1989b)provides no explicit model of DATR's notion of glo-bal contexL Rather, local and global inheritance arerepresented by distinct semantic functions ?
: and G.This approach is possible only on the (overly restric-tive) assumption that DArR statements involve eit-her local or global inheritance relations, but neverboth.The purpose of the present paper is to remedythe deficiencies of the work described in (Evans andGazdar, 1989b) by furnishing DATR with a trans-parent, mathematical semantics.
There is a stan-dard view of DATR as a language for representing acertain class of non-monotonic inheritance networks('semantic nets').
While this perspective providesan intuitive and appealing way of thinking about thestructure and representation f lexical knowledge, itis less clear that it provides an accurate or particu-larly helpful picture of the DATR language itself.
Infact, there are a number of constructs available inDATR that are impossible to visualize in terms ofsimple inheritance hierarchies.
For this reason, thework described in this paper reflects a rather diffe-rent perspective on DATR, as a language for definingcertain kinds of partial functions by cases.
In the fol-lowing sections this viewpoint is made more precise.Section 2 presents the syntax of the DATR languageand introduces the notion of a DATR theory.
An55informal introduction to the DATR language is pro-vided, by example, in section 3.
The semantics ofDATR is then covered in two stages.
Section 4.1introduces DATR interepretations and describes thesemantics of a restricted version of the language wit-hout defaults.
The treatment of implicit informationis covered in section 4.2, which provides a definitionof a default model for a DATR theory.2 DATR Theor iesLet NODE and ATOM be disjoint sets of symbols (thenodes and atoms respectively).
Nodes are denotedby N and atoms by a.
The set DESC of DATR valuedescriptors (or simply descriptors) is built up fromthe atoms and nodes as shown below.
Descriptorsare denoted by d.?
a E DESC for any a E ATOM?
For any N E NODE and dl.
.
.dn E DESC:N : (d l ' "dn)  E DESC"N  : (dl -- .dn)" E DESC"(dl "- 'dn)" ?
DESC"N" ?
DESCValue descriptors are either atoms or inheritancedescriptors, where an inheritance descriptor is fur-ther distinguished as either local (unquoted) or glo-bal (quoted).
There is just one kind of local descrip-tor (node/path), but three kinds of global descriptor(node/path, path and node) 1A path (al...an) is a (possibly empty) sequenceof atoms enclosed in angle brackets.
Paths are deno-ted by P. For N a node, P a path and a ?
ATOM* a(possibly empty) sequence of atoms, an equation ofthe form N : P = a is called an extensional sentence.Intuitively, an extensional sentence N : P = a statesthat the value associated with the path P at nodeN is a.
For ?
a (possibly empty) sequence of valuedescriptors, an equation of the form N : P == ?is called a definitional sentence.
A definitional sent-ence N : P - - -  ?
specifies a property of the node N,namely that the path P is associated with the valuedefined by the sequence of value descriptors ?.A collection of equations can be used to specify theproperties of different nodes in terms of one another,and a finite set of DATR sentences 7- is called a DATRtheory.
In principle, a DATR theory 7" may consistof any combination of DATR sentences, either defini-tional or extensional, but in practice, DATR theoriesare more restricted than this.
The theory 7- is saidto be definitional if it consists solely of definitionalsentences and it is said to be functional if it meetsthe following condition:1The syntax presented in (Evans and Gazdar, 1989a;Evans and Gazdar, 1989b) permits nodes and paths tostand as local descriptors.
However, these additionalforms can be viewed as conventional bbreviations, inthe appropriate syntactic ontext, for node/path pairsN : P == ~b and N : P == ?
E 7" implies ~b = ?There is a pragmatic distinction between defini-tional and extensional sentences akin to that drawnbetween the language used to define a database andthat used to query it.
DATR interpreters conventio-nally treat all extensional sentences as 'goal' state-ments, and evaluate them as soon as they are en-countered.
Thus, it is not possible, in practice, tocombine definitional and extensional sentences wi-thin a theory 2.
Functionality for DATR theories, asdefined above, is really a syntactic notion.
Howe-ver, it approximates a deeper, semantic requirementthat the nodes should correspond to (partial) func-tions from paths to values.In the remainder of this paper we will use the term(DATR) theory always in the sense functional, defi-nitional (DATR) theory.
For a given DATR theory7" and node N of 7", we write 7"/N to denote thatsubset of the sentences in 7" that relate to the nodeN.
That  is:T/N  = {s e 7-Is = N : P == ~b}The set T IN  is referred to as the definition of N(in 7-).3 An  Overv iew o f  DATRAn example of (a fragment of) a DATR theory isshown in figure 1.
The theory makes use of somestandard abbreviatory devices that enable nodesand/or paths to be omitted in certain cases.
Forexample, sets of sentences relating to the same nodeare written with the node name implicit in all butthe first-given sentence in the set.
Also, we writeSee : 0 == Verb  to abbreviate the definitionalsentence See:  0 == Verb  : 0, and similarly else-where.The theory defines the properties of seven nodes:an abstract Verb  node, nodes EnVerb ,  Aux  andModa l ,  and three abstract lexemes Walk,  Mowand Can.
Each node is associated with a collec-tion of definitional sentences that specify values as-sociated with different paths.
This specification isachieved either explicitly, or implicitly.
Values givenexplicitly are specified either directly, by exhibitinga particular value, or indirectly, in terms of localand/or global inheritance.
Implicit specification isachieved via DATR's default mechanism.For example, the definition of the Verb  node givesthe values of the paths (syn cat) and (syn type)directly, as verb  and main,  respectively.
Similarly,the definition of Wa lk  gives the value of (mor  root  /directly as walk.
On the other hand, the value of2It is not clear why one would wish to do this anyway,but the possibility is explicitly left open in the originaldefinitions of (Evans and Gazdar, 1989a).56Verb :EnVerb :Aux  :Modal  :Walk :Mow :Can :(syn cat) == verb(syn type) == main(mor fo rm)== "(mor "(syn form)")"(mor pres) == "(mor root)"(mor past) == "(mor root)" ed(mor pres part) --= "(mor root)" ing(mor pres sing three) == "(mor root)"0 == Verb(mor past part) == "(mor root)" en0 == Verb(syn type) == aux0 == Aux(mor pres sing three) == "(mor root)"0 == Verb(mor root) == walk0 == EnVerb(mor root) --= mow0 == Modal(mor root) == can(mor past) == couldFigure 1: A DATR Theorythe empty path at Walk is given indirectly, by localinheritance, as the value of the empty path at Verb.Note that in itself, this might not appear to be par-ticularly useful, since the theory does not provide anexplicit value for the empty path in the definition ofVerb.
However, DATR's default mechanism permitsany definitional sentence to be applicable not onlyto the path specified in its left-hand-side, but alsofor any rightward extension of that path for whichno more specific definitional sentences exist.
Thismeans that the statement Walk : 0 == Verb : 0actually corresponds to a class of imp l i c i t  definitio-nal sentences, each obtained by extending paths onthe left- and the right-hand-sides of the equation inthe same manner.
Examples include the following:Walk :  (mor) == Verb:  (mor)Walk :  (mor form) =-  Verb:  (mor form)Walk : (syn cat) == Verb : (syn cat)Thus, the value associated with (syn cat) atWalk is given (implicitly) as the value of (syn cat)at Verb, which is given (explicitly) as verb.
Also,the values of (mor) and (mor form), amongstmany others, are inherited from Verb.
In the sameway, the value of (syn cat) at Mow is inherited lo-cally from EnVerb (which in turn inherits locallyfrom Verb) and the value of (syn cat) at Can isinherited locally from Modal  (which ultimately getsits value from Verb via Aux).
Note however, thatthe following sentences do not  follow by default fromthe specifications given at the relevant nodes:Walk :  (mor root) == Verb :  (mor root)Can:  (mor past) == Moda l :  (mor past)Aux:  (syn type) == Verb :  (syn type)In each of the above cases, the theory provides anexplicit statement about the value associated withthe indicated path at the given node.
As a resultthe default mechanism is effectively over-ridden.In order to understand the use of global (i.e.
quo-ted) inheritance descriptors it is necessary to intro-duce DATR's notion of a global  context .
Supposethen that we wish to determine the value associatedwith the path (mor pres) at the node Walk.
Inthis case, the global context will initially consist ofthe node/path pair Wa lk / /mor  pres).
Now, by de-fault the value associated with (mor pres) at Walkis inherited locally from (mor pres) at Verb.
This,in turn, inherits globa l ly  from the path (mor root).That is:Verb :  (mor pres) == "(mor root)"Consequently, the required value is that associatedwith (mor root) at the 'global node' Walk (i.e.the node provided by the current global context),which is just walk.
In a similar fashion, the value57Verb InV?
*Ul I I L TMMow I Modal\[I Can IFigure 2: A Lexical Inheritance Hierarchyassociated with (mor past) at Walk is obtained aswalk ed (i.e.
the string of atoms formed by evalua-ting the specification "(mor root)" ed in the globalcontext Walk / (mor  past)).More generally, the global context is used to fill inthe missing node (path) when a global path (node)is encountered.
In addition however, the evalua-tion of a global descriptor results in the global con-text being set to the new node/path pair.
Thus inthe preceding example, after the quoted descriptor"(mor root)" is encountered, the global context ef-fectively becomes Walk / (mor root) (i.e.
the pathcomponent of the global context is altered).
Notethat there is a real distinction between a local inhe-ritance descriptor of the form N : P and it's globalcounterpart "N : P ' .
The former has no effect onthe global context, while the latter effectively over-writes it.Finally, the definition of Verb in the theory offigure 1 illustrates a use of the 'evaluable path' con-struct:Verb: (mor form) == "(mor "(syn form)")"This states that the value of (mot form) at Verbis inherited globally from the path (mor.
.
. )
,  wherethe dots represent the result of evaluating the globalpath "(syn form)" (i.e.
the value associated with(syn form) in the prevailing lobal context).
Eva-luable paths provide a powerful means of capturinggeneralizations about the structure of lexical infor-mation.4 DATR Mode lsTo a first level of approximation, the DATR theoryof figure 1 can be understood as a representation fan inheritance hierarchy (a 'semantic network') asshown in figure 2.
In the diagram, nodes are writtenas labelled boxes, and arcs correspond to (local) in-heritance, or isa links.
Thus, the node Can inheritsfrom Modal  which inherits from Aux which in turnis a Verb.
The hierarchy provides a useful means ofvisualising the overall structure of the lexical know-ledge encoded by the DATR theory.
However, thesemantic network metaphor is of far less value asa way of thinking about the DATR language itself.Note that there is nothing inherent in DATR to en-sure that theories correspond to simple isa hierar-chies of the kind shown in the figure.
What is more,the DATR language includes constructs that cannotbe visualized in terms of simple networks of nodesconnected by (local) inheritance links.
Global inhe-ritance, for example, has a dynamic aspect which isdifficult to represent in terms of static links.
Simi-lar problems are presented by both string values andevaluable paths.
Our conclusion is that the networkmetaphor is of primary value to the DATR user.
Inorder to provide a satisfactory, formal model of howthe language 'works' it is necessary to adopt a diffe-rent perspective.DATR theories can be viewed semantically ascoll-ections of definitions of partial functions ('nodes' inDATR parlance) that map paths onto values.
A mo-del of a DATR theory is then an assignment of func-58tions to node symbols that is consistent with thedefinitions of those nodes within the theory.
Thispicture of DATR as a formalism for defining partialfunctions is complicated by two features of the lan-guage however.
First, the meaning of a given nodedepends, in general, on the global context of inter-pretation, so that nodes do not correspond irectlyto mappings from paths to values, but rather to func-tions from contexts to such mappings.
Second, it isnecessary to provide an account of DATR's defaultmechanism.
It will be convenient to present our ac-count of the semantics of DATR in two stages.4.1 DATR In terpretat ionsThis section considers a restricted version of DATRwithout the default mechanism.
Section 4.2 thenshows how implicit information can be modelled bytreating value descriptors as families of values in-dexed by paths.Def in i t ion  4.1 A DATR interpretation is a tripleI = (U, I?, F), where1.
U is a set;2.
~ is a function assigning to each element of theset (U x V*) a partial funclion from (U x U*)to U*.3.
F is a valuation function assigning to each nodeN and atom a an element of U, such that di-stinct atoms are assigned distinct elements.Elements of the set U are denoted by u and ele-ments of U* are denoted by v. Intuitively, U* is thedomain of (semantic) values/paths.
Elements of theset C = (U x U*) are called contexts and denotedby c. The function t?
can be thought of as mappingglobal contexts onto (partial) functions from localcontexts to values.
The function F is extended topaths, so that for P = (ax.-.a,~) (n > 0) we writeF(P)  to denote Ul .
.
.un E U*, where ui = F(ai) foreach i (1 < i < n).Intuitively, value descriptors denote elements ofU* (as we shall see, this will need to be revised laterin order to account for DATR's default mechanism).We associate with the interpretation I = (U, t:, F)  apartial denotation function D : DESC -'-+ (C -+ U*)and write \[d\], to denote the meaning (value) of de-scriptor d in the global context c. The denotationfunction is defined as shown in figure 3.
Note thatan atom always denotes the same element of U, re-gardless of the context.
By contrast, the denotationof an inheritance descriptor is, in general, sensitiveto the global context c in which it appears.
Notealso that in the case of a global inheritance descrip-tor, the global context is effectively altered to reflectthe new local context c'.
The denotation function isextended to sequences of value descriptors in the ob-vious way.
Thus, for ?
=d l  .. "dn (n >_ 0), we write\ [?
\ ] , todenotev l .
- .vn  E U* ifvi = \[di\]c (1 < i < n)is defined (and \[?\], is undefined otherwise).Now, let I = (U, s, F )  be an interpretation and7" a theory.
We will write \ [T /N\ ]c  to denote thatpartial function from U* to U* given by\ [T /N \ ] ,  = U {(F(P) ,  \[?\],)}N:P==~bE~TIt is easy to verify that \ [T /N \ ] ,  does indeed denote apartial function (it follows from the functionality ofthe theory 7-).
Let us also write \ [N\] ,  to denote thatpartial function from U* to U* given by \[N\],(v) =~(c)(F(N),v) ,  for all v e U*.
Then, I models 7-just in case the following containment holds for eachnode N and context c:\ [N\] ,  _.D \ [T /N \ ] ,That is, an interpretation is a model of a DATRtheory just in case (for each global context) the func-tion it associates with each node respects the defini-tion of that node within the theory.4.2 Impl ic i t  In fo rmat ion  and  Defau l tMode lsThe notion of a model presented in the precedingsection is too liberal in that it takes no account ofinformation implicit in a theory.
For example, con-sider again the definition of the node Walk  from thetheory of figure 1, and repeated below.Walk :  0==Verb(mor  root)  == walkAccording to the definition of a model given previ-ously, any model of the theory of figure 1 will as-sociate with the node Walk  a function from pathsto values which respects the above definition.
Thismeans that for every global context c, the followingcontainment must hold3:\[Walk\], ~ {(0, \[Verb: 0\]*),((mor root), walk)}On the other hand, there is no guarantee that agiven model will also respect the following contain-ment:\[Walk\]e _D {((mor),  \ [Verb :  (mor) \ ] , ) ,( (mor  root  root ) ,wa lk )}In fact, this containment (amongst other things)should hold.
It follows 'by default' from the state-ments made about Walk  that the path (mor) inhe-rits locally from Verb  and that the value associatedwith any extension of (mor  root )  is walk.3In this and subsequent examples, syntactic ob-jects (e.g.walk, (mor root)) are used to stand fortheir semantic counterparts under F (i.e.
F(walk),F((mor root)), respectively).59\[a\]c~'N: (d l - - .d . )
lo\ [ "N :  (dl """ d,)"\]~\ ["(dx' .
.
d . )
' l .\["N"\]?= F(a)if vi = ~di\]c is defined for each i (1 < i < n), then= t~(c)(F(N),vl .
.
"vn)undefined otherwiseif vi = \[di\]e is defined for each i (1 < i < n), theni?
(c')(d) where d = (F(N),  vl .
.
.
vn)undefined otherwiseif vi = \[di\]e is defined for each i (1 < i < n), then= ~?
(d)(d) where c = (u, v) and d = (u, V l .
.
-v , )undefined otherwise= i?
(d)(e) where c = (u, v) and d= (F(N),  v)Figure 3: Denotation function for DATR DescriptorsThere have been a number of formal treatments ofdefaults in the setting of attribute-value formalisms(Carpenter, 1993; Bouma, 1992; Russell et al, 1992;Young and Rounds, 1993).
Each of these approa-ches formalizes a notion of default inheritance bydefining appropriate operations (e.g.
default unifi-cation) for combining strict and default information.Strict information is allowed to over-ride default in-formation where the combination would otherwiselead to inconsistency (i.e.
unification failure).
Inthe case of DATR however, the formalism does notdraw an explicit distinction between strict and de-fault values for paths.
In fact, all of the informationgiven explicitly in a DATR theory is strict.
The non-monotonic nature of DATR theories arises from ageneral, default mechanism which 'fills in the gaps'by supplying values for paths not explicitly speci-fied in a theory.
More specifically, DATR's defaultmechanism ensures that any path that is not expli-citly specified for a given node will take its definitionfrom the longest prefix of that path that is specified.Thus, the default mechanism defines a class of im-plicit, definitional sentences with paths on the leftthat extend paths found on the left of explicit sent-ences.
Furthermore, this extension of paths is alsocarried over to paths occurring on the right.
In ef-fect, each (explicit) path is associated not just with asingle value specification, but with a whole family ofspecifications indexed by extensions of those paths.This suggests the following approach to the se-mantics of defaults in DATR.
Rather than interpre-ting node definitions (in a given global context) aspartial functions from paths to values (i.e.
of typeU* --+ U*) we choose instead to interpret hem aspartial functions from (explicit) paths, to functionsfrom extensions of those paths to values (i.e.
of typeU* -+ (U* --+ U*)).
Now suppose that f : U* --~(U* --~ U*) is the function associated with the nodedefinition T/N  in a given DATR interpretation.
Wecan define a partial function A( f )  : U* --~ U* (thedefault interpretation of T/N)  as follows.
For eachv E U* setA(f)(v) = f(vl)(V2)where v = vlv2 and vx is the longest prefix of vsuch that f (v l )  is defined.
In effect, the functionA(f )  makes explicit that information about pathsand values that is only implicit in f ,  but just in sofar as it does not conflict with explicit informationprovided by f .In order to re-interpret node definitions in themanner suggested above, it is necessary to modifythe interpretation of value descriptors.
In a givenglobal context c, a value descriptor d now corre-sponds to a total function \[d\]~ : U* --+ U* (intui-tively, a function from path extensions to values).For example, atoms now denote constant functions:\[a\]c(v) = F(a) for all v G U"More generally, value descriptors will denote dif-ferent values for different paths.
Figure 4 shows therevised clause for global node/path pairs, the otherdefinitions being very similar.
Note the way in whichthe 'path' argument v is used to extend Vl .
.
.vn inorder to define the new local (and in this case also,global) context c ~.
On the other hand, the meaningof each of the di is obtained with respect o the 'em-pty path' e (i.e.
path extension does not apply tosubterms of inheritance descriptors).As before, the interpretation function is extendedto sequences of path descriptors, so that for ?
=d l .
.
.d ,  (n >_ o) we have \[?\]~(v) = V l .
.
.
v ,  G V*, ifvi = Idil(v) is defined, for each i (1 < i < n) (and\[?\],(v) is undefined otherwise).
The definition ofthe interpretation of node definitions can be takenover unchanged from the previous ection.
However,for a theory T and node N, the function \ [T/N\]e isnow of type U* --+ (U* ~ U*).
An interpretationI = (U, x, F)  is a default model for theory T just incase for every context c and node N we have:IN\], _~ A(IT"/NI,)As an example, consider the default interpretationof the definition of the node Walk  given above.
By60\ [ "N:  (dl'-"dn)"\]c(v) ={ if v, = \[dil?
(e) is defined for each i(1 < i < n), then ~(d)(d) where c '=  ( f (g) ,v l .
.
.vnv)undefined otherwiseFigure 4: Revised denotation for global node/path pairsdefinition, any default model of the theory of figure 1must respect he following containment:\[W kL((mor root), Av.walk)}/,From the definition of A, it follows that for anypath v, if v extends (mor root), then it is mappedonto the value walk, and otherwise it is mapped tothe value given by \[Verb : 0It(v).
We have thefollowing picture:\[Walklc _D {(0, \[Verb: Oft(O)),((mor), \ [Verb:  Olc((mor))),((mor root), walk),((mor root root), walk),?
.
.
}The default models of a theory 7" constitute a pro-per subset of the models ofT: just those that respectthe default interpretations of each of the nodes defi-ned within the theory.5 Conc lus ionsThe work described in this paper fulfils one of theobjectives of the DATR programme: to provide thelanguage with an explicit, declarative semantics.
Wehave presented a formal model of DATR as a lan-guage for defining partial functions and this modelhas been contrasted with an informal view of DATRas a language for representing inheritance hierar-chies.
The approach provides a transparent treat-ment of DATR's notion of (local and global) contextand accounts for DATR's default mechanism by re-garding value descriptors (semantically) as familiesof values indexed by paths.The provision of a formal semantics for DATRis important for several reasons.
First, it provi-des the DATR user with a concise, implementation-independent account of the meaning of DATR theo-ries.
Second, it serves as a standard against whichother, operational definitions of the formalism canbe judged.
Indeed, in the absence of such a stan-dard, it is impossible to demonstrate formally thecorrectness of novel implementation strategies (foran example of such a strategy, see (Langer, 1994)).Third, the process of formalisation itself aids ourunderstanding of the language and its relationshipto other non-monotonic, attribute-value formalisms.Finally, the semantics presented in this paper provi-des a sound basis for subsequent investigations intothe mathematical nd computational properties ofDATR.6 AcknowledgementsThe author would like to thank Roger Evans, GeraldGazdar, Bill Rounds and David Weir for helpful dis-cussions on the work described in this paper.Re ferencesFrancois Andry, Norman Fraser, Scott McGlashan,Simon Thornton, and Nick Youd.
1992.
Ma-king DATR work for speech: lexicon compila-tion in SUNDIAL?
Computational Linguistics,18(3):245-267.Gosse Bouma.
1992.
Feature structures and nonmo-notonicity.
Computational Linguistics, 18(2):183-203.Lynne Cahill and Roger Evans.
1990.
An applica-tion of DATR: the TIC lexicon.
In Proceedings ofthe 9th European Conference on Artificial Intelli-gence, pages 120-125.Lynne Cahill.
1993.
Morphonology in the lexicon.In Proceedings of the 6th Conference of the Euro-pean Chapter of the Association for Computatio-nal Linguistics, pages 87-96.Lynne Cahill.
1994.
An inheritance-based lexiconfor message understanding systems.
In Procee-dings of the ~th ACL Conference on Applied Na-tural Language Processing, pages 211-212.Bob Carpenter.
1993.
Skeptical and credulous de-fault unification with applications to templatesand inheritance.
In Ted Briscoe, Valeria de Paiva,and Ann Copestake, ditors, Inheritance, Defaultsand the Lexicon, pages 13-37.
Cambridge Univer-sity Press, Cambridge.Greville Corbett and Norman Fraser.
1993.
Net-work morphology: a DATR account of Russiannominal inflection.
Journal of Linguistics, 29:113-142.Roger Evans and Gerald Gazdar.
1989a.
Inferencein DATR.
In Proceedings of the ~th Conference ofthe European Chapter of the Association for Com-putational Linguistics, pages 66-71.6\]Roger Evans and Gerald Gazdar.
1989b.
The se-mantics of DATR.
In Proceedings of AISB-89,pages 79-87.Roger Evans, Gerald Gazdar, and David Weir.1994.
Using default inheritance to describe LTAG.In 3e Colloque International sur les Grammairesd'Arbres Adjoints (TAG-l-3), pages 79-87.Roger Evans, Gerald Gazdar, and David Weir.1995.
Encoding lexicalized tree adjoining gram-mars with a nonmonotonic nheritance hierarchy.In Proceedings of the 33rd Annual Meeting of theAssociation for Computational Linguistics.Gerald Gazdar.
1992.
Paradigm function morpho-logy in DATR.
In Lynne Cahill and Richard Coa-tes, editors, Sussez Papers in General and Compu-tational Linguistics, number CSRP 239 in Cogni-tive Science Research Papers, pages 45-53.
Uni-versity of Sussex, Brighton.Dafydd Gibbon and Doris Bleiching.
1991.
AnILEX model for German compound stress inDATR.
In Proceedings of the FORWISS-ASLWorkshop on Prosody in Man-Machine Commu-nication.James Kilbury.
1992.
Pardigm-based derivationalmorphology.
In Guenther Goerz, editor, Procee-dings of KONVENS 92, pages 159-168.
Springer,Berlin.Adam Kilgariff.
1993.
Inheriting verb alternations.In Proceedings of the 6th Conference of the Euro-pean Chapter of the Association for Computatio-nal Linguistics, pages 213-221.Hagen Langer.
1994.
Reverse queries in DATR.
InProceedings of the 15th International Conferenceon Computational Linguistics, volume II, pages1089-1095, Kyoto.Graham Russell, Afzal Ballim, John Carroll, andSusan Warwick-Armstrong.
1992.
A practi-cal approach to multiple default inheritance forunification-based lexicons.
Computational Lingui-stics, 18(2):311-337.Mark Young and Bill Rounds.
1993.
A logical se-mantics for nonmonotonic sorts.
In Proceedingsof the 31st Annual Meeting of the Association forComputational Linguistics, pages 209-215.62
