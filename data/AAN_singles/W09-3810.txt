Proceedings of the 11th International Conference on Parsing Technologies (IWPT), pages 69?72,Paris, October 2009. c?2009 Association for Computational LinguisticsSynchronous Rewriting in TreebanksLaura KallmeyerUniversity of Tu?bingenTu?bingen, Germanylk@sfs.uni-tuebingen.deWolfgang MaierUniversity of Tu?bingenTu?bingen, Germanywo.maier@uni-tuebingen.deGiorgio SattaUniversity of PaduaPadova, Italysatta@dei.unipd.itAbstractSeveral formalisms have been proposedfor modeling trees with discontinuousphrases.
Some of these formalisms allowfor synchronous rewriting.
However, itis unclear whether synchronous rewritingis a necessary feature.
This is an impor-tant question, since synchronous rewrit-ing greatly increases parsing complexity.We present a characterization of recursivesynchronous rewriting in constituent tree-banks with discontinuous annotation.
Anempirical investigation reveals that syn-chronous rewriting is actually a neces-sary feature.
Furthermore, we transfer thisproperty to grammars extracted from tree-banks.1 IntroductionDiscontinuous phrases are frequent in naturallanguage, particularly in languages with a rela-tively free word order.
Several formalisms havebeen proposed in the literature for modeling treescontaining such phrases.
These include non-projective dependency grammar (Nivre, 2006),discontinuous phrase structure grammar (DPSG)(Bunt et al, 1987), as well as linear context-free rewriting systems (LCFRS) (Vijay-Shanker etal., 1987) and the equivalent formalism of sim-ple range concatenation grammar (sRCG) (Boul-lier, 2000).
Kuhlmann (2007) uses LCFRS fornon-projective dependency trees.
DPSG havebeen used in Plaehn (2004) for data-driven pars-ing of treebanks with discontinuous constituentannotation.
Maier and S?gaard (2008) extractsRCGs from treebanks with discontinuous con-stituent structures.Both LCFRS and sRCG can model discontinu-ities and allow for synchronous rewriting as well.We speak of synchronous rewriting when two ormore context-free derivation processes are instan-tiated in a synchronous way.
DPSG, which hasalso been proposed for modeling discontinuities,does not allow for synchronous rewriting becausethe different discontinuous parts of the yield of anon-terminal are treated locally, i.e., their deriva-tions are independent from each other.
So far, syn-chronous rewriting has not been empirically mo-tivated by linguistic data from treebanks.
In thispaper, we fill this gap by investigating the exis-tence of structures indicating synchronous rewrit-ing in treebanks with discontinuous annotations.The question of whether we can find evidence forsynchronous rewriting has consequences for thecomplexity of parsing.
In fact, parsing with syn-chronous formalisms can be carried out in timepolynomial in the length of the input string, witha polynomial degree depending on the maximumnumber of synchronous branches one can find inderivations (Seki et al, 1991).In this paper, we characterize synchronousrewriting as a property of trees with crossingbranches and in an empirical evaluation, we con-firm that treebanks do contain recursive syn-chronous rewriting which can be linguisticallymotivated.
Furthermore, we show how this char-acterization transfers to the simple RCGs describ-ing these trees.2 Synchronous Rewriting Trees inGerman treebanksBy synchronous rewriting we indicate the syn-chronous instantiation of two or more context-freederivation processes.
As an example, consider thelanguage L = {anbncndn | n ?
1}.
Eachof the two halves of some w ?
L can be ob-tained through a stand-alone context-free deriva-tion, but for w to be in L the two derivations mustbe synchronized somehow.
For certain tasks, syn-chronous rewriting is a desired property for a for-malism.
In machine translation, e.g., synchronous69rewriting is extensively used to model the syn-chronous dependence between the source and tar-get languages (Chiang, 2007).
The question weare concerned with in this paper is whether we canfind instances of recursive synchronous rewritingin treebanks that show discontinuous phrases.We make the assumption that, if the annota-tion of a treebank allows to express synchronousrewriting, then all cases of synchronous rewritingare present in the annotation.
This means that, onthe one hand, there are no cases of synchronousrewriting that the annotator ?forgot?
to encode.Therefore unrelated cases of parallel iterations indifferent parts of a tree are taken to be truly unre-lated.
On the other hand, if synchronous rewrit-ing is annotated explicitely, then we take it to be acase of true synchronous rewriting, even if, basedon the string, it would be possible to find an anal-ysis that does not require synchronous rewriting.This assumption allows us to concentrate only onexplicit cases of synchronous rewriting .We concentrate on German treebanks annotatedwith trees with crossing branches.
In such trees,synchronous rewriting amounts to cases where dif-ferent components of a non-terminal category de-velop in parallel.
In particular, we search for caseswhere the parallelism can be iterated.
An exam-ple is the relative clause in (1), found in TIGER.Fig.
1 gives the annotation.
As can be seen inthe annotation, we have two VP nodes, each ofwhich has a discontinuous span consisting of twoparts.
The two parts are separated by lexical ma-terial not belonging to the VPs.
The two com-ponents of the second VP (Pop-Idol and werden)are included in the two components of the first,higher, VP (genausogut auch Pop-Idol and wer-den ko?nnen).
In other words, the two VP compo-nents are rewritten in parallel containing again twosmaller VP components.
(1) .
.
.
der.
.
.
whogenausogutas wellauchalsoPop-Idolpop-starha?tteAUXwerdenbecomeko?nnencould?who could as well also become a pop-star?Let us assume the following definitions: Wemap the elements of a string to their positions.
Wethen say that the yield ?
of a node n in a tree isthe set of all indices i such that n dominates theleaf labeled with the ith terminal.
A yield ?
has agap if there are i1 < i2 < i3 such that i1, i3 ?
?and i2 /?
?.
For all i, j ?
?
with i < j, the set??i,j?
= {k | i ?
k ?
j} is a component of ?
if??i,j?
?
?
and i?1 /?
?
and j+1 /?
?.
We orderthe components of ?
such that ??i1,j1?
< ?
?i2,j2?if i1 < i2.Trees showing recursive synchronous rewrit-ing can be characterized as follows: We have anon-terminal node n1 with label A whose yieldhas a gap.
n1 dominates another node n2 with la-bel A such that for some i 6= j, the ith componentof the yield of n2 is contained in the ith componentof the yield of n1 and similar for the jth compo-nent.
We call the path from n1 to n2 a recursivesynchronous rewriting segment (RSRS).Table 1 shows the results obtained from search-ing for recursive synchronous rewriting in the Ger-man TIGER and NeGra treebanks.
In a prepro-cessing step, punctuation has been removed, sinceit is directly attached to the root node and thereforenot included in the annotation.TIGER NeGranumber of trees 40,013 20,597total num.
of RSRS in all trees 1476 600av.
RSRS length in all trees 2.13 2.12max.
RSRS length in all trees 5 4Table 1: Synchronous rewriting in treebanksExample (1) shows that we find instances of re-cursive synchronous rewriting where each of therewriting steps adds something to both of the par-allel components.
(1) was not an isolated case.The annotation of (1) in Fig.
1 could be turnedinto a context-free structure if the lowest nodedominating the material in the gap while notdominating the synchronous rewriting nodes (hereVAFIN) is attached lower, namely below the lowerVP node.
(Note however that there is good linguis-tic motivation for attaching it high.)
Besides suchcases, we even encountered cases where the dis-continuity cannot be removed this way.
An exam-ple is (2) (resp.
Fig.
2) where we have a gap con-taining an NP such that the lowest node dominat-ing this NP while not dominating the synchronousrewriting nodes has a daughter to the right of theyields of the synchronous rewriting nodes, namelythe extraposed relative clause.
This structure is ofthe type ancbnd, where a and b depend on eachother in a left-to-right order and can be nested,and c and d also depend on each other and mustbe generated together.
This is a structure that re-quires synchronous rewriting, even on the basis ofthe string language.
Note that the nesting of VPscan be iterated, as can be seen in (3).
(2) .
.
.
ob.
.
.
whetheraufonderentheirGela?ndepremisesdertheTyptypevonof70SVPVPPRELS ADV ADV NN VAFIN VAINF VMINFder genausogut auch Pop-Idol ha?tte werden ko?nnenFigure 1: Example for recursive synchronous rewritingAbstellanlageparking facilitygebautbuiltwerdenbeko?nne,could,derwhich.
.
.. .
.
?whether on their premises precisely the type of parkingfacility could be built, which .
.
.
?
(3) .
.
.
ob.
.
.
whetheraufonderentheirGela?ndepremisesdertheTyptypevonofAbstellanlageparking facilityeigentlichactuallyha?ttehadschonalreadygebautbuiltwerdenbesollen,should,derwhich.
.
.. .
.
?whether on their premises precisely the type of parkingfacility should actually already have been built, which.
.
.
?As a conclusion from these empirical results,we state that to account for the data we can find intreebanks with discontinuities, i.e., with crossingbranches, we need a formalism that can expresssynchronous rewriting.3 Synchronous Rewriting in GrammarsExtracted from TreebanksIn the following, we will use simple RCG (whichare equivalent to LCFRS) to model our treebankannotations.
We extract simple RCG rewritingrules from NeGra and TIGER and check them forthe possibility to generate recursive synchronousrewriting.A simple RCG (Boullier, 2000) is a tuple G =(N,T, V, P, S) where a) N is a finite set of pred-icate names with an arity function dim: N ?
N,b) T and V are disjoint finite sets of terminals andvariables, c) P is a finite set of clauses of the formA(?1, .
.
.
, ?dim(A)) ?
A1(X(1)1 , .
.
.
,X(1)dim(A1))?
?
?Am(X(m)1 , .
.
.
,X(m)dim(Am))for m ?
0 where A,A1, .
.
.
, Am ?
N , X(i)j ?V for 1 ?
i ?
m, 1 ?
j ?
dim(Ai) and ?i ?
(T ?
V )?
for 1 ?
i ?
dim(A), and e) S ?
N isthe start predicate name with dim(S) = 1.
For allc ?
P , it holds that every variable X occurring inc occurs exactly once in the left-hand side (LHS)and exactly once in the RHS.
A simple RCG G =(N,T, V, P, S) is a simple k-RCG if for all A ?N, dim(A) ?
k.For the definition of the language of a simpleRCG, we borrow the LCFRS definitions here: LetG = ?N,T, V, P, S?
be a simple RCG.
For everyA ?
N , we define the yield of A, yield(A) asfollows:a) For every A(~?)
?
?, ~?
?
yield(A);b) For every clauseA(?1, .
.
.
, ?dim(A)) ?
A1(X(1)1 , .
.
.
,X(1)dim(A1))?
?
?Am(X(m)1 , .
.
.
,X(m)dim(Am))and all ~?i ?
yield(Ai) for 1 ?
i ?
m,?f(?1), .
.
.
, f(?dim(A))?
?
yield(A) wheref is defined as follows:(i) f(t) = t for all t ?
T ,(ii) f(X(i)j ) = ~?i(j) for all 1 ?
i ?
m, 1 ?j ?
dim(Ai) and(iii) f(xy) = f(x)f(y) for all x, y ?
(T ?V )+.c) Nothing else is in yield(A).The language is then {w | ?w?
?
yield(S)}.We are using the algorithm from Maier andS?gaard (2008) to extract simple RCGs from Ne-Gra and TIGER.
For the tree in Fig.
1, the algo-rithm produces for instance the following clauses:PRELS(der) ?
?ADV(genausogut) ?
?.
.
.S(X1X2X3X4) ?
PRELS(X1)VP2(X1,X4) VAFIN(X3)VP2(X1X2X3,X4X5) ?
ADV(X1) ADV(X2)VP2(X3,X4) VMINF(X5)VP2(X1,X2) ?
NN(X1) VAINF(X2)We distinguish different usages of the same cat-egory depending on their numbers of yield com-ponents.
E.g., we distinguish non-terminals VP1,VP2, .
.
.
depending on the arity of the VP.
We de-fine cat(A) for A ?
N as the category of A, inde-pendent from the arity, e.g., cat(VP2) =VP.In terms of simple RCG, synchronous rewrit-ing means that in a single clause distinct variablesoccurring in two different arguments of the LHSpredicate are passed to two different arguments ofthe same RHS predicate.
We call this recursive71SNPVPVPVPPP NPob auf dem Gela?nde der Typ von Abstellanlage .
.
.
ha?tte .
.
.
gebaut werden sollen, der.
.
.Figure 2: Iterable treebank example for synchronous rewritingif, by a sequence of synchronous rewriting steps,we can reach the same two arguments of the samepredicate again.
Derivations using such cycles ofsynchronous rewriting lead exactly to the recursivesynchronous rewriting trees characterized in sec-tion 2.
In the following, we check to which extentthe extracted simple RCG allows for such cycles.In order to detect synchronous rewriting in asimple k-RCG G, we build a labeled directedgraph G = (VG , EG , l) from the grammar withVG a set of nodes, EG a set of arcs and l :VG ?
N ?
?
{0, .
.
.
, k} ?
{0, .
.
.
, k} where N ?
={cat(A) |A ?
N} a labeling function.
G is con-structed as follows.
For each clause A0(~?)
?A1( ~?1) .
.
.
Am( ~?m) ?
P we consider all pairs ofvariables Xs,Xt for which the following condi-tions hold: (i) Xs and Xt occur in different argu-ments i and j of A0, 1 ?
i < j ?
dim(A0); and(ii) Xs and Xt occur in different arguments q andr of the same occurrence of predicate Ap in theRHS, 1 ?
q < r ?
dim(Ap) and 1 ?
p ?
m.For each of these pairs, two nodes with labels[cat(A0), i, j] and [cat(Ap), q, r], respectively, areadded to VG (if they do not yet exist, otherwise wetake the already existing nodes) and a directed arcfrom the first node to the second node is added toEG .
The intuition is that an arc in G representsone or more clauses from the grammar in whicha gap between two variables in the LHS predicateis transferred to the same RHS predicate.
To de-tect recursive synchronous rewriting, we then needto discover all elementary cycles in G, i.e., all cy-cles in which no vertex appears twice.
In order toaccomplish this task efficiently, we exploit the al-gorithm presented in Johnson (1975).
On a gram-mar extracted from NeGra (19,100 clauses), thealgorithm yields a graph with 28 nodes containing206,403 cycles of an average length of 12.86 anda maximal length of 28.4 ConclusionThe starting point of this paper was the questionwhether synchronous rewriting is a necessary fea-ture of grammer formalisms for modelling natu-ral languages.
In order to answer this question,we have characterized synchronous rewriting interms of properties of treebank trees with crossingbranches.
Experiments have shown that recursivecases of synchronous rewriting occur in treebanksfor German which leads to the conclusion that,in order to model these data, we need formalismsthat allow for synchronous rewriting.
In a secondpart, we have extracted a simple RCG from thesetreebanks and we have characterized the grammarproperties that are necessary to obtain recursivesynchronous rewriting.
We then have investigatedthe extent to which a grammar extracted from Ne-Gra allows for recursive synchronous rewriting.ReferencesPierre Boullier.
2000.
Range concatenation grammars.In Proceedings of IWPT.Harry Bunt, Jan Thesingh, and Ko van der Sloot.
1987.Discontinuous constituents in trees, rules and pars-ing.
In Proceedings of EACL.David Chiang.
2007.
Hierarchical phrase-based trans-lation.
Computational Linguistics.Donald B. Johnson.
1975.
Finding all the elementarycircuits of a directed graph.
SIAM Journal on Com-puting.Marco Kuhlmann.
2007.
Dependency Structures andLexicalized Grammars.
Dissertation, Saarland Uni-versity.Wolfgang Maier and Anders S?gaard.
2008.
Tree-banks and mild context-sensitivity.
In Proceedingsof Formal Grammar.Joakim Nivre.
2006.
Inductive Dependency Parsing.Springer.Oliver Plaehn.
2004.
Computing the most probableparse for a discontinuous phrase-structure grammar.In New developments in parsing technology.
Kluwer.H.
Seki, T. Matsumura, M. Fujii, and T. Kasami.
1991.On multiple context-free grammars.
TheoreticalComputer Science.K.
Vijay-Shanker, David Weir, and Aravind Joshi.1987.
Characterising structural descriptions used byvarious formalisms.
In Proceedings of ACL.72
