Phrasal Analysis of Long Noun SequencesYigal Arens, John J. Granacki, and Alice C. ParkerUniversity of Southern CaliforniaLos Angeles, CA 90089-0782ABSTRACTNoun phrases consisting of a sequence of nouns(sometimes referred to as nominal compounds) poseconsiderable difficulty for language analyzers butare common in many technical domains.
Theproblems are compounded when some of the nounsin the sequence are ambiguously also verbs.
Thephrasal approach to language analysis, as imple-mented in PHRAN (PHRasal ANalyzer), has beenextended to handle the recognition and partialanalysis of such constructions.
The phrasalanalysis of a noun sequence is performed to anextent sufficient for continued analysis of the sen-tence in which it appears.
PHRAN is currentlybeing used as part of the SPAN (SPecificationANalysis) natural language interface to the USCAdvanced Design AutoMation system (ADAM)(Granacki ct at, 1985).
PHRA_N-SPAN is an inter-face for entering and interpreting digital systemspecifications, in which long noun sequences occuroften.
The extensions to PHRAN's knowledge baseto recognize these constructs are described, alongwith the algorithm used to detect and resolveambiguities which arise in the noun sequences.1.
Introduct ionIn everyday language we routinely encounternoun phrases consisting of an article and a headnoun, possibly modified by one or more adjectives.Noun-noun pairs, e.g., park bench, atom bomb,and computer programmer, are also common.
It israre, however, to encounter noun phrases consistingof three or more nouns in sequence.
Consequently,research in natural anguage analysis has not con-centrated on parsing such constructions.The situation in many technical fields is quitedifferent.
For example, when describing thespecifications of electronic systems, designers com-monly use expressions such as:bus request cycletransfer block sizesegment trap requestinterrupt vector transfer phasearithmetic register transfer instruction.During design specification such phrases areoften constructed by the specifier in order to refer-ence a particular entity: a piece of hardware, anactivity, or a range of time.
In most cases, thenouns preceding the last one are used as modifiem,and idiomatic expressions are very rare.
In almostall cases the meaning of noun sequences can there-fore be inferred largely based on the last noun inthe sequence*.
(But see Finin (1980) for in-depthtreatment of the meaning of such constructions).The process of recognizing the presence ofthese expressions is, however, complicated by thefact that many of the words used are syntacticallyambiguous.
Almost every single word used in theexamples above belongs to both the syntacticcategories of noun and verb.
As a result,bus request cyclemay conceivably be understood either as a corn-* When a sequence has length three or more the order ofmodification may vary.
Consider:lengine damage\] reportJanuary \[aircraft repairs I\[boron epoxyl \[ \[rocket motor\] chambers l1970 I \[balloon flight I\[ \[solar-cell standardization l program\] \].But the last noun is still the modified one.
Theseexamples are from (Rhyne, 1976) and (Marcus, 1979).59mand (to bus the request cycle) or as a nounphrase.Considerable knowledge of the semantics ofthe domain is necessary to decide the correctinterpretation of a nominal compound and thenatural language analyzer must ultimately haveaccess to it.
But before complete semanticinterpretation of such a noun phrase can even beattempted the analyzer must have a method ofrecognizing its presence in a sentence and determin-ing its boundaries.I.i.
The  Rest of this PaperThe rest of this paper is structured as fol-lows: In the next section, Section 2., we describethe phrasal analysis approach used by our systemto process input sentences.
In Section 3. we discussthe problems involved in the recognition of longnoun sequences, and in Section 4. we present ourproposed solution and describe its implementation.Sections 5. and 6. are devoted to related work andto our conclusions, respectively.2.
The PHRA_N-SPAN SystemPHRAN, a PHRasal ANalysis program,(.A.rens, 1986) (Wilensky and Arens, 1980), is animplementation of a knowledge-based approach tonatural language understanding.
The knowledgePHRAN has of the language is stored in the formof pattern-concept airs (PCPs).
The linguisticcomponent of a pattern-concept air is called aphrasal pattern and describes an utterance at oneof various different levels of abstraction.
It may bea single word, or a literal string likeDigital Equipment Corporation,or it may be a general phrase such as(1) <~component> <~send> <data>to < component >which allows any object belonging to the semanticcategory component to appear as the first and lastconstituents, anything in the semantic categorydata as the third constituent, any form of the verb8end as the second, while the lexical item to mustappear as the fourth constituent.Associated with each phrasal pattern is aconceptual template, which describes the meaningof the phrasal ~pattern, usually with references tothe constituents of the associated phrase.
EachPCP  encodes a single piece of knowledge about thelanguage the database is describing.For the purpose of describing designspecifications and requirements a declarativerepresentation language was devised, called SRL(Specification and Requirements Language).
InSRL the conceptual template associated withphrasal pattern (1) above is a form of unidirec-tional value transfer.
In this specific case it denotesthe transfer of the data described by the third con-stituent of the pattern by the controlling agentdescribed by the first constituent to the componentdescribed by the fifth.
For further details of therepresentation language used see (Granacki et al1987).PHRA_N analyzes input by searching forphrasal patterns that match fragments of it andreplacing such fragments with the conceptual tem-plate associated with the pattern.
The result ofmatching a pattern may in turn be present as aconstituent in a larger pattern.
Finally, the con-ceptual template associated with a pattern thataccounts for all the input is used to generate astructure denoting the meaning of the completeutterance.A slightly more involved version of the PCPdiscussed above is used by PHRAN-SPAN toanalyze the sentence:The cpu tranofer8 the code word from thecontroller to the peripheral device.3.
The Prob lem wlth Long Noun SequencesLong noun sequences pose considerabledifficulty to a natural language analyzer.
Theproblems will be described and treated in this sec-tion in terms of phrasal analysis, but they are notartifacts of this approach.
A comparison withother approaches to such constructs, mentionedlater in this paper, also makes this clear.The main difficulties with multiple nounsequences are:?
Determination of their length.
One mustmake sure that the first few nouns are nottaken to constitute the first noun phrase,ignoring the words that follow.
For example,upon reading bu~ request cycle we do not60want the analyzer to conclude that the firstnoun phrase is simply bus, or bus request.?
Interpretation of ambiguous noun/verbs.
Alarge portion of the vocabulary used in digi-tal system specification consists of wordswhich are both nouns and verbs.
Conse-quently the phrase interrupt vector transferphase, for example, might be interpreted as acommand to interrupt the vector transferphase, or (unless we are careful aboutnumber agreement) as the claim that phase istransferred by interrupt vectors.In spoken language stress is sometimes usedto "adjective-ize" nouns used as modifiers.For example, the spoken form would be"arithmetic register transfer" rather than"arithmetic register transfer".
Obviously,such a device is not available in our case,where specifications are typed.?
Determination of enough about their mean-ing to permit further analysis of the input.Full understanding of such expressionsrequires more domain knowledge than onewould wish to employ at this point in theanalysis process (Cf.
Finin (1980)).
However,at least a minimal understanding of thesemantics of the noun phrase is necessary fortesting selectional restrictions of higher levelphrasal patterns.
This is required, in turn, inorder to provide a correct representation ofthe meaning of the complete input.The phrasal approach utilizes the phrasalpattern as the primary means of recognizingexpressions, and in particular noun sequences.
Ineffect, a phrasal pattern is a sequence of restrictionsthat constituents must satisfy in order to matchthe pattern.
The most common restrictions on aconstituent in a PHRAN phrasal pattern, and theones relevant in our case, are of the following threetypes:1.
The constituent must be a particular word;2.
It must belong to a particular semanticcategory; or,3.
It must belong to a particular syntacticcategory.In addition, simple lookahead restrictionsmay be attached to any constituent of the pattern.In the original version of PHRAN such restrictionswere limited to demanding that the following wordbe of a certain syntactic ategory.Simple phrasal patterns are clearly not capa-ble of solving the problem of recognizing multiplenoun sequences.
It is not possible to anticipate allsuch sequences and specify them literally, word forword, since they are often generated on the fly bythe system specifier.For a similar reason phrasal patterns describ-ing the sequence of semantic categories that thenouns belong to are, as a rule, inadequate.Finally, from the syntactic point of view allthese constructions are just sequences of nouns.
Apattern simply specifying such a sequence provideslittle of the information needed to decide whichexpression is present and what it might refer to.4.
A Heurlstlc Solut ionPHRAN's inherent priority scheme was usedto solve part of the problem.
If a word can beUsed either as a noun or a verb, it is recognizedfirst as a noun, all other things being equal.
Thissimple approach was modified to be subject to thefollowing rules:1.
If the current word is a noun, and the nextword may be either a noun or a verb, test itfor number agreement (as a verb).
If the testis unsuccessful do not end the noun phrase.2.
If the current word is a noun, and the nextword may be either a noun or a verb, test ifthe current word* is a possible active agentwith respect o the next (as a verb).
If not,do not end the noun phrase.3.
If the current word is a noun, and the nextword may be either a noun or a verb, checkthe word after the next one.
If it is (unambi-guously) a verb, end the noun phrase withthe next word.
If it is (unambiguously) anoun, do not end the noun phrase.
If thesecond word away may be either a noun or averb, treat the utterance as potentially ambi-guous, with a noun phrase ending either atthe current word or with the next word.Once a complete noun phrase is detected anew token is created to represent its referent.
* The current word may be the last in a sequence ofnouns; we are again assuming that its meaning can beused to approximate the meaning of the noun sequence.61While all nouns used in its construction are noted,it inherits the semantics of the last noun in thesequence.
This information may be used in laterstages of the analysis.
Other programs whichreceive the analyzer's output will inspect therepresentation of the noun phrase again later todetermine its meaning more precisely.The heuristic described above has been foundto be sufficient to deal with all inputs our systemhas received up until now.
It detects as ambiguousa sentence such as the following:The cpu signal interrupts transfer activity.When looking at the word cpu PHRAN-SPANfinds that Rule 1. can be used.
Since numberagreement is absent between cpn and signal (usedas a verb), the noun phrase cannot be consideredcomplete yet.
When the word signal is processed,the system notes that interrupts may be either a(plural) noun or a verb.
Number agreement isfound, and it is also the case that a signal may actas an agent in an action of interruption, so rules 1.and 2. provide no information.
Using Rule 3. wefind that the following word, transfer is an ambi-gnous noun/verb.
Thus the result of the analysisto this point is indicated as ambiguous, possiblya.
\[the cpu signal\] \[interrupts\] \[transferactivity\], orb.
\[the cpu signal interrupts\] \[transfer\]\[activity\].The type of ambiguity detected by Rule 3.can often be eliminated by instructing the users ofthe specification system to use modals when possi-ble.
In case of the example above, to force one ofthe two readings for the sentence, a user mighttype the cpu signal will interrupt transfer activity,or the cpu signal interrupts will transfer activity, asappropriate.4.1.
Requesting User AssistanceWhen Rule 3. detects an ambiguity, the sys-tem presents both alternatives to the user and asksfor an indication of the intended one.PCPs encode in their phrasal pattern descrip-tions, among other things, selectional restrictionsthat at times allow the system to rule out some ofthe ambiguities detected by Rule 3.
For example,it is conceivable that interrupts might not beacceptable as agents in a transfer.
PHRAN-SPANwould thus be capable of eventually ruling outanalysis b. above on its own.However, more often than not it is the casethat both interpretations provided by Rule 3. aresensible.
We decided that the risk of a wrongspecification being produced required that in casesof potential ambiguity the system request immedi-ate aid from the user.
Therefore, when sentenceslike the one in the example above are typed andprocessed, PHRAN-SPAN will present both possi-ble readings to the user and request that theintended one be pointed out before analysisproceeds.4.2.
Rule Implementat ionThe rules described above are implemented inseveral pattern-concept airs and are incorporatedinto the standard PHRAN knowledge base ofPCPs.
For example, one of the PCPs used todetect he situation described in Rule 1. while tak-ing into consideration Rule 3. is (in simplifiedform):Pattern:{<article> <sing-noun & next N fV  &next non-sing &after-next verb >}Concept{part of speech: noun phrasesemantics: inherit from (second noun)modifiers: (first noun)}4.3.
Current  StatusThe system currently processes specificationsassociated with all primitive concepts of thespecification language, which are sufficient todescribe behavior in the domain of digital systems.Pattern-concept pairs have been written for 25basic verbs common in specifications and for over100 nouns.
This is in addition to several hundredPCPs  supplied with the original PHRAN system.The system is coded in Franz LISP and runson SUN/2  under UNIX  4.2 BSD.
In interpretedmode a typical specification sentence will take 20cpu seconds to process.
No attempt has been madeto optimize the code, compile it, or port it to aLISP processor.
Any of these should result in an62interface which could operate in near real-time.5.
Related WorkThe problem of noun sequences of the kindcommon in technical fields like digital systemspecification has received only limited treatment inthe literature.
Winograd (Winograd, 1972)presents a more general discussion of Noun Groups,but the type of utterances his system expects doesnot include extended sequences of nouns as arecommon in our domain.
Winograd therefore doesnot address the specific ambiguity problems raisedhere.Gershman's Noun Group Parser (NGP)(Gershman, 1979) dealt, among other things, withmultiple noun sequences.
While our algorithm isconsistent with his, our approach differs from NGPin major respects.
NGP contains what amount toseveral different programs for various types ofnoun groups, while we treat the informationneeded to analyze these structures as data.PHRAN embodies a general approach to languageanalysis that does not require components special-ized to different types of utterances.
A clearseparation of processing strategies from knowledgeabout the language has numerous advantages thathave been listed elsewhere (Arens, 1986).
In addi-tion, our treatment of noun groups as a whole isintegrated into PHRAN and not a separatemodule, as NGP is.In evaluating the two systems, however, onemust keep in mind that the choice of domaingreatly influences the areas of emphasis andinterest in language analysis.
NGP is capable ofhandling several forms of noun groups that wehave not attempted to deal with.Marcus (1979) describes a parsing algorithm*for long noun sequences of the type discussed inthis paper.
It is interesting to note that the lim-ited lookahead added to the original PHRAN forthe purpose of noun sequence recognition is con-sistent with Marcus' three-place constituent buffer.The major difference between Marcus' algorithmand ours is that the former requires a semanticcomponent that can judge the relative "goodness"of two possible noun-noun modifier pairs.
For* Discovered by Finin (Ig80) to be erroneous in someca.ses.example, given the expression transfer block Mzc,this component would be responsible for determin-ing whether block size is semantically superior totransfer block.Such a powerful component is not necessaryfor achieving our present objective - recognizingthe presence and boundaries of a noun sequence.Our heuristic does not require it.A complementary but largely orthogonaleffort is the complete semantic interpretation oflong noun sequences.
There have been severalattempts to deal with the problem of producing ameaning representation for a given string of nouns.See (Finin, 19~0) and (Reimold, 1976) for extensivework in this area, and also (Brachman, 1978) and(Borgida, 1975).
Such work by and large assumesthat the noun sequence has already been recognizedas such.
I.e., it requires the existence of a com-ponent much like the one described in this paperfrom which to receive a noun sequence for process-ing.6.
ConclusionsWe have presented a heuristic approach tothe understanding of long noun sequences.
Theheuristics have been incorporated into the PHRasalANalyzer by adding to its declarative knowledgebase of pattern-concept pairs.
These additions pro-vide the PHRAN-SPAN system with the capabilityto translate digital system specifications input inEnglish into correct representations for use byother programs.7.
AcknowledgementsWe wish to thank the anonymous reviewersof this paper for several helpful comments.This research was supported in part by theNational Science Foundation under computerengineering rant #DMC-8310744.
John Granackiwas partially supported by the Hughes Aircraft Co.8.
Bibl iographyArens, Y.
CLUSTER: An approach to ConteztualLanguage Understanding.
Ph.D. thesis, Universityof California at Berkeley, 1986.63Borgida, A. T. Topics in the Understanding ofEnglish Sentences by Computer.
Ph.D. thesis,Department of Computer Science, University ofToronto, 1975.Brachman, R. J.
Theoretical Studies in NaturalLanguage Understanding.
Report No.
3833, BoltBeranek and Newman, May 1978.Finis, T.W.
The Semantic Interpretation of Com-pound Nominals.
Ph.D. thesis, University of Illi-nois at Urbana-Champalgn, 1980.Gershman, A. V. Knowledge-Based ParMng.Ph.D.
thesis, Yale University, April 1979.Granacki, J., D. Knapp, and A. Parker.
TheADAM Design Automation System: Overview,Planner and Natural Language Interface.
InProceedings of the ggnd ACM/IEEE Design Auto-mation Conference, pp.
727-730.
ACM/IEEE,June, 1985.Cranacki, J., A. Parker, and Y. Arens.
Under-standing System Specifications Written in NaturalLanguage.
In Proceedings of IJCAI-87, the TenthInternational Joint Conference on Artificial Intelli-gence.
Milan, Italy.
July 1987.Marcus, M. P. A Theory of Syntactic Recognitionfor Natural Language.
The MIT Press, Cambridge,Mass.
and London, England, 1979.Reimold, P. M. An Integrated System of Percep-tual Strategies: Syntactic and Semantic Interpreta-tion of English Sentences.
Ph.D. thesis, ColumbiaUniversity, 1976.Rhyne, J. R. A Lexical Process Model of NominalCompounding in English.
American Journal ofComputational Linguistics, microfiche 33.
1976.Wilensky, R., and Y. Arens.
PHRAN: AKnowledge-Based Natural Language Understander.In Proceedings of the 18th Annual Meeting of theAssociation for Computational Linguistics.
Phi-ladelphia, PA. June 1980.Winograd, T. Understanding Natural Language.Academic Press, 1972.64
