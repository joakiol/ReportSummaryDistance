The Genesis of a Script for Bankruptcy in Ontological SemanticsVictorRaskin1,3SergeiNirenburg2,3Christian F.Hempelmann1InnaNirenburg3Katrina E.Triezenberg11CERIAS and Linguistics ProgramPurdue UniversityWest Lafayette, INvraskin, hempelma, kattriez@purdue.edu2ILITUniversity of Maryland, Baltimore CountyBaltimore, MDsergei@cs.umbc.edu3Onyx Consulting, Inc.iniren_99@yahoo.comAbstractThis paper describes the creation of a script inthe framework of ontological semantics as theformal representation of the complex eventBANKRUPTCY.
This script for BANKRUPTCYserves as the exemplary basis for a discussionof the general motivations for includingscripts in NLP, as well as the discovery proc-ess for, and format of, scripts for the purposesof processing coreference and inferencingwhich are required, for example, in high-endQ&A and IE applications.1 IntroductionA spate of advanced new applications has called for amassive effort in script acquisition.
Conceptualized ascomplex events, they have been provided for in the on-tology since its inception (see Carlson and Nirenburg,1990) and their format has always been reasonably well-defined as well as constantly adjusted to the consecutivereleases (see Nirenburg and Raskin, 2003, Section 7.1.5;cf.
Moreno Ortiz et al 2002).
Throughout the early andmid-1990s, however, lower-end NLP applications, suchas knowledge- and meaning-based MT, did not neces-sitate a heavy use of scripts.
The new generation ofhigher-end Q&A and similar IE applications make itnecessary to recognize individual events and their ef-fects as part of scripts, both because humans do andbecause such recognition is necessary for establishing(co)reference relations.
Thus, in the following text, onlythe availability of the BANKRUPTCY script can relate (i)and (ii) (and thus determine whose bankruptcy it is inthe latter), which may be immediately adjacent in a text:(i) ACME, Inc., was actually doomed the moment JorgeJimenez and 52 other employees were laid off without awarning.
(ii) That bankruptcy was not, however, the last blow.As an example, we will sketch out the creation proc-ess of the BANKRUPTCY script.
In Section 2, we willdescribe the status of scripts in ontological semantics,and in Section 3 the format of their representation.
Sec-tion 4 deals with the heuristics/discovery of the infor-mation that goes into a script, a sort of knowledgeengineering, if you will.
Section 5 presents the resultingscript BANKRUPTCY, formatted to a certain grain size ofthe information discovered in Section 4.
Section 6touches briefly upon just a few of the problems scriptacquisitions poses.2 Scripts in Ontological SemanticsIn order to represent the meaning of connected text, notsimply that of a sequence of ostensibly independentsentences, several things must happen.
One of the mostobvious connections across sentence boundaries is co-reference.
The TMR in ontological semantics allows forthe specification of co-reference, and special proceduresexist for treating at least facets of this phenomenon inextant applications of ontological semantics (see Niren-burg and Raskin, 2003, Section 8.6.1).
Discourse rela-tions among propositions can also hold across sentenceboundaries, and ontological semantics includes facilitiesfor both detecting and representing them as well (ibid,Section 8.6.3).There are, however, additional strong connectionsamong elements of many texts.
These have to do withthe understanding that individual propositions may holdwell-defined places in ?routine,?
?typical?
sequences ofevents (often called complex events, scripts or scenar-ios) that happen in the world, with a well-specified setof object-like entities that appear in different rolesthroughout that sequence.
For example, if the sequenceof events describes a state visit, the ?actors?
may, undervarious circumstances, include the people who meet (the?principals?
), their handlers, security personnel andjournalists, possibly, a guard of honor; the ?props?
mayinclude airplanes, airports, meeting spaces, documents,etc.
All these actors and props will fill case roles andother properties in the typical component events of thestandard event sequence for a state visit, such as travel,arrival, greetings, discussions, negotiations, press con-ferences, joint statements, etc.
The component eventsare often optional; alternatively, some componentevents stand in a disjunctive relation with some others(that is, of several components only one may actually berealized in a particular instantiation of the overall com-plex event), and their relative temporal ordering may befuzzy.Such typical scripts can be expressed in natural lan-guage using expository texts or narratives, sets of theabove (indeed, one conceptual story can be ?gathered?from several textual sources), plus text in tables, pic-tures, TV and movie captions, etc.
The notion of scriptis clearly recursive, as every component event can itselfbe considered a script, at a different level of granularity.The notion of script, under a variety of monikers, waspopularized in computer science by Minsky (1975),Schank and Abelson (1977), Charniak (1972), and theircolleagues in the 1970s.
However, at that time, no real-istic-size implementation of natural language processingusing scripts could be undertaken, in part, because therewas no clear idea about the required inventory ofknowledge sources, their relations and content.
Script-based theories of semantics were proposed in theoreticallinguistics (Fillmore 1985, Raskin 1986) but were over-shadowed by the fashion for formal semantics, which isnot descriptive in nature, focusing instead on the ele-ments of semantics capturable by such logical devicesas quantifiers (see Raskin 1994).
Moreover, the size ofthe task of creating the ontological semantic knowledgesources, which are a sine qua non of script representa-tion, was at the time underestimated by the practitionersand overestimated by critics.
It can be said that onto-logical semantics is a descendant of the script-orientedapproach to natural language processing, especially inthe strategic sense of accentuating semantic content, thatis, the quantity and quality of stored knowledge requiredfor descriptions and applications.
Ontological semanticscertainly transcends the purview and the granularitylevels of the older approach as well as offering an en-tirely different take on coverage of world and languageknowledge and on its applicability.
Ontological seman-tics has also the advantage of having been implemented,tested, and (constantly) improved in actual applications.In the script-based approach to processing text in-puts, the scripts in the ontology that get instantiatedfrom the text input provide expectations for processingfurther sentences in a text.
Indeed, if a sentence in a textcan be seen as instantiating a script in the nascent TMR,the analysis and disambiguation of subsequent sentencescan be aided by the expectation that propositions con-tained in them are instantiations of event types that arelisted as components of the activated script.
Obviously,the task of activating the appropriate script from theinput is far from straightforward.
Also, not all sentencesand clauses in the input text necessarily fit a givenscript?there can be deviations and fleeting extraneousmeanings that must be recognized as such and con-nected to other elements of the TMR through regulardiscourse relations, that is, through a weaker connectionthan that among the elements of a complex event.Scripts usually describe situations with multipleagents.
Each of these agents can be said, in some sense,to carry out their own plans that are made manifestthrough the reported component events in a script.
Plansare special kinds of scripts that describe the process ofattaining a goal by an agent or its proxies.
Goals arerepresented in ontological semantics as postconditions(effects) of events (namely, steps in plans or compo-nents of general scripts).
For example, if an agent?s goalis to own a TV set, this goal would be attained on a suc-cessful completion of one of a number of possible plans.In other words, it will be listed in the ontology as thepostcondition (effect) of such events as BUY, BORROW,LEASE, STEAL, MANUFACTURE.
Note that the plans canbe activated only if all the necessary preconditions fortheir triggering hold.
Thus, the ontology, in the precon-dition property of BUY, for example, will list the re-quirement that the agent must have enough money (seeMcDonough 2000).Manipulating plans and goals is especially importantin some applications of ontological semantics, for in-stance, in advice giving applications where the system isentrusted with recognizing the intentions (goals) of anagent or a group of agents based on processing textsabout their behavior.
Goal- and plan-directed processingrelies on the results of the analysis of textual input, asrecorded in the basic TMR, as well as the complemen-tary knowledge about relevant (complex) events andobjects and their instances, stored in the ontology andthe Fact Database (see Nirenburg and Raskin, 2003,Section 7.2), and instantiated in the extended TMR.
It isclear that reasoning based on the entire amount ofknowledge in the extended TMR can be much richerthan if only those facts mentioned in the input textswere used for inference making.
Richer possibilities forreasoning would yield better results for any NLP appli-cation, provided it is supplied with the requisite infer-ence making programs, for instance, for resolvingtranslation mismatches.
The reason we are making adistinction among NLP applications is the extent towhich an application depends on such capabilities.
Forexample, MT practitioners have typically assumed thatthis application does not really need machinery for in-ference making.
This belief is clearly based on the per-ception that acquiring the knowledge necessary tosupport reasoning is prohibitively expensive or evenoutright infeasible, and therefore one must make dowith simpler approaches.
Of course, should MT devel-opers be able to obtain such resources, they would usethem.
Ontological semantics has among its goals that ofsupplying application builders with exactly this kind ofknowledge.A good if unusual example for a family of applica-tions for which knowledge representation at the level ofcomplex events is crucial but where its integration hasso far been carefully avoided is computational humor(see, for instance, Raskin 1996; Stock and Strapparava2002).
Here, the analysis and generation of ambigu-ity?generally the key issue for semantics, and, ac-cordingly NLP?is a key requirement for a text to befunny.
Computational humor aims to increase the ac-ceptability of natural language interaction between hu-man and machine by injecting relevant humor intonatural language interfaces.
The most developed theoryof humor?not only in the framework of script-basedsemantics?and the formalized model based on it (At-tardo and Raskin 1991) have at their core the notion ofincongruity conceptualized as two partially overlappingscripts in a relation of opposition.
Earlier attempts atcomputational humor have simply hardwired two com-plex events in such a relation into templates (Raskin andAttardo 1994; Binsted and Ritchie 1997) instead ofaiming at true generation based on an operational modelof humor.
And true humor generation is impossiblewithout the identification of scripts in an appropriaterelation of opposition, e.g., sexual vs. religious.
On thisbasis, the overlap between the two scripts can be ana-lyzed and generated, for example, in puns, where onelexical item from each of the two scripts are brought tooverlap in one surface form through sound similarity(Hempelmann 2003).
This is just an example?esoteric,as it may seem to some?of how the set of script-requiring NLP applications may expand with time andneed.Obviously, as mentioned above, in addition to theknowledge, efficient reasoning procedures must be de-veloped.
Such procedures must conform to a number ofconstraints, an example of which is the following.
It iscommon knowledge that, unless a limit is imposed onmaking inferences from knowledge units in rich knowl-edge bases, the inferencing process can go too far oreven not halt at all.
In advanced applications, for exam-ple, advice giving again, a good candidate for such alimit is deriving the active goals and plans of all rele-vant agents in the world.
However, even applicationsthat involve more or less direct treatment of basic textmeaning, such as MT, will benefit from making fewerinferences.
There will always be difficult cases, such asthe need to understand the causal relation in The sol-diers fired at the women and I saw some of them fall toselect the correct reference for them?in Hebrew, forexample, the choice of the pronoun (the masculine otamor the feminine otan will depend on the gender of theantecedent).
Such cases are not overly widespread, anda prudent system would deliberately trigger the neces-sary inferences when it recognizes that there is a needfor them.
In general, any event is, in fact, complex, thatis, one can almost always find subevents of an event;whether and to what extent it is necessary to represent itas a script is a matter of grain size dictated by whetheran application needs this information for reasoning, andthat, in turn, is largely determined by the nature of thecorpora in the domain served by the application.3 Format of ScriptsScripts are represented in ontological semantics usingthe ontological property HAS-PARTS.
It has temporalsemantics if it appears in events, and spatial semantics ifit appears in physical objects, e.g., to indicate that anautomobile consists of an engine, wheels, the chassis,etc.
The properties PRECONDITION and EFFECT also carryinformation necessary for various kinds of reasoningand apply to any event, complex or otherwise.
Scriptsrequire an extension to the specification format.
Thereason for that is the need to bind the case roles andother property values in component events to establishco-reference.
Also, the HAS-PARTS slot of scripts shouldallow for the specification of rather advanced combina-tions of component events.
Therefore, the format of thefiller of HAS-PARTS in scripts should allow a) Booleanoperators and, or and not, as well as IF, THEN/ELSE andb) loop statements.
Scripts also need statements aboutpartial temporal ordering of their components.
For thispurpose, a special new property, COMPONENT-RELATIONS is introduced.Component events in a script have a peculiar status.They are not regular instances of concepts, as no instan-tiation occurs in the ontology?instantiation is one ofthe two main operations in generating TMRs, the otherbeing matching selectional restrictions in order to com-bine individual concept instances?but their meaning isdifferent from that of the general concepts to which theyare related.
Thus, asking questions in the context of aclass at school is clearly different from the general ideaof asking questions.
In order to represent this difference,the notion of ontological instance is introduced.
In anontological instance, some properties are constrainedfurther as compared to their ?parent?
concept.
The con-straints typically take the form of cross-reference to thefiller of another component event in the same script.For reasons of clarity and convenience, instead ofdescribing the component events and component rela-tions directly in the fillers of corresponding slots in theconcept specification for the complex event, we use thedevice of reification by just naming them in a uniqueway in that location (we identify ontological instancesby appending letters, not numbers as in the case of realinstances) and describe their content separately, at thesame level as the main script.
As a result, the format ofthe ontological description of a script is a set of onto-logical concept frames.Reification in ontological semantics is a mechanismfor allowing the definition of properties on properties byelevating properties from the status of slots in frames tothe level of a free-standing concept frame.
It is desirablefrom the point of view of nonproliferation of elementsof metalanguage to avoid introducing a concept of, sayD R I V E R  if it could always be referred to asDRIVE.AGENT.
However, this brings about certain diffi-culties.
For example, if we want to state that somebodyis a driver of trucks, we would have to say that there isan instance of DRIVE in which the THEME is TRUCK andthe AGENT is the person in question.
There is no directrelationship between THEME and AGENT, and it wouldtake a longer inference chain to realize that TRUCK is, infact, the value of a property of DRIVER, too, not only ofDRIVE.
The more properties one would want to add toDRIVER and not to DRIVE, the more enticing it would beto reify the property DRIVE.AGENT and treat it as a sepa-rate concept.
In principle, we can use reification on thefly, while building a TMR, when we need to add aproperty to a property, which is prohibited in the staticknowledge sources such as the ontology and the lexi-con.
As we will see in the example below, reificationalso facilitates the specification of scripts.In the example below, we present a simplified viewof the script/complex event TEACH.
As illustrated,T E A C H  has as PRECONDITION two events?that theteacher knows the material and the students do not; asEFFECT, it has the event that the students (now) knowthe material.
The process of teaching is presented asfollows: the teacher presents the material to the stu-dents, the students ask the teacher questions about thismaterial, and the teacher answers these questions.
Theabove is admittedly a gross simplification of the actualstate of affairs but will serve well for the purposes ofillustration.The ontological instances introduced in the processare: TEACH-KNOW-A, -B AND - C , TEACH-DESCRIBE,TEACH-REQUEST-INFO, TEACH-ANSWER, TEACH-AFTER-AAND -B.
The constraints in these instances are all refer-ences to fillers of slots in other components of the scriptor the script itself.
Reference is expressed using the tra-ditional dot notation (m.s[.f] is read as ?the filler of the[facet f of the] slot s of the frame m?).
Ontological in-stances are not indexed in the Fact Repository.
Theyappear in appropriate slots of scripts and their fillers areall references to fillers of other ontological instanceswithin the same script or the script itself.
They arePART-OF (inverse of HAS-PARTS) of the script in whichthey are listed but instance-of their corresponding basicconcept, that is, TEACH-DESCRIBE-A is the first ontologi-cal instance of DESCRIBE that is at the same time PART-OF TEACH.teachis-a value communicative-eventagent sem humandefault teachertheme sem knowledgedestination sem humandefault studentprecondition default (teach-know-a teach-know-b)effect default teach-know-chas-parts value (teach-describerepeat (teach-request-informationteach-answer)until teach-know-c)component-relationsvalue (teach-after-a teach-after-b)component-modalitiesvalue (teach-modality-a)teach-know-ainstance-of value knowpatient value teach.agent.semtheme     value teach.theme.semteach-know-binstance-of value knowpatient value teach.destination.semtheme      value teach.theme.semteach-modality-atype value epistemicscope value teach-know-bvalue value 0teach-know-cinstance-of value knowpatient value teach.destination.semtheme      value teach.theme.semteach-describeinstance-of value describeagent       value teach.agent.semtheme       value teach.theme.semdestination value teach.destination.semteach-request-informationinstance-of value request-informationagent       value teach.destination.semtheme       value teach.theme.semdestination value teach.agent.semteach-answerinstance-of value answeragent      value teach.agent.semtheme       value teach.request-information.theme.semdestination value teach.destination.semteach-after-adomain value teach-describerange value teach-request-informationteach-after-bdomain value teach-request-informationrange value teach-answer4 HeuristicsAs massive research on expert systems in the 1980sabundantly demonstrated, knowledge engineering re-quires human intelligence and stubbornly resists auto-mation.
Moreover, human intelligence must be devotedto heuristics, another highly non-trivial intellectualprocess.
Deciding what goes into a script requiresknowledge engineering and heuristics.
Part of the prob-lem is similar to the task of extending the ontology to anew domain?something the ontological semanticscommunity has had to face a number of times for vari-ous applications, most recently for information securityapplications (Raskin et al, 2002).
There are three mainsources for obtaining and structuring the required in-formation to chart out a new domain or to fill out a newscript:?
dictionaries, encyclopedias, thesauri;?
textbooks and reference books;?
pertinent corpora, most conveniently websites.General common sense or a small sample of perti-nent texts brings up a small number of apparently basicterms.
These terms are looked up in the first source, andthat leads to the second.
A selection of key terms formsthe basis of an Internet search that brings up the cor-pora.
Thus, in the case of bankruptcy, the term itselfbrings up an informative entry from Barron?s Financeand Investment Handbook (1995).
?BANKRUPTCY State of insolvency of an individ-ual or an organization?in other words, an inability topay debts.
There are two kinds of legal bankruptcy un-der U S. law: involuntary, when one or more creditorspetition to have a debtor judged insolvent by a court;and voluntary, when the debtor brings the petition.
Inboth cases, the objective is an orderly and equitablesettlement of obligations.The 1978 Bankruptcy Reform Act removed some ofthe rigidities of the old law and permitted more flexibil-ity in procedures.
The Bankruptcy Reform, Act of 1984curtailed some of the more liberal provisions (mainlyaffecting consumer bankruptcy) of the 1978 act.Chapter 7 of the 1978 act, dealing withLIQUIDATION, provides for a court appointed interimtrustee with broad powers and discretion to make man-agement changes, arrange unsecured financing, andgenerally operate the debtor business in such a way as toprevent loss.
Only by filing an appropriate bond is thedebtor able to regain possession from the trustee.Chapter 11, which deals with REORGANIZATION,provides that, unless the court rules otherwise, thedebtor remains in possession of the business and incontrol of its operation.
Debtor and creditors are al-lowed considerable flexibility in working together.
The1978 law relaxes the old absolute priority rule, whichgave creditor claims categorical precedence over owner-ship claims.
It also makes possible the negotiation ofpayment schedules, the restructuring of debt, and eventhe granting of loans by the creditor to the debtor.
?The entry, while somewhat cryptical, offers a prettygood guide for what to look for in a textbook or in legalsources.
It can easily lead to a number of sources of thetextbook category, such as Summers (1989), Caplan(1992), Davidson (1992).
The pertinent information,thus acquired, helps to identify the corpora, whichshould be both essential for the domain and crucial forthe application(s), such as the various bankruptcy-related pages at http://www.uslaw.com/.
Just as in fieldlinguistics (cf.
Samarin 1967), the corpora should bevaried, multi-sourced, and as representative/exhaustiveas possible.
The corpora give us a good sense of thegrain size of the information to be included in thescript?see more on this in Section 6.The most important step is to structure this informa-tion in the script.
Models of the script?s series of eventsobtained at the previous stage and their key conceptsneed to be checked against the ontology before thescripting takes place, to avoid later, costly adaptation ofnewly introduced concepts to the existing inventory.The models will also tend to pay too much attention todetails from the field to which they belong.
These de-tails have to be weeded out and the parts of the modelsto be united into the script have to be translated intoontological concepts, existing and, if necessary, newlyacquired.The methods for doing this are not easy to formulateas recommendations, let alne rules.
A similar situationin lexical and ontological acquisition leads, with experi-ence, to pretty well-established routines and, as a resultof adhering to them, quite good uniformity among dif-ferent acquirers.
Our work on routine acquisition of full-fledged scripts has only been going on for slightly overa year and has included only two domains so far, thefinancial domain and the domain of meetings.
We hopeto be able to make enough useful generalizations in thestyle of Chapter 9 on acquisition of ontological conceptsand lexical entries in Nirenburg and Raskin (2003) aswe acquire more practical experience.
The discovery ofheuristic rules remains a major challenge, possibly un-attainable.The following are the factors to be identified in thescript as concepts:?
the candidates for component events;?
the concepts involved in/created by the series ofevents;?
the goals of the component events;?
their temporal and causal relations leading totheir groupings into subscripts;?
decision forks, such as whether to file Chapter 7or Chapter 11 bankruptcies.5 Formatted ScriptThe results of the operations described in Section 4 areincorporated in the script for BANKRUPTCY below (forlegibility the FACET types SEM and VALUE are omitted inthis example):BANKRUPTCYis-a financial-eventagent owe.agentowe.beneficiaryprecondition approach-bankruptcyhas-parts (IF modality.pay.value = 0THEN bankrupt-chapter-7ELSE bankrupt-chapter-11)APPROACH-BANKRUPTCYis-a financial-eventagent corporation-ahas-parts(IFANDoweagent corporation-abeneficiary human-aemployed-by corporation-alending-institution-acorporation-btheme moneypayagent corporation-abeneficiary human-alending-institution-acorporation-btheme moneyTHEN bankruptcyagent corporation-abeneficiary human-alending-institution-acorporation-b)PAY.MODALITYtype potentialscope payvalue <1BANKRUPT.MODALITYtype epistemicscope bankruptcyvalue 0.6BANKRUPT-CHAPTER-7is-a financial-eventagent owe.agentowe.beneficiaryprecondition bankruptcyhas-parts (AND bankrupt.declarebankrupt.business-activitybankrupt.appointbankrupt.change-eventbankrupt.pay)BANKRUPT-CHAPTER-11is-a financial-eventagent owe.agentowe.beneficiaryprecondition bankruptcyhas-parts (AND bankrupt.declarebankrupt.legal-casebankrupt.audit(IF modality.bankrupt.audit.value = 0THEN bankrupt-appoint)bankrupt.planning-eventbankrupt.follow-plan(IF modality.pay.value = 0THEN bankrupt-chapter-7ELSE modality.pay.value = 1))BANKRUPT.DECLAREinstance-of declareagent owe.agentowe.beneficiarydestination owe.agentpath judicial-branchBANKRUPT.BUSINESS-ACTIVITYinstance-of business-activitybeneficiary owe.agentBANKRUPT.BUSINESS-ACTIVITY.MODALITYtype epistemicscope bankrupt.business-activityvalue 0BANKRUPT.AUDIT.MODALITYtype epiteucticscope bankrupt-auditvalue ?BANKRUPT.APPOINTinstance-of appointtheme manager-corporationbeneficiary owe.agentagent judicial-branchBANKRUPT.CHANGE-EVENTinstance-of change-eventtheme assetdestination moneyagent manager-corporationbeneficiary owe.agentBANKRUPT.PAYinstance-of paytheme moneyagent owe.agentbeneficiary owe.beneficiaryBANKRUPT.LEGAL-CASEinstance-of legal-casetheme moneyagent humanbeneficiary owe.agentBANKRUPT.LEGAL-CASE.MODALITYtype epistemicscope bankrupt.legal-casevalue 0BANKRUPT.AUDITinstance-of auditagent judicial-branchbeneficiary owe.agenttheme cash-flowassetdebtBANKRUPT.PLANNING-EVENTinstance-of planning-eventagent owe.agentjudicial-branchBANKRUPT.FOLLOW-PLANinstance-of follow-planagent owe.agent6 Grain Size IssuesThe script above, even though much more complex thanthe script for TEACH is presented in its simplest andprobably coarsest form.
The gain is parsimony, in thesense of minimizing the need to acquire new lexicalentries or concepts.
Are there losses?
A text may men-tion, for instance, a supplier?s refusal to ship stuff to thebankrupt corporation.
It does that because the corpora-tion cannot pay it for the supplies.
Can we consider itcovered in the script?
What if a text mentions the in-ability to meet the payroll?
Meeting the payroll maydeserve a script of its own.
It may be seen to be coveredsufficiently in the script above, but laying off employeesmay not.
To owe a loan is actually to owe an installmentpayment on a certain date, and to be unable to pay theloan means, actually, the inability to pay an installmentpayment of the loan on a certain date.
The script abovealso omits the entire credit ratings game.The rationale for having the scripts is, not surpris-ingly, to do what Schank declared his group would do aquarter of a century ago (Schank, 1975; Schank andAbelson, 1977) and, unlike them, to deliver a workablenon-toy product, in which the whole script is evokedwhen any element of it at any level of the script hierar-chy occurs lexically in the text.
The simplistic repre-sentation above obligates our analyzer to reduce anysuch pertinent lexical material to the level of owing andpaying.
Is it possible?
The alternative is to developmuch more elaborate scripts, involving a great dealmore of ontological acquisition and change.A more complex and more accurate level of repre-sentation, with all the intermediate subsidiary scriptsembedded in other scripts as well as component simpleevents enriched with precondition and effect (and, weincreasingly believe, goal values), will be much costlier,so the question is whether the gain in analysis makes itworthwhile.
We expect this to be dictated by the needsof the current and future applications as manifested intheir goals and the nature of the texts in the pertinentcorpora.
But much more effort will have to be devotedto developing more specific grain-size recommenda-tions, rules of thumb and repair/recovery procedures forcases when the grain size of the script is not sufficient tohandle a text.References:Attardo, S., and V. Raskin 1991.
Script theory re-vis(it)ed.
Joke similarity and joke representationmodel.
HUMOR 4:3-4, 293-347.Barron?s Finance and Investment Handbook, 1995.
4thed., ed.
by J. Downes and J. E. Goodman.
New York:Barron?s.Binsted, K. and G. Ritchie 1997.
Computational rulesfor generating punning riddles.
HUMOR 10:1, 25-76.Caplan, S. 1992.
Saving Your Business: How to SurviveChapter 11 Bankruptcy and Successfully ReorganizeYour Company.
Englewood Cliffs, NJ: Prentice HallCarlson, L., and S. Nirenburg 1990.
World Modelingfor NLP.
Technical Report CMU-CMT-90-121,Center for Machine Translation, Carnegie MellonUniversity, Pittsburgh, PA. A short version appearedin: Proceedings of the 3rd Conference on AppliedNatural Language Processing, Trento, Italy, April.Charniak, E. 1972.
Toward a Model of Children's StoryComprehension.
Artificial Intelligence Technical Re-port Number 266, Department of Computer Science,Massachusetts Institute of Technology, Cambridge,MA, December.Davidson, R. L. 1992.
The Small Business BankruptcyKit.
New York: Wiley.Fillmore, C. J.
1985.
Frames and the Semantics of Un-derstanding.
In: V. Raskin (ed.
), Round Table Dis-cussion on Frame/Script Semantics, Part I, Quadernidi Semantica VI: 2, 222-254.Hempelmann, C. F. 2003.
Paronomasic Puns: TargetRecoverability towards Automatic Generation.
Un-published Ph.D. thesis, Interdepartmental Program inLinguistics, Purdue University, West Lafayette, IN.McDonough, C. J.
2000.
Complex Events in an On-tologic-Semantic Natural Language Processing Sys-tem.
Unpublished Ph.D. thesis, Department ofEnglish, Purdue University, West Lafayette, IN.Minsky, M. 1975.
A Framework for RepresentingKnowledge.
In: P. H. Winston (ed.
), The Psychologyof Computer Vision.
New York: McGraw Hill, 211-77.Moreno Ortiz, A., V. Raskin, and S. Nirenburg (2002)New Developments in Ontological Semantics.
In:Proceedings of the Third International Conferenceon Language Resources and Evaluation (LREC2002).
Las Palmas de Gran Canaria, Spain.
May 29-31, pp.
1196-1202.Nirenburg, S., and V. Raskin 2003.
Ontological Seman-tics.
Cambridge, MA: MIT Press (forthcoming).Raskin, V. 1986.
Script-Based Semantic Theory.
In: D.G.
Ellis and W. A. Donohue (eds.
), Contemporary Is-sues in Language and Discourse Processes,Hillsdale, NJ: Erlbaum, 23-61.Raskin, V. 1994.
Frawley: Linguistic Semantics.
A Re-view Article.
Language 70: 3, 552-556.Raskin, V. 1996.
Computer Implementation of the Gen-eral Theory of Humor.
In: J. Hulstijn and A, Nijholt(eds.
), Automatic Interpretation and Generation ofVerbal Humor.
Twente Workshop on LanguageTechnology TWLT 12, The Hague: CIP, 9-19.Raskin, V., and S. Attardo 1994.
Non-Literalness andNon-Bona-Fide in Language: Approaches to Formaland Computational Treatments of Humor.
Cognitionand Pragmatics 2:1.Raskin, V., C. F. Hempelmann, K. E. Triezenberg, andS.
Nirenburg 2002.
Ontology in Information Secu-rity: A Useful Theoretical Foundation and Methodo-logical Tool.
In: V. Raskin and C. F.
Hempelmann(eds.
), Proceedings.
New Security Paradigms Work-shop 2001.
September 10th-13th, Cloudcroft, NM,USA, New York: ACM Press, 53-59.Samarin, W. J.
1967.
Field Linguistics.
New York: Holt,Rinehart and Winston.Schank, R. 1975.
Conceptual Information Processing.Amsterdam: North-Holland.Schank, R., and R. Abelson 1977.
Scripts, Plans, Goals,and Understanding.
Hillsdale, NJ: Erlbaum.Stock, O., and C. Strapparava 2002.
Humorous Agentsfor Humorous Acronyms: The HAHAcronym Pro-ject.
In: O.
Stock, C. Strapparava, and A.
Nijholt(eds.)
2002.
The April Fools?
Day Workshop onComputational Humor.
April 2002, ITC-irst, Trento.Twente Workshop on Language Technology TWLT20.
Trento: ITC-irst, 125-135.Summers, M. 1989.
Bankruptcy Explained, a Guide forBusinesses.
New York: Wiley.
