Dialogue Interaction with the DARPA CommunicatorInfrastructure: TheDevelopment of Useful SoftwareSamuel BayerThe MITRE Corporation202 Burlington Rd.Bedford, MA 01730sam@mitre.orgChristine DoranThe MITRE Corporation202 Burlington Rd.Bedford, MA 01730cdoran@mitre.orgBryan GeorgeThe MITRE Corporation11493 Sunset Hills Rd.Reston, VA 20190bgeorge@mitre.orgABSTRACTTo support engaging human users in robust, mixed-initiativespeech dialogue interactions which reach beyond currentcapabilities in dialogue systems, the DARPA Communicatorprogram [1] is  funding the development of a distributedmessage-passing infrastructure for dialogue systems which allCommunicator participants are using.
In this presentation, wedescribe the features of and requirements for a genuinelyuseful software infrastructure for this purpose.KeywordsSpoken dialogue, speech interfaces1.
INTRODUCTIONOver the last five years, three technological advances havecooperated to push speech-enabled dialogue systems backinto the limelight: the availability of robust real-time speechrecognition tools, the explosion of Internet-accessibleinformation sources, and the proliferation of mobileinformation access devices such as cell phones.
However, thesystems being fielded, and the standards arising from theseefforts, represent only a limited set of capabilities for robustvoice-enabled interaction with knowledge sources.
The mostprominent indication of these limitations is the fact that thesesystems are overwhelmingly system-directed; the system asksa question, and the user responds.
While this type ofinteractions sidesteps a number of problems in speechrecognition and dialogue tracking, it is overwhelmingly likelythat these restrictions are not manageable in the long term.The DARPA Communicator program [1] is exploring how toengage human users in robust, mixed-initiative speechdialogue interactions which reach beyond current capabilitiesin dialogue systems.
To support this exploration, theCommunicator program has funded the development of adistributed message-passing infrastructure for dialoguesystems which all Communicator participants are using.
Inthis presentation, we describe the features of and requirementsfor a genuinely useful software infrastructure for this purpose.2.
BUILDING USEFUL SOFTWAREThe Galaxy Communicator software infrastructure (GCSI) is anelaboration and extension of MIT's Galaxy-II distributedinfrastructure for dialogue interaction [3].
The fact that allprogram participants are required to use the GCSI imposes asomewhat more severe set of requirements on the infrastructurethan usual, and these requirements range far beyond thestraightforward considerations of functionality.?
Flexibility: the infrastructure should be flexible enoughto encompass the range of interaction strategies that thevarious Communicator sites might experiment with?
Obtainability: the infrastructure should be easy to getand to install?
Learnability: the infrastructure should be easy to learn touse?
Embeddability: the infrastructure should be easy toembed into other software programs?
Maintenance: the infrastructure should be supported andmaintained for the Communicator program?
Leverage: the infrastructure should support longer-termprogram and research goals for distributed dialoguesystems3.
FLEXIBILITYThe GCSI is a distributed hub-and-spoke architecture based onmessage-passing.
The hub of the GCSI incorporates a scriptingmechanism that allows the programmer to take control of themessage traffic by implementing "hub programs" in a simplescripting language.
The benefits of this sort of infrastructureare considerable in the context of exploring differentinteraction and control strategies for dialogue.
For example:?
Because the infrastructure is based on message-passinginstead of APIs, there's no need for the hub to have anycompile-time knowledge of the functional properties ofthe servers it communicates with (in contrast to, forinstance, a CORBA infrastructure).?
Because the hub scripting allows the programmer to alterthe flow of control of messages, it's possible to integrateservers with a variety of implicit interaction paradigms(e.g., synchronous vs. asynchronous) without modifyingthe servers themselves?
Because the hub scripting allows the programmer to alterthe flow of control of messages, it's possible to insertsimple tools and filters to convert data among formatswithout modifying the servers themselves.?
Because the hub scripting language fires rules based onaspects of the hub state, it's easy to write programs whichmodify the message flow of control in real time.4.
OBTAINABILITYWe believe that the simplest licensing and distribution modelfor software like the GCSI is an open source model.
With theappropriate open source licensing properties, there are nobarriers to freely distributing and redistributing the GCSI, orto distributing dialogue systems created using the GCSI, or tobuilding commercial products based on it.
The GCSI i sdistributed under a modified version of the MIT X Consortiumlicense, and we are reasonably certain that the licensesimplifies all these tasks.
In particular, two Communicatorsites are planning to distribute their entire dialogue systemsas open source, which would not be possible withoutappropriate licensing of the GCSI.It's also important to address the level of complexity ofinstalling the software once it's obtained.
Research software i snotoriously hard to install, and it's far more useful to ensurethat the software can be used straightforwardly on a smallnumber of common platforms and operating systems than totry to make it run on as many platforms as possible.
We'vetargeted the three platforms which the program participantswere developing on: Windows NT, Intel Linux, and SparcSolaris.
The GCSI is known to work or to have worked on otherconfigurations (HP-UX and SGI IRIX, for instance), but theseconfigurations are not supported in any meaningful way.
Theopen source model can help here, too: if someone wants to portthe infrastructure to a BSD OS, for instance, they have all thesource (and will hopefully contribute their modifications tothe open source code base).5.
LEARNABILITYOnce the software is installed, it's important to know where tostart and how to proceed.
We have offered a series of two-dayintensive training courses on the Communicator infrastructurewhich have been attended by the majority of Communicatorparticipants.
In addition, the GCSI comes with extensivedocumentation and examples, including a toy end-to-enddialogue system example which illustrates one possibleconfiguration of Communicator-compliant servers.
Our goal i sto ensure that it's possible to learn to use the Communicatorinfrastructure from the documentation alone, and at least twosites have succeeded in creating dialogue systems using theGCSI in a short period of time without attending our trainingcourse.6.
EMBEDDABILITYThe GCSI includes libraries and templates to createCommunicator-compliant servers in C, Java, Python, andAllegro Common Lisp.
However, it's not enough to provide asoftware library; this library has to be well-behaved in anumber of ways.
In particular, if the GCSI is to be used inconjunction with CORBA or various windowing systems, i tmust be possible to embed the GCSI server libraries into othermain loops, and to control all the features of the GCSI withoutcontrolling the toplevel flow of control.
To enable this goal,the GCSI is based on a straightforward event-basedprogramming model, which is used to implement the defaultCommunicator server main loop, as well as the implementationof the Python and Allegro server libraries.
The GCSI i sdistributed with a number of examples illustrating thisembedding.7.
MAINTENANCEFinally, GCSI consumers must be able to rely on getting helpwhen something goes wrong, and expect that design andimplementation problems will be rectified and that desiredcomplex behaviors will be supported.
The importance ofresponsiveness and flexibility in maintenance is one of thereasons we prefer the GCSI for Communicator instead of athird-party tool such as SRI's Open Agent Architecture [2],which the Communicator program does not control thedevelopment of.In addition to maintaining a bug queue for the GCSI, we haveaddressed successively more complicated infrastructurerequirements in successive releases of the GCSI.
For instance,in the most recent release (3.0), we addressed infrastructuresupport for asynchronous delegation strategies beingexplored by the Communicator effort at MIT and issuesrelating to consumption of audio input by multiplerecognizers.8.
LEVERAGEUltimately, we hope that the GCSI, together with open-sourceservers such as recognizers, parsers, synthesizers and dialoguemodules provided by application developers, will foster avigorous explosion of work in speech-enabled dialoguesystems.
For example:?
The programming-language-independent nature of theGCSI message-passing paradigm allows theCommunicator program to develop implementation-independent service standards for recognition, synthesis,and other better-understood resources.?
The freely available nature of the GCSI allows applicationdevelopers to contribute dialogue system modules whichare already configured to work with other components.?
The availability of an "environment" for dialogue systemdevelopment will support the development of an opensource "toolkit" of state-of-the art, freely availablemodules.
A number of Communicator sites are alreadyreleasing such modules.?
A common infrastructure will contribute to theelaboration of "best practice" in dialogue systemdevelopment.There are certainly a number of emerging and existingalternatives to the GCSI for dialogue system development(SRI's Open Agent Architecture, for instance).
However, webelieve that the combination of a software package like theGCSI and the critical mass generated by its use in the DARPACommunicator program presents a unique opportunity forprogress in this area.The GCSI is available under an open source license athttp://fofoca.mitre.org/download.9.
ACKNOWLEDGMENTSThis work was funded by the DARPA Communicator programunder contract number DAAB07-99-C201.
?
2001 The MITRECorporation.
All rights reserved.10.
REFERENCES[1] http://www.darpa.mil/ito/research/com/index.html.
[2] D. L. Martin, A. J. Cheyer, and D. B. Moran.
Theopen agent architecture: A framework for buildingdistributed software systems.
Applied ArtificialIntelligence, vol.
13, pp.
91--128, January-March1999.
[3] S. Seneff, E. Hurley, R. Lau, C. Pao, P. Schmid, andV.
Zue.
Galaxy-II: A Reference Architecture forConversational System Development.
Proc.
ICSLP98, Sydney, Australia, November 1998.
