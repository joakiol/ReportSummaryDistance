A Knowledge Acquisition and ManagementSystem for Morphological DictionariesPius ten Hacken ?, Stephan Bopp*, Marc Domenig ?,Dieter Holz ?, Alain Hsiung ?, Sandro Pedrazzini'Jl?Universit~it Basel, IFI *Vri.je Universiteit Amsterdam 'qDSIAPetersgraben 51 SR Lexicologie Corso Helvezia 36CH-4051 Basel NL-1081 HV Amsterdam CH-6900 LuganoAbstractA system for the acquisition and management ofreusable morphological dictionaries i clearly auseful tool for NLP.
As such, most currentlypopular finite-state morphology systems have anumber of drawbacks.
In the development ofWord Manager, these problems have been takeninto account.
As a result, its knowledge acquisi-tion component is well-developed, and itsknowledge representation enables more flexibleuse than typical finite-state systems.1.
IntroductionIt has long been recognized that there isa need for reusable dictionaries forNLP-systems.
A system for the devel-opment and maintenance of such dictio-naries can be viewed as a knowledgeacquisition and management tool.
Themajor objectives from this perspectiveare support for efficient dictionary con-struction, and maintenance of consis-tency within the database.As a starting point, it makes sense totake morphological dictionaries of a typethat can at least solve the mappingprob lem between text words and dictio-nary entries.
This problem directly in-volves inflection, (graphic) clitics (e.g.German zum = zu dent), and multi-wordunits, while wordformation is necessaryfor the recognition of newly coinedwords.
Concentrating on these morpho-logical dictionaries recommends itselfbecause the information they contain isrelatively well-understood (compared toe.g.
semantics), can be isolated fairlywell from more application-specifictypes of knowledge, and is necessary foralmost every NLP-application.In this project note, we will first con-sider finite-state morphology systemsfrom the perspective of knowledgeacquisition and management, and ob-serve some shortcomings (section 2).Then Word Manager (WM) is presented,and it is shown how WM avoids thesedrawbacks (section 3).
In section 4, anoverview of the present state of theWM-project is given.2.
Finite-State MorphologySystemsOne of the most widespread approachesto morphological dictionaries is finite-state morphology.
Currently, the mostattractive architecture is as in Figure 1(Karttunen et al (1992)):1284StringalternationrulesFormative lexicon\] I~ Compilation '1 Compilation(Lexicon FSA) (Rule FSTs)Lexicalransducel2, jFigure l: Architecture of Two-Level Morphology.Compared to the original systems ofKoskenniemi (1983) and Karttunen(1983), the major improvements madeduring the past ten years were in thecompilation of the finite-state transitiontables, and the switching from analyzersto transducers.
By pushing finite-statetechnology to its limits, the resultingfinite-state machines are extremely t2qst.If we consider current finite-state mor-phology systems as a potential solutionto the problem sketched in section 1, i.e.the acquisition and maintenance of mor-phological and lexical knowledge, theyhave a number of shortcomings.
First,knowledge acquisition is not supportedvery well: the editing of the formativelexicon and the string alternation rulesmust be done with text editors.
Hence, itis a major difficulty for the expert toconceive the lexicon's structure and thestring alternation rules.
In particular,the system provides little support for thevisualization of the structuring and in-teraction between the entities specified.Secondly, the knowledge is representedspecifically for the purpose of mappingfrom text words to their analysis andvice versa.
Flexibility in this respect islacking.
Thirdly, the mapping problemas defined above is only partially cov-ered: neither multi-word units, norcompounding and prefixation can behandled appropriately with the basicsystems.3.
Word ManagerThe three drawbacks of finite-state mor-phology mentioned have served as astarting point in the development ofWord Manager (WM).
The resultingproperties of WM are presented in thethree following subsections.3.1.
CoverageA strictly finite-state mechanism has anumber of problems in covering naturallanguage morphology, as has beenrecognized earlier (e.g.
Kay (1987)).In order to treat prefixation and com-pounding in a way parallel to suffixa-1285tion, the rules for combining formativesin WM are context-free.
Another differ-ence with two-level morphology is thebasic distinction between inflection andwordformation in WM.
Inflection istreated as the paradigmatic realization ofcertain features on a lexeme, whereaswordformation is the application of arule to a lexeme, resulting in a newlexeme.
This type of distinction is lin-guistically motivated and pragmaticallyelaborated by ten Hacken (1993).The rules for string alternation in WMare similar in function to two-levelrules, but two additional ways areoffered to restrict heir domain of appli-cation.
Whereas two-level rules can onlysee and change strings, WM string alter-nation rules can also see (but not change)features.
Besides they can be defined forindividual classes of lexemes or forindividual entries, for the treatment ofexceptions.
The entire formalism of thispart of WM is described in Domenig &ten Hacken (1992).The subsystem Phrase Manager, de-scribed in Pedrazzini (1994), covers allcases where the mapping between textwords and lexemes is not one-to-one.This includes (graphic) clitics and multi-word units.
The clitics mechanism aysplit up text words and rearrange theparts before further analysis.
Multi-word units are recognized and assigned astructure on the basis of the string, andtreated as possible analyses alongside theliteral ones.Together, the mechanisms included inWM cover the entire mapping problem.3.2.
CompilationThe WM formalism can be compiled ina variety of ways.
As opposed to compi-lation of current finite-state systems, theoutput is not restricted to an analyzer ortransducer.The basic compilation converts rules andentries into a network structure record-ing links between rules, formatives, andlexeme entries.
On the basis of thisstructure, WM can offer dynamicknowledge aggregation options, to beused for browsing, debugging (ruleapplication tracing) etc.. Another use ofthis structure is in the access to the databy client applications, where any type ofview on the data is supported.By compiling the wordformation rulesinto a unification-based grammar, WMcan analyze unknown words, and,drawing from the information gatheredin the parse tree, generate their lexemeentries (including all inflectional formsof the new entry).
Thus, the word-formation rules can be used for semi-automatic onstruction of the dictionary.In principle, there is no limit to thetypes of different formats and ruleswhich can be generated out of the basicnetwork structure.
It is straighttbrward,tbr example, to generate the input forKoskenn iemi ' s  two- level  system(Koskenniemi (1983)) or Karttunen'slexical transducer system (Karttunen etal.
(1992)).12863.3.
Knowledge AcquisitionIn the construction of a WM dictionary,linguistic and lexicographic knowledgeare separated.
As opposed to coding infinite-state morphology, it is not a singleperson who has to keep track of all therules, know all special symbols andwrite all the entries.
Instead, tailor-madeinterfaces for linguistic and lexico-graphic experts have been developed.The linguist's interface supports thedescription of the lnorphological rulesystem ol' a language in the WM-formal-ism.
Besides formulating the rules them-selves, the linguist has to give at leastone example per rule, and to describe allexceptions.The compilation step checks syntacticcorrectness and signals a number ofsemantic errors or probable errors.
Thecompiled database can be inspected tosee if the rules yield the desired results.The interface offers an incrementalcompilation facility, so that it is possibleto get an inspectable version of thedatabase without entirely recompiling it.This makes a gradual expansion of therule system with frequent testing ofintermediate results feasible.
Thus, theway compilation has been implementedin WM contributes to a higher degree ofconsistency.In the lexicographer's interface, therule-base coded by the linguist is pre-supposed and two tasks are supported:?
New formatives (stems) can bespecified and linked to existing regu-lar inflection rules.?
Existing l'ormatives can be combinedin novel ways, according to existingrules lot wordformation and multi-word units.Obviously, the interface Call show theconsequences ot' any lexicographic deci-sion for the l'orms generated by the rulesconcerned.
More active support is alsoprovided, so that the system proposes ananalysis interactively, t;or the first task,an inflection rule is proposed on thebasis of forms given by the lexicogra~phcr.
In the second task, the supportconsists of parsing the input on the basisof the rules in the database.
The lexico-grapher can choose and inspect one ofthe proposals, confirm it as it is, or goback and choose a dill'trent proposal.The resulting entry is incrementallyadded to the lexical database.The lexicographer's interface helps thelexicographer concentrate oil lexico-graphic decisions, rather than problemsof encoding them.
Since wordformationaccounts  for a major portion of a lan-guage's vocabulary, and this part of aWM-database is constructed by ruleapplication a high degree of consistencyis guaranteed.4.
Present State of the ProjectWM has been fully implemented as aclient/server system, where tile serverruns on either Sun workstations orMacintosh computers; the client cur-1287rently runs on Macintosh only.
Theimplementat ion  includes PhraseManager, the compiler, and the linguist'sand lexicographer 's  interfaces asdescribed above.
A comprehensivelydocumented version has been publishedon an ftp server (ftp@ifi.unizh.ch).A full rule database, including morpho-logical and phrasal rules, has beenimplemented for German, and completemorphological rule databases for Italian(described by Bopp (1993)) and English.The development of these databases hasshown that the expressive power of theWM-formalism is sufficiently rich for atleast some of the languages most fre-quently used in NLP-systems currentlyunder development.5.
Conc lus ionFrom the perspective of knowledgeacquisition and maintenance, WM has anumber of properties that distinguish itfrom current finite-state morphologysystems in a positive way.
It has a largercoverage, including compounding, pre-fixation, and multi-word units; compila-tion is much more generic in that itenables flexible use of information in thedatabase; and knowledge acquisition issupported by tailor-made interfaces forlinguists and lexicographers.
Therefore,WM is a tool that may be seen as anideal supplement for today's finite-stateanalyzers and transducers and thus afurther step towards the development oftruly reusable dictionaries.ReferencesBopp, Stephan (1993), Computerimplementationder italienischen Flexions- und Wortbil-dungsmorphoIogie, Olms, Hildesheim.Domenig, Marc & ten Hacken, Pius (1992),Word Manager: A System Jor MorphologicalDictionaries, Olms, Hildesheim.ten Hacken, Pius (1993), De/~ning Morphology:A Principled Approach to Determining theBoundaries c)f Compounding, Derivation,and Inflection, Ph.D. Dissertation, Univer-sity of Basel, to appear at Olms Verlag,Hildesheim.Karttunen, Lauri (ed.)
(1983), 'KIMMO: A TwoLevel Morphological Analyzer', in TexasLinguistic Forum 22, Department of Linguis-tics, University of Texas, Austin, p. 163-278.Karttunen, Lauri, Kaplan, Ronald M. & Zaenen,Annie (1992), 'Two-Level Morphology withComposition', Proceedings of Coling-92,p.
141-148.Kay, Martin (1987), 'Nonconcatenative Finite-State Morphology', in Proceedings of theThird Conference of the European Cahpter o./"the Assocation Jor Computational Linguis-tics, Copenhagen, p. 2-10.Koskenniemi, Kimmo (1983), Two-LevelMorphology."
A General ComputationalModel for Word-Form Recognition andProduction, University of Helsinki.Pedrazzini, Sandro (1994), Phrase Manager: ASystem for Phrasal and Idiomatic Dictionar-ies, Olms, Hildesheim.1288
