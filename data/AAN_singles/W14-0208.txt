Proceedings of the of the EACL 2014 Workshop on Dialogue in Motion (DM), pages 48?52,Gothenburg, Sweden, April 26-30 2014.c?2014 Association for Computational LinguisticsMulti-threaded Interaction Management forDynamic Spatial ApplicationsSrinivasan JanarthanamInteraction LabHeriot-Watt UniversityEdinburghsc445@hw.ac.ukOliver LemonInteraction LabHeriot-Watt UniversityEdinburgho.lemon@hw.ac.ukAbstractWe present a multi-threaded InteractionManager (IM) that is used to track differ-ent dimensions of user-system conversa-tions that are required to interleave witheach other in a coherent and timely man-ner.
This is explained in the context ofa spoken dialogue system for pedestriannavigation and city question-answering,with information push about nearby or vis-ible points-of-interest (PoI).1 IntroductionWe present a multi-threaded Interaction Manager(IM) that is used to track different dimensions ofuser-system conversations and interleave the dif-ferent converational threads coherently.
The IMthat we present interacts with the user in a spa-tial domain and interleaves navigation informa-tion along with historical and cultural informationabout the entities that users can see around them.In addition, it aims to answer questions that usersmight have about those entities.
This presentsa complex conversational situation where severalconversational threads have to be interleaved insuch a way that the system utterances are pre-sented to the user at the right time but in a pri-oritised order, and with bridging utterances whenthreads are interrupted and resumed.
For instance,a navigation instruction may be important (sincethe user is walking up to a junction at which theyneed to turn) and therefore it needs to be spokenbefore continuing information presentation aboutan entity or answering other ongoing questions.2 Related workPreviously, multi-threaded interaction was usedto handle multiple simultaneous tasks in human-robot interaction (HRI) scenarios (Lemon andGruenstein, 2004).
This idea also turns out to beimportant for cases where humans are interactingwith a variety of different web-services in paral-lel.
Human multitasking in dialogue is discussedin (Yang et al., 2008).
(Lemon and Gruenstein, 2004) presented amulti-threaded dialogue management approachfor managing several concurrent tasks in an HRIscenario.
The robot could, for example be flyingto a location while simultaneously searching fora vehicle, and utterances about both tasks couldbe interleaved.
Here, conversational threads weremanaged using a representation called the ?Dia-logue Move Tree?, which represented conversa-tional threads as branches of the tree, linked to an?Activity Tree?
which represented the states of on-going robot tasks (deliver medical supplies, fly to awaypoint, search for a truck), which could be ac-tive simultaneously.
The situation for our pedes-trian navigation and information system is simi-lar - concurrent tasks need to be managed coher-ently via conversation.
The approach adopted inthis paper is similar to (Lemon and Gruenstein,2004).
However, in this work we separate outa domain-general thread called ?dialogue control?which handles generic issues like clarification ofreference across all tasks.
This increasing modu-larisation of the dialogue threads makes it possibleto learn individual dialogue policies for each one,in future work.
(Nakano et al., 2008) presented an approachwhere one of the several expert modules handlingdifferent tasks is activated based on the user input,but only one verbal expert is active at any one time.In contrast to this, we present an approach whereseveral thread managers each handling a differenttask can be activated in parallel and their outputsstored and retrieved based on priority.3 Multi-threaded IMThe Interaction Manager (IM) is the central com-ponent of any spoken dialogue system architec-48Figure 1: Interaction Manager Architectureture.
Generally, it takes as input the user?s utter-ances in the form of dialogue acts from the parserand identifies the next dialogue action to present tothe user.
Dialogue about a domain task is managedusing a dialogue strategy or policy (e.g.
(Young,2000; Lemon and Pietquin, 2007)).
A dialoguepolicy is a mapping between dialogue states anddialogue actions, which are semantic representa-tions of what the system should say next.In order to handle multiple tasks simul-taneously, we present an architecture for amulti-threaded interaction manager that treatsconversation about each domain task as a thread.These conversational threads are interleaved andmanaged using techniques such as multi-queuing,priority based pushing, and queue revision.
Wedescribe these techniques below.
The architectureof the Interaction Manager is shown in figure 1.Multi-threading and queuingIn order to manage complex interactions involvingseveral conversational tasks/topics, we proposethat the each task be handled by a thread managerwithin the interaction management framework.Each such manager will handle a conversationalthread using a dialogue policy.
Each threadmanager will be fed with the input from the userand the dialogue actions generated will be storedin separate queues.
This approach allows theinteraction manager to produce several dialogueactions at the same time although for differentconversational tasks.Prioritised Queue ManagementDialogue actions from the several threads arestored in separate queues.
The queues can beassigned priorities that decide the order in whichitems from the queues will be popped.
Thedialogue actions in the queues are pushed to theuser based on an order of priority (see below).This priority can either be fixed or dynamic basedon context.
The system and user engagementshould also be checked so that system utterancesare pushed only when the system and user are notspeaking already.Queue Revision: resuming and bridgingThe dialogue actions are generated and stored inqueues.
Therefore, there is a difference betweenthe time they are generated and time that they arepushed.
Therefore dialogue actions in the queuesare revised periodically to reflect changes in con-text.
Obsolete dialogue actions will have to re-moved for two reasons.
Firstly, pushing them tothe user may make the conversation incoherent be-cause the system may be speaking about an entitythat is no longer relevant and secondly, these obso-lete dialogue actions may delay other other impor-tant dialogue actions from being pushed on time.In addition, it may also be useful to edit the dia-logue actions to include discourse markers to sig-nify topic change (Yang et al., 2008) and bridge49phrases to reintroduce a previous topic.
We dis-cuss some examples later in section 4.3.4 SPACEBOOK Interaction ManagerAs a part of the SpaceBook EU FP7 project,we implemented the above design for a multi-threaded interaction manager that presents the userwith navigational instructions, pushes PoI infor-mation, and manages QA questions (Janarthanamet al., 2013).
It receives the user?s input in theform of a dialogue act (DA) from the ASR mod-ule and the user?s location (latitude and longitude),orientation, and speed from the Pedestrian Trackermodule.
Based on these inputs and the dialoguecontext, the IM responds with a system output di-alogue act.
It should be noted that the locationcoordinates of the user are sent to the IM every 2seconds.
This allows the IM to generate locationaware information at a high frequency.
In addition,the IM has to deal with incoming requests and re-sponses from the user?s spoken inputs.
With thepossibility of system utterances being generatedat a frequency of one every two seconds, there isa need for an efficient mechanism to manage theconversation and reduce the risk of overloadingthe user with information.
These tasks are treatedas separate conversational threads.4.1 Conversational ThreadsThe SpaceBook IM manages the conversationusing five conversational threads using dedicatedtask managers.
Three threads: ?navigation?,?question answering?
and ?PoI pushing?, representthe core tasks of our system.
In addition, forhandling the issues in dialogue management,we introduce two threads: ?dialogue control?and ?request response?.
These different threadsrepresent the state of different dimensions of theuser-system conversation that need to interleavewith each other coherently.
Each of the threadsis managed by a thread manager using a dialoguepolicy.
Each thread can generate a dialogue ac-tion depending on the context, as described below:Dialogue ControlDuring the course of the conversation, the IM usesthis thread to manage user requests for repetition,issues with unparsed (i.e.
not understood) userutterances, utterances that have low ASR confi-dence, and so on.
The dialogue control thread isalso used to manage reference resolution in caseswhere referring expressions are underspecified.The IM resolves anaphoric references by keepinga record of entities mentioned in the dialoguecontext.
It stores the name and type informationfor each entity (such as landmark, building, etc)mentioned in previous utterances by either useror system.
Subsequent user references to theseentities using expressions such as ?the museum?,?the cafe?, and so on, are resolved by searchingfor the latest entity of the given type.
In caseswhere the IM cannot resolve the referent, it asksthe user to clarify.Request ResponseThe user can also initiate tasks that interesthim/her at anytime during the conversation.These tasks include searching for an entity (e.g.a museum or a restaurant), requesting navigationinstructions to a destination, and asking questionsabout the entities in the city database such as theirlocation (?Where is X?
?, ?How far is X??).
Dur-ing navigation, users might want to ask questionsabout the destination, ask for next instructions,etc.
All these user requests are handled usingthe request response thread.
For instance, whenthe user asks for directions, the IM resolves thedestination entity (perhaps using clarification)in the city model and acknowledges the userrequest.
The task is then further handled using theNavigation thread.NavigationThe IM identifies the location of the destinationentity and queries a city database (Bartie andMackaness, 2013) for a route plan.
Using the routeplan, the navigation thread presents step-by-stepinstructions to the user based on the current loca-tion and orientation of the user.
The IM contin-uously monitors users to determine if at any timethey are deviating from the planned route and pro-vides corrective instructions.
As users get nearto the next node on the route plan, the next in-struction is given.
The IM uses highly salient vis-ible landmarks (Bartie et al., 2013) and popularlandmarks near the nodes to instruct the user (e.g.
?When you reach Clydesdale Bank, turn left onto Nicolson Square?).
The IM also informs userswhen they pass by recognisable landmarks, just toreassure them that they are on the right track (e.g.
?You will pass by Tesco on the right?).
When theuser is close to his/her destination, the IM deter-mines whether the destination is visible to the user,informs the user, and closes the task.50Usr: I want to go to the National Gallery.Sys: Ok.
I am now looking for directions tothe National Gallery.Sys: The National Gallery is on Queens Streetat about 300 meters away.....Sys: Can you see the Bank of Scotland about300 meters away on your left?
It has a biggreen dome.Usr: Yes.
I can see it.Sys: Walk towards it.Sys: Can you see the National Gallery in frontof you at about 100 meters?
It is a buildingwith Roman architecture.Usr: Yes.Sys: You have now reached your destination.Question AnsweringThe system also answers ad hoc questions fromthe user (e.g.
?Who is David Hume?
?, ?What isthe Old College?
?, ?Who was William Wallace?,etc).
These are sent to the QA server and answeredbased on responses from the Question-Answering(QA) server (Janarthanam et al., 2013).
Thedialogue policy here is to answer the user?squestion with the first snippet available and askthe user to request for more if more snippets areavailable and he or she is interested.Pushing PoI InformationWhen the user is mobile, the IM identifies pop-ular points of interest (PoI) on the route based ontwo factors: proximity and visibility.
The dialoguepolicy is to introduce the PoI, query the QA serverfor snippets and push the first snippet to the user.The user is encouraged to ask for more informa-tion if he/she is interested.Sys: In front of you, about 200 meters away isOld College.
It has a grey dome on top.Sys: Situated on South Bridge, Old College is.
.
.Sys: Ask for more information if interested.4.2 Priority assignment in SpaceBookPriority is assigned to the above dialogue threadsas follows:Priority 1.
Dialogue control (repeat request, clari-fications etc)Priority 2.
Responding to user requestsPriority 3.
System initiated navigation task actionsPriority 4.
Responses to User-initiated QA actionsPriority 5.
PoI Push actionsFor instance, informing the user of a PoI could bedelayed if the user needs to be given an instructionto turn at the junction he is approaching.4.3 Queue revision and bridging utterancesThe queues need to be revised at regular intervalsin order to keep the information in them relevantto context.
For instance, the dialogue action of in-forming the user of his/her location is deleted after5 seconds, as this tends to become obsolete.
Sim-ilarly, dialogue actions corresponding to informa-tion segments in PoI and QA queues are edited toinform the utterance generator of other interven-ing dialogue actions so that it can use appropri-ate bridge phrases to reintroduce the focus of theconversational thread.
For instance, as shown inthe example below, the utterance generator insertsa bridge phrase (i.e.
?More on Old College?)
toreintroduce the focus of the PoI push task becauseof the intervening user request and the subsequentsystem response.Sys: In front of you, about 200 meters away isthe Old College.
It has a grey dome on top.User: Where am I?Sys: You are on Chambers street.Sys: More onOld College.
Situated on SouthBridge, the Old College is......5 ConclusionWe presented an architecture for a multi-threadedInteraction Manager that can handle multiple con-versational tasks.
We also described an implemen-tation of the architecture in a dynamic spatial en-vironment.
The SpaceBook IM is a multi-taskingIM that aims to interleave navigation informationalong with historical information about the enti-ties users can see around them.
In addition, it aimsto answer questions users might have about thoseentities.AcknowledgementsThe research leading to these results has receivedfunding from the European Community?s SeventhFramework Programme (FP7/2007-2013) undergrant agreement no.
270019 (SPACEBOOK projectwww.spacebook-project.org).51ReferencesP.
Bartie and W. Mackaness.
2013.
D3.1.2: The SpaceBookCity Model.
Technical report, The SPACEBOOK Project(FP7/2011-2014 grant agreement no.
270019).P.
Bartie, W. Mackaness, M. Fredriksson, and J. Konigsmann.2013.
D2.1.2 Final Viewshed Component.
Technicalreport, The SPACEBOOK Project (FP7/2011-2014 grantagreement no.
270019).S.
Janarthanam, O.
Lemon, P. Bartie, T. Dalmas, A. Dick-inson, X. Liu, W. Mackaness, and B. Webber.
2013.Evaluating a city exploration dialogue system combiningquestion-answering and pedestrian navigation.
In Proc.ACL 2013.Oliver Lemon and Alexander Gruenstein.
2004.
Mul-tithreaded context for robust conversational interfaces:context-sensitive speech recognition and interpretation ofcorrective fragments.
ACM Transactions on Computer-Human Interaction (ACM TOCHI), 11(3):241?
267.Oliver Lemon and Olivier Pietquin.
2007.
Machine learningfor spoken dialogue systems.
In Interspeech.Mikio Nakano, Kotaro Funakoshi, Yuji Hasegawa, and Hi-roshi Tsujino.
2008.
A framework for building conversa-tional agents based on a multi-expert model.
In Proceed-ings of the 9th SIGdial Workshop on Discourse and Dia-logue, SIGdial ?08, pages 88?91, Stroudsburg, PA, USA.Association for Computational Linguistics.Fan Yang, Peter A. Heeman, and Andrew Kun.
2008.Switching to real-time tasks in multi-tasking dialogue.In Proceedings of the 22Nd International Conference onComputational Linguistics - Volume 1, COLING ?08,pages 1025?1032, Stroudsburg, PA, USA.
Association forComputational Linguistics.Steve Young.
2000.
Probabilistic methods in spoken dia-logue systems.
Philosophical Transactions of the RoyalSociety (Series A), 358(1769):1389?1402.52
