Proceedings of the 13th Annual Meeting of the Special Interest Group on Discourse and Dialogue (SIGDIAL), pages 70?73,Seoul, South Korea, 5-6 July 2012. c?2012 Association for Computational LinguisticsRapid Development Process of Spoken Dialogue Systems usingCollaboratively Constructed Semantic ResourcesMasahiro ArakiDepartment of Information ScienceKyoto Institute of TechnologyMatsugasaki, Sakyo-ku, Kyoto 606-8585, Japanaraki@kit.ac.jpAbstractWe herein propose a method for the rapiddevelopment of a spoken dialogue systembased on collaboratively constructedsemantic resources and compare theproposed method with a conventionalmethod that is based on a relationaldatabase.
Previous developmentframeworks of spoken dialogue systems,which presuppose a relational databasemanagement system as a backgroundapplication, require complex data definition,such as making entries in a task-dependentlanguage dictionary, templates of semanticframes, and conversion rules from userutterances to the query language of thedatabase.
We demonstrate that a semanticweb oriented approach based oncollaboratively constructed semanticresources significantly reduces troublesomerule descriptions and complexconfigurations in the rapid developmentprocess of spoken dialogue systems.1 IntroductionThere has been continuing interest in thedevelopment methodology of spoken dialoguesystems (SDS).
In recent years, statistical methods,such as Williams et al (2007) and Hori et al(2009), have attracted a great deal of attention as adata-driven (i.e., corpus-driven) approach, whichcan reduce the troublesome manual coding ofdialogue management rules.
Statistical methodscan also be applied to other components of SDS,such as semi-automatic construction of semanticinterpreters and response generators.
However theoverall SDS development process still requiressome hand coding, for example to establish theconnection to the underlying application.Another data-driven approach was designed toprovide all of the SDS components with the goal ofrapidly constructing the entire system (Kogure etal., 2001; Heinroth et al, 2009).
This approachstarts from a data model definition (and so can beregarded as a data-modeling driven approach) andadds rules and templates, which are used as task-dependent knowledge in an SDS.
As a data modeldefinition, Kogure et al (2001) used a relationaldatabase (RDB) schema and Heinroth et al (2009)used OWL, which is an ontology definitionlanguage in semantic web applications.
Althoughthese data-modeling schemata are familiar todevelopers of web applications, additionaldefinition of rules and templates needed for anSDS is troublesome for ordinary web developersbecause such SDS-related rules require specializedknowledge of linguistics and speech applicationdevelopment.We herein propose a new data-modeling drivenapproach for rapid development of SDS that isbased on collaboratively constructed semanticresources (CSRs).
We present an automaticgeneration mechanism of code and data for asimple SDS.
In addition, we compare the proposedapproach with an ordinary data-modeling drivenapproach that is based on a RDB.
By using CSRsand the Rails framework of web applicationdevelopment, the troublesome definitions of rulesand templates for SDS can be reduced significantly.70The remainder of the present paper is organizedas follows.
Section 2 describes the proposedapproach to a data-modeling driven developmentprocess for SDS based on CSRs.
Section 3compares the proposed approach with the previousRDB-based approach.
In Section 4, the paperconcludes with a discussion of future research.2 Data-modeling driven approach basedon CSRsIn this section, we explain our previous data-modeling driven approach and describe additionalnew functionality based on CSRs.2.1 Object-oriented SDS developmentframeworkWe previously proposed a data-modeling drivenframework for rapid prototyping of SDS (Araki etal., 2011).
This includes a class library that isbased on the class hierarchy and the attributedefinitions of an existing semantic web ontology,i.e., Schema.org1.
This class library is used as abase class of an application-specific classdefinition.
An example class definition is shown inFigure 1.Figure 1: Example of class definition extendingexisting class library.In this example, the MyBook class inherits all ofthe attributes of the Book class of Schema.org inthe same manner as object-oriented programminglanguages.
The developer can limit the attributesthat are used in the target application by listingthem in the constraints section.
On the other hand,the developer can add additional attributes (in thisclass, ranking attributes as the type of integer) inthe definition of the class.1 http://schema.org/The task type and dialogue initiative type areindicated as annotations at the beginning of theclass definition.
In this example, the task type isDB search and the initiative type is user initiative.This information is used in generating thecontroller code and view code of the target SDS.Using Grails2, which is a Rails web applicationframework, the proposed framework generates thedialogue controller code of the indicated task typeand the view code, which have speech interactioncapability on the HTML5 code from this classdefinition.
The overall concept of the object-oriented framework is shown in Figure 2.Data?modeldefinitionMix?in?oftraitsembedapplicationlogicStatedefinitiongenerateconvertGrailsData?modeldefinitionGroovygenerateHTML5codeModelControllerViewFigure 2: Overview of the object-oriented SDSdevelopment framework.2.2 Usage of CSRsThe disadvantage of our previous framework,described in the previous subsection, is the highdependence on the dictation performance of thespeech recognition component.
The automaticallygenerated HTML5 code invokes dictation API,irrespective of the state of the dialogue andinitiative type.
In order to improve speechrecognition accuracy, grammar rules (in systeminitiative dialogue) and/or the use of atask/domain-dependent language model (LM) (inmixed/user initiative dialogue) are necessary.
Inour previous framework, the developer had toprepare these ASR-related components usinglanguage resources, which are beyond theproposed data-driven framework.In order to overcome this defect, we add theFreebase3 class library, which is based on large-scale CSRs, because Freebase already includes the2 http://grails.org/3 http://www.freebase.com/@DBSearch@SystemInitiativeclass MyBook extends Book {int rankingstatic constraints = {name(onsearch:"like")author(onsearch:"like")publisher()ranking(number:true)}}71contents of the data.
These contents and a large-scale web corpus facilitate the construction ofgrammar rules and a LM that is specific to thetarget task/domain.
For example, the Film class ofFreebase has more than 191 thousand entries (as ofMay 2012).
These real data can be used asresources to improve SDS accuracy.In system initiative type dialogue, the contentsof each attribute can construct word entries of thegrammar rule for each attribute slot.
For example,the grammar rule for the user's response to "Whichgenre of movie are you searching for?"
can beconstructed from the contents of the genresattribute of the Film class.
We implemented agenerator of the set of content words specified inthe data model definition from the data of Freebase.The generator is embedded as one component ofthe proposed rapid prototyping system.In the mixed/user initiative type tasks, sincecontent words and functional words make up theuser's utterance, we need a LM for speechrecognition and a semantic frame extractor for theconstruction of semantic data storage queries.
Wedesigned and implemented a LM generator and asemantic frame extractor using a functionalexpression dictionary that corresponds to theattributes of Freebase (Araki, submitted).
Anexample entry of the function expressiondictionary is shown in Figure 3 and the flow of theLM generation is shown in Figure 4.item valueproperty fb:film.performance.actorphrase pattern X "ga de te iru" Yconstraints X rdf:type "/film/actor"partial graph Y fb:film.performance.actor XFigure 3: An entry of function expressiondictionary.FreebasedataWebcorpusData?modeldefinitioncontentwordsin?domainentriesdomaindependentLMexamplesentencesFigure 4: Construction process of LM.3 Comparison with the RDB-basedapproach3.1 Overview of the RDB-based methodAs an example of the RDB-based SDS prototypingmethod, we review the method described inKogure et al (2001) (see Figure 5).ASR NLU Search NLG TTSAMLMdictionaryfunctionalnoun.grammargeneralquery DBrule formatpronounceinput outputdomainindep.dep.
taskindep.dep.
Figure 5: Modules and knowledge of the RDB-based method.They examined the domain dependency and taskdependency of the knowledge that drives SDS.Domain/task-independent knowledge, such as anacoustic model, a general function word dictionary,and a pronunciation dictionary, are prepared inadvance for all of the systems.
Both domain-dependent/task-independent knowledge, such asthe language model, the noun/verb dictionary, andthe database schema, and domain/task-dependentknowledge, such as the rule of query generationobtained from the results of semantic analysis andformat for output, must be specified by thedeveloper.
If the developer wants to change a taskwithin the same domain, the developer can reusedomain-dependent/task-independent knowledge(everything above the dotted line in Figure 4) andmust specify task-dependent knowledge(everything below the dotted line in Figure 4).3.2 Comparison of the data-modeling stageIn the data modeling of the RDB-based method,the developer must specify field names (e.g., title,year), their corresponding data types (e.g., string,integer), and the labels of the fields (i.e., the labelsfor the language used in the SDS), as in the usualweb application with RDB.
Since the data modeldefinitions differ from one another, it is difficult tointegrate similar systems even if these systems dealwith the same domain.In the CSRs-based approach, the data-modelingprocess involves selecting necessary attributes ofthe inherited class and, if needed, adding fields for72additional domain/task-specific information.
Thedata type has already been set in the existing dataschema, and language-dependent label informationcan be acquired by the value of rdfs:label, wherethe value of the lang attribute is the target language.3.3 Comparison of code generation stageIn the RDB-based method, the developer mustspecify the noun and verb dictionary, grammar forparsing, and rules for query generation.
In addition,the RDB-based approach must either stick to afixed dialogue pattern for DB search or make thedeveloper write dialogue management rules.By combining the CSRs-based approach withthe Rails framework, the task dependent dictionaryis automatically generated from the data andgrammar rules are easily constructed with thefunctional expression entries of properties.
Also inthis approach, typical dialogue managementpatterns are already prepared and can be specifiedas annotations.
For the sake of this setting, all ofthe basic codes for SDS are automaticallygenerated from the data model definition.3.4 Comparison of functionalityIn the RDB-based method, the developer mustmake a domain/task dependent LM using languageresources outside of the development process.However, in general, it is difficult to acquire adomain/task-dependent corpus.
In addition,although the RDB-based method is designed to berobust with respect to the task modification, thismethod is not robust with respect to porting todifferent languages.
Language specific code tendsto be embedded in every component of an SDS.In the CSRs-based approach, the domain/task-dependent LM is automatically generated, asdescribed in Subsection 2.2.
For the sake of thisdata-modeling driven method and nativemultilinguality of CSRs, the developer can easilyimplement multilingual SDS (Araki et al, 2012).Multilingual contents are already prepared inFreebase (although English resources aredominant) and a multilingual web speech API isalready implemented, e.g., in the Google Chromebrowser, the developer can implement a prototypeof other language SDS by dictation.
If thedeveloper wants to use domain/task-dependentLMs, he/she must prepare example sentences forthe target domain/task in the target language.4 Conclusions and future researchWe have proposed a method for rapid developmentof a spoken dialogue system based on CSRs andhave compared the proposed method with theconventional method, which is based on RDB.In the current implementation, our system cannothandle the problem of the variation of the namedentity which is dealt with by e.g.
Hillard et al(2011).
We are planning to examine theextensibility of the proposed framework bycombining such refinement methods.AcknowledgmentsThe present research was supported in part by theMinistry of Education, Science, Sports, andCulture through a Grant-in-Aid for ScientificResearch (C), 22500153, 2010.ReferencesMasahiro Araki and Yuko Mizukami.
2011.Development of a Data-driven Framework forMultimodal Interactive Systems.
In Proc.
of IWSDS2011, 91-101.Masahiro Araki.
submitted.
An Automatic ConstructionMethod of Spoken Query Understanding Componentfrom Data Model Definition.Masahiro Araki and Daisuke Takegoshi.
2012.
A RapidDevelopment Framework for Multilingual SpokenDialogue Systems.
In Proc.
of COMPSAC 2012.Tobias Heinroth, Dan Denich and Gregor Bertrand.2009.
Ontology-based Spoken Dialogue Modeling.
InProc.
of the IWSDS 2009.Dustin Hillard, Asli ?elikyilmaz, Dilek Z. Hakkani-T?r,and G?khan T?r.
2011.
Learning Weighted EntityLists from Web Click Logs for Spoken LanguageUnderstanding.
In Proc.
of Interspeech 2011, 705-708.Chiori Hori, Kiyonori Ohtake, Teruhisa Misu,.
HidekiKashioka and Satoshi Nakamura.
2009.
StatisticalDialog Management Applied to WFST-based DialogSystems.
In Proc.
of ICASSP 2009, 4793-4796.Satoru Kogure and Seiichi Nakagawa.
2001.
ADevelopment Tool for Spoken Dialogue Systems andIts Evaluation.
In Proc.
of TSD2001, 373-380.Jason D. Williams and Steve Young.
2007.
PartiallyObservable Markov Decision Processes for SpokenDialog Systems.
Computer Speech and Language,21(2), 393-422.73
