The.,CLEF= semi-~recursive g neration algori:thmRodrigo ReyesThomson-CSF/LCRTalana, Univ.
Paris 7February 6th ,2000Abstract 2 Presentation of GTAG" .
.
.
.
.
.
.
.
.
.
.
.
.
We+will discuss the:somi-reeursiveaigorithm for .......
-+-+,~he~GTAG.
?ovmalismdescrihes.th~domain_text generation, as defined for the GTAG model used to specify the input of the generator,formalism, and its implementation in the CLEFproject.
We will show how to use iexical choiceconstraints and properties of the LTAG grammarto minimize the backtracking of the semi-recursive algorithm.1 IntroductionGTAG is a multilingual text generationformalism derived from the Tree AdjoiningGrammar model ((Joshi and al., 1975), (Shabesand Shieber,1994)).
This formalism, which is stillevolving, uses slightly enriched TAG grammarsas its syntactic back-end.GTAG only deals with the << How to say it ?>>aspect of the generation process.
It takes as inputa partly computed symbolic representation f thediscourse, and defines the processing and the datanecessary to produce the final text.GTAG iswidely described in (Danlos, 1996), (Danlos,1998), and (Danlos1999).Flaubert was the first GTAG implementation,conducted by Cora SA ((Meunier and Danlos,1998), (Meunier 1997)).
This implementationvalidated the first versions of the formalism, andyielded a stable version of GTAG.
A newimplementation has been initiated by Thomson-CSF LCR ((Meunier and Reyes, 1999), (Meunier,1999)), using the Java language, with a strongemphasis on research and applications.We will give firstly a short insight of the GTAGformalism, then introduce the semi-recursivealgorithm in comparison with the recursive?
approach.
Then, we will give a presentation fthe CLEF generation algorithm that yields anearly-surfacic syntactic representation from theconceptual representation (a post-processingphase takes care of the final output).as well as the linguistics data and processingnecessary togenerate t xts.
GTAG uses a first-order logic formalism for its domain model, and alexicalized TAG grammar as its syntactic model.We introduce hereafter both sub-formalisms, andthe manner in which GTAG links them.2.1 Domain modelThe Login (Logic and inheritance) formalism((A'it-Kaci and Nasr, 1986), (Meunier, 1997)) hasbeen used to model the domain knowledge.
Ittakes type constraints into account, hus allowingto validate, to a certain extent, the inputstructures' coherence.GTAG specifies an additional constraint on themodel : the existence of three generic onceptsused to divide the conceptual domain, as follows.o Entities, representing objects (individuals) ofthe world.o lSt-order elations, representing simpleevents, between entities, or between entitiesand relations.?
2nO-order relations, representing relationsbetween relations.~ SEntities1 St-order 2hal-orderrelations relationsFigure I.
A typical model for the domain.Thus, a typical model will have the followingform.
as shown in figure I.2312.2 The grammarThe syntactic back-end is a Lexicalized TreeAdjoining Grammar, which complies with thePredicate-Argument Cooccurrence Principle(Abeillr, 1993), enriched with the following :o T-Features, that tag and identify thedifferences between the syntactic structures(namely the trees).
Those atomic tags, such?
as T_CANONICAL, TtaASSIVE,T_WITHOUT_ARG I,T_WITHOUT_ARG2, etc., are used as acompositional selection mechanism ofsyntactic structures.
For instance, the~ passive without agent >) structure isdetermined by the following array offeatures ?T CANONICAL+T PASSIVE+T WITHOUT ARGI.o Forms features, associated with each of thegrammar t ees, indicating their textual level.The possible values for the form features areas follows ?- -T -P  ?
for noun phrases.. -T+P ?
for a single sentence.?
+T+ P : for a text, i.e.
varioussentences."
+P " for either a single sentence or atext.o G-derivation structures, which correspond tounderspecified derivation trees.
The nodes.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
can.be constant (eaohnode, is.equivalent-to anelementary tree, as in standard erivationtrees), or variable.
In the latter case, the nodecan be associated with eithera conceptattribute name, or with an instantiatedconcept.?
Syntactic functions, which are encoded in thegrammar.- " 2~3 - The  semantic-conceptualinterfaceThe semantic-conceptual interface is provided bythe lexicai bases (LB), which relate eachinstantiated concept from the generator inputstructure with an array of g-derivation trees.
Thisinterface associates arguments (from thegrammar) with concept attributes (from theconceptual domain).A lexical base must be able to give, at any time ofthe process, a valid lexical choice.
When it iscreated, a lexical base refers to a g-derivationtree, selected by default by the domain creator.This lexical choice can be modified byconstraints introduced by the generation process.The GTAG global generation strategy is tomodify the lexical base so that the lexical choicesbe coherent (selected trees can be combined), andthat the text be as good as possible.The inputJOHNFigure 2.
\ ]he  input structure associated to lexical bases2323 .The ,generation:algorit hmTactical generation algorithms use variousstrategies which are all input-dependent.Moreover, defining the bounds between the "howto say" and the "what to say" is still an openquestion.
RAGS (rags, 1999) proposes astandardarchitecture for the data, but leaves the~Eeature; oron.the_linear, order, of the elements, .or " .
.
.on the realisation of the arguments, etc.A list of constraints (initially empty) is associatedto each lexical base, and the generation processadds new constraints while parsing the inputstructure.
There are two types of constraintsadditions :processing details underspecified.
?
implicit constraints.
Such constraints are.
.
.
.
.
.
.
.
.
.
.
.
.
.
However two main approaehes,carrbe,notieed -'.
.
.
.
,._.., .......... added;by~p~en~LB~that~added:~a:~ons/x~nt,~.
~ ~ , .the recursive one and the deductive one.
The due to its own internal lexical choice.
Forrecursive approach is basically a depth-firstbacktracking search (for example (NicoIov,1998)), while the deductive one uses inferencemechanisms such as those used in expert systemsor specialized languages such as PROLOG(Panaget, 1997).
As deductive systems are oftenused as opaque ways of resolving problems, wewill focus on the recursive algorithm, that caneasily be used as a base for the customizing ofalgorithms.3.1 The input structureThe input of the CLEF generation system is ahierarchical representation (i.e.
a tree structure)of the conceptual structure.
Therefore, a crucialchoice is done before the proper linguisticgeneration : selecting the theme and the rheme ofthe utterance ~.The main advantage from a technical point ofview is the processing linearization : such astructure is not ambiguous regarding to themapping between the elements of the inputstructures and the elements of the grammar.
Theinput structure is therefore always considered asa single tree, and the text generation algorithm isbasically a tree walk on this structure, with alexical choice processing for each node.3.2 Lexical choice constraintsThe lexical choices made by the lexical bases aremodified by constraints hat are related todifferent aspects of the selection : either on the T-This choice is clearly arbitrary, because it isequally relevant o the "what to say" and the"how to say it".
Such a choice for CLEF wasmainly guided by technical considerations.example, the lexical selection of"S 1 before$2" (for a succession concept) imposesgrammatical constraints on the argument"after" (related to $2) so that the selection ofthe argument be grammatically compatible(i.e.
add a constraint that imposes the use ofan infinitive sentence).explicit contraints.
Those constraints areadded by stylistic rules that will carry on the?Figure 3 ?
R0 and R1 are two 2"d-orderrelations.
E2, E11, and El2 are two 1 st-order relation.
E0 and E1 are twoglobal schemas.lexical choice in order to avoid poor style, orto prevent dead-ends in the generationprocess.
For example, the parallelism rule(Meunier 97) should impose that two verbalpredicates use the same syntactic function foran argument they have in common.Every constraint addition is associated with aposition in the input structure walk, so that it canbe removed whenever the backtracking is used.We will also discuss how the backtracking can bepartly avoided taking into account someproperties of the algorithm, and using a minimumconstraint propagation technique,2333.3 The semi-reeursivealgorithm ?
(Danlos, 1996) emphasizes on the problems tiedto the use of a recursive depth-first algorithm inthe area of text generation.
More specifically shediscusses the impossibility of preventing poorstylistic choices, even when they can be easilypredicted.
In fact, the problem holds in thatstylistic or grammatical rules use information that~are~computed latev:in!
:the~ge, ne~ation~stage by  therecursive algorithm.Thus, in the examples given by (Danlos, 1996)(see figure 3), the two 2hal-order relation choicesare obviously linked to each other.
Nevertheless,the computation of the selection of R1 is not doneuntil other selections are done (at least E2, in thisexample).
In this way, if no lexical selectionsatisfies the syntactic or stylistic constraints, thegeneration process will backtrack on the wholearray of previous elections.Some techniques can be used topartially make up for theproblem, for example thememoization ((Nicolov, 1998), \[ 2,d_order(Becker, 1998)), but it does not \[ relations LBsolve the problem.
The fact is |that depth-first recursive.
.
.
.
.
.
.
.
.
.
,is.~ensure, d~.zand~eaeh~lewel,of~eoncept isconsidered globally.?
The compatibility tests between theselections (i.e.
the three levels of  concepts)are carried out.
If the combination is valid, itis accepted, otherwise some new selectionsare done until the compatibility tests succeed.......
.,'I'he,approach,of., th~algorithra ,,is;partic~_~!o fly.relevant, as the consistency is not ensured merelyfor the array of  previous lexical choices (which isnot enough, as we discussed), but for the wholeset of iexicai choices on the same level.
Thisprovides a realistic implementation f the globalapproach.3.4 The CLEF  algorithmThe CLEF algorithm is a variant of the semi-recursive algorithm.
In fact, the main idea of thesemi-recursive algorithm is the separatedl St-orderrelations LBapproaches are not adapted totext generation, where lexicalchoices must be done in aglobal, holistic perspective(Danlos, 1998) and (Busemann,1993).In this perspective, (Danlos,1996) proposes a differentalgorithm, called "semi-recursive" algorithm, in that itremedies to the main drawbacksof the recursive algorithm.
Thelatter is caracterized by thefollowing features :o The lexical choices of thedifferent levels of relationsare carried out in parallel.The combinations of the trees and thestylistic choices are carried out separately foreach level of concept.
Thus, the consistencyof all the lexical choices for a particular levelLexical selection for ~ /RO and R ILexical selection forCombination of 1S'-order relations LB and2?a-order relations LBFigure 4.
The semi-recursive algorithm.processing of the different levels (entity, l~Lorderrelations, 2"d-order relations).One problem remains : although the context istaken into account, it is only used in the samelevel of concepts.
Thus, both the 2"a-orderrelations and the l~Lorder elations remain234independent from each other;~and in case offailure of the compatibility test, incompatibleselections must be computed again.
This is due tothe fact that choices are carried out in parallel.
Inorder to solve this problem easily, computationshould be carried out sequentially and thedifferent levels should be computed in apredefined order.
In this ease, the questionsyntactic one (eg: aprewious lex, ical selection.
- .
.._:imposes ome syntactic onstraint).
Manyessential information, for example to decidewhether a noun phrase must be pronominalized or.not, whether averb can be elided or not, areavailable only if the surrounding context doesexist and is known..:arises: in which ord~,should the different ?
:.
.~ ..... ,;The ~,princilale~0Ethe;determination of.the,hacal , .
.
.
,.conceptual levels be computed ?
context by the global one" (called "hermeneuticsSeveral evidences indicate that higher levelelements should be selected first, then the lowerlevels (i.e.
the 2"d-order relations first, then thelSt-order elations, and then the entities).
In fact,on the rhetorical point of view, the higher levelelements (in GTAG, the 2nd-order relations)determine the text argumentative structure, thusproviding stylistic consistency on the wholegenerated text.
Were they not selected first, theywould be constrained by the lexical choices ofthe other types of concepts.
In other words, theywould yield to constraints other than purelystylistic, which is not suitable for elements whichfirst criterion of choice is, precisely, stylistics.Moreover, it seems that in numerous cases, it ispreferable to select he simpler elementsaccording to more complex ones.
Thiscorresponds tothe approach developped by(Rastier and al., 1994), that shows that anelement is only relevant in its surroundingcontext.
Such an approach is relevant in ourframework, since a particular lexical selectioncan only be done with full knowledge of the factsif its context is known.
By context, we mean theconceptual-semantic context (eg.
a reference toan entity that already exists in the discourse), thelexical context (eg.
some lexical selection thathas already been used for an entity), and theprinciple" in (Rastier and al., 1994)) cantherefore be applied only if the global context isalready computed, then the local one, accordingto the global context.
In order for the generationprocess to be compliant with this principle,elements should be computed in the followingorder: 2'd-order relations first, then lSt-orderrelations, and then entities.Proceeding otherwise would be inconsistent : it isnot possible to determine the lexical-syntacticselection of an entity without knowing if it isbound to a noun or a verb.
The two possibilitiesare not necessarily available for a given concept,and carrying on without his piece of informationcould be considered a last resort.Besides urrounding context, the local context isalso necessary, as shows the perspective notionwhich can be found in (Busemann, 1993), andalso supported by (Rastier and al., 1994).
It istherefore necessary toknow the dependents (thechildren in the input tree structure) in order tomake a lexical-syntactic choice.These elements were crucial for the design of theCLEF generation algorithm, which we willdescribed hereafter.2353.4.1 Linearization of the algorithmThe CLEF generation algorithm considers thethree conceptual levels one by one, carrying outthe lexical selection at first on the 2hal-orderrelations, then on the PLorder relations, andfinally on the entities.MARY TA RT/ /~N, ,  SLEEP IPETER TART PETERFimlre 'q.
The 1 st nha~e..~< Mary~cctoke&a:fatt;;then..:.
}});;~hen- ::-COOK will be computed before EAT andSLEEP.
On the contrary, i fa tree anchoring<< S1 after $2 ,  is used (like in << Peter ate thetart and fell asleep after... >>), EAT andSLEEP will be computed first, then COOK.This important property of the algorithm: .. .
.
.
.
.
.
.
.  "
.... "SUCCEgSfON ' " :  ...... : "  .... " 'MARY TART EAT SLEEPPETER TART PETERFimlre 6.
The "2 nd nha~eMARY T'aSR .
l ~  SL I~PPETER TART PETERFimlre 7The graph walk has the following properties :o It is carried out in three phases, one for eachconceptual level.o The walk is done depth-first, but followingthe surfaeie linear order of the elements.Thus, the walk order for the lSLorderelements depends on the lexical choices forR0 and R1 (see fig.3) : if the lexicalized treeselected for R1 situates E2 before RI, thenE2 should be computed before El I and El2.The same way, for El 1 and El2, the order ofthe processing will depend on the treeselected by R1.
On our example (fig.
5 to 7),this means that the order of walk of thesecond phase (regarding the l SLorderrelations) will depend on the lexical choicestook during the first phase.
For instance, ifthe SUCCESSION concept is lexicalizedusing a tree anchoring <~ S1 then $2 ~> (like inThe qrd nh,qReallows to make lexical choices according toprevious ones.
* A stack is added, and allows the storage ofevery lexical choice according to their linearorder.
This stack stores the history of thechoices carried out, and thus allows tobacktrack when needed.o During the tree walk, some constraints arepropagated towards the lower elements of thetree.
So, a lexical-syntactic selection of aconcept would be able to add constraints overthe lexical choices of_the lexical bases lower-dependent.
For example, such a conceptcould select a particular Form feature, or aparticular set ofT-Features, for one of itsdependent.Unlike the semi-recursive algorithm, the globalcontext choice also carries out according to localchoices.
Tile stylistic rules can not only use the236.
.information given by.
the:conceptsofthe samelevel, but also the information given by thedependent odes, which allows the retrieval ofsome predictable information.
This informationis, of course, limited as the lexical-syntacticchoice of the dependent lexical bases if notperformed at this point.For example, if E2 and E 12 refers to the same~ concept, some constraints could be.e0mputed as.soon as the lexical selection for R0 is done, andadded to the lexical bases of the dependent odesof R0, in particular RI.3.4.2 Minimum constraint propagation :controlling the backtrackingThe backtrack, when the processing comes to animpossibility for a lexical base to get asatisfactory lexical choice, is not excluded,although it is inherently limited by the nature ofthe graph walk.The handling of the backtracking can also takeadvantage of both the walk mechanism and thedata structures used.For example, if the algorithm fails to find a validchoice for the El2 element (see figure 3), thebacktracking can be performed irectly on R1, tofind an alternative choice compatible with all thedependent odes (that is E 11 and R0, in ourexample).
Ifa modification is both available andcompatible with the related lexicai bases, it willbe validated.
For a lexical base, a modification isconsidered compatible if it does not imply anymodification i  the set of implicit constraintsadded to the related lexical bases, except helexical base from which the processingbacktracks.In our example, the backtracking process can askthe LB for RI to find an alternative choice thatmodifies the constraints on El2, withoutmodifying any other, that is letting the implicitconstraints for E11 et R0 untouched.
In otherwords, it consists in adding a new constraint on?
R1 that will imply the selection of a new lexical-syntactic structure so that the implicit constraintson E11 and R0 remain identical, and so that theimplicit constraints on El2 impose a new,compatible, choice.The algorithm can therefore carry out a minimumpropagation of the constraints, withoutnecessarily doing a full backtracking.
In that case.......... it_attem pts .to ..find z~the~.best.compram ise .w ith.
:the..related lexical ?bases, before falling back to thenormal backtracking mechanism.4 ConclusionWe discussed how to implement and improve thesemi-recursive algorithm described in(Danlos1996), so that the global (holistic)...... approach ((Danlos, 1996) and (Rastier and -.." a1.~1994)) be i'eali-sfically iniple/fiented.
'Becauseof its nature, the algorithm is intented rather forbest-first generation, and several improvementsare still being studied, regarding the paraphraseand the dynamic onstruction and updating of thelexical bases.5 References(Abeille, 1993) Abeill6 A.
(1993): <<Lesnouvelles yntaxes: grammaires d'unification etanalyse du frangais >), Armand Colin, Paris.
(AYt-Kaci and Nasr, 1986) AR-Kaci H, Nasr R.(1986) : << Login : A logic-ProgrammingLanguage with Built-In Inheritance >), in Journalof Logic Programming, 3.
(Beeker, 1998) Becker T. (1998): <<FullyLexicalized head-driven syntactic generation >~,INLG'98, Niagara-on-the-Lake, Ontario, Canada.
(Busemann, 1993) Busemann S. (1993): << Aholistic view of lexical choice>>, in HelmutHoracek (ed.
), New Concepts in NaturalLanguage Generation : Planning, Realization, andSystems, Frances Pinter, London, New-York.
(Danlos, 1996) Danlos L. (1996) : << Pr6sentationde G-TAG, un formalisme pour la gdn6ration detextes inspir6 des grammaires d'arbres adjoints >>,in Acres TALN-96, Marseille.
(Danios, 1998) Danlos L. (1998), << G-TAG: aFormalism for Text Generation inspired fromTree Adjoining Grammar: TAG issues,, inAbeill6 A., Rambow, O.
(eds), Tree AdjoiningGrammars, CSLI, Standford.
(Danlos, 1999) Danlos L. (1999), << G-TAG : unformalisme lexicalis6 pour la g6n6ration de textesinspir6 de TAG >>, TAL, Vol.
39.2.
(Danlos and Meunier, 1996) Danlos L., MeunierF.
(1996), << La g6n6ration multilingue :applications industrielles et r6alisationscientifique >>, Langues situ~es, technologiccommunications, 1996237(Joshi and al., 1975) Joshi A., Levy L.,Takahashi M. (1975) : ~ Tree AdjunctGrammars )~, in Journal of the Computer andSystem Sciences, l0 :l.(Meunier, 1997) Meunier F. (1997),Implantation du formalisme de gdn~rationG-TAG, Th/~se de doctorat, Universit6 de Paris 7(Meunier, 1999) Meunier F. (1999),Mod61isation des ressources linguistiques d'uneapplication industrielle, Actes TALN'99, Carg/~se.
(Meunier and Reyes, 1999) Meunier F., ReyesR.
(1999), Plate-forme de d6veloppement deg6n6rateurs multilingues, Actes GA T'99,Grenoble, France.
(Meunier and Danlos, 1998) Danlos L., MeunierF.
(1998), ~ FLAUBERT : User-friendlymultilingual NLG ~, INLG 1998, Niagara-on-the-Lake, Ontario, Canada.
(Nieolov, 1998) Nicolov N. (1998) :t~ Memoization i  Sentence Generation withLexicalized Grammars ~.
Proceedings of the 4 thInternational Workshop on Tree-AdjoiningGrammars and Related Frameworks (TAG+4),Philadelphia.
(Rags, 1999) The RAGS Project (1999) :~ Toward a reference architecture for naturallanguage generation systems )>.http://www.itri.brighton.ac.uk/projects/rags(Rastier and al., 1994) Rastier F., Cavazza M.,and Abeill6 A.
(1994) : ~ S~mantique pourl'analyse ~), Masson, Paris.
(Sehabes and Sllieher, 1994) Schabes Y., andShieber S. (1994) : ~ An alternative conception ofthe Tree-Adjoining Grammars )~, in Actes 13 rdCOLING-90, Helsinki.238
