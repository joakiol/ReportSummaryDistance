ACHIEVING FLEXIBILITY IN UNIFICATION FORMALISMSLena StrSmb~ick 1Department of Computer and Information Science,Link6ping University, S-58183 Link6ping, SwedenABSTRACTWe argue that flexibility is an important property forunification-based formalisms.
By flexibility we meanthe ability for the user to modify and extend the for-malism according to the needs of his problem.
Thepaper discusses some properties necessary to achievea flexible formalism and presents the FLUF formal-ism as a realization of these ideas.1 MOTIVAT IONUnification based-formalisms are in common usewithin natural language processing and many differ-ent formalisms have been defined.
PATR-II (Shieberet al, 1983) is the most basic and a kind of commondenominator which other formalisms are extensionsof.
Other formalisms are STUF (Beierle et al, 1988),TFS (Emele & Zajac, 1990), CUF (D6rre & Eisele,1991) and, ALE (Carpenter, 1992).
These formalismsinclude, for example, disjunction, various variants ofnegation and typing.
When vaa'ious grammatical the-ories, such as LFG (Kaplan & Bresnan, 1983) orHPSG (Polku'd & Sag, 1987) are included, the rangeof extensions suggested to unification-based gram-mars becomes very wide.
There are also many variantproposals on how the same extension should be usedand interpreted.When using these formalisms for a particular prob-lem, it is oRen the case that the constructions pro-vided do not con'espond to the needs of yourproblem.
It could either be the case that you want anadditional construction or that you need a slight mod-ification of an existing one.
Since the extensions arenmnerous it seems hard to include everything in onesingle formalism.In some formalisms, especially TFS and CUF, theuser is allowed to define new constructions.
This is aninteresting property that I will develop further toachieve flexibility.
In a flexible formalism, the usercan define all the constructions he needs or modifydefinitions provided by the formalism.
With this kindof formalism problems uch as those mentionedabove would not arise.1.
Email address: lestr@ida.liu.seA flexible formalism would be a useful tool fordelining various kinds of knowledge needed at differ-ent levels in a natural language system.
It would be agreat advantage tobe able to use the same system forall levels, but adjusting it to suit the various tructuresthat are needed at each level since the relationsbetween the different levels would be clearer and itwould be easier to share structures between the levels(cf.
Seiffert (1992) for more motiwttion).Another advantage with such a formalism is that itcan be used to define and test extensions and w~riousgrammatical formalisms for the purpose of compari-son.Flexible formalisms allow the user to defne anexpensive xtension and use it for the cases where hereally needs it.
Thus an extension that is consideredtoo expensive to be provided by a general formalism,can be included as it can provide a more efficient rep-resentation of some particular phenomenon.
This isparticularly important since, in natural languageprocessing, it is common that expensive construc-tions are required for few and limited cases.However, if the user is allowed to define expensiveconstructions, an additional goal, predictability, mustbe considered.
By this I mean that inefficient compu-tations hould be necessary only when the construc-tion causing the inefficiency really participates in thecomputation.
This idea was discussed in StrOmb/ick(1992) where I give a predictable algorithm for unifi-cation of feature structures containing disjunction.The goal of predictability is closely related to modu-larity, since if it is possible to make different con-structions independent of each other, it is easier tofind predictable algorithms for them.
Since this paperwill discuss properties of a flexible formalism ratherthan unification algorithms there, will be no furtherdiscussion of predictability.In the following I first discuss the most importantproperties of a flexible formalism.
I then present aflexible formalism, FLUF, by using it to definePATR-I\[.
The size of this paper does not admit a thor-ough description of FLUF and its semantics.
This isgiven in StrOmbfick (l 994a, 1994b).8422 ACHIEVING FLEXIBILITYin this section l state some necessary properties of aflexible formalism.It is essential that the formalism does not provide asingle basic construction i which all other structuresmust be defined, as this often leads to clumsy repre-sentations.
Instead the user defines everything heneeds.
Theretbrc a flexible formalism must providesome way of defining structures and objects.
Thesecan be divided into two groups; those that are used asgeneral elements in the t'ormalism, for example fea-ture structures or the empty set; and those that m'especific for a particular problem, for example theattribute number.In addition to the elements defined in a fonnalismthe user needs other ways of describing his objects,e.g logical operators, uch as conjunction and dis-junction, and functions, such as concatenation flists.
Important to note here is that these constructs donot add further elements to the defined language, theyjust specify additional syntax for describing theobjects.Another equirement tor a flexible formalism is thatthe user nmst define the behaviour of his elements,that is, how they unify with each otheL Similarly,when defining some additional syntax, he nmst spec-ify the meaning of it.
I have chosen to do this by stat-ing constraint relations, which means that resultsfrom term rewriting systems (Middeltorp & Halnoen,1992) and algebraic specification (Ehrig & Mahr,1985) can be applied.
Using constraint relations it canbe specified that two defined objects hould be inter-preted as the same, or that one object should subsumesome other object.The last property I want to mention is the use of aninheritance hierarchy fur the delinitions.
This is agood way of taking advantage of similarities betweendifferent extensions and also a suitable way of defin-ing linguistic knowledge (see, fi)r example, the arti-cles in Computational Linguistics 18(2,3)).By using an inheritance net for defining new con-structions in the formalism several other benefits arcobtained.
One is that if the mathematical properties ofa construction are known, this knowledge can be usedinstead of defining the construction with constraintrelations.
The inheritance net alows us to replace theconstruction defined with constraint relations with apredefined mathematical domain provided that boththe properties of this domain and how objects unifiesare known.The inheritance net alo provides ways to iinprovethe efficiency in in~plementations of the system.Since a defined construction corresponds to a node in~ c e p t  noun;\]Fig.
1: A FLUF definitionthe net (together with inherited information), knownunification algorithms tbr objects corresponding tothis node can be used.
This gives the design of a full-scale implementation asa library of the most com-mon extensions, where the user can choose which hewants and define new ones or change xisting defini-tions only when necessary.3 THE FLUF  FORMALISMIn this section I show how the FLUF formalismworks by defining feature structures as they are usedin PATR-ll.
I have defined conjunction and disjunc-tion and some minimal inguistic knowledge.
Theinheritance hierarchy expressing the definition isshown in Fig.
1.First the objects needed to build feature structuresare defined.
This is done using classes.
The objectsneeded are attributes and values.
These are the twosubclasses of top.
Values are divided into atomic andcomplex values, corresponding to the two classesatom 'and fs'.The two chtsses top and value are used to build upthe hierarchy and contain no object definitions oftheir own, all objects are defined in atom, attributeandf~, l show the definitions of Is' and attributebelow.
The definition of atom is very similar to thedefinition of attribute.chtss Is;isa value;consmtctor empty;constructor add_pair: attribute,value,Is;constraint empty>add pair(A,V, FS);constraint add_pair(A,U,add pair(A,V, FS))=add pair(A,and(U,V),FS);constraint add pair(A,U,add pair(B,V, FS))=add pair(B ,V, add pair(A ,U ,FS)).class attribute;isa top;constructor instances.843A class definition contains the name of the class andthe parent in the hierarchy.
Furthermore, classes cancontain constructor and constraint definitions.
Theconstructor definitions tate what elements the classcontains.
In the definition offs above, the class con-tains one element empty, and one elementadd_pair(A,V, FS) for each possible instantiation ofAas an attribute, V as a value and FS as afs.
In the def-inition of add~pair the symbols after : refer to thetype of the arguments to addpair.
Here it can benoted that FLUF makes use of typed terms.
In theexamples i omit the types when writing terms sincethey are clear from the context.The definition of attribute makes use of a specialconstructor instances.
This constructor means that theelements in the class are defined as objects below it.In the definition offs constraint relations are used.In FLUF '= '  is used to specify that two terms shouldbe interpreted as equal and '<'or  '> '  to specify thesubsumption order between the defined elements.The reason for having both >- and <-relations i thatthe left hand side of a relation is seen as the expres-sion being defined and the right hand side as what itis defined as.In the example above the first constraint tells usthat empty should subsume very constructor startingwith add pair.
2 The second relation states thatfs'scontaining the same attribute more than once shouldhave the same interpretation asthe structure contain-ing the attribute only once with the conjunction of thetwo values as its value.
The third equation says thatthe attribute order in afs is irrelevant.Next conjunction and disjunction are added.
Theydo not add any new elements to our language and aredefined as functions.
For a function the name of thefunction, the type of the result and the number andtype of arguments to the function are specified.
Togive the meaning of function expression constraintsare specified as relations in the same way as forclasses.
The definitions of and and or are givenbelow.function and;result value;arguments value,value;constraint and(X,Y)<X;constraint and(X,Y)<Y.function or;result value;2.
Here there is a slight difference from PATR-II sinceempty does not subsume atoms.
The interpretation used inPATR-II can be obtained by defining empty as a value.arguments value,value;constraint or(X,Y)>X;constraint or(X,Y)>Y.By these definitions both functions give a value asresult and take two values as their arguments.
Theconstraint definition of and tells us that and is sub-sumed by its arguments, while or subsumes its argu-ments.Next, some linguistic knowledge is defined.
Firstthe attributes and atoms used by the application aregiven.
This can be done using objects.
An object isspecified by just giving a name and a parent in theinheritance hierarchy.
What is special here is thatobject definitions are only allowed if there is anancestor in the hierarchy which has a constructorspecified as instances.
As an example I give the def-inition of cat.object cat;isa attribute.When defining linguistic knowledge, concept defini-tions are used to group it into conceptual parts.
In aconcept definition the name of the concept and itsparent in the inheritance hierarchy are specified.
It isalso possible to specify a requirement as a typedterm.
The meaning of such a requirement specifica-tion is that all objects that are of this concept mustcontain at least the information given by the require~ment.
Two concept definitions from the example arewordcat and verb.
Their definitions are given below.concept wordcat;isa atom.concept verb;isa fs;requires add pair(cat,v,empty).With this definition of PATR~II grammar rules can berepresented asfeature structures.
The terms in FLUFallows assigning variables to subterms which gives asimple representation f coreferences in PATRdl.A declarative and operational the semantics ofFLUF is given in S tr0mbgck (1994b).
The declarativesemantics i an initial algebra semantics where theelements given by a definition are interpreted on apartial order.
The operational semantics amounts togiving a unification algorithm which in many ways issimilar to narrowing (see, for example, Middeltorp &Hamoen (1992)).
The FLUF formalism is sound, butnot fully complete.4 FURTHER EXAMPLESIn this section I give two further examples that dem-onstrate the flexibility of FLUF.
The first example844~ cl0sed~ ~ ' / / / / / / ~ .
add pair~a,v,closcd)Fig.
2: The subsumption order forclosed feature structuresshows how fixed arity feature structures (used in, forexample, STUF (Beierle et al, 1988)) can be defined.class fs;isa value;constructor empty;constructor closed;constructor add pair:attribute,value,fs;constraint empty>closed;constraint empty>add_pair(A,V, FS);constraint add_pair(A,U,add_pair(A,V, FS))=add_pair(A,and(U,V),FS);constraint add_pair(A,U,add pair(B,V, FS))=add pair(B ,V, add pair(A,U ,FS)).Compared to the definition offi' given previously, anew constructor closed is added.
The idea here is thata feature structure nded with closed has a fixed arityand can not be extended with new attributes.
Thegiven constraint relations would give us the sub-sumption order shown in Fig.
2.
The most generalstructure is at the top.
The shadowed areas representfeature structures not explicitly written in the figure.The next example shows how different interpreta-tions of sets can be detined in FLUE First I give adefinition of sets corresponding tothat used in HPSG(Pollard & Moshier, 1990).class set;isa ...;constructor empty;constructor Md elem(wdue,set);constraint add_elem(V, add elem(V,S))=add_elem(V,S);constraint add elem(Vl,add elem(V2,S))=add elem(V2,add_elem(V 1 ,S)).Here the two constructors for sets empty andadd elem are detined.
The two constraint relations inthe definition say that each element only occurs oncein a set and that the element order in a set is irrele-vant.
With this definition the unifications below hold.To increase readability I have used the common nota-tion for sets.
{X,Y}U{a}={a}{X,Y}U{a,b}={a,b}In the first example the first constraint rule, identify-ing X and Y, is used.For some linguistic phenomena it would be moreuseful to have an interpretation f sets where unifica-tion works like union.
In FLUF this can be obtainedby the definition below.class set;isa ...;constructor empty;constructor add elem(value,set);constraint empty>add elem(V,S);constraint add Mem(V 1 ,add elem(V2,S))=add elem(V2,add_elem(V 1 ,S)).The difference between this detinition aM the previ-ous one is that empty subsume all other sets.
An ele-ment is also allowed to occur more than once in a set.With this second efinition the first unification abovehas three possible results.\[{a,Y}{X,Y}U{a}= t {X,a}\[{x,Y,a}In the first result a is identified with X, in the secondwith Y, and in the third with neither of them.
Pres-ently FLUF gives all these three results as alterna-tives of the unilication.The reason why a set can be extended with new ele..ments in the second definition but not in the first isthat the semantics of FLUF assumes that if twoexpressions are not ordered by some constraint rela-tion they are incomparable.
Thus in the first definitionsets are only related if all their elements are.
FLUFassumes that all delined constructions are monotonic,so by the constraint relation given for empty in thesecond definition it can be concluded, for example,that (a}>{a,b }.Other examples of what can be defined in FLUF arelists', trees and strings.
It is also easy to define func-tions such as concatenation f lists in FLUF.5 DISCUSSIONThis paper discusses how a flexible unification for~realism that can be used to obtain tailored unifiers forspecific problems can be designed.
I identify someimportant properties of a formalism that can be usedto obtain flexibility.
These are that the user nmst beallowed to define the elements he needs and functionson them.
He must also have some way of defining thebehaviour of his elements and functions.
I observethat there are several advantages with using an inher-itance hierarchy for detining the formalism and lin-guistic knowledge.845I present the FLUF formalism as a concretization fthese ideas of a flexible formalism.
As for the expres-siveness of FLUF, it is still limited.
There is a needfor extending the hierarchy to allow for multipleinheritance and non-monotonicity.
Str6mb~ick(1994a) provides more discussion on the expressive-ness of FLUEThere is very little discussion about unificationalgorithms in this paper.
There is, however, apilotimplementation f the FLUF formalism.
The imple-mentation handles everything described above, but isvery inefficient since it is based directly on opera-tional semantics.
There are, however, severalimprovements that can be made, for example apply-ing existing results for more efficient narrowing(Hanus (1993) gives an overview) and integratingexisting unification algorithms for some commonlyused structures such as feature structures.
The idea ofintegrating existing algorithms ensures us a more pre-dictable behaviour for FLUKEAnother possibility is to use ideas from constraintlogic programming (Jaffar & Lassez, 1987).
This isparticularly important in applications where this sys-tem is combined with some other process, for exam-ple, a parser.ACKNOWLEDGEMENTSThis work has been supported by the SwedishResearch Council for Engineering Sciences.
I am alsograteful to Lars Ahrenberg for guidance on this work.REFERENCESBeierle, C, U Pletat, and H Uszkoreit (1988).
An Al-gebraic Characterization f STUF.
LILOG ReportIBM Deutschland, P.O.
Box 800880, 7000 Stuttgart80, West Germany.Carpenter, B, (1992).
The Logic of Typed FeatureStructures with Applications to Unification Gram-mars, Logic Programs and Constraint Resolution.Cambridge Tracts in Theoretical Computer Science32, Cambridge University Press.Computational Linguistics 18(2-3).
Special Issue onInheritance inNatural Language.
June and September1992.D6rre, J, and A Eisele (1991).
A Comprehensive Uni-fication-Based Grammar Formalism.
DYANA Re-port.
Deliverable R3,1B.
January 1991.Ehrig, H and B Mabr (1985).
Fundamentals ofAlge-braic Specifications 1.
Equations and Initial Seman-tics.
Springer-Verlag, Berlin, Heidelberg.Emele, M C, and R Zajac (1990).
Typed UnificationGrammars.
Proc.
13th International Conference onComputational Linguistics, Helsinki, Finland, Vol 3,pp 293-298.Hanus, M, (1993).
The Integration of Functions intoLogic Programming: From Theory to Practice.
Man-uscript, Max-Planck-Institut fiir informatik, Saar-brticken.Jaffar, J, and J L Lassez (1987).
Constraint LogicProgramming.
In Proceedings of the 14th ACM sym-posium of Principles of Programming Languages.Munchen, Germany.
pp 111-119.Kaplan, R. and J. Bresnan (1983).
A Formal Systemfor Grammatical Representation, I : J Bresnan Ed.,The Mental Representation f Grammatical Rela-tions, MIT Press, Cambridge Massachusets.Middeltorp, A, and E Hamoen (1992).
Couuterexam-ples to Completeness Results for Basic Nan'owing.In: H. Kirchner and G. Levi Ed., Proceedings of the3rd international conference on Algebraic and LogicProgramming, Volterra, Italy.
pp.
244-258, LNC 632,Springer-Verlag,Pollard, C and Ivan A S (1987).
Information BasedSyntax and Semantics.
Vol 1.
CSLI Lecture notes,CSLI Stanford.Pollard, C J, and M D Moshier(1990).
Unifying Par-tial Descriptions of Sets.
Manuscript.Seiffert, R (1992).
How coukt a good system forpractical NLP look like?
Paper presented at the work-shop on Coping with Linguistic Ambiguity in 7}q~edFeature Formalism at the European Conference onArtifieial Intelligence.
Vienna, Austria.Shieber, S M, H Uszkoreit, F C N Pereira, J Robin-son, and M Tyson (1983).
The Formalisms and Im-plementation f PATR-II.
In: Barbara Grosz andMark Stickel, Ed., Research on Interactive Acquisi-tion and Use of Knowledge.
SRI Final Report 1984,SRI International, Menlo Park, California.Str6mbdck, L (1992).
Unifying Disjunctive FeatureStructures.
Proc.
14th International Conference onComputational Linguistics, Nantes, France, Vol 4, pp1167-1171.Str6mbfick, L (1994a).
FLUF: A Flexible UnificationFormalism - the idea.
Technical Report.
LITH-IDA-R-94~12.Str6mb/ick, L (1994b).
FLUF: A Flexible UnificationFormalism - Syntax and Semantics.
Technical Re~port.
LITH-IDA-R-94-13.846
