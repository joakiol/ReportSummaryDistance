An alternative LR algorithm for TAGsMark- Jan  NederhofDFKIStuhlsatzenhausweg 3D-66123 Saarbr/icken, GermanyE-marl: nederhof@dfki.deAbst rac tWe present a new LR algorithm for tree-adjoining grammars.
It is an alternative to anexisting algorithm that is shown to be incorrect.Furthermore, the new algorithm is much sim-pler, being very close to traditional LR parsingfor context-free grammars.
The construction ofderived trees and the computation of featuresalso become straightforward.1 In t roduct ionThe efficiency of LR(k) parsing techniques(Sippu and Soisalon-Soininen, 1990) appearsto be very attractive from the perspective ofnatural language processing.
This has stim-ulated the computational linguistics commu-nity to develop extensions of these techniquesto general context-free grammar parsing.
Thebest-known example is generalized LR parsing(Tomita, 1986).A first attempt o adapt LR parsing to tree-adjoining rammars (TAGs) was made by Scha-bes and Vijay-Shanker (1990).
The descriptionwas very complicated however, and not surpris-ingly, no implementation f the algorithm seemsto have been made up to now.
Apart from pre-sentational difficulties, the algorithm as it waspublished is also incorrect.
Brief indications ofthe nature of the incorrectness have been givenbefore by Kinyon (1997).
There seems to be nostraightforward way to correct the algorithm.We therefore developed an alternative tothe algorithm from Schabes and Vijay-Shanker(1990).
This alternative is novel in presenta-tional aspects, and is fundamentally different inthat it incorporates reductions of subtrees.The new algorithm has the benefit hat manytheoretically and practically useful propertiescarry over from the context-free case.
For ex-ample, by making a straightforward translationfrom TAGs to linear indexed grammars, onemay identify computations of the parser withrightmost derivations in reverse.
Also the ex-tensions needed for construction of parse trees(or "derived trees" as they are often called forTAGs) and the computation of features are al-most identical to the corresponding extensionsfor context-free LR parsing.Section 2 discusses our notation.
The algo-r ithm for constructing the LR table is given inSection 3, and the automaton that operates onthese tables is given in Section 4.
Section 5first explains why the algorithm from Schabesand Vijay-Shanker (1990) is incorrect, and thenprovides an example of how our new algorithmworks.
Some extensions are discussed in Sec-tion 6, and the implementation in Section 7.2 Notat ionFor a good introduction to TAGs, the readeris referred to Joshi (1987).
In this section wemerely summarize our notation.A tree-adjoining grammar is a 4-tuple(Z, NT, I, A), where ~ is a finite set of termi-nals, I is a finite set of initial trees and A isa finite set of auxiliary trees.
We refer to thetrees in I U A as elementary trees.
The set NT,a finite set of nonterminals, does not play anyrole in this paper.Each auxiliary tree has a distinguished leaf,call the foot.
We refer to the foot of an aux-iliary tree t as Ft. We refer to the root of anelementary tree t as Rt.
The set of all nodesof an elementary tree t is denoted by At(t), andwe define the set of all nodes in the grammar byAt = U, ruAAt(t).For each non-leaf node N we definechildren(N) as the list of children nodes.
Forother nodes, the function children is undefined.The dominance relation <J* is the reflexive and946transitive closure of the parent relation <~ de-fined by N <~ M if and only if children(N) =aMf~, for some ~, f~ E A/'*.Each leaf N in an elementary tree, exceptwhen it is a foot, is labelled by either a termi-nal from Z or the empty string e. We identifysuch a node N labelled by a terminal with thatterminal.
Thus, we consider 2: to be a subsetof Af, IFor now, we will disallow labels to be e, sincethis causes a slight technical problem.
We willreturn to this issue in Section 6,For each node N that is not a leaf or thatis a foot, we define Adjunct(N) as the set ofauxiliary trees that can be adjoined at N. Thisset may contain the element nil to indicate thatadjunction at that node is not obligatory.An example of a TAG is given in Figure 1.There are two initial trees, a l  and a2, and oneauxiliary tree fL For each node N, Adjunct(N)has been indicated to the right of that node,unless Adjunct(N) = {nil}, in which case thatinformation is omitted from the picture.3 Const ruct ion  o f  the  LR  tab leFor technical reasons, we assume an additionalnode for each elementary tree t, which we de-note by T. This node has only one child, viz.the actual root node Rt.
We also assume anadditional node for each auxiliary tree t, whichwe denote by _L.
This is the unique child of theactual foot node Ft.
The domain of the func-tion children is extended to include foot nodes,by defining children(Ft) = _L, for each t E A.For the algorithm, two kinds of tree need tobe distinguished: elementary trees and subtreesof elementary trees.
A subtree can be identifiedby a pair (t, N),  where t is an elementary treeand N is a node in that tree; the pair indicatesthe subtree of t rooted at N. The set of all treesneeded by our algorithm is given by:T = IUAU{( t ,N)  I tE IUA,  NEAf ( t )}From here on, we will use the symbol t exclu-sively to range over I U A, and r to range overT in general.1With this convention, we can no longer distinguishbetween different leaves in the grammar with the sameterminal abel.
This merging of leaves with identical a-bels is not an inherent part of our algorithm, but it sim-plifies the notation considerably.For each ~ E T, we may consider a part of thetree consisting of a node N in ~- and the list of itschildren nodes 7.
Analogously to the notationfor context-free parsing, we separate the list ofchildren nodes into two lists, separated by a dot,and write N --~ a ?
f~, where a/~ = 7, to indicatethat the children nodes in a have already beenmatched against a part of the input string, andthose in fl have as yet not been processed.The set of such objects for an elementary treet is given by:Pt = {(T~.
f l )  I afl=Rt}U{(N --~ a ?
f~) I N E Af(t), children(N) = aft}For subtrees (t, M)  we define:P(t,M) ={(N ~ (~ ?
t~) I M <F N, children(N) = a/3}Such objects are attached to the trees ~ E T towhich they pertain, to form the set of items:Items ={\[T,g--~ a ?
fl\] I r e T , (Y -+ (~ .
fl) E P~ }A completed item is an item that indicates acompletely recognized elementary tree or sub-tree.
Formally, items are completed if theyare of the form \[t,T ~ Rt ?\] or of the form\ [ ( t ,N) ,N  -+ a ?\].The main concept needed for the constructionof the LR table is that of LR states.
Theseare particular elements from 2 Items to be definedshortly.First, we introduce the function closure from2 Items to 2 Items and the functions goto and goto?from 2 Items x J~f to 2 Items.
For any q C_ Items,closure(q) is the smallest set such that:1. q C closure(q);2.
\ [r ,N --~ o~ ?
M/~\] E closure(q), nil EAdjunct(M) and children(M) = 7 implies\[% M -+ ?
7\] E closure(q);3.
\ [r ,N -+ (~ ?
ME\] E closure(q) andt E Adjunct(M) implies \[t,T -~ ?
Rt\] Eclosure(q);4.
\[~-,Ft --~ ?
_L\] E closure(q), t E Adjunct(N),N E Af(t ~) and children(N) = 7 implies\[(t ~, N), N -~ ?
7\] E closure(q); and5.
k , i  7 .\] e closure(q) and k ,N  aM ?8\] E Items implies \[T,N -+ aM ?
fl\] Eclosure (q).The clauses 1 thru 4 are reminiscent of the clo-947(al)b(a2)U(Z)d eFigure 1: A tree-adjoining grammar.d N2 T eb'Figure 2: An incorrect"parse tree" (Section 5).sure function for traditional LR parsing.
Notethat in clause 4 we set out to recognize a sub-tree (t ' ,N) of elementary tree tq Clause 5 isunconventional: we traverse the tree ~- upwardswhen the dot indicates that all children nodesof M have been recognized.Next we define the function goto, for anyq C Items, and any M E ~7 or M EAf  suchthat Adjunct(M) includes at least one auxiliarytree.goto(q,M) = {\[T,N --+ aM ,, ~\] \[\[T,N --~ a ?
Mfl\] E closure(q)}The function goto?
is similar in that it shiftsthe dot over a node, in this case the imaginarynode J_ which is the unique child of an actualfoot node Ft.
However, it only does this if t is atree which can be adjoined at the node that isgiven as the second argument.goto?
(q,M) = {\[7, Ft --~ _1_ .\] I\[T, Ft "-+ ?
.k\] E closure(q) A t E Adjunct(M)}The initial LR state is the setqin -- { \ [ t ,T -+ ,,Rt\] \] t e I}We construct he set Q of all LR states as thesmallest collection of sets satisfying the condi-tions:1. qin E 0,;2. q E Q, M E A/" and q' = goto(q,M) ~ @imply q~ E Q; and3.
q E Q, M E A/" and q' = goto?
(q,M) ~ 0imply q' E Q.An LR state is final if its closure includes acompleted item corresponding to an initial tree:Q1~n = {q E Q Iclosure(q) n {\[t, T R, -\] I t e Z) # ?0}Final LR states indicate recognition of the in-put.
Other completed items give rise to a re-duction, a type of stack manipulation by theLR automaton to be defined in the next sec-tion.
As defined below, reductions are uniquelyidentified by either auxiliary trees t or by nodesN obtained from the corresponding completeditems.reductions (q) ={t e A \[ \[t, T --+ Rt .\] E closure(q)} U{N E.hf \[ \ [ ( t ,N) ,N  --+ a .\] E closure(q)}For each node N in a tree, we consider theset CS(N) of strings that represent horizontalcross-sections through the subtree rooted at N.If we do not want to include the cross-sectionthrough N itself, we write CS(N) +.
A cross-section can also be seen as the yield of the sub-tree after removal of a certain number of its sub-trees.For convenience, each node of an auxiliarytree (or subtree thereof) that dominates a footnode is paired with a stack of nodes.
The intu-ition behind such a stack of nodes \ [N1, .
.
.
,  Arm\]is that it indicates a path, the so called spine,through the derived tree in the direction of thefoot nodes, where each Ni, with 1 <_ i < m,is a node at which adjunction has taken place.Such stacks correspond to the stacks of linearindexed grammars.The set of all stacks of nodes is denoted byA/'*.
The empty stack is denoted by \[\], andstacks consisting of head H and tail T are de-noted by \[HIT \].
We define:M = u ( x2(* )and we simultaneously define the functions CSand CS + from Af to 2 "~" as the least functions948satisfying:?
CS(N) + C_ CS(N), for each N;?
(N, L) ?
CS(N), for each N such that N <~*l ,  and each L ?
Af*;?
N ?
CS(N), for each N such that -~(N<~*l);and?
for each N, children(N) = MI" "Mm andxl ?
CS(M1),.. .
,xrn ?
CS(Mm) impliesz l ' "Xm ?
CS+(N).4 The  recogn izerRelying on the functions defined in the previoussection, we now explore the steps of the LR au-tomaton, which as usual reads input from leftto right and manipulates a stack.We can divide the stack elements into twoclasses.
One class contains the LR states fromQ, the other contains elements of A4.
A stackconsists of an alternation of elements from thesetwo classes.
More precisely, each stack is anelement from the following set of strings, givenby a regular expression:S = qi,(.MQ)*Note that the bottom element of the stack isalways qin.
We will use the symbol A to rangeover stacks and substrings of stacks, and thesymbol X to range over elements from A4.A configuration (A, w) of the automaton con-sists of a stack A ?
$ and a remaining input w.The steps of the automaton are given by the bi-nary relation t- on pairs of configurations.
Thereare three kinds of step:shift (Aq, aw) b ( Aqaq', w), provided q' =goto(q, a) ?
0.reduce  subt ree  (AqoXlqlX2q2... Xmqm, w) ~-(Aq0 (-k, \[Y\[n\])q', w), provided g ?reductions(qm), X1.
.
.
Xm ?
CS+(N) and q' =goto?
(qo, N) ~ 0, where L is determined by thefollowing.
If for somej  (1 < j <_ m) Xj is ofthe form (M, L) then this provides the value ofL, otherwise we set L = \[\].~reduce  aux t ree ( AqoXlqlX2q2 .
.
.
Xrnqm, W)F- (AqoXq~, w), provided t ?
reductions(qm),X1.
.
.
Xm ?
CS(Rt) and q' = goto(qo, N) ~ O,where we obtain node N from the (unique) Xj(1 _< j _< m) which is of the form (M, \[NIL\]),2Exactly in the case that N dominates a footnote will(exactly) one of the Xj be of the form (M, L), some M.and set X = N if L -- \[\] and X = (N,L)otherwise)The shift step is identical to that for context-free LR parsing.
There are two reduce stepsthat must be distinguished.
The first takesplace when a subtree of an elementary treet has been recognized.
We then remove thestack symbols corresponding to a cross-sectionthrough that subtree, together with the associ-ated LR states.
We replace these by 2 othersymbols, the first of which corresponds to thefoot of an auxiliary tree, and the second is theassociated LR state.
In the case that some nodeM of the cross-section dominates the foot of t,then we must copy the associated list L to thefirst of the new stack elements, after pushing Nonto that list to reflect hat the spine has grownone segment upwards.The second type of reduction deals withrecognition of an auxiliary tree.
Here, the headof the list \[NIL\], which indicates the node atwhich the auxiliary tree t has been adjoinedaccording to previous bottom-up calculations,must match a node that occurs directly abovethe root node of the auxiliary tree; this ischecked by the test q' = goto(qo, N) ~ 0.Input v is recognized if (qin,v) ~-* (qinAq,?
)for some A and q E Q/~,.
Then A will be of theform XlqlX2q2"'" qm-lXm, where X1 .." Xm ECS(Rt), for some t e I.Up to now, it has been tacitly assumed thatthe recognizer has some mechanism to its dis-posal to find the strings XI""Xm E CS(Rt)and XI""  Xm E CS+(N) in the stack.
We willnow explain how this is done.For each N, we construct a deterministic fi-nite automaton that recognizes the strings fromCS+(N) from right to left.
There is only onefinal state, which has no outgoing transitions.This is related to the fact that CS+(N) is suffix-closed.
A consequence is that, given any stackthat may occur and any N, there is at most onestring XI ' "  Xm E CS+(N) that can be foundfrom the top of the stack downwards, and thisstring is found in linear time.
For each t E IUAwe also construct a deterministic finite automa-ton for CS(Rt).
The procedure for t E I is givenin Figure 3, and an example of its applicationis given in Figure 4.
The procedure for t E A is3Exactly in the case that N dominates a footnote willL?\[\] .949let K=0,7"={~;let.s = fresh_state, f = fresh_state;make_fa(f , Rt, s).procedure  make_fa(ql, M, q0):let 7" = 7"U {(qo, M, ql)};if children(M) is definedt hen make_fa_list (ql, children (M), q0)endproc.p rocedure  make_fa_list ( ql , Ms ,  q0):i f~=~then make_fa(ql, M, qo)else let q = fresh_state;make_fa_list(q, a q0); make_fa(ql, M, q)endproc.p rocedure  fresh_state 0:create some fresh object q;let K=Kt J{q};  re turnqendproc.Figure 3: Producing a finite automaton(K, N, T, s, {f}) that recognizes CS(Rt), givensome t E I. K is the set of states, N acts asalphabet here, 7" is the set of transitions, s isthe initial state and f is the (only) final state.similar except hat it also has to introduce tran-sitions labelled with pairs (N, L), where N dom-inates a foot and L is a stack in Af*; it is obviousthat we should not actually construct differenttransitions for different L E .hf*, but rather onesingle transition (N, _), with the placeholder "_"representing all possible L EAf*.The procedure for CS+(N) can easily be ex-pressed in terms of those for CS(Rt).5 Extended exampleFor the TAG presented in Figure 1, the algo-rithm from Schabes and Vijay-Shanker (1990)does not work correctly.
The language de-scribed by the grammar contains exactly thestrings abc, a'b'c ~, adbec, and a'db'ecq The al-gorithm from Schabes and Vijay-Shanker (1990)however also accepts adb'ec' and a~dbec.
In theformer string, it acts as if it were recognizingthe (ill-formed) tree in Figure 2: it correctlymatches the part to the "south" of the adjunc-tion to the part to the "north-east".
Then, afterreading c', the information that would indicate/Figure 4: Example of the construction forCS(R1), where R1 is the root node of ~1 (Fig-ure 1).whether a or a' was read is retrieved from thestack, but this information is merely poppedwithout investigation.
Thereby, the algorithmfails to perform the necessary matching of theelementary tree with regard to the part to the"north-west" of the adjunction.Our new algorithm recognizes exactly thestrings in the language.
For the running ex-ample, the set of LR states and some opera-tions on them are shown in Figure 5.
Arrowslabelled with nodes N represent the goto func-tion and those labelled with ?
(N) represent thegoto?
function.
The initial state is 0.
The thinlines separate the items resulting from the gotoand goto?
functions from those induced by theclosure function.
(This corresponds with thedistinction between kernel and nonkernel itemsas known from context-free LR parsing.
)That correct input is recognized is illustratedby the following:Stack Input Step0 adbec shift aO a 1 dbec shift dO a l d 5 bec shift bO a l d 5 b 7 ec reduce N10a ld5  (?,\[N1\]) 9 ec shifte0a l  d5 (?,IN1\]) 9e l0  c reduce/30a lN13 c shift cO a 1N1 3c6  acceptNote that as soon as all the terminals in the aux-iliary tree have been read, the "south" section ofthe initial tree is matched to the "north-west"section through the goto function.
Throughsubsequent shifts this is then matched to the"north-east" section.This is in contrast o the situation when in-correct input, such as adb~ec ~,is provided to the95021\[~2, N2 ~ " b'\]1\[/3,T ~ Aft\]12 ~ b'~o~2, N2 --> b' -\] \]\[_\[~2, R2 ~ a'N2 ?
c'\]~i~2 -* ~'N2 ?
c'\]13 b'1 \[o~2, R2 -+ a'N2c' ,1 I \[c~2, T ~ R2 *\]\]\[(o~2,N2),N2 ~ b',0\[at, T --+ * RI\]\[a2, T --+ * R21\[ozl, RI -~ * aNlc\]\[o~2, R2 -~ * a'N2c\[/3, Rfl --~ d * Fe\]\[/3, F --+ *_1.\]\[(cq, N1), NI "-+ ?
b\]\[(a2, N2), N2 -+ * b'\]\[/3, F ~ _L .\]\[/3, R f  --+ dF ?
e\]1o I e\[/3, Rf -+ dFe .\]\[/3, T ~ Rf  .\]1I \[OZI,R 1 ~ a * N1 C\]\[OZl, N1 "-)" * b\]\[/3, T -~ ?
R~\]/ \[/3, R f  -~ * dFe\].
/  .
\[b~b,\]R1 "-~ aNt ?
c\]\[olt, RI --+ aNt * c\] \]||6 ~c c\[al, R1 -~ aNlc *\]\[O(1, T --).
R 1 .\]Figure 5: The set of LR states.automaton:Stack00a l0a ld5Oald5b '80a ld5  (?, \ [~\ ] )  90a  ld5  (?, \ [~\ ] )  9e l0Input Stepadb' ec I shift adbl ec I shift dbl ec I shift b tec I reduce N2ec' shift eC tHere, the computation is stuck.
In particular, areduction with auxiliary tree/3 fails due to thefact that goto(1, N2) --- 0.6 Extens ionsThe recognizer can be turned into a parserby attaching information to the stack elementsfrom .~4.
At reductions, such information isgathered and combined, and the resulting datais attached to the new element from Iv\[ thatis pushed onto the stack.
This can be usedfor computation of derived trees or derivationtrees, and for computation of features.
Sincethis technique is almost identical to that for thecontext-free case, it suffices to refer to existingliterature, e.g.
Aho et al (1986, Section 5.3).We have treated a classical type of TAG,which has adjunction as the only operation forcomposing trees.
Many modern types of TAGalso allow tree substitution ext to adjunc-tion.
Our algorithm can be straightforwardlyextended to handle tree substitution.
The mainchanges that are required lie in the closurefunction, which needs an extra case (much likethe corresponding operation in context-free LRparsing), in adding a third type of goto func-tion, and in adding a fourth step, consisting ofreduction of initial trees, which is almost iden-tical to the reduction of auxiliary trees.
Themain difference is that all Xj are elements fromAf; the X that is pushed can be a substitutionnode or a nonterminal (see also Section 7).Up to now we have assumed that the gram-mar does not assign the empty string as labelto any of the leaves of the elementary trees.The problem introduced by allowing the emptystring is that it does not leave any trace onthe stack, and therefore CS(Rt) and CS+(N)are no longer suffix-closed.
We have solved thisby extending items with a third component E,which is a set of nodes labelled with ?
that havebeen traversed by the closure function.
Uponencountering a completed item IT, N --+ ~ *, E\],a reduction is performed according to the setsCS(Rt, E) or CS+(N, E), which are subsets ofCS(Rt) and CS+(N), respectively, containingonly those cross-sections in which the nodes la-951belled with E are exactly those in E. An au-tomaton for such a set is deterministic and hasone final state, without outgoing transitions.7 Imp lementat ionWe have implemented the parser generator,with the extensions from the previous section.We have assumed that each set Adjunct(N), ifit is not {nil}, depends only on the nonterminallabel of N. This allows more compact storageof the entries goto?
(q,M): for a fixed state qand nonterminal B, several such entries whereM has B as label can be collapsed into a singleentry goto~(q,B).
The goto function for treesubstitution is represented similarly.We have constructed the LR table for the En-glish grammar developed by the XTAG projectat the University of Pennsylvania.
This gram-mar contains 286 initial trees and 316 auxiliarytrees, which together have 5950 nodes.
Thereare 9 nonterminals that allow adjunct?on, and10 that allow substitution.
There are 21 sym-bols that function as terminals.Our findings are that for a grammar of thissize, the size of the LR table is prohibitivelylarge.
The table represented as a collection ofunit clauses in Prolog takes over 46 MB for stor-age.
The majority of this is needed to representthe three goto functions, which together requireover 2.5 million entries, almost 99% of which isconsumed by goto, and the remainder by gotoxand the goto function for tree substitution.
Thereduction functions require almost 80 thousandentries.
There are 5610 LR states.
The size ofthe automata for recognizing the sets CS(Rt, E)and CS + (N, E) is negligible: together they con-tain just over 15 thousand transitions.The time requirements for generation of thetable were acceptable: approximately 25 min-utes were needed on a standard main frame withmoderate load.Another obstacle to practical use is the equiv-alent of hidden left recurs?on known from tradi-tional LR parsing (Nederhof and Sarbo, 1996),which we have shown to be present in thegrammar for English.
This phenomenon pre-cludes realization of nondeterminism by meansof backtracking.
Tabular realization was inves-tigated by Nederhof (1998) and will be the sub-ject of further research.AcknowledgmentsAnoop Sarkar provided generous help with mak-ing the XTAG available for testing purposes.Parts of this research were carried out withinthe framework of the Priority Programme Lan-guage and Speech Technology (TST), whilethe author was employed at the University ofGroningen.
The TST-Programme is sponsoredby NWO (Dutch Organization for Scientific Re-search).
This work was further funded by theGerman Federal Ministry of Education, Science,Research and Technology (BMBF) in the frame-work of the VERBMOBIL Project under Grant 01IV 701 V0.Re ferencesA.V.
Aho, R.
Seth?, and J.D.
Ullman.
1986.Compilers: Principles, Techniques, andTools.
Addison-Wesley.A.K.
Josh?.
1987.
An introduction to tree ad-joining grammars.
In A. Manaster-Ramer,editor, Mathematics o/ Language, pages 87-114.
John Benjamins Publishing Company.A.
Kinyon.
1997.
Un algorithme d'analyseLR(0) pour les grammaires d'arbres adjointslexicalis@es.
In D. Genthial, editor, Qua-tri~me confdrence annuelle sur Le TraitementAutomatique du Langage Naturel, Acres,pages 93-102, Grenoble, June.M.-J.
Nederhof and J.J. Sarbo.
1996.
In-creasing the applicability of LR parsing.
InH.
Bunt and M. Tomita, editors, RecentAdvances in Parsing Technology, chapter 3,pages 35-57.
Kluwer Academic Publishers.M.-J.
Nederhof.
1998.
Linear indexed automataand tabulation of TAG parsing.
In Actes despremikres journdes ur la Tabulation en Ana-lyse Syntaxique t Ddduction (Tabulation inParsing and Deduction), pages 1-9, Paris,France, April.Y.
Schabes and K. Vijay-Shanker.
1990.
Deter-ministic left to right parsing of tree adjoin-ing languages.
In 28th Annual Meeting of theA CL, pages 276-283.S.
Sippu and E. Soisalon-Soininen.
1990.Parsing Theory, Vol.
II: LR(k) and LL(k)Parsing, volume 20 of EATCS Monographson Theoretical Computer Science.
Springer-Verlag.M.
Tomita.
1986.
E\]ficient Parsing for NaturalLanguage.
Kluwer Academic Publishers.952
