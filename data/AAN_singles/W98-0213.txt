Mult imodal  Visual izat ion of Geometr ical  Construct ionsVal~r ie  Be l lynckLaboratoire LE IBNIZ-  Inst i tut  IMAG46, avenue FElix Viallet38031 Grenoble Cedex-  FranceAbst rac t  2 Cabr i I IWe present an environment for multimodal vi-sualization of geometrical constructions, includ-ing both graphical and textual realizations.
Thegraphic interface is programmed by direct ma-nipulation, and this process is mirrored in thetext.
The text resembles a program writtenin a classical programming language, but nocomputer science knowledge is required.
Theguiding principle is that of textual and graph-ical equivalence: the same linguistic resourcesare used for graphical construction and for textgeneration.
During construction, the namesof several tools appear in pop-up menus.
Asthe tools are used, their names are written inthe text, and geometrical objects are simulta-neously drawn in the figure and written in thetext.
Text can be produced in a variety of " di-alects" according to the user's mother tongue.Moreover, the visualization system can be usedfor interfaces which include a facility for pro-gramming by demonstration (with macro defi-nitions) and can offer textual support for inter-action through other media.1 In t roduct ionIn this paper, we present an environment formultimodal (graphical and textual) visualiza-tion of geometrical constructions.
We firstpresent CabriII, the program on which this workis based.
In the second section, we elaborateon the definition of macro-constructions usingthis software.
Some of the reasons for introduc-ing such a textual view in a geometry programare explained in section three.
The next sectionfocuses on the choices that have guided de:vel-opment.
The last section discusses results andperspectives.CabriII (or Cabri-g~om~tre II) is a directmanipulation program for interactive "explo-ration" of geometrical diagrams (Laborde, 85).Many mathematics teachers and mathemati-cians use it for teaching or for their own work.It is the result of a tight collaboration be-tween mathematicians, software researchers, ed-ucators, and teachers in everyday contact withpupils.Using this software, the user is immersedin an intelligent microworld.
CabriII is anexcellent learning environment for geometry(Laborde, 89), (Laborde, 95).
Users constructgeometrical diagrams and create new tools withmacro-constructions.
A teacher can profile theenvironment for specific learning tasks by em-bedding macro-constructions i  his or her owntools.
Through interactive manipulation of geo-metrical constructions, a pupil may for instanceobserve invariant properties and recognize themas constraints.
All objects (for example, geo-metric objects and interface lements) are ma-nipulated irectly.r ; : i  :,fii:~iiii~7,, ::i~il, -iiii:ii:-:~: 6~i~ili,,ri;i ::-~iii~: i: , ::7:-,'::i::!
.
.
.
.
: " ' "A Perpendicul.
*ire ~ cetle df 'o i te  ~.i I ~ I ~  " ~~I i ' .~i i i m l i  m .
.
.
.
.
.
r .
.
.
.
.
l l . '
l ' "  .
.
.
.
.
.
i i"  " "Figure 1: diagram for a symetric onstruction91Figure 1 shows a geometrical diagram draw-ing in CabriII.
The diagram represents a pointA, a line D and some other geometrical objectsused to construct the symmetrical point (calledB) of point A with respect o the line.3 What  is a macro?CabriII can store as "macros" constructionmethods which users try out.
This term is com-monly used in the domain of programming bydemonstration.The aim of writing a macro is to define anew tool by using a list of repeatedly invokedconstructions (Sugiura, 96).
For instance, it ispossible to define a macro to construct the sym-metric point of a given point with respect o aline.As a matter of fact, CabriII does not store thewhole construction, but only its "useful" part,determined automatically when the user indi-cates the "initial" and "final" objects of the con-struction.
This method lets the user decide toconstruct a macro after embarking on a complexconstruction, rather than before.
It also mini-mizes the length of the macro (which is stronglyrelated to the number of objects retained).
Aconsequence of this freedom is that a macro defi-nition has to pass a validation test which can failfor various reasons, such as omission of neces-sary initial objects, dependency loops (in whichan initial object depends on a final object), etc.Figure 2 shows the dependencies between ge-ometrical objects in the definition of a construc-tion method for drawing the symmetric point ofa given point.
The method chosen is the sameas in figure 1.
The object names are written inorder of their creation, from left to right.
Thenames written in single quotes are the namesdisplayed in the diagram, and arrows are usedto represent object dependencies.
The selectedinitial object names are surrounded by thin rect-angles, and the selected final objects by thickerones.
The macro creation process extracts thesmallest graph that connects the final objectsto the initial ones.Figure 2: Geometrical object dependenciesNotice that the macro obtained may not cor-respond exactly to the user's expectations ifs/he has made mistakes in certain constructionchoices.
In that case, the user must debug themacro.
Using the text form is far better for thatpurpose than redoing the whole construction.4 Why is a textua l  v iew used  ingeometry?In mathematics, graphical visualization is a fun-damental support for reasoning (Zimmermann,91).
The appearance of dynamic geometryopens new doors by making the concept of di-agraming more accessible: simply drawing, bycontrast, is more static and discrete.However, in purely graphical interfaces, thechoices which guide the construction of variousdiagram objects can only be tracked down byobserving their effect, i.e.
by observing the rel-ative behavior of the objects throughout dia-gram deformations.
There is no longer directaccess to the causes, only to the consequences.The information displayed is not a complete his-tory including the creation, deformations anddeletion of all objects, but rather only a recordof the construction steps (dependencies) of thestored objects.
One way to display all of theconstraints for the whole diagram would be todisplay the program which drew the diagram.Similarly, we can observe that macro defini-tion is closely related to classical programming,so that a textual medium becomes an absolutemust.
We can also add to the software thefull range of classical programming environmenttools, such as a step-by-step replay tool asso-ciated with cursor progression, or a tool aidingvisualization of the correspondence b tween ob-ject value and graphic rendering.
Specific toolsassociated with the relevant domain (dynamicgeometry) are also useful.
For instance, the useof color allows visualization of dependencies be-tween objects, and aids debugging if the macrovalidation fails.5 Const ra in ts ,  cho ices ,  and  shapeGiven the target audience for this software,the programming langage chosen is as close aspossible to the graphic interface.
The displayis based on the concept of textual and visualequivalence (Lecolinet, 96) - although in thiscase "graphical" might be a better term than92"visual".5.1 Text  generat ion,  object ubiqui tyUbiquity is the ability to be in several placesat the same time.
In the case of a multimodalinterface in a geometry program, ubiquity canbe applied to geometrical objects such as points,straight lines, circles, conics, and so on as shownbelow: to construct a new geometrical object,the user selects a tool, then goes to the diagramand specifies the objects to which that tool isto be applied.
Only objects whose types are ap-propriate for the current tool can be selected.CabriII produces demonstration strings whichhelp the user to choose which objects to selectand to understand how they will be used bythe current tool.
Alongside the construction,tools names are displayed in the textual area,and strings are simultaneously displayed in thetextual area and under the cursor in the graph-ical area, along with the names which identifyobjects.5.2 Moves in construct ion sequencesThe user can revise a di.agram construction byclicking on recorder buttons.
The geometri-cal objects appear in their drawing order withrespect to the object dependency constraints(or disappear according to the selected recorderbuttons).
The corresponding text for that movein the sequence of effective objects is producedin two colors: flat black for the drawn objectsand light blue for the object to be drawn.
Athird color (red) is used to display current pro-gram elements: when the user moves throughthe macro's internal objects, the programminglangage commands are displayed in red.5.3 Value modif icat ionA "program" is a formal description of the ac-tive constructions.
Actual values of objects andgraphical attributes (color, thickness, and soon) may be displayed in help bubbles associ-ated with the object names.
Clicking on a namecauses every textual occurrence of the relevantobject to be highlighted in green.
With a dou-ble click, all textual occurrences of the objectswhich depend on the selected object are alsodisplayed in green, and a help bubble appears.6 Resu l ts  P resentat ionFigures 3 and 4 show a diagram and its tex-tual view respectively in English (i.e.
when thelanguage chosen by the user is English) and inGerman.
In this diagram, the macro "Sym" iscalled on point E with respect to line D andconstructs point F._ _ _ _ mFigu~rePomtLine (B, v P1)PointSvmC : : ,  ~ ' )?
Perpondioul~r Line (:.
: i : ,  Perp~diou~ar to "D')?
~terse?,ion Poor(s) ( '~ ' ,  D2)?
C~r?le (Using this centre point P2, : ' )> Intersection Poiat(s) (O2~ C1, ~.
!i*~ : .
i :  "~)Fin de la  f igure  ~5Macro  : ~rnInitial Object?FFin~l Object?> Perpond~Jlar Line iBM ?PI ,  Perpendioular to o91)?
Intersection Pc.int(s) (cOt, ~D2)?
C~r?io (Us~g this centre point ~P2, ~nd this radius point ePI ) '?
Intersection Point(s) (~D2, ~C1, other ~han ?P1)Fio de la  macro : $9m- ?
p_~P I-> P...~!
.
:i..i- ?
p.~.t ..~2- ?
~ D2- ?
p_~ P2- ?
~ CIpoint OPt, Hne ?OI,point eP3,-> line ~O2-> point =p2-> point ~p3Figure 3: Macro calling in English.F~,,-tGet ado C~?~ dUe.sen I~miid P I )Purkt~m ("E',  "~)?
;~,nla"e~.~te  ~m ~ "E' ,  .~,kr  ~ ~1~ :~ %' )> S~-,nit*pur~t(e) ( '>",  02)?
Kreis (D~ i ls Htttellxx~t P2, und ?Heser als Krets~pur, k't "E")?
Schntt~puNdL(e) D2, C I ,  d~eser 4fKiere Pwdkt "E')Pin 4e la f'kjare~ro : 5~mStartd~4de >ZielobjektO?
,Senlo-eohte (D~,rdh dle~n Pmkt ~'PI,SeNored~t ?u e4)1)?
s,:*v~tr~u,.~t~e)('?,!, ?o2)?
KPeL~ CPk~e,r als Plffte~v.iekt ~P2, u~4 ~ a~s Krt~b~,unkt ~J::l)) Scchntttpunkt(e) ~D2, I t1 ,  dieser andere Punkt ?P1)Fin de la macro : ~jrn\[\]-~ ~"-aae "~"I -~ P'unM 'T" - ; "~ D2- ?
Ptmkt P2-> Kreis C1\[\]Pudd raP1 ?
~eradW "01 BBPunkt ~P~, BB-1" Punkt sP3?
I~ l lFigure 4: Macro calling in German.The best way to edit macro constructions is93not yet clear.
We are investigating whether edit-ing would be most helpful in the diagram pro-gram or directly in the macro program.The equivalence of the material presentedtextually and visually enables every user to pro-gram comfortably.
The user does not have totype a single character, yet appropriate text isgenerated in the current dialog language of theinterface.
The text verifies relevant lexical andsyntactic rules.
Since the syntax and semanticsof the programming language are made obvious,the user learns them easily.7 ConclusionWe have presented an environment for the dis-play of geometrical data which emphasizes co-ordinated textual and graphical presentation ofequivalent material and the ubiquity of micro-world objects.
The textual view is an importantaid to the construction of macros.
The environ-ment can facilitate xploration of macro debug-ging techniques and has relevance for studiesof translation from readable diagram programsto natural anguage instructions.
It is also de-signed for use in support of other interactivemedia.Re ferencesLaborde Jean-Marie (1985), "Projet de cahierde brouillon informatique pour la g~omfitrie',Archives LSD2-IMAG.Laborde Jean-Marie (1989), "Intelligent Mi-croworlds and Learning Environments", inIntelligent Learning Environments: The Caseof Geometry, edited by J-M. Laborde, NATOSerie F: Computer and Systems Sciences,(1995) vol.
117, pp.
113-132.Laborde Jean-Marie (1995), "Des connaissancesabstraites aux rfialitfis artificielles, le con-cept de micromonde Cabri", EnvironnementsInteractifs d'Apprentissage avec Ordinateur(tome 2), Eyrolles Paris, pp.
29-41.Eric Lecolinet (1996), "XXL: A Dual Approachfor Building User Interfaces", UIST'96, pp.99-108, Seattle, November 6-8, 1996.Atsushi Sugiura, Yoshiyuki Koseki (1996),"Simplifying Macro Definition in Program-ming by Demonstration", UIST'96, pp.
173-182, Seattle, november 6-8, 1996.Walter Zimmermann, Steve Cunningham(1991) "Editor Introduction: What isMathematical Visualization?
", pp.
1-7,Visualization in Teaching and LearningMathematics, ed.
W. Zimmermann, S.Cunningham, 1991.94
