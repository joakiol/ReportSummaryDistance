QPATR and Constraint ThreadingJames KllburySeminar ffir Allgemelne SprachwissenschaftUnlverslt~t Diisseldorf, Unlversltiitsstr.
1D-4000 Diisseldorf 1, Fed.
Rep. of Germanye-maih KIIbury@DDORUD81.BITNETAbstractQPATR is an MS-DOS Arity/PROLOG implemen-tation of the PATR-II formalism for unification grammar.The fbnnalism has been extended to include the constraintsof LFG as well as negation and disjunction, which areimplemented with the disjunction and negation-as-failure ofPROLOG itself.
A technique of constraint threading isemployed to collect negative and constraining conditions inPROLOG difference lists.
The parser of QPATR uses aleft-corner algorithm for context-free grammars andincludes a facility for identifying new lexical items ininput on the basis of contextual information.I IntroductionQPATR ("Quick PATR") is an MS -DOSArity/PROLOG implementation of the PATR-II formalism(of Shieber et al 1983, Shieber 1986) with certain logicalextensions.
The name was chosen to reflect the fact thatthe prototype system was developed in a short period oftime but nevertheless runs quickly enough for practicaluse.
QPATR was developed at the University ofDt~sseldorf within the research project "Simulation ofLexical Acquisition", which is funded by the DeutscheForsehtmgsgemeinschaft.In contrast o most existing PATR implementationssuch as D-PATR (cf Karttunan 1986a, 1986b), QPATRruns under MS-DOS and thus makes minimal hardwaredemands.
Like ProP (of Carpenter 1989) QPATR isimplemented in PROLOG but uses both the negation anddisjunction of PROLOG in the extended PATR formalism;moreover, it employs a left-comer parser with a "linking"relation and PROI/3G baclctracking rather than a purebottom-up chart parser.The system comprises the following components: (1)grammar compiler, (2) unification, (3) left-comer parser,(4) lexieal look-up, (5) input/output, (6) testing off-lineinput, and (7) tracing.
The grammar compiler (1)transforms syntax rules and lexical entries from theirexternal notation to an internal form; at the same timepartial feature structure matrices (FSMs) are constructedand the linking relation (see below) is constructed.
Theunification package (2) uses techniques introduced byEisele and D5rre (1986) and described by Gazdar andMellish (1989) to implement the unification of FSMs withthe term unification of PROLOG.
A facility of predictionis included in the input/output package that allows newlexicai items in input to be identified on the basis ofcontextual information.
While QPATR uses a full-fomalexicon at present, a package for morphological nalysis isbeing developed.Since QPATR is distributed in a compiled version,knowledge of PROLOG is only needed in order to writemacros (see below) but not to write grammars or to rttrlthe system.
Thus, QPATR can also be used in instructionwith students who have no background in PROLOGprogramming.2 Descriptions of FSMsThe formalism of PATR-H has been adopted forQPATR and will not be inuoduced here.
As presented byShieber (1986: 21) rules consist of a context-flee skeletonintroducing variables for FSMs and a conjunction of pathequations that describe the FSMs, e.g.
:Xo --> Xt X2~o cat> = S<X, cat> =np<X~ cat> = vp<Xo head> = <X, head><Xo head subject> = <X, head>where cat, head, and subject are attributes.
Such pathequations are written with "*=" in QPATR, which isimplemented with the nonaal ("destructive") PROLOGunification.
Furthermore, QPATR provides for pseudo-constraints written with "*==" in the path equations, whichcapture the expressiveness of constraining schemata inLFG (of Kaplan/Bresnan 1982: 213) and allow thegrammar writer to specify that some attribute must ,ugtreceive a value unifiable with the indicated value.
Theseare implemented with the "==" unification of PROLOG.FSMs are described in QPATR with a logicgenerally based on that developed by Kasper and Rounds(1986).
The presentation of the logical description languagehere is parallel to that of Carpenter (1989).Atomic well-formed formulas (wffs) of this logicconsist of the two types of equations just introduced aswell as macro heads (see below); heads of macros definedin terms of constraints are prefixed with the operator "@"in atomic wffs.
Equations contain two designators, whichare atoms or FSM variables, implemented with PROLOGatoms and variables, respectively, or else paflm.
The latterare defined recursively and may contain atoms or paths asattribute expressions.
The evaluation of emtwxlded pathsmust yield an atom.All derived wffs of the logic are built from atomicdescriptions with conjunction ",", disjunction ";", andnegation "not"; parentheses may be simplified in thecustomary manner.
Disjunction and negation are notdirectly reflected in the FSMs generated in QPATR.Disjunctions are implemented with PROLOG backtracking,wtfile negations are treated like pseudo-constraints, whichare executed as tests after the complete FSM of an inputphrase has been constructed by the parser.
The "negation"employed here is thus the negation-as.failure of PROLOG.FSMs themselves are represented internally as aPROLOG list of feature-value pairs with a variable382remainder list (ef Eisele/D0rre 1986: 551; Oazdar/MeUish1989: 228).
Since FSMs are described rather than directlyrepresented in the grammar and lexicon, these internalPROLOG representations normally are neither constructednor seen by the user.The syntax of the logical description language isdefined here in Backus-Naur form:well-formed formula<wff> :::= <awff> I'(' <wff> ',' <wff> 5 '1'(' <wff> ';' <wff> ')' I'(' 'not' <wff> ')'conjunctiondisjunctionnegationatomic wff<awff> ::-'= <deser> I<cdescr> I<macro-head> I see below'(' '@' <macro-head> ')' constraining macroFSM description<descr> :::= '(' <desig> '*=' <desig> ')'constraining FSM description<cdescra ::= '(' <desig> '*==' <desig> ')'designator<desig> ::= <atom> I <fsm-variable> I <path>path<path> ::= <fsm-variable> '/' <attr-exprs>attribute expressions<a~-exprs> ::= <attr-expr> I <attr-expr> '/' <attr-exprs>attribute expression<attr-expr> ::= <atom> I '{' <path> '}'3 Maer~Macros (or templates; cf Shieber 1986: 51) may beemployed in QPATR to reduced redundancy in syntaxrules and lexical entries and thereby to capturegeneralizations.
In the present version of QPATR macrosare defined as conjunctions of other macros and FSMdescriptions with "*=" and "*=="; they may not containdisjunctions or negations.
Furthermore, macros may not bedefined reeursively as this would lead to nonterminatingloops.Since macros are ultimately defined in terms of FSMdescriptions with "*=" and "*==", which themselves areimplemented as executable PROLOG goals, macros arerepresented in the present QPATR version simply asPROLOG inference rules with a head consisting of themacro name as its predicate and the variables for FSMsreferred to as its arguments.
This is the only part of thesystem that requires elementary PROLOG programming inorder to write grammars in the formalism.A special representation language for the definitionof macros is being developed and will be included in newversions of QPATR.4 Rules and Lexlcal EntriesSyntax rules are indexed with an hlteger which isused by the linking relation constructed during compilationof the grammar into its intea:nal form (see below).
Themtmbering of rules is arbitrary and need not beconsecutive or ordered.Category descriptions are macro heads.
In principle,a single dummy macro name cat can be used for allcategories so that all information about the FSMscontained in a rule is put in the description wff of theright-hand side; however, the linking relation would thenlose its value for the parser.
In order to modularirz thegrammatical description, the wffs of rules and entries maybe defined exclusively in terms of macros.The syntax of rules and lexical entries is defined asfollows:l i l le<rule> ::= <integer> '#' <cat> '--->' <rhs> '.
'right-hand side<rhs> ::= <cats> I <cats> '::' <wff>categories<eats> ::= <eat> I <cat> ',' <cats>category<cat> ::= <macro-head>lexical entryentry ::= <atom> 'lex' <khs> '.
'lexieal right-hand side<lrhs> ::= <cat> I <cat> '::' <wff>Orthographic word forms are represented asPROLOG atoms.5 Constraint ThreadingBy convention, the wffs of rules and lexical entriesare written in conjunctive normal form as a list of atomicwffs, disjunctions, and negations.
When a rule or entry iscompiled the list representing its wff is sorted into lists ofatomic wffs (except constraints), disjunctions, andconstraints (including negations) whose members areexecuted as PROLOG goals before, during, and afterparsing, respectively.
The execution of the atomic wffswithout constraints builds partial FSMs which contribute tothe information encoded in the linking relation (see below).In their compiled form rules and entries thus containpartial FSMs associated with lists of disjunctions andnegations that apply to them.Disjunctions are executed uring parsing and makeuse of the normal backtracking mechanism of PROI.
?K\]while constraints and negations are executed after parsingto test whether a FSM in fact fulf'dls all conditions of theoriginal wff.
During parsing the constraints and negationscontributing to the complete description of the FSMassociated with the input must be collected.
In order toaccomplish this a technique of constraint threading isintroduced based on the difference lists used by Pereira383and Shieber (1987) for gap threading.
The PROLOG termassociated with a syntactic constituent contains differencelists of constraints associated with the constituent beforeand after it has been parsed.
The first difference list for anentire input phrase is the empty list, whi!e the second isinstantiated with the complete list of constraints andnegations after parsing is completed.A complication arises from the fact that constraintsand negations may be embedded in disjunctions and thattheir execution must be deferred.
This can be dealt withby "percolating" such embedded constraints up into ritedifference lists for constraint threading when thedisjunction is solved.
The following program implementsthe execution of disjunctions during parsing:% solve disjunctions(% <disjunctions>,<constrah~ts0>,<constralnts>)solve_disjunctions(\[\], C, C).solve disjunctions(\[DIDs\], C0 C) :-dsolve(D, C0, C1),solve_disjunctions(Ds, C1, C).dsolve((Wff ; Wffs), CO, C):-l, (dsolve(Wff, C0,C) ; dsolve(Wffs,C0,C)).dsolve(fWff , Wffs), C0, C) :-I, dsolve(Wff, C0,C1), dsolve(Wffs,C1,C).dsolve((not Wff), C, \[(not Wff)lC\]) :- I.dsolve((@ Wff), C, \[WfflC\]) :- I.dsolve(Wff, C, C) :- call(Wff).6 The Parser of QPATRThe parser is based on a left-comer algorithm withbacktracking for context-free grammars (cf Kilbury 1988and Pereira/Shieber 1987: 179fO.
The efficiency of theparser is improved with top-down filtering in the feral of alinking relation (cf Pereira/Shieber 1987: 182).
Thisordinarily is a transitive binary relation over categoriesrepresented as PROliX\] atoms or terms with atomiccategory labels as functors.
The PATR formalism requiresa modified technique since the syntax rules contain FSMs,whose unification is more costly than that of atomiccategory lables.
QPATR therefore uses numbered syntaxrules and then defines the filter with a binary relation overthe rule indices.
If the grammar contains ome rulesi # F~ ---> Fit .
.
.
.
.
F~j # Fie ---> F~ .
.
.
.
.
F~,where the subscripted F's are FSMs, then we havedlink(ij) iff F~z subsumes F~0, i.e.
if F~ is an immediateleft corner of F/0.
Then link(ij) is the reflexive andtransitive closure of dlink(ij).7 Lexlcal PredictionQPATR includes a facility of prediction wherebyFSMs are proposed for new lexical items encountered ininput but not contained in the lexicon.
Predictions aremade on tim basis of contextual infomaation coUoetedduring the analysis of input.
A ftmdamental distinction ismade between open and closed lexical categories, and ddsinl'ormation must be represented with definitions ofcon'esponding nmcros in the grammar.
These definitionsmay refer to semantic as well as syntactic categorialinformation.
A prediction is blocked if the proposed FSMdoes not match an open lexical class or if it is describedby an entry already in the lexicon, but FSMs may beconstructed tbr new lexieal items having homonyms in thelexicon.
The definition of open is not used actively topropose an FSM but rather passively to test riteadmissibility of an FSM already constructed from thecontext.ReferencesCarpenter.
Bob (1989) Prop Documentation.
ComputationalLinguistics Program, Carnegie Mellon University.Eisele, Andreas / Dtrre, Jochen (1986) A l.~xiealFunctional Grammar System in PROLOG, Proceedings ofCOLING-86, 551-3.Gazdar, Gerald / Mellish, Chris (1989) Natural LanguageProcessing in PROLOG.
Wokingham, England et al:Addison-Wesley.Kaplan, Ronald M. / Bresnan, Joan (1982) Lexieal-Functional Grammar: A System for GrammaticalRepresentation, in The Mental Representation ofGrammatical Relations (Joan Bresnan, ed.).
Cambridge,Mass.
/ London: MIT Press.Karttunen, Lauri (1986a) D-PATR: A DevelopmentEnvironment for Unification-Based Grammars, Proceedingsof COLING-86, 74-80.Karttunen, Lauri (1986b) D-PATR: A DevelopmentEnvironment for Unification-Based Grammars (& CSLIReport No.
86-61).
Stanford, CaliL: CSLI.Kasper, Robert T. / Round, William C. (1986) A LogicalSemantics for Feature Structures, Praceedingsof the 24thAnnual Conference of the ACL, 235-242.Kilbury, James (1988) Parsing with Category CooceurrenceRestrictions, Proceedings of COLING.88, 324-327.Pereira, Femando C. N. / Shieber, Smart M. (1987) Prologand Natural-Language Analysis (= CSLI Lecture Notes,10).
Stanford, Calif.: University of Chicago Press.Shieber, Smart M. (1986) An Introduction to Unification-Based Approaches to Grammar (= CSLI Lecture Notes, 4).Stanford, Calif.: University of Chicago Press.Shieber.
Smart M. et al (1983) The Structure andImplementation of PATR-II, Research on InteractiveAcquisition and Use of Knowledge, 39-93.
Menlo Park,Calif.
: SRI International384
