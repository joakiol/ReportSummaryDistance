USING NATURAL LANGUAGE DESCRIPTIONS TO IMPROVE THE USABILITY OF DATABASESCarole D. HafnerJohn D. JoyceComputer Science DepartmentGeneral Motors Research LaboratoriesWarren, MI ~8090ABSTRACTThis paper describes the REGIS extended co~ndlanguage, a relational data fan&c/age thatallows users to name and describe databaseobjects using natural language phrases.
REGISaccepts multlple-word phrases as the names oftables and columns (unlike most systems, whichrestrict these names to a few characters).
Anextended command parser uses a network-structured dictionary to recognize multl-wordnames, even if some of the words are missing orout of order, and to prompt the user if anambiguous name is entered.
REGIS also providesfacilities for attaching descriptive text todatabase objects, which can be displayed on-line or included in printed reports.
Initialdata from a few databases indicate that userschoose to take advantage of the naturalness ofmultl-word descriptions when this option isavailable.I INTRODUCTIONThe REGIS extended command language is arelational data language that allows users toname and describe database objects using na-tural language phrases.
REGIS \[4\] is an inter-active data management system that has been inuse at General Motors since 1975.
The systemis designed to be easy for non-progrs~nmers tounderstand, and it has given many people theirfirst hands-on experience with computers.A REGIS database consists of a hierarchicalstructure of named objects: one or more files,each containing zero or more tables, each com-posed of zero or more columns of data.
REGISusers can create, query, or modify databaseobjects interactively, using simple keyword-based relational conLmands, such as thefollowing:BLUES = SUBSET TABLE1 WHERE COLOR = BLUE(creates a new table from selected rowsof an existing one)RESULTS = PROJECTION BLUES TYPE ITEM COST(creates a new table from specifiedcolumns of an existing one)LIST RESULTS(lists a table at the terminal)Future research directions for REGIS are aimedat developing natural language capabilitiesthat will make computer databases easier tounderstand and access.The usability of database query languageshas been recognized as an important problem(Codd \[i\], Greenblatt and Wax~nan \[2\], Welty andStemple \[5\]); however, a closely related issuethat has not been addressed is the usability ofthe data itself.
In order to interact with adatabase effectively, users must be able tounderstand and refer to the objects in thedatabase.
Current database systems restrictthe names of database objects to a few char-acters, which can lead to cryptic abbreviationsthat are difficult to understand and remember.Documentation facilities (if they exist at all)are not designed to be accessed interactively.The need to refer to external sources for des-criptive information, and the need to remembercryptic abbreviations, are obstacles to usabi-lity that are especially disruptive to the newor occasional user of a database.To provide a more supportive environment fordata management, a new commana interface hasbeen added to REGIS, which accepts multiple-word phrases as the names of tables andcolumns, and which also provides on-linedocumentation capabilities.
Multiple-worenames can be up to 40 characters long, insteadof the previous REGIS limit of 8 characters.
"Comment" data consisting of descriptive textcan be attached to files, tables, or columns.Users can display the co~ents  for parLs of thedatabase: e.g., for all the tables in a file,for a particular table, for a table and all zfits columns, or for a particular column.
Taoienames, column names, and comments can Decreated, queriea, and changed interactively.II A FLEXIBLE PROCEDURE FOR NAME RECOGNITIONA straightforward implementation of multi-word names for database objects woulc not bepractical, since it would significantly in-crease the amount of typing required duringcontmand input.
Commands would become muchlonger, leading to slow and tedious inter-action, and increasing the number of typingerrors.
To solve this problem, a flexiblerecognition procedure is used in REGIS, whichrecognizes multi-word names even if some of the132Data from Original Version of REGISDESIRE SIXMONTH TZMEKEEP MAKESERS SZPURCH PLNTOVST5 15 128 18 53 17 59 13 5Data from Extended Version of REGISPROBABILITY HOW LONG MAKE AND SIZE OF PLAN VISITOF BUYING DO YOU SERIES YOU CAR YOU TO DEALERDESIRE A WITHIN SIX KEEP A NEW PLAN TO PLAN TO IN NEXTCAR?
MONTHS CAR?
PURCHASE PURCHASE TWO WEEKS?5 5 15 1283 3 17 5918 513 5Figure i.
Comparison of Slr~le-word and Multi-Word Column Names.words are missing or out of order.
Users areable to refer to database objects by speclfylr~any part of the name: for example, if the nameof an object is "RESULTS OF FIRST TEST", theuser can enter "FIRST TEST", "TEST RESULTS","FIRST RESULTS", or just "RESULTS", and theobject will be located.
If an ambiguous nameis entered, the user is prompted with a list ofchoices and asked to select one.Figure 1 shows part of a REGIS table, for anapplication that was converted from the origi-nal version of REGIS to the extended commandversion.
Each column in the table represents aquestion that was asked in a survey of consumerattitudes.
The table illustrates both thedifficulty of finding descriptive abbreviationsfor data in some applications, and the impor-tance of the flexible recognition procedure tothe success of the system (users would be un-likely to use long, descriptive names if theywere not able to refer to them more brieflywhen typing commands).Flexible recognition of names provides auser-friendly environment for data management,where a user is not required to know the exactnames of database objects.
If a REGIS userenters the command "LIST SURVEY" and there areseveral surveys in the database, the systemwill display the following:"SURVEY" IS AMBIGUOUS.
PLEASE SELECT ONEALTERNATIVE:i - MARCH 1979 CONSUMER SURVEY2 - SURVEY OF i00 CHEVROLET OWNERS3 - JANUARY 1981 CONSUMER SURVEY!I- CANCEL THIS COMMANDThe user may have forgotten the exact name ofthe table he or she wanted to use, or may nothave realized that there were several surveysin the database.
If the llst of table namesdoes not provide enough1 information to selectthe correct one, the user can cancel thecommand and examlne the database further bydisplaying "Comment" data.
(See Section IV fora dlsoussion of the comment feature.
)III PARSING COMMANDS WITH MULTI-WORD NAMESThe implementation of flexible namerecosnltlon in REGIS has required significantextension Of both the relational databaseschema and the command parser.
The schema hasbeen extended to include a network-structuredapplication dictionary, containing all of thewords that occur in the user's table and columnnames.
Each word has "TABLE" links connectingit tO the tables it describes, and "COLUMN"links connecting it to the columns it descri-bes.
A name recognition algorithm (describedin Hafner \[3\]) traverses these links to deter-mine what object the user is referring to.When an ambiguous reference is entered, thealgorithm returns a list of potential choicesto be displayed.There are two areas in which the REGIS com-mand parser uses computational linguistic tech-niques to help it behave more intelligently: insegmenting command strings into distinct para-meters; and in restricting the choices for anambiguous reference.
Both of these capaoili-ties depend on the use of a command languagegrammar, which tells the parser what kind ofobject it is look ing for at each point in the133LIST 1979 CONSUMER SURVEY, PERSONAL ECONOMY TODAY, COMMENTCOLUMN: PERSONAL ECONOMY TODAYWHAT IS YOUR PERSONAL ECONOMIC SITUATION TODAY,COMPARED WITH WHAT IT WAS ONE YEAR AGO?i MUCH BETTER OFF2 SOMEWHAT BETTER OFF3 ABOUT THE S~24ESOMEWHAT WORSE OFF5 MUCH WORSE OFF6 DO NOT KNOWFigure 2.
LAsting of Comment Data.parsing process: a table name, a column name, acommand name, a keyword parameter from a fixedset, or a numeric parameter.
The command lan-guage grammar is also used to generate moreexplicit error feedback than was possible inthe previous version of REGIS.Knowledge of both the command languagesyntax and the extended database schema isrequired to determine how the input should besegmented.
In ordinary database query lan-guages, segmenting a command string into para-meters is not a problem; each word or "token"represents one object.
Using multi-word names,however, the system cannot use blanks as deli-miters.
(Requiring other delimiters, such ascommas or semi-colons, was rejected as beingtoo inconvenient for users.)
When the commandparser is looking for a table or column name,it invokes the name recognition algorithm; whenthe parser is looking for a REGIS keyword orother value, it reverts to the token processingmode.In selecting choices for an ambiguousreference, REGIS uses knowledge about both thesyntax and the semantics of the commandlanguage: in many REGIS commands, a table nameappears in one place in the command, and columnnames from that table appear in otherpositions.
When this occurs, the co .and  parserknows that the column names should only becompared with other columns in the given table;it will not find ambiguities with columns fromother tables.IV CREATING AND DISPLAYING COMMENT DATAThe comment feature of REGIS allowsdescriptive.text to be incorporated into adatabase and displayed on request.
Commentsare created and attached to a database objectby entering the command that is normally usedto create the object, followed by the keywordCOF~NT,  followed by an unrestricted amount oftext.
The commands shown below would cause thetext following the keyword COMMENT to Deattached to a file, a table, and a column,respectively:DEFINE FILE1 COMMENT .
.
.
.TABLE CHEVY OWNERS CO~MENT .
.
.COLUMN CHEVY OWNERS, DATE OF LASTPURCHASE, COMMENT ?
?
?To display the comments for a databaseobject, the LIST command is used.
The commands:LIST FILESLIST CHEVY OWNERS COM~ENTLIST CHEVY OWNERS, LAST PURCHASEDATE, COMMENTwould display the comments created by theprevious com~k~nds.
(File comments are listedby default.)
Figure 2 shows the comment forone column of the survey database described AnSection II.
The comment tells exactly whatquestion was asked of the respondents, andshows how their answers were encoded in thedatabase.V USE OF THE SYSTEMBoth the original version of REGIS and theextended co~nd version are in production useat General Motors.
Initial data from a fewdatabases indicate that users choose to takeadvantage of the naturalness of multi-worddescriptions when this option is available.
Ina sample of applications running on theoriginal version of REGIS, we found that only35% of the column names were English words, ascompared with 935 for the extended version.The average number of words per column name inthe extended version was 2.4.
(This result mayi)4be biased in favor of English words, since theusers of the new version were aware that theywere part of an experiment.
)In/ormal contact with users indicates thatthe ability to incorporate descriptive commentsi n to  a database is a useful feature which con-tributes to the overall task of informationmanagement.
Several users of the originalversion of REGIS have decided to change over tothe new version in order to take advantage ofthe on-llne doc,--entatlon capability.We expected that the potential for ambiguousreferences would cause some difficulties (andperhaps objections) on the part of users; how-ever, these difficulties have not occurred.Referring to a database object by a subset ofthe words in its name is a concept that usersunderstand and are able to manipulate (some-times rather inEeniously) to create applica-tions that are responsive to their needs.VI CONCLUSIONSThe REGIS extended command language Incor-porates natural lansuage descriptions into auser's database in a flexible and easy-to-usemanner.
The recognltlon of partly-specifiednames and the ability to recover from ambiguityare features that are not found in other datamanagement systems.REGIS does not have the power of  a natura llanguage understanding system; syntactic var-iants of object names will only be reco~izedif they contain the same words as the originalname, and syntactic variants of commands arenot supported at all.
However, on the positiveside, REGIS does not require a linguist ordatabase administrator to explicitly create anapplication dictionary; the dictionary iscreated automatically by the system, and isupdated dynamically when users add, delete, orrename objects.The REGIS extended command language requiredapproximately two work-years of effort to deve-lop, much of it devoted to integrating theextended capabilities into the REGIS productionenvironment.
The project's goal, to deliver alimited capability for English language des-cription directly into the hands of users, hasbeen accomplished.
Future studies of the use ofthis facility in the production environmentwill provide feedback on the linguistic habitsand priorities of database users.VII ACKNOWLEDGEMENTSThe REGIS extended command language wasoriginally proposed by William S. Mark, and hecontributed substantially to the design of thesystem.VIII REFERENCES1.
Codd, E. F .
,  "Seven Steps to Rendezvouswi th  the Casual User ."
Research Report RJ1333, IBM Thomas J .
Watson Research Center,Yorktown Heights, NY (1971).2.
Greenblatt, D. and Waxman, J., "A Study ofThree Database Query Languages."
InDatabases: Improving Usability and Res77-97.
Edited by B. Schnelderman.
AcademicPress, N?
(1978).3.
Hafner, C., "Incorporating EnglishDescriptions into a Relational Database.
"Information Systems, Vol.
7 No.
2.
(1982).4.
Joyce, J. D. and Oliver, N. N., "REGIS - ARelational Information System with Graphicsand Statistics."
In Prooeedln~s of theNational Computer Conference, pp.
839-8,~.AFIPS Press (1976).5.
Welty, C. and Stemple, D. W., "A HumanFactors Comparison of a Procedural and aNonprocedural Query Language."
Res@archReport TR 78-2U, Computer and InformationSciences Deparment, University ofMassachusetts, Amherst MA (1978).135
