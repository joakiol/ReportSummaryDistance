A TOOL FOR THE AUTOMATIC  CREAT ION,  EXTENSION AND UPDATINGOF LEXICAL KNOWI .F .nGE BA.~F-gWalter M.P.
DaelemansAI-LABVrije Universiteit BrusselsPleiniaan 2 Building KB-1050 BrusselsBelgiumE-mail: walterd@arti, vub.uucpABSTRACTA tool is described which helps in the creation,extension and updating of lexical knowledge bases(LKBs).
Two levels of representation are distinguished: astatic storage level and a dynamic knowledge level.
Thelatter is an object-oriented environment containing linguis-tic and lexicographic knowledge.
At the knowledge level,constructors and filters can be defined.
Constructors areobjects which extend the LKB both horizontally (newinformation) and vertically (new entries) using the linguis-tic knowledge.
Filters are objects which derive new LKBsfrom existing ones thereby optionally changing the storagestructure.
The latter use lexicographic knowledge.INTRODUCTIONDespite efforts in the development of tools for thecollection, sorting and editing of lexical information (seeKipfer, 1985 for an overview), the compilation of lexicalknowledge bases (LKBs, lexical databases, machine read-able dictionaries) is still an expensive and time-intensivedrudgery.
In the worst case, a LKB has to be built upfrom scratch, and even if one is available, it often doesnot come up to the requirements of a particular applica-tion.
In this paper we propose an architecture for a toolwhich helps both in the construction (extension and updat-ing) of LKBs and in creating new LKBs on the basis ofexisting ones.
Our work falls in with recent insights aboutthe organisation of LKBs.The main idea is to distinguish two representationlevels: a static storage /eve/ and a dynamic knowledgelevel At the storage level, lexicai entries are representedsimply as records (with fields for spelling, phonetic tran-scription, lexical representation, syntactic category, caseframes, frequency counts, definitions etc.)
stored in textfiles for easy portability.
The knowledge level is anobject-oriented environment, representing linguistic andlexicographic knowledge in a number of objects withattached information and procedures, organised in general-isation hierarchies.
Records at the storage level are lexi-cal objects in a 'frozen' state.
When accessed from theknowledge level, these records 'come to life' as structuredobjects at some position in one or more generalisationhierarchies (record fields ate interpreted as slot fillers).This way, a number of procedures becomes accessible(through inheritance) to these lexical objects.For the creation and updating of d ict io~es,  coll~-stmctors ate defined: objects at the knowledge level whichcompute new lexicai objects (corresponding to newrecords at the storage level) and new information ~n~hedto already existing lexical objects (corresponding to newfields of existing records).
To achieve this, constructorobjects mai?
use of information already existing in theLKB and of the linguistic kaowledge r~re~nted at theknowledge level.
Few constructors can be developedwhich arc complete, i.e.
which can operate fully automati-cally without checking of the output by the user.
Them-fore, a central part in our system is a cooperative userinterface, whose task it is to reduce initiative from theuser to a minimum.Filters are another category of objects.
They use anexisting LKB to create automatically a new one.
Duringthis transformation, specified fields and entries arc k~,and others are omitted.
The storage strategy used may bechanged as well.
E.g.
an indexed-sequential fi e ofphoneme representations could be derived from a diction-ary containing this as well as oliver information, andstored in another way (e.g.
as a sequential text file).
Thederived lexical knowledge base we call a daughter dict/on-ary (DD) and the source LKB moor  dictionary (MD).Filters use the lexicographic knowledge specified at theknowledge level.
In principle, one MD for each languageshould be sufficient.
It should contain as much informationas possible (see Byrd, 1983 for a similar opinion).
Con-stmctors can be developed to assist in creating, extendingand updating such an MD, thereby reducing its cost,while LKBs for specific applications or purposes could bederived from it by means of filters.
The basic architectureof our system is given in Figure 1.Current and forthcoming storage and search tech-nology (optical disks, dictionary chips) allow us to storeenormous amounts of lexical data in external memory, andretrieve them quickly.
In view of this, the traditionalstorage versus computation debate (should linguistic infor-mation be retrieved or computed?)
becomes irrelevant inthe context of language technology.
Natural Language70STORAGE LEVEL(Mother Dictionary)KNOWLEDGE LEVELCONSTRUCTORS(Semi-automatic)USER INTERFACEFILTERS(Automatic)1(Daughter Dictionaries)Figure 1.
A System for Creating, Extending andUpdating LKBs.Processing systems hould exhibit enough redundancy tohave it both ways.
For instance, at the level of morphol-ogy, derived and inflected forms should be stored, but atthe same time enough linguistic knowledge should beavailable to compute them if necessary (e.g.
for newentries).
We think the proper place for this linguisticknowledge is the dictionary system.There is some evidence that this redundancy ispsychologically relevant as well.
The duplication of infor-mation (co-existing rules and stored forms) could be partof the explanation for the fuzzy results in most psycho-linguistic experiments aimed at resolving the concreteversus abstract controversy about the organisation of themental lexicon (Henderson, 1985).
The concretehypothesis tates that it is possible to produce and inter-pret word forms without resort to morphological ruleswhile the abstract hypothesis claims that in production andcomprehension rules are routinely used.THE KNOWLEDGE LEVELWe used the knowledge representation system KRS(Steels, 1986) to implement he linguistic and lexico-graphic knowledge.
KRS can best be viewed as a glue forconnecting and integrating different formalisms (functional,network, rules, frames, predicate logic etc.).
New formal-isms can also be defined on top of KRS.
Its kernel is aframe-based object-oriented language embedded in Lisp,with several useful features.
In KRS objects are calledconcepts.
A concept has a name and a concept structure.A concept structure is a list of subjects (slots), used toassociate declarative and procedural knowledge with aconcept.
Subjects are also implemented as concepts, whichleads to a uniform representation of objects and theirassociated information.KRS has an explicit notion of meaning: each con-cept has a referent (comparable to the notion of ~on)and may have a definition, which is a Lisp form that canbe used to compute the referent of the concept within aparticular Lisp environment (comparable to the notion ofintcnsion).
This explicit notion of meaning makes possiblea clean interface between KRS and Lisp and betweendifferent formalisms.Evaluation in KRS is lazy, which means that newobjects can always be defined, but are only evaluatedwhen they are accessed.
Caching assures that slot fillersare computed only once, after which the result is stored.The built-in consistency maintenance system provides theautomatic undoing of these stored results when changeswhich have an effect on them are made.
Different /nber/-tance strategies can be specified by the user.At present, the linguistic knowledge pcrtain.q toaspects of Dutch morphology and phonology.
Our wordformation component consists of a number of morphologi-cal rules for afftxmion and compounding.
These ruleswork on lexical representations (confining graphcmes,phonemes, morphophoncmes, boundary symbols, stresssymbols etc.)
A set of spelling rules transforms Icxicalrepresentations into spelling representations, a set of pho-nological rules transforms lexical representations intophonetic transcriptions.
We have implemented objecthierarchies and procedures to compute inflections, internalword boundaries, morpheme boundaries syllable boun-daries and phonetic representations (our linguistic model isfully described in Dnelemans, 1987).Lcxicographic knowledge consists of a number ofsorting routines and storage strategies.
At present, thedefinition of filters can be based on the following primi-tive procedures: sequential organisation, (single-key)indexed-sequential organisation, letter tree organisation,alphabetic sorting (taking into account he alphabetic posi-tion of non-standard letters like phonetic symbols) and fre-quency sorting.Constructors can be defined using primitive pro-cedures attached to linguistic objects.
E.g.
when a newcitation form of a verb is entered at the knowledge level,constructors exist to compute the inflected forms of thisverb, the phonetic transcription, syllable and morphologi-cal boundaries of the citation form and the inflectedforms, and of the forms derived from these inflectedforms, and so on rccursively.
Our present understandi~of Dutch morphophonology has not yet advanced to such7/a level of sophistication that fully automatic extension ofthis kind is possible.
Therefore, the output of the con-structors should be checked by the user.
To this end, acooperative user interface was built.
After checking bythe user, newly created or modified lexical objects can betransformed again into 'frozen' records at the storagelevel.
This happens through a translation function whichtransforms concepts into records.
Another translation func-tion creates a KRS object on the basis of a record.Figure 2 shows a KRS object and its correspondingrecord.
This record contains the spelling, the lexicalrepresentation, the pronunciation, the citation form (lex-eme) and some morpho-syntactic codes of the verb formwerkte (worked).
(Records for citation forms containpointers to the different forms belonging to their para-digm, and information relevant o all forms of a para-digm: e.g.
case frames and semantic information).
Thecorresponding concept contains exactly the same informa-tion in its subjects, but through inheritance from conceptslike verb-form and werken-lexeme, a large amount ofadditional information becomes accessible.werkte werklO@ wcrkle werken-lexeme 11210(defoonoept werkte-form(a verb-form(spelling \[string "werkte'\])(lexioal-representatlon \[siring "'werk#O@'\])(pronunolat|on \[siring ?wErkt(~'\])(lexeme werken-lexeme)(finiteness flnile)(lense pasl)(grammatical-number singular)(gramme tioel-person 1-2-3)))Figure 2.
A static record and its corresponding KRSconcept.THE USER INTERFACEWe envision two categories of users of our archi-tecture: linguists, who program the linguistic knowledgeand provide primitive procedures which can be used asbasic building blocks in constructors, and lexicographers,using predefined filters and constructors, creating newones on the basis of existing ones and on the basis ofprimitive linguistic and lexicographic procedures, andchecking the output of the constructors before it is addedto the dictionary.
The aim of the user interface is toreduce user intervention in this checking phase to aminimum.
It fully uses the functionality of the mouse,menu and window system of the Symbolics Lisp Machine.When due to the incompleteness of the linguisticknowledge new information cannot be computed with fullcertainty, the system nevertheless goes ahead, usingheuristics to present an 'educated gue,s' and notifying theuser of this.
These heuristics are based on linguistic aswell as probabilistic aata A user monitoring the o~putof the conswactor only needs to click on incorrect itemsor parts of items in the output (which is mouse-semitive).This activates diagnostic procedures associated with therelevant linguistic objects.
These procedures can deleteerroneous objects already created, recompute them ortransfer control to other objects.
If the system can diag-nose its error, a correction is presented.
Otherwise, amenu of possible corrections (again constrained by heuris-tics) is presented from which the user may choose, or inthe worst case, the user has to enter the correct informa-tion himself.Consider for example the conjugation of Dutchverbs.
At some point, the citation form of an irregularverb (blijven, to stay) is ~d~ to the system, and wewant to add all inflected forms (the paradigm of the verb)to the dictionary with their pronunciation.
As a firsthypothesis, the system assumes that the inflection is regu-lax.
It presents the computed forms to the user, who canindicate erroneous forms with a simple mouse click.Information about which and how many forms wereobjected to is returned to the diagnosis procedure associ-ated with the object responsible for computing the regularparadigm, which analyses this information and transferscontrol to an object computing forms of verbs belongingto a particular category of irregular verbs.
Again theforms are presented to the user.
If this time no forms arerefused, the pronunciation of each form is computed andpresented to the user for correction, and so on.
Thissequence of events is illustrated in Figure 3.Diagnostic procedures were developed for objectsinvolved in morphological synthesis, morphologicalanalysis, syllabification and phonemisation.
At least forthe linguistic procedures implemented so fax a maximumof two corrective feedbacks by the user is necessary tocompute the correct representations.72Indicate false formsbl i j f tb l i j f tbl i jvenbli jvendmndtcate false fornsblijft,blijftbl ijvenblijvendbleefblevengeblevenIndlcate I~"~I x ~ron R pronunc t at tonsI'bLe~ftlI'bLeH'tlI'bLe~v~nlI'bLe~v~ntlI'bLeflI'bLevanlIga'bLevanlFigure 3.
Corrective feedback by the user: Errone-ous forms are indicated (top left), second (andcorrect) try by the system (top right), presentationof the pronunciations of the accepted paradigm forchecking by the user (down).CONSTRUCTING A RHYME DICTIONARYAutomatic dictionary construction can be easilydone by using a particular filter (e.g., a citation form dic-tionary can be filtered out from a word form dictionary).Other more complex constructions can be achieved bycombining a particular constructor or set of constructorswith a filter.
For example, to generate a word form lexi-con on the basis of a citation form lexicon, we first haveto apply a constructor to it (morphological synthesis), andafterwards filter the result into a suitable format.
In thissection, we will describe how a rhyme dictionary can beconstructed on the basis of a spelling word form lexiconin an attempt o point out how our architecture can beapplied advantageously in lexicography.First, a constructor must be defined for the compu-tation of a broad phonetic transcription of the spellingforms if this information is not already present in theMD.
Otherwise, it can be simply retrieved from the MD.Such a constructor can be defined by means of the primi-tive linguistic procedures syllabification, phonemisationand stress assignment The phoncmisation algorithm shouldbe adapted in this case by removing a number ofirrelevant phonological rules (e.g.
assimilation rules).This, too can be done interactively (each rule in thelinguistic knowledge base can be easily turned on or offby the user).
The result of applying this constructor tothe MD is the extension of each entry in it with an addi-tional field (or slot at the knowledge level) for the tran-scription.
Next, a filter object is defined working in threesteps:(i) Take the broad phonetic transcription of each dic-tionary entry and reverse it (reverse is a primitiveprocedure available to the lexicographer).
(ii) Sort the reversed transcriptions first acOordin~ totheir rhyme determining part and then alphabeti-cally.
The rhyme determining part consists of thenucleus and coda of the last stressed syllable andthe following weak syllables if any.
For example,the rhyme determining part of w~rrelea (to whirl)is er-ve-len, of versn6llea (to accelerate) el-lea, andof 6verwdrk (overwork) erk.
(iii) Print the spelling associated with each transcriptionin the output file.
The result is a spelling rhymedictionary.
If desirable, the spelling forms can beaccompanied by their phonetic transcription.Using the same information, we can easily developan alternative filter which takes into account the metre ofthe words as well.
Although two words rhyme even whentheir rhythm (defined as the succession of stressed andunstressed syllables) is different, it is common poeticpractice to look for rhyme words with the same metre.The metre frame can be derived from the phonetic tran-scription.
In this variant, step (ii) must he preceded by astep in which the (reversed) phonetic transcriptions aresorted according to their metre frame.RELATRD ~ C HThe presence of both static information (morpheancsand features) and dynamic information (morphologicalrules) in LKBs is also advocated by Domenig and Shann(1986).
Their prototype includes a morphological "shell'making possible real time word analysis when only stemsare stored.
This morphological knowledge is not used,however, to extend the dictionary and their system iscommitted to a particular formalism while ours isnotation-neutral nd unresuictediy extensible due to theobject-oriented implementation.The LKB model outlined in Isoda, Also, Kami-bayashi and Matsunaga (1986) shows some similarity toour filter concept.
Virtual dictionaries can be created usingbase dictionaries (physically existing dictionaries) anduser-defined Association Interpreters (KIPs).
The latter areprograms which combine primitive procedures (patmmmatching, parsing, string manipulation) to modify thefields of the base dictionary and transfer control to otherdictionaries.
This way, for example, a virtual English-Japanese synonym dictionary can be created fromEnglish-English and FJlglish-Japanese base dictionaries.
Inour own approach, all information available is present inthe same MD, and filters are used to create base dic-tionaries (physical, not virtual).
Constructors are abeamt in73the architecture of Isoda et al (1986).Johnson (1985) describes a program computing areconstructed form on the basis of surface forms indifferent languages by undoing regular sound changes.
Theprogram, which is part of a system compiling a compara-tive dictionary (semi-)automatically, may be interpreted asrelated to the concept of a constructor in our own system,with construction limited to simple string manipulations,and not extensible unlike our own system.CONCLUSIONWe see three main advantages in our approach.First, the distinction between a dynamic linguistic levelwith a practical user-friendly interface and a static storagelevel allows us to construct, extend and maintain a largeMD relatively quickly, conveniently and cost-effectively(at least for those linguistic data of which the rules arefairly well understood).
Obviously, MDs of differentlanguages will not contain the same information: while itmay be feasible to incorporate inflected forms of nouns,verbs and adjectives in it for Dutch, this would not be thecase for Finnish.Second, the linguistic knowledge necessary to buildconstructor objects can be tested, optimised and experi-mented with by continuously applying it to large amountsof lexical material.
This fact is of course more relevant othe linguist han to the lexicographer.Third, efficient LKBs for specific applications (e.g.hyphenation, spelling error correction etc.)
can be easilyderived from the MD due to the introduction of filterswhich automatically derive DDs.It may be the case that our approach cannot beeasily extended to the domain of syntactic and semanticdictionary information.
It is not immediately apparent howconstructors could be built e.g.
for the (semi-)automaticcomputation of case frames for verbs or semanticrepresentations for compounds.
Still, a heuristics-drivencooperative interface could be profitably used in theseareas as well.So far, we have invested most effort into thedevelopment of an object-oriented implementation f mor-phological and phonological knowledge for Dutch (i.e.
inthe definition of the primitive procedures which can beused by constructors), in the development of heuristicsand diagnostic procedures, and in the design of the userinterface.
A prototype of the system (written in ZetaLispand KRS, and running on a Symbotics Lisp Machine) hasbeen built.
Future efforts will be directed to the extensionof the linguistic and lexicographic knowledge, the develop-ment of a suitable script language for the definition ofconstructors, and to the testing of our architecture on alarge LKB.
We think of using the Topl0,000 dictionarywhich is being developed at the University of Nijmegen asa point of departure for the constm~on of a MD forDutch.
This LKB contains some 78,000 Dutch wordforms with some morphological information.A C K N O ~This work was financially suppoRed by the EC(ESPRIT project 82).
My research on this topic startedwhile I was working for the Language Technology Projectat the University of Nijmegen.
I am grateful to GerardKcmpen and Koen De SrnecR for valuable comments onthe text.Byrd, J.R. 1983 Word Formation in NaturalLanguage Processing Systems.
UCAI-83, Karlaruhe,West Germany; 704-706.Daclemans, W.M.P.
1987 S/ud/cs inTcc2molog7.
An Object-Olqentcd Computer Model of Mor-phophonologicM Aspects of Dutch.
Doctoral DisscrtaIion,University of Leuven.Domcnig, M. and Shann P. 1986 Towards a Dedi-cated Database Management System for Dictionaries.COLING-86; 91-96.Henderson, L. 1986 Toward a psychology of mor-phemes.
In Ellis A.W.
(Ed.)
Progress /n the Psycholosyof Language~ VoL I. London: Erlbaum.lsoda, M., ALso, H., Kamibayashi N. and Matsu-naga Y.
1986 Model for Lexical Knowledge Base.COLING-86; 451-453.Johnson, M. 1985 Computer Aids for ComparativeDictionaries.
L/ngu/st/cs 23, 285-302.Kipfer, B.A.
1985 Computer Applications in Lexi-cography -- Summary of the Store-Of-The-Art.
Pape.~ /nLinguistics 18 (l); 139-184.Steels, L. 1986 Tutorial on the KRS Concept Sys-tem.
Memo AI-LAB Brussels.74
