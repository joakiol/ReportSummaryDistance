Proceedings of the 8th International Conference on Computational Semantics, pages 268?271,Tilburg, January 2009. c?2009 International Conference on Computational SemanticsA note on the definition of semantic annotationlanguagesHarry Bunt and Chwhynny Overbeekeharry.bunt@uvt.nl, info@chwhynny.com1 IntroductionIn the last few years, the international organization for standards ISO hasstarted up various projects concerned with the definition of interoperableconcepts for syntactic, morphosyntactic, and semantic annotation, withthe ultimate aim to support the development of interoperable language re-sources.
The Linguistic Annotation Framework (LAF, Ide & Romary, 2004)thereby serves as a meta-framework.
LAF distinguishes between the con-cepts of annotation and representation: ?annotation?
refers to the processof adding information to segments of language data, or to that informationitself, independent of the format in which this information is represented.The term ?representation?
refers to the format in which an annotation is ren-dered, for instance in XML.
According to LAF, annotations are the properlevel of standardization.This distinction is reflected in the specification of ISO-TimeML, a pro-posed ISO standard for temporal annotation (ISO, 2008) which consists ofan abstract syntax, a concrete syntax, and a semantics.
The abstract syntaxspecifies the elements making up the information in annotations, and howthese elements may be combined to form complex annotation structures;these combinations are defined as set-theoretical structures.
The concretesyntax is a variant of the TimeML markup language (Pustejovsky et al,2003).
Any other representation that is a rendering of the abstract syntaxcan be converted into this representation.
The ISO-TimeML semantics isassociated with its abstract syntax, which explains why all concrete repre-sentations of ISO-TimeML annotations are semantically equivalent.In this note we argue that the distinction of an abstract and a concretesyntax level is desirable not only from a standardization point of view, butalso for designing annotation languages with a representation that is con-ceptually transparent for annotators and that allows a simple, systematic268interpretation.
We illustrate this for the annotation and interpretation ofexpressions denoting dates, times, and durations.1.1 ISO-TimeMLThe abstract syntax of ISO-TimeML consists of two parts: (a) a ?conceptualinventory?, specifying the elements from which annotations are built up; and(b) a set of syntax rules which describe the possible combinations of theseelements.a.
Conceptual inventory The concepts that can be used to build ISO-TimeML annotations fall into the following five categories, all formed byfinite sets, plus the concepts of real and natural numbers.?
finite sets of elements called ?event classes?
; ?tenses?, ?aspects?, ?polarities?,and ?set-theoretic types?
;?
finite sets of elements called ?temporal relations?,?duration relations?, ?numer-ical relations, ?event subordination relations?, and ?aspectual relations?;?
a finite set of elements called ?time zones?;?
finite sets of elements called ?calendar years?, ?calendar months?, ?calendarday numbers?
; ?clock times?;?
a finite set of elements called ?temporal units?.b.
Syntax rules Annotation structures in ISO-TimeML come in two va-rieties, entity structures and link structures.
Entity structures contain se-mantic information about a segment of source text; link structures describesemantic relations between segments of source text.The simplest kind of ISO-TimeML structures are a single entity struc-ture, which is a pair < m,a > consisting of a markable1m and an annotationa, or a single link structure < e1, e2, R > which relates two entity structures.More complex annotation structures consist of a set of entity structures anda set of link structures which link the entity structures together.Entity structures come in 6 types, containing information about (1) events;(2) temporal intervals; (3) time points (or ?instants?
); (4) amounts of time;(5) frequencies of events; and (6) temporal relations.
We focus here on thetree types of temporal concepts: intervals, instants, and amounts of time.1.
An instant structure is either a triple < time zone, date, clocktime >, wherea date is a triple consisting of a calendar year, a calendar month, and a cal-endar day number; or a triple < time-amount structure, instant structure,temporal relation> (?an hour before midnight?
).1The term markable is used to refer to the entities that the annotations are associatedwith.
There are two kinds of markables in ISO-TimeML: event markables and time mark-ables, corresponding to segments of primary data that describe events, and to those thatdescribe temporal entities or relations, respectively.2692.
An interval structure is either:(a) a pair < t1, t2> of two instant structures (beginning and end);(b) a calendar year, a pair consisting of a calendar year and a calendarmonth, or a triple < cal.year, cal.month, cal.daynumber >;(c) a triple < time-amount structure, interval structure, temporalrelation > (?three weeks before Christmas?
);(d) a triple < t1, t2, R > where t1and t2are either instant or intervalstructures, and where R is a duration relation (?from ?92 until ?95?).3.
A time-amount structure is a pair < n, u >, where n is a real number and ua temporal unit, or a triple < R,n, u >, where R is a numerical relation (likegreater than) and n and u as before;Link structures specify the temporal anchoring of events in time; the tempo-ral ordering of events, intervals or instants; the length of an interval; subor-dination relations between events; and aspectual relations between events.The semantics associated with this abstract syntax defines a mappingfrom the set-theoretical structures defined by the abstact syntax to the lan-guage of first-order predicate logic with lambda abstraction.A concrete syntax in general consists of the specification of names forthe various sets that make up the conceptual vocabulary, plus a listing ofspecific named elements of these sets, and for each rule of the abstractsyntax a specification of how to represent the constructed annotation struc-ture.
The TimeML-based concrete syntax that is part of the ISO-TimeMLspecification makes use of a TIMEX3 tag to mark up explicit temporal ex-pressions like dates, times and durations.
Using this tag, the different typesof temporal expressions are represented by means of the attribute type.
Anattribute called value has alphanumerical string values that follow a stan-dard format to represent (combinations of) calendar days, weeks, monthsand years (2007-03-16); clock hours, minutes and seconds; (T13:15:00), aswell as amounts of time (P60D) and frequencies.
This representation doesnot have a transparent relation to the conceptual distinctions made in theabstract syntax.A more transparent representation can be obtained by defining a con-crete syntax where the categories (sets) of the conceptual inventory corre-spond to XML tags, and elements in these sets to attribute values.
Thisgives annotation representations that wear there meaning on their sleeve,which is optimal both for human annotators and for computing the formalinterpretation of the annotations.
The following examples illustrate this,where we show, for three types of temporal expressions, (a) the conceptualannotation structure; (b) the TimeML-based representation; (c) an XMLrepresentation that directly instantiates the conceptual structure; (d) the270formal interpretation.2In all cases, the representations (c) are intuitivelymore transparent than the (b) ones, and have a more straightforward rela-tion to the interpretations (d).
(1) March 2007 [m1= w1w2, w1=?March?, w2=?2007?]a.
< m1, <interval, <2007, march>>b.
<TIMEX3 id="t1" type="DATE" value="207-03-XX"?>c.
<INTERVAL id="t1" calYear="2007" calMonth="MARCH">d.
?t.INTERVAL(t) ?
Calyear(t)=2007 ?
Calmonth(t)=march(2) Twelve-thirty tomorrow[m1= w1w2, w1=?Twelve-thirty?, w2=?tomorrow?
]a.
< m1, <instant, <2009, january, 8>,1230>>b.<TIMEX3 id="t1" type="TIME" value="T12:30">c.
<TIME id="t1" calYear="2009" calMonth="JANUARY" calDayNum="8"clockTime="1230" >d.
?t.TIME(t) ?
Calyear(t)=2009?Calmonth(t)=january ?
Caldaynum(t)=8?
Clocktime(t)=1230(3) two-and-a-half minutes [m1= w1w2, w1=?Two-and-a-half?,w2=?minutes?]a.
< m1, <time-amount, <2.5, minute>>b.
<TIMEX3 id="t1" type="DURATION" value="P2.5M">c.
<TIMEAMOUNT id="a1" num="2.5" unit="minute">d.
?x.TIME-AMOUNT(x) ?
Number(x)=2.5 ?
Unit(x)=minuteReferences[1] Bunt, H.C, Overbeeke, C. (2008) An Extensible Compositional Semantics forTemporal Annotation.
In: Proceedings of LAW II, the Second Workshop on Lin-guistic Annotation, Satellite workshop at LREC 2008.
Paris: ELRA.
[2] Bunt, H.C., Romary, L. (2002) Requirements on multimodal semantic repre-sentations.
In Proceedings of ISO TC37/SC4 Preliminary Meeting, Seoul, 59-68.
[3] Ide, N., Romary, L. (2004) International Standard for a Linguistic AnootationFramework.
Natural language Engineering, 10: 211-225.
[4] ISO (2008) ISO Draft International Standard 24617-1 ?Semantic annotationframework Part 1: Time and events?.
Geneva: ISO.
[5] Pustejovsky, J., Castano, J., Ingria, R., Gaizauskas, R., Katz, G., Sauri, R.,Setzer, A.
(2003) TimeML: Robust Specification of Event and Temporal Expres-sions in Text.
In Proceedings IWCS-5, Tilburg, pp.
337-3532Depending on the semantic interpretation framework in which this interpretation isembedded, the semantic representations may be slightly different; e.g.
Bunt & Over-beeke (2008) assign to the first example the representation ?P.
?t.INTERVAL(t) ?
Ca-lyear(t)=2007 ?
Calmonth(t)=march ?
P(t).271
