A quantitative model of word order and movementin English, Dutch and German complement constructionsKARIN HARBUSCHComputer Science DepartmentUniversity of Koblenz-LandauPB 201602, 56016 Koblenz/DEharbusch@uni-koblenz.deGERARD KEMPENCognitive Psychology UnitLeiden University, andMax Planck Institute, Nijmegen/NLkempen@fsw.leidenuniv.nlAbstract We present a quantitative model of wordorder and movement constraints that enables asimple and uniform treatment of a seemingly het-erogeneous collection of linear order phenomenain English, Dutch and German complement con-structions (Wh-extraction, clause union, extraposi-tion, verb clustering, particle movement, etc.).
Un-derlying the scheme are central assumptions of thepsycholinguistically motivated Performance Gram-mar (PG).
Here we describe this formalism in de-clarative terms based on typed feature unification.PG allows a homogenous treatment of both thewithin- and between-language variations of the or-dering phenomena under discussion, which reduceto different settings of a small number of quantita-tive parameters.1.
IntroductionWe propose a quantitative model for expressingword order and movement constraints that enablesa simple and uniform treatment of a heterogeneouscollection of linear ordering phenomena in English,Dutch and German complement structures.
Under-lying the scheme are central tenets of the psy-cholinguistically motivated Performance Grammar(PG) formalism, in particular the assumption thatlinear order is realized at a late stage of the gram-matical encoding process.
The model is describedhere in declarative terms based on typed featureunification.
We show that both the within- and be-tween-language variations of the ordering phe-nomena under scrutiny reduce to differences be-tween a few numerical parameters.The paper is organized as follows.
In Section 2,we sketch PG's hierarchical structures.
Section 3,the kernel of the paper, describes the linearizationand movement model.
In Section 4, we turn to cen-tral word order phenomena in the three target lan-guages.
Section 5, finally, contains some conclu-sions.2.
Hierarchical structure in PGPG's hierarchical structures consist of unorderedtrees ('mobiles') composed out of elementary build-ing blocks called lexical frames.
These are 3-tieredmobiles assembled from branches called segments.The top layer of a frame consists of a singlephrasal node (the 'root'; e.g.
Sentence, NounPhrase, ADJectival Phrase, Prepositional Phrase),which is connected to one or more functionalnodes in the second layer (e.g., SUBJect, HeaD).At most one exemplar of a functional node is al-lowed in the same frame.
Every functional nodedominates exactly one phrasal node ('foot') in thethird layer, except for HD which immediatelydominates a lexical (part-of-speech) node.
Eachlexical frame is 'anchored' to exactly one lexicalitem: a lemma (printed below the lexical node serv-ing as the frame's HeaD).
A lexical frame encodesthe word category (part of speech), subcategoriza-tion features, and morphological diacritics (person,gender, case, etc.)
of its lexical anchor (cf.
theelementary trees of Tree Adjoining Grammar(TAG; e.g.
Joshi & Schabes, 1997).Associated with every categorial node (i.e.,lexical or phrasal node) is a feature matrix, whichincludes two types of features: agreement features(not to be discussed here; see Kempen & Harbusch,forthcoming) and topological features.
The latterplay a central role in the linear ordering mecha-nism.
Typed feature unification of topological fea-tures takes place whenever a phrasal foot node of alexical frame is replaced (substituted for) by a lexi-cal frame.
Substitution is PG's sole compositionoperation.
Substitution involves unification of thefeature matrices that are associated with the substi-tuted phrasal foot node and the root node of thesubstituting lexical frame.
Substitution gives rise tothe derivation tree of a well-formed syntactic struc-ture iff the phrasal foot node of all obligatory seg-ments of each lexical frame successfully unifieswith the root of another frame.
The tree in Figure 1is well-formed because the MODifier segments arenot obligatory.N PHDproweSSUBJN PHDvhateDOB JN PN PHDnD anaN PHDnKimSSUBJN PHDvknowCM PSM ODA P |PP| SM ODA P |PP| SFigure 1.
Simplified lexical frames underlying thesentences We know Dana hates Kim and Kim we knowDana hates (example from Sag & Wasow,1999).
Or-der of branches is arbitrary.
Filled circles denote sub-stitution.
(The feature matrices unified as part of thesubstitution operations are not shown.)3.
Linear structure in PGThe above-mentioned topological features are as-sociated with the phrasal root nodes of lexicalframes.
Their value is a feature matrix specifying a'topology', that is, a one-dimensional array of left-to-right slots.
In this paper we will only be con-cerned with topological features associated with S-nodes.
They serve to assign a left-to-right order tothe segments (branches) of verb frames (i.e.
lexicalframes specifying the major constituents ofclauses).
On the basis of empirical-linguistic ar-guments (which we cannot discuss here), we pro-pose that S-topologies of English, Dutch and Ger-man contain exactly nine slots:E F1 F2 F3 M1 M2 M3 M4 E1 E2D/G F1 M1 M2 M3 M4 M5 M6 E1 E2The slots labeled Fi make up the Forefield (fromGer.
Vorfeld); the Mj slots belong to the Midfield(Mittelfeld); the Ek's define the Endfield (Nachfeld;terms adapted from traditional German grammar;cf.
Kathol, 2000).
Table 1 illustrates which clauseconstituents select which slot as their 'landing site'.Notice, in particular, that the placement conditionsrefer not only to the grammatical function fulfilledby a constituent but also to its shape.
For instance,while the Direct Object takes M3 as its defaultlanding site, it selects F1 if it is a Wh-phrase orcarries focus, and M2 if it is a personal pronoun(it).
In terms of Figure 1, if Kim carries focus, itmay occupy slot F1 of the topology associated withthe complement clause headed by hate.Table 1.
Examples of topology slot fillers (English).MODifier constituents are not shown.
Precedence be-tween constituents landing in the same slot is markedby "<".Slot FillerF1 Declarative main clause: Topic, Focus (oneconstituent only)Interrogative main clause: Wh-constituent.Complement clause: Wh-constituent (includ-ing CoMPlementizeR whether/if)F2 Complement clause: CoMPLementizeR thatF3 Subject (iff non-Wh)M1 Pre-INFin.
to < HeaD (oblig.)
< PaRTicleM2 Direct OBJect (iff personal pronoun)Interrogative main clause: SUBJect (iffnon-Wh); SUBJ < DOBJM3 Indirect OBJect < Direct OBJect (non-Wh)M4 PaRTicleE1 Non-finite CoMPlement of 'Verb Raiser'E2 Non-finite CoMP of 'VP Extraposition' verbFinite CoMPlement clauseHow is the Direct Object NP Kim 'extracted'from the subordinate clause and 'moved' into themain clause?
Movement of phrases betweenclauses is due to lateral topology sharing.
If a sen-tence contains more than one verb, each of the verbframes concerned instantiates its own topology.This applies to verbs of any type, whether main,auxiliary or copula.
In such cases, the topologiesare allowed to share identically labeled lateral (i.e.left- and/or right-peripheral) slots, conditionallyupon several restrictions to be explained shortly.After two slots have been shared, they are nolonger distinguishable; in fact, they are the sameobject.
In the example of Figure 1, the embeddedtopology shares its F1 slot with the F1 slot of thematrix clause.
This is indicated by the dashed bor-ders of the bottom F1 slot:F1  F3 M1     E2?
we know     ?
?
?Kim  Dana hatesIn sentence generation, the overt surface orderof a sentence is determined by a Read-out modulethat traverses the hierarchy of topologies in left-to-right, depth-first manner.
Any lexical item it 'sees'in a slot, is appended to the output string.
E.g., Kimis seen while the Reader scans the matrix topologyrather than during its traversal of the embedded to-pology.
See Figure 2 for the ordered tree corre-sponding to Kim we know Dana hates1.SSUBJNPweHDvknowCMPSSUBJNPDanaHDvhat eDOBJNPKimF1 F3 M1 E2F3 M1Figure 2.
Fronting of Direct Object NP Kim due to pro-motion (cf.
Figure 1).
Rectangles represent (part of) thetopologies associated with the verb frames.The number of lateral slots an embedded topol-ogy shares with its upstairs neighbor is determinedby the parameters LS (left-peripherally shared area)and RS (right-hand share).
The two laterally sharedareas are separated by a non-shared central area.The latter includes at least the slot occupied by theHeaD of the lexical frame (i.e., the verb) and usu-ally additional slots.
The language-specific pa-rameters LS and RS are defined in the lexical en-tries of complement-taking verbs, and dictate how(part of) the feature structure associated with thefoot of S-CMP-S segments gets instantiated.
Forinstance, the lexical entry for know (Figure 1)states that LS=1 if the complement clause is finiteand declarative.
This causes the two S-nodes of theCoMPlement segment to share one left-peripheralslot, i.e.
F1.
If the complement happens to be inter-rogative (as in We know who Dana hates), LS=0,implying that the F1 slots do not share their con-tents and who cannot 'escape' from its clause.In the remainder of this Section we present arule system for lateral topology that is couched in atyped feature logic and uses HPSG terminology.The system deals with a broad variety of movementphenomena in English, Dutch and German.We define a clausal topology as a list of slottypes serving as the value of the topology ("TPL")feature associated with S-nodes:S [TPL ?F1t,F2t,F3t,M1t,M2t,M3t,M4t,E1t,E2t?
]1The value of a TPL feature may be a disjunctive set ofalternative topologies rather than a single topology.See the CMP-S node of Figure 3 for an example.As for syntactic parsing, in Harbusch & Kempen(2000) we describe a modified ID/LP parser that cancompute all alternative hierarchical PG structures li-censed by an input string.
We show that such a parsercan fill the slots of the topologies associated with anysuch structure in polynomial time.for English, andS [TPL ?F1t,M1t,M2t,M3t,M4t,M5t,M6t,E1t,E2t?
]for Dutch and German.
Slot types are defined asattributes that take as value a non-branching list oflemmas or phrases (e.g.
SUBJect-NP, CoMPle-ment-S or HeaD-v).
They are initialized with thevalue empty list, denoted by "??"
(e.g., [F1t F1 ??
]).Lists of segments can be combined by the ap-pend operation, represented by the symbol " ?
".The expression "L1 ?L2" represents the list com-posed of the members of L1 followed by the mem-bers of L2.
We assume that L2 is non-empty.
If L1is the empty list, "L1 ?L2" evaluates to L2.
Slottypes may impose constraints on the cardinality(number of members) of the list serving as itsvalue.
Cardinality constraints are expressed as sub-scripts of the value list.
E.g., the subscript "c=1" in[F1t F1 ?
?c=1] states that the list serving as F1's valueshould contain exactly one member.
Cardinalityconstraints are checked after all constituents thatneed a place have been appended.Depending on the values of sharing parametersLS and RS, the list can be divided into a left area(comprising zero or more slot types), the centralarea (which includes at least one slot for the HeaDverb), and the right area (possibly empty).
Topol-ogy sharing is licensed exclusively to the lateralareas.
LS and RS are set to zero by default; this ap-plies to the topologies of main clauses and adver-bial subclauses.
The root S of a complement clauseobtains its sharing parameter values from the footof the S-CMP-S segment belonging to the lexicalframe of its governing verb.
For example, the lexi-cal entry for know states that the complement ofthis verb should be instantiated with LS=1 if theclause type (CTYP) of the complement is declara-tive.
This causes the first member of the topologiesassociated with the S-nodes to receive a corefer-ence tag (indicated by boxed numbers):S TPL  1 F1,F2,...,E2[ ]CMPS TPL 1 F1,F2, ...E2CTYP Decl??
???
?If, as in the example of Figure 1, know's comple-ment is indeed declarative, the foot of the comple-ment segment can successfully unify with the rootof the hate frame.
As a consequence, the F1 slot ofthe complement clause is the same object as the F1slot of the main clause, and any fillers will seem tohave moved up one level in the clause hierarchy:S TPL 1 F1,F2,...E2CTYP Decl??
???
?S TPL F1,F2,...,E2CTYP Decl??
???
??
S TPL 1 F1,F2,...,E2CTYP Decl??
???
?Filling a slot also involves coreference tags.
Forexample, the HeaDs of English verb frames obtaintheir position in the local topology by looking upthe slot associated with the coreference tag:S  TPL F1,...,M1 ?
1 ,...,E2[ ]HDv  1 LEMMA hate[ ]The information associated with the foot node ofthe HeaD segment will now be appended to thecurrent content, if any, of slot M1.
The samemechanism serves to allocate the finite comple-ment clause (or rather its root S-node) to slot E2 ofthe matrix clause:S   TPL 1 F1,...,E1, E2 ?
2[ ]CMPS   2 TPL 1 F1,...,E1, E2CTYP Decl_finite??
???
?Other clause constituents receive their landing site(cf.
Table 1) in a similar manner.
Figure 2 depictsthe configuration after Fronting of NP Kim.Figure 3 below includes a paraphrase where thefocus on Kim is stressed prosodically rather thanby Fronting.
This is indicated by the disjunctive setcarrying the tag 4 .
In sentence generation, theRead-out module selects one alternative, presuma-bly in response to pragmatic an other context fac-tors.
In parsing mode, one or the alternatives isruled out because it does not match word order inthe input string.The formalism defined so far yields unorderedhierarchical structures.
However, the values of theTPL features enable the derivation of ordered out-put strings of lexical items.
As indicated above inconnection with Figure 2, we assume that this taskcan be delegated to a simple Read-out module thattraverses the clause hierarchy in a depth-first man-ner and processes the topologies from left to right2.If a slot is empty, the Reader jumps to the next slot.If a slot contains a lexical item, it is appended to2 A slot may contain more than one phrase (e.g., Directand Indirect OBJect in slot M3; cf.
Table 1).
We assumethey have been ordered as part of the append operation,according to the sorting rule associated with the slot.the current output string and tagged as alreadyprocessed.
It follows that, if a slot happens to beshared with a lower topology, its contents are onlyprocessed at the higher clause level, i.e., undergopromotion.4.
Linearization of complement clauses inEnglish, Dutch and GermanThe PG formalism developed above provides asimple quantitative linearization method capturingboth within-clause and between-clause phenomena.The assignment of constituents to topology slots(including, e.g., scrambling in Dutch and German)has been dealt with in Kempen & Harbusch (inpress; forthcoming).
In the present paper we focuson promotion in complement constructions ?
adomain where the three target languages exhibitrather dissimilar ordering patterns.
We highlightthe fact that PG enables highly similar treatmentsof them, differing only with respect to the settingsof some quantitative parameters.The movement (promotion) phenomena at issuehere depend primarily on the values assigned tosharing parameters LS and RS in five differenttypes of complement clauses.
These settings areshown Table 2.
They are imported from the lexi-con and control the instantiation of the TPL featureof the root S-node of the complement.
We beginwith some illustrations from English.Table 2.
Size of the left- and right-peripheral sharedtopology areas (LS and RS) in diverse complementconstructions.Clause type English Dutch GermanInterrogative LS=0RS=0LS=0RS=1LS=0RS=1Declarative & Finite LS=1RS=0LS=1RS=1LS=1RS=1Decl.
& Non-Finite,VP ExtrapositionLS=3RS=0LS=1RS=1LS=1RS=1Decl.
& Non-Finite,Verb RaisingLS=3RS=0LS=4:6RS=1LS=5RS=1Decl.
& Non-Finite,Third Construction    n.a.LS=1:6RS=1LS=1:6RS=1The non-finite complements of do and have insentence (1) below are both declarative.
(Cf.
theparaphrase "For which person x is it the case that Ihave to call x", which highlights the scope of who.
)It follows that LS=3 in both complements.
Noticethat do is treated as a 'Verb Raiser', have (in haveto) as a VP Extraposition verb.Figure 3.
Analysis of Kim weknow Dana hates (cf.
Figure1) and We know Dana hatesKim.
The versions correspondto different options of thetopology  value associatedwith the CoMPlement(indicated within curlybrackets).
Empty slots are notshown in the TPL features.
(1) Who do I have to call?F1   M1    E1 E2?
do I   ?
?
?have     ?
?
?who   to callIn example (2), the lower clause is finite and de-clarative ?cf.
the paraphrase ?For which person xis it the case that you said that John saw x?.
Thescope of who exceeds its ?own?
clause and includesthe matrix clause.
In (3), on the other hand, thescope of the interrogative pronoun does not includethe main clause (?I know for which person x it isthe case  that John saw x?).
Therefore, the com-plement is interrogative and cannot share its F1slot with that of the main clause.
(2) Who did you say John saw?F1  F3 M1 M2   E1 E2?
did you   ?
?
?say     ??
?who  John saw(3) I know who John sawF1  F3 M1     E2I know     ?
?who  John sawThe system predicts 'island effects' as in (4).
(4) a.
Who did you claim that you saw?b.
*Who did you make the claim that you saw?The lexical frame of the verb claim includes anS-CMP-S segment identical to that of know above(repeated here for convenience):S   TPL 1 F1,...,E1, E2 ?
2[ ]CMPS   2 TPL 1 F1,...,E1, E2CTYP Decl_finite??
???
?The feature matrices of root and foot nodes of thissegment both specify a TPL feature referencing theslot F1.
This enables insertion of coreference tag2  and thus promotion of the filler of slot F1.However, the complement segment of the nounclaim is rooting in an NP node, which cannot havea TPL feature with type F1t.NP   ...[ ]CMPS   TPL 1 F1CTYP Decl_finite??
???
?So, tag   1  is meaningless here, ruling out promo-tion in (4b).Turning now to Dutch, we first refer to Table 3,which specifies some important landing sites formajor clause constituents.
Because of the similaritywith German, we combine the two languages.
First,we illustrate question formation.Dutch interrogative main clauses feature Sub-ject-Verb inversion without the equivalent of do-insertion (cf.
5).
(5) a. M1 Zag M2 je M3 dat?saw      you      that?Did you see that??b.
F1 Wie M1 zag M3 dat?who      saw       that?Who saw that??c.
F1 Wat M1 zagen M2 ze?
?What did they see?
?Because the complement in (6) is interrogative,the sharing rule in Table 2 prohibits left-peripheralsharing (LS=0).
(6)  Zij vroeg of ik hem kendeShe asked whether I him knew?She asked whether I knew him?F1 M1 M2 M3   M6  E2zij vroeg       ?
?of  ik hem   kendeTable 3.
Examples of topology slot fillers (Dutch andGerman).
Precedence between constituents landing inthe same slot is marked by "<".Slot FillerF1 Declarative main clause: SUBJect, Topic or Focus (one constituent only)Interrogative main clause: Wh-constituent,including Du.
of  and Ger.
ob 'whether'Complement clause: Wh-constituentM1 Main clause: HeaD verb Complement clause: CoMPLementizeRdat/om (Du.
), dass (Ger.
)M2 Subject NP (iff non-Wh), Direct Object     (iff personal pronoun)M3 Direct < Indirect OBJect (iff non-Wh)M4 PaRTicle (Du.
only)M5 Non-finite CoMPlement of Verb RaiserM6 Subordinate clause:   Du.
: Pre-INFinitive te < HeaD verbGer.
: PaRTicle < Pre-INFinitive zu < HeaDE1 Non-finite Complement of Verb Raiser (Du.
only)E2 Non-finite CoMP of VP Extraposition verb Finite ComplementThe subordinate clause in (7) features clauseunion, causing the auxiliary zal to intervene be-tween   the  Direct hem the latter's governor bellen.The left-peripheral sharing area may vary between4 and 6 slots (LS=4:6).
Because hem lands in M3,i.e.
in the shared area, it is promoted.
The remain-der of the lower topology, including the HeaD bel-len itself, occupies E1 ?
one of the options of thecomplement of a Verb Raiser.
The other option,with the complement in M5 (giving bellen zal) isalso allowed.
(7) ...dat ik hem zal bellenthat I him will phone'...that I will phone him'M1 M2  M3   M6 E1dat ik ?
zal ?
?
?hem   bellenSentence (8) illustrates the treatment of 'particlehopping'.
The positions marked by "?"
are gram-matical alternatives to the particle (op) positionmentioned in the example; no other positions areallowed.
Given LS=4:6 for complements of VerbRaisers, it follows that hem is obligatorily pro-moted into the higher topology:(8) ...dat ik hem ?
zou ?
hebben op gebeldthat I  him  would    have  up called'...that I would have called him up'M1 M2 M3 M4  M6 E1dat ik ?
zou ?
?
?hebben ?
?
?hem op  gebeldHowever, sharing of the fifth slot (M4) is optional.If this option is realized in the middle topology, theorder zou op hebben gebeld ensues.
If, in addition,the middle topology shares M4 with its governor,the string comes out as op zou hebben gebeld.The treatment of cross-serial dependencies isexemplified in (9).
In order to deal with this con-struction, we need to make an additional assump-tion about the order of constituents that land in thesame slot but originate from different levels in theclause hierarchy.
We stipulate that constituentsfrom more deeply embedded clauses trail behindconstituents belonging to higher clauses.
This or-dering can be determined locally within a slot if weequip every constituents in the hierarchy with anumerical 'clause depth' index (for instance, a Gornnumber; Gorn, 1967).
Given this index (not shownin the topology diagram accompanying (9)), theorder hem de fiets results.
(9)  ... dat ik hem de fiets wil helpen makenthat I   him the bike want-to help repair'... that I want to help him to repair the bike'M1 M2 M3   M6 E1dat ik ?
?
wil ?
?
?
?hem    helpen ?
?
?de fiets   makenWe now turn to German, concentrating onstructures usually labeled "VP Extraposition" (10)and "Third Construction" (11).
(10)  ... dass er uns zwingt es zu tunthat  he us  forces  it  to  do'... that he forces us to do it'M1 M2   M3   M6  E2dass er uns   zwingt  ?
?es    zu tun(11) a.
... dass er uns verspricht es zu tunthat  he  us   promises  it  to do'... that he promises us to do it'b.
... dass er es uns zu tun versprichtM1 M2 M3  M5 M6dass er ?
uns   ?
verspricht        ?
?es    zu tunc.
...dass er uns es zu tun versprichtM1 M2 M3  M5 M6dass er uns   ?
verspricht        ?es    zu tund.
...dass er es uns verspricht zu tunM1 M2 M3   M6  E2dass er ?
uns   verspricht  ?
?
?es    zu tune.
?
...dass er uns es verspricht zu tunM1 M2 M3   M6  E2dass er uns ?
verspricht  ?
?
?es   zu tunThe verb zwingen allows its complement to shareslot F1 only (LS=1).
This prevents promotion ofthe Direct OBJect es.
Third Construction verbs likeversprechen allow a great deal of variation in thesize of the left-peripherally shared topology area(LS=1:6), thereby licensing optional promotion ofes.
However, since es is a personal pronoun, it onlytakes M2 as its landing site (see Table 3).
The lat-ter constraint is violated in (11e).5.
DiscussionWe have shown that the introduction of topologieswith a fixed number of slots, in conjunction withcross-clause lateral topology sharing, enables asimple treatment of word order and movement(promotion) in complement structures of the threetarget languages.
The considerable within- and be-tween-language variation typical of these construc-tions could be analyzed as resulting from differentsettings of a small number of quantitative parame-ters, in particular the size of shared areas.
Weclaim that our approach is conducive to theoreticalparsimony (and, presumably, computational effi-ciency).
For instance, HPSG-style treatments ofWh-movement and Clause Union typically invokevery different types of mechanisms (e.g., theSLASH or GAP feature for WH-movement, andargument composition for Clause Union; cf.
Sag &Wasow, o.c., and Kathol o.c.
).Elsewhere we have provided a more fine-grained  discussion of our approach and its psycho-linguistic motivation (Kempen & Harbusch, inpress; forthcoming).
Future study is needed to findout whether the PG approach generalizes to otherlanguages.Finally, we refer to the PG sentence generatorfor Dutch which was implemented by Camiel vanBreugel.
It covers the ordering phenomena de-scribed here and in Kempen & Harbusch (forth-coming) and runs under Java-enabled Internetbrowsers (www.liacs.nl/~cvbreuge/pgw).
Vosse &Kempen (2000) describe a computational model ofhuman syntactic parsing based on a PG-like for-malism.ReferencesGORN, S. (1967).
Explicit Definition and LinguisticDominoes.
Systems and Computer Science.
To-ronto: University of Toronto Press.HARBUSCH, K. & KEMPEN, G. (2000).
Complexityof linear order computation in PerformanceGrammar, TAG and HPSG.
In: Proceedings ofFifth International Workshop on Tree AdjoiningGrammars and Related Formalisms (TAG+5),University of Paris 7, May 2000.JOSHI, A.K.
& SCHABES, Y.
(1997).
Tree Adjoin-ing Grammars.
In: Rozenberg, G. & Salomaa, A.(Eds.
), Handbook of formal languages (Vol.
3).Berlin: Springer.KATHOL, A.
(2000).
Linear Syntax.
New York:Oxford University Press.KEMPEN, G. & HARBUSCH, K. (in press).
Wordorder scrambling as a consequence of incre-mental sentence production.
In: Haertl, H., Olsen,S.
& Tappe, H.
(Eds.
), The syntax-semantics in-terface: Linguistic structures and processes.
Ber-lin: De Gruyter.KEMPEN, G. & HARBUSCH, K. (forthcoming).Dutch and German verb clusters in PerformanceGrammar.
In: Seuren, P. & Kempen, G.
(Eds.
),Verb clusters in Dutch and German.
Amsterdam:Benjamins.SAG, I.A.
& WASOW, T. (1999).
Syntactic theory:a formal introduction.
Stanford CA: CSLI Publi-cations.VOSSE, T. & KEMPEN, G. (2000).
Syntactic struc-ture assembly in human parsing: A computationalmodel based on competitive inhibition and alexicalist grammar.
Cognition, 75, 105-143.
