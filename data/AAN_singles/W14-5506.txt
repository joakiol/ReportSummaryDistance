Proceedings of the 5th Workshop on South and Southeast Asian NLP, 25th International Conference on Computational Linguistics, pages 43?49,Dublin, Ireland, August 23-29 2014.A hybrid approach for automatic clause boundary identification in HindiRahul Sharma, Soma PaulLanguage Technology Research Centre, IIIT-Hyderabad, Indiarahul.sharma@research.iiit.ac.in, soma@iiit.ac.inAbstractA complex sentence, divided into clauses, can be analyzed more easily than the complex sen-tence itself.
We present here, the task of clauses identification in Hindi text.
To the best of ourknowledge, not much work has been done on clause boundary identification for Hindi, whichmakes this task more important.
We have built a Hybrid system which gives 90.804% F1-scoresand 94.697% F1-scores for identification of clauses?
start and end respectively.1 IntroductionClause is the minimal grammatical unit which can express a proposition.
It is a sequential group ofwords, containing a verb or a verb group(verb and its auxiliary), and its arguments which can be explicitor implicit in nature (Ram and Devi, 2008) .
This makes clause an important unit in language grammarsand emphasis the need to identify and classify them as part of linguistic studies.Analysis and processing of complex sentences is a far more challenging task as compared to a simplesentence.
NLP applications often perform poorly as the complexity of the sentence increases.
?It is im-possible, to process a complex sentence if its clauses are not properly identified and classified accordingto their syntactic function in the sentence?
(Leffa, 1998).
Further, identifying clauses, and processingthem separately are known to do better in many NLP tasks.
The performance of many NLP systems likeMachine Translation, Parallel corpora alignment, Information Extraction, Syntactic parsing, automaticsummarization and speech applications etc improves by introducing clause boundaries in a sentence (e.g.,Ejerhed, 1988; Abney, 1990; Leffa, 1998; Papageorgiou, 1997; Gadde et al., 2010).We present a hybrid method which comprises of Conditional random fields(CRFs) (Lafferty et al., 2001)based statistical learning followed by some rules to automatically determine ?clause?
boundaries (be-ginnings and ends) in complex or compound sentences.
CRFs is a framework for building undirectedprobabilistic graphical models to segment and label sequence data (Lafferty et al., 2001).
In past, thisframework has proved to be successful for sequence labeling task (Sha and Pereira, 2003; McCallum andLi, 2003).
Van Nguyen et al.
(2007) used CRFs for clause splitting task with some linguistic informationgiving 84.09% F1-score.Our system has minimum dependency on linguistic resources,only part of speech (POS) and chunkinformation of lexical items is used with a fair performance of the system.
As far as we know, not muchwork has been done on clause boundary identification for Hindi and this makes this task more significant.This paper is structured as follows: In Section 2, we discuss the related works that has been done earlieron clause identification.
Section 3 describes the creation of dataset for various system use.
In Section4, we talk about methodology of our system.
Section 5 outlines the system performance.
In section 6,some issues related clause identification are discussed.
In Section 7, we conclude and talk about futureworks in this area.This work is licensed under a Creative Commons Attribution 4.0 International Licence.
Page numbers and proceedings footerare added by the organisers.
Licence details: http://creativecommons.org/licenses/by/4.0/432 Related worksStudies in identifying clauses date back to (Ejerhed, 1988) work, where they showed how automaticclause boundary identification in discourse can benefit a parser?s performance.
However her experimentscould detect only basic clauses.
Later (Abney, 1990) used clause filter as part of his CASS parser.
(Papageorgiou, 1997) used hand crafted rules to identify clause boundaries in a text.
(Leffa, 1998) isanother rule based method which was implemented in an English-Portuguese MT system.Some more recent works in this area are: (Puscasu, 2004), in which she proposed a multilingualmethod of combining language independent ML techniques with language specific rules to detectclause boundaries in unrestricted texts.
The rules identify the finite verbs and clause boundaries notincluded in learning process.
(Ram and Devi, 2008) proposed a hybrid based approach for detectingclause boundaries in a sentence.
They have used a CRF based system which uses different linguisticcues.
After identifying the clause boundaries they run an error analyzer module to find false boundarymarkings, which are then corrected by the rule based system, built using linguistic clues.
(Ghosh etal., 2010) is another rule based system for clause boundary identification for Bengali, where they usemachine learning approach for clause classification and dependency relations between verb and itsargument to find clause boundaries.
Dhivya et al.
(2012) use dependency trees from maltparser andthe dependency tag-set with 11 tags to identify clause boundaries.
Similar to (Dhivya et al., 2012),Sharma et al.
(2013) showed how implicit clause information present in dependency trees can be used toextract clauses in sentences.
Their system have reported 94.44% accuracy for Hindi.Gadde et al.
(2010)reported improvement in parser performance by introducing automatic clause information in a sentencefor Hindi in ?Improving data driven dependency parsing using clausal information?.
However their ap-proach for identifying clause information has not been discussed.
Thus a comparison is not possible here.3 DatasetIn Hindi, We don?t have any data available annotated with clause boundary, So to generate clause anno-tated corpora we have used (Sharma et al., 2013) technique where they have showed how implicit clauseinformation present in dependency trees can be used to extract clauses in sentences.
By this techniquewe have automatically generated 16000 sentences of Hindi treebank (Palmer et al., 2009) marked withclause boudaries.
Out of which, 14500 sentences were taken as training set, 500 for development setand remaining 1000 sentences for testing set.
As these sentences were generated automatically there arechances of noises in form of wrongly marked clause boundaries, so for proper evaluation of the system,we have manually corrected the wrongly marked clauses in development and testing sets.4 MethodologyWe propose a hybrid system which identifies the clause(s) in the input sentence and marks the ?clausestart position?
(CSP) and ?clause end position?
(CEP) with brackets.Hindi usually follows the SOV word order, so ends of the clauses can be found by just using verb infor-mation, in most of the cases.
The language also has explicit relative pronouns, subordinating conjuncts,coordinate conjunctions etc.
which serve as cues that help to identify clause boundaries of the clauses.Apart from the lexical cues we have also used POS tag and chunk information to built our system.Our system comprise of two main modules; first modules is stochastic model which have been trainedon 14500 sentences, and second module which is built using hand crafted rules.4.1 Stochastic ModelsWe have used two techniques to built two different models; 1) step-by-step model and 2) merged model,using CRF machine learning approach.
Both the models take word, word?s POS tag and its suffix asword?s features for training.
Table (1) shows the common features used for training models.
Thesefeature are syntactic in nature, and relative pronoun, verb, conjunctions etc.
plays important role inidentifying boundaries.
suffixes help to learn morphological feature of the word.44Present word?s Lexicon, POS tag, last character, last two character, and last three characterPrevious four words?
Lexicon and POS tagsNext four words?
Lexicon and POS tagsNext three words?
last character, last two character, last three characterTable 1: Features4.1.1 step-by-step modelThis model comprises of two models; end model and start model.
First one identifies the end of a clauseand then later one takes the output of former model as input and identifies the start of the clause.
In thistechnique we can notice that both models have to only mark whether a word is a boundary of a clause ornot.
For example ?end model?
has to check whether a given word is a end(boundary) of a clause or not.Below example (1) explains this further.
(1) raamRamjisnewhokhaanaafoodkhaayaaeat+pastgharhomegayaaago+past?Raam who ate food, went home?In example (1), end model first marks ?gayaa?
and ?khaayaa?
as the end of clause.
Then start model takesthis additional information also as the feature, and marks ?raam?
and ?jisne?
as the start of clause.4.1.2 Merged ModelThis model marks the clauses?
start and end in one go.
Unlike the step-by-step model, it check whethera word is clause?s start, clause?s end or none.
For above example (1), it will mark ?gayaa?
and ?khaayaa?as the end of clause, and ?raam?
and ?jisne?
as the start of clause respectively in one go.-- Keeping post-processing module(discussed below) same, we have evaluated our system using bothstochastic models separately, and observed, system with step-by-step model gives high F1-score valuethan the system with merged model.4.2 Post-processing ModuleThis module processes the output from stochastic model, and mark the boundaries of clauses in sen-tences.
As we know, in a sentence CSPs should always be equal to CEPs.
So on the basis of differencebetween CSPs and CEPs, we have formalized our rules.
Below is the description of rules used in thismodule.1.
Rules, when CSPs are greater than CEPs are:(a) Check for ?ki?
complement clause: The verb in a sentence which contain ?ki?
complimentclause is not the end of its clause whereas its end is same as of end of ?ki?
complement clause.Below example (2) will make this rule more clearer.
(2) raam neRam+argkahaasay+pastkithatvahahegharhomegayaago+past?Raam said that he went home?In this example (2), Stochastic models will mark ?raam?
and ?ki?
as the start of clause, and?gayaa?
as the end of clause, making CSPs more than the CEPs.
We can notice that ?gayaa?is the end for both the clauses in a sentence, so using this rule, we will add one more end ofclause to ?gayaa?
word.
The resultant sentence with clauses marked will be:( raam ne kahaa ( ki vaha ghar gayaa ) )(b) Check for finite verb: If a verb is finite and does not have any ?ki?
complement clause in itthen that verb should be marked as the end of clause.
So if this type verb is unmarked by thestochastic model then this rule will handle this.
(c) Check for non-finite verb: If a non-finite verb is present in a sentence and word next to it doesnot mark start of another clause then this rule will mark that word as the start of that clause.45?It should be noted that rules are applied in specific order, and once the number of CSPs and CEPsbecome same at any point of rule we stop applying more rules from this type where CSPs and CEPsare not same.2.
Rules, When CEPs are greater than CSPs are:(a) If there is a ?non-finite?
verb in a sentence then we check for its start and mark them usingregular expressions if not marked by stochastic models.
for example:(3) raamRam+argkhaanaafoodkhakarahaving eatengharhomegayaago+past?having eaten food, Ram wen home?In example (3), if stochastic models does not able to mark ?khaanaa?
as the start of non-finiteclause ?khaanaa khakara?.
Then this rules will capture these type of situations and add a newCSP in a sentence.
(b) If a word before conjunction, not a verb, is marked as end of a clause then this rule will removethat end, reducing number of CEP.3.
Rules, when CSPs and CEPs are same:(a) If there are more than one clauses in one single ?ki?
complement clause than this rules marksone bigger boundary as clause which will contain all the embedded clauses.
For example:(4) raam neRam+argkahaasay+pastkithatshaam neShaam+argkhaanaafoodkhaayaaeat+pastaurandpaaniwaterpiyaadrink+past?Raam said that Shaam ate food and drank water?The situation discussed in this rule can be observed in example (4).
The system output beforethis rule may be,?
( raam ne kahaa ( ki shaam ne khaanaa khaayaa ) aur ( paani piyaa ) )?, Which this rule willconvert to?
( raam ne kahaa ( ki ( shaam ne khaanaa khaayaa ) aur ( paani piyaa ) ) )??
Having these rules applied, the output sentence will contain start and end of clauses in a sentence.5 Evaluation and ResultsAs mentioned earlier we have used (Sharma et al., 2013) technique to automatically generate 16000sentences of Hindi treebank marked with clause boundaries.
Out of these 16000 sentences, a set of 1500sentences with average length of 16 words was randomly selected.
This set was then manually correctedat the level of clause boundary for accurate evaluation of the system.
It should be noted that this setwas not used in training of the models.
Further we have divided this set into two set; development setwhich consist of 500 sentences and testing set which consist of 1000 sentences.
We have evaluated thesystem with both models (step-by-step and merged) along with post-processing module, and we havenoticed system with step-by-step model performs better than the system with merged model.
Table (2)and Table (3) show the results on development set and testing set respectively.Model Type Start of clause End of clausePrecision Recall F1-measure Precision Recall F1-measureStep-by-step model 91.493 89.816 90.646 95.129 93.482 94.298Merged Model 92.171 89.918 91.030 90.927 92.871 91.888Table 2: Results on development set.46Model Type Start of clause End of clausePrecision Recall F1-measure Precision Recall F1-measureStep-by-step model 92.051 89.590 90.804 95.969 93.458 94.697Merged Model 91.779 88.907 90.320 90.919 92.263 91.586Table 3: Results on testing set.6 Error Analysis and DiscussionWhile evaluating our both systems (system with step-by-step model and system with merged model), wecome across some constructions which were not handled by them.
which are:1.
Ellipses of verb: when a verb is omitted in a sentence then it is not possible for our system to markboundaries correctly.
For example:(5) raam neRam+ergkitaabbook<V><read+past>aurandmaineI+ergkavitaapoempadhiiread+past?Ram read a book and I read a poem?In example (5), there is an ellipses of the verb ?padhi?
in the clause ?raam ne kitaab?.
Thus, thoughthe sentence has two clauses?
?raam ne kitaab?
and ?maine kavitaa padhii?, our system incorrectlyidentifies the whole sentence as one clause due to the ellipses of the verb (denoted by <V>).2.
Scrambling in the usual word order, which is SOV in Hindi, is likely to induce incorrect identifica-tion of the clauses in our system.
For Example:(6) gharhomegayaago+pastraam,Ram,vahahebolaa.say+past?He said Ram went home?In example (6), Our system is unable to identify the clause boundaries correctly for any of the twoclauses, ?ghar gayaa raam?
and ?ghar gayaa raam,vaha bolaa?, due to scrambling in the word order.Its output for the sentence is ?
(ghar) (gayaa raam, vaha bolaa)?, though the output should be ?
( (ghar(gayaa raam,) vaha bolaa)?.3.
Missing subordinate conjunction ?ki?
in a sentence also leads to incorrect identification of clauseboundaries by our system.
For example:(7) raam neRam+ergkahaasay+pasttumyougharhomejaaogo?Ram said you go home?The missing subordinate conjunction ?ki?
in example (7) leads to incorrect marking of the clauseboundaries as: ?
(raam ne kahaa ) ( tum ghar jaao)?.
The correct clause boundaries for the sentenceare ?
(raam ne kahaa ( tum ghar jaao) )?.4.
Start of non-finite clause: As we don?t find any syntactic cues for start of non-finite clause, oursystems does not perform much efficiently in finding start of non-finite clauses.
For example:(8) abnowhumwealagdifferentmaslonmatters/topicsparaonkhulkaraopenlybaatchitdiscussionkar rahe haindo+conti+present?Now we are discussing openly on different matters?47Both system marks ?khulkara?
and ?kar rahe hain?
verbs as the end of clauses accurately but start ofnon-finite clause which is ?alag?
is not identified correctly.
Output by the systems is, ?
( ab hum alagmaslon para khulkara) (baatchit kar rahe hain )?
, where as the correct output is, ?
( ab hum ( alagmaslon para khulkara) baatchit kar rahe hain )?-- Overall we observed that the system with step-by-step model which statistically first identifies end andthen start, followed by rules performs better than the system with merged model.7 Conclusion and Future WorkWe have discussed our work on clause boundary identification in Hindi and the issues pertaining to them,in the course of this paper.
Clausal information in a sentence is known to improve the performance ofmany NLP systems, thus the need for this task.
We observed that the system with step-by-step modelwhich statistically, first identifies end and then start of clauses, followed by rules, performs better than thesystem with merged model.
The step-by-step model system, showing a satisfactory performance in termsof F1 scores of 91.53% for clause boundary identification, and the merged model system showing 80.63%for the same.
Since this task is a promising resource for NLP systems such as Machine Translation, Text-to-Speech and so on, and can contribute to their better performance, applying this system for bettermentof NLP tools seems quite a favorable prospect as a future work.
(Gadde et al., 2010) report that evenminimal clause boundary identification information leverages the performance of their system.
We wouldlike to test the performance of our system in terms of leveraging the performance of other NLP systemsReferencesSteven Abney.
1990.
Rapid incremental parsing with repair.
pages 1?9.R Dhivya, V Dhanalakshmi, M Anand Kumar, and KP Soman.
2012.
Clause boundary identification for tamillanguage using dependency parsing.
pages 195?197.
Springer.Eva I Ejerhed.
1988.
Finding clauses in unrestricted text by finitary and stochastic methods.
pages 219?227.Association for Computational Linguistics.Phani Gadde, Karan Jindal, Samar Husain, Dipti Misra Sharma, and Rajeev Sangal.
2010.
Improving data drivendependency parsing using clausal information.
pages 657?660.
Association for Computational Linguistics.Aniruddha Ghosh, Amitava Das, and Sivaji Bandyopadhyay.
2010.
Clause identification and classification inbengali.
In 23rd International Conference on Computational Linguistics, page 17.John Lafferty, Andrew McCallum, and Fernando CN Pereira.
2001.
Conditional random fields: Probabilisticmodels for segmenting and labeling sequence data.Vilson J Leffa.
1998.
Clause processing in complex sentences.
volume 1, pages 937?943.Andrew McCallum and Wei Li.
2003.
Early results for named entity recognition with conditional random fields,feature induction and web-enhanced lexicons.
In Proceedings of the seventh conference on Natural languagelearning at HLT-NAACL 2003-Volume 4, pages 188?191.
Association for Computational Linguistics.Martha Palmer, Rajesh Bhatt, Bhuvana Narasimhan, Owen Rambow, Dipti Misra Sharma, and Fei Xia.
2009.Hindi syntax: Annotating dependency, lexical predicate-argument structure, and phrase structure.
pages 14?17.Harris V Papageorgiou.
1997.
Clause recognition in the framework of alignment.
pages 417?426.Georgiana Puscasu.
2004.
A multilingual method for clause splitting.R Vijay Sundar Ram and Sobha Lalitha Devi.
2008.
Clause boundary identification using conditional randomfields.
In Computational Linguistics and Intelligent Text Processing, pages 140?150.
Springer.Fei Sha and Fernando Pereira.
2003.
Shallow parsing with conditional random fields.
In Proceedings of the2003 Conference of the North American Chapter of the Association for Computational Linguistics on HumanLanguage Technology-Volume 1, pages 134?141.
Association for Computational Linguistics.48Rahul Sharma, Soma Paul, Riyaz Ahmad Bhat, and Sambhav Jain.
2013.
Automatic clause boundary annotationin the hindi treebank.Vinh Van Nguyen, Minh Le Nguyen, and Akira Shimazu.
2007.
Using conditional random fields for clause split-ting.
Proceedings of The Pacific Association for Computational Linguistics, University of Melbourne Australia.49
