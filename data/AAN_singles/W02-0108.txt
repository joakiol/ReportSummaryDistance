Using GATE as an Environment for Teaching NLPKalina Bontcheva, Hamish Cunningham, Valentin Tablan, Diana Maynard, Oana HamzaDepartment of Computer ScienceUniversity of SheffieldSheffield, S1 4DP, UK{kalina,hamish,valyt,diana,oana}@dcs.shef.ac.ukAbstractIn this paper we argue that the GATEarchitecture and visual developmentenvironment can be used as an effec-tive tool for teaching language engi-neering and computational linguistics.Since GATE comes with a customis-able and extendable set of components,it allows students to get hands-on ex-perience with building NLP applica-tions.
GATE also has tools for cor-pus annotation and performance eval-uation, so students can go through theentire application development processwithin its graphical development en-vironment.
Finally, it offers com-prehensive Unicode-compliant multi-lingual support, thus allowing stu-dents to create components for lan-guages other than English.
Unlikeother NLP teaching tools which weredesigned specifically and only for thispurpose, GATE is a system developedfor and used actively in language en-gineering research.
This unique dual-ity allows students to contribute to re-search projects and gain skills in em-bedding HLT in practical applications.1 IntroductionWhen students learn programming, they havethe benefit of integrated development environ-ments, which support them throughout the en-tire application development process: from writ-ing the code, through testing, to documenta-tion.
In addition, these environments offer sup-port and automation of common tasks, e.g., userinterfaces can be designed easily by assemblingthem visually from components like menus andwindows.
Similarly, NLP and CL students canbenefit from the existence of a graphical devel-opment environment, which allows them to gethands-on experience in every aspect of develop-ing and evaluating language processing modules.In addition, such a tool would enable students tosee clearly the practical relevance and need forlanguage processing, by allowing them to exper-iment easily with building NLP-powered (Web)applications.This paper shows how an existing infrastruc-ture for language engineering research ?
GATE(Cunningham et al, 2002a; Cunningham, 2002)?
has been used successfully as an NLP teach-ing environment, in addition to being a suc-cessful vehicle for building NLP applicationsand reusable components (Maynard et al, 2002;Maynard et al, 2001).
The key features ofGATE which make it particularly suitable forteaching are:?
The system is designed to separate cleanlylow-level tasks such as data storage, datavisualisation, location and loading of com-ponents and execution of processes from thedata structures and algorithms that actu-ally process human language.
In this way,the students can concentrate on studyingand/or modifying the NLP data and algo-rithms, while leaving the mundane tasks toGATE.July 2002, pp.
54-62.
Association for Computational Linguistics.Natural Language Processing and Computational Linguistics, Philadelphia,Proceedings of the Workshop on Effective Tools and Methodologies for Teaching?
Automating measurement of performanceof language processing components and fa-cilities for the creation of the annotated cor-pora needed for that.?
Providing a baseline set of language pro-cessing components that can be extendedand/or replaced by students as required.These modules typically separate clearlythe linguistic data from the algorithms thatuse it, thus allowing teachers to presentthem separately and the students to adaptthe modules to new domains/languages byjust modifying the linguistic data.?
It comes with exhaustive documenta-tion, tutorials, and online movie demon-strations, available on its Web site(http://gate.ac.uk).GATE and its language processing moduleswere developed to promote robustness and scala-bility of NLP approaches and applications, withan emphasis on language engineering research.Therefore, NLP/LE courses based on GATEoffer students the opportunity to learn fromnon-toy applications, running on big, realisticdatasets (e.g., British National corpus or newscollected by a Web crawler).
This unique re-search/teaching duality also allows students tocontribute to research projects and gain skills inembedding HLT in practical applications.2 GATE from a TeachingPerspectiveGATE (Cunningham et al, 2002a) is an archi-tecture, a framework and a development envi-ronment for human language technology mod-ules and applications.
It comes with a set ofreusable modules, which are able to perform ba-sic language processing tasks such as POS tag-ging and semantic tagging.
These eliminate theneed for students to re-implement useful algo-rithms and modules, which are pre-requisitesfor completing their assignments.
For exam-ple, Marin Dimitrov from Sofia University suc-cessfully completed his masters?
degree by im-plementing a lightweight approach to pronom-inal coreference resolution for named entities1,which uses GATE?s reusable modules for theearlier processing and builds upon their results(see Section 4).For courses where the emphasis is more onlinguistic annotation and corpus work, GATEcan be used as a corpus annotation environment(see http://gate.ac.uk/talks/tutorial3/).
Theannotation can be done completely manuallyor it can be bootstrapped by running someof GATE?s processing resources over the cor-pus and then correcting/adding new annota-tions manually.
These facilities can also be usedin courses and assignments where the studentsneed to learn how to create data for quantitativeevaluation of NLP systems.If evaluated against the requirements forteaching environments discussed in (Loper andBird, 2002), GATE covers them all quite well.The graphical development environment andthe JAPE language facilitate otherwise difficulttasks.
Inter-module consistency is achieved byusing the annotations model to hold languagedata, while extensibility and modularity are thevery reason why GATE has been successfullyused in many research projects (Maynard et al,2000).
In addition, GATE also offers robustnessand scalability, which allow students to experi-ment with big corpora, such as the British Na-tional Corpus (approx.
4GB).
In the followingsubsections we will provide further detail aboutthese aspects of GATE.2.1 GATE?s Graphical DevelopmentEnvironmentGATE comes with a graphical development en-vironment (or GATE GUI) that facilitates stu-dents in inspecting the language processing re-sults and debugging the modules.
The envi-ronment has facilities to view documents, cor-pora, ontologies (including the popular Prote?ge?editor (Noy et al, 2001)), and linguistic data(expressed as annotations, see below), e.g., Fig-ure 1 shows the document viewer with someannotations highlighted.
It also shows the re-source panel on the left with all loaded appli-1The thesis is available athttp://www.ontotext.com/ie/thesis-m.pdfFigure 1: GATE?s visual development environmentcations, language resources, and processing re-sources (i.e., modules).
There are also view-ers/editors for complex linguistic data like coref-erence chains (Figure 2) and syntax trees (Fig-ure 3).
New graphical components can be in-tegrated easily, thus allowing lecturers to cus-tomise the environment as necessary.
TheGATE team is also developing new visualisationmodules, especially a visual JAPE rule develop-ment tool.2.2 GATE API and Data ModelThe central concept that needs to be learned bythe students before they start using GATE isthe annotation data model, which encodes alllinguistic data and is used as input and out-put for all modules.
GATE uses a single uni-fied model of annotation - a modified form ofthe TIPSTER format (Grishman, 1997) whichhas been made largely compatible with the Atlasformat (Bird and Liberman, 1999).
Annotationsare characterised by a type and a set of featuresrepresented as attribute-value pairs.
The anno-tations are stored in structures called annotationsets which constitute independent layers of an-notation over the text content.
The annotationsformat is independent of any particular linguis-tic formalism, in order to enable the use of mod-ules based on different linguistic theories.
Thisgenerality enables the representation of a wide-variety of linguistic information, ranging fromvery simple (e.g., tokeniser results) to very com-Figure 2: The coreference chains viewerplex (e.g., parse trees and discourse representa-tion: examples in (Saggion et al, 2002)).
Inaddition, the annotation format allows the rep-resentation of incomplete linguistic structures,e.g., partial-parsing results.
GATE?s tree view-ing component has been written especially tobe able to display such disconnected and incom-plete trees.GATE is implemented in Java, which makesit easier for students to use it, because typi-cally they are already familiar with this lan-guage from their programming courses.
TheGATE API (Application Programming Inter-face) is fully documented in Javadoc and alsoexamples are given in the comprehensive UserGuide (Cunningham et al, 2002b).
However,students generally do not need to familiarisethemselves with Java and the API at all, be-cause the majority of the modules are based onGATE?s JAPE language, so customisation of ex-isting and development of new modules only re-quires knowledge of JAPE and the annotationmodel described above.JAPE is a version of CPSL (Common PatternSpecification Language) (Appelt, 1996) and isused to describe patterns to match and annota-tions to be created as a result (for further de-tails see (Cunningham et al, 2002b)).
Once fa-miliar with GATE?s data model, students wouldnot find it difficult to write the JAPE pattern-based rules, because they are effectively regularexpressions, which is a concept familiar to mostFigure 3: The syntax tree viewer, showing a par-tial syntax tree for a sentence from a telecomnews textCS students.An example rule from an existing named en-tity recognition grammar is:Rule: Company1Priority: 25(({Token.orthography == upperInitial})+{Lookup.kind == companyDesignator}):companyMatch-->:companyMatch.NamedEntity ={kind = "company", rule = "Company1"}The rule matches a pattern consisting of anykind of word, which starts with an upper-casedletter (recognised by the tokeniser), followed byone of the entries in the gazetteer list for com-pany designators (words which typically indi-cate companies, such as ?Ltd.?
and ?GmBH?).
Itthen annotates this pattern with the entity type?NamedEntity?, and gives it a feature ?kind?with value company and another feature ?rule?with value ?Company1?.
The rule feature issimply used for debugging purposes, so it is clearwhich particular rule has fired to create the an-notation.The grammars (which are sets of rules) do notneed to be compiled by the students, becausethey are automatically analysed and executed bythe JAPE Transducer module, which is a finite-Figure 4: The visual evaluation toolstate transducer over the annotations in the doc-ument.
Since the grammars are stored in files ina plain text format, they can be edited in anytext editor such as Notepad or Vi.
The rule de-velopment process is performed by the studentsusing GATE?s visual environment (see Figure 1)to execute the grammars and visualise the re-sults.
The process is actually a cycle, where thestudents write one or more rules, re-initialise thetransducer in the GATE GUI by right-clickingon it, then run it on the test data, check the re-sults, and go back to improving the rules.
Theevaluation part of this cycle is performed usingGATE?s visual evaluation tools which also pro-duce precision, recall, and f-measure automati-cally (see Figure 4).The advantage of using JAPE for the studentassignments is that once learned by the students,it enables them to experiment with a varietyof NLP tasks from tokenisation and sentencesplitter, to chunking, to template-based infor-mation extraction.
Because it does not need tobe compiled and supports incremental develop-ment, JAPE is ideal for rapid prototyping, sostudents can experiment with alternative ideas.Students who are doing bigger projects, e.g., afinal year project, might want to develop GATEmodules which are not based on the finite-statemachinery and JAPE.
Or the assignment mightrequire the development of more complex gram-mars in JAPE, in which case they might haveto use Java code on the right-hand side of therule.
Since such GATE modules typically onlyaccess and manipulate annotations, even thenthe students would need to learn only that partof GATE?s API (i.e., no more than 5 classes).Our experience with two MSc students ?
ParthaLal and Marin Dimitrov ?
has shown that theydo not have significant problems with using thateither.2.3 Some useful modulesThe tokeniser splits text into simple tokens,such as numbers, punctuation, symbols, andwords of different types (e.g.
with an initial capi-tal, all upper case, etc.).
The tokeniser does notgenerally need to be modified for different ap-plications or text types.
It currently recognisesmany types of words, whitespace patterns, num-bers, symbols and punctuation and should han-dle any language from the Indo-European groupwithout modifications.
Since it is available asopen source, one student assignment could beto modify its rules to cope with other languagesor specific problems in a given language.
The to-keniser is based on finite-state technology, so therules are independent from the algorithm thatexecutes them.The sentence splitter is a cascade of finite-state transducers which segments the text intosentences.
This module is required for the tag-ger.
Both the splitter and tagger are domain-and application-independent.
Again, the split-ter grammars can be modified as part of a stu-dent project, e.g., to deal with specifically for-matted texts.The tagger is a modified version of the Brilltagger, which assigns a part-of-speech tag toeach word or symbol.
To modify the tagger?sbehaviour, students will have to re-train it onrelevant annotated texts.The gazetteer consists of lists such as cities,organisations, days of the week, etc.
It not onlyconsists of entities, but also of names of usefulindicators, such as typical company designators(e.g.
?Ltd.?
), titles, etc.
The gazetteer lists arecompiled into finite state machines, which anno-tate the occurrence of the list items in the givendocument.
Students can easily extend the exist-ing lists and add new ones by double-clicking onthe Gazetteer processing resource, which bringsup the gazetteer editor if it has been installed,or using GATE?s Unicode editor.The JAPE transducer is the module thatruns JAPE grammars, which could be doingtasks like chunking, named entity recognition,etc.
By default, GATE is supplied with an NEtransducer which performs named entity recog-nition for English and a VP Chunker whichshows how chunking can be done using JAPE.An even simpler (in terms of grammar rulescomplexity) and somewhat incomplete NP chun-ker can be obtained by request from the firstauthor.The orthomatcher is a module, whose pri-mary objective is to perform co-reference, or en-tity tracking, by recognising relations betweenentities, based on orthographically matchingtheir names.
It also has a secondary role in im-proving named entity recognition by assigningannotations to previously unclassified names,based on relations with existing entities.2.4 Support for languages other thanEnglishGATE uses Unicode (Unicode Consortium,1996) throughout, and has been tested on a va-riety of Slavic, Germanic, Romance, and Indiclanguages.
The ability to handle Unicode data,along with the separation between data and al-gorithms, allows students to perform easily evensmall-scale experiments with porting NLP com-ponents to new languages.
The graphical devel-opment environment supports fully the creation,editing, and visualisation of linguistic data, doc-uments, and corpora in Unicode-supported lan-guages (see (Tablan et al, 2002)).
In order tomake it easier for foreign students to use theGUI, we are planning to localise its menus, er-ror messages, and buttons which currently areonly in English.2.5 Installation and ProgrammingLanguages SupportSince GATE is 100% Java, it can run on anyplatform that has a Java support.
To make iteasier to install and maintain, GATE comes withinstallation wizards for all major platforms.
Italso allows the creation and use of a site-wideGATE configuration file, so settings need onlybe specified once and all copies run by the stu-dents will have the same configuration and mod-ules available.
In addition, GATE allows stu-dents to have their own configuration settings,e.g., specify modules which are available onlyto them.
The personal settings override thosefrom GATE?s default and site-wide configura-tions.
Students can also easily install GATEon their home computers using the installationprogram.
GATE also allows applications to besaved and moved between computers and plat-forms, so students can easily work both at homeand in the lab and transfer their data and ap-plications between the two.GATE?s graphical environment comes config-ured by default to save its own state on exit,so students will automatically get their applica-tions, modules, and data restored automaticallythe next time they load GATE.Although GATE is Java-based, modules writ-ten in other languages can also be integratedand used.
For example, Prolog modules are eas-ily executable using the Jasper Java-Prolog link-ing library.
Other programming languages canbe used if they support Java Native Interface(JNI).3 Existing Uses of GATE forTeachingPostgraduates in locations as diverse as Bul-garia, Copenhagen and Surrey are using thesystem in order to avoid having to write sim-ple things like sentence splitters from scratch,and to enable visualisation and managementof data.
For example, Partha Lal at Impe-rial College is developing a summarisation sys-tem based on GATE and ANNIE as a final-year project for an MEng Degree in Comput-ing (http://www.doc.ic.ac.uk/?
pl98/).
His siteincludes the URL of his components and oncegiven this URL, GATE loads his software overthe network.
Another student project will bediscussed in more detail in Section 4.Our colleagues in the Universities of Ed-inburgh, UMIST in Manchester, and Sussex(amongst others) have reported using previousversions of the system for teaching, and the Uni-versity of Stuttgart produced a tutorial in Ger-man for the same purposes.
Educational users ofearly versions of GATE 2 include Exeter Univer-sity, Imperial College, Stuttgart University, theUniversity of Edinburgh and others.
In order tofacilitate the use of GATE as a teaching tool,we have provided a number of tutorials, onlinedemonstrations, and exhaustive documentationon GATE?s Web site (http://gate.ac.uk).4 An Example MSc ProjectThe goal of this work was to develop a corefer-ence resolution module to be integrated withinthe named entity recognition system providedwith GATE.
This required a number of tasks tobe performed by the student: (i) corpus anal-ysis; (ii) implementation and integration; (iii)testing and quantitative evaluation.The student developed a lightweight approachto resolving pronominal coreference for namedentities, which was implemented as a GATEmodule and run after the existing NE modulesprovided with the framework.
This enabled himalso to use an existing annotated corpus froman Information Extraction evaluation competi-tion and the GATE evaluation tools to establishhow his module compared with results reportedin the literature.
Finally, the testing process wasmade simple, thanks to GATE?s visualisation fa-cilities, which are already capable of displayingcoreference chains in documents.GATE not only allowed the student to achieveverifiable results quickly, but it also did not in-cur substantial integration overheads, becauseit comes with a bootstrap tool which automatesthe creation of GATE-compliant NLP modules.The steps that need to be followed are:2?
use the bootstrap tool to create an emptyJava module, then add the implementationto it.
A JAVA development environmentlike JBuilder and VisualCafe can be usedfor this and the next stages, if the studentsare familiar with them;?
compile the class, and any others that ituses, into a Java Archive (JAR) file (GATE2For further details and an example see (Cunninghamet al, 2002b).Figure 5: BootStrap Wizard Dialoguegenerates automatically a Makefile too, tofacilitate this process);?
write some XML configuration data for thenew resource;?
tell GATE the URL of the new JAR andXML files.5 Example TopicsSince GATE has been used for a wide range oftasks, it can be used for the teaching of a numberof topics.
Topics that can be covered in (part of)a course, based on GATE are:?
Language Processing, Language Engineer-ing, and Computational Linguistics: differ-ences, methodologies, problems.?
Architectures, portability, robustness, cor-pora, and the Web.?
Corpora, annotation, and evaluation: toolsand methodologies.?
Basic modules: tokenisation, sentence split-ting, gazetteer lookup.?
Part-of-speech tagging.?
Information Extraction: issues, tasks, rep-resenting linguistic data in the TIPSTERannotation format, MUC, results achieved.?
Named Entity Recognition.?
Coreference Resolution?
Template Elements and Relations?
Scenario Templates?
Parsing and chunking?
Document summarisation?
Ontologies and discourse interpretation?
Language generationWhile language generation, parsing, summari-sation, and discourse interpretation modules arenot currently distributed with GATE, they canbe obtained by contacting the authors.
Modulesfor text classification and learning algorithms ingeneral are to be developed in the near future.A lecturer willing to contribute any such mod-ules to GATE will be very welcome to do so andwill be offered integration support.6 Example AssignmentsThe availability of example modules for a vari-ety of NLP tasks allows students to use themas a basis for the development of an entire NLPapplication, consisting of separate modules builtduring their course.
For example, let us considertwo problems: recognising chemical formulae intexts and making an IE system that extractsinformation from dialogues.
Both tasks requirestudents to make changes in a number of existingcomponents and also write some new grammars.Some example assignments for the chemicalformulae recognition follow:?
tokeniser : while it will probably work wellfor the dialogues, the first assignment wouldbe to make modifications to its regular ex-pression grammar to tokenise formulae likeH4ClO2 and Al-Li-Ti in a more suitableway.?
gazetteer : create new lists containing newuseful clues and types of data, e.g., allchemical elements and their abbreviations.?
named entity recognition: write a newgrammar to be executed by a new JAPEtransducer module for the recognition of thechemical formulae.Some assignments for the dialogue applicationare:?
sentence splitter : modify it so that it splitscorrectly dialogue texts, by taking into ac-count the speaker information (because dia-logues often do not have punctuation).
Forexample:A: Thank you, can I have your full name?C: Err John SmithA: Can you also confirm your postcode andtelephone number for security?C: Erm it?s 111 111 11 11A: Postcode?C: AB11 1CD?
corpus annotation and evaluation: use thedefault named entity recogniser to boot-strap the manual annotation of the testdata for the dialogue application; evaluatethe performance of the default NE gram-mars on the dialogue texts; suggest possi-ble improvements on the basis of the infor-mation about missed and incorrect anno-tations provided by the corpus benchmarktool.?
named entity recognition: implement theimprovements proposed at the previousstep, by changing the default NE grammarrules and/or by introducing rules specific toyour dialogue domain.Finally, some assignments which are not con-nected to any particular domain or application:?
chunking : implement an NP chunker usingJAPE.
Look at the VP chunker grammarsfor examples.?
template-based IE : experiment with ex-tracting information from the dialogues us-ing templates and JAPE (an example im-plementation will be provided soon).?
(for a group of students) building NLP-enabled Web applications: embed one of theIE applications developed so far into a Webapplication, which takes a Web page andreturns it annotated with the entities.
Usehttp://gate.ac.uk/annie/index.jsp as an ex-ample.In the near future it will be also possible tohave assignments on summarisation and genera-tion, but these modules are still under develop-ment.
It will be possible to demonstrate parsingand discourse interpretation, but because thesemodules are implemented in Prolog and some-what difficult to modify, assignments based onthem are not recommended.
However, othersuch modules, e.g., those from NLTK (Loperand Bird, 2002), can be used for such assign-ments.7 ConclusionsIn this paper we have outlined the GATE sys-tem and its key features that make it an effectivetool for teaching NLP and CL.
The main advan-tage is that GATE is a framework and a graph-ical development environment which is suitableboth for research and teaching, thus making iteasier to connect the two, e.g., allow a student tocarry out a final-year project which contributesto novel research, carried out by their lectur-ers.
The development environment comes witha comprehensive set of tools, which cover theentire application development cycle.
It can beused to provide students with hands-on experi-ence in a wide variety of tasks.
Universities will-ing to use GATE as a teaching tool will benefitfrom the comprehensive documentation, severaltutorials, and online demonstrations.ReferencesD.E.
Appelt.
1996.
The Common Pattern Specifi-cation Language.
Technical report, SRI Interna-tional, Artificial Intelligence Center.S.
Bird and M. Liberman.
1999.
A Formal Frame-work for Linguistic Annotation.
Technical Re-port MS-CIS-99-01, Department of Computer andInformation Science, University of Pennsylvania.http://xxx.lanl.gov/abs/cs.CL/9903003.H.
Cunningham, D. Maynard, K. Bontcheva, andV.
Tablan.
2002a.
GATE: A framework andgraphical development environment for robustNLP tools and applications.
In Proceedings of the40th Anniversary Meeting of the Association forComputational Linguistics.H.
Cunningham, D. Maynard, K. Bontcheva,V.
Tablan, and C. Ursu.
2002b.
The GATE UserGuide.
http://gate.ac.uk/.H.
Cunningham.
2002.
GATE, a General Archi-tecture for Text Engineering.
Computers and theHumanities, 36:223?254.R.
Grishman.
1997.
TIPSTER Architec-ture Design Document Version 2.3.
Techni-cal report, DARPA.
http://www.itl.nist.gov/-div894/894.02/related projects/tipster/.E.
Loper and S. Bird.
2002.
NLTK: The NaturalLanguage Toolkit.
In ACL Workshop on EffectiveTools and Methodologies in Teaching NLP.D.
Maynard, H. Cunningham, K. Bontcheva,R.
Catizone, George Demetriou, RobertGaizauskas, Oana Hamza, Mark Hepple, PatrickHerring, Brian Mitchell, Michael Oakes, WimPeters, Andrea Setzer, Mark Stevenson, ValentinTablan, Christian Ursu, and Yorick Wilks.
2000.A Survey of Uses of GATE.
Technical ReportCS?00?06, Department of Computer Science,University of Sheffield.D.
Maynard, V. Tablan, C. Ursu, H. Cunningham,and Y. Wilks.
2001.
Named Entity Recognitionfrom Diverse Text Types.
In Recent Advancesin Natural Language Processing 2001 Conference,Tzigov Chark, Bulgaria.D.
Maynard, V. Tablan, H. Cunningham, C. Ursu,H.
Saggion, K. Bontcheva, and Y. Wilks.
2002.Architectural elements of language engineering ro-bustness.
Journal of Natural Language Engineer-ing ?
Special Issue on Robust Methods in Analysisof Natural Language Data.
forthcoming.N.F.
Noy, M. Sintek, S. Decker, M. Crubzy, R.W.Fergerson, and M.A.
Musen.
2001.
Creating Se-mantic Web Contents with Prote?ge?-2000.
IEEEIntelligent Systems, 16(2):60?71.H.
Saggion, H. Cunningham, K. Bontcheva, D. May-nard, C. Ursu, O. Hamza, and Y. Wilks.
2002.Access to Multimedia Information through Mul-tisource and Multilanguage Information Extrac-tion.
In 7th Workshop on Applications of NaturalLanguage to Information Systems (NLDB 2002),Stockholm, Sweden.V.
Tablan, C. Ursu, K. Bontcheva, H. Cunningham,D.
Maynard, O. Hamza, Tony McEnery, PaulBaker, and Mark Leisher.
2002.
A unicode-basedenvironment for creation and use of language re-sources.
In Proceedings of 3rd Language Resourcesand Evaluation Conference.
forthcoming.Unicode Consortium.
1996.
The Unicode Standard,Version 2.0.
Addison-Wesley, Reading, MA.
