Lexeme-based Morphology: A Computationally Expensive ApproachIntended for a Server-ArchitectureMarc DomenigInstitut ftir Informatik der Universitfit ZiJrichWinterthurerstr.
190, CH-8057 Zi.irichdomenig@ifi.unizh.chAbstract:  This paper presents an approach tocomputational morphology which can be considered asbeing derived l?om the two-level model but differs fromthis substantially.
Lexemes rather than formatives arethe most important entities distinguished in thisapproach.
The consequence is that a new formalism forthe specification of morphological knowledge isrequired.
A short description of a system called WordManager will outline the characteristics of such aformalistn, the most prominent of which is thatdifferent subformalisms for inflectional rules and word-formation rules are distinguished.
These rules areapplied separately though not independently and supportthe concept of lexicalization.
The primary advantage ofthis is that the system can build up a network ofknowledge on how formatives, lexemes, and rulesdepend on each other while individual lexemes arelexicalized.
Thus, the system will know the inflectionalforms of a lexeme, the destructuring of these forms intoformatives, how the lexeme has been derived orcomposed if it is a word-fommtion, etc.
This requiresmuch memory, yet, the phik)sophy behind the approachis that lhe system runs as a server on a local areanetwork, so that an entire machine can be dedicated tothe task, if necessary.1.
IntroductionIn recent years computational morphology has beendominated by the so-called finite-state approach.
Thediscussion about this approach was reportedly started in1981 by a presentation of Kaplan and Kay at an LSAmeeting in New York.
it gained momentum after thepublication of Koskenniemi's thesis (Kosken-niemi 1983), which introduced the widely acknowledgedtwo-level model.
This model had several advantages:one of them was that it could be implemented onrelatively small machines, i.e.
it was extremelyeconomical and effective from a computational point ofview.
As a result of this, it could be used and tested bya large number of research groups.
The original modelwas modified in different directions in the course of thefollowing years.
Bear, for instance, proposed to increasethe model's expressiveness by replacing the finite-stateframework of the two-level model's lexicon system by amore powerful ,  uni f icat ion-based formal ism(Bear 86, 88).
A similar proposal was conceived byRussell, Pulman, Ritchie, and Black (1986).
Kay(1986/87) proposed to increase the formalism'sexpressiveness in order to make it suitable for noncon-catenative morphology.
These and many other efforts -also by Koskenniemi himself; see Kataja and Kosken~niemi (1988) - were mainly directed towards animprovement of the model's capacity to handle differentnatural anguages.
An alternative approach was followedin the project which will be described in the following:here, the intention was not to maximize the system'scapacity to handle different languages but to improvethe original model's properties from the point of viewof database theory.
There were two reasons for this:firstly, our interest was limited to a restricted set oflanguages - primarily German, English, French, andItalian.
Secondly, we felt that there was a great potentialfor improvements of the two-level model if it wereredesigned on a somewhat 'larger' scale, i.e.
for use onan environment of highly powered workstations linkedby a local area network, and with design criteria derivedfi'om database theory.According to our opinion, this latter claim proved to becorrect in many respects; during the past few years, acyclic prototyping process showed that the kind ofsystem resulting fi'om the application of database designcriteria had indeed a nmnber of advantages over theoriginal two-level model.
Naturally, these advantageshad to be paid for, primarily in terms of size andcomplexity: the system which eventually emerged fromthis prototyping process, Word Manager.
has thereforeonly remote affinity With the two-level model (as wellas with most of the successor models that focussed onincreasing the capability of handling different naturallanguages, for that matter).
It is no longer 'small andbeautiful', running on practically any personalcomputer, but complex and above all expensive as far asits memory requirements are concerned.
The primaryreason for this is that it follows what we like to call thelexeme-based al)proach to computational morphology,which we consider as an alternative to the so-calledformative-based approach followed by the two-levelmodel.The distinction between these approaches will be thefocus of this paper.
We will argue that the lexeme-basedapproach is advantageous in many respects and shouldtherefore be considered as an alternative to theformative-based approach under certain conditions.
Theargument will proceed as follows: first, we will give anexplanation of the terminology chosen for thealternatives.
Then, we will proceed with a shortdescription of Word Manager - an exhaustive descriptionwill be published in (Domenig 1990).
The conclusionwill point out the main differences between the twoapproaches.2.
TerminologyThe two-level model is a typical representative of whatwe call the formative-based approach to comptttationalmorphology.
In this approach, formatives are the basicentities managed by the system.
By formative we mean1 77a distributional segment of a word-form, independent ofwhether or not it is also a morph.
Essentially, theformative-based approach considers computationalmorphology as a parsing problem, where the formativesare the terminals of some kind of grammar formalism.In contrast, the lexeme-based approach treatscomputational morphology not only as a parsing butalso as a database management and a knowledgerepresentation problem.
Here, the basic entities managedby the system are (morphological) exemes, though thenotion of format ive  is known as well .
A(morphologica l )  lexeme roughly comprises themorphological knowledge represented by a traditionaldictionary entry: firstly, the knowledge which is directlyspecified in the entry - which usually is an indication ofan inflectional class as well as information aboutetymology and derivations based on the entry - ,secondly, the knowledge that can be inferred from thisinformation by the interpretation of rules specifiedelsewhere in the dictionary (usually in the introduction).The latter typical ly includes knowledge how thelexeme's inflectional paradigms can be generated, andhow derivations and compounds can be built.
Theobjective of the lexeme-based approach, then, is toprovide,' a formalism which allows the formalization ofthe morphological knowledge represented by dictionaryentries.
This implies that the formalism has to beexpressive nough to represent morphological lexemesin the above sense.
More specifically, it means that theformalism must have the following capabilities:?
It must provide the means to formalize inflection ina way which recordsfor formatives bow they have been or can(potentially) be combined into word-forms,for word-forms how they have been or can(potentially) be structured into sequences, andhow these sequences have been or can beassociated with lexemes in such a way that thesystem will know the citation form(s) andinflectional paradigm(s) for each individuallexeme.?
It must provide the means to formalize word-formation in a way which records for formativeswhether and how theyhave been created by word-formations,have been used in word-formations (in order tocreate other formatives/lexemes),can (potentially) be used in word-formations.Undoubtedly, formalisms following the formative-basedapproach do have some of these capabilities.
Since theylack the notion of a lexeme in the sense we have definedit, however, they are not able to deal with all of them.How 'the full functionality proposed here can beprovided will be outlined in the following description ofWord Mmmger.3.
Word ManagerWord Manager dist inguishes two phases in theknowledge specification process: a first phase where so-called lexeme classes are specified and a second phasewhere instances of these classes are specified.
Byconvention, the class specifications have to be processedby the system (compiled) before the instances can bemade.
Therefore, the fornmlism supported by WordManager can be considered to be split in two parts, anotion which is supported by the fact that the systemdistinguishes separate interfaces for the specification ofthe classes and the instances.
The first of theseinterfaces is an interactive specification environment,the second is an interprocess communication protocolprovided by an application which runs as a server on alocal area network (compare with Figure 5 shownbelow).
Both interfaces are described elsewhere in somedetail (Domenig 1988, 1990).
Here, we will focus thedescription on the formalism for the specification of thelexeme classes.
This formalism is split into severalsubformalisms, where these serve for the specificationof rules on the one hand, of formatives on tim otherhand.
The fundamental types of rules are spelling rules,inflectional rules, and word-formation rules.
Thefundamental types of formatives are inflectionalfoJwatives and word-fi)rmation formatives.Spelling rulesThe function of the spelling rules is similar to that ofthe two-level rules in Koskenniemi's two-level model.They allow the formatives used for the construction ofword-forms to be defined as linguistically motivatedabstractions, so that the rules ensure that they aremapped onto correct orthographic representations ofword-forms.
The rules themselves are similar to thosein the two-level model as well, though not identical.The main difference is that the rules in Word Managerare applied when entries are made into the database - atcompile time, as it were - while the rules in the two-level model are applied at run-time (by a finite-statetransducer).
Thus, the analysis of word-forms is (at leastconceptually) faster in Word Manager than in the two-level model, at the cost of increased space requirementsfor the storage of the surface strings corresponding tothe lexical strings.In./lectional rulesThe inflectional rules serve the purpose of defining theway in which inflectional formatives may be combinedinto word-forms and how these word-forms may begrouped into sequences defining what we have calledmorphological lexemes.
Each inflectional rule definesone lexeme class where each class is distinguished by aparticular sequence of word-forms that will be definedfor each lexeme belonging to this class (the sequence ofword-forms of each lexeme class is partitioned intosubsequences of citation forms and paradigms).
Thus,the rule shown in Figure 1 will define the inflectionalforms "Massage" and "Massagen" for the lexeme withthe citation form "Massage", for instance.Entries into the database may be considered as instancesof lexeme classes, i.e.
each entry is an instance of oneparticular lexeme class.
Entries are made by thefiring ofinflectional rules in a particular mode.
Notice that thisis the only way how entries can be made, which meansthat the system controls that there are no individualformatives or word-forms 'f loating around' in thedatabase.
Instead, each formative and word-form isassociated with at least one lexeme.78 2~D{ german:inflection:(RIRule NO-UMLAUT.+O/+\[E\]N)c i t~ J t ion - fo rms(ICat NO-UMLAUT.M-ROOT)perq~digms( ICat  MO-UMLAUT.M-ROOT)( lOaf  MO-UML?UT.M-ROOT)( ICat  MO-UMLFIUT,M-EMDIMG)(ICat MO-UMLAUT.M-EMDIMG)(ICat MO-UMLAUT.M-EMDIMG)( ICat  M-SUFFIX)(Mum SG)( ICat  SG+O)(Case MOM)( ICat  M-SUFFIX)(Mum SG)( ICat  SG+O)( ICat  M-SUFFIX)(Num PL) ( ICot  PL+\[EIM)Figure 1: hfftectional rule for a German class of nouns--=D~ german:word-formation:(RIVFRule SUFFIII.AI-I'ACH-TO-ROOT) ~-FI-productivity 20~our'ee2 (WFCat SUFFIX)te rge l  added- features  (Gender M)(RIRule MO-UMLAUT.+\[E\]S/+E)I ( ICat  M-ROOT)2 ( ICat  M-ENDI MG )iiiiii@!
!iiiii!iiJFigure 2: Word-formation rule for German noun derivationsFigure 3: Underspecified formatives representing noun stems~\[ - I~  german:inflection:(Cat N):(ICat N-SUFFIX):(Num SG):(ICat SG+O)~-P-I  =fully specified IFornatives"+" (Case MOM )"4."
(Case GEM)"+" (Case DAT )"+"  (Case ACC).... @@i l i i i i i  ,german:inflection:(Cat N):(ICaI N-SUFFIX):(Num PL):(ICaI PL+\[EIN) _fully spec i f ied  IFormatives"+en" (Case MOM)"+en" (Case GEM )"+en" (Case DAT)"+an" (Case ACC)Figure 4: Fully specified formativcs representing inflectional affixes3 79Word formation rulesThe word-formation rules serve the purpose of definingthe way in which inflectional formatives of existinglexemes and word-formation formatives may becombined into inflectional formatives of new lexemes.When word-formation rules are fired, they will fireinflectional rules, thus instantiating new lexemes.Figure 2 shows a rule which could be used to derive theGerman noun "Masseur" from "Massage".
Theassumption made by this rule is'that "Mass" is definedas root, "age" and "eur" as ending and derivational affix,respectively.
A further, similar rule could be used forthe derivation of the verb "massieren" from "Massage".Notice that the rule shown in Figure 2 is not realisticin the sense that it is too simplistic, i.e.
it does notmake use of the possibi l i t ies for general izat ionsprovided by the formalism.
A description of thesefeatures would require too milch space, though.hflectional formativesInflectional formatives are lexical strings which areassociated with feature sets (sets of attribute valuepairs).
They can be added to the database in two differentways: either they can be 'hard-coded' into the system asso-called fully specifiedformatives, or they can be addedby the instantiation of so-called underspecifiedformatives.
Underspecified formatives are formativespecifications where the strings are missing.
If the userwants to make an instance of such a formative, he hasto provide a string.
This he can do in either of twoways: by a direct specification or by the firing of aword-formation rule.The underspecified formatives are the key to howlexemes can be entered into the database, because theirinstantiation is the prerequisite for the inflectional rulesto be firable.
More specifically: the strings needed forthe instantiation of the underspecif ied formativesmatched by an inflectional rule are the knowledge thathas to be specified in order to make an instance of alexeme class.
Thus, it is evident hat the underspecifiedfonnatives will typically be used for the representationof stems of lexemes (see Figure 3), while the fullyspecified formatives will typically be used for therepresentation f inflectional affixes (see Figure 4).Word-formation.lbrmativesWord-formation formatives are - like inflectionalformatives - lexical strings which are associated withfeature sets.
Their typical  role is to representderivational affixes (like the suffix "eur" in the exampleabove which is used for a noun to noun derivation).Rule applicationThe application of the rules will take place at differenttimes and some of the rules can be applied in differentmodes.
The spelling rules are only fired when entries areadded to the database, i.e.
when instances of lexemeclasses are created.
This means that lexical strings willbe converted into surface strings, so that the systemwill not have to apply the rules when entries areretrieved by the analysis of orthographic representationsof word-forms; then, the system will parse on surfacestrings only.The inflectional rules are applied both when lexemes areadded to the database and when they - or parts thereof --are retrieved.
When lexemes are added, the rules areapplied in a generative mode which computes all theword-forms which belong to an individual exeme (thisis the point where the spelling rules are applied in orderto compute the surface strings corresponding to thelexical strings).
When lexemes are retrieved, the rulescan be applied in an analytical mode which allows theident i f icat ion of lexemes on the basis of .theorthographic representation of individual word-forms.Notice that once a lexeme has been identified, theinflectional rule which is associated with it can be firedin generative mode again in order to compute all theword-forms which belong to the texeme (this can beuseful for i l lustrative purposes in a lexicographerinterface, for instance).Like the inflectional rules, word-formation rules areboth applied when lexemes are added to the database andwhen they are retrieved.
The modes for their applicationare more dif ferentiated, though: Word Managerdistinguishes two modes for their generative, and onemode for their analytical application.
The first of thegenerative modes is used for what we call thelexicalization of complex lexemes.
Such a lexicalizationwill instantiate a new lexeme, where this instantiationwill have the effect that a future retrieval of the lexemewill not require the firing of the word-formation ruleany more (but only the con'esponding inflectional rule).The second of the generative modes is used for what wecall the generation of tentative entries, i.e.
thegeneration of lexemes which are licensed by the word-formation rules.
Since tile number of these tentativeentries is typical ly infinite (because the rtdes willtypically be defined in a way which allows them to beapplied recursively), this mode is used rarely andprimarily for illustrative purposes.The firing of word-formation rules in analytical modeallows the analysis of word-forms of tentatiw~ entries.
"\]\['his is not only useful for the identif ication of'unknown' (not lexicalized) lexemes but also for theconstruction of a database, because tentative ntries arethe ideal basis R)r the lexicalization process: once atentative entry has been identified, the rule whichlicenses the entry is known.
This means that all wehave to do in order to lexicalize it is to fire that rule inthe first of the generative modes mentioned.
Thus, it iseasy,  for instance, to construct  a dedicatedterminological dictionary while scantling through a textcorpus.4.
Word Manager databasesKnowledge represented in Word Manager databases iaccessed via the so-called atabase management system(DBMS) over the local area network.
The DBMS is astand-alone application intended to run as a server.
Atypical usage of Word Manager in an NLP environmentis shown in Figure 5.
This illustration shows that thesystem is meant to be used by client applications ofvaried nature.
The intention is that each of these clientswill manage its own database, where this contains theknowledge the application requires in addition to theknowledge provided by Word Manager.
Given this80 4. .
.
.
c I German French/ specification oflexeme instancesspecification of / / ,a~lexeme classes / iIF interactive / t  *"t.i specification : l  DBMS i::i~:i 1environment (network server) }:~iii}ii~F~'"  ~ _.i i :::i!
i::ii~i !
li ii::i i:I ili::il; i:Iii:I\[:iiii:II \ ,,I .
.
.~  \ ""compilation -I / \ \ "" \ ",/ \ \\ \German Frenchlexicographerinterfacespellingchecker~ hyphenationprogram" ~ text-to-speeChprogram\\ f machine translationprogramt _ Y"Word Manager: manages morphologicalknowledge onlyclient applications: managenon-morphological knowledgethemselvesFigure 5: Word Manager in an NLP environmentframework, the importance of lexemes is evident,because the lexemes are the entities with which theclients will associate their application-specificknowledge: for every lexeme of a Word Managerdatabase, a client will have a corresponding entrystoring whatever it requires for its specific purposes.In order to make such associations possible, WordManager provides so-called lexeme identll/i'ers in theDBMS interface (where each of these identifies onelexeme unequivocally).The actual knowledge of a Word Manager databasecomprises primarily the knowledge about a set oflexemes.
Of each lexeme, the system knows?
all inflectional forms, whereas it can identify thelexeme on the basis of orthographicrepresentations of its word-forms as well asgenerate the citation form(s) and inflectionalparadigm(s) on the basis of an identified lexeme,?
the destructuring of word-forms into formatives,, all word-formations which have been built on thebasis of the lexeme and all word formations whichcan (potentially) be built on the basis of thelexeme.
If the lexeme is itself a word-formationwhich has been instantiated by the firing of a rule(lexicalized), the system knows that rule and thelexeme(s) from which it has been derived.This is not the whole story, of course.
As pointed outat the beginning of section three, Word Managerdistinguishes separate interfaces/'or the specification oflexeme classes and instances.
In Figure 5, theinterface for the specification of classes is representedby the box called ' interactive specif icationenvironment.'
The interface for the specification ofinstances is represented by two boxes called 'DBMS'and 'lexicographer interface,' respectively.
The formerof these provides the interprocess communicationprotocol on the network, the latter is an end-userinterface which technically is not a part of WordManager, but a client application.
This means that aWord Manager database not only knows a set oflexemes but also how new instances of lexemes can becreated, and how existing lexemes can be modified ordeleted.
The interface provided by the DBMS musttherefore not only offer functions for the analysis andgeneration of word-forms, etc., but also the possibilityto view the formatives and rules, and the possibility tofi're the rules for the creation of new entries.The internal representation of a Word Managerdatabase is a large network which links all entities thatdepend on each other - rules, lexeme classspecifications, instances of lexeme classes, formatives,etc.
Since entries are created by the firing of rules, thesystem can indeed keep track of all dependencies.
Thisprovides the possibility of creating an arbitrarynumber of views on the knowledge (the interprocessprotocol allowing the computation of such views),because the entities linked by references can becombined in various ways.
Thus, the knowledge canbe presented to the user in different ways, in arbitrarylevels of detail, for instance.5 816.
The prototypeThe project which resulted in the design of WordManager was started at the beginning of 1986.
Sincethen, several prototypes were made, most of whichimplemented parsers for various parts and versions ofthe formalism, and the user interface for the'interactive specification environment' shown inFigure 5.
In the earlier phases of the project, threedifferent machines were employed: the first was aSun 3/50, which was primarily used in conjunctionwith the parser generator tools LEX and YACC.
Thesecond was a Lisp machine of the Texas InstrumentsExplorer family, which was used to prototype userinterfaces.
The third was an Apple Macintosh II.
Thismachine became available towards the end of 1987,when the design of both the formalism and the'specification environment' were in a state whichsuggested their full implementation.
The followingtwo years were spent on this task, which resulted in aprototype that includes about 16,000 lines of code(most of it written in Object Lisp (ALLEGRO 1987),an extension of Common Lisp).
Notice that thisprototype does not include the DBMS, though itprovides the full functionality of the 'specificationenvironment;' since the operating system did notprovide., interprocess communication, it was impossi-ble to realize the network architecture proposed inFigure 5.
In order to complete the system, we havetherefore switched back to a UNIX environment, i.e.we are currently porting the prototype produced onMacintosh IIs to Sun SPARCstations.6.
Conc lus ionExperience with the prototype of Word Manager hasshown that the lexeme-based approach to morphologyhas advantages a well as disadvantages in comparisonto the formative-based approach.
On the side of theadvantages, we claim that it is better suited for theimplementation f application independent repositoriesof morphological knowledge, because a databaserealized with Word Manager knows more about itsentries than a corresponding database realized with thetwo-level model, for instance.
Moreover, the fact thatentries are always made by the instantiation of lexemeclasses has the effect that the system can execute atight control over the consistency of the data.
On theside of the disadvantages, wemust admit hat a systemlike Word Manager equires a much more powerfulmachinery than a system like the two-level model.
Inparticular the storage requirements are quite formi-dable.
A second disadvantage concerns the system'scapability of handling different natural languages,though this is probably a shortcoming of WordManager and not the lexeme-based approach in general.In any case, Word Manager's formalism is certainlynot powerful enough to handle Finnish or Hungarianadequately - not to speak of Semitic languages.
Itmight well be that some of the advantages of theapproach must be sacrificed if we were to design alexeme-based system which covers as many languagesas the two-level model.To sum up: we believe that the lexeme-based approachto computational morphology will be useful for manyNLP applications.
In view of the computers availabletoday - and the future development tobe expected onthe hardware market -, the drawback concerning thepowerful machinery required seems to be quiteunimportant.
Finally, further esearch might even leadto lexeme-based systems with formalisms that arepowerful enough to handle as many natural anguagesas the systems following the formative-basedapproach.7.
ReferencesALLEGRO (1987): Allegro Common Lisp for theMacintosh, User Manual.
Coral SoftwareCorp., Cambridge, MA, 1987.Bear John (1986): "A Morphological Recognizerwith Syntactic and Phonological Rules."
InProceedings of the l l th InternationalConference on Computational Linguistics,COLING-86, Bonn, August 25-29.Bear John (1988): "Morphology with Two-LevelRules and Negative Rule Features."
InProceedings of the 12th InternationalConference on Computational Linguistics,COLING-88, Budapest, August 22-27.Domenig Marc (1988): 'Word Manager: A Systemfor the Definition, Access and Maintenance ofLexical Databases.'
In Proceedings of the12th International Conference onComputational Linguistics, COL1NG-88,Budapest, August 22-27.Domenig Marc ( 1990): Word Manager: A System forthe Specification, Use, and Maintenance ofMorphological Knowledge.
To be published(probably by Springer).Kataja Laura, Koskenniemi Kimmo (1988): "Finite-state Description of Semitic Morphology: ACase Study of Ancient Akkadian."
InProceedings of the 12th InternationalConference on Computational Linguistics,COLING-88, Budapest, August 22-27.Kay Martin (1986): Two-Level Morphology withTiers.
Unpublished research paper, XeroxPaid Alto Research Center.Kay Martin (1987): "Nonconcatenative Finite-StateMorphology."
In Proceedings of the ThirdConference of the European Chapter of theAssociation ./br Computational Linguistics,Copenhagen, April 1-3.Koskenniemi Kimmo (1983): Two-Level Morpholo-gy: A General Computational Model jorWord-Form Recognition and Production.Doctoral thesis at the University of Helsinki,Department of General Linguistics, Publica-tions No.
11.Russell G. J., Ritchie G, D., Puhnan S. G., Black A.W.
(1986): "A Dictionary and MorphologicalAnalyser for English."
In Proceedings of thel l th International Conference onComputational Linguistics, COI,1NG-86,Bonn, August 25-29.82 6
