JaBot: a multilingual Java-based intelligent agent for Web sitesTim READ & Elena BARCENADepartamento deFilologias Extranjeras y sus Lingi isticas, UNEDSenda del Rey s/n, Madrid 28040, Spaintimread@sr.uned.es, ebarcena@sr.uned.esAbstractThis paper presents a novel type of intelligentagent with a multilingual natural languageinterface, which retrieves information fromwithin a Web site.
This agent, named JaBotafter the fact that it is a bot which has beenprogrammed in Java, has been designed anddeveloped by the authors in an attempt osolve common Web site problems related toinformation retrieval.
JaBot runs quickly andefficiently, and rather than running directlyon the Web site pages, it is connected to alexical semantic map.
This map is based uponthe contents of the Web site in questiontogether with other associated linguisticknowledge.IntroductionJava was launched by Sun Microsystems in theearly '90s as a simple, robust, dynamic, multi-threaded, general-purpose, object-oriented,platform independent programming language!
Itsstrengths can be split into four key issues,namely, portability, security, robustness and easeof usage, and distributed operation across theWeb (Read et al, 1997).
These benefits makeJava an ideal programming language forconstructing Web-based computational linguisticapplications and agents (Ritchey, 1995;Sommers, 1997).
Some applications of this typeare beginning to appear on the Web, such as theEnglish learning tools developed in Java by theauthors as part of the UNED - Profesor Virtual(UPV) research project 1 (Read & B~ircena, inprep.
).l Although JaBot and the rest of the modules that makeup the UPV are fully functional and have beenoperational for some time now locally on ourdepartmental Web pages, they cannot be accessed yeton the Internet because our Web site is in the f'malstages of construction.Access to the vast amounts of informationcontained on the Web still highlights someproblems, such as that of  cataloguing or indexingall that information.
The sheer size of the Web andthe ever changing nature of its contents means thatthe process of charting it is closer to mapping alarge cavern with only the aid of a small torch thanto the construction of a library catalogue.Bot or agent echnology is playing an increasinglyimportant role in this mapping process, as will beseen next.1 Bots and the WebBots are distinguished from other commonly usedprograms in that they act as if they have somedegree of intelligence and independence(Thompson, 1998).
Born in the '60s, nowadaysbots should be viewed as part of the wider movetowards distributed object-based systems (Weber,1997).
Instead of having massive programs, thetendency is to use networked computer systemsmade of a large number of co-operating task-specific components.
Some of these componentswill act when told to; others, bots, will be moreautonomous, making the on-line experience morepleasant and productive.Internet search engines have a reputation of beingunfriendly and unhelpful, despite the fact thatsome of them offer basic natural languageinteraction.
The problem arises exactly at the pointwhen the user connects to a specific Web site insearch of some information that s/he believes to becontained there.
If the site is large and there is nosearch engine, finding a particular item can bevery difficult and time consuming, especially overa slow connection.
Even if a search engine doesexist, the current basis of search technology on theuse of 'wild card'-based literal strings means that,unless the user knows a keyword which will bepart of the entry s/he wants, the results of thesearch may well be zero links or a large list of1086marginally related references in which the desiredlink is embedded.In order to overcome these problems, the authorshave designed and developed a bot whichfunctions within a Web site.2 JaBot  - The  des ignIn this section the design requirements andspecification of the bot which has been devisedand developed by the authors for searching withinWeb sites are presented.
Its name is JaBot, whichcomes from 'Java-Based Bot': the word 'bot' inturn comes from 'robot', both of which arealternative words for 'intelligent agent'; and Javais the programming language in which the botwas written.
There are four specific requirementswhich have driven the research and developmentprocess.Firstly, a Web site assistant bot is required tofacilitate the exploration of the contents of a sitebeyond the strict, limited manipulation of literaltext chunks in blind searches.
Given the lack ofone-to-one correspondence b tween conceptualand linguistic units, the bot should be flexible inthe sense that it should retrieve matches not justby using the input words literally, but rather bytrying to "understand" the concept whichconcerns the user, so that the bot can search forthe same information under different butsemantically similar terms if necessary.Secondly, reflecting this search flexibility, theinterface to the bot should be in plain naturallanguage, enabling questions to be presented in anatural way.
Such an assistant bot wouldresemble the help system on Microsoft Office97in the sense that questions here can be formulatedin natural language and answered in terms oflinks within the Web site which relate to thesubject of the question, i.e., its semantic ontentbeyond the literal text it contains.Thirdly, the interface should be multilingual sothat users do not have to pose the query in thelanguage of the Web page.
Even though the usersmay not understand this language, their ability toformulate questions in their own language wouldenable them to, for example, access the details ofa particular person (their telephone number or e-mail address) who may well speak their language.Fourthly and finally, the binary file whichcorresponds to the bot needs to be sufficientlysmall so that it can be transferred across theInternet at a reasonable speed.
The tacit law of theWeb is clear: if users have to wait too long for thebot to start working, it will not be used.
Thisrequirement has implications for the degree ofsophistication of the linguistic processing and thetypes of data files associated with it.Now that the requirements have been presented,the resulting design is described.
JaBot is domain-specific in the sense that it can only operate on theWeb site for which it was configured.
This isuseful from a practical functional perspectivebecause it limits both the conceptual nd linguisticdiversity which needs to be processed (so far thisapproach has produced the best results incomputational inguistic applications \[Boitet,1990\]).
In other words, users of JaBot will beformulating questions which attempt o locateinformation that is likely to be contained on theWeb site, and not the full range of questions thatthey might like to ask a human expert on thesubject.
For example, if JaBot were placed on theWeb site of a university department, users wouldbe enquiring about subject contents, tutorial hours,exam dates, etc., and not attempting to ask whichof subjects X and Y is easier or more relevant fortheir careers.As can be seen in the diagram below, JaBot hasthree modules: a natural language interface, asearch engine and an interactive list of referencesto the Web pages on the site at which it isoperating.
At start up time, two data files areloaded, namely, a file of linguistic units with littleor no semantic relevance in the context of Website information retrieval, and a lexical semanticmap of the particular Web site.
The linguistic unitfile contains a list of the grammatical nd lexicalelements, marks, words and other literal stringswhich are not used when locating entries withinthe Web site.
The lexical semantic map containslexical elements (e.g., terms and compounds)1087which correspond to the concepts extracted fromthe Web pages on the site, as well as othersynonyms and quasi-synonyms which may beused to refer to them.The construction of the linguistic unit filerepresents less of a problem than that of thelexical semantic map, since for a particularlanguage the semantically empty elements willremain constant independently of the content ofthe Web site.
Hence, once versions of this datafile are constructed for the main languages usedon the Web, they could be made publiclyavailable for all sites.
Both the linguistic unit fileand the lexical semantic map have beenformulated from an empirical study carried out bythe authors on the way in which questions aretypically asked about Web site contents.JaBot's Internal ArchitectureblaturalInterfaceSearch Interactive List of Referencesto Web PagesJ ~ JLingumic LexicalUnit SemanticThe lexical semantic knowledge to be used by thesearch engine is extracted from the user'squestions by a process of rudimentary parsingbased upon the restrictions imposed by thelinguistic unit file.
In essence, the majority of thegrammatical words and certain other literalchunks of language are removed leaving a stringof key lexemes which belong to open linguisticcategories.
The parser does not take into accountthe punctuation of the query since it is assumedthat the user has posed one single question, andnot a series of questions or sentences with othercommunicative functions.
This procedure ismotivated by the fact that the grammaticality ofsuch electronic input is often very low since it iscloser to oral interactions than to carefullyproduced written texts (of.
the quality of e-mail).The remaining lexical elements are used by thesearch engine, not directly on the Web site, butagainst the nodes of the lexical semantic map.Each node in the map consists of a link to a Webpage (or section) and a list of semantically similarwords and expressions in the given domain.
Thelinks to the Web pages which correspond to thenodes of the map that have been activated in thesearch are presented to the user as a list, orderedby the number of elements found in each node.Double clicking on a link will retrieve theinformation by opening the corresponding page inthe main browser window.Finally, the multilinguality of JaBot depends onthe way in which the lexical semantic map and thelinguistic unit file are coded.
If foreign languageknowledge is included in both sources, thenforeign language queries are possible.
The contentof the Web site (and therefore the responses to theuser) would, however, not be multilingual unlessthe site had been constructed that way.3 JaBot - A working exampleThe example presented here has been extractedfrom our Web site locally.
JaBot contains ascrolling set of images which inform the user of itsfunctionality, and also a text window into whichthe user can enter his/her questions, as shown inthis diagram...... ?
'iiIn this example someone wants to know who is thehead of the department, and consequently entersthe question: "Who is the head of department?
".Such a question would produce the followingoutput list of links:1088_ J l ifiln: l l l. .
l AnOelelff) ~ ndex.
htrd l O0~\['te: l l l..IM iernl~ os.l'~d 100~ff~: l l l. .
/lndex.
h t~M ieml~ osDouble clicking on the top entry will access thehead of department's home page.
When the wayin which this question can be expressed inSpanish is considered, the advantage of JaBotover a simple literal string search engine (forexample, the search tool which MicrosoftFrontPage provides for Web sites) becomesevident.
Typically the head of department wouldbe referred to as: "el director / la directora",depending on the gender of the person.Now, since the head of our department is awoman, a user accessing the site who does notknow this would use the default gender inSpanish, which is masculine, and enter "eldirector".
A literal string search would not beable to identify the relevant link.
Furthermore, ifthe user does not speak Spanish very well andenters a synonym such as "jefe", "cabeza","presidente", "el que manda", etc., s/he would notbe able to locate the desired reference ither.Since JaBot uses semantic associations, it willfind the same references for sentences whichinclude any of the above entries, as well assimilar ones in English.4 JaBot  - The  next  vers ionAny future version of JaBot will need to improveits competence in two aspects: its linguisticsophistication and its knowledge location andretrieval capabilities.
Firstly, the linguistic issues.JaBot contains relatively little linguisticsophistication.
Input questions are semanticallyparsed in a way that enables JaBot to answer alarge range of basic queries about a Web site withsome degree of flexibility.
However, the parsercannot distinguish between such requests as:(a) "I want to know the phone numbers of thelecturers of Linguistics X and Y".
(b) "I want to know the phone numbers of all thelecturers of Linguistics except X and Y"The parser's ensitivity to such grammatical wordsas "except" and "not" would expand the range ofquery sentences which JaBot could handleeffectively.
Also, the identification ofconjunctions like "and" and punctuation signs likethe full stop would allow multiple queries.
Evensentential order could, in principle, be taken intoaccount.
However, there is a well known trade-offbetween theoretical linguistic sophistication andpractical performance which is applicable here(Hutchins & Somers, 1992).
While sentences (a)and (b) pose a linguistic problem for JaBot, theymay not pose a practical one, since our study ofthe types of questions which users actually ask didnot include a single example of this type.In order to cope with complex, ambiguous andincomplete input, the next version of JaBot shouldbe able to assess the quality of its own parsing andSearching, so that it can request clarification fromthe user when necessary.
On a practical note, asemi-automatic tool for preparing the lexicalsemantic map would be a great help for Webmasters who are considering employing JaBot ontheir sites.
Otherwise, the manual preparation ofthis file can be time consuming and, furthermore,it would be more laborious to keep the file up todate as the Web site changes.Secondly, the knowledge location and retrievalissues.
At the simplest level an agent is a piece ofsoftware whose primary task is to increaseproductivity through automation.
Some agents,"intelligent agents", seem to have certainautonomy or do something which can beconsidered to be "smart" (such as determining theimportance of a piece of e-mail by scanning it forwords like "deadline" or "won the lottery").JaBot's intelligence is limited.
It can only answerquestions about the content of the site.
It cannotcompare, deduce, guess, etc.1089Furthermore, agents, whether intelligent or not,are either static or mobile.
The former can onlyoperate within the confines of a single machine oraddress space.
The latter have been defined informal terms as "objects that have behaviour,state, and location" (Sommers, 1997, p.3).
Theycan move about the network, executing tasks atdifferent places and interacting with other agentswhen necessary.JaBot is currently a static agent in the sense thatit can only access information on the Web sitewhere it is located.
However, research as beendone by engineers at IBM on mobile Java agents,named aglets (IBM, www.trl.ibm.co.jp/aglets/),which are able to move between Web sitesrunning the aglet server.
This mobility enablesinteraction between the aglets, which can be usedto facilitate many different forms of behaviour,such as the sharing of expertise and information.Hence, a future version of JaBot could bedesigned as an aglet, which would enable it tocontinue functioning as it does at the moment onthe local Web site, but with the additionalcapability to leave the site and interact with otherJaBot aglets on servers where other relatedinformation is located.A JaBot aglet may, for example, exist on the Webpages of the different departments of a university(located on physically different machines).Where user questions go beyond the informationwhich is held on a particular departmental server,the JaBot aglet could leave its own server and goand interact with another one located elsewhere.Such mobility and the functionality which itentails may be very useful, for example, in thecase of a modular degree where a student has tostudy courses in different departments andtherefore wants to ask questions which relate tomore than one area of knowledge.ConclusionIn this article the problems which exist in theretrieval of information from a Web site havebeen considered together with the way in which abot could be used to improve the situation.
JaBot,a Java-based bot, has been designed anddeveloped by the authors to overcome suchproblems.
A requirements analysis has beenundertaken, followed by the resulting specificationof its architecture and associated ata sources.Subsequently, an illustrative example of itsfunctionality has been presented, whichdemonstrated that JaBot is more flexible than atraditional literal string-based search tool (whereone exists).
Other benefits of JaBot have also beenidentified, such as the way in which desiredinformation can be accessed on the site withoutthe need to know exact key words which exist inthe entry.
Furthermore, its ability to processquestions in languages other than that in which theWeb site was written.
Finally, some limitations inthe current design of JaBot have been outlinedtogether with an indication of the form that thenext version of this bot will take.ReferencesBoitet C. (1990) Towards Personal MT: generaldesign, dialogue structure, potential role ofspeech.
In H. Karlgren (ed.)
COLING-90:Papers presented to the 13 th InternationalConference on Computational Linguistics (3),pp.
30-35.Hutchins W.J.
and Somers H.L.
(1992) AnIntroduction to Machine Translation.Cambridge University Press.Read T. and B~ircena E. (in prep.)
C6mo seprepara el Departamento de FilologiasExtranjeras y sus Lingtiisticas para el siglo XXI.Revista de la UNED.Read T., Bhrcena E. and Faber P. (1997) Java andits role in Natural Language Processing andMachine Translation.
In Proceedings of theMachine Translation Summit V1.
pp.224-231.Ritchey T. (1995) Programming with Java.
t NewRiders.Sommers B.
(1997) Agents: Not just for Bondanymore.
JavaWorld (Electronic magazine atwww.j avaworld.corn/jw-04-1997/jw-04-agents.html).Thompson B.
(1998) It's a tough job butsomebot's got to do it.
lnternet Magazine.pp.44-48.Weber J.
(1997) Using Java 1.1.
Que.1090
