A Lexico-semantic Approach to the Structuring of TerminologyMarie-Claude L?HOMMEOLST ?
Universit?
de Montr?alC.P.
6128, succ.
Centre-villeMontr?al (Qu?bec), Canada H3C 3J7Marie-Claude.L?Homme@umontreal.cahttp://www.olst.umontreal.caAbstractThis paper discusses a number of implicationsof using either a conceptual approach or alexico-semantic approach to terminologystructuring, especially for interpreting datasupplied by corpora for the purpose ofbuilding specialized dictionaries.
A simpleexample, i.e., program, will serve as a basisfor showing how relationships between termsare captured in both approaches.
My aim is todemonstrate that truly conceptual approachesdo not allow a flexible integration of termsand relationships between terms and thatlexico-semantic approaches are morecompatible with data gathered from corpora.
Iwill also discuss some of the implicationsthese approaches have for computationalterminology and other corpus-basedterminological endeavours.1 IntroductionRecent literature in terminology circlesconstantly reminds us that methods and practiceshave changed drastically due mostly to theextensive use of electronic corpora and computerapplications.
What might appear as normal andstandard in computational circles has had profoundconsequences for terminologists; this has led manyto criticize traditional theoretical principles andsome to propose new approaches (Bourigault andSlodzian 1999; Cabr?, 2003, among others; seeL?Homme et al , 2003 for a review).One of the issues at the centre of this debate isthat of diverging views on the relationship betweenthe term and the abstract entity it is supposed torepresent (a ?concept?
or a ?meaning?).
Differingviews will inevitably lead to very different ways ofenvisaging terms and methods of structuring them.Some might be compatible with a givenapplication, while others are much more difficult toaccommodate.In this paper, I will try to demonstrate some ofthe methodological consequences of adopting aconceptual approach or a lexico-semantic approachto terminology structuring.
These observations aredrawn from my experience in compilingspecialized dictionaries using corpora as primarysources and computer applications to exploit them.Even though the application I am familiar with isvery specific and obviously influences my view onthe structuring of terms, I believe this topic is alsorelevant for other terminology-related applications.For example, in computational terminology, thereis an increasing interest for structuring extractedterms (articles in Daille et al, 2004 and inNazarenko and Hamon, 2002, among others).Automatic term structuration is carried out byconsidering morphological variants (Daille, 2001;Grabar and Zweigenbaum, 2004), performingdistributional analysis to build classes ofsemantically related terms (Nazarenko et al, 2001,among others), or acquiring other types oflinguistic units, such as collocations or verbalphrases, from specialized corpora.These questions will be addressed from alinguistic point of view, but many have been dealtwith directly or indirectly by computationalterminologists and, in fact, are often raised by theirwork on specialized corpora.
I will also try todemonstrate that the problems dealt with in thispaper are by no means a reflection of a tendencyoften attributed to linguists to make things morecomplicated than they actually are.
I would like toshow that they are a reflection of the functioning ofterms in running text.2 Two different approaches to terminologyThe conceptual approach I describe is the oneadvocated by the Vienna School of terminologythat has been and is still applied to work carriedout by terminologists.
The results of its analyses isencoded in term records in term banks or in articlesin terminological dictionaries.CompuTerm 2004  -  3rd International Workshop on Computational Terminology 7The lexico-semantic approach on which mydiscussion is based is the Explanatory andCombinatorial Lexicology (ECL) (Mel?
?uk et al,1995; Mel?
?uk et al 1984-1999) which is thelexicological component of the Meaning-textTheory (MTT).
As will be seen further, ECLprovides an apparatus, namely lexical functions(LFs), that can capture a wide variety of semanticrelations between lexical units.
ECL descriptionsare encoded in an Explanatory and CombinatorialDictionary (ECD) (Mel?
?uk et al 1984-1999).In order to illustrate the methodologicalconsequences of the two approaches underconsideration, I will use a basic term in the field ofcomputing, i.e., program.
This term was chosenbecause no one will question its status incomputing no matter what his or her view is onterms and terminology.In addition, like many basic terms, program ispolysemic, ambiguous in some contexts, andsemantically related to several other terms.
It willbe very useful to show the variety of semanticrelationships in which terminological unitsparticipate.
Finally, program does not refer to aconcrete object.
Hence, its analysis will poseproblems different from those raised by terms likeprinter or computer.I will also frequently refer to a corpus fromwhich my observations are derived.
This corpuscontains over 53 different texts and amounts to600,000 words.
It was compiled by theterminology team within the group Observatoirede linguistique Sens-Texte (OLST) in Montreal.Since I am not an expert in computer science, Imust rely ?
like other terminologists ?
oninformation provided in a corpus and not onprevious knowledge to analyze the meaning ofprogram and the other terms to which it is related.2.1 A conceptual approach to the processingof the term programWhen considering a unit such a program,terminologists who adhere to a conceptualapproach will define its place within a conceptualstructure.
This is done by considering  itscharacteristics (in fact, often by deciding whichones are relevant), and by analyzing classicalrelationships, such as hyperonymy (or, rather,generic-specific) and meronymy (or whole-part).In order to achieve this, terminologists usuallygather information from reliable corpora.The corpus first informs us that ?program?
canbe subdivided into in one of the followingcategories; 1.
?operating system?
; 2.
?applicationsoftware?, i.e., ?word processor?, ?spreadsheet?,?desktop publishing software?, ?browser?, etc.
;and 3.
?utility program?.
It also tells us that thereare different types of ?programs?
: 1.
?sharewareprograms?, ?freeware programs?
; ?educationalprograms?
; and ?commercial programs?
; 2.?command-driven programs?
and ?menu-drivenprograms?.One possible representation of theserelationships has been reproduced in Figure 1.
Ofcourse, my interpretation of the data listed above issimplified, since it does not take into account allthe relationships that can be inferred from it (e.g.,the fact that software programs or educationalprograms can be menu-driven).
Also, part-wholerelationships for some of these subdivisions can beidentifed (e.g., the fact that programs ?
classifiedaccording to the interface ?
have parts such asmenus, windows, buttons, options, etc.
).programaccording to the task or tasks to performoperating systemapplication softwareword processorspreadsheetdesktop publishing softwarebrowserutility programaccording to the  interfacecommand-driven programmenu-driven programaccording to the marketshareware programfreeware programcommercial programeducational programFigure 1: Representation of the relationshipsbetween ?program?
and related conceptsFor the time being, I will assume that I havesolved the problems related to the relationsbetween ?program?
and other relevant concepts(which, in fact, is not the case, as we will seebelow).The corpus also allows me to observe that theconcept I am currently dealing with, has differentnames: program and software program.
This willnormally be dealt with in conceptualCompuTerm 2004  -  3rd International Workshop on Computational Terminology8representations by taking for granted that all thesedifferent linguistic forms refer to the same concept,and thus are true synonyms.
In my representation,they will be attached to the same node as?program?
(see Figure 2).1Furthermore, since concepts and conceptualrepresentations are considered to be language-independent, their description and representationshould be valid for all languages.
Hence, myrepresentation system should apply to French (andto true synonyms in French) and other languages(see Figure 2).program (program; software program)(Fr.
logiciel)according to the task or tasks to performapplication software (applicationsoftware; application)(Fr.
logiciel d?application;application)?Figure 2: Synonyms in conceptualrepresentationsRegarding this last issue, a choice must often bemade between several potential synonyms in orderto select a single identifier for a concept.
Thischoice can simply be functional (allowing thelabelling of a node in a representation such as thatin Figure 1) or result from standardizing efforts.The choice of a unique identifier is central inconceptual analyses, since relationships are definedfirst and foremost between concepts and areconsidered to be valid for the linguistic forms thatlabel them.2.2 Other issues related to the analysis ofprogramIn my discussion on the processing of program, Ideliberately avoided other important issuesrevealed by the data contained in the corpus.
Wewill look at some of these issues in this section.First, ?programs?
can be further classifiedaccording to the language used create them (?Cprograms?, ?C++ programs?, ?Java programs?
), oraccording to the hardware device they manage1Large-scale ontologies represent concepts andlexical forms using a similar strategy.
For example, theUnified Medical Language System (UMLS) (NationalLibrary of Medicine, 2004) makes a clear separationbetween a Semantic Network and a Lexicon.
(?BIOS program?, ?boot program?).
Incidentally,in French, the first subdivision (the one representedin section 2.1) corresponds to logiciel.
The ones wejust introduced are named programme.This obviously has consequences for therepresentation of program produced above.
Theproblem can be solved in conceptual approachesby:a.
Considering that program refers to a singleconcept, and trying to account for thedifferent ways of organizing its relationshipswith other concepts with new conceptualsubdivisions.
This will produce a verycomplex, yet possible, graphicalrepresentation;b. Focussing on a single organization of theconcept ?program?
(for example, the onechosen in section 2.1.)
and defining theothers as being related to vague or improperuses of program; or, finally,c.
Saying that program is associated with twoor three different concepts, and possiblyclassifying them into three differentsubfields of computing, i.e., concept1 =micro-computing; concept2 = programming;concept3 = hardware.
If the description iscarried out in a multilingual context, thesubdivision will be necessary to account forthe fact that, in French, for instance,program can be translated by logiciel orprogramme.
This latter choice is the one thatis closest to the distinctions made with thelexico-semantic approach dealt with in thefollowing section.Secondly, program shares with other lexicalunits many other different semantic relationshipsother than the taxonomic and meronymic relationspreviously considered.
All the relationships listedbelow have been found in the corpus.2o Relationships that involve activities and thatare expressed linguistically mostly bycollocates of program:Function: a program performs tasksCreation: development, creation of aprogram, programmingActions that can be carried out on programs:configuration, installation, running,aborting, etc.2Some of these have been listed in Sager (1990) whoargued that a large variety of conceptual relationshipscould be found in specialized subject fields.CompuTerm 2004  -  3rd International Workshop on Computational Terminology 9o Relationships that involve properties and thatare also expressed linguistically bycollocates of program:powerful program, user-friendly program;feature of a programo Argument or circumstantial relationships:Agent: user of a program; programmerInstrument: create a program with alanguageLocation: install the program on the harddisk, on the computero Other relationships expressed bymorphological derivatives terms that includethe meaning of program;programming, programmable,reprogrammableMost relationships listed above are non-hierarchical and may be expressed by parts ofspeech other than nouns.
Consider, for example,actions that can be performed on a program(configuration, configure; install; installation,etc.).
3 Some will be very difficult to account for interms of conceptual representations.
Of course,conceptual-approach advocates might argue thatthese relationships are not relevant forterminology.Thirdly, in my discussion of the fact thatconcepts could have different names, I mentionedonly a synonym, but concepts are expressed in avariety of forms in corpora.
Many of these will nottake the form of nouns.2.3 A lexico-semantic approachIn this section, I repeat my analysis of programthis time using a lexico-semantic approach.
Thisapproach is also based on data gathered fromcorpora.
The discussion presented in this section issummarized in Table 1.First, the analysis of program in the corpusreveals that it has three different meanings.Program can be defined as: 1) a set of instructionswritten by a programmer in a given programminglanguage in order to solve a problem (this meaningis also conveyed by computer program); 2) a set ofprograms (in sense 1) a user installs and runs onhis computer to perform a number of tasks (thismeaning being also conveyed by softwareprogram); and 3) a small set of instructionsdesigned to run a specific piece of hardware.3 Another non-hierarchical relationship has received alot of attention recently, that of cause-effect.This sense distinction is validated by the fact thatprogram can be related to different series of lexicalunits.For example, a program1 is something thatsomeone, called a programmer, writes, executes,compiles and debugs.
It can be machine-readableor human-readable.
It can also end or terminate.Program can be modified by names given tolanguages, i.e., C program, C++ program, Javaprogram.
Finally, it can also have parts such asmodules, routines, and instructions.Program1Explanation Set of instructions written by aprogrammer in a programminglanguage to solve a specific problemCollocates write ~; compile ~, execute ~; create~; machine-readable ~; human-readable ~; ~ ends, ~ terminates,debug ~; powerful ~Hyponyms C ~, C++  ~, Java ~Otherrelatedtermsto program; programming,programmer; routine, instruction;module; page; segment; language;lineProgram2Explanation Set of programs1 installed and run onthe computer by a user to perform aspecific task or a set of related tasks.Hyponyms operating system; applicationsoftware; word processor,spreadsheetCollocates active ~, running of ~; download ~;develop ~; run ~, install ~; uninstall~; add/remove ~;  user-friendly; quit~; exit ~; load ~; launch ~Otherrelatedtermsuser, hard disk;applicationsoftwareProgram3Explanation Short set of specific instructionsdesigned to run a hardware deviceOtherrelatedtermsboot, BIOS, to program, reprogram,programmable, reprogrammable,programmingTable 1: Semantic distinctions for programA program2 is something a user installs on hiscomputer, loads into the memory, runs, andsometimes uninstalls.
Different sorts of programscan be identified, such as operating systems,applications, and utilities.
Programs can have partssuch as windows, menus, options, etc.
Finally, aprogram2 can be user-friendly.CompuTerm 2004  -  3rd International Workshop on Computational Terminology10A program3 consists of a few code lines writtenin order to specify the behaviour of a specifichardware device, such as a memory.
The device isthen said to be programmable and/orreprogrammable.
It can be programmed andreprogrammed.In this lexico-semantic approach, therelationships observed between program and otherterms are attached to its specific meanings.
Thisdistinction allows us to relate other terms tospecific senses.
For example, program1 is relatedto other senses as follows:Synonym: computer ~Types of programs: C ~, Java ~Parts of programs: instruction, page, segment,line, routineCreation of a program: write ~, create ~, toprogram, programmingAgent: programmerCause a program to function: execute ~The program stops functioning: ~ ends, ~terminatesetc.Since most semantic relationships are non-hierarchical, they can be represented in a relationalmodel.
In ECL, paradigmatic and syntagmaticsemantic relations are represented by means of asingle formalism, i.e., lexical functions (LFs).
LFsare used to capture abstract and general senses thatremain valid for a large number of lexical units.The relationships listed above could be formalizedas follows: 4synonym: Syn(program1) = computer ~agent of a program: S1(program1) = programmercreate a program: CausFunc0(program1) =create [DET ~], write [DET ~]Cause a program to function:CausFact0(program1) = execute [DET ~]The program stops functioning:FinFact0(program1) = [DET ~] ends, [DET ~]terminates4Meronymic and hyperonymic relationships can alsocan also be captured by means of lexical functions.Authors have proposed LFs especially designed torepresent these relations (Spec, for hyponymy; andPart; for meronymy).
However, ECL will preferaccounting for these relationships with non-standardlexical functions in order to explain the specific natureof the relationships between a lexical unit and itsmeronym.3 General comments on the analyses of termsThese two brief analyses of program reveal thefollowing about terms:?
Terms can convey multiple meanings.
Thisis not an accidental property that only affectsprogram.
Numerous examples can be foundin corpora and have been dealt with in recentliterature.
This, of course, has importantconsequences for both conceptual andlexico-semantic approaches.?
Terms can enter into a large variety ofrelationships with other terms, and not onlytaxonomic or meronymic relationships.
Theunderstanding of these relationships isnecessary to capture sense distinctions; inaddition, relationships are valid for a specificmeaning.?
Some of the relationships observed betweenterms are hierarchical: hyperonymy andmeronymy.?
Most semantic relationships are non-hierarchical: e.g., actions carried out byterms, properties, cause-effect.?
Some relationships involve lexical unitsother than nouns: e.g., actions and creationare often expressed linguistically by meansof verbs; properties are expressed byadjectives.?
Most relationships involve terms consideredas linguistics units rather than labels forconcepts: e.g., morphological derivatives.In fact, what these observations tend to show isthat terms behave like other lexical units and mustbe dealt with accordingly.
Terms will acquire theirspecificity through a given application with setobjectives, but as units occurring in corpora, termscannot be differentiated from other lexical units.4 Implications for computationalterminology and other corpus-based workThe previous discussion has a number ofimplications for computational terminology (aswell as other corpus-based terminology-relatedapplications).
I will examine a few in this section.First, both approaches will focus on differenttypes of units when selecting terms in corpora.
Inconceptual approaches, a selection is made amonglinguistic units that can refer to a concept.
Thefocus is on nouns and noun phrases.
Even thoughconcepts can be expressed in a variety of linguisticforms, synonyms considered will invariably benouns of noun phrases.
Work on terminologicalCompuTerm 2004  -  3rd International Workshop on Computational Terminology 11variation (Daille, 2003; Jacquemin, 2001) hasshown the variety of forms that terms can take incorpora (morphological derivation, insertion,elision, anaphora, etc.
), but these are taken intoaccount only if they can be associated with anadmitted term.In a lexico-semantic approach as that presentedin section 2.3, units considered will be those thatconvey a meaning that can be related to the field ofcomputing (the subject field is delimited prior tothe selection).
Lexical units selected can pertain todifferent parts of speech as long as their meaningcan be related to the field under examination:nouns (program, byte); verbs (debug, to program),adjectives (user-friendly, programmable).
Evenadverbs can convey a specialized meaning (e.g.,digitally, dynamically).Secondly, any terminological work based oncorpora will run into polysemy, even though itfocuses on a small set of terms.
The manner inwhich the distinctions between senses are madehas important consequences on way terms will beprocessed afterwards.Polysemy can be dealt with using a conceptualapproach, which considers this property to be anaccidental problem.
Hence, distinctions depend ondecisions made during the classification process orthe construction of conceptual representations.In lexico-semantic approaches, polysemy isviewed as a natural property of lexical units.Senses are delimited prior to the representation ofsemantic relationships and this delimitation isbased on the observations of interactions betweenthe term under examination and other lexical units.Sense delimitation and distinction is a necessarystep before anything else can be done.Thirdly, regarding terminology structuring,conceptual methods, such as the one discussed insection 2.1, are useful as far as classification isconcerned.
Hence, they can be used for describingconcepts that correspond to entities (concreteobjects, substances, artefacts, animates, etc.
).Moreover, the focus is on hierarchical relations(hyperonymy and meronymy) which is again validfor entities, and, as far as part-whole relations areconcerned, more specifically concrete objects.Many non-hierarchical relationships, such as thoselisted in section 2.3 are disregarded, either becausethey involve units that do not refer to entities, orbecause they are relationships between lexicalunits and not concepts.Also, relationships between synonyms areconsidered from the point of view of truesynonymy.
Choosing a unique linguistic identifierfor a concept and considering competing linguisticforms as true synonyms has implications for thevariety of relationships that can be considered.Some relationships can be valid for one synonymbut not for another.In lexico-semantic approaches, semanticrelationships are attached to senses that have beendistinguished previously.
In addition, a widevariety of semantic relationships can be taken intoaccount.
These relationships can apply to termsthat designate entities, as well as activities, andproperties.
Hypernymy and meronymy representonly a small part of the semantic relationshipsterms can share with other terms.
Otherrelationships, such as argument relations, entity-activity relations, can be expressed by differentparts of speech.Fourthly, conceptual approaches lead torepresentations that distance themselves from datacollected in corpora.
Many decisions are madeduring the construction of the representation.
Onthe one hand, many meanings that would appear tobe relevant in other approaches are not considered.On the other hand, things are added in order tobuild the representation.
Consider, for example,Figure 1.
Some subdivisions are created but do notcorrespond to lexical units (e.g., according to theinterface); this sort of classification of units willresult in considering several complex sequencesthat have a compositional meaning (hence, that arenot true lexical units).Terminology structuring in conceptualapproaches is often carried out in order to representknowledge and not linguistic units.
Problems arisewhen this work is done using corpora as a startingpoint, since linguistic units (such as terms) do notbehave in a way that reflects perfectly a givenknowledge structure.
When analyzing terms,considerations regarding knowledge structure willconstantly interfere with factors related to thebehaviour of linguistic units in text.On the other hand, lexico-semantic approachesare much more compatible with data gathered fromcorpora.
Of course, terminologists will makedecisions since they must interpret data andsynthesize their findings, but these are based on theobservation of interactions between lexical unitsthat appear in corpora.5 Concluding remarksThe point in my discussion, is not to say that anapproach is much better than the other forterminology, regardless of the application at hand.This topic has been dealt with extensively byauthors and even placed in a theoreticalCompuTerm 2004  -  3rd International Workshop on Computational Terminology12perspective.
Rather, I wanted to demonstrate thatan approach is probably better suited that the otheras far as terms considered in corpora areconcerned.
I also wanted to point out themethodological consequences of choosing anapproach over another.Conceptual approaches will  account forconsensual representations of knowledge, based ona predefined set of hierarchical relationships.However, in must be kept in mind that resultingrepresentations distance themselves from corpusdata and necessitate a lot of hand-crafted changes.Often, the ideal knowledge structure is formulatedbeforehand entirely or partly, and the difficultyconsists in trying to find lexical units that fit into it.Lexico-semantic approaches will provideterminologists with a framework for interpretingdata related to terms and the contexts in which theyappear.
However, one must accept, when using thiskind of approach, that terminological structures arediscovered gradually through semantic relationsand that some of these relations will evencontradict assumed knowledge structures.6 AcknowledgementsI would like to thank Elizabeth Marshman forher comments on a preliminary version of thisarticle.ReferencesD.
Bourigault and M. Slodzian.
1999.
Pour uneterminologie textuelle.
Terminologies nouvelles,19:29-32.M.T.
Cabr?.
2003.
Theories of Terminology.
TheirDescription, Prescription and Explanation.Terminology 9(2):163-199.A.
Condamines.
1995.
?Terminology.
New needs,new perspectives.?
Terminology 2(2): 219-238.D.A.
Cruse.
1986.
Lexical Semantics, Cambridge:Cambridge University Press.B.
Daille.
2002.
Qualitative term extraction.
In  D.Bourigault, C. Jacquemin and M.C.
L?Homme(eds.
), Recent Advances in ComputationalTerminology, 149-166, Amsterdam /Philadelphia: John Benjamins.B.
Daille.
2003.
Terminology Mining.
In M.T.Pazienza (ed.
), Information Extraction in theWeb Era, Lectures Notes in ArtificialIntelligence.
29-44.
Springer.B.
Daille, K. Kageura, H. Nakagawa and L.-F.Chien (eds.).
2004.
Recent Trends inComputational Terminology.
Special Issue ofTerminology, 10(1).N.
Grabar and P. Zweigenbaum.
2004,forthcoming.
Lexically-based terminologystructuring.
Terminology, 10(1).Jacquemin.
C. 2001.
Spotting and DiscoveringTerms through Natural Language ProcessingTechniques, Cambridge: MIT Press.M.C.
L?Homme, U. Heid and J.C. Sager.
2003.Terminology during the past decade (1994-2004).
An Editorial Statement.
Terminology,9(2):151-161.I.
Mel?
?uk, A. Clas and A. Polgu?re.
1995.Introduction ?
la lexicologie explicative etcombinatoire, Louvain-la-Neuve (Belgique):Duculot.I.
Mel?
?uk et al 1984-1999.
Dictionnaire explicatifet combinatoire du fran?ais contemporain.Recherches lexico-s?mantiques I-IV, Montr?al :Les Presses de l?Universit?
de Montr?al.National Library of Medicine.
2004.
UMLSKnowledge Sources(http://www.nlm.nih.gov/research/umls/)A. Nazarenko and T. Hamon.
(eds.).
2002.Structuration de terminologie.
Special issue ofTraitement automatique des langues.
TAL, 43(1).A.
Nazarenko, P. Zweigenbaum, B. Habert and J.Bouaud.
2001.
Corpus-based extension of aterminological semantic lexicon.
In  D.Bourigault, C. Jacquemin and M.C.
L?Homme(eds.
), Recent Advances in ComputationalTerminology, 327-351, Amsterdam /Philadelphia: John Benjamins.J.C.
Sager.
1990.
A Practical Course inTerminology Processing.
Amsterdam /Philadelphia: John Benjamins.E.
W?ster.
2004, forthcoming.
The structure of thelinguistic world of concepts and itsrepresentation in dictionaries [translated by J.C.Sager].
Terminology, 10(2).CompuTerm 2004  -  3rd International Workshop on Computational Terminology 13
