Feature Structures Based Tree Adjoining Grammars 1K.
Vijay-ShankerDepartment of Computer and Information SciencesUniversity of DelawareNewark, DE 19711U.S.AA.
K. JoshiDel)artment of Computer and Information ScienceUniversity of PennsylvaniaPhiladelphia, PA 19104U.S.AAbstract  We have embedded Tree Adjoining Grammars (TAG) in a fea-ture structure based unification system.
The resulting system, FeatureStructure based Tree Adjoining Grammars (FTAG), captures the princi-ple of factoring dependencies and recursion, fundamental to TAG's.
Wcshow that FTAG has an enhanced escriptive capacity compared to TAGformalisnr.
We consider some restricted versions of this system and somepossible linguistic stipulations that can be made.
We briefly describe acalculus to represent the structures used by this system, extending onthe work of Rounds, and Kasper \[Rounds et al 1986, Kasper et al 1986\]involving the logical formulation of feature structures.SS Np / ~ '~ VPDET N VI I Ithe man metU I U 2 U 3Figure 1: Initial TreesNNNp/DETI~c\NIwoman1 Int roduct ionTree Adjoining Grammars (TAG) were first introduced by Joshi, Levy,and Takalmshi \[Joshi et al 1975\].
The first study of this system, fromthe point of view of its formal properties and linguistic applicability, wascarried out by Joshi in \[Joshi 1985\].
TAG's have been used in providinglinguistic analyses; a detailed study of the linguistic relevance was doneby Kroch and Joshi in \[Kroch et al 1985\].In this paper, we show lmw TAG's can be embedded in a feature struc-ture based framework.
Feature structure based Tree Adjoining Grammars(FTAG) are introduced in Section 2, and is f611owed by a comparsion ofthe descriptive capacity of FTAG and TAG.
A restricted version of FTAGis proposed and some possible linguistic stipulations are considered.
InSection 3, we introduce a calculus, which is an extension of the logicalcalculus of Rounds and Kasper \[Rounds et al 1986, Kasper et al 1986\]allowing A-abstraction and application, in order to describe the structuresused in FTAG's.
Finally, in Section 4, we summarize the work presentedin this paper.1.1 In t roduct ion  to  T ree  Ad jo in ing  GrammarsTree Adjoining Grammars (TAG), unlike other grammatical systems usedin computational linguistics, is a tree rewriting system.
Unlike the stringrewriting formalisms which writes recursion into the rules that generatethe phrase structure, a TAG factors reeursion and dependencies into afinite set of elementary trees.
The elementary trees in a TAG correspondto minimal inguistic structures that localize the dependencies such asagreement, subcategorization, a d filler-gap.
There are two kinds of el-enrentary trees: the initial trees and auxiliary trees.
The initial treesroughly (Figure 1) correspond to simple sentences.
Thus, the root of aninitial trce is labelled by the symbol S. They are required to have afrontier made up of terminals.The auxiliary trees (Figure 2) correspond roughly to minimal recur-sive constructions.
Thus, if the root of an auxiliary tree is labelled by anonterminal symbol, X, then there is a node (called the foot node) in thefrontier of this tree which is labelled by X.
The rest of the nodes in thefrontier are labelled by terminal symbols.1This work was partially supported by NSF grants MCS-82-19116-CER, DCR-84-10413,ARO ffrant DAA29-84-9-~027, and DARPA grant N0014-85-K0018714Xvl ~v2foot nodeNP/ ~swho I Ie VFigure 2: Auxiliary TreesWe will now define the operation of adjunction.
Let 7 be a tree witha node labelled by X.
Let fl be an auxiliary tree, whose root and footnode are also labelled by X.
Then, adjoining/3 at the node labelled byX in 7 will result in tbe tree illustrated in Figure 3.
In Figure 3, we alsoSu 2NPwu/  DL:rr NI l 1 N f~ man who j Ie V$vPV/" ~NPI /NDl~r NI I~e WomanFigure 3: The operation of adjoinfngshow tl~e result of adjoining the auxiliary tree fll at the subject NP nodeof the initial tree al .So far, the only restriction we have placed on the set of auxiliary treesthat can be adjoined at a node is that the label of the node must be thesame as the label of tile root (and the foot) node of the auxiliary tree.Fm'ther estriction on this set of auxiliary trees is done by enumeratingwith each node the subset of anxiliary trees which can be adjoined at thatnode.
This specification of a set of auxiliary trees, which can be adjoinedat a node, is called the Selective Adjoining (SA) constraints.
In tim casewhere we specify the empty set, we say that the node has a Nail Adjoining(NA)  constraint:~.
It is possible to insist that adjunction is mandatory ata node.
In such a case, wc say that the node has an Obligatory Adjoining(OA) constraint.A more detailed description of TAG's and their linguistic relevancemay be found in \[Kroeh et al 1985\].1.2 Feature  S t ructure  Based  Grammat ica l  Sys temsSeveral different approaches to natural anguage granunars have devel-oped the notion of feature structures to describe linguistic objects.
Inorder to capture certain linguistic phenomena such as agreement, subcat-egorization, cte., a number of.
recent grammatical systems have added,on top of a CFG skclcton, a feature based informatioual element.
Ex-ample or" sncb systems (see \[Shieber 1985a\]) include Generalized PhraseStructure Grammars (GPSG), Lexical functional Grammars (LFG), andtIead-driven Phrase Structure Grammars (IIPSG).
A feature structure(as given below) is essentially a set of attribute-value pairs where valuesmay be atomic ~*ymbols or another feature structure.cat : Scat\[ : \ [ \ ]  agrcat :2 : agr :subject53"1 \[\] \[\]Tim notation of the co-indexing box ( \ [ \ ]  in this example) is used to ex-press the f;~ct hat the values of two subfeatures are the stone.
Featurestructures with co-indexing boxes have also been called reentrant featurestructures in the literature.We can define a partial ordering, E, on a set of feature structuresusing tbe notion of subsnmption (carries less in/ormalion or is more gen-eral).
Unification of two feat,re structures (if it is defined) correspondsto the feature ~;tructure that has all the information contained in theoriginal two feal;nre structures and nothing more.
We will not describefeature structur,~s any fnrther (see \[Shieber 1985a\] for more details on fea-turc structures and an introduction to the unification based approach togrammars).2 Featm'e Structure Based Tree AdjoiningGrammars  (FTAG)The linguistic theory underlying TAG's is centered around the factor-ization of reeursion and localization of dependencies into the elementarytrees.
The "dependent" items usually belong to the same elementarytree 2.
Thus, for example, the predicate and its arguments will be in thesame tree, as will the filler and the gap.
Our main goal in embeddingTAG's in an unificational framework is to capture this localization of de-pendencies.
Therefore, we would like to associate f ature structures withthe elementary trees (rather than break these trees into a CFG-like rulebased systems, and then use some mechanism to ensure only the treesprodnced by the "lAG itself are generateda)~ In tbd':'feature structures2It is eometime~ possible for "dependent" iterem to belong to an elementary treeand the immediate auxiliary tree that is adjoined in it.aSuch a scheme wotdd be an alternate way of embedding TAG's in an unifieationalframework.
IIowever, it does not capture the linguistic intuitions tmderlying TAG's,and losc~ the attractive f ature of localizing depende~tcles.associated with the elementary trees, we can state the constraints amongthe dependent nodes dircctly.
IIence, in an initial tree corresponding toa simple sentence, wc can state that the main verb and the subject NP(which are part of the same initial tree) share the agreement feature.Thus, such checking, in many cases, can be precompiled (of course onlyafter lexical insertion) and need not be done dynamically.2.1 Genera l  SchemaIll unification grammars, a feature structure is associated with a nodein a derivation tree in order to describe that node and its realtion tofeatnres of other nodes in tile derivation tree.
In a TAG, any node in anelementary tree is related to the other nodes in that trec in two ways.Feature structures written in FTAG using the standard matrix notation,describing a node, ~h can be made on the basis of:1. the relation of I 1 to its supertrce, i.e., tile view of the uode from thetop.
Let us call this feature structure as t,~.2.
the rclation to its descendants, i.e., the view from below.
Thisfeature structure is called bo.Note that both the t,~ and b,~ feature structure hold of the node r l. Ina derivation tree of a CFG based unification system, wc associate onefeatnre structure with a node (the unification of these two structures)since both the statements, t and b, together hold for the node, and uofurther nodes are introduced between the node's supertrce and subtrec.This property is not trne in a TAG.
On adjunction, at a node there is~o longer a single node; rather ~ul auxiliary trec replaces the node.
Wcbelieve that this approach of ~sociating two statements with a node inthe auxiliary tree is iu the spirit of TAG's because of the OA constraintsin TAG's.
A node with OA constraints cannot bc viewed as a singlenode and must be considered as something that has to be replaced byan auxiliary tree.
t and b axe restrictions about tile auxiliary tree thatmust be adjoined at this node.
Note that if the node does not have OAconstraint then we should expect and b to be compatible.
For example,in the final sentential tree, this node will be viewed as a single entity.Thus, in general, with every internal node, ~, (i.e., where adjunctioncould take place), we associate two structures, tn and b n. With eachterminal node, we would associate only one structure 4,xtroot t fo'~t X___-~bfootFigure 4: Feature structures and adjunction4It is posslblc to allow adjunctlons at nodes corresponding to pre-lexlcal items.For example, we may wish to obtain verb-clusters by adiunctions atnodes which arelabelled ~s verbs.
In such a c~se, we will have to associate two feature structures withpre.lexical nodes too.715Let Us now consider the case when adjoining takes place as showu inthe figure 4.
The notation we use is to write alongside ach node, thet and b statements, with the t statement written above the b statement.Let us say that t~oot,b~oot aud tloo~,b/oo~ are the t and b statements ofthe root and foot nodes of the auxiliary tree used for adjunction at thenode r/.
Based on what t and b stand for, it is obvious that on adjnnctiontim statements ,~ and troot hold of the node corresponding to the root ofthe anxifiary tree.
Similarly, the statements b, and b/oot hold of the nodecorresponding to the foot of the auxiliary tree.
Thus, ou adjunction, weunify t, with t~oot, and b,~ with b/oot.
In fact, this adjunetion is permissibleonly if t,.oot and t o are cmnpatible as are b/oo~ and b,.
If we do not adjoinat the node, 0, then we unify t s With b,.
At the end of a derivation, thetree generated must not have any nodes with OA constraints.
We cheekthat by unifying the t and b feature structures of every node.?
More detailsof the definition of FTAG may be found in \[Vijayashanker 1987\].We now give an example of an initial tree and an auxiliary tree.
Wewould like to note that, just as in a TAG, the elementary trees whichare the domain of co-occurenee r strictions i available as a single unitduring each step of the derivation.
Thus, most of these co-occurenceconstraints can be eheckcd even before the tree is used in a derivation,and this checking need not be linked to the derivation process.2.2 Un i f i ca t ion  and  Const ra in tsSince we expect hat there are linguistic reasons determining why someauxiliary tree can be adjoined at a tree and why some cannot, or why somenodes have OA constraint, we would like to express these constraints inthe feature structm:es associated with nodes.
Further, as described inSection 2.1, adjunctions will be allowed only if the appropriate f aturestructures can be unified.
Thus, we expect o implement the adjoiningconstraints of TAG's simply by making declarative statements made inthe feature structures associated with the nodes to ensure that only theappropriate trees get adjoined at a node.The adjoining constraints are implemented in FTAG as follows.
No-tice, from Figure 4, t~ and troot, and b, and b.toa must be compatible foradjunction to occur.
We hope to specify some feature-values in these t, bstatements o specify the local constraints so that1.
if some auxiliary tree should not adjoined at a node (because of itsSA constraint) hen some unification involved (tu with troop, or b/oo~with b,~) in our attempt to adjoin this auxiliary tree will fail, and2.
if a node has OA constraint, we should ensure that an appropriateauxiliary tree does get adjoined at that node.
This is ensured if t,is incompatible with b,.The example, given in Figure 7, illustrates the implementation f boththe OA and SA constraint.
The view of the root node of a from below.suggests that b statement for this node makes the assertion that the valueof the tense attribute is - (or untensed).
However, the t statement shouldassert ense : + (since every complete sentence must be telised) 5.
Thus,an auxiliary tree whose root node will correspond to a tensed sentence andwhose foot node will dominate an untensed sentence can be adjoined atthis node.
Therefore, only those auxiliary trees whose main verb subcate-5t statement is more complicated than just "view from the top", t ~tatement isa statement about the node wlfile viewing the node from the top, and hence is astatement eoncenfing the entire subtree below this node (i.e., including the part dueto an auxiliary tree adjoined at the node), and ho w it constrains the derivation ofthe nodes wlfich are its siblings alld ancestors, bremains the same as before, andis the statement about this node and the subtree below it, without considering theadjunctlon at this node.716SNP VPPRO to leave~ o:+\]NP VP!
vieS\[tense:'\]I IJohn t r iesFigure 6: Illustration of implementation f SA and QA constraintsgorizes for an untensed sentence (or an infinitival clause) can be adjoinedat the root node of this initial tree.
This shows why only auxiliary treesuch as fl can be adjoined, whereas an auxiliary tree corresponding toJohn thinks S can not be adjoined since the verb thinks subcategories fora tensed sentence.
The example also serves to illustrate the implementa-tion of OA constraint at the root of a, since the t and b feature structuresfor this node are not unifiable.2.2.1 Comments  on the Imp lementat ion  f Constraints in FTAGIn the TAG formalism, local constraints are specified by enumeration.However, specification by enumeration is not a linguistically attractivesolution.
In FTAG we associate with each node two feature structureswhich are declarations of linguistic facts about the node.
The fact thatonly appropriate trees get adjoined is a corollary of the fact that onlytrees consistent with these declarations are acceptable trees in FTAG.
Asa result, in a FTAG, constraints are dynamically instantiated and arenot pre-slpecified as in a TAG.
This can be advmltageous and useful foreconomy of grammar specification.
For example, consider the derivationof the sentenceWhat do you think Mary thought John sawIn the TAG formalism, we are forced to replicate some auxiliary trees.Consider the auxiliary tree fll in the TAG fragment in Figure 7.
Sincethe intermediate phrase what Mary thought John saw is not a completesentence, we will have to use OA constraints at the root of the auxiliarytree ill.
However, tlfis root node should not have OA constraints when itis used in some other context; as in the case of the derivation ofMary thought John saw PeterWe will need another auxiliary tree, fs, with exactly the same tree struc-ture as fll except that the root of/32 will not have an OA constraint.Further, the root nodes in c~1 and c~2 have SA constraints that allowfor adjunetion only by fll and f~2 respectively: As seen in the Figure 8,corresponding to the FTAG fragment, we can make use of the fact thatconstraints are dynamically inatantiated and give only one specificationof ill.
When used in the derivation ofWhat do you think Mary thought John sawtroot inherits the feature inverted : + which it otherwise does not have,and broot inherits the feature inverted : - .
Thus, the node which corre-sponds to root of ill, by the dynamic instantiation ofthe feature structure,gets an OA constraint.
Note that there will not be any OA eoustraint innodes of the final tree corresponding toWhat do you think Mary thought John saw.Also, the root of the auxiliary tree, corresponding to Mary thought S,does not get OA constraint, when this tree is used in the derivation ofthe sentenceMary thought John saw Peter.8 ./~--..COMP~I J "~wh NP- ~P-dahri ~ NP.I ISNP_ VP-John ~t tlP-anw ~et  o?AUX Sdo NP VPn v $I Iyou thinks ( B3}tiP_ V.P~Mary  ~z NIt houghtolin}NP VPMary  v SIt boughtS~ "  ~.
\[ invert od: ~\]COMP_ Swh NP_ VP_John ~ NP-I I~IOW aFigure 7: A TAG fragment/~.,a:qAUXIdotiNP VPI v//~sflnvorled:.\] youIth inkSNP_ VP-Mary v SIt boughtFignre 8: An FTAG fragment2.3 Some Possible Linguistic Stipulations in FTAGhi this section, we will discuss some possible stipulations for a FTAGgranmmr, tIowever, at this stage, we do not want to consider these stip-ulations as a part of the formalism of FTAG.
First, some of the linguisticissues pertaining to these stipulations have not yet been settled.
Sec-ondly, ou~ ~irnary ?o~cern ~'to sp~ify/tl,?
FTA 9 formalism.
~,ther,if the form*lima haS t~) incorporate ~heie 4tip~ulatibns, it(can be done so,witbont ,lt~,ng tbe ~ochanlsm s,g~m0~n ly.The current linguistic theory u~derlying TAG's .
.
.
.
.
.
that everyfoot node has *~ NA constraint.
The justification of this stipulation isisinfilar to the projection principle in Chomsky's ~ransformation theory.
!It is appealing to state that the adjunetion .operation does not alter the.grarmnatical relations defined by the intermediate ree structures.
For~example, consider the following derivation of the ~ntenceMa~y thought John saw Bil l  hit Jill.If the derivation results in the intermediate ree corresponding to Marythought Bil l  hit Jill, then we wofild expect o obtain 'the relation of Marythinking that "Bill hit Jill".
This relation is altered by the adjunction atthe node corresponding to the foot node of the'auxiliary tree correspond-ing to Mary thought S.ff we wish to implement this stipulatio a, one solution is to insist thatonly one F-V statement is made with the foot node, i.e, the tloo~ andbloot are combined.
The definition of adjunction can be suitably altered.The second stipulation i volves the complexity of the feature structureassociated with the nodes.
So far, we have not placed any restrictions onthe growth of these feature structures.
One of the possible stipulationsthat are being considered from the point of view of linguistic relevanceis to put a bound on the information content in these feature structures.This results in a bound on the size of feature structures and hence onthe number of possible feature structures that can be associated with anode.
An FTAG grammar, which incorporates this stipulation, will beequivalent to a TAG from the point of view of generative capacity butone with an enhanced escriptive capacity.Unbounded feature structures have been used to capture the subeat-~egorization phenomenon by having feature structures that act like stacks(and hence unbounded in size), llowever, in TAG's, the elementary treesgive the subeategorization (Iomain.
As noted earlier, the elements ub-categorized by the main vert~ in an elementary tree are part of the sameelementary tree.
Thus, with the feature structures associated with theelementary trees we can just point to the subcategorized lements and donot need any further devices.
Note, that any stack based mechanism thatmight be needed for subeategorization s provided by the TAG formalismitself, in which the tree sets generated by TAG's have context free paths(unlike CFG's which have regular paths).
This additional power providedby the TAG formalism has been used to an advantage in giving an accountof West Germanic verb-raising \[Santorini 1986\].3 A Ca lcu lus  to Represent  FTAG Gram-marsWe will now consider a calculus to represent FTAG's by extending on thellogieal formulation oftbature structures given by Rounds and Kasper \[RouKasper et al 1986\].
Feature structures in this logic (henceforth called lt-!K logic) are represented asformulae.
The set of well-formed formulae inthis logic is recursively defined as follows.e::= NILTOPaI :e lel A e2e~.
V e2{pl ..... P.}where a is an atomic value, el,e2 are well-formed formulae.
NIL and(TOP cl)nvey "no in(ormation" and "inconsistent information" respec-!~ively.
~aeh pl represents a path of the form li,1 : li,z .
.
.
.
: li,m re-ispectivel~y.
This formula is interpreted as Pt .
.
.
.
= p,, and is used toiexpress reentrancy.Our representation f feature structures imilar to the I/-K logie's:representation f feature structures and differs only in the clause for reen-\]traney.
Given that we want to represent the grammar itself in our cMcu-lus, we call not represent reentrancy by a finite set of paths.
For example,suppose we wish to mate that agreement features of a verb matches with,that of its subject (note in a TAG the verb and its subject are in the sameelementary tree), tile two paths to be identified can not be stated untilwe obtain the final derived tree.
To avoid this problem, we use a set ofequations to specify the reentrancy.
The set of equations have the formgiven by xi = ei for 1 < i < n, where ~1,... ,xn are variables, el , .
.
.
,en!are formulae which could involve these variables.717For exampl% the reentrant feature structure used in Section 1.2, isrepresented by the set of equationsz = eat : S h l : y A 2 : (eat : VP  h age : z A subject : y)y = cat : N P A agr  : zWe represent a set of equations, xi = ei for 1 <: i < n asrec ( Zh .
.
.
,Xn  >~( e l , .
.
.
,en  ~.Let us now consider the representation f trees in FTAG and thefeature structures that are a~so'ciated with the nodes.
The elementaryfeature structure associated with each elementary tree encodes certainrelationships between the nodes.
Included among these relationships arethe sibling and ancestor/descendent relationships; in short, the actualstructure of the tree.
Thus, associated with each node is a feature struc-ture which encodes the subtree below it.
We use the attributes i E .hf todenote the i ~h child of a node.To understand the representation f the adjunction process, considerthe trees given in Figure 4, and in particular, the node y.
The featurestructure associated with the node where adjunction takes place shouldreflect the feature structure after adjunction and as well as without ad-junction (if the constraint is not obligatory).
Further, the feature struc-ture (corresponding to the tree structure below it) to be associated withthe foot node is not knoWn bnt gets specified upon adjunetion.
Thus, thebottom feature structure associated with the foot node, which is bloot be-fore adjunction, is instantiated on adjunction by unifying it with a featurestructure for the tree that will finally appear below this node.
Prior toadjunction, since this feature structure is not known, we will treat it asia variable (that gets instantiated on adjunction).
This treatment can be!obtained if we think of the auxiliary tree as corresponding to functionalover feature structures (by A-abstracting the variable corresponding toithe feature structure for the tree that will appear below the foot node).Adjunction correponds to applying this function to th e ?feature structurecorresponding to the subtree below the node where takes place.We will formalize representation f FTAG as follows.
If we do nottconsider adjoining at the node y, the formula for "y will be of the form(.. .t ,  1 Ab, A. .
.
/Suppose the formula for the auxiliary tree # is of the form(t~oo~ A .
.
.
bsoo,)tim tree obtained after adjunction at the node r I will the n be represente~by the formula(...t, A (t,?
?, A .
.
.
bsoo,)  A N A .
.
.
)We would like to specify one formula with the tree % and use appropri-ate operation corresponding to adjunction by ~ or the case where we donot adjoin at ~.
Imagining adjunction as function application where we~consider auxiliary trees as functions, the representation f/3 is a function isay fz, of the form~f .
( t ,oo ,  A.. .
(blo, ,  ^  f))To allow tile adjunetion of ~ at the node ~, we have to represent T by( .
.
.
t ,  A f#(bs)  ^ .
.
.
)Then, corresponding to adjunction, we use function application to obtainthe required formula.
But note that if we do not adioin at ~l, we wouldlike to represent ")" by the formula( .
.
.
t ,  A b, A ~..)which can be obtained by representing T by718(...t,~ A Z(b,~) A...)where I is the identity function.
Similarly, we inay have to attempt ad-junction at ~ by any auxiliary tree (SA constraints are handled by successor failure of unification).
Thus, if/31,...,/3, form the set of auxiliary tree,we have a function, F, given byV = AL( Im( I )  v .
.
.
v /~.
( / )  V I ( I ) )  = ~f .
( lm( f )  V .
.
.
V l~( I )  v f )and represent 7 by(.. .t,  A F(b,) A. .
.
)Ill this way, we can represent tile elementary trees (and hence tile gram-mar) in an extended version of rt-K logic (to which we add A-abstractionand application).3,1  Representing Tree Adjoining GrammarsWe will now turn our attention to the actual representation f an FTAGgrammar, having considered how the individual elementary trees are rep-resented.
According to our discussion i  the previous ection, the auxiliarytrees are represented as functions of the form Az.e where e is a term inFSTR which involves the variable ~.
If/31,..., #n are the auxiliary treesof a FTAG, G, then we have equations of the formfl = ~x.elf .
= Ax.e,~e l , .
.
.
,e~ are encodings of auxiliary trees #h. .
.
, f l ,  as discussed above.These expressions obey the syntax which is defined ~ccursively as follows.e ::= NIL::= TOP::~ Cl A e 2::~ e I V g2::---- f (e )where x js a variable over feature structures and f is a function variable.In addition, as discussed above, we have another equation given byfo = Ax./I(x) V .
.
.V  fn(~)The initial trees are represented by a set of equations of the form!
xrn ~ ~rawhere e~,.. ' ., e m are expressions which describe the initial trees at  , .
.
.
,  ~nNote that in the expressions e l , .
.
.
,  e,, e~,.. , e,,, wherever adjunction ispossible, we use the function variable f0 as described above.
The gram-mar is characterized bythe structures derivable from any one of the initialtrees.
Therefore, we add~0 ---- Zt V... V ~tnAssuming that we specify reentrancy using the Variables Yl,...~ Yk andequations Yt : e~' for 1 _ i < k, an FTAG grammar is thus representedby the set of equations of the form.first (ree(xo, xl  .
.
.
.
x,~, Yt .
.
.
.
, Yk, fo, 11 .
.
.
.
, / , )(eo,e~,.. . '
11 e"  l ,e ra ,e l , " ' ,  k,g .
.
.
.
,g , ) )a.2 Semantics of FTACISo far, we have only considered only the syntax of the calcnlus used tbrrepresenting fcatnre structures and FTAG grammars.
Ia this see@m, weconsider the mathematical modelling of the calculus.
This can be used toshow that the set of equations describing a grammar will always have asolution, which we can consider as the denotation of the grammar.Tire model that we present here is based on the work by llxnmds andKssper \[Pmund, et al 1986\] and in particular their notion ofsatisfiabilityof formulae.
\[,st I" be the space of partial flmetions (with the parLialordering E, the standard ordering on partial functions) defined by /" =(L .-~ F) + A where A is set of atoms and L is set of labels.
This spacehas been characterized by Pereira and Sheiber \[Pereira ctal .
1984\].
Anyexpression e (which is not a hmction) can be thought w~ upward closedsubset of F (the set of partial functions which satisfy the descriptionel.
Note that if n partial fimetion satisties a description then so willany function above it.
We let U(F) stm\]d for the collection of upwardclosed subsets of F. Expressions are interpreted relative to an envirmnnent(since we have variables as cxpressions, wc need to consider environmentswhich map era'tables to a member of U(F)).
Functimm get interpreted ascontinuous functions in tim space U(/;') -~ U(F'), with the enviromncntmapping fimetion variables to fimctions on U(P).
Note that the orderingon U(F) is the inverse of set inclusion, since more functions atisfy thedescription of a more general featnre structure.Because of space limitations, we cannot go into the details of theinterpretations function.
\[{onghly, the interpretation is as follows.
Weinterpret he expression a as the set containing just the atom "a"; theexpressiou 1 : e is interl)reted as tire set of fnnctions which map / to anelement iu the .
':at denoted by e; eonjmmtion and disjunetion are treatedas intersection snd union respectively except hat we have to ensure thatrely value assigned t<) a wtriable in one of the eonjunets i the same as thevalne assigned to the same variable in the other conjnncg.Since the grammar is given by a set of equation;;, the denotation isgiven by tim least solution.
This is obtaiued by considering the fimctioucorresponding to the set of equations in the standard way, and obtainingits least fixpoint.
Details of these issues rnay be found in \[Vij ayashaaker i 9In \[Vijayashanker 1987\], we have shown that any set of equations hasa solution.
Thus, we can Live semantics for recursivc set of eqnatkmswhich may be used to describe cyclic feature structure.
For example, wegive the solution for equations uch asx: :  f : xAg:aAs shown in \[V \]ayas ran mr 1987\], we can obtain the least lixedopoint byassuming the le~rst vahm for x (which is the cntirc set of partial fnnetionsor the intcrl)retatkm of NIL) mrd obtaining better and better approxima-,lions.
The least npper bound of these approximations (which will give theleast fixed-point) corresponds to the reqnired cyclic structure, ;is desired.4 Conc lus ions  and  }~Nl~ure WorkWe have shown a method of embedding TAG's in a feature structmmbased framewo?k.
This system takes advantage of the extended omainof locality of TAG's and allows lingusitic statements abont cooccurenccof features of dependent i errLs to be stated within elententary trees.
Wehave shown thst we can make a clearer statement of adjoining constraintsin FTAG'a than in TAG's.
The specification of local constraints in a 'tAGis by enmneration, which is not satisfactory from the liuguistic point ofview.
We show that in FTAG, we em~ avoid such specilications, insteadthe dedarative statements nrade about nodes are sufficient o mmure Ihatonly the appropriate flees get adjoined at a node.
Furthermore, we alsoillu.strate how duplication or iuformation can be aw~ided in FTAC's incomparisoJ~ with TA(Us.
I~ cau bc shown that aualyses~ that require extensions of TA($'s using multi-component adjoining (simultaneous adjunclion of a set of trees in distinct nodes of an dementary tree) ~ definedin \[\]oshi 1987, Kroeh 1987\], can be easily stated iu FTAG's.It is possible to parse an I,"\]?A(I grammar using the Earley-style parselgiven by \[Sehabes t aL 1988\].
This l,;arley-style parser can extendedin the same way that Sheiber extended the Earley parser lee PA'I3I:II \[Slfieber 1985b\].
The reason this extensi,~lt of the TAll parser to one fl)tI:'FAG is po,~;sible fi)llows from the lact that the treatment of haviJ,g thet and b feature structures fl)r every node in F'I)A(~ is compatible with the Icharacterization, adopted in the parsing algorithm in \[Schabes t al.
:19881,of a node in le.rms of two subs\[rings.In \[Vii ayashanker 1987\], we haw~ prop osed a restr toted version (.f FTA GIn a manaer similar to GPSG, we place a bound on the information con-tent or' feature structures associated with the nodes of trees used ill thegrammar.
The resulting system, 1U"TAG, g~nerates the same language asTAG's, and yet retains an increased escriptive and geaeraLive capacitydue to the extended omain of locality o{ TAG's.Fiually, in this lml)er, we have brMly discussed a calculus to representFTAG grammars.
This cab:alas is an exteation of the llounds-Kasperlogic for fi:ature structures, q'he extmltions deM with A abstraction ove~feature structures and flmetiou application, which is used to ehagacterizdauxiliary trees and the adjunctiml operation.
\[Vijayashanker 19871 Livesa detailed escription of this calculus and its semantics.ReferencesJoshi, A. K. 1985.
1low Mnch Context-Sensitivity ~ Necessary for Chai:acterizing Structural I)escription.
'~-- 'lh'ee Adjohling Crammms.
In: 1).I)ow~y, 1,.
Karttunen, and A. Zwicl,'y, Eds., Nal~tral Lasgaaqe \]Jroce.%ia 3-- Theoretical, 6'om.palaiio~al nd Psychological ()cr:JlJeclie~.
Camb~idv/~University Press, New 'g'ork, NY.aoshi, A. K t987.
An Introduction to qtec Adjoining (~Fall'tJli2{l~.
11}2A.
Manaster-II,amer, Ed., Mathematics of La'apuape.
3ohn lienjamins,Antsterdam.J~shi, A. K., Levy, L. S., mid 'Ihkahaahi, M. 1975.
Tree Ad.im~ct Crammars .
.L  Compel.
,C;yst.
Set., 10(1).Kasper, E.. and Kounds, W. C. 1986.
A Logical Semantics fr,r \["ealm'~'Structures.
In: 24 ~h meeting Assoc.
(2ampul.
Lisg.
"Kroeh, A.
1987.
Subjaceney in a Tree A,Ijoh g C',ramnmr.
In: A.Manaster-Raumr, I",d., Malhemalics of Language..loire I~enjamh,s, A msterdam.Kroch, A. and Josbi, A. K. 1985.
Liuguiatic lgele)Jaaee oj 7?
'cc AdjoiaiagGrammars.
Technieal Rel)orl; MS-CIS 85-18, Deparl;mcnl of ('OItIpULeland hlformatiml Science, University of Pennsylvania, Philadell,hiaPereira, F. C. N. and Shieber, S. 1984.
The Semantics of Gramme1 ~br-malisms Seen aa Computer Languages.
la: IO th luter~talionM C, nfcreneeon Compalalional Linguistics.I(~mnds, W. C. and Kaspcr, 1{.
1986.
A complete Logical (:;dcalm+ 17,Ll/ecord Stru(:tures Representing Linguistic hlfornratiou.
11l: tEE/'; 5;ymposture o's Loyic and Computer Science.Santoriui, B.
1986.
The West Germanic Ver'b~t~aisi~vi CvJ>;b'~*clio,~: A7~'ec Adjoining Grammar Analysis.
Master's thesis, University el Pcmvsylvania, Philadelphi~ h PA.Schabes, Y. and Joshi, A. K. 198g.
An Earley-Type Parsing Algorithmfor ~t~'ee Adjoining Grarmnars.
In: 26 *h inertia 9 Assoc.
Comp~ft.
/;int.Shieber, S. M. An Introduction to U'azficaZio'a.
Based Apl,roachc to (/r~m-mar.
Presented as a Tntor\[al SalMon 23 ''d meeting Assoe ('onqmi,.
l,itlg.,1985.Shieber, S. M. 1985.
Using R~sttiction to Extend Parsieg Algorilhtxmfor Comlflex.feature based Formalisms.
In: 23 ra mecii~ 9 A.~soc.
CompsLI)ing.address a,d page.s82--93.Vijayashanker, K. 1987.
A ,q_Judy of Tcc Atl~oinin9 (;t'ammar.,~.
PM)thesis, University of Pennsylvania, lqJihulelphia, Pa.73 9
