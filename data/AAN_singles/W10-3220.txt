Proceedings of the 8th Workshop on Asian Language Resources, pages 153?160,Beijing, China, 21-22 August 2010. c?2010 Asian Federation for Natural Language Processing________________________________1http://www.grammaticalframework.org2 In given example code ?fun?
and ?cat?
belongs to abstract syntax,  ?lin?
and ?lincat?
belongs to concrete syntaxAn Open Source Urdu Resource GrammarShafqat M VirkDepartment of Applied ITUniversity of Gothenburgvirk@chalmers.seMuhammad HumayounLaboratory of MathmaticsUniversity of Savoiemhuma@univ-savoie.frAarne RantaDepartment of CS & EngUniversity of Gothenburgaarne@chalmers.seAbstractWe develop a grammar for Urdu inGrammatical Framework (GF).
GF is aprogramming language for definingmultilingual grammar applications.
GFresource grammar library currentlysupports 16 languages.
These grammarsfollow an Interlingua approach andconsist of morphology and syntaxmodules that cover a wide range offeatures of a language.
In this paper weexplore different syntactic features of theUrdu language, and show how to fit themin the multilingual framework of GF.
Wealso discuss how we cover some of thedistinguishing features of Urdu such as,ergativity in verb agreement (see Sec4.2).
The main purpose of GF resourcegrammar library is to provide an easyway to write natural languageapplications without knowing the detailsof syntax, morphology and lexicon.
Todemonstrate it, we use Urdu resourcegrammar to add support for Urdu in thework reported in (Angelov and Ranta,2010) which is an implementation ofAttempto (Attempto 2008) in GF.1.
IntroductionUrdu is an Indo-European language of the Indo-Aryan family, widely spoken in south Asia.
It isa national language of Pakistan and one of theofficial languages of India.
It is written in amodified Perso-Arabic script from right to left.As regards vocabulary, it has a strong influenceof Arabic and Persian along with someborrowing from Turkish and English.
Urdu is anSOV language having fairly free word order.
Itis closely related to Hindi as both originatedfrom the dialect of Delhi region called khari boli(Masica, 1991).We develop a grammar for Urdu that addressesproblems related to automated text translationusing an Interlingua approach and provide a wayto precisely translate text.
This is described inSection 2.
Then we describe different levels ofgrammar development including morphology(Section 3) and syntax (Section 4).
In Section 6,we discuss an application in which a semantics-driven translation system is built upon thesecomponents.2.
GF (Grammatical Framework)GF (Grammatical Framework, Ranta 2004) is atool for working with grammars, implementing aprogramming language for writing grammarswhich in term is based on a mathematical theoryabout languages and grammars1.
Manymultilingual dialog and text generationapplications have been built using GF.
GFgrammars have two levels the abstract and theconcrete syntax2.
The abstract syntax islanguage independent and is common to alllanguages in GF grammar library.
It is based oncommon syntactic or semantic constructions,which work for all the involved languages on anappropriate level of abstraction.
The concretesyntax is language dependent and defines amapping from abstract to actual textualrepresentation in a specific language2.
GF usesthe term ?category?
to model different parts ofspeech (e.g verbs, nouns adjectives etc.).
Anabstract syntax defines a set of categories, aswell as a set of tree building functions.
Concretesyntax contains rules telling how these trees arelinearized.
Separating the tree building rules(abstract syntax) from linearization rules(concrete syntax) makes it possible to havemultiple concrete syntaxes for one abstract.
This153makes it possible to parse text in one languageand translate it to multiple languages.Grammars in GF can be roughly classified intotwo kinds: resource grammars and applicationgrammars.
Resource grammars are generalpurpose grammars (Ranta, 2009a) that try tocover the general aspects of a languagelinguistically and whose abstract syntax encodessyntactic structures.
Application grammars, onthe other hand, encode semantic structures, butin order to be accurate they are typically limitedto specific domains.
However, they are notwritten from scratch for each domain, but theyuse resource grammars as libraries (Ranta2009b).Previously GF had resource grammars for 16languages: English, Italian, Spanish, French,Catalan, Swedish, Norwegian, Danish, Finish,Russian, Bulgarian, German, Interlingua (anartificial language), Polish, Romanian andDutch.
Most of these languages are Europeanlanguages.
We developed resource grammar forUrdu making it the 17th in total and the firstsouth Asian language.
Resource grammars forseveral other languages (e.g.
Arabic, Turkish,Persian, Maltese and Swahili) are underconstruction.3.
MorphologyIn GF resource grammars a test lexicon of 350words is provided for each language.
Thesewords are built through lexical functions.
Therules for defining Urdu morphology areborrowed from (Humayoun et el., 2006), inwhich Urdu morphology was developed in theFunctional Morphology toolkit (Forsberg andRanta, 2004).
Although it is possible toautomatically generate equivalent GF code fromit, we wrote the rules of morphology fromscratch in GF, to receive better abstractions thanare possible in generated code.
Furthermore, weextend this work by including compound words.However, the details of morphology are beyondthe scope of this paper, and its focus is onsyntax.4.
SyntaxWhile morphological analysis deals with theformation and inflection of individual words,syntax shows how these words (parts of speech)are grouped together to build well formedphrases.
In this section we show how this worksand is implemented for Urdu.4.1 Noun Phrases (NP)When nouns are to be used in sentences as partof speech, then there are several linguisticdetails which need to be considered.
Forexample other words can modify a noun, andnouns have characteristics such as gender,number etc.
When all such required details aregrouped together with the noun, the resultingstructure is known as noun phrase (NP).
Thebasic structure of Urdu noun phrase is, ?
(M) H(M)?
according to (Butt M., 1995), where (M) isa modifier and (H) is the head of a NP.
Head isthe word which is compulsory and modifiers canor cannot be there.
In Urdu modifiers are of twotypes pre-modifiers i.e modifiers that comebefore the head for instance (  kali: bli:?black cat?
), and post-modifiers which comeafter the head for instance (tm sb ?youall?).
In GF resource library we represent NP asa recordlincat NP : Type = {s : NPCase => Str ; a :Agr} ;whereNPCase = NPC Case | NPErg | NPAbl|NPIns|NPLoc1NPLoc2|NPDat;|NPAccCase = Dir | Obl | Voc ;Agr = Ag Gender Number UPerson ;Gender = Masc | Fem ;UPerson = Pers1| Pers2_Casual| Pers2_Familiar | Pers2_Respect| Pers3_Near | Pers3_Distant;Number = Sg | Pl ;Thus NP is a record with two fields, ?s?
and ?a?.?s?
is an inflection table and stores differentforms of a noun.The Urdu NP has a system of syntactic caseswhich is partly different from the morphologicalcases of the category noun (N).
The casemarkers that follow nouns in the form of post-positions cannot be handled at lexical level154through morphological suffixes and are thushandled at syntactic level (Butt et el., 2002).Here we create different forms of a noun phraseto handle case markers for Urdu nouns.
Here is ashort description of the different cases of NP :?
NPC Case: this is used to retain theoriginal case of Noun?
NPErg: Ergative case with case marker?ne: ???
NPAbl: Ablative with case marker ?se:?
??
NPIns: Instrumental case with casemarker ?se: ?
??
NPLoc1: Locative case with casemarker ?mi: ?
???
NPLoc2: Locative case with casemarker ?pr ??
NPDat: Dative case with case marker?k?
??
NPAcc: Accusative case with casemarker ?k?
?And ?a?
(Agr in the code sample given inprevious column) is the agreement feature of thethe noun that is used for selecting theappropriate form of other categories that agreewith nouns.A noun is converted to an intermediate categorycommon noun (CN; also known as N-Bar)which is then converted to NP category.
CNdeals with nouns and their modifiers.
As anexample consider adjectival modification:fun AdjCN   : AP -> CN  -> CN ;lin  AdjCN ap cn = {s = \\n,c =>ap.s !
n !
cn.g !
c !
Posit ++ cn.s !
n !
c ;g = cn.g} ;The linearization of AdjCN gives us commonnouns such as ( ???
?
?n ?a pani: ?coldwater?)
where a CN ( pani: ?water?)
ismodified by an AP ( ???
, ?
?n ?a ?cold?
).Since Urdu adjectives also inflect in number,gender, case and degree, we need to concatenatethe appropriate form of adjective that agreeswith common noun.
This is ensured by selectingthe corresponding forms of adjective andcommon noun from their inflection tables usingselection operator (?!?).
Since CN does notinflect in degree but the adjective does, we fixthe degree to be positive (Posit) in thisconstruction.
Other modifiers include possiblyadverbs, relative clauses, and appositionalattributes.A CN can be converted to a NP using differentfunctions: common nouns with determiners;proper names; pronouns; and bare nouns as massterms:fun DetCN   : Det -> CN -> NP  (e.g the boy)fun UsePN   : PN -> NP (e.g John)fun UsePron : Pron -> NP  (e.g he)fun MassNP     : CN -> NP (e.g milk)These different ways of building NP?s, whichare common in different languages, are definedin the abstract syntax of the resource grammar,but the linearization of these functions islanguage dependent and is therefore defined inthe concrete syntaxes.4.2 Verb Phrases (VP)A verb phrase is a single or a group of wordsthat act as a predicate.
In our construction Urduverb phrase has following structurelincat VP = {s    : VPHForm => {fin, inf: Str} ;obj  : {s : Str ; a : Agr} ;vType : VType ;comp : Agr => Str;embComp : Str ;ad  : Str  } ;whereVPHForm =VPTense VPPTense Agr| VPReq HLevel | VPStemandVPPTense = VPPres |VPPast |VPFutr;HLevel = Tu |Tum |Ap |Neutr155In GF representation a VP is a record withdifferent fields.
The most important field is ?s?which is an inflectional table and stores differentforms of Verb.At VP level we define Urdu tenses by using asimplified tense system, which has only threetenses, named VPPres, VPPast, VPFutr.
In caseof VPTense for every possible combination ofVPPTense and agreement (gender, number,person) a tuple of two string values {fin, inf :Str} is created.
?fin?
stores the coupla (auxiliaryverb) , and ?inf?
stores corresponding form ofverb.
VPStem is a special tense which stores theroot form of verb.
This form is used to create thefull set of Urdu tenses at clause level (tenses inwhich the root form of verb is used, i.e.perfective and progressive tenses).
Handlingtenses at clause level rather than at verb phraselevel simplifies the VP and results in a moreefficient grammar.The resource grammar has a common APIwhich has a much simplified tense system,which is close to Germanic languages.
It isdivided into tense and anteriority.
There are onlyfour tenses named as present, past, future andconditional, and two possibilities of anteriority(Simul , Anter).
This means it creates 8combinations.
This abstract tense system doesnot cover all the tenses in Urdu.
We havecovered the rest of tenses at clause level, eventhough these tenses are not accessible by thecommon API, but still can be used in languagespecific modules.Other forms for verb phrases include requestform (VPReq), imperative form (VPImp).
Thereare four levels of requests in Urdu.
Three ofthem correspond to (t?
, tm, a:p ? ) honorlevels and the fourth is neutral with respect tohonorific levels.
.The Urdu VP is a complex structure that hasdifferent parts: the main part is a verb and thenthere are other auxiliaries attached to verb.
Forexample an adverb can be attached to a verb as amodifier.
We have a special field ?ad?
in our VPrepresentation.
It is a simple string that can beattached with the verb to build a modified verb.In Urdu the complement of a verb precedes theactual verb e.g (??
? ??
???
?o d?
?na t?ahti:he: ?she want to run?
), here (? t?ahna ?want?
)is complement of verb (???
d?
?na ?run?
),except in the case where, a sentence or aquestion is the complement of the verb.
In thatcase complement of the verb comes at the veryend of clause e.g (?o khta he: kh ?o d?
?ti: he:   ????
??
?
??
???
? ?he says that she runs?
).We have two different fields named ?compl?
and?embCompl?
in the VP to deal with thesedifferent situations.?vType?
field is used to store information abouttype of a verb.
In Urdu a verb can be transitive,intransitive or double-transitive (Schmidt R. L.,1999).
This information is important whendealing with ergativity in verb agreement.
Theinformation about the object of the verb is storedin ?obj?
field.
All this information that a VPcarries is used when a VP is used in theconstruction of a clause.A distinguishing feature of Urdu verb agreementis ?ergativity?.
Urdu is one of those languagesthat shows split ergativity at verb level.
Finalverb agreement is with direct subjective exceptin the transitive perfective tense.
In transitiveperfective tense verb agreement is with directobject.
In this case the subject takes the ergativeconstruction (subject with addition of ergativecase marker (ne: ?
).However, in the case of the simple past tense,verb shows ergative behavior, but in case ofother perfective tenses (e.g immediate past,remote past etc) there are two differentapproaches, in first one auxiliary verb (t?ka $)is used to make clauses.
If (t?ka $) is used,verb does not show ergative behavior and finalverb agreement is with direct subjective.Consider the following example??
$ %&' ? ?l?ka Direct ktab Direct xri:d Root t?ka aux_verb he:The boy has bought a bookThe second way to make the same clause is?
'&%* ?
? ?
??l?ke: ne: Erg ktab Direct_Fem xri:di: Direct_Fem he:The boy has bought a bookIn the first case the subject (l?ka, ? ?boy?)
isin direct case and auxiliary verb agrees tosubject, but in second case verb is in agreementwith object and ergative case of subject is used.However, in the current implementation wefollow the first approach.156In the concrete syntax we ensure this ergativebehavior through the following code segment inGF.
However the code given here is just asegment of the code that is relevant.case vt of {VPPast => case vp.vType of {(Vtrans| VTransPost) => <NPErg, vp.obj.a>_                                => <NPC Dir, np.a>} ;_ => <NPC Dir, np.a>} ;e.g in case of simple past tense if verb istransitive then ergative case of noun is used andagreement is with object of verb.
In all othercases direct case of noun is used and agreementis with subject of verb.A VP is constructed in different ways; thesimplest isfun UseV     : V   -> VP ;where V is the morphological category and VPis the syntactic category.
There are other ways tomake a VP from other categories, orcombinations of categories.
For examplefun AdvVP    : VP -> Adv -> VP ;An adverb can be attached to a VP to make anadverbial modified VP.
For example (i:ha?
??&	)4.3 Adjective Phrases (AP)Adjectives (A) are converted into the muchricher category adjectival phrases (AP) at syntaxlevel.
The simplest function to convert isfun PositA  : A  -> AP ;Its linearization is very simple, since in our caseAP is similar to A e.g.fun PositA a = a ;There are other ways of making AP for examplefun ComparA : A  -> NP -> AP ;When a comparative AP is created from anadjective and a NP, constant ?se: ?
?
is usedbetween oblique form of noun and adjective.
Forexample linearization of above function islin ComparA a np = {s = \\n,g,c,d => np.s !
NPC Obl ++ "se:"++ a.s !
n !
g !
c !
d ;} ;4.4 ClausesA clause is a syntactic category that has variabletense, polarity and order.
Predication of a NPand VP gives simplest clausefun PredVP    : NP -> VP -> Cl ;The subject-verb agreement is insured throughagreement feature of NP which is passed to verbas inherent feature.
A clause is of following typelincat Clause : Type = {s : VPHTense =>Polarity => Order => Str} ;Here VPHTense represents different tenses inUrdu.
Even though current abstract level ofcommon API does not cover all tenses of Urdu,we cover them at clause level and can beaccessed through language specific module.
So,VPHTense is of following typeVPHTense =  VPGenPres | VPPastSimple| VPFut | VPContPres| VPContPast | VPContFut| VPPerfPres  | VPPerfPast| VPPerfFut    | VPPerfPresCont| VPPerfPastCont| VPPerfFutCont | VPSubjPolarity is used to make positive and negativesentences; Order is used to make simple andinterrogative sentences.
These parameters are offollowing formsPolarity  = Pos | NegOrder    = ODir | OQuestPredVP function will create clauses withvariable tense, polarity and order which are157fixed at sentence level by different functions,one is.fun UseCl    : Temp -> Pol -> Cl  -> SHere Temp is syntactic category which is in theform of a record having field for Tense andAnteriority.
Tense in the Temp category refersto abstract level Tense and we just map it toUrdu tenses by selecting the appropriate clause.This will create simple declarative sentence,other forms of sentences (e.g Questionsentences) are handled in Questions categoriesof GF which follows next.4.5 Question Clauses and  QuestionSentencesCommon API provides different ways to createquestion clauses.
The simplest way is to createfrom simple clausefun QuestCl     : Cl -> QCl ;In Urdu simple interrogative sentences arecreated by just adding ?ki:a ?
at the start of adirect clause that already have been created atclause level.
Hence, the linearization of abovefunction simply selects appropriate form ofclause and adds ?ki:a ?
at the start.
Howeverthis clause still has variable tense and polaritywhich is fixed at sentence level e.gfun UseQCl   : Temp -> Pol -> QCl -> QSOther forms of question clauses include clausesmade with interrogative pronouns (IP),interrogative adverbs (IAdv), and interrogativedeterminers (IDet), categories.
Some of thefunctions for creating question clauses arefun QuestVP     : IP -> VP -> QCl  (e.g whowalks)fun QuestIAdv   : IAdv -> Cl -> QCl (e.g whydoes he walk)IP, IAdv, IDet etc are built at morphologicallevel and can also be created with followingfunctions.fun AdvIP     : IP -> Adv -> IPfun IdetQuant : IQuant -> Num -> IDet ;fun PrepIP    : Prep -> IP -> IAdv ;5.
ExampleAs an example consider the translation offollowing sentence from English to Urdu, to seehow our proposed system works at differentlevels.He drinks hot milk.Figure 1 shows the parse tree for this sentence.As a resource grammar developer our goal is toprovide correct concrete level linearization ofthis tree for Urdu.Figure 1.
Parse tree of an example sentenceThe nodes in this tree represent differentcategories and its branching shows how aparticular category is built from other categoriesand/or leaves (words from lexicon).
In GFnotation these are the syntactic rules which aredeclared at abstract level.
For example categoryCN can be built from an AP (adjectival phrase)and a CN.
So in GF representation it hasfollowing type signature.fun AdjCN   : AP -> CN  -> CN ;A correct implementation of this rule in Urduconcrete syntax ensures correct formation of acommon noun (?
????.
grm d?d?
?hot milk?
)from a CN (????
d?d?
?milk?)
modified by anAdjective ( ?.
, grm  ?hot?
).158______________________________3http://www.grammaticalframework.org/lib/doc/synopsis.htmlA NP is constructed from this CN by one of theNP construction rules (see section 4.1 fordetails).
A VPSlash (object missing VP) is buildfrom a two place verb ( pi:ta ?drinks?).
ThisVPSlash is then converted to VP throughfunctionfun ComplSlash : VPSlash -> NP -> VP ;Resulting VP and NP are grouped together tomake a VP (??
 ?
????.
?grm d?d?
pi:ta he:?drinks hot milk?).
Finally clause (??
 ?
????.??
?h grm d?d?
pi:ta he: ?he drinks hot milk?)
isbuild from NP (??
?h ?he?)
which is build frompronoun (??
?h ?he?)
and VP (??
 ?
???
?.grm d?d?
pi:ta he: ?drinks hot milk?).
Languagedependent concrete syntax assures that correctforms of words are selected from lexicon andword order is according to rules of that specificlanguage.
While, morphology makes sure thatcorrect forms of words are built during lexicondevelopment.6.
An application: AttemptoAn experiment of implementing Controlledlanguages in GF is reported in (Angelov andRanta, 2010).
In this experiment, a grammar forAttempto Controlled English (Attempto, 2008)is implemented and then ported to six languages(English, Finnish, French, German, Italian, andSwedish) using the GF resource library.
Todemonstrate the usefulness of our grammar andto check its correctness, we have added Urdu tothis set.
Now, we can translate Attemptodocuments between all of these seven languages.The implementation followed the general recipefor how new languages can be added (Angelovand Ranta, 2009) and created no surprises.However the details of this implementation arebeyond the scope of this paper.7.
Related WorkA suite of Urdu resources were reported in(Humayoun et el., 2006) including a fairlycomplete open-source Urdu morphology and asmall fragment of syntax in GF.
In this sense, itis a predecessor of Urdu resource grammar,implemented in a different but relatedformalism.Like the GF resource library, Pargram project(Butt et el., 2007) aims at building a set ofparallel grammars including Urdu.
Thegrammars in Pargram are connected with eachother by transfer functions, rather than acommon representation.
Further, the Urdugrammar is still one of the least implementedgrammars in Pargram at the moment.
Thisproject is based on the theoretical framework oflexical functional grammar (LFG).Other than Pargram, most work is based on LFGand translation is unidirectional i.e.
fromEnglish to Urdu only.
For instance, English toUrdu MT System is developed under the UrduLocalization Project (Hussain, 2004), (Sarfrazand Naseem, 2007) and (Khalid et el., 2009).Similarly, (Zafer and Masood, 2009) reportsanother English-Urdu MT system developedwith example based approach.
On the otherhand, (Sinha and Mahesh, 2009) presents astrategy for deriving Urdu sentences fromEnglish-Hindi MT system.
However, it seems tobe a partial solution to the problem.8.
Future WorkThe common resource grammar API does notcover all the aspects of Urdu language, and non-generalizable language-specific features aresupposed to be handled in language-specificmodules.
In our current implementation of Urduresource grammar we have not covered thosefeatures.
For example in Urdu it is possible tobuild a VP from only VPSlash (VPSlashcategory represents object missing VP) e.g (?
? k?ata he:) without adding the object.
Thisrule is not present in the common API.
Onedirection for future work is to cover suchlanguage specific features.Another direction for future work could be toinclude the causative forms of verb which arenot included in the current implementation dueto efficiency issues.9.
ConclusionThe resource grammar we develop consists of44 categories and 190 functions3 which cover afair enough part of language and is enough for159building domain specific application grammarsincluding multilingual dialogue systems,controlled language translation, softwarelocalization etc.
Since a common API formultiple languages is provided, this grammar isuseful in applications where we need to parseand translate the text from one to many otherlanguages.However our approach of common abstractsyntax has its limitations and does not cover allaspects of Urdu language.
This is why it is notpossible to use our grammar for arbitrary textparsing and generation.10.
ReferencesAngelov K. and  Ranta A.
2010.
Implementingcontrolled Languages in GF.
Controlled NaturalLanguage (CNL) 2009, LNCS/LNAI Vol.
5972(To appear)Attempto 2008.
Project Homepage.attempto.ifi.uzh.ch/site/Butt M., 1995.
The Structures of Complex Predicatein Hindi Stanford: CSLI PublicationsButt M., Dyvik H., King T. H.,  Masuichi H.,  andRohrer C.  2002.
The Parallel Grammar Project.In Proceedings of COLING-2002 Workshop onGrammar Engineering and Evaluation.
pp.
1-7.Butt, M. and King, T. H. 2007.
Urdu in a ParallelGrammar Development Environment'.
In T.Takenobu and C.-R. Huang (eds.)
LanguageResources and Evaluation: Special Issue on AsianLanguage Processing: State of the Art Resourcesand Processing 41:191-207.Forsberg M., and Ranta A., 2004.
FunctionalMorphology.
Proceedings of the Ninth ACMSIGPLAN International Conference of FunctionalProgramming, Snowbird, Utah.Humayoun M., Hammarstr?m H., and  Ranta A.Urdu Morphology, Orthography and LexiconExtraction.
CAASL-2: The Second Workshop onComputational Approaches to Arabic Script-basedLanguages, July 21-22, 2007, LSA 2007Linguistic Institute, Stanford University.
2007Hussain, S. 2004.
Urdu Localization Project.COLING:WORKSHOP ON ComputationalApproaches to Arabic Script-based Languages,Geneva.
pp.
80-81Khalid, U., Karamat, N., Iqbal, S. and Hussain, S.2009.
Semi-Automatic Lexical FunctionalGrammar Development.
Proceedings of theConference on Language & Technology 2009.Masica C., 1991.
The Indo-Aryan Languages,Cambridge, Cambridge University Press, ISBN9780521299442.Ranta A., Grammatical Framework: A Type-Theoretical Grammar Formalism.
The Journal ofFunctional Programming 14(2) (2004) 145?189.Ranta A.
The GF Resource Grammar LibraryA systematic presentation of the library from thelinguistic point of view.
to appear in the on-linejournal Linguistics in Language Technology,2009a.Ranta A. Grammars as Software Libraries.
FromSemantics to Computer Science, CambridgeUniversity Press, Cambridge, pp.
281-308, 2009b.Rizvi, S. M. J.
2007.
Development of Algorithms andComputational Grammar of Urdu.
Department ofComputer & Information Sciences/ PakistanInstitute of Engineering and Applied SciencesNilore Islamabad.
Pakistan.Sarfraz  H. and  Naseem T., 2007.
SentenceSegmentation and Segment Re-Ordering forEnglish to Urdu Machine Translation.
InProceedings of the Conference on Language andTechnology, August 07-11, 2007, University ofPeshawar, Pakistan.Schmidt R. L., 1999.
Urdu an EssentialGrammar,Routledge Grammars.Sinha R., and  Mahesh K., 2009.
Developing English-Urdu Machine Translation Via Hind., ThirdWorkshop on Computational Approaches toArabic Script-based Languages (CAASL3) inconjunction with The twelfth Machine TranslationSummit.
Ottawa, Ontario, Canada.Zafar  M. and Masood  A., 2009.
Interactive Englishto Urdu Machine Translation using Example-Based Approach.
International Journal onComputer Science and Engineering Vol.1(3),2009, pp 275-282.160
