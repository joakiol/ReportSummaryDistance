Modularizing Contexted ConstraintsJohn Griffith*Seminar fiir SprachwissenschaftUniversitgt 'FiibingenK1.
Wilhehnstr.
113,D-72074 Tiibingen, Germanygriflith4~)sfknphil.uni-tuebingen.deAbstractThis paper describes a nlethod for com-piling a constraint-based grammar intoa potentially inore efficient form for pro-cessing.
This method takes dependentdisjunctions within a constraint formulaand factors them into non-interactinggroups whenever possibh; by determiningtheir independence.
When a group of de-pendent disjunctions is split into slnallergroups, an exponential amount of redun-dant information is reduced.
At runtime,this ineans that all exponential alnountof processing can be saved as well.
Sincethe performance of an algorithm ibr pro-cessing constraints with dependent dis-jmmtions is highly deterxnined by its in-put, the transformatioll presented in thispaper should prove beneficial for all suchalgorithms.1 Introduct ionThere are two facts that conspire to make tiletreatment of disjunction an important consider-ation when building a natural language process-ing (NLP) system.
The first fact is that nat-ural languages are full of ambiguities, and ina grammar many of these ambiguities are de-scribed by disjunctions.
The second fact is thatthe introduction of disjmmtion into a grammarcauses processing tilne to increase exponentiallyin the number of disjunets.
This means that anearly linear-time operation, such as uififieation ofImrely conjunctive feature structures, becomes anexponential-time problem as soon as disjunctionsare included, t Since disjunction is unlikely to dis-* Th is  work was sponsored by Teilprojekt B4"t~?om Constraints to Rules: Compilation of lipS(;"of the Sonderforsehungsbereieh 340 of the DeutscheForsehungsgemeinschaft.
I would also like to thankDale Gerdemann and Guido Minnen for helpfltl com-ments on the ideas presented here.
All remaining er-rors are of course my own.tAssuming  P # NILappear from natur~fl language gralnlnars, control-ling its form (:all save exponential amounts of time.This paper introduces all etficient normal tbrmfor processing dependent disjunctive constraintsand an operation for compilation into this normalform.
This ot)eration , modularization, can reduceexponential alnounts of redtmdant information ina grainmar and can consequently save correspond-ing alnounts of processing time.
While this oper-ation is general enough to be applied to a widevariety of constraint systems, it; was originally de-signed to optimize processing of dependent dis-junctions in featm'e structure-based grammars.
Inparticular, modular fea.tuie structures are moreeflicient R)r unification than non-Inodulm' ones.Since ill many current NLP systems, a signiti-cant amount of tilne is spent performing unifica-tion, optimizing feature structures for unillcatiollshouhl increase the tmrtbrmance of these, syst;ems.Many algorithms for etticient mfitication of leatare structures with dependent disjunctions havebeen propose.d (Maxwell and Kaplan, 1989; F, iseleand DSrre, 1990; Gerdemann, 1991; StrSmbSek,1992; Griflith, 1.996).
However, all of these al-gorithms sutfer from a common problem: thc.irperformance is highly deternfined by their inputs.All of these algorithms will perform at their bestwhen their dependent disjunctions interact as lit-tle as possible, but if all of the disjunctions inter-act, then these algorithms may perform redundantcomputations.
The need for ef\[icient inputs hasbeen noted in the literature 2 but there have beenfew attempts to automatically optilnize gr;mnnarstor disjunetiw; unification algorithms.The modularization algorithm presented in thispaper takes existing dependent disjunctions andsplits them into independent groups by deterlnin-ing which disjunctions really interact.
Indel}en-dent groups of disjunctions can be processed sepa-rat;ely during unification rathe, r than having to tryevery combination of one group with every com-bination of every other group.This pat)er is organized as follows: Section 2gives an informal introduction to dependent dis-~Cf.
(Maxwell and Kaplan, \]991) fl)r instance.448juncl;ions and shows how r(,ctundani; int(;raclli(lnslml,w(;en groups of (tisju:n(:l;ions (:mi bc r(;du(:ed.S(;c:i;ion 3 shows how normal  dis junct ions c;m t)(;r(;l)lac(;d t)y (:ont, cxtx;d constrainl:s. S(,(:tion 4 t;hcn,<d~ows how t, hcs('~ cont(;xl;(',d (',onstraints can en-cod(, del)(',nd(;ni, disjunctions.
S(!
(:l;ion 5 1)r(!s(',ntsthe mo(hl lm'ization a,lgorii;hm for conlx~xi;ed (',on-.si;ra.ini;s. Ih)wever, e, ven though this algor{l;hm ist~ (;omt)ih>t,im(', ot)(;ralJ(m , i t  i tsel f  has (;xt)on(nitialcomt)lexity, so lilil, l(ing it IllOl(', (~tli(',i(mi; shou ld  ~Jso1)(; a (:onc:(,rn.
A i;h(~or(;m wi l l  l,hc, Ii \])(; i)r(~s(mix;dill S('x'J;iOll (i t\]mL t)(!rllli(;s ;I, li (',xt)olt(!tll;ial t)&rt; ()\[i,tl(; nm(hllarizal;ion algo\]'il,hm I;()I)c rct)l;t(:(',(l 1 Wcombinator ia l  aam.lysis.2 Dependent  d i s junct ionsl)(:l)enchull; disjuncl;ions are lik(' \ ]u) \ ]mai  dis.iun(:--dons cxc',c;1)t dial; (;very (lis.iun(:l;ion has a nanL(',mid l;h(; disjuncts of disjuimti(ms wii;h tim sam(:IlllIll(~ IllltSt; |)(; ch()s(~ll i l l SyllC.
FoF (~xmnt)l('.
,(<, g,, d/, (//') A (<t ',?, ~/)', ~//') is a (:,,ni.n,:i:io,~ ,)r i:wodcl)cn(hmt disjml(:dons with tim s.~/lil(; lt~l,l\[l(,., (/.Wtl;l,l; this m('.
;ms ix llha.l; if l,h(', s(;('oml (lisjun(:l: in1;ho, til'sl; (tis.iul~(:tion, (//, ix (:hoscn, lJicn l;h(~ s(!
(>ond dis.jun(:t, of th(; ()th(;r disjun(:llion, '~//, Inllsl;t)(; chos(m as well.
(Not(; thai; wilful; kind (if con-sLrainl;s the ?/)s a.n(I 'l/~s are ix not iml)ortmfl; here.
)'Fh(', (',oIlll)lll;&/;iOll&l l'e;/,soll \[()1 llSill{,; (h~t)(,,u(hml;(lis.iun('.i;ions ovc, r norma,\] (tisjunc'.tions ix t;hal; (h>l)(;n(lcnl; disjun(:dons Mlow for more (:Oral)a(;1, a.nd(dlici(;nl; sl;tllCi;/ll(~.s.
'Fhis is l )mdcular ly  lain(; whcli(h;1)cn(l(;nl; (lisjunc:l;ious arc (',lnl)(!d(hxt iusi(h; of\[ea,l, urc sl;rutJl;llr(;s. Th is  is \[let',raise in l;li;tl, c.aso(lisjlln(:l;i(ins C}l,ll lic kept hi('a,l ill it dirc;(:l;('d gl'ltlihSl,\]'llCI;lll'(1 t;hllS s:4Villl r l:(xhut(la.nl; \['(;;tl;ure I);~l;lis.Wc slty I;tiaA; disjuncl; ions w i th  l;\]i(; san i ( ;  name',arc in l;h(; sa,mc g'ro'u,p.
Oltc (lisl;inguishing fea-1;llr(~ of a, group of (l isjun('dons ix i;tl&l; (;~(;}1 dis-jun(;t;ion lnusi; ha, v(~ tim stun(', numl)(',r of dis-junclis.
Th is  is (;sscntial ly who!re!
r (x lun( la l i t  int, cr-a(',l;ions origina, l;(',, l "or  inslia,lL(m~ in (<l (l)> (lJ, (I/, qi)') A(,1 '~1~, '~//, '~/~, '~//) (;ac:h disjun(:ti()n has four (tisjun(',ts,\[)111; r(;ally Oll\]y l;WO values.
Bul; 111()I'( ~,iml)O\]'-l;;~.nl;ly, no nla.l;l;(;r whal; wahl(,, of l,h0 lirsl; (lisjun(>lion ix (:hos(m ((/) or ell) t;hc; sallle v~-I, lll(~S a,l(; t)(3s-.sibh; for i;h(*, s(;(',on(1 (9 or 'l//).
hi ol;hcr words,thos(' dis junctions at(; a(:tually ind(;p(mdcnt fromone; anol;hcr, and Can t)0, put into (lifl'er(',nl; groups:(d' +, ?')
A (d" "/2, +').
Th is  is th(: In OC(;Ss ,)t ,nod-ulmiz~tl;ion which will b(; forina,lized in s(;c;l;ion 5.One mi<ghl; t)c l;(mll)tc(l to l;hink thal; ul()(lulm'-izg-t,|;ion ix llllnCCCSS~l,l'y siIl(;(~ ~I'3,IlIIlI}LI wril;(;rs ~-/,1"(~unlikely to writ('.
(h;t)endc;nt; disjunctions which(',ontain iild(~,l)cm(tcn(; parts.
Ih:)w('v(~r, gramma, rwriters m;~y not b(; (;hi; only sotlr(;(!
o\[ (\[(;\[)(;n(l(;ifl,disjunc:tions.
Mmiy gra jmnar  l)ro(:(;ssing sysi;(;msuse high-level dose:tit)lions whic:h arc I;hcn trans-form(;d into lttOr(; cxt)lic:il; \[ow(~l'-hw(;1 grmmnars .This tr imsJbrmatioI l  proc:c;ss may very w('.ll in-l;rodu(;(; large' :tlllllll)(;l',<-; of dc;t)en(h;nl; dis junctionswith (;?a(:l,ly this t)rol)(;rl,y.
()IIC ('?alnt)l(~ of who;r(; this can ha,l)l)(;n is inthe; ('xmipilm;ion o1' h;xi(:a,1 ruh',s in (Mcmr('rs andMimmn, 1995).
In this t)apc!r, M(mr(ns mM Minn(;n (t('s(:rib(~ a (:omt)ih, whic:h f, rmml~m;s a. s(,t ofL IPS(;  h;xi(:al ruh;s aim th(;ir int(;ra, l:d()n into (h;l-init;e r(Jations usc,d 1,o constrain h'xical (~niai(~s.In (Mem(us and Mimmn, 199(i), th('y show hownn oil'-lin(; COml)ila, tion te(:hniqu(; (:a,lh~d constraintl)roi)a,gation can I)e us(;d to inll)rov(; tim (leNnit(~c:la,us(' (;nc:()cting produ(:(;d 1)y l;heir (:Oml)ih, t() a,1-h)w for m()r(~ (dti(:i(~nl; t)ro(:('ssing.
Tim use o\[ (h'iron(hint disjunctions t)rovid(,.s ml a.l;tr;~(:dv(~ dLer-\]mlJv(~ 1;o I;tm (:olisl,rainl, t)\]op;~gal;ion ~q)l)roa(:h 1) 3,st)(;('.ifying all t;h(; informat ion associ;~lxxl with ah'xi(:al (;nl,ry dir(;c:dy as a singh', (h't)(;nd(;nl; f(!ml;llre sI;r/I(:LIII'(; r&l;h(;r th;tn hidd(m in a set; of (h~ti-nii;e (:la.us(;s. :~ C'onsidc.r the AheM lmh)w:PIt()N ~ ll,d ...... lielnu,, lleht, li,d,I }i. dVI,'()I(M { I)se, hse, fin I lilt}d.% Ull.I \[-/ I{ ~ vn,'()aM ~,.,,,'lichenL au(~ I '" I I\[VI,'()ILM hsE(\[ 11\[ VI,'()I{M I!he\] } i,.\]J >)' ( \[(X)N'r )' ( )This comph'.x lexicM entry relsrcs(;nl;s the ha.so lexical enlay fl)r t;ll('.
Gcrnmn verb lichen, "to love",mM tim t;hree lcxical c!ntrics l;haA; (:all 1)0. derivedfrom il; given th(!
lcxi(:~d ruh;s prcsc;nl;c,xl in (Me.ur-ers and Mimmn, \]99(i).
Tho difl'(;renc:es tml,wc'x;ni;hese h~xi(:M (miaic;s arc (,nc:oded 1)y th(; (h~pc',nch;nl;dis junctions all o1" which a,rc in th(~ .~mnc gr(ml),d. The first (\[i~}llll(;l; ill c&ch (tisjun(;l,ioll (:()rr(~-Sill)nits to l;tm b;ts(; t'Olln~ (;hi; S(;(;()II(I (:orr('st)c)n(lsto the al)pli(:~l;ion of l;lm Compl('mc;nt F, xtracl;ic)ul,exicM lhtl(;, the third corrc'sl)onds to the al)pli-cat ion of the Finit iv izat ion L(;xical ltuh;, mid I;helast COrlTo, s1)oIl(ls l;o Lhe apt)l ication of t)ol;h rltles.
'1Modular iz~tion can l)e ilSc.
(l t;o ilclak(; this t'('~tur(~sl;ructur(; (wen more (dlichuit by st)litl;ing all(; gro/ipd into two new gt'()llpS dl a, nd (12 as showu lmlow.aln I;he case of infinite h;xica, detinitc clauses arc.still necc.ss;try to encode recursive informal;ion.4q'ht',se lexical rules air(!
simplitied versions of thosepresented in (Polb~rd ~md Sag, \]994).449PIION ~ lleben, liebt /\[dlVFORM ~ bse, fill}I, elSUBJ \[\]f rVFORM bse\] \] )\[lieben -\]\[AaG~ 2t!\]\]{ rv,,'OaMbsol }s, , , ,s , ,d2Another example of where modularizationmight prove useful is in the treatment of typedfeature structures presented in (Gerdemann andKing, 1994).
Their approach produces a set offeature structures from a satisfiability algorithmsuch that all of the feature structures have thesame shape but the nodes may be labeled by dif-ferent types.
They then collapse this set down toa single feature structure where nodes are labeledwith dependent disjunctions of types.
Many of thegroups of disjunctions in their feature structurescan be made more efficient via modularization.A final example is in the compaction algo-rithm for feature structures, presented in (Grigith,1995).
Compaction is another operation designedto optimize feature structures for unification.
Ittakes a disjunction of feature structures, trans-forms them into a single feature structure withdependent disjunctions, and then pushes the dis-junctions down in the structure as far as possible.The result is a large number of dependent dis-junctions in the same group.
Many of these canprobably be split into new independent groups.3 Contexted constraintsMaxwell and Kaplan (1989) showed how a dis-junction of constraints could be replaced byan equi-satisfiable conjunction of contexted con-straints as in lemma 1 below.
5Lemma 1 (Contexted Constraints)?1 V ?2 is satisfialtle if\] (t) -+ ?1) A (~ --4 ?2) issatisfiable, where p is a new propositional variable.Disjunctions are replaced by conjunctions of im-plications from contexts (propositional formulae)to the base constraints fie.
?
:t and ?2)- The na-ture of the base constraints is irrelevant as longas there is a satisfaction algorithm for them.
Thekey insight is that solving disjunctions of the baseconstraints is no longer necessary since they arepurely conjunctive.SFor a proof see (Maxwell and Kaplan, 1989).Maxwell and Kaplan's goal in doing this wasto have an efficient method for solving disjunctiveconstraints.
The goal in this paper is compilin.qdisjunctive constraints into more efficient ones forfllture solution.
To this end a somewhat differentnotion of contexted constraint will be used as showin lemma 2.Lemma 2 (Alternative-Case Form)(/)1 V ?2 is satisfiable iff (al -4- ?\]) A (a2 ~- ?
:~) A(al V a2) is satisfiable, where al and a2 arc newpropositional variables.We (:an see that this formulation is nearly equiva-lent to Maxwell and Kaplan's by substituting pfor at and p for a2.
To make the formulationcompletely equivalent;, we would need to enforcethe uniqueness of a solution by conjoining al V g2.However, this is unnecessary since we want to per-mit both solutions to be simultaneously true.
Thereason for using the modified version of contextedconstraints in lemma 2 is that we can separate therepresentation of disjunctions into a conjunctionof the values that the disjuncts can have, calledthe alternatives, and the way in which the we canchoose the values, called the cases.
The alterna-tives are the conjunction (al -~ ?1) A (a2 -+ (/52)and the cases are the disjunction (al V a2).While we could use repeated applications oflemma 2 to turn a disjunction of n disjuncts intoan alternative-case form, it will simplify the expo-sition to have a more general way of doing this, asshown in lemma 3.v----I~l~)ma 3 (N-ary Aiternative-CaseA (ai -~ ?i) A vFarm)aiieN is satisfiable iff icN icN iSsatisfiable, where each ai is a new propositionalvariablA?
(ai--~ ?i) V a{Itere iGN are the alternatives and icNare the cases.
So for example, ?1 V ?2 V Ca V ?4is satisfiable just in case (at -~ ?1) A (a2 -+ ?2) A(a3 ~+ q~3) A (a4 -~ (~4) A (a:, V a2 V a3 V a4) issatisfiable.4 Dependent  disjunctions ascontexted  constraintsThe usefulness of the alternative-case form onlybecomes apparent when considering dependentdisjunctions.
Dependent disjunctions can be rep-resented by alternative-cast forms as shown in def-inition 1 below.Definition 1 (Dependency Group)A dependency group is a conjunction of dependentdisjunctions with the same name, d, where eachV* A*,6ieN and ieN are disjunctions and conjunctionsof formulae ?i, respectively, where each i is a memberof the set of indices, N.450disjunction is an alternative-case form such thatthere is one alternative for every disjunct of ev-ery disjunction in the group, and there is one casefor each disjunct in the group which is a co*one-tion of the alternative variables for that disjunct<.M A A(a}-~?})
V A a}: i6Mj6N AJ6NiC-Mwhere each a} is a new propositional variable andN = {L<.
.
.
,n} .So l;he dependent disjunction (,l ?
,0 ,? '
)  A(d ?,'~//, 0'} is the alternative-case form with al-ternatives (a I -+ 0) A (a~ -~ 0) A (a:~ -+ 4/) A(,4 -" ?)
A ?')
A "/") and eases((a I Aa~) V (a~ Aa~) V (a~ A<)) .
The cases enforcethat the corresponding disjuncts of every disjunetin the group inust be simultaneously satisfiable.We, can now start to see where redundancy independent disjmmtions originates.
Because, everydisjunction in a group of (lepen(le, nt disjunctionsnmst have the, same nund)er of disjuncts, some, ofthose disjunets may appear more, than once.
Inthe above exmnple t:br instance, 5 occurs twice inthe first disjunction and ~// occurs twi(:e in thesecond disjunction.
To resolve this problem weimpose the following condition, called alternativecompactness: if a base constraint ?}
equals an-other base constraint from the same disjunction,?\[,, then the alternatives variables associated withthose base constraints, ( ji and a~, are also equal.
7Doing this allows us to express the alternativest;'om the example above as (d  -~ ?)
A (4  -~?')
A (~ --~ ?)
a (a~ ~ ?
'), an(1 the case,~ as((at: A a~t) V (all A (t 2) V (8,12 A a2)).8 One advall-tage of this is that the number of base constraintsthat must be checked during satisfaction (:an po-tentially be exponentially reduced.
'File nexl; section will show how an alt;ernative-case form for a, group of det)tndent disjuncl;ionscan be split into a conjunction of two (or more)equivalent forms, thereby (potentially) exponen-tially reducing the munbtr  of alternative varial)leinteractions that must be checked uring satisfac-l;ion,5 Modu lar i za t ionConsider again tile example from section 2:(d (/5, (I), ?
', (/)') A (d 0, "~t/, ~1~, %/)').
i{epresented as acompact alternative-case form, the alternativesbecomes: (al 0)A((4 ?
')A(d',//), with cases: ((a I A a~) V (al A a~) V (a.~ Aa~) V (a 1 A a~)).
The key to determining thatthe two disjunctions (:all be split into differentrNote that this requires being able to determineequality of the base constraints.Sin this example, equivalent alternative variableshave been replaced by representatives of theirequiva-lence chess.
So a~ has been replaced by al and a?a hasbeen replaced by a.~.groups then involves determining that cases canbe split into a conjunction of two smaller cases(a', V a~) A (a~ V a~).
If the cases can be split inthis manner, we say the cases (and by extensiontilt group of dependent disjunctions) are indepen-dent.Def in i t ion  2 ( Independence)A case \]orrn is independent iff it is equivalent to"j~{N i6M ~ j ( iN'  i6M'  A j cN"  i6M"where M' and M" partition M.So in the above examph',, M = {1,2} where 1 rep-r(!sents l;he first disjunel;ion and 2 represents l;hesecond.
That makes M'  = {1} and M" = {2}.While M'  and M" are derived Dora M, the ele-aleuts of the Ns are arbitrary.
But a consequenceof definil;ion 2 is that \[N\[ =- IN'\[ x \[N"\[.
Thiswill be proved in section 6.
The size of the Ns,however, represent he nmnber of cases.
So forinstance in the above example, N might equal{1,2,3,4} since there are four disjuncts in theoriginal ease form, while N'  might equal {1,2}and N", {1,2}, since the smaller case forms eachcontain two disjuncts.The process of splitting a group of dependentdisjunctions into smallel" groups is called modu-larization.
Modularizing a group of dependentdisjunctions amounts to finding a conjunction ofease forms that in equivalent; to the original easeform.
The modularization algorithm consists oftwo main steps.
Tile first is to take the originalcase form and to construct a pair of possibly in-dep(mdent ease forms from it:.
The second step isto check if these (:as(', forms are actually indepen-(lent from each other with respect o the originalone.
The modularizatioil algorithm performs bothof these steps repeatedly until either a pmr of in-depe, ndent ease R)rms is found or until all possi-ble pMrs have been checked.
If tile later, then weknow that; the original dependent disjunction in al-ready nn)(lulai'.
If on the ottmr hand we can splitthe case forms into a pair of smaller, independent(;as(; forlns, then we can again try to modularizeeach of those, until all groups are modular.
'\[b const;ruct a pair of potentially independent(:as(; forms, we first need to partition the set ofalternative vm'iablts from the original ca,qe forminto two sets.
The first, subset contains all of andonly the, variables corresponding to some subsetof the original disjunctions and tile second subsetof variables is the complement of the first, corre-sponding to all of and only the other disjunctions.lh'om these subsets of variables, we construct twonew cast forms Dora the original using the opera-t ion of confinement, defined below.Def in i t jop,  A 3 (Conf ine Inent )V / \  a~COII,f ( j c  N iE M , J~/It)451V Aa;is the confinement of  J CN iGM with respect o a4 V k a;i f f  co~tf(J CN i<M , M') =- dnf(J CN i~M' ),where.
M' C M.Construct ing the eontinement of a (:as(; form isessentially just throwing out all of the alternativevariables that are not in M' .
However, only doingthis might leave us with duplicate disjuncts, soconverting the result to DNF removes any suchduplicates.To make the definition of confinement clearer,consider tile following conjunction of dependentdisjunctions:(d ?, 0, ?, (/), ?
', ~//) A (d ~/% ~//, t/,, ,//, ~/o, t//)A((~ x, x, x', x', x', x'}.This is equivalent to tile compact alternativefo r In :  9(a~ -', ?')
A (a~ --~ x) A (d + x'),and tile following case fornl: ease.
=((el A a~/, ,*9 v (al A ~4 A a'0, V (4 A .,2 A d)v(4  A a~ A d)  v (4  A (q A ai~) V ((4 A a~ A d)) 'Now we can compute the confinements.
For in-s tance  1eonf(case, {1, 2}) = dnf((a I A a~) V (a I A a,~)V(al A (q) v (o' A a,9 v ((4 A d)  v (4  A d) )  ,\]After removing duplicates we get:.,,?
((,ase, {~, 2}) -( (4  A ab V (o * A "9  V (4  A a~) V (4  A a,9) '1Likewise, for the c()mtflement of M '  with respectto M, we get:conf(case, {3}) : ((a a) V (ai~)).Now we just need to test whether two confinedcase ibrms are independent with respect to theoriginal.
This is done with the free combinationoperation, shown in definition 4.Def in i t ion  4 (\]~?ee Combinat ion  ?
)The free combination of two ease forms is the dis-junctive 'normal form of their conjunction:case' ?
case" -- dnf(case' A case")The two ease forms, case' and case", are I )NF for-mulct.
~ib compute the free combination, we con-join them and convert the re.suit back into DNF.They are independence if their free combinationis equal to the original ease tbrm, case.For example, the flee combination of the twoconfinements from above,((a I A a, 2) V (a*, a a,~) V (a~ A a~) V (a~ A a~)) and( (d)  v 0,9)is(ra' A a~ A 4 )  V (el A 4 A 4 )  V (a I / ,  a~ A d )V  \ \](4  A a.~ A 4*) v (4  A ,q A d )  v (4 A a~/, d )V(a~ A d A d )  v (a~ A a~ A d) )9in this examl)le , equivalent alternative variableshave again been replaced by representat, ives of theirequivalence class.
So tbr instance., a~, c*~ and a~ areall represented by al.which is not equM t;o the original (:as(.'
form:((el A a~ A a~) V (a', A ,~,~ A 4') V (4 A d A ,,i\])v(al A a~ A all) v (d A a~ A d) v 04 A d A a q)),so tim first two disjunctions are not indet)en-dent from the third.
However, the second dis-jmmtion is independe.nt front the first and thethird since, conf(case, {2}) - ((a~) V (a.~)), antico,?
(ca.~e,  {1, 3}) (q , '  '~ ' ~ ' " : t ,Aa ,)V(%Aai,)V(asAa!i))  ,and their free combination is equal to the oi'igi-nal case form.
Therefore, the original formula isequivalent o (d' ~/a,*//)A (d,, ?, ?, ?
')A(d,, X, X', Z').6 Free  combinat ion  e l iminat ionThe last section showed all efl'ective algoritlnn formodularizing groups of dependent disjunet;iolls.However, even dlough this is a compile time al-gorithm we should be con(:erned about  its efliociency since it has ext)onential comph;xity.
Themain source of complexity is that  we inight have tocheck (;very pair of sul)sets of disjun(:tions fl'oin thegroup.
Ill the worst case this is tnmvoidable (el othough we do not expect natural  language grain-mars to exhibit such behavior).
Other sources ofcomi)lexity are computing the fl'ee coinbinadonand testing the result against the original (:as(;form.
l,uckily it is possible to avoid both of theseoperations.
This Ceil t)e done by noting that boththe original (:ase form aim each of the (:onfine{t(:as(; forms are in DNF.
Therefore it; is a nee-.essary (:ondition t}tat if l;he fl'ee combination ofthe confinements is the same as the original caseform then the I)roduet of tile number of disjun('tsi,, ea(:h conflneme.t, lease'l x lease"l, re,st eq, lalthe number of disjun(:ts in the original case form,lease I.
Moreover, since both confinements at(; de-rived fl'om the original ease form, it is also a su fficient, condition.
This is shown more forlnally intheorem 1.Theorem 1 (l~Yee combinat ion  e l iminat ion)~.
',~se = ~:as,/Oease" ?=> \]case\] = ba~e'l ?
Icase"lProof  =:> We assulne that case '?case"  =- case.Since hoth case'?
eas#'  and ease are in DNF andDNI; is unique, we know that \](:as('.'
?
case"\] =:lease\].
We also know that  case' and case" haveno disjunets in common because they have no al-ternative variables in colnmon, so Icasc'?case"l =Icase'l x Icasc."l.
Therefore.
le~s4 = Icasc'l xkase"\].
UProof  <--  Again since case' arm case" haveno disjuncts in cormnon, we know that  leas# @case"\] = \]case'\] x Icase"\] and therefore, thatlease I -- lease'?co,  s t" \ ] .
Every  disjunct in case canbe represented as A' A A" where A' is a disjnnetin case' and A" is a disjun(:t ill case".
So the dis-.iunets in ease'@ case" must be every conjunctionof possible A's and A"s. So case' ?
case" must452c<mtain all (>f th<', <li@mcts in ca.sc mM it.
couldcontain ev<m m<)re, }),it f,h<m + >case ~ ~ case" must (:ontain cxacl;ly the disjuncl;sill cas(: aIld l;hcrcforc (:as( t :: (:o,,~('J (29 (:(ts(:'.
E\]We can see that  this would have hell>ed us in th('.p,'cvi<,us <`-x~t~,,p> t;<)k~,<,w m~t.
<:<,,,/(,,<,,.~(,, {1,2})(:(}lll(l 110|; |)('~ il,(|(,t)(!II(l(!llJ; \['1'()1\[1 C()ILf(c(t,'~C,{3})wit;h respect to c<,,,sc, t>eca.use ):,,(f(ca,sc, {1,2 })!8.
()onvcrscly, sin(:(`- Ico'/~f(ca.s'c, {\[,3}) I 3 and\[conf(casc, {2})1 : 2, we, know imm(,Jia.l;ely l;hatl;hcs('~ (:as(', forms are in(h`-t)c'nd(mt.This the, orem also allows us to trotform othercomt)inat, orial short cuts, su<'h as noting that ift;he nunltmr of disjuncl;s in the origimtl case tormis prime \[;hen it; is already modular.7 Conc lus ion'\['his paper has \[)r('~s<!nt(xl an (fllici(mt form forr(',l)r(;s(ml;ing (lc, p(!ll(h;nl, dis,jun(:t;i(>ns m~(i an algo-r i thm for d(`-I;(x;l,ing aim (;liminal;ing r(,,dmt(tmit n:teractions within a group of <\[(~l)(m(hmt disjmm-l;i<ms.
This mc, l;h<)<l shoul<l be useful for a.,y sys-(;era which (mq)l<)ys <let)endent <lisjun(:tions in<:e,it, can (`-liminai;e exponenl;ial am(mnt;s of i)ro<:(~ssh~gduring (:onstra.inl; sadsi\]mtion.In Conslraint I'ropagatio'n , Linguistic Dcsc~ip-tion, a'nd Computation, \[st ituto l)alh', Molle II)-SIA, Lugano, Switzerlan<t.Meurers, i).
and G. Minnen.
1995.
A @olni)u-t;al;ional Trcat;nmnt; of \[ll'S(l I,exi<:al l{ules asCovm'ial;ion in Lexi(:al l,;ntries.
In l)r'oc, of I,h,<:5th, Int.
Workshop o'n Nal,'wrrd Lang'uo,9<~ U'ndcr-standing a, nd Logic l~r'og'ra'mming.M<mr(!rs, 1).
ml(I G. Mimmn.
199(i.
()It'-liue Con-sl,ra.inl; I)r<)l)agat;ion for l,;\[li('i(`-zzI, III'S(I I ) I 'O ( ; (~SS -ing.
h\[ l'roc, of III'S(I/TAI,N-06.I>ollm'd, C. mid i\[.
Sag.
:1994.
Hcad-drivc.n Phra,scStruct'u, rc G'rummar.
U.
(>t!
Chi(:ago Press.StrSml)~i(:k, L. 1992.
Uni\[~ging Disjun(:l;ive l"eal;ur(;Sl;ru<:i;ures.
\[n COl,IN(', \[992, 1)a.ges 1:167 11171.ReferencesEiseh`-, A. and J. D6rre.
1990.
Unification ofDisjunctiv<`- Feature De, s(:ril)tions IBM Wis-sens<:haftli<:hcs Zcntrnm, \[nstitul;(', fiir Wiss(`-ns:basi(;rt<: ,qysl;t'.In<`- l;(`-(;h, l'Cl)<>r\[; ] 2+l.
(;(;r<lemann, I).
1991.
Parsing and Genc'rationof Unification Cramma'rs, PM) thesis, U.
(>fIllinois.
(~el'<lemaml, D. and 1).
King 1.(t94.
The ()or-re<:/; an<l Eilh:ient; hnt)lemealt:ation of Apl>rot>ri-a.teness Specifications for Typed Feature Struc-tures In COLING 1994, pages 956 960.Griflith, J.
1995.
Optimizing Fcat;nre St;ru<:turcUniticat, ion widt l )ependent l)isjuncl;ions, inl 'apcrs presented al, th.c W(rrkshop on (h'am-ma,'r li'ormaliwm, fl)r NLP at E,qAT, LI:-9/I.
U.Tiibinge.n, S('minm' fiir Stn'achwisse, nscha.fl; tech.rel)ort 04415.Gritlith, J.
1996.
Disjur~,ction and EJ\]icic'n,t P'lv-tossing of Feature Struct'u,'rcs.
1)hi) th(!sis, Uni-versitSt T/ibingen.
Tentative tide.Maxwell, J. and I{.. Kat)lan.
1.(t89.
An Overview ofl)i%iuncl;iw'.
C<mstraint Sadsfact;ion.
In \]"me.
oflnl.
Workshop on 1)a'rsi'n,g Technologies , pages18 27.Ma.xw<`-ll, 3. and 1{.
Kaplan.
1991.
Th(!
lnt('xfa(:(!1)(!l;w(',(m Phrasal  mt<l Funct;ional Consl;ra, ints.453
