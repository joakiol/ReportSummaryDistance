Proceedings of the ACL-HLT 2011 System Demonstrations, pages 121?126,Portland, Oregon, USA, 21 June 2011. c?2011 Association for Computational LinguisticsClairlib: A Toolkit for Natural Language Processing, Information Retrieval,and Network AnalysisAmjad Abu-JbaraEECS DepartmentUniversity of MichiganAnn Arbor, MI, USAamjbara@umich.eduDragomir RadevEECS Department andSchool of InformationUniversity of MichiganAnn Arbor, MI, USAradev@umich.eduAbstractIn this paper we present Clairlib, an open-source toolkit for Natural Language Process-ing, Information Retrieval, and Network Anal-ysis.
Clairlib provides an integrated frame-work intended to simplify a number of generictasks within and across those three areas.
Ithas a command-line interface, a graphical in-terface, and a documented API.
Clairlib iscompatible with all the common platforms andoperating systems.
In addition to its own func-tionality, it provides interfaces to external soft-ware and corpora.
Clairlib comes with a com-prehensive documentation and a rich set of tu-torials and visual demos.1 IntroductionThe development of software packages and code li-braries that implement algorithms and perform tasksin scientific areas is of great advantage for both re-searchers and educators.
The availability of thesetools saves the researchers a lot of the time and theeffort needed to implement the new approaches theypropose and conduct experiments to verify their hy-potheses.
Educators also find these tools useful inclass demonstrations and for setting up practical pro-gramming assignments and projects for their stu-dents.A large number of systems have been developedover the years to solve problems and perform tasksin Natural Language Processing, Information Re-trieval, or Network Analysis.
Many of these sys-tems perform specific tasks such as parsing, GraphPartitioning, co-reference resolution, web crawlingetc.
Some other systems are frameworks for per-forming generic tasks in one area of focus such asNLTK (Bird and Loper, 2004) and GATE (Cun-ningham et al, 2002) for Natural Language Pro-cessing; Pajek (Batagelj and Mrvar, 2003) andGUESS (Adar, 2006) for Network Analysis and Vi-sualization; and Lemur1 for Language Modeling andInformation Retrieval.This paper presents Clairlib, an open-sourcetoolkit that contains a suit of modules for generictasks in Natural Language Processing (NLP), Infor-mation Retrieval (IR), and Network Analysis (NA).While many systems have been developed to addresstasks or subtasks in one of these areas as we havejust mentioned, Clairlib provides one integrated en-vironment that addresses tasks in the three areas.This makes it useful for a wide range of applicationswithin and across the three domains.Clairlib is designed to meet the needs of re-searchers and educators with varying purposes andbackgrounds.
For this purpose, Clairlib providesthree different interfaces to its functionality: agraphical interface, a command-line interface, andan application programming interface (API).Clairlib is developed and maintained by the Com-putational Linguistics and Information Retrieval(CLAIR) group at the University of Michigan.
Thefirst version of Clairlib was released in the year2007.
It has been heavily developed since then untilit witnessed a qualitative leap by adding the Graphi-cal Interface and many new features to the latest ver-sion that we are presenting here.Clairlib core modules are written in Perl.
TheGUI was written in Java.
The Perl back-end and theJava front-end are efficiently tied together through acommunication module.
Clairlib is compatible with1http://www.lemurproject.org/121all the common platforms and operating systems.The only requirements are a Perl interpreter and JavaRuntime Environment (JRE).Clairlib has been used in several research projectsto implement systems and conduct experiments.
Italso has been used in several academic courses.The rest of this paper is organized as follows.
InSection 2, we describe the structure of Clairlib.
InSection 3, we present its functionality.
Section 4presents some usage examples.
We conclude in Sec-tion 5.2 System OverviewClairlib consists of three main components: the corelibrary, the command-line interface, and the graph-ical user interface.
The three components were de-signed and connected together in a manner that aimsto achieve simplicity, integration, and ease of use.
Inthe following subsections, we briefly describe eachof the three components.2.1 ModulesThe core of Clairlib is a collection of more than 100modules organized in a shallow hierarchy, each ofwhich performs a specific task or implements a cer-tain algorithm.
A set of core modules define the datastructures and perform the basic processing tasks.For example, Clair::Document defines a data struc-ture for holding textual data in various formats, andperforms the basic text processing tasks such as tok-enization, stemming, tag stripping, etc.Another set of modules perform more specifictasks in the three areas of focus (NLP, IR, and NA).For example, Clair::Bio::GIN::Interaction is de-voted to protein-protein interaction extraction frombiomedical text.A third set contains modules that interface Clair-lib to external tools.
For example, Clair::Utils::Parseprovides an interface to Charniak parser (Charniak,2000), Stanford parser (Klein and Manning, 2003),and Chunklink2.Each module has a well-defined API.
The API isoriented to developers to help them write applica-tions and build systems on top of Clairlib modules;and to researchers to help them write applicationsand setup custom experiments for their research.2http://ilk.uvt.nl/team/sabine/chunklink/README.html2.2 Command-line InterfaceThe command-line interface provides an easy accessto many of the tasks that Clairlib modules imple-ment.
It provides more than 50 different commands.Each command is documented and demonstrated inone or more tutorials.
The function of each com-mand can be customized by passing arguments withthe command.
For example, the commandpartition.pl -graph graph.net -method GirvanNewman -n 4uses the GrivanNewman algorithm to divide agiven graph into 4 partitions.2.3 Graphical User InterfaceThe graphical user interface (GUI) is an impor-tant feature that has been recently added to Clairliband constituted a quantum leap in its development.The main purpose of the GUI is to make the richset of Clairlib functionalities easier to access by alarger number of users from various levels and back-grounds especially students and users with limited orno programming experience.It is also intended to help students do their assign-ments, projects, and research experiments in an in-teractive environment.
We believe that visual toolsfacilitate understanding and make learning a moreenjoyable experience for many students.
Focusingon this purpose, the GUI is tuned for simplicity andease of use more than high computational efficiency.Therefore, while it is suitable for small and mediumscale projects, it is not guaranteed to work efficientlyfor large projects that involve large datasets and re-quire heavy processing.
The command-line inter-face is a better choice for large projects.The GUI consists of three components: the Net-work Editor/Visualizer/Analyzer, the Text Proces-sor, and the Corpus Processor.
The Network com-ponent allows the user to 1) build a new networkusing a set of drawing and editing tools, 2) openexisting networks stored in files in several differentformats, 3) visualize a network and interact with it,4) compute different statistics for a network such asdiameter, clustering coefficient, degree distribution,etc., and 5) perform several operations on a networksuch as random walk, label propagation, partition-ing, etc.
This component uses the open source li-brary, JUNG3 to visualize networks.
Figure 1 shows3http://jung.sourceforge.net/122Figure 1: A screenshot for the network visualization component of Clairliba screenshot for the Network Visualizer.The Text Processing component allows users toprocess textual data published on the internet or im-ported from a file stored on the disk.
It can processdata in plain, html, or PDF format.
Most of the textprocessing capabilities implemented in Clairlib corelibrary are available through this component.
Fig-ure 2 shows a screenshot of the text processing com-ponent.The Corpus Processing component allows usersto build a corpus of textual data out of a collectionof files in plain, HTML, or PDF format; or by crawl-ing a website.
Several tasks could be performed ona corpus such as indexing, querying, summarization,information extraction, hyperlink network construc-tion, etc.Although these components can be run indepen-dently, they are very integrated and designed to eas-ily interact with each other.
For example, a user cancrawl a website using the Corpus component, thenswitch to the Text Processing component to extractthe text from the web documents and stem all thewords, then switch back to the Corpus componentto build a document similarity graph.
The graph canthen be taken to the Network component to be visu-alized and analyzed.2.4 DocumentationClairlib comes with an extensive documentation.The documentation contains the installation infor-mation for different platforms, a description of allClairlib components and modules, and a lot of usageexamples.
In addition to this documentation, Clair-lib provides three other resources:API ReferenceThe API Reference provides a complete descrip-tion of each module in the library.
It describes eachsubroutine, the task it performs, the arguments ittakes, the value it returns, etc.
This reference is use-ful for developers who want to use Clairlib modulesin their own applications and systems.
The API Ref-erence is published on the internet.TutorialsTutorials teach users how to use Clairlib by ex-amples.
Each tutorial addresses a specific task andprovides a set of instructions to complete the taskusing Clairlib command-line tools or its API.Visual DemosVisual demos target the users of the graphical in-terface.
The demos visually show how to start theGUI and how to use its components to perform sev-eral tasks.123Figure 2: A screenshot for the text processing component of Clairlib3 FunctionalityClairlib provides modules and tools for a broad spec-trum of tasks.
Most of the functionalities are nativeto Clairlib.
Some functionalities, however, are im-ported from other open-source packages or externalsoftware.
This section lists the main functionalitiescategorized by their areas.3.1 Natural Language ProcessingNLP functionalities include Tokenization, Sen-tence Segmentation, Stemming, HTML Tags Strip-ping, Syntactic Parsing, Dependency Parsing,Part-of-Speech Tagging, Document Classification,LexRank, Summarization, Synthetic Corpus Gen-eration, N-grams Extraction, XML Parsing, XMLTree Building, Text Similarity, Political Text Analy-sis, and Protein Name Tagging.3.2 Information RetrievalIR functionalities include Web Crawling, Indexing,TF-IDF, PageRank, Phrase Based Retrieval, FuzzyOR Queries, Latent Semantic Indexing, Web Search,Automatic Link Extraction, and Protein-Protein In-teraction Extraction.3.3 Network AnalysisNetwork Analysis functionalities include NetworkStatistics, Random Network Generation, NetworkVisualization, Network Partitioning, CommunityFinding, Random Walks, Flow Networks, SignedNetworks, and Semi-supervised Graph-based Clas-sification.
Network Statistics include Centralities,Clustering Coefficient, Shortest Paths, Diameter,Triangles, Triplets, etc.Some of these functionalities are implemented us-ing several approaches.
For example, Clairlib haveimplementations for 5 graph partitioning algorithms.This makes Clairlib a useful tool for conducting ex-periments for comparative studies.4 Uses of ClairlibThe diverse set of domains that Clairlib covers andthe different types of interfaces it provides make itsuitable for use in many contexts.
In this section, wehighlight some of its uses.EducationClairlib contains visual tools that instructors can useto do class demonstrations to help their students un-derstand the basic concepts and the algorithms theyface during their study.
For example, the randomwalk simulator can be used to teach the students howrandom walk works by showing a sample networkand then walk randomly step-by-step through it andshow the students how the probabilities change aftereach step.It can also be used to create assignments of vary-ing levels of difficulty and different scopes.
Instruc-124tors may ask their students to do experiments with adataset using Clairlib, write applications that use theAPI, extend an existing module, or contribute newmodules to Clairlib.
One example could be to askthe students to a build a simple information retrievalsystem that indexes a collection of documents andexecutes search queries on it.Clairlib has been used to create assignments andprojects in NLP and IR classes at the University ofMichigan and Columbia University.
The experiencewas positive for both the instructors and the stu-dents.
The instructors were able to design assign-ments that cover several aspects of the course andcan be done in a reasonable amount of time.
The stu-dents used the API to accomplish their assignmentsand projects.
This helped them focus on the impor-tant concepts rather than diving into fine program-ming details.ResearchClairlib contains implementations for many algo-rithms and approaches that solve common problems.It also comes with a number of corpora and anno-tated datasets.
This makes it a good resource for re-searchers to build systems and conduct experiments.Clairlib was successfully used in several researchprojects.
Examples include Political Text Analy-sis (Hassan et al, 2008), Scientific Paper Summa-rization (Qazvinian and Radev, 2009), Blog Net-works Analysis (Hassan et al, 2009), Protein In-teraction Extraction (Ozgur and Radev, 2009),and Citation-Based Summarization (Abu-Jbara andRadev, 2011).4.1 ExamplesIn this subsection, we present some examples whereClairlib has been used.Example: Protein-Protein InteractionExtractionThis is an example of a project that builds aninformation extraction system and uses Clairlib asits main processing component (Ozgur and Radev,2009).
This system is now part of a larger bioinfor-matics project, NCIBI.The system uses Clairlib to process a biomedicalarticle: 1) splits it into sentences using the segmen-tation module, 2) parses each sentence using the in-terface to the Stanford Dependency Parser, 3) tagsthe protein names, 4) extracts protein-protein inter-actions using a specific Clairlib module devoted tothis task, and then 5) it builds a protein interactionnetwork in which nodes are proteins and edges rep-resent interaction relations.
Figure 3 shows an ex-ample protein interaction network extracted from theabstracts of a collection of biomedical articles fromPubMed.
This network is then analyzed to computenode centralities and the basic network statistics.Example: Scientific Paper Summarization UsingCitation NetworksThis is an example of a research work thatused Clairlib to implement an approach and con-duct experiments to support the research hypothe-sis.
Qazvinian and Radev (2009) used Clairlib toimplement their method for citation-based summa-rization.
Given a set of sentences that cite a paper,they use Clairlib to 1) construct a cosine similaritynetwork out of these sentences, 2) find communitiesof similar sentences using Clairlib community find-ing module, 3) run Clairlib LexRank module to rankthe sentences, 4) extract the sentence with the high-est rank from each community, and finally 5) returnthe set of extracted sentences as a summary para-graph.Example: Text ClassificationThis is an example of a teaching assignment thatwas used in an introductory course on informationretrieval at the University of Michigan.
Studentswere given the 20-newsgroups corpus (a large setof news articles labeled by their topic and split intotraining and testing sets) and were asked to useClairlib API to: 1) stem the text of the documents,2) convert each document into a feature vector basedon word frequencies, 2) train a multi-class Percep-tron or Naive Bayes classifier on the documents inthe training set, and finally 3) classify the documentsin the testing set using the trained classifier.5 ConclusionsClairlib is a broad-coverage toolkit for Natural Lan-guage Processing, Information Retrieval, and Net-work Analysis.
It provides a simple, integrated, in-teractive, and extensible framework for educationand research uses.
It provides an API, a command-125Figure 3: Clairlib used to construct and analyze a protein network extracted from biomedical articlesline interface, and graphical user interface for theconvenience of users with varying purposes andbackgrounds.
Clairlib is well-documented, easy tolearn, and simple to use.
It has been tested for vari-ous types of tasks in various environments.Clairlib is an open source project and we welcomeall the contributions.
Readers who are interested incontributing to Clairlib are encouraged to contact theauthors.AcknowledgementsWe would like to thank Mark Hodges, AnthonyFader, Mark Joseph, Joshua Gerrish, Mark Schaller,Jonathan dePeri, Bryan Gibson, Chen Huang, Arzu-can Ozgur, and Prem Ganeshkumar who contributedto the development of Clairlib.This work was supported in part by grantsR01-LM008106 and U54-DA021519 from the USNational Institutes of Health, U54 DA021519,IDM 0329043, DHB 0527513, 0534323, and0527513 from the National Science Foundation, andW911NF-09-C-0141 from IARPA.ReferencesR.
Gaizauskas, P. J. Rodgers and K. Humphreys 2001.Visual Tools for Natural Language Processing.
Jour-nal of Visual Languages and Computing, Volume 12,Issue 4, Pages 375-412.Arzucan Ozgor and Dragomir Radev 2009.
Supervisedclassification for extracting biomedical events.
Pro-ceedings of the BioNLP?09 Workshop Shared Task onEvent Extraction at NAACL-HLT, Boulder, Colorado,USA, pages 111-114Ahmed Hassan, Dragomir R. Radev, Junghoo Cho, Am-ruta Joshi.
2009.
Content Based Recommendationand Summarization in the Blogosphere.
ICWSM-2009.Vahed Qazvinian, Dragomir Radev.
2008.
ScientificPaper Summarization Using Citation Summary Net-works.
COLING 2008.Ahmed Hassan, Anthony Fader, Michael Crespin, KevinQuinn, Burt Monroe, Michael Colaresi and DragomirRadev.
2008.
Tracking the Dynamic Evolution of Par-ticipants Salience in a Discussion.
COLING 2008.Eugene Charniak.
2000.
A Maximum-Entropy-InspiredParser.
Proceedings of NAACL-2000.Dan Klein and Christopher Manning.
2003.
AccurateUnlexicalized Parsing.
Proceedings of ACL-2003.Amjad Abu-Jbara and Dragomir Radev 2011.
Coher-ent Citation-based Summarization of Scientific PapersProceedings of ACL-2011.H.
Cunningham and D. Maynard and K. Bontcheva andV.
Tablan 2002.
GATE: A Framework and GraphicalDevelopment Environment for Robust NLP Tools andApplications Proceedings of ACL-2002, Philadelphia.Steven Bird and Edward Loper.
2004.
NLTK: The Natu-ral Language Toolkit Proceedings of ACL-2004.V.
Batagelj and A. Mrvar 2003.
Pajek - Analysis andVisualization of Large Networks Springer, Berlin.Eytan Adar.
2006.
GUESS: A Language and Interfacefor Graph Exploration CHI 2006.126
