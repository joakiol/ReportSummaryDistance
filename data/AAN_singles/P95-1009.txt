User-Defined Nonmonotonic i ty  in Unif ication-Based FormalismsLena  Str~Smb~ickDepar tment  of  Computer  and  In format ion  Sc ienceL inkSp ing  Un ivers i tyS-58185 L inkSp ing ,  Swedenlestr~ida,  liu.
soAbst ractA common feature of recent unification-based grammar formalisms is that theygive the user the ability to define his ownstructures.
However, this possibility ismostly limited and does not include non-monotonic operations.
In this paper weshow how nonmonotonic operations canalso be user-defined by applying default lo-gic (Reiter, 1980) and generalizing previousresults on nonmonotonic sorts (Young andRounds, 1993).1 BackgroundMost of the more recent unification-based forma-lisms, such as TFS (Emele and Zajac, 1990), UD(Johnson and Rosner, 1989), CUF (DSrre and Eisele,1991), and FLUF (StrSmb~ick, 1994), provide somepossibility for the user to define constructions of hisown.
This possibility can be more or less power-ful in different formalisms.
There are, however, se-veral constructions proposed as desirable xtensionsto unification grammars that cannot be defined ina general and well-defined way in these formalisms.One such class of constructions i those that havesome degree of nonmonotonic behaviour.
Examplesof such constructions are any-values, default-values,and some constructions (e.g.
constraining equations,completeness and coherence) used in LFG (Kaplanand Bresnan, 1983).This paper describes a method that permits theuser to define such nonmonotonic onstructions.This is done through generalizing the work on non-monotonic sorts (Young and Rounds, 1993).
Thisgeneralization results in a default logic similar to(Reiter, 1980), but where subsumption and unifica-tion are used instead of logical truth and consistency.There are three main advantages to Young andRounds' work compared with other approaches todefault unification (Bouma, 1990; Bouma, 1992;Russel et al, 1992) which justify choosing it as astarting point for this work.
The first is the se-paration of definite and default information, whereYoung and Rounds are more distinct than theother.
The second is that the nonmonotonic uni-fication operation used is order independent.
Thisis achieved by separating the unification operationfrom computing the nonmonotonic extension, whichYoung and Rounds call explanation.
This suggeststhat all the user needs to define when generalizingthe approach is how a sort is explained.
Finally,there is a close relationship to Reiter's (1980) de-fault logic.This paper starts by providing the minimal pro-perties required of a unification-based formalismwhen extending with nonmonotonic definitions.
Ithen describe the approach of user-defined nonmo-notonicity and illustrate how some commonly usednonmonotonic constructions can be defined withinit.
Finally I conclude with a discussion of the re-lation to Reiter's default logic and computationalproperties of the approach.2 P re l iminar iesThere are two main properties that will be assumedof a unification-based formalism in order to extendit with the possibility of defining nonmonotonic con-structions.
The first, and most important, is thatwe require a subsumption order on the set S of ob-jects denoted by the formalism.
Secondly it shouldbe possible to define inheritance hierarchies on thelinguistic knowledge described by the formalism.One very plausible subsumption order that can beused is the ordinary subsumption lattice of featurestructures.
It is, however, possible to use some otherkind of subsumption order if that is more suitable forthe domain to be modelled by the formalism.
Ex-amples of other subsumption orders that might beuseful are typed feature structures, feature structu-res extended with disjunction, or simply an orderbased on sets and set inclusion.In this paper the notation a U b is used whene-ver a subsumes b (i.e.
whenever a "is more specificthan" or "contains more information than" b).
Con-sequently, a I'- b is used whenever a _ b but a ?
b.The subsumption order is assumed to be a semi-63lattice and permits computing a unifier, denoteda N b, corresponding to the greatest lower bound,for every pair of elements within it.
The elementcorresponding to the bottom of the order relation isdenoted fai l  and represents inconsistent informationor unification failure.The second constraint placed on the formalism,the possibility of defining an inheritance hierarchy,is not essential for the definition of nonmonotonicoperations.
It is, however, very useful when de-fining nonmonotonic constructions.
The followingnotation will be used for describing an inheritancehierarchy.c lass  the name of  the class;i sa  its parent in the hierarchy;requires a structure.Thus, each member in the inheritance hierarchy iscalled a class, which is defined by giving it a nameand a parent in the hierarchy.
It is also possible todefine some constraints, called requirements, whichmust hold for a class.
These requirements can beboth structures in the subsumption order and non-monotonic rules.
The constraints on classes are inhe-rited through the hierarchy.
Every object in a class isassumed to contain at least the information given bythe constraints pecified for it and all its ancestors.For simplicity multiple inheritance between classeswill not be allowed.
This means that two classeswhere none of them is a subclass of the other, willalways be considered inconsistent and thus yield afailure when unified.3 User -Def ined  Nonmonoton ic i tyI will now describe how the work by Young andRounds can be generalized to allow the user to de-fine nonmonotonic constructions.
The main idea intheir approach is that each node in a feature struc-ture consists of a nonmonotonic  sort.
Such sorts cancontain two different kinds of information, the ordi-nary monotonic information and a set of defaults.
Ifwe assume that fl is defined as a default in Youngand Rounds' work then it is interpreted according tothe rule: if it is consistent to believe # then believe#.
In Reiter's default logic this is expressed with thefollowing normal default rule.
:##In this paper I want to allow the user to use otherforms of nonmonotonic nferences and not only thenormal default rule given above.
Therefore, I willconsider the general form of default rules.
An in-tuitive reading of a general default rule is, if a isbelieved and it is consistent o believe # then be-lieve 7.
In default logic this is usually expressed as7The next question is how such defined nonmonoto-nic rules are going to be interpreted in a unificationframework.
In (Reiter, 1980), a rule like the oneabove could be applied whenever a is true and #is consistent with the information we already have.If we assume that V represents the information al-ready given this means that the default rule can beapplied whenever Y C a and Y I-I # does not yieldunification failure.
When the rule is applied the newinformation obtained would be 1/Iq 7.In the approach described in this paper, the user isallowed to define the actual nonmonotonic rule thatshould be used for a particular operation by usingthe following syntax.nonmonname(parameter1 , .
.
.parametern)  : whena :#=>7In the syntax given above name assigns a nameto the defined rule, and thus allows the user touse nonmonotonic information when defining lin-guistic knowledge.
The parameters in the rule de-finition are variables, which can be used withinthe actual default rule at the end of the descrip-tion.
The user is assumed to assign the nonmonoto-nic information contained in this rule to his lingui-stic knowledge by using an expression of the formnarne(pararneter l  , .
.
.
parametern  ).The when slot in the rule allows the user to decidewhen the rule is going to be applied, or in Youngand Rounds' terminology, explained.
I will makeuse of two values for the when-slot, immediate andposterior.
Immediate means that the nonmonotonicrule is going to be applied each time a full unifi-cation task has been solved or whenever all infor-mation about an object in the defined inheritancehierarchy has been retrieved.
Posterior explanationmeans that the explanation of the rule is postponeduntil reaching the result of some external process,for example, a parser or generator.
There is howe-ver no hinder in excluding the use of other valueshere.
One could, for example, imagine cases whereone would want different nonmonotonic rules to beexplained after a completed parse, a generation, orafter resolving discourse referents.Note that although the when slot in the defini-tion of a nonmonotonic rule allows the user to definewhen his rule is going to be applied we will still havean order independent nonmonotonic unification ope-rator.
This is the case because we follow Young andRounds' approach and separate the unification ope-ration from the explanation of a nonmonotonic rule.Therefore, what affects the final result of a computa-tion is when one chooses to explain default rules andnot the order of the unification operations occurringbetween such explanations.644 Formal  Def in i t ionsIn this section I provide give the formal definitionsfor nonmonotonic sorts and how nonmonotonic sortsare unified and explained.
The definitions are gene-ralizations of the definitions in Young and Rounds(1993).
The notation a -,~ b is used to denote thefact that a I-1 b does not yield unification failure.A nonmonotonic sort is a structure containingboth information from the basic subsumption orderand information about default rules to be explainedat a later point in the computation.Def in i t ion  1 A nonmonotonic sort is a pair (s, A)where s E S and A is a set of nonmonotonicrules of the form (w, a : fl ==~ 3') where w is anatom and a, fl and 3' E S. It is assumed that foreach nonmonotonic rule 3' _C fl, a --, s, fl ,~ s,and 713s C s.As seen by the definition a nonmonotonic sort isconsidered to be a pair of monotonic informationfrom the subsumption order and nonmonotonic in-formation represented as a set of nonmonotonic ru-les, The user can assign nonmonotonic nformationto a nonmonotonic sort by calling a nonmonotonicdefinition as defined in the previous ection.
The ac-tual nonmonotonic rule occurring within the sort isa pair consisting of the when slot and the last partof the nonmonotonic definition, with the parametervariables instantiated according to the call made bythe user.The second part of this definition contains somewell-foundedness conditions for a nonmonotonicsort.
The first condition (3' _C ~) is a restrictionsimilar to the restriction to normal default rules inReiter's (1980) default logic.
This restriction ensu-res that the application of one default rule will nevercause previously applied default rules to be inappli-cable.
This makes the procedure for application ofdefaults more efficient and will be further discussedin section 6.The next two conditions in the definition, a ,-, sand fl ~ s, guarantee that the default rule is or canbe applicable to the nonmonotonic sort.
The reasonfor only checking that a ~ s instead of s C a is thatfuture unifications can restrict the value of s intosomething more specific than a and thus may makethe default rule applicable.The last condition on a nonmonotonic sort, 3'Us r-s, may seem superfluous.
The reason for includingit is to ensure that applying the default actually re-stricts the value of the sort.
Otherwise the defaultrule would have no effect and can be removed.
Notein particular that the above conditions on a nonmo-notonic sort implies that 7 may be fail.Given the unification operation of objects withinthe subsumption order and the definition of nonmo-notonic sorts it is possible to define an operation fornonmonotonic unification.Def in i t ion  2 The nonmonotonic unification (n~v)of two nonmonotonic sorts (sl, A1) and (s2, A2)is the sort (s, A) where$ S ~ S 1 17 $2 and, A = {d id= (w,  tr : f l  ::?, 7), de  A1UA2, a.,~s, ~, .
.s ,  andTtqst -s}The nonmonotonic unification is computed bycomputing the unification of the monotonic parts ofthe two sorts and then taking the union of their non-monotonic parts.
The extra conditions used whenforming the union of the nonmonotonic parts of thesorts are the same as in the definition of a nonmo-notonic sort and their purpose is to remove nonmo-notonic rules that are no longer applicable, or wouldhave no effect when applied to the sort resulting fromthe unification.It is important o note that this generalization ofthe original definition of nonmonotonic unificationfrom Young and Rounds (1993) preserves the pro-perty of order independence for default unification.When using nonmonotonie sorts containing non-monotonic rules, we also need to know how tomerge the monotonic and nonmonotonic informa-tion within the sort.
I will use the terminology w-application for applying one nonmonotonic rule tothe sort and w-ezplanation when applying all possi-ble rules.Def in i t ion  3 The nonmonotonic rule(w, c~ : fl =?, 7) is w-applicable to s E S if:?
s I - -Ot?
s .
.
.
f l o rs=fa i l?
s lqT l - sors=fa i lThe result of the w-application is 3' I'1 sNote that the w in w-application should be consi-dered as a variable.
This means that only nonmono-tonic rules whose first component is w are consideredand that it is possible to choose which nonmonoto-nic rules should be applied in a particular point atsome computation.In addition note that the restriction that 7 ---in all nonmonotonic rules and the special cases fors = fail ensures that the application of one non-monotonic rule never destroys the applicability of apreviously applied rule.
This reduces the amountof work required when computing a w-explanation.Based on these observations, a sufficient conditionfor w-explanation is defined as follows.Def in i t ion  4 t is a w-ezplanation of a nonmono-tonic sort (s, A) if it can be computed in thefollowing way:1.
I f  s = fail or no d E A is w-applicable thent = s else2.
Ch,,ose a d = (w, cr : fl =?, 7) E A such thatd is w-applicable to s.3.
Let s = sl ' lT and go to 1.65As shown by the definition, a w-explanation iscomputed by choosing one w-applicable default ruleat a time and then applying it.
Since the defini-tion of w-applicability and the condition that 7 -in all nonmonotonic rules ensures that whenever anonmonotonic rule is applied it can never be inapp-licable, there is no need to check if the preconditionsof earlier applied nonmonotonic rules still hold.Note also that the choice of which nonmonotonicrule to apply in each step of a w-explanation is non-deterministic.
Consequently, it is possible to haveconflicting defaults and multiple w-explanations fora nonmonotonic sort.Note also that the result of a w-explanation is al-lowed to be fail.
Another option would be to inter-pret .fail as if the application of the nonmonotonicrule should not be allowed.
However, as seen in thenext section, for many uses of nonmonotonic exten-sions within unification-based formalisms, the aim isto derive failure if the resulting structure does notfulfill some particular conditions.
This makes it im-portant to allow fail to be the result of applying anonmonotonic rule.5 ExamplesIn this section I will show how some of the mostcommon nonmonotonic extensions to unification-based grammar can be expressed by defining rulesas above.
I will start with defining default values.This is done by defining a nonmonotonic rule defaultfor the class value, which is assumed to be the mostgeneral class in a defined hierarchy.
The rule defi-ned here is treated as the one in (Young and Rounds,1993).class value ;nonmon default(X) :immediate :X =>X.This default rule can be used when defining verbs.The rule is used for stating that verbs are active bydefault.
I also define the two Swedish verbs skickade(sent) and skickades (was sent) to illustrate how thisrule works.class verb;isa value ;requires \[form: default(active)\].class skickade;isa verb;requires \[lex: skicka\] .class skickades ;isa verb;requires \[lex: skicka, form:passive\].While retrieving the information for these twoverbs we will obtain the following two feature struc-tures containing nonmonotonic sorts:For skickade:\ [ lex :  sk icka,  form:(\[I ,{(immediate, :activeactive )})3For skickades:\ [ lex :  sk icka ,  form:(pass ive ,{( immediate ,  :ac t ive  ::~act ive  )})\]Since I have used immediate for the when-slot inthe definition of the default rule, this nonmonotonicrule will be applied immediately after retrieving allinformation about a verb in the hierarchy.
For thetwo structures above, the default rule can be app-lied for skickade, since active is consistent with D,but not for skickades, since active and passive areinconsistent.
The result after applying immediate-explanation to the two structures above is shownbelow.For skickade:\[lex: skicka, form: active\]For skickades:\ [ lex :  sk icka ,  form: pass ive \ ]Another nonmonotonic operation that has beenused in LFG (Kaplan and Bresnan, 1983) is the va-lue constraint (=e) used to check whether a sub-structure has a particular value after a completedparse.
The definition of value constraints as a non-monotonic rule makes use of negation, interpretedas negation as failure.class value ;nonmon =c(X):posterior :-~X => fail.One use of value constraints in LFG is to asserta condition that some grammar ules can only beused for passive sentences.
I will here assume thata representation for verbs where passive verbs havethe value passive for the attribute form, but whereother verbs have no value for this attribute.
In thesyntax used in this paper the constrMnt hat a par-ticular grammar ule can only be used for passiveverbs would be expressed as below:\[form: =c(pass ive) \ ]This would result in the nonmonotonic sort:\[form: (\[\],{(posterior, : ~passivefail )})3As seen by the definition of =c, the explanationfor this nonmonotonic sort is postponed and is assu-med to be computed after finding a parse for somesentence.
This implies that the only case where thisrule would not apply, and thus not give fail as a re-sult, is when the value of form actually is passive.For all other values of form, we would have some-thing that is consistent with ~passive and thus thenonmonotonic rule will derive failure when applied.66The next nonmonotonic structure I want to dis-cuss is any-values.
The inheritance hierarchy is usedto be able to define any-values in a simple way.class value.class none;isa value.class any_value;isa value.nonmon any( ) :poster io r:any_no_value => fail.c lass  any_no_value ;i sa  any_value.In this small hierarchy it is assumed that all pos-sible values of a structure is a subtype of value.
Wethen divide this into none, which represents that astructure cannot have any value and any_value whichcontains all actual values.
The class any_value isthen further divided into a class called any_no_value,which only contains this single value, and the ac-tual values of a structure.
The class any_no_valueshould not be used when defining linguistic know-ledge.
However, when applying the default rule avalue that has not been instantiated is compatiblewith this any_no_value.
Therefore the default rulecan make the conclusion that the structure is in-consistent, which is what we desire.
Note that, assoon as a value has been further instantiated intoa 'real' value, it will no longer be consistent withany_no_value, and the nonmonotonic rule cannot ap-ply.
Two examples will further illustrate this.The nonmonotonic sort:(0 ,  {( posterior, :any_no_valuefail )})will be posterior-explained to:failWhile the sort:(\[lex: kalle\], {( posterior,:any_no_value ~ fail )})will be posterior-explained to:\[lex : kalle\]The last nonmonotonic operations I want to dis-cuss are completeness and coherence as used in LFG.To be able to define these operations I assume theinheritance hierarchy above, without the nonmono-tonic definition of any.
I will, instead, make use ofthe two nonmonotonic definitions below.class value;nonmon coherence(A)  : immediate : \[A:none\] => \[A: none\];nonmon completeness (A) :posterior:\[A: any_no_value\] => fail.The first of these rules is used to check coherence,and the effect is to add the value none to each attri-bute that has been defined to be relevant for cohe-rence check, but has not been assigned a value in thelexicon.
The second rule is used for checking com-pleteness and it works similarly to the any-definitionabove.Finally, I will show how a fragment of a lexicon canbe defined according to these rules.
Note that in thedefinition of the transitive verb, the value any_valueis given to the appropriate attributes.
This meansthat they are inconsistent with none, and thus, thecoherence rule cannot be applied.concept verb;isa any_value ;requires coherence(subj) Acoherence(obj)  A ...;requires completeness(subj)  Acompleteness(obj ) A ....concept transitiveverb;isa verb;requircs \[subj: any_value, obj:any_value\].6 Re la t ion  to  Defau l t  Log icIn this section I will discuss the relation of this workto Reiter's (1980) default logic.
There will also besome discussion on the computational properties andlimitations of the given approach.Compared with Reiter's default logic, our notionof nonmonotonic sorts corresponds to default theo-ries.
Unification of nonmonotonic sorts would thencorrespond to merging two default theories into onesingle theory and our notion of explaining a nonmo-notonic sort corresponds to computing the extensionof a default theory in default logic.In default logic there is often a restriction tonormal-default theories since non-normal defaulttheories are not even semi-decidable.
The restric-tion in our nonmonotonic rules that 7 C fl is similarto the restriction into normal default rules and cap-tures the important property, that the application ofone nonmonotonic rule should not affect the appli-cability of previously applied rules.
The decidabilityof the nonmonotonic rules defined here is, however,highly dependant on the given subsumption order.In particular it is dependent on having a decidableunification operation and subsumption check.As mentioned previously there is with nonmonoto-nic sorts, as well as normal default logic, a possibilityof conflicting defaults and thus multiple nonmono-tonic extensions for a structure.
One difference isthat nonmonotonic sorts allow that the applicationof a nonmonotonic rule leads to fail, i.e.
an incon-sistent structure, while default logic does not allowthis outcome.
However, since fail is allowed as a va-lid explanation for a nonmonotonic sort, there is, as67for normal default logic, always at least one expla-nation for a sort.The two following examples will illustrate the dif-ference between onmonotonic rules giving multipleextensions and nonmonotonic rules giving a singleexplanation fail.Example a:In:l\] :\[c:2\]\[a:l b:l\] \[b:2 e:2\]Example b:\[a:l\] :\[b:21\[a:l b:l\] \[a:2 b:2\]In example a the application of one rule, does notmake the other inapplicable.
Thus the only expla-nation for a structure is achieved by applying boththese two rules and results in fail.
In example b,however, the application of one of the rules wouldblock the application of the other.
Thus, in thiscase there are two explanations for the structure de-pendant on which of the rules that has been app-lied first.
Note that even though there is an orderdependency on the application order of nonmonoto-nic rules this does not affect the order independencyon nonmonotonic unification between application ofnonmonotonic rules.Allowing multiple extensions gives a higher com-putational complexity than allowing only theorieswith one extension.
Since it is the user who definesthe actual nonmonotonic theory multiple extensionsmust be allowed and it must be considered a task forthe user to define his theory in the way he prefers.7 Improvements  of the ApproachI will start with two observations regarding the de-finitions given in section 3.
First, it is possible togeneralize these definitions to allow the first com-ponent of a nonmonotonic sort to contain substruc-tures that are also nonmonotonic sorts.
With thegeneralized versions of the definitions explanationsthat simultaneously explain all substructures of anonmonotonic sort will be considered.
Note thatthe explanation of default rules at one substructuremight affect the explanation of rules at other sub-structures.
Therefore the order on which nonmono-tonic rules at different substructures are applied isimportant and all possible application orders mustbe considered.Considering unification of nonmonotonic sorts itis not necessary to simplify the nonmonotonic partof the resulting sort.
A = A i U A2 can be defined asan alternative to the given definition.
This alternatedefinition is useful for applications where the simpli-fication of nonmonotonic sorts by each unification isexpected to be more expensive than the extra workneeded to explain a sort whose nonmonotonic partis not simplified.As stated previously, nonmonotonic sorts allowmultiple explanations of a nonmonotonic sort.
If de-sired, it would be fairly easy to add priorities to thenonmonotonic rules, and thus induce a preferenceorder on explanations.One further example will illustrate that it is alsopossible to define negation as failure with nonmono-tonic rules.
An intuitive interpretation ofthe definedrule below is that if X is believed (1 /E  X), failureshould be derived.nonmon not(X) :immediate X => fail;However, if this definition is to be really usefulwe must also allow one definition of a nonmonoto-nic rule to make use of other nonmonotonic rules.In our original definition we said that the nonmo-notonic rule above should be applied if Y ,~ --X.This can be generalized to the case where --X is anonmonotonic rule if we extend the definition of -~to also mean that the application (or explanation)of the not rule at this node does not yield failure.However, this generalization is outside default logic.Therefore, its computational properties are unclearand needs more investigation.8 ConclusionIn this paper I have proposed a method allowingthe user to define nonmonotonic operations in aunification-based grammar formalism.
This wasdone by generalizing the work on nonmonotonicsorts (Young and Rounds, 1993) to allow not onlynormal defaults rules but general default rules thatare defined by the user.
The method has a veryclose relation to Reiter (1980).
We also noted thatthe method can be applied to all domains of structu-res where we have a defined subsumption order andunification operation.The generality of the approach was demonstratedby defining some of the most commonly used nonmo-notonic operations.
We also gave formal definitionsfor the approach and provided a discussion on itscomputational properties.AcknowledgmentsThis work has been supported by the Swedish Re-search Council for Engineering Sciences (TFR).
Iwould also like to thank Lars Ahrenberg and Pa-trick Doherty for comments on this work and MarkA.
Young for providing me with much-needed infor-mation about his and Bill Rounds' work.Re ferencesGosse Bouma.
1990.
Defaults in Unification Gram-mar.
in Proceedings of ~he 1990 Conference of ~he68Association for Computational Linguistics, pages165-172.Gosse Bouma.
1992.
Feature Structures andNonmonotonicity.
Computational Linguistics18(2):183-203.Jochen D6rre and Andreas Eisele.
1991.
A Compre-hensive Unification-Based Grammar Formalism.DYANA Report - Deliverable R3.1B.
January1991.Martin C. Emele, and Remi Zaja?.
1990.
TypedUnification Grammars.
In Proceedings of the I gthInternational Conference on Computational Lin-guistics, Vol.
3, pages 293-298, Helsinki, Finland.Rod Johnson and Michael Rosner.
1989.
A Rich En-vironment for Experimentation with UnificationGrammars.
In Proceedings of the 4th Conferenceof the European Chapter of the Association forComputational Linguistics, pages 182-189, Man-chester, England.R.
Kaplan and J.Bresnan.
1983.
A Formal Systemfor Grammatical Representation.
In: J Bresnan(ed.
), The Mental Representation of GrammaticalRelations.
MIT Press, Cambridge, Massachusetts.Ray Reiter.
1980.
A Logic for Default Reasoning.In Artificial Intelligence, 13:81-132.Graham Russel, Afzal Ballim, John Carrol andSusan Warwick-Armstrong.
1992.
A Practi-cal Approach to Multiple Default Inheritance forUnification-Based Lexicons.
Computational Lin-guistics 18(3):311-337.Lena Str6mb/ick.
1994.
Achieving Flexibility in Uni-fication Grammars.
In Proceedings of the 15th In-ternational Conference on Computational Lingui-stics, Vol.
3, pages 842-846, Kyoto, Japan.Mark A Young and Bill Rounds.
1993.
A Logi-cal Semantics for Nonmonotonic Sorts.
In Procee-dings of the 1993 Conference of the Associationfor Computational Linguistics, pages 209-21569
