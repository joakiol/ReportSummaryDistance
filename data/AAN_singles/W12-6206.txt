Proceedings of the 10th International Workshop on Finite State Methods and Natural Language Processing, pages 35?39,Donostia?San Sebastia?n, July 23?25, 2012. c?2012 Association for Computational LinguisticsFinite-state technology in a verse-making toolManex Agirrezabal, In?aki Alegria, Bertol ArrietaUniversity of the Basque Country (UPV/EHU)maguirrezaba008@ikasle.ehu.es, i.alegria@ehu.es, bertol@ehu.esMans HuldenIkerbasque (Basque Science Foundation)mhulden@email.arizona.eduAbstractThis paper presents a set of tools designed toassist traditional Basque verse writers duringthe composition process.
In this article weare going to focus on the parts that have beencreated using finite-state technology: this in-cludes tools such as syllable counters, rhymecheckers and a rhyme search utility.1 The BAD tool and the Basque singingtraditionThe BAD tool is an assistant tool for verse-makersin the Basque bertsolari tradition.
This is a formof improvised verse composition and singing whereparticipants are asked to produce impromptu com-positions around themes which are given to themfollowing one of many alternative verse formats.The variety of verse schemata that exist all imposefairly strict structural requirements on the composer.Verses in the bertsolari tradition must consist of aspecified number of lines, each with a fixed num-ber of syllables.
Also, strict rhyme patterns mustbe followed.
The structural requirements are con-sidered the most difficult element in the bertsolar-itza?however, well-trained bertsolaris can usuallyproduce verses that fulfill the structural prerequisitesin a very limited time.The BAD tool presented here is mainly di-rected at those with less experience in the tradi-tion such as students.
One particular target groupare the bertso-eskola-s (verse-making schools) thathave been growing in popularity?these are schoolsfound throughout the Basque Country that trainyoung people in the art of bertsolaritza.The primary functionality of the tool is illustratedin figure 1 which shows the main view of the util-ity.
The user is offered a form in which a versecan be written, after which the system checks thetechnical correctness of the poem.
To perform thistask, several finite state transducer-based modules,are used, some of them involving the metrics (syl-lable counter) of the verse, and others the rhyme(rhyme searcher and checker).
The tool has supportfor 150 well known verse meters.In the following sections, we will outline the tech-nology used in each of the parts in the system.2 Related workMuch of the existing technology for Basque mor-phology and phonology uses finite-state technology,including earlier work on rhyme patterns (Arrietaet al, 2001).
In our work, we have used the Basquemorphological description (Alegria et al, 1996) inthe rhyme search module.
Arrieta et al (2001) de-velop a system where, among other things, users cansearch for words that rhyme with an introduced pat-tern.
It is implemented in the formalism of two-levelmorphology (Koskenniemi, 1983) and compiled intofinite-state transducers.We have used the open-source foma finite-statecompiler to develop all the finite-state based partsof our tool.1.
After compiling the transducers, weuse them in our own application through the C/C++API provided with foma.3 Syllable counterAs mentioned, each line in a verse must contain aspecified number of syllables.
The syllable countermodule that checks whether this is the case consistsof a submodule that performs the syllabification it-self as well as a module that yields variants producedby optional apocope and syncope effects.
For thesyllabification itself, we use the approach describedin Hulden (2006), with some modifications to cap-ture Basque phonology.1In our examples, FST expressions are written using fomasyntax.
For details, visit http://foma.googlecode.com35Figure 1: A verse written in the BAD web application.3.1 SyllabificationBasque syllables can be modeled by assuming amaximum onset principle together with a sonorityhierarchy where obstruents are the least sonorous el-ement, followed in sonority by the liquids, the nasalsand the glides.
The syllable nuclei are always a sin-gle vowel (a,e,i,o,u) or a combination of a low vowel(a,e) and a high vowel (i,o,u) or a high vowel and an-other high vowel.The syllabifier relies on a chain of composed re-placement rules (Beesley and Karttunen, 2003) com-piled into finite-state transducers.
These defini-tions are shown in figure 2.
The overall strategyis to first mark off the nuclei in a word by the ruleMarkNuclei which takes advantage of a left-to-right longest replacement rule.
This is to ensure thatdiphthongs do not get split into separate syllablesby the subsequent syllabification process.
Follow-ing this, syllables are marked off by the markSyll-rule, which inserts periods after legitimate syllables.This rule takes advantage of the shortest-leftmost re-placement strategy?in effect minimizing the codaand maximizing the size of the onset of a syllable tothe extent permitted by the allowed onsets and co-das, defined in Onset and Coda, respectively.To illustrate this process, supposing that weare syllabifying the Basque word intransitiboa.The first step in the syllabification process isto mark the nuclei in the word, resulting in{i}ntr{a}ns{i}t{i}b{o}{a}.
In the more com-plex syllabification step, the markSyll rule as-sures that the juncture ntr gets divided as n.tr be-cause nt.r would produce a non-maximal onset,and i.ntr would in turn produce an illegal onset indefine Obs [f|h|j|k|p|s|t|t s|t z|t x|x|z|b|d|g|v|d d|t t];define LiqNasGli [l|r|r r|y|n|m];define LowV [a|e|o];define HighV [i|u];define V LowV | HighV;define Nucleus [V | LowV HighV |[HighV HighV - [i i] - [u u]]];define Onset (Obs) (LiqNasGli);define Coda C?<4;define MarkNuclei Nucleus @-> %{ ... %};define Syll Onset %{ Nucleus %} Coda;define markSyll Syll @> ...
"."
|| _ Syll ;define cleanUp %{|%} -> 0;regex MarkNuclei .o.
markSyll .o.
cleanUp;Figure 2: Syllable definitionthe second syllable.
The final syllabification, af-ter markup removal by the Cleanup rule, is thenin.tran.si.ti.bo.a.
This process is illustrated in fig-ure 3In bertsolaritza, Basque verse-makers follow thistype of syllable counting in the majority if cases;however, there is some flexibility as regards the syl-labification process.
For example, suppose that thephrase ta lehenengo urtian needs to fit a line whichmust contain six syllables.
If we count the sylla-bles using the algorithm shown above, we receive acount of eight (ta le.hen.en.go ur.ti.an).
However,in the word lehenengo we can identify the syncopepattern vowel-h-vowel, with the two vowels beingidentical.
In such cases, we may simply replacethe entire sequence by a single vowel (ehe ?
e).This is phonetically equivalent to shortening the ehe-sequence (for those dialects where the orthographi-cal h is silent).
With this modification, we can fit36the line in a 7 syllable structure.
We can, however,further reduce the line to 6 syllables by a secondtype of process that merges the last syllable of oneword with the first of the next one and then resyl-labifying.
Hence, ta lehenengo urtian, using themodifications explained above, could be reduced tota.le.nen.gour.ti.an, which would fit the 6 syllablestructure.
This production of syllabification variantsis shown in figure 4.transformazioeitr{a}nsf{o}rm{a}z{i}{o}{ei}markNucleisyllabifytr{a}ns.f{o}r.m{a}.z{i}.{o}.
{ei}cleanUptrans.for.ma.zi.o.eiFigure 3: Normal syllabification.trarnsfomntrzarnzsfzomnmarrkNuculkeuiskreybskeymtrzarnzsfzomn trnzsfzomntratnsftronnmtzratznsftzroznnmmarrkNuculkeuiskreybskeymtzratznsftzroznnm tzratznstzroznnmFigure 4: Flexible syllabification.4 Finite-state technology for rhymes4.1 Basque rhyme patterns and rulesSimilar to the flexibility in syllabification, Basquerhyme schemes also allows for a certain amountof leeway that bertsolaris can take advantage of.The widely consulted rhyming dictionary HiztegiErrimatua (Amuriza, 1981) contains documented anumber of phonological alternations that are accept-able as off-rhymes: for example the stops p, t, and kare often interchangeable, as are some other phono-logical groups.
Figure 5 illustrates the definitionsfor interchangeable phonemes when rhyming.
Theinterchangeability is done as a prelude to rhymechecking, whereby phonemes in certain groups,such as p, are replaced by an abstract symbol de-noting the group (e.g.
PTK).4.2 Rhyme checkerThe rhyme checker itself in BAD was originally de-veloped as a php-script, and then reimplemented asdefine plosvl [p | t | k];define rplosv [b | d | g | r];define sib [s | z | x];define nas [n | m];define plosvlconv ptk -> PTK;define rplosvconv bdgr -> BDGR;define sibconv sib -> SZX;define nasconv nas -> NM;define phoRules plosvlconv .o.
rplosvconv .o.sibconv .o.
nasconv ;Figure 5: Conflation of consonant groups before rhymechecking.a purely finite-state system.
In this section we willfocus on the finite-state based one.As the php version takes advantage of syllabifica-tion, the one developed with transducers does not.Instead, it relies on a series of replacement rules andthe special eq() operator available in foma.
Animplementation of this is given in figure 6.
As inputto the system, the two words to be checked are as-sumed to be provided one after the other, joined bya hyphen.
Then, the system (by rule rhympat1)identifies the segments that do not participate in therhyme and marks them off with ?{?
and ?}?
symbols(e.g.
landa-ganga ?
<{l}anda>-<{g}anga>).The third rule (rhympat3) removes everythingthat is between ?{?
and ?
}?, leaving us only withthe segments relevant for the rhyming pattern (e.g.<anda>-<anga>).
Subsequent to this rule, weapply the phonological grouping reductions men-tioned above in section 4.1, producing, for example(<aNMBDGRa>-<aNMBDGRa>).After this reduction, we use the eq(X,L,R)-operator in foma, which from a transducer X, filtersout those words in the output where material be-tween the specified delimiter symbols L and R areunequal.
In our case, we use the < and > symbolsas delimiters, yielding a final transducer that doesnot accept non-rhyming words.4.3 Rhyme searchThe BAD tool also includes a component for search-ing words that rhyme with a given word.
It is devel-oped in php and uses a finite-state component like-wise developed with foma.Similarly to the techniques previously described,it relies on extracting the segments relevant to the37define rhympat1 [0:"{" ?
* 0:"}"[[[V+ C+] (V) V] | [(C) V V]] C* ];# constraining V V C patterndefine rhympat2 ?[?
* V "}" V C];# cleaning non-rhyme partdefine rhympat3 "{" ?
* "}" -> 0;define rhympat rhympat1 .o.
rhympat2 .o.rhympat3;# rhyming pattern on each word# and phonological changesdefine MarkPattern rhympat .o.phoRules .o.
patroiak;# verifying if elements between < and ># are equaldefine MarkTwoPatterns0:%< MarkPattern 0:%> %-0:%< MarkPattern 0:%> ;define Verify _eq(MarkTwoPatterns, %<, %>)regex Verify .o.
Clean;Figure 6: Rhyme checking using foma.rhyme, after which phonological rules are applied(as in 4.1) to yield phonetically related forms.
Forexample, introducing the pattern era, the system re-turns four phonetically similar forms era, eda, ega,and eba.
Then, these responses are fed to a trans-ducer that returns a list of words with the same end-ings.
To this end, we take advantage of a finite-statemorphological description of Basque (Alegria et al,1996).As this transducer returns a set of words whichmay be very comprehensive?including words notcommonly used, or very long compounds?we thenapply a frequency-based filter to reduce the set ofpossible rhymes.
To construct the filter, we useda newspaper corpus, (Egunkaria2) and extracted thefrequencies of each word form.
Using the frequencycounts, we defined a transducer that returns a word?sfrequency, using which we can extract only the n-most frequent candidates for rhymes.
The systemalso offers the possibility to limit the number of syl-lables that desired rhyming words may contain.
Thesyllable filtering system and the frequency limitingparts have been developed in php.
Figure 7 showsthe principle of the rhyme search?s finite-state com-ponent.5 EvaluationAs we had available to us a rhyme checker writtenin php before implementing the finite-state version,2http://berria.inforegex phoRules .o.
phoRules.i .o.0:?
* ?
* .o.
dictionary ;Figure 7: Rhyme search using fomait allowed for a comparison of the application speedof each.
We ran an experiment introducing 250,000pairs of words to the two rhyme checkers and mea-sured the time each system needed to reply.
TheFST-based checker was roughly 25 times faster thanthe one developed in php.It is also important to mention that these toolsare going to be evaluated in an academic environ-ment.
As that evaluation has not been done yet, wemade another evaluation in our NLP group in or-der to detect errors in terms of syllabification andrhyme quality.
The general feeling of the experimentwas that the BAD tool works well, but we had someefficiency problems when many people worked to-gether.
To face this problem some tools are beingimplemented as a server.6 Discussion & Future workOnce the main tools of the BAD have been devel-oped, we intend to focus on two different lines ofdevelopment.
The first one is to extend to flexibil-ity of rhyme checking.
There are as of yet patternswhich are acceptable as rhymes to bertsolaris thatthe system does not yet recognize.
For example,the words filma and errima will not be accepted bythe current system, as the two rhymes ilma and imaare deemed to be incompatible.
In reality, these twowords are acceptable as rhymes by bertsolaris, asthe l is not very phonetically prominent.
However,adding flexibility also involves controlling for over-generation in rhymes.
Other reduction patterns notcurrently covered by the system include phenomenasuch as synaloepha?omission of vowels at wordboundaries when one word ends and the next onebegins with a vowel.Also, we intend to include a catalogue of melodiesin the system.
These are traditional melodies thatusually go along with a specific meter.
Some 3,000melodies are catalogued (Dorronsoro, 1995).
We arealso using the components described in this article inanother project whose aim is to construct a robot ca-pable to find, generate and sing verses automatically.38AcknowledgmentsThis research has been partially funded by the Span-ish Ministry of Education and Science (OpenMT-2, TIN2009-14675-C03) and partially funded by theBasque Government (Research Groups, IT344-10).We would like to acknowledge Aitzol Astigarragafor his help in the development of this project.
Hehas been instrumental in our work, and we intend tocontinue working with him.
Also we must mentionthe Association of Friends of Bertsolaritza, whoseverse corpora has been used to test and develop thesetools and to develop new ones.ReferencesAlegria, I., Artola, X., Sarasola, K., and Urkia,M.
(1996).
Automatic morphological analysisof Basque.
Literary and Linguistic Computing,11(4):193?203.Amuriza, X.
(1981).
Hiztegi errimatua [Rhyme Dic-tionary].
Alfabetatze Euskalduntze Koordinakun-dea.Arrieta, B., Alegria, I., and Arregi, X.
(2001).
Anassistant tool for verse-making in Basque basedon two-level morphology.
Literary and linguisticcomputing, 16(1):29?43.Beesley, K. R. and Karttunen, L. (2003).
Finite statemorphology.
CSLI.Dorronsoro, J.
(1995).
Bertso doinutegia [Versemelodies repository].
Euskal Herriko BertsolariElkartea.Hulden, M. (2006).
Finite-state syllabification.Finite-State Methods and Natural Language Pro-cessing, pages 86?96.Koskenniemi, K. (1983).
Two-level morphology:A general computational model for word-formproduction and generation.
Publications of theDepartment of General Linguistics, University ofHelsinki.
Helsinki: University of Helsinki.39
