Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing, pages 267?275,Singapore, 6-7 August 2009.c?2009 ACL and AFNLPGeo-mining: Discovery of Road and Transport NetworksUsing Directional PatternsDmitry DavidovICNCThe Hebrew University of Jerusalemdmitry@alice.nc.huji.ac.ilAri RappoportInstitute of Computer ScienceThe Hebrew University of Jerusalemarir@cs.huji.ac.ilAbstractOne of the most desired information typeswhen planning a trip to some place isthe knowledge of transport, roads andgeographical connectedness of prominentsites in this place.
While some transportcompanies or repositories make some ofthis information accessible, it is not easyto find, and the majority of informationabout uncommon places can only be foundin web free text such as blogs and fo-rums.
In this paper we present an algo-rithmic framework which allows an auto-mated acquisition of map-like informationfrom the web, based on surface patternslike ?from X to Y?.
Given a set of loca-tions as initial seeds, we retrieve from theweb an extended set of locations and pro-duce a map-like network which connectsthese locations using transport type edges.We evaluate our framework in several set-tings, producing meaningful and preciseconnection sets.1 IntroductionTextual geographical information such as locationdescriptions, directions, travel guides and trans-port tables is extensively used by people.
Dis-covering such information automatically can as-sist NLP applications such as question answering(Santos and Cardoso, 2008), and can be usefulfor a variety of other applications, including au-tomatic map annotation.Some textual geographical information can befound in web sites of transport companies, touristsites and repositories such as Wikipedia.
Suchsites usually utilize structured information suchas machine-readable meta-data, tables, scheduleforms or lists, which are relatively convenientfor processing.
However, automatic utilization ofsuch information is limited.
Even on these sites,only a small fraction of the available geographi-cal information is stored in a well-structured andfreely accessible form.
With the growth of theweb, information can be frequently found in ?or-dinary?
web pages such as forums, travelogues ornews.
In such sites, information is usually noisy,unstructured and present in the form of free text.This type of information can be addressed bylexical patterns.
Patterns were shown to be veryuseful in all sorts of lexical acquisition tasks, giv-ing high precision results at relatively low com-putational costs (Pantel et al, 2004).
Pattern-driven search engine queries allow to access suchinformation and gather the required data very effi-ciently (Davidov et al, 2007).In this paper we present a framework that givena few seed locations as a specification of a region,discovers additional locations (including alternatelocation names) and map-like travel paths throughthis region labeled by transport type labels.The type of output produced by our frameworkhere differs from that in previous pattern-basedstudies.
Unlike mainstream pattern-based webmining, it does not target some specific two-slotrelationship and attempts to extract word tuples forthis relationship.
Instead, it discovers geographi-cal networks of transport or access connections.Such networks are not unstructured sets of wordpairs, but a structured graph with labeled edges.Our algorithm utilizes variations of the basicpre-defined pattern ?
[Transport] from Location1to Location2?
which allows location names andconnections to be captured starting from the givenseed location set.
We acquire search engine snip-pets and extract contexts where location names co-appear.
Next we construct a location graph andmerge transport edges to identify main transportgroup types.
Finally, we improve the obtained databy reducing transitive connections and identifyingkey locations.267The obtained location data can be used as adraft for preparation of travel resources and on-demand travel plans.
It can also be used for ques-tion answering systems and for automated enrich-ment and verification of existing geographical re-sources.We evaluate our framework on three differentregions of different scale and type: Annapurna inNepal, the south Israel area and the Cardiff areain England.
In our evaluation we estimated pre-cision and the amount of discovered locations andtransport edges, and examined the quality of theobtained map as a whole by visually comparingthe overall connectedness of the graph to an actualroad or transport map.2 Related WorkIn this paper we utilize a pattern-based lexicalacquisition framework for the discovery of geo-graphical information.
Due to the importance oflexical databases for many NLP tasks, substantialresearch has been done on direct or indirect auto-mated acquisition of concepts (sets of terms shar-ing a significant aspect of their meaning) and con-cept relationships in the form of graphs connect-ing concepts or terms inside concepts into usuallyhierarchical or bipartite networks.
In the case ofgeo-mining, concepts can include sets of alterna-tive names for some place, or sets of all locationsof the same type (e.g., all countries).
Geographicalrelationships can include nearness of two locationsand entity-location relationships such as institute-address, capital-country, tourist site-city etc.The major differences between relationship ac-quisition frameworks come from the types and an-notation requirements of the supplied input andthe basic algorithmic approach used to processthis input.
A first major algorithmic approachis to represent word contexts as vectors in somespace and use distributional measures and auto-matic clustering in that space.
Curran (2002)and Lin (1998) use syntactic features in the vec-tor definition.
Caraballo (1999) uses conjunctionand appositive annotations in the vector represen-tation.While efforts have been made for improv-ing the computational complexity of these meth-ods (Gorman and Curran, 2006), they remain dataand computation intensive.The second major algorithmic approach is touse lexico-syntactic patterns, which have beenshown to produce more accurate results than fea-ture vectors at a lower computational cost on largecorpora (Pantel et al, 2004).
Most related workdeals with discovery of hypernymy (Hearst, 1992;Pantel and Lin, 2002) and synonymy (Widdowsand Dorow, 2002; Davidov and Rappoport, 2006).Some studies deal with the discovery of more spe-cific relation sub-types, including inter-verb re-lations (Chklovski and Pantel, 2004) and seman-tic relations between nominals (Davidov and Rap-poport, 2008).
Extensive frameworks were pro-posed for iterative discovery of pre-specified (e.g.,(Riloff and Jones, 1999)) and unspecified (e.g.,(Agichtein and Gravano, 2000)) relation types.Some concepts and relationships examined byseed-based discovery methods were of a geo-graphical nature.
For example, (Etzioni et al,2004) discovered a set of countries and (Davidovet al, 2007) discovered diverse country relation-ships, including location relationships between acountry and its capital and a country and its rivers.As noted in Section 1, the type of output that weproduce here is not an unstructured collection ofword pairs but a labeled network.
As such, ourtask here is much more complex.Our study is related to geographical informa-tion retrieval (GIR) systems.
However, our prob-lem is very far from classic GIR problem settings.In GIR, the goal is to classify or retrieve possi-bly multilingual documents in response to queriesin the form ?theme, spatial relationship, location?,e.g., ?mountains near New York?
(Purves et al,2006).
Our goal, in contrast, is not document re-trieval, but the generation of a structured informa-tion resource, a labeled location graph.Spatial relationships used in natural languagetend to be qualitative and descriptive rather thanquantitative.
The concept of Naive Geography,which reflects the way people think and writeabout geographical space, is described in (Egen-hofer and Shariff, 1995).
Later in (Egenhoferand Shariff, 1998) they proposed a way to convertcoordinate-based relationships between spatial en-tities to natural language using terms as ?crosses?,?goes through?
or ?runs into?.
Such terms can bepotentially used in patterns to extract geographi-cal information from text.
In this paper we startfrom a different pattern, ?from ...
to?, which helpsin discovering transport or connectedness relation-ships between places, e.g., ?bus from X to Y?
and?road from X to Y?.The majority of geographical data mining268frameworks utilize structured data such as avail-able gazetteers and Wikipedia metadata.
Sev-eral other studies utilize semi-structured data likeWikipedia links (Overell and Ruger, 2007) or sub-structures in web pages, including addresses andphone numbers (Borges et al, 2007).The recent Schockaert et al( 2008) frameworkfor extraction of topological relationships from theweb has some similarities to our study.
In bothcases the algorithm produces map-like structuresusing the web.
However, there are significant dif-ferences.
They utilize relatively structured addressdata on web pages and rely on the order of namedentities in address data for extracting containmentrelationships.
They also use co-appearances inaddresses (e.g., ?R1 / R2?
and ?R1 & R2?
as in?Newport & Gabalfa, Cardiff?)
to deduce locationboundaries.
This allows them to get high precisiondata for modern and heavily populated regions likeCardiff, where the majority of offices have avail-able well-formatted web pages.However, in less populated regions (a major tar-get for tourist information requests), this strategycould be problematic since a major informationsource about these places would be not local websites (in which local addresses are likely to befound) but foreign visitor sites, web forums andnews.
We rely on free text available in all typesof web pages, which allows us to capture unstruc-tured information which contains a significant por-tion of the web-available geographical knowledge.Our goals are also different from Schockaert etal.
( 2008), since we focus on obtaining informa-tion based on paths and transport between loca-tions, while in their work the goal is to find a net-work representing nearness of places rather thantheir connectivity by means of transport or walk-ing.
Nevertheless, in one of our evaluation settingswe targeted the area of Cardiff as in (Schockaertet al, 2008).
This allowed us to make an indi-rect comparison of a relevant part of our resultsto previous work, achieving state-of-the-art per-formance.3 The AlgorithmAs input to our algorithm we are given a seed ofa few location names specifiying some geograph-ical region.
In this section we describe the algo-rithm which, given these names, extracts the la-beled structure of connections between entities inthe desired region.
We first use a predefined pat-tern for recursive extraction of the first set of enti-ties.
Then we discover additional patterns fromco-appearing location pairs and use them to getmore terms.
Next, we label and merge the ob-tained location pairs.
Finally, we construct andrefine the obtained graph.3.1 Pattern-based discovery with web queriesIn order to obtain the first set of location connec-tions, we use derivatives of the basic pattern ?fromX to Y?.
Using Yahoo!
BOSS, we have utilizedthe API?s ability to search for phrases with wild-cards.
Given a location name L we start the searchwith patterns ?from * to L?, ?from * * to L?.
Theseare Yahoo!
BOSS queries where enclosing wordsin ??
means searching for an exact phrase and ?
*?means a wildcard for exactly one arbitrary word.This pattern serves a few goals beyond the dis-covery of connectedness.
Thus putting ?
*?s insidethe pattern rather than using ?from L to?
allowedus to avoid arbitrary truncation of multiword ex-pressions as in ?from Moscow to St. Petersburg?and reduced the probability of capturing unrelatedsentence parts like ?from Moscow to cover deficit?.Location names are usually ambiguous and thistype of web queries can lead to a significantamount of noise or location mix.
There are twotypes of ambiguity.
First, as in ?from Billericay toStock....?, stock can be a location or a verb.
Wefilter most such cases by allowing only capital-ized location names.
Besides, such an ambiguityis rarely captured by ?from * to L?
patterns.
Thesecond type is location ambiguity.
Thus ?Moscow?refers to at least 5 location names including farmsin Africa and Australia and a locality in Ireland.
Inorder to reduce mixing of locations we use the fol-lowing simple disambiguation technique.
Beforeperforming ?from...to?
queries, we downloaded upto 100 web pages pointed by each possible pairfrom the given seed locations, generating froma location pair L1, L2a conjunctive query ?L1* L2?.
Then we extracted the most informativeterms using a simple probabilistic metric:Rank(w) =P (w|QueryCorpus)P (w|GeneralCorpus),comparing word distribution in the downloadedQueryCorpus to a large general purpose offlineGeneralCorpus1.
We thus obtained a set of1We used the DMOZ corpus (Gabrilovich andMarkovitch, 2005).269query-specific disambiguating words.
Then weadded to all queries the same most frequent word(DW) out of the ten words with highest ranks.Thus for the seed set {Moscow, St. Petersburg},an example of a query is <?from * to Moscow?Russia>.3.2 Iterative location retrievalWe retrieved all search engine snippets for eachof these initial queries2.
If we succeeded to getmore than 50 snippets, we did not download thecomplete documents.
In case where only a hand-ful of snippets were obtained, the algorithm down-loaded up to 25 documents pointed by these snip-pets in an attempt to get more pattern instances.In the majority of tested cases, snippets provideenough information for our task, and this informa-tion was not significantly extended by download-ing the whole documents.Once we retrieve snippets we identify termsappearing in the snippets in wildcard slots.
Forexample, if the query is <?from * to Moscow?Russia> and we encounter a snippet ?...fromVladivostok to Moscow...?, we add ?Vladivostok?to our set of seeds.
We then continue the search ina breadth first search setting, stopping the searchon three conditions: (1) runaway detected ?
thetotal frequency of newly obtained terms throughsome term?s patterns is greater than the total fre-quency of previously discovered terms+seeds.
Inthis case we stop exploration through the prob-lematic term and continue exploration throughother terms3; (2) we reached a predefined maxi-mal depth D4; (3) no new terms discovered.At the end of this stage we get the extendedset of terms using the set of snippets where theseterms co-appear in patterns.3.3 Enhancement of initial pattern setIn order to get more data, we enhance the patternset both by discovery of new useful secondary pat-terns and by narrowing existing patterns.
After ob-taining the new pattern set we repeat the extractionstage described in Section 3.2.2Yahoo!
Boss allows downloading up to a 1000 descrip-tions, up to 50 in each request.
Thus for each seed word, wehave performed a few dozen search requests.3Note that the ?problematic?
term may be the central termin the region we focus upon ?
if this happen it means that theseeds do not specify the region well.4Depth is a function of the richness of transport links inthe domain.
For connected domains (Cardiff, Israel) we used4, for less connected ones (Nepal) we used 10.Adding secondary patterns.
As in a number ofprevious studies, we improve our results discover-ing additional patterns from the obtained term set.The algorithm selects a subset of up to 50 discov-ered (t1, t2) term pairs appearing in ?from t1to t2?patterns and performs the set of additional queriesof the form <?t1* t2?
DW>.We then extract from the obtained snippets thepatterns of the form ?Prefix t1Infix t2Postfix?,where Prefix and Postfix should contain either apunctuation symbol or 1-3 words.
Prefix/Postfixshould also be bounded from left/right by a punc-tuation or one of the 50 most frequent words in thelanguage (based on word counts in the offline gen-eral corpus).
Infix should contain 1-3 words withthe possible addition of punctuation symbols5.We examine patterns and select useful ones ac-cording to the following ranking scheme, basedon how well each pattern captures named entities.For each discovered pattern we scan the obtainedsnippets and offline general corpus for instanceswhere this pattern connects one of the originalor discovered location terms to some other term.Let T be the set of all one to three word termsin the language, Td?
T the set of discoveredterms, Tc?
T the set of all capitalized terms andPat(t1, t2) indicates one or more co-appearancesof t1and t2in pattern Pat in the retrieved snippetsor offline general corpus.
The rank R of patternPat is defined by:R(Pat) =|{Pat|Pat(t1, t2), t1?
Tc, t2?
Td}||{Pat|Pat(t1, t2), t1?
T, t2?
Td}|In other words, we rank patterns according to thepercentage of capitalized words connected by thispattern.
We sort patterns by rank and select thetop 20% patterns.
Once we have discovered a newpattern set, we repeat the term extraction in Sec-tion 3.2.
We do this only once and not reiteratethis loop in order to avoid potential runaway prob-lems.
Obtained secondary patterns include dif-ferent from/to templates ?to X from Y by bus?
;time/distance combinations ?X -N km bus- Y?, ?X(bus, N min) Y?
or patterns in different languageswith English location/transport names.Narrowing existing patterns.
When availabledata volume is high, we would like to take advan-tage of more data by utilizing more specific pattern5Search engines do not support punctuation in queries,hence these symbols were omitted in web requests and con-sidered only when processing the retrieved snippets.270sets.
Since Yahoo!
allows to obtain only the first1K snippets, in case we get more than 10K hits,we extend our queries by adding the most com-mon term sequences appearing before or after thepattern.
Thus if for the query ?from * to Moscow?we got more than 10K hits and among the snippetswe see ?...
bus from X to Moscow...?
we create anextended pattern ?bus from * to Moscow?
and usethe term extraction in Section 3.2 to get additionalterms.
Unlike the extraction of secondary patterns,this narrowing process can be repeated recursivelyas long as a query brings more than 10K results.3.4 Extraction of labeled connectionsAt the end of the discovery stage we get an ex-tended set of patterns and a list of search enginesnippets discovered using these patterns.
Eachsnippet which captures terms t1, t2in either pri-mary ?from t1to t2?
or secondary patterns repre-sents a potential connection between entities.Using an observed property of the primary pat-tern, we select as a label a term or set of terms ap-pearing directly before ?from?
and delimited withsome high frequency word or punctuation.
Forexample, labels for snippets based on ?from...to?patterns and containing ?the road from...?, ?got abus from?, ?a TransSiberian train from...?
wouldbe road, bus and TransSiberian train.Once we acquire labels for the primary patterns,we also attempt to find labels in snippets obtainedfor secondary patterns discovered as described inSection 3.3.
We first locate some already labeledpairs in secondary patterns?
snippets where we cansee both label and the labeled term pair.
Then,based on the label?s position in this snippet, wedefine a label slot position for this type of snip-pet.
Suppose that during the labeling of primarypattern snippets we assigned the label ?bus?
to thepair (Novgorod, Moscow) and during the patternextension stage the algorithm discovered a patternPnew= ?ride to t2from t1,?
with a correspondingsnippet ?...
getting bus ride to Moscow from Nov-gorod...?.
Then using the labeled pair our algo-rithm defines the label slot in such a snippet type:?getting [label] ride to t2from t1?.
Once a labelslot is defined, all other pairs captured by Pnewcan be successfully labeled.3.5 Merging connection labelsSome labels may denote the same type of con-nection.
Also, large sets of connections canshare the same set of transport types.
In thiscase it is desired to assign a single label fora shared set of transports.
We do this by asimple merging technique.
Let C1, C2be setsof pairs assigned to labels L1, L2.
We mergetwo labels if one of the following conditions holds:(1)|C1?
C2| > 0.75 ?min(|C1|, |C2|)(2)|C1?
C2| > 0.45 ?max(|C1|, |C2|)Thus, either one group is nearly included in theother or each group shares nearly half with theother group.
We apply this rule only once and donot iterate recursively.
At this stage we also dis-miss weakly populated labels, keeping the 10 mostpopulated labels.3.6 Processing of connection graphNow once we have merged and assigned the la-bels we create a pattern graph for each label andattempt to clean the graph of noise and unneces-sary edges.
Our graph definition follows (Wid-dows and Dorow, 2002).
In our pattern graph forlabel L, nodes represent terms and directed edgesrepresent co-appearance of two terms in some pat-tern in snippet labeled by L. We do not add unla-beled snippets to the graph.
Now we use a set oftechniques to reduce noise and unnecessary edges.3.6.1 Transitivity eliminationOne of the main problems with the pattern-basedgraph is transitivity of connections.
Thus if loca-tion A is connected to B and B to C, we frequentlyacquire a ?shortcut?
edge connecting A to C. Suchan edge diminishes our ability to create a clear andmeaningful spatial graph.
In order to reduce suchedges we employ the following two strategies.First, neighboring places frequently form fullyconnected subgraphs.
We would like to sim-plify such cliques to reduce the amount of tran-sitive connections.
If three overlapping sets ofnodes {A1.
.
.
An?2},{A2.
.
.
An?1},{A3.
.
.
An}form three different cliques, then we remove alledges between A1and the nodes in the third cliqueand between Anand the nodes in the first clique.Second, in paths obtained by directional pat-terns, it is common that if there is a path A1?A2?
?
?
?
Anwhere A1and Anare somemajor ?key?
locations6, then each of the nodesA2.
.
.
An?1tend to be connected both to A1and6Such locations will be shown in double circles in theevaluation.271to Anwhile intermediate nodes are usually con-nected only to their close neighbors.
We wouldlike to eliminate such transitive edges leaving onlythe inter-neighbor connections.We define as key nodes in a graph, nodes whosedegree is more than 1.5 times the average graphdegree.
Then we eliminate the transitive con-nections: if A1is a key node and A1is con-nected to each of the nodes A2.
.
.
An?1, and?i ?
{2 .
.
.
n ?
1}, Aiis connected to Ai+1,then we remove the connection of A1to all nodesA3.
.
.
An?1, leaving A1only connected to A2.3.6.2 Clearing noise and merging namesFinally we remove potential noise which acciden-tally connects remote graph parts.
If some edgediscovered through a single pattern instance con-nects distant (distance>3) parts of the graph weremove it.Additionally, we would like to merge commonname alternations and misspellings of places.
Wemerge two nodes A and B into one node if ei-ther (1) A, B have exactly the same edges, andtheir edge count is greater than 2; or (2) edgesof A are subset of B?s edges and the string editdistance between A and B is less than a third ofmin(StringLength(A), StringLength(B)).4 EvaluationSince our problem definition differs significantlyfrom available related work, it is not possible tomake direct comparisons.
We selected three dif-ferent cases (in Nepal, Israel, Wales) where theobtained information can be reliably verified, andapplied our framework on these settings.
As a de-velopment set, we used the Russian rail network.We have estimated the quality of our frameworkusing several measures and observations.
First, wecalculated the precision and quantity of obtainedlocations using map information.
Then we manu-ally estimated precision of the proposed edges andtheir labels, comparing them with factual infor-mation obtained from maps7, transport companiesand tourist sites.
Finally we visually compared anatural drawing of the obtained graph with a realmap.
In addition, while our goals differ, the thirdevaluation setting has deliberate significant simi-larities to (Schockaert et al, 2008), which allowsus to make some comparisons.7We recognize that in case of some labels, e.g.
?walk?, theprecision measure is subjective.
Nevertheless it provides agood indication for the quality of our results.4.1 The Annapurna trek areaOne of the most famous sites in Nepal is the Anna-purna trekking circuit.
This is a 14-21 day walk-ing path which passes many villages.
Most of thetourists going through this path spend weeks inprior information mining and preparations.
How-ever, even when using the most recent maps andguides, they discover that available geographicalknowledge is far from being complete and precise.This trek is a good example of a case when formalinformation is lacking while free-text shared expe-rience in the web is abundant.
Our goal was to testwhether the algorithm can discover such knowl-edge automatically starting from few seed locationnames (we used Pokhara, which is one of the cen-tral cities in the area, and Khudi, a small village).The quality of results for this task was very good.While even crude recall estimation is very hard forthis type of task, we have discovered 100% of theAnnapurna trek settlements with population over1K, all of the flight and bus connections, and about80% of the walking connections.On Figure 1 we can compare the real map andthe obtained map8.
This discovered map includesa partial map9for 4 labels ?
flights, trek, bus andjeep.
You can see on the map different lines foreach label.
The algorithm discovered 132 enti-ties, all of them Annapurna-related locations.
Thisincludes correctly recognized typos and alterna-tive spellings, and the average was 1.2 names perplace.
For example for Besisahar and Pokharathe following spellings were recognized basedboth on string distance and spatial collocation:Besishahar, Bensisahar, BesiSahar, Besi Sahar,Beshishahar, Beisahar, Phokra, Pohkala, Poka-hara, Pokhara, Pokhar, Pokra, Pokhura, Pokhra.We estimated correctness of edges comparingto existing detailed maps.
95% of the edges werecorrectly placed and labeled.
Results were goodsince this site is well covered and also not veryinterconnected ?
most of it is connected in a sin-gle possible way.
After the elimination processdescribed in the previous section, only 6% of thenodes participate in 3-cliques.
Thus, due to thelinearity of the original path, our method success-8Graph nodes were manually positioned such that edgesdo not intersect.
Recall that our goal is to build a networkgraph, which is an abstract structure.
The 2-D embedding ofthe graph shown here is only for illustrative purposes and isnot part of our algorithm.9A few dozens of correctly discovered places were omit-ted to make the picture readable.272Figure 1: Real path map of Annapurna circuit(above) compared to automatically acquired graph(below).
The graph nodes were manually posi-tioned such that edges do not cross each other.Dozens of correctly discovered places were omit-ted for readability.
Double circles indicate keynodes as explained in section 3.6.1fully avoided the problem of mixing transitivelyconnected nodes into one large clique.4.2 The Israeli southThe southern part of Israel (mostly the Negevdesert) is a sparsely populated region containinga few main roads and a few dozen towns.
Thereis a limited number of tourists sites in the Negevand hence little web information is supposed to beavailable.
Our goal was to see if the algorithm cansuccessfully detect at least major entities and todiscover their connectedness.We discovered 56 names of different places, ofthem 50 correctly belong to the region, where theregion is defined as south from the Ashquelon-Jerusalem-Yericho line, the other 6 were Is-raeli cities/locations outside the region (Tiberias,Metulla, Ben Gurion, Tel Aviv, Ashdod, Haifa).In addition we discovered 23 alternative names forsome of the 56 places.
We also constructed thecorresponding connectedness graphs.We tested the usefulness of this data attemptingto find the discovered terms in the NGA GEOnetNames Server10which is considered one of themost exhaustive geographical resources.
We couldfind in the database only 60% of the correctly dis-covered English terms denoting towns, so 40% ofthe terms were discovered by us and ignored bythis huge coverage database.
We also tested thequality of edges, and found that 80% of the dis-covered edges were correctly placed and labeled.Figure 2 shows a partial graph of the places ob-tained for the ?road?
label.Figure 2: Partial graph for Israel south settings.4.3 The Cardiff areaCardiff is the capital, largest city and most pop-ulous county in Wales.
Our goal was to seeif we can discover basic means of transport andcorresponding locations connected to and insideCardiff.
This exploration also allowed us to com-pare some of our results to related studies.
We ex-ecuted our algorithm using as seeds Grangetown,Cardiff and Barry.
Table 1 shows the most utilizedmerged labels obtained for most edge-populatedgraphs together with graph size and estimated pre-cision.
In case of flights, treks and trains, precisionwas estimated using exact data.
In other cases weestimated precision based on reading relevant webpages.
We can see that the majority of connectiv-ity sets are meaningful and the precision obtainedfor most of these sets is high.
Figure 3 shows apartial graph for ?walking?-type labels and Figure10http://earth-info.nga.mil/gns/html/273Nodes Edges(Prec) Label88 120(81) walking,walk,cycling,short ridetaxis, Short bus ride,short walk131 140(95) flights, airlines,# flights a day12 16(100) foot path, trek, walking # miles36 51(89) train, railway, rail travel,rail32 98(65) bus, road, drive,direct busTable 1: The merged labels obtained for 5most edge-populated graphs, including number ofnodes and edges for each label.
The estimated pre-cision according to each label definition is shownin parentheses.4 shows such a graph for train labels11.
Compar-ing the obtained map with real map data we noticea definite correlation between actual and inducedrelative connection of discovered places.
(Schockaert et al, 2008) used their frame-work to discover neighborhoods of Cardiff.
Inour case, the most appropriate relation which con-nects neighborhood locations is walking/cycling.Hence, comparing the results to previous work, wehave examined the results obtained for the ?walk-ing?
label in details.
(Schockaert et al, 2008) re-port discovery of 68 locations, of them 7 are al-ternate entries, 4 can be considered vernacular orcolloquial, 10 are not considered to be neighbor-hoods, and 5 are either close to, but not within,Cardiff, or are areas within Cardiff that are notrecognized neighborhoods.
In our set we have dis-covered 88 neighborhood names, of them 18 arealternate entries of correct neighborhoods, 4 canbe considered vernacular or colloquial, 3 are notconsidered to be neighborhoods, and 15 are areasoutside the Cardiff area.Considering alternate entries as hits, we got su-perior precision of 66/88 = 0.75 in comparison to49/68 = 0.72.
It should be noted however that wefound many more alternative names possibly dueto our larger coverage.
Also both our frameworkand the goal were substantially different.5 DiscussionIn this paper we presented a framework which,given a small set of seed terms describing a ge-ographical region, discovers an underlying con-nectivity and transport graph together with the ex-traction of common and alternative location namesin this region.
Our framework is based on the11Spatial position of displayed graph components is arbi-trary, we only made sure that there are no intersecting edges.Figure 3: Partial graph of the obtained Cardiff re-gion for the walk/walking/cycling label.Figure 4: Partial graph of the obtained Cardiff re-gion for the railway/train label.observation that ?from...to?-like patterns can en-code connectedness in very precise manner.
In ourframework, we have combined iterative pattern-and web-based relationship acquisition with thediscovery of new patterns and refinement of the lo-cation graph.
In our evaluation we showed that ourframework is capable of extracting high qualitynon-trivial information from free text given veryrestricted input and not relying on any heavy pre-processing techniques such as parsing or NER.The success of the proposed framework opensmany challenging directions for its enhancement.Thus we would like to incorporate in our net-work patterns which allow traveling times and dis-tances to be extracted, such as ?N miles from Xto Y?.
While in this paper we focus on specifictype of geographical relationships, similar frame-works can be useful for a wider class of spatial re-lationships.
Automated acquisition of spatial datacan significantly help many NLP tasks, e.g., ques-tion answering.
We would also like to incorpo-rate some patterns based on (Egenhofer and Shar-iff, 1998), such as ?crosses?, ?goes through?
or?runs into?, which may allow automated acquisi-tion of complex spatial relationships.
Finally, wewould like to incorporate in our framework mod-274ules which may allow recognition of structureddata, like those developed by (Schockaert et al,2008).ReferencesEugene Agichtein, Luis Gravano, 2000.
Snowball:Extracting Relations from Large Plain-text Collec-tions.
ACM DL ?00.Karla Borges, Alberto Laender, Claudia Medeiros,Clodoveu Davis, 2007.
Discovering GeographicLocations in Web Pages Using Urban Addresses.Fourth Workshop on Geographic Information Re-trieval.Sharon Caraballo, 1999.
Automatic Construction of aHypernym-labeled Noun Hierarchy from Text.
ACL?99.Timothy Chklovski, Patrick Pantel 2004.
VerbOcean:Mining the Web for Fine-grained Semantic Verb Re-lations.
EMNLP ?04.James R. Curran, Marc Moens, 2002.
Improvementsin Automatic Thesaurus Extraction.
SIGLEX ?02.Dmitry Davidov, Ari Rappoport, 2006.
EfficientUnsupervised Discovery of Word Categories Us-ing Symmetric Patterns and High Frequency Words.COLING-ACL ?06.Dmitry Davidov, Ari Rappoport, Moshe Koppel,2007.
Fully Unsupervised Discovery of Concept-specific Relationships by Web Mining.
ACL ?07.Dmitry Davidov, Ari Rappoport, 2008.
Classificationof Semantic Relationships Between Nominals UsingPattern Clusters.
ACL ?08.Max Egenhofer, Rashid Shariff, 1995.
Naive Geogra-phy.
Proceedings of COSIT ?95.Max Egenhofer, Rashid Shariff, 1998.
Metric Detailsfor Natural-Language Spatial Relations.
Journal ofthe ACM TOIS, 4:295?321, 1998.Oren Etzioni, Michael Cafarella, Doug Downey, Stan-ley Kok, Ana-maria Popescu, Tal Shaked, StephenSoderland, Daniel S. Weld, Alexander Yates, 2004.Web-scale Information Extraction in KnowItAll.WWW ?04.Evgeniy Gabrilovich, Shaul Markovitch, 2005.
Fea-ture Generation for Text Categorization Using WorldKnowledge.
IJCAI ?05.James Gorman, James R. Curran, 2006.
Scaling Dis-tributional Similarity to Large Corpora.
COLING-ACL ?06.Marti Hearst, 1992.
Automatic Acquisition of Hy-ponyms from Large Text Corpora.
COLING ?92.Dekang Lin, 1998.
Automatic Retrieval and Cluster-ing of Similar Words.
COLING ?98.Simon Overell, Stefan Ruger, 2007.
Geographic Co-occurrence as a Tool for GIR.
Fourth ACM Work-shop on Geographical information retrieval.Patrick Pantel, Dekang Lin, 2002.
Discovering WordSenses from Text.
SIGKDD ?02.Patrick Pantel, Deepak Ravichandran, Eduard Hovy,2004.
Towards Terascale Knowledge Acquisition.COLING ?04.Ross Purves, Paul Clough, Christopher Jones, AviArampatzis, Benedicte Bucher, Gaihua Fu, HideoJoho, Awase Syed, Subodh Vaid, Bisheng Yang,2007.
The Design and Implementation of SPIRIT: aSpatially Aware Search Engine for Information Re-trieval on the Internet.
International Journal of Ge-ographical Information Science, 21(7):717-745.Ellen Riloff, Rosie Jones, 1999.
Learning Dictionar-ies for Information Extraction by Multi-Level Boot-strapping.
AAAI ?99.Diana Santos, Nuno Cardoso, 2008.
GikiP: Evalu-ating Geographical Answers from Wikipedia.
FifthWorkshop on Geographic Information Retrieval.Steven Schockaert, Philip Smart, Alia Abdelmoty,Christopher Jone, 2008.
Mining Topological Re-lations from the Web.
International Workshop onFlexible Database and Information System Technol-ogy, workshop at DEXA, Turin, pp.
652?656.Dominic Widdows, Beate Dorow, 2002.
A GraphModel for Unsupervised Lexical Acquisition.
COL-ING ?02.275
