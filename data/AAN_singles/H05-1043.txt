Proceedings of Human Language Technology Conference and Conference on Empirical Methods in Natural LanguageProcessing (HLT/EMNLP), pages 339?346, Vancouver, October 2005. c?2005 Association for Computational LinguisticsExtracting Product Features and Opinions from ReviewsAna-Maria Popescu and Oren EtzioniDepartment of Computer Science and EngineeringUniversity of WashingtonSeattle, WA 98195-2350{amp, etzioni}@cs.washington.eduAbstractConsumers are often forced to wadethrough many on-line reviews inorder to make an informed prod-uct choice.
This paper introducesOPINE, an unsupervised information-extraction system which mines re-views in order to build a model of im-portant product features, their evalu-ation by reviewers, and their relativequality across products.Compared to previous work, OPINEachieves 22% higher precision (withonly 3% lower recall) on the featureextraction task.
OPINE?s novel use ofrelaxation labeling for finding the se-mantic orientation of words in con-text leads to strong performance onthe tasks of finding opinion phrasesand their polarity.1 IntroductionThe Web contains a wealth of opinions about products,politicians, and more, which are expressed in newsgroupposts, review sites, and elsewhere.
As a result, the prob-lem of ?opinion mining?
has seen increasing attentionover the last three years from (Turney, 2002; Hu and Liu,2004) and many others.
This paper focuses on productreviews, though our methods apply to a broader range ofopinions.Product reviews on Web sites such as amazon.comand elsewhere often associate meta-data with each reviewindicating how positive (or negative) it is using a 5-starscale, and also rank products by how they fare in the re-views at the site.
However, the reader?s taste may differfrom the reviewers?.
For example, the reader may feelstrongly about the quality of the gym in a hotel, whereasmany reviewers may focus on other aspects of the ho-tel, such as the decor or the location.
Thus, the reader isforced to wade through a large number of reviews lookingfor information about particular features of interest.We decompose the problem of review mining into thefollowing main subtasks:I.
Identify product features.II.
Identify opinions regarding product features.III.
Determine the polarity of opinions.IV.
Rank opinions based on their strength.This paper introduces OPINE, an unsupervised infor-mation extraction system that embodies a solution to eachof the above subtasks.
OPINE is built on top of the Know-ItAll Web information-extraction system (Etzioni et al,2005) as detailed in Section 3.Given a particular product and a corresponding set ofreviews, OPINE solves the opinion mining tasks outlinedabove and outputs a set of product features, each accom-panied by a list of associated opinions which are rankedbased on strength (e.g., ?abominable?
is stronger than?bad).
This output information can then be used to gen-erate various types of opinion summaries.This paper focuses on the first 3 review mining sub-tasks and our contributions are as follows:1.
We introduce OPINE, a review-mining system whosenovel components include the use of relaxation labelingto find the semantic orientation of words in the context ofgiven product features and sentences.2.
We compare OPINE with the most relevant previousreview-mining system (Hu and Liu, 2004) and find thatOPINE?s precision on the feature extraction task is 22%better though its recall is 3% lower on Hu?s data sets.
Weshow that 1/3 of this increase in precision comes fromusing OPINE?s feature assessment mechanism on reviewdata while the rest is due to Web PMI statistics.3.
While many other systems have used extracted opin-ion phrases in order to determine the polarity of sentencesor documents, OPINE is the first to report its precision andrecall on the tasks of opinion phrase extraction and opin-ion phrase polarity determination in the context of knownproduct features and sentences.
On the first task, OPINEhas a precision of 79% and a recall of 76%.
On the sec-ond task, OPINE has a precision of 86% and a recall of89%.339Input: product class C, reviews R.Output: set of [feature, ranked opinion list] tuplesR??
parseReviews(R);E?
findExplicitFeatures(R?, C);O?
findOpinions(R?, E);CO?
clusterOpinions(O);I?
findImplicitFeatures(CO, E);RO?
rankOpinions(CO);{(f , oi, ...oj)...}?outputTuples(RO, I ?
E);Figure 1: OPINE Overview.The remainder of this paper is organized as follows:Section 2 introduces the basic terminology, Section 3gives an overview of OPINE, describes and evaluates itsmain components, Section 4 describes related work andSection 5 presents our conclusion.2 TerminologyA product class (e.g., Scanner) is a set of products (e.g.,Epson1200).
OPINE extracts the following types of prod-uct features: properties, parts, features of product parts,related concepts, parts and properties of related concepts(see Table 1 for examples of such features in the Scan-ner domains).
Related concepts are concepts relevant tothe customers?
experience with the main product (e.g.,the company that manufactures a scanner).
The relation-ships between the main product and related concepts aretypically expressed as verbs (e.g., ?Epson manufacturesscanners?)
or prepositions (?scanners from Epson?).
Fea-tures can be explicit (?good scan quality?)
or im-plicit (?good scans?
implies good ScanQuality).OPINE also extracts opinion phrases, which are adjec-tive, noun, verb or adverb phrases representing customeropinions.
Opinions can be positive or negative and varyin strength (e.g., ?fantastic?
is stronger than ?good?
).3 OPINE OverviewThis section gives an overview of OPINE (see Figure 1)and describes its components and their experimental eval-uation.Goal Given product class C with instances I and re-views R, OPINE?s goal is to find a set of (feature, opin-ions) tuples {(f, oi, ...oj)} s.t.
f ?
F and oi, ...oj ?
O,where:a) F is the set of product class features in R.b) O is the set of opinion phrases in R.c) f is a feature of a particular product instance.d) o is an opinion about f in a particular sentence.d) the opinions associated with each feature f areranked based on their strength.Solution The steps of our solution are outlined in Fig-ure 1 above.
OPINE parses the reviews using MINI-PAR (Lin, 1998) and applies a simple pronoun-resolutionmodule to parsed review data.
OPINE then uses the datato find explicit product features (E).
OPINE?s Feature As-sessor and its use of Web PMI statistics are vital for theextraction of high-quality features (see 3.2).
OPINE thenidentifies opinion phrases associated with features in Eand finds their polarity.
OPINE?s novel use of relaxation-labeling techniques for determining the semantic orien-tation of potential opinion words in the context of givenfeatures and sentences leads to high precision and recallon the tasks of opinion phrase extraction and opinionphrase polarity extraction (see 3.3).In this paper, we only focus on the extraction of ex-plicit features, identifying corresponding customer opin-ions about these features and determining their polarity.We omit the descriptions of the opinion clustering, im-plicit feature generation and opinion ranking algorithms.3.0.1 The KnowItAll System.OPINE is built on top of KnowItAll, a Web-based,domain-independent information extraction system (Et-zioni et al, 2005).
Given a set of relations of interest,KnowItAll instantiates relation-specific generic extrac-tion patterns into extraction rules which find candidatefacts.
KnowItAll?s Assessor then assigns a probability toeach candidate.
The Assessor uses a form of Point-wiseMutual Information (PMI) between phrases that is esti-mated from Web search engine hit counts (Turney, 2001).It computes the PMI between each fact and automaticallygenerated discriminator phrases (e.g., ?is a scanner?
forthe isA() relationship in the context of the Scannerclass).
Given fact f and discriminator d, the computedPMI score is:PMI(f, d) = Hits(d+ f )Hits(d)?Hits(f )The PMI scores are converted to binary features for aNaive Bayes Classifier, which outputs a probability asso-ciated with each fact (Etzioni et al, 2005).3.1 Finding Explicit FeaturesOPINE extracts explicit features for the given productclass from parsed review data.
First, the system recur-sively identifies both the parts and the properties of thegiven product class and their parts and properties, in turn,continuing until no candidates are found.
Then, the sys-tem finds related concepts as described in (Popescu etal., 2004) and extracts their parts and properties.
Table 1shows that each feature type contributes to the set of finalfeatures (averaged over 7 product classes).Explicit Features Examples % TotalProperties ScannerSize 7%Parts ScannerCover 52%Features of Parts BatteryLife 24%Related Concepts ScannerImage 9%Related Concepts?
Features ScannerImageSize 8%Table 1: Explicit Feature Information340In order to find parts and properties, OPINE first ex-tracts the noun phrases from reviews and retains thosewith frequency greater than an experimentally set thresh-old.
OPINE?s Feature Assessor, which is an instantia-tion of KnowItAll?s Assessor, evaluates each noun phraseby computing the PMI scores between the phrase andmeronymy discriminators associated with the productclass (e.g., ?of scanner?, ?scanner has?, ?scanner comeswith?, etc.
for the Scanner class).
OPINE distin-guishes parts from properties using WordNet?s IS-A hi-erarchy (which enumerates different kinds of properties)and morphological cues (e.g., ?-iness?, ?-ity?
suffixes).3.2 Experiments: Explicit Feature ExtractionIn our experiments we use sets of reviews for 7 prod-uct classes (1621 total reviews) which include the pub-licly available data sets for 5 product classes from (Huand Liu, 2004).
Hu?s system is the review mining sys-tem most relevant to our work.
It uses association rulemining to extract frequent review noun phrases as fea-tures.
Frequent features are used to find potential opin-ion words (only adjectives) and the system uses Word-Net synonyms/antonyms in conjunction with a set of seedwords in order to find actual opinion words.
Finally, opin-ion words are used to extract associated infrequent fea-tures.
The system only extracts explicit features.On the 5 datasets in (Hu and Liu, 2004), OPINE?s pre-cision is 22% higher than Hu?s at the cost of a 3% re-call drop.
There are two important differences betweenOPINE and Hu?s system: a) OPINE?s Feature Assessoruses PMI assessment to evaluate each candidate featureand b) OPINE incorporates Web PMI statistics in additionto review data in its assessment.
In the following, wequantify the performance gains from a) and b).a) In order to quantify the benefits of OPINE?s FeatureAssessor, we use it to evaluate the features extracted byHu?s algorithm on review data (Hu+A/R).
The FeatureAssessor improves Hu?s precision by 6%.b) In order to evaluate the impact of using Web PMIstatistics, we assess OPINE?s features first on reviews(OP/R) and then on reviews in conjunction with theWeb (the corresponding methods are Hu+A/R+W andOPINE).
Web PMI statistics increase precision by an av-erage of 14.5%.Overall, 1/3 of OPINE?s precision increase over Hu?ssystem comes from using PMI assessment on reviews andthe other 2/3 from the use of the Web PMI statistics.In order to show that OPINE?s performance is robustacross multiple product classes, we used two sets of re-views downloaded from tripadvisor.com for Ho-tels and amazon.com for Scanners.
Two annotators la-beled a set of unique 450 OPINE extractions as corrector incorrect.
The inter-annotator agreement was 86%.The extractions on which the annotators agreed were usedto compute OPINE?s precision, which was 89%.
Fur-Data Explicit Feature Extraction: PrecisionHu Hu+A/R Hu+A/R+W OP/R OPINED1 0.75 +0.05 +0.17 +0.07 +0.19D2 0.71 +0.03 +0.19 +0.08 +0.22D3 0.72 +0.03 +0.25 +0.09 +0.23D4 0.69 +0.06 +0.22 +0.08 +0.25D5 0.74 +0.08 +0.19 +0.04 +0.21Avg 0.72 +0.06 + 0.20 +0.07 +0.22Table 2: Precision Comparison on the Explicit Feature-Extraction Task.
OPINE?s precision is 22% better than Hu?sprecision; Web PMI statistics are responsible for 2/3 of the pre-cision increase.
All results are reported with respect to Hu?s.Data Explicit Feature Extraction: RecallHu Hu+A/R Hu+A/R+W OP/R OPINED1 0.82 -0.16 -0.08 -0.14 -0.02D2 0.79 -0.17 -0.09 -0.13 -0.06D3 0.76 -0.12 -0.08 -0.15 -0.03D4 0.82 -0.19 -0.04 -0.17 -0.03D5 0.80 -0.16 -0.06 -0.12 -0.02Avg 0.80 -0.16 -0.07 -0.14 -0.03Table 3: Recall Comparison on the Explicit Feature-Extraction Task.
OPINE?s recall is 3% lower than the recallof Hu?s original system (precision level = 0.8).
All results arereported with respect to Hu?s.thermore, the annotators extracted explicit features from800 review sentences (400 for each domain).
The inter-annotator agreement was 82%.
OPINE?s recall on theset of 179 features on which both annotators agreed was73%.3.3 Finding Opinion Phrases and Their PolarityThis subsection describes how OPINE extracts potentialopinion phrases, distinguishes between opinions and non-opinions, and finds the polarity of each opinion in thecontext of its associated feature in a particular review sen-tence.3.3.1 Extracting Potential Opinion PhrasesOPINE uses explicit features to identify potential opin-ion phrases.
Our intuition is that an opinion phrase as-sociated with a product feature will occur in its vicinity.This idea is similar to that of (Kim and Hovy, 2004) and(Hu and Liu, 2004), but instead of using a window of sizek or the output of a noun phrase chunker, OPINE takesadvantage of the syntactic dependencies computed by theMINIPAR parser.
Our intuition is embodied by 10 ex-traction rules, some of which are shown in Table 4.
Ifan explicit feature is found in a sentence, OPINE appliesthe extraction rules in order to find the heads of potentialopinion phrases.
Each head word together with its modi-341fiers is returned as a potential opinion phrase1.Extraction Rules Examplesif ?
(M,NP = f)?
po = M (expensive) scannerif ?
(S = f, P,O)?
po = O lamp has (problems)if ?
(S, P,O = f)?
po = P I (hate) this scannerif ?
(S = f, P,O)?
po = P program (crashed)Table 4: Examples of Domain-independent Rules forthe Extraction of Potential Opinion Phrases.
Nota-tion: po=potential opinion, M=modifier, NP=noun phrase,S=subject, P=predicate, O=object.
Extracted phrases are en-closed in parentheses.
Features are indicated by the typewriterfont.
The equality conditions on the left-hand side use po?shead.Rule Templates Rulesdep(w,w?)
m(w,w?
)?v s.t.
dep(w, v), dep(v, w?)
?v s.t.
m(w, v), o(v, w?
)?v s.t.
dep(w, v), dep(w?, v) ?v s.t.
m(w, v), o(w?, v)Table 5: Dependency Rule Templates For Finding Wordsw, w?
with Related SO Labels .
OPINE instantiates thesetemplates in order to obtain extraction rules.
Notation:dep=dependent, m=modifier, o=object, v,w,w?=words.OPINE examines the potential opinion phrases in orderto identify the actual opinions.
First, the system finds thesemantic orientation for the lexical head of each poten-tial opinion phrase.
Every phrase whose head word has apositive or negative semantic orientation is then retainedas an opinion phrase.
In the following, we describe howOPINE finds the semantic orientation of words.3.3.2 Word Semantic OrientationOPINE finds the semantic orientation of a word w inthe context of an associated feature f and sentence s. Werestate this task as follows:Task Given a set of semantic orientation (SO) labels({positive, negative, neutral}), a set of reviews and aset of tuples (w, f , s), where w is a potential opinionword associated with feature f in sentence s, assign a SOlabel to each tuple (w, f , s).For example, the tuple (sluggish, driver, ?I am nothappy with this sluggish driver?)
would be assigned anegative SO label.Note: We use ?word?
to refer to a potential opinionword w and ?feature?
to refer to the word or phrase whichrepresents the explicit feature f .Solution OPINE uses the 3-step approach below:1.
Given the set of reviews, OPINE finds a SO label foreach word w.2.
Given the set of reviews and the set of SO labels forwords w, OPINE finds a SO label for each (w, f ) pair.1The (S,P,O) tuples in Table 4 are automatically generatedfrom MINIPAR?s output.3.
Given the set of SO labels for (w, f ) pairs, OPINEfinds a SO label for each (w, f , s) input tuple.Each of these subtasks is cast as an unsupervised col-lective classification problem and solved using the samemechanism.
In each case, OPINE is given a set of ob-jects (words, pairs or tuples) and a set of labels (SO la-bels); OPINE then searches for a global assignment of la-bels to objects.
In each case, OPINE makes use of localconstraints on label assignments (e.g., conjunctions anddisjunctions constraining the assignment of SO labels towords (Hatzivassiloglou and McKeown, 1997)).A key insight in OPINE is that the problem of searchingfor a global SO label assignment to words, pairs or tupleswhile trying to satisfy as many local constraints on as-signments as possible is analogous to labeling problemsin computer vision (e.g., model-based matching).
OPINEuses a well-known computer vision technique, relaxationlabeling (Hummel and Zucker, 1983), in order to solvethe three subtasks described above.3.3.3 Relaxation Labeling OverviewRelaxation labeling is an unsupervised classificationtechnique which takes as input:a) a set of objects (e.g., words)b) a set of labels (e.g., SO labels)c) initial probabilities for each object?s possible labelsd) the definition of an object o?s neighborhood (a set ofother objects which influence the choice of o?s label)e) the definition of neighborhood featuresf) the definition of a support function for an object labelThe influence of an object o?s neighborhood on its la-bel L is quantified using the support function.
The sup-port function computes the probability of the label L be-ing assigned to o as a function of o?s neighborhood fea-tures.
Examples of features include the fact that a certainlocal constraint is satisfied (e.g., the word nice partic-ipates in the conjunction and together with some otherword whose SO label is estimated to be positive).Relaxation labeling is an iterative procedure whoseoutput is an assignment of labels to objects.
At each itera-tion, the algorithm uses an update equation to reestimatethe probability of an object label based on its previousprobability estimate and the features of its neighborhood.The algorithm stops when the global label assignmentstays constant over multiple consecutive iterations.We employ relaxation labeling for the following rea-sons: a) it has been extensively used in computer-visionwith good results b) its formalism allows for many typesof constraints on label assignments to be used simulta-neously.
As mentioned before, constraints are integratedinto the algorithm as neighborhood features which influ-ence the assignment of a particular label to a particularobject.OPINE uses the following sources of constraints:342a) conjunctions and disjunctions in the review textb) manually-supplied syntactic dependency rule tem-plates (see Table 5).
The templates are automatically in-stantiated by our system with different dependency re-lationships (premodifier, postmodifier, subject, etc.)
inorder to obtain syntactic dependency rules which findwords with related SO labels.c) automatically derived morphological relationships(e.g., ?wonderful?
and ?wonderfully?
are likely to havesimilar SO labels).d) WordNet-supplied synonymy, antonymy, IS-A andmorphological relationships between words.
For exam-ple, clean and neat are synonyms and so they are likelyto have similar SO labels.Each of the SO label assignment subtasks previouslyidentified is solved using a relaxation labeling step.
In thefollowing, we describe in detail how relaxation labelingis used to find SO labels for words in the given reviewsets.3.3.4 Finding SO Labels for WordsFor many words, a word sense or set of senses is usedthroughout the review corpus with a consistently positive,negative or neutral connotation (e.g., ?great?, ?awful?,etc.).
Thus, in many cases, a word w?s SO label in thecontext of a feature f and sentence s will be the same asits SO label in the context of other features and sentences.In the following, we describe how OPINE?s relaxation la-beling mechanism is used to find a word?s dominant SOlabel in a set of reviews.For this task, a word?s neighborhood is defined asthe set of words connected to it through conjunctions,disjunctions and all other relationships previously intro-duced as sources of constraints.RL uses an update equation to re-estimate the prob-ability of a word label based on its previous probabil-ity estimate and the features of its neighborhood (seeNeighborhood Features).
At iteration m, let q(w,L)(m)denote the support function for label L of w and letP (l(w) = L)(m) denote the probability that L is the labelof w. P (l(w) = L)(m+1) is computed as follows:RL Update Equation (Rangarajan, 2000)P (l(w) = L)(m+1) =P (l(w) = L)(m)(1 + ?q(w,L)(m))PL?
P (l(w) = L?
)(m)(1 + ?q(w,L?
)(m))where L?
?
{pos, neg, neutral} and ?
> 0 is anexperimentally set constant keeping the numerator andprobabilities positive.
RL?s output is an assignment ofdominant SO labels to words.In the following, we describe in detail the initializationstep, the derivation of the support function formula andthe use of neighborhood features.RL Initialization Step OPINE uses a version of Tur-ney?s PMI-based approach (Turney, 2003) in order to de-rive the initial probability estimates (P (l(w) = L)(0))for a subset S of the words.
OPINE computes a SOscore so(w) for each w in S as the difference betweenthe PMI of w with positive keywords (e.g., ?excellent?
)and the PMI of w with negative keywords (e.g., ?awful?
).When so(w) is small, or w rarely co-occurs with the key-words, w is classified as neutral.
If so(w) > 0, thenw is positive, otherwise w is negative.
OPINE then usesthe labeled S set in order to compute prior probabilitiesP (l(w) = L), L ?
{pos, neg, neutral} by computingthe ratio between the number of words in S labeled Land |S|.
Such probabilities are used as initial probabil-ity estimates associated with the labels of the remainingwords.Support Function The support function computes theprobability of each label for word w based on the labelsof objects in w?s neighborhood N .Let Ak = {(wj , Lj)|wj ?
N} , 0 < k ?
3|N | rep-resent one of the potential assignments of labels to thewords in N .
Let P (Ak)(m) denote the probability of thisparticular assignment at iteration m. The support for la-bel L of word w at iteration m is :q(w,L)(m) =3|N|Xk=1P (l(w) = L|Ak)(m) ?
P (Ak)(m)We assume that the labels of w?s neighbors are inde-pendent of each other and so the formula becomes:q(w,L)(m) =3|N|Xk=1P (l(w) = L|Ak)(m)?|N|Yj=1P (l(wj) = Lj)(m)Every P (l(wj) = Lj)(m) term is the estimate for theprobability that l(wj) = Lj (which was computed at it-eration m using the RL update equation).The P (l(w) = L|Ak)(m) term quantifies the influenceof a particular label assignment to w?s neighborhood overw?s label.
In the following, we describe how we estimatethis term.Neighborhood FeaturesEach type of word relationship which constrains theassignment of SO labels to words (synonymy, antonymy,etc.)
is mapped by OPINE to a neighborhood feature.
Thismapping allows OPINE to use simultaneously use multi-ple independent sources of constraints on the label of aparticular word.
In the following, we formalize this map-ping.Let T denote the type of a word relationship in R (syn-onym, antonym, etc.)
and let Ak,T represent the labelsassigned by Ak to neighbors of a word w which are con-nected to w through a relationship of type T .
We haveAk =?T Ak,T andP (l(w) = L|Ak)(m) = P (l(w) = L|[TAk,T )(m)For each relationship type T , OPINE defines aneighborhood feature fT (w,L,Ak,T ) which computesP (l(w) = L|Ak,T ), the probability that w?s label is Lgiven Ak,T (see below).
P (l(w) = L|?T Ak,T )(m) isestimated combining the information from various fea-tures about w?s label using the sigmoid function ?
():343P (l(w) = L|Ak)(m) = ?
(jXi=1f i(w,L,Ak,i)(m) ?
ci)where c0, ...cj are weights whose sum is 1 and whichreflect OPINE ?s confidence in each type of feature.Given word w, label L, relationship type T and neigh-borhood label assignment Ak, let NT represent the subsetof w?s neighbors connected to w through a type T rela-tionship.
The feature fT computes the probability thatw?s label is L given the labels assigned by Ak to wordsin NT .
Using Bayes?s Law and assuming that these la-bels are independent given l(w), we have the followingformula for fT at iteration m:fT (w,L,Ak,T )(m) = P (l(w) = L)(m)?|NT |Yj=1P (Lj |l(w) = L)P (Lj |l(w) = L) is the probability that word wj has labelLj if wj and w are linked by a relationship of type T andw has label L. We make the simplifying assumption thatthis probability is constant and depends only of T , L andL?, not of the particular words wj and w. For each tuple(T , L, Lj), L,Lj ?
{pos, neg, neutral}, OPINE buildsa probability table using a small set of bootstrapped pos-itive, negative and neutral words.3.3.5 Finding (Word, Feature) SO LabelsThis subtask is motivated by the existence of frequentwords which change their SO label based on associatedfeatures, but whose SO labels in the context of the respec-tive features are consistent throughout the reviews (e.g.,in the Hotel domain, ?hot water?
has a consistently posi-tive connotation, whereas ?hot room?
has a negative one).In order to solve this task, OPINE first assigns each(w, f) pair an initial SO label which is w?s SO label.
Thesystem then executes a relaxation labeling step duringwhich syntactic relationships between words and, respec-tively, between features, are used to update the defaultSO labels whenever necessary.
For example, (hot, room)appears in the proximity of (broken, fan).
If ?room?and?fan?
are conjoined by and, this suggests that ?hot?
and?broken?
have similar SO labels in the context of theirrespective features.
If ?broken?
has a strongly negativesemantic orientation, this fact contributes to OPINE?s be-lief that ?hot?
may also be negative in this context.
Since(hot, room) occurs in the vicinity of other such phrases(e.g., stifling kitchen), ?hot?
acquires a negative SO labelin the context of ?room?.3.3.6 Finding (Word, Feature, Sentence) SO LabelsThis subtask is motivated by the existence of (w,f )pairs (e.g., (big, room)) for which w?s orientation changesbased on the sentence in which the pair appears (e.g., ?
Ihated the big, drafty room because I ended up freezing.?vs.
?We had a big, luxurious room?.
)In order to solve this subtask, OPINE first assigns each(w, f, s) tuple an initial label which is simply the SO la-bel for the (w, f) pair.
The system then uses syntacticrelationships between words and, respectively, featuresin order to update the SO labels when necessary.
Forexample, in the sentence ?I hated the big, drafty roombecause I ended up freezing.
?, ?big?
and ?hate?
satisfycondition 2 in Table 5 and therefore OPINE expects themto have similar SO labels.
Since ?hate?
has a strong neg-ative connotation, ?big?
acquires a negative SO label inthis context.In order to correctly update SO labels in this last step,OPINE takes into consideration the presence of negationmodifiers.
For example, in the sentence ?I don?t like alarge scanner either?, OPINE first replaces the positive(w, f) pair (like, scanner) with the negative labeled pair(not like, scanner) and then infers that ?large?
is likely tohave a negative SO label in this context.3.3.7 Identifying Opinion PhrasesAfter OPINE has computed the most likely SO labelsfor the head words of each potential opinion phrase in thecontext of given features and sentences, OPINE can ex-tract opinion phrases and establish their polarity.
Phraseswhose head words have been assigned positive or nega-tive labels are retained as opinion phrases.
Furthermore,the polarity of an opinion phrase o in the context of a fea-ture f and sentence s is given by the SO label assigned tothe tuple (head(o), f, s) (3.3.6 shows how OPINE takesinto account negation modifiers).3.4 ExperimentsIn this section we evaluate OPINE?s performance on thefollowing tasks: finding SO labels of words in the con-text of known features and sentences (SO label extrac-tion); distinguishing between opinion and non-opinionphrases in the context of known features and sentences(opinion phrase extraction); finding the correct polarityof extracted opinion phrases in the context of known fea-tures and sentences (opinion phrase polarity extraction).While other systems, such as (Hu and Liu, 2004; Tur-ney, 2002), have addressed these tasks to some degree,OPINE is the first to report results.
We first ran OPINE on13841 sentences and 538 previously extracted features.OPINE searched for a SO label assignment for 1756 dif-ferent words in the context of the given features and sen-tences.
We compared OPINE against two baseline meth-ods, PMI++ and Hu++.PMI++ is an extended version of (Turney, 2002)?smethod for finding the SO label of a phrase (as an at-tempt to deal with context-sensitive words).
For a given(word, feature, sentence) tuple, PMI++ ignores the sen-tence, generates a phrase based on the word and the fea-ture (e.g., (clean, room): ?clean room?)
and finds its SOlabel using PMI statistics.
If unsure of the label, PMI++tries to find the orientation of the potential opinion wordinstead.
The search engine queries use domain-specifickeywords (e.g., ?scanner?
), which are dropped if they344lead to low counts.Hu++ is a WordNet-based method for finding a word?scontext-independent semantic orientation.
It extendsHu?s adjective labeling method in a number of ways inorder to handle nouns, verbs and adverbs in addition toadjectives and in order to improve coverage.
Hu?s methodstarts with two sets of positive and negative words anditeratively grows each one by including synonyms andantonyms from WordNet.
The final sets are used to pre-dict the orientation of an incoming word.Type PMI++ Hu++ OPINEP R P R P Radj 0.73 0.91 +0.02 -0.17 +0.07 -0.03nn 0.63 0.92 +0.04 -0.24 +0.11 -0.08vb 0.71 0.88 +0.03 -0.12 +0.01 -0.01adv 0.82 0.92 +0.02 -0.01 +0.06 +0.01Avg 0.72 0.91 +0.03 -0.14 +0.06 -0.03Table 6: Finding SO Labels of Potential Opinion Wordsin the Context of Given Product Features and Sentences.OPINE?s precision is higher than that of PMI++ and Hu++.All results are reported with respect to PMI++ .
Notation:adj=adjectives, nn=nouns, vb=verbs, adv=adverbs3.4.1 Experiments: SO LabelsOn the task of finding SO labels for words in the con-text of given features and review sentences, OPINE obtainshigher precision than both baseline methods at a smallloss in recall with respect to PMI++.
As described be-low, this result is due in large part to OPINE?s ability tohandle context-sensitive opinion words.We randomly selected 200 (word, feature, sentence)tuples for each word type (adjective, adverb, etc.)
andobtained a test set containing 800 tuples.
Two annota-tors assigned positive, negative and neutral labels to eachtuple (the inter-annotator agreement was 78%).
We re-tained the tuples on which the annotators agreed as thegold standard.
We ran PMI++ and Hu++ on the test dataand compared the results against OPINE?s results on thesame data.In order to quantify the benefits of each of the threesteps of our method for finding SO labels, we also com-pared OPINE with a version which only finds SO la-bels for words and a version which finds SO labels forwords in the context of given features, but doesn?t takeinto account given sentences.
We have learned from thiscomparison that OPINE?s precision gain over PMI++ andHu++ is mostly due to to its ability to handle context-sensitive words in a large number of cases.Although Hu++ does not handle context-sensitive SOlabel assignment, its average precision was reasonable(75%) and better than that of PMI++.
Finding a word?sSO label is good enough in the case of strongly positiveor negative opinion words, which account for the major-ity of opinion instances.
The method?s loss in recall isdue to not recognizing words absent from WordNet (e.g.,?depth-adjustable?)
or not having enough information toclassify some words in WordNet.PMI++ typically does well in the presence of stronglypositive or strongly negative words.
Its high recall iscorrelated with decreased precision, but overall this sim-ple approach does well.
PMI++?s main shortcoming ismisclassifying terms such as ?basic?
or ?visible?
whichchange orientation based on context.3.4.2 Experiments: Opinion PhrasesIn order to evaluate OPINE on the tasks of opinionphrase extraction and opinion phrase polarity extractionin the context of known features and sentences, we used aset of 550 sentences containing previously extracted fea-tures.
The sentences were annotated with the opinionphrases corresponding to the known features and with theopinion polarity.
We compared OPINE with PMI++ andHu++ on the tasks of interest.
We found that OPINE hadthe highest precision on both tasks at a small loss in re-call with respect to PMI++.
OPINE?s ability to identifya word?s SO label in the context of a given feature andsentence allows the system to correctly extract opinionsexpressed by words such as ?big?
or ?small?, whose se-mantic orientation varies based on context.Measure PMI++ Hu++ OPINEOP Extraction: Precision 0.71 +0.06 +0.08OP Extraction: Recall 0.78 -0.08 -0.02OP Polarity: Precision 0.80 -0.04 +0.06OP Polarity: Recall 0.93 +0.07 -0.04Table 7: Extracting Opinion Phrases and Opinion PhrasePolarity Corresponding to Known Features and Sentences.OPINE?s precision is higher than that of PMI++ and of Hu++.All results are reported with respect to PMI++.4 Related WorkThe key components of OPINE described in this paper arethe PMI feature assessment which leads to high-precisionfeature extraction and the use of relaxation-labeling in or-der to find the semantic orientation of potential opinionwords.
The review-mining work most relevant to our re-search is that of (Hu and Liu, 2004) and (Kobayashi etal., 2004).
Both identify product features from reviews,but OPINE significantly improves on both.
(Hu and Liu,2004) doesn?t assess candidate features, so its precisionis lower than OPINE?s.
(Kobayashi et al, 2004) employsan iterative semi-automatic approach which requires hu-man input at every iteration.
Neither model explicitly ad-dresses composite (feature of feature) or implicit features.Other systems (Morinaga et al, 2002; Kushal et al, 2003)also look at Web product reviews but they do not extract345opinions about particular product features.
OPINE?s useof meronymy lexico-syntactic patterns is similar to thatof many others, from (Berland and Charniak, 1999) to(Almuhareb and Poesio, 2004).Recognizing the subjective character and polarity ofwords, phrases or sentences has been addressed by manyauthors, including (Turney, 2003; Riloff et al, 2003;Wiebe, 2000; Hatzivassiloglou and McKeown, 1997).Most recently, (Takamura et al, 2005) reports on theuse of spin models to infer the semantic orientation ofwords.
The paper?s global optimization approach and useof multiple sources of constraints on a word?s semanticorientation is similar to ours, but the mechanism differsand they currently omit the use of syntactic information.Subjective phrases are used by (Turney, 2002; Pang andVaithyanathan, 2002; Kushal et al, 2003; Kim and Hovy,2004) and others in order to classify reviews or sentencesas positive or negative.
So far, OPINE?s focus has been onextracting and analyzing opinion phrases correspondingto specific features in specific sentences, rather than ondetermining sentence or review polarity.5 ConclusionOPINE is an unsupervised information extraction systemwhich extracts fine-grained features, and associated opin-ions, from reviews.
OPINE?s use of the Web as a cor-pus helps identify product features with improved preci-sion compared with previous work.
OPINE uses a novelrelaxation-labeling technique to determine the semanticorientation of potential opinion words in the context ofthe extracted product features and specific review sen-tences; this technique allows the system to identify cus-tomer opinions and their polarity with high precision andrecall.6 AcknowledgmentsWe would like to thank the KnowItAll project and theanonymous reviewers for their comments.
Michael Ga-mon, Costas Boulis and Adam Carlson have also pro-vided valuable feedback.
We thank Minquing Hu andBing Liu for providing their data sets and for their com-ments.
Finally, we are grateful to Bernadette Minton andFetch Technologies for their help in collecting additionalreviews.
This research was supported in part by NSFgrant IIS-0312988, DARPA contract NBCHD030010,ONR grant N00014-02-1-0324 as well as gifts fromGoogle and the Turing Center.ReferencesA.
Almuhareb and M. Poesio.
2004.
Attribute-based and value-based clustering: An evaluation.
In EMNLP, pages 158?165.M.
Berland and E. Charniak.
1999.
Finding parts in very largecorpora.
In ACL, pages 57?64.O.
Etzioni, M. Cafarella, D. Downey, S. Kok, A. Popescu,T.
Shaked, S. Soderland, D. Weld, and A. Yates.
2005.
Un-supervised named-entity extraction from the web: An exper-imental study.
Artificial Intelligence, 165(1):91?134.V.
Hatzivassiloglou and K. McKeown.
1997.
Predicting the se-mantic orientation of adjectives.
In ACL/EACL, pages 174?181.M.
Hu and B. Liu.
2004.
Mining and Summarizing CustomerReviews.
In KDD, pages 168?177, Seattle, WA.R.A.
Hummel and S.W.
Zucker.
1983.
On the foundations ofrelaxation labeling processes.
In PAMI, pages 267?287.S.
Kim and E. Hovy.
2004.
Determining the sentiment of opin-ions.
In COLING.N.
Kobayashi, K. Inui, K. Tateishi, and T. Fukushima.
2004.Collecting Evaluative Expressions for Opinion Extraction.In IJCNLP, pages 596?605.D.
Kushal, S. Lawrence, and D. Pennock.
2003.
Mining thepeanut gallery: Opinion extraction and semantic classifica-tion of product reviews.
In WWW.D.
Lin.
1998.
Dependency-based evaluation of MINIPAR.
InWorkshop on Evaluation of Parsing Systems at ICLRE.S.
Morinaga, K. Yamanishi, K. Tateishi, and T. Fukushima.2002.
Mining product reputations on the web.
In KDD.Lee L. Pang, B and S. Vaithyanathan.
2002.
Thumbs up?
sen-timent classification using machine learning techniques.
InEMNLP, pages 79?86.A.
Popescu, A. Yates, and O. Etzioni.
2004.
Class extractionfrom the World Wide Web.
In AAAI-04 Workshop on Adap-tive Text Extraction and Mining, pages 68?73.A.
Rangarajan.
2000.
Self annealing and self annihilation: uni-fying deterministic annealing and relaxation labeling.
In Pat-tern Recognition, 33:635-649.E.
Riloff, J. Wiebe, and T. Wilson.
2003.
Learning SubjectiveNouns Using Extraction Pattern Bootstrapping.
In CoNLL,pages 25?32s.H.
Takamura, T. Inui, and M. Okumura.
2005.
Extracting Se-mantic Orientations of Words using Spin Model.
In ACL,pages 133?141.P.
D. Turney.
2001.
Mining the Web for Synonyms: PMI-IRversus LSA on TOEFL.
In Procs.
of the Twelfth EuropeanConference on Machine Learning (ECML-2001), pages 491?502, Freiburg, Germany.P.
D. Turney.
2002.
Thumbs up or thumbs down?
semanticorientation applied to unsupervised classification of reviews.In Procs.
of the 40th Annual Meeting of the Association forComputational Linguistics (ACL?02), pages 417?424.P.
Turney.
2003.
Inference of Semantic Orientation from Asso-ciation.
In CoRR cs.
CL/0309034.J.
Wiebe.
2000.
Learning subjective adjectives from corpora.In AAAI/IAAI, pages 735?740.346
