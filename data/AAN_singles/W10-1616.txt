Proceedings of the NAACL HLT 2010 Young Investigators Workshop on Computational Approaches to Languages of the Americas,pages 117?124, Los Angeles, California, June 2010. c?2010 Association for Computational LinguisticsComputational Linguistics for helping Requirements Elicitation: adream about Automated Software DevelopmentCarlos Mario Zapata J.Leader of the Computational Language Research Group, School of Sys-tems, Mines Faculty, Universidad Nacional de ColombiaCra.
80 No.
65-223, of.
M8A-310Medell?n, Colombia, South Americacmzapata@unal.edu.coAbstractRequirements elicitation is  one of the firstprocesses of software development and it isintended to be hand-made by means of ana-lyst-stakeholder  interviews.
As  a  natural-language-based activity, requirements elici-tation can take advantages of ComputationalLinguistics  techniques,  in order to achievebetter results looking for automation in thisfield.
In this paper we survey some of thework  related  to  software  development  au-tomation, guided by Computational Linguis-tics techniques, and performed by the Com-putational  Language Research Group fromthe Universidad Nacional de Colombia.
Weaim  the  definition  of  future  trans-nationaleffort to be made in this research line.1 IntroductionWhen stakeholders need to solve their informationproblems, they commonly search for the develop-ment of software applications (Pressman, 2005).
Atthe  beginning  of  this  process,  a  set  of  analyst-stakeholder interviews take place, in order to cap-ture the requirements belonging to the domain inwhich future software application must work.
Afterthat, in a hand-made process called ?requirementselicitation?, the analyst transforms the captured in-formation  into  formal  and  semi-formal  artifacts,mostly diagrams.
At this stage,  software applica-tion is specified by means of such diagrams (Leite,1987).Since  interviews  are  the  most  used techniquesfor collecting software requirements, they experi-ment some of the most common problems of natu-ral language (NL) communication: misunderstand-ing,  ambiguity,  and  lack  of  clarity  (Christel  andKang,  1992).
However,  as  an NL-based process,requirements elicitation can use some of the Com-putational Linguistics (CL) and Natural LanguageProcessing  (NLP)  techniques,  as  a  way to  solvesuch  problems.
The  main  goal  of  using  CL andNLP techniques in this particular problem is relat-ed to the search for automation in the software de-velopment process.This is the strategy we (the Computational Lan-guage Research Group?CLRG) choose to followfor clarifying requirements elicitation process and,therefore, for trying to automate the first phases ofsoftware  development  process.
In  this  paper,  wesummarize  some of the CLRG effort  invested inhelping requirements elicitation process with most-ly  CL techniques,  but  searching  for  strong  NLPtechniques, for instance, syntactical  and discourseparsers,  and  named  entity  recognition  systems,among others.
We aim to show how we try to solveour  problems  in  this  field  (recognizing  the  exis-tence of too much effort from other groups in theworld, but focusing on our own work), as a way tomotivate  the  definition  of  trans-national  projectssearching for the same goals as us.
Because our na-tive language is Spanish, some of the examples weprovide in this paper are encoded in this language.The structure of this paper is the following: insection  2,  we  discuss  our  solutions  to  commonproblems  of  requirements  elicitation  process;  insection 3 we propose some possible joint projectsin this field of knowledge; finally, in section 4 wepresent conclusions and future work.1172 Solutions  to  common  problems  of  re-quirements elicitation processFigure 1 gives us the overall software engineeringprocess envisioned by this research.
This is a kindof ?big picture?
about the way we are creating CL-and NLP-based tools  for  helping automated soft-ware development  process.
In the following sub-sections, we discuss a more detailed view of everytool.2.1 Pre-conceptual schemasThe first gap we needed to bridge in this processwas related to the knowledge representation of re-quirements.
In  this  context,  the  UML  (UnifiedModeling Language, OMG, 2010) is the  de-factostandard for representing requirements, but it is alanguage directed to technical readers, and stake-holders are not usually technical people.
For thisreason,  we  explored  the  possibilities  to  use  agraphical  language  closer  to  the  stakeholder  dis-course, and we created the pre-conceptual schemas(Zapata,  2007)  by adapting  some previous  effortmade by Sowa?s Conceptual Graphs (Sowa, 1984).Figure 2 shows an example of the pre-conceptualschemas, manually created by an analyst during thesoftware elicitation process of one software appli-cation.Figure 1.
Overall view of CL- and NLP-tools for automated software development.Figure 2.
An example of Pre-conceptual Schemas (Zapata, 2007).118Pre-conceptual  schemas  have  provided  a  newway to validate the stakeholder discourse, in orderto clarify and understand what stakeholder has tosay about  the  domain  information  related  to  thesoftware application to-be-made.2.2 UN-Lencep:  Specifying  pre-conceptualschemasPre-conceptual  schemas  gave  us  a  new  way  tocommunicate  with  stakeholders  in  the  require-ments elicitation process, but their usage was limit-ed to analysts.
However, if we are interested in cre-ating  a  pre-conceptual  schema,  we  need  the  in-volvement of both kinds of actors in such action.
Inthis case, we need to communicate each other in anNL-like way.The solution to this problem came from two ofthe  several  techniques  from  Computational  Lin-guistics:  Information  Extraction  (IE)  and  Con-trolled Languages.
In first  place, we use a set oftemplates,  in the same sense of IE templates,  formatching in a stakeholder discourse the same fea-tures  of  a  pre-conceptual  schema.
Then,  weconstrained the NL discourse, and we created UN-Lencep  (Universidad  Nacional  de  Colombia?Lenguaje  para  la  especificaci?n  de  esquemaspreconceptuales, Zapata et al, 2008).
By combin-ing both techniques, we had the possibilities to cre-ate a textual discourse in UN-Lencep.
In the caseof the pre-conceptual schema in figure 2, the UN-Lencep discourse could be something like this:A pet belongs to an owner.The pet has identification, name, and medicalhistory.The medical history has a name and one detail.The  detail  has  a  date,  a  diagnosis,  and  amedicine.When the owner requests an appointment, theassistant assigns an appointment.When  the  owner  accomplishes  the  appoint-ment, the veterinarian auscultates the pet.When the veterinarian auscultates the pet, theveterinarian registers the diagnosis.When the veterinarian registers the diagnosis,the veterinarian prescribes the medicine.Note that UN-Lencep phrases can be made bynon-technical people, like stakeholders.
The task ofcapturing requirements is now under the responsi-bilities of the analyst-stakeholder team, instead ofthe analyst alone.
Again, the UN-Lencep discourseis manually created by the analyst with the help ofthe stakeholder.
We have developed a tool calledUNC-Diagrammer, for helping the software elicita-tion process in creating UN-Lencep discourses andpre-conceptual schemas.
This tool has some mini-mal NLP processing, because UN-Lencep is a tem-plate-based controlled language.2.3 Dialog modelUN-Lencep and pre-conceptual schemas providedthe  partial  solution  to  our  requirements  captureproblems.
However, the fact that requirements elic-itation was initiated by a set of stakeholder-analystinterviews reminded us the rest of the task.
If wecould discover a way to obtain the UN-Lencep dis-course from something like an interview, we couldlink the beginning of the process to our partial so-lution.The answer, again, came from previous experi-ences  in  Computational  Linguistics.
The  workmade  on  dialog  models  provided  us  an  environ-ment to prove our hypothesis about stakeholder-an-alyst interviews.
We found some previous work ondialog models related to train reservations, and weemployed it to discover the structure of dialog, assets of tagged utterances and turnovers.
With theseideas in mind, we propose a structure for require-ments  elicitation dialog (Zapata and Carmona, inpress), as shown in figure 3.
We are, also, explor-ing the close relationship between dialog modelsfor requirements elicitation and ontologies (Zapataet al, in press).We are currently working on some projects forobtaining  UN-Lencep  discourses  from  a  dialogwith the structure provided by figure 3.
Also, weare working in proving the utilities of such conver-sion in order to diminish software costs and devel-opment time in  Latin-American software compa-nies, and we select the COMPETISOFT model forpromoting such improvement.2.4 UNC-CorpusModeling is the center of requirements elicitationactivities.
We need models to understand the struc-ture,  the behavior,  and the interaction among theconcepts belonging to some domain.
Traditionally,analysts make models by using their own knowl-edge and understanding of the world domain, in asubjective way.
But, is it possible to simulate such119activity?
How can we represent the knowledge ac-quired  about  modeling  by an  analyst  in  creatingmodels?
The work in Corpus Linguistics providedus some useful ideas about these questions.
A cor-pus is a collection of proved uses of a language.
Ifwe considered UML as a graphical modeling lan-guage (but, finally,  a language), we could gatherseveral ?proved?
uses of this language in the shapeof  computationally  readable  files.
We  employedthese  files  to  create  UNC-Corpus  (Zapata  et  al.,2008),  a  UML-diagram  corpus.
Also,  we  usedUNC-Corpus for  ?completing?
diagrams, as  ana-lysts  actually does,  by reviewing the  contents  ofthe corpus as shown in figure 4.Figure 3.
Requirements elicitation dialog model (Zapata and Carmona, in press).2.5 AMV: a solution for conjugating and lem-matizing Spanish verbsSpanish is one of the most difficult languages fortasks  related  to  conjugate  and  lemmatize  verbs.Our  language  has  a  complex  structure  when  weneed to use a verb.CLRG have assumed these difficulties and, afterexploring state  of  the art  in Spanish conjugators,decided to create  AMV (Analizador Morfol?gicode Verbos,  Zapata y Mesa,  2009),  an applicationthat recognize the internal structure of the vast ma-jority of Spanish verbs.
AMV can be shown in fig-ure 5.2.6 Goals and problemsAMV gave us some insight about the structure ofSpanish verbs, so we could discover some differ-ences about these verbs.
For example, we discov-ered state verbs, action verbs, and goal verbs.
Goalverbs are slightly different from the other kinds ofverbs, because they express activities with no dura-tion, generally associated to states to be reached.Three kinds  of  goal  verbs can be identified:  im-provement,  maintenance,  and  achievement  verbs.Goal verbs are not recognized by most of the peo-ple,  and  their  usage  tends  to  be  misunderstoodalong the software development process.CLRG  devoted  some  effort  to  identify  goalverbs from NL discourses, and then represent theminto pre-conceptual schemas (Zapata  et al, 2007).For completing this task, we used previous work ofAnt?n  (1997)  for  gathering  some  verbs  in  theabove  mentioned  categories,  and  then  we  em-ployed a lexicon from Maryland University in or-der  to  discover  the  internal  linguistic  features  ofsuch verbs.
With this information in hand, we in-creased the number of available verbs for express-ing goals.
After that, we define a new set of sym-bols to be used in pre-conceptual schemas for rep-resenting goal verbs and then translating them intogoal diagrams (Lezcano, 2007).
Figure 6 shows anexample of pre-conceptual schemas including goalverbs.We are currently exploring the relationships amonggoals  and problems.
In  our  theory,  problems are120seen either as negative goals or obstacles for a goalto be reached.
So, we are trying to define a set ofstructures for representing goals and another set forrepresenting problems.
Also, we are defining somerules for obtaining goal expressions from problemsentences and viceversa.
The first step of the pro-cess was the state-of-the-art review of such struc-tures (Zapata and Vargas, 2009), and we are deliv-ering a Master?s Thesis with the structures and theheuristic rules for proving such relationship.Figure 4.
A snapshot of the use of UNC-Corpus (Zapata et al, 2008).Figure 5.
Snapshot of AMV (Zapata and Mesa, 2009).121Figure 6.
An example of pre-conceptual schemas including goal verbs (Zapata et al, 2007)2.7 Games for teachingAs a part of our research and teaching strategy, weuse  games  to  show and reinforce  some conceptsabout  our  knowledge  area.
For  example,  we arecurrently  developing  an  on-line  game?called?Software  Boulevard?
?for  understanding  howsoftware industries make their intangible products.In this game, we intend to simulate the real behav-ior of this kind of companies, but making the ac-tors answer questions about software developmentprocess in several phases.
Another example of ourstrategy is ?Requirements elicitation dialog game?
(Zapata and Giraldo, 2009), which is based on theimportance of dialog inside the software develop-ment process.
This game is like a word puzzle inwhich players must fill in the blanks a set of wordspreviously acquired by answering questions relatedto  software  development.
The blanks  are  locatedinside  a  simulated  analyst-stakeholder  interviewand also as parts of a pre-conceptual schema.
Themain goal of the game is make conscious the play-ers  about  the  importance of  good answers  in  re-quirements  elicitation,  in  order  to  adequately?translate?
the  given  information  into  diagramsthat consistently reflect such information.2.8 State-of-the-art ReviewsThe definition of several projects requires the ex-tensive search for papers and journals related to thetopics we need to incorporate in the process.
In ad-dition to the mentioned review on goals and prob-lems  (Zapata  and  Vargas,  2009),  we  conductedsome other  state-of-the-art  reviews on ControlledLanguages  (Zapata  and  Rosero,  2008),  DialogModels (Zapata and Mesa,  2009b),  and the Wiz-ard-of-Oz  experiment  (Zapata  and  Carmona,2007).
Also,  we  made  a  review  on  Interlinguas(Zapata and Ben?tez, 2009), and we are preparingsome other reviews on Computational Dialog andCode Generation.3 Joint  projects  on requirements  elicita-tion and computational linguisticsOur final goal?and probably ?dream?
?is the au-tomation  of  software  development  process  fromearly  stages  related  to  speech  discourses.
Westrongly believe this goal is so big enough to bereached by only one research group.
We made nowsome part of the task, but we need help to completeit.
For this reason, we want to create some trans-national projects related to this field of knowledgeto be executed by several research groups in LatinAmerica,  for  example  the  Computation  ResearchCentre from the Instituto Polit?cnico Nacional  inMexico, the Linguistic Engineering research groupfrom the Universidad Nacional Aut?noma de M?x-ico,  the  Working  Group  2.9  (Software  Require-ments Engineering) from IFIP (International Fed-eration  for  Information Processing),  and  the  Hu-122man-Computer  Interaction  Research  Group  fromthe Pontificia Universidad Cat?lica de Valpara?so.We have contacts inside these research groups andwe are willing to initiate joint research projects re-lated  to  Computational  Linguistics  and  Require-ments Engineering.The first project in which we are concerned isthe  use  of  technical  documentation  for  require-ments  elicitation.
In almost every organization inthe  world,  technical  documents  define  the  waysuch organization must behave.
If we were capableto understand the surrounding information in thesedocuments,  we could  elicit  many concepts  to  bevalidated  in  the  analyst-stakeholder  interviews,making too much work before the interviews takeplace.
In this project, we need groups with exper-tise in analyzing and processing some kind of tech-nical  documents  (for  instance,  technical  reports,law sentences, instructions, and so on).The second project we need to propose have nat-ural  language  speeching  as  the  main  issue.
Theway a stakeholder-analyst  interview is  conductedsuggests that some expressions are repeated onceand again in the context of the dialog.
These ex-pressions are guidelines to gather important infor-mation  about  the  domain.
In  this  case,  we  needgroups with larger experience in recording, retriev-ing, and analyzing speech dialogs.A computational  corpus  of  stakeholder-analystinterviews is the main product of the third projectwe want to execute.
Corpus  linguistics  can offermany techniques for analyzing such corpus, in or-der to discover meta-information about the processof requirements elicitation by means of interviews.The common uses of expressions can lead to pre-dictive information concerning one domain.
Con-sequently, we need to gather as many recorded in-terviews as we can, and research groups with thiskind of information.Finally, games are needed for understanding andsimulating the entire process of requirements elici-tation  as  a  result  from stakeholder-analyst  inter-views, and this is the goal of the fourth project weneed to propose.
Our group has been using gamesin the shape of teaching strategies and we plan tokeep using this strategy, because we think we aresuccessful  on  it.
Here,  we  need  research  groupswith the intention to co-create  and use games asteaching  strategies.
Also,  we  need  people  withsome experience in evaluating the impact of gamesas teaching strategies.The above mentioned  projects  have some CL-and  NLP-based  techniques  as  good  offerings  tofind a solution.
Also, for achieving the goals of ev-ery  project,  we  need  to  interact  with  experts  insoftware  elicitation  process.
We hope  this  cross-functional  and  trans-national  effort  will  give  thenecessary tools to make true the dream about au-tomation in software development process.4 Conclusions and future workThe Computational Language Research Group hasbeen developing some projects for helping require-ments  elicitation  process  by means  of  Computa-tional  Linguistics,  and  we  shown  some  of  thiswork in this paper.
We tried to summarize the mostimportant of our projects concerning this issue, be-cause our aim is to propose and develop trans-na-tional projects in searching for automated softwaredevelopment.The  "big  picture"  of  this  work  exhibits  jointprojects for making requirements elicitation closerto natural language dialog and speech.
We look fora dream in which software development will be asimpler task, developed by common people by us-ing natural language speeching interfaces.Some work has still to be done:?
Eliciting  requirements  from  technical  docu-ments belonging to an organization.?
Incorporating  speech  recognition  to  the  re-quirements elicitation.?
Building  a  computational  corpus  of  analyst-stakeholder interviews.?
Creating new games as teaching strategies forunderstanding  the  entire  requirements elicita-tion process.All of these projects are intended to be made bytrans-national  groups  with  some  concern  aboutsoftware development  process,  computational lin-guistics, and natural language processing.AcknowledgmentThis  work is  founded by  the  Vicerrector?a  deInvestigaci?n  from  Universidad  Nacional  deColombia, under the project: ?Software Boulevardun juego de estrategia en Web para la ense?anza decompetencias  de  gesti?n  en  Ingenier?a  deSoftware?, Project number 9766.123ReferencesAnnie Ant?n.
1997.
Goal Identification and Refinementin  the  Specification  of  Software-Based InformationSystems.
PhD Thesis, Georgia Institute of Technolo-gy, Atlanta, USA.Michael  Christel  and Kyo  Kang.
1992.
Issues  in  Re-quirement  elicitation.
Technical  Report,  CMU/SEI-92-TR-012,  ESC-TR-92-012.
Software  EngineeringInstitute, Carnegie Mellon University, Pittsburg.Julio Cesar Leite.
1987.
A survey on requirements anal-ysis.
Department of Information and Computer Sci-ence,  University  of  California,  Irvine,  AdvancedSoftware Engineering Project Technical Report RT-P071.Luis  Lezcano.
2007.
Elaboraci?n  semiautom?tica  deldiagrama  de  objetivos.
M.Sc.
Thesis,  UniversidadNacional de Colombia, Sede Medell?n.Object Management Group (OMG).
2010.
UML Super-structure.
Available at: http://www.omg.org/uml.Roger Pressman.
2005.
Software Engineering: a practi-tioner's approach, 6th ed.
McGraw Hill, New York.John Sowa.
1984.
Conceptual  Structures:  InformationProcessing in Mind and Machine.
Addison-WesleyPublishing Co., Reading, MA.Carlos  Zapata.
2007.
Definici?n  de  un  esquemapreconceptual  para  la  obtenci?n  autom?tica  deesquemas  conceptuales  de  UML.
Ph.D.  Thesis,Universidad Nacional de Colombia, sede Medell?n.Carlos  Zapata  and  Servio  Ben?tez.
2009.
Interlingua:An?lisis cr?tico de la literatura.
Revista Facultad deIngenier?a Universidad de Antioquia, 47:117?128.Carlos  Zapata  and  Nicol?s  Carmona.
In  press.
Unmodelo de di?logo para la Educci?n de Requisitos deSoftware.
Dyna.Carlos  Zapata  and  Nicol?s  Carmona.
2007.
Elexperimento  Mago de  Oz  y  sus  aplicaciones:  Unamirada retrospectiva.
Dyna, 74(151):125?135.Carlos Zapata and Gloria Giraldo.
2009.
El  juego deldi?logo  de  educci?n  de  requisitos  de  software.Avances en Sistemas e Inform?tica, 6(1):105?114.Carlos Zapata, Gloria Giraldo, and John Mesa.
In press.Una propuesta de Metaontolog?a para la Educci?n deRequisitos de Software.
Ingeniare.Carlos  Zapata,  Alexander  Gelbukh,  and  FernandoArango.
2006.
UN-Lencep: Obtenci?n Autom?tica deDiagramas UML a partir de un Lenguaje Controlado.Memorias  del  VII  Encuentro  Nacional  deComputaci?n  ENC'06,  San  Luis  Potos?,  M?xico,254?259.Carlos  Zapata,  Juan  Hern?ndez,  and  Ra?l  Zuluaga.2008.
UNC-Corpus: corpus de diagramas UML parala  soluci?n  de  problemas  de  completitud  eningenier?a de software.
Revista EAFIT, 44(151):93?106.Carlos Zapata, Luis Lezcano, and Paula Tamayo.
2007.Validaci?n del m?todo para la obtenci?n autom?ticadel  diagrama  de  objetivos  desde  esquemaspreconceptuales.
Revista  Escuela  de  Ingenier?a  deAntioquia, (8):21?35.Carlos Zapata and John Mesa.
2009.
Una propuesta parael an?lisis morfol?gico de verbos del espa?ol.
Dyna,76(157):27?36.Carlos Zapata and John Mesa.
2009b.
Los Modelos deDi?logo y sus Aplicaciones en Sistemas de Di?logoHombre-M?quina:  Revisi?n  de  la  literatura.
Dyna,76(160):305?315.Carlos  Zapata  and  Roberto  Rosero.
2008.
Revisi?nCr?tica  de  la  Literatura  especializada  en  LenguajesControlados.
Avances  en  Sistemas  e  Inform?tica,5(3):27?33.Carlos Zapata and Fabio Vargas.
2009.
Una revisi?n dela  literatura  en  consistencia  entre  problemas  yobjetivos  en  Ingenier?a  de  Software  y  GerenciaOrganizacional.
Revista  Escuela  de  Ingenier?a  deAntioquia, 11:117?129.124
