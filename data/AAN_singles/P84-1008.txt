Features and ValuesLauri KarttunenUniversity of Texas at AustinArtificial Intelligence CenterSRI InternationalandCenter for the Study of Language and InformationStanford UniversityAbst ractThe paper discusses the linguistic aspects of a new gen-eral purpose facility for computing with features.
The pro-gram was developed in connection with the course I taughtat the University of Texas in the fall of 1983.
It is a general-ized and expanded version of a system that Stuart Shieberoriginally designed for the PATR-II project at SRI in thespring of 1983 with later modifications by Fernando Pereiraand me.
Like its predecessors, the new Texas version of the"DG {directed graph}" package is primarily intended forrepresenting morphological nd syntactic information butit may turn out to be very useful for semantic representa-tions too.1.
In t roduct ionMost schools of linguistics use some type of feature no-tation in their phonological, morphological, syntactic, andsemantic descriptions.
Although the objects that appearin rules and conditions may have atomic names, such as"k," "NP," "Subject," and the like, such high-level termstypically stand for collections of features.
Features, in thissense of the word, are usually thought of as attribute-valuepairs: \[person: lst\], \[number: sg\], although singleton fea-tures are also admitted in some theories.
The values ofphonological and morphological features are traditionallyatomic; e.g.
1st, 2nd, 3rd; they are often binary: +, -.Most current theories also allow features that have com-plex values.
A complex value is a collection of features, forexample:Isgreement: r per$?n: 3rdll Lnumber: sgJJLexical Functional Grammar (LFG) \[Kaplan and Bres-nan, 83\], Unification Grammar (UG) \[Kay, 79\], General-ized Phrase Structure Grammar (GPSG) \[Gazdar and Pul-lum, 82l, among others, use complex features.Another way to represent feature matrices i to think ofthem as directed graphs where values correspond to nodesand attributes to vectors:"lag reementnumb~/~er i ?nsg 3rdIn graphs of this sort, values are reached by traversingpaths of attribute names.
We use angle brackets to markexpressions that designate paths.
With that convention,the above graph can also be represented as a set of equa-tions:<agreement umber> = sg<agreement person> = 3rdSuch equations also provide a convenient way to ex-press conditions on features.
This idea lies at the heart ofUG, LFG, and the PATR-II grammar for English \[Shieber,et al, 83\] constructed at SRI.
For example, the equation<subject agreement> = <predicate agreement>states that subject and predicate have the same value foragreement.
In graph terms, this corresponds to a latticewhere two vectors point to the same node:subject ~ I predicateagreement ~~agreementnumb~ersonsg 3rd28In a ca~'~e like this, the values of the two paths have been"unified."
To represent unification in terms of feature ma-trices we need to introduce some new convention to distin-guish between identity and mere likeness.
Even that wouldnot quite suffice because the graph formalism also allowsunification of values that have not yet been assigned.A third way to view these structures is to think ofthem ~s partial functions that assign values to attributes\[Sag et.aL, 8.1\].2.
Un i f i ca t ion  and  Genera l i za t ionSeveral related grammar formalisms (UG, LFG, PATR-II, and GPSG) now e?ist that are based on a very similarconception of features and use unification as their basic op-eration.
Because feature matrices (lattice nodes) are setsof attribute-value pairs, unification is closely related to theoperation of forming a union of two sets.
However, whilethe latter always yields something-at least the null set,unification is an operation that may fail or succeed.
Whenit fails, no result is produced and the operands remain un-changed; when it succeeds, the operands are permanentlyaltered in the process.
They become the same object.
Thisis an important characteristic.
The result of unifying threeor more graphs in pairs with one another does not dependon the order in which the operations are performed.
Theyall become the same graph at the end.If graphs A and B contain the same attribute but haveincompatible values for it, they cannot be unified.
If Aand B arc compatible, then (Unify A B) contains everyattribute that appears only in A or only in B with thevalue it has there.
If some attribute appears both in Aand B, then the value of that attribute in (Unify A B) isthe unification of the two values.
For example,r .
rnumber*)" == I sgreernent: be,son: 2nJ \[case: nominativer II B " lagreement: Iperson: 3rd/ Lgender* m.sc, jLease: genitive(Genera l ige  A B) = \ [agreement :  \['number:.
SI~.~\]Generalization seems to be a very useful notion for ex-pressing how number and gender agreement works in coor-dinate noun phrases.
One curious fact about coordinationis that conjunction of "I" with "you" or "he" in the subjectposition typically produces first person verb agreement.
Insentences like "he and I agree" the verb has the same formas in "we agree. "
The morphological equivalence of "he"and I," "you and I," and "we" is partially obscured in En-glish but very clear in many other languages.
The problemis discussed in Section V below.3.
L imitat ions of Some Current For-mal ismsMost current grammar formalisms for features havecertain built-in limitations.
Three are relevant here:?
no cyclic structures?
no negation?
no disjunction.The prohibition against cyclicity rules out structuresthat contain circular paths, as in the following example.A = \[agreement: \['number:, pill\]B =(Unify A B)I: greement: \['person: 31u:l\]l ase: nominative- r .
.
.
.
, I' ge  e . '
be,=on:Lease: nominativeSimple cases of grammatical concord, such as number,case and gender agreement between determiners and nounsin many languages, can be expressed straight-forwardly bstating that the values of these features must unify.Another useful operation on feature matrices is gen-eralization.
It is closely related to set intersection.
Thegeneralization of two simple matrices A and B consists ofthe attribute-value pairs that A and B have in common.If the ~lues themselves are complex, we take the general-ization of those values.For example,aHere the path <a b c> folds back onto itself, that is,<a> = <a b c>.
It is not clear whether such descriptionsshould be ruled out on theoretical grounds.
Whatever thecase might be, current implementations of LFG, UG, orGPSG with which I am familiar do not support hem.The prohibition against negation makes it impossibleto characterize a feature by saying that it does NOT havesuch and such a value.
None of the above theories allowsspecifications such as the following.
We use the symbol "-"to mean 'not.
'\[o==,:  dat\]\]29\[.
?,..o.o,The first statement says that case is "not dative," thesecond says that the value of agreement is "anything but3rd person singular.
"Not allowing disjunctive specifications rules out ma-trices of the following sort.
We indicate disjunction byenclosing the alternative values in {}.I.
,..,IIIg, , , .
, , , t :  IL","b, ' : .
,Q ,?
!L \ [ 'number :  pl~\] jjloose: {nora aoo}The first line describes the value of case as being "ei-ther nominative or accusative."
The value for agreementis given as "either feminine singular or plural."
Amongthe theories mentioned above, only Kay's UG allows dis-junctive feature specifications in its formalism.
(In LFG,disjunctions are allowed in control equations but not in thespecification of values.
)Of the three limitations, the first one may be theo-retically justified since it has not been shown that thereare phenomena in natural anguages that involve circularstructures (of.
\[Kaplan and Bresnan, 83\], p. 281).
PATR-IIat SRI and its expanded version at the University of Texasallow such structures for practical reasons because theytend to arise, mostly inadvertently, in the course of gram-mar construction and testing.
An implementation thatdoes not handle unification correctly in such cases is toofragile to use.The other two restrictions are linguistically unmoti-vated.
There are many cases, especially in morphology,in which the most natural feature specifications are nega-tive or disjunctive.
In fact, the examples given above allrepresent such cases.The first example, \[case: -dat\], arises in the plu-ral paradigm of words like "Kind" child in German.Such words have two forms in the plural: "Kinder" and"Kindern."
The latter is used only in the plural dative,the former in the other three cases (nominative, genitive,accusative).
If we accept the view that there should be justone rather than three entries for the plural suffix "-er", wehave the choice between-ez" ffi number: pl ac c).lase: {nora gen-er  = Fnumber: pl l\[_case' ~atJJThe second alternative seems preferrable given the factthat there is, in this particular declension, a clear two-way contrast.
The marked dative is in opposition with anunmarked form representing all the other cases.The ~econd example is from English.
Although the fea-tures "number" and "person" are both clearly needed inEnglish verb morphology, most verbs are very incompletelyspecified for them.
In fact, the present ense paradigm ofall regular verbs just has two forms of which one representsthe 3rd person singular ("walks") and the other ("walk")is used for all other persons.
Thus the most natural char-acterization for "walk" is that it is not 3rd person singu-lar.
The alternative is to say, in effect, that "walk" in thepresent ense has five different interpretations.The system of articles in German provides many ex-amples that call for disjunctive feature specifications.
Thearticle "die," for example, is used in the nominative andaccusative cases of singular feminine nouns and all pluralnouns.
The entry given above succinctly encodes exactlythis fact.There are many cases where disjunctive specificationsseem necessary for reasons other than just descriptive l-egance.
Agreement conditions on conjunctions, for exam-pie, typically fail to exclude pairs where differences in caseand number are not overtly marked.
For example, in Ger-man \[Eisenberg, 73\] noun phrases like:des Dozenten (gen sg) the docent'sder Dozenten (gen pl) the docents'.can blend as inder Antrag des oder der Dozententhe petition of the docent or docents.This is not possible when the noun is overtly marked fornumber, as in the case of "des Professors" (gen sg) and"der Professoren" (gen pl):*der Antrag des oder der Professors*der Antrag des oder der Professorenthe petition of the professor or professorsIn the light of such cases, it seems reasonable to as-sume that there is a single form, "Dozenten," which hasa disjunctive feature specification, instead of postulatingseveral fully specified, homonymous lexical entries.
It isobvious that the grammaticality of the example cruciallydepends on the fact that "Dozenten" is not definitely sin-gular or definitely plural but can be either.4.
Unification with Disjunctive andNegative Feature SpecificationsI sketch here briefly how the basic unification proce-dure can be modified to admit negative and disjunctivevalues.
These ideas have been implemented in the newTexas version of the PATR-II system for features.
(I ammuch indebted to Fernando Pereira for his advice on thistopic.
)Negative values are created by the following operation.If A and B are distinct, i.e.
contain a different value forsome feature, then (Negate A B) does nothing to them.Otherwise both nodes acquire a "negative constraint."
Ineffect, A is marked with -B and B with -A.
These con-straints prevent he two nodes from ever becoming alike.30When A is unified with C, unification succeeds only if theresult is distinct from B.
The result of (Unify A C) has tosatisfy all the negative constraints of both A and C and itinherits all that could fail in some later unification.Disjunction is more complicated.
Suppose A, B andC are all simple atomic values.
In this situation C unifieswith {A B} just in case it is identical to one or the otherof the disjuncts.
The result is C. Now suppose that A, B,and C are all complex.
Furthermore, let us suppose that Aand B are distinct but C is compatible with both of themas in the following:A : F..oo.,: ,.mqLnumber: sg.J13 = \['nur"ber: pl"\]c - -  \ [= .
, , :  .=o'1What should be the result of (Unify {A B} ~)?
BecauseA and B are incompatible, we cannot actually unify C withboth of them.
That operation would fail.
Because there isno basis for choosing one, both alternatives have to be leRopen.
Nevertheless, we need to take note of the fact thateither A or B is to be unified with C. We can do this bymaking the result a complex disjunction.c' = {(A C) (B C))The new value of C, C', is a disjunction of tuples whichcan be, but have not yet been unified.
Thus (A C) and {BC) are sets that consist, of compatible structures.
Further-more, at least one of the tuples in the complex disjunctionmust remain consistent regardless of what happens to Aand B.
After the first unification we can still unify A withany structure that it is compatible with, such as:D-  \['oa.se: nor.
'\]If this happens, then the tuple (A C) is no longer con-sistent.
A side effect of A becomingA,  o Fge.
e,: ,.mqI-umb,,: sg /LC,,se: nor" jis that C' simultaniously reduces to {(B C)}.
Since thereis now only one viable alternative l ft, B and C can at thispoint be unified.
The original result from (Unify {A B}C) now reduces to the same as (Unify B C).c"  = ((B c ) )  = F..r"be,: p'l!
/ Lease: aco jAs the example shows, once C is unified with {A B}, Aand B acquire a "positive constraint."
All later unificationsinvolving them must keep at least one of the two pairs (AC), (B C) unifieable.
If at some later point one of thetwo tuples becomes inconsistent, he members of the soleremaining tuple finally can and should be unified.
Whenthat has happened, the positive constraint on A and B canalso be discarded.
A more elaborate xample of this sortis given in the Appendix.Essentially the same procedure also works for morecomplicated cases.
For example, unification of {A B} with{C D} yields {(A C) ( i  D) (B C) (B D)} assuming thatthe two values in each tuple are compatible.
Any pairs thatcould not be unified are left out.
The complex disjunctionis added as a positive constraint to all of the values thatappear in it.
The result of unifying {(A C) (B C)} with{(DF)  (E F)} is {(A C D F) (ACEF)  (BCDF) (BCE F)}, again assuming that no alternative can initially beruled out.As for generalization, things are considerably simpler.The result of (Generalize A B) inherits both negative andpositive constraints of A and B.
This follows from the factthat the generalization of A and B is the ma~ximal sub-graph of A and B that will unify with either one them.Consequently, it is subject o any constraint that affects Aor B.
This is analogous to the fact that, in set theory,(A - C) n (B - D) = (A n B) - (C u D)In our current implementation, egative constraintsare dropped as soon as they become redundant as far asunification is concerned.
For example, when \[case: ace\]is unified with with \[case: -dat\], the resulting matrix issimply \[case: acc\].
The negative constraint, is eliminatedsince there is no possibility that it could ever be violatedlater.
This may be a wrong policy.
It has to be modifiedto make generalization work as proposed in Section V forstructures with negative constraints.
If generalization isdefined as we have suggested above, negative constraintsmust always be kept because they never become redundantfor generalization.When negative or positive constraints are involved,unification obviously takes more time.
Nevertheless, thebasic algorithm remains pretty much the same.
Allowingfor constraints does not significantly reduce the speed atwhich values that do not have any get unified in the Texasimplementation.In the course of working on the project, I gained oneinsight that perhaps hould have been obvious from thevery beginning: the problems that arise in this connectionare very similar to those that come up in logic program-ming.
One can actually use the feature system for certain ?kind of inferencing.
For example, let Mary, Jane, and Johnhave the following values:Mary-  ~ha~r: blond~\]Jane-  \[h~r: dA~'1John = \['sister:.
{ Jane Mary~-~\]31If we now unify John with\ [ s i s te r :  \ [eyes :  b lue \ ] \ ] .both Jane and Mary get marked with the positive con-straint that at least one of them has blue eyes.
Supposethat we now learn that Mary has green eyes.
This imme-diately gives us more information about John and Jane aswell.
Now we know that Jane's eyes are blue and that shedefinitely is John's sister.
The role of positive constraintsis to keep track of partial information in such a way thatno inconsistencies are allowed and proper updating is donewhen more things become known.5.
Future prospects: Agreement  inCoordinate StructuresOne problem of long standing for which the present sys-tem may provide a simple solution is person agreement incoordinate noun phrases.
The conjunction of a 1st personpronoun with either 2nd or 3rd person pronoun invariablyyields 1st person agreement.
=I and you" is equivalent to=we," as far as agreement is concerned.
When a secondperson pronoun is conjoined with a third person NP, theresulting conjunction has the agreement properties of asecond person pronoun.
Schematically:l e t  + 2nd - I s~ts~ + 3rd - I s t2nd + 3rd - 2nd.Sag, Gazdar, Wasow, and Weisler \[841 propose a so-lution which is based on the idea of deriving the personfeature for a coordinate noun phrase by generalization (in-tersection) from the person features of its heads.
It is ob-vious that the desired effect can be obtained in any featuresystem that uses the fewest features to mark 1st person,some additional feature for 2nd person, and yet another for3rd person.
Because generalization of 1st and 2nd, for ex-ample, yields only the features that two have in common,the one with fewest features wins.Any such solution can probably be implemented easilyin the framework outlined above.
However, this proposalhas one very counterintuitive aspect: markedness hierar-chy is the reverse of what traditionally has been assumed.Designating something as 3rd person requires the greatestnumber of feature specifications.
In the Sag et ai.
system,3rd person is the most highly marked member and 1st per-son the least marked member of the trio.
Traditionally, 3rdperson has been regarded as the unmarked case.In our system, there is a rather simple solution underwhich the value of person feature in coordinate NPs is de-rived by generalization, just as Sag it et al propose, whichnevertheless preserves the traditional view of markedness.The desired result can be obtained by using negative con-straints rather than additional features for establishing amarkedness hierarchy.
For example, the following featurespecifications have the effect that we seek.181; == Foonversant: +\]Lspeake~ +2rid :" Fc?nversant:  +1\[speaker: --3rd " \['conversant: "1Lspeake~ oThe corresponding negative constraints are:, .
, .
r-roo,,,,.,...,.-\]\]L tspeaker.
-2nd =" \ [ - - \ [ ' conversant : - \ ] \ ]3rd - (no const ra in ts )Assuming that generalization with negative constraintsworks as indicated above, i.e.
negative constraints are al-ways inherited, it immediately follows that the generaliza-tion of Ist person with any other person is compatible withonly 1st person and that 2nd person wins over 3rd whenthey are combined.
The results are as follows.rconversant:  +\]\]181; + 2rid = \]_Foonversant:L L speaker,  -, , , , , .
, rd -  _I-,pea,,.,.
: _ \] 2nd + 3rd = .\]Note that the proper part of lst+2nd excludes 3rd person.It is compatible with both 1st and 2nd person but thenegative constraint rules out the latter one.
In th~ caseof lst+3rd, the negative constraint is compatible with 1stperson but incompatible with 2nd and 3rd.
In the last case,the specification \[speaker: -\] rules out 1st person and thenegative constraint -\[conversant: -\] eliminates 3rd person.When negative constraints are counted in, 1st personis the most and 3rd person the least marked member ofthe three.
In that respect, the proposed analysis is in linewith traditional views on markedness.
Another relevantobservation is that the negative constraints on which theresult crucially depends are themselves not too unnatural.In effect, they say of 1st person that it is "neither 2nd nor3rd" and that 2nd person is "not 3rd.
"It will be interesting to see whether other cases ofmarkedness can be analyzed in the same way.326.
AcknowledgementsI am indebted to Martin Kay for introducing me to uni-fication and to Fernando Pereira, Stuart Shieber, RemoPareschi, and Annie Zaenen for many insightful sugges-tions on the project.ReferencesEisenberg, Peter, "A Note on Identity of Constituents," Linguis-tic Inquiry 4:3..117-20 (1973).Gazdar, Gerald and G. Pullum.
"Generalized Phrase StructureGrammar: A Theoretical Synopsis."
Indiana UniversityLinguistics Club, Bloomington, Indiana (1982).Kaplan, Ronald M. and Joan Bresnan, 1983: "Lexieal-Functional Grammar: A Formal System for GrammaticalRepresentation," Ch.4 in J. Bresnan, The Mental Repre-sentation of Grammatical Relations (ed.
), Cambridge, MITPress.Kay, Martin, 1979: "Functional Grammar."
Proceedings of theFifth Annual Meeting of the Berkeley Linguistic ,Society,Berkeley l,inguistic Society, Berkeley, California (February17-19, 1979), pp.
142-158.Pereira, Fernando and Stuart Shieber, 1984: "The semantics ofGrammar Formalism Seen as Computer Languages."
Pro-eeedh2gs of the Tenth International Conference on Compu-tational Linguistics, Stanford University, Stanford Califor-nia (4-7 July, 1984).Sag, Ivan, Gerald Gazdar, Thomas Wasow, and Steven Weisler,1984: "(Joordination and How to Distinguish Categories.
"CLSI Report No.
3.
Center for the Study of Language andInformation, Stanford, Ca., (March 1984).Shieber, S., II.
Uszkoreit, F. Pereira, J. Robinson, and M. Tyson,1983: "The Formalism and Implementation f PATR-II,"in B. Grosz and M. Stiekel, Research on Interactive Acqui-sition and Use of Knowledge, SRI Final Report 1894, SRIInternational, Menlo Park, California (November 1983).A.
Appendix: Some Examples ofUnification(These examples were produced using the Texas version ofthe DG package.
)_ro.,e: <oom .oo>die / \[r0.o0,,: "mlli n.: I'o': i Ln''mb'': so j ?
L tr,,umb,,: pO J -=fnfl: ~ , Fgender: neutL ag`` \[number: pldie Kinder = f \[o,,.
:<oom.oo> no,,: L,,0,: r~,.o<,.,: neu.l//\[number: pl ,JJJi \]\]I den = I I  rg.nd.,: n,,: ~L'"" t~omO.," ",;'?\] I F , , .
.
0,,, l,L,,g,: \['number,, POden K inder  = *FAILS*f , den Kindez"r, = tease,, a.t .euql nfh | r rgender: L ='?
: L(umber: p, .JjI = r ro=,e: nora 't nJ\[, I Fnumber: L "?
': Lperson: IstJI he = J rgen~e,.
: ,'...s= nfl: tagr: \[number', sgL Lperson: 3rd?'"?'
:\]\]\] do = \[ F-Fnumber: sgnfh La.,: L \[person: 3rIdo= ~ense: present IIlease: nom l lnil: I Fnumber: sglllL -~r L.erson: , ,uJ\]he do = *FAILS*< .
+LI::(Unify x y)= \[::.;\]\]f::?
; \[: \ ] :(Unify (Unify x y) z)b:33
