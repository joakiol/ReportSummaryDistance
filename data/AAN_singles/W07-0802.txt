Proceedings of the 5th Workshop on Important Unresolved Matters, pages 9?16,Prague, Czech Republic, June 2007. c?2007 Association for Computational LinguisticsImplementation of the Arabic Numerals and their Syntax in GFAli DadaSAP Research CECBlumenbergplatz 99000 St. Gallen, Switzerlandali.dada@sap.comAbstractThe numeral system of Arabic is rich in itsmorphosyntactic variety yet suffers from thelack of a good computational resource thatdescribes it in a reusable way.
This impliesthat applications that require the use of rulesof the Arabic numeral system have to eitherreimplement them each time, which implieswasted resources, or use simplified, impre-cise rules that result in low quality appli-cations.
A solution has been devised withGrammatical Framework (GF) to use lan-guage constructs and grammars as librariesthat can be written once and reused in vari-ous applications.
In this paper, we describeour implementation of the Arabic numeralsystem, as an example of a bigger imple-mentation of a grammar library for Arabic.We show that users can reuse our systemby accessing a simple language-independentAPI rule.1 Introduction1.1 ProblemLanguage technology and software localization con-sume a significant share of many companies?
timeand work.
Translating an operating system or an ap-plication to different languages involves, in the tra-ditional approach, translating out-of-context stringsinto different languages.
This requires a languageexpert for each new language, and will still in-volve language-related problems because of the dif-ficulty in translating out-of-context strings and tak-ing care of morphological and syntactic variations atthe same time.
We illustrate this with an example.A mail reader application wants to display messageslikeYou have 1 new messageYou have 2 new messagesYou have 3 new messagesYou have 100 new messagesIf these are to be translated into Arabic, special mor-phological and syntactic considerations should bemade, which include inflecting ?message?
in num-ber:1 message??
A?Prisa?latun2 messages 	?AJ?
A?Prisa?lata?ni(3-10) messages?KA?P rasa?
?ila(11-99) messages??
A?Prisa?latanx100 messages??
A?Prisa?latinSo the word ?messages?
is translated into dif-ferent words in Arabic, depending on the numeralcounting it.
Counted nouns are an extreme exampleof how varied case inflection can be: The case of thesingular and the dual is determined by their syntac-tic function (nominative in the example above).
Thisis not the case for plurals, which assume the geni-tive case from three to ten (?KA?P is diptote, thus the?jJ?marker), then accusative (singular) from elevento nighty-nine, and genitive again for plurals that aremultiples of hundred.
This is not to mention noun-adjective agreement which should be taken care ofwhen translating ?new messages?
into Arabic.The aforementioned details should not be the re-sponsibility of the application programmer, and hav-9ing translators do this work over and over again foreach application can be costly and lead to repeatedwork and/or poor results.1.2 Solution and ContributionsWe reviewed in other works (Dada and Ranta, 2007)an approach that addresses problems in languagetechnology similar but not limited to the above.
Weapplied this approach to Arabic, thus developing aresource grammar for Arabic in which we imple-ment rules that cover the orthography, morphology,and syntax.
In short, this approach is based on de-veloping libraries of natural language constructs andrules, which can be used by an application program-mer who is not knowledgeable in a specific lan-guage.
The core programming language is Gram-matical Framework (GF) (Ranta, 2004).
The lan-guage library, called a resource grammar (Khegaiand Ranta, 2004) and comprising the linguistic rules,can be reused in applications through an ApplicationProgramming Interface (API) by programmers thatare unaware of the details of the specific natural lan-guage.
Such a programmer uses a resource gram-mar assuming it will take care of morphological andsyntactic rules.
So far, we have implemented signif-icant parts of the Arabic morphology, syntax, ortho-graphic rules, and provided a sample lexicon of 300words based on the Swadesh list (Hymes, 1960).In this paper, we only describe part of the work,namely the numeral system of Arabic and its syntax.In the next section we elaborate on the approach, theprogramming language that implements it, and onResource Grammars.2 GF and the Resource LibraryGF is a special-purpose functional programminglanguage for defining grammars of (formal or natu-ral) languages.
A common API and resource gram-mars for various natural languages accompany GFwith a purpose similar to that of libraries in gen-eral programming languages: implementing piecesof code that can be reused by the application pro-grammer.GF makes a distinction between abstract and con-crete syntaxes.
The common API specifies a set ofsyntactic rules that are language independent (ab-stract syntax), and the resource grammar imple-ments each rule according to the particular rules ofthe language (concrete syntax).
This latter involvesword order, agreement, case inflection, etc.
This dis-tinction can abstract over language-dependent fea-tures and enables an application programmer towrite sentences in a language only by describingtheir abstract syntax trees or by translating themfrom another language, preferably in a limited do-main.
The abstract representation would then act asinterlingua.3 The NumeralsWe give here an explanation of our treatment ofthe Arabic number system, namely the numeralsand their counted nouns.
Our implementation isbased on the work done by Hammarstro?m and Ranta(2004) in defining the cardinal numerals in GF.
Wewill gradually give the governing grammar rulesalong with their our formal description in GF.The numbers from one to nineteen in Arabic havetwo forms, a masculine form and a feminine one,so in general we will take gender to be one of theinflecting attributes of numbers.
Which of these twoforms to use depends on the counted noun and thecounting number:?
The numerals 1 and 2 show gender agreementwith the counted noun (their grammatical roleis an adjective modifying this noun).?
Numerals 3-10 show gender polarity with thecounted noun, so a masculine noun is countedwith a number in its feminine form and viceversa, e.g.
?A g.P?KCK (three [+FEM] men[+MASC]) but ZA ?flHCK (three [+MASC]women [+FEM]).?
Numbers 11 and 12 have two constituentswhich show gender agreement with each otherand with the counted noun, e.g.
Cg.P Q???
Yg@(eleven [+MASC] men [+MASC]).?
Numbers 13-19 show gender polarity betweentheir first constituent and the counted noun.?
Numbers further on, except those ending in 01and 02, show no gender distinction.Numerals dictate the number of the counted nounis a way different to what is the case in other lan-guages:?
Numeral One: The noun is in the singular form.10?
Numeral Two: The noun is in the dual form.?
Numerals 3-10: The noun is in the plural form,e.g.
?A g.P?KCK (three men [+PLUR]).?
Numerals > 10: The noun is in singular formagain, e.g.
Cg.P?
?KCK (thirty men [+SING]).The numbers inflect also in case, so in the gen-eral case the number can have different forms forthe three cases: nominative, accusative, and geni-tive.
But again, as with gender, this will depend onthe particular range of numerals:?
Numeral 1: full case distinction (it is an adjec-tive)?
Number 2: usually the noun in dual is usedalone, and if the number 2 is specified then itis usually only for emphasis.
In this case it?san adjective in the dual form, thus it has twocases: nominative and oblique, e.g.
?AJK @?@Y??
[+NOM] and 	?ffiJK @?KY??
[+OBL].?
Numerals 3-10 : full case distinction for thenumbers; the counted noun is always genitive,e.g.
I.J???
?g (five [+NOM] books [+GEN]),I.J???
?g (five [+ACC] books [+GEN]),I.J???
?g (five [+GEN] books [+GEN]).?
Numerals 11 and 13-19: only accusative, sameas their counted noun, e.g.
A???Q????
?K.P@(fourteen [+ACC] pens [+ACC]).?
12: same as 2, but the counted noun is alwaysaccusative?
The tens (20, 30, ... 90): nominative andoblique cases, the counted noun is accusative?
multiples of 100 or 1000: the counted noun isgenitive.?
composites: the case distinction of the numberis the same as each of its constituent parts, andthe case of the counted noun is determined bythe rule of the last part of the compound con-struction.
For example, 23: the three followsthe rule of 3-10, the 20 follows the rule of thetens, and the counted noun is accusative as inthe rule of the tens, the last part of the construc-tion twenty three (three and twenty in Arabic).The rules above only treat the indefinite state ofthe numerals, since the numerals in the definite statewill be an adjective modifying the noun.
The caseof such a noun will not then follow the rules abovebut will assume the case dictated by its syntactic rolein the sentence.
We do however give below the typeof the numerals inflection table including all the at-tributes that a number can inflect in: gender, state,and case.lincat Numeral = {s : Gender => State => Case => Str ;n : Size} ;param Size =One | Two | ThreeTen | Teen| NonTeen | Hundreds | None ;paramGender = Masc | Fem ;State = Def | Indef | Const ;Case = Nom | Acc | Gen ;The lincat (linearize category) statementdefines the type of a numeral in Arabic.
It states thatin GF, an Arabic numeral is a record that comprisestwo fields.
The first is a string s which is in thiscase an inflection table specifying that a numeral isinflected in gender, state, and case.
The => operatoris the table operator in GF, so having three inputs tothe table means that a Numeral is inflected in thesethree attributes.
The three inflectional attributes aredefined as parameters that take one of predefinedvalues: gender can be masculine or feminine, casecan be nominative, accusative, or genitive, and statecan be definite with al, definite with a genitive con-struction (??A?
@) or indefinite.
The second field is nof type Size, which is also defined as a parameterwith several possible values.
These values specifywhich range of numbers does the numeral belong to.This is needed to be able to apply the rules aboveproperly at all stages, including the formation of thenumber and the formation of the noun phrase fromthe number and the counted noun.As mentioned earlier, GF differentiates betweenabstract and concrete syntaxes, and this differentia-tion also applies for the numeral system.
So first anabstract syntax defines how numbers are formed ina language-independent way.
The numbers are de-fined in a way that draws similarities found acrosslanguages in the formation of compound numbers.We linearize the rules into Arabic thus making useof this division but making distinctions because ofthe special rules that govern numerals in Arabic.
Atypical example of such numbers is the special treat-11ment that numbers ending in 2 have in Arabic due tothe notion of the dual.We give here the rules for the first division ofnumbers and show how we implement them for Ara-bic.
The API specifies the following categories andrules for numbers less than ten:catDigit ; -- 2..9Sub10 ; -- 1..9funn2, n3, n4, n5, n6, n7, n8, n9 : Digit ;pot01 : Sub10 ; -- 1pot0 : Digit -> Sub10 ; -- d * 1So the number 1 is treated separately from the re-maining digits.
We want to preserve a difference inour Arabic implementation between n2 and the re-maining digits because of the different way the digit2 combines in compound numbers later on.
This isthe motivation between the division seen in Sizebetween Two and ThreeTen.Following is the type of the categories above inArabic (the concrete syntax):lincat Digit = {s : DForm => Gender => State => Case => Str;n : Size} ;lincat Sub10 = {s : DForm => Gender => State => Case => Str;n : Size} ;param DForm = unit | ten ;The inflection table shows what we discussed earlier,that Arabic numbers get in the general case inflectedin gender, state, and case.
The DForm is used tocalculate both the digit and its multiple of ten.We write functions that form the inflection tablesof the digits: one function for numeral 2 (num2, notshown here) and one function for the rest of the dig-its, including 1 (num1_10, shown below).
1oper num1_10 : Str -> { s : DForm => Gender=> State => Case => Str } = \xams ->let xamsa = xams + "ap" in {s= table {unit => table {Masc => \\s,c => (sing xams) !
s !
c;1Our grammar files are in unicode, but the example codesshown here are written using the Buckwalter (2003) translitera-tion with a few changes that suit our needs.
We note our use of?c?
to denote the ?ayn.Fem => \\s,c => Al !
s + xamsa+ dec1sg !
s !
c};ten => \\_,s,c => Al !
s + xams +m_pl !
Indef !
c}};Note the following GF syntax notations: The key-word oper defines a GF function.
An oper judg-ment includes the name of the defined operation(e.g.
num1_10 in the example above), its type(e.g.
Str -> { s : DForm => Gender=> State => Case => Str }), and an ex-pression defining it (everything after the = opera-tor).
As for the syntax of the defining expression,notice the lambda abstraction form \x -> t of thefunction.
Inflection tables are either specified by thetable keyword or using the shorthand \\... =>notation.
Finally, + is the character concatenationoperator and !
is the table selection operator.The num1_10 function takes a string which canbe any of the stems of the numerals from one toten excluding two, e.g.
h?ams.
From this stem, andusing helping functions from the nominal morphol-ogy modules, we build the inflection table of the nu-meral.
For example, for the case where DForm isunit and the Gender is feminine (e.g.
h?amsah),the actual numeral string would be the concatena-tion of a possible definite marker (al), the stem, anda suffix determined by the state and the case of thenumeral, s and c respectively.
The helping functionthat determines if the definite marker is needed is thefollowing:Al : State => Str =table {Def => "Al";_ => ""};The second helping function defines the suffixesthat attach to singular or broken plurals of the first(strong) declension of Arabic nominal words (Retso?,1984).
It calculates, given the state of the word andits case, what its suffix will be.
Note that N, F, andK are the nominative, accusative, and genitive nuna-tion diacritics.dec1sg : State => Case => Str =table {Indef =>table {Nom => "N";Acc => "F";12Gen => "K"};_ =>table {Nom => "u";Acc => "a";Gen => "i"}};As expected, only words with indefinite state takedouble diacritics (nunation), where as the rest (al-definite or construct-definite words) take simple di-acritics.
The remaining helping functions will not beall explained here as they follow similar logic.The num1_10 and num2 produce only the inflec-tion tables (the s field of the digit record).
We sim-ply add the correct Size parameter to each digit asfollows:oper num3_10 : Str -> { s : DForm => Gender=> State => Case => Str ; n : Size } =\xams ->num1_10 xams ** { n = ThreeTen } ;lin n2 = num2 ** {n = Two };lin n3 = num3_10 "valAv";lin n4 = num3_10 ">arbac";lin n5 = num3_10 "xams";lin n6 = num3_10 "sit?
";lin n7 = num3_10 "sabc";lin n8 = num3_10 "vamAnI";lin n9 = num3_10 "tisc";lin pot01 = num1_10 "wAHid" ** { n = One } ;lin pot0 d = d ;The last function in the linearization shownabove, pot0, is used to promote a Digit into aSub10 in order to use it later on as any numeralless that ten.
This is the way the API specifies dif-ferent numerals, dividing them into categories basedon the decimal system.
We give here the rest of theAPI categories and their linearization in Arabic:catSub100 ; -- 1..99Sub1000 ; -- 1..999Sub1000000 ; -- 1..999999lincat Sub100 = {s : Gender => State => Case => Str ;n : Size} ;We will now show only a few implementation ex-amples of the rules that specify the formation of theSub100 category.
The rest of the rules for this andother categories don?t show any different logic andwill not be detailed here.
The first rule we give is forthe special cases of numeral 11:funpot111 : Sub100 ;lin pot111 = {s = \\g,d,_ =>case g of {Masc => Al !
d + ">aHada" ++ teen !
Masc;Fem => Al !
d + "<iHdaY" ++ teen !
Fem};n = NonTeen};oper teen : Gender => Str =table {Masc => "ca$ara";Fem => "ca$rapa"};The implementation shows how the qualitativerules stated at the beginning are described formally.The inflection table doesn?t give different forms forthe three cases, and the accusative is used whateverthe context case is.
Both parts of the constructionshow gender agreement.The numbers 12-19 have a common rule in theAPI but we should differentiate in the Arabic lin-earization between 12 and 13-19 because of the spe-cial status of the dual in Arabic and the differentrules that these numbers assume in Arabic (see rulesabove).funpot1to19 : Digit -> Sub100 ; -- 10 + dlin pot1to19 dig = {s = \\g,d,c =>case dig.n of {Two => Al !
d + num2.s !
unit !
g!
Const !
c ++ teen !
g ;_ => dig.s !
unit !
g !
Const !
Acc++ teen !
(genPolarity !
g)};n =case dig.n of {Two => NonTeen;_ => Teen}};opergenPolarity : Gender => Gender =table {Masc => Fem;Fem => Masc};The pot1to19 function takes a Digit as argu-ment.
In our implementation we take cases for the13Size of the digit.
When the Size is Two, i.e.
thenumber will be 12, we apply the rules for number12 as given in the beginning: gender agreement be-tween the two constituents, the first constituent isinflected in case (it is basically number 2 in theConst state).
Otherwise (when the digit size isThreeTen), we apply the rules of numbers 13 - 19:gender polarity between the two constituents and thefirst constituent is the digit inflected for the constructstate and accusative case.
The second constituent forall the numbers 11-19 is always accusative as shownin the teen helping function before.The rest of the rules for forming numbers willnot be detailed here.
Instead we will explain howall these numbers will combine with nouns to formnoun phrases.
The different number ranges as de-fined by the Size parameter will be now used ex-tensively in applying the proper rules.
Following isthe rule that takes that takes a Determiner (whichcan, among others, be a numeral) and a commonnoun to give a noun phrase.funDetCN : Det -> CN -> NP ;The rule above has the same type in all languagessince it?s part of the language-independent API (ab-stract syntax).
The advantage of this is that a userof our system can access the Arabic numerals at thishigh level of abstraction, without being knowledge-able about the details of our implementation.When determiners combine with common nounsin the general case, it will make a difference whetheror not the determiner was a numeral, and if it werethen the range of the numeral will probably deter-mine the case of the noun in the resulting NP.
Thusthe type of the determiner category should include aSize field which is taken directly from the size ofthe number if that determiner is a numeral:lincat Det = {s : Species => Gender => Case => Str ;d : State;n : Size} ;param Species = NoHum | Hum ;If the determiner is not a numeral, then this willbe denoted by n = None.The first determiner-noun modification we willintroduce is the determiner?s gender.
If we don?tconsider numerals, then a determiner?s gender is di-rectly deduced from that of the noun.
But, as we sawin the rules for Arabic counted nouns, if the numeralwas in the range 3-10 or 13-19 (Size is ThreeTenor Teen), then the numeral will show gender po-larity instead of agreement.
The rest of the casescontinue to show agreement.
This is described indetGender:operdetGender : Gender -> Size -> Gender =\g,s ->case s of {ThreeTen | Teen => genPolarity !
g;_ => g};The arguments are the gender of the noun and thesize of the determiner.
The correct gender of the de-terminer is calculated after taking cases of the Size.Again, if we were not to consider numerals, thenumber in which we should inflect the commonnoun (singular, dual, or plural) would be directly de-termined by the number of the determiner.
Nowwiththe consideration of numerals and their special rulesthat dictate the number of the counted noun, we haveto specify a correcting function:oper sizeToNumber : Size -> Number = \s ->case s of {ThreeTen | None => Pl;Two => Dl;_ => Sg} ;param Number = Sg | Dl | Pl;This function converts from the Size of the de-terminer to a number in which the noun should beinflected in.
As the rules of Arabic numerals spec-ify, only the 3-10 numeral range dictate a noun inthe plural form.
Apart from the dual, the remainingnumeral ranges take a singular noun.The last way that a numeral will affect the noun itcounts is by specifying its case as we have alreadyseen in the rules.
Without considering numerals,the case of the noun would always be determinedby its grammatical role in the sentence.
Again, thischanges with the introduction of numerals.
We writenow a function that takes the case from the sentence,along with the size and state of the determiner, andmodifies the case if required:opernounCase : Case -> Size -> State -> Case =\c,size,s ->14case <size,s> of {<Teen,_> => Acc;<NonTeen,_> => Acc;<ThreeTen,_> => Gen;<Hundreds,_> => Gen;<_,Const> => Gen;_ => c};Numbers from 11 to 99 dictate the accusative caseon the nouns they count, numbers from 3 to 10and multiples of hundred dictate the genitive caseof the nouns they count, and the remaining numbers(1 and 2) don?t change the case determined by thecontext.
The remaining case of State = Consttakes care of the id.
a?fah genitive constructions.Thus, after applying all the ?correction?
functionsabove, we get the following implementation of thenoun determination rule:lin DetCN det cn =let number = sizeToNumber det.n in {s = \\c =>det.s !
cn.h !
(detGender cn.g det.n) !
c++ cn.s !
number !
(nounState det.d number)!
(nounCase c det.n det.d);a = agrP3 cn.h cn.g number};oper agrP3 : Species -> Gender -> Number-> PerGenNum=\h,g,n ->case <h,n> of {<NoHum,Pl> => Per3 Fem Sg;_ => Per3 g n};The agrP3 helping function tests for the casewhen the species and number are nonhuman andplural.
This case is treated in agreement as the fem-inine singular.4 Related WorkA large-scale implementation of the Arabic mor-phological system is the Xerox Arabic Morphologi-cal Analyzer and Generator (Beesley and Karttunen,2000; Beesley, 2001).
This system is developed us-ing only the Xerox Finite State Technology tools(Beesley and Karttunen, 2003) from which an Ara-bic Finite State Lexical Transducer is written.
A re-search version is available for online testing, and anexpanded and updated version can be obtained witha commercial license.
Another notable computa-tional model of the Arabic morphology is Tim Buck-walter?s Arabic Morphological Analyzer (Buckwal-ter, 2004b,a).
Buckwalter?s analyzer parses Arabicwords and gives all their possible morphological in-terpretations, each solution having a unique lemmaID, different word constituents, the part-of-speech,and English glosses.Other works that also use functional languages forthe treatment of Arabic include a morphology sys-tem by Smrz?
(in prep.).
This work is based on Func-tional Morphology (Forsberg and Ranta, 2004), amethodology for building morphological systems inthe Haskell programming language.
Our treatmentof Arabic shares similarities with that of FunctionalMorphology.
Both approaches use typed languages,making use of finite algebraic datatypes to definelinguistic categories.
Both languages are functional,so the approaches use functions to realize linguis-tic abstractions.
A large-scale implementation ofthis approach, in which a typed functional program-ming language is used to build a morphology, isHuet?s Sanskrit dictionary and morphological sys-tem (Huet, 2006) upon which the Zen computationallinguistics toolkit is based (Huet, 2005).Of the available works in Arabic syntax, we men-tion El-Shishiny (1990) who developed a formal de-scription of Arabic syntax in Definite Clause Gram-mar.
We also make note of the work in Othmanet al (2003), where the authors describe a parserthey wrote in Prolog to parse and disambiguate theArabic sentence.
Shaalan (2005) builds on this workto develop a syntax-based grammar checker for Ara-bic called Arabic GramCheck.5 DiscussionOur implementation of the Arabic numerals coversall natural numbers in the range 1-999,999.
Thiswas accomplished by implementing only a few func-tions, thanks to the repetitive way in which numer-als are composed to form larger numerals.
As forperformance, Arabic grammars are slower to com-pile than comparable GF grammars of other lan-guages, partly because of the additional complexityof Arabic and partly because of the general way inwhich our lexicon is specified.
Our implementationstresses more on elegance and generality rather thanefficiency, thus more work needs to be done on thelatter.156 ConclusionWe discussed in this paper the details of implement-ing the Arabic numeral system in GF.
We motivatedour work by taking an example that shows the valueof having the necessary language rules implementedin a reusable fashion.
We built up our implementa-tion towards a single language-independent rule thata user can call to access our system.
We show howthe grammar formalism we use in our implementa-tion parallels the way linguists think.AcknowledgmentsMost of the work was done at Chalmers Univer-sity of Technology.
Thanks to Prof. Aarne Rantafor supervising this work and providing constanthelp.
Also thanks to Bjo?rn Bringert, Harald Ham-marstro?m, and Otakar Smrz?
for giving valuablecomments.ReferencesKenneth Beesley.
Finite-State Morphological Anal-ysis and Generation of Arabic at Xerox Research:Status and Plans in 2001.
In Workshop Proceed-ings on Arabic Language Processing: Status andProspects, pages 1?8, Toulouse, 2001.
ACL.Kenneth Beesley and Lauri Karttunen.
Finite-statenon-concatenative morphotactics.
In Proceedingsof the Fifth Workshop of the ACL SIG in Compu-tational Phonology, pages 1?12, 2000.Kenneth R. Beesley and Lauri Karttunen.
FiniteState Morphology.
CSLI Studies in Computa-tional Linguistics.
CSLI Publications, Stanford,California, 2003.Tim Buckwalter.
Arabic transliteration, 2003. http://www.qamus.org/transliteration.htm.Tim Buckwalter.
Issues in Arabic Orthographyand Morphology Analysis.
In Proceedings ofthe COLING 2004 Workshop on ComputationalApproaches to Arabic Script-based Languages,pages 31?34, 2004a.Tim Buckwalter.
Buckwalter Arabic Morphologi-cal Analyzer Version 2.0.
LDC catalog numberLDC2004L02, ISBN 1-58563-324-0, 2004b.Ali Dada and Aarne Ranta.
Implementing an OpenSource Arabic Resource Grammar in GF.
InMustafa Mughazy, editor, Perspectives on ArabicLinguistics, volume XX.
John Benjamins, 2007.Hisham El-Shishiny.
A formal description of Arabicsyntax in definite clause grammar.
In Proceed-ings of the 13th Conference on ComputationalLinguistics, pages 345?347.
ACL, 1990.Markus Forsberg and Aarne Ranta.
Functional Mor-phology.
In Proceedings of the Ninth ACM SIG-PLAN International Conference on FunctionalProgramming, ICFP 2004, pages 213?223.
ACMPress, 2004.Harald Hammarstro?m and Aarne Ranta.
CardinalNumerals Revisited in GF.
In Workshop on Nu-merals in the World?s Languages, Leipzig, Ger-many, 2004.
Dept.
of Linguistics Max Planck In-stitute for Evolutionary Anthropology.Ge?rard Huet.
A Functional Toolkit for Morphologi-cal and Phonological Processing, Application to aSanskrit Tagger.
Journal of Functional Program-ming, 15:573?614, 2005.Ge?rard Huet.
Sanskrit Site, 2006. http://sanskrit.inria.fr/.D.
H. Hymes.
Lexicostatistics so far.
Current An-thropology, 1:3?44, 1960.Janna Khegai and Aarne Ranta.
Building and Usinga Russian Resource Grammar in GF.
In Intelli-gent Text Processing and Computational Linguis-tics (CICLing-2004), pages 38?41, Korea, 2004.E.
Othman, K. Shaalan, and A. Rafea.
A ChartParser for Analyzing Modern Standard ArabicSentence.
In Proceedings of the MT SummitIX Workshop on Machine Translation for SemiticLanguages, pages 37?44, 2003.Aarne Ranta.
Grammatical Framework: A Type-theoretical Grammar Formalism.
Journal ofFunctional Programming, 14:145?189, 2004.Jan Retso?.
State, Determination and Definiteness inArabic: A Reconsideration.
Orientalia Suecana,33?35:341?346, 1984.Khaled F. Shaalan.
Arabic GramCheck: a grammarchecker for Arabic: Research Articles.
Software -Pracice and Experience, 35(7):643?665, 2005.Otakar Smrz?.
Functional Arabic Morphology.
For-mal System and Implementation.
PhD thesis,Charles University in Prague, in prep.16
