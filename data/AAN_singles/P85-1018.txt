Using Restriction to Extend Parsing Algorithms forComplex-Feature-Based FormalismsStuart M. ShieberArtificial Intelligence CenterSRI InternationalandCenter for the Study of Language and InformationStanford UniversityAbst rac t  1 In t roduct ionGrammar formalisms based on the encoding of grammaticalinformation in complex-valued feature systems enjoy somecurrency both in linguistics and natural-language-processingresearch.
Such formalisms can be thought of by analogy tocontext-free grammars as generalizing the notion of non-terminal symbol from a finite domain of atomic elementsto a possibly infinite domain of directed graph structuresnf a certain sort.
Unfortunately, in moving to an infinitenonterminal domain, standard methods of parsing may nolonger be applicable to the formalism.
Typically, the prob-lem manifests itself ,as gross inefficiency or  ew, n nontermina-t icm of the alg~,rit hms.
In this paper, we discuss a solution tothe problem of extending parsing algorithms to formalismswith possibly infinite nonterminal domains, a solution basedon a general technique we call restriction.
As a particularexample of such an extension, we present a complete, cor-rect, terminating extension of Earley's algorithm that usesrestriction to perform top-down filtering.
Our implementa-tion of this algorithm demonstrates the drastic eliminationof chart edges that can be achieved by this technique.
Fi-t,all.v, we describe further uses for the technique--includingparsing other grammar formalisms, including definite.clausegrammars; extending other parsing algorithms, includingLR methods and syntactic preference modeling algorithms;anti efficient indexing.This research as been made possible in part by a gift from the Sys*terns Development Fonndation.
and was also supported by the DefenseAdvancml Research Projects Agency under C,mtraet NOOO39-g4-K-0n78 with the Naval Electronics Systems Ckm~mand.
The views andronchtsi~ms contained in this &Jcument should not be interpreted a.srepresentative of the official p~dicies, either expressed or implied, ofthe D~'fen~p Research Projects Agency or the United States govern-mont.The author is indebted to Fernando Pereira and Ray Perrault for theircomments on ea, riier drafts o\[ this paper.Grammar formalisms ba.sed on the encircling of grantmal-ical information in complex-valued fealure systems enjoysome currency both in linguistics and natural-language-processing research.
Such formalisms can be thought of byanalogy to context-free grammars a.s generalizing the no-tion of nonterminai symbol from a finite domain of atomicelements to a possibly infinite domain of directed graphstructures of a certain sort.
Many of tile sm'fa,',,-bast,,Igrammatical formalisms explicitly dvfin,,,I ,,r pr~"~Ul~p,~'.,'.lin linguistics can be characterized in this way ,,.~.. It.xi , I -functional grammar (I,F(;} \[5\], generalizt,I I,hr:~,' ~l rlt,'l ur,.grammar (GPSG) \[.1\], even categorial systems uch ,as M,,n-tague grammar \[81 and Ades/Steedman grammar Ill --,~s canseveral of the grammar formalisms being used in natural-language processing research--e.g., definite clause grammar(DCG) \[9\], and PATR-II \[13\].Unfortunately, in moving to an infinite nonlermiual de,-main, standard methods of parsing may no h,ngvr t~, ap-plicable to the formalism.
~k~r instance, the applicationof techniques for preprocessing of grantmars in ,,rder t,,gain efficiency may fail to terminate, ~ in left-c,~rner andLR algorithms.
Algorithms performing top-dc~wn prediction(e.g.
top-down backtrack parsing, Earley's algorithm) maynot terminate at parse time.
Implementing backtrackingregimens~useful for instance for generating parses in someparticular order, say, in order of syntactic preference--isin general difficult when LR-style and top-down backtracktechniques are eliminated.\[n this paper, we discuss a s~dul.ion to the pr~,blem of ex-tending parsing algorithms to formalisms with possibly infi-nite nonterminal domains, a solution based on an operationwe call restriction.
In Section 2, we summarize traditionalproposals for solutions and problems inherent in them andpropose an alternative approach to a solution using restric-tion.
In Section 3, we present some technical backgroundincluding a brief description of the PATR-II formalism~which is used as the formalism interpreted by the pars-ing algor i thms~and a formal definition of restriction for145PATR-II's nonterminal domain.
In Section 4, we developa correct, complete and terminating extension of Earley'salgorithm for the PATR-II formalism using the restrictionnotion.
Readers uninterested in the technical details of theextensions may want to skip these latter two sections, refer-ring instead to Section 4.1 for an informal overview of thealgorithms.
Finally, in Section 5, we discuss applicationsof the particular algorithm and the restriction technique ingeneral.2 Trad i t iona l  So lu t ions  and  an A l -te rnat ive  ApproachProblems with efficiently parsing formalisms based onpotentially infinite nonterminal domains have manifestedthemselves in many different ways.
Traditional solutionshave involved limiting in some way the class of grammarsthat can be parsed.2.1 Limiting the formalismThe limitations can be applied to the formalism by, for in-stance, adding a context-free "backbone."
If we require thata context-free subgrammar be implicit in every grammar,the subgrammar can be used for parsing and the rest of thegrammar used az a filter during or aRer parsing.
This solu-tion has been recommended for functional unification gram-mars (FI,G) by Martin Kay \[61; its legacy can be seen inthe context-free skeleton of LFG, and the Hewlett-PackardGPSG system \[31, and in the cat feature requirement inPATR-\[I that is described below.However, several problems inhere in this solution of man-dating a context-free backbone.
First, the move fromcontext-free to complex-feature-based formalisms wan mo-tivated by the desire to structure the notion of nonterminal.Many analyses take advantage of this by eliminating men-tion of major category information from particular rules a orby structuring the major category itself (say into binary Nand V features plus a bar-level feature as in ~-based theo-ries).
F.rcing the primacy and atomicity of major categorydefeats part of the purpose of structured category systems.Sec, m,l.
and perhaps more critically, because only cer-tain ,ff the information in a rule is used to guide the parse,say major category information, only such information canbe used to filter spurious hypotheses by top-down filtering.Note that this problem occurs even if filtering by the ruleinformation is used to eliminate at the earliest possible timeconstituents and partial constituents proposed during pars-ing {as is the case in the PATR-II implementation and the~Se~'.
\[or instance, the coordination and copular "be" aaalyses fromGPSG \[4 I, the nested VP analysis used in some PATR-ll grammars11.5 I, or almost all categorial nalyse~, in which general roles of com-bination play the role o1' specific phlr~se-stroctur?
roles.Earley algorithm given below; cf.
the Xerox LFG system}.Thus, if information about subcategorization is left out ofthe category information in the context-free skeleton, it can-not be used to eliminate prediction edges.
For example, ifwe find a verb that subcategorizes for a noun phrase, butthe grammar rules allow postverbal NPs, PPs, Ss, VPs, andso forth, the parser will have no way to eliminate the build-ing of edges corresponding to these categories.
Only whensuch edges attempt to join with the V will the inconsistencybe found.
Similarly, if information about filler-gap depen-dencies is kept extrinsic to the category information, as ina slash category in GPSG or an LFG annotation concern-ing a matching constituent for a I~ specification, there willbe no way to keep from hypothesizing gaps at any givenvertex.
This "gap-proliferation" problem has plagued manyattempts at building parsers for grammar formalisms in thisstyle.In fact, by making these stringent requirements on whatinformation is used to guide parsing, we have to a certainextent thrown the baby out with the bathwater.
Theseformalisms were intended to free us from the tyranny ofatomic nonterminal symbols, but for good performance, weare forced toward analyses putting more and more informa-tion in an atomic category feature.
An example of this phe-nomenon can be seen in the author's paper on LR  syntacticpreference parsing \[14\].
Because the LALR table buildingalgorithm does not in general terminate for complex-feature-based grammar formalisms, the grammar used in that paperwas a simple context-free grammar with subcategorizationand gap information placed in the atomic nonterminal sym-bol.2.2 Limiting grammars and parsersOn the other hand, the grammar formalism can be left un-changed, but particular grammars dew,loped that happennot to succumb to the problems inhere, at in the g,,neralparsing problem for the formalism.
The solution mentionedabove of placing more information in lilt, category symbolfalls into this class.
Unpublished work by Kent Witwnburgand by Robin Cooper has attempted to solve the gap pro-liferation problem using special grammars.In building a general tool for grammar testing and debug-ging, however, we would like to commit as little ,as possibleto a particular grammar or style of grammar.
: Furthermore,the grammar designer should not be held down in buildingan analysis by limitations of the algorithms.
Thus a solutionrequiring careful crMting of grammars is inadequate.Finally, specialized parsing alg~withms can be designedthat make use of information about the p;trtictd;tr gram-mar being parsed to eliminate spurious edges or h vpothe-ses.
Rather than using a general parsing algorithm on a'See \[121 for further discl~sioa of thi~ matter.146limited formalism, Ford, Bresnan, and Kaplan \[21 chose aspecialized algorithm working on grammars in the full LFGformalism to model syntactic preferences.
Current work atHewlett-Packard on parsing recent variants of GPSG seemsto take this line as well.Again, we feel that the separation of burden is inappropri-ate in such an attack, especially in a grammar-developmentcontext.
Coupling the grammar design and parser designproblems in this way leads to the linguistic and technolog-ical problems becoming inherently mixed, magnifying thedifficulty of writing an adequate grammar/parser system.2.3 An A l te rnat ive :  Us ing  Rest r i c t ionInstead, we would like a parsing algorithm that placed norestraints on the grammars it could handle as long as theycould be expressed within the intended formalism.
Still, thealgorithm should take advantage of that part of the arbi-trarily large amount of information in the complex-featurestructures that is significant for guiding parsing with theparticular grammar.
One of the aforementioned solutionsis to require the grammar writer to put all such signifi-cant information in a special atomic symbol--i.e., mandatea context-free backbone.
Another is to use all of the featurestructure information--but this method, as we shall see, in-evitably leads to nonterminating algorithms.A compromise is to parameterize the parsing algorithmby a small amount of grammar-dependent information thattells the algorithm which of the information in the featurestructures is significant for guiding the parse.
That is, theparameter determines how to split up the infinite nontermi-nal domain into a finite set of equivalence classes that can beused for parsing.
By doing so, we have an optimal compro-mise: Whatever part of the feature structure is significantwe distinguish in the equivalence classes by setting the pa-rameter appropriately, so the information is used in parsing.But because there are only a finite number of equivalenceciasses, parsing algorithms guided in this way will terminate.The technique we use to form equivalence classes is re-strietion, which involves taking a quotient of the domainwith respect to a rcstrietor.
The restrictor thus serves asthe sole repository, of grammar-dependent information in thealgorithm.
By tuning the restrictor, the set of equivalenceclasses engendered can be changed, making the algorithmmore or less efficient at guiding the parse.
But independentof the restrictor, the algorithm will be correct, since it isstill doing parsing over a finite domain of "nonterminals,"namely, the elements of the restricted domain.This idea can be applied to solve many of the problems en-gendered by infinite nonterminal domains, allowing prepro-cessing of grammars as required by LR and LC algorithms,allowing top-down filtering or prediction as in Earley andtop-down backtrack parsing, guaranteeing termination, etc.3 Techn ica l  P re l iminar iesBefore discussing the use of restriction in parsing algorithms,we present some technical details, including a brief introduc-tion to the PATR-II grammar formalism, which will serveas the grammatical formalism that the presented algorithmswill interpret.
PATR-II is a simple grammar formalism thatcan serve as the least common denominator of many ofthe complex-feature-based an unification-based formalismsprevalent in linguistics and computational linguistics.
Assuch it provides a good testbed for describing algorithmsfor complex-feature-based formalisms.3.1 The PATR-II nonterminal domainThe PATR-II nonterminal domain is a lattice of directed,acyclic, graph structures (dags).
s Dags can be thought ofsimilar to the reentrant f-structures of LFG or functionalstructures of FUG, and we will use the bracketed notationassociated with these formalisms for them.
For example.the following is a dag {D0) in this notation, with reentrancyindicated with coindexing boxes:a :d :b: c \ ]I , i :  k:  I hl\]Dags come in two varieties, complez (like the one above)and atomic (like the dags h and c in the example).
Con~plexdags can be viewed a.s partial functions from labels to dagvalues, and the notation D(l) will therefore denote the valueassociated with the label l in the dag D. In the same spirit.we can refer to the domain of a dag (dora(D)).
A dag withan empty domain is often called an empty dag or variable.A path in a dag is a sequence of label names (notated, e.g..(d e ,f)), which can be used to pick out a particular subpartof the dag by repeated application {in this case.
the dag \[g :hi).
We will extend the notation D(p) in the obvious way toinclude the subdag of D picked ~,tlt b.v a path p. We will alsooccasionally use the square brackets as l he dag c~mstructorfunction, so that \[f : DI where D is an expression denotinga dag will denote the dag whose f feature has value D.3 .2  Subsumpt ion  and  Un i f i ca t ionThere is a natural lattice structure for dags based onsubsumption---an ordering cm ?lag~ that l'~mghly c~rre~pon~l.~to the compatibility and relative specificity of infi~rmation~The reader is referred to earlier works \[15.101 for more detailed is-cussions of dag structures.147contained in the dags.
Intuitively viewed, a dag D subsumesa dag D' {notated D ~/T)  if D contains a subset of the in-formation in (i.e., is more general than)/Y.Thus variables subsume all other dags, atomic or complex,because as the trivial case, they contain no information atall.
A complex dag D subsumes a complex dag De if andonly if D(i) C D'(I) for all l E dora(D) and LF(P) =/Y(q)for all paths p and q such that D(p) = D(q).
An atomic dagneither subsumes nor is subsumed by any different atomicdag.For instance, the following subsumption relations hold:a: m\[b : c\] \]f ie ld:el  r ' \ [a: {b:el\]c d: ~-- - -  t :  f e: fFinally, given two dags D' and D", the unification of thedags is the most general dag D such that LF ~ D and D a C_D.
We notate this D = D ~ U D".The following examples illustrate the notion of unification:to tb:cllot : ,lb:cl\]\[ a: {b :c l \ ]u  d - dThe unification of two dags is not always well-defined.
Inthe rases where no unification exists, the unificati,,n is saidto fail.
For example the following pair of dags fail to unifywith each other:d d: \[b d\] =fail3.3 Restriction in the PATR-II nontermi-r,.al domainNow.
consider the notion of restriction of a dag, using theterm almost in its technical sense of restricting the domain,)f ,x function.
By viewing dags as partial functions from la-bels to dag values, we can envision a process ,~f restrictingthe ,l~mlain of this function to a given set of labels.
Extend-ing this process recursively to every level of the dag, we havethe ,'-ncept of restriction used below.
Given a finite, sperifi-,'ati,,n ~ (called a restrictor) of what the allowable domainat ,,:u'h node of a dag is, we can define a functional, g', thatyields the dag restricted by the given restrictor.Formally, we define restriction as follows.
Given a relationbetween paths and labels, and a dag D, we define D~to be the most specific dag LF C D such that for every pathp either D'(p) is undefined, or i f (p)  is atomic, or for every!
E dom(D'(p)}, pOl.
That is, every path in the restricteddag is either undefined, atomic, or specifically allowed by therestrictor.The restriction process can be viewed as putting dags intoequivalence classes, each equivalence class being the largestset of dags that all are restricted to the same dag {which wewill call its canonical member).
It follows from the definitionthat in general O~O C_ D. Finally, if we disallow infiniterelations as restrictors (i.e., restrictors must not allow valuesfor an infinite number of distinct paths) as we will do for theremainder of the discussion, we are guaranteed to have onlya finite number of equivalence classes.Actually, in the sequel we will use a particularly simplesubclass of restrictors that are generable from sets of paths.Given a set of paths s, we can define ?
such that pOI if andonly if p is a prefix of some p' E s. Such restrictors can beunderstood as ~throwing away" all values not lying on oneof the given paths.
This subclass of restrictors is sut~cientfor most applications.
However, tile algorithms that we willpresent apply to the general class as well.Using our previous example, consider a restrictor 4~0 gen-erated from the set of paths {(a b), (d e f ) , (d  i j f)}.That is, pool for all p in the listed paths and all their pre-fixes.
Then given the previous dag Do, D0~O0 isa :  \ [b :  e lRestriction has thrown away all the infi~rmatiou except thedirect values of (a b), (d e f),  and (d i j f).
(Note howeverthat because the values for paths such as (d e f 9) werethrown away, (D0~'?o)((d e f)) is a variahh,.
)3.4 PATR-II grammar rulesPATR-ll rules describe how to combine a sequence ,,f con-stituents.
X, .
.
.
.
.
X,, to form a constituent X0, stating mu-tual constraints on the dags associated with tile n + 1 con-stituents as unifications of various parts of the dags.
Forinstance, we might have the following rule:Xo - "  Xt .\': :(.\,, ,'sO = >'(.\', ra t )  = .X l'(.\': cat) = I 'P(X, agreement) = (.\'~ agreement).By notational convention, we can eliminate unifications forthe special feature cat {the atomic major category feature)recording this information implicitly by using it in the"name" of the constituent, e.g.,148S-- NP VP:(NP agreement) = (VP agreement).If we require that this notational convention always be used(in so doing, guaranteeing that each constituent have anatomic major category associated with it}, we have therebymandated a context-free backbone to the grammar, and canthen use standard context-free parsing algorithms to parsesentences relative to grammars in this formalism.
Limitingto a context-free-based PATR-II is the solution that previousimplementations have incorporated.Before proceeding to describe parsing such a context-free-based PATR-II, we make one more purely notational change.Rather than associating with each grammar ule a set ofunifications, we instead associate a dag that incorporates allof those unifications implicitly, i.e., a rule is associated witha dug D, such that for all unifications of the form p = q inthe rule.
D,(p) = D,(q).
Similarly, unifications of the formp = a where a is atomic would require that D,(p) = a. Forthe rule mentioned above, such a dug would beX0:  \ [cat:  S \ ]Xl : agreement: m\[\]\ [eat:  V P \]X, : agreement : ,~IThus a rule can be thought of as an ordered pair (P, D)whore P is a production of the form X0 - -  XI -.
.
X, and Dis a dug with top-level features Xo, .
.
.
,  X, and with atomicvalues for the eat feature of each of the top-level subdags.The two notational conventions--using sets of unificationsinstead of dags, and putting the eat feature information im-plicitly in the names of the constituents--allow us to writerules in the more compact and familiar.format bove, ratherthan this final cumbersome way presupposed by the algo-rithm.4 Us ing  Rest r i c t ion  to Extend  Ear-ley's A lgor i thm for PATR- I IWe now develop a concrete xample of the use of restrictionin parsing by extending Earley's algorithm to parse gram-mars in the PATR-\[I formalism just presented.4.1 An overview of the algorithmsEarley's algorithm ia a bottom-up parsing algorithm thatuses top-down prediction to hypothesize the starting pointsof possible constituents.
Typically, the prediction step de-termines which categories of constituent can start at a givenpoint in a sentence.
But when most of the information isnot in an atomic category symbol, such prediction is rela-tively useless and many types of constituents are predictedthat could never be involved in a completed parse.
Thisstandard Earley's algorithm is presented in Section 4.2.By extending the algorithm so that the prediction stepdetermines which dags can start at a given point, we canuse the information in the features to be more precise in thepredictions and eliminate many hypotheses.
However.
be-cause there are a potentially infinite number of such featurestructures, the prediction step may never terminate.
Thisextended Earley's algorithm is presented in Section 4.3.We compromise by having the prediction step determinewhich restricted dags can start at a given point.
If the re-strictor is chosen appropriately, this can be as constrainingas predicting on the basis of the whole feature structure, yetprediction is guaranteed to terminate because the domain -frestricted feature structures is finite.
This final extension ,,fEarley's algorithm is presented in Section -t.4.4.2 Parsing a context-free-based PATR-IIWe start with the Earley algorithm for context-free-basedPATR-II on which the other algorithms are based.
The al-gorithm is described in a chart-parsing incarnation, verticesnumbered from 0 to n for an n-word sentence TL, I ' ' ,  Wn.
Anitem of the form \[h, i, A - -  a.~, D I designates an edge in thechart from vertex h to i with dotted rule A - -  a.3 and dagD.The chart is initialized with an edge \[0, 0, X0 - -  .a, DI foreach rule (X0 - -  a, D) where D((.% cat)) = S.For each vertex i do the following steps until no more itemscan be added:Pred ic tor  step:  For each item ending at i c,f the form\[h, i, Xo -- a.Xj~, D I and each rule ,ff the form (-\'o - -~, E) such that E((Xo cat)) = D((Xi cat)), add anedge of the form \[i, i,.I( 0 - -  .3,, E\] if this edge is notsubsumed by another edge.Informally, this involves predicting top-down all r~tleswhose left-hand-side categor~j matches the eatego~ ofsome constituent being looked for.Completer  step:  For each item of the form \[h, i,.\o --a., D\] and each item of the form \[9. h, Xo - -  f3..Yj~/, E\]add the item \[9, i, X0 --/LY/.3', Eu  iX/ : D(.X'0)I\] if theunification succeeds' and this edge is not subsumed byanother edge.
s~Note that this unification will fail if D((Xo eat)) # E((X~ cat)) andno edge will be added, i.e., if the subphrase is not of the appropriatecategory for IsNrtlos Into the phrase being built.SOue edge subsumes another edge if and only if the fit'at three elementsof the edges are identical and the fourth element o{ the first edgesubsumes that of the second edge.149Informally, this involves forming a nsw partial phrasewhenever the category of a constituent needed b~l onepartial phrase matches the category of a completedphrase and the dug associated with the completed phrasecan be unified in appropriately.Scanner  step: If i # 0 and w~ - a, then for all items {h, i -1, Xo --* a.a~3, D\] add the item \[h, i, Xo --* oa.B, D\].Informally, this involves aliomin9 lezical items to be in-serted into partial phrases.Notice that the Predictor Step in particular assumes theavailability of the eat feature for top-down prediction.
Con-sequently, this algorithm applies only to PATR-II with acontext-free base.4.3 Remov ing  the  Context -F ree  Base: AnInadequate  Extens ionA first attempt at extending the algorithm to make use ofmorn than just a single atomic-valued cat feature {or lessif no .~u,'h feature is mandated} is to change the PredictorStep so that instead of checking the predicted rule for a left-hand side that matches its cat feature with the predictingsubphr,'~e, we require that the whole left.hand-side subdagunifies with the subphrase being predicted from.
Formally,we havePred ictor  step: For each item ending at i of the formih.
i. Xo --  a.Xj~, DI and each rule of the form (Xo"~.
E).
add an edge of the form \[i, i, X0 - -  .7, E l l  {X0 :D(Xj)II if the unification succeeds and this edge is notsubsumed by another edge.This step predicts top-down all rules whose left-handside matches the dag of some constituent bein 9 lookedfor.Completer  step: As before.Scanner  step: As before.\[\[owever.
this extension does not preserve termination.Consi,h,r a %ountin~' grammar that records in the dag thenumb,,r of terminals in the string, s.5' - -  T :<.~f) = a.T , - -  T: .4:(TIf) = {T:f f)..b'-- :i.A~G.SSimilar problems occur  in natural anguage grammars when keepingl ists of, say, subcategorized constituents or galm to be found.Initially, the ,.q -.- T rule will yield the edge\[0,0, Xo - - - ,  .Xt, x0 S\] 1 \[oo, T\] 1&:  I :  awhich in turn causes the Prediction step to give\[0, 0, Xo -'- .Xi,eat: T \]X0: I :  ~a\[ eat : T \]Xt :  f :  \ [ f :  ~ \ ]x,: feat a\]yielding in turn\[0, 0, .% -..X,,cat: T )Xo: f :  '~af eat : i .If t : f :  f :X, :  \[cat: A\]If: l\]\]and so forth ad infinitum.4.4 Remov ing  the Context - f ree  Base: AnAdequate  Extens ionWhat is needed is a way of ~forgetting" some of the structurewe are using for top-down prediction.
But this is just whatrestriction gives us, since a restricted ag always subsumesthe original, i.e.. it has strictly less information.
Takin~advantage of this properly, we can change the Predi,'ri~nStep to restrict the top-down infurulation bef~,re unif> in~ itinto the rule's dag.Pred ic tor  step: For each item ending at i of the f(~rmIh, i, .% - -  c,..Y~;L DI and each rule of the form,{.\'0 - -"t, E}, add an edge of the form ft. i..V0 --  .'~.
E u{D{Xi)I~4~}\] if the unification succeeds and this odge isnot subsumed by another edge.This step predicts top-do,,n flit rules ,'h,.~r lefl.ha,dside matrhes the restricted (lag of .~ott:e r,o.~tilttcol fitt-ing looked for.Completer  step: AS before.Se~m, er step: As before.150This algorithm on the previous grammar, using a restrictorthat allows through only the cat feature of a dag, operates a.sbefore, but predicts the first time around the more generaledge:\[0, o, Xo - -  .X,,cat: T \]X0: f :  ITi\[\]cat: TX, :  f :  i f :  l-if lA\]1Another round of prediction yields this same edge so theprocess terminates immediately, duck Because the predictededge is more general than {i.e., subsumes) all the infinitenutuber ,,f edges it replaced that were predicted under thenonterminating extension, it preserves completeness.
On theother hand.
because the predicted edge is not more generalthan the rule itself, it permits no constituents that violatethe constraints of the rule: therefore, it preserves correctness.Finally, because restriction has a finite range, the predictionstep can only occur a finite number of times before buildingan edge identical to one already built; therefore, it preservester,nination.5 Applications5.1  Some Examples  o f  the  Use  o f  the  A l -gor i thmThe alg.rithnl just described liras been imph,meuted and in-(',>rp()rat,,<l into the PATR-II Exp(,rinwntal Syst(,m at SRIItlt,.rnali(,)lal.
a gr:lmmar deveh)pment :m(l tt,~,ting envirt)n-m,.
))t fi,l' I ' \T IL I I  ~rammars writt(.u in Z(.t:llisl) for the Syrn-l)+)li('~ 3(;(ll).The following table gives s,)me data ~ugge~t.ive of the el'-feet of the restrictor on parsing etliciency, it shows the totalmlnlber (,f active and passive edges added to the <'hart forfive sent,,ncos of up to eleven words using four different re-strictors.
The first allowed only category information to be,ist,d in prodiction, thus generating th,, same l)eh:wi<)r .as theun<'xte:M('(} Earh,y's algorithl,,.
The  -,<'('(,n,{ a<{d,,,l su{w:tle-m+,rizati+.n i l l f-rr l lal ion in a<l(lili(,n t<)lh(,(-:H+,~<)ry: Theth i rda<hl-d lill.+r-gap +h,l.
'ndency infornlaliou a.s well ~,<+ Ihat the~:tp pr.lif<.rati<,n pr-hlem wa.s r<,m<)ved.
The lin:d restri<'torad,lo.I v<,rb form informati.n.
The last c<flutnn shows thep,,r('entag+, of edges that were elin,inated by using this finalrestrh-tor.Prediction %Sentence eat\] + s.bcat I + gap t ?
form elim.1 33 33 20 16 I 522 85 50 29 21 I 753 219 124 72 45 794 319 319 98 71 785 812 516 157  100 !i 88Several facts should be kept in mind about the dataabove.
First, for sentences with no Wh-movement or rel-ative clauses, no gaps were ever predicted.
In other words,the top-down filtering is in some sense maximal with re-spect to gap hypothesis.
Second, the subcategorization in-formation used in top-down filtering removed all hypothesesof constituents except for those directly subcategorized \[or.Finally, the grammar used contained constructs that wouldcause nontermination i the unrestricted extension of Ear-ley's algorithm.5 .2  Other  App l i ca t ions  o f  Rest r i c t ionThis technique of restriction of complex-feature structuresinto a finite set of equivalence cla~ses can be used for a widevariety of purposes.First.
parsing Mg<,rithnls uch ~ tile ;d~<)ve (:all be mod-ified for u~e by grain<nat (ortnalintus other than P.\TR-ll.In particular, definite-clause grammars are amenable to thistechnique, anti it <:an be IIsed to extend the Earley deduc-tion of Pereira and Warren \[i 1 I. Pereira has use<l a similartechnique to improve the ellh'iency of the BI 'P (bottom-up h,ft-corner) parser \[71 for DCC;.
I,F(; and t;PSC parserscan nlake use of the top-down fi lteringdevic,,a~wvll.
\[:f'(;p,'tl~ot'~ n | ight  be \ [mi l l  th;t l  d() l l(d. r<,<\[11il'i.
;+.
c<~llt+,,,;-l'ri,~.backl><.m,.?
";*'<'(rod.
rt,~ll'i<'ti(.ll <';tlt l)e llmt'+l If> ~'llh;lllt'+' ,+l h , ' r  I+;~l'>ill~,:dgor i thu ls .
Ig>r eX;lllll)le, tilt, ancillary fllllttic~ll to  c.tlq)uto1.1{ <'l.sure-- whMi.
like Ihe Earh,y alg-r i thm.. , i tht ,r  du.,.+not use feature information, or fails to terminate--,-an bemodified in the same way as the Ea.rh,y I)re<lict~r step to ter-nlinate while still using significant feature inf<,rmati(m. LRparsing techniques <'an therel+y I)e Ilsed f,,r ellicient par'dn~+J conll)h,x-fe:)+ture-lmn.,<l fiwnlalislun.
.\l,,r(' -,l)*','ulaliv+,ly.,'++cheme~.
l'(+r s,'hed.lin~ I,I{ l>:irnt.r:.-+ h~yi..hl l,;~r.,,.-, i. l>rvl "-or+,m-e ,~r+h'r t.i:~hl I., it,,,lilie~l fi,r .
',.mld.,x-f,,:lqur.-l,;r~.,,lfl)rlllaliP,.llln, a l ld  et,'cn t1111t,<\[ Iw lll+,:)+tln .d + lilt + l.(,,+.tl'ivt~+r.Finally, restriction can be ilsed ill are:~.s of i)arshlg oth+,rthan top-down prediction and liltering.
For inslance, inmany parsing schemes, edges are indexed by a categ<,ry sym-bol for elficient retrieval.
In the case of Earley's Mgorithm.active edges can be indexed bv the category of the ,'on-stituent following the dot in the dotted rule.
tlowever, thisagain forces the primacy and atomicity of major category in-formation.
Once again, restriction can be used to solve theproblem.
Indexing by the restriction of the dag associated151with the need p.grmits efficient retrieval that can be tuned tothe particular grammar, yet does not affect he completenessor correctness of the algorithm.
The indexing can be doneby discrimination nets, or specialized hashing functions akinto the partial-match retrieval techniques designed for use inProlog implementations \[16\].6 Conc lus ionWe have presented a general technique of restriction withmany applications in the area of manipulating complex-feature-based grammar formalisms.
As a particular exam-ple, we presented a complete, correct, terminating exten-sion of Earley's algorithm that uses restriction to performtop-down filtering.
Our implementation demonstrates thedrastic elimination of chart edges that can be achieved bythis technique.
Finally, we described further uses for thetechnique--including parsing other grammar formalisms, in-cluding definite-clause grammars; extending other parsingalgorithms, including LR methods and syntactic preferencemodeling algorithms; and efficient indexing.We feel that the restriction technique has great potentialto make increasingly powerful grammar formalisms compu-tationally feasible.References\[I\] Ades, A. E. and M. J. Steedman.
On theorder of words.Linguistics and Philosophy, 4(4):517-558, 1982.\[21 Ford, M., J. Bresnan, and R. Kaplan.
A competence-based theory of syntactic losure.
In J. Bresnan, editor,The Mental Representation of Grammatical Relations,MIT Press, Cambridge, Massachusetts, 1982.\[3\] Gawron, J. M., J.
King, J. Lamping, E. Loebner, E.A.
Paulson, G. K. Pullum, I.
A.
Sag, and T. Wasow.Processing English with a generalized phrase structuregrammar.
In Proeecdinos of the ~Oth Annual Meet-ing of the Association for Computational Linguistics,pages 74-81, University of Toronto.
Toronto, Ontario,Canada, 16-18 June 1982.\[41 Gazdar, G., E. Klein, G. K. Puilum, and I.
A. Sag.Generalized Phrase Structure Grammar.
BlackwellPublishing, Oxford, England, and Harvard UniversityPress, Cambridge, M~ssachusetts, 1985.\[51 Kaplan, R. and J. Bresnan.
Lexical-functional gram-mar: a formal system for grammatical representation.\[n J. Bresnan, editor, The Mental Representation o/Grammatical Relations, MIT Press, Cambridge, Mas-sachusetts, 1983.\[61 Kay, M. An algorithm for compiling parsing tables froma grammar.
1980.
Xerox Pale Alto Research Center.Pale Alto, California.\[7\] Matsumoto, Y., H. Tanaka, H. Hira'kawa.
II.
Miyoshi.and H. Yasukawa.
BUP: a bottom-up arser embed-dad in Prolog.
New Generation Computing, 1:145-158,1983.\[8\] Montague, R. The proper treatment of quantificationin ordinary English.
In R. H. Thomason.
editor.
FormalPhilosophy, pages 188-221, Yale University Press.
NewHaven, Connecticut, 1974.\[9\] Pereira, F. C. N. Logic for natural anguage anal.vsis.Technical Note 275, Artificial Intelligence Center, SRIInternational, Menlo Park, California, 1983.\[I0\] Pereira, F. C. N. and S. M. Shieber.
The semantics ofgrammar formalisms een as computer languages.
InProceedings of the Tenth International Conference onComputational Linguistics, Stanford University, Stan-ford, California, 2-7 July 198,t.\[11\] Pereira, F. C. N. and D. H. D. Warren.
Parsing asdeduction.
In Proceedinas o/ the elst Annual Meet-inff of the Association for Computational Linguistics.pages 137-144, Massachusetts Institute of Technology..Cambridge, Massachusetts, 15-17 June 1983.\[12\] Shieber, S. M. Criteria for designing computer facilitiesfor linguistic analysis.
To appear in Linguistics.\[13\] Shieber, S. M. The design of a computer languagefor linguistic information.
In Proceedings of the TenthInternational Conference on Computational Lingui,s-ties, Stanford University, Stanford.
California.
2-7 July1984.\[14\] Shieber, S. M. Sentence disambiguation by a shift-reduce parsing technique.
\[n Proceedinqs of the ~l.~tAnnual Martin O of the Association for ComputationalLinguistics, pages 1i5--118, Massachusetts Institute ofTechnology, Cambridge, Massachusetts, 15-17 June1983.\[15\] Shieber, S. M., H. Uszkoreit, F. C. N. Pereira, J. J.Robinson, and M. Tyson.
The formalism and im-plementation of PATR-II.
In Re,earth on InteractiveAcquisition and Use of Knowledge, SRI International.Menio Park, California, 1983.\[16\] Wise, M. J. and D. M. W, Powors.
Indexing Prol.gclauses via superimposed code words and lield encodedwords.
In Pvoeeedincs of the 198. i International Svm.posture on Logic Prowammin?, pages 203-210, IEEEComputer Society Press, Atlantic City, New Jersey, 6-9February 1984.152
