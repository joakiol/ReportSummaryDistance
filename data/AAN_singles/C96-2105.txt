Parallel Replacement in Finite State CalculusAndr6  Kempe and  Laur i  Kar t tunenRank Xerox Research Centre - Grenoble Laboratory6, chemin de Maupertuis  -- 38240 Meylan - France{kempe, karttunen}~xerox, fr http ://www.
xerox, fr/grenoble/mlttAbstractThis paper extends the calculus of regular ex-pressions with new types of replacement ex-pressions that enhance the expressiveness ofthe simple replace operator defined in Kart-tunen (1995).
Parallel replacement allowsmultiple replacements to apply simultaneouslyto the same input without interfering witheach other.
We also allow a replacement tobe constrained by any number of alternativecontexts.
With these enhancements, the gen-eral replacement expressions are more versa-tile than two-level rules for the description ofcomplex morphological lternations.1 Introduct ionA replacement expression specifies that a givensymbol or a sequence of symbols hould be replacedby another one in a certain context or contexts.Phonological rewrite-rules (Kaplan and Kay, 1994),two-level rules (Koskenniemi 1983), syntactic dis-arnbiguation rules (Kar\]sson et al1994, Kosken-niemi, Tapanainen, and Voutilainen 1992), andpart-of-speech assignment rules (Brill 1992, Rocheand Schabes 1995) are examples of replacement incontext of finite-state grammars.Kaplan and Kay (1994) describe a generalmethod representing a replacement procedure asfinite-state transduction.
Karttunen (1995) takes asomewhat simpler approach by introducing to thecalculus of regular expression a replacement opera-tor that is defined just in terms of the other regularexpression operators.
We follow here the latter ap-proach.In the regular expression calculus, the replace-ment operator, ->, is similar to crossproduct, inthat a replacement expression describes a rela-tion between two simple regular languages.
Con-sequently, regular expresmons can be convenientlycombined with other kinds of coperations, uch ascomposition and union to form complex expres-sions.A replacement relation consists of pairs of stringsthat are related to one another in the mannersketched below:x u.~ y, u~ z upper string \[1\]x 1~ y 1~ z lower stringWe use u i and u~ to represent instances of Ui (withi C \[1, n\])and 1~ and 1~ to represent instances of Li.The upper string contains zero or more instances ofUi, possibly interspersed with other material (de-noted here by x, y, and z).
In the correspondinglower string the sections corresponding to Ui are in-stances of Li, and the intervening material remainsthe same (Karttunen, 1995).The -> operator makes the replacement obliga-tory, (->) makes it optional.
For the sake of com-pleteness, we also define the inverse operators, <-and (<-), and the bidirectional variants, <-> and(<->).We have incorporated the new replacement ex-pressions into our implementation of the finite-state calculus (Kempe and Karttunen, 1995).Thus, we can construct ransducers directly fromreplacement expressions as part of the general cal-cnlus, without invoking any special rule compiler.1.1 S imple regu lar  express ionsThe table below describes the types of regular ex-pressions and special symbols that are used to de-fine the replacement operators.
(h) option, \[ h I 0 \] \[2\]h* Kleene starh+ Kleene plush/B ignore (A possibly interspersed withstrings from B)"h colnplement (negation)$h contains (at least one) Ah B concatenationh I B unionh g~ t3 intersectionh - B relative complement (minus)h .x.
B crossproduct (Cartesian product)h .o.
13 composition0 or \[ J epsilon (the empty string)\[.
.\] affects empty string replacement (see.
2.2)?
any symbol?
* the universal ("sigma-star") language(contains MI possible strings of any lengthincluding the empty string).#.
string beginldng or end (see.
2.1)Note that expressions that contain the cross-product ( .x . )
or the composition ( o .
.
.)
opera-tot, describe regular relations rather than regularhmguages.
A regular relation is a mapping fromone regular language to another one.
t{egular lan-guages correspond to simple finite-state automata;regular elations are modelled by finite-state trans-ducers.In the relation A .x.
B, we call the first lnern-ber, h, the upper  language and the second mem-ber, B, the lower language.
This choice of wordsis motivated by the linguistic tradition of writ-ing the result of a rule application underneaththe original form.
In a cascade of compdsitions,I~3..o.
1~2 .
.
.
.
o. Rn, which models a linguisticderivation by rewrite-rules, the upper side of thefirst relation, R1, contains the "underlying lexical622form", while the lower side of the last relation, Rn,contains the resulting "surface form".We recognize two kinds of symbols: simple sym-bols (a, b, c, etc.)
and fst p'drs)ai (a:b, y:z,  etc.
).An Nt pair a : b can be thought of as tim crossprod-uct of a and b, the minimal relation consisting of a(the upper syml)ol) and b (the lower symbol).2 Para l le l  ReplacementConditional parallel replacement denotes a relationwhich maps a set of n expressions Ui (i E \[1, n\]) inthe upper language into a set of corr~;sponding nexpressions Li in the lower language if, and only if,they occur between a Left and a right context (ll,ri ).
{ U~ -> L ,  I I  l~ _ r ,  } .
.
.
.
\[3\].
.
.
.
{ U,~ -> L,~ II l~_ rn }Unconditiomd parallel replacement denotes asimilar relation where the replacement is not con-straint by contexts.Conditional parallel replacement corresponds towhat Kaplan and Kay 0994) call "batch rules"where a. set of rules (replacements.
.)
is collected to-gel;her m a batch and performed m parallel, at thesame time, in a way that all of them work on thesame input, i.e.
not one applies to the output ofanother eplacement.2 .1 ExamplesRegular expressions based on \[3\] can be abbrevi-ated if some of the Ut 1 EIt-I,OWF, I{ pairs, and/orsome of the LEI.
'T-I{IGIIT pairs, are equivalent.
Thecomplex expression:{ a -> b , b -> c I I  x _ y } ; \[4\]which contains multiple replacement in one left andright context, can be written in a more elementaryway as two parallel replacements:{ a ->  b I I  x _ y } ,{  b ->  c I I  x _ y } ; \ [5 \ ]c Ya ?
( XFigure 1: Transducer encoding \[4\] ~rnd \[5\] (Every arcwith more than one label actually stands for a set ofarcs with one label each.
)Figure 1 shows the state diagram of a trans-ducer resulting from \[4\] or \[5\].
'Fhe transducermaps the string xaxayby to xaxbyby following thepath 0 -1 -2 -1 -3 -0 -0 -0  and the string xbybyxa toxcybyxa following the path 0 -1 -3 -0 -0 -0 -1 -2 .The complex expression{ a -> b , b ->  c I I x _ y , v _ w } , \[6\]{ a ->  c \ [ I  p - q } ;contains five single parallel replacements:{ a ->  b I I x _ y } , \[7\]{ a -> b II v.~w } ,{b->c  II x_y}  ,{b->c II v_w} ,{ a -> c I I  p -q  } ;Contexts can be unspecified as in{ a ->b I I  x _y  , v_  , _w  } ; \[8\]where a is replaced by b only when occuriug be-tween x and y, or after v, or before w.An unspecitied context is equivalent o ?% theuniversal (sigma-star) language.
Similarly, a spec-itied context, such as x _ y, is actually interpretedas ?
* x _ y ?
*, that is, implicitly extending thecontext o infinity on both sides of the replacement.
'l'his is a useful convention, but we also need to beable to refer explicitly to the beginning or the endof a string.
For this purpose, we introduce a specialsymbol, .#.
(Kaplan and Kay, 1994, p. 349).In the example{ a ->  b I I  .# .
-  , v _ 7 ?
.# ,}  ; \[9\]a is replaced by b only when it is at the beginningof a string or/)etween v and the two tinal symbolsof a string I.2 .2 ReI) la( 'ement of  the Empty  St r ingThe language described by the UI)PER \[)art of areplacement expression 2UPPER ->  LOWER I I LEFT _ RIVET \[10\]can contain the empty string e. In this case, everystring that is in the upper-side language of the re-lation, is mapped to an infinite set of strings in thelower-side language as the upper-side string can beconsidered as a concatenation of empty and non-empty substrings, with e at any position and inany number.
E.g.~*-> ~ II - ;  \[11\]maps the string bb to the infinite set of strings bb,xbb, xbxb, xbxbx, xxbb, etc., since the languagedescribed by a* contains e, and the string bb canbe considered as a result of any one of the concate-nations b~b, e~'b~b, e~'b~b,  ~b~e.~b~c,~e~b~b,  etc.For many practical )urposes it is convenient toconstruct a version of empty-string replacementthat allows only one application between any twoadjacent symbols (Karttunen, 1995).
In order notto confllse the notation by a non-standard interpre-tation of the notion of empty string, we introduce aspecial pair of brackets, \[.
.
\],  placed around the1Note that  .#.
denotes the 1)eginning or the end of astr ing depending on whether  it occurs in the left or the r ightcontext.2We descr ibe this topic only for uni -d ireet ional  rep!.ace-merit f rom the upper  to the lower side of a regular  re lat ion,trot analogous ta tements  can be made for all o ther  types ofrep lacement  ment ioned in section 3.523upper side of a replacement expression that presup-poses a strict alternation of empty substrings andnon-empty substrings of exactly one symbol:e x e y e z e .
.
.
\[12\]In applying this to the above example, we obtain\[.
a* .1 -> x II - ; \[13\]that maps the string bb on ly  to xbxbx since bb ishere considered exclusively as a result of the con-catenation c .~b~?~b~.If contexts are specified (in opposition to theabove example) then they are taken into account.2 .3  The  A lgor i thm2.3.1 Aux i l i a ry  BracketsThe replacement of one substring by another oneinside a context, requires the introduction of aux-iliary symbols (e.g.
brackets).
Kaplan and Kay(1994) motivate this step.If we would use an expression like1, \[Ui .
x .
L i \ ]  ri \[14\]to map.
a particular Ui (i E .\[1, n\]) to l,i when oc-curing between a left and a right context, li and ri,then every li and ri would map substring adjacentto Ui.However, this approach is impossible for the fol-lowing reason (Kaplan and Kay, 1994): In an ex-ample like{ a ->  b I I  x _ x } ; \ [15\]where we expect xaxax to be replaced by xbxbx,the middle x serves as a context for both a's.
Arelation described by \[14\] could not accomplish this.The middle x would be mapped either by an ri orby an li but not by both at the same time.
That iswhy only one a could be replaced and we would gettwo alternative lower strings, xbxax and xaxbx.Therefore, we have to use the contexts, li and ri,without mapping them.
For this purpose we intro-duce auxiliary brackets <i after every left contextli and >i before every right context ri.
The re-placement maps those brackets without looking atthe actual contexts.We need separate brackets for empty and non-empty UPPER.
If we used the same bracket for boththis would mean an overlap of the substrings toreplace in an example like X>l<la>l .
Here wemight have to replace >1<1 and < la>l  where <1is part of both substrings.
Because of this overlap,we could not replace both substrings in parallel, i.e.at the same time.
To make the two replacementssequentially is also impossible in either order, forreasons in detail explained in (Kempe and Kart-tunen, 1995).A regular elation describing replacement in con-text (and a transducer that represents it), is definedby the composition of a set of "simpler" auxiliaryrelations.
Context brackets occur only in interme-diate relations and are not present in the final re-suit.2.3.2 P reparatory  S tepsBefore tile replacement we make the following threetransformations:(1) Complex regular expressions like \[4\] aretransformed into elementary ones like \[5\], where ev-ery single replacement consists of only one UI-'I~ER,one LOWER, one LEI?T and one RIGHT expression.E.g.
{ \ [ .
(a ) .
\ ]  -> b II x_  y } ,{ \[ \] -> c , e -> f II v _ ~ } ; \[16\]would be expanded to{ \ [ .
(a ) .
\ ]  -> b l\[ x _ y } ,{ \ [ \ ] ->~ I I v_ .}
, \[lr\]{~->f II v_w} ;(2) Since we have to use different ypes of brack-ets for the replacement of empty and non-emptyUPPER (el.
2.3.1), we split the set of parallel re-placements into two groups, one containing onlyreplacements with empty UPPER and the other oneonly with non-empty UPPER.
If an UPPER containsthe empty string but is not identical with it, thereplacement will be added to both groups but witha different UPPER.
E.g.
\[\].7\] wouldbe split into{ a ->b II x_y}  ,{ e ->  f I I  v _  } ; \ [18\]the group of non-empty UPPER and{ \ [ .
.
\ ]  -> b II x_  y } ,{ \[ \] ->  e I I  v _ ~ } ; \ [19\]the group of empty UPPER.
(3) All empty UPPER of type \[ \] are trans-formed into type \[.
.\] and the correspondingLOWER are replaced by their Kleene star flmction.E.g.
\[19\] would be transformed into{ \ [ .
.
\ ]  ->b  II x_y  } ,{ \ [ .
.
\ ]  -> c* I I  v_  w } ; \ [20\]The following algorithm of conditional parallelreplacement will consider all empty UPPER as beingof type \[.
.
\], i.e.
as not being adjacent o anotherempty string.2.3.3 The  Rep lacement  i tse l fApart fi'om the previously explained symbols, wewill make use of the following symbols in the nextregular expressions: \[21\]<o, ,  \[ <,~ I...I <mE \], union of all left bracketsfor empty  UPPER.>~,~ \[ >~ I...I >r,~ \], union of all right bracketstor empty  UPPER.><,uE \[ <~uE I >~uE \]<~,~,~ \[ <l I...I <-  \], union of all left brackets fornon-empty  UPPER.>~,N,  \[ >1 I...I >., \], union of Ml right brackets fornon-empty  UPPER.
><alINEl<alNE\]>al~N \] \]<all <all14 <aliNE>all ~>allrg >aliNE.1 Ignore-inside operator.Example: abc./x = \[abc/x\] - \[x ?
*\]- \[?
* x\],inside the string abe, i.e_ laetween'a and band between b and c, alL x will be ignoredany number of times.624We compose the conditional parallel replacementof the six auxiliary relations described by Kaplanand Kay (1994) and Karttunen (1995) which are:(1)  InsertBrackets \[22\](2) ConstrainBrackets(3) LeftContext(4) RightContext(5) Replace(6) RemoveBracketsThe composition of these relations in the aboveorder, defines the npward-oriented replacement.The resulting transducer maps UPPER inside an irt-put string to LOWER: when UPl't,;I/, is between l,l~\]l,"\["and tlIGHT in the input context, leaving everythingelse unchanged.
Other wu:iants of the replacementopel:ator will be defined later.For every single replacement { Ui -> 1,i II liri } we introduce a separate pair of brackets <iand >i with i ?
\ [1E.. .mE\] if UPI'Et{ is identicalwith the empty string and i ff \[\]...n\] if UPPEI-t doesnot contain the empty string.
A left bracket <iindicates the end of a complete left context.
A rightbracket >i marks the beginning of a complete rightcontext.We define the component relations irl the fol-lowing way.
Note that UI'PI,\]R, LOW|!\]t{, I,I,;FT andIHGtIT (Ui, Li, li and ri) stand for regular expres-sions of any complexity but restricted to denoteregular languages.
Consequently, they are repre-sented by networks thai; contain no fst pairs.
(1)  I nser tBrackets\[ \] <- ><~u \[23\]The relation inserts instances of all brackets onthe lower side (everywhere and in any numl)er andorder).
(2)  Const ra inBraekets~$\[ >~tz~?
\[ >,,uN~," \] \] \[24\]"$\[  <,uF, \[ >,,, \] \]g ~$\[ <.rove \[ <,mzz I >~u \] \]The language does not apply to single bracketsbut to their types and allows them to be only inthe following order:>atlNt,7,* >a/IF,* <all/';* <aaNI,:* \[25\]The composition of the steps (1) and (2) invokesthis constraint, which is necessary for the tbllowingreasons:If we allowed sequences like <3 Ua <1>3 U1 >1we would have an overlap of the two substrin~s<a U3 >:l and <, U1 >1 which have to be replacea.Itere, either U1 or Ua could be replaced but notboth at the same time.If we permitted sequences like >11z<=<ll~' U2 >2we would also have an overlap of the two re-placements which means we could either replace<2 U2 >u or >lU<lle but not both.
(3) Le f tContext~ ~ .
.
.
e ~ \[26\]for a l l  i 6  \[lE...mE, 1...n\] , l i  =~$\[ - \ [h. l><au\]  (><.u-<O*  <, \]g~ ~$\[ \ [ l i .
l><~u\ ]  (><.
t , -  <i)* ~<i \]The constraint forces every instance of a leftbracket <i to be immediately preceded by tilt; cor-responding left context li and every instance of'li tobe immediately folk)wed by <i, ignoring all brack-ets that are different from <i irlbetween, and allbrackets .
.
.
.
.
(<i included.
? )
inside, .
Ii ( .
.
.
.
/.)
We ,separately.,.make the constraints Ai for every <i and li and thenintersect hem in order to get tim constraint for allleft brackets and contexts.
(4) R ightContexto,  ~ .
.
.
e, o,, \[27\]for a l l  i 6 \ [1E .
.
.mE,  l...n\] , pl =~$\[ >i (><~u - >i)* ~\[r i .
l><,u\]  \]g: ~$\[ ">/ (><aU -- >i)* \ [ r i .
l><,u\]  \]'l'he constraint relates instances of right brackets>i and of right contexts ri, attd is the mirror im-age of step (3).
We &;rive it from the left contextconstraint by reversing every right context r~, be-fore making the single constraints ,~i (not pi) andrevel:sing again the result after having intersectedall )h.(5) Rep laceEHn\ ] ,Ar  \[28\]'i'he relation mal)s every bracketed I.Jl'l'l,;I/,<i Ui >i for non-empty UI'PEI{ and >i<i for emptyUPPI)\]I/., to the corresponding bracketed LOWEll,<i Li >i, leaving everything else unchanged.i ' \] string not 'l'he term N" n \[28means a that doescontain ~my bracketed UPPEI{:.IV" = J~IE g...g #~mE g J~'l gO...g J~n \[29\]A particular bracketed empty UPPEll >i<i is ex-cluded l?om the correspondiug N (i ?
\[~Z,:, , lC\])byaV, = ~$\[>, \[><,a,,~ - >i - <i\]* <d \[30\]and a bracketed non-empty UPPER <i Ui >i is ex-cluded from the corresponding A// (i ?
\[1, n\]) by= ~$\[<~ \ [<~UN~, :  - <d* \[31\]UI ,/'><all \[>allNt,1 - >i\]* >i\]I he term T?m expression \[28\] abbrevmtes a re-lation that maps any bracketed -UPPER to the cor-responding bracketed I,OWER.
It is the union ot' allsingle TQ relations mapping all occurl:ences of oneUi (empty and non-empty) to the correspondingLi:T?
= "R.~r, I .
.
.
I "1"?,,~; I 7~ I .
.
.
I T?,, \[32\]The rep lacement  "/6i of  non-empty  UPPEILUi (i ?
\[1, n\]) is performed by:<i \[ \ [U~.Z><., , \ ] .x .
\ [L~.Z><~,\ ]  \] >?
\[33\]To illustrate this: Suppose we have a set of re-placements containing among othersa-> b II x_  y ; \[34:\]This particular eplacement is done by mapping in-side an input string every substring that looks like(underlined part) \[35\].
.
.
x  >2>l>IE<1N<2 <18->1 >2>IE<IE<I<2y.. .using the brackets <1 and >t to a substring (un-derlined part)625r,l~l?
.
.X  >2>1>lE<lE<2 <lb>l >2>1/~<1E<1<2~ ,'.vj.The rep lacement  T~i of empty  UPPER Ui(i 6 \[1E, mE\]) is performed by:\[ 0.x.
\[\[><au~ - < i \ ] I  d\[<aZZN~\]\] \]* \[37\]\ [> i .x .< i \ ]  \[ 0.x.\[Li .
l><~u\]\]  [< i .x .> i \ ]\[ 0.x.E\[><au~ - >i\] I E>~,INE\]\] *In the following example we replace the emptyU2E by L2E.
Suppose we have in total one replace-ment of non-empty UPPER and two of empty UP-PER, one of which is\ [ .
.
\ ]  -> b I I x_  y ; \[38\]This replacement is done by mapping inside astring every substring that looks like (underlinedpart).
.
.x  >1>1E >2E <2E <1E<1 y .
.
.
\[39\]using the brackets >2E<2E into a substring (un-derlined part).
.
.
x  >1>1.
I>1  I<1.
I<d* \[40\]<2Eb>2E\[>1 I>1~ \[<1~ I <2El* <1E<1 y .
.
.The occurrence of exactly one bracket pair >iEand <iE between a left and a right context, actuallycorresponds to the definition of a (single) emptystring expressed by \[.
.\] (ef.
sac.
2.2).The brackets \[>2E t >lE I <lE I <1\] and\[>1 \]>rE I <lE \] <2El in \[40\] are inserted on thelower side any number of times (including zero), i.e.they exist optionally, which makes them present ifchecking for the left or right context requires them,and absent if they are not allowed in this place.This set of brackets does not contain those onesused for the replacement, >i<i, because if we latercheck for them we do not want this check to be al-ways satisfied but only when the specified contextsare present, in order to be able to confirm or tocancel the replacement a posteriori.This set of optionally inserted brackets equallydoes not contain those which potentially could beused for the replacement of adjacent non-emptystrings, i.e.
>aUNE on the left and <aUNE on theright side of the expression.
Otherwise, checkinglater for the legitimacy of the adjacent replace-ments would no longer be possible.
(6) RemoveBrackets->  \[ \] \[41\]The relation eliminates from the lower-side lan-guage all brackets that appear on the upper side.3 Var iants  o f  Rep lacement3.1 App l i cat ion  of  context  constra intsWe distinguish four ways how context can constrainthe replacement.
The difference between them iswhere the left and the right contexts are expected,on the upper or on the lower side of the relation, i.e.LEFT and RIGHT contexts can be checked before orafter the replacement.We obtain these four different applications ofcontext constraints (denoted by I1, / / ,  \ \  andV)  by varying the order of the auxiliary rela-tions (steps (3) to (5)) described in section 2?3.3(cf.
\[221):(a) Upward-oriented{ U1 -> L1 II 11 _ ra } .
.
.
.
\[42\].
.
.
.
{ U .
-> L. II In _ r .
}?
.
.
Le f tContext  .o.
RightContext .o.
Replace?..
(b) Right-oriented{ U1 -> LI II h - r l  } .
.
.
.
\[43\]?
.
.R ighteontext  .o.
Replace .
o. LeftContext..
.
(c) Left-oriented{ vl -> L1 \ \  11 - ,'1 } .
.
.
.
\[44\]?..LeftContext .o.
Replace .o.
RightContext...(d) Downward-oriented{ /\]1 -> L1 \ /  11 _ r l  } .
.
.
.
\[45\]?
.
.Rep lace  .o.
LeftContext .o.
RightContext...The versions (a) to.
()c roughly, correspond tothe three alternative interpretations of phonolog-ical rewrite rules discussed in Kaplan and Kay(1994).
The upward-oriented version correspondsto the simultaneous rule application; the right- andleft-oriented versions can model rightward or left-ward iterating processes, such as vowel harmonyand assimilation.In the downward-oriented replacement the oper-ation is constrained by the lower (left and right)context.
Here the Ui get mapped to the corre-sponding L/ just in case they end up between l{and ri in the output string.3 .2  Inverse, b id i rect ional  and opt iona lrep lacementReplacement as described above, ->, maps everyU{ on the upper side unambiguously to the corre-sponding Li on the lower side but not vice versa.A L{ on the lower side gets mapped to Li or U{ onthe upper side.The inverse replacement, <-, maps unambigu-ously from the lower to the upper side only.
Thebidirectional replacement, <->, is unambiguous inboth directions.Replacements of all of these three types (direc-tions) can be optional, (->) (<-) (<->), i.e.
theyare either made or not.
We define such a relationby changing Af (the part not containing any brack-eted UPPER) in expression \[28\] into ?
* that acceptsevery substring:\[ ?
* ~\]* ?
* \[46\]Here an Ui is either mapped by the correspondingTQ contained in 7~ (cf.
\[32\]) and therefore replacedby Li, or it is mapped by ?
* and not replaced.4 A Pract i ca l  ApplicationIn this section we illustrate the usefulness of thereplace operator using a practical example.We show how a lexicon of French verbs ending in-it, inflected in the present tense subjunctive mood,can be derived from a lexicon containing the corre-sponding present indicative forms.
We assume herethat irregular verbs are encoded separately.It is often proposed that the present subjunctiveof- i t  verbs be derived, for the most basic case, from626a stem in -iss- (e.g.
: finir/finiss) rather than froma more general root (e.g.
: fin(i)) because once thisstern is assumed, the snbjunctive ending itself be-comes completely regular:(that l finish) (that I run)que je flniss-c que je cour-eque tu finiss-cs quc tu cour-esque ils flniss-ent qucils cour-en*'\]?he algorithm we propose },ere, is strMghtfor-ward: We first derive the present subjunctive stemfrom the third person plural t)resent indicative(e.g'...fini~%'~ cour), then append the suffix corre-sponding to the given person and number.The first step can be described as follows:def ine LETTER : \[47\]a I b I c I d I .
.
.
.
;define TAG : \[48\]SubjPI .
.
.
I sGI .
.
.
IPal .
.
.
IVerbl .
.
.
;def ine StemRegular : \[49\]\[ \ [ .
.
\ ]  <-> IndP PL P3 Verb \[\[ LETTER _ TAG \].o .\[ Lex Ind  TAG+ \]?o.\[ e n t <-> SUFF  1\] _ TAG \] ;The first transducer in \[49\] inserts the tags of thethird person plural present indicative between theword and the tags of the actually required subjunc-tive form.
The second transducer in\[49\] which is anindicative lexicon of -Jr verbs, concatenated with asequence of at least one tag, provides the indica-tive form and keeps the initial subjunctive tags.The last transducer in \[49\] replaces the suffix -cutby the symbol SUFF.
E.g.
:in i r  .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
SubjP PL P2 Verbf in i r  _ IndP PL P3_Verb Sub jP  PL_P2 Verbf in i ssent  .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
SubjP PL_P2 Verbfinis s_SUFF ............. Subj P_PL_P2_Verb'I?o append the appropriate suffix to the subjunc-tive stem, we use the following transducer whichmaps the symbol SUFF to a suffix and deletes alltags: \[50\]def ine Suff ix  :\[ { SUFF -> e II _ TAG* SG \[PIIP3\] },{ SUFF -> e s 11 _ TAG* SG P2 },{ SUFF -> i o n s II _ TAG* PL P1 },{ SUFF -> i e z I I _ TAG* PL P2 },{ SUFF -> e n t It _ TAG* PL P3 } \].o .\[ TAG -> \[ \] \] ;The complete generation of subjunctive forms canbe described by the composition:def ine  LexSnb jP  : \[51\]StemRegu lar  .o .
Suf f ix  ;The resulting (single) transducer LexSubjP rep-resents a lexicon of present subjunctive forms ofFrench verbs ending in -iv.
It maps the infinitive ofthose verbs followed by a sequence of subjunctivetags, to the corresponding inflected surface formand vice versa.All intermediate transducers mentioned in thissection will contribute to this finM t, ransducer bntwill themselves disappear.The regular expressions in this section could alsobe written in the two-level formalism (Kosken-niemi, 1983).
However, some of them can be ex-pressed more conveniently in the above way, espe--ciMly when tile replace operator is used.E.g., the first line of \[49\], written above as:\ [ .
.
\ ]  <-> IndP  PL P3 Verb I I LETTER _ TAG \[52\]would have to be expressed in the two-level formal-ism by four rules:O: IndP  <=> LETTER _ ( :PL ) ( :P3) ( :Verb)  TAG; \[53\]O:PL <=> LETTER ( : IndP)  _ ( :P3) ( :Verb)  TAG;O:P3 <=> LETTER ( : IndP) ( :PL )  _ ( :Verb)  TAG;0 :Verb  <=> LETTER ( : IndP)  ( :PL )  ( :P3)  TAG ;IIere, the difficulty comes not only from the largenmnber of rules we would have to write in the aboveexample, but also from the fact that writing one oflihese rules requires to have in mind all the others,to avoid inconsistencies between them.AcknowledgementsThis work builds on the research by Ronald Kaplanand Martin Kay on the finite-state calculus and theimplementation of phonological rewrite rules (1994).Many thanks to our collegues at PARC and RXR.CGrenoble who helped us in whatever espect, partic-ularly to Annie Zaenen, Jean-Pierre Chanod, MarcDymetman, Kenneth Beesley and Anne Schiller h)rhelpfifl discussion on different topics, and to IreneMaxwell for correcting the paper.ReferencesBrill, Eric (1992).
A Simple Rule-Based Part of SpeechTagger.
I?oc.
3rd conference on Applied NaturalLanguage Processing.
'lYento, Italy, pp.
1152-155.Kaplan, Ronald M., and Kay, Martin (1981).
Phono-logical Rules and Finite-State Transducers.
AtmmdMeeting of the Linguistic Society of America.
NewYork.l(aplan, R,onald M. and Kay, Martin (1994).
RegularModels of Phonological Rule Systems.
ComputationalLinguistics.
20:3, pp.
331-378.Karlsson, Fred, Voutilainei,, Atro, Heikkil?, Juha,and Anttila, Arto (1994).
Constraint Grammar:a Language-Independent System for Parsing Unre-stricted Text.
Mouton de Gruyter, Berlin.Karttunen, Lauri (1995).
The Replace Operator.
Prec.ACL-95.
Cambridge, MA, USA.
crap-lg/9504032Kempe, Andre and Karttunen, Lauri (1995).
The Par-allel Replacement Operation in Finite State Calculus.Technical Report MLTT-021.
Rank Xerox ResearchCentre, Grenoble Laboratory.
Dec 21, 11995.ht t  p ://Www.
xerox ,  f r /g renob le /ml t t / repo  r t  s /home,  h t ra lKoskenniemi, Kimmo (1983).
Two-Level Morphol-ogy: A General Computational Model for Word-FormRecognition and Production.
Dept.
of General Lin-guistics.
University of Helsinki.Koskcnniemi, Kimmo (1990).
Finite-State Parsing andl)isambiguation.
Prec.
Coling-90.
Helsinki, Finland.Koskenniemi, Kimmo, 'l'apanainen, Pasi, and Vouti-lainen, Atro (1992).
Compiling and using finite-statesyntactic rules.
Proc.
Coling-92.
Nantes, France.Roche, Emmanuel and Schabes, Yves (1995).
De-terministic Part-of-Speech Tagging with Finite-StateTransducers.
Computational Linguistics.
21, 2, pp.227-53.Voutilainen, Atro (1994).
Three Studies o\] Grammar-Based Surface Parsing of Unrestricted English ~l~xt.The University of Helsinki.627
