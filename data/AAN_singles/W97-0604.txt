An Object-Oriented Model for the Design of Cross-DomainDialogue SystemsI an  M.  O 'Ne i l l  and Michae l  F .
McTearSchool of In format ion and Software EngineeringUnivers i ty  of UlsterShore RoadNewtownabbeyBT37 0QB,  N. I re landmf .mctearQuls t .ac .ukAbst rac tOur approach to speech-based ialoguemodelling aims to exploit, in the contextof an object-oriented architecture, dialogueprocessing abilities that are common tomany application domains.
The codedobjects that comprise the system contrib-ute both recognition rules and processingrules (heuristics).
A Domain Spotter sup-ports the ability to move between domainsand between individual skillsets.
A Dia-logue Model records individual conceptsas they occur; notes the extent to whichconcepts have been confirmed; populatesrequest templates; and fulfils a remem-bering and reminding role as the systemattempts to gather coherent informationfrom an imperfect speech recognition com-ponent.
Our work will aim to confirm theextent to which the potential strengths ofan object-oriented-paradigm (system ex-tensibility, component reuse, etc.)
can berealised in a natural anguage dialogue sys-tem, and the extent to which a function-ally rich suite of collaborating and inherit-ing objects can support purposeful human-computer conversations that are adaptablein structure, and wide ranging in subjectmatter and skillsets.1 IntroductionThe system we propose addresses two key issuesthat face developers of speech-based natural lan-guage dialogue systems.
Firstly, how can developersexploit the commonality that exists between differ-ent application domains - to make the developmenttask easier on the one hand, and on the other handto make systems as computationally efficient andas functionally wide-ranging as possible?
Secondly,given the current inaccuracies of speech recogni-tion, how can developers implement domain inde-pendent strategies for limiting the damage causedby misrecognition, while at the same time main-raining an apparently natural conversational flowbetween system and user?
An object-oriented devel-opment paradigm offers valuable insights into howthese challenges might be addressed.
In this re-spect the current approach builds on previous workinvolving an object-oriented approach to dialoguemanagement (Sparks, Meiskey & Brunner, 1994),in which the main system components might be re-garded as forming a developer's toolkit.
We envis-age system components that draw on the strengthof an object-oriented architecture.
Inheritance andassociation relationships will be used to ensure thatgeneric functionality which can be shared by morespecialised system components need be defined onlyonce and can be introduced into the dialogue flow,in real time, as and when required.Based on the notion of an evolving, multi-layereddialogue model (McGlashan, 1996), our systemdesign includes a number of dialogue model classes(collectively the Dialogue Model) whose role it is torecord each concept (a booking request, for example)as it is identified; to monitor and guide the processby which concept's attributes (destination, depar-ture time, etc.)
are confirmed or assumed; and topopulate a request emplate that will ultimately beused in database accesses.Central to our project is a notion of discrete, re-usable system components, ome of which are in-tended to work collaboratively in software mechan-isms, some to provide generic functionality that canbe tailored or augmented to suit particular applica-tions.
Identifying and exploiting areas of common-ality and specialisation between different processing25domains promises rich rewards.
We have been in-spired to some extent by the premise that everyday,person-to-person dialogues (whether it is a bookingclerk at a theatre responding to a customer's enquir-ies, or a teacher helping a pupil with a mathemat-ics problem) are in some sense 'scripted'.
Previousexperience of a situation, or explicit tutoring in aparticular task, means that real-life dialogues oftenconsist of elements that have been rehearsed, and aretherefore predictable.
However, as in natural humanspeech, the system must recognise and accommodatespontaneous shifts from one script to another, andbe able to cope with changes in the detailed contentand structure of a script in different circumstances.To make three broad distinctions, one may viewthese 'set pieces' as occurring at a meta-level, a do-main level and a skill level - and these levels arereflected in the system architecture we are evolving.At a meta-level, for example, people tend to recog-nise cues for taking, relinquishing or continuing adialogue turn; at a domain level, someone wantingto reserve a ticket for a show broadly knows the sortsof questions they can ask at the theatre booking of-fice and the sorts of answer they are likely to re-ceive; at a skill level, people generally know how todo conversions between dates on the one hand anddays of the week or duration on the other.
We haveendeavoured to identify some of these set pieces attheir different dialogue levels, with a view to creat-ing classes that encapsulate the meta-dialogue be-haviour that is common to the great majority ofinteractions (and which is represented in our gen-eric Dialogue Intention class), the business domainexpertise that in human terms distinguishes pro-fessionals in one field from those in another (ourBusiness Expert classes), and the individual skillslike handling dates and numbers, that are used inmany different business domains (our Skill Expertclasses).
In general terms, adherence to best practicein object-oriented development offers the prospect ofsystems that can be readily extended and custom-ised, in building block fashion.
More significantly,though, it is our intention to use our suite of classesin implementations that support highly complex in-teractions with the user: a single dialogue may rangeover several business domains, each of which mayuse several distinct skill sets.
The system has theintelligence to decide, in real time, which businessexpertise and which skillsets are required to pursuethe user's enquiries, and calls upon the services ofthe appropriate coded objects.To give a flavour of our system's architecture, weinclude outline descriptions of some of its most im-portant classes: Dialogue Manager; Dialogue Inten-tion; Find Enquiry Type; and Domain Expert.
Thepreliminary class relationship model (see Figure 1)further sets these classes in context - the model usesa simplified version of the Booch notation (Booch,1994).2 Dialogue Manager?
The Dialogue Manager is responsible for theoverall control of interaction between the sys-tem and the user, and between the main sys-tem subcomponents - which in broad terms in-clude Corns facilities, Generate Speech facilities,the enquiry processing objects, and the systemDatabase.?
The Dialogue Manager is responsible for select-ing the current Dialogue Intention, of whichthere are several subclasses.
By default theDialogue Manager pursues a sequence of dia-logue intentions that is typical of the major-ity of dialogue domains: the system greets theuser; determines the nature of the user's en-quiry; gathers the data necessary for the suc-cessful answering of the enquiry; handles any(database) transactions associated with the en-quiry; checks if the user has any further enquir-ies; and concludes the dialogue.?
It uses system resources to identify and respondappropriately to user interruptions.Dialogue IntentionDialogue Intention embodies generic function-ality for the furtherance of a dialogue.?
Dialogue Flow.
The Dialogue Intention classencapsulates a variety of approaches to phras-ing, rephrasing and personalising system utter-ances, with the aim of handling (in as natural amanner as possible) communication errors andprocessing delays.?
Use of Expertise/Skills.
Dialogue Intentionsmay themselves encapsulate heuristics that al-low them to instantiate a Dialogue Model (andby extension the associated Dialogue Objects,Discourse States and Request Templates) for re-latively high-level processing tasks (Greet, FindEnquiry Type, for example).
However, mostDialogue Intentions make use of the Skill andDomain Expert classes, whose heuristics per-mit rather more specialised enquiries involvingeither generic but complex skillsets (workingwith colours or gathering address information,for example) or specialised application domains326s~ ch,,niseriZflCSSF :I Domain  tEx~, t t  'I .
.
.
.
.
.
.
I. .
.
.
.
.
.
.i nher i tance  " ' association.
.
.
.
.
instanfiation ?
has 0 usingFigure 1: Class Relationship Model2746(organising travel itineraries, or booking theatretickets, for example).
Again these skills and ex-pertise subclasses provide the Dialogue Inten-tion subclass with the necessary heuristics toinstantiate a Dialogue Model.Find Enquiry TypeThe Find Enquiry Type class (a subclass of Dia-logue Intention) allows the Dialogue Manager,both to prompt the user into specifying thenature of his/her inquiry, and to interpret henature of a user's utterance when it receives anindication that the user has spoken unpromp-ted.The Find Enquiry Type class uses a DomainSpotter class to identify the Domain Expertthat is best suited to handling the enquiry.An appropriate Domain Expert is confirmedthrough the elaboration of an appropriate Dia-logue Model.
The Dialogue Manager suppliesthe Handle Enquiry dialogue intention with de-tails of the selected Domain Expert.Domain Expert?
Each Domain Expert class, regardless of thespecific domain its subclass addresses, typicallyprovides the following functionality:1.
Request emplate structure for the domain;2.
Enquiry processing algorithms for the do-main (typically IF...THEN...ELSE con-structs), including recommended use ofany Skills Expert, for specialised but non-domain-specific processing (e.g.
handlingcolours, times, etc.)3.
Word combinations (bigrams or trigrams)from the domain to extend the generic ap-abilities of the Recogniser Grammar.?
The Domain Expert is used to instantiate andevolve a related Dialogue Model.Dialogue Model: Dialogue Object,Discourse State, RequestTemplateThe Dialogue Model class is a containment classencompassing Dialogue Objects (semantic in-terpretations of user utterances in the light ofspecialist knowledge brought o bear by the ap-propriate Domain Expert); the Discourse State(which records the current status - confirmed,assumed, etc.
- of the parameters that applyto the Dialogue Objects) and the Request Tem-plate (which when fully populated isused by theHandle Transaction class - a database driver -to make a database access).The Dialogue Model evolves in a manner similarto that outlined by (McGlashan, 1996).
Con-firmation strategies are tailored to the partic-ular operating environment and the specialiseddomain.
They are recorded in the Dialogue In-tention class, or in the relevant Domain Expertsubclass.7 Conc lud ing  remarksA key aim of our work will be to ascertain if our suiteof objects (which in combination encompass dialogueskills from the generic to the highly specialised) canbe built into co-operative mechanisms in real timeto simulate realistically the richness, robustness andadaptability of natural human dialogue.
If this doesindeed prove to be the case, our dialogue model willhave attained its core communicative goal: morethan this, its object-oriented architecture will facilit-ate the work of the software ngineer by providing aset of discrete components hat can be easily reused,modified or extended in new dialogue systems.ReferencesG.
Booch.
1994.
Object-Oriented Analysis andDesign with Applications (2nd Edition}.
RedwoodCity, CA: Benjamin/Cummings.S.
MeGlashan.
1996.
Towards Multlmodal DialogueManagement.
In S. Luperfoy, A. Nijholt, and G.Veldhuijzen van Zanten, editors, Dialogue Man-agement in Natural Language Systems, Proceed-ings of the Twente Workshop on Language Tech-nology 11, Enschede: Universiteit Twente.R.
Sparks, L. Meiskey, and H. Brunner.
1994.
AnObject-Oriented Approach to Dialogue Manage-ment in Spoken Language Systems.
In HumanFactors in Computing Systems - CHI '94, NewYork: ACM, 211-217.28
