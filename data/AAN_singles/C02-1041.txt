Automatic Semantic Grouping in a Spoken Language User InterfaceToolkitHassan Alam, Hua Cheng, Rachmat Hartono, Aman Kumar, Paul Llido, Crystal Nakatsu, HuyNguyen, Fuad Rahman, Yuliya Tarnikova, Timotius Tjahjadi and Che WilcoxBCL Technologies Inc.Santa Clara, CA 95050 U.S.A.fuad@bcltechnologies.comAbstractWith the rapid growth of realapplication domains for NLP systems,there is a genuine demand for a generaltoolkit from which programmers with nolinguistic knowledge can build specificNLP systems.
Such a toolkit shouldprovide an interface to accept samplesentences and convert them intosemantic representations so as to allowprogrammers to map them to domainactions.
In order to reduce the workloadof managing a large number of semanticforms individually, the toolkit willperform what we call semantic groupingto organize the forms into meaningfulgroups.
In this paper, we present threesemantic grouping methods: similarity-based, verb-based and category-basedgrouping, and their implementation inthe SLUI toolkit.
We also discuss thepros and cons of each method and howthey can be utilized according to thedifferent domain needs.1 Introduction and MotivationWith the improvement of natural languageprocessing (NLP) and speech recognitiontechniques, spoken language will become theinput of choice for software user interfaces, asit is the most natural way of communication.
Inthe mean time, the domains for NLP systems,especially those handling speech input, havegrown rapidly in recent years.
However, mostcomputer programmers do not have enoughlinguistic knowledge to develop an NLPsystem to handle speech input.
There is agenuine demand for a general toolkit fromwhich programmers with no linguisticknowledge can rapidly build speech basedNLP systems to handle their domain specificproblems more accurately (Alam, 2000).
Thetoolkit will allow programmers to generateSpoken Language User Interface (SLUI) frontends for new and existing applications using,for example, a program-through-examplemethod.
In this methodology, the programmerwill specify a set of sample input sentences ora domain corpus for each task.
The toolkit willthen organize the sentences by meaning andeven generate a large set of syntactic variationsfor a given sentence.
It will also generate thecode that takes a user?s spoken request andexecutes a command on an application.
Thismethodology is similar to using a GUI toolkitto develop a graphical user interface so thatprogrammers can develop GUI withoutlearning graphics programming.
Currently thisis an active research area, and the present workis funded by the Advanced TechnologyProgram (ATP) of the National Institute ofStandards and Technology (NIST).In the program-through-example approach,the toolkit should provide an interface for theprogrammers to input domain specific corporaand then process the sentences into semanticrepresentations so as to capture the semanticmeanings of the sentences.
In a real worldapplication, this process results in a largenumber of semantic forms.
Since theprogrammers have to manually build the linksbetween these forms and their specific domainactions, they are likely to be overwhelmed bythe workload imposed by the large number ofindividual semantic forms.
In order tosignificantly reduce this workload, we canorganize these forms in such a way so that theprogrammers can manipulate them as groupsrather than as individual items.
This will speedup the generation process of the domainspecific SLUI system.
We call this process thesemantic grouping process.One straightforward way to group is toorganize different syntactic forms expressingthe same meaning together.
For example,(1.1) I want to buy this book online.
(1.2) Can I order this book online?
(1.3) How can I purchase this book online?
(1.4) What do I need to do to buy this bookonline?The semantic forms of the above sentencesmay not be the same, but the action theprogrammer has in mind in an e-businessdomain is more or less the same: to actuallybuy the book online.
In addition to the abovesentences, there are many variations that anend-user might use.
The embedded NLPsystem should be able to recognize thesimilarity among the variations so that theSLUI system can execute the same commandupon receiving the different queries.
Thisrequires a group to contain only sentences withthe same meaning.
However in realapplications, this might be difficult to achievebecause user requests often have slightdifferences in meaning.This difficulty motivates a different stylefor semantic grouping: organizing the semanticforms into groups so that those in the samegroup can be mapped roughly to the sameaction.
The action can be either a command,e.g., buy something, or concerning an object,e.g., different ways of gathering informationabout an object.
For example, sentence (1.5)would be grouped together with the aboveexample sentences because it poses the samerequest: buy books; and sentences (1.6) to (1.8)would be in one group because they are allabout price information.
(1.5) I want to buy the latest book about e-business.
(1.6) Please send me a price quote.
(1.7) What is the reseller price?
(1.8) Do you have any package pricing forpurchasing multiple products at once?This type of grouping is the focus of thispaper.
We propose three grouping methods:similarity-based grouping, verb-basedgrouping and category-based grouping.
Theprocess of grouping semantic forms is domaindependent and it is difficult to come up with agenerally applicable standard to judge whethera grouping is appropriate or not.
Differentgrouping techniques can give programmersdifferent views of their data in order to satisfydifferent goals.This paper is organized into 6 sections.
InSection 2, we briefly describe the system forwhich the grouping algorithms are proposedand implemented.
Section 3 presents the threegrouping methods in detail.
In Section 4, wedescribe how the algorithms are implementedin our system.
We test the methods using a seta sentences from our corpus and discuss thepros and cons of each method in Section 5.Finally, in Section 6, we draw conclusions andpropose some future work.2 SLUITKAs mentioned in the previous section, theSpoken Language User Interface Toolkit(SLUITK) allows programmers with nolinguistic knowledge to rapidly develop aspoken language user interface for theirapplications.
The toolkit should incorporatethe major components of an NLP frontend, such as a spell checker, a parser and asemantic representation generator.
Usingthe toolkit, a programmer will be able to createa system that incorporates complex NLPtechniques such as syntactic parsing andsemantic understanding.2.1 The Work FlowUsing an Automatic Speech Recognition(ASR) system, the SLUITK connects userinput to the application, allowing spokenlanguage control of the application.
TheSLUITK generates semantic representations ofeach input sentence.
We refer to each of thesesemantic representations as a frame, which isbasically a predicate-argument representationof a sentence.The SLUITK is implemented using thefollowing steps:1.
SLUITK begins to create a SLUI bygenerating semantic representations ofsample input sentences provided by theprogrammer.2.
These representations are expanded usingsynonym sets and other linguistic devices,and stored in a Semantic Frame Table(SFT).
The SFT becomes acomprehensive database of all thepossible commands a user could request asystem to do.
It has the same function asthe database of parallel translations in anExample-based machine translationsystem (Sumita and Iida, 1991).3.
The toolkit then creates methods forattaching the SLUI to the back endapplications.4.
When the SLUI enabled system isreleased, a user may enter an NLsentence, which is translated into asemantic frame by the system.
The SFT isthen searched for an equivalent frame.
If amatch is found, the action or commandlinked to this frame is executed.In a real application, a large number offrames might be generated from a domaincorpus.
The semantic grouper takes the set offrames as the input and outputs the sameframes organized in a logical manner.2.2 The CorpusWe use a corpus of email messages from ourcustomers for developing and testing thesystem.
These email messages containquestions, comments and general inquiriesregarding our document-conversion products.We modified the raw email programmaticallyto delete the attachments, HTML and othertags, headers and sender information.
Inaddition, we manually deleted salutations,greetings and any information that was notdirectly related to customer support.
Thecorpus contains around 34,640 lines and170,000 words.
We constantly update it withnew email from our customers.We randomly selected 150 sententialinquiries to motivate and test the semanticgrouping methods discussed in this paper.3 Semantic GroupingWe have mentioned in Section 1 that groupingsemantic frames is domain dependent.Grouping depends on the nature of theapplication and also the needs of the domainprogrammer.
Since this is a real worldproblem, we have to consider the efficiency ofgrouping.
It is not acceptable to let theprogrammer wait for hours to group one set ofsemantic forms.
The grouping should be fairlyfast, even on thousands of frames.These different considerations motivateseveral grouping methods: similarity-basedgrouping, verb-based grouping and category-based grouping.
In this section, we describeeach of these methods in detail.3.1 Similarity-based GroupingSimilarity-based grouping gathers sentenceswith similar meanings together, e.g., sentences(1.1) to (1.4).
There is a wide application forthis method.
For example, in open domainquestion-answering systems, questions need tobe reformulated so that they will matchpreviously posted questions and therefore usethe cached answers to speed up the process(Harabagiu et al, 2000).The question reformulation algorithm ofHarabagiu et al tries to capture the similarityof the meanings expressed by two sentences.For a given set of questions, the algorithmformulates a similarity matrix from whichreformulation classes can be built.
Each classrepresents a class of equivalent questions.The algorithm for measuring the similaritybetween two questions tries to find lexicalrelationships between every two questions thatdo not contain stop words.
The algorithmmakes use of the WordNet concept hierarchy(Fellbaum, 1998) to find synonym andhypernym relations between words.This algorithm does not infer informationabout the meanings of the questions, but ratheruses some kind of similarity measurement inorder to simulate the commonality in meaning.This is a simplified approach.
Using differentthreshold, they can achieve different degrees ofsimilarity, from almost identical to verydifferent.This method can be used for similarity-based grouping to capture the similarity inmeanings expressed by different sentences.3.2 Verb-based GroupingAmong the sentences normally used in the e-business domain, imperative sentences oftenappear in sub-domains dominated bycommand-and-control requests.
In such anapplication, the verb expresses the commandthat the user wants to execute and thereforeplays the most important role in the sentence.Based on this observation, a grouping can bebased on the verb or verb class only.
Forexample, sentences with buy or purchase etc.as the main verbs are classified into one groupwhereas those with download as the main verbare classified into a different group, even whenthe arguments of the verbs are the same.This is similar to sorting frames by theverb, taking into account simple verb synonyminformation.3.3 Category-based GroupingSince SLUITK is a generic toolkit whereas themotivation for grouping is applicationdependent, we need to know how theprogrammer wants the groups to be organized.We randomly selected 100 sentences from ourcorpus and asked two software engineers togroup them in a logical order.
They came upwith very different groups, but their thoughtsbehind the groups are more or less the same.This motivates the category-based grouping.This grouping method puts less emphasison each individual sentence, but tries tocapture the general characteristics of a givencorpus.
For example, we want to group by thecommands (e.g., buy) or objects (e.g., asoftware) the corpus is concerned with.
If akeyword of a category appears in a givensentence, we infer that sentence belongs to thecategory.
For example, sentences (1.6) to (1.8)will be grouped together because they allcontain the keyword price.These sentences will not be groupedtogether by the similarity-based methodbecause their similarity is not high enough, norby the verb-based method because the verbsare all different.4 Grouping in SLUITKBecause we cannot foresee the domain needsof the programmer, we implemented all threemethods in SLUITK so that the programmercan view their data in several different ways.The programmer is able to choose which typeof grouping scheme to implement.In the question reformulation algorithm of(Harabagiu, et al 2000), all words are treatedidentically in the question similaritymeasurement.
However, our intuition fromobserving the corpus is that the verb and theobject are more important than othercomponents of the sentence and thereforeshould be given more weight when measuringsimilarity.
In Section 4.1, we describe ourexperiment with the grouping parameters totest our intuition.4.1 Experimenting with ParametersWe think that there are two mainparameters affecting the grouping result: theweight of the syntactic components and thethreshold for the similarity measurement in thesimilarity-based method.
Using 100 sentencesfrom our corpus, we tried four different typesof weighting scheme and three thresholds withthe category-based methods.
Human judgmenton the generated groups confirmed ourintuition that the object plays the mostimportant role in grouping and the verb is thesecond most important.
The differences inthreshold did not seem to have a significanteffect on the similarity-based grouping.
Thisis probably due to the strict similaritymeasurement.This experiment gives us a relativelyoptimal weighting scheme and threshold forthe similarity-based grouping.One relevant issue concerns thesimplification of the semantic frames.
For asentence with multiple verbs, we can simplifythe frame based on the verbs used in thesentence.
The idea is that some verbs such asaction verbs are more interesting in the e-business domain than others, e.g., be and have.If we can identify such differences in the verbusage, we can simplify the semantic frames byonly keeping the interesting verb frames.
Forexample, in the following sentences, the verbbuy is more interesting than be and want, andthe generated semantic frames should containonly the frame for buy.
(4.1) Is it possible to buy this software online?
(4.2) I want to buy this software online.Figure 1: A screen shot of SLUITKWe make use of a list of stop-words from(Frakes, 1992) in order to distinguish betweeninteresting and uninteresting verbs.
We lookfor frames headed by stop-words and followsome heuristics to remove the sub-frame of thestop-word.
For example, if there is at least oneverb that is not a stop-word, we remove allother stop-words from the frame.
In thesentence [Is it possible to] buy the software inGermany?, be is a stop-word, so only theframe for buy is kept.
This process removes theredundant part of a frame so that the groupingalgorithm only considers the most importantpart of a frame.4.2 Implementation in SLUITKFigure 1 shows a screen shot of the interface ofthe SLUITK, which shows several groupedsemantic frames.
In this section, we give moredetail about the implementation of the threegrouping methods used in SLUITK.Similarity-based groupingSimilar to (Harabagiu, et al 2001), oursimilarity-based grouping algorithm calculatesthe similarity between every two frames in theinput collection.
If the similarity is above acertain threshold, the two frames areconsidered similar and therefore should begrouped together.
If two frames in twodifferent groups are similar, then the twogroups should be combined to a single group.The central issue here is how to measure thesimilarity between two frames.Since we have found that some syntacticcomponents are more important to groupingthan others, we use a weighted scheme tomeasure similarity.
For each frame, all words(except for stop-words) are extracted and usedfor similarity calculation.
We give differentweights to different sentence components.Since in an e-business domain, the verb andthe object of a sentence are usually moreimportant than other components because theyexpress the actions that the programmers wantto execute, or the objects for which they wantto get more information, the similarity of thesecomponents are emphasized through theweighting scheme.
The similarity score of twoframes is the summation of the weights of thematched words.There is a match between two words whenwe find a lexical relationship between them.We extend the method of (Harabagiu, et al2000) and define a lexical relationship betweentwo words W1 and W2 as in the following:Table 1 : Comparison of grouping methods1.
If W1 and W2 have a commonmorphological root.
Various stemmingpackages can be used for this purpose, forexample, Porter Stemmer (Porter, 1997).2.
If W1 and W2 are synonyms, i.e., W2 isin the WordNet synset of W1.3.
If the more abstract word is a WordNethypernym of the other.4.
If one word is the WordNet holonym ofthe other (signaling part of, member ofand substance of relations);5.
If W1 is the WordNet antonym of W2.Domain specific heuristics can also be usedto connect words.
For example, in the e-business domain, you and I can be treated asantonyms in the following sentences:(4.3) Can I buy this software?
(4.4) Do you sell this software?When none of the above is true, there is nolexical relation between two given words.Because the similarity-based groupingneeds to consult WordNet frequently forlexical relations, it becomes very slow for evena few hundred frames.
We have to change thealgorithm to speed up the process, as it is tooslow for real world applications.Instead of comparing every two frames, weput all the words from an existing grouptogether.
When a new frame is introduced, wecompare the words in this new frame with theword collection of each group.
The similarityscores are added up as before, but it needs tobe normalized over the number of words in thecollection.
When the similarity is above acertain threshold, the new frame is classified asa member of the group.
This significantlyreduces the comparison needed for classifyinga frame, and therefore reduces the number oftimes WordNet needs to be consulted.We compared this improved algorithm withthe original one on 30 handcrafted examples;the generated groups are very similar.Verb-based groupingThe verb-based grouping implementation isfairly straightforward and has been describedin Section 3.2.Category-base groupingFor the category-based method, we first countall the non stop-words in a given corpus andretrieve a set of most frequent words and theircorresponding word classes from the corpus.This process also makes use of the WordNetsynonym, hypernym, holonym and antonyminformation.
These word classes form thecategories of each group.
We then check theverbs and objects of each sentence to see ifthey match these words.
That is, if a categoryword or a lexically related word appears as theverb or the object of a sentence, the sentence isclassified as a member of that group.
Forexample, we can pick the most frequent 20words and divide the corpus into 21 groups,where the extra group contains all sentencesthat cannot be classified.
The programmer candecide the number of groups they want.
Thisgives the programmer more control over thegrouping result.5 DiscussionWe tested the three methods on 100 sentencesfrom our corpus.
We had 5 people evaluate thegenerated groups.
They all thought thatgrouping was a very useful feature of thetoolkit.
Based on their comments, wesummarize the pros and cons of each methodin Table 1.The similarity-based grouping produces alarge number of groups, most of which containonly one sentence.
This is because there areusually several unrelated words in eachsentence, which decreases the similarityscores.
In addition, using WordNet wesometimes miss the connections betweenlexical items.
The verb-based groupingSimilarity-based Verb-based Category-basedGroup Size small small largeNumber of Groups large large variableSpeed slow on large corpus fast slow on large corpusApplication general command-and-control only generalproduces slightly larger groups, but alsoproduces many single sentence groups.Another problem is that when sentencescontain only stop-word verbs, e.g., be, thegroup will look rather arbitrary.
For example, agroup of sentences with be as the main verbcan express completely different semanticmeanings.
The small group size is adisadvantage of both methods.
The number ofgroups of the category-based grouping canchange according to the user specification.
Ingeneral it produces less groups than the othermethods and the group size is much larger, butthe size becomes smaller for less frequentcategory words.Both the similarity-based and category-based grouping methods are slow because theyfrequently need to use WordNet to identifylexical relationships.
The verb-based method ismuch faster, which is the primary advantage ofthis method.The verb-based method should be used in acommand-and-control domain because itrequires at least one non stop-word verb in thesentence.
However, it will have a hard time ina domain that needs to handle questions.
Fromthe point of view of assigning a domainspecific action to a group, this grouping is thebest because each verb can be mapped to anaction.
Therefore, the programmer can link anaction to each group rather than to eachindividual frame.
When the group size isrelatively large, this can greatly reduce theworkload of the programmer.The category-based method produces abetter view of the data because the sentences ineach group seem to be consistent with thekeywords of the category.
The disadvantage isthat it is difficult to link a group to a singleaction, and the programmer might have to re-organize the groups during action assignment.The similarity-based method did notperform well on the testing corpus, but it mightwork better on a corpus containing severaldifferent expressions of the same semanticinformation.In summary, each method has itsadvantages and disadvantages.
The decision ofwhich one to choose depends mainly on theneeds of the domain programmer and thecomposition of the input corpus.6 Conclusions and Future WorkIn this paper we propose semantic grouping asa way to solve the problem of manipulatingsemantic frames in developing a generalSpoken Language User Interface Toolkit(SLUITK).
We introduced three methods forgrouping semantic frames generated by theNLP components of the toolkit.
We tested themethods and discussed the advantages anddisadvantages of each method.
Since thejudgment of the grouping result is applicationdependent, the methods co-exist in ourSLUITK to suit the requirement of differentapplications.Future work includes improving theefficiency and accuracy of the methods andtesting them on a larger corpus.ReferencesAlam H. (2000) Spoken Language GenericUser Interface (SLGUI).
Technical ReportAFRL-IF-RS-TR-2000-58, Air Force ResearchLaboratory, Rome.Fellbaum C. (1998) WordNet, AnElectronic Lexical Database, The MIT Press,Cambridge, Massachusetts.Frakes W. and Baeza-Yates R. (1992)Information Retrieval, Data Structures andAlgorithms, Prentice-Hall.HaraBagiu S. and Moldovan D. and PascaM.
and Mihalcea R. and Surdeanu M. andBunescu R. and Girju R. and Rus V. andMorarescu P. (2000) FALCON: BoostingKnowledge for Answer Engines, TREC 9.Porter M. (1997) An algorithm for suffixstripping, in Readings in InformationRetrieval, Karen Sparck Jones and Peter Willet(ed), San Francisco: Morgan Kaufmann.Sumita E. and Iida H. (1991) Experimentsand Prospects of Example-Based MachineTranslation.
In Proceedings of the AnnualMeeting of the Association for ComputationalLinguistics, pp.
185-192.
