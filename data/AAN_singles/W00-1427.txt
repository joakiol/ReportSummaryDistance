Robust ,  App l ied  Morpho log ica l  Generat ion  .
.
.
.
......... ..... .
_Guido  Minnen John  Car ro l l  Dar ren  PearceCognitive and Comput ing SciencesUniversity of SussexBrighton BN1 9QH, UK{fir stname, lastname }@cogs.
susx.
ac.
ukAbst ractIn practical natural language generation sys-tems it is often advantageous to have a separatecomponent that deals purely with morphologi-cal processing.
We present such a component: afast and robust morphological generator for En-glish based on finite-state techniques that gen-erates a word form given a specification of thelemma, part-of-speech, and the type of inflec-tion required.
We describe how this morpholog-ical generator is used in a prototype system forautomatic simplification of English newspapertext, and discuss practical morphological andorthographic ssues we have encountered in gen-eration of unrestricted text within this applica-tion.1 In t roduct ionMost approaches to natural anguage generation(NLG) ignore morphological variation duringword choice, postponing the computation of theactual word forms to be output to a final stage,sometimes termed 'linearisation'.
The advan-tage of this setup is that the syntactic/lexicalrealisation component does not have to considerall possible word forms corresponding to eachlemma (Shieber et al, 1990).
In practice, it isadvantageous to have morphological generationas a postprocessing component that is separatefrom the rest of the NLG system.
A benefitis that since there are no competing claims onthe representation framework from other typesof linguistic and non-linguistic knowledge, thedeveloper of the morphological generator is fl'eeto express morphological information in a per-spicuous and elegant manner.
A further bene-fit is that localising morphological knowledge ina single component facilitates more systematicand reliable updating.
From a software engi-neering perspective, modularisntion is likely toreduce system development costs and increasesystem reliability.
As an individual module,the morphological generator will be more easilyshareable between several different NLG appli-cations, and integrated into new ones.
Finally,such a generator can be used on its own in othertypes of applications that do not contain a stan-dard NLG syntactic/lexical realisation compo-nent, such as text simplification (see Section 3).In this paper we describe a fast and robustgenerator for the inflectional morphology of En-glish that generates a word form given a speci-fication of a lemma, a part-of-speech (PoS) la-bel, and an inflectional type.
The morphologi-cal generator was built using data from severallarge corpora and machine readable dictionar-ies.
It does not contain an explicit lexicon orword-list, but instead comprises a set of mor-phological generalisations together with a list ofexceptions for specific (irregular) word forms.This organisation into generalisations and ex-ceptions can save time and effort in system de-velopment since the addition of new vocabu-lary that has regular morphology does not re-quire any changes to the generator.
In addition,the generalisation-exception architecture can beused to specify--and also override--preferencesin cases where a lemma has more than one pos-sible surface word form given a particular inflec-tional type and PoS label.The generator is packaged up as a Unix 'fil-ter', making it easy to integrate into applica-tions.
It is based on efficient finite-state tech-niques, and is implemented using the widelyavailable Unix Flex utility (a reimplementationof the AT&T Unix Lex tool) (Levine et al,1992).
The generator is freely available to theNLG research comnmnity (see Section 5 below).The paper is structured ms follows.
Section 2describes the morphological generator and eval-201uates its accuracy.
Section 3 outlines how the (1) {h}+"s+s_.N"generator is put ..to use in.a prototy.p~.system for.:.
: ........... : .
: ~-.:=..
{a=e..tnxnfnp_~ord_:form (1, !~es"-) ).
; }automatic simplification of text, and discussesa number of practical morphological nd ortho-graphic issues that we have encountered.
Sec-tion 4 relates our work to that of others, and weconclude (Section 5) with directions for futurework.2 Morpho log ica l  Generat ion2.1 The  GeneratorThe morphological generator covers the produc-tive English affixes s for the plural form of nounsand the third person singular present tense ofverbs, and ed for the past tense, en for thepast participle, and ing for the present partici-ple forms of verbs.
1 The generator is imple-mented in Flex.The standard use of Flex is to construct'scanners', programs that recognise lexical pat-terns in text (Levine et al, 1992).
A Flexdescription--the high-level description of ascanner that Flex takes as input--consists of aset of 'rules': pairs of regular expression pat-terns (which Flex compiles into deterministicfinite-state automata (Aho et al, 1986)), andactions consisting of arbitrary C code.
Flex cre-ates as output a C program which at run-timescans a text looking for occurrences of the reg-ular expressions.
Whenever it finds one, it exe-cutes the corresponding C code.
Flex is part ofthe Berkeley Unix distribution and as a resultFlex programs are very portable.
The standardversion of Flex works with any ISO-8559 char-acter set; Unicode support is also available.The morphological generator expects to re-ceive as input a sequence of tokens of the formlemma+inflection_label, where lemma specifiestim lemma of the word form to be generated,inflection specifies the type of inflection (i.e.
s,ed~ cn or ing), and label specifies the PoS of theword form.
The PoS labels follow the same pat-tern as in the Lancaster CLAWS tag sets (Gar-side et al, 1987; Burnard, 1995)~ with noun tagsstarting with N, etc.
The symbols + and _ aredelimiters.An example of a morphological generator ruleis given in (1).~\Ve do not currently cover comparative and superla-tive forms of adjectives or adverbs ince their productiv-ity is much less predictable.The left-hand side of the rule is a regular expres-sion.
The braces signify exactly one occurrenceof an element of the character set abbreviatedby the symbol h; we assume here that h abbre-viates the upper and lower case letters of the al-phabet.
The next symbol + specifies that there..... must.
be a..sequence of one or.=more characters,each belonging to the character set abbreviatedby h. Double quotes indicate literal charactersymbols.
The right-hand side of the rule givesthe C code to be executed when an input stringmatches the regular expression.
When the Flexrule matches the input address+s_N, for exam-ple, the C function np_word_.form (defined else-where in the generator) is called to determinethe word form corresponding to the input: thefunction deletes the inflection type and PoS la-bel specifications and the delimiters, removesthe last character of the lemma, and finally at-taches the characters es; the word form gener-ated is thus addresses.Of course not all plural noun inflections arecorrectly generated by the rule in (1) sincethere are many irregularities and subregular-ities.
These are dealt with using additional,more specific, rules.
The order in which theserules are applied to the input follows exactlythe order in which the rules appear in the Flexdescription.
This makes for a very simple andperspicuous way to express generalizations andexceptions.
For instance, the rule in (2) gener-ates the plural form of many English nouns thatoriginate from Latin, such as stimulus.
(2){return(np_word_form(2, "i") ) ; }With the input stimulus+s_N, the output isstimuli rather than the incorrect *stimulusesthat would follow from the application of themore general rule in (1).
By ensuring that thisrule precedes the rule in (1) in the description,nouns such as stimulus get the correct pluralform inflection.
Some other words in this class,though, do not have the Latinate plural form(e.g.
*boni as a plural form of bonus); in thesecases the generator contains rules specifying thecorrect forms as exceptions.2022.2 In f lect ional  P re ferencesThe rules constitutingthe g iaerator do not nec-essarily have to be mutually exclusive, so theycan be used to capture the inflectional morphol-ogy of lemmata that have more than one pos-sible inflected form given a specific PoS labeland inflectional type.
An example of this is themultiple inflections of the noun cactus, whichhas not only the Latinate plural form cacti butalso the English~ptura4.form.cactuses: , In addi-tion, inflections of some words differ accordingto dialect.
For example, the past participle formof the verb to bear is borne in British English,whereas in American English the preferred wordform is born.In cases where there is more than one possi-ble inflection for a particular input lemma, theorder of the rules in the Flex description de-termines the inflectional preference.
For exam-ple, with the noun cactus, the fact that the rulein (2) precedes the one in (1) causes the gener-ator to output the word form cacti rather thancactuses even though both rules are applicable.
2It is important o note, though, that the gen-erator will always choose between multiple in-flections: there is no way for it to output allpossible word forms for a particular input.
32.3 Consonant  Doub l ingAn important issue concerning morphologicalgeneration that is closely related to that ofinflectional preference is consonant doubling.This phenomenon, occurring mainly in BritishEnglish, involves the doubling of a consonantat the end of a lemma when the lemma is in-flected.
For example, the past tense/participleinflection of the verb to travel is travelled inBritish English, where the final consonant of thelemma is doubled before the suffix is attached.In American English the past tense/participleinflection of the verb to travel is usually spelttraveled.
Consonant doubling is triggered onthe basis of both orthographic and phonologi-cal information: when a word ends in one vowel-"Rule choice based on ordering in the description canin fact be overridden by arranging for the second or sub-sequent match to cover a larger part of the input so thatthe longest match heuristic applies (Levine et al, 1992).But note that the rules in (t) and (2) will always matchthe same input span.3Flex does not allow the use of rules that have iden-tical left-hand side regular expressions.followed by one consonant and the last part of..-: =the, word is stressedyin-general:.the ~eonsona, tis doubled (Procter, 1995).
However there areexceptions to this, and in any case the input tothe morphological generator does not containinformation about stress.Consider the Flex rule in (3), where the sym-bols C and V abbreviate the character sets con-sisting of (upper and lower case) consonants and.vowels,.
respectively.
(3) {A}*{C}{V}"t+ed_V ?
'{return(cb_wordf orm(O, '%", "ed" ) ) ; }Given the input submit+ed_ V this rule correctlygenerates ubmitted.
However, the verb to ex-hibit does not undergo consonant doubling sothis rule will generate, incorrectly, the wordform exhibitted.In order to ensure that the correct inflectionof a verb is generated, the morphological gener-ator uses a list of (around 1,100) lemmata thatallow consonant doubling, extracted automati-cally from the British National Corpus (BNC;Burnard, 1995).
The list is checked before in-flecting verbs.
Given the fact that there aremany more verbs that do not allow consonantdoubling, listing the verbs that do is the mosteconomic solution.
An added benefit is that if alemma does allow consonant doubling but is notincluded in the list then the word form gener-ated will still be correct with respect o Ameri-can English.2.4 Der iv ing the  GeneratorThe morphological generator comprises a set ofof approximately 1,650 rules expressing mor-phological regularities, ubregularities, and ex-ceptions for specific words; also around 350 linesof C/Flex code for program initialisation anddefining the functions called by the rule actions.The rule set is in fact obtained by automati-cally reversing a morphological analyser.
Thisis a much enhanced version of the analyser orig-inally developed for tile GATE system (Cun-ningham et al, 1996).
Minnen and Carroll (Un-der review) describe in detail how the reversal isperformed.
The generator executable occupiesaround 700Kb on disc.The analyser--and therefore the generator--includes exception lists derived from WordNet(version 1.5: Miller et al, 1993).
In addi-tion.
we have incorporated ata acquired semi-203automatically from the following corpora andmachine readable,dictionaries: the..LOB.
cor-pus (Garside et al, 1987), the Penn Tree-bank (Marcus et al, 1993), the SUSANNE cor-pus (Sampson, 1995), the Spoken English Cor-pus (Taylor and Knowles, 1988), the OxfordPsycholinguistic Database (Quinlan, 1992), andthe "Computer-Usable" version of the OxfordAdvanced Learner's Dictionary of Current En-glish (OALDCE; Mitton,  1.9.92).2.5 EvaluationMinnen and Carroll (Under review) report anevaluation of the accuracy of the morphologi-cal generator with respect o the CELEX lexi-cal database (version 2.5; Baayen et al, 1993).This threw up a small number of errors whichwe have now fixed.
We have rerun the CELEX-based evaluation: against the past tense, pastand present participle, and third person singu-lar present ense inflections of verbs, and all plu-ral nouns.
After excluding multi-word entries(phrasal verbs, etc.)
we were left with 38,882out of the original 160,595 word forms.
For eachof these word forms we fed the correspondinginput (derived automatically from the lemma-tisation and inflection specification provided byCELEX) to the generator.We compared the generator output with theoriginal CELEX word forms, producing a listof mistakes apparently made by the generator,which we then checked by hand.
In a numberof cases either the CELEX lemmatisation waswrong in that it disagreed with the relevant en-try in the Cambridge International Dictionaryof English (Procter, 1995), or the output of thegenerator was correct even though it was notidentical to the word form given in CELEX.We did not count these cases as mistakes.
Wealso found that CELEX is inconsistent with re-spect to consonant doubling.
For example, itincludes the word form pettifogged, 4 whereasit omits many consonant doubled words thatare much more common (according to countsfrom the BNC).
For example, the BNC con-tains around 850 occurrences of the word formprogramming tagged as a verb, but this formis not present in CELEX.
The form programingdoes occur in CELEX, but does not in the BNC.4A rare word, meaning to be overly concerned withsmall, unimportant details.We did not count these cases as mistakes either.
:Of~he :r~m~i.ning: 359'.mist~kes(:346:~c0neern6dword forms that do not occur at all in the 100Mwords of the BNC.
We categorised these as irrel-evant for practical applications and so discardedthem.
Thus the type accuracy of the morpho-logical analyser with respect o the CELEX lex-ical database is 99.97%.
The token accuracy is99.98% with respect o the 14,825,661 relevant.tokens .i.mthe BNC .(i.e.
,at.rate ,of two errors perten thousand words).We tested the processing speed of the gener-ator on a Sun Ultra 10 workstation.
In orderto discount program startup times (which areanyway only of the order of 0.05 seconds) weused input files of 400K and 800K tokens andrecorded the difference in timings; we took theaverages of 10 runs.
Despite its wide coveragethe morphological generator is very fast: it gen-erates at a rate of more than 80,000 words persecond.
53 The  Generator  in an  App l iedSystem3.1 Text  S impl i f icat ionThe morphological generator forms part of aprototype system for automatic simplificationof English newspaper text (Carroll et al, 1999).The goal is to help people with aphasia (a lan-guage impairment ypically occurring as a re-sult of a stroke or head injury) to better un-derstand English newspaper text.
The systemcomprises two main components: an analysismodule which downloads the source newspapertexts from the web and computes yntactic anal-yses for the sentences in them, and a simpli-fication module which operates on the outputof the analyser to improve the comprehensit)il-ity of the text.
Syntactic simplification (Can-ning and Tait, 1999) operates on the syntaxtrees produced in the analysis phase, for exam-ple converting sentences in the passive vdice toactive, and splitting long sentences at appropri-ate points.
A subsequent lexical simplificationstage (Devlin and Tait, 1998) replaces difficultor rare content words with simpler synonyms.The analysis component contains a morpho-logical analyser, and it is the base forms ofsit is likely that a modest increase in speed could beobtained by specifying optimisation levels in Flex andgcc that are higher than the defaults.204words that are passed through the system; this with a list of exceptions (e.g.
heir, unanimous)?
eases the task of.the texic~l.simplification t odo ,: =,eollecCed:using.the:pronunciation information inule.
The final processing stage in the systemis therefore morphological generation, using thegenerator described in the previous ection.3.2 Appl ied Morpho log ica l  Generat ionWe are currently testing the components of thesimplification system on a corpus of 1000 newsthe OALDCE, supplemented by-further cases(e.g.
unidimensional) found in the BNC.
In thecase of abbreviations or acronyms (recognisedby the occurrence ofnon-word-initial capital et-ters and trailing full-stops) we key off the pro-nunciation of the first letter considered in isola-tion.stories downloaded from .the :Sunde!T!and Echo ....... Simi!arlyi .the orthography .of .the .genit.ive(a local newspaper in North-East England).
In marker cannot be determined without takingour testing we have found that newly encoun-tered vocabulary only rarely necessitates anymodification to the generator (or rather theanalyser) source; if the word has regular mor-phology then it is handled by the rules express-ing generalisations.
Also, a side-effect of the factthat the generator is derived from the analyseris that the two modules have exactly the samecoverage and are guaranteed to stay in step witheach other.
This is important in the context ofan applied system.
The accuracy of the gener-ator is quite sufficient for this application; ourexperience is that typographical mistakes in theoriginal newspaper text are much more commonthan errors in morphological processing.3.3 Or thograph ic  Postprocess ingSome orthographic phenomena span more thanone word.
These cannot be dealt with in mor-phological generation since this works strictly aword at a time.
We have therefore implementeda final orthographic postpmcessing stage.
Con-sider the sentence: 6(4) *Brian Cookman is the attraction atthe K ing 's  Arms on Saturday nightand he will be back on Sunday nightfor a acoustic jam session.This is incorrect orthographically because thedeterminer in the final noun phrase should bean, as in an acoustic jam session.
In fact annmst be used if the following word starts witha vowel sound, and a otherwise.
We achievethis, again using a filter implemented in Flex,with a set of general rules keying off the nextword's first letter (having skipped any inter-vening sentence-internal punctuation), together6This sentence is taken from the story "The demiseof Sunder land's  Vaux Breweries is giving local musiciansa case of the blues" publ ished in the Sunderland Ech, oon 26 August 1999.context into account, since it depends on theidentity of the last letter of the preceding word.In the sentence in (4) we need only eliminatethe space before the genitive marking, obtain-ing King's Arms.
But, following the newspaperstyle guide, if the preceding word ends in s or zwe have to 'reduce' the marker as in, for exam-ple, Stacey Edwards' skilful fingers.The generation of contractions presents moreof a problem.
For example, changing he willto he'll would make (4) more idiomatic.
Butthere are cases where this type of contraction isnot permissible.
Since these cases seem to bedependent on syntactic ontext (see Section 4below), and we have syntactic structure fromthe analysis phase, we are in a good positionto make the correct choice.
However, we havenot yet tackled this issue and currently take theconservative approach of not contracting in anycircumstances.4 Re la ted  WorkWe are following a well-established line of re-search into the use of finite-state techniques forlexical and shallow syntactic NLP tasks (e.g.Karttunen et al (1996)).
Lexical transduc-ers have been used extensively for morphologicalanalysis, and in theory a finite-state transducerimplementing an analyser can be reversed toproduce a generator.
However, we are not awareof published research on finite-state morpho-logical generators (1) establishing whether inpractice they perform with similar efficiency tomorphological analysers, (2) quantifying theirtype/token accuracy with respect to an inde-pendent, extensive 'gold standard', and (3) in-dicating how easily they can be integratedinto larger systems.
Furthermore, although anumber of finite-state compilation toolkits (e.g.t(arttunen (1994)) are publicly available or can205be licensed for research use, associated large- length trailing strings and concatenating suf-.scale l.inguis tic .,descriptions=-~ar,,,exa,mple=~n,-:.:~...~..
fixes ........ All ~mo~phologicaUy,..subreguta,r-~ :forms.glish morphological lexicons--are usually com-mercial products and are therefore not freelyavailable to the NLG research community.The work reported here is-also related towork on lexicon representation and morpho-logical processing using the DATR representa-tion language (Cahill, 1993; Evans and Gazdar,must be entered explicitly in the lexicon, as wellas irregular ones.
The situation is similar inFUF/SURGE, morphological generation in theSURGE grammar (Elhadad and Robin, 1996)being performed by procedures which inspectlemma endings, strip off trailing strings whenappropriate, and concatenate suffixes..1996).cal and more of an engineering perspective, fo-cusing on morphological generation i  the con-text of wide-coverage practical NLG applica-tions.
There are also parallels to research inthe two-level morphology framework (Kosken-niemi, 1983), although in contrast o our ap-proach this framework has required exhaustivelexica and hand-crafted morphological (unifi-cation) grammars in addition to orthographicdescriptions (van Noord, 1991; Ritchie et al,1992).
The SRI Core Language Engine (A1-shawi, 1992) uses a set of declarative segmen-tation rules which are similar in content o ourrules and are used in reverse to generate wordforms.
The system, however, is not freely avail-able, again requires an exhaustive stem lexicon,and the rules are not compiled into an efficientlyexecutable finite-state machine but are only in-terpreted.The work that is perhaps the most similarin spirit to ours is that of the LADL group, intheir compilation of large lexicons of inflectedword forms into finite-state transducers (Mohri,1996).
The resulting analysers run at a com-parable speed to our generator and the (com-pacted) executables are of similar size.
How-ever, a full form lexicon is unwieldy and incon-venient o update: and a system derived from itcannot cope gracefully with unknown words be-cause it does not contain generalisations aboutregular or subregular morphological behaviour.The morphological components of currentwidely-used NLG systems tend to consist ofhard-wired procedural code that is tightlybound to the workings of the rest of the system.For instance, the Nigel grammar (Matthiessen,1984) contains Lisp code that classifies verb,noun and adjective endings, and these classesare picked up by further code inside the t<PMLsystem (Bateman, 2000) itself which performsinflectional generation by stripping off variableHowever,.. we,.~adopt .less ..of .a~.theoreti~ .... -..,.,.Jn~ eLtr~ent~.,NI,G~-.systerns,~or.#hographic 4nfor-mation is distributed throughout he lexiconand is applied via the grammar or by hard-wiredcode.
This makes orthographic processing dif-ficult to decouple from the rest of the system,compromising maintainability and ease of reuse.For example, in SURGE, markers for alan us-age can be added to lexical entries for nouns toindicate that their initial sound is consonant-or vowel-like, and is contrary to what their or-thography would suggest.
(This is only a partialsolution since adjectives, adverbs--and morerarely other parts of speech--can follow the in-definite article and thus need the same treat-ment).
The appropriate indefinite article is in-serted by procedures associated with the gram-mar.
In DRAFTER-2 (Power et al, 1998), analan feature can be associated with any lex-ical entry, and its value is propagated up tothe NP level through leftmost rule daughters inthe grammar (Power, personal communication).Both of these systems interleave orthographicprocessing with other processes in realisation.In addition, neither has a mechanism for stat-ing exceptions for whole subclasses of words, forexample those starting us followed by a vowel--such as use and usua l - -wh ich  must be precededby a. KPML appears not to perform this typeof processing at all.We are not aware of any literature describing(practical) NLG systems that generate contrac-tions.
However, interesting linguistic research inthis direction is reported by Pullmn and Zwicky(In preparation),.
This work investigates tile un-derlying syntactic structure of sentences thatblock auxiliary reductions, for example thosewith VP ellipsis as in (5).
(5) *She's usually home wh, en he's.2065 Conc lus ions  provided to us by the University of SheffieldWe have described a generatorf0r English in:: ' G.A~E ~projoet-,...:(3hris -Brew,,.Dale- Gerdem:an.n~..flectional morphology.
The main features of the Adam Kilgarriff and Ehud Reiter have sug-generator are:wide coverage and high accuracy It in-corporates data from several large corporaand machine readable dictionaries.
Anevaluation has shown the error rate to bevery low.robustness The generator does not containan explicit lexicon or word-list, but insteadcomprises a set of morphological generali-sations together with a list of exceptions forspecific (irregular) words.
Unknown wordsare very often handled correctly by the gen-eralisations.maintainabi l i ty and ease of use The or-ganisation into generalisations and excep-tions can save development time since ad-dition of new vocabulary that has regularmorphology does not require any changesto be made.
The generator is packaged upas a Unix filter, making it easy to integrateinto applications.speed and portabi l i ty The generator isbased on efficient finite-state techniques,and implemented using the widely availableUnix Flex utility.freely available The morphological gener-ator and the orthographic postproces-sor are fi'eely available to the NLG re-search community.
See <http://www.cogs.susx.ac.uk/lab/nlp/carroll/morph.html>.In future work we intend to investigate theuse of phonological information in machinereadable dictionaries for a more principled so-lution to the consonant doubling problem.
Wealso plan to further increase the flexibility ofthe generator by including an option that al-lows the user to choose whether it has a prei~r-ence for generating British or American Englishspelling.AcknowledgementsThis work was fimded by UK EPSRC projectGR/L53175 'PSET: Pra(:tical Simplification ofEnglish Text', and by all EPSRC Advanced Fel-lowship to tim second author.
The original ver-sion of t.lw morl)hol~gi('al nalyscr was kindlygested improvements to the analyser/generator.Thanks also to the anonymous reviewers for in:sightful comments.ReferencesAlfred Aho, Ravi Sethi, and Jeffrey Ullman...... ..~ 1986..=-?
:ompilers,: ~Principles,~Techniques andTools.
Addison-Wesley.Hiyan Alshawi, editor.
1992.
The Core Lan-guage Engine.
MIT Press, Cambridge, MA.Harald Baayen, Richard Piepenbrock, and Hed-derik van Rijn.
1993.
The CELEX Lexi-cal Database (CD-ROM).
Linguistic DataConsortium, University of Pennsylvania,Philadelphia, PA, USA.John Bateman.
2000.
KPML (Version 3.1)March 2000.
University of Bremen, Germany,< http://www.fbl0.uni-bremen.de/anglistik/langpro/kpml/README.html>.Lou Burnard.
1995.
Users reference guide forthe British National Corpus.
Technical re-port, Oxford University Computing Services.Lynne Cahill.
1993.
Morphonology in the lex-icon.
In Proceedings of the 6th Conferenceof the European Chapter of the Associationfor Computational Linguistics, pages 87-96,Utrecht, The Netherlands.Yvonne Canning and John Tait.
1999.
Syntac-tic simplification of newspaper text for apha-sic readers.
In Proceedings ofthe ACM SIGIRWorkshop on Customised Information Deliv-ery, Berkeley, CA, USA.John Carroll, Guido Minnen, Darren Pearce,Yvonne Canning, Siobhan Devlin, and JohnTait.
1999.
Simplifying English text for lan-guage impaired readers.
In Pwceedings of the9th Conference of th, e European Chapter ofthe Association for Computational Ling.uis-tics (EACL), Bergen, Norway.Hamish Cunningham, Yorick Wilks, and RobertGaizauskas.
1996.
GATE--a GenerM Archi-tecture for Text Engineering.
In Proceed-ings of the 16th Conference on ComputationalLinguistics, Copenhagen, Denmark.Siobhan Devlin and John Tait.
1998.
The useof a psychotinguistic database in the simpli-fication of text for aphasic readers.
In (Ner-bonne.
1998).207Michael Elhadad and Jacques Robin.
1996.
Anoverview of SU-KGE:..A ~eusable~,.eomprehen-sive syntactic realization component.
Tech-nical Report 96-03, Dept of Mathematics andComputer Science, Ben Gurion University, Is-rael.Roger Evans and Gerald Gazdar.
1996.
DATR:a language for lexical knowledge representa-tion.
Computational Linguistics, 22.Roger Garside, Ge.off;ey.. _Leech, and...GeoffreySampson.
1987.
The computational nalysisof English: a corpus-based approach.
Long-man, London.Lauri Karttunen, Jean-Pierre Chanod, GregoryGrefenstette, and Anne Schiller.
1996.
Regu-lar expressions for language ngineering.
Nat-ural Language Engineering, 2(4):305-329.Lauri Karttunen.
1994.
Constructing lexicaltransducers.
In Proceedings of the 14th Con-ference on Computational Linguistics, pages406-411, Kyoto, Japan.Kimmo Koskenniemi.
1983.
Two-level modelfor morphological analysis.
In 8th Interna-tional Joint Conference on Artificial Intelli-gence, pages 683-685, Karlsruhe, Germany.John Levine, Tony Mason, and Doug Brown.1992.
Lex ~4 Yacc.
O'Reilly and Associates,second edition.Mitch Marcus, Beatrice Santorini, andMary Ann Marcinkiewicz.
1993.
Build-ing a large annotated corpus of English: thePenn Treebank.
Computational Linguistics,19(2):313-330.Christian Matthiessen.
1984.
Systemic Gram-mar in computation: The Nigel case.
In Pro-ceedings of the 1st Conference of the EuropeanChapter of the Association for ComputationalLinguistics, pages 155-164, Pisa, Italy.George Miller, Richard Beckwith, ChristianeFellbaum, Derek Gross, Katherine Miller, andRandee Tengi.
1993.
Five Papers on Word-Net.
Princeton University, Princeton, N.J.Guido Minnen and John Carroll.
Under review.Past and robust morphological processing toolsfor practical NLP applications.Roger Mitton.
1992.
A description of acomputer-usable dictionary file based onthe Oxford Advanced Learner's Dictio-nary of Current English.
Availat)le at< ftp: / / ota.ox.ac.uk / pub /ota/ pub lic / d icts / 710 /text710.doe: >.Mehryar Mohri.
1996.
On some applications of.......~ :fmittee-:sta, t e -automata,.-.t heeory.,.~tox.
:natu.ea, l~lam.-guage processing.
Natural Language Engi-neering, 2(1):61-80.John Nerbonne, editor.
1998.
LinguisticDatabases.
Lecture Notes.
CSLI Publica-tions, Stanford, USA.Richard Power, Donia Scott, and Roger Evans.1998.
What You See Is What You Meant: di-rect knowledge diting~with natu~aLlanguagefeedback.
In Proceedings of the 13th Bien-nial European Conference on Artificial Intel-ligence (ECAI 98), Brighton, UK.Paul Procter.
1995.
Cambridge InternationalDictionary of English.
Cambridge UniversityPress.Geoffrey Pullum and Arnold Zwicky.
In prepa-ration.
Licensing of prosodic features bysyntactic rules: the key to auxiliary reduc-tion.
First version presented to the AnnualMeeting of the Linguistic Society of America,Chicago, Illinois, January 1997.
Available at< http://www.lsadc.org/web2/99modabform.htPhilip Quinlan.
1992.
The Oxford Psycholin-guistic Database.
Oxford University Press.Graeme Ritchie, Graham Russell, Alan Black,and Stephen Pulman.
1992.
Computationalmorphology: practical mechanisms for theEnglish lexicon.
MIT Press.Geoffrey Sampson.
1995.
English for the com-puter.
Oxford University Press.Stuart Shieber, Gertjan van Noord, RobertMoore, and Fernando Pereira.
1990.
Seman-tic head-driven generation.
ComputationalLinguistics, 16(1):7-17.Lita Taylor and Gerry Knowles.
1988.
Man-ual of information to accompany the SECCorpus: the machine-readable corpus of spo-ken English.
Manuscript, Urfiversity of Lan-caster.
UK.Gertjan van Noord.
1991.
Morphology inMiMo2.
Manuscript, University of Utrecht,The Netherlands.208
