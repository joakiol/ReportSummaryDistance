A UNIFIED MANAGEMENT AND PROCESSING OF WORD-FORMS,IDIOMS AND ANALYTICAL COMPOUNDSDan TuftsOctav PopescuResearch Institute for InformaticsMiciurin 8-10, 71316, Bucharest, 1Fax:653095RomaniaABSTRACTThe paper presents a morpho-lexical environ-ment, designed for the management of root-oriented natural language dictionaries.
It alsoencapsulates the basic morpho-lexical processings:analysis and synthesis of individual word-forms orcompounds (idioms and analytic onstructions).INTRODUCTIONlately, a proliferation of computational lexiconenvironments (CLE) has been noticed, whichsign iftcantly influence the work on natural language(mainly, machine translation) (Byrd et al 1987),(Nircnburg and Raskin 1987), (Ritchie et al 1987)etc.
With more and more computing power incor-porated, the modern CLEs are capable to processnot only individual inflected words or derivativesbut also idioms and collocations.
Nonetheless,there are many applications in language industrywhich consider a CLE an unfordable luxury.
Webelieve that such an objection may be refused if theCLE is so designed that it should function in adata-driven manner.We have purposely developed a morpho-lexicalmanagement and processing environment aimed atproviding an unified and satisfactory solution to awide range of applications: intelligent text-process-ing, textual information retrieval, natural anguageinterfacing, natural language understanding, ma-chine translation.
Also, and more important, theenvironment is intended to be used for a large classof natural languages (at least for those of whichmorphology may be described in terms of our para-digmatic model (Tufts 1989)).In order to reach these objectives, we made aclear distinction between the morphological pro.cess ings and the knowledge governing them.
Thisdistinction Is beneficial not only with respect onatural language independence from the processingenvironment but also with respect o the d~ireddegree of complexity of the process in case.
The lackof information in such an approach will not blockthe system but will produce a simplified result.An interesting characteristic ofour system is itscapability to treat, besides idioms, analytical com-pounds as well as grammatical nd lexical colloca-tions.The work reported here is developed within thecontext of the paradigmatic theory of morphologyas defined in Tufts (1990).
The terminology used inthe following is taken from the above-mentionedpaper.
In the same paper, it is shown that learna-bility is the great advantage of paradigmatic mor-phology.
The PARADIGM system, described inTufts (1989) and Tufis (1990) allows a novice userto informally teach the program how to (de)com-pose inflexionai word-forms, that is to enable themorphological processing by a natural languageprocessor.THE MORPHO-LEXICALKNOWLEDGE BASEObviously, the main depository of morpho-lexi-cal knowledge is the dictionary, to be discussed inthe following.Other morphological knowledge sources are theendings tree and the paradigms table.
These datastructures do not depend on a specific lexical stockbecause they encode general inguistic knowledgefor the language in ease (parts of speech, relevantcategories for the inflexional behaviour, endings,paradigms, etc.).
Since their organization and ac-quisition are described elsewhere ((Tufts 1989) and(Tufts 1990)) we will not dwell on them.THE DICT IONARYIn our system, the dictionary is a two-way ac-cessible collection of hierarchically structured en-tries.
During parsing, the access i  provided by a rootindex.
Each root in this index is associated with oneor (in case of root-homonymy) more dictionaryentries.
During generation, the access is ensured bya meaning index.
Each symbol in this index labellinga meaning description structure (see below) is asso-ciated with one or (in case of synonymy) more dic-tionary entries.- 95  .The formal structure of a dictionary entry is de-scribed by the regular expression below:<entry> ::= (</emma> <part-of-speech>(<valency-model> <semantic-description>*)*(<non-regular-root> <paradigmatic-description>*)*( <phono-hyphen >)*( <syntagmatic-description >)*)where:</emma> and <part-of-speech> ave theusual meaning.<valency-model> is a list of idiosyncratic fea-tures of interest mainly for syntactic processing(syntactic patterns, required prepositions, positionswith respect to the dominant constituent for adjec-tives and adverbs, etc.
).<semantic-description > is the name of a case.f rame structure placed in a generic-specific hier-archy.
The actual semantic descriptions reside in adifferent data space than the rest of the dictionary.This separation is motivated by various reasons,among them being:- the intention to enable for a meaning-basedtransfer, via the semantic descriptions area,between monolingual dictionaries;- the capability of interchanging domain-oriented semantic descriptions;- -  the lexical stock independence from themeaning representation :formalism;- a more precise treatment of synonymy, anto-nymy and generalization-specialization rela-tions.Concerning the last reasoil invoked above, it isquite obvious that synonymy, antonymy or generali-zation-specialization relations cannot be estab-lished directly between dictionary entries.
This isbecause such relations, more often than not, aredefined over specific meanings of a pair of wordsand rarely a word is monosemantic.
On the otherhand, such relations are frequently domain depend-ent.
Therefore, we let them be expressed betweensemantic case-frames (descriptors of individualmeanings), but, because the meaning repre-sentation of the lexical stock is beyond the purposeof this paper, we will not refer to it.<non-regular-root> and the <paradigmatic-description>s descr ibe-  for non-regular :inflect-ing words - -  the conditions under which the<non-regular-root> may be considered in forminga word-form.
A formal definition of what we callnon-regular inflecting, as opposed tO the regularinflecting, is given in Tufts (1989).
Informally, aword is a regular-inflecting one iff any grammaticalform of it may be written as <constant-part> +<ending>.
The <constant-part> is called theregular root of theword.
If a word is not a regular-inflecting one, it is called non-regular.
One maynote that a non-regular inflecting word is charac-terized by more than one root.
These roots arecalled non-regular-roots.
A <paradigmatic-de-scription> is a bit-map codification for the endingsin a paradigm which may be combined, under afeature-values et of restrictions, with the <non-regular-root>.<phono-hyphen> is a place-holder for the pro-nunciation transcription of the lemma or of thenon-regular oots.iThis field also contains informa-tion about the hyphenation of the correspondingitem.<syntagmatic-description > is a parameterizedpattern, describing roups of words which are to berecognized or generated as stand-alone processingunits.
Given the importance of what we called syn-tagmatic processing (probably the most attractivefeature of our system) we shall devote the nextsection to the presentation i greater detail of thistopic.THE SYNTAGMSWe mean by syntagm a sequence of at least twolcxical items which are to bc processed as a singleunit.
In accordance with this definition, the colloca-tions, idioms and analytical compounds are syn-tagms.A syntagm is represented in the dictionary as apair (<result> <pattern >) and it is associated withthe lcmma of the entry in case.
This lcmma is calledthe p ivot  e lement  of the syntagm and it may appearin whatever position of the sequence.In order to clarify the syntagm processing let usexamine its formal structure:- 9 6  -< syntagm > ::= (<result> <pattern> <position-of-pivot-in-pattern>)<pattern> ::= (<element> <element> +)<element> ::= <word-form>\] </emma> I <category>I <compound-element>)< compound-element> :: = (< displacement> </emma > <restriction >*)\] (<displacement> <category> <restriction>*)\] <choice-list>< choice-list > :: = (< element > + < ob/igativity>)<obligativily> ::= TRUE I FALSE<displacement> ::= + I < \ ] - - \ ]  ><restriction> ::= (<feature> <value>*)<restriction> ) <result> ::= (<syntagm-value> " *<syntagm-value> ::= NULL I </emma>The replacement element of a syntagm is eitherthe empty string or alemma which will be associatedwith the appropriate morpho-lexical features as re-suited from its processing.
This lemma may corre-spond to an element in the <pattern> speciallymarked as syntagm substituter and in this case<syntagm-value> is NULL (the empty replace-ment string corresponds to the NULL value of<syntagm-value> and no substituter lement inthe <pattern>).The <element> in the <pattern> of a <syn-tagm> may be a word-form, an (un)restrictedlemma, an (un)reslrictcd grammar category or anyone in a choice list of specified <element>s.
In caseof a choice, if <obligativity> is FALSE, besides thespecified <element>s, the empty string is a validcandidate too.The <displacement> specified in a <com-pound-element> of the pattern of a <syntagm>determines the role to be played further on by theconsidered element.
The meaning of the value inthis field depends on whether the syntagm is to berecognized or generated:- the value '+'  specifies that he current elementis either the replacer of the syntagm (duringanalysis), or one of the elements of the syn-tagm expansion, inthe specified position (dur-ing generation);- for analysis purposes, the values '<'  and '>'specify that the current element is an "alien"constituent which must be transferred in frontof or behind the syntagm replacer, ~pective-ly; during generation phase, the same valuesspecify that the first item from the left or fromthe right of the syntagmatic item which is to beexpanded will be moved - -  obeying thepossible restrictions - - to the output string, inthe current position;- the '--' value is the default and says that theelement in case will either be deleted from theinput string (duringanalysis) or inserted in theoutput string (during eneration).The <restriction>s are the principal means bywhich a lexicon designer expresses the rules govern-ing the correct use of a syntagm.
Depending on itsformat, the meaning of a <restriction > differs:a) (feature)In this case, the first (from the left to the right)matching value of the feature discussed has to be thesame for all subsequent occurrences of the a-typerestrictions over the same feature.
This type of re-striction is used to express feature congruency fordifferent constituents appearing in the <pattern>of a syntagm as well as the inheritance ofa featurevalue from the <pattern> to the <result> or vice-versa.b) (feature value)A <pattern> element restricted like that mustmatch (during analysis) an input item having thespecified value for the feature in case.
In generationphase, it represents a word-forming parameter.
Ifthe restriction is associated with the <result> itsimply represents an assignment (in case of ana-lysis) or an expanding parameter (in case of gener-ation).c) (feature value1 value2..., valuen)Such a restriction may act on each feature only once- 9 7  -in the <pattern> and once in the <result>.
Thepaired multiple-valued features (one from the<pattern> and one from the <result>) position-ally specify the relations between the values of afeature xisting in both <pattern> and <result>.That is, if, during analysis, a <pattern> elementmatched an input item having for a given feature,say fro, one of the values pecified in its restriction,say the k th, then the feature fm will be assigned inthe <result> the k th value in its associated rt~tric-tion.
With generation, things are similar.In Tufts and Popescu (1990b), the flow of controlas well as the formal power ofsyntagmatic process-ing are outlined by means of annotated examples ofsyntagms codifying the rules governing the com-pound verbal forms (including interrogative formsand "aliens" (adverbs, reflexive pronoun insertion)for English, French, Romanian, Russian and Span-ish.As an example we give below a syntagm describ-ing one of the possible ways of forming two negativeanalytical verbal forms (pass6-compos6 and plus-que-parfait) inFrench:((NULL (personne) (nombre) (genre) (modatite negative)(temps passe-compose plus-que parfait))("ne "(~ dtre (personne) (nombre) (temps present imparfait))(> ADVERBE (modalite negative))(+ VERDE (temps participe-passe) (nombre) (genre)))2)A more elaborated example, describing the basiccompound tenses in English (not including the syn-tagms for handling adverbs insertion or negativeand interrogative constructions) i  the following:(1) ((NULL (VOICE ACTIVE) (ASPECT CONTINOUS) (TENSE))((~ BE (VOICE ACTIVE) (ASPECT INDEFINITE) (TENSE))(+ VERB (TENSE PRESENT-PARTICIPLE)))1)(2) ((NULL (VOICE PASSIVE) (ASPECT INDEFINITE) (TENSE))((~ BE (VOICE ACTIVE) (ASPECT INDEFINITE) (TENSE))(+ VERB (TENSE PAST-PARTICIPLE)))1)(3) ((NULL (VOICE PASSIVE) (ASPECT CONTINOUS)(TENSE PRESENT PAST))((-- BE (VOICE ACTIVE) (ASPECT CONTINOUS)(TENSE PRESENT PAST))(+ VERB (TENSE PAST-PARTICIPLE)))1)(4) ((NULL (VOICE ACTIVE) (ASPECT INDEFINITE)(TENSE SIMPLE-FUTURE PRESENT-CONDITIONAL))((~ SHALL (TENSE PRESENT PAST))(+ VERB (TENSE PRESENT-INFINITIVE)))1)- 98  -((NULL (VOICE ACTIVE) (ASPECT INDEFINITE)(TENSE PRESENT-PREFECT PAST-PERFECT FUTURE-PERFECTPAST-CONDITIONAL PERFECT-INFINITIVE))((-- HAVE (VOICE ACTIVE) (ASPECT INDEFINITE)(TENSE PRESENT PAST SIMPLE-FUTUREPRESENT-CONDITIONAL PRESENT-INFINITIVE))(+ VERB (TENSE PAST-PARTICIPLE)))1)THE ENDINGS TREE AND THEPARADIGMS TABLEThe endings tree (a discrimination tree) is aknowledge source for the parsing process: Inter-nally, it represents all the known endings (we usethe term 'ending' without further noticing its event-ual structure - -  e.g.
suffix + desinence), and theirmorphological feature values.
The nodes are la-belled with letters appearing indifferent endings.
Aproper ending is represented bythe concatenationof the letters labelling the nodes along a certainpath, starting from a terminal node towards the rootof the tree (this organization is due to the retro-grade parsing strategy (Kotkova 1985) used in oursystem).
A terminal node is not necessarilY a leafnode because of the possibility of including oneending into a longer one.
Such a case is calledintrinsic ambiguity.
All terminal nodes are attachedto the paradigmatic information specific to the en-dings they stand for.
More often than not, an endingdoes not uniquely identify a paradigm but:a set ofparadigms.
In this case, the ending is called extrin-sically ambiguous.
Both types of ambiguity are the-oretically solved by checks on the congruencybetween paradigmatic information attached to therespective ndings (taken from the endings tree)and the candidate roots (taken from their dictionaryentries).The paradigms table is the data structure usedduring the word-form generation process.
The para-digms are automatically classified uring the learn-ing (acquisition) phase (Tufis 1990) into aninheritance hierarchy.
A compilation phase trans-forms this hierarchy into the paradigms table.
Theinternally assigned code era given paradigm isusedas the index in the paradigms table, an entry of whichhas the following structure:< fixed-feature-values ><variable-feature-values> <ending> +The <fixed-feature-values> field represents a listof morphologica!
features with predeterminedvalues for the paradigm in case.
These feature-values (if any) are collected while compiling theparadigms hierarchy and represent the discrimina-tion criteria, according to which a more generalparadigm is split into different specific paradigms.The <variable-feature-values > represents a list of(ordered) morphological features which may takeany value out of the legal ones.
An efficient numericalgorithm converts an arbitrary ordered set of fea-ture-values into a code used as a displacementidentifying the appropriate <ending> in the cur-rent entry of the table.
Let us mention that thevariable features have default values, so that, evenif the generation criteria set was not completelyspecified, an inflected word-form is still generated.Moreover, ifthe endings tree or the paradigms tableare not defined, the system does not crash but in-stead functions as if it had been designed for aword-form dictionary (the trivial morphology ap-proach).FINAL REMARKSDue to the lack of space, we will discuss hereneither the processing units of our environment orthe control flows between them.
The interestedreader may find all the necessary details in Tufts andPopescu (1990a) and Tufts and Popescu (1990b).Yet, we have to say that the proper morpho-lexicalprocessings (analysis and generation), were thoughtto work in a concurrent manner.
For instance read-ing characters from the keyboard, parsing individ-ual word-forms, spelling checking and parsingsyntagms are usually simultaneously active pro-ceases; similarly, individual word-forms generationand syntagms expansion are typical coroutines.It is worth mentioning that, by default, the resultof parsing as provided by our system is not a linearsequence of unique lexical items.
The result in-cludes all valid interpretations of every word in theinput (including unknown words) thus generatinglexically ambiguous  dements ,  as well as all legalgroupings of syntagmatic components hus genera-- 99  -ting iexically ambiguous structures.If such a complete analysis is not desirable, a setof general-purpose h uristics may be used to filterthe parsing (for instance when a word may be seg-mented in different ways, taking into account onlythe roots corresponding to the longest endings, con-sidering the syntagms with the maximum number ofconstituents, etc., see Tufts (1990)).With respect to spelling errors recovery, we dis-tinguish between typing and linguistic anomalies.The typing errors are the usual misspellings takeninto account by the spelling checkers of text editors.Anyway, there is an important difference: because(normally) our dictionaries are root-oriented, thestandard spelling checking refers to the roots.
Withthe endings, due to the limited number and limitedlength and thanks to the discriminating organiza-tion of the endings tree, the recovery ismuch moreprecise (the recovery is always complete when theroot was found in the dictionary).The case when the morphological features of theroot of a word-form are not completely congruentwith the morphological features of its recognizedending is considered a linguistic error.
The con-gruency checking allows for an easy recovery of suchmistakes.
The distinct reatment ofthis type of erroris very useful in case of CAI systems for languagelearning (Zock et al 1990) and we intend, in thenear future, to provide an explanation module tothe congruency hecker for such applications.The generation process is bound to the morpho-logical evel, i.e.
the lexical items are produced by ahigher level module in the order they are supposedto appear in the output natural language string.An exception from this rule is given by syntag-matic symbols generation.
As previously shown, thepattern of a syntagm may specify one or more"alien" constituents ( uch as adverbs or pronouns).While expanding such a pattern, a '<' or '>' -marked constituent is imported into the syntag-matic sequence from the left or from the right of thesyntagmatic symbol, thus changing the initial orde-ring.TheMORPHIS system, described in this paper ispartially implemented in GOLDEN COMMON-LISP for IBM PC-AT compatible personal compu-ters.At present, auser-friendly interface isunder de-velopment, whicll is supposed to decrease as muchas possible the level of expertise required to a userin order to build his/her own morphological knowl-edge base.The interface will also include on-line consultingfacilities and the system will be equipped with con-figuration possibilities and standard linking inter-faces for three main types of applications: advancedtext-editing, language-learning and machine trans-lation (including NL interfaces).REFERENCESByrd, R.J., Calzx)lari, N.; Chodorow, M.S.
; Kla-vans, J.L.
; Neff, M.S.
1897 Tools and Methods forComputational Linguistics.
Journal of Computa-tional Linguistics 13(3-4) (special issue on lexicon)"219-240.Koktova, E. 1985 Towards a New Type ofMorphemic Analysis.
Proceedings of the SecondConference of ECACL, Geneva, Switzerland: 179-186.Nirenburg, S.; Raskin, V. 1987 The SubworldConcept and the Lexicon Management System.Journal of Computational Linguistics 13(3-4) (spe-cial issue on lexicon): 276-289.Ritchie, G.D.; Pullman, S.G.; Black, A.W.
; Rus-sell, GJ.
1987 A Computational Framework forLexical Description.
Journal of Computational Lin-guistics, 13(3-4) (special issue on lexicon): 290-307.Tufts, D. 1989 It Would Be Much Easier ifWENT Were GOED.
Proceedings of the 4-th Con-ference of ECACL, Manchester, England: 145-152.Tufts, D. 1990 Paradigmatic Morphology Learn-ing.
Computers and Artificial Intelligence, 9(3): 273-290.Tufts, D.; Popescu, O.
1990a The MORPHISUser Manual.
ICI, Bucharest, Romania (in Roman-Jan).Tufts, D.; Popescu, O.
1990b Processing Idiomsand Analytical Compounds Within an IntegratedDictionary Environment.
Research Report, ICI,Bucharest, Romania.Zock, M.; Laroui, A.; Francopoula, G. 1990<<See What I Mean?>> Interactive SentenceGeneration as a Way of Visualising the Meaning-Form Relationship.
Proceedings of the Fifth WorldConference on Computers in Education, Sydney,Australia.l ( JO  -
