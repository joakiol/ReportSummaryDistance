Proceedings of the ACL Interactive Poster and Demonstration Sessions,pages 33?36, Ann Arbor, June 2005. c?2005 Association for Computational LinguisticsThe Linguist?s Search Engine: An OverviewPhilip Resnik Aaron ElkissDepartment of Linguistics and UMIACS UMIACSUniversity of Maryland University of MarylandCollege Park, MD 20742 College Park, MD 20742resnik@umd.edu aelkiss@umiacs.umd.eduAbstractThe Linguist?s Search Engine (LSE) wasdesigned to provide an intuitive, easy-to-use interface that enables language re-searchers to seek linguistically interestingexamples on the Web, based on syntacticand lexical criteria.
We briefly describeits user interface and architecture, as wellas recent developments that include LSEsearch capabilities for Chinese.1 IntroductionThe idea for the Linguist?s Search Engine origi-nated in a simple frustration shared by many peo-ple who study language: the fact that so much ofthe argumentation in linguistic theory is based onsubjective judgments.
Who among us has not, insome talk or class, heard an argument based on a?starred?
(deemed-ungrammatical) example, andwhispered to someone nearby, Did that sound ok toyou?
because we thought it sounded fine?
As Bardet al (1996) put it, each linguistic judgment is a?small and imperfect experiment'?.
Sch?tze (1996)and Cowart (1997) provide detailed discussion ofinstability and unreliability in such informalmethods, which can lead to biased or evenmisleading results.Recent work on linguistics methodology drawson the perception literature in psychology toprovide principled methods for eliciting gradient,rather than discrete, linguistic judgments (Soraceand Keller, 2005).
In addition, at least as far backas Rich Pito?s 1992 tgrep, distributed with thePenn Treebank, computationally sophisticatedlinguists have had the option of looking atnaturally occurring data rather than relying onconstructed sentences and introspective judgments(e.g., Christ, 1994; Corley et al, 2001; Blaheta,2002; Kehoe and Renouf 2002; K?nig and Lezius,2002; Fletcher 2002; Kilgarriff 2003).Unfortunately, many linguists are unwilling toinvest in psycholinguistic methods, or in thecomputational skills necessary for working withcorpus search tools.
A variety of people interestedin language have moved in the direction of usingWeb search engines such as Google as a source ofnaturally occurring data, but conventional searchengines do not provide the mechanisms needed toperform many of the simplest linguisticallyinformed searches ?
e.g., seeking instances of aparticular verb used only intransitively.The Linguist?s Search Engine (LSE) wasdesigned to provide the broadest possible range ofusers with an intuitive, linguistically sophisticatedbut user-friendly way to search the Web fornaturally occurring data.
Section 2 lays out theLSE?s  basic interface concepts via severalillustrative examples.
Section 3 discusses itsarchitecture and implementation.
Section 4discusses the current status of the LSE and recentdevelopments.2 LSE Interface ConceptsThe design of the LSE was guided by a simplebasic premise: a tool can?t be a success unlesspeople use it.
This led to the following principlesin its design:33?
Minimize learning/ramp-up time.?
Have a linguist-friendly look and feel.?
Permit rapid interaction.?
Permit large-scale searches.?
Allow searches using linguistic criteria.Some of these principles conflict with each other.For example, sophisticated searches are difficult tospecify in a linguist-friendly way and withoutrequiring some learning by the user, and rapidinteraction is difficult to accomplish for Web-sizedsearches.2.1 Query By ExampleThe LSE adopts a strategy one can call ?query byexample,?
in order to provide sophisticated searchfunctionality without requiring the user to learn acomplex query language.
For example, considerthe so-called ?comparative correlative?construction (Culicover and Jackendoff, 1999).Typing the bigger the house the richer the buyerautomatically produces the analysis in Figure 1,which can be edited with a few mouse clicks to getthe generalized structure in Figure 2, convertedwith one button push into the LSE?s query lan-guage, and then submitted in order to find otherexamples of this construction, such as The higherthe rating, the lower the interest rate that must bepaid to investors; The more you bingo, the morechances you have in the drawing; The more weplan and prepare, the easier the transition.Figure 1.
Querying by exampleFigure 2.
Generalized queryCrucially, users need not learn a query language,although advanced users can edit or create queriesdirectly if so desired.
Nor do users need to agreewith (or even understand) the LSE's automaticparse, in order to find sentences with parses similarto the exemplar.
Indeed, as is the case in Figure 1,the parse need not even be entirely reasonable;what is important is that the structure producedwhen analyzing the query will be the samestructure produced via analysis of thecorresponding sentences in the corpus.Other search features include the ability tospecify immediate versus non-immediatedominance; the ability to negate relationships(e.g.
a VP that does not immediately dominate anNP);  the ability to specify that words shouldmatch on all morphological forms; the ability tomatch nodes based on WordNet relationships (e.g.all descendants of a particular word sense); theability to save and reload queries;  the ability todownload results in keyword-in-context (KWIC)format; and the ability to apply a simple keyword-based filter to avoid offensive results during livedemonstrations.Results are typically returned by the LSE withina few seconds, in a simple search-engine styleformat.
In addition, however, the user has rapidaccess to the immediate preceding and followingcontexts of returned sentences, their annotations,and the Web page where the example occurred.2.2 Built-In and Custom CollectionsLinguistically annotating and indexing the entireWeb is beyond impractical, and therefore there is aclear tradeoff between rapid response time and theability to search the Web as a whole.
In order tomanage this tradeoff, the LSE provides, by default,a built-in collection of English sentences takenrandomly from a Web-scale crawl at the Internet34Archive.1  This static collection is often useful byitself.In order to truly search the entire Web, the LSEpermits users to define their own custom collec-tions, piggybacking on commercial Web searchengines.
Consider, as an example, a searchinvolving the verb titrate, which is rare enoughthat it occurs only twice in a collection of millionsof sentences.
Using the LSE?s ?Build CustomCollection?
functionality, the user can specify thatthe LSE should:?
Query Altavista to find pages containing anymorphological form of titrate?
Extract only sentences containing that verb?
Annotate and index those sentences?
Augment the collection by iterating thisprocess with different specificationsDoing the Altavista query and extracting, parsing,and indexing the sentences can take some time, butthe LSE permits the user to begin searching his orher custom collection as soon as any sentenceshave been added into it.
Typically dozens tohundreds of sentences are available within a fewminutes, and a typical custom collection,containing thousands or tens of thousands ofsentences, is completed within a few hours.Collections can be named, saved, augmented, anddeleted.Currently the LSE supports custom collectionsbuilt using searches on Altavista and Microsoft?sMSN Search.
It is interesting to note that thesearch engines?
capabilities can be used to createcustom collections based on extralinguistic criteria;for example, specifying pages originating only inthe .uk domain in order to increase the likelihoodof finding British usages, or specifying additionalquery terms in order to bias the collection towardparticular topics or domains.3 Architecture and ImplementationThe LSE?s design can be broken into the followinghigh level components:1 The built-in LSE Web collection contains 3 million sen-tences at the time of this writing.
We estimate that it can beincreased by an order of magnitude without seriously degrad-ing  response time, and we expect to do so by the time of thedemonstration.?
User interface?
Search engine interface?
NLP annotation?
Indexing?
SearchThe design is centered on a relational database thatmaintains information about users, collections,documents, and sentences, and the implementationcombines custom-written code with significant useof off-the-shelf packages.
The interface withcommercial  search engines is accomplishedstraightforwardly by use of the WWW::Search perlmodule (currently using a custom-written variantfor MSN Search).Natural language annotation is accomplished viaa parallel, database-centric annotation architecture(Elkiss, 2003).
A configuration specificationidentifies dependencies between annotation tasks(e.g.
tokenization as a prerequisite to part-of-speech tagging).
After documents are processed tohandle markup and identify sentence boundaries,individual sentences are loaded into a centraldatabase that holds annotations, as well asinformation about which sentences remain to beannotated.
Crucially, sentences can be annotatedin parallel by task processes residing on distributednodes.Indexing and search of annotations is informedby the recent literature on semistructured data.However, linguistic databases are unlike mosttypical semistructured data sets (e.g., sets of XMLdocuments) in a number of respects ?
these includethe fact that the dataset has a very large schema(tens of millions of distinct paths from root node toterminal symbols), long path lengths, a need forefficient handling of queries containing wildcards,and a requirement that all valid results be retrieved.On the other hand, in this application incrementalupdating is not a requirement, and neither is 100%precision: results can be overgenerated and thenfiltered using a less efficient comparison tools suchas tgrep2.
Currently the indexing scheme followsViST (Wang et al, 2003), an approach based onsuffix trees that indexes structure and contenttogether.
The variant implemented in the LSEignores insufficiently selective query branches, andachieves more efficient search by modifying theordering within the structural index, creating an in-memory tree for the query, ordering processing of35query branches from most to least selective, andmemoizing query subtree matches.4 Status and Recent DevelopmentsThe LSE ?went live?
on January 20, 2004 andapproximately 1000 people have registered andtried at least one query.
In response to a recentsurvey, several dozen LSE users reported havingtried it more than casually, and there are a dozen orso reports of the LSE having proven useful in realwork, either for research or as a tool that wasuseful in teaching.
Resnik et al (2005) describetwo pieces of mainstream linguistics research ?one in psycholinguistics and one in theoreticalsyntax ?
in which the LSE played a pivotal role.The LSE software is currently beingdocumented and packaged up, for an intendedopen-source release.2  In addition to continuinglinguistic research with the LSE, we are alsoexperimenting with alternative indexing/searchschemes.
Finally, we are engaged in a projectadapting the LSE for use in language pedagogy ?specifically, as a tool assisting language teachingspecialists in creating training and testing materialsfor learners of Chinese.
For that purpose, we areexperimenting with a built-in collection of ChineseWeb documents that includes links to their Englishtranslations (Resnik and Smith, 2003).AcknowledgmentsThis work has received support from the National ScienceFoundation under ITR grant IIS01130641, and from the Cen-ter for the Advanced Study of Language under TTO32.
Theauthors are grateful to Christiane Fellbaum and Mari BromanOlsen for collaboration and discussions; to Rafi Khan, Sau-rabh Khandelwal, Jesse Metcalf-Burton, G. Craig Murray,Usama Soltan, and James Wren for their contributions to LSEdevelopment; and to Doug Rohde, Eugene Charniak, AdwaitRatnaparkhi, Dekang Lin, UPenn?s XTAG group, Princeton?sWordNet project, and untold others for software componentsused in this work.ReferencesBard, E.G., Robertson, D. and A. Sorace.
Magnitudeestimation of linguistic acceptability.
Language72.1: 32-68, 1996.2 Documentation maintained at http://lse.umiacs.umd.edu/.Christ, Oli.
A modular and flexible architecture for anintegrated corpus query system, COMPLEX'94, Bu-dapest, 1994.Corley, Steffan, Martin Corley, Frank Keller, MatthewW.
Crocker, and Shari Trewin.
Finding SyntacticStructure in Unparsed Corpora: The Gsearch CorpusQuery System, Computers and the Humanities, 35:2,81-94, 2001.Cowart, Wayne.
Experimental Syntax: Applying Objec-tive Methods to Sentence Judgments, Sage Publica-tions, Thousand Oaks, CA, 1997.Culicover, Peter and Ray Jackendoff.
The view fromthe periphery: the English comparative correlative.Linguistic Inquiry 30:543-71, 1999.Elkiss, Aaron.
A Scalable Architecture for LinguisticAnnotation.
Computer Science Undergraduate Hon-ors Thesis.
University of Maryland.
May 2003.Fletcher, William.
Making the Web More Useful as aSource for Linguistic Corpora, North AmericanSymposium on Corpus Linguistics, 2002.Kehoe, Andrew and Antoinette Renouf, WebCorp: Ap-plying the Web to linguistics and linguistics to theWeb, in Proceedings of WWW2002, Honolulu, Ha-waii, 7-11 May 2002.Adam Kilgarriff, Roger Evans, Rob Koeling, DavidTugwell.
WASPBENCH: a lexicographer's work-bench incorporating state-of-the-art word sense dis-ambiguation.
Proceedings of EACL 2003, 211-214,2003.Koenig, Esther and Lezius, Wolfgang, A descriptionlanguage for syntactically annotated corpora.
In:Proceedings of the COLING Conference, pp.
1056-1060, Saarbruecken, Germany, 2002.Schuetze, Carson.
The Empirical Base of Linguistics,University of Chicago Press, 1996.Sorace, Antonella and Frank Keller.
Gradience in Lin-guistic Data.
To appear in Lingua, 2005.Philip Resnik and Noah A. Smith, The Web as a ParallelCorpus, Computational Linguistics 29(3), pp.
349-380, September 2003.Philip Resnik, Aaron Elkiss, Ellen Lau, and HeatherTaylor.
The Web in Theoretical Linguistics Re-search: Two Case Studies Using the Linguist's SearchEngine.
31st Meeting of the Berkeley Linguistics So-ciety, February 2005.H Wang, S Park, W Fan, and P Yu.
ViST: a dynamicindex method for querying XML data by tree struc-tures.
ACM SIGMOD 2003.  pp.
110-121.36
