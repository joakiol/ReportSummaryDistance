281965"International Conference on Computational Linguistics"MORPHISM:  A SYMBOLIC  LIST PROCESSING LANGUAGEVandenbur gh Harold R.Laboratoire de Calcul AutomatiqueFaculte ~ des Sciences2, Place PasteurRENNES - FRANCE., ~ .,.
~ ~ !VANDENBUR.GHMORPHISM:  A SYMBOLIC LIST PROCESSING LANGUAGEIABSTRACTWith the formal study of natural languages, we have obtainedsome residual results which greatly increase our power  of logicalmanipulation.
Coupled with a computer, our language extendsenormously  the external logic of our computing device.
This paperis concerned with a well-defined symbolic list processing languageand a set of operators for this language.
These operators, which wecall morph isms,  are themselves operators thereby giving us anindefinite nesting ability.
We have defined a schematic representationof'our operators (called a comb-scheme)  and have then proceeded todescribe a number ing technique which allows us to use these operatorswith a computer.
Since our operators and lists are defined at thetime of execution, our ability to change them is unlimited.The pattern of this paper is to build up f rom an alphabet to words,then non-connected words, then lists and the operations on lists andfinally operations on the operations.
We have taken, what we hope tobe, descriptive examples in linguistics and non-linguistical applicationsin the hope of being representative of our language and easily under-standable.VANDENBURGH 1.MOP,.PHISM: A SYMBOLIC LIST PROCESSING LANGUAGEIn t roduct ionWe at the Facult~ des Sciences of the Umvers l te  de Rennes  areinterested in the mathemat ica l  study of languages.
Since we have acomputer  (1620), it is only natural that we attempt to combine  thetwo.
With languages being our ma jor  interest, we find that an extensivestudy of lists and symbolic list processing techniques will yield a mostpowerful and broad spect rum of results when applied to a computer.It appears that p rob lems involving natural languages and certain typesof mathemat ica l  p rob lems are computer  solvable when list processingtechniques are applied to them.
There  are also linguistical p rob lemswhich yield beneficial results when they are approached in this manner .We are therefore going to define: lists, operations on lists (which wecall morph isms) ,  and a comb-scheme which allows us to manipulatethe lists and morph isms;  this scheme gives us the ability to manipulatea lmost  any pattern that can be handled in a logical manner  (in linguisticusage, the te rm logical will refer to letters, words, sentences,phonemes;  in a predetermined or random occurrence).We have defined our operators in such a manner  that we  allow foran indefinite nesting; adding to a comput ing mach ine  an external logicalsystem.
Also, our operators, in the computer,  are defined at p roces~ing time so our ability to change them at execution time is unlimited.This paper can be considered to be divided into four sections.Part one defines our terms and gives definitions for such things as analphabet, lists, words, non-connected words, etc.
Part two defines amorph ism and our operators on lists.
Part three shows our comb-scheme.
Part four consists of examples:  in linguistics; an example  inthe logical generation of a flow d iagram into a computer  program;  andfinally, an example  of the solution of a mathemat ica l  p rob lem (thearithmetic operations on polynominials of n variables).VANDENBURGH 2.I.
DefinitionsI.
1 Words  and SymbolsSince we are using a computer ,composed of:let us define our alphabet to bethe Latin capital lettersthe blank (#) for notational purposes  but on printed page a blank.the punctuation marks  .
and ,- the digitsexcluding: = - $ / + @ ( ) and 0 wh ich  is also acceptable to the computer .I.
Z Non-connected  wordsLet us put in parallel the Latin phrase:nec adulatoribus latus praebesand its F rench  equivalent:et tune  pretes pas le flanc aux flatteurs;The  Latin word  nec corresponds,  in French,  to the three non-consecutive words  e_t ... n.e ... pa_.~s and the Latin word  praebescor responds  to tu ... pratesThus  it appears  that for the words  of a language, on the same levelas words,  there is a series of words  not necessar i ly  consecutive: thenon-connected  words .
For  a non-connected  word,  the components  willbe separated by the symbol:  - .
For  example :ATA - BP,_IQUERI - DO -are non-connected  words.
The  first has two components  and the secondhas three components .1.
3 Comb-schemeIn the  fo rmulas ,  as  in  a lgebra ,  we des ignate  a var iab le  by x (and  ,eventua l ly  in terven ing  var iab les  by  Xl ,  x 2 ' ' "  ); a non-connected  wordof  N components  w i l l  be schemat ized  by  a comb or  comb - schemeVANDENBURGH 3.
(eventually t rans formed into a number )  of N teeth ordered f romleft to right (eventually numbered  f rom 1 to N) such that the firsttooth represents the first component,  the second tooth the secondcomponent,  etc.1 Z 3 4 5 6i.
4 Lists of non-connected words;We will separate the lists of non-connected words  by a / .example:ForRA / TA  - PLAN / PLAN - PLANis a list of three non-connected words: the first of one component;the other two, two.
We will schematize the list by:-ior if need be by:1 Z 3or again by:i Z 3I Z i Zi.
5 Designation of lists and their typesWe will designate a list by a symbol  (name, a set of lettersand digits).
We will enclose the symbol  by the sign @ .
This avoidsVANDENB URGH 4.confusing the name of a list with elements of the list e. g.@ABS@ = A - B / C / D - E - F where  AB5 is an e lement (or wordof our alphabet); but @AB5@ designates a list.
The  list is:A -B  /C  /D-E -F .It  shou ld  be ment ioned that  a l i s t  can  be recurs ive :  it mayconta in  a l i s t  ( i .e .
the name of the l i s t  enc losed  in @ s igns  wh ich ,of course ,  re fers  to another  l i s t ) .A type of l i s t  wi l l  be ind icated ,  not by a ser ies  of combs  wh ichare  not  par t  of a keyboard ;  but by the par t i cu la r  l i s t  of the typewhere  a l l  of i ts  components  a re  empty ;  enc losed  by two @ s igns .For  ins tance ,@-/ / - -@designates a list schernatized by:i2.
Morph isms,  List operators, and comb construction2.
1 Morph isms or  operat ions  on l i s t sLet  @ L IST 1 @, and  @ L IST Z @ be two l i s t s .
We wi l l  de f inethe operat ion  juxtapos i t ion  (put t ing  them s ide by s ide)  wh ich  we wi l ldesignate by the sign / .
For  example:@ L IST  1 @ / @ L IST  Z @.In a l ike manner ,  we wi l l  use  the notat ion  - to show the inser t ionof a word  (o r  l i s t )  into another  l i s t .
For  ins tance  the express ion :A -  /B -C-@X@/@Y@UTVANDENBUP~GH 5.i f  we def ine :@X@:D-E  /F /G-H@ Y @ = T and becomesA - / B - C - D -  E / F / G -  H-  TUTZ.
Z List ordering and comb scheme constructio nLet us consider the following F rench  sentence.je ne veux pa_._~s.It is written in our alphabet as:JE#NE#VEUX#PAS.and this constitutes a word  in our alphabet.
It perhaps may beconstructed with the aid of the following non-connected words:(i) JE  - VEUX(2) NE  - PAS(3) # (non-connected word  of one component)(4 )  .these words, thus ordered, constitutes a llst schemat ized by :1 Z 3 4JShuffled according to the following scheme:  the non-connected wordsof the list, each one taken once or many times (the @ is taken threetimes), is shuffled into the components  of one against the other: thusa juxtaposition of the various components  in the order where  thepreceding shuffling places them.VANDENBUKGH 6.Z3 3213 441- J1The f i r s t  l ine  of  the schemat ic  represents  the l i s t  f rom wh ichwe s tar ted .
We wi l l  ca l l  it the source  of the morph ism.The second l ine  represents  how we have  shuf f led  the var ious  teethof the source .
We w i l l  ca l l  i t  the graph  of the morph ism.The th i rd  l ine represents  the non-connected  word  (here  of  as ing le  component ) .
We wi l l  ca l l  it the ta rget  of the rnorph ism.The three  l ine  schemat ic  represents  the morph ism.It  shou ld  be c lear  that  s ince  the f i r s t  l ine  of  the schemat icrepresents  a l i s t ,  the morph ism can operate  on any  l i s t  of  th is  type .Thus,  the list:A -B  /C -D/E /FA E C E B E D Fwi l l  becomeThe morph ism conserves  in each  non-connected  word  the orderof  i ts  components  ( JE  p receeds  VEUX, etc .
).
Th is  is  a cond i t ionwe may or  may not impose  on a morph ism.
I f  we impose  it,  we aresay ing  that  it is  fo rb idden  to c ross  the  teeth  of the combs .Let  us note that  we cou ld  a l so  have const ructed  the sentence :je  ne veux pas  .by starting with the list:JE  # - VEUX / NE  # - # PAS / .VANDENBURGH 7.which yields the following morphism:I.
Z .
3E ,I i ~ I ILet  us br ie f ly  cons ider  the  fo l low ing  German sentence:Du ra~nst  d ieses  e in  .We cou ld  de f ine  it  w i th  the fo l low ing  l i s t :DU - ST / E IN  - R.AUlVi / D IESES / # / .f rom which  we obta in  the fo l low ing  morph ism.<#9-i .I~.
3 L IiHere  the morph ism commutes  the teeth  of  the second combof  the  source .1VANDENBURGH 8.2.
3 Numerotiz ing the morphisrr~It is more  convenient to use numbers  instead of teeth and combsfor the input to a computing machine.
We have therefore designed thefollowing type of number ing system for our morphisrns.We will define a morph ism by a symbol  (set of letters and digits).We shall p1"ecede this symbol  by the sign $.
For  example:$ PS Iwill designate a morph ism.Let @A @ be a list of the source type of $ PSI; the resultantlist of @ A @ transformed by the morph ism will have the followingnotation:$ PSI ( @A @).The morph ism itself will be notated by the following type of itssource list between two $ written as a series of integer tripletsrepresenting the series of teeth of the graph: the combs  of the graphbeing ranked in the order of the encounter of their first teeth goingfrorn left to right.
.%11 of the teeth of the graph will be representedby three integers each one being separated by a comma:i) the rank of the comb of the graph to which it belongs;Z) the rank of the corresponding comb of the graph;3) the rank in the comb of the source of the tooth, correspondingto the given tooth of the graph.The  target and the correspondence between the graph will beindicated by the symbols- and /placed between the triplets:two triplets separated by the sign., correspond to a similar toothof the target;VANDENBUKGH 9.two triplets separated by the sign - correspond to two differentteeth of the target belonging to a single comb;two triplets separated by the sign / correspond to two differentteeth belonging to two different combs;two triplets separated by the sign .
will correspond to the sametooth of the target.For  example, let us describe the rnorphisrn for the previouslymentioned German sentence: du ra\[h~nst dieses ein.
We shall callit $ PHI  and schernatize it as follows:i 2_ 3 WI ~ ..
I L I 1~ Z~ ~ J$PHI=@ - / - /// @ $ I, i, i.
Z, 4, 1.3, Z,Z.
I, I,Z.
4,4, 1.5,3, 1.6,4, 1.3, Z, 1.7,5, i$For  a second example, let $ PSI be the rnorphisrn schernatized by:I ~- 3 %I I 1 I IZ-I1 IIl$ PS I=@ - / - / /@ $I, 1,3.
Z, 3, 1.3, Z, 1.4,3, i-i, I,Z.
5,3, 1.3, Z,Z.
6,4, 1--/7,4;15VANDENBUKGH i0.In this example ,  the th i rd  tooth of the f i r s t  comb of the ta rgetdoes not cor respond to any tooth of the graph;  th is  is ind icated  inthe ser ies  of in teger  t r ip le ts  by the empty  components  hav ing thes ign / .When we forb id  the c ross ing  of the teeth in the comb,  the th i rdnumber  of the t r ip le t  represent ing  a tooth of the graph  is ambiguousfor  our  notat iona l  purposes .
We may,  there fore ,  reduce  our  notat ionf rom t r ip le ts  to coup lets .Thus $ PSI would become:$ PSI = @ - /-// @ $ i, i.
2,3.3,2.4,3-i ,  1.5,3.3, 2 .6,4- /7,4 5 .Z.
4 Operat ions  on the l i s t s  by morph ismsIn a prec ise  manner ,  we can show that the scheme of a morph ism$ 1AO is determined  by the input of the l i s ts .
The f i r s t  hav ing the notat ion :@x@composed of word-s igns  d i f fe r ing  f rom each o ther  and such that $ ROcan operate  on i tse l f ;  the second,  t rans formed f rom @X @ by $ ROand hav ing the notat ion:@Y @= $Ro(@x@).The source  and the ta rget  of the scheme is none o ther  than theschemes  of @X @ and @Y @ respect ive ly .
Th is  is due to the graphthat  is g iven by the comb-b ind ings  of @ Y@ as each  one can be ident i f ied ,tooth by tooth, f rom a comb of the source .In ef fect ,  the comb schemes  of @ X @ co inc ide  with the comb-b ind ings ;by ser ies ,  if two le t te rs  of the substance  @ Y @ of @ Y @ have the samepath.
The combs of a graph of $ 1%O are  none o ther  than the comb-b ind ingsof @ Y @ in pos i t ion .
Moreover ,  s ince al l  the word  s igns of @ X @ ared is t inc t  between,  we have the ab i l i ty  to d i s t ingu ish  the combs  f rom eachother .
Thus,  we know which  comb of the source  cor responds  to whichcomb of the graph;  and in this comb of the source  which tooth cor respondsVANDENBURGH II.to which tooth under consideration; equally, we know, thanks to the -and / , the group of teeth of the graph which has joined the abovebracketing of the teeth of the target.We can, therefore, reconstitute the complete scheme of themorph ism $ I%O.Here  is an example.
@x@=@Y@-!IU \ [ - / I  1!A B1.
.
.
.
+The morph ism $ RO which t rans forms @ X @ into @ Y @for its scheme:2.
2 4-I I I 1 1 I~ 2.
3|2-has%-I@Y@=$Ro(@x@)VANDENBUR.GH 12.For a second example let @ M @ be:L !
: \[" I I I "1N I ~l .
2.and the word is transformed by the morph ism $ IZO of the following scheme:9.. "~3, , , ,  , , , ,I~..\]2.JI33 2.  t1-  ~ .
jf rom the list:iii i i ii/L ' J,,g iv ing :  .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.@x@=@Y@=!
: 7.
X~_ _  _ _is the word @ M@ is none other than:SRO(A / @X@ / @Y @)where A / @ X @ / @ Y @ designates the product of a juxtaposition:VANDENBURGH 13.A / '  / "?
X z " -  "A z - -  J L !
:The above is simply to say that there always exists aform of this comb-scheme and list type structure.
Our  canonicalform (going f rom left to right) for:Ii l l!
!canonicalis as follows:$RO(A /@X@/@Y@).2.5 Operators defined f rom morph ismsWe are going to define f rom the rnorphisms some operators on setsof lists.
We will show later that the operators are themselves morph isms:therefore they are recursive and this then gives us the ability to have anextended logic for our computing language.There are three operators for our morph isms:  the / product,the // product and the ~ product (or composition).I.
The / product  of two morph ismsLet  $ RO and $ MU be two morph isms.fo l lowing notat ion:The / product has the( $R.O / SMU)and is defined for any list @ X @ :VANDENB URGH 14.
($1%0/$MU)(@X @} = $RO ( @ X @) /$MU(@ X @ )( i .e .
the l i s t  rans formed by $1%O/$MU of @ X @ is the product  ofthe juxtapos i t ion  of l i s t s  t rans formed f rom @ X @ by $ I%O and $MU).II.
The / /product  of two morph ismsLet $RO and $KHI  be two morph isms./notation.We shall use the following($RO//$KHD.For  any l i s t s  @X @ / @ Z @($ROIISKHI)(@X@ I@Z@)=$RO(@X@) I $KHI (@Z@)It should be mentioned that the // product of two morph isms isdefined only when they are f rom the same source.III.
The * product  (or  composit ion} of two morph isms.Let  $1%O and SPI be two morph isms such that the source  of $RO isident ica l  to the ta rget  of $PI.
The * product  has the fo l lowing notat ion:($Ro ?
SpI)For  any l i s t  @ V @($RO * $PI}( @ V @ ) = $RO($PI(  @ V @ ))It should be mentioned that since the * product of two morph ismsis defined only if the source of $RO is identical to the target of SPl, itthus transforms any list of source type of $PI into a list of target type$ao.VANDENBURGH 15.Z.
6 _Product of morph is rns  are  themse lves  morph ismsThe operators  def ined in Z.
5 / product ,  / /  product ,  and ':'-p roduct  of morph isms are  morph isms.In effect,  they can be represented  by schemes  which are  schemesof morph isms.\The scheme ($RO/$MU) is const ruc ted  as fo l lows:The f i rs t  l ine is the source  common to the schemes  of $1%Oand SMU.The second and are  those of SILO and $MU p laced  side by s ide;those of $MU to the r ight  of those of $1%O.For  instance, given:$1%O: $MU:I , I l ,I\[ I k IThe scheme of ($RO/$MU) is as fo l lows:tVANDENB URGH 16.The schemes  of ($RO/ /$KHI )  a re  const ructed  as fo l lows:We mod i fy  the number  of the combs  of the scheme of $KHIwhi le adding to each  of them the number  of combs  of the sourceof $RO; thus,  we can p lace  the schemes  of $1ZO and $KHI s ide bys ide;  those of $KHI to the r ight  to those of $RO.For  ins tance ,  given:$1%O: $KHI:I 1II qilThe scheme for ($RO//$KHI)  is as follows:2.
.X1 I L L I il9.
.1IIVANDENBURGH 17.The scheme of ($RO ~',' $PI) is const ructed  as fo l lows:The source  is that of $PI.The graph  is that of $RO where  we rep lace  each  comb (which isa l so  a comb of the ta rget  of $PI) by the sys tem of combs  to which itcorresponds in the graph of $PI.The target is that of SRO.For instance, given:$R.O: $PI:Ii I I I|l t- I tThe scheme of ($R.O '~IIIII I I$PI) is as follows:IIl ~AVANDENBURGH 18.To  const ruct  the  scheme of the ~ product  of  $RO and  SP I ,we can  a l so  character i ze  it  by i ts  ac t ion  on a l i s t  @ X @ of sourcetype  of $P I :  un ique ly  composed of word -s igns  d i f fe rent  f rom eacho ther .
For  that ,  we w i l l  make  $P I  ac t  on @ X @, then  SRO on$PI ( @ X @ ).Retaking the previous example; given:@x@=SPI( @ x @ ) -- -  %"f IA'~ A~ A 3 A~7.f rom which is defined the scheme for ($RO ?
$pl).The different products /, //, and * defined between thernorphisms are not associative between themselves.
They areassociative when there intervenes only the product of a single sort(/, //, or ~ ) which permits in this case the suppression ofparenthesis.
Thus:(($RO ':' $PI) * $XI) = ($RO * ($PI * $KHI  )) may alsobe written as:$RO * $PI * XI .VANDENBURGH 19.3.
Practical application of symbol ic  list p.roces.sing '3.
i IntroductionThe actual p rogramming of a symbol ic list processing systempresents many interesting and varied prob lems and possibilities.The  power  of this type of list manipulation opens the way  to manyhitherto unsolvable (computer -wise)problems.Now that we have defined our language, it naturally behooves usto ask how, and to what, we  can apply it.
We are going to illustratethree different types of p rob lems to show that we have a general purposelanguage.
The first will be a simple example  of list processing manipula-ting variables in algebra.
The second will be an application ofmorph isms to generate FOP~TRAN (or any symbol ic p rogrammingsystem) in the same general manner  of SHADOW but with the addeddifference that our input is a list instead of a single variable.
The thirdexample  will be an application to the natural languages.3.
2 Operating on polynominials using symbolic list processingWe have written a program for the 1620 computer  in FORTRANwhich allows us to operate on sets of po lymmin ia l s  of N variablesvaried to a power  p. The only limitation being that of memory  size i. e.N p size of memory .
If we consider an external memory  source suchas tapes or discs this does not become much of a limitation.The  operations we are treating at present are addition, subtraction,multiplication and raising to a power.
We are considering thedifferenciation but that we  will leave to a later date.
Mathematical lyexpressed, we are doing the following:Let P I (X l ,  X Z ..... XN)  and Pz(XI,  XZ, ..... XN)be polynominials when the variables can be raised to the j power  and allcombinations.
An  example  will clarify this section.
Let:P1PZ3 2 3= X + 5X 6X + i + Y - CY + 4XY= -3Y 2 6X2y  + XVANDENB URGH Z0.2We are able to compute  P l  ~:= PZ' P1  + P2  ' and any combinationof these pclynominials.
It turns out that this can be handled ve~.yeasily as a function of lists.
Our  limitations, at Rennes,  being simplymemory  size as we need to set up tables for the coefficients anu the16Z0 is rather limited in memory  capacity and lists are very heavyusers of tables.
This limitation would be relatively nil, if we had anexternal memory  device such as discs or tapes.3.3 Generating computes .programs f rom flow charts.A practical application of the nnorphisms is the translation offlowcharts into programs.
This section is therefore concerned withthat problem.A typical flowcharting or p rogramming problem.
Let usconsider that we wish to solve the following general type problem:3Z= ~$'~ Yx = 0.(.
i)z0.0 and Y = -4.
O( I.
0)8.
0I REAm "~I~o "%/o T'the flowchart would appear to be of the following form(since there areno fixed rules for the logical flow or organization of a computer  solvableproblem, this flow chart is as good as any).I~ -  x= >~ +o.1 F"1-"f,-where: X 0 = Z0.1 = 0 , XhdAXY0  = -4, YlViAX = 9 for our original problem.VANDENBURGH Z i.3.
4 The ccmb-schemat icLet us number  each box f rom left to right.
Now let us draw 9teeth and number  then as follows (we need the nineth as there are twopossible flows for the lost tooth).l lII111i Z 3 4 5 6 7 8 9It follows that the 9th tooth meets  the first,i l l  L1Z 3 4 5 6 7 8 9so let us join them:Also,them,i,1 2 3the 8th meets  the 3rd, and the 4th meets  the 6th.we will have:i ll kk4 5 6 7 8If we  joinNow,  for the sake of clarity, and to take advantage of our comb-scheme,we will re -number  them as follows:4 6 4 5 1 Z 3 3VANDENB URGH ZZ.3.
5 The  l i s t  of our  f lowchar tFor  t~e l i s t  of our  f lowchar t ,  it is necessary  to wr i te  on ly  theimperat i -~e  ins t ruct ions .
We wi l l  generate  the IF  and  the r ightparantheu!s  wi th the cor rect  f low f rom our  morph ism.
There fore ,the l i s t  is as  fo l lows :READ I00, X0,X :X0Y=Y0Z = SQP~TF (X)Y=Y+I .0Y - YIVlAXX=X+0.1X - XMAXOXIVIAX, YO, YMAX* Y * * 3the program will also generate an END statement.The  type of list is:I/lll--I/--I/Using the definition of a list as in section two, we  have:@ MU @ = ~EAD i00, XO, XlVIAX, YO, YMAX/X=x0/Y=Y0/Z=SQRTF(X)* Y * * 3 /Y=Y+I .0 /Y -YMAX/X=X+0.
I /X -XMAX/ /0(the notation 0 is to signify the end of a list since a list may be ofvariable length.
For  descriptive purposes, we  will continue to use the /to delimit an e lement of a list and a - (dash) to denote an inse~t.
Inpractice, (for this particular problem), we  cannot use these symbo ls  asthey are used by FORTRAN and we cannot distinguish whether  they arefor FORTRAN or for our list processing language.VANDENB U l~GH Z3.3.6  The  Morph ismAs  ment ioned$PI(  @ MU @ ) = $i, I.
2, I.
3, 1.4, 1.5, i.
4, Z.
6, 1.3, Z. I, Z.$ orSPI(  @MU @)= @ /////--//--//@= $i, I.
Z, 1.3, 1.4, 1.5, I.
4, Z.
6, 1.3, Z.
1,2 5(Since a morph ism may be of any length, we  must  also define its length)3.7 Decompos ing  the morph ismFor  convenience, let us re-order the morph ism into tabular form.i B C1 1 1Z Z 13 3 14 4 15 5 16 4 Z7 6 18 3 Z9 1 1We can scan the list C until we come to an entry Z.
This willcause an IF( to be generated.
We follow this by the entry in the list(in our case Y -YMAX) .
This is followed by a right paranthesis.
TheFORTRAN statement numbers  are respectively the correspondingentry for \]5 taken twice (separated by commas)  and the value of i+l.This is true because all orders following an IF must  have a path sothey must  be numbered  i.e.
carry a statement number .3.
8 Advantages and power  of symbol ic list processing with morph ismsWith  the  example  shown here ,  the  rea l  power  does  not  come to l ight .However ,  there  are  some th ings  we can  do here .
We can  take  advantageof  inser ts .
We can  inser t  e lements  in to  our  l i s t  by  add ing  an  e lement  tothe  end  of  the  l i s t  and  fo r  put t ing  a dash  in  the  l i s t ;  o r  we can  even  inser tVANDENBURGH Z4.a list /s within our original list by inserting the name of a new list /senclosed in two @ signs.It should also be ment ioned  here that it is not necessary  to punchredundant coding in the above example.
It suffices s imply to add thenumber  of the e lement  to the morph is rn  list.
For  instance in ourexample  if we  wanted  to do another series of calculations over thesame range, we need only punch a new entry for Z (or some othervariable with another symbol ic  name)  and repeat the tables.With a little imagination, it is easy to see that if we  can generatean IF statement, we  can search to find out if our variable starts withthe letters i, j, k, i, m,  or n and generate a DO statement.Unfortunately, this, despite IBM's  claim of FORTRAN's  compatibilitybetween machines ,  creates the prob lem of being mach ine  orientede.g.
the 704/7090 etc.
permit  a DO loop to have a max imum value of3Z, 767 while the dec imal  mach ines  will easily accept 99,999.We could also attack the logical schemat ic  of a flowchart withIF statements but this poses to the prob lem of ordinary usage andbecomes  completely computer  oriented.
For  example,  we can generatea statement of the following type:(i) IF ( ) ~<, ~,(Z) IF ( ) ~ , ~ ,0<(3) IF ( )o~ , ~ , "~Which  pattern shall we  select?
We can't accept the third one for abinary mach ine  as floating point equality is a rather elusive an imaldue to binary round off.This example  was  chosen to demonstrate  that with list process ingwe can generate FORTRAN programs.VANDENBURGH Z5.3.
9 Linguistic TransformationsLet us state the following rules (not quite foreign to Ingwes):@ SEN @ ----->$LA ",~ $RO ( @ SUB @ / @ VER @ )@ vE   @ ----->@ VER@ (i=0, l, Z, 3)I@ VER.
@--- - - -~$RO ( @ MOD.
@ / @ VER.
@ )J 3 1@ SUB @ - - - - -~# THEY-# HE-S# THE-L INGUISTS-@ VERO @----~# INSERT - # (or # CL IMB-UP  #... )@ MODI  @ ~ # BE-EN@ MOD2 @ - ->-# BE- ING@ MOD3 @ ------'~.# HAVE-EN$RO is a schuffling which out of two intercepted words makes  athird one, according to the following scheme:I: e.g.
$RO(A-B- /C -D)  = A-CBD$LA is a "junction" of the two components in one: e.g.
SLA(A-B)  = AB.VANDENB URGH 26.Now we can derive a sentence (morpho-phonenaic rules areomitted in our sketch, they happen to be useless for this example...).
@ SEN @ ~ $ L A  ,:~ $1%O (# THE # L INGUISTS  / $1%O(@ MOD3 @ / $1%O (@ MODZ @ / # INSE1%T )))@ SEN @------~$LA ~ $1%O ( @ SUB @ / $t%O ( @ MOD3 @ /$1%O ( @ MODZ @ / @ VEt%0 @ )))that is e. g.# THE # L INGUISTS  # HAVE # BEEN # INSE1%TING #or in the shape of a tree.
@ SEN @SLA ~'$RO@SUB @ I @ VEt% @# THE # L INGUISTS  @ VE1%3 @$ ao# HAVE-EN I @ Vm1%z @, $1%o# BE- ING / @ VER0 @# INSERT-#VANDENBURGH 27.BibliographyJ.P.
Benz~cri, 3 ?
lecons(course and publication de la Faculte desSciences de l'Universite de Rennes, France ).~'  ,p .F.
Benzecri; Linguistique MatHematlque (publication de la Facultedes Sciences de l'Universit~ de Rennes, France ).See also paper being presented at the 1965 InternationalFederation of Information Societes Congress (IFIPS) in New York?
.
by Professor J.P. Benzecrl ~articularment for linguistical applications.
