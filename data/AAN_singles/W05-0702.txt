Proceedings of the ACL Workshop on Computational Approaches to Semitic Languages, pages 9?16,Ann Arbor, June 2005. c?2005 Association for Computational LinguisticsA finite-state morphological grammar of HebrewShlomo YonaDepartment of Computer ScienceUniversity of Haifa31905 Haifa, Israelshlomo@cs.haifa.ac.ilShuly WintnerDepartment of Computer ScienceUniversity of Haifa31905 Haifa, Israelshuly@cs.haifa.ac.ilAbstractMorphological analysis is a crucial com-ponent of several natural language pro-cessing tasks, especially for languageswith a highly productive morphology,where stipulating a full lexicon of sur-face forms is not feasible.
We describeHAMSAH (HAifa Morphological Systemfor Analyzing Hebrew), a morphologicalprocessor for Modern Hebrew, based onfinite-state linguistically motivated rulesand a broad coverage lexicon.
The setof rules comprehensively covers the mor-phological, morpho-phonological and or-thographic phenomena that are observablein contemporary Hebrew texts.
Relianceon finite-state technology facilitates theconstruction of a highly efficient, com-pletely bidirectional system for analysisand generation.
HAMSAH is currentlythe broadest-coverage and most accuratefreely-available system for Hebrew.1 Hebrew morphology: the challengeHebrew, like other Semitic languages, has a richand complex morphology.
The major word forma-tion machinery is root-and-pattern, where roots aresequences of three (typically) or more consonants,called radicals, and patterns are sequences of vow-els and, sometimes, also consonants, with ?slots?into which the root?s consonants are being inserted(interdigitation).
Inflectional morphology is highlyproductive and consists mostly of suffixes, but some-times of prefixes or circumfixes.As an example of root-and-pattern morphology,consider the Hebrew1 roots g.d.l and r.e.m and thepatterns hCCCh and CiCwC, where the ?C?s indi-cate the slots.
When the roots combine with thesepatterns the resulting lexemes are hgdlh, gidwl,hremh, riewm, respectively.
After the root com-bines with the pattern, some morpho-phonologicalalternations take place, which may be non-trivial:for example, the htCCCwt pattern triggers assimi-lation when the first consonant of the root is t ord : thus, d.r.e+htCCCwt yields hdrewt.
The samepattern triggers metathesis when the first radical is sor e: s.d.r+htCCCwt yields hstdrwt rather than theexpected htsdrwt.
Frequently, root consonants suchas w or i are altogether missing from the resultingform.
Other weak paradigms include roots whosefirst radical is n and roots whose second and thirdradicals are identical.
Thus, the roots q.w.m, g.n.n,n.p.l and i.c.g, when combining with the hCCChpattern, yield the seemingly similar lexemes hqmh,hgnh, hplh and hcgh, respectively.The combination of a root with a pattern producesa base (or a lexeme), which can then be inflected invarious forms.
Nouns, adjectives and numerals in-flect for number (singular, plural and, in rare cases,also dual) and gender (masculine or feminine).
Inaddition, all these three types of nominals have twophonologically distinct forms, known as the abso-lute and construct states.
Unfortunately, in the stan-dard orthography approximately half of the nomi-1To facilitate readability we sometimes use a transliterationof Hebrew using ASCII characters:a b g d h w z x v i k?
?
?
?
?
?
?
?
?
?
?l m n s y p c q r e t?
?
?
?
{ ?
?
?
?
?
?9nals appear to have identical forms in both states,a fact which substantially increases the ambigu-ity.
In addition, nominals take pronominal suffixeswhich are interpreted as possessives.
These inflectfor number, gender and person: spr+h?sprh ?herbook?, spr+km?sprkm ?your book?, etc.
As ex-pected, these processes involve certain morphologi-cal alternations, as in mlkh+h?mlkth ?her queen?,mlkh+km?mlktkm ?your queen?.
Verbs inflect fornumber, gender and person (first, second and third)and also for a combination of tense and aspect,which is traditionally analyzed as having the valuespast, present, future, imperative and infinite.
Verbscan also take pronominal suffixes, which in this caseare interpreted as direct objects, but such construc-tions are rare in contemporary Hebrew of the regis-ters we are interested in.These matters are complicated further due to twosources: first, the standard Hebrew orthographyleaves most of the vowels unspecified.
It does notexplicate [a] and [e], does not distinguish between[o] and [u] and leaves many of the [i] vowels un-specified.
Furthermore, the single letter ?
w is usedboth for the vowels [o] and [u] and for the con-sonant [v], whereas ?
i is similarly used both forthe vowel [i] and for the consonant [y].
On top ofthat, the script dictates that many particles, includ-ing four of the most frequent prepositions (b ?in?,k ?as?, l ?to?
and m ?from?
), the definite articleh ?the?, the coordinating conjunction w ?and?
andsome subordinating conjunctions (such as e ?that?and ke ?when?
), all attach to the words which imme-diately follow them.
Thus, a form such as ebth canbe read as a lexeme (the verb ?capture?, third per-son singular feminine past), as e+bth ?that+field?,e+b+th ?that+in+tea?, ebt+h ?her sitting?
or even ase+bt+h ?that her daughter?.
When a definite nomi-nal is prefixed by one of the prepositions b, k or l,the definite article h is assimilated with the prepo-sition and the resulting form becomes ambiguous asto whether or not it is definite: bth can be read eitheras b+th ?in tea?
or as b+h+th ?in the tea?.An added complexity stems from the fact thatthere exist two main standards for the Hebrewscript: one in which vocalization diacritics, knownas niqqud ?dots?, decorate the words, and anotherin which the dots are missing, and other charactersrepresent some, but not all of the vowels.
Most of thetexts in Hebrew are of the latter kind; unfortunately,different authors use different conventions for theundotted script.
Thus, the same word can be writ-ten in more than one way, sometimes even withinthe same document, again adding to the ambiguity.In light of the above, morphological analysis ofHebrew forms is a non-trivial task.
Observe thatsimply stipulating a list of surface forms is not a vi-able option, both because of the huge number of po-tential forms and because of the complete inabilityof such an approach to handle out-of-lexicon items;the number of such items in Hebrew is significantlylarger than in European languages due to the combi-nation of prefix particles with open-class words suchas proper names.
The solution must be a dedicatedmorphological analyzer, implementing the morpho-logical and orthographic rules of the language.Several morphological processors of Hebrew havebeen proposed, including works by Choueka (1980;1990), Ornan and Kazatski (1986), Bentur et al(1992) and Segal (1997); see a survey in Wintner(2004).
Most of them are proprietary and hence can-not be fully evaluated.
However, the main limitationof existing approaches is that they are ad-hoc: therules that govern word formation and inflection areonly implicit in such systems, usually intertwinedwith control structures and general code.
This makesthe maintenance of such systems difficult: correc-tions, modifications and extensions of the lexiconare nearly impossible.
An additional drawback isthat all existing systems can be used for analysis butnot for generation.
Finally, the efficiency of suchsystems depends on the quality of the code, and issometimes sub-optimal.2 Finite-state technologyFinite-state technology (Beesley and Karttunen,2003) solves the three problems elegantly.
It pro-vides a language of extended regular expressionswhich can be used to define very natural linguis-tically motivated grammar rules.
Such expressionscan then be compiled into finite-state networks (au-tomata and transducers), on which efficient algo-rithms can be applied to implement both analysisand generation.
Using this methodology, a computa-tional linguist can design rules which closely followstandard linguistic notation, and automatically ob-10tain a highly efficient morphological processor.While the original Two-Level formulation(Koskenniemi, 1983) of finite-state technologyfor morphology was not particularly well suitedto Semitic languages (Lavie et al, 1988), mod-ifications of the Two-Level paradigm and moreadvanced finite-state implementations have beenapplied successfully to a variety of Semitic lan-guages, including Ancient Akkadian (Kataja andKoskenniemi, 1988), Syriac (Kiraz, 2000) andArabic.
In a number of works, Beesley (1996;1998; 2001) describes a finite-state morphologicalanalyzer of Modern Standard Arabic which handlesboth inflectional and derivational morphology,including interdigitation.
In the following sectionwe focus on a particular finite-state toolbox whichwas successfully used for Arabic.In this work we use XFST (Beesley and Kart-tunen, 2003), an extended regular expression lan-guage augmented by a sophisticated implementationof several finite-state algorithms, which can be usedto compactly store and process very large-scale net-works.
XFST grammars define a binary relation (atransduction) on sets of strings: a grammar mapseach member of a (possibly infinite) set of strings,known as the surface, or lower language, to a setof strings (the lexical, or upper language).
Theidea is that the surface language defines all and onlythe grammatical words in the language; and eachgrammatical word is associated with a set of lexicalstrings which constitutes its analyses.
As an exam-ple, the surface string ebth may be associated by thegrammar with the set of lexical strings, or analyses,depicted in figure 1.XFST enables the definition of variables, whosevalues, or denotations, are sets of strings, or lan-guages.
Grammars can set and use those variablesby applying a variety of operators.
For example, theconcatenation operator (unfortunately indicated bya space) can be used to concatenate two languages:the expression ?A B?
denotes the set of strings ob-tained by concatenating the strings in A with thestrings in B.
Similarly, the operator ?|?
denotes setunion, ?&?
denotes intersection, ???
set complement,?-?
set difference and ?*?
Kleene closure; ?$A?
de-notes the set of strings containing at least one in-stance of a string from A as a substring.
The emptystring is denoted by ?0?
and ???
stands for any alpha-bet symbol.
Square brackets are used for bracketing.In addition to sets of strings, XFST enables thedefinition of binary relations over such sets.
By de-fault, every set is interpreted as the identity relation,whereby each string is mapped to itself.
But re-lations can be explicitly defined using a variety ofoperators.
The ?.x.?
operator denotes cross prod-uct: the expression ?A.x.B?
denotes the relation inwhich each string in A is mapped to each string in B.An extremely useful operation is composition: de-noted by ?.o.
?, it takes two relations, A and B, andproduces a new relation of pairs (a, c) such that thereexists some b that (a, b) is a member of A and (b, c)is a member of B.Finally, XFST provides also several replace rules.Expressions of the form ?A->B || L _ R?
de-note the relation obtained by replacing strings fromA by strings from B, whenever the former occurin the context of strings from L on the left andR on the right.
Each of the context markers canbe replaced by the special symbol ?.#.
?, indicat-ing a word boundary.
For example, the expression?
[h]->[t] || ?
_ .#.?
replaces occurrencesof ?h?
by ?t?
whenever the former occurs before theend of a word.
Composing this example rule on an(identity) relation whose strings are various wordsresults in replacing final h with final t in all thewords, not affecting the other strings in the relation.XFST supports diverse alphabets.
In particular, itsupports UTF-8 encoding, which we use for Hebrew(although subsequent examples use a transliterationto facilitate readability).
Also, the alphabet can in-clude multi-character symbols; in other words, onecan define alphabet symbols which consist of several(print) characters, e.g., ?number?
or ?tense?.
Thiscomes in handy when tags are defined, see below.Characters with special meaning (such as ?+?
or ?[?
)can be escaped using the symbol ?%?.
For example,the symbol ?%+?
is a literal plus sign.Programming in XFST is different from program-ming in high level languages.
While XFST rulesare very expressive, and enable a true implementa-tion of some linguistic phenomena, it is frequentlynecessary to specify, within the rules, informationthat is used mainly for ?book-keeping?.
Due tothe limited memory of finite-state networks, suchinformation is encoded in tags, which are multi-character symbols attached to strings.
These tags11[+verb][+id]9430[+base]ebt[+root]ebt[+binyan]+Pa?al[+agr]+3p/F/Sg[+tense]+past[+verb][+id]1541[+base]ebh[+root]ebh[+binyan]+Pa?al[+agr]+3p/F/Sg[+tense]+past[+conj]e[+prep]b[+noun][+id]19804[+base]th[+gender]+M[+number]+Sg[+construct]+true[+conj]e[+prep]b[+noun][+id]19804[+base]th[+gender]+M[+number]+Sg[+construct]+false[+conj]e[+prep]b[+defArt][+noun][+id]19804[+base]th[+gender]+M[+number]+Sg[+construct]+false[+conj]e[+noun][+id]19130[+base]bth[+gender]+F[+number]+Sg[+construct]+false[+conj]e[+noun][+id]1379[+base]bt[+gender]+F[+number]+Sg[+construct]+false[+poss]+3p/F/Sg[+noun][+id]17280[+base]ebt[+gender]+F[+number]+Sg[+construct]+false[+poss]+3p/F/SgFigure 1: The analyses of the surface string ????
ebthcan be manipulated by the rules and thus propa-gate information among rules.
For example, nounsare specified for number, and the number featureis expressed as a concatenation of the tag numberwith the multi-character symbol +singular or+plural.
Rules which apply to plural nouns onlycan use this information: if nouns is an XFST vari-able denoting the set of all nouns, then the expres-sion $[number %+plural] .o.
nouns de-notes only the plural nouns.
Once all linguistic pro-cessing is complete, ?book-keeping?
tags are erased.3 A morphological grammar of HebrewThe importance of morphological analysis as a pre-liminary phase in a variety of natural language pro-cessing applications cannot be over-estimated.
Thelack of good morphological analysis and disam-biguation systems for Hebrew is reported as one ofthe main bottlenecks of a Hebrew to English ma-chine translation system (Lavie et al (2004)).
Thecontribution of our system is manyfold:?
HAMSAH is the broadest-coverage and mostaccurate publicly available morphological an-alyzer of Modern Hebrew.
It is based on alexicon of over 20,000 entries, which is con-stantly being updated and expanded, and its setof rules cover all the morphological, morpho-phonological and orthographic phenomena ob-served in contemporary Hebrew texts.
Com-pared to Segal (1997), our rules are probablysimilar in coverage but our lexicon is signif-icantly larger.
HAMSAH also supports non-standard spellings which are excluded from thework of Segal (1997).?
The system is fully reversible: it can be usedboth for analysis and for generation.?
Due to the use of finite-state technology, thesystem is highly efficient.
While the networkhas close to 2 million states and over 2 millionarcs, its compiled size is approximately 4Mband analysis is extremely fast (between 50and 100 words per second).?
Morphological knowledge is expressed throughlinguistically motivated rules.
To the best ofour knowledge, this is the first formal grammarfor the morphology of Modern Hebrew.The system consists of two main components: alexicon represented in Extensible Markup Language(XML), and a set of finite-state rules, implementedin XFST.
The use of XML supports standardization,allows a format that is both human and machinereadable, and supports interoperability with otherapplications.
For compatibility with the rules, thelexicon is automatically converted to XFST by ded-icated programs.
We briefly describe the lexicon insection 3.1 and the rules in section 3.2.3.1 The lexiconThe lexicon is a list of lexical entries, each with abase (citation) form and a unique id.
The base formof nouns and adjectives is the absolute singular mas-culine, and for verbs it is the third person singu-lar masculine, past tense.
It is listed in dotted andundotted script as well as using a one-to-one Latintransliteration.
Figure 2 depicts the lexical entry ofthe word bli ?without?.
In subsequent examples weretain only the transliteration forms and suppress theHebrew ones.<item dotted="???"
id="4917"translit="bli" undotted="???
"><conjunction type="coord"/></item>Figure 2: The lexical entry of bli ?without?12The lexicon specifies morpho-syntactic features(such as gender or number), which can later be usedby parsers and other applications.
It also lists sev-eral lexical proerties which are specifically targetedat morphological analysis.
A typical example is thefeminine suffix of adjectives, which can be one ofh, it or t, and cannot be predicted from the baseform.
The lexicon lists information pertaining tonon-default behavior with idiosyncratic entries.Adjectives inflect regularly, with few exceptions.Their citation form is the absolute singular mascu-line, which is used to generate the feminine form,the masculine plural and the feminine plural.
Anadditional dimension is status, which can be ab-solute or construct.
Figure 3 lists the lexicon en-try of the adjective yilai ?supreme?
: its feminineform is obtained by adding the t suffix (hencefeminine="t").
Other features are determinedby default.
This lexicon entry yields yilai, yilait, yi-laiim, yilaiwt etc.<item id="13852" translit="yilai"><adjective feminine="t" /></item>Figure 3: A lexicon item for yilai ?supreme?Similarly, the citation form of nouns is the ab-solute singular masculine form.
Hebrew has gram-matical gender, and the gender of nouns that denoteanimate entities coincides with their natural gender.The lexicon specifies the feminine suffix via the fem-inine attribute.
Nouns regularly inflect for number,but some nouns have only a plural or only a singu-lar form.
The plural suffix (im for masculine, wt forfeminine by default) is specified through the pluralattribute.
Figure 4 demonstrates a masculine nounwith an irregular plural suffix, wt.<item id="5044" translit="ewlxn"><noun gender="masculine"number="singular"plural="wt" /></item>Figure 4: A lexicon item for the noun ewlxn ?table?Closed-class words are listed in the lexicon in asimilar manner, where the specific category deter-mines which attributes are associated with the cita-tion form.
For example, some adverbs inflect forperson, number and gender (e.g., lav ?slowly?
), sothis is indicated in the lexicon.
The lexicon alsospecifies the person, number and gender of pro-nouns, the type of proper names (location, person,organization), etc.
The lexical representation ofverbs is more involved and is suppressed for lackof space.Irregularities are expressed directly in the lexi-con, in the form of additional or alternative lexi-cal entries.
This is facilitated through the use ofthree optional elements in lexicon items: add, re-place and remove.
For example, the noun chriim?noon?
is also commonly spelled chrim, so the addi-tional spelling is specified in the lexicon, along withthe standard spelling, using add.
As another exam-ple, consider Segolate nouns such as bwqr ?morn-ing?.
Its plural form is bqrim rather than the defaultbwqrim; such stem changing behavior is specifiedin the lexicon using replace.
Finally, the verb ykwl?can?
does not have imperative inflections, whichare generated by default for all verbs.
To prevent thedefault behavior, the superfluous forms are removed.The processing of irregular lexicon entries re-quires some explanation.
Lexicon items containingadd, remove and replace elements are included inthe general lexicon without the add, remove and re-place elements, which are listed in special lexicons.The general lexicon is used to build a basic morpho-logical finite-state network.
Additional networks arebuilt using the same set of rules for the add, removeand replace lexicons.
The final network is obtainedby subtracting the remove network from the generalone (using the set difference operator), adding theadd network (using the set union operator), and fi-nally applying priority union with the replace net-work.
This final finite-state network contains onlyand all the valid inflected forms.The lexicon is represented in XML, while themorphological analyzer is implemented in XFST,so the former has to be converted to the latter.
InXFST, a lexical entry is a relation which holds be-tween the surface form of the lemma and a set oflexical strings.
As a surface lemma is processed bythe rules, its associated lexical strings are manipu-lated to reflect the impact of inflectional morphol-ogy.
The surface string of XFST lexical entries is thecitation form specified in the XML lexicon.
Figure 513lists the XFST representation of the lexical entry ofthe word bli, whose XML representation was listedin figure 2.[+negation][+id]21542[+undotted]???
[+translit]bliFigure 5: The lexicon item of bli in XFST3.2 Morphological and orthographic rulesIn this section we discuss the set of rules whichconstitute the morphological grammar, i.e., the im-plementation of linguistic structures in XFST.
Thegrammar includes hundreds of rules; we present asmall sample, exemplifying the principles that gov-ern the overall organization of the grammar.
Thelinguistic information was collected from severalsources (Barkali, 1962; Zdaqa, 1974; Alon, 1995;Cohen, 1996; Schwarzwald, 2001; Schwarzwald,2002; Ornan, 2003).The grammar consists of specific rules for everypart of speech category, which are applied to the ap-propriate lexicons.
For each category, a variable isdefined whose denotation is the set of all lexical en-tries of that category.
Combined with the category-specific rules, we obtain morphological grammarsfor every category (not including idiosyncrasies).These grammars are too verbose on the lexical side,as they contain all the information that was listed inthe lexicon.
Filters are therefore applied to the lexi-cal side to remove the unneeded information.Our rules support surface forms that are made ofzero or more prefix particles, followed by a (pos-sibly inflected) lexicon item.
Figure 6 depicts thehigh-level organization of the grammar (recall fromsection 2 that ?.o.?
denotes composition).
The vari-able inflectedWord denotes a union of all thepossible inflections of the entire lexicon.
Similarly,prefixes is the set of all the possible sequencesof prefixes.
When the two are concatenated, theyyield a language of all possible surface forms, vastlyover-generating.
On the upper side of this languagea prefix particle filter is composed, which enforceslinguistically motivated constraints on the possiblecombinations of prefixes with words.
On top ofthis another filter is composed, which handles ?cos-metic?
changes, such as removing ?book-keeping?tags.
A similar filter is applied to the the lower sideof the network.tagAffixesFilter.o.prefixesFilters.o.
[ prefixes inflectedWord ].o.removeTagsFilterFigure 6: A high level view of the analyzerAs an example, consider the feminine singularform of adjectives, which is generated from themasculine singular by adding a suffix, either h, itor t. Some idiosyncratic forms have no masculinesingular form, but do have a feminine singular form,for example hrh ?pregnant?.
Therefore, as figure 7shows, singular feminine adjectives are either ex-tracted verbatim from the lexicon or generated fromthe singular masculine form by suffixation.
The rule[ %+feminine <- ?
|| %+gender _ ]changes the gender attribute to feminine for theinflected feminine forms.
This is a special form ofa replace rule which replaces any symbol (???)
bythe multi-character symbol ?+feminine?, in thecontext of occurring after ?+gender?.
The rightcontext is empty, meaning anything.define feminineSingularAdjective [[$[%+gender [%+feminine]].o.
adjective ] |[ %+feminine <- ?
|| %+gender _ ].o.
[ sufH | sufT | sufIT ]];Figure 7: Feminine adjectivesFigure 8 shows how the suffix h (the value of thevariable HE) is used in the inflection.
The defaultis not to add an additional h if the masculine ad-jective already terminates with it, as in mwrh ?maleteacher?
?mwrh ?female teacher?.
This means thatexceptions to this default, such as gbwh ?tall, m?
?gbwhh ?tall, f?, are being improperly treated.
Suchforms are explicitly listed in the lexicon as idiosyn-crasies (using the add/replace/remove mechanism),and will be corrected at a later stage.
The suffixes t14and it are handled in a similar way.define sufH [[ [ $[%+feminine %+h] .o.masculineSingularAdjective ][ 0 .x.
addedHE ] ].o.
[ addedHE -> 0 || HE _ .#.
].o.
[ addedHE -> HE ]];Figure 8: Adding the suffix hFigure 9 shows how plural nouns with the wt suf-fix are processed.
On the lower side some condi-tional alternations are performed before the suffix isadded.
The first alternation rule replaces iih withih at the end of a word, ensuring that nouns wrttentwith a spurious i such as eniih ?second?
are properlyinflected as eniwt ?seconds?
rather than eniiwt.
Thesecond alternation rule removes final t to ensure thata singular noun such as meait ?truck?
is properly in-flected to its plural form meaiwt.
The third ensuresthat nouns ending in wt such as smkwt ?authority?are properly inflected as smkwiwt.
Of course, ir-regular nouns such as xnit ?spear?, whose plural isxnitwt rather than xniwt, are lexically specified andhandled separately.
Finally, a final h is removed bythe fourth rule, and subsequently the plural suffix isconcatenated.define pluralWTNoun [[[ %+plural <- %+singular || %+number _ ].o.
$[%+number %+singular].o.
$[%+plural %+wt].o.
noun.o.
[ YOD YOD HE -> YOD HE || _ .#.
].o.
[ ALEF YOD TAV -> ALEF YOD || _ .#.
].o.
[ VAV TAV -> VAV YOD || _ .#.
].o.
[ [HE|TAV] -> 0 || _ .#. ]]
[ 0 .x.
[VAV TAV] ]];Figure 9: Plural nouns with wt suffixThe above rules only superficially demonstratethe capabilities of our grammar.
The bulk of thegrammar consists of rules for inflecting verbs, in-cluding a complete coverage of the weak paradigms.The grammar also contains rules which govern thepossible combinations of prefix particles and thewords they combine with.4 ConclusionWe described a broad-coverage finite-state grammarof Modern Hebrew, consisting of two main compo-nents: a lexicon and a set of rules.
The current un-derlying lexicon includes over 20,000 items.
The av-erage number of inflected forms for a lexicon itemis 33 (not including prefix sequences).
Due to theuse of finite-state technology, the grammar can beused for generation or for analysis.
It induces a veryefficient morphological analyzer: in practice, overeighty words per second can be analyzed on a con-temporary workstation.For lack of space we cannot fully demonstrate theoutput of the analyzer; refer back to figure 1 foran example.
HAMSAH is now used for a numberof projects, including as a front end for a Hebrewto English machine translation system (Lavie et al,2004).
It is routinely tested on a variety of texts,and tokens with zero analyses are being inspectedmanually.
A systematic evaluation of the quality ofthe analyzer is difficult due to the lack of availablealternative resources.
Nevertheless, we conducteda small-scale evaluation experiment by asking twoannotators to review the output produced by the an-alyzer for a randomly chosen set of newspaper arti-cles comprising of approximately 1000 word tokens.The following table summarizes the results of thisexperiment.number %tokens 959 100.00%no analysis 37 3.86%no correct analysis 41 4.28%correct analysis produced 881 91.86%The majority of the missing analyses are due to out-of-lexicon items, particularly proper names.In addition to maintenance and expansion of thelexicon, we intend to extend this work in two maindirections.
First, we are interested in automaticmethods for expanding the lexicon, especially fornamed entities.
Second, we are currently working ona disambiguation module which will rank the analy-ses produced by the grammar according to context-dependent criteria.
Existing works on part-of-speechtagging and morphological disambiguation in He-brew (Segal, 1999; Adler, 2004; Bar-Haim, 2005)leave much room for further research.
Incorpo-rating state-of-the-art machine learning techniques15for morphological disambiguation to the output pro-duced by the analyzer will generate an optimal sys-tem which is broad-coverage, effective and accurate.AcknowledgmentsThis work was funded by the Israeli Ministry ofScience and Technology, under the auspices of theKnowledge Center for Processing Hebrew.
We aregrateful to Yael Cohen-Sygal, Shira Schwartz andAlon Itai for their help.ReferencesMeni Adler.
2004.
Word-based statistical language mod-eling: Two-dimensional approach.
Thesis proposal,Ben Gurion University, Beer Sheva, April.Emmanuel Alon.
1995.
Unvocalized Hebrew Writing:The Structure of Hebrew Words in Syntactic Context.Ben-Gurion University of the Negev Press.
In Hebrew.Roy Bar-Haim.
2005.
Part-of-speech tagging for Hebrewand other Semitic languages.
Master?s thesis, Com-puter Science Department, Technion, Haifa, Israel.Shaul Barkali.
1962.
Lux HaP?alim HaShalem (TheComplete Verbs Table).
Reuven Mass, Jerusalem.
InHebrew.Kenneth R. Beesley and Lauri Karttunen.
2003.
Finite-State Morphology: Xerox Tools and Techniques.CSLI, Stanford.Kenneth R. Beesley.
1996.
Arabic finite-state mor-phological analysis and generation.
In Proceedingsof COLING-96, the 16th International Conference onComputational Linguistics, Copenhagen.Kenneth R. Beesley.
1998.
Arabic morphology usingonly finite-state operations.
In Michael Rosner, ed-itor, Proceedings of the Workshop on ComputationalApproaches to Semitic languages, pages 50?57, Mon-treal, Quebec, August.
COLING-ACL?98.Kenneth R. Beesley.
2001.
Finite-state morphologicalanalysis and generation of Arabic at Xerox Research:Status and plans in 2001.
In ACL Workshop on ArabicLanguage Processing: Status and Perspective, pages1?8, Toulouse, France, July.Esther Bentur, Aviella Angel, Danit Segev, and AlonLavie.
1992.
Analysis and generation of the nounsinflection in Hebrew.
In Uzzi Ornan, Gideon Arieli,and Edit Doron, editors, Hebrew Computational Lin-guistics, chapter 3, pages 36?38.
Ministry of Scienceand Technology.
In Hebrew.Yaacov Choueka.
1980.
Computerized full-text retrievalsystems and research in the humanities: The Responsaproject.
Computers and the Humanities, 14:153?169.Yaacov Choueka.
1990.
MLIM - a system for full, exact,on-line grammatical analysis of Modern Hebrew.
InYehuda Eizenberg, editor, Proceedings of the AnnualConference on Computers in Education, page 63, TelAviv, April.
In Hebrew.Haim A. Cohen.
1996. klalei ha-ktiv xasar ha-niqqud.leshonenu la&am, special edition, May.
In Hebrew.Laura Kataja and Kimmo Koskenniemi.
1988.
Finite-state description of Semitic morphology: A case studyof Ancient Akkadian.
In COLING, pages 313?315.George Anton Kiraz.
2000.
Multitiered nonlinear mor-phology using multitape finite automata: a case studyon Syriac and Arabic.
Computational Linguistics,26(1):77?105, March.Kimmo Koskenniemi.
1983.
Two-Level Morphology: aGeneral Computational Model for Word-Form Recog-nition and Production.
The Department of GeneralLinguistics, University of Helsinki.Alon Lavie, Alon Itai, Uzzi Ornan, and Mori Rimon.1988.
On the applicability of two-level morphologyto the inflection of Hebrew verbs.
In Proceedings ofthe International Conference of the ALLC, Jerusalem,Israel.Alon Lavie, Shuly Wintner, Yaniv Eytani, Erik Peterson,and Katharina Probst.
2004.
Rapid prototyping of atransfer-based Hebrew-to-English machine translationsystem.
In Proceedings of TMI-2004: The 10th Inter-national Conference on Theoretical and Methodolog-ical Issues in Machine Translation, Baltimore, MD,October.Uzzi Ornan and Wadim Kazatski.
1986.
Analysis andsynthesis processes in Hebrew morphology.
In Pro-ceedings of the 21 National Data Processing Confer-ence.
In Hebrew.Uzzi Ornan.
2003.
The Final Word.
University of HaifaPress, Haifa, Israel.
In Hebrew.Ora Schwarzwald.
2001.
Moden Hebrew, volume 127of Languages of the World/Materials.
LINCOM EU-ROPA.Ora Schwarzwald.
2002.
Studies in Hebrew Morphol-ogy.
The Open University of Israel.Erel Segal.
1997.
Morphological analyzer for unvo-calized hebrew words.
Unpublished work, availablefrom http://www.cs.technion.ac.il/-?erelsgl/hmntx.zip.Erel Segal.
1999.
Hebrew morphological analyzer forHebrew undotted texts.
Master?s thesis, Technion, Is-rael Institute of Technology, Haifa, October.
In He-brew.Shuly Wintner.
2004.
Hebrew computational linguis-tics: Past and future.
Artificial Intelligence Review,21(2):113?138.Yizxaq Zdaqa.
1974.
Luxot HaPoal (The Verb Tables).Kiryath Sepher, Jerusalem.
In Hebrew.16
