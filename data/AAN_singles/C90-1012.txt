The Generalized LR Parser/Compiler V8-4:A Software Package for Practical NL Projects1.
IntroductionThis paperldescribes a software package designedfor practical projects which involve natural languageparsing.
\ ]he Generalized LR Parser/Compiler V8-4 isbased on Tomita's Generalized LR Parsing Algorithm\[7, 6\], augmented by pseudo/full unification modules.While the parser/compiler is not a commercial product,it has been thoroughly tested and heavily used bymany projects inside and outside CMU last threeyears.
It is publicly available with some restrictions forprofit-making industries 2.
It is written entirely inCommonLisp, and no system-dependent functions,such as window graphics, are used for the sake ofportabili.ty.
Thus, it should run on any systems thatrun CommonLisp in principle 3, including IBM RT/PC,Mac II, Symbolics and HP Bobcats.Each rule consists of a context-free phrasestructure description and a cluster of pseudoequations as in figure 1-1.
The non-terminals in thephrase structure part of the rule are referenced in theequations as x0 .
.
.
xn, where x0 is the non-terminal1Many members of CMU Center for Machine Translation havemade contributions to the development of the system.
People whoimplement(~ parts of the system, besides the author, are: HidetoKagamida, Kevin Knight, Hiroyuki Musha and Kazuhiro Toyoshima.People who made contributions in maintaining the system include:Steve Morrisson, Eric Nyberg, Hiroakl Saito and Hideto Tomabechi.People who provided valuable comments/bug reports in writing anddebugging grammars include: Donna Gates, Lori Levin, ToruMatsuda and Teruko Mitamura.
Other members who made indirectcontributions in many ways include: Ralph Brown, Jaime Carbonell,Mari~n Kee, Sergei Nirenburg and Koichi Takeda.2For those interested in obtaining the software, contact RadhaRao, Business Manager, Center for Machine Translation, CarnegieMellon University, Pittsburgh, PA 15213 (rdr@nl.cs.cmu.edu).3In practice, however, we usually face one or two problems whenwe transport it to another CommonLisp system, due to bugs inCommonLiop and/or file I/O complications.Masaru TomitaSchool of Computer Science andCenter for Machine TranslationCarnegie Mellon UniversityPittsburgh, PA 15213, USAmt@cs.cmu.edu(<DEC> <=> (<NP> <VP>)(((xl case) =nom)((x2 form) =c finite)( *OR*( ( (x2 :time) = present)((xl agr) = (x2 agr)))(((x2 :time = past)))(x0 = x2)((x0 subj) = xl)((x0 passive) = -)))Figure 1-1 : A Grammar Rule for Parsingin the left hand side (here, <DEC>) and xn is the n-thnon-terminal in the right hand side (here, x lrepresents <NP> and x2 represents <vP>).
Thepseudo equations are used to check certain attributevalues, such as verb form and person agreement, andto construct a f-structure.
In the example, the firstequation in the example states that the case of <NP>must be nominative, and the second equation statesthat the form of <VP> must be finite.
Then one of thefollowing two must be true: (1) the time of <VP> ispresent and agreements of <NP> and <VP> agree,OR (2) the time of <VP> is past.
If all of theconditions hold, let the f-structure of <DEC> be that of<VP>, create a slot called "subj" and put the f-structure of <NP> there, and create a slot called"passive" and put "-" there.
Pseudo equations aredescribed in detail in section 3.Grammar compilation is the key to this efficientparsing system.
A grammar written in the correctformat is to be compiled before being used to parsesentences.
The context-free phrase structure rulesare compiled into an Augmented LR Parsing Table,and the equations are compiled into CommonLispfunctions.
The runtime parser then does the shift-reduce parsing guided by the parsing table, and eachtime a grammar rule is applied, its CommonLispfunction compiled from equations is evaluated.1 59In the subsequence sections,Generalized LR Parser/Compilerdescribed.features of thev8-4 are briefly2.
Top-Level FunctionsThere are three top-level functions:; to compile a grammar(compgra grammar-file-name); to load a compiled grammar( loadgra  grammar-file-name); to parse a sentence string(p sentence)3.
Pseudo EquationsThis section describes pseudo equations for theGeneralized LR Parser/Compiler V8-4.3.1.
Pseudo  Uni f icat ion,  =path = valGet a value from path, unify it with val, and assign theunified value back to path.
If the unification fails, thisequation fails.
If the value of path is undefined, thisequation behaves like a simple assignment.
If pathhas a value, then this equation behaves like a teststatement.path I = path2Get values from path1 and path2, unify them, andassign the unified value back to path1 and path2.
Ifthe unification fails, this equation fails.
If both path1and path2 have a value, then this equation behaveslike a test statement.
If the value of path1 is notdefined, this equation behaves like a simpleassignment.3.2= Overwr i te  Ass ignment ,  <=path <= valAssign val to the slot path.
If path1 is already defined,the old value is simply overwritten.path I <= path2Get a value from path2, and assign the value to path 1.If path1 i.,{ already defined, the old value is simplyoverwritten.path <= lisp-function-callEvaluate lisp-function-call, and assign the returnedvalue to path.
If path1 is already defined, the oldvalue is simply overwritten, lisp-function-call can bean arbitrary lisp code, as long as all functions called inlisp-function-call are defined.
A path can be used as aspecial function that returns a value of the slot.3.3.
Removal Assignment, ==path I == path2Get a value from path2, assign the value to path I, andremove the value of path2 (assign nil to path2).
If avalue already exists in path1, then the new value isunified with the old value.
If the unification fails, thenthis equation fails.3.4.
Append Multiple Value, >path I > path2Get a value from path2, and assign the value to path 1.If a value already exists in path1, the new value isappended to the old value.
The resulting value ofpath1 is a multiple value.3.5.
Pop Multiple Value, <path 1 < path2The value of path2 should be a multiple value.
Thefirst element of the multiple value is popped off, andassign the value to path1.
If path1 already has avalue, unify the new value with the old value.
If path2is undefined, this equation fails.3.6.
*DEFINED* and *UNDEFINED*path= *DEFINED*Check if the value of path is defined.
If undefined,then this equation fails.
If defined, do nothing.3.7.
Const ra in t  Equat ions ,  =cpath =c valThis equation is the same as an equationpath = val60 2except if path is not already defined, it fails.3.8.
Remov ing  Values,  *REMOVE*path = * REMOVE*This equation removes the value in path, and the pathbecomes undefined.3.9.
Disjunctive Equations, *OR*(*OR* list-of-equationslist-of-equations .
.
.
.
)All lists of equations are evaluated disjunctively.
Thisis an inclusive OR, as oppose to exclusive OR; Even ifone of the lists of equations is evaluated successfully,the rest of lists will be also evaluated anyway.3.13.
Recurslve Evaluation of Equations,*INTERPRET*( * INTERPRET path)The *INTERPRET* statement first gets a value frompath.
The value of path must be a valid list ofequations.
Those equations are then recursivelyevaluated.
This *INTERPRET* statement resemblesthe "eval" function in Lisp.3.14.
D is junct ive  Value, *OR*(*OR* valval..
.
)Unification of two disjunctive values is set interaction.For example, (un i fy  ' ( *OR*  a b c d) ' ( *OR*b d e f)) is  (*OR* b d).3.10.
Exclusive OR, *EOR*( *EOR* list-of-equationsfist-of-equations .
.
.
.
)\ ]h is  is the same as disjunctive equations *OR*,except an exclusive OR is used.
That is, as soon asone of the element is evaluated successfully, the restof elements will be ignored.3.1 1.
Case Statement,  *CASE*(*CASE* path(key1 equation1-1 equation1-2 ...)( Key2 equation2-1 ... )( Key3 equation3-1) .
.
.
.
)\ ]he  *CASE* statement first gets the value in path.\ ]he  value is then compared with Key1, Key2 ...... andas soon as the value is eq to some key, its rest ofequations are evaluated.3.12.
Test wi th  an User-def ined LISPFunct ion,  *TEST*(*TEST* lisp-function-carl)\ ]he  lisp.function-call is evaluated, and if the functionreturns nil, it falls.
If the function returns a non-nilvalue, do nothing.
A path can be used as specialfunction that returns a value of the slot.3.15.
Negat ive Value, *NOT*(*NOT* valval...)Unification of two negative values is set union.
Forexample, (un i fy  ' ( *NOT*  a b c d)  " ( *NOT*b d e f)) is ( *NOT*  a b c d e f).3.16.
Mult ip le Values,  *MULTIPLE*( *MULT IPLE*  valval...)Unification of two multiple values is append.
Whenunified with a value, each element is unified with avalue.
For example, (un i fy  ' ( *MULT IPLE*  a bc d b d e f) "d) is ( *MULT IPLE*  d d).3.17.
User Defined special Values,* user -de f ined*The user can define his own special values.
Anunification function with the nameUNIFY*user-defined* must be defined.
The functionshould take two arguments, and returns a new valueor *FAIL* if the unification fails.4.
Standard  Un i f i ca t ion  ModeThe pseudo equations described in the previoussection are different from what functional grammarianscall "unification".
The user can, however, select "full(standard) unification mode" by setting the globalvariable *UNIF ICAT ION-NODE*  from PSEUDO to3 61FULL.
In the full unification mode, equations areinterpreted as standard equations in a standardfunctional unification grammar \[5\], although some ofthe features such as user-defined function callscannot be used.
However, most users of theparser/compiler find it more convenient to usePSEUDO unification than FULL unification, bot onlybecause it is more efficient, but also because it hasmore practical features including user-defined functioncalls and user-defined special values.
Those practicalfeatures are crucial to handle low-level non-linguisticphenomena such as time and date expressions\[8\] and/or to incorporate semantic and pragmaticprocessing of the user's choice.
More discussions onPSEUDO and FULL unifications can be found in \[10\].5.
Other Important Features5.1.
Character Basis ParsingThe user has a choice to make his grammar"character basis" or standard "word basis".
When"character basis mode" is chosen, terminal symbols inthe grammar are characters, not words.
There are atleast two possible reasons to make it character basis:1.
Some languages, such as Japanese, donot have a space between words.
If agrammar is written in character basis,the user does not have to worry aboutword segmentation of unsegmentedsentences.2.
Some languages have much morecomplex morphology than English.
Withthe character basis mode, the user canwrite morphological rules in the verysame formalism as syntactic rules.5.2.
Wild Card CharacterIn pseudo unification mode, the user can use a wildcard character "%" in his grammar to match anycharacter (if character basis) or any word (if wordbasis).
This feature is especially useful to handleproper nouns and/or unknown words.5.3.
Grammar Debugging ToolsThe Generalized LR Parser/Compiler V8-4 includessome debugging functions.
They include:?
dmode - - -  debugging mode; to show atrace of rule applications by the parser'.?
t race  --- to trace a particular ule.?
disp-trees, disp-nodes, etc.
---to display parlial trees or values of nodesin a tree.All of the debugging tools do not use any fancygraphic interface for the sake of system portability.5.4.
Interpretive ParserThe Generalized LR Parser/Compiler V8-4.
includesanother parser based on chart parsing which canparse a sentence without ever compiling a grammar:; to load a grammar(i-loadgra grammar-file-name); to run the interpretive parser( i -p  sentence)While its run time speed is significantly slower thanthat of the GLR parser, many users find it useful fordebugging because grammar does not need to becompiled each time a small change is made.5.5.
Grammar MacrosThe user can define and use macros in a grammar.This is especially useful In case there are many similarrules in the grammar.
A macro can be defined in thesame way as CommonLisp macros.
Those macrosare expanded before the grammar is compiled.6.
Concluding RemarksSome of the important features of the GeneralizedLR Parser/Compiler have been highlighted.
Moredetailed descriptions can be found in its user's manual\[9\].
Unlike most other available software \[1,2, 4\], theGeneralized LR Parser/Compiler v8-4 is designedspecifically to be used in practical natural languagesystems, sacrificing perhaps some of the linguistic andtheoretical elegancy.
The system has beenthoroughly tested and heavily used by many users inmany projects inside and outside CMU last three62 4years.
Center for Machine Translation of CMU has \[8\]developed rather extensive grammars for English andJapanese for their translation projects, and someexperimental grammars for French, Spanish, Turkishand Chinese.
We also find the system very suitable to \[9\]write and parse task-dependent semantic grammars.Finally, a project is going on at CMU to integrate theparser/compiler with a speech recognition system(SPHINX \[3\]).7.
References\[1\] Karttunen, L.D-PATH: A Development Environment forUnification-Based Grammars.In 12th International Conference onComputational Linguistics.
Bonn, 1986.\[2\] Kiparsky, C.LFG ManualTechnical Report, Xerox Palo Alto ResearchCenter, 1985.\[3\] Lee, K. F. and Hon, H. W.Large-Vocabulary Speaker-IndependentContinuous Speech Recognition.Proceedings of IEEE Int'l Conf.
on Acoustics,Speech and Signal Processing, 1988.114\] Shieber, S. M.The Design of a Computer Language forLinguistic Information.In lOth International Conference onComputational Linguistics, pages 362-366.Stanford, July, 1984.\[5\] Shieber, S. M.CSLI Lecture Notes: An Introduction toUnification Approaches to Grammar.Center for the Study of Language andInformation, 1986.\[6\] Tomita, M.Efficient Parsing for Natural Language.Kluwer Academic Publishers, Boston, MA,1985.\[7\] Tomita, M.An Efficient Augmented-Context-Free ParsingAlgorithm.Computational Linguistics 13(1-2):31-46,January=June, 1987.\[10\]Tomita, M.Linguistic Sentences and Real Sentences.12th International Conference onComputational Linguistics, 1988.Tomita, M., Mitamura, T. and Kee, M.The Generalized LR Parser~Compiler: User'sGuide.Technical Report, Center for MachineTranslation, Carnegie-Mellon University,1988.Tomita, M. and Knight, K.Pseudo Unification and Full Unification.Technical Report unpublished, Center forMachine Translation, Carnegie-MellonUniversity, 1988.5 63
