k-valued Non-Associative Lambek Categorial Grammarsare not Learnable from StringsDenis Be?chetINRIA, IRISACampus Universitaire de BeaulieuAvenue du Ge?ne?ral Leclerc35042 Rennes CedexFranceDenis.Bechet@irisa.frAnnie ForetUniversite?
de Rennes1, IRISACampus Universitaire de BeaulieuAvenue du Ge?ne?ral Leclerc35042 Rennes CedexFranceAnnie.Foret@irisa.frAbstractThis paper is concerned with learning cat-egorial grammars in Gold?s model.
Incontrast to k-valued classical categorialgrammars, k-valued Lambek grammarsare not learnable from strings.
This re-sult was shown for several variants butthe question was left open for the weak-est one, the non-associative variant NL.We show that the class of rigid and k-valued NL grammars is unlearnable fromstrings, for each k; this result is obtainedby a specific construction of a limit pointin the considered class, that does not useproduct operator.Another interest of our construction is thatit provides limit points for the whole hier-archy of Lambek grammars, including therecent pregroup grammars.Such a result aims at clarifying the pos-sible directions for future learning algo-rithms: it expresses the difficulty of learn-ing categorial grammars from strings andthe need for an adequate structure on ex-amples.1 IntroductionCategorial grammars (Bar-Hillel, 1953) and Lam-bek grammars (Lambek, 1958; Lambek, 1961) havebeen studied in the field of natural language process-ing.
They are well adapted to learning perspectivessince they are completely lexicalized and an actualway of research is to determine the sub-classes ofsuch grammars that remain learnable in the sense ofGold (Gold, 1967).We recall that learning here consists to define analgorithm on a finite set of sentences that convergeto obtain a grammar in the class that generates theexamples.
Let G be a class of grammars, that wewish to learn from positive examples.
Formally, letL(G) denote the language associated with grammarG, and let V be a given alphabet, a learning algorith-m is a function ?
from finite sets of words in V ?
toG, such that for all G ?
G with L(G) =< ei >i?Nthere exists a grammar G?
?
G and there exists n0 ?N such that: ?n > n0 ?
({e1, .
.
.
, en}) = G?
?
Gwith L(G?)
= L(G).After pessimistic unlearnability results in (Gold,1967), learnability of non trivial classes has beenproved in (Angluin, 1980) and (Shinohara, 1990).Recent works from (Kanazawa, 1998) and (Nicolas,1999) following (Buszkowski and Penn, 1990) haveanswered the problem for different sub-classes ofclassical categorial grammars (we recall that the w-hole class of classical categorial grammars is equiv-alent to context free grammars; the same holds forthe class of Lambek grammars (Pentus, 1993) that isthus not learnable in Gold?s model).The extension of such results for Lambek gram-mars is an interesting challenge that is addressed byworks on logic types from (Dudau-Sofronie et al,2001) (these grammars enjoy a direct link with Mon-tague semantics), learning from structures in (Re-tor and Bonato, september 2001), complexity resultsfrom (Flore?ncio, 2002) or unlearnability results from(Foret and Le Nir, 2002a; Foret and Le Nir, 2002b);this result was shown for several variants but thequestion was left open for the basic variant, the non-associative variant NL.In this paper, we consider the following question:is the non-associative variant NL of k-valued Lam-bek grammars learnable from strings; we answer byconstructing a limit point for this class.
Our con-struction is in some sense more complex than thosefor the other systems since they do not directly trans-late as limit point in the more restricted system NL.The paper is organized as follows.
Section 2gives some background knowledge on three mainaspects: Lambek categorial grammars ; learning inGold?s model ; Lambek pregroup grammars that weuse later as models in some proofs.
Section 3 thenpresents our main result on NL (NL denotes non-associative Lambek grammars not allowing emptysequence): after a construction overview, we dis-cuss some corollaries and then provide the detailsof proof.
Section 4 concludes.2 Background2.1 Categorial GrammarsThe reader not familiar with Lambek Calculus andits non-associative version will find nice presenta-tion in the first ones written by Lambek (Lambek,1958; Lambek, 1961) or more recently in (Kandul-ski, 1988; Aarts and Trautwein, 1995; Buszkowski,1997; Moortgat, 1997; de Groote, 1999; de Grooteand Lamarche, 2002).The types Tp, or formulas, are generatedfrom a set of primitive types Pr, or atom-ic formulas by three binary connectives ?
/ ?
(over), ?
\ ?
(under) and ???
(product): Tp ::=Pr | Tp \ Tp | Tp / Tp | Tp ?Tp.
As a logical sys-tem, we use a Gentzen-style sequent presentation.
Asequent ?
` A is composed of a sequence of for-mulas ?
which is the antecedent configuration and asuccedent formula A.Let ?
be a fixed alphabet.
A categorial grammarover ?
is a finite relation G between ?
and Tp.
If< c,A >?
G, we say that G assigns A to c, and wewrite G : c 7?
A.2.1.1 Lambek Derivation `LThe relation `L is the smallest relation ` betweenTp+ and Tp, such that for all ?,??
?
Tp+,?,??
?Tp?
and for all A,B,C ?
Tp :?, A,??
` C ?
` A(Cut)?,?,??
` CA ` A (Id)?
` A ?, B,??
` C/L?, B / A,?,??
` C?, A ` B/R?
` B / A?
` A ?, B,??
` C\L?,?, A \ B,??
` CA,?
` B\R?
` A \ B?, A,B,??
` C?L?, A ?
B,??
` C?
` A ??
` B?R?,??
` A ?
BWe write L?
for the Lambek calculus with emptyantecedents (left part of the sequent).2.1.2 Non-associative Lambek Derivation `NLIn the Gentzen presentation, the derivability rela-tion of NL holds between a term in S and a formulain Tp, where the term language is S ::= Tp|(S,S).Terms in S are also called G-terms.
A sequent is apair (?, A) ?
S ?
Tp.
The notation ?[?]
repre-sents a G-term with a distinguished occurrence of ?
(with the same position in premise and conclusionof a rule).
The relation `NL is the smallest relation` between S and Tp, such that for all ?,?
?
S andfor all A,B,C ?
Tp :?
[A] ` C ?
` A(Cut)?[?]
` CA ` A (Id)?
` A ?
[B] ` C/L?
[(B / A,?)]
` C(?, A) ` B/R?
` B / A?
` A ?
[B] ` C\L?
[(?, A \ B)] ` C(A,?)
` B\R?
` A \ B?
[(A,B)] ` C?L?
[A ?
B] ` C?
` A ?
` B?R(?,?)
` (A ?
B)We write NL?
for the non-associative Lambekcalculus with empty antecedents (left part of the se-quent).2.1.3 NotesCut elimination.
We recall that cut rule can be e-liminated in `L and `NL: every derivable sequenthas a cut-free derivation.Type order.
The order ord(A) of a type A of L orNL is defined by:ord(A) = 0 if A is a primitive typeord(C1 / C2) = max(ord(C1), ord(C2) + 1)ord(C1 \ C2) = max(ord(C1) + 1, ord(C2))ord(C1 ?
C2) = max(ord(C1), ord(C2))2.1.4 Language.Let G be a categorial grammar over ?.
G gen-erates a string c1 .
.
.
cn ?
?+ iff there are typesA1, .
.
.
, An ?
Tp such that: G : ci 7?
Ai (1 ?
i ?n) and A1, .
.
.
, An `L S. The language of G,written LL(G) is the set of strings generated by G.We define similarly LL?
(G), LNL(G) and LNL?
(G)replacing `L by `L?
, `NL and `NL?
in the sequentwhere the types are parenthesized in some way.2.1.5 Notation.In some sections, we may write simply ` insteadof `L, `L?
, `NL or `NL?
.
We may simply writeL(G) accordingly.2.1.6 Rigid and k-valued Grammars.Categorial grammars that assign at most k typesto each symbol in the alphabet are called k-valuedgrammars; 1-valued grammars are also called rigidgrammars.Example 1 Let ?1 = {John,Mary, likes} and letPr = {S,N} for sentences and nouns respectively.Let G1 = {John 7?
N, Mary 7?
N, likes 7?N \ (S / N)}.
We get (John likes Mary) ?LNL(G1) since ((N, N \ (S / N)), N) `NL S.G1 is a rigid (or 1-valued) grammar.2.2 Learning and Limit PointsWe now recall some useful definitions and knownproperties on learning.2.2.1 Limit PointsA class CL of languages has a limit point iff thereexists an infinite sequence < Ln >n?N of lan-guages in CL and a language L ?
CL such that:L0 ( L1 .
.
.
( ... ( Ln ( .
.
.
and L =?n?N Ln(L is a limit point of CL).2.2.2 Limit Points Imply UnlearnabilityThe following property is important for our pur-pose.
If the languages of the grammars in a class Ghave a limit point then the class G is unlearnable.
12.3 Some Useful ModelsFor ease of proof, in next section we use two kindsof models that we now recall: free groups and pre-groups introduced recently by (Lambek, 1999) as analternative of existing type grammars.2.3.1 Free Group Interpretation.Let FG denote the free group with generators Pr,operation ?
and with neutral element 1.
We associatewith each formula C of L or NL, an element in FGwritten [[C]] as follows:[[A]] = A if A is a primitive type[[C1 \ C2]] = [[C1]]?1 ?
[[C2]][[C1 / C2]] = [[C1]] ?
[[C2]]?1[[C1 ?
C2]] = [[C1]] ?
[[C2]]We extend the notation to sequents by:[[C1, C2, .
.
.
, Cn]] = [[C1]] ?
[[C2]] ?
?
?
?
?
[[Cn]]The following property states that FG is a model forL (hence for NL): if ?
`L C then [[?]]
=FG [[C]]2.3.2 Free Pregroup InterpretationPregroup.
A pregroup is a structure (P,?, ?, l, r, 1) such that (P,?, ?, 1) is a partially orderedmonoid2 and l, r are two unary operations on Pthat satisfy for all a ?
P ala ?
1 ?
aal andaar ?
1 ?
ara.Free pregroup.
Let (P,?)
be an ordered set ofprimitive types, P (  ) = {p(i) | p ?
P, i ?
Z} isthe set of atomic types and T(P,?)
=(P (  ))?
={p(i1)1 ?
?
?
p(in)n | 0 ?
k ?
n, pk ?
P and ik ?
Z}is the set of types.
For X and Y ?
T(P,?
), X ?
Yiif this relation is deductible in the following systemwhere p, q ?
P , n, k ?
Z and X,Y,Z ?
T(P,?
):1This implies that the class has infinite elasticity.
A classCL of languages has infinite elasticity iff ?
< ei >i?Nsentences ?
< Li >i?N languages in CL ?i ?
N :ei 6?
Li and {e1, .
.
.
, en} ?
Ln+1 .2We briefly recall that a monoid is a structure < M, ?, 1 >,such that ?
is associative and has a neutral element 1 (?x ?M : 1 ?
x = x ?
1 = x).
A partially ordered monoid is amonoid M, ?, 1) with a partial order ?
that satisfies ?a, b, c:a ?
b ?
c ?
a ?
c ?
b and a ?
c ?
b ?
c.X ?
X (Id)X ?
Y Y ?
Z(Cut)X ?
ZXY ?
Z(AL)Xp(n)p(n+1)Y ?
ZX ?
Y Z(AR)X ?
Y p(n+1)p(n)ZXp(k)Y ?
Z(INDL)Xq(k)Y ?
ZX ?
Y p(k)Z(INDR)X ?
Y q(k)Zq ?
p if k is even, and p ?
q if k is oddThis construction, proposed by Buskowski, de-fines a pregroup that extends ?
on primitive typesP to T(P,?
)3.Cut elimination.
As for L and NL, cut rule can beeliminated: every derivable inequality has a cut-freederivation.Simple free pregroup.
A simple free pregroup isa free pregroup where the order on primitive type isequality.Free pregroup interpretation.
Let FP denotesthe simple free pregroup with Pr as primitive types.We associate with each formula C of L or NL, anelement in FP written [C] as follows:[A] = A if A is a primitive type[C1 \ C2] = [C1]r[C2][C1 / C2] = [C1][C2]l[C1 ?
C2] = [C1][C2]We extend the notation to sequents by:[A1, .
.
.
, An] = [A1] ?
?
?
[An]The following property states that FP is a model forL (hence for NL): if ?
`L C then [?]
?FP [C].3 Limit Point Construction3.1 Method overview and remarksForm of grammars.
We define grammars Gnwhere A, B, Dn and En are complex types and Sis the main type of each grammar:Gn = {a 7?
A / B; b 7?
Dn; c 7?
En \ S}Some key points.?
We prove that {akbc | 0 ?
k ?
n} ?
L(Gn)using the following properties:3Left and right adjoints are defined by (p(n))l = p(n?1),(p(n))r = p(n+1), (XY )l = Y lX l and (XY )r = Y rXr.
Wewrite p for p(0).B ` A (but A 6` B)(A / B,Dn+1) ` DnDn ` EnEn ` En+1we get:bc ?
L(Gn) since Dn ` Enif w ?
L(Gn) then aw ?
L(Gn+1) since(A / B,Dn+1) ` Dn ` En ` En+1?
The condition A 6` B is crucial for strict-ness of language inclusion.
In particular:(A / B,A) 6` A, where A = D0?
This construction is in some sense more com-plex than those for the other systems (Foret andLe Nir, 2002a; Foret and Le Nir, 2002b) sincethey do not directly translate as limit points inthe more restricted system NL.3.2 Definition and Main ResultsDefinitions of Rigid grammars Gn and G?Definition 1 Let p, q, S, three primitive types.
Wedefine:A = D0 = E0 = q / (p \ q)B = pDn+1 = (A / B) \ DnEn+1 = (A / A) \ EnLet Gn =??
?a 7?
A / B = (q / (p \ q)) / pb 7?
Dnc 7?
En \ S??
?Let G?
= {a 7?
(p / p) b 7?
p c 7?
(p \ S)}Main PropertiesProposition 1 (language description)?
L(Gn) = {akbc | 0 ?
k ?
n}?
L(G?)
= {akbc | 0 ?
k}.From this construction we get a limit point and thefollowing result.Proposition 2 (NL-non-learnability) The class oflanguages of rigid (or k-valued for an arbitraryk) non-associative Lambek grammars (not allowingempty sequence and without product) admits a limitpoint ; the class of rigid (or k-valued for an arbitraryk) non-associative Lambek grammars (not allowingempty sequence and without product) is not learn-able from strings.3.3 Details of proof for GnLemma{akbc | 0 ?
k ?
n} ?
L(Gn)Proof: It is relatively easy to see that for 0 ?k ?
n, akbc ?
L(Gn).
We have to consider((a ?
?
?
(a(a?
??
?kb)) ?
?
?
)c) and prove the following se-quent in NL:((a???(a?
??
?
((A / B), .
.
.
, ((A / B),?
??
?kb?
??
?
((A / B) \ ?
?
?
\ ((A / B) \?
??
?nA) ?
?
?
), ?
?
?
),c?
??
?
((A / A) \ ?
?
?
\ ((A / A) \?
??
?nA) ?
?
? )
\ S)) `NL SModels of NLFor the converse, (for technical reasons and toease proofs) we use both free group and free pre-group models of NL since a sequent is valid in NLonly if its interpretation is valid in both models.Translation in free groupsThe free group translation for the types of Gn is:[[p]] = p, [[q]] = q, [[S]] = S[[x / y]] = [[x]] ?
[[y]]?1[[x \ y]] = [[x]]?1 ?
[[y]][[x ?
y]] = [[x]] ?
[[y]]Type-raising disappears by translation:[[x / (y \ x)]] = [[x]] ?
([[y]]?1 ?
[[x]])?1 = [[y]]Thus, we get :[[A]] = [[D0]] = [[E0]] = [[q / (p \ q)]] = p[[B]] = p[[A / B]] = [[A]] ?
[[B]]?1 = pp?1 = 1[[Dn+1]] = [[(A / B) \ Dn]] = [[Dn]] = [[D0]] = p[[En+1]] = [[(A / A) \ En]] = [[En]] = [[E0]] = pTranslation in free pregroupsThe free pregroup translation for the types of Gn is:[p] = p, [q] = q, [S] = S[x \ y] = [x]r[y][y / x] = [y][x]l[x ?
y] = [x][y]Type-raising translation:[x / (y \ x)] = [x]([y]r[x])l = [x][x]l[y][x / (x \ x)] = [x]([x]r [x])l = [x][x]l[x] = [x]Thus, we get:[A] = [D0] = [E0] = [q / (p \ q)] = qqlp[B] = p[A / B] = [A][B]l = qqlppl[Dn+1] = [(A / B)]r[Dn] = pprqqr?
??
?n+1qqlp[En+1] = [(A / A) \ En] = [A][A]lqqlp = qqlpLemmaL(Gn) ?
{akbak?cak??
; 0 ?
k, 0 ?
k?, 0 ?
k??
}Proof: Let ?n denote the type assignment by therigid grammar Gn.
Suppose ?n(w) ` S, using freegroups [[?n(w)]] = S;- This entails that w has exactly one occurrence ofc (since [[?n(c)]] = p?1S and the other type imagesare either 1 or p)- Then, this entails that w has exactly one occur-rence of b on the left of the occurrence of c (since[[?n(c)]] = p?1S, [[?n(b)]] = p and [[?n(a)]] = 1)LemmaL(Gn) ?
{akbc | 0 ?
k}Proof: Suppose ?n(w) ` S, using pregroups[?n(w)] ?
S. We can write w = akbak?cak??
forsome k, k?, k?
?, such that:[?n(w)] = qqlppl?
??
?kpprqqr?
??
?nqqlp qqlppl?
??
?k?prqqrS qqlppl?
??
?k?
?For q = 1, we get ppl????kppr???
?np ppl???
?k?prS ppl????k???
Sand it yields p ppl???
?k?prS ppl????k???
S.We now discuss possible deductions (note thatpplppl ?
?
?
ppl = ppl):?
if k?
and k??
6= 0: ppplprSppl ?
S impossible.?
if k?
6= 0 and k??
= 0: ppplprS ?
S impossible.?
if k?
= 0 and k??
6= 0: pprSppl ?
S impossible.?
if k?
= k??
= 0: w ?
{akbc | 0 ?
k}(Final) LemmaL(Gn) ?
{akbc | 0 ?
k ?
n}Proof: Suppose ?n(w) ` S, using pregroups[?n(w)] ?
S. We can write w = akbc for somek, such that :[?n(w)] = qqlppl?
??
?kpprqqr?
??
?nqqlpprqqrSWe use the following property (its proof is in Ap-pendix A) that entails that 0 ?
k ?
n.(Auxiliary) Lemma:if (1) X,Y, qqlp, prqqr, S ?
Swhere X ?
{ppl, qql}?
and Y ?
{qqr, ppr}?then{(2) nbalt(Xqql) ?
nbalt(qqrY )(2bis) nbalt(Xppl) ?
nbalt(pprY )where nbalt counts the alternations of p?s andq?s sequences (forgetting/dropping their expo-nents).3.4 Details of proof for G?Lemma{akbc | 0 ?
k} ?
L(G?
)Proof: As with Gn, it is relatively easy to see thatfor k ?
0, akbc ?
L(G?).
We have to consider((a ?
?
?
(a(a?
??
?kb)) ?
?
?
)c) and prove the following se-quent in NL:(((p / p), .
.
.
, ((p / p),?
??
?kp) ?
?
?
), (p \ S)) `NL SLemmaL(G?)
?
{akbc | 0 ?
k}Proof: Like for w ?
Gn, due to free groups, aword of L(G?)
has exactly one occurrence of c andone occurrence of b on the left of c (since [[??
(c)]] =p?1S, [[??
(b)]] = p and [[??
(a)]] = 1).Suppose w = akbak?cak??
a similar discussion asfor Gn in pregroups, gives k?
= k??
= 0, hence theresult3.5 Non-learnability of a Hierarchy of SystemsAn interest point of this construction: It provides alimit point for the whole hierarchy of Lambek gram-mars, and pregroup grammars.Limit point for pregroupsThe translation [?]
of Gn gives a limit point for thesimple free pregroup since for i ?
{?, 0, 1, 2, .
.
.
}:?i(w) `NL S iff w ?
LNL(Gi) by definition ;?i(w) `NL S implies [?i(w)] ?
S by models ;[?i(w)] ?
S implies w ?
LNL(Gi) from above.Limit point for NL?The same grammars and languages work since fori ?
{?, 0, 1, 2, .
.
.
}:?i(w) `NL S iff [?i(w)] ?
S from above ;?i(w) `NL S implies ?i(w) `NL?
S by hierarchy ;?i(w) `NL?
S implies [?i(w)] ?
S by models.Limit point for L and L?The same grammars and languages work since fori ?
{?, 0, 1, 2, .
.
. }
:?i(w) `NL S iff [?i(w)] ?
S from above ;?i(w) `NL S implies ?i(w) `L S using hierarchy ;?i(w) `L S implies ?i(w) `L?
S using hierarchy ;?i(w) `L?
S implies [?i(w)] ?
S by models.To summarize : w ?
LNL(Gi) iff [?i(w)] ?
S iffw ?
LNL?
(Gi) iff w ?
LL(Gi) iff w ?
LL?
(Gi)4 Conclusion and RemarksLambek grammars.
We have shown that with-out empty sequence, non-associative Lambek rigidgrammars are not learnable from strings.
With thisresult, the whole landscape of Lambek-like rigidgrammars (or k-valued for an arbitrary k) is now de-scribed as for the learnability question (from strings,in Gold?s model).Non-learnability for subclasses.
Our construct isof order 5 and does not use the product operator.Thus, we have the following corollaries:?
Restricted connectives: k-valued NL, NL?, L andL?
grammars without product are not learnablefrom strings.?
Restricted type order:- k-valued NL, NL?, L and L?
grammars (with-out product) with types not greater than or-der 5 are not learnable from strings4 .- k-valued free pregroup grammars with type-s not greater than order 1 are not learnablefrom strings5 .The learnability question may still be raised for NLgrammars of order lower than 5.4Even less for some systems.
For example in L?, all Encollapse to A5The order of a type pi11 ?
?
?
pikk is the maximum of the ab-solute value of the exponents: max(|i1|, .
.
.
, |ik|).Special learnable subclasses.
Note that howev-er, we get specific learnable subclasses of k-valuedgrammars when we consider NL, NL?, L or L?without product and we bind the order of types ingrammars to be not greater than 1.
This holds for allvariants of Lambek grammars as a corollary of theequivalence between generation in classical catego-rial grammars and in Lambek systems for grammarswith such product-free types (Buszkowski, 2001).Restriction on types.
An interesting perspectivefor learnability results might be to introduce reason-able restrictions on types.
From what we have seen,the order of type alone (order 1 excepted) does notseem to be an appropriate measure in that context.Structured examples.
These results also indicatethe necessity of using structured examples as inputof learning algorithms.
What intermediate structureshould then be taken as a good alternative betweeninsufficient structures (strings) and linguistic unreal-istic structures (full proof tree structures) remains aninteresting challenge.ReferencesE.
Aarts and K. Trautwein.
1995.
Non-associative Lam-bek categorial grammar in polynomial time.
Mathe-matical Logic Quaterly, 41:476?484.Dana Angluin.
1980.
Inductive inference of formal lan-guages from positive data.
Information and Control,45:117?135.Y.
Bar-Hillel.
1953.
A quasi arithmetical notation forsyntactic description.
Language, 29:47?58.Wojciech Buszkowski and Gerald Penn.
1990.
Categori-al grammars determined from linguistic data by unifi-cation.
Studia Logica, 49:431?454.W.
Buszkowski.
1997.
Mathematical linguistics andproof theory.
In van Benthem and ter Meulen (vanBenthem and ter Meulen, 1997), chapter 12, pages683?736.Wojciech Buszkowski.
2001.
Lambek grammars basedon pregroups.
In Philippe de Groote, Glyn Morill, andChristian Retore?, editors, Logical aspects of computa-tional linguistics: 4th International Conference, LACL2001, Le Croisic, France, June 2001, volume 2099.Springer-Verlag.Philippe de Groote and Franc?ois Lamarche.
2002.
Clas-sical non-associative lambek calculus.
Studia Logica,71.1 (2).Philippe de Groote.
1999.
Non-associative Lambek cal-culus in polynomial time.
In 8th Workshop on theo-rem proving with analytic tableaux and related meth-ods, number 1617 in Lecture Notes in Artificial Intel-ligence.
Springer-Verlag, March.Dudau-Sofronie, Tellier, and Tommasi.
2001.
Learningcategorial grammars from semantic types.
In 13th Am-sterdam Colloquium.C.
Costa Flore?ncio.
2002.
Consistent Identification inthe Limit of the Class k-valued is NP-hard.
In LACL.Annie Foret and Yannick Le Nir.
2002a.
Lambek rigidgrammars are not learnable from strings.
In COL-ING?2002, 19th International Conference on Compu-tational Linguistics, Taipei, Taiwan.Annie Foret and Yannick Le Nir.
2002b.
On limit pointsfor some variants of rigid lambek grammars.
In IC-GI?2002, the 6th International Colloquium on Gram-matical Inference, number 2484 in Lecture Notes inArtificial Intelligence.
Springer-Verlag.E.M.
Gold.
1967.
Language identification in the limit.Information and control, 10:447?474.Makoto Kanazawa.
1998.
Learnable classes of catego-rial grammars.
Studies in Logic, Language and In-formation.
FoLLI & CSLI.
distributed by CambridgeUniversity Press.Maciej Kandulski.
1988.
The non-associative lambekcalculus.
In W. Marciszewski W. Buszkowski andJ.
Van Bentem, editors, Categorial Grammar, pages141?152.
Benjamins, Amsterdam.Joachim Lambek.
1958.
The mathematics of sentencestructure.
American mathematical monthly, 65:154?169.Joachim Lambek.
1961.
On the calculus of syntactictypes.
In Roman Jakobson, editor, Structure of lan-guage and its mathematical aspects, pages 166?178.American Mathematical Society.J.
Lambek.
1999.
Type grammars revisited.
In AlainLecomte, Franc?ois Lamarche, and Guy Perrier, ed-itors, Logical aspects of computational linguistics:Second International Conference, LACL ?97, Nancy,France, September 22?24, 1997; selected papers, vol-ume 1582.
Springer-Verlag.Michael Moortgat.
1997.
Categorial type logic.
Invan Benthem and ter Meulen (van Benthem and terMeulen, 1997), chapter 2, pages 93?177.Jacques Nicolas.
1999.
Grammatical inference as u-nification.
Rapport de Recherche RR-3632, INRIA.http://www.inria.fr/RRRT/publications-eng.html.Mati Pentus.
1993.
Lambek grammars are context-free.In Logic in Computer Science.
IEEE Computer Soci-ety Press.Christian Retore?
and Roberto Bonato.
september2001.
Learning rigid lambek grammars and minimal-ist grammars from struc tured sentences.
Third work-shop on Learning Language in Logic, Strasbourg.T.
Shinohara.
1990.
Inductive inference from positivedata is powerful.
In The 1990 Workshop on Compu-tational Learning Theory, pages 97?110, San Mateo,California.
Morgan Kaufmann.J.
van Benthem and A. ter Meulen, editors.
1997.
Hand-book of Logic and Language.
North-Holland Elsevier,Amsterdam.Appendix A.
Proof of Auxiliary Lemma(Auxiliary) Lemma:if (1) XY qqlpprqqrS ?
Swhere X ?
{ppl, qql}?
and Y ?
{qqr, ppr}?then{(2) nbalt(Xqql) ?
nbalt(qqrY )(2bis) nbalt(Xppl) ?
nbalt(pprY )where nbalt counts the alternations of p?s andq?s sequences (forgetting/dropping their expo-nents).Proof: By induction on derivations in Gentzenstyle presentation of free pregroups (without Cut).Suppose XY ZS ?
Swhere??
?X ?
{ppl, qql}?Y ?
{qqr, ppr}?Z ?
{(qqlpprqqr), (qqlqqr), (qqr), 1}We show that{nbalt(Xqql) ?
nbalt(qqrY )nbalt(Xppl) ?
nbalt(pprY )The last inference rule can only be (AL)?
Case (AL) on X: The antecedent is similar withX ?
instead of X , where X is obtained from X ?
byinsertion (in fact inserting qlq in the middle of qqlas the replacement of qql with qqlqql or similarlywith p instead of q).- By such an insertion: (i) nbalt(X ?qql) =nbalt(Xqql) (similar for p).- By induction hypothesis: (ii) nbalt(X ?qql) ?nbalt(qqrY ) (similar for p).- Therefore from (i) (ii): nbalt(Xqql) ?nbalt(qqrY ) (similar for p).?
Case (AL) on Y : The antecedent is XY ?ZS ?S where Y is obtained from Y ?
by inser-tion (in fact insertion of ppr or qqr), suchthat Y ?
?
{ppr, qqr}?.
Therefore the induc-tion applies nbalt(Xqql) ?
nbalt(qqrY ?)
andnbalt(qqrY ) ?
nbalt(qqrY ?)
(similar for p)hence the result.?
Case (AL) on Z ( Z non empty):- if Z = (qqlpprqqr) the antecedent isXY Z ?S ?
S, where Z ?
= qqlqqr.- if Z = (qqlqqr) the antecedent is XY Z ?S ?S, where Z ?
= qqr ;- if Z = (qqr) the antecedent is XY Z ?S ?
S,where Z ?
= .In all three cases the hypothesis applies to XY Z ?and gives the relationship between X and Y .?
case (AL) between X and Y : Either X = X ?
?qqland Y = qqrY ??
or X = X ?
?ppl and Y = pprY ?
?.In the q case, the last inference step is the intro-duction of qlq:X?
?qqrY ?
?ZS?SX ??qql?
??
?XqqrY ???
??
?YZS?SWe now detail the q case.
The antecedent can berewritten as X ?
?Y ZS ?
S and we have: (i)nbalt(Xqql) = nbalt(X ?
?qqlqql)= nbalt(X ?
?qql)nbalt(Xppl) = nbalt(X ?
?qqlppl)= 1 + nbalt(X ?
?qql)nbalt(qqrY ) = nbalt(qqrqqrY ??
)= nbalt(qqrY ??
)nbalt(pprY ) = nbalt(pprqqrY ??
)= 1 + nbalt(qqrY ??
)We can apply the induction hypothesis toX ?
?Y ZS ?
S and get (ii):nbalt(X ?
?qql) ?
nbalt(qqrY )Finally from (i) (ii) and the induction hypothesis:nbalt(Xqql) = nbalt(X ??qql)?
nbalt(qqrY )nbalt(Xppl) = 1 + nbalt(X ??qql)?
1 + nbalt(qqrY )= 1 + nbalt(qqrqqrY ??
)= 1 + nbalt(qqrY ??
)= nbalt(pprY )The second case with p instead of q is similar.
