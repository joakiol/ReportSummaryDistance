Making Abduct ion More EfficientDouglas Appelt  and Jerry R. HobbsSRI InternationalMenlo Park, CaliforniaIntroduct ionThe TACITUS system uses a cost-based abductionscheme for finding and choosing among possible inter-pretations for natural anguage texts.
Ordinary Prolog-style, backchaining deduction is augmented with the ca-pability of making assumptions and of factoring two goalliterals that are unifiable (see Hobbs et al, 1988).Deduction is combinatorially explosive, and since theabduction scheme augments deduction with two moreoptions at each node--assumption a d factoring--it iseven more explosive.
We have been engaged in an empiri-cal investigation of the behavior of this abductive schemeon a knowledge base of nearly 400 axioms, performingrelatively sophisticated linguistic processing.
So far, wehave begun to experiment, with good results, with threedifferent echniques for controlling abduction--a type hi-erarchy, unwinding or avoiding transitivity axioms, andvarious heuristics for reducing the branch factor of thesearch.The Type HierarchyThe first example on which we tested the abductivescheme was the sentenceThere was adequate lube oil.The system got the correct interpretation, that the lubeoil was the lube oil in the lube oil system of the air com-pressor, and it assumed that that lube oil was adequate.But it also got another interpretation.
There is a men-tion in the knowledge base of the adequacy of the lubeoil pressure, so it identified that adequacy with the ade-quacy mentioned in the sentence.
It then assumed thatthe pressure was lube oil.It is clear what went wrong here.
Pressure is a magni-tude whereas lube oil is a material, and magnitudes can'tbe materials.
In principle, abduction requires a check forthe consistency of what is assumed, and our knowledgebase should have contained axioms from which it couldbe inferred that a magnitude is not a material.
In prac-tice, unconstrained consistency checking is undecidableand, at best, may take a long time.
Nevertheless, onecan, through the use of a type hierarchy, eliminate a verylarge number of possible assumptions that are likely toresult in an inconsistency.
We have consequently imple-mented a module that specifies the types that variouspredicate-argument positions can take on, and the likelydisjointness relations among types.
This is a way of ex-ploiting the specificity of the English lexicon for com-putational purposes.
This addition led to a speed-up oftwo orders of magnitude.A further use of the type hierarchy speeds up process-ing by a factor of 2 to 4.
The types provide prefilteringof relevant axioms for compound nominal, coercion, andother very general relations.
Suppose, for example, thatwe wish to prove rel(a, b), and we have the two axiomsWithout a type hierarchy we would have to backchain onboth of these axioms.
If, however, the first of the axiomsis valid only when x and y are of types tl and t2, respec-tively, and the second is valid only when x and y are oftypes t3 and t4, respectively, and a and b have alreadybeen determined to be of types tl and t2, respectively,then we need only backchain on the first of the axioms.There is a problem with the type hierarchy, however.In an ontologically promiscuous notation, there is nocommitment in a primed proposition to truth or exis-tence in the real world.
Thus, lube-oill(e,o) does notsay that o is lube oil or even that it exists; rather itsays that e is the eventuality of o's being lube oil.
Thiseventuality may or may not exist in the real world.
Ifit does, then we would express this as Rexists(e), andfrom that we could derive from axioms the existence of oand the fact that it is lube oil.
But e's existential statuscould be something different.
For example, e could benonexistent, expressed as not(e) in the notation, and inEnglish as "The eventuality e of o's being lube oil doesnot exist," or simply as "o is not lube oil."
Or e mayexist only in someone's beliefs or in some other possibleworld.
While the axiom(Vx)press=re(x)  l be-oiZ(x)is certainly true, the axiom(V e:, x)pressure'(el, x) D60would not be true.
The fact that a variable occupiesthe second argument position of the predicate lube-oil ~does not mean it is lube oil.
We cannot properly restrictthat argument position tobe  lube oil, or fluid, or even amaterial, for that would rule out perfectly true sentenceslike "Truth is not lube oil.
"Generally, when one uses a type hierarchy, one as-sumes the types to be disjoint sets with cleanly definedboundaries, and one assumes that predicates take argu-ments of only certain types.
There are a lot of problemswith this idea.
In any case, in our work, we are not buy-ing into this notion that the universe is typed.
Ratherwe are using the type hierarchy strictly as a heuristic, asa set of guesses not about what could or could not be butabout what it would or would not occur to someone tosay.
When two types are declared to be disjoint, we aresaying that they are certainly disjoint in the real world,and that they are very probably disjoint everywhere x-cept in certain bizarre modal contexts.
This means, how-ever, that we risk failing on certain rare examples.
Wecould not, for example, deal with the sentence, "It thenassumed that the pressure was lube oil.
"Unwinding or Avoiding Transitiv-ity Ax iomsIn general, one must exercise a certain discipline in theaxioms one writes.
At one point, in order to concludefrom the sentenceBombs exploded at the offices of French-ownedfirms in Catalonia.that the country in which the terrorist incident occurredwas Spain, we wrote the following axiom:(V x, y, z)in(x, y) A partof(y, z) D in(x, z)That is, if x is in y and y is a part of z, then x is alsoin z.
The interpretation of this sentence was taking anextraordinarily ong time.
When we examined the searchspace, we discovered that it was dominated by this oneaxiom.
We replaced the axiom with several axioms thatlimited the depth of recursion to three, and the problemdisappeared.In general, one must exercise a certain discipline inthe axioms one writes.
Which kinds of axioms causetrouble and how to replace them with adequate but lessdangerous axioms is a matter of continuing investigation.Reducing the Branch Factor ofthe SearchIt is always useful to reduce the branch factor of thesearch for a proof wherever possible.
There are severalheuristics we have devised so far for accomplishing this.The first heuristic is to prove the easiest, most specificconjuncts first, and then to propagate the instantiations.For example, in the domain of naval operations reports,words like "Lafayette" are treated as referring to classesof ships rather than to individual ships.
Thus, in thesentenceLafayette sighted.
"Lafayette" must be coerced into a physical object thatcan be sighted.
We must prove the expression(3 x, y) Lafayette(x) A tel(y, x)The predicate Lafayette is true only of the entityLAFA YETTE-CLASS.
Thus, rather than trying to provetel(y, x) first, leading to a very explosive search, we tryfirst to prove Lafayette(x).
We succeed immediately, andpropagate the value LAFAYETTE-CLASS for x. Wethus have to prove rel(y, LAFAYETTE-CLASS) .
Be-cause of the type of LAFAYETTE-CLASS,  only one ax-iom applies, namely, the one allowing coercions fromtypes to tokens that says that y must be an instanceof LAFAYETTE-CLASS.Similar heuristics involve solving reference problemsbefore coercion problems and proving conjuncts whosesource is the head noun of a noun phrase before provingconjuncts derived from adjectives.Another heuristic is to eliminate assumptions wher-ever possible.
We are better off if at any node, ratherthan having either to prove an atomic formula or to as-sume it, we only have to prove it.
Some predicates aretherefore marked as nonassumable.
One category of suchpredicates are the "closed-world predicates", those pred-icates such that we know all entities of which the predi-cate is true.
Predicates representing proper names, suchas Enterprise, and classes, such as LafayeLte, are exam-ples.
We don't assume these predicates because we knowthat if they are true of some entity, we will be able toprove it.Another category of such predicates is the "schema-related" predicates.
In the naval operations domain,the task is to characterize the participants in incidentsdescribed in the message.
This is done, as describedin Section 5.4.
A schema is encoded by means of aschema predication, with an argument for each role inthe schema.
Lexical realizations and other consequencesof schemas are encoded by means of schema axioms.Thus, in the jargon of naval operations reports, a planecan splash another plane.
The underlying schema iscalled Init-Act.
There is thus an axiom(V x, y, .
.
.
)Init-Act(x, y, attack,.
.
. )
Dsplash(x, y)Schema-related predicates like splash occurring in thelogical form of a sentence are given very large assump-tion costs, effectively preventing their being assumed.The weight associated with the antecedent of the schemaaxioms is very very small, so that the schema predicationcan be assumed very cheaply.
This forces backchaininginto the schema.In addition, in the naval operations application, co-ercion relations are never assumed, since this is whatdrives the use of the type hierarchy.61Factoring also multiplies the size of the search treewherever it can occur.
As explained above, it is a verypowerful method for coreference resolution.
It is basedon the principle that where it can be inferred that twoentities have the same property, there is a good possibil-ity that the two entities are identical.
However, this istrue only for fairly specific properties.
We don't want tofactor predicates true of many things.
For example, toresolve the noun phraseships and planeswe need to prove the expression(3 x, sl, y, s2)Plural(x, sl) A ship(x) APlural(u, s2) ^  plane(u)where Plural is taken to be a relation between thetypical element of a set and the set itself.
If we ap-plied factoring indiscriminately, then we would factor theconjuncts Plural(x, sl) and Plural(y, s2), identifying xwith y and Sl with s2.
If we were lucky, this interpre-tation would be rejected because of a type violation--planes aren't ships.
But this would waste time.
It ismore reasonable to say that very general predicates suchas Plural provide no evidence for identity.The type hierarchy, the discipline imposed in writingaxioms, and the heuristics for limiting search all makethe system less powerful than it would otherwise be, butwe implement these techniques for the sake of efficiency.There is a kind of scale, whose opposite poles are effi-ciency and power, on which we are trying to locate thesystem.
It is a matter of ongoing investigation where onthat scale we achieve optimal performance.References[1] Hobbs, Jerry R., Mark Stickel, Paul Martin, andDouglas Edwards, 1988.
"Interpretation as Abduc-tion", Proceedings, 26th Annual Meeting of the As-sociation for Computational Linguistics, pp.
95-103,Buffalo, New York, June 1988.52
