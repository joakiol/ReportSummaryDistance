Proceedings of the Fourth International Natural Language Generation Conference, pages 95?102,Sydney, July 2006. c?2006 Association for Computational LinguisticsGeneric Querying of Relational Databases using Natural LanguageGeneration TechniquesCatalina HallettCenter for Research in ComputingThe Open UniversityWalton Hall, Milton KeynesUnited Kingdomc.hallett@open.ac.ukAbstractThis paper presents a method of queryingdatabases by means of a natural language-like interface which offers the advantageof minimal configuration necessary forporting the system.
The method allowsus to first automatically infer the set ofpossible queries that can apply to a givendatabase, automatically generate a lexiconand grammar rules for expressing thesequeries, and then provide users with aninterface that allows them to pose thesequeries in natural language without thewell-known limitations of most naturallanguage interfaces to databases.
The waythe queries are inferred and constructedmeans that semantic translation is per-formed with perfect reliability.1 IntroductionNatural Language interfaces to databases (here-after NLIDBs ) have long held an appeal to boththe databases and NLP communities.
However,difficulties associated with text processing, seman-tic encoding, translation to database querying lan-guages and, above all, portability, have meant that,despite recent advances in the field, NLIDBs arestill more a research topic than a commercial solu-tion.Broadly, research in NLIDBs has focusedon addressing the following fundamental, inter-dependent issues1:?
domain knowledge aquisition (Frank et al,2005);1The extent of NLIDB research is such that it is beyondthe scope of this paper to reference a comprehensive list ofprojects in this area.
For reviews on various NLIDBs , thereader is referred to (Androutsopoulos et al, 1995).?
interpretation of the input query, includingparsing and semantic disambiguation, se-mantic interpretation and transformation ofthe query to an intermediary logical form(Hendrix et al, 1978; Zhang et al, 1999;Tang and Mooney, 2001; Popescu et al,2003; Kate et al, 2005);?
translation to a database query language(Lowden et al, 1991; Androutsopoulos,1992);?
portability (Templeton and Burger, 1983; Ka-plan, 1984; Hafner and Godden, 1985; An-droutsopoulos et al, 1993; Popescu et al,2003)In order to recover from errors in any either ofthese steps, most advanced NLIDB systems willalso incorporate some sort of cooperative userfeedback module that will inform the user of theinability of the system to construct their query andask for clarification.We report here on a generic method we havedeveloped to automatically infer the set of possi-ble queries that can apply to a given database, andan interface that allows users to pose these ques-tions in natural language but without the previ-ously mentioned drawbacks of most NLIDBs .
Ourwork is substantially different from previous re-search in that it does not require the user to inputfree text queries, but it assists the user in com-posing query through a natural language-like in-terface.
Consequently, the necessity for syntacticparsing and semantic interpretation is eliminated.Also, since users are in control of the meaning ofthe query they compose, ambiguity is not an issue.Our work builds primarily on two directionsof research: conceptual authoring of queries via95WYSIWYM interfaces, as described in section 2,and NLIDB portability research.
From the perspec-tive of the query composing technique, our sys-tem resembles early menu-based techniques, suchas Mueckstein (1985), NL-Menu (Tennant et al,1983) and its more recent re-development Lingo-Logic (Thompson et al, 2005).
This resemblanceis however only superficial.
Our query editing in-terface employs natural language generation tech-niques for rendering queries in fluent language; italso allows the editing of the semantic content ofa query rather than its surface form, which allowsseamless translation to SQL .As in (Zhang et al, 1999), our system makesuse of a semantic graph as a mean of representingthe database model.
However, whilst Zhang et al(1999) use the Semantic Graph as a resource forproviding and interpreting keywords in the inputquery, we use this information as the main meansof automatically generating query frames.2 WYSIWYM interfaces for databasequeryingConceptual authoring through WYSIWYM editingalleviates the need for expensive syntactic and se-mantic processing of the queries by providing theusers with an interface for editing the conceptualmeaning of a query instead of the surface text(Power and Scott, 1998).The WYSIWYM interface presents the contentsof a knowledge base to the user in the form ofa natural language feedback text.
In the case ofquery editing, the content of the knowledge base isa yet to be completed formal representation of theusers query.
The interface presents the user witha natural language text that corresponds to the in-complete query and guides them towards editinga semantically consistent and complete query.
Inthis way, the users are able to control the interpre-tation that the system gives to their queries.
Theuser starts by editing a basic query frame, whereconcepts to be instantiated (anchors) are clickablespans of text with associated pop-up menus con-taining options for expanding the query.Previously, WYSIWYM interfaces have provedvalid solutions to querying databases of legal doc-uments and medical records (Piwek et al, 2000),(Piwek, 2002), (Hallett et al, 2005).As a query-formulation method, WYSIWYMprovides most of the advantages of NLIDBs , butovercomes the problems associated with naturallanguage interpretation and of users attempting topose questions that are beyond the capability ofthe system or, conversely, refraining from askinguseful questions that are in fact within the sys-tem?s capability.
However, one of the disadvan-tages of the WYSIWYM method is the fact that do-main knowledge has to be manually encoded.
Inorder to construct a querying interface for a newdatabase, one has to analyse the database and man-ually model the queries that can be posed, thenimplement grammar rules for the construction ofthese queries.
Also, the process of transformingWYSIWYM queries into SQL or another databasequerying language has previously been database-specific.
These issues have made it expensive toport the interface to new databases and new do-mains.The research reported here addresses both theseshortcomings by providing a way of automaticallyinferring the type of possible queries from a graphrepresentation of the database model and by devel-oping a generic way of translating internal repre-sentations of WYSIWYM constructed queries intoSQL .3 Current approachIn the rest of the paper, we will use the followingterms: a query frame refers to a system-generatedquery that has not been yet edited by the user,therefore containing only unfilled WYSIWYM an-chors.
An anchor is part of the WYSIWYM ter-minology and means a span of text in a partiallyformulated query, that can be edited by the user toexpand a concept.
Anchors are displayed in squarebrackets (see examples in section 3.3).To exemplify the system behaviour, we will useas a case study the MEDIGAP database, whichis a freely downloadable repository of informa-tion concerning medical insurance companies inthe United States.
We have chosen this particu-lar database because it contains a relatively widerange of entity and relation types and can yield alarge number of types of queries.
In practice wehave often noticed that large databases tend to befar less complex.3.1 System architectureFigure 1 shows the architecture of the query-ing system.
It receives as input a model ofthe database semantics (the semantic graph) andit automatically generates some of the compo-96Semantic graphUserinterfaceWysiwymcomponentsT-boxGrammarrulesTextgeneratorQuery SQLQueryLexiconDatabaseFigure 1: System architecturenents and resources (highlighted in grey) that inprevious WYSIWYM querying systems were con-structed manually.
Finally, it implements a mod-ule that translates the user-composed query intoSQL .The components highlighted in grey are thosethat are constructed by the current system.The T-box describes the high-level componentsof the queries.
It is represented in Profit notation(Erbach, 1995) and describes the composition ofthe query frames (the elements that contribute to aquery and their type) .
A fragment of the semanticgraph displayed in 2 will generate the followingfragment of t-box:query > [about_company, about_state,about_phone, about_ext].about_company > [company_state, company_phone,company_ext].company_state intro [company:company_desc].company_desc intro [comp:comp_desc, phone:phone_desc,ext:ext_desc].state_desc > external(?dbo_vwOrgsByState_StateName?
).comp_desc > external(?dbo_vwOrgsByState_org_name?
).phone_desc > external(?dbo_vwOrgsByState_org_phone?
).ext_desc > external(?dbo_vwOrgsByState_org_ext?
).The grammar rules are also expressed inProfit, and they describe the query formulationprocedure.
For example, the following rule will begenerated automatically to represent the construc-tion procedure for the query in Example (1.1):rule(english, company_state,meaning!
(<description &predicate!company_state &properties!
[attribute!comp & value!Comp]) &layout!level!question &cset!
[meaning!in &syntax!category!prep &layout!level!word,meaning!which &syntax!category!int &layout!level!word,meaning!state &syntax!category!np &layout!level!word,meaning!be &syntax!
(category!vb & form!pres),layout!level!word,meaning!Comp &syntax!category!np &layout!level!phrase,meaning!locate &syntax!
(category!vb & form!part),layout!level!word]).In addition to the grammar rules automaticallygenerated by the system, the WYSIWYM pack-age also contains a set of English grammar rules(for example, rules for the construction of defi-nite noun phrases or attachment of prepositionalphrases).
These rules are domain independent, andtherefore a constant resource for the system.The lexicon consists of a list of concepts to-gether with their lexical form and syntactic cate-gory.
For example, the lexicon entry for insurancecompany will look like:word(english, meaning!company &syntax!
(category!noun & form!name) &cset!
?insurance company?
)).3.2 Semantic graphThe semantics of a relational database is specifiedas a directed graph where the nodes represent el-ements and the edges represent relations betweenelements.
Each table in the database can be seenas a subgraph, with edges between subgraphs rep-resenting a special type of join relation.Each node has to be described in terms of its se-mantics and, at least for the present, in terms of itslinguistic realisation.
The semantic type of a nodeis restricted by the data type of the correspond-ing entity in the database.
A database entity oftype String can belong to one of the following se-mantic categories: person, organization, location(town, country), address (street or complete ad-dress), telephone number, other name, other ob-ject.
Similarly, numerical entities can have the se-mantic type: age, time (year, month, hour), length,97OrgNameSem: organisationLex: insurance companyMorph: proper nounPhone#?Extension?StateNameSem: locationLex: stateMorph: proper nounType: descriptiveArity: n to 1Sem: locationLex: be located inFrame: NP-VB-NPTable 1Type: attributiveSem: possessionLex: haveFrame: NP-VB-NPType: attributiveSem: possessionLex: haveFrame: NP-VB-NPTable 2Figure 2: Example of a semantic graphweight, value, height.
The data type date has onlyone possible semantic type, which is date.
Thesesemantic types have proved sufficient in our exper-iments, however this list can be expanded if nec-essary.Apart from the semantic type, each node mustspecify the linguistic form used to express thatnode in a query.
For example, in our case study,the field StateName will be realised as state, withthe semantic category location.
Additionally, eachnode will contain the name of the table it belongsto and the name of the column it describes.Relations in the semantic graph are also de-scribed in terms of their semantic type.
Since re-lations are always realised as verbs, their seman-tic type also defines the subcategorisation frameassociated with that verb.
For the moment, sub-categorisation frames are imported from a locallycompiled dictionary of 50 frequent verbs.
The useronly needs to specify the semantic type of the verband, optionally, the verb to use.
The system au-tomatically retrieves from the dictionary the ap-propriate subcategorisation frame.
The dictionaryhas the disadvantage of being rather restricted incoverage, however it alleviates the need for theuser to enter subcategorisation frames manually,a task which may prove tedious for a user with-out the necessary linguistic knowledge.
However,we allow users to enter new frames in the dictio-nary, should their verb or category of choice notbe present.
A relation must also specify its arity.This model of the database semantics is par-tially constructed automatically by extractingdatabase metadata information such as data typesand value ranges and foreign keys.
The manualeffort involved in creating the semantic graph isreduced to the input of semantic and linguistic in-formation.3.3 Constructing queriesWe focus our attention in this paper to the con-struction of the most difficult type of queries:complex wh-queries over multiple database tablesand containing logical operators.
The only restric-tion on the range of wh-queries we currently con-struct is that we omit queries that require infer-ences over numerical and date types.Each node in the semantic graph can be usedto generate a number of query frames equal to thenumber of nodes it is connected to in the graph.Each query frame is constructed by pairing thecurrent node with each other of the nodes it islinked to.
By generation of query frames we desig-nate the process of automatically generating Profitcode for the grammar rule or set of rules used byWYSIWYM , together with the T-box entries re-quired by that particular rule.If we consider the graph presented in Fig.2,and focus on the node orgName, the system willconstruct the query frames:Example (1):1.
In which state is [some insurancecompany] located?2.
What phone number does [someinsurance company] have?3.
What extension does [some insurancecompany] have?If we consider the first query in the exampleabove, the user can further specify details about98the company by selecting the [some insurancecompany] anchor and choosing one of the optionsavailable (which themselves are automaticallygenerated from the database in question).
Thisinformation may come from one or more tables.For example, one table in our database containsinformation about the insurance companies con-tact details, whilst another describes the servicesprovided by the insurance companies.
Therefore,the user can choose between three options:contact details, services and all.
Each selectiontriggers a text regeneration process, where thefeedback text is transformed to reflect the userselection, as in the example below:Example (2):1.
In which state is [some insurancecompany] that has [some phone number]and [some extension] located?2.
In which state is [some insurancecompany] that offers [some medicalinsurance plan] and [is available] topeople over 65 located?3.
In which state is the insurancecompany with the following featureslocated:?
It has [some phone number] and [someextension]and?
It offers [some medical insuranceplan] and [is available] to people over65Figure 3 shows a snapshot of the query editinginterface where query (2.1) is being composed.Each query frame is syntactically realised byusing specially designed grammar rules.
Thegeneration of high level queries such as thosein Example (1.1) relies on basic query syntaxrules.
The semantic type of each linked elementdetermines the type of wh-question that will beconstructed.
For example, if the element has thesemantic type location, we will construct wherequestions, whilst a node with the semantic typePERSON will give rise to a who-question.
Inorder to avoid ambiguities, we impose furtherrestrictions on the realisation of the query frames.If there is more than one location-type elementlinked to a node, the system will not generate twowhere query frames, which would be ambiguous,but more specific which queries.
For example,our database contains two nodes of semantic typelocation linked to the node OrgName.
The firstdescribes the state where an insurance company islocated, the second its address.
The query framesgenerated will be:Example (3):1.
In which states is some insurancecompany located?2.
At what addresses is some insurancecompany located?The basic grammar rule pattern for queriesbased on one table only states that elements linkedto a particular node will be realised in relativeclauses modifying that node.
For example, in Ex-ample (2.1), the nodes phones and ext are accessi-ble from the node orgName, therefore will be re-alised in a relative clause that modifies insurancecompany.In the case where the information comes frommore than one table, it is necessary to introducemore complex layout features in order to make thequery readable.
For each table that provides in-formation about the focused element we generatebulleted lines as in Example (2.3).Each question frame consists of a bound ele-ment2, i.e., the user cannot edit any values for thatparticular element.
This corresponds to the infor-mation that represents the answer to the questions.In example (2), the bound element is state.
Allother nodes will be realised in the feedback textas anchors, that are editable by users.
One ex-ception is represented by nodes that correspond todatabase elements of boolean type.
In this case,the anchor will not be associated to a node, but toa relation, as in Example (2.3) (the availability ofan insurance plan is a boolean value).
This is toallow the verb to take negative form - in our ex-ample, one can have is available to people over 65or is not available to people over 65.Since not all anchors have to be filled in, onequery frame can in fact represent more thanone real-life question.
In example (4), one canedit the query to compose any of the followingcorresponding natural language questions:Example (4):1.
In which state is the insurancecompany with the phone number 8008474836located?2.
In which state is the insurance2In fact, a single element can be replaced of any numberof elements of the same type linked by conjunctions or dis-junctions.
However, we will refer to a single element by wayof simplification.
The process of inferring queries remainsesentially the same.99Figure 3: Query editing interface snapshotcompany Thrivent Financial for Lutheranswith the phone number 8008474836located?3.
In which state is the insurancecompany Thrivent Financial for Lutheranswith the phone number 8008474836 andextension 8469 located?The actual values of anchors are extracted fromthe database and transformed into correct lexiconentries on a per-need basis.
The strings associatedwith a value (e.g.
Thrivent Financial for Luther-ans) are retrieved from the database table and col-umn indicated in the description of the node thatwas used for generating the anchor (e.g.
orgName)and the syntactic role (e.g.
proper noun) is givenby the syntactic information associated with thenode.3.4 Query translation moduleOnce a query has been constructed, it is rep-resented internally as a directed acyclic graph.Moreover, each node in the graph can be mappedinto a node in the semantic graph of the database.The translation module transforms a contructedquery to an SQL statement by parsing the querygraph and combining it with the corresponding el-ements in the semantic graph.The SELECT portion of the statement containsthe focused element.
The WHERE portion con-tains those nodes in the question graph that cor-respond to edited anchors.
For constructing theFROM portion of the statement, we extract, fromthe semantic graph, for each SELECTED elementinformation about their corresponding database ta-ble.For example, if we assume that in Example (2.1)the user has specified the name of the companyand its phone number, the SQL statement gener-ated will be:SELECT dbo_vwOrgsByState.StateNameFROM dbo_vwOrgsByStateWHERE org_name="Thrivent Financial forLutherans"And org_phone="8008474836";4 Evaluation4.1 UsabilityA recent study of the usability of a WYSIWYM typeof interface for querying databases (Hallett et al,2006) has shown that users can learn how to usethe interface after a very brief training and suc-ceed in composing queries of quite a high level ofcomplexity.
They achieve near-perfect query con-struction after the first query they compose.
Thestudy also showed that the queries as they appearin the WYSIWYM feedback text are unambiguous?
not only to the back-end system ?
but also tothe user, i.e., users are not misled into constructingqueries that may have a different meaning than theone intended.
Additionally, it appears that expertusers of SQL , with expert knowledge of the un-derlying database, find the query interface easierto use than querying the database directly in SQL.
We consider that most of the conclusions drawnin (Hallett et al, 2006) apply to the current sys-tem.
The only difference may appear in assess-ing the ambiguity of the feedback text.
Since thequery construction rules used for our system aregenerated automatically, it is likely that the feed-back text may be less fluent and, potentially, moreambiguous than a feedback text generated usingmanually constructed rules, as in (Hallett et al,2006).
We have not yet addressed this issue in aformal evaluation of the current system.1004.2 CoverageWe have assessed the coverage of the system us-ing as our test set a set of English questionsposed over a database of geographical informationGEOBASE, as in (Tang and Mooney, 2001) and(Popescu et al, 2003).
Our first step was to convertthe original Prolog database (containing about 800facts) into a relational database.
Then we testedhow many of the 250 human produced questionsin the test set can be constructed using our system.There are several issues in using this particu-lar dataset for testing.
Since we do not providea pure natural language interface, the queries oursystem can construct are not necessarily expressedin the same way or using the same words as thequestions in the test set.
For example, the ques-tion ?How high is Mount McKinley??
in the testset is equivalent to ?What is the height of MountMcKinley??
produced by our system.
Similarly,?Name all the rivers in Colorado.?
is equivalentto ?Which rivers flow through Colorado??.
Also,since the above test set was designed for testingand evaluating natural language interfaces, manyof the questions have equivalent semantic content.For example, ?How many people live in Califor-nia??
is semantically equivalent to ?What is thepopulation of California??.
Similarly, there is nodifference in composing and analysing ?What isthe population of Utah??
and ?What is the popu-lation of New York City?
?.Out of 250 test questions, 100 had duplicate se-mantic content and the remaining 150 had originalcontent.
On the whole test set of 250 questions,our system was able to generate query frames thatallow the construction of 145 questions, therefore58%.
The remaining 42% of questions belong toa single type of questions that our current imple-mentation cannot handle, which is questions thatrequire inferences over numerical types, such asWhich is the highest point in Alaska?
or What isthe combined area of all 50 states?.Similar results are achieved when testing thesystem on the 150 relevant questions only: 60%of the questions can be formulated, while the re-maining 40% cannot.4.3 CorrectnessThe correctness of the SQL generated queries wasassessed on the subset of queries that our systemcan formulate out of the total number of queriesin the test set.
We found that the correct SQL wasproduced for all the generated WYSIWYM queriesproduced.5 Conclusions & Further workOur method presents three main advantages overother natural language interfaces to databases:1.
It is easily customizable for new domains anddatabases.2.
It eliminates errors in parsing and query-to-SQLtranslation.3.
It makes clear to the user the full range ofpossible queries that can be posed to any givendatabase.From a user?s point of view, one could arguethat our method is less natural to use than one thatallows unconstrained (or less constrained) naturallanguage input.
It could also be said that whilesyntactically correct, the queries as presented tothe user may not be as fluent as human-authoredquestions.
These possible disadvantages are, inour opinion, outweighed by the clarity of the querycomposition process, since the user is fully in con-trol of the semantic content of the query she com-poses; they are unambiguous to both the user andthe back-end system.We are currently extending this work to covermore complex queries that require inferences andones that contain elements linked through tempo-ral relations.
We will also refine the query layoutprocedures to allow complex queries to be pre-sented in a more intuitive way.
Additionally, weare about to begin work on automating the the con-struction of the semantic graph.
We expect thatsome of the semantic and syntactic informationthat, at the moment, has to be manually enteredin the description of the semantic graph can be in-ferred automatically from the database content.AcknowledgementThe work described in this paper is part of theClinical E-Science Framework (CLEF) project,funded by the Medical Research Council grantG0100852 under the E-Science Initiative.
Wegratefully acknowledge the contribution of ourclinical collaborators at the Royal Marsden andRoyal Free hospitals, colleagues at the NationalCancer Research Institute (NCRI) and NTRACand to the CLEF industrial collaborators.101ReferencesI.
Androutsopoulos, G.Ritchie, and P.Thanitsch.
1993.An effcient and portable natural language query in-terface for relational databases.
In Proceedings ofthe 6th International Conference on Industrial En-gineering Applications of Artificial Intelligence andExpert Systems Edinburgh, pages 327?330.I.
Androutsopoulos, G.D. Ritchie, and P.Thanisch.1995.
Natural language interfaces to databases -an introduction.
Natural Language Engineering,2(1):29?81.I.
Androutsopoulos.
1992.
Interfacing a natural lan-guage front end to a relational database.
Master?sthesis, Department of Artificial Intelligence Univer-sity of Edinburgh.Gregor Erbach.
1995.
ProFIT ?
prolog with features,inheritance, and templates.
In Proceedings of the7th Conference of the European Chapter of the Ass-cociation for Computational Linguistics, EACL-95,Dublin, Ireland.A.
Frank, Hans-Ulrich Krieger, Feiyu Xu, Hans Uszko-reit, Berthold Crysmann, Brigitte Jorg, and UlrichSchafer.
2005.
Querying structured knowledgesources.
In AAAI-05Workshop onQuestion Answer-ing in Restricted Domains, Pittsburgh, Pennsylva-nia.Carole D. Hafner and Kurt Godden.
1985.
Portabilityof syntax and semantics in datalog.
ACM Trans.
Inf.Syst., 3(2):141?164.C.
Hallett, D. Scott, and R.Power.
2005.
Intuitivequerying of ehealth data repositories.
In Proceed-ings of the UK E-Science All-Hands Meeting, Not-tingham, UK.C.
Hallett, D. Scott, and R.Power.
2006.
Evaluation ofthe clef query interface.
Technical Report 2006/01,Department of Computing, The Open University.Gary G. Hendrix, Earl D. Sacerdoti, Daniel Sagalow-icz, and Jonathan Slocum.
1978.
Developing a natu-ral language interface to complex data.
ACM Trans.Database Syst., 3(2):105?147.S.
Jerrold Kaplan.
1984.
Designing a portable nat-ural language database query system.
ACM Trans.Database Syst., 9(1):1?19.R.J.
Kate, Y.W.
Wong, and R.J. Mooney.
2005.
Learn-ing to transform natural to formal languages.
InPro-ceedings of the Twentieth National Conference onArtificial Intelligence (AAAI-05), pages 1062?1068,Pittsburgh, PA.B.G.T.
Lowden, B.R.
Walls, A.
De Roeck, C.J.
Fox,and R. Turner.
1991.
A formal approach to translat-ing english into sql.
In Jackson and Robinson, edi-tors, Proceedings of the 9th British National Confer-ence on Databases.Eva-Martin Mueckstein.
1985.
Controlled naturallanguage interfaces (extended abstract): the best ofthree worlds.
In CSC ?85: Proceedings of the 1985ACM thirteenth annual conference on Computer Sci-ence, pages 176?178, New York, NY, USA.
ACMPress.P.
Piwek, R. Evans, L. Cahill, and N. Tipper.
2000.Natural language generation in the mile system.
InProceedings of the IMPACTS in NLG Workshop,Schloss Dagstuhl, Germany.P.
Piwek.
2002.
Requirements definition, validation,verification and evaluation of the clime interface andlanguage processing technology.
Technical ReportITRI-02-03, ITRI, University of Brighton.Ana-Maria Popescu, Oren Etzioni, and Henry Kautz.2003.
Towards a theory of natural language in-terfaces to databases.
In IUI ?03: Proceedings ofthe 8th international conference on Intelligent userinterfaces, pages 149?157, New York, NY, USA.ACM Press.Richard Power and Donia Scott.
1998.
Multilin-gual authoring using feedback texts.
In Proceedingsof 17th International Conference on ComputationalLinguistics and 36th Annual Meeting of the Associ-ation for Computational Linguistics (COLING-ACL98), pages 1053?1059, Montreal, Canada.Lappoon R. Tang and Raymond J. Mooney.
2001.
Us-ing multiple clause constructors in inductive logicprogramming for semantic parsing.
In EMCL ?01:Proceedings of the 12th European Conference onMachine Learning, pages 466?477, London, UK.Springer-Verlag.Marjorie Templeton and John Burger.
1983.
Problemsin natural-language interface to dbms with examplesfrom eufid.
In Proceedings of the first conferenceon Applied natural language processing, pages 3?16, Morristown, NJ, USA.
Association for Compu-tational Linguistics.Harry R. Tennant, Kenneth M. Ross, and Craig W.Thompson.
1983.
Usable natural language inter-faces through menu-based natural language under-standing.
In CHI ?83: Proceedings of the SIGCHIconference on Human Factors in Computing Sys-tems, pages 154?160, New York, NY, USA.
ACMPress.C.
Thompson, P. Pazandak, and H. Tennant.
2005.Talk to your semantic web.
IEEE Internet Comput-ing, 9:75?78.Guogen Zhang, Wesley W. Chu, Frank Meng, andGladys Kong.
1999.
Query formulation from high-level concepts for relational databases.
In UIDIS?99: Proceedings of the 1999 User Interfaces toData Intensive Systems, page 64, Washington, DC,USA.
IEEE Computer Society.102
