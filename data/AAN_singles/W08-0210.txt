Proceedings of the Third Workshop on Issues in Teaching Computational Linguistics (TeachCL-08), pages 80?86,Columbus, Ohio, USA, June 2008. c?2008 Association for Computational LinguisticsZero to Spoken Dialogue System in One Quarter: Teaching ComputationalLinguistics to Linguists Using RegulusBeth Ann HockeyDepartment of Linguistics,UARCUC Santa CruzMail-Stop 19-26, NASA AmesMoffett Field, CA 94035-1000bahockey@ucsc.eduGwen ChristianDepartment of LinguisticsUCSCSanta Cruz, CA 95064, USAjchristi@ucsc.eduAbstractThis paper describes a Computational Lin-guistics course designed for Linguistics stu-dents.
The course is structured around the ar-chitecture of a Spoken Dialogue System andmakes extensive use of the dialogue systemtools and examples available in the Regu-lus Open Source Project.
Although only aquarter long course, students learn Computa-tional Linguistics and programming sufficientto build their own Spoken Dialogue System asa course project.1 IntroductionSpoken Dialogue Systems model end-to-end ex-ecution of conversation and consequently requireknowledge of many areas of computational linguis-tics, speech technology and linguistics.
The struc-ture of Spoken Dialogue Systems offers a ready-made structure for teaching a computational linguis-tics course.
One can work through the componentsand cover a broad range of material in a groundedand motivating way.
The course described in thispaper was designed for linguistics students, upper-division undergraduate and graduate, many havinglimited experience with programming or computerscience.
By the end of a quarter long course, stu-dents were able to build a working spoken dialoguesystems and had a good introductory level under-standing of the related computational linguistics top-ics.When this course was first being contemplated,it became apparent that there were a number ofsomewhat unusual properties that it should have,and a number of useful goals for it to accomplish.The Linguistics Department in which this course isgiven had only sporadic offerings of computationalcourses, due in part to having no faculty with a pri-mary focus in Computational Linguistics.
linguis-tics students are very interested in having courses inthis area, but even in the University as a whole avail-ability is limited.
A course on information extractionis offered in the Engineering School and while somelinguistics students are equipped to take that course,many do not have sufficient computer science back-ground or programming experience to make that aviable option.This course, in the Linguistics department,needed to be for linguistics students, who might nothave well-developed computer skills.
It needed tofit into a single quarter, be self-contained, dependonly on linguistics courses as prerequisites, and givestudents at least an overview of a number of areasof CL.
These students are also interested in con-nections with industry; now that there are industryjobs available for linguists, students are eager for in-ternships and jobs where they can apply the skillslearned in their linguistics courses.
Given this, itwas also important that the students learn to programduring the course, both to make engineering coursesmore accessible, and to attract potential employers.In addition, since the department was interestedin finding ways to expand computational linguisticsofferings, it clearly would be good if the course ap-pealed to the students, the department?s faculty andto higher levels of the University administration.802 Class DemographicsStudents in the course are a mix of graduates andupper-division undergraduates with a solid back-ground in syntax and semantics but are not expectedto have much in the way of programming experi-ence.
Familiarity with Windows, Unix and someminimal experience with shell scripting are recom-mended but not required.
Students have been verysuccessful in the course starting with no program-ming experience at all.
Because the Linguistics de-partment is especially strong in formal linguistics,and the courses typically require extensive problemsets, linguistics students have good aptitude for andexperience working with formal systems and this ap-titude and skill set seems to transfer quite readily toprogramming.3 Regulus Open Source PlatformThe Regulus Open Source Platform is a major re-source for the course.
Regulus is designed forcorpus-based derivation of efficient domain-specificspeech recognisers from general linguistically-motivated unification grammars.
The process ofcreating an application-specific Regulus recogniserstarts with a general unification grammar (UG), to-gether with a supplementary lexicon containing ex-tra domain-specific vocabulary.
An application-specific UG is then automatically derived using Ex-planation Based Learning (EBL) specialisation tech-niques (van Harmelen and Bundy, 1988).
Thiscorpus-based EBL method is parameterised by 1) asmall domain-specific training corpus, from whichthe system learns the vocabulary and types ofphrases that should be kept in the specialised gram-mar, and 2) a set of ?operationality criteria?, whichcontrol the specialised grammar?s generality.
Theapplication-specific UG is then compiled into aNuance-compatible CFG.
Processing up to this pointis all carried out using Open Source Regulus tools.Two Nuance utilities then transform the output CFGinto a recogniser.
One of these uses the training cor-pus a second time to convert the CFG into a PCFG;the second performs the PCFG-to-recogniser com-pilation step.
This platform has been used the basefor an number of applications including The ClarissaProcedure Browser (Clarissa, 2006) and MedSLT(Bouillon et al, 2005)The Regulus website (Regulus, 2008) makesavailable a number of resources, including compil-ers, an integrated development environment, a Reg-ulus resource grammar for English, online docu-mentation and a set of example dialogue and trans-lation systems.
These examples range from com-pletely basic to quite complex.
This material is alldescribed in detail in the Regulus book (Rayner etal., 2006), which documents the system and pro-vides a tutorial.
As noted in reviews of the book,(Roark, 2007) (Bos, 2008) it is very detailed.
Toquote Roark, ?the tutorial format is terrifically ex-plicit which will make this volume appropriate forundergraduate courses looking to provide studentswith hands-on exercises in building spoken dialogsystems.?
Not only does the Regulus-based dia-logue architecture supply an organizing principle forthe course but a large proportion of the homeworkcomes from the exercises in the book.
The exam-ples serve as starting points for the students projects,give good illustrations of the various dialogue com-ponents and are nice clean programming examples.The more research-oriented material in the Regulusbook also provides opportunities for discussion oftopics such as unification, feature grammars, ellip-sis processing, dialogue-state update, Chomsky hi-erarchy and compilers.
Reviewers of the book havenoted a potential problem: although Regulus itselfis open source it is currently dependent on two com-mercial pieces of software, SICStus Prolog and Nu-ance speech recognition platform (8.5).
Nuance 8.5is a speech recognition developer platform that iswidely used for build telephone call centers.
Thisdeveloper kit supplies the acoustic models whichmodel the sounds of the language, the user suppliesa language model which defines the range of lan-guage that will be recognized for a particular appli-cation.
This dependance on these commercial prod-ucts has turned out not to be a serious problem forus since we were able to get a research license fromNuance and purchase a site license for SICStus Pro-log.
However, beyond the fact that we were able toget licenses, we are not convinced that eliminatingthe commercial software would be an educationalwin.
While, for example, SWI Prolog might workas well in the course the commercial SISCtus Pro-log given a suitable port of Regulus, we think thathaving the students work with a widely used com-81mercial speech recognition product such as Nuance,is beneficial training for students looking for jobsor internships.
Using Nuance also avoids frustrationbecause its performance is dramatically better thanthe free alternatives.4 Other MaterialsThe course uses a variety of materials in addition tothe Regulus platform and book.
For historical andcurrent views of research in dialogue and speech,course sessions typically begin with an exampleproject or system, usually with a video or a runnableversion.
Examples of system web materialsthat we use include: (Resurrected)SHRDLU(http://www.semaphorecorp.com/misc/shrdlu.html), TRIPS and TRAINS(http://www.cs.rochester.edu/research/cisd/projects/trips/movies/TRIPS\ Overview/), Galaxy(http://groups.csail.mit.edu/sls//applications/jupiter.shtml), Vo-calJoyStick (http://ssli.ee.washington.edu/vj/), and ProjectListen (http://www.cs.cmu.edu/?listen/mm.html)andNASA?s Clarissa Procedure Browser (http://ti.arc.nasa.gov/projects/clarissa/gallery.php?ta\=\&gid\=\&pid\=).Jurasfsky and Martin (Jurafsky and Martin, 2000)is used as an additional text and various research pa-pers are given as reading in addition to the Regulusmaterial.
Jurafsky and Martin is also good sourcefor exercises.
The Jurafsky and Martin material andthe Regulus material are fairly complementary andfit together well in the context of this type of course.Various other exercises are used, including two stu-dent favorites: a classic ?construct your own ELIZA?task, and a exercise in reverse engineering a tele-phone call center, which is an original created forthis course.5 Programming languagesProlog is used as the primary language in the coursefor several reasons.
First, Prolog was built for pro-cessing language and consequently has a natural fitto language processing tasks.
Second, as a high-level language, Prolog allows students to stay on afairly conceptual level and does not require them tospend time learning how to handle low-level tasks.Prolog is good for rapid prototyping; a small amountof Prolog code can do a lot of work and in a onequarter class this is an important advantage.
Also,Prolog is very close to predicate logic, which the lin-guistics students already know from their semanticsclasses.
When the students look at Prolog and seesomething familiar, it builds confidence and helpsmake the task of learning to program seem lessdaunting.
The declarative nature of Prolog, whichoften frustrates computer science students who werewell trained in procedural programming, feels natu-ral for the linguists.
And finally, the Regulus OpenSource System is written mainly in Prolog, so usingProlog for the course makes the Regulus examplesmaximally accessible.Note that Regulus does support development ofJava dialogue processing components, and providesJava examples.
However, the Java based examplesare two to three times longer, more complicated andless transparent than their Prolog counterparts, forthe same functionality.
We believe that the Javabased materials would be very good for a more ad-vanced course on multimodal applications, wherethe advantages of Java would be evident, but in abeginning course for linguists, we find Prolog peda-gogically superior.A potential downside to using Prolog is that itis not a particularly mainstream programming lan-guage.
If the course was solely about technical train-ing for immediate employment, Java or C++ wouldprobably be better.
However, because most studentsenter the course with limited programming expe-rience, the most important programming outcomesfor the course are that they end up with evidencethat they can complete a non-trivial programmingproject, that they gain the experience of debuggingand structuring code and that they end up betterable to learn additional computer science subsequentto the course.
The alternative these students havefor learning programming is to take traditional pro-gramming courses, starting with an extremely basicintroduction to computers course and taking 1-2 ad-ditional quarter long courses to reach the level ofprogramming sophistication that they reach in onequarter in this course.
In addition, taking the alterna-tive route, they would learn no Computational Lin-guistics, and would likely find those courses much82less engaging.6 Course ContentFigure 6, depicts relationships between the dialoguesystem components and related topics both in Lin-guistics and in Computational Linguistics and/orComputer Science.
The course follows the flow ofthe Dialogue System processing through the variouscomponents, discussing topics related to each com-ponent.
The first two weeks of the course are usedas an overview.
Spoken Dialogue Systems are putin the context of Computational Linguistics, SpeechTechnology, NLP and current commercial and re-search state of the art.
General CL tools and tech-niques are introduced and a quick tour is made of thevarious dialogue system components.
In addition togiving the students background about the field, wewant them to be functioning at a basic level with thesoftware at the end of two weeks so that they can be-gin work on their projects.
Following the two weekintroduction, about two weeks are devoted to eachcomponent.The speech recognition discussion is focusedmainly on language modeling.
This is an area of par-ticular strength for Regulus and the grammar-basedmodeling is an easy place for linguists to start.
Cov-ering the details of speech recognition algorithms inaddition to the other material being covered wouldbe too much for a ten week course.
In addition, thedepartment has recently added a course on speechrecognition and text-to-speech, so this is an obvi-ous thing to omit from this course.
With the Nu-ance speech recognition platform, there is plenty forthe students to learn as users rather than as speechrecognition implementers.
In practice, it is not un-usual for a Spoken Dialogue System implementer touse a speech recognition platform rather than build-ing their own, so the students are getting a realisticexperience.For the Input Management, Regulus has imple-mented several types of semantic representations,from a simple linear list representation that can beused with the Alterf robust semantics tool, to onethat handles complex embedding.
So the Input Man-ager related component can explore the trade offs inprocessing and representation, using Regulus exam-ples.The Dialogue Managment section looks at simplefinite state dialogue management as well as the dia-logue state update approach that has typically beenused in Regulus based applications.
Many other top-ics are possible depending on the available time.The Output Management unit looks at various as-pects of generation, timing of actions and could alsodiscuss paraphrase generation or prosodic mark up.Other topics of a system wide nature such as N-best processing or help systems can be discussed atthe end of the course if time allows.7 Improvements for ?08The course is currently being taught for Spring quar-ter and a number of changes have been implementedto address what we felt were the weak points of thecourse as previously taught.
It was generally agreedthat the first version of the course was quite success-ful and had many of the desired properties.
Studentslearned Computational Linguistics and they learnedhow to program.
The demo session of the students?projects held at the end of the course was attended bymuch of the linguistics department, plus a few out-side visitors.
Attendees were impressed with howmuch the students had accomplished.
In building onthat success, we wanted to improve the following ar-eas: enrollment, limiting distractions from the spo-ken dialogue material, building software engineer-ing skills, making connections with industry and/orresearch, and visibility.The first time the course was given, enrollmentwas six students.
This level of enrollment was nodoubt in part related to the fact that the course wasannounced relatively late and students did not haveenough lead time to work it into their schedules.
Thesmall size was intimate, but it seemed as though itwould be better for more students to be able to ben-efit from the course.
For the current course, studentsknew a year and a half in advance that it would beoffered.
We also had an information session aboutthe course as part of an internship workshop, andapparently word of mouth was good.
With additionof a course assistant the maximum we felt we couldhandle without compromising the hands-on experi-ence was twenty.
Demand greatly exceeded supplyand we ended up with twenty two students initiallyenrolled.
As of the deadline for dropping without83Figure 1: Course Schematic: Architecture of Dialogue System with associated linguistic areas/topic at above andComputational Linguistics and/or Computer Science topics belowpenalty course enrollment is 16.
The course is cur-rently scheduled to be taught every other year but weare considering offering it in summer school in thenon-scheduled years.Two activities in the first incarnation of the coursewere time-consuming without contributing directlyto learning about CL and Dialogue Systems.
First,students spent considerable time getting the soft-ware, particularly the Nuance speech recognitionsoftware and the Nuance text-to-speech, installed ontheir personal machines.
The variability across theirmachines and fact we did not at that time have agood way to run the software on Machintoshes con-tributed to the problem.
This made the speech as-pects seem more daunting than they should have,and delayed some of the topics and exercises.For the current course, we arranged to have allof the software up and running for them on dayone, in an instructional lab on campus.
Mandatorylab sessions were scheduled for the course in theinstructional lab, starting on the first day of class,so that we could make sure that students were ableto run the software from the very beginning of thecourse.
These arrangements did not work out quiteas smoothly as we had hoped, but was still an im-provement over the first time the course was taught.Rather than being completely dependent on stu-dents?
personal machines, the labs, combined witha strategy we worked out for running the softwarefrom external USB drives, provide students with away to do their assignments even if they have un-suitable personal machines.
In the labs, students areable to see how the software should behave if prop-erly installed, and this is very helpful to them wheninstalling on their personal machines.
We refined theinstallation instructions considerably, which seemedto improve installation speed.
The Macintosh prob-lem has been solved, at least for Intel Macs, since we84have been successful in running the software withBootCamp.
The twice weekly lab sessions also givestudents a chance do installation and practical labexercises in an environment in which the course as-sistant is able see what they are doing, and give themassistance.
Observing and getting help from morecomputationally savy classmates is also common inthe labs.
Athough the measures taken to reduce thesoftware installation burden still leave some roomfor improvement, students were able to use Regulusand Nuance successfully, on average, in less thanhalf the time required the first time the course wastaught.The other distracting activity was building thebackend for the course projects.
Spoken DialogueSystems are usually an interface technology, but thestudents in the first offering of the course had tobuild their projects end to end.
While this was nota complete loss, since they did get useful program-ming experience, it seemed as though it would bean improvement if students could focus more on thespoken dialogue aspects.
The approach for doingthis in the current course is to recruit Project Part-ners from industry, government, academic researchprojects and other university courses.
Our studentsbuild the spoken dialogue system components andthen work with their Project Partner to connect tothe Project Partner?s system.
The students will thendemonstrate the project as a whole, that is, their di-alogue system working with the Project Partner?smaterial/system, at the course end demo sessions.We have project partners working in areas such as:robotics, telephone based services, automotive in-dustry, and virtual environments.
There are a num-ber of potential benefits to this approach.
Studentsare able to spend most of their time on the spokendialogue system and yet have something interest-ing to connect to.
In fact, they have access to sys-tems that are real research projects, and real com-mercial products that are beyond what our studentswould be capable of producing on their own.
Stu-dents gain the experience of doing a fairly realisticsoftware collaboration, in which they are the spo-ken dialogue experts.
Project partners are enthu-siastic because they get to try projects they mightnot have time or resources to do.
Industry partnersget to check out potential interns and research part-ners may find potential collaborators.
In the previ-ous version of the course, half of the students whofinished the course subsequently worked on SpokenDialogue oriented research projects connected withthe department.
One of the students had a successfulsummer internship with Ford Motors as a result ofhaving taken the course.
The research and industryconnection was already there, but the Project Partnerprogram strengthens it and expands the opportuni-ties beyond projects connected with the department.One enhancement to students?
software engineer-ing skills in the current version of the course is thatstudents are using version control from day one.Each student in the course is being provided witha Subversion repository with a Track ticket systemhosted by Freepository.com.
Part of the incentivefor doing this was to protect Project Partners?
IP, sothat materials provided by (particularly commercial)Project Partners would not be housed at the Univer-sity, and would only be accessible to relevant stu-dent(s), the Project Partner, the instructor and thecourse assistant.
The repositories also support re-mote collaboration making a wider range of orga-nizations workable as project partners.
With therepositories the students gain experience with ver-sion control and bug-tracking.
Having the versioncontrol and ticket system should also make the de-velopment of their projects easier.
Another way weare hoping to enhance the students software skills isthrough simply having more assistance available forstudents in this area.
We have added the previouslymentioned lab sections in the instructional labs, wehave arranged for the course assistant to have sub-stantial time available for tutoring, and we are post-ing tutorials as needed on the course website.The final area of improvement that we wanted toaddress is visibility.
This is a matter of some prac-tical importance for the course, the addition of CLto the department?s offerings, and the students.
Vis-ibility among students has improved with word ofmouth and with the strategically timed informationsession held the quarter prior to holding the course.The course end demo session in the first offering ofthe course did a good job of bringing it to the at-tention of the students and faculty in the Linguis-tics Department.
For the current course, the ProjectPartner program provides considerable visibility forstudents, the department, and the University, amongindustry, government and other Universities.
We are85also expanding the demo session at the end of thecourse.
This time the demo session will be held as aUniversity wide event, and will be held at the mainUC Santa Cruz campus and a second time at the Uni-versity?s satellite Silicon Valley Center, in order totap into different potential audiences.
The sessionat the Silicon Valley Center has potential for givingstudents good exposure to potential employers, andboth sessions have good potential for highlightingthe Linguistics department.8 Summary and ConclusionThe course presented in this paper has three key fea-tures.
First it is designed for linguistics students.This means having linguistics and not computer sci-ence as prerequisites and necessitates teaching stu-dents programming and computer science when theymay start with little or no background.
Second,the course takes the architecture of a Spoken Dia-logue System as the structure of the course, workingthrough the components and discussing CL topicsas they relate to the components.
The third feature isthe extensive use of the Regulus Open Source plat-form as key resource for the course.
Regulus ma-terial is used for exercises, as a base for construc-tion of students?
course projects, and for introducingtopics such as unification, feature grammars, Chom-sky hierarchy, and dialogue management.
We havefound this combination excellent for teaching CL tolinguistics students.
The grammar-based languagemodeling in Regulus, the use of Prolog and relat-ing linguistic topics as well as computational ones tothe various dialogue system components, gives lin-guistics students familiar material to build on.
Themedium vocabulary type of Spoken Dialogue sys-tem supported by the Regulus platform, makes avery motivating course project and students are ableto program by the end of the course.We discuss a number of innovations we have in-troduced in the latest version of the course, such asthe Project Partner program, use of instructional labsand subversion repositories, and expanded coursedemo session.
Since we are teaching the course forthe second time during Spring Quarter, we will beable to report on the outcome of these innovations atthe workshop.AcknowledgmentsWe would like to thank Nuance, for giving us theresearch licenses for Nuance 8.5 and Vocalizer thathelped make this course and this paper possible.ReferencesJohan Bos.
2008.
A review of putting linguistics intospeech recognition.
the regulus grammar compiler.Natural Language Engineering, 14(1).P.
Bouillon, M. Rayner, N. Chatzichrisafis, B.A.
Hockey,M.
Santaholma, M. Starlander, Y. Nakao, K. Kanzaki,and H. Isahara.
2005.
A generic multi-lingual opensource platform for limited-domain medical speechtranslation.
In In Proceedings of the 10th Conferenceof the European Association for Machine Translation(EAMT), Budapest, Hungary.Clarissa, 2006. http://www.ic.arc.nasa.gov/projects/clarissa/.As of 1 Jan 2006.D.
Jurafsky and J. H. Martin.
2000.
Speech andLanguage Processing: An Introduction to NaturalLanguage Processing, Computational Linguistics andSpeech Recognition.
Prentice Hall Inc, New Jersey.M.
Rayner, B.A.
Hockey, and P. Bouillon.
2006.
PuttingLinguistics into Speech Recognition: The RegulusGrammar Compiler.
CSLI Press, Chicago.Regulus, 2008. http://www.issco.unige.ch/projects/regulus/,http://sourceforge.net/projects/regulus/.
As of 1 Jan2008.Brian Roark.
2007.
A review of putting linguistics intospeech recognition: The regulus grammar compiler.Computational Linguistics, 33(2).T.
van Harmelen and A. Bundy.
1988.
Explanation-based generalization = partial evaluation (researchnote).
Artificial Intelligence, 36:401?412.86
