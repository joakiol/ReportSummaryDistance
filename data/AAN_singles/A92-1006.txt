Applied Text Generation*Owen RambowUn ivers i ty  of  Pennsy lvan iaDepar tment .o f  CISPh i lade lph ia ,  PA  19104rambow@l inc .
c i s .
upenn,  eduTanya  Kore lskyCoGenTex ,  Inc.105 Lenox  RoadI thaca ,  NY  14850tanya?cogent  ex.
com1 In t roduct ionThis paper presents the Joyce system as an example of afully-implemented, application-oriented text generationsystem.
Joyce covers the whole range of tasks associatedwith text generation, from content selection to morpho-logical processing.
It was developped as part of the in-terface of the software design environment Ulysses.
Thefollowing design goals were set for it:?
The generated text must be of sufficiently high qual-ity so that the user community of the underlyingapplication accepts it as part of the documentationof software designs.?
The generation must be fast enough so that the sys-tem can be used as a tool during the design process.?
The system must be adaptable to new needs as theyarise during further development of the underlyingsystem, and it must be portable to completely newapplications.While we were able to exploit existing research formany of the design issues, it turned out that we neededto develop our own approach to text planning (Rambow1990).This paper will present the system and attempt toshow how these design objectives led to particular designdecisions.
The structure of the paper is as follows.
InSection 2, we will present he underlying application andgive examples of the output of the System.
In Section3, we will discuss the overall structure of Joyce.
Wethen discuss the three main components in turn: the textplanner in Section 4, the sentence planner in Section 5and the realizer in Section 6.
We will discuss the textplanner in some detail since it represents a new approachto the problem.
Section 7 traces the generation of a shorttext.
In Section 8, we address the problem of portability,and wind up by discussing some shortcomings of Joycein the conclusion.
"Research on the original Joyce system (described in thispaper) was supported by the AFSC at Rome Laboratory un-der grant no.
F30602-85-C-0098 to Odyssey Research As-sociates.
A successor system to Joyce has been under de-velopment at CoGenTex since early 1991.
We would like tothank Richard Kittredge, Robert Rubinoff and two anony-mous reviewers for helpful comments on earlier versions ofthis paper.2 The  Joyce  System in the  U lyssesUser  In ter faceThe Joyce text generation system was developped a~part of the software design environment Ulysses (Ko-relsky and Ulysses Staff 1988; Rosenthal et al1988)Ulysses includes a graphical environment for the de.sign of secure, distributed software systems.
The useJmanipulates icons that symbolize components (boxes)data ports of components (circles) and data flow be-tween ports (arrows).
Additional information, principally about the security level of the components antports, is entered through menus.
The design proceed,hierarchically by top-down structural decomposition.As a tool in the user interface, Joyce generates twodifferent ypes of texts about software designs:?
It generates annotations of the design which are intended to serve as part of the system documentatiorduring and after the design process.
A short andlong version of these texts are available.
The lon~version can be several paragraphs long.
The text~usefully complement the graphical representation~since the graphical representation can show only omlevel in the structural decomposition, and since th,additional information that is available about eaclcomponent (in particular, security level) cannot b,displayed graphically.?
It is used to explain the result of the application oa heuristic security design tool, the "flow analyzer"The texts Joyce generates are specifically conceived cas written texts.
The text output is integrated into thgraphical environment in such a way that much of thsame interactive functionality is available ither throug\]the text output window or through the graphical interface window.
For example, if a designer eads the desig\]annotation generated by Joyce and notices that the security level of a component has been entered wrong, the1the error can be corrected by clicking at the name of thcomponent in the text window and accessing the apprcpriate menu.As an example of the output of Joyce, consider the texin Figure 2.
It is an annotation of the component "Host"The top level decomposition of this component is show\]in Figure 1.
The text annotates the software design b:describing its structure and interpreting it in terms c40Ulysses  Graph ics  In ter face  -- HOST!i TIP Net HandlerQq)Figure 1: The HOST Graphical Representationits security characteristics.
The text in Figure 4 is gen-erated by 3oyce in order to report the results of the flowanalyzer; the graphical representation of the underlyingsystem can be seen in Figure 3.
Note that the structuresof the two texts are quite different: while the Host textis structured according to more abstract categories uchas design structure and functionality, the Black Box textfollows the path of the insecure flow through the compo-nent.Joyce has been fully implemented in Common Lisp,and runs on the Symbolics Lisp Machine and on Sunworkstations.
A successor version has been ported tothe Apple Macintosh.HOST:  Genera l  S t ruc ture  and  Secur i ty  Fea-turesThe multilevel Host is a complex component of theStation.
It contains a Kernel, a TIP, a Process, aNet Handler and a group of Managers.
The Pro-cess, the TIP, the Managers and the Net Handlercommunicate only through the Kernel.
The man-ifestly secure Process and the Managers performauxiliary functions.
The Process is low-level.
TheTIP serves as interface to a User; the Net Handlerhandles communication with a Net.
The securitystatuses of the TIP, the Managers and the Net Han-dler have not yet been specified.The Kernel is a complex component.
Its secu-rity status has not yet been specified.
The Ker-nel contains a Message Switch, an Address Registerand a Locator.
The Address Register, the Locatorand the Message Switch communicate directly witheach other.
The low-level Address Register and themultilevel Locator are data-bases.
The MessageSwitch handles communication with the TIP, theProcess, the Managers and the Net Handler.
Thesecurity status of the Message Switch has not yetbeen specified,Figure 2: The HOST TextUlysses  Graphics  Interface -- BLACK BOX1tFigure 3: The BLACK BOX Graphical RepresentationBLACK BOX: INSECURE FLOWIn the Black Box an insecure flow occurs.
Classifiedinformation enters the Black Box through P6.
It ispassed through the Inputter to the Merger, whichmay upgrade it to top-secret.
The Merger passesit to the Analyzer, which has been assumed secure.The Analyzer downgrades it to secret.
It passesit through the Incrementor to the Formater, whichdowngrades it when a classified corrected readingleaves through P34.Figure 4: The BLACK BOX Text3 The  St ructure  o f  JoyceJoyce consists of three separate modules, which performdistinct tasks and access their own knowledge bases (Fig-ure 5).1.
The text planner accesses the domain representationand produces a list of propositions, which representsboth the content and the structure of the intendedtext.
Each proposition is expressed in a language-independent, conceptual frame-like formalism.
Itencodes a minimal amount of information, but canbe realized as an independent sentence if neces-sary.
The text planner draws on domain communi-cation knowledge expressed in a high-level schemalanguage (see Section 4).2.
The sentence planner takes the list of propositionsand determines how to express them in natural an-guage.
This task includes choosing lexicalizationsand a syntactic structure for each proposition, andassembling these lexico-syntactic structures, calledDeep Syntactic Representation or DSyntR, intolarger sentences.
It draws on knowledge capturedin the conceptual/English dictionary.3.
The linguistic realizer takes the syntactic structuresand produces urface sentences.
It draws on syntac-tic and morphological knowledge, expressed in theEnglish lexicon.Usually, the different tasks of text generation are di-vided among two modules (planning and realization),41: Eng l i sh  "Text'.. .............. , ,Tat  Planner.
.
.
.
.
.
.
.
.
.
.
.
.
.
i iConceptualRepresentation iSentence Plannes".
.
.
.
.
.
.
J .
.
.
.
.
.
.
iv~-sr .
, -~  !Representation iRealizer - jFigure 5: The Structure of Joycerather than three.
However, there is a certain amountof disagreement about where the line between the twois to be drawn.
For example, MeKeown's TEXT (McK-eown 1985) performs the tasks that Joyce classifies assentence planning as part of the realization process,whereas Meteer's SPOKESMAN (Meteer 1989) clas-sifies them as part of text planning.
(See (Meteer1990, p.23sq) for a useful summary of the terminolog-ical issues 1.)
In this paper, "text planning" will alwaysbe used in the narrow sense of "content selection andorganization".
The architecture of Joyce is directly in-fluenced by that of the SEMSYN system (RSsner 1987;RSsner 1988).
RSsner divides the realization componentinto two parts, the "generator kernel" and the "generatorfront end".
This distinction is mirrored exactly by thedistinction between sentence planning and realization inJoyce.There are two main advantages to such a tripartite ar-chitecture, one conceptual and the other practical.
Con-ceptually, the advantage is that linguistic planning tasksare clearly separated from the actual grammar, whichcomprises word order and morphological rules.
Theserules can be stated independently of the formulation ofpurely semantic rules that determine lexical and syn-tactic choices.
This modularity makes the system moremaintainable.
The linguistic planning tasks should, how-ever, be clearly separated from the textual planningtasks: while the linguistic planning tasks are language-dependent, he textual planning tasks appear not to be 2.1 Note that the tasks Meteer groups together as "Syntax"- choosing the syntactic structure and linearization - are in-separable only in certain syntactic representations.
In Joyce,the Deep-Syntactic Representation e codes yntactic struc-ture but not linear order (see Section 6 for details).2We are not aware of any example in which different extplans (as defined here) are needed for different languages.The fact that functionally similar texts may display differentstructures in different cultures hould not be confused withlanguage-specific constraints on text structure.Thus, if multi-lingual generation is desired, text planningand sentence planning ought to be performed by distinctcomponents.On a more practical evel, modularity in design andimplementation can be exploited by parallel process-ing of independent modules.
While the current im-plementations of Joyce do not allow for parallel exe-cution, the incremental processing of parallel comput-ing tasks on a serial machine is also advantageous, asis argued in the WIP project (Wahlster et al1991;Harbusch et al1991) 3.
Incrementality reduces the ini-tial response time of the system (though not the overallprocessing time).
This can be crucial if multi-paragraphtext is to be generated by an interface tool.
In the Joycesystem, the text planner cedes control to the sentenceplanner as soon as the text planner has defined a propo-sition.
Once the sentence planner has constructed theDSyntR of a complete sentence, it sends it to the re-alizer which generates the English sentence.
Thus, thefirst sentence is output by Joyce shortly after the textgenerator is invoked; text continues to be output approx-imately at reading speed.
The effect is that a user of thetext generator has the impression that he or she neverhas to wait for the system to respond, even when it isgenerating lengthy texts.Throughout he system, processing is message-drivenin the sense of (McDonald et al1987): control ies in theinput, which is used to construct he next level of repre-sentation.
There is no need for backtracking or feedbackfrom one level of processing to an earlier one.
As isargued by McDonald el al., such an architecture con-tributes to processing efficiency.We will now discuss the three modules of Joyce inmore detail.4 The  Text  P lannerPrior to the design of the text planning component ofJoyce, several existing approaches were studied.
Sincethe structure of the descriptive text (Figure 2) doesnot mirror the structure of the domain, Paris's "pro-cedural strategy" (Paris and McKeown 1987) cannot beused in general.
Hovy's RST-based planner (Hovy 1988)assumes that content selection has Mready been per-formed, contrary to the situation in the Ulysses applica-tion; furthermore, there are efficiency problems in a pureSTRIPS-like planning paradigm.
We therefore foundMcKeown's schema-based approach (McKeown 1985) tobe the most promising.
However, it turned out that gen-eral rhetorical schemas cannot adequately capture thestructure of the intended texts.
In (Kittredge t al 1991),we argue that planning certain types of texts - such as re-ports and descriptions - requires domain-specific knowl-edge about how to communicate in that domain.
Thatknowledge we call "domain communication knowledge"(DCK).
For example, in describing secure system designs3Incrementality within the realizer has little practicalbenefit when the realizer is reasonably fast; its study ismainly motivated by psycholinguistic considerations.
There-fore, there was no attempt in Joyce to make the realizerincremental.42you must relate the security level of each component,but not, say, the number of ports or their security levels.Furthermore, the connectivity of components should bestated before their functionality.
In the flow analyzertext, the security levels of the components need not becommunicated at all, but if a component (other than thefinal component of the path) downgrades information, itmust be stated whether and why the component is se-cure.
This very precise knowledge about which domaininformation eeds to communicated and in what ordercannot simply be derived from general principles.
Wehave also argued that in many existing text planningsystems, such DCK has been encoded implicitly.
In theinterest of efficiency, modularity and portability we havedecided to represent DCK explicitly in Joyce.We have developed a "schema language" for easy rep-resentation of DCK, called DICKENS (Domain Commu-nication Knowledge ENcoding Schemas).
The schemasare similar in form to those used by McKeown.
Basically,schemas can be seen as a description of text structure.The system, however, interprets each schema as a listof instructions.
The instructions can be calls to otherschemas, recursive calls to the same schema, or theycan be one of a set of special commands provided bythe schema language.
One special command produces aspecific proposition and sends it to the sentence planner.Other special commands upport conditional branchingand iteration.
During execution, each schema is associ-ated with a particular subset of the domain representa-tion, which is called the focus (in the sense of McKeown's"global focus").
In the Ulysses application, the focusalways corresponds to one component.
There are spe-cial commands to shift the focus.
In addition to the fo-cus, which limits the domain representation from whichinformation can be communicated, a theme can be setwhich determines information structure within individ-ual propositions.
The theme corresponds to McKeown's"local focus".
As has been widely recognized, thematicstructure affects issues such as grammatical voice at thelinguistic level.In addition, two further special commands were foundto be necessary in order to perform text planning:?
A portion of the text plan can be edited.
To do this,a schema is called, but any propositions that are cre-ated (by the schema or by any schema it calls) arenot sent to the sentence planner.
They are kept ona separate list in the order they are created.
Whenthe execution of the schema terminates, an editingfunction is applied to the list.
The editing functioncan delete propositions, change their order, changetheir contents or create new ones.
The choice of anediting function depends on the domain and on theparticular equirements of the text.
Further study isneeded in order to determine the types of editing op-erations that can be made and to devise a high-levellanguage to express them; the goal is to eventuallyestablish a library of editing operations.
Typicalediting operations we have used include juxtapos-ing similar propositions or juxtaposing propositionswith certain similar slots (typically, the agent slot).An example is given in Section 7.This type of revision is different from the revisiondiscussed in (Gabriel 1988) and (Meteer 1991).
Inthese systems, the linguistic specification of the tar-get texts is revised.
In Joyce, it is the text planitself, i.e.
the pre-linguistic representation of textcontent and structure, that is subject to revision.?
Schemas can post to a "blackboard", and check thisblackboard for messages.
This allows for additionalcontrol and communication between schemas whichare called at different imes during the text planningprocess and cannot communicate with each otherdirectly.Instead of being templates that limit the structure ofthe text to certain preconceived types, the schemas arenow an explicit and compact representation of domaincommunication knowledge.5 The  Sentence  P lannerThe sentence planner combines all those planning tasksthat are specific to the target language.
It receivespropositions from the text planner and sends theDSyntR of complete sentences to the realizer for pro-cessing.
It has two main tasks: first, it chooses lexi-cal and syntactic realizations by consulting the Concep-tual/English dictionary; second, it determines sentencescope by merging the DSyntR of individual propositions.We will discuss each of these steps in turn.The Conceptual/English dictionary is implemented asa set of procedures that operate on the propositions.Each proposition is mapped into the DSyntR of a clause(i.e., its root is a verb).
Lexicalization can take prag-matic factors into account.
It can also refer to a historyof lexicalizations if lexical variation is desired.
After aDSyntR has been constructed, certain syntactic para-phrase operations are performed if necessary, for exam-ple passivization if a grammatical object is the theme ofthe sentence, or if the subject is absent.The second task of the sentence planner is to deter-mine the scope of sentences.
Combining the linguisticrealization of propositions into larger sentences i a cru-cial issue because it increases the quality of the gener-ated text.
For example, The low-level Address Registerand the multilevel Locator are data-bases (from the Hosttext in Figure 2) is significantly better than the fourclauses from which it was formed: The Address Reg-ister is a data-base.
It is low-level.
The Locator is adata-base.
It is multilevel.
An informal study in whichsubjects were asked to revise a (grammatical) text con-taining only single-proposition sentences supported theclaim that longer sentences are preferred over shorterones whenever possible and reasonable.The first question that arises is at what level proposi-tions should be combined.
To date, the issue of sentencescoping has always been dealt with at a pre-linguistic,conceptual level (e.g.
(Dale 1988) or (Carcagno andIordanskaja 1989)).
However, different languages havedifferent syntactic means of combining clauses; clausecombining must refer to the specific linguistic resourcesof the target language.
Therefore, in Joyce the task isperformed by the sentence planner rather than the text43planner 4.
Joyce performs the following syntactic lause-combining operations: Relative clause formation, adjec-tival attachment ( he process by which an adjective froma copula-construction is embedded in an NP), and con-junction.
Conjunction includes multiple conjunctions ofmore than one clause, and may lead to elision of repeatedsentence lements ("conjunction reduction").
For exam-ple, in the example quoted above, the lexeme data baseoccurs only once in the conjoined sentence.The second question that arises is how clause combi-nation should be restricted.
We have identified stylisticand discourse constraints.
The stylistic constraints areconstraints against the sentence becoming too long (anupper bound on the number of clauses that can be com-bined into one sentence), and a constraint on recursiveembedding of relative clauses.
Discourse constraints areimposed by the structure of the text: clauses belongingto conceptually distinct text units should not be com-bined.
The text planner can send a special message,called conceptua l -break ,  to the sentence planner.
Itsignals the beginning of a new textual unit.
These spe-cial messages are triggered by appropriate indications inthe DICKENS specifcation of the DCK.The algorithm is as follows.
The sentence plannermaintains a "current" DSyntR.
Each incoming propo-sition is translated into a DSyntR, which the sen-tence planner then attempts to merge with the currentDSyntR.
If none of the clause combination strategieswork, or if stylistic heuristics interfere, or if the incomingproposition is a conceptua l -break ,  the current DSyntRis sent to the realizer and the new DSyntR becomes thecurrent one.
The process of clause combination can bevery easily modeled at the DSyntR level: relative clauseformation and conjunction reduce to simple tree compo-sition operations.
(In the case of adjectival attachmentonly the adjective node is attached.)
Issues such as wordorder in relative clauses, the morphological form of thecomplementizer, and conjunction reduction can be dealtwith at further stages of processing.6 The Linguistic RealizerThe linguistic component is based on Meaning-Text The-ory (MTT) (Mel'~uk 1988), and is a reimplementa-tion (in Lisp) of Polgu~re's Prolog implementation of aMeaning-Text model for English (Iordanskaja et al1988;Iordanskaja et al1991).MTT defines three successive levels of representation.With each level of representation is associated a compo-nent which transforms the representation i to the nexthigher level.
Each component is implemented as a sepa-rate module in Joyce.?
The Deep-Syntactic Representation (DSyntR) is adependency grammar tree representing the syn-tactic relationships between the meaning-bearing4In Section 7, we discuss an example in which two propo-sitions are merged by the text planner.
The crucial point isthat in that example, the two propositions are merged into asingle proposition.
Here, we are discussing cases in which twodistinct propositions are linguistically realized in the samesentence.~ sc~t  progressiveMerger information Analyzerdefinite indefinite definiteFigure 6: DSyntR of sentence The Merger is passinginformation to the Analyzerwords of a sentence.
Sister nodes are unordered withrespect o each other.
The nodes are labelled withlexemes which are annotated with features.
Numer-ical arc labels represent the syntactic arguments ofthe governing lexeme, while ATTR represents he at-tributive relation.
An example is shown in Figure 6.Note that the function words the, is, to are not yetrepresented.?
The Surface-Syntactic Representation (SSyntR) isalso a dependency grammar epresentation, but itincludes all lexemes of the final sentence.
The tran-sition between DSyntR and SSyntR is achieved bylooking up function words in the English lexicon.and by expanding rammatical features uch as verbtenses.?
The Deep Morphological Representation (DMor-phR) is a linearization of the nodes of the SSyntR.?
The Surface Morphological Representation is in fac!the written form of the English sentence.
Morpho-logical processing is done by a component closel~based on SUTRA-S (Emele and Momma 1985).While linguistic realizers based on other theories coulchave been used, this MTT-based approach offers the fol-lowing advantages:?
The approach is based on an independently moti.vated linguistic theory.
Much linguistic work ha.,already been done in the MTT framework (for ex.ample (Mel'6uk and Pertsov 1987)).?
The modularization of different ypes of linguisti~knowledge makes the grammar easier to maintainParallelism in computation could be exploited.?
The dependency grammar used to express the tw(syntactic levels of representation permits the separation of the semantically relevant issue of grammatical relations (e.g., subjecthood) from pragmaticall\]relevant issues of surface word order (e.g., topicalization).7 An  ExampleAs an example, consider the sample text in Figure 4.
Idescribes the occurrence of an insecure flow in component Black Box.
The texts that explain insecure flow;are generated by a set of eight schemas, one of which ishown in Figure 7.
It is the first that is invoked.Special commands are preceded by a colon; commandnot starting with a colon are calls to other schemas44(defschema flow-analysis-error:title "Insecure flow": theme "information":make-proposition (insecure-flow :location focus):make-proposition (enter :agent (get-infornation):object focus:location (entry-port focus)):make-proposition (id-security :agent (get-information):value (get-level (entry-port focus)))conceptual-break:shift-focus-and-edit (next-component initial-follow-path #'merge-send-data))Figure 7: The FLOW ANALYZER schemaThe arguments to special commands immediately fol-low the command.
The : t i t le  special command gen-erates a title.
Command :theme sets the initial themeof the paragraph, influencing issues such as passiviza-tion.
Then follow three :make-propos i t ion  commands,which each produce one proposition.
The first argu-ment to :make-propos i t ion  is the class of the propo-sition.
The slots are typically filled with pointers intothe domain representation of the application program.focus is a pointer maintained by the text planner whichrefers to the global focus (currently the component BlackBox, represented by pointer #<COMPONENT Black Box>),while get - in fo rmat ion  and ent ry -por t  are functionsprovided by the underlying application program.
Not allarguments must be filled by a :make-propos i t ion  com-mand; the sentence planner will choose lexical and syn-tactic realizations accordingly.
The text planner sendsan insecure - f low proposition to the sentence planner,which translates it into a DSyntR tree (which repre-sents the clause In the Black Box an insecure flow oc-curs) and returns control to the text planner.
The textplanner then proceeds to the next :make-propos i t ioncommand, and sends the proposition shown in Figure 8to the sentence planner.
When the sentence planner e-ENTERAGENT #<information>OBJECT #<COMPONENT Black Box>LOCATION #<PORT P9>Figure 8: The ENTER propositionceives the enter  proposition, it translates it into theDSyntR tree shown in Figure 9, which could be ex-pressed as the clause information enters the Black Boxthrough P6.
Note that the choice of enter as verb is dueto the fact that information is currently the theme; ifBlack Box were the theme, the choice would have beenreceives.
The sentence planner then tries to combinethe new DSyntR with the current one (which was de-rived from the previous proposition).
This fails (sincethe two clauses have different verbs and different ac-tants), so the current DSyntR is sent to the realizer,which prints out the first sentence.
The new DSyntRBlack Box information throughdefinite indefinite prep \[ 2YP6Figure 9: DSyntR of sentence information enters theBlack Box through P6becomes the current one.
Control is returned to the textplanner, which processes the third :make-propos i t ioncommand and sends the appropriate proposition to thesentence planner.
The sentence planner generates theclausal DSyntR tree shown in Figure 10 (the informa-tion is classified).
It then attempts to combine the newinformation classifieddef'mite adjectiveFigure 10: DSyntR of sentence The information is clas-sifiedclause with the "current DSyntR", first using the adjec-tival attachment strategy.
This succeeds, yielding thetree shown in Figure 11.
It then returns control to thetext planner, since another clause could be merged withthe current DSyntR.
The text planner then calls schemaconceptual-break.
The only effect of this schema is tosend a conceptua l -b reak  message to the sentence plan-ner, which thereupon sends its current DSyntR to the re-alizer.
The realizer prints out the surface sentence Clas-sified information enters the Black Box through P6.The last command of the schema first shifts the(global) focus to next-component,  which is the nextcomponent raversed by the insecure flow.
The sec-ond argument of the : shift-focus-and-edit commanddesignates the next schema to be called.
This corn-45Black Box Information throughdel'mite indefinite prepclassified P6adjectiveFigure 11: DSyntR of sentence Classified informationenters the Black Box through P6mand also initiates the editing process.
All proposi-tions that are generated as a result of this commandare kept on a list rather than sent to the sentence plan-ner.
When the command has been executed, the listis edited by the function given as the third argument,# 'merge-send-data .
The effect of this function is tocombine two successive send propositions into a single,new one, so that two clauses uch as the Analyzer sendsthe information to the Incrementor and the Incrementorsends the information to the Formater yield the Ana-lyzer sends the information to the Formater through theIncrementor.
Note that this combination is not a lin-guistic one but a conceptual one, since it relies on factsabout sending data in this domain, rather than on thesyntax or lexical semantics about the verb send.
It musttherefore be performed by the text planner, and not thesentence planner.8 Por t ing  the  SystemPorting is an important way to evaluate complete appliedtext generation systems, since there is no canonical setof tasks that such a system must be able to perform andon which it can be tested.
(Realization components, onthe other hand, can be tested for their syntactic andperhaps lexical coverage.)
Joyce was originally designedto generate only component descriptions (as in Figure 2).The "flow analyzer" heuristic tool was added later tothe system, and the completely different ype of text itrequired was a first successful test of Joyce and its textplanner in particular.The modular design of Joyce proved beneficial dur-ing the porting to the new application.
The followingconceptually well-defined tasks were required during thedevelopment of the "flow analyzer" application:1.
Since the flow analyzer is a new type of tool, nocorpus of texts was available for study.
Instead,sample texts were written by hand and critiqued bydomain experts.
The texts were then revised andresubmitted to the experts.
The "ideal text" thatemerged was then analyzed and the DCK neededto generate it expressed in terms of schemas.
Weinterpret he cycle of writing, critiquing and revisingas a process of DCK acquisition.2.
New classes of proposition were defined.
These in-clude enter ,  upgrade and downgrade.
Some of theproposition classes from the earlier descriptive ap-plication could be reused, such as send.3.
The Conceptual/English dictionary was extended toaccount for the new proposition classes.4.
Several new lexical items were entered into theEnglish lexicon.
For example, the English lex-eme downgrade subcategorizes for two nouns anda propositional phrase obligatorily headed by to.Note that those parts of Joyce that deal with facts ofEnglish (including clause combination) needed no atten-tion (other than updating the lexicon).We are currently working on porting a successor ofJoyce to several new applications, including the genera-tion of project management reports.
Initial results, in-cluding a prototype, are encouraging.9 Conc lus ionWe are aware of several shortcomings of Joyce, which wewill address in future versions of the system.?
While we have argued in (Kittredge et al1991)that rhetoric cannot be the central guiding princi-ple in text planning, it appears to play an impor-tant role as a constraint on possible text structures.Furthermore, it helps determine the use of connec-tives between rhetorically related clauses.
Finally,it may determine when conceptual breaks occur intext structure which affect sentence scoping (Scottand de Souza 1990).
We are currently investigatingthe option of augmenting the DCK schemas withrhetorical annotations.?
The current form of the Conceptual/English dictio-nary is not satisfactory, since the dictionary writer istoo free in writing dictionary entries.
For example,the dictionary could be used as a back door for theintroduction of new content which the text plannerwas (for whatever easons) unable to plan.
Meteerdiscusses the same problem in McKeown's originalTEXT system (Meteer 1990, p.35).
An interface tothe dictionary that is more restrictive is needed.?
While it is possible to set a theme in the textplan, thematic structure has not received suffi-cient attention.
Rules of thematic progression (asimplemented, for instance, in McKeown's TEXT)are not taken into consideration.
Furthermore.clause combination is also sensitive to thematicstructure (Kuno 1976; Derr and McKeown 1986:Iordanskaja 1989), which is currently not taken intcaccount.Despite these shortcomings, Joyce has proven to besuccessful and useful tool in the Ulysses user interface.
I!has met the design objectives of speed and quality, andour experience in porting the text generator to new task.,and to new applications indicates that Joyce is a flexiblesystem that can adapt to a variety of text generatiortasks.46Bib l iographyCarcagno, Denis and Iordanskaja, Lidija, 1989.
Con-tent Determination and Text Structuring in Gossip.In Proceedings of the Second European Workshop onText Generation.
Edinburgh.Dale, Robert, 1988.
Generating Referring Expressionsin a Domain of Objects and Processes.
PhD thesis,University of Edinburgh.Derr, Marcia A. and McKeown, Kathleen R., 1986.
Us-ing Focus to Generate Complex and Simple Sentences.In 24 th Meeting of the Association for ComputationalLinguistics (ACL'86), ACL, pages 319-326.Emele, Martin and Momma, Stefan, 1985.
SUTRA-S: Erweiternngen eines Generator-Front-End fiir dasSEMSYN-Projekt.
Technical Report, Universit~tStuttgart.Gabriel, Richard P., 1988.
Deliberate Writing.
In Mc-Donald, David D. and Bolc, Leonard (editors), NaturalLanguage Generation Systems, pages 1-46.
SpringerVerlag.Harbusch, Karin; Finkler, Wolfgang; and Schauder,Anne, 1991.
Incremental Syntax Generation withTree Adjoining Grammars.
In Proceedings 4.Int.
GI-Kongress Wissensbasiertc Systeme, GWAI.
Miinchen.Hovy, Eduard H., 1988.
Planning coherent multisenten-tim text.
In Proceedings of the 26th Annual Meeting,ACL, pages 163-169.
Buffalo.Iordanskaja, Lidija, 1989.
Communicative Structureand Its Use During Text Generation.
Technical Re-port TR 15-10, Odyssey Research Associates, Ithaca,NY/Montr~al, PQ.Iordanskaja, Lidija; Kittredge, Richard; and Polgu~re,Alain, 1988.
Implementing the Meaning-Text Modelfor Language Generation.
Paper presented atCOLING-88.Iordanskaja, Lidija; Kittredge, Richard; and Polgu~re,Alain, 1991.
Lexical Selection and Paraphrase in aMeaning-Text Generation Model.
In Paris, Cecile;Swartout, William; and Mann, William (editors), Nat-ural Language Generation in Artifical Intelligence andComputational Linguistics, pages 293-312.
KluwerAcademic Publishers.Kittredge, Richard; Korelsky, Tanya; and Rambow,Owen, 1991.
On the Need for Domain Communica-tion Knowledge.
Computational Intelligence 7(4).Kuno, S., 1976.
Subject, theme and the speaker's empa-thy - a reexamination f relativization phenomena.
InLi, Charles N. (editor), Subject and Topic, pages 417-444.
Academic Press.McDonald, David D.; Meteer (Vaughan), Marie W.; andPustejovsky, James D., 1987.
Factors contributing toefficiency in Natural Language Generation.
In Kern-pen, Gerard (editor), Natural Language Generation,pages 159-181.
Martinus Nijhoff Publishers.McKeown, Kathleen, 1985.
Text Generation.
Cam-bridge University Press, Cambridge.Mel'Suk, Igor A., 1988.
Dependency Syntax: Theory andPractice.
State University of New York Press, NewYork.Mel'Suk, Igor A. and Pertsov, Nikolaj V., 1987.
Sur-face Syntax of English.
John Benjamins, Amster-dam/Philadelphia.Meteer, Marie W., 1989.
The SPOKESMAN NaturalLanguage Generation System.
Technical Report, BBNSystems and Technologies Corporation.Meteer, Marie W., 1990.
The 'Generation Gap': TheProblem of Expressibility in Text Planning.
TechnicalReport 7347, BBN Systems and Technologies Corpo-ration.Meteer, Marie W., 1991.
The Implication of Revisionsfor Natural Language Generation.
In Paris, Cecile;Swartout, William; and Mann, William (editors), Nat-ural Language Generation in Artificai Intelligence andComputational Linguistics, pages 155-177.
KluwerAcademic Publishers.Paris, Cecile L. and McKeown, Kathleen R., 1987.
Dis-course Strategies for Describing Complex Physical Ob-jects.
In Kempen, Gerard (editor), Natural LanguageGeneration, pages 97-115.
Martinus Nijhoff Publish-ers.Rambow, Owen, 1990.
Domain Communication Knowl-edge.
In Proceedings of the Fifth International Work-shop on Natural Language Generation.
Dawson, PA.RSsner, Dietmar, 1987.
The Automated News AgencySEMTEX - a Text Generator for German.
In Kem-pen, G. (editor), Natural Language Generation: NewResults in Artificial Intelligence, Psychology and Lin-guistics, pages 138-148.
Kluwer Academic Publishers,Boston.RSsner, Dietmar, 1988.
The SEMSYN Generation Sys-tem: Ingredients, Applications, Prospects.
In Pro-ceedings of the Second Conference on Applied NaturalLanguage Processing, ACL.
Austin.Scott, Donia R. and de Souza, Clarisse Sieckenius, 1990.Getting the message across in RST-based Text Gen-eration.
In Dale, Robert; Mellish, Chris; and Zock,Michael (editors), Current Research in Natural Lan-gugae Generation.
Academic Press, London.Wahlster, Wolfgang; Andre, Elisabeth; Graf, Winfried;and Rist, Thomas, 1991.
WIP: The Coordinated Gen-eration of Multimodal Presentations from a CommonRepresentation.
I  Proceedings of the 5th Conferenceof the European Chapter, ACL.
Berlin.47
