Cascaded Regular Grammars over XML DocumentsKiril Simov, Milen Kouylekov, Alexander SimovCLaRK Programme & BulTreeBank Projecthttp://www.BulTreeBank.orgLinguistic Modelling Laboratory - CLPPI, Bulgarian Academy of SciencesAcad.
G.Bonchev Str.
25A, 1113 Soa, BulgariaTel: (+3592) 979 28 25, (+3592) 979 38 12, Fax: (+3592) 70 72 73kivs@bultreebank.org, mkouylekov@dir.bg, adis 78@dir.bgAbstractThe basic mechanism of CLaRK for linguistic pro-cessing of text corpora is the cascade regular gram-mar processor.
The main challenge to the grammarsin question is how to apply them on XML encodingof the linguistic information.
The system oers a so-lution using an XPath language for constructing theinput word to the grammar and an XML encodingof the categories of the recognized words.1 IntroductionThis paper describes a mechanism for denition andapplication of cascaded regular grammars over XMLdocuments.
The main problems are how to denethe input words for a grammar and how to incorpo-rate back in the document the grammar categoriesreturned by the rules of the grammar.
The presentedsolutions are implemented within the CLaRK Sys-tem { an XML-based System for Corpora Develop-ment (Simov et.
al., 2001).The main goal behind the design of the systemis the minimization of human intervention duringthe creation of corpora.
Creation of corpora is stillan important task for the majority of languages likeBulgarian, where the invested eort in such devel-opment is very modest in comparison with moreintensively studied languages like English, Germanand French.
We consider the corpora creation taskas editing, manipulation, searching and transform-ing of documents.
Some of these tasks will be donefor a single document or a set of documents, otherswill be done on a part of a document.
Besides e?-ciency of the corresponding processing in each stateof the work, the most important investment is thehuman labor.
Thus, in our view, the design of thesystem has to be directed to minimization of the hu-man work.
For document management, storing andThis work is funded by the Volkswagen Stiftung, FederalRepublic of Germany under the Programme \Cooperationwith Natural and Engineering Scientists in Central and East-ern Europe" contract I/76 887.
The authors are grateful toTylman Ule from SfS, University of Tubingen, Germany andthe three anonymous reviewers for their comments on the ear-lier drafts of the paper.
Needless to say, all remaining errorsin the text are ours.querying we have chosen the XML technology be-cause of its popularity and its ease for understand-ing.
The XML technology becomes a part of ourlives and a predominant language for data descrip-tion and exchange on the Internet.
Moreover, a lotof already developed standards for corpus descrip-tions like (XCES, 2001) and (TEI, 2001) are alreadyadapted to the XML requirements.
The core of theCLaRK System is an XML Editor which is the maininterface to the system.
With the help of the editorthe user can create, edit or browse XML documents.To facilitate the corpus management, we enlarge theXML inventory with facilities that support linguisticwork.
We added the following basic language pro-cessing modules: a tokenizer with a module that sup-ports a hierarchy of token types, a nite-state enginethat supports the writing of cascaded regular gram-mars and facilities for regular pattern search, theXPath query language which is able to support nav-igation over the whole set of mark-up of a document,mechanisms for imposing constraints over XML doc-uments which are applicable in the context of someevents.
We envisage several usages of our system:1.
Corpora markup.
Here users work with theXML tools of the system in order to mark-up texts with respect to an XML DTD.
Thistask usually requires an enormous human ef-fort and comprises both the mark-up itself andits validation afterwards.
Using the availablegrammar resources such as morphological ana-lyzers or partial parsing, the system can statelocal constraints reecting the characteristics ofa particular kind of texts or mark-up.
One ex-ample of such constraints can be as follows: aPP according to a DTD can have as parent anNP or VP, but if the left sister is a VP then theonly possible parent is VP.
The system can usesuch kind of constraints in order to support theuser and minimize his/her work.2.
Dictionary compilation for human users.
Thesystem supports the creation of the actual lexi-cal entries whose structure is dened via a DTD.The XML tools will be used also for corpus in-vestigation that provides appropriate examplesof the word usage in the available corpora.
Theconstraints incorporated in the system are usedfor writing a grammar of the sub-languages ofthe denitions of the lexical items, for imposingconstraints over elements of lexical entries andthe dictionary as a whole.3.
Corpora investigation.
The CLaRK System of-fers a set of tools for searching over tokens andmark-up in XML corpora, including cascadedgrammars, XPath language.
The combinationsbetween these tools are used for tasks such as:extraction of elements from a corpus - for exam-ple, extraction of all NPs in the corpus; concor-dance - for example, give me all NPs in contexts,ordered by a user's dened set of criteria.The structure of the paper is as follows: in thenext section we give a short introduction to themain technologies on which the CLaRK System isbuilt.
These are: XML technology; Cascaded regu-lar grammars; Unicode-based tokenizers; and Con-straints over XML documents.
The third sectiondescribes the denition of cascaded regular gram-mars.
The fourth section presents an approach forapplying cascaded regular grammars over XML doc-uments.
The last section concludes the paper.2 The technologies behind theCLaRK SystemCLaRK is an XML-based software system for cor-pora development implemented in JAVA.
It incor-porates several technologies: XML technology; Unicode; Regular Grammars (they are presented in thenext sections); Constraints over XML Documents.2.1 XML TechnologyThe XML technology is at the heart of the CLaRKsystem.
It is implemented as a set of utilities forstructuring, manipulation and management of data.We have chosen the XML technology because of itspopularity, its ease of understanding and its alreadywide use in description of linguistic information.
Be-sides the XML language (see (XML, 2000)) proces-sor itself, we have implemented an XPath language(see (XPath, 1999)) engine for navigation in docu-ments and an XSLT language (see (XSLT, 1999))engine for transformation of XML documents.
Thedocuments in the system are represented as DOMLevel1 trees (see (DOM, 1998)).
We started with ba-sic facilities for creation, editing, storing and query-ing of XML documents and developed further thisinventory towards a powerful system for processingnot only single XML documents but an integratedset of documents and constraints over them.
Themain goal of this development is to allow the user toadd the desirable semantics to the XML documents.In the implementation of cascaded regular gram-mars within the CLaRK System, a crucial role playsthe XPath language.
XPath is a powerful languagefor selecting elements from an XML document.
TheXPath engine considers each XML document as atree where the nodes of the tree represent the ele-ments of the document, the document's most outertag is the root of the tree and the children of anode represent the content of the corresponding el-ement.
The content nodes can be element nodes ortext nodes.
Attributes and their values of each ele-ment are represented additionally to the tree.The XPath language uses the tree-based termi-nology to point to some direction within the tree.One of the basic notions of the XPath language isthe so called context node, i.e.
a chosen node in thetree.
Each expression in the XPath language is eval-uated with respect to some context node.
The nodesin the tree are categorized with respect to the con-text node as follows: the nodes immediately underthe context node are called children of the contextnode; all nodes under the context node are calleddescendant nodes of the context node; the node im-mediately above the context node is called parent ofthe context node; all nodes that are above the con-text node are called ancestor nodes of the contextnode; the nodes that have the same parent as thecontext node are called sibling nodes of the contextnode; siblings of the context node are divided intotwo types: preceding siblings and following siblings,depending on their order with respect to the contextnode in the content of their parent - if the sibling isbefore the context node, then it is a preceding sib-ling, otherwise it is a following sibling.
Attributenodes are added with the context node as attributenodes and they are not children, descendant, parentor ancestor nodes of the context node.
The contextnode with respect to itself is called self node.2.2 TokenizationXML considers the content of each text element awhole string that is usually unacceptable for cor-pus processing.
For this reason it is required for thewordforms, punctuation and other tokens in the textto be distinguished.
In order to solve this problem,the CLaRK system supports a user-dened hierar-chy of tokenizers.
At the very basic level the user candene a tokenizer in terms of a set of token types.In this basic tokenizer each token type is dened bya set of UNICODE symbols.
Above this basic leveltokenizers the user can dene other tokenizers forwhich the token types are dened as regular expres-sions over the tokens of some other tokenizer, the socalled parent tokenizer.
For each tokenizer an alpha-betical order over the token types is dened.
Thisorder is used for operations like the comparison be-tween two tokens, sorting and similar.2.3 Constraints on XML documentsSeveral mechanisms for imposing constraints overXML documents are available.
The constraints can-not be stated by the standard XML technology(even by the means of XML Schema (XML Schema,2000)).
The following types of constraints are imple-mented in CLaRK: 1) nite-state constraints - addi-tional constraints over the content of given elementsbased on a document context; 2) number restrictionconstraints - cardinality constraints over the contentof a document; 3) value constraints - restriction ofthe possible content or parent of an element in adocument based on a context.
The constraints areused in two modes: checking the validity of a docu-ment regarding a set of constraints; supporting thelinguist in his/her work during the process of cor-pus building.
The rst mode allows the creation ofconstraints for the validation of a corpus accordingto given requirements.
The second mode helps theunderlying strategy of minimization of the humanlabor.The general syntax of the constraints in theCLaRK system is the following:(Selector, Condition, Event, Action)where the selector denes to which node(s) in thedocument the constraint is applicable; the conditiondenes the state of the document at the time whenthe constraint is applied.
The condition is stated asan XPath expression which is evaluated with respectto each node selected by the selector.
If the evalu-ation of the condition is a non-empty list of nodesthen the constraints are applied; the event denessome conditions of the system when this constraintis checked for application.
Such events can be: theselection of a menu item, the pressing of key short-cut, some editing command as enter a child or aparent and similar; the action denes the way of theactual application of the constraint.Here we present constraints of type "Some Chil-dren".
This kind of constraints deal with the contentof some elements.
They determine the existence ofcertain values within the content of these elements.A value can be a token or an XML mark-up and theactual value for an element can be determined bythe context.
Thus a constraint of this kind works inthe following way: rst it determines to which ele-ments in the document it is applicable, then for eachsuch element in turn it determines which values areallowed and checks whether in the content of the el-ement some of these values are presented as a tokenor an XML mark-up.
If there is such a value, thenthe constraint chooses the next element.
If there isno such a value, then the constraint oers to theuser a possibility to choose one of the allowed valuesfor this element and the selected value is added tothe content as a rst child.
Additionally, there is amechanism for ltering of the appropriate values onthe basis of the context of the element.3 Cascaded Regular GrammarsThe CLaRK System is equipped with a nite-stateengine which is used for several tasks in the systemsuch as validity check for XML documents, tokeniz-ers, search and cascaded regular grammar.
In thisand the next section we present the use of this en-gine for cascaded regular grammars over XML doc-uments along the lines described in (Abney, 1996).The general idea underlying cascaded regular gram-mars is that there is a set of regular grammars.
Thegrammars in the set are in particular order.
The in-put of a given grammar in the set is either the inputstring if the grammar is rst in the order or the out-put string of the previous grammar.
Another specicfeature of the cascaded grammars is that each gram-mar tries to recognize only a particular category inthe string but not the whole string.
The parts ofthe input word that are not recognized by the gram-mar are copied to the output word.
Before goinginto detail of how to apply grammars in the CLaRKSystem some basic notions about regular expressionsare given.Regular grammars standardly are formalized as aset of rewriting rules of the following kindsA -> b CA -> BA -> bwhere A, B, C stand for non-terminal symbols andb stands for terminal symbols.
Such grammars areapplied over a word of terminal symbols in order toparse it to a special goal symbol S. Each languageaccepted by such a grammar is called regular.
Usingsuch a formalization one could situated the regularlanguages within the families of other languages likecontext free languages, context sensitive languagesand so on.
In practice this formalization is rarelyused.
Other formal devices for dealing with regularlanguages are regular expressions and nite-state au-tomata with the well know correspondence betweenthem.
Although regular grammars are not expres-sive enough in order to be a good model of nat-ural languages they are widely used in NLP.
Theyare used in modelling of inectional morphology (see(Koskenniemi, 1983)), tokenization and Named En-tity recognition (Grover et.
al., 2000), and many oth-ers.In our work we modify the denition of regulargrammars along the lines of (Abney, 1996).
We userewriting rules of the following kind:C -> Rwhere R is a regular expression and C is a categoryof the words recognized by R. We can think of C asa name of the language recognized by R.A regular grammar is a set of rules such that theregular expressions of the rules recognize pairwisedisjoint languages.
The disjointness condition is nec-essary in order the grammar to assign a unique cat-egory to each word recognized by it.A regular grammar works over a word of letters,called input word.
The grammar scans the inputword from left to right trying to nd the rst sub-word such that it belongs to the language of theregular expression presented by some of the rules ofthe grammar.
If there is no such word starting withthe rst letter in the input word, then the grammaroutputs the rst letter of the word and prolongs thescanning with the second letter.
When the gram-mar recognizes a sub-word then it outputs the cate-gory of the corresponding rule and prolongs the scan-ning with the letter after the recognized sub-word.The grammar works deterministically over the inputword.
The result of the application of the grammaris a copy of the input word in which the recognizedsub-words are substituted with the categories of thegrammar.
The result word is called output word ofthe grammar.
In this respect such kind of regulargrammars could be considered a kind of nite-statetransducers.An additional requirement suggested by (Abney,1996) is the so-called longest match, which is a wayto choose one of the possible analyses for a grammar.The longest match strategy requires that the recog-nized sub-words from left to right have the longestlength possible.
Thus the segmentation of the in-put word starts from the left and tries to nd therst longest sub-words that can be recognized bythe grammar and so on to the end of the word.An example of such a regular grammar is thegrammar  1for recognition of dates in the formatdd.mm.yyyy (10.11.2002) dened by the followingrule:Date ->( (0,(1|2|3|4|5|6|7|8|9)) |((1|2),(0|1|2|3|4|5|6|7|8|9)) |(3,(0|1))),.,((0,(1|2|3|4|5|6|7|8|9))|(1,(0|1|2))),.,(((1|2|3|4|5|6|7|8|9),(0|1|2|3|4|5|6|7|8|9)*))Application of this grammar on the following inputwordThe feast is from 12.03.2002 to 15.03.2002.will produce the output wordThe feast is from Date to Date.A cascaded regular grammar (Abney, 1996) is asequence of regular grammars dened in such a waythat the rst grammar works over the input wordand produces an output word, the second grammarworks over the output word of the rst grammar,produces a new output word and so on.As one example of a cascaded regular grammar letus consider the sequence of  1as dened above andthe grammar  2dened by the following rule:Period -> from, Date, to, DateApplication of the grammar  2on output of thegrammar  1:The feast is from Date to Date.will produce the following output wordThe feast is Period.In the next section we describe how cascaded reg-ular grammars can be applied to XML documents.4 Cascaded Regular Grammars overXML DocumentsThe application of the regular grammars to XMLdocuments is connected with the following problems: how to treat the XML document as an inputword for a regular grammar; how should the returned grammar category beincorporated into the XML document; and what kind of `letters' to be used in the regu-lar expressions so that they correspond to the`letters' in the XML document.The solutions to these problems are described inthe next paragraphs.First of all, we accept that each grammar workson the content of an element in an XML document.The content of each XML element1is either a se-quence of XML elements, or text, or both (MIXEDcontent).
Thus, our rst task is to dene how toturn the content of an XML element into an inputword of a grammar.
We consider the two basic cases- when the content is text and when it is a sequenceof elements.When the content of the element to which thegrammar will be applied is a text we have twochoices:1Excluding the EMPTY elements on which regular gram-mar cannot be applied.1.
we can accept that the 'letters' of the grammarsare the codes of the symbols in the encoding ofthe text; or2.
we can segment the text in meaningful non-overlapping chunks (in usual terminology to-kens) and treat them as 'letters' of the gram-mars.We have adopted here the second approach.
Eachtext content of an element is rst tokenized by a to-kenizer2and is then used as an input for grammars.Additionally, each token receives a unique type.
Forinstance, the content of the following element<s>John loves Mary who is in love with Peter</s>can be segmented as follows:"John" CAPITALFIRSTWORD" " SPACE"loves" WORD" " SPACE"Mary" CAPITALFIRSTWORD" " SPACE"who" WORD" " SPACE"is" WORD" " SPACE"in" WORD" " SPACE"love" WORD" " SPACE"with" WORD" " SPACE"Peter" CAPITALFIRSTWORDHere on each line in double quotes one token fromthe text followed by its token type is presented.Therefore when a text is considered an input wordfor a grammar, it is represented as a sequence of to-kens.
How can we refer now to the tokens in theregular expressions in the grammars?
The mostsimple way is by tokens.
We decided to go furtherand to enlarge the means for describing tokens withthe so called token descriptions which correspond tothe letter descriptions in the above section on reg-ular expressions.
In the token descriptions we usestrings (sequences of characters), wildcard symbols# for zero or more symbols, @ for zero or one sym-bol, and token categories.
Each token descriptionmatches exactly one token in the input word.We divide the token descriptions into two types- those that are interpreted directly as tokens and2There are built-in tokenizers which are always availableand there is also a mechanism for dening new tokenizers bythe user.others that are interpreted as token types rst andthen as tokens belonging to these token types.The rst kind of token descriptions is representedas a string enclosed in double quotes.
The string isinterpreted as one token with respect to the currenttokenizer.
If the string does not contain a wildcardsymbol then it represents exactly one token.
If thestring contains the wildcard symbol # then it denotesan innite set of tokens depending on the symbolsthat are replaced by #.
This is not a problem inthe system because the token description is alwaysmatched by a token in the input word.
The otherwildcard symbol is treated in a similar way, but zeroor one symbol is put in its place.
One token descrip-tion may contain more than one wildcard symbol.Examples:"Peter" as a token description could be matchedonly by the last token in the above example.
"lov#" could be matched by the tokens "loves"and "love""lov@" is matched only by "love""@" is matched by the token corresponding to theintervals " ""#h#" is matched by "John", "who", and "with""#" is matched by any of the tokens including thespaces.The second kind of token description is repre-sented by the dollar sign $ followed by a string.
Thestring is interpreted as either a token type or a setof token types if it contains wildcard symbols.
Thenthe type of the token in the input word is matchedby the token types denoted by the string.
If the to-ken type of the token in the text is denoted by thetoken description, then the token is matched to thetoken description.Examples:$WORD is matched to "loves", "who", "is", "in","love", "with"$CAP# is matched to "John", "Mary" and "Peter"$#WORD is matched to "John", "loves", "Mary","who", "is", "in", "love", "with", and "Peter"$# is matched to any of the tokens including thespaces.Now we turn to the case when the content of agiven element is a sequence of elements.
For instancethe above sentence can be represented as:<s><N>John</N><V>loves</V><N>Mary</N><Pron>who</Pron><V>is</V><P>in</P><N>love</N><P>with</P><N>Peter</N></s>At rst sight the natural choice for the input wordis the sequences of the tags of the elements: <N><V> <N> <Pron> <V> <P> <N> <P> <N>, but whenthe encoding of the grammatical features is moresophisticated (see below):<s><w g="N">John</w><w g="V">loves</w><w g="N">Mary</w><w g="Pron">who</w><w g="V">is</w><w g="P">in</w><w g="N">love</w><w g="P">with</w><w g="N">Peter</w></s>then the sequence of tags is simply <w> <w> ...,which is not acceptable as an input word.
In order tosolve this problem we substitute each element with asequence of values.
This sequence is determined byan XPath expression that is evaluated taking the ele-ment node as context node.
The sequence dened byan XPath expression is called element value.
Thuseach element in the content of the element is replacedby a sequence of text segments of appropriate typesas it is explained below.For the above example a possible element valuefor tag w could be dened by the XPath expression:\attribute::g".
This XPath expression returns thevalue of the attribute g for each element with tagw.
Therefore a grammar working on the content ofthe above sentence will receive as an input word thesequence: "<" "N" ">" "<" "V" ">" "<" "N" ">" "<""Pron" ">" "<" "V" ">" "<" "P" ">" "<" "N" ">""<" "P" ">" "<" "N" ">".
The angle brackets "<"">" determine the boundaries of the element valuefor each of the elements.Besides such text values, by using of XPath ex-pressions one can point to arbitrary nodes in thedocument, so that the element value is determineddierently.
In fact, an XPath expression can be eval-uated as a list of nodes and then the element valuewill be a sequence of values.For example, if the element values for the aboveelements are dened by the following XPath ex-pression: \text() j attribute::g"3, then the inputword will be the sequence: "<" "John" "N" ">" "<""loves" "V" ">" "<" "Mary" "N" ">" "<" "who""Pron" ">" "<" "is" "V" ">" "<" "in" "P" ">" "<""love" "N" ">" "<" "with" "P" ">" "<" "Peter""N" ">".Using predicates in the XPath expressions onecan determine the element values on the basisof the context.
For example, if in the abovecase we want to use the grammatical featuresfor verbs, nouns and pronouns, but the actualwords for prepositions, we can modify the XPathexpression for the element value in the follow-ing way: \text()[../attribute::g="P"] j at-tribute::g[not(../attribute::g="P")]".
In this3The meaning of this XPath is point to the text child ofthe element and the value of the attribute g.case the XPath expression will select the textual con-tent of the element if the value of the attribute g forthis element has value "P".
If the value of the at-tribute g for the element is not "P", then the XPathexpression will select the value of the attribute g.The input word then is: "<" "N" ">" "<" "V" ">""<" "N" ">" "<" "Pron" ">" "<" "V" ">" "<" "in"">" "<" "N" ">" "<" "with" ">" "<" "N" ">".The element value is a representation of the im-portant information for an element.
One can con-sider it conceptual information about the element.From another point of view it can be seen as a tex-tual representation of the element tree structure.At the moment in the CLaRK system the nodesselected by an XPath expression are processed in thefollowing way:1. if the returned node is an element node, thenthe tag of the node is returned with the addi-tional information conrming that this is a tag;2. if the returned node is an attribute node, thenthe value of the attribute is:(a) tokenized by an appropriate tokenizer if theattribute value is declared as CDATA inthe DTD;(b) text if the value of the attribute is declaredas an enumerated list or ID.;3.
if the returned node is a text node, then thetext is tokenized by an appropriate tokenizer.Within the regular expressions we use the anglebrackets in order to denote the boundaries of theelement values.
Inside the angle brackets we couldwrite a regular expression of arbitrary complexity inround brackets.
As letters in these regular expres-sions we use again token descriptions for the valuesof textual elements and the values of attributes.
Fortag descriptions we use strings which are neither en-closed in double quotes nor preceded by a dollar sign.We can use wildcard symbols in the tag name.
Thus<p> is matched with a tag p;<@> is matched with all tags with length one.<#> is matched with all tags.The last problem when applying grammars toXML documents is how to incorporate the categoryassigned to a given rule.
In general we can acceptthat the category has to be encoded as XML mark-up in the document and that this mark-up could bevery dierent depending on the DTD we use.
For in-stance, let us have a simple tagger (example is basedon (Abney, 1996)):Det -> "the"|"a"N -> "telescope"|"garden"|"boy"Adj -> "slow"|"quick"|"lazy"V -> "walks"|"see"|"sees"|"saw"Prep -> "above"|"with"|"in"Then one possibility for representing the cate-gories as XML mark-up is by tags around the recog-nized words:the boy with the telescopebecomes<Det>the</Det><N>boy</N><Prep>with</Prep><Det>the</Det><N>telescope</N>This encoding is straightforward but not very con-venient when the given wordform is homonymouslike:V -> "move"N -> "move"In order to avoid such cases we decided that thecategory for each rule in the CLaRK System is a cus-tom mark-up that substitutes the recognized word.Since in most cases we would also like to save therecognized word, we use the variable \w for the rec-ognized word.
For instance, the above example willbe:<Det>\w</Det> -> "the"|"a"<N>\w</N> -> "telescope"|"garden"|"boy"<Adj>\w</Adj> -> "slow"|"quick"|"lazy"<V>\w</V> -> "walks"|"see"|"sees"|"saw"<Prep>\w</Prep> -> "above"|"with"|"in"The mark-up dening the category can be as com-plicated as necessary.
The variable \w can be re-peated as many times as necessary (it can also beomitted).
For instance, for "move" the rule couldbe:<w aa="V;N">\w</w> -> "move"Let us give now one examples in which elementvalues are used.
For instance, the following grammarrecognizes prepositional phrases:<PP>\w</PP> -> <"P"><"N#">Generally it says that a prepositional phrase consistsof an element with element value "P" followed by anelement with element value which matches the to-ken description "N#".
Usage of the token description"N#" ensures that the rule will work also for the casewhen a preposition is followed by an element with el-ement value "NP".
The application of this grammaron the above example with appropriate denition ofelement values will result in the following document:<s><w g="N">John</w><w g="V">loves</w><w g="N">Mary</w><w g="Pron">who</w><w g="V">is</w><PP><w g="P">in</w><w g="N">love</w></PP><PP><w g="P">with</w><w g="N">Peter</w></PP></s>Here is another example (based on a grammardeveloped by Petya Osenova for Bulgarian nounphrases) which demonstrates a more complicatedregular expressions inside element descriptions:<np aa="NPsn">\w</np> -><("An#"|"Pd@@@sn")>,<("Pneo-sn"|"Pfeo-sn")>Here "An#" matches all morphosyntactic tags foradjectives of neuter gender, "Pd@@@sn" matches allmorphosyntactic tags for demonstrative pronouns ofneuter gender, singular , "Pneo-sn" is a morphosyn-tactic tag for the negative pronoun, neuter gender,singular, and "Pfeo-sn" is a morphosyntactic tagfor the indenite pronoun, neuter gender, singular.This rule recognizes as a noun phrase each sequenceof two elements where the rst element has an ele-ment value corresponding to an adjective or demon-strative pronoun with appropriate grammatical fea-tures, followed by an element with element value cor-responding to a negative or an indenite pronoun.Notice the attribute aa of the category of the rule.It represents the information that the resulting nounphrase is singular, neuter gender.
Let us now sup-pose that the next grammar is for determination ofprepositional phrases is dened as follows:<pp>\w</pp> -> <"R"><"N#">where "R" is the morphosyntactic tag for preposi-tions.
Let us trace the application of the two gram-mars one after another on the following XML ele-ment:<text><w aa="R">s</w><w aa="Ansd">golyamoto</w><w aa="Pneo-sn">nisto</w></text>First, we dened the element value for the ele-ments with tag w by the XPath expression: \at-tribute::aa".
Then the cascaded regular gram-mar processor calculated the input word for therst grammar: "<" "R" ">" "<" "Ansd" ">" "<""Pneo-sn" ">".
Then the rst grammar is appliedon this input words and it recognizes the last twoelements as a noun phrase.
This results in two ac-tions: rst, the markup of the rule is incorporatedinto the original XML document:<text><w aa="R">s</w><np aa="NPsn"><w aa="Ansd">golyamoto</w><w aa="Pneo-sn">nisto</w></np></text>Second, the element value for the new element <np>is calculated and it is substituted in the input wordof the rst grammar and in this way the input wordfor the second grammar is constructed: "<" "R" ">""<" "NPsn" ">".
Then the second grammar is ap-plied on this word and the result is incorporated inthe XML document:<text><pp><w aa="R">s</w><np aa="NPsn"><w aa="Ansd">golyamoto</w><w aa="Pneo-sn">nisto</w></np></pp></text>Because the cascaded grammar only consists of thistwo grammars the input word for the second gram-mar is not modied, but simply deleted.5 ConclusionIn this paper we presented an approach to appli-cation of cascaded regular grammars within XML.This mechanism is implemented within the CLaRKSystem (Simov et.
al., 2001).
The general idea isthat an XML document could be considered as a\blackboard" on which dierent grammars work.Each grammar is applied on the content of some ofthe elements in the XML document.
The content ofeach of these elements is converted into input words.If the content is text then it is converted into a se-quence of tokens.
If the content is a sequence ofelements, then each element is substituted by an el-ement value.
Each element value is dened by anXPath expression.
The XPath engine selects the ap-propriate pieces of information which determine theelement value.
The element value can be consideredas the category of the element, or as textual repre-sentation of the tree structure of the element and itscontext.
The result of the grammar is incorporatedin the XML document as XML markup.In fact in the CLaRK System are implementedmore tools for modication of an XML document,such as: constraints, sort, remove, transformations.These tools can write some information, reorder itor delete it.
The user can order the applications ofthe dierent tools in order to achieve the necessaryprocessing.
We call this possibility cascaded pro-cessing after the cascaded regular grammars.
Inthis case we can order not just dierent grammarsbut also other types of tools.ReferencesSteve Abney.
1996.
Partial Parsing via Finite-StateCascades.
In: Proceedings of the ESSLLI'96 Ro-bust Parsing Workshop.
Prague, Czech Republic.DOM.
1998.
Document Object Model (DOM) Level1.
Specication Version 1.0.
W3C Recommenda-tion.
http://www.w3.org/TR/1998/REC-DOM--Level-1-19981001Claire Grover, Colin Matheson, Andrei Mikheev andMarc Moens.
2000.
LT TTT - A Flexible To-kenisation Tool.
In: Proceedings of Second Inter-national Conference on Language Resources andEvaluation (LREC 2000).K.
Koskenniemi.
1983.
Two-level Model for Morpho-logical Analysis.
In: Proceedings of IJCAI-83 ,pages: 683-685, Karlsruhe, Germany.Kiril Simov, Zdravko Peev, Milen Kouylekov, Ale-xander Simov, Marin Dimitrov, Atanas Kiryakov.2001.
CLaRK - an XML-based System for CorporaDevelopment.
In: Proc.
of the Corpus Linguistics2001 Conference, pages: 558-560.
Lancaster, UK.Text Encoding Initiative.
1997.
Guidelines for Elec-tronic Text Encoding and Interchange.
Sperberg-McQueen C.M., Burnard L (eds).Corpus Encoding Standard.
2001.
XCES: CorpusEncoding Standard for XML.
Vassar College, NewYork, USA.http://www.cs.vassar.edu/XCES/XML.
2000.
Extensible Markup Language (XML) 1.0(Second Edition).
W3C Recommendation.http://www.w3.org/TR/REC-xmlXML Schema.
2001.
XML Schema Part 1: Struc-tures.
W3C Recommendation.http://www.w3.org/TR/xmlschema-1/XPath.
1999.
XML Path Lamguage (XPath) version1.0.
W3C Recommendation.http://www.w3.org/TR/xpathXSLT.
1999.
XSL Transformations (XSLT) version1.0.
W3C Recommendation.http://www.w3.org/TR/xslt
