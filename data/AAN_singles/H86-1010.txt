An Equipment Model and Its Role in the Interpretation of Nominal CompoundsTomasz Ksiezyk and Ralph GrishmanDepartment of Computer ScienceCourant Institute of Mathematical Sciences -New York University251 Mercer St.New York, New York 10012(212) 460-7446, (212) 460-7492AbstractFor natural language understanding systems designed for domains including relativelycomplex equipment, it is not sufficient o use general knowledge about his equipment.We show problems which can be solved only if the system has access to a detailedequipment model.
We discuss features of such models, in particular, their ability tosimulate the equipment's behavior.
As an illustration, we describe a simulation modelfor an air compressor.
Finally, we demonstrate how to find referents in ~is model fornominal compounds.1.
IntroductionThe work presented here is part of the PROTEUS (-PROtotype TExt  UnderstandingSystem) system currently under development at the Courant Institute of MathematicalSciences, New York University.
l The objective of our research is to understand short naturallanguage texts about equipment.
Our texts at present are CASualty REPorts  (CASREPs)which describe failures of equipment installed on Navy ships.
Our initial domain is thestarting air system for propulsion gas turbines.
A typical CASREP consists of severalsentences, for example:Unable to maintain lube oil pressure to SAC \[Starting Air Compressor\].
Disengagedimmediately after alarm.
Metal particles in oil sample and strainer.It is widely accepted among researchers that in order to achieve natural languageunderstanding systems robust enough for practical application, it is necessary to provide themwith a lot of common-sense and domain-specific knowledge.
However ,  so far, there is noconsensus as to what is the best way of choosing, organizing and using such knowledge.The novelty of the approach presented here is that, besides general knowledge aboutequipment, we also use a quite extensive simulation model for the specific piece ofequipment which the texts deal with.
We found that for understanding purposes it is moreappropriate to make the simulation qualitative rather than quantative.
Thus, for example,  weare not interested in the precise value of oil pressure, but only whether it is too low or toohigh.
The model is built from instances of prototypes which contain the bulk of generalknowledge.
It exists in the system permanently.
In this situation the analysis of a piece of  textconsists of two stages: (1) locating in the model the objects mentioned in text; (2) interpretingthe text using both the specific information residing in the model and the general knowledgewhich is accessible from the model.
There is no clear-cut distinction between these two stages(see discussion of the examples in the next section).i An overview of the system is given in \[Grishman 1986\], submitted to the AAAI-86.81We see the following merits of having a simulation model:(a) the model prov ides us with a reliable background against which we can check thecorrectness of the understanding process on several levels: finding referents of noun phrases,assigning semantic cases to verbs, establishing causal relationships between individualsentences of the text.
(b) the requirements of simulation help us to decide what kind of knowledge about theequipment should be included in the model, how it Could best be organized and whichinferences it should be possible to make.
It appears that the information needed forsimulation largely coincides with that necessary for language understanding.
(c) the ability to simulate the behavior of a piece of equipment provides a very niceverification method for the understanding process at the level of interaction with a user - it isrelatively straightforward to build a dynamic graphical interface which allows the user tohave a friendly insight in the way his input has been understoood by the system.In the remainder of the paper we will show examples of problems which can be solved onlyif the system has access to some kind of a simulation model of the domain equipment.Having demonstrated the need for such a model, we will discuss the design decisions whichwe found important for our domain and which seem to apply general ly for complexequipment.
How these considerations influenced the model for the SAC may be seen in thenext section.
Then we present a method of finding referents in the model  for nominalcompounds describing SAC's components.
Finally, we briefly describe our future work.2.
Need for a ModelIn most natural language understanding systems the knowledge about the domain ofdiscourse is organized in the form of prototypes for objects and actions, and for the relationsbetween them which are relevant for the domain.
The prototypes are repositories forknowledge about the instances they subsume.
This knowledge is highly structured - there aremany links through which apparently distant concepts may be connected.
The text isprocessed on a sentence by sentence basis.
Usually, each sentence is split into linguisticentities with syntactic and semantic information attached.
This informat ion is used todetermine the prototype for each entity.
Through these prototypes there is access to generalinformation about the concepts invoked by the sentence.
This information is often necessaryfor the adequate interpretation (i.e.
understanding) of the sentence.
To account for the factthat the understanding of an utterance depends sometimes on the context in which theutterance is set, it is necessary to maintain information about the discourse context.
One wayof organizing this information is by creating and storing instances of prototypes for entitiesfrom the text as they come under analysis.
The combined information coming from thecontext and from the processed sentence is used to solve problems like anaphora resolution,connectivity, etc.Assuming this approach, let's consider the following sentence (let it be the first sentence inthe analyzed text):Starting air regulating valve failed.Having completed the syntactic and semantic analysis of the sentence, we would recognizestarting air regulating valve as an example of the prototype regulating valve.
We would thenfetch its description and create an instance of a regulating valve.
Next,  using the generalknowledge about valves (of which regulating valve is a more specific case), and the semanticinformation about starting air, we would modify the just created instance with the fact thatthe substance the valve regulates is starting air.
From the syntactic analysis we would knowthat starting air regulating valve is the subject of verb fail.
Using the prototype of the actionfail, we would create its instance and possibly also would further modify the instance of thevalve so: that the fact about its operational state is recorded.
These two instances would nowconstitute the discourse context so far.
Now, suppose the message continues with thescnten~:82Unable to consistently start nr Ib turbine.The processing would be similar to what has been described above for the first sentence.
Wewould create an instance of a gas turbine, would fill its proper name slot with nr Ib  andfinally use the instance as an argument in another instance recording the finding about startproblems.These two sentences come from an actual CASREP.
In the starting air system (our initialdomain) there are three different valves regulating starting air.
Two questions might beposed in connection with this short, two-sentence text: ( I)  which of the three valves wasmeant in the first sentence?
(2) could the failure of the valve mentioned in the first sentencebe the cause of  the trouble reported in the second sentence?The general knowledge of equipment may tell us a lot about failures, such as: if amachinery element fails, then it is inoperative, or if an element is inoperative, then theelement of which it is part is probably inoperative as well, etc.
Unfortunately,  suchknowledge is not enough: there is no way to answer these two questions (not only for anartificial understanding system, but even for us, humans) without access to rather detailedknowledge about how various elements of the given piece of equipment are interconnectedand how they work as an ensemble.
In our case we could hypothesize (using generalknowledge about text structures) that there is a causal relationship between the facts stated inthe two sentences.
To test this, we would have to consider each of the three valves in turnand check bow its inoperative state could affect the starting of the specific (i.e.
nr lb)turbine.
If one of the three valves, when inoperative, would make the turbine startingunreliable, then we could claim that this valve is the proper referent for the starting airregulating valve mentioned in the first sentence.
This finding would let us also answerquestion (2) affirmatively.The above example, as well as others of similar nature, demonstrate that in cases wherethe domain is very specialized and complicated (a typical situation for real-life equipment),language understanding systems should be provided not only with general knowledge aboutthe equipment but also have access to its model.With an equipment model available, the processing of the two sentences would change: forthe first sentence, instead of building a new description for the starting air regulating valve,we would rather try to find an object / objects in the model which could be described by thisnoun phrase.
We would treat nr lb gas turbine similarly.
The semantics of start would be akind of simulation procedure defined for the model.
Now, let's consider problems (1) and (2)again.
Viewing nr lb as a proper name, we should easily find the object in the model whichcorresponds to the referred turbine.
The analysis of starting air regulating valve would leaveus with three pointers to the three objects in the model corresponding to the three starting airregulating valves in the equipment.
In order to resolve this ambiguity we could make thefollowing assumption, which seems very reasonable:Suppose first, that the valve's failure has indeed caused problems for theturbine.
Now, if we confirm that at least one among the three valves, ifinoperative, has this effect, then our assumption was correct and we found theright referent(s);  if none of the three valves has any impact on the turbine, thenour assumption was wrong: it answers question (2) negatively and leaves (1) stillopen.Then we would proceed with the confirmation phase, considering each of the three candidatesseparately.
We would temporarily set its operational state to INOPERATIVE ,  initiate theSTART procedure, and then check whether the functional state of the nr lb gas turbine in themodel has been set to RUNNING (for simplicity reasons let's assume that there is noconsistently adverb in the second sentence).
If for all three simulation experiments we windup with the value RUNNING for the turbine, then we must conclude that there is no causalrelationship between the sentences.
Otherwise, we would claim to have found the rightreferent for the valve.
Having unambiguously located the object referred to in the firstsentence, we would modify its operational state accordingly.833.
Characteristics of an Equipment ModelIn the preceding section we tried to show that general knowledge about equ ipment  is byitself not enough to solve some problems of understanding.
The decision to providePROTEUS with an equipment model confronted us with a new question.
Where and how todraw a division line between the knowledge about equipment in general and a model  of aspecific piece of equipment?
The ultimate objective of our research is to design PROTEUS insuch a way that it may be adapted easily to new equipment.
Clearly, the model has to be builtanew each time we want to use PROTEUS for a new piece of equipment.
The generalknowledge,  on the other hand, should undergo,  in such cases, only a slight extension due tothe new types of components in the new equipment.
For example,  moving f rom the startingair system to the main reduction gear, we would have to build a new model for the gear, butwhile doing this, we should be able to use many of the structures designed for model l ingcomponents  which also occured in the starting air system, like bearings, lubrication systemelements,  etc.
This goal can be achieved using prototypes and their instances: the modelwould be built of instances of prototypes.
The prototypes would constitute part of thegeneral  knowledge data base.
In the instances we would store only the information which isspecific to the object described by the instance.
For example,  in case of a gearbox,  theinformation about its function (i.e.
speed change) should be stored in the prototype,  and onlythe ratio of this change should reside in the instance of a specific gearbox.
Also theinformation about how a specific gearbox is used in the domain equipment must be kept inthe instance.
Of course, the prototype-instance scheme ensures that all the general  knowledgeconnected with the prototype is also accessible f rom instances of this prototype.
We foundthe rich repertoire of programming tools constituting the f lavor system in Symbolics-Lisp avery convenient vehicle for implementing this strategy.On the level of prototypes we should apply the principle of generality as well.
Hence,  forexample,  we should consider the prototype of a regulating valve as a special case of a valveand have the knowledge characteristic for all possible types of valves connected with thevalve prototype.
This knowledge could then be propagated down in the hierarchy ifnecessary.
Because the problems of structuring knowledge in the form of prototypes havebeen extensively investigated (research on frames,  scripts, semantic nets, etc.
), we won' te laborate on this here.
We will comment  on only one aspect of the hierarchy of prototypes.
Itseems to us that, for purposes of equipment model l ing, this hierarchy should have thestructure of a graph rather than of a tree: its nodes should be allowed to have more than justone immediate parent.
We mentioned already that there are regulating valves in ourequipment.
These are valves whose function is to regulate the medium in some manner ,usually changing one of its parameters,  like pressure or temperature.
We also have othervalves whose function is different, for example relief or shut-off valves.
Thus,  is itconceivable to divide valves into classes according to their function.
However ,  this is not theonly dimension along which classification is possible.
Valves may be also categorizedaccording to their operating principle as electric, hydraulic or pneumatic valves.
Now, theprob lem with a tree-like taxonomy is that we have to arrange the dimensions l inearly: if wedecide to consider the functional aspect first, we will have to repeat the division according tothe operat ional  aspect at each node of the functional level of the hierarchy tree.
With thereversed order of dimensions the problem remains the same.
It would be therefore muchbetter to allow a node in the hierarchy to inherit propert ies from more than one immediate lypreceding node.
The f lavor system, with its mechanism allowing f lavors to be mixed,  provedto be very helpful here.It 's obvious that any real-life equipment deserving a natural language front end is big andcomple x.
For example, the starting air system (our initial domain) consists of severalhundred elements each of which may be referred to by its descriptive name and be ment ionedin a casaulty report.
A good measure of the system's complexity is the size of its descriptionin the ship's manual: 28 pages of text, f igures and tables.
What is the best way of organizing84this vast amount of data into a managable model?
Clearly, some simplification isunavoidable.
How much?
Let us address the former problem first.
A salient feature of apiece of equipment is its task, i.e.
what it should do.
Generally speaking, all complexequipment may be viewed as processors of something - if this something is changedqualitatively into something else (e.g.
fuel into rotary movement) we may speak ofgenerators; if only some parameters of this something are changed (e.g.
low-pressure air intohigh-pressure air) we may speak of t ransformers.
Usually only part of the equipment 'scomponents are directly involved in this pr imary task.
The rest -are  there to ensure thatspecial conditions are created at certain points in the equipment.
This observation providesus with an important  structural hint: we can treat a piece of equ ipment  as a functional systemconsisting of component  systems among which one is responsible for the pr imary function(the equipment ask) and the others fulfill auxiliary functions.
If necessary, we may apply thesame approach recursively to any of the lower level systems.
Systems of this kind may beviewed as chains of components linked together in such a way that, at each node of the chain,the processed substance changes slightly, becoming thus more  similar to its desired form atthe end of the chain.
Many of these components work proper ly  only if special conditions arecreated.
Hence the need for auxiliary systems.
Another ,  more conventional way ofstructuring the model is in the form of a part/whole hierarchy.
A natural question arises:where one should stop with these two types of ref inements (in system/basic-part andpart/whole hierarchies)?
This is a more specific version of the question we posed above: howmuch to simplify?
A possible answer is to refine the hierarchy far enough so that everythingwhich potentially may be referred to in the reports would have a description in the model.This, however,  seems impractical.
Consider, for example,  the fol lowing sentence:Borescope investigation revealed a broken tooth on the hub ring gear.Considering that there are several different gears in our starting air system and each ofthem has many teeth which are very much alike, it's obvious that creating a scparatedescription for each of them wouldn't  be reasonable.
The same remark is true for balls inbearings or for connecting elements like screws, bolts or  pins.
On the other hand,information about the tooth conveyed in the above sentence cannot go unnoticed.
Thesolution we accepted for such elements is not to include their descriptions in the model on apermanent  basis but to keep the possibility open to create and to implant into the model theirdescriptions if such a need arises during the analysis.
A rule of thumb for deciding whether aparticular c lement deserves a permanent place in the model can be formulated in the form ofthe question: how much information specific to this c lement  is necessary to solveunderstanding problems,  like finding referents (see the section on nominal compounds)  ormaking inferences?
As an example of the latter, let's consider a specific gear.
We would liketo know, among other things, what is this gear's role and place in the modelled equipment sothat, in case of its damage, we could determine the impact of this on the equipment.Information of this type can be deduced neither from the analyzed text nor from generalknowledge about gears.
It must be known in advance.
Our way to achieve this is to keep thegear's description permanently in the model.There are, however ,  elements like teeth which have so little re levant structure that they arealways referred to as tooth, teeth together with the e lement  higher up in the part/wholehierarchy (let's call such an element a host).
Thus, it is not necessary to maintain any specificinformation about them in the model.
It is enough, if we are able to create their descriptionsonly when they occur in the text.
All the possible informat ion we will ever need to includeinto such descriptions will come from the text.
The informat ion relating such elements withother parts of the equipment will come from their hosts.
For example,  the impact of atooth's damage on the equipment may be derived from the functional information connectedwith its host.It is : important o notice that there is nothing absolute in distinctions uch as the one madeabove.
It is conceivable to have a piece of equipment of a larger scale than the SAC, whereelements like gears are not essential enough for us to be bothered with their shapes or85locations; if broken they probably would be referred to by giving the higher- level e lement ofwhich they are part.
In such cases we would rather treat gears like we treat teeth here.It is desirable to be able to use the model  on several levels of abstraction.
For somepurposes it is enough to treat, say, a speed increasing gearbox as a system for which we onlyknow its outside behavior; in other cases, we would like to use information about its internalstructure as well.
It should, of  course, be possible to deduce the external behavior  of anobject by analyzing its parts; however ,  it wouldn' t  be practical to go down to the level ofbasic components  each time we need to know something about the behavior  of the equipmenton the intermediate level.
Our approach of gradually refined levels of functional systemsdescribed above fulfills this desideratum.
It seems inevitable that any division into levels willalways be artificial and therefore,  whatever  structure of the model we could design, wealways will find sentences which mention objects from different levels.
Consider for example:Believe the coupling from diesel to SAC lube oil pump to be sheared.In our model for the starting air system the diesel and SAC are at the same level ofabstraction.
The lube oil pump is two levels below the SAC in the hierarchy.
How we solvethe problem of determining the referent for the above coupling is described in the section onnominal compounds (see below).
Here we want only to point out that for any multi- levelmodel ,  there must be mechanisms available for moving between abstraction levels flexibly.In the preceding section we discussed two understanding problems.
The solution weproposed there relied heavily on the ability to simulate certain actions and processes of thedomain equipment.
We have ment ioned already in the introduction that it is sufficient tosimulate equipment behavior qualitatively.
It is clear that the solution to the simulationproblem depends a lot on the structure of the model.
Therefore,  the simulation requi rementshould be one of the important design criteria for the model.
Dividing the equipment intofunctional subsystems and modell ing them as chains of components (comp.
above) facilitatesthe simulation task considerably.There is another aspect of natural language understanding systems whose satisfactorytreatment depends a lot on an effective solution to the simulation problem.
We may expectthat in real-l ife cases, the output of such systems is either fed into some expert system orcommunicated to a human user.
In both cases important decisions are presumably made,based on this output - otherwise, why to spend money for building them.
It is therefore veryimportant for such systems to provide users with means to check the quality of theirunderstanding.
In the case of equipment,  one quick and user-fr iendly way of verifying theanalysis is through graphics (we elaborate on this a little more in the section describing futurework,  below).
Because equipment is very dynamic,  most texts,about hem involve actions,events, procedures occuring in a certain t ime sequence.
In order to show this graphical ly, it isnecessary to simulate the essential aspects of this on the screen.The simulation should be designed in such a way that its two independent applications inthe system (i.e.
text understanding and communicat ion with users) wouldn' t  require twoseperate simulation systems.4.
The Starting Air System ModelAs mentioned above, the equipment we have chosen as our initial domain is the starting airsystem on Navy ships.
Its function is to supply a ship's propulsion gas turbines with thehigh-pressure air necessary to start the turbines.
The main part of the starting air system isits compressor  (SAC - Starting Air Compressor ) .
It is by far the most complicated e lementand therefore is prone to various kinds of damage and malfunction.
Because of itsimportance,  we started our efforts by building a model of the SAC.
So far we haveimplemented parts of it on a Symbolics Lisp machine using Zeta-Lisp.86r tSAC ( I=I )~,e .
-e l  f l o to rSyStem/ ?~ Aab~ent  )R~rLo rl Sv~ten.
~',': :,~1 e 1~_/~ iI e r, l : .e,  ,!~ ur  ?Figure I.
Division of the SAC into subsystems.Following the guidelines for equipment models given in the preceding section, we dividedthe SAC into its three functional subsystems (comp.
Fig.
I):(a) Air System - this is the system partially responsible for the SAC's primary task: ittakes ambient air, compresses it to the desired pressure and outputs the flow to a system oftemperature and pressure regulating valves which precede the turbine starter;(b) Motor System (auxiliary) - its function is to transmit mechanical rotation from thediesel motor to the compressor blade assembly and lubrication oil pump;(c) Lubrication Oil (LO) System (auxiliary) - it distributes the oil throughout the SACand supplies it under pressure to such elements as bearings and some couplings.so_.
:i .t lcooo,,o.
t: .J\ [ . '
e~e:  ~ ' {  Shaf t  | ShaFt  C lu tch:i Rsse~blv  2 Gearbo~ ; RsseMb I v t: i!
CearboK \]'.
.
.
.
.
~ L ~ ~I L t!
JL fCear'1 ~v ~ t. el,,i j lJr ,L__'i1!,t'lotor Svs ten  (1 :11q~Co~pre  ?
~or  I :Sh.t'tt li;R~enb ly  ~,Figure 2.
Division of the SAC Motor System into subsystems on level 1.87Each of these three systems may be split into further systems.
For example, we view theMotor System as consisting of subsystems hown in Fig.
2.
Each of these constituents isagain a system consisting of more basic elements.
So, for example, one of the two speedincreasing gearboxes consists of a hub, a ring gear, an arrangement of three star gears, and apinion mounted on a shaft.Every system may be viewed on several levels of abstraction.
For example, Fig.
2 showslevel 1 of the Motor System.
Fig.
3 and 4 show the same system on level 0 and level 2,respectively.J ' ( l=O)  \]\ /"- - - '~ I V /S  ), s ten  ~/',..~ -~-~/~ Syl lte~ j@Figure 3.
The SAC Motor System on level O.All the figures presented here are Symbolics screen images generated by PROTEUS fromdescriptions of the model's elements used for the understanding process.
As a matter of fact,we have provided dynamic displays reflecting some of the simulation possibilities of themodel.
Consider, for example, Fig.
4.
It is possible, using the mouse, to position the cursoron, say, the D IESEL  ON switch and click on it causing the diesel to be turned on.
Thecompressor starts to run: the small globes inside each of the square elements ( f rom dieselshaft to the clutch) start to rotate in circles with different speeds depending on their place inthe system (before or after the speed increasing gearbox); furthermore,  all the elementswhich should be lubricated (those which have in- and outlets in the form of arrows) get oilinflux (depicted as dots appearing inside the elements).
This follows from the way the SACoperates: the Motor System transmits the rotary movement to the lube oil pump, which startsto work and tosupp ly  oil via the LO System (not shown here).
Similarly, when we set theclutch to the IN  position, the other elements (following the clutch in the chain) will start torotate.
Again, all this is achieved as a side effect of the simulation used for understandingpurposes.
We want to stress that the "movie" is not the point here.
We have to know how therotary movement propagates in the system, if we want to conduct tests like the one describedin section 2, above.
Such tests are the primary reason why we equipped our model  with asimulation capability.88Rotor  SymteR (1m2)mSw4tchesDIESEL CLUICHCurrent  S tore~- iunc l l  144~3~86 13:28:58 k$iezwkCoRmun4cotton UlndovUSE;: ~unFigure 4.
The SAC Motor System on level 2.Let's turn now to the internal structure of our model for SAC.
The structure of the modelis based o~ the Symbolics-Lisp flavor system.
The prototypes of elements of which the modelis built are represented as flavors.
The specific elements of the model are encoded asinstances of their prototype flavors.
The general knowledge about elements is stored in theprototype flavors and can be divided into two parts: (1) declarative knowledge xpressed inthe form of defaults and restrictions on instance variables; (2) procedural knowledge in theform of methods defined for the flavors.
The flavor instances contain only declarativeknowledge comprised of instance-variable -- value pairs (we will use more traditional nameshere: slot -- slot-filler).
The prototype flavors are built as mixtures of component flavors,each of which captures a certain aspect(s) of the prototype.
The component flavors, whichform a graph-like hierarchy, may be viewed as sets of isolated features common to severaldifferent prototypes.
The sophisticated inheritance mechanism of the flavor system, whichworks on the level of instance variables (slots) and on the level of methods, allows us todesign this hierarchy of flavors in a consise manner.
We illustrate these points below with acouple of examples.Eve/-y element which is represented permanently in the model is an instance of a flavorwhich has the %building-block flavor as one of its components flavors (directly or indirectlythrough intermediate flavors).
This reflects the observation that certain facts about model89elements will have to be recorded for any kind of element.
For example,  for every e lementwe want to know its operational state ( remember  that the texts we are dealing with are aboutequipment  fai lures) or the system of which it is a part.
So, we define:(defflavor %building-block(location operational-state part-of screen-location caption)0(:settable-instance-variables :screen-location :operational-state):gettable-instance-variables(:initable-instance-variables :function :location :part-of)(:default-init-plist :operational-state 'OK))In the above definit ion the first element is the f lavor's name, the second is a list of instancevariables, the third is a list of component  f lavors (empty here),  and the rest of the definit iondescribes var ious aspects of instance variables, such as their defaults, how they can beinitialized, accessed, etc.
(we have omitted this part f rom f lavor definitions given below).The permanent  elements in the model fall into two categories: systems and basic parts.systems are those building blocks which have structural information.
They are chains ofe lements united by a working substance which they process (for example,  the lube oilsystem).
Systems are described at several evels of abstraction.
The filler of the structure slotis a list of descriptions of the system on different levels - each element in this list specifies,among others,  the start and end nodes of the chain of components  on this level:(defflavor %system(working-substance structure)(%building-block))basic parts are those building blocks which are at the bottom of the part/whole hierarchy.
Thecomponents lot is initially set to an empty list.
It is provided as a destination for thoseequ ipment  parts which were not included into the model  a priori but have to be recorded ifthey occur in the analyzed text (see section 3 for our discussion on this issue).
(defflavor %basic-part(components)(%building-block))Another  very common flavor describes the aspects of a building block which capture itsrole as a component  (a node) in some system.
It is used as a mixin flavor for building blockswhich are systems or basic parts.
Its slots record how it is incorporated in the system (from,to slots) and what its function is with respect o the working substance (i.e.
how the substancechanges while passing this element).
The filler of the function slot is a formula interpreted bya method def ined for the prototype f lavor of the element.
This method accesses values ofseveral  slots of the instance to which it is applied, for example input or operational-state.
Thelatter is important  because of the potential of fai lure or damage of the element (see ourdiscussion in section 2, above):(defflavor %system-node(from to input output function)0)Complex  equipment  is usually controlled f rom outside automatical ly or manually by servicepersonnel.
There are, therefore, elements whose operat ional  modes may be changed.Examples  of  such elements in the SAC are the diesel and clutch.
To account for suchelements,  we def ined a f lavor %multiplexer, which may be mixed with other componentf lavors to fo rm a prototype.
The filler of switch-locations i  a list of all places from whichswitching is possible (in our case these are the local and remote control consoles), switch-actions specif ies for each possible switch position a procedure which has to be run in case thee lement  is set into this position.
(defflavor %mul:iplexer(switch-locations switch-anions actual-switch-position)900)None of the above are prototype flavors.
They are component flavors which we can use todefine prototypes.
Let us consider the prototype for diesel motors.
It is a piece of  equipmentcomplicated enough to treat as a system.
Diesels generate rotary movement which is thenused to run other pieces of equipment.
Thus they are parts of larger systems.
Because theyrun only if a need arises, there must be ways to influence their operational modes.
All thesefacts justify the following definition of a f lavor which can serve as a prototype for dieselmotors.
The point of this definition is to mix together several component  flavorscorresponding to the just mentioned features.
(defflavor %diesel0(%system %system-node %multiplexer))Now we are ready to introduce the instance of a specific diesel motor which is part of thestarting air system.
(setq @diesel-2 (make-instance '%diese!
':put-of'~ssdg-2':working-substance'(ROTATION)':caption'("Diesel")':tO'((ROTATION @sac-2 RIGHT))':from'((OIL @container-2 LEFT)(AIR @container-1 UP))':function'((ROTATION ((OIL.
LOW) (AIR.
LOW)) .
(ROTATION.
LOW)))' :str  U.cttlr~'((0.
(DOWN.
((ROTATION OIL AIR) @diesel-2 (@diesel-2) (2.2))))(1.
(...)))))This instance, its prototype, and the component flavors we showed, are in fact simplifiedversions of the structures we use in our model.
We have included here only these parts whichwe considered helpful to convey the basic ideas of our prototype-instance scheme used forbuilding the model.The examples discussed so far demonstrate only the declarative aspect (i.e.
the inheritanceof instance variables) of the hierarchy we may build using flavors.
We also define with eachf lavor a set of methods which, when combined, provide each instance with a lot of proceduralknowledge.
It is more difficult to show examples of this because methods are typically longprocedures.
Describing the %system-node f lavor above, we mentioned one such method.Similarly, for %multiplexer we define a method which, using the data stored in instance'sslots, simulates the switching action.
Still another example of a method is a drawingprocedure which we define for prototypes whose instances may be displayed on the screen.The flavor system supports object-oriented programming.
This is reflected in the waymethods are invoked - by sending messages (method names) to instances.
This allow us touse identically named methods to invoke quite different procedures.
For example,  it'sobvious from looking at the pictures that we use several different drawing procedures.However ,  we may use the same name, say, :draw for all of them.
Suppose we haveidentif ied an element by locating its instance in the model and want to draw it.
We don't  haveto bother about its prototype in order to know how to draw it - it's enough to send the :drawmessage to this instance.
The right method will be chosen automatically.
This situation isadvantageous for the language understanding process as well.
The first thing we do duringclause analysis is to find referents in the model (i.e.
instances) for linguistic entities occuringin the sentence.
The semantics of the verb or predicate adjective is typically expressed in the91form of a method.
The interpretation of the clause with respect o the model consists then insending this method to one of the arguments.
The part of PROTEUS which deals with theinterpretation of clauses hasn't been implemented yet, so we won't go deeper into this subjecthere.5.
Finding Referents for Nominal CompoundsOne notable feature of technical texts is the heavy use of nominal .compounds.
It seems thattheir average length is proportional to the complexity of the discourse domain.
In the domainof the starting air system, examples likestripped lube oil pump drive gear and hub ring gear,are, by no means, seldom occurences.The problem with nominal compounds is their ambiguity.
The syntactic analysis is ofalmost no help here.
Semantically they are also very difficult to deal with \[Finin 1986\].
Theproblem may be metaphorically described as a jigsaw puzzle: given several pieces (compounddescriptions) put them together to build a sensib lepicture (nominal compound description).The task becomes somewhat easier in cases when we know that nominal compounds refer  toobjects existing in the system.
In terms of our metaphor it translates into a hint: a set ofpictures is given with the assumption that the solution is one of these pictures.The above observation is the next argument for maintaining an equipment model.
Not allnominal compounds fall into this category (a notable class here are verb nomalizations, likeborescope investigation).
However,  most of them (especially the longest ones) refer to objectsmaintained in the model.PROTEUS processes sentences sequentially (first syntax, then semantics, finallydiscourse).
Both the syntactic and semantic analyzers have been implemented already.\[Grishman 1986\] describes the overall organization of PROTEUS in some detail.
Thesyntactic component delimits the noun phrases, but does not assign any structure to the pro-nominal modifiers.
The interpreter of nominal compounds takes as input an ordered list ofwords of which the nominal compound consists, and tries to achieve two goals: (1) todetermine the structure of the pre-nominal modifiers; (2) to locate the instance(s) in theequipment model referred to by the nominal compound.The parsing of the nominal compound proceeds bottom-up without backtracking.
Thewords are analyzed from right to left.
The parser maintains a Parse Stack where all possiblepartial parses are kept.
The information about each partial parse (State Vector) consists ofthree lists: (1) the Word List: the unparsed part of the nominal compound; initially containsthe whole compound; (2) the Forest: list of partial parse trees for the part of the compoundwhich has been analyzed so far: initially empty; (3) the List of Referents: for each partialparse tree in the Forest, a list of the model instances which may be named by the words inthat partial parse tree.The condition for a successful parse is twofold: (1) the Word List is empty; (2) the Forestcontains one tree (in such a case the List of Referents will, necessarily, also have one list ofinstances - they will be considered the referents of the compound nominal).
The  parser worksas the following coroutine:LOOP WHILE Parse Stack not erupt'State-Vect = Pop (Parse Stack):Word = next word from the Word List of State-Vect;Dict-Entry = dictionary entry for Word;FOR each reduction rule applicable to State-Vect and Dict-EnrryCreate  New-State-Vect;IF (termination conditions fu2filled for New-State-Vect)THEN re turn  (New-State-Vect)ELSE push (Parse Stack New-State-Vecr)?Each word in the dictionary is assigned two properties: its model class (MOD-C)  and itssemantic lass (SEM-C).
We use five different model classes:92Instance - a word  of  this class names  a set  o f  instances in the mode l ;  this set  is part  of  thedictionary entry (in Fig.
5 the word  pump is an example ;  (pl p2 p3) are ins tances  o f  pumpswhich occur in the model) ,Slot-Fi l ler - a word  of  this class can carry informat ion used as s lot  f i l lers in some instances;taken a lone it doesn ' t  name any mode l  instance ( in Fig.
5 the word  lube is an example) ,Slot-Name - a word  of  this class indicates how to interpret some other  adajcent words in thecompound;  an example is speed - it tells how to treat low in the nominal compound low speedgearbox,Procedure - each word of this class is assigned a procedure which, when called witharguments coming from other parts of the noun phrase, returns a referent(s) ;  an example  iscoupl ing,  as in coupling f rom diesel to sac lube oil pump - the coupling meant  here is not asingle coupling, but a whole sequence of them on the path between diesel and lube oil pump;this sequence has to be evaluated using the model ,Component  - a word of this class names a set of objects in the domain equ ipment  which arenot permanent ly  present in the model (for examples and discussion of this issue see section3).DICTIONARY(lube(oil(pump(SAC(MOD-C Slot-Filler)(MOD-C Instance (ol o2 03))(MOD-C Instance (pl p2 p3))(MOD-C Instance (sl))SEM-C --> SLOT-NAME TABLE(SEM-C Function))(SEM-C Working-Substance))(SEM-C Machinery))(SEM-C Machinery))(Function(Machinery(Working-SubstanceINSTANCES:function):part-of :components :location):working-substance);;; SAC lube oil pump(setq p3 (make-instance %pump':part-of 'los2':working-substance '(OIL .
03)));;; SAC lube oil(setq 03 (make-instance %working-substance':function 'LUBE));;; SAC lube oil system(setq los2 (make-instance %system':part-of 'sl));;; SAC(setq sl (make-instance %systemFigure 5.
Fragments of data used by the parser of nominal  compounds.The two most often used reduction rules are:(1) instance + instance--> instance(2) slot-filler + instance --> instanceIn (1), the set of model instances for the result consists of those instances of the secondconstituent which can be linked through some path in the model  to some instance of  the first93constituent.
In (2), the resulting instances are those instances of the second constituent whichhave a slot whose filler may be matched with the first constituent.
The types of linkstraversed in the search (in the first case) or the checked slots (in the second case) are afunction of the semantic lass (SEM-C) of the first constituent.
This function assigns to eachsemantic lass a set of slot names (see SEM-C - -> SLOT-NAME TABLE in Fig.
5).Let us illustrate the way the interpreter works with an example.
Fig.
6 shows the trace ofparsing SAC lube oil pump.
We enclosed State Vectors in square brackets; the lists delimitedby curled brackets represent (from left to right): the Word List, the Forest, and the List ofReferents.
The words are represented by numbers; the names ~1, p2, p3, ol, ...) are modelinstances taken from the dictionary (comp.
Fig.
5).
We analyze the words from right to left.We start with pump.
We remove it from the Word List, find its definition in the dictionary(Fig.
5), and applying a rule not shown above, create the new State Vector (Fig.
6, firstvector above the compound).
The next word is oil.
Now, two reduction rules are applicable:the same one we used for pump - resulting in the left branch on Fig.
6 and rule (1) above.
Toapply rule (1), we first find in the dictionary that oil is of class Instance and names theinstances (ol o2 o3).
Next, we try to find out whether any of these instances may be linked toany of the (pl p2 p3).
To do this we take the semantic class of oil from the dictionary (Fig.5): Working-Substance.
Then we check in the SEM-C - -> SLOT-NAME TABLE (Fig.
5)which slot names we should consider - the only candidate in this case is :working-substance.Finally, we consider each of the instances (pl p2 p3) and check the fillers of their :working-substance slots.
In Fig.
5 we show only the instance p3 (the instances pl and p2 are similar).For p3 we indeed find that it can be linked with one of the considered candidates (namelywith o3) through the :working-substance link.
Thus, we include p3 into the resulting set.
Asimilar analysis for pl and p2 would result in including them into the resulting set as well.Hence, the State Vector in the right branch in Fig.
6 has (3 4) as a partial parse tree whoseleaves, when combined into one constituent, refer to the set (pl p2 p3).
The analysis at theother points of the trace is similar.
(SUCCESS)\[{} {((I) ((2 3) (4)))} {(p3)}\]\[{} {(1) ((2 3) (4))} {(sl) (p2 p3)}\]t\[{1} {((2 3) (4))} {(p2 p3)}\]\[{1} {(2 3) (4)} {(o2 o3) (pl p2 p3)}\](SUCCESS)\[{} {((1) ((2 3) (4)))} {(p3)}\]l\[{1} 1((2 3) (4))} {(p2 p3)}l\[{1 2} {(3) (4)} {(oi 02 03) (pl p2 p3)}\]\[{1 2 3} {(4)} {(pl p2 p3)}l\[{1 2 3 4} {} {}\](DEAD END)\[{12} 1(3 4)} {(pl p2 p3)}\]SAC lube  o i l  pump(1) (2) (3) (4)Figure 6.
The parsing trace for the nominal compound SAC lube oil pump.94\[Grishman 1986\] discusses how to treat modifiers describing the state of a part, such ascracked or sheared, and also how to handle some ambiguities in conjoined noun phrases (foran example see the beginning of this section).6.
Future WorkThe immediate next step in the development of our system is to extend the coverage of theinterpreter of nominal compounds to full-fledged noun phrases (including relative clauses,prepositional phrases and conjunctions).
Then we plan to work on the interpretation ofclauses.
It should be possible to define the semantics of most verbs from the domain asoperations on the equipment model.
Finally, to obtain a robust system, it will be necessary todevelop components for finding temporal and causal inks between sentences in the text.
Asis known from previous research (e.g.
\[Charniak 1977\]), success in this area depends mainlyon the quality of solutions to the knowledge representation a d inference problems.
As weindicated in section 2 of this paper, one of the possible approaches to inference mechanisminvolves the use of a simulation model.The initial motivation for the system has been the conversion of a stream of messages to adata for subsequent querying, summarization, and trend analysis.
However, the use of adetailed equipment model, similar to that employed in simulation systems (e.g.
STEAMER\[Hollan 1984\]), suggests that it may be equally useful as an interface for such systems.AcknowledgementThis research was supported in part by the Defense Advanced Research Projects Agencyunder contract N00014-85-K-0163 from the Office of Naval Research.References\[Bobrow 1977\] Bobrow, D. and Winograd, T. An overview of KRL - a knowledgerepresentation language.
Cognitive Science, 1977, 3-46\[Charniak 1977\] Charniak, E. Inference and knowledge in language comprehension.
InMachine Intelligence 8, D. Michie, Ed.
American Elsevier, New York, 541-574\[Finin 1986\] Finnin, T. Nominal compounds in a limited context.
In Analyzing Language inRestricted Domains, R. Grishman and R. Kittredge, Eds.
Lawrence Erlbaum Assoc.,Hillsdale, NJ\[Grishman 1986\] Grishman, R., Ksiezyk, T., and Nhan, N.T.
Model-based analysis ofmessages about equipment.
Submitrted to the AAAI-86\[Hollan 1984\] Hollan, J., Hutchins, E., and Weitzman, L. STEAMER: an interactiveinspectable simulation-based training system.
AI Magazine, Summer 1984, 15-27Reference Guide to Symbolics-Lisp, Symbolics, Cambridge, MA, 198495
