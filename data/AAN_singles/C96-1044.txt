Extended Dependency Structures and their Formal InterpretationMarc Dymetman Max CoppcrmanRank Xerox  Research Centre6, there in  de Maupertu is ,  Mey lan  38240, France{ dyme tman, copperman} @xerox.
frAbstractWe describe two "semantically-oriented"dependency-structure formalisms, tJ-formsand S-forms.
U-forms have heen previouslyused in nmchine translation as interlingualrepresentations, hut without being providedwith a formal interpretation.
S-forms, whichwe introduce in this paper, are a scoped vetsion of U-fnrms, and we define a composi-tional semantics mechanism for them.
Twotypes of semantic composition are basic:complement incorlgoration and modifier in-corporation.
Binding of variables is done attire time of incorporation, permitting tnttch\[lexibility in composition order and a simpleaccount of the semantic effects of permutingseveral incorporations.1 INTRODUCTIONU-fi)rms (Unscoped ependency form) arc a represen-tation formalism which has been used (under a differ-ent name) as tire basis for the intermediary language inthe machine mmshttion system CRITFER (lsahelle etat., 1988; l)ymetman, 1992; Isabelle, 1995).
U-formsaccount for two central aspects of linguistic structure:predicate-argument relations and headedness (comple-ments vs. modifiers), and so form a middle ground be-tween a "semantic" and a "syntactic" representation.This, combined with their formal simplicity, accotmtsfor much of the popularity of U-forms or related for-malisms - -  such as the semantic and deep syntacticrepresentations used in Mel'cuk's Meaning-Text The-ory (Mel'+nk, 1981) - -  in applications uch as \[nit-chine translation and text generation.Although t J-fotn~s are strongly"meaning-oriented" their interpretation is never madeexplicit but is left to the computational linguist's intu-ition.
This has two consequences:?
Operations performed on U-forms and relatedformalisms cannot he controlled for semantic va-lidity.
So, for instance, it is comnlon practice todeline graph rewriting rules on these representa-tions which are believed to produce semanticallyequivalent expressions.
Without he check of for+real interpretation, these rtdes may work in somecases, hut produce wrong results in other cases.So for instance, a rule rewriting (the representa-tion of) "John's salary is $25000 higher this yearthan last year" into "John's salary was $25000lower last year than this year" would seem in-tuitively valid until one considered the case of"John's salary is 50% higher this year than lastyear", where it does not work any rnore.?
U-forms are not directly adapted to applicationsputting emphasis on denotational semantics andformal reasoning, like for instance some lmturalhmguage generation systems in well-formalizeddomains (l-htang and Fiedler, 1995; Ranta, 1995;I+evine, 1990), see also (Alshawi, 1992).A basic obstacle to providing aformal interpretationfor U-forms is the fact that these representations leavethe relative scopes of dependents implicit.
The S-formrepresentation (Scoped dependency form), which weintroduce here, is an extension of U-form notationwhich makes scope explicit, by allowing dependentsto be ordered relative to one another.
Dependents(complements or modifiers) c~m move fi'eely relativeto one another in the S-form structure, under certainbinding-site constraints+We then go on to provide it compositional interpre-tation mechanism for S-forms.
Free vmiahles (gener-alizations of the argt, arg._,, atrg:+ annotations of stan-dard dependency formalisms) are used to connect anargutnent to its binding-site inside a predicate.
Bind-ing of variables is done at tire time of incorporation,permitting much llexibility in composition order andat simple account of the semantic effects of permutingseveral incorporations.
This liberal use of free wlri-ables is contrasted to the approach of Montague gram-mar, where the requirement that semantic expressionsentering into at composition m'e closed (do not contain255free vmiables) leads to a certain rigidity in the order ofcomposition.Two kinds of senmntic omposition are basic: coin-plement incorporation, whine the complement fills asemantic role inside the head, and modifier incorpo-ration, where the head fills a semantic role insidethe modifier.
The mechanism of actually derivingthe semantic translation of the composition fi+oln tilesemantic translations of its two components i han-dled through a list of type-sensitive composition rules,which determine the action to be taken on the basisof the component types.
The flexibility of the ap-proach is ilhlstr;.lted on an example involving propernames, quantitied noun phrases, adverbials and rela-tive clauses.2 U-FORMSFormally.
U-ferms are nnordered labelled n-ary treessuch as tile one shown in Fig.
l, corresponding to tilesentence: (S l) "John does not like every woman hatedby Peter".like //~ "\~.<s/ /  2jolTn woman m>t+ le t / / "k  -'~ /et'et+v hatepeterlVigttre 1' A U-form.The edge htbels me members of the set {det, 1,2, 3,.... - l , -2 .
-3 .... }, alld correspond either to determin-ers (label "det') or to argument positions relative to apredicate node (other labels).The U-form of Fig.
1 expresses three predicate-argument relations among the nodes:like not hatejohn ll.
'oma#l like peler womalgFigure 2: Predicate-argument relations in a U-form.In order to extract he predicate-argument relationsencoded into tile U-form, one needs to apply the fol-lowing "'rule".
Let's notate (A,L,B) an edge of thetree, where A is the upper vertex, B tile lower ver-tex, and L the edge label.
With each node A in tiletree, one associates its set of predication edges, thatis the set PAl of edges of the form (A,+i.X) or (X.-i,A).
One then considers tile predication tree T i madeby forming the collection of edges (A,LX) where I,is positive and either (A.L,X)  or (X.inverse(L),A) isa predication edge of A.
Each predication tree de-notes a predicate-argtnnent rehition among IJ,+fornlnodes.
So for illstance, the tree 'l'l~;u<~ is lt/inled byforming tile edges (hate, l,peter) and (hate,2.woman),and this corresponds to the predicate-argunlent rehi-tion tlate(peter.woman).WELL-FORMEDNESS CONI i lT IONS (iN U-FORMS In order to be well-formed, a U-iorm Uf:has to respect ile following condition.
For ;.lily nodeA of L!F.
the predication tree T i must be such that:1.
\[No hoh, s comliti(m\] If (A.i.B) is an edge of 1" i.then for any number j between I and i, T.I nlttstcontain a node of form (A,i,C)+2.
\[No rdpe'tilioll comlimml No two edges of T.t canhave tile salne label i.MORE ON U-FORMS Negative labels are a devicewhich permits to reconcile the notalien of predicate-argnnlenl structnre with the notation of syntactic de-pondoilcy, So, in the i..\]-fornl considered above, while"semantically" tile 'wellqan' node is an ;.irglnl\]oni oftile "hate" node, "syntactically" tile hate'  node is a de-pendent of tile 'woman' node.
Cases such as this one.where there is a conflict between predicate-argumentdirectionality and dependency directionality are notated ill the U form throngh negative labels, and cor-respond tO #llodifie#',','.
Cases where tile directionality isparallel correspond to complement.s.When used as interlingual representations in ma-chine translation systems, U-forms have several ad-vantages.
The first is ttmt they neutralize certain de-tails of syntactic structure that de not carry easily be-tween languages.
For instance.
French and English ex-piess negation in syntactically different ways: "Racheldoes net like Claude" vs.
?
'Rachel n'aime pas Claude":this difference is neutralized in the U-fornl representa-tion, for both negations are expressed through a singlenegation predicate in the U-feral.A second advantage is that they represent a goodcompromise between paraphrasing potential and se-mantic precision.
So.
for instance, in tile CRITTEI,Isystem, the three sentences:John does not like every woman that Peter hatesJohn does not like every woman hated by PeterEvery woman whom Peter hates is not liked by Johnwould be assigned the U-form of Fig.
1.
On the otherhand, the sentence:256Peter hates every woman that John does not likewould be assigned tile t!-form or' f:i~,.
3, which isdifferent from the previous U-form, although tilepredicate-argument rehitions are exactly tile sanie inhoth cases.\]Idt{'1/ /  "~ 2/ \,/)('tg'r WOllldll-<Q d/  \~"every like ,/\<.jolm m~tFigure 3: A dilf0renl t J-form()he can take advantage of such paral)hrasing poten-tial in cerlain cases of synlaclJc divergence belweenlanguages, l:or instance, French does not have a syntactic equivalent o the dative-lnoven/etlt + passiveconfiguration o1:Rachel was given a book by Claudeso that a direct syntactic translation is not possible.However, at tile level of U-form, this sentence is equiv-alent to the French sentence:Claude a donne un livre ~t Racheland this equivalence can he exploited it) provide atranslation of the first sentence.One serious problenl with 1.\].
\[ornis, however, is tilatthey do not have unainbiguous readhigs in cases wherethe rehliive scopes of constituents can result in clifl'er-ent semantic ii~terpretations.
So, in the case of senfence (S l), tile two readings: "it is not the case thaiJohn likes every woman hated by Peter", and 'Lh)tl.ndislikes every woman thai Peter hates" are not distin-guished by tile t l-l:oi+nl Of l"ig+ 1,3 S-FORMSINTI, I() I)UCIN(; SC() I 'E  Lefs consider the trecrepresented in Iqg.
4.The only differeiice hetween this tree aml the l,J-form of l:ig.
l is thai the nodes of our new tree areconsidered ordered whereas they were considered tin-ordered in the I!-lorm+ The convention is now that(tepetlttent sister nodes are interpreted :is having ttil'-l\]2retlt scopes, with llarrower scope correspondillg to aposition iilore It) tile right.The tree of l:'ig.
4 can he glossed in the followingway:like/ / .
- J  !
2t.jolm ~u~t W()lll(lfl(q'dl'V \]lg.ll("lT,#H't"I:igure 4: Inhoducing scope hy ordering the nodes.John, it is not the case that he likes every woman that Pe+ter hatesI f we consider tile six l)mmulalions of lhe nodes un-der like.
we can produce six differenl scopings.
Because John teleis to an individual, not a quantified NP.these six pernmtations really corrcsl)ond to only thetwo interl)relaiiens given ahove.
The tree of Fig.
4corresponds to the lirst of Ihese interpretations, whichis the preferred interpretation Ik)l sentence (S I).Our discussion of scope being represented by nodeorder has been infornml so far.
In order to nlake it\['Oi'lllal, we  need to encode  our  representat ion  into abinary-tree fornmt ell which a compositioiml senlantics can he delined.
To tie that.
in a lirst step we rephtcethe at'gunlent nunibers of l:ig.
4 hy exl)lici!
argumenthaines; i l l  a seCol ld  slep we encode the resulting ordered mary free inh)a himuy forumt which makes ex-plicit the order in which dependents are incorlmratedinlo their head.S-I"ORMS Consider tile mary tree of Fig.
4.
For anynode A in this tree, take the set of predication edgesassociated with A, that is the set of edges (a ,+i ,B , )and (Bi, i,A).
By renaming each such node A intoA(XI .... X,+).
where X I ..... X, are hesh identiliers, andby renaming each such htbel +i (resp.
+i) into +X,:(resp.
-X,:), one obtains a flew tree where argunmnlnumbers have been replaced by argument haines.
\[:orinstance the previous representation now becomes tiletree of l"ig.
5.This representation is called a scopeU depemh'm3',lotto, or Sqbrm.B INARY TREE FNCODING OF S-FORMS:  B-FORMS In order to encode tile ordered n-ary treeinto a binary tree, we need to apply recursively thetransfotnmtiou ilhlstrated in Fig.
6, which consists informing a "head-line", projecting in a north-west di-rection from tile head 11, and in "attaching" to this line"dependent-lines" D~, D2 ..... 1),,, with l-)l tile right-257like(ll,12)john not(nl ) woman /\+evetlv hate(h l,h2)I +hlpeterFigure 5: An S-form.most dependent (narrowest scope) and D~, the leftmostdependent (widest scope) in the original tree.
;\[l,n I+ ~\z \ ,  I,I , /  \ "\,l)n D2 151\] 511/ / l \ ,N\\] +I\]/i "1 "\'N\/ /  ,,/ /~'\\1,2// / ) \ ,/ /  I l , /  .
.
.
.
,,D2 1 "\D1Figure 6: The translbrmation between S-forms and B-forms.Applying this encoding to our example, we obtainthe binary tree of Fig.
7, which is called a B-form.The B-form makes explicit the order of incorpora-tion of dependents into the head-line.
By permutingseveral dependent-lines along their head-line, this in-corporation order is changed and gives rise to differentscopings.S-forms and B-forms are completely equivalentrepresentations.
Cle~ly, the encoding, called the S-form/B:fi~rm encoding, which has just been defined isreversible.
The S-form is more compact ,and makes thedependency relations more conspicuous, whereas theB-form makes the compositionality more explicit.WELL-FORMEDNESS CONDIT IONS ON B-FORMS AND S-FORMS Stm'ting fromthe U-formand enriching it, we have informally introduced thenotions of S-form and B-form.
We now define themformally.We start by giving a rect, rsive definition of IBFs (in-complete B-forms), that is, B-forms which may con-tain unresolved flee variables.
We use the notation((D,Label),H) the labelled binary tree obtained by tak-ing H as the right subtree, D as the left subtree, andby labelling the left edge with Label.
We ,also use thenotation fv(IBF) for the set of the free variables in IBF.DEFINITION OF INCOMPLETE B-FORMSnot(hi) + l f .~  ~N,.d~ tev man like(ll, 12)peter hate(h l,h2)Figure 7: A B-form.1.
A node N of the form Pmd(xl,..,xn) is an IBFwith the set of free variables fv(N) = { x I ,..,xn };2.
If D and H am IBFs, fv(D) and fv(H) ale disjoint,and x ~ fv(H) then H'=((D,+x),H) is an IBF withfv(ll ') = fv(D) U fv(H) \ {x};3.
If D and H are 1BFs, fv(D) and fv(H) ,are disjoint,and x C fv(D) then H'=((D,-x),H) is an IBF withfv(H') = fv(D) U fv(H) \ {x};4.
If D and H are IBFs, and fv(D) and D(H) are dis-joint, then H'=((D,det),H) is an 1BF with fv(H')= fv(D) U fv(H).DEFINITION OF B-FORMS A B-form is an IBFwith an empty set of free variables.The notion of S-form cart now be delined throughthe nse of the S-form/B-form encoding.DEFINITION OF S-FORMS A S-form is an o fdemd labelled n-ary tree which can be obtained from aB-form through the inverse application of the S-form/B-form encoding.It can be easily verified that the representation ofFig.
7 is indeed a B-form, and, consequently, the rep-resentation of Fig.
5 is a valid S-form.
More generally,it can be easily verified that enriching a U-form byordering its nodes, and then replacing argument vari-ables by argument names always results in a valid S-form)tThe converse is not true: not all S-forms can be ob-tained in this way from a U-form.
For instance, there exists aS-fonn corresponding to the prefelTed reading for "Fido vis-ited most rashcans on every street", which has "every street"2584 THE INTERPRETATION PROCESSWe now describe the interpretation process on B-fl)rms.lnlerpretation proceeds by propagating semantic trans-lations and their types bottom-up.The first step consists in typing the leaves of thetree, while keeping track of the types of fl'ee variables,as in Fig.
8.+/(  / \,,/ 5", / / ~ \ \john."
e '+//"~ "" ",,, ?
\.
.
t i l l : t}  / /  \ \ttot(*t 1): t // "/<,det/" \ ,/ \/ h2 / \ \ ,el'crY.'
?i \] +l) -+(u-~t )~t  / "\" \./ \\,+h;/" ' , , .
,  \\,/ ""  ",,, {hhe, h2:c}peter: e haleChl,h2).'
t" \ \ ,"-.," \ ,\}voDt(in: U ~1"\,,, {tlm, 12:e}like(ll,121: !Figure 8: Typing the leaves.
The flee wu'iables andtheir types are indicated in brackets.The types given to the leaves of the tree are the usualfunctional types formed starting with e (entities) and t(truth values).
In the case where the leaf entity cot>tains flee variable arguments, the types of these freevariables are indicated, and the type of the leaf takesinto account he fact that these free variables have al-ready been included in the functioned form of the leaf.Thus hate(h l,h2), which can be glossed as: "hi hatesh2", is given type t, while hl and h2 are constrained tobe free variables of type e.VARIABLE-BINDING RULES According to thewell-formedness conditions tot B-forms, a comple-ment incorporation ((D,+x),It) is only possible whenH contains x among its fi:ee variables; the "syntac-tic dependent" D is seen as semantically "filling" theplace that x occttpies in the +'syntactic head" H. In thesame way, a modifier incorporation ((D,-x),H) is onlypossible when D contains x among its fiee wuiables;outscoping "most trashcans", and which is not obtained froma U-form in this simple way.
However, thet+e exists a map-ping fiom S-forms to U-h>rms, the scope-fi)rgetting map-ping, which permits to deiine equiwtlence chtsses among S-torms "sharing" the same U-form.
This relation between S-R~rms and Uqbrms can be used to give a (not>deterministic)lbrmal interpretation to U-forms, by considering the inter-pretations of the various S-forms associated with it (see thetechnical report eolnpanion to this paper.
)in this case the "syntactic" head I I is seen as seman-tically "filling" the place that x occupies in the "syn--tactic dependent" D. (This difference corresponds tothe opposition which is sometimes made between syn-tactic and semantic heads and dependents: comple-ments are dependents both syntactically and semanti-cally, while modiliers are syntactically dependents butsemantically heads.
)In order to make formal sense of the informal no-tion "filling the place of x in A.,," (where the notationA,: means that A contains the free variable x), we in-troduce the variable-binding rules of Fig.
9.cotnllh, ntenl tntldilict dot c t L\]IiI/CIi\[iC~)l i)Ol \[it{t,ll illCt )t pol \[t\[iOll { lit'o\[ pOl ~It iOll/ 7 \D' \ [ \ [ '  I)', I\[' I)' 1\['dot / / \ ] kl)' .\x.l \[i+ Ax,I)'~ H' IY H'Figure 9: Variable-binding rules.
D' and tl' con'e-spond to the senmntic translation of the subtrees rootedin 1)and 11 respectively.These rules tell t,s how to "get rid" of the free vail-able being bound during complement or tnodifier in-corporation, amely by forming the abstraction ,Xx.A,:before actually performing the semantic ompositionbetween tile dependent and tile head.
For complete-ness, detemainer incorporation, which does not inw)lvevmiable binding, is given along with complement andrnodifier incorporation.Two things should be noted about this way of "de-laying" variable-binding until the relevant dependentis incorporated:?
Suppose that we had bound the variables appear-ing in the head predicate locally, that is to say,that, in the style of Montague grammar (Gamut,1991 ), we had written )d21 l.like(l1,12) instead oflike(11,12), and so forth, in Fig.
7.
Then each in-corporation of a dependent into the "head-line"would have changed the type of the head; thus'not' would have had to combine either with ahead of type e--+e~t, or e--t, or t, depending onits scope relative to the other dependents; withthe scheme adopted here, the type of the head re-nmins invariant along the head-line;?
tinder the same hypothesis, the incorporation ofthe second mgnment first and of the first argt,-ment second would have been much simpler than259the reverse incorporation order, and some mech-anism would have had to be found to distinguishthe two orders.
Then permuting the relative orderof two dependents along the head-line - -  corre-?
O ' "" spondm~ to dttferent scope poss ib i l i l ies- -  wonldhave had complex computational conseqttences+In the scheme adopted here, these cases are han-dled in a t in i forna way.The way free wu'iables are used in our scheme issomewhat remi n i scent of the nse ol:.vvitla?'li?'
variableshe,, in Montague glanlliiar.
Montague gl+anlmar hitsthe general requirement that only closed lambda-tetms(lanibda terms containing only bound variables) arecomposed together.
This requirement, however, is di f-ficult to reconcile with the flexibility needed for han-dling quantilier scope ambiguities.
Syntactic variablesare zt device which pertnit to "'quantify Jim'>" clausesat an arbitrary time, hypassing the normal functionalcompc~sition of lambda-terms, which requires a strictmanagement of incorporation order.
In our scheme.by contrast, this secondary mechanism of Montagueo\]ammar is graduated to a central position.
Compo-sition is always done between two lambda-terms oneof which at least contains a free variable which getsbound at the time of incorporation.TYPE SENSITIVI~ COMPOSIT ION R.UI,ES Ifwe apply the vat+table-binding rules to the snbtreePH = ((peter,-hl),hate(hi,h2)) of Fig.
8, we lind thatwe mtisl compose the semantic transhttions peter and%h 1.hate(h I ,h2) in "con+lplement" (+) mode.
The litstftmction is of type e, while the second function is oitype e~t  (lor hate(hi,h2) is of type t, and hl of typee).ltow do we compose two such functions?
A first solution, in the spirit of Lambek calculus (Morrill, 1994)or of linear logic (Dah'ymple t al.. 1995), would tieto define a general computational mechanism whichwould be able, through a systematic discipline of type-changing operations, to "adapt" atttomatically to thetypes of the functions undergoing composition.Such mechanisms are powerful, but they tend to bealgorithmically complex, to be non-lncal, and also togive rise to spurious antbiguities ( uperficial variationsin the proof process which do not correspond to di ffer-ent semantic readinos) t "  "Here, we will prefer to use a less general tnecha+nism, but one which has two advantages.
First, it islocal, simple, and efficient.
Second, it is flexible attdcan tie extended to handle the semantics of sentencesextracted fiom a real corpus of texts, which it mighthe perilous to constrain too strongly fi'om the starcThe mechanism is the following.
We establish alist of acceptable "type-sensitive composition rules",which tell us how to compose two flmctions accordingto their types.
Such a (provisory) list is given be ow: e(e l )  compos?L?on(+,  L :T  >$, R:T ,  L (R) :S )(C2) compos iL ion(+,  L :e ,  R :e  >L, R (L ) : t )(C3) compos i t ion(deL ,  L:T-+>S, R :% B(R) :$ )(C4) comDos ig?on(  , L :T  >S, R :T ,  L IR ) :S )(C5) compos i t?on(  , L :e  >t ,  R :e  >t ,kx .R(x )  AL(?)
:e ->t : )The entries in this list have the following fornmt.The lflst argtuncnt indicates tile type of composition(++' fl)r complement incorporation.
"-" for modilier in-corl)orath'm.
"++let" for deter+miner incorporation): thesecond argument is of the Iklrln Lelt:l+eftTypc, whereLeft is the left translation entering the composition,and LeftTypc is its type: similarly, the second argu-ment Right:RightType corresponds to the right sub-tree entclin ~r~.
the composition: linallv+ the third atELl-,ment ~ives the resuh l,?,esuh:l,P, esultType of the compo-sition, where the notation A(B) has been used to indicate slandard functional application of function A onarguntent B. Uppercase letters indicate unifiable variahles.It may be remarked thai if, in these rules, we neglectthe functions themselves (1+eft, Right, Resnlt) and con.centrate on their types (l+eflType, RightType, Result +l'ype), then the rules can be seen as itnl)osin,,+ con-straints on what can count :is validly typed trees: theseconstrahlts can flow from nlother to daugthers as ,.veilas in the opposite direction.
Thus.
through these rules.knowing thai the head-line functions projecting l\]tlnl itverbal head must he of type t imposes ome constraintson wlmt are the possible types for the det)endents: thiscan be usefttl in partict, lar for constraining the types nfsemantically ambiguot, s lexical elements.If we now go back to our example, we have to con>pose in complement mode (+) the function peter, oltype e. with the ftmction th  I .hate(h I .h2).
of type e- - t .Consnlting the list of composition rules, we see thatthe only applicable rnle is (C2).
and that the result isAhl.hate(h l,h2) (peter) = hate(peter.h2), of type t.Now that we have the semamic translationhate(peter, h2) for the subtree Pit, we can compute thetranslation for the suhtree ((PH,-h2).woman).
By thevariable-binding rnle for modiliers, we need lirst toform the abstraction Xh2.hate(peter.lt2).
of type e~t .and compose it in '- '  mode with wonmn, of type e- - t .Consnlting the list of composition rules, we find thatthe only applicable rule is (C5).
and that the result ofthis application is Ah2.woman(h=)Ahate(l~eter, h=).
:e It is a matter for further esearch to propose principleslk)l" p loduc ing  such Ill\]ON.
SotllC t)t" them can be seen as spe-cial cases of general type-raising principles, others (such asC5) are necessary it one accepts that the type of intersectivcadjectives and restrictive relative clauses has to be e -t.:~Thc rule (C5) differs from the previous rules in ll~e listin that it introduces the logical connective A which does lintoriginate in functional material already present in either ofthe arguments.
A possible justilication for the rule.
however,260noHc~ cpvl,\h2 womamh2)/g~ateq~uh'rh2).M21ikclfl~h,,12))) I~.tl / / ' /  ('2 ~ , \ ,o f  cvelvfAh2 ~omo lib2 ,\halc(l)eh't h2 AI2 til, c II I2 )).
I/ .
/  \.
/ /  (:,/~.job.
: n l /  ~everv(Mt2.woman(h2)Ahal?ll~e&'rh2b\12.hketll.f2)t I ?
/IIOI(Izl): I /+:2/ x,,/ /"  \ \/<" ),l!cle~I.\h2 woma,fh2)/qtuteqJelel:h2).l'). "
le -H t ./7~;\\ \\del / / ' /  ~ \/ \ /il, e l l l l2 )  t/ / "  - - / /~\, \ I12.
woma ,( It 2 )/\hate@)etet: h2 ).
e .
It,s,~'t-~: l#  -\[)--(?'
.I)- -I \/ /~  hatcq:ete~:h2) t \ \\/ ~,\ M'Olll(Itl.
t' I/ /  R \/~'lt't c ftdle(hl./12J ll:igur?
10: B form interpretation, l"or "cvcry', we make use of the gcner;tlized quantil ier notationqmm l( n'.st ri cl i ou.SCOl)e ).Fhe process of semantic translalion tin>coeds in thisway bottom Ul-~on the B form.
The end restth is; shownin Fig.
10.AcknowledgmentsThanks to Alain l ,ecomtc and Frdddrique SegondfOl" COITIIllOIIIS ~111(1 discussions,ReferencesFliyan Alshawi.
editor.The M1T Press.1992.
771e ('o/'u lxmq',agu l:',qin?.J.
Barwise and R. (7oopcr.
1981.
(;ciumdizcd quantiiiclSand natural anguage.
Lingtdstic,s aml l%ilo,wy)hy..l.Mary I)ahymple.
John l.amping, l:omamlo ('.
N, Percira.and Viiay Saraswat.
1995.
A deductive ;.lccount of quatnili-cation in IA:(;.
In Makoto Kanazawa, (?hristopher J. l>iih3n,and l lemiette dc Swart, editors, OttaHti/ier,v.
lledtu'tion, aud("o/dext.
Cemcr (or the Study of I,anguagc ',llld hHor\]mttitm.Staiflord.
Call forrda.Marc I)yl/leln~an.
1992.
Transfiwmatious de grammaircsIogiqucs et rdvcrsibilitd on Traduction Autoinalique.
ThC's?is that it allows conferring 11!o "h\]atural" type e .t to an (in-tcrsective) adjc~ctivc such as "bhtck", or for a relative mod-i l id such as "'hated by peter", and also that there clots notseem to exist any good ic~tsOll why type composition sht)tddbc rcstricled Io "'fun?/iorutlly nmlching" types :rely.
Scmantic typt: coercions ab,,mnd in llatttral allgttagc, as ill tile caseof "glass elephant", short win", etc., and these require con>plcx ColllI}osilioll {}I}erations O11 tile elements collll',illcd.d'lkat.
\[Jniversitd .Iosqflll:ouricr ((h-cnoblc It.
(hcnoble.\] :I'~II)CC.I., T, 1:.
( hm\]tLI.
\[ 99 I. I,o,qic, l,anq, tta,'4c, and Memtin.q,.
~)ltune 2: hatct>;ional I,ogic and I.o~ical Graminar.
The \[hiversify ol Chicago Press.
(?hicago.Xia,mcmg l Iuang alld Attain l:icdler.
1995.
(k:l lcrali l lg mul.tilingual proofs.
In Richar,.I Kittrcdgc.
editor.
I, ICA/ WrJrk..LS'/Uy~ (m Multi/in,'4ual 7Ev/(;enuratio,, pages 5,1 63, August.Pierre Isabellc.
Marc l)ymetman, alld l?11iott Mackh)vilch.1988.
(?Rlq'TH).
: a translation system for agricuhural market reports.
In lhz~ceedings q/fi le /2th \[llh'rllcttioIIcll ('oll-fi, renc~, on ('onqmtatinmd lJng,istic,~, pages 261 266, I{u-dapesl, August.pierre \[sabelle.
1995.
Un mru/eh" linA, nistiq.u calc.la/)lepottr la trad.ctirm automatiqtte tfidirectiomlelle, F'h.D.
the-sis./lnivcrsitd e Momrdal.John l,evinc.
1990.
Pragina a l"lcxiblc bidircdional dia--logu?
system.
It\] t'roceeding,s, EiA, hl National ('on fi, renc'ernl Art~/k'ial Intelligence.
pages 964 69.Igor A. Mel'cuk.
1987. l)epem/encv Sw~ta.v: 77t,:,,:,,rv andPractice.
State University of New York Press.Igor Mel'(;uk.
1981.
Mcaninptext nl,,)dcls../our/la/Q/AIt-lhrol)olos,3.
10:27 62.Glyn V. Morrill.
1994.
'/~,/)e LoA, i ca /Grammar :  ('at<q, or ia /Logic q/Si~,s.
Kluwer Academic Pulflishers.
Dordrecht.I lolhmd.Aart/c Ranta.
1995.
\]ivl)e Theoretical C;rammar.
OxfordUniversity Press.261
