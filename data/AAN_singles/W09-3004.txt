Proceedings of the Third Linguistic Annotation Workshop, ACL-IJCNLP 2009, pages 27?34,Suntec, Singapore, 6-7 August 2009. c?2009 ACL and AFNLPBridging the Gaps:Interoperability for GrAF, GATE, and UIMANancy IdeDepartment of Computer ScienceVassar CollegePoughkeepsie, New York USAide@cs.vassar.eduKeith SudermanDepartment of Computer ScienceVassar CollegePoughkeepsie, New York USAsuderman@anc.orgAbstractThis paper explores interoperability fordata represented using the Graph Anno-tation Framework (GrAF) (Ide and Sud-erman, 2007) and the data formats uti-lized by two general-purpose annotationsystems: the General Architecture for TextEngineering (GATE) (Cunningham, 2002)and the Unstructured Information Man-agement Architecture (UIMA).
GrAF isintended to serve as a ?pivot?
to enableinteroperability among different formats,and both GATE and UIMA are at least im-plicitly designed with an eye toward inter-operability with other formats and tools.We describe the steps required to per-form a round-trip rendering from GrAF toGATE and GrAF to UIMA CAS and backagain, and outline the commonalities aswell as the differences and gaps that cameto light in the process.1 IntroductionThe creation of language data and linguistic anno-tations remains a fundamental activity in the fieldof language technology, in order to develop in-creasingly sophisticated understanding and gener-ation capabilities for the world?s languages.
Sub-stantial effort has been devoted to the creation ofresources for major languages, and new projectsare developing similar resources for less widely-used languages; the cost and effort of resource cre-ation, as well as the possibilities for linking multi-lingual and multi-modal language data, demandsthat resources and tools are reusable as well ascompatible in terms of their representation.
Var-ious representation standards and annotation toolshave emerged over the past decade and have con-tributed to some convergence in practice, but at thesame time, there has been growing recognition thatinteroperability among formats and tools, ratherthan universal use of a single representation for-mat, is more suited to the needs of the communityand language technology research in general.This paper explores interoperability for datarepresented using the Graph Annotation Frame-work (GrAF) (Ide and Suderman, 2007) and thedata formats utilized by two general-purpose an-notation systems: the General Architecture forText Engineering (GATE) (Cunningham, 2002)and the Unstructured Information ManagementArchitecture (UIMA)1.
UIMA and GATE are sim-ilar in design and purpose: both represent docu-ments as text plus annotations and allow users todefine pipelines of processes that manipulate thedocument.
However, there are some differencesin implementation and representation format thatprohibit direct exchange of data and annotationsbetween the two.The Graph Annotation Framework (GrAF) (Ideand Suderman, 2007) is intended to serve as a?pivot?
to enable interoperability among differentformats for data and linguistics annotations andthe systems that create and exploit them.
In thispaper, we describe the steps required to performa round-trip rendering from GrAF to GATE andGrAF to UIMA CAS and back again, and outlinethe commonalities as well as the differences andgaps that came to light in the process.
In doingso, we hope to shed some light on the design andimplementation choices that either contribute toor impede progress toward interoperability, whichcan feed future development.2 BackgroundA handful of formats for linguistic data andannotations have been proposed as standardsover the past ten years, including AnnotationGraphs (AG) (Bird and Liberman, 2001), and,1http://www.oasis-open.org/committees/uima/27most recently, the Graph Annotation Framework(GrAF) (Ide and Suderman, 2007).
UIMA?sCommon Analysis System (CAS) also provides a?common?
way to represent annotations so thatthey can be shared and reused among UIMA an-notator components.Annotation Graphs were introduced primarilyas a means to handle time-stamped speech data, inlarge part to overcome the problem of overlappingannotations that violate the strict tree structure ofXML-based schemes.
However, AGs are limitedby the inability to represent hierarchical relationsamong annotations (as, for instance, in a syntaxtree).
AGs are used in GATE to represent standoffannotations.GrAF has been developed by the InternationalStandards Organization (ISO)?s TC37 SC4, as apart of the Linguistic Annotation Framework (In-ternational Standards Organization, 2008).
GrAFprovides an XML serialization of an abstract datamodel for annotations that is intended to serve asa ?pivot?
for transducing among user-defined andtool input annotation formats.
GrAF is intended tofunction in much the same way as an interlinguain machine translation: a common, abstract con-ceptual representation into and out of which user-and tool-specific formats are transduced, so thata transduction of any specific format into and outof GrAF accomplishes the transduction betweenit and any number of other GrAF-conformant for-mats.
GrAF is currently an ISO Candidate Draft.The UIMA framework is a data managementsystem that supports pipelined applications overunstructured data.
UIMA was originally de-veloped by IBM and is currently under furtherdevelopment by an OASIS technical commit-tee2.
Apache UIMA3 is an Apache-licensed opensource implementation of the UIMA specificationbeing developed as an Apache incubator project.UIMA?s Common Analysis System (CAS) is usedto describe typed objects (annotations) associatedwith a given text or other media, upon which pro-cessing modules (?annotators?)
operate.2.1 Annotation modelsEach of the formats described above is based onsome model of annotations and their relation tothe data they describe.
The AG model consists ofsets of arcs defined over nodes corresponding to2http://www.oasis-open.org/committees/uima/3http://incubator.apache.org/uima/index.htmltimestamps in primary data, each of which is la-beled with an arbitrary linguistic description thatapplies to that region.
Multiple annotations overthe data produce multiple arcs; there is no provi-sion for arcs associating annotations.GrAF defines the regions to be annotated in pri-mary data as the area bounded by two or more an-chors.
The definition of anchor and the numberof anchors needed to define a region depends onthe medium being annotated.
The only assumptionthat GrAF makes is that anchors have a natural or-dering.
For textual data GrAF uses character off-sets for anchors, and two anchors bound each re-gion.
Regions serve as the leaf nodes of a directedacyclic graph.
Annotations in the form of featurestructures are associated with nodes in the graph,including nodes associated with both regions andother annotations, via edges in the graph.
GrAFcan represent common annotation types such ashierarchical syntax trees by allowing, for exam-ple, a sentence annotation to have edges to con-stituent annotations such as NP, VP, etc.
As op-posed to AGs, annotations typically label nodesrather than edges in GrAF, although labeled edgesare allowed, and the information comprising theannotations is represented using feature structuresrather than simple labels.The underlying model of UIMA CAS is simi-lar to GrAF?s, due to its hierarchical type systemand the use of feature structures to represent anno-tation information.
In fact, the GrAF model, con-sisting of a directed acyclic graph whose nodes arelabeled with feature structures, provides the rele-vant abstraction underlying UIMA CAS.
In prin-ciple, then, annotations represented in GrAF andUIMA CAS are trivially mappable to one another.The same is not true for AGs: in GrAF, annota-tions can be directly linked to other annotations,but in the AG model annotations are effectively in-dependent layers linked to the primary data.
As aresult, while it is possible to ?flatten?
a GrAF rep-resentation so that it can be represented as an AG,it is not possible to take the round trip back intoGrAF without losing information about relationsamong annotations.
An AG can, of course, alwaysbe represented in GrAF, since independent graphslayered over data (possibly with shared anchors inthe data) are valid GrAF structures.283 GrAF?
UIMA?
GrAFConversion of a GrAF data structure into UIMAinvolves generating (1) a UIMA data structure (aCAS), (2) a UIMA type system, and a specificationof type priorities.The CAS consists of a subject of analysis (sofa),which is the data (in our examples here, a text) it-self, together with its annotations.
The CAS XMLrepresentation of the annotations is very similar tothe GrAF XML representation: each annotation isidentified by its start and end location in the dataexpressed in terms of virtual nodes between eachcharacter in the data, where the position before thefirst character is node 0.
The conversion of GrAFanchors to UIMA indexes is therefore trivial.3.1 UIMA Type SystemsA UIMA type system specifies the type of datathat can be manipulated by annotator components.A type system defines two kinds of objects; typesand features.
The type defines the kinds of datathat can be manipulated in a CAS, arranged in aninheritance hierarchy.
A feature defines a field,or slot, within a type.
Each CAS type specifiesa single supertype and a list of features that maybe associated with that type.
A type inherits allof the features from its supertype, so the featuresthat can be associated with a type is the union ofall features defined by all supertypes in the inher-itance tree.
A feature is a name/value pair wherethe value can be one of UIMA?s built in primitivetypes (boolean, char, int, etc.)
or a reference toanother UIMA object.
UIMA also allows featurevalues to be arrays of either primitive types or ar-rays of references to other objects.UIMA defines a top level type uima.cas.TOPwhich contains no features and serves as theroot of the UIMA type system inheritance tree.The root type uima.cas.TOP is the supertypeof uima.cas.AnnotationBase, which is the super-type of uima.tcas.Annotation, which in turn isthe supertype for org.xces.graf.uima.Annotation.All UIMA annotations generated by GrAF useorg.xces.graf.uima.Annotation as their supertype.Note that the UIMA type hierarchy is strictly an is-a hierarchy; for example, there may be an annota-tion type pos with subtypes penn pos, claws pos,etc., indicating that each of these annotations area kind of part of speech annotation.
The hierar-chy does not reflect other kinds of relations suchas the relation between a ?lemma?
annotation anda ?pos?
annotation (i.e., a lemma and a pos aretypically companion parts of a morpho-syntacticdescription, but neither one is a morpho-syntacticdescription), or constituency relations in syntacticannotation schemes.The GrAF Java API provides a Java class thatgenerates a valid UIMA type system given one ormore GrAF objects.
The type system is generatedby iterating over all the nodes in the graph and cre-ating a new type for each kind of annotation en-countered (e.g., token, sentence, POS, etc.).
Fea-ture descriptions are generated for each type at thesame time.One drawback of deriving a type system auto-matically is that some of the power of UIMA typesystems is lost in the conversion.
For example,in the process of conversion, all feature values areassumed to be strings, even though UIMA allowsspecification of the type of a feature value.
Sincein GrAF, feature values have been serialized fromthe contents of an XML attribute, all feature valuesare represented internally as strings; to convert afeature value to any other representation would re-quire that GrAF have some external knowledge ofthe annotation format being deserialized.
There-fore, any type checking capability for feature valuetypes in UIMA is lost after automatic generationof the type system.
Similarly, it is not possibleto determine a supertype for an annotation if it ismore specific than org.xces.graf.uima.Annotationfrom the information in the GrAF representationalone, so in effect, it is not possible to deriveany meaningful type hierarchy without additionalknowledge.
For example, it is not possible to in-clude the information in the type system descrip-tion that penn pos and claws pos are subtypes ofpos since this information is not represented in thegraph.
Even in cases where this kind of informa-tion is represented in the graph, it is not retriev-able; for example, FrameNet annotation includesa grammaticalFunction annotation whose childrenare elements such as subject, object, etc.However, there is no way to determine what theparent-child relation is between nodes without apriori knowledge of the annotation scheme.Without a source of external knowledge, GrAFdoes not attempt to make any assumptions aboutthe annotations and features in the graph.
How-ever, all of these problems are avoided by pro-viding an XML Schema or other source of infor-mation about the GrAF annotations that can be29used when generating the type system.
The XMLschema can specify the type hierarchy, data typesand restricted ranges for feature values, etc.
(see,for example, the XCES (Ide et al, 2000) schema isused for the data and annotations in the AmericanNational Corpus (ANC)4.
)3.2 UIMA Views and IndexesA UIMA CAS object may contain more than oneview of the artifact being annotated; for example, aCAS may contain an audio stream as one view andthe transcribed text as another.
Each view containsa copy of the artifact, referred to as the subject ofanalysis (sofa), and a set of indexes that UIMA an-notators (processing modules) use to access data inthe CAS.
Each index is associated with one CAStype and indexes that type by its features?that is,the features are the keys for the index.The indexes are the only way for UIMA annota-tors to access annotations in the CAS.
It is neces-sary to generate these indexes, which are not pro-vided automatically within UIMA.
The GrAF JavaAPI provides a module that generates the indexesat the same time the it generates the type systemdescription.
Since we do not know, and make noassumptions about, which annotations might berequired by other annotators, all annotations areindexed by all of their features.3.3 Type PrioritiesType priorities in UIMA are used to determinenesting relations when iterating over collections ofannotations.
That is, if two annotations have thesame start and end offsets, then the order in whichthey will be presented by an iterator is determinedby their type priority; the annotation with the high-est priority will be presented first.
Type prioritiesare specified by an ordered listing of annotationtypes, where order determines priority.
In GrAF,annotation nesting is implicit in the graph itself.To generate an explicit type priority specifica-tion for UIMA we must first obtain a list of allannotation types that appear in the graph and thensort the list based on the order they are encoun-tered during a a depth first traversal of the graph.During the depth first traversal a N x N precedencematrix is constructed where N is the number of an-notation types in the graph.
If precedes[A,B] ==true then A was encountered as an ancestor of Bin the depth first traversal.
If precedes[A,B] ==4http://www.anc.orgprecedes[B,A] == true then it is assumed that theannotation types have the same priority.
Once thelist of annotation types has been collected and theprecedence matrix constructed, the matrix can beused to to sort the annotation types:int compare(Annotation A,Annotation B,PrecedenceMatrix m){boolean AB = m.precedes(A,B);boolean BA = m.precedes(B,A);if (AB && BA){return 0; // equal}else if (AB){return -1; // A first.
}else if (BA){return 1; // B first.
}// Neither AB or BA means A and// B are not in connected// components.return 0;}Not all nodes in the graph may be reachablein a depth first traversal, particularly if multipleannotations formats have been merged together.Therefore, after the initial traversal has been com-pleted each node is checked to determine if ithas been visited.
If not, then another traversal isstarted from that node.
This is repeated until allnodes/annotations in the graph have been visitedat least once.We have found that UIMA type priorities im-pose some limitations because they cannot repre-sent context sensitive annotation orderings.
Forexample, given<!ELEMENT E1 (A,B)><!ELEMENT E2 (B,A)>The order of A and B differs depending on whetherthe parent annotation is E1 or E2.
This type of re-lationship cannot be expressed by a simple order-ing of annotations.3.4 Naming ConflictsThe annotation type names used when generat-ing the UIMA type system are derived automat-ically based on the annotation names used inthe graph.
Annotations in GrAF may also begrouped into named annotation sets and the gen-30<as type="POS"><a label="token"><fsr:fs type="PENN"><fsr:f name="msd" fVal="NN"/></fsr:fs><fsr:fs type="CLAWS5"><fsr:f name="msd" fVal="NN"/></fsr:fs></a></as>Figure 1: GrAF representation of alternative POSannotationserated UIMA type name consists of a concatena-tion of the nested annotation set names with theannotation label appended.
For example, multiplepart of speech annotations may be represented indifferent annotation sets, as shown in Figure 1.5For the above example, two types willbe generated: POS token PENN andPOS token CLAWS5.
However, GrAF placesno restrictions on the names used for annotationset names, annotation labels, or feature structuretypes.
Therefore, it is possible that the derivedtype name is not a valid UIMA identifier, whichare required to follow Java naming conventions.For example, Part-Of-Speech is a valid namefor an annotation label in GrAF, but because ofthe hyphen it is not a valid Java identifier andtherefore not valid in UIMA.To avoid the naming problem, a derived nameis converted into a valid UIMA identifier beforecreating the UIMA type description.
To permitround trip engineering, that is, ensuring a GrAF?UIMA?GrAF transformation results in the sameGrAF representation as the original, a NameMapfile is produced that maps a generated name tothe compatible UIMA name.
NameMaps can beused in a UIMA?
GrAF conversion to ensure theGrAF annotations and annotation sets created aregiven the same names as they had in the originalGrAF representation.3.5 Preserving the Graph StructureWhile UIMA does not have any graph-specificfunctionality, the value of a UIMA feature canbe an array of annotations, or more specifically,an array of references to other annotations.
In5The use of the fVal attribute in this example is sub-ject to change according to revisions of ISO/DIS 24610-1Language Resource Management - Feature Structures - Part1: Feature Structure Representation (International StandardsOrganization, 2005), to which the representation of featurestructures in GrAF adheres.this way, annotations can effectively ?point?
toother annotations in UIMA.
We exploit this ca-pability to preserve the structure of the originalgraph in the UIMA representation, by adding twofeatures to each annotation: graf childrenand graf ancestors.
This information can beused to recreate the GrAF representation, shouldthat ever be desired.
It can also be used by UIMAannotators that have been designed to use and/ormanipulate this information.Although rarely used, GrAF permits edges inthe graph to be annotated in the same way thatnodes are.
For UIMA conversion, if a graph con-tains labeled edges it must be converted into anequivalent graph without labeled edges.
A graphwith labeled edges can be converted into an equiv-alent graph without labeled edges, where a nodereplaces the original edge.
To preserve the origi-nal graph structure, an attribute indicating that thenode is represented as a a labeled edge in GrAF isincluded.4 GrAF?
GATE?
GrAFThe conversion to/from GATE is much simplerthan conversion to UIMA, since GATE is type-less and does not require the overhead of gener-ating a type system or type priorities list.
WhileGATE does support annotation schemas, they areoptional, and annotations and features can be cre-ated at will.
GATE is also much more lenienton annotation and feature names; names automat-ically generated by GrAF are typically valid inGATE.Representing the graph structure in GATE is notas straightforward as it is in UIMA.
We have de-veloped a plugin to GATE that loads GrAF stand-off annotations into GATE, and a parallel pluginthat generates GrAF from GATE?s internal format.As noted above, GATE uses annotation graphs torepresent annotations, However, because annota-tion graphs do not provide for annotations of an-notations, to transduce from GrAF to the GATE in-ternal format it is necessary to ?flatten?
the graphso that nodes with edges to other nodes are mod-ified to contain edges directly into the primarydata.
GATE assigns a unique id value to every an-notation, so it is possible to link annotations bycreating a special feature and referencing the par-ent/child annotations by their GATE id values.The greatest difficulty in a GrAF?
GATE con-version arises from the fact that in GATE, every31Figure 2: UIMA rendering of GrAF annotationsannotation is expected to have a start and end off-set.
In GrAF, a node may have multiple edgesto other nodes that cover disjoint regions of text.For example, the FrameNet6 annotation for a givenverb typically includes edges to the associated rolefillers (e.g., agent, theme, instrument, etc.
), whichare rarely contiguous in the text itself.
Our currentsolution to this problem is to give a start and endoffset that covers the smallest region of the textcovering the regions associated with all descen-dants of the annotation, and recording the infor-mation concerning the original graph structure inattributes to enable reconversion into the originalGrAF representation.5 Exploiting InteroperabilityGrAF is intended to serve as the lingua franca fordata and annotations used in processing systemssuch as GATE and UIMA.
As such, it providesa way for users to take advantage of each frame-work?s strengths, e.g., UIMAs capabilities for de-ploying analysis engines as services that can berun remotely, and GATE?s wide array of process-ing resources and capabilities for defining regu-6http://framenet.icsi.berkeley.edu/lar expressions over annotations (JAPE).
It shouldbe noted that GATE provides wrappers to allow aUIMA analysis engine to be used within GATE,and to allow a GATE processing pipeline to beused within UIMA.
To share data and annota-tions between the two systems, it is necessary toconstruct a mapping descriptor to define how tomap annotations between the UIMA CAS and theGATE Document, which operate similarly to theconverters from and to GrAF from data and an-notations described above.
However, one advan-tage of using a GrAF representation as a pivot be-tween the two systems is that when an annotationschema is used with GrAF data, the conversionfrom GATE to UIMA is more robust, reflecting thetrue type description and type priority hierarchies.Using GrAF as a pivot has more general ad-vantages, for example, by allowing annotationsto be imported from and exported to a wide va-riety of formats, and also enabling merging an-notations from disparate sources into a single an-notation graph.
Figure 2 shows a rendering ofa Penn Treebank annotation (bracketed format)and a FrameNet annotation (XML) that have beentransduced to GrAF, merged, and the transduced32Figure 3: GATE rendering of GrAF annotationsfor use in UIMA.
The same data is shown ren-dered in GATE in Figure 3.
The two ?views?of the data consisting of overlaid annotations foreach annotation type are visible in each render-ing.
There are multiple possibilities for exploitingand exploring merged annotations representing arange of annotation types within these two frame-works.
For example, a UIMA analysis enginecould be developed to identify regions annotatedby both schemes, or all FrameNet elements thatare annotated as agent and also annotated withPenn Treebank NP-OBJ, etc.
In GATE, JAPErules could locate patterns in annotations obtainedfrom different sources, or named entity recogni-tion rules could be enhanced with annotation in-formation from data annotated in other formats.It would also be possible to compare multiple an-notations of the same type, such as different tok-enizations, different POS taggings , etc.As a final note, we point out that in addi-tion to conversion to UIMA and GATE, annota-tions from different sources (singly or merged inany combination) can also be converted to sev-eral other formats by using the GrAF Java API.The API allows the user to select from among ex-isting annotations and specify an output formatfor their merged representation.
Currently, in ad-dition to GrAF, the following output formats aresupported: XML documents with inline annota-tions; formats compatible with Monoconc Pro7and Wordsmith Tools8; NLTK9; CONLL (B-I-E)format; and UIMA CAS.10 So, for example, it ispossible to load a collection of standoff annota-tion files and convert to XML, and then presentthem to XML-aware applications as XML fileswith inline annotations.
As a result, we are be-ginning to see possibilities for true interoperabil-ity among not only major frameworks like UIMAand GATE, but also applications with more limitedfunctionalities as well as in-house formats.
This,in turn, opens up the potential to mix and matchamong tools for various kinds of processing as ap-propriate to a given task.
In general, the trans-duction of ?legacy schemes?
such as Penn Tree-bank into GrAF greatly facilitates their use in ma-jor systems such as UIMA and GATE, as well as7http://www.athel.com/mono.html8http://www.lexically.net/wordsmith/9http://www.nltk.org/10Note that to render GrAF into GATE, a plugin within theGATE environment is used to perform the conversion.33Figure 4: Conversion capabilitiesother applications and systems.
Figure 4 showsthe conversion capabilities among a few annota-tions schemes, GrAF, and UIMA and GATE.All of our conversion tools and GATE pluginsare freely available for download with no restric-tions at http://www.anc.org.
The UIMA projecthas received support to develop a UIMA?
GrAFconversion module, which should be available inthe near future.6 ConclusionConsideration of the transduction from a generic,relatively abstract representation scheme such asGrAF into the formats required for widely adoptedframeworks for creating and analyzing linguisti-cally annotated data has several ramifications forinteroperability.
First, it brings to light the kindsof implementation choices that either contribute toor impede progress toward interoperability, whichcan feed future development.
Second, our workon converting GrAF to the formats supported byUIMA and GATE shows that while minor differ-ences exist, the underlying data models used bythe two frameworks are essentially the same, aswell as being very similar to the data model under-lying GrAF.
This is good news for interoperability,since it means that there is at least implicit conver-gence on the data model best suited for data andannotations; the differences lie primarily in theways in which the model is serialized internallyand as output by different tools.
It also means thattransduction among the various formats is possiblewithout loss of information.We have shown that a UIMA?GrAF or GATE?
GrAF conversion is fairly straightforward; theexpressive power of GrAF can easily represent thedata models used by UIMA and GATE.
On theother hand, GrAF ?
UIMA or GrAF ?
GATEtransformations are less straightforward.
Bothframeworks can represent graphs, but neither pro-vides a standard representation that other compo-nents are guaranteed to understand.
Given thatpowerful analysis algorithms for data in graphs arewell-established, there may be considerable ad-vantage to using the graph as a general-purposeformat for use within various modules and ana-lytic engines.
In any case, the generality and flexi-bility of the GrAF representation has already beenshown to be an effective means to exchange lin-guistic data and annotations that exist in differentformats, as well as a model for development of an-notation schemes in the future.AcknowledgmentsThis work was supported by an IBM UIMA In-novation Award and National Science Foundationgrant INT-0753069.ReferencesSteven Bird and Mark Liberman.
2001.
A FormalFramework for Linguistic Annotation.
Speech Com-munication, 33:1-2, 23-60.Nancy Ide and Keith Suderman.
2007.
GrAF:A Graph-based Format for Linguistic Annotations.Proceedings of the First Linguistic AnnotationWorkshop, Prague, Czech Republic, June 28-29, 1-8.International Standards Organization.
2008.
Lan-guage Resource Management - Linguistic Annota-tion Framework.
ISO Document WD 24611.International Standards Organization.
2005.
LanguageResource Management - Feature Structures - Part 1:Feature Structure Representation.
ISO DocumentISO/DIS 24610-1.Nancy Ide, Patrice Bonhomme, and Laurent Ro-mary.
2000.
XCES: An XML-based Standardfor Linguistic Corpora.
Proceedings of the Sec-ond Language Resources and Evaluation Confer-ence (LREC), Athens, Greece, 825-30.Hamish Cunningham.
2002.
GATE, a General Ar-chitecture for Text Engineering.
Computers and theHumanities, 36:223-25434
