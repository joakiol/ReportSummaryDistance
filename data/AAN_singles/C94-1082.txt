LHIP :  Extended DCGs for Confignrable Robust Parsing*Afzal Ba\] l im Graham Russel lISSCO, University of Geneva, 54 Route des Acacias, Geneva, CH-1227 Switzerlandemaih afzal@divsun.unige.ch, russell@divsun.unige.chAbst ractWe present LHIP, a system for incremental gram-mar development using an extended DCG for-malism.
'rite system uses a robust island-basedparsing method controlled by user-defined perfor-mance thresholds.Keywords: I)CG, head, island parsing, robustparsing, Prolog1 LH IP  Overv iewThis paper describes LI I I I '  (Left-I lead cornerIsland Parser), a parser designed for broad-coverage handling of lmrestricted text.
The sys-tem interprets an extended DCG formalism toproduce a robust analyser that finds parses ofthe input made from ' islands' of terminals (cor-responding to terminals consumed by success-ful grammar rules).
It is currently in use forprocessing dialogue tr,'mscripts from the t ICRCMap Task Corpus (Anderson et al, 1991), al-though we expect its eventual applications to hemuch wider.
1 Transcribed natural  speech con-tains a number of frequent characteristic 'un-grmnmatical '  phenomena: filled pauses, repeti-tions, restarts, etc.
(as in e.g.
Right I'll have.
.
.you  know, like I'll have to .
.
.
so  I 'm goingbetween the picket fence and the mill, right.).
~While a full analysis of a conversation might welltake these into account, for many purposes theyrepresent a significmlt obstacle to analysis.
LII IPprovides a processing method wlfich allows se-lected portions of the input to be ignored or han-dled differently.The chief modifications to the standard Prolog*grammar ule' format are of two types: one ormore r lght-hand side (RtIS) items may be marked*This work was carried out under grants nos.
20-33903.92 and 12-36505.92 from the Swiss NationalFund.tNote that the input consists of wr/tten textswithin the Map Task Corpus; LtIIP is not intendedfor use in speech processing.2This example is taken fronl the Map Task Corpus.as 'heads',  and one or more RHS items may bemarked as ' ignorable'.
We expand on these pointsand introduce other differences below.The behaviorlr of LHIP can best he understoodin terms of the notions of is land,  span,  coverand thresho ld :I s land:  Within an input string consisting of theterminals ( t l , t2 , .
.
.
tn) ,  ~ island is a sub-sequence (ti, t i+ l , .
.
,  ti+,,), whose length  ism + 1.Span:  The span of a grammar rule R is thelength of the longest island ( t l , .
.
.
t j )  suchthat ternfinals tl and t i are both consumed(directly or indirectly) by R.Cow.
'r: A rule R is said to cover m items if rnterminals are consumed within the island de-scribed by R. The coverage  of R is then rn.Thresho ld :  The threshold of a rule is the mini-mum ~;alue for the ratio of its coverage c toits span s which must hold in order for therule to succeed.
Note that c <_ s, aud thatif c -- s the rule has completely covered thespan, consuming all terminals.As implied here, rules need not cover all of theinput in order to succeed.
More specifically, theconstraints applied in creating islands are suchthat ishmds do not have to be adjacent, but maybe separated by non-covered input.
Moreover,an island may itself contain input which is unac-counted for by the grammar.
Islands do not over-lap, although when multiple anMyses exist theywill in general involve different segmentations ofthe input into islands.There are two notions of non-coverage of theinput: sanct ioned  and unsanet loned  non-coverage.
The latter case arises when the gram-mar simply does not account for some terminM.S~mctioned non-coverage means that some num-ber of special ' ignore' rules have been appliedwhich simulate coverage of input material  yingbetween the ish'mds, thus in effect making the is-lands contiguous.
Those parts of the input thathave been ' ignored' are considered to have been501consmned.
These ignore rules can be invoked inodividually or as a class.
It is this latter capabil-ity which distinguishes ignore rules from regularrules, as they are functionally equivalent other-wise, mainly serving as a notat ional  aid for thegrammar writer.Strict adjacency between RHS clauses can bespecified in the grammar.
It is possible to defineglobal and local thresholds for the proport ion ofthe spanned input that must be covered by rules;in this way, the user of an LHIP grammar canexercise quite fine control over the required accu-racy and completeness of the analysis.A chart is kept of successes and failures of rules,both to improve efficiency and to provide a meansof identifying unattached constituents.
In addi-tion, feedback is given to the grammar writer onthe degree to which the grammar is able to copewith the given input; in a context of grammar de-velopment, his may serve as notification of areasto which the coverage of the grammar might nextbe extended.The notion of ~head' employed here is con-nected more closely with processing control thanlinguistics.
In part icular,  nothing requires that ahead of a rule should share any information withthe LItS item, although in practice it often will.Heads serve as anchor-points in the input stringaround which islands may be formed, and areaccordingly treated before non-head items (RHSitems are re-ordered uring compi lat ion-see be-low).
In the central role of heads, LtI IP resem-bles parsers devised by Kay (1989) and van Noord(1991); in other respects, including the use whichis made of heads, the approaches are rather dif-ferent, however.2 The  LH IP  SystemIn this section we describe the LHIP system.First,  we define what constitutes an acceptableLHIP grammar,  second, we describe the processof converting such a grammar into Prolog code,and third, we describe the analysis of input withsuch a grammar.LHIP graxnmars are an extended form of Pro-log DCG graznmars.
The extensions can be sum-marized as follows: a1.
one or more \[tHS clauses may be nominatedas heads;ZA version of LHIP exists which permits a formof negation on RHS clauses.
That version is not de-scribed here.2.
one or more P~tlS clauses may be marked asoptional;3. '
ignore' rules may be invoked;4. adjacency constraints may be imposed be-tween l~tIS clauses;5. a global threshold level may be set to deter-mine the minimum fraction of spanned inputthat may be covered in a parse, and6.
a local threshold level may be set in a rule: to override the global threshold witlfin that" ru le .We provide a syntactic definition (below) of aLHIP grammar ule, using a notation with syn-tactic rules of the form C -~ F1 I i f2---  I Fnwtfich indicates that the category C may take anyof the forms F1 to F,~.
An optional i tem in a formis denoted by surrounding it with square brackets' \ [ .
.
.
\ ] ' .
Syntactic categories are italieised, whileterminMs are underlined: ' .
.
. '
.A Lt l IP granunar ule has the form:lhiVrute ~ \[ - \] term \[ # T \] ~~__~> U~i~bodywhere T is a value between zero and one.
Ifpresent, this value defines the local thresholdfraction for that rule.
This local threshold valueoverrules the global threshold.
The symbol ' - 'before tile name of a rule marks it as being an' ignore' rule.
0nly a rule defined this way can beinvoked as an ignore rule in an RHS clause.lhipbody => lh.ipclauseI Ihipclause z lhipbodyf lhipclause ; lhipbodyI lhipclause - lhipbodyI (~_" lhipbody ?_))The connectives ' , '  and ~;~ have the same prece-dence as in Prolog, while ~'' has the same prece-dence as ~'.
Parentheses may be used to resolveambiguities.
The connective '~' is used to indi-cate that strings subsumed by two RHS clausesare ordered but not necessarily adjacent in theinput.
Thus 'A ~ /3' indicates that A precedesI3 in the input, perhaps with some interveningmaterial.
The stronger constraint of immediateprecedence is marked by ': ';  'A : B'  indicates thatthe span of A precedes that of B, and that thereis no 1recovered input between the two.
Disjunc-tion is expressed by ~', and optional R/IS clausesare surrounded by ' ( ?
.
.
.
?)'
.502lhipclause ~ temn?
te~nn~.
string?
._~ string- term\[\]~rdoaeod~ }__The symbol '* '  is used to indicate a headclause.
A rule name is a Prolog term, and onlyrules and terminal items may act as heads withina rule body.
The symbol '@' introduces a ter-minM string.
As previously said, the purposeof ignore rules is simply to consume input ter-minals, and their intended use is in facilitat-ing repMrs in analysing input that contains thefalse starts, restarts, fdled pauses, etc.
mentionedabove.
These rules are referred to individually hypreceding their name by the ' - '  symbol.
Theycan also be referred to as a class in a rule body hythe speciM I~.tIS clause '\[\]'.
If used in a rule body,they indicate that input is potentially ignored-the problems that ignore rules are intended to re-pair will not always occur, in which case tile rulessucceed without conslmfing any input.
There is asemantic restriction on the body of a rule whichis that it must contain at least one clause whichnecessarily covers input (optional clauses and ig-nore rules do not necessarily cover input).The following is an example of a LtI IP rule.Here, the sub-rule 'conjunction(Con j) '  is markedas a head and is therefore valuated before eitherof,s(s)) '  or 's(S0':s(conjunct(Conj, SI, Sr)) ~>s(St),* conjunctlon(Conj),s(S~).tIow is such a rule converted into Prolog codeby the LHIP system?
First,  the rule is readand the RHS clauses are part i t ioned into thosemarked as heads, and those not.
A record iskept of their original ordering, and this recordallows each clause to be constrMned with respectto the clause that precedes it, as well as with re-spect to the next head clause wMch follows it.Addit ional code is added to maintain a chart ofknown successes and failures of each rule.
Eachrule name is turned into the name of a Prologclause, and addltionM arguments are added to it.These arguments are used for the input, the startand end points of the area of tlm input in whichthe rule may succeed, tile start and end pointsof the actual part of the input over which it infact succeeds, the number of terminal items cov-ered within that island, a reference to the pointin the chart where the result is stored, and a listof pointers to sub-results.
The converted form oftile above rule is given below (rMnus the code forchart maintenance):s (con junct (H , I , J ) ,  A, B, C, D, E, F,ELIK\]-K, G) :-lhip_threshold valuo(M),conjunction(H, A, B, C, O, P, Q,R-S ,_ ) ,s(l, A, B, fl, D, _, T, C-R, _).s ( J ,  A. P, C, ~, E, U, s -E l ,  _),F is U+Q+T,F/(E-D)>=M.The important points to note about this con-vetted form are the following:1. the con junct ion  clause is searched for be-fore either of the two s clauses;2. the region of the input to be searched for thecon junct ion  clause is the stone as that forthe rule's LIIS (B-C): its island extends from0 to p and covers Q items;3. the search region for tile first s clause is B-0(i.e.
from tile start of tile LHS search regionto tile start of the con junct ion  island), itsisland starts at D and covers T items;4. the search region for tile second s clause isP-C (i.e.
from the end of the con junct ionisland to the end of the LIIS search region),its island ends at E and covers II items;5. the island associated with the rule as a wholeextends from D to E and covers F items,whereF isU+ Q + T;6. lhip_throshold_value/l unifies its argu-ment M with the current global thresholdvalue.In the current implementation f LI\[IP, compiledrules are interpreted epth-first and left-to-rightby the standard Prolog theorem-prover, giving ananMyser that proceeds in a top-down, qeft-head-corner' fashion.
Because of the reordering car-ried out during compilation, the situation regard-ing left-recursion is slightly more subtle than ina conventional DCG.
The 's(conjunct(...  ))' ruleshown above is a case in point.
While at firstsight it appears left-recursive, inspection of itsconverted form shows its true leftmost subrule503to be 'conjunction'.
Naturally, compilation mayinduce left-recursion as well as el iminating it, inwhich case LII IP will suffer from the same ter-mination problems as an ordinary DCG formal-ism interpreted in this way.
And as with an or-dinary DCG formalism, it is possible to applydifferent parsing methods to LHIP in order tocircumvent hese problems (see e.g.
Pereira andShieber, 1987).
A related issue concerns the in-terpretat ion of embedded Prolog code.
Reorder-ing of lZHS clauses will result in code which pre-cedes a head within a LtHP rule being evaluatedafter it; judicious freezing of goals and avoidanceof unsafe cuts are therefore required.LHIP provides a number of ways of applyinga grammar to input.
The simplest allows one toenumerate the possible analyses of the input withthe grammar.
The order in which the results areproduced wiU reflect the lexical ordering of therules as they are converted by LHIP.
With  thethreshold level set to 0, all analyses possible withthe grammar by deletion of input terminals canbe generated.
Thus, supposing a suitable gram-mar, for the sentence John saw Mary and Marksaw them there would be analyses correspondingto the sentence itself, as well as John saw Mary,John saw Mark, John saw them, Mary saw them,Mary and Mark saw them, etc.By setting the threshold to 1, only those par-t ial analyses that have no unaccounted for ter-minals within their spans can succeed.
Hence,Mark saw them would receive a valid analysis, aswould Mary and Mark saw them, provided thatthe grammar contains a rule for conjoined NPs;John saw them, on the other hand, would not.
Asthis example i l lustrates, a part ia l  analysis of thiskind may not in fact correspond to a true sub-parse of the input (since Mary and Mark was nota conjoined subject in the original).
Some caremust therefore be taken in interpreting results.A number of built- in predicates are providedwhich allow the user to constrain the behaviour ofthe parser in various ways, based on the notionsof coverage, span and threshold:lhip _phras o (+C, + S )Succeeds if the input S can be parsed as aninstance of category C.lhip_ cv_phrase (+C, +S)As for lhip_phrase/2, except that all of theinput must be covered.lhip_phras e (+C, +S, -B, -E, -Coy)As for lhip_phrase/2, except that B binds tothe beginning of the island described by thisapplication of C, E binds to the posit ion imme-diately following the end, and Coy binds to thentunber of ternfinals covered.lhip_mc_phrasos (+C, +S, -Coy, -Ps )The maximal coverage of $ by C is Cov.
Ps isthe set of parses of S by C with coverage Coy.lhip_rainmax_phr ase s (+C, +S, -Coy, -Ps )As for lh?p_mc_phrases\]4,  except that Ps isaddit ionally the set of parses with the leastspan.lhip seq_phrase(+C,+S,-Seq)Succeeds if Soq is a sequence of one or moreparses of S by C such that they are non-overlapping and each consumes input that pre-cedes that consumed by the next.lh ip  maxT_phras os (+C, +S, -MaxT)MaxT is the set of parses of S by C that havethe tfighest hreshold value.
On backtracking itreturns the set with the next highest hresholdvalue.In addition, other predicates can be used tosearch the chart for constituents that have beenidentified but have not been attached to the parsetree.
These include:lhip_successLists successful rules, indicating island positionand coverage.lhip_ms_successAs for lhip_success, but lists ouly the mostspecific successful rules (i.e.
those which havethemselves ucceeded but whose results havenot been used elsewhere).lhip_ms_success (N)As for lhip_ms_succoss, but lists only suc-cessful instances of rule N.Even if a sentence receives no complete analysis,it is likely to contain some parsalfle substrings; re-sults from these are recorded together with theirposition within the input.
By using these predi-cates, partiM but possibly useful information canbe extracted from a sentence despite a global fail-ure to parse it (see section 4).The conversion of the grammar into Prologcode means that the user of the system can eas-ily develop anMysis tools that apply differentconstraints, using the tools provided as buildingblocks.5043 Us ing  LH IPAs previously mentioned, LHIP facilitates a cyc-lic approach to grammar development.
Supposeone is writing an English grammar for the MapTask Corpus, and that the following is the firstattempt at a rule for noun phrases (with appro-priate rules for determiners and nouns):up(N, D, A) # 0.5 ,-~--~>determiner(D),* no,,n(N)While tiffs rule will adequately anMyse simpleNPs such as your map, or a missionary camp, ona NP such as the bottom right-hand corner it willgive analyses for the bottom, the right-hand andthe corner.
Worse still, in a long sentence it willjoin determiners from the start of the sentenceto nouns that occur in the latter hMf of the sen-tence.
The number o f  superfluous anMyses canbe reduced by imposing a local threshohl evel,of say 0.5.
By looking at the various analyses ofsentences in the corpus, one can see that this rulegives the skeleton for noun phrases, but from thefraction of coverage of these parses one c,'m alsosee that it leaves out an importmlt feature, adjec-fives, which are optionally found in noun phrases.np(N, D, A) # 0.5 ~,-~>determiner(D),(?
adjectives(A) ?
),* noun(N).With rids rule, one can now handle suchphrases as the left-hand bottom corner, and a ba-nana tree.
Suppose further that this rule is nowapplied to tile corpus, and then the rule is ap-plied again but with a local threshold level of 1.By looking at items parsed in the first case butnot in the second, one can identify features ofnolm phrases found in tlle corpus that are notcovered by the current rules.
Tiffs might include,for instance, phrases of the form a slightly dip-ping line.
One can then go hark to the grammarazld see that the noun phrase rule needs to bcchanged to account for certain types of modifierincluding adjectives and adverbial modifiers.It is Mso possible to set loom thresholds dy-namically, by making use of the '{ prolog code }'facility:np(N, D, A) # T ~,,~>determiner(D),(?
adjectives(A) ?
),* .o~.
(N) .
{ set_dynamic_threshold(A,T) }.In this way, the strictness of a rule may be var-ied according to information originating eitherwithin the part icular un-time invocation of therule, or elsewhere in the current parse.
For exam-ple, it would be possible, by providing a suitabledefinition for set_dynamic_threshold/2, to set T to0.5 when more titan one optional adjective hasbeen found, and 0.9 otherwise.Once a given rule or set of rules is stabl% andtile writer is satisfied with the performtmce ofthat part of the grammar, a local threshold valueof 1 may bc assigned so that superfluous parseswill not interfere with work elsewhere.The use of the chart to store known resultsand failures allows the user to develop hybridparsing techniques, rather than relying on thedefault depth-first top-down strategy given byanalysing with respect o the top-most category.For instance, it is possible to anMyse the inputin ' layers' of linguistic categories, perhaps start-ing by analysing noun-phrases, then prepositions,verbs, relative clauses, clauses, conjuncts, and fi-nally complete sentences.
Such a strategy allowsthe user to perform processing of results betweenthese layers, w:hich can be useful in trying to findthe 'best '  analyses first.4 Par t ia l  resu l t sThe discussion of built-ln predicates mentionedfacilities for recovering part ial  parses.
Here weilhlstrate this process, and indicate what furtheruse might be made of tile information titus ob-tained.In the following example, tile chart is inspectedto reveal what constituents have been built dur-ing a t~iled parse of the truncated sentence Haveyou the tree by the brook that.
.
.
:> lhip_phrase(~(S),\[have,you,the,tree,by,the,brook,that\]).no> lhip success.
(-I) \[7--8) /I "*> Obrook(-1) \[5--6) /I "'> ?by(-I) \[1--2) /I "'> ehave(-i) \[8--9) /2 --> ?that(-1) \[3--4) /2 "'> Othe(-i) \[6--Z) /I "'> ethe505(-1) \[4--5) / l  " '> ?tree(-1) \[2--3) /1 " '> ?you(4) \[2--8) 14 -->np(nppp(you,pp(by,np(the,brook,B))))(4) \[3--8) /5 "'>np(nppp(np(the, t ree,C) ,pp(by,np(the,brook,D)) ) )(5) \[3--8) /2 " '> rip(rip(the,brook,A))(5) \[6--8) /2 "'> np(np(the,brook,G))(5) \[3--5) /2 "'> np(np( the , t ree ,E) )(7) \[4--5) /I "'> noun(tree)(8) \[7--8) /I "'> noun(brook)(9) \ [2 - -3)  l1 "'> np(you)(10) \[5--8) /3 - ->pp(pp(by,np(the,brook,F)))(11) \[3--4) / l  "'> det( the)(11) \[6--7) /1 "'> det ( the)yesEach rule is listed with its identifier ( ' -1 '  for lex-ical rules), the island wtfich it has analysed withbeginning and ending positions, its coverage, andthe representation that was constructed for it.From this output it can be seen that the gram-mar manages reasonably well with noun phrases,but is unable to deM with questions (the initialauxil iary have remains unattached).Users will often be more interested in thesuccessful application of rules which representmaximal  constituents.
These are displayed bylh ip_ms_ suc cos s:> lhip_ms_success.
(-1) \[1--2) /1 "'> ?have(-1) \[8--9) /1 "'> ?that(4) \[2--8) /4 - ->np(nppp(you,pp(by,np(the,brook,J))))(4) \[3--8) /5 "'>np(nppp(np(the,tree, I{) ,pp(by ,np( the ,brook , I ) ) ) )(5) \[3--8) /2 "-> np(np(the,brook,K))yesHere, two unattached lexical items have beenidentified, together with two instances of rule 4,which combines a NP with a postmodifying PP.The first of these has analysed the island you thetree by the brook, ignoring the tree, while the sec-ond has analysed the tree by the brook, consum-ing all terminals.
There is a second analysis forthe tree by the bTvok, due to rule 5, which hasbeen obtained by ignoring the sequence tree bythe.
From this information, a user might wistt torank the three results according to their respec-tive span:coverage ratios, probably preferring thesecond.5 Discuss ionThe abil ity to deal with large amomlts of possi-bly ill-formed text is one of the principal objec-tives of current NLP research.
Recent proposalsinclude the use of probabil istic methods (see e.g.Briseoe and Carroll, 1993) and large robust deter-ministic systems like Hindle's Fidditch (Hindle,1989).
4 Experience so far suggests that systemslike LI I IP may in the right circumstances providean alternative to these approaches.
It combinesthe advantages of Prolog-interpreted DCGs (easeof modification, parser output suitable for directuse by other programs, etc.)
with the abil ity torelax tile adjacency constraints of that form&llsmin a flexible and dynamic manner.LIHP is based on the assumption that part ialresults can be useful (often much more usefulthan no result at all), and that an approxima-tion to complete coverage is more useful when itcomes with indications of how approximate it is.This latter point is especially important in caseswhere a grammar must be usable to some degreeat a relatively early stage in its development, asis, for example, the case with the development ofa grammar for the Map Task Corpus.
In the nearfuture, we expect to apply LHIP to a differentproblem, that of defining a restricted languagefor specialized parsing.The rationale for the distinction between sanc-tioned and unsanctioned non-coverage of input istwofold.
First,  the qgnore' facility permits dif-ferent categories of unidentified input to be dis-tinguished.
For example, it may be interestingto separate material which occurs at the startof the input from that appearing elsewhere.
Ig-nore rules have a similar flmctionality to that ofnormal rules.
In particular, they can have ar-guments, and may therefore be used to assigna structure to unidentified input so that it maybe flagged as such within an overall parse.
Sec-ondly, by setting a threshold value of 1, LtI IP canbe made to perform llke a standaxdly interpretedProlog DCG, though somewhat more efficientlyaIndeed, the ability of Fidditch to return a se-quence of parsed but unattached phrases when aglobal analysis fails has clearly influenced the designof LHIP.506due to the use of the chart.
~A number of possible extensions to the sys-tem can be envisaged.
Whereas at present eachrule is compiled individually, it would be prefer-able to enhance preprocessing in order to com-pute certain kinds of global information from thegrammar.
One improvement would be to deter-mine possible linking of 'root-to-head' sequencesof rules, and index these to terminal items for useas an oracle during anMysis.
A second would beto identify those items whose early analysis wouldmost strongly reduce the search space for sub-sequent processing and sc,'m the input to beginparsing at those points rather titan proceedingstrictly front left to right.
This further suggeststhe possibility of a parallel approach to parsing.We expect that these measltres would increasethe efficiency of LHIP.Currently, also, results are returned in an orderdetermined by the order of rules in the grammar.It would be preferable to arrange matters in amore cooperative fashion so that the best (thosewith the highest coverage to span ratio) are dis-played first.
Support for bidirectional parsing(see Satta and Stock, to appear) is another candi-date for inclusion in a later version.
These appearto be longer-term research goals, however.
6Acknowledgments:  The authors would like tothank Louis des Tombe and Dominique Estivalfor comments on earlier versions of this paper.Re ferencesAnderson, A.tI., M. Bader, E.G.
Bard, E. Boyle,G.
Doherty, S. Garrod, S. Isard, J. Kowtko, J.McAllister, J. Miller, C. Sotillo, It.
Thompsonand It.
Weinert (1991) "The IIC\]LC Map TaskCorpus", Language and Speech 34(4), 351-366.Briscoe, T. and J. Carroll (1993) "GeneralizedProbabilistie LR Parsing of Natural Language(Corpora) with Unification-Based Grammars"Computational Linguistics 19(1), 25-59.Hindle, D. (1989) "Acquiring DisambiguationRules from Text".
Proceedings of the 27th An-nual Meeting of the Association for Computa-tional Linguistics, 118-125.Sin large grammars there is a significant time gain.The chart's main advantage, however, is in identify-ing unattached constituents and allowing a 'layered'approach to analysis of input.6Source code for the LHIP system has been madepublicly available.
For information, contact theauthors.Kay, M. (1989) "Head-Driven Parsing", Proceed-ings of the Workshop on Parsing Technologies,52-62.Pereira, F.C.N.
and S.M.
Shieber (1987) Prologand Natural Language Analysis, CSLI LectureNotes No.
10, Stanford University.Satta, G. and O.
Stock (to appear) "Bidirec-tional Context-Free Grammar Parsing for Nat-ural Language Processing", Artificial Intelli-gence.van Noord, G. (1991) "Head Corner Parsing forDiscontinuous Constituency", Proceedings ofthe 29th Annual Meeting of the Association forComputational Linguistics, 114-121.507
