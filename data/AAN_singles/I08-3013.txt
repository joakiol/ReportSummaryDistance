Proceedings of the IJCNLP-08 Workshop on NLP for Less Privileged Languages, pages 73?80,Hyderabad, India, January 2008. c?2008 Asian Federation of Natural Language ProcessingFinite State Solutions For Reduplication In Kinyarwanda LanguageJackson MuhirweMakerere UniversityUganda jmuhirwe@cit.mak.ac.ugTrond TrosterudUniversity of Tromstrond.trosterud@hum.uit.noAbstractReduplication, the remaining problem incomputational morphology is a morpholog-ical process that involves copying the baseform wholly or partially.
Reduplication canalso be classified as either bounded or un-bounded reduplication.
Some solutions havebeen proposed for bounded reduplication.Some of the proposed solutions use orderedreplace rules while others use simultaneoustwo-level rules.
In our attempt to solve bothbounded and unbounded reduplication weused a combination of two-level rules andreplace rules.
All our experiments wereare carried out on Kinyarwanda an under-resourced language with complex agglutina-tive morphology.1 IntroductionReduplication is known to many computational mor-phologists as the remaining problem.
Unlike con-catenative morphology, which involves concatena-tion of different components to create a word, redu-plication involves copying.
Reduplication is there-fore non-concatenative, and involves copying of ei-ther the whole word or part of the word.
The redupli-cated part of the word could be a prefix or part of thestem or even a suffix.
This copying is what makesreduplication an outstanding problem.
Dependingon the language, reduplication may be used to showplurality, iterativity, intensification or completeness(Kimenyi, 2004).
Some of the notable examplesof reduplication in computational morphology thathave been reported include Kinande, Latin, Bam-bara (Roark and Sproat, 2007); Tagalog and Malay(Beesley and Karttunen, 2003; Antworth, 1990).
Inthese cases, one language may be exhibiting fullstem reduplication while another may be exhibitingpartial stem reduplication (Syllable).Reduplication may generally be divided into two:bounded and unbounded.
Bounded reduplication isthe kind that involves just repeating a given partof the word.
Unbounded reduplication differs frombounded reduplication in that bounded reduplicationinvolves copying of a fixed number of morphemes.Unbounded reduplication is considerably more chal-lenging to deal with compared with bounded redu-plication.
Unbounded reduplication has received lit-tle attention from researchers no wonder it is yetto be fully solved (Roark and Sproat, 2007).
Inprinciple, finite state methods are capable of han-dling bounded reduplication, and here some solu-tions have been proposed.
In this paper we presentour attempt to solve both bounded and unboundedreduplication in Kinyarwanda a typical Bantu lan-guage.
Kinyarwanda is the national and official lan-guage of Rwanda.
It is closely related to Kirundithe national language of Burundi.
It is the mothertongue of about 20 million people living in thegreat lakes region of East and Central Africa.
Kin-yarwanda is a less privileged language characterisedby lack of electronic resources and insignificantpresence on the Internet.
The language has an offi-cial orthography where tones, long vowels and con-sonants are not marked.
Kinyarwanda is agglutina-tive in nature, with complex, mainly prefixing mor-phology.
Verb forms may have slots of up to 20 af-73fixes to be attached to the root on both sides: leftand right.
Reduplication is a common feature andgenerally all verbs undergo some form of redupli-cation.
Adjectives and adverbs tend to undergo fullword reduplication, as we shall see in section 2.2 Kinyarwanda ReduplicationKinyarwanda exhibits full word reduplication, fullstem reduplication and partial stem reduplication orsyllable reduplication.
Full word reduplication in-volves copying of the whole word, this phenomenonhas been observed mainly in adjectives and adverbs.Full stem reduplication involves copying a full stemof either a verb or a noun.
Part of a stem is copiedin partial stem reduplication.
To a large extent thiscopying is uniform (the large number of examplegiven below show that) but there are also cases ofun uniformity.
There are cases when a nasal (n or m)and an associative morpheme is inserted between thecopied morpheme and its base form.
Kinyarwandalanguage exhibits also cases of suffix reduplicationattested mainly in verb extensions which are notconsidered in this paper.For our discussion in this section we shall look atfull word reduplication full stem reduplication andpartial stem reduplication will be considered last.For readers with an orientation towards theo-retical linguistics we shall categorise our exam-ples according to whether they are lexical or gram-matical, but for implementation purposes this willnot be considered.
Lexical reduplication is con-cerned with words that may appear in the dictio-nary.
Reduplicated words may appear in a dictio-nary as distinct words from the original word whichunderwent reduplication.
Grammatical reduplica-tion is concerned with words or sentences that arereduplicated based on grammatical rules.
For in-stance, only monosyllabic verbs are reduplicated, bi-syllabic and polysyllabic are never reduplicated (Ki-menyi, 2004).2.1 Full Word ReduplicationAll adjectives, adverbs and numerals may undergofull word reduplication.
In this case, the completeword is copied to form a new word.Adjectivesmunini ?big?
> muninimunini ?big?muto ?small?
> mutomuto ?
?small /young?mashya ?new?
> mashyamashya ?very new?Adverbsvuba ?fast?
> vubavuba ?very fast?buhoro ?slowly?
> buhorobuhoro ?very slowly?buke ?little?
> bukebuke ?very little?Numeralsrimwe ??one?
rimwerimwe ?one by one or once in awhile?kabiri ?two?
kabirikabiri ?two by two?gatatu ?three?
gatatugatatu ?three by three?2.2 Full Stem ReduplicationThis involves reduplication of the whole stem result-ing in a new word with a different meaning fromits parent.
This kind of reduplication has been ob-served in both verbs and nouns and can be both atlexical and grammatical level.
Formally, it differsfrom word reduplication in that the verb and nounclass prefix does not participate in the reduplication,whereas word reduplication reduplicates the classprefix as well, cf.
ka-birika-biri vs. gu-taga=taga.Verbs differ from nouns in that all verbs may bereduplicated.
In many cases, the resulting redupli-cated verb keeps the same basic meaning, but addsiterativity , continuity, etc.
In other cases, the re-sult is a change in meaning.
For nouns, the situationis different.
Here, reduplication is semantically re-stricted to meaning ?kind of?, ?associated to?, andonly a subset of the nouns undergo reduplication.In our transducer, we open for reduplication forall verbs, whereas reduplicating nouns are singledout as a separate group in the lexicon.In all the verb cases we see iterativity, continu-ity of events or an activity done many times.
In thenoun examples it may be noticed that reduplicationrefers to the description of an object, to what an ob-ject does, or to an association based upon the origi-nal meaning.2.2.1 Grammatical ReduplicationThe examples given below mainly concern lexicalreduplication.
Grammatical reduplication involvesreduplication of existing word forms, thereby form-ing new words with different meanings.
Grammat-ical reduplication may be realized at word level or74at sentence level.
Here we shall consider redupli-cation at word level only; sentence level processesare outside the scope of a morphological transducer.The reader is advised to consult Kimenyi (1986) forsentence level reduplication.Also in this category it is the whole stem that isreduplicated.
Most of the examples belonging to thiscategory are of verb reduplication.Examples include the following:kugenda ?to walk?
> kugendagenda ?to walkaround?kubunda ?to bend?
> kubundabunda ?to walkbending?kubumba ?to mould?
> kubumbabumba ?to con-tinue moulding?guhonda ?to knock?
> guhondahonda ?to knockrepeatedly?Notice from the examples above that this type ofreduplication is limited to two-syllable stems, andmost of these verbs end with a nasal cluster NC .Two syllable verbs referring to continuous eventsare never grammatically reduplicated, e.g gukunda?to love?, kwanga ?to hate?
guhinga ?to cultivate?.They may undergo lexical reduplication, though.
So,in an analysis invoking semantic disambiguation, tri-syllabic reduplicated verbs will be discarded as can-didates for grammatical reduplications.2.3 Partial Stem ReduplicationIn this case the initial reduplicated syllable has theform CV , V C or CV N .Verbskujejeta ?to drop /leak?gusesera ?to go through a fence with a bent back?kubabara ?to fill pain?kunyunyuza ?to suck?Nounsiseseme ?nausea?ingegera ?crook?umururumba ?greed?ibijojoba ?rain drops?2.4 Unbounded ReduplicationThis is still a challenge, and it involves two casesin Kinyarwanda, nasal insertion and the insertion ofthe associative between the reduplicates.2.4.1 Nasal InsertionThese cases may be few but they do exist.
Themajority of the cases are verbs.
Few nouns exhibitthis kind of behaviour.Verbsgutontoma ?to make pig?s noise?kuvumvura ?to talk (insulting)?gutantamura ?to tear up?Nounsigipampara ?a useless thing?2.4.2 Associative insertionAssociative insertion has mainly been observed indemonstratives when they reduplicate.
An associa-tive infix such as na ?and?
and nga ?such and such?is inserted between the reduplicates.Demonstrativesuyunguyu ?this one?, abangaba ?these ones?ahangaha ?Here?, ahanaha ?such and such a place?ikiniki ?this and this one?.3 The proposed approachIn order to handle the different issues presentedabove we used a hybrid approach.
The hybrid ap-proach is a combination of two-level rules and re-place rules.
These two formalisms represent thestate of the art and practice in computational mor-phology.
The two formalisms are powerful, well de-signed and well understood.3.1 Two-level FormalismThe two-level formalism has been the dominantformalism in Computational Morphology since itsinvention by Koskenniemi in 1983 (Koskenniemi,1983).
Since then the approach has been used todevelop morphological analysers for very many lan-guages around the world, including the Bantu lan-guage Swahili (Hurskainen, 1992).
This formalismhas been the major motivation force behind renewedinterests in computational morphology since 1983.The two-level formalism is based on two-level ruleswhich are applied to a lexicon to facilitate lexicalto surface level mappings.
The two-level rules arecompiled either by hand (Antworth, 1990) or by ma-chine (Karttunen, 1992) into finite state networks.75The rule network may now be applied to a lexi-con that has been compiled into a finite state net-work.
A two-level based morphological analyseris developed by composing the two-level rule net-work with the lower side of the finite state lexiconnetwork.
The two-level rules are symbol to symbolrules which apply to the lexicon in parallel.
The de-veloper does not have to worry about the order ofthe rules.
The only problem is that rules tend to con-flict.
With computerised compilers, such conflictsare no longer a problem.
The compiler shows whichrules are conflicting, so that the developer can re-solve them.
The output from a two-level morpho-logical analyser is never affected by the order of therules.Two-level rules are generally of the formCP OP LC RCwhere CP = Correspondence Part; OP = Operator;LC = Left Context; RC = Right ContextThere are four different kinds of rules that may beused to describe morphological alternations of anylanguage.1.
a:b => LC RC.
This rule states that lexical//a// can be realized as surface b ONLY in thegiven context.
This rule is a context restrictionrule2.
a:b <= LC RC This rule states that lexical //a//has to be realized as surface b ALWAYS in thegiven context.
This rule is a surface coercionrule.3.
a:b <=> LC RC this is a composite rulewhich states that lexical //a// is realized as sur-face be ALWAYS and ONLY in the given con-text.4.
a:b /<= LC RC This is an exclusion rule thatstates that lexical //a// is never realized as sur-face //b// in the given context.These rules may be compiled into finite state ac-ceptors either by hand or automatically using one ofthe available Two-level rule compilers.
For the pur-pose of this research we used the Xerox Finite StateTools.3.2 Replace RulesOn the other hand the replace rules were introducedby Karttunen in 1995 motivated by the rewrite rulesmodel developed by Kay and Kaplan (1994).
Re-place rules were easily accepted by computationallinguistics because that is how linguistics has beendone every where.
It was so natural for linguistics totake up this formalism.The replace rules are regular expressions thatmake it possible to map the lexical level strings tosurface level strings.
Replace rules have been verypopular in Computational Morphology and havebeen used to develop many morphological analysers.Replace rules are compiled into a finite state net-work and this network is applied to the lower sideof the lexicon network to map the lower level stringsto the surface level strings.
It is worthy noting thatreplace rules are feeding rules and therefore applyin a cascade.
Each rule uses the result of the pre-ceding rule.
Because of this, a linguist writing lan-guage grammar using replace rules notation mustorder rules in a proper way, otherwise the resultsmay not be right.
For implementation purposes, re-place rules have one clear advantage over two-levelrules.
They can map symbols to symbols; symbolsto strings; strings to symbols; and strings to strings.Replace rules are very handy when it comes to writ-ing string to string mappings.
In this case you writeonly one rule instead of the many rules you wouldotherwise have to write while using two-level rules.Replace rules take the following four forms:Unconditional replacementA -> BUnconditional parallel replacement (Several ruleswith no contexts)A1 -> B1, A2 -> B2, ...... An -> BnConditional replacement.
(One rule with contexts)UPPER -> LOWER || LEFT _ RIGHTConditional parallel replacement.UPPER1 -> LOWER1 ||LEFT1 _ RIGHT1 ,, UPPER2 -> LOWER2 ||LEFT2 _ RIGHT2,,..,,UPPERn -> LOWERn ||LEFTn _ RIGHTn763.3 Comparison of the two Formalisms?
Replace rules are organised vertically in a cas-cade and feed each other.
Two-level rules, onthe other hand side, are organised horizontallyand apply in parallel.?
Because replace rules are feeding rules, theymust be properly ordered.
Order is not impor-tant in two-level rules and would not affect theoutput.?
Replace rules conceptually produce many in-termediate levels when mapping from lexical tosurface level.?
Since two-level rules apply simultaneously,there is no ordering problem.
The only prob-lem that arises are conflicts that the linguistmust deal with.
But as we said earlier, thisis no longer a problem since current two-levelcompilers can detect the rule conflicts and thenthe grammar writer can deal with them accord-ingly.3.4 Towards a Hybrid ApproachAs much as we have seen that these two formalismshave differences, they all work very well and areefficient at doing what they were designed to do.Networks compiled from these two networks havethe same mathematical properties (Karttunen andBeesley, 2005), and none of the formalisms can beclaimed to be superior over the other, per se.
It is fur-ther claimed that choosing between two-level rulesand replace rules is just a matter of personal choice.This is true as far the general areas of applicationof each of these rules are concerned.
Our experi-ence has shown that two-level rules are much easierto learn and conceive how they work.
This experi-ence is also shared by Trosterud and Uibo who alsowhile working on Sami found it much easier to learntwo-level rules but again proposed that it would bepossible to combine both formalisms (Trosterud andUibo, 2005).
Independently, Muhirwe and Barya(2007) also found it easier to learn two-level rulesand they used them to develop their KinyarwandaNoun morphological analyser.
Beesley and Kart-tunen also realised that each one of these rules hasstrong points and weak points.
There are inci-dences where it is much easier to use two-level rulesand there are other incidences where it is easier touse replace rules over two-level rules (Beesley andKarttunen, 2003).
Let us look at an example tostrengthen our argument.
In solving limited partialstem reduplication in Tagalog, Antworth used twolevel rules to model the solution.
This same exam-ple was repeated by Beesley and Karttunen (2003).Efforts to rewrite the solution using replace rules re-sulted in many rules.
We used this approach to solvethe problem of partial reduplication in Kinyarwanda.Alphabet %+:0 b c d f g h j k l m np q r s t v x y z a e i o u;SetsC = b c d f g h j k l m n p q r s tv x y z;V = a i e o u ;Rules"R for realisation as Consonant"R:CC <=> _ E: %+: CC;where CC in C;"E realisation as vowel"E:VV <=> _ %+: (C:) VV;where VV in V;Replace rules have an edge over two-level ruleswhen it comes to string to string mapping.
Whenthe strings are of unknown length, two-level rulescannot be applied, and we will have to use specialcompilation routines from the xfst toolbox.
In otherwords, replace rules are more appropriate if the map-ping requires replacement of a string, whereas two-level rules are more appropriate when only symbolsare involved, and especially when sets of symbolsare involved.
Based on this we decided to combinethe two approaches to take advantage of each for-malism?s strength.4 ImplementationAt the onset, we wanted to solve three problems:Full wordform reduplication (we will follow estab-lished practice and refer to it as word reduplication),stem reduplication and first syllable or partial stemreduplication.
Our hybrid approach was used as fol-lows.
We used the two-level rules to solve the prob-lem they are best at solving: partial stem reduplica-tions.
Beesley and Karttunen?s compile-replace al-77gorithm was then used to handle full word and fullstem reduplication.4.1 Full word and full stem ReduplicationThe full word and full stem reduplication was han-dled by use of the replace rules and the compile-replace algorithm.
The compile-replace algorithmis based on the insight that any string S can bereduplicated using regular expressions of the form{S}?2.
The central idea behind the application ofthe compile-replace algorithm therefore is lookingfor a way to enclose the stem with the delimiters {and }?2.
This was done by enclosing the whole stemwith ?[{S}?2?]
in the lexicon, and given a redupli-cation context, the compile-replace algorithm is ap-plied to the lower side of the lexicon network, dou-bling the stem.
When the reduplication context isnot present, the delimiters were simply deleted.
Asan example, take a look at part of thelexc lexiconbelow:LEXICON Root0:?
[{ AdjRoots;0:?
[{ AdvRoots;This continues to the adverb and adjective or toany other sublexiconLEXICON AdjRootskinini AdjSuff;kito AdjSuff;muto AdjSuff;Lastly we can add the suffixLEXICON AdjSuff+Adjective:0 Redupli;LEXICON Redupli+Reduplic:}?2?]
#;%+unmarked:0 #;After compiling the lexicon and applying thecompile-replace algorithm to the lower side, the al-ternation rules can then be applied to constrain thesurface realisation of the reduplicated words.
In thiscase most of the surface alternation rules were writ-ten using replace rules formalism.4.2 Partial stem reduplicationThe solution provided by Antworth in PC Kimmois a good solution to handling limited length redu-plication.
We therefore adapted this solution to pro-vide a solution to first syllable reduplication in Kin-yarwanda.
The rules we used were presented in theprevious section.
We used the two-level rules be-cause of their convenience, but, as noted, one willget the same result by using replace rules.
Thesetwo-level rules were compiled into a finite state net-work and then intersected using the two-level com-piler twolc.
The rule network was then applied tothe lower side of the lexicon network to produce therequired output on the surface.
In the lexicon we hadto include a feature that would interact with the rulesto cause reduplication:Lexicon PSPrefix[Redupli]:RE+ PVRoot;Lexicon PVRootjeta VFinal;In Kinyarwanda, the partial stem reduplication isof three types, CV , V C and CV N reduplication.We thus made three different templates, all modeledupon the rule shown here.4.3 Emerging Problems in KinyarwandareduplicationThe solution provided above for partial reduplica-tion seemed to work very well until we tested theresults, and then we found that there were some in-teresting challenges.1.
some stems reduplicate and cause insertion of anasal.
For example /gu + kama/ > /gukankama//gu + toma/ > / gutontoma/2.
there were cases of complex consonants whichwhen present makes the reduplication problemharder.
Evan Antworth?s solution was for fixedlength CV reduplicates and it is in this case ren-dered inefficient (Antworth, 1990).
Examples/gucyocyora//kunyunyuza//gushwashwanya/3.
when demonstratives reduplication, a presenta-tive affix /nga/ is inserted in the middle of thereduplicatesIn order to solve the first challenge, we carried outmore negative tests and looked for cases of wordsthat were not recognized.
Of these we identified78reduplicates where a nasal is inserted and we foundthat such cases are not very frequent.
The majorityof verbs and nouns undergo full stem reduplication,for which the provided solution was adequate.
Theremaining few undergo partial stem or first syllablereduplication.
There are also cases of stems that un-dergo both full stem and partial stem reduplication,but these were not a challenge at all.
So our solutionto the nasal insertion challenge was to write a rulethat would insert a nasal between the reduplicatingprefix and the base stem.
[] -> n || _ [ [t o m a] |[k a m a] | ....| [v u r a]]The second problem involving complex conso-nants was solved by representing each complex bya multicharacter symbol that is not used in the lex-icon.
For example, in /kunyunyuza/ there is a com-plex consonant ny which is part of the reduplicate.We represent all occurrences of ny with N and thefollowing rule will be applied lastly to effect the sur-face realisation.N -> nyThe third problem was solved by using replace rules.The problem of reduplication of demonstratives waspartly solved by application of the compile-replacealgorithm and replace rules.
We used a replace ruleto insert /nga/ in all the reduplicated demonstratives.
[] -> [ n g a ] || _ demo .#.4.4 Evaluation and testsThe partial, full stem and full word reduplicationlexica were compiled and composed together in a fi-nite state network.
We applied the network of all therules described above for all the different issues tothe lower side of the lexicon network.
We then car-ried out tests for both analysis and generation.
Wedid both negative testing and positive testing.
Pos-itive involved testing the system on the words thatwere part of the lexicon.
These we found were allcorrectly analysed.
Below are some of the results:apply up> ikigorigoriiki[CL7-SG]gori[stem_redupli][noun]apply up> kugendagendaku[Inf]genda[stem_redupli][verb]Demonstratives with nga insertionaka[DEM-12][dem_redupli][Demonst]akongakoako[DEM-12][dem_redupli][Demonst]Nasal insertiongutontomaku[Inf][Redupli]toma[verb]Complex consonantskunyunyuzaku[Inf][Redupli]Nuza[verb]Full stem reduplicationgusomasomaku[Inf]soma[stem_redupli][verb]Full word reduplicationmuninimuninimunini+Adjective+ReduplicNegative testing involved selecting words fromour untagged corpus of Kinyarwanda.
Since thesewords were not part of the lexicon, they were notrecognized and were then duly added to the lexicon.Adding a new word to the lexicon is very easy sinceit only involves identifying the reduplicating part ofthe word and it is then added to the appropriate sub-lexicon.
This testing will be continued as we dis-cover new reduplicated words.The tests indicated above were manual tests.
Wecreated another test set to be carried out automat-ically.
In this case we created a test file with about100 known reduplicated forms of different word cat-egories in Kinyarwanda.
The results indicated thatthe earlier problems due to unbounded reduplica-tion: complex consonants, insertion of nasals andthe prefix /nga/ have now been fully solved.5 ConclusionThe solutions provided in this paper have demon-strated that existing extended finite state methods aresufficient to handle all forms of reduplication in Kin-yarwanda.
The hybrid approach proposed in this pa-per makes it easy to handle all forms of reduplicationproblems attested in Kinyarwanda language.
Thisapproach could also be used with other problems inmorphological analysis.
The finite state developercan solve morphological problems using the mostappropriate approach depending on whether what isbeing replaced is a symbol or a string.79ReferencesAntworth, E.,L.
1990.
PC-KIMMO: a Two-level Proces-sor for Morphological Analysis.
No.
16 in OccasionalPublications in academic computing.
Dallas: SummerInstitute of Linguistics.Beesley, K. AND Karttunen L. 2003.
Finite State Mor-phology: CSLI Studies in Computational Linguistics.Stanford University, CA: CSLI Publications.Guthrie, M. 1971.
Comparative Bantu.
Vol.
I-IV.
Farn-borough: Gregg International.Hurskainen, A.
1992.
A two-level computer formalism forthe analysis of Bantu Morphology an application toSwahili Nordic journal of African studies 1(1): 87-119(1992)Karttunen, L., Kaplan, R., and Zaenen, A., (1992).
Two-level morphology with composition.
Xerox Palo AltoResearch Center - Center for the Study of Languageand Information.
Stanford University.Karttunen, L. 1995.
The replace Operator.
Proceedingsof ACL-95, pp 16-23, Boston Massachusetts.Karttunen, L., Beesley, K. R. 2005.
Twenty-five yearsof finite-state morphology.
In Inquiries Into Words, aFestschrift for Kimmo Koskenniemi on his 60th Birth-day, CSLI Studies in Computational Linguistics.
Stan-ford CA: CSLI; 2005; 71-83.Kay, M., Kaplan, R. 1994.
Regular Models of Phonolog-ical rule systems Computational Linguistics, Specialissue on Computational phonology, pg 331-378Kimenyi, A.
1986.
Syntax and semantics of reduplica-tion: A semiotic account La Linguistique Vol 22 Fasc2/1986Kimenyi, A.
2004.
Kinyarwanda morphology In the In-ternational Handbook for inflection and word forma-tion vol2.Koskenniemi, K. 1983.
Two-level morphology: a gen-eral computational model for word-form recognitionand production.
Publication No.
11.
University ofHelsinki: Department of General Linguistics.Muhirwe, J. and V. Baryamureeba 2007.
Towards Com-putational Morphological Analysis for Kinyarwanda.Proceedings of the 1st International conference onComputer science and informatics,Feb 2007, Nairobi,Kenya.Roark, B and Sproat, R. 2007.
Computational Ap-proaches to Morphology and Syntax.
Oxford Univer-sity Press, in press.Trosterud, T and Uibo, H. 2005.
Consonant gradationin Estonian and Smi: two-level solution In: Inquiriesinto Words, Constraints and Contexts.
Festschrift inthe Honour of Kimmo Koskenniemi 60th anniversary.CSLI Publications 2005.80
