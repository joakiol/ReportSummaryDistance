Spelling Correction Using Context*Mohammad Ali E lmi  and Mar tha  EvensDepartment of Computer Science, Illinois Institute of Technology10 West 31 Street, Chicago, Illinois 60616 (csevens@rninna.iit.edu)AbstractThis paper describes a spelling correction systemthat functions as part of an intelligent tutor that car-ries on a natural anguage dialogue with its users.The process that searches the lexicon is adaptive asis the system filter, to speed up the process.
Thebasis of our approach is the interaction between theparser and the spelling corrector.
Alternative cor-rection targets are fed back to the parser, whichdoes a series of syntactic and semantic hecks,based on the dialogue context, the sentence con-text, and the phrase context.1.
IntroductionThis paper describes how context-dependent spell-ing correction is performed in a natural anguagedialogue system under control of the parser.
Ourspelling correction system is a functioning part ofan intelligent tutoring system called Circsim-Tutor\[Elmi, 94\] designed to help medical students learnthe language and the techniques for causal reason-ing necessary to solve problems in cardiovascularphysiology.
The users type in answers to questionsand requests for information.In this kind of man-machine dialogue, spellingcorrection is essential.
The input is full of errors.Most medical students have little experience withkeyboards and they constantly invent novel abbre-viations.
After typing a few characters of a longword, users often decide to quit.
Apparently, theuser types a few characters and decides that (s)hehas given the reader enough of a hint, so we get'spec' for 'specification.'
The approach to spellingcorrection is necessarily different from that used inword processing or other authoring systems, whichsubmit candidate corrections and ask the user tomake a selection.
Our system must make automaticcorrections and make them rapidly since the sys-tem has only a few seconds to parse the studentinput, update the student model, plan the appropri-ate response, turn it into sentences, and displaythose sentences on the screen.Our medical sublanguage contains many long*This work was supported by the Cognitive Science Pro-gram, Office of Naval Research under Grant No.
N00014-94-1-0338, to Illinois Institute of Technology.
The content doesnot reflect he position or policy of the government and noofficial endorsement should be inferred.phrases that are used in the correction process.
Ourfiltering system is adaptive; it begins with a wideacceptance interval and tightens the filter as bettercandidates appear.
Error weights are position-sen-sitive.
The parser accepts everal replacement can-didates for a misspelled string from the spellingcorrector and selects the best by applying syntacticand semantic rules.
The selection process isdynamic and context-dependent.
We believe thatour approach as significant potential applicationsto other types of man-machine dialogues, espe-cially speech-understanding systems.
There areabout 4,500 words in our lexicon.2.
Spelling Correction MethodThe first step in spelling correction is the detectionof an error.
There are two possibilities:1.
The misspelled word is an isolated word, e.g.
'teh' for 'the.'
The Unix spell program is based onthis type of detection.2.
The misspelled word is a valid word, e.g.
'of' inplace of "if.'
The likelihood of errors that occurwhen words garble into other words increases asthe lexicon gets larger \[Peterson 86\].
Golding andSchabes \[96\] present a system based on trigramsthat addresses the problem of correcting spellingerrors that result in a valid word.We have limited the detection of spelling errorsto isolated words.
Once the word S is chosen forspelling correction, we perform a series of steps tofind a replacement candidate for it.
First, a set ofwords from the lexicon is chosen to be comparedwith S. Second, a configurable number of wordsthat are close to S are considered as candidates forreplacement.
Finally, the context of the sentence isused for selecting the best candidate; syntactic andsemantic information, as well as phrase lookup,can help narrow the number of candidates.The system allows the user to set the limit onthe number of errors.
When the limit is set to k, theprogram finds all words in the lexicon that have upto k mismatches with the misspelled word.3.
A lgor i thm for  Compar ing  Two WordsThis process, given the erroneous tring S and theword from the lexicon W, makes the minimumnumber of deletions, insertions, and replacementsin S to transform it to W. This number is referred to360as the edit distance.
The system ignores charactercase mismatch.
The error categories are:Error Type Examplereversed order haert heartmissing character hert heartadded character hueart heartchar.
substitution huart heartWe extended the edit distance by assigningweights to each correction which takes into accountthe position of the character in error.
The errorweight of 90 is equivalent to an error distance ofone.
If the error appears at the initial position, theerror weight is increased by 10%.
In character sub-stitution if the erroneous character is a neighboringkey of the character on the keyboard, or if the char-acter has a similar sound to that of the substitutedcharacter, the error weight is reduced by 10%.3.1 Three Way Match Method.
Our string com-parison is based on the system developed by Leeand Evens \[92\].
When the character at location n ofS does not match the character at location m of W,we have an error and two other comparisons aremade.
The three way comparison, and the order ofthe comparison is shown below:C(1Comparison ame Comparison umber1 2 3no error Treversed order F T Tmissing character F F Tadded character F T Fchar.
substitution F F FFor example, to convert the misspelled stringhoose to choose, the method declares missing char-acter 'c' in the first position since the character h inhoose matches the second character in choose.The three way match (3wm) is a fast and simplealgorithm with a very small overhead.
However, ithas potential problems \[Elmi, 94\].
A few examplesare provided to illustrate the problem, and then ourextension to the algorithm is described.
Let char(n)indicate the character at location n of the erroneousword, and char(m) indicate the character at locationm of the word from the lexicon.3.1.1 Added Character Error.
If the character oof choose is replaced with an a, we get: chaose.
The3wm transforms chaose to choose in two steps:drops a and inserts an o.Solution: When the 3win detects an added char-acter error, and char(n+l)=char(m+l) andchar(n+2)~ char(m+l), we change the error tocharacter substitution type.
The algorithm replaces'a' with an 'o' in cha_ose to correct it to choose.3.1.2 Missing Character Error.
If o in chooseis replaced with an s_, we get the string: chosse.
The3wm method converts chosse to choose in twosteps: insert 'o' and drop the second s.Solution: When the 3wm detects a missingcharacter and char(n+l)=char(m+l), we check forthe following conditions: char(n+l)~-char(m+2), orchar(n+2)=char(m+2).
In either case we change theerror to "character substitution".
The algorithmreplaces 's' with 'o' in chosse to correct it tochoose.
Without the complementary conditions, thealgorithm does not work properly for convertingcoose to choose, instead of inserting an h, itreplaces o with an h, and inserts an o before s.3.1.3 Reverse Order Error.
If a in canary isdropped, we get: cnary.
The 3win converts cnary tocanary with two transformations: 1) reverse order'na': canry and 2) insert an 'a': canary.Similarly, if the character a is added to unary,we get the string: ua_nary.
The 3wm convertsuanary to unary with two corrections: 1) reverseorder 'an': un__aary and 2) drop the second 'a':unary.Solution: When the 3wm detects a reverse orderand char(n+2) ?
char(m+2), we change the error to:?
Missing character error: if char(n+l) =char(m+2).
Insert char(m) at location n of themisspelled word.
The modified algorithminserts 'a' in cnary to correct it to canary.?
Added character error: if char(n+2) =char(m+l).
Drop char(n).
The algorithm drops'a' in uanary to correct it to unary.3.1.4 Two Mismatching Characters.
The finalcaveat in the three way match algorithm is that thealgorithm cannot handle two or more consecutiveerrors.
If the two characters at locations n and n+lof S are extra characters, or the two characters atlocations m and m+l of W are missing in S, we getto an obvious index synchronization, and we havea disaster.
For example, the algorithm comparesenabcyclopedic to encyclopedic and reports ninesubstitutions and two extra characters.Handling errors of this sort is problematic for361many spelling corrector systems.
For instance,both FrameMaker (Release 5) and Microsoft Word(Version 7.0a) detect e~__b.bcyclopedic as an error,but both fail to correct it to anything.
Also, whenwe delete the two characters 'yc' in encvglopedic,Microsoft Word detects enclopedic as an error butdoes not give any suggestions.
FrameMakerreturns: inculpated, uncoupled, and encapsulated.Solution: When comparing S with W we parti-tion them as S=xuz and W=xvz.
Where x is the ini-tial segment, z is the tail segment, u and v are theerror segments.
First, the initial segment isselected.
This segment can be empty if the initialcharacters of S and W do not match.
In an unlikelycase that S=W, this segment will contain the wholeword.
Second, the tail segment is selected, and canbe empty if the last characters of S and W are dif-ferent.
Finally, the error segments are the remain-ing characters of the two words:initial / error segment in S \[ tailsegment \[ error segment in W \] segmentUsing the modified algorithm, to compare thestring e~_.b.bcyclopedic, to the word encyclopedic, thematching initial segment is en and the matching tailsegment is cyclopedic.
The error segment for themisspelled word is ab and it is empty for encyclope-dic.
Therefore, the system concludes that there aretwo extra characters ab in ena_bbcyclopedic.4.
Selection of Words from the LexiconTo get the best result, the sure way is to comparethe erroneous word S with all words in the lexicon.As the size of the lexicon grows, this methodbecomes impractical since many words in a largelexicon are irrelevant to S. We have dealt with thisproblem in three ways.4.1 Adaptive Disagreement Threshold.
In orderto reduce the time spent on comparing S with irrel-evant words from the lexicon, we put a limit on thenumber of mismatches depending on the size of S.The disagreement threshold is used to terminatethe comparison of an irrelevant word with S, ineffect acting as a filter.
If the number is too high (aloose filter), we get many irrelevant words.
If thenumber is too low (a tight filter), a lot of good can-didates are discarded.
For this reason, we use anadaptive method that dynamically lowers the toler-ance for errors as better eplacement candidates arefound.The initial disagreement limit is set dependingon the size of S: 100 for one character strings, 51"length of S for two or more character strings.
Asthe two words are compared, the program keepstrack of the error weight.
As soon as the errorweight exceeds this limit, the comparison is termi-nated and the word from the lexicon is rejected as areplacement word.
Any word with error weightless than the disagreement limit is a candidate andis loaded in the replacement list.
After the replace-ment list is fully loaded, the disagreement limit islowered to the maximum value of disagreementamongst the candidates found so far.4.2 Use of the Initial Character.
Many studiesshow that few errors occur in the first letter of aword.
We have exploited this characteristic bystarting the search in the lexicon with words hav-ing the same initial letter as the misspelled word.The lexicon is divided into 52 segments (26lower case, 26 upper case) each containing all thewords beginning with a particular character.Within each segment he words are sorted inascending order of their character length.
Thiseffectively partitions the lexicon into subsegments(314 in our lexicon) that each contains words withthe same first letter and the same character size: wo: :owords .
.
- -4P '~ "~ words oflength I ~ length 2The order of the search in the lexicon is depen-dent on the first letter of the misspelled word, chr.The segments are dynamically linked as follows:1.
The segment with the initial character chr.2.
The segment with the initial character as reversecase of chr.3.
The segments with a neighboring character of chras the initial character in a standard keyboard.4.
The segments with an initial character that has asound similar to chr.5.
The segment with the initial character as thesecond character of the misspelled word.6.
The rest of the segments.4.3 Use of the Word Length.
When comparingthe misspelled string S with length len to the wordW of the lexicon with length len+j, in the best casescenario, we have at leastj missing characters in Sfor positive value of j, and j extra characters in S362for negative value ofj.
With the initial error weightof 51*len, the program starts with the maximumerror limit of limit=len/2.
We only allow compari-son of words from the lexicon with the characterlength between len-limit and len+limit.Combining the search order with respect o theinitial character and the word length limit, the cor-rection is done in multiple passes.
In each alpha-betical segment of the lexicon, S is compared withthe words in the subsegments containing the wordswith length lend: i, where 0 < i < limit.
For eachvalue of i there is at least i extra characters in Scompared to a word of length len-i.
Similarly, thereis at least i missing characters in S compared to aword of length len+i.
Therefore, for each i in thesubsegments containing the words with lengthlen + i, we find all the words with error distance of ior higher.
At any point when the replacement list isloaded with words with the maximum error dis-tance of i the program terminates.5.
Abbrev ia t ion  Hand l ingAbbreviations are considered only in the segmentswith the same initial character as the first letter ofthe misspelled word and its reverse character case.In addition to the regular comparison of themisspelled string S with the words with the charac-ter length between len-limit and len+limit, for eachword W of the lexicon with the length len+m wherem>limit, we compare its first len characters to S. Ifthere is any mismatch, W is rejected.
Otherwise, Sis considered an abbreviation of W.6.
Word  Boundary  Er rorsWord boundaries are defined by space charactersbetween two words.
The addition or absence of thespace character is the only error that we allow inthe word boundary errors.
The word boundaryerrors are considered prior to regular spelling cor-rections in the following steps:1.
S is split into two words with character lengths n,and m, where n+m=len and l~n<len.
If both ofthese two words are valid words, the process ter-minates and returns the two split words.
For ex-ample, 'upto' will be split into 'u_ pto' for n=l, 'u_12to' for n=2.
At this point since both words 'up'and 'to' are valid words, the process terminates.2.
Concatenate S with the next input word S 2.
If theresult is a valid word, return the result as thereplacement for S and S 2.
For example, the string"specifi' in "soecifi cation" is detected as an errorand is combined with "cation' to produce the word"specification."
Otherwise,3.
Concatenate S with the previous input word S 1.
Ifthe result is a valid word, return the result as thereplacement for S and S 1.
For example, in theinput 'specific ation' the word 'specific' is a validword and we realize we have a misspelled wordwhen we get to "ation.'
In this case, 'ation' iscombined with the previous word 'specific' andthe valid word "specification' is returned.7.
Using the ContextIt is difficult to arrive at a perfect match for a mis-spelled word most of the time.
Kukich \[92\] pointsout that most researchers report accuracy levelsabove 90% when the first three candidates are con-sidered instead of the first guess.
Obviously, thesyntax of the language is useful for choosing thebest candidate among a few possible matchingwords when there are different parts of speechamong the candidates.
Further help can be obtainedby applying semantic rules, like the tense of theverb with respect o the rest of the sentence, orinformation about case arguments.This approach is built on the idea that the parseris capable of handling a word with multiple partsof speech and multiple senses within a part ofspeech \[Elmi and Evens 93\].
The steps for spellingcorrection and the choice of the best candidates areorganized as follows:I.
Detection: The lexical analyzer detects that thenext input word w is misspelled.2.
Correction: The spelling corrector creates a listof replacement words: ((wl el)... (w nen)), where W iis a replacement word, and e i is the associatederror weight.
The list is sorted in ascending orderof e i.
The error weights are dropped, and thereplacement list (W i Wj ...) is returned.3.
Reduction: The phrase recognizer checkswhether any word in the replacement list can becombined with the previous/next input word(s) toform a phrase.
If a phrase can be constructed, theword that is used in the phrase is considered theonly replacement candidate and the rest of thewords in the replacement list are ignored.4.
Part of speech assignment: If w i has n parts ofspeech: Pl, P2, ..., Pn the lexical analyzer replaces wiin the list with: (pl wi) (P2 wi)... (Pn wi).
Then,factors out the common part of speech, p, in: (p w i)(p wj) as: (p w i wj).
The replacement list: ((p!
w iwj...) (p2 w k w m ...)...) is passed to the parser.5.
Syntax analysis: The parser examines eachsublist (p w i wj ...) of replacement list for the partof speech p and discards the sublists that violatethe syntactic rules.
In each parse tree a word can363have a single part of speech, so no two sublists ofthe replacement list are in the same parse tree.6.
Semantic analysis: If w i has n senses (s 1, s~ .... sn)with the part of speech p, and w, has m senses (t 1,t2, t m) ?
J .... with the part of speech p, the sublist (p w iwj ...) is replaced with (p s 1, s~ .... s~ t 1, t 2, .... t m ...).The semantic analyzer works with one parse treeat a time and examines all senses of the words andrejects any entry that violates the sematic rules.8.
Empirical Results from Circsim-TutorWe used the text of eight sessions by human tutorsand performed the spelling correction.
The textcontains 14,703 words.
The program detected 684misspelled words and corrected all of them but twoword boundary errors.
There were 336 wordboundary errors, 263 were split words that werejoined (e.g., 'nerv' and 'ous' for nervous) and 73were joined words that were split (e.g., ofone for'of' and 'one').
Also, 60 misspelled words werepart of a phrase.
Using phrases, the system cor-rected 'end dia volum' to: 'end diastolic volume.
'The two word boundary failures resulted fromthe restriction of not having any error except headdition or the absence of a space character.
Thesystem attempts to correct hem individually:... quite a sop\[h isticated one ....... is a deter miniic statement ...9.
Per fo rmance  with a Large  LexiconTo discover whether this approach would scale upsuccessfully we added 102,759 words from theCollins English Dictionary to our lexicon.
The newlexicon contains 875 subsegments following thetechnique described in section 4.2.Consider the misspelled string ater \[Kukich,92\].
The program started the search in the subseg-ments with character length of 3, 4, and 5 andreturned: A~er Aten Auer after alter as_ter ate avertater water.
Note that character case is ignored.Overall, the program compared 3,039 wordsfrom the lexicon to 'ater', eliminating the compari-son of 99,720 (102759-3039) irrelevant words.Only the segments with the initial characters'aAqwszQWSZt' were searched.
Note that charac-ters 'qwsz' are adjacent keys to "a.'
With the earlytermination of irrelevant words, 1,810 of thesewords were rejected with the comparison of thesecond character.
Also, 992 of the words wererejected with the comparison of the third character.This took 90 milliseconds in a PC using the Alle-gro Common Lisp.We looked for all words in the lexicon that haveerror distance of one from ater.
The program used12,780 words of length 3, 4, and 5 character to findthe following 16 replacement words: Ayer AtenAuer after alter aster ate aver cater eater eter latermaterpater tater water.
Out of these 12,780 words,11,132 words were rejected with the comparison ofthe second character and 1,534 with the compari-son of the third character.Finally, lets look at an example with the error inthe first position.
The program corrected the mis-spelled string: 'rogram' into: grogram programengram roam isogram ogham pogrom.
It used32,128 words from the lexicon.
Out of these32,128 words, 3,555 words were rejected with thecomparison of the second character, 21,281 wordswere rejected with the comparison of the thirdcharacter, 5,778 words were rejected at the fourthcharacter, and 1,284 at the fifth character.10.
SummaryOur spelling correction algorithm extends the threeway match algorithm and deals with word bound-ary problems and abbreviations.
It can handle avery large lexicon and uses context by combiningparsing and spelling correction.The first goal of our future research is to detecterrors that occur when words garble into otherwords in the lexicon, as form into from.
We thinkthat our approach of combining the parser and thespelling correction system should help us here.11.
ReferencesElmi, M. 1994.
A Natural Language Parser withInterleaved Spelling Correction, Supporting Lex-ical Functional Grammar and Ill-formed Input.Ph.D.
Dissertation, Computer Science Dept., Illi-nois Institute of Technology, Chicago, IL.Elmi, M., Evens, M. 1993.
An Efficient NaturalLanguage Parsing Method.
Proc.
5 th MidwestArtificial Intelligence and Cognitive ScienceConference, April, Chesterton, IN, 6-10.Golding, A., Schabes, Y., 1996.
Combining Tri-gram-based and Feature-based Methods for Con-text-Sensitive Spelling Correction.
Proc.
34 thACL, 24-27 June, 71-78.Kukich, K. 1992.
Techniques for AutomaticallyCorrecting Words in Text.
ACM Computing Sur-veys, Vol.
24, No.
4, 377-439.Lee, Y., Evens, M. 1992.
Ill-Formed Natural InputHandling System for an Intelligent Tutoring Sys-tem.
The Second Pacific Rim Int.
Conf.
on ALSeoul, Sept 15-18, 354-360.Peterson, J.
1986.
A Note on Undetected TypingErrors.
Commun.
ACM, Vol.
29, No.
7, 633-637.364
