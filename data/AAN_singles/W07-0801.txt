Proceedings of the 5th Workshop on Important Unresolved Matters, pages 1?8,Prague, Czech Republic, June 2007. c?2007 Association for Computational LinguisticsElixirFM ?
Implementation of Functional Arabic MorphologyOtakar Smrz?Institute of Formal and Applied LinguisticsFaculty of Mathematics and PhysicsCharles University in Pragueotakar.smrz@mff.cuni.czAbstractFunctional Arabic Morphology is a formula-tion of the Arabic inflectional system seek-ing the working interface between morphol-ogy and syntax.
ElixirFM is its high-levelimplementation that reuses and extends theFunctional Morphology library for Haskell.Inflection and derivation are modeled interms of paradigms, grammatical categories,lexemes and word classes.
The computationof analysis or generation is conceptually dis-tinguished from the general-purpose linguis-tic model.
The lexicon of ElixirFM is de-signed with respect to abstraction, yet is nomore complicated than printed dictionaries.It is derived from the open-source Buckwal-ter lexicon and is enhanced with informationsourcing from the syntactic annotations ofthe Prague Arabic Dependency Treebank.1 OverviewOne can observe several different streams both in thecomputational and the purely linguistic modeling ofmorphology.
Some are motivated by the need to ana-lyze word forms as to their compositional structure,others consider word inflection as being driven bythe underlying system of the language and the for-mal requirements of its grammar.In Section 2, before we focus on the principles ofElixirFM, we briefly follow the characterization ofmorphological theories presented by Stump (2001)and extend the classification to the most promi-nent computational models of Arabic morphology(Beesley, 2001; Buckwalter, 2002; Habash et al,2005; El Dada and Ranta, 2006).In Section 3, we survey some of the categories ofthe syntax?morphology interface in Modern WrittenArabic, as described by the Functional Arabic Mor-phology.
In passing, we will introduce the basic con-cepts of programming in Haskell, a modern purelyfunctional language that is an excellent choice fordeclarative generative modeling of morphologies, asForsberg and Ranta (2004) have shown.Section 4 will be devoted to describing the lexiconof ElixirFM.
We will develop a so-called domain-specific language embedded in Haskell with whichwe will achieve lexical definitions that are simulta-neously a source code that can be checked for con-sistency, a data structure ready for rather indepen-dent processing, and still an easy-to-read-and-editdocument resembling the printed dictionaries.In Section 5, we will illustrate how rules of in-flection and derivation interact with the parametersof the grammar and the lexical information.
We willdemonstrate, also with reference to the FunctionalMorphology library (Forsberg and Ranta, 2004), thereusability of the system in many applications, in-cluding computational analysis and generation invarious modes, exploring and exporting of the lex-icon, printing of the inflectional paradigms, etc.2 Morphological ModelsAccording to Stump (2001), morphological theoriescan be classified along two scales.
The first onedeals with the core or the process of inflection:lexical theories associate word?s morphosyntacticproperties with affixesinferential theories consider inflection as a result ofoperations on lexemes; morphosyntactic prop-1erties are expressed by the rules that relate theform in a given paradigm to the lexemeThe second opposition concerns the question ofinferability of meaning, and theories divide into:incremental words acquire morphosyntactic prop-erties only in connection with acquiring the in-flectional exponents of those propertiesrealizational association of a set of properties witha word licenses the introduction of the expo-nents into the word?s morphologyEvidence favoring inferential?realizational theo-ries over the other three approaches is presented byStump (2001) as well as Baerman et al (2006) orSpencer (2004).
In trying to classify the implemen-tations of Arabic morphological models, let us re-consider this cross-linguistic observation:The morphosyntactic properties associ-ated with an inflected word?s individ-ual inflectional markings may underdeter-mine the properties associated with theword as a whole.
(Stump, 2001, p. 7)How do the current morphological analyzers in-terpret, for instance, the number and gender of theArabic broken masculine plurals g?udud XYg.
newones or qud.
a?h?A??
judges, or the case of mustawan??J??
a level?
Do they identify the values of thesefeatures that the syntax actually operates with, or isthe resolution hindered by some too generic assump-tions about the relation between meaning and form?Many of the computational models of Arabicmorphology, including in particular (Beesley, 2001),(Ramsay and Mansur, 2001) or (Buckwalter, 2002),are lexical in nature.
As they are not designed inconnection with any syntax?morphology interface,their interpretations are destined to be incremental.Some signs of a lexical?realizational system canbe found in (Habash, 2004).
The author mentionsand fixes the problem of underdetermination of in-herent number with broken plurals, when develop-ing a generative counterpart to (Buckwalter, 2002).The computational models in (Soudi et al, 2001)and (Habash et al, 2005) attempt the inferential?realizational direction.
Unfortunately, they imple-ment only sections of the Arabic morphological sys-tem.
The Arabic resource grammar in the Grammat-ical Framework (El Dada and Ranta, 2006) is per-haps the most complete inferential?realizational im-plementation to date.
Its style is compatible withthe linguistic description in e.g.
(Fischer, 2001) or(Badawi et al, 2004), but the lexicon is now verylimited and some other extensions for data-orientedcomputational applications are still needed.ElixirFM is inspired by the methodology in (Fors-berg and Ranta, 2004) and by functional program-ming, just like the Arabic GF is (El Dada and Ranta,2006).
Nonetheless, ElixirFM reuses the Buckwal-ter lexicon (2002) and the annotations in the PragueArabic Dependency Treebank (Hajic?
et al, 2004),and implements yet more refined linguistic model.3 Morphosyntactic CategoriesFunctional Arabic Morphology and ElixirFM re-establish the system of inflectional and inher-ent morphosyntactic properties (alternatively namedgrammatical categories or features) and distinguishprecisely the senses of their use in the grammar.In Haskell, all these categories can be representedas distinct data types that consist of uniquely identi-fied values.
We can for instance declare that the cate-gory of case in Arabic discerns three values, that wealso distinguish three values for number or person,or two values of the given names for verbal voice:data Case = Nominative | Genitive |Accusativedata Number = Singular | Dual | Pluraldata Person = First | Second | Thirddata Voice = Active | PassiveAll these declarations introduce new enumeratedtypes, and we can use some easily-defined meth-ods of Haskell to work with them.
If we load this(slightly extended) program into the interpreter,1 wecan e.g.
ask what category the value Genitive be-longs to (seen as the :: type signature), or have itevaluate the list of the values that Person allows:?
:type Genitive ?
Genitive :: Case?
enum :: [Person] ?
[First,Second,Third]Lists in Haskell are data types that can beparametrized by the type that they contain.
So, thevalue [Active, Active, Passive] is a list of threeelements of type Voice, and we can write this if nec-essary as the signature :: [Voice].
Lists can also1http://www.haskell.org/2be empty or have just one single element.
We denotelists containing some type a as being of type [a].Haskell provides a number of useful types al-ready, such as the enumerated boolean type or theparametric type for working with optional values:data Bool = True | Falsedata Maybe a = Just a | NothingSimilarly, we can define a type that couples othervalues together.
In the general form, we can writedata Couple a b = a :-: bwhich introduces the value :-: as a container forsome value of type a and another of type b.2Let us return to the grammatical categories.
In-flection of nominals is subject to several formal re-quirements, which different morphological modelsdecompose differently into features and values thatare not always complete with respect to the inflec-tional system, nor mutually orthogonal.
We will ex-plain what we mean by revisiting the notions of stateand definiteness in contemporary written Arabic.To minimize the confusion of terms, we will de-part from the formulation presented in (El Dada andRanta, 2006).
In there, there is only one relevantcategory, which we can reimplement as State?
:data State?
= Def | Indef | ConstVariation of the values of State?
would enable gen-erating the forms al-kita?bu H. AJ?
?
@ def., kita?bunH.
AJ?indef., and kita?bu H. AJ?
const.
for the nominativesingular of book.
This seems fine until we exploremore inflectional classes.
The very variation for thenominative plural masculine of the adjective highgets ar-raf????una???J?Q?
@ def., raf????una??
?J?P in-def., and raf???
?u ?
?J?P const.
But what value doesthe form ar-raf???
?u ?
?J?Q?
@, found in improper annex-ations such as in al-mas?
?ulu?na ?r-raf???
?u ?l-mustawa???J?
??
@ ??J?Q?
@??????
??
@ the-officials the-highs-of the-level, receive?It is interesting to consult for instance (Fischer,2001), where state has exactly the values of State?,but where the definite state Def covers even formswithout the prefixed al- ?
@ article, since also someseparate words like la?
Bno or ya?
AKoh can have theeffects on inflection that the definite article has.
Todistinguish all the forms, we might think of keeping2Infix operators can also be written as prefix functions if en-closed in ().
Functions can be written as operators if enclosedin ??.
We will exploit this when defining the lexicon?s notation.state in the sense of Fischer, and adding a booleanfeature for the presence of the definite article .
.
.However, we would get one unacceptable combina-tion of the values claiming the presence of the def-inite article and yet the indefinite state, i.e.
possiblythe indefinite article or the diptotic declension.Functional Arabic Morphology refactors the sixdifferent kinds of forms (if we consider all inflec-tional situations) depending on two parameters.
Thefirst controls prefixation of the (virtual) definite arti-cle, the other reduces some suffixes if the word is ahead of an annexation.
In ElixirFM, we define theseparameters as type synonyms to what we recall:type Definite = Maybe Booltype Annexing = BoolThe Definite values include Just True forforms with the definite article, Just False forforms in some compounds or after la?
Bor ya?
AK(absolute negatives or vocatives), and Nothing forforms that reject the definite article for other reasons.Functional Arabic Morphology considers state asa result of coupling the two independent parameters:type State = Couple Definite AnnexingThus, the indefinite state Indef describes a wordvoid of the definite article(s) and not heading an an-nexation, i.e.
Nothing :-: False.
Conversely, ar-raf???
?u ?
?J?Q?
@ is in the state Just True :-: True.The classical construct state is Nothing :-: True.The definite state is Just _ :-: False, where _ isTrue for El Dada and Ranta and False for Fischer.We may discover that now all the values of Stateare meaningful.3Type declarations are also useful for defining inwhat categories a given part of speech inflects.
Forverbs, this is a bit more involved, and we leave it forFigure 2.
For nouns, we set this algebraic data type:data ParaNoun = NounS Number Case StateIn the interpreter, we can now generate all 54combinations of inflectional parameters for nouns:?
[ NounS n c s | n <- enum, c <- enum,s <- values ]The function values is analogous to enum, and bothneed to know their type before they can evaluate.3With Just False :-: True, we can annotate e.g.
the?incorrectly?
underdetermined raf???
?u ?
?J?P in hum-u ?l-mas?
?ulu?-na raf???
?u ?l-mustawa?
??J???
@ ?
?J?P????????
@ ??
they-are the-officials highs-of the-level, i.e.
they are the high-level officials.3The ?magic?
is that the bound variables n, c, and shave their type determined by the NounS constructor,so we need not type anything explicitly.
We used thelist comprehension syntax to cycle over the lists thatenum and values produce, cf.
(Hudak, 2000).4 ElixirFM LexiconUnstructured text is just a list of characters, or string:type String = [Char]Yet words do have structure, particularly in Arabic.We will work with strings as the superficial wordforms, but the internal representations will be moreabstract (and computationally more efficient, too).The definition of lexemes can include the deriva-tional root and pattern information if appropriate,cf.
(Habash et al, 2005), and our model will encour-age this.
The surface word kita?b H. AJ?
book can de-compose to the triconsonantal root k t b I.J?
and themorphophonemic pattern FiCAL of type PatternT:data PatternT = FaCaL | FAL | FaCY |FiCAL | FuCCAL | {- ... -}MustaFCaL | MustaFaCLderiving (Eq, Enum, Show)The deriving clause associates PatternT withmethods for testing equality, enumerating all the val-ues, and turning the names of the values into strings:?
show FiCAL ?
"FiCAL"We choose to build on morphophonemic patternsrather than CV patterns and vocalisms.
Words likeistag?a?b H.
Aj.J?
@ to respond and istag?wab H.?j.J?
@to interrogate have the same underlying VstVCCVCpattern, so information on CV patterns alone wouldnot be enough to reconstruct the surface forms.
Mor-phophonemic patterns, in this case IstaFAL andIstaFCaL, can easily be mapped to the hypotheticalCV patterns and vocalisms, or linked with each otheraccording to their relationship.
Morphophonemicpatterns deliver more information in a more com-pact way.
Of course, ElixirFM provides functionsfor properly interlocking the patterns with the roots:?
merge "k t b" FiCAL ?
"kitAb"?
merge "?g w b" IstaFAL ?
"ista?gAb"?
merge "?g w b" IstaFCaL ?
"ista?gwab"?
merge "s ?
l" MaFCUL ?
"mas?Ul"?
merge "z h r" IFtaCaL ?
"izdahar"The izdahar Q?X 	P@ to flourish case exemplifies thatexceptionless assimilations need not be encoded inthe patterns, but can instead be hidden in rules.The whole generative model adopts the multi-purpose notation of ArabTEX (Lagally, 2004) as ameta-encoding of both the orthography and phonol-ogy.
Therefore, instantiation of the "?"
hamza car-riers or other merely orthographic conventions donot obscure the morphological model.
With EncodeArabic4 interpreting the notation, ElixirFM can atthe surface level process the original Arabic script(non-)vocalized to any degree or work with somekind of transliteration or even transcription thereof.Morphophonemic patterns represent the stems ofwords.
The various kinds of abstract prefixes andsuffixes can be expressed either as atomic values, oras literal strings wrapped into extra constructors:data Prefix = Al | LA | Prefix Stringdata Suffix = Iy | AT | At | An | Ayn |Un | In | Suffix Stringal = Al; lA = LA -- function synonymsaT = AT; ayn = Ayn; aN = Suffix "aN"Affixes and patterns are arranged together viathe Morphs a data type, where a is a triliteral pat-tern PatternT or a quadriliteral PatternQ or a non-templatic word stem Identity of type PatternL:data PatternL = Identitydata PatternQ = KaRDaS | KaRADiS {- ... -}data Morphs a = Morphs a [Prefix] [Suffix]The word la?-silk?
?y ????
Bwireless can thus bedecomposed as the root s l k ???
and the valueMorphs FiCL [LA] [Iy].
Shunning such concreterepresentations, we define new operators >| and |<that denote prefixes, resp.
suffixes, inside Morphs a:?
lA >| FiCL |< Iy ?
Morphs FiCL [LA][Iy]Implementing >| and |< to be applicable in the in-tuitive way required Haskell?s multi-parameter typeclasses with functional dependencies (Jones, 2000):class Morphing a b | a -> b wheremorph :: a -> Morphs binstance Morphing (Morphs a) a wheremorph = idinstance Morphing PatternT PatternT wheremorph x = Morphs x [] []The instance declarations ensure how the morphmethod would turn values of type a into Morphs b.4http://sf.net/projects/encode-arabic/4|> "k t b" <| [FaCaL ?verb?
[ "write", "be destined" ] ?imperf?
FCuL,FiCAL ?noun?
[ "book" ] ?plural?
FuCuL,FiCAL |< aT ?noun?
[ "writing" ],FiCAL |< aT ?noun?
[ "essay", "piece of writing" ] ?plural?
FiCAL |< At,FACiL ?noun?
[ "writer", "author", "clerk" ] ?plural?
FaCaL |< aT?plural?
FuCCAL,FuCCAL ?noun?
[ "kuttab", "Quran school" ] ?plural?
FaCACIL,MaFCaL ?noun?
[ "office", "department" ] ?plural?
MaFACiL,MaFCaL |< Iy ?adj?
[ "office" ],MaFCaL |< aT ?noun?
[ "library", "bookstore" ] ?plural?
MaFACiL ]Figure 1: Entries of the ElixirFM lexicon nested under the root k t b I.J?
using morphophonemic templates.Supposing that morph is available for the two types,(|<) is a function on y :: a and x :: Suffix giv-ing a value of type Morphs b.
The intermediate re-sult of morph y is decomposed, and x is prependedto the stack s of the already present suffixes.
(|<) :: Morphing a b =>a -> Suffix -> Morphs by |< x = Morphs t p (x : s)where Morphs t p s = morph yWith the introduction of patterns, their synony-mous functions and the >| and |< operators, we havestarted the development of what can be viewed as adomain-specific language embedded in the general-purpose programming language.
Encouraged by theflexibility of many other domain-specific languagesin Haskell, esp.
those used in functional parsing(Ljunglo?f, 2002) or pretty-printing (Wadler, 2003),we may design the lexicon to look like e.g.module Elixir.Data.Lexiconimport Elixir.Lexiconlexicon = listing {- lexicon?s header -}|> {- root one -} <| [ {- Entry a -} ]|> {- root two -} <| [ {- Entry b -} ]-- other roots or word stems and entriesand yet be a verifiable source code defining a datastructure that is directly interpretable.
The meaningof the combinators |> and <| could be supplied viaan external module Elixir.Lexicon, so is very easyto customize.
The effect of these combinators mightbe similar to the : and :-: constructors that we metpreviously, but perhaps other data structures mightbe built from the code instead of lists and pairs.Individual entries can be defined with functions ina convenient notational form using ??.
Infix opera-tors can have different precedence and associativity,which further increases the options for designing alightweight, yet expressive, embedded language.In Figure 1, each entry reduces to a record of typeEntry PatternT reflecting internally the lexeme?sinherent properties.
Consider one such reduction be-low.
Functions like plural or gender or humannesscould further modify the Noun?s default information:?
FiCAL |< aT ?noun?
[ "writing" ] ?noun (FiCAL |< aT) [ "writing" ] ?Entry (Noun [] Nothing Nothing)(morph (FiCAL |< aT))[ "writing" ] ?Entry (Noun [] Nothing Nothing)(Morphs FiCAL [] [AT])[ "writing" ]The lexicon of ElixirFM is derived from the open-source Buckwalter lexicon (Buckwalter, 2002).5 Wedevised an algorithm in Perl using the morpho-5Habash (2004) comments on the lexicon?s internal format.5data Mood = Indicative | Subjunctive | Jussive | Energetic deriving (Eq, Enum)data Gender = Masculine | Feminine deriving (Eq, Enum)data ParaVerb = VerbP Voice Person Gender Number| VerbI Mood Voice Person Gender Number| VerbC Gender Number deriving EqparaVerbC :: Morphing a b => Gender -> Number -> [Char] -> a -> Morphs bparaVerbC g n i = case n ofSingular -> case g of Masculine -> prefix i .
suffix ""Feminine -> prefix i .
suffix "I"Plural -> case g of Masculine -> prefix i .
suffix "UW"Feminine -> prefix i .
suffix "na"_ -> prefix i .
suffix "A"Figure 2: Excerpt from the implementation of verbal inflectional features and paradigms in ElixirFM.phonemic patterns of ElixirFM that finds the rootsand templates of the lexical items, as they are avail-able only partially in the original, and produces thelexicon in formats for Perl and for Haskell.Information in the ElixirFM lexicon can get evenmore refined, by lexicographers or by programmers.Verbs could be declared via indicating their deriva-tional verbal form (that would, still, reduce to someMorphs a value), and deverbal nouns and participlescould be defined generically for the extended forms.The identification of patterns as to their derivationalform is implemented easily with the isFormmethod:data Form = I | II | III | IV {- .. -} XV?
isForm VIII IFtaCaL ?
True?
isForm II TaKaRDuS ?
True?
filter (?isForm?
MuFCI) [I ..] ?
[IV]Nominal parts of speech need to be enhanced withinformation on the inherent number, gender and hu-manness, if proper modeling of linguistic agreementin Arabic is desired.6 Experiments with the PragueArabic Dependency Treebank (Hajic?
et al, 2004)show that this information can be learned from an-notations of syntactic relations (Smrz?, 2007).5 Morphological RulesInferential?realizational morphology is modeled interms of paradigms, grammatical categories, lex-emes and word classes.
ElixirFM implements thecomprehensive rules that draw the information from6Cf.
e.g.
(El Dada and Ranta, 2006; Kremers, 2003).the lexicon and generate the word forms given theappropriate morphosyntactic parameters.
The wholeis invoked through a convenient inflect method.The lexicon and the parameters determine thechoice of paradigms.
The template selection mecha-nism differs for nominals (providing plurals) and forverbs (providing all needed stem alternations in theextent of the entry specifications of e.g.
Hans Wehr?sdictionary), yet it is quite clear-cut (Smrz?, 2007).In Figure 2, the algebraic data type ParaVerbrestricts the space in which verbs are inflected bydefining three Cartesian products of the elementarycategories: a verb can have VerbP perfect forms in-flected in voice, person, gender, number, VerbI im-perfect forms inflected also in mood, and VerbC im-peratives inflected in gender and number only.7The paradigm for inflecting imperatives, the oneand only such paradigm in ElixirFM, is imple-mented as paraVerbC.
It is a function parametrizedby some particular value of gender g and number n.It further takes the initial imperative prefix i and theverbal stem (both inferred from the morphophone-mic patterns in the lexical entry) to yield the in-flected imperative form.
Note the polymorphic typeof the function, which depends on the following:prefix, suffix :: Morphing a b =>[Char] -> a -> Morphs bprefix x y = Prefix x >| ysuffix x y = y |< Suffix x7Cf.
(Forsberg and Ranta, 2004; El Dada and Ranta, 2006).6If one wished to reuse the paradigm and apply it onstrings only, it would be sufficient to equate thesefunctions with standard list operations, without anyneed to reimplement the paradigm itself.The definition of paraVerbC is simple and concisedue to the chance to compose with .
the partiallyapplied prefix and suffix functions and to virtu-ally omit the next argument.
This advanced formu-lation may seem not as minimal as when specifyingthe literal endings or prefixes, but we present it hereto illustrate the options that there are.
An abstractparadigm can be used on more abstract types thanjust strings.8 Inflected forms need not be mergedwith roots yet, and can retain the internal structure:?
paraVerbC Feminine Plural "u" FCuL ?Prefix "u" >| FCuL |< Suffix "na"?
merge "k t b" ({- previous value -}) ?
"uktubna" uktubna?.J?
@ fem.
pl.
write!?
[ merge "q r ?"
(paraVerbC g n "i"FCaL) | g <- values, n <- values ] ?masc.
: "iqra?"
iqra?@ Q?
@ sg.
"iqra?A" iqra?
?a@ Q?
@ du.
"iqra?UA" iqra?
?u @??
Q?
@ pl.fem.
: "iqra?I" iqra???
?GQ?
@ sg.
"iqra?A" iqra?
?a@ Q?
@ du.
"iqra?na" iqra?na?@ Q?
@ pl.
read!The highlight of the Arabic morphology is thatthe ?irregular?
inflection actually rests in strictly ob-serving some additional rules, the nature of whichis phonological.
Therefore, surprisingly, ElixirFMdoes not even distinguish between verbal and nomi-nal word formation when enforcing these rules.
Thisreduces the number of paradigms to the prototypical3 verbal and 5 nominal!
Yet, the model is efficient.Given that the morphophonemic patterns alreadydo reflect the phonological restrictions, the onlyplaces of further phonological interaction are theprefix boundaries and the junction of the last letter ofthe pattern with the very adjoining suffix.
The rulesare implemented with ->- and -<-, respectively, andare invoked from within the merge function:merge :: (Morphing a b, Template b) =>[Char] -> a -> [Char](->-) :: Prefix -> [Char] -> [Char](-<-) :: Char -> Suffix -> [Char]8Cf.
some morphology-theoretic views in Spencer (2004).?I?
-<- x = case x ofAT -> "iyaT" ; Un -> "Una"Iy -> "Iy" ; In -> "Ina"Suffix "" -> "i"Suffix "Una" -> "Una"Suffix "U" -> "U"Suffix "UW" -> "UW"Suffix "Ina" -> "Ina"Suffix "I" -> "I"Suffix x | x ?elem?
["i", "u"] -> "I"| x ?elem?
["iN", "uN"] -> "iN"| "n" ?isPrefixOf?
x ||"t" ?isPrefixOf?
x -> "I" ++ x_ -> "iy" ++ show x(-<-) is likewise defined when matching on ?Y?,?A?, ?U?, and when not matching.
(->-) imple-ments definite article assimilation and occasionalprefix interaction with weak verbs.Nominal inflection is also driven by the informa-tion from the lexicon and by phonology.
The readermight be noticing that the morphophonemic patternsand the Morphs a templates are actually extremelyinformative.
We can use them as determining the in-flectional class and the paradigm function, and thuswe can almost avoid other unintuitive or excessiveindicators of the kind of weak morphology, diptoticinflection, and the like.6 Applications and ConclusionThe ElixirFM linguistic model and the data of thelexicon can be integrated into larger applications orused as standalone libraries and resources.There is another, language-independent part ofthe system that implements the compilation of theinflected word forms and their associated mor-phosyntactic categories into morphological analyz-ers and generators.
This part is adapted from (Fors-berg and Ranta, 2004).
The method used for analysisis deterministic parsing with tries (Ljunglo?f, 2002).ElixirFM also provides functions for exportingand pretty-printing the linguistic model into XML,LATEX, Perl, SQL, and other custom formats.We have presented ElixirFM as a high-level func-tional implementation of Functional Arabic Mor-phology.
Next to some theoretical points, we pro-7posed a model that represents the linguistic datain an abstract and extensible notation that encodesboth orthography and phonology, and whose inter-pretation is customizable.
We developed a domain-specific language in which the lexicon is stored andwhich allows easy manual editing as well as auto-matic verification of consistency.
We believe that themodeling of both the written language and the spo-ken dialects can share the presented methodology.ElixirFM and its lexicons are open-source soft-ware licensed under GNU GPL and available onhttp://sf.net/projects/elixir-fm/.This work has been supported by the Ministry ofEducation of the Czech Republic (MSM00216208-38), by the Grant Agency of Charles University inPrague (UK 373/2005), and by the Grant Agency ofthe Czech Academy of Sciences (1ET101120413).ReferencesElsaid Badawi, Mike G. Carter, and Adrian Gully.
2004.Modern Written Arabic: A Comprehensive Grammar.Routledge.Matthew Baerman, Dunstan Brown, and Greville G. Cor-bett.
2006.
The Syntax-Morphology Interface.
AStudy of Syncretism.
Cambridge Studies in Linguis-tics.
Cambridge University Press.Kenneth R. Beesley.
2001.
Finite-State MorphologicalAnalysis and Generation of Arabic at Xerox Research:Status and Plans in 2001.
In EACL 2001 WorkshopProceedings on Arabic Language Processing: Statusand Prospects, pages 1?8, Toulouse, France.Tim Buckwalter.
2002.
Buckwalter Arabic Morpho-logical Analyzer Version 1.0.
LDC catalog numberLDC2002L49, ISBN 1-58563-257-0.Ali El Dada and Aarne Ranta.
2006.
Open Source ArabicGrammars in Grammatical Framework.
In Proceed-ings of the Arabic Language Processing Conference(JETALA), Rabat, Morocco, June 2006.
IERA.Wolfdietrich Fischer.
2001.
A Grammar of ClassicalArabic.
Yale Language Series.
Yale University Press,third revised edition.
Translated by Jonathan Rodgers.Markus Forsberg and Aarne Ranta.
2004.
FunctionalMorphology.
In Proceedings of the Ninth ACM SIG-PLAN International Conference on Functional Pro-gramming, ICFP 2004, pages 213?223.
ACM Press.Nizar Habash, Owen Rambow, and George Kiraz.
2005.Morphological Analysis and Generation for ArabicDialects.
In Proceedings of the ACL Workshopon Computational Approaches to Semitic Languages,pages 17?24, Ann Arbor, Michigan.
Association forComputational Linguistics.Nizar Habash.
2004.
Large Scale Lexeme Based Ara-bic Morphological Generation.
In JEP-TALN 2004,Session Traitement Automatique de l?Arabe, Fes, Mo-rocco, April 2004.Jan Hajic?, Otakar Smrz?, Petr Zema?nek, Jan S?naidauf, andEmanuel Bes?ka.
2004.
Prague Arabic DependencyTreebank: Development in Data and Tools.
In NEM-LAR International Conference on Arabic LanguageResources and Tools, pages 110?117.
ELDA.Paul Hudak.
2000.
The Haskell School of Expression:Learning Functional Programming through Multime-dia.
Cambridge University Press.Mark P. Jones.
2000.
Type Classes with Functional De-pendencies.
In ESOP ?00: Proceedings of the 9th Eu-ropean Symposium on Programming Languages andSystems, pages 230?244, London, UK.
Springer.Joost Kremers.
2003.
The Arabic Noun Phrase.
AMinimalist Approach.
Ph.D. thesis, University of Ni-jmegen.
LOT Dissertation Series 79.Klaus Lagally.
2004.
ArabTEX: Typesetting Arabic andHebrew, User Manual Version 4.00.
Technical Report2004/03, Fakulta?t Informatik, Universita?t Stuttgart.Peter Ljunglo?f.
2002.
Pure Functional Parsing.
An Ad-vanced Tutorial.
Licenciate thesis, Go?teborg Univer-sity & Chalmers University of Technology.Allan Ramsay and Hanady Mansur.
2001.
Arabic mor-phology: a categorial approach.
In EACL 2001 Work-shop Proceedings on Arabic Language Processing:Status and Prospects, pages 17?22, Toulouse, France.Otakar Smrz?.
2007.
Functional Arabic Morphology.
For-mal System and Implementation.
Ph.D. thesis, CharlesUniversity in Prague.Abdelhadi Soudi, Violetta Cavalli-Sforza, and Abder-rahim Jamari.
2001.
A Computational Lexeme-BasedTreatment of Arabic Morphology.
In EACL 2001Workshop Proceedings on Arabic Language Process-ing: Status and Prospects, pages 155?162, Toulouse.Andrew Spencer.
2004.
Generalized Paradigm FunctionMorphology.
http://privatewww.essex.ac.uk/?spena/papers/GPFM.pdf, October 6.Gregory T. Stump.
2001.
Inflectional Morphology.
ATheory of Paradigm Structure.
Cambridge Studies inLinguistics.
Cambridge University Press.Philip Wadler.
2003.
A Prettier Printer.
In JeremyGibbons and Oege de Moor, editors, The Fun of Pro-gramming, Cornerstones of Computing, pages 223?243.
Palgrave Macmillan, March 2003.8
