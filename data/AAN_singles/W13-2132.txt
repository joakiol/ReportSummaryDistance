Proceedings of the 14th European Workshop on Natural Language Generation, pages 206?207,Sofia, Bulgaria, August 8-9 2013. c?2013 Association for Computational LinguisticsTeam UDEL KBGen 2013 ChallengeKeith Butler, Priscilla Moraes, Ian Tabolt, Kathleen F. McCoyComputer and Information Science DepartmentUniversity of DelawareNewark, DE 19716keithb@udel.edu, pmoraes@udel.edu, itabolt@udel.edu, mccoy@cis.udel.eduAbstractThis document describes the University of Dela-ware?s entry into KBGen 2013 Challenge whichprovided teams with input data representation fromthe AURA knowledge base (KB), developed in thecontext of the HALO Project at SRI International,along with a lexicon mapping for concepts presenton those input files.
Training sentences were alsoprovided.
The task was to accurately generate anEnglish sentence depicting the information from aset of triples from the knowledge base.1 ApproachOur approach to the problem was to develop aset of rules for translating KB structures intoEnglish structures and to use an existing genera-tor, such as SimpleNLG (Gatt & Reiter, 2009) orFUF-SURGE (Elhadad, 1993) to generate thesentences.Our analysis of pre-release data provided bythe KBGen organization (triple-files, trainingsentences, tree graphs, lexicon) was facilitated bywriting a mashup program (KBGenMashup) thatenabled viewing/searching the data.
The programinitially loads all the training sentences into aclickable list box.
When a sentence is clicked,all data relating to that sentence is displayed: cor-responding triples, tree-graph, and Stanford parseof the sentence.
The displayed triples are given?hot spots?
so clicking on them will present a listof other sentences containing (or NOT contain-ing) that same relation or instance type.
Finally,KBGenMashup enables a search for other sen-tences that contain a given word or phrase.
Us-ing this tool allowed us to discover common real-ization patterns for certain KB triples.2 Major sentence typesOur initial generator implementation utilizedSimpleNLG in a java wrapper.
Our tack was tofocus on the realization of major sentence types,generally identified by the presence of a particu-lar function in the KB triples, e.g.
has-function,subevent, plays.
These functions provided themain verb and sentence structures, and other KBrelations were fit into this structure (in sub-ject/object position or as adjuncts) in a rule-based way.For instance, Figure 1 shows a triples file fromthe testing data that was identified under thecluster has-function, along with the sentencegenerated by our system and the rule used to re-alize the cluster for this relation type.Figure 1: A triples file from the testing data.Sentence generated: The function of the peptidebond is to hold together hydrogen and nitrogenusing a single bond.The identified rule for this input is the has-function rule.
The main entity is the entity that isrelated to the event of the instance by the has-function relation type.
The rule states that thesubject of the sentence is the ?the function of[main entity]?.
For this template the verb to be isidentified as the main verb and the object of thesentence is a verb phrase (VP) composed of theevents present in the triples file in the infinitiveform, and the existing secondary entities.
Eachsecondary entity is related to an event by a se-mantic relation type.
The nature of this relationdefines which role the secondary entity plays inthe sentence (e.g.
the ?object?
relation, whenpresent, usually links the event to the head(s) ofthe noun phrase (NP) within the VP).
Althoughthe majority of the input files have secondary206entities that are related to the main event by theobject relation, some other cases do not presentthem.
The head of the noun phrases can be repre-sented, in those cases, by secondary relationsconnected to the main event by one of agent,base, result, raw-material, relation types.
Heuris-tics are applied in order to define the head of thenoun phrase since the relation that will definewhich entity is the head of the NP is based on thecombination of the existing relations.
The rela-tions in the set of triples that are not already real-ized as one of the previous roles in the sentenceare then realized recursively for each event,complementing the VP.
Those relations are rep-resented by prepositional phrases (PP) and thepreposition chosen for each PP represents thesemantic role of the relation type (e.g.
instrumentrelations often use the prepositions with or us-ing, while donor and origin relations often usefrom).3 No-Events and other sentence typesThe simple strategy described above worked wellfor some sentence types, but others requiredmore sophisticated triple traversal.
In particular,realizing triple sets not containing an event wasproblematic.
With time running short, we im-plemented a second realizer to handle thesetypes.
It used its own heuristics, plus stored thesets of triples in a database that allowed for flex-ible traversing.
Consider its heuristics to handleno-event triple sets (events generally provide theverb and sentence structure).
No-event sentenceswould use a form of ?be?
as the main verb, butwe still needed to identify the sentence?s mainsubject.
To do this, the software looks for theEntity that is on the left side of the most triples.Why?
There is more information about this Enti-ty than about any other.
Consider ex29b.4 (Fig-ure 2).
The tree graph shows that ?Restriction-Site?
is on the left side of five triples.
It shouldbe the subject of the sentence, which could berealized as ?A restriction site is a short DNA se-quence which consists of 2 deoxyribose and adeoxyribonucleoside monophosphate.?
Note theorder of the Entities in the sentence.
The subjectis mentioned first, then its adjective (?short?
),then class (?DNA sequence?
), then remainingentities.
In realizing the remaining Entities, acommon routine is used to check for cardinalityand perform any rewording as appropriate.Figure 2: ex29b.4In many cases, there was a tie among the timesEntities were on the left.
In one type of ?tie?
(ex05a2.265, Figure 3), there is a cycle in thegraph (see ?Fibronectin, ?Carbohydrate-Side-Chain?, ?Surface?.)
In these cases, the heuristicchooses the ?middle?
Entity in the cycle (Carbo-hydrate in this case) as the subject.
Then inchoosing mention-order, the software (usually)starts the sentence by putting the adjective beforethe subject (i.e.
?branched?
& ?carbohydrate sidechain?
), then visits each Entity around the cycle,then traverses up to the ?Top?
Entity.
This sen-tence is realized as ?There are branched carbo-hydrate side chains at the surface of the fibron-ectin of an animal plasma membrane.
?Figure 3: ex05a2.2654 ConclusionsWe have described a template-based generationentry based on two different paradigms.
In one,sentences are formed on the basis of a major re-lation that generally selects the main verb andfits the realization of the other pieces accordingto the structures specific for that sentence type.The second piece that we needed is based onflexibly traversing the knowledge base and real-izing based on patterns found in the triples.ReferencesAlbert Gatt and Ehud Reiter.
2009.
SimpleNLG: Arealization engine for practical applications, Pro-ceedings of the 12th European Workshop on Natu-ral Language Generation, pages 90?93, Athens,Greece, 30 ?
31 March 2009.Michael Elhadad.
1993.
FUF: the Universal UnifierUser Manual Version 5.2.207
