CREATING AND QUERYING LEXICAL DATA BASESMary S. Neff, Roy J. Byrd, and Omneya A. RizkIBM T. J. Watson Research CenterP.
O.
Box 704Yorktown Heights, New York 10598ABSTRACTUsers of computerized dictionaries require powerful andflexible tools for analyzing and manipulating the informa-tion in them.
This paper discusses a system for grammat-ically describing and parsing entries from machine-readabledictionary tapes and a lexicai data base representation forstoring the dictionary information.
It also describes a lan-guage for querying, formatting, and maintaining diction-aries and other lexical data stored with that representation.1.
Introduction.Computer resident lexical information is required in a largevariety of applications, including on-line dictionary refer-ence systems (Neff and Byrd(1987)), lexicographic sys-tems for creating new dictionaries (Tompa(1986)),systems for performing lexicological analyses of existingdictionaries (Zampolli and Calzolari(1985), Chodorow eta1.
(1985)), and various natural anguage processing sys-tems (Byrd(1986)).
Establishment of standard represent-ations and access mechanisms for lexical information willhelp us to better meet hese requirements.The Lexical Systems project at the IBM T. J. Watson Re-search Center has defined a lexical data base representation(LDB) for lexical information, a set of tools and grammarsfor converting machine readable dictionary (MRD) type-setting tapes to the LDB representation, and a LexicalQuery Language (LQL) for specifying storage and retrievaloperations on LDBs.
This paper briefly discusses the LDBstructure, the tools and grammar for creating LDBs fromexisting sources, and then describes the facilities and im-plementation f LQL.Of the many machine-readable dictionary (MRD) re-sources available, current research concerns exploitationof the information from one dictionary (for example,Michiels (1982), Ahlswede, et.
al.
(1986)) or, in the caseof multiple dictionaries, a limited subset of informationfrom each (cf.
Chodorow, et.
al.
(1985)).
This exploitationis usually via a special extraction program which gets onlythe information eeded by the project or application.
Al-though in some cases the literature mentions the term "database", the term is frequently not used in any strict sense,as it is here.The work reported in the present paper is related to workreported by Calzolari (1984a, 1984b) and Calzolari andPicchi(1986).
Some of it, particularly the development oftools and grammars for parsing entries in MRD tapes toLDB format, is most related in spirit to some of the workreported by the New Oxford English Dictionary project(Tompa (1986a), Gonnet and Tompa(1986),Benbow(1986)).
Whereas the new OED project has de-fined a markup language for dictionary entries before dataentry and a grammar based on that markup language, thiswork attempts to parse and convert o a standard form anumber of different raw type-setting tapes without anypre-editing.2.
Lexicai Data Bases.Dictionary entries are typically organized as shallow hier-archies of information with a variable number of instancesof certain items at each level, e.g.
multiple homographswithin an entry or multiple senses within a homograph.More formally, they can be characterized as finite depthhierarchies of attribute-value pairs with a variable numberof instances of specific nodes at each level.
At at each nodethere is an attribute name and a value, which can be a sim-ple value, a list of attribute-value pairs, or an entire subtree.A node may have an arbitrary number of daughter nodesof the same attribute type, just as a dictionary entry canhave an arbitrary number of senses per homograph, forexample.
Thus, in the entry for quack from the CollinsEnglish-ltalian dictionary, shown in Figure 1, the "entry"node has two "superhom" (superscript homograph) nodesas daughters: the first of these, in turn, dominates two"homograph" nodes, one for a noun and the other for anintransitive verb.
Lexicographers are familiar with thenotion of hierarchically structured entries of this type.It is important to distinguish between the type of hierar-chies found in dictionary entries and those, for example,that characterize the syntactic structure of English sen-tences.
Both types of hierarchy are, in principle, of un-84entry+-hdw quackI+-superhom+-hum l+-pron >u71<kw>u43<k>u72 <I+-horn+-hnum l+-pos nI+-sensI+-xlat+-spel qua qua+-gnd m iNv+-hom+-hnum 2+-pos viI+-sensI+-xlat+-spel fare qua qua+-superhom+-hum 2+-pron >u71<kw>u43<k>u72 <I+-hom+-pos nI+-sensI+-xlatI +-note pejI +-spel ciar\]atano/aI+-xlat+-note ram: doctor+-spel dottore/essaFigure 1.
Collins English-ltalianentry forquack.bounded size.
Dictionary entries achieve theirunboundedness by iteration: a dictionary entry may haveany number of homographs, which may, in turn, have anarbitrary number of senses, and so forth.
Syntax treesachieve their unboundedness both by iteration (e.g., coor-dination) and by recursion (e.g., self-embedding).
In fact,while the nodes of a dictionary entry hierarchy may onlyiterate, the data values contained in the tree may have theirown--possibly recursive--structures.
This is the case fordefinition text in monolingual dictionaries, or foretymologies (as was pointed out by Martin Chodorow).The observation that dictionary entry hierarchies may onlyiterate is useful for defining lexical data bases.
All entriesin an LDB can be characterized by a "design" or "tem-plate" which is stored once for that data base.
The designis a single hierarchy which serves as a grammar for any in-stance of an entry by naming the possible parents, siblings,and children of each node type that may occur.
Figure 2shows a simplified design for an LDB containing theCollins English-Italian bilingual dictionary.
Comments aregiven to describe the lexicographic functions of the variousnodes.
The entry for quack shown in Figure 1 is an in-stance of the design shown in Figure 2.
Different diction-aries may have different structures and hence differentdesigns.
The notion of representing dictionary entries asinstances of a hierarchical design derived from a grammaris not unique to our work; Gonnet and Tompa (1987) usethe same notion when they create hierarchical "p-strings"over the strings that they analyze with their grammaticalformalism.Actual LDBs are created by storing hierarchically format-ted entries in a direct access file with the design stored ascontrol information (the creation of these formatted entriesis the subject of the next section).
The files are managedby the Dictionary Access Method (DAM), described inByrd (1986) and Byr d, et al(1986b).
Each entry is storedwith its headword as the key.
Alternate access paths canbe established by building indexes on attributes other thanthe headword.It may be useful to point out reasons for not using tradi-tional data base mechanisms for storing and accessingLDBs.
We believe that lexical data bases cannot be cor-rectly viewed as relational data bases.
Within thetaxonomy of "normal forms" defined by relational database theory, dictionary entries are "unnormalized re-lations" in which attributes can contain other relations,rather than simple scalar values.
As a result, no efficientdata base tools or attractive languages have been developedfor accessing unnormalized relations.
In order to use ex-isting relational tools to store and access dictionary entries,we should first re-cast he entries into one of the normalforms defined by the theory.
This could be achieved bydefining relations over sets of siblings in our LDB designs,creating or selecting unique key attributes among thosesiblings, and performing join operations on those attri-butes.
However, to do so would force us to sacrifice theintuitive advantage that hierarchically organized ictionaryentries offer.
We have therefore chosen not to.Similarly, traditional hierarchical data bases do not providean appropriate model for lexical data.
In those systems, astypified by IBM's IMS (Date (1986)), hierarchical re-lationships are represented among separate ntities whichare stored as "segments".
This metaphor of separate nti-ties does not apply to lexical data.
There is no sense, forexample, in which a translation in the Collins English-Italian dictionary is a separate ntity to be related to otherentities.
Rather, each lexical entry is itself a complex entity8:;entry+-hdwI+-superhom+-hum+-pronI+-altspelI +-noteI +-spelI+-hom+-hnum+-pos+-morphI+-sens+-snumI+-xlatI +-noteI +-spelI +-gndI+-xmp+-note+-gloss+-pos+-expl+-tran+-gnd/*root of the tree*//*English headword; key to the DAM file*//*superscript homograph*//*superscript number from printed dictionary*//*encoded pronunciations*//*alternate spelling*//*e.g."U.S.
English"*//*the alternate spelling string*//*homograph*//*homograph number*/~*part-of-speech*~/*irregular inflections, etc.
*//*sense*//*sense number*//*translation information for headword*//*usage note for the English term*//*the Italian translation*//*grammatical information about the Italian*//*"example" phrases containing headword*//*usage note for the English phrase*//*the English phrase*//*part-of-speech*//*more usage information*//*Italian translation of phrase*//*grammatical information about the Italian*/Figure 2.
LDB design for the Collins English-Italian dictionary.with a hierarchical relationship among its internal compo-nents.
Our LDB strategy preserves this intuition.3.
From typesetting tape to data base.Among the resources available for making lexical databases, we have typesetting tapes of Webster's Seventh,Longman's Dictionary of Contemporary English(LDOCE), several Collins bilingual dictionaries, and twosynonym dictionaries.
Creation of lexical data bases beganfrom a number of direct access b-tree (DAM) files whichhad been created from the tapes for the WordSmith on-linedictionary reference system (Neff and Byrd(1987)).
Thesefiles, keyed on headword and containing the otherwise un-normalized body of the entry, complete with original fontcodes, were the result of a by-entry segmentation program,an idiosyncratic process reflecting the diverse origin andformatting conventions of the source dictionaries.
To meetthe requirements of computerized random access, someentries (e.g., those with superscripted homograph numbers)were combined into one entry; words with alternatespellings (such as "whisk(e)y") became multiple entrieswith cross references; till others (compound entries fromthe German-English bilingual dictionary) were broken upso that each compound word listed could be accessed by itsown key.The dictionary entry parser.
The hierarchical structure of adictionary entry is implicit in its syntax.
Major signpostsare the homograph numbers, the sense numbers, and theconsistent alternation of fonts: also useful are punctuation,position of swung dashes (indicating repetition of the headword in a collocation or example), and membership of anitem in a closed set (part of speech, for example).
By wayof illustration, we reproduce here for the entry quack  --both the raw version from the tape of the Collins English-Italian dictionary and the formatted entry as it appears inthe printed ictionary.>u1<quack >u123<I >u155<>u71<kw>u~3<k>u72<>u2<I >u6<n >u5<qua qua >u6<m inv.
>u2<2>u6<vi >uS<fare qua qua.
>u1<quack >u123<2>u 155<>u71<kw>ua 3<k>u72< >u6<n >u6<(pej)>u5<ciarlatano/a; >u6<(fam: doctor)>u5<dottore/essa.quack I \[kwaek\] 1 n qua qua m inv.
2 vi fare qua qua.quack 2 \[kwaek\] n (pej) ciarlatano/a; (faro: doctor)dottore/essa.To parse the dictionary entries, we constructed a generalparsing engine and a specific grammar for each one of se-86veral MRD's.
Because dictionary entries may only iterate.the level of sophistication required of an entry parser is notas high as that required for a sentence parser.
Neverthe-less, two technologies for sentence parsers were readilyavailable to us: a bottom-up, all-paths trategy offered byPLNLP (Langendoen and Barnett(1986)), and a top-downdepth-first approach offered by logic grammars in Prolog(McCord(1986)).
Using either would significantly reducethe effort required to parse our more than a dozen diction-aries, because ach new dictionary would only require anew grammar.
Preliminary versions in PLNLP and Prologwere both adequate and contribute nothing to the theore-tical issues surrounding parsing strategies.
The choice ofProlog for continued evelopment was largely due to thesomewhat deterministic nature of parsing dictionary entriesvis-a-vis the extravagance of the bottom-up, all-pathsstrategy.
Nevertheless, we are studying the possibility ofimplementing a partial bottom-up strategy analogous toparse-fitting (cf.
Jensen, et a1.
(1983)) when it becomesnecessary to process input with missing or corrupt fontcodes, there being few recovery strategies available to atop-down parser.Grammars for entries and grammars for sentences differ inthree important ways: (1) entries can be huge: some arelonger than 5000 bytes; (2) tokens, the smallest unit han-dled by the grammar are larger and defined ifferently; and(3) a dictionary grammar does not have to produce recur-sive structures, o can be to a large extent deterministic.A consequence of (1) is that it takes a large amount ofstorage to parse an entry.
To process extremely long en-tries, we use an 8-megabyte virtual machine underVM/CMS.
The motivation for (2) comes from the factthat the entries consist of text interspersed with font codes,which are not required to be delimited with blanks.
Thetoken string for an entry is therefore usually an alternatingstring of font codes and characters, with some semicolonsor periods also defined as tokens.The grammar is a formal description of the structure ofentries for a particular dictionary; its formalism is a mod-ification and extension of McCord's (1986) modular logicgrammar (MLG), which is in turn derived from the definiteclause grammar (DCG) of Pereira and Warren (1980).We illustrate with some sample rules from the grammar ofthe Collins English-German dictionary.
(I) body  ==> opt (prehom)  : opt (homl i s t ( * ) ) .
(2) body  ==> a l t .
(3) p rehom ==> opt (a l t )  :opt (pronunc)  : opt (vbmorph)  :opt (note)  : opt (abb) .
(4) homl i s t (num)  ==> hom(num)  :opt (opt ( - sc )  : homl i s t (num))  .
(5) homl i s t (nonum)  ==> hom(nonum) .Rule ( 1 ) says that the body of an entry consists of optionalprehomograph material (prehom) and an optionalhomograph list of any type(*).
A significant addition to theMLG formalism was a mechanism for treatment of largenumbers of optional elements in a single rule to preventproliferation of rules.
Tests added by the compiler enforcethe convention that to succeed, a rule consisting solely ofoptional elements must contain at least one.
Rule (2) saysthat the body of an entry consists of an alternate spelling.This rule is an alternate to (1); normal Prolog backtrackingconventions apply.
Rule (3) says that the prehomographmay contain any of the following, in this order: alternatespelling, pronunciation, verb morphology, a usage note, along form of which this is an abbreviation.
Rule (4) saysthat a numbered homograph list consists of a numberedhomograph followed optionally by a semicolon (to be dis-carded from the resulting structure) and a numberedhomograph list.
This rule illustrates the mechanism fordefining multiple sister nodes of the same type by meansof a recursive rule.
Though it appears that each successivehomograph node is one level deeper in the tree, the use ofMcCord's definition of some nodes as "weak nonte-rminals" ensures that nodes so defined (like hornlist, and,incidentally, prehom) disappear from the final structure,thus flattening the tree and eliminating recursion.
Rule (5)handles the case of a single unnumbered homograph.Leaf node rules are more numerous than those that de-scribe higher structures, and these may contain Prolog-liketests.
Unlike syntax parsers, dictionary entry parsers dis-card some segments (e.g.
font codes) after use in parsing;the "-" operator, added to the original rule formalism, al-lows any segment to disappear f om the resulting tree.
(6) pos  ==>- font ( i ta l )  : +$eg :Snot (s tconc(" ( " , * ,Seg) )  : opt ( - sc ) .This rule, one of four handling part of speech segments,says that the pos segment (Seg) is preceded by an italic fontcode (discarded), does not begin with a left parenthesis,and is followed optionally by a semicolon (also discarded).Font code definition rules and retokenization rules areneeded before parsing rules are applied.
Font code defi-nition rules are simply Prolog unit clauses, which definefont codes and delimiters, as in the following simple exam-ple, where the string ">u4<" is both a boldface font tokenand a delimiter.de l im ( ">u4<" ,  font  (bo ld) )  .Delimiters and strings between delimiters are the tokens.After initial tokenization, retokenization rules in aformalism similar to that of the grammar ules make ad-justments to the token string because of the inexact map-ping of font changes to segments, as in?
.
.>u5<(>u~<word>u5<)  someth ing  ...87which is tokenized asfont  ( roman)  . "
( ".
font  (bo ld )  .
"word" .font ( roman)  .")
someth ing" .
.
.but which is modified to:font  (bo ld )  . "
(word)  ".
font  ( roman)  ."
someth ing"  .
.
.The grammar and retokenization rules are compiled intoProlog clauses with a compiler that is a modification andextension of McCord's (1986) MLG rule compiler.
Ex-tensions include the "opt" operator, the "-" operator, andthe "+ +" operator, which allows rules to insert tokens intothe string during parsing, thus allowing for breakup andanalysis of two different data items not separated by a fontcode.The compiler and rules are supported by a Prolog shellwhich offers the rule developer a variety of tools for trac-ing, debugging, and selecting among a large number ofoptions, including input and output data and file formats,thus supporting both development and batch processing.Tools for analyzing failures assist in the often tediousprocess of combing through a long entry to determine whyit failed; in particular, there is a mechanism optionallycompiled into the rules which marks the right-most frontier(RMF) reached in the parsing process.
Other tools analyzethe RMF environments resulting from a batch run to helpthe developer determine which rule modifications are re-quired by the largest number of entries.The parse trees are compacted and encoded in LDB formatand stored in a DAM file for access by analysis programs,such as the Lexical Query Language (LQL), described inthe next section.
The rule compiler, as part of the compi-lation process, produces the entry design for the dictionarythat is required by LQL and encodes it as control informa-tion with the LDB.4.
The Lexical Query Language.The LQL programming language must satisfy several re-quirements.
First, it must be possible to formulate an un-restricted variety of queries against any LDB.
Second, itmust be possible to flexibly format the answers to queries,either for display or for use in creating other computer files.Third, LQL must allow users to specify modification oper-ations on LDBs; this will allow for LDB maintenance.
Thestyle of LQL programs must be natural and easy to re-member.
See Byrd(1986) for a discussion of these re-quirements on computerized dictionaries.Data base query.
The Lexical Query Language allows theuser to specify conditions on the attributes of LDB entries.Only those entries which satisfy all conditions become partof the query answer.
Further, the user specifies which at-tributes of the successful entries are part of the answer andwhat their output format will be.
The query is stated asentries in the nodes of a two-dimensional representationof an LDB's design (see Figure 2), using a syntax remi-niscent of the Query-by-Example (QBE) data base querylanguage (Zloof(1974)).
Example-elements, denoted by aleading underscore, are used to relate values of attributesin a query tree to conditions in a condition box, to displaypositions in an output box, and to values in other dictionaryentry trees (for "join" operations).Part (a) of Figure 3 shows a query which will list all wordswhich are both nouns and verbs in English together withtheir translations in the Collins English-Italian dictionary.The condition on the noun part-of-speech attribute is sim-ple (it must be "n" for this data base) and is entered i-rectly in the tree.
The condition on the verb part of speechis more complex, and the example-element VPOS is usedto relate those attribute values to the condition box, wherethey are tested for equality with either "vi" or "vt".
Theexample-elements WORD,  NTRAN,  and VTRANare used to map answers from the hierarchy into the outputbox where their eventual output format is schematicallyrepresented.
Part (b) of Figure 5 shows sample entriesfrom the answer to this query when applied to the CollinsEnglish-Italian dictionary.
Such a query might be useful,for example, in a study of the relation between homographyin English and derivational morphology in Italian.As in the query tree itself, the output box may contain bothconstants and example-elements.
The constants defineboilerplate material used to label the variable instantiationsof the example-elements, as in Figure 3.
Such labelling isperhaps more useful when dictionary entries are presentedone at a time, as in the WordSmith on-line dictionary sys-tem (Neff and Byrd(1987)).
Alternately, a p. (for"print") operator can be used in the terminal or non-terminal nodes of the query tree to specify which datashould be given in a hierarchically formatted isplay of thequery answers.
Figure Figure 4(c) illustrates the use of thep.
operator.LQL conditions specify tests to be performed on the valuesof attributes in the data tree to which nodes in the querytree may be mapped during query processing.
Terminalnodes may be tested using a variety of string and arithmeticoperations.
The current prototype implementation includesthe built-in functions of the REXX programming language(IBM (1984)).
Non-terminal nodes may only be tested forequality or inequality with other nodes having the same at-tribute name.
All nodes may have aggregate functions(e.g., count, maximum, minimum, etc.)
applied to themand the results may either be tested in conditions or beoutput as part of the query answer.
Nodes may also be88Figure 3.
(a) Queryent ry+-hdw WORDI+-superhomI+-hom+-pos  nI+-sensI+-x la t+-spe l+-hom+-pos VPOSI+-sensl+-x la t+-spe l(b) Answer :WORD:  fo rceNOUNSfo rzaNTRANVTRANWORD:  quackNOUNSqua  quaWORD:  sc reamNOUNSgr idos t r i l l ou r loAn LQL query.VERBSfo rzarecos t r ingereVERBSfa re  qua  quaVERBSgr idareur la re.
.
.
.
.
.
.
.
.
OUTPUT .
.
.
.
.
.
.
.
.
.
.
.WORD: WORDNOUN~ VERBSNTRAN VTRAN+ .
.
.
.
.
.
.
CONDIT IONS .
.
.
.
.
.
.
.
+tI _VPOS = v i I _VPOS = vt  II Ii E+ .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
+tested for a null value (i.e., non-occurrence in a particularentry).In addition to producing the formatted output specified inthe output box, the process of answering a query alsoyields, as a by-product, an answer LDB.
This is a new LDBcontaining just those entries from the original LDB whichsatisfied all conditions, and containing just those attributeswhich were either part of the conditions or the outputspecification.
The design for the answer LDB is derivedfrom the query tree and is a subset of the design for theoriginal LDB.Data  base modi f icat ion.
A realistic data base system mustprovide facilities for creating and maintaining data bases.LDB creation is usually a bulk operation and has been dis-cussed in section 3.
LDB maintenance, onthe other hand,can benefit from the flexibility provided by combining apowerful query processor with the capability to insert, de-lete, and update parts of the LDB entries.
LQL offers thisflexibility by providing the operators i.
(for "insert"), d.(for "delete), and u.
(for "update").
These are also famil-iar QBE operators and are described (in a relational con-text) in IBM(1978).Figure 4 shows three examples of how these operatorsmight be used to modify an LDB containing the CollinsEnglish-Italian dictionary.
In (a), a new entry for the term"lexical data base" is added to the dictionary; notice thatthe i. operator applies to the entire hierarchy, so that a newrecord will be added to the DAM file containing the LDB.Similarly, program (b) will delete entire entries, if any haveheadwords which satisfy the condition that they not be al-phabetic (determined by using the REXX datatype func-tion, which - in this case - checks whether the value consistsof entirely mixed case alphabetic characters).
Finally, (c)locates entries where a "superhom" (superscripthomograph) node dominates exactly one "hom"(homograph) node (as determined by the cnt.
operator).The headwords of such entries are printed by the p. opera-tor and the "hom" nodes receive a new "hno" (homographnumber) attribute with the value "1" as a result of the i.operator.89Figure 4.
(a) Add  a new ent ry .ent ry  i.+-hdw l ex ica l  data  baseI+-superhom+-hum \]3+-hom+-pos  nl+-sens+-x la t+-note  techn ica l+-spe l  d i z inar io  macch ina+-gnd m(b) De le te  ent r ies  w i th  non-a lphabet ic  headwords .ent ry  d. + .
.
.
.
.
.
.
.
CONDIT IONS .
.
.
.
.
.
.
++-hdw WORD I I- I da ta type(_WORD, 'M ' )  = I II l+ .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
+(c) Ass ign  homograph  numbers  to  s ing le  homographs .ent ry  + .
.
.
.
.
.
.
.
CONDIT IONS .
.
.
.
.
.
.
++-hdw p. I II I cn t .
HNODE = l I+-superhom I -- I\[ + .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
++-hom HNODE+hno- i .
lLQL programs for modifying an LDB.Figure 5 shows how an initial attempt o build an Italiansynonym dictionary from an English synonym dictionaryand an English-Italian bilingual dictionary might be pro-grammed using LQL.
This program creates the Italiansynonym dictionary by simply translating the English syn-onym dictionary into Italian while retaining the Englishsense numbers.
The program uses example lements (e.g.,ESYN which maps English synonyms to headwords inthe English Italian dictionary) to specify join operationsamong the input dictionaries and to map results into theoutput dictionary.
Clearly, this procedure islexicographically naive and inadequate; the point of theexample is to show the ease which which lexical explorationcan be performed using LQL.5.
Status and Plans.The entire Collins English-German dictionary, consistingof 46,600 entries, was recently submitted to the parser andE-G grammar with a parsing rate of 80% of the entries.Parts of the Collins Italian-English and English-Italian dic-tionary were parsed with their respective grammars with asuccess rate of about 95%; some of the entries were quitelarge.
The high success rate on the Italian dictionaries ipartly due to the consistency in the formatting of thesedictionaries and the integrity of the tapes.
The rules forboth grammars are still being improved to account for theresidue.
Among the remaining problems are the following:some contiguous data items appear in the same font with-out an intervening font code, some discrete data items usemore than one font, some kinds of data items are discon-tiguous, and some new lower level structures used in onlya few entries remain to be discovered.Unfortunately, the residue often contains long entries as-sociated with high-frequency words, making partial resultsless immediately usable.
However, unparsable entries of-ten have large sections of parsable material, which couldbe made available in LDB format for analysis or applica-tions in spite of its partial nature, if only the top-downparser wouldn't fail.
Because a dictionary e~try has iden-tifiable signposts like homograph numbers and sense num-bers that can be possible recovery points, we plan toimplement and constrain a "junk collecting" rule in theEnglish-German grammar that will pick up and blandly la-bel everything at or just before the failure point up to thenext recovery point.90+-Eng l i sh - I ta l ian  .
.
.
.
.
.
+ent ry+-hdw EWRDI+-superhom+-hom+-sens+-x la t+-spe l  IWRD+-Eng l i sh - I ta l ian  .
.
.
.
.
.
+ent ry+-hdw ESYNI+-superhom+-hom+-sens+-x la t+-spe l  ISYNFigure 5.+-Eng l i sh  Synonyms .
.
.
.
.
+ent ry+-hdw EWRDi+-sense+-num SNUMI+-synonym+-spe l  ?SYN+- I ta l ian  Synonyms .
.
.
.
.
+ent ry  i.+-hdw IWRDI+-sense+-num SNUffi+-synonym+-spe l  ISYN+ .
.
.
.
.
.
.
.
.
.
.
.
~ .
.
.
.
.
.
.
.
.
.LQL program to create an Italian synonym dictionary.Recently we parsed a small random sample from theCollins French-English dictionary using a slightly modifiedEnglish-German grammar, including some junk collection.The success rate was about 50%.
The time required tomodify the English-German grammar for the French dic-tionary was less than an hour, confirming our belief in theefficacy of our approach to dealing with multiple diction-aries.We intend to build grammars and LDBs for all our dic-tionary resources.
The uses to which these LDBs can beput are numerous; we have identified the following initialprojects.
Analysis of the English-Italian and Italian-English dictionaries has allowed us to transfer semantic in-formation from an English monolingual dictionary to anItalian one (see Byrd, et a1.(1986)).
The English-GermanLDB will soon be used for analysis as part of the develop-ment of LMT, an English-German machine translationsystem (McCord (1986)).
The English-French andFrench-English dictionaries will be used as part of a studyof asymmetrical references in bilingual dictionaries (seeByrd, et a1.
(1986)).Many other kinds of applications and analyses will be pos-sible with the LDBs created from printed ictionaries.
Onecould easily imagine a lexical data base as the commonsource for several different variants of printed ictionaries.Indeed, publishers are beginning to use the notion of anLDB for maintenance and enhancement of their products(cf.
New OED, Gonnet and Tompa(1986)).
On-line ref-erence systems need not be limited to the informationavailable in printed dictionaries, as they are today: usersof such systems can define their own views of the on-linedata.
Natural language processing systems can use partsof a common LDB, extracted for their requirements.
Fur-ther exciting possibilities include more inter-dictionary in-vestigations or even the creation of a combined LDB anddealing with the so-called "mapping" problem: how to mapinformation from one dictionary onto another.A prototype LQL query processor and output formatterhave been built at IBM Research.
The prototype processessingle dictionary queries with conditions and produces for-matted and hierarchical output as well as answer LDBs.Current work is aimed at implementing the full language(including joins, updates, and aggregate operations) andimproving performance in order to make LQL attractivefor use in a wide variety of applications.
The first largescale applications will be a stand-alone query processor foruse in lexicological research and an entry storage, filtering,and formatting mechanism for the WordSmith on-line dic-tionary system.LQL queries would be tedious and difficult o create if theyhad to be entered all by hand.
Fortunately, the LDB designcan be used to build a user interface which presents a querytree template to be filled in by the terminal user.
The pro-totype implementation does this and provides further facil-ities for moving, copying, and deleting subtrees duringquery preparation.
A new one-dimensional representationmust be defined for use in storing LQL programs and toprovide a mechanism for issuing LQL requests from otherprogramming languages.Beyond dictionaries.
The tools described here can be usedfor parsing and querying other kinds of data.
The notionof creating a data base from data parsed from text ("text-dominated databases," cf.
Gonnet and Tompa(1987)) can91be applied to other collections of structured ata, such asalmanacs, encyclopedias, abstracts, legal documents, orbibliographies.References.Ahlswede, Thomas, Martha Evens.
Kay Rossi.
and JudithMarkowitz (1986) "Building a Lexical Database by ParsingWebster's Seventh New Collegiate Dictionary," Advances inLexicology.
Second Annual Conference of the UW Centre for theNew Oxford English Dictionary, 65-78.Benbow, Tim (1986) "Status Report on the New OED Project".Oxford University Press, unpublished.Byrd.
Roy J.
(1986) "Dictionary Systems for Office Practice,"Proceedings of the Grosseto Workshop "On Automating theLexicon".
also available as IBM Research Report RC 11872.Byrd, Roy J., Nicoletta Calzolari, Martin S. Chodorow, JudithL.
Klavans, Mary S. Neff, Omneya A. Rizk (1987) "Tools andMethods for Computational Lexicology," Computational Lin-guistics.Byrd.
Roy J., Gustaf Neumann, and Karl Seved B. Andersson(1986b) "DAM - A Dictionary Access Method," IBM ResearchReport, in preparation.Calzolari, Nicoletta (1984a) "Detecting patterns in a lexical database," Proceedings of COLING 84, 170-173.Calzolari, Nicoletta (1984b) "Machine-readable dictionaries,lexical data bases, and the lexical system," Proceedings ofCOLING 84, 460.Calzolari, Nicoletta nd Eugenio Picchi, (1986) "A Project fora Bilingual Lexicai Database System", Advances in Lexicology,Second Annual Conference of the UW Centre for the NewOxford English Dictionary, 79-92.Chodorow, Martin S., Roy J. Byrd, and George E. Heidorn(1985) "Extracting Semantic Hierarchies from a Large On-lineDictionary," Proceedings of the Association for ComputationalLinguistics, 299-304.Collins (1980) Collins German Dictionary: German-English.English-German, Collins Publishers, Glasgow.Collins (1980) Collins Sansoni Italian Dictionary: Italian-English, English-Italian, Collins Publishers, Glasgow.Date, Christopher J.
(1986) At Introduction to Data BaseSystems, Addison-Wesley.Gonnet, Gaston H. and Frank Win.
Tompa (1986) "Status Re-port on University of Waterloo Technical Activities for the NewOED Project", University of Waterloo, unpublished.Gonnet, Gaston H. and Frank Wm.
Tompa (1987) "Mind YourGrammar: a New Approach to Modelling Text," University ofWaterloo Centre for the New Oxford English Dictionary, ReportOED-87-0 I.IBM (1978) Query-by-Example: Terminal Users Guide, IBMform no.
SH20-2078.IBM (1984) System Product Interpreter (REXX) Reference Man-ual, IBM form no.
SC24-5239.Jensen, Karen.
George E. Heidorn, Lance A. Miller, and YaelRavin (1983) "Parse Fitting and prose Fixing: Getting a Holdon III-formedness," AJCL 9.3-4.123-36.Langendoen, D. Terence and H. Michael Barnett (1986)"PLNLP: A Linguist's Introduction."
IBM Research Report.Longman(1978) Longman Dictionary of Contemporary English.Longman Group, London.McCord, Michael C. (1986) "Design of a Prolog-Based MachineTranslation System", Proc.
Third International Conference onLogic Programming, Springer-Verlag, 350-374.McCord.
Michael C. (1987) "Natural anguage processing andProlog," Knowledge Systems and Prolog.
in Adrian Walker.Michael McCord, John Sowa.
and Walter Wilson, ed.
Addison-Wesley.
Waltham.
Massachusetts.Michiels, Archibal (1982) Exploiting a Large Dictionary DataBase.
Unpublished PhD Dissertation.
University of Liege, Liege.Holland.Neff, Mary S. and Roy J. Byrd (1987) "WordSmith UsersGuide," IBM Research Report, in preparation.Pereira, Fernando, and David Warren (1980) "Definite clausegrammars for language analysis - a survey of the formalism anda comparison with augmented transition networks", ArtificialIntelligence, 13, 231 - 178.Tompa, Frank (1986) "Database design for a dictionary of thefuture," University of Waterloo, unpublished.Zampolli, Antonio and Nicoletta Calzolari (1985) "Computa-tional Lexicography and Lexicology," AILA Bulletin, pp.
59-78.Zloof, Moshe M. (1974) "Query by Example," IBM ResearchReport RC 4917.92
