The Generative Power of CategorialGrammars and Head-Driven PhraseStructure Grammars with Lexical RulesBob Carpenter*Carnegie Mellon UniversityIn this paper, it is shown that the addition of simple and linguistically motivated forms of lexicalrules to grammatical theories based on subcategorization lists, such as categorial grammars(CG) or head-driven phrase structure grammars (HPSG), results in a system that can generateall and only the recursively enumerable anguages.
The proof of this result is carried out bymeans of a reduction of generalized rewriting systems.
Two restrictions are considered, each ofwhich constrains the generative power of the resulting system to context-free languages.1.
IntroductionIn recent grammatical theories, there has been an increasing trend toward the lexical-ization of syntactic information.
This is particularly evident in the case of categorialgrammars (CG) and head-driven phrase structure grammars (HPSG), where a smallnumber of highly schematic syntactic rules are assumed to apply universally.
Withthis assumption of a universal syntax, the task of explaining the variations betweenlanguages must be carried out in the lexicon.
Rather than assuming that the lexicon issimply an unstructured list associating words with syntactic ategories, organizationis usually imposed by means of hierarchical inheritance systems, linking theories re-lating lexical semantics to grammatical categories and finally with lexical rules.
It isthe lexical rule component of these grammars that we investigate in this paper.We present a straightforward formalization of categorial grammars with lexicalrules based in part on the systems of Dowty (1978, 1979), Bach (1984), Keenan andFaltz (1985), Keenan and Timberlake (1988), Hoeksema nd Janda (1988), and the HPSGlexical rule systems of Flickinger et al (1985), Flickinger (1987), and Pollard and Sag(1987).
We show that even using such a simple form of lexical rules, any recursivelyenumerable anguage can be recognized.
Thus the addition of lexical rules leads tosystems in which it is not possible to effectively decide whether a string is acceptedby a grammar.
We first introduce a pared-down formalism that captures the way inwhich heads combine with complements in CG and HPSG.
We then provide examplesto motivate a very straightforward and natural system of lexical rules.To show that arbitrary recursively enumerable anguages may be generated bythe resulting system, we provide a reduction of generalized rewriting systems (Type 0grammars).
Though the details of our reduction are different, our method is reminis-cent of that used by Uszkoreit and Peters (1986) to show that context-free grammarswith metarules could generate arbitrary recursively enumerable anguages.
The anal-ogy between CG lexical rules and GPSG metarules i strengthened by the fact that?
Computational Linguistics Program, Philosophy Department, Carnegie Mellon University, Pittsburgh,PA 15213 USA; e-mail: carp@icl.cmu.eduQ 1991 Association for Computational LinguisticsComputational Linguistics Volume 17, Number 3GPSG as presented in Gazdar et al (1985) restricts the application of metarules tolexical phrase structure rules.Along the way to proving that categorial grammars with lexical rules can generatearbitrary recursively enumerable languages, we consider two restrictions that havethe effect of reducing the generative power of the system to context-free languages.The first of these restrictions limits the recursive application of lexical rules, whilethe second puts a bound on the number of complements hat can be specified by acategory.2.
CGs and HPSGsIn Generalized Phrase Structure Grammar (GPSG) as presented in Gazdar et al (1985),each lexical head category is assigned a simple integer subcategorization value.
Sim-ilarly, each lexical phrase structure rule specifies the possible value(s) of the subcate-gorization feature occurring on its head daughter.
In both CG and HPSG, the subcate-gorization value and correspondingly indexed phrase structure rule are replaced witha lexical encoding of head/complement structure by means of a subcategorization orcomplement list.
The exact characterization f the notion of head has been the subjectof some debate, but which items are labeled as heads is not important here; we usethe term head to refer to any category that specifies its complements.
Thus headsin our sense may be categories traditionally classified as specifiers or adjuncts.
Thesubcategorization listof a category determines the number, form, and order of its com-plements.
The only syntactic rule scheme that we consider is one that allows a head tocombine with a complement.
The result of such a construction is a category just likethe head, only with the complement removed from its subcategorization list.
Manyextended categorial grammar systems and the HPSG system allow more sophisticatedrules than this to deal with adjuncts, coordination, and long-distance dependencies,but we only need the simple head-complement construction toshow that the additionof lexical rules leads to undecidability.We now turn to a more formal presentation of a framework that incorporates thecore of both CG and HPSG.
We begin with a finite set BasCat of basic categoriesout of which complex categories are constructed.
The collection of basic categories iusually assumed to contain "saturated" syntactic ategories, including nouns, nounphrases, sentences, and so forth, but the choice of basic categories i ultimately up tothe grammar writer.
We are not concerned with the details of any particular syntacticanalysis here.
The full set Cat of categories i  defined to be the least collection of objectsof the form b\[co,..., cn-1\] where b E BasCat is a basic category and ci E Cat for i < n.The categories between the brackets pecify the arguments of the category, with theassumption being that these arguments must be attached in the order in which theyoccur on the subcategorization list.
While our notation follows the usage of HPSG andUnification Categorial Grammar (Calder et al 1988), it should be clear how it relatesto more traditional categorial grammar notation (see Bar-Hillel et al 1960).We assume the following schematic phrase structure rule that allows heads tocombine with a single complement:Definition 1b\[Cl,..., c,\] ~ b\[co,..., On\] COIn most categorial grammars and in HPSG, there are rules in which the complementcategory precedes the head, but we do not even need this much power.
For instance,a simple transitive verb might be given the category s\[np\[\];np\[\]\], a noun phrase the302Carpenter CG and HI~G with Lexical Rulescategory np\[\], a noun n\[\], and a determiner the category np\[n\[\]\].
Thus the rule instances\[np\[\]\] > s\[np\[\], np\[\]\] np\[\] allows the combination of a transitive verb with an objectnoun phrase, while the rule np\[\] ~ np\[n\[\]\] n\[\] would allow a determiner followed bya noun to be analyzed as a noun phrase.Let Rule be the set of all instances of the schematic rule applied to Cat.
Note thatthis set is totally determined by the choice BasCat of basic categories.A lexicon for our simple grammar formalism consists of a finite relation betweencategories and basic expressions:Defini t ion 2Lex C BasExp x Cat.We write e := c if (e, c> E Lex.
There is no restriction preventing a single expression fromhaving more than one lexical entry.
What we have with Lex and Rule is a simple phrasestructure grammar, albeit one with an infinite set of rules.
We interpret admissibility(well-formedness or grammaticality) in this phrase structure grammar in the usualway (see Hopcroft and Ullman 1979:79-87).
In particular, we take ?Lex(C) to be the setof strings of basic expressions of category c. By mutual recursion over Cat we definethe ?Lex(C) as the minimal sets such that:Defini t ion 3?
e E ?Lex(C) if (e,c> E Lex?
ele2 c ?Lex(C\[Cl .
.
.
.
.
c,\]) if el C ?Lex(C\[C0, Cl,..., Cn\]) and e2 E ?Lex(C0).It should be fairly obvious at this point how our simple categorial grammar for-malism represents the core of both categorial grammars and the subcategorizationcomponent of HPSG.
It should also be noted that such a grammar and lexical as-signment reduces to a context-free grammar.
This is because only finitely many sub-categories of the lexical categories may ever be used in a derivation and thus onlyfinitely many instances of the application scheme are necessary for a finite categoriallexicon.
Somewhat surprisingly, the converse result also holds (Bar-Hillel et al 1960);every context-free language is generated by some categorial grammar in the form wehave presented.
This latter esult can be deduced from the fact that every context-freelanguage can be expressed with a Greibach normal form grammar where every pro-duction is of the form Co ~ aC1 .
.
.
Cn where n > 0, the C i are  nonterminal categorysymbols, and a is a terminal expression (see Hopcroft and Ullman 1979).
Taking a ba-sic category for every nonterminal of the context-free grammar and a lexical entry ofthe form a := Co \[C1 \[\],..., C, \[\]\] for every production of the above form in the context-free grammar, we produce a categorial grammar that can be shown by induction onderivation length to generate xactly the same language as the Greibach normal formcontext-free grammar.Not only is recognition decidable for context-free languages, but Earley's (1970) al-gorithm is known to decide them in O(n 3) time where n is the length of the input string(in fact, general CFG parsing algorithms can be constructed from matrix multiplicationalgorithms with slightly better worst-case asymptotic performance than Earley's algo-rithm \[Valiant 1975\]).
Unfortunatel~ the situation is quite different after the additionof lexical rules.Before going on, it should be noted that one of the primary reasons for employingcategorial grammars is its natural relation to a compositional semantics (Montague1970).
While we do not consider the semantic effects of lexical rules here, the interested303Computational Linguistics Volume 17, Number 3reader is urged to consult Carpenter (1991) for details of how a higher-order typedsemantics can be naturally added to the system of lexical rules presented below.3.
Adding Lexical RulesThe form of lexical rules that we propose to add to the basic categorial system are whatKeenan and Faltz (1985) have termed valency affecting operations.
These operationsallow the permutation, addition, or subtraction of complements and the modificationof the head or functor category.
Our operations do not have any overt morphologicaleffects, and are thus often referred to as zero morphemes.
The same general exicalrule format has been proposed by virtually everyone considering the lexicon froma categorial perspective (see Dowty 1978, 1979; Bach 1984; Keenan and Faltz 1985;Keenan and Timberlake 1988; and Hoeksema nd Janda 1988).
Moortgat (1987) andAone and Wittenburg (1990) have presented systems that allow extended categorialgrammars to operate at both the morphological nd syntactic levels, but the operationsthat can be carried out by their extended sets of rules produce results very similar to thelexical operations we allow here.
Our results are especially relevant in light of recentwork in HPSG, which admits lexical rules that do the same work as the ones employedhere (see Flickinger 1987 and Pollard and Sag 1987).
In the tradition of Montague,Dowty (1979) allowed arbitrary well-defined operations to be applied to lexical entries,but none of the rules he considered fall outside of the scope of the system presentedhere.
The lexical generalizations studied by Bach (1984) led him to employ lexicalredundancy rules that are expressed by composing basic functions that pick out thehead or tail of a subcategorization list as well as the subcategorization list with eitherthe head or tail removed.
More formally, Bach allowed arbitrary concatenations andcompositions of the following functions to be applied to subcategorization lists:Definition 4FIRST(xl'-'Xn) = x lRREST(xl' ' '  Xn)  --~ X2  " " " XnLAST(xl...x,) = x ,LREST(xl ... Xn)  -~  x 1 " "  Xn-  1After we present our lexical rule system, it should be obvious that Bach's system allowsexactly the same operations to be expressed as we do.
The only difference is that werecast Bach's functional rules in terms of simple pattern-matching.
It is conjecturedin Hoeksema nd Janda (1988) that the resulting system is a proper subset of thecontext-sensitive languages.
We show here that this conjecture could not be furtherfrom the truth, as all of the recursively enumerable languages can be generated usingthese operations.
Keenan and Timberlake (1988) also present a collection of lexicalredundancy rules that would seem to admit the system presented here as a naturalgeneralization.
In particular, they present an analysis of passive almost identical to theone presented below.The restriction placed on the form of our rules is similar to the restriction on GPSGmetarules; we only allow one variable over sequences of categories (see Gazdar et al1985).
This allows the manipulation of arguments a specified istance from either endof the subcategorization list, but not arbitrary arguments.
With obliqueness specifiedin terms of subcategorization rder (see Dowty 1982 and Pollard and Sag 1987), lex-ical rules are able to specify operations on arguments based on their obliqueness.
In304Carpenter CG and HPSG with Lexical Rulesgeneral, a lexical rule is of the form:Definition 5b\[co,.
.
.
.
.
.
,Cn ,$ ,do ,  ?
,dm\] ::~ b'\[c'o,.
,%;, $,d~o,... ,d~m ,\]where $ is taken to be a variable ranging over sequences of categories (as in Ades andSteedman 1982).
More precisely, we assume that the lexical rules are given by a finiterelation:Definition 6LexRule C (BasCat x Cat* x Cat*) x (BasCat x Cat* x Cat*).Thus a rule of the form in (5) would be formally represented as:Definition 7lib, (Co,.
,Cn), (do, .,dm)), (b', (Co, , ' ' .
.
.
.  '
.
.
.
Ca , ) ,  (do, ...,d~,))) E LexRule.The intended interpretation of an element of LexRule is that if a basic expression isassigned to a category that matches its left-hand side, then it is also assigned to a cat-egory that matches its right-hand side.
We generate the final (possibly infinite) lexiconLexRule(BasLex) by closing the basic lexicon under the lexical rules.
More formally, wedefine LexRule(BasLex) to be the least relation such that:Definition 8?
BasLex C LexRule(BasLex), andif cr := b\[co,... ,  Cn, eo, .
.
.
,  ek, do, .
.
.
,  din\] E LexRule(BasLex) and/ / / / b\[co, .
.
.
,cn,$,do, .
.
.
,dm\]  ~ b \[%,...,Cn,,$,do, .
.
.
,d~,\]  E LexRuleI I then cr := b \[%, ?
?
?
,  C n,' , eo, .
.
.
.
,ek, dlo, ..,d~,\] E LexRule(BasLex).Thus, a grammar is determined by the specification of finite sets BasLex and lexRule,over some given finite sets BasExp and BasCat of basic expressions and categories.In the undecidability proof that follows, it is only really necessary to consider lexicalrules that modify the subcategorization list; a slightly modified proof goes through iflexical rules are prohibited from affecting the basic head category.We now take the time to motivate the full power of this lexical rule system.
Astandard example of the application of a lexical rule is passivization, which in oursystem can be stated in the form:Example 9s{np\[\]l, $ np\[\]2\] ~ s{$, ppby\[\]2, np{\]l\] (Passive)The intuitive reading of this rule is that the first argument of any verb can become thelast argument (subject) and the last argument becomes a prepositional by-phrase; thesubscripts, while not an actual part of the rule, indicate this swapping of argumentsand their syntactic markings.
For instance, with a ditransitive verb category such ass\[np\[\]l, np{\]2, rip\[\]3\], the result of applying the passive rule would be s\[np\[\]2, Ppby\[\]3, np\[\]l\].While we cannot account for the fact that the subject occurs before the verb rather thanafter it in the simplified system presented here, this category reflects the fact that thenumber, order, and category of arguments is permuted as a result of passivization.With the stripped-down system presented here, a second lexical rule is required for305Computational Linguistics Volume 17, Number 3passives without the prepositional rgument.
An operation such as detransitivizationcan be stated by the rule:Example 10s\[npN, $\] ~ s\[$\] (Detransitivization)The effect of detransitivization is simply to remove the most oblique argument fromthe subcategorization list.
A nominalization rule might be stated in the form:Example 11siS\] ~ n\[$\] (Nominalization)Applying nominalization to a verbal lexical entry produces a nominal lexical entrywith the same arguments.
We can capture causative verbs with the following lexicalrule:Example 12siS\] ~ s\[$, np\[\]\] (Causative)The causative rule adds another noun phrase argument for the subject in the leastoblique position and increases the obliqueness of the existing arguments.
A rule fordative shift could be expressed as:Example 13s\[np\[\]l, pp&t\[\]2~ np3\[\]\] ~ s\[np2\[\]~ npl\[\]~ np3\[\]\] (Dative)The point of these examples is that very simple lexical regularities uch as passives,causatives, and detransitives motivate a system of lexical rules that switch, add, anddelete elements from the subcategorization lists of lexical entries.Lexical rules of the form we have here could also be used for what are tradition-ally considered to be syntactic operations, such as a rule for headless relatives (seeCarpenter 1991):Example 14s\[$, np~\]\] =~ n\[$, n\[\]\] (Headless Relativization)This rule has the effect of transforming a verbal category into a nominal modifiercategory with the same complements.
Of course, to achieve the effect we desire, wemust be able to mark verbs for their inflectional form and number.
It should be ap-parent from these examples that the formalization of lexical rules presented here isparticularly simple and motivated by a wide variety of seemingly lexical regularities.Further applications of lexical rules of the form we use here may be found in Dowty(1978, 1979), Bach (1984), Hoeksema nd Janda (1988), Keenan and Timberlake (1988),Flickinger (1987), and Pollard and Sag (1987).4.
Finite ClosureWe will now consider a restriction on the application of lexical rules that has the re-sult of restricting the resulting system to a finite set of lexical entries.
In the contextof GPSG, Thompson (1982) restricted metarules to be nonrecursive so that they couldnot apply to rules that they had a hand in generating.
This means that starting with afinite set of rules and metarules, only a finite number of rules would result.
A similar306Carpenter CG and HPSG with Lexical Rulesrestriction allows Aone and Wittenburg (1990) to pre-compile the results of closing acategorial lexicon under a set of morphological operations.
Let FinCIos(LexRule.BasLex)be the finite closure of the set of basic lexical entries under the metarules withthe restriction that no rule can apply to its own output.
More formally, we defineFinCIos(LexRule,Bast.ex) inductively to be the least relation such that:Definition 15?
BasLex C FinClos(LexRule~ BasLex)?
I f  e := c C FinClos(LexRule - R, BasLex) and R c LexRule maps c to c' thene := c r E FinClos(LexRule, BasLex).This restriction ensures that a lexical rule never applies to its own output, as a lexicalrule R can only be applied to a lexical entry that is derived without application of R.We thus have:Theorem 1 (Finite Closure)If LexRule and BasLex are finitethen FiaCIos(LexRule,Bastex) is finite.ProofTrivial by induction on the cardinality of LexRule.
\[\]The force of this result is that if we are willing to restrict our lexical rules tononrecursive applications, then we have a finite lexicon and hence generate only acontext-free language.
But Carpenter (1991) argues for recursive lexical rules and pro-vides examples from the English verbal system for which recursive rule applicationseems necessary.5.
Argument Complexity BoundsBefore moving on to the undecidability result, we define a notion of category com-plexity and show that the result of closing a finite lexicon under a finite number oflexical rules leads to a lexicon for which there is an upper bound on the complexityof the complements in lexical categories.
Placing an upper bound on the complexityof entire categories in the lexicon restricts the system to context-free languages andensures decidability.Our complexity metric is based purely on the number of complements for whicha category subcategorizes and not the complexity of the complements hemselves.
Thecomplexity of a category b\[Cl~...~ Cn\] is defined to be n, which we write as:Definition 16Comp(b\[q~..., cn\]) = n.While it is possible to have a lexical rule such as b\[$\] ~ b\[c, $\], which allows the deriva-tion of categories of unbounded complexity, the complements of categories derivedby lexical rules are bounded in their complexity.Theorem 2For any finite base lexicon BasLex and finite set LexRule of lexical rules, there is a boundk such that if e := b\[q~..., c~\] c LexRule(BasLex) then Comp(ci) < k for 1 < i < n.307Computational Linguistics Volume 17, Number 3ProofBecause BasLex is finite, there is an upper bound on argument complexity for any com-plement category assigned by BasLex.
Similarly, since there are only a finite number ofrules in LexRule there is an upper bound on the complexity of complements specifiedin the outputs of any rule.
Taken together, these facts imply that there is a boundedcomplement complexity in the result of closing BasLex under LexRule, since any com-plement category assigned by LexRule(BasLex) must have been a complement categoryeither in BasLex or in the complement list of one of the output rules in LexRule.
?This result shows that the lexical rules cannot modify the structure of complementsother than by completely replacing them with one of a finite number of alternatives.We now note that if we restrict he complexity of lexical categories themselves,we wind up with a context-free grammar.
Let LexRule(13aslex)(n) be the set of lex-ical entries with categories of complexity less than or equal to n, so that (e, c) ELexRule(BasLex)(n) if and only if (e,c) E kexRule(BasLex)(n) and Comp(c) < n.Theorem 3The language generated by LexRule(BasLex)(n) is context-free.ProofUsing the previous theorem, we know that there is a bound k on the size of thecomplements in any lexical entry in LexRule(BasLex), and thus there must only be afinite number of lexical entries with complexity of less than or equal to n. Consequently,I_exRule(Baslex)(n) is finite and thus a standard finitary categorial grammar lexiconthat generates a context-free language.
?6.
Generative PowerAs we said in the introduction, we characterize the generative power of our systemby the reduction of generalized rewriting systems to our head-complement grammarswith lexical rules.
Before doing this,, we review the basic definition of a generalizedrewriting system.
A generalized rewriting system is a quadruple G = (V, s, T ,R)where V is a finite set of nonterminal category symbols, s E V is the start symbol, Tis a set of terminal symbols, and R C_ (V* x V*) U (V x T) is a finite set of rewritingrules and lexical insertion rules, which are usually expressed in the forms:Definition 17?
v l .
.
.
vn  ----* Ul""Um where vi:uj E V?
v >twherevEVandtET .String rewriting is defined so that:Definition 18pcrp I ~ pv'Jif p, p' E (V U T)* and if (~ * ~-) E R is a rule.
The language L(G) generated by ageneral rewriting system G is defined to beDefinition 19L(G) = {or E T* Is _L_, ~}308Carpenter CG and HPSG with Lexical Ruleswhere s is the start symbol and _L, is the usual transitive closure of theIt is well known that:relation.Theorem 4A language L is recursively enumerable if and only if there is a generalized rewritingsystem G = IV, s~ T, R / such that L = L(G).ProofSee Hopcroft and Ullman (1979:221-223).
?We now present he fundamental result of this paper, which states that the lan-guages that can be characterized by categorial grammars with lexical rules are exactlythe recursively enumerable languages.Theorem 5 (R.E.-Completeness)A language S is recursively enumerable if and only if there is a finite lexicon BasLexand finite set LexRule of lexical rules such that S is the set of strings assigned to thecategory s\[\] by LexRule(BasLex).ProofIt is trivial to show that the languages generated by our system are recursively enu-merable; standard breadth-first earch mechanisms that interleave lexical and syntacticderivations in order of complexity can be seen to enumerate all analyses.Conversely, suppose that we have a recursively enumerable language S and thatthe generalized rewriting system G = (V~s~ T~R I is such that S = L(G) is the set ofstrings generated by G. We show how to construct a categorial grammar using lexicalrules that assigns the set S of expressions to some distinguished basic category.We begin by assuming that:Def in i t ion  20BasCat = V U {#1 s}.We take a basic category for every nonterminal symbol in the generalized rewritingsystem along with two special symbols; the # is used as a delimiter in representingsequences of nonterminals by means of circular queues, while the s is used as thedistinguished category of the grammar (note that s, not s, is the distinguished startsymbol of G).
Our claim is that the lexicon in (21) and lexical rules in (22) generateexactly the same language as G.Def in i t ion  21?
t :=v \ [ \ ]  i f (v~t )  ER?
t :=  v\[#,s\] if (v - -~  t) E RDef in i t ion  22?
V1\[$, V2\] ~ Pl IV2, $\] if V 2 E V U {#}?
v \ [$ ,v l , .
.
.
, vn \ ]  ~ V\[$,Ul , .
.
.
,Um\] if (Vl'''Vn ~ Ul"' 'Um) E R?
v\[#, v, $\] ~ s\[$\] if v E V309Computational Linguistics Volume 17, Number 3We represent an arbitrary string v lv2 .
.
.v ,  E V*  by means of the categorial grammarcategory v\[#\[\], vl \[\],..., vn \[\]\].
In what follows, we omit empty subcategorization lists,so that the above category would be abbreviated to v \ [#,v l  .
.
.
.
,Vn \ ] .
Note that withthis encoding, there are as many representations of a string as there are nonterminalsvEV.By repeated application of the first lexical rule in (22), from a |exical entryt := v \ [#,V l , .
.
.
~Vm,Vm+l~...  ~Vn\]we can generate a lexical entry of the form:t := V\ [Vm+l , .
.
.
,Vn ,#,v l , .
.
.
,Vm\ ] .The application of this rule is the key to allowing an arbitrary string in the middleof a subcategorization list to move to the end so that it may be modified by a lexicalrule.
The # symbol keeps track of the true beginning of the sequence being derived.Suppose that the generalized rewriting system allows the one-step derivation:x l  .
.
.
X iV l  .
.
.
Vny l  "" " y j  ~ X l  " " " X iU l  " " " Umyl  " " " y j .If this rewriting is possible, then (v~ .
.
.
vn  ~ Ul  "'" Um) E R so that by a combinationof the first lexical rule and second lexical rule we can carry out the following lexicalderivation:t "~t :=t :=t :=v \ [#,x~, .
.
.
, x i ,v l  .
.
.
.
, v , ,y l , .
.
.
, y j \ ]v \ [y l , .
.
,  Yi, #, xl .
.
.
.
, x;, v l ,  ?
?
?, v, \]?d\[yl,..., y j ,  # ,  X l  .
.
.
.
, x i ,  Ul  .
.
.
.
, Urn\]V\[#, X~, .
.
.
, Xi,  U~ .
.
.
.
, Urn, y l , .
.
.
,  yj\].A simple induction then gives us the result that ifx l  .
.
.
x i  " ~ y l  " " y jthen we can derive a lexical entry of the formt := v\[#, y l  .
.
.
.
, Yj\]from a lexical entry of the formt := v\[#, Xl , .
.
.
,  Xi\].Considering the first lexical entry, and our last observation, ifS ~ V 1 ?
?
?
Vn310Carpenter CG and HPSG with Lexical Rulesaccording to the generalized rewriting system, then we can derive the lexical entryt := v\[#, Vl, .
.
.
,  v,\]from the lexical entryt :=  v\[#, s\]if (v , t) E R. Now suppose that (vi ~ ti) C R for 1 < i < n so that h ' "  t, c L(G).Beginning with the basic lexical entrytl := Vl \[#, S\]representing the lexical rewriting (Vl ----* tl) E R, we can derive the lexical entry:tl := Vl \[#~ Vl~ ...~ Vn\].From this last entry and our last lexical rule, we may derive a lexical entry:tl := s\[v2,..., Vn\].Furthermore, since we have ti :-= vi for 2 < i < n because (Vi ~ ti) E R, we can assignt i t2 .
.
,  tn to the category s\[\] by repeated application of the categorial grammar ulescheme.
In fact, for 1 < i < n we have t l . '
.ti assigned to s\[vi+l,... ,vn\].
Thus everystring that belongs to the language generated by G can also be generated using ourcategorial grammar with lexical rules.It simply remains to notice that we have tl := s\[v2,...,vn\] if and only if tl :=vl \[#, Vl,.
.
.
,  vn\], which holds if and only if s * ~vl .
.
.
Vn and vl ---* h- The only way toderive viii from ti is by using a lexical entry which is only possible if (vi , ti) E R.Furthermore, the only derivations of category s\[\] in the categorial grammar must bederived in this manner, as the only way s can arise is by lexical rule application in theabove situation.
Also note that while the # category can be removed by applying somelexical rule, there are no expressions that are assigned to #\[\] by our grammar.
Thusthe only way that the string tl .
.
.
tn can be assigned to category s\[\] is by following alexical derivation that directly mirrors a derivation in G. ?The fundamental idea behind our reduction is that the complement specificationon a categorial grammar category can be used to simulate the intermediate stages ofa generalized rewriting system derivation.
The only complication arises from the factthat categorial grammar lexical rules operate on the ends of subcategorization lists,while generalized rewriting systems are allowed to operate on arbitrary substrings.7.
ConclusionThe system presented here for lexical rules in a simplified form of categorial grammarwith only one head-complement rule scheme has proven to generate arbitrary recur-sively enumerable languages.
The inevitable conclusion is that if we want a naturaland effectively decidable lexical rule system for categorial grammars or head-driven311Computational Linguistics Volume 17, Number 3phrase structure grammars, then we must place restrictions on the system given hereor look to state lexical rules at completely different levels of representation whichthemselves provide the restrictiveness desired, such as in terms of some finite set ofthematic roles and grammatical relations, as is done in Lexical Function Grammar(LFG) (see Bresnan 1982; Levin 1987; Bresnan and Kanerva 1989).
The common as-sumption that lexical rules can perform arbitrary operations on subcategorization listsbased on obliqueness i simply not restrictive nough to yield an effective recognitionalgorithm.AcknowledgmentsThe primary thanks go to Kevin Kelly, whosuggested using the circular queue idea forrepresenting the tape of a Turing machine,an idea that I adapted here.
Stuart Shieberoriginally conjectured that theundecidability result would hold.
I wouldalso like to thank two anonymous refereesfor comments.
Finally, I owe thanks toRobert Levine, Alex Franz, Mitzi Morris,and Carl Pollard for providing helpfulcomments on a previous incarnation of \[heundecidability proof.ReferencesAdes, A. E.; and Steedman, M. J.
(1982).
"On the order of words."
Linguistics andPhilosophy 4:517-558.Aone, C.; and Wittenburg, K. (1990).
"Zeromorphemes in unification-basedcombinatory categorial grammar."
InProceedings, 28th Annual Meeting of theAssociation for Computational Linguistics.Pittsburgh, PA.Bach, E. (1984).
"Some generalizations ofcategorial grammars."
In Varieties ofFormal Semantics: Proceedings ofthe FourthAmsterdam Colloquium 1982, edited byF.
Landman and F. Veltman, 1-23.Dordrecht: Foris.Bar-Hillel, Y.; Gaifman, C.; and Shamir, E.(1960).
"On categorial and phrasestructure grammars."
Bulletin of theResearch Council of Israel 9F:1-16.Bresnan, J.
(ed.)
(1982).
The MentalRepresentation f Grammatical Relations.Cambridge, MA: The MIT Press.Bresnan, J.; and Kanerva, J. M.
(1989).
"Locative inversion in Chiche@a: A casestudy in factorization i grammar.
"Linguistic Inquiry 20(1):1-50.Calder, J.; Klein, E.; and Zeevat, H.
(1988).
"Unification categorial grammar: Aconcise, extendable grammar for naturallanguage processing."
In Proceedings, 12thInternational Conference on ComputationalLinguistics.
Budapest.Carpenter, B.
(1991).
"Categorial grammar,lexical rules and the English predicative.
"In Formal Grammar: Theory andImplementation, Vancouver Studies inCognitive Science, Volume 2, edited byR.
Levine.
Vancouver: University ofBritish Columbia Press.Dowty, D. R. (1982).
"Grammatical relationsand Montague grammar."
In The Nature ofSyntactic Representation, edited byP.
Jacobson and G. K. Pullum.
Dordrecht:D. Reidel.Dowty, D. R. (1979).
Word Meaning andMontague Grammar.
Synthese LanguageLibrary, Volume 7.
Dordrecht: D. Reidel.Dowty, D. R. (1978).
"LexicaUy governedtransformations a  lexical rules in aMontague grammar."
Linguistic Inquiry9:393-426.Earley, J.
(1970).
"An efficient context-freeparsing algorithm."
Communications of theACM 13:94-102.Flickinger, D. (1987).
Lexical Rules in theHierarchical Lexicon.
Doctoral dissertation,Stanford University, Stanford, CA.Flickinger, D., Pollard, C., and Wasow, T.(1985).
"Structure-sharing i  lexicalrepresentation."
In Proceedings, 23rdAnnual Meeting of the ACL.Gazdar, G.; and Klein, E.; Pullum, G.; andSag, I.
(1985).
Generalized Phrase StructureGrammar.
Oxford: Basil Blackwell.Hoeksema, J.; and Janda, R. D.
(1988).
"Implications of process morphology."
InCategorial Structures and Natural LanguageStructures, edited by R. Oehrle, E. Bach,and D. Wheeler.
Dordrecht: D. Reidel.Hopcroft, J., and Ullman, J.
(1979).Introduction to Automata Theory, Languagesand Computation.
Reading, MA:Addison-Wesley.Keenan, E. L.; and Faltz, L. M. (1985).Boolean Semantics, Synthese LanguageLibrary, Volume 23.
Dordrecht: D. Reidel.Keenan, E. L.; and Timberlake, A.
(1988).
"Natural anguage motivations forextending categorial grammar."
InCategorial Structures and Natural LanguageStructures, edited by R. Oehrle, E. Bach,and D. Wheeler.
Dordrecht: D. Reidel.Levin, L. (1987).
"Toward a linking theoryof relation changing rules in LFG.
"312Carpenter CG and HPSG with Lexical RulesTechnical report CSLI-87-115, Center forthe Study of Language and Information,Stanford University.Montague, R. (1970).
"Universal grammar.
"Theoria 36:373-398.Moortgat, M. (1987).
"Compositionality andthe syntax of words."
In Foundations ofPragmatics and Lexical Semantics, edited byJ.
Groenendijk, D. de Jongh, andM.
Stokhof.
Dordrecht: Foris.Oehrle, R.; Bach, E.; and Wheeler, D., eds.(1988).
Categorial Grammars and NaturalLanguage Structures.
Dordrecht: D. Reidel.Pollard, C. J., and Sag, I.
A.
(1987).Information-Based Syntax and Semantics:Volume I - -  Fundamentals.
CSLI LectureNotes, Volume 13.
Stanford: Center forthe Study of Language and Information.Thompson, H. (1982).
"Handling metarulesin a parser for GPSG."
In The 21st AnnualMeeting of the Association for ComputationalLinguistics.
26-37.Uszkoreit, H., and Peters, P. S. (1986).
"Onsome formal properties of metarules.
"Linguistics and Philosophy 9(4):477-494.Valiant, L. (1975).
"General context-freerecognition in less than cubic time.
"Journal of Computer and Systems Science10:308-315.313
