A Simple Transformation for Oflqine-Parsable Grammars and itsTermination PropertiesMarc  Dymetman*Rank  Xerox  Research  Cent re6, chemin  de Maupcr tu i sMey lan ,  38240 Fra,ncedyraetmanOxerox ,  f rAbst rac t  We present, in easily reproducible terms,a simple transformation for offline-parsable grammarswhich results in a provably terminating parsing pro-gram directly top-down interpretable in Prolog.
Thetransformation consists in two steps: (1) removalof empty-productions, followed by: (2) left-recursionelimination.
It is related both to left-corner parsing(where the grammar is compiled, rather than inter-preted through a parsing program, and with the ad-vantage of guaranteed termination in the presence ofempty productions) and to the Generalized GreibachNormal Form for I)CGs (with the advantage of imple-mentat ion simplicity).1 MotivationDefinite clause grammars (DCGs) are one of the sim-plest and most widely used unification grammar for-malisms.
They represent a direct augmentation ofcontext-free grammars through the use of (term) uni-fication (a fact that tends to be masked by their usualpresentation based on the programming language Pro-log).
It is obviously important o ask wether certainusual methods and algorithms pertaining to CFGs canbe adapted to DCGs, and this general question informsmuch of the work concerning I)CGs, as well as morecomplex unification grammar formalisms (to cite onlya few areas: Earley parsing, LR parsing, left-cornerparsing, Greibach Norinal l,'orm).One essential complication when trying to generalizeCFG methods to the I)CG domain lies in the fact that,whereas the parsing problein for ClOGs is decidable,the corresponding problem for DCGs is in general an-decidable.
This can be shown easily as a consequenceof the noteworthy fact that any definite clause pro-gram can be viewed as a definite clause grammar "onthe empty string", that is, as a DCG where no termi-nals other than \[ \] are allowed on the right-hand sidesof rules.
The ~Itlring-completeness of defnite clanseprograms therefbre implies the undecidability of theparsing problem for this snbclass of DCGs, and a for-tiori for DCGs in general.
1 In order to guarantee good*Thaalks to Pierre Isabelle and Frangols Perrault for theircomments, and to C,\[TI (Montreal) for its support during thepreparation of this paper.1 I)CGs on I, he empty string might be dismissed as extreme,computationM properties for DCGs, it is then neces-sary to impose certain restrictions on their form suchas o\[fline-parsability (OP), a nomenclature introducedby Pereira and Warren \[11\], who define an OP DCGas a grammar whose context-free skeleton CFG is notinfinitely ambiguous, and show that OP DCGs lead toa decidable parsing problem.
2Our aim in this paper is to propose a simple trans-formation lbr an arbitrary OP DCG putt ing it intoa form which leads to the completeness of the directtop-down interpretation by the standard Prolog inter-preter: parsing is guaranteed to enumerate all solutionsto the parsing problem and terminate.
The e.xistenceof such a transformation is kuown: in \[1, 2\], we haverecently introduced a "Generalized Greibach NormalForm" (GGNF) for DCGs, which leads to terminationof top-down interpretation i the OP case.
lIowever,the awdlable presentation of the GGNF transforma-tion is rather complex (it involves an algebraic studyof the fixpoints of certain equational systems repre-senting grammars.).
Our aim here is to present a re-lated, but much simpler, transformation, which from atheoretical viewpoint performs omewhat less than theGGNF transformation (it; involves some encoding ofthe initial DCG, which the (~GNF does not, and it onlyhandles oflline-parsable grammars, while the GGNF isdefined for arbitrary DCGs), a but in practice is ex-tremely easy to implement and displays a comparablebehavior when parsing with an OP grammar.3'he transformation consists of two steps: (1) empty-production elimination and (2) left-recursion elimina-tion.The empty-production elimination Mgorithm is in-spired by the nsnal procedure for context-free gram-mars.
But there are some notable differences, dueto the fact that removal of empty-productions is ingeneral impossible for non-OP I)CGs.
The empty-but they are in fact at the core of the oflline-parsability concept.See note 3.2'lThe concept of ofllineA~arsability (under a different name)goes back to \[8\], where it is shown to be linguistically relevant.aThe GGNF factorizes an arbitrary DCG into two compo-nents: a "unit sub-DCG on the empty string", and another paa'tconsisting of rules whose right-hand side starts with a tm'mi-nal.
The decidability of the DCG depends exclusively on certainsimple textual properties of the unit sub-DCG.
This sub-l)CGcan be eliminated fl'om the GGNF if and only if the DCG isof Illne-parsable.1226product ion e l iminat ion a(gor i thm is guaranteed to ter-minate  only in the OP  ease.
't It produces a I)C(\]declarat ively equivalent o the.
original g rammar .The  left-recursion e l iminat ion ~dgorithnt is adaptedf rom a t ransR)rmat ion proposed in \[4\] in the contextof a certain fo rmal i sm ("l ,exical Grammars" )  whichwe presented as a possible basis for bui(ding reversibleg rammars ,  a The key observat ion (in sl ightly differentterms)  was that ,  in a I )CG, i fa  nontermiua l  g is defined(itcrMly by the two rules (the first of which is left-reeursive)::+\ ' )  --+ g(Y), a(v, x)., (x )  --, ~(x) .then the replacement  of these two rules by the threerules (where d_tc is a new nontermina l  symbol ,  whichrepresents a kind of "transit ive c(osure" of d):g(X)  - ,  t (Y ) ,  d_tc(r, X) .,/_re(X, x) -+ \[\].d_tc(X, Z) -,  d(X, V), d_tc(r, Z).l)reserves the declarat ive semant ics  o1' tim grammar ,  sWe remarked in \[4\] that  this t rans format ion  :'isclosely re(ated to le('t<.orner pa.rsing", but  did not givedetails.
In a recent paper  \[7\], Mark Johnson  introduces"a left-corner p rogram transR)rmat ion for natura l  (an-guage pars ing",  which has some s imi lar i ty to the abow~t rans format ion ,  but  whic.h is applied to definite clauseprograms,  rather than  to ()CGs.
l ie proves that  thist rans format ion  respects deelarat ive equivalcnee, andalso shows, us ing a mode(q;heoret ic approach, the closeconnect ion of his t rans format ion  with (eft-corner pars-ing \[12, 9, 1()\].
r(t 1TlUSt be noted that  the left-reeursion e l iminat ionprocedure can 1)e a*pplied to any \])C(~, whether OP ornot.
Even in the case where the grammar  is OP, however, it wil( not (ead to a te rminat ing  pars ing a lgor i thmunless empty  l )roductions have been prea(ably elimi-nated f rom the grammar ,  a l)roblem wlfirh is sharedby the usual  left-corner parser- interpreter.4'Fhe fact that the standard (','FG emptyq)roduction elinfionation transformation is always possible is relal.ed to the factthat this transformation does not preserve degrees of ambiguity.For instance the infinitely ambiguous grammar S ~ \[b\] A, AA, A -+ \[ \] is simplified into the grammar S -+ \[b\].
This typeof simplification is generally impossible in a I)UG.
Consider forinsl ....... tim "g,' ........... "' s( X ) -~ \[ ....... be,'\] a( X ), a( ....... ( X ) ) --+a(x),  ~40) -+ \[\].572he xnethod goes back to a transh)rmation used to compileoat.
certain local cases of left-reeursionli'om I)CGs in the contextof the Machine Translation prototyl)e CItlTTER \[3\].6A proof of this fact, baaed on a comparison of prootktreesfor the original and the transformed grammar, is giwm in \[2\].
?His paper does not state termination conditions for thetransformed program.
Such ternfination conditions w(mM prob-ably involve some generalized notion of o\[ttine-parsability \[6, 5,13\].
By contrast, we prove termlnation only for I)CGs which arcOP in the original sense of Pereira and Warren, but this ca.seSeelllS to  llS tO represent  l l l t lch of the core  issue, &lid Lo lead tosome direct exl.ensions.
\],'or instance, the I)CG transformationproposed here can I)e directly applied to "guided" programs inthe sense of \[4\].Dae to the space available, we do not give here co lrectncss proof~ Jbr the algorithms presented, but ez'peetto publish them in a t idier version of this paper.
Thesealgorithms have actually been implemented in a slightlyextended version, where the*,/ are also used to decidewhether the grammar proposed for" transformation isin fact oJfline-parsable or not.2 Empty -product ione l in l inat ion(t can be proven that ,  if I )CG0 is an OP ()CG, thetb(lowing t rans format ion ,  which involves repeated par-tial evaluat ion of rules that  rewrite into the emptystr ing, terminates  after a finite number  of steps andproduces a grammm: I )CG wi thout  empty- l ) roduct ionswhich is equivalent to the initial g rammar  on non-eml)ty strings: sin imt :  an otllineq)ars~tble DC(-II.ont Imt :  a DCG without empty rules equivalent o DC(I Ion non-empty strings.alg, o r i thm:initialize I,IST1 to a list of the rules of D(X; \ [ ,  :;el I,IST2to the empty fist.wh i le  there exists ;m empty rule El/: / l (T | , .
.
.
, Tk ) - , \ [ \ ]in LISTI do:Inove F,R to I,IS'I'2.ti)r each rule R: B(...) - + ~ in LIST1 such that (~(:ontains an instance of A(...) (includingnew such rules created inside this loop) do:tilr each such instance A(SI .... , Sk) unifiable withA(TI, ...,7'k) do:~q)pend to 13S'l'l ;~ rule IU: ll(...) ?
~ d obtainedfrom R by removing A(,ql, .... S'k)lrom (~ (or by replacing it with \[\] if this wasthe only nonterminal in or),nnd by unifying the Ti 's with the ,5'i's.set I)C(I to LISTI.For instance the grammar  consist ing in the nine rulesappear ing above the separat ion in lig.
1 is t rans formedinto the grammar  (see figure):~(,s(N P, v t,)) --?
,,v(NP), vv(W') .,,.p(',~v(~'~, c')) -+ ,,Up), co , ,p (c ) .,,(,,.
(Vcovte) - ~ \[peovte\].vv(vv(~'(.~te~p), c) )  ~ \[,te~v\], eo,~,v(c).eo,,V(,'.
(C, a)) ?
eo,,,~,(c), ad,~(A).,dv(ad,,(l~e,'e))-.
\[t,e~4a,tv(adv(todav)) - ,  \[today\],~V('P04,~;o~O), C) - -  co.,.V(C).,~p(,~p(N, nil)) - ~ ,4N).eo,~v(c ( , ' t ,  A))  -+ , , , t4A) .vp(vp(v(*t~,~p), , .it)) -~ N~V\] ..q.s("V('~V('4V"")), ,,.it), V t')) - .
~V(V V).I~When DCG0 is not OP, the transl\]~rlnatiott ~xlay producean infinite lllll\[lh(!l" Of l'Lll(!8, b i l l  a s imp le  extens ion  of  the  aid(>rithm can detect this situation: the transformathm stops andthe dr;mimer is decl;~red not to be Ot ).12273 Le f t - recurs ion  e l im inat ionThe transformat ion can be logically divided into twosteps: (1) an encoding of DCG into a "generic" formDCG' ,  and (2) a simple replacement of a certain groupof left-recursive rules in DCG'  by a certain equivalentnon left-recursive group of rules, yielding a top-downinterpretable DCG".
An example of the transformat ionDCG ----+ DCG'  ----+ DCG" is given in fig.
2.The encoding is performed by the following algo-r i thm:input: an oittine-parsable DCG without empty rules.output :  an equivalent "encoding" DCG'.a lgor i thm:initialize LIST to a list of the rules of DCG.initialize DCG' to the list of rules (literally):g(X) --~ g(Y), d(Y, X).g(x) - ,  t(x).whi le  there exists a rule R of the formA(T1 ..... Tk) --, B(S1 ..... Sl) a in LIST do:remove R from LIST.add to DCG' a rule R':d(B(?
'l ..... Sl), A(T1 ..... Tk)) --+ ~',where c~  is obtained by replacing any C(V1, ..., Vm)in a by g(C(V1, ..., Vm)),or is set to \[ \] in the case where oe is empty.whi le  there exists a rule R of the formA(TI ..... Tk) -+ \[terminal\] ~ in LIST do:remove R from LIST.add to DCG' a rule R':t(A(T1 ..... TI~)) -.
\[terminal\] #,where cJ is obtained by replacing any C(V1, ..., Vm)in ~ by g(6'(V1 ..... Vm)),or is set to \[ \] in the ease where c~ is empty.~fhe procedure is very simple.
It involves the cre-ation of a generic nonterminal  g(X), of arity one,which performs a task equivalent to the original nonter-minals s (X1 , .
.
.
,Xn) ,vp(X1 , .
.
.
,X ra ) , .
.
.
.
The goalg(s(X1, .
.
.
,  Xn)) ,  for instance, plays the same role forparsing a sentenee as did the goal s (X1 , .
.
.
,Xn)  inthe original grammar.Two further generic nonterminals are introduced:f iX)  accounts for rules whose r ight-hand side beginswith a terminal,  while d(Y, X) accounts for rules whoser ight-hand side begins with a nonterminal .
The ratio-nale behind the encoding is best understood fi'mn thefollowing examples, where ~ represents rule rewrit-ing:vp(vp(v(sleep), C)) - ,  \[sleep\], comp(C)g(vp(vp( v( sleep), C) ) ) ~ \[sleep\], g(comp( C) )g(X) -~ \[sleep\],({x  : ~p(~p(~(sleep), c))}, g(co.~p(c')) !.s(s(NP, VP)) --+ np(NP),  vp(VP)g(s(s(NP, VP)))  ---* g(np(NP)),  g(vp(VP))g(X) ~ g(y),( {X = s(s(NP, VP)) ,  Y = np(NP)},  g(vp(VP)) ;The second example i l lustrates the role played byd(Y, X)  in the encoding.
This nonterminal  has the fol-lowing interpretat ion: X is an" immediate"  extensionof Y using the given rule.
In other words, Y corre-sponds to an " immediate left-corner" of X.The left-recnrsion el imination is now performed bythe following "algorithm" :9intmt:  a DCG' encoded as above.output :  an equivalent non left-recursive DCG".a lgor i thm:initialize DCG" to DCG'.in DCG", replace literally the rules:g(X) -~ .q(g), d(Y, X).g(X) -~ t(X).by the rules:g(X) ---+ t(Y), d_tc(Y; X).d_tc(X, X) --~ \[ \].d_tc(X, Z) --+ d(X, Y), d_tc(Y, Z).In this transformation,  the new nonterminal  d_tcplays the role of a kind of transit ive closure of d. It canbe seen that,  relative to DCG",  for any string w andfor any ground term z, the fact that .q(z) rewritesinto w - -o r ,  equivalently, that  there exists a groundterm x such that  t(x) d_tc(x,z) rewrites into w- -is equivalent o the existence of a sequence of groundterms x = xl,  .
.
.
,  xa = z and asequence  of stringswl,  .
.
.
,  wk such that  t(xl) rewrites into wi, d(xl, x2)rewrites into w;, ..., d(xk-1, xk) rewrites into we, andsuch that  w is the str ing concatenation w = wl " "wk .From our previous remark on the meaning of d(Y, X),this can be interpreted as saying that  "consituent x isa left-corner of const ituent z", relatively to str ing w.The grammar  DCG" can now be compiled in thestandard way---via the adjunetion of two "differentiallist" arguments-- - into a Prolog program which can bcexecuted irectly.
If we started from an ofl l ine-parsablegrammar  DCGO, this program will enumerate all so-lutions to the parsing problem and terminate after afinite number of steps.
1?References\[1\] Marc Dymetman.
A Generalized Greibach Nor-mal Form for Definite Clause Grammars.
In Pro-ceedings of the 15th International Conference on9In practice, this and the preceding algorithm, which are dis-sociated here for exposition reasons, are lumped together.1?There exist of course DCGs which do not contain emptyproductions and which are not OP.
:\['hey are characterizedby theexistence ofcycles of "chain-rules" of the form: al (...) -+ a2 (...).. .
.
.
.
am-l(...) -+ am(...).
, with am = al.
But, if we startwith an OP DCG0, the empty-production elimination algorithmcannot produce such a situation.1228I,ISTI delete LIST2s(s(NP, V P) ) --~ np( N P), vp(V P).np(np(N, C)) -+ n(N), comp(C).,,(,,.
(wopl~) ) - .
\[v~ovu,\].n(,~(,jo~)) -~ \[\].~V(~V(,,(~t~.e~), c)) -+  \ [~v\] ,  eo.~V(C').comp(c(C, A)) -~ cornp(C), adv(A).adv(adv(herc)) -+  \[h,.re\].adv(adv(today)) --+ \[today\].np(nV(,4you) ), C) ~ corny(C).rip(rip(N, nil)) -+ n( N).comp(c(nil, a)) -+ adv(A).
'oV(,,p(~(~l~V), hi0) -~ \[.~mV\].,,p(,~(,(yo~)), ,~i~) --, \[\].~(,(,~p(,w(,~(vo,O )  ,~iO, v t,) ) ~ v~,(w,),n(,4,,o,,)) --+ \[\].comv(niO -~ \[\].,~v(,,p(,,(vo,*) ), ~il) - .
\[\].Figure 1: Empty-production elimination.Computational Linguistics, volume 1, pages 366372, Nantes, l,'rance, .\]uly 1992.\[21\[ Marc l)ymetman.
Transformatkms degrammaireslogiques et rdversibilitd en Traduction Autom~,-tique.
Th#~se d'Etat, 1992.
Universitd JosephFourier (Grenoble 1), Grenoble, France.\[3\] Marc Dymetman and Pien'e }sabelle.
Reversiblelogic grarnmars for machine translation.
\[n Pro-ceedings of the ,5'econd International Uo'l@renceon 7'heorelical and Methodological Issues in Ma-chine Translation of Natural Languages, Pitts-burgh, PA, June 1988.
Carnegie Mellon Univer-sity.\[4:\] Marc l)ymetman, Pierre Isabelle, and FrangoisPerrault.
A symmetrical pproach to parsing andgeneration.
In Proceedings of the 13lh Interna-tional Conference on Computational Liuguislics,volume 3, pages 90-96, Itelsinki, August 1!
)90.\[5\] Andrew tlaas.
A generalization of the o\[}tine-parsable grammars.
In Proceedings of the 27lhAnnual Meeting of the Association for Computa-tional Linguislics, pages 237 42, Vancouw~r, BC,Canada, June 1989.\[6\] Mark Johnson.
Attribute-Value Logic and theTheory of Grammar.
CSL} lecture note No.
16.Center for the.
Study of I,anguagc and Informwtion, Stanford, CA, 1(.
)88.\[7\] Mark Johnson.
A left-corner program transforn,a-tion for natural anguage parsing, (forthcoming).\[8\] R. Kaplan and J. lh:esnan.
Lexica\] flmctionalgrammar: a R)rmal system for grammatical rep-resentation.
In Bresnan, editor, The Men*al \]{cp-resenialion of Grammatical ltelations, pages 173 -281.
MIT Press, Cambridge, MA, 1982.\[9\] Y. Matsumoto, II.
Tanaka, lI.
\]firikawa,H.
Miyoshi, and I\[.
Yasukawa.
BUP: a bottom-up pm:ser embedded in Pro\[og.
New GeneralionComputing, 1(2):145-158, 1983,\[10\] Fermmdo C. N. Pereira and Stuart M. Shieber.Ibvlog and Natural Language Analysis.
CSI,I lec-tm:e note No.
10.
Center for tim Study of Languageand Information, Stan}'ord, CA, 1987.l i l t  I:'ernando C. N. l'ercira and \])avid }}.
71).
War-ren.
Parsing as deduction.
In Proceedil~gs of the211h Annual Meeling of the Association for Com-pulalional Linguistics, pages 137-144, MIT, Cam-bridge, MA, June 1983.\[12\] D. ,I. l{osencrantz and P. M. Lewis.
Deterministicleft-corner parsing.
In Eleventh Annual Sym.po-sium on Switching and Automata Theor?/, pages139 }53.
IEEE, 1970.
F, xtended Abstract.\[13\] Stuart M. Shieber.
Constraint-Based GrammarFormalisms.
MI'I' Press, Cambridge, MA, 1992.7229I)CGs(s( N P, V P) ) ---, np( N P), vp(V P).np(np(N, C)) ~ n(N), comp(C).,~(,~(people)) -~ \[p~ople\].vp(vp(v(sleep), C) ) ~ \[sleep\], eomp( C).cornp(c(C, A)) -~ comp(C), adv(d).ad~(~dv(here)) -~ \[here\].adv(adv(today)) ~ \[today\].np(np(n(you) ), C) --~ comp( C).np(,~p(N, ,~il)) -~ ,~(N).comp(e(nil, A)) --+ adv(A).vp(vp(v(sleep), nil)) ~ \[,sleep\].s(s(np(np(n(you) ), nil), V P)) --+ vp(Y P).DCG'g(X) -~ g(Y), d(Y, X).g(X) --  t(X).d(np(NP), s(s(NP, VP))) --~ g(vp(VP)).d(n(N), np(np(N, C))) -+ g(comp(C)).t(n(n(people) ) ) -+ \[people\].t(vp(vp(~(steep), C) ) ) ~ \[sleep\], g(eomp( C) ).d(comp(C), comp(c(C, A))) ~ g(adv(A)).t(adv(adv(here))) ~ \[here\].t(adv(adv(today))) --~ \[today\].d(eomp(C), np(np(~(yo,,) ), C) ) -~ \[\].d(,,(N), ,~p(~p(N, nil))) --+ \[\].d(adv(A), corap(e(nil, A))) -~ \[\].d(~p(W),  s(s(,~p(np(~(yo~)), nil), VP))) -~ \[ \],DCG"g(x) -~ t(y), d_te(Y,X).d_te(X, X) ~ \[ \].d_te(X, Z) -~ d(X, Y), d_tc(Y, Z).d(np(N P), s(s(N P, V P))) -~ g(vp(V P)).d(n(g),  np(np(g, C))) --+ g(comp(C)).t(,(n(people))) -~ \[peopZe\].t(vp(vp(v(sleep), C) ) ) ~ \[sleep\], g(comp( C) ).d(comp(C), comp(e(C, A))) ~ a(adv(A)).t(adv(adv(here))) -+ \[here\].t(adv(adv(today))) --* \[today\].d(comp(C), np(np(n(you) ), C) ) --+ \[\].d(n(N), np(np(N, nil))) -+ \[ \].d(adv(A), comp(c(nil.
A))) --+ \[\].t(vp(vp(v(sleep), nil))) --* \[~leep\].d(vp(V P), s(s(np(np(n(you) ), nil), V P) ) ) --~ \[\].Figure 2: Encoding (DCG') of a grammar (DCG) and left-reeursion elimination (I)CG").1230
