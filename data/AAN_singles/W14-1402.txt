Proceedings of the EACL 2014 Workshop on Type Theory and Natural Language Semantics (TTNLS), pages 10?18,Gothenburg, Sweden, April 26-30 2014.c?2014 Association for Computational LinguisticsSystem with Generalized Quantifiers on Dependent Types for AnaphoraJustyna Grudzi?nskaInstitute of PhilosophyUniversity of WarsawKrakowskie Przedmie?scie 3, 00-927 Warszawaj.grudzinska@uw.edu.plMarek ZawadowskiInstitute of MathematicsUniversity of WarsawBanacha 2, 02-097 Warszawazawado@mimuw.edu.plAbstractWe propose a system for the interpreta-tion of anaphoric relationships betweenunbound pronouns and quantifiers.
Themain technical contribution of our pro-posal consists in combining generalizedquantifiers with dependent types.
Empir-ically, our system allows a uniform treat-ment of all types of unbound anaphora, in-cluding the notoriously difficult cases suchas quantificational subordination, cumula-tive and branching continuations, and don-key anaphora.1 IntroductionThe phenomenon of unbound anaphora refers toinstances where anaphoric pronouns occur outsidethe syntactic scopes (i.e.
the c-command domain)of their quantifier antecedents.
The main kinds ofunbound anaphora are regular anaphora to quan-tifiers, quantificational subordination, and donkeyanaphora, as exemplified by (1) to (3) respectively:(1) Most kids entered.
They looked happy.
(2) Every man loves a woman.
They kiss them.
(3) Every farmer who owns a donkey beats it.Unbound anaphoric pronouns have been dealtwith in two main semantic paradigms: dynamicsemantic theories (Groenendijk and Stokhof,1991); (Van den Berg, 1996); (Nouwen, 2003) andthe E-type/D-type tradition (Evans, 1977); (Heim,1990); (Elbourne, 2005).
In the dynamic seman-tic theories pronouns are taken to be (syntacticallyfree, but semantically bound) variables, and con-text serves as a medium supplying values for thevariables.
In the E-type/D-type tradition pronounsare treated as quantifiers.
Our system combinesaspects of both families of theories.
As in the E-type/D-type tradition we treat unbound anaphoricpronouns as quantifiers; as in the systems of dy-namic semantics context is used as a medium sup-plying (possibly dependent) types as their poten-tial quantificational domains.
Like Dekker?s Pred-icate Logic with Anaphora and more recent mul-tidimensional models (Dekker, 1994); (Dekker,2008), our system lends itself to the compositionaltreatment of unbound anaphora, while keeping aclassical, static notion of truth.
The main noveltyof our proposal consists in combining generalizedquantifiers (Mostowski, 1957); (Lindstr?om, 1966);(Barwise and Cooper, 1981) with dependent types(Martin-L?of, 1972); (Ranta, 1994).The paper is organized as follows.
In Section 2we introduce informally the main features of oursystem.
Section 3 sketches the process of English-to-formal language translation.
Finally, sections 4and 5 define the syntax and semantics of the sys-tem.2 Elements of system2.1 Context, types and dependent typesThe variables of our system are always typed.
Wewrite x : X to denote that the variable x is of typeX and refer to this as a type specification of thevariable x.
Types, in this paper, are interpreted assets.
We write the interpretation of the type X as?X?.Types can depend on variables of other types.Thus, if we already have a type specification x :X , then we can also have type Y (x) dependingon the variable x and we can declare a variable yof type Y by stating y : Y (x).
The fact that Ydepends on X is modeled as a projectionpi : ?Y ?
?
?X?.So that if the variable x of type X is interpreted asan element a ?
?X?, ?Y ?
(a) is interpreted as thefiber of pi over a (the preimage of {a} under pi)?Y ?
(a) = {b ?
?Y ?
: pi(b) = a}.10One standard natural language example of such adependence of types is that if m is a variable ofthe type of months M , there is a type D(m) ofthe days of the month m. Such type dependenciescan be nested, i.e., we can have a sequence of typespecifications of the (individual) variables:x : X, y : Y (x), z : Z(x, y).Context for us is a partially ordered sequence oftype specifications of the (individual) variablesand it is interpreted as a parameter set, i.e.
as aset of compatible n-tuples of the elements of thesets corresponding to the types involved (compat-ible wrt all projections).2.2 Quantifiers, chains of quantifiersOur system defines quantifiers and predicatespolymorphically.
A generalized quantifier Q isan association to every set Z a subset of thepower set of Z.
If we have a predicate P de-fined in a context ?, then for any interpreta-tion of the context ???
it is interpreted as asubset of its parameter set.
Quantifier phrases,e.g.
every man or some woman, are interpretedas follows: ?everym:man?
= {?man?}
and?somew:woman?
= {X ?
?woman?
: X 6= ?
}.The interpretation of quantifier phrases is fur-ther extended into the interpretation of chains ofquantifiers.
Consider an example in (2):(2) Every man loves a woman.
They kiss them.Multi-quantifier sentences such as the first sen-tence in (2) are known to be ambiguous withdifferent readings corresponding to how variousquantifiers are semantically related in the sen-tence.
To account for the readings available forsuch multi-quantifier sentences, we raise quanti-fier phrases to the front of a sentence to form(generalized) quantifier prefixes - chains of quan-tifiers.
Chains of quantifiers are built from quanti-fier phrases using three chain-constructors: pack-formation rule (?, .
.
.
, ?
), sequential composi-tion ?|?, and parallel composition??.
The se-mantical operations that correspond to the chain-constructors (known as cumulation, iteration andbranching) capture in a compositional manner cu-mulative, scope-dependent and branching read-ings, respectively.The idea of chain-constructors and the cor-responding semantical operations builds onMostowski?s notion of quantifier (Mostowski,1957) further generalized by Lindstr?om to aso-called polyadic quantifier (Lindstr?om, 1966),see (Bellert and Zawadowski, 1989).
To use afamiliar example, a multi-quantifier prefix like?m:M|?w:Wis thought of as a single two-placequantifier obtained by an operation on the twosingle quantifiers, and it has as denotation:??m:M|?w:W?
= {R ?
?M??
?W?
:{a ?
?M?
:{b ?
?W?
: ?a, b?
?
R} ?
??w:W?}
?
??m:M?
}.In this paper we generalize the three chain-constructors and the corresponding semantical op-erations to (pre-) chains defined on dependenttypes.2.3 Dynamic extensions of contextsIn our system language expressions are all definedin context.
Thus the first sentence in (2) (on themost natural interpretation where a woman de-pends on every man) translates (via the process de-scribed in Section 3) into a sentence with a chainof quantifiers in a context:?
` ?m:M|?w:WLove(m,w),and says that the set of pairs, a man and a womanhe loves, has the following property: the set ofthose men that love some woman each is the setof all men.
The way to understand the second sen-tence in (2) (i.e.
the anaphoric continuation) is thatevery man kisses the women he loves rather thanthose loved by someone else.
Thus the first sen-tence in (2) must deliver some internal relation be-tween the types corresponding to the two quanti-fier phrases.In our analysis, the first sentence in (2) extendsthe context ?
by adding new variable specifica-tions on newly formed types for every quantifierphrase in the chain Ch = ?m:M|?w:W- for thepurpose of the formation of such new types we in-troduce a new type constructor T. That is, the firstsentence in (2) (denoted as ?)
extends the contextby adding:t?,?m: T?,?m:M; t?,?w: T?,?w:W(t?,?m)The interpretations of types (that correspond toquantifier phrases in Ch) from the extended con-text ?
?are defined in a two-step procedure usingthe inductive clauses through which we define Chbut in the reverse direction.11Step 1.
We define fibers of new types by inverseinduction.Basic step.For the whole chain Ch = ?m:M|?w:Wwe put:?T?,?m:M|?w:W?
:= ?Love?.Inductive step.?T?,?m:M?
= {a ?
?M?
: {b ?
?W?
:?a, b?
?
?Love?}
?
??w:W?
}and for a ?
?M??T?,?w:W?
(a) = {b ?
?W?
: ?a, b?
?
?Love?
}Step 2.
We build dependent types from fibers.?T?,?w:W?
=?
{{a} ?
?T?,?w:W?
(a) :a ?
?T?,?m:M?
}Thus the first sentence in (2) extends the con-text ?
by adding the type T?,?m:M, interpretedas ?T?,?m:M?
(i.e.
the set of men who love somewomen), and the dependent type T?,?w:W(t?,?m),interpreted for a ?
?T?,?m:M?
as ?T?,?w:W?(a)(i.e.
the set of women loved by the man a).Unbound anaphoric pronouns are interpretedwith reference to the context created by the fore-going text: they are treated as universal quantifiersand newly formed (possibly dependent) types in-crementally added to the context serve as their po-tential quantificational domains.
That is, unboundanaphoric pronouns theymand themwin the sec-ond sentence of (2) have the ability to pick up andquantify universally over the respective interpreta-tions.
The anaphoric continuation in (2) translatesinto:?
?` ?t?,?m:T?,?m:M|?t?,?w:T?,?w:W(t?,?m)Kiss(t?,?m, t?,?w),where:??t?,?m:T?,?m:M|?t?,?w:T?,?w:W(t?,?m)?
={R ?
?T?,?w:W?
: {a ?
?T?,?m:M?
:{b ?
?T?,?w:W?
(a) : ?a, b?
?
R} ???t?,?w:T?,?w:W(t?,?m)?
(a)} ?
??t?,?m:T?,?m:M?
},yielding the correct truth conditions: Every mankisses every woman he loves.Our system also handles intra-sententialanaphora, as exemplified in (3):(3) Every farmer who owns a donkey beats it.To account for the dynamic contribution of modi-fied common nouns (in this case common nounsmodified by relative clauses) we include in oursystem ?-sentences (i.e.
sentences with dummyquantifier phrases).
The modified common noungets translated into a ?-sentence (with a dummy-quantifier phrase f : F ):?
` f : F |?d:DOwn(f, d)and we extend the context by dropping the speci-fications of variables: (f : F, d : D) and addingnew variable specifications on newly formed typesfor every (dummy-) quantifier phrase in the chainCh?
:t?,f: T?,f :F; t?,?d: T?,?d:D(t?,f),The interpretations of types (that correspond to thequantifier phrases in the Ch?)
from the extendedcontext ?
?are defined in our two-step procedure.Thus the ?-sentence in (3) extends the context byadding the type T?,f :Finterpreted as ?T?,f :F?(i.e.
the set of farmers who own some donkeys),and the dependent type T?,?d:D(t?,f), interpretedfor a ?
?T?,f :F?
as ?T?,?d:D?
(a) (i.e.
the set ofdonkeys owned by the farmer a).
The main clausetranslates into:?
?` ?t?,f:T?,f :F|?t?,?d:T?,?d:D(t?,f)Beat(t?,f, t?,?d),yielding the correct truth conditions Every farmerwho owns a donkey beats every donkey he owns.Importantly, since we quantify over fibers (and notover ?farmer, donkey?
pairs), our solution doesnot run into the so-called ?proportion problem?.Dynamic extensions of contexts and their in-terpretation are also defined for cumulative andbranching continuations.
Consider a cumulativeexample in (4):(4) Last year three scientists wrote (a total of) fivearticles (between them).
They presented themat major conferences.Interpreted cumulatively, the first sentence in (4)translates into a sentence:?
` (Threes:S, F ivea:A) Write(s, a).The anaphoric continuation in (4) can be inter-preted in what Krifka calls a ?correspondence?12fashion (Krifka, 1996).
For example, Dr. K wroteone article, co-authored two more with Dr. N, whoco-authored two more with Dr. S, and the scien-tists that cooperated in writing one or more articlesalso cooperated in presenting these (and no other)articles at major conferences.
In our system, thefirst sentence in (4) extends the context by addingthe type corresponding to (Threes:S, F ivea:A):t?,(Threes,F ivea): T?,(Threes:S; Fivea:A),interpreted as a set of tuples?T?,(Threes:S,F ivea:A)?
== {?c, d?
: c ?
?S?
& d ?
?A?
& c wrote d}The anaphoric continuation then quantifies univer-sally over this type (i.e.
a set of pairs), yielding thedesired truth-conditions The respective scientistscooperated in presenting at major conferences therespective articles that they cooperated in writing.3 English-to-formal language translationWe assume a two-step translation process.Representation.
The syntax of the representa-tion language - for the English fragment consid-ered in this paper - is as follows.S ?
Prdn(QP1, .
.
.
, QPn);MCN ?
Prdn(QP1, .
.
.
, CN , .
.
.
, QPn);MCN ?
CN ;QP ?
Det MCN ;Det?
every,most, three, .
.
.
;CN ?
man,woman, .
.
.;Prdn?
enter, love, .
.
.
;Common nouns (CNs) are interpreted as types,and common nouns modified by relative clauses(MCNs) - as ?-sentences determining some (pos-sibly dependent) types.Disambiguation.
Sentences of English, con-trary to sentences of our formal language, are of-ten ambiguous.
Hence one sentence representa-tion can be associated with more than one sentencein our formal language.
The next step thus in-volves disambiguation.
We take quantifier phrasesof a given representation, e.g.
:P (Q1X1, Q2X2, Q3X3)and organize them into all possible chains of quan-tifiers in suitable contexts with some restrictionsimposed on particular quantifiers concerning theplaces in prefixes at which they can occur (a de-tailed elaboration of the disambiguation process isleft for another place):Q1x1:X1|Q2x2:X2Q3x3:X3P (x1, x2, x3).4 System - syntax4.1 AlphabetThe alphabet consists of:type variables: X,Y, Z, .
.
.
;type constants: M,men,women, .
.
.
;type constructors:?,?,T;individual variables: x, y, z, .
.
.
;predicates: P, P?, P1, .
.
.
;quantifier symbols: ?, ?, five,Q1, Q2, .
.
.
;three chain constructors: ?|?,?
?, (?, .
.
.
, ?
).4.2 ContextA context is a list of type specifications of (indi-vidual) variables.
If we have a context?
= x1: X1, .
.
.
, xn: Xn(?xi?i?Jn)then the judgement` ?
: cxtexpresses this fact.
Having a context ?
as above,we can declare a type Xn+1in that context?
` Xn+1(?xi?i?Jn+1) : typewhere Jn+1?
{1, .
.
.
, n} such that if i ?
Jn+1,then Ji?
Jn+1, J1= ?.
The type Xn+1dependson variables ?xi?i?Jn+1.
Now, we can declare anew variable of the type Xn+1(?xi?i?Jn+1) in thecontext ??
` xn+1: Xn+1(?xi?i?Jn+1)and extend the context ?
by adding this variablespecification, i.e.
we have` ?, xn+1: Xn+1(?xi?i?Jn+1) : cxt?
?is a subcontext of ?
if ?
?is a context and a sub-list of ?.
Let ?
be a list of variable specificationsfrom a context ?, ?
?the least subcontext of ?
con-taining ?.
We say that ?
is convex iff ????
isagain a context.The variables the types depend on are alwaysexplicitly written down in specifications.
We canthink of a context as (a linearization of) a partiallyordered set of declarations such that the declara-tion of a variable x (of type X) precedes the dec-laration of the variable y (of type Y ) iff the type Ydepends on the variable x.The formation rules for both ?- and ?-types areas usual.134.3 LanguageQuantifier-free formulas.
Here, we need onlypredicates applied to variables.
So we write?
` P (x1, .
.
.
, xn) : qf-fto express that P is an n-ary predicate and thespecifications of the variables x1, .
.
.
, xnform asubcontext of ?.Quantifier phrases.
If we have a context ?, y :Y (~x),?
and quantifier symbol Q, then we canform a quantifier phrase Qy:Y (~x)in that context.We write?, y : Y (~x),?
` Qy:Y (~x): QPto express this fact.
In a quantifier prase Qy:Y (~x):the variable y is the binding variable and the vari-ables ~x are indexing variables.Packs of quantifiers.
Quantifiers phrases canbe grouped together to form a pack of quantifiers.The pack of quantifiers formation rule is as fol-lows.?
` Qi yi:Yi(~xi): QP i = 1, .
.
.
k?
` (Q1 y1:Y1(~x1), .
.
.
, Qk yk:Yk(~xk)) : packwhere, with ~y = y1, .
.
.
, ykand ~x =?ki=1~xi, wehave that yi6= yjfor i 6= j and ~y ?
~x = ?.
In soconstructed pack: the binding variables are ~y andthe indexing variables are ~x.
We can denote sucha pack Pc~y:~Y (~x)to indicate the variables involved.One-element pack will be denoted and treated asa quantifier phrase.
This is why we denote such apack as Qy:Y (~x)rather than (Qy:Y (~x)).Pre-chains and chains of quantifiers.
Chainsand pre-chains of quantifiers have binding vari-ables and indexing variables.
By Ch~y:~Y (~x)we de-note a pre-chain with binding variables ~y and in-dexing variables ~x so that the type of the variableyiis Yi(~xi) with?i~xi= ~x.
Chains of quantifiersare pre-chains in which all indexing variables arebound.
Pre-chains of quantifiers arrange quantifierphrases into N -free pre-orders, subject to somebinding conditions.
Mutually comparable QPs in apre-chain sit in one pack.
Thus the pre-chains arebuilt from packs via two chain-constructors of se-quential ?|?
and parallel composition??.
The chainformation rules are as follows.1.
Packs of quantifiers.
Packs of quantifiersare pre-chains of quantifiers with the same bind-ing variable and the same indexing variables, i.e.?
` Pc~y:~Y (~x): pack?
` Pc~y:~Y (~x): p-ch2.
Sequential composition of pre-chains?
` Ch1 ~y1:~Y1(~x1): p-ch,?
` Ch2 ~y2:~Y2(~x2): p-ch?
` Ch1 ~y1:~Y1(~x1)|Ch2 ~y2:~Y2(~x2): p-chprovided ~y2?
(~y1?
~x1) = ?
; the specifications ofthe variables (~x1?
~x2) ?
(~y1?
~y2) form a con-text, a subcontext of ?.
In so obtained pre-chain:the binding variables are ~y1?
~y2and the indexingvariables are ~x1?
~x2.3.
Parallel composition of pre-chains?
` Ch1 ~y1:~Y1(~x1): p-ch,?
` Ch2 ~y2:~Y2(~x2): p-ch?
`Ch1 ~y1:~Y1(~x1)Ch2 ~y2:~Y2(~x2): p-chprovided ~y2?
(~y1?
~x1) = ?
= ~y1?
(~y2?
~x2).As above, in so obtained pre-chain: the bindingvariables are ~y1?
~y2and the indexing variablesare ~x1?
~x2.A pre-chain of quantifiers Ch~y:~Y (~x)is a chainiff ~x ?
~y.
The following?
` Ch~y:~Y (~x): chainexpresses the fact thatCh~y:~Y (~x)is a chain of quan-tifiers in the context ?.Formulas, sentences and ?-sentences.
The for-mulas have binding variables, indexing variablesand argument variables.
We write ?~y:Y (~x)(~z) fora formula with binding variables ~y, indexing vari-ables ~x and argument variables ~z.
We have thefollowing formation rule for formulas?
` A(~z) : qf-f,?
` Ch~y:~Y (~x): p-ch?
` Ch~y:~Y (~x)A(~z) : formulaprovided ~y is final in ~z, i.e.
~y ?
~z and variablespecifications of ~z ?
~y form a subcontext of ?.
Inso constructed formula: the binding variables are~y, the indexing variables are ~x, and the argumentvariables are ~z.A formula ?~y:Y (~x)(~z) is a sentence iff ~z ?
~yand ~x ?
~y.
So a sentence is a formula without freevariables, neither individual nor indexing.
The fol-lowing?
` ?~y:Y (~x)(~z) : sentenceexpresses the fact that ?~y:Y (~x)(~z) is a sentenceformed in the context ?.We shall also consider some special formulasthat we call ?-sentences.
A formula ?~y:Y (~x)(~z) is a?-sentence if ~x ?
~y?~z but the set ~z?~y is possibly14not empty and moreover the type of each variablein ~z?~y is constant, i.e., it does not depend on vari-ables of other types.
In such case we consider the~z ?
~y as a set of biding variables of an additionalpack called a dummy pack that is placed in front ofthe whole chain Ch.
The chain ?extended?
by thisdummy pack will be denoted by Ch?.
Clearly, if~z ?
~y is empty there is no dummy pack and thechain Ch?is Ch, i.e.
sentences are ?-sentenceswithout dummy packs.
We write?
` ?~y:Y (~x)(~z) : ?-sentenceto express the fact that ?~y:Y (~x)(~z) is a ?-sentenceformed in the context ?.Having formed a ?-sentence ?
we can form anew context ?
?defined in the next section.Notation.
For semantics we need some notationfor the variables in the ?-sentence.
Suppose wehave a ?-sentence?
` Ch~y:Y (~x)P (~z) : ?-sentenceWe define: (i) The environment of pre-chain Ch:Env(Ch) = Env(Ch~y:~Y (~x)) - is the contextdefining variables ~x?~y; (ii) The binding variablesof pre-chain Ch: Bv(Ch) = Bv(Ch~y:~Y (~x)) - isthe convex set of declarations in ?
of the bindingvariables in ~y; (iii) env(Ch) = env(Ch~y:~Y (~x)) -the set of variables in the environment of Ch, i.e.~x ?
~y; (iv) bv(Ch) = bv(Ch~y:~Y (~x)) - the set ofbiding variables ~y; (v) The environment of a pre-chainCh?in a ?-sentence?
= Ch~y:Y (~x)P (~z), de-noted Env?(Ch?
), is the set of binding variablesin all the packs inCh?that are<?-smaller than allpacks in Ch?.
Note Env(Ch?)
?
Env?(Ch?).
IfCh?= Ch1|Ch2is a sub-pre-chain of the chainCh~y:Y (~x), then Env?
(Ch2) = Env?
(Ch1) ?Bv(Ch1) and Env?
(Ch1) = Env?(Ch?
).4.4 Dynamic extensionsSuppose we have constructed a ?-sentence in acontext?
` Ch~y:~Y (~x)A(~z) : ?-sentenceWe write ?
for Ch~y:~Y (~x)A(~z).We form a context ?
?dropping the specifica-tions of variables ~z and adding one type and onevariable specification for each pack in PacksCh?.Let??
denote the context ?
with the specifica-tions of the variables ~z deleted.
Suppose ?
?PacksCh?and ?
?is an extension of the context??
such that one variable specification t??,?
: T?
?,?was already added for each pack ???
PacksCh?such that ??<Ch??
but not for ?
yet.
Then wedeclare a type?
?` T?,?(?t??,?????PacksCh?
,??<Ch??)
: typeand we extend the context ?
?by a specification ofa variable t?,?of that type?
?, t?,?
: T?,?(?t??,?????PacksCh?
,??<Ch??)
: cxtThe context obtained from??
by adding the newvariables corresponding to all the packs PacksCh?as above will be denoted by??=??
?T(Ch~y:~Y (~x)A(~z)).At the end we add another context formationrule?
` Ch~y:~Y (~x)A(~z) : ?-sentence,??
: cxtThen we can build another formula starting in thecontext ??.
This process can be iterated.
Thusin this system sentence ?
in a context ?
is con-structed via specifying sequence of formulas, withthe last formula being the sentence ?.
However,for the lack of space we are going to describe hereonly one step of this process.
That is, sentence ?in a context ?
can be constructed via specifying?-sentence ?
extending the context as follows?
` ?
: ?-sentence?
?` ?
: sentenceFor short, we can write?
` ?
?` ?
: sentence5 System - semantics5.1 Interpretation of dependent typesThe context ?` x : X(.
.
.
), .
.
.
, z : Z(.
.
.
, x, y, .
.
.)
: cxtgives rise to a dependence graph.
A dependencegraph DG?= (T?, E?)
for the context ?
hastypes of ?
as vertices and an edge piY,x: Y ?
Xfor every variable specification x : X(.
.
.)
in ?and every type Y (.
.
.
, x, .
.
.)
occurring in ?
thatdepends on x.15The dependence diagram for the context ?
is anassociation ?
?
?
: DG??
Set to every type Xin T?a set ?X?
and every edge piY,x: Y ?
Xin E?a function ?piY,x?
: ?Y ?
?
?X?, so thatwhenever we have a triangle of edges in E?, piY,xas before piZ,y: Z ?
Y , piZ,x: Z ?
X we have?piZ,x?
= ?piY,x?
?
?piZ,y?.The interpretation of the context ?, the param-eter space ??
?, is the limit of the dependence dia-gram ?
?
?
: DG??
Set.
More specifically,???
= ?x : X(.
.
.
), .
.
.
, z : Z(.
.
.
, x, y, .
.
.)?
={~a : dom(~a) = var(?
), ~a(z) ?
?Z?(~adenv(Z)),?piZ,x?
(~a(z)) = ~a(x), for z : Z in ?, x ?
envZ}where var(?)
denotes variables specified in ?
andenv(Z) denotes indexing variables of the type Z.The interpretation of the ?- and ?-types are asusual.5.2 Interpretation of languageInterpretation of predicates and quantifier sym-bols.
Both predicates and quantifiers are inter-preted polymorphically.If we have a predicate P defined in a context ?
:x1: X1, .
.
.
, xn: Xn(?xi?i?Jn]) ` P (~x) : qf-fthen, for any interpretation of the context ??
?, itis interpreted as a subset of its parameter set, i.e.?P?
?
??
?.Quantifier symbol Q is interpreted as quantifier?Q?
i.e.
an association to every1set Z a subset?Q?
(Z) ?
P(Z).Interpretation of pre-chains and chains of quan-tifiers.
We interpret QP?s, packs, pre-chains, andchains in the environment of a sentence Env?.This is the only case that is needed.
We couldinterpret the aforementioned syntactic objects intheir natural environment Env (i.e.
independentlyof any given sentence) but it would unnecessarilycomplicate some definitions.
Thus having a (?-)sentence ?
= Ch~y:Y (~x)P (~z) (defined in a con-text ?)
and a sub-pre-chain (QP, pack) Ch?, for~a ?
?Env?(Ch?)?
we define the meaning of?Ch??(~a)Notation.
Let ?
= Ch~y:~YP (~y) be a ?-sentence built in a context ?, Ch?a pre-chain usedin the construction of the (?
)-chain Ch.
Then1This association can be partial.Env?(Ch?)
is a sub-context of ?
disjoint from theconvex set Bv(Ch?)
and Env?(Ch?
), Bv(Ch?)
isa sub-context of ?.
For ~a ?
?Env?(Ch?)?
we de-fine ?Bv(Ch?)?
(~a) to be the largest set such that{~a}??Bv(Ch?)?
(~a) ?
?Env?(Ch?
), Bv(Ch?
)?Interpretation of quantifier phrases.
If we havea quantifier phrase?
` Qy:Y (~x): QPand ~a ?
?Env?
(Qy:Y (~x))?, then it is interpretedas ?Q?
(?Y ?
(~a)) ?
P(?Y ?
(~ad~x)).Interpretation of packs.
If we have a pack ofquantifiers in the sentence ?Pc = (Q1y1:Y1(~x1), .
.
.
Qnyn:Yn(~xn))and ~a ?
?Env?
(Pc)?, then its interpretation withthe parameter ~a is?Pc?
(~a) = ?
(Q1y1:Y1(~x1), .
.
.
, Qnyn:Yn(~xn))?
(~a) ={A ?n?i=1?Yi?
(~ad~xi) : pii(A) ?
?Qi?(?Yi?
(~ad~xi),for i = 1, .
.
.
, n}where piiis the i-th projection from the product.Interpretation of chain constructors.1.
Parallel composition.
For a pre-chain ofquantifiers in the sentence ?Ch?=Ch1~y1:~Y1(~x1)Ch2~y2:~Y2(~x2)and ~a ?
?Env?(Ch?)?
we define?Ch1~y1:~Y1(~x1)Ch2~y2:~Y2(~x2)?
(~a) = {A?B :A ?
?Ch1~y1:~Y1(~x1)?
(~ad~x1) andB ?
?Ch2~y2:~Y2(~x2)?(~ad~x2)}2.
Sequential composition.
For a pre-chain ofquantifiers in the sentence ?Ch?= Ch1~y1:~Y1(~x1)|Ch2~y2:~Y2(~x2)and ~a ?
?Env?(Ch?)?
we define?Ch1~y1:~Y1(~x1)|Ch2~y2:~Y2(~x2)?
(~a) ={R ?
?Bv(Ch?)?
(~a) : {~b ?
?Bv(Ch1)?
(~a) :16{~c ?
?Bv(Ch2)?
(~a,~b) : ?~b,~c?
?
R} ??Ch2~y2:~Y2(~x2)?
(~a,~b)} ?
?Ch1~y1:~Y1(~x1)?(~a)}Validity.
A sentence~x :~X ` Ch~y:~YP (~y)is true under the above interpretation iff?P?
(?~Y ?)
?
?Ch~y:~Y?5.3 Interpretation of dynamic extensionsSuppose we obtain a context ?
?from ?
by the fol-lowing rule?
` Ch~y:~Y (~x)A(~z) : ?-sentence,??
: cxtwhere ?
is Ch~y:~Y (~x)A(~z).
Then??=??
?T(Ch~y:~Y (~x)A(~z)).From dependence diagram ?
?
??
: DG??
Setwe shall define another dependence diagram?
?
?
= ?
?
???
: DG???
SetThus, for ?
?
PackCh?we need to define?T?,???
?and for ??<Ch??
we need to define?piT?,?,t???
: ?T?,??
??
?T??,?
?This will be done in two steps:Step 1.
(Fibers of new types defined by inverseinduction.
)We shall define for the sub-prechains Ch?ofCh?and ~a ?
?Env?(Ch?)?
a set?T?,Ch??
(~a) ?
?Bv(Ch?)?
(~a)This is done using the inductive clauses throughwhich we have defined Ch?but in the reverse di-rection.The basic case is when Ch?= Ch?.
We put?T?,Ch?(?)
= ?P?The inductive step.
Now assume that the set?T?,Ch??
(~a) is defined for ~a ?
?Env?(Ch?
)?.Parallel decomposition.
If we haveCh?=Ch1~y1:~Y1(~x1)Ch2~y2:~Y2(~x2)then we define sets?T?,Chi?
(~a) ?
?Chi?
(~a)for i = 1, 2 so that?T?,Ch??
(~a) = ?T?,Ch1?(~a)?
?T?,Ch2?
(~a)if such sets exist, and these sets (?T?,Chi?
(~a)) areundefined otherwise.Sequential decomposition.
If we haveCh?= Ch1~y1:~Y1(~x1)|Ch2~y2:~Y2(~x2)then we put?T?,Ch1?
(~a) = {~b ?
?Bv(Ch1)?
(~a) :{~c ?
?Bv(Ch2)?
(~a,~b) : ?~b,~c?
?
?T?,Ch??(~a)}?
?Ch2?
(~a,~b)}For~b ?
?Bv(Ch1)?
we put?T?,Ch2?
(~a,~b) = {~c ?
?Bv(Ch2)?
(~a,~b) :?~b,~c?
?
?T?,Ch??
(~a)}Step 2.
(Building dependent types from fibers.
)If ?
is a pack in Ch?, ~a ?
?Env?(?)?
then weput?T?,??
=?{{~a}??T?,??
(~a) : ~a ?
?Env?(?)?,???<Ch?
?, (~adenv?(??))
?
?T?,???
}It remains to define the projections between de-pendent types.
If ??<??
we definepiT?,?,t?,??
: ?T?,??
??
?T?,??
?so that ~a 7?
~ad(env?(??)
?
bv??
).6 ConclusionIt was our intention in this paper to show thatadopting a typed approach to generalized quan-tification allows a uniform treatment of a wide ar-ray of anaphoric data involving natural languagequantification.AcknowledgmentsThe work of Justyna Grudzi?nska was funded bythe National Science Center on the basis of de-cision DEC-2012/07/B/HS1/00301.
The authorswould like to thank the anonymous reviewers forvaluable comments on an earlier version of this pa-per.17ReferencesBarwise, Jon and Robin Cooper.
1981.
GeneralizedQuantifiers and Natural Language.
Linguistics andPhilosophy 4: 159-219.Bellert, Irena and Marek Zawadowski.
1989.
Formal-ization of the feature system in terms of pre-orders.In Irena Bellert Feature System for QuantificationStructures in Natural Language.
Foris Dordrecht.155-172.Dekker, Paul.
1994.
Predicate logic with anaphora.In Lynn Santelmann and Mandy Harvey (eds.
), Pro-ceedings SALT IX.
Ithaca, NY: DMLL Publications,Cornell University.
79-95.Dekker, Paul.
2008.
A multi-dimensional treatment ofquantification in extraordinary English.
Linguisticsand Philosophy 31: 101-127.Elworthy, David A. H. 1995.
A theory of anaphoricinformation.
Linguistics and Philosophy 18: 297-332.Elbourne, Paul D. 2005.
Situations and Individuals.Cambridge, MA: MIT Press.Evans, Gareth 1977.
Pronouns, Quantifiers, and Rela-tive Clauses (I).
Canadian Journal of Philosophy 7:467-536.Heim, Irene.
1990.
E-type pronouns and donkeyanaphora.
Linguistics and Philosophy 13: 137-78.Groenendijk, Jeroen and Martin Stokhof.
1991.
Dy-namic Predicate Logic.
Linguistics and Philosophy14: 39-100.Kamp, Hans and Uwe Reyle.
1993.
From Discourse toLogic.
Kluwer Academic Publishers, Dordrecht.Krifka, Manfred.
1996.
Parametrized sum individu-als for plural reference and partitive quantification.Linguistics and Philosophy 19: 555-598.Lindstr?om, Per.
1966.
First-order predicate logic withgeneralized quantifiers.
Theoria 32: 186-95.Martin-L?of, Per.
1972.
An intuitionstic theory oftypes.
Technical Report, University of Stockholm.Mostowski, Andrzej.
1957.
On a generalization ofquantifiers.
Fundamenta Mathematicae 44: 12-36.Nouwen, Rick.
2003.
Plural pronominal anaphora incontext: dynamic aspects of quantification.
Ph.D.thesis, UiL-OTS, Utrecht, LOT dissertation series,No.
84.Ranta, Aarne.
1994.
Type-Theoretical Grammar.
Ox-ford University Press, Oxford.Van den Berg, Martin H. 1996.
The Internal Structureof Discourse.
Ph.D. thesis, Universiteit van Amster-dam, Amsterdam.18
