Proceedings of the EACL 2014 Workshop on Type Theory and Natural Language Semantics (TTNLS), pages 63?71,Gothenburg, Sweden, April 26-30 2014.c?2014 Association for Computational LinguisticsIncremental semantic scales by stringsTim FernandoComputer Science DepartmentTrinity College DublinDublin, IrelandTim.Fernando@tcd.ieAbstractScales for natural language semantics areanalyzed as moving targets, perpetuallyunder construction and subject to ad-justment.
Projections, factorizations andconstraints are described on strings ofbounded but refinable granularities, shap-ing types by the processes that put seman-tics in flux.1 IntroductionAn important impetus for recent investigationsinto type theory for natural language semantics isthe view of ?semantics in flux,?
correcting ?the im-pression?
from, for example, Montague 1973 ?ofnatural languages as being regimented with mean-ings determined once and for all?
(Cooper 2012,page 271).
The present work concerns scalesfor temporal expressions and gradable predicates.Two questions that loom large from the perspec-tive of semantics in flux are: how to constructscales and align them against one another (e.g.Klein and Rovatsos 2011).
The formal study car-ried out below keeps scales as simple as possi-ble, whilst allowing for necessary refinements andadjustments.
The basic picture is that a scale isa moving target finitely approximable as a stringover an alphabet which we can expand to refinegranularity.
Reducing a scale to a string comes,however, at a price; indivisible points must giveway to refinable intervals (embodying underspec-ification).Arguments for a semantic reorientation aroundintervals (away from points) are hardly new.
Bestknown within linguistic semantics perhaps arethose in tense and aspect from Bennett and Partee1972, which seem to have met less resistance thanarguments in the degree literature from Kennedy2001 and Schwarzschild and Wilkinson 2002 (seeSolt 2013).
At the center of the present argumentfor intervals is a notion of finite approximabil-ity, plausibly related to cognition.
What objectionmight there be to it?
The fact that no finite lin-ear order is dense raises the issue of compatibilitybetween finite approximability and density ?
nosmall worry, given the popularity of dense linearorders for time (e.g.
Kamp and Reyle 1993, Pratt-Hartmann 2005, Klein 2009) as well as measure-ment (e.g.
Fox and Hackl 2006).Fortunately, finite linear orders can be orga-nized into a system of approximations convergingat the limit to a dense linear order.
The presentwork details ways to form such systems and lim-its, with density reanalyzed as refinability of ar-bitrary finite approximations.
A familiar exampleprovides some orientation.Example A (calendar) We can represent a cal-endar year as the stringsmo:= Jan Feb Mar ?
?
?
Decof length 12, or, were we interested also in daysd1,d2.
.
.,d31, the stringsmo,dy:= Jan,d1 Jan,d2 ?
?
?
Jan,d31Feb,d1 ?
?
?
Dec,d31of length 365 for a non-leap year (Fernando2011).1In contrast to the points in the real lineR, a box can split, as Jan in smodoes (30 times)toJan,d1 Jan,d2 ?
?
?
Jan,d31in smo,dy, on introducing days d1, d2,.
.
., d31into the picture.
Reversing direction and gener-alizing frommo := {Jan,Feb,.
.
.Dec}1We draw boxes (instead of the usual curly braces { and })around sets-as-symbols, stringing together ?snapshots?
muchlike a cartoon/film strip.63to any set A, we define the function ?Aon strings(of sets) to componentwise intersect with A?A(?1?
?
?
?n) := (?1?A) ?
?
?
(?n?A)(throwing out non-A?s from each box) so that?mo(smo,dy) = Jan31Feb28?
?
?
Dec31.Next, the block compression bc(s) of a string scompresses all repeating blocks ?n(for n ?
1)of a box ?
in a string s to ?
forbc(s) :=???????bc(?s?)
if s = ??s??
bc(?s?)
if s = ??s?with?
6= ?s otherwiseso that if bc(s) = ?1?
?
?
?nthen ?i6= ?i+1for ifrom 1 to n?
1.
In particular,bc( Jan31Feb28?
?
?
Dec31) = smo.Writing bcAfor the function mapping s tobc(?A(s)), we havebcmo(smo,dy) = smo.In general, we can refine a string sAof granu-larity A to one sA?of granularity A??
A withbcA(sA?)
= sA.
Iterating over a chainA ?
A??
A???
?
?
?
,we can glue together strings sA, sA?, sA?
?, .
.
.
suchthatbcX(sX?)
= sXfor X ?
{A,A?, A?
?, .
.
.
}.Details in section 2.We shall refer to the expressions we can put ina box as fluents (short for temporal propositions),and assume they are the elements of a set ?.
Whilethe set ?
of fluents might be infinite, we restrict theboxes that we string together to finite sets of flu-ents.
Writing Fin(?)
for the set of finite subsetsof ?
and 2Xfor the powerset of X (i.e.
the setof X?s subsets), we will organize the strings overthe infinite alphabet Fin(?)
around finite alpha-bets 2A, for A ?
Fin(?)Fin(?)?=?A?Fin(?
)(2A)?.In addition to projecting Fin(?)
down to 2Aforsome A ?
Fin(?
), we can build up, formingthe componentwise unions of strings ?1?
?
??nand?1?
?
?
?nof the same number n of sets for their su-perposition?1?
?
?
?n& ?1?
?
?
?n:= (?1?
?1) ?
?
?
(?n?
?n)and superposing languages L and L?over Fin(?
)by superposing strings in L and L?of the samelengthL & L?
:= {s&s?| s ?
L, s??
L?andlength(s) = length(s?
)}(Fernando 2004).
For example,smo,dy= ?mo(smo,dy) & ?dy(smo,dy)where dy := {d1, d2 .
.
.
, d31}.
More generally,writing LAfor the image of L under ?ALA:= {?A(s) | s ?
L},observe that for L ?
(2B)?and A ?
B, L isincluded in the superposition of LAand LB?AL ?
LA& LB?A.The next step is to identify a language L?such thatL = (LA& LB?A) ?
L?
(1)other than L?= L. For a decomposition (1) ofL into (generic) contextual constraints L?separatefrom the (specific) components LAand LB?A,it will be useful to sharpen LA, LB?Aand &,factoring in bc and variants of bc (not to mention?).
Measurements ranging from crude compar-isons (of order) to quantitative judgments (mul-tiplying unit magnitudes with real numbers) canbe expressed through fluents in ?.
We interpretthe fluents relative to suitable strings in Fin(?
)?,presented below in category-theoretic terms con-nected to type theory (e.g.
Mac Lane and Moerdijk1992).
Central to this presentation is the notion ofa presheaf on Fin(?)
?
a functor from the op-posite category Fin(?
)op(a morphism in whichis a pair (B,A) of finite subsets of ?
such thatA ?
B) to the category Set of sets and functions.The Fin(?
)-indexed family of functions bcA(forA ?
Fin(?))
provides an important example thatwe generalize in section 2.An example of linguistic semantic interest towhich block compression bc applies is64Example B (continuous change) The pair (a),(b) below superposes two events, soup cooling andan hour passing, in different ways (Dowty 1979).
(a) The soup cooled in an hour.
(b) The soup cooled for an hour.A common intuition is that in an hour requiresan event that culminates, while for an hour re-quires a homogeneous event.
In the case of (a),the culmination may be that some threshold tem-perature (supplied by context) was reached, whilein (b), the homogeneity may be the steady dropin temperature over that hour.
We might tracksoup cooling by a descending sequence of degrees,d1> d2> ?
?
?
> dn, with d1at the beginningof the hour, and dnat the end.
But no sample offinite size n can be complete.
To overcome thislimitation, it is helpful to construe the ith box ina string as a description of an interval Iiover thereal line R. We call a sequence I1?
?
?
Inof inter-vals a segmentation if?ni=1Iiis an interval and for1 ?
i < n, Ii< Ii+1, where < is full precedenceI < I?iff (?r ?
I)(?r??
I?)
r < r?.Now, assuming an assignment of degrees sDg(r)to real numbers r representing temporal instants,the idea is to define satisfaction |= between inter-vals I and fluents sDg < d according toI |= sDg < d iff (?r ?
I) sDg(r) < dand similarly for d ?
sDg.
We then lift |= tosegmentations I1?
?
?
Inand strings ?1?
?
??n?Fin(?
)nof the same length n such thatI1?
?
?
In|= ?1?
?
?
?niff whenever 1 ?
i ?
nand ?
?
Ii, Ii|= ?iand analyze (a) above as (c) below, where d isthe contextually given threshold required by in anhour, and x is the start of that hour, the end ofwhich is marked by hour(x).
(c) x, d ?
sDg d ?
sDg hour(x), sDg < dAll fluents ?
in (c) have the stative property(?)
for all intervals I and I?whose union I ?
I?is an interval,I ?
I?|= ?
iff I |= ?
and I?|= ?
(Dowty 1979).
(?)
holds also for the fluents inthe string (d) below for (b), where the subintervalrelation v is inclusion restricted to intervals,I |= [w]?
iff (?I?v I) I?|= ?and sDg?is the fluent?x (sDg < x ?
Prev(x ?
sDg))saying the degree drops (with I |= Prev(?)
iffI?I |= ?
for some I?< I such that I ?
I?isan interval).
(d) x [w]sDg?hour(x), [w]sDg?(?)
is intimately related to block compression bc(Fernando 2013b), supporting derivations of (c)and (d) by a modification &bcof & defined in ?2.3below.Our third example directly concerns computa-tional processes, which we take up in section 3.Example C (finite automata) Given a finite al-phabet A, a (non-deterministic) finite automatonA over A is a quadruple (Q, ?, F, q0) consistingof a finite set Q of states, a transition relation?
?
Q ?
A ?
Q, a subset F of Q consisting offinal (accepting) states, and an initial state q0?
Q.A accepts a string a1?
?
?
an?
A?precisely if thereis a string q1?
?
?
qn?
Qnsuch thatqn?
F and ?
(qi?1, ai, qi) for 1 ?
i ?
n (2)(where q0is A?s designated initial state).
The ac-cepting runs of A are strings of the forma1, q1?
?
?
an, qn?
(2A?Q)?satisfying (2).
While we can formulate such runsas strings over the alphabet A?Q, we opt for thealphabet 2A?Q(formed from A ?
Q ?
Fin(?
))to link up smoothly with examples where morethan one automata may be running, not all neces-sarily known nor in perfect harmony with others.Such examples are arguably of linguistic interest,the so-called Imperfective Paradox (Dowty 1979)being a case in point (Fernando 2008).
That said,the attention below is largely on certain category-theoretic preliminaries for type theory.2We adopt the following notational conventions.Given a function f and a set X , we write2Only the most rudimentary category-theoretic notionsare employed; explanations can be found in any number of in-troductions to category theory available online (and in print).65- f  X for f restricted to X ?
domain(f)- image(f) for {f(x) | x ?
domain(f)}- fX for image(f  X)- f?1X for {x ?
domain(f) | f(x) ?
X}and if g is a function for which image(f) ?domain(g),- f ; g for f composed (left to right) with g(f ; g)(x) := g(f(x))for all x ?
domain(f).We say f is a function on X ifdomain(f) = X ?
image(f)?
i.e., f : X ?
X .
The kernel of f , ker(f), isthe equivalence relation on domain(f) that holdsbetween s, s?such that f(s) = f(s?).
Clearly,ker(f) ?
ker(f ; g)when f ; g is defined.2 Some presheaves on Fin(?
)Given a function f on Fin(?
)?and A ?
Fin(?
),let us write fAfor the function ?A; f on Fin(?
)?fA(s) := f(?A(s))(recalling ?A(?1?
?
?
?n) := (?1?A) ?
?
?
(?n?A)and generalizing bcAfrom Example A).
To extracta presheaf on Fin(?)
from the Fin(?
)-indexedfamily of functions fA, certain requirements on fare helpful.
Toward that end, let us agree that- f preserves a function g with domainFin(?
)?if g = f ; g- f is idempotent if f preserves itself (i.e., f =f ; f )- the vocabulary voc(s) of s ?
Fin(?
)?is theset of fluents that occur in svoc(?1?
?
?
?n) :=n?i=1?iwhence s ?
voc(s)?.Note that for idempotent f , image(f) consists ofcanonical representatives f(s) of ker(f)?s equiva-lence classes {s??
Fin(?
)?| f(s?)
= f(s)}.2.1 ?-preserving functionsA function f on Fin(?
)?is ?-preserving if f pre-serves voc and fA, for all A ?
Fin(?).
Note thatbc is ?-preserving, as is the identity function id onFin(?
)?.Proposition 1.
If f is ?-preserving then f isidempotent andfB; fA= fA?Bfor all A,B ?
Fin(?
).Let Pfbe the function with domainFin(?)
?
{(B,A) ?
Fin(?)?Fin(?)
|A ?
B}mapping A ?
Fin(?)
to f(2A)?Pf(A) := {f(s) | s ?
(2A)?
}and a Fin(?
)op-morphism (B,A) to the restric-tion of fAto Pf(B)Pf(B,A) := fA Pf(B).Corollary 2.
If f is ?-preserving then Pfis apresheaf on Fin(?
).Apart from bc, we get a ?-preserving functionby stripping off any initial or final empty boxesunpad(s) :=???unpad(s?)
if s = s?orelse s = s?s otherwiseso that unpad(s) neither begins nor ends with .Notice that bc; unpad = unpad; bc.Proposition 3.
If f and g are ?-preserving andf ; g = g; f , then f ; g is ?-preserving.2.2 The Grothendieck constructionGiven a presheaf F on Fin(?
), the category?Fof elements of F (also known as the Grothendieckconstruction for F ) has- objects (A, s) ?
Fin(?)
?
F (A) (making?X?Fin(?
)F (X) the set of objects in?F )- morphisms (B, s?, A, s) from objects (B, s?
)to (A, s) when A ?
B and F (B,A)(s?)
= s(e.g.
Mac Lane and Moerdijk 1992).
Let pifbe theleft projectionpif(A, s) = A66from?Pfback to Fin(?).
The inverse limit ofPf, lim?
?Pf, is the set of (?Pf)-valued presheavesp on Fin(?)
(i.e.
functors p : Fin(?)op?
?Pf)that are inverted by pifpif(p(A)) = A for all A ?
Fin(?
).That is, p(A) = (A, sA) for some sA?
f(2A)?such that(?)
sA= fA(sB) whenever A ?
B ?
Fin(?).(?)
is the essential restriction that lim?
?Pfaddsto objects {sX}X?Fin(?
)of the dependent type?X?Fin(?
)Pf(X).2.3 Superposition and non-determinismTaking the presheaf Pidinduced by the identityfunction id on Fin(?
)?, observe that in?Pid,there is a product of(?, ) and ({?
}, ?
)but not of({?
}, ) and ({?
}, ?
).The tag A in (A, s) differentiating (?, ) from({?
}, ) cannot be ignored when forming prod-ucts in?Pid.
A necessary and sufficient conditionfor (A, s) and (B, s?)
to have a product is?B(s) = ?A(s?
)presupposed by the pullback of(A, s) ?
(A ?B, ?B(s)) ?
(B, s?
).By comparison, the superposition s&s?exists (asa string) if and only if??
(s) = ??(s?
)for(voc(s), s) ?
(?, ??
(s)) ?
(voc(s?
), s?
)(or length(s) = length(s?)
as ??
(s) =length(s)).Products in?Pidare superpositions, but superpo-sitions need not be products.Next, we step from id to other ?-preservingfunctions f such as bc and bc; unpad.
A pair(A, s) and (B, s?)
of?Pf-objects may fail tohave a product not because there is no?Pf-object(A ?B, s??)
such that(A, s) ?
(A ?B, s??)
?
(B, s?
)but too many non-isomorphic choices for such s?
?.Consider the case of bc; unpad, with (?, ) terminalin?Pbc;unpad(where  is the null string of length0).
For distinct fluents a and b ?
?, there are 13strings s ?
Pbc;unpad({a, b}) such that({a}, a )?
({a, b}, s)?
({b}, b ))corresponding to the 13 interval relations in Allen1983 (Fernando 2007).The explosion of solutions s???
Pf(A ?
B) tothe equationsfA(s??)
= s and fB(s??)
= s?given(A, s) ?
(A ?B, fB(s)) ?
(B, s?
)(i.e., fB(s) = fA(s?))
is paralleled by the trans-formation, under f , of a language L toLf:= f?1fLused to turn the superposition L&L?of languagesL and L?intoL &fL?
:= f(Lf& L?f).For f := bc; unpad, the set a &fb consists ofthe 13 strings mentioned above.
(We follow theusual practice of conflating a string s with the sin-gleton language {s} whenever convenient.
)Stepping from strings to languages, we lift thepresheaf Pfto the presheaf Qfmapping A ?Fin(?)
toQf(A) := {fL | L ?
(2A)?
}and a Fin(?
)op-morphism (B,A) to the functionQf(B,A) := (?L ?
Qf(B)) fALsending L ?
Qf(B) to fAL ?
Qf(A).
Then,for non-identity morphisms between?Qf-objects(A,L) and (A,L?)
where L ?
L?, we add in-clusions from (A,L) to (A,L?)
to the?Qf-morphisms for the category C(?, f) with- objects the same as those in?Qf, and- morphisms (B,L?, A, L) from objects(B,L?)
to (A,L) whenever A ?
B andfAL??
L.67As is the case with?Qf-morphisms, the sources(domains) of C(?, f)-morphisms entail their tar-gets (codomains).
To make these entailments pre-cise, we can identify the space of possible worldswith the inverse limit of Pf, and reduce (A,L) to[[A,L]]f:= {p ?
lim?
?Pf|(?s ?
L) p(A) = (A, s)}.The inclusion[[B,L?]]f?
[[A,L]]fcan then be pronounced: (B,L?)
f -entails (A,L).Proposition 4.
Let f be a ?-preserving functionand (A,L) and (B,L?)
be?Qf-objects such thatA ?
B.
(B,L?)
f -entails (A,L) iff there is aC(?, f)-morphism from (B,L?)
to (A,L).Relaxing the assumption A ?
B, one can alsocheck that for f ?
{bc, unpad, (bc; unpad)}, pull-backs of(A,L)?
(A ?B, (f?L) ?
f?L?)?
(B,L?
)in C(?, f) are given by(A,L)?
(A ?B,L&fL?)?
(B,L?)
(3)although (3) need not hold for L&fL?to be well-defined.3 Constraints and finite automataWe now bring finite automata into the picture, re-calling from section 1 Example C?s superpositionsa1?
?
?
an& q1?
?
?
qn(4)where a1?
?
?
anis accepted by a finite automatonA going through the sequence q1?
?
?
qnof (inter-nal) states.
We can assume the tape alphabet A ?
{a1, .
.
.
, an} and the state set Q ?
{q1, .
.
.
, qn}are two disjoint subsets of the set ?
of fluents; flu-ents in A are ?observable?
(on a tape), while flu-ents in Q are ?hidden?
(inside a black box).
Dis-joint though they may be,A andQ are tightly cou-pled byA?s transition table ?
?
Q?A?Q (not tomention the other components of A, its initial andfinal states).
That coupling can hardly be recreatedby superposition & (or some simple modification&f) without the help of some machinery encoding?.
But first, there is the small matter of formulat-ing the map a1?
?
?
an7?
a1?
?
?
animplicit in(4) above as a natural transformation.3.1 Bottom ?
naturallyIf the function ?Asuch that for a1?
?
?
an?
A?,?A(a1?
?
?
an) = a1?
?
?
anis to be the A-th component of a natural trans-formation ?
: S ?
Pid, we need to specifythe presheaf S on Fin(?).
To form a functionS(B,A) : S(B) ?
S(A) for A ?
B ?
Fin(?
)with B??
S(B) and A??
S(A), it is handy tointroduce a bottom ?
for B ?A, adjoining ?
to afinite subset X of ?
for X?
:= X + {?}
beforeforming the strings in S(X) := X??.
We then setS(B,A) : B???
A?
?S(B,A)() := S(B,A)(?s) :={?
S(B,A)(s) if ?
?
A??
S(B,A)(s) otherwise(e.g.
S({a, b}, {a})(ba?)
= ?a?)
and let ?A:A???
(2A)?map  to itself, and?A(?s) :={?A(s) if ?
= ??
?A(s) otherwise(e.g.
?{a}(?a?)
= a ).Proposition 5. ?
is a natural transformationfrom S to Pid.3.2 Another presheaf and categoryTurning now to finite automata, we recall a funda-mental result about languages that are regular (i.e.,accepted by finite automata),3the B?uchi-Elgot-Trakhtenbrot theorem (e.g.
Thomas 1997)for every finite alphabet A 6= ?, a languageL ?
A+is regular iff there is a sentence ?
ofMSOAsuch thatL = {s ?
A+| s |=A?}
.MSOAis Monadic Second Order logic with aunary relation symbol Uafor each a ?
A, plus abinary relation symbol S for successors.
The pred-icate |=Atreats a string a1a2?
?
?
anover A as anMSOA-model with universe {1, 2, .
.
.
, n}, Uaasits subset {i | ai= a}, and S as{(1, 2), (2, 3), .
.
.
, (n?
1, n)}3Whether or not this sense of regular has an interestingconnection with regular categories (which are, among otherthings, finitely complete), I do not know.68so that, for instance,a1?
?
?
an|=A?x?y S(x, y) iff n ?
2 (5)for all finite A 6= ?.
Notice that no a ?
A isrequired to interpret ?x?y S(x, y), which after allis an MSO?-sentence suited to strings ?n?
S(?
).Furthermore, for a 6= b and {a, b} ?
A,no string in A+satisfies ?x Ua(x) ?
Ub(x) (6)which makes it awkward to extend |=Ato formulaswith free variables (requiring variable assignmentson top of strings in A+).A simple way to accommodate variables is toinclude them in A and interpret MSOA-formulasnot over A+but over (2A)+, lifting |=Afromstrings s over A to a predicate |=Aon strings over2Asuch thats |=A?
iff ?A(s) |=A?
(7)for every MSOA-sentence ?
(Fernando 2013a).For all s ?
(2A)+, we sets |=AS(x, y) iff ?
{x,y}(s) ?
?x y?
(8)for A ?
{x, y}, ands |=AUa(x) iff ?
{a,x}(s) ?
Eaa, x Ea(9)forA ?
{a, x}, where Ea:= ( + a )?.
We mustbe careful to incorporate into the clauses definings |=A?
the presupposition that each first-ordervariable x free in ?
occurs uniquely in s ?
i.e.s |=Ax = x wheres |=Ax = y iff ?
{x,y}(s) ?
?x, y?
(10)for x, y ?
A.
In particular, we restrict negation??
to strings |=A-satisfying x = x, for each first-order variable x free in ?.
We can then puts |=A?x ?
iff (?s?)
?A(s?)
= ?A(s)and s?|=A?
{x}?and similarly for second-order existential quantifi-cation.
The equivalence (5) above then becomess |=A?x?y S(x, y) iff ??
(s) ?+(11)and in place of (6), we haves |=A?x Ua(x) ?
Ub(x) iff ?
{a,b}(s) ?
(2{a,b})?a, b (2{a,b})?
(12)for a, b ?
A.Working back from (7)s |=A?
iff ?A(s) |=A?to the B?uchi-Elgot-Trakhtenbrot theorem, one cancheck that for every finite A and MSOA-formula?, the setLA(?)
:= {s ?
(2A)+| s |=A?
}of strings over 2Athat |=A-satisfy ?
is regular, us-ing the fact that for all A??
A, the restrictionof ?A?to (2A)?is computable by a finite statetransducer.
But for A ?
?,4?A? (2A)?is justPid(A,A?).
In recognition of the role of thesefunctions in |=A, we effectivize the presheaf Qidfrom ?2.3 as follows.
Let R?be the presheaf onFin(?)
mapping- A ?
Fin(?)
to the set of languages over thealphabet 2Athat are regularR?
(A) := {L ?
Qid(A) | L is regular}and- a Fin(?
)op-morphism (B,A) to the restric-tion of Qid(B,A) to R?(B)R?
(B,A) := (?L ?
R?
(B)) ?AL.
?R?-objects are then pairs (A,L) where A ?Fin(?)
and L is a regular language over the al-phabet 2A, while?R?-morphisms are quadru-ples (B,L,A, ?AL) from (B,L) to (A, ?AL) forA ?
B ?
Fin(?).
To account for the Boolean op-erations in MSO (as opposed to the predications(8)?
(10) involving ?A), we add inclusions for acategory R(?)
with- the same objects as?R?- morphisms all of those in C(?, id) be-tween objects in?R??
i.e., quadruples(B,L?, A, L) such that A ?
B ?
Fin(?),L??
(2B)?is regular, L ?
(2A)?is regular,and ?AL??
L.Let us agree to write(B,L?)
; (A,L)4Note an MSOA-formula ?
is not strictly a fluent in ?
butis formed in part from fluents.69to mean (B,L?, A, L) is a R(?
)-morphism.Clearly, for s ?
(2A)+, A??
A and L ?
(2A?)+,?A?
(s) ?
L iff (A, {s}) ; (A?, L).In particular, for x ?
A and s ?
(2A)+,s |=Ax = x iff (A, {s}) ; ({x},?x?
)and similarly for x = x replaced by the differ-ent MSOA-formulas specified in clauses (8)?(12)above.
The MSOA-sentencespec(A) := ?x?a?A(Ua(x) ??b?A?
{a}?Ub(x))associating a unique a ?
A with each string po-sition (presupposed in |=Abut not in |=A) fits thesame patterns |=Aspec(A) iff ?A(s) ?
{ a | a ?
A}+iff (A ?
voc(s), {s}) ;(A, { a | a ?
A}+)iff ?A(s) ?
?AA+.Let us define a string s ?
Fin(?
)+to be- A-specified if s |=Aspec(A)- A-underspecified if ?A(s) ?
?A(A?+?A+)- A-overspecified if ?A(s) 6?
image(?A)so that for a 6= a?and A = {a, a?
}, a a is A-specified, a is A-underspecified, and a, a?ais A-overspecified.
Given a finite automaton Aover A with set Q of states, its set AcRun(A) ofaccepting runs (Example C) is both A-specifiedand Q-specified, provided A ?
Q = ?
(and other-wise risks being A-overspecified).
The languageaccepted by A is the ?
?1A-image of the language?AAcRun(A) that is Q-underspecified, in accor-dance with the intuition that the states are hidden.From the regularity of AcRun(A), however, it isclear that we can make these states visible, withAcRun(A) as the language accepted by a finite au-tomaton A?
(over 2A?Q) that may (or may not)have the same set Q of states.The maps ?Aand inclusions ?
underlying themorphisms of R(?)
represent the two ways in-formation may grow from?R?-objects (A,L)to (B,L?)
?
expansively with A ?
B and L =?AL?, and eliminatively with L??
L and A = B.The same notion of f -entailment defined in ?2.3through the sets [[A,L]]fapplies, but we have beencareful here to fix f to id, in view ofProposition 6.
For A ?
B ?
Fin(?
), ?
anMSOA-formula and s ?
(2B)+,s |=B?
iff ?A(s) |=A?.Proposition 6 says that s |=B?
depends only onthe part ?A(s) of s mentioned in ?.
It is a par-ticular instance of the satisfaction condition in in-stitutions, expressing the invariance of truth underchange of notation (Goguen and Burstall 1992).Proposition 6 breaks down if we replace ?AbybcAor unpadA, as can be seen with A = ?, and?
= ?x?y S(x, y), for which recall (11).3.3 Varying grain and spanTroublesome as they are, the maps bcAandunpadAhave some use.
Just as we can vary tem-poral grain through bc (Examples A and B in sec-tion 1), we can vary temporal span through unpad.For instance, we can combine runs of automataA1over A1and A2over A2inL(A1,A2) := AcRun(A1) &unpadAcRun(A2)with the subscript unpad on & relaxing the re-quirement thatA1andA2start and finish together(running in lockstep throughout).
For i ?
{1, 2},and Qithe state set for Ai,AcRun(Ai) = unpadAi?QiL(A1,A2)assuming the sets A1, A2, Q1and Q2are pair-wise disjoint.
The disjointness assumption rulesout any communication (or interference) betweenA1and A2.
As subsets of one large set ?
offluents, however, it is perfectly natural for thesesets to intersect (and communicate through a com-mon vocabulary), and we might express very par-tial constraints involving them through, for ex-ample, MSO-formulas.
Recalling the definitionLA(?)
:= {s ?
(2A)+| s |=A?
}, we can rewritethe satisfaction conditions |=B?
iff fA(s) |=A?on MSOA-formulas ?, A ?
B ?
Fin(?)
and s ?(2B)+asLB(?)
= {s ?
(2B)+| fA(s) ?
LA(?
)}.This equation lifts any regular language LA(?)
toa regular languageLB(?
), provided f is computedby a finite-state transducer (as in the case of bc orunpad).
Inverse images under such relations are auseful addition to the stock of operations constitut-ing MSO-formulas as well as regular expressions.70ReferencesJames F. Allen.
1983.
Maintaining knowledge abouttemporal intervals.
C. ACM, 26(11):832?843.Michael Bennett and Barbara Partee.
1972.
Toward thelogic of tense and aspect in English.
Technical re-port, System Development Corporation, Santa Mon-ica, California.
Reprinted in Partee 2008.Robin Cooper.
2012.
Type theory and semantics in flux.In Handbook of the Philosophy of Science.
Volume14: Philosophy of Linguistics.
pages 271?323.David R. Dowty.
1979.
Word Meaning and MontagueGrammar.
Reidel, Dordrecht.Tim Fernando.
2004.
A finite-state approach to eventsin natural language semantics.
J.
Logic and Compu-tation, 14(1):79?92.Tim Fernando.
2007.
Observing events and situationsin time.
Linguistics and Philosophy 30(5):527?550.Tim Fernando.
2008.
Branching from inertia worlds.
J.Semantics 25(3):321?344.Tim Fernando.
2011.
Regular relations for temporalpropositions.
Natural Language Engineering 17(2):163?184.Tim Fernando.
2013a.
Finite state methods and descrip-tion logics Proceedings of the 11th InternationalConference on Finite State Methods and NaturalLanguage Processing, pages 63 ?
71.Tim Fernando.
2013b.
Dowty?s aspect hypothesis seg-mented.
Proceedings of the 19th Amsterdam Collo-quium, pages 107 ?
114.Danny Fox and Martin Hackl.
2006.
The universaldensity of measurement.
Linguistics and Philosophy29(5): 537 ?
586.Joseph Goguen and Rod Burstall.
1992., Institutions:Abstract model theory for specification and pro-gramming, J. ACM, 39(1):95?146.Hans Kamp and Uwe Reyle.
1993.
From Discourse toLogic.
Kluwer.Christopher Kennedy.
2001.
Polar opposition and theontology of degrees.
Linguistics and Philosophy 24.33 ?
70.Ewan Klein and Michael Rovatsos.
2011.
TemporalVagueness, Coordination and Communication InVagueness in Communication 2009, LNAI 6517,pages 108?126.Wolfgang Klein.
2009.
How time is encoded.
In W.Klein and P. Li, editors, The Expression of Time,pages 39 ?
81, Mouton De Gruyter.Saunders Mac Lane and Ieke Moerdijk.
1992.
Sheavesin Geometry and Logic: A First Introduction toTopos Theory.
Springer.Richard Montague.
1973.
The proper treatment ofquantification in ordinary English.
In Approaches toNatural Language, pages 221 ?
42.
D. Reidel, Dor-drecht.Ian Pratt-Hartmann.
2005.
Temporal prepositions andtheir logic.
Artificial Intelligence 166: 1?36.Roger Schwarzschild and Karina Wilkinson.
2002.Quantifiers in comparatives: A semantics of de-gree based on intervals.
Natural Language Seman-tics 10(1):1?41.Stephanie Solt.
2013.
Scales in natural language.Manuscript.Wolfgang Thomas.
1997.
Languages, automata andlogic.
In Handbook of Formal Languages: BeyondWords, volume 3, pages 389 ?
455.
Springer-Verlag.71
