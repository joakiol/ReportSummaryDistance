Proceedings of the 47th Annual Meeting of the ACL and the 4th IJCNLP of the AFNLP, pages 100?108,Suntec, Singapore, 2-7 August 2009. c?2009 ACL and AFNLPBayesian Unsupervised Word Segmentation withNested Pitman-Yor Language ModelingDaichi Mochihashi Takeshi Yamada Naonori UedaNTT Communication Science LaboratoriesHikaridai 2-4, Keihanna Science City, Kyoto, Japan{daichi,yamada,ueda}@cslab.kecl.ntt.co.jpAbstractIn this paper, we propose a new Bayesianmodel for fully unsupervised word seg-mentation and an efficient blocked Gibbssampler combined with dynamic program-ming for inference.
Our model is a nestedhierarchical Pitman-Yor language model,where Pitman-Yor spelling model is em-bedded in the word model.
We confirmedthat it significantly outperforms previousreported results in both phonetic tran-scripts and standard datasets for Chineseand Japanese word segmentation.
Ourmodel is also considered as a way to con-struct an accurate word n-gram languagemodel directly from characters of arbitrarylanguage, without any ?word?
indications.1 Introduction?Word?
is no trivial concept in many languages.Asian languages such as Chinese and Japanesehave no explicit word boundaries, thus word seg-mentation is a crucial first step when processingthem.
Even in western languages, valid ?words?are often not identical to space-separated tokens.For example, proper nouns such as ?United King-dom?
or idiomatic phrases such as ?with respectto?
actually function as a single word, and we of-ten condense them into the virtual words ?UK?and ?w.r.t.
?.In order to extract ?words?
from text streams,unsupervised word segmentation is an importantresearch area because the criteria for creating su-pervised training data could be arbitrary, and willbe suboptimal for applications that rely on seg-mentations.
It is particularly difficult to create?correct?
training data for speech transcripts, col-loquial texts, and classics where segmentations areoften ambiguous, let alne is impossible for un-known languages whose properties computationallinguists might seek to uncover.From a scientific point of view, it is also inter-esting because it can shed light on how childrenlearn ?words?
without the explicitly given bound-aries for every word, which is assumed by super-vised learning approaches.Lately, model-based methods have been intro-duced for unsupervised segmentation, in particu-lar those based on Dirichlet processes on words(Goldwater et al, 2006; Xu et al, 2008).
Thismaximizes the probability of word segmentationw given a string s :w?
= argmaxwp(w|s) .
(1)This approach often implicitly includes heuristiccriteria proposed so far1, while having a clear sta-tistical semantics to find the most probable wordsegmentation that will maximize the probability ofthe data, here the strings.However, they are still na?
?ve with respect toword spellings, and the inference is very slow ow-ing to inefficient Gibbs sampling.
Crucially, sincethey rely on sampling a word boundary betweentwo neighboring words, they can leverage only upto bigram word dependencies.In this paper, we extend this work to pro-pose a more efficient and accurate unsupervisedword segmentation that will optimize the per-formance of the word n-gram Pitman-Yor (i.e.Bayesian Kneser-Ney) language model, with anaccurate character ?-gram Pitman-Yor spellingmodel embedded in word models.
Further-more, it can be viewed as a method for buildinga high-performance n-gram language model di-rectly from character strings of arbitrary language.It is carefully smoothed and has no ?unknownwords?
problem, resulting from its model struc-ture.This paper is organized as follows.
In Section 2,1For instance, TANGO algorithm (Ando and Lee, 2003)essentially finds segments such that character n-gram proba-bilities are maximized blockwise, averaged over n.100(a) Generating n-gram distributions G hierarchicallyfrom the Pitman-Yor process.
Here, n = 3.
(b) Equivalent representation using a hierarchical ChineseRestaurant process.
Each word in a training text is a ?customer?shown in italic, and added to the leaf of its two words context.Figure 1: Hierarchical Pitman-Yor Language Model.we briefly describe a language model based on thePitman-Yor process (Teh, 2006b), which is a gen-eralization of the Dirichlet process used in previ-ous research.
By embedding a character n-gramin word n-gram from a Bayesian perspective, Sec-tion 3 introduces a novel language model for wordsegmentation, which we call the Nested Pitman-Yor language model.
Section 4 describes an ef-ficient blocked Gibbs sampler that leverages dy-namic programming for inference.
In Section 5 wedescribe experiments on the standard datasets inChinese and Japanese in addition to English pho-netic transcripts, and semi-supervised experimentsare also explored.
Section 6 is a discussion andSection 7 concludes the paper.2 Pitman-Yor process and n-grammodelsTo compute a probability p(w|s) in (1), we adopta Bayesian language model lately proposed by(Teh, 2006b; Goldwater et al, 2005) based onthe Pitman-Yor process, a generalization of theDirichlet process.
As we shall see, this is aBayesian theory of the best-performing Kneser-Ney smoothing of n-grams (Kneser and Ney,1995), allowing an integrated modeling from aBayesian perspective as persued in this paper.The Pitman-Yor (PY) process is a stochasticprocess that generates discrete probability distri-bution G that is similar to another distribution G0,called a base measure.
It is written asG ?
PY(G0, d, ?)
, (2)where d is a discount factor and ?
controls howsimilar G is to G0 on average.Suppose we have a unigram word distributionG1 ={ p(?)
} where ?
ranges over each word in thelexicon.
The bigram distribution G2 = { p(?|v) }given a word v is different from G1, but will besimilar to G1 especially for high frequency words.Therefore, we can generate G2 from a PY pro-cess of base measure G1, as G2 ?
PY(G1, d, ?
).Similarly, trigram distribution G3 = { p(?|v?v) }given an additional word v?
is generated as G3 ?PY(G2, d, ?
), and G1, G2, G3 will form a treestructure shown in Figure 1(a).In practice, we cannot observe G directly be-cause it will be infinite dimensional distributionover the possible words, as we shall see in thispaper.
However, when we integrate out G it isknown that Figure 1(a) can be represented by anequivalent hierarchical Chinese Restaurant Pro-cess (CRP) (Aldous, 1985) as in Figure 1(b).In this representation, each n-gram context h(including the null context  for unigrams) isa Chinese restaurant whose customers are then-gram counts c(w|h) seated over the tables1 ?
?
?
thw.
The seatings has been incrementallyconstructed by choosing the table k for each countin c(w|h) with probability proportional to{chwk ?
d (k = 1, ?
?
?
, thw)?
+ d?th?
(k = new) ,(3)where chwk is the number of customers seated attable k thus far and th?
= ?w thw is the total num-ber of tables in h. When k = new is selected,thw is incremented, and this means that the countwas actually generated from the shorter context h?.Therefore, in that case a proxy customer is sent tothe parent restaurant and this process will recurse.For example, if we have a sentence ?she willsing?
in the training data for trigrams, we add eachword ?she?
?will?
?sing?
?$?
as a customer to itstwo preceding words context node, as describedin Figure 1(b).
Here, ?$?
is a special token rep-resenting a sentence boundary in language model-101ing (Brown et al, 1992).As a result, the n-gram probability of this hier-archical Pitman-Yor language model (HPYLM) isrecursively computed asp(w|h) = c(w|h)?d?thw?+c(h) +?+d?th?
?+c(h) p(w|h?
),(4)where p(w|h?)
is the same probability using a(n?1)-gram context h?.
When we set thw ?
1, (4)recovers a Kneser-Ney smoothing: thus a HPYLMis a Bayesian Kneser-Ney language model as wellas an extension of the hierarchical Dirichlet Pro-cess (HDP) used in Goldwater et al (2006).
?, dare hyperparameters that can be learned as Gammaand Beta posteriors, respectively, given the data.For details, see Teh (2006a).The inference of this model interleaves addingand removing a customer to optimize thw, d, and?
using MCMC.
However, in our case ?words?are not known a priori: the next section describeshow to accomplish this by constructing a nestedHPYLM of words and characters, with the associ-ated inference algorithm.3 Nested Pitman-Yor Language ModelThus far we have assumed that the unigram G1is already given, but of course it should also begenerated as G1 ?
PY(G0, d, ?
).Here, a problem occurs: What should we use forG0, namely the prior probabilities over words2?If a lexicon is finite, we can use a uniform priorG0(w) = 1/|V | for every word w in lexicon V .However, with word segmentation every substringcould be a word, thus the lexicon is not limited butwill be countably infinite.Building an accurate G0 is crucial for wordsegmentation, since it determines how the possi-ble words will look like.
Previous work using aDirichlet process used a relatively simple prior forG0, namely an uniform distribution over charac-ters (Goldwater et al, 2006), or a prior solely de-pendent on word length with a Poisson distributionwhose parameter is fixed by hand (Xu et al, 2008).In contrast, in this paper we use a simple butmore elaborate model, that is, a character n-gramlanguage model that also employs HPYLM.
Thisis important because in English, for example,words are likely to end in ??tion?
and begin with2Note that this is different from unigrams, which are pos-terior distribution given data.Figure 2: Chinese restaurant representation of ourNested Pitman-Yor Language Model (NPYLM).?re?
?, but almost never end in ??tio?
nor begin with?sre??
3.Therefore, we useG0(w) = p(c1 ?
?
?
ck) (5)=k?i=1p(ci|c1 ?
?
?
ci?1) (6)where string c1 ?
?
?
ck is a spelling of w, andp(ci|c1 ?
?
?
ci?1) is given by the character HPYLMaccording to (4).This language model, which we call NestedPitman-Yor Language Model (NPYLM) hereafter,is the hierarchical language model shown in Fig-ure 2, where the character HPYLM is embeddedas a base measure of the word HPYLM.4 As thefinal base measure for the character HPYLM, weused a uniform prior over the possible charactersof a given language.
To avoid dependency on n-gram order n, we actually used the ?-gram lan-guage model (Mochihashi and Sumita, 2007), avariable order HPYLM, for characters.
However,for generality we hereafter state that we used theHPYLM.
The theory remains the same for ?-grams, except sampling or marginalizing over nas needed.Furthermore, we corrected (5) so that wordlength will have a Poisson distribution whose pa-rameter can now be estimated for a given languageand word type.
We describe this in detail in Sec-tion 4.3.Chinese Restaurant RepresentationIn our NPYLM, the word model and the charac-ter model are not separate but connected througha nested CRP.
When a word w is generated fromits parent at the unigram node, it means that w3Imagine we try to segment an English character string?itisrecognizedasthe?
?
?
.
?4Strictly speaking, this is not ?nested?
in the sense of aNested Dirichlet process (Rodriguez et al, 2008) and couldbe called ?hierarchical HPYLM?, which denotes anothermodel for domain adaptation (Wood and Teh, 2008).102is drawn from the base measure, namely a char-acter HPYLM.
Then we divide w into charactersc1 ?
?
?
ck to yield a ?sentence?
of characters andfeed this into the character HPYLM as data.Conversely, when a table becomes empty, thismeans that the data associated with the table areno longer valid.
Therefore we remove the corre-sponding customers from the character HPYLMusing the inverse procedure of adding a customerin Section 2.All these processes will be invoked when astring is segmented into ?words?
and customersare added to the leaves of the word HPYLM.
Tosegment a string into ?words?, we used efficientdynamic programming combined with MCMC, asdescribed in the next section.4 InferenceTo find the hidden word segmentation w of a strings = c1 ?
?
?
cN , which is equivalent to the vector ofbinary hidden variables z = z1 ?
?
?
zN , the sim-plest approach is to build a Gibbs sampler that ran-domly selects a character ci and draw a binary de-cision zi as to whether there is a word boundary,and then update the language model according tothe new segmentation (Goldwater et al, 2006; Xuet al, 2008).
When we iterate this procedure suf-ficiently long, it becomes a sample from the truedistribution (1) (Gilks et al, 1996).However, this sampler is too inefficient sincetime series data such as word segmentation have avery high correlation between neighboring words.As a result, the sampler is extremely slow to con-verge.
In fact, (Goldwater et al, 2006) reports thatthe sampler would not mix without annealing, andthe experiments needed 20,000 times of samplingfor every character in the training data.Furthermore, it has an inherent limitation thatit cannot deal with larger than bigrams, because ituses only local statistics between directly contigu-ous words for word segmentation.4.1 Blocked Gibbs samplerInstead, we propose a sentence-wise Gibbs sam-pler of word segmentation using efficient dynamicprogramming, as shown in Figure 3.In this algorithm, first we randomly select astring, and then remove the ?sentence?
data of itsword segmentation from the NPYLM.
Samplinga new segmentation, we update the NPYLM byadding a new ?sentence?
according to the new seg-1: for j = 1 ?
?
?
J do2: for s in randperm (s1, ?
?
?
, sD) do3: if j >1 then4: Remove customers of w(s) from ?5: end if6: Draw w(s) according to p(w|s,?
)7: Add customers of w(s) to ?8: end for9: Sample hyperparameters of ?10: end forFigure 3: Blocked Gibbs Sampler of NPYLM ?.mentation.
When we repeat this process, it is ex-pected to mix rapidly because it implicitly consid-ers all possible segmentations of the given stringat the same time.This is called a blocked Gibbs sampler that sam-ples z block-wise for each sentence.
It has an ad-ditional advantage in that we can accommodatehigher-order relationships than bigrams, particu-larly trigrams, for word segmentation.
54.2 Forward-Backward inferenceThen, how can we sample a segmentation w foreach string s?
In accordance with the Forward fil-tering Backward sampling of HMM (Scott, 2002),this is achieved by essentially the same algorithmemployed to sample a PCFG parse tree withinMCMC (Johnson et al, 2007) and grammar-basedsegmentation (Johnson and Goldwater, 2009).Forward Filtering.
For this purpose, we main-tain a forward variable ?
[t][k] in the bigram case.?
[t][k] is the probability of a string c1 ?
?
?
ct withthe final k characters being a word (see Figure 4).Segmentations before the final k characters aremarginalized using the following recursive rela-tionship:?
[t][k] =t?k?j=1p(ctt?k+1|ct?kt?k?j+1)??
[t?k][j] (7)where ?
[0][0] = 1 and we wrote cn ?
?
?
cm as cmn .6The rationale for (7) is as follows.
Since main-taining binary variables z1, ?
?
?
, zN is equivalentto maintaining a distance to the nearest backward5In principle fourgrams or beyond are also possible, butwill be too complex while the gain will be small.
For thispurpose, Particle MCMC (Doucet et al, 2009) is promisingbut less efficient in a preliminary experiment.6As Murphy (2002) noted, in semi-HMM we cannot use astandard trick to avoid underflow by normalizing ?
[t][k] intop(k|t), since the model is asynchronous.
Instead we alwayscompute (7) using logsumexp().103Figure 4: Forward filtering of ?
[t][k] to marginal-ize out possible segmentations j before t?k.1: for t = 1 to N do2: for k = max(1, t?L) to t do3: Compute ?
[t][k] according to (7).4: end for5: end for6: Initialize t?
N , i?
0, w0 ?
$7: while t > 0 do8: Draw k ?
p(wi|ctt?k+1,?)
?
?
[t][k]9: Set wi ?
ctt?k+110: Set t?
t?
k, i?
i + 111: end while12: Return w = wi, wi?1, ?
?
?
, w1.Figure 5: Forward-Backward sampling of wordsegmentation w. (in bigram case)word boundary for each t as qt, we can write?
[t][k]=p(ct1, qt =k) (8)=?jp(ct1, qt =k, qt?k =j) (9)=?jp(ct?k1 , ctt?k+1, qt =k, qt?k =j)(10)=?jp(ctt?k+1|ct?k1 )p(ct?k1 , qt?k =j)(11)=?jp(ctt?k+1|ct?k1 )?
[t?k][j] , (12)where we used conditional independency of qtgiven qt?k and uniform prior over qt in (11) above.Backward Sampling.
Once the probability ta-ble ?
[t][k] is obtained, we can sample a word seg-mentation backwards.
Since ?
[N ][k] is a marginalprobability of string cN1 with the last k charac-ters being a word, and there is always a sentenceboundary token $ at the end of the string, withprobability proportional to p($|cNN?k)??
[N ][k] wecan sample k to choose the boundary of the finalword.
The second final word is similarly sampledusing the probability of preceding the last wordjust sampled: we continue this process until wearrive at the beginning of the string (Figure 5).Trigram case.
For simplicity, we showed thealgorithm for bigrams above.
For trigrams, wemaintain a forward variable ?
[t][k][j], which rep-resents a marginal probability of string c1 ?
?
?
ctwith both the final k characters and further jcharacters preceding it being words.
Forward-Backward algorithm becomes complicated thusomitted, but can be derived following the extendedalgorithm for second order HMM (He, 1988).Complexity This algorithm has a complexity ofO(NL2) for bigrams and O(NL3) for trigramsfor each sentence, where N is the length of thesentence and L is the maximum allowed length ofa word (?
N ).4.3 Poisson correctionAs Nagata (1996) noted, when only (5) is used in-adequately low probabilities are assigned to longwords, because it has a largely exponential dis-tribution over length.
To correct this, we assumethat word length k has a Poisson distribution witha mean ?:Po(k|?)
= e??
?kk!
.
(13)Since the appearance of c1 ?
?
?
ck is equivalentto that of length k and the content, by making thecharacter n-gram model explicit as ?
we can setp(c1 ?
?
?
ck) = p(c1 ?
?
?
ck, k) (14)= p(c1 ?
?
?
ck, k|?)p(k|?)
Po(k|?)
(15)where p(c1 ?
?
?
ck, k|?)
is an n-gram probabil-ity given by (6), and p(k|?)
is a probabilitythat a word of length k will be generated from?.
While previous work used p(k|?)
= (1 ?p($))k?1p($), this is only true for unigrams.
In-stead, we employed a Monte Carlo method thatgenerates words randomly from ?
to obtain theempirical estimates of p(k|?
).Estimating ?.
Of course, we do not leave ?
as aconstant.
Instead, we put a Gamma distributionp(?)
= Ga(a, b) = ba?(a)?a?1e?b?
(16)to estimate ?
from the data for given languageand word type.7 Here, ?
(x) is a Gamma functionand a, b are the hyperparameters chosen to give anearly uniform prior distribution.87We used different ?
for different word types, such as dig-its, alphabets, hiragana, CJK characters, and their mixtures.W is a set of words of each such type, and (13) becomes amixture of Poisson distributions in this case.8In the following experiments, we set a=0.2, b=0.1.104Denoting W as a set of ?words?
obtained fromword segmentation, the posterior distribution of ?used for (13) isp(?|W ) ?
p(W |?)p(?
)= Ga(a+?w?Wt(w)|w|, b+?w?Wt(w)), (17)where t(w) is the number of times word w is gen-erated from the character HPYLM, i.e.
the numberof tables tw for w in word unigrams.
We sampled?
from this posterior for each Gibbs iteration.5 ExperimentsTo validate our model, we conducted experimentson standard datasets for Chinese and Japaneseword segmentation that are publicly available, aswell as the same dataset used in (Goldwater et al,2006).
Note that NPYLM maximizes the probabil-ity of strings, equivalently, minimizes the perplex-ity per character.
Therefore, the recovery of the?ground truth?
that is not available for inference isa byproduct in unsupervised learning.Since our implementation is based on Unicodeand learns all hyperparameters from the data, wealso confirmed that NPYLM segments the ArabicGigawords equally well.5.1 English phonetic transcriptsIn order to directly compare with the previouslyreported result, we first used the same datasetas Goldwater et al (2006).
This dataset con-sists of 9,790 English phonetic transcripts fromCHILDES data (MacWhinney and Snow, 1985).Since our algorithm converges rather fast, weran the Gibbs sampler of trigram NPYLM for 200iterations to obtain the results in Table 1.
Amongthe token precision (P), recall (R), and F-measure(F), the recall is especially higher to outperformthe previous result based on HDP in F-measure.Meanwhile, the same measures over the obtainedlexicon (LP, LR, LF) are not always improved.Moreover, the average length of words inferredwas surprisingly similar to ground truth: 2.88,while the ground truth is 2.87.Table 2 shows the empirical computational timeneeded to obtain these results.
Although the con-vergence in MCMC is not uniquely identified, im-provement in efficiency is also outstanding.5.2 Chinese and Japanese word segmentationTo show applicability beyond small phonetic tran-scripts, we used standard datasets for Chinese andModel P R F LP LR LFNPY(3) 74.8 75.2 75.0 47.8 59.7 53.1NPY(2) 74.8 76.7 75.7 57.3 56.6 57.0HDP(2) 75.2 69.6 72.3 63.5 55.2 59.1Table 1: Segmentation accuracies on English pho-netic transcripts.
NPY(n) means n-gram NPYLM.Results for HDP(2) are taken from Goldwater etal.
(2009), which corrects the errors in Goldwateret al (2006).Model time iterationsNPYLM 17min 200HDP 10h 55min 20000Table 2: Computations needed for Table 1.
Itera-tions for ?HDP?
is the same as described in Gold-water et al (2009).
Actually, NPYLM approxi-mately converged around 50 iterations, 4 minutes.Japanese word segmentation, with all supervisedsegmentations removed in advance.Chinese For Chinese, we used a publicly avail-able SIGHAN Bakeoff 2005 dataset (Emerson,2005).
To compare with the latest unsupervisedresults (using a closed dataset of Bakeoff 2006),we chose the common sets prepared by MicrosoftResearch Asia (MSR) for simplified Chinese, andby City University of Hong Kong (CITYU) fortraditional Chinese.
We used a random subset of50,000 sentences from each dataset for training,and the evaluation was conducted on the enclosedtest data.
9Japanese For Japanese, we used the Kyoto Cor-pus (Kyoto) (Kurohashi and Nagao, 1998): weused random subset of 1,000 sentences for evalua-tion and the remaining 37,400 sentences for train-ing.
In all cases we removed all whitespaces toyield raw character strings for inference, and setL = 4 for Chinese and L = 8 for Japanese to runthe Gibbs sampler for 400 iterations.The results (in token F-measures) are shown inTable 3.
Our NPYLM significantly ourperformsthe best results using a heuristic approach reportedin Zhao and Kit (2008).
While Japanese accura-cies appear lower, subjective qualities are muchhigher.
This is mostly because NPYLM segmentsinflectional suffixes and combines frequent propernames, which are inconsistent with the ?correct?9Notice that analyzing a test data is not easy for character-wise Gibbs sampler of previous work.
Meanwhile, NPYLMeasily finds the best segmentation using the Viterbi algorithmonce the model is learned.105Model MSR CITYU KyotoNPY(2) 80.2 (51.9) 82.4 (126.5) 62.1 (23.1)NPY(3) 80.7 (48.8) 81.7 (128.3) 66.6 (20.6)ZK08 66.7 (?)
69.2 (?)
?Table 3: Accuracies and perplexities per character(in parentheses) on actual corpora.
?ZK08?
are thebest results reported in Zhao and Kit (2008).
Weused?-gram for characters.MSR CITYU KyotoSemi 0.895 (48.8) 0.898 (124.7) 0.913 (20.3)Sup 0.945 (81.4) 0.941 (194.8) 0.971 (21.3)Table 4: Semi-supervised and supervised results.Semi-supervised results used only 10K sentences(1/5) of supervised segmentations.segmentations.
Bigram and trigram performancesare similar for Chinese, but trigram performs bet-ter for Japanese.
In fact, although the differencein perplexity per character is not so large, the per-plexity per word is radically reduced: 439.8 (bi-gram) to 190.1 (trigram).
This is because trigrammodels can leverage complex dependencies overwords to yield shorter words, resulting in betterpredictions and increased tokens.Furthermore, NPYLM is easily amenable tosemi-supervised or even supervised learning.
Inthat case, we have only to replace the word seg-mentation w(s) in Figure 3 to the supervised one,for all or part of the training data.
Table 4shows the results using 10,000 sentences (1/5) orcomplete supervision.
Our completely generativemodel achieves the performance of 94% (Chinese)or even 97% (Japanese) in supervised case.
Theresult also shows that the supervised segmenta-tions are suboptimal with respect to the perplex-ity per character, and even worse than unsuper-vised results.
In semi-supervised case, using only10K reference segmentations gives a performanceof around 90% accuracy and the lowest perplexity,thanks to a combination with unsupervised data ina principled fashion.5.3 Classics and English textOur model is particularly effective for spoken tran-scripts, colloquial texts, classics, or unknown lan-guages where supervised segmentation data is dif-ficult or even impossible to create.
For example,we are pleased to say that we can now analyze (andbuild a language model on) ?The Tale of Genji?,the core of Japanese classics written 1,000 yearsago (Figure 6).
The inferred segmentations are ffflfiffi! "#%$&ff ('*),+.-/'!021354%ffi(6879&:9;<>=8	?@19>BAC(DE"ED,F4.G?2HIDJK4L'2M.
%7NDOflPff#Q%RES(T?U/V1%WXZY('V!
?C[B\>]>BA8F^IGQ_`L[aHIDEbac.9>Ld%4&e.Vf=%)>:ffi(gFih.j5kBlKm@"a=EWO ?
?
?Figure 6: Unsupervised segmentation result for?The Tale of Genji?.
(16,443 sentences, 899,668characters in total)mostly correct, with some inflectional suffixes be-ing recognized as words, which is also the casewith English.Finally, we note that our model is also effectivefor western languages: Figure 7 shows a trainingtext of ?Alice in Wonderland ?
with all whitespacesremoved, and the segmentation result.While the data is extremely small (only 1,431lines, 115,961 characters), our trigram NPYLMcan infer the words surprisingly well.
This is be-cause our model contains both word and charactermodels that are combined and carefully smoothed,from a Bayesian perspective.6 DiscussionIn retrospect, our NPYLM is essentially a hier-archical Markov model where the units (=words)evolve as the Markov process, and each unithas subunits (=characters) that also evolve as theMarkov process.
Therefore, for such languagesas English that have already space-separated to-kens, we can also begin with tokens besides thecharacter-based approach in Section 5.3.
In thiscase, each token is a ?character?
whose code is theinteger token type, and a sentence is a sequence of?characters.?
Figure 8 shows a part of the resultcomputed over 100K sentences from Penn Tree-bank.
We can see that some frequent phrases areidentified as ?words?, using a fully unsupervisedapproach.
Notice that this is only attainable withNPYLM where each phrase is described as a n-gram model on its own, here a word?-gram lan-guage model.While we developed an efficient forward-backward algorithm for unsupervised segmenta-tion, it is reminiscent of CRF in the discrimina-tive approach.
Therefore, it is also interestingto combine them in a discriminative way as per-sued in POS tagging using CRF+HMM (Suzuki etal., 2007), let alne a simple semi-supervised ap-proach in Section 5.2.
This paper provides a foun-dation of such possibilities.106lastly,shepicturedtoherselfhowthissamelittlesisterofherswould,intheafter-time,beherselfagrownwoman;andhowshewouldkeep,throughallherriperyears,thesimpleandlovingheartofherchildhood:andhowshewouldgatheraboutherotherlittlechildren,andmaketheireyesbrightandeagerwithmanyastrangetale,perhapsevenwiththedreamofwonderlandoflongago:andhowshewouldfeelwithalltheirsimplesorrows,andfindapleasureinalltheirsimplejoys,rememberingherownchild-life,andthehappysummerdays.
(a) Training data (in part).last ly , she pictured to herself how this same little sis-ter of her s would , inthe after - time , be herself agrownwoman ; and how she would keep , through allher riperyears , the simple and loving heart of her child hood : andhow she would gather about her other little children ,andmake theireyes bright and eager with many a strange tale, perhaps even with the dream of wonderland of longago: and how she would feel with all their simple sorrow s ,and find a pleasure in all their simple joys , remember ingher own child - life , and thehappy summerday s .
(b) Segmentation result.
Note we used no dictionary.Figure 7: Word segmentation of ?Alice in Wonder-land ?.7 ConclusionIn this paper, we proposed a much more efficientand accurate model for fully unsupervised wordsegmentation.
With a combination of dynamicprogramming and an accurate spelling model froma Bayesian perspective, our model significantlyoutperforms the previous reported results, and theinference is very efficient.This model is also considered as a way to builda Bayesian Kneser-Ney smoothed word n-gramlanguage model directly from characters with no?word?
indications.
In fact, it achieves lower per-plexity per character than that based on supervisedsegmentations.
We believe this will be particu-larly beneficial to build a language model on suchtexts as speech transcripts, colloquial texts or un-known languages, where word boundaries are hardor even impossible to identify a priori.AcknowledgmentsWe thank Vikash Mansinghka (MIT) for a mo-tivating discussion leading to this research, andSatoru Takabayashi (Google) for valuable techni-cal advice.ReferencesDavid Aldous, 1985.
Exchangeability and RelatedTopics, pages 1?198.
Springer Lecture Notes inMath.
1117.Rie Kubota Ando and Lillian Lee.
2003.
Mostly-Unsupervised Statistical Segmentation of Japanesenevertheless ,he was admiredby many of his immediate subordinatesfor his long work hoursand dedication to building northwestinto what he called a ?
mega carrier.
?althoughpreliminary findingswere reportedmore than a year ago ,the latest resultsappearin today ?snew england journal of medicine ,a forumlikely to bring new attention to the problem.south korearegistered a trade deficit of $ 101 millionin october, reflecting the country ?s economic sluggishness, according to government figures released wednesday.Figure 8: Generative phrase segmentation of PennTreebank text computed by NPYLM.
Each line isa ?word?
consisting of actual words.Kanji Sequences.
Natural Language Engineering,9(2):127?149.Peter F. Brown, Vincent J. Della Pietra, Robert L. Mer-cer, Stephen A. Della Pietra, and Jennifer C. Lai.1992.
An Estimate of an Upper Bound for the En-tropy of English.
Computational Linguistics, 18:31?40.Arnaud Doucet, Christophe Andrieu, and RomanHolenstein.
2009.
Particle Markov Chain MonteCarlo.
in submission.Tom Emerson.
2005.
SIGHAN Bakeoff 2005.http://www.sighan.org/bakeoff2005/.W.
R. Gilks, S. Richardson, and D. J. Spiegelhalter.1996.
Markov Chain Monte Carlo in Practice.Chapman & Hall / CRC.Sharon Goldwater, Thomas L. Griffiths, and MarkJohnson.
2005.
Interpolating Between Types andTokens by Estimating Power-Law Generators.
InNIPS 2005.Sharon Goldwater, Thomas L. Griffiths, and MarkJohnson.
2006.
Contextual Dependencies in Un-supervised Word Segmentation.
In Proceedings ofACL/COLING 2006, pages 673?680.Sharon Goldwater, Thomas L. Griffiths, and MarkJohnson.
2009.
A Bayesian framework for wordsegmentation: Exploring the effects of context.Cognition, in press.Yang He.
1988.
Extended Viterbi algorithm for sec-ond order hidden Markov process.
In Proceedingsof ICPR 1988, pages 718?720.107Mark Johnson and Sharon Goldwater.
2009.
Im-proving nonparameteric Bayesian inference: exper-iments on unsupervised word segmentation withadaptor grammars.
In NAACL 2009.Mark Johnson, Thomas L. Griffiths, and Sharon Gold-water.
2007.
Bayesian Inference for PCFGs viaMarkov Chain Monte Carlo.
In Proceedings ofHLT/NAACL 2007, pages 139?146.Reinhard Kneser and Hermann Ney.
1995.
Improvedbacking-off for m-gram language modeling.
In Pro-ceedings of ICASSP, volume 1, pages 181?184.Sadao Kurohashi and Makoto Nagao.
1998.
Buildinga Japanese Parsed Corpus while Improving the Pars-ing System.
In Proceedings of LREC 1998, pages719?724.
http://nlp.kuee.kyoto-u.ac.jp/nl-resource/corpus.html.Brian MacWhinney and Catherine Snow.
1985.
TheChild Language Data Exchange System.
Journal ofChild Language, 12:271?296.Daichi Mochihashi and Eiichiro Sumita.
2007.
TheInfinite Markov Model.
In NIPS 2007.Kevin Murphy.
2002.
Hidden semi-Markov models(segment models).
http://www.cs.ubc.ca/?murphyk/Papers/segment.pdf.Masaaki Nagata.
1996.
Automatic Extraction ofNew Words from Japanese Texts using General-ized Forward-Backward Search.
In Proceedings ofEMNLP 1996, pages 48?59.Abel Rodriguez, David Dunson, and Alan Gelfand.2008.
The Nested Dirichlet Process.
Journal of theAmerican Statistical Association, 103:1131?1154.Steven L. Scott.
2002.
Bayesian Methods for HiddenMarkov Models.
Journal of the American StatisticalAssociation, 97:337?351.Jun Suzuki, Akinori Fujino, and Hideki Isozaki.
2007.Semi-Supervised Structured Output Learning Basedon a Hybrid Generative and Discriminative Ap-proach.
In Proceedings of EMNLP-CoNLL 2007,pages 791?800.Yee Whye Teh.
2006a.
A Bayesian Interpreta-tion of Interpolated Kneser-Ney.
Technical ReportTRA2/06, School of Computing, NUS.Yee Whye Teh.
2006b.
A Hierarchical Bayesian Lan-guage Model based on Pitman-Yor Processes.
InProceedings of ACL/COLING 2006, pages 985?992.Frank Wood and Yee Whye Teh.
2008.
A Hierarchical,Hierarchical Pitman-Yor Process Language Model.In ICML 2008 Workshop on Nonparametric Bayes.Jia Xu, Jianfeng Gao, Kristina Toutanova, and Her-mann Ney.
2008.
Bayesian Semi-Supervised Chi-nese Word Segmentation for Statistical MachineTranslation.
In Proceedings of COLING 2008,pages 1017?1024.Hai Zhao and Chunyu Kit.
2008.
An Empirical Com-parison of Goodness Measures for UnsupervisedChinese Word Segmentation with a Unified Frame-work.
In Proceedings of IJCNLP 2008.108
