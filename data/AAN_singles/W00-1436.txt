A Deve lopment  Env i ronment  for an MTT-Based  SentenceGeneratorBernd Bohnet,  Andreas Langjahr and Leo WannerComputer  Science Depar tmentUnivers i ty  of Stut tgar tBreitwiesenstr .
20-22-70565:Stut tgar t ,  Germany .
.
.
.
.
.
.
.
.
.  "
........{bohnet \ [ langjahr\[wanner}?informatik.uni-stuttgart .de1 I n t roduct ionWith the rising standard of the state of the art intext generation and the increase of the numberof practical generation applications, it becomesmore and more important o provide means forthe maintenance of the generator, i.e.
its ex-tension, modification, and monitoring by gram-marians who are not familiar with its internals.However, only a few sentence and text gener-ators developed to date actually provide thesemeans.
One of these generators is KPML (Bate-man, 1997).
I~PML comes with a DevelopmentEnvironment and there is no doubt about thecontribution of this environment to the popular-ity of the systemic approach in generation.In the generation project at Stuttgart, therealization of a high quality development en-vironment (henceforth, DE) has been a centraltopic from the beginning.
The De provides sup-port to the user with respect to writing, mod-ifying, testing, and debugging of (i) grammarrules.
(ii) lexical information, and (iii) linguis-tic structures at different levels of abstraction.Furthermore, it automatically generalizes tile or-ganization of the lexica and the grammar.
Inwhat follows, we briefly describe oF,'s main fea-tures.
The theoretical linguistic background ofthe DE is the Meaning-Text Theory (Mel'euk,1988: Polgu~re, 1998).
However.
its introduc-tion is beyond tile scope of this note: tile inter-ested reader is asked to consuh the above regerences as well as further literature on the useOf MTT ill text generation---for illSlallCe, (Ior-danskaja cta l .
,  1992: I,avoie ?- Rainbow.
1997:(.'och.
1997).2 Globa l  V iew on the  DEIn MTT, seven levels (or strata) of linguis-tic description are distinguished, of whichfive are relevant for generation: semantic(Sem), deep-syntactic (DSynt), surface-syntactic(SSynt), deep-morphologicM (DMorph) andsurface-morphological (SMorph).
In order to beable to generate starting from the data in a database, we introduce an additional, the conceptual(Con) stratum.
The input structure to DE is thusa conceptual structure (ConStr) derived from thedata in the DB.
The generation process consistsof a series of structure mappings between adja-cent strata until the SMorph stratum is reached.At the SMorph stratum, the structure is a stringof linearized word forms.The central module of the DE iS a compilerthat maps a structure specified at one of tile fivefirst of the above strata on a structure at theadjacent stratum.
To support the user in the ex-amination of the internal information gatheredduring the processing of a structure, a debug-ger and an inspector are available.
The user caninteract with the compiler either via a graphicinterface or via a text command interface.
Forthe maintenance of the grammar, of the lexicaand of the linguistic structures, the DE possessesseparate ditors: a rule editor, a lexicon editor,and a structure editor.2.1 The  Ru le  Ed i torThe  Ru les .
Most of the grammatical rulesin an MTT-based generator are two-level rules..'\ two-level rule establishes a correspomlence260between minimal structures of two adjacentstrata.
Given that in generation five ofMTT'S strata are used, four sets of two-levelrules are available: (1) Sem=vDSynt-rules, (2)DSynt~SSynt-rules, (3) SSynt=vDMorph rules,and (4) DMorph~SMorph-rules.Formally, a two-level rule is defined by theoptimize the organization of the grammar by a u -tomatic detection Of common parts in severalrules and their extraction into abstract 'class'rules.
The theoretical background and the proce-dure of rule generalization is described in detailin (Wanner & Bohnet, submitted) and will hencenot be discussed in this note.quintuple (/2, Ctxt, Conds, 7~, Corr).
?
specifies While editing a rule, the developer has thethe lefthand side :of the r.,ule-~a,~minimal~so~rce~a stc nd~r.d,c.ommands:,:~t,,his/'her~ disposal.
Rulessubstructure that is mapped by the rule onto its can be edited either in a text rule editor or viadestination structure specified in 7~, the right-hand side of the rule.
Ctxt specifies the widercontext of the lefthand side in the input structure(note that by far not all rules contain context in-formation).
Conds specifies the conditions thatmust be satisfied for the rule to be applicable toan input substructure matched by ?.
Corr spec-ifies the correspondence between the individualnodes of the lefthand side and the righthand sidestructures.Consider a typical Sem=~,DSynt-rule,which maps the semantic relation '1' thatholds between a property and an entitythat possesses this property onto the deep-syntactic relation ATTR.
The names begin-ning with a '7' are variables.
The condition' Lex: : (Sem:: (?Xsem.sem).
lex) .cat  = adj'requires that the lexicalization of the propertyis an adjective.
'?Xsem ~ ?Xdsynt' and '?Ysem?
:~ ?Ydsynt' mean that the semantic node ?Xsemis expressed at the deep-syntactic stratum by?Xdsynt, and ?Ysem by ?Ydsynt.property (Sem_DSynt) {leftside :?Xsem -i-+ ?Ysemcondit ions :Sem: :?Xsem.sem,1:ype = propertyLex: :(Sem::(?Xsem.sem).lex).cat = adjrightside:?Xds?Yds?Yds -ATTR-+?Xdscorrespondence :?Xsem ~ ?Xds?Ysem ~ ?Yds}The rule editor (l~t-~) has two main \['unctions:(i) to support the mai)~tenance (i.e.
editing andexamination) of grammatical rules, and (ii) toa graphic interface.
Obviously incorrect rulescan be detected during the syntax and the se-mantic rule checks.
The syntax check exam-ines the correctness of the notation of the state-ments in a rule (i.e.
of variables, relations, con-ditions, etc.)
-- in the same way as a conventionalcompiler does.
The semantic check examinesthe consistency of the conditions, relations, andattribute-feature pairs in a rule, the presence ofan attribute's value in the set of values that areavailable to this attribute, etc.
If, for instancein the above rule 'adj' is misspelled as 'adk' orerroneously a multiple correspondence between?gds and ?Xsem and ?Ysem is introduced, therule editor draws the developer's attention to tilerespective rror (see Figure 1).Ru le  Test ing.
Rule testing is usually a verytime consuming procedure, this is so partly be-cause tile generator needs to be started as awhole again and again, partly because tlle re-suiting structure and the trace must be carefullyinspected in order to find out whether tile rulein question fired and if it did not fire why itdid not.
The DE attempts to minimize this el'-fort.
With "drag and drop' the developer canselect one or several rules and apply them ontoan input structure (which can be presented ei-ther graphically or in a textual format; see be-low).
When a rule dropped onto the structurefires, the affected parts of the input structure aremade visually prominent, and the resulting out-put (sub)structure appears in the correspondingwindow of the slructure editor.
If a rule did notfire.
the inspector indicates which conditions oftim rule in question were not satisfied.
See alsoI)elow lhe description of the features of lhe in-spect or.261Figure 1: Error messages of the rule editor2.2 The  St ructure  Ed i torThe structure editor manages two types of win-dows: windows in which the input structures arepresented and edited, and windows in which theresulting structures are presented.
Both types ofwindows can be run in a text and in a graphicmode.
The input structures can be edited inboth modes, i.e., new nodes and new relationscan be introduced, attribute-value pairs associ-ated with the nodes can be changed, etc.In the same way as rules, structures can bechecked with respect to their syntax and se-mantics.
Each structure can be exported intopostscript files and thus conveniently be printed.2.3 The  Lex icon Ed i torThe main function of the lexicon editor is to sup-port the maintenance of the lexica.
Several typesof lexica are distinguished: conceptual lexica, se-mantic lexica, and lexico-syntactic lexica..Besides tile standard editor functions, thelexicon editor provides the following options: (i)sorting of tile entries (either alphabetically or ac-cording to such criteria as 'category'); (ii) syntaxcheck; (iii) finding information that.
is commonto several entries and extracting it into abstractentries (the result is a hierarchical organizationof the resource).
During the demonstration, eachof these options will be shown ilt action.2.4 The  InspectorThe inspector fulfils mainly three functions.First.
it presents in format ion  collected ( lur ingthe application of the rules selected by the de-veloper Io :-ill inpul  st ructure.
This  i l l fornia-tion is especially useful for generation expertswho are familiar with the internal processing.
Itconcerns (i) the correspondences tablished be-tween nodes of the input structure and nodes ofthe resulting structure, (ii) the instantiation ofthe variables of those rules that are applied to-gether to the input structure in question, and(iii) the trace of all operations performed by thecompiler during the application of the rules.Second, it indicates to which part of the inputstructure a specific rule is applicable and whatits result at the destination side is.
Third, it in-dicates which rules failed and why.
The secondand third kind of information is useful not onlyfor generation experts, but also for grammarianswith a pure linguistic background.Figure 2 shows a snapshot of the inspecLoreditor interface.
Sets of rules that can simulta:neously be applied together to an input struc-ture without causing conflicts are grouped dur-ing processing into so-called clusters.
At theleft side of the picture, we see two such clus-ters (Cluster 13 and Cluster 22).
Tile instancesof the rules of Cluster 13 are shown to the righlof the cluster pane.
The cluster pane also con-tains sets of rules that failed (in the picture, thecorresponding icon is not expanded).
The leftgraph in Figure 2 is the input structure to whichthe rules are applied.
For illustration, one ofthe rules, namely date,  has been selected for ap-plication: tile highlighted arcs and nodes of tileinput structure are the part to which date  is ap-plicable.
'Pile result of its application is tile treeat the right.
Beneath the graphical structures,we see tile correspondence between input nodes262SOUlCe s~'ucture:(  1 )Eva luat ion  F al leclC lu$1er  22  ~3 ?+ ..... , \ \ !IX .
.
.
.  "
+ ,  .... \ \?
, .
j  ~m .+ 2taq  tm, .
:  a,,: ; ,t , ii i .
i .
i .~ i+_~Jt" lRI~?
~- ,~k- - ,~+- -Bg~t I l *  \ 'TA r r~~4+ .
.
.
.
.
.
.
\ ] l i .N}~Y?P: ' - .
.4 J  .~ ~ ,.
-7" - -=- -  - -!p !e(? )
.
.
.
.
.
.
.
.
I o?
in  Ume ,~.~!e(?}?
~ :o9(.__~ .
.
.
.
.
.
.
.
.
.
.
.ocal Jo ln(5)  .
.
.
.
.
.
.
: loc ln  .spaco(6)171 (g)  .371 (9);~yerltB.~__) .
.
.
.
.
.
.
.
.
.
.
.VVOrI(I 1 ) _ __  .+.~(L0).
......
i.~7.
(!_al .................:CO(B)  ,CO(141. .
.
.
.
.
.
.
.
.
.
,,,, , ,  ,,,,,Figure 2: The inspector interface of the DE.and result nodes.
The numbers in parenthesesare for system use.2.5 The  DebuggerIn the rule editor, break points within individualrules can be set.
When the compiler reaches abreak point it stops and enters the debugger.
Inthe debugger, the developer can execute the rulesstatement by statement.
As in the inspector, theexecution trace, the variable instantiation andnode correspondences can be examined.
Duringthe demonstration, the function of the debuggerwill be shown in action.3 Cur rent  WorkDE is written in ,Java 1.2 and has been tested ona SUN workstation and on a PC pentium with300 MHz and 128 MB of RAM.Currently, the described functions of the DEare consolidated and extended bv new features.The most important of these features aa'e the im-port and the export feature.
The import featureallows for a transformation of grammatical rulesand lexical information encoded in a differentformat into the format used bv our generator.Tests are being carried out with the import ofRealPro (Lavoie ,~,: Rainbow.
1997) grammati-cal rules and lexical information (in particularubcategorization a d diathesis information) en-coded in the DATR-formalism.
The export fea-ture allows for a transformation f the rules andlexical information encoded in our format intoexternal formats.B ib l iographyBateman, J.A.
1997.
Enabling technology for mul-tilingual natural anguage generation: the KPblLdevelopment environment.
Natural Language Engi-neering.
3.2:15-55.Coch, J.
1997.
Quand l'ordinateur prend la plume :la gdn4ration de textes.
Document Numdrique.
1 :~.Iordanskaja, L.N., M. Kim, R. Kittredge, B. Lavoie~: A. Polgu6re.
1992.
Generation of Extended Bilin-gual Statistical Reports.
COLING-92.
1019 1022.Nantes.Lavoie, B.
& O. Rainbow.
1997.
A fast and portablerealizer for text generation systems.
Proceedings ofthe Fifth Conference on Applied Natural LanguageProcessing.
Washington, DC.Mel'euk, I.A.
1988.
Dependenc!l Syntaz:: Theory andPrac&ce.
Albany: State University of New YorkPress.Polgu6re, A.
1998.
La th~orie sens+textre.
I)t-alangue,.
8-9:9-30.Wanner.
L. ~ B. Bohnet.
submitted.
Inheritance inthe MTT-grammar.263
