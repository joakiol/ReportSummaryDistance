Modelling of a Gazetteer Look-up ComponentJakub PiskorskiDFKI GmbHGerman Research Center for Artificial IntelligenceStuhlsatzenhausweg 3, 66123 Saarbru?cken, GermanyJakub.Piskorski@dfki.deAbstractThis paper compares two storage mod-els for gazetteers, nameley the stan-dard one based on numbered indexingautomata associated with an auxiliarystorage device against a pure finite-statemodel, the latter being superior in termsof space and time complexity.11 IntroductionGazetteers are dictionaries that include geograph-ically related information on given places, namesof people, organizations, etc.
Several data struc-tures can be used to implement a gazetteer, e.g.hash tables, tries and finite-state automata.
Thelatter require less memory than the alternativetechniques and guarantee efficient access to thedata (1).In this paper, we compare two finite-state baseddata structures for implementing a gazetteer look-up component, one involving numbered automatawith multiple initial states combined with an ex-ternal table (2) against the method focused onconverting the input data in such a way as tomodel the gazetteer solely as a single finite-stateautomaton without any auxiliary storage devicetailored to it.
Further, we explore the impact oftransition jamming ?
an equivalence transforma-tion on finite-state devices (3) ?
on the size of theautomata.The paper is organized as follows.
Section 2introduces the basic definitions.
Section 3 focuses1This work is supported by German BMBF-fundedproject COLLATE II under grant no.
01 IN C02.on modeling the gazetteer component.
Next, insection 4 we report on empirical experiments andfinish off with conclusions in section 5.2 PreliminariesA deterministic finite-state automaton (DFSA) isa quintuple M = (Q,?, ?, q0, F ), where Q isa finite set of states, ?
is the alphabet of M ,?
: Q ?
?
?
Q is the transition function, q0is the initial state and F ?
Q is the set of finalstates.
The transition function can be extended to??
: Q ?
??
?
Q by defining ?
(q, ?)
= q, and?
(q, wa) = ?(??
(q, w), a) for a ?
?, w ?
?
?.The language accepted by an automaton M is de-fined as L(M) = {w ?
??|??
(q0, w) ?
F}.In turn, the right language of a state q is de-fined as L(q) = {w ?
??|??
(q, w) ?
F}.A path in a DFSA M is a sequence oftriples ?
(p0, a0, p1), .
.
.
, (pk?1, ak?1, pk)?, where(pi?1, ai?1, pi) ?
Q??
?Q and ?
(pi, ai) = pi+1for 1 ?
i < k. The string a0a1 .
.
.
ak is the la-bel of the path.
The first and last state in a pathpi are denoted as f(pi) and l(pi) respectively.
Wecall a path pi a cycle if f(pi) = l(pi).
Further, wecall a path pi sequential if all intermediate stateson pi are non-final and have exactly one incomingand one outgoing transition.
Among all DFSAsrecognizing the same language, the one with theminimal number of states is called minimal.Minimal acyclic DFSA (MADFSA) are themost compact data structure for storing and effi-ciently recognizing a finite set of words.
They canbe built via application of the space-efficient in-cremental algorithm for constructing a MADFSAfrom a list of strings in nearly linear time (4).
An-161other finite-state device we refer to is the so callednumbered minimal acyclic deterministic finite-state automaton.
Each state of such automata isassociated with an integer representing the cardi-nality of its right language.
An example is givenin Figure 1.
Numbered automata can be used forassigning each accepted word a unique numerickey, i.e., they implement perfect hashing.
An in-dex I(w) of a word w can be computed as follows.We start with an index I(w) equal to 1 and scanthe input w with the automaton.
While traversingthe accepting path, in each state we increase theindex by the sum of all integers associated withthe target states of transitions lexicographicallypreceding the transition used.
Once the final statehas been reached I(w) contains the unique indexof w. Analogously, for a given index i the corre-sponding word w such that I(w) = i can be com-puted by deducing the path, which would lead tothe index i.2        	  Figure 1: Numbered MADFSA accepting {start,art, card, stunt, calk}.3 Modeling of a gazetteerRaw gazetteers are usually represented by atext file, where each line represents a sin-gle entry and is in the following format:keyword (attribute:value)+.
For eachreading of an ambiguous keyword, a separate lineis introduced, e.g., for the word Washington thefollowing entries are introduced:Washington | type:city | location:USA | subtype:cap_city| full-name:Washington D.C. | variant:WASHINGTONWashington | type:person | surname:Washington| language:english | gender:m_fWashington | type:region | variant:WASHINGTON| location:USA | abbreviation: {W.A.,WA.
}2Instead of associating states with integers, each transi-tion can be accompanied by the number of different routesto any final state outgoing from the same state as the cur-rent transition, whose label are lexicographically lower thanthe current one.
Consequently, computing I(w) for w wouldconsist solely of summing over the integers associated withtraversed transitions, whereas memory requirements rise to30% (5; 2)We differentiate between open-class and closed-class attributes depending on their range of val-ues, e.g., full-name is an open-class attribute,whereas gender is a closed-class attribute.
Ascan be seen in the last reading for Washington at-tribute may be assigned a list of values.3.1 Standard ApproachThe standard approach to implementing dictio-naries presented in (5; 2) can be straightforwardlyadapted to model the architecture of a gazetteer.The main idea is to encode the keywords and allattribute values in a single numbered MADFSA.In order to distinguish between keywords and dif-ferent attribute values we extend the indexing au-tomaton so that it has n+1 initial states, where nis the number of attributes.
The right language ofthe first initial state corresponds to the set of thekeywords, whereas the right language of the i-thinitial state for i ?
1 corresponds to the range ofvalues appropriate for i-th attribute.
The subau-tomaton starting in each initial state implementsdifferent perfect hashing function.
Hence, theaforesaid automaton constitutes a word-to-indexand index-to-word engine for keywords and at-tribute values.
Once we know the index of a givenkeyword, we can access the indices of all associ-ated attribute values in a row of an auxiliary table.Consequently, these indices can be used to extractthe proper values from the indexing automaton.In the case of multiple readings an intermediatearray for mapping the keyword indices to the ab-solute position of the block containing all read-ings is indispensable.
The overall architecture issketched in figure 2.
Through an introduction ofmultiple initial states log2(card(i)) bits are suf-ficient for representing the indices for values ofattribute i, where card(i) is the size of the corre-sponding value set.It is not necessarily convenient to store theproper values of all attributes in the numbered au-tomaton, e.g.
numerical or alphanumerical datacould be stored directly in the attribute-value ma-trix or elsewhere (cf.
figure 2) if the range ofthe values is bounded and integer representationis more compact than anything else.
Fortunately,the vast majority (but definitely not all) of at-tribute values in gazetteers deployed in NLP hap-pens to be natural language expressions.
There-162Figure 2: Compact storage model for a gazetteer look-up component.fore, we can expect the major part of the entriesand attribute values to share suffixes, which leadsto a better compression rate.
Prevalent bottle-neck of the presented approach is a potentiallyhigh redundancy of the information stored in theattribute-value matrix.
However, this problem canbe partially alleviated via automatic detection ofcolumn dependency, which might expose sourcesof information redundancy.
Reccurring patternsconsisting of raw fragments could be indexed andrepresented only once.3.2 Pure Finite-State RepresentationOne of the common techniques for squeezing au-tomata in the context of implementing dictionar-ies is an appropriate coding of the input data.Converting a list of strings into a MADFSA usu-ally results in a good compression rate since manywords share prefixes and suffixes, which leads totransition sharing.
If strings are associated withadditional annotations representing certain cate-gories, e.g., part-of-speech, inflection or stem in-formation in a morphological lexicon, then anadequate encoding is necessary in order to keepthe corresponding automaton small.
A simplesolution is to reorder categories from the mostspecific to the most general ones, so that steminformation would precede inflection and part-of-speech tag.
Alternatively, we could precom-pute all possible annotation sequences and replacethem with some index.
However, the major partof a string that encodes the keyword and its tagsmight be unique and could potentially blow up thecorresponding automaton enormously.
Consideragain the entry for the morphological lexicon con-sisting of an inflected word form and its tags,e.g.
striking:strike:v:a:p (v - verb, a -present, p - participle).
Obviously, the sequencestriking:strike is unique.
Through theexploitation of the word-specific information theinflected form and its base form share one canintroduce patterns (6) describing how the lex-eme can be reconstructed from the inflected wordform, e.g., 3+e - delete three terminal charactersand append an e (striking ?
strik + e), whichwould result in better suffix sharing, i.e., the suf-fix 3+e:v:a:p is more frequently shared thanstrike:v:a:p.The main idea behind transforming a gazetteerinto a single automaton is to split each gazetteerentry into a disjunction of subentries, each rep-resenting some partial information.
For eachopen-class attribute-value pair present in the en-try a single subentry is created, whereas closed-class attribute-value pairs are merged into a singlesubentry and rearranged in order to fulfill the firstmost specific, last most general criterion.
In ourexample, the entry for the word Washington (city)yields the following subentries:Washington #1 NAM(subtype) VAL(cap_city) NAM(type) VAL(city)Washington #1 NAM(variant) WASHINGTONWashington #1 NAM(location) USAWashington #1 NAM(full-name) Washington D.C.where NAM maps attribute names to single uni-vocal characters not appearing elsewhere in theoriginal gazetteer and VAL denotes a mappingwhich converts the values of the closed-class at-tributes into single characters which representthese values.
The string #1, where # is again aunique symbol, denotes the reading index of theentry (first reading).
In case of list-valued open-class attributes we can simply add an appropriatesubentry for each element in the list.
Gazetteer re-sources converted in this manner are subsequently163compiled into an MADFSA.
In order to gain bet-ter compression rate we utilized formation pat-terns for a subset of attribute values appearingin the gazetteer entries.
These patterns resemblethe ones for encoding morphological information,but they partially rely on other information.
Forinstance, frequently, attribute values are just thecapitalized form of the corresponding keywordsas can be seen in our example.
Such a patterncan be represented by a single character.
Further,keywords and attribute values often share prefixesor suffixes, e.g., Washington vs. Washington D.C.Next, there are clearly several patterns for form-ing acronyms from the full form, e.g., US can bederived from United States, by concatenating allcapitals in the full name.
Nevertheless, some partof the attribute values can not be replaced by pat-terns.
Applying formation patterns to our sampleentry would result in:Washington #1 NAM(subtype) VAL(cap_city) NAM(type) VAL(city)Washington #1 NAM(variant) PAT(AllCapital)Washington #1 NAM(location) USAWashington #1 NAM(full-name) PAT(Identity) D.C.where PAT maps pattern names to unique char-acters.
Some space savings may be obtained byreversing the attribute values not covered by anypattern since prefix compression might be eventu-ally superior to suffix compression.The outlined method of representing agazetteer is an elegant solution and exhibitsthree major assets: (a) no external storage forattribute values is needed, (b) the automatoninvolved is not numbered which means lessspace requirement and reduced searching timein comparison to approach in 3.1, and (c) as aconsequence of the encoding strategy, there isonly one single final state in the automaton.3From the other point of view, the informationstored in the gazetteers and the fashion in whichthe automaton is built intuitively does not allowfor obtaining the same compression rates as in thecase of the automaton in 3.1.
For instance, manyentries are multiword expressions, which increasethe size of the automaton by an introduction ofnumerous sequential paths.
In order to alleviatethis problem we applied transition jamming.3The states having outgoing transitions labeled with theunique symbols in the range of NAM are implicit final states.The right languages of these states represent attribute-valuepairs attached to the gazetteer entries.3.3 Transition JammingTransition jamming is an equivalence operationon automata in which transitions on sequentialpaths are transformed into a single transition la-beled with the label of the whole path (3).
In-termediate states on the path are removed.
Thejammed automaton still accepts the same lan-guage.
We have applied transition jamming in asomewhat different way.
Let pi be a sequentialpath in the automaton and a = a0 .
.
.
ak be thelabel of pi.
We remove all transitions of pi andintroduce a new transition from f(pi) to l(pi) la-beled with a0 , i.e., ?
(f(pi), a0) = l(pi) andstore the remaining character sequence a1 .
.
.
akin a list of sequential path labels.
Once all suchlabels are collected, we introduce a new initialstate in the automaton and consecutively startingfrom this state we add all these labels to the min-imized automaton while maintaining its propertyof being minimal (4).
The subautomaton start-ing from the new initial state implements a per-fect hashing function.
Finally, the new ?jammed?transitions are associated with the correspondingindices in order to reconstruct the full label ondemand.
There are several ways of selecting se-quential paths for jamming.
Maximum-length se-quential paths constitute the first choice.
Jam-ming paths of bounded length might yield betteror at least different results.
For instance, a se-quential path whose label is a long fragment of amultiword expression could be decomposed intosubpaths that either do not include whitespaces orconsist solely of whitespaces.
In turn, we couldjam only the subpaths of the first type.Storing sequential path labels in a new branchof the automaton obviously leads to the intro-duction of new sequential paths.
Therefore, wehave investigated the impact of repetitive transi-tion jamming on the size of the automaton.
Ineach phase of repetitive jamming, a new initialstate is introduced from which the labels of thejammed paths identified in this phase are stored.4 Experiments4.1 DataWe have selected following gazetteers for theevaluation purposes: (a) UK-Postal - city namesin the UK associated with county and postal code164Gazetteer size #entries #attributes #open-class average formation patternname attributes entry length applicabilityLT?World 4,154 96837 19 14 40 99,1%PL?NE 2,809 51631 8 3 52 96,3%Mixed 6,957 148468 27 17 44 97,8%GeoNames I 13,590 80001 17 6 166 89,2%GeonNames II 33,500 20001 17 6 164 92,0%Table 1: Parameters of test gazetteers.Gazetteer Standard Pure-FSA Standard Pure-FSA& Jamming & Jamming|Q| |?| |Q| |?| |Q| |?| |Q| |?|UK-Postal 28596 53041 101145 132008 15008 (15251) 40828 (40903) 32072 (32146) 67831 (67248)LT-World 191767 266465 259666 341015 86613 (67891) 172583 (152571) 110409 (81479) 207950 (178396)PL-NE 37935 70773 60119 97035 21106 (19979) 55839 (54639) 27919 (26274) 67435 (65722)Mixed 206802 295416 299540 399286 94440 (75755) 194815 (174817) 125362 (96038) 242512 (212265)GeoNames I 280550 410609 803390 1110668 104857 (107631) 258680 (254130) 231887 (226335) 603320 (595122)GeoNames II 491744 784001 1655790 2396984 198630 (204188) 514595 (517081) 474572 (469678) 1322058 (1311564)Table 2: Size of the four types of automata.information, (b) LT?World - a gazetteer of keyplayers and events in the language technologycommunity, (c) PL-NE - a gazetteer of MUC-typePolish named entities, (d) Mixed - a combinationof (b) and (c), (e) GeoNames - an excerpt of thehuge gazetteer of geographic names informationcovering geopolitical areas, including name vari-ants, administrative divisions, different codes, etc.Table 1 gives an overview of our test data.44.2 EvaluationSeveral experiments with different set-ups wereconducted.
Firstly, we compared the standardwith the pure-FSA approach.
Next, we repeatedthe experiments enhanced by integration of sin-gle transition jamming.
The results are given intable 2.
The numbers in the columns concern-ing transition jamming correspond to jamming ofmaximum-length sequential paths and jammingof whitespace-free paths (in brackets).The increase in physical storage in the case ofnumbered automata has been reported to be inrange of 30-40% (state numbering) and 60-70%(transition numbering) (1).
Note at this point thatautomata are usually stored as a sequence of tran-sitions, where states are represented only implic-itly (7).
Considering additionally the space re-quirement for the auxiliary table in the standardapproach for storing the indices for open-class at-tribute values, it turns out, that this number os-cillates around m ?
n ?
log256n bytes, where mis the number of open-class attributes and n is4The last column gives the ratio of open-class attributevalues for which formation patterns can be applied to the to-tal number of open-class attribute values in a given gazetteer.the number of entries in the gazetteer.
Summingup these observations and taking a look at the ta-ble 2, we conclude without naming absolute sizeof the physical storage required that the pure-FSAapproach turns out to be the superior when ap-plied to our test gazetteers.
However, some re-sults, in particular for the Geo-Names, where |?|is about three time as big as in the automatonin the standard approach, indicate some pitfalls.Mainly due to the fact that some open-class at-tributes in GeoNames are alphanumeric stringswhich do not compress well with the rest.
Sec-ondly, some investigation reveal the necessity ofadditional formation patterns, which could workbetter with this particular gazetteer.
Finally, theGeoNames gazetteer exhibits highly multilingualcharacter, i.e., the size of the alphabet is larger.As expected, transition jamming works betterwith the Pure-FSA approach, i.e., it reduces thesize of |?| by a factor of 1.35 to 1.9, whereasin the other case the gain is less significant.Transition jamming constrained to witespace-freepaths yielded better compression rates, in partic-ular for gazetteers without numerical data (see ta-ble 2).
Obviously, transition jamming is penal-ized through the introduction of state numberingin some part of the automaton and indexing cer-tain edges, but the overall size of the automatonis still smaller than the original one.
In the caseof the LT-World gazetteer, there were circa 20000sequential paths in the automaton.
Consequently,we removed circa 134 000 transitions.Next, we studied the profitability of repeti-tive transition jamming.
Figure 3 presents two165Figure 3: Impact of repetitive transition jamming on the size of states and transitions (Standard-B andPure-FSA-B stands for repetitive jamming on whitespace-free paths).diagrams which depict how this operation im-pacts the size of the automaton for the LT-Worldgazetteer.
As can be observed, a more than 2-stage repetitive jamming does not significantlyimprove the compression rate.
Interestingly, wecan observe in the left diagram that for both ap-proaches the repetitive jamming of maximum-length sequential paths leads (after stage 3) toa greater reduction of |Q| than jamming ofwhitespace-free paths.
The corresponding num-bers for other gazetteers with respect to repetitivejamming were of similar nature.
Reversing labelsof sequential paths and reversing open-class at-tribute values not covered by any formation pat-tern results in insignificant difference (1-2%) inthe size of the automata.5 Conclusions and Future WorkIn the context of modeling a compact datastructure for implementing a gazetteer empiri-cal experiments reveal that a pure-FSA approach,in which all data is converted into a singleMADFSA, turns out to outperform the standardapproach based on an indexing numbered au-tomaton and an auxiliary table.
At least in thecase of data we are dealing with benefits are ob-servable, since major part of the attribute valuesare contemporary word forms.
A further inves-tigation revealed that transition jamming reducesthe size of the automata significantly.
However,for storing gazetteers containing large number of(alpha)numerical data the standard approach orother techniques might be a better choice.
There-fore, the evaluation results are only meant to con-stitute a handy guideline for selecting a solution.There are number of interesting issues that canbe researched in the future, e.g.
investigation ofjamming paths of bounded length or deploymentof finite-state transducers for handling the sametask.ReferencesCiura, M.G., Deorowicz, S.: How to squeeze a lex-icon.
Software - Practice and Experience 31(11)(2001) 1077?1090Kowaltowski, T., Lucchesi, C.L.
: Applications ofFinite Automata Representing Large Vocabularies.TR DCC-01/92, University of Campinas, Brazil(1992)Beijer, N.D., Watson, B., Kourie, D.: Stretching andJamming of automata.
In: Proceedings of SAICSIT2003, RSA (2003) 198?207Daciuk, J., Mihov, S., Watson, B., Watson, R.: In-cremental Construction of Minimal Acyclic FiniteState Automata.
Computational Linguistics 26(1)(2000) 3?16Gran?a, J., Barcala, F.M., Alonso, M.A.
: Compilationmethods of minimal acyclic automata for large dic-tionaries.
LNCS - Implementation and Applicationof Automata 2494 (2002) 135?148Kowaltowski, T., Lucchesi, C.L., Stolfi, J.: Finite Au-tomata and Efficient Lexicon Implementation.
TRIC-98-02, University of Campinas, Brazil (1998)Daciuk, J.: Experiments with automata compres-sion.
In Yu, S., Paun, A., eds.
: Proceedingsof CIAA 2000, London, Ontario, Canada, LNCS2088, Springer (2000) 113?119166
