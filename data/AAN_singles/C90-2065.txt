AN IMPLEMENTATION OF  FORMAL SEMANTICS  IN  THEFORMALISM OF  RELAT IONAL DATABASES.Claire VANDERHOEFTD~partement de Linguistique G~n(rale, CP175UniversitY, Libre de Bruxelles50, avenue Roosevelt1050 BruxellesBelgiqueE-mail: XOOIO6@BBRBFUOI.bitnetABSTRACTThis paper presents an implementationof formal semantics as described in Keenanand Fa!tz's Boolean Semantics for NaturalLangt~age \[4\].
The main characteristic of thisimplementation is that it avoids the intermediatestep of translating NL into a formal language,such as an extended version of predicatecalculus.
My choice of not using anyintermediate language, which Montague alreadysuggested in Universal Grammar \[5\], makesmy implementation free of the problems relatedto the syntax of such a language like bindingthe variables and resolving scope ambiguities.On the other hand, not translating NL into anintermediate language requires everydenotat ion  (i.e.
semantic value) to beexplicitly and accurately represented in adatabase.0.
INTRODUCTION.In extensional semantics, eachdenotation corresponds to an object of theworld?
The world is the set of all thedenotations.
In the implementation that I shallpresent in this paper, the world will berepresented by means of a database, moreprecisely a relational database.The structure of the database isdesigned in such a way that it makes explicitthe semant ic  type of each denotation.Although I will not always stick to the standardversion of formal semantics when assigningsemantic types to syntactic ategories, I aim ataccounting for the same range of phenomenathat formal semantics deals with.The paper will be divided into fiveparts.
First, I shall trace back research resultsto which my contribution can be related.
Next,I describe the database.
Then, I explain howthe principles used to design the database meetthe requirements of formal semantics.
Thefourth part is concerned with entailment whilethe last part mainly shows how one proceeds tointerpret sentences.1.
BACKGROUND.The topics which this work isconcerned with have mainly been studied fromthree points of view.A first class of studies covers theproblems encountered in trying to translate NLinto a formal anguage.
On the one hand, thereis theoretical research aiming at such atranslation, like PATR \[7\].
On the other hand,various kinds of inaccuracies of NLtranslations into logical form in view ofaccessing databases have been discussed, see\[6\] for example.A second field of research that need bementioned is concerned with NL interfaces.Famous systems are described in \[9\] and \[1\].There are important differences between thesesystems and my work since I am not aiming ataccessing a knowledge base at all.
Thedatabase that I use encodes NL meanings and itdoes so according to linguistic constraints.Traditionally, the database rather encodes acertain knowledge independent of the languageused to talk about it.
Problems pecific to NLinterfaces can be found in \[3\] and \[81.From another point of view, there areworks which are concerned with the questionof the organisation of the knowledge baseconstituted by NL meanings, see \[2\].
Thedifference between my approach and ones like\[2\], is that I am sticking to the theory of formalsemantics.
Consequently, I do not (yet)address questions about the structure of thei 377lexicon nor do I treat pragmatic phenomena likecommon sense inferences.2.
THE DATABASE.The structure of the database isdependent on the semantic properties of thedenotations.
More specifically, the structure ofthe database is dependent on the fact thatdenotations are classified into different ypesand specifically recognized as the denotationsof such and such syntactic ategories.Each denotation of each constituent is avalue in the database.
Some of the denotationsresult from the composition of otherdenotations.
Which denotations can becomposed with which other ones are propertiesof their type.
These properties are not encodedas such.
The overall structure of the databaseshows how the semantic types combine witheach other.
Consequently, complexdenotations (denotations of complexexpressions) are represented by a tomicvalues, but the fact that they are complex isdeduced from the structure of the database.Consider the case of noun phrase denotations.The denotation of a determiner combines withthe denotation of a common noun.
Thiscombination yields the denotation of a nounphrase, i.e., an atomic value in the database.The representation of this denotation isconnected  (in the sense of relationaldatabases) to the representations of thedenotations of the noun and of the determiner.Therefore, it can be recognized as a complexdenotation.The design of the database is dependenton the fact that we need an explicit means torecognize the type of each denotationrepresented in it.
Within the formalism ofrelational databases, defining types ofdenotations amounts to defining a relation foreach such type.A relation is formally defined as an n-tuple of formal attributes.
By fo rmala t t r ibute  is meant a way to identify theattribute (a position in the relation or a name)and the definition of the set of its possiblevalues.
The extension of a relation is the setof all well-formed n-tuples of attribute valuesfor the corresponding formal attributes.
(Anill-formed n-tuple has at least one non-possiblevalue for a formal attribute.
)Relations each represent a type.
Eachof them has (at least) one attribute whosedomain is the set of denotations of thecorresponding type.
For example, the relationwhich corresponds to the type of noun phraseshas an attribute whose values are noun phrasedenotations.
Each denotation is an atomicvalue of the attribute of the relation.Furthermore, ach such value actually belongsto an n-tuple belonging to the extension of therelation.
(This is due to the fact that the set-theoretical model of the world, i.e.
thedatabase, contains all the denotations built onan ontology constituted by a set of entities, IJ,and the truth values.
)The structure of the database capturesthe (degree of) complexity of a denotation byconnecting the relation which represents thesemantic type assigned to the correspondingsyntactic ategory with the relations whichrepresent the semantic types assigned to theconstituents of a complex expression of thesame syntactic category.
For example, aproper name has a complex denotation becauseit belongs to the syntactic ategory of nounphrases.
Therefore, its denotation belongs tothe extension of the relation representing thetype of noun phrases.
Since there are nounphrases constituted by a determiner and acommon noun, the relation representing thetype of noun phrases actually connects to therelations representing respectively the types ofdeterminers and of common nouns.
Hence, thestructure of the relation associated tothe type ofnoun phrases and, in particular, of propernames, shows that they are complexexpressions.To the extent hat we need to define theconnections which show the respectivecomplexity of each type of denotation, arelation is actually defined for each semantictype.
For example, we shall define relationslike Tn, Tdet, Tnp, Tvp standing, respectively,for the type of denotations of common nouns,determiners, noun phrases, verb phrases.Still, there is a problem in definingconnections.
The problem is that, in formalsemantics, expressions of different syntacticcategories can have the same semantic type.For example, common nouns and intransitiveverbs share the same type.
Now, thecomplexity of the denotation of a noun phraseis encoded in the fact that it is connected to thedenotation of a common noun.
On thecontrary, the denotation of a verb phrase mustbe connected to the denotation of a simple verband to the denotations of complements.
Ingeneral, we not only need to define relations ascounterparts of semantic types, but, whereexpressions of different syntactid categoriescollapse into the same type, their types mustnevertheless correspond to different relations.3 7~ 2With respect o the example, the relation Tv(the type; of simple verbs) cannot be the sameas the relation Tn, because Tvp connects to Tvwhile Tnp connects to Tn.Notice that it is true of all the syntacticcategories that they have one and only onerelation as semantic ounterpart.
Sometimeshowever, the relation could be defined as thesum of several relations.
For example thecomplex relation Tvp has several mutuallyexclusive sets of connections.
It connects tothe relation Tv and the relation Tnp, or to therelation Tv and the relation Tpp or the relationTvp and the relation Tpp, etc.Let me illustrate these principles byshowing the definition of two relations.
TheTrip relation is defined as a triple of formalattributes:Tnp= <\[np\],Tn,Tdet>where it is understood that the possible valuesof the first attribute are noun phrasedenotations, the possible values of the secondattribute are pointers to noun denotations, andthe possible values of the third attribute arepointers to determiner denotations.
Notice thatproper names have dummy values for Tn andTdet.Relations which encode simple types,i.e.
types of lexical categories, cannot beencoded the same way as relationscorresponding to complex expressions: theyhave no connections since they do not have anyconstituents.
Instead, they are generallydefined by pairs of attributes, the first oneinstantiates to a denotation of the type inquestion and the second one to the symbolicexpression which is the item.
For example,Tn, which represents the type of simplecommon ouns, will be defined by the pair:Tn = <\[n\],"n">where it is understood that the possible valuesof the first attribute are common noundenotations while the possible values of thesecond attribute are the nouns themselvesconsidered as symbolic expressions.
Asexpected, the role of the second attribute in arelation such as Tn is to anchor the denotationof simple expressions into the lexicon.In summary, the design of the databasemeets the two following principles:- i) relations that correspond totypes of lexicalcategories have two attributes: the first one hasas domain the set of denotations of all thelexical items which belong to the lexicalcategory in question, and the second one has asdomain those items themselves regarded assymbolic expressions.- ii) relations that correspond to types of non?lexical categories have one attribute whosedomain is the set consisting of all thedenotations of all these expressions.Moreover, they have other attributes, one foreach of their constituents.
These attributeshave as domain the extension of the relationscorresponding to the types of theseconstituents.These principles ensure that denotationsare submitted to the principle ofcompos i t iona l i ty  which states that thedenotation of a complex expression is acompound of the denotations of' itsconstituents.
(It is important to understand thatwe want to be able to check that denotations aresubmitted to compositionality.)
Howcompositionality constrains the definitions ofthe relations will now be illustrated on Tn andTnp.In the extension of a relation like Tn, allthe pairs of values have the property that thefirst value is the denotation of the second one.We augment the schema of the database withthe constraint on Tn that: \[\["n"\]\] = [n\].
In theextension of relations like Tnp, all the n-tuplesare required to satisfy the constraint that thevalue of the first attribute, i.e.
the npdenotation, is the denotation of an np whoseconstituents, i.e.
the determiner and the noun,have as respective denotations the onesconnected toby the remaining attributes of then-tuple.
For Tnp, we augment the schema ofthe database with the constraint that:C(Tn,Tdet) = \[rip\], where C operates thecomposition of its arguments.3.
THEORETICAL PRINCIPLES MET BYTHE DATABASE.Let us summarize how principles offormal semantics are taken into account indesigning the database:i) we restrict ourselves to extensionalsemantics.
Therefore, every denotation mustbe represented and must correspond to oneobject of the (unique) world.ii) the word is the smallest unit that receives adenotation, the sentence is the biggest one.iii) all the expressions that are well-formedsyntactic onsUtuents have a denotation.iv) all the denotations are encoded in theextension of a specific relation, that is, all thedenotations have a type defined i1~ ~:i~e database.v) denotations of complex expressions areconnected tothe denotations of the constituentsthat are contained in those expressions.3 379The theory of databases tates thatrelational databases are logically equivalent to afirst order language whose predicates are therelations.
In this first order language, theextensions of the predicates are the sets oftuples of argument values on which the"relation-predicates" evaluate to true.Therefore, the fact that the database isinterpreted as a first order language nsures thatall the denotations have a type and their type isexplicitly attached to them.4.
ENTAILMENT.What kinds of things are the denotationsis indispensable to know in order to definewhat it means for an expression to entailanother expression (of the same category).Let us distinguish between attributesthat point to other relations, attributes that areinstantiated to symbolic expressions andattributes that take as values the denotations ofthe type represented by the relation they areattributes of.
Only the last kind of attributes areconcerned with entaihnencAccording to formal semantics, attributevalues that represent denotations are sets.
(Donot forget hat they are atomic from the point ofview of the structure of the database.)
Some(primitive) entities are implicitly defined.Then, all the denotations (except for thedenotations of sentences) are sets of entities, orsets of sets of entities, or functions whosedomain and range are such kinds of sets.
Letme use the meta-variable X which ranges overthe sets of entities, while Y ranges over sets ofsets of entities.
The set structure of the worldis the following:Tn XTrip (rip's in subject position) yTnpconnection(complement np's) X -> XTv XTvp XTdet X-> YTprep Y -> (X -> X)Tpp X -> XTadv X -> XWhat is entai lment,  in theimplementation?
First, for expressions whichdenote functions, the fact that a certainexpression entails another one is given by thefact that the respective xpressions in whicheach of them appears (with other constituents)entail each other.
For example, we will not saythat "most" entails "some", but rather that"most Xs" entails "some Xs".
This being so,functions can be represented by symbols, eithernames (the lexical items) or connections.Now, representing functions by symbols ratherthan by the sets of pairs argument-resultimplies that entailment cannot be defined onthe relations representing functional types.For relations not corresponding tofunctional types, i.e.
Tn, Tnp, Tv and Tvp,entailment is defined by means of set inclusion.Let tl and t2 be two tuples of Tnp, tl entails t2if the attribute value which is the np denotationin tl is a subset of the attribute value which isthe np denotation i  t2.
Take another example.Assume that Tvp has four attributes: the firstone is the denotation of the vp, e.g.
eat anapple, the third one is the denotation of the verbwithout the complement whose denotation isthe value of the fourth attribute, i.e.
eat :Tvp(\[eat an apple\],W,\[eat\], \[anapple\])Now, anything that has necessarily theproperty of eating an apple has the property ofeating.
So, for Tvp=(y 1,W,y2,Z), we set thegeneral constraint that y2 ~ yl.
We will saythat y2 D yl is an axiom that belongs to thedefinition of the Tvp relation.
Crucially,objects that would not meet the axiomscharacterizing the extension of the relation towhich they belong cannot correspond to objectsof the world.
In the example, if eating an appledoes not entail eating, then the two expressionsfail to have acceptable denotations.5.
THE SKETCH OF A SEMANTICINTERPRETOR AND SENTENCEDENOTATIONS.The denotations of sentences are truthvalues.
I have not insisted on the way sentencedenotations are encoded but one might expectthat there is a relation Ts = <\[s\],Tnp,Tvp>.Although this agrees with the principles of thedatabase, it is not the solution that I haveadopted.Assume that there is no Ts relation.
Wemust nevertheless ensure that the interpretorwill provide sentences with the truth valuesthey denote.
Furthermore, we would like toshow how these truth values depend on thedenotations of the constituents of the sentencebecause we want to represent howcompositionality s respected.The basic operation for interpreting anexpression, that is for assigning it itsdenotation, is the selection of values in thedatabase.
How is the interpretor meant toselect denotations actually encoded in thedatabase?38o 4The interpretor proceeds in parallel witha syntactic parser which yields (at least) theconstituent structure of the expressions.Imagine that the information that the parsersends Io the interpretor is the context-free ruleused by the parser in parsing such expressionto be interpreted.
For example, suppose thatthe rule:np -> det, nparses the given expression.
And suppose thatthe interpretor knows that the category np is thecategory of an expression of the type of nounphrases, hence of the relation Tnp.
Likewise,n corresponds to Tn and det to Tdet.Knowing that the above context-freerule applies, the interpretor can perform theselection of a tuple in the Tnp relation.
Theschema of the selection to perform will bewritten: Z Tn,Tdet (Tnp).
The specific selectionto perform in order to interpret a specific nounphrase requires the interpretor to instantiate theparameters of the selection, Tn and Tdet, to thedenotations of the noun and the determiner,respectively.
The output of the instantiatedselection:Z \[men\],\[mostl(Tnp)is:Tnp( \ [most  men\ ] , \ [men\ ] , \ [most \ ] )  ^\[most\](\[men\]) = \[most men\]Notice that I use a logical notation to note theoutput of the interpretor.
This output is, itself,a re lat ional  database containing onerelation, the extension of which is constitutedby one tuple which satisfies the secondconjunct of the formula.
In the example, thetuples consists of attribute values such that\[most\](\[men\]) = \[most men\]is true.The way the interpretor selects thedenotation of a noun phrase can be easilygeneralized to the other types of expressions.
Iimmediately turn to the case of sentences.Let us assume that there is only one ruleto parse sentences, namely :S -> np,vpSince there is no Ts type, there is no selection.Nevertheless, the pseudo-schema of selectioncorresponding tothis rule is defined byI; Tvp.Vnp 0(to use a notation coherent with the one usedfor the: other selections).
The denotation thatsuch a "selection" will yield is a formulainterpretable as the truth value denoted by thesentence.
I shall represent this formula by ~.The way in which (~ is assumed toyield either truth value conforms to the accountof standard formal semantics: it consists inchecking whether the property, i.e.
the set,denoted by the verb phrase is a member of theset of properties denoted by the noun phrase.The outputs of Z Tvp,Tnp 0. are morethan just ~ .
Indeed, in order to show thatcompositionality is respected, we must showexplicitly what are the denotations ofconstituents which combine to yield the truthvalue.
The latter denotations involvedenotations of their own constituents.Therefore, the denotation of a sentence will belogically represented by an assertion.
Thisassertion is the logical conjunction of thedenotations of all the constituents of thesentence.
For example, the sentence: Mostmen eat an apple denotes:Tdet("most") A Tn(yl,"men") ATnp(y2,yl,"most") A \[most\](yl) = (y2) ATv(y3,"eat",l) ^TdetCa") ^  Tn(y4,"apple") ^Tnp(y5,y4,"a") A \[a\](y4) = (y5) aTvp(y6,"eat",y3,y5) A y3 _D y6 Ay6 ~; y2where ~ = y6 e y2.It is easy to predict that sentenceshaving the same constituent structure as Mostmen eat an apple will each be interpreted by anassertion of the same form as this one.The computational counterpart of suchan assertion is a database contained in theoriginal database.
(We call such a database aview in the computational terminology.)
Insummary, all the sentences that share the samesyntactic structure denote assertions equivalentto databases having the same structure (butdifferent extensions, of course).
Thus, thedenotation of a sentence has iconic propertiesand its structure is of the same kind as that ofthe representation f the world.
We shall saythat it is a possible fact, where "fact" meansthat the denotation of the sentence is a part ofthe world, while "possible" means that itsstructure conforms to that of the world.Since ~ has been defined independentlyfrom any relation of the database, falsesentences can have the same kind of denotationas do true sentences?
By this, I want toemphasize the fact that, when ~ does not yieldthe value true, it does not follow that theassertion is ill-formed.
On the contrary, thefact that a false sentence fails to denote the5 381actual state of the world does not prevent itfrom denoting a possible fact as long as itsdenotation is a well-fomled assertion.6.
CONCLUSION.I have presented the main principles ofmy implementation f formal semantics.
If Ihad more space to do so, I could now developtwo crucial issues: I could show how theprocess of interpreting an expression parallelsits syntactic parsing and prove that he structureof the database allows to cover the same rangeof phenomena asformal semantics does.Other important issues that must bedealed with include further phenomena relatedto coordination, egation, passive and otherconstructions in which quantifiers appear tohave a non trivial behavior.
I am currentlypursuing these developments on the basis ofempirical linguistic data.
My hypothesis i  thatthey can be accounted for without changing thedesign of the system presented so far, and evenwithout augmenting it much.Let me finally stress that it is useful to-know that he database islogically equivalent toa first-order language.
Indeed, this fact gives asynthetic view of the behavior of the systemand allows us to envisage further developmentsin the direction of non-monotonic logic.3- Jones, K.S.
(1984).
Natural Language andDatabases, Again.
Proceedings of Coling84.182-183.4- Keenan, E. and Leonard M. Faltz.
(1984).Boolean Semantics for Natural Language.
D.Reidel Piblishing Company, Vol 23.5- Montague, Richard.
(1974b).
UniversalGrammar.
In R. Thomason (ed.)
FormalPhilosophy.
Selected Papers of RichardMontague.
Yale University Press.
New Havenand London.
222-246.6- Moore, R.C.
(1982).
Natural-LanguageAccess to Databases-- Theoretical/TechnicalIssues.
Proceedings of the 20th AnnualMeeting of the Association for ComputationalLinguistics.
44-45.7- Rosenschein, S.J.and Schieber, S.M.(1982).
Translating English into LogicalForm.
Proceedings of t he 20th AnnualMeeting of the Association for ComputationalLinguistics.
1-8.8- Templeton, M., & Burger, J.
(1983)Problems in Natural-Language Interface toDBMS with examples from EUFID.Proceedings of the Conference on AppliedNatural Language Processing.
3-16.9- Woods, W.A.
(1978).
Semantics andQuantification I Natural Language QuestionAnswering.
In M Yovits (ed) Advances inComputers.
Vol.
17, New York.
AcademicPress.
2-64.ACKNOWLEDGMENTS.The author is thankful to Prof. M.Dominicy for providing the opportunity toconduct this research.
This text presentsresearch results which were supported by theBelgian National incentive-program forFundamental research in artificial intelligenceinitiated by the Belgian State, Prime Minister'sOffice, Science Policy Programming Thescientific responsability is assumed by theauthor.REFERENCES.1- Grosz, B.J., Appelt, D.E., Martin, P.A.and Pereira, F.C.N.
(1987).
TEAM: Anexperiment in the Design of TransportableNatural-Language Interfaces.
ArtificialIntelligence.
Vol.
32, No2, May 1987.
173-244.2- Hobbs, J.R. (1984).
Building a LargeKnowledge Base for a Natural LanguageSystem.
Proceedings of Coling84.
283-286.382 6
