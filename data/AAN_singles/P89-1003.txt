A THREE-VALUED INTERPRETAT ION OF  NEGATION INFEATURE STRUCTURE DESCRIPT IONSAnuj DawarDept.
of Comp.
and Info.
ScienceUniversity of PennsylvaniaPhi ladelphia,  PA 19104K.
Vi jay-ShankerDept.
of Comp.
and Info.
ScienceUniversity of DelawareNewark, DE 19718Apri l  20, 1989ABSTRACTFeature structures are informational elements that havebeen used in several inguistic theories and in computa-tional systems for natural-language processing.
A logi-caJ calculus has been developed and used as a descriptionlanguage for feature structures.
In the present work, aframework in three-valued logic is suggested for definingthe semantics of a feature structure description language,allowing for a more complete set of logical operators.
Inparticular, the semantics of the negation and implicationoperators are examined.
Various proposed interpretationsof negation and implication are compared within the sug-gested framework.
One particular interpretation of thedescription language with a negation operator is describedand its computational spects tudied.1 Introduction and BackgroundA number of linguistic theories and computational ap-proaches to parsing natural anguage have employed thenotion of associating informational dements, called featurestructures, consisting of features and their values, withphrases.
Rounds and Kasper \[KR86, RK86\] developed alogical calculus that serves as a description language forthese structures.Several researchers have expressed a need for extendingthis logic to include the operators of negation and impli-cation.
Various interpretations have been suggested thatdefine a semantics for these operators (see Section 1.2), butnone has gained universal acceptance.
In \[Per87\], Pereiraset forth certain properties that any such interpretationshould satisfy.In this paper we present an extended logical calculus,with a semantics in three-valued logic (based on Kleene'sthree-valued logic \[Kh52\]), that includes an interpretationof negation motivated by the approach given by Kart-tunen \[Kar84\].
We show that our logic meets the condi-tions stated by Pereira.
We also show that the three-valuedframework is powerful enough to express most of the pro-posed definitions of negation and implication.
It thereforemakes it possible to compare these different approaches.1.1 Rounds-Kasper  Log icIn \[Kas87\] and \[RK86\], Rounds and Kasper introduced alogical formalism to describe feature structures with dis-junctive specification.
The language is a form of modalpropositional logic (with modal operator ": ') .In order to define the semantics of this language, fea-ture structures are formally defined in terms of acyelicfinite automata.
These are finite-state automata whosetransition graphs are acyclic.
The formal definition maybe found in \[RK86\].A fundamental property of the semantics i that the setof automata satisfying a given formula is upward-closedunder the operation of subsumption.
This is important,because we consider a formula to be only a partial descrip-tion of a feature structure.
The property is stated in thefollowing theorem IRK86\]:Theorem 1.1 A C 8 if and only i/for every formula, ~,if A ~ ~ then B ~ cb.1.2 The  Prob lem o f  Add ing  Negat ionSeveral researchers in the area have suggested that thelogic described above should be extended to include nega-tion and implication.Karttunen \[Kar84\] provides examples of feature struc-tures where a negation operator might be useful.
For in-stance, the most natural way to represent the number andperson attributes of a verb such as sleep would be to say18that it is not third person singular ather than expressingit as a disjunction of the other tive possibilities.
Kaxttunenalso suggests an implementation technique to handle neg-ative information.Johnson \[Joh87\], defined an Attribute Value Logic(AVL), similar to the Rounds-Kasper Logic, that includeda classical form of negation.
Kasper \[Kas88\] discusses aninterpretation f negation and implication in an implemen-tation of Functional Unification Grammar \[Kay79\] that in-cludes conditionals.
Kasper's semantics i  classical, buthis unification procedure uses notions similar to those ofthree-valued logic a .One aspect of the classical approach is that the prop-erty of upward-closure under subsumption is lost.
Thusthe evaluation of negation may not be freely interleavedwith unification 2In \[Kas88\], Kasper localized the effects of negationby disallowing path expressions within the scope of anegation.
This restriction may not be linguistically war-ranted as can be seen by the following example fromPereira \[Per87\] which expresses the semantic onstraintthat the subject and object of a clause cannot be coref-erential unless the object is a reflexive pronoun:oh3 : type : ref lez ive V -~(subj : re f  ~ obj : re f )Moshier and Rounds \[MR87\] proposed an intuitionisticinterpretation of negation that preserves upward-closure.They replace the notion of saris/action with one of model-theoretic/arcing an described in Fitting \[Fit69\].
They alsoprovide a complete proof system for their logic.
The satis-liability problem for this logic was shown to be PSPACE-complete.1.3 Out l ine  of  th is  PaperIn the following section we will present our proposed solu-tion in a three-valued framework, for defining the seman-tics of feature structure descriptions including negation 3.This solution is a formalization of the notion of negationin Karttunen \[Kar84\].
In Section 3 we will show thatthe framework of three-valued logic is flexible enough toexpress most of the different interpretations of negationmentioned above.
In Section 4 we will show that the satis-fiability problem for the logic we propose is NP-complete.lsee Section 3.42see Pereira \[Per87\] p.10063 We shall concentrate only on the problem of extending the logicto include the negation operator, and later in Section 3.4 discuss Implication.2 Feature Structure Descriptions withNegationWe will now present our extended version of the Rounds-Kasper logic including negation.
We do this by givingthe semantics of the logic in a three-valued setting.
Thisprovides an interpretation of negation that is intuitivelyappealing, formally simple and computationally noharderthan the original Rounds-Kasper logic.With each formula we associate the set (Tset) of au-tomata that satis/y the formula, a set (Fset) of automatathat contradict it and a set (Uset) of automata which nei-ther satisfy nor contradict i 4.
Different interpretations ofnegation are obtained by varying definitions of what con-stitutes "contradiction."
In the semantics we will define,we choose a definition in which contradiction is equivalentto essential incompatibility 5.
We will define the Tset andthe Fset so that they are upward-closed with respect osubsumption for all formulae.
Thus, we avoid the prob-lems associated with the classical interpretation of nega-tion.
In our logic, negation isdefined so that an automaton,4 satisfies -,~b if and only if it contra?1icts ~.2.1 The  SyntaxThe symbols in the descriptive language, other than theconnectives :, v, A,-, and ~ are taken from two primitivedomains: Atoms (A}, and Labels (L).The set of well formed formulae (W), is given by: NIL;TOP; a; 1 : @; ~ A ~b; @ V ~b; "-~ and pl ~- P2, where a E A;1E L; ~,~ E W and Pa,P2 E L ' .2.2 The Semant icsFormally, the semantics i defined over the domain of par-tial functions from acycLic finite automata ~ to boolean val-ues.Def in i t ion 2.1 An acyclic finite automaton is a 7-tupleA =< Q, E, r, 6, qo, F, A >, where:1.
Q is a non-empty finite set (of states),~.
E is a countable set (the alphabet),4A similar notion was used by Kasper \[Kas88\], who introducesthe notion of compatibility.
We shall comps.re this approach withou~ in greeter detail in Section 3.4.Sln general, a feature structure is incompatible with a formula i?the information it contains is inconsistent with that in the formula.We will distinguish two kinds of incompatibility.
A feature struc-ture is essentiall~/incompatible with a formula if the information init contradicts the information in the formula.
It is trivially incom-patible with the formula if the inconsistency is due to an excess ofmformtstion within the formula itself.Sin this paper we will not consider cyclic feature structures193.
r is a countable set (the output alphabet),4.
6 : Q ?
E -" Q is a finite partial/unction (the tran-sition function),5. qo ~ Q (the initial state),6.
F C Q (the set of final states),7.
A : F "-* r is a total function (the output function),8. the directed graph (Q, E)  is acyclic, where pEq iff.for some 1 6 Z, 6(p, l) = q,9.
.
for  every q ~ Q, there exists a directed path from qoto q in ( Q, E),  and10.
for every q ~ F,  6(q, I) is not defined for any I.A formula ~ over the set of labels L and the set ofatoms A is chaxacterized by a partial function:~r, : {'41"4 =< Q, L, A, 6, q0, F, A >} "7" {True,  False}~#,('4) is True iff "4 satisfies ~b.
It is False i f ' 4  contra-dicts ~b r and is undefined otherwise.
The formal definitionis given below.Def in i t ion  2.2 For any formula ?~, the partial func-tion .~'?
over the set of acyclic finite automata, "4 =<Q, L, A, 6, qo, F, A >, is defined as follows:1. if ~ = NIL  then~( '4 )  = True  for all "4;~.
if ~ = TOP then~(,4)  = False for all .4;3. if O m a for some a ~ A then~( .
,4 )  = Trueif .4 is atomic and A(q0) = a:7:(.4) = Falseif "4 is atomic and A(qo) = bfor some b, b # a (see Note ~.
)~'~( "4 ) is undefined otherwise;4. if @ f l : @t for some l ~ L and @x 6 W then~r ~ ( "4 ) __ ~r ~, ( "4 / l ) i f .Af t  is defined.
(see Note 3.
):F,('4) is undefined otherwise;rand therefore it satisfies the formula "-4,5. if ~ = ~a A ~2 for some ~bi , ~2 E W then.~'+('4) = Trueif~r+,('4) = True  and j r ( '4 )= Truey+('4) = Falseif ~r~,('4) = False or ~ '~( '4 )  - False~( '4 )  is undefined otherwise ;6.7+('4)7~('4)Y+('4)V ~b2 for some ~,,~2 6 W then?
.~ Trueif.~'~, ('4) = True  or 9r?2('4) = True= Falseif ~x( '4  ) = False and F~2('4 ) = Falseis undefined otherwise ;7. if  ~b -- "~1 for some ~h E W then:~( '4)  = True if Y:~, ('4) = False~r,#('4) = False if gr~x ('4) = True~( '4 )  is undefined otherwise ;8. i f?= m~+('4)~(  "4)7+('4)~ I~ for some pa,p2 E L" then= Trueif 6(qo,p,) and 6(qo,p2) are definedand 6(q0, pl) ---- 6(qo,p2)= Falseif "4/pa and "4/P2 are both definedand are not unifiableis undefined otherwise (see Note 4.
).Notes :I.
We have not included an implication operator inthe formal language, since we find that defining im-pllcation in terms of negation and disjunction (i.e~b =~ ~b ~ -~@ V ~b) yields a semantics for implica-tion that corresponds exactly to our intuitive un-derstanding of implication.2.
As one would expect, an atomic formula is satisfiedby the corresponding atomic feature structure.
Onthe other hand, only atomic feature structures aredefined as contradicting an atomic formula.
Thougha complex feature structure is clearly incompatiblewith an atomic formula we do not view it as beingessentially incompatible with it.
An  interpretationof negation that defines a complex feature structureas contradicting a (and hence satisfying -,a) is alsopossible.
However, our definition is motivated bythe linguistic intention of the negation operator asgiven by Karttunen \[Kar84\].
Thus, for instance, werequire that an automaton satisfying the formulacase : ".dative have an atomic value for the casefeature.3.
In J. above, we state that: ~'~('4) = j r ' ,  ('4/1) i f .Aftis defined.
When "4/l is defined, ~t  ('4/I) may still204.be True, False or undefined.
In any of these cases,~#(.A) -- ~ I ( .A / I )  s. ~r~(.A) is not defined if .Allis not defined.
Not only is this condition requiredto preserve upward-closure, it is also linguisticallymotivated.Here again, we could have said that a formula of theform I : ~bz is contradicted by any atomic featurestructure, but we have chosen not to do so for thereasons outlined in the previous note.We have chosen to state that the set of automatathat are incompatible with the formula pz ~ p2 is notthe set of automata for which 6(qo,pl) and 6(qo,p~)axe defined and 8(q0,pz) ~ 6(q0,p2), since such anautomaton could subsume one in which 6(qo,px) =6(q0,p~).
Thus, we would lose the property ofupward-closure under subsumption.
However, anautomaton, .4, in which 6(q0,pl) and 8(qo,p2) aredefined and .A/p1 is not unifiable 9 with ~4/p2 can-not subsume one in which 6(q0,pa) = 6(q0,p2).2.2.1 Upward-C losureAs has been stated before, the set of automata that satisfya given formula in the logic defined above is upward-closedunder subsumption.
This property is formally stated be-low.Theorem 2.1 Given a formula ~b and two acyclie finiteautomata .4 and IJ, if ~( .A)  is defined and .4 C B theny.
(B) ~, defined and ;%(B) = 7.
(~4).Proof:The proof is by induction on the structure of the formula.The details may be found in Dawar \[Daw88\].2.3 ExamplesWe now take a look at the examples mentioned earlier andsee how they are interpreted in the logic just defined.
Thefirst example expressed the agreement attribute of the verbsleep by the following formula:agreement : "~(person : third A number : singular) (1)This formula is satisfied by any structure that has an agree-ment feature which, in turn, either has a person featurewith a value other than third or a number feature with avalue other than singular.
Thus, for instance, the followingtwo structures atisfy the given formula:agreement: \[person: second\]SEquality here is strong equality (i.e.
if .g,x(A\]l) is undefinedthen so is .~',(.4).
)9Two automata re not unifiable if and only if they do not havea least upper bound\[ \[p r,on \] \]agreement : number : pluralOn the other hand, for a structure to contradict formula(1)it must have an agreement feature defined for both personand number with values third and singular espectively.
Allother automata would have an undefined truth value forformula(1).Turning to the other example mentioned earlier, theformula:obj : type : reflexive x/"~(subj : ref  ~ obj : re f) (2)is satisfied by the first two of the following structures, butis contradicted by the third (here co-index boxes are usedto indicate co-reference or path-equivalence).\[obj.
\[type-reflexive \]\]\[ obj: \[ re f : \ [ \ ]  \] \]subj : \[ ref  : \ [ \ ]  \] j\] type : reflezivesubj: \[ re1: \ [ \ ]  \]3 Comparison with Other Interpreta-tions of NegationAs we have stated before, the semantics for negation de-scribed in the previous section is motivated by the dis-cussion of negation in Karttunen \[Kar84\], and that it isclosely related to the interpretation of Kssper \[Kas88\].
Inthis section, we take a look at the interpretations of nega-tion that have been suggested and how they may be relatedto interpretations in a three-valued framework.3.1 Classical Negat ionBy classical negation, we mean an interpretation i whichan automaton .4 satisfies a formula -~b if and only if it doesnot satisfy ~b.
This is, of course, a two-valued logic.
Suchan interpretation is used by Johnson in his Attribute-ValueLanguage \[Joh87\].
We can express it in our framework bymaking ~'~ a total function such that wherever 9re(A) wasundefined, it is now defined to be False.Returning to our earlier example, we can observe thatfor formula(1) the structure\[ agreement :  \[ person: third\]  \]has a truth value of .false in the classical semantics buthas an undefined truth value in the semantics we define.This il lustrates the problem of non-monotonicity in theclassical semantics ince this structure does subsume onethat satisfies formula (1).213.2 In tu l t ion is t i c  Log icIn \[MR87\], Moshier and Rounds describe an extension ofthe Rounds-Kasper logic, including an implication opera-tor and hence, by extension, negation.
The  semantics isbased on intnitionistic techniques.
The notion of satisfyingis replaced by one of forcing.
Given a set of automata/C,a formula ~b, and .A such that .4 ~ /C, .A forces in IC "~b(,4 hn -~b) if and only if for all B ~/C such that A ~ B, Bdoes not force ~b in/~.
Thus, in order to find if a formula,~b, is satisfiable, we have to find a set \]C and an automaton~4 such that forces in IC ~.Moshier and Rounds consider a version in which forcingis always done with respect to the set of all automata,i.e.
IC*.
This means that the set of feature structuresthat satisfy --~b is the largest upward-closed set of featurestructures that do not satisfy @ (i.e.
the set of featurestructures incompatible with ~b).
We can capture this inthe three-valued framework described above by modifyingthe definition of ~r?
to make it False for all automata thatare incompatible (trivially or essentially) with ~b (we callthis new function ~r~).
The definition of ~'~ differs fromthat of ~r+ in the following cases:?
~b=a~r?
(A) = Trueif A is atomic and A(q0) = a~r~(A) = False otherwise~'~(~t) = Trueif ~'~(.A) ---- True:~(A)  = Falseif Al l  is defined andvs(wl/!
~_ B =~ ~,,(B) = False)~r~(.A) is undefined otherwise.~'~(Ft) = Trueif ~+,(.,4) = True and .~+~(.A) = True:r~,(A) = Falseif VB(A E_ S =~~r~t(B) # True or Y;2(B) # True)~(A)  is undefined otherwise ;?
~=~v~27; ( ,4 )  = Tr .eif ~,( .A )  = True or ~r~a(A ) = True~(A)  = Falseif ?B(.A C B~'; , (B)  # True and Jr;.
(B) # True)~r~(.4) is undefined otherwise ;?
~ = Pl ~ P27; ( ,4 )  = Trueif 8(qo, p,) and ~(qo, p2) are definedand ~(qo,pl) = 6(qo,p2)F~(A) = Falseif A/p1 and .A/p2 are both definedand are not unifiable or if .4 is atomic~'~(.4) is undefined otherwise .In the other cases, the definition of ~'~ parallels thatof 7+.To il lustrate the difference between ~'~ and 3r~, wedefine the following (somewhat contrived) formula:cb = (11 :av l2  : a) AI2 : bWe also define the automaton,4 = \[11 : b\]We can now observe that F~(A) is undefined but 3r~(A) =False.
To see how this arises, note that in either system,the truth value of ,4 is undefined with respect to each ofthe conjuncts of ?i.
This is so because ,4 can certainly beextended to satisfy either one of the conjuncts, just as itcan be extended to contradict either one of them.
But, for~c'~#(.A) to be False, .4 must have a truth value of Falsefor one of the conjuncts and therefore .~'?
(.4) is undefined.On the other hand, since .4 can never be extended to sat-isfy both conjuncts of ~ simultaneously, it can never beextended to satisfy ~b.
Hence .4 is certainly incompatiblewith ~, but because this incompatibil ity is a result of theexcess of information in the formula itself, we say that itis only trivially incompatible with ~.To see more clearly what is going on in the above ex-ample, consider the formula -~b and apply distributivityand DeMorgan's law (which is a valid equivalence in thelogic described in the previous section, but not in the in-tuitionistic logic of this section) which gives us:-,~b = (-'la : a A "./2 : a) V -~12 : bWe can now see why  we do not wish .4 to satisfy -~b, whichwould be the case if .~'~#(~4) were False.One justification given for the use of forcing sets otherthan /C* is the interpretation of formulae such as -~h :NIL.
It is argued that since h : NIL  denotes all featurestructures that have a feature labeled h, -,h : NIL  shoulddenote those structures that do not have such a feature.However, the formula -~h : NIL  is unsatisfiable both inthe interpretation given in the last section as well as in the/C* version of intuitionistic logic.
It is our opinion that theuse of negation to assert the non-existence of features isan operation distinct from the use of negation to describevalues mad should be described by a distinct operator.
Thepresent work attempts to deal only with the latter notion ofnegation.
The authors expect to present in a forthcomi~agpaper a simple extension to the current semantics that willdeal with issues of existence of features.223.3 Kar t tunen 's  Imp lementat ion  of  Negat ionAs mentioned earlier, our approach was motivated byKarttunen's implementation as described in \[Kax84\].
Inthe unification algorithm given, negative constraints areattached to feature structures or automata (which them-selves do not have any negative values).
When the featurestructure is extended to have enough information to deter-mine whether it satisfies or falsifies I?
the formula then theconstraints may be dropped.
We feel that our definitionof the Uset elegantly captures the notion of associatingconstraints with automata that do not have sufficient in-formation to determine whether they satisfy or contradicta given formula.3.4 Kasper ' s  In terpreta t ion  of  Negat ion  andCond i t iona lsAs mentioned earlier, Kasper ~Kas88\] used the operationsof negation mad implication in extending Functional Unifi-cation Grammar.
Though the semantics defined for theseoperators is a classical one, for the purposes of the algo.rithm Kasper identified three chases of automata ssoci-ated with any formula: those that satisfy it, those that areincompatible with it and those that are merely compatiblewith it.
We can observe that these are closely related toour Tact, Fset and User respectively.
For instance, Kasperstates that an automaton .A satisfies a formula f : v if itis defined for f with value v; it is incompatible with f : vif it is defined for f with value z (z ~ v) and it is merelycompatible with f : v if it is not defined for f. In three-valued logic, we incorporate these notions into the formalsemantics, thus providing aformal basis for the unificationprocedure given by Kasper.
Our logic also gives a moreuniform treatment to the negation operator since we haveremoved the restriction that disallowed path equivalencesin the scope of a negation.4 Computat ional  IssuesIn this section, we will discuss some computational s-pects related to determining whether a formula is satisfi-able or not.
We will Show that the satisfiability problem isNP-complete, which is not surprising considering that theproblem is NP-complete for the logic not involving nega-tion (Rounds-Kasper logic).The NP-hardness of this problem is trivially shownif we observe that for any formula, ~b, without negation,Tset(?)
is exactly the set of automata that satisfy ~ ac-cording to the definition of satisfaction given by Roundsl?It is not clear whether falsification is equivalent to incomp~-ibility or only essential incompatibility, but from the examples in-volvin~ ease and agreement, we believe that only emJential incom- patibihty is intended.and Kasper \[KR86, RK86\] in their original logic.
Sincethe satisfiabllity problem in that logic is NP-complete, thegiven problem is NP-haxd.In order to see that the given problem is in NP, weobserve that a simple nondeterministic algorithm 11 can begiven that is linear in the length of the input formula ~band that returns a minimal automaton which satisfies ~b,provided it is satisfiable.
To see this, note that the size(in terms of the number of states) of a minimal automa-ton satisfying ~b is linear in the length of ?
and verifyingwhether a given automaton satisfies ~b is a problem linearin the length of ~b and the size of the automaton.
Thedetails of the algorithm can be found in Dawar \[DawS8\].5 ConclusionsA logical formalism with a complete set of logical operatorshas come to be accepted as a means of describing featurestructures.
While the intended semantics of most of theseoperators i well understood, the negation and implicationoperators have raised some problems, leading to a vari-ety of approaches in their interpretation.
In the presentwork, we have presented an interpretation that combinesthe following advantages: it is formally simple as well asuniform (it places no special restriction on the negationoperator); it is motivated by the linguistic applications offeature structures; it takes into account he partial na-ture of feature structures by preserving the property ofmonotonicity under unification and it is computationallyno harder than the Rounds-Kasper logic.
More signifi-cantly, perhaps, we have shown that most existing inter-pretations of negation can also be expressed within three-valued logic.
This framework therefore provides a meansfor comparing and evaluating various interpretations.References\[Daw88\]\[Fit69\]Anuj Dawar.
The Semantics of Negation in Fea-ture Structure Descriptions.
Master's thesis, Uni-versity of Delaware, 1988.Melvin Fitting.
Intuitionistic Logic and ModelTheoretic Forcing.
North-Holland, Amsterdam,1969.\[Joh87\] Mark Johnson.
Attribute Value Logic and theTheory of Grammar.
PhD thesis, Stanford Uni-versity, August 1987.\[K~84\] Lauri Karttunen.
Features and values.
In Pro.ceedings of the Tenth International Conference onComputational Linguistics, July 1984.llthis algorithm assumes that the se?
of atoms is finite.23\[Kas87\] Robert T. Kasper.
Feature Structures: A LogicalTheory with Application to Language Analysis.PhD thesis, University of Michigan, 1987.\[Kas88\] Robert T. Kasper.
Conditional descriptions inFunctional Unification Grammar.
In Proceedingsof the ~6th Annual Meeting o\] the Association/orComputational Linguistics, pages 233-240, June1988.\[Kay79\] M. Kay.
Functional grammax.
In Proceedings ofthe Fifth Annual Meeting of the Berkeley Linguis-tics Society, 1979.\[Kle52\] S.C. Kleene.
Introduction to Metamathematics.Van Nostrand, New York, 1952.\[KR86\] Robert T. Ka~per and William C. Rounds.
Alogical semantics for feature structures.
In Pro-ceedings o/the ~th  Annual Meeting o.
( the Asso-ciation for Computational Linguistics, 1986.\[MR87\] M. Drew Moshier and William C. Rounds.
Alogic for partially specified data structures.
InACM Symposium on the Principles o~ Program.ruing Languages, pages 156-167, ACM, 1987.\[Per87\] Fernando C. N. Pereira.
Grammars and logicsof partial information.
In Jean-Louis Lassez, ed-itor, Proceedings o\] the 4th International Con-ference on Logic Programming, pages 989-1013,May 1987.IRK86\] William C. Rounds and Robert T. Kasper.A complete logical calculus for record struc-tures representing linguistic information.
InIEEE Symposium on Logic in Computer Science,pages 34-43, IEEE Computer Society, June 1986.24
