Customizable Descriptions of Object-Oriented ModelsBeno i t  Lavo ieCoGenTex, Inc.840 Hanshaw RoadIthaca, NY 14850, USAbeno i tOcogentex ,  comOwen RambowCoGenTex, Inc.840 Hanshaw RoadIthaca, NY 14850, USAowen~cogentex, comEhud Re i te rDepar tment  of Computer  ScienceUniversity of AberdeenAberdeen AB9 2UE, Scotlandere i te r~csd ,  abdn.
ac .
uk1 In t roduct ion :  Ob jec t  Mode lsWith the emergence of object-oriented technologyand user-centered software ngineering paradigms,the requirements analysis phase has changed in twoimportant ways: it has become an iterative activity,and it has become more closely linked to the designphase of software ngineering (Davis, 1993).
A re-quirements analyst builds a formal object-oriented(OO) domain model.
A user (domain expert) vali-dates the domain model.
The domain model under-goes subsequent evolution (modification or adjust-ment) by a (perhaps different) analyst.
Finally, thedomain model is passed to the designer (system ana-lyst), who refines the model into a OO design modelused as the basis for implementation.
Thus, we cansee that the OO models form the basis of many im-portant flows of information in OO software ngi-neering methodologies.
How can this informationbest be communicated?It is widely believed that graphical representationsare easy to learn and use, both for modeling and forcommunication among the engineers and domain ex-perts who tqgether develop the OO domain model.This belief is reflected by the large number of graph-ical OO modeling tools currently in research labsand on the market.
However, this belief is not accu-rate, as some recent empirical studies how.
For ex-ample, Kim (1990) simulated a modeling task withexperienced analysts and a validation task with so-phisticated users not familiar with the particulargraphical language.
Both user groups showed se-mantic error rates between 25% and 70% for theseparately scored areas of entities, attributes, andrelations.
Relations were particularly troublesometo both analysts and users.
Petre (1995) comparesdiagrams with textual representations of nested con-ditional structures (which can be compared to OOmodeling in the complexity of the "paths" throughthe system).
She finds that "the intrinsic difficulty ofthe graphics mode was the strongest effect observed"(p.35).
We therefore conclude that graphics, in or-der to assure maximum communicative efficiency,needs to be complemented by an alternate view ofthe data.
We claim that the alternate view shouldbe provided by an explanation tool that representsthe data in the form of a fluent English text.
Thispaper presents uch a tool, the MODELEXPLAINER,or MODEx for short, and focuses on the customiz-ability of the system.1Automatically generating natural-language descrip-tions of software models and specifications i  nota new idea.
The first such system was Swartout'sGIST Paraphraser (Swartout, 1982).
More recentprojects include the paraphraser in ARIES (Johnsonet al, 1992); the GEMA data-flow diagram describer(Scott and de Souza, 1989); and Gulla's paraphraserfor the PPP system (Gulla, 1993).
MoDEx certainlybelongs in the tradition of these specification para-phrasers, but the combination of features that wewill describe in the next section (and in particularthe customizability) is, to our knowledge, unique.2 Features  o f  MoDExMODEx was developed in conjunction with Ander-sen Consulting, a large systems consulting company,and the Software Engineering Laboratory at theElectronic Systems Division of Raytheon, a largeGovernment contractor.
Our design is based on ini-tial interviews with software ngineers working on aproject at Raytheon, and was modified in responseto feedback during iterative prototyping when thesesoftware ngineers were using our system.?
MoDEx output integrates tables, text generatedautomatically, and text entered freely by the user.Automatically generated text includes paragraphsdescribing the relations between classes, and para-l(Lavoie et al, 1996) focuses on an earlier version ofMoDEx which did not yet include customization.253graphs describing examples.
The human-anthoredtext can capture information ot deducible from themodel (such as high-level descriptions ofpurpose as-sociated with the classes).?
MoDEx lets the user customize the text plans atrun-time, so that the text can reflect individual useror organizational preferences regarding the contentand/or layout of the output.?
MoDEx uses an interactive hypertext interface(based on standard HTML-based WWW technol-ogy) to allow users to browse through the model.?
Input to MoDEx is based on the ODL standard e-veloped by the Object Database Management Group(Cattell, 1994).
This allows for integration withmost existing commercial off the shelf OO model-ing tools.
Some previous ystems have paraphrasedcomplex modeling languages that are not widelyused outside the research community (GIST, PPP).?
MODEX does not have access to knowledge aboutthe domain of the OO model (beyond the OO modelitself) and is therefore portable to new domains.3 A MoDEx Scenar ioSuppose that a university has hired a consultingcompany to build an information system for its ad-ministration.
Figure 1 shows a sample object modelfor the university domain (adapted from (Cattell,1994, p.56), using the notation for cardinality ofMartin and Odell (1992)) that could be designed bya requirements analyst.Figure 1: The University OoO DiagramOnce the object model is specified, the analyst mustvalidate her model with a university administrator(and maybe other university personnel, such as data-entry clerks); as domain expert, the university ad-ministrator may find semantic errors undetected bythe analyst.
However, he is unfamiliar with the"crow's foot" notation used in Figure 1.
Instead,he uses MoDEx to generate fluent English descrip-tions of the model, which uses the domain termsfrom the model.
Figure 2 shows an example of adescription generated by MoDEx for the universitymodel.
Suppose that in browsing through the model254using the hypertext interface, the university admin-istrator notices that the model allows a section tobelong to zero courses, which is in fact not the caseat his university.
He points out the rror to the an-alyst, who can change the model.Suppose now that the administrator finds the textsuseful but insufficient.
To change the content of theoutput texts, he can go to the Text Plan Configu-ration window for the text he has been looking at,shown in Figure 3.
He can add to the text plan spec-ification one or more constituents (paragraphs) fromthe list of pre-built constituents ( hown in the lowerright corner of Figure 3).
After saving his modifi-cations, he can return to browsing the model andobtain texts with his new specifications.File Edit  V iew Go Bookmarks OptionsDirectory ~indow Help[List of Classes] [List of Models] [Reload Models][Configuration] ~ [About ModeIF.xolame,]Description of the Class" Section'General Observations:A Section must be taught by exactly one F$ofesso, andmay ~clong to zezo oz more Cqu~e s. It must be tak?oby one ca more Students and may have at most oneTA.Examples:For example, Sectl is a Section and is taught by theprofessor Jolm Brown.
It belongs to two Courses,Math165 and Math201, and is take~ by two Students.Frank Belfo~d and Sue Jones.
It has the TA Sally Blake.Figure 2: Description Used for Validation.
.
.
.
.
.
.
.
.
.
.
,-.,m~ .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
= ....................
I;|?i[J lc Edll ~ew Go Bookmarks ~ Jans  Dlr?c~r/ ~qndowHelpText Plsm Conflgm'aflonTat  Plmv V -'~'4'~"-(2~ ?.
.
, :L  ~.
.c r=, .on  o= ?= ?
.=.
, c~s  ]0 z ~ .
~  ~.
:  ~===~==)i - -=-  ~ ' ~  ~omponentI .
- -  [ ~ose~butes3peretions:telafions-Teble:~elQ~ons-Te)d-:xemples-Long:xemples-Shod~ ~  ~ ~'~ " Rle-ReferenceFigure 3: Text Plan Configuration I terfaceOnce the model has been validated by the univer-File Edit View Go Bookmarks OptionsDirectory Window _Help[List of  Classes] [List of Model.~] [Reload Models][Co:ffi~otation] [H~ [About ModelEx~01amer] [Q3_~]~==:==~=?~=~?=??
?~==::~==~==~:~:~====~==?=~::::::::::::::::::::::::::::~=~====~Business Class: "Section'Purpose/Role :Course un i t  a student can take.Ed11.
Pu~o.~eAttributes:ii Am~u~ JiDeser~ t~n .
iiTY~e .................. ii i ................... n~ber  iSecUo n T'--"T""'7""" identifier ~#1NTF~3  ................. ]~ '~::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::Edit AttdbuteeRelationships:A Section must be taught by exactly one Ptofee~ot andmay belong to zero or more Cotuses.
It must b e takenby one or more Stud~nt.~ and may have at most one TADserver which receives requests via a standard WebCGI interface and returns HTML-formatted ocu-ments which can be displayed by any standard Webbrowser.
The documents generated by MoDEx arealways generated ynamically in response to a re-quest, and are composed of human-authored text,generated text and/or generated tables.
The mainrequests are the following:ModEx mRequestiFigure 4: Description Used for Documentationsity administrator, the analyst needs to document i ,including annotations about the purpose and ratio-nale of classes and attributes.
To document it, sheconfigures an output text type whose content andstructure is compatible with her company's tan-dard for OO documentation.
An example of a de-scription obtained in modifying the text plan of Fig-ure 3 is shown in Figure 4.
(This description followsa format close to Andersen Consulting's tandardfor documentation.)
This description is composedof different types of information: text generatedautomatically (section Relationships), text enteredmanually by the analyst because the information re-quired is not retrievable from the CASE tool objectmodel (section Purpose), and tables composed bothof information generated automatically and informa-tion entered manually (section Attributes).
The ana-lyst then saves the text plan under a new name to useit subsequently for documentation purposes.
Notethat while the generated ocumentation is in hyper-text format and can be browsed interactively (as inthe I-DOC system of Johnson and Erdem (1995)), itcan of course also be printed for traditional paper-based documentation and/or exported to desktoppublishing environments.4 How MODEX WorksAs mentioned above, MODEx has been developedas a WWW application; this gives the system aplatform-independent hypertext interface.
Figure 5shows the MoDEx architecture.
MoDEx runs as aFigure 5: MODEx Server Architecture?
Text Plan Editing.
This generates an HTML doc-ument such as that shown in Figure 3 which allowsa user to load/edit/save a text plan macro-structurespecification.
A representation corresponding tothe text plan of Figure 3 is shown in Figure 6.Once edited, this representation can be stored per-manently in the library of text plans and can beused to generate descriptions.
In this representa-tion, User Text indicates free text entered for a title,while Relations- Text and Examples-Short are schemanames referring to two of the eight predefined textfunctions found in a C++ class library supplied withMoDEx.alidation-Class)Ti~e,User TextTi~e Schema ~itle Schemai I I IUser Text Relations-Text User T xt Examples-ShortFigure 6: Macro-Stucture for Text Plan of Figure 3?
Object Model Loading.
This loads an object modelspecification and generates a document displayingthe list of classes found in the model.?
Description Generation.
This returns a descriptionsuch as that shown in Figures 2 or 4.
To generate adescription, the text planner creates a text structurecorresponding to the text plan configuration selectedby the user.
This text structure is a constituencytree where the internal nodes define the text orga-nization, while the bottom nodes define its content.The text content can be specified as syntactic repre-255sentations, as table specification and/or as human-authored text for the titles and the object model an-notations.
The text structure is transformed by thesentence planner which can aggregate the syntacticrepresentations (cf.
conjunctions and in descriptionon Figure 2) or introduce cue words between con-stituents (cf.
expression For example on Figure 2).The resulting text structure is then passed to thetext realizer which uses REALPRO (Lavoie and Ram-bow, 1997), a sentence realizer, to realize each indi-vidual syntactic representation in the text structure.Finally, a formatter takes the final text structure toproduce an HTML document.?
Object Model Annotation Editing.
This allows theuser to edit human-authored annotations of the ob-ject model.
This editing can be done via links la-belled Edit ... which appear in Figure 4.
Thesehuman-authored texts are used by some of the pre-defined text functions to generate the descriptions.5 OutlookMoDEx is implemented in C++ on both UNIXand PC platforms.
It has been integrated withtwo object-oriented modeling environments, theADM (Advanced Development Model) of the KBSA(Knowledge-Based Software Assistant) (Benner,1996), and with Ptech, a commercial off-the-shelfobject modeling tool.
MoDEx has been fielded at asoftware ngineering lab at Raytheon, Inc.The evaluation of MoDEx is based on anecdotaluser feedback obtained uring iterative prototyping.This feedback showed us that the preferences regard-ing the content of a description can vary dependingon the organization (or type of user).
The controlthat MoDEx gives over the text macro-structure isone step toward satisfying different ypes of text re-quirements.
We are currently extending MoDEx inorder to give the user a better control over the textmicro-structure, by replacing the set of predefinedC++ text functions with customizable ASCII spec-ifications.
This feature should make MODEx moreeasely portable among different ypes of users.
Inaddition, we intend to port MODEX to at least twonew OO modeling environments in the near future.AcknowledgmentsThe first version of MoDEx for ADM was supported byUSAF Rome Laboratory under contract F30602-92-C-0015.
General enhancements to the linguistic machin-ery were supported by SBIR F30602-92-C-0124, awardedby USAF Rome Laboratory.
Current work on MODExis supported by the TRP-ROAD cooperative agreementF30602-95-2-0005 with the sponsorship of DARPA andRome Laboratory.
We are thankful to K. Benner, M.DeBellis, J.
Silver and S. Sparks of Andersen Consult-ing, and to F. Ahmed and B. Bussiere of Raytheon Inc.,for their comments and suggestions made during the de-velopment of MoDEx.
We also thank T. Caldwell, R.Kittredge, T. Korelsky, D. McCullough, A. Nasr and M.White for their comments and criticism of MoDEx.ReferencesBenner, K. (1996).
Addressing complexity, coordina-tion, and automation i  software development with theKBSA/ADM.
In Proceedings of the Eleventh Knowledge-Based Software Engineering Conference (KBSE-96),Syracuse, NY.Cattell, R. G. G., editor (1994).
The Object DatabaseStandard: ODMG-93.
Morgan Kaufman Publishers, SanMateo, CA.Davis, A. M. (1993).
Software Requirements.
Prentice-Hall, Inc., Upper Saddle River, N J, revision edition.Gulla, J.
(1993).
Explanation Generation in InformationSystems Engineering.
PhD thesis, Norwegian Instituteof Technology.Johnson, W. L. and Erdem, A.
(1995).
Interactive x-planation of software systems.
In Proceedings of theTenth Knowledge-Based Software Engineering Confer-ence (KBSE-95), pages 155-164, Boston, Mass.Johnson, W. L., Feather, M. S., and Harris, D. R.(1992).
Representation a d presentation f requirementsknowledge.
IEEE Transactions on Software Engineer-ing, pages 853-869.Kim, Y.-G. (1990).
Effects of Conceptual Data ModelingFormalisms on User Validation and Analyst Modelingof Information Requirements.
PhD thesis, University ofMinnesota.Lavoie, B., Rainbow, O. and Reiter, E. (1996).
TheMODELEXPLAINER.
In Demonstration Notes of Interna-tional Natural Language Generation Workshop (INLG-96), Hermonceux Castle, Sussex, UK.Lavoie, B. and Rainbow, O.
(1997).
A Fast and PortableRealizer for Text Generation Systems.
In Proceedings ofthe Fifth Conference on Applied Natural Language Pro-cessing (A N L P- 97) , Washinghton,DC..Martin, J. and Odell, J.
(1992).
Object-Oriented Analy-sis and Design.
Prentice Hall, Englewood Cliffs, NJ.Petre, M. (1995).
Why looking isn't always seeing:Readership skills and graphical programming.
Commu-nications of the ACM, 38(6):33-42.Scott, D. and de Souza, C. (1989).
Conciliatory planningfor extended escriptive texts.
Technical Report 2822,Philips Research Laboratory, Redhill, UK.Swartout, B.
(1982).
GIST English generator.
In Pro-ceedings of the National Conference on Artificial Intelli-gence.
AAAI.256
