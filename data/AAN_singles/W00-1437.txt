YAG : A Template-Based Generator for Real-T ime Systems*Susan W. McRoy Songsak Channarukul{ mcroy, songsak, syali} @cs.
uwm.
eduSyed S. AllNatural Language and Knowledge Representation Research Group~.
: ..... aht~pg/ .
/ t igger .cs ,  uwmaedu/7n lk r rgElectrical Engineering and Computer Science DepartmentUniversity of Wisconsin-Milwaukee1 IntroductionYAG (Yet Another Generator) is a real-time,general-purpose, template-based generation systemthat will enable interactive applications to adaptnatural language output to the interactive contextwithout requiring developers to write all possibleoutput strings ahead of time or to embed extensiveknowledge of the grammar of the target languagein the application.
Currently, designers of interac-tive systems who might wish to include dynamicallygenerated text face a number of barriers; for exam-ple designers must decide (1) How hard will it beto link the application to the generator?
(2) Willthe generator be fast enough?
(3) How much lin-guistic information will the application eed to pro-vide in order to get reasonable quality output?
(5)How much effort will be required to write a genera-tion grammar that covers all the potential outputs ofthe application?
The design and implementation ofYAG is intended to address each of these concerns.In particular, YAG offers the following benefits toapplications and application designers:Suppor t  for Underspec i f ied  Inputs  YAG sup-ports knowledge-based systems by acceptingtwo types of inputs: applications can eitherprovide a feature structure (a set of feature-value pairs) or provide a syntactically under-specified semantic structure that YAG will maponto a feature-based representation for realiza-tion.
YAG also provides an opportunity for anapplication to add syntactic constraints, suchas whether to express a proposition as a ques-tion rather than a statement, as a noun-phraserather than as a sentence, or as a pronoun ratherthan a full noun phrase.Speed YAG has been designed to work in real-time.
The YAG ten,plate processing enginedoes not use search to realize text.
thus thespeed of generation depends oi1 the complex-ity of the template that the application selects.
?This  work ha~s been supported by the National ScienceFoundation, under grants, I RI-97016 l 7 and ,,I,RI=9523666, andby lntel Corporation.not on the size of the grammar.
Short, sim-ple utterances are always realized faster thanlonger ones.
(In many other approaches, peedis a function of the grammar size, because itis searched uring realization (Elhadad, 1992;Elhadad, 1993; Mann, 1983; McKeown, 1982;McKeown, 1985).
)Robustness  In YAG, the realization of a templatecannot fail.
Even if there are inconsistencies inits input (such as subject-verb disagreement),the generator will produce an understandable(if not grammatical) output.
Applications thatneed to enforce grammaticality can use theYAG preprocessor to detect missing or conflict-ing features and to supply acceptable values.The preprocessor makes use of a declarativespecification of slot constraints, based on anattribute grammar (Channarukul et al, 2000).This specification is modifiable and extensibleby the application designer.Express iveness  YAG offers an expressive languagefor specifying a generation grammar.
This lan-guage can express units as small as a word o1"as large as a document equally well.
Unlikethe typical template-based approach, the valu(~sused to instantiate slots are not limited to sim-ple strings, but can include a variety of struc-tures, including conditional expressions oi ref-erences to other templates.
(This paper willinclude a more detailed discussion in the nextsection.)
Any declarative grammar, such as onebased oll feature structures, would be express-ible in YAG.Coverage  The coverage of YAG depends oil thenumber of templates that have been defined inits specification language.
In theory, any sen-tence may be realized given an appropriate tem-plate.
In practice, an application builder mustbe concerned with whether it is possible to re-use existing templates or whether it is necessaryto create new ones.
YAG simplifies the taskof specifying a generation grammar in severalways :264e It provides an expressive, declarative lan-guage for specifying templates.
This lan-guage supports template re-use by allowingtemplate slots to be filled by other tem-plates.o It includes a general-purpose, template-based grammar for a core fragment of En-The  Cond i t ion  rule is similar to the cond state-ment in LISP, returning a result when one of itsantecedent conditions is true.The  Inser t ion  rule returns the result of interleav-ing the results of two template rules.The  A l te rnat ion  rule selects one alternativeglish.
These templates ;include .default val-ues for many of the ?slots, so an applicationmay omit a feature if it has no informa-tion about it.
Currently, the YAG distribu-tion includes about 30 domain-independentsyntactic templates, along with some se-mantic templates.o It offers a tool for helping people edit tem-plates and see what text would be realizedfrom a template, given a set of values forits slots.YAG itself comes in two versions, one in CLISP,one in JAVA, both of which run on a wide variety ofplatforms, including Unix and Windows 95/98.In the remainder of this paper, we will describeYAG's template specification language, and someexamples that illustrate the use of YAG from anapplication.
More details can be found in (Chan-narukul, 1999).2 YAG's  Template  Spec i f i ca t ionLanguageA template is a pre-defined form with parametersthat are specified by either the user or the applica-tion at run-time.
In YAG, each template is com-posed of two main parts: template slots and tem-plate rules.
Template slots are parameters or vari-ables that applications or users can fill with values.Template rules express how to realize a surface con-stituent.
Templates are realized as strings by replac-ing slots in each rule with values from the applicationand then evaluating the rule.
YAG template rulessupport nested and recursive templates.
There areten types of template rules.The  Str ing rule returns a pre-defined string as aresult.The  Evaluat ion rule evaluates the value of a rein-plate slot?
If the value of the slot is anotherfeature structure, then that structure is evalu-ated recursively.
If the value of the specifiedslot is not a feature structure, this rule returnsthe value without any further processing.The  Template  rule returns the result of instanti-ating a template with a given set of slot-vahle?
pairs.The  I f  rule is similar to an (f-then statement inmost prograanming_languages, r turning a re-sult when {he antecedent of the rule is true.template rule to be realized based on a uniformprob'ability-dis~ri-bution~-t hereby adding varietyinto a generated text.The  Punctuat ion  rule concatenates a punctua-tion mark to the specified end of adjacentstrings.
The position of a punctuation markis either le f t ,  r ight ,  or both.The Concatenat ion  rule appends the the resultof one template rule with the results of a secondrule.The  Word  rule is used in association with pre-defined functions and a lexicon to realize expres-sions that should not be "hard-coded" in a tem-plate, such as the inflected forms of a word fromthe dictionary or the cardinal/ordinal numbercorresponding to an integer.Figure 1 shows the template rules that wouldbe used to express propositions of the formhas-property(agent, pname, pval), such ashas-property(John, age, 20), which corre-sponds to John's age is 20).
These rules are part of((COND (IF (equal pname nil)(EVAL agent))(IF (not (equal pname nil))((C0NCAT (EVAL agent)(S " 's" ) )(EVAL pname))))(TEMPLATE verb-form((verb "be")(person (agent person))(number (agent number))(gender (agent gender))(tense present)) )(COND (IF (not (equal property nil))(EVAL property))(IF (not (equal pval nil))(EVAL pval)))(PUNC " " left))Figure 1: Examples of Template Rules265the 0BJECT-PROPERTY semantic template.
The rulesuse the template slots agent,  pname,  pval,  andproperty and the template rule types IF, CONCAT,S, TEMPLATE, COND, EVAL, and  PUNC.
If agent  ="John", pname = "age",  and pval  = "20", thesurface text will be "John's age is 20.
"((EVAL member)(TEMPLATE verb-form((process "be")(person (member person))(number (member number))3 Examples  of  YAG in useYAG provides facilities for generation from twotypes of inputs, a feature structure or a knowledgerepresentation.
The latter is accomplished by theuse of a knowledge representation specific compo-nent that must be defined for the particular knowl-edge representation language to be used.3.1 Generat ion  f rom a KnowledgeRepresentation StructureExample 1, shows a knowledge representation i putto YAG.
~ It contains two propositions and a list ofcontrol features.
In this representation, M2 is theproposition that the discourse ntity B2 is a memberof class "dog".
M5 is the proposition that the nameof the discourse ntity B2 is "Pluto".
Thus, we canread the whole proposition as "Pluto is a member ofclass dog."
or simply "Pluto is a dog.
".
The controlfeatures tate that the output should be generatedas a declarative sentence with "be" as the main verb.Example  1 Pluto is a dog.
(((M2 (CLASS "dog")(MEMBER B2) )(M5 (OBJECT B2)(PROPERNAME "Pluto") ) )((form decl)(attitude be) ))\Vhen processing this input ,  YAG treats the firstproposition as the primary proposition to be real-ized.
YAG will map the MEMBER-CLASS propositionto the template shown in Figure 2.The control features, fo rm = decl  and a t t i tude= be, are also used in selecting the template.
(Ifthe form had been in ter rogat ive ,  a template forgenerating a yes-no question would have been used.
)Example 2 shows an example where prominaliza-tion is specified as part of the control features.
Theprimary proposition says that the agent (B4) is doingthe action "take" on the object (B6).
This proposi-tion.
along with the selected control features ( formIThe knowledge representatimr language used in these ex-amples follows the definition of SNePS case frames describedin (Shapiro et al, 1996).
SNePS is a semantic network pro-cessing system (Shapiro and Rapaport, 1992).
llowever, in-puts to YAG are parenthesized lists of symbols,, not SNePSdata strllCl tires.
(gender  (member  gender ) ) )  ).
.
.
.
.
.
.
.
.
.
.
.
.
.
(EVAL 'c lass )(PUNC .... left) )Figure 2: A member-c lass  Template.= dec l  and a t t i tude  = act ion) ,  allows YAG to se-lect the c lause  template.Example  2 "He takes it.
"(((M2 (AGENT B4)(ACT (MI (ACTION "take")(DOBJECT B6) ) ) )(MS (OBJECT B4)(PROPERNAME "George") )(MIi (CLASS "book")(MEMBER B6) )( (form decl)(attitude action)(pronominal YES (B6 B4))(gender MASCULINE B4) ) ))To override the gender  default (NEUTRAL) of B4and generate "He" instead of "It", Example 2 spec-ifies B4's gender  as MASCULINE.
To override tile de-fault expression type (full noun phrase) for both B4and B6, Example 2 specifies (pronominal  YES (B6B4)) which forces pronominalization.3.2 Generat ion  f rom a Feature  S t ructureExample 3 shows a complete feature structure thatwould be used to realize the text "Blood pressure in-volves your heart and blood vessels.".
Within a fea-ture structure, the name of the template that YAGshould use is given by the template feature.
Thus, inthis example, YAG retrieves the c lause  template 2which is shown in Figure 3.In the clause template, the agent  slot is boundto "blood pressure" since its value is another fea-ture structure representing the noun-phrase ten>plate.
The Eva luat ion  rule then realizes it as "bloodpressure".
The Template  rule realizes the verb "in-volves", by evaluating the verb - fo rm template withthe process  value taken from the c lause  template.The other slots (which woukt normally be taken from2This template has:been simplified to fadilitate explana-tion.266Example 3 "Blood pressure involves your heart andblood vessels.
"((TEMPLATE CLAUSE)(PROCESS "involve")(AGENT((TEMPLATE NOUN-PHRASE)(HEAD "blood pressure")(DEFINITE NOART)))(AFFECTED((TEMPLATE NOUN-PHRASE)(HEAD ((TEMPLATE CONJUNCTION)(SENTENCE NO)(FIRST ((TEMPLATE NOUN-PHRASE)(HEAD "heart")(DEFINITE NOART)))(SECOND ((TEMPLATE NOUN-PHRASE)(HEAD "blood vessel")(NUMBER PLURAL)(DEFINITE NOART)))))(POSSESSOR ((TEMPLATE PRONOUN)(PERSON SECOND))))))the agent slot, if its value were available) are filledby defaults (the defaults for number ,  person,  andgender are SINGULAR, THIRD, and NEUTRAL, respec-tively.)
within the verb-form template.
The nextEva luat ion  rule realizes "your heart and blood ves-sels", which is the result of realizing the affectedslot (its value is a feature structure representing thenoun-phrase template).
Finally, the surface stringis concatenated with a punctuation ".".
((EVAL agent)(TEMPLATE verb-form( (process  "process)(person (agent person))(number (agent number))(gender (agent gender))) )(EVAL affected)(PUNC "."
left) )Figure 3: A simplified template rule of the c lausetemplate.4 ConclusionWe have presented a natural language generationcomponent, called YAG (Yet Another Generator),that has been designed to meet the needs of real-time, interactive systems.
YAG combines a fast,tenlplate-based approach for the representation oftext structures with knowledge-I)asod methods fortel)resenting content.
Its inputs can include concel)tSor propositions along :with.
optional-annotations tospecify syntactic onstraints.
YAG can also realize267text from a feature-based representation f syntac-tic structure.
YAG can detect and correct missingor conflicting features by using a preprocessor basedon attribute grammars.
(One can also specify de-fault values in the grammar itself.)
YAG uses anexpressive, declarative language for specifying a gen-eration grammar.
The YAG distribution includes a,graphigaLtool for.extendingand testing templates.In these ways, YAG provides the speed, robustness,flexibility, and maintainability needed by real-timenatural anguage dialog systems.ReferencesSongsak Channarukul, Susan W. McRoy, andSyed S. All.
2000.
Enriching Partially-SpecifiedRepresentations for Text Realization.
In Proceed-ings of The First International Natural LanguageGeneration Conference, Israel.Songsak Channarukul.
1999.
YAG: A Natural Lan-guage Generator for Real-Time Systems.
Mas-ter's thesis, University of Wisconsin-Milwaukee,December.Michael Elhadad.
1992.
Using argumentation tocontrol lexical choice: A .functional unification-baged approach.
Ph.D. thesis, Computer ScienceDepartment, Columbia University.Michael Elhadad.
1993.
FUF: The universal uni-fier - user manual, version 5.2.
Technical ReportCUCS-038-91, Columbia University.Barbara J. Grosz, Karen Sparck-Jones, and Bon-nie Lynn Webber.
1986.
Readings in Natural Lan-guage Processing.
Morgan Kaufmann Publishers,Los Altos, CA.William C. Mann.
1983.
An overview of thePenman text generation system.
In Proceedingsof the Third National Conference on ArtificialIntelligence (AAAI-83), pages 261-265, Wash-ington, DC, August 22-26,.
Also appears asUSC/Information Sciences Institute Tech ReportRR-83-114.Kathleen R. McKeown.
1982.
The TEXT systemfor natural language generation : An overview.In Proceedings of the 20th Annual Meeting of theACL, pages 113-120, University of Toronto, On-tario, Canada, June 16-18,.Kathleen R. McKeown.
1985.
Discourse strrategiesfor generating natural-language t xt.
ArtificialIntelligence, 27(1):1-42.
Also appears in (Groszet al, 1986)~ pages 479-499.Stuart C. Shapiro and William J. Rapaport.
1992.The SNePS family.
Computers ~:t Mathematicswith Applications, 23(2-5).Stuart C. Shapiro, William J. Rapaport, Sung-HyeCho.
,J. Choi.
E. Felt, Susai1 Hailer..l. Kankiewicz.and Deepak Kumar, 1996..4 Dictionary o/SNePSCase Frames.
Department of Computer Science,SUNY at Buffalo.
