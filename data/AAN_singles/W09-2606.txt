Proceedings of the 2009 Workshop on Grammar Engineering Across Frameworks, ACL-IJCNLP 2009, pages 46?53,Suntec, Singapore, 6 August 2009. c?2009 ACL and AFNLPParenthetical Constructions - an Argument against ModularityEva BanikThe Open UniversityMilton Keynes, UKe.banik@open.ac.ukAbstractThis paper presents an argument againstmodularizing linguistic information in nat-ural language generation systems.
We ar-gue that complex linguistic constructionsrequire grammatical information to be lo-cated in the same module, in order toavoid over-complicating the system archi-tecture.
We demonstrate this point byshowing how parenthetical constructions?
which have only been generated in pre-vious systems using an aggregation or re-vision module ?
can be generated by asurface realizer when using an integratedgrammar.1 IntroductionThe ultimate aim of research on natural languagegeneration is to develop large-scale, domain inde-pendent NLG systems, which are able to generatehigh quality, fluent and well-formatted texts.
Ide-ally the produced texts will be as long as neededto convey the information given in the input andshould be presented in a style that is appropriatefor the purposes of the user.
Current NLG systemstypically produce paragraph-length text tailored toa specific domain and the grammars in these sys-tems contain only a limited number of grammati-cal constructions, typically collected during a cor-pus study of example documents.
Often the gram-mar is implemented using schemas or ?canned?expressions, and individual grammatical levels aredistributed in independent modules.Organizing the grammar this way severely lim-its the flexibility of NLG systems.
It has long beenrecognized in the literature that text fluency can beimproved by modeling interactions between gram-mar modules.
The most commonly mentionedinteractions are those among discourse/rhetoricalrelations and syntax (Scott and Souza, 1990;Hovy, 1993; Callaway, 2003), rhetorical rela-tions, syntax and referring expressions (Kibbleand Power, 2004); and layout and referring ex-pressions (N. Bouayad-Agha, 2001).
It is clearthat in order to generate high quality, coherentdiscourse, a generator needs access to a gram-mar which is able to model the interdependent,context-sensitive behaviour of these separate lin-guistic phenomena.In this paper we draw a parallel between gram-mar design and the design of natural language gen-eration systems.
We argue that in order to gener-ate complex linguistic constructions, current NLGsystems tend to have overly complicated architec-tures.
To illustrate this point we show how a sur-face realizer can take on tasks from other com-ponents when linguistic information from differ-ent grammar modules (and hence, system mod-ules) is integrated.
This simplifies system archi-tecture by reducing the need for interaction be-tween modules and enables the generator to pro-duce more complex and coherent text.
We illus-trate this point by first showing constraints thatparenthetical constructions impose on pronomi-nalization.
Then we present a grammar which in-tegrates a representation for referring expressionsinto a syntax/discourse grammar.
Finally we showthat using this grammar, we can generate complex,coherent paragraphs which contain parentheticalconstructions using only a surface realizer.2 The problem of generatingparenthetical constructionsParentheticals are constructions that provide lessimportant or background information in texts andthey are a prime example of interactions betweenreferring expressions, syntax, layout and discoursestructure.
Parentheticals help readers distinguishbetween more and less important propositions andtherefore significantly increase the fluency andreadability of the generated text.
Despite this ma-46jor effect on the quality of the generated text, cur-rent natural language generation systems still donot have a principled way of producing paren-theticals.
In this paper we focus on parentheticalconstructions which take the form of a subordi-nate clause introduced by a discourse connective.Some examples of this type of parentheticals in theWall Street Journal are illustrated (1):(1) a The irony is that the attack commercial,after getting a boost in last year?spresidential campaign, has come of agein an off-off election year with only afew contests scattered across thecountry.b the 1989 fall total of 80, while wellbelow 1988 activity, shows a steadyratcheting up in citizen referenda andinitiativesc pollination, while easy in corn becausethe carrier is wind, is more complexand involves insects as carriers in cropssuch as cottonThe examples in (2) illustrate the difficulties ingenerating parenthetical constructions by show-ing some possible but incoherent realizations ofthe same message.
In particular, they illustratethe importance of appropriate punctuation marks(2a), syntactic requirements of discourse connec-tives (2b), the limit on embedding (2c), and theimportance of ordering syntactic arguments (the-matic structure/information structure) (2d).
(2) a # The FDA though it bans Elixir since itcontains Gestodene approves ElixirPlus.b # The FDA ?
but it bans Elixir since itcontains Gestodene ?
approves ElixirPlus.c # The FDA though since Elixir containsGestodene , it bans Elixir approvesElixir Plus.d # The FDA, since Gestodene is aningredient of Elixir, bans Elixir.
But itapproves Elixir Plus.Correct realizations of the same message wouldinclude:(3) a The FDA ?
though it bans Elixir sinceit contains Gestodene ?
approvesElixir Plus .b The FDA bans Elixir because itcontains Gestodene.
However, ElixirPlus is approved by the FDAc The FDA approves Elixir Plus althoughElixir ?
since it contains Gestodene ?is banned by the FDA.Generation systems that produce output similarto the examples in (3) have three kinds of strate-gies: either a text planning module chooses a dis-course connective and decides the position andordering of clauses (Hovy, 1993) or aggregationis considered to be one of the tasks of the sen-tence planning module (Shaw, 2002); or a revi-sion module performs aggregation opportunisti-cally (Robin, 1994; Callaway and Lester, 1997).However, none of these systems handle paren-thetical constructions in a principled way.
Sys-tems where aggregation is part of the text planningmodule only produce complex sentences madeup of clauses joined by discourse connectives ?sentence-medial subordinate clauses are not gen-erated at all.
In revision-based systems, the outputoften needs to be corrected after aggregation.
Forexample, Robin?s system includes various trans-formations to correct redundancies, ambiguities orinvalid lexical collocations introduced by the revi-sion module.
In Shaw?s system, the referring ex-pression generation module is run twice, once be-fore and once after aggregation.
In general, theordering of aggregation rules and the interactionsbetween them pose further problems where ag-gregation is separated into an independent mod-ule.We propose a different approach to modelinginteractions between linguistic information in sep-arate grammar modules.
We argue that constraintsthat are at the interface of modules (syntactic con-straints on referring expressions, discourse-levelconstraints on syntax, constraints imposed by lay-out on discourse, etc.)
should be stored in an in-tegrated grammar, and only straightforward deci-sions ?
which do not require information from aseparate grammatical level ?
should be separatedout into individual modules.As an example, we show a grammar which iscapable of generating parenthetical constructionsin a principled way.
The grammar includes- a representation for discourse connectivesand discourse-level constraints they imposeon syntax;- referring expressions and syntactic con-straints on them;47- elements of layout (punctuation marks formain clauses and parentheticals).We show that by incorporating the above kindsof linguistic information into the grammar of asurface realizer we can improve the flexibility ofthe system (i.e., generate more paraphrases for thesame input) and improve the quality of the gener-ated text without adding more modules to the sys-tem.2.1 Syntactic constraints onpronominalizationTo design a grammar for parenthetical construc-tions, we have carried out a corpus study on em-bedded rhetorical relations in the RST treebank(Banik and Lee, 2008).
The corpus study hasshown that the most numerous class of embed-ded subordinate clauses that occur in sentence-medial position contain a subject pronoun (as in4a).
This embedded subject pronoun in all casesreferred back to the subject of the matrix clause,which always immediately preceded the subordi-nate clause.
The pronoun can be either explicit (asin 4a) or implicit (as in the examples in 1).
Of the119 sentence-medial subordinate clauses that welooked at in the study, 35 were of this type (whatwe call pseudo-relatives).1 This suggests that insentence-medial subordinate clauses (or sentence-final ones immediately following the main clauseobject) the type of a referring expression is solelydetermined by syntax, much like a WH-pronounin relative clauses.
(4) a Elixir, since it contains Gestodene, isbanned by the FDA.b # Elixir, since Elixir containsGestodene, is banned by the FDA.c # It, since Elixir contains Gestodene, isbanned by the FDA.d # The FDA, since it containsGestodene, banned Elixir.The constraints on the form of referring expres-sions selected for the matrix clause and subordi-nate clause subjects in these cases can be stated asfollows:1Of the rest, 30 were ?free?
subordinate clauses (subor-dinate clauses that are equally felicitous in sentence-initialor sentence final positions, typically they do not contain anypronouns).
The rest of the cases were either time adverbials(20) or scopal elements (22).- the subject of the subordinate clause has to berealized as a pronoun.
(c.f.
4b)- the subject of the main clause cannot be apronoun (c.f.
4c)- the subject pronoun in the subordinate clausewill be resolved as referring to an entity men-tioned in the matrix clause; this entity has toprecede the subordinate clause (c.f.
4d )In addition to modeling the above constraints, inorder to generate parentheticals a generation sys-tem also has to- insert the appropriate discourse connectivefor the subordinate clause (c.f.2b) and- insert appropriate punctuation marks on ei-ther side of the subordinate clause to avoidpotential garden path effects.3 An integrated discourse-syntaxgrammarIn order to generate coherent discourse, a gener-ation system needs access to a grammar that iscapable of representing multisentential text.
Inmodular systems this is typically achieved by twomodules: a text planning module which constructsa text plan and a surface realizer that convertsthe text plan into sentences.
However, text plan-ning and linguistic realization are not two inde-pendent processes and many linguistic decisionsare in fact made by the text planner.
The inter-actions between text planning and linguistic re-alization in modular systems have been handledin several ways, including backtracking (Appelt,1985), interleaving the two components (McDon-ald, 1983) and restrictive planning (Hovy, 1988).These approaches however make the system in-flexible because all possible interactions betweenmodules have to be anticipated by the system de-signer.Another, more recent approach to tackle thisproblem is to use lexicalization not only for sen-tences but also for texts.
The theoretical back-ground for lexicalization on the discourse levelhas been laid down for Tree Adjoining Grammar(Joshi and Schabes, 1997) by several researchers,including Webber (2004), and Danlos (2000).
Inparticular, Danlos (2000) shows that extendinglexicalization to the discourse level makes it possi-ble to completely integrate text planning and sur-face realization.48We have designed a Tree Adjoining Grammarfor parenthetical constructions following this lat-ter approach.
Elementary trees in the grammarare associated with a flat semantic representation.The trees integrate syntax and discourse represen-tations in the sense that each sentence-level ele-mentary tree includes one or more discourse-levelnodes.
The elementary trees in Fig.
1 illustratewhat we mean by this: every lexical item thatwould normally project a sentence in a syntacticgrammar (i.e., an S-rooted tree) here projects a dis-course clause (i.e., a Dc rooted tree).
Every pred-icate that projects a discourse clause is assignedtwo kinds of elementary trees: a discourse ini-tial tree (e.g., Fig.
1a) and a discourse continu-ing tree (e.g., Fig.
1b), which takes the precedingdiscourse clause as an argument.h1:white-cream(e)DcHHHSHHNP?[idx:e]VPHHVisNPcream[idx:e]Punct.
(a) discourse initialh2:contain(e,a)DcHHHDc?
DcHHHSHHNP?[idx:e]VPHHVcontainsNP?[idx:a]Punct.
(b) discourse continuingFigure 1: Elementary syntax/discourse treesThe combination of these two trees correspondsto the empty connective (?
in Danlos (2000)).Other types of discourse connectives are imple-mented in the grammar the usual way (see e.g.Danlos (2000)).4 Referring expressionsOne of the challenges of generating paraphrasesfrom a semantic representation is that in some ver-sions there will be a mismatch between the num-ber of noun phrases needed to make the outputsyntactically well-formed and the number of se-mantic arguments in the input which can poten-tially become a noun phrase.This happens whenever a discourse entity is theargument of more than one semantic predicate.For example, (5) shows possible realizations of thefollowing input where (5a) contains three syntac-tic slots for ?Elixir?, (5b,c) contain two slots, and(5d) only one:h0:white-cream(e)h1:contains(e,g)h2:elixir(e)h3:gestodene(g)h4:ban(f,e)h5:fda(f)(5) a Elixir is a white cream.
Elixir containsgestodene.
Elixir is banned by the FDA.b This white cream, Elixir, containsgestodene.
It is banned by the FDA.c Elixir is a white cream, which containsgestodene.
It is banned by the FDA.d Elixir, a white cream banned by theFDA, contains gestodene.The task of a generation system is to decidewhat predicate-argument structure to choose andto decide how the individual noun phrases shouldbe represented.
In most systems creating the syn-tactic ?slots?
is the task of a text planning or sen-tence planning module, and filling them in with theright noun phrases is the task of a referring expres-sion generation module, i.e., the referring expres-sion module decides whether an NP slot should berealized as a name, a pronoun or a description.This division of labour makes it difficult to rep-resent syntactic constraints on pronominalizationexhibited by the examples in the previous section,where pronouns are either prohibited or obligatoryin specific syntactic contexts.To model these constraints we include a repre-sentation for underspecified referring expressionsin the grammar by replacing NP substitution nodeswith a referring expression leaf node as illustratedin Fig.2.
This allows syntactic constraints to be?posted?
on referring expressions in the appropri-ate contexts while completely specifying the formof the underspecified slots still remains the task ofa referring expression module.
In other words, wefactor out pronominalization decisions dictated bysyntax from pronominalization decisions dictatedby discourse level constraints.Treating pronouns in subordinate clauses dif-ferently from pronouns in main clauses has inde-pendent justification from psycholinguistics andtheoretical linguistics.
For example, Miltsakaki(2003) has carried out psycholinguistic experi-ments on complex sentences containing relativeclauses.
The experiments show that pronouns inembedded clauses tend to refer back to an entity49h2:contain(e,a)DcHHHDc?
DcHHHSHHRX[idx:e]VPHHVbanned byRX[idx:a]Punct.Figure 2: Elementary trees with referring expressionsin the matrix clause, whereas referring expressionsin main clauses tend to find their antecedent in theprevious main clause.
This suggests that pronom-inalization should be treated differently in subor-dinate clauses than in main clauses.
Research intheoretical linguistics underlines this claim, whereKehler (2002) has shown that apparent discrepan-cies between different accounts of pronominaliza-tion can be reconciled if each method is applied ina different discourse context.To sum up, in this integrated approach part ofthe job of the referring expression generation mod-ule is taken over by the grammar, namely- pronominalization of discourse entities insubordinate clauses and- decisions about when not to realize under-specified referring expressions as pronouns.5 Representing parentheticalconstructionsIntegrating referring expressions into the grammarthis way makes it possible to state syntactic con-straints on pronominalization.5.1 Pronoun prohibited(6) a Elixir, an illegal drug, is banned by theFDA.b # It, an illegal drug, is banned by theFDA.The constraint that parenthetical constructionssuch as appositives, relative clauses or parenthet-ical subordinate clauses cannot follow a pronounis illustrated by the contrast in (6).
Using the el-ementary trees described in the previous sectionthis constraint can now be stated by adding a fea-ture ([pron:no]) to the foot node of auxiliarytrees, as illustrated in Fig.
3.
When the aux-iliary tree is adjoined onto an NP, the feature ispercolated to the underspecified referring expres-sion node, which will block the referring expres-sion module from realizing this noun phrase as apronoun.5.2 Pronoun obligatory(7) a Elixir, since it contains Gestodene, isbanned by the FDA.b # Elixir, since Elixir containsGestodene, is banned by the FDA.Another case where syntax imposes constraintson pronominalization is contexts where pronounsare not allowed, as illustrated by the example in(7).
The discourse connective ?since?
is assignedan NP auxiliary tree in this context, which takesthe embedded clause as an argument.
The featureson the auxiliary tree state that the subject of thisembedded clause should be expressed by a pro-noun and that it should refer to the same discourseentity as the head noun that the auxiliary tree ad-joins to.
When the discourse connective is com-bined with the embedded clause, these features arepercolated to the referring expression in subjectposition, requiring it to be realized by a pronoun.Figure 4 illustrates the elementary trees and thederived tree for the embedded clause in (7).6 ComparisonAs an experiment, we have implemented a gram-mar fragment in the GenI surface realizer (Kow,2007) and regenerated an example from theICONOCLAST generator (Power et al, 2003).The example we used is represented by the fol-lowing input semantics:h1: elixir(e)h2: fda(f)h3: elixir plus(p)h4: gestodene(g)h5: contain(e g)h6: ban(f e)h7: approve(f p)h8: concession(h6 h7)h9: cause(h5 h6)h10: contain(p o)h11: oestradiol(o)h12: cause(h10 h7)50h6:ban(f e)DceHHHSHHHNPRX[idx:e]VPHHHVbanned byNPRX[idx:f]Punct.h2:drug(e)NPHHHNP?
[pron:no]TextPhraseHH, NPHHDET Ndrug,(a) Elementary trees for (6)DceHHHHSHHHHHHNPHHHHNPRX[idx:epron:no]TextPhraseHH, NPHHDET Ndrug,VPHHVbanned byRX[idx:f]Punct.
(b) Derived tree for (6)Figure 3: Pronouns not allowed before an appositiveh2:contain(e a)S[s pron:?X]HHHHHNPRX[pron:?Xidx:e]VPHHHVcontainNPRX[idx:f]h2:cause(h7 h0)NPHHHHNP???
?pred:h7pron:noidx :e???TextClauseHHHConnsinceS???
?idx :h0subj :es pron:yes???
(a) Elementary trees for (7)NPHHHHHNP???
?pred:h7pron:noidx :e??
?TextClauseHHHHConnsinceS[s pron:yes]HHHHNPRX[pron:yesidx :e]VPHHVcontainNPRX[idx:f](b) Derived tree for (7)Figure 4: Obligatory pronouns in parenthetical subordinate clausesICONOCLAST is a constraint-based systemwhich integrates text planning, document plan-ning and pronominalization to generate all possi-ble paraphrases for a given input.
It uses a versionof Centering Theory (Grosz et al, 1995) adaptedto natural language generation to decide when topronominalize noun phrases in the generated text.ICONOCLAST has an overgenerate and test ap-proach, where all possible paraphrases are gener-ated and the solutions are ranked according to a setof soft constraints.
The system generated 172 so-lutions for the above input, of which (8) illustratesthe top three:(8) a Since Elixir contains gestodene it isbanned by the FDA.
However, the FDAapproves Elixir Plus since Elixir Pluscontains oestradiol.b Elixir contains gestodene so it isbanned by the FDA.
However, the FDAapproves ElixirPlus since ElixirPluscontains oestradiol.c Elixir is banned by the FDA since itcontains gestodene.
However,ElixirPlus is approved by the FDAsince it contains oestradiol.We have regenerated the same text, using onlya surface realizer and the grammar described inthe previous sections, without a referring expres-sion generation module.
A post-processing scripttransforms RX nodes into a pronoun when theyhave the relevant feature ([pron:yes]) and intoa name when the [pron] feature is missing or itsvalue is no.
The surface realizer produced 208 so-lutions for the same input, of which 96 containedparentheticals.
Some of the output is illustrated in(9).
Since sentence final parenthetical construc-tions are impossible to distinguish from sentence-final subordinate clauses in many cases, there is anoverlap between the solutions generated by ICON-OCLAST and the 96 solutions generated by our51(9) a The FDA bans Elixir since Elixir contains gestodene.
However, Elixir Plus (since it containsoestradiol) is approved by the FDA.b Since Elixir Plus contains oestradiol, although the FDA bans Elixir (since it containsgestodene), Elixir Plus is approved by the FDA.c Elixir contains gestodene.
Consequently, Elixir is banned by the FDA.
However, Elixir Plus(since it contains oestradiol) is approved by the FDA.d Elixir Plus contains oestradiol.
Consequently, although the FDA bans Elixir (since it containsgestodene), the FDA approves Elixir Plus.e Elixir Plus (since it contains oestradiol) is approved by the FDA (although it bans Elixir sinceit contains gestodene).f The FDA bans Elixir (since it contains gestodene).
However, Elixir Plus is approved by theFDA since Elixir Plus contains oestradiol.grammar which contain parentheticals.
Also, de-spite the fact that the two systems use the samediscourse connectives and a very similar grammar,there are slight differences in the constructionsproduced.
For example, ICONOCLAST allowssubordinating conjunctions to ?dominate?
coordi-nating conjunctions, producing solutions like theone in (10), although these solutions are assignedat least 4 defects in all cases.
These constructionsare not allowed in our grammar.
(10) Although Elixir contains gestodene so it isbanned by the FDA ElixirPlus containsoestradiol so it is approved by the FDA.Though comparing the generated solutions isnot a straightforward task because of these subtledifferences and the sheer number of the solutionsproduced, the two systems do generate a numberof very similar outputs, including the ones shownin (8).
However, a significant difference is that oursystem generates coherent texts which include par-enthetical constructions, and which are not gener-ated by ICONOCLAST at all.7 Related workOur grammar design was inspired by threediscourse-level extensions of Lexicalized Tree Ad-joining Grammar.
A common idea behind all theseapproaches is to build an integrated text under-standing or generation system in which the samemechanisms are used for the sentence and dis-course levels.DLTAG (Webber, 2004) is an extension ofLTAG in which discourse syntax is projected bydifferent types of discourse connectives.
In thisapproach discourse-level syntax is considered tobe a separate layer on top of sentence-level syntaxand there are two kinds of discourse connectives:anaphoric and structural (Webber et al, 2003).This analysis is not suitable for natural languagegeneration systems which need to have an explicitrepresentation for the arguments of discourse con-nectives.G-TAG (Danlos, 2000) is another discourse-level extension of TAG where underspecified ?g-derivation trees?
are created for a conceptual inputand grouped into lexical databases.
A g-derivationtree specifies a set of surface variants, one ofwhich is produced by linearization of the g-derivedtree.
The other surface variants are created by apost-processing module.
While this methodologyefficiently reduces the search space of solutions bygrouping them together, it assumes that all variantsof the same sentence can be generated in the samediscourse context.Most recently, Danlos (2008) introduces D-STAG, a discourse level synchronous TAG cou-pled with Segmented Discourse RepresentationTheory (Asher, 1993).
In this framework the sen-tential grammar (S-TAG) and the discourse gram-mar (D-STAG) are not integrated, therefore dis-courses where arguments of discourse relationscome from discontinuous text spans (as in rela-tive clauses or other types of parentheticals) arenot handled by the theory.8 ConclusionsWe have presented an argument against modular-izing linguistic information in natural languagegeneration systems.
We have argued that com-plex linguistic constructions which require inter-actions between several system components arebest represented in natural language generation52systems using an integrated grammar.
As an ex-ample, we have presented the problem of gener-ating parenthetical constructions.
Current naturallanguage generation systems either do not gener-ate these constructions at all, or if they do, theydo not have a principled approach to the prob-lem and generate parentheticals by adding moremodules to a pipeline.
We have shown that par-entheticals can be generated in a principled wayusing a surface realizer, when it is equipped withan integrated grammar which incorporates infor-mation about syntax, discourse and referring ex-pressions.
The solutions produced by our surfacerealizer demonstrate that this approach enhancesthe fluency of the generated text and the flexibilityof generation systems, without adding extra com-ponents or changing the system?s architecture.ReferencesD.E.
Appelt.
1985.
Planning English sentences.
Cam-bridge University Press, Cambridge.N.
Asher.
1993.
Reference to Abstract Objects in En-glish.
Kluwer, Dordrecht.E.
Banik and A. Lee.
2008.
A study of parenthet-icals in discourse corpora ?
implications for NLGsystems.
In Proceedings of LREC 2008, Marrakesh.C.
B. Callaway and J. C. Lester.
1997.
Dynami-cally improving explanations: A revision-based ap-proach to explanation generation.
In Fifteenth Inter-national Joint Conference on Artificial Intelligence,pages 952?58, Nagoya, Japan.C.
B. Callaway.
2003.
Integrating discourse markersinto a pipelined natural language generation archi-tecture.
In ACL ?03: Proceedings of the 41st AnnualMeeting on Association for Computational Linguis-tics, pages 264?271.L.
Danlos.
2000.
G-TAG: A lexicalized formalism fortext generation inspired by Tree Adjoining Gram-mar.
In A. Abeille and O. Rambow, editors, TreeAdjoining Grammars: Formalisms, linguistic analy-sis and processing, pages 343?370.
CSLI, Stanford.L.
Danlos.
2008.
D-STAG: Parsing discourse withsynchronous TAG and SDRT background.
In Pro-ceedings of the Third International Workshop onConstraints in Discourse (CID?2008) Postdam.B.J.
Grosz, A.K.
Joshi, and S Weinstein.
1995.
Cen-tering: a framework for modelling the local co-herence of discourse.
Computational Linguistics,21(2):203?225.E.
H. Hovy.
1988.
Two types of planning in languagegeneration.
In Proceedings of the 26th annual meet-ing on Association for Computational Linguistics,pages 179?186, Morristown, NJ, USA.
Associationfor Computational Linguistics.Eduard H. Hovy.
1993.
Automated discourse gener-ation using discourse structure relations.
ArtificialIntelligence, 63(1-2):341?385.A.
K. Joshi and Y. Schabes.
1997.
Tree-AdjoiningGrammars.
In Rosenberg and Salomaa, editors,Handbook of Formal Languages and Automata, vol-ume 3, pages 69?124.
Springer-Verlag, Heidelberg.A.
Kehler.
2002.
Coherence, Reference and the Theoryof Grammar.
CSLI.R.
Kibble and R. Power.
2004.
Optimizing referentialcoherence in text generation.
Computational Lin-guistics, 30(4):401?416.E.
Kow.
2007.
Surface realisation: ambiguity anddeterminism.
Ph.D. thesis, Universite de HenriPoincare.D.
D. McDonald.
1983.
Natural language genera-tion as a computational problem.
In M. Brady andRobert Berwick, editors, Computational Models ofDiscourse, pages 209?265.
MIT Press.E.
Miltsakaki.
2003.
The Syntax-Discourse Interface:Effects of the Main-Subordinate Distinction on At-tention Structure.
Ph.D. thesis, Department of Lin-guistics, University of Pennsylvania.R.
Power N. Bouayad-Agha,D.
Scott.
2001.
The influ-ence of layout on the interpretation of referring ex-pressions.
In L. Degand Y. Bestgen W. Spooren L.van Waes, editor, Multidisciplinary Approaches toDiscourse, pages 133?141.R.
Power, D. Scott, and N. Bouayad-Agha.
2003.Document structure.
Computational Linguistics,29(4):211?260.J.
Robin.
1994.
Revision-based generation of Natu-ral Language Summaries providing historical Back-ground.
Ph.D. thesis, Columbia University.D.
Scott and C. S. Souza.
1990.
Getting the messageacross in RST-based text generation.
In C. MellishR.
Dale M. Zock, editor, Current Research in Nat-ural Language Generation, pages 31?56.
AcademicPress.J.
Shaw.
2002.
Clause Aggregation: An approachto generating concise text.
Ph.D. thesis, ColumbiaUniversity.B.
Webber, M. Stone, A. Joshi, and A. Knott.
2003.Anaphora and discourse structure.
ComputationalLinguistics, 29(4):545?587.B.Webber.
2004.
D-LTAG: extending lexicalized TAGto discourse.
Cognitive Science, 28(5):751?779.53
