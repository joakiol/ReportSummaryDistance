PROOF F IGURES AND STRUCTURAL OPERATORSFOR CATEGORIAL  GRAMMAR"Guy Barry, Mark Hepple t, Nell Leslie and Glyn Morrill ICentre for Cognit ive Science, University of  Edinburgh2 Buccleuch Place, Edinburgh EBB 9LW, Scotlandguy@cogsc i ,  ed.
ac .uk ,  arh@cl ,  cam.
ac .
uk ,neil@cogs c i. ed.
ac.
uk, Glyn.
Norrill@let.
ruu.
nlABSTRACTUse of Lambek's (1958) categorial grammar for lin-guistic work has generally been rather limited.
Thereappear to be two main reasons for this: the nota-tions most commonly used can sometimes obscure thestructure of proofs and fail to clearly convey linguisticstructure, and the cMculus as it stands is apparentlynot powerful enough to describe many phenomena en-countered in natural anguage.In this paper we suggest ways of dealing with boththese deficiencies.
Firstly, we reformulate Lambek'ssystem using proof figures based on the 'natural de-duction' notation commonly used for derivations inlogic, and discuss some of the related proof-theory.Natural deduction is generally regarded as the mosteconomical and comprehensible system for workingon proofs by hand, and we suggest that the sameadvantages hold for a similar presentation of cate-gorial derivations.
Secondly, we introduce devicescalled structural modalities, based on the structuralrules found in logic, for the characterization f com-mutation, iteration and optionality.
This permits thedescription of linguistic phenomena which Lambek'ssystem does not capture with the desired sensitivityand gencrallty.LAMBEK CATEGORIALGRAMMARPREL IMINARIESCategorial grammar is an approach to language de-scription in which the combination of expressions igoverned not by specific linguistic rules but by generallogical inference mechanisms.
The point of departurecan be seen as Frege's position that there are certain'complete xpressions' which are the primary bear-ers of meaning, and that the meanings of 'incompleteexpressions' (including words) are derivative, being* We would like to thank Robin Cooper, Martin Picker-ing and Pete Whitelock for comments and discussion relat-ing to this work.
The authors were respectively supportedby SERC Research Studentship 883069"/1; ESRO Re-search Studentshlp C00428722003; ESPRIT Project 393and Cognitive Science/HCI Research Initiative 89/CS01and 89/CS25; SERC Postdoctoral Fellowship B/ITF/206.I Now at University of Cambridge Computer Labora-tory, New Musctuns Sitc, Pembroke Street, Cambridge(31}2 3Q(;,  Engl~u.l.1 Now at OTS, '\]'rans 1O, 3512 JK Utrecht, Netherlands.their contribution to the meanings of the expressionsin which they occur.
We s.uppese that linguistic ob-jects have (at least) two components, form (syntactic)and meaning (semantic).
We refer to sets of such ob-jects as categories, which axe indexed by types, andstipulate that all complete xpressions belong to cat-egories indexed by primitive types.
We then recur-sively classify incomplete xpressions according to themeems by which they combine (syntactically and se-mantically) with other expressions.In the 'syntactic alculus' of Lambek (1958) (var-iously known as Lambek categoriai grammar, Lambekcalculus, or L), expressions are classified by means ofa set of bidirectional types as defined in (1).
(1) a.
If X is a primitive type then X is a type.b.
If X and Y are types then X/Y  and Y\Xare types.X/Y  (resp.
Y\X)  is the type of incomplete xpres-sions that syntactically combine with a following (resp.preceding) expression of type Y to form an expressionof type X, and semantically are functions from mean-ings of type Y to meanings of type X.Let us assume complete expressions to be sen-tences (indexed by the primitive type S), noun phrases(NP), common ouns (N), and non-finite verb phrases(VP).
By the above definitions, we may assign typesto words as follows:(2) John, Mary, Suzy := NPman, paper := Nthe := NP/Nlikes, read := (NP\S) /NPquickly :--- (NP\S) \ (NP\S)without := ( (NP\S) \ (NP\S) ) /VPunderstanding := VP/NPWe represent he form of a word by printing it initalics, and its meaning by the same word in boldface.For instance, the form of the word "man ~ will berepresented as man and its meaning as man.PROOF F IGURESWe shall present the rules of L by means of proo~f i~res,  based on Prawitz' (1965) systems of 'nat-u ra l  deduction'.
Natural deduction was developedby Gentzen (1936) to reflect the natural process ofmathematical reasoning in which one uses a numberof in/erence tulsa to justify a single proposition, theconclusion, on the basis of having justifications of anumber of propositions, called assumptions.
During- 198 -a proof one may temporarily make a new assumptionif one of the rules licenses the subsequent withdrawalof this assumption.
The rule is said to discharge theassumption.
The conclusion is said to depend on theundischarged assumptions, which are called the by.potheses of the proof.A proof is usually represented as a tree: with theassumptions as leaves and the conclusion at:the root.Finding a proof is then seen as the task of filling thistree in, and the inference rules as operations on thepartially completed tree.
One can write the infer-ence rules out as such operations, but as these arerather unwieldy it is more usual to present he rulesin a more compact form as operations from a set ofsubproofs (the premises) to a conclusion, as follows(where m >_ I and n >_ 0):(3) .
: \[Y.l\] d , \[y.n\] d.R'ZThis states that a proof of Z can be obtained fromproofs of X1 .
.
.
.
, Xm by discharging appropriate oc-currences of assumptions Y, .
.
.
.
.
I/,.
The use ofsquare brackets around an assumption indicates itsdischarge.
R is the name of the rule, and the index iis included to disambiguate proofs, since there may bean uncertainty as to which rule has discharged whichassumption.As propositions are represented by formulas inlogic, so linguistic categories are represented by typeformulas in L. The left-to-right order of types indi-cates tim order in which the forms of subexpressionsare to be concatenated to give a composite xpres-sion derived by the proof.
Thus we must take noteof the order and place of occurrence of the premisesof the rules in the proof figures for L. There is alsoa problem with the presentation of the rules in thecompact notation as some of the rules will be writtenus if they had a number of conclusions, as follows:(4) :Xl -.. X,~, , ,  / r~~q .
.
.
Y .This rule should be seen as a shorthand for:(,~) : :Xl ... XmttY, .
.
.
Y..ZIf the rules are viewed in this way it will be seen thatthey do not violate the single conclusion ature of thefigures.As with standard natural deduction, for each con-nective there is an elimination rule which gates howa type containing that connective may be consumed,and an introduction rule which states how a type con-raining that connective may be derived.
The elimi-nation rule for / states that a proof of type X/Yfollowed by a proof of type Y yields a proof of typeX.
Similarly the elimination rule for \ states thata proof of type Y\X  preceded by a proof of type Yyields a proof of: type X.
Using the notation above,we may write these rules as follows:: : b. i:.
.
(6) a. x)r., i'le v\x\~X XWe shall give a semantics for this calculus in the samestyle as the traditional functional semantics for intu-itionistic logic (Troelstra 1969; Howard 1980).
In thetwo rules above, the meaning of the composite xpres-sion (of type X) is given by the functional applicationof the meaning Of the functor expression (i.e.
the oneof type X/Y  or Y\X)  to the meaning of the argumentexpression (i.e.
the one of type Y).
We represent func-tion application :by juxtaposition, so that likes Johnmeans likes applied to John.Using the rules \ [E and \E, we may derive "Marylikes John" as a sentence as follows:(7) Mary likes John(NP\S)/NP NP /P.
, iNP NP\SSThe meaning of the sentence is read off the proof byinterpreting the /E  and \E  inferences as function ap-plication, giving the following:(8) (likes John)  MaryThe introduction rule for / states that where therightmost a~sumption i  a proof of the type X is oftype Y, that assumption may be discharged to givea proof of the type X/Y.
Similarly, the introductionrule for \ states that where the leftmost assumptionin a proof of the type X is of type Y, that assumptionmay be discharged to give a proof of the type Y\X.Using the notation above, we may write these rulesas follows:(9) a.
~\ ] '  b.
\[v.\]'.~1 I ,  v \x  \X ~Note however that this notation does not embody theconditions that ihave been stated, namely that in / IY is the rightmost undischarged assumption in theproof of X, and:in \ I  Y is the leftmost undischargedassumption in the proof of X.
In addition, L carriesthe condition that in both / I  and \ I  the sole assump-tion in a proof cannot be withdrawn, so that no typesare assigned to the empty string.In the introduction rules, the meaning of the re-sult is given by lambd&-abstraction ver the meaningof the discharged assumption, which can be repre-sented by a variable of the appropriate type.
The re-lationship between lambda-abstraction a d functionapplication is given by the law of t-equality in (10),- 199 -where c~\[/~lV \] means '~ with//substituted for #'.
(Seellindley and Seldin 1986 for a full exposition of thetyped lambda-calculus.
)(10)  (xv\[o,\])//= o,\[//Iv\]Since exactly one assumption must be withdrawn, theresulting lambda-terms have the property that eachbinder binds exactly one variable occurrence; we referto this as the 'single-bind' property (van Benthem1983).
The rules in (9) are analogous to the usualnatural deduction rule of conditionalization, exceptthat the latter allows withdrawal of any number ofassumptions, in any position.The \]I and \ l  rules are commonly used in con-structions that are assumed in other theories to in-volve 'empty categories', such as (11):(11) (John is the man) who Mary likes.We assume that the relative clause modifies the noun"man" and hence should receive the type N\N.
Thestring "Mary likes" can be derived as of type S/NP,and so assignment of the type (N\N)/ (S/NP)  to theobject relative pronoun "who" allows the analysis in(12) (cf.
Ades and Steedma n 1982):(12) who Mary likes(NP\S)/NP \[NP\]aIENP ' NP\S\ES(N\N)I(S/NP) SINP III./F.N\NThe meaning of the string can be read off the proof byinterpreting / I  and \ I  as lambda-abstraction, givingthe term in (13):(is) who (Ax\[(likes ~) Mary\])Note that this mechanism is only powerful enoughto allow constructions where the extraction site isclause-peripheral; for non-peripheyad extraction (andmultiple extraction) we appear to need an extendedlogic, as described later.DERIVAT IONAL EQUIVALENCE ANDNORMAL FORMSIn the above system it is possible to give more thanone proof for a single reading of a string.
For exam-pie, corot)are the derivation of "Mary likes John" in(7), and the corresponding lambda-term in (8), withthe derivation in (14) and the iambda-term in (15):(14) Mary likes Jolm(NP\S)/NP \[NPpNP NP\S\E /ESS/NP/I1 NP.i~, S(15) (Az\[(likcs x) Mary\] )  JohnBy the definition in (10), the terms in (8) and (15) are//-equal, and thus have the same meaning; the proofsin (7) and (14) are said to exhibit derivationai equiva-lence.
The relation of derivational equivalence clearlydivides the set of proofs into equivalence classes.
Weshall define a notion of normal form for proofs (andtheir corresponding terms) in such a way that eachequivalence class of proofs contains a unique normalform (cf.
Hepple mad Morrill 1989).We first define the notions of contraction and re.due.tion.
A contraction schema R D C consists of a par-ticular pattern R within proofs or terms (the redez)and an equal and simpler pattern C (the contractum).A reduction consists of a series of contractions, eachreplacing an occurrence of a redex by its contractum.A normal form is then a proof or term on which nocontractions are possible.We define the following contraction schemas: weakcontraction in (16) for proofs, and t-contraction i(17) for the corresponding lambda-terms.
(16)  ~.
V.\] '" I> Yv ,/v, ~"Xb.
\[r.),: X i l>~, v \x  \IXV.
kX(17) (~y\[,~\]),o ~ ~,Laly\]From (10) we see that t-contraction preserves mean-ing according to the standard functional interpreta-tion of typed lambda.calculus.
Therefore the cor-responding weak contraction preserves the semanticfunctional interpretation of the proof; in addition itpreserves the syntactic string interpretation since theredex and contractum contain the same leaves in thesame order.
For example, the proof in (14) weaklycontracts to theproof in (7), and correspondingly theterm in (15) //-contracts to the term in (8).
Theresults of these contractions cannot be further con-tracted and so ~re the respective results of reductionto weak normal form and// .normal form.Weak contraction in L strictly decreases the sizeof proofs (e.g.
the number of symbols in a contractumis always less than that in a redex), and//-contractionin.
the single-bind lambda-calculus strictly decreasesthe size of terms.
Thus there is strong normalizationwith respect o these reductions: every proof (term)reduces to a weak normal form (//-normal form) ina finite number of steps.
This has as a corollary(normalization) that every proof (term) has a nor-mad form, so that normal forms are fully represen-tative: every proof (term) is equal to one in normalform.
Since reductions preserve interpretations, aninterpretation of a normal form will always be the- 200  -same as that of the original proof (term).
Thus re-stricting the search to just such proofs addresses theproblem of derivational equivalence, while preservinggenerality in that all interpretations are found?Proofs in L and singie-bind lambda-terms (likethe more general cases of intuitionistic proofs and fulllambda-terms) exhibit a property called the Church-Itosser property) from which it follows that  normalforms are unique.
2For formulations of L that are oriented to pars-ing, defining normal forms for proofs provides a basisfor handling the so-called 'spurious ambiguity' prob-lem, by providing for parsing methods which returnall aml only normal form proofs.
See KSnig (1989)~t,,d lh:pl,lc (1990).STRUCTURAL MODAL IT IESFrom a logical perspective, L can be seen as the weak-est of a hierarchy of implicational sequent logics whichdiffer in the amount of freedom allowed in' the useof assumptions.
The higl,est of these is (the impli-cational fragment of) the logistic calculus L J  intro-duced in Gentzen (1936).
Gentzen formulated thiscalculus ia terms of sequences of propositions, andthen provided explicit structural rules to show thepermitted ways to manipulate these sequences.
Thestructural rules are permutation, which allows the or-der of the assumptions to be changed; contraction,which allows an assumption to be used more thanonce; and toeakening, which allows an assumption tobe ignored.
For a discussion of the logics generatedby dropping some or all of these structural rules seee.g.
van Benthem (1987).Although freely applying structural rules 'are clear-ly not appropriate in categorial grammars for linguis-tic description, commutable, iterable and optional el-eme,ts  do occur in natural language.
This suggeststhat we should have a way to indicate that structuraloperatiops are permissible on specific types, while stillforbidding tl,eir general application.
To achieve thiswe propose to follow the precedent of the e~ponen-lial operators of Girard's (1987) linear sequent logic,which lacks the rules of contraction and weakening,by s.ggesting a similar system of operators calledstructnral sodalities, tiers we shall describe a sys-tem of universal sodal i t ies,  which allow us to dealwith the logic of commutable, iterable and: optionalextractions, aFor each universal soda l i ty  we shall present anelimination rule, and one or more 'operational rules',whicl, are essentially controlled versions of structural1 This is the property that if a proof (term) M reducesto two proofs (terms) NI, N2, then there is a proof (term)to wlfich both NI and N2 reduce.2The above remarks also extend to a second form of re-duction, strong reduction/11-reduction, which we have notspace to describe here.
See Morrill et aL (1990).aThe name is dmseJa because the elimination and in-troduct;on rules appropriate to each operator turn out tobe those for the unlvcrsal ,nodality in the \]nodal logic $4.See Dosen (1990),rules.
(Introduction rules can also be defined, but weomit these here for brevity and because they axe notrequired for the linguistic applications we discuss.
)Note that these operators are strictly formal devicesand not geared towards specific linguistic phenom-ena.
Their use fat the applications described, whichare suggested purely for il lustration, may lead to over-generation in some cases.
4COMMUTATIONThe type AX is assigned to an item of type X whichmay be freely permuted.
A hu  the following infer-ence rules:: : : ?
..(18) ,~'x ~x ~" ~" ~x' ~E  ~-~Prm Prn~X Y Z~X AX YFrom these rules we see that an occurrence of an itemof type X in any position may be derived from an itemof type AX.We may use this operator in a treatment of rein.tivization that will allow not only peripheral extrac-tion as in (198), but also non-peripheral extraction asin (19b):(19) a.
(Here is the paper) which Snzy read.b.
(Here is the paper) which Suzy readquickly.We shall generate these examples by assuming that"which z licenses extraction from any position in thebody of the relative clause.
We may accomplish thisby giving Uwhich~ the type (N \N) / (S /ANP)  (cf.
theextraction operator T of Moortgat (1988)).
This al-lows the derivations in (20a-b) (see Figure 1), whichcorrespond to the lambda-terms in (21a-b) respec-tively:(21) a. wh ich  (Az\[(read z) Suzy\])b. wh ich  (Az\[(qulckly ( read  z)) Suzy\])ITERAT IONThe type X ~ is assigned to an item of type X whichmay be freely permuted and iterated, t has the fol-lowing inference rules:?
.
.?
-- JE xtTPrm - - - - - - -P rm IX Y X t Yf ConX t X t' In  Morrill et 4/.
(1990) we give a system of wodali-ties that differs from the present proposal in several re-spects.
There aretwo unidirectional commutation modal.itiea rathe?
than the single bidirectional sodal i ty givenhere, and a single operational rule is associated with eachof the universal modalities.
We ahto suggest a (more ten-tative) system of swlstenfial modalltles for dealinl$ withelements that are themselves commutable, iterable oroptional.- 2 0 1  -(2o) which Suzy(N\N)/(S/ANP)NPN\Nl).
wldch Suzy readNP(N\N)/(S/~NP)N\N "re~d(NP\S)/NP NP?
/ENP\Sw.S , ,/FS/&NP ./E(NP\S)/NPNP\Squickly(NP\S)\(NP\S) \[~NP\]I rmLX~NP (NP\S)\(NP\S)&ENP "/E.
.
.
.
.
NP\S\ESS/ANP/I'-/E\E(24) wlfich Suzy read(N\N)/(S/NP)')NPN\N(NP\S)/NPwithout((NP\S)\(NP\S))/VPNP\S(NP\S)\(NP\S)Np t'ENP /~.SS/NP1111.IEunderstandingVP/NPVPNP\S.\ E\[NP~p!
ConNp I Np  t'ENP,/E./EPrm t(NP\S)\(NP\S)\E(2s) too longPredP/(ForP/NPII)for Suzy to concentrate(ForP/VP)/NP NP ./F,ForP/VP VP ,/EForPPredPForP, , / PForP/NP u ...... /E\[NP I\] I WknllFigure 1.
Derivations il lustrating use of structural modalities- 202-One or more occurrences of items of type X in anyposition may be derived from an item of type X ~.We may use this modality in t treatment of mul-tiple ?xtraction.
Consider tits parasitic gap construc-tion in (23):(23) (Here is the paper) which Susy read withoutunderstanding.In order to generate both this example and the onesiu (19), we shall now assume that ~which" licensesextraction ot just from any position in the body ofa relative clause, but from any number of positionsgreater than or squad to one.
We may do this by al-tering the type of awhich ~ to (N\N)/(S/NPt).
Sinceh~s 'all the inference rules of A, tl~e derivations in(20) v~iil still go througl, with the new type.
In addi-tion~ the icon inference ~ule allows the derivation of(23) given in (24) (see Figure 1), and the correspond-i,g term in (25/:(25.)
which (Az\[((without (understanding z))(read z)) Suzy\])OPT IONAL ITYThe type X II is assigned to an item of typeX whichmay be freely permuted, iterated and omitted.
I hasthe following inference rules:PrmX ~" '~ 'X nxl l  Y YZero or more occurrences of items of type X in anyposition may be derived from an item of type X ~\[.We n|ay use this modality in a treatment of optional extraction, ors illustrated by (27):(27) a.
(The paper was) ago long for Sezy to read.b.
(The paper was) too long for Susy to readquickly.c.
(The paper was) too long for Suzy to readwitlmut understanding.d.
(The paper was) too long for Suzy to con-centrate.We shall ~ssume for simplicity that ato~-infinitivesare single lexical item~ of typ~ Vp, that ~for-to" clauseshave a special atomic type ForP (so that Yfor ~ hasthe type (ForP/VP)/NP), and that predicate phraseshave a special atomic type PredP.
Given these assign-ments, the type PredP/(ForP/NP:) for "too long swould allow (27a-c), but not (27d).
In order to gener-al.e all four examples, we shall a~sume that %00 long ~liceuses extraction from any number of positions inthe embedded cl/xuse greater than or equal to zero,aud thus give it the type PredP/(PorP/NPIl I. Again,g has all the inference r~les of I generating (2?a-c),and the Wkn It rule allows (27d) to be derived as in(28) (see Figure 1), giviug theterm in (291:(29) too-long (Az\[fo~ ( to-concentrate SuzYl\] ICONCLUSIONSWe have introduced a scheme of p~oof figure~ for Lam-bek c~tegorial gr~mmax in the style of ~atural de.duction, and proposed structural modalities which wesuggest axe suitable for the capture of linguistic sen.eralisations.
It zemxins to extend the ~em~mtic treat-ment of the structural moda\]ities,, to refine the prooftheory, and hence to develo p more efficient parsing at,gorithms.
For the p~eae~t, we.
hope that the proposal~made can be seen as gaining linguistic practicaJity inthe c~tegoria~ description of ~atural Iq~gu~ge, with-out losing mathematical elegance.REFERENCESAdeJ, A.E.
and Steedman, M.J, (1982).
On the orderof words.
Lingwiatice and philomoph~ 4, 517-~58.van Benthem, J.
(1983).
The semantics 0\] varietv incategorial grammar.
Report 83-29, Del~rtment ofMath-ematics, Simon Fraser Unlvemity.
Also in W. Buszkowski,W.
Marciszewsld and J. van Benthem (eds), CategorialGrammar, Volume 25, Linguistic & Literary SCuttles inEastern Europe, John Benj~ndns~ Anmterdam/Philadelpl~ia,57-84.van Benthem, J.
(1987)i Categorial I~rtmunar nd typetheory.
Prepublication Series 87-07, Institute for Lan-guage, Logic and Infqrmation, University of Amsterdam.Doacn, K. (1990).
Modal logic as metalogic, To ap-pear in P. Petkov (ed.
), Proqeedings o\] the "Klecne "90"Con\]crence, Sprir~ger-Ve~lag.Gentffien, G. (1936), On the mea~ngs of ~h o logicalconstants.
In Szabo (ed., 1969), The Collected'Papers o\]Gerhard Gentzen, North Holland t Amsterdam.Girard, J-Y.
(1987).
Linear logic.
Theoretical Com~puLer Science 50, 1-102.Hepple, M. (1990).
Normal form theorem proving forthe Lambek calculus.
In Praeeedtng~ o\]COLING 1990.Hepple, M. and Morrill, G. (1989).
parsing and deriva-atonal equivalence.
In Proceedings o\] the Fowrt b Confer.ence of the European Chapter of tl~e Associa6on \]or Com.putational Linguistics, UMIST, Manche~ster.Hindley, J.R. and Seldin, J.P, (1986).
lntrodution toCombinators and Lambds.Galcui,s.
Cambridge Univer-sity Press, Cambridge,Howard, W. (1980}.
The formulae-u-types notionof coustructiop.
In J.R. Hindley and J.P, Sddin (ads),To ILB.
C~rry; E'ssa~* on Oombinatory Log~, 15ambda,Calcxl~s and Formalism I Academe Prexm, New York m~dLondon, 479-490.Kgnig, E. (1989).
Parsing as natm-al deduction.
InProceedings o\] the ?7Lh Ancwal Meeting oJ tl~e Association\]or Comps~tational Lingwis6cs.Lambs k, J.
(1988).
The mathematics of entence struc-ture.
American Mathematical Monthl~ 65, 154-170.Moortgat, M.: (1988).
Gategorial In~eotinstions: Lo 9.ical and Linguis|i~ Aspects o\] the ~ambek Caks&s.
paris,Dordrecht.
::Morrill, G., Lexlie, N., Hepple, M. ~d Bm'ry, G. (!990).Categorial deduetious and ~tructural operatlmm.
In G.Barry and G. Morrill (eds), E dinb~rDh W#r~infl Papersin CognitDe Science, Volvme #: ttxdie~ ia ~teQorialGrammar, Cent m for Cognitive Scienfe, University of Ed-inburgh.Prawlt~, D~ ( I~) ,  Natural Ded~saLio~: a Proo\] The.orstieal ttnds.
Aimqvlst and Wik0te~l, Upps~d~.Trozlstra, A.S. (1969).
Princ@lss o~ lmtuitioni~m:Lectxr~ Notes in Mathsm,tics VoL ~& Springer-Verlag,- 203  -
