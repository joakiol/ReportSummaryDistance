EXPRESSING DIS JUNCTIVE  AND NEGATIVE  FEATURE CONSTRAINTS WITHCLASS ICAL  F IRST-ORDER LOGIC .Mark Johnson,Cognitive and Linguistic Sciences, Box 1978,Brown University, Providence, RI 02912.mj@cs.brown.eduABSTRACTIn contrast to the "designer logic" approach, thispaper shows how the attribute-value f aturestructures of unif ication grammar andconstraints on them can be axiomatized inclassical first-order logic, which can expressdisjunctive and negative constraints.
Becauseonly quantifier-free formulae are used in theaxiomatization, the satisfiability problem is NP-complete.INTRODUCTION.Many modern linguistic theories, such asLexical-Functional Grammar \[1\], FunctionalUnification Grammar \[12\] Generalized Phrase-Structure Grammar \[6\], Categorial UnificationGrammar \[20\] and Head-dr iven Phrase-Structure Grammar \[18\], replace the atomiccategories of a context-free grammar with a"feature structure" that represents he.syntacticand semantic properties of the phrase.
Thesefeature structures are specified in terms ofconstraints that they must satisfy.
Lexicalentries constrain the feature structures that canbe associated with terminal nodes of thesyntactic tree, and phrase structure rulessimultaneously constrain the feature structuresthat can be associated with a parents and itsimmediate descendants.
The tree is well-formedif and only if all of these constraints aresimultaneously satisfiable.
Thus for thepurposes of recognit ion a method fordetermining the satisfiability of such constraintsis required: the nature of the satisfying featurestructures i of secondary importance.Most work on unif icat ion-basedgrammar (including the references cited above)has adopted a type of feature structure called anattribute-value structure.
The elements in anattribute-value structure come in two kinds:constant elements and complex elements.
Constantelements are atomic entities with no internalstructure: i.e.
they have no attributes.
Complexelements have zero or more attributes, whose173values may be any other element in the structure(including a complex element) and ally elementcan be the value of zero, one or severalattributes.
Attributes are partial: it need not bethe case that every attribute is d ef!ned for everycomplex element.
The set of attribute-valuestructures partially ordered by the subsumptionrelation (together with all additional entity Tthat every attribute-value structure subsumes)forms a lattice, and the join operation on thislattice is called the unification operati(m 119\].Example: (from \[16\]).
The attribute-valuestructure (1) has six complex elements labelledel ... e6 and two corastant elements, ingular andthird.
The complex element el has twoattributes, subj and pred, the value of which arethe complex elements e 2 and e 3 respectively.(1)e2e2?
rnumbersingularelsub j~pred"~e 3verbagr'e6personthirde 7(2) ~pred  )ubi ""5 e,)verbe8 )e l ( )agr..ellThe unification of elements el of(l) and e7 of(2)results in the attribute-value structure (3), theminimal structure in the subsumption latticewhich subsumes both (1)and (2).
?1 ?7(3) ~pred  ~ ubj "~e3 e9 e2 e8 verb.
.
.~e 5 el0a g r ~ a g rnumber personsingular thirdIf constraints on attribute-value structures arerestricted to conjunctions of equality constraints(i.e.
requirements hat the value of a path ofattributes is equal to a constant or the value ofanother path) then the set of satisfying attribute-value structures i the principal filter generatedby the minimal structure that satisfies theconstraints.
The generator of the satisfyingprincipal filter of the conjunction of suchconstraints i the unification of the generators ofthe satisfying principal filters of each of theconjuncts.
Thus the set of attribute-valuestructures that simultaneously satisfy a set ofsuch constraints can be characterized bycomputing the unification of the generators ofthe corresponding principal filters, and theconstraints are satisfiable iff the resultinggenerator is not "T (i.e.
-T- represents unificationfailure).
Standard t,nification-based parsers useunification in exactly this way.When disjunctions and negations ofconstraints are permitted, the set of satisfyingattribute-value structures does not always forma principal filter \[11\], so the simple unification-based technique for determin ing  thesatisfiability of feature structure constraintsmust be extended.
Kasper and Rounds \[11\]provide a formal framework for investigatingsuch constraints by reviving a distinctionoriginally made (as far as I am aware) by Kaplanand Bresnan \[10\] between the language in whichfeature structure constraints are expressed andthe structures that satisfy these constraints.Unification is supplanted by conjunction ofconstraints, and disjunction and negation appearonly in the constraint language, not in thefeature structures themselves (an exception is \[3\]and \[2\], where feature bundles may containnegative arcs).Research in this genre usually follows ageneral pattern: an abstract model for featurestructures and a specialized language forexpressing constraints on such structures are"custom-crafted" to treat some problematicfeature constraint (such as negative featureconstraints).
Table 1 sketches some of thevariety of feature structure models andconstraint ypes that previous analyses haveused.This paper follows Kasper and Roundsand most proposals listed in Table 1 bydistinguishing the constraint language fromfeature structures, and restricts disjunction andnegation to the constraint language alone.
ItTable 1: Constraint Languages and Feature Structure Models.AuthorKaplan and Bresnan \[10\]Model of Feature StructuresPartial functionsConstraint Lanl~ua~e FeaturesDisjunction, negation, set-valuesPereira and Shieber \ [17 \ ]  Information DomainF=\[A- - - )F \ ]+CKasper and Rounds \[11\] Acyclic finite automata DisjunctionMoshier and Rounds \ [14 \ ]  Forcing sets of acyclic finite lntuitionistic negationautomataDawar and Vijayashankar \[3\] Acyclic finite automata Three truth values, negationGazdar, Pullum, Carpenter, Category structures Based on propositional modalKlein, Hukari and Levine \[7\] logicJohnson \[9\] "Attribute-value structures" Classical negation,disjunction...174(A1) For all Constants c and attributes a, a(c) = 3-.
(A2) For all distinct pairs of constants Cl, c2, Cl ~ c2.
(A3) For all attributes a, a(3-) = ?.
(A4) For all constants c, c ~ ?.
(A5) For all te rms  u, v, U = V ~-~ ( U = V A U # ?
)Figure 1: The axiom schemata that define attribute-value structures.differs by not proposing a custom-built"designer logic" for describing featurestructures, but instead uses standard first-orderlogic to axiomatize attribute-value structuresand express constraints on them, includingdisjunctive and negative constraints.
Theresulting system is a simplified version ofAttribute-Value Logic \[9\] which does not allowvalues to be used as attributes (although itwould be easy to do this).
The soundness andcompleteness proofs in \[9\] and other paperslisted in Table 1 are not required here becausethese results are well-known properties of first-order logic.Since both the axiomatizion and theconstraints are actually expressed in a decidableclass of first-order formulae, viz.
quantifier-freeformulae with equality, 1 the decidability offeature structure constraints follows trivially.
Infact, because the satisfiability problem forquantifier-free formulae is NP-complete \[15\] andthe relevant portion of the axiomatization andtranslation of constraints can be constructed inpolynomial time, the satisfiability problem forfeature constraints (including negation) is alsoNP-complete.AXIOMATIZING ATTRIBUTE-VALUESTRUCTURESThis section shows how attr ibute-valuestructures can be axiomatized using first-orderquantifier-free formulae with equality.
In thenext section we see that equality and inequalityconstraints on the values of the attributes canalso be expressed as such formulae, so systemsof these constraints can be solved using standardtechniques uch as the Congruence Closurealgorithm \[15\], \[5\].The elements of the attribute-valuestructure, both constant and complex, togetherwith an additional element ?
constitute thedomain of individuals of the intendedinterpretation.
The attributes are unary partialfunctions over this domain (i.e.
mappings fromelements to elements) which are alwaysundefined on constant elements.
We capturethis partiality by the standard technique ofadding an additional element 3_ to the domain toserve as the value 'undefined'.
Thus a(x) = 3_ if xdoes not have an attribute a, otherwise a(x) is thevalue of x's attribute a.We proceed by specifying the conditionsan interpretation must satisfy to be an attribute-value structure.
Modelling attributes withfunctions automatically requires attributes to besingle-valued, as required.Axiom schema (A1)descr ibes  theproperties of constants.
It expresses therequirement that constants have no attributes.Axiom schema (A2) requires thatdistinct constant symbols denote distinct elementsin any satisfying model.
Without (A2) it wouldbe possible for two distinct constant elements,say s ingu lar  and plura l ,  to denote the sameindividual.
2Axiom schema (A3) and (A4) state theproperties of the "undefined value" 3-.
It has noattributes, and it  is distinct from all of theconstants (and from all other elements as well -this will be enforced by the translation ofequality constraints).This completes the axiomatization.
Thisaxiomatization is finite iff the sets of attributesymbols and constant symbols are finite: in theintended computat ional  and l inguisticapplications this is always the case.
The claim isthat any interpretation which satisfies all of theseThe close relationship between quantifier-free formulae and attribute-value constraintswas first noted in Kaplan and Bresnan \[10\].175Such a schema is required because we areconcerned with satisfiability rather thanvalidity (as in e.g.
logic programming).axioms is an attribute-value structure; i.e.
(A1) -(A4) constitute a definition of attr ibute-valuestructures.Example (continued): The interpretationcorresponding tothe attribute-value structure(1) has as its domain the set D = { el .
.
.
.
.
e6,singular, third, 3-}.
The attributes denotefunctions from D to D. For example, agr denotesthe function whose value is 3_ except on e2 andes, where its values are e4 and e6 respectively.
Itis straight-forward tocheck that all the axiomshold in the three attribute-value structures givenabove.In fact, any model  for these axioms can beregarded as a (poss ib ly  in f in i te  anddisconnected) attribute-value f ature structure,where the model 's individuals are the elementsor nodes,  the unary  funct ions def ine howattributes take their values, the constant symbolsdenote constant elements, and _L is a sink state.EXPRESSING CONSTRAINTS ASQUANTIF IER-FREE FORMULAE.Various notations are currently used to expressat t r ibute-va lue  constraints:  the constra intrequir ing that the value of attr ibute a of (theentity denoted by) x is (the entity denoted by) yis written as (x a> = y in PATR-II \[19\], as (x a) = yin LFG \[10\], and as x(a) = y in \[9\], for example.At the risk of further confusion we use anothernotation here, and write the constraint requiringthat the value of attribute a of x is y as a(x) = y.This notation emphasises the fact that attributesare model led by functions, and simplifies thedefinition of '- ' .Clearly for an attribute-value structureto satisfy the constraint u = v then u and v mustdenote the same element, i.e.
u = v. Howeverthis is not a sufficient condition: num(x) = num(y)is not satisfied if num(x) or num(y) is I .
Thus itis necessary that the arguments of '=' denoteidentical elements distinct from the denotationof_L.Even though there are infinitely manyinstances of the schema in (A5) (since there areinfinitely many terms) this is not problematic,since u = v can be regarded as an abbreviation forU=VAU~: / .Thus equality constraints on attribute-va lue s t ructures  can be expressed withquantifier-free formulae with equality.
We useclassically interpreted boolean connectives toexpress conjunctive, disjunctive and negativefeature constraints.Example (continued): Suppose ach variablexi denotes the corresponding e i, 1 <_i <_11, of(l)and (2).
Then subj(xl) ~ x2,number(x4) =singular and number(agr(x2 ) )= number(x 4)are true, for example.
Since e 4 ande5 are distinct elements, x8 = Xll is false andhence x8 ~Xll  is true.
Thus " ~" means "notidentical to" or "not unified with", rather than"not unifiable with".Further, since agr(xl ) = J-,agr( x l ) = agr(x l ) is false, even thoughagr(xl) = agr(xl) is true.
Thus t = t is not atheorem because of the possibility that t = J_.SATISFACTION AND UNIF ICAT IONGiven any two formulae ~ and q0, the set ofmodels that satisfy both ~) and q0 is exactly the setof models  that satisfy ~ ^ q).
That is, theconjunction operation can be used to describethe intersection of two sets of models each ofwhich is described by a constraint formula, evenif these satisfying models do not form principalfilters \[11\] [9\].
Since conjunction is idempotent,associative and commutative, the satisfiability ofa con junct ion  of const ra int  fo rmulae  isindependent of the order in which the conjunctsare presented,  irrespective of whether  theycontain negation.
Thus the evaluat ion (i.e.s impl i f icat ion)  of const ra ints  conta in ingnegation can be freely interleaved with otherconstraints.Unification identifies or merges exactlythe elements that the axiomatization implies areequal.
The unification of two complex elementse and e' causes the unification of elements a(e)and a(e') for all attributes a that are defined onboth e and e'.
The constraint x = x' impliesa(x) : a(x') in exactly the same circumstances; i.e.when a(x) and a(x') are both distinct from 3-.Unif ication fails either when two di f ferentconstant elements are to be unified, or when acomplex element and a constant element areunified (i.e.
constant-constant clashes and constant-complex clashes).
The constraint  x : x' isunsat i s f iab le  under  exact ly  the samecircumstances, x -~ x' is unsatisfiable when x andx' are also required to satisfy x = c and x' = c' fordistinct constants c, c', since c ~ c' by axiomschema (A2).
x = x" is also unsatisfiable when xand x' are required to satisfy a(x) : t and x' ~ c'176for any attribute a, term t and constant c', sincea(c') = _t_ by axiom schema (A3).Since unif ication is a technique fordetermining the satisfiability of conjunctions ofatomic equal ity constraints, the result of aunification operation is exactly the set of atomicconsequences of the corresponding constraints.Since unif icat ion fails precisely when thecorresponding constraints are unsatisfiable,failure of unification occurs exactly when thecorresponding constraints are equivalent oFalse.Example (continued): The sets of satisfyingmodels for the formulae (1") and (2') are preciselythe principal filters generated by (1) and (2)above.
(1') subj(xl) = x2 ^  agr(x2) = x4 ^number(x4) = singular A pred(xl) = x3 Averb(x3) = x5 A agr(x 5) ~- X6 ^person(x6) = third(2') subj(x7) = x8 ^  agr(x8) = Xll ^ pred(x7) = x9 averb(x9) = Xl0 A agr(xlO) = XllBecause the principal filter generated by theunification of el and e7 is the intersection of theprincipal filters generated by (1) and (2), it isalso the set of satisfying models for theconjunction of (1') and (2') with the formulaXl = x7 (3').
(3') subj(xl) = x 2 ^  agr(x 2) = x4 ^nmber(x4) = singular ^  pred(xl) ~- x3 ^verb(x3) = x5 ^  agr(x5) = x6 ^person(x6) -~ third a subj(x7) = x8 ^agr(x8) = Xll A pred(x7) ~- x9 Averb(x 9) = Xl0 A agr(xlO) = Xll A X 1 ~ X 7 .The satisfiability of a formula like (3') can beshown using standard techniques such as theCongruence Closure Algorithm \[15\], \[5\].
Infact, using the substitutivity and transitivity ofequality, (3') can be simplified to (3").
It is easyto check that (3) is a satisfying model for both(3") and the axioms for attribute-valuestructures.The treatment of negative and disjunctiveconstraints i straightforward.
Since negatiou isinterpreted classically, the set of satisfyingmodels do not ahvays form a filter (i.e.
they arenot always upward closed \[16\]).
Nevertheless,the quantifier-free language itself is capable ofcharacter iz ing exactly the set of featurestructures that satisfy any boolean combinationof constraints, o the failure of upward closure isnot a fatal flaw of this approach.At a methodological level, I claim thatafter the mathematical consequences of twodifferent interpretations of feature structureconstraints have been investigated, such as theclassical and intuitionistic interpretations ofnegation in feature structure constraints \[14\], itis primarily a linguistic question as to which isbetter suited to the description of naturallanguage.
I have been unable to find anylinguistic analyses which can yield a set ofconstraints whose satisfiablity varies under theclassical and intuitionistic interpretations, so thechoice between classical and intuit ionist icnegation may be moot.For reasons of space the fol lowingexample (based on Pereira's example 116\]demonstrat ing a purported problem arisingfrom the failure of upward closure with classicalnegation) exhibits only negative constraints.Example: The conjunction of the formulaenumber(agr(x) ) = singularandagr(x) = y A ~ (pers(y) = 3rd Anumber(y) = singular )can be simplified by substitution and transitivityof equality and boolean equivalences to(4') agr(x) = y A number(y) ~- singular Apers(y) ~ 3rd.This formula is satisfied by the structure (4)when x denotes eand y denotes f. Note thefailure of upward closure, e.g.
(5) does not satisfy(4'), even though (4) subsumes (5).
(3") subj(xl) = x2 A agr(x2) = x4 Anumber(x4) =singular A person(x4) = third Apred(xl) = x3 A verb(x 3) = x5 A agr(xs) = X4 AXl = X7 ^  X2 = X5 ^  X3 = X9 AX5 = Xl0 ^X4 ~- X6 A X4 = X11.177(4) el (5) elnumber number perssingular singular 3rdHowever, if (4') is conjoined withpers(agr(x) ) ~- 3rd the resulting formula (6)/sunsatisfiable since it is equivalent to (6'), and3rd ~ 3rd is unsatisfiable.
(6) agr(x) ~, y ^ number(y) = singular ^pers(y) ~ 3rd ^  pers(agr(x)) =3rd.
(6') agr(x) = y a number(y) ~ singular ^pers(y) = 3rd ^  3rd ~ 3rd.CONCLUSIONThis paper has shown how attribute-valuestructures and constraints on them can beaxiomatized in a decidable class of first-orderlogic.
The primary advantage of this approachover the "designer logic" approach is thatimportant properties of the logic of the featureconstraint language, such as soundness,completeness, decidability and compactness,follow immediately, rather than proven fromscratch.
A secondary benefit is that thesubstantial body of work on satisfiabilityalgorithms for first-order formulae (such asATMS-based techniques that can efficientlyevaluate some disjunctive constraints \[13\]) canimmediately be applied to feature structureconstraints.Further, first-order logic can be used toaxiomatize other types of feature structures inaddition to attribute-value structures (such as"set-valued" elements) and express a widervariety of constraints than equality constraints(e.g.
subsumption constraints).
In general theseextended systems cannot be axiomatized usingonly quanti f ier- free formulae, so theirdecidability may not follow directly as it doeshere.
However  the decision problem forsublanguages of first-order logic has beenintensively investigated \[4\], and there aredecidable classes of first-order formulae \[8\] thatappear to be expressive nough to axiomatize aninteresting variety of feature structures (e.g.function-free universally-quantif ied prenexformulae can express linguistically usefulconstraints on "set-valued" elements).An objection that might be raised to thisgeneral approach is that classical first-orderlogic cannot adequately express the inherently"partial information" that feature structuresrepresent.
While the truth value of any formulawith respect o a model (i.e.
an interpretationand variable assignment function) is completelydetermined, in general there will be manymodels that satisfy a given formula, i.e.
aformula only partially identifies a satisfyingmodel (i.e.
attribute-value structure).
The claimis that this partiality suffices to describe thepartiality of feature structures.BIBLIOGRAPHY.
Bresnan, J.
The Mental Representation ofGrammatical Relations.
1982 The MIT Press.Cambridge, Mass.. Dawar, A. and K. Vijayashanker.
Three-Valued Interpretation ofNegation in FeatureStructure Descriptions.
University ofDelaware Technical Report 90-03.
1989.. Dawar, A. and K. Vijayashanker.
"AThree-Valued Interpretation of Negationin Feature Structures", in The 27th AnnualMeeting of the Association of ComputationalLinguistics, Vancouver, 1989,.
Dreben, B. and W. D. Goldfarb.
TheDecision Problem: Solvable Classes ofQuantificational Formulas.
1979 Addison-Wesley.
Reading, Mass.. Gallier, J. H. Logic for Computer Science.1986 Harper and Row.
New York.. Gazdar, G., E. Klein, G. Pullum and I. Sag.Generalized Phrase Structure Grammar.
1985Blackwell.
Oxford, England.. Gazdar, G., G. K. Pullum, R. Carpenter, E.Klein, T. E. Hukari and R. D.
Levine.
"Category Structures."
ComputationalLinguistics.
14.1:1 - 20, 1988.. Gurevich, Y.
"The Decision Problem forStandard Classes."
JSL.
41.2: 460-464, 1976.. Johnson, M. Attribute-Value Logic and theTheory of Grammar.
CSLI Lecture NotesSeries.
1988 University of Chicago Press.Chicago.17810.11.12.13.14.15.16.17.18.19.Kaplan, R. and J. Bresnan.
"Lexical-functional grammar, a formal system forgrammatical representation," in TheMental Representation of GrammaticalRelations, Bresnan ed., 1982 The MIT Press.Cambridge, Mass.Kasper, R. T. and W. C. Rounds.
"A logicalsemantics for feature structures", in TheProceedings ofthe 24th Annual Meeting of theAssociation for Computational Linguistics,Columbia University, New York, 1986,257-266.Kay, M. "Unification in Grammar," inNatural Language Understanding and LogicProgramming, Dahl and Saint-Dizier ed.,1985 North Holland.
Amsterdam, TheNetherlands.Maxwell, J. T., III and R. Kaplan.
"AnOverview of Disjunctive ConstraintSatisfaction", in International Workshop onParsing Technologies, Pittsburgh, PA., 1989,18 - 27.
Carnegie Mellon.Moshier, M. D. and W. C. Rounds.
"Alogic for partially specified datastructures", in The ACM Symposium on thePrinciples of Programming Languages,Munich, Germany, 1987, Association forComputing Machinery.Nelson, G. and D. C. Oppen.
"FastDecision Procedures based on CongruenceClosure."
J. ACM.
27.2: 245-257, 1980.Pereira, F. C. N. "Grammars and Logics ofPartial Information", in The Proceedings ofthe International Conference on LogicProgramming, Melbourne, Australia, 1987.Pereira, F. C. N. and S. M. Shieber.
"Thesemantics of grammar formalisms seen ascomputer languages", in COLING-84,Stanford University, 1984, 123-129.
TheAssociat ion for Computat iona lLinguistics.Pollard, C. and I.
Sag.
Information-basedSyntax and Semantics, Volume 1.
CSLILecture Notes.
1987 Chicago UniversityPress.
Chicago.Shieber, S. M. An Introduction toUnification-based Approaches to Grammar.17920.CSLI Lecture Notes Series.
1986 Universityof Chicago Press.
Chicago.Uszkoreit, H. "Categorial unificationgrammar", in COLtNG-86, 1986, 187-194.
