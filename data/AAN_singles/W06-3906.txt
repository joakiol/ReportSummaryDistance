Controlled Language for GeographicalInformation System QueriesSela Mador-Haim, Yoad Winter, and Anthony BraunTechnion I.I.Tselam@ cs.
technion.
ac.
il,winter@ cs.
technion.
ac.
il ,tonyb@ geofocus.
co. ilAbstractNatural language interfaces to spatial databases have not received a lot of attentionin computational linguistics, in spite of the potential value of such systems forusers of Geographical Information Systems (GISs).
This paper presents a controlledlanguage for GIS queries, solves some of the semantic problems for spatial inferencein this language, and introduces a system that implements this controlled languageas a novel interface for GIS.1 IntroductionGeographical Information Systems (GISs) are information systems for pro-cessing of data that pertain to spatial or geographic coordinates [14].
Eventhough GISs are enjoying a rapidly growing users community, the currentsystems are often difficult to use or require a long learning process [13].
Inthe GIS literature [15,16,5,8], it has been well-acknowledged that natural lan-guage interfaces (NLIs) would significantly enhance the exploitation of themore complex features of GISs, yet despite the potential value of NLIs forGISs, the work on this subject has so far been rather limited [16].
To the bestof our knowledge, existing NLIs for GISs are limited in scope and expressivepower and lack the ability to express complex relationships over spatial en-tities.
Some works ([9,17,12]) have demonstrated NLIs using databases thatcontain geographically related data.
Those databases, however, lack any ac-tual spatial information (e.g.
geometric polygons representing buildings), andtherefore do not deal with the problem of inferring spatial relations from suchrepresentations.In general, the design of NLIs to databases is regarded as a difficult problemsince human interaction is often vague, ambiguous or highly contextualized[15,1].
The approach we take in this paper is to avoid many of these problemsby designing a system that uses a controlled language for GIS queries.
Suchcontrolled languages [10,11], which are based on fragments of English, can bedesigned in a way that minimizes the use of vague, ambiguous and context-dependent expressions, while maintaining the ability to express very complexqueries in a language that is a subset of English.
We benefit from the factthat GISs are a closed, well-defined domain, which enables us to focus ondata independent parts of the language.
We show that the addition of datadependent portions can be done semi-automatically and requires very loweffort.Our implementation of an NLI for GISs involves four major tasks: first,defining the data independent lexicon, which was done using simple applicativecategorial grammar (Ajdukiewicz-Bar-Hillel calculus).
Second, we develop asuitable semantic representation for GIS queries, which we call ?SQL, and amethod to translate natural-language queries via ?SQL into spatially-enabledSQL.
The third task is defining of the semantics of spatial relations (esp.prepositions) in the lexicon in accordance with the intuitive understanding ofsuch relations, which involves tackling certain aspects of spatial prepositionsthat where never dealt with before.
The fourth task is the development ofmethods to add the data dependent portion of the lexicon with minimal effort,including an automatic tool that generates lexical entries from the actualgeographical database in use.The paper is organized as follows: Section 2 introduces ?SQL and de-scribes the translation scheme from natural language into SQL queries.
Sec-tion 3 reviews the architecture of the lexicon.
Section 4 discusses semanticissues concerning spatial relations in natural languages.
Section 5 presentsour implementation, and section 6 concludes.2 A compositional approach for building SQL queriesSQL is a recursive language in the sense that it allows using one query as partof an expression within another query.
However, due to its complex syntax,the construction of an SQL query in a compositional way from a query innatural language is far from being a straightforward task.
One way to tacklethis problem is by using an intermediate representation [4,10].
While suchan intermediate language avoids the complications of composing SQL queriesdirectly, its downsides are the additional translation phase it requires and thefact that such intermediate languages are usually not as expressive as thetarget language.We introduce an intermediate representation language, which we call ?SQL.This language only adds the necessary ?compositional glue?
to SQL.
As a re-sult, only a simple translation process is necessary to convert ?SQL queriesinto normal SQL syntax.
?SQL expressions are basically expressions in thesimply typed ?
Calculus with the addition of syntactic sugar for SQL-likesyntax.The typical syntax of a select SQL-command for querying a database is:SELECT < selectlist > FROM < tablelist > WHERE < whereclause >;The selectlist parameter is usually a list of fields to be displayed, but it alsoallows other expressions such as aggregate functions (e.g.
field summation).The tablelist parameter is a list of tables to query and whereclause is aboolean expression that restricts the rows in the query.The syntax of ?SQL is very close to that of an SQL whereclause, withthe addition of ?
operators.
The atoms of ?SQL are real numbers, stringsand typed identifiers.
The base types in ?SQL are: t - Boolean, r - realnumbers, str - strings, g - spatial data and e - entries in the database.
Thesebase types correspond to the base types that are found in GIS databases, withthe addition of one additional type, e, for database entries (tuples).
Complexexpressions are built from atomic ones using function application exp1(exp2),infix operators exp1 op exp2, and the operators ?v.exp and ?v.exp.
Theinfix operators in ?SQL correspond to SQL operators, and include BooleanAND/OR, arithmetic operators (+,?, ?, /) and comparators (>,<,=, <=, >=, !
=).
One additional important operator in ?SQL is the dot operator,as in var.fieldname, where var is of type e and fieldname is a function fromentries in the database to entities of a basic type (i.e.
it is of type et, er or es).A dot expression is equivalent to fieldname(var), a function that returns thevalue of a field of a given entry.In general, the only two syntactic elements in ?SQL that do not corre-spond directly to SQL syntax are the ?
and ?
operators.
Translation from?SQL expressions to SQL queries is done by recursive traversal over the ex-pression.
During traversal, whenever certain patterns are recognized, thesepatterns are replaced by a corresponding SQL select statement.
Each ?
op-erator corresponds to a select statement, which can be nested inside anotherselect.
In addition to ?
operators, three different synthetic elements may affectthe translation pattern:P1 A function over a ?
expressions, as in f(?v.exp), is treated as an aggregatefunction.P2 In the simplest pattern, the type of the variable x in ?x is e, and itcorresponds to a query that returns a set of entries.
When the variable thatthe ?
operator binds is of any other base type, the pattern: ?x.?y.
(x = exp1AND y.layer =??
layer1??
AND exp2) is expected, which is translated intoSELECT exp1 FROM layer1 WHERE exp2.P3 Any additional ?
operator which is not part of the pattern above is trans-lated as a table join (where tablelist parameter contains more than onequery).
For example, the expression ?xe.?ye.
(x.layer = ?layer1??
ANDy.layer = ?layer2??
AND exp) is translated into: SELECT x.
* FROMlayer1 AS x, layer2 AS y WHERE exp.
Each additional ?
adds an addi-tional table to the list.The translation process is guaranteed to be successful due to constraintsover the ?SQL expressions in the lexicon that enforce conformity to the abovepatterns.
As an example for ?SQL, consider the following fragment from ourlexicon:Word Category Semanticsbuildings N ?xe.
(x.layeres = ?building?
)with N\N/N ?n1et.?n2et.?xe.
(n1(x) AND n2(x))more than Rs/R ?nr.?xr.
(x > n)two R 2floors N\Rs ?prt.
?xe.p(x.floorser)highest N/N ?net.?xe.
(n(x) AND (x.heighter =max(rt)r(?rr.?ye.
(n(y) AND r = y.heighter))))Category R in the above table corresponds to type r and Rs correspondsto the type (rt).The natural language expression ?buildings with more than two floors?will be parsed into the ?SQL expression: ?xe.
(x.layeres = ?building?
ANDx.floorser > 5).
Note that while functional applications during parsing elimi-nated most ?
operators, the ?
operator that is introduced by the lexical entryfor buildings is not eliminated.
This remaining ?xe is used to describe aquery over a variable x.
In order to generate an SQL query, however, oneadditional piece of information is required: the name of a table to query.
Thisinformation is provided via the layer keyword (layers, or feature sets in GISterminology, are equivalent to tables in general databases).
While usuallythe fieldname following the dot operator is a name for an actual field in thedatabase (such as floors in the above example), layer is a virtual attributein ?SQL, used to associate a layer with a variable.
Whenever an expressionsuch as x.layeres = ?building?
is found, the parser associates x with the table?building?, and hence the above expression is translated into the SQL query:SELECT x.
* FROM building AS x WHERE x.floors>5;A bit more complex example is the query ?highest buildings?, which istranslated into: ?xe.
(x.layeres = ?building??
AND x.heighter = max(rt)r(?rr.?ye.
(y.layeres =??
building??
AND r = y.heighter)))).
This expression demon-strates several features of ?SQL.
Note that max is a free identifier, which isexpected to be a name of an SQL function.
The function max receives a ?expression, and is therefore interpreted as an aggregate function.
Finally, theexpression in the argument of max fits pattern P2 above, and the result is:SELECT x.
* FROM building AS x WHERE x.floors=(SELECT max(y.floors)FROM building);3 Lexicon architectureThe data independent part of the lexicon is the core of our controlled lan-guage.
This is the part of the lexicon that involves general logical and spatialoperators that do not depend on the actual GIS.
By carefully selecting thedata-independent lexical items, we are able to express very complex querieswhile avoiding vagueness and ambiguity problems that often undermine theusability of NLIs.
An important part of our work is the ability to expressspatial relations between GIS objects.
However, non-spatial lexical items arean important part of the lexicon as well.
In the first part of this section we de-scribe the non-spatial items in the lexicon.
In the following part we review thespatially-related lexical items.
Finally we present classes of data-dependentlexical items.3.1 Non-spatial lexical itemsNon-spatial lexical items can be partitioned into the following groups:?
Measure units, such as meters, kilometers, miles, acres.
The lexical def-inition for these items converts any unit into standard units (e.g.
metricunits).?
Numerical predicates, such as less than n, at least n, between n and m.Numerical predicates represent sets of real numbers.?
Superlatives: biggest, smallest, most, least.
The words most and least canbe used to refer to the maximal or minimal value of any numerical field in thedatabase.
Other words such as largest and longest are used as abbreviationfor ?most area?
and ?most length?.?
Boolean connectives: and, or, not.?
Other lexical entries: that, which, is, are, with, without, have.3.2 Spatial lexical itemsAs mentioned before, we aim to design a controlled language that would avoidthe pitfalls of vagueness and context-dependent ambiguity.
In order to satisfythis requirement, we need to avoid vague qualitative relations such as near, farand almost.
Another type of relations that need to be avoided are projectiverelations such as in front of, behind, left and right.
The meaning of theseprepositions involves context-dependent[6] elements that are hard to handlewithin a controlled language.The following spatial relations are included in the lexicon:?
Intersectional relations, following Egenhofer?s 9-intersection model [3]: in,outside of, borders, overlaps, crosses, contains and intersects.
Note thatonly the first two expressions are prepositions, while the others are verbs.?
Distance: the word from is used to specify exact distance, as in ?200m froma lake?.?
Constructors: intersection of, border of and center of.
These words areused to refer to spatial entities that do not exist in the database, but canbe derived from existing objects.
For example, assuming ?42nd Street?
and?Broadway?
are objects in the database, ?the intersection of 42nd streetand Broadway?
can be constructed by intersecting the geometrical repre-sentations of the two streets.?
Relative orientation: north of, south east of and the 3-place relation betweenare all used to describe the orientation of one object relative to anotherobject (or objects, as in the case of between).?
Superlatives: closest and furthest are spatially-related superlatives.3.3 Data-dependent lexical itemsData dependent lexical items are lexical items that refer to specific data insidethe database and may therefore change from one data set to another.
GISdata are divided into separate thematic feature classes or layers, whereby eachlayer consists of one type of geometrical entity such as a building, street orutility pole.
For each layer there is usually an associated set of attributes thatrepresent non-spatial data attached to real world geometric objects.
Thesemay be boolean data, numeric data or strings.
Examples for such attributesare the number of floors in a building or the name of a street.
String valuessuch as street names should be part of the lexicon as well.Data-dependent items are represented in the lexicon in the form of tem-plates, which are lexical items with parametrized values for layer name, at-tribute name and attribute value.
An example for such a template is:?#strval?
N/N{l = #layer} ?n.?x.
(n(x) AND (x.#attr like #strval))The ?#strval?
template defines lexical items that refer to strings inside thedatabase.
The lexical analyzer searches the database for strings that matchlexical tokens that are not present in the lexicon.
For each such string theabove template is instantiated with the relevant layer name, attribute nameand string value.
Similar templates are used for layer names and attributes ofvarious types.
In case the lexical entries need to be different than the actualnames in the database, a definition file is used to add those lexical items andinstantiate the relevant templates for those items.
No knowledge in ?SQL isrequired in order to edit the definition file.4 Semantics of spatial prepositionsWhile some progress was made in semantic theories of prepositional phrasesin recent years [18,7], certain aspects of spatial linguistic phenomena havenot been extensively treated in the semantic literature, but are neverthelesscrucial for interfaces to spatial databases.
Two such aspects that are treatedin our system and are discussed below.4.1 Eigenspace vs. Existential semanticsWhile previous work on prepositional semantics mainly dealt with relation-ships between two distinct objects, GIS queries often correspond to relation-ships between sets of objects.
Consider the query ?buildings that are up to200m from a lake?.
In case there is more than one lake, we expect the systemto return any building such that there is at least one lake up to 200m from it.In other words, it appears like the query existentially quantifies over lakes.
Onthe other hand, if we change the query to ?buildings that are at least 200mfrom a lake?, we would expect the system to return buildings that are over200m away from all the lakes.
The query ?buildings that are between 200mand 500m from a lake?
has a yet more complex semantics, and should resultin any building such that there is at least one lake less than 500m from it andthere is no lake less than 200m from it.The semantics of the above three queries becomes much clearer, however,when instead of interpreting the indefinite ?a lake?
as a quantifier (existential,universal or other) over the lakes in the database, ?a lake?
is interpreted as theset of all lakes, and distance is measured with respect to the space taken bythe union of all lakes.
We refer to this kind of interpretation for indefinites aseigenspace semantics.
In SQL, the eigenspace of a set of objects is evaluatedby using the aggregate function GeomUnion over a set of objects, as in:SELECT geomunion(x.the geom) FROM lake AS x;In our framework, eigenspace semantics is treated by enabling a type-shifting from an indefinite noun-phrase into a special category G used forrepresenting the eigenspace.
The ?SQL expression for G/N type-shifting is:?n.geomunion(?g.?x.
(n(x) AND g = x.the geom)) where the geom is theattribute for the geometrical data of an object in GIS database.
The ?SQLexpression for the preposition from, of category (((N\N)\RS)/G), is thendefined by: ?g.?p.?n.?x.
(n(x) AND p(distance(x.the geom, g))).It is important to note that while eigenspace semantics are used for spatialprepositions, in the case of other spatial relations that are not expressed usingprepositions, such as the verbs contains and intersects, an indefinite is treatedin the usual way, as an existential quantifier.
For example, if we ask about?towns that contain a building with more than 10 floors?, the eigenspace se-mantics would mean finding a town than contains all buildings with more thanone floor, whereas we expect to get any town that contains at least one buildingFig 1.
Example for between Fig 2.
Query result in QGISwith more than 10 floors.
We achieve the correct semantics in this case by pro-viding a ?SQL expression for verbs such as contains that existentially quanti-fies over the set of contained objects: ?n1.?n2.?x.?y.
(n1(y) AND n2(y) ANDcontains(x.the geom, y.the geom)).4.2 Semantics of betweenAn additional aspect of spatial relations that has so far been ignored in the se-mantic literature concerns the relations between non-convex objects.
A funda-mental spatial relation which is quite problematic in the context of non-convexobjects is the 3-place relation between.Zwarts and Winter [18] suggest the following definition for between: X isbetween Y and Z if X ?
convexHull(Y ?Z)\Y \Z, for convex objects in X, Yand Z.
The problem is that many objects we deal with in the context of GISsare not convex.
For example, it could be quite handy to talk about objectsbetween two streets.
However, streets are often non-convex shapes.
As canbe seen in figure 1, the convex hull for two streets represented by the solidlines includes areas that do not agree with our understanding of the expressionbetween the two streets.
In order to overcome this problem, we suggest thefollowing definition:Definition 4.1 Let X, Y and Z be sets of points.
We say that X is betweenY and Z iff either there is a point x on the border of Y such that the shortestline connecting x to Z crosses X, but does not cross Y, or there is a point y onthe border of Z such that the shortest line connecting y to Y crosses X, butdoes not cross Z.The areas between the streets according to Definition 1 are marked bystripes.
As can be seen from the illustration, the new definition is morein agreement with our intuitive understanding of between.
Note that whilethe above is a strictly spatial definition of between, in some contexts peoplemay use between in sloppier ways (e.g., Buxton is between Manchester andSheffield).
In our system, however, we wish to avoid the vagueness of suchsloppy usages.5 ImplementationThe NLI presented in this paper was implemented in C++.
The parser readsthe lexicon from a text file that includes the syntactic categories, and the se-mantics is represented using ?SQL expressions for all data-independent lexicalitems.
Data-dependent items are represented using templates, as explained insection 3.3.
When the user enters a natural-language query, the query is parsedusing a bottom-up right-to-left tabular Combinatorial Categorial Grammar(CCG) parser that was developed as part of the NLI prototype.
The resulting?SQL expression is then converted into an SQL query as explained in section2, which is sent to a spatially enabled database engine.The system presented here uses PostGIS (http://postgis.refractions.net/)as a back-end.
PostGIS is an open-source GIS extension to the PostgreSQLdatabase engine, which implements the OpenGIS ?Simple features specifica-tion for SQL?
standard [2].
PostGIS basically supplies a set of functions thatoperate on vector representations, such as a function that calculates distancebetween polygons.
The SQL queries are sent to PostGIS, which generates theresult in a form of a table which is loaded into a GIS front-end that supportsPostGIS, such as QGIS (http://www.qgis.org).For example, the query ?Buildings that are up to 500m from the intersec-tion of Elm street and Oak street?
are converted into the SQL query, whichgenerates the result in figure 2:(SELECT x.
* FROM building AS x WHERE distance(x.the geom, intersection((SELECT GeomUnion(x2.the geom) FROM street AS x2 WHERE x2.street namLIKE ?elm?
),(SELECT GeomUnion(x3.the geom) FROM street AS x3 WHEREx3.street nam LIKE ?oak?
)))<=500)6 Conclusions and future workThis work has presented an interface to GISs that is based on a controlledfragment of English.
We believe to have demonstrated that it is possible tobuild such usable interfaces and express quite complex queries using a simplefragment of English.
Future work on this subject can be done at several dif-ferent levels: expanding the lexicon further by adding quantifiers, comparisonbetween attributes of different objects and possibly anaphoric expressions.More thorough theoretical study is required regarding semantic issues suchas eigenspace and between presented here, and finally, an empirical study isnecessary to evaluate how usable such interfaces are for actual GIS users ofvarying skills and needs.
We believe, however, that the general architectureand prototype demo interface that we suggest can be developed into a usefultool for planners and other professional users of GISs.References[1] I. Androutsopoulos and G. Ritchie.
Database interfaces.
In R. Dale, H. Moisl,and H. Somers, editors, Handbook of Natural Language Processing, chapter 9,pages 209?240.
Marcel Dekker Inc., 2000.
[2] Open Geospatial Consortium.
Simple Features Specification for SQL.
http://www.opengis.org/docs/99-049.pdf.
[3] M. Egenhofer and J.
Herring.
Categorizing binary topological relations betweenregions, lines and points in geographic databases.
Technical report, Departmentof Surveying Engineering, University of Maine, Orono, ME, 1991.
[4] P.P.
Filipe and N.J. Mamede.
Databases and natural language interfaces.
InJISBD 2000, pages 321?332, 2000.
[5] A.U.
Frank and D.M.
Mark.
Language issues for GIS.
In D. MacGuire,M.F.
Goodchild, and D. Rhind, editors, Geographical Information Systems:Principles and Applications, pages 147?163.
Wiley, New York, 1991.
[6] A. Hershkovits.
Language and Spatial Cognition: an interdisciplinary study ofthe prepositions in English.
Cambridge University Press, Cambridge, 1986.
[7] M. Kracht.
On the semantics of locatives.
Linguistics and Philosophy, 25:157?232, 2002.
[8] D.M Mark, S. Svorou, and D. Zubin.
Spatial terms and spatial concepts:Geographic, cognitive and linguistic perspectives.
In International GeographicInformation Systems (IGIS), pages 101?112, Arlington, VA, 1987.
[9] M. Minock.
A phrasal approach to natural language interfaces over databases.In NLDB-2005, Alicante, Spain, June 2005.
[10] R. Nelken and N. Francez.
Querying temporal databases using controllednatural language.
In COLING 2000 - Volume 2, pages 1076?1080, 2000.
[11] I. Pratt.
Temporal prepositions and their logic.
Artificial Intelligence, 166(1?2):1?36, 2005.
[12] Mukesh Kumar Rohil.
Natural language processing to query a geographicinformation system(india) knowledgebase.
In Map India, India, 2000.
[13] I. Schlaisich and M. Egenhofer.
Multimodal spatial querying: What peoplesketch and talk about.
In C. Stephanidis, editor, 1st International Conferenceon Universal Access in Human-Computer Interaction, pages 732?736, NewOrleans, LA, August 2001.
[14] J.
Star and J. Estes.
Geographic Information System, An Introduction.
PrenticeHall, Englewood Cliffs, NJ, 1990.
[15] Fangju Wang.
Handling grammatical errors, ambiguity and impreciseness inGIS natural language queries.
Transactions in GIS, 7(1):103?121, 2003.
[16] H. Wang, A.M MacEachren, and G. Cai.
Design of human-GIS dialoguefor communication of vague spatial concepts based on human communicationframework.
In GIScience 2004, Adelphi, MD, 2004.
[17] J.M.
Zelle and R.J. Mooney.
Learning to parse database queries usinginductive logic programming.
In Thirteenth National Conference on AritificialIntelligence, pages 1050?1055, Portland, OR, August 1996.
[18] J. Zwarts and Y.
Winter.
Vector space semantics: a modeltheoretic analysis oflocative prepositions.
Journal of Logic, Language and Information, 9:171?213,2000.
