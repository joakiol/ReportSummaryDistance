Proceedings of the ACL 2010 System Demonstrations, pages 1?6,Uppsala, Sweden, 13 July 2010. c?2010 Association for Computational LinguisticsGrammar Prototyping and Testing with theLinGO Grammar Matrix Customization SystemEmily M. Bender, Scott Drellishak, Antske Fokkens, Michael Wayne Goodman,Daniel P. Mills, Laurie Poulson, and Safiyyah SaleemUniversity of Washington, Seattle, Washington, USA{ebender,sfd,goodmami,dpmills,lpoulson,ssaleem}@uw.edu,afokkens@coli.uni-saarland.deAbstractThis demonstration presents the LinGOGrammar Matrix grammar customizationsystem: a repository of distilled linguis-tic knowledge and a web-based servicewhich elicits a typological description ofa language from the user and yields a cus-tomized grammar fragment ready for sus-tained development into a broad-coveragegrammar.
We describe the implementationof this repository with an emphasis on howthe information is made available to users,including in-browser testing capabilities.1 IntroductionThis demonstration presents the LinGO Gram-mar Matrix grammar customization system1 andits functionality for rapidly prototyping grammars.The LinGO Grammar Matrix project (Bender etal., 2002) is situated within the DELPH-IN2 col-laboration and is both a repository of reusablelinguistic knowledge and a method of deliveringthis knowledge to a user in the form of an ex-tensible precision implemented grammar.
Thestored knowledge includes both a cross-linguisticcore grammar and a series of ?libraries?
contain-ing analyses of cross-linguistically variable phe-nomena.
The core grammar handles basic phrasetypes, semantic compositionality, and general in-frastructure such as the feature geometry, whilethe current set of libraries includes analyses ofword order, person/number/gender, tense/aspect,case, coordination, pro-drop, sentential negation,yes/no questions, and direct-inverse marking, aswell as facilities for defining classes (types) of lex-ical entries and lexical rules which apply to thosetypes.
The grammars produced are compatiblewith both the grammar development tools and the1http://www.delph-in.net/matrix/customize/2http://www.delph-in.netgrammar-based applications produced by DELPH-IN.
The grammar framework used is Head-drivenPhrase Structure Grammar (HPSG) (Pollard andSag, 1994) and the grammars map bidirectionallybetween surface strings and semantic representa-tions in the format of Minimal Recursion Seman-tics (Copestake et al, 2005).The Grammar Matrix project has three goals?one engineering and two scientific.
The engineer-ing goal is to reduce the cost of creating gram-mars by distilling the solutions developed in exist-ing DELPH-IN grammars and making them easilyavailable for new projects.
The first scientific goalis to support grammar engineering for linguistichypothesis testing, allowing users to quickly cus-tomize a basic grammar and use it as a medium inwhich to develop and test analyses of more inter-esting phenomena.3 The second scientific goal isto use computational methods to combine the re-sults of typological research and formal syntacticanalysis into a single resource that achieves bothtypological breadth (handling the known range ofrealizations of the phenomena analyzed) and ana-lytical depth (producing analyses which work to-gether to map surface strings to semantic represen-tations) (Drellishak, 2009).2 System OverviewGrammar customization with the LinGO Gram-mar Matrix consists of three primary activities:filling out the questionnaire, preliminary testing ofthe grammar fragment, and grammar creation.2.1 QuestionnaireMost of the linguistic phenomena supported by thequestionnaire vary across languages along multi-ple dimensions.
It is not enough, for example,3Research of this type based on the Grammar Matrixincludes (Crysmann, 2009) (tone change in Hausa) and(Fokkens et al, 2009) (Turkish suspended affixation).1simply to know that the target language has coor-dination.
It is also necessary to know, among otherthings, what types of phrases can be coordinated,how those phrases are marked, and what patternsof marking appear in the language.
Supporting alinguistic phenomenon, therefore, requires elicit-ing the answers to such questions from the user.The customization system elicits these answers us-ing a detailed, web-based, typological question-naire, then interprets the answers without humanintervention and produces a grammar in the formatexpected by the LKB (Copestake, 2002), namelyTDL (type description language).The questionnaire is designed for linguists whowant to create computational grammars of natu-ral languages, and therefore it freely uses techni-cal linguistic terminology, but avoids, when possi-ble, mentioning the internals of the grammar thatwill be produced, although a user who intends toextend the grammar will need to become familiarwith HPSG and TDL before doing so.The questionnaire is presented to the user as aseries of connected web pages.
The first page theuser sees (the ?main page?)
contains some intro-ductory text and hyperlinks to direct the user toother sections of the questionnaire (?subpages?
).Each subpage contains a set of related questionsthat (with some exceptions) covers the range ofa single Matrix library.
The actual questions inthe questionnaire are represented by HTML formfields, including: text fields, check boxes, ra-dio buttons, drop-downs, and multi-select drop-downs.
The values of these form fields are storedin a ?choices file?, which is the object passed onto the grammar customization stage.2.1.1 Unbounded ContentEarly versions of the customization system (Ben-der and Flickinger, 2005; Drellishak and Bender,2005) only allowed a finite (and small) numberof entries for things like lexical types.
For in-stance, users were required to provide exactly onetransitive verb type and one intransitive verb type.The current system has an iterator mechanism inthe questionnaire that allows for repeated sections,and thus unlimited entries.
These repeated sec-tions can also be nested, which allows for muchmore richly structured information.The utility of the iterator mechanism is mostapparent when filling out the Lexicon subpage.Users can create an arbitrary number of lexicalrule ?slots?, each with an arbitrary number ofmorphemes which each in turn bear any num-ber of feature constraints.
For example, theuser could create a tense-agreement morpholog-ical slot, which contains multiple portmanteaumorphemes each expressing some combination oftense, subject person and subject number values(e.g., French -ez expresses 2nd person plural sub-ject agreement together with present tense).The ability provided by the iterators to createunbounded content facilitates the creation of sub-stantial grammars through the customization sys-tem.
Furthermore, the system allows users to ex-pand on some iterators while leaving others un-specified, thus modeling complex rule interactionseven when it cannot cover features provided bythese rules.
A user can correctly model the mor-photactic framework of the language using ?skele-tal?
lexical rules?those that specify morphemes?forms and their co-occurrence restrictions, but per-haps not their morphosyntactic features.
The usercan then, post-customization, augment these ruleswith the missing information.2.1.2 Dynamic ContentIn earlier versions of the customization system, thequestionnaire was static.
Not only was the num-ber of form fields static, but the questions werethe same, regardless of user input.
The currentquestionnaire is more dynamic.
When the userloads the customization system?s main page orsubpages, appropriate HTML is created on the flyon the basis of the information already collectedfrom the user as well as language-independent in-formation provided by the system.The questionnaire has two kinds of dynamiccontent: expandable lists for unbounded entryfields, and the population of drop-down selec-tors.
The lists in an iterated section can be ex-panded or shortened with ?Add?
and ?Delete?
but-tons near the items in question.
Drop-down selec-tors can be automatically populated in several dif-ferent ways.4 These dynamic drop-downs greatlylessen the amount of information the user mustremember while filling out the questionnaire andcan prevent the user from trying to enter an invalidvalue.
Both of these operations occur without re-freshing the page, saving time for the user.4These include: the names of currently-defined features,the currently-defined values of a feature, or the values of vari-ables that match a particular regular expression.22.2 ValidationIt makes no sense to attempt to create a consis-tent grammar from an empty questionnaire, an in-complete questionnaire, or a questionnaire con-taining contradictory answers, so the customiza-tion system first sends a user?s answers through?form validation?.
This component places a setof arbitrarily complex constraints on the answersprovided.
The system insists, for example, thatthe user not state the language contains no deter-miners but then provide one in the Lexicon sub-page.
When a question fails form validation, itis marked with a red asterisk in the questionnaire,and if the user hovers the mouse cursor over the as-terisk, a pop-up message appears describing howform validation failed.
The validation componentcan also produce warnings (marked with red ques-tion marks) in cases where the system can gen-erate a grammar from the user?s answers, but wehave reason to believe the grammar won?t behaveas expected.
This occurs, for example, when thereare no verbal lexical entries provided, yielding agrammar that cannot parse any sentences.2.3 Creating a GrammarAfter the questionnaire has passed validation, thesystem enables two more buttons on the mainpage: ?Test by Generation?
and ?Create Gram-mar?.
?Test by Generation?
allows the user to testthe performance of the current state of the gram-mar without leaving the browser, and is describedin ?3.
?Create Grammar?
causes the customiza-tion system to output an LKB-compatible grammarthat includes all the types in the core Matrix, alongwith the types from each library, tailored appropri-ately, according to the specific answers providedfor the language described in the questionnaire.2.4 SummaryThis section has briefly presented the structureof the customization system.
While we antici-pate some future improvements (e.g., visualiza-tion tools to assist with designing type hierarchiesand morphotactic dependencies), we believe thatthis system is sufficiently general to support theaddition of analyses of many different linguisticphenomena.
The system has been used to createstarter grammars for more than 40 languages in thecontext of a graduate grammar engineering course.To give sense of the size of the grammarsproduced by the customization system, Table 1compares the English Resource Grammar (ERG)(Flickinger, 2000), a broad-coverage precisiongrammar in the same framework under develop-ment since 1994, to 11 grammars produced withthe customization system by graduate students ina grammar engineering class at the University ofWashington.
The students developed these gram-mars over three weeks using reference materialsand the customization system.
We compare thegrammars in terms of the number types they de-fine, as well as the number of lexical rule andphrase structure rule instances.5 We separatetypes defined in the Matrix core grammar fromlanguage-specific types defined by the customiza-tion system.
Not all of the Matrix-provided typesare used in the definition of the language-specificrules, but they are nonetheless an important part ofthe grammar, serving as the foundation for furtherhand-development.
The Matrix core grammar in-cludes a larger number of types whose function isto provide disjunctions of parts of speech.
Theseare given in Table 1, as ?head types?.
The final col-umn in the table gives the number of ?choices?
orspecifications that the users gave to the customiza-tion system in order to derive these grammars.3 Test-by-generationThe purpose of the test-by-generation feature is toprovide a quick method for testing the grammarcompiled from a choices file.
It accomplishes thisby generating sentences the grammar deems gram-matical.
This is useful to the user in two mainways: it quickly shows whether any ungrammat-ical sentences are being licensed by the grammarand, by providing an exhaustive list of licensedsentences for an input template, allows users to seeif an expected sentence is not being produced.It is worth emphasizing that this feature of thecustomization system relies on the bidirectional-ity of the grammars; that is, the fact that the samegrammar can be used for both parsing and genera-tion.
Our experience has shown that grammar de-velopers quickly find generation provides a morestringent test than parsing, especially for the abil-ity of a grammar to model ungrammaticality.3.1 Underspecified MRSTesting by generation takes advantage of the gen-eration algorithm include in the LKB (Carroll et al,5Serious lexicon development is taken as a separate taskand thus lexicon size is not included in the table.3Language Family Lg-specific types Matrix types Head types Lex rules Phrasal rules ChoicesERG Germanic 3654 N/A N/A 71 226 N/ABreton Celtic 220 413 510 57 49 1692Cherokee Iroquoian 182 413 510 95 27 985French Romance 137 413 510 29 22 740Jamamad??
Arauan 188 413 510 87 11 1151Lushootseed Salish 95 413 510 20 8 391Nishnaabemwin Algonquian 289 413 510 124 50 1754Pashto Iranian 234 413 510 86 19 1839Pali Indo-Aryan 237 413 510 92 55 1310Russian Slavic 190 413 510 56 35 993Shona Bantu 136 413 510 51 9 591Vietnamese Austro-Asiatic 105 413 510 2 26 362Average 182.9 413 510 63.5 28.3 1073.5Table 1: Grammar sizes in comparison to ERG1999).
This algorithm takes input in the form ofMinimal Recursion Semantics (MRS) (Copestakeet al, 2005): a bag of elementary predications,each bearing features encoding a predicate string,a label, and one or more argument positions thatcan be filled with variables or with labels of otherelementary predications.6 Each variable can fur-ther bear features encoding ?variable properties?such as tense, aspect, mood, sentential force, per-son, number or gender.In order to test our starter grammars by gen-eration, therefore, we must provide input MRSs.The shared core grammar ensures that all ofthe grammars produce and interpret valid MRSs,but there are still language-specific properties inthese semantic representations.
Most notably, thepredicate strings are user-defined (and language-specific), as are the variable properties.
In addi-tion, some coarser-grained typological properties(such as the presence or absence of determiners)lead to differences in the semantic representations.Therefore, we cannot simply store a set of MRSsfrom one grammar to use as input to the generator.Instead, we take a set of stored template MRSsand generalize them by removing all variableproperties (allowing the generator to explore allpossible values), leaving only the predicate stringsand links between the elementary predications.We then replace the stored predicate strings withones selected from among those provided by theuser.
Figure 1a shows an MRS produced by agrammar fragment for English.
Figure 1b showsthe MRS with the variable properties removedand the predicate strings replaced with genericplace-holders.
One such template is needed forevery sentence type (e.g., intransitive, transitive,6This latter type of argument encodes scopal dependen-cies.
We abstract away here from the MRS approach to scopeunderspecification which is nonetheless critical for its com-putational tractability.a.
?
h1,e2, {h7: cat n rel(x4:SG:THIRD),h3:exist q rel(x4, h5, h6),h1: sleep v rel(e2:PRES, x4)},{h5 qeq h7} ?b.
?
h1,e2, {h7:#NOUN1#(x4),h3:#DET1#(x4, h5, h6),h1:#VERB#(e2, x4)},{h5 qeq h7} ?Figure 1: Original and underspecified MRSnegated-intransitive, etc.).
In order to ensure thatthe generated strings are maximally informative tothe user testing a grammar, we take advantage ofthe lexical type system.
Because words in lexicaltypes as defined by the customization system dif-fer only in orthography and predicate string, andnot in syntactic behavior, we need only considerone word of each type.
This allows us to focus therange of variation produced by the generator on(a) the differences between lexical types and (b)the variable properties.3.2 Test by generation processThe first step of the test-by-generation process isto compile the choices file into a grammar.
Next,a copy of the LKB is initialized on the web serverthat is hosting the Matrix system, and the newly-created grammar is loaded into this LKB session.We then construct the underspecified MRSs inorder to generate from them.
To do this, the pro-cess needs to find the proper predicates to use forverbs, nouns, determiners, and any other parts ofspeech that a given MRS template may require.
Fornouns and determiners, the choices file is searchedfor the predicate for one noun of each lexical nountype, all of the determiner predicates, and whetheror not each noun type needs a determiner or not.For verbs, the process is more complicated, re-quiring valence information as well as predicatestrings in order to select the correct MRS template.In order to get this information, the process tra-verses the type hierarchy above the verbal lexical4types until it finds a type that gives valence infor-mation about the verb.
Once the process has allof this information, it matches verbs to MRS tem-plates and fills in appropriate predicates.The test-by-generation process then sends theseconstructed MRSs to the LKB process and displaysthe generation results, along with a brief explana-tion of the input semantics that gave rise to them,in HTML for the user.74 Related WorkAs stated above, the engineering goal of the Gram-mar Matrix is to facilitate the rapid developmentof large-scale precision grammars.
The startergrammars output by the customization system arecompatible in format and semantic representationswith existing DELPH-IN tools, including softwarefor grammar development and for applications in-cluding machine translation (Oepen et al, 2007)and robust textual entailment (Bergmair, 2008).More broadly, the Grammar Matrix is situatedin the field of multilingual grammar engineer-ing, or the practice of developing linguistically-motivated grammars for multiple languages withina consistent framework.
Other projects in thisfield include ParGram (Butt et al, 2002; Kinget al, 2005) (LFG), the CoreGram project8 (e.g.,(Mu?ller, 2009)) (HPSG), and the MetaGrammarproject (de la Clergerie, 2005) (TAG).To our knowledge, however, there is only oneother system that elicits typological informationabout a language and outputs an appropriately cus-tomized implemented grammar.
The system, de-scribed in (Black, 2004) and (Black and Black,2009), is called PAWS (Parser And Writer forSyntax) and is available for download online.9PAWS is being developed by SIL in the contextof both descriptive (prose) grammar writing and?computer-assisted related language adaptation?,the practice of writing a text in a target languageby starting with a translation of that text in arelated source language and mapping the wordsfrom target to source.
Accordingly, the output ofPAWS consists of both a prose descriptive grammar7This set-up scales well to multiple users, as the user?s in-teraction with the LKB is done once per customized grammar,providing output for the user to peruse as his or her leisure.The LKB process does not persist, but can be started againby reinvoking test-by-generation, such as when the user hasupdated the grammar definition.8http://hpsg.fu-berlin.de/Projects/core.html9http://www.sil.org/computing/catalog/show_software.asp?id=85and an implemented grammar.
The latter is in theformat required by PC-PATR (McConnel, 1995),and is used primarily to disambiguate morpholog-ical analyses of lexical items in the input string.Other systems that attempt to elicit linguistic in-formation from a user include the Expedition (Mc-Shane and Nirenburg, 2003) and Avenue projects(Monson et al, 2008), which are specifically tar-geted at developing machine translation for low-density languages.
These projects differ from theGrammar Matrix customization system in elic-iting information from native speakers (such asparadigms or translations of specifically tailoredcorpora), rather than linguists.
Further, unlike theGrammar Matrix customization system, they donot produce resources meant to sustain further de-velopment by a linguist.5 Demonstration PlanOur demonstration illustrates how the customiza-tion system can be used to create starter gram-mars and test them by invoking test-by-generation.We first walk through the questionnaire to illus-trate the functionality of libraries and the way thatthe user interacts with the system to enter infor-mation.
Then, using a sample grammar for En-glish, we demonstrate how test-by-generation canexpose both overgeneration (ungrammatical gen-erated strings) and undergeneration (gaps in gen-erated paradigms).
Finally, we return to the ques-tionnaire to address the bugs in the sample gram-mar and retest to show the result.6 ConclusionThis paper has presented an overview of theLinGO Grammar Matrix Customization System,highlighting the ways in which it provides ac-cess to its repository of linguistic knowledge.
Thecurrent customization system covers a sufficientlywide range of phenomena that the grammars itproduces are non-trivial.
In addition, it is not al-ways apparent to a user what the implications willbe of selecting various options in the question-naire, nor how analyses of different phenomenawill interact.
The test-by-generation methodologyallows users to interactively explore the conse-quences of different linguistic analyses within theplatform.
We anticipate that it will, as a result, en-courage users to develop more complex grammarswithin the customization system (before movingon to hand-editing) and thereby gain more benefit.5AcknowledgmentsThis material is based upon work supported bythe National Science Foundation under Grant No.0644097.
Any opinions, findings, and conclusionsor recommendations expressed in this material arethose of the authors and do not necessarily reflectthe views of the National Science Foundation.ReferencesEmily M. Bender and Dan Flickinger.
2005.
Rapidprototyping of scalable grammars: Towards modu-larity in extensions to a language-independent core.In Proc.
of IJCNLP-05 (Posters/Demos).Emily M. Bender, Dan Flickinger, and Stephan Oepen.2002.
The grammar matrix: An open-source starter-kit for the rapid development of cross-linguisticallyconsistent broad-coverage precision grammars.
InProc.
of the Workshop on Grammar Engineeringand Evaluation at COLING 2002, pages 8?14.Richard Bergmair.
2008.
Monte Carlo semantics:McPIET at RTE4.
In Text Analysis Conference (TAC2008) Workshop-RTE-4 Track.
National Institute ofStandards and Technology, pages 17?19.Cheryl A.
Black and H. Andrew Black.
2009.
PAWS:Parser and writer for syntax: Drafting syntacticgrammars in the third wave.
In SIL Forum for Lan-guage Fieldwork, volume 2.Cheryl A.
Black.
2004.
Parser and writer for syn-tax.
Paper presented at the International Confer-ence on Translation with Computer-Assisted Tech-nology: Changes in Research, Teaching, Evaluation,and Practice, University of Rome ?La Sapienza?,April 2004.Miriam Butt, Helge Dyvik, Tracy Holloway King, Hi-roshi Masuichi, and Christian Rohrer.
2002.
Theparallel grammar project.
In Proc.
of the Workshopon Grammar Engineering and Evaluation at COL-ING 2002, pages 1?7.John Carroll, Ann Copestake, Dan Flickinger, and Vic-tor Poznan?ski.
1999.
An efficient chart generatorfor (semi-) lexicalist grammars.
In Proc.
of the 7thEuropean workshop on natural language generation(EWNLG99), pages 86?95.Ann Copestake, Dan Flickinger, Carl Pollard, andIvan A.
Sag.
2005.
Minimal recursion semantics:An introduction.
Research on Language & Compu-tation, 3(4):281?332.Ann Copestake.
2002.
Implementing Typed FeatureStructure Grammars.
CSLI, Stanford.Berthold Crysmann.
2009.
Autosegmental representa-tions in an HPSG for Hausa.
In Proc.
of the Work-shop on Grammar Engineering Across Frameworks2009.E?ric Villemonte de la Clergerie.
2005.
From meta-grammars to factorized TAG/TIG parsers.
In Proc.of IWPT?05, pages 190?191.Scott Drellishak and Emily M. Bender.
2005.
A co-ordination module for a crosslinguistic grammar re-source.
In Stefan Mu?ller, editor, Proc.
of HPSG2005, pages 108?128, Stanford.
CSLI.Scott Drellishak.
2009.
Widespread But Not Uni-versal: Improving the Typological Coverage of theGrammar Matrix.
Ph.D. thesis, University of Wash-ington.Dan Flickinger.
2000.
On building a more efficientgrammar by exploiting types.
Natural LanguageEngineering, 6:15 ?
28.Antske Fokkens, Laurie Poulson, and Emily M. Ben-der.
2009.
Inflectional morphology in Turkish VP-coordination.
In Stefan Mu?ller, editor, Proc.
ofHPSG 2009, pages 110?130, Stanford.
CSLI.Tracy Holloway King, Martin Forst, Jonas Kuhn, andMiriam Butt.
2005.
The feature space in parallelgrammar writing.
Research on Language & Com-putation, 3(2):139?163.Stephen McConnel.
1995.
PC-PATR Refer-ence Manual.
Summer Institute for Linguistics.http://www.sil.org/pcpatr/manual/pcpatr.html.Marjorie McShane and Sergei Nirenburg.
2003.
Pa-rameterizing and eliciting text elements across lan-guages for use in natural language processing sys-tems.
Machine Translation, 18:129?165.Christian Monson, Ariadna Font Llitjs, Vamshi Am-bati, Lori Levin, Alon Lavie, Alison Alvarez,Roberto Aranovich, Jaime Carbonell, Robert Fred-erking, Erik Peterson, and Katharina Probst.
2008.Linguistic structure and bilingual informants helpinduce machine translation of lesser-resourced lan-guages.
In LREC?08.Stefan Mu?ller.
2009.
Towards an HPSG analysis ofMaltese.
In Bernard Comrie, Ray Fabri, Beth Hume,Manwel Mifsud, Thomas Stolz, and Martine Van-hove, editors, Introducing Maltese linguistics.
Pa-pers from the 1st International Conference on Mal-tese Linguistics, pages 83?112.
Benjamins, Amster-dam.Stephan Oepen, Erik Velldal, Jan Tore Lnning, PaulMeurer, Victoria Rosn, and Dan Flickinger.
2007.Towards hybrid quality-oriented machine transla-tion.
On linguistics and probabilities in MT.
In11th International Conference on Theoretical andMethodological Issues in Machine Translation.Carl Pollard and Ivan A.
Sag.
1994.
Head-DrivenPhrase Structure Grammar.
The University ofChicago Press, Chicago, IL.6
