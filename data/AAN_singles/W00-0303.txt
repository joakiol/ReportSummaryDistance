Dialogue Management in the Mercury Flight Reservation SystemStephan ie  Senef f  and  Joseph  Po l i f ron iSpoken Language Systems GroupLaboratory  for Computer  ScienceMassachusetts Inst i tute of Technology545 Technology SquareCambridge,  MA 02139seneff ,joe @sls.
Ics.
mit.
eduAbst rac tThis paper describes the dialogue module of theMercury systemewhich has been under developmentover the past year or two.
Mercury provides tele-phone access to an on-line flight database, and allowsusers to plan and price itineraries between major air-ports worldwide.
The main focus of this paper is thedialogue control strategy, which is based on a set ofordered rules as a mechanism tomanage complex di-alogue interactions.
The paper also describes the in-teractions between the dialogue component and theother servers of the system, mediated via a centralhub.
We evaluated the system on 49 dialogues fromusers booking real flights, and report on a number ofquantitative measures of the dialogue interaction.1 In t roduct ionDialogue modeling is a critical and challenging as-pect of conversational systems, particularly whenusers are permitted flexibility with regard to defin-ing the constraints of the task.
For systems thatadopt a strict system-initiated approach, it is fea-sible to define a set of states and state transitionsdepending on the usually small number of possibleuser actions at each state.
However, if the user ispermitted to say anything within the scope of therecognizer at any time, such a finite-state solutionbecomes unwieldy.
We are interested in the devel-opment of mixed-initiative systems, where the sys-tem may make specific requests or suggestions, butthe user is not required to be compliant.
Insteadof a finite state dialogue model, we choose to de-compose dialogue state into a set of state variables.The activities for a given turn typically involve thesequential execution of a number of specialized rou-tines, each of which performs a specific part of thedialogue requirements and alters the state variablesin particular ways.
To determine which of the op-erations hould be performed, the system consults adialogue control table, which is specified in a simplescripting language.This paper describes experiments with using thisapproach to dialogue modeling in the context of ourMercury flight reservation system.
Mercury allowsusers to plan air travel between 226 cities worldwide.Following log-on, the user interacts with the systemto select the flights of their trip.
When the flightplan is completed, the system takes the initiativeto offer to price and email the itinerary.
Finally,the system asks the user a few questions to helpdetermine user satisfaction.The overall system makes use of the GALAXY ar-chitecture \[Seneffet al(1999)\], which consists of anumber of specialized servers that communicate withone another via a central programmable hub.
An au-dio server captures the user's speech via a Dialogicboard, and transmits the waveform to the speechrecognizer \[Glass et al(1996)\].
The language under-standing component \[Seneff (1992)\] parses a wordgraph produced by the recognizer and delivers a se-mantic frame, encoding the meaning of the utter-ance, to the discourse component.
The output ofthe discourse component \[Seneff (1996)\] is the frame-in-context, which is transformed into a flattened E-form (electronic form) by the generation server.
ThisE-form is delivered to the turn manager, and pro-vides the initial settings of the dialogue state.The turn manager consults the dialogue controltable to decide which operations to perform, andtypically engages in a module-to-module subdia-logue to retrieve tables from the database.
It pre-pares a response frame, which may or may not in-clude tabular entries.
The response frame is sentto the generation component \[Glass (1994)\] whichtransforms it in parallel into both a text string andan annotated string that specifies the input controlsfor the speech synthesizer.
Finally, the speech syn-thesizer transmits a waveform to the audio serverwhich then relays the spoken response to the userover the telephone.
The entire dialogue is recordedin detail in a log file for later examination.2 Knowledge  Representat ionsMercury's dialogue manager manipulates linguisticand world knowledge represented in the form of se-mantic frames.
At each turn it begins with anE-form representing the constraints of the currentquery as a set of (key: value) pairs.
This E-form pro-U: John DoeS: Please speak the month and day you registered as your password, as in, may first.U: april firstS: Welcome John.
You have successfully logged onto Mercury.
How may I help you?U: i want to travel to washington dulles on november fourthS: From Boston to Washington Dulles on November 4.
Can you provide the approximatedeparture time or airline preference?U: i need to arrive at around nine a mI: Okay.
Flights from Boston to Washington Dulles arriving at 9:00 am on November 4.One moment please.S: The best matching flight is a U S Airways flight arriving at 8:59 a.m.
I also have a Unitedflight arriving at 8:36 a.m.U: i what time does the united flight leaveS: United flight 1819 departs at 7:00 am from Boston.
Shall I book this flight for you?U: yes pleaseS: United flight 1819 has been added to your itinerary.
You depart Boston at 7:00 am and arrivein Washington Dulles at 8:36 am.
Where would you like to go next?U: i would like to return to bostonS: What date will you be returning on?U: the same dayI: Okay.
United flights from Washington Dulles to Boston on November 4.
One moment please.S: Can you provide a departure or arrival time?
The earliest nonstop leaves at 9:30 a.m.and arrives at 10:57 a.m.U: i would like to leave after three thirtyS: The best matching flight is a United flight departing at 4:30 p.m.
I also have a United flightdeparting at 5:30 p.m.U: i will take the first oneS: United flight 1278 has been added to your itinerary.
You depart Washington Dulles at 4:30pm and arrive in Boston at 6:07 pm.
Shall I price your itinerary?U: yes pleaseI: Pricing your itinerary will take a while.
In the meantime, I'll summarize your itinerary for you.S:on November 4, you depart on United flight 1819 from Boston at 7:00 am and arrive inWashington Dulles at 8:36 am.
From there, you depart on United flight 1278 at 4:30 pmand arrive in Boston at 6:07 pm.The price for your itinerary is $249.00.
Shall I email your itinerary to you?U: yesS: Your itinerary has been emailed.
Is there something else I can do for you?U: no thank youS: Thank you for calling!
Have a nice day!Table 1: Example dialogue between a user and the system involving a real trip.
"U" denotes a user utterance,"S" a system utterance, and 'T' an intermediate system response spoken prior to database retrieval.vides the initial values in the dialogue state, whichevolves over the course of the turn as rules are exe-cuted.In addition to the dialogue state, Mercury alsomakes use of several other internal representationswhich retain state.
These are packaged up intoa turn-manager history frame which is passed tothe hub for safe-keeping at the end of each turn,and returned with each subsequent turn.
The usermodel contains a record of the system's current be-lief about the state of the user's flight plan.
Forexample, if the user's first query were "I want to goto Denver next Friday morning, returning the fol-lowing Wednesday," the system would record thatthis is a round trip flight and would save the returndate (unresolved, in case there was a recognition er-ror on the forward leg date) in the user model.
Itwould retrieve from the user model, as the forwardleg source, the default value provided by the user atenrollment.
Thus the user model retains both theinitial user preferences and all of the details of thecurrent flight plan as they become available.
Thesystem also retains internally a list of all the flightsthat matched the user's constraint specifications, aswell as a list of the subset of the flights that it hasspoken about (e.g., the nonstop flights or the earliest12-airline~cLrce te~ adesLdate des ine iFigure 1."
An (incomplete) state diagram for the example system described in the text.flight).
These flights become available for referencein subsequent queries uch as "book the third one,"or "where does the united flight stop?
".Whenever the system needs to go to the database,it provides an intermediate r ply frame which servesboth to ask the user for patience and to confirm aconsistent shared model of the dialogue history.
Thesystem's final response is also a frame, and it oftencontains a list of flights to be read back to the user.In other cases, it may be a yes-no question as in"Shall I email your itinerary to you?"
The lattercase also necessitates sending both to the discoursecomponent a system-initiative context for yes/no re-sponses, and to the language understanding compo-nent a dialogue context filter that favors confirma-tions and denials in the N-best selection.
A similarprocess takes place when the system prompts for in-formation such as a date or a departure city.Table 1 shows a dialogue between a user and thesystem involving a real trip between Boston andWashington D.C.
The name and password informa-tion have been omitted for privacy reasons.
In thefigure, "U" stands for "user", "S" for system, and'T' for intermediate r sponse.3 Dialogue Management S rategiesA finite state network is a convenient way to formu-late dialogue states, as long as the system is able tomaintain strong control over the order in which slotsare filled, and especially when slots are filled one ata time.
However, if the user is permitted the flexi-bility to fill slots in any order, and to fill more thanone slot in a single turn, then it becomes difficultand inefficient o define a finite state network thatcovers the entire space of possibilities.A finite state solution for a simple dialogue xam-!source - -  > prompt_source!destination - -  > prompt_destination!airline - -  > prompt_airline!date - -  > prompt_datenprompts > 1 - -  > mark_multiplenprompts = 0 - -  > retrieve_flightsFigure 2: A dialogue control table corresponding tothe state diagram in Figure 2.ple is given in Figure 1.
Here, we assume that theuser can fill four slots (source, destination, date, andairline) and that all four must be filled before thesystem can retrieve flights.
The slots can be filled inany order, and the user can fill any number of slotsin each turn.
For notational convenience, we repre-sent the states filled/unfilled by 1/0, and we orderthe fields as \[source, destination, date, airline\], suchthat state "1101" says that only date is missing.
Ateach state the system prompts the user for all miss-ing slots.
Thus, state 1000 would speak, "Can youprovide one or more of destination, date, and air-line?"
If the user provides more than a single fieldin a given turn, the system advances by more thanone state in the state diagram.
To fully specify allpossibilities, even for this simple example, requiresa large number of states in the state diagram.Figure 2 shows a set of ordered rules which achievethe same goals as the state diagram but with agreatly simplified dialogue control specification.
Inthis case, state is encoded implicitly as a bit mapcorresponding to the filled/unfilled values of the fourvariables.
The notation "!"
stands for "NOT,"meaning that this variable is not yet filled.
Follow-ing the arrow is the name of the operation to be13clause request_keypadweek\[ day \[ tel_dateflight_number & !airlineclause price & topic itinerary & truth_value denyclause book & num_.found =1num_nonstops > 1 & num_nonstops < 4 & arrival_timekeypad..inputresolve_relative_dateneed_airlinedont_price_itinerary) add..flight_to.Jtineraryspeak_three_arrivalsFigure 3: Selected rules from the Mercury dialogue control table.
"&" stands for "AND" and "\[" stands for"OR".performed when the conditions are met.
Each op-eration is usually a specific function, and is free toaugment the variable space by either altering the val-ues of pre-existing variables or introducing new vari-ables.
In our simple example the four prompt opera-tions simply add their respective variables to the re-sponse frame and increment the variable "nprompt.
"The final function "mark_multiple" fires only if morethan one of the preceding functions have fired.
Itsaction is to insert "one or more of" into the response.The final "retrieve" operation only fires if none of thepreceding operations fired.
It is significant that stateis dispersed not only over the variables but also overthe operations.
Thus, any single prompt state ofthe state transition matrix would involve up to twooperations in the dialogue control table, and, con-versely, the "mark_multiple" operation is associatedwith several states.In addition to possibly altering the values of vari-ables in the dialogue state, operations also have theresponsibility to return, upon completion, one ofthree "move" states.
The majority of the operationsreturn the state ~'CONTINUE," which means implyto continue xecution just beyond the rule that justfired.
The two other possibilities are "STOP," i.e.,exit from the dialogue control table, and "RESTART"which means to return to the top of the set ofdialogue rules and start over.
An (optional) dis-tinguished operation, which handles activities thatshould occur routinely at every turn, is executedupon exiting the dialogue control process.
The testson variables can be binary, arithmetic, or stringmatching on values.Our Mercury system makes use of this "orderedrules" strategy for dialogue control.
However, therules are dealing with a great deal more complexitythan simply deciding what prompts to issue whencertain slots are unfilled.
There are currently atotalof over 200 rules in Mercury's dialogue control table.These rules can be grouped into several distinct cat-egories.
Only nine of the rules involve prompts formissing information.
Another nine are involved withlogging into the system, i.e., acquiring the name andthe password, which may have to be entered usingthe telephone keypad, either upon user request oras a consequence of recognition failure.
Eleven rulesare concerned with meta-level interactions such asapologies for missing services (no flight status in-formation available), and requests for help or rep-etition.
Several rules have to do with determiningwhether the current request plausibly involves a ref-erence to a flight in a pre-existing flight list.
Thiscould be an obvious reference to the nth flight, or itcould be an inquiry about the "united flight" or the"nine a.m.
flight."
Several more rules involve inter-preting various references to relative dates and/ortimes such as "the following Thursday," or "thatsame afternoon.
"The largest single category concerns preparing thereply frame, after the database retrieval has alreadytaken place.
Twenty six rules are concerned withthis task, and they are keyed on a combination ofthenumber and type of flights retrieved and the specificrequest of the user (e.g., "where do they connect?
").The purpose of these functions is to reduce the num-ber of database tuples returned for a given query toa manageable s t for a spoken response.
This re-duction is based on a hierarchy of quality measuresfor each flight, beginning with any stated or inferredpreference (e.g., a particular airport in the case ofcities with multiple airports, or a particular airlinein the case of a multi-leg booking where one leg hasalready been established) and including number ofstops and length of flight.
These functions also con-solidate information about the flights to be spoken,combining shared attributes.
Our ultimate goal is toproduce a response such as "I have found three non-stop United flights.
Flight 100 leaves at 8:45, flight200 leaves at 9:10, and flight 300 leaves at 9:30.
"The dialogue control table facilitates this interac-tion by enabling the system developer to encode theconstraints of the hierarchy in the rules.Finally, there are a miscellaneous set of rules thathave to do with updating the user model, prepar-ing the intermediate r ply, pricing or emailing theitinerary, preparing the database query, filteringflights, or updating the itinerary.Since the operations are general functions, it is upto the system developer to decide how to parcel upthe computational requirements into the individualoperations.
With experience, one acquires a set ofguidelines to help formalize this process.
As a gen-eral rule, it is preferrable to limit the use of nestedfunction calls.
Instead, an operation can set a vari-1411.5%WER \] words/turn I total turns I total t i m e 7  11 229 sec.Nutts: 41 90 55 31 9 226Figure 4: Some easily computed statistics on the 36successful bookings.able to indicate that another operation eeds to becalled, and then the intended subroutine gets pro-moted to the status of a dialogue control operation.This has the effect of exposing more of the internalactivities of the system to the dialogue control table,which serves as a very useful outline of system con-trol flow.
Another general policy is that each oper-ation should be concerned with a single well-definedtask, again in or~er~not to conceal complexity.Figure 3 shows several examples of actual rules inMercury's dialogue control table.4 Data  Co l lec t ion  and  Eva luat ionMercury first became available for data collectionin October '99.
Prospective users must first enrollby filling in a simple form on a Web page, wherethey enter, minimally, their name, email address,and password (a date).
Once the user's name hasbeen added to the recognizer and language under-standing components, they receive an email mes-sage informing them of the telephone number.
Usersare encouraged to attempt to book real trips.
Fromlate October to early December, we collected 49 dia-logues involving real flight bookings, and these formthe basis for our evaluation studies.Overall, 73% of the bookings were successful(36/49).
We used a very strict requirement for suc-cess.
For example, in one dialogue considered un-successful the system did not know the airline thatthe user requested, and so the user compromised andbooked the trip on a different airline.
Three of thefailures are due to the user simply hanging up infrustration, and three others are due to the systemhanging up due to a misrecognized "good-bye."
Twofailures were due to user inattentiveness.
The userbelieved that the trip was correctly booked, but amisrecognition produced a different itinerary thanthe one they were specifying.
Finally, four of thefailures involved completely correct bookings, butthe system was unable to follow through with thepricing and/or emailing of the itinerary.
Some ofthese involved inadequacies in the dialogue module,once the user did not provide the expected responseto a system request.
There was a striking differencein recognition error between the successful and theincomplete bookings (11.5% vs 26% WER).
A heavyforeign accent accounted for some of the recognitionproblems.Some easily measurable statistics for the successesare given in Figure 4.
These numbers were computedFigure 5: Distribution of evaluable user utterancesin terms of number of new attributes introducedwith each dialogue turn.
IBR = Information BitRate.on the "core dialogue," defined as the interval subse-quent o logging on and up until the itinerary is fullyspecified, but has not yet been priced.
On averageusers required less than four minutes to completethe core dialogue, although three outliers took morethan seven minutes.4.1 Log File EvaluationWe have long been interested in seeking evaluationmetrics that are automatic and that can apply on aper-utterance basis but evaluate a significant portionof the system beyond the recognizer.
In \[Polifroni etal.
(1998)\] we proposed an E-form evaluation met-ric, which compares an E-form obtained by parsingthe original orthography against hat obtained byparsing the selected recognizer hypothesis.
We be-lieve this is a good metric for evaluating how well therecognizer and parser are doing, but it says nothingabout the discourse and dialogue components.We recently devised two new evaluation metrics,which we believe are useful measures for assessingthe performance ofthe recognizer, parser, discourse,and dialogue components, collectively.
To computethe measures, we must reprocess the log file after theorthographic transcription has been provided for theuser queries.
Basically, both the recognizer hypothe-sis and the original orthography are run through thesystem utterance by utterance, with the discourseand dialogue states being maintained exclusively bythe recognizer branch.
For both branches, the E-form that is produced after the turn manager has fin-ished processing the query is sent to a special evalu-ation server.
This server maintains a running recordof all the attributes that appear in the orthographypath, comparing them against heir counterparts inthe recognizer path.The two parameters that emerge from comparingthese E-forms we refer to as information bit rate(IBR) and user frustration (UF).
IBR measures theaverage number of new attributes introduced peruser query.
A subsequent query that reiterates thesame attribute is excluded since it did not intro-duce any new information.
Thus if the user said,"I want to go from Seattle to Chicago on Decem-ber 27," and the system misrecognized the date as"December 22," then a subsequent query, "I saidDecember 27" would be registered as contributing a0 count to the IBR parameter.
The UF.
parametertabulates how many turns it took, on average, for an15intended attribute to be transmitted successfully tothe system.
Thus, in the example above, the sourceand destination each took one turn, but the datetook two.There are some difficulties with rerunning the di-alogue at a later time.
Both the system and thedatabase are in a state of flux, and so the dialoguecan become incoherent.
For example, in one case theuser said, "Book it," in response to a single flightbeing proposed, but due to changes in the flightschedule, the system proposed three flights in thererun and the dialogue became incoherent from thatpoint on.
To help alleviate incoherence, we providea mechanism to artificially offset the date, at leastto assure that the dates they have selected haven'talready pasaed.
!_n spite of the above problems, wefeel that these'evaluation metrics how considerablepromise.In a pilot study, we processed a subset of our datathrough this evaluation configuration.
We identi-fied a set of 17 attributes that could be monitored.Five percent of the utterances had orthographiesthat failed to parse.
These are unevaluable with-out human reannotation, and are hence eliminatedfrom the pool in the discussion below, although theyclearly are likely to be very problematic.
Figure 5summarizes the results for information bit rate forthe remainder of the utterances.
A surprisingly argepercentage of the utterances introduce no new con-cepts.
Some, but not all, of these are similar tothe date misrecognition example given above.
Oth-ers are cases where the user was confused aboutthe state of the system's knowledge, and decided tosimply repeat all the preceding constraints just tomake sure.
Some are also misfirings of the endpointdetector producing content-free utterances such as"okay."
In other cases the user intended an action,but the system's understanding mechanism was notsophisticated enough.
For example "That's good"meaning "book it."
We were pleased with the per-centage of sentences that contained more than oneattribute.
We believe that a typical directed di-alogue would have far fewer utterances with morethan one attribute.Excluding the 5% of utterances whose orthogra-phy failed to parse, our system achieved a 1.05% userfrustration rate.
This means that, on average, oneout of every 20 attributes had to be entered twice.We were very pleased with this number.5 Summary and Future WorkThis paper described our strategy for dialogue man-agement in the Mercury system.
Overall, we havefound it to be extremely powerful.
While the Mer-cury system is still under active development, we feelthat the anticipated extensions of capability will re-quire a straightforward process of expansions in thedialogue control table; i.e., the"system has not at-tained an unmanageable d gree of complexity in or-ganization.
We believe that this is a direct conse-quence of the use of the dialogue control table.Mercury's turn manager deals with some issues,such as the interpretation f dates and times, thatare of relevance to many other potential domains.We envision that at some future time we will haveavailable a large library of operations of general util-ity that can be inserted into a new system to greatlyaccelerate he time required to bring the new domainup to full operation.ReferencesSeneff, S., R. Lan, and J. Polifroni.
(1999) "Or-ganization, Communication, and Control in theGALAXY-II Conversational System," Proc.
Eu-rospeeeh '99, Budapest, Hungary, pp.
1271-1274.Glass, J., J. Chang~ and M. McCandless.
(1996) "AProbabilistic Framework for Feature-based SpeechRecognition," Proc.
ICSLP 'Y6, Philadelphia, PA,pp.
2277-2280.Seneff, S. (1992) "TINA: a Natural Language Sys-tem for Spoken Language Applications," Compu-tational Linguistics, 18/1, pp.
61-86.Seneff, S, D. Goddeau, C. Pao, and J.
Polifroni.
(1996) "Multimodal Discourse Modelling-in aMulti-user Multi-domain Environment," Proceed-ings, International Conference on Spoken Lan-guage Processing '96, pp 192-195, Oct. 3-6.Glass, J., J. Polifroni, & S. Seneff.
(1994).
"Multi-lingual Language Generation across Multiple Do-mains."
Proc.
International Conference on SpokenLanguage Processing (pp.
983-986).
Yokohama.Polifroni, J., S. Seneff, J.
Glass, and T.J.
Hazen.
(1998) "Evaluation Methodology for a Telephone-based Conversational System."
Proc.
LREC '98,pp.
43-50, Granada, Spain.16
