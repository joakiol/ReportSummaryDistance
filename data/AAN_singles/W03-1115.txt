Temporal Ranking for Fresh Information RetrievalNobuyoshi SatoDept.
of Information andComputer SciencesToyo UniversityKawagoe, Saitama, Japanjju@ds.cs.toyo.ac.jpMinoru UeharaDept.
of Information andComputer SciencesToyo UniversityKawagoe Saitama Japanuehara@toyo.ac.jpYoshifumi SakaiGraduate School ofAgricultural SciencesTohoku UniveristySendai Japansakai@biochem.toyo.ac.jpAbstractIn business, the retrieval of up-to-date, or fresh,information is very important.
It is difficult forconventional search engines based on a centralizedarchitecture to retrieve fresh information, becausethey take a long time to collect documents via Webrobots.
In contrast to a centralized architecture, asearch engine based on a distributed architecturedoes not need to collect documents, because eachsite makes an index independently.
As a result,distributed search engines can be used to retrievefresh information.
However, fast indexing alone isnot enough to retrieve fresh information, as supportfor temporal information based retrieval is alsorequired.
In this paper, we describe temporalinformation retrieval in distributed search engines.
Inparticular, we propose an implementation oftemporal ranking.1.
IntroductionIn our information-intensive society, it is important for usto know what information was up-to-date, or fresh, at acertain point in time.
However, since search engines havinga centralized architecture, such as Google, require anenormous amount of time to collect all documents in anetwork, it is difficult to retrieve fresh information usingthem even in the present.
In order to realize freshinformation retrieval, we have developed CooperativeSearch Engine (CSE)[2].
CSE has a distributed architecture,and hence does not have to collect all the documents in thenetwork.
Each local site acts as a local search engine fordocuments in the site, and each local index for thedocuments is updated every few minutes.
For this reason wecan retrieve fresh information via CSE.It is a notable characteristic of CSE that retrieval resultscan immediately reflect when the appearance of a newdocument or editing of an existing document occurs.However, since the retrieval results contain not only freshdocuments but also stale documents, it is not easy todetermine which documents include fresh information.
Inorder to solve this problem, we try to implement a functionin CSE for selecting documents that were fresh at a point intime arbitrarily specified by user.This paper is organized as follows.
In section 2, we surveytemporal databases and temporal information retrieval.
Insection 3 we describe CSE and in section 4 we definetemporal information in CSE.
We describe theimplementation of temporal information retrieval in CSE insection 5 and evaluate it in section 6.
Finally, we end thepaper with some conclusions.2.
Temporal Information RetrievalThe value of information is determined by the ratio of thenumber of information consumers who want the informationto the number of information providers who have theinformation.
If the number of information providersincreases then the information value decreases.
Informationthat is known to everyone is called common knowledge.According to Shannon?s information theory, information isentropy.
In other words, information creates a system fromchaos, although the system is temporary and will soondiffuse.
Information value is at its highest when the system isfirst created.
Therefore, the freshest information is the mostvaluable.
Information retrieval is the process of findingvaluable information, and in this sense, fresh informationretrieval is extremely important.It is clear that fresh information retrieval is a special typeof temporal information retrieval.
Temporal informationretrieval is the process of extracting time-varyinginformation.
A document may be modified any time after itis created, and hence a document consists of time-varyinginformation.
For example, a word which was included in adocument before modifying often is not included in adocument after modifying.
Therefore, time-varyinginformation must be retrieved with the time specified.
This isquite natural and such temporal information retrieval isavailable for digital libraries.2.1 Temporal DatabaseAlthough information retrieval is not data retrieval, thetheoretical background of temporal information retrieval isin temporal databases.
A temporal database is a database towhich a time interval can be specified as a query.
The timeinterval is based on temporal interval logic proposed by J. F.Allen[14].
Therefore, temporal information retrieval mustsupport time intervals as part of a query.
In a temporaldatabase, the unit of time is the chronon.The granularity of a chronon is selected from year, month,day, hour, minute, and second.Assume that there are time points t1, t2, t2?, t3, t3?, t4 (ti<ti+1,ti=ti?).
Also assume that [ti,tj](i<j) is a time interval, wherestart([ti,tj])=ti, and end([ti,tj])=tj.
The following relations existamong time points X and Y, and time intervals A and B.X before Y: X<Y, e.g.
t1 before t2X after Y: X>Y, e.g.
t2 after t1X simultaneous-with Y: X = Y, e.g.
t2 simultaneous-with t2?X in A: start(A)?X?end(Y), e.g.
t2 in [t1,t3]A before B: end(A)<start(B), e.g.
[t1,t2] before [t3,t4]A meets B: end(A)=start(B), e.g.
[t1,t2] meets [t2?,t3]A overlaps B: start(B)<end(A)<end(B) ?
start(A)<start(B),e.g.
[t1,t3] overlaps [t2,t4]A starts B: start(A)=start(B), e.g.
[t2,t3] starts [t2?,t4]A during B: start(A)>start(B) ?
end(A)<end(B), e.g.
[t2,t3]during [t1,t4]A finished B: end(A)=end(B) ?
start(A)>start(B), e.g.
[t2,t3]finishes [t1,t3?
]A after B: start(A) > end(B), e.g.
[t3,t4] after [t1,t2]A met-by B: start(A)=end(B), e.g.
[t2,t3] met-by [t1,t2?
]A overlapped-by B: start(B)<start(A)<end(B) ?end(B)<end(A), e.g.
[t2,t4] overlapped-by [t1,t3]A started-by B: start(A)=start(B) ?
end(A)>end(B), e.g.
[t2,t4] started-by [t2?,t3]A contains B: start(A)<start(B) ?
end(A)>end(B), e.g.
[t1,t4]contains [t2,t3]A finished-by B: end(A)=end(B) ?
start(A)<start(B), e.g.
[t1,t3] finished-by [t2,t3?
]A cotemporal B: start(A)=start(B) ?
end(A)=end(B), e.g.
[t2,t3] cotemporal [t2?,t3?
]In a temporal database, there are 2 kinds of times: validtimes and transaction times.
Valid times concern facts thatare true in modeled reality.
Transaction times concern factsthat are current in the database.In general, a valid time DB stores only fresh data, whereasa transaction time DB stores the complete history of the data.A bitemporal DB supports both kinds of data.2.2 The Concept of Temporal InformationRetrievalIn this paper, temporal information retrieval is defined asdetermining whether or not a document exists at a time pointor in a time interval.
This is in contrast to whether or not thecontent of a document includes the specified time.
Forexample, assume that a document containing the text ?In2002, the FIFA World Cup will be held in Korea and Japan?was written in 1998.
In the former case, this documentwould be retrieved with the query, 1998 and (Korea orJapan).
In the latter case, this document would be retrievedwith the query, 2002 and (Korea or Japan).
The number1998 in the former case is the modified time of the document.The number 2002 in the latter case is a keyword in the textof the document.
This latter type of retrieval is classified as aquery expansion or a numerical query.
We discuss temporalinformation retrieval in the former sense.Assume that a document always contains facts.
In thiscase, a fact in temporal information retrieval means theexistence of the document.
Valid time is the time when thedocument exists in the real world, and transaction timedenotes the time when the document is indexed.The lifetime of a document depends on the documentmodel, and there are two kinds of models.
The first is theimmutable model, in which the lifetime of a document isequivalent to the lifetime of the information.
Theinformation is the content of the document, and when adocument is modified, the information is also changed.Therefore, an old document is deleted and a new documentis created at every modification time.
The second type ofmodel is the mutable model, in which the modification of adocument is allowed.
In this model, when a document ismodified, the content of the document is changed but thedocument itself is not changed.
So, in the mutable model, adocument exists from the time it is created to the time it isdeleted, although its content may change multiple times.
Inthe immutable model, a document exists only from onemodification time to another.
From the viewpoint of theusers the retrieval result, with the exception of time, is notdependent on the document model.
However, in theimmutable model, the retrieval result is based on themodification time, whereas in the mutable model, it is basedon the creation time.There are several possible interpretations of created time,modified time and deleted time.
Assume that someone hadinformation at time t1, he wrote it into a document at t2, hepublished the document at t3, and the document was indexedby a search engine at t4.
It is important to determine whattime corresponds to the origin of the information.
Inprinciple, the information is created at t1.
However, it is hardto prove this fact and it is impossible to retrieve it.
The timet2 is determined by outside factors.
In addition, it may not bepossible for everyone to publish a web document withoutchanging the timestamp, so, t2 is not a good measure.
Thetime t3 is the published time when the document is availableon the web.
However, it is difficult to retrieve the documentat precisely t3.
In fact, we can retrieve the document after t4.Ideally, t4 should be nearly equal to t3.
In centralized searchengines, because t4 ?
t3 is greater than t3 ?
t2, t2 is usedinstead of t4.
However, in distributed search engines, becauset4 ?
t3 is very small, t4 is used for the purpose of temporalinformation retrieval.
In such a case, the valid time isequivalent to the transaction time.There are two kinds of temporal queries in temporalinformation retrieval.
One is an interval query whichretrieves documents existing in an interval of time.
The otheris a point query which retrieves documents existing at acertain time point.
An interval query is also called a timeslice query.
A temporal query is used in conjunction with akeyword query.
The retrieval results include not only thecontent of the documents, but also the created time and themodified time.The targets of a temporal query are the lifetime intervaland the modified time point of the document.
In a temporalquery, temporal relations mentioned in section 2.1 may bespecified.2.3 Fresh Information RetrievalIn order to realize fully temporal information retrieval, it isnecessary to store the complete history of every document?smodification, however this has huge storage requirements.So instead, we introduce fresh information retrieval as apractical substitute, which retrieves the last modifiedversions of current documents.Temporal information retrieval is the retrieval ofdocuments that exist during a time interval.
Freshinformation retrieval is not the retrieval of documents thathave current content, but to retrieve current documentswhich exist with content during a time interval.
With freshinformation retrieval, huge storage is unnecessary becauseonly the last modified version of a document is stored.
Also,fresh information retrieval supports all the functions oftemporal information retrieval except that the retrieveddocument is the current version.
In section 2.1, we describedthat a valid time DB stores only current versions ofdocuments.
In this sense, fresh information retrieval is validtime information retrieval.We illustrate 3 kinds of information retrieval in Fig.
1.
In thisfigure, there are 3 documents D0, D1 and D2, and the blackdots represent modification events.
In non-temporalinformation retrieval, documents which exist at the currentpoint in time are retrieved.
In Fig.
1, D0 and D1 are retrievedby non-temporal information retrieval.
D2 is not retrievedbecause it is deleted.
In fresh information retrieval, D0 andD1 are retrieved in the same way as in non-temporalinformation retrieval.
However, D0 is retrieved with thetemporal query shown as the dashed rectangle in Fig.
1.Non-temporal information retrieval does not support such aquery.
Finally, in fully temporal information retrieval, alldocuments D0, D1, and D2 may be retrieved with anytemporal query.
For example, D0 exists as 3 versionsseparated by two modifications.3.
Cooperative Search EngineFirst, we explain a basic idea of CSE.
In order tominimize the update interval, every web site basically makesindices via a local indexer.
However, these sites are notcooperative yet.
Each site sends the information about what(i.e.
which words) it knows to the manager.
This informationis called Forward Knowledge (FK), and is Meta knowledgeindicating what each site knows.
FK is the same as FI ofIngrid.
When searching, the manager tells which site hasdocuments including any word in the query to the client, andthen the client sends the query to all of those sites.
In thisway, since CSE needs two-pass communication at searching,the retrieval time of CSE becomes longer than that of acentralized search engine.CSE consists of the following components (see Figure 1).z Location Server (LS): It manages FK exclusively.Using FK, LS performs Query based Site Selectiondescribed later.
LS also has Site selection Cache(SC) which caches results of site selection.z Cache Server (CS): It caches FK and retrieval results.LS can be thought of as the top-level CS.
It realizes?Next 10?
searches by caching retrieval results.Furthermore, it realizes a parallel search by callingLMSE mentioned later in parallel.z Local Meta Search Engine (LMSE): It receivesqueries from a user, sends it to CS (User I/F inFigure 2), and does local search process by callingLSE mentioned later (Engine I/F in Figure 2).
Itworks as the Meta search engine that abstracts thedifference between LSEs.z Local Search Engine (LSE): It gathers documentslocally (Gatherer in Figure 2), makes a local index(Indexer in Fig.
2), and retrieves documents by usingthe index (Engine in Figure 2).
In CSE, Namazu[1]can be used as a LSE.
Furthermore we aredeveloping an original indexer designed to realizehigh-level search functions such as parallel searchand phrase search.Namazu has widely used as the search services on variousJapanese sites.Next, we explain how the update process is done.
In CSE,Update I/F of LSE carries out the update process periodically.The algorithm for the update process in CSE is as follows.1.
Gatherer of LSE gathers all the documents (WebFigure 1.
Temporal Information RetrievalD0D1D2tnowFigure 2.
The overview of CSEpages) in the target Web sites using direct access(i.e.via NFS) if available, using archived access(i.e.
viaCGI) if it is available but direct access is notavailable, and using HTTP access otherwise.Here, we explain archived access in detail.
Inarchived access, a special CGI that provides mobileagent place functions is used.
A mobile agent is sentto that place.
The agent archives local files,compresses them and sends back to the gatherer.2.
Indexer of LSE makes an index for gathereddocuments by parallel processing based onBoss-Worker model.3.
Update phase 1: Each LMSEi updates as follows.3.1.
Engine I/F of LMSEi obtains from the correspondingLSE the total number Ni of all the documents, the setKi of all the words appearing in some documents,and the number nk,i of all the documents includingword k, and sends to CS all of them together with itsown URL.3.2.
CS sends all the contents received from each LMSEito the upper-level CS.
The transmission of thecontents is terminated when they reach the top-levelCS (namely, LS).3.3.
LS calculates the value of idf(k) = log(?Ni /?nk,i)from Nk,i and Ni for each word k.4.
Update phase 2: Each LMSEi updates as follows4.1.
LMSEi receives the set of Boolean queries Q whichhas been searched and the set of idf values from LS.4.2.
Engine I/F of LMSEi obtains from the correspondingLSE the highest score maxd?D Si(d,q) for eachq?
{Q,Ki}, Si(d,k) is a score of document dcontaining k, D is the set of all the documents in thesite, and sends to CS all of them together with itsown URL.4.3.
CS sends all the contents received from each LMSEito the upper-level CS.
The transmission of thecontents is terminated when they reach the top-levelCS (namely, LS).Note that the data transferred between each module aremainly used for distributed calculation to obtain the scorebased on the tf*idf method.
We call this method thedistributed tf*idf method.
The score based on the distributedtf*idf method is calculated at the search process.
So we willgive the detail about the score when we explain the searchprocess in CSE.For the good performance of the update process, theperformance of the search process is sacrificed in CSE.
Herewe explain how the search process in CSE is done.1.
When LMSE0 receives a query from a user, it sendsthe query to CS.2.
CS obtains from LS all the LMSEs expected to havedocuments satisfying the query.3.
CS sends the query to each of all LMSEs obtained.4.
Each LMSE searches documents satisfying thequery by using LSE, and returns the result to CS.5.
CS combines with all the results received fromLMSEs, and returns it to LMSE0.6.
LMSE0 displays the search result to the user..Here, we describe the design of scalable architecture for thedistributed search engine, CSE.In CSE, at searching time, there is the problem thatcommunication delay occurs.
Such a problem is solved byusing following techniques.z Look Ahead Cache in ?Next 10?
Search[3]To shorten the delay on search process, CS preparesthe next result for the ?Next 10?
search.
That is, thesearch result is divided into page units, and eachpage unit is cached in advance by backgroundprocess without increasing the response time.z Score based Site Selection (SbSS)[4]In the ?Next 10?
search, the score of the next rankeddocument in each site is gathered in advance, andthe requests to the sites with low-ranked documentsare suppressed.
By this suppression, the networktraffic does not increase unnecessarily.
For example,there are more than 100,000 domain sites in Japan.However, by using this technique, about ten sites aresufficient to requests on each continuous search.z Global Shared Cache (GSC)[5]A LMSE sends a query to the nearest CS.
Many CSmay send same requests to LMSEs.
So, in order toglobally share cached retrieval results among CSs,we proposed Global Shared Cache (GSC).
In thismethod, LS memories the authority CSa of eachquery and tells CSs CSa instead of LMSEs.
CScaches the cached contents of CSa.z Persistent Cache(PC)[6]There is at least one CS in CSE in order to improvethe response time of retrieval.
However, the cachebecomes invalid soon because the update interval isvery short in CSE.
Valuable first page is also lost.Therefore, we need persistent cache, which holdsvalid cache data before and after updating.
In thismethod, there are two update phases.
At first updatephase, each LMSE sends the number of documentsincluding each word to LS, and LS detects idf ofeach word.
At second update phase, preliminarysearch is performed using new idfs in order toupdate caches.z Query based Site Selection(QbSS)[7][8]CSE supports Boolean search based on Booleanformula.
In Boolean search of CSE, the operations?and?, ?or?, and ?and-not?
are available.
Let SA andSB be the set of target sites for search queries A and B,respectively.
Then, the set of target sites for queries?A and B?, ?A or B?, and ?A and-not B?
are SA ?
SB,SA ?
SB, and SA, respectively.
By this selection of thetarget sites, the number of messages in searchprocess is saved.These techniques are used as follows:if the previous page of ?Next 10?
search has beenalready searchedLACelse if query does not contain ?and?
or ?and-not?SbSSelse if it has been searched since index was updatedGSCelse if it has been searched oncePCelse // query is newQbSSfi4.
Temporal Information Retrieval in CSE4.1 Temporal QueryHere, we describe the temporal queries used to support theretrieval of temporal information.
CSE currently supportsBoolean queries for keywords, and temporal queries inaddition to keyword queries.
Temporal queries are used toselect documents existing at certain times or within certaintime intervals.A temporal query is an expression of a time point or atime interval.
First, we define a time point expression.Several conventional search engines can retrieve documentsmodified in some days or some months.
However, this levelof granularity is not sufficient for retrieving freshinformation.
A fresh information retrieval system has toretrieve documents modified within a matter of minutes atleast.
CSE updates the index within a few minutesindependent of the scale of the system.
In the near future, weexpect to allow retrieval in real time, which is ideal for thepurpose of fresh information retrieval.
Therefore, we employthe second as the granularity of a chronon.A computer stores time as an integer which is representedas the number of seconds after 1970-01-01 00:00:00 GMT.However, it is not natural for a human to count time usingonly seconds, so in this paper we represent time as thefollowing expression.Y/M/D/h/m/sHere, Y is the year in A.D., M is the numerical month (1-12),D is the day in a month (1-31), h is the hour (0-23), m is theminute(0-59), s is the second(0-59).
If each granularity isomitted, it denotes an initial value.
For an example, Y isY/1/1/0/0/0.Furthermore, a time which is prefixed with a minus signdenotes the difference from the current time.-Y/M/D/h/m/sFor example, -1/6 is a year and 6 months ago.
If the acceptedtemporal query is negative, it is added to the current time.
Anegative temporal query is provided for the user?sconvenience.Next, we define the attributes of a document and theirsymbols as time point variables./c  the created time of the document/e  the effective modified time of the document/m  the last modified time of the document/now  the current timeHere, the effective modified time of the document denotesthe last modified time where the content of the version isnearly equal to that of the current version.
We will describehow to calculate /e in section 4.2.
In the immutabledocument model, /m is used, and in the mutable documentmodel, /c is used.
The relationship of /c?/e?/m?/now isalways true.The following queries exist concerning time points t1 andt2.t1 < t2 : t1 before t2t1 > t2 : t1 after t2t1 = t2 : t1 simultaneous-with t2Here, time point queries are compared with each other in thesmallest granularity even if they form an ellipticalrepresentation.A time interval is represented as [t1,t2] using two timepoints t1 and t2.
If a time point T is included in [t1,t2] (T ?
[t1,t2]), t1?T ?
T<t2.
Although [t1,t2) is mathematically moreaccurate compared with [t1,t2], [t1,t2] is easy for us tounderstand.
In Allen?s temporal interval logic, which lacksthe concept of a time point, it is not clear whether both edgesof the time interval are included in the range of the timeinterval or not.
In our system, we allow an ellipticalrepresentation of a time interval such as [T] = [T,T+1], whereT+1 denotes the increment of the smallest explicit granularity,e.g.
[2000]=[2000,2001], [2002/1/31]=[2002/1/31,2002/2/1].The lifetime of the document is represented as [/c,/now].As mentioned in section 2.1, there are a large number ofrelationships between Allen?s time intervals.
However, theycan all be reduced to relationships between time points andthe functions giving the start point and the end point of thetime interval.
For this reason, CSE does not support intervalqueries but only point queries.Next, we discuss whether a temporal query is mixed witha keyword query or not.
In the case of mixing, the semanticsof a query is simple but its implementation is complex.Conversely, without mixing, the semantics of a query iscomplex but it can be implemented easily.
For example, wecan use the following query if mixing is allowed.
?FIFA World Cup?
and (((?Korea?
or ?Japan?)
and (/c in[2002])) or (?France?
and (/c in [1998])))This query searches for both documents that describe theWorld Cup held in Korea and Japan in 2002 and documentsthat describe the World Cup held in France in 1998.On the other hand, if mixing is not allowed, the followingquery could be used.
?FIFA World Cup?
and (?Korea?
or ?Japan?
or ?France?
)/c in [2002] or /c in [1998]Here, the relationship between keyword query and temporalquery is conjunctive.
This query searches for documents thatdescribe both the World Cup of France and the World Cup ofKorea and Japan in 1998 or 2002.
In the latter method, adocument describing Korea and Japan in 1998 and anotherdocument describing France in 2002 may both be retrieved.Therefore, we employ the former method.Temporal query TQ is represented with BNF as follows:TQ : Q | TQ or TQ |TQ and TQ | TQ and TC | TC and TQ |TQ not TQ | TQ not TCQ : K | Q and Q | Q or Q | Q not QTC : Tv > Tc | Tv < Tc | Tv = Tc | Tv ?
Tc | Tv ?
Tc |Tv in [Tc] | Tv in [Tc, Tc] |TC or TC | TC and TCHere, K is a keyword, Q is a Boolean expression ofkeywords, Tv is a time point variable, Tc is a time pointconstant, and TC is a temporal query.
Note that TC alonecannot be the temporal query TQ.
This is because alldocuments may be selected if only TC is the query, and suchretrieval is not useful.
Especially in distributed searchengines, a traffic overload may occur because sites are notselected.
TC is used to select from the result of Q using atemporal condition.The time in a temporal query is not the time intervalwhere information is current but the time point of the originof information.
Therefore, the query =/now cannot matchany document.
The query </now can match the samedocuments as a non-temporal information retrieval.4.2 Content based FreshnessFor a user who wants to know what was fresh at a certainpoint in time, it is useful to display a list of documents thatwere fresh at that time.
However, selecting documentsaccording to the last modification time recorded by the filesystem is not appropriate because even if the last change to adocument was only the correction of a slight typographicalerror, the document is regarded as having new content at thatmodification time.
On the other hand, adopting the timewhen each document was published on the network is alsoundesirable because we cannot recognize that a documentwas fresh at the point in time when the content of thedocument was completely changed.These shortcomings arise from the policy of treating thefreshness of a document without taking into account thechange of the meaning of the content.
Unfortunately it isdifficult to determine whether the content of a document haslargely changed or not.
In this paper, we propose analternative method of determining the change in content of adocument, by using the change in TF*IDFs for keywordsappearing in it.
In CSE, a retrieval result is displayed to theuser as a list of documents ranked according to TF*IDF forthe retrieval query.
In the same way as other search enginesadopting TF*IDF ranking, if an OR search for all keywordsis requested to CSE, all documents are ranked according tothe largest TF*IDF for a keyword appearing in eachdocument, which implies that we can think of a document ascontaining information regarding the keyword for whichTF*IDF is the largest.
Therefore, when the keyword havingthe largest TF*IDF is changed by editing a document, thecontent of the document is thought of as having changed,and the document is then ranked according to the keywordthat has the largest TF*IDF after the change.
The proposedmethod for determining whether or not the content of adocument has changed obeys this policy of TF*IDF ranking.The concFor anif td4.3 TemRankisearch enof docuretrieval,temporaldocumenindependIn temas they wsummaritwo kinditem is thin older otime poin?Case?
sinterval [last modfourth cwhich wis ignorePC(Persibut PC mitem in tthe olderPC.SbSSwork weAND-NOwell evenThis is bto the raORed timOrderNewerOlder rete algorithm for the method is as follows:y time,he keyword that has the largest TF*IDF in theocument has changed, thenupdate the time stamp of the document being freshto be the current time.poral Rankingng means sorting retrieved results.
Conventionalgines sort retrieved results in the descending orderment scores.
However, in temporal informationtemporal ranking is required.
In temporal ranking, asearch engine sorts retrieved results in order oft time.
Here, assume that ranking method isent on Boolean formula of keywords in a query.poral ranking, QbSS and SbSS work well as sameork well in score based ranking.
These effects arezed as table 2.
In first column of table 2, there ares of ranking order: ?newer?
and ?older?.
Here, tope newest one in newer order, and it is the oldest onerder.
In second column, there are two kind of basict queries: Tv < Tc, and Tv > Tc.
The third column,hows the relation of Tc in a query to total timemin, max] of a server.
Total time interval includesified times of all documents in a server.
Finally, inolumn ?effect,?
several site selection techniquesork well are listed.
When QbSS works well, the sited by QbSS.
SbSS means that SbSS works well.stent Cache) means that SbSS does not work wellay work.
SbSS works well if max is the time of tophe newer order or if min is the time of top item inorder.
A query is sent to the server iff either SbSS oris a key technique for scalability.
SbSS does notll if non-temporal query includes either AND orT.
However, in temporal query, SbSS may workif a temporal query includes AND and AND-NOT.ecause complex time interval query can be reducednge of one dimension of time.
For an example,e interval query ?i=1..n[si,ei] is reduced to [min si,Table 2.
The Effect of Site SelectionQuery Case Effectmax < Tc SbSSmin < Tc < max PCTv < TcTc < min QbSSmax < Tc QbSSmin < Tc < max SbSSTv > TcTc < min SbSSmax < Tc SbSSmin < Tc < max SbSSTv < TcTc < min QbSSmax < Tc QbSSmin < Tc < max PCTv > TcTc < min SbSSmax ei], and ANDed time interval query ?i=1..n[si,ei] isreduced to[max si, min ei].
In this way, all time interval querycan be reduced to simple time point query in table 2.Therefore, SbSS is efficient in temporal ranking.
However,SbSS does not work well if both temporal queries andnon-temporal queries are combined.
From such a point ofview, temporal query should not be used with non-temporalquery.
Although SbSS is not effective, PC may work well.This is because PC works well if the query has already beenretrieved once.5.
ImplementationIn this section, we describe the implementation of freshinformation retrieval.In CSE, LMSE searches for documents by calling LSE.LSE must support TF based scoring (not TF*IDF).
Namazu,one of the most popular small search engines in Japansupports TF scoring.
We assumed Namazu is used as theimplementation of LSE in our system.LSE constructs an index when updating occurs.
Here,LSE changes TF of an index even if documents are slightlymodified.
This is the original behavior of LSE.LMSE has yet another index.
After LSE has finishedupdating LSE?s index, LMSE extracts TF values from eachdocument in LSE?s index, and compares each TF value fromLMSE?s index and LSE?s index.
If they are different, LMSEcopies the TF value of the document from LSE to LMSE?sindex, and changes the publish timestamp of a document tobe the time LSE began the updating.
Finally, LMSE extractsthe highest scores of each word and range of timestamps(oldest and latest) of each document, and sends them to LS.Since LSE is used to search, slight changes to documents arereflected in their scores.
However, the timestamp is replacedby the time recorded by LMSE.If a query includes a temporal expression, Query basedSite Selection (QbSS)[7][8] is also used to select searchtarget sites.
Since LS has only the latest timestamps, LScannot select sites.
However, it is effective for freshinformation retrieval, which is the main purpose of CSE.LMSE descends a query recursively, and requests a singlekeyword expression from LSE.
LSE returns a result which issorted in TF order.
LMSE multiplies IDF, and carries out aset operation, selecting by temporal condition.
The searchresults are sorted in order of scores by a specified rankingmethod.
CS does not share the cache queues for differentranking methods.6.
EvaluationsAt first, we will show that the distributed search enginecan retrieve fresh information.
In paper[2], we comparedupdate intervals in the same document set between CSE anda centralized search engine which used Namazu and wget.
Acentralized search engine spent 2 hours and 20 minutes,whereas CSE finished in a few minutes.
CSE did not fail tosearch for fresh information within the bounds of these fewminutes.Assume that there are three documents, A, A?
and A?
?, whichhave similar subjects, and a fourth document, B, on adifferent subject.
Let the documents which are mixed be Aand A?, A?
?, B, in the ratio of t:1?t as tA+(1?t)A?, tA+(1?t)A??,tA+(1?t)B.
Fig.
3 shows the relationship between t and themaximum values of TF*IDF.
Here, the subjects of A, A?, A?
?and B are emacs, mule, xemacs and vi respectively.
Theorder of closeness to the subject of emacs is mule < xemacs< vi.
Words which have the maximum TF*IDF value ineach document are changed at t=2 in mule, which has asimilar subject to emacs.
In vi, which has quite a differentsubject, the maximum TF*IDF word changed at t=3.Therefore, it will be judged that the content was changed if20 to 30% of documents were changed, when the variationof the content is detected by the maximum value of TF*IDF.7.
Related WorksThere are two types of temporal information retrieval:retrieving documents by time and displaying documents inthe order of time.
Namazu[1], Goo, Infoseek, NAVER[11],Google and so on can be used to search documents by time.Namazu searches HTML documents with HTTP headersand e-mail like documents by using a regular expressioninvolving time.
Since these documents have a date: field intheir header, they can easily be searched by time.
However,normal HTML documents without headers have no date:fields.
In HTML documents with a header, the date: fieldoften denotes the time that they were downloaded.
For thisreason, Namazu can not search web documents by time.In Goo, a user can select before/after a particular date.Goo searches for the newest information since Goo does notdistinguish between different versions of a document.However, searching documents by date is not efficient forfresh information retrieval.
Searching by second, or at themost by minute, is required.In Infoseek, a user can also select before/after a particulardate, and Infoseek supports searching by a range of dates.NAVER supports specifying a range of months indocument search mode which searches for non-HTMLdocuments such as MS Word, Excel files, PDF and so on.However, specifying a range of months is completelyunsuitable.
Furthermore, NAVER does not support051015202530350 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1ttf*idfmule xemacs viFigure 3.
TF*IDF max scoresspecifying a particular date or month.In Google, a user can select ?past 3, 6, 12 months?
inAdvanced Search mode.
However, this is not as efficient asNAVER.Among those mentioned above, Infoseek is most similarto fresh information retrieval, however the freshness isinsufficient because Infoseek only supports specifyingdocuments by date.Namazu, FreshEye and NAVER display search results inorder of time.
They can also display results in increasing ordecreasing order.
Other search engines such as Yahoo,AltaVista, Excite and Lycos do not support searching bytime.In the field of databases, there is much work regardingtemporal database management[12].
The Valid Web[13]realizes temporal retrieval by specifying the valid time ofweb documents using XML.
However, no HTMLdocuments are able to specify a valid time.Although search engines are a kind of database, fewexperiments have been conducted on retrieving temporalinformation.
One of the reasons is the search enginearchitecture.
The search engines mentioned above all have acentralized architecture.
Centralized search engines spend alot of time gathering documents.
Therefore, it is difficult forthese search engines to collect temporal information.However, with distributed search engines, almost real-timeretrieval is practical since they do not need to gatherdocuments over the network.A number of distributed search engines exist, such asWhois++[9], Harvest[10], GlOSS and so on.
Whois++ andHarvest use forward knowledge.
Forward knowledge is alsoused in CSE, however, these systems have no limitation onretrieval response time.
CSE realizes regular response timeregardless of its scale.
In addition, these search engines donot support temporal information retrieval.7.
ConclusionsIn this paper, we introduced the concept of temporalinformation retrieval, and clarified the difference betweenfresh information retrieval, which is a subset of temporalinformation retrieval and existing information retrieval.
Wediscussed the necessary conditions for fresh informationretrieval, and described an implementation of it in CSE.
Also,we proposed an implementation of temporal ranking in CSE.The following is a list of our future work: verifying theeffectiveness of search engines for fresh informationretrieval by long?term experiments, and developing a searchengine which realizes complete temporal informationretrieval.AcknowledgementThis research was cooperatively performed as a part of?Scalable Distributed Search Engine for Fresh InformationRetrieval (14780242)?
in Grant-in-Aid for ScientificResearch promoted by Japan Society for the Promotion ofScience (JSPS).References[1] The Namazu Project, ?Namazu?,http://www.namazu.org/[2] Nobuyoshi Sato, Minoru Uehara, Yoshifumi Sakai,Hideki Mori, "Fresh Information Retrieval usingCooperative Meta Search Engines," In Proceedings ofthe 16th International Conference on InformationNetworking (ICOIN-16), Vol.2, 7A-2, pp.1-7,(2002.1.31)[3] Nobuyoshi Sato, Takashi Yamamoto, YoshihiroNishida, Minoru Uehara, Hideki Mori, ?Look AheadCache for Next 10 in Cooperative Search Engine?, inproc.
of DPSWS 2000, IPSJ Symposium Series,Vol.2000, No.15, pp.205-210 (2000.12) (in Japanese)[4] Nobuyoshi Sato, Minoru Uehara, Yoshifumi Sakai,Hideki Mori, ?Score Based Site Selection inCooperative Search Engine?, in proc.
ofDICOMO?2001 IPSJ Symposium Series, Vol.2001,No.7, pp.465-470, (2001.6) (in Japanese)[5] Nobuyoshi Sato, Minoru Uehara, Yoshifumi Sakai,Hideki Mori, ?Global Shared Cache in CooperativeSearch Engine?, in proc.
of DPSWS 2001, IPSJSymposium Series, Vol.2001, No.13, pp.219-224,(2001.10) (in Japanese)[6] Nobuyoshi Sato, Minoru Uehara, Yoshifumi Sakai,Hideki Mori ?Persistent Cache in Cooperative SearchEngine,?
MNSA?02[7] Yoshifumi Sakai, Nobuyoshi Sato, Minoru Uehara,Hideki Mori, ?The Optimal Monotonization forSearch Queries in Cooperative Search Engine?, in proc.of DICOMO2001, IPSJ Symposium Series, Vol.2001,No.7, pp.453-458 (2001.6) (in Japanese)[8] Nobuyoshi Sato, Minoru Udagawa, Minoru Uehara,Yoshifumi Sakai, Hideki Mori, ?Query based SiteSelection for Distributed Search Engines?, MNSA?03[9] C. Weider, J. Fullton, S. Spero: ?Architecture of theWhois++ Index Service?, RFC1913[10] C. Mic Bowman, Peter B. Danzig, Darren R. Hardy,Udi Manber, Michael F. Schwartz: ?The HarvestInformation Discovery and Access System?, 2ndWWW Conference, http://www.ncsa.uiuc.edu/SDG/IT94/Proceedings/Searching/schwartz.harvest/schwartz.harvest.html[11] NAVER, http://www.naver.com/[12] Christian S. Jensen: ?Temporal DatabaseManagement?, Thesis,http://www.cs.auc.dk/~csj/Thesis/[13] Fabio Grandi, Federica Mandreoli, ?The Valid Web:An XML/XSL Infrastructure for TemporalManagement of Web Documents,?
ADVIS2000, pp.294-303, 2000[14] J. F. Allen, ?Towards a general theory of action andtime,?
Artificial Intelligence, vol.
23, pp.123-154, 1984
