Proceedings of the ACL Interactive Poster and Demonstration Sessions,pages 73?76, Ann Arbor, June 2005. c?2005 Association for Computational LinguisticsSenseRelate::TargetWord ?
A Generalized Frameworkfor Word Sense DisambiguationSiddharth PatwardhanSchool of ComputingUniversity of UtahSalt Lake City, UT 84112sidd@cs.utah.eduSatanjeev BanerjeeLanguage Technologies Inst.Carnegie Mellon UniversityPittsburgh, PA 15213satanjeev@cmu.eduTed PedersenDept.
of Computer ScienceUniversity of MinnesotaDuluth, MN 55812tpederse@d.umn.eduAbstractWe have previously introduced a methodof word sense disambiguation that com-putes the intended sense of a target word,using WordNet-based measures of seman-tic relatedness (Patwardhan et al, 2003).SenseRelate::TargetWord is a Perl pack-age that implements this algorithm.
Thedisambiguation process is carried out byselecting that sense of the target wordwhich is most related to the context words.Relatedness between word senses is mea-sured using the WordNet::Similarity Perlmodules.1 IntroductionMany words have different meanings when used indifferent contexts.
Word Sense Disambiguation isthe task of identifying the intended meaning of agiven target word from the context in which it isused.
(Lesk, 1986) performed disambiguation bycounting the number of overlaps between the dic-tionary definitions (i.e., glosses) of the target wordand those of the neighboring words in the con-text.
(Banerjee and Pedersen, 2002) extended thismethod of disambiguation by expanding the glossesof words to include glosses of related words, accord-ing to the structure of WordNet (Fellbaum, 1998).In subsequent work, (Patwardhan et al, 2003) and(Banerjee and Pedersen, 2003) proposed that mea-suring gloss overalps is just one way of determin-ing semantic relatedness, and that word sense dis-ambiguation can be performed by finding the mostrelated sense of a target word to its surrounding con-text using a wide variety of measures of relatedness.SenseRelate::TargetWord is a Perl package thatimplements these ideas, and is able to disambiguatea target word in context by finding the sense that ismost related to its neighbors according to a speci-fied measure.
A user of this package is able to makea variety of choices for text preprocessing options,context selection, relatedness measure selection andthe selection of an algorithm for computing the over-all relatedness between each sense of the target wordand words in the surrounding context.
The user cancustomize each of these choices to fit the needs ofher specific disambiguation task.
Further, the vari-ous sub-tasks in the package are implemented in amodular fashion, allowing the user to easily replacea module with her own module if needed.The following sections describe the generalizedframework for Word Sense Disambiguation, the ar-chitecture and usage of SenseRelate::TargetWord,and a description of the user interfaces (commandline and GUI).2 The FrameworkThe package has a highly modular architecture.
Thedisambiguation process is divided into a number ofsmaller sub-tasks, each of which is represented bya separate module.
Each of the sequential sub-tasksor stages accepts data from a previous stage, per-forms a transformation on the data, and then passeson the processed data structures to the next stage inthe pipeline.
We have created a protocol that definesthe structure and format of the data that is passedbetween the stages.
The user can create her own73RelatednessMeasureContextTarget SensePreprocessingFormat FilterSense InventoryContext Selection PostprocessingPick SenseFigure 1: A generalized framework for Word Sense Disambiguation.modules to perform any of these sub-tasks as longas the modules adhere to the protocol laid down bythe package.Figure 1 projects an overview of the architectureof the system and shows the various sub-tasks thatneed to be performed to carry out word sense dis-ambiguation.
The sub-tasks in the dotted boxes areoptional.
Further, each of the sub-tasks can be per-formed in a number of different ways, implying thatthe package can be customized in a large number ofways to suit different disambiguation needs.2.1 Format FilterThe filter takes as input file(s) annotated in theSENSEVAL-2 lexical sample format, which is anXML?based format that has been used for both theSENSEVAL-2 and SENSEVAL-3 exercises.
A file inthis format includes a number of instances, each onemade up of 2 to 3 lines of text where a single tar-get word is designated with an XML tag.
The fil-ter parses the input file to build data structures thatrepresent the instances to be disambiguated, whichincludes a single target word and the surroundingwords that define the context.2.2 PreprocessingSenseRelate::TargetWord expects zero or more textpreprocessing modules, each of which perform atransformation on the input words.
For example, theCompound Detection Module identifies sequencesof tokens that form compound words that are knownas concepts to WordNet (such as ?New York City?
).In order to ensure that compounds are treated as asingle unit, the package replaces them in the instancewith the corresponding underscore?connected form(?New York City?
).Multiple preprocessing modules can be chainedtogether, the output of one connected to the input ofthe next, to form a single preprocessing stage.
Forexample, a part of speech tagging module could beadded after compound detection.2.3 Context SelectionDisambiguation is performed by finding the sense ofthe target word that is most related to the words inits surrounding context.
The package allows for var-ious methods of determining what exactly the sur-rounding context should consist of.
In the currentimplementation, the context selection module usesan n word window around the target word as con-text.
The window includes the target word, and ex-tends to both the left and right.
The module selectsthe n?
1 words that are located closest to the targetword, and sends these words (and the target) on tothe next module for disambiguation.
Note that thesewords must all be known to WordNet, and shouldnot include any stop?words.However, not all words in the surrounding contextare indicative of the correct sense of the target word.An intelligent selection of the context words used inthe disambiguation process could potentially yieldmuch better results and generate a solution fasterthan if all the nearby words were used.
For exam-ple, we could instead select the nouns from the win-dow of context that have a high term?frequency todocument?frequency ratio.
Or, we could identifylexical chains in the surrounding context, and onlyinclude those words that are found in chains that in-clude the target word.742.4 Sense InventoryAfter having reduced the context to n words, theSense Inventory stage determines the possible sensesof each of the n words.
This list can be obtainedfrom a dictionary, such as WordNet.
A thesauruscould also be used for the purpose.
Note however,that the subsequent modules in the pipeline shouldbe aware of the codes assigned to the word senses.In our system, this module first decides the base(uninflected) form of each of the n words.
It thenretrieves all the senses for each word from the senseinventory.
We use WordNet for our sense inventory.2.5 PostprocessingSome optional processing can be performed on thedata structures generated by the Sense Inventorymodule.
This would include tasks such as sensepruning, which is the process of removing somesenses from the inventory, based on simple heuris-tics, algorithms or options.
For example, the usermay decide to preclude all verb senses of the targetword from further consideration in the disambigua-tion process.2.6 Identifying the SenseThe disambiguation module takes the lists of sensesof the target word and those of the context words anduses this information to pick one sense of the tar-get word as the answer.
Many different algorithmscould be used to do this.
We have modules Localand Global that (in different ways) determine the re-latedness of each of the senses of the target wordwith those of the context words, and pick the mostrelated sense as the answer.
These are describedin greater detail by (Banerjee and Pedersen, 2002),but in general the Local method compares the targetword to its neighbors in a pair-wise fashion, whilethe Global method carries out an exhaustive compar-ison between all the senses of the target word and allthe senses of the neighbors.3 Using SenseRelate::TargetWordSenseRelate::TargetWord can be used via thecommand-line interface provided by the utility pro-gram called disamb.pl.
It provides a rich variety ofoptions for controlling the process of disambigua-tion.
Or, it can be embedded into Perl programs,by including it as a module and calling its variousmethods.
Finally, there is a graphical interface tothe package that allows a user to highlight a word incontext to be disambiguated.3.1 Command LineThe command-line interface disamb.pl takes as inputa SENSEVAL-2 formatted lexical sample file.
Theprogram disambiguates the marked up word in eachinstance and prints to screen the instance ID, alongwith the disambiguated sense of the target word.Command line options are available to control thedisambiguation process.
For example, a user canspecify which relatedness measure they would liketo use, whether disambiguation should be carried outusing Local or Global methods, how large a win-dow of context around the target word is to be used,and whether or not all the parts of speech of a wordshould be considered.3.2 Programming InterfaceSenseRelate::TargetWord is distributed as a Perlpackage.
It is programmed in object-oriented Perlas a group of Perl classes.
Objects of these classescan be instantiated in user programs, and meth-ods can be called on these objects.
The pack-age requires that the Perl interface to WordNet,WordNet::QueryData1 be installed on the system.The disambiguation algorithms also require that thesemantic relatedness measures WordNet::Similarity(Pedersen et al, 2004) be installed.3.3 Graphical User InterfaceWe have developed a graphical interface for thepackage in order to conveniently access the disam-biguation modules.
The GUI is written in Gtk-Perl?
a Perl API to the Gtk toolkit.
Unlike the commandline interface, the graphical interface is not tied toany input file format.
The interface allows the user toinput text, and to select the word to disambiguate.
Italso provides the user with numerous configurationoptions corresponding to the various customizationsdescribed above.1http://search.cpan.org/dist/WordNet-QueryData754 Related WorkThere is a long history of work in Word Sense Dis-ambiguation that uses Machine Readable Dictionar-ies, and are highly related to our approach.One of the first approaches was that of (Lesk,1986), which treated every dictionary definition ofa concept as a bag of words.
To identify the in-tended sense of the target word, the Lesk algorithmwould determine the number of word overlaps be-tween the definitions of each of the meanings of thetarget word, and those of the context words.
Themeaning of the target word with maximum defini-tion overlap with the context words was selected asthe intended sense.
(Wilks et al, 1993) developed a context vectorapproach for performing word sense disambigua-tion.
Their algorithm built co-occurrence vectorsfrom dictionary definitions using Longman?s Dictio-nary of Contemporary English (LDOCE).
They thendetermined the extent of overlap between the sum ofthe vectors of the words in the context and the sumof the vectors of the words in each of the definitions(of the target word).
For vectors, the extent of over-lap is defined as the dot product of the vectors.
Themeaning of the target word that had the maximumoverlap was selected as the answer.More recently, (McCarthy et al, 2004) present amethod that performs disambiguation by determingthe most frequent sense of a word in a particular do-main.
This is based on measuring the relatednessof the different possible senses of a target word (us-ing WordNet::Similarity) to a set of words associatedwith a particular domain that have been identifiedusing distributional methods.
The relatedness scoresbetween a target word and the members of this setare scaled by the distributional similarity score.5 AvailabilitySenseRelate::TargetWord is written in Perl and isfreely distributed under the Gnu Public License.
Itis available via SourceForge, an Open Source de-velopment platform2, and the Comprehensive PerlArchive Network (CPAN)3.2http://senserelate.sourceforge.net3http://search.cpan.org/dist/WordNet-SenseRelate-TargetWord6 AcknowledgementsThis research is partially supported by a NationalScience Foundation Faculty Early CAREER Devel-opment Award (#0092784).ReferencesS.
Banerjee and T. Pedersen.
2002.
An adapted Leskalgorithm for word sense disambiguation using Word-Net.
In Proceedings of the Third International Confer-ence on Intelligent Text Processing and ComputationalLinguistics, Mexico City, February.S.
Banerjee and T. Pedersen.
2003.
Extended gloss over-laps as a measure of semantic relatedness.
In Pro-ceedings of the Eighteenth International Conferenceon Artificial Intelligence (IJCAI-03), Acapulco, Mex-ico, August.C.
Fellbaum, editor.
1998.
WordNet: An electronic lexi-cal database.
MIT Press.M.
Lesk.
1986.
Automatic sense disambiguation usingmachine readable dictionaries: How to tell a pine conefrom a ice cream cone.
In Proceedings of SIGDOC?86.Diana McCarthy, Rob Koeling, Julie Weeds, and JohnCarroll.
2004.
Finding predominant word sensesin untagged text.
In Proceedings of the 42nd Meet-ing of the Association for Computational Linguistics(ACL?04), Main Volume, pages 279?286, Barcelona,Spain, July.S.
Patwardhan, S. Banerjee, and T. Pedersen.
2003.
Us-ing measures of semantic relatedness for word sensedisambiguation.
In Proceedings of the Fourth In-ternational Conference on Intelligent Text Processingand Computational Linguistics (CICLING-03), Mex-ico City, Mexico, February.Ted Pedersen, Siddharth Patwardhan, and Jason Miche-lizzi.
2004.
Wordnet::Similarity - Measuring the Re-latedness of Concepts.
In Daniel Marcu Susan Du-mais and Salim Roukos, editors, HLT-NAACL 2004:Demonstration Papers, pages 38?41, Boston, Mas-sachusetts, USA, May 2 - May 7.
Association forComputational Linguistics.Y.
Wilks, D. Fass, C. Guo, J. McDonald, T. Plate, andB.
Slator.
1993.
Providing machine tractable dictio-nary tools.
In J. Pustejovsky, editor, Semantics andthe Lexicon.
Kluwer Academic Press, Dordrecht andBoston.76
