Proceedings of the 12th European Workshop on Natural Language Generation, pages 183?184,Athens, Greece, 30 ?
31 March 2009. c?2009 Association for Computational LinguisticsRealizing the Costs: Template-Based Surface Realisation in the GRAPHApproach to Referring Expression GenerationIvo BrugmanUniversity of TwenteThe Netherlandsi.h.g.brugman@student.utwente.nlMarie?t TheuneUniversity of TwenteThe Netherlandsm.theune@utwente.nlEmiel KrahmerTilburg UniversityThe Netherlandse.j.krahmer@uvt.nlJette ViethenMacquarie UniversityAustraliajviethen@ics.mq.edu.auAbstractWe describe a new realiser developed forthe TUNA 2009 Challenge, and present itsevaluation scores on the development set,showing a clear increase in performancecompared to last year?s simple realiser.1 IntroductionThe TUNA Challenge 2009 is the last in a seriesof challenges using the TUNA corpus of refer-ring expressions (Gatt et al 2007) for compara-tive evaluation of referring expression generation.The 2009 Challenge is aimed at end-to-end re-ferring expression generation, which encompassestwo subtasks: (1) attribute selection, choosing anumber of attributes that uniquely characterize atarget object, distinguishing it from other objectsin a visual scene, and (2) realisation, convertingthe selected set of attributes into a word string.Our contributions to the previous Challenges fo-cused on subtask (1), but this year we focus onsubtask (2).
Below, we briefly sketch how attributeselection is performed in our system, describe ournewly developed realiser, and present our evalua-tion results on the TUNA 2009 development set.2 Attribute selectionWe use the Graph-based algorithm of Krahmeret al (2003) for attribute selection.
In this ap-proach, objects and their attributes are representedin a graph as nodes and edges respectively, andattribute selection is seen as a graph search prob-lem that outputs the cheapest distinguishing graph,given a particular cost function that assigns coststo attributes.
By assigning zero costs to some at-tributes, e.g., the type of an object, the humantendency to mention redundant properties can bemimicked.
For the TUNA Challenge 2009 weuse the same settings as last year (Krahmer et al2008).
The used cost function assigns a zero costto attributes that are highly frequent in the TUNAcorpus, while the other attributes have a cost ofeither 1 (somewhat infrequent) or 2 (very infre-quent).
The order in which attributes are addedis also controlled: to ensure that the cheapest at-tributes are added first, they are tried in the orderof their frequency in the TUNA (2008) trainingcorpus.
Using these settings, last year the GRAPHattribute selection algorithm made the top 3 on allevaluation measures (Gatt et al 2008, Table 11).3 RealisationThe main resource for realisation is a set of tem-plates, derived from the human-produced objectdescriptions in the TUNA 2009 training data.
Toconstruct the templates, we first grouped the de-scriptions by the combination of attributes theyexpressed.
For instance, in the domain of furni-ture references, all descriptions expressing the at-tributes colour, type and orientation were groupedtogether.
This was done for all combinations ofattributes.
Next, for each description, parts of theword string were related to the attributes in the set.For instance, for the string ?red couch facing left?,we linked ?red?
to colour, ?couch?
to type, and?facing left?
to orientation.1 This provided us withinformation on how the attributes were expressed(e.g., by adjectives or prepositional phrases) andin which order they appeared in the word string.For each combination of attributes, the surface or-der that occurred most frequently was selected asthe basis for a template.
If multiple orderingswere equally frequent, we chose the most natural-seeming one.
This resulted in templates such as?the [colour] [type] facing [orientation]?
for the at-tribute set {type, colour, orientation}.During realisation, the templates are used as fol-1This corresponds to the ANNOTATED-WORD-STRINGnodes already present in the TUNA corpus.
Unfortunately,various problems prevented us from automatically derivingour templates from those existing annotations.183lows.
When a set of attributes is input to the re-aliser, it checks if there is a template matching thisparticular attribute combination.
If so, the tem-plate is selected, and the gaps in the template arefilled with lexical expressions for the attribute val-ues.
The words used to express the values arethose that occurred most frequently in the train-ing data for this particular template.
If no match-ing template is found, a description is generatedin a simple rule-based fashion, based on the re-aliser we used last year, but with improved lexicalchoices.
For example, the old realiser always usedthe word ?person?
to express the type attribute indescriptions of people, whereas in the TUNA cor-pus ?man?
is used most frequently.
We changedthe realiser to reflect such human preferences.Template construction for the furniture domainwas fairly straightforward, resulting in 25 tem-plates.
In practice, only 13 of these are used.
Sincethe GRAPH attribute selection algorithm adds thetype and colour attributes to a description for free,these attributes are always selected, making anytemplates lacking them irrelevant given the currentsettings of the algorithm.For the more realistic people domain, templateconstruction was more complicated.
For exam-ple, when the hairColour attribute is mentioned inhuman descriptions it can refer either to the hairon a person?s head (?white-haired?)
or his beard(?with a white beard?).
The attribute selection al-gorithm does not make this distinction, leaving itunclear which of the two realisations should beused when hairColour and hasBeard attributes areboth to be included in a description.
We solvedthis by simply using the expression that occurredmost frequently in the training data for each at-tribute combination, even allowing hairColour tobe mentioned twice if this happened in most hu-man descriptions.
Another problem is that manyattribute combinations occurred only once in thetraining data, leading to a very large number (50+)of potential templates.
We reduced this number inan ad hoc manner, by ignoring combinations in-volving attributes (such as hasHair) that are veryunlikely to be selected given the current settingsof the attribute selection algorithm.
This approachleft us with 40 templates in the people domain.4 EvaluationSystem performance is measured by comparingthe generated word strings to the human descrip-MED MNED BLEU 3Furniture 4.94 (5.48) 0.48 (0.50) 0.27 (0.22)People 5.15 (7.53) 0.46 (0.67) 0.33 (0.07)Overall 5.03 (6.42) 0.47 (0.58) 0.30 (0.15)Table 1: Results on the 2009 development set (be-tween brackets are those using last year?s realiser).tions in the TUNA development set, comprising80 furniture and 68 people descriptions.
The eval-uation measures reported here are mean edit dis-tance (MED), the mean of the token-based Lev-enshtein edit distance between the reference wordstrings and the system word strings, mean nor-malised edit distance (MNED), where the edit dis-tance is normalised by the number of tokens, andcumulative BLEU 3 score.
Table 1 summarizesour evaluation results.
For comparison, we alsoprovide the results obtained when using last year?ssimple realiser, which we reimplemented in Java.We see a clear improvement when we comparethe performance of the new and the old realiser, inparticular in the people domain.
However, furtherevaluation experiments are required to determinewhether the improvements are mostly due to ouruse of templates derived from human descriptions,or to the simple improvements in lexical choiceincorporated in the rules used as fall-back in caseno matching templates are found.To further improve the realiser, we need to addtemplates for all remaining attribute combinationsfound in the corpus.
This should not be difficult,as the set-up of the realiser allows easy creation oftemplates.
It should also be easily portable to otherlanguages; in fact we intend to explore its use forthe realisation of referring expressions in Dutch.ReferencesGatt, A., I. van der Sluis and K. van Deemter 2007.Evaluating algorithms for the generation of referringexpressions using a balanced corpus.
Proceedings ofENLG 2007 49-56.Gatt, A., A. Belz and E. Kow 2008.
The TUNA chal-lenge 2008: Overview and evaluation results Pro-ceedings of INLG 2008 198-206.Krahmer, E., S. van Erk and A. Verleg 2003.
Graph-based generation of referring expressions.
Compu-tational Linguistics, 29(1), 53-72.Krahmer, E., M. Theune, J. Viethen, and I. Hendrickx2008.
GRAPH: The costs of redundancy in referringexpressions.
Proceedings of INLG 2008 227-229.184
