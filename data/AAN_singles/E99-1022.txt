Proceedings of EACL '99Selective Magic HPSG ParsingGuido Minnen*Cognitive and Computing Sciences, University of SussexFalmer, Brighton BN1 9QHUnited KingdomGuido.Minnen@cogs.susx.ac.ukwww.cogs.susx.ac.uk/lab/nlp/minnen/minnen.htmlAbstractWe propose a parser for constraint-logic grammars implementing HPSGthat combines the advantages of dy-namic bottom-up and advanced top-down control.
The parser allows theuser to apply magic compilation to spe-cific constraints in a grammar which asa result can be processed dynamicallyin a bottom-up and goal-directed fash-ion.
State of the art top-down process-ing techniques are used to deal with theremaining constraints.
We discuss vari-ous aspects concerning the implementa-tion of the parser as part of a grammardevelopment system.1 IntroductionIn case of large grammars the space requirementsof dynamic parsing often outweigh the benefit ofnot duplicating sub-computations.
We propose aparser that avoids this drawback through combin-ing the advantages of dynamic bottom-up and ad-vanced top-down control.
1 The underlying idea isto achieve faster parsing by avoiding tabling onsub-computations which are not expensive.
Theso-called selective magic parser allows the user toapply magic compilation to specific constraints ina grammar which as a result can be processed y-namically in a bottom-up and goal-directed fash-ion.
State of the art top-down processing tech-niques are used to deal with the remaining con-straints.Magic is a compilation technique originally de-veloped for goal-directed bottom-up rocessing oflogic programs.
See, among others, (Ramakrish-nan et al 1992).
As shown in (Minnen, 1996)*The presented research was carried out at the Uni-versity of Tfibingen, Germany, as part of the Sonder-forschungsbereich 340.1A more detailed iscussion of various aspects ofthe proposed parser can be found in (Minnen, 1998).magic is an interesting technique with respect onatural language processing as it incorporates fil-tering into the logic underlying the grammar andenables elegant control independent filtering im-provements.
In this paper we investigate the se-lective application of magic to typed feature gram-mars a type of constraint-logic grammar based onTyped Feature Logic (Tgv?
:; GStz, 1995).
Typedfeature grammars can be used as the basis forimplementations of Head-driven Phrase StructureGrammar (HPSG; Pollard and Sag, 1994) as dis-cussed in (GStz and Meurers, 1997a) and (Meur-ers and Minnen, 1997).
Typed feature grammarconstraints that are inexpensive to resolve aredealt with using the top-down interpreter of theConTroll grammar development system (GStz andMeurers, 1997b) which uses an advanced searchfunction, an advanced selection function and in-corporates a coroutining mechanism which sup-ports delayed interpretation.The proposed parser is related to the so-calledLemma Table deduction system (Johnson andDSrre, 1995) which allows the user to specifywhether top-down sub-computations are to betabled.
In contrast to Johnson and DSrre's deduc-tion system, though, the selective magic parsingapproach combines top-down and bottom-up con-trol strategies.
As such it resembles the parserof the grammar development system AttributeLanguage Engine (ALE) of (Carpenter and Penn,1994).
Unlike the ALE parser, though, the selec-tive magic parser does not presuppose a phrasestructure backbone and is more flexible as towhich sub-computations are tabled/filtered.Bottom-up Interpretation ofMagic-compiled Typed FeatureGrammarsWe describe typed feature grammars and discusstheir use in implementing HPSG grammars.
Sub-sequently we present magic compilation of typed165Proceedings of EACL '99feature grammars on the basis of an example andintroduce a dynamic bottom-up interpreter thatcan be used for goM-directed interpretation ofmagic-compiled typed feature grammars.2.1 Typed Feature  GrammarsA typed feature grammar consists of a signa-ture and a set of definite clauses over the con-straint language of equations o fTY?
(GStz, 1995)terms (HShfeld and Smolka, 1988) which we willrefer to as Torz: definite clauses.
Equations overTJr?
terms can be solved using (graph) unifica-tion provided they are in normal form.
(GStz,1994) describes a normal form for ir~r?
terms,where typed feature structures are interpreted assatisfiable normal form T~r?
: terms.
2 The signa-ture consists of a type hierarchy and a set of ap-propriateness conditions.Example  1 The signature specified in figure 1and 2 and the T~r?
: definite clauses in figure 3constitute an example of a typed feature gram-mar.
We write T~r?
terms in normal form, i. e.,relationFigure 2: Example of a typed feature grammarsignature (part 2)as typed feature structures.
In addition, uninfor-mative feature specifications are ignored and typ-ing is left implicit when immaterial to the exampleat hand.
Equations between typed feature struc-tures are removed by simple substitution or tagsindicating structure sharing.
Notice that we alsouse non-numerical tags such as ~ and ~ .
Ingeneral all boxed items indicate structure sharing.For expository reasons we represent he ARGnfeatures of the append relation as separate argu-ments.Typed feature grammars can be used as thebasis for implementations of Head-driven PhraseStructure Grammar (Pollard and Sag, 1994).
3(Meurers and Minnen, 1997) propose a compi-lation of lexical rules into T~r/: definite clauses2This view of typed feature structures differs fromthe perspective on typed feature structures as mod-ehng partial information as in (Carpenter, 1992).Typed feature structures as normal form ir~'~E termsare merely syntactic objects.aSee (King, 1994) for a discussion of the appro-priateness of T~-?
: for HPSG and a comparison withother feature logic approaches designed for HPSG.
(1) constituent( \[PHON ):-LSEMPHONconstituent( \[ AGR )'I_Sr~MteAT?
1constituent( |AGR )'append(\[~,\[~,\[~).rCAT ?, \](2) constituent( \[PHON ( ,,,,y ) /xGR ,h.~-,,.~\] )"(3) constituent( |PHON (,leCp,)/AGR ,h,.~-.,.~ I ).
LSEM sleep J(4) append((), F'~' ~)"  (5) append( 3 |a.ppend(F'x- ~,~,  ~Y's\])-Figure 3: Example of a set of T:7:?
definite clauseswhich are used to restrict lexical entries.
(GStzand Meurers, 1997b) describe a method for com-piling implicational constraints into typed featuregrammars and interleaving them with relationalconstraints.
4 Because of space limitations we haveto refrain from an example.
The ConTroll gram-mar development system as described in (GStzand Meurers, 1997b) implements the above men-tioned techniques for compiling an HPSG theoryinto typed feature grammars.2.2 Magic Compi la t ionMagic is a compilation technique for goal-directedbottom-up processing of logic programs.
See,among others, (Ramakrishnan et al 1992).
Be-cause magic compilation does not refer to the spe-cific constraint language adopted, its applicationis not limited to logic programs/grammars: It canbe applied to relational extensions of other con-straint languages such as typed feature grammarswithout further adaptions.Due to space limitations we discuss magic com-pilation by example only.
The interested readeris referred to (Nilsson and Maluszynski, 1995) foran introduction.Example  2 We illustrate magic compilation oftyped feature grammars with respect to definite4 (GStz, 1995) proves that this compilation methodis sound in the general case and defines the large classof type constraints for which it is complete.166Proceedings of EACL '99T\ ~ ~ IPHON list \[?
k ~ .
IAGR agr\[mary / / relation / liY~st elist /g r  ~ r -/ ~  nelistk~ "st\[ th+d-sing mary If sleep~_LIBJ sem--\]s np vFigure h Example of a typed feature grammar signature (part 1)clause 1 in figure 3.
Consider the TJ:?
definiteclause in figure 4.
As a result of magic compi-+\] constituent~ IP"O.
):- \[SZMmagic_constituent ~) ,PHON constituent( \[AGR )'I.Sr,~ FEAT" \]constituent( \[AGR )'LsE \[suBJ EllappendG,D,Vl).Figure 4: Magic variant of definite clause 1 in fig-ure 3lation a magic literal is added to the right-handside of the original definite clause.
Intuitively un-derstood, this magic literal "guards" the applica-tion of the definite clause.
The clause is appliedonly when there exists a fact that unifies with thismagic l iteral) The resulting definite clause is alsoreferred to as the magic variant of the original def-inite clause.The definite clause in figure 5 is the so-calledseed which is used to make the bindings as pro-vided by the initial goal available for bottom-upprocessing.
In this case the seed corresponds tothe initial goal of parsing the string 'mary sleeps'.Intuitively understood, the seed makes availablethe bindings of the initial goal to the magic vari-SA fact can be a unit clause, i. e., a TJr?
definiteclause without right-hand side literals, from the gram-mar or derived using the rules in the grammar.
In thelatter case one also speaks of a passive dge.CAT s 1 magic_constituent( IPHON (m~r~,sl,ep,)).\[SZM ,,~ JFigure 5: Seed corresponding tothe initial goal ofparsing the string 'mary sleeps'ants of the definite clauses defining a particularinitial goal; in this case the magic variant of thedefinite clause defining a constituent of category's'.
Only when their magic literal unifies with theseed are these clauses applied.
6The so-cMled magic rules in figure 6 are derivedin order to be able to use the bindings provided bythe seed to derive new facts that provide the bind-ings which allow for a goal-directed application ofthe definite clauses in the grammar not directlydefining the initial goal.
Definite clause 3, forexample, can be used to derive a magic_appendfact which percolates the relevant bindings of theseed/initial goal to restrict the application of themagic variant of definite clauses 4 and 5 in figure 3(which are not displayed).2.3 Semi-naive Bot tom-up In terpretat ionMagic-compiled logic programs/grammars can beinterpreted in a bottom-up fashion without losingany of the goal-directedness normally associatedwith top-down interpretation using a so-calledsemi-naive bottom-up interpreter: A dynamic in-terpreter that tables only complete intermediateresults, i. e., facts or passive edges, and usesan agenda to avoid redundant sub-computations.The Prolog predicates in figure 7 implement a~The creation of the seed can be postponed untilrun  time, such that the grammar does not need to becompiled for every possible initial goal.167Proceedings of EACL '99CAT ~p \](i) magic_constituent( |AGR|PEON agr|list ):_LSEM sere A\[c T , \]magic_constituent(|PHON z.,, ).\[sEg ,era 1/PHON(2) magic_constituent( /AGR ):-Ls~g \[S,BJ \[7\]\]magic_constituent( |PEON ),\[SEMI PHON constituent( AGR )' .SEM(3) magic_append (\[~1,\[~\],\[~\]) :-magic_constituent(/PEON ),tszgPEONconstituent( I AGR ),I.SZgPHONconstituent( \]AGR )"Figure 6: Magic rules resulting from applyingmagic compilation to definite clause 1 in figure 3semi-naive bottom-up interpreter.
7 In this inter-preter both the table and the agenda are repre-sented using lists, s The agenda keeps track of thefacts that have not yet been used to update thetable.
It is important o notice that in order touse the interpreter for typed feature grammars ithas to be adapted to perform graph unification.
9We refrain from making the necessary adaptionsto the code for expository reasons.The table is initialized with the facts from thegrammar.
Facts are combined using a operationcalled match.
The match operation unifies all butone of the right-hand side literals of a definiteclause in the grammar with facts in the table.
The7Definite clauses serving as data are en-coded using the predicate definite_clause/l:definite_clause((Lhs :-B/Is))., where Khs is a(possibly empty) list of literals.SThere are various other--more fficient--ways toimplement a dynamic ontrol strategy in Prolog.
See,for example, (Shieber et el., 1995).9A term encoding of typed feature structures wouldenable the use of term unification instead.
See, forexample, (Gerdemann, 1995).remaining right-hand side literal is unified with anewly derived fact, i. e., a fact from the agenda.By doing this, repeated erivation of facts fromthe same earlier derived facts is avoided.semi_naive_interpret (Goal):-initialization(Agenda,TableO),updat e_t able (Agenda, Table0, Table),member (edge (Goal, \[\] ) ,Table) .update_table ( \[\] ,Table ,Table).update_table(\[EdgelAgenda0\],Table0,Table):-update_table_w_edge(Edge,Edges,TableO,Tablel),append(Edges,Agenda0,Agenda),update_table(Agenda,Tablel,Table).update_tableJ_edge(Edge,Edges,Table0,Table):-findall( NewEdge,matah(Edge,NewEdge,Table0),Edges),store(Edges,Table0,Table).store(\[\],Table,Table):-store(\[EdgelEdges\],TableO,Table):-member(GenEdge,Table0),\+ subsumes(GemEdge,Edge),store(Edges,\[EdgelTable0\] ,Table).store(\[_lEdges\],TableO,Table):-store(Edges,Table0,Table).initialization(Edges,Edges):-findall( edge(Head, \[\] ),definite_clause((Head:- \[\])),Edges).completion(Edge,edge(Goal,\[\]),Table):-definite_clause((Goal :- Body)),Edge = edge(F,\[\]),select(F,Body,R),edges(R,Table).edges(\[\],_).edges(\[Lit\[Lits\],Table):-member(edge(Lit,\[\]),Table),edges(Lits,Table).Figure 7: Semi-naive bottom-up interpreter3 Selective Magic HPSG ParsingIn case of large grammars the huge space require-ments of dynamic processing often nullify the ben-efit of tabling intermediate r sults.
By combin-ing control strategies and allowing the user tospecify how to process particular constraints inthe grammar the selective magic parser avoidsthis problem.
This solution is based on the ob-servation that there are sub-computations thatare relatively cheap and as a result do not needtabling (Johnson and D6rre, 1995; van Noord,1997).3.1 Parse Type  Specif icationCombining control strategies depends on a wayto differentiate between types of constraints.
For168Proceedings of EACL '99example, the ALE parser (Carpenter and Penn,1994) presupposes a phrase structure backbonewhich can be used to determine whether a con-straint is to be interpreted bottom-up or top-down.
In the case of selective magic parsing weuse so-called parse types which allow the user tospecify how constraints in the grammar are to beinterpreted.
A literal (goal) is considered a parselype literal (goal) if it has as its single argumenta typed feature structure of a type specified as aparse type.
1?All types in the type hierarchy can be usedas parse types.
This way parse type specifica-tion supports a flexible filtering component whichallows us to experiment with the role of filter-ing.
However, in the remainder we will concen-trate on a specific class of parse types: We as-sume the specification of type sign and its sub-types as parse types.
11 This choice is based onthe observation that the constraints on type signand its sub-types play an important guiding rolein the parsing process and are best interpretedbottom-up given the lexical orientation of I-IPSG.The parsing process corresponding tosuch a parsetype specification is represented schematically infigure 8.
Starting from the lexical entries, i. e.,word word wordFigure 8: Schematic representation ofthe selectivemagic parsing processthe :r~'L definite clauses that specify the wordobjects in the grammar, phrases are built bottom-up by matching the parse type literals of the def-inite clauses in the grammar against he edges inthe table.
The non-parse type literals are pro-cessed according to the top-down control strategy1?The notion of a parse type literal is closely relatedto that of a memo literal as in (Johnson and DSrre,1995).l~When a type is specified as a parse type, all itssub-types are considered as parse types as well.
This isnecessary as otherwise there may e.xist magic variantsof definite clauses defining a parse type goal for whichno magic facts can be derived which means that themagic literal of these clauses can be interpreted nei-ther top-down nor bottom-up.described in section 3.3.3.2 Select ive Magic  Compi la t ionIn order to process parse type goals according to asemi-naive magic control strategy, we apply magiccompilation selectively.
Only the T~-L definiteclauses in a typed feature grammar which defineparse type goals are subject to magic compilation.The compilation applied to these clauses is iden-tical to the magic compilation illustrated in sec-tion 2.1 except hat we derive magic rules only forthe right-hand side literals in a clause which are ofa parse type.
The definite clauses in the grammardefining non-parse type goals are not compiled asthey will be processed using the top-down inter-preter described in the next section.3.3 Advanced Top-down ControlNon-parse type goals are interpreted using thestandard interpreter of the ConTroll grammar de-velopment system (G5tz and Meurers, 1997b) asdeveloped and implemented by Thilo GStz.
Thisadvanced top-down interpreter uses a search func-tion that allows the user to specify the informationon which the definite clauses in the grammar areindexed.
An important advantage of deep multi-ple indexing is that the linguist does not have totake into account of processing criteria with re-spect to the organization of her/his data as is thecase with a standard Prolog search function whichindexes on the functor of the first argument.Another important feature of the top-down in-terpreter is its use of a selection function thatinterprets deterministic goals, i. e., goals whichunify with the left-hand side literal of exactlyone definite clause in the grammar, prior to non-deterministic goals.
This is often referred to asincorporating delerministic closure (DSrre, 1993).Deterministic losure accomplishes a reduction ofthe number of choice points that need to be setduring processing to a minimum.
Furthermore, itleads to earlier failure detection.Finally, the used top-down interpreter imple-ments a powerful coroutining mechanism: 12 Atrun time the processing of a goal is postponedin case it is insufficiently instantiated.
Whetheror not a goal is sufficiently instantiated is deter-mined on the basis of so-called delay palierns.
13These are specifications provided by the user that12Coroutining appears under many different guises,like for example, suspension, residuation, (goal) freez-ing, and blocking.
See also (Colmerauer, 1982; Naish,1986).13In the literature delay patterns are sometimes alsoreferred to as wait declarations or .block statements.169Proceedings ofEACL '99indicate which restricting information has to beavailable before a goal is processed.3.4 Adapted Semi-naive Bottom-upInterpretat ionThe definite clauses resulting from selective magictransformation are interpreted using a semi-naivebottom-up interpreter that is adapted in two re-spects.
It ensures that non-parse type goals areinterpreted using the advanced top-down inter-preter, and it allows non-parse type goals thatremain delayed locally to be passed in and outof sub-computations i  a similar fashion as pro-posed by (Johnson and DSrre, 1995).
In orderto accommodate these changes the adapted semi-naive interpreter enables the use of edges whichspecify delayed goals.Figure 9 illustrates the adapted match op-eration.
The first defining clause of match/3match(Edge,edge(Goal,Delayed),Table):-definite_clause((Goal :- Body)),select(Lit,Body,Lits),parse_type(Lit),Edge = edge(Lit,DelayedO),edges(Lit,Table,DelayedO,TopDown),advancechtd_interpret(TopDown,Delayed).match(Edge,edge(Goal,Delayed),Table):-definite~lause((Goal :- TopDown)),advanced_td_interpret(TopDown,Delayed).Figure 9: Adapted efinition of mat, oh/3passes delayed and non-parse type goals of thedefinite clause under consideration to the ad-vanced top-down interpreter via the call toadvanced_td_interpret/2 as the list of goalsTopDown.
14 The second efining clause of match/3is added to ensure all right-hand side literals aredirectly passed to the advanced top-down inter-preter if none of them are of a parse type.Allowing edges which specify delayed goalsnecessitates the adaption of the definition ofedges/3.
When a parse type literal is matchedagainst an edge in the table, the delayed goalsspecified by that edge need to be passed to thetop-down interpreter.
Consider the definition ofthe predicate dges in figure 11.
The third argu-ment of the definition of edges/4 is used to collectdelayed goals.
When there are no more parse typeliterals in the right-hand side of the definite clauseunder consideration, the second defining clauseof edges/4 appends the collected delayed goalsZ4The definition of match/3 assumes that there ex-ists a strict ordering of the right-hand side literals inthe definite clauses in the grammar, i. e., parse typeliterals always preced enon-parse type literals.edges(\[Lit\[Lits\],Table,Delayed0,TopDown):-parse_type(Lit),member(edge(Lit,Delayedl),Table),append(Delayed0,Delayedl,Delayed).edges(Lit,Table,Delayed,TopDown).edges(\[\],_,Delayed,TopDown):-append(Delayed,Lit,TopDown).Figure lh  Adapted efinition of edges/4to the remaining non-parse type literals.
Subse-quently, the resulting list of literals is passed upagain for advanced top-down interpretation.4 Imp lementat ionThe described parser was implemented aspart ofthe ConTroll grammar development system (GStzand Meurers, 1997b).
Figure 10 shows the over-all setup of the ConTroll magic component.
TheControll magic component presupposes a parsetype specification and a set of delay patterns todetermine when non-parse type constraints are tobe interpreted.
At run-time the goal-directednessof the selective magic parser is further increasedby means of using the phonology of the naturallanguage xpression to be parsed as specified bythe initial goal to restrict he number of facts thatare added to the table during initialization.
Onlythose facts in the grammar corresponding to lex-ical entries that have a value for their phonologyfeature that appears as part of the input stringare used to initialize the table.The ConTroll magic omponent was tested witha larger (> 5000 lines) HPSG grammar of a size-able fragment of German.
This grammar providesan analysis for simple and complex verb-second,verb-first and verb-last sentences with scramblingin the mittelfeld, extraposition phenomena, wh-movement and topicalization, integrated verb-firstparentheticals, and an interface to an illocutiontheory, as well as the three kinds of infinitive con-structions, nominal phrases, and adverbials (Hin-richs et al, 1997).As the test grammar combines sub-strings in anon-concatenative fashion, a preprocessor is usedthat chunks the input string into linearization do-mains.
This way the standard ConTroll inter-preter (as described in section 3.3) achieves pars-ing times of around 1-5 seconds for 5 word sen-tences and 10-60 seconds for 12 word sentences) sThe use of magic compilation on all grammarconstraints, i.e., tabling of all sub-computations,lSParsing with such a grammar is difficult in anysystem as it does neither have nor allow the extractionof a phrase structure backbone.170Proceedings of EACL '99i nput :I magic compilation Ion p~rse  typec laosespreselection Iof re levantlex ica l  entriesextended se~-na?vebot tom-up ~nterpreta~ionof parse type c lausescombined with advancedtop-doom interpreta=ionFigure 10: Setup of the ConTroll magic omponentleads to an vast increase of parsing times.
Theselective magic HPSG parser, however, exhibits asignificant speedup in many cases.
For example,parsing with the module of the grammar imple-menting the analysis of nominal phrases is up tonine times faster.
At the same time though se-lective magic HPSG parsing is sometimes signifi-cantly slower.
For example, parsing of particularsentences exhibiting adverbial subordinate clausesand long extraction is sometimes more than ninetimes slower.
We conjecture that these ambigu-ous results are due to the use of coroutining: Asthe test grammar was implemented using the stan-dard ConTroll interpreter, the delay patterns usedpresuppose a data-flow corresponding to advancedtop-down control and are not fine-tuned with re-spect to the data-flow corresponding to the selec-tive magic parser.Coroutining is a flexible and powerful facilityused in many grammar development systems andit will probably remain indispensable in dealingwith many control problems despite its variousdisadvantages) 6 The test results discussed aboveindicate that the comparison of parsing strategiescan be seriously hampered by fine-tuning parsingusing delay patterns.
We believe therefore thatfurther research into the systematics underlyingcoroutining would be desirable.5 Conc lud ing  RemarksWe described a selective magic parser for typedfeature grammars implementing HPSG that com-bines the advantages of dynamic bottom-up andadvanced top-down control.
As a result the parseravoids the efficiency problems resulting from thehuge space requirements of storing intermediateresults in parsing with large grammars.
Theparser allows the user to apply magic compilationto specific constraints in a grammar which as a16Coroutining has a significant run-time overheadcaused by the necessity to check the instantiation sta-tus of a literal/goal.
In addition, it demands the pro-cedural annotation of an otherwise declarative gram-mar.
Finally, coroutining presupposes that a grammarwriter possesses substantial processing expertise.171Proceedings of EACL '99result can be processed ynamically in a bottom-up and goal-directed fashion.
State of the arttop-down processing techniques are used to dealwith the remaining constraints.
We discussed var-ious aspects concerning the implementation f theparser which was developed as part of the gram-mar development system ConTroll.AcknowledgmentsThe author gratefully acknowledges the supportof the SFB 340 project B4 "From Constraints toRules: Efficient Compilation of ttPSG" funded bythe German Science Foundation and the project"PSET: Practical Simplification of English Text",a three-year project funded by the UK Engi-neering and Physical Sciences Research Council(GR/L53175), and Apple Computer Inc..
The au-thor wishes to thank Dale Gerdemann and ErhardHinrichs and the anonymous reviewers for com-ments and discussion.
Of course, the author isresponsible for all remaining errors.ReferencesBob Carpenter and Gerald Penn.
1994.
ALE -The Attribute Logic Engine, User's guide, ver-sion 2.0.2.
Technical report, Carnegie MellonUniversity, Pittsburgh, Pennsylvania, USA.Bob Carpenter.
1992.
The Logic of Typed Fea-ture Structures - With Applications to Unifica-tion Grammars, Logic Programs and ConstraintResolution.
Cambridge University Press, NewYork, USA.Alain Colmerauer.
1982.
PrologII: Manuel der@f~rence t module th@orique.
Technical re-port, Groupe d'Intelligence Artificielle, Facult~de Sciences de Luminy, Marseille, France.Jochen DSrre.
1993.
Generalizing Earley Deduc-tion for Constraint-based Grammars.
In JochenDSrre and Michael Dorna (eds.
), 1993.
Compu-tational Aspects of Constraint-Based LinguisticDescription L DYANA-2, Deliverable R1.2.A.Dale Gerdemann.
1995.
Term Encoding ofTyped Feature Structures.
In Proceedings ofthe Fourth International Workshop on ParsingTechnologies, Prague, Czech Republic.Thilo GStz and Detmar Meurers.
1997a.
In-terleaving Universal Principles and RelationalConstraints over Typed Feature Logic.
InA CL/EACL Proceedings, Madrid, Spain.Thilo GStz and Detmar Meurers.
1997b.
TheConTroll System as Large Grammar Develop-ment Platform.
In Proceedings of the ACLWorkshop on Computational Environments forGrammar Development and Linguistic Engi-neering, Madrid, Spain.Thilo GStz.
1994.
A Normal Form for TypedFeature Structures.
Technical report SFB 340nr.
40, University of Tfibingen, Germany.Thilo GStz.
1995.
Compiling HPSG ConstraintGrammars into Logic Programs.
In Proceedingsof the Workshop on Computational Logic forNatural Language Processing, Edinburgh, UK.Erhard Hinrichs, Detmar Meurers, Frank Richter,Manfred Sailer, and Heike Winhart.
1997.
EinHPSG-fragment des Deutschen, Tell 1: Theo-rie.
Technical report SFB 340 95, University ofTiibingen, Germany.Markus HShfeld and Gert Smolka.
1988.
DefiniteRelations over Constraint Languages.
TechnicalReport 53, IBM, Germany.Mark Johnson and Jochen DSrre.
1995.
Memo-ization of Coroutined Constraints.
In A CL Pro-ceedings, Cambridge, Massachusetts, USA.Paul King.
1994.
Typed Feature Structures asDescriptions.
In Proceedings of of the 15th Con-ference on Computational Linguistics, Kyoto,Japan.Detmar Meurers and Guido Minnen.
1997.
AComputational Treatment of Lexical Rules inHPSG as Covariation in Lexical Entries.
Com-putational Linguistics, 23(4).Guido Minnen.
1996.
Magic for Filter Optimiza-tion in Dynamic Bottom-up Processing.
In ACLProceedings, Santa Cruz, California, USA.Guido Minnen.
1998.
Off-line Compilation for Ef-ficient Processing with Constraint-logic Gram-mars.
Ph.D. thesis, University of Tfibingen,Germany.
Technical report SFB 340 nr.
130.Lee Naish.
1986.
Negation and Control in Prolog.Springer-Verlag, Berlin, Germany.Ulf Nilsson and Jan Matuszynski.
1995.
Logic,Programming and Prolog.
John Wiley  Sons,Chichester, UK, 2nd edition.Carl Pollard and Ivan Sag.
1994.
Head-DrivenPhrase Structure Grammar.
University ofChicago Press, Chicago, Illinois, USA.Raghu Ramakrishnan, Divesh Srivastava, andS.
Sudarshan.
1992.
Efficient Bottom-upEvaluation of Logic Programs.
In Joos Van-dewalle (ed.
), 1992.
The State of the Art inComputer Systems and Software Engineering.Kluwer Academic Publishers.Stuart Shieber, Yves Schabes, and FernandoPereira.
1995.
Principles and Implementationof Deductive Parsing.
Journal of Logic Pro-gramming, 24(1-2).Gertjan van Noord.
1997.
An Efficient Imple-mentation of the Head-corner Parser.
Compu-tational Linguistics, 23(3).172
