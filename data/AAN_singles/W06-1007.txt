Proceedings of the Workshop on Multilingual Language Resources and Interoperability, pages 50?59,Sydney, July 2006. c?2006 Association for Computational LinguisticsStructural properties of Lexical Systems:Monolingual and Multilingual PerspectivesAlain Polgu?reOLST?D?partement de linguistique et de traductionUniversit?
de Montr?alC.P.
6128, succ.
Centre-ville, Montr?al  (Qu?bec)  H3C 3J7  Canadaalain.polguere@umontreal.caAbstractWe introduce a new type of lexical struc-ture calledlexical system, an interopera-ble model that can feed both monolingualand multilingual language resources.
Webegin with a formal characterization oflexical systems as ?pure?
directed graphs,solely made up of nodes corresponding tolexical entities and links.
To illustrate ourapproach, we present data borrowed froma lexical system that has been generatedfrom the French DiCo database.
We laterexplain how the compilation of the origi-nal dictionary-like database into a net-likeone has been made possible.
Finally, wediscuss the potential of the proposed lexi-cal structure for designing multilinguallexical resources.1 IntroductionThe aim of this paper is to introduce, justify andexemplify a new type of structure for lexicalresources calledlexical systems.
Although lexicalsystems are basically monolingual entities, webelieve they are particularly well-suited for theimplementation of interlingual connections.Our demonstration of the value of lexical sys-tems is centered around an experiment of lexicalsystem generation that was performed using datatables extracted from the DiCo database ofFrench paradigmatic and syntagmatic lexicallinks.
This experiment has allowed us to producea lexical system that is a richer structure than theoriginal database it has been derived from.In section 2, we characterize two main familiesof lexical databases presently available: dictio-nary-likevs.net-like lexical databases; we thenproceed with describing the specific structure oflexical systems.
Section 3 illustrates the function-ing of lexical systems with data borrowed fromthe French DiCo database; this will show that lex-ical systems?that are basically net-like?areinteroperable structures in respect to the informa-tion they can easily encode and the wide range ofapplications for which they can function as lexi-cal resources.
Section 4 describes how the gener-ation of a lexical system from the French DiCodatabase has been implemented.
Finally, insection 5, we address the problem of using lexicalsystems for feeding multilingual databases.2 Structure of lexical systemsLexical systems as formal models of natural lan-guage lexica are very much related to the ?-Net?generation of lexical databases, whose most well-known representatives are undoubtedly WordNet(Fellbaum, 1998) and FrameNet (Bakeret al,2003).
However, lexical systems possess somevery specific characteristics that clearly distin-guish them from other lexicographic structures.We will first characterize the two main currentapproaches to the structuring of lexical modelsand then present lexical systems relative to them.2.1 Dictionary- vs. net-like lexical databasesDictionary-like databases as textsThe most straightforward way of building lexicaldatabases is to use standard dictionaries (i.e.books) and turn them into electronic entities.
It isthe approach taken by most publishing compa-nies (e.g.
American Heritage (2000)), with vari-ous degrees of sophistication.
Resulting products50can be termeddictionary-like databases.
Theyare mainly characterized by two features.?
They are made up of word (word sense)descriptions, calleddictionaryentries.?
Dictionary entries can be seen as ?texts,?in the most general sense.Consequently, dictionary-like databases arebefore all huge texts, consisting of a collection ofmuch smaller texts (i.e.
entries).It seems natural to consider electronic versionsof standard dictionaries as texts.
However, formallexical databases such as the multilingual XML-based JMDict (Breen, 2004) are also textual innature.
There are collections of entries, eachentry consisting of a structured text that ?tells ussomething?
about a word.
Even databases encod-ing relational models of the lexicon can be 100%textual, and therefore dictionary-like.
Such is thecase of the French DiCo database (Polgu?re,2000), that we have used for compiling our lexi-cal system.
As we will see later, the original DiCodatabase is nothing but a collection of lexico-graphic records, each record being subdividedinto fields that are basically small texts.
Althoughthe DiCo is built within the framework of Explan-atory Combinatorial Lexicology (Mel?
?uket al,1995) and concentrates on the description of lexi-cal links, it is clearly not designed as a ?-Net?database, in the sense of WordNet or FrameNet.Net-like databases as graphsMost lexical models, even standard dictionaries,are relational in nature.
For instance, all dictio-naries define words in terms of other words, usepointers such as ?Synonym?
and ?Antonym.
?However, their structure does not reflect theirrelational nature.
The situation is totally differentwith true net-like databases.
They can be charac-terized as follows.?
They are graphs?huge sets of connectedentities?rather than collections of smalltexts (entries).?
They are not necessarily centered aroundwords, or word senses.
They use as nodesa potentially heterogeneous set of lexicalor, more generally, linguistic entities.Net-like databases are, for many, the most suit-able knowledge structures for modeling lexica.Nevertheless, databases such as WordNet poseone major problem: they are inherently structuredaccording to a couple of hierarchizing and/orclassifying principles.
WordNet, for instance, issemantically-oriented and imposes a hierarchicalorganization of lexical entities based, first of all,on two specific semantic relations: synonymy?through the grouping of lexical meanings withinsynsets?and hypernymy.
Additionally, the partof speech classification of lexical units creates astrict partition of the database: WordNet is madeup of four separate synset hierarchies (for nouns,verbs, adjectives and adverbs).
We do not believelexical models should be designed following afew rigid principles that impose a hierarchizationor classification of data.
Such structuring is ofcourse extremely useful, even necessary, butshould be projected ?on demand?
onto lexicalmodels.
Furthermore, there should not be a pre-defined, finite set of potential structuring princi-ples; data structures should welcome any of them,and this is precisely one of the main characteris-tics of lexical systems, that will be presentedshortly (section 2.2).Textsvs.graphs: pros and consIt is essential to stress the fact that any dictionary-like database can be turned into a net-like data-base and vice versa.
Of course, dictionary-likedatabases that rely on relational models are morecompatible with graph encoding.
However, thereare always relational data in dictionaries, andsuch data can be extracted and ?reformatted?
inthe form of nodes and connecting links.The important issue is therefore not one ofexclusive choice between the two types of struc-tures; it concerns what each structure is better at.In our opinion, the specialization of each type ofstructure is as follows.Dictionary-like structures are tools for editing(writing) and consulting lexical information.
Lin-guistic intuition of lexicographers or users of lex-ical models performs best on texts.
Bothlexicographers and users need to be able to seethe whole picture about words, and need the entryformat at a certain stage?although other ways ofdisplaying lexical information, such as tables, areextremely useful too!1Net-like structures are tools for implementingdynamic aspects of lexica: wading through lexi-cal knowledge, adding to it, revising it or infer-1It is no coincidence if WordNet so-calledlexicographerfilesgive a textual perspective on lexical items that is quitedictionary-like.
The unit of description is the synset, how-ever, and not the lexical unit.
(See WordNet on-linedocumentation on lexicographer files.
)51ring information from it.
Consequently, net-likedatabases are believed by some (and we share thisopinion) to have some form of cognitive validity.They are compatible with observations made, forinstance, in Aitchison (2003) on the networknature of the mental lexicon.
Last but not least,net-like databases can more easily integrate otherlexical structures or be integrated by them.In conclusion, although both forms of struc-tures are compatible at a certain level and havetheir own advantages in specific contexts of use,we are particularly interested by the fact that net-like databases are more prone to live an ?organiclife?
in terms of evolution (addition, subtraction,replacement) and interaction with other datastructures (connection with models of other lan-guages, with grammars, etc.
).2.2 Lexical systems: a new type of net-likelexical databasesAs mentioned above, most net-like lexical data-bases seem to focus on the description of just afew properties of natural language lexica (quasi-synonymy, hypernymic organization of wordsenses, predicative structures and their syntacticexpression, etc.).
Consequently, developers ofthese databases often have to gradually ?stretch?their models in order to add the description ofnew types of phenomena, that were not of pri-mary concern at the onset.
It is legitimate toexpect that such graft of new components willleave scars on the initial design of lexical models.The lexical structures we propose, lexical sys-tems (hereafterLS), do not pose this type of prob-lem for two reasons.First, they are not oriented towards the model-ing of just a few specific lexical phenomena, butoriginate from a global vision of the lexicon ascentral component of linguistic knowledge.Second, they have a very simple, flat organiza-tion, that does not impose any hierarchical orclassifying structure on the lexicon.
Let usexplain how it works.The design of any given LS has to follow fourbasic principles, that cannot be tampered with:LSs are 1) pure directed graphs, 2) non-hierarchi-cal, 3) heterogeneous and 4) equipped for model-ing fuzziness of lexical knowledge.
We willbriefly examine each of these principles.Pure directed graph.An LS is a directed graph,and just that.
This means that, from a formalpoint of view, it isuniquelymade up of nodesand oriented links connecting these nodes.Non hierarchical.An LS is a non-hierarchicalstructure, although it can contain sets of nodesthat are hierarchically connected.
For instance,we will see later that the DiCo LS contains nodesthat correspond to a hierarchically organized setof semantic labels.
The hierarchy of DiCo seman-tic labels can be used to project a structured per-spective on the LS; but the LS itself is by nomeans organized according to one or more spe-cific hierarchies.Heterogeneous.An LS is a potentially heteroge-neous collection of nodes.
Three main families ofnodes can be found:?
genuine lexical entities such as lexemes,idioms, wordforms, etc.;?
quasi-lexical entities, such as colloca-tions, lexical functions,2free expressionsworth storing in the lexicon (e.g.?canned?
linguistic examples), etc.;?
lexico-grammatical entities, such as syn-tactic patterns of expression of semanticactants, grammatical features, etc.Prototypical LS nodes are first of all lexicalentities, but we have to expect LSs to contain asnodes entities that do not strictly belong to thelexicon: they can belong to the interface betweenthe lexicon and the grammar of the language.Such is the case of subcategorization frames,calledgovernment patternsin Explanatory Com-binatorial Lexicology.
As rules specifying pat-terns of syntactic structures, they belong to thegrammar of the language.
However, as preassem-bled constructs on which lexemes ?sit?
in sen-tences, they are clearly closer to the lexical realmof the language than rules for building passivesentences or handling agreements, for instance.With fuzziness.Each component of an LS,whether node or link, carries a trust value, i.e.
ameasure of its validity.
Clearly, there are manyways of attributing and handling trust values inorder to implement fuzziness in knowledge struc-tures.
For instance, in our experiments with theDiCo LS, we have adopted a simplistic approach,that was satisfactory for our present needs butshould become more elaborate as we proceedwith developing and using LSs.
In our presentimplementation, we make use of only three possi-ble trust values: ?1?
means that as far as we cantell?i.e.
trusting what is explicitly asserted in theDiCo?the information is correct; ?0.5?
means2On collocations and lexical functions, see section 3 below.52that the corresponding information is the result ofan inference made from the input data and wasnot explicitly asserted by lexicographers; ?0?means that the information ought to be incor-rect?for instance, in case we identified a boguslexical pointer in data imported from the DiCo.Fuzziness encoding is an essential feature ofLSs, as structures on which inference can takeplace or as structures that are, at least partially,inferred from others (in case of generation of LSsfrom existing lexical databases).
Of course, anytrust value is not absolute.
?1?
does not mean theinformation is valid no matter what, and ?0?
thatit is necessarily false.
Information in LSs, and therating of this information, is no more absolutethan any information that may be stored in some-one?s mental lexicon.
However, if we want tocompute on LSs?
content, it is essential to be ableto distinguish between data we have all reasons tobelieve to be true and data we have all reasons tobelieve to be false.
As a matter of fact, this featureof LSs has helped us in two ways while compil-ing the DiCo LS: (i) we were able to infer newdescriptions from data contained in the originalDiCo while keeping track of the inferred natureof this new information (that ought to be vali-dated); (ii) we kept record of incoherences foundin the DiCo by attributing a trust value of0to thecorresponding elements in the LS.It is now high time to give concrete examplesof LS data.
But before we proceed, let us empha-size the fact that no other formal devices thanthose that have just been introduced are allowedin LSs.
Anything else we may want to add mustbe relevant to other components of the linguisticmodel, to the grammar for instance.
Notice, how-ever, that we do not exclude the need to add ameasure of the relative ?weight?
of nodes andlinks.
This measure, different from the trustvalue, would reflect the degree of activation ofeach LS element.
For instance, the DiCo entry forD?FAITE?defeat?
lists quite a few support verbsthat take this noun as complement, among whichCONNA?TRE?to know?
andSUBIR?to suffer.
?Weight values could indicate that the former verbis much less commonly used than the second inthis context.
Another advantage of weight is thatit could help optimize navigation through the LSgraph, when several paths can be taken.3 Examples borrowed from the DiCo LSThe DiCo is a French lexical database thatfocuses on the modeling of paradigmatic and syn-tagmatic lexical links controlled by lexical units.Paradigmatic links correspond to so-calledsemantic derivations(synonymy, antonymy,nominalization, verbalization, names for actantsor typical circonstants, etc.).
Syntagmatic linkscorresponds to collocations controlled by lexicalunits (intensifiers, support verbs, etc.).
These lex-ical properties are encoded by means of a systemof metalexical entities known aslexical functions.
(For a presentation of the system of lexical func-tions, see Mel?
?uk (1996) and Kahane andPolgu?re (2001).)
Although it does not containactual definitions, the DiCo partially describesthe semantic content of each lexical unit with twoformal tools: (i) a semantic label, that corre-sponds to the genus (core component) of the lexi-cal unit?s definition and (ii) a ?propositionalformula,?
which states the predicative nature ofthe unit (non-predicative meaning or predicatewith one, two or more arguments).
Each entryalso gives the government pattern (roughly, thesubcategorization frame) of the unit and lists idi-oms (phrasal lexical units) that contain the unitunder description.
Finally, each entry contains aset of examples retrieved from corpora or theInternet.
As one can see, the DiCo covers a fairlylarge range of lexical properties; for more infor-mation on the DiCo, one can refer to Polgu?re(2000) and Lareau (2002).Presently, the DiCo is developed as a File-Maker?database.
Each DiCo entry correspondsto a record in the database, and the core of eachrecord is the field that contains lexical functionlinks controlled by theheadword(i.e.
the lexicalunit described in the entry).
Data in (1) below isone item in the lexical function field of the DiCorecord for Fr.RANCUNE(?resentment?
):(1)/*[X] ?prouver ~*/{Oper12} avoir, ?prouver, nourrir,ressentir[ART ~ Pr?p-envers N=Y]We isolate five different types of LS entities inthe above example:?
The expression between curly bracketsOper12is the name of a lexical functiondenoting a type of support verbs.3?
{Oper12}as a whole denotesOper12(RANCUNE), the application of3More precisely,Oper12denotes support verbs that takethe 1stactant of the headword as subject, the headword itselfas 1stcomplement and the 2ndactant of the headword as 2ndcomplement; for instance:Xfeels/hasresentment for Y.53theOper12lexical function to its argu-ment (the headword of the entry).?
The preceding formula?between thetwo /*?
*/ symbols?is a gloss forOper12(RANCUNE).
This metalinguisticencoding of the content of the lexicalfunction application is for the benefit ofusers who do not master the system oflexical functions.?
Following the name of the lexical func-tion is the list of values of the lexicalfunction application, each of which is aspecific lexical entity.
In this case, theyare all collocates of the headword, due tothe syntagmatic nature of Oper12.?
Finally, the expression between squarebrackets is the description of the syntac-tic structure controlled by the collocates.It corresponds to a special case of lexico-grammatical entities mentioned earlier insection 2.2.
These entities have not beenprocessed yet in our LS and they will beignored in the discussion below.Data in (1) corresponds to a very small sub-graph in the generated LS, which is visualized inFigure 1 below.
Notice that graphical representa-tions we used here have been automatically gen-erated in GraphML format from the LS and thendisplayed with the yEd graph editor/viewer.Figure 1.
LS interpretation of (1)This graph shows how DiCo data given in (1)have been modeled in terms of lexical entities andlinks.
We see that lexical function applicationsare lexical entities: something to be communi-cated, that is pointing to actual means of express-ing it.
The argument (arglink) of the lexicalfunction application, the lexical unitRANCUNE, isof course also a lexical entity (although of a dif-ferent nature).
The same holds for the values(valuelinks).
None of these values, however,has been diagnosed as possessing a correspond-ing entry in the DiCo.
Consequently, the compila-tion process has given them the (temporary)status of simple wordforms, with a trust value of0.5, visualized here by boxes with hashed bor-ders.
(Continuous lines for links or boxes indicatea trust value of1.)
Ultimately, it will be the taskof lexicographers to add to the DiCo entries forthe corresponding senses ofAVOIR,?PROUVER,NOURRIRandRESSENTIR.One may be surprised to see lexical functions(such as Oper1) appear as lexical entities in ourLS, because of their very ?abstract?
nature.
Twofacts justify this approach.
First, lexical units tooare rather abstract entities.
While wordformshorseandhorsescould be considered as more?concrete,?
their grouping under a labelHORSElexical unitis not a trivial abstraction.
Second,lexical functions are not only descriptive tools inExplanatory Combinatorial Lexicology.
They arealso conceptualized as generalization of lexicalunits that play an important role text production,in general rules of paraphrase for instance.This first illustration demonstrates how the LSversion of the DiCo reflects its true relationalnature, contrary to its original dictionary-like for-mat as a FileMaker database.
It also shows howvaried lexical entities can be and how trust valuescan help keep track of the distinction betweenwhat has been explicitly stated by lexicographersand what can be inferred from what they stated.The next illustration will build on the first oneand show how so-callednon-standard lexicalfunctionsare integrated into the LS.
Until now,we have been referring only to standard lexicalfunctions, i.e.
lexical functions that belong to thesmall universal core of lexical relations identifiedin Explanatory Combinatorial Lexicology (or,more generally, in Meaning-Text theory).
How-ever, all paradigmatic and syntagmatic links arenot necessarily standard.
Here is an illustration,borrowed from the DiCo entry forCHAT?cat?.
(2){Ce qu?on ditpour appeler ~} ?
Minet !
?,?
Minou !
?,?
Petit !
?Here, a totally non-standard lexical functionCe qu?on dit pour appeler ~?Whatone says to call ~[= a cat]?
has been used to con-nect the headwordCHATto expressions such asMinou !
?Kitty kitty!?
As one can see, no glosshas been introduced, because non-standard lexi-cal functions are already explicit, non-formalencoding of lexical relations.
The LS interpreta-tion of (2) is therefore a simpler structure than the54one used in our previous illustration, as shown inFigure 2.Figure 2.
LS interpretation of (2)Our last illustration will show how it is possi-ble to project a hierarchical structuring on theDiCo LS when,and only when, it is needed.The hierarchy of semantic labels used tosemantically characterize lexical units in theDiCo has been compiled into the DiCo LStogether with the lexical database proper.
Eachsemantic label is connected to its more genericlabel or labels (as this hierarchy allows for multi-ple inheritance) with an is_alink.
Additionally,it is connected to the lexical units it labels bylabel links.
It is thus possible to simply pull thehierarchy of semantic labels out of the LS and itwill ?fish out?
all lexical units of the LS, hierar-chically organized through hypernymy.
Noticethat this is different from extracting from theDiCo all lexical units that possess a specificsemantic label: we extract all units whosesemantic label belongs to a given subhierarchyin the system of semantic labels.
Figure 3 belowis the graphical result of pulling the acces-soire (?accessory?)
subhierarchy.To avoid using labels on links, we have pro-grammed the generation of this class ofGraphML structures with links encoded as fol-lows: is_a links (between semantic labels)appear as thick continuous arrows and labellinks (between semantic labels and lexical unitsthey label) as thin dotted arrows.Figure 3.
The accessoire (?accessory?)
semantic subhierarchy in the DiCo LSThe ?beauty?
of LSs?
structuring does not liein the fact that it allows us to automatically gen-erate fancy graphical representations.
Such repre-sentations are just a convenient way to makeexplicit the internal structure of LSs.
What reallyinterests us is what can be done with LSs once weconsider them from a functional perspective.The main functional advantage of LSs lies inthe fact that these structures are both cannibal andprone to be cannibalized.
Let us explain the twofacets of this somehow gruesome metaphor.First, directed graphs are powerful structuresthat can encode virtually any kind of informationand are particularly suited for lexical knowledge.If one believes that a lexicon is before all a rela-tional entity, we can postulate that all informationpresent in any form of dictionary and databasecan eventually be compiled into LS structures.The experiment we did in compiling the DiCo(see details in section 4) demonstrates wellenough this property of LS structures.Second, because of their extreme simplicity,LS structures can conversely always be?digested?
by other, more specific types of struc-tures, such as XML versions of dictionary- or net-like databases.
For instance, we have regeneratedfrom our LS a DiCo in HTML format, withhyperlinks for entry cross-references and color-coding for trust values of linguistic information.Interestingly, this HTML by-product of the LS55contains entries that do not exist in the originalDiCo.
They are produced for each value of lexicalfunction applications that does not correspond toan entry in the DiCo.
The content of these entriesis made up of ?inverse?
lexical function relations:pointers to lexical function applications for whichthe lexical entity is a value.
These new entries canbe seen as rough drafts, that can be used by lexi-cographers to write new entries.
We will providemore details of this at the end of the next section.4 Compiling the DiCo (dictionary-like)database into a lexical systemThe DiCo is presently available both in File-Maker format and as SQL tables, accessiblethrough the DiCou?be interface.4 It is these tablesthat are used as input for the generation of LSs.5They present the advantage of being the result ofan extensive processing of the DiCo that splits itscontent into elementary pieces of lexicographicinformation (Steinlin et al, 2005).
It is thereforequite easy to analyze them further in order to per-form a restructuring in terms of LS modeling.The task of inferring new information, infor-mation that is not explicitly encoded in the DiCo,is the delicate part of the compilation process,due to the richness of the database.
Until now, wehave only implemented a small subset of all infer-ences that can be made.
For instance, we haveinferred individual lexemes from idioms thatappear inside DiCo records (COUP DE SOLEIL?sunburn?
entails the probable existence of thethree lexemes COUP, DE and SOLEIL).
We havealso distinguished lexical entities that are actuallexical units from their signifiers (linguisticforms).
Signifiers, which do not have to be asso-ciated with one specific meaning, play an impor-tant role when it comes to wading through an LS(for instance, when we want to separate wordaccess through form and through meaning).We cannot give here all details of the compila-tion process.
Suffice it to say that, at the presentstage, some important information contained inthe DiCo is not processed yet.
For instance, wehave not implemented the compilation of govern-ment patterns and lexicographic examples.
Onthe other hand, all lexical function applicationsand the semantic labeling of lexical units areproperly handled.
Recall that we import togetherwith the DiCo a hierarchy of semantic labels usedby the DiCo lexicographers, which allows us toestablish hypernymic links between lexical units,as shown in Figure 3 above.6 Codewise, the DiCoLS is just a flat Prolog database with clauses foronly two predicates:entity( <Numerical ID>, <Name>,<Type>, <Trust> )link( <Numerical ID>, <Source ID>,<Target ID>, <Type>, <Trust> )Here are some statistics on the content of theDiCo LS at the time of writing.Nodes : 37,808780 semantic labels; 1,301 vocables (= entries in the ?LSwordlist?
); 1,690 lexical units (= senses of vocables);6,464 wordforms; 2,268 non lexicalized expressions;7,389 monolexical signifiers; 948 multilexical signifiers;3,443 lexical functions; 9,417 lexical function applica-tions; 4,108 glosses of lexical function applicationsLinks : 61,714871 ?is_a,?
between semantic labels; 775 ?sem_label,?between sem.
labels and lexical units; 1,690 ?sense,?between vocables and lexical units corresponding to spe-cific senses; 2,991 ?basic_form,?
between mono- or mul-tilexical signifiers and vocables or lexical units; 6,464?signifier,?
between wordforms and monolexical signifi-ers; 4,135 ?used_in,?
between monolexical signifiers andmultiliexical signifiers; 9,417 ?lf,?
between lexical func-tions and their application; 6,064 ?gloss,?
between lex.func.
appl.
and their gloss; 9,417 ?arg,?
between lex.func.
appl.
and their argument; 19,890 ?value,?
betweenlex.
func.
appl.
and each of the value elements they returnLet us make a few comments on these numbersin order to illustrate how the generation of the LSfrom the original DiCo database works.The FileMaker (or SQL) DiCo database thathas been used contained only 775 lexical unitrecords (word senses).
This is reflected in statis-tics by the number of sem_label links betweensemantic labels and lexical units: only lexicalunits that were headwords of DiCo records pos-sess a semantic labeling.
Statistics above showthat the LS contains 1,690 lexical units.
So wheredo the 915 (1,690 ?
775) extra units come from?They all have been extrapolated from the so-called phraseology (ph) field of DiCo records,where lexicographers list idioms that are formallybuilt from the record headword.
For instance, theDiCo record for BARBE ?beard?
contained (amongothers) a pointer to the idiom BARBE ?
PAPA ?cot-ton candy.?
This idiom did not possess its ownrecord in the original DiCo and has been ?reified?4 http://www.olst.umontreal.ca/dicouebe.5 The code for compiling the DiCo into an LS, generatingGraphML exports and generating an HTML version of theDiCo has been written in SWI-Prolog.6 The hierarchy of semantic labels is developed with theProt?g?
ontology editor.
We use XML exports from Prot?g?to inject this hierarchy inside the LS.
This is another illustra-tion of the cannibalistic (and not too choosy) nature of LSs.56while generating the LS, among 914 other idi-oms.The ?wordlist?
of our LS is therefore muchmore developed than the wordlist of the DiCo it isderived from.
This is particularly true if weinclude in it the 6,464 wordform entities.
Asexplained earlier, it is possible to regenerate fromthe LS lexical descriptions for any lexical entitythat is either a lexical unit or a wordform targetedby a lexical function application, filling word-form descriptions with inverse lexical functionlinks.
To test this, we have regenerated an entireDiCo in HTML format from the LS, with a totalof 8,154 (1,690 + 6,464) lexical entries, stored asindividual HTML pages.
Pages for original DiCoheadwords contain the hypertext specification ofthe original lexical function links, together withall inverse lexical links that have been found inthe LS; pages for wordforms contain only inverselinks.
For instance, the page for METTRE ?to put?
(which is not a headword in the original DiCo)contains 71 inverse links, such as:7CausOper1( ?
L?ARRI?RE-PLAN# ) ->Labor12( ACCUSATION#I.2 ) ->Caus1[1]Labreal1( ANCRE# ) ->Labor21( ANGOISSE# ) ->Labreal12( ARMOIRE# ) ->Of course, most of the entries that were not inthe original DiCo are fairly poor and will requiresignificant editing to be turned into bona fideDiCo descriptions.
They are, however, a usefulpoint of departure for lexicographers; addition-ally, the richer the DiCo will become, the moreproductive the LS will be in terms of automaticgeneration of draft descriptions.5 Lexical systems and multilingualityThe approach to multilingual implementation oflexical resources that LSs allow is compatiblewith strategies used in known multilingual data-bases, such as Papillon (S?rasset and Mangeot-Lerebours, 2001): it sees multilingual resourcesas connections of basically monolingual models.In this final section, we first argue for a monolin-gual perspective on the problem of multilingual-ity.
We then make proposals for implementinginterlingual connections by means of LSs.5.1 Theoretical and methodological pri-macy of monolingual structuresWe see two logical reasons why the issue ofdesigning multilingual lexical databases shouldbe tackled from a monolingual perspective.First, all natural languages can perfectly wellbe conceived of in complete isolation.
In fact,monolingual speakers are no less ?true?
speakersof a language than multilingual speakers.Second, acquisition of multiple languagescommonly takes place in situations where secondlanguages are acquired as additions to an alreadymastered first language.
Multiplicity in linguisticcompetence is naturally implemented by graft ofa language on top of a preexisting linguisticknowledge.
How multiple lexica are acquired andstored is a much debated issue (Schreuder andWeltens, 1993), which is outside the scope of ourresearch.
However, it is now commonly acceptedthat even children who are bilingual ?from birth?develop two linguistic systems, each of whichbeing quite similar in essence to linguistic sys-tems of monolingual speakers (de Houwer,1990).
The main issue is thus one of systems?connectivity.From a theoretical and practical point of view,it is thus perfectly legitimate to see the problemof structuring multilingual resources as one of,first, finding the most adequate and interoperablestructuring for monolingual resources.
This beingsaid, we do not believe that the issue of structur-ing monolingual databases has already been dealtwith once and for all in a satisfactory manner.
Wehope the concept of LS we introduce here willstimulate reflection on that topic.5.2 Multilingual connections between LSsA multilingual lexical resource based on the LSarchitecture should be made up of several fullyautonomous LSs, i.e., LSs that are not speciallytailored for multilingual connections.
Theyshould function as independent modules that canbe connected while preserving their integrity.Connections between LSs should be imple-mented as specialized interlingual links betweenequivalent lexical entities.
There is one exceptionhowever: standard lexical functions (A1, Magn,AntiMagn, Oper1, etc.).
Because they are uni-versal lexical entities, they should be stored in aspecialized interlingual module; as universals,they play a central role in interlingual connectiv-ity (Fontenelle, 1997).
However, these are only?pure?
lexical functions.
Lexical function appli-7 We underline hypertext links.
Lexical function applica-tions listed here correspond French collocations that mean,respectively, to put in the background, to indict someone (lit-erally in French ?to put someone in accusation?
), to anchor avessel (literally in French ?to put a vessel at the anchor?
), toput someone in anguish, to keep something in a cupboard.57cations, such as Oper12(RANCUNE) above, areby no means universals and have to be connectedto their counterpart in other languages.
Let usexamine briefly this aspect of the question.One has to distinguish at least two main casesof interlingual lexical connections in LSs: directlexical connections and connections through lexi-cal function applications.Direct connections, such as Fr.
RANCUNE vs.Eng.
RESENTMENT should be implemented?manually or using existing bilingual resources?as simple interlingual (i.e.
intermodule) linksbetween two lexical entities.
Things are notalways that simple though, due to the existence ofpartial or multiple interlingual connections.
Forinstance, what interlingual link should originatefrom Eng.
SIBLING if we want to point to aFrench counterpart?
As there is no lexicalizedFrench equivalent, we may be tempted to includein the French LS entities such as fr?re ou s?ur(?brother or sister?).
We have two strong objec-tions to this.
First, this complex entity will not bea proper translation in most contexts: one cannottranslate He killed all his siblings by Il a tu?
tousses fr?res ou s?urs?the conjunction et ?and?
isrequired in this specific context, as well as inmany others.
Second, and this is more problem-atic, this approach would force us to enter in theFrench LS entities for translation purposes,which would transgress the original monolingualintegrity of the system.8 We must admit that wedo not have a ready-to-use solution to this prob-lem, specially if we insist on ruling out the intro-duction of ad hoc periphrastic translations aslexical entities in target LSs.
It may very well bethe case that a cluster of interrelated LSs cannotbe completely connected for translation purposeswithout the addition of ?buffer?
LSs that ensurefull interlingual connectivity.
For instance, thebuffer French LS for English to French LS con-nection could contain phrasal lexical entities suchas fr?res et s?urs (?siblings?
), ?tre de m?mesparents and ?tre fr?re(s) et s?ur(s) (?to be sib-lings?).
This strategy can actually be very produc-tive and can lead us to realize that what appearedfirst as an ad hoc solution may be fully justifiedfrom a linguistic perspective.
Dealing with thesibling case, for instance, forced us to realizedthat while fr?re(s) et s?ur(s) sounds very normalin French, s?ur(s) et fr?re(s) will seem odd or, atleast, intentionally built that way.
This is a verystrong argument for considering that a lexicalentity (we do not say lexical unit!)
fr?re(s) ets?ur(s) does exist in French, independently fromthe translation problem that sibling poses to us.This phrasal entity should probably be present inany complete French LS.The case of connections through lexical func-tion applications is even trickier.
A simplisticapproach would be to consider that it is sufficientto connect interlinguistically lexical functionapplications to get al resulting lexical connec-tions for value elements.
For standard lexicalfunctions, this can be done automatically usingthe following strategy for two languages A and B.If the lexical entity LA is connected to LB by means of a?translation?
link,all lexical entities linked to the lexical function applica-tion f(LA) by the ?value?
link should be connected by a?value translation?
link, with a trust value of ?0.5,?
to alllexical entities linked to f(LB) by a ?value?
link.The distinction between ?translation?
and?value translation?
links allow for contextualinterlingual connections: a lexical entity L?Bcould happen to be a proper translation of L?Aonly if it occurs as collocate in a specific colloca-tion.
But this is not enough.
It is also necessary tofilter ?value translation?
connections that are sys-tematically generated using the above strategy.For instance, each of the specific values given in(1) section 3 should be associated with its closestequivalent among values of Oper12(RESENT-MENT): HAVE, FEEL, HARBOR, NOURISH, etc.
Atthe present time, we do not see how this can beachieved automatically, unless we can make useof already available multilingual databases of col-locations.
For English and French, for instance,we plan to experiment in the near future withT.
Fontenelle?s database of English-French collo-cation pairs (Fontenelle, 1997).
These colloca-tions have been extracted from the Collins-Robertdictionary and manually indexed by means oflexical functions.
We are convinced it is possibleto use this database firstly to build a first versionof a new English LS and, secondly, to implementthe type fine-grained multilingual connectionsbetween lexical function values illustrated withour RANCUNE vs.
RESENTMENT example.We are well aware that we have probably sur-faced as many problems as we have offered solu-tions in this section.
However, the aboveconsiderations show at least two things:8 It is worth noticing that good English-French dictionaries,such as the Collins-Robert, offer several different transla-tions in this particular case.
Additionally, their translationsdo not apply to sibling as such, but rather to siblings or toexpressions such as someone?s siblings, to be siblings, etc.58?
LSs have the merit to make explicit thescale of the problem of interlingual lexi-cal correspondence, if one want to tacklethis problem in a fine-grained manner;9?
the implementation of multilingual con-nections over LSs should be approachedusing semi-automatic strategies.6 ConclusionsWe have achieved the production of a significantLS, which can be considered of broad coverage interms of the sheer number of entities and links itcontains and the richness of linguistic knowledgeit encodes.
We plan to finish the absorption of allinformation contained in the dictionary-like DiCo(including information that can be inferred).
Wealso want to integrate complementary Frenchdatabases into the LS (for instance the Morphaloudatabase,10 for morphological information) andstart to implement multilingual connections usingT.
Fontenelle?s collocation database.
Anotherdevelopment will be the construction of an editorto access and modify the content of our LS.
Thistool could also be used to develop DiCo-style LSsfor other languages than French.AcknowledgmentsThis research is supported by the Fonds qu?b?-cois de la recherche sur la Soci?t?
et la culture(FQRSC).
We are very grateful to Sylvain Kah-ane, Marie-Claude L?Homme, Igor Mel?
?uk,Oph?lie Tremblay and four MLRI 2006 anony-mous reviewers for their comments on a prelimi-nary version of this paper.
A very special thank toSylvain Kahane and Jacques Steinlin for theirinvaluable work on the DiCo SQL, that made ourown research possible.ReferencesAmerican Heritage.
2000.
The American HeritageDictionary of the English Language.
Fourth Edi-tion, CD-ROM, Houghton Mifflin, Boston, MA.Jean Aitchison.
2003.
Words in the Mind: An Introduc-tion to the Mental Lexicon, 3rd edition, Blackwell,Oxford, UK.Collin F. Baker, Charles J. Fillmore and Beau Cronin.2003.
The Structure of the Framenet Database.
Int.Journal of Lexicography, 16(3): 281-296.James W. Breen.
2004.
JMdict: a Japanese-Multilin-gual Dictionary.
Proceedings of COLING Multilin-gual Linguistic Resources Workshop, Geneva,Switzerland.Annick de Houwer.
1990.
The Acquisition of Two Lan-guages from Birth.
A Case Study, Cambridge Uni-versity Press, Cambridge, UK.Christiane Fellbaum.
1998.
WordNet: An ElectronicLexical Database, MIT Press, Cambridge, MA.Thierry Fontenelle.
1997.
Turning a bilingual dictio-nary into a lexical-semantic database, Niemeyer,T?bingen, Germany.Sylvain Kahane and Alain Polgu?re.
2001.
Formalfoundation of lexical functions.
Proceedings ofACL/EACL 2001 Workshop on Collocation, Tou-louse, France, 8-15.Fran?ois Lareau.
2002.
A Practical Guide for WritingDiCo Entries.
Third Papillon 2002 Seminar, Tokyo,Japan [http://www.papillon-dictionary.org/Consult-Informations.po?docid=1620757&docLang=eng].Igor Mel??uk.
1996.
Lexical Functions: A Tool for theDescription of Lexical Relations in the Lexicon.
InLeo Wanner (ed.
): Lexical Functions in Lexicogra-phy and Natural Language Processing, Amsterdam/Philadelphia: Benjamins, 37-102.Igor Mel?
?uk, Andr?
Clas and Alain Polgu?re.
1995.Introduction ?
la lexicologie explicative et combi-natoire, Duculot, Louvain-la-Neuve, Belgium.Igor Mel?
?uk and Leo Wanner.
2001.
Towards a Lexi-cographic Approach to Lexical Transfer in MachineTranslation (Illustrated by the German-RussianLanguage Pair).
Machine Translation, 16: 21-87.Alain Polgu?re.
2000.
Towards a theoretically-moti-vated general public dictionary of semantic deriva-tions and collocations for French.
Proceedings ofEURALEX?2000, Stuttgart, Germany, 517-527.Robert Schreuder and Bert Weltens (eds.).
1993.
TheBilingual lexicon, Amsterdam, Benjamins.Gilles S?rasset and Mathieu Mangeot-Lerebours.2001.
Papillon lexical database project: Monolin-gual dictionaries and interlingual links.
Proceed-ings of the 6th Natural Language Processing PacificRim Symposium, Tokyo, Japan, 119?125.Jacques Steinlin, Sylvain Kahane and Alain Polgu?re.2005.
Compiling a ?classical?
explanatory combi-natorial lexicographic description into a relationaldatabase.
Proceedings of the Second InternationalConference on the Meaning Text Theory, Moscow,Russia, 477-485.9 For a systematic analysis of interlingual lexical correspon-dences, see Mel?
?uk and Wanner (2001).10 http://actarus.atilf.fr/morphalou/59
