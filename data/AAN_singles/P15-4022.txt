Proceedings of ACL-IJCNLP 2015 System Demonstrations, pages 127?132,Beijing, China, July 26-31, 2015.c?2015 ACL and AFNLPA Domain-independent Rule-based Framework for Event ExtractionMarco A. Valenzuela-Esc?arcega Gus Hahn-Powell Thomas Hicks Mihai SurdeanuUniversity of Arizona, Tucson, AZ, USA{marcov,hahnpowell,msurdeanu,hickst}@email.arizona.eduAbstractWe describe the design, development, and APIof ODIN (Open Domain INformer), a domain-independent, rule-based event extraction (EE)framework.
The proposed EE approach is:simple (most events are captured with simplelexico-syntactic patterns), powerful (the lan-guage can capture complex constructs, suchas events taking other events as arguments,and regular expressions over syntactic graphs),robust (to recover from syntactic parsing er-rors, syntactic patterns can be freely mixedwith surface, token-based patterns), and fast(the runtime environment processes 110 sen-tences/second in a real-world domain with agrammar of over 200 rules).
We used thisframework to develop a grammar for the bio-chemical domain, which approached humanperformance.
Our EE framework is accom-panied by a web-based user interface for therapid development of event grammars and vi-sualization of matches.
The ODIN frameworkand the domain-specific grammars are avail-able as open-source code.1 IntroductionRule-based information extraction (IE) has long en-joyed wide adoption throughout industry, though it hasremained largely ignored in academia, in favor of ma-chine learning (ML) methods (Chiticariu et al., 2013).However, rule-based systems have several advantagesover pure ML systems, including: (a) the rules areinterpretable and thus suitable for rapid developmentand domain transfer; and (b) humans and machines cancontribute to the same model.
Why then have such sys-tems failed to hold the attention of the academic com-munity?
One argument raised by Chiticariu et al.
isthat, despite notable efforts (Appelt and Onyshkevych,1998; Levy and Andrew, 2006; Hunter et al., 2008;Cunningham et al., 2011; Chang and Manning, 2014),there is not a standard language for this task, or a ?stan-dard way to express rules?, which raises the entry costfor new rule-based systems.Here we aim to address this issue with a novel eventextraction (EE) language and framework called ODIN(Open Domain INformer).
We follow the simplicityprinciples promoted by other natural language process-ing toolkits, such as Stanford?s CoreNLP, which aim to?avoid over-design?, ?do one thing well?, and have auser ?up and running in ten minutes or less?
(Manninget al., 2014).
In particular, our approach is:Simple: Taking advantage of a syntactic dependency1representation (de Marneffe and Manning, 2008), ourEE language has a simple, declarative syntax (see Ex-amples 1 & 2) for n-ary events, which captures singleor multi-word event predicates (trigger) with lexi-cal and morphological constraints, and event arguments(e.g., theme) with (generally) simple syntactic patternsand semantic constraints.Powerful: Despite its simplicity, our EE frameworkcan capture complex constructs when necessary, suchas: (a) recursive events2, (b) complex regular expres-sions over syntactic patterns for event arguments.
In-spired by Stanford?s Semgrex3, we have extended astandard regular expression language to describe pat-terns over directed graphs4, e.g., we introduce new <and > operators to specify the direction of edge traver-sal in the dependency graph.
Finally, we allow for (c)optional arguments5and multiple arguments with thesame name.Robust: To recover from unavoidable syntactic errors,SD patterns (such as the ones in Examples 1 and 2)can be can be freely mixed with surface, token-basedpatterns, using a language inspired by the Allen Insti-1Hereafter abbreviated as SD.2Events that take other events as arguments (see Figure 1and the corresponding Example (2) for such an event in thebiochemical domain.
The Positive Regulation takesa Phosphorylation event as the Controlled argu-ment)3nlp.stanford.edu/software/tregex.shtml4Here we use syntactic dependencies.5cause in Example 1.127Figure 1: An example sentence containing a recursive event.tute of Artificial Intelligence?s Tagger6.
These patternsmatch against information extracted in our text process-ing pipeline7, namely a token?s part of speech, lem-matized form, named entity label, and the immediateincoming and outgoing edges in the SD graph.
Exam-ple 3 shows an equivalent rule to the one in Example 1using surface patterns (i.e.
a pattern that is independentof a token sequence?s underlying syntactic structure).Fast: Our EE runtime is fast because our rules useevent trigger phrases, captured with shallow lexico-morphological patterns, as starting points.
Only whenevent triggers are detected is the matching of morecomplex syntactic patterns for arguments attempted.This guarantees quick executions.
For example, inthe biochemical domain (discussed in Section 2), ourframework processes an average of 110 sentences/sec-ond8with a grammar of 211 rules on a laptop with ani7 CPU and 16GB of RAM.2 Building a Domain from ScratchWe next describe how to use the proposed frameworkto build an event extractor for the biochemical domain(Ohta et al., 2013) from scratch.Rule-based systems have been shown to perform atthe state-of-the-art for event extraction in the biologydomain (Peng et al., 2014; Bui et al., 2013).
The do-main, however, is not without its challenges.
For exam-ple, it is not uncommon for biochemical events to con-tain other events as arguments.
Consider the examplesentence in Figure 1.
The sentence contains two events,one event referring to the biochemical process knownas phosphorylation, and a recursive event describinga biochemical regulation that controls the mentionedphosphorylation.
We will introduce a minimal set ofrules that capture these two events.
Here, we will as-sume the simple entities (denoted in bold in Figure 1)have already been detected through a named entity rec-ognizer.9When a rule matches, the extracted token spansfor trigger and arguments, together with the corre-sponding event and argument labels (here the event6https://github.com/allenai/taggers7https://github.com/sistanlp/processors8after the initial text processing pipeline9Though the discussion focuses on event extraction, ourframework can also be applied to the task of entity recogni-tion.1 - name: Phosphorylation_12 priority: 23 label: [Phosphorylation, Event]4 pattern: |5 trigger = [lemma="phosphorylation"]6 theme:PhysicalEntity = prep_of7 (nn|conj|cc)*8 cause:PhysicalEntity?
= prep_by9 (nn|conj|cc)*Example 1: An example of a rule using syntacticstructure.
For the phosphorylation event, ourselected event trigger (LINE 5) is a nominalpredicate with the lemma phosphorylation.
Thistrigger serves as the starting point for the syntacticpatterns that extract event arguments.
Whensearching for a theme to the Phosphorylationevent, we begin at the specified trigger andlook for an incoming dependent that is the objectof the preposition of.
The pattern fragment(nn|conj and|cc)*targets entities that appear asmodifiers in noun phrases (e.g., .
.
.
of the cyclin-D1protein), or a series of arguments in a coordinatedphrase.
The entity mention associated with ourtheme must be a named entity with the labelPhysicalEntity (LINE 7), a hypernym of severalmore specialized types identified in an earlieriteration.
The cause argument is marked asoptional (denoted by the ?
symbol).label is Phosphorylation, and the argument labelsare theme & cause) are dispatched to a labelingaction.
By default, these actions simply create anEventMention Scala object with the correspondingevent label, and the extracted named arguments.
Exam-ple 5 summarizes the EventMention class.
Customactions may be defined as Scala code, and be attachedto specific rules.
For example, a custom action maytrigger coreference resolution when a rule matches acommon noun, e.g., the protein, instead of the expectednamed entity.The second rule, shown in Example 2, captures therecursive event in Figure 1.
Importantly, this rule takesother events as arguments, e.g., the controlled ar-gument must be an event mention, here generated bythe rule in Example 1.
To guarantee correct execution,the runtime repeatedly applies the given EE grammaron each sentence until no rule matches.
For example,here the rule in Example 2 would not match in the first1281 - name: Positive_regulation_12 label: [Positive_regulation, Event]3 priority: 34 pattern: |5 trigger =[lemma=/promot|induc|increas6 |stimul|lead|enhanc|up-regulat/7 & tag=/?V|RB/]8 controller:PhysicalEntity = nsubjnn*9 controlled:Event = dobj nn*Example 2: An example of a rule designed tocapture a recursive event.
The rule detects a relevantverbal or adverbial trigger and expects its argumentsto be in a SUBJECT ?
DIRECT OBJECT relationship.The controlled argument must be the mention ofanother event.1 - name: Phosphorylation_surface_12 priority: 23 type: token4 label: [Phosphorylation, Event]5 pattern: |6 (?<trigger>7 [lemma="phosphorylation"]) of []*?8 @theme:PhysicalEntity []*?9 (by @cause:PhysicalEntity)?Example 3: An alternative rule to Example 1that uses a surface pattern.
Surface patternsmatch event triggers and arguments over sequencesof tokens and other mentions (e.g., the themematches over an entire named entity of typePhysicalEntity).
Event triggers (trigger)match the whole sequence of tokens encompassedin parentheses.
Argument names preceded by the@ symbol, e.g., @theme, require the specification ofan event type (denoted by :type).
This pattern isshorthand for matching the span of an entire namedentity with the specified type.iteration because no event mentions have been createdyet, but would match in the second iteration.
This pro-cess can optionally be optimized with rule priorities(as shown in the figure).
For example, the prioritiesassigned to Examples 1 and 2 enforce that the secondrule is executed only in an iteration following the firstrule.
Utilizing rule priorities allows for a derivationalconstruction of complex events or complete grammarsfrom their components.Once the grammar has been defined, the entire sys-tem can be run in less than 10 lines of code, as shownin Example 4.
The output of this code is a collection ofevent mentions, i.e., instances of the EventMentionclass outlined in Example 5.3 VisualizationWe accompany the above EE system with an interactiveweb-based tool for event grammar development and re-1 class SimpleExample extends App {2 // read rules from file3 val rules = Source.fromFile(4 "rules.yml").mkString5 // make extractor engine6 val engine = new ExtractorEngine(rules)7 // create text processor for biomedical8 // domain: POS, NER, and syntax9 val processor = new BioNLPProcessor10 // make document from free text;11 // the document includes POS, NER, and12 // syntactic annotations13 val text = "TopBP1 promotes thephosphorylation of cyclin-D1 by ATR.
"14 val doc = processor.annotate(text)15 // run the actual EE grammar16 val mentions = engine.extractFrom(doc)17 }Example 4: The minimal Scala code requiredto run the system.
The input (LINE 13) is rawtext.
The output is a list of event mentions ofthe type EventMention.
Here we show theuse of a text processor specific to the biomedicaldomain.
The framework also includes an open-domain text processor that includes POS tagging,named entity recognition, syntactic parsing, andcoreference resolution.
Additional processors fordomain-specific tasks can easily be added.sults visualization.
Figure 2 shows the input fields forthe user interface.
The UI accepts free text to matchagainst, and can be configured to run either a predefineddomain grammar or one provided on-the-fly through atext box, allowing for the rapid development and tuningof rules.Figure 2: Our interactive environment for rapid de-velopment of event grammars.The UI supports theinput of rules and free text.Figure 3 shows the output of the visualization toolon the example sentence from Figure 1 using the gram-1291 class EventMention(2 /**The ontological labels associated with3*the event (specified in the rule)*/4 val label: Seq[String],5 /**The starting point of our pattern*/6 val trigger: TextBoundMention,7 /**A mapping of argument names to the8*Mentions that contain them*/9 val arguments: Map[String, Seq[Mention]],10 /**The name of the corresponding rule*/11 val foundBy: String12 /**The span of the Mention13*in the original document*/14 val tokenInterval: Interval)Example 5: Example 4 produces a set ofmentions.
Here we focus on mentions of events(EventMention).
This code block shows relevantfields in the EventMention class, which storeseach event mention detected and assembled bythe system.
The arguments field captures thefact that the mapping from names to arguments isone-to-many (e.g., there may be multiple themearguments).
Interval stores a token span in theinput text.
TextBoundMention stores a simplemention, minimally a label and a token span.mar discussed in the previous section.
The web inter-face is implemented as a client-server Grails10web ap-plication which runs the EE system on the server anddisplays the results on the client side.
The applica-tion?s client-side code displays both entity and eventmentions, as well as the output of the text preprocessor(to help with debugging) using Brat (Stenetorp et al.,2012).4 ResultsWe extended the grammar introduced previously tocapture 10 different biochemical events, with an av-erage of 11 rules per event type.
Using this grammarwe participated in a recent evaluation by DARPA?s BigMechanism program11, where systems had to performdeep reading of two research papers on cancer biology.Table 1 summarizes our results.Our system was ranked above the median, with re-spect to overall F1 score.
We find these results en-couraging for two reasons.
First, inter-annotator agree-ment on the task was below 60%, which indicates thatour system roughly approaches human performance,especially for precision.
Second, the lower recall ispartially explained by the fact that annotators markedalso indirect biological relations (e.g., A activates B),which do not correspond to actual biochemical reac-tions but, instead, summarize sequences of biochemi-cal reactions.
Our grammar currently recognizes onlydirect biochemical reactions.10https://grails.org11http://www.darpa.mil/Our_Work/I2O/Programs/Big_Mechanism.aspxSystem Precision Recall F1Submitted run 54% 29% 37.3%Ceiling system 82.1% 81.8% 82%Table 1: Results from the January 2015 DARPABig Mechanism Dry Run evaluation on readingbiomedical papers, against a known biochemicalmodel.
In addition to event extraction, this eval-uation required participants to identify if the ex-tracted information corroborates, contradicts, or ex-tends the given model.
Here, extending the modelmeans proposing a biochemical reaction that is notcontained in the model, but it involves at least a bio-chemical entity from the model.
The ceiling systemindicates idealized performance of the rule-basedframework, after a post-hoc analysis.More importantly, this evaluation offers a good plat-form to analyze the potential of the proposed rule-basedframework, by estimating the ceiling performance ofour EE system, when all addressable issues are fixed.We performed this analysis after the evaluation dead-line, and we manually:1.
Removed the keys that do not encode direct bio-chemical reactions.2.
Corrected three rules, to better model one eventand one entity type.3.
Fixed system bugs, including XML parsing errors,which caused some meta data to appear in text andbe misinterpreted as biological entities, and a syn-tax error in one rule, which caused several falsepositives.The results of this ceiling system are listed in the sec-ond row in Table 1.
This analysis highlights an encour-aging finding: the current rule framework is expressive:it can capture approximately 80% of the events in thiscomplex domain.
The remaining 20% require corefer-ence resolution and complex syntactic patterns, whichwere not correctly captured by the parser.5 Related WorkDespite the dominant focus on machine learning mod-els for IE in the literature, previous work includes sev-eral notable rule-based efforts.
For example, GATE(Cunningham et al., 2011), and the Common Pat-tern Specification Language (Appelt and Onyshkevych,1998) introduce a rule-based framework for IE, imple-mented as a cascade of grammars defined using surfacepatterns.
The ICE system offers an active-learning sys-tem that learns named entity and binary relation pat-terns built on top of syntactic dependencies (He andGrishman, 2011).
Stanford?s Semgrex12and Tregex(Levy and Andrew, 2006) model syntactic patterns,12http://nlp.stanford.edu/software/tregex.shtml130Figure 3: A Brat-based visualization of the event mentions created from the example sentence in Figure 1.Not shown but included in the visualization: a table with token information (lemmas, PoS tags, NE labels, andcharacter spans).while a separate tool from the same group, Token-sRegex (Chang and Manning, 2014), defines surfacepatterns over token sequences.
Chiticariu et al.
(2011)demonstrated that a rule-based NER system can matchor outperform results achieved with machine learningapproaches, but also showed that rule-writing is a la-bor intensive process even with a language specificallydesigned for the task.In addition to the above domain-independent frame-works, multiple previous works focused on rule-basedsystems built around specific domains.
For exam-ple, in bioinformatics, several dedicated rule-based sys-tems obtained state-of-the-art performance in the ex-traction of protein-protein interactions (PPI) (Hunteret al., 2008; Huang et al., 2004).Our work complements and extends the above ef-forts with a relatively simple EE platform that: (a)hybridizes syntactic dependency patterns with surfacepatterns, (b) offers support for the extraction of recur-sive events; (c) is coupled with a fast runtime environ-ment; and (d) is easily customizable to new domains.6 ConclusionWe have described a domain-independent, rule-basedevent extraction framework and rapid development en-vironment that is simple, fast, powerful, and robust.
Itis our hope that this framework reduces the entry costin the development of rule-based event extraction sys-tems.We demonstrated how to build a biomedical domainfrom scratch, including rule examples and simple Scalacode sufficient to run the domain grammar over freetext.
We recently extended this grammar to participatein the DARPA Big Mechanism evaluation, in which oursystem achieved an F1 of 37%.
By modeling the under-lying syntactic representation of events, our grammarfor this task used an average of only 11 rules per event;this indicates that the syntactic structures of events arelargely generalizable to a small set of predicate framesand that domain grammars can be constructed with rel-atively low effort.
Our post-hoc analysis demonstratedthat the system?s true ceiling is 82%.
This importantresult demonstrates that the proposed event extractionframework is expressive enough to capture most com-plex events annotated by domain experts.Finally, to improve the user experience by aiding inthe construction of event grammars, our framework isaccompanied by a web-based interface for testing rulesand visualizing matched events.This whole effort is available as open-source code at: https://github.com/sistanlp/processors.
See also: https://github.com/sistanlp/processors/wiki/ODIN-(Open-Domain-INformer), forODIN documentation.AcknowledgmentsThis work was funded by the DARPA Big Mechanismprogram under ARO contract W911NF-14-1-0395.131ReferencesAppelt, Douglas E and Boyan Onyshkevych.
1998.
The com-mon pattern specification language.
In Proc.
of the TIP-STER Workshop.
pages 23?30.Bui, Quoc-Chinh, Erik M Van Mulligen, David Campos, andJan A Kors.
2013.
A fast rule-based approach for biomed-ical event extraction.
Proc.
of ACL page 104.Chang, Angel X. and Christopher D. Manning.
2014.
To-kensRegex: Defining cascaded regular expressions overtokens.
Technical Report CSTR 2014-02, Computer Sci-ence, Stanford.Chiticariu, Laura, R. Krishnamurthy, Y. Li, F. R. Reiss, andS.
Vaithyanathan.
2011.
Domain adaptation of rule-basedannotators for named-entity recognition tasks.
In Proc.
ofEMNLP.Chiticariu, Laura, Yunyao Li, and Frederick R Reiss.
2013.Rule-based information extraction is dead!
long liverule-based information extraction systems!
In Proc.
ofEMNLP.Cunningham, Hamish, Diana Maynard, Kalina Bontcheva,Valentin Tablan, Niraj Aswani, Ian Roberts, GenevieveGorrell, Adam Funk, Angus Roberts, Danica Daml-janovic, Thomas Heitz, Mark A. Greenwood, HoracioSaggion, Johann Petrak, Yaoyong Li, and Wim Peters.2011.
Developing Language Processing Components withGATE (Version 6).
University of Sheffield.de Marneffe, Marie-Catherine and Christopher D. Manning.2008.
The Stanford typed dependencies representation.In Proc.
of COLING Workshop on Cross-framework andCross-domain Parser Evaluation.He, Yifan and Ralph Grishman.
2011.
Ice: Rapid informa-tion extraction customization for nlp novices.
In Proc.
ofNAACL.Huang, Minlie, Xiaoyan Zhu, Yu Hao, Donald G. Payan,Kunbin Qu, and Ming Li.
2004.
Discovering patterns toextract proteinprotein interactions from full texts.
Bioin-formatics 20(18):3604?3612.Hunter, Lawrence, Zhiyong Lu, James Firby, William ABaumgartner, Helen L Johnson, Philip V Ogren, andK Bretonnel Cohen.
2008.
Opendmap: an open source,ontology-driven concept analysis engine, with applicationsto capturing knowledge regarding protein transport, pro-tein interactions and cell-type-specific gene expression.BMC bioinformatics 9(1):78.Levy, Roger and Galen Andrew.
2006.
Tregex and Tsurgeon:tools for querying and manipulating tree data structures.
InProc.
of LREC.Manning, C. D., M. Surdeanu, J. Bauer, J. Finkel, S. J.Bethard, and D. McClosky.
2014.
The Stanford CoreNLPnatural language processing toolkit.
In Proc.
of ACL.Ohta, Tomoko, Sampo Pyysalo, Rafal Rak, Andrew Rowley,Hong-Woo Chun, Sung-Jae Jung, Sung-Pil Choi, SophiaAnaniadou, and Junichi Tsujii.
2013.
Overview of thepathway curation (pc) task of bionlp shared task 2013.
InProc.
of the BioNLP-ST Workshop.Peng, Yifan, Manabu Torii, Cathy H Wu, and K Vijay-Shanker.
2014.
A generalizable NLP framework for fastdevelopment of pattern-based biomedical relation extrac-tion systems.
BMC bioinformatics 15(1):285.Stenetorp, Pontus, Sampo Pyysalo, Goran Topi?c, TomokoOhta, Sophia Ananiadou, and Jun?ichi Tsujii.
2012.
Brat:a web-based tool for nlp-assisted text annotation.
In Proc.of the Demonstrations at EACL.132
