Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing, pages 91?100,Singapore, 6-7 August 2009. c?2009 ACL and AFNLPEfficient kernels for sentence pair classificationFabio Massimo ZanzottoDISPUniversity of Rome ?Tor Vergata?Via del Politecnico 100133 Roma, Italyzanzotto@info.uniroma2.itLorenzo Dell?ArcipreteUniversity of Rome ?Tor Vergata?Via del Politecnico 100133 Roma, Italylorenzo.dellarciprete@gmail.comAbstractIn this paper, we propose a novel classof graphs, the tripartite directed acyclicgraphs (tDAGs), to model first-order rulefeature spaces for sentence pair classifi-cation.
We introduce a novel algorithmfor computing the similarity in first-orderrewrite rule feature spaces.
Our algorithmis extremely efficient and, as it computesthe similarity of instances that can be rep-resented in explicit feature spaces, it is avalid kernel function.1 IntroductionNatural language processing models are generallypositive combinations between linguistic modelsand automatically learnt classifiers.
As trees areextremely important in many linguistic theories, alarge amount of works exploiting machine learn-ing algorithms for NLP tasks has been developedfor this class of data structures (Collins and Duffy,2002; Moschitti, 2004).
These works propose ef-ficient algorithms for determining the similarityamong two trees in tree fragment feature spaces.Yet, some NLP tasks such as textual entail-ment recognition (Dagan and Glickman, 2004;Dagan et al, 2006) and some linguistic theoriessuch as HPSG (Pollard and Sag, 1994) requiremore general graphs and, then, more general al-gorithms for computing similarity among graphs.Unfortunately, algorithms for computing similar-ity among two general graphs in term of com-mon subgraphs are still exponential (Ramon andGa?rtner, 2003).
In these cases, approximated al-gorithms have been proposed.
For example, theone proposed in (Ga?rtner, 2003) counts the num-ber of subpaths in common.
The same happens forthe one proposed in (Suzuki et al, 2003) that isapplicable to a particular class of graphs, i.e.
thehierarchical directed acyclic graphs.
These algo-rithms do not compute the number of subgraphsin common between two graphs.
Then, these al-gorithms approximate the feature spaces we needin these NLP tasks.
For computing similarities inthese feature spaces, we have to investigate if wecan define a particular class of graphs for the classof tasks we want to solve.
Once we focused theclass of graph, we can explore efficient similarityalgorithms.A very important class of graphs can be de-fined for tasks involving sentence pairs.
In thesecases, an important class of feature spaces is theone that represents first-order rewrite rules.
Forexample, in textual entailment recognition (Da-gan et al, 2006), we need to determine whethera text T implies a hypothesis H , e.g., whether ornot ?Farmers feed cows animal extracts?
entails?Cows eat animal extracts?
(T1,H1).
If we wantto learn textual entailment classifiers, we needto exploit first-order rules hidden in training in-stances.
To positively exploit the training instance?Pediatricians suggest women to feed newbornsbreast milk?
entails ?Pediatricians suggest thatnewborns eat breast milk?
(T2,H2) for classify-ing the above example, learning algorithms shouldlearn that the two instances hide the first-order rule?
= feedY Z?YeatZ .
The first-orderrule feature space, introduced by (Zanzotto andMoschitti, 2006), gives high performances in termof accuracy for textual entailment recognition withrespect to other features spaces.In this paper, we propose a novel class ofgraphs, the tripartite directed acyclic graphs(tDAGs), that model first-order rule feature spacesand, using this class of graphs, we introduce anovel algorithm for computing the similarity infirst-order rewrite rule feature spaces.
The possi-bility of explicitly representing the first-order fea-ture space as subgraphs of tDAGs makes the de-rived similarity function a valid kernel.
With re-spect to the algorithm proposed in (Moschitti andZanzotto, 2007), our algorithm is more efficient91and it is a valid kernel function.The paper is organized as follows.
In Sec.
2,we firstly describe tripartite directed acyclicgraphs (tDAGs) to model first-order feature (FOR)spaces.
In Sec.
3, we then present the relatedwork.
In Sec.
4, we introduce the similarity func-tion for these FOR spaces.
This can be used as ker-nel function in kernel-based machines (e.g., sup-port vector machines (Cortes and Vapnik, 1995)).We then introduce our efficient algorithm for com-puting the similarity among tDAGs.
In Sec.
5,we analyze the computational efficiency of ouralgorithm showing that it is extremely more ef-ficient than the algorithm proposed in (Moschittiand Zanzotto, 2007).
Finally, in Sec.
6, we drawconclusions and plan the future work.2 Representing first-order rules andsentence pairs as tripartite directedacyclic graphsAs first step, we want to define the tripartite di-rected acyclic graphs (tDAGs).
This is an ex-tremely important class of graphs for the first-order rule feature spaces we want to model.
Wewant here to intuitively show that, if we modelfirst-order rules and sentence pairs as tDAGs, de-termining whether or not a sentence pair can beunified with a first-order rewrite rule is a graphmatching problem.
This intuitive idea helps indetermining our efficient algorithm for exploitingfirst-order rules in learning examples.To illustrate the above idea we will use an ex-ample based on the above rule ?= feedY Z ?YeatZ and the above sentence pair (T1,H1).The rule ?
encodes the entailment relation of theverb to feed and the verb to eat.
If representedover a syntactic interpretation, the rule has the fol-lowing aspect:?1=VPVBfeedNP Y NP Z ?SNP Y VPVBeatNP ZAs in the case of feature structures (Carpenter,1992), we can observe this rule as a graph.
Aswe are not interested in the variable names but weneed to know the relation between the right handside and the left hand side of the rule, we cansubstitute each variable with an unlabelled node.We then connect tree nodes having variables withVPVBfeedNP NP ?
?SNP VPVBeatNPFigure 1: A simple rewrite rule seen as a graphSNPDTTheNNfarmerVPVBfeedNPNNScowsNPNNanimalNNSextracts??
?SNPNNSCowsVPVBeatNPNNanimalNNSextractsFigure 2: A sample pair seen as a graphthe corresponding unlabelled node.
The result is agraph as the one in Fig.
1.
The variables Y and Zare represented by the unlabelled nodes betweenthe trees.In the same way we can represent the sentencepair (T1,H1) using graph with explicit links be-tween related words and nodes (see Fig.
2).
Wecan link words using anchoring methods as in(Raina et al, 2005).
These links can then be prop-agated in the syntactic tree using semantic headsof the constituents (Pollard and Sag, 1994).
Therule ?1matches over the pair (T1,H1) if the graph?1is among the subgraphs of the graph in Fig.
2.Both rules and sentence pairs are graphs of thesame type.
These graphs are basically two treesconnected through an intermediate set of nodesrepresenting variables in the rules and relations be-tween nodes in the sentence pairs.
We will here-after call these graphs tripartite directed acyclicgraphs (tDAGs).
The formal definition follows.Definition tDAG: A tripartite directed acyclicgraph is a graph G = (N,E) where?
the set of nodes N is partitioned in three setsNt, Ng, and A?
the set of edges is partitioned in four sets Et,Eg, EAt, and EAgsuch that t = (Nt, Et) and g = (Ng, Eg) are twotrees and EAt= {(x, y)|x ?
Ntand y ?
A} andEAg= {(x, y)|x ?
Ngand y ?
A} are the edgesconnecting the two trees.A tDAG is a partially labeled graph.
The label-ing function L only applies to the subsets of nodesrelated to the two trees, i.e., L : Nt?
Ng?
L.Nodes in the set A are not labeled.92The explicit representation of the tDAG in Fig.
2has been useful to show that the unification of arule and a sentence pair is a graph matching prob-lem.
Yet, it is complex to follow.
We will then de-scribe a tDAG with an alternative and more con-venient representation.
A tDAG G = (N,E)can be seen as pair G = (?, ?)
of extended trees?
and ?
where ?
= (Nt?
A,Et?
EAt) and?
= (Ng?
A,Eg?
EAg).
These are extendedtrees as each tree contains the relations with theother tree.As for the feature structures, we will graphicallyrepresent a (x, y) ?
EAtand a (z, y) ?
EAgasboxes y respectively on the node x and on thenode z.
These nodes will then appear as L(x) yand L(z) y , e.g., NP 1 .
The name y is not a labelbut a placeholder representing an unlabelled node.This representation is used for rules and for sen-tence pairs.
The sentence pair in Fig.
2 is thenrepresented as reported in Fig.
3.3 Related workAutomatically learning classifiers for sentencepairs is extremely important for applications liketextual entailment recognition, question answer-ing, and machine translation.In textual entailment recognition, it is not hardto see graphs similar to tripartite directed acyclicgraphs as ways of extracting features from exam-ples to feed automatic classifiers.
Yet, these graphsare generally not tripartite in the sense describedin the previous section and they are not used to ex-tract features representing first-order rewrite rules.In (Raina et al, 2005; Haghighi et al, 2005; Hicklet al, 2006), two connected graphs representingthe two sentences s1and s2are used to computedistance features, i.e., features representing thedistance between s1and s2.
The underlying ideais that lexical, syntactic, and semantic similaritiesbetween sentences in a pair are relevant featuresto classify sentence pairs in classes such as entailand not-entail.In (de Marneffe et al, 2006), first-order rewriterule feature spaces have been explored.
Yet, thesespaces are extremely small.
Only some featuresrepresenting first-order rules have been explored.Pairs of graphs are used here to determine if a fea-ture is active or not, i.e., the rule fires or not.
Alarger feature space of rewrite rules has been im-plicitly explored in (Wang and Neumann, 2007)but this work considers only ground rewrite rules.In (Zanzotto and Moschitti, 2006), tripartite di-rected acyclic graphs are implicitly introduced andexploited to build first-order rule feature spaces.Yet, both in (Zanzotto and Moschitti, 2006) andin (Moschitti and Zanzotto, 2007), the model pro-posed has two major limitations: it can representrules with less than 7 variables and the proposedkernel is not a completely valid kernel as it usesthe max function.In machine translation, some methods such as(Eisner, 2003) learn graph based rewrite rules forgenerative purposes.
Yet, the method presented in(Eisner, 2003) can model first-order rewrite rulesonly with a very small amount of variables, i.e.,two or three variables.4 An efficient algorithm for computingthe first-order rule space kernelIn this section, we present our idea for an effi-cient algorithm for exploiting first-order rule fea-ture spaces.
In Sec.
4.1, we firstly define the simi-larity function, i.e., the kernel K(G1, G2), that weneed to determine for correctly using first-orderrules feature spaces.
This kernel is strongly basedon the isomorphism between graphs.
A relevantidea of this paper is the observation that we candefine an efficient way to detect the isomorphismbetween the tDAGs (Sec.
4.2).
This algorithm ex-ploits the efficient algorithms of tree isomorphismas the one implicitly used in (Collins and Duffy,2002).
After describing the isomorphism betweentDAGs, We can present the idea of our efficient al-gorithm for computing K(G1, G2) (Sec.
4.3).
Weintroduce the algorithms to make it a viable solu-tion (Sec.
4.4).
Finally, in Sec.
4.5, we report thekernel computation we compare against presentedby (Zanzotto and Moschitti, 2006; Moschitti andZanzotto, 2007).4.1 Kernel functions over first-order rulefeature spacesThe first-order rule feature space we want to modelis huge.
If we use kernel-based machine learningmodels such as SVM (Cortes and Vapnik, 1995),we can implicitly define the space by defining itssimilarity functions, i.e., its kernel functions.
Wefirstly introduce the first-order rule feature spaceand we then define the prototypical kernel functionover this space.The first-order rule feature space (FOR) is ingeneral the space of all the possible first-order93P1= ?SNPNNSFarmersVPVBfeedNP 1NNS 1cowsNP 3NN 2animalNNS 3extracts,SNP 1NNS 1CowsVPVBeatNP 3NN 2animalNNS 3extracts?P2= ?S 2NP 1NNS 1PediatriciansVP 2VB 2suggestSNPNNSwomenVPTOtoVPVBfeedNP 3NNS 3newbornsNP 4NN 5breastNN 4milk,S 2NP 1NNS 1PediatriciansVP 2VB 2suggestSBARINthatSNP 3NNS 3newbornsVPVBeatNP 4NN 5breastNN 4milk?Figure 3: Two tripartite DAGsrules defined as tDAGs.
Within this space it is pos-sible to define the function S(G) that determinesall the possible active features of the tDAG G inFOR.
The function S(G) determines all the pos-sible and meaningful subgraphs of G. We wantthat these subgraphs represent first-order rules thatcan be matched with the pair G. Then, meaningfulsubgraphs of G = (?, ?)
are graphs as (t, g) wheret and g are subtrees of ?
and ?.
For example, thesubgraphs of P1and P2in Fig.
3 are hereafter par-tially represented:S(P1) = { ?SNP VP,SNP 1 VP?
, ?NP 1NNS 1,NP 1NNS 1?
,?SNP VPVBfeedNP 1 NP 3,SNP 1 VPVBeatNP 3?
,?VPVBfeedNP 1 NP 3 ,SNP 1 VPVBeatNP 3?
, ... }andS(P2) = { ?S 2NP 1 VP 2,S 2NP 1 VP 2?
, ?NP 1NNS 1,NP 1NNS 1?
,?VPVBfeedNP 3 NP 4 ,SNP 3 VPVBeatNP 4?
, ... }In the FOR space, the kernel function K shouldthen compute the number of subgraphs in com-mon.
The trivial way to describe the former kernelfunction is using the intersection operator, i.e., thekernel K(G1, G2) is the following:K(G1, G2) = |S(G1) ?
S(G2)| (1)This is very simple to write and it is in principlecorrect.
A graph g in the intersection S(G1) ?S(G2) is a graph that belongs to both S(G1) andS(G2).
Yet, this hides a very important fact: de-termining whether two graphs, g1and g2, are thesame graph g1= g2is not trivial.
For example,it is not sufficient to superficially compare graphsto determine that ?1belongs both to S1and S2.We need to use the correct property for g1= g2,i.e., the isomorphism between two graphs.
We cancall the operator Iso(g1, g2).
When two graphsverify the property Iso(g1, g2), both g1and g2can be taken as the graph g representing the twographs.
Detecting Iso(g1, g2) has an exponentialcomplexity (Ko?bler et al, 1993).This complexity of the intersection operator be-tween sets of graphs deserves a different way torepresent the operation.
We will use the same sym-bol but we will use the prefix notation.
The opera-tor is hereafter re-defined:?
(S(G1),S(G2)) == {g1|g1?
S(G1),?g2?
S(G2), Iso(g1, g2)}4.2 Isomorphism between tDAGsAs isomorphism between graphs is an essential ac-tivity for learning from structured data, we herereview its definition and we adapt it to tDAGs.94We then observe that isomorphism between twotDAGs can be divided in two sub-problems:?
finding the isomorphism between two pairsof extended trees?
checking whether the partial isomorphismfound between the two pairs of extended treesare compatible.In general, two tDAGs, G1= (N1, E1) andG2= (N2, E2) are isomorphic (or match) if|N1| = |N2|, |E1| = |E2|, and a bijective func-tion f : N1?
N2exists such that these propertieshold:?
for each node n ?
N1, L(f(n)) = L(n)?
for each edge (n1, n2) ?
E1an edge(f(n1), f(n2)) is in E2The bijective function f is a member of the combi-natorial setF of all the possible bijective functionsbetween the two sets N1and N2.The trivial algorithm for detecting if two graphsare isomorphic is exponential (Ko?bler et al,1993).
It explores all the set F .
It is still unde-termined if the general graph isomorphism prob-lem is NP-complete.
Yet, we can use the fact thattDAGs are two extended trees for building a bet-ter algorithm.
There is an efficient algorithm forcomputing isomorphism between trees (as the oneimplicitly used in (Collins and Duffy, 2002)).Given two tDAGs G1= (?1, ?1) and G2=(?2, ?2) the isomorphism problem can be dividedin detecting two properties:1.
Partial isomorphism.
Two tDAGs G1and G2are partially isomorphic, if ?1and ?2are iso-morphic and if ?1and ?2are isomorphic.
Thepartial isomorphism produces two bijectivefunctions f?and f?.2.
Constraint compatibility.
Two bijective func-tions f?and f?are compatible on the sets ofnodes A1and A2, if for each n ?
A1, it hap-pens that f?
(n) = f?
(n).We can rephrase the second property, i.e., theconstraint compatibility, as follows.
We de-fine two constraints c(?1, ?2) and c(?1, ?2) rep-resenting the functions f?and f?on the setsA1and A2.
The two constraints are defined asc(?1, ?2) = {(n, f?
(n))|n ?
A1} and c(?1, ?2) ={(n, f?
(n))|n ?
A1}.
Two partially isomorphictDAGs are isomorphic if the constraints match,i.e., c(?1, ?2) = c(?1, ?2).Pa= (?a, ?a) = ?A 1B 1B 1 B 2C 1C 1 C 2,I 1M 1M 2 M 1N 1N 2 N 1?Pb= (?b, ?b) = ?A 1B 1B 1 B 2C 1C 1 C 3,I 1M 1M 3 M 1N 1N 2 N 1?Figure 5: Simple non-linguistic tDAGsFor example, the third pair of S(P1) and thesecond pair of S(P2) are isomorphic as: (1) theseare partially isomorphic, i.e., the right hand sides?
and the left hand sides ?
are isomorphic; (2)both pairs of extended trees generate the constraintc1= {(1,3), (3,4)}.
In the same way, thefourth pair of S(P1) and the third pair of S(P2)generate c2= {(1,1)}4.3 General idea for an efficient kernelfunctionAs above discussed, two tDAGs are isomorphic ifthe two properties, the partial isomorphism andthe constraint compatibility, hold.
To compute thekernel function K(G1, G2) defined in Sec.
4.1, wecan exploit these properties in the reverse order.Given a constraint c, we can select all the graphsthat meet the constraint c (constraint compatibil-ity).
Having the two set of all the tDAGs meetingthe constraint, we can detect the partial isomor-phism.
We split each pair of tDAGs in the fourextended trees and we determine if these extendedtrees are compatible.We introduce this innovative method to com-pute the kernel K(G1, G2) in the FOR space intwo steps.
Firstly, we give an intuitive explanationand, secondly, we formally define the kernel.4.3.1 Intuitive explanationTo give an intuition of the kernel computation,without loss of generality and for sake of simplic-ity, we use two non-linguistic tDAGs, Paand Pb(see Fig.
5), and the subgraph function ?S(?).
Thislatter is an approximated version of S(?)
that gen-erates tDAGs with subtrees rooted in the root ofthe initial trees of ?.To exploit the constraint compatibilityproperty, we define C as the set of all therelevant alternative constraints, i.e., the con-straints c that are likely to be generatedwhen detecting the partial isomorphism.For Paand Pb, this set is C = {c1, c2} =95?
(?S(Pa),?S(Pb))|c1= { ?A 1B 1 C 1,I 1M 1 N 1?
, ?A 1B 1B 1 B 2C 1 ,I 1M 1 N 1?
, ?A 1B 1B 1 B 2C 1 ,I 1M 1 N 1N 2 N 1?
,?A 1B 1 C 1,I 1M 1 N 1N 2 N 1? }
= {A 1B 1 C 1,A 1B 1B 1 B 2C 1 } ?
{I 1M 1 N 1,I 1M 1 N 1N 2 N 1} == ?(?S(?a),?S(?b))|c1??(?S(?a),?S(?b))|c1?
(?S(Pa),?S(Pb))|c2= { ?A 1B 1 C 1,I 1M 1 N 1?
, ?A 1B 1 C 1C 1 C 2,I 1M 1 N 1?
, ?A 1B 1 C 1C 1 C 2,I 1M 1M 2 M 1N 1 ?
,?A 1B 1 C 1,I 1M 1M 2 M 1N 1 ? }
= {A 1B 1 C 1,A 1B 1 C 1C 1 C 2} ?
{I 1M 1 N 1,I 1M 1M 2 M 1N 1 }== ?(?S(?a),?S(?b))|c2??
(?S(?a),?S(?b))|c2Figure 4: Intuitive idea for the kernel computation{{(1,1), (2,2)}, {(1,1), (2,3)}}.
We canthen determine the kernel K(Pa, Pb) as:K(Pa,Pb)= |?(?S(Pa),?S(Pb))|==|?(?S(Pa),?S(Pb))|c1??
(?S(Pa),?S(Pb))|c2|where ?
( ?S(Pa),?S(Pb))|care the common sub-graphs that meet the constraint c. A tDAG g?
=(?
?, ??)
in ?S(Pa) is in ?
( ?S(Pa),?S(Pb))|cif g??
=(??
?, ???)
in ?S(Pb) exists, g?
is partially isomorphicto g?
?, and c?
= c(?
?, ?
??)
= c(?
?, ???)
is covered byand compatible with the constraint c, i.e., c?
?
c.For example in Fig.
4, the first tDAG of the set?
(?S(Pa),?S(Pb))|c1belongs to the set as its con-straint c?
= {( 1 , 1 )} is a subset of c1.Observing the kernel computation in this wayis important.
Elements in ?
( ?S(Pa),?S(Pb))|calready satisfy the property of constraint com-patibility.
We only need to determine if thepartially isomorphic properties hold for elementsin ?
( ?S(Pa),?S(Pb))|c.
Then, we can write thefollowing equivalence:?(?S(Pa),?S(Pb))|c==?(?S(?a),?S(?b))|c??
(?S(?a),?S(?b))|c(2)Figure 4 reports this equivalence for the twosets derived using the constraints c1and c2.Note that this equivalence is not valid if a con-straint is not applied, i.e., ?
( ?S(Pa),?S(Pb))6= ?
(?S(?a),?S(?b)) ?
?
(?S(?a),?S(?b)).The pair Paitself does not belong to?
(?S(Pa),?S(Pb)) but it does belong to?(?S(?a),?S(?b))?
?
(?S(?a),?S(?b)).The equivalence (2) allows to compute the car-dinality of ?
( ?S(Pa),?S(Pb))|cusing the cardinal-ities of ?
( ?S(?a),?S(?b))|cand ?
( ?S(?a),?S(?b))|c.These latter sets contain only extended trees wherethe equivalences between unlabelled nodes aregiven by c. We can then compute the cardinali-ties of these two sets using methods developed fortrees (e.g., the kernel function KS(?1, ?2) intro-duced in (Collins and Duffy, 2002)).4.3.2 Formal definitionGiven the idea of the previous section, it is easyto demonstrate that the kernel K(G1, G2) can bewritten as follows:K(G1,G2)=|?c?C?(S(?1),S(?2))|c??
(S(?1),S(?2))|c|where C is set of alternative constraints and?
(S(?1),S(?2))|care all the common extendedtrees compatible with the constraint c.We can compute the above kernel using theinclusion-exclusion property, i.e.,|A1?
?
?
?
?An| =?J?2{1,...,n}(?1)|J |?1|AJ| (3)where 2{1,...,n} is the set of all the subsets of{1, .
.
.
, n} and AJ=?i?JAi.To describe the application of the inclusion-exclusion model in our case, let firstly define:KS(?1, ?2, c) = |?
(S(?1),S(?2))|c| (4)96where ?1can be both ?1and ?1and ?2can be both?2and ?2.
Trivially, we can demonstrate that:K(G1, G2) ==?J?2{1,...,|C|}(?1)|J|?1KS(?1,?2,c(J))KS(?1,?2,c(J))(5)where c(J) =?i?Jci.Given the nature of the constraint set C , wecan compute efficiently the previous equation asit often happens that two different J1and J2in2{1,...,|C|} generate the same c, i.e.c =?i?J1ci=?i?J2ci(6)Then, we can define C?
as the set of all intersec-tions of constraints in C , i.e.
C?
= {c(J)|J ?2{1,...,|C|}}.
We can rewrite the equation as:K(G1, G2) ==?c?C?KS(?1, ?2, c)KS(?1, ?2, c)N(c) (7)whereN(c) =?J?2{1,...,|C|}c=c(J)(?1)|J |?1 (8)The complexity of the above kernel strongly de-pends on the cardinality of C and the related cardi-nality of C?.
The worst-case computational com-plexity is still exponential with respect to the sizeof A1and A2.
Yet, the average case complexity(Wang, 1997) is promising.The set C is generally very small with re-spect to the worst case.
If F(A1,A2)are all thepossible correspondences between the nodesA1and A2, it happens that |C| << |F(A1,A2)|where |F(A1,A2)| is the worst case.
For example,in the case of P1and P2, the cardinality ofC ={{(1,1)}, {(1,3), (3,4), (2,5)}}is extremely smaller than the one ofF(A1,A2)= {{( 1 , 1 ),( 2 , 2 ),( 3 , 3 )},{( 1 , 2 ),( 2 , 1 ),( 3 , 3 )}, {( 1 , 2 ),( 2 , 3 ),( 3 , 1 )},..., {( 1 , 3 ),( 2 , 4 ),( 3 , 5 )}}.
In Sec.
4.5 we arguethat the algorithm presented in (Moschitti andZanzotto, 2007) has the worst-case complexity.Moreover, the set C?
is extremely smaller than2{1,...,|C|} due to the above property (6).We will analyze the average-case complex-ity with respect to the worst-case complexity inSec.
5.4.4 Enabling the efficient kernel functionThe above idea for computing the kernel functionis extremely interesting.
Yet, we need to make itviable by describing the way we can determine ef-ficiently the three main parts of the equation (7):1) the set of alternative constraints C (Sec.
4.4.1);2) the set C?
of all the possible intersections ofconstraints in C (Sec.
4.4.2); and, finally, 3) thenumbers N(c) (Sec.
4.4.3).4.4.1 Determining the set of alternativeconstraintsThe first step of equation (7) is to determine thealternative constraints C .
We can here stronglyuse the possibility of dividing tDAGs in two trees.We build C as C??
C?where: 1) C?are theconstraints obtained from pairs of isomorphic ex-tended trees t1?
S(?1) and t2?
S(?2); 2) C?arethe constraints obtained from pairs of isomorphicextended trees t1?
S(?1) and t2?
S(?2).The idea for an efficient algorithm is that wecan compute the C without explicitly lookingat all the subgraphs involved.
We instead useand combine the constraints derived comparingthe productions of the extended trees.
We cancompute then C?with the productions of ?1and?2and C?with the productions of ?1and ?2.For example (see Fig.
3), focusing on the ?
, theruleNP3?NN2NNS3 of G1andNP4?NN5NNS4 of G2generates theconstraint c = {( 3 , 4 ), (2 , 5 )}.Using the above intuition it is possible to definean algorithm that builds an alternative constraintset C with the following two properties:1. for each common subtree according to a setof constraints c, ?c?
?
C such that c ?
c?;2.
@c?, c??
?
C such that c?
?
c??
and c?
6= ?.4.4.2 Determining the set C?The set C?
is defined as the set of all possible in-tersections of alternative constraints in C .
Figure6 presents the algorithm determining C?.
Due tothe property (6) discussed in Sec.
4.3, we can em-pirically demonstrate that the average complexityof the algorithm is not bigger than O(|C|2).
Yet,again, the worst case complexity is exponential.4.4.3 Determining the values of N(c)The multiplier N(c) (Eq.
8) represents the num-ber of times the constraint c is considered in thesum of equation 5, keeping into account the sign of97Algorithm Build the set C?
from the set CC+?
C ; C1?
C ; C2?
?WHILE |C1| > 1FORALL c?
?
C1FORALL c??
?
C1such that c?
6= c??c?
c??
c?
?IF c /?
C+ add c to C2C+?
C+?
C2; C1?
C2; C2?
?C??
C ?
C+?
{?
}Figure 6: Algorithm for computing C?the corresponding addend.
It is possible to demon-strate that:N(c) = 1??c??C?c??cNc?
(9)This recursive formulation of the equation allowsus to easily determine the value of N(c) for everyc belonging to C?.
It is possible to prove this prop-erty using set properties and the binomial theorem.The proof is omitted for lack of space.4.5 Reviewing the strictly related workTo understand if ours is an efficient algorithm, wecompare it with the algorithm presented by (Mos-chitti and Zanzotto, 2007).
We will hereafter callthis algorithm Kmax.
The Kmaxalgorithm andkernel is an approximation of what is a kernelneeded for a FOR space as it is not difficult todemonstrate that Kmax(G1, G2) ?
K(G1, G2).The Kmaxapproximation is based on maximiza-tion over the set of possible correspondences ofthe placeholders.
Following our formulation, thiskernel appears as:Kmax(G1, G2) == maxc?F(A1,A2)KS(?1, ?2, c)KS(?1, ?2, c) (10)where F(A1,A2)are all the possible correspon-dences between the nodes A1and A2of the twotDAGs as the one presented in Sec.
4.3.
This for-mulation of the kernel has the worst case complex-ity of our formulation, i.e., Eq.
7.For computing the basic kernel for the extendedtrees, i.e.
KS(?1, ?2, c) we use the model algo-rithm presented by (Zanzotto and Moschitti, 2006)and refined by (Moschitti and Zanzotto, 2007)based on the algorithm for tree fragment feature010203040500 10 20 30 40 50msn?m placeholdersK(G1, G2)Kmax(G1, G2)Figure 7: Mean execution time in milliseconds(ms) of the two algorithms wrt.
n ?
m where nand m are the number of placeholders of the twotDAGsspaces (Collins and Duffy, 2002).
As we are usingthe same basic kernel, we can empirically comparethe two methods.5 Experimental evaluationIn this section we want to empirically estimate thebenefits on the computational cost of our novel al-gorithm with respect to the algorithm proposed by(Moschitti and Zanzotto, 2007).
Our algorithm isin principle exponential with respect to the set ofalternative constraints C .
Yet, due to what pre-sented in Sec.
4.4 and as the set C?
is usuallyvery small, the average complexity is extremelylow.
Following the theory on the average-costcomputational complexity (Wang, 1997), we es-timated the behavior of the algorithms on a largedistribution of cases.
We then compared the com-puting times of the two algorithms.
Finally, asK and Kmaxcompute slightly different kernels,we compare the accuracy of the two methods.We implemented both algorithms K(G1, G2) andKmax(G1, G2) in support vector machine classi-fier (Joachims, 1999) and we experimented withboth implementations on the same machine.
Wehereafter analyze the results in term of executiontime (Sec.
5.1) and in term of accuracy (Sec.
5.2).5.1 Average computing time analysisFor this first set of experiments, the source of ex-amples is the one of the recognizing textual en-tailment challenge, i.e., RTE2 (Bar-Haim et al,98020040060080010001200140016000 2 4 6 8 10 12 14s#ofplaceholdersK(G1, G2)Kmax(G1, G2)Figure 8: Total execution time in seconds (s) ofthe training phase on RTE2 wrt.
different numbersof allowed placeholders2006).
The dataset of the challenge has 1,600 sen-tence pairs.The computational cost of both K(G1, G2) andKmax(G1, G2) depends on the number of place-holders n = |A1| of G1and on m = |A2| thenumber of placeholders of G2.
Then, in the firstexperiment we want to determine the relation be-tween the computational time and the factor n?m.Results are reported in Fig.
7 where the computa-tion times are plotted with respect to n?m.
Eachpoint in the curve represents the average execu-tion time for the pairs of instances having n ?mplaceholders.
As expected, the computation of thefunction K is more efficient than the computationKmax.
The difference between the two executiontimes increases with n?m.We then performed a second experiment thatwants to determine the relation of the total exe-cution with the maximum number of placeholdersin the examples.
This is useful to estimate the be-havior of the algorithm with respect to its applica-tion in learning models.
Using the RTE2 data, weartificially build different versions with increasingnumber of placeholders.
We then have RTE2 with1 placeholder at most in each pair, RTE2 with 2placeholders, etc.
The number of pairs in each setis the same.
What changes is the maximal num-ber of placeholders.
Results are reported in Fig.
8where the execution time of the training phase inseconds (s) is plotted for each different set.
Wesee that the computation of Kmaxis exponentialwith respect to the number of placeholders andKernel Accuracy Used training Supportexamples VectorsKmax59.32 4223 4206K 60.04 4567 4544Table 1: Comparative performances of Kmaxand Kit becomes intractable after 7 placeholders.
Thecomputation of K is instead more flat.
This canbe explained as the computation of K is relatedto the real alternative constraints that appears inthe dataset.
The computation of the kernel K thenoutperforms the computation of the kernel Kmax.5.2 Accuracy analysisAs Kmaxthat has been demonstrated very effec-tive in term of accuracy for RTE and K computea slightly different similarity function, we want toshow that the performance of our more computa-tionally efficient K is comparable, and even better,to the performances of Kmax.
We then performedan experiment taking as training all the data de-rived from RTE1, RTE2, and RTE3, (i.e., 4567training examples) and taking as testing RTE-4(i.e., 1000 testing examples).
The results are re-ported in Tab.
1.
As the table shows, the accuracyof K is higher than the accuracy of Kmax.
Thereare two main reasons.
The first is that Kmaxisan approximation of K .
The second is that wecan now consider sentence pairs with more than7 placeholders.
Then, we can use the completetraining set as the third column of the table shows.6 Conclusions and future workWe presented an interpretation of first order rulefeature spaces as tripartite directed acyclic graphs(tDAGs).
This view on the problem gave us thepossibility of defining a novel and efficient algo-rithm for computing the kernel function for firstorder rule feature spaces.
Moreover, the resultingalgorithm is a valid kernel as it can be written asdot product in the explicit space of the tDAG frag-ments.
We demonstrated that our algorithm out-performs in term of average complexity the previ-ous algorithm and it yields to better accuracies forthe final task.
We are investigating if this is a validalgorithm for two general directed acyclic graphs.99ReferencesRoy Bar-Haim, Ido Dagan, Bill Dolan, LisaFerro, Danilo Giampiccolo, and Idan Magnini,Bernardo Szpektor.
2006.
The second pascal recog-nising textual entailment challenge.
In Proceedingsof the Second PASCAL Challenges Workshop onRecognising Textual Entailment.
Venice, Italy.Bob Carpenter.
1992.
The Logic of Typed Fea-ture Structures.
Cambridge University Press, Cam-bridge, England.Michael Collins and Nigel Duffy.
2002.
New rank-ing algorithms for parsing and tagging: Kernels overdiscrete structures, and the voted perceptron.
In Pro-ceedings of ACL02.C.
Cortes and V. Vapnik.
1995.
Support vector net-works.
Machine Learning, 20:1?25.Ido Dagan and Oren Glickman.
2004.
Probabilistictextual entailment: Generic applied modeling of lan-guage variability.
In Proceedings of the Workshopon Learning Methods for Text Understanding andMining, Grenoble, France.Ido Dagan, Oren Glickman, and Bernardo Magnini.2006.
The pascal recognising textual entailmentchallenge.
In Quionero-Candela et al, editor, LNAI3944: MLCW 2005, pages 177?190, Milan, Italy.Springer-Verlag.Marie-Catherine de Marneffe, Bill MacCartney, TrondGrenager, Daniel Cer, Anna Rafferty, and Christo-pher D. Manning.
2006.
Learning to distinguishvalid textual entailments.
In Proceedings of the Sec-ond PASCAL Challenges Workshop on RecognisingTextual Entailment, Venice, Italy.Jason Eisner.
2003.
Learning non-isomorphic treemappings for machine translation.
In Proceedingsof the 41st Annual Meeting of the Association forComputational Linguistics (ACL), Companion Vol-ume, pages 205?208, Sapporo, July.Thomas Ga?rtner.
2003.
A survey of kernels for struc-tured data.
SIGKDD Explorations.Aria D. Haghighi, Andrew Y. Ng, and Christopher D.Manning.
2005.
Robust textual inference via graphmatching.
In HLT ?05: Proceedings of the con-ference on Human Language Technology and Em-pirical Methods in Natural Language Processing,pages 387?394, Morristown, NJ, USA.
Associationfor Computational Linguistics.Andrew Hickl, John Williams, Jeremy Bensley, KirkRoberts, Bryan Rink, and Ying Shi.
2006.
Rec-ognizing textual entailment with LCCs GROUND-HOG system.
In Bernardo Magnini and Ido Dagan,editors, Proceedings of the Second PASCAL Recog-nizing Textual Entailment Challenge, Venice, Italy.Springer-Verlag.Thorsten Joachims.
1999.
Making large-scale svmlearning practical.
In B. Schlkopf, C. Burges, andA.
Smola, editors, Advances in Kernel Methods-Support Vector Learning.
MIT Press.Johannes Ko?bler, Uwe Scho?ning, and Jacobo Tora?n.1993.
The graph isomorphism problem: its struc-tural complexity.
Birkhauser Verlag, Basel, Switzer-land, Switzerland.Alessandro Moschitti and Fabio Massimo Zanzotto.2007.
Fast and effective kernels for relational learn-ing from texts.
In Proceedings of the InternationalConference of Machine Learning (ICML).
Corvallis,Oregon.Alessandro Moschitti.
2004.
A study on convolutionkernels for shallow semantic parsing.
In proceed-ings of the ACL, Barcelona, Spain.C.
Pollard and I.A.
Sag.
1994.
Head-driven PhraseStructured Grammar.
Chicago CSLI, Stanford.Rajat Raina, Aria Haghighi, Christopher Cox, JennyFinkel, Jeff Michels, Kristina Toutanova, Bill Mac-Cartney, Marie-Catherine de Marneffe, ManningChristopher, and Andrew Y. Ng.
2005.
Robust tex-tual inference using diverse knowledge sources.
InProceedings of the 1st Pascal Challenge Workshop,Southampton, UK.Jan Ramon and Thomas Ga?rtner.
2003.
Expressivityversus efficiency of graph kernels.
In First Interna-tional Workshop on Mining Graphs, Trees and Se-quences.Jun Suzuki, Tsutomu Hirao, Yutaka Sasaki, and EisakuMaeda.
2003.
Hierarchical directed acyclic graphkernel: Methods for structured natural languagedata.
In In Proceedings of the 41st Annual Meet-ing of the Association for Computational Linguis-tics, pages 32?39.Rui Wang and Gu?nter Neumann.
2007.
Recog-nizing textual entailment using a subsequence ker-nel method.
In Proceedings of the Twenty-SecondAAAI Conference on Artificial Intelligence (AAAI-07), July 22-26, Vancouver, Canada.Jie Wang.
1997.
Average-case computational com-plexity theory.
pages 295?328.Fabio Massimo Zanzotto and Alessandro Moschitti.2006.
Automatic learning of textual entailmentswith cross-pair similarities.
In Proceedings of the21st Coling and 44th ACL, pages 401?408.
Sydney,Australia, July.100
