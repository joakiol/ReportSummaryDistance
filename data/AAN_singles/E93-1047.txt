\[ Type-Dr iven Semantic Interpretat ion of f -Structures \]?.~,w),(njO)Jiirgen WedekindInstitute for Natural Language ProcessingUniversity of StuttgartAzenbergstr.
12D-7000 Stuttgart 1, FRGjuergen@ims.uni-stuttgart.deRonald M. KaplanXerox Palo Alto Research Center3333 Coyote Hill RoadPalo Alto, California 94304 USAKaplan.Parc@Xerox.ComAbstractThe formal architecture of Lexical Func-tional Grammar offers a particular formaldevice, the structural correspondence, formodularizing the mapping between the sur-face forms of a language and representa-tions of their underlying meanings.
Thisapproach works well when the structuraldiscrepancies between form and meaningrepresentations are finitely bounded, butthere are some phenomena in natural an-guage, e.g.
adverbs in English, where thisrestriction does not hold.
In this paper, wedescribe rule-based type-driven interpreta-tion algorithms which cover cases of sucha structural misalignment by exploiting anew descriptive device, the "restriction op-erator".
The algorithms are set up in sucha way that recursive rules can be derivedfor the interpretation f adjunct sets withina codescripiion approach (see \[Kaplan andWedekind, 1993\] for details).1 IntroductionIn \[Kaplan and Bresnan, 1982\] Lexical FunctionalGrammar (LFG) was introduced as a grammaticalformalism that assigns to a sentence ntities of twodifferent levels of representation: a c-structure rep-resenting information on the structure of the phrasesof a sentence and an f-structure which represents itsunderlying predicate-argument structure.
The struc-tures are set in correspondence by a function fromthe c-structure nodes (constituents) into the sub-structures of the f-structure.
The f-structure is iden-tified with the smallest structure that satisfies thef-description, a description of the f-structure whichis built up by instantiation of the annotations of thecontext-free rules and projected off the c-structureby the correspondence mapping.This architecture was then extended by Kaplan\[1987\] and Halvorsen \[1987\] to structures represent-ing information on other levels of linguistic repre-sentation.
These structures (called projections) arecodescribed by the annotations of the context-freegrammar and set in correspondence by additionalprojectors.
Furthermore, Kaplan et ai.
\[1989\] appliedthe general correspondence architecture to the prob-lem of translation by projecting from the f-structureof a sentence of a given source language an addi-tional f-structure of its translation i to some targetlanguage.Within the domain of semantic interpretation,which is the topic here, the semantic structures arethe range of the a-projector which maps substruc-tures of the f-structure into corresponding substruc-tures of the semantic structure.
In figure 1, theS .. .
.
.
.
.
.
rPaED 'arrive(SUB J)' 1P VP ":/ su~Ja, \[PRED Jonn J N , --': t..- , \ ] J /i - .
.
i / .
j  kN " .
.
.
.
Z:~ "/'~ PP~L~.
arrive\]I "-.
.
J* '"  / ~ .
.
/John ""arrived L.~,.G1 3ohn JFigure 1Structural correspondences b tween c-, f- anda-structure.semantic structure ((r-structure) and the structuralcorrespondence b tween f- and a-structure for thesentence John arrived are codescribed by additional404annotations of the lexical entry for arrived in (1).
(1) arrived: V, (T PrtED)= "arrive(SUDJ)'(a T REL) ---- arrive(a T AaQ1) = a(T sunJ)Within the domain of translation, Wedekind \[1988\],and Sadler and Thompson \[1991\] recognized someproblems of the correspondence approach which con-cern data of head.switching.
These difficulties alsoarise in the domain of semantic interpretation.
Inthe latter domain we find constructions where thesyntactic head (the predicate) does not correspondto the semantic head as, e.g., in adverbially-modifiedsentences like (2)(2) John arrived latewhose f- and a-structure are given in figure 2.
Inf: \]PRED 'arrive(SUB J)' P.ELlS ., \[P D 'john'\] ARG1 ARG\]Figure 2Head-switching between fJand a-structure.arr'wl\]joh.
JJthis diagram, the semantic-structure correspondingto the entire f-structure has the adverb "late" as itstop-level relation, even though this does not corre-spond to the syntactic (f-structure) head "arrive".Intuitively, the semantic argument (ArtG 1) of the ad-verb corresponds to the information coded in the par-tim f-structure (3), which comprises only the infor-mation concerning the subject and the predicate ofthe sentence.
(3) F PP~D 'arrive(suBJ)'\]LS ., \[PRED 'john'lJThe formal difficulty is that this is not an isolatedunit of the f-structure and hence cannot be in thedomain of a.
However, the f-structure descriptionlanguage can be extended by introducing a restric-tion operator which allows explicit reference to suchsmaller f-structures.
The restriction operator "\"which is defined in (4) below 1 allows us then to referto the partial structure (3) by the term f\(ADJ a).
(4) The restriction operator is defined for an f-structure f and an attribute A by:(i) f \A  = f \ ]Dom(f )  - {A} if the value o f ( f  A) isa structure, and(it) if g e ( f  A) (i.e.
if ( f  A) is set-valued) byf \ (A  g) f f \A  if ( f  A) -- {g} -- 0= L f \A  U {(A,(f A) - -  {g})} else.1Cf.
\[Kaplan and Wedekind, 1993\] for more details.On the other hand, it becomes clear by exampleswith more than one adjunct that in addition a newsource for recursion is needed, since it must in prin-ciple be possible to construct a multiple nesting foradjunct sets whose size is not bounded by any fixedfinite upper bound.
2In order to identify this additional recursive de-vice and to test our extended escription languagefor adequacy, we picked out Montague semantics asa well-known semantic theory and tried to specify thesyntax-semantics nterface by a rule-based semanticinterpretation mechanism.
Our goal is to derive thesemantic representation by analyzing the f-structurerecursively.
We assume an interpretation mechanismthat operates on f-structures (possibly extended byinformation on the linear precedence of the predi-cates) and can be stated by very general composi-tionality principles without relying on any kind oftransformations.
This is because an f-structure ofa sentence represents its deep structure in terms ofpredicate-argument relations where all informationrelevant for the interpretation is locally available.Furthermore, we want to ensure the "completeness"of the interpretation and to specify conditions whichallow us to control the "conservativity" of the exten-sion (for those who require that a theory of gram-mar such as LFG be strong enough to ensure the(semantic) well-formedness of the strings acceptedby a particular grammar).
On the other hand, wewant the semantic structure to be accessible fromthe f-structure by an explicit interpretation function(a-projector) in order to be able to formulate con-straints, e.g.
binding and scoping principles, whichconstrain the interpretation of the f-structures.In this paper, we give three different ype-driveninterpretation mechanisms which fulfill the require-ments given above.
The first one is a rather simpletop-down algorithm that can be described by our ex-tended description language but cannot be used forall type systems.
The second algorithm is a morepowerful bottom-up algorithm which can be used forall type systems but not formulated in our descrip-tion language.
The third one, finally, is a top-downsimulation of the second algorithm which is again de-scribable in our description language.
The fact thatthe third algorithm can be described by our extendeddescription language seems to confirm the adequacyof our extension by the restriction operator.
Further-more, this investigation i dicates that an additionaldescription-by-analysis mechanism is needed withina codescription approach in order to handle cases2This situation, where the recursion given by thecontext-free rule system turns out not to be the adequateor at least desirable carrier for specific (recursive) descrip-tion purposes, is not unusual.
Functional uncertainty wase.g.
introduced as a new recursive device operating on f-structures, ince unbounded ependencies could be moreadequately handled by this new mechanism than by ex-ploiting the recursive phrase structure rule system alone.405where the interpretation recursion is completely in-dependent of the recursion given by the context-freegrammar (cf.
\[Kaplan and Wedekind, 1993\]).2 A Simple Top-down Type-drivenInterpretation AlgorithmIn order to sketch how we can achieve a decompo-sition of an f-structure which is sufficient for its in-terpretation, we first introduce a simple top-downinterpretation procedure which is restricted to cer-tain special type systems.
For the interpretationwe generally assume from now on that types are as-signed to all grammatical function values and seman-tically relevant atomic-valued features by a type as-signment TY.
Aside from the fact that grammaticalfunctions and values and not c-structure constituentsare typed, this assignment is similar to the one usedin Montague grammar.
The structure in figure 3 e.g.is an oversimplified typed f-structure 3 of the sentence(5) John arrived late today.~DJI"PILEDSUBJL.,/::rp o r ltell }LO,O LO.O j j\[PILED \['today'\]\]L(,,,) L<'") Jj'arrive'\](,,.~) JFigure 3The typed f-structure of sentence (5).The typing of the f-structures can e.g.
be establishedby additional type-assigning annotations within agrammar.
Examples of such augmented rules andlexical entries are given in (6).
(6) S ~ NP VP(T s~)  =~ T=~TY( I )=e  TY(T)=tarrived: V, (1" PILED) ---~ 'arrive'"TY(T PREY) = (~, t>It is of course possible to think of more sophisti-cated type inheritance mechanisms for the specifi-cation of the f-structure typing.
The investigationof such mechanisms, however, is beyond our presentconcerns.The restrictedness of the algorithm results fromthe fact that it operates under the assumption thatwe can recursively decompose each f-structure f into3We drop the subcategorization frames in thefollowing.a substructure or set element which corresponds toa one-place main functor and the rest structure of fwhich is interpreted as the argument of that functor.Although this restriction seems to be rather strong,this algorithm gives the right hierarchical semanticstructures for the problematic flat f-structures con-taining sentence modifiers.
And if we assume theusual type-raising for the subcategorized functions,it also describes all possible structural ambiguitiesfor predicate modifiers, quantifiers, etc.
4 In detail,the algorithm works as follows.Proceeding from an initial mapping of a given f-structure f into an empty semantic structure the in-terpretation works top-down according to the follow-ing two principles:If trg is defined and h is a substructure (h = (g A))or an element of a set-value of g (h E (g A)) and(A1) TY(g)  - r and TY(h)  = {r', r) then(i) (g A) = h "-+ (fig FU) "- trh A(fig ARG) ---~ a(g\A) A TY(g \A)  = r',(ii) h e (g A) ---* (#g FU) - "  ah A(ag ARG) = a(g\(A h))A TY(g \ (A  h )) = v',(A2) TY(g)  = v A TY(h)  = r ---* ~9 = ah.The principle (A1) allows us to select a substructureor an element of a set value of type /v ~, r) from astructure g of type r, which is already mapped intothe semantic representation, as a funetor and inter-pret the rest of g as its argument which becomesthen of type r'.
5 If we apply principle (Alii) tothe structure in figure 3 and choose b as the rune-for we end up with the constellation in figure 4.For an interpreted structure g containing an imme-diate substructure or a set element h, principle (A2)drops the interpretation downwards if g and h areof the same type.
This principle can then be ap-plied e.g.
to b of figure 4 and achieves the mappingin figure 5.
Figure 6 gives a complete type-drivenderivation of the functor-argument structure of (5)with wide scope of 'late'.
One gets the other readingby first selecting b as described above.Note that the meanings are not constructed by ourprocedure.
The complete semantic representation re-sults then from the insertion of the meanings of thebasic expressions which are assumed to be specifiedin the lexicon via equations like the following:late: ADV, (T BRED)  = 'late'4 For further illustration of the algorithms we give ex-amples involving transitive verbs in the appendix.5Note that a distinct re-interpretation f an alreadyinterpreted structure always fails, since predicates andpredicate projections do not unify in LFG.
Without thisassumption, one would have to add to the principles thecondition that g has no interpreted part.406f:i a: \[PRED,*,VJ { Lo,')/b: \[PRED~, LO.
')PRED \['~ve'lt(',') JSUBJ \[PRED.#f \  (ADJ b):\['l~te'\]\] \]"" J\]\['today'11/to.,~ J j ){?
:\[~.~o r',., l1 LO,') tO,t) j j  } 'PILED \['arrive'\]L(=, ,) J= \ [ rocrFigure 4The result of applying principle (Alii) to b E (f ADJ)in figure 3.ADJI:PLIEDSUBJt\f \  (ADJ b){ .
rP~D r,l~t~,l\] ~=L,,,, L,,,, J j~~, \['today'\]l I .-" Lo,,> t,.o j j j  ,.
|FU\['=rive'\] I L~n%L(',') J I /Figure 5The result of applying principle (A2) to b in figure 4.The result is then the following structureL AP,-<~ j l Jand the meaning of the sentence can be calculatedbottom-up by )t-conversion i the usual way.
"FU ~p( L(p ) )FU ~q(T(q))FU x(A(x))ARG ARG ARGLT(A(j)) LA(J)L(T(A(j)))So, we end up with the expression L(T(A(j))) whichcorresponds to the wide scope reading of 'late'.j,':~~ late \[,?L:= fa:f,~ hate'\]\] }) L(',') tO.')
JJADJIb: \[pREo \['today'1\]~' L(',') t(',') JJPRED \['=.ve'\]L(",') J?
'f \  (ADJ a)"I i~L,P,.,~ v L,=~\['=rive'\] PRED L(',=) Jf\(AD3 a)\(ADJ b):;UBJtoday\['=.ve'\] ~ I?
'"~ J I\Figure 6A complete derivation of one reading of (5).i~-jjj3 A Bot tom-up Type-dr ivenIn terpretat ion  A lgor i thmIn the following we sketch a more powerful mecha-nism which can also handle cases where the functoris not given by a substructure ( f  A) or a set ele-ment g E ( f  A) hut by a partial structure g sub-sumed by f (g C f) as e.g.
in the typed structurefor sentence (7) in figure 7.
Here the part of the f-structure that comprises the modifiers and the predi-cate has to he interpreted as the main functor (either407Stimes( twiee( knock )) or twiee( Stiraes( kno& ) ) ).
(7) John knocked twice three times.I:ADJSUBJ'BED'a:bRED \['3times' 11 }L(<.,o,<.,o) Lt(.,o.<.,m JJb: \[PRED \['twice' 1\], L t t .
,O ,< ' ,m L.,,,o,~.,,>>JJ'knock'\]1",0 JFigure 7The typed f-structure of sentence (7).Let "\[" be a new operator which is defined for a sub-structure (f  A) o f f  by f\[A = f\] {A} and for a set ele-ment g G (f  A) by f\[(A g} = {(A, {g})}.
The value issimply the f-structure subsumed by f which has onlyattribute A with its value in f or with the singletonset-value g. For every attribute or attribute-elementpair x, f \ z  and fix are in fact complementary withrespect o f, that is, f \ x  \[7 fix = 0.Proceeding from the interpretations of the basicexpressions introduced by the lexical entries the al-gorithm works bottom-up according to the followingprinciples:(B1) If trh and irk are defined, h E g, k E_ g andh N k = 0 and TY(h)  = {r, r'} andTY(k)  = r, then= u k) FU) ^ = U k) ARG) ^TY(h  I.J k) = r'.
(B2) If trh is defined and TY(h)  = r, then(i) (g A) = h ~ TY(g iA  ) = 7"Aah = a(glA),and(ii) h G (g A) ~ TY(g\[(A h)) = r Aah = cr(gl(A h)).Principle (B2) pushes the interpretation from an in-terpreted structure hone level upwards to the partialstructure of the given structure which contains only has an attribute- or set-value and assigns to that par-tial structure the type of h. Note that principle (B2)can only be applied if glA resp.
gl(A h) has no typeassignment or is of the same type as h (otherwise thetype assignment would not be a function).If a structure g contains two disjoint partial struc-tures h and k, one of them being an appropriateargument for the other, then the structures are in-terpreted according to principle (B1) as the functorresp.
argument of the interpretation of their unifi-cation.
This is then assigned the value-type of thefunctor.
Figure 8 shows how the semantic represen-tation of one reading of sentence (7) is constructed.We represent here attribute-value paths in DAG form|/ IT" / /Z  '""'"Figure 8The bottom-up construction of one reading of (7).and depict the decomposition f the f-structure as agraph where each subtree dominated by a branchingnode represents the partial f-structure which com-prises the attribute-value paths contained in thatsubtree.
The construction starts with the mapping ofthe terminal nodes provided by the lexical entries ofthe basic expressions.
Each mapping of a structuredominated by a non-branching non-terminal noderesults from an application of principle (B2).
Theinterpretation f a partial substructure (a structuredominated by a branching node) is constructed byprinciple (B1).4 A Top-down S imula t ion  o f  theBot tom-up  In terpreta t ionA lgor i thmThe restrictedness of the simple top-down algorithmresults from the fact that the main functor was al-ways assumed to take exactly one argument whichis represented by the semantics of the rest of thef-structure.
The algorithm fails in cases where thetype of the substructure presenting the main func-tor indicates that more than one argument is neededby the main functor in order to yield a meaning of thetype of the entire f-structure.
If we choose e.g.
the'3times' modifier in the structure of figure 7 as themain functor (having widest scope), then we need afirst argument of type (e,t) and a second argumentof type e to get a meaning of type t. So, the restof the structure corresponds in the general case to alist or set of arguments.In order to overcome this difficulty, we assign to408the rest structure now a separate semantic structure.This structure is a set that contains typed variablesfor all those arguments which are still needed to sat-urate previously processed (complex) functors.
If westart with the '3times' modifier this set contains thetyped variables ae and a(e,t).
In detail the algorithmworks as follows?If TY( f )  = r the algorithm starts from the initialassignment ~rf = fr  and proceeds top-down accord-ing to the following principles:If ag is defined and h is a substructure (h = (9 A))or an element of a set-value of g (h E (g A)),YY(h)  = (rn, ('rn-1...(T1, 7")..)) and(C1) ag = kr and n > O, or there is a kr E ag andn > O, then o'h -" (kr FU n) = h(r,,(r,_,...(rt,r)..)),(kr FU i-1 ARG) = h i (for each i : 1, n)and(i) if (g A) ---- h then\ [{h~, .
.
,h '~} if kr =~g o'(g \A) = t(og -- {k,}) LI{hr,,.. ,1  hr,~ }n else,6(ii) i fh  G (g A) then o'(g\(A h)) is determined asin case (i),(C2) ag = k~ and n = O, then ~g = ah.In contrast to the simple top-down algorithm, eachapplication of (C1) creates a new semantic structurewhich includes typed variables for all missing argu-ments.
The new structure is linked to structures pre-viously constructed either by explicit reentrancies orbecause they share common substructures.
(The lat-ter is enforced, since all those arguments (typed vari-ables) which remain to be found after selecting kr arepassed on to the semantic representation f the nextrestriction by (Cli,ii).)
Reentrancies are used to linkthe (new) arguments to their right positions whichare encoded in a functor-argument matrix in ~rg byapplying (C1).
Figure 9 gives three steps of a deriva-tion of one reading of (7).
(We omit in the examplethe upper indices of the typed variables provided by(C1), since no funetor needs more than one argumentof the same type.
)5 Completeness, Conservativity,Constraints and CompositionalitySince the meaning of a sentence with an f-structuref is given by the formula described by the seman-tic representation orf ,  the bottom-up constructionis successful if we have constructed a value for ~rf.Within the top-down approaches the meaning of eachbasic expression represented in the f-structure hasto be connected with the root or f ,  otherwise the se-mantic representation would not be a description ofa well-formed formula.eI.e, if k~ E ag./:~'DJ I :i \[P(~i(?
'Q) dl i(e'l~,~~:)))) \]\]I I 1SUBJ ,.\[PI~t.ED \]L\[~ Ohn'\] /PRED i" \['knock'\]?
\ [ ( .
,0 J~ D ~b(e't): \[ae:IPRED /:\['knock'\]L t(-.,) JFigure 9Some steps of the interpretation f (7).
}In LFG, we can ensure that all syntactically well-formed utterances are also semantically well-formedby mechanisms which are already part of the theory.By the completeness and coherence conditions it canfirst be guaranteed that the different kinds of nuclei(consisting of a predicate and the functions it sub-categorizes for) will get an interpretation of the righttype.
Since all free grammatical functions (ADJ) arehomogeneous functors (argument and value are ofthe same type) and it is clear from the c-structurerules which type of argument they modify (a modifieron S-level is either a sentence or predicate modifier,409etc.
), f-structures with free functions can also be en-sured to be interpreted.On the other hand particular eadings can be ex-cluded by global binding and/or scoping principles,similar to the ones formulated in \[Dalrymple et al,1990\].
These principles constrain the interpretationof the f-structures and their parts if special con-ditions are satisfied.
By combining outside-in andinside-out functional uncertainty we can express bythe following constraint e.g.
that under some condi-tions E the substructure (T A) of an f-structure haswide scope over (T B):Z -"* ((FU 0"(T A)) ARG + FU) "-?
o-(T B).Due to the interpretation function (~r) between atyped f-structure and its semantic representation itis also possible to formulate a compositionality prin-ciple very similar to the classical one.
The classi-cal compositionality principle (Frege principle) saysroughly that the meaning of an expression is a func-tion of the meaning of its components and their modeof combination and is normally specified in termsof c-structure categories and their immediate con-stituents.
As is well-known, the attractiveness of thisprinciple gets lost to some degree if we have to handlephenomena which can only be described by assumingtransformations on the constituent structures.In LFG, the f-structures describe explicitly theunderlying predicate-argument structures of well-formed expressions, and the components of an ex-pression are taken to be the sets of string elementsthat are mapped via ?
(the structural correspon-dence between c- and f-structure) to the units ofits type-driven decomposed f-structure.
On thisview, the meaning of an expression remains a func-tion of the meaning of its components.
Thus,the reading of sentence (5) given in figure 6, e.g.,is composed of the meanings of the components{(1, John), (2, arrived), (4, today)} and {(3,1ate)} as-sociated with f \ (ADJ a) and a by ?, respectively.Their mode of combination (determined by the typeassignment) is encoded in the functor-argument ma-trix as function-application f aa to a(f \ (ADJ a))(i.e.
the meaning is o'a(a(f \ (ADJ a)))).
Ambigui-ties result then from the indeterminism of the type-driven decomposition f the f-structure of a sentence.Thus, we can state for LFG a compositionality prin-ciple without assuming any kind of transformations,since all information relevant for the interpretationis locally available (cf.
e.g.
\[Bresnan et al, 1982\]).6 Conc lus ionIn this paper and in \[Kaplan and Wedekind, 1993\]we introduced a new formal device, the "restrictionoperator", into the language of functional descrip-tions.
This operator provides a natural account ofthe misalignment between f-structures and semanticstructures in cases where semantic units correspondintuitively to subsets of functional information.
Wetested this new descriptive device by formulating uni-versal interpretation principles that derive represen-tations of a Montagovian semantics by recursivelyanalyzing typed f-structures.
We outlined three in-terpretation algorithms, all of which depend on adescription-by-analysis recursion that is independentof the recursion of the phrase-structure grammar.The first algorithm is formulated in terms of thef-designators provided by our extended escriptionlanguage, but is restricted to special type systems.In order to cover arbitrary type systems, we intro-duced a more powerful bottom-up algorithm whichwe were then able to simulate in a top-down fashionusing again only the f-designators of our extendeddescription language.
This provides some supportfor the adequacy of our extended description lan-guage and reinforces the results reported by Kaplanand Wedekind \[1993\].
They combined the restric-tion operator with description-by-analysis rules forthe interpretation ofsentential and VP-adjuncts in acodescription approach which, although not explic-itly driven by types, is patterned after the top-downalgorithms presented here.Append ixBecause of the particularly interesting cases of mis-alignment that they present, we concentrated in themain part of this paper almost exclusively on theinterpretation of modifiers.
Also, modifiers are in-volved in the head-switching translation problemsdiscussed by Kaplan and Wedekind \[1993\], and thealgorithms proposed here underlie the description-by-analysis approach that we developed in that pa-per.
As suggested by the reviewers, we briefly sketchin this appendix how our approach extends to exam-ples involving transitive verbs.
Although their inter-pretation depends crucially on the type system andthe actual meaning assigned to transitive verbs inthe lexicon, we assume here a type system which iswell-known from PTQ.
This type system allows usto cover quantifier scope ambiguities as in (8)(8) Every man loves a woman.If we apply the simple top-down algorithm to thetyped f-structure of (8) we get both readings due toan indeterminism in picking out the functors.
Fig-ure 10 shows some steps of a derivation where theuniversal quantifier has wide scope.
(The other read-ing would be the result if ( f  OBJ) were selected first.
)Although the given type system would, of course, al-ways yield SUBJ/OBJ scope ambiguities, pecific read-ings can be excluded by a system of interacting scop-ing constraints, since the semantic structure is ac-cessible via the a-projector7 The functional uncer-7In the few cases where the the scope is determinedby the transitive verb itself, e.g.
some passive forms inEnglish, the appropriate r ading can be enforced irectlyby using h-expressions which refer explicitly to the mean-410L(~, 0 l J  L(,~,,)I:f \  SUB J:' pevery';UBJ \['man'\] I I PRED \[(e,,) \] j \], .
((,~.0,0;PRED 'love' \](((~,,),,),(e,,)) J\[ \]l SPEC \[11c,?1,11.,,),0 ))BJ \[PRED \['woman'\] |L,,-.,,.,, t,..,, jPRED \['love' l\[(((~.0.0,(~,0) JL((=,O, ((~,,),,)) J \[OBJ \['woman'\] /PRED \[(e,0 J J(,,,,) L ((?
'')'')Figure 10Some steps in the derivation of one reading of (8).\[Kaplan, 1987\] Kaplan, R. Three Seductions ofComputational Psycholinguistics.
In P. Whitelocket al, eds., Linguistic Theory and Computer Ap-plications.
London: Academic Press, 1987.\[Kaplan and Bresnan, 1982\] Kaplan, R., and J.Bresnan.
Lexical-Functional Grammar: A For-mal System for Grammatical Representation.
InJ.
Bresnan, ed., The Mental Representation ofGrammatical Relations.
Cambridge, Mass.
: TheMIT Press, 1982.\[Kaplan et al, 1989\] Kaplan, R., K. Netter, J.Wedekind, and A. Zaenen.
Translation by Struc-tural Correspondences.
In Proceedings of the SthConference of the European Chapter of the Associ-ation for Computational Linguistics.
Manchester,1989.\[Kaplan and Wedekind, 1993\] Kaplan, R., and J.Wedekind.
Restriction and Correspondence-basedTranslation.
In Proceedings of the 6th Conferenceof the European Chapter of the Association forComputational Linguistics.
Utrecht, 1993.\[Sadler and Thompson, 1991\] Sadler, L., and H.Thompson.
Structural Non-Correspondence inTranslation.
In Proceedings of the 5th Confer-ence of the European Chapter of the Associationfor Computational Linguistics.
Berlin, 1991.\[Wedekind, 1988\] Wedekind, J.
Transfer by Projec-tion.
Ms., University of Stuttgart, 1988.tainty constraint((FU ~,(T susJ)) ARC+ FU) =~ "(l On J)which can, appropriately annotated, be used in thegrammar to enforce directly wide scope of the subjectis just a simple example of the form of a constraintcontained in such a system.References\[Bresnan et al, 1982\] Bresnan, J., R. Kaplan, S. Pe-ters, and A. Zaenen.
Cross-serial Dependencies inDutch.
Linguistic Inquiry 13,613-635, 1982.\[Dalrymple etal., 1990\] Dalrymple, M., J. Maxwell,and A. Zaenen.
Modeling Syntactic Constraintson Anaphoric Binding.
In Proceedings ofthe 13thInternational Conference on Computational Lin-guistics.
Helsinki, 1990.\[Halvorsen, 1987\] Halvorsen, P.-K. Situation Seman-tics and Semantic Interpretation i Constraint-based Grammars.
CSLI Report No.
87-101.
Stan-ford University, 1987.ings of the grammatical functions.
(If we would e.g.
useAx(ona'(love'(r))) asthe a-value for 'love', we would al-ways get wide scope of the subject.
)411
