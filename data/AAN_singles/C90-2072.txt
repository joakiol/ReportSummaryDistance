An Efficient Implementat ion of PATRfor Categorial Unif ication GrammarTodd YampolStanford UniversityLauri KarttunenXerox PARC and CSLI1 Int roduct ionThis paper describes C-PATR, a new C im-plementation f the PATR-II formalism \[4, 5\]for unification-based grammars.
It includesinnovations that originate with a project fordeveloping an efficient translator from En-glish to first-order logic \[2\], most notably theextension of the standard unifcation algo-rithm for list values \[section 3\].
In additionthe unifier and a chart parser tuned for cate-gorial grammars, the system (C-PATR) con-tains a set of tools necessary for grammardevelopment.
These tools include facilitiesfor hier,~rehical lexicon design and interactivegrammar debugging \[section 4\].2 Grammar  Fo~:ma~ism2.1 PATR-I\]\[ as implementedin C -PATRPATR-II is a formalism for describing ram-mars in terms of feature structures.
C-PATR supports two equivalent notationalsystems for representing feature structures,path equations and attribute-value matrices.Path equations can be used to define a hier-archical system of templates \[section 4\] thatencode linguistic generalizations.
Internally,feature structures as are represented as di-rected graphs (DGs).
PATR-style featurestructures are capable of describing a widevariety of unification-based grammars.
Thepresent version of C-PATR is designed tosupport only pure categorial grammars.
Itdoes not support the use of explicit phrasestructure rules, thus C- PATR is not an ex-haustive implementation f PATR.2.2 Categor ia l  g rammars  as features t ructuresA categorial grammar represents yntacticrelations in a completely lexical fashion, i.e.without explicit phrase structure rules.
Lex-ical items belong to basic or functor cate-gories.
A basic category is inert, in that itdoes not seek to combine with other cate-gories.
Functor categories perforln the bulkof the work by actively seeking to combinewith other categories.
A functor categoryspecifies the category of its argument, a direc-tion in which to search for the argument, andthe category of the result that is produced byapplying the functor to its argument.
Withonly this simple machinery, it is possible todescribe a wide range of syntactic phenom-ena.In C-PATR, basic categories are those withNONE as the value of the argument at-tribute.
(NONE is a regular atomic valuethat is given special status by the parser.
)Functor categories must have values speci-fied for the argument, direction, and resultattributes (see Figure 1).The parsing algorithm manages the forma-tion of constituents hrough the applicationof functors to their arguments \[see section3\].
The argument and result attributes cancontain information other than simple cate-gory designations.
For example, the samplegrammar in the appendix uses these slots toplace constraints on the argument, o pass in-formation from the argument to the functor,and to construct a semantic representation.cat:N \]argument:NONEJFigure 1: Traditional categorial descriptionsargument: \[ cat:NP\]\]direction:leftresult:\[ cat:S\] Jof Noun (basic) and V-intrans (a functor)3 Unification and ParsingAlgorithmsC-PATR offers two varieties of unification.
Astandard unification algorithm (adapted fromD-PATR \[1\]) is used in creating the internalrepresentation of a grammar, while a morecomplex algorithm featuring list unification\[see below\] is employed by the parser.
Theparser itself is a fairly standard active chartparser (also adapted from D-PATR).3.1 Opt imiz ing  pars ingand unificationFunction application is the only composi-tional technique used by C-PATRs parser.More powerful techniques such as functionalcomposition and type-raising are not used.In parsing a non-trivial sentence, hundredsof unifications are attempted, hence the datatypes and algorithms that C-PATR employsduring unification must be optimized in orderto achieve fficient parsing.
In order to per-form quick comparisons while keeping sym-bol names readily available, a symbol in C-PATR is designated to be the location inmemory of its print name, maintained on aletter tree, where each unique symbol-namehas only one entry.3.2 List unificationMerging partial information by unification isnot sufficient for the description of all thecorrespondences between syntactic and se-mantic representation.
A case in point isthe semantics of conjoined noun phrases \[2\].An appropriate semantic representation for asentence like b and c are small is aconjoinedformula, small(b) A small(c).
Such represen-tations cannot be derived by pure unification420because two instances of the logical predi-cate small with different arguments must beproduced from a single instance of the wordsmall.
The same difficulty arises with re-ciprocal pronouns (each other) and numeraldeterminers.
C-PATR solves this problemby extending unification to list values, withan effect that is similar to abstraction andlambda conversion in logic.
For example, aconjoined noun phrase, such as b and c, mayrequire that the verb phrase it combines withhas a list-valued semantic representation.
Ifthe verb phrase, such as are small, is not ofthat type, the unifier simply coerces the ar-gument o a list value thereby producing twocopies of its semantic translation.The algorithm for list unification is quitestraightforward.
(1) Two lists can be unifiedif they have the same number of elements,and if each corresponding pair of elements isunifiable.
(2) Two lists of unequal lengths arenot unifiable.
(3) To unify a list of length nwith a simple DG (non-list), coerce the non-list into a list by making n copies of the non-list, unifying each instance the non-list witha successive element of the list.
(4) If any sin-gle sub-unification fails, then the whole uni-fication fails.
In our system, list values arerepresented as feature structures using thespecial attributes first and rest (analogous toCAR and CDR in Lisp).3.3 Char t  ParserC-PATRs chart parser is a simplified versionof general chart parsing algorithm.
In a cat-egorial grammar, all constituents are formedfrom two pieces (a functor and an argument),thus the parser need only consider binaryrules.The parser includes a subsumption filter\[1\].
Just before an edge is added to thechart, the filter checks if there are any iden-tical edges spanning the same nodes as thecandidate dge.
If there are any such edges,then the duplicate dge is not placed on thechart.
Subsumption checking eliminates re-dundant analyses, and improves parsing effi-ciency :for grammars that have many differ-ent ways to reach the same analysis.
When amore complete parsing record is desired, thesubsumption filter can be toggled off.4 Spec ia l  Features4.1 Hierarchica l  exicon designC-PATR allows the user to specify a gram-mar in terms of a hierarchical system of tem-plates.
The grammar is divided into twoparts, a set of templates and a set of lexicalentries.
Each template consists of a name(designated by an Q-sign) followed by a setof explicit path equations and references toother templates \[see Appendix A\].
The pathequations are compiled into directed graphs.When a template is referred to within an-other template definition the latter inheritsthe path equations of the former.
The samplegrammar makes use of template inheritancein the entries for @Vtrans,  @Ga, and @O\[see Appendix\].
A template can also be usedin a path equation (as in the sample gram-mat's entries for @V\Vstem and @Part i -cle) to define a complex value.The format of the lexicon file is identicalto that of the template file except that thelabels for lexical entries do not begin with@-signt~.
While a number of path equationsusually constitute the body of a template,a typical lexical entry contains few explicitpath equations.
If a set of templates is wellconstructed, the list of template names men-tioned in a lexical entry constitutes a mean-ingful high-level description of the word.
\[seeAppendix B\].
Path equations mentioned ina lexical entry should describe only the id-iosyncratic properties of the word.
The formof the entry is automatically assigned to theattribute lez unless specified otherwise.4.2 Interact ive  grammar  debuggingand lexicon compi l ingIn designing a grammar, the user specifiestemplates or expanded lexical entries withina text file.
C-PATR then compiles the textinto an internal representation for the parser.This compilation task has been optimized toallow for reasonable interactive grammar de-velopment and debugging on small personalcomputers.
On a Sun- 4, a 100K sourcegrammar compiles into a 140K binary form in5 seconds.
On a Mac-II, the same task takes30 seconds.
To improve the grammar loadingefficiency on the Macintosh, C-PATR pro-vides a facility for pre-compiling the gram-mar.
The Mac resource file created by pre-compilation loads in less than 2 seconds.4.3 Services provided by C -PATRC-PATR is driven by single character com-mands.
These are summarized in Figure 2:Type a sentence to parse or:n to see contents of edge number nb to run a batch testf to toggle subsumption filter1 to view lexical entries for a wordm to view a micro-dump of chart1 to load a new lexicono to specify an output filep to review phrase that was parsedq to quitt to toggle result print formats to view a short dump of chartt to view logical translation(s)u to unify two arbitrary edgesv to toggle variable stylew to list wordsx to view extra long chart dumpz to zap expanded lexicon to a fileFigure 2: C-PATR command summary34215 ConclusionC-PATR has advantages in size, speed, andportability over its predecessors.
By choos-ing C as our implementation language, wegained in all three areas.
Earlier PATR im-plementations, written in Lisp and Prolog,require the high overhead of an interpreter.C- PATRs 135k of source code compiles intoa 58k stand-alone application on the Mac,and an 82k stand-alone on the Sun-4.
C-PATR is an order of magnitude faster thanD-PATR.
C-PATR has been compiled on theMacintosh and on various Unix systems.There are currently plans to enhance C-PATRs existing syntactic omponent with atwo-level morphological analyzer \[3\].
Thesample grammars treatment of yonda \[seeAppendix\] is an example of how one mightmake use of morphologically analyzed forms.C-PATR is available through the Centerfor the Study of Language and Informationat Stanford.AcknowledgementsThank,~ to the Center for the Study of Lan-guage and Information and the SymbolicSystems Program for their generous upportof this project.
Also, thanks to Dorit Ben-shalom for offering many valuable sugges-tions that directly influenced the design ofC-PATR.Bibliography\[1\] Karttunen, Lauri, D-PATR, A developmentenvironment for unification-based gram-mars, Report No.
CSLI-86-81, Center forthe Study of Language and Information,Stanford, California, 1986.\[2\] Karttunen, Lauri, Translating from Englishto Logic in Tarski's World, In the Proceed-ings of of ROCLING-II, September 22-24,Sun- Moon Lake, Taiwan, 1989, pp 43-72.\[3\] Koskenniemi, Kimmo, Two-Level Morphol-ogy: A General Computational Model forWord-Form Recognition and Production,Publications No.
11, Department of Gen-eral Linguistics, University of Helsinki,Helsinki, Finland, 1983.\[4\] Shieber, Stuart, An Intro-duction to Unification-based Approaches toGrammar, CSLI Lecture Note Series, Vol-ume 4, Chicago University Press, Chicago,Illinois, 1986.\[5\] Shieber, Stuart, Parsing and Type Infer-ence for Natural and Computer Languages,Technical Note 460, Stanford Research In-ternational, Menlo Park, California, 1989.Appendix: Grammar fora fragment of Japanesecreated in C-PATRA Templates for Japanese@Basic<argument> = NONE.
@Functor-left<direction> = left.
@Functor-right<direction> = right.
@V@Basic<cat> = Vstem<semantics pred> = <lex> .
@Vtrans@V<syntax ga> -- <semantics agent><syntax o> -- <semantics theme>.4224@V\Vstem(~Functor-left, :cat> = V\Vstem<argument cat> = Vstem,:result> = @Basic<:result cat> = V,:result morphology> = <morphology>,:result syntax> = <argument syntax>,:result semantics> =<argument semantics> .
@Past <morphology tense> = past.
@Informal <morphology level> = informal.
@Noun@Basic<cat > : N<:semantics ind> = <lex> .
@Particle@tihnctor-left<:cat> : Particle<:argument cat> :: N<:result cat> :- NP<:result> = @Functor-right<result argument cat> ::: V<:result result> = @B~:~sic<:result result cat> =<result argument cat><:result result semantics> =<result argument semantics><:result result morphology> =<result argument morphology> .
@Ga@Particle<:result argument syntax ga> :< argument semantics ind><:result result syntax ga> : filled<:result result syntax o> :<result argument syntax o> .
@O@Particle<:result argument syntax o> =<argument semantics ind><result result syntax ga> =<result argument syntax ga><:result result syntax o> = filled.B Unexpanded lexical entriesjohn @Noun.hon @Noun.ga @Ga.o QO.yom@Vtrans<lex> = yomu.-ta@V\Vstem@Past@Informal.C Sample expanded entryfor the particle gacat:Particleargument: semantics: \[Ldirection:leftcat:NPargument:cat:Vmorphology:#2syntax: \[ ga:#l \ ]  o:#3 jsemantics:#4result: direction:rightresult:cat:Vmorphology:#2syntax: \[ o:#3ga:filled\]\]semantics:#4argument:NONElex:ga54231-) Sample  C -PATR sess ionWelcome to C-PATR!lexicon type:1. templates (.tem file)2. expanded lexicon (.xlx file)- .
->1What is the template file?
coling.temWhat is the lexicon file?
coling.lexLoading attribute ranking ........... done- templates -#.Basic#.Functor-left#.Functor-right#-V#.Vtrans#.VkVstem#.Past#.Informal#.Noun#-Particle#-Ga#-O- lexical items -johnhongaOyom-ta:, john ga hon o yom -ta\[john read a book.
Note that yonda has beenmorphologically analyzed.\]john ga hon o yom -tanumber of parses: 10.100 seconds11 edges, 31 dgs, 79 avs>m\[C-PATR command to list the span of eachedge\]0. john1.
ga2.
john ga3.
hon4.05.
hon o6.
yom7.
-ta8.
yom-ta9.
hon o yom -ta10.
john ga hon o yom -ta>10\[C-PATR command to display edge #10,which contains the parse\]content:\[cat:Vmorphology:\[levehinformaltense:past\]syntax: \[ga:filledo:filled\]semantics:\[pred:yomuagent:johntheme:hon\]argument:NONE\]parse tree:V\[NP\[N<john>Particle<ga>\]V\[NP\[N<hon>Particle<o>\]V\[Vstem<yom>V\Vstem<-ta>\]\]\]>qbye!424 6
