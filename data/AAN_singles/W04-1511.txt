From a Surface Analysis to a Dependency StructureLu?
?sa CoheurL2F INESC-ID / GRILLisboa, PortugalLuisa.Coheur@l2f.inesc-id.ptNuno MamedeL2F INESC-ID / ISTLisboa, PortugalNuno.Mamede@inesc-id.ptGabriel G. Be`sGRIL / Univ.
Blaise-PascalClermont-Ferrand, FranceBesGabriel@yahoo.frAbstractThis paper describes how we use the arrowsproperties from the 5P Paradigm to generatea dependency structure from a surface analy-sis.
Besides the arrows properties, two mod-ules, Algas and Ogre, are presented.
Moreover,we show how we express linguistic descriptionsaway from parsing decisions.1 IntroductionFollowing the 5P Paradigm (Be`s, 1999; Hage`ge,2000; Be`s and Hage`ge, 2001) we build asyntactic-semantic interface which obtains agraph from the analysis of input text.
Thegraph express a dependency structure, which isthe domain of a function that will obtain as out-put a logic semantic interpretation.The whole syntactic-semantic interface is in-tegrated by four modules: Susana in chargeof surface analysis, Algas and Ogre, definingthe graph, and ASdeCopas, that obtains thelogic semantic representation.
In this paperwe present the first three modules, focussingmainly on Algas and Ogre.5P argues for a carefully separation betweenlinguistic descriptions and algorithms.
The firstones are expressed by Properties and the lastones by Processes.
Futhermore, linguistic mod-elised and formalised descriptions (i.e.
Prop-erties, P2 of 5P) are not designed to be thedeclarative source of algorithms, but rather asa repository of information (Hage`ge and Be`s,2002) that one should be able to re-use (to-tally or partially) in each task.
Following andcompleting this, we assume that the parsing is-sue can be viewed from at least three differentpoints of view: (i) modelised and formalisedlinguistic observation; (ii) computational effec-tive procedures; (iii) useful computational con-straints.
These three aspects of the same issueare distinctly tackled in the proposed syntactic-semantic interface, but they converge in the ob-tention of results.There are three different kinds of Properties(P2) in 5P: existence, linearity and arrow prop-erties.
The first two underly the Susana module(3.1).
They express which are the possible mor-phological categories of some expression and thepossible order between them.
The third onesarrow properties specify arrow pairs, which for-mally are directed arcs of a graph.
Arrow prop-erties underly the Algas (3.2) and Ogre (3.3)modules.
At the level of Projections (i.e.
P3of 5P) the balanced parentheses structure un-derlying sentences is exploited (2).
Computa-tional useful constraints improve Algas perfor-mance (5).2 Arrow propertiesThe motivation behind an arrow property is toconnect two elements, because the establishedrelation is needed to reach the desired semanticrepresentation (Be`s, 1999).
Notice that this for-malism can be applied to establish dependencieseither between words, chunks or phrases.
Nev-ertheless, arrows can be seen as dependenciesbut, contrary to the main dependency theories,an arrow is not labeled and go from dependentsto the head (Hage`ge, 2000).Let C be the set of category labels available,M the set of chunk labels, P a set of phraselabels and I a set of indexes.Arrow Property: An arrow property is atuple (X, n, Z, Y, m, R+, R?)
noted by:Xn ?Z Ym,+R+-R?where:?
X, Y ?
M ?
C (X is said to be the sourceand Y the target of the arrow);?
Z ?
M ?
P (the segment labeled Z containsX and Y);?
R+, R?
are sets of constraints over the ar-rows (respectively, the set of constraintsthat Z must verify, either positive ones(R+) on symbols which must be attested ornegative ones (R?)
on symbols which mustnot occur);?
n, m ?
I.Both R+, R?
impose simple constraints overthe arrows, such as symbols that should orshould not occur within Z or linear order re-lations that should be satisfied between its con-stituents.
As an example, the following ar-row property says that within an interroga-tive phrase (Pint), an interrogative chunk (IntC)with an interrogative pronoun inside (pint) ar-rows a nominal chunk (NC) on its right (i ?k), as long as there is no other nominal chunkbetween them (i ?
j ?
k).IntCi({pint}/) ?Pint NCk-{NCj}A more complex type of constraint is the?stack?
constraint (Coheur, 2004).
This con-straint is based on the linguistically motivatedwork over balanced parentheses of (Be`s andDahl, 2003; Be`s et al, 2003).
Briefly, theidea behind that work is the following: givena sentence, if we introduce a left parentheseseverytime we find a word such as que(that),se(if ), ...) ?
the introducers ?
and a rightparentheses everytime we find an inflectedverbal form1, at the end of the sentence, thenumber of left parentheses is equal to thenumber of right ones, and at any point of it,the number of left ones is equal or greaterthat the number of right ones (Be`s and Dahl,2003).
In (Be`s and Dahl, 2003), they use thisnatural language evidence in order to identifythe main phrase, relatives, coordinations, etc.Within our work, we use it to precise arrowingrelations.
For example, consider the sentenceQuais os hote?is que te?m piscina?
(Which arethe hotels that have a swimming pool?
).
Thesurface analysis of this statement results in thefollowing (where VC stands for verbal chunk):(Quais)IntC (os hote?is)NC (que)RelC(te?m)V C (piscina)NCTypically the NC os hote?is arrows the mainVC, but in this situation, as there is no main VCwe want it to arrow itself.
Nevertheless, there isan arrow property saying that an NC can arrowa VC, which applied to this particular situation1See (Be`s and Dahl, 2003) for details about how todeal with coordination.would establish a wrong dependency (Figure 1).Figure 1: Wrong dependencyRoughly, we use the stack constraint that saysthat an NC arrows a VC if the stack of introduc-ers and flexioned verbs is empty between them2:NCi ?S VCk+{stackj = [ ]}As a result, if we consider again the exampleQuais os hote?is que te?m piscina, the NC hote?iswill not arrow the VC te?m, because the stackconstraint is not verified between them (thereis only the introducer que).3 Reaching the dependencystructure3.1 Surface analysisFrom existence and linearity properties (P2of 5P) specifiyng chunks, it can be deducedwhat categories can or must start a chunk,and which ones can or must be the last one.Drawing on this linguistic information, chunksare detected in a surface analysis made bySusana (Batista and Mamede, 2002).
As anexample, consider the question Qual a maiorpraia do Algarve?
(Which is the biggest beachin Algarve?
).
Susana outputs the followingsurface analysis (where PC stands for preposi-tional chunk):(Qual)IntC (a maior praia)NC (do Al-garve)PC (?
)Ponct3.2 AlgasAlgas is the C++ program responsible for con-necting chunks and the elements inside them,taking as input a structure that contains infor-mation from arrow properties and also informa-tion that can limit the search space (see section4 from details about this).
Additionally, as in-side the majority of the chunks all the elementsarrow the last element (the head), the user candeclare which are the chunks that verify thisproperty.
As a result, no calculus need to bemade in order to compute dependencies insidethese chunks: all its elements arrow the last one.This possibility is computational very usefull.2In fact, this restriction is a little more complicatedthan this.Continuing with our example, after Algas ex-ecution, we have the output from Figure 2.Both the IntC and the PC chunks arrow theNC and inside them, all the elements arrow thehead.Figure 2: Algas?s output.Algas is able to skip unalyzable parts of asentence, but (for the moment) some constraintsare made to its output:(1) There is at most an element arrowing itself,inside each chunk;(2) Cycles are not allowed;(3) Arrow crossing is not allowed (projectiv-ity);(4) An element cannot be the target of an ar-row if it is not the source of any arrow.Notice that these constraints are made insidethe program.
Notice that, in particular the pro-jectivity requirement is not imposed by 5P.
Weimpose it, due to the fact that ?
for the moment?
we are only dealing with written Portuguese,that typically respects this property.3.3 OgreAfter Algas, the text is processed by Ogre, apipeline of Perl and XSLT scripts, that gener-ates a graph from the arrowed structures pro-duced by Algas3.
This process is based on thefollowing: if a chunk arrows another chunk, thehead of the first chunk will arrow the head ofthe second chunk, and the chunk label can beomitted.Continuing with our example, after Ogre wehave the graph of Figure 3 (a dependency struc-ture).
Basically, IntC and PC head ?
respec-tively qual and Algarve ?
arrow now the NChead.Figure 3: Ogre?s output.3Arrowed structures produced by Algas can also beseen as a graph, having nodes containing graphs.It might seem that we are keeping away infor-mation in this step, but the new arrowing rela-tion between chunk heads keeps the lost struc-tures.
Beside, as information about the direc-tion of the arrows is kept, and the position ofeach word is also kept in the graph, we arestill able to distinguish behaviours dependenton word order for the following semantic task.That is, both semantic relations and word orderare kept within our graph.Ogre?s motivation is to converge differentstructures into the same graph.
For example,after Ogre?s execution O Ritz e?
onde?, E?
ondeo Ritz?
and Onde e?
o Ritz?, they all share thesame graph (appart from positions).4 From descriptions to thealgorithm input structuresIn order to keep descriptions apart from pro-cessing, arrow properties and Algas input struc-tures are developed in parallel.
Then, arrowproperties are formally mapped into Algas in-put structures (see (Coheur, 2004) for details).This decision allowed us to add computationalconstraints to Algas input structures, leavingdescriptions untouchable.In fact, in order to reduce the search space,Algas has the option of letting the user controlthe distance between the source and the targetof an arrow.
This is particularly very usefullto control PP attachments (in this case PCattachments).
Thus, if we want a PC to arrowan NC that is at most n positions away, wesimply say:PC ?S NC [{NC <n PC}/]Notice that we could make an extension overthe arrow properties formalism in order to al-low this kind of information.
Nevertheless, itis well know that in natural language there isno fix distance between two elements.
Adding adistance constraint over arrow properties wouldadd procedural information to a repository re-sulting from natural language observations.5 ApplicationsBoth Algas and Ogre are part of a syntactic-semantic interface, where the module responsi-ble for the generation of logical forms is calledAsdeCopas (Coheur et al, 2003).
This interfacehas been applied in a semantic disambiguationtask of a set of quantifiers and also in questioninterpretation.Notice that, although arrows are not labeled,the fact that we know its source, target anddirection, give us enough information to find(or at least guess) a label for it.
In fact, wecould add a label to the majority of the ar-rows.
For example, using the link-types fromthe Link Grammar (Sleator and Temperley,1993; Sleator, 1998), if an adverb connects anadjective, this connection would be labeled EA,if an adverb connects another adverb, the la-bel would be EE.
AsdeCopas can be used toadd this information to the graph.
Neverthe-less, the fact that we are using an unlabelledconnection serves languages as Portuguese par-ticularly well.
In Portuguese, it is not 100% surethat we are able to identify the subject.
Forexample, we can say ?O Toma?s come a sopa.
?,?Come a sopa o Toma?s.
?, or even ?A sopa comeo Toma?s.?
having all the same (most probable)interpretation: Thomas eats the soup.
That is,there is no misleading interpretation due to ourknowledge of the world: a man can eat a soup,but a soup cannot eat a man.
As so, arrow prop-erties simply establish relations, and we leave tosemantic analysis the task of deciding what isthe nature of these relations.6 ConclusionsWe presented two modules ?
Algas and Ogre?
that build a dependency graph from a sur-face analysis.
Algas uses information from aformalism called arrows properties.
Neverthe-less this formalism is independent from Algasinput structures, that can be enriched with in-formation that limits the relations to establish.In the future we want the user to be able tocontrol the constraints over Algas output.
Thatis, the user will have the option to chose if out-put may contain arrows crossing or not.For the moment the Susana-Algas-Ogre mod-ules of the syntactic-semantic interface behavewithout problems in the domain of questioninterpretation.
They apply successfully to anelicited corpus of questions produced by N por-tuguese speakers which were asked to producethem simulating effective and natural questions.Our next step is to try to use them incremen-tally (A?
?t-Mokhtar et al, 2002).Also, another improvement will be over arrowproperties, as we want to organise them in ahierarchy.7 AcknowledgementsThis paper was supported by FCT (Fundac?a?opara a Cie?ncia e Tecnologia) and by ProjectPOSI/PLP/41319/2001 (FEDER).ReferencesSalah A?
?t-Mokhtar, Jean-Pierre Chanod, andClaude Roux.
2002.
Robustness beyoundshallowness: incremental deep parsing.
Nat-ural Language Engineering, pages 121?144.Fernando Batista and Nuno Mamede.
2002.SuSAna: Mo?dulo multifuncional da ana?lisesinta?ctica de superf??cie.
In Julio Gonzalo,Anselmo Pen?as, and Antonio Ferra?ndez, ed-itors, Proc.
Multilingual Information Accessand Natural Language Processing Workshop(IBERAMIA 2002), pages 29?37, Sevilla,Spain, November.Gabriel G. Be`s and Veronica Dahl.
2003.
Bal-anced parentheses in nl texts: a useful cuein the syntax/semantics interface.
In NacyWorkshop on Prospects and Advances in theSyntax/Semantics Interface.Gabriel G. Be`s and Caroline Hage`ge.
2001.Properties in 5P.
Technical report, GRIL,Universite?
Blaise-Pascal, Clermont-Ferrand,France, November.Gabriel G. Be`s, Veronica Dahl, Daniel Guil-lot, Lionel Lamadon, Ioana Milutinovici, andJoana Paulo.
2003.
A parsing system for bal-anced parentheses in nl texts.
In CLIN?2003.Gabriel G. Be`s.
1999.
La phrase verbal noyauen franc?ais.
In in Recherches sur le franc?aisparle?, volume 15, pages 273?358.
Universite?de Provence, France.Lu?
?sa Coheur, Nuno Mamede, and Gabriel G.Be?s.
2003.
ASdeCopas: a syntactic-semanticinterface.
In Epia, Beja, Portugal, Dezembro.Springer-Verlag.Lu?
?sa Coheur.
2004.
A interface entre a sin-taxe e a sema?ntica no quadro das l??nguasnaturais.
Ph.D. thesis, Instituto SuperiorTe?cnico, Universidade Te?cnica de Lisboa,Portugal, Universite?
Blaise-Pascal, France.work in progress.Caroline Hage`ge and Gabriel G. Be`s.
2002.
En-coding and reusing linguistic information ex-pressed by linguistic properties.
In Proceed-ings of COLING?2002, Taipei.Caroline Hage`ge.
2000.
Analyse SyntaticAutomatique du Portugais.
Ph.D. thesis,Universite?
Blaise Pascal, Clermont-Ferrand,France.Daniel Sleator and Davy Temperley.
1993.Parsing english with a link grammar.
In Pro-ceedings of the Third International Workshopon Parsing Technologies.Daniel Sleator.
1998.
Summary of link types.
