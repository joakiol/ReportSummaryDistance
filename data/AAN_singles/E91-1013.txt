AN EXTENDED LR PARSING ALGORITHMFOR GRAMMARS USING FEATURE-BASED SYNTACTIC CATEGORIESTsuneko NakazawaBeckman Institute for Advanced Science and TechnologyandLinguistics DepartmentUniversity of Illinois4088 FLB, 707 S. Mathews, Urbana, IL 61801, USAtsuneko@grice.cogsci.uiuc.eduABSTRACTThis paper proposes an LR parsingalgorithm modified for grammars withfeature-based categories.
The proposedalgorithm does not instantiate categoriesduring preprocessing of a grammar asproposed elsewhere.
As a result, itconstructs a minimal size of GOTO/ACTIONtable and eliminates the necessity of searchfor GOTO table entries during parsing.1 In t roduct ionThe LR method is known to be a veryefficient parsing algorithm that involves nosearching or backtracking.
However, recentformalisms for syntactic analyses of naturallanguage make maximal use of complexfeature-value systems, rather than atomiccategories that have been presupposed in theLR method.
This paper is an attempt oincorporate feature-based categories intoTomita's extended LR parsing algorithm(Tomita 1986).A straightforwmd adaptation of feature-based categories into the algorithm introducesthe necessity of partial instantiation ofcategories during preprocessing, of a grammaras well as a nontenmnat~on problem.Furthermore, the parser is forced to searchthrough instantiated categories for desiredGOTO table entries during parsing.
Themajor innovations of the proposed algorithminclude the construction of a minimal size ofGOTO table that does not require anypreliminary instantiation of categories or asearch for them, and a reduce action whichpe,forms instanliation tit)ring parsing.Some details of the LR parsing algorithmare assumed from Aho and Ullman (1987)and Aho and Johnson (1974), and moreformal definitions and notations of a feature-based grammar formalism from Pollard andSag (1987) and Shieber (1986).2 The LR  Pars ing  AlgorithmThe LR parser is an efficient shift-reduceparser with optional ookahead.
Parse u'eesfor input strings are built bottom-up, whilepredictions are made top-down prior toparsing.
The ACTION/GOTO table isconstructed during preprocessing of agrammar and deterministically guides theparser at each step during parsing.
TheACFION table determines whether the parsershould take a shift o1" a reduce action next.The GOTO table determines the state theparser should be in after each action.Henceforth, entries for the ACTION/GOTO table are referred to as the values offunctions, ACTION and GOTO.
TheACTION function takes a current state and aninput string to return a next action, andGOTO takes a previous tate and a syntacticcategory to return a next state.States of the LR parser are sets of dottedproductions called items.
The state, i.e.dotted productions, tored on top of the stackis called current state and the dot positions onthe right hand side (rhs) of the productionsindicate how much of the rhs the parser hasfound.
Previous tates are stored in the stackuntil the entire rhs, or the left hand side (lhs),of a production is found, at which time areduce action pops previous states andpushes a new state in, i.e.
the set of items- 69 -with a new dot position to the right, reflectingthe discovery of the lhs of the production.If a grammar contains two productionsVP~V NP and NP~Det N, for example, thenthe state sl in Fig.l(i) (the state numbers arearbiu'ary) should contain the items <VP-oV.NP> and <NP-~.Det N> among others, aftershifting an input string "saw" onto the stack.The latter item predicts strings that mayfollow in a top-down manner.slv(saw)(i)s4 I IN(dog) \]I s13 I NP(d,et(a)N(dog)) I Pet(a)v(saw) v(saw)?
o(ii) (iii)Figure 1: StacksAfter two morestrings are shifted, say "adog", and the parser encounters the end-of-a-sentence symbol "$" (Fig.l(ii)), the nextaction, ACTION(s4,$), should be "reduce byNP-~Det N".
The reduce action pops twostates off the stack, and builds a constituentwhose root is NP (Fig.l (iii)).
At this point,GOTO(sI,NP) should be a next state thatincludes the item <vP~v NP.
>.The ACTION/GOTO table used in theabove example can be constructed using theprocedures given in Fig.2 (adapted flom Ahoand Uliman (1987)).
The procedureCLOSURE coml~utes all items in each state,and the procedure NEXT-S, given a state anda syntactic ategory, calculates the next statethe parser should be in.procedure CLOSURE(I);beginrepeatfor each item <A~w.Bx> in I, and eachproduction B-oy such that <B-o.y> is notm I doadd <B~.y>to I;until no more items can be added to I;return 1end;procedure NEXT-S(I,B);for each category B in grammarbeginlet J be the set of items <A-,wB.x>such that <A~w.Bx> is in I;return CLOSURE(J)end;Figure 2.
CLOSURE/NEXT-S Proceduresfor Atomic CategoriesIt should be clear from the precedingexample that upon the completion of all theconstituents on the rhs of a production, theGOTO table entry for the lhs is consulted.Whether a category appears on the lhs or therhs of productions is a trivial question,however, since in a grammar with atomiccategories, every category that appears on thelhs also appears on the rhs and vice versa.On the other hand, in a grammar with feature-based categories, as proposed by most recentsyntactic theories, it is no longer the case.3 Construct ion of  the GOTO Tablefor Feature-Based Categories:A Pre l iminary  Modi f icat ionFig.3 is an example production usingfeature-based syntactic categories.
Thenotations are adapted from Pollard and Sag(1987) and Shieber (1986).
The tags \[~\],~-\] .... roughly correspond to variables oflogic unification with a scope of singleproductions: if one occurrence of a particulartag is instantiated as a result of unification, soare other occurrences of the same tag withinthe production.CAT V "1SUBCAT \[~\]/-oE II I-VIRST NNP TENSE \[~\] \[~\]NPFigure 3.
Example Production- 70 -Recm.
'sive applications of the productionassigns the constituent structure to strings"gave boys trees" in Fig.4.
The assumedlexical category for "gave" is given in Fig.5.TNS \[~\]PAST J\[" r FS T \[~\]N p " ~ ~  "~~, .
.
.
.
.~sc  171 FST NPLTNS F~PA ST~ ..\]F \[" FST\[i-\]NP ~ qq/ sc  / F FST E\]N P "l I Iv 1 /RST l~h,~T ~ I-FST NP'l I I I ~NP\[ L L .
.
.
.
t-:--I LRST NILJAA \[ \]LTNS ~IPAST  I ~ \[gave boys toysFigure 4.
Example Parse Tree/ YFST NPSC/RST / rFST NPL LRST tRs'r ~t.TNS PASTFigure 5.
Lexical Category for "gave"In grammars that use feature-basedsyntactic ategories, categories in productionsare taken to be underspecified: that is, theyare further instantiated through the unificationoperation during parsing as constituentstructures are built.
The pretenninal categoryfor "gave" in Fig.4 is the result of unificationbetween the lexical category for "gave" inFig.5 and the first category on the rhs of theproduction in Fig.3.
This unification alsoresults in the instantiation of the lhs throughthe tags.
The category for the constituent"gave boys" is obtained by unifying theinstantiated Ihs and the first category of therhs of the same production in Fig.3.
In orderto accommodate the instantiation ofunderspecified categories, the CLOSUREand NEXT-S procedures in Fig.2 can bemodified as in Fig.6, where ^ is theunification operator.procedure CLOSURE(I);beginrepeatfor each item <A~w.Bx> in I, and eachproduction C-)y such that C is unifiablewith B and <C^B~.y'> is not in I doadd <C^B--,.y'> to I;until no more items can be added to I;return Iend;procedure NEXT-S(I,C)for each category C that appears to the right; of the dot in itemsbeginlet J be the set of items <A-)wB.x> suchthat <A~w.Bx> is in I and B is unifiablewith C;return CLOSURE(J)end;Figure 6.
Preliminary CLOSURE/NEXT-SProceduresThe preliminary CLOSURE procedureUnifies the lhs of a predicted production, i.e.-71 -C~y, and the category the prediction is madefl'om, i.e.B.
This approach is essentiallytop-down l)rOl)agation of instantiated featuresand well documented by Shieber (1985) inthe context of Earley's algorithm.
A newitem added to the state, <C^B--,.
y'>, is notthe production C--,y, but its (partial)instantiation, y is also instantiated tobe y' asa result of the unification C^B if C and somemembers of y share tags.
Thus, given theproduction in Fig.3 and a syntactic ategoryv\[SC NiL\] to make predictions from, forexample, the preliminary CLOSUREprocedure creates new items in Fig.7 amongothers.
The items in Fig.7 are all differentinstantiations of the same production inFig.3.LTNS \[7\]F @.P17LTNs \[7\]RST NIL <LTNS \[~\]11 ?
v UJ \[RST NILI L'rNS \[~\]NP>s c \[ FST NP 1<V RST I_ RST NIL/LTNSF IISC / I- FST NP l / /V RST \[~\] FST NPLTNS Q\] .
JIi\]">Figure 7.
Items Created flom the SameProduction in Figure 3As can be seen in Fig.7, the procedurewill add an infinite number of differentinstantiations of the same production to thestate.
The list of items in Fig.7 is notcomplete: each execution of the repeat-loopadds a new item from which a new predictionis made during the next execution.
That is,instantiation of productions introduces thenontermination problem of left-recursiveproductions to the procedure, as well as tothe Predictor Step of Earley's algorithm.
Toovercome this problem, Shieber (1985)proposes "restrictor", which specifies amaximum depth of feature-based categories.When the depth of a category in a predicteditem exceeds the limit imposed by a restrictor,further instantiation of the category in newitems is prohibited.
The Predictor Stepeventually halts when it starts creating anewitem whose feature specification within thedepth allowed by the resu'ictor is identical to,or subsumed by, a previous one.In addition to the halting problem, theincorporation of feature-based syntacticcategories to grammars poses a new problemunique to the LR parser.
After the parserassigns aconstituent s ructure in Fig.4 duringparsing, it would consult he GOTO table forthe next state with the root category of theconstituent, i.e.
v i se  \[FST NP, RST NIL\],TNS PAST\].
There is no entry in the tableunder the root category, however, since thecategory is distinct from any categories thatappear in the items partially intstantiated bythe CLOSURE procedure.The problem stems fi'om the fact that thecategories which are partially instantiated bythe preliminary CLOSURE procedure andconsequently constitute the domain of theGOTO function may be still underspecified ascom.pared with those that arise duringparsing.
The feature specif ication\[TNS PAST\] in the constituent structure inFig.4, for example, originates from thelexical specification of "gave" in Fig.5, andnot from productions, and therefore does notappear in any items in Fig.7.
Note that it ispossible to create an item with the pm'ticularfeature instantiated, but there are a potentiallyinfinite number of instantiations for eachunderspecified category.Given the preliminary CLOSURE/NEXT-S procedures, the parser would haveto search in the domain of the GOTO functionfor a category that is unifiable with the root ofa constituem in order to obtain the next state,- 72  -while a search operation is never equired bythe original LR parsing algorithm.Furthermore, there may be more than onesuch category in the domain, giving rise tonondeterminism to the algorithm.4 Construction of  the GOTO Tablefor Feature-Based Categories:A Final ModificationThe final version of CLOSURE/NEXT-Sprocedures in Fig.8 circumvents thedescribed problems.
While the CLOSUREprocedure makes top-down predictions in thesame way as before, new items are addedwithout instantiation.
Since only originalproductions in a grammar appear as items,productions are added as new items onlyonce and the nontermination problem doesnot occur, as is the case of the LR parsingalgorithm with atomic categories.
TheNEXT-S procedure constructs next states forthe lhs category of each production, ratherthan the categories to the right of a dot.Consequently, from the lhs category of theproduction used for a reduce action, theparser can uniquely determine the GOTOtable entry for a next state, while constructinga constituent s ructure by instantiating it.
Nosearch for unifiable categories i  involvedduring parsing.procedure CLOSURE(I);beginrepeatfor each item <A-~w.Bx> in 1, and eachproduction C~y such that C is unifiablewith B and <C-~.y> is not in I doadd <C-~.y> to I;until no more items can be added to I;return 1end;procedure NEXT-S(I,C);for each category C on the lhs of productionsbeginlet J be the set of items <A~wB.x> suchthat <A-,w.Bx> is in I and B is unifiablewith C;return CLOSURE(J)end;Figure 8.
Final CLOSURE/NEXT-SproceduresNote, furthermore, the size of GOTOtable produced by the f inalCLOSURE/NEXT-S procedures is usuallysmaller than the table produced by thepreliminary procedures for the samegrammar.
It is because the preliminaryCLOSURE procedure creates one or moreinstantiations out of a single category, each ofwhich the preliminary NEXT-S procedureapplies to, creating separate GOTO tableentries.
Although a smaller GOTO table doesnot necessarily imply less parsing time, sincethere ale entry reu'ieval algorithms that do notdepend on a table size, it does mean feweroperations to construct such tables duringpreprocessing.5: Further Comparisons andConc lus ionThe LR parsing algorithm for grammarswith atomic categories involves no categorymatching during parsing.
In Fig.l,catego~;ies are pushed onto the stack only forthe purpose of constructing a paa'se tree, andreduce actions are completely independent ofcategories in the stack.
In parsing withfeature-based categories, on the other hand,the parser must perform unificationoperations between the roots of constituentsand categories on the rhs of productionsduring a reduce action.
In addition to en'orentries in the ACTION t~Dble, unificationfailure should result in an error also.
Sincecategories cannot be completely instantiatedin every possible way during preprocessing,unification operations during parsing cannotbe eliminated.
: What motivates partial instantiation ofpJ'oductions during preprocessing asis doneby the preliminary CLOSURE procedure,then?
It can sometimes prevent wrong itemsfrom being predicted and consequentlyincorrect reduce actions from entering into anACTION table.
Given a grammar thatconsists of four productions in Fig.9, thefinal CLOSURE procedure with an item<S~.
T\[F a\]> in an input state will add items<T\[F \['1"\]\]~.
T\[FtF I-i-I\]\] T\[F\[F b\]\]>.<T\[V\[V a\]\]~.
a> and <T\[F\[F b\]\]~.
b> to thestate.
After shift and reduce actions arerepeated twice, each to construct theconstituent in Fig.10(i), the ACTION tablewill direct the parse1; to "reduce by p2" to- 73 -construct T\[F E\]b\] (Fig.10(ii)), and then to"reduce by pi", at which time a unificationfailure occurs, detecting an error only after allthese operations.pl: S-,T\[F a\]p2: T\[F \[-i'\]\]~T\[F\[F I-i'll\]p3: T\[F\[F a\]\]-~ap4: T\[F\[F b\]\]~bT\[F \[F b\]\]Figure 9.
Toy GrammarT\[F \[-~b\]T\[F\[F b\]\] "r\[lv\[F b\]\] T\[F\[F E\]b\]\] T\[F\[F b\]\]I I i Ib b b b( i )  ( i i )Figure 10.
Partial Parse TreesOn the other hand, the preliminaryCLOSURE procedure with some restrictorwill add partially instantiated items<T\[F \[-i-\]a\]~.
T\[F\[F \[~\]a\]\] T\[F\[F b\]\]> and<T\[F\[F a\]\]-~, a>, but not <T\[F\[F b\]\]~.
b>.From an en'or enU-y of the ACTION table, theparser would detect an error as soon as thefirst input string b is shifted.Given the grammar in Fig.9, thepreliminary CLOSURE/NEXT-S proceduresoutperform the final version.
All grammarsthat solicit this performance difference ine~Tor detection have one property in common.That is, in those grammars, some featurespecifications in productions which .assignupper structures of a parse tree prohibitparticular feature instantiations in lowerstructures.
In the case of the above example,the \[F a\] feature specification i pl prohibitsthe first category on the rhs of p2 from beinginstantiated as T\[F\[F b\]\].
If the grammarwere modified to replace pl with pl': S~T,for example, then the prel iminaryCLOSURE/NEXT-S procedures will havenothing to contribute for early detection oferrors, but rather create a larger GOTO/ACTION lable through which otherwiseunmotivated search must be conducted forunifiable catcgories to find GOTO tableentries after every reduce action.
(With arestrictor \[CAT\]IF\[F\]\], the sizi~ of ACTION/GOTO table produced by the preliminaryprocedures i 1 l(states)x9(categories) with atotal of 52 items, while that by the finalprocedures i 8x7 with 38 items.
)The final output of the parser, whetherconstructed by the preliminary or the finalprocedures, is identical and correct.
Thechoice between two approaches dependsupon particular grammars and is an empiricalquestion.
In general, however, a cleartendency among grammars written in recentlinguistic theories is that productions tend tobe more general and permissive and lexicalspecifications more specific and restrictive.That is, information that regulates possibleconfigurations of parse trees for particularinput strings comes from the bottom of trees,and not from the top, making top-downinstantiation useless.With the recent linguistic trend of lexicon-oriented grammars, partial instantiation ofcategories while making predictions top-down gives little to gain for added costs.Given that run-time instantiation ofproductions is unavoidable to buildconstituents and to detect en'ors, theadvantages of eliminating an inte~mediateinstantiation step should be evident.REFERENCESAho, Alfred V, and Jeffrey D. Ullman1987.
Principles of Compiler Design.Addison-Wesley Publishing Company.Aho, Alfi'ed V. and S. C. Johnson 1974.
"LR Parsing" Computing Surveys Vol.6No.2.Pollard, Carl and Ivan A.
Sag 1987.Information-Based Syntax and SemanticsVoI.1.
CSLI Lecture Notes 13.
Stanford:CSLI.Shieber, S. 1985.
"Using Restriction toExtend Parsing Algorithms for Complex-Feature-Based Formalisms" 23rd ACLProceedings.Shieber, S. 1986.
An Introduction toUnification-Based Approaches to Grammar.CSLI Lecture Notes 4.
Stanford: CSLI.Tomita, Masaru 1986.
Efficient Parsingfor Natural Language: A Fast Algorithm forPractical Systems.
Boston: KluwerAcademic Publishers.- 74  -
