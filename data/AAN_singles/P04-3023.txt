On the Equivalence of Weighted Finite-state TransducersJulien QuintNational Institute of InformaticsHitotsubashi 2-1-2Chiyoda-kuTokyo 101-8430Japanquint@nii.ac.jpAbstractAlthough they can be topologically different, twodistinct transducers may actually recognize thesame rational relation.
Being able to test the equiv-alence of transducers allows to implement such op-erations as incremental minimization and iterativecomposition.
This paper presents an algorithm fortesting the equivalence of deterministic weightedfinite-state transducers, and outlines an implemen-tation of its applications in a prototype weightedfinite-state calculus tool.IntroductionThe addition of weights in finite-state devices(where transitions, initial states and final states areweighted) introduced the need to reevaluate manyof the techniques and algorithms used in classicalfinite-state calculus.
Interesting consequences are,for instance, that not all non-deterministic weightedautomata can be made deterministic (Buchsbaumet al, 2000); or that epsilon transitions may offsetthe weights in the result of the composition of twotransducers (Pereira and Riley, 1997).A fundamental operation on finite-state transduc-ers in equivalence testing, which leads to applica-tions such as incremental minimization and itera-tive composition.
Here, we present an algorithmfor equivalence testing in the weighted case, anddescribe its application to these applications.
Wealso describe a prototype implementation, which isdemonstrated.1 DefinitionsWe define a weighted finite-state automata (WFST)T over a set of weights K by an 8-tuple(?,?, Q, I, F,E, ?, ?)
where ?
and ?
are two fi-nite sets of symbols (alphabets), Q is a finite set ofstates, I ?
Q is the set of initial states, F ?
Q is theset of final states, E ?
Q???{?}???{?
}?K?Qis the set of transitions, and ?
: I ?
K and?
: F ?
K are the initial and final weight func-tions.A transition e ?
E has a label l(e) ?
??{?}???{?
}, a weight w(e) ?
K and a destination ?
(e) ?
Q.The set of weights is a semi-ring, that is a system(K,?,?, 0?, 1?)
where 0?
is the identity element for?, 1?
is the identity element for ?, and ?
is com-mutative (Berstel and Reteunauer, 1988).
The costof a path in a WFST is the product (?)
of the initialweight of the initial state, the weight of all the tran-sitions, and the final weight of the final state.
Whenseveral paths in the WFST match the same relation,the total cost is the sum (?)
of the costs of all thepaths.In NLP, the tropical semi-ring (R+ ?{?
},min,+,?, 0) is very often used: weightsare added along a path, and if several paths matchthe same relation, the total cost is the cost of thepath with minimal cost.
The following discussionwill apply to any semi-ring, with examples usingthe tropical semi-ring.2 The Equivalence Testing AlgorithmSeveral algorithms testing the equivalence of twostates are presented in (Watson and Daciuk, 2003),from which we will derive ours.
Two states areequivalent if and only if their respective right lan-guage are equivalent.
The right language of a stateis the set of words originating from this state.
Twodeterministic finite-state automata are equivalent ifand only if they recognize the same language, thatis, if their initial states have the same right language.Hence, it is possible to test the equivalence of twoautomata by applying the equivalence algorithm ontheir initial states.In order to test the equivalence of two WFSTs, weneed to extend the state equivalence test algorithmin two ways: first, it must apply to transducers, andsecond, it must take weights into account.
Handlingtransducers is easily achieved as the labels of transi-tions defined above are equivalent to symbols in analphabet (i.e.
we consider the underlying automatonof the transducer).Taking weights into account means that fortwo WFSTs to be equivalent, they must recog-nize the same relation (or their underlying au-tomata must recognize the same language), with thesame weights.
However, as illustrated by figure 1,two WFSTs can be equivalent but have a differentweight distribution.
States 1 and 5 have the sameright language, but words have different costs (forexample, abad has a cost of 6 in the top automaton,and 5 in the bottom one).
We notice however thatthe difference of weights between words is constant,so states 1 and 5 are really equivalent modulo a costof 1.0 1c/12a/1b/23/0d/24 5c/26a/2b/17/0d/0Figure 1: Two equivalent weighted finite-statetransducers (using the tropical semi-ring).Figure 2 shows the weighted equivalence algo-rithm.
Given two states p and q, it returns a truevalue if they are equivalent, and a false value other-wise.
Remainder weights are also passed as param-eters wp and wq.
The last parameter is an associativearray S that we use to keep track of states that werealready visited.The algorithm works as follows: given two states,compare their signature.
The signature of a state isa string encoding its class (final or not) and the listof labels on outgoing transition.
In the case of de-terministic transducers, if the signature for the twostates do not match, then they cannot have the sameright language and therefore cannot be equivalent.Otherwise, if the two states are final, then theirweights (taking into account the remainder weights)must be the same (lines 6?7).
Then, all their outgo-ing transitions have to be checked: the states willbe equivalent if matching transitions lead to equiva-lent states (lines 8?12).
The destination states arerecursively checked.
The REMAINDER functioncomputes the remainder weights for the destinationstates.
Given two weights x and y, it returns {1?,x?
y?1} if x < y, and {x?1 ?
y, 1?}
otherwise.If there is a cycle, then we will see the same pairof states twice.
The weight of the cycle must be thesame in both transducers, so the remainder weightsmust be unchanged.
This is tested in lines 2?4.The algorithm applies to deterministic WFSTs,which can have only one initial state.
To test theequivalence of two WFSTs, we call EQUIV on therespective initial states of the the WFSTs with theirinitial weights as the remainder weights, and S isinitially empty.3 Incremental minimizationAn application of this equivalence algorithm is theincremental minimization algorithm of (Watson andDaciuk, 2003).
For every deterministic WFST Tthere exists at least one equivalent WFST M suchthat no other equivalent WFST has fewer states (i.e.|QM | is minimal).
In the unweighted case, thismeans that there cannot be two distinct states thatare equivalent in the minimized transducer.It follows that a way to build this transducer Mis to compare every pair of distinct states in QA andmerge pairs of equivalent states until there are notwo equivalent states in the transducer.
An advan-tage of this method is that at any time of the appli-cation of the algorithm, the transducer is in a consis-tent state; if the process has to finish under a certaintime limit, it can simply be stopped (the number ofstates will have decreased, even though the mini-mality of the result cannot be guaranteed then).In the weighted case, merging two equivalentstates is not as easy because edges with the same la-bel may have a different weight.
In figure 3, we seethat states 1 and 2 are equivalent and can be merged,but outgoing transitions have different weights.
Theremainder weights have to be pushed to the follow-ing states, which can then be merged if they areequivalent modulo the remainder weights.
This ap-plies to states 3 and 4 here.01a/12b/13a/24a/1b/0 5/0c/1b/0 6/0c/20 1a/1b/12a/2b/03/0c/1Figure 3: Non-minimal transducer and its mini-mized equivalent.4 Generic Composition with FilterAs shown previously (Pereira and Riley, 1997), aspecial algorithm is needed for the composition ofWFSTs.
A filter is introduced, whose role is to han-dle epsilon transitions on the lower side of the toptransducer and the upper side of the lower trans-ducer (it is also useful in the unweighted case).
Inour implementation described in section 5 we havegeneralized the use of this epsilon-free compositionoperation to handle two operations that are definedEQUIV(p, wp, q, wq, S)1 equiv ?
FALSE2 if S[{p, q}] 6= NIL3 then {w?p, w?q} ?
S[{p, q}]4 equiv ?
w?p = wp ?
w?q = wq5 else if SIGNATURE(p) = SIGNATURE(q)6 then if FINAL(p)7 then equiv ?
wp ?
?
(p) = wq ?
?
(q)8 S[{p, q}] ?
{wp, wq}9 for ep ?
E(p), eq ?
E(q), l(ep) = l(eq)10 do {w?p, w?q} ?
REMAINDER(wp ?
w(ep), wq ?
w(eq))11 equiv ?
equiv ?EQUIV(?
(ep), w?p, ?
(eq), w?q, S)12 DELETE(S[{p, q}])13 return equivFigure 2: The equivalence algorithmon automata only, that is intersection and cross-product.
Intersection is a simple variant of the com-position of the identity transducers corresponding tothe operand automata.Cross-product uses the exact same algorithm buta different filter, shown in figure 4.
The prepro-cessing stage for both operand automata consists ofadding a transition with a special symbol x at everyfinal state, going to itself, and with a weight of 1?.This will allow to match words of different lengths,as when one of the automata is ?exhausted,?
the xsymbol will be added as long as the other automa-ton is not.
After the composition, the x symbol isreplaced everywhere by ?.0/0?
:?/0 1/0?:x/02/0x:?/0?
:x/0x:?/0Figure 4: Cross-product filter.
The symbol ??
?matches any symbol; ?x?
is a special espilon-symbol introduced in the final states of the operandautomata at preprocessing.The equivalence algorithm that is the subject ofthis paper is used in conjunction with compositionof WFSTs in order to provide an iterative com-position operator.
Given two transducers A andB, it composes A with B, then composes the re-sult with B again, and again, until a fixed-pointis reached.
This can be determined by testing theequivalence of the last two iterations.
Roche andSchabes (1994) have shown that in the unweightedcase this allows to parse context-free grammars withfinite-state transducers; in our case, a cost can beadded to the parse.5 A Prototype ImplementationThe algorithms described above have all been im-plemented in a prototype weighted finite-state tool,called wfst, inspired from the Xerox tool xfst(Beesley and Karttunen, 2003) and the FSM libraryfrom AT&T (Mohri et al, 1997).
From the former, itborrows a similar command-line interface and reg-ular expression syntax, and from the latter, the ad-dition of weights.
The system will be demonstratedand should be available for download soon.The operations described above are all avail-able in wfst, in addition to classical opera-tions like union, intersection (only defined onautomata), concatenation, etc.
The regular ex-pression syntax is inspired from xfst and Perl(the implementation language).
For instance, theautomaton of figure 3 was compiled from theregular expression (a/1 a/2 b/0* c/1) |(b/2 a/1 b/0* c/2) and the iterative compo-sition of two previously defined WFSTs A and B iswritten $A %+ $B (we chose % as the compositionoperator, and + refers to the Kleene plus operator).ConclusionWe demonstrate a simple and powerful experimen-tal weighted finite state calculus tool and have de-scribed an algorithm at the core of its operation forthe equivalence of weighted transducers.
There aretwo major limitations to the weighted equivalencealgorithm.
The first one is that it works only on de-terministic WFSTs; however, not all WFSTs can bedeterminized.
An algorithm with backtracking maybe a solution to this problem, but its running timewould increase, and it remains to be seen if suchan algorithm could apply to undeterminizable trans-ducers.The other limitation is that two transducers rec-ognizing the same rational relation may have non-equivalent underlying automata, and some labelswill not match (e.g.
{a, ?
}{b, c} vs. {a, c}{b, ?
}).A possible solution to this problem is to considerthe shortest string on both sides and have ?remain-der strings?
like we have remainder weights in theweighted case.
If successful, this technique couldyield interesting results in determinization as well.ReferencesKenneth R. Beesley and Lauri Karttunen.
2003.
Fi-nite State Morphology.
CSLI Publications, Stan-ford, California.Jean Berstel and Christophe Reteunauer.
1988.
Ra-tional Series and their Languages.
Springer Ver-lag, Berlin, Germany.Adam L. Buchsbaum, Raffaele Giancarlo, and Jef-fery R. Westbrook.
2000.
On the determiniza-tion of weighted finite automata.
SIAM Journalon Computing, 30(5):1502?1531.Mehryar Mohri, Fernando C. N. Pereira, andMichael Riley.
1997.
A rational design for aweighted finite-state transducer library.
In Work-shop on Implementing Automata, pages 144?158,London, Ontario.Fernando C. N. Pereira and Michael Riley.
1997.Speech recognition by composition of weightedfinite state automata.
In Emmanuel Roche andYves Schabes, editors, Finite-State LanguageProcessing, pages 431?453.
MIT Press, Cam-bridge, Massachusetts.Emmanuel Roche and Yves Schabes.
1994.
Twoparsing algorithms by means of finite state trans-ducers.
In Proceedings of COLING?94, pages431?435, Kyo?to?, Japan.Bruce W. Watson and Jan Daciuk.
2003.
An effi-cient incremental DFA minimization algorithm.Natural Language Engineering, 9(1):49?64.
