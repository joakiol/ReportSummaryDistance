A Dutch to SQL database interface usingC4cnc, elized Quantifier Theory\])irk Spce lmml  \[I\] (\]ccri; Adr iaens  \[1'2\]\[1\] Un ivers i l y  of l ,cuvcn (Jcnl;er \[or Comput~t iona l  , inguisi; ics,B l i jdc - Inkomstst ra .~t  21, 3000 l ,cuven,  Be lg ium\[2\] Sicme:ns-Nixdorf  Sof tware Cent re  Lib.ge,Rue  des lJ'orics 2, 4020 Lib.ge, Be lg iumAbst rac tThis paper presents the treatment, of quantitication asit was imI)lemented in a prototyl)c of a natural lan-guage relational database interface for l)utch 1.
It isshown how the theoretical 'generalized (tuantifier' ap-l ) ;tratlts introduced in formM semantics by Barwiseand (\]oot)er can be I, uned to irrq)lementational feasi-" ( bility.
(,ompm ~d to the t, raditional tl'(~atl'flellt of (luan -tilication, tile alternative l)rcs('nted here offers gre;tl;erext)ressive l)ower, great,re' similarity to natural lan-guage and, as ~t consequoxmo., the possibility o\[' a morestraighl,forward tral,slation from natural language totbrmal repres('.ntation.1 INTRODUCTIONIn the prototyl)e at hand, as in many database interfaces, the natural anguag(', input is translated go a con-ventional formal query language, viz.
,qQL, the mostwidely used and supported of these languages.
The re-sulting SQL queries can then be 1)asscd to an alreadyexisting SQL interpreter.The translation i)roccdui:e fi'om Dutch to SQI,is spill, up in two (:OrlSCcutive trl~tior sl,eps, usinga logic-based itllierrrlediate sel/la.nLic represellta?ioncalled GonerM Sem~mtic l{epresentation (GSH.)
2.
Thefunctionality of' the whole database interface, includ-ing the SQI, interpreter, was seen as a straight, forwardimplementation f the fornial semantic Montague-style(Montague,197:l) mechamsm of indirect interpretat;ionof natural language (see Fig.
1).T INI,  - -b .
-C~Sl{ -  -~ 1)13NL i .
.
.
.
.
+ (}~{It .
.
.
.
.
-q~ SQI ,  - -  - -  ~ I )Bl!
'igure 1: Major processing steps in the I)B interface'Grafting' tbrmal semantic pro(:essing steps upon ~tnNI, datal)ase interface architecture has 1)een \[)r(>l)~-1 \[u this i>aper the actual iinl)lelnentation is not in focus (seeSl)eelman , 1992).2WiLh ln  a f rmnewor l?
o f  mach ine  I , r ;ms l ; t t i (m,  we c ;m say  1 l la l ,(-ISIt, is a kind of logic-based intcrlingua.gated and (succesflllly) worked out betbre in a somewhal, comparable project carried out at the universityof l,',ssex (see 1)e Pmeck, Fox, Lowden, Ttlrner gz Walls,1991).
The main concern in that project was to clearlyseparate domain (-- database) dependent semantic in-tbrmation t?om domain independent semantic informa-tion.
In the project presented he.re a similar but moregeneral ol/jective was to maximize the separation ofthe N LI ) data and filnctionality of the system fi:om itspurely database oriented data and fimctionality, GSRbeing the interface structure.13ntch ques l ionII 1 .....
I 1 .1.
NI, d&ta ~ 1, (If4l{ generat , , r  I I. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
t.  .
.
.
.
.
.
.
.
.
.
.
.
nC~SR expre~aioniT)rl -:*B ~s~ s2 gzK .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
t .
.
.
.
.
.
.
.
.
.
.
.
.I ) l lSI I .
query1.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
t .
.
.
.
.
.
.
.
.
.
.SQL  queryFigure 2: General architecture of the program'File main topic of this paper, treated in section 3,is the application of 'generalized quantitier theory' inGSR.
llaving become classical in mathematical andsome theoretical linguistic studies on quantification(SeC resp.
Mostowski, 1!
)57 and Barwise ,~z Cooper,1981), tile theory is now beginning to be appreciatedin A\[ (and NI,P) for its richness and flexibility.
Proba-bly the best illustration of this upcoming interc'st is theincorporation of 'generalized quantifiers' in the popu-lar (kmccI)tuat Graph knowledge represenl;ation for--realism (see e.g.
Sowa, 1991).
A somewhat differently7029oriented AI-application also using 'generalized quanti-tiers' can be found in (Kaan, Kas & Puhland, 1990).These applications concentrate on the expressive andinferential power of 'generalized quantifier theory' re-spectively.
The program presented here additionallyillustrates how the use of (a variant of) the theory re-duces the complexity of implementing {;he translationfrom natural to formal and artificial language.2 GSR:  GENERAL OUTL INEThe question what GSR should look like was to a l~rgeextent tackled in a very pragmatical way.
As far asthe linguistic module of the program is concerned, thefollowing criteria were formulated.
GSR had to be aformal representation(i) with sufficient expressive power so theft every possibly usefulquery can be formulated in it in a not too complex fashion,(ii) that is relatively easy to reach computationally, start ing offfrom natural language.A general observation is that, considering the kindof NL sentences one can expect as input to the system,GSR, inevitably had to differ from logical formalismssuch as the ones used in formal semantics (focussingon propositions).
In view of the general decision towork with intermediate, semantic expressions the de-notation of which is the answer to the NL questions,the basic types of complete xpressions listed in Pig.
3were found useful.
In this figure 9~ stands for an ar-bitrary proposition in some logical language L. Thee.xtension of L created by introducing these new typeswill be called L '.
(i) propositions (format: ?p), to be used when people ask yes-or-noquestions(ii) set expressions (format: {a~, \[ ~o}), to be used when people asknon-numerical identity questions(iii) mathematical  expressions (formFtt: #({~" \] go})), to be usedwhen people ask for nmnerieal informationFigure 3: GSR: types of expressions3 FROM DUTCH TO GSR3.1 ~ and V: problemsThe traditional.way of coping with quantification inNL database interfaces is by using _~ and V, the clas-sical first order predicate logic (PL) instrmnents (seee.g.
Warren & Pereira, 1982).
This approach, however,does not meet the criteria set out above.
To illustratethis, we basically rely on two observations Barwise &.Cooper (1981) made to show a fundamental differencein the natures of NL and PL.
Their observations will be'transposed' to the computational pplication at hand.The first observation is illustrated in figure 4, whichcontains ome Dutch questions attd their most naturalPL' counterparts.
Whereas the Dutch sentences havethe same syntactic structure, their PL' counterpartshave different formats.
These and many other exam-ples suggests that there is no trivially compositionMway of translating NL expressions to their nearest PL'equivalents.
The problem is thai; the quantiticationalinformation, which in NL has a fixed location, is spreadover the PL' expression in a seemingly arbitrary way.It may be concluded that criterium (ii) for a good GSRis violated.1 Zijn alle werknemers gehuwd ?
'Are all employees married?
'2 Zijn bcidc werknemers gehuwd?
'Are both employees married?
'~.~-ff~((,~ ?
~2)AVy(ert~plo~dec(y ) ~ ((y = Xl)V (y : 0C2)))Arnarried(:q ) A mar,'ied(x2))3 Zijn precies drie werknemers gehuwd?
'Are exactly three employees married?
'(:/"1 # '~2) A (a31 ?
"r:'3) A (:';2 ~;~ gJ3) A. .
.
.
p loyee(x  I ) a employee(z" 2 ) A errzployce(~: 3 )^Vy(( .
.
.
.
.
.
"icd(y) A employee(y ) )((y : Xl) V (y : "2) V (y = Xg))A. .
.
.
.
"ried(eo" l ) A .. .
.
.
.
.
ied(x2 ) A ...... "ried( a; 3 ) ) ) )4 Zijn rncer dan de helft van dewerkrlerners gehuwd7'Are more than half of the employees married?
'Figure 4: Translation of quantification from Dutch toPL'A second, more serious reason f'or the inadequacy ofE and V is that some forms of Nil, quantification (:artonly be expressed in a very complex way (e.g.
Fig.
4,examples 2 and 3) or simply cannot be expressed atall (e.g.
Fig.
4, example 4).
llere criterium (i) is notsatisfied.A third problem, mentioned in Kaan, Kas & Puh-land (1990), is that in practice, e.g.
in implementa-tions, one is tempted to make rough translations, andto neglect nuances or strong conversational implica-lures in natural language, when one is limited to 3and V. So, for instance, in Warren & Pereira (1982)%', 'some' and 'the' all are simply interpreted as ~.3.2 L(GQ)': a solutionThere are many ways to try atnl get around the short-comings of the traditional approach.
To score betteron criterium (i), i.e.
to increase expressive power, onecould consider the introduction of nnmbers in the log-ical formalism.
Only, one can imagine that, if made inan ad hoc way, this extension could result in a hybridformalism (with respect o quantification) showing aneven greater syntactical mismatch with NL (decreasingthe score on criterium ii).A solution for these probleins was first explored byMontague (1973), and later thoroughly worked out byBarwise & Cooper (1981)in a formalism called L(GQ).In contrast o traditionM Pfi, which only has 3 and V,the language of generalized qnantifiers L(GQ) speciliesno limitation of the number of primitives to expressquantification.
All kinds of del, erminers ('.an be used.The translation of the examples of Vig.
4 to L(GQ)'is given in Fig.
5.
Some special notational conven-tions Barwise & Cooper introduced, are left ont.
Fur-1030thermore ~t relal, ion~fl perspective (see Zw;u'ts, 1983) isl l sed.2:14Zi jn  al le werknemers gehuwd ?,u({~ I .... vlov~,(,:)), {* I ,,,,.,.i~d(x)})Zijn be|de  werknemcrs gehuwd?th~_~({,, I ~,,~vtow4:,:)}, {~ I ... .
.
.
, , i~a(x)})gijn precies drie werknemers gehuwd?e:t: act  ly Zl({a: I emptoyee(,:)), {a: I mar,'ied(.v)}-~Zijn meet dan de he l f t  wm dewerknemers gehnwd?r rzm'e_than_~.
2 tit({:,: I ..... .1o .
, ,4 .
: )} ,  {.,: I ...... , '~-,z(20)D _I?igure 5: Tr ;mslat ion o\[  ql~m21;ifical,ion from Dutch t.oI , ( ( \ ]q) 'The.
denotat ion of I , (GQ)'  determiners  is de.fined ~l;a meta--h',vel, Some (,xamples are given in (1) Co (/1).
12,these examples I s tands for m~ inl, erpreA, al;ion funcl;ionmNq)ing ~m expression on its de.notation.
"r, .
.
.
(it (x (v )  \ * (x) )  = ~) b )  ~(,11(~, x)) :: i,,,,~,~,~ (oth,,,'wi~;(0I ( t l  .
.
.
.
.
.
(q~,X) )  = Undef iTze .d  (if #(l(V~)) 7': ,z)~(,m(v,, x)) (,,th(,,.,,,i,~) (P')*(~:.,,(,~.ttu_,,(~o, x) )  = "r,..~ (if #(v  n x)  = ,*)?
Fa l se  (atherwise) (3)t( .
,o, .
,~.~ .
.
.
.
.
.
.
.
.
.
.
th (e ,  x) ) : :"~',.,,, (it #(/(w) r~ X(x))  > #( t (w) ) / , , )  (d)l , 'a lsc (ot, herwise)In Fig.
5 the sl;ructural similarity of the NI, expres-sions is |'eflected in that  of the I , (GQ)'  expressions.l;urthermore., all N l, e.xamples (;&II\[ le expressed almostequally easily in \[,(QQ)'.
By consequence, the formal-ism does not \[brce peol)le tel Ioe satisfied wil,h roughl;r~msl~l,ions.
In shorl;, 1;t1(; problems o\[' l, radil, ional log-ical quant, ifi(;ation are overcome.3.3 L(GQ)': complicationsUnfortnnately,  there are two reasons for not, consider-.ing I , (GQ)'  an ideal sohll, ion.
The first probhml ac-tual ly is not typic~d of I,(GQ), lml, of l;he fact thatB~rwise & COOl/er take over i;he Mont~Govian way ofcoping with I)ossible ambiguiW due to phenomena ofquanti l ier scope.
In these cases one reading is gener-;*ted in ~t straighl,forwa,rd way by H~rwise &, COOlmr.To allow for altern~ttive red,dings, they introduce extramachinery (called t,\]2o 'qumll, itieat;ion rule').'
l 'he  l~ttl, er iFleella, lliSlil~ howeve l ;  coiivelli(:l l~; \[1!o211 itl,heoretic?fl point of view, is rather imph~me~ntation-.unfriendly.
It Ol)eral;es ou coml)lete sl, ructural  de-scr ipt ions (=non-t;r ivial  trees), and generat,es comph'l,estrucl, urM descril/tions.
Allowing for such ;~ rule dras-tically changes the l)rolih~ of I, hc pm:ser thai; is needed.The second problem is (,h~l, il, is undesirable for GS It,being mt interface \[;mgm~ge with ;~ non NI,P me(hi lt ,to court,in the set of (NL instlircd ) det, erminers l;hal,I , (GQ)'  contains.
It wonld prol)~d)ly be I)el.ter it' GSt{had fewer primil Jves, prererably of a l,ype not com.plei;ely uncust, oma,ry in t radi t iomd I)I}MSs.3.4 GSR: an L(GQ)' derivativeAs a soluti(/n for these problems I , (GQ) '  gets two newneighbours in the 1,ransh~tion process, as shown inFig.
6.NI ,  - -  - - i k -  StI .
I  - - ~ , - -  b (G-q) ' - -  - - I~  ( \ ]S I tI"igure 6: Major processing steps in the, N I,P subsys.-\[,(JillIn order to avoid l,he N)pli(:~Ltion of the 'qu~mlJti-cation rule', th(; choice has been to first generate, anexpression that  is neul;ral wil, h resl)ect, l;o l, he SeOlle ofits quantifie.rs (SR.1), and then solve the scope I)rOt>lem in a second step, hereby generat ing m2 I , (GQ) '  ex~press|on.
The 1,rick of first ge.ne.rating a scope-neula'Mexpression is not new.
I,'or instance, it, is used in thel ,OQUl system (see Gailly, l~.ibb('.ns & Binot,  1990).The originality lies ral, her in the eflbrt to respect well--l'ormedne.ss iut, he scope-neutral  expre.ssions.hdbrn,a l ly  speaking, SILl is a llre.dieate-logic;fl or--realism in which the arguments  of the l lredicates ~Lre in-te.rnally structure.d as l;hl~ N \[, arguments  of verbs.
Themost imt)ort~mt (:onsequence is that  del;erminers are lo-cal,ed within the predi(:~fl;e-~rguments, q'o give an ex-ample, 'Werk('n alle werknemers a~m l,wee pro jekten?
'( l)o all employees work on two projects?)
wouhl berepresent;ed ;ts (5).
For idenl;il;y and cm:dinMil,y quest.ions l, he formats in gig.
3 ;~re rn~( le  SUl)ertluous bythe pseudo .
(M;ermin(:rs Wl l  and CARl ) .
For insl,ance,|;he quest,|e22 'Ue lke  werkt lem( ' .
r s  werke l l  aan  t,wee projekten? '
(Which e.mph}yees work on two projects?)
istranslated to (6)...... q:(all({a" I ....
ploy,.
'e(x)}), 2({~: I proj~:ct(x)})) (5)...... k(W//({~: I .
.
.
.
ployee(,v)}),  2({:c I p , 'o jeet (x)}) )  (Ci)The l, ranslation of NL l,o SI{1 is a sl, raightA'orwardeoint)ositionM process, compar~tbh'~ t,() the I}arwisc()oopcr processing of readings for which no 'quantif i-cation rule' is ne.eded.
The a lgor i thm lbr going fi'omSRI 1,o L(GQ)'  is given in l?ig.
7.If an S1{1 expression contains a pseudo-determinerW\]I or CAll.l), the schema in Fig.
7 is adapl;ed as follows.
In the first step the arguments  with reM deter-miners are replaced by w~rb~bles vl up to v~,, ~md thecial w~riable v0.
l!
'urther, |;he result ~o of the norm;flsecolld sl,(}l/ is IAil'l|ed into ;t se|, expression or ~t numer~i~ l  ,:xt,,:,~.~.io.
({,,,, I & A ~} ,l,: #({~,~ I ,v,, A ~}) )  'rhet, hird step, which is ~o-inl, ernal, remains unchanged.The essent;iM part  in Fig.
7 is l;he procedure that  d('te.rmines th(; possi/)le SCOlle-configur~tions.
In l;he pro-gl'a, lrl only one, I;he most I)robad)le scope-conligurat,ionis genexai;e(l. The algor i thm st~d, es that  <,he e~rliersome quantif ier occurs in I;he N l, e.xpression, the largerits s(:ol)e should be in the I , (GQ)'  expression.
In t, he1031P(D 1 (S 1 ), 02(S  2 ) .
.
.
.
.
D n(Sn ))tEvery argument Di(,~i) is replaced by a new, uniquevariable vi (i E {1,. .
.
.
.
})t. .
.p (~,v2 , .
.
.
, v ,O .
.
.tAn independent procedure is run to determine tim probable orpossible scope of the determiners.
The determiners are wrappedaround the initial proposition according to this scope.
Formallythe scope-determining procedure generates for every probable orpossible reading a permutation f of {1, .
.
.
,n}.t01(1) ( .
.
.D j ( .2 ) ( .
.
.D j ( , ) ( .
.
P (V l ,V2 , .
.
.
, v ,~) .
.
. )
.
.
. )
.
.
.
)tThe remaining lacunes are filled up by adding, as shown, toevery determiner 0 i  its original domain-set Si, and thevariable vi that was introduced before to replacel ) i (S i )  (i C {1 .
.
.
.
.
.
.
})tD t(1)(sj(t),.
{vf(t) I Ds(2)(sf(2), {vL(?)
I ;q;,01(n) (S l (n ) ,{V l (n  ) l~tV l ,~2, ' ' ' , v " )1 ) ' ' ' l )1 )Figure 7: Schema for translation fl:om SR.1 to L(GQ)'NL fragment hat was tested extensively with the pro-gram, this procedure proved to be amazingly accurate(see Specimen, 1992, 85 98).
The fllture goal, how-ever, is that instead of on(.'
most probable reading alist of all possible readings, tagged with a degree ofprobability, is generated.
Since the procedure is a sep-arate module, any extension or alteration of cat, bemade without affecting the rest of the program.What remains to be overcome, is the fact that intro-ducing a large set of determiners in GSH.
would burdenthe interpreters used it, the database subsystem withan extra, NLP-type recognition tank.
This problemis solved by giving L(GQ)' a righthand neigbonr (seeFi X.
6 in which the determiners are replaced by whatwas originally the recta-level definition of their seman-tics (see (1)-(4)).
In the resulting I,(GQ)' derivative,called GSR, the numl)er of primitives (set, set inter-section, set difference, set cardmality, ...) is drasticallyreduced.
Fnrthermore, the new primitives are muchcloser to, and even at the heart of, the procedural andsemantic building blocks of traditional computer sci-ence in general, and of relational DBMSs in particnlar.An example of the complete procedure, going fromSILl to L(GQ)' to (\]SP~, is given in (7) up to (9).
'\['hequestion is 'Zijn alle werknemers gehuwd?'
(Are allemployees married?
).all({:q l employee(:q)}, {xl lmarried(x,))) (8)4 FROM GSR TO SQLAs the NLP subsystem, the database subsystem ishillyimplemented.
However, we shall restrict ourselves toa very brief sketch of its functionality here.
As can beseen in Fig.
2, a GSH, expression is first translated to aformalism called I)BSIL This was clone for reasons ofmodularity, primarily for facilitating the extension ofthe system to dill?rent target languages.DBSR, which stands for DataBase specitic Seman-tic Representation, is a declarative relational databasequery language that is both close to GSR and eas-ily translatable to any of the commercialized \]{.I)BMSquery languages.
Apart from the treatment of quantifi-cation the formalism is very sffnilar to relational eah:n-lt, s. The major effort in the step fron, (\]S\[{ to I)BSRlies in adapting GSl{-terminology to concrete namesof tabels and columns of a database.
This is done us-ing a Dl3-1exicon, which can be seer, as an augmentedl~,t{-mode\] of a data/)ase.The last step, from I)BSR to SQL, is extremelystraightforward.
Sets and cardinality expressions aretranslated l,o (sub)qneries.
Relations between sets orcardinality expressions are.
translated to conditions for(sub)queries.For completeness, an example of the database sub-system ontlmt is given.
For the last example of theforegoing section a I)BSI{ expression and an SQI, queryare giver, in (10) and (11)respectively.
YES containsonly 'Yes'.
{:el I .... ployee(': l)} \ {':1 I a"l .rr'a?
'7"i('d = w\],J} = ~ (10)SFLECq ?
*Ft{OM YESWIIl';ll, l'3 NOT EXISTS( SI'~I,I'~C'F Xl.
*FII.OM t!
'MPI,OYI'~E X1WI,I'~RE NO'I' (X1.MAII.I(\[I'~D = 'q"))(11)5 IMPLEMENTATIONThe system is written in Common Lisp (according ;othe' de facto standard Steele,90) and generates tar>dard SQL queries (ISO).
It has prow'd to be a perfectlyportable product.
Originally written on a MacintosiSE/30, it has afterwards been tested on several Sym-belies, Macintosh and PC platforms.The major modules of the linguistic component area 'letter tree' tool for efficient communication with thelexicon, a transition etwork based morphological nal-ysis tool, and an augmented chart parser for syntacticand semantic analysis.6 CONCLUSIONIn some subfields of formal semantics the traditionallogical apparatus for quantification, i.e.
the use ofand V., is being abandoned in favor of 'generalizedquantifiers', because the latter are both ch)ser to nat-ural language and richer in expressive power.
In thistext it has been shown how this theory can he putto use in a natnral languagc database interface, another field ht which ~ and V had become traditional.Some modifications had to be made in order to l'on-der the theoretical 'generalized quantifier' approach7032more implementation-friendly.
The major moditica-I;ions were \[,he inl;roduction of a sepal:al;e module toreplace the 'quanl;ilication rule', and the shift, fromrnet;a-lew'J I;o logical representation of some settheo-retical primitfives.References\[1\] Ba,:wisc, J.
& (;ooper, IL (1981).
'(;<;neralizcdQuanl, ilicrs and Nal,nral Language'.
Linguistics andPhilosophy 4, 159-219.\[2\] (?odd, E.I ~.
(1!)70).
'A Data Sublanguagc Foundedon l, he Rdal;ional Calculus'.
AUM 5'IUI,'IDI,27 'Workshop on l)ala Description, Access and Control,November 1971.\[3\] l)c II.o<!ck, A.N., Fox, (L,1., 1,owden, I/.
(UI'., Tur--nor, II.. & Walls, I/.H,.
(1991).
'A Natural LanguageSysl.ern Based on Formal Semantics'.
Proceedings oflhe lnlernalional CoT@fence on (/urrcnt l.s.rues inCompulalional Linguistics.
268-281.\[4\] Gailly, P.J., l{,ibbens, 1).
& Binot, ,I .L.
(199(/). '
l ,a<tuanl, i ieation en Traitcment du Language Naturel'.\[5\] IS() '1'(797/8C21/W(;3 and ANSI X3H2 (1987).ISO 9075 Dalabasc Language SQL.\[s\] Ka~,~, E., Kas, M. ,~: Puht~,,d, ll.. (l~J!t0).
'f,;,'.n pro-cedure veer  l'ed()llel'(Hl l\[lel, kw~l, l l t ( ) re l l ' .
TABU I\]ul-lelin veer T<tahvete~z.schap 2(\] (4).
205 221.\[7\] Montague, H,.
(I.9TI).
'Tho l'rop<;r Treatment ofquantii ication in Or<linary l!
;nglish', llintikka J.,Moravcsik J.
& Suppes P.
(otis.)
Approache.s lo Nat-ur'al Language.
I)ordrcch\[; : H,eidel.
221-.242.\[8\] Mostowski, A.
(1957).
'On a (\]eneralization ofQnantitiers'.
1,'~tnd.
Math.
44, 12-36.\[9\] Sowa, J.F.
(19!)1).
'Towards the Expressive Powero\[ Natm:al Language'.
J F. Sowa (ed.
), I'ri'nciples ofScmanlic Net'work,~.
San Marco, (laliibrnia : MorganKaufinann.
157 189.\[10\] Spcelman, 1).
(1992).
l,;cn prototype voor ecnda?abase-interfacc in Lisp.
Vc'rtaling van Ncder'-landse w'agen naar SQL-queries, (?omlmtationa\[1,inguisti<'s Thesis, University of \],euven (in l)utch).\[11\] Steel<:', C;.L.
(1992).
Common Li,sl, : 7'he Lan-g'u<l<le.
Second Edition.
Digital Press : Be<tford MA.\[12\] Warren, I).ll.
& P<~reira, F.C.N.
(1982).
'An Efli-cicnl, Easily Adapl;al>le System for Interpreting N~tl,-ural Language Qu<;ries'.
American Journal of Com-lrulalional Linguistics 8.
110:\] 19.\[13\] Zwarts, F. (1983).
'Determiners: a relational per-spective'.
\['er Meulen (ed.)
,q'ludies in ModellheorelicSemantics.
I,'oris : I)ordrechl;.
37-62.1033
