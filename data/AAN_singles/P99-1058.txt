A semantically-derived subset of English for hardware verificationAlexander Holt and Ewan KleinHCRC Language Technology GroupDivision of InformaticsUniversity of Edinburghalexander, holt@ed, ac.
uk ewan.
kleinOed, ac.
ukAbstractTo verify hardware designs by model checking,circuit specifications are commonly expressed inthe temporal ogic CTL.
Automatic conversionof English to CTL requires the definition of anappropriately restricted subset of English.
Weshow how the limited semantic expressibility ofCTL can be exploited to derive a hierarchy ofsubsets.
Our strategy avoids potential difficultieswith approaches that take existing computationalsemantic analyses of English as their startingpoint--such as the need to ensure that all sentencesin the subset possess aCTL translation.1 Specifications in Natural LanguageMechanised formal specification and verificationtools can significantly aid system design in bothsoftware and hardware (Clarke and Wing, 1996).One well-established approach to verification, par-ticularly of hardware and protocols, is temporalmodel checking, which allows the designer tocheck 'that certain desired properties hold of thesystem (Clarke and Emerson, 1981).
In thisapproach, specifications are expressed ina temporallogic and systems are represented as finite statetransition systems?
An efficient search methoddetermines whether the desired property is true inthe model provided by the transition system; ifnot, it provides a counterexample.
Despite theundoubted success of temporal model checking asa technique, the requirement that specifications beexpressed in temporal logic has proved an obstacleto its take-up by circuit designers and thereforealternative interfaces involving raphics and naturallanguage have been explored.
In this paper, weaddress ome of the challenges raised by convertingl In practice, it turns out to be preferable to use a symbolicrepresentation f the state model, thereby avoiding the stateexplosion problem (Macmillan, 1993).English specifications into temporal ogic as aprelude to hardware verification.One general approach to this kind of task exploitsexisting results in the computational nalysis ofnatural language semantics, including contextualphenomena such as anaphora nd ellipsis, in orderto bridge the gap between informal specificationsin English and formal specifications in some targetformalism (Fuchs and Schwitter, 1996; Schwitterand Fuchs, 1996; Pulman, 1996; Nelken andFrancez, 1996).
English input sentences are initiallymapped into a general purpose semantic formalismsuch as Discourse Representation Theory (Kampand Reyle, 1993) or the Core Language Engine'squasi logical form (Alshawi, 1992) at which pointcontext dependencies are resolved.
The output ofthis stage then undergoes a further mapping intothe application-specific language which expressesformal specifications.
One system which departsfrom this framework is presented by Fantechi et al(1994), whose grammar contains pecial purposerules for recognising constructions that map directlyinto ACTL formulas, 2 and can trigger clarificationdialogues with the user in the case of a one-to-manymapping.Independently, the interface may require the userto employ a controlled language, in which syntaxand lexicon are restricted in order to minimiseambiguity with respect o the formal specificationlanguage (Macias and Pulman, 1995; Fuchs andSchwitter, 1996; Schwitter and Fuchs, 1996).
Thedesign of a controlled language is one methodof addressing the key problem pointed out byPulman (1996, p. 235), namely to ensure that anEnglish input has a valid translation into the targetformalism; this is the problem that we focus onhere.
Inevitably, we need to pay some attention to2ACTL is an action-based branching temporal logic which,despite the name, is not directly related to the CTL languagethat we discuss below.451SO v2SIFigure 1: A CTL structurethe syntactic and semantic properties of our target?
formalism and this is the topic of the next section.2 CTL Specification and Model CheckingWhile early attempts to use temporal ogics forverification had explored both linear and branchingmodels of time, Clarke et al (1986) showed thatthe branching temporal ogic CTL (ComputationTree Logic) allowed efficient model-checking inplace of laborious proof construction methods)In models of CTL, the temporal order relation <defines a tree which branches towards the future.As pointed out by Thomason (1984), branchingtime provides a basis for formalising the intuitionthat statements ofnecessity and possibility are oftennon-trivially tensed.
As we move forward throughtime, certain possible worlds (i.e., paths in the tree)are eliminated, and thus what was possible at t is nolonger available as an option at some t' later than t.CTL uses formulas beginning with A to expressnecessity.
AG f is true at a time t just in case fis true along all paths that branch forward from thetree at t (true globally).
AFf  holds when, on allpaths, f is true at some time in the future.
AXf  istrue at t when f is true at the next time point, alongall paths.
Finally, A\[ f  U g\] holds if, for each path,g is true at some time, and from now until that pointf is true.Figure I, from Clarke et al (1986), illustratesa CTL model structure, with the relation <represented by arrows between circles (states), andthe atomic propositions holding at a state being theletters contained in the circle.
A CTL structure givesrise to an infinite computation tree, and Figure 23Subsequently, model-checking methods which use lineartemporal logic have been developed.
While theoretically lessefficient hat those based on CTL, they may turn out to beeffective in practice (Vardi, 1998)./ \SI $2t LSO Sl/ \  1Sl $2 SOFigure 2: Computation treeshows the initial part of such a tree correspondingto Figure 1, when so is selected as the initialstate.
States correspond to points of time in thecourse of a computation, and branches representnon-determinism.
Formulas of CTL are either trueor false with respect to any given model; see Table 1for three examples interpreted at So in the Figure 1structure.3 DataOne of our key tasks has been to collect aninitial sample of specifications in English, so as toidentify linguistic constructions and usages typicalof specification discourse.
We currently have acorpus of around a hundred sentences, most ofwhich were elicited by asking suitably qualifiedrespondents todescribe the behaviour manifested bytiming diagrams.
An example of such a diagram isdisplayed in Figure 3, which is adapted from one ofFisler's (1996, p. 5).The horizontal axis of the diagram indicates thepassing of time (as measured by clock cycles) andthe vertical axis indicates the transition of signalsbetween the states of high and low.
(A signal isformulaAXcAGbAF(AX(a /x b) )sensefor all paths, at the nextstate c is truefor all paths, globally bis truefor all paths, eventuallythere is a state fromwhich, for all paths, atthe following state aand b are trueat SotruefalsetrueTable 1: Interpretation f CTL formulas452OI itt :=1Figure 3: Timing diagram for pulsing circuitr /.
.\\ / .\ / \\Figure 4: Timing diagram for handshaking protocola time-varying value present at some point in thecircuit.)
In Figure 3, the input signal i makes atransition from high to low which after a one-cycledelay triggers a unit-duration pulse on the outputsignal o.
(la-b) give two possible English descriptions ofthe regularity illustrated by Figure 3,(1) a.
A pulse of width one is generated on theoutput o one cycle after it detects a fallingedge on input i.b.
If i is high and then is low on the nextcycle, then o is low and after one cyclebecomes high and then after one morecycle becomes low.while (2) is a CTL description.
(2) AG(i --+ AX(",i --+ (--,oAAX(oAAX-,o))))A noteworthy difference between the two Englishrenderings i  that the first is clearly more abstractthan the second.
Description (lb) is closer tothe CTL formula (2), and consequently easier totranslate into CTL.
4For another example of the same phenomenon,consider the timing diagram in Figure 4.
Asbefore, sentences (3a-b) give two possible Englishdescriptions of the regularity illustrated by Figure 4,4Our system does not yet resolve anaphoric references, asin (la).
There are existing English-to-CTL systems which do,however, such as that of Nelken and Francez (1996).
(3) a.
Every request is eventually acknowledgedand once a request is acknowledged therequest is eventually deasserted andeventually after that the acknowledgesignal goes low.b.
If r rises then after one cycle eventually arises and then after one cycle eventually rfalls and then after one cycle eventually afalls.which can be rendered in CTL as (4).
(4) AG('-,r AAXr ~ AF(-,a AAX(aAAF(r AAX(--,r AAF(a AAX--,a))))))Example (3b) parallels (lb) in being closer toCTL than its (a) counterpart.
Nevertheless, (3b)is ontologically richer than CTL in an importantrespect, in that it makes reference to the eventpredicates rise and fall.4 Defining a Controlled LanguageEven confining our attention to hardware speci-fications of the level of complexity examined sofar, we can conclude there are some kinds ofEnglish locutions which will map rather directlyinto CTL, whereas others have a much less directrelation.
What is the nature of this indirectrelation?
Our claim in this paper is that we cangive semantically-oriented characterisations of therelation between complexity in English sentencesand their suitability for inclusion in a controlledlanguage for hardware verification.
Moreover, thissemantic orientation yields a hierarchy of subsetsof English.
(This hierarchy is a theoretical entityconstructed for our specific purposes, of course, nota general linguistic hypothesis about English.
)Our first step in developing an English-to-CTLconversion system was to build a prototype basedon the Alvey Natural Language Tools Grammar(Grover et al, 1993).
The Alvey grammar is a broadcoverage grammar of English using GPSG-stylerules, and maps into a event-based, unscopedsemantic representation.For this application, we used a highly restrictedlexicon and simplified the grammar in a numberof ways (for example: fewer coordination rules;no deontic readings of modals).
Tidhar (1998)reports an initial experiment in taking the semanticoutput generated from a small set S of Englishspecifications, and converting it into CTL.
Given453that the Alvey grammar will produce plausiblesemantic readings for a much larger set S', thechallenge is to characterise an intermediate set S,with S C S C S', that would admit a translation ~binto formulas of CTL.
Let's assume that we have areverse translation ~b -x from CTL to English; thenwe would like S = range(cP-x).4.1 TransliterationNow suppose that ~b -l is a literal translation fromCTL to English.
That is, we recurse on the formulasof CTL, choosing a canonical lexical item or phrasein English as a direct counterpart to each constituentof the CTL formula.
In fact, we have implementedsuch a translation as a DCG ct12eng.
To illustrate,ct12eng maps the formula (2) into (5):(5) globally if i is high then after 1 cycle if i islow then o is low and after 1 cycle o is highand after 1 cycle o is lowLet cp~ -1 be the function defined by ct12eng;then we call El = range(~-(1) the canonicaltransliteration level of English.
We can be confidentthat it is possible to build a translation ~bl whichwill map any sentence in El into a formula ofCTL.
L t can be trivially augmented by addingnear-synonymous lexical and syntactic variants.
Forexample, i is high can be replaced by signal i holds,and after 1 cycle ... by 1 cycle later .
.
.
.
This addsno semantic omplexity.
We call the this language(notated/2+) the augmented transliteration level.One potential problem with defining q~t in thisway is that the sentences generated by ct l2engsoon become structurally ambiguous.
We can solvethis either by generating unambiguous paraphrases,or by analysing the relevant class of ambiguities andmaking sure that ~bt is able to provide all relevantCTL interpretations.These languages contain only sentences.
Hard-ware specifications often have the form of multi-sentence discourses, however.
Such discourses, andthe additional phenomena they introduce, occur athigher levels of our language hierarchy, and wepresently lack any detailed analysis of them in theterms of this paper.4.2 Compositional indirect semanticsWe'll say that an English input expression hascompositional indirect semantics just in case1.
there is a compositional mapping to CTL, butwhere2.
the semantics of the English is ontologicallyricher than the intended CTL translation.The best way to explain these notions is by wayof some examples.
First, consider expressions likethe nouns pulse, edge and the verbs rise, fall.
Theserefer to certain kinds of event.
For example, an edgedenotes the event where a signal changes betweentwo distinct states; from high at time t to low at timet + 1 or conversely.
In CTL, the notion of an edge onsignal i corresponds approximately to the followingexpression: 5(6) (i A AX~i)  v (",i A AXi)Similarly, a pulse can be analysed in terms of arising edge followed by a falling edge.What do we mean by saying that there is acompositional mapping of locutions at this level toCTL?
Our claim is that they can be algorithmicallyconverted into pure CTL without reference tounbounded context.
What do we mean by sayingthat these English expressions involve a richerontology than CTL?
If compositional mappingholds, then clearly we are not forced to augment thestandard models for CTL in order to interpret hem(although this route might be desirable for otherreasons).
Rather, we are saying that the 'natural'ontology for these expressions is richer than thatallowed for CTL, even if reduction is possible.
64.3 Non-compositional indirect semanticsWe consider the conversion to involve non-compositional indirect semantics when there issome aspect of non-locality in the domain of thetranslation function.
That is, some form of inferenceis required--probably involving domain-specificaxioms or general temporal axioms--in order toobtain a CTL formula from the English expression.Here are two examples.
The first comes fromsentence (3a), where the use of eventually mightnormally be taken to correspond irectly to the CTLoperator AF.
However because of the domain of(3a)--a handshaking protocol, evidenced by the useof the verbs acknowledge and request--it is in factmore accurate to require an extra AX in the CTL.5Approximately, in the sense that one cannot simplysubstitute his expression arbitrarily into a larger formula, asit depends on the syntactic context--for example, whether itoccurs in the antecedent or consequent of an implication.6There is a further kind of ontological richness inEnglish atthis level, involving the relation between events, rather than theevents themselves.
Space prohibits acloser examination here.454level/21expressivenesspure CTLexamplesi is high; after 1 cyclepure CTL i holds; 1 cycle later/22 extended CTL i rises; there is a pulseof unit duration/23 full SR?r is eventuallyacknowledgedTable 2: Language hierarchyThis ensures that the three transitions cannot occurat the same time.We see here an example of domain-specificinterpretation conventions that our system needs tobe aware of.
Clearly, it must incorporate themin such a way that users are still able to reliablypredict how the system will react to their Englishspecifications.The second example is(7) From one cycle after i changes until it changesagain x and y are different.In this case there is an interaction between anon-local linguistic phenomenon and somethingspecific to the CTL conversion, namely how tomake the right connection between the first and thesecond changes.4.4 Language hierarchyTable 2 summarises the main proposals of thissection.
The left-hand column lists the hierarchyof postulated sublanguages, in increasing order ofsemantic expressiveness.
The middle column triesto calibrate this expressiveness.
By 'extended CTL',we mean a superset of CTL which is syntacticallyaugmented to allow formulas such as rise(p),fall(p), discussed earlier, and pulse(p, v, n), wherep is an atom, v is a Boolean indicating a high orlow value, and n is a natural number indicatingduration.
The semantic clauses would have tobe correspondingly augmented--as carried out forexample by Nelken and Francez (1996), for rise(p)and fall(p).
By 'full SR', we are hypothesising thatit would be necessary to invoke a general semanticrepresentation language for English.We have constructed a context-free grammar for/22, in order to obtain a concrete approximation toa controlled subset of English for expressing spec-ifications.
There are two cautionary observations.First, as just indicated, /22 maps directly not intoCTL, but into extended CTL.
Second, our grammarfor/22 ignores ome subtleties of English syntax andmorphology.
For example, subject-verb agreement;modal auxiliary subcategorisation; varieties of verbphrase modification by adverbs; and forms ofanaphora.These defects in our CFG for /22 are notfundamental problems, however.
The device ofusing the ct12eng mapping to define a sublanguageis a specific methodology for finding a semanticallymotivated sublanguage.
As such it is only anapproximation to the language that we wish oursystem to deal with.
This CFG is not thegrammar used by our parser (which can, in fact,deal with many of the details of English syntaxjust mentioned).
We may, therefore, introduce alanguage/2+ which corrects the grammatical errorsof 122 and extends it with some degree of anaphoraand ellipsis.We note that it would be useful to have afirmer theoretical grasp on the relations between oursublanguages; we have ongoing work in this area.5 ConclusionMuch work on controlled languages has beenmotivated by the ambition to "find the fight trade-off between expressiveness and processability"(Schwitter and Fuchs, 1996).
An alternative,suggested by what we have proposed here, is tobring into play a hierarchy of controlled languages,ordered by the degree to which they semanticallyapproximate the target formalism.
Each point inthe hierarchy brings different rade-offs betweenexpressiveness and tractability, and evaluating theirdifferent merits will depend heavily on the particu-lar task within a generic application domain, as wellas on the class of users.As a final remark, we wish to point out thatthere may be advantages in identifying plausiblerestrictions on the target formalism.
Dwyer etal.
(1998a; 1998b) have convincingly argued thatusers of formal verification languages make useof recurring specification patterns.
That is, ratherthan drawing on the full complexity of languagessuch as CTL, documented specifications tend tofall into much simpler formulations which expresscommonly desired properties.
In future work, weplan to investigate specification patterns as a furthersource of constraints hat propagate backwards intothe controlled English, perhaps providing additionalmechanisms for dealing with apparent ambiguity inuser input.455AcknowledgementsThe work reported here has been carried out as partof PROSPER (Proof and Specification Assisted De-sign Environments), ESPRIT Framework IV LTR26241, http://www.dcs.gla.ac.uk/prosper/.Thanks to Marc Moens, Claire Grover, MikeFourman, Dirk Hoffman, Tom Melham, ThomasKropf, Mike Gordon, and our ACL reviewers.ReferencesHiyan Alshawi, editor.
1992.
The Core LanguageEngine.
MIT Press.Edmund M. Clarke and E. Allen Emerson.1981.
Synthesis of synchronization skeletonsfor branching time temporal logic.
In Logic ofPrograms: Workshop, Yorktown Heights, NY,May 1981, volume 131 of Lecture Notes inComputer Science.
Springer-Verlag.Edmund M. Clarke and Jeanette M. Wing.
1996.Formal methods: State of the art and future direc-tions.
ACM Computing Surveys, 28(4):626-643.Edmund M. Clarke, E. Allen Emerson, andA.
Prasad Sistla.
1986.
Automatic verificationof finite-state concurrent systems using tempo-ral logic specifications.
ACM Transactions onProgramming Languages and Systems, 8(2):244-263.Matthew B. Dwyer, George S. Avrunin, andJames C. Corbett.
1998a.
Patterns in propertyspecifications for finite-state verification.
Tech-nical Report KSU CIS TR-98-9, Department ofComputing and Information Sciences, KansasState University.Matthew B. Dwyer, George S. Avrunin, andJames C. Corbett.
1998b.
Property specificationpatterns for finite-state verification.
In M. Ardis,editor, Proceedings of the Second Workshop onFormal Methods in Software Practice, pages7-15.A.
Fantechi, S. Gnesi, G. Ristori, M. Carenini,M.
Marino, and P. Moreschini.
1994.
Assistingrequirement formalization by means of naturallanguage translation.
Formal Methods in SystemDesign, 4:243-263.Kathryn Fisler.
1996.
A Unified Approach to Hard-ware Verification through aHeterogeneous Logicof Design Diagrams.
Ph.D. thesis, Department ofComputer Science, Indiana University.Norbert E. Fuchs and Rolf Schwitter.
1996.Attempto Controlled English (ACE).
In CLAW96: First International Workshop on ControlledLanguage Applications.
Centre for Computa-tional Linguistics, Katholieke Universiteit Leu-ven, Belgium.Claire Grover, John Carroll, and Ted Briscoe.
1993.The Alvey Natural Language Tools Grammar(4th release).
Technical Report 284, ComputerLaboratory, University of Cambridge.Hans Kamp and Uwe Reyle.
1993.
From Discourseto Logic: Introduction to Modeltheoretic Se-mantics of Natural Language, Formal Logic andDiscourse Representation Theory.
Number 42 inStudies in Linguistics and Philosophy.
Kluwer.Benjamin Macias and Stephen G. Pulman.
1995.A method for controlling the production ofspecifications innatural language.
The ComputerJournal, 38(4):310-318.Kenneth L. Macmillan.
1993.
Symbolic ModelChecking.
Kluwer.Rani Nelken and Nissim Francez.
1996.
Translat-ing natural anguage system specifications intotemporal logic via DRT.
Technical Report LCL-96-2, Laboratory for Computational Linguistics,Technion, Israel Institute of Technology.Stephen G. Pulman.
1996.
Controlled languagefor knowledge representation.
In CLAW 96:Proceedings of the First International Workshopon Controlled Language Applications, pages233-242.
Centre for Computational Linguistics,Katholieke Universiteit Leuven, Belgium.Rolf Schwitter and Norbert E. Fuchs.
1996.Attempto - -  from specifications in controllednatural anguage towards executable specifica-tions.
In GI EMISA Workshop.
Nattirlichsprach-licher Entwurf von Informations-systemen, Tutz-ing, Germany.Richmond H. Thomason.
1984.
Combinationsof tense and modality.
In D. Gabbay andE Guenthner, editors, Handbook of PhilosophicalLogic.
Volume II: Extensions of Classical Logic,volume 146 of Synthese Library, chapter 11.3,pages 89-134.
D. Reidel.Dan Tidhar.
1998.
ALVEY to CTL translation - -A preparatory study for finite-state verificationnatural language interface.
Msc dissertation, De-partment of Linguistics, University of Edinburgh.Moshe Y. Vardi.
1998.
Linear vs. branching time:A complexity-theoretic perspective.
In LICS'98:Proceedings of the Annual IEEE Symposium onLogic in Computer Science.
Indiana University.456
