Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pages 208?215,Prague, Czech Republic, June 2007. c?2007 Association for Computational LinguisticsLearning Predictive Structures for Semantic Role Labeling of NomBankChang Liu and Hwee Tou NgDepartment of Computer ScienceNational University of Singapore3 Science Drive 2, Singapore 117543{liuchan1, nght}@comp.nus.edu.sgAbstractThis paper presents a novel application ofAlternating Structure Optimization (ASO)to the task of Semantic Role Labeling (SRL)of noun predicates in NomBank.
ASO isa recently proposed linear multi-task learn-ing algorithm, which extracts the commonstructures of multiple tasks to improve accu-racy, via the use of auxiliary problems.
Inthis paper, we explore a number of differentauxiliary problems, and we are able to sig-nificantly improve the accuracy of the Nom-Bank SRL task using this approach.
To ourknowledge, our proposed approach achievesthe highest accuracy published to date on theEnglish NomBank SRL task.1 IntroductionThe task of Semantic Role Labeling (SRL) is toidentify predicate-argument relationships in naturallanguage texts in a domain-independent fashion.
Inrecent years, the availability of large human-labeledcorpora such as PropBank (Palmer et al, 2005) andFrameNet (Baker et al, 1998) has made possiblea statistical approach of identifying and classifyingthe arguments of verbs in natural language texts.A large number of SRL systems have been evalu-ated and compared on the standard data set in theCoNLL shared tasks (Carreras and Marquez, 2004;Carreras and Marquez, 2005), and many systemshave performed reasonably well.
Compared to theprevious CoNLL shared tasks (noun phrase bracket-ing, chunking, clause identification, and named en-tity recognition), SRL represents a significant steptowards processing the semantic content of naturallanguage texts.Although verbs are probably the most obviouspredicates in a sentence, many nouns are also ca-pable of having complex argument structures, oftenwith much more flexibility than its verb counterpart.For example, compare affect and effect:[subj Auto prices] [arg?ext greatly] [predaffect] [obj the PPI].
[subj Auto prices] have a [arg?ext big][pred effect] [obj on the PPI].The [pred effect] [subj of auto prices] [objon the PPI] is [arg?ext big].
[subj The auto prices?]
[pred effect] [obj onthe PPI] is [arg?ext big].The arguments of noun predicates can often bemore easily omitted compared to the verb predi-cates:The [pred effect] [subj of auto prices] is[arg?ext big].The [pred effect] [obj on the PPI] is[arg?ext big].The [pred effect] is [arg?ext big].With the recent release of NomBank (Meyers etal., 2004), it becomes possible to apply machinelearning techniques to the task.
So far we are awareof only one English NomBank-based SRL system(Jiang and Ng, 2006), which uses the maximumentropy classifier, although similar efforts are re-ported on the Chinese NomBank by (Xue, 2006)208and on FrameNet by (Pradhan et al, 2004) us-ing a small set of hand-selected nominalizations.Noun predicates also appear in FrameNet semanticrole labeling (Gildea and Jurafsky, 2002), and manyFrameNet SRL systems are evaluated in Senseval-3(Litkowski, 2004).Semantic role labeling of NomBank is a multi-class classification problem by nature.
Using theone-vs-all arrangement, that is, one binary classi-fier for each possible outcome, the SRL task canbe treated as multiple binary classification problems.In the latter view, we are presented with the oppor-tunity to exploit the common structures of these re-lated problems.
This is known as multi-task learningin the machine learning literature (Caruana, 1997;Ben-David and Schuller, 2003; Evgeniou and Pon-til, 2004; Micchelli and Pontil, 2005; Maurer, 2006).In this paper, we apply Alternating Structure Op-timization (ASO) (Ando and Zhang, 2005a) to thesemantic role labeling task on NomBank.
ASO isa recently proposed linear multi-task learning algo-rithm based on empirical risk minimization.
Themethod requires the use of multiple auxiliary prob-lems, and its effectiveness may vary depending onthe specific auxiliary problems used.
ASO hasbeen shown to be effective on the following natu-ral language processing tasks: text categorization,named entity recognition, part-of-speech tagging,and word sense disambiguation (Ando and Zhang,2005a; Ando and Zhang, 2005b; Ando, 2006).This paper makes two significant contributions.First, we present a novel application of ASO to theSRL task on NomBank.
We explore the effect ofdifferent auxiliary problems, and show that learn-ing predictive structures with ASO results in signifi-cantly improved SRL accuracy.
Second, we achieveaccuracy higher than that reported in (Jiang and Ng,2006) and advance the state of the art in SRL re-search.The rest of this paper is organized as follows.
Wegive an overview of NomBank and ASO in Sec-tions 2 and 3 respectively.
The baseline linear clas-sifier is described in detail in Section 4, followedby the description of the ASO classifier in Sec-tion 5, where we focus on exploring different auxil-iary problems.
We provide discussions in Section 6,present related work in Section 7, and conclude inSection 8.2 NomBankNomBank annotates the set of arguments of nounpredicates, just as PropBank annotates the argu-ments of verb predicates.
As many noun predicatesare nominalizations (e.g., replacement vs. replace),the same frames are shared with PropBank as muchas possible, thus achieving some consistency withthe latter regarding the accepted arguments and themeanings of each label.Unlike in PropBank, arguments in NomBank canoverlap with each other and with the predicate.
Forexample:[location U.S.] [pred,subj,obj steelmakers]have supplied the steel.Here the predicate make has subject steelmakers andobject steel, analogous to Steelmakers make steel.The difference is that here make and steel are bothpart of the word steelmaker.Each argument in NomBank is given one or morelabels, out of the following 20: ARG0, ARG1, ARG2,ARG3, ARG4, ARG5, ARG8, ARG9, ARGM-ADV,ARGM-CAU, ARGM-DIR, ARGM-DIS, ARGM-EXT,ARGM-LOC, ARGM-MNR, ARGM-MOD, ARGM-NEG, ARGM-PNC, ARGM-PRD, and ARGM-TMP.Thus, the above sentence is annotated in NomBankas:[ARGM-LOC U.S.] [PRED,ARG0,ARG1 steelmak-ers] have supplied the steel.3 Alternating structure optimizationThis section gives a brief overview of ASO as imple-mented in this work.
For a more complete descrip-tion, see (Ando and Zhang, 2005a).3.1 Multi-task linear classifierGiven a set of training samples consisting of n fea-ture vectors and their corresponding binary labels,{Xi, Yi} for i ?
{1, .
.
.
, n} where each Xi is ap-dimensional vector, a binary linear classifier at-tempts to approximate the unknown relation by Yi =uTXi.
The outcome is considered +1 if uTX is pos-itive, or ?1 otherwise.
A well-established way tofind the weight vector u is empirical risk minimiza-tion with least square regularization:u?
= arg minu1nn?i=1L(uTXi, Yi)+ ?
?u?2 (1)209Function L(p, y) is known as the loss function.It encodes the penalty for a given discrepancy be-tween the predicted label and the true label.
In thiswork, we use a modification of Huber?s robust lossfunction, similar to that used in (Ando and Zhang,2005a):L(p, y) =???
?4py if py < ?1(1 ?
py)2 if ?1 ?
py < 10 if py ?
1(2)We fix the regularization parameter ?
to 10?4,similar to that used in (Ando and Zhang, 2005a).The expression ?u?2 is defined as ?pi=1 u2p.When m binary classification problems are to besolved together, a h?p matrix ?
may be used to cap-ture the common structures of the m weight vectorsul for l ?
{1, .
.
.
,m} (h ?
m).
We mandate thatthe rows of ?
be orthonormal, i.e., ?
?T = Ih?h.The h rows of ?
represent the h most significantcomponents shared by all the u?s.
This relationshipis modeled byul = wl + ?Tvl (3)The parameters [{wl,vl},?]
may then be foundby joint empirical risk minimization over all them problems, i.e., their values should minimize thecombined empirical risk:m?l=1(1nn?i=1L((wl + ?Tvl)TXli, Y li)+ ?
?wl?2)(4)3.2 The ASO algorithmAn important observation in (Ando and Zhang,2005a) is that the binary classification problemsused to derive ?
are not necessarily those problemswe are aiming to solve.
In fact, new problems can beinvented for the sole purpose of obtaining a better ?.Thus, we distinguish between two types of problemsin ASO: auxiliary problems, which are used to ob-tain ?, and target problems, which are the problemswe are aiming to solve1.For instance, in the argument identification task,the only target problem is to identify arguments vs.1Note that this definition deviates slightly from the one in(Ando and Zhang, 2005a).
We find the definition here moreconvenient for our subsequent discussion.non-arguments, whereas in the argument classifica-tion task, there are 20 binary target problems, one toidentify each of the 20 labels (ARG0, ARG1, .
.
.
).The target problems can also be used as an aux-iliary problem.
In addition, we can invent new aux-iliary problems, e.g., in the argument identificationstage, we can predict whether there are three wordsbetween the constituent and the predicate using thefeatures of argument identification.Assuming there are k target problems and m aux-iliary problems, it is shown in (Ando and Zhang,2005a) that by performing one round of minimiza-tion, an approximate solution of ?
can be obtainedfrom (4) by the following algorithm:1.
For each of the m auxiliary problems, learn ulas described by (1).2.
Find U = [u1,u2, .
.
.
,um], a p ?
m matrix.This is a simplified version of the definition in(Ando and Zhang, 2005a), made possible be-cause the same ?
is used for all auxiliary prob-lems.3.
Perform Singular Value Decomposition (SVD)on U : U = V1DV T2 , where V1 is a p ?
m ma-trix.
The first h columns of V1 are stored asrows of ?.4.
Given ?, we learn w and v for each of thek target problems by minimizing the empiricalrisk of the associated training samples:1nn?i=1L((w + ?Tv)TXi, Yi)+ ?
?w?2 (5)5.
The weight vector of each target problem canbe found by:u = w + ?Tv (6)By choosing a convex loss function, e.g., (2),steps 1 and 4 above can be formulated as convex op-timization problems and are efficiently solvable.The procedure above can be considered as a Prin-cipal Component Analysis in the predictor space.Step (3) above extracts the most significant compo-nents shared by the predictors of the auxiliary prob-lems and hopefully, by the predictors of the target210problems as well.
The hint of potential significantcomponents helps (5) to outperform the simple lin-ear predictor (1).4 Baseline classifierThe SRL task is typically separated into two stages:argument identification and argument classification.During the identification stage, each constituent in asentence?s parse tree is labeled as either argumentor non-argument.
During the classification stage,each argument is given one of the 20 possible labels(ARG0, ARG1, .
.
.
).
The linear classifier describedby (1) is used as the baseline in both stages.
Forcomparison, the F1 scores of a maximum entropyclassifier are also reported here.4.1 Argument identificationEighteen baseline features and six additional fea-tures are proposed in (Jiang and Ng, 2006) for Nom-Bank argument identification.
As the improvementof the F1 score due to the additional features is notstatistically significant, we use the set of eighteenbaseline features for simplicity.
These features arereproduced in Table 1 for easy reference.Unlike in (Jiang and Ng, 2006), we do not prunearguments dominated by other arguments or thosethat overlap with the predicate in the training data.Accordingly, we do not maximize the probability ofthe entire labeled parse tree as in (Toutanova et al,2005).
After the features of every constituent areextracted, each constituent is simply classified inde-pendently as either argument or non-argument.The linear classifier described above is trained onsections 2 to 21 and tested on section 23.
A max-imum entropy classifier is trained and tested in thesame manner.
The F1 scores are presented in thefirst row of Table 3, in columns linear and maxentrespectively.
The J&N column presents the resultreported in (Jiang and Ng, 2006) using both base-line and additional features.
The last column asopresents the best result from this work, to be ex-plained in Section 5.4.2 Argument classificationIn NomBank, some constituents have more than onelabel.
For simplicity, we always assign exactly onelabel to each identified argument in this step.
For the0.16% arguments with multiple labels in the training1 pred the stemmed predicate2 subcat grammar rule that expands thepredicate P?s parent3 ptype syntactic category (phrasetype) of the constituent C4 hw syntactic head word of C5 path syntactic path from C to P6 position whether C is to the left/right ofor overlaps with P7 firstword first word spanned by C8 lastword last word spanned by C9 lsis.ptype phrase type of left sister10 rsis.hw right sister?s head word11 rsis.hw.pos POS of right sister?s head word12 parent.ptype phrase type of parent13 parent.hw parent?s head word14 partialpath path from C to the lowest com-mon ancestor with P15 ptype & length of path16 pred & hw17 pred & path18 pred & positionTable 1: Features used in argument identificationdata, we pick the first and discard the rest.
(Note thatthe same is not done on the test data.
)A diverse set of 28 features is used in (Jiang andNg, 2006) for argument classification.
In this work,the number of features is pruned to 11, so that wecan work with reasonably many auxiliary problemsin later experiments with ASO.To find a smaller set of effective features, we startwith all the features considered in (Jiang and Ng,2006), in (Xue and Palmer, 2004), and various com-binations of them, for a total of 52 features.
Thesefeatures are then pruned by the following algorithm:1.
For each feature in the current feature set, dostep (2).2.
Remove the selected feature from the featureset.
Obtain the F1 score of the remaining fea-tures when applied to the argument classifica-tion task, on development data section 24 withgold identification.3.
Select the highest of all the scores obtained in2111 position to the left/right of or overlapswith the predicate2 ptype syntactic category (phrasetype) of the constituent C3 firstword first word spanned by C4 lastword last word spanned by C5 rsis.ptype phrase type of right sister6 nomtype NOM-TYPE of predicate sup-plied by NOMLEX dictionary7 predicate & ptype8 predicate & lastword9 morphed predicate stem & head word10 morphed predicate stem & position11 nomtype & positionTable 2: Features used in argument classificationstep (2).
The corresponding feature is removedfrom the current feature set if its F1 score is thesame as or higher than the F1 score of retainingall features.4.
Repeat steps (1)-(3) until the F1 score starts todrop.The 11 features so obtained are presented in Ta-ble 2.
Using these features, a linear classifier and amaximum entropy classifier are trained on sections 2to 21, and tested on section 23.
The F1 scores arepresented in the second row of Table 3, in columnslinear and maxent respectively.
The J&N columnpresents the result reported in (Jiang and Ng, 2006).4.3 Further experiments and discussionIn the combined task, we run the identification taskwith gold parse trees, and then the classification taskwith the output of the identification task.
This waythe combined effect of errors from both stages onthe final classification output can be assessed.
Thescores of this complete SRL system are presented inthe third row of Table 3.To test the performance of the combined task onautomatic parse trees, we employ two different con-figurations.
First, we train the various classifierson sections 2 to 21 using gold argument labels andautomatic parse trees produced by Charniak?s re-ranking parser (Charniak and Johnson, 2005), andtest them on section 23 with automatic parse trees.This is the same configuration as reported in (Prad-han et al, 2005; Jiang and Ng, 2006).
The scoresare presented in the fourth row auto parse (t&t) inTable 3.Next, we train the various classifiers on sections 2to 21 using gold argument labels and gold parsetrees.
To minimize the discrepancy between goldand automatic parse trees, we remove all the nodesin the gold trees whose POS are -NONE-, as theydo not span any word and are thus never generatedby the automatic parser.
The resulting classifiers arethen tested on section 23 using automatic parse trees.The scores are presented in the last row auto parse(test) of Table 3.
We note that auto parse (test) con-sistently outperforms auto parse (t&t).We believe that auto parse (test) is a more realis-tic setting in which to test the performance of SRLon automatic parse trees.
When presented with somepreviously unseen test data, we are forced to rely onits automatic parse trees.
However, for the best re-sults we should take advantage of gold parse treeswhenever possible, including those of the labeledtraining data.J&N maxent linear asoidentification 82.50 83.58 81.34 85.32classification 87.80 88.35 87.86 89.17combined 72.73 75.35 72.63 77.04auto parse (t&t) 69.14 69.61 67.38 72.11auto parse (test) - 71.19 69.05 72.83Table 3: F1 scores of various classifiers on Nom-Bank SRLOur maximum entropy classifier consistently out-performs (Jiang and Ng, 2006), which also uses amaximum entropy classifier.
The primary differenceis that we use a later version of NomBank (Septem-ber 2006 release vs. September 2005 release).
In ad-dition, we use somewhat different features and treatoverlapping arguments differently.5 Applying ASO to SRLOur ASO classifier uses the same features as thebaseline linear classifier.
The defining characteris-tic, and also the major challenge in successfully ap-plying the ASO algorithm is to find related auxiliaryproblems that can reveal common structures shared212with the target problem.
To organize our search forgood auxiliary problems for SRL, we separate theminto two categories, unobservable auxiliary prob-lems and observable auxiliary problems.5.1 Unobservable auxiliary problemsUnobservable auxiliary problems are problemswhose true outcome cannot be observed from a rawtext corpus but must come from another source,e.g., human labeling.
For instance, predicting theargument class (i.e., ARG0, ARG1, .
.
. )
of a con-stituent is an unobservable auxiliary problem (whichis also the only usable unobservable auxiliary prob-lem here), because the true outcomes (i.e., the argu-ment classes) are only available from human labelsannotated in NomBank.For argument identification, we invent the follow-ing 20 binary unobservable auxiliary problems totake advantage of information previously unused atthis stage:To predict the outcome of argument classi-fication (i.e., ARG0, ARG1, .
.
. )
using thefeatures of argument identification (pred,subcat, .
.
.
).Thus for argument identification, we have 20 auxil-iary problems (one auxiliary problem for predictingeach of the argument classes ARG0, ARG1, .
.
. )
andone target problem (predicting whether a constituentis an argument) for the ASO algorithm described inSection 3.2.In the argument classification task, the 20 binarytarget problems are also the unobservable auxiliaryproblems (one auxiliary problem for predicting eachof the argument classes ARG0, ARG1, .
.
.
).
Thus,we use the same 20 problems as both auxiliary prob-lems and target problems.We train an ASO classifier on sections 2 to 21 andtest it on section 23.
With the 20 unobservable aux-iliary problems, we obtain the F1 scores reported inthe last column of Table 3.
In all the experiments,we keep h = 20, i.e., all the 20 columns of V1 arekept.Comparing the F1 score of ASO against that ofthe linear classifier in every task (i.e., identification,classification, combined, both auto parse configura-tions), the improvement achieved by ASO is statis-tically significant (p < 0.05) based on the ?2 test.Comparing the F1 score of ASO against that of themaximum entropy classifier, the improvement in allbut one task (argument classification) is statisticallysignificant (p < 0.05).
For argument classifica-tion, the improvement is not statistically significant(p = 0.08).5.2 Observable auxiliary problemsObservable auxiliary problems are problems whosetrue outcome can be observed from a raw text cor-pus without additional externally provided labels.An example is to predict whether hw=trader froma constituent?s other features, since the head wordof a constituent can be obtained from the raw textalone.
By definition, an observable auxiliary prob-lem can always be formulated as predicting a fea-ture of the training data.
Depending on whether thebaseline linear classifier already uses the feature tobe predicted, we face two possibilities:Predicting a used feature In auxiliary problemsof this type, we must take care to remove the featureitself from the training data.
For example, we mustnot use the feature path or pred&path to predict pathitself.Predicting an unused feature These auxiliaryproblems provide information that the classifier waspreviously unable to incorporate.
The desirablecharacteristics of such a feature are:1.
The feature, although unused, should have beenconsidered for the target problem so it is prob-ably related to the target problem.2.
The feature should not be highly correlatedwith a used feature, e.g., since the lastword fea-ture is used in argument identification, we willnot consider predicting lastword.pos as an aux-iliary problem.Each chosen feature can create thousands of bi-nary auxiliary problems.
E.g., by choosing to pre-dict hw, we can create auxiliary problems predict-ing whether hw=to, whether hw=trader, etc.
Tohave more positive training samples, we only predictthe most frequent features.
Thus we will probablypredict whether hw=to, but not whether hw=trader,since to occurs more frequently than trader as a headword.2135.2.1 Argument identificationIn argument identification using gold parse trees,we experiment with predicting three unused featuresas auxiliary problems: distance (distance betweenthe predicate and the constituent), parent.lsis.hw(head word of the parent constituent?s left sister) andparent.rsis.hw (head word of the parent constituent?sright sister).
We then experiment with predictingfour used features: hw, lastword, ptype and path.The ASO classifier is trained on sections 2 to 21,and tested on section 23.
Due to the large data size,we are unable to use more than 20 binary auxil-iary problems or to experiment with combinationsof them.
The F1 scores are presented in Table 4.5.2.2 Argument classificationIn argument classification using gold parse treesand gold identification, we experiment with pre-dicting three unused features path, partialpath, andchunkseq (concatenation of the phrase types of textchunks between the predicate and the constituent).We then experiment with predicting three used fea-tures hw, lastword, and ptype.Combinations of these auxiliary problems are alsotested.
In all combined, we use the first 100 prob-lems from each of the six groups of observable aux-iliary problems.
In selected combined, we use thefirst 100 problems from each of path, chunkseq, last-word and ptype problems.The ASO classifier is trained on sections 2 to 21,and tested on section 23.
The F1 scores are shownin Table 5.feature to be predicted F120 most frequent distances 81.4820 most frequent parent.lsis.hws 81.5120 most frequent parent.rsis.hws 81.6020 most frequent hws 81.4020 most frequent lastwords 81.3320 most frequent ptypes 81.3520 most frequent paths 81.47linear baseline 81.34Table 4: F1 scores of ASO with observable auxiliaryproblems on argument identification.
All h = 20.From Table 4 and 5, we observe that althoughthe use of observable auxiliary problems consis-feature to be predicted F1300 most frequent paths 87.97300 most frequent partialpaths 87.95300 most frequent chunkseqs 88.09300 most frequent hws 87.93300 most frequent lastwords 88.01all 63 ptypes 88.05all combined 87.95selected combined 88.07linear baseline 87.86Table 5: F1 scores of ASO with observable auxiliaryproblems on argument classification.
All h = 100.tently improves the performance of the classifier,the differences are small and not statistically signif-icant.
Further experiments combining unobservableand observable auxiliary problems fail to outperformASO with unobservable auxiliary problems alone.In summary, our work shows that unobservableauxiliary problems significantly improve the perfor-mance of NomBank SRL.
In contrast, observableauxiliary problems are not effective.6 DiscussionsSome of our experiments are limited by the exten-sive computing resources required for a fuller ex-ploration.
For instance, ?predicting unused features?type of auxiliary problems might hold some hope forfurther improvement in argument identification, if alarger number of auxiliary problems can be used.ASO has been demonstrated to be an effec-tive semi-supervised learning algorithm (Ando andZhang, 2005a; Ando and Zhang, 2005b; Ando,2006).
However, we have been unable to use un-labeled data to improve the accuracy.
One possiblereason is the cumulative noise from the many cas-cading steps involved in automatic SRL of unlabeleddata: syntactic parse, predicate identification (wherewe identify nouns with at least one argument), ar-gument identification, and finally argument classi-fication, which reduces the effectiveness of addingunlabeled data using ASO.7 Related workMulti-output neural networks learn several tasks si-multaneously.
In addition to the target outputs,214(Caruana, 1997) discusses configurations whereboth used inputs and unused inputs (due to excessivenoise) are utilized as additional outputs.
In contrast,our work concerns linear predictors using empiricalrisk minimization.A variety of auxiliary problems are tested in(Ando and Zhang, 2005a; Ando and Zhang, 2005b)in the semi-supervised settings, i.e., their auxiliaryproblems are generated from unlabeled data.
Thisdiffers significantly from the supervised setting inour work, where only labeled data is used.
While(Ando and Zhang, 2005b) uses ?predicting usedfeatures?
(previous/current/next word) as auxiliaryproblems with good results in named entity recog-nition, the use of similar observable auxiliary prob-lems in our work gives no statistically significant im-provements.More recently, for the word sense disambiguation(WSD) task, (Ando, 2006) experimented with bothsupervised and semi-supervised auxiliary problems,although the auxiliary problems she used are differ-ent from ours.8 ConclusionIn this paper, we have presented a novel applicationof Alternating Structure Optimization (ASO) to theSemantic Role Labeling (SRL) task on NomBank.The possible auxiliary problems are categorized andtested extensively.
Our results outperform those re-ported in (Jiang and Ng, 2006).
To the best of ourknowledge, we achieve the highest SRL accuracypublished to date on the English NomBank.ReferencesR.
K. Ando and T. Zhang.
2005a.
A framework for learningpredictive structures from multiple tasks and unlabeled data.Journal of Machine Learning Research.R.
K. Ando and T. Zhang.
2005b.
A high-performance semi-supervised learning method for text chunking.
In Proc.
ofACL.R.
K. Ando.
2006.
Applying alternating structure optimizationto word sense disambiguation.
In Proc.
of CoNLL.C.
F. Baker, C. J. Fillmore, and J.
B. Lowe.
1998.
The BerkeleyFrameNet project.
In Proc.
of COLING-ACL.S.
Ben-David and R. Schuller.
2003.
Exploiting task related-ness for multiple task learning.
In Proc.
of COLT.X.
Carreras and L. Marquez.
2004.
Introduction to the CoNLL-2004 shared task: Semantic role labeling.
In Proc.
ofCoNLL.X.
Carreras and L. Marquez.
2005.
Introduction to the CoNLL-2005 shared task: Semantic role labeling.
In Proc.
ofCoNLL.R.
Caruana.
1997.
Multitask Learning.
Ph.D. thesis, School ofComputer Science, CMU.E.
Charniak and M. Johnson.
2005.
Coarse-to-fine n-best pars-ing and MaxEnt discriminative reranking.
In Proc.
of ACL.T.
Evgeniou and M. Pontil.
2004.
Regularized multitask learn-ing.
In Proc.
of KDD.D.
Gildea and D. Jurafsky.
2002.
Automatic labeling of seman-tic roles.
Computational Linguistics.Z.
P. Jiang and H. T. Ng.
2006.
Semantic role labeling of Nom-Bank: A maximum entropy approach.
In Proc.
of EMNLP.K.
C. Litkowski.
2004.
Senseval-3 task: automatic labeling ofsemantic roles.
In Proc.
of SENSEVAL-3.A.
Maurer.
2006.
Bounds for linear multitask learning.
Journalof Machine Learning Research.A.
Meyers, R. Reeves, C. Macleod, R. Szekeley, V. Zielinska,B.
Young, and R. Grishman.
2004.
The NomBank project:An interim report.
In Proc.
of HLT/NAACL Workshop onFrontiers in Corpus Annotation.C.
A. Micchelli and M. Pontil.
2005.
Kernels for multitasklearning.
In Proc.
of NIPS.M.
Palmer, D. Gildea, and P. Kingsbury.
2005.
The PropositionBank: an annotated corpus of semantic roles.
ComputationalLinguistics.S.
S. Pradhan, H. Sun, W. Ward, J. H. Martin, and D. Jurafsky.2004.
Parsing arguments of nominalizations in English andChinese.
In Proc.
of HLT/NAACL.S.
Pradhan, K. Hacioglu, V. Krugler, W. Ward, J. H. Martin,and D. Jurafsky.
2005.
Support vector learning for semanticargument classification.
Machine Learning.K.
Toutanova, A. Haghighi, and C. D. Manning.
2005.
Jointlearning improves semantic role labeling.
In Proc.
of ACL.N.
Xue and M. Palmer.
2004.
Calibrating features for semanticrole labeling.
In Proc.
of EMNLP.N.
Xue.
2006.
Semantic role labeling of nominalized predi-cates in Chinese.
In Proc.
of HLT/NAACL.215
