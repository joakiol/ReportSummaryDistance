Generation for Dialogue TranslationUsing Typed Feature Structure UnificationYoshihiro UEDAATR Interpreting Telephony Research Labs.Sampeidani,  Inuidani, Seika-choKyoto 619-02, Japanryu%atr-la.atr.co.jp@u unet.
u u. netKiyoshi KOGURENTT Basic Research Laboratories9-11, Midor i -cho 3-chome,  Musash ino-sh iTokyo 180, Japankogure%atom.ntt.jp@ uunet.uu.netAbstractThis art ic le  int roduces a b id i rect iona lgrammar generat ion system called featurestructure-directed generation, developed for adialogue translation system.
The systemutilizes typed feature structures to control thetop-down derivation in a declarative way.
Thisgeneration system also uses disjunctive featurestructures to reduce the number of copies ofthe derivation tree.
The grammar for thisgenerator is designed to properly generate thespeaker's intention in a telephone dialogue.1.
Introduct ionIt is important for the generation part of thedialogue translation system to reflect thespeaker's intention ( i l locutionary force).
Toproperly translate the illocutionary forces, theIntent ion Trans lat ion  Method has beendeveloped at ATR (Kogure et al, 1989).
Thisgenerator was developed as a part of thedialogue translation system.Bidirectional grammar is helpful in maintain-ing tile grammar/lexicon (Appelt, 1987).
Afeature structure representat ion has beenadopted for analysis result and generationinput because it can keep various informationincluding i l locutionary forces and pragmaticsin a consistent way.The infinite application of grammar rules is acommon problem of the existing top-downunif icat ion-based generators (Shieber et al,1989).
The solution adopted here is to controlthe generation process by selecting appro-priate rules to apply.
Typed feature struc-tures (A~'t-Kaci, 1986) are utilized to describethe control of the generation process in adeclarative way.
This description can also beused to avoid the derivation of unnecessarytrees and to increase the generation efficiency.Another problem of the top-down generators ismaking multiple copies of the phrase structurewhen the generat ion process encountersmultiple rule candidates.
This problem can betreated by introducing dis junct ive features t ruc tures .This article first describes the advantages oftyped feature structures and dis junct ivefeature structures in sections 2 and 3.
Thegrammar for the generation system and thegeneration results are shown in section 4.
Thecurrent status of this project and future tasksare described in section 5.2.
Introducing Typed FeatureSt ructures2.1 Selecting Appropriate RulesThe basic mechanism of this generator is thetop-down application of the grammar rules andconstruction of the feature structures of thedaughter nodes.It is important to avoid the derivation ofunnecessary phrase structures by selectingappropriate rules to apply in order to increasethe efficiency.
Consider the following rulestaken from D-PATR (Karttunen, 1986).VP =HC*=> (VP XP)(<!m sem cont> == <!head-dtr sem cont>)(<lhead-dtr !subcat first> == <!comp-dtr-l>)(<!head-dtr Jsubcat rest> == <Jm !subcat>))VP =CH=> (VP PP)(<!m sem cont> == <!head-dtr sem cont>)(<!head-dtr !subcat first> == <!comp-dtr-l>)(<Phead-dtr !subcat rest> == <!m isubcat>))(1)I(2)The construct ion of the semantic repre-sentations given to the mother nodes of these~ In this rule, =HC*=> link shows that the first elementof the right hand syml?~ls becomes the head daughter andthe others the complement daughters.
=CH=> link isalso supplied for complement-head constructions.
Asymbol with an exclamation mark (!)
indicates apredefined template.
In this rule, !m stands for tilemother, i.e., the left-hand VP.164two rules are the same (predicate-argumentstructure), as can be seen below:ob je  re ln  p layagen  john 'ob je  soccer 'loc  a -park  '(1)Fig.1 Sample feature structureIn generation, appropriate grammar rules mustbe selected using this representation.
For thispurpose, the difference between these featurestructures must be found in the type of the keyfeature value's type.
In this case, the reln(relation) feature plays the key role, and thevalue "play" must be of the verb type and "in"the prepositional type.Typed feature structures formulated by Ai"t-Kaci (1986) are introduced to handle types infeature structures, because,  types cannot behandled by ord inary  feature structureunification.
Using typed feature structures,the following specifications can be attached tothe former rules.For (1): (<!m sem cent rein> == \[V j)For (2): (<!m sere cent rein> == \[PJ)These specifications work as constraints to therule application.
The first specification showsthat the <sere cont reln> feature of the node isunified to the type V (bracketed, shown in bolditalics).
If the unification succeeds, i.e., the<sem cont reln> feature is under V type in thetype hierarchy, this grammar rule can beapplied.
The selection of appropriate grammarrules is thus accomplished in a declarativeway.2.2 Avoiding Termination ProblemThere are various ways to utilize the typehierarchy.
One example is subclassifying thecategor ies.One of the termination problems Shieber et al(1989) pointed out is in the left-recursiverules.
The rule (1) infinitely appends thesubcat list to the daughter VP if the grammaris used for generation.
This can be solved byrestr ict ing the permiss ib le length of thesubcat list t ?
.
The maximum length of thesubcat list is 2, excluding the subject.
Thisrestriction can be represented as follows.1"'\] Though the restriction cannot be applied tolanguages like Dutch (Shieber et al, 1989), thelimitation is irrelevant to our purpose (translationbetween Japanese and English).
(:or (<lm lsubcat> == \[list-end\]))(<!m lsubcat rest> == \[list-end\]))However, this restriction forces the rule (2) tobe applied twice to all verbs includingintransitive verbs.
Derivation of the phrasestructures with incorrectly extended subcatlists will fail when the terminal is reached.This restriction can be solved more effectivelyusing the type hierarchy.
If verbs arec lassi f ied into three subtypes (Monadic,Dyadic and Triadic) by the numbers of theirarguments, the restriction in rule (1) can bewritten as follows.
(:or ((<Im sem cent rein> == \[dyadic\])(<!m !subcat> == \[list-end\]))((<!m sem cent rein> == \[triadic\])(:or (<!m !subcat> == \[list-end\])(<!m !subcat rest> == \[list-end\]))2.3 Relating Types and CategoriesAnother function of the type hierarchy isusing the types as a bridge between thesemantics in the feature structure and thecategory in the CFG rules.
Categories(nonterminal symbols) are also expressed by,and are closely related to, types.
The followinglexical entry def init ion shows that thecomplement of the verb is VP.
(deflex "must" dyadic(<lsubcat first> == \[VPJ)?
.
.
)If type VP is a subtype of XP, \[XP\] and \[VP\] areunified to bear \[VP\] when the lexical entry"must" is unified in rule (1).
In D-PATR, suchunspecif ied categories are treated by thesystem by introducing special symbols X, Y,etc.
Typed feature structures serve as a soundfoundation for this task.3.
Introducing Disjunctive FeatureStructure UnificationIntroduction of disjunctive feature structuressolves the ineff ic iency caused by makingcopies of whole trees when a node can beapplied to multiple candidates of rules.For example, multiple copying is caused by themutual restriction between the subject and theverb (subcategorizing by verb and subject-verbagreement).
The verb cannot be determineduntil the subject is determined and thederivation tree must be copied for each verbcandidate.Instead of copying the derivation tree, thesurface entries of a verb are packed into a2 65disjunctive feature structure in a lexical entryas follows.
(DEFLEX-UNIT Ibe-Unitl DYADIC(:or (!finite-form !present-tense(:or ((<word> == "am") !lsg-subj-agr)((<word> == "are")(:or ((J2sg-subj-agr) (Jpl-subj-agr))))((<word> == "is")!3sg-subj-agr)(!finite-form !past-tense.
.
.
.
.
.When the derivation proceeds and the subjectis determined, one surface string is selectedfrom these three candidates (see Fig.
2).The unification of disjunctive feature struc-tures is implemented according to Kasper'salgorithm (Kasper, 1987).4.
Grammar and ExamplesThe grammar developed for this generationsystem is based on HPSG (Pollard and Sag,1987) and its modification by Borsley (1987).Relating illocutionary forces to utterances isachieved in this grammar.For example, consider the following featurestructure including the REQUEST illocutionaryforce.\[CIRC\[RELN \[*REQUEST*\]\]\[AGEN ?X03\[ IND-OBJ\[LABEL *SPEAKER*\]\]\]\[RECP ?X02\[ IND-OBJ\[LABEL *HEARER*\]\]\]\[OBOE \[CIRC\[RELN \[*SEND-I*\]\]\[AGEN ?X02\] ; *HEARER*\[RECP ?X03\] ; *SPEAKER*\[OBOE !a-reg-form'\]\]\]\];abbreviated hereFrom this feature structure, the fol lowinggeneration results can be obtained.> (gen3 fs-l)("would you send me a registrat ion form""could you send me a registrat ion form""send me a registrat ion form");; "send NP to NP" form is suppressed here.Specifying one of these results can be done byenriching the input feature structure.5.
Current Status and Further TasksThis article described how the generation pro-cess is effectively controlled by typed featurestructures and disjunctive feature structures.The generation mechanism described here isimplemented in Common Lisp on SymbolicsLisp Machines and Sun Workstations.
A screenhardcopy of the environment is shown in Fig.
2.The grammar for this generation system is nowunder enrichment.
The relationships betweensurface utterances and intentions need to befurther explored.Kume et al (1989) and Kogure et al (1989)introduced il locutionary force type planningfrom deep illocutionary force type.
Combiningthis method with the generator is the next task.~(  UED. '
I  NP  .
CH - > NPSPECP Uq  / /~u  n~D ov~p ~ nm o ,m ~ - -  ?
i ~ ow,  i n~ e , ,~  ~Fig.2 The EnvironmentAcknowledgementThe authors would like to express their appreciation toMr.
Hitoshi Iida and other researchers of ATR NaturalLanguage Understanding Department for valuablesuggestions and discussions.ReferencesHassan Ait-Kaci (1986), An Algebraic SemanticsApproach to the Effective Resolution of TypeEquations, Theoretical Computer Science 45, pp.
293- 351, North-Holland, Amsterdam.Douglas E. Appelt (1987), Bidirectional Granamars andthe Design of Natural Language Generation Systems,in TINLAP-3, pp.
185 - 191, Las Cruse.Robert D. Borsley (1987), Subjects and Complements inHPSG, Report No.
CSLI-87-107, CSLI, Stanford.Lauri Karttunen (1986), D-PATR: A DevelopmentEnvironment for Unification-Based Grammars, ReportNo.
CSLI-86-61, CSLI, Stanford.Robert T. Kasper (1987), A Unification Method forDisjunctive Feature Descriptions, in 25th ACL, pp.235 - 242, Stanford.Kiyoshi Kogure, Hitoshi Iida, Kei Yoshimoto and TeruakiAizawa (1989), A New Paradigm of DialogueTranslation, in International Symposium "ComputerWorld '89", Osaka.Masako Kume, Gayle K. Sato, and Kei Yoshimoto(1989), A Descriptive Framework for TranslatingSpeaker's Meaning, in 4th ACL European Chapter,pp.
264 - 271, Manchester.Stuart M. Shieber, Gertjan van Noord, Robert C. Moore,and Femando C. N. Pereira (1989), A Semantic-Head-Driven Generation Algorithm for Unificatlon-BasedFormalisms, in 27th ACL, pp.
7 - 17, Vancouver.Carl Pollard and Ivan A.
Sag (1987), An Information-Based Syntax and Semantics, Volume 1,Fundamentals, CSLI Lecture Notes Number 13, CSLI,Stanford.66 3
