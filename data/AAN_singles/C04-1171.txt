A System for Generating Descriptions of Sets of Objects in a Rich VarietyHelmut HoracekUniversit?t des SaarlandesF.R.
6.2 InformatikPostfach 151150D-66041 Saarbr?cken, Germanyemail: horacek@cs.uni-sb.deAbstractEven ambitious algorithms for the gener-ation of referring expressions that iden-tify sets of objects are restricted in termsof efficiency or in their expressive reper-toire.
In this paper, we report on a systemthat applies a best-first searching proce-dure, enhancing both its effectiveness andthe variety of expressions it can generate.1 IntroductionGenerating referring expressions has recentlybeen extended from the identification of singleto sets of objects.
However, existing algorithmssuffer in terms of efficiency and expressiveness.In this paper, we report on a system that applies abest-first searching procedure, with an enhancedeffectiveness and a larger variety of expressionsit can generate.
The system's repertoire includescompositions of partially identifying expressionsand descriptions of objects to be excluded, there-by taking into account impacts on surface forms.Throughout this paper, we refer to a scenariowith a set of 12 vehicles as defined in Figure 1.All vehicles are identifiable individually, to makethe identification task meaningful.
Only minordifferences hold between some of these vehicles,which makes the identification task challenging.This paper is organized as follows.
First, wemotivate our goals.
Then we describe techniquesfor enhancing efficiency.
We follow by illus-trating improvements of expressiveness.
Finally,we evaluate several efficiency-related techniques.2 MotivationIdentifying sets of objects originally followed theincremental algorithm (Dale and Reiter 1995), asin (Bateman 1999), (Stone 2000) and (Krahmeret al 2003), with limited coverage, since only fewattributes typically apply to all intended referentsand to none of the potential distractors.
There-fore, van Deemter (2002) has extended the set ofdescriptors to boolean combinations of attributes,including negations.
Unfortunately, when apply-ing the incremental strategy, this may lead to theinclusion of too many redundant descriptors inthe final specification.
This deficit disappearedusing an exhaustive search (Gardent 2002), butrun-time then increases considerably.
Mediatingbetween these two extreme search paradigms, wehave developed a best-first searching algorithmthat avoids the major deficit of the incrementalapproach (Horacek 2003).
Since its intermediateresults can also be used as partial descriptions, webuild on the flexibility of this new algorithm toextend its expressive capabilities.
In addition, wefurther enhance its efficiency-seeking measures.These extensions attack the deficits previousalgorithms share, according to (Horacek 2004):?
Expressions produced may become lengthy:for identifying sets of vehicles in the scenarioin Figure 1, we have obtained non-redundantspecifications with up to 8 descriptors.?
Specifications may contain some disjunctions,frequently causing the production of structur-ally ambiguous expressions (Gardent 2002) ?
?trucks and sportscars which are white or inthe center?
referring to x1, x5, x11 (Figure 1).We avoid these deficits by not restricting booleanexpressions to a form with conjunctions as toplevel operators, as others always do.
This allowsus to incorporate descriptions of objects to beexcluded, to produce enumerations and compo-sitions of descriptions of subsets of the intendedreferents, and to build compositions of increa-singly restricting descriptions of these referents.ObjectsDescriptors x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12vehicle ?
?
?
?
?
?
?
?
?
?
?
?car ?
?
?
?
?
?
?
?sportscar ?
?
?
?truck ?
?
?
?blue ?
?
?red ?
?
?
?
?
?white ?
?
?center ?
?
?
?left ?
?
?
?right ?
?
?
?big ?
?
?
?
?
?small ?
?
?
?
?
?new ?
?
?
?
?
?old ?
?
?
?
?
?Figure 1.
Example scenario with 12 vehicles3 The Best-First ProcedureThe basic mechanism of the best-first searchalgorithm is a generalization of the incrementalversion: instead of successively adding attributesto the full expression generated so far, all inter-mediate results are accessible for this operation,producing an optimal solution, if completed ?see (Horacek 2003) for details.
This algorithmuses two cut-off techniques, assuming conflation(e.g., the descriptors man and unmarried can beverbalized as ?bachelor?)
is not possible:?
A dominance cut-off is carried out locally forsibling nodes, when two partial descriptionsexclude the same set of potential distractors,the same set of descriptors still being available.The variant evaluated worse is discarded.?
A value cut-off is carried out globally after asolution has been found.
It is done for nodeswhose most optimistic evaluation (includingthe minimal value of the description requiredfor excluding the remaining potential distrac-tors), surpasses the evaluation of that solution.Applying any of these cut-offs only serves togain speed and does not change the final result.3.1 Efficiency-Enhancing MeasuresWe have enhanced this repertoire by a complexitycut-off, carried out prior to further expanding anode if the boolean combination of descriptorsbuild leads to a description that is more complexthan a given threshold.
For this threshold, we usethe complexity of descriptions identifying eachreferent individually, which is an enumeration.The generation of boolean combinations is acritical part of the algorithm, since it is its mosttime-consuming component.
Redundancies mustbe avoided, which requires more effort than pre-vious approaches due to our hierarchical organi-zation of property values.
This burden is splitbetween a static representation of implications,compiled from the underlying knowledge baseabout specializations, and the function Generate-Next, which accesses these data.
Four implicationshold between properties and their negations:implies (p,q) if specializes(p,q) holdsimplies (p,?q) if incompatible(p,q) holdsimplies (?p,q) if opposite(p,q) holdsimplies (?p,?q) if generalizes(p,q) holdsThen the predicates subsumes and redundant canbe defined for properties (or their negations):subsumes(p,q) ?
implies (q,p)redundant(p,q) ?
?
(subsumes(p,q) ?subsumes(q,p))The function Generate-Next (Figure 1) success-ively builds increasingly complex disjunctions ofdescriptors and their negation.
To start with, theprocedure Increment produces the next propertycombination with given complexity, if existing(1).
Otherwise (2), that complexity is augmented(9) before generating the next combination,unless the complexity limit is reached (8),causing a complexity cut-off .
For a propertycombination, it is tested whether all its propertiesare pairwise redundant (3), then the next combi-nation is built.
If a non-redundant combinationis found, it must pass the following tests:1.
It subsumes the target set (4).2.
It further reduces the set of distractors (5).3.
The reduced set of distractors is not equal toor a superset of the distractor associated witha sibling node already created; otherwise, adominance cut-off applies (6).If  successful, that combination is returned,otherwise building combinations is resumed (7).3.2 Enhancing the Best-First ProcedureWe have incorporated a number of improve-ments over the original version of the procedure:?
Treating linguistically motivated preferencesas options rather than restrictions?
Putting limitations on the complexity ofspecifications, to control comprehensibility?
Enhancing the expressive repertoire bydescriptions of subsets of referents and bydescriptions of referents to be excluded?
Producing a sequence of increasingly res-tricting descriptions rather than a single one.Procedure Generate-Next(Current-Prop-Comb)1 Nextprop ?
Increment(Current-Prop-Comb) (1)if Nextprop = nil then goto Step 2  endif (2)if redundant(p,q) for any p,q ?
Nextprop  (3)then goto Step 1 endifif subsumes(Nextprop,Properties-of(T))for all T ?
Target and (4)?subsumes(Nextprop,Props(D))for some D ?
Distractors(Best-Node) (5)and ?
Q ?
R, whereR = {subsumes(Properties-of(P),Nextprop)},Q ={subsumes(Properties-of(P),Description(N))}for all P ?
Distractors, (6)some N ?
successor(Best-Node)then return Nextprop (7)else goto Step 1 endif (Dominance cut-off)2 if (Score(Description(Best-Node)) +Score(Nextprop)) ?
Complexity-limit (8)then return nil (Complexity cut-off)else Nextprop ?
Increment-size(Nextprop)goto Step 1 endif (9)Figure 2.
Pseudo-code of descriptor generationIn the following, we summarize each of these(see (Horacek 2004) for details).The following linguistically motivated prefer-ences are treated as options: a boolean combina-tion of descriptors that express the category ofthe object (by a head noun) is chosen first, other(attribute) descriptors later, since a category mustbe chosen anyway.
Moreover, we reduce the setof potential solutions by excluding ?mixed?boolean combinations, that is disjunctions of acategory and attributes, such as car ?
red, whichare unnatural and awkward to express verbally.To strengthen comprehensibility, we specifylimitations on the surface form of descriptions,including places for the head noun, pre- andpostnominal modifiers, and relative clauses.Maximum numbers for each of these positionscan be given, also specifying places as alternativeones, thus limiting the number of components inconjoined expressions.
By associating descriptorswith surface positions they can take, these speci-fications allow one to control the surface struc-ture of the descriptions during searching.For partial descriptions with multiple disjunc-tions, recasting the expression built as a partialdescription is attempted to remain within givenlimits.
These descriptions are always of the form^ i=1,n (?j=1,mi P ij), where each P ij is a positive ornegative descriptor.
Even in moderately complexinstances of this conjoined expression, severalelements may consist of  disjunctions of morethan one descriptor.
In such a constellation,wepick up one disjunction, for example ?
j=1,mk Pkjfor some k, transforming that expression byapplying distributivity.
This amounts to parti-tioning the set of intended referents into subsets,where each of the components of the new toplevel disjunction describes one of these subsets.Consider, for example, ?the sportscars that arenot red and the small trucks?
identifying x5, x7,x8, and x12 in two components rather than by theinvolved one-shot ?the vehicles that are a sports-car or small, and either a truck or not red.?
Inaddition, descriptions may specify exceptions:describing some of the referents to be excludedmay lead to shorter expressions than expandingthe description of the intended referents, so thatwe integrate it in the expressive repertoire ?
forexample, ?the vehicles on the right, but not thered truck?, identifying x 1 , x 3 , and x 6  byexcluding x7 in the locally restricted context.In accordance with these specifications, thebest-first search is invoked to produce an identi-fying description.
This may not always bepossible in complex situations.
If this is the case,the best partial solution is taken, and the search isrepeated within the restricted context defined bythe descriptions generated so far.
By this proce-dure, a sequence of descriptions is generatedrather than a single one.
Consider, for example,?one of the trucks and the sportscars, all notwhite.
The truck stands on the right?, identifyingx6, x7, x11 and x12 out of all 12 vehicles (in Figure1) in two passes.3.3 An ExampleWe illustrate the behavior of the system by asmall example.
Let {x1, x3, x6} in Figure 1 be theset of intended referents.
Specifications for max-imum complexity of surface forms allow headnouns, pre- and postnominal modifiers, at mostone of them as a conjoined expression, and arelative clause or a ?but?-modifier expressingan exception.
Only two descriptors apply to allintended referents, vehicle  and right .
Even ifvehicle is chosen first, subsequent searching onlyexpands on the partial description with right,since it excludes a superset of the objects vehicledoes: only x7 is remaining.
The next simplestdescriptor combination is car ?
white, whichwould allow complete identification of the inten-ded referents.
Since it can only be expressed bya relative clause, for which conjoined expressionsare not allowed, recasting the description isattempted.
This yields  (car ^ right)  ?
(white ^right), which is a possible solution.
Since a headnoun is required for the second part, adding afurther descriptor, an attempt is made to improvethe solution, through finding an alternative to car?
white.
Describing the complement constitutessuch an alternative, since identification isrequired for x 7  only.
This can be done byselecting t ruck  and, afterwards, any of thedescriptors red, small, and old (let us say, we pickred).
This yields right ^ ?
(truck ^ red) as analternative solution, with vehicle being added toobtain a head noun.
Altogether, a surface gener-ator could then generate ?the vehicles on theright, but not the red truck ?, resp.
?the cars andthe white vehicle, both on the right?
?
the latterwith a clever aggregation module.4 Experimental ResultsWe have implemented the algoritm in CommonLisp, on an Intel Pentium processor with 2600MHz.
In the following elaborations, we usenatural language descriptions for reasons ofreadability, even though our algorithm onlyproduces boolean combinations of descriptors.We evaluate our algorithm from threeperspectives: 1) effects of the linguistically moti-vated restrictions, 2) effectiveness of the cut-offtechniques, and 3) the behavior in scaling up forlarger examples.
For this purpose, we have builtall subsets of two, three, and four vehicles, out ofthe vehicles x1 to x6, which yields 50 cases.In order to test the effects of the linguisticallymotivated reductions,  we have used  two versionscut-offs (v=value, d=dominance, c=complexity)v&d&c v&c d&c c v&d d vtime (msec)minimum 10 10 60 90 10 90 10maximum 690 1150 1910 19210 1100 4550 2320average 121.5 131.6 354.8 1133.1 140.5 595.0 168.1tree size (nodes)maximum 9 71 11 945 9 11 71average 2.2 3.86 2.33 61.64 2.2 2.33 3.88Table 1.
Searches comparing effects of cut-offsof the 50 cases, one with all properties, and onewithout size and age.
In these runs, the maximumnumber of descriptors chosen was 5, and searchtrees grew up to 9 with and 20 nodes withoutusing the linguistically motivated reductions.
Theaverage search times were 127.7 resp.
440.5msec, with a maximum of 950 resp.
2590 msec.In order to compare the effectiveness of thecut-off techniques, we have run the same sampleof 100 cases (50 with and 50 without size andage), with all combinations of at least one cut-offtechnique.
Table 1 illustrates the results.
Amongothers, they demonstrate that search times are notproportional to tree sizes, since a lot of effort isdevoted to justify the avoidance of expansions,which varies among cut-off techniques.
It turnsout that the value cut-off is the most effectiveone, which underpins the importance of findinga solution quickly.
Looking at individualexamples reveals that the complementary effectsof dominance and complexity cut-offs are signi-ficant only for examples with larger solutions.Finally, we have tested the algorithm's scala-bility, by increasing the number of distractors,with up to 25 vehicles (similar to x1 to x12, butdistinct from one another).
The same 100 caseshave been used as before, with all cut-off criteria.The results appear in Table 2.
They demonstratethat the problem tends to get unmanagable formore than 12 distractors in both search time andnumber of descriptors needed for identification,the latter being the reason for the former.However, descriptions consisting of up to 10descriptors are unlikely to be understandable forhumans, anyway ?
consider, for example, ?thecars which are not blue, are old or stand in thecenter, are new or stand on the right side, are bigor not white, and are small or not red?
(108110msec, identifying x 3 , x 4 , and x 6  out of 25vehicles).
For such complicated cases, identifyingobjects is broken down into simpler tasks (seeSection 3.2).
Conversely, useful results may beobtained for a large number of distractors ?
forexample, ?the old cars on the right side?
(120msec, identifying x3 and x6 out of 25 vehicles).nr.
of distractors6 7 8 9 10 12 15 20 25time (msec)minimum 10 10 10 10 10 30 60 100 120maximum 490 2300 3880 4100 4430 6530 53390 88120 141200average 116 282 417 484 7051120 5366 12325 24838max nr.
oftree nodes 9 10 12 16 27 61 106 303 907descriptors 5 5 5 5 5 5 6 8 10Table 2.
Searches with varying sets of distractors5 ConclusionWe have presented a system that can producereferring expressions for identifying sets ofobjects.
It has a number of exceptional features,including several efficiency-enhancing measures,the incorporation of exclusion descriptions, andpartitioning the identification task into subtasks.The results show that our system has an increasedrepertoire compared to its predecessors, and itcan compute these expressions reasonably fast.ReferencesJohn Bateman 1999.
Using Aggregation for SelectingContent when Generating Referring Expressions.
InProc.
of 37th Annual Meeting of the Association forComputational Linguistics (ACL'99), pp.
127-134.Robert Dale and Ehud Reiter 1995.
Computational Inter-pretations of the Gricean Maxims in the Generationof Referring Expressions.
Cognitive Science 18:233-363.Claire Gardent 2002.
Generating Minimal DefiniteDescriptions.
In Proc.
of 40th Annual Meeting ofthe Association for Computational Linguistics(ACL'2002), pp.
96-103.Helmut Horacek 2003.
A Best-First Search Algorithmfor Generating Referring Expressions.
In Proc.
of10th Conference of The European Chapter of theA s s o c i a t i o n  for Computational Linguistics(EACL'2003), short paper, pp.
103-106.Helmut Horacek 2004.
On Referring to Sets of ObjectsNaturally.
In Proc.
of Third International NaturalLanguage Generation Conference (INLG-2004).Emiel Krahmer, Sebastiaan van Erk, and Andr?
Verleg2003.
Graph-Based Generation of Referring Expres-sions.
Computational Linguistics, 29(1):53-72.Matthew Stone 2000.
On Identifying Sets.
In Proc.
ofFirst International Natural Language GenerationConference (INLG-2000), pp.
116-123.Kees van Deemter 2002.
Generating ReferringExpressions: Boolean Extensions of the IncrementalAlgorithm.
Computational Linguistics, 28(1):37-52.
