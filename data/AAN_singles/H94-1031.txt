ISSUES AND METHODOLOGY FOR TEMPLATE DESIGNFOR INFORMATION EXTRACTIONBoyan OnyshkevychDepartment of  DefenseAttn: R525Fort George G. Meade, MD 20755baonysh@afterlife.nese.milABSTRACTThe goal of Information Extraction tasks is to identify, categorize,classify, relate, and normalize specific information of interestfound in free text, and to make that information available to aback-end ata base, data fusion, or other application.
A data struc-ture referred to as a template is typically used for capturing suchinformation, particularly in cases where the amount and complex-ity of information is substantial.
The design of the template forsuch/m application (or exercise) thus defines the task itself andtherefore crucially affects the success of the Information Extrac-tion attempt.This paper discusses template structure and methodological issueswhich arise in the template design process, within the context of adiscussion of the design process itself; this paper is based on thetemplate design process for TIPSTER/MUC5 and certain subse-quent Information Extraction exercises.
The first section of thispaper addresses the issue of selection of the appropriate data rep-resentation (text annotation vs. flat template representation vs.object-oriented template).
The second section outlines a set ofhigh-level design considerations (desiderata) that have emerged;these desiderata feed into the discussion of design elements and aprocedural review of the design process (design iterations, use ofthose linguistic analysis tools, etc.)1.
Data Structure SelectionAlthough the selection of an appropriate data structure for repre-senting extracted ata may be influenced by the data structurerequirements of the back-end application, the use of straightfor-ward deterministic data format converters can further decouplethose two data structure requirements.
Thus a data structure can beselected to be appropriate for the data extraction task itself.The data structures for Information Extraction fall into three broadcategories: text annotation, fiat data templates, and object-orientedtemplates.
The appropriateness of those three formats to a particu-lar task is primarily based on the richness of the required atacomplex.If a task calls for a small number of primitive data types, with norequirements for representing interrelations among primitive datatypes, text annotation may be the simplest representation.
Thisdata structure is renderable as tagging delimited text segmentswith appropriate ags from SGML or another mark-up language(or, equivalently, by an auxiliary file for each document with thetag associated with an offset into that document file).
For exam-ple, the data from the task of finding company and product namesin a text may be most appropriately represented by an annotationscheme.
However, if the task also requires the identification ofcoreferences among names or references in a text and/or associa-tion of other attributes of those elements, a template structure maybe more appropriate.Flat templates, such as those used in MUC3/MUC4, associaterelated ata elements (either strings from the text, categorizationof data, or normalized ata).
Each such template thus represents adata complex of related information; each complex of data fromthe text will result in another template (with the same structure)being instanfiated.
A fiat template's structure is thus a set of slots(naming the attribute), each with zero, one, or more possible fills(such as strings from the text, numbers, or symbols from a pre-defined se0.The MUC3/MUC4 templates were flat data structures with 24slots; there was a requirement torepresent relationships betweendata elements in different slots, which led to some awkwardness.For example, in order to correlate the name of a terrorist targetwith the nationality of that target, a "cross-reference" notation hadto be introduced.In response to such difficulties and because of the richness of therequired ata complex, the data structure for tasks such as theTIPSTER/MUC5 task is most appropriately object-oriented.
Inother words, instead of using one template to capture all the rele-vant information, there are multiple sub-template ypes (objecttypes), each representing related information, as well as the rela-tionships to other objects.
A completed (or instantiated) templateis a set of filled-in objects of different types, representing the rele-vant information from a particular document.
Each object huscaptures information about one thing (entity), an event, or aninterrelation between other objects, A filled-in template for a par-ticular document may, therefore, have zero, one, or more objectinstanfiations ofa given type, A completed template will typicallyhave multiple objects of various types, interconnected bypointersfrom object o associated object.
If there is no information i  thedocument to fill in a given object, that object is not incorporatedinto the completed template.
If a given document is not relevantto the domain, no objects are instantiated (possibly beyond a"header" object which holds the document number, date of analy-sis, etc.1712.
Design DesiderataThe design of the template needs to balance a number of (oftenconflicting) goals, as reflected by these desiderata, which applyprimarily to object-oriented templates but also have applicabilityto fiat-structure t mplates as well.
Some of these desiderata reflectwell-known, good data-base design practices, whereas others areparticular to Information Extraction.DESCRIPTIVE ADEQUACY - the requirement for a tem-plate to represent all of the information ecessary for thetask or application at hand.
At times the inclusion of onetype of information requires the inclusion of other, sup-porting, information (for example, measurements requirespecification of units, and temporally dynamic relationsrequire temporal parametrization).CLARITY - the ability to represent information i the tem-plate unambiguously, and for that information to be manip-ulable by computer applications without further inference.Depending on the application, any ambiguity in the textmay result in either epresentation f that ambiguity in thetemplate, or representation f default (or inferred) values,or omission of that ambiguous information altogether.DETERMINACY - the requirement that there be only oneway of representing a given item or complex of informa-tion within the template.
Significant difficulties may arisein the information extraction application if the same inter-pretation of a text can legally produce differing structures.PERSPICUITY - the degree to which the design is concep-tually clear to the human analysts who will input or editinformation in the template or work with the results; thisdesideratum becomes lightly less important if moresophisticated human-machine interfaces are utilized, or if ahuman is not "in the loop".
Using object types whichreflect conceptual objects (or Platonic ideals) that arefamiliar to the analysts facilitates understanding of thoseobjects, thus the template.
Perspicuity is facilitated byenforcing separation of event, entity, and relational infor-mation; for example, instead of having a buyer object anda seller object in a sales event (where both are compa-nies), having a company object more closely parallels theconceptual kind (the roles of the companies would bereflected by the semantics of the slots that point to them inthe sa les  event object).MONOTONICITY -a requirement that the template designmonotonically (or incrementally) reflects the data content.Given an instantiated template, the addition of an item ofinformation should only result in the addition of newobject instantiations or new fills in existing objects, butshould not result in the removal or restructuring ofexistingobjects or slot fills.
Violation of this desideratum ay leadto "keystone" effects, where one missing item of informa-tion results in a radically different template structure.SINGULARITY - this requirement s ates that a real-worldentity or event maps to only one element in the template,and that if it plays multiple roles, pointers are used to thatone element.
When viewing an instantiated template as agraph (objects and fillers as nodes, slots as arcs), singular-ity states that there should be only one node representing aspecific real-world entity, relation, or event.
Note that insome eases, where time is a critical parameter and the tem-plate tracks a dynamic situation, time may be associatedwith a particular entity, event, or relation; objects with dif-ferent ime indicators effectively identify different refer-ents and thus map to different objects (the ACTIVITYobject in the TIPSTER Joint Venture template illustratesthis).
Unlike this recommendation against one-to-manymapping, the converse situation may occur, but needs to becarefully monitored to minimize monotonicity violations.For example, if a group of 39 companies together plays acertain role, it may be impractical nd unnecessary to inde-pendently represent each one; but one may need to be sin-gled out and hence be separately represented.?
APPLICATION CONSIDERATIONS - the particular taskor application may impose structural or semantic on-straints on the template design; for example, a requirementfor use of a particular evaluation methodology or systemfor evaluation may impose practical limits on embedded-ness and linking.One other consideration comes into play when there is a current orpotential requirement for multiple template designs in similar ordisparate domains.?
REUSABILITY - elements (objects) of a template arepotentially reusable in other domains; eventually a libraryof such objects can be built up, facilitating template build-ing for new domains or requirements.3.
Design ElementsIn addition to any ancillary supporting materials required by thedomain (such as gazetteers orname lists), three definitional docu-ments or knowledge sources provide the information ecessary todefine the syntax and semantic of the template and to define theprocess of filling it.3.1.
Template DefinitionThe basic syntactic definition of the template defines the structureof the template, including specification of all object slots and typedefinition of legal slot fillers.
For those slots which are filled bypointers, an indication of the legal types of the pointer eferents iincluded; similarly, for slots which contain set fills (or classifica-tions or categorizations from a finite set of categories), the set ofpossible fills is defined by enumeration.
For TIPSTER and someother subsequent Information Extraction tasks, a BNF-like tem-plate definition language is utilized (see Appendix below).As part of a support effort to TIPSTER, the Computing ResearchLaboratory of New Mexico State University produced a graphicalinterface-driven tool to support he definition of a template; thetool produces not only a BNF definition for the new templatedesign, but also compilable source code for a MOTIF-based toolfor manually filling in templates (along with supporting routines).1723.2.
Rules of InterpretationThe semantics of the template are defined in another document(this was called the Template Fill Rules document in TIPSTER).In addition to providing definitions of various terms or concepts,the Rules of Interpretation (ROI) document presents reportingconditions.
The document eeds to specify when anything at all isto be instantiated for a given document.
Then reporting (i.e.,instantiation) conditions need to be specified for each object ype.The conditions specify when there is enough information i thetext to instantiate he particular object; this may be defined interms of how information appears in the text (e.g., centrally vs.peripherally), ora specification ofa minimum number of slots thatneed to be filled in order for the object o be valid.
The semanticsof each object ype is also specified in the ROI.For each given slot, then, the reporting conditions are specified.The ROI defines the semantics ofeach slot, as well as detailing thespecification of legal fills (and the translation from text to fill for-mat).
For set fills, the ROI defines each symbol from the set andspecified reporting conditions.
For string fills, the extent of thestring (i.e., what elements from the text get included in the string?
)is defined along with any normalization that is to be done on thestring.3.3.
Case LawSince the definitions in the ROI are not likely to capture verypossible ventuality (even the most diligent case), they are supple-mented by a set of examples.
These examples may either be incor-porated into the ROI document in each appropriate section, orcompiled into a separate document or collection.
The templatedesigner should not expect hat this collection becomes fixed,because as new language usage, new types of information, orpre-viously unseen reportable event ypes occur, the case law collec-tion needs to be increased to document the analyst's handling ofthe new data and to ensure conformity for future occurrences.
Theexamples that need to be added to this collection include any situ-ations where it is not perfectly clear how the rules in the ROIapply, as well as cases which are fairly complex and where havinga guide helps the analyst in constructing the template.
Violationsof the desiderata above (particularly determinacy) increase theneed for a case law collection.4.
Design MethodologyThe design process of an appropriate template structure for a com-plex task is necessarily an iterative one.
After an initial sketch, thetemplate lements should undergo tuning based on corpus analy-sis.
Then the template is subjected to iterarive refinement basedon difficulties and novel inputs encountered while filling a numberof templates manually.4.1.
Template SketchAn initial template sketch is devised to reflect he task require-ments as understood by the customer, and constructed adhering tothe desiderata above.
If available and appropriate, objects from atemplate object library (or from previous template designs) areutilized in this initial template draft, with unnecessary slots beingpruned.In the object-oriented data structure paradigm, objects typicallyfall into one of three types: entities, events, and relations.?
Ent i ty  objects represent a conceptual object and itsattributes; the objects typically represent some type of real-world entity such as a person, an organization, a product, acompany, etc.
Entity objects may also be used to representsuch things as times and locations (in isolation) that otherentities, events, or relations may point to; for example, alocation object may include various types of informationabout a place (coordinates, name, elevation, etc.)
and maybe pointed to by an organization asits location, by a trans-portation event as the destination, etc.?
Event objects represent real-world actions or processes.The event object will typically have pointers to objects rep-resenting the participants in the event, and may includeslots representing the parameters orresults of the event.
Atypical example may be a sal.es event object with pointersto the buyer and se\].\].er (each represented byan object).?
Relation objects reflect relations between entities, or rela-tions between events; relations between an event and anentity are typically reflected by a pointer in a slot on anevent object.
Relations are often collapsible into a slot/pointer epresentation, but there are some compelfing rea-sons to retain them as separate objects instead.
An exampleof an entity/entity relation is the relation between a per -son object and a company object which specifies the role(such as P res ident  or CgO) that the person has in thatcompany.
In a task setting where tracking the changes inleadership of companies i important, instead of maintain-ing an oft '?cers lot on a compeuay, (or a pos i t2on sloton a person object) a relation object is preferred, withpointers to company and person, an indicator of the posi-tion, and a time stamp (to capture change).In the template, a given event, entity, or relation from the domainmay either be represented by an appropriate object, as describedabove, or may be collapsed into a slot value (attribute) of anotherobject.
Typically if only one or two elements of information abouta particular entity, event, or relation are needed, it is more expedi-ent and concise to collapse that potential object into a single ormultiple-valued slot.
For example, if an object representing a com-pany captures the headquarters location by the place-name only,(and no further geographic or gazetteer information isnecessary),then a slot on the company object with a simple string fill is prefer-able to a pointer to a separate location object which just representsthe name of the location.Two or even three elements of associated information can betreated as a composite slot fill instead of a two- or three-slotobject.
One strong reason to maintain a cluster of associated infor-marion as a separate object (even if it only consists of one, two, orthree elements) is the singularity desideratum.
For example, a per-son may have multiple roles in a particular template, and the onlyinformation that is maintained about hat individual is the name.
Inthis case it may be worthwhile to maintain a distinct personobject with that information, even if it only has one slot.
Thismechanism explicitly indicates coreference of the multiple person173references; in the various roles, instead of relying on string equalityto indicate coreference.
Perspicuity may be increased by thisapproach, despite the proliferation of objects, because of the intui-tive correlation of one template object with one real-world object.4.2.
Cor lms-Based TuningThis initial template is augmented or further pruned to reflect hedata.
If a certain item of information is not found in a substantialsample of the text corpus, and it is not a critical datum, pruning isindicated.
Data categorization r association of multiple data ele-ments is often more complicated than initially envisioned; forexample, the list (with percentages) of owners of a company is notstatic, therefore ither a reference time is specified by fiat, or thatinformation is associated with a time data element.Tools such as KWIC, mutual information, or n-gram analysis canbe utilized to identify the typical context of relevant informationelements in a text corpus.
For example, KWIC on 'joint venture'helps idenlify the different activities or situations that joint ven-tures appear in, thus identifying possible renderable data elementsrelating information about joint ventures in a template.The steps below identify one possible path in tuning a draft tem-plate to the corpus.?
Identify the key entity types in your requirement; find outtypical ways that those data elements are expressed in thetext.
For example, if companies are key entities, the corpusmay reveal that companies may be referred to by name (inwhich case markers uch as Inc. and Ltd. identify someoccurrences) or by definite reference ("the company" or"the manufacturer" may identify such).
It is not necessaryto identify all the different ways the entity can be refer-enced at this stage; however, in some cases it will be possi-ble to easily enumerate a large percentage of the ways inwhich something is referenced.?
Using these tags or markers, find the references in a non-trivial set of documents (100 or more) to that entity.
Evalu-ate the context in which these references occur; which ofthe semantic ontexts are of relevance to the domain?
Anycontexts that have not been addressed but are of interest orare necessary for coherence of the representation need tobe added to the template definition.
This analysis will helpevolve the event and relation object definitions.
For exam-ple, in the Joint Venture template, such analysis of the cor-pus revealed examples where the joint venture "expanded"or "increased", and the decision was made to add that situ-ation to the status set fill list.?
Now given the contexts identified above (and marked, forexample, by specific verbs), search the corpus for theoccurrences of those markers and identify the contexts.
Anexamination of those text fragments will reveal two things:1) other ways that the entities may be referenced in the text(such as indefinite or generic references) and 2) otherentity types that can participate in the same contexts as theentities of interest.
An evaluation of the former will helpdetermine the reporting conditions for the entity, while anevaluation of the latter is necessary to determine which ofthe new entity types should be reported.
For example, inthe Joint Venture corpus, this analysis reveals that consor-tia appear in the same roles as companies and govern-ments, and a determination was needed as to theirreportability and the categorization f that type of entity.This process may be iterated, and repeated on each entity/event or entity/relation f interest in the template.Techniques for identifying information particular to thegiven domain include finding differentials between theword or n-gram frequency lists for the domain corpus andfor a general corpus.
Any term that appears more in thedomain corpus (vs. a general corpus) needs to be evaluatedfor inclusion in the template; in some cases the terms iden-tify relevant concepts, in others these concepts are beyondthe scope of what needs to be tracked.
However, some ofthe concepts or terms that are of, relevance (such as tempo-ral expressions or common actions) will be equally fre-quent in various corpus types, in which case this techniquewill not identify them.
This technique is similar to NewMexico State University's statistical filter for TIPSTER.In general, for each newly-identified data type (to includeclasses in a set-fill), a decision eeds to be made: 1) don'treport it at all; 2) report it by coercing it into an existingdata type, (e.g,, declaring that consortia re the same classas companies); or 3) expand efinition to handle new datatype (e.g., adding a consortia class to the set fill list).4.3.
Iterative RefinementThe template undergoes a cycle of further efinement throughmanual filling of the template based on a substantial number ofdocuments; based on the complexity of the template and diversityof text types and sources, the number equired for this cycle couldbe 300 or more.
In fact, the template could be subject to modifica-tion throughout the lifetime of the task (based on novel inputs), buttypically operational stability will require freezing the templatedefinition; the ROI may be subject o update to reflect he codingdecisions made on novel inputs, particularly if that input may beexpected to reoccur.
In an operational environment, such ROIaugmentation may still be conducted to reflect new inputs, so longas care is taken to avoid any changes affecting previously filleddocuments.
In fact, in order to maintain consistency (if there aremultiple systems and/or human analysts creating or modifyingtemplate instantiations) such changes to the ROI and especially thecase law collection are desirable.When a change is made to the template or ROI, the existing bodyof filled templates may be affected.
In some cases the appearanceof a new type of relevant information may require reworking theexisting template structure or the partitioning reflected in a set filllist; in such case, the impact on the template corpus is substantial,and a decision eeds to be made whether to update the older ver-sions (depending on operational need).
In other cases, an additiondoesn't impact he corpus at all, for example, when adding a previ-ously-unseen currency type to the set fill fist of currency types.
Inour experience, different analysts interpret rules in the ROI withdifferent degrees of strictness, which may lead to new informationtypes escaping unnoticed; for example, some analysts might treat174consortia s companies without giving it a second thought,whereas others would identify that they are not companies, trictlyspeaking, and require a ROI or case law clarification of that situa-tion.At occasional points in the iteration, the template should bereviewed in its totality for violations of the desiderata.
When vio-lations are identified, manually running through some (reasonable)worst-case scenarios will help identify whether those violationswifl cause problems, thus should be addressed, orwhether restruc-turing would cause more problems (e.g., in perspicuity) than leav-ing the structure as is.The corpus-based tuning and iteration process described abovedirectly addresses the descriptive adequacy desideratum.
Thedeterminacy desideratum can also be addressed by the iterationprocess, in particular by using more than one analyst to indepen-dently create a set of templates for the same set of documents;some of the discrepancies between the independent codings willhighlight determinacy violations.
Additionally, the independentcodings may identify perspicuity violations (where an analyst didnot understand the template structure or notation).The effects of violations of some of these desiderata in the TIP-STER templates are discussed in "Template Design for Informa-tion Extraction" in the proceedings of the TIPSTER program, aswell as in the Proceedings of the Fifth Message UnderstandingConference.5.
Appendix: BNF for Template DefinitionExcept as specified, the notation below is for thetemplate definition.< ... >data  object type (i.e., if indicated as afiller, any instantiation of that dataobject type is allowable).
Every newinstantiation is named by the type concat-enated with: ' - ' ,  the normalized documentnumber, '-', and a one-up number foruniqueness.
The angle-brackets areretained in the instantiation, as a typeidentifier/delimiter.
:= what follows is the structure of the dataobject for template definitions, or thecontents of the instantiated object forinstantiated templates/: what follows is a specif ication of theallowable fillers for this slot in a tem-plate definition, or the filler of theslot in an instantiated template.
:: what follows is the set itemization in thetemplate definition.{...}
choose one of the elements from the ...list.
Note that one of the elements (typi-cally "OTHER") may be a string fill whereinformation which does not fit any of theother classes is represented (as astring); this set element would be identi-fied by double quotes in the definition,and delimited by double quotes in thefill.{{...}}#<.
.
.
{^I(...)((...))choose one element from the set named by...(like {...} except that the list is toolong to fit on the line)...}#>these delimiters identify a hierar-chical set fill item.
The first term after#< is the head of the subtree being definedin this term, and is itself a legal setfill term.
What follows that term is a setof terms which are also allowable set fillchoices, but are more specific than thehead term.
The most specific term speci-fied by the text needs to be chosen.
Forexample, the term #<RAM {DRAM, SRAM}#>means that RAM, DRAM, and SRAM are alllegal fills; if the text specifies DRAM,then choose DRAM, but if the text specifiesjust RAM, then select RAM.
In scoring, spe-cial consideration will be given when anancestor of a term is selected instead ofthe required one (as opposed to scoring 0as in the case of a flat set fill).
Notethat items in the set (i.e., inside the {... }) can themselves be hierarchicalitem.
Note that one of the elements (typi-cally "OTHER") may be a string fill whereinformation which does not fit any of theother classes is represented (as astring); this set element would be identi-fied by double quotes in the definition,and delimited by double quotes in the fill.one or more of the previous structure; new-line character separatesmultiple structureszero or more of the previous structure;newline character separates multiplestructures; if zero, leave blankzero or one of the previous structure, butif zero, use the symbol ~-" instead ofleaving posit ion blankexactly one of the previous structureOR (refers to specification, not answersor instantiations)delimiters, no meaning (don't appear ininstantiations) NB: DOES NOT MEAN"OPTIONAL'delimiters, doesn't appear in instantia-tion, but contents are OPTIONAL but eitherall the contents appear, or none of them,in the case where there are no connectors(e.g., I) or operators (e.g., + or ^)within these delimiters: for example, withA ((B C)) D, only A D and A B C D arelegal.
If there is a connector inside thesedelimiters, then the either null or one ofthe forms are allowed fills: ((A I C))means that the legal fills are i) empty 2)A, and 3) C. Note that these delimitersessentially mean that the contents appear175? "
I " "" ( ,-) ,W\[,..\]\ [ \ [ .
.
\ ] \ ]zero or one times.
Also note that"OPTIONAL" here means that the positionare left blank if no info, not that scor-ing treats these terms as optional.Disjunction of the terms (XOR)escape for the paren (i.e., the parenappears in the slot fill in that position)escape for the right parenany string (from the text, except for COM-MENT fields).
The quotes remain in theinstantiation around non-null-stringfills.any string (from the text); the ... may bea descriptor of the fill.
The quotesremain the instantiation around non-null-string fills.normalized form (see discussion for formspecifications).range; select integer from specifiedrange; left-pad integer fills with O's, ifnecessary, to conform to number of digitsusedThis notation is for answer key templatesonly (test or development), not for systemanswers.
The slash indicates a disjunction(X0R) of al lowed answers.
Each disjunctappears on a new line.
If the / appears asthe first character of a slot filler, thena null answer (i.e., no fill) is an allow-able fill.
If multiple fillers are allowed(by a + or * notation) for the slot, thenthe possible fillers are given in disjunc-tive normal form (variable number of con-juncts per disjunctive term), for example,(disregarding the new-lines): / NICHROMEGOLD / NICHROME GOLD TUNGSTEN TITANIUMwould mean that the three allowed answersare I) (empty string),2) NICHROME GOLD,and 3) NICHROME GOLD TUNGSTEN TITANIUM.
Anobject can be indicated as being optionalif (all) pointers to that object appearafter a /.
System answers are not allowedto offer optional or alternate fills(answers).6.
REFERENCES1.
Proceedings of the TIPSTER Text Program, Phase One.forthcoming.2.
Proceedings of the Third Message Understanding Confer-ence (MUC-3).
San Francisco: Morgan Kaufrnan, 1991.3.
Proceedings of the Fourth Message Understanding Confer-ence (MUC-4).
San Francisco: Morgan Kaufman, 1992.4.
Proceedings of the Fifth Message Understanding Confer-ence (MUC-5).
forthcoming.Unless otherwise marked (i.e., by +, -, or ^), aslot may be left blank if the information isabsent in the text.
If a structure descriptor isnot terminated'by +, *, -, or ^, then zero or oneof the structure are allowed.
If two (or more)structure descriptors are given without a connec-tor between them and without either one beingmarked by +, *, -, or ^, then either both appearor neither appears: \[NUMBER\] 'C' means that 423 Cis a legal fill, but 423 is not, nor is just C.176
