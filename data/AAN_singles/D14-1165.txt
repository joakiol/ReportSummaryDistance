Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 1568?1579,October 25-29, 2014, Doha, Qatar.c?2014 Association for Computational LinguisticsTyped Tensor Decomposition of Knowledge Bases for Relation ExtractionKai-Wei Chang?
?Wen-tau Yih\Bishan Yang?
?Christopher Meek\?University of Illinois, Urbana, IL 61801, USA?Cornell University, Ithaca, NY 14850, USA\Microsoft Research, Redmond, WA 98052, USAAbstractWhile relation extraction has traditionallybeen viewed as a task relying solely ontextual data, recent work has shown thatby taking as input existing facts in the formof entity-relation triples from both knowl-edge bases and textual data, the perfor-mance of relation extraction can be im-proved significantly.
Following this newparadigm, we propose a tensor decompo-sition approach for knowledge base em-bedding that is highly scalable, and is es-pecially suitable for relation extraction.By leveraging relational domain knowl-edge about entity type information, ourlearning algorithm is significantly fasterthan previous approaches and is betterable to discover new relations missingfrom the database.
In addition, when ap-plied to a relation extraction task, our ap-proach alone is comparable to several ex-isting systems, and improves the weightedmean average precision of a state-of-the-art method by 10 points when used as asubcomponent.1 IntroductionIdentifying the relationship between entities fromfree text, relation extraction is a key task for ac-quiring new facts to increase the coverage of astructured knowledge base.
Given a pre-defineddatabase schema, traditional relation extractionapproaches focus on learning a classifier using tex-tual data alone, such as patterns between the oc-currences of two entities in documents, to deter-mine whether the entities have a particular rela-tion.
Other than using the existing known factsto label the text corpora in a distant supervisionsetting (Bunescu and Mooney, 2007; Mintz et al.,?Work conducted while interning at Microsoft Research.2009; Riedel et al., 2010; Ritter et al., 2013), anexisting knowledge base is typically not involvedin the process of relation extraction.However, this paradigm has started to shift re-cently, as researchers showed that by taking exist-ing facts of a knowledge base as an integral part ofrelation extraction, the model can leverage richerinformation and thus yields better performance.For instance, Riedel et al.
(2013) borrowed theidea of collective filtering and constructed a ma-trix where each row is a pair of entities and eachcolumn is a particular relation.
For a true entity-relation triple (e1, r, e2), either from the text cor-pus or from the knowledge base, the correspond-ing entry in the matrix is 1.
A previously unknownfact (i.e., triple) can be discovered through ma-trix decomposition.
This approach can be viewedas creating vector representations of each relationand candidate pair of entities.
Because each entitydoes not have its own representation, relationshipsof any unpaired entities cannot be discovered.
Al-ternatively, Weston et al.
(2013) created two typesof embedding ?
one based on textual similarity andthe other based on knowledge base, where the lat-ter maps each entity and relation to the same d-dimensional vector space using a model proposedby Bordes et al.
(2013a).
They also showed thatcombining these two models results in a signif-icant improvement over the model trained usingonly textual data.To make such an integrated strategy work, it isimportant to capture all existing entities and rela-tions, as well as the known facts, from both tex-tual data and large databases.
In this paper, wepropose a new knowledge base embedding model,TRESCAL, that is highly efficient and scalable,with relation extraction as our target application.Our work is built on top of RESCAL (Nickelet al., 2011), which is a tensor decompositionmethod that has proven its scalability by factoringYAGO (Biega et al., 2013) with 3 million entities1568and 41 million triples (Nickel et al., 2012).
Weimprove the tensor decomposition model with twotechnical innovations.
First, we exclude the triplesthat do not satisfy the relational constraints (e.g.,both arguments of the relation spouse-of need tobe person entities) from the loss, which is doneby selecting sub-matrices of each slice of the ten-sor during training.
Second, we introduce a math-ematical technique that significantly reduces thecomputational complexity in both time and spacewhen the loss function contains a regularizationterm.
As a consequence, our method is more thanfour times faster than RESCAL, and is also moreaccurate in discovering unseen triples.Our contributions are twofold.
First, comparedto other knowledge base embedding methods de-veloped more recently, it is much more efficientto train our model.
As will be seen in Sec.
5,when applied to a large knowledge base createdusing NELL (Carlson et al., 2010) that has 1.8Mentity-relation triples, our method finishes trainingin 4 to 5 hours, while an alternative method (Bor-des et al., 2013a) needs almost 3 days.
Moreover,the prediction accuracy of our model is competi-tive to others, if not higher.
Second, to validate itsvalue to relation extraction, we apply TRESCAL toextracting relations from a free text corpus alongwith a knowledge base, using the data providedin (Riedel et al., 2013).
We show that TRESCALis complementary to existing systems and signif-icantly improves their performance when using itas a subcomponent.
For instance, this strategy im-proves the weighted mean average precision of thebest approach in (Riedel et al., 2013) by 10 points(47% to 57%).The remainder of this paper is organized as fol-lows.
We survey most related work in Sec.
2 andprovide the technical background of our approachin Sec.
3.
Our approach is detailed in Sec.
4, fol-lowed by the experimental validation in Sec.
5.
Fi-nally, Sec.
6 concludes the paper.2 Related WorkOur approach of creating knowledge base em-bedding is based on tensor decomposition, whichis a well-developed mathematical tool for dataanalysis.
Existing tensor decomposition modelscan be categorized into two main families: theCP and Tucker decompositions.
The CP (CAN-DECOMP/PARAFAC) decomposition (Kruskal,1977; Kiers, 2000) approximates a tensor by a sumof rank-one tensors, while the Tucker decompo-sition (Tucker, 1966), also known as high-orderSVD (De Lathauwer et al., 2000), factorizes a ten-sor into a core tensor multiplied by a matrix alongeach dimension.
A highly scalable distributionalalgorithm using the Map-Reduce architecture hasbeen proposed recently for computing CP (Kang etal., 2012), but not for the Tucker decomposition,probably due to its inherently more complicatedmodel form.Matrix and tensor decomposition methods havebeen applied to modeling multi-relational data.For instance, Speer et al.
(2008) aimed to cre-ate vectors of latent components for representingconcepts in a common sense knowledge base us-ing SVD.
Franz et al.
(2009) proposed TripleRankto model the subject-predicate-objectRDF triples in a tensor, and then applied the CPdecomposition to identify hidden triples.
Fol-lowing the same tensor encoding, Nickel et al.
(2011) proposed RESCAL, a restricted form ofTucker decomposition for discovering previouslyunknown triples in a knowledge base, and laterdemonstrated its scalability by applying it toYAGO, which was encoded in a 3M ?
3M ?
38tensor with 41M triples (Nickel et al., 2012).Methods that revise the objective functionbased on additional domain information have beenproposed, such as MrWTD, a multi-relationalweighted tensor decomposition method (Londonet al., 2013), coupled matrix and tensor fac-torization (Papalexakis et al., 2014), and col-lective matrix factorization (Singh and Gordon,2008).
Alternatively, instead of optimizing for theleast-squares reconduction loss, a non-parametricBayesian approach for 3-way tensor decomposi-tion for modeling relational data has also been pro-posed (Sutskever et al., 2009).
Despite the exis-tence of a wide variety of tensor decompositionmodels, most methods do not scale well and haveonly been tested on datasets that are much smallerthan the size of real-world knowledge bases.Multi-relational data can be modeled by neural-network methods as well.
For instance, Bordes etal.
(2013b) proposed the Semantic Matching En-ergy model (SME), which aims to have the samed-dimensional vector representations for both en-tities and relations.
Given the vectors of entitiese1, e2and relation r. They first learn the latentrepresentations of (e1, r) and (e2, r).
The scoreof (e1, r, e2) is determined by the inner product1569of the vectors of (e1, r) and (e2, r).
Later, theyproposed a more scalable method called translat-ing embeddings (TransE) (Bordes et al., 2013a).While both entities and relations are still repre-sented by vectors, the score of (e1, r, e2) becomesthe negative dissimilarity measure of the corre-sponding vectors ?
?ei+ rk?
ej?, motivated bythe work in (Mikolov et al., 2013b; Mikolov et al.,2013a).
Alternatively, Socher et al.
(2013) pro-posed a Neural Tensor Network (NTN) that repre-sents entities in d-dimensional vectors created sep-arately by averaging pre-trained word vectors, andthen learns a d?d?m tensor describing the inter-actions between these latent components in eachof the m relations.
All these methods optimizefor loss functions that are more directly related tothe true objective ?
the prediction accuracy of cor-rect entity-relation triples, compared to the mean-squared reconstruction error in our method.
Nev-ertheless, they typically require much longer train-ing time.3 BackgroundIn this section, we first describe how entity-relation triples are encoded in a tensor.
We thenintroduce the recently proposed tensor decompo-sition method, RESCAL (Nickel et al., 2011) andexplain how it adopts an alternating least-squaresmethod, ASALSAN (Bader et al., 2007), to com-pute the factorization.3.1 Encoding Binary Relations in a TensorSuppose we are given a knowledge base withn entities and m relation types, and the factsin the knowledge base are denoted as a set ofentity-relation triples T = {(ei, rk, ej)}, wherei, j ?
{1, 2, ?
?
?n} and k ?
{1, 2, ?
?
?m}.
Atriple (ei, rk, ej) simply means that the i-th en-tity and the j-th entity have the k-th relation.Following (Franz et al., 2009), these triples cannaturally be encoded in a 3-way tensor X ?
{0, 1}n?n?m, such that Xi,j,k= 1 if and only ifthe triple (ei, rk, ej) ?
T1.
The tensor can beviewed as consisting of m slices, where each sliceis an n?n square matrix, denoting the interactionsof the entities of a particular relation type.
In theremainder of this paper, we will use Xkto refer tothe k-th slice of the tensor X .
Fig.
1 illustrates thisrepresentation.1This representation can easily be extended for a proba-bilistic knowledge base by allowing nonnegative real values.e1  ene 1e n??
kFigure 1: A tensor encoding of m binary relationtypes and n entities.
A sliceXkdenotes the entitieshaving the k-th relation.3.2 RESCALIn order to identify latent components in a ten-sor for collective learning, Nickel et al.
(2011)proposed RESCAL, which is a tensor decomposi-tion approach specifically designed for the multi-relational data described in Sec.
3.1.
Given a ten-sor Xn?n?m, RESCAL aims to have a rank-r ap-proximation, where each slice Xkis factorized asXk?
ARkAT.
(1)A is an n ?
r matrix, where the i-th row denotesthe r latent components of the i-th entity.
Rkis anasymmetric r ?
r matrix that describes the inter-actions of the latent components according to thek-th relation.
Notice that while Rkdiffers in eachslice, A remains the same.A and Rkare derived by minimizing the lossfunction below.minA,Rkf(A,Rk) + ?
?
g(A,Rk), (2)where f(A,Rk) =12(?k?Xk?ARkAT?2F)is the mean-squared reconstruction error andg(A,Rk) =12(?A?2F+?k?Rk?2F)is the regu-larization term.RESCAL is a special form of Tucker decom-position (Tucker, 1966) operating on a 3-way ten-sor.
Its model form (Eq.
(1)) can also be regardedas a relaxed form of DEDICOM (Bader et al.,2007), which derives the low-rank approximationas: Xk?
ADkRDkAT.
To compare RESCALto other tensor decomposition methods, interestedreaders can refer to (Kolda and Bader, 2009).1570The optimization problem in Eq.
(2) can besolved using the efficient alternating least-squares(ALS) method.
This approach alternatively fixesRkto solve for A and then fixes A to solveRk.
The whole procedure stops untilf(A,Rk)?X?2Fcon-verges to some small threshold  or the maximumnumber of iterations has been reached.By finding the solutions where the gradients are0, we can derive the update rules of A and Rkasbelow.A?
[?kXkARTk+XTkARk][?kBk+Ck+?I]?1,where Bk= RkATARTkand Ck= RTkATARk.vec(Rk)?
(ZTZ + ?I)?1ZTvec(Xk), (3)where vec(Rk) is the vectorization of Rk, Z =A?A and the operator ?
is the Kronecker prod-uct.Complexity Analysis Following the analysis in(Nickel et al., 2012), we assume that each Xkis asparse matrix, and let p be the number of non-zeroentries2.
The complexity of computing XkARTkand XTkARkis O(pr + nr2).
Evaluating BkandCkrequires O(nr2) and the matrix inversion re-quires O(r3).
Therefore, the complexity of updat-ing A isO(pr+nr2) assuming n r. The updat-ing rule of Rkinvolves inverting an r2?
r2ma-trix.
Therefore, directly computing the inversionrequires time complexity O(r6) and space com-plexity O(r4).
Although Nickel et al.
(2012) con-sidered using QR decomposition to simplify theupdates, it is still time consuming with the timecomplexity O(r6+ pr2).
Therefore, the total timecomplexity isO(r6+pr2) and the step of updatingRkis the bottleneck in the optimization process.We will describe how to reduce the time complex-ity of this step to O(nr2+ pr) in Section 4.2.4 ApproachWe describe how we leverage the relational do-main knowledge in this section.
By removing theincompatible entity-relation triples from the loss2Notice that we use a slightly different definition of pfrom the one in (Nickel et al., 2012).
The time complexityof multiplying an n ?
n sparse matrix Xkwith p non-zeroentries by an n?
r dense matrix is O(pr) assuming n r.function, training can be done much more effi-ciently and results in a model with higher pre-diction accuracy.
In addition, we also introducea mathematical technique to reduce the compu-tational complexity of the tensor decompositionmethods when taking into account the regulariza-tion term.4.1 Applying Relational Domain KnowledgeIn the domain of knowledge bases, the notion ofentity types is the side information that commonlyexists and dictates whether some entities can belegitimate arguments of a given predicate.
Forinstance, suppose the relation of interest is born-in, which denotes the birth location of a person.When asked whether an incompatible pair of en-tities, such as two person entities like AbrahamLincoln and John Henry, having this rela-tion, we can immediately reject the possibility.
Al-though the type information and the constraintsare readily available, it is overlooked in the pre-vious work on matrix and tensor decompositionmodels for knowledge bases (Riedel et al., 2013;Nickel et al., 2012).
Ignoring the type informationhas two implications.
Incompatible entity-relationtriples still participate in the loss function of theoptimization problem, which incurs unnecessarycomputation.
Moreover, by choosing values forthese incompatible entries we introduce errors intraining the model that can reduce the quality ofthe model.Based on this observation, we propose Typed-RESCAL, or TRESCAL, which leverages the en-tity type information to improve both the effi-ciency of model training and the quality of themodel in term of prediction accuracy.
We em-ploy a direct and simple approach by excludingthe triples of the incompatible entity types fromthe loss in Eq.
(2).
For each relation, let LkandRkbe the set of entities with a compatible type tothe k-th relation.
That is, (ei, rk, ej) is a feasibletriple if and only if ei?
Lkand ej?
Rk.
For no-tational convenience, we use Akl,Akrto denotethe sub-matrices of A that consists of rows asso-ciated with Lkand Rk, respectively.
Analogously,let Xklrbe the sub-matrix of Xkthat consists ofonly the entity pairs compatible to the k-th rela-tion.
The rows and columns of Xklrmap to the en-tities in Akland Akr, respectively.
In other words,entries of Xkbut not in Xklrdo not satisfy the typeconstraint and are ignored from the computation.1571~ ~ ?
?
?k AA TRkA kl A krT?klre ?
?Lke ?
?RkFigure 2: The construction of TRESCAL.
Supposethe k-th relation is born-in.
Lkis then a set ofperson entities and Rkis a set of location entities.Only the sub-matrix corresponds to the compati-ble entity pairs (i.e., Xklr) and the sub-matrices ofthe associated entities (i.e., Akland ATkr) will beincluded in the loss.Fig.
2 illustrates this construction.TRESCAL solves the following optimizationproblem:minA,Rkf?
(A,Rk) + ?
?
g(A,Rk), (4)where f?
(A,Rk) =12?k?Xklr?AklRkATkr?2Fand g(A,Rk) =12(?A?2F+?k?Rk?2F).Similarly, A and Rkcan be solved using thealternating least-squares method.
The update ruleof A isA?
[?k(XklrAkrRTk+ XTklrAklRk)]?
[?kBkr+ Ckl+ ?I]?1,where Bkr= RkATkrAkrRTkand Ckl=RTkATklAklRk.The update ofRkbecomes:vec(Rk)?
(ATkrAkr?ATklAkl+ ?I)?1?vec(AklTXklrAkr),(5)Complexity Analysis Let n?
be the averagenumber of entities with a compatible type to arelation.
Follow a similar derivation in Sec.
3.2,the time complexity of updating A isO(pr+ n?r2)and the time complexity of updating Rkremainsto be O(r6+ pr2).4.2 Handling Regularization EfficientlyExamining the update rules of both RESCALand TRESCAL, we can see that the most time-consuming part is the matrix inversions.
ForRESCAL, this is the term (ZTZ+?I)?1in Eq.
(3),where Z = A?A.
Nickel et al.
(2011) made theobservation that if ?
= 0, the matrix inversion canbe calculated by(ZTZ)?1= (ATA)?1A?
(ATA)?1A.Then, it only involves an inversion of an r?
r ma-trix, namely ATA.
However, if ?
> 0, directlycalculating Eq.
(3) requires to invert an r2?
r2matrix and thus becomes a bottleneck in solvingEq.
(2).To reduce the computational complexity ofthe update rules of Rk, we compute the inver-sion(ZTZ + ?I)?1by applying singular valuedecomposition (SVD) to A, such that A =U?VT, where U and V are orthogonal matricesand ?
is a diagonal matrix.
Then by using proper-ties of the Kronecker product we have:(ZTZ + ?I)?1=(?I + V?2VT?V?2VT)?1=(?I + (V ?V)(?2?
?2)(V ?V)T)?1= (V ?V)(?I + ?2?
?2)?1(V ?V)T.The last equality holds because V ?
V isalso an orthogonal matrix.
We leave the de-tailed derivations in Appendix A.
Notice that(?I + ?2?
?2)?1is a diagonal matrix.
There-fore, the inversion calculation is trivial.This technique can be applied to TRESCALas well.
By applying SVD to both Akland Akr, we have Akl= Ukl?klVTklandAkr= Ukr?krVTkr, respectively.
The computa-tion of(ATkrAkr?ATklAkl+ ?I)?1of Eq.
(5)thus becomes:(Vkl?Vkr)(?I + ?2kl?
?2kr)?1(Vkl?Vkr)T.The procedure of updating R is depicted in Al-gorithm 1.Complexity Analysis For RESCAL, V and ?can be computed by finding eigenvectors of ATA.Therefore, computing SVD of A costs O(nr2+r3) = O(nr2).
Computing Step 4 in Algorithm 1takes O(nr2+ pr).
Step 5 and Step 6 require1572Algorithm 1 UpdatingR in TRESCALRequire: X , A, and entity sets Rk,Lk,?kEnsure: Rk,?k.1: for k = 1 .
.
.m do2: [Ukl,?2kl,Vkl]?
SVD(ATklAkl).3: [Ukr,?2kr,Vkr]?
SVD(ATkrAkr).4: M1?
VTklATklXklrAkrVkr.5: M2?
diag(?2kl) diag(?2kr)T+ ?1.
(1 is a matrix of all ones.
Function diagconverts the diagonal entries of a matrix toa vector.
)6: Rk?
Vkl(M1./M2)VTkr.
(The operator ?./?
is element-wise divi-sion.
)7: end forO(r2) and O(r3), respectively.
The overall timecomplexity of updatingRkbecomesO(nr2+pr).Using a similar derivation, the time complex-ity of updating Rkin TRESCAL is O(n?r2+ pr).Therefore, the total complexity of each iteration isO(n?r2+ pr).5 ExperimentsWe conduct two sets of experiments.
The firstevaluates the proposed TRESCAL algorithm oninferring unknown facts using existing relation?entity triples, while the second demonstrates itsapplication to relation extraction when a text cor-pus is available.5.1 Knowledge Base CompletionWe evaluate our approach on a knowledge basegenerated by the CMU Never Ending LanguageLearning (NELL) project (Carlson et al., 2010).NELL collects human knowledge from the weband has generated millions of entity-relationtriples.
We use the data generated from version165 for training3, and collect the new triples gen-erated between NELL versions 166 and 533 as thedevelopment set and those generated between ver-sion 534 and 745 as the test set4.
The data statisticsof the training set are summarized in Table 1.
Thenumbers of triples in the development and test setsare 19,665 and 117,889, respectively.
Notice thatthis dataset is substantially larger than the datasetsused in recent work.
For example, the Freebasedata used in (Socher et al., 2013) and (Bordes et3http://www.cs.cmu.edu/?nlao/4http://bit.ly/trescalNELL# entities 753k# relation types 229# entity types 300# entity-relation triples 1.8MTable 1: Data statistics of the training set fromNELL in our experiments.al., 2013a) have 316k and 483k5triples, respec-tively, compared to 1.8M in this dataset.In the NELL dataset, the entity type informa-tion is encoded in a specific relation, called Gen-eralization.
Each entity in the knowledge base isassigned to at least one category presented by theGeneralization relationship.
Based on this infor-mation, the compatible entity type constraint ofeach relation can be easily identified.
Specifically,we examined the entities and relations that occurin the triples of the training data, and counted allthe types appearing in these instances of a givenrelation legitimate.We implement RESCAL and TRESCAL inMATLAB with the Matlab tensor Toolbox (Baderet al., 2012).
With the efficient implementationdescribed in Section 4.2, all experiments can beconducted on a commodity PC with 16 GB mem-ory.
We set the maximal number of iterations ofboth RESCAL and TRESCAL to be 10, which wefound empirically to be enough to generate a sta-ble model.
Note that Eq.
(4) is non-convex, and theoptimization process does not guarantee to con-verge to a global minimum.
Therefore, initial-izing the model properly might be important forthe performance.
Following the implementation ofRESCAL, we initialize A by performing singularvalue decomposition over?X =?k(Xk+ XTk),such that?X = U?VTand set A = U. Then,we apply the update rule ofRkto initialize {Rk}.RESCAL and TRESCAL have two types of param-eters: (1) the rank r of the decomposed tensor and(2) the regularization parameter ?.
We tune therank parameter on development set in a range of{100, 200, 300, 400} and the regularization pa-rameter in a range of {0.01, 0.05, 0.1, 0.5, 1}.For comparison, we also use the code releasedby Bordes et al.
(2013a), which is implementedusing Python and the Theano library (Bergstraet al., 2010), to train a TransE model using the5In (Bordes et al., 2013a), there is a much larger dataset,FB1M, that has 17.5M triples used for evaluation.
However,this dataset has not been released.1573Entity Retrieval Relation RetrievalTransE RESCAL TRESCAL TransE RESCAL TRESCALw/o type checking 51.41%?51.59% 54.79% 75.88% 73.15%?76.12%w/ type checking 67.56% 62.91%?69.26% 70.71%?73.08%?75.70%Table 2: Model performance in mean average precision (MAP) on entity retrieval and relation retrieval.?
and ?
indicate the comparison to TRESCAL in the same setting is statistically significant using a paired-t test on average precision of each query, with p < 0.01 and p < 0.05, respectively.
Enforcing typeconstraints during test time improves entity retrieval substantially, but does not help in relation retrieval.same NELL dataset.
We reserved randomly 1%of the training triples for the code to evaluate themodel performance in each iteration.
As sug-gested in their paper, we experiment with sev-eral hyper-parameters, including learning rate of{0.01, 0.001}, the latent dimension of {50, 100}and the similarity measure of {L1, L2}.
In addi-tion, we also adjust the number of batches of {50,100, 1000}.
Of all the configurations, we keep themodels picked by the method, as well as the fi-nal model after 500 training iterations.
The finalmodel is chosen by the performance on our devel-opment set.5.1.1 Training Time ReductionWe first present experimental results demonstrat-ing that TRESCAL indeed reduces the time re-quired to factorize a knowledge database, com-pared to RESCAL.
The experiment is conductedon NELL with r = 300 and ?
= 0.1.
When?
6= 0, the original RESCAL algorithm describedin (Nickel et al., 2011; Nickel et al., 2012) cannothandle a large r, because updating matrices {Rk}requires O(r4) memory.
Later in this section, wewill show that in some situation a large rank r isnecessary for achieving good testing performance.Comparing TRESCAL with RESCAL, each it-eration of TRESCAL takes 1,608 seconds, whilethat of RESCAL takes 7,415 seconds.
In otherwords, by inducing the entity type informationand constraints, TRESCAL enjoys around 4.6 timesspeed-up, compared to an improved regularizedversion of RESCAL.
When updating A and {Rk}TRESCAL only requires operating on sub-matricesof A, {Rk} and {Xk}, which reduces the compu-tation substantially.
In average, TRESCAL filters96% of entity triples that have incompatible types.In contrast, it takes TransE at least 2 days and 19hours to finish training the model (the default 500iterations)6, while TRESCAL finishes the training6It took almost 4 days to train the best TransE model thatin roughly 4 to 5 hours7.5.1.2 Test Performance ImprovementWe consider two different types of tasks to evalu-ate the prediction accuracy of different models ?entity retrieval and relation retrieval.Entity Retrieval In the first task, we collect aset of entity-relation pairs {(ei, rk)} and aim atpredicting ejsuch that the tuple (ei, rk, ej) is arecorded triple in the NELL knowledge base.
Foreach pair (ei, rk), we collect triples {(ei, rk, e?j)}from the NELL test corpus as positive samplesand randomly pick 100 entries e?jto form negativesamples {ei, rk, e?j}.
Given A and Rkfrom thefactorization generated by RESCAL or TRESCAL,the score assigned to a triple {ei, rk, e?j} is com-puted by aTiRkajwhere aiand ajare the i-thand j-th rows of A.
In TransE, the score is de-termined by the negative dissimilarity measures ofthe learned embeddings: ?d(ei, rk, e?j) = ??ei+rk?
e?j?22.We evaluate the performance using mean aver-age precision (MAP), which is a robust and sta-ble metric (Manning et al., 2008).
As can beobserved in Table 2 (left), TRESCAL achieves54.79%, which outperforms 51.59% of RESCALand 51.41% of TransE.
Adding constraints duringtest time by assigning the lowest score to the en-tity triples with incompatible types improves re-sults of all models ?
TRESCAL still performs thebest (69.26%), compared to TransE (67.56%) andRESCAL (62.91%).Relation Retrieval In the second task, given arelation type rk, we are looking for the entity pairs(ei, ej) that have this specific relationship.
To gen-erate test data, for each relation type, we collectis included in Table 2.7We also tested the released code from (Socher et al.,2013) for training a neural tensor network model.
However,we are not able to finish the experiments as each iteration ofthis method takes almost 5 hours.1574gold entity pairs from the NELL knowledge baseas positive samples and randomly pick a set of en-tity pairs as negative samples such that the numberof positive samples are the same as negative ones.Results presented in Table 2 (right) show thatTRESCAL achieves 76.12%, while RESCAL andTransE are 73.15% and 75.88%, respectively.Therefore, incorporating the type information intraining seems to help in this task as well.
Enforc-ing the type constraints during test time does nothelp as in entity retrieval.
By removing incom-patible entity pairs, the performance of TRESCAL,RESCAL and TransE drop slightly to 75.70%,73.08% and 70.71% respectively.
One possibleexplanation is that the task of relation retrieval iseasier than entity retrieval.
The incorrect type in-formation of some entities ends up filtering out asmall number of entity pairs that were retrievedcorrectly by the model.Notice that TRESCAL achieves different levelsof performance on various relations.
For example,it performs well on predicting AthletePlaysSport(81%) and CoachesInLeague (88%), but achievessuboptimal performance on predicting Works-For (49%) and BuildingLocatedInCity (35%).We hypothesize that it is easier to gener-alize entity-relation triples when the relationhas several related relations.
For examples,AthletePlaysForTeam and TeamPlaysSport mayhelp discover entity-relation triples of Ath-letePlaysSport.5.1.3 Sensitivity to ParametersWe also study if TRESCAL is sensitive to the rankparameter r and the regularization parameter ?,where the detailed results can be found in Ap-pendix B.
In short, we found that increasing therank r generally leads to better models.
Also,while the model is not very sensitive to the valueof the regularization parameter ?, tuning ?
is stillnecessary for achieving the best performance.5.2 Relation ExtractionNext, we apply TRESCAL to the task of extract-ing relations between entities, jointly from a textcorpus and a structured knowledge base.
We usea corpus from (Riedel et al., 2013) that is cre-ated by aligning the entities in NYTimes and Free-base.
The corpus consists of a training set and atest set.
In the training set, a list of entity pairsare provided, along with surface patterns extractedfrom NYTimes and known relations obtained fromFreebase.
In the test set, only the surface patternsare given.
By jointly factoring a matrix consist-ing of the surface patterns and relations, Riedel etal.
(2013) show that their model is able to capturethe mapping between the surface patterns and thestructured relations and hence is able to extract theentity relations from free text.
In the following, weshow that TRESCAL can be applied to this task.We focus on the 19 relations listed in Table 1of (Riedel et al., 2013) and only consider thesurface patterns that co-occur with these 19 re-lations.
We prune the surface patterns that oc-cur less than 5 times and remove the entities thatare not involved in any relation and surface pat-tern.
Based on the training and test sets, webuild a 80,698?80,698?1,652 tensor, where eachslice captures a particular structured relation or asurface pattern between two entities.
There are72 fine types extracted from Freebase assignedto 53,836 entities that are recorded in Freebase.In addition, special types, PER, LOC, ORG andMISC, are assigned to the remaining 26,862 enti-ties based on the predicted NER tags provided bythe corpus.
A type is considered incompatible to arelation or a surface pattern if in the training data,none of the argument entities of the relation be-longs to the type.
We use r = 400 and ?
= 0.1 inTRESCAL to factorize the tensor.We compare the proposed TRESCAL model toRI13 (Riedel et al., 2013), YA11 (Yao et al., 2011),MI09 (Mintz et al., 2009) and SU12 (Surdeanu etal., 2012)8.
We follow the protocol used in (Riedelet al., 2013) to evaluate the results.
Given a re-lation as query, the top 1,000 entity pairs outputby each system are collected and the top 100 onesare judged manually.
Besides comparing individ-ual models, we also report the results of combinedmodels.
To combine the scores from two models,we simply normalize the scores of entity-relationtuples to zero mean and unit variance and take theaverage.
The results are summarized in Table 3.As can been seen in the table, using TRESCALalone is not very effective and its performance isonly compatible to MI09 and YA11, and is sig-nificantly inferior to RI13.
This is understandablebecause the problem setting favors RI13 as onlyentity pairs that have occurred in the text or thedatabase will be considered in RI13, both duringmodel training and testing.
In contrast, TRESCAL8The corpus and the system outputs are from http://www.riedelcastro.org/uschema1575Relation # MI09 YA11 SU12 RI13 TR TR+SU12 TR+RI13person/company 171 0.41 0.40 0.43 0.49 0.43 0.53 0.64location/containedby 90 0.39 0.43 0.44 0.56 0.23 0.46 0.58parent/child 47 0.05 0.10 0.25 0.31 0.19 0.24 0.35person/place of birth 43 0.32 0.31 0.34 0.37 0.50 0.61 0.66person/nationality 38 0.10 0.30 0.09 0.16 0.13 0.16 0.22author/works written 28 0.52 0.53 0.54 0.71 0.00 0.39 0.62person/place of death 26 0.58 0.58 0.63 0.63 0.54 0.72 0.89neighborhood/neighborhood of 13 0.00 0.00 0.08 0.67 0.08 0.13 0.73person/parents 8 0.21 0.24 0.51 0.34 0.01 0.16 0.38company/founders 7 0.14 0.14 0.30 0.39 0.06 0.17 0.44film/directed by 4 0.06 0.15 0.25 0.30 0.03 0.13 0.35sports team/league 4 0.00 0.43 0.18 0.63 0.50 0.29 0.63team/arena stadium 3 0.00 0.06 0.06 0.08 0.00 0.04 0.09team owner/teams owned 2 0.00 0.50 0.70 0.75 0.00 0.00 0.75roadcast/area served 2 1.00 0.50 1.00 1.00 0.50 0.83 1.00structure/architect 2 0.00 0.00 1.00 1.00 0.00 0.02 1.00composer/compositions 2 0.00 0.00 0.00 0.12 0.00 0.00 0.12person/religion 1 0.00 1.00 1.00 1.00 0.00 1.00 1.00film/produced by 1 1.00 1.00 1.00 0.33 0.00 1.00 0.25Weighted MAP 0.33 0.36 0.39 0.47 0.30 0.44 0.57Table 3: Weighted Mean Average Precisions.
The # column shows the number of true facts in the pool.Bold faced are winners per relation, italics indicate ties based on a sign test.predicts all the possible combinations between en-tities and relations, which makes the model less fitto the task.
However, when combining TRESCALwith a pure text-based method, such as SU12,we can clearly see TRESCAL is complementaryto SU12 (0.39 to 0.44 in weighted MAP score),which makes the results competitive to RI13.Interestingly, although both TRESCAL and RI13leverage information from the knowledge base, wefind that by combining them, the performance isimproved quite substantially (0.47 to 0.57).
Wesuspect that the reason is that in our construc-tion, each entity has its own vector representa-tion, which is lacked in RI13.
As a result, thenew triples that TRESCAL finds are very differentfrom those found by RI13.
Nevertheless, com-bining more methods do not always yield an im-provement.
For example, combining TR, RI13 andSU12 together (not included in Table 3) achievesalmost the same performance as TR+RI13.6 ConclusionsIn this paper we developed TRESCAL, a tensordecomposition method that leverages relationaldomain knowledge.
We use relational domainknowledge to capture which triples are potentiallyvalid and found that, by excluding the triples thatare incompatible when performing tensor decom-position, we can significantly reduce the train-ing time and improve the prediction performanceas compared with RESCAL and TransE.
More-over, we demonstrated its effectiveness in the ap-plication of relation extraction.
Evaluated on thedataset provided in (Riedel et al., 2013), the per-formance of TRESCAL alone is comparable to sev-eral existing systems that leverage the idea of dis-tant supervision.
When combined with the state-of-the-art systems, we found that the results canbe further improved.
For instance, the weightedmean average precision of the previous best ap-proach in (Riedel et al., 2013) has been increasedby 10 points (47% to 57%).There are a number of interesting potential ex-tensions of our work.
First, while the experimentsin this paper are on traditional knowledge basesand textual data, the idea of leveraging relationaldomain knowledge is likely to be of value to otherlinguistic databases as well.
For instance, part-of-speech tags can be viewed as the ?types?
of words.Incorporating such information in other tensor de-composition methods (e.g., (Chang et al., 2013))may help lexical semantic representations.
Sec-ond, relational domain knowledge goes beyondentity types and their compatibility with specificrelations.
For instance, the entity-relation triple(e1, child-of, e2) can be valid only if e1.type =person ?
e2.type = person ?
e1.age < e2.age.It would be interesting to explore the possibilityof developing efficient methods to leverage othertypes of relational domain knowledge.
Finally, wewould like to create more sophisticated models ofknowledge base embedding, targeting complex in-1576ference tasks to better support semantic parsingand question answering.AcknowledgmentsWe thank Sebastian Riedel for providing the datafor experiments.
We are also grateful to the anony-mous reviewers for their valuable comments.ReferencesBrett W Bader, Richard A Harshman, and Tamara GKolda.
2007.
Temporal analysis of semantic graphsusing ASALSAN.
In ICDM, pages 33?42.
IEEE.Brett W. Bader, Tamara G. Kolda, et al.
2012.
Matlabtensor toolbox version 2.5.
Available online, Jan-uary.James Bergstra, Olivier Breuleux, Fr?ed?eric Bastien,Pascal Lamblin, Razvan Pascanu, Guillaume Des-jardins, Joseph Turian, David Warde-Farley, andYoshua Bengio.
2010.
Theano: a CPU andGPU math expression compiler.
In Proceedingsof the Python for Scientific Computing Conference(SciPy), June.
Oral Presentation.Joanna Biega, Erdal Kuzey, and Fabian M Suchanek.2013.
Inside YOGO2s: a transparent informationextraction architecture.
In WWW, pages 325?328.A.
Bordes, N. Usunier, A. Garcia-Duran, J. Weston,and O. Yakhnenko.
2013a.
Translating Embeddingsfor Modeling Multi-relational Data.
In Advances inNeural Information Processing Systems 26.Antoine Bordes, Xavier Glorot, Jason Weston, andYoshua Bengio.
2013b.
A semantic matching en-ergy function for learning with multi-relational data.Machine Learning, pages 1?27.Razvan Bunescu and Raymond Mooney.
2007.
Learn-ing to extract relations from the web using mini-mal supervision.
In Proceedings of the 45th AnnualMeeting of the Association of Computational Lin-guistics, pages 576?583, Prague, Czech Republic,June.
Association for Computational Linguistics.Andrew Carlson, Justin Betteridge, Bryan Kisiel, BurrSettles, Estevam R. Hruschka Jr., and Tom M.Mitchell.
2010.
Toward an architecture for never-ending language learning.
In AAAI.Kai-Wei Chang, Wen-tau Yih, and Christopher Meek.2013.
Multi-relational latent semantic analysis.
InProceedings of the 2013 Conference on EmpiricalMethods in Natural Language Processing, pages1602?1612, Seattle, Washington, USA, October.Association for Computational Linguistics.Lieven De Lathauwer, Bart De Moor, and Joos Vande-walle.
2000.
A multilinear singular value decompo-sition.
SIAM journal on Matrix Analysis and Appli-cations, 21(4):1253?1278.Thomas Franz, Antje Schultz, Sergej Sizov, and SteffenStaab.
2009.
Triplerank: Ranking semantic webdata by tensor decomposition.
In The Semantic Web-ISWC 2009, pages 213?228.
Springer.U Kang, Evangelos Papalexakis, Abhay Harpale, andChristos Faloutsos.
2012.
Gigatensor: scaling ten-sor analysis up by 100 times-algorithms and discov-eries.
In KDD, pages 316?324.
ACM.Henk AL Kiers.
2000.
Towards a standardized nota-tion and terminology in multiway analysis.
Journalof chemometrics, 14(3):105?122.Tamara G. Kolda and Brett W. Bader.
2009.
Ten-sor decompositions and applications.
SIAM Review,51(3):455?500, September.Joseph B Kruskal.
1977.
Three-way arrays: rank anduniqueness of trilinear decompositions, with appli-cation to arithmetic complexity and statistics.
Lin-ear algebra and its applications, 18(2):95?138.Alan J Laub, 2005.
Matrix analysis for scientists andengineers, chapter 13, pages 139?150.
SIAM.Ben London, Theodoros Rekatsinas, Bert Huang, andLise Getoor.
2013.
Multi-relational learning usingweighted tensor decomposition with modular loss.Technical report, University of Maryland CollegePark.
http://arxiv.org/abs/1303.1733.C.
Manning, P. Raghavan, and H. Schutze.
2008.Introduction to Information Retrieval.
CambridgeUniversity Press.T.
Mikolov, I. Sutskever, K. Chen, G. Corrado, andJ.
Dean.
2013a.
Distributed representations ofwords and phrases and their compositionality.
InAdvances in Neural Information Processing Systems26.Tomas Mikolov, Wen-tau Yih, and Geoffrey Zweig.2013b.
Linguistic regularities in continuous spaceword representations.
In Proceedings of the 2013Conference of the North American Chapter of theAssociation for Computational Linguistics: HumanLanguage Technologies, pages 746?751, Atlanta,Georgia, June.
Association for Computational Lin-guistics.Mike Mintz, Steven Bills, Rion Snow, and Daniel Ju-rafsky.
2009.
Distant supervision for relation ex-traction without labeled data.
In Proceedings of theJoint Conference of the 47th Annual Meeting of theACL and the 4th International Joint Conference onNatural Language Processing of the AFNLP, pages1003?1011, Suntec, Singapore, August.
Associationfor Computational Linguistics.Maximilian Nickel, Volker Tresp, and Hans-PeterKriegel.
2011.
A three-way model for collectivelearning on multi-relational data.
In ICML, pages809?816.1577Maximilian Nickel, Volker Tresp, and Hans-PeterKriegel.
2012.
Factorizing YAGO: scalable ma-chine learning for linked data.
In WWW, pages 271?280.Evangelos E Papalexakis, Tom M Mitchell, Nicholas DSidiropoulos, Christos Faloutsos, Partha PratimTalukdar, and Brian Murphy.
2014.
Turbo-smt:Accelerating coupled sparse matrix-tensor factoriza-tions by 200x.
In SDM.Sebastian Riedel, Limin Yao, and Andrew McCallum.2010.
Modeling relations and their mentions with-out labeled text.
In Proceedings of ECML/PKDD2010.
Springer.Sebastian Riedel, Limin Yao, Andrew McCallum, andBenjamin M. Marlin.
2013.
Relation extractionwith matrix factorization and universal schemas.
InNAACL, pages 74?84.Alan Ritter, Luke Zettlemoyer, Mausam, and Oren Et-zioni.
2013.
Modeling missing data in distant su-pervision for information extraction.
Transactionsof the Association for Computational Linguistics,1:367?378, October.Ajit P Singh and Geoffrey J Gordon.
2008.
Relationallearning via collective matrix factorization.
In Pro-ceedings of the 14th ACM SIGKDD internationalconference on Knowledge discovery and data min-ing, pages 650?658.
ACM.Richard Socher, Danqi Chen, Christopher D. Manning,and Andrew Y. Ng.
2013.
Reasoning With NeuralTensor Networks For Knowledge Base Completion.In Advances in Neural Information Processing Sys-tems 26.Robert Speer, Catherine Havasi, and Henry Lieberman.2008.
Analogyspace: Reducing the dimensionalityof common sense knowledge.
In AAAI, pages 548?553.Mihai Surdeanu, Julie Tibshirani, Ramesh Nallapati,and Christopher D. Manning.
2012.
Multi-instancemulti-label learning for relation extraction.
In Pro-ceedings of the Conference on Empirical Methodsin Natural Language Processing and ComputationalNatural Language Learning (EMNLP-CoNLL).Ilya Sutskever, Joshua B Tenenbaum, and RuslanSalakhutdinov.
2009.
Modelling relational data us-ing Bayesian clustered tensor factorization.
In NIPS,pages 1821?1828.Ledyard R Tucker.
1966.
Some mathematical noteson three-mode factor analysis.
Psychometrika,31(3):279?311.Jason Weston, Antoine Bordes, Oksana Yakhnenko,and Nicolas Usunier.
2013.
Connecting languageand knowledge bases with embedding models for re-lation extraction.
In Proceedings of the 2013 Con-ference on Empirical Methods in Natural LanguageProcessing, pages 1366?1371, Seattle, Washington,USA, October.
Association for Computational Lin-guistics.Limin Yao, Aria Haghighi, Sebastian Riedel, and An-drew McCallum.
2011.
Structured relation dis-covery using generative models.
In Proceedings ofthe 2011 Conference on Empirical Methods in Nat-ural Language Processing, pages 1456?1466, Edin-burgh, Scotland, UK., July.
Association for Compu-tational Linguistics.Appendix A Detailed DerivationWe first introduce some lemmas that will be usefulfor our derivation.
Lemmas 2, 3 and 4 are the basicproperties of the Kronecker product.
Their proofscan be found at (Laub, 2005).Lemma 1.
Let V be an orthogonal matrix and?
a diagonal matrix.
Then (I + V?VT)?1=V(I + ?)?1VT.Proof.
(I + V?VT)?1= (VIVT+ V?VT)?1= V(I + ?
)?1VTLemma 2.
(A?B)(C?D) = AC?BD.Lemma 3.
(A?B)T= AT?BT.Lemma 4.
If A and B are orthogonal matrices,then A?B will also be an orthogonal matrix.Let Z = A ?
A and apply singular valuedecomposition to A = U?VT.
The term(ZTZ + ?I)?1can be rewritten as:(ZTZ + ?I)?1=(?I + (AT?AT)(A?A))?1(6)=(?I + ATA?ATA)?1(7)=(?I + V?2VT?V?2VT)?1(8)=(?I + (V ?V)(?2?
?2)(V ?V)T)?1(9)= (V ?V)(?I + ?2?
?2)?1(V ?V)T(10)Eq.
(6) is from replacing Z with A ?
A andLemma 3.
Eq.
(7) is from Lemma 2.
Eq.
(8) isfrom the properties of SVD, where U and V areorthonormal matrices.
Eq.
(9) is from Lemma 2and Lemma 3.
Finally, Eq.
(10) comes fromLemma 1.1578Figure 3: Prediction performance of TRESCALand RESCAL with different rank (r).Figure 4: Prediction performance of TRESCALwith different regularization parameter (?
).Appendix B Hyper-parameter SensitivityWe study if TRESCAL is sensitive to the rankparameter r and the regularization parameter ?.We use the task of relation retrieval and presentthe model performance on the development set.Fig.
3 shows the performance of TRESCAL andRESCAL with different rank (r) values while fix-ing ?
= 0.01.
Results show that both TRESCALand RESCAL achieve better performance when ris reasonably large.
TRESCAL obtains a bet-ter model with smaller r than RESCAL, becauseTRESCAL only needs to fit the triples of the com-patible entity types.
Therefore, it allows to usesmaller number of latent variables to fit the train-ing data.Fixing r = 400, Fig.
4 shows the performanceof TRESCAL at different values of the regulariza-tion parameter ?, including no regularization atall (?
= 0).
While the results suggest that themethod is not very sensitive to ?, tuning ?
is stillnecessary for achieving the best performance.1579
