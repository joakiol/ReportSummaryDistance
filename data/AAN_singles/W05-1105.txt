The evolution of dominance constraint solversAlexander Koller and Stefan ThaterDept.
of Computational LinguisticsSaarland University, Saarbr?cken, Germany{koller,stth}@coli.uni-sb.deAbstractWe describe the evolution of solversfor dominance constraints, a formalismused in underspecified semantics, andpresent a new graph-based solver usingcharts.
An evaluation on real-world datashows that each solver (including thenew one) is significantly faster than itspredecessors.
We believe that our strat-egy of successively tailoring a powerfulformalism to the actual inputs is moregenerally applicable.1 IntroductionIn many areas of computational linguistics, there isa tension between a need for powerful formalismsand the desire for efficient processing.
Expressiveformalisms are useful because they allow us tospecify linguistic facts at the right level of abstrac-tion, and in a way that supports the creation andmaintenance of large language resources.
On theother hand, by choosing a more powerful formal-ism, we typically run the risk that our processingtasks (say, parsing or inference) can no longer beperformed efficiently.One way to address this tension is to switch tosimpler formalisms.
This makes processing moreefficient, but sacrifices the benefits of expressiveformalisms in terms of modelling.
Another com-mon strategy is to simply use the powerful for-malisms anyway.
This sometimes works prettywell in practice, but a system built in this way can-not give any runtime guarantees, and may becomeslow for certain inputs unpredictably.In this paper, we advocate a third option: Use ageneral, powerful formalism, analyse what makesit complex and what inputs actually occur in prac-tice, and then find a restricted fragment of the for-malism that supports all practical inputs and canbe processed efficiently.
We demonstrate this ap-proach by describing the evolution of solvers fordominance constraints (Egg et al, 2001), a certainformalism used for the underspecified descrip-tion of scope ambiguities in computational seman-tics.
General dominance constraints have an NP-complete satisfiability problem, but normal dom-inance constraints, which subsume all constraintsthat are used in practice, have linear-time satisfia-bility and can be solved extremely efficiently.We describe a sequence of four solvers, rang-ing from a purely logic-based saturation algorithm(Koller et al, 1998) over a solver based on con-straint programming (Duchier and Niehren, 2000)to efficient solvers based on graph algorithms(Bodirsky et al, 2004).
The first three solvers havebeen described in the literature before, but we alsopresent a new variant of the graph solver that usescaching to obtain a considerable speedup.
Finallywe present a new evaluation that compares all foursolvers with each other and with a different under-specification solver from the LKB grammar devel-opment system (Copestake and Flickinger, 2000).The paper is structured as follows.
We will firstsketch the problem that our algorithms solve (Sec-tion 2).
Then we present the solvers (Section 3)and conclude with the evaluation (Section 4).2 The ProblemThe problem we use to illustrate the progress to-wards efficient solvers is that of enumerating allreadings of an underspecified description.
Under-specification is a technique for dealing with thecombinatorial problems associated with quantifierscope ambiguities, certain semantic ambiguitiesthat occur in sentences such as the following:(1) Every student reads a book.This sentence has two different readings.
Read-ing (2) expresses that each student reads a possiblydifferent book, while reading (3) claims that thereis a single book which is read by every student.
(2) ?x.student(x)?
(?y.book(y)?
read(x,y))(3) ?y.book(y)?
(?x.student(x)?
read(x,y))The number of readings can grow exponen-tially in the number of quantifiers and otherscope-bearing operators occuring in the sentence.A particularly extreme example is the follow-ing sentence from the Rondane Treebank, whichthe English Resource Grammar (Copestake andFlickinger, 2000) claims to have about 2.4 trillionreadings.
(4) Myrdal is the mountain terminus of the Fl?mrail line (or Fl?msbana) which makes its waydown the lovely Fl?m Valley (Fl?msdalen) toits sea-level terminus at Fl?m.
(Rondane 650)Of course, this huge number of readings resultsnot only from genuine meaning differences, butfrom the (quite reasonable) decision of the ERGdevelopers to uniformly treat all noun phrases, in-cluding proper names and definites, as quantifiers.But a system that builds upon such a grammar stillhas to deal with these readings in some way.The key idea of underspecification is now to notenumerate all these semantic readings from a syn-tactic analysis during or after parsing, but to derivefrom the syntactic analysis a single, compact un-derspecified description.
The individual readingscan be enumerated from the description if they areneeded, and this enumeration process should beefficient; but it is also possible to eliminate read-ings that are infelicitous given knowledge aboutthe world or the context on the level of underspec-ified descriptions.
?x?studx?y?booky yxread?x?y?studx?bookyyxreadFigure 1: Trees for the readings (2) and (3).
?x?y?studx?bookyyxreadX1 : ?x(X2) ?X2 :?
(X3,X4) ?X5 : stud(X6) ?X6 : x ?.
.
.X4 /?
X7 ?X7 : read(X8,X9) ?X8 : x ?X9 : yFigure 2: A dominance constraint (right) and itsgraphical representation (left); the solutions of theconstraint are the two trees in Fig.
1.Dominance constraints.
The particular under-specification formalism whose enumeration prob-lem we consider in this paper is the formalismof dominance constraints (Egg et al, 2001).
Thebasic idea behind using dominance constraints inunderspecification is that the semantic representa-tions (2) and (3) can be considered as trees (seeFig.
1).
Then a set of semantic representations canbe characterised as the set of models of a formulain the following language:?
::= X : f (X1, .
.
.
,Xn) | X /?
Y | X 6= Y | ??
?The labelling atom X : f (X1, .
.
.
,Xn) expressesthat the node in the tree which is denoted by thevariable X has the label f , and its children are de-noted by the variables X1 to Xn.
Dominance atomsX /?
Y say that there is a path (of length 0 or more)from the node denoted by X to the node denotedby Y ; and inequality atoms X 6= Y require that Xand Y denote different nodes.Dominance constraints ?
can be drawn infor-mally as graphs, as shown in Fig.
2.
Each nodeof the graph stands for a variable; node labels andsolid edges stand for labelling atoms; and the dot-ted edges represent dominance atoms.
The con-straint represented by the drawing in Fig.
2 is sat-isfied by both trees shown in Fig.
1.
Thus we canuse it as an underspecified description represent-ing these two readings.The two obvious processing problems con-nected to dominance constraints are satisfiability(is there a model that satisfies the constraint?
)and enumeration (compute all models of a con-straint).
Because every satisfiable dominance con-straint technically has an infinite number of mod-els, the algorithms below solve the enumerationproblem by computing solved forms of the con-straint, which are finite characterisations of infinitemodel sets.3 The SolversWe present four different solvers for dominanceconstraints.
As we go along, we analyse whatmakes dominance constraint solving hard, andwhat characterises the constraints that occur inpractice.3.1 A saturation algorithmThe first dominance constraint solver (Koller et al,1998; Duchier and Niehren, 2000) is an algorithmthat operates directly on the constraint as a logicalformula.
It is a saturation algorithm, which suc-cessively enriches the constraint using saturationrules.
The algorithm terminates if it either derivesa contradiction (marked by the special atom false),or if no rule can contribute any new atoms.
In thefirst case, it claims that the constraint is unsatisfi-able; in the second case, it reports the end result ofthe computation as a solved form and claims thatit is satisfiable.The saturation rules in the solver try to matchtheir preconditions to the constraint, and if theydo match, add their conclusions to the constraint.For example, the following rules express that dom-inance is a transitive relation, and that trees haveno cycles:X /?
Y ?Y /?
Z ?
X /?
ZX : f (.
.
.
,Y, .
.
.
)?Y /?
X ?
falseSome rules have disjunctive right-hand sides; ifthey are applicable, they perform a case distinctionand add one of the disjuncts.
One example is theChoice Rule, which looks as follows:X /?
Z?Y /?
Z ?
X /?
Y ?Y /?
XThis rule checks for the presence of two variablesX and Y that are known to both dominate the samevariable Z.
Because models must be trees, thismeans that X and Y must dominate each other insome order; but we can?t know yet whether it is Xor Y that dominates the other one.
Hence the solvertries both choices.
This makes it possible to derivemultiple solved forms (one for each reading of thesentence), such as the two different trees in Fig.
1.It can be shown that a dominance constraint issatisfiable iff it is not possible to derive false fromit using the rules in the algorithm.
In addition, ev-ery model of the original constraint satisfies ex-actly one solved form.
So the saturation algorithmcan indeed be used to solve dominance constraints.However, even checking satisfiability takes nonde-terministic polynomial time.
Because all choicesin the distribution rule applications have to bechecked, a deterministic program will take expo-nential time to check satisfiability in the worstcase.Indeed, satisfiability of dominance constraintsis an NP-complete problem (Koller et al, 1998),and hence it is likely that any solver for dominanceconstraints will take exponential worst-case run-time.
At first sight, it seems that we have falleninto the expressivity trap: We have a formalismthat allows us to model scope underspecificationvery cleanly, but actually computing with this for-malism is expensive.3.2 Reduction to Set ConstraintsIn reaction to this NP-completeness result,Duchier and Niehren (2000) applied techniquesfrom constraint programming to the problem in or-der to get a more efficient solver.
Constraint pro-gramming (Apt, 2003) is a standard approach tosolving NP-complete combinatorial problems.
Inthis paradigm, a problem is modelled as a for-mula in a logical constraint language.
The pro-gram searches for values for the variables in theformula that satisfy the formula.
In order to reducethe size of the search space, it performs cheap de-terministic inferences that exclude some values ofthe variables (propagation), and only after prop-agation can supply no further information it per-forms a non-deterministic case distinction (distri-bution).SidexEqxUpxDownxFigure 3: The four node setsDuchier and Niehren solved dominance con-straints by encoding them as finite set constraints.Finite set constraints (M?ller and M?ller, 1997)are formulas that talk about relations between(terms that denote) finite sets of integers, suchas inclusion X ?
Y or equality X = Y .
Efficientsolvers for set constraints are available, e.g.
as partof the Mozart/Oz programming system (Oz Devel-opment Team, 2004).Reduction to set constraints.
The basic ideaunderlying the reduction is that a tree can be rep-resented by specifying for each node v of this treewhich nodes are dominated by v, which ones dom-inate v, which ones are equal to v (i.e.
just v it-self), and which ones are ?disjoint?
from v (Fig.
3).These four node sets are a partition of the nodes inthe tree.Now the solver introduces for each variable Xin a dominance constraint ?
four variables EqX ,UpX , DownX , SideX for the sets of node variablesthat denote nodes in the respective region of thetree, relative to X .
The atoms in ?
are translatedinto constraints on these variables.
For instance, adominance atom X /?
Y is translated intoUpX ?
UpY ?DownY ?
DownX ?SideX ?
SideYThis constraint encodes that all variables whosedenotation dominates the denotation of X (UpX )must also dominate the denotation of Y (UpY ), andthe analogous statements for the dominated anddisjoint variables.In addition, the constraint program contains var-ious redundant constraints that improve propaga-tion.
Now the search for solutions consists in find-ing satisfying assignments to the set variables.
Theresult is a search tree as shown in Fig.
4: Theblue circles represent case distinctions, whereaseach green diamond represents a solution of theset constraint (and therefore, a solved form ofFigure 4: Search tree for constraint 42 from theRondane Treebank.the dominance constraint).
Interestingly, all leavesof the search tree in Fig.
4 are solution nodes;the search never runs into inconsistent constraints.This seems to happen systematically when solvingany constraints that come from underspecification.3.3 A graph-based solverThis behaviour of the set-constraint solver is ex-tremely surprising: The key characteristic of anNP-complete problem is that the search tree mustnecessarily contain failed nodes on some inputs.The fact that the solver never runs into failure is astrong indication that there is a fragment of domi-nance constraints that contains all constraints thatare used in practice, and that the solver automat-ically exploits this fragment.
This begs the ques-tion: What is this fragment, and can we developeven faster solvers that are specialised to it?One such fragment is the fragment of normaldominance constraints (Althaus et al, 2003).
Themost important restriction that a normal domi-nance constraint ?
must satisfy is that it is overlap-free: Whenever ?
contains two labelling atomsX : f (.
.
.)
and Y :g(.
.
.)
(where f and g may beequal), it must also contain an inequality atomX 6= Y .
As a consequence, no two labelled vari-ables in a normal constraint may be mapped to thesame node.
This is acceptable or even desirable inunderspecification: We are not interested in solu-tions of the constraint in Fig.
2 in which the quan-tifier representations overlap.
On the other hand,the NP-completeness proof in (Koller et al, 1998)is no longer applicable to overlap-free constraints.Hence normal dominance constraints are a frag-ment that is sufficient from a modelling perspec-tive, and possibly admits polynomial-time solvers.Indeed, it can be shown that the satisfiabilityproblem of normal dominance constraints can begfa bga bgfa bFigure 5: An example computation of the graphsolver.decided in linear time (Thiel, 2004), and the lin-ear algorithm can be used to enumerate N solvedforms of a constraint of size n in time O(n2N).
Wenow present the simpler O(n2N) enumeration al-gorithm by Bodirsky et al (2004).1 Note that Nmay still be exponential in n.Dominance Graphs.
The crucial insight under-lying the fast solvers for normal dominance con-straints is that such constraints can be seen as dom-inance graphs, and can be processed using graphalgorithms.
Dominance graphs are directed graphswith two kinds of edges: tree edges and dominanceedges.
The graph without the dominance edgesmust be a forest; the trees of this forest are calledthe fragments of the graph.
In addition, the dom-inance edges must go from holes (i.e., unlabelledleaves) of fragments to roots of other fragments.For instance, we can view the graph in Fig.
2,which we introduced as an informal notation fora dominance constraint, directly as a dominancegraph with three fragments and two (dotted) dom-inance edges.A dominance graph G which is a forest is calledin solved form.
We say that G?
is a solved form ofa graph G iff G?
is in solved form, G and G?
con-tain the same tree edges, and the reachability rela-tion of G?
extends that of G. Using this definition,it is possible to define a mapping between normaldominance constraints and dominance graphs suchthat the solved forms of the graph can serve assolved forms of the constraint ?
i.e., we can reduceconstraint solving to graph solving.By way of example, consider Fig.
5.
The dom-inance graph on the left is not in solved form, be-cause it contains nodes with more than one incom-1The original paper defines the algorithm for weakly nor-mal dominance constraints, a slight generalisation.GRAPH-SOLVER(G?
)1 if G?
is already in solved form2 then return G?3 free?
FREE-FRAGMENTS(G?
)4 if free = /05 then fail6 choose F ?
free7 G1, .
.
.
,Gk?WCCS(G?
?F)8 for each Gi ?
G1, .
.
.
,Gk9 do Si?
GRAPH-SOLVER(Gi)10 S?
Attach S1, .
.
.
,Sk under F11 return SFigure 6: The graph solver.ing dominance edge.
By contrast, the other twodominance graphs are in solved form.
Because thegraph on the right has the same tree edges as theone on the left and extends its reachability relation,it is also a solved form of the left-hand graph.The algorithm.
The graph-based enumerationalgorithm is a recursive procedure that succes-sively splits a dominance graph into smaller parts,solves them recursively, and combines them intocomplete solved forms.
In each step, the algo-rithm identifies the free fragments of the domi-nance (sub-)graph.
A fragment is free if it has noincoming dominance edges, and all of its holes arein different biconnected components of the undi-rected version of the dominance graph.
It can beshown (Bodirsky et al, 2004) that if a graph G hasany solved form and F is a free fragment of G,then G has a solved form in which F is at the root.The exact algorithm is shown in Fig.
6.
It com-putes the free fragments of a sub-dominance graphG?
in line 3.
Then it chooses one of the free frag-ments, removes it from the graph, and calls itselfrecursively on the weakly connected componentsG1, .
.
.
,Gk of the resulting graph.
Each recursivecall will compute a solved form Si of the con-nected component Gi.
Now for each Gi there isexactly one hole hi of F that is connected to somenode in Gi by a dominance edge.
We can obtain asolved form for G?
by combining F and all the Siwith dominance edges from hi to the root of Si foreach i.gfa bFigure 7: An unsolvable dominance graph.The algorithm is written as a nondeterministicprocedure which makes a nondeterministic choicein line 6, and can fail in line 5.
We can turn it into adeterministic algorithm by considering the nonde-terministic choices as case distinctions in a searchtree, as in Fig.
4.
However, if the input graph Gis solvable, we know that every single leaf of thesearch tree must correspond to a (different) solvedform, because for every free fragment that can bechosen in line 6, there is a solved form that has thisfragment as its root.
Conversely, if G is unsolv-able, every single branch of the search tree willrun into failure, because it would claim the exis-tence of a solved form otherwise.
So the algorithmdecides solvability in polynomial time.An example computation of GRAPH-SOLVERis shown in Fig.
5.
The input graph is shown onthe left.
It contains exactly one free fragment F ;this is the fragment whose root is labelled withf .
(The single-node fragments both have incom-ing dominance edges, and the two holes of thefragment with label g are in the same biconnectedcomponent.)
So the algorithm removes F from thegraph, resulting in the graph in the middle.
Thisgraph is in solved form (it is a tree), so we are fin-ished.
Finally the algorithm builds a solved formfor the whole graph by plugging the solved formin the middle into the single hole of F ; the result isshown on the right.
By contrast, the graph in Fig.
7has no solved forms.
The solver will recognise thisimmediately, because none of the fragments is free(they either have incoming dominance edges, ortheir holes are biconnected).3.4 A graph solver with chartsThe graph solver is a great step forward towardsefficient constraint solving, and towards an under-standing of why (normal) dominance constraintscan be solved efficiently.
But it wastes time whenit is called multiple times for the same subgraph,f1f2f3f4a5a6a7h1h21h22h31h32h41 2 3 45 6 7Figure 8: The chain of length 4.
{1,2,3,4,5,6,7} : ?1,h1 7?
{2,3,4,5,6,7}?
?2,h21 7?
{1,5},h22 7?
{3,4,6,7}?
?3,h31 7?
{1,2,5,6},h32 7?
{4,7}?
?4,h4 7?
{1,2,3,5,6,7}?
{2,3,4,5,6,7} : ?2,h21 7?
{5},h22 7?
{3,4,6,7}?
?3,h31 7?
{2,5,6},h32 7?
{4,7}?
?4,h4 7?
{2,3,5,6,7}?
{1,2,3,5,6,7} : ?1,h1 7?
{2,3,5,6,7}?
?2,h21 7?
{1,5},h22 7?
{3,6,7}?
?3,h31 7?
{1,2,5,6},h32 7?
{7}?
{2,3,5,6,7} : ?2,h21 7?
{5},h22 7?
{3,6,7}?
?3,h31 7?
{2,5,6},h32 7?
{7}?.
.
.
.
.
.Figure 9: A part of the chart computed for the con-straint in Fig.
8.because it will solve it anew each time.
In solv-ing, for instance, the graph shown in Fig.
8, itwill solve the subgraph consisting of the fragments{2,3,5,6,7} twice, because it can pick the frag-ments 1 and 4 in either order.We will now present a previously unpublishedoptimisation for the solver that uses caching to al-leviate this problem.
The data structure we use forcaching (we call it ?chart?
below because of itsobvious parallels to charts in parsing) assigns eachsubgraph of the original graph a set of splits.
Splitsencode the splittings of the graph into weakly con-nected components that take place when a freefragment is removed.
Formally, a split for the sub-graph G?
consists of a reference to a fragment Fthat is free in G?
and a partial function that mapssome nodes of F to subgraphs of G?.
A split is de-termined uniquely by G?
and F .Consider, by way of example, Fig.
9, which dis-plays a part of the chart that we want to computefor the constraint in Fig.
8.
In the entire graph G(represented by the set {1, .
.
.
,7} of fragments),the fragments 1, 2, 3, and 4 are free.
As a conse-quence, the chart contains a split for each of thesefour fragments.
If we remove fragment 1 from G,we end up with a weakly connected graph G1 con-taining the fragments {2, .
.
.
,7}.
There is a dom-GRAPH-SOLVER-CHART(G?
)1 if there is an entry for G?
in the chart2 then return true3 free?
FREE-FRAGMENTS(G?
)4 if free = /05 then return false6 if G?
contains only one fragment7 then return true89 for each F ?
free10 do split?
SPLIT(G?,F)11 for each S ?WCCS(G?
?F)12 do if GRAPH-SOLVER-CHART(S) = false13 then return false14 add (G?,split) to the chart15 return trueFigure 10: The graph solver with chartsinance edge from the hole h1 into G1, so oncewe have a solved form of G1, we will have toplug it into h1 to get a solved form of G; there-fore G1 is assigned to h1 in the split.
On the otherhand, if we remove fragment 2 from G, G is splitinto two weakly connected components {1,5} and{3,4,6,7}, whose solved forms must be pluggedinto h21 and h22 respectively.We can compute a chart like this using the algo-rithm shown in Fig.
10.
This recursive algorithmgets some subgraph G?
of the original graph G asits first argument.
It returns true if G?
is solvable,and false if it isn?t.
If an entry for its argument G?was already computed and recorded in the chart,the procedure returns immediately.
Otherwise, itcomputes the free fragments of G?.
If there are nofree fragments, G was unsolvable, and thus the al-gorithm returns false; on the other hand, if G?
onlycontains one fragment, it is solved and we can im-mediately return true.If none of these special cases apply, the algo-rithm iterates over all free fragments F of G?
andcomputes the (unique) split that places F at theroot of the solved forms.
If all weakly connectedcomponents represented in the split are solvable, itrecords the split as valid for G?, and returns true.If the algorithm returns with value true, thechart will be filled with splits for all subgraphs ofG that the GRAPH-SOLVER algorithm would havevisited.
It is also guaranteed that every split in thechart is used in a solved form of the graph.
Ex-tracting the actual solved forms from the chart isstraightforward, and can be done essentially likefor parse charts of context-free grammar.Runtime analysis.
The chart computed by thechart solver for a dominance graph with nnodes and m edges can grow to at most O(n ?wcsg(G)) entries, where wcsg(G) is the number ofweakly connected subgraphs of G: All subgraphsfor which GRAPH-SOLVER-CHART is called areweakly connected, and for each such subgraphthere can be at most n different splits.
Because arecursive call returns immediately if its argumentis already present in the chart, this means that atmost O(n ?wcsg(G)) calls spend more than the ex-pected constant time that it takes to look up G?
inthe chart.
Each of these calls needs time O(m+n),the cost of computing the free fragments.As a consequence, the total time that GRAPH-SOLVER-CHART takes to fill the chart is O(n(n+m)wcsg(G)).
Applied to a dominance constraintwith k atoms, the runtime is O(k2wcsg(G)).
Onthe other hand, if G has N solved forms, it takestime O(N) to extract these solved forms from thechart.
This is a significant improvement over theO(n(n + m)N) time that GRAPH-SOLVER takesto enumerate all solved forms.
A particularly dra-matic case is that of chains ?
graphs with a zig-zagshape of n upper and n?
1 lower fragments suchas in Fig.
8, which occur frequently as part of un-derspecified descriptions.
A chain has only O(n2)weakly connected subgraphs and O(n) edges, sothe chart can be filled in time O(n4), despite thefact that the chain has 1n+1(2nn)solved forms (this isthe n-th Catalan number, which grows faster thann!).
The worst case for the chart size is shown inFig.
11.
If such a graph has n upper fragments,it has O(2n) weakly connected subgraphs, so thechart-filling phase takes time O(n22n).
But this isstill dominated by the N = n!
solved forms thatthis graph has.4 EvaluationWe conclude this paper with a comparative run-time evaluation of the presented dominance con-gf haiFigure 11: A worst-case graph for the chart solver.constraints max.
solved formsRondane 961 ?Nets 879 2.4 ?1012Nets < 106 solved forms 852 997920Solver solvable max.
solved formsSaturation (?3.1) 757 10030Set constraints (?3.2) 841 557472Graph (?3.3) 850 768254Chart (?3.4) 852 997920LKB 682 17760All 682 7742Figure 12: Sizes of the data sets.straint solvers.
To put the results into context, wealso compare the runtimes with a solver for Min-imal Recursion Semantics (MRS) (Copestake etal., 2004), a different formalism for scope under-specification.Resources.
As our test set we use constraints ex-tracted from the Rondane treebank, which is dis-tributed as part of the English Resource Grammar(Copestake and Flickinger, 2000).
The treebankcontains syntactic annotations for sentences fromthe tourism domain such as (4) above, togetherwith corresponding semantic representations.The semantics is represented using MRS de-scriptions, which we convert into normal domi-nance constraints using the translation specified byNiehren and Thater (2003).
The translation is re-stricted to MRS constraints having certain struc-tural properties (called nets).
The treebank con-tains 961 MRS constrains, 879 of which are nets.For the runtime evaluation, we restricted thetest set to the 852 nets with less than one mil-lion solved forms.
The distribution of these con-straints over the different constraint sizes (i.e.number of fragments) is shown in Fig.
15.
Wesolved them using implementations of the pre-sented dominance constraint solvers, as well aswith the MRS solver in the LKB system (Copes-take and Flickinger, 2000).Runtimes.
As Fig.
12 shows, the chart solveris the only solver that could solve all constraintsin the test set; all other solvers ran into memorylimitations on some inputs.2 The increased com-plexity of constraints that each solver can handle(given as the maximum number of solved forms ofa solvable constraint) is a first indication that therepeated analysis and improvement of dominanceconstraint solvers described earlier was successful.Fig.
13 displays the result of the runtime com-parison, taking into account only those 682 con-straints that all solvers could solve.
For each con-straint size (counted in number of fragments), thegraph shows the mean quotient of the time to enu-merate all solved forms by the number of solvedforms, averaged over all constraints of this size.Note that the vertical axis is logarithmic, and thatthe runtimes of the LKB and the chart solver forconstraints up to size 6 are too small for accuratemeasurement.The figure shows that each new generation ofdominance constraint solvers improves the perfor-mance by an order of magnitude.
Another differ-ence is in the slopes of the graphs.
While the sat-uration solver takes increasingly more time persolved form as the constraint grows, the set con-straint and graph solvers remain mostly constantfor larger constraints, and the line for the chartsolver even goes down.
This demonstrates an im-proved management of the combinatorial explo-sion.
It is also interesting that the line of the set-constraint solver is almost parallel to that of thegraph solver, which means that the solver reallydoes exploit a polynomial fragment on real-worlddata.The LKB solver performs very well for smallerconstraints (which make up about half of the dataset): Except for the chart algorithm introduced inthis paper, it outperforms all other solvers.
Forlarger constraints, however, the LKB solver getsvery slow.
What isn?t visible in this graph is thatthe LKB solver also exhibits a dramatically highervariation in runtimes for constraints of the samesize, compared to the dominance solvers.
We be-lieve this is because the LKB solver has been op-timised by hand to deal with certain classes of in-2On a 1.2 GHz PC with 2 GB memory.puts, but at its core is still an uncontrolled expo-nential algorithm.We should note that the chart-based solver isimplemented in C++, while the other dominancesolvers are implemented in Oz, and the MRSsolver is implemented in Common Lisp.
This ac-counts for some constant factor in the runtime, butshouldn?t affect the differences in slope and vari-ability.Effect of the chart.
Because the chart solver isespecially efficient if the chart remains small, wehave compared how the number of solved formsand the chart size (i.e.
number of splits) grow withthe constraint size (Fig.
14).
The graph shows thatthe chart size grows much more slowly than thenumber of solved forms, which supports our intu-ition that the runtime of the chart solver is asymp-totically less than that of the graph solver by a sig-nificant margin.
The chart for the most ambigu-ous sentence in the treebank (sentence (4) above)contains 74.960 splits.
It can be computed in lessthan ten seconds.
By comparison, enumerating allsolved forms of the constraint would take about ayear on a modern PC.
Even determining the num-ber of solved forms of this constraint is only pos-sible based on the chart.5 ConclusionIn this paper we described the evolution of solversfor dominance constraints, a logical formalismused for the underspecified processing of scopeambiguities.
We also presented a new solver,which caches the intermediate results of a graphsolver in a chart.
An empirical evaluation showsthat each solver is significantly faster than the pre-vious one, and that the new chart-based solveris the fastest underspecification solver availabletoday.
It is available online at http://utool.sourceforge.net.Each new solver was based on an analysis of themain sources of inefficiency in the previous solver,as well as an increasingly good understanding ofthe input data.
The main breakthrough was the re-alisation that normal dominance constraints havepolynomial satisfiability and can be solved usinggraph algorithms.
We believe that this strategy ofstarting with a clean, powerful formalism and thensuccessively searching for a fragment that con-tains all practically relevant inputs and excludesthe pathologically hard cases is applicable to otherproblems in computational linguistics as well.However, it is clear that the concept of ?all prac-tically relevant inputs?
is a moving target.
In thispaper, we have equated it with ?all inputs that canbe generated by a specific large-scale grammar?,but new grammars or different linguistic theoriesmay generate underspecified descriptions that nolonger fall into the efficient fragments.
In our case,it is hard to imagine what dominance constraintused in scope underspecification wouldn?t be nor-mal, and we have strong intuitions that all use-ful constraints must be nets, but it is definitely aninteresting question how our algorithms could beadapted to, say, the alternative scope theory advo-cated by Joshi et al (2003).An immediate line of future research is to ex-plore uses of the chart data structure that go be-yond pure caching.
The general aim of underspec-ification is not to simply enumerate all readingsof a sentence, but to use the underspecified de-scription as a platform on which readings that aretheoretically possible, but infelicitous in the actualcontext, can be eliminated.
The chart may proveto be an interesting platform for such operations,which combines advantages of the underspecifieddescription (size) and the readings themselves (ex-plicitness).Acknowledgements.
The work has been fundedby the DFG in the Collaborative Research Cen-tre 378 Ressource-Adaptive Cognitive Processes,project MI 2 (CHORUS).We would like to thank Joachim Niehren andDenys Duchier for the extremely fruitful col-laboration on dominance constraint solving, AnnCopestake and Dan Flickinger for helpful discus-sions about the ERG and the LKB solver, and ourreviewers for their comments.
The primary imple-mentors of the various earlier constraint solverswere Katrin Erk and Sebastian Pad?
(?3.1), DenysDuchier (?3.2), and Sebastian Miele (?3.3).ReferencesErnst Althaus, Denys Duchier, Alexander Koller, KurtMehlhorn, Joachim Niehren, and Sven Thiel.
2003.An efficient graph algorithm for dominance con-straints.
Journal of Algorithms, 48:194?219.Krzysztof R. Apt.
2003.
Principles of Constraint Pro-gramming.
Cambridge University Press.Manuel Bodirsky, Denys Duchier, Joachim Niehren,and Sebastian Miele.
2004.
An efficient algorithmfor weakly normal dominance constraints.
In ACM-SIAM Symposium on Discrete Algorithms.
The ACMPress.Ann Copestake and Dan Flickinger.
2000.
Anopen-source grammar development environmentand broad-coverage english grammar using HPSG.In Conference on Language Resources and Evalua-tion.
The LKB system is available at http://www.delph-in.net/lkb/.Ann Copestake, Dan Flickinger, Carl Pollard, and IvanSag.
2004.
Minimal recursion semantics: An intro-duction.
Journal of Language and Computation.
Toappear.Denys Duchier and Joachim Niehren.
2000.
Domi-nance constraints with set operators.
In Proceed-ings of the First International Conference on Com-putational Logic, number 1861 in Lecture Notes inComputer Science, pages 326?341.
Springer-Verlag,Berlin.Markus Egg, Alexander Koller, and Joachim Niehren.2001.
The Constraint Language for Lambda Struc-tures.
Logic, Language, and Information, 10:457?485.Aravind Joshi, Laura Kallmeyer, and Maribel Romero.2003.
Flexible composition in LTAG, quantifierscope and inverse linking.
In Harry Bunt, Ielkavan der Sluis, and Roser Morante, editors, Proceed-ings of the Fifth International Workshop on Compu-tational Semantics, pages 179?194, Tilburg.Alexander Koller, Joachim Niehren, and Ralf Treinen.1998.
Dominance constraints: Algorithms and com-plexity.
In Proceedings of LACL, pages 106?125.
Appeared in 2001 as volume 2014 of LNAI,Springer Verlag.Tobias M?ller and Martin M?ller.
1997.
Finite set con-straints in Oz.
In Fran?ois Bry, Burkhard Freitag,and Dietmar Seipel, editors, 13.
Workshop LogischeProgrammierung, pages 104?115, Technische Uni-versit?t M?nchen.Joachim Niehren and Stefan Thater.
2003.
Bridg-ing the gap between underspecification formalisms:Minimal recursion semantics as dominance con-straints.
In Proceedings of the 41st Annual Meetingof the Association for Computational Linguistics.Oz Development Team.
2004.
The Mozart Pro-gramming System.
Web pages.
http://www.mozart-oz.org.Sven Thiel.
2004.
Efficient Algorithms for Con-straint Propagation and for Processing Tree De-scriptions.
Ph.D. thesis, Department of ComputerScience, Saarland University.0.010.111010010000  2  4  6  8  10  12  14  16  18  20  22Runtimepersolution(inms)Size of the constraint"Section-3.1""Section-3.2""Section-3.3""Section-3.4""MRS"Figure 13: Average runtimes per solved form, for each constraint size (number of fragments).1101001000100000  2  4  6  8  10  12  14  16  18  20  22Numberofsolutions/SizeofthechartSize of the constraint"chart-size""solved-forms"Figure 14: Average size of the chart compared to the average number of solved forms, for each constraintsize.
Notice that the measurements are based upon the same set of constraints as in Fig.
13, whichcontains very few constraints of size 20 or more.0102030405060700  5  10  15  20  25  30  35  40"rondane-nets""rondane-test-set"Figure 15: Distribution of the constraints in Rondane over the different constraint sizes.
The solid line in-dicates the 852 nets with less than one million solved forms; the dashed line indicates the 682 constraintsthat all solvers could solve.
