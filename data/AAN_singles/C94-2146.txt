A GRAMMAR BASED APPROACH TO A GRAMMAR CHECKINGOF FREE WORD ORDER LANGUAGESVladislav Kubofi, Martin Pl~itekFaculty of Mathematics and Physics, Charles UniversityMalostransk6 miln.
25, CZ - 118 00 Praha 1, Czech Republic1.INTRODUCTIONThis paper shows one of the methodsused for grammar checking, as it is beingdeveloped in the frame of the EC funded projectLATESLAV -Language Technology li)r SlavicLanguages (PECO 2824).The languages under consideration i theproject - Czech and Bulgarian - are both freeword order languages, therefore it is notsufficient to use only simple pattern basedmethods for error checking.
The emphasis is ongrammar-based methods, which are much closerto parsing than pattern-based methods.It is necessary to stress that we aredealing with a surface syntactic analysis.Therefore also the errors which are taken intoconsideration are surface syntactic errors.
Oursystem for identification and localization of(surl:ace) syntactic errors consists of two basicmodules - the module of lexical analysis and themodule of surface syntax checking.
In thepresent paper, we will describe the secondmodule, which is more complicated and createsthe core of the whole system.
Although it is notcrucial for our method, we would like to pointout that our approach to the problems ofgrammar checking is based on dependencysyntax.Let us illustrate the degree of licedom ofthe word order, which is provided by Czech, oneof the languages under consideration in theproject.
If we take a sentence like"Oznaeen3~ (Adj.
masc., Nom/Gen Sg.)
soubor(N masc., Nom/Gen Sg.)
se (Pron.)
nepodafilo(V neutr., 3rd pers.
Sg) tisp6~nE (Adv.)
otev~ft(V inf.)"
(The marked file failed to be openedsucessfully); word-tbr-word translation intoEnglish "Marked file itself failed succesfully toopen", we may modify the word order forinstance in the following way:Nepodai~ilo se fisp6~n6 otevfft oznaeen~ soubor.Ozna(:ens~ soubor se fisp6~n6 otev~ft nepodafilo.Ozna(cen~ soubor se nepodaiSlo tev?ft fisp6gn6.\[)sp6gn6 otev~ft ozna~:ens~ oubor se nepodafilo.Nepodafilo se oznaeen~?
soubor fisp6gn6 otevi~ft.Nepodafilo se oznaeens~ soubor otevi~ft isp6~n6.etc.The only thing concerning the wordorder, which we can guarantee, is that the aboveintroduced list of syntactically correct sentencesdoes not exhaust all possibilities, which arcgiven by the combinations of those six Czechwords 1.
The example also shows, that althoughthe word order is very free, there are certainlimitations to that freedom, as e.g.
the adjective- noun group ("oznaOcny soubor"), which isclosely bound together in all of the samplesentences, but may not be bound together insome other context - cf.
"...soubor Karlem veeraveeer oznaeen~ jako ~patnsL..." (...file \[by Karel\[yesterday evening marked as wrong...).The approach which we have chosen forthe developlncnt of the grammar checker forfree word order languages is based on the ideaof reducing the complicated syntactic structureof the sentence into a more simple structure bymeans of deleting those words from the inputsentence which do not cause any error.Let us take as an example lhe(ungrammatical) English sentence quoted in \[31:"*77ze little boys I mentioned runs very quickly.
"The error may be extracted by a stepwisedeletion of the correct parts which do not alTectthe (non)correctness of the sentence.
We willget successively the sentences "*The boysI mentioned runs very quickly", "*boysImentioned runs very quickly', "*boys runsvery quickly", "*boys runs quickly", "*boysfu r l s  ".1As mentioned above, we are concerned withsurface syntactic shape of the Czech sentences andthus we leave aside the semantic relevance of theword order variations due to their different opic -focus articulation.
For a detailed discussion of thesephenomena, see esp.
\[1\] and \[7\].906The example shows that it is useflfl touse a model which is able to deal with deletionsin a natural way.
We use the nondeterministiclist automata (NLA); a list automaton workswith a (doubly linked) list of items rather thanwith a tape.
The version of the NLA which isused in our project is described briefly in thetollowing sections.2.ERR()R CHECKING AUTOMATONThe core module of our system is theError: Checking Module.
It recognizes gram-matical correctness of a given portion of text, or,in other words, it distinguishes thegrammatically correct and grammaticallyincorrect subsequences (not necessarilycontinuous) of lexical elements in the input text.The input of the Error Checking Module(ECM) consists el' tile results of themorphological and lexical analysis.
The exactform of the inpnt elements is thoroughlydescribed in \[511.
For the purpose of this paper itis only necessary to say that the data,representing one lexical element, are containedin one complex feature structure.
The attributesare divided into two groups, input and outputattributes.
The ECM tries to reduce the inputsequence by means of deleting some symbols.The deleted symbols are stored.
They create thehistory of simplifications of the input text.The whole process is nondeterministic- i f  there are more variants how to delete thesymbols, all of them are sooner or later takeninto account.For the purpose of the grammar checker,we use a slightly modified version of NI,A,called Error Checking Automaton (ECA).
ECAhas a two-level storage, with a two-way linear"list on each level composed of data items(fields, cells).
In tile list there are twodistinguished items: one at the leflmost end andthe other at the rightmost end of the list.
Theseitems are called sentinels.The first level represents the input andthe working storage of ECA, the other oneECA's output.
ECA has a finite state controlunit with one head moving on a linear (doublylinked) list ot' items.
In each moment he head isconnected with one particular cell of the list("the head looks at the visited field").
Theactions of the working head are delimited by thefollowing four types of basic operations whichthe head may perform on the list: MOVE,DELETE, INSERT, and RESTART.
The ope-rations of the type MOVE ensure thebi-directional motion of the head on the list.
TheI)ELETE operations delete the input field in theinput level.
The INSERT operations add a fieldwith a symbol to the output level, more exactly:to the close neighborhood of the visited field.The RESTART operation transfers ECA fromthe current configuration to the (re)startconfiguration, i.e.
to the configuration i  whichECA is in the initial (unique) state.The processing of the ECA is controlledby rules, written in a formalism called DABG(Deletion Autolnata Based Grammar), whichwas developed especially for the projectI,ATESLAV.
It is described in detail in 151.
Thetheoretical background for erasing automata ofthe above described kind can be found in \[1611 and121.The ECM is logically composed of thefollowing three components:(a) list automaton P of the type ECA;(b) list automaton N of the type ECA;(c) control module C.2.1.
The automaton PThe automaton works in cycles between(re)starts.
The function of the autolnaton P is toapply one rule of the control grammar to theinput during one cycle.
That means to decidenondeterministically which finite subsequenceof the text in the input level of the list is correctaccording to one rule of the control grammar,and to delete this part from the input level.
After:that it continues the work in the next cycle.This means that if the input text is errorfree, the automaton P gradually repeats cyclesand deletes (in at least one branch of its tree ofcomputations) all the input elements (except forthe sentinels).The automaton P accepts the inputsequence, if the computation of P finishes bydeleting all the items (except for the sentinels)from the input level of the list.Notation:L(I') is a set of strings accepted by 1'.rs(P,w) = {w I, where w I is a word,which is a result of one cycle performed on theword w by the automaton P }907We can see that the following two factshold, due to the restarting nature ofcomputations of P:Fact 1: Let w be a word fi'om L(P), thenrs(P,w) c~ L(P) ve Q.Fact 2: If w is not a word fi'om L(P), thenrs(P,w) n L(P) = Q.Two basic principles how to formulaterules for the automaton P for a given naturallanguage L lk~llow from the above mentionedfacts:1) P contains only those (deleting) rules, forwhich there exists a sentence in L which willremain syntactically correct after the applicationof the rule.2) There may not be a syntactically incorrectscqucnce of words l'ronl L which would bechanged to a syntactically correct sentence of Lby means of the application of a rule fl:om P.Strong rules (S-rules) are the ruleswhich meet the following requirement:3) Any application of a rule will keep bothcorrectness and incorrectness of the inputsequence.Clearly the S-rules meet alo therequirements 1) and 2).The subautomaton of P, which usesS-rules only, is called Ps.One cycle (one compound step) of anautomaton P (or Ps) can be described from thetechnical point of view as follows:First, the automaton searches through theinput level for the place where there is apossibility to apply one of the deleting rules tothe input level of the automaton.
In the positivecase the deleting rule is applied and P (or Ps)returns to the initial configuration (restarts).2.2.
The automaton NThe task of the automaton N is to find inthe input text a minimal limited error, to make acorrection of it (cf.
the following del'inition).
Inone compound step the automaton N perfl)rms(nondeterministically) the following actions:First, similarly as the automaton P, Nlocates the place where to apply a rule of itscontrol grammar to the input level.
Then itchecks whether there is an error in the closeneighborhood of that place.
In the positive caseit marks the occurrence of the error at the outputlevel of the list and corrects the input level ofthe list by deleting some items from theenvironment of the current position of the head.Definition: The limited error is a stringz, fl)r which there are no y, w such that thestring yzw is a (grammatically) correct sentence(of a given language L).
If z can be written inthe form ofz = v0u I VlU2V 2 ... UkV kand there are also strings s,r such thatSUlU2... ukr is a grammatically correctsentence, u = UlU2 ... Uk is called a correctionof Z.A minimal limited error is a st6ng z,which is a limited error and there is nopossibility how to shorten z from either sidepreserving the property of being a limited errorfor z.2.3.
Tile control module CThe C module is a control submodule ofthe entire ECM module.
At the beginning of theoperation of ECM, the C module calls theautomaton P, which works as long as it ispossible to shorten the input level list bydeleting its items.
As soon as the automaton Pcannot shorten the list in the input level anymore and the input level does not contain onlythe sentinels, C calls the module N. Thisautomaton removes one error fi'om the inputlevel, makes an error mark and transfers thecontrol back to the C module, which invokes theautomaton P again.
Thus, the submodule Crepeatedly invokes the automata P and N(switching between them) as long as they areable to shorten the sequence of input elements.ff there are more possibilities at a certainmoment of computation, the automaton Pchooses only one of them, C stores the otherinto the stack and it tries to apply another ule tothe modified input.
That means that C issearching the tree of possible computationsdepth-first.908In any stage of selection of rules h)r Pand N there may be some input sentences, whichcontain either syntactically correct subsequencesof words which cannot be handled by the rulesof P, or syntactic errors which are not coveredby the rules of N. In this case both atttomatastop and thc input level still contains asubsequence of input elements.
Its contingentfinal emptying is ensured by lhe C module,which marks this fact at the output level.
Thenthe C module transfers control to the next phaseof the whole system.At this point it is ncccssary to clarify,what kind of output structure is built by ECM.As we have already mentioned, our approach tothe probleln is oriented towards dependencysyntax 2.All the rules ()f control grammar for Pand N delete the depending word from lhc inputand put it into the output atlribute of thegoverning word.
At the end of the process thereis a tree, which contains the information ahoutall the words front the input, about the order ofdeletions and also all error marks made by theautomaton N.The switching between !
), N and Cguarantees that any possible path in the tree ofcomputation will result in a complete structureof a deletion tree.The current best deletion tree is thencompared to any new deletion tree.
If the newtree is better (e.g.
it contains a smaller numberof errors or contains errors with a smallerweight), it is then stored for further use as thenew current best result.At the end of the whole process we havethe "best" result (or a set of best results, c.g,when there arc more possibilities how to parsethe sentence), which contains all relevantinlormation about errors present in the inputsentence.At the current stage of the work we havedecided to distinguish as considerable only thefolh)wing two types of errors:a) Only one call of N was used and the wholeprocess o1' deletions is completed by P and Nonly.2However, the use of DABG for creating the controlgrammars for P and N is not limited to dependencybased approach only.
Both the data structures(feature-structure based) and the DABG formalismallow to formulate rules which create the constituentstructure of the sentence at the output level.b) If there wcrc only the rules of l's and Napplied to a particular path in a tree ofcomputation.Clearly the tree with error marks of thclype a) will be among the best results of the Cfor any reasonable comparison of results.
Wehave to assign a slightly smaller weight to theerrors of the type b).3.
CONCLUSIONIn the previous paragraphs we havesketched tile specifications li)r a grammar basedgrammar checker lk)r a free word orderlanguage, as it is viewed from the perspective o1'our approach to the project I,ATESI,AV.
Themain goal of the project is to develop amethodology of solving tire problem of"grammar based" grammar checking of relevantlanguages.
We hope that the ideas presented inthe paper nmy hell ) us to achieve this goalsuccessfully.The paper shows that it is possible tomake a clear distinction between two parts ofthe grammar checker, namely line part(automaton P) which is based on rnJcs whichdescribe correct subparts of a given inpulsentence and therefore is very close to astandard dependency syntactic parsing, andbetween the part (automaton N) which is basedon rules which are to a great extent similar tothe rules used in standard "pattern based"approach to grammar checking.
Thecombination of these two parts provides a toolmore powerful (in the formal sense) than if bothapproaches are applied m isolation.The architecture of the system alsomakes it possible to re-use the existing linguisticknowledge about the computational grammar ofCzech.
11 also allows to divide the enormoustask of ilnplementalion of a grammar checker insmaller specialized subparts (c.g.
rules for 1 ) andN), which may be deveh)ped independently.As shown in \[41, similar specifications,based on the slune principle, can also be used inthe area of robust syntactic i)arsing.909References\[1\] Hajieovfi E.: "Free" word order describedwithout unnecessary complexity.
TheoreticalLinguistics 17, 1991, pp.
99-106.\[2\] Jan6ar P., Mreiz F., Pl~itek M.: A taxonomyof forgetting automata.
In: Proceedings ofMFCS'93, Gdansk, Poland, August 1993,LNCS 711, Springer 1993, pp.
527-536.\[3\] Jan~ar P., Mr~iz F., Plfitek M.,Vogel J.:Deleting automata with a restart operation,submitted for MFCS'94.\[4\] Kubofi V., Pl~itek M.: Robust parsing andgrammar checking of free word order languages,In: Proceedings of the 6th Twente Workshop onLanguage Technology, Universiteit Twente,Enschede, December 1993, pp.
157-161.\[51\] Kubofi V., Petkevi6 V., Pl~itek M.:Formalism for shallow error checking; JRPPECO 2824, In: Final Research Report of theTask: Adaptation and Transfer of DescriptionFormalisms, Saarbruecken, 19931611 Oliva K., Plfitek M., Seznamov6 automaty atypy popisu povrchov6 syntaxe (List Automataand the Types of Description of SurfaceSyntax).
In: SOFSEM'90, Jansk6 L,'izn6 1990,pp.61-64, Vol.II.\[7\] Sgall P., Haji6ovfi E. and Panevovfi J.: Themeaning of the sentence in the semantic andpragmatic aspect, Reidel: Dordrecht andAcademia: Prague, 1986.The work described in this paper was performedin the frame of the Joint Research Project PECO2824.910
