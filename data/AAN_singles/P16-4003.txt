Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics?System Demonstrations, pages 13?18,Berlin, Germany, August 7-12, 2016.c?2016 Association for Computational LinguisticsTermSuite: Terminology Extraction with Term Variant DetectionDamien CramLINA - UMR CNRS 6241Universit?e de Nantes, Francedamien.cram@univ-nantes.frB?eatrice DailleLINA - UMR CNRS 6241Universit?e de Nantes, Francebeatrice.daille@univ-nantes.frAbstractWe introduce, TermSuite, a JAVA andUIMA-based toolkit to build terminolo-gies from corpora.
TermSuite followsthe classic two steps of terminology ex-traction tools, the identification of termcandidates and their ranking, but imple-ments new features.
It is multilinguallydesigned, scalable, and handles term vari-ants.
We focus on the main compo-nents: UIMA Tokens Regex for definingterm and variant patterns over word anno-tations, and the grouping component forclustering terms and variants that worksboth at morphological and syntactic levels.1 IntroductionTerminologies play a central role in any NLP ap-plications such as information retrieval, informa-tion extraction, or ontology acquisition.
A ter-minology is a coherent set of terms that consti-tutes the vocabulary of a domain.
It also reflectsthe conceptual system of that domain.
A termcould be a single term (SWT), such as rotor, ora complex term.
Complex terms are either com-pounds such as broadband, or multi-word terms(MWT) such as frequency band.
Terms are func-tional classes of lexical items used in discourse,and as such they are subjected to linguistic varia-tions such as modification or coordination.As specialized domains are poorly covered bygeneral dictionaries, Term Extraction Tools (TET)that extract terminology from corpora have beendeveloped since the early nineties.
This first gen-eration of TET (Cabr?e et al, 2001) was mono-lingually designed, not scalable, and they werenot handling term variants, except for ACABIT(Daille, 2001) and FASTR (Jacquemin, 2001).This last question has always been a pain in theneck for TET.The current generation of TET improves on var-ious aspects.
As an example, TermoStat1dealswith several Romance languages, reaches to treattext up to 30 megabytes, and proposes a firststructuring based on lexical inclusion.
Term-Suite goes a step forward: it is multilinguallydesigned, scalable, and handles term variants.
Itis able to perform term extraction from languagesthat behave differently from the linguistic point ofview.
Complex terms in languages such as Ger-man and Russian are mostly compounds, while inRoman languages they are MWT.
TermSuiteextracts single terms and any kind of complexterms.
For some generic domains and some ap-plications, large amounts of data have to be pro-cessed.
TermSuite is scalable and has beenapplied to corpora of 1.1 gigabytes using a per-sonal computer configuration.
Finally, Term-Suite identifies a broad range of term variants,from spelling to syntactic variants that may beused to structure the extracted terminology withvarious conceptual relations.Since the first TermSuite release (Rocheteauand Daille, 2011), several enhancements aboutTET have been made.
We developed UIMA To-kens Regex, a tool to define term and variant pat-terns using word annotations within the UIMAframework (Ferrucci and Lally, 2004) and a group-ing tool to cluster terms and variants.
Both toolsare designed to treat in an uniform way all linguis-tic kinds of complex terms.After a brief reminder of TermSuite gene-ral architecture, we present its term spotting toolUIMA Tokens Regex, its variant grouping tool,and the variant specifications we design for En-glish, French, Spanish, German, and Russian.
Fi-1http://termostat.ling.umontreal.ca/13nally, we provide some figures and considerationsabout TermSuite resources and behaviour.2 TermSuite architectureTET are dedicated to compute the termhood andthe unithood of a term candidate (Kageura andUmino, 1996).
Two steps make up the core ofthe terminology extraction process (Pazienza etal., 2005):1.
Spotting: Identification and collection ofterm-like units in the texts, mostly a subsetof nominal phrases;2.
Filtering and sorting: Filtering of the ex-tracted term-like units that may not be terms,syntactically or terminologically; Sorting ofthe term candidates according to their unit-hood, their terminological degree and theirmost interest for the target application.TermSuite adopts these two steps.
Term-like units are collected with the following NLPpipeline: tokenization, POS tagging, lemmatiza-tion, stemming, splitting, and MWT spotting withUIMA Tokens Regex.
They are ranked accordingto the most popular termhood measure.
But in or-der to improve the term extraction process and toprovide a first structuring of the term candidates, acomponent dedicating to term variant recognitionhas been added.
Indeed, term variant recognitionimproves the outputs of term extraction: the rank-ing of the term candidates is more accurate andmore terms are detected (Daille and Blancafort,2013).Figure 2 shows the output of TermSuite TETwithin the graphical interface.
The main win-dow shows the terms rank according to termhood.A term candidate may group miscellaneous termvariants.
When a term is highlighted, the occur-rences spot by UIMA Tokens Regex are showedin the bottom window and the term features in theright window.3 Spotting multiword termsWe design a component in charge of spottingmulti-word terms and their variants in text, whichis based on UIMA Tokens Regex2, a concise andexpressive language coupled with an efficient ruleengine.
UIMA Tokens Regex allows the user to2http://github.com/JuleStar/uima-tokens-regex/define rules over a sequence of UIMA annota-tions, ie.
over tokens of the corpus, each rulebeing in the form of a regular expression.
Com-pared to RUTA (Kluegl et al, 2016), UIMA To-kens Regex operates only on annotations that ap-pear sequentially, which is the case for word an-notations.
The occurrence recognition engine hasbeen thus implemented as a finite-state machinewith linear complexity.3.1 SyntaxUIMA Tokens Regex syntax is formally de-fined by an ANTLR3grammar and inspired byStanford TokensRegex (Chang and Man-ning, 2014).Matchers Before defining regular expressionsover annotations, each annotation needs to beatomically matchable.
That is why UIMA TokensRegex defines a syntax for matchers.
A matchercan be of three types:[Boolean Exp] an expression matchingthe values of annotationattributes./String RegExp/ A valid Java regular ex-pression matching againstthe text covered by the an-notation.The dot ?.?
matches any annotation.The Boolean Exp within brackets is a combinationof atomic boolean expressions, boolean operators& and ?, and parentheses.
An atomic booleanexpression is of the form:property op literalWhere property is an annotation feature de-fined in TermSuite UIMA type system, op isone of ==, !=, <, <=, >, and >=, and literalis either a string, a boolean (true or false), ora number (integer or double).Rules Rules are named regular expressions thatare defined as follows:term "rule name": TokensRegex;Where TokensRegex is a sequence of quantifiedmatchers.
The quantifiers are:?
0 or 1*0 or several+ at least 1{n} exactly n{m,n} between m and n3http://antlr.org/143.2 EngineUIMA Tokens Regex engine parses the list of rulesand creates for each of these rules a finite-stateautomaton.
The engine provides automata withthe sequence of UIMA annotations of the prepro-cessed input document.
UIMA Tokens Regex en-gine implements the default behaviour of a regu-lar expression engine: it is greedy, backtracking,picking out the first alternative, and impatient.Every time an automaton (ie.
a rule) matches,TermSuite generates a rule occurrence andstores the offset indexes of the matched text.3.3 Application to terminology extractionExample In TermSuite type system, the val-ues of the feature category are the part-of-speech (POS) tags.
Rule an below extracts MWTcomposed of one or several adjectives followed bya noun.term "an": [category=="adjective"]+[category=="noun"] ;Matcher predefinition For the sake of bothreadability and reusability, UIMA Tokens Regexallows the user to predefine matchers.
Thus, Rulean can be expressed concisely as A+ N using thematchers N and A:matcher N: [category=="noun"];matcher Vpp: [V & mood=="participle"& tense=="past"];matcher A: [(Vpp | category=="adjective")& lemma!="same"& lemma!="other"];matcher C: /?
(and|or)$/;matcher D: [category=="determiner"& subCategory != "possessive"];matcher P: [category=="adposition"& subCategory=="preposition"];term "an": A+ N ;term "npn": N P D?
N ;term "acan": ?D A C A N ;Rule acan extracts coordination variants thatmatch the ?adjective conjunction adjective noun?pattern, such as onshore and offshore locations.The quantifier ?
expresses an optional determiner.Rule npn can extract both MWT: energy of windand energy of the wind.Features The annotation features availablein TermSuite type system are category,subCategory, lemma, and stem and in-flectional features such as mood, tense, orcase.Lexical filtering Matcher A above shows an ex-ample of lexical filtering that prohibits occur-rences of the listed lemma in the pattern.
For ex-ample, Rule an will not match the term candidatesame energy.Contextual filtering Contextual POS are pre-ceded by tilde (?).
Rule acan shows an exampleof contextual filtering.
A determinant should oc-cur for the pattern to be matched, but it will be notpart of collected MWT.4 Variant groupingTermSuite is able to gather terms according tosyntactic and morphological variant patterns thatare defined with YAML syntax (Ben-Kiki et al,2005).4.1 SyntaxA variant rule states a set of conditions that twoterm candidates must fulfil to be paired.
It consistsof:a rule name a string expression between doublequotes ("), ended by a colon (:),a source pattern and a target pattern, which aresequences of matcher labels.a boolean expression a logical expression onsource and target term features, denoted byrule.
The field rule is interpreted by aGroovy engine and must be defined in validGroovy syntax.Example The example below is the simplestvariant grouping rule defined for English.
"S-I-NN-(N|A)":source: N Ntarget: N N N, N A Nrule: s[0]==t[0] && s[1]==t[2]This rule is named S-I-NN-(N|A).
It statesthat one term candidate (the source) must be ofpattern N N, and the second term candidate (thetarget) of patterns N N N or N A N. The rulefield states that the lemma property of s[0], thefirst noun of the source, has the same lemma ast[0], the first noun of the target.
Likewise s[1]and t[2] must share the same lemma.
For exam-ple, this variant grouping rule will be satisfied forthe two terms turbine structure and turbine basestructure.15Word features The rule field expresses con-ditions on word features.
The two main featuresused for grouping are lemma and stem.
lemmais the default one, that is why stating s[0] == t[0]is equivalent to s[0].lemma == t[0].lemma.
Therule ?S-PI-NN-P?
below makes use of the stemproperty.
An example of grouping is effect of ro-tation and rotational effect where rotational is de-rived from rotation.
"S-PI-NN-P":source: N P Ntarget: A N, N Nrule: s[0]==t[1] && s[2].stem==t[0].stemMorphological variants TermSuite imple-ments Compost, a multilingual splitter (Logi-nova Clouet and Daille, 2014) that makes the de-cision as to whether the term composed of onegraphic unit, is a SWT or a compound, and forcompounds, it gives one or several candidate anal-yses ranked by their scores.
We only keep the bestsplit.
The compound elements are reachable whenTermSuite comes to apply the variant group-ing rules.
The syntax of YAML variant rules al-lows the user to express morphological variantsbetween two terms:"M-I-EN-N|A":source: N [compound]target: N N, A Nrule: s[0][0]==t[0][0] && s[0][1] == t[1]In the rule M-I-EN-N|A above, the tag[compound] after the source pattern states thatthe source has to be a morphosyntactic compound.In the rule field, we access the component fea-tures with the second index of the two-based in-dexing arrays, the first index referring to the POSposition in the source or target patterns.
As ex-amples, this rule groups the two term candidateswindfarm and windmill farm, and also hydropowerand hydroelectric power.4.2 EngineTerm variant grouping applies on term pairs witha complexity of O(n2), where n is the numberof term candidates extracted by UIMA TokensRegex.
TermSuite copes with this issue bypre-indexing each term candidate with all its pairsof single-word lemmas.
For example, the termof length 3 offshore wind turbine has three in-dexing keys: (offshore, wind), (offshore,turbine), and (turbine, wind).
The group-ing engine operates over all terms sharing the sameindexing key, for all indexing keys.
Therefore, theMWT Variantsen 43 41fr 35 37de 20 30es 62 40ru 18 16Table 1: Numbers of rules provided in Term-SuiteO(n2) complexity applies to small subsets of termcandidates, and the weight of variant grouping inthe overall terminology extraction process is quitereasonable (see Section 7).5 Language grammarsWe define MWT spotting rules and variant group-ing rules for the five languages supported byTermSuite: Fr, En, Es, De, and Ru.
Table 1shows the number of rules by languages for MWTspotting and for term variant grouping.6 Ranking by termhoodTerm candidates are ranked according to their ter-mhood that is measured with weirdness ratio (WR).WR is the quotient of the relative frequency in boththe domain specific corpus C and a general lan-guage corpus G.WR(t, C) =fnorm(t, C)fnorm(t,G)(1)Where fnormstands for the normalized fre-quency of a term in a given corpus, ie.
the averagenumber of its occurrences every 1000 words, andG is a general language corpus.6.1 General language corpusThe general language corpora used for computingWR are part of the compilation of newspapers pro-vided by CLEF 2004 (Jones et al, 2005).
Thesecorpora cover numerous and miscellaneous topics,which are useful to obtain a corpus representativeof the general language.
The corpora of the gen-eral language that we use to compute the frequen-cies of term candidates are:Newspaper Lang Size Nb wordsDer Spiegel De 382M 60MGlasgow Herald En 302M 28MAgencia EFE Es 1.1G 171MLe Monde Fr 1.1G 82MIzvestia Ru 66M 5.8M166.2 WR behaviourFigure 1 gives WR distribution on the English partof the domain-specific monolingual comparablecorpora for Wind Energy4[EOL].
[EOL] is avail-able for seven languages and has a minimum sizeof 330K words by language.
The x-axis of Fig-ure 1 is set to WR base-10 logarithm, hence a valueof 2 means that the term candidate is a 100 timesmore frequent in the specific corpus C than in G.0 1 2 3 4 502,0004,0006,0008,000Logarithmic of Weirdness Ratio - log (wr)Figure 1: Distribution of WR base-10 logarithmover all terms extracted by TermSuite on En-glish [EOL].We distinguish two sets of terms on Figure 1.The first one, starting around 0 until log(wr) ' 2,contains the terms that are not domain specificsince they occur in both the specialised and thegeneral language corpora.
The second set, fromthe peak at log(wr) ' 2 to the upper bound, con-tains both the terms that appear much more fre-quently in C than in G and the terms that neveroccur in G. Actually, the first peak at log(wr) ' 2refers to terms that occur once in C and never in G,the second lower peak refers to terms that occurtwice in C and never in G, and so on.We did not provide the distributions for other[EOL] languages nor for other corpora, becausetheir WR distributions are similar.
For all config-urations, the first peak always appears at WR ' 2and the upper bound at WR ' 5.
As a result ofthe analysis of WR distribution, we set 2 as defaultvalue of log(wr) threshold for accepting candi-dates as terms.4http://www.lina.univ-nantes.fr/taln/maven/wind-energy.tgz7 PerformancesTermSuite operates on English [EOL] in11 seconds with the technical configuration:Ubuntu 14.04, 16Go RAM, Intel(R)Core(TM) i7-4800MQ (4x2,2.7Ghz).We detail the execution times of each maincomponent with the use of two part-of-speechtaggers TreeTagger5(TT) and Mate6:TT MateTokenizer 1.3s idemPOS/Lemmatiser 2.4s 81sStemmer 0.67s idemMWT Spotter 4.8s idemMorph.
Compound Finder 0.14s idemSyntactic Term Gatherer 0.23s idemGraphical Term Gatherer 0.27s idemTotal (without UIMA overheads) 9.8s 88.5sScalability Time complexity is linear.
The pro-cessing of Agencia EFE corpus (cf.
Section 6.1),the biggest tested so far (171 million words), takes101 minutes to process.
This performance provesa very satisfactory vertical scalability in the con-text of smaller domain-specific corpora.
No kindof parallelism has been implemented so far, noteven Java multi-threading, which is the best oppor-tunity of optimization if an improvement of perfor-mances is required.8 ReleaseTermSuite is a Java (7+) program.
It can beused in three ways: the Java API, the commandline API, or the graphical user interface as shownon Figure 2.
Its only third-party dependency isTreeTagger, which needs to be installed sep-arately and referenced by TermSuite configura-tion.TermSuite is under licence Apache 2.0.
Thesource code and all its components and linguis-tic resources are released on Github7.
The lat-est released versions, currently 2.1, are availableon Maven Central8.
All links, documenta-tion, resources, and guides about TermSuite areavailable on its official website:http://termsuite.github.io/AcknowledgementsTermSuite development is supported by IS-TEX, French Excellence Initiative of Scientific5http://www.cis.uni-muenchen.de/?schmid/tools/TreeTagger/6https://code.google.com/p/mate-tools/7https://github.com/termsuite/8Maven group id is fr.univ-nantes.termsuite17Figure 2: TermSuite graphical user interfaceand Technical Information.ReferencesOren Ben-Kiki, Clark Evans, and Brian Ingerson.2005.
Yaml ain?t markup language (yamlTM) ver-sion 1.1. yaml.
org, Tech.
Rep.M.
Teresa Cabr?e, Rosa Estop`a Bagot, and Jordi Vi-valdi Platresi.
2001.
Automatic term detection:A review of current systems.
In D. Bourigault,C.
Jacquemin, and M.-C. L?Homme, editors, RecentAdvances in Computational Terminology, volume 2of Natural Language Processing, pages 53?88.
JohnBenjamins.Angel X. Chang and Christopher D. Manning.
2014.TokensRegex: Defining cascaded regular expres-sions over tokens.
Technical Report CSTR 2014-02,Department of Computer Science, Stanford Univer-sity.B?eatrice Daille and Helena Blancafort.
2013.Knowledge-poor and knowledge-rich approachesfor multilingual terminology extraction.
In Proceed-ings, 13th International Conference on IntelligentText Processing and Computational Linguistics (CI-CLing), page 14p, Samos, Greece.B?eatrice Daille.
2001.
Qualitative terminology extrac-tion.
In D. Bourigault, C. Jacquemin, and M.-C.L?Homme, editors, Recent Advances in Computa-tional Terminology, volume 2 of Natural LanguageProcessing, pages 149?166.
John Benjamins.David Ferrucci and Adam Lally.
2004.
UIMA: anarchitectural approach to unstructured informationprocessing in the corporate research environment.Natural Language Engineering, 10:327?348.Christian Jacquemin.
2001.
Spotting and DiscoveringTerms through Natural Language Processing.
Cam-bridge: MIT Press.Gareth J. F. Jones, Michael Burke, John Judge, AnnaKhasin, Adenike Lam-Adesina, and Joachim Wag-ner, 2005.
Multilingual Information Access for Text,Speech and Images: 5th Workshop of the Cross-Language Evaluation Forum, CLEF 2004, Bath,UK, September 15-17, 2004, Revised Selected Pa-pers, chapter Dublin City University at CLEF 2004:Experiments in Monolingual, Bilingual and Multi-lingual Retrieval, pages 207?220.
Springer BerlinHeidelberg, Berlin, Heidelberg.Kyo Kageura and Bin Umino.
1996.
Methods of au-tomatic term recognition: a review.
Terminology,3(2):259?289.Peter Kluegl, Martin Toepfer, Philip-Daniel Beck,Georg Fette, and Frank Puppe.
2016.
UIMA ruta:Rapid development of rule-based information ex-traction applications.
Natural Language Engineer-ing, 22(1):1?40.Elizaveta Loginova Clouet and B?eatrice Daille.
2014.Splitting of Compound Terms in non-PrototypicalCompounding Languages.
In Workshop on Compu-tational Approaches to Compound Analysis, COL-ING 2014, pages 11 ?
19, Dublin, Ireland, August.Maria Teresa Pazienza, Marco Pennacchiotti, andFabio Massimo Zanzotto.
2005.
Terminology ex-traction: An analysis of linguistic and statistical ap-proaches.
In S. Sirmakessis, editor, Proceedingsof the NEMIS 2004 Final Conference, volume 185of Studies in Fuzziness and Soft Computing, pages225?279.
Springer Berlin Heidelberg.J.
Rocheteau and B. Daille.
2011.
TTC TermSuite -A UIMA Application for Multilingual TerminologyExtraction from Comparable Corpora.
In Proceed-ings of the 5th International Joint Conference onNatural Language Processing (IJCNLP 2011, Thai-land, November.
Asian Federation of ACL.18
