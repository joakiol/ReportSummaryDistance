LiveTree: An Integrated Workbench for Discourse ProcessingGian Lorenzo Thione, Martin van den Berg, Chris Culy, Livia PolanyiFX Palo Alto Laboratory3400 Hillview Ave, Bldg.
4Palo Alto, CA 94304{thione|vdberg|culy|polanyi}@fxpal.comAbstractIn this paper, we introduce LiveTree,a core component of LIDAS, the Lin-guistic Discourse Analysis System forautomatic discourse parsing with theUnified Linguistic Discourse Model(U-LDM) (X et al 2004).
LiveTree isan integrated workbench for super-vised and unsupervised creation, stor-age and manipulation of the discoursestructure of text documents under theU-LDM.
The LiveTree environmentprovides tools for manual and auto-matic U-LDM segmentation and dis-course parsing.
Document manage-ment, grammar testing, manipulationof discourse structures and creationand editing of discourse relations arealso supported.1 IntroductionIn this paper, we introduce LiveTree, acore component of LIDAS (the LinguisticDiscourse Analysis System) for automaticdiscourse parsing with the Unified Lin-guistic Discourse Model (U-LDM) (Po-lanyi et al 2004).
The U-LDM is a theoryof discourse structure and semantics thathas as its goal assigning the correct inter-pretation to natural language utterances.1.1 Overview of LiveTreeLiveTree is an integrated workbench forsupervised and unsupervised creation,storage and manipulation of the discoursestructure of text documents under the U-LDM.
LiveTree does not support speech,dialog or interaction annotation (Bernsenet al 2002, 2003 and over view of systemsin Bernsen et al 2002).
The LiveTree en-vironment provides tools for manual andautomatic U-LDM segmentation and dis-course parsing.
Like RSTTool, LiveTreeprovides support for segmentation, mark-ing structural relations among segments,and creating and editing discourse rela-tions (O?Donnell 2003).
Similar to the D-LTAG system described in Forbes et al(2003) LiveTree is an experimental dis-course parser implementing a theory ofsentential and discourse relations.
How-ever, LiveTree is also a complete docu-ment handling and manual and automaticdiscourse parsing system.
Various applica-tions are supported as web services.
Ac-cordingly, LiveTree serves as both the userinterface and theory development envi-ronment for PALSUMM, a text summari-zation system built on top of LIDAS (SeeSection 5 below) In this paper, we de-scribe the resources LiveTree workbenchprovides for discourse level theoreticaldevelopment as well as document han-dling, manual and automatic text annota-tion and parsing.1.2 LiveTree FunctionalitiesLiveTree?s Java architecture shown inFigures 1 is modular and highly extensi-ble.
LiveTree is made up by: (1) a ModelManager which provides interfaces formanipulation, storage and retrieval of ac-tual documents and discourse representa-tions; (2) a Module Manager, which han-dles and provides access to the main GUIand to all installed modules; and (3) a Ser-vice Manager providing a polling interfacefor all active LiveTree Services.
Managercomponents rely on stubs which can beimplemented and extended from outsidethe framework?s core.The LiveTree Module Manager and allinstalled LiveTree Modules lie on top of ageneral GUI Layer handling the main Li-veTree window, which includes a menubar, a tool bar, a status bar and four doc-king areas.
The status bar is used for mes-sages to the user and notification of statusfor asynchronous services.
The menu barand the toolbar allow rapid access to gene-ral functions and to module-specific ac-tions, including hiding and showing modu-le windows.
Every module is assigned awindow which can be resized, docked orhidden/shown.When multiple modules are docked inthe same docking area they are arranged ina tabbed interface which allows easy ac-cess and maximizes display real-estate.Finally, the GUI Layer administers con-textual pop-up menus in a general, mod-ule-independent fashion: any module canregister a number of actions bound to aspecific context (e.g.
a sentence, a node, asub-tree, etc.)
and at the user's request, theGUI Layer polls the Module Manager forappropriate actions from every installedmodule.
LiveTree?s clean and intuitiveinterface is independent of the specificmodules installed and allows for seamlessintegration of custom modules not part ofthe current implementation.Table 1 gives a comprehensive over-view of LiveTree features as well as iden-tifying the modules or services that pro-vide them.2 Document HandlingThe Model Manager (MM) is the mainaccess point to models, defined as the syn-chronized unions of a document and its(annotated) discourse structure.
The MMrequires that appropriate LiveTree Ser-vices provide functionalities needed forpersistent storage and retrieval of anno-tated documents.
As long as documentsare not modified externally, their discourserepresentations can also be retrieved froma persistent XML format encoding U-LDM tree structure, visualization parame-ters, surface and deep node content alongwith other user-defined annotations.The Document Module (DM) enablesfull document creation, modification andannotation at the document, re-gion/selection, and sentence level.
TheDM provides the visual representation ofan HTML document 1  and preserves thetext organization, formatting, and non-textual information (figures, tables, etc.)
ofHTML source documents.
The DM alsoprovides visual feedback capabilities in-cluding highlighting and hiding/showingsections of documents.
The DocumentStub Interface provides the mapping be-tween a document?s content and notions ofparagraphs, sentences, units and spans.
Inthe current implementation, a document isdivided in paragraphs according to stan-dard notions; paragraphs are then token-ized in sentences using simple heuristicsand sentences are segmented into Basic1 Currently, only HTML document formatsare supported.
Other data formats can also besupported by implementing the Document StubInterface (DSI) appropriately,Module Manager Model Manager Service ManagerModel StubModule StubService Synchronization LayerDocumentStubDiscourseTheoryStubService StubHTML U-LDMLDM ParserPALSUMMOntoPALDocumentModule Tree ModuleBDU-TreeModuleContextModuleD-GrammarModuleGUI Interface LayerParsingOntologyXle2XmlParsingSegmentationRST- Framework/Architecturalo Module Manager Architecture withindependent dockable floating win-dows for each independent moduleo Service Manager with multi-threadedsupport for asynchronous services, no-tification management and SOAP/web-service supporto Generalized Model Manager for sup-port of multiple discourse theo-ries/modelso Scripting Engine for automatic batchexecution of actions and commands- Default Moduleso Document Module; BDU-Tree Module; DPT Module;Search Module; Content Module; Grammar Module;Segments Module.- Default Serviceso Discourse Parsing Service; U-LDMModel Persistence Service; Xle2XmlSyntax Parsing Service; DiscourseSegmentation Service; OntoPALFigure 1: LiveTree Architecture.Core system and several implemented modules and servicesDiscourse Units following the U-LDMdiscourse segmentation conventions dis-cussed below.3 LiveTree Support for DiscourseAnnotationThe LiveTree Workbench supports manualand automatic, supervised and unsuper-vised annotation practices for each step inthe analysis process.
In addition, our de-fault implementation includes a com-pletely integrated interface for writing,testing and debugging U-LDM Discoursegrammar rules which are used for auto-matically constructing the discourse repre-sentation for individual sentences and en-tire texts.3.1 U-LDM Parsing StepsThe U-LDM specifies rules both for seg-menting sentences into Basic DiscourseUnits (BDUs) and then for combining theBDUs into an Open-Right Discourse ParseTree (DPT) that captures structural rela-tions among constituent structures.
The U-LDM discourse parsing process can besummarized as follows:?
Identify potential Basic DiscourseUnits (BDUs) within sentence fromoutput of analysis of sentence docu-ments from the Xerox Linguistic Envi-ronment (XLE) Lexical FunctionalGrammar (LFG) parser using sen-tence-segmentation rules.?
Construct a set of Open-Right BDU-trees representations which map ontotop-level coordinated structures withinthe sentence, using syntactic informa-tion from the XLE parse and sententialdiscourse rules to identify the relation-ships among BDUs.Feature Description Modules & ServicesDocument Handling Support for HTML Documents (Import, Export,Create, Edit, Print, Tokenize in sentences)Document ModuleDiscourseSegmentation(Automatic & Manual)Support for LDM Discourse Segments (AutomaticSentence Segmentation; Manual Editing of Segments;Manual Sentence Segmentation; Inspect Segments?Syntax Content)BDU-Tree Module,Content Module,Xle2Xml Syntax parsing Ser-vice,Discourse SegmenterDiscourse StructureCreationDocument andSentence Level(Automatic & Manual)Support for LDM DPT and BDU Trees (AutomaticDiscourse Parsing; Sub-tree Attachment via Drag ?nDrop; Editing including Node Type Editing and Con-tent Editing; Node/Sub-tree Removal; Node-SpecificNotes Editing; Expand/Collapse Sub-Trees; Export toJPG; Printing; Extensible Semantic Composition)BDU-Tree Module,DPT Module,Content Module,Notes Module,Discourse Parsing ServiceSemantic ContentInspectionSupport for Feature Structure-like Semantic Con-tent of LDM Nodes (Node Specific via mouse selec-tion; F-Structure graphical view; In Place Editing;Grammar Condition Querying)BDU-Tree Module,DPT Module,Content ModuleSearch Full Text and RE search on: Document content,Node Surface Content, Nodes Semantic Content,Node-Specific Notes ; Online retrieval of matchingsourcesSearch Module,Document Module,DPT ModuleU-LDM Rule Editing  Grammar Editor: reusable conditions; easy-to-useGUIGrammar ModuleDiscourse GrammarTesting(Manual & Scripted)Support for Manual Grammar Testing (Check forrule enablement between attachment point and M-BDU selected from actual subtrees; Support ScriptedTesting with XML Based Language)Grammar Module,DPT Module,Discourse Parsing ServicePersistence Support Implements and supports serialization and deseri-alization in LiveTree XML format of LDM Annota-tion for documents.LDM Persistence ServiceOther Functionalities Tree Structure Zooming and Panning, Print Pre-view Functionalities, Copy/Cut/Paste for text andtrees)Tree Module,Document Module,BDU-Tree ModuleTable 1: Overview of LiveTree features and the modules or services that provide them.?
Attach the BDU-trees, each one as asingle unit, to the DPT by computingthe relationship between the node cor-responding to the root of a BDU-Treeto accessible DCUs aligned along theright edge of the DPT using rules ofdiscourse relations.
There are 3 possi-ble macro-types of relation:Coordination: new unit continues de-velopment of previous unitSubordination: new unit providesadditional information about previ-ous unitN-ary: new unit bears a special logi-cal, rhetorical or genre based rela-tionship to previous unit?
Once a BDU-tree is attached, itsleaves become terminal nodes of theDPT and nodes on its right edge be-come therefore accessible for attach-ment in the next iteration of the proc-ess.3.2 Live Tree Modules for U-LDMdiscourse annotationLive Tree Modules (LTM) provide exten-sive manual and automatic capabilities forannotating documents with U-LDM dis-course tags.
They are local to the frame-work and provide user-directed functional-ities, relying on mutual interaction throughthe LiveTree GUI.
Two modules in Li-veTree?s current implementation contrib-ute primarily to discourse annotation (be-sides the DM): the BDU-Tree Module andthe DPT Module.3.2.1 Discourse SegmentationA critical task for U-LDM analysis is toaccount for the availability for update ofappropriate discourse contexts or sub-contexts introduced in earlier text.
Thus,discourse segmentation under the U-LDMrequires the identification of discourseunits within the sentence that can functionas possible attachment points as well assegmenting sentential units and non-sentential structures such as titles fromother units.
The U-LDM may match in-coming discourse utterances with targetcontexts which are in syntactically subor-dinated positions within a previous sen-tence.
In order to construct the appropriaterepresentation of the rhetorical or semanticstructure of discourse we must thereforekeep sub-sentential units available for at-tachment at independent nodes along theright edge of the DPT.For discourse segmentation, the U-LDMdepends on the syntactic analysis of con-stituent sentences.
Initially, sentences aredivided up into discourse segments reflect-ing syntactic encodings of minimal unitsof meaning or function.
Subsequently,some segments are identified as BasicDiscourse Units (BDUs).
Only those dis-course segments that are of a type that canbe independently continued are BDUs.Operator segments are one example ofnon-BDU segments.
Gerunds, nominaliza-tions, auxiliary and modal verbs or cleftsare verb based constituents but not seg-ments because they do not independentlyestablish an interpretation context for up-date by subsequent units (Polanyi, 2004).Figure 2: A segmented sentence andthe BDU-Trees corresponding to its twocoordination-chunks.In LiveTree, the BDU-Tree Moduleshown in Figure 2 provides the visual in-terface and annotation tools for sentencesegmentation.
The top section of theBDU-Tree window is composed of twoareas: a small toolbar, and the sen-tence/segment viewer.
A simple toggle-button interface allows the user to selectbetween automatic or manual segmenta-tion.
In automatic mode, an external Seg-mentation Service (part of LIDAS) ispolled and a set of segments retrieved.Segments are automatically colored, andsegments embedding other segments arerepresented by non-contiguous spans oftext associated by the same highlightingcolor.
In manual mode segmentation isperformed by dragging the divider (therightmost button in the toolbar) to the de-sired span boundaries and, if necessary,assigning non-contiguous spans to thesame segment using drag-n-drop.3.2.2 BDU Tree ConstructionIn LIDAS operating in automatic mode,BDU-Trees are constructed from seg-mented sentences by mapping the LFG f-structure representations of sentential syn-tax produced by the XLE onto appropri-ated sentence-level discourse attachments.The resulting structure is a BDU-Tree, aDPT of an individual sentence.
Althoughautomatic BDU-Tree parsing can only beperformed on automatically generated seg-ments, LiveTree supports manual con-struction of BDU-Trees regardless of howsegmentation occurred.In manual mode, segments can bedragged from the Sentence Viewer area tothe bottom section of the window.
Whendropped, these become BDU nodes andthe content of the node can be manuallyannotated.
To create the relationship be-tween two nodes the user drags one nodeover the other as attachment point and se-lects a preferred relation from a pop-upmenu.
If syntactic/semantic annotationsare present they are correctly percolatedand composed throughout the BDU-Tree.BDU Trees can be easily edited andmanipulated for correcting or changingannotations, and for improving resultsgenerated by automatic BDU-Tree pars-ing.
Nodes can be removed, their associ-ated annotations inspected and modified,and the type of relation node changed.When the type of a relation node ischanged, the annotations of all nodesdominating the changed relation are up-dated and the correct syntactic/semanticinformation percolated through the tree inaccord with the new relation type.
Nodesand whole sub-trees can be detached andreattached at a different point using simplemouse gestures.3.2.3 Discourse Parse Tree Construc-tionU-LDM discourse parsing is a three stepprocess: (1) segmentation, (2) BDU-TreeParsing, and (3) DPT parsing.
LiveTreesupports automatic and manual modes atall three stages enabling multiple annota-tion scenarios.For example, users can segment and an-notate a document entirely by hand, or,alternatively, rely on automatic segmenta-tion and BDU-Tree parsing while manu-ally completing the more error-prone stageof DPT parsing.
Another option is to boot-strap the annotation at every stage usingLiveTree automatic resources and thenmanually correct mistakes and undesiredchoices (supervised mode).
A DiscourseSegmentation Service and a DiscourseParsing Service using two separate dis-course grammars provide automation.
Theuser interfaces of the BDU-Tree Moduleand of the DPT module allow for manualand supervised annotation.3.3 Discourse Relations under the U-LDMAutomatic DPT parsing is rule based.Lexical information (synonym, antonym,hypernym, discourse connectives), seman-tics (involving genericity, modality, cardi-nality, temporal interpretation etc.
), andsyntactic information (including topicali-zation, grammatical function promo-tion/demotion, etc.)
are used by weightedordered discourse grammar rules to deter-mine both the site of attachment and therelationship obtaining among the nodes.Rules may combine different sources ofevidential information.
LiveTree providesa complete rule development and testingenvironment used for both theoretical in-vestigation and automatic parsing.When a BDU-Tree is available for at-tachment, linguistic information availableat DCUs along the right edge of the DPTis compared with evidence retrieved fromthe incoming BDU-Tree to identify se-mantic information that acts as an ?ana-phoric anchor?
for information in the in-coming BDU-Tree by examining thecontent of the root node (M-BDU).
Eachattachment rule is checked against infor-mation available at the M-BDU and at theavailable DCUs and an ordered set of at-tachment sites and associated relations, asspecified by the winning rules, is gener-ated.
Local semantic, lexical and syntacticinformation is percolated up through thetree according to the constraints of the dis-course relations at each dominating node.If multiple attachments are possible, am-biguous parses ordered by likelihood aregenerated.
In LiveTree operating in auto-matic mode, the system proposes a pre-ferred structure.
Dispreferred structurescan be obtained by operating in supervisedmode.3.4 The DPT ModuleThe DPT Module shown in Figure 3provides the visual representation and ma-nipulation interface for U-LDM DiscourseTrees.
Advanced viewing capabilities helpthe user analyze large complex discoursestructures: sub-trees can be collapsed andexpanded; zooming and panning capabili-ties and fit-to-page printing are fully sup-ported.
Trees and sub-trees can be moved,rearranged, and removed with the sameediting functions available as in the BDU-Tree Module.
In addition, automatic layoutcapabilities enable even the most graphi-cally complex discourse structures to bedisplayed clearly.4 Discourse parsing with LiveTreeIn order to create an DPT, a user canwork in different modes.
In Fully Auto-matic (Unsupervised) mode, the user sim-ply selects a document for full processing.The document is tokenized, each sentenceis automatically segmented, and passed tothe parser.
The discourse parsing serviceautomatically creates BDU-Trees fromeach sentence and as trees are created theyare attached to the emerging DPT.
Theuser can then revise the structure and makechanges2.
In Incremental Automatic (Su-pervised) mode, the user is prompted forcorrections at selected stages of the proc-ess.
For example, after a sentence is se-lected by the system for processing, auto-matically segmented 3 , and parsed intoBDU-Trees, the user can rearrange nodes,change relationships between nodes, and ifnecessary, even merge multiple BDU-Trees into one.
The BDU-Tree(s) mightthen be automatically attached to the DPTand the user prompted again to correct anymistakes.
When the parsing process is su-pervised in this way, the number of overallmistakes is often reduced because attach-ments occur on incrementally checkedstructures thus maintaining the correctopen right edge at all times.Finally, in Manual DPT Parsing mode,BDU-Trees can be dragged from theBDU-Tree module to the DPT module andmanually attached to the DPT however theBDU-Trees were computed.
The decisionof how to combine manual and automaticprocessing is made by the user.2 For large documents problems often ariseas parsing mistakes build on themselves as theright edge changes and large structures areharder to examine and manipulate.3 Optionally the user can correct any seg-mentation mistake at this stage, though thisinterrupts the automatic mode and the attach-ment of the sentence must be completed ma-nually, since the necessary syntactic informa-tion is no longer attached to the segments.
Ofcourse, this information which was likely tohave been incorrect anyway, thereby necessita-ting correcting the segmentation.Figure 3: Two views of a document?s discourse structure.
Trees and subtrees can be modi-fied, rearranged and moved through simple drag ?n drop operations.4.1 Discourse Grammar Writing andTestingLiveTree incorporates facilities for writ-ing, accessing and testing discoursegrammars both at the sentence and at thedocument level.
Rules are edited via a dia-log window which allows the user to cre-ate new rules by reusing macros and con-ditions previously used in other rules.Access to all defined types of discourserelations is permitted and it is easy to setpriorities and preempting relations amongexisting rules.Rules are tested in two ways.
In scriptedmode, testcase files are written specifyingexemplary sentences and the discourserule(s) to be tested, along with the ex-pected outcome.
This way, several rulesand several testcases can be tested auto-matically at once.
A report is created at theend of the process with information aboutthe outcome of the tests.
In manual mode,a rule can be selected for testing from theGrammar Module and a node or subtreefrom the DPT can be dragged on a candi-date attachment site.
The parser attemptsto make an attachment using the selectedrule and reports the result to the user.
Thismechanism has proven very useful duringgrammar creation providing important in-formation to understand why expectedstructures are not created by the parser.5 The PALSUMM Text SummarizerThe global discourse trees resultingfrom U-LDM parsing in the LiveTree En-vironment are used for text summarizationin the PALSUMM System.
PALSUMM isa hybrid sentence extraction system thatuses conventional statistical methods toidentify important information in a textand then marks for extraction those dis-course segments in the DPT that are nec-essary in order to provide context for ref-erence and proper resolution of anaphors.The goal of PALSUMM Summarization isto produce high quality readable summa-ries.
We have tested our summarizationmethods using both manually annotatedand automatically created U-LDM struc-tures of Technical Reports taken from theFX Palo Alto archive of over 300 reportsin more than 10 domains of computer sci-ence.
These reports vary in size from a fewto thirty or more pages.
All 300 reportshave been automatically summarized.
Ini-tial results, though hardly perfect, are en-couraging.6 ConclusionLiveTree is a powerful and extremelyflexible workbench for discourse levelNLP annotation and parsing tasks.Throughout the design and implementa-tion of LiveTree, our goal has been to sup-port a full range of work-practices and tomake sure that annotation steps were inte-grated in an intuitive and seamless fash-ion.
Services and modules make use ofavailable resources efficiently and interop-erate unobtrusively.
New functionalitiescan be easily added on top of existing onesand the service-oriented LiveTree archi-tecture enables concurrent and asynchro-nous services to be executed locally orremotely as automatically generated webservices.
Working in LiveTree has provenvery efficient without waste of user?s time.For example, a document can be parsedautomatically in the background whileother tasks such as manual annotation,grammar writing or testing are performed.While LiveTree has been designed an im-plemented as a workbench for U-LDManalysis, many of the features and aspectsof the architecture could be adopted foruse with other analytic frameworks.ReferencesBernsen, N. O., Dybkj?r, L., and Kolodnytsky,M.
: An Interface for Annotating Natural In-teractivity.
In J. v. Kuppevelt and R. W.Smith (Eds.
): Current and New Directionsin Discourse and Dialogue, Dordrecht:Kluwer 2003.
Ch.
3. pp.
35?62.Bernsen, N. O., Dybkj?r, L. and Kolodnytsky,M.
: The NITE Workbench - A Tool for An-notation of Natural Interactivity and Multi-modal Data.
Proceedings of the Third Inter-national Conference on LanguageResources and Evaluation (LREC-2002),Las Palmas, 2002, 43-49.Katherine Forbes, Eleni Miltsakaki, RashmiPrasad, Anoop Sarkar, Aravind Joshi andBonnie Webber.
2003.
D-LTAG System -Discourse Parsing with a Lexicalized Tree-Adjoining Grammar  , Journal of Language,Logic and Information, 12(3).Barbara Grosz and Candace Sidner.
1986.
At-tention, Intention and the Structure of Dis-course.
Computational Linguistics 12:175-204.Bonnie Webber and Aravind Joshi.
1998.
An-choring a Lexicalized Tree-AdjoiningGrammar for Discourse.
ACL/COLINGWorkshop on Discourse Relations and Dis-course Markers, Montreal, Canada.William C. Mann and Sandra A. Thompson.1988.
Rhetorical Structure Theory: Towardsa Functional Theory of Text Organization.Text 8(3)243-281.Marcu, Daniel.
2000.
The Theory and Practiceof Discourse Parsing and Summarization.The MIT Press.
Cambridge, MA.O?Donnell, Michael.
2003.
RSTTool.(http:www.waysoft.com/RSTTool.
)Livia Polanyi and Remko Scha.
1984.
A syn-tactic approach to discourse semantics.
InProceedings of COLING 6.
Stanford, CA.413-419.Livia Polanyi, Martin van den Berg, ChrisCuly, Gian Lorenzo Thione, David Ahn.2004.
A Rule Based Approach to DiscourseParsing.
Proceedings of SIGDIAL ?04.
Bos-ton MA.
