On Some Aspects of Le rtcal StandardtzauonOn Some Aspects of Lexical StandardizationR6mt ZajacComputmg Research Laboratory, New Mexico State Umversttyzajac@crl nmsu eduIn developing and using many large mult~-hngual multt-purpose l xicons at CRL, we ~denttfied three dlstmctproblem areas (1) an appropriate meta-language (formahsm) tot representing and processing lex~cal knowledge(2) a standard generic lex~cal framework defimng a common lex~cal entry structure (names ot features and typesot content), and (3) shared umversal hngu~st~c types In th~s paper, we present he solutions developed at CRLaddressing d~mens~ons 1 and 2, and we mention the on-going research addressing dlmens~on 31 IntroductionWe envisage the standardlzauon f lexlcal resources as a three dlmenslonal process In developing, processing and usinglarge multl-hngual and multi-purpose l xicons, a first set of dlfficult~es lies m the lack of a standard format that isflexible enough to cover many different languages and apphcaUons, but sufficiently ngld to enable the use ot a singlelex~cal toolset shared across all these languages and apphcatlons A standard formahsm for encoding lex~cal knowledgeenables the construction of a generic lexical toolset SGML has been used for example for pnnted dlct~onartes Forcomputational dictionaries, a good alternative are feature structures (V6roms & Ide 92, Ide & V6roms 95) The secondset of problems ts almost as acute as the first tt ~s very difficult to design a sound lex~cal architecture, hst the all thefeatures that must be present for a variety of NLP apphcauons, predict the interaction between the various sub-structures, and predict the needs of the various NLP tools that would be accessing the dlcuonary A standard lextcalentry structure which defines the various features and provtde guldehnes to fill these features ~s a must for dictionarybudders Thts level has been addressed for example m the Eagles program (Eagles 93) where it ts somettmes mtxed wtththe third dimension Finally, the problem of hngmstlc standards per se is addressed only partmlly by the definmons ofgmdehnes and the use ot a standard lexlcal entry structme In a multdmgual setting, it is probably possible to dehnemultdmgual types, such as a standard hst of part-of-speech However, this direction is stall very much a tesearc.h arearelated to the quest for a umversal grammar (see e g Cahdl & Gazdar 95, 96) Current standard~zatlon ettolts such asEagles define standards for content for particular languages onlyIn Section 2, we present a generic lex~cal architecture that addresses point one the generic structure ot lex~eal ent~esand d~cuonar~es, notions of lex~cal schema and meta-schema, nd the generic lex~cal toolset Secuon 3 presents thestandard structure of lex~cal entries that ~s used m structuring a number of computational d~ct~onar~es at CRL Thestandard structure Is layered so that a particular dictionary could implement a sub-set of the layers only, whde stillimplementing the standard Furthermore, the structure ~s flexible enough so that a given layer can be extended {byadding new elements through an inheritance mechamsm) for a partlcular language, but forbids the redefinmon of thelexlcal meta-structure Section 4 mention open problems and on-going research on the topic of a umversal lex~s and aparameter-based approach to the acqmslt~on ofa lex~cal profile2 A Generic Lexical ArchitectureTo support the development of lmge lexicon, we ~mplemented a Lex~cal Knowledge Base (LKB) called Habanera(Zajac 97) A Habanera LKB ~s composed of (1) several monohngual d~ct~onanes, (2) translation relations hnkmgthese monohngual d~ct~onanes, and (3) a multdmgual d~ct~onary schema that defines a shared multdmgual inheritanceh~erarchy of lex~cal types for all monohngual d~ct~onanesThe system supports a variety of hngmstlc architectures Since the design of a lextcal architecture is a complex task,flex~bd~ty m des~gmng the structure of the LKB ~s an essentml feature Th~s flex~bdtty ~s provided by allowing ~o~ amulti-layered LKB schema m which each layer provides addmonal constrmnts on the structure of a lex~cal entry Thtsapproach ~s congruent w~th the d~stmct~on made m (Eagles 93) between meta-schemata, schemata nd instances Thts38On Some Aapects of Lertcal Standm dtzattonconstraint also means that the system ~s theory-neutral one can use the LKB to store LFG, HPSG, or any kind ot lex~caldataHTML TemplatesCheckerLKB?
T),pe DefimttonsSchemaAcquisition ToolsData ~ Browser ~ HTML Template~Compder  )Figure 1 Habanera ArchitectureThese reqmrements mouvated various tmttal chotces for the design and the ~mplementaUon f the system We use theText Encoding Imuatlve (TEI) definmon for printed dicuonarles (Sperberg-McQueen & Burnard 94, Chap 12) as asource of respiration for the defimtlon of a standard lcuonary entry structure (definition of the 'meta-schema' in Eaglesterminology) However, lexlcal entries are encoded as Typed Feature Structures (TFS) which Is our primary descnptwedewce for encoding lexlcal data Typed Feature Structures prowde a declarauve formalism with a well-defined formalsemanucs (and associated operations umficatton and subsumptlon) which we use instead of SGML to encode lex~calentries A set of type defimtlons pecifies what constitute vahd lexlcal entries and play a role similar to a DTD inSGML A type definmon specifies the set of features and restrictions on values for types Most of the lexlcal tools areparametnzed by the type defimtlons which are part ot" the LKB schemaMultlhngual dictionaries are orgamzed as a set of monohngual d~ctionanes plus translation relations between entries Inthe case of Knowledge-Based Machine Translation, relations are also defined between word senses and ontologtcalconcepts Dictionaries and lexlcal entries are stored In a a commercial DBMS which allow concurrent access to adictionary, an important conslderaUon when a dictionary Is developed by a team ol- lexicographers In the database, theformat of stored data is independent of the external representation formahsm All strings are encoded using Umcodeand we use UTF-8 for file exchange (Import/export functions)The system is designed to facd~tate acqmsmon as well as exploitation ot lexlcal resources Acqulsmon tools aleimplemented using HTML forms for the acquisition lnterl-aces and additional integrated utd~tles for chef.king thecorrectness of entries, for transcriptions, etc These tools are patametrlzed by resources (e g, HTML templates,grammars for transcriptions) that are loaded at runtlme A dlctlonary can be accessed mteractwely through an HTMLbrowser (also parametnzed by a set of HTML templates) Natural Language Processing tools such as parser do notaccess the database Instead, a dlcuonary ~s compded tn a compact binary format that allows fast lunt~me access toentries The dlcuonary compder can build several indexes to look-up entrtes m the compiled dictionary Runttmeindexes are compressed tries that provide random access to a compact binary dtcttonary file2.1 DictionariesThe hngulst works with a source dictionary where each dlcttonary entry is structured as a set of sub-entries An entrycan for example group together senses for the same lemma, different categories together for the same form, dfffelentlemmas m the same denvatlonal famdy, etc An entry has a unique key (a Umcode string) and a tree of sub-entries Ateach node o1" the tree, we attach a feature structure which encodes lexlcal nlormatlon The feature structure must follow39On Some Aspects of Lextcal Standardizationthe type definmons pecified in the dlctmnary schema The tree ot sub-entries defines an inheritance hleraichyLogically, only the leaves are actual entries the compiler traverses the tree of sub-entries, computing inheritance, andgenerating the compded lctmnary from the set of leavesI" k e y ' _ _ .
_ : 'Figure 2 A lexical entry as a tree of feature structuresThe dictionary schema contains various reformation useful for managing the dlcUonary (1) The schema ot entries isspecified using Typed Feature Structure definmons (2) The schema of relations among entries, if any A lelatlon mustspectahze the pre-defined RelatJ .on type and relations are used to describe synonymy, hyperonymy, etc They ate alsoused to hnk several monohngual d~ctlonanes toprovide translations (3) The set ot macros, defining abbrevmttons forcomplex feature structures (4) The location of the key in the entry which is used to build the primary dictionary index(each entry has a unique key within a dlctlonary) (5) The language (as a 3-letter ISO code) (6) Additional indexes thatare maintained by the database ngine for mteractwe look-up of entries These indexes are specified as a set ot paths man entry (7) The name of the checker class and of the checker defaulter classWe use (typed) feature structures to model entries and relatmns (Zajac 98, 92) Each type has a definmon, is simllm to aclass definmon in an Object Oriented language the defintuon of a type specifies what are the allowed features for thattype and what is the type of the value for each feature Types are used to define the structure of entries, of relations(links), and of lexlcal rules Since types can be orgamzed in an inheritance hierarchy, it is possible to define a commonframework for describing all dlctmnanes by defining a cross-language type hierarchy This multdmgual type h~erarchyspecifies dictionary-dependent (that is, language-dependent) elements such as the mventory ot morphosyntacttccategories by defining super-types that are common to two or more languages, thereby dehnmg a multthngualmhentance hierarchy of lexlcal typesOnly syntactically correct entries are stored in the database However, there are someconsistency checks which es~.apethe checking done by the parser as well as the type-checking mechanism plovided by the Typed Feature Structureengine For example, all headwords must be written using the alphabet of the language and other characters would notbe allowed This kind of checks must be added specifically for each dxctlonary through the Implementation t a checkerclass that is used by the database before adding entries in a dictionaryAn optmnal defaulter can also be provided for a given dictionary the defaulter analyzes a dictmnary entry and apphesdefault rules to fill m m,ssmg reformation For example, ff a feature number with value P lu ra l  IS hlled for a noun, thenoun is an irregular plural, otherwise, it is a regular noun and the number feature is not further specified, or, it thedictionary specifies a gender only for femm,ne nouns, the defaulter might add a masculine gender when tt is notspecified Entries m the database m,ght have such missing mformatmn However, our Typed Feature Structure nginedoes not provide defaults and a runume dlctmnary must include explicitly all the defaults the defaulter is used by thecompiler to fill in default mformauon and produce a compiled lctmnary where all reformation is expl,cttly expandedThe compilation process is done as follows on each entry (1) Apply dictionary-specific checks using the checker class(if defined) (2) Apply the defaulter to augment the dictionary entry and solve all the defaults Note that the checker andthe defaulter work on the tree of sub-entries, not on mdwidual feature structures (3) Move all reformation down to theleaves of the tree of sub-entries (compute inheritance) (4) Expand macro defimtions (5) Comp,le a feature structure foreach leaf of the sense tree (7) Use type inference to ,nfer the most specific type for each sub-~eature structure within afeature structure (8) Type check the feature structures m a feature structure, expand the types of all sub-teatuies t ructures  by unifying m the defimtion of the type40mOn Some Aspects of Lexwal Standas dtzauonRelauonships between lexlcal entries are modeled using binary hnks (relauons), used to describe synonymy relations,denvatmns relauons, translanon relauons (see Sectmn 1 4), thesaurus relatmns, etc Any relatmn defined in thed~ctlonary schema must inherit from the Re la t ion  type Relations can be given an arbitrarily complex internalstructure and can bear reformation A relatmon Is formally defined asRe la t lon  = \ [dom Ent ry ,range  Ent ry \ ]  ,For example, n a relaUon that specifies a cross-reference d fined freely by the lexicographer, the domain feature willpoint to the entry which is the source of the relatmn and the target entry (range feature) will be ldenufied by prowdmgthe key of that entry as m#0= \ [key  ~' a rm" ,.... x re  f \[ dom # O,range  \[ key  "armament"  \] ,note  "Co l lec t lve  fo r  a rm "\]\]A d~ctlonmy browser could Interpret these relations by generating hypelhnks between entries for example A dlct,onaryalso contains rules whlch specify producuve relations within an entry (see Sect,on 1 3) or among entries within multipledlctmnanes or still within a single dlcUonary (see Section 1 4) The type Relation is used in the definition ot translationrelat, ons, transfer ules and lex~cal rules each of these rules are defined as sub-types of Relate.on2.2 Schema and meta-schemaThe Eagles gmdehnes on standardization f lexlcal resources (Eagles 93) introduce the dlstmcuon between (1) "Themeta-schema which defines general well-formdness condmons for the schema", (2) The schema "defines the logicalformat of language-specific and level-wise hngulstlc descriptions", and (3) "Instances are the mdw,dual exicons forwhich there is a translation relalaon expressed between the individual format of the instance and the 'type' defined bythe schema"Fngure 3Genermc StructurePersman-Enghsh SchemaA specific dictionary schema, e g a Persmn-Enghsh dlctmnary, specmhzes the generic schema,which ms mtself budt on a hard-coded core lexlcal structuremmmIn an Habanera lexlcal knowledge base, the only fixed structure is the tree of sub-entries, and anything else xs definedvia the dlcuonary schema Using the Typed Feature Structure language developed at CRL, Jt is possible to definedzcuonary schemata using several layers of abstractions, therefore introducing arbitrary intermediate layers between themeta-schema and the schema proper In this TFS language, sets of type definmons are grouped Into modules and sub-modules (a notion similar to the notion of package m programming languages such as Lisp or Java) The use el modulesallows to structure a schema s a set of modules introducing addmonal structures and more specific constra,nts on theformat of an instance In the next section, we wdl present he lexlcal stlucture which ,s used In CRL dictionaries Theschemata of dlctmnanes are orgamzed as follows A generic module defines the generic structure o ta  dictionaryLanguage specific modules add to that specification language dependent mformatxon (e g a specific Inventory otmorphosyntacuc leatures) of that is grafted on the generic structure or which speclafizes the generic sUucture Thegeneric structure has been respired by the TEI defimtlon and in presented in Secuon 3The set of type definmons pecified m the dictionary schema Is used by the type-checker whlch checks that a d,ctzonaryentry Is well-typed and by the compiler which braids a compact binary representatmn of a dictionary entry as a featurestructure2.3 ToolsThe d~ctlonary browser and editor are parametnzed by a set ot HTML templates which dehne the presentaUon format obe used for dlsplaymg feature structures at each level of the tree ot sub-entries The mapping of the stlucture ot an entry41On Some Aspects of Le.ucal Standardizationto an HTML template rel,es on naming convent,ons based on the value of paths to name HTML elements m an HTMLdocumentI-I~QOO~lBBfll~l:::ll~Ofll\]flflflg\]Bill B,,,to.- ,t..~ .~F, gure 4 A Habanera Browser for a Persmn-Enghsh dleUonarySince most Web browsers do not support mput methods for languages other than Enghsh, mput of character strings ~sdone using a transcr, ptlon A set of transcription tables can be defined by the user and selected m the browser wheninputting some character strmg for e g headwords However, Web browsers upport he display of almost any majorlanguage I and Umcode strings can be dtrectly embedded m HTML documents Habanera lso provide import/exportfunctions The format o1" a dlcttonary file uses a textual syntax for feature structure (the one used in the examples) Thedictionary file encoding is UTF-83 Standardizing the Structure of Lexical EntriesThe d,ctlonartes developed at CRL shared the same generic structure Each language specific dictionary refines theshared schema by add,ng language specific ,nformation (e g,  a specific inventory of morphosyntactlc features) Thedata ot a monohngual dtctlonary is a set of entr, es corresponding toword senses as descrtbed m (Meyer et al 1990) and(Onyshkevych and N1renburg, 1994) We distinguish between computational features that are used by NLP componentssuch as parsers (form, gram, sem, synSem, t rans ,  re l ,  lexRule,  usg).
2 and other features that are used bylexicographers definlUon (clef).
example (eg).
etymology (etym).
closs-reference (xref)  and note (note) Thefeatures present for each sub-entry areEnt ryE lements  = \[form Form,gram Grammar,s em TMR,synSem SynSemMap,trans Trans la t  zons,rel Lexzca lRe la t  zons,lexRule Lexzca lRules ,usg Usage,def Strzng,eg Example,etym Strzng,xref  Xref,note Strzng\] ,The computational features used by NLP components are the following1 form mformatton related to the orthographic form of the word and its morphology (includes morphologtc.a\]features and morphological variants),2 gram mformaUon related to the syntactic behawor of the word (includes POS and subcategonzatlon ln/ormauon),1 With the important except,on ot Arabic-based scripts2 The names ot most features are taken from the TEl speclficat~on42On Some Aspects of Le rical Standardlzanon3 t rans  a cross-reference to one or more enmes In a target dicnonary,4 sere semantic mapping to a conceptual structure,5 synsem mforrnatlon on syntax-semantic linking,6 re l  reformation on paradigmatic (synonyms, antonyms, ) and syntagmatlc (collocations, co-occurrences, )relations,7 lexRu le  specification of productive lexlcal relations among entries within a dictionary (e g, productivemorphological derivations),8 usg restrictions on the usage of some word (domain, geographical, temporal, )In the remainder of this section, we present he structure ot the form and gram features (see Zajac et al 98 for adescription of other features)3.1 Orthography and MorphologyThe form feature records information about the type of word whether the word is a full word, and acronym, or anabbreviation These types are introduced since typically acronyms and abbrewauons are processed ifferently fromordinary words, for example dunng a tokemzation phase (see e g Grefenstette 94) and words or compounds areprocessed uring or after a morphological nalysm the dictionary compiler will produce different runhme dictionariesthat include different hnds of information as needed by the various components of the systemThe orthography feature records the citation form of the word as well as a list of variants There could also be addmonalinformation such as capitalization, hyphenation or syllabification (a useful information tot an English morphologicalanalyzer for example)The morphology records three different kinds of information morphological information that is attached to the wordand stored In the lexicon (e g,  gender Information), inflectional information that is typically computed by amorphological analyzer (and passed to the syntactic analyzer), and denvatlonal information that could be either pre-computed in the lexicon or dynamically computed by a morphological nalyzer In our lexical model, we require thateach dictionary includes as lexical morphological reformation the part-of-speech (using the pos feature) and theindication if the word has a regular morphology or not (using the Boolean regu lar  feature)Irregular forms are listed In the dictionary if the value of the regu lar  feature is Fa lse  This feature is plovlded tohandle simple cases where a given class of words has only one inflectional paradigm English noun for example can bedefined as having only one paradigm for the number inflection, where phonological variants ale handled by themorphological processor and anything that falls out of the domain of the morphological processor will be treated as anirregular form Note that the dictionary schema must allow for the inclusion of all inflected forms for irregularsIf the linguist has to define inflectional paradigms, as it is the case in many languages, these paradigms must also bespecified m the dictionary schema nd should allow for the specification ot various stems involved For example, onemight consider that English verbs have two paradigms, one where all forms are derived from the citations \[orm (want,wants, wanted, wanted, wanting) modulo phonological changes, one class where some forms must be specified m thelexicon (take, takes, took, taken, takang), and a class of irregulars (be, is, was, been, being) Therefore, English verbscould be classified as regular or irregular, and for regular, they fall m one of two paradigms The readel will havenoticed that the morphological model used in the lexicon must be compatible with the model Implemented by anymorphological processor using the d~cuonary Our experience has shown that ~t ~s not always tnvml to reconcile amorphological nalyzer developed independently from a dictionary with the dictionaryThe structure ot the form feature must therefore include the following elements\[type Full I Abbrevlatlon I Acronym,orth \[clt Strlng, // The cltatlon formvarlants List\], // Optlonally, syllablflcatlon, capltallzatlon, etcmorph \[ lex \[pos POS,regular Boolean\] ,infl InflectlonalFeatures, // Always unspecxfled xn the dlctlonaryderlv DerlvatlonalStructure \] \]For example, the form structute of an English entry might look like43aai\[ \]ae.iaammIi1On Some Aspects of Lextcal Standardzzatton#0=\[key #k="brlng",form orth exp #k,sense #i=\[morph \[lex \[pos eng Type MalnVerb,regular  True,parad lgm i,s lmplePast  "brought",pastPar t lc lp le  "brought"\]\]\]\]wheretheteatu~s rlnflectlonaland denvattonmformatton a~ leftunspectfied3.2 SyntaxThe gram feature groups all information related to the syntactic behavior ot the word The grammai teature gramcontains as required features the part-of-speech information (feature pos) and the subcategonzatton frame (teatureframe) The frame feature encodes the subcategonzatlon frame of the predicate xpressed as a hst of phrasal typesThe grammar feature may include addmonal features uch as the subcategory, for example Mass/Countable for nouns,or Intransmve/Transmve for verbs, although this Is typically better epresented by defimng the appropriate sub-types toteach part-of-speech Additionally, an reflectional feature J.nfl Is also defined for use by syntactic processors the valueof this feature ts shared with morphology During processing, a morphological nalyzer will produce aset of mflecuonalfeatures and make them available to syntax through the feature gram J-nfl Conversely, a syntactic generator willproduce a set of mflecuonal features for iexlcal heads and make them available to the morphological generatorThe Grammar feature (path gram m an entry) has type Gram This type is defined asGram = \[pos POS,frame List,infl MorphInf  lectlon\],For example, the followmg (partml) entry specifies two subcategonzatlon frames for the noun "announcement"\[ key "announc ement" ,gram \[pos N,sense gram frame < NpComp\[head "that"\] >,sense gram frame < NpObl \[head "of" \] > \] \]4 ConclusionStandardizing lexicons represent an interesting intellectual and practical endeavor Past experience at CRL mdeveloping, processing and using many large lexicons for several tasks, including machme-translauon systems,machine-aided translation tools, and mformatmn processmg systems hows that a first set of dlfhculttes hes m the lackof a standard format hat Is flexible enough to cover many dlffeient languages and applications, but sutficlently l lgid toenable the use of a single lexlcal toolset shared across all these languages and apphcatlons This problems have beenaddressed by developing a generic dictionary software architecture that is now use to manage several arge d,cuonartesdesigned for machine-aided translation as well as for machine translauonThe second set of problems is almost as acute as the first It is very difficult to start des,gnmg a sound lexlcalarchitecture from scratch, hst the all the features that must be present for a variety of NLP apphcauons, predict theinteraction between the various sub-structures, and predict he needs of the various NLP tools that would be access,ngthe dlcuonary This has been done many times at CRL and thin knowledge is m part incorporated in the generic standardlexical structure briefly presented ,n Secuon 3 When developing a new dictionary, the linguist must use a pie-defineddtcuonary entry structure and follow a set of gmdelmes for defining the language-specific eatures This guarantees thatthe dlctlonary can be developed and maintained us,rig a standard dictionary management toolset, and that thereformat,on contained in the dictionary can actually be used for a variety of NLP at~phcauons which requllements arenot always obv,ous for a non-expert The construction o!
such a standard lextcal structure ~s stdl howevel an open tasksome areas are defined with more precision than others We started from a tairly unconstrained structuie and cross-44On Some A~pects ofLe.ucal Standm dtzattonlanguage work brought out commonalmes that have been progress,rely incorporated mthe standard structure Althoughthe standard structure presented mth~s paper has been now stable for over a year, further esearch and expenmentauoncouldyteld new constraints hat could be ,ncorporated mthe archltectureFinally, the problem of hngumUc standards per se Is addressed only parually by the definmons of gmdehnes and the useof a standard lexlcal entry structure In particular, a standard entry structure imposes a spectfic orgamzatton of thehngu~st~c mformatmn encoded m an entry It defines the kind of hngmst,c reformation to be encoded and how tostructure this mformauon In a multdmgual setting, it xs probably possible to define multdmgual types, such as astandard hst of part-of-speech However, our exper,ence on more than 6 different languages show that trying to estabhsha set of multlhngual types Is not worth the effort the use of a standard lex~cal structure allows the lmgu~st to narrowdown rapidly on the inventory of language-spec,fic types which can then be hsted with relatlve ase Standardlzauon llex~cal content ~s sull a very much open problem, and th~s research area related to the quest tol a umve~sal grammar Inthe Boas project (Nlrenburg & Raskm 98), the hngmst defines language-specific propert,es using a knowledgeehcltauon system that contains knowledge about the set of possible hngmst~c parameters and values The hngutst ~sgraded through a set of queries and answers, the result ot which Is a hngulstlc profile of a language From thls languageprofile, the goal is to generate automatically the set ot language-specific lexlcal propemes that define the schema ol ad~cuonary5 References1 Lynn Cahlll and Gerald Gazdar 1995 "Muluhngual lexicons fol related languages" In Ptoceedmgr o/the 2nd DTILanguage Engmeermg Conference pp169-1762 Lynn Cahdl and Gerald Gazdar 1996 "Multdmgual Lexicons for Related Lexicons" In Proceedmga oJ AISB'96Workshop on Multdmguahty nthe Lexicon, Brighton, UK, 69-753 Eagles 1993 "EAGLES Lexicon Arch,tecture" EAGLES Document EAG-CLWG-LEXARCH/B (http//www dc pl cnr lt/EAGLES96/lexarch/lexarch html)4 Gregory Grefenstette 1994 "What is a Word, What is a Sentence Problems of Tokemzatmn" Rank XeroxResearch Center, Techmcal Report ML'IT-004, April 19945 Ide, N,  V4ron,s, J (1995) "Encoding dlcuonanes" In Ide, N,  V4roms, J (Eds) (1995) The Text Encodinglnttlattve Background and Context Kluwer Academic Pubhshers, Dordrecht, 167-1796 Sperberg-McQueen, C M, Burnard, L 1994 Guldel,nes fot Electrontc Te.~t Encoding and lnterdzange, TextEncoding Inltmuve, Ch,cago and Oxford, Chapter 12, "Prmt D~ctlonanes", 312-370http //etext vlrglnla edu/TEI html7 Meyer, I ,  B Onyshkevych and L Carlson 1990 "Lexlcographlc pr,nclples and design for knowledge-basedmachine translation" Techmcal report CMT-CMU-90-118, Carneg,e Mellon Umverslty, August 13.
19908 Sergel Nlrenburg and V, ctor Raskm 1998 'Umversal Grammar and Lexls for Qutck Ramp-Up ol MT Systems"Proc of the 17th Internattonal Conference on Computattonal Ltng,tt.~ttts - COLING'98, 10-14 August 1998,Montreal, Canada pp975-9799 Onyshkevych, Boyan, and Serge~ N,renburg 1994 The lextcon m the acheme of KBMT things Memoranda mComputer and Cognmve Sc,ence, MCCS-94-277 Las Cruces, N M New Mexico State Umverstty Reprmted asA lexicon for knowledge-based machine translauon, m Dorr and Klavans 1995 (eds), 5-57I0 Jean V6roms and Nancy Ide 1992 ",%.
teature-based model for lex~cal databases" Proc of the 14th lnte~nattonalConference on Cornputattonal Lmgutsttcs- COLING'92, August 23-28 1992, Nantes, France pp588-59411 R6mx Zajac 1992 "Inheritance and Constraint-Based Grammar Formahsms" Computat,onal Lmgtttsttcs 1~/2,Spec,al Issue on Inheritance, June 199212 R6m, Zajac 1997 "Habanera, a Mult, purpose Muluhngual Lex~cal Knowledge Base" NLPRS Wo, kshop onMulUhnguat InformaUon Processing, Natural Language Processmg Pactfic Rtn~ Sympostum 1997, 1-4 December,1997, Fhuket, Thmland13 R4mt Zajac, Evelyne Vlegas and Svetlana Sheremetyeva 1998 "The Generic Structure of a Lex,cal KnowledgeBase Entry" Ms Computing Research Laboratory, New Mexico State Umverslty45
