OSU-GP: Attribute Selection using Genetic ProgrammingJosh KingDepartment of Computer Science and EngineeringThe Ohio State UniversityColumbus, OH 43210, USAkingjo@cse.ohio-state.eduAbstractThis system?s approach to the attribute selec-tion task was to use a genetic programmingalgorithm to search for a solution to the task.The evolved programs for the furniture andpeople domain exhibit quite naive behavior,and the DICE and MASI scores on the train-ing sets reflect the poor humanlikeness of theprograms.1 Genetic ProgrammingGenetic programming is a form of evolutionarycomputing in which a meta program evolves anotherprogram to solve a problem.
Creating by hand aprogram which solves the problem may be possi-ble, but if the problem has many parameters whichcontribute to a solution?s quality, the program de-signer may miss some subtle interplay in favor of anexpected solution.
Genetic programming evolves apool of programs to optimize a user supplied fitnessfunction which gives some indication of how well aprogram performs on the problem.This report in no way attempt to fully ex-plain genetic programming.
See, e.g., (Koza,1992) for a better understanding of geneticprogramming.
The evolutionary computationtoolkit ECJ available from http://www.cs.gmu.edu/?eclab/projects/ecj/ was usedfor the genetic programming algorithm.2 FunctionsThe genetic programming algoritm had at its dis-posal the functions listed in Table 1.
The func-tion eqA tests whether two attribute values areequal.
The functions add and remove operate onvalueIn {variables}target sequencedistractors canUseLoceqA ifteset empty forset add and, or, notset remove {attributeERC}add {attributeListERC}removeTable 1: Functions supplied to the GP algorithmattribute lists, whereas the similarly named set addand set remove operate on entity sets.
The functionifte is an if-then-else construct, and the function foris a foreach operator on sets of entities or lists of at-tributes and requires both a variable to change thevalue of (the iterating variable) and the set or list tooperate over.
The functions surrounded by bracesrepresent various things: for {variables}, variousvariables of the different types were globally acces-sible.
{attributeERC} and {attributeListERC} rep-resent random variables that take on attributes fromthe trial set and lists of those attributes.
A mutationof an ERC (ephemeral random constant) simply setsit to a different random value from the random con-stant?s domain.The functions supplied to the genetic program-ming method were more than expressive enough toformulate, e.g., Dale and Reiter?s Incremental Algo-rithm (Dale and Reiter, 1995), a well known stan-dard algorithm for doing this task.
During the run ofthe genetic programming algorithm, every functionshown in Table 1 was explored in the search, eventhough many of them are not used in the solutionsfound.225diceDist locationUsemasiDist inappropriatenoHit lengthbloat emptysimilar excessiveTable 2: The costs GP should minimize3 Fitness FunctionThe genetic programming algorithm must be sup-plied with a fitness function which judges how wella program performs on the problem.
For this taskof attribute selection, there are multiple dimensionsto optimize in.
For simplicity, a linear combinationof the various dimensions was used for the fitnessfunction.
The dimensions to optimize on were rep-resented as costs or penalties that the genetic pro-gramming algorithm sought to minimize.
The vari-ous costs are listed in Table 2.
The costs were de-vised with an eye towards optimizing quantities thatexisting algorithms for this task also attempt to opti-mize.DICE and MASI scores on the training data wereconverted to costs by subtracting from one.
ThenoHit cost is for not forming a distinguishing col-lection of attributes and was given a high weight.The bloat penalty penalizes long programs (to makeinterpreting the result easier).The fitness function is a weighted sum of thesecosts.
A fitness of zero would mean that each di-mension is optimized fully.
This is not possible, assome of the costs conflict with each other: for ex-ample, length and empty.
The weights for the fitnessfunction were hand tuned, which is counter to thedesire to use genetic programming rather than handtune an algorithm.
The use of evolutionary comput-ing to tune these weights may produce better results,but was not tried here.4 Resulting SystemThe program which evolved for the training trials ofthe furniture domain is shown here:(ifte canUseLoc(var aList set al(add [ orientation size ]colour))(var aList set al(add (add [ orientation size ]DICE MASIFurniture 0.61 0.30People 0.35 0.10Average 0.49 0.21Table 3: DICE and MASI scores on training setcolour) type)))The program found for the people domain isshown here:(ifte canUseLoc(var aList set al (add(add [ hairColour hasGlasses ]hasBeard) hasSuit))(var aList set al(add [ hairColour hasGlasses ]hasBeard)))Both of these programs seem quite unintelligentin their behavior.
They only ever set the attributelist to one of two lists, depending only on whetherthe location condition is flagged or not, and don?teven make use of the location information.
Furthertweaking of the fitness function or using differentschemes for evolution may improve the performanceof an evolved solution.The performance metrics of DICE score andMASI score on the training set are shown in Table 3.The accuracy of the realization1 of the attributes isboth zero.
The scores reflect the obvious point thatthe evolved programs have plenty of room for im-provement.
A fitness function which is less relianton the user to specify weightings for optimizationmay be necessary, or an evaluation which tests theprogram?s ability to generalize may catalyze pro-gram evolution into less naive directions than thoseprograms shown here.ReferencesRobert Dale and Ehud Reiter.
1995.
Computationalinterpretations of the gricean maxims in the gener-ation of referring expressions.
Cognitive Science,19(2):233?263.John R. Koza.
1992.
Genetic Programming: on the Pro-gramming of Computers by Means of Natural Selec-tion.
The MIT Press.1The realizer was the simple template-based realizer writtenby Irene Langkilde-Geary, Brighton University for the ASGRE2007 challenge.226
