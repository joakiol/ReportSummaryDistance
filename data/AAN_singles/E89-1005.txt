A METAPLAN MODEL FOR PROBLEM-SOLVING DISCOURSE*Lance A. RamshawBBN Systems and Technologies Corporation10 Moulton StreetCambridge, MA 02138 USAABSTRACTThe structure of problem-solving discoursein the expert advising setting can be modeled byadding a layer of metaplans to a plan-basedmodel of the task domain.
Classes of metaplansare introduced to model both the agent's gradualrefinement and instantiation of a domain plan fora task and the space of possible queries aboutpreconditions or fillers for open variable slotsthat can be motivated by the exploration of par-ticular classes of domain plans.
This metaplanstructure can be used to track an agent'sproblem-solving progress and to predict at eachpoint likely follow-on queries based on relateddomain plans.
The model is implemented in thePragma system where it is used to suggest cor-rections for ill-formed input.1.
INTRODUCTIONSignificant progress has been achievedrecently in natural language (NL) understandingsystems through the use of plan recognition and"plan tracking" schemes that maintain models ofthe agent's domain plans and goals.
Such sys-tems have been used for recognizing discoursestructure, processing anaphora, providingcooperative r sponses, and interpreting intersen-tential ellipsis.
However, a model of the dis-course context must capture more than just theplan structure of the problem domain.
Each dis-course setting, whether argument, narrative,cooperative planning, or the like, involves alevel of organization more abstract han that ofdomain plans, a level with its own structures andtypical strategies.
Enriching the domain planmodel with a model of the agent's plans andstrategies on this more abstract level can add"This research was supported by the Advanced ResearchProjects Agency of the Department of Defense and wasmonitored by ONR under Contract No.
N00014-85-C-0016.
The views and conclusions contained in this docu-ment are those of the author and should not be interpretedas necessarily representing the official policies, either ex-pressed or implied, of the Defense Advanced ResearchProjects Agency or the U.S. Government.significant power to an NL system.
This paperpresents an approach to pragmatic modeling inwhich metaplans are used to model that level ofdiscourse structure for problem-solving dis-course of the sort arising in NL interfaces toexpert systems or databases.The discourse setting modeled bymetaplans in this work is expert-assistedproblem-solving.
Note that the agent's currenttask in this context is creating a plan for achiev-ing the domain goal, rather than executing thatplan.
In problem-solving discourse, the agentposes queries to the expert o gather informationin order to select a plan from among the variouspossible plans.
Meanwhile, in order to respondto the queries cooperatively, the expert mustmaintain a model of the plan being consideredby the agent.
Thus the expert is in the positionof deducing from the queries that are the agent'sobservable behavior which possible plans theagent is currently considering.
The metaplanspresented here model both the agent's plan-building choices refining the plan and instantiat-ing its variables and also the possible queriesthat the agent may use to gain the informationneeded to make those choices.
This unifiedmodel in a single formalism of the connectionbetween the agent's plan-building choices andthe queries motivated thereby allows for moreprecise and efficient prediction from the queriesobserved of the underlying plan-buildingchoices.
The model can be used for plan track-ing by searching outward each time from theprevious context in a tree of metaplans to ex-plore the space of possible plan-building movesand related queries, looking for a predictedquery that matches the agent's next utterance.Thus the examples will be presented in terms ofthe required search paths from the previous con-text to find a node that matches the context ofthe succeeding query.This metaplan model is discussed in twoparts, with Section 2 covering the plan-buildingclass of metaplam, which model the agent's ad-dition of new branches to the domain plan treeand instantiation of variables, while Section 3presents examples of plan feasibility and slotdata query metaplans, which model the agent'sstrategies for gathering information to use in- 35  -).plan-building.
Section 4 then compares thismodeling approach to other plan-based styles ofdiscourse modeling, Section 5 discusses applica-tions for the approach and the current implemen-tation, and Section 6 points out other classes ofmetaplans that could be used to broaden thecoverage of the model and other areas for furtherwork.2.
PLAN BUILDING METAPLANSIn this approach, the plan-buildingmetaplans discussed in this section model thoseportions of problem-solving behavior that ex-plore the different possible refinements of theplan being considered and the different possiblevariable instantiations for it.
The domain for allthe examples in this paper is naval operations,where the agent is assumed to be a naval officerand the expert a cooperative interface to a fleetinformation system.
The examples assume ascenario in which a particular vessel, the Knox,has been damaged in an accident, hereby lower-ing its readiness and that of its group.
The top-level goal is thus assumed to be restoring thereadiness of that group from its current poorrating to good, expressed as (IncreaseGroup-Readiness Knox-group oor good).The domain plans in Pragma re organizedin a classification hierarchy based on their ef-fects and preconditions, o that a node in thathierarchy like the top-level instance of Increase-GroupReadiness in the examples actually standsfor the class of plans that would achieve thatresult in a certain class of situations.
The planclass nodes in this hierarchy can thus be used torepresent partially specified plans, the set ofplans that an agent might be considering thatachieves a particular goal using a particularstrategy.
The subplans (really plan subclasses)of IncreaseGroupReadiness shown in Figure 1give an idea of the different strategies that theagent may consider for achieving this goal.
(Variables are shown with a prefixed questionmark.
)(IncreaseGroupReadinessKnox-group oor good) (1)(RepairShip Knox) (2)(ReinforceGroup Knox-group ?new-ship) (3)(ReplaceShip Knox ?new-ship) (4)Figure 1: Subplans of IncreaseGroupReadinessThe plan classification depends on the cir-cumstances, sothat RepairShip only functions asa subplan of IncreaseGroupReadiness when itsobject ship is specified as the Knox, thedamaged one, but some of the plans also intro-duce new variables like ?new-ship, introducedby the ReplaceShip lan, that can take on anyvalue permitted by the plan's preconditions.Each of these plans also has its own subactionsdescribing how it can be achieved, so thatReplaceShip, for example, involves sailing the?new-ship to the location of the damaged ship,having it take over the duties of the damagedship, and then sailing or towing the damaged oneto a repair facility.
Those subactions, in turn,specify goals for which there can be multiplesubplans.
The metaplan structures modeling theproblem-solving discourse are built on top ofthis tree of domain plans and actions.Plan Refining MetaplansThe build-plan metaplan is used to capturethe agent's goal of constructing a plan to achievea particular goal, with the build-subplan andbuild-subaction metaplans modeling theproblem-solving steps that the agent uses to ex-plore and refine the class of domain plans forthat goal.
An instance of build-subplan, say,reflects the agent's choice of one of the possiblesubplan refinements of the current domain planas the candidate plan to be further explored.
Forexample, the initial context assuming anlncreaseGroupReadiness plan due to damage tothe Knox would be represented in our model bythe build-plan ode on line (1) of Figure 2.
(build-plan(IncreaseGroupReadinessKnox-group oor good)) (1)(build.subplan(lncreaseGroupReadiness ...)(ReplaceShip ...)) (2)(build-plan(ReplaceShip Knox ?new-ship)) (3)(build-subaction(ReplaceShip ...) (Sail ...)) (4)(build-plan(Sail ?new-ship ?loc Knox-loc)) (5)Figure 2: Build-Plan, Build-Subplan,and Build-SubactionIf we suppose that the agent first considersreplacing Knox with some other frigate, thatwould be modeled as a build.subplan child (2)of the build.plan for the IncreaseGroup-Readiness plan (1), that would in turn generate anew build-plan for ReplaceShip (3).
If the agentcontinues by considering how to get the newship to that location, that would be representedas a build-subaction child (4) of the buiM-planfor ReplaceShip that expands the Sail action.- 36  -Variable Constraining MetaplansIn addition to the plan-refining choice ofsubplans and exploration of subactions, the otherplan-building task is the instantiation of the freevariables found in the plans.
Such variables mayeither be directly instantiated to a specifiedvalue, as modeled by the instantiate-varmetaplan, or more gradually constrained tosub-sets of the possible values, as modeled byadd-constraint.The instantiate-var metaplan reflects theagent's choice of a particular entity to instantiatean open variable in the current plan.
For ex-ample, the ReplaceShip lan in Figure 2 (3) in-troduces afree variable for the ?new-ship.
If theagent were to choose the Roark as a replacementvessel, that would be modeled by aninstantiate-var metaplan attached to thebuiM-plan node that first introduced the vari-able, as shown in Figure 3.
(build-plan (ReplaceShip Knox ?new-ship)) (1)(instantiate-var ?new-ship Roark) (2)(buiM-plan (ReplaceShip Knox Roark)) (3)Figure 3: Instantiate-VarThe agent may also constrain the possiblevalues for a free variable without instantiating itby using a predicate to filter the set of possiblefillers.
For example, the agent might decide toconsider as replacement vessels only those thatare within 500 miles of the damaged one.
Thepredicate from the add-constraint node in line(2) of Figure4 is inherited by the lowerbuiM-plan node (3), which thus represents theagent's consideration of the smaller class ofplans where the value of ?new-ship satisfies theadded constraint.
(build-plan(ReplaceShip Knox ?new-ship)) (1)(add-constraint?new -ship(< (distance Knox ?new-ship) 500)) (2)(build-plan(ReplaceShip Knox ?new-ship)) (3)Figure 4: Add-ConstraintThe metaplan context ree thus inherits itsbasic structure from the domain plans asreflected in the build-plan, build-subplan, andbuild-subaction odes, and as further specifiedby the instantiation of domain plan variablesrecorded in instantiate-var and add-constraintnodes.
Because the domain plans occur as ar-guments to the plan-building metaplans, themetaplan tree turns out to include all the infor-mation that would be available from a normaldomain plan context tree, so that no separatedomain tree structure is needed.3.
QUERY METAPLANSAlthough the plan-building metaplans thatmodel the exploration of possible plans and thegradual refinement of an intended plan representthe agent's underlying intent, such moves areseldom observed irectly in the expert advisingsetting.
The agent's main observable actions arequeries of various sorts, requests for informationto guide the plan-building choices.
While thesequeries do not directly add structure to thedomain plan being considered, they do providethe expert with indirect evidence as to the plan-building choices the agent is considering.
A keyadvantage of the metaplan approach is the preci-sion with which it models the space of possiblequeries motivated by a given plan-building con-text, which in turn makes it easier to predict un-derlying plan-building structure based on the ob-served queries.
The query metaplans includeboth plan feasibility queries about plan precon-ditions and slot data queries that ask about thepossible fillers for free variables.Plan Feasibility QueriesThe simplest feasibility query metaplan isask-pred-value, which models at any build-plannode a query for a relevant value from one of thepreconditions of that domain plan.
For example,recalling the original IncreaseGroupReadinesscontext in which the Knox had been damaged, ifthe agent's first query in that context is "Whereis Knox?
", the expert',~ task becomes to extendthe context model in a way that explains the oc-currence of that query.
While that search wouldneed to explore various paths, one match can befound by applying the sequence of metaplansshown in Figure 5.
(build.plan(IncreaseGroupReadinessKnox-group oor good)) (1)(build.subplan(IncreaseGroupReadiness ...)(ReplaceShip ...)) (2)(build-plan(ReplaceShip Knox ?new-ship)) (3)(ask-pred-value(ReplaceShip Knox ?new-ship)(location-of Knox Knox-loc)) (4)Figure 5: Ask.Pred-Value- 37  -The build-subplan (2) and build-plan (3) nodes,as before, model the agent's choice to considerreplacing the damaged ship.
Because theReplaceShip domain plan includes among itspreconditions (not shown here) a predicate forthe location of the damaged ship as the destina-tion for the replacement, he ask-pred-valuemetaplan (4) can then match this query, explain-ing the agent's question as occasioned by ex-ploration of the ReplaceShip plan.
Clearly, theremay in general be many metaplan derivationsthat can justify a given query.
In this example,the RepairShip lan might also refer to the loca-tion of the damaged ship as the destination fortransporting spare parts, so that this query mightalso arise from consideration of that plan.
Useof such a model thus requires heuristic methodsfor maintaining and ranking alternative paths,but those are not described here.The other type of plan feasibility query ischeck-pred-value, where the agent asks a yes/noquery about the value of a precondition.
As anexample of that in a context hat also happens torequire a deeper search than the previous ex-ample, suppose the agent followed the previousquery with "Is Roark in the Suez?".
Figure 6shows one branch the search would follow,building down from the build-plan for Replace-Ship in Figure 5 (3).
(build-plan(ReplaceShip Knox ?new-ship)) (1)( instantiate-var(ReplaceShip Knox ?new-ship)?new-ship Roark) (2)(build-plan(ReplaceShip Knox Roark)) (3)(buiM-subaction(ReplaceShip ...) (Sail ...)) (4)(buiM-plan(Sail Roark Roark-loc Knox-loc)) (5)(check-pred-value(Sail Roark Roark-loc Knox-lot)(location-of Roark Roark-loc)) (6)F igure  6:  Instantiate-Var nd Build-SubactionHere the search as to go through instantiate-varand build-subaction steps.
The ReplaceShipplan has a subaction (Sail ?ship ?old-loc ?new-loc) with a precondition (location-of ?ship ?old-loc) that can match the condition tested in thequery.
However, if the existing build-plan node(1) were directly expanded by build-subaction toa build-plan for Sail, the ?new-ship variablewould not be bound, so that that path would notfully explain the given query.
The expert in-stead must deduce that the agent is consideringthe Roark as an instantiation for ReplaceShip's?new-ship, with an instantiate-var plan (2)modeling that tentative instantiation and produc-ing a build-plan for ReplaceShip (3) where the?new-ship variable is properly instantiated sothat its Sail sub-action (5) predicts the actualquery correctly.Slot Data QueriesWhile the feasibility queries ask about thevalues of plan preconditions, the slot dataqueries gather data about he possible values of afree plan variable.
The most frequent of the slotdata query metaplans i  ask-fillers, which asksfor a list of the items that are of the correct ypeand that satisfy some subset of the preconditionrequirements hat apply to the filler of the freevariable.
For example, an ask-fillers node at-tached beneath the build-plan for ReplaceShip inFigure 6 (1) could model queries like "List thefrigates."
or "List the C1 frigates.
", since the?new-ship variable is required by the precon-ditions of ReplaceShip to be a frigate in the topreadiness condition.An ask-fillers query can also be applied toa context already restricted by an add-constraintmetaplan to match a query that imposes arestriction ot found in the plan preconditions.Thus the ask-fillers node in line (4) of Figure 7would match the query "List the C1 frigates thatare less than 500 miles from the Knox."
since itis applied to a build.plan node that already in-herits that added istance constraint.
(build-plan(ReplaceShip Knox ?new-ship)) (1)(add-constraint?new-ship(< (distance Knox ?new-ship) 500)) (2)(build-plan(ReplaceShip Knox ?new-ship)) (3)(ask-fillers?new-ship(ReplaceShip Knox ?new-ship)) (4)Figure 7: Ask-FillersNote that it is the query that indicates to theexpert hat the agent has decided to restrict con-sideration of possible fillers for the ?new-shipslot to those that are closest and thus can mostquickly and cheaply replace the Knox, while therestriction in turn serves to make the query moreefficient, since it reduces the number of itemsthat must be included, leaving only those mostlikely to be useful.There are three other slot data metaplans- 38  -that are closely related to ask.fillers in that theyrequest information about the set of possiblefillers but that do not request hat the set belisted in full.
The ask-cardinality metaplan re-quests only the size of such a set, as in the query"How many frigates are CI?".
Such queries canbe easier and quicker to answer than the parallelask-fillers query while still supplying enough in-formation to indicate which planning path isworth pursuing.
The check-cardinality metaplancovers yes/no queries about he set size, and ask-existence covers the bare question whether thegiven set is empty or not, as in the query "Arethere any C1 frigates within 500 miles ofKnox?
".In addition to the slot data metaplans thatdirectly represent requests for information,modeling slot data queries requires metaplansthat modify the information to be returned fromsuch a query in form or amount.
There are threesuch query modifying metaplans, limit-cardinality, sort.set-by-scalar, nd ask-attribute-value.
The limit-cardinality modifier models arestriction by the agent on the number of valuesto be returned by an ask-fillers query, as in thequeries "List 3 of the frigates."
or "Name a C1frigate within 500 miles of Knox.".
Thesort.set.by-scalar metaplan covers cases wherethe agent requests that the results be sortedbased on some scalar function, either one knownto be relevant from the plan preconditions oronethe agent otherwise believes to be so.
The func-tion of ask-attribute-value is to request he dis-play of additional information along with thevalues returned, for example, "List the frigatesand how far they are from the Knox.
".These modification metaplans can be com-bined to model more complex queries.
For ex-ample, sort-set-by-scalar nd ask-attribute-valueare combined in the query "List the C1 frigatesin order of decreasing speed showing speed anddistance from the Knox.".
In the metaplan tree,branches with multiple modifying metaplansshow their combined effects in the queries theywill match.
For example, Figure 8 shows thebranch that matches the query "What are the 3fastest frigates?".
The sort-set-by.scalarmetaplan in line (2) requests the sorting of thepossible fillers of the ?new-ship slot on the basisof descending speed, and the limit-cardinalitymetaplan i  that context hen restricts the answerto the first 3 values on that sorted list.As shown in these examples, the slot dataquery metaplans provide a model for some ofthe rich space of possible queries that the agentcan use to get suggestions of possible fillers.Along with the plan feasibility metaplans, theymodel the structure of possible queries in theirrelationship to the agent's plan-refining andvariable-instantiating moves.
This tight model-ing of that connection makes it possible topredict what queries might follow from a par-ticular plan-building path and therefore also totrack more accurately, given the queries, whichplan-building p~ths the agent is actually con-sidering.
(build-plan(ReplaceShip Knox ?new-ship)) (1)(sort-set.by-scalar?new-ship(speed-of ?new-ship ?speed)descending) (2)(limit-cardinality ?new-ship 3) (3)(ask-fillers?new-ship(ReplaceShip Knox ?new-ship)) (4)Figure 8: Sort-Set-by-Scalarand Limit-Cardinality4.
COMPARISON WITH OTHERPLAN-BASED DISCOURSE MODELSThe use of plans to model the domain tasklevel organization of discourse goes back toGrosz's (1977) use of a hierarchy of focusspaces derived from a task model to understandanaphora.
Robinson (1980a, 1980b) sub-sequently used task model trees of goals and ac-tions to interpret vague verb phrases.
Some ofthe basic heuristics for plan recognition and plantracking were formalized by Allen and Perrault(1980), who used their plan model of the agent'sgoals to provide information beyond the directanswer to the agent's query.
Carberry (1983,1984, 1985a, 1985b) has extended that into aplan-tracking model for use in interpreting prag-matic ill-formedness and intersentential el ipsis.The approach presented here builds on thoseuses of plans for task modeling, but adds a layermodeling problem-solving structure.
One resultis that the connection between queries and plansthat is implemented in those approaches eitherdirectly in the system code or in sets of inferencerules is implemented here by the querymetaplans.
Recently, Kautz (1985) has outlineda logical theory for plan tracking that makes useof a classification of plans based on their in-cluded actions.
His work suggested the structureof plan classes based on effects and precon-ditions that is used here to represent the agent'spartially specified plan during the problem-solving dialogue.~ - 39  -Domain plan models have also been usedas elements within more complete discoursemodels.
Carberry's model includes, along withthe plan tree, a stack that records the d~_scoursecontext and that she uses for predicting the dis-course goals like accept-question r express-surprise that are appropriate in a given discoursestate.
Sidner (1983, 1985) has developed atheory of "plan parsing" for distinguishingwhich of the plans that the speaker has in mindare plans that the speaker also intends the hearerto recognize in order to produce the intendedresponse.
Grosz and Sidner (1985) togetherhave recently outlined a three-part model for dis-course context; in their terms, plan models cap-ture part of the intentional structure of the dis-course.
The metaplan model presented here triesto capture more of that intentional structure thanstrictly domain plan models, rather than to be acomplete model of discourse context.The addition of metaplans to plan-basedmodels owes much to the work of Wilensky(1983), who proposed a model in whichmetaplans, with other plans as arguments, wereused to capture higher levels of organization ibehavior like combining two different planswhere some steps overlap.
Wilensky'smetaplans could be nested arbitrarily deeply,providing both a rich and extensive modelingtool.
Litman (1985) applied metaplanning tomodel discourse structures like interruptions andclarification subdialogues using a stack ofmetaplan contexts.
The approach taken here issimilar to Litman's in using a metaplan com-ponent o enhance a plan-hased discourse model,but the metaplans here are used for a differentpurpose, to model the particular strategies thatshape problem-solving discourse.
Instead of asmall number of metaplans used to representchanges in focus among domain plans, we havea larger set modeling the problem-solving andquery strategies by which the agent builds adomain plan.Because this model uses its metaplans tocapture different aspects of discourse structurethan those modeled by Litman's, it also predictsother aspects of agent problem-solving behavior.Because it predicts which queries can begenerated by considering particular plans, it candeduce the most closely related omain plan thatcould motivate a particular query.
For instance,when the agent asked about frigates within 500miles of Knox, the constraint on distance fromKnox suggested that the agent was consideringthe ReplaceShip lan; a similar constraint ondistance from port would suggest a RepairShipplan, looking for a ship to transport eplacementparts to the damaged one.
Another advantage ofmodeling this level of structure is that themetaplan odes capture the stack of contexts onwhich follow-on queries might be based.
In thisexample, follow-on queries might add a newconstraint like "with fuel at 80% of capacity" asa child of the existing add-constraint node, addan alternative constraint like "within 1000 milesof Knox" as a sibling, query some other predi-cate within ReplaceShip, or attach even furtherup the tree.
As pointed out below in Section 6,the metaplan structures presented here can alsobe extended to model alternate problem-solvingstrategies like compare-plan vs. build-plan, thusimproving their predictive power through sen-sitivity to different typical patterns of agentmovement within the metaplan tree.
The clearrepresentation f the problem-solving structureoffered in this model also provides the righthooks for attaching heuristic weights to guidethe plan tracking system to the most likely plancontext match for each new input.
Withinproblem-solving settings, a model that capturesthis level of discourse structure thereforestrengthens an NL system's abilities to track theagent's plans and predict likely queries.5.
APPL ICAT IONS ANDIMPLEMENTATIONThis improved ability of the metaplanmodel to track the agent's problem-solvingprocess and predict likely next moves could beapplied in many of the same contexts in whichdomain plan models have been employed, in-cluding anaphora and ellipsis processing andgenerating cooperative responses.
For example,consider the following dialogue where thecruiser Biddle has had an equipment failure:Agent: Which other cruisers arein the Indian Ocean?
(1)Expert: <Lists 6 cruisers> (2)Agent: Any within 200 miles of Biddle?
(3)Expert: Home and Belknap.
(4)Agent: Any of them at Diego Garcia?
(5)Expert: Yes, Dale, and there is a supplyflight going out to Biddle tonight.
(6)The agent first asks about other cruisers thatmay have the relevant spare parts.
The expertcan deduce from the query in line (3) that theagent is considering SupplySparePartByShip.The "them" in the next query in line (5) couldrefer either to all six cruisers or to just the twolisted in (4).
Because the model does not predictthe Diego Garcia query as relevant to the currentplan context, it is recognized after search in the-40-metaplan tree as due instead to a SupplyPartBy-Plane plan, with the change in plan context im-plying the correct resolution of the anaphora ndalso suggesting the addition of the helpful infor-mation in (6).
The metaplan model of the prag-matic context hus enables the NL processing tobe more robust and cooperative.The Pragma system in which this metaplanmodel is being developed and tested makes useof the pragmatic model's predictions for sug-gesting corrections to ill-formed input.
Given asuitable library of domain plans and an initialcontext, Pragma can expand its metaplan treeunder heuristic control identifying nodes thatmatch each new query in a coherent problem-solving dialogue and thereby building up amodel of the agent's problem-solving behavior.A domain plan library for a subset of naval fleetoperations plans and sets of examples in thatdomain have been built and tested.
The result-ing model has been used experimentally fordealing with input that is ill-formed due to asingle localized error.
Such queries can berepresented asunderspecified logical forms con-taining "wildcard" terms whose meaning is un-known due to the ill-formedness.
By searchingthe metaplan tree for queries coherently relatedto the previous context, suggested fillers can befound for the unknown wildcards.
For theroughly 20 examples worked with so far,Pragma returns between 1 and 3 suggested cor-rections for the ill-formed element in each sen-tence, found by searching for matching queriesin its metaplan context model.6.
EXTENSIONS TO THE MODEL ANDAREAS FOR FURTHER WORKThis effort to capture further levels ofstructure in order to better model and predict heagent's behavior needs to be extended both toachieve further coverage of the expert advisingdomain and to develop models on the same levelfor other discourse settings.
The current modelalso includes simplifying assumptions aboutagent knowledge and cooperativity that shouldbe relaxed.Within the expert advising domain, furtherclasses of metaplans are required to cover in-forming and evaluative behavior.
While the ex-pert can usually deduce the agent's plan-building progress from the queries, there arecases where that is not true.
For example, anagent who was told that the nearest C1 frigatewas the Wilson might respond "I don't want touse it.
", a problem-solving move whose goal isto help the expert rack the agent's planning cor-rectly, predicting queries about other ships ratherthan further exploration of that branch.
Inform-ing metaplans would model such actions whosepurpose is to inform the expert about the agent'sgoals or constraints in order to facilitate theexpert's plan tracking.
Evaluative metaplanswould capture queries whose purpose was notjust establishing plan feasibility but comparingthe cost of different feasible plans.
Such queriescan involve factors like fuel consumption ratesthat are not strictly plan preconditions.
The typi-cal patterns of movement in the metaplan treeare also different for evaluation, where the agentmay compare two differently-instantiatedbuild-plan nodes point for point, moving backand forth repeatedly, rather than following thetypical feasibility pattern of depth-first explora-tion.
Such a comparison pattern is highly struc-tured, even though it would appear to the currentmodel as patternless alternation betweenask-pred-value queries on two different planbranches.
Metaplans that capture that layer ofproblem-solving strategy would thus sig-nificantly extend the power of the model.Another important extension would be towork out the metaplan structure of other dis-course settings.
For an example closely relatedto expert advising, consider two people trying towork out a plan for a common goal; each onemakes points in their discussion based on fea-tures of the possible plan classes, and therelationship between their statements and theplans and the strategy of their movements in theplan tree could be formalized in a similar systemof metaplans.The current model also depends on a num-ber of simplifying assumptions about thecooperativeness and knowledge of the agent andexpert that should be relaxed to increase itsgenerality.
For example, the model assumes thatboth the expert and the agent have complete andaccurate knowledge of the plans and theirpreconditions.
As Pollack (1986) has shown, theagent's plan knowledge should instead be for-mulated in terms of the individual beliefs thatdefine what it means to have a plan, so themodel can handle cases where the agent's plansare incomplete or incorrect.
Such a model of theagent's beliefs could also be a major factor inthe heuristics of plan tracking, identifying, forexample, predicates whose value the agent doesnot already know which therefore are morelikely to be queried.
The current model shouldalso be extended to handle multiple goals on theagent's part, examples where the expert does notknow in advance the agent's top-level goal, andcases of interactions between plans.-41  -However, no matter how powerful thepragmatic modeling approach becomes, there isa practical limitation in the problem-solving set-ting on the amount of data available to the expertin the agent's queries.
More powerful, higherlevel models require that the expert have ap-propriately more data about the agent's goalsand problem-solving state.
That tradeoff ex-plains why an advisor who is also a friend canoften be much more helpful than an anonymousexpert whose domain knowledge may be similarbut whose knowledge of the agent's goals andstate is weaker.
The goal for cooperative inter-faces must be a flexible level of pragmaticmodeling that can take full advantage of all theavailable knowledge about the agent and therecognizable lements of discourse structurewhile still avoiding having to create high-levelstructures for which the data is not available.REFERENCESAllen, James F.; and Perrault, C. Raymond.1980 Analyzing Intention in Utterances.Artificial Intelligence 15: 143-178.Carberry, M. Sandra.
1983 Tracking User Goalsin an Information-Seeking Environment.Proceedings of the National Conference onArtificial Intelligence.
William Kaufmann:59-63.Carberry, M. Sandra.
1984 UnderstandingPragmatically Ill-Formed Input.
Proceedingsof the lOth International Conference on Com-putational Linguistics.
ACL: 200-206.Carberry, M. Sandra.
1985a A Pragmatics-Based Approach to Understanding Intersen-tential Ellipsis.
Proceedings of the 23rd An-nual Meeting of the ACL: 188-197.Carberry, M. Sandra.
1985b Pragmatic Model-ing in Information System Interfaces.
Ph.D.thesis, University of Delaware.Grosz, Barbara J.
1977 The Representation a dUse of Focus in a System for UnderstandingDialogues.
Proceedings of lJCAI 77.
MorganKaufmann: 67-76.Grosz, Barbara J.; and Sidner, Candace L. 1985The Structures of Discourse Structure.
Tech-nical Report 6097, Bolt Beranek and New-man.Kautz, Henry A.
1985 Toward a Theory of PlanRecognition.
Technical Report 162, Univer-sity of Rochester.Lilman, Diane J.
1985 Plan Recognition andDiscourse Analysis: An Integrated Approachfor Understanding Dialogues.
Ph.D. thesis,University of Rochester.Pollack, Martha E. 1986 Inferring DomainPlans in Question-Answering.
Ph.D. thesis,University of Pennsylvania.Robinson, Ann E. 1980a The Interpretation ofVerb Phrases in Dialog.
Technical Report206, SRI International.Robinson, Ann E.; Appelt, Douglas E.; Grosz,Barbara J.; Hendrix, Gary G.; and Robinson,Jane J.
1980b Interpreting Natural-LanguageUtterances in Dialogs About Tasks.
Tech-nical Report 210, SRI International.Sidner, Candace L. 1983 What the SpeakerMeans: The Recognition of Speaker's Plansin Discourse.
International Journal of Com-puters and Mathematics 9(1): 71-82.Sidner, Candace L. 1985 Plan Parsing for In-tended Response Recognition in Discourse.Computational Intelligence 1: 1-10.Wilensky, Robert.
1983 Planning andUnderstanding.
Addison-Wesley.- 42  -
