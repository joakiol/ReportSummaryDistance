NLP-based scripting for CALL activitiesAntoniadis G., Echinard S., Kraif O., Lebarb?
T., Loiseau M., Ponton C.LIDILEM, Stendhal UniversityGrenoble, France, F-38025{Antoniadis; echinard; kraif; lebarbe; loiseau; ponton}@u-grenoble3.frAbstractThis article focuses on the development ofNatural Language Processing (NLP) tools forComputer Assisted Language Learning(CALL).
After identifying the inherentlimitations of NLP-free tools, we describe thegeneral framework of Mirto, an NLP-basedauthoring platform under construction in ourlaboratory, and organized into four distinctlayers: functions, scripts, activities andscenarios.
Through several examples, weexplain how Mirto's architecture allows toimplement state-of-the-art NLP functions,integrate them into easily handled scripts inorder to create, without computing skills,didactic activities that could be recorded inmore complex sequences or scenarios.1 CALL:  Conjugating NLP and languagedidacticsIt is generally reckoned that computer sciencecan prove itself to be a great aid in languagelearning, when in fact, most often computerscientists and didactics experts do not agree on thenotion of ?language?.
For the former, itcorresponds to a sequence of codes, while for thelatter it is a system of forms and concepts.This divergence can easily be explained, whenconsidering the fact that computer science, bydefinition, can only consider and process the formof the language independently of anyinterpretation, while, for language didactics, theform only exists through its properties and theconcepts it is supposed to represent.The consequences of these diverging approachesare ?visible?
in the great majority of languagelearning software.
Many an imperfection of thelatter?s stem from the divergence mentioned above.Most language learning software are thought andimplemented as computer products, only able totake into account a language form deprived of allsemantics, or with extremely poor semantics.Caricaturely, rules as basic as that of theinterpretation of the space remain ignored, whichleads to unfortunate learning situations.
Forinstance, if the learner answers ?la   casa?
(sequence containing two spaces), his or heranswer will not be accepted for the expectedanswer was ?la casa?
(sequence with one space).The pedagogical consequences of this poor ?spaceprocessing?
are obvious; the software teaches thatthe sequence of two spaces is not part of thelanguage, and also, that all word preceded orfollowed by a space has nothing in common withthe same word without the space!
This down-to-earth example of the ?spacebar syndrome?characterizes, in our opinion, the deficiencies oftoday?s language learning software.As (Chanier, 1998) and (Brun & al., 2002) pointit out, and as (Antoniadis & Ponton, 2002) and(Antoniadis, 2004) have shown it, only the use ofNLP methods and techniques allows to considerand process language as a system of forms andconcepts.
Considering them might lead to answersfor two of the issues of existent CALL software.The first concerns the rigidity of software: thedata (instructions, examples, expected answers?
)is to be predefined and, a few exceptions aside, canneither be modified nor enriched.
Answer handlingprocesses are intimately connected to this data.They are thus unable to consider new entries,unless they were explicitly anticipated.The second problem concerns the inability ofCALL software to adapt the course to the learners.Two types of courses are generally proposed.
Thefirst, the more classic, offers a predefined linearactivity sequence.
Whatever his (or her) answersand expectations, the learner will do (and do over)the same activities, using the same data.
Thesecond type of course offered is a ?free?progression within a scenarized environment.
It isthe case of exploration software in which thelearner is given a mission in a given environment(virtual reality).
The dialogue, grammar or otheractivities are predefined, but will be performed inan order which will depend on the learner?smission completion process.
This latter type ofcourse, despite allowing a wider field of action forthe learner (order of the mission, choice ofactivities?)
does not offer real personalization oradaptation of the activities to the learner.
Indeed,the course of action is independent of his or heranswers for each stage, out of the incapacity ofevaluating them.
Last, we should bring to thereader?s attention that if the order in which thelearner is confronted to the activities can varyaccording to his (or her) mission, the content ofeach activity remains invariable and will remainthe same, whenever included in the course.The last problem, which partly derives from thefirst two, characterizes current CALL software.
Asdidactic products, this software should, a priori, besolely designed according to didactic solutions,expressed without constraints using pedagogicalconcepts.
Now, current learning software are infact computer products which require their users(language teachers, with little or no computingknowledge) to manipulate concepts and notions,which, a priori, do not belong to their languagelearning set of problems.
Thus, instead ofexpressing pedagogic answers thanks to tools oftheir own discipline, they are forced to look forcomputerized solutions, which connect as much aspossible with their own models or pedagogic aims.They might even have to give up on somepedagogical solutions, for they are unable toexpress them in a computer understandable way orbecause computer science is not able to handlethem.
To our knowledge, language didactics ispresently able to imagine open pedagogic scenarioswith exercises adapted according to each learner,examples changing when repeating the sameactivity within a given session, appropriate textschosen to illustrate pedagogical contexts and, openand variable learning situations?
Computerscience is (and will be) unable to take intoconsideration these aspects with its own set ofproblems.
Resorting to other knowledge(linguistics and language didactics) and to theirmodeling is essential.
The use of NLP tools canconstitute a way to resort to linguistic knowledge;the collaborative work of language didactics andNLP experts ought to provide answers concerninglanguage didactics knowledge.The problems that we have just presentedexplain, in our opinion, about the nature oflanguage learning software so far.
They werethought and implemented as computing problemsand products which only use the aspects oflanguage didactics that computer science is able toconsider.
The pedagogical solutions are oftenaltered or truncated so that they can be computed.This approach), and also most of CALL softwaredeficiencies, stem from computer science?s narrowview of language (a simple sequence of codes.Our approach towards the development oflanguage learning software is radically differentfrom those mentioned above.
We consider thatlanguage learning software is above all a didacticproduct, a program which provides a didacticsolution to a problem of language didactics,without altering, neither the solution nor, a fortiori,the problem.
The design of such software requiresthat we should be able to adapt the possibilities ofcomputer science to the implementation ofpedagogical solution previously determined.
In thisapproach, considering language properties, whichare invariably present in every pedagogic solutionconcerning languages, is a must-have.
ConsideringNLP methods, techniques and products only arecapable of satisfying this condition, then alanguage learning software should be defined asthe adaptation of NLP possibilities to thepredefined didactic aims of language learning.
Inour opinion, such an approach is the only way tooffer to language didactics experts not only toolsthat would not narrow the scope of treatment oftheir set of problems, but also tools withpedagogical added-value, capable of widening theset of problems of their discipline.The use of NLP in the design of CALL software isnot a new idea; systems like ELEONORE (Reni?,1995), ALEXIA (Chanier & Selva, 2000), or theEXILLS platform (Brun & al., 2002) resort to NLPmethods and use NLP resources.
Nevertheless,such examples remain marginal and concern noncommercial products.
Paradoxically, CALL andNLP, two fields centered on language, still seem tobe ignoring each other.
Most of the time, not usingNLP is justified through the added cost resultingfrom its use.
But more than the often-invoked extracost, it is the lack of NLP culture, which should beheld responsible for its absence.In the line of the systems mentioned above, theMirto platform (Antoniadis & Ponton, 2004)(Forestier, 2002) is aiming at providing a globalanswer to the problems of CALL software, throughan NLP approach on the one hand and on the otherhand a collaborative work with didactics experts.More than a finished product, Mirto seeks to be atool for the creation of didactic solutions forlanguage learning.
We present in the rest of thepaper the aspects of the system, which describe ourapproach and its implementation.2 Mirto descriptionThe Mirto project is determinedlypluridisciplinary, and aims at giving an NLPtoolbox to language teachers in order to designscenarios in their own pedagogical set of problems.The main goal of Mirto is to propose to thelanguage teacher the possibility of designingpedagogical scenarios while fully taking advantageof NLP technologies in a user-friendly manner.Thus, those scenarios will be open (dynamical textdatabase), will allow an individualized adaptationaccording to the learner (automated generation ofexercises, qualitative evaluation of the answers?
)and should allow new possibilities (work on longtexts, automated production of aids or exercises,design of non-linear scenarios ?).
The approachof Mirto is determinedly user-oriented since it ismeant for language teachers who, a priori havelittle or no skill in computing nor in NLP.
Thetechnical nature of NLP has to be transparent to thelanguage teacher and only the didactic aspects areto be visible and available to him.In that way, four hierarchical levels (function,script, activity and scenario), associated with thetext database, structure Mirto as it is illustrated onfig.1.2.1 Function levelThe functions (1 to 5 in fig.1) represent theMirto lower level objects.
They correspond to abasic NLP process such as tokenization (textsplitting in forms) or language identification.Considering its technical nature and itsindependence from a didactic application, thislevel is not visible for any final users of Mirto (i.e.teachers and learners).2.2 Script levelThis level corresponds to the application of NLPfunctions to language didactics.
A script (S1 to S3in fig.
1) is a series of functions with a didacticpurpose.
So, this level needs both NLP anddidactical competences and its design will be theresult of an interdisciplinary work.
For instance,the automated design of a gap-filling exercise isconsidered as a script because it connects thefunctions of language identification, tokenization,morphological analysis and gap creation dependingon parameters chosen by the user.2.3 Activity levelThis level with the next one (scenario level) isthe didactic core of Mirto.
An activity (A1 to A4 infig.
1) corresponds to the didactic contextualizationof a script (previous level).
Its goal is to associate ascript with a text from the corpus database, someinstructions, possible aids and an optionalevaluation system.
In order to create a gap-fillingexercise, one only has to choose to apply the scriptof the previous example to a text while specifyingthe gaps criteria (for instance, hiding the preteritverbs and replacing them by their infinitive form),associating an instruction as ?Fill in the blank withthe preterit form?
and specifying the evaluationform of the activity.2.4 Scenario levelThis level allows the teachers to define thesequence of activities in order to answer to theirpedagogical objectives throughout the learnerprogression.
This expected progression is not thesame for each learner.
Effectively, each of themwill have a personal learning process linked todifferent factors.
Mirto is dealing with that realitywhile proposing non-linear scenario creation.
Thepath through the scenario depends on theindividual process of each learner (learning course,evaluation?).
That course is stored in a learners?tracing database.
For instance, according to hisprogress in a given scenario, a learner can beredirected to remediation activities, or retry anactivity on another text or simply advance in thescenario.2.5 Levels and usersThere are three kinds of users in Mirto: NLPspecialists, language specialists (didactic experts,linguists and teachers) and students.
The followingtable shows the intervention level of each user ofMirto.Level Use UserFunction Conception NLP specialistScript Conception NLP specialist +Language specialistActivity Conception Language teacherConception Language teacher ScenarioPlaying StudentTab.1 ?
The intervention level of each userThis article deals more precisely with theNLP/CALL meeting, which takes place in the?
script ?
level.
However, before exposing the setof problems of script designing, it is necessary tostress on the activity level, which uses that scriptlevel first.3 Activity designAn activity is the implementation of a preciseminimal pedagogical aim (for instance, having awork on a grammatical notion, revisingconjugations, writing a paragraph, etc.).
Activitiesare designed by language teachers through aspecific interface: the activity editor.
The activityeditor (cf.
Fig.2) is an authoring system.
It allowsto manipulate and format pedagogical objects suchas texts (or text corpora), scripts and instructions.In order to illustrate the steps of activitiesdesign, let us give the example of a teacher whowants to create an activity for the systematicrevision of the preterit, using a gap filling exercise.The design work is then broken up into fivesteps (cf.
Fig.2).
The first consists in selecting ascript in the toolbox, which allows him to generatea gap filling exercise.
The second is the definitionof a didactic context for the script application.
Thisscript setting operation allows the teacher to selectelements from a text base and determine theelements (criteria on the form, the category or/andmorpho-syntactical features).
These first two stepsproduce the desired gap-filling exercise, which willbe integrated into the activity.
Before the effectiveproduction of the activity, three steps remain:writing the instructions, precising the aids, whichwill be given to the learner, and finally specifyingthe evaluation criteria.4 CALL/NLP scriptsThe script level represents the computing side ofthe didactic tools available in the Mirtoenvironment.
Scripts are integrated modules thatimplement one or several NLP standard resourcesand processes such as tagging, stemming,lemmatizing, parsing, dictionaries, etc.
Thestandardization of these functions is an importantaspect, because Mirto does not aim at developingnew NLP techniques, but only at giving aframework to take advantage of the existing stateof the art: Mirto is a car running with a NLPengine, and the engine may be changed, as asimple interchangeable part, if a new engine allowsto get better performance.Thus, scripts are the core of Mirto's architecture:their design should allow to transform the enginekinetic energy into movement and direction on theroad of didactic activities, without requiring thatthe driver to have mechanic skills.4.1 ParametersAs any computing module, a script will bedirected by a set of parameters.
These parametersshall not be accessible to the end-user directly, butthrough a control panel.
This control panel shall berelevant from the didactic point of view; that iswhy the controls may be transcribed into a set ofparameters.
Let us take the example of the gap-filling exercise generator.
By the mean of a simpleform, the user may define:a) which the units are to be removed from thetext.
Any linguistic feature should be used for thisdefinition: lemma (e.g.
to drive), part-of-speech(ex.
verb), morphosyntactic description (ex.
pasttense), or even meaning (e.g.
"car" semantic field -this functionality has not been implemented yet).b) what information has to be given in the gap :none, the lemma, the morphosyntactic features, asynonym, a definition (not implemented yet) etc.c) if the removed words should appear or not asan ordered list in the text header.d) if the learner's answer should initiate a feed-back process immediately after it was entered.On the user interface, the controls have to be:- simple: two many features could discourage theuser- declarative: the user is not supposed to handle atough formal language, so the control definitionhas to be intuitive and immediatelyunderstandable.- user-friendly: the interface must allow to pickout the important information.
For instance, a firstform may present the standard settings for acontrol, and a second optional form may giveaccess to advanced settings of the generator.It is clear that the definition of linguistic featuresin a) involves a simple transcription process inorder to determine the script parameters: thetagged and lemmatized texts handled by thegenerator use specific codes for morphosyntacticdescription.
Declarative features as "Verbo, Primaconiugazione, Indicativo, Presente, Prima persona,Singolare" will be transcribed into a parameter set:"base=er$", ctag="verb", msd="IndP SG P1".Even if this transcription process appears to beunavoidable, the script design must render theSelectioncriterionScripttypeExample ofactivityExpected answer Involved NLPfunctionsSemantic lexicalspottingSpot every wordrelated to the "car"topicSpotting of "drive","taxi", "engine", "road",etc.morphosyntactic tagging,lemmatization, semanticnet interrogationSemantic  lexicalquestionGive an Italiantranslation for "todrive"Entering of "guidare" morphosyntactic tagging,lemmatization, bilingualdictionary interrogationMorpho-syntacticgap-fillingReplace everyinfinitive verb in thegaps, using theappropriate tenseReplacement of "to wait"by "have been waiting"...morphosyntactic tagging,lemmatizationMorpho-syntacticlexicalquestionWhat would be thecontrary of theadverb "lentement"?Entering of "rapidement" morphosyntactic tagging,lemmatization, semanticnet interrogationMorphologicallexicalspottingSpot every wordderived from theverb "traduire"Spotting of "traducteur","traduction","retraduite", etc.morphosyntactic tagging,lemmatization, stemmingMorphologicalgap-fillingFill every gap by aword of the"traduire" verbfamilyEntering of "traducteur","traduction","retraduite", etc.morphosyntactic tagging,lemmatization, stemmingTab.2 - Example of scripting for activity generationparameters as close as possible to the user'scontrol.4.2 Incremental approachIt is impossible to determine from scratch whatthe exact form of a script must be.
There are tworeasons for this uncertainty:- NLP functions are multifaceted, they mayrequire complex sets of parameters to give anexpected result, and the form of their input andoutput may have many different forms.- the application field of NLP for a didactic usehas been so far unexplored.
New activities, newpedagogical habits, and new teachings are likely toemerge from these new technologies.We strongly claim that only the pedagogicalpractice can pave the way.Thus, designing the script, one may offercomplex functionalities without real interest.
Otherscripts may appear to be very useful in someapplications for which they were not initiallydesigned.
What we propose is to combine both top-down and bottom-up approaches: the proposedtools may offer wide possibilities, among whichthe pedagogical practice may select a fewinteresting features.
Conversely, the practice maygive rise to new needs that the technology will tryto meet.As suggested by (Kraif, 2003), to initiate theincremental process of script designing, we havechosen existing activities that may take advantageof simple improvements from NLP techniques.
Forthese activities, we have tried to define scripts witha major modularity, i.e.
scripts that may bereusable in different contexts and for a largespectrum of didactic applications.
At last, anotherimportant criterion was given by the performancesand limitations of the implemented functions:when a NLP task yields a 20% error rate, theresults may not be valid for every kind of activity:erroneous information may be very confusing for alearner.4.3 Examples of scriptingMost of the following examples are notimplemented in the Mirto platform yet: but theyare all realistic, given the current NLP state of theart, and may be added to Mirto in the short term.The scripts fall into three categories4.3.1 Activity generatorsGiven an input text, NLP techniques allow toselect lexical units and expressions that bearspecific lexical, idiomatic, grammatical orsemantic features.
This ability makes it possible tocreate a wide range of activities using generatorsfor gap-filling, lexical spotting (i.e.
identificationof specific units of the text) or lexical questions(i.e.
questions about units occurring in the text,concerning synonyms, contraries, translationequivalents, etc.).
Table 2 shows various examplesof generated activities.Other scripts can be used upstream for the inputtext constitution: for instance a concordancerallows to extract from a corpus every unit (and thesurrounding context) that satisfies the formerselection criteria.Such a concordance script, integrated with anappropriate interface, may give rise to a fullactivity, in order to allow the learner to search byhim/herself examples (in context) that may helphim/her solve a problem.
A bilingual concordancescript, involving an NLP aligning function, mayalso be very useful for this kind of text mining.Similar activity generators may work withoutany input text, applying the selection criteria on adictionary, and using, if necessary, a random drawto select a single unit:- Conjugator: e.g.
"Conjugate the expressiontomber en panne s?che to : subjonctif imparfait,premi?re personne du singulier"- Lexical question: e. g. "Give a synonym for theword phare.
"- Morphological question: e.g.
"Give a nounderived from the verb conduire".Another interesting application of NLPtechnique for activity generation is to implement akind of "chat-bot", following the classical model ofElisa, able to simulate a conversation with a virtualinterlocutor on a given subject.4.3.2 Comprehension aidFor any kind of activity (reading a text, doing anexercise, etc.
), it is possible to propose interactiveaids for the learner.
Most of the NLP toolsavailable on the Exills platform belong to thiscategory: at any time the learner can ask questionsto a robot, that gives access to dictionarydefinitions (after a context sensitivedisambiguation) and to a conjugator, or allows tofind the correct form of a wrongly spelt word.Such aids can be either generic (like dictionaryor concordance consultation, grammar lessons,conjugator, phonetiser) or context dependent (aclick on a word can give access to itsmorphological tags, lemma, syntactic function,definition and/or translation).
As an example, wehave implemented a contextual aid thatautomatically links to specific grammar lessonsaccording to the morphosyntactic features of theclicked word: when an Italian verb is at the"passato remoto" tense, a hyperlink isautomatically pasted in the contextual popup,giving access to the corresponding grammar lesson(see fig.
3).Fig.3 - Example of generated contextual aidFor the teacher, the handling of these scriptscorresponds to specific settings of the final activityinterface.4.3.3 Automated evaluationThe learner production, in the framework of anactivity, may have very various forms: clicks oncheck box, words, sentences or even texts.The evaluation of sentences and texts is a toughproblem: NLP techniques cannot really givereliable information about features that require ahuman interpretation (meaning, style, etc.).
Evenfor the simplest task of error detection, the existingmodels are both silent and noisy at the same time:some errors are not detected, and correctexpressions are wrongly pointed out as errors.On the opposite, the evaluation of a multiplechoice questionnaire is a trivial problem that doesnot need the expensive implementation of NLPtools.For now, we think that the most realistic andpromising application concerns the evaluation ofsimple lexical productions.
We are currentlystudying a three levels protocol for the evaluationof a given answer with respect to the expectedcorrect answer.
If the given answer is different,three cases are considered:1- Spelling error: if the entered chain does notexist in an inflected form dictionary, one canassume that it bears a spelling error.
If the chain isvery close to the correct answer, a message can bedisplayed, warning about the spelling error.
Else, alist of resembling existing words can be proposedto the learner, asking him to make a choice.2- Morphosyntactic level: at this stage, theanswer is integrated in the linguistic context of theactivity (for instance, the sentence where the gapwas done, in a gap-filling exercise), in order tocompute a morphosyntactic analysis with taggingand lemmatization.
If the lemma is the same thanthe lemma of the correct answer, a warning can bedisplayed about the difference in themorphosyntactic features (e.g.
"wrong tense","wrong number", etc.
).3- Semantic level: in the case of a differentlemma, a semantic wordnet is searched in order tocheck whether a close semantic link (synonymy,hyperonymy, hyponymy, meronymy, antonymy)can be found between the given answer and theexpected one.
Then, a warning can be displayedsuch as "be more precise", "not exactly", etc.In the global architecture, such a script could beuseful for the evaluation of various activities: gap-filling, lexical questions, etc.
According to thespecific context and aim of a given activity, thefeed-back to the learner may be very different.
Forinstance, if a gap-filling exercise is designed to testthe ability to conjugate verbs in a given tense, thefact that the lemma of the learner's answer isdifferent is not very important, provided that theverbal flexion is correct.Therefore, in the design of such an evaluationscript, it is important to separate the comparisonand the feed-back.
We plan to implement tooscripts:- the comparison script that takes as an input: thelinguistic context, the expected answer, the givenanswer; and returns a difference code such as:0: no difference1.1: spelling error on the expected answer1.2: spelling error on another answer (with a listof close words)2.1: different lemma2.2: different morphosyntactic features2.2.1, 2.2.2,...: different number, differentgender, etc.3.1,3.2,...: synonym, hyperonym, etc.- the feed-back script that takes as an input thedifference code, and returns a message, such as :"yes, but the spelling is wrong", "be more precise".Even if one can propose standard messages foreach difference code, the teacher should obviouslybe able to edit an adapted message set dependingon the didactic context of a given activity.5 Current functionalities of Mirto andperspectivesThe development of Mirto started about a yearago.
A total of three years should be necessary tocomplete the first prototype.
A handling period isto be foreseen in order to allow teachers to masterthe use of the product.
We plan to integrate Mirtoto the Stendhal Intranet for experimentation.So far, the development of Mirto mainlyconcerned the script creation module.
Completingthis module allowed the integration of various NLP(and non-NLP) software.
Other software,especially NLP-based, ought to be integrated.
Thechoice of the number and nature of integratedsoftware can only be done through a process ofexchange involving both language teachers andNLP experts.
We consider that, the softwareintegrated so far allowed the creation of enoughscripts for an experimental use of Mirto.In order to perform tests and validate the globalapproach, a first version of the activity andscenario editor has been implemented.
It allows thecreation of almost every type of activity (excludingthe evaluation) and the design of linear scenariosthat will not trace the learner training history.The definition of the approach underneath Mirto,along with making use of it, originated variousresearch works, which are currently being carriedout.
Apart from the implementation of theprototype of the system, our efforts particularlyconcern the following aspects:- the pedagogical annotation and indexation oftexts towards the creation of a corpus to be used bylanguage teachers (Loiseau, 2003)- the automatic analysis and pedagogical analysisof the learners?
answers using NLP based tools andtechniques.- scripting and interfacing for activity generationThe first results of these works should find theirapplication in Mirto.At the crossroads of three branches ?
languagedidactics, NLP and computer science ?
Mirtoraises new problems, not only in each of thesebranches (advances in NLP for instance) but alsoproblems for which no solution can be reachedunless the branches (and their specialists) work inquasi osmosis.
One can mention among others theexamples of the automatic definition of theappropriate response for the learners?
answers, themodeling and implementation of computerfunctions manipulating language didacticsconcepts (so as to provide language teachers withno specific computational skills with tools they canhandle), the definition and pedagogicalexploitation of the trace of the learners?
activity orthe modeling of non-linear scenarios?
Unless wefind answers to these problems, CALL will have tosettle for the creation of pedagogical-added-value-less-products.ReferencesG.
Antoniadis and C. Ponton.
2004.
Mirto : unsyst?me au service de l'enseignement deslangues, UNTELE'2004, Compi?gne, France.G.
Antoniadis and C. Ponton.
2002.
Le TAL : unenouvelle voie pour l'apprentissage des langues.UNTELE'2002, Compi?gne, France.C.
Brun, T. Parmentier, A. Sandor and F.
Segond.,"Les outils de TAL au service de la e-formationen langues", Multilinguisme et traitement del?information.
F. Segond, ed., pages 223-250,Herm?s Science Publications, Paris, FranceT.
Chanier.
1998.
Relations entre le TAL et l'ALAOou l'ALAO un "simple" domaine d'application duTAL ?.
International conference on naturallanguage processing and industrial application(NLP+IA'98), Moncton, Canada.T.
Chanier and T. Selva.
2000.
"G?n?rationautomatique d?activit?s lexicales dans le syst?meALEXIA".
Sciences et Techniques Educatives7(2):385-412, Herm?s, Paris, FranceG.
Forestier.
2002.
Plates-Formes pourl?enseignement des langues : le cas de Mirto.M?moire pour l?examen probatoire enInformatique, CNAM, Grenoble, France.O.
Kraif.
2003.
"Propositions pour l?int?grationd?outils TAL aux dispositifs informatis?sd?apprentissage des langues, Intercompr?hensionen langues romanes".
LIDIL, n?
28, C.
Degacheed., pages 153-165, Grenoble, France.M.
Loiseau.
2003.
Vers la cr?ation d?une base dedonn?es de ressources textuelles index?ep?dagogiquement pour l?enseignement deslangues.
M?moire de DEA en Sciences duLangage, Stendhal University, Grenoble, France.D.
Reni?.
1995.
Mod?lisation informatique del?acquisition des interrogatives directes enfran?ais langue seconde dans leur dimensionpragmatique, proposition d?un environnementoffrant un apprentissage collaboratif :ELEONORE.
PhD Thesis, Clermont IIUniversity, Clermont-Ferrand, France
