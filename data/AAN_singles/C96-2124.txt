Bui ld ing  Knowledge Bases  for the Generat ion  ofSof tware Documentat ion  *C4cile Paristand Keith Vander  L inden  :IITRI, University of BrightonLewes RoadBrighton BN2 4AT, UK{clp,knvl}~itri.brighton.ac.ukAbst rac tAutomated text generation requires aunderlying knowledge base fl'om whichto generate, which is often difficult toproduce.
Software documentation is onedomain in which parts of this knowledgebase may be derived automatically.
Inthis paper, we describe DRAFTER, an  au-thoring support tool for generating user-centred software documentation, and inparticular, we describe how parts of itsrequired knowledge base can be obtainedautomatically.1 In t roduct ionAutomated text generation is becoming an attrac-tive technology because it, allows for the genera-lion of text in different styles and in different lan-guages from a single underlying knowledge base.The well-known problem with the technology isthat this knowledge base is often difficult to build.In most research generm, ion systems, this knowl-edge base is essentially built by hand.
No generalsolution to this problem has been proposed be-cause each application has its own domain specificrequirements.It is clear, however, that for text generationtechnology to heeome viable, there must be some* This work is partially supported by the Engi-neering and Physical Sciences Research Council (EP-SitC) Grant J19221, by I~C/DAAD aaC Project 293,by the Commission of the European Union GrantLRE-62009, and by the Office of Naval Research GrantN00014-96-1-0465.t Starting this Fall, Dr. Paris' address will beCSIRO, Division of Information Technology, Syd-ney Laboratory, Building E6B, Macquarie UniversityCampus, North Ryde, Sydney, NSW 2113, Australia* Starting this Fall, Dr. Vander Linden's addresswill be Dept.
of Mathematics and Compnter Science,Calvin College, Grand Rapids, MI 49546, USA.way to obtain at least portions of the knowledgebase automatically.
There could be a progn~mwhich automatically derives the knowledge base orperhaps the knowledge base could be built as partof manual processes that would have to be per-formed anyway.
Either way, the marginM cost ofadding text generation would be greatly reduced.In this paper, we show that software documen-tation is an attractive application for multilingualtext generation because it is an area in whichpre-built knowledge bases are beconfing available.This is due in large part to the advancements inthe user interface design comnmnity which we willreview first.
We then discuss the nature of theknowledge base required for the generation of doc-umentation and how parts of it might be derivedautomatically.
Finally, we illustrate this idea us-ing DI{AFTEI{, a support tool for generating nml-tilingual sot~ware documentation.2 BackgroundResearchers in user interface design have startedto build tools which produce both code and docu-mentation.
These tools tend 1,o be based on a cei1-tral inodel of the interface under developme.nt, theinterface modal, a formal representation which canbe used not only for code generation but also fbrdocument generation, e.g., (Puerta and Szekely,1994; Moriyon et al, 1994).
Moriyon et al(1994),for example, haw~ used the interface model in thegeneration of on-line help.
Their help messagesindicate the actions a user can perform in a par-titular situation and what would result from theseactions.
They report, however, that task-orientedhelp is beyond the capabilities of their system;task-oriented help would indicate why the usermight want to perform any of the actions thatare available.In general, however, the doculnentation, pro-dueed by these systems is limited in two mainways: it does not correspond to task-oriented doc-umentation, which is, however, what end-users re-734quire and it is usually based on siint)le templategeneration, which does not allow flexibility withregard to the style of the text t)rodueed or thelanguage that is used.
These limitatioils stem, onthe one hand, fl'om the fact that interface mod-els in general contain systcm-or'icnted informatiem(e.g., what hat)pens when a button is pushed) but1tot task-oriented inforlnation (e.g., why one mightwant to push the button), and, on the other hand,from the focus of the research, that is system andinterLtce design and not natural langm~ge genera-tion.In the 1)I{AI,"I'EII.
projeel;, we have attcmt~ted I;()address these two issues.
We address the tirstby providing reels that allow technical authors tobuiht richer interface models.
These rMmr mod-els integrate task information into the informationalready available in interface models.
This task in-formation, which is commonly tbund in task mod-els, e.g., GeMS (Card et al, 1983), supi)orts theproduction of user-centred oeument;ttion.
W'eaddress the second by providing more general textgeneration facilities whic.h supt)ort multiple stylesand multiple languages.3 Representing the users' tasksEarly in the I)I{,AFTEI{ projee:t, we conducted in-terviews with technical authors (me)stly soft;wareclocmnentation sl)ecialists) in order I;t) understandthe docmnentation process as it, currently exists,to see', if an authoring tool wouht be hell}tiff , and ifso how it inight be used.
We found that technicalauthors stm't the documentation process by le;~rn-ing how 1;o use the interface in question, construct-ing a user-oriented mental model of the product.They Kequently have no input or, her than the soft-ware itself.
The authors indicated that they wouhlweleollle tools to hell) them collect the apl)ropriateinformation and create a formal representation ofthe resulting model.
Such a representation wouhlsupt)ort iterative construction of the doe,lmetlta-tion and intbrmat:ion reuse.Building our draft;lag tool, therefore, requiredus first, to determine how to represent the modelof a task, and then to build tools for creating andmanipulating this model.
Given that the gem-eral structure of instructional texts is hierarchi-cal, we chose a representation that e.xpresses ahierart:hy of goals and sub-goals.
The reI)resen-tation is thus similar to the (;raditi(mal structuresfound in AI plalming, e.g., (Sacerdoti, 1977), andalso to task models used in interface design, e.g.,(Card et al, 1983).
Because user documentationfrequently inchldes information other than the rawactions to be performed, our representation allowsauthors to include information ot typically foulldin traditional plan rel)resentations such as: /1ser-oriented motiw~tional goals, helpflfl si(le-efl'e(;ts,and general COlllliletltS.As an example, consider the rei)resentatitm ofa sub-set of the procedure for retying a new file ina Microsoft; WoM-like editor shown in Figm:e 1.The owl,1 boxes in the figure ret)resent actions antithe rectangh',s represent plans.
Ea('h of the actionnodes in this sl;rueture rel)resent inter(:omw,(:i;e(tcomplexes of procedural and descriptive instances.For examl)le , the main us(;r goat of saving a do(;u.-meat, represented in the figure by the action node"Save ;L Document", is implemented in the knowl-edge base as a comple, x of instances repres(mtingthe act;ion being tmrformed (in this case saving),tim agent who performs action (the reader), thet)atient on whom the aetioll is performed (the cur-rent doeunmnt), etc.
All of this itlforination is re-quired to generate xpressions of the action, but1)resenting it would overly complicate the graph.The links actually shown in tilt; figure are basedon the, procedural relations in the domain model.For exalnple, the I)lan for saving a document(Save-l)ocument-Plan) is linked to its goal (SaveA Do(:umelfl;), to its precondition (()t)e,n-Savc-As), and to its sul)-at:tions of typing a name for the(;llrrellt document (Tyl)e-Document-Name), open-ing l;he fohler in which it is to t)e saved (Ot)ei>l,'ohler), and clicking the Save tmtton (Choose-Save-Ilutton).
The precondition (Open-Save-As)must be tmrformed before the sub-steps may t)e at-tempted and is in turn linke(t to fllrther sub-plans(Choosing-Plan and Clicking-Plan).
This indi-cates that the Save-As dialog box may be ope, nedby either choosing the Save option from the file,melm (Choose-Save-()t)tion) or (',licking the Savebutttm on the tool bar (Click-Save-h:on).
'Fhis task model represents the procedures thata user might perform when using an at)t)li(;ationand is tim basis for generating user-(x;ntrt:(1 lt)cu-meal;aLien, slt(;h as olle of I)I{AFTEI\['s texts shOWllin Figm'e 4.
It includes the users' high-level goals(e.g., "save a document") as well as their low-le, vel interf;tce manipulations ("choose the savelmtton").4 Input from the Design ProcessIn our earlier work, we provided tools that sup-l)orted 1;t1(; construction of the task nlodel t)y hand(Paris et al, 1995).
This went some way to ad-dressing the, technical aut;hors' desire for a formalmodel and tools to lmild it.. Building the modelDora scratch, howe, ver, even with the, help of ourmenu lmsed interface, was a tedious and lengthy735Precond/t ion \[...~Open Method 11 - -  ( Cho%se_gave Opton )lDialog )<  " I- -  ~'-topen Method 21E~, ,~ IdSn~ J( Save A Document )~-~S'ave Docume'nt Method l~D~(-~ame )\~ i i -on  )l (~aT~a~E-~i~)----~ancel Save As Meth0dl-----# ~h~'e C~TEa ~utton )Figure 1: The Saving Procedure Graphprocess which could potentially have rendered tileI)I{AFTEI{ system impractical.
There was a clearneed for facilities to ease the input task.
In linewith this, we noticed that certain elements of themodel were also present in the specifications de-veloped in user interface design environments.
In-deed, we found that a number of the actions andobjects in the model could be automatically ac-quired from a design tool, thus providing basicbuilding blocks from which the flfll model couldbe constructed.3b illustrate this idea, we have built our exam-ple document editor application in VisualWorks,a widely available interface design environment(Vis, 1994).
This tool allows one to define thewindows, dialog boxes, and other widgets relevantfor the application under develot)ment, and pro-duces a prototype of the interface thus specified.Its output also includes declarative specificationsof all the widgets.
These specifications are thusavailable to be exploited by other systems.
In par-tieular, we found that these specifications could bereadily transformed into a form appropriate forthe knowledge base required by a text; generationsystem such as DRAFTEI/..
In our examt)le then, webuild a VisualWorks mock-up of our word process-ing application, and I)RAI,'TEK derives task modelinstmmes for all the windows and widgets in (;heapplication (e.g., the Save-As dialog box and all itswidget, s) directly fl'om tile SmallTalk source code.DItAFTEI{ is also able to infer the basic interfaceactions that can be performed on the various in-terface widgets and creates task model instancesfor them as well.
For example, the system auto-matically defines a clicking action instance for any"button" on the interface.
Similarly, it c.reatesopening and (:losing actions for all "windows".Although this set of instances does not ret)re-sent all tile information that could, in principle,be derived from the SmallTalk specitications ofthe editor application, it nevertheless simplifiesgreatly the technical author's task of knowledgespecification by providing the huilding blocks fromwhich higher-level procedures can be defined.
Intile case of out' admittedly simple example, sevenof the nine actions in the procedural structure areautomatically specified.
The author is requiredto specify only the main user goal action and thethree plan nodes.
This is, t, hercfore, a step to-wards aut;omatically building the knowledge baserequired for the generation system.
It is also a steptowards integrating the (lesign and documentationprocesses, which is now widely recognised as be-ing desirable.
In our current work, we are investi-gating how more of the design knowledge call bemade accessible ~md uiMel'standable to the tech-nical authors, and what other tools would furtherfacilitate tile authors' task.
We are also lookingat a tighter integration of the design and docu-mentation processes, one in which tile individualsinvolved work together during design.5 DRAFTERWe.
now describe I)I\].AFTEI{> a technical authoringtool which supports the construction of tile taskmodel discussed above and the drafting of multi-lingual instructions from that inodel.
We will fo-cus on how it supports the author in augmentingthe information automatically acquired Dora theinterface design tool.
I)RAFTEI/,'S general archi-tecture, shown in Figure 2, is based on two inainprocessing modules:Tile Author Interface (shown oil the fitrleft of the diagram) allows authors tobuild a task model and to control thedrafting process.The Drafting rlbol (shown on tile farright of the diagram) comI)rises two ma-jor components: the Text Planner andthe Tactical Generator.
The Te.xt Plan-ner determines tile (:o,~t,e.nt and structure.736Figm'e 2: \])a(;attow in DI{AI,"\['E\[{.of the t, ext as well as the detailed slxu<::l;ure of the scnl;en(;(;s (;hcr(;in..
The Tacl;i-cal Cen(:ral;or t)(~rforlt'ls (;h(: SllFfacc re&l-isation <)f (;tie Selll;ellCCS.The.
knowle<lge base (in the middl<: of (;}m figure)mMerlies the task model built by the (;<x:hni<:al au=Lhor.
The DrafLing Tool takes this reprcscni;at, ioilas input, and produces English an<l f,?ench draf'tsof t, he appropriaW, tul;orial inslxu<:tions.
In thiss<:ction we de(;ail ea<',h of (;hese (:omponenl;s in (;he<'.on(,ext of an exampl<,,5.1 The Knowledge  BaseThe knowl(,<tge base sut)porl;s (;he (:oilst;ru(;l;ion of(;he (;ask mo<M discussed above.
\[(; is an hierarchi-cal stru(:t, ur<: imph:menl;e<l in I ,OOM (MacGr(:gor,1988).
Th(; root is l,h(; l)(mman M(:rg<:(l Upl)erModel (Bal;eman, 1995), an ontology <)f <listinc-tions relevalfl; in (;xpressing actions, (>t)j(x;l;s, andqualities in na.l;urat language.
The know\](;dge base<:onl;ains t'urther layers corr<:st)ouding 1;o: (1) (;h(:conc(;t)l;s and relal;ions general to all insLru(:l;ions;(2) those g<;ncral only Ix) software im;erfa(:cs; an<t(3) l;hose Sl)(:<:iti<" t;o the chos(,qi soft;wa.r(~ apt)li(:a-l;ion d<)mains (in ore' case text i)ro(:(:ssing (;<)<)Is).Using (;lle I)I/AF'I'EI/.
inl;erfa(:e, (,e(:hnical aul;htnsspecify hi(!
)'archi<:al (;ask m(>(Ms, su(:h as (;he oneshown in Figur(!
1, 1)y building nodes and <'.<m-ne(:l;ing l;hem wil;h l;h(,, appropr iate I))'o(:edm'al I'C,-lal;ions.
The low-le.vel buihling blocks of l;he (;askmodel are derived automal;i(:atly, and I)I{AI,'TI.
;II.alh)ws (;he (x'~chnical alll;hor 1;o (:Olltl(l(:(; \[,h(}ill anda<ld higherqevel (;ask inforula(;ion as ai)prot)riat(: ,using an inl;(:rfa(:e bas(:<l on (:onlxolled languageand (;he use.
of meims (x) guid(', l;he aul;hor.5.2  The In ter faceI)IIAI"TI';I~,S illL(~,rface is imph;ment>e<l in C,,IM mMiIMudes l;he following modules:* The Knowh'.dgc ?
'dil.or alh>ws l;h(!
aul,hor1;() <:Oll,ql;rtl(:l; all<t ltlailli;aill t,h(: t)ro(:t!tltll~/1l'(:l)r(~st:nl;aI;iOll;e '.Phe Knowh,dg<~ (,'raph, cr allows l;he au-(;hot 1;o visualise (;he hierar<:hical sl;ru(:-l;m:e of the procedural represenl;at,ion;.
The Draft Tczt Viewer allows the aul;hor1;o view and edil; (;h<'.
aul;omal;i<:ally gen-eral;ed English an<l Fren<:h drafl;s.These fllllCl;ioils Call bc invoked from menus orfrom mous(>s(;nsil;ivc ot)jtx:l;s in a sl;yle (:<)mmon1;(> sysi;ems uch as Moi:if.5 .2 .1  The Knowledge  Ed i to rThis 1;ool Inak<'.s the st;ru(:tm'e of t;hc knowledgebase on whi<:h l;h<: \[;ask model is lmill; mot(: accessiblc 1;<> l;he aul;hor.
I(; allows the aul;hor (;operform t,wo basic tasks: (1) sp<'.<:ii~ying (;he ac.t, ion nodt:s at)pearing in l;hc Sl;l'tlt;l;llrc all(\[ Ho\[; yel;<t<:rivcd fl'OlIl 1;11(: inl;erfact: designed tool; and (2)linking existing nodes (,ogt:l;ht:r wit, h (;he al)propri-a.
(;(; plan insi;anc(;s and relal,ions.
The.
tirs(; of (;hese(;asks is lmrfornmd using a.
<:ontrolle<t nalalra.1 bmguage inl;erfa<> wlfile the s<'.<:<md is done wit;h a<lialog box lllc(:haltisill.Specifying (;tie 11(}(l(;s at)l)eal.illg ill t;he t;askmodel involves stmcit'ying a flfll complex of til lguist, ic cntil;ics and roh;-filh;rs (<;.g., a<:l.<)rs, acl;(~es,desl;inai;ions).
Be.<:ause.
l;his stru<:tm'c may in<:hah,.lIially instances inl,ercomlecl, cd lit pot;cnt, ially mtinlalil;ivc ways, w(: have 1)r(>vi<l<:(1 a C(>nlx<>lle(1 Na(>m'al l,anguag<, (CNI,) inlx:r\['ac(: for I;|m mlI;h()r.7 ;3 7Tile interface is shown in Figure 3.
This interfaceallows the author to work in terms of sentencesrather than in terms of interconnected graphs.Tile figure, for example, shows the author in theprocess of specifying tile node Save A Document.The top line of text (reader save \[information\])shows the current state of the CNL specification.Words in brackets must be further specified.
Thisis done by clicking on the word and selecting theappropriate pattern from a list of possible expan-sions.
In tile figure, the author has clicked on\[information\] and is presented with a list of thetypes of information from which \[document\] canbe selected.
This process is driven by a controllednatural anguage grammar which specifies possibleexpansions at each point of tile derivation.
Thebottom line of text presents a flllly expanded e-fault at each point in the derivation.
In the figure,this CNL text is "reader save current document"which could be expressed in English in a mnnberof ways including "Save the current document"and "To save tile document".Once the action nodes of the graph have beencreated, or perhaps while they are being created,the author has the ability to link them together us-ing a set of predefined procedural relations: goal,precondition, sub-action, side-effect, warning, andcancellation.
This is done with a graphical outlin-ing mechanism.
This mechanism allows authors todrag actions from the ACTIONS pane and dropthem on the various procedural relation slots inthe workspace pane, or, alternatively, to createnew actions to fill the slots.
The result is a proce-dural hierarchy such as the one shown in Figure 1.This interface allows the author to specify theprocedure in several ways.
They may start fromthe main goal and work down tile structure, orthey may start by specifying all the low-level ac-tions and object and work up the structure.5.2.2 The Knowledge GrapherThe Knowledge Grapher prevents tile authorfrom losing orientation by maintaining the cur-rent state of the procedural structure in graphicalform.
This form is like that shown in Figure 1.
Be-cause the nodes are mouse-sensitive, it allows theauthor to iifitiate construction and maintenancefunctions by clicking on the appropriate nodes intile graph.
Authors can also invoke tile draftingtool from the graph.5.2.a The Draft Text ViewerThe author may draft multilingual instructionsoil any portion of tile procedural structure at anypoint in the specification process.
This task isperformed by the Drafting Tool which is brieflydescribed in tile next section.
This tool pro-duces a draft of the instructions in English andFrench.
These are presented to the author by tileDraft Text Viewer.
The presented text is mouse-sensitive, allowing the author to access the knowl-edge base entry for selected part of tile text.
Inthis way, the author can modify the underlyingknowledge base while working from the text.
Insome cases the writer will decide to modify thegenerated text rather than tile underlying knowl-edge.
For this purpose, a text editor is currentlyprovided.5.3 The Drafting ToolWhen the author initiates the Drafl;ing Tool (seeFigure 2), m~.AF'rl~t calls the Text Planner withthe discourse goal: make the user colnpetent operform tile action specified by the author.
TheText Planner selects the content appropriate forthe instructions and builds a deep representationof the text to be generated.
This portion of thetext plalming task is done by tile text planner de-veloped by Moore and Paris (1993).
Tile TextPlanner then specifies the detailed elements of the.sentence structure.
This portion of the task isdone by a descendent of IMAGENE (Vander Lin-den and Martin, 1995).Once complete, the text plans are passed tothe Tactical Generator which generates t, he actualtext in English and French.
This task is performedby tile English and French resources of tile Komet-Penman Multi-Lingual development environment(KPML) (Bateman, 1995), The drafts generatedfor the example procedure are shown in Figm'e 4.In these texts, we see.
that the main nser goal,that of saving a document, is given as a title to theseries of steps.
Then, the steps to be perfi)rmedto achieve this goal are given.
More detail on the,drafting process can be found elsewhere.6 SummaryIn this paper, we have shown that the knowl-edge base required to produce user-oriented docu-Inentation automatically can be partially obtainedfrom user interface tools and then augmented ap-propriately by technical authors.
We presented amultilingual drafting tool which exploits outputfi'om an interface design tool and provides flexiblesupport to technical authors for augmenting theinterface model thus obtained in order to build thetask model required to generate documentation.We argued that software docuinentation is thusan attractive and realistic application for naturallanguage generation.
In our current work, we areextending the percentage of the model that can be738~\[~ Define ~ctlan"eader save \[inf?rmai\[c\] .
.
.
.
.
.
.
.
t ,  'i/ \[&pp?intment \] I/,,ame of \[document\] I.ldescrJ.ptJon of \[appointment}\["eadersavecurlentldate of \[<~ppoJnt ..... t, // .~t~t  t,,,,~ of \[~ppo?nt ...... t l  /\ [ s top  time of \[appointment\] \]Figure 3: The Controlled Natural Language InterfaceTo  Save  a Document1.
Choose Save ti'om tlm file menu.-OR-Click on the Saw~' icon.Word displays the Save As dialog box.2.
Type the document name in the Save Cur-rent Document As tield.3.
()pen the fohter of the document.4.
Choose the Save button.You can quit the Save As dialog box by choos-ing the Cancel button.Enregistrement d 'un document1.
Choisir Enregistrer dans le menu Fichier.OU BIENCliquer sur l'icone Enregistrer.Word atlichera la zone de dialogue Enregistrer Sous.2.
Introduire lc titre du document dans la zone detexte Enregistrer le Document.3.
Ouvrir le fichier du docmnent.4.
Choisir le bouton Enregistrer.Vous pouvez quitter la zone de dialogue EnregistrerSous en choisissant le bouton Annuler.Figure 4: Generated English and French Draftsbuilt automatically, so as to increase the use.tiff-ness of the sysl;em and its potential marketability.We are also planning to evaluate the systeln withtechnical au/;hors.ReferencesJohn A. BateInan.
1995.
KPML: The KOME'r-Penman (Multilingual) Development Environ-ment.
~Ik;ehnical report, Institut fiir IntegriertePublikations- und Informationssysteme (IPSI),GMD, Darmstadt, July.
Release 0.8.S.
K. Card, T. P. Moran, and A. Newell.
1983.The Psychology of Human-Computer l'ntcrac-tion.
Lawrence Earlbaum Associates, Ilillsdale,NJ .Robert MacGregor.
1988.
A Deductive PatternMatcher.
In Proceedings of the 1988 Conferertceon Artificial Intelli.qence, St Paul, MN, August.American Association of Artiticial Intelligence.Johmma D. Moore and Cdcile L. Paris.
11993.Planning text for advisory dialogues: Capturingintentional and rhetorical information.
Compu-tational Linguistics, 1.9(4):651 694.Rot)erto Moriyon, Pedro Szekely, and RobertNeches.
1994.
Automatic generation of hel l)fi'om interface design models.
In CHI'9d PTv-cecdings, Boston, Mass.
Computer \ [ I l ln lan \[ii-lea'actions.Cdcile Paris, Kcith Vander Linden, MarkusFischer, Anthony Hartley, Lyn Pemberton,Richard Power, and Donia Scott,.
1995.
A sup-port tool for writing mnltilingual instructions.In IJCAI-95, pages 1.398 1404.Angel R. Puerta and l 'edro Szekely.
1994.
Model-based interface development.
CHI-94 TutorialNotes.Em'l l).
Sacerdoti.
1977.
A Structurc for Plansand Behavior.
Elsevier, New York.Keith Vander Linden and James It.
Martin.
119!
)5.Expressing local rhetorical relations in instruc-tional text;: A case-study of the purpose rela-tion.
Co'mputational Linguistics, 21(1):29 57,March.ParcPlace Systelns, hn:., 999 E. Arques Avenue,Sunnyvale, CA 94086-4593, 11994.
The Visual-Works Docurner~,tation.739
