Feature  S t ructure  BasedSemant ic  Head Dr iven  Generat ionGendch i ro  K IKU IATR In terpret ing  \]~elephony Research Laborator ies2 2 I I ikar i  dai,  Seika-cho, Soraku-gun,  Kyoto  (;19 02 JAPANkikui@atr-  la .atr .co.
jpAbst rac tThis paper proposes a generation method forfeature-structured)ased unification grammars.As comlx~red with fixed ~rity term notation, fea-ture structure notation is more tlexible for repre-senting knowledge needed to generate idiom~tticstructures as well as genem~l constructions.
Themethod enables feature strncture retrieval vianmlt iple indices.
The indexing mechanism, whenused with a semantic head driven generation al-gorithm, attains efficient generation even whena large amount of generation knowledge must beconsidered.
Our method can produce all possible structures in parNlet, using structure sharingamong ambiguous ubstructures.1 I n t roduct ionPracticM generation systems must lnwe l inguisticknowledge of both specilic expressions like idiomsand generM grammat ica l  constructions, ;rod ttmyshould efgtciently produce sm'face strings apply-ing that  knowledge \[\[\]\[2\].In order to satisfy the first requirement, oursystem employs a set of trees annotated withfe,~ture structures to represent generation knowl-edge.
l:;ach tree represents a t?agment of a syn-tactic strncture, and is paired with a semanticfeature structure.
We can describe idiomaticeonstructions, by making a tree which cont~tinslexical specifications and is paired with a specilierather than general semautic structure.
Becausefeature structures allow part ial  speeii icatiom wecan encode generation knowledge r;mgiug overmult iple levels of general ity in a. uniform way.l lowever, notice that this property will be re-stricted if we use DCG or (tixed arity) termnotation 1 Suppose there is a generationknowledge structure whose syntact ic part is"go on foot".
'rim feat, tu'e structure notationof its semantic part will be sonmthing like:~The flexibility of structure notation colnpated Lo tetlnnotation is also discussed il~ \[4\].\[ \[Rein GO\]\[Agent ?agent \[\] \]\[Instrument FOOT\]\].while the term notation is :(1)instrument(go(Agent) ,  foot) (2)These two notat ions seem to be equivalent, butthere is a cruciN diflerence.
A generation knowl-edge structure containing the fe~tture-based se-lnantics will still be unifiable even if the seman-tic input to be unified contains additional ma-terial.
Thus the knowledge structure will bediscovered and its syntactic information can heused for generation.
By contrast,  a term-basedinput with additiona.1 elements would not unifywith the term-based semantic structure shownabove.
It would thus be necessary to create ad-dit ional generation structures containing dist inct(though part ly overlN)ping) term-based seman-tic structures.
Such addit ional structures are re-dundant  ~tn(l cause superfluous output.For example, consider the a,ugmented featurestructure (3).\[ \[Rein ~o\]\[Agent Ken\]\[Instrument FOOT\]\[Time I0 : OOmn\] \] (3)i t  will indeed nnify with (1) above.
But term-based input semantic structure (4) will not unifywith term-based semantic structure (2).ins t rument ( t ime(go(ken) ,  10:00am),  foot ) .
(4)To unifv (2), semantic ,structure (5) would a.lsobe required.t ime( ins tzument (go(ken) ,  foot ) ,  10:00ma).
(5)AcrEs DE COLING-92.
NANTES.
23 28 AOt~q" 1992 3 2 PROC.
OI; COLING 92.
NANTES.
AUG. 23 28.
1992For this reason, our generation knowledge con-sists of trees represented as feature structures.A tree can be substituted for a leaf node of as-other tree to form a larger structure.
Thus, tiletree can be regarded as a rule in a context-freefeature-structure-based unification grammar.The second requirement for a generation sys-tem is efficient creation of syntactic structures.This is the main topic of this paper.
Our systemis based upon Semantic }lead Driven Generation\[6\], which is an efficient algorithm for unilicationbased formalisms.
However, this algorithm re-quires some additional mechanisms toefficientlyretrieve relevant generation knowledge, becausefeature structures can not be easily indexed.The algorithm presented here uses a nmltipleindex network of feature structures to efficientlychoose relevant generation knowledge from theknowledge base.
The algorithm "also uses an hy-pothetical node so as to efficiently maintain am-biguous tructures during generation.2 Phrase Descr ipt ion(PD)Generation knowledge is represented as a set oftrees aunotated with feature structures, l,',achtree is called a Phrase Description (PD).ALl example of a l)D is shown in Figure.1.Structure:(S AUX (NP PRON) VP)Annotation:(S \[\[syn \[\[cat S\] \[inv +\]\]1\[sem \[\[reln REQUEST\]\[agon *SP*\]\[recp *HR*\]\[obje ?ACTION\]\]\]\])(AUX \[\[syn \[\[cat AUX\] \[lex "would"\]\[v-morph PAST\]\]\]\])(NP \[\[syn \[\[cat NP\] \[case NOM\]\]\]\])(PRON \[\[syn \[\[cat PRON\] \[case NOM\]\[lex "you"\]\]\]\])(VP \[\[syn \[\[cat VP\]\[v-morph BSE\]\]\]\[sem ?ACTION\]J)Figure 1: an example of a PDA PD consists of two parts: a structure defini-tion and feature structure annotation (Structurea.nd Annotation i  Figure 1).The structure definition defines tile structureof a tree by using a list in which the first ele-ment corresl)onds to the mother node and tilerest of the elements correspond to daughters.l';ach daughter may t)e a tree rather than a sin>pie node.Acres DE COLING-92, NANTes, 23-28 AO6-r 1992 3 3The annotation part specifies the featurestructure of each symhol appearing in the struc-ture definition.
A feature structure descriptioncan contain tags or variables (symbols with "?
"as a prefix in the figure), The scope of a tag ina PD is the entire PD.Each node should have a semmltic and syntac-tic feature structure.
The semantic feature onthe root node of a PD represents he semaatticsof the PD; thus we call it the semantic structureof the PD.Although the description represents a tree, itis the same ms for a (partial) derivation structureof a unification-l)ased CFG, because tile currentsystem does not allow adjoining operations.
Ifthe structure definition of every PD is restrictedto mother-daughter r lations only, the PD set isstrictly equivalent to a unification-based CFG.3 Generation AlgorithmOur algorithm is aal efficient extension of Semaat-tic Head Driven Generation.
3?he major exten-sions are: 1) it handles feature structures di-rectly, and 2) it creates all possible phrase struc-tures in parallel.
These extensions are embodiedmainly in the t'l) activation and ambiguity han-dling mechanisms discussed in this section.3.1 Overv iew of  the  a lgor i thmThe main part of the generation process is expan-sion process, which iterates through expandingnode selection, activation, prccombination, andapplication, using an e~Tmnding ode agenda.Input to the process is a feature structure con-raining syntactic, semantic and pragmatic fea-tures as an initial constraint on the root node.q'he Cxl)auding node agenda contains tim un-lexicalized leaf nodes of the tree under creation.At the beginning of the process, it conta.ins onlyone node, which has the feature structure giveuas an initial constraint.The expanding node selection step picks upone node, say expanding node, from the agenda.If no node is picked ill) , the expaa~sinn processstops.The PD activation step activates all PD'swhose senlantic strlLetures s~tlJs~tme the seman-tic structure of the expanding node.The precombination step makes PD sequencesfrom activated PD's to satisfy some constraints.The application step instantiates the PD se-quence(s) and applies it to tile expanding node.Paoc.
oe COLING-92, NAm'ES, AU~.
23-28, 1992PD1 PD2v3 v4v2Figure 2: an example of dagsIt also pushes unlexicMized leaf nodes into theexpanding node agenda.i//#...':.-"'">e 4aPDI PD2 l0 path node ~ feature arc.... value arc pd node-~ tag arc3.2 Expand ing  Node Select ionThe expanding node selection step is for fetchingone node from the expanding node agenda.
Fromamong the nodes whose semantic feature hasbeen instamtiated, one is chosen.
In this step, iftile fetched node satisfies ome termination con-ditions (if~ for instance, it satisfies tile conditionsfor slash terminatim0, the node is discarded (i.e.,not expanded any more).
If the agenda is emptyor contains no node with an instantiated seman-tic feature, the expansion process tops.3.3 Act ivat ionThis step is responsible for selecting all PD'swhose semantic structures subsume the semanticstructure of an expanding node.
The selection isdone by traversing a multiple index network ofPD's called the PD net.3.3.1 Compiling PD'sA set of PD's are pl'e-compiled into a PI) net.Suppose there are two PD's whose sema~nticstructures 2 are defined as the dags (i.e.
di-rected acyelic graphs) in Figure 2. in the fig-ure, fa,fl),fc,.., and vl,v2,., represent arc babels(feature names) and atomic values respectively.These PD's are coinpiled to the PD net shown inFigure 3.The uet has two kinds of nodes: pathnodes@i), and PI) nodes (PDj) .
These nodesare linked by three kinds of labeled directed arcs:2The semantic feature of a PD.
is a semantic featureon the root node of the PDFigure 3: an example of PD netfeature arcs(bold lines), vMue arcs(dashed), andtag arcs(with arrows).A path node is used to represent a particularfeature path in one or more feature structure.As shown in Figure 3, path nodes are linked bybold feature arcs to form a tree.
The sequenceof arc labels from the root path node to a pathnode Pl is the path of Pi.
\[It Figure 3, p3 and p5show paths (Po N) and (re fd) respectively.Each PD node (rectangle) corresponds to aparticular PD, which may have value ares andtag arcs.?
Value Arcs: Which PD's contain which atomicvNues along certain paths ?A PD node may be linked to path nodes withva lue  ares.If a (rectangular) PD node is linked to a.
(round) path node pn with a dashed value arelabeled v, then following the path leading to pnyields atomic value v in that PD.Consider the dashed value are vl in Figure 3.It indicates that following path fa in PDI yiehlsan atomic value vl.
This is just tim situationdepicted in Figure 2.?
Tag Arcs: In a given PD, which paths share a.cel't~in feature structure as a vaJue ?A PD node may also be linked to path nodeswith tag arcs.If lowo tag arcs have the same label and theycdnnect ;~ PD node to two path nodes, say pnland pn2, then tim feature structure of that PI)has a substrm;ture which is the value of bothpaths, that of phi and pn2.Am~s DE COLING-92, N^NTES, 23-28 ao~r 1992 3 4 Proc.
OF COL/NG-92, NANTES, AU6.
23-28, 1992t, br example, the two tag arcs from rectangularPDI node labeled "t l"  in Figure 3 show thatthe semantic structure of PD1 has a substructureserving as the vMue of (~)  and (fc).3.3.2 Travers ing the PD netThe data structure of nodes and arcs are shownill.
Figure 4.+ .
.
.
.
.
.
.
.
+ + .
.
.
.
.
.
.
.
.
.
.
+I PD I I label  I + .
.
.
.
.
.
.
.
+ + .
.
.
.
.
.
.
.
+ + .
.
.
.
.
.
.
.
.
.
.
+Ivalues I ltagarcs I Idestinationl+ .
.
.
.
.
.
.
.
+ + .
.
.
.
.
.
.
.
+ + .
.
.
.
.
.
.
.
.
.
.
+If eatures I I valueNuml (c) arc+ .
.
.
.
.
.
.
.
+ + .
.
.
.
.
.
.
.
+ (feature arc, Idagstorel \[status \] value arc,+ .
.
.
.
.
.
.
.
+ + .
.
.
.
.
.
.
.
+(a) P node (b) PD node path arc)Figure 4: Node and Arc structuresA path node has three slots: values, features,oatd dagstore.
The values slot and the arcs slotcontain value arcs and feature arcs respectively.The dagstore stot is initially empty; later it holdsa pointer to a dag which passed the path node.Each PD node has a PD slot, a tagares slot,a valueNum slot, and a status slot.
The PD slotcontains a pointer to the represented PD itself.The tagarcs slot contains the data structure ofthe tagarcs (see below).
The valueNum slot hasthe number of value arcs to the PD node.
Forexample, the value of the number slot of PD1node in Figure3 is 3, because the node has onevalue a.rc labeled vl and two value arcs labeledvl.
The status slot holds integer and is initiallyset to 0.Every type of arc has two slots, 'label' and'destination'.
Label' is an atomic symbol whichlabels the arc, and 'destination' is a pointer tothe node which is the destination of the arc.We use the PD net as a dataltow net.
The en-try point of the net is the root path node amd thetoken which flows is a dag of a semantic featurestructure.The action of a path node is shown in Figure5.
"faihn'e" means there is no PD whose seman-tic structure subsumes the given dag.
Thus theentire retrieval process fails.The action of a 1)D node is shown in Figure6.
The status is incremented each time the nodereceives a tokeu.
As a result, if all atomic valuesin tl,e semantic structure of the PI) are satisfied,the status becomes equM to the valueNum (thatis the nulnber of atomic values).
Once this isdetected, then uuifiability of shared structure ischecked by cMling the tagtcst procedure.Tagtest ests unifiability of the dags in the dag-stores of p(ath) nodes connected by tag arcs withthe same label.
Iu Figure 3, if the status of PD1becomes 3 and if the dag in p2 and the dag in 114are identical, then the PD becomes active.
Thatis, the PD has been found to subsume the gen-eration input.
It may or may not actually beapplied, depending on later events.PROCEDURE PDnodeAction(pdNode, value)pdNode.stat, us ~ pdNodc.status + 1 ;IF pdNode.status = pdNode.valueNumand tagtest(pdNode.tagarcs) = T THENactivate(pdNode.PD) ;Figure 6: Procedure of a PD nodeIf there is a PI) node whose wdueNums is 0(i.e.
No a,tomic value is specified iu the semanticstructure), node action of the PD node is invokedafter ?la.taflow is terminated.PROCEDURE PathNodeAction(pathnode, dag)pathnode.dagstore ,-- tile pointer of dag ;IF dag is atomic value type THENvalidValueArcs +-- {arc \[ arc E pathnode.values, arc.label = (lag.value} ;IF validValueAres :~ ?
THENFOR EACH arc IN validValueArcs DOPDnodeAction(are.pdnode, dag) ;ELSE failure ;ELSE IF dag is complex value type THENFOR EACH arc IN dag.va:ue DOIF Searcharc(arc.label, pathnode.featureArcs):~ Nil THENPathNodeAction(Searcharc(arc.label, pathuo(le.featureAras), rc.destin;ttion) ;ELSE failureFigure 5: Procedure of a path nodeAcres  DE COLING-92, NAI'/TES, 23-28 Aour 1992 3 5 PROC.
OF COLING-92, NANTES, AUG. 23-28, 19923.4 P recombinat ionThe precombiuation step is responsible for mak-ing sequences of PD's from activated PD's undercertain constraints.
A PD sequence is a roughplan for a potential structure which can realizea semantic specification of the node being ex-panded a.
If no sequence is obtained, the am-biguity resolution process, discussed later, is in-voked.We divide PD's into two groups: propagationtype and non-propagation type.
A propagationtype PD has has one propagation ode.
A prop-agation node of a PD is a leaf node whose se-mantic structure is identical with the semanticstructure of the root node of the PD 4.
The restof the PD's, which have no propagation odes,are classified as non-propagation type PD's.
Thisdistinction is an extension of Shieber's chain ruleand non-chain rule distinction.A PD sequence PD1 ..... PD,~ must satisfy thefollowing constraints.1.
semantic structure sharing constraints(a) PDi(1 <_ i < n) is a propagation PD,(b) PD~ is a non-propagation PD,Under these constraints, the system canmake a partial phrase structure by unifyingthe propagation ode of PDI with the rootuode of PDi+l.
Tile root node of the cre-ated structure contains the unified semanticstructure of all semantic structures of PD'sin the sequence.2.
local unifiability constraints(a) the root node of PDI is unifiable withtile expanding node(b) t>Di and t)Di+l are connectablewhere PDI is connectable to PD 5 if PDI is apropagation P\]), and tim propagation odeof PDi is unitiable with the root node ofPDj.These constraints are necessary conditionsfor unifiability throughout the entire PD se-quence, which is called the global nnifiabilityof a PD sequence.
In contrast o such globaluni/iability constraints, the local vnifiabilitycan be pre-computed, or compiled, beforegeneration process.aA PD sequence is roughly corresponds to a bottom-upchum in \[6}~Our current system does not allow PD's with multiplesemantic head4.covering constraintLet fsl be the unified semantic structure ofall semantic structures of PD's in tile se-quence.
Fsl must contain every top featureof the semantic structure of the expandingnode, where a top feature of a feature struc-ture is defined as a top-level feature name.The covering constraint ensures completegeneration \[6\].
If the constraint is not saris-fled, a given semantic structure may not becompletely realized in the generation result.For example, if all input semantic strucureis (3) (in Section 1) and the unified seman-tic structure of a PD sequence is (1), thenthe resulting PD sequence lacks the locativephrase for the "time" feature, which will notappear in the generation result.disjointness constraintsFor each PD (PDi), there is no other PD(PDj(i # j)), such that PDI has a top arcwhose label is included in the set of top arcsof PDj.
The definition of top arc is givenabove.If this constraint is not satisfied, the genera-tion result may contain duplicated or invalidexpressions.
For example, if a PD sequencecontains two distinct PD's each of which isfor a locative adjunct and has a "time" fea-ture on the top level, the generation resultwill have two locative adjuncts for one se-mantic feature (i.e.
tile "time" feature).The disjointness constraint also ensurescompaetgeneration.
Suppose a coherent andcomplete generator produces a string w, andthe grammar assigns a semantic structurefso to w using a set of rules R. String w isminimal if every sub-structure of fso is sup-plied from one rule in R. The generator iscompact if any string w is minimal.Ill general, completeness, &lid conlpactnesscannot actually be judged until the entire gen-eration fiulshes.
Thus the last two constraints (3and 4) do not reaiiy guarantee completeness andcompactness; rather, they help to limit searchspace in a practical way.3.5 PD App l i ca t ionThe PD application step is responsible for creat-ing phrase structure(s) fl'om PD sequence(s) andattaching them to the expanding node.
In thissection, we restrict ourselves to the simple caseACRES DE COLING-92, NAN'YES, 23-28 AOt~T 1992 3 6 PROC.
OF COLING-92, NANTES, AUG. 23-28, 1992such that there is only one PD sequence obtainedduring the previous step.
The case of multiplePI) sequences, (i.e., generation ambiguity), willbe discussed in the next section.First, the module connects all PD's in the PDsequence PDI...PD,, by unifying the propagationnode of PDi with the root node of PDI+1.
Allunification operations are quasi-destructive, ortemporal \[7\].
The result of the unification is validuntil the module copies it (see below).If this entire unification process ucceeds (i.e.,if every PI) in the sequence can indeed be uni-fied, and the sequence thus proves to be globallyunifiable; see 3.7), then the module makes a copyof the unified PD sequence.
Otherwise xpansionfailure (see next section) is signified.
The copy,which is a phrase structure tree, is called an in-stance of the PD sequence.Then the module attaches (unifies) the instan-tiatted PD sequence to the expanding node.Finally, the system stores in the exl)andiugnode agenda leaf nodes of expanded structureswhich have no lexieal feature values..3.6  Ambigu i ty  Hand l ing3.6 .1  Ambigu i ty  pack ingIf multiple PD sequences are applicable to an ex-panding node, the substructure of the expandingnode can not be uniquely determined, becauseeach PD sequence indicates only an hypothesisfor' the potential substructure.The system maintain these hyl)otheses in aspecial hypotheses slot on the undetermined ex-panding node.For each PD sequence, a copy of the expandingnode (:ailed an hypothesis node is created.
Thesecopies are stored into the hypotheses slot of theoriginal expanding node.
Then the system applies each PD sequence to the corresponding hy-pothesis node, as described in the previous sec-tion, and continues expansion.In Figure 7, three suhtrees in the "hypo" slol.on the undetermined node have been created for'the hypothetical Pl) sequences.The hyl)othetical PI) sequences are not unblied with the original expanding node, but unbtied with copies of the expanding node.
This prevents tire original feature structure of the unde-termined node from being modilied by furtherexpansion of the hypothetical structures (T I-T3in Figure 7).q'he further expansion sometimes makes anhypothesis node inconsistent with the originalvl, \[inqt0~"  p0-------_~0p:hypothesis T ~,,~'" -'" .,.-" - .
.
jnodes ~ VP1 ~"~VP2 VP3 P 'Figure 7: generation ambiguitynode.
This is detected in the ambiguity reso-hltion process described in the next section.3.6 .2  Expans ion  Fa i lu re  and  Ambigu i tyI Leso lu t ionExpansion failure occurs when:1.
\]to PD is activated in the PD activation, or2.
no PD sequences are obtained in the precombination, or3.
no PI) sequences satisfy global connectabil-ity in the application.The failure signifies that the feature strnctureof the current exl)anding node is inconsistentwith a set of Pl)'s given as generation knowl-edge.The module searches tbr the ne;~rest (i.e., low-est) hypothesis node (Nh) dominating the failedexpanding node and deletes Nh fi'om the hy-potheses lot containing it.If the number of hyl)othetical structures in thehyl>otheses slot of a.n undetermined re>de (N,,)hecomes one, then N,~ and the root node.
of theremaining structnre in the hypotheses lot areunified.
If the unilication f~tils, amlriguity resoh>tion continues recursively upw~rd.An examt)le of ambiguity resolution is illustrated in Figure 8.
The values of tire hyt)othe-ses slot of node VI' are the hypothetical nodesVPl, VP2, and vt'3, corresponding to hypothetical trees TI ,  T2, 'I'3 respectively.
If expansionfailure occur in T I and '1'2, VP1 ;~nd V I'2 areremoved from the hypothesis slot.
Then, Vl'3 isunitied with VP, because there is only one hypothesis node left in the slot VP node.If there is no hypothesis node dominating thefailed expansion ode, the entire generation l)r~)-cess fails.AcrEs DE COLING-92, NAI~'aT..S, 23-28 AOI\]'r 1992 3 7 I'ROC.
OF COLING-92, NANTF.S, AUr3.
23-28, 1992Nhunify.......VP1 VP2 VP3perform adjunct operation \[9\].The algorithm is implemented in SL-Trans, aspoken language translation system \[8\].AcknowledgmentsThe author would like to thank M0zk Seligma~tfor helpful comments on this paper and alsowould like to thank Akira Kurematsu, TsuyoshiMorimoto and other members of ATR for theirconstant help and fruitful discussions.Figure 8: an illustration of generation ambiguityresolution3.7 Pos tprocessExpansion halts when no node is selected in theexpanding node selection step.
This does notnecessarily mean the agenda is empty, becausethere m~y be some nodes without instantiatedsmnantic structure.ltow do such semantically empty nodes arise?The problem is that feature structnres within hy-potheticM nodes are not allowed to unify withthe feature structure on the "real" dominatingnode.The solution is: for each hypothetical node,we create a complete tree using copies of the"real" dominating structure, Feature structurescan then be permitted to unify with dominatingstructures.
Then, the system collects all unlexi-calized leaf re)des as initial values of the expand-ing node agenda nd starts the normal expansionloop again.4 Conc lud ing  RemarksA semantic head driven generation method basedon feature structures is proposed in this pa-per.
This method efliciently generates all possible phrase structures fl'om a given semantic fea-ture structure.
The method involves multipleindexing of feature structures and a precombi-nation nlechanisn\].
These lnechanisnls constrainapplicable gralnmatical knowledge beR)re instan-tiation; thus the method eliminates the copyingof fegture structures, which consunles conlputillgresources.The proposed grammar notation is appropri-ate for describing idiomatic phrase structureseasily.
To make the best use of the notation,we are extending the Mgorithm so that it canAcrEs De COLING-92, NAmes, 23-28 AO13"r 1992 3 8References\[11 Hovy, E.H., "Generating NaturM LanguageUnder Pragmatic Con-stralnts",Ph.D.Dissertation, Yale Univ., 1987\[2\] Jacobs, P.S., "A generator for natural lan-guage interfaces", In D.l).McDonald et al, ed-itors, NaturM Language Generation Systems,Chapter 7, Springer-Verlag, 1988\[3\] Shieber,S.
M,  "An introduction toUnification-Based Approaches to Graznmar',CSLI, 1986\[4\] Knight, K., "Unification: A Multidisci-plinaxy Survey", ACM Computing Surveys,VoL21, No.i, 1989\[5\] Pollard,C.
et ah, "Information-ba.sed Syn-tax and Semantics Volume 1 Fundamentals",CSLI, 1987\[6\] Shieber, S.M.
et al, "A Semantic-Head-Driven Generation Algorithm", In Proceed-ings of 27th ACL, t989\[7\] Tomabechi, H., "Quasi-Destructive (\]raphUnification", In Proceedings of 29th ACL,1991.\[8\] Morimoto, "17., et a.l.
"A Spoken LanguageTranslation System : SL-TRANS2".
In Pro-ceedings of COLING'92, 1!
)92.\[9\] Vijay-Shanker, K. et al, "Feature StructureBased Tree Adjoining Grammars", in Pro-ceedings of COLING'88, 1988PROC.
OF COLING-92, NANTES, AUG. 23-28, 1992
