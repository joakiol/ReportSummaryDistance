Multilingual Generation and Summarization of Job Adverts:the TREE ProjectHaro ld  Somers ,  B i l l  B lack  Joak im N ivre ,  Torb jSrn  LagerCent re  for Computat iona l  L inguist ics ,  SSKK I I ,UMIST ,  Un ivers i ty  of GSteborg ,Manchester ,  Eng land  SwedenAnnarosa  Mu l tar i ,  Luca  G i la rdon iQu inary  SpA,Mi lano,  I ta lyJe remy E l lman,  A lex  RogersMARI  Computer  Sys tems Ltd ,Ash ington ,  Nor thumber land ,  Eng landAbst ractA multilingual Internet-based employmentadvertisement system is described.
Jobads are submitted as e-mail texts, analysedby an example-based pattern matcher andstored in language-independent schemas inan object-oriented atabase.
Users cansearch the database in their own languageand get customized summaries of the jobads.
The query engine uses symboliccase-based reasoning techniques, while thegeneration module integrates canned text,templates, and grammar ules to producetexts and hypertexts in a simple way.1 In t roduct ionFree movement of labour across national boundariesis an important aim of the European Union.
1 One ofthe prerequisites for this open labour market is ac-cessibility of information about employment oppor-tunities, both from the point of view of people seek-ing work, and of their potential employers.
However,many EU citizens are denied full access to employ-ment opportunities because information may not bereadily available, and even where it is, it may not beavailable in the right language.
The TREE projectaims to address this problem by providing a systemon the Internet where employers can deposit job ads,and which users can browse, each in their own lan-guage.
Access to this service will be either throughthe user's own Internet provider, or at dedicated ter-minals located in employment centres.
There arecurrently very many Interact sites where jobs areadvertised, and indeed using information retrieval1TREE is Language Engineering project LE 1182of the European Commission's Fourth Framework Pro-gramme.
We would like to express our thanks to otherpartners on the project: Edy Geerts and MarianneKamoen (VDAB, Vlaamse Dienst voor Arbeidsbemid-deling en Beroepsopleiding), Mick Riley (Newcastle uponTyne City Council), and Teresa Paskiewicz and MarkStairmand (UMIST).
The URL for the project's web siteis http ://www.mari.
co. uk/tree/.techniques next to natural language processing tosearch job offer databases i not a new application,cf.
(Vega, 1990; Caldwell & Korelsky, 1994).
Butno other application - as far as we can discover -offers the opportunity of searching and of gettingsummaries of job ads in languages other than thatof the original announcement.TREE therefore offers two significant services: in-telligent search and summarization on the one hand,and these independent of the original language ofthe job ad on the other.
It could be argued that thelatter at least could be achieved by hooking a com-mercial Machine Translation (MT) system up to anInternet employment service.
Although MT has hadsome success on the Internet (Flanagan, 1996), thisis with largely sympathetic users who understandwell the limitations of MT.
Its use for a more del-icate task aimed at the general public, especially apublic which is not necessarily highly educated, iscertainly out of the question, for well known rea-sons which we need not explore here.
Suffice to saythat an experiment in Canada using an MT systemfor precisely this application (Murray, 1989) was farfrom successful.It is also apparent hat for many jobs in a loca-tion where a different language is spoken, sufficientlinguistic knowledge at least to read an ad for a jobin that region would be one of the prerequisites ofthe job: this is certainly the case for the kind of pro-fessional positions often advertised on the Internet.Nevertheless, our system offers users the possibilityof searching in their own language for jobs advertisedin a variety of languages.
Also, there is a significantworkforce for which foreign-language skills are not aprerequisite for working abroad, and which, further-more, has traditionally been one of the most mobile:seasonal semi- and unskilled workers.
For this rea-son, the domain we have chosen for the prototypedevelopment of the TREE project is the hotel andcatering industry.2692 Overa l l  des ignThe TREE system stores job ads in a partlylanguage-independent schematic form, and is ac-cessed by job-seeking users who can specify a num-ber of parameters which are used to search the jobdatabase, and who can also customize the way theinformation retrieved is presented to them.
A sec-ond type of user is the potential employer who pro-vides job announcements to the system in the formof free text via an e-mail feed or, it is planned, viaa form-filling interface (though we shall not discussthis latter input mode here).The initial prototype system currently imple-mented can store and retrieve job ads in three lan-guages - English, Flemish and French - regardless ofwhich of these three languages the job was originallydrafted in.The system has four key components which arethe subject of this paper.
Telematics, HCI and cer-tain other issues such as maintenance of the system(deleting old ads, user training, legality of texts indifferent countries) and the information retrieval as-pects of the system will not be discussed in this pa-per.The four components which we discuss here are:(a) the schema data structure for storing the jobads, and the associated terminological and lexicaldatabases; (b) the analysis module for convertingjob ads received into their schematic form; (c) thequery interface to allow users to specify the rangeof job ads they wish to retrieve; and (d) the gener-ator, which creates a customised selective summaryof the job ads retrieved in HTML format.
To a greatextent, the design of each of these modules is not es-pecially innovative.
However, the integration of allthese functions is, from a methodological point ofview, a good example of how a variety of techniquescan be combined into a real application with a realuse in the real world.3 Data  S t ructures3.1 Job ad representation schemaJob ads are stored in the system in a "schema",which is a typed feature structure consisting ofnamed slots and fillers.
The slots, some of whichhave a simple internal structure of their own, iden-tify elements of the job ad.
Many, though not allof the slots can be specified as part of the search,and all of them can be generated as part of the jobsummary.The fillers for the slots may becoded language-independent references to the ter-minological database, source-language strings whichcan nevertheless be translated on demand with ref-erence to the "lexicon", or literal strings which willnot be translated at all.
The stylised partial exampleof a filled schema in Figure 1 gives an impression ofthe data structure.
The distinction between termsand items in the lexicon is discussed below, but weconsider first the design and implementation of theschema database.Figure 1: A partial example of a filled job schema.Slot names are shown in CAPITALS, fillers in quote marksare stored as strings; other fillers are coded.JOB: wa i te r  JOBCODE: 92563NUMBER_OF_JOBS: severa lLOCATION: "Urmston" WORKTIME: 2SKILLS:EXPERIENCE:essentialAPPLICATION:PHONE: 224 8619CONTACT NAME: "Andrea"ORIGINAL_TEXT: "Urgent!!!
P/T Waitersrequired, Urmston area.
Experienceessential.
Phone Andrea on 224 8619.
"The main aim of the schema is to represent ina consistent way the information which the anal-ysis module extracts from the job ads, which thequery module searches, and from which the genera-tion module produces text.
Note that the exampleshown in Figure 1 is rather simplified for the pur-poses of illustration.
The schema module providesa database of job schema instances (Onyshkevych,1990).
The analysis and design phases were con-ducted using the OMT (Rumbaugh, 1990) object-oriented methodology.
Since the system currentlytreats three languages (with the prospect of exten-sion to more), we decided to codify in a language-neutral fashion the information extracted from theads, converting equivalent linguistic terms into codesand vice versa via the analysis and generation mod-ules described below.3.2 Termino logyThe terminology module has been designed with thegeneral aim of supporting all the common function-alities shared by the analysis, generation and querymodules and of supporting a language-independentterm bank to permit multilingual handling of theschema database contents.
We have focused ondomain-specific terms and classifications, not cover-ing generic language issues nor providing a generallexicon and thesaurus.Different kinds of domain-specific information canbe found as slot fillers, depending on the intendedmeaning of schema slots.
The most relevant infor-mation is obviously job types.
Existing job classifi-cations have been established for example by the Eu-ropean Commission's Employment Service (EU RES,1989), by the ILO (ILO, 1990) and several individ-ual companies; each provides a hierarchical classifi-cation of jobs, specifying, for each term, a distinctcode, a description of the job, one or more generic270terms commonly used to refer to the specific job, andpossibly a set of synonyms.
The description of thejob ranges, depending on the classification, from aquite broad one to greatly detailed ones, sometimeshighlighting differences existing in different coun-tries (e.g.
according to the EURES classification,a "waiter" in some EU states is also required to actas a barman while in others is not).
Job classifica-tions therefore provide at least three different kindsof information:?
Definition of recognized job types, with a (moreor less) precise definition of what the job is; chefis a recognized item, as well as pizza chef, whilechef specializing in preparing hors d'oeuvres isnot; classifications are obviously arbitrary aslong the boundary between whether a specificjob is a recognized one or simply an "unrecog-nized" classification simply depends on the levelof granularity the classifier decides to use.
* Classification of job types along Is.,, hierarchies(e.g.
a wine waiter IS), type of waiter).
* Linguistic information about commonly usedterms and synonyms used in a given language(or more than one) to refer to the specific term.Accordingly, job classification terms are classified,coded (i.e.
a distinct code identifying the term isassociated with each term) and a list of standard"names" as well as recognized synonyms is asso-ciated with them.
The classification and codingschema of VDAB, one of the end-user partners inthe project, is used, but extensions deriving fromother schema could obviously be envisaged.
Trans-lation tables are provided for each term, containingthe names used in the different languages.
Align-ments across different languages are kept wheneverpossible.
Problems due to missing equivalent termsin different languages, or to slightly different mean-ings, are handled, at least in the first stage, simplyby providing terms nearer in meaning.
An exampleof some job titles is shown in Figure 2: the hier-archical nature of the titles, and also the existenceof some synonyms, is suggested by the numberingscheme, and is more or less self-explanatory.Figure 2: Examples of job codes and names inFrench, Flemish and English.91200 cuisinier # kok # cook91202 chef # chef # chef91205 chef de cuisine # ehef-kok # chief cook91236 cuisinier de regime # dieetkok # diet cook91237 cuisinier de cantine # kok grootkeuken # canteen cook91241 commis de cuisine # keukenhulp # kitchen assistant91241 commis de cuisine # keukenpersoneel # kitchen staff91241 commis de cuisine # keukenhulp # catering assistant91241 aide-cuisinier # hulpkok # assistant cook91260 second cuisinier # hulpkok # second chefCodes are used as slot fillers in the schema271database.
This makes the schema neutral with re-spect to analysis, query and generation languages.For example, when searching for a job, the classifica-tion hierarchies inherent in the terminology databaseallow the user to express general search constraints(e.g.
looking for a job as a chef), even though indi-vidual jobs are coded for specific types of chef (pas-trycook, pizza chef etc., and of course in differentlanguages (e.g.
Bakkersgast).Although the job titles themselves provide an ob-vious area of terminology, we handle various otherareas of vocabulary in a similar way.
There are twocriteria for "terminological status" in our system, ei-ther of which is sufficient: (i) hierarchical structure,and (ii) standardization.
An example of "standard-ized vocabulary" in our domain is words like full-time, part-time, which have an agreed meaning, oradjectives like essential as applied to requirementssuch as experience, or a driving licence.
Of moreinterest perhaps is vocabulary which can be struc-tured, since this provides us with an opportunity toallow more sophisticated searching of the database.One example is types of establishment, e.g.
ho-tel, restaurant, cafe, pub etc.
Although such termsdo not necessarily figure in recognized terminolog-ical thesauri, it is obvious that some structure canbe imposed on these terms, for example to enablea user who is looking for a job in an eating estab-lishment to be presented with jobs in a variety ofsuch places.
Some hierarchies are trivially simple,for example full-time/part-time.
A more interest-ing example is geographical location.
Most job adsexpress the location of the work either explicitly orimplicitly in the contact address.
But often, these lo-cations are the names of towns or districts, whereasa user might want to search for jobs in a wider area:a user looking for work in Flanders, for example,should be presented with jobs whose location is iden-tified as Antwerp.
This is not as simple as it seemshowever, since the kind of "knowledge" implicatedin this kind of search facility is (literally!)
"real-world knowledge" rather than linguistic knowledge:short of coding an entire gazeteer on the off-chancethat some place-name appeared in a job ad, we mustrather rely on the user trials envisaged later in ourproject to identify the extent to which geographicalinformation eeds to be included in the system.3.3 Lex iconNot all the vocabulary that the system needs to rec-ognize and handle can be structured in the way justdescribed, so we recognize a second type of lexicalresource which, for want of a better term, we callsimply "the lexicon".
These are words which we of-ten find in job ads, associated with specific slots,which we would like to translate if possible, butwhich do not have the status of terms, since theyare neither structured nor standardized.
Examplesare adjectives used to describe suitable applicants(e.g.
young, energetic, experienced), phrases describ-ing the location (e.g.
busy, near the seaside) or theemployer (e.g.
world-famous) and so on.Job ads that appear in newspapers and journalscan be roughly classified according to their length(short, medium, long) with slightly different lex-ieal and syntactic features accordingly (Alexa &B?rcena, 1992), the details of which need not con-cern us here.
Some of the phrases found in typi-cal job ads serve to signal specific slots (e.g.
EM-PLOYER:NAME is seeking JOB-TITLE), but these lin-guistic items do not appear in the lexicon as such.Such elements are regarded as being properly partof the analysis and generation modules, and we de-scribe below how they are handled there.4 Ana lys i sThe system design permits users offering jobs to sub-mit via an e-mail feed job ads more or less withoutrestrictions.
The system converts these texts as faras possible into schematic representations which arethen stored in the jobs database.
The analysis tech-nique that we have chosen to implement falls intothe relatively new paradigm of analogy- or example-based processing.
In the following paragraphs we ex-plain the analysis process and discuss our reasons forpreferring this over a more traditional string match-ing or parsing approach.The input that the TREE system will accept ispartially structured, but with much scope for free-text input.
One possible way of analysing this wouldbe to employ a straightforward pattern-matching ap-proach, searching for "trigger phrases" such as EM-PLOYER:NAME iS seeking JOB-TITLE, with specialprocessors for analysing the slot-filler portions of thetext.
This simple approach as certain advantagesover a more complex approach based on traditionalphrase-structure parsing, especially since we are notparticularly interested in phrase-structure as such.Furthermore, there is a clear requirement that ouranalysis technique be quite robust: since the inputis not controlled in any way, our analysis proceduremust be able to extract as much information as pos-sible from the text, but seamlessly ignore - or atleast allocate to the appropriate "unanalysable in-put" slot - the text which it cannot interpret.However, both these procedures can be identifiedas essentially "rule-based", in the sense that linguis-tic data used to match, whether fixed patterns orsyntactic rules, must be explicitly listed in a kind ofgrammar, which implies a number of disadvantages,which we will mention shortly.
An alternative is sug-gested by the paradigm of "example-based" process-ing (Jones, 1996), now becoming quite prevalent inMT (Sumita et al, 1990; Somers, 1993), though infact the techniques are very much like those of thelonger established paradigm of case-based reasoning.2724.1 A f lexible approachIn the example-based approach, the "patterns" arelisted in the form of model examples.
Semi-fixedphrases are not identified as such, nor are there anyexplicit linguistic rules.
Instead, a matcher matchesnew input against a database of already (correctly)analysed models, and interprets the new input onthe basis of a best match (possibly out of severalcandidates); robustness is inherent in the system,since "failure" to analyse is relative.The main advantage of the example-based ap-proach is that we do not need to decide beforehandwhat the linguistic patterns look like.
To see howthis works to our advantage, consider the following.Let us assume that our database of already analysedexamples contains an ad which includes the follow-ing: Knowledge of Dutch an advantage, and whichis linked to a schema with slots filled roughly as fol-lows:SKILLS  : LANGUAGE : LANG : nlSK ILLS  : LANGUAGE: KEQ : "an advantage"Now suppose we want to process ads containing thefollowing texts:Knowledge of the English language needed.
(1)Some knowledge of Spanish would be helpful.
(2)Very good knowledge of English.
(3)In the rule-based approach, we would probably haveto have a "rule" which specifies the range of (redun-dant) modifiers (asuming our schema does not storeexplicitly the level of language skill specified), thatfillers for the REQ slots can be a past-participle, apredicative adjective or a noun, and are optional,and so on.
Such rules carry with them a lot of bag-gage, such as optional elements, alternatives, restric-tions and so on.
The biggest baggage is that some-one has to write them.In the example-based approach, we do not need tobe explicit about the structure of the stored exampleor the inputs.
We need to recognize Dutch, Englishand Spanish as being names of languages, but thesewords have "terminological status" in our system.If the system does not know would be helpful, it willguess that it is a clarification of the language re-quirement, even if it may not be able to translateit.
Furthermore, we can extend the "knowledge" ofthe system simply by adding more examples: if theycontain "new" structures, the knowledge base is ex-tended; if they mirror existing examples, the systemstill benefits ince the evidence for one interpretationor another is thereby strengthened.4.2 The  match ing  a lgor i thmThe matcher, which has been developed from onefirst used in the MEG project (Somerset al, 1994),processes the new text in a linear fashion, havingfirst divided it into manageable portions, on the ba-sis of punctuation, lay-out, formatting and so on.The input is tagged, using a standard tagger, e.g.
(Brill, 1992).
There is no need to train the taggeron our text type, because the actual tags do notmatter, as long as tagging is consistent.The matching process then involves "sliding" onephrase past the other, identifying "strong" matches(word and tag) or "weak" (tag only) matches, andallowing for gaps in the match, in a method not un-like dynamic programming.
The matches are thenscored accordingly.
The result is a set of possiblematches linked to correctly filled schemas, so thateven previously unseen words can normally be cor-rectly assigned to the appropriate slot.The approach is not without its problems.
Forexample, some slots and their fillers can be quiteambiguous: cf.
moderate German required vs. tallGerman required (!
), while other text portions ervea dual purpose, for example when the name of theemployer also indicates the location.
However, thepossibility of on-line or e-mail feedback to the usersubmitting the job ad, plus the fact that the matcheris extremely flexible, means that the analysis modulecan degrade gracefully in the face of such problems.5 Query  eng ineThe query engine takes users' specifications of theiremployment interests to identify those job ads heldin the database that match their specification.
In-put is provided from an HTML form consisting ofa number of fields which correspond to job-schemaobject attributes (e.g.
job-title, location etc.).
Dataentered for any given object attribute is then en-coded in the same format used to encode job ad in-formation.
Since both (searchable) job ad informa-tion and query data are represented in a language-independent format, matches will be made regard-less of the language in which the data was entered.Symbolic case-based reasoning techniques areused to quantify the extent to which users' queriesmatch database objects, allowing the "ranking" ofquery results.5.1 Encoding dataInput entered by the user must be encoded usingthe same method adopted by the analysis module.There are two means by which this can be achieved.One method is to restrict the options available tothe user for any given field to a number of possi-ble values for a given object attribute (i.e.
providethe user with a Boolean choice).
The alternative isto allow users to enter a string which is passed tothe terminology module to retrieve the appropriatecode.
If the string does not return a code, it is con-sidered invalid and the user is requested to enter analternative.5.2 Applying case-based reasoningUser-entered information is used to construct a job-schema object which can be considered as the user's"ideal" job.
Symbolic case-based reasoning tech-niques are then applied to quantify the differencebetween the user's ideal job and jobs held within thedatabase in order to identify those jobs most closelyresembling the user's ideal job.The purpose of using case-based reasoning tech-niques is to quantify the difference (as a metricvalue) between any two instances of a job-schemaobject.
That object must be capable of being de-fined by one or more parameters, with the furtherrequirement that comparison operations upon anytwo parameter values must yield a numeric value re-flecting the semantic difference between the values.Thus, objects can be seen as being located within ann-dimensional parameter space where n is the num-ber of defining parameters of the object.The parameters which are used to define job adsfor TREE are given by the job schema definition,described above.
The distance between two valuesfor a specific parameter will be dependent upon themethod of encoding but any distance function ~ for agiven parameter must define the geometric distancebetween its two arguments (Salzberg & Cost, 1993).That is: a value must have a distance of zero to it-self (4), a positive distance to all other values (5),distances must be symmetric (6) and must obey thetriangle inequality (7).
A further proviso is addedthat the maximum difference between any two pa-rameter values must be 1, which ensures that all pa-rameters have an equivalent maximal difference (8).6(a, a) -= 0 (4)~(a,b) > 0 i fa# b (5)~(a, b) --- ~(b, a) (6)~(a, b) -4- ~(b, c) > ~(a, c) (7)~(a, b) < 1 (8)For example, a distance function for the job-title pa-rameter (as represented by job-title codes illustratedin Figure 2) could be given by (9),6(a, b) - f( la - bl) (9)nwhere a and b are job codes, f (x )  returns the numberof digits of its argument, and n is the number ofdigits in the job codes (i.e.
n = 5).
6(a, b) evaluatesto 1 if the job code arguments differ on the firstdigit, 0.8 if they differ on the second digit and soon.
The job codes are hierarchically ordered so job-title codes that differ over the first digit will refer togreatly different jobs.
As such we can see that thisparameter distance function would reflect common-sense judgements on the associated job-titles.The total distance between any two job instancesis simply a measure of the distances between indi-273vidual parameter distances and is given by (10),NA(A, B) = Z ~i(ai, b,) (10)i=1where A is the instance distance function, ~i is thedistance function for parameter i, N is the totalnumber of parameters by which A and B are de-fined, and ai and bl are the values of parameter i forinstances A and B respectively.Equation (10) provides a measure of the total dis-tance between two instances by summing the dis-tances between all the constituent parameters.
Us-ing (10) and a set of parameter distance functionsthat conform to the properties given as (4)-(8), it ispossible to quantify the difference between any job-schema instance held in the database and the "ideal"job-schema object specified by the user.
Those pa-rameters for which no value has been specified willexactly match every possible parameter value, andas such the database search is only constrained bythose values which users enter.Since information on job ads is represented in alanguage-independent format, a search profile in onelanguage will retrieve job ad information entered inany of languages upported.
Database queries areconducted by matching the "ideal" job as specifiedby the user against job-schemas held in the database.The matching process yields a numeric result repre-senting the "distance" between two objects.
Identi-fied jobs can then be ranked according to how closelythey resemble the user's ideal job.
The results of adatabase query are then fed to the generation mod-ule for subsequent presentation i the language spec-ified by the user.Future plans include increasing the number offields over which the search can be conducted andpermitting users to specify the relative importanceof each parameter to the search.
The query interfacewill also keep a record of user "profiles", so that reg-ular users can repeat a previous earch the next timethey use the system.6 Generat ionThe purpose of the TREE generator module is togenerate HTML documents in different languagesfrom job database ntries (i.e.
filled or partiallyfilled schemas), on demand.
For several reasons,the approach to generation adopted in the TREEsystem can be termed "integrated".
First, it inte-grates canned text, templates, and grammar ulesinto a single grammar formalism.
Second, it inte-grates conditions on the database with other cat-egories in the bodies of grammar ules.
Third, itintegrates the generation of sentences and the gen-eration of texts and hypertexts in a simple, seamlessway.
Finally, generation involves just one single, ef-ficient process which is integrated in the sense thatno intermediate structures are created during pro-cessing.6.1 Formal i smIn our integrated approach to generation, a grammarrule has the format (11),Co~So ) SS1 .
.
.
.
, SSn ~: Conditions (11)where each SSI has the format Ci, the format CJS i ,or the format \[W1,...,W,~\].
Here, C/ denotes a syn-tactic category, Si denotes a semantic value, and W/a word.
The slash symbol "/" is used to separate thesyntax from the semantics.
The symbol "~" sepa-rates the grammar body from a set of conditions onthe database.
If the set of conditions is empty, thesymbol "~",  and what follows it, may simply beomitted.6.2 Canned text ,  templates ,  or  g rammar?Suppose a system "knows" something, on which wewant it to report; suppose it knows that both theCafe Citrus and the Red Herring Restaurant wantto hire chefs, facts which could be captured by thefollowing (logical interface to the) job database:i t  em (e I ,xl ,y l ) .job(yl, 91202).company(xl, 'Care Citrus ' ).item(e2,x2,y2).job (y2,91202).company (x2, 'Red Herring Rest aurant ' ).We can imagine setting up our system in such a waythat when the system sees facts of this kind, a rulesuch as the following-s/E -->\['Care Citrus' ,advertises,as,vacant,a,posit ion, as, chef\] #{item (E, X, Y), job (Y, 91202),company (X, ' Care Citrus ' ) },- will be triggered, and the system will produce thesentence Care Citrus adverlises as vacant a positionas chef.
This is a canned-text approach.
It is triv-ial to implement, but the disadvantage is, of course,that we would have to store one rule for each utter-ance that we would like our system to produce.As soon as a sentence must be produced severaltimes with only slight alterations, a template-basedapproach is more appropriate.
Let us modify theabove rule as follows:s/E -->pnlX'name (X, C),\[advert ises, as, vacant, a,position, as, chef\]# {item(E,X,Y) ,job(Y,91202),company (X, C) }.The following rule is needed to tell the system thatit is allowed to realize the value of the feature<company> as the value itself (i.e.
the value is thename of the company).274pn/X'name (X,Name) --> \[Name\].Thus, here too, given the above job database ntry,the sentence Cafe Citrus advertises as vacant a po-sition as chef can be generated.
Furthermore, RedHerring Restaurant advertises as vacant a positionas chef can be generated as well.It is not hard to see that the two rules above formthe beginning of a grammar.
Such a grammar maybe further elaborated as follows:s/E --> np/X, vp/X'E'A # {A}.np/X --> pn/X'A # {A}.np/X --> n/X'A # {A}.vp/A --> v/X'A, np/X.pn/X'company (X,Name) --> \[Name\] .n/X'job(X,91202) --> \[chef\].v/Y'X'E" item (E, X, Y) -->\[advertises ,as ,vacant, a,position,as\].Now, the above sentences, plus many othersentences, may be generated, given appropriatedatabase ntries.Our approach is based on the idea that canned-text approaches, template-based approaches andgrammar-based approaches to natural anguage gen-eration - while they are often contrasted - may infact be regarded as different points on a scale, fromthe very specific to the very general.
In a sense, tem-plates are just generalized canned texts, and gram-mars are just generalized templates.
Indeed, the pos-sibility of combining these different modes of gener-ation has recently been highlighted as one of thekeys to efficient use of natural language generationtechniques in practical applications (van Noord &Neumann, 1996; Busemann, 1996).6.3 ProcessingLet us now indicate how the rules are meant to beused by the generator module.
Traditionally, theprocess of generation is divided into two steps: gen-eration of message structure from database records(what to say), and generation of sentences from mes-sage structures (how to say it).
One way of charac-terizing the integrated approacfi to generation is tosay that we go from database records to sentencesin just one step.
The process of computing whatto say, and the process of computing how to say it,are, in the general case, interleaved processes.
Theprocess of generating from a set of grammar ules,given a particular job database ntry, will simply in-volve picking the rules the conditions of which (best)match the entry, and using them to generate a doc-ument.6.4 Generating hypertextThe TREE system provides its output in the formof hyper~ext.
This approach as several advantages:first, as argued by (Reiter & Meltish, 1993), the gen-eration of hypertext can obviate the need to performhigh-level text structuring, such as assembling para-graphs into documents.
"The basic idea is to use hy-pertext mechanisms to enable users to dynamicallyselect the paragraphs they wish to read, and there-fore in essence perform their own high-level text-planning" (P~eiter & Mellish, 1993), p.3.
Second,but related to the first point, the hypertext capabil-ities are also a mild form of tailoring to the needs ofdifferent users.
Users are expected to explore onlylinks containing information that they need.Hypertext is generated by means of rules thatare very similar to the grammar rules describedabove, but are formulated on a meta-level with re-spect to sentence/text rules.
HTML code "wrap-pers" can be simply generated around the text.
Itis fairly straightforward to extend the grammar toother HTML constructions, uch as headers, styles,lists, and tables.
Using such rules in combinationwith other rules enables us to produce simple HTMLdocuments, or, if required, quite complex and deeplynested documents incorporating links to other ads,or buttons to expand information, or clarify termi-nology (e.g.
to get a definition of an unfamiliar job-title).7 Conc lus ionThe European Union is a loose geo-political organi-zation that has eleven official languages.
As such, itis clear that even in a restricted omain such as thatof job ads, novel approaches to Language Engineer-ing are required.In this paper we have described an approach thatsummarizes ads into a base schema, and then gener-ates output in the desired language in a principled,though restricted way.
At first glance, this may looklike old-fashioned interlingual MT, but there are twoimportant differences.
First, our approach is inher-ently "lossy", in that not all the information in theinput ad may be analysed into the schema.
It cannotconsequently be included in the generated output.Second, the format of the output can be controlledand customised by the user which means again thatthe output text is a summary or digest, not nec-essarily presented in the same order as the originaltext.
For both these reasons, our system cannot bedescibed as a "translation system".
Nonetheless webelieve this approach is capable of giving consider-able coverage at a far lower cost and higher qualitythan that usually associated with MT.Our approach is not without some disadvantageshowever: it is well known that a considerable quan-tity of the semantics of human language is culturallyand socially determined.
Thus, even though one canmap the names of job categories from one languageto another, it is not necessarily true that they meanthe same thing.
So for example, waiters in Spain areexpected to serve snacks, whereas in Belgium theydo not.
There is of course no easy solution to these275problems from the Language Engineering point ofview: our service must simply advise users to checkthat the job description i  the target country corre-sponds to their understanding.Legal constraints are also a significant issue in thearea of job advertising.
Thus, whilst most coun-tries in the EU have legislation to prevent race andsex discrimination i job advertising, some do not.Thus a Spanish bar can (or could until recently) ad-vertise for Pretty girls wanted as bar staff, and Menwanted to work in the kitchen.
This type of discrim-ination is illegal in the UK where it would violateSex Equality Legislation.
Thus we must generatenon-discriminatory text to avoid running foul of UKlaw.
This clearly shows how practical applicationsof Language Engineering have to conform in unfore-seen ways to the real world.Our future work will continue to extend the prag-matic approach taken so far.
In particular, we arebeing encouraged tobroaden the coverage of our sys-tem to include many more employment domains.
Itremains to be seen what are the consequences ofthisscaling on what has so far proved to be a simple buteffective architecture.ReferencesAlexa, Melpomeni & Elena B~rcena.
1992.
A cross-linguistic study of the sublanguage of short jobadvertisements for the design of a multilingualtext generation system (MEG).
CCL/UMIST Re-port 92/8, Centre for Computational Linguistics,UMIST, Manchester.Brill, Eric.
1992.
A simple rule-based part of speechtagger.
In Third Conference on Applied NaturalLanguage Processing, Trento, Italy, pp.
153-5.Busemann, Stephan.
1996.
Best-first sur-face realization.
Computation and Lan-guage E-Print Archive cmp-lg/9605010.
URLhttp ://xxx.
lanl.
gov/cmp-lg/.Caldwell, David E. & Tatiana Korelsky.
1994.
Bilin-gual generation of job descriptions from quais-conceptual forms.
In Fourth Conference onApplied Natural Language Processing, Stuttgart,Germany, pp.
1-6.EURES.
1989.
Communication f the comparisonof vocational training qualifications between mem-ber states established in implementation f Com-mission Decision 85/368/EEC of 16th July 1985:Hotel and Catering Industry.
Official Journal ofthe European Communities 32, C166, 3 July 1989,pp.
1-56.Flanagan, Mary.
1996.
Two years online: experi-ences, challenges and trends.
In Expanding MTHorizons: Proceedings of the Second Conferenceof the Association for Machine Translation in theAmericas, Montreal, Canada, pp.
192-7.276ILO.
1990. International Standard Classificationof Occupations: ISC0-88, International LabourOffice, Geneva.Jones, Daniel.
1996.
Analogical Natural LanguageProcessing, UCL Press, London.Murray, Pamela.
1989.
A review of MT policyand current commercial systems in Canada witha view to illustrating the importance of sublan-guages in successful MT application.
MSc disser-tation, UMIST, Manchester.Onyshkevych, Boyan.
1993.
Template Design forInformation Extraction.
In Proceedings of theFifth Message Understanding Conference (MUC-5), Baltimore, Md., pp.
19-23.Reiter, Ehud & Chris Mellish 1993.
Optimis-ing the costs and benefits of natural languagegeneration.
In Proceedings of the 13th Interna-tional Joint Conference on Artificial Intelligence,Chamb@ry, France, pp.
1164-71.Rumbaugh, James.
1995.
OMT: the Object Model.Journal of Object-Oriented Programming, 7.8:21-7.Salzberg, Steven & Scott Cost.
1993.
A weightednearest neighbour algoritm for learning with sym-bolic features.
Machine Learning 10:57-78.Somers, Harold L. 1993.
La traduction automatiquebas@e sur l'exemple ou sur les corpus.
In La tra-duclique: Etudes el recherches de traduclion parordinateur, Pierrette Bouillon & Andr@ Clas (eds),Les Presses de l'Universit~ de Montreal, pp.
149-66.Somers, Harold L., Ian McLean & Daniel Jones.1994.
Experiments in multilingual example-basedgeneration.
In CSNLP 1994: 3rd Conference onthe Cognitive Science of Natural Language Pro-cessing, Dublin, Ireland.Sumita, Eiichiro, Hitoshi Iida & Hideo Kameyama.1990.
Translating with examples: a new approachto Machine Translation.
In The Third Interna-tional Conference on Theoretical and Methodolog-ical Issues in Machine Translation of Natural Lan-guage, Austin, Texas, pp.
203-12.van Noord, Gertjan & Giinter Neumann.
1996.
Syn-tactic generation.
In Survey of the State of the Artin Human Language Technology (Ronald A. Cole,general ed.
), Chapter 4 (Hans Uszkoreit, ed.
).Available at http://www, cse.ogi ,  edu/CSLU/HLTsurvey/ch4node4.html#SECTION42.
To bepublished by Cambridge University Press.Vega, Jos@.
1990.
Semantic matching between joboffers and job search requests.
In COLING-90:Papers presented to the 13th International Confer-ence on Computational Linguistics, Helsinki, Fin-land, Vol.1 pp.
67-9.
