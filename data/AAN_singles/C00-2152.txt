An Integrated Architecture for Example-Based Machine TranslationAlexander Franz, Keiko Horiguchi, Lei Duan,Doris Ecker, Eugene Koontz, and Kazami UchidaSpoken Language Technology, Sony US Research Labs3300 Zanker P, oadSan Jose, CA 95134, USA{ amf, kei ko, l ei, do ri s,eko ntz, kuchid a } @ sit.
sel.
so ny.comAbstractThis paper describes a machine translationarchitecture that integrates the use el'examples for flexible, idiomatic translationswith the use o1' linguistic rules for broadcoverage and grammatical acctu'acy.
Wehave implemented a prototype forEnglish-to-Japanese translation, and ourewfluation shows lhat tile system has goodtranslation quality, and only requiresreasonable computational resources.1 IntroductionMachine translation by analogy lo pairs ofcorresponding expressions in the source andtarget languages, or "example-based transhtlion",was firs!
proposed by (Nagao 1984).
Recentwork in the example-based I'ramework inchldesmemory-based translation (Sate & Nagao 1990),similarity-driven translation (Watanabe 1992),transl'cr-driven lachine translation (Furusc &Iida 1996), and patten>based machinetranslation (Watanabe & Takeda 1998).The example-based approach promises easytranslation knowledge acquisition, more flexibletransfer than brittle rule-based approaches, andidiomatic translations.
At the same time, the useo1' linguistic rules offers a number of importantbenel'its.
Detailed linguistic analysis can allowan example-based machine translation system tohandle a wide variety of input, since rules can beused to factor out all linguistic wMations that donot influence tile exampled)ased transfer.Rule-based language generation from detailedlinguistic representations can lead to highergrammatical output quality.
Finally, a modularsystem architecture that usesdomain-independent linguistic regularities inseparate linguistic modules allows extending thesystem to much broader domains.
TheHARMONY architecture for lkybrid Analogicalaud rule-based njachine translation of naturally_occurring colloquial hmguagc combines theadwmtages of both these approaches.2 The Travel DomainOur prototype implementation o1' the HARMONYarchitecture was designed to cover the "traveldomain".
This is composed of words, phrases,expressions, and sentences related tointernational travel, similar to what is coveredby typical travel phrase books.Two principles guided our detailed definition ofthe translation domain.
FirsL the translationdomain should not be limited to a narrowsub-domain, such as appointment scheduling orhotel rcscrwttions.
Second, the expressionsconsidered in the domain should reflect the factthat people quickly adapt to limitations inhuman-machiue or machine-mediatedcommunication by simplifying the input.
Forexample, (Sugaya et al 1999) found that theaverage length el' actual human utterances in ahotel resmwation task using speech translationwas only 6.1 words, much shorter than some o1'the data that has been used in previous work onspeech translation.
'File current vocabulary o1' 7,500 woMs isdivided into a group o1' general words, a numberof extensiblc word groups (such as names el'food items or diseases), and a number ofarea-specific woM groups (such as names ofcities or tourist destinations).The travel domainis divided into eight "situations": A generalsituation (including everyday conversation);transportation; accommodation; sightseeing;1031shopping; wining, dining, and nightlife; bankingand postal; and doctor and pharmacy.We created a corpus for this dolnain, anddivided it into a development set o1' 7,000expressions, and a separate, unseen test set of5,000 expressions.
The development set isused for creation and refinelnent of thetranslation knowledge sources, and the test set isonly used for evaluations.
(Each evaluationuses a new, random 500-word sample from the5,000 word test set.
)The corpus was balanced to illustrate the widestpossible variety of types o1' words, phrases,syntactic structures, semantic patterns, andpragmatic functions.
The average length el' theexpressions in the corpus is 6.5 words.
Someexamples from the development corpus areshown below.
Even though this dolnain mightseem rather limited, it still contains inanychallenges for machine translation.?
Can I have your last name, please ??
Is this the bus for  Shinagawa station ??
1 would like to make a reservation for twopeople for eight nights.?
Can you tell us where we can see someBuddhist emples ??
Most supermarkets sell liquor.?
Can you recommend a good Chineserestaurant in this area ??
I 'd like to change 500 Dollars' in traveller'schecks into Yen.?
Are there any English..speaking doctolw atthe hospital?3 NLP InfrastructureThe prototype implementation is coustructed outof components that are based on a powerfulinfrastructure for natural language processingand language engineering.
The three inainaspects of this infrastructure are the GrammarProgramming Language (GPL), the GPLcompiler, and the GPL runtime environment.3.1 The Grammar Programming LanguageThe Gralnmar Programming Language (GPL) isan imperative programming language forfeature-structure-based rewrite grammars.
GPLis a l'ormalism that allows the direct expressionof linguistic algorithms l'or parsing, transfer, andgeneration.
Some ideas in GPL can be tracedback to Tolnita's pseudo-unification fornmlisln(Tomita 1988), and to Lexical-FunctionalGrammar (Dalrymple et al 1995).
GPLincludes variables, simple and complex tests,and various manipulation operators.
GPL alsoincludes control flow statements includingif-then-else, switch, iteration oversub-feature-structures, and other features.
Anexample of a silnplified GPL rule for Englishgeneration is shown in Figure 1.Wll SENT --) NP YN_SENT {!exist\[Sin VP SUBJ WH\];local-variable WIt_VP = \[$m VP\];local-wlriable WH PHP, ASE;$WH PHRASE = find-subfstruct in $WHVPwhere (?exist\[$x WH\]);$d I = \[$WH_PHRASE SLOT-VALUE\];\[$WH PHRASE SLOT-VALUE TRACE\] = '+';$d2 = $m;/Figure I Example of a GPLGeneration P, ule3.2 The GPL CompilerGPL grammars are compiled into C code by theGPL compiler.
The GPL compiler was createdusing the Unix tools lex and yacc (Levine et al1990).
For each rewrite rule, the GPL compilercreates a main action function, which carries outmost of the tests and manipulatious specified bythe GPL statements.The GPL compiler handles disiunctive featurestructures in an efficient manner by keepingtrack of sub-feature-structure references withineach GPL rule, and by generating an expansionfunction that is called once before the actionfunction.
The coinpiler also tracks variablereferences, and generates and tracks separate testfunctions for nested test expressions.3.3 The GPL Run-time EnvironmentThe result of compiling a GPL grainmar is anencapsulated object that can be accessed via apublic interface function.
This interface fnnctionserves as the link between the compiled GPLgrammars, and the variouslanguage-independent a d domain-independentsoftware ngines for parsing, transfer, generation,and others.
This is illustrated in Figure 2.1032GI)I+ Grammar J Feature Slructure \]l)cfinitions.,...----GI)L Compiler \]1hllcrface FunctionAclion leunctionsl?xpansion FunclionsTest FtmctionsCompiled GI)L GrammarSoftware Engine(parsers, Iransfers,gellcrators, ...)I"7Feature Structtlre LibraryP, el)resentaiionTesting codeManipulalion codeMemory Management) Figure 2 GI L Run-time EnvironmenlThe compiled GPI.
grammars use the featurestructure library, which provides services forefficiently representing, testing, manipulating,and managing memory for feature structures.
Aspecial-purpose inemory manager maintainsseparate stacks of memory pages for each objectsize.
This scheme allows garbage colleclionthat is so fast that it can be performed after everyaUempted GPL rule execution.
In ourexperiments with Japanese and English parsing,we found that l)el'-rule garbage collectionreduced the overall read/write memoryrequirements by as much as a factor of four tosix.4 Source Language AnalysisTranslation is divided into the steps ot' analysis,transfer, and generation.
Sourcc-hmguageanalysis is illustrated in Figure 3.English analysis begins with tokenization andmorphological analysis, which creates a latticethat contains lexical feature structures.
I)uringmulti-word matching, expressions from tilemulti-word lexicon (such as White House or takeon) are detected in the word lattice, and new arcswith the appropriate l xical feature structures areadded.English lnpulMorphological AnalysisI lmtlice with Single-wordgexical l:cature ,qlructures~,Mulli-word Matching~.~ LaHice with Single andMulti-word texical t"eatureStructuresI gexical P, educlion AnlbiguityP.educed l.exical FeatureN \[I'UCI.LII'e LatticeV I'm'singSenlei|lial Fealure SlruclureThesaurusI CompiledEnglishl'arsingGialnnlarFigure 3 Architecture el'the Analysis ModuleLexical ambiguity reduction reduces the nulnberel' arcs in the word lattice.
This module carriesout part-of-speech tagging over the lattice, andreduces the lattice to those lexical featurestructures that arc part of the number of bestpaths that represents tile best speed/accuracytrade-off (currently two).
This calculation isbased on the usual lexical and contextual bigramprobabilities that were estimated from a trainingcorpus, but it also takes into account manualcosts that can be added to lexicon entries, or toindividual part-of-speech bigrams.The resulting reduced lattice with lcxicalsingle-word and multi-word feature structures iparsed using tilt GLR parsing algorithmextended to lattice input (Tomita 1986).
TheEnglish parsing grammar consists of 540 GPLrules.
The output is a sentential feature structurethat represents the input to the transfercomponent.10335 TransferTransfer I?om the source-language sententialfeature structure to the target-language s ntentialfeature structure is accomplished with a hybridrule-based and example-based method.
This isillustrated in Figure 4.I English Scntcntial )Feature Structure\[Compiled l\[Tra,,srer / I \[Database I11.inguistic ~ Examl)le!
I Tra,,.<er ~ Matching\[;iiiiii!iiiiiiiiiiii ...................
......Figure 4 Architecture ofthe Transfer ModuleThe input feature structure is passed to thelinguistic transfer procedure.
This consists of arule-rewriting software ngine that executes thecompiled English-to-Japanese transfer grammar.The transfer grammar consists of 140 GPL rules,and its job is to specify linguistic constraints onexamples, combine multiple examples, transferinformatiou that is beyond the scope of theexample database, and perl'orm various othertransformations.
The overall effect is to broadenthe linguistic coverage, and to raise thegrammatical accuracy far beyond the level of atraditional example-based transfer procedure.The linguistic transfer procedure operates on theinput feature structure in a recursive manner,and it invokes the example matching procedureto find the best translation example for variousparts of the input.
The example matchingprocedure retrieves the best translation examplesfrom the example database, which contains14,000 example pairs ranging from individualwords to entire sentences.
In an ofl'-line step, theexample pairs are parsed, disambiguated, andindexed for corresponding constituents using aTreebanking tool.At each invocation of the example matchingprocedure, linguistic constraints fl'om thetransfer grammar are used to limit the searchspace to appropriate xamples.
In an ol'l'-linestep, these constraints are pre-compiled into acomplex index that allows a preliminary fastmatch.
Examples that survive the fast match arematched and aligned with the input featurestructure (or sub-feature-structure, duringrecursive invocations) using the thesaurus tocalculate word similarity, and using variousother constraints and costs for inserting, deleting,or altering slots and features.
Rather than rely onthe exact distance in the thesaurus to calculatelexical similarity, we use a scheme that is basedon the information content of thesaurus nodes,similar to (Resnik 1995).6 Target-language GenerationThe Japanese target-language f ature structurel'orms the input to the generation module, whichis summarized in Figure 5 below.
This modulealso consists o1' a rule-rewriting software ngine,executing the compiled GPL Japanesegeneration grammar, which consists ol' 200 GPLrules.
The generator uses the Japanese lexicon tocreate the Japanese target-language expression.Feature Slrtlclure CompiledGenerationGranll/larGenerationModuleExpressionFigure 5 Architecture of~.he Generation Module7 Evaluation and ConclusionsWe evaluated the trauslation system using arandom 500-expression sample from the unseentest set (see Section 2 above).
The translatiouswere manually assigned to one of the followingcategories o1' translatiou quality:Failure.
Complete translation failure, due tolack of coverage of a rule-based component.1034Wrong.
A translation that is COlnpletely wrong,or that has major errors in an important part,such as in the main clause.Major  Problem.
A translation that has amissing, extra, or incorrect constituent, such as asubject, object, or adjectival/prepositionalpredicate.Minor Problem.
A translation that l-ms amissing, extra, or incorrect minor part, such asan intensifier, tense, aspect, temporal or locativeadjunct, adverb, adjective or other prenominalmodifier, prepositional phrase, verb conjugationform, adjective form, or required word orconstituent order.Stylistic Problem.
Slylistic problems includeawkward but tolerable word order, incorrectJapanese particles, incorrect idioms, and silnilar.Flawless.
A translation that does not exhibit anyof the above problems is considered flawless.The results of the ewtluation are shown in Table1 below.
Overall, 84% of the translationsconvey the meaning in an acceptable manner.We also ewtluated the computational resourcerequirements of the system.
On a Pentium II1running at 500 MHz, the average translationspeed was 0.44 seconds.
The memoryrequirements are summarized in Table 2 below.Flawless 60%Stylistic Problem 9%Minor F'roblcm 14%Acceptable with OOV 1%Major ProMem 9%Wrong Translation 5%Translation IVailure 3%Table 1 Translalion Quality6MB Read-only Memory lbr Code and DataRead-only Melnory for l)iclionary,Examples, Fast Match Index, etc.Read/Write Memory for Feature SlructuresRead/Write Memory fo," Software EnginesTable 2 Memory l,Iequirements23MB14MB4MBOur plans for further work include extending thesize of the input w)cabulary, and developingmechanisms for closer integration with speechrecognition and speech synthesis components forspeech-to-speech translation.
We are alsoworking on the Japanese-to-English translationdirection, and we plan to report results on this inthe future.AcknowledgementsOur thanks go to Robert Bowen, BenjaminHartwell, Chigusa Inaba, Kaori Shibatani,Hirono Stonelake, and Kazue Watanabe for theirlanguage ngineering elTorts, and to Edward ttofor user interface and application development.ReferencesDalryml)le, M., R.M.
Kaplan, J.T.
Maxwell ll, and A.Zacncn, cds.
(1995) l;ormal Issues inLexical-Functional Grammar.
CSLI Lecture Notes47, Stanford, CA.Furuse, O. and H. Iida (1996) "incrementalIranslation utilizing constituent-I~oundary patlcrns",in Proceedings of COL1NG-96, pages 412-417.Lcvine, J.R., T. Mason, and D. Brown (1990), lex &yacc (Second Editio,), O'Rcillcy and Associates,Sebastopol, CA.Nagao, M. (1984) "A framework of a MachineTranslation between Japanese and English byanalogy principle", in Artificial and tlumattIntelligence, A.
17Jithorn and R. Baneiji (eds.
),North Holland, pages 173--180.Resnik, P. (1995) "Using information content toevalualc semantic similarity in a taxonomy", inProceedings of LICAI-95.Sale, S. and M. Nagao (1990) "Towardmemo,y-based lratlslalioD", ill Proceedings ofCOLING-90, vol.
3, Helsinki, Finhmd, pages247--252.Sugaya, F., T. Takczawam A. Yokoo, and S.Yamamolo (1999) '%rid-to-end ewtlualion inATP,-Matrix", in Proceedings of Fmrospeech-99,Bt, dapest, Hungary, pages 2431--2434.Tomita, M. (1988) The Generalized LRI'ars'eMCompiler (Version 8.1): User's Guide.Technical Memorandum CMU-CMT-88-Memo,Cenler for Machine Translation, Carnegie MellonUniversity.Tonlila, M., "All efficient word lattice parsingalgoritlun for conlinuous peech recognition", illl'roceedings of ICASSP-86, Tokyo, Japan, pages1569-1572.Walanabe, H. (1992) "A similarily-driven transfersystem", in Proceedings of COLING-92, Nantes,France, pages 770-776.Walanabe, H. and K. Takeda (1998) "Apattern-based Machine Translation syslemextended by exanll~le-based processing", inProceedings of ACL-COLING-98, pages1369-1373.1035
