1.
IntroductionINTERPRETING NATURAL LANGUAGE DATABASE UPDATESS.
Jermld KaplanJim David,sonComputer Science Dept.Stanford UniversityStanford, Ca.
94305Although the problem of querying a database in natural language hasbeen studied extensively, there has been relatively little work onprocessing database updates expressed in natural language.
Tointerpret update requests, several inguistic issues must be addressodthat do not typically pose difficulties when dealing exclusively withqueries.
This paper briefly examines some of the linguistic problemsencountered, and describes an implemented system that performssimple natural language database update&The primary difficulty with interpreting natural anguage updates isthat there may be several ways in which a particular update can beperformed in the underlying database.
Many of these options, whileliterally correct and semantically meaningful, may correspond tobizarre interpretations of the request.
While human speakers wouldintuitively reject hese unusual readings, acomputer program may beunable to distinguish them from more appropriate ones.
If carriedout, they often have undesirable side effects on the database,For example, a simple request to "Change the teacher of CS345 fromSmith tb Jones" might be carried out by altering the number of acourse that Jones already teaches to be CS345, by changing Smith'sname to b- Jones, or by modifying a "teaches" link in the database.While all of these may literally carry Otlt the update, they mayimplicitly cause unanticipated changes such as altering Jones' salary tobe Smith's,Our approach to this problem is to generate a limited set of"candidate" updates, rank them according to a set of domain-independent heuristics that reflect general properties of "reasonable"updates, and either perform the update or present the highest rankedoptions to the user for selection.This process may be guided by various linguistic considerations, suchas the difference between "transparent" and ""opaque" readings of theuser's request, and the interpretation f counterfactual conditionals.Our goal is a system that will process natural language updates,explaining problems or options to the user in terms that s/he canunderstand, and effecting the changes to the underlying database withthe minimal disruption of other views.
At this time, a pilotimplementation is complete.2.
Generating Candidate UpdatesBefore an appropriate change can be made to a database in responseto a natural language request, it is useful to generate a set of"candidate" updates that can then be evaluated for plausibility.
Inmost cases, an infinite number of changes to the database are possiblethat would literally carry out the request (mainly by creating andinserting "dummy" values and links).
However, this process can besimplified by generating only candidate updates that can be directlyderived from the user's phrasing of the request.
This limitation isjustified by observing that most reasonable updates correspond todifferent readings of expressions in referentially opaque contexts.A referentially opaque context is one in which two expressions thatrefer to the same real world concept cannot be interchanged in thecontext without changing the meaning of the utterance \[Quine.
1971\].Natural language database updates often contain opaque contexts,For example, consider that a particular individual (in a suitabledatabase) may be referred to as "Dr. Smith", "the instructor ofCSI00", "the youngest assistant professor", or "the occupant of Rm.424".
While each of these expressions may idem, fy the same databaserecord (i.e.
they have the same extension), they suggest differentmethods for locating that record (their intensions differ).
In thecontext of a database query, where the goal is to unambiguouslyspecify the response set (extension), the method by which they areaccessed (the intension) does not normally affect the response (for acounierexample, however, see \[Nash-Wcbber, 1976\]).
Updates, on theother hand, are often sensitive to the substitution of extensionallyequivalent referring expressions.
"Change the instructor of CS100 toDr.
Jones."
may not be equivalent to "Change the youngest assistantprofessor to Dr.
Jones."
or "Change Dr. Smith to Dr.
Jones."
Each ofthese may imply different updates to the underlying database,.This characteristic of natural language updates suggests that thegeneration ofcandidate updates can be performed as a language driveninference \[Kaplan, 1978\] without severely limiting the class of updatesto be examined.
"Language driven inference" is a style of naturallanguage processing where the infcrencing process is driven (andhence limited) by the phrasing of the user's request.
Two specificcharacteristics of language driven inference arc applied here to controlthe generation process.First, it is assumed that the underlying database update must be aseries of transactions of the same type indicated in the request.
That is.if the update requests a deletion, this can only be mapped into a seriesof deletions in the database.
Second, the only kinds of databaserecords that can be changed are those that have been mentioned insome form in the actual request, or occur on paths linking suchrecord?
In observing these restrictions, the program will generatemainly updates that correspond to different readings of potentiallyopaque references inthe original request.3.
Selecting Appropriate UpdatesAt first examination, it would seem to be necessary to incorporate asemantic model of the domain to select an appropriate update I'mmthe candidate updates.
While this approach would surely be effective,the overhead required to encode, store, and process this knowledge foreach individual database may be prohibitive in practical applications.What is needed is a general set of heuristics that will select anappropriate update in a reasonable majority of cases, without specificknowledge of the domain.139\ ]he heuristics that are applied to rank the candidate updates are basedon the idea that the most appropriate one is likely to cause theminimum number of side effects to the user's conception of thedatabase.
This concept is developed formally in the work of Lewis,presented in his book on Counterfactuals \[Lewis, 1973\].
In this Work,Lewis examines the meaning and formal representation of suchstatements as "If kangaroos had no tails, they.would topple over.
"(P.8) He argues that to evaluate the correctness of dlis statement (andsimilar counterfactual conditionals) it is necessary to construct in one'smind the possible world minimally different from the real world thatcould potentially contain the conditional (the "nearest" consistentworld).
He points out that this hypothetical world does not differ onlyin that kangaroos don't have tails, but also reflects other changesrequired to make that world plausible.
Thus he rejects the idea that inthe hypothetical world kangaroos might use crutches (as not beingminimally different), or that they might leave the same tracks is thesand (as being inconsistent).The application of this work to processing natural anguage databaseupdates is to regard each transaction as presenting a "counterfactuar'state of the world, and request hat the "nearest" reasonable world inwhich the counterfactual is true be brought about.
(For example, therequest "Change the teacher of CS345 from Smith to Jones."
mightcorrespond to the counterfactual "If Jones taught CS345 instead ofSmith.
how would the databasc be different?"
along with a speech actrequesting that the database be put in this new state.)
To select hisnearest world, the number ,and type of side effects are evaluated foreach candidate update, and they are ranked accordingly.
Side effectsthat disrupt he user's view--taken to be the subset of the database thathas been accessed in previous transactions--are considered more"severe" than changes to portions of the database not in that view.
Indata processing terms, the update with the fewest side effects on theuser's data sub-model is selected as the most appropriate.Updates that violate syntactic or semantic onstraints implicit in thedatabase smtcture and content can be eliminated as inconsistent.Functional dependencies, where one attribute uniquely determinesanother, are useful semantic filters (as in the formal update work of"\[Dayal.
1979\]).
When richer semantic data models are available, suchas the Str~:ctural Model of \[Wiederhold and E1-Masri, 1979\], moresophisticated constraints can be applied.
(The current implementationdoes not make use ofany such constrain~)While this approach can .certainly rail in cases where complex domain?
semantics rule out the "simplest" change-the one with the fewest sideeffects to the user's view--in the majority of cases it is sufficient toselect a reasonable update from among the various possibilities,4.
An ExampleThe following simple example of" this technique illustrates theuscfuln?,~ of the proposed approach in practical databases.
\[t is drawnFrom the current pilot implementation.The program is written in Interlisp \[Teitelman, 1978\].
and runs on aDEC KL-10 under Tenex.
An update expressed in a simple natural.language subset is parsed by a semantic gnLmmar using the LIFERsystem \[Hcndrix.
1977\].
Its output is a special version of the SODArelational anguage \[Moore, 1979\] that has been modified by Jim\[)avidson to inchlde the standard atabase update operations "delete","insert" ,and "replace".
The parsed request is then passed to a routinethat generates the candidate updates, subject to the constraintsoutlined above.
This list is then evaluated and ranked as described inthe previous ection.
If no updates are possible, the user is alerted tothis fact If one alternative is superior, it is carried out.
If severalupdates remain which cannot be compared, they arc presented forselection in terms of the effects they will have on the user's view of thedatabase.
If the update ultimately performed has unanticipated ffectson the user's view (i.e.
if the answer to a previous query is nowaltered), the user is informed.The example below concerns a small database of information aboutemployees, managers and departments.
It is assumed that the userview of the world contains employees and managers, but that s/hedoes not necessurily know about department~ in the database,managers manage employees "transitively", by managing thedepartments in which the employees work.
For pu~ ofpresentation, intermediate results are displayed here to illustrate theprogram's actions.
Normally, such information would not be printed.Commentary is enclosed in brackets("\[ \]").\[Here is a tabular display ofthe database.\]TABLE OHOEPT MGRINVNTRY FISHERMKTZNG BAKERSALES JONESTABLE EDEMP DEPTADAMS SALESWHITE MKTINGBROWN SALESSMITH INVNTRY\ [F is t  the user ente~ the following query, from which the programin~rs the user's view ofthc world.\]Enter next command:(LIST THE EMPLOYEES AND THEIR MANAGERS)EMP M6RAOAHS JONESWHITE BAKERBROWN JONESSMITH FISHER\[\]Next the user enters a natural anguage update request.\]Enter next command:(CHANGE BROWN'S MANAGER FROM JONES TO BAKER\]\[The program now generates the candidate updates.
One of thesecorresponds to moving Brown from the S~es department o theMarketing departmenL The other would make Baker the manager ofthe S~es departmenL\]The posstble ways of performing the update:1.
In the ra la t ton  ED change the OEPT et t r  ofthe tupleENP OEPT.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
-BROMN SALESto the value MKTZNG1402.
In the Palatton DM change the MGR at t r  ofthe tupleOPT t~RSALES JONESto the value BAKER\[The side effect of each on the user's view are computed.\]These t rans la t ions  have the fo l lowing  stde ef fectaon the vtew:1.
Side e f fec ts  are:De let ions :  NILInser t ions :  NILReplacements: NIL2.
Stde e f fec ts  era:De let ions :  NILInss r t lons :  NILReplacements: (ADAMS JONES) -> (ADAMS BAKER)\['The prog~m concludes that update (1) is superior to (2).
since (2) hasthe addiuonal side effect of changing Adams' manager to Baker aswell.\]Oestred t r sns la t lon  ts: 1 .Rev'~od vtew l s :EMP MGRADAMS JONESWHITE BAKERBROWN BAKERSMITH F!SHER5.
Conc lus ionsCarrying out a database update request expressed in natural languagerequires that an intelligent decision be made as to how the updateshould be accomplished.
Correctly identifying "reasonable" resultantstates of the database, and selecting a best one among these, mayinvolve world knowledge, domain knowledge, the user's goals andview of the database, and the previous discourse.
In short, it is atypical problem in computational linguistics.Most of the compli~tions derive from the fact that the user has a viewof the database that may be a simplification, subset, or transformationof the actual database structure and contenL Consequently, there maybe multiple ways of carrying out the update on the underlyingdatabase (or no ways at all), which.are transparent to the user.
Whilemost or all of these changes to the underlying database may literallyfulfill the user's request, they may have unanticipated or undesirableside-effecm on the database or the user's view.We have developed an approach to this problem that uses domain-independent heuristics to rank a set of candidate updates generatedfrom the original requesL A reasonable course of action can then beselected, and carried out This may involve informing the user that theupdate is ill-advised (if" it cannot be carried out).
presentingincomparable alternatives to the user for selection, or simplyperforming one of the possible updates.
Ot, r technique is motivated bylinguistic observations about the nature of update requests.Specifically, the use of referential opacity, and (he interpretation ofcounterfactual conditionals, play a role in our design.A primary advantage ofour approach is that it does not require specialknowledge about the domain, except that which is implicit in thestructure and content of the database.
A simple but adequate model ofthe user's view of the database is derived by tracking the previousdialog, and the heuristics are based on general principles about thenature of possible worlds, and so can be applied to any domain.Consequendy, the approach is practical in the sense that it can betransported to new databases without modification.In part because of ils generality, there is a definite risk (hat thetechnique will make inappropriate actions or fail to notice preferableoptions.
A more knowledge-based approach would likely yield moreaccurate and sophisticated results.
The proees of respondingappropriately to updates could be improved by taking advantage ofdomain specific knowledge xternal to the database, using pan~ case-structure semantics, or tracking dialog focus, to name a few.
Inaddition, better heuristics for ranking candidate updates would belikely to enhance performance.At present, we arc developing a formal characterization f the processof performing updates to views.
We hope that this will provide us witha tool to improve our understanding of both the problem and theapproach we have taken.
While the heuristics used in the process aremotivated by intuition, there is no obvious reason to assume that theyare either optimal or complete.
A more formal analysis of the problemmay provide a basis for relating the various heuristics and suggestadditional ranking criteria.6.
B ib l iographyDayal.
U.: Mapping Problems in Database Systems, TR-11-79, Centerfor Research in Computing Technology, Harvard University,19"/9.Hendrix, G.: Human Engineering for Applied Natural LanguageProcessing.
Proceedings of the Fifth lnzernational JointConference on Artificial Intelligence, 1977,183-19LKaplan.
S. J.: Indirect Responses to Loaded Questions, Proceedings oflhe Second Workshop on Theoretical ls~ues in NaturalLanguage Procexsing, Urbana-Champalgn, IL, July.
1978.Lewis, D.: Counterfactual$, Harvard University Press, Cambridge,MA, 1973.Moore, R.: Handling Complex Queries in a Distributed Da~ Base,TN-170.
AI Center.
SRI International, October, 1979.Nash-Webber.
B.: Semantic Interpretation Revuited, BBN report#3335, Bolt, Beranek.
and Newman, Cambridge, MA, 1976.Quine" w.v.o.
: Reference and Modality, in Reference andModaliO,,Leonard Linsky.
Ed., Oxford, Oxford University Press, 197LTeitelman, W.: lntedisp Reference Manual, Xerox PARC.
Pale Alto,1978.Wiederhold.
G. and R. EI-Masri: The Structural Model for DatabaseDesign, Proceedings ofthe International Conference on Entity"Relationship Approach to Sy$lems Analysis and Design.
NorthHolland Press, 1979. pp 247-267.141
