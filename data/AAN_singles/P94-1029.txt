AN EXTENDED THEORYOF HEAD-DRIVEN PARSINGMark-Jan Nederhof *University of NijmegenDepartment of Computer ScienceToernooiveld, 6525 ED NijmegenThe Netherlandsmarkj an?cs, kun.
nlAbstractWe show that more head-driven parsing algorithms canhe formulated than those occurring in the existing lit-erature.
These algorithms are inspired by a family ofleft-to-right parsing algorithms from a recent publica-tion.
We further introduce a more advanced notion of"head-driven parsing" which allows more detailed spec-ification of the processing order of non-head elementsin the right-hand side.
We develop a parsing algorithmfor this strategy, based on LR parsing techniques.Introduct ionAccording to the head-driven paradigm, parsing of aformal anguage is started from the elements within theinput string that are most contentful either from a syn-tactic or, more generally, from an information theoreticpoint of view.
This results in the weakening of theleft-to-right feature of most traditional parsing meth-ods.
Following a pervasive trend in modern theories ofGrammar (consider for instance \[5, 3, 11\]) the compu-tational inguistics community has paid large attentionto the head-driven paradigm by investigating its appli-cations to context-free language parsing.Several methods have been proposed so far exploit-ing some nondeterministic head-driven strategy forcontext-free language parsing (see among others \[6, 13,2, 14\]).
All these proposals can be seen as general-izations to the head-driven case of parsing prescrip-tions originally conceived for the left-to-right case.
Themethods above suffer from deficiencies that are also no-ticeable in the left-to-right case.
In fact, when morerules in the grammar share the same head element, orshare some infix of their right-hand side including thehead, the recognizer nondeterministically guesses a rulejust after having seen the head.
In this way analysesthat could have been shared are duplicated in the pars-ing process.Interesting techniques have been proposed in the left-to-right deterministic parsing literature to overcome re-dundancy problems of the above kind, thus reducing*Supported by the Dutch Organisation for Scientific Re-search (NWO), under grant 00-62-518Giorgio SattaUniversith di PadovaDipartimento di Elettronica e Informaticavia Gradenigo 6/A, 35131 PadovaItalysatt a@dei, unipd, itthe degree of nondeterminism of the resulting methods.These solutions range from predictive LR parsing to LRparsing \[15, 1\].
On the basis of work in \[8\] for nonde-terministic left-to-right parsing, we trace here a theoryof head-driven parsing going from crude top-down andhead-corner to more sophisticated solutions, in the at-tempt to successively make more deterministic the be-haviour of head-driven methods.Finally, we propose an original generalization ofhead-driven parsing, allowing a more detailed specification ofthe order in which elements of a right-hand side are tobe processed.
We study in detail a solution to sucha head-driven strategy based on LR parsing.
Othermethods presented in this paper could be extended aswell.Prel iminar iesThe notation used in the sequel is for the most partstandard and is summarised below.Let D be an alphabet (a finite set of symbols); D +denotes the set of all (finite) non-empty strings over Dand D* denotes D + U {c}, where c denotes the emptystring.
Let R be a binary relation; R + denotes thetransitive closure of R and R* denotes the reflexive andtransitive closure of R.A context=free grammar G = (N, T, P, S) consists oftwo finite disjoint sets N and T of nonterminal andterminal symbols, respectively, a start symbol S E N,and a finite set of rules P. Every rule has the formA ~ a, where the left-hand side (lhs) A is an elementfrom N and the right-hand side (rhs) e~ is an elementfrom V +, where V denotes (N U T).
(Note that wedo not allow rules with empty right-hand sides.
Thisis for the sake of presentational simplicity.)
We usesymbols A, B, C , .
.
.
to range over N, symbols X, Y, Zto range over V, symbols a,/3, 7 .
.
.
.
to range over V*,and v, w, z , .
.
.
to range over T*.In the context-free grammars that we will consider,called head grammars, exactly one member from eachrhs is distinguished as the head.
We indicate the headby underlining it, e.g., we write A --* aXfl.
An expres-sion A --+ cr7/3 denotes a rule in which the head is somemember within 7- We define a binary relation ~ such210that B <> A if and only if A --* otB__fl for some a and/3.Relation (>* is called the head-corner elation.For technical reasons we sometimes need the aug-mented set of rules P I ,  consisting of all rules in P plusthe extra rule S ~ ~ .kS, where f f  is a fresh nontermi-hal, and 3_ is a fresh terminal acting as an imaginaryzeroth input symbol.
The relation p,t is extended to arelation --.
on V* x V* as usual.
We write ~ P-~ 6 when-ever 7 "-'* 6 holds as an extension of p E P ?
We write7t"P2"'~" 6 if 7 ~ 61 ~ 6 P" 2"" "6~-x ---,6For a fixed grammar, a head-driven recognition algo-rithm can be specified by means of a stack automa-ton a = (T, alph, Init(n), ~--,, Fin(n)),  parameterisedwith the length n of the input.
In A, symbols Tand Aiph are the input and stack alphabets respec-tively, lair(n), Fin(n) E Alph are two distinguishedstack symbols and ~ is the transition relation, definedon Alph + x Alph + and implicitly parameterised with theinput.Such an automaton manipulates stacks F E Aiph +,(constructed from left to right) while consulting thesymbols in the given input string.
The initial stackis Init(n).
Whenever F ~ F r holds, one step of theautomaton may, under some conditions on the input,transform a stack of the form F"F into the stack F"F ~.In words, F ~ F ~ denotes that if the top-most few sym-bols on the stack are F then these may be replaced bythe symbols I ' .
Finally, the input is accepted wheneverthe automaton reaches stack Fin(n).
Stack automatapresented in what follows act as recognizers.
Parsingalgorithms can directly be obtained by pairing theseautomata with an output effect.A fami ly  o f  head-dr iven  a lgor i thmsThis section investigates the adaptation of a family ofleft-to-right parsing algorithms from \[8\], viz.
top-down,left-corner, PLR, ELR, and LR parsing, to head gram-mars.Top-down pars ingThe following is a straightforward adaptation of top-down (TD) parsing \[1\] to head grammars.There are two kinds of stack symbol (items), one ofthe form \[i, A, j\], which indicates that some subderiva-tion from A is needed deriving a substring of ai+l ?
?
?
aj,the other of the form \[i, k, A --* a ?
7 ?/3, m, j\], whichalso indicates that some subderivation from A is neededderiving a substring of ai+l ?
?
?
aj, but specifically usingthe rule A --~ ot7/3, where 7 -'-~* ak+x .
.
.
a,n has alreadybeen establishe~.
Formally, we have1~ D = { \ [ i ,A , j \ ] l i< j}I f  ?
= { \ [ i , k ,A -*a .y .
f l ,  m, j  \] IA - -~aZ/3EP~ Ai<k<m<_j )AIKor l thm 1 (Head-dr lven  top-down)a~ = (T, I~  D U IT  D, 1nit(n), ~-*, Fin(n)),  whereInit(n) = \[-1,  -1 ,  S' ---* ?
3_ ?
S, 0, n\],Fin(n) = \[-1,  -1 ,  S' --** 3-S *, n, n\], and the transitionrelation ~-~ is given by the following clauses.0 \[ i ,A, j \]  ~ \ [ i ,A , j \ ] \ [ i ,B , j \ ]where there is A ~ aB__fl E p t0a \[i, k, A ---, a ?
7 * B/3, m, j\] ~-,\[ i ,k,A---,  a ?
7 ?
B/3, m, j \ ] \ [m,B , j \ ]0b \[i,k,A---* aB  ?7  * /3, m, j \ ]\ [ i ,k ,A  ~ aB ?
7 */3, m, j \ ] \ [ i ,B ,k \ ]1 \ [ i ,A , j \ ]~- - * \ [ i , k - l ,A - - - *a .a ?
/3 ,  k, j \]where there are A ~ aafl  E p t  and k such thati<k_<jandak=a2a \ [ i ,k ,A  ---* a ?
7 * a\[3, m, j \ ]  ~-~\ [ i ,k ,A  ~ a ?
7a */3, m + 1,j\]provided m < j and am+l = a2b Symmetric to 2a (eft 0a and 0b)3 \ [ i ,A , j \ ] \ [ i ' , k ,B~?6 ?
,m, j ' \ ]~\ [ i , k ,a  ~ a ?
B * fl, m, j \ ]where there is A ~ aBBfl E P?
(i = i ~ and j = f are automatically satisfied)4a \[i, k, A ---* a ?
7 * B\[3, m,j\]\[i ' ,  k', B --* ?6 , ,  m', j ' \ ]\ [ i ,k ,A  ~ c~ ?
7B  ?
fl, m' , j \ ]provided m = k'(m = i' and j = j '  are automatically satisfied)4b Symmetric to 4aWe call a grammar head-recursive i fA ~+ A for someA.
Head-driven TD parsing may loop exactly for thegrammars which are head-recursive.
Head reeursion is ageneralization of left recursion for traditional TD pars-ing.In the ease of grammars with some parameter mech-anism, top-down parsing has the advantage over otherkinds of parsing that top-down propagation of parame-ter values is possible in collaboration with context-freeparsing (eft the standard evaluation of definite clausegrammars), which may lead to more efficient process-ing.
This holds for left-to-right parsing as well as forhead-driven parsing \[10\].Head-corner  pars ingThe predictive steps from Algorithm 1, represented byClause 0 and supported by Clauses 0a and 0b, can becompiled into the head-corner relation ~)*.
This givesthe head-corner (HC) algorithm below.
The items fromI T  D are no longer needed now.
We define I Hc = I f  D.Algor i thm 2 (head-corner )A ~tc = (T, I Hc, Init(n),  ~-*, Fin(n)),  whereIn it(n) = \[-1,  -1 ,  S' ~ ?
3- ?
S, 0, n\],Fin(n) = \[-1,  -1 ,  S' --~ ?
IS  =, n, hi, and ~ is givenby the following clauses.
(Clauses lb, 2b, 3b, 4b areomitted, since these are symmetric to la, 2a, 3a, 4a,respectively.
)la  \ [ i , k ,a - - *aoT ?B /3 ,  m,j\]~--~\[i, k, A ---* a ?
7 ?
B/3, m, j\]\[m, p -  1, C ~ rl.a.O, p, j\]where there are C ~ r/a0 E p t  and p such that m <p < j and ap = a and C ~* B2112a \ [ i ,k ,A- -*  a * 7 * a~,m, j \ ]  ~-*\ [ i ,k ,A- -*  a * -/a * 13, m+ 1,j\]provided m < j and am+l - - - -  a3a \[i, k, D ~ a*7*A13, m,j\]\[i ' ,  k', B ~ .6 .
,  ra' , jq ~-.\[i, k, D --~ o~.7.A13, rn, j\]\[i', k', C --~ ~.B .8 ,  rn', j'\]provided m = ?, where there is C --* r/_B0 E p t  suchthat  C <>* A(j = j' is automatically satisfied)4a \ [ i , k ,A  ~ a .7 .B13,  m, j \ ] \ [ i ' , k ' ,B  ---* .6 .
,m' , j ' \ ]\[i, k ,A  ~ a * ' IB  * 13, m' ,  j\]provided m = k ~(m = i' and j = j '  are automat ica l ly  satisfied)Head-corner parsing as well as all a lgorithms in theremainder of this paper may loop exactly for the gram-mars which are cyclic (where A ---~+ A for some A).The head-corner algor i thm above is the only one inthis paper which has already appeared in the l iterature,in different guises \[6, 13, 2, 14\].Pred ic t ive  HI  pars ingWe say two rules A --* a l  and B --* ~2 have a commoninfix a if a l  = 1310?-/1 and a2 = 132(:~-/2, for some 131,132,71 and -/2.
The notion of common infix is an adaptat ionof the notion of common prefix \[8\] to head grammars .If  a g rammar  contains many common infixes, thenHC parsing may be very nondeterminist ie; in particular,Clauses 1 or 3 may be applied with different rules C ---}0_a0 E p t  or C ---* r/__B0 E P~ for fixed a or B.In \[15\] an idea is described that  allows reduction ofnondeterminism in case of common prefixes and left-corner parsing.
The resulting algor i thm is called pre-dictive LR (PLR)  parsing.
The following is an adapta-tion of this idea to HC parsing.
The resulting algor ithmis called predictive H I  (PHI)  parsing.
(HI parsing, tobe discussed later, is a general ization of LR parsing tohead grammars .
)First, we need a different kind of item, viz.
of theform \[i, k ,A  --~ 7, re, j\], where there is some rule A --*a_713.
With  such an item, we simulate computat ion ofdifferent i tems \ [ i , k ,A  --* (~ * 7 * 13, re, j\] E I Hc, fordifferent a and 13, which would be treated individuallyby an HC parser.
Formally, we haveI Pm = { \ [ i , k ,A - - ,%m, j \ ] lA - - , c tT_13EP?Ai<_k<m<_j}Algor i thm 3 (P red ic t ive  H I )A PHI = (T, I PHI, ln it(n),  ~-~, Fin(n)),  whereInit(n) = \ [ -1 ,  -1 ,  S'  ---* _1_, 0, n\],Fin(n) = \ [ -1 , -1 ,  S'  ~ IS ,  n, n\], and ~-* is given bythe following (symmetr ic  "b-clauses" omitted).la  \ [ i ,k ,A- - -*%m,j \ ]~-*\ [ i ,k ,A  ~ % m, j \ ] \ [m,p -  1, C --* a,p, j \ ]where there are C ~ y_a0, A ---* aTB13 ~ pt  and psuch that m < p < j and ap = a an(:\] C O* B2a \ [ i ,k ,A--*  7, m, j \ ]  .-.
\ [ i ,k ,A- -*  Ta, m + 1,j\]provided m < j and am+~ = a, where there is A --*aT_.a13 ~ pt3a \[i, k, o -~ % m, j \ ] \ [ i ' ,  ~', B -~ ~, m',  j ' \ ]\ [ i , k ,D  ---* 7, m,j\]\[i ' ,  k ' ,C  -+ B ,m' , j ' \ ]provided m = i' and B --* 6 E p t ,  where there areD --* a_TA13, C ---* q_B0 E p t  such that  C <>* A4a \ [ i ,k ,A  ---* 7, m, j \ ] \ [ i ' , k ' ,B  ~ 6, m', j ' \ ]\[i, k, A ---, -/B, m', j\]provided m = k' and B ~ _6 E p t ,  where there isA .---.
~7_.Bfl E p tExtended HI  pars ingThe PHI  algor ithm can process s imultaneously a com-mon infix a in two different rules A --* 131_~-/1 andA --* 132_~72, which reduces nondeterminism.We may however also specify an algor i thm which suc-ceeds in s imultaneously processing all common infixes,irrespective of whether the left-hand sides of the cor-responding rules are the same.
This a lgor i thm is in-spired by exlended LR (ELR)  parsing \[12, 7\] for ex-tended context-free grammars  (where r ight-hand sidesconsist of regular expressions over V).
By analogy, itwill be called extended HI  (EHI) parsing.This algor ithm uses yet another kind of item, viz.of the form \ [ i , k ,{A1,A~, .
.
.
,Ap}  --* - / ,m, j \ ] ,  wherethere exists at least one rule A --* a_713 for eachA E {A1,Au , .
.
.
,Ap} .
With such an item, we simu-late computat ion of different i tems \[i, k, A --* a * -/ *13, m, j\] E I He which would be treated individually byan HC parser.
Formally, we haveI Em = {\[i, k, zx --+ -/, m, j\] I0CAC{A I A ---, a-/13 E P t} Ai<_k<m<j}Algor i thm 4 (Extended H I )A EH1 = (T, I EHI, Init(n),  ~-*, Fin(n)),  whereIn it(n) = \ [ -1 , -1 ,  {S'} --+ .1_, 0, n\],Fin(n) = \ [ -1 , -1 ,  {S'} ~ _l_S, n, n\], and ~-~ is given by:la  \ [ i , k ,A - - - *%m, j \ ]\[i, k, A --.
% m, j\] Ira, p - 1, A'  ---.
a, p, j\]where there is p such that  m < p < j and ap = aand A' = {C \[ qc  ~ 71a_O,A --~aT_Bfl E p I (A  EA A C <~* B)} is not empty2a \[i,k,A---~ %m, j \ ]  ~ \[i,k,A'---* Ta, m + 1,j\]provided ra < j and am+a = a and A'  = {A EA \[ A --* a'/aft E pt}  is not empty3a \[i, k, A --+ 7, m, j\]\[i', k', A '  ---* 6, m' ,  j ' \ ]  ~-+\ [ i , k ,A  --+ %m, j \ ] \ [ i ' , k ' ,A"  ---, B ,m' , j ' \ ]provided rn = i' and B --* ti E p t  for some B E A'such that  A"  = {C \] 3C ---+ yB6, D ---* aT_A~ Ept (D  E A A C <>* A)} is not empty4a \[i, k ,A  - .
%m, j \ ] \ [ i ' , k ' ,A '  ~ a,,n', j ' \]\ [ i , k ,h" -+ - /B ,m' , j \ ]provided m = k' and B ---+ 6_ E p l  for some B E A'such that A" = {A E A I A ---+ crTB13 E p t}  is notempty212This algorithm can be simplified by omitting thesets A from the items.
This results in common infix(CI) parsing, which is a generalization of common pre-fix parsing \[8\].
CI parsing does not satisfy the correctsubsequence property, to be discussed later.
For spacereasons, we omit further discussion of CI parsing.H I  pars ingIf we translate the difference between ELR and LR pars-ing \[8\] to head-driven parsing, we are led to HI parsing,starting from EHI parsing, as described below.
The al-gorithm is called HI because it computes head-inwardderivations in reverse, in the same way as LR parsingcomputes rightmost derivations in reverse \[1\].
Head-inward derivations will be discussed later in this paper.Ill parsing uses items of the form \[i, k, Q, m, j\], whereQ is a non-empty set of "double-dotted" rules A --* a *3' * ft.
The fundamental difference with the items inI EHl is that the infix 3' in the right-hand sides does nothave to be fixed.
Formally, we haveIHI = {\[ i ,k ,Q,m,j \ ]  \[$c  QC {A - -a .7  .B  \] A--*aT_~ E P~)^i<k<m<j}We explain the difference in behaviour of Il l parsingwith regard to EHI parsing by investigating Clauses laand 2a of Algorithm 4.
(Clauses 3a and 4a would giverise to a similar discussion.)
Clauses la and 2a both ad-dress some terminal ap, with m < p < j.
In Clause la,the case is treated that ap is the head (which is notnecessarily the leftmost member) of a rhs which the al-gorithm sets out to recognize; in Clause 2a, the case istreated that ap is the next member of a rhs of whichsome members have already been recognized, in whichcase we must of course have p = m + 1.By using the items from I t4r we may do both kindsof action simultaneously, provided p = m + 1 and ap isthe leftmost member of some rhs of some rule, whereit occurs as head)  The lhs of such a rule should sat-isfy a requirement which is more specific than the usualrequirement with regard to the head-corner relation.
2We define the left head-corner relation (and the righthead-corner relation, by symmetry) as a subrelation ofthe head-corner relation as follows.We define: B / A if and only if A ---* Bo~ for somea.
The relation Z* now is called the left head-cornerrelation.We definegotorightl(Q, X) ={C ~ ~.
x .o  I c~, lEoePt^3A --* a * 7 * B~ E Q(C <>* B)}goloright 2( Q, X)  =l If ap is not the leftmost member, then no successfulparse will be found, due to the absence of rules with emptyright-hand sides ( epsiion rules).2Again, the absence of epsilon rules is of importance here.
{C~.X .O\ [C~ X .OEPtASA- - .a  .7  .
Bfl E Q(C /* B)}U{A~a.
TX .~ \ [A ~a. '
r .
X3E  Q}and assume symmetric definitions for gotolefl 1 andgotoleft~.The above discussion gives rise to the new Clauses laand 2a of the algorithm below.
The other clauses arederived analogously from the corresponding clauses ofAlgorithm 4.
Note that in Clauses 2a and 4a the newitem does not replace the existing item, but is pushedon top of it; this requires extra items to be popped offthe stack in Clauses 3a and 4a.
3A lgor i thm 5 (HI)A m = (T, I Hz, Init(n), ~"h Fin(n)), wherelnit(n) = \[ -1,  -1 ,  {S' --+ * \]- * S}, O, n\],Fin(n) = \ [ - i ,  -1 ,  {S' -~ * .kS .
}, n, n\], and ~ defined:la  \ [ i ,k,Q,m,j \ ]  ~ \ [ i , k ,Q ,m, j \ ] \ [m,p -  1,Q',p,j\]where there is p such that m+ 1 < p_< j and ap = aand Q' = gotorightl(Q, a) is not empty2a \[i,k,Q,m,j\]~-~ \ [ i ,k ,Q,m, j \ ] \ [ i ,k ,Q ' ,m+ 1,j\]provided m < j and am+l = a and Q' =gotoright~(Q, a) is not empty3a \ [ i ,k ,Q,m, j \ ] I i .
.
.
I , _ l \ [ i ' ,k ' ,Q ' ,m' , j ' \ ]\[i, k, Q, .~, ~\]\[i', ~', Q", m', j'\]provided m < k', where there is B ---* * X1 .
.
.X r  *E Q' such that Q" = gotorighti(Q, B) is not empty4a \[i, k, Q, m, j\] I~...  I,_~ \[i', k', Q', m', j'\]\[i, k, Q, m, j\]\[i, k, Q", m', j\]provided m = k' or k = k ', where there is B ~ *X1 .
.
.Xr  ?
E Q' such that Q" = gotorighl~(Q, B) isnot emptyWe feel that this algorithm has only limited advan-tages over the EHI algorithm for other than degeneratehead grammars, in which the heads occur either mostlyleftmost or mostly rightmost in right-hand sides.
Inparticular, if there are few sequences of rules of the formA ---* A___Lai,Ax ~ A__2ot2,...,Am-1 --~ Amain, or ofthe form A ---, alA__ i, A1 -', a2A__g,..., A,~-i ~ amAin,then the left and right head-corner relations are verysparse and HI parsing virtually simplifies to EHI pars-ing.In the following we discuss a variant of head gram-mars which may provide more opportunities to use theadvantages of the LR technique.A genera l i za t ion  o f  head  grammarsThe essence of head-driven parsing is that there is adistinguished member in each rhs which is recognizedfirst.
Subsequently, the other members to the right andto the left of the head may be recognized.An artifact of most head-driven parsing algorithms isthat the members to the left of the head are recognized3In ?
?
?
I~-1 represent a number of items, as many as thereare members in the rule recognized, minus one.213strictly from right to left, and vice versa for the mem-bers to the right of the head (although recognition ofthe members in the left part and in the right part maybe interleaved).
This restriction does not seem to bejustified, except by some practical considerations, andit prevents truly non-directional parsing.We propose a generalization of head grammars insuch a way that each of the two parts of a rhs on bothsides of the head again have a head.
The same holdsrecursively for the smaller parts of the rhs.
The con-sequence is that a rhs can be seen as a binary tree, inwhich each node is labelled by a grammar symbol.
Theroot of the tree represents the main head.
The left sonof the root represents the head of the part of the rhs tothe left of the main head, etc.We denote binary trees using a linear notation.
Forexample, if a and /5 are binary trees, then (cOX(f 0denotes the binary tree consisting of a root labelled X,a left subtree a and a right subtree ft.
The notation ofempty (sub)trees (e) may be omitted.
The relation --**ignores the head information as usual.Regarding the procedural aspects of grammars, gen-eralized head grammars have no more power than tra-ditional head grammars.
This fact is demonstrated bya transformation r head from the former to the latterclass of grammars.
A transformed grammar head(e)contains pecial nonterminals of the form \[c~\], where c~is a proper subtree of some rhs in the original gram-mar G = (T, N, P, S).
The rules of the transformedgrammar are given by:A --* \[a\] X \[fl\] for each A ---* (a )X( f  0 ?
P\[(a)X(/~)\] ~ In\] X \[fl\] for each proper subtree(a)X(f l )  of a rhs in Gwhere we assume that each member of the form \[e\] inthe transformed grammar is omitted.It is interesting to note that vh,~d is a generalizationof a transformation vt,~o which can be used to transforma context-free grammar into two normal form (each rhscontains one or two symbols).
A transformed grammarrt~o(G) contains special nonterminals of the form \[a\],where c~ is a proper suffix of a rhs in G. The rules ofrtwo(G) are given byA --~ X \[a\] for each A ---* Xa  ?
P\[X?~\] --* X \[a\] for each proper suffix Xa  of a rhs in Gwhere we assume that each member of the form \[e\] inthe transformed grammar is omitted.H I  pars ing  rev is i tedOur next step is to show that generalized head gram-mars can be effectively handled with a generalizationof HI parsing (generalized HI (GHI) parsing).
Thisnew algorithm exhibits a superficial similarity to the2-dimensional LR parsing algorithm from \[16\].
For aset Q of trees and rules, 4 closure(Q) is defined to be4It is interesting to compare the relation between treesand rules with the one between kernel and nonkernel itemsof LR parsing \[1\].the smallest set which satisfiesclosure(Q) D_ Q U{A --~ (a)X(g)  ?
P \] (7)A(~f) ?
closure(Q) vB ?
c l0sure(Q)}The trees or rules of which the main head is somespecified symbol X can be selected from a set Q bygoto(Q, x )= (t ?
Q It = = A - .In a similar way, we can select trees and rules accordingto a left or right subtree.gotoleft(Q,~) = {t ?
Q I t = (~)X(~) vt = A --* (a)X(/3)}We assume a symmetric definition for gotoright.When we set out to recognize the left subtrees froma set of trees and rules, we use the following function.left(Q) = closure({cr \[ (~)X(/5) ?
Q vA --* (a)X(/~) ?
Q})We assume a s~,mmetric definition for right.The set I all1 contains different kinds of item:?
Items of the form \ [ i ,k ,Q,m, j \ ] ,  with i < k < m < j ,indicate that trees (a)X(f l )  and rules A ---* (a)X(~)in Q are needed deriving a substring of ai+l ... aj,where X ---~* ak+x.
.
.a ,~ has already been estab-lished.?
Items of the form \[k, Q, m, j\], with k < m < j, indi-cate that trees (cOX(fl) and rules A ~ (a)X(f l )  ill Vare needed deriving a substring of ak+l.
?
?
aj, where(~X ---~* ak+l .
.
.
a,,  has already been established.Items of the form \[i, k, Q, m\] have a symmetric mean-ing.?
Items of the form \[k, t, m\], with k < m, indicate that7 "-'** ak+l ... am has been established for tree t = 7or rule t = A --* 7.A lgor i thm 6 (Genera l i zed  H I  pars ing)A GH1 = (T, I Gin, Init(n), ~--~, Fin(n)), whereInit(n) : \ [ -1,  {S' --* _L(S)}, O, n\],Fin(n) = \[-1,  S' ---* _L(S), hi, and ~-* defined:la \[i,k,Q,m,j\]~--* \[ i ,k,O',m\]provided Q' = gotoright(Q, e) is not emptylb \ [ i ,k ,Q,m, j \ ]  .--, \ [k,Q',m,j \]provided Q' = gotoleft(Q, c) is not emptylc \ [k,Q,m,j \ ]  ,--* \[k,t,m\]provided t ?
gotoright(Q, e)ld \[i, k, Q, m\] ~ \[k, t, m\]provided t ?
gotoleft(Q, ~)2a \ [ i ,k ,Q,m, j \ ]  ~ \ [ i , k ,Q ,m, j \ ] \ [m,p -  1,Q',p,j\]where there is p such that m < p < j and Q' =goto(right(Q), ap) is not empty2b \ [ i ,k ,Q,m, j \ ]  ~ \ [ i , k ,Q ,m, j \ ] \ [ i ,p -  1,Q',p,k\]where there is p such that i < p < k and Q' =goto(lefl(Q), av) is not empty214Stack\[-1, {S'\[-1, {S'\[-1, {S'\[-1, {S'\[-~,{s'--* _L(S)}, 0, 4\]_L(S)}, 0, 4\] \[0, 3, {S ---, ((c)A(b))s, S ~ (A(d))s, S ---* (B)s}, 4, 4\]-+  J_(S)}, 0, 4\] \[0, 3, {S -+  ((c)A(b))s, S ---, (A(d))s, S -~  (B)s}, 4\].L(S)}, 0, 4\] \[0, 3, {S ~ ((c)A(b))s, S ---* (A(d))s, S ---* (B)s}, 4\] \[0, 1, {A ~ a}, 2, 3\]---* .I_(S)}, 0, 4\] \[0, 3, {S ~ ((c)A(b))s, S ---* (m(d))s, S ---* (B)s}, 4\] \[0, 1, {A ---* a}, 2\]\[-1, {S' --* .L(S)}, 0, 4\] \[0, 3, {S ~ ((c)A(b))s, S ---* (A(d))s, S ~ (B)s},  4\] \[1, A --~ a, 2\]\[-1, {S' ~ .L(S)}, 0, 4\] \[0, 3, {S ---* ((c)A(b))s, S ---* (A(d))s, S ~ (B)s}, 4\] \[0, 1, {(c)A(b), A(d), g(b)}, 2, 3\]\[ .
.
.
\] \[0, 3, {S ---* ((c)A(b))s, S ---* (A(d))s, S ---* (B)s}, 4\] \[0, 1, {(c)m(b), A(d), A(b)}, 2, 3\] \[2, 2, {b}, 3, 3\]\[ .
.
.
\] \[0, 3, {S ~ ((c)A(b))s, S ---* (A(d))s, S ---* (B)s}, 4\] \[0, 1, {(c)A(b), A(d), A(b)}, 2, 3\] \[2, b, 3\]\[ .
.
.
\] \[0, 3, {S-+ ((c)A(b))s, S ---* (g(d))s,  S ---* (B)s}, 4\] \[0, 1, {(c)A(b), m(b)}, 3\]\[ .
.
.
\] \[0, 3, {S --~ ((c)A(b))s, S ~ (A(d))s, S ~ (B)s}, 4\] \[0, 1, {(c)A(b), A(b)}, 3\] \[0, 0, {c}, 1, 1\]\[-1, {S' --* .L(S)}, 0, 4\] \[0, 3, {S --* ((c)A(b))s, S --~ (A(d))s, S ---* (B)s}, 4\] \[0, 1, {(c)A(b), A(b)}, 3\] \[0, c, 1\]\[-1, {S' --~ J-(S)}, 0, 4\] \[0, 3, {S ~ ((c)A(b))s, S ---* (A(d))s, S --* (B)s}, 4\] \[0, (c)A(b), 3\]\[-  1, {S' --* _L(S) }, O, 41 \[0, S --* ((c)A(b))s, 4\]\[-1, {S' --* ?
(S)}, O, 4\] \[0,0, {S},4,4\]\[-1, {5" ~ J_(S)}, O, 4\] \[0,S,4\]\ [ -  l, S' --, _L(S), 4\]I Clause3ala3blald7b2ala, ld4a3bla, ld5b5b7ala, ld5aFigure 1: Generalized HI parsing3a \[k,Q, rn,j\]~-, \[k,Q,m,j\]\[rn, p -  1,Q',p,j\]where there is p such that m < p _< j and Q' -golo(righl(Q), ap) is not empty35 \[i,k,Q,m\]~--* \ [ i ,k ,Q,m\] \ [ i ,p-  1, Q',p,k\]where there is p such that i < p < k and Q' =goto(iefl(Q), ap) is not empty4a \[ i ,k,Q,m,j\]\[k',7, m' \]~-.
\[i,k,Q',m'\]provided m = k', where Q' = gotoright(Q, 7)4b Symmetric to 4a (of.
2a and 2b)5a \[k, Q, m, j\]\[k', 7, m'\] *--* \[k, t, rn'\]provided m = k ~, where t E 9otoright(Q, 7)5b Symmetric to 5a (cf.
3a and 3b)6a \[i, k, Q, m, j\]\[k', A ---* 7, rn'\] ~-~\[i, k, Q, m, j\]\[m, k', Q', m', j\]provided m < k', where Q' = goto(right(Q), A)6b Symmetric to 6a7a \[k,Q,m,j\]\[k',A---*7, m'\]~--*\[k, Q, m, j\]\[m, k', O', m', j\]provided rn _< k', where Q' = goto(righl(Q), A)7b Symmetric to 7aThe algorithm above is based on the transformationrhead.
It is therefore not surprising that this algorithmis reminiscent of LR parsing \[1\] for a transformed gram-mar rt~oo(G).
For most clauses, a rough correspondencewith actions of LR parsing can be found: Clauses 2and 3 correspond with shifts.
Clause 5 correspondswith reductions with rules of the form \[Xa\] ---, X \[a\]in rtwo(G).
Clauses 6 and 7 correspond with reduc-tions with rules of the form A --* X \[a\] in rtwo(G).
ForClauses 1 and 4, corresponding actions are hard to find,since these clauses seem to be specific to generalizedhead-driven parsing.The reason that we based Algorithm 6 on rheaa istwofold.
Firstly, the algorithm above is more appro-priate for presentational purposes than an alternativealgorithm we have in mind which is not based on "/'head ,and secondly, the resulting parsers need less sets Q.This is similar in the case of LR parsing.
5Example  1 Consider the generalized head grammarwith the following rules:S --~ ((c)A(b))s \](A(d))s I (B)sA ~ aB -~ A(b)Assume the input is given by ala2a3a4 = c a b s. Thesteps performed by the algorithm are given in Figure 1.\[\]Apart from HI parsing, also TD, tIC, PHI, and EHIparsing can be adapted to generalized head-driven pars-ing.Cor rectnessThe head-driven stack automata studied so far differfrom one another in their degree of nondeterminism.In this section we take a different perspective.
For allthese devices, we show that quite similar relations ex-ist between stack contents and the way input stringsare visited.
Correctness results easily follow from suchcharacterisations.
(Proofs of statements in this sectionare omitted for reasons of space.
)Let G = (N, T, P, S) be a head grammar.
To be usedbelow, we introduce a special kind of derivation.sit is interesting to compare LR parsing for a context-freegrammar G with LR parsing for the transformed grammarrtwo(G).
The transformation has the effect that a reduc-tion with a rule is replaced by a cascade of reductions withsmaller ules; apart from this, the transformation does notaffect the global run-time behaviour of LR parsing.
Moreserious are the consequences for the size of the parser: therequired number of LR states for the transformed grammaris smaller \[9\].215PS~2~3,0 X3,1 ~3,1 X3,2 ~3,2 X3,3 ~3,3Figure 2: A head-outward sentential form derived bythe composition of a-derivations Pi, 1 < i < 3.
Thestarting place of each a-derivation is indicated, eachtriangle representing the application of a single produc-tion.Def in i t ion  1 A a-derivation has the fo rmA p~p2...p~-~ 70B71P.
---+ 70ar/flV1p"-+ "/0 cl~z/~71 , (1)where Pl,P2 .
.
.
.
,Ps are productions in p t ,  s > 1, Pirewrites the unique nonterminai  occurrence introducedas the head element of pi-1 for  2 < i < S, p, = (Bc~)  and p E P* rewrites t1 into z E T +.The indicated occurrence of string 7/in (1) is called thehandle of the a-derivation.
When defined, the right-most (leftmost) nonterminal occurrence in a (/~, re-spectively) is said to be adjacent to the handle.
Thenotions of handle and adjacent nonterminal occurrenceextend in an obvious way to derivations of the formCA0 L ?70Z710 , where A :--, 70z71 is a a-derivation.By composing a-derivations, we can now define theclass of sentential forms we are interested in.
(Figure 2shows a case example.
)Def in i t ion  2 A head-outward sentential  fo rm is ob-tained through a derivationPl  S ---, 71,0zl,t71,1P2----+ "f2,0 X 2,1.
),2,1X 2,2 ~,2,2PqVq,OT.q,lVq,lXq,2Vq,2"''\[q,q-lZq,qVq, q (2)where q > 1, each Pi is a a-derivation and, for  2 < i <q, only one string 7i- l , j  is rewritten by applying Pi at anonterminal occurrence adjacent to the handle of pi-1.Sequence P l ,p~, .
.
.
,pq  is said to derive the sententialform in (2).The definition of head-outward sentential form sug-gests a corresponding notion of head-outward deriva-tion.
Informally, a head-outward derivation proceeds byrecursively expanding to a terminal string first the headof a rule, and then the remaining members of the rhs,in an outward order?
Conversely, we have head-inward(HI)  derivations, where first the remaining membersin the rhs are expanded, in an inward order (towardthe head), after which the head itself is recursively ex-panded.
Note that HI parsing recognizes a string bycomputing an HI derivation in reverse (of.
Lit parsing).Let w = axa2 ?
.
-an, n > 1, be a string over T and leta0 = .1_.
For -1  < i < j < n, we write ( i , j \ ] , ,  to denotesubstring ai+ l ?
?
?
aj .Theorem 1 For A one of Anc ,  A PH1 or A EH~, thefollowing facts are equivalent:(i) A reaches a configuration whose stack contents areI l  I~ .
.
.
lq, q > 1, withIt = \[ it ,kt,  At ---+ at * Ot * f i t ,mt , j t \ ]  orh = \ [ i t , k t ,A t  ---+ ~h,mt, j t \ ]  orIt = \[ it ,kt,  At  ~ ~?t,mt,jt\]fo r  the respective automata, I < t < q;(it) a sequence of a-derivations Pl, P2 , .
.
.
,  Pq, q >_ 1, de-rives a head-outward sentential  fo rm"/'0 (k~r(1), mr(1)\]w71(k.(2), rn~(2)\]wY2 ?
?
?? "
"Tq-1 (kTr(q), m~r(q)\]w~/qwhere lr is a permutation of {1 .
.
.
.
,q}, Pt has han-dle ~?t which derives (kTr(t),m~r(t)\]w, I < t < q, andm~(t -1 )  < kTr(t), 2 < t < q.As an example, an accepting stack configuration\ [ -1 , -1 ,S  l ---* ?
IS  .
,n ,n \ ]  corresponds to a a-derivation (S' ---+ IS )p ,  p E P+, with handle_I_S which derives the head-outward sentential form70(-1, n\]~71 = _l_w, from which the correctness of thehead-corner algorithm follows directly.If we assume that G does not contain any useless ym-bols, then Theorem 1 has the following consequence, ifthe automaton at some point has consulted the sym-bols a i l ,a i2 , .
.
.
,a im from the input string, il .
.
.
.
.
imincreasing indexes, then there is a string in the languagegenerated by G of the form voai~vl .
.
.
vm_ la i ,~vm.Such a statement may be called correct subsequenceproperty (a generalization of correct prefix property \[8\]).Note that the order in which the input symbols are con-sulted is only implicit in Theorem 1 (the permutation7r) but is severely restricted by the definition of head-outward sentential form.
A more careful characterisa-tion can be obtained, but will take us outside of thescope of this paper.The correct subsequence property is enforced by the(top-down) predictive feature of the automata, andholds also for A TD and A HI.
Characterisations simi-lar to Theorem 1 can be provided for these devices.
Weinvestigate below the GHI automaton.For an item I E 1 GUt of the form \ [ i , k ,Q ,m, j \ ] ,\[k, Q, m, j\], It, k, Q, m\] or \[k, t, m\], we say that k (mrespectively) is its left (right) component.
Let N ~ be216the set of nonterminals of the head grammar head(G).We need a function yld from reachable items in I aminto (N' tO T)*, specified as follows.
If we assumethat (cQX(fl) E Qv  A ~ (t~)X(/3) E Q and t =(a)X(/3) V t = A --* (a)X(~3), thenX if / = \[i, k, Q, m, j\]yld(I) = \[a\]X i f I=  \[k,Q,m,j\]X\[fl\] if I = \[i, k, Q, m\]\[a\]X\[fl\] if I = \[k, t, m\]It is not difficult to show that the definition of yld isconsistent (i.e.
the particular choice of a tree or rulefrom Q is irrelevant).Theorem 2 The following facts are equivalent:(i) A cHl reaches a configuration whose stack contentsare Il I~ .
.
.
Iq, q > 1, with kt and mt the left and rightcomponents, respectively, of It, and yld(It) = Yt, forl<t<q;(it) a sequence of tr-derivations Pl,P2,.. .
,Pq, q > 1, de-rives in rh~aa(G) a head-outward sentential form7o(k~r(1), m,r(1)\]w"Y1 (k r (2 ) ,  mr (2) \ ]w72 ?
?
?"
' "  7q -  1 (k~-(q), m~(q)\]w')'qwhere ~r is a permutation of {1,. .
.
,q}, Pt has han-dle tit which derives (k~(t),m,~(t)\]w, 1 < t < q, andrex(t-l) <_ kx(t), 2 < t < q.DiscussionWe have presented a family of head-driven algorithms:TD, I/C, Pill, EHI, and HI parsing.
The existence ofthis family demonstrates that head-driven parsing cov-ers a range of parsing algorithms wider than commonlythought.The algorithms in this family are increasingly deter-ministic, which means that the search trees have a de-creasing size, and therefore simple realizations, uch asbacktracking, are increasingly eff?cient.However, similar to the left-to-right case, this doesnot necessarily hold for tabular realizations of these al-gorithms.
The reason is that the more refined an al-gorithm is, the more items represent computation ofa single subderivation, and therefore some subderiva-tions may be computed more than once.
This is calledredundancy.
Redundancy has been investigated for theleft-to-right case in \[8\], which solves this problem forELR parsing.
Head-driven algorithms have an addi-tional source of redundancy, which has been solved fortabular I-IC parsing in \[14\].
The idea from \[14\] can alsobe applied to the other head-driven algorithms fromthis paper.We have further proposed a generalization of head-driven parsing, and we have shown an example ofsuch an algorithm based on LR parsing.
Prospects toeven further generalize the ideas from this paper seempromising.Re ferences\[1\] A.V.
Aho, R. Sethi, and J.D.
Ullman.
Compil-ers: Principles, Techniques, and Tools.
Addison-Wesley, 1986.\[2\] G. Bouma and G. van Noord.
Head-driven parsingfor lexicalist grammars: Experimental results.
InSixth Conference of the European Chapter of theACL, pages 71-80, April 1993.\[3\] G. Gazdar, E. Klein, G. Pullum, and I.
Sag.
Gen-eralized Phrase Structure Grammar.
Harvard Uni-versity Press, Cambridge, MA, 1985.\[4\] Third International Workshop on Parsing Tech-nologies ( IWPT 3), Tilburg (The Netherlands) andDurbuy (Belgium), August 1993.\[5\] R. Jackendoff.
X-bar Syntax: A Study of PhraseStructure.
The MIT Press, Cambridge, MA, 1977.\[6\] M. Kay.
I/ead-driven parsing.
In InternationalParsing Workshop '89, pages 52-62, Pittsburgh,1989.\[7\] R. Leermakers.
How to cover a grammar.
In 27thAnnual Meeting of the ACL, pages 135-142, June1989.\[8\] M.J. Nederhof.
An optimal tabular parsing algo-rithm.
In this proceedings.\[9\] M.J. Nederhof and J.J. Sarbo.
Increasing the ap-plicability of LR parsing.
In \[4\], pages 187-201.\[10\] G. van Noord.
Reversibility in Natural LanguageProcessing.
PhD thesis, University of Utrecht,1993.\[11\] C. Pollard and I.
Sag.
Information-Based Syntaxand Semantics, volume 1: Fundamentals.
CSLILecture Notes Series No.
13, Center for the Studyof Language and Information, Stanford University,Stanford, California, 1987.\[12\] P.W.
Purdom, Jr. and C.A.
Brown.
Parsingextended LR(k) grammars.
Acta Informatica,15:115-127, 1981.\[13\] G. Satta and O.
Stock.
Head-driven bidirectionalparsing: A tabular method.
In International Pars-ing Workshop '89, pages 43-51, Pittsburgh, 1989.\[14\] K. Sikkel and R. op den Akker.
Predictive head-corner chart parsing.
In \[4\], pages 267-276.\[15\] E. Soisalon-Soininen and E. Ukkonen.
A methodfor transforming grammars into LL(k) form.
ActaInformatica, 12:339-369, 1979.\[16\] M. Tomita.
Parsing 2-dimensional language.
InM.
Tomita, editor, Current Issues in Parsing Tech-nology, chapter 18, pages 277-289.
Kluwer Aca-demic Publishers, 1991.217
