NATURAL LANGUAGE DATABASE UPDATESSharon C. SalveterDavid MaierComputer Science Depar=mentSUNY Stony BrookStony Brook, NY 11794ABSTRACTAlthough a great deal of research effort hasbeen expended in support of natural language (NL)database querying, little effort has gone to NLdatabase update.
One reason for this state ofaffairs is that in NL querying, one can tie nounsand stative verbs in the query to database objects(relation names, attributes and domain values).
Inmany cases this correspondence seems sufficient tointerpret NL queries.
NL update seems to requiredatabase counterparts for active verbs, such as"hire," "schedule" and "enroll," rather than forstative entities.
There seem to be no natural can-didates to fill this role.We suggest a database counterpart for activeverbs, which we call verbsraphs.
The verbgraphsmay be used to support NL update.
A verbgraph is astructure for representing the various databasechanges that a given verb might describe.
In addi-tion to describing the variants of a verb, they maybe used to disamblguate the update command.
Otherpossible uses of verbgraphs include, specificationof defaults, prompting of the user to guide but notdictate user interaction and enforcing a variety oftypes of database integrity constraints.I.
MOTIVIATION AND PROBLEM STATF~NTWe want to support natural language interfacefor all aspects of database manipulation.
Englishand English-like query systems already exist, suchas ROBOT\[Ha77\], TQA\[Da78\], LUNAR\[W076\] and thosedescribed by Kaplan\[Ka79\], Walker\[Wa78\] and Waltz\[Wz75\].
We propose to extend natural languageinterac$ion to include data modification (insert,delete, modify) rather than simply data extraction.The desirability and unavailability of natural lan-guage database modification has been noted byWiederhold, et al\[Wi81\].
Database systems cur-rently do not contain structures for explicit model-ling of real world changes.A state of a database (OB) is meant to repre-sent a state of a portion of the real world.This research is partially supported by NSF grantsIST-79-18264 and ENG-79-07794.We refer to the abstract description of the portionof the real world being modelled as the semanticdata descri~tlo n (SDD).
A SDD indicates a set ofreal world states (RWS) of interest, a DB defini-tion gives a set of allowable database states(DBS).
The correspondence between the SDD and theDB definition induces connections between DB statesand real world states.
The situation is diagrammedin Figure i.Real Worldmo ~ RWSIc~oRWS2~ RWS3semanticdescriptionDatabase> DBSI m ,~ mm D-oDBS2 m ~mDBS3< ~ databasecorrespondence definitionFigure 1Natural language (NL) querying of the DB re-quires that the correspondence between the SDD andthe DB definition be explicitly stated.
The querysystem must translate a question phrased in termsof the SDD into a question phrased in terms of adata retrieval command in the language of the DBsystem.
The response to the command must be trans-lated back into terms of the SDD, which yieldsinformation about the real world state.
For NLdatabase modification, this stative correspondencebetween DB states and real world states is notadequate.
We want changes in the real world to bereflected in the DB.
In Figure 2 we see that whensome action in the real world causes a state changefrom RWSI to RWS2, we must perform some modifica-tion to the DB to change its state from DBSI toDBS2.Real World Databasef action D}ILRWS2 ~ DBS2Figure 267We have a means to describe the action thatchanged the state of the real world: active verbs.We also have a means ~o describe a change in theDB state: data manipulation language (DML) com-mand sequences.
But given a real world-action, howdo we find a O~XL command sequence that will agcomp-lish the corresponding change in the DB?Before we explore ways to represent hisactive correspondence--the connection between realworld actions and DB updates--, let us examine howthe stative correspondence is captured for use bya NL query system.
We need to connect entitiesand relationships in the SDD with files, fieldsand field values in the DB.
This stative corres-pondence between RWS and DBS is generally specif-ied in a system file.
For example, in Harris'ROBOT system, the semantic description is implici%and it is assumed to be given in English.
Theentities and relationships in the description areroughly English nouns and stative verbs.
Thecorrespondence of the SDD to the DB is given by alexicon that associates English words with files,fields and field values in the DB.
This lexiconalso gives possible referents for word and phrasessuch as "who," "where" and "how much.
"Consider the following example.
Suppose wehave an office DB of employees and their scheduledmeetings, reservations for meeting rooms and mes-sages from one employee to another.
We capturethis information in the following four relations,EMP(name,office,phone,supervisor)APPOINTMENT(name,date,time,duration,who,topic,location)MAILBOX(name,date,time,from,message)ROO~ESERVE(room,date,time,duration,reserver)with domains (permissible sets of values):DOIiAIN ATTRIBUTESpersonname name, who, from, reserver, supervisorroomnum room, location, officephonenum phonecalendardate dateclock~ime timeelapsedtime durationtext message~ topicConsider an analysis of the query"What is the name and phone # of the personwho reserved room 85 for 2:45pm today?
"Using the lexicon, we can tie words in the query todomains and relations.name - personnamephone - phonenumperson - personnamewho - personnamereserve - ROOMRESERVErelationroom - roomnum2:45pm - clocktlme~ay  - calendardateWe need to connect relations D~ and ROO~ESERVE.The possible joins are room-office and name-reserver.
If we have stored the informa=ion thatoffices and reservable rooms never intersect, we caneliminate the first possibility.
Thus we canarrive at the queryi__nnEMP, ROOMKESERVE retrieve name, phone wherename = reserver and room = 85 and time =2:45pm and date = CURRE~DATESuppose we now want to make a change to thedatabase:"Schedule Bob Marley for 2:lbpm Friday.
"This request could mean schedule a meeting with anindividual or schedule Bob Marley for a seminar.We want to connect "schedule" with the insertionof a tuple in either APPOINTMENT or ROO~ESERVE.Although we may have pointers from "schedule" toAPPOINTMENT and ROOMRESERVE, we do not have ade-quate information for choosing the relation to up-date.Although files, fields, domains and valuesseem to be adequate for expressing the stativecorrespondence, we have no similar DB objects towhich we may tie verbs that describe actions inthe real world.
The best we can do with files,fields and domains is to indicate what is to bemodified; we cannot specify how to make the modif-ication.
We need to connect the verbs "schedule,""hire" and "reserve" with some structures thatdictate appropriate D:.~ sequences that perform thecorresponding updates to the DB.
The best we haveis a specific D~ command sequence, a transaction,for each instance of "schedule" in the real world.No single transaction truly represents all theimplications and variants of the "schedule" action.
"Schedule" really corresponds to a set of similartransactions, or perhaps some parameterized versionof a DB transaction.induced connectionsRWS2 ~ / ~ ~  DBS2"Schedu le"4 .~Parameter i zedTransaction (PT)Figure 3The desired situation is shown in Figure 3.We hg" ~ an active correspondence between "schedule"anG a parameterized DB transaction PT.
Oifferentinstances of the schedule action, S1 and $2, causedifferenL changes in the real worl~ s~a~.
Fromthe active correspondence of "schedule" and PT, wewant to produce the proper transaction, T1 or T2,to effect the correct change in the DB state.There is not an existing candidate for the high-level specification language for verb descriptions.68We must be able to readily express the correspond-ence between actions in the semantic world andverb descriptions in this high-level specificationWe depend heavily on this correspondence to proc-ess natural language updates, just as the statlvecorrespondence is used to process natural languagequeries.
In the next section we examine theserequirements in more detail and offer, by example,one candidate for the representation.Another indication of the problem of activeverbs in DB shows up in looking a semantic datalanguages.
Sematnic data models are systems forconstructing precise descriptions of protions ofthe real world - semantic data description (SDD)-using terms that come from the real world ratherthan a particular DB system.
A SDD is a startingpoint for designing and comparing particular DBimplementations.
Some of the semantic models thathave been proposed are the entity-relationshipmodel\[Ch763, SDM\[~81\] ,  RM/T\[Co793, TAXIS\[MB80\]and Beta\[Br78\].
For some of these models, method-ologies exist for translating to a DB specificationin various DB models, as well as for expressingthe static correspondence between a SDD in thesemantic model and a particular DB implementation.To express actions in these models, however, thereare only terms that refer to DBs: insert, delete,modify, rather than schedule, cancel, postpone(the notable exception is Skuce\[SkSO\]).While there have been a number of approachesmade to NL querying, there seems to be little workon NL update.
Carbonell and Hayes\[CHSl\] havelooked at parsing a limited set of NL update com-mands, but they do not say much about generatingthe DB transactions for these commands.
Kaplanand Davidson\[KDSl\] have looked at the translationof NL updates to transactions, but the activeverbs they deal with are synonyms for DB terms,essentially following the semantic data model asabove.
This limitation is intentional, as thefollowing excerpt shows:First, it is assume that the underlyingdatabase update must be a series of trans-actions of the same type indicated in therequest.
That is, if the update requestsa deletion, this can only be mapped intoa series of deletions in the database.While some active verbs, such as "schedule,"may correspond to a single type of DB update,there are other verbs that will require multipletypes of DB updates, such as "cancel," whichmight require sending message as well as removingan appointment.
~apian and Davidson are alsotrying to be domain independent, while we aretrying to exploit domain-specific information.II.
NATURE OF THE REPRESENTATIONWe propose a structure, a verbgraph, to repre-sent action verbs.
Verbgraph are extensions offrame-like structures used to represent verb mean-ing in FDRAN\[Sa78\] and \[Sa79\].
One verbgraph isassociated with each sense of a verb; that struc-ture represents all variants.
A real world changeis described by a sentence that contains an activeverb; the DB changes are accomplished by DML com-mand sequences.
A verbgraph is used to selectDNfL sequences appropriate to process the variantsof verb sense.
We also wish to capture that oneverb that may be used as part of another: we mayhave a verb sense RESERVE-ROOM that may be used byitself or may be used as a subpart of the verbSCHEDULE-TALK.Figure 4 is an example of verbgraph.
Itmodels the "schedule appointment" sense of theverb "schedule."
There are four basic variants weare attempting to capture; they are distinguishedby whether or not the appointment is scheduled withsomeone in the company and whether or not a meetingroom is to be reserved.
There is also the possi-bility that the supervisor must be notified ofthe meeting.The verbgraph is directed acyclic graph (DAG)with 5 kinds of nodes: header, footer, informa-tion, AND (0) and OR (o).
Header is the source ofthe graph, the footer is the sink.
Every informa-tion node has one incoming and outgoing edge.
AnAND or OR node can have any number of incoming oroutgoing edges.
A variant corresponds to adirected path in the graph.
We define a path tobe connected subgraph such thatI) the header is included;2) the footer is included;3) if it contains an information node, itcontains the incoming and outgoing edge;4) if it contains an AND node, it containsall incoming and outgoing edges; and5) if it contains an OR node, it containsexactly one incoming and one outgoingedge.We can think of tracing a path in the graph bystarting at the header and following its outgoingedge.
Whenever we encounter an information node,we go through it.
Whenever we encounter an ~NDnode, the path divides and follows all outgoingedges.
We may only pass through an AND node ifall its incoming edges have been followed.
An ORnode can be entered on only one edge and we leaveit by any of its outgoing edges.An example of a complete path is one thatconsists of theheader, footer, information nodes,A, B, D, J, and connector nodes, a, b, c, d, g, k,i, n. Although there is a direction to paths, wedo not intend that the order of nodes on a pathimplies any order of processing the graph, exceptthe footer node is always last to be processed.A variant of a verb sense is described by the setof all expressions in the information nodes con-tained in a path.Expressions in the information nodes can beof two basic types: assignment and restriction.The assignment type produces a value to be usedin the update, either by input or computation; thekey word input indicates the value comes from theuser.
Some examples of assignment are:69I" .
l .~F I ' .
.
.
.
'~ae  - ~ /S~APPT.~ul-atlon in=u~ fz~m el~sedt imeAPPT.cl~e - in?u+~ f'm~m ca!e~a:~iataAPPT.
,~ho - L=put f : ,~  ~e=somm,,ebBAPPT.
who in RIAPPT~.
=am~ - APPT.
~hoAPPT..2. who - AP.~T.
=AmeAPPT2.
Cite - AP~T.
timeAPPT2.
d~te - APPT.
daisAPPT2.
topic - APPT.
topic.~PT2.
whets - APPT.
whe:ewith  :e on %APPT.
~.
te  !o $C IRES.
date - APPT.
datei ~!
I ~"  :eserve= - AY~T.
~!~e IA~T'~?
~-~ ~--~ ,l~S.~.
- ~ .
t~.
RES.
~ul'Atlon A.~P~, iuz'ationl~: .
~,~ ~o_~t _~ R~ i L~T,.
~e~ R2JFigura 4ca l l  I~r'OKM(R~, .~2Fg.name, 'Meeting I~- -~ ~TT.
~ho on f~T .
~te  in  I room ~PPT .
vhere' )ROONRESERVE inse.~ ~ES70i) (node labelled A in Figure 4)APPT.who ?
input from personnameThe user must provide a value from the domainpersonname.2) (node labelled D in Figure 4)RES.date ?
APPT.dateThe value for ApPT.date is used as the valueRES.date.An example of restriction is: (node B in Figure 4)APPT.who in R1 where R1 = in EMP retrieve nameThis statement restricts the value of APPT.who tobe a company employee.Also in Figure 4, the symbols RI, R2, R 3 and R 4stand for the retrievalsR I = i_~nEMP retrieve nameR 2 = i_nn EMP retrieve office where name =ApPT.nameR 3 = i_~n EMP retrieve office where name =APPT.name or name = APPT.who.R 4 = in ~MP retrieve supervisor where name =APPT.name.In Node B, INFORM(APPT.who, APPT.name, 'meetingwith me on %APPT.date at %APPT.time') stands foranother verbgraph that represents sending a messageby inserting a tuple in MAILBOX.
We can treat theINFORM verbgraph as a procedure by specifyingvalues for all the slots that must be filled frominput.
The input slots for INFORM are (name, from,message).III.
WHAT CAN WE DO WITH IT?One use for the verbgraphs is in support of NLdirected manipulation of the DB.
in particular,they can aid in variant selection.
We assume thatthe correct verb sense has already been selected; wediscuss sense selection later.
Our goal is to useinformation in the query and user responses toquestions to identify a path in the verbgraph.
Letus refer again to the verbgraph for SCHEDULE-APPOINTMENT shown in Figure 4.
Suppose the usercommand is "Schedule an appointment with JamesParker on April 13" where James Parker is a companyemployee.
Interaction with the verbgraph proceedsas follows.
First, information is extracted fromthe command and classified by domain.
For example,James Parker is in domain personname, which canonly be used to instantiate APPT.name, APPT.who,APPT2.name and APPT2.who.
However, since USER isa system variable, the only slots left are APPT.whoand APPT2.name, Wblch are necessarily the same.Thus we can instantiate APPT.who and ApPT2.namewith "James Parker."
We classify "April 13" as acalendar date and instantiate APPT.date, APPT2.dateand RES.date with it, because all these must be thesame.
No more useful information is in the query.Second, we examine the graph to see if a uniquepath has been determined.
In  this case it hasnot.
However, other possibilities are constrainedbecause we know the path must go through node B.This is because the path must go through eithernode B or node C and by analyzing the response toretrieval RI, we can determine it must be node B(i.e., James Parker is a company employee).
Nowwe must determine the rest of the path.
One deter-mination yet to be made is whether or not node Dis in the path.
Because no room was mentioned inthe query, we generate from the graph a questionsuch as '";here will the appointment take place?
"Suppose the answer is "my office."
Presume wecan translate "my office" into the scheduler'soffice number.
This response has two effects.First, we know that no room has to be reserved, sonode D is not in the path.
Second, we can fill inAPPT.where in node F. Finally, all that remainsto be decided is if node H is on the path.
Aquestion like "Should we notify your supervisor?
"is generated.
Supposing the answer is "no."
Nowthe path is completely determined; it containsnodes A, B and F. Now that we have determined aunique path in the graph, we discover that not allthe information has been filled-in in every nodeon the path.
We now ask the questions to completethese nodes, such as '~nat time?
", "For how long?
"and "~at  is the topic?".
At this point we have acomplete unique path, so the appropriate calls toINFORM can be made and the parameterized trans-action in the footer can be filled-in.Note that the above interaction was quite rig-idly structured.
In particular, after the userissues the original command, the verbgraph instan-tiation program chooses the order of the subsequentdata entry.
There is no provision for default, oroptional values.
Even if optional values wereallowed, the program would have to ask questionsfor them anyway, since the user has no opportunityto specify them subsequent to the original command.We want the interaction to be more user-dlrected.Our general principle is to allow the user tovolunteer additional information during the courseof the interaction, as long as the path has notbeen determined and values remain unspecified.
Weuse the following interaction protocol.
The userenters the initial command and hits return.
Theprogram will accept additional lines of input.However, if the user just hits return, and the pro-gram needs more information, the program will gener-ate a question.
The user answers the question,followed by a return.
As before, additional infor-mation may be entered on subsequent lines.
If theuser hits return on an empty line, another questionis generated, if necessary.Brodle\[Br813 and Skuce\[Sk80\] both presentsystems for representing DB change.
Skuce'sgoal is to provide an English-like syntax for DBprocedure specification.
Procedures have a rigidformat and require all information to be enteredat time of invocation in a specific order, as withany computer subprogram.
Brodie is attempting toalso specify DB procedures for DB change.
Heallows some information to be specified later, butthe order is fixed.
Neither allow the user tochoose the order of entry, and neither accomodates71variants that would require different sets ofvalues to be specified.
However, like our method,and unlike Kaplan and Davidson\[KD81\], they attemptto model DB changes that correspond to real worldactions rather than just specifying English syno-nyms for single DB come, ands.Certain constraints on updates are impliciton verbgraphs, such as APPT.where ?
input from R3,which constrains the location of the meeting to bethe office of one of the two employees.
We alsouse verbgraphs to maintain database consistency.Integrity constraints take two forms: constraintson a single state and constraints on successivedatabase states.
The second kind is harder to en-force; few systems support constraints on succes-sive states.Verbgraphs provide many opportunities forspecifying various defaults.
First, we can specifydefault values, which may depend on other values.Second, we can specify default paths.
Verbgraphsare also a means for specifying non-DB operations.For example, if an appointment is made with someoneoutside the company, generate a confirmation letterto be sent.All of the above discussion has assumed we areselecting a variant where the sense has alreadybeen determined.
In general sense selection, beingequivalent to the frame selection problem inArtifical Intelligence\[CW76\], is very difficult.We do feel that verbgraph will aid in sense selec-tion, but will not be as efficacious as for variantselection.
In such a situation, perhaps the Englishparser can help disambiguate or we may want to askan appropriate question to select the correctsense, or as a last resort, provide menu selection,IV.
AN ALTERNATIVE TO VERBGRAPHSWe are currently considering hierarchicallystructured transactions, as used in the TAXISsemantic model \[MB80\], as an alternative to verb-graphs.
Verbgraphs can be ambiguous, and do notlend themselves to top-down design.
Hierarchicaltransactions would seem to overcome both problems.Hierarchical transactions in TAXIS are not quite asversatile as verbgraphs in representing variants.The hierarchy is induced by hierarchies on theentity classes involved.
Variants based on therelationship among particular entities, as recordedin the database, cannot be represented.
Forexample, in the SCHEDULE-APPOINTME/{T action, we maywant to require that if a supervisor schedules ameeting with an employee not under his supervision,a message must be sent to that employee's super-visor.
This variant cannot he distinguished byclasslfl \[ng one entity as a supervisor and theothe?
as an employee because the variant does notapply when the supervisor is scheduling a meetingwith his own employee.
Also all variants in a TAXIStrausaction hierarchy must involve the same entityclasses, where we may want to involve some classesonly in certain variants.
For example, a variantof SCHEDULE-APPOINTMENT may require that a secretarybe present to take notes, introducing an entityinto that variant that is not present elsewhere.We are currently trying to extend the TAXISmodel so it can represent such variants.
Our ex-tensions include introducing guards to distinguishspecializations and adding optional actions andentities to transactions.
A guard is a booleanexpression involving the entities and the databasethat, when satisfied, indicates the associatedspecialization applies.
For example, the guardscheduler i__nnclass(supervisor) andscheduler # supervisor-of(schedulee)would distinguish the variant described abovewhere an employee's supervisor must be notifiedof any meeting with another supervisor.
The dis-crimination mechanism in TAXIS is a limited formof guards that only allows testing for entitiesin classes.\[Br78\]\[Br81\]\[C~Sl\]\[cw76\]\[Ch76\]\[Co79\]\[Da78\]\[~M81\]\[Ha77\]V. REFERENCESBrodie, M.L., Specification and verifica-tion of data base semantic integrity.CSRG Report 91, Univ.
of Toronto, April1978.Brodie, M.L., On modelling behavioralsemantics of database.
VLDB 7, CannesFrance, Sept. 1981.Carbonell, J. and Hayes, P., Multi-strategy construction-specification pars-ing for flexible database query and up-date.
CMU Internal Report, July 1981.Charniak, E. and Wilks, Y., ComputationSemantics.
North Holland, 1976.Chen, P.P.-S., The entity-relationshipmodel: toward a unified view of data.ACM TODS i:I, March 1976, pp.
9-36.Codd, E.F., Extending the database rela-tional model to capture more meaning.
ACMTODS 4:4, December 1979, pp.
397-434.Damereau, F.J., The derivation of answersfrom logical forms in a question answeringsystem.
American Journal of ComputationalLinguistics.
Microfiche 75, 1978,pp.
3-42.Hammer, M. and McLeod, D., Databasedescription with SDM: A semantic databasemodel.
ACM TODS 6:3, Sept. 1981,pp.
351-386.Harris, L.R., Using the database itselfas a semantic component to aid the parsingof natural language database queries.Dartmouth College Mathematics Dept.TR 77-2, 1977.72IRa79\]\[m~81\]\[~m8o\]\[Sa78\]\[Sa79\]\[skSO\]\[Wa78\]\[wisz\]\[Wo76\]\[wz7s\]Kaplan, S.J., Cooperative responses from anatural language data base query system.Stanford Univ.
Heuristic ProgrammingProject paper HPP-79-19.Kaplan, S.J., and Davidson, J., Inter-preting Natural Language Updates.
Proceed-ings of the 19th Annual Meeting of theAssociation for Computational Linsulstlcs,June 1981.Mylopoulos, J., Bernstein, P.A., and Wong,H.K.T., A language facility for designingdatabase-lntensive applications.
ACMTODS 5:2, June 1980, pp.
397-434.Salveter, S.C., Inferring conceptual struc-tures from pictorial input data.
Univer-sity of Wisconsin, Computer Science Dept.,TR 328, 1978.Salveter, S.C., Inferring conceptualgraphs.
Cognitive Science~3, pp.
141-166.Skuce, D.R., Bridging the gap betweennatural and computer language.
Proc.
ofInt'l Congress on Applied Systems, andCybernetics, Acapulco, December 1980.Walker, D.E., Understanding SpokenLanguage.
American Elsevier, 1978.Wiederhold, G., Kaplan, S.J., andSagalowicz, D., Research in knowledge basemanagement systems.
SIG%IOD Record, VII,#3, April 1981, pp.
26-54.Woods, W., et.
al., Speech UnderstandingSystems: Final Technical Progress Report.BBN No.
3438, Cambridge, MA, 1976.Waltz, D., Natural language access to alarge database: an engineering approach.In Proc.
of the Fourth Int'l Joint Conf.onArtlficial Intelligence, 1976.73
