Proceedings of the Fourth International Natural Language Generation Conference, pages 47?54,Sydney, July 2006. c?2006 Association for Computational LinguisticsGenerating References to Parts of Recursively Structured ObjectsHelmut HoracekUniversit?t des SaarlandesFB 6.2 Informatikhoracek@cs.uni-sb.deAbstractAlgorithms that generate expressions toidentify a referent are mostly tailoredtowards objects which are in some senseconceived as holistic entities, describingthem in terms of their properties andrelations to other objects.
This approachmay prove not fully adequate whenreferring to components of structuredobjects, specifically for abstract objectsin formal domains, where scope andrelative positions are essential features.In this paper, we adapt the standard Daleand Reiter algorithm to specifics of suchreferences as observed in a corpus aboutmathematical proofs.
Extensions incor-porated include an incremental speciali-zation of property values for metonymicreferences, local and global positionsreflecting group formations and impli-cature-based scope preferences to justifyunique identification of the intendedreferent.
The approach is primarilyrelevant for domains where abstractformal objects are prominent, but someof its features are also useful to extendthe expressive repertoire of referencegeneration algorithms in other domains.1 IntroductionOver the past two decades, a number of algo-rithms for generating referring expressionshave been proposed.
Almost all of thesealgorithms conceive objects in some sense asholistic entities, describing them in terms oftheir properties and relations to other objects,but not treating components of an object asobjects in their own rights.
This approach mayyield inadequate results for references tocomponents of recursively structured objects.Consider, for instance, a Rubic?s cube whereone side is currently visible, and reference isintended to a square consisting of the visiblesquares of four white subcubes, which are theonly white elements on the visible side.
Thebest way to refer to this composed structure isthe concise ?the white square?, which exploitsa preference for maximum scope objects,typical for such recursive structures.
However,most reference generation algorithms wouldattempt to disambiguate the intended referentfrom its four components, producing an unne-cessarily long expression, such as ?the bigwhite square?
or ?the white square which iscomposed of four squares?.
These expressionsare not really bad, especially the first one, butthings might turn out really awkward for morecomplex structural compositions, where themaximum scope preference often allows theidentification in a surprisingly concise form.In this paper, we address this problem byexamining referring expressions produced byhumans in domains with recursively structuredobjects playing a prominent role.
Specifically,we have studied referring expressions in acorpus of simulated human-computer dialogsabout tutoring mathematical problem-solving(Wolska et al 2004, with recent additions inthis paper).
We express the criteria and prefer-ences observed in a way compatible with theincremental reference generation algorithm ofDale and Reiter (1995), and we extend theiralgorithm by adapting the property selectionand discrimination testing criteria accordingly.This paper is organized as follows.
First, wemotivate our approach.
Then we describe ourcorpus and the relevant phenomena observedin it.
Next, we present extensions to the incre-mental algorithm that allow the generation ofthis kind of referring expressions.
Finally, weillustrate how some examples from the corpusare handled and discuss our achievements.472 Previous WorkWithin this paper, we adopt Dale?s terminology(1988).
A referential description (Donellan1966) serves the purpose of letting the heareror reader identify a particular object or set ofobjects in a situation.
Referring expressions tobe generated are required to be distinguishingdescriptions, that is, descriptions of the entitiesbeing referred to, but not to any other object inthe context set.
A context set is defined as theset of the entities the addressee is currentlyassumed to be attending to ?
this is similar tothe concept of focus spaces of the discoursefocus stack in Grosz?
& Sidner?s (1986) theoryof discourse structure.
Moreover, the contrastset (the set of potential distractors (McDonald1981)) is defined to entail all elements of thecontext set except the intended referents.Generating referring expressions is pursuedsince the eighties (e.g., (Appelt 1985), amongseveral others).
Subsequent years were charac-terized by a debate about computational effi-ciency versus minimality of the elementsappearing in the resulting referring expression(Dale 1988, Reiter 1990, and several others).
Inthe mid-nineties, this debate seemed to besettled in favor of the incremental approach(Dale and Reiter 1995) ?
motivated by resultsof psychological experiments (e.g., Levelt1989), certain non-minimal expressions aretolerated in favor of adopting the fast strategyof incrementally selecting ambiguity-reducingattributes from a domain-dependent preferencelist.
Complementary activities include thegeneration of vague descriptions (van Deemter,2000) and extensions to multimodalexpressions (Van der Sluis 2005).
Recently,algorithms have also been developed to theidentification of sets of objects rather thanindividuals (Bateman 1999, Stone 2000,Krahmer, v. Erk, and Verweg 2001), and therepertoire of descriptions has been extended toboolean combinations of attributes, includingnegations (van Deemter 2002).
To avoid thegeneration of redundant descriptions whatincremental approaches typically do, Gardent(2002) and Horacek (2003) proposed exhaust-ive resp.
best-first searches.All these procedures more or less share thedesign of the knowledge base which bearsinfluence on the descriptor selection.
Objectsare conceived as atomic entities, which can bedescribed in terms of sets of attributes andrelations to other objects.
In such a setting, astructured object can be represented, amongothers, by a set of relations to its components,which are themselves conceived as objects.
Anexception to this method is the work by Para-boni and van Deemter (2002) who use hierar-chical object representations to refer to parts ofa book (figures, sections., etc.).
Reference tosuch a component is made identifiable by iter-atively adding a description of embeddingstructures until obtaining uniqueness.
Thereare, however, no approaches addressing identi-fication of objects or their components whenthe structures in these objects are of a recursivenature.
Objects of this kind are mostly abstractones, such as formulas, but also some sorts ofgeometric objects.
Typical applications wheresuch objects are prominent include scientific-technical documentation and tutoring systems.As we will see in the next section, naturallyobserved references to such objects have anumber of particularities which are notaddressed by existing generation algorithms.3 A Corpus with References to FormulasIn this paper, we analyze some phenomena inthe context of references to mathematicalformulas and their components, as observed ina corpus on simulated man-machine tutoringdialogs (Wolska et al, 2004).
These dialogsconstitute the result of Wizard-of-Oz exper-iments in teaching students mathematicaltheorem proving in naive set theory resp.mathematical relations.
In these experiments, ahuman wizard took the role of the tutor, withconstraints on tutoring strategy and on use ofnatural language, although the constraints onnatural language use were relaxed to encour-age natural behavior on behalf of the student.In the corpus obtained this way, a numberof quite particular expressions referring tocomponents of recursively structured objects ?the formulas ?
showed up.
Consequently, it isour goal to automate the production of thesekinds of referring expressions in a more elab-orate version of the simulated tutoring system,with full-fledged natural language generation.Representative examples originating fromour corpus appear in Figure 1.
Each exampleconsists of two parts: 1. a student utterance,mostly a formula, labeled by (#a), which is thecontext for interpreting subsequent referringexpressions, the intended referent appearing in481.
Reference to the typographic order(1a) (R?S)-1 = {(x,y) | (y,x) ?
R?S} = {(x,y) | ?z (z ?
M ^ (x,z) ?
R-1 ^ (z,y) ?
S-1)} = R-1?S-1(1b) Das geht ein wenig schnell.
Woher nehmen Sie die zweite Gleichheit?
(That was a little too fast.
How did you find the second equality?
)(2a) Nach 9 ?
((y,z) ?
R ^ (z,y) ?
S)(2b) Fast korrekt.
Das zweite Vorkommen von y mu?
durch x ersetzt werden.Almost correct.
The second occurrence of y must be replaced by x.
(3a) (R ?
S)?T ist dann {(x,y) | ?z (z ?
M ^ ((x,y) ?
R ?
(x,y) ?
S) ^ (y,z) ?
T)}(3b) Nicht korrekt.
Vermutlich liegt der Fehler nach der letzten ?und?-Verkn?pfungNot correct.
The mistake is probably located after the last ?and?-operation2.
Reference by exploiting default scope and metonymic relations(4a) (R?S)-1 = {(x,y) | ?z (z ?
M ^ (y,z) ?
R-1 ^ (z,x) ?
S-1)} ?
S-1?R -1(4b) Nein, das ist nicht richtig!
Vergleichen Sie den zweiten Term mit Ihrer vorhergehendenAussage!No, this is not correct!
Compare the second term with your previous assertion!
(5a) {(x,y) | (y,x) ?
(R?S)} =  {(x,y) | (x,y) ?
{(a,b) | ?z (z ?
M) ^ (a,z) ?
R ^ (z,b) ?
S}}(5b) Das stimmt so nicht.
Die rechte Seite w?re identisch mit R?S.This is not correct.
The right side would be identical to R?S.
(6a) {(x,y) | ?z (z ?
M) ^ ((x,z) ?
R ?
(x,z) ?
S) ^ (z,y) ?
S} ={(x,y) | ?z (z ?
M) ^ (z,y) ?
S ^ ((x,z) ?
R ?
(x,z) ?
S)} ?
((y,z) ?
S ^ (z,y) ?
S)(6b) Auf der rechten Seite ist z nicht spezifiziertOn the right side, z is not specified(7a) {(x,y) | ?z (z ?
M) ^ ((x,z) ?
R ?
(x,z) ?
S) ^ (z,y) ?
S} = {(x,y) | ?z (z ?
M) ^(z,y) ?
S ^ ((x,z) ?
R ?
(x,z) ?
S)} ?
?z (z ?
M ^ ((y,z) ?
S ^ (z,y) ?
S))(7b) Diese Aussagen scheinen nicht gleichwertig zu sein.
Ein z, das die Bedingung der rechtenAussage erf?llt, mu?
nicht die Bedingung der linken Menge erf?llen.These assertions do not seem to be of equal range.
A z which fulfills the condition of theright assertion does not necessarily fulfill the condition of the left set.3.
Reference by exploiting default scope for building groups of objects(8a) K((A ?
B) ?
(C ?
D)) = K(A ?
B) ?
K(C ?
D)(8b) De Morgan Regel 2 auf beide Komplemente angewendet.De Morgan Rule 2, applied to both complements.
(9a) (T-1?S-1)-1 ?
(T-1?R-1)-1 = {(x,y) | (y,x) ?
(T-1?S-1) ^ (y,x) ?
(T-1?R-1)}(9b) Dies w?rde dem Schnitt der beiden Mengen entsprechen.This would correspond to the intersection of both sets.4.
Reference to regions by expressions involving vagueness(10a) Also ist (R ?
S)?T = {(x,z) | ?v (((x,v) ?
R ?
(x,v) ?
S) ^ (z,v) ?
T)}(10b) Fast richtig.
Am Ende der Formel ist ein Fehler.Almost correct.
At the end of the formula, there is a mistake.
(11a) Wegen der Formel f?r die Komposition folgt (R ?
T)?
(S ?
T) ={(x,z) | ?z ((x,z) ?
R ^ (z,y) ?
T) ?
?z ((x,z) ?
R ^ (z,y) ?
T)}(11b) Fast richtig.
In der zweiten H?lfte der Formel ist ein Fehler.Almost correct.
In the second half of the formula, there is a mistake.Figure 1: References to components of mathematical objects in dialog fragments of our corpus49bold, and 2. a tutor response labeled by (#b),with at least one referring expression, in italics.Texts are given in the original German version,accompanied by a translation into English.The examples are partitioned into four cate-gories.
The first one, (examples 1 to 3), illus-trate references by the typographical position,from left to right.
Items referred to in thismanner are qualified by their formal category.
(1) refers to an equality ?
two terms joined byan equal sign ?
in a sequence of three equa-lities.
(2) refers to an instance of a variable, y,which must be further qualified by its positionto distinguish it from another occurrence.
(3)refers to the last occurrence of the and oper-ator.
Distinct surface forms are used for objectsreferred to by category (?second equality?)resp.
by name (?second occurrence of y?
).The second category, the only one specificto recursively structured objects, comprisesreferences which look similar to the previousones, but they do not reflect the typographicalposition but structural embeddings.
Objectsreferred to by this kind of expressions arefound on the top level of the embedding objector close to it.
In most cases, references to theembedding level where the intended referent isto be found are left unexpressed, which carriesthe implicit meaning that the referent appearsat the top most level in which the referred cate-gory can be found.
In (4), for example, theentire formula contains many terms as itscomponents, in various levels of embedding, sothat orientation on typographic positions is notclear.
However, on top level of the inequationchain, there are only three terms and the orderamong these is perfectly clear.
(5) and (6)illustrate the role of incompleteness ?
only?right side?
is mentioned, leaving the objectwhose right side is meant implicit.
Conse-quently, this must be the right side of the wholeformula.
The last example in this category, (7)shows the reference to different levels ofembedding in one sentence.
While ?rightassertion?
refers to the expression on the rightside of the equivalence on top level, ?left set?refers to the left of the two sets in the equationon the left side of that equivalence.The third category, which features the refer-ence to sets of objects, shows the interpretationof the embedding level in which the intendedreferent is to be found on the basis of numberconstraints.
In precise terms, this is an instanceof implicature (Grice 1975): if the number ofobjects that are on top level of the embeddingobject and satisfy the description, exceeds thecardinality specified, identification of theintended referents is transferred to one of theembedded substructures.
In (8), three subex-pressions satisfy the metonymic description?complement?, but the expression refers onlyto two.
Consequently, the intended referentsmust be found in one of the substructureswhere a precise cardinality match is present ?here, the right side of the equation.
Due to theimplicature, expressing this additional qualifi-cation is not required.
An additional compli-cation arises in the context of interferenceacross referring expressions in one sentence.
In(9), ?both sets?
would be resolved to the twosides of the equation, without the context of thewhole sentence.
However, since ?this?
refersto the result of the preceeding assertion, that is,the right side of the equation, this part is insome sense excluded from the context forresolving the next referring expressions.Hence, the left side of the equation yields thetwo sets on top level as interpretation.The fourth category comprises examples ofreferences which are in some sense associatedwith vagueness.
In references to formulas, weconsider the end  (example (10)) ?
whichmeans the region towards the end, as a vagueexpression, but also the second half (example(11)), since it is not entirely clear whether thisexpression must be interpreted structurally ortypographically, and a precise interpretation of?half?
in the typographical sense is pointless.In the following, we present methods for theautomated generation of referring expressionsof the kind illustrated in Figure 1 ?
conciseones.
We address the following phenomena:?
Implicit scope interpretation?
Incomplete or metonymic expressions?
Implicatures of category and cardinalityWe do, however, restrict our task to thegeneration of single referring expressions withprecise references.
Hence, we do not addressvagueness issues, since the meaning ofexpressions as occurring in (10) and (11) isnot fully clear.
Moreover, we do not accom-modate the context due to previously gener-ated referring expressions as in (9), which weassume to be done by the embedding process.503 OperationalizationIn this section, we describe an operationali-zation of generating referring expressions ofthe kind discussed in the previous section.
Thisoperationalization is realized in terms ofextensions to the algorithm by Dale and Reiter(1995).
This algorithm assumes an envir-onment with three interface functions: Basic-LevelValue, accessing basic level categories ofobjects (Rosch 1978), MoreSpecificValue foraccessing incrementally specialized attributevalues according to a taxonomic hierarchy, andUserKnows for judging whether the user isfamiliar with the attribute value of an object.
Ina nutshell, MakeReferringExpression (Figure 2,including our extensions) iterates over the attri-butes P of an intended referent r (or a set ofreferents).
In FindBestValue, a value is chosenthat is known to the user and maximizes discri-mination (RulesOut) ?
this value describes theintended referent and rules out at least onepotential distractor in C. If existing, such valuesare iteratively collected in L, until P is empty ora distinguishing description is found.
Thevalue V  of an attribute A is chosen within anembedded iteration, starting with the basic levelvalue attributed to r, after which more specificvalues also attributed to r and assumed to beknown to the user are tested for their discri-minatory power.
Finally, the least specific valuethat excludes the largest number of potentialdistractors and is known to the user is chosen.The extensions to handle particularities forour concerns comprise several components:?
The knowledge representation of objectsis enhanced by properties expressingpositions in some context and by a meta-property about the use of descriptors  ?metonymic use of a descriptor whenstanding in relation to another one.?
The value selection for context-dependentdescriptors requires special treatment;moreover, metonymic expressions arebuilt in some sort of a two-step process.?
The discriminatory power in the subpro-cedure RulesOut  is interpreted in localcontexts for attributes expressing position.?
Termination criteria include a test whethera cardinality or position-based impli-cature establishes a unique preference.Group(x) ::=G ?
{y | ?z (?y dominates(z,y))} ^ G ?
xT-group-items :: ={x | ?y (?
?z dominates(z,y) ^ ?x dominates(y,x))}L1-items :: ={x | ?y (y ?
T-group-items ^ dominates(y,x))}Group-pref(Group,N,V) :: =|(r ?
C) ?
Group| = N ^?x ?
((r ?
C) ?
Group): Position(x,Group,N) = VT-group-pref(N,V) ::=Group-pref(T-group-items,N,V)L1-group-pref(x,N,V) ::= ?T-Group-pref(N,V) ^L1-items ?
Group(x) ^ Group-pref(x,N,V) ^(?y (Group(y) ^ L1-items ?
Group(y)):(x?y ?
?Group-pref(y,N,V)))Figure 2: Definitions with group componentsIn order to precisely define the extensions,we introduce some predicates and formal defi-nitions for them (Figure 2).
Composition inrecursively structured objects is built on domi-nates(x,y), expressing that component y is partof component x ; chained compositions ofdominates are acyclic.
On that basis, groups ofitems are built according to local contexts.
AGroup which some items x belong to is the setof items dominated by one same item, ifexisting.
Otherwise, Group is empty.
A specialgroup is the set of items on top level, T-group-items, which are all dominated by the entirestructure, the root item, which is not domi-nated by any item.
These items also build agroup.
In contrast, L1-items, which comprisethe items one level below the T-group-items,are not all in one group.
Intersection with theGroup predicate yields subsets, where eachelement in these sets is dominated by one andthe same T-group-item (see the definition ofL1-group-pref).
A central definition is Group-pref (group preference), used for testing theeffect of implicatures.
It is defined for the setof relevant items to be used within the algo-rithm (r ?
C), that is, the intended referentsand still existing distractors, in relation to aGroup , in the context of cardinality N  andposition V, which apply to the set of items.
Forthat group to be preferred, the relevant itemsfalling into that group must match the givencardinality and the position description (seethe definition of Position in the next para-graph).
On that basis, T-group-pref expresses51MakeReferringExpression (r,C,P)L ?
{}, Ctotal ?
C       [1]for each member Ai of list P docase Ai of    [2]cardinality: V ?
|r|      [3]global-position: V ?
Position(r,Ctotal,|r|)    [4]local-position: V ?
Position(r,Group(r),|r|)    [5]other: V = FindBestValue(r,Ai,BasicLevelValue(r,Ai))end caseif RulesOut(<Ai,V>,C) ?
nil thenif metonymic(Ai,X) and <type,X> ?
L for some X      [6]and RulesOut(<Ai,V>,Ctotal) ?
[7]RulesOut(<type,X>,Ctotal)     [8]then L ?
L  \ {<type,X>} ?
{<type,V>}      [9]else L ?
L ?
{<Ai,V>} end ifC ?
C - RulesOut(<Ai,V>,C)    [10]end ifif C = {} or Preference-by-Implicature then   [11]if <type,X> ?
L for some Xthen return L (an identifying description)else return L ?
{<type,BasicLevelValue(r,type)>}end if end ifend forreturn L (a non-identifying description)FindBestValue (r,A,initial-value)if UserKnows(r,<A,initial-value>) = truethen value ?
initial-valueelse value ?
no-value end ifif (spec-value ?
MoreSpecificValue(r,A,value)) ?
nil ^(new-value ?
FindBestValue(r,A,spec-value)) ?
nil ^(|RulesOut(<A,new-value>,C)| >|RulesOut(<A,value>,C)|)  [12]then value ?
new-value end ifreturn valueRulesOut (<A,V>,C)  [13]if V = no-value then return nilelse case Ai of  [14]cardinality: return C ?
?
Group(c) c ?
C,where |Group(c) ?
C | < V  [15]global-position: return {x : x ?
C ^ Position(x,Ctotal,|r|) ?
V  [16]local-position: return {x : x ?
C ^ Position(x,Group(x),|r|) ?
Vother: return {x: x ?
C ^ UserKnows(x,<A,V>) = false}end case end ifPreference-by-Implicature  [17]V ?
any, N ?
anyif <global-position,V> ?
L ?
<local-position,V> ?
L ?<cardinality,N> ?
L  then  [18]return (T-group-pref(|r|,V) ^ T-group-items ?
r ) ?
(L1-items ?
r ^  L1-group-pref(r,|r|,V))  [19]else return false end ifFigure 3: The algorithm in pseudo-codepreference for top-group items, when boundto Group, and L1-group-pref expresses prefer-ence for such a group with x one level below.The knowledge representation of objects isenriched by some properties which are notintrinsic to an object itself.
These propertiescomprise descriptors cardinality, position, andthe meta-property metonymic.
The predicatemetonymic(x,y) expresses the acceptability ofa metonymic reference of a descriptor x for acategory y (e.g., an operator for a formula, inmathematical domains).
The descriptor cardi-nality easily fits in the standard schema of theprocedure.
However, it only contributes to thediscrimination from potential distractors in thecontext of effects of implicature.
The mostcomplex addition is the descriptor position,which expresses some sort of relative positionof an object considered within the context of aset of comparable objects (e.g., first, second).There are two dimensions along which suchdescriptors are meaningful in the domain ofmathematical formulas and in similar domainswith recursively structured objects: (1) thetypographical position within the entire object,referred to by the descriptor global-position,and (2) the position within the structural levelwhere the object in question resides, referredto by the descriptor local-position.
Moreover,that position also depends on the number ofobjects considered, if subgroups of objects arebuilt prior to checking their position withinthe entire group (e.g,: the first two items).
Thisinformation is encapsulated in the functionPosition(x,y,n), where x denotes the object orset of objects whose position within group y isthe value of that function, where subgroups ofn  objects are formed.
In order to yield aproper result, x must be a subset of y and theposition value within y must be the same forall elements of x.
Otherwise, the value is unde-fined.
For example, for a group G=<1,2,3,4,5,6>, Position({3},G,1) = 3, Position({3},G,2)= 2, and Position({2,3},G,2) = undefined.
Insome sense, this handling of positions is ageneralization of the ordering for vaguedescriptors in (van Deemter 2006).
Also inaccordance with van Deemter, we separatedescriptor selection from surface form deter-mination, yielding, for example, ?left set?
for{<type,set>, <local-position,first>}, the firstpart of an equation, and ?second occurrenceof x?
for {<type,x>, <local-position,second>}.52In order to process these enhanced represen-tations adequately, we have incorporatedappropriate modifications in the procedureMakeReferringExpression (labeled by [#] inFigure 3).
First, the original set of potentialdistractors is stored for computations within aglobal context [1].
Then the value selectionfor the attribute currently considered is done[2], which is different from the usual call toFindBestValue for cardinality [3], global-position [4], and local-position [5]; the lattertwo are realized by the function Position, withappropriate instantiations for the group para-meter.
Next, the treatment for the inclusion ofmetonymic properties in the description isaddressed.
If the metonymic descriptor fits tothe object category [6], and its discriminatorypower [7] dominates that associated with thetype descriptor [8], the descriptor values areconflated by overwriting the type value bythat of the metonymic descriptor [9].
The twocalls to RulesOut involved in the above test([7] and [8]) are the only references to RulesOut where effects on the original, entire set ofdistractors are tested.
Therefore, the parameterC is added in the definition of RulesOut [13]and in all other places where that procedure iscalled [10], [12].
Similarly to the inclusion ofattribute-value pairs in the description, theexclusion tests in RulesOut are specific fornon-intrinsic attributes [14].
For cardinality,those distractors are excluded which belong toa group where the number of still relevantdistractors (those consistent with the partialdescription built so far) is below that cardina-lity [15].
Similarly, for testing position values,those distractors are picked for which thevalues returned by the function Position, independency of the relevant scope ?
the groupthe intended referent(s) belong to, are notconsistent with value of the attribute consi-dered (global-position resp.
local-position)[16].
Finally, the termination criterion [11] isenhanced, by taking into account the effect ofimplicatures through cardinality and positiondescriptors, by the function Preference-by-implicature [17].
In this function, the valuesof cardinality and global-position or local-position are instantiated, provided they appearin the description L [18].
The return value isthe result of a test whether there exists prefer-ence for the top-level, or for that level 1 groupwhich contains the intended referents [19].4 ExamplesIn this section, we illustrate how particularitiesof our application domain are modeled andhow the procedure behaves in generating thereferring expressions observed in our corpus.The ordered list of attributes, P, consists of<type, form, cardinality, global-order, local-order> for atomic items and of <type, oper-ator, cardinality, local-order, dominated-by>for the composed expressions ?
dominated-byis the inverse of dominates.
The meta-predi-cate metonymic is instantiated for pairs <vari-able, form>, <expression, local-order>, and<term, operator> for producing expressionssuch as ?x?
referring to variable x, ?leftside?
referring to the left part of an assertionor equation, and ?complement?
referring toa term with complement as top level operator.We show the generation of two examples.1.
example: ?Left set?
in (7) in Figure 1.It is generated by choosing ?set?
as the type,followed by unsuccessful attempts to pick anoperator attribute (there is none defined forthat set), and a cardinality (which yields nodiscrimination).
Then ?first?
is chosen forlocal-ordering, yielding unique identification(the embedding is left implicit), and this valueis expressed by ?left?
on the surface.2.
example: ?both complements?
in (8).It is generated by choosing ?term?
as thetype, followed by ?complement?
as the oper-ator , which overwrites ?term?
due to itsspecification as metonymic with respect to thatcategory.
Then ?2?
is chosen for cardinality,which yields unique identification since asubgroup preference for level one is present.Altogether, the algorithm is able to gener-ate the expressions occurring in our corpus, orquite similar ones, assisted by the application-specific tailored list P. Exceptions constitutereference to regions related to some formulacomponent, such as (3) in Figure 1, effects ofinterference of scope across several referringexpressions, such as (9), and expressionsinvolving vague region descriptors, such as(10) and (11).
While the last set of examplescomprises more than referring expressions,the first two can be handled, but the generatedexpressions are typically a bit cumbersome,such as ?the third term in the condition of theset?
instead of ?after the last ?and?-oper-ation?
in (3) and ?both sets on the left side?instead of simply ?both sets?
in (9).535 Conclusion and DiscussionIn this paper, we have presented an approach togenerating referring expressions that identifycomponents of recursively structured objects.Known techniques are enhanced by measuresbuilding metonymic expressions, descriptorsexpressing positions relative to some subgroupof object components, and exploiting the effectof implicatures due to cardinality and positiondescriptors.
Concise expressions can be gener-ated, in accordance with those in our corpus.While our elaborations are domain-specificto a certain extent, several parts of our methodare also much broader applicable.
Metonymicexpressions are quite common, and we thinkthat building them within the task of referencegeneration is superior to doing this in a processthereafter, because this enables an easy compu-tation of the discrminatory power of both alter-natives, the implicit and the explicit one.Another aspect of broader relevance concernsthe effect of implicatures in connection withobject subgroups.
While the group buildingitself, which is based on compositions of therelation dominates, is specific to our envir-onment, the techniques to establish preferencesamong groups and deriving identification fromthat pertain to other environments.
Forinstance, when a subgroup of two items ofsome kind is visually identifiable in the contextof a few other subgroups with different cardi-nalities, ?the two X?s?
would lead to the identi-fication of the subgroup in focus, through theeffect of implicature, the group formationbeing based on local proximity.
Thus, only thegroup formation schema needs to be changed.ReferencesAppelt, D. 1985.
Planning English ReferringExpressions.
Artificial Intelligence 26, pp.
1-33.Bateman, J.
1999.
Using Aggregation for SelectingContent when Generating Referring Expressions.In Proc.
of the 37th Annual Meeting of the Asso-ciation for Computational Linguistics (ACL-99),pp.
127-134, University of Maryland.Dale, R. 1988.
Generating Referring Expressions in aDomain of Objects and Processes.
PhD Thesis,Centre for Cognitive Science, Univ.
of Edinburgh.Dale, R., and Reiter, E. 1995.
Computational Inter-pretations of the Gricean Maxims in the Gener-ation of Referring Expressions.
Cognitive Science18, pp.
233-263.Donellan, K. 1966.
Reference and Definite Descrip-tion.
Philosophical Review 75, pp.
281-304.Gardent, C. 2002.
Generating Minimal Definite Des-criptions.
In Proc.
of the 40th Annual Meeting ofthe Association for Computational Linguistics(ACL-2002), pp.
96-103, Philadelphia, Pennsylvania.Grice, H. 1975.
Logic and Conversation.
In Syntaxand Semantics: Vol.
3, Speech Acts, pp.
43-58,Academic Press.Grosz, B., and Sidner, C. 1986.
Attention, Intention,and the Structure of Discourse.
ComputationalLinguistics 12, pp.
175-206.Horacek, H. 2003.
A Best-First Search Algorithm forGenerating Referring Expressions.
In Proc.
of the10th Conference of the European Chapter of theAssoc ia t ion  for  Computa t iona l  Linguistics(EACL-2003), Conference Companion (shortpaper), pp.
103-106, Budapest, Hungary.Krahmer, E., v. Erk,  S., and Verleg, A.
2001.
AMeta-Algorithm for the Generation of ReferringExpressions.
In Proc.
of the 8th EuropeanWorkshop on Natural Language Generation(EWNLG-2001), pp.
29-39, Toulouse, France.Levelt, W. 1989.
Speaking: From Intention to Articu-lation.
MIT Press.McDonald, D. 1981.
Natural Language Generation asa Process of Decision Making under Constraints.PhD thesis, MIT.Reiter, E. 1990.
The Computational Complexity ofAvoiding Conversational Implicatures .
In Proc.
ofthe 28th Annual Meeting of the Association forComputational Linguistics (ACL-90), pp.
97-104,Pittsburgh, Pennsylvania.Rosch, E. 1978.
Principles of Categorization .
In E.Rosch and B. Llyod (eds.)
Cognition and Catego-rization, pp.
27-48, Hillsdale, NJ: Lawrence Erlbaum.Stone, M. 2000.
On Identifying Sets.
In Proc.
of theFirst International Conference on Natural Langu-age Generation (INLG-2000),  pp.
116-123,Mitzpe Ramon, Israel.van Deemter, K. 2000.
Generating Vague Descrip-tions.
In Proc.
of the First International  NaturalLanguage Generation Conference (INLG-2000),pp.
179-185, Mitzpe Ramon, Israel.Paraboni, I., and van Deemter, K. 2002.
GeneratingEasy References: the Case of Document Deixis.
InProc.
of the Second International Natural Langu-age Generation Conference (INLG-2002) , pp.113-119, Harriman, NY, USA.van Deemter, K. 2002.
Generating Referring Expressi-ons: Boolean Extensions of the Incremental Algo-rithm.
Computational Linguistics, 28(1), pp.
37-52.van Deemter, K. 2006.
Generating ReferringExpressions that Involve Gradable Properties.Computational Linguistics, to appear.van der Sluis, I.
2005.
Multimodal Reference.
Disser-tation, Tilburg University.Wolska, M., Vo, B., Tsovaltzi, D., Kruijff-Korbayo-v?, I., Karagjosova, E., Horacek, H., Gabsdil, M.,Fiedler, A., and Benzm?ller, C. 2004.
An Anno-tated Corpus of Tutorial Dialogs on MathematicalTheorem Proving.
In Proc.
of the 4th Inter-national Conference on Language Resources andEvaluation, pp.
1007-1010, Lisbon, Portugal.54
