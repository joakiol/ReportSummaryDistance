, .
, ?
,SERGE BOISVERT - ANDI~ DUGAS - DENISE BI'LANGEROBLING: A TESTER.FOIL TR`ANSFORMATIONAL' GKAMMAKS~.
INTRODUCTIONTransformational grammars have developed with recent researchin linguistics.
They appear to be a powerful and explicit device forcharacterizing the description of sentences; they also meet conditionsof adequacy that can be applied to check that a sentence, or a set ofrules, is well-formed.A transformational grammar tester is part of a strategy for theselection of a well-formed grammar matching the data base.
To putit more explicitly, a tester of this sort should provide the linguist aclass of the possible grammars which concerns precisely the linguistictheory.
These grammars have the form given by CUOMSKY in Aspects(see bibliograIShy).2.
GENERAL DESCRIPTION OF THE SYSTEMO~UNO is a .program for dealing with the structures of the Frenchlanguage: it performs the verification of phrase structure rules, thederivation of sentences according to the transformational componentand the graphic illustration of the intermediate or final structures.In the program, UNG is the routine that controls all the subroutinesand the matching of the input structures with those allowed by thephrase structure rules.
If the matching is impossible, a comment isAcknowledgments.
Thiswork was supported in part by Canada Council of Arts grants@69-0404 and @71-0819.We are also indebted to the staff of the Computer Center of the Universit4 du Qu4-bec ~ Montr4al for providing computing facilities, and giving this project high priority.David Sankoff, of the Universit4 de Montr6al, is also responsible for the first ver-sion of the tree editing program, l~inaUy, Jossdyne G4rard helped debugging linguisticrules.122 SERGE BOISVERT-  ANDIL~ DUGAS-  DENISE BI~,/ANGERi ee I I I I t i I e le t l I i l l l l l l e l I l I l I l l l l~: o:.
-*:- :I i eeee~.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.~>.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.9=~z?
* , 0 , ?
~ o: .
.
.
.
.
~Z .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
~goD~OoaO OUd3N1z o.
.~ ~ 3z O.
~ Z o k9 b- O.
~3JATdo:r  =:~ o 0~3qD_~ ?
:: u.
0. tk NNNIOHU~ ~ U j~ (~ ~ZD~-Z NUd~dON W Z D U ~Fig.
1.
Tree for an input sentenceOBLING: A TESTER FOR TRANSFORMATIONAL GRAMMARS 123made.
Otherwise, the output gives the graphic illustration of the treefor this sentence, or the input structures are immediately processedusing transformational rules.
For example,General transformational ru es are operated by a number of subrou-tines of which the main are explained hereafter.3.
GENERAL CAPACITIES OF THE SYSTEMThe system OBLING is divided into four parts: a main program LING,the service subroutines, the phrase structure grammar tester and thetransformational grammar testers.
LING and the service subroutines arestored in the central memory while the two grammars testers operateon disks.The main program invokes the various linguistic rules and controlsthe application of these rules to the data base structure(s) or the derivedstructure(s).
The service subroutines are called by the routines concern-ing the application of the transformational rules and work in paral-lel with LING during the processing.Phrasestructuregrammar tester" L INGService I Subroutines(processingmemories) 4--1~ ' grammar testersFig.
2.
The OBLING system4.
SPECIFIC CAPABILITIES OF THE PROGRAM LINGThe program LING will first initialize the working areas.
Then, itloads and operates the program V~rlCATEU~ which, after the readingand the verification of the input data, returns control to LINe.124 SERGE BOISVERT- ANDI~ DUGAS- DENISE BELANGERZING will then load and execute, using an overlay technique, thesmall control programs cYcH Q1, CYCLI Q2 .
.
.
.
, cYcLI Qi.
Each of thesehandles, in conjunction with HNG, the mapping on the input structureof a fixed number of transformation rules.
In the current version of theprogram, cYctI Q1 deals with the linguistic transformational rules T1to Ts included, cYcrI Q2 the rules To to T10 included, etc.
The totalnumber of these control programs cYcrI Q depends on the memoryspace allowed; processing ismost efficient if the number of these controlprograms is as small as possible.5.
INFORMATION PATTERN BETWEEN LING AND VERIFICATEURWhen VERI~CATEUR (the phrase structure grammar tester) is inmemory, the structure to be analysed is read from the standard inputunit (punched cards) and is processed by the subroutine Cr~RB~ toLINGvV~ICATBD~c'zcLi qO?
TCKARBRE ARBREverification printingof syntagmatic of the treerulesFig.
3.
The Vm~L~CAWSUa program (see figure 1 for updated tree and structure)OBLING: A TESTER FOR TRANSFORMATIONAL GRAMMARS 125be validated.
This subroutine first checks if the phrase structure is con-sistent, then calls up eke which tests the names of the constituentsdescribing the structure; finally, it compares this structure with thoseallowed by the phrase structure rules.When errors are discovered uring the processing, various sortsof comments are printed and followed if possible by a partial or fulltree of the sentence.
When updating is done, the tree is printed and theprogram VERrFACATEUR passes control to LING.
The following illustrationsconcern first, the program VERIHCATEUR and second, an example of anupdated tree and structure.6.
INFORMATION PATTERN BETWEEN LING AND THE TRANSFORMATIONALGRAMMAR TESTERSEach time LING receives the control from VERIFICATEUR, that is,when no further errors have been detected, it loops in order to callsuccessively the monitors CYCLI ql .
.
.
.
, CYCLI Q9 which contain up45 different rules; we suppose that we are working now with a specif-ic version of a grammar.The first of these monitors has the following structure.Transformational rule # 1Transformational rule # 2Transformational rule # 3Transformational rule # 4Transformational rule # 5Fig.
4.
The cYcLI Q1 programWhen CYCLI Q1 gets control, it is botmd to the application of 7'1,?
.., Ts which correspond to the first five transformational rules; thencontrol is switched to LING which calls cYCLI Q2.
The programs CYCLI qnprocess cyclic rules and the output structure is the input structure forthe following rule.
When all the cyclic rules have been applied to theinput structure, LING starts over again at CYCLI Q1.
If no modifications126 SERGE BOISVERT- ANDR~ DUGAS- DENISE BI~LANGERto the already processed structures occur, or if new errors are discovered,control  returns to LING.After all the cyclic rules have been applied, the post-cyclic rulesare processed in a similar manner: cYcu qA comprises the first fivepost-cyclic rules CYCLI Q~, the five following, and so on.This chart illustrates the general interaction between the programsfor the processing of cyclic or post-cyclic rules.I_cYcI.t Q1cYcu Q2CYCI, I Q9CYCLI QAICYCLI QBcYC~i Qi IEndFig.
5.
Flow of Control between control programs under the direction of LInG7.
SERVICE SUBROUTINESThey are implemented within the main monitor ZING.
All but afew of these subroutines are called during the execution of the routinescorresponding to the 88 rules, that is during the phrase structure anal-ysis or the mapping of n structures.A short description of the main subroutines follows: ^ R~ (tree).This subroutine is responsible for printing the tree.
At the input, wefind a vector D of ND elements which represents he tree.
The hori-zontal distance for printing is calculated along with the total numberand the relative position of these nodes; the vertical one is fixed.OBLING: A TESTER FOR TRANSFORMATIONAL GRAMMARSFor example,fACHE~ 2 #NOMRRE DE NOEUDSNOMBRE DE NOEUDSCHA/NE1 = $ O(.
I )2 = LE D( 213 = N D(3)4 = V O( ~)5 = $ D(  5 \ ]6 = $ D( 6)7 = PRP D( 7)8 = OIJE O( 8)g : LE O( 91I 0  = N D( IO)11 = V O( l l12 = $ D(12)13 : DET D(13)14 : DET 0(14)15 : GN D( iS )16 = GV D(16)17 = C D(17)18 = GN O(18)19 = GV D( lg )~0 = P O(~O)~I = P D(2121TERMINAUX= 2'0= 13= 15= 16= 20= 21= 17= 17= 16= 18) = Ig= 21= 15= 18= 20= 20= 21= 21= - I) = - I12ARBQRESCENCE NON PRODUITE SUR DEMANDE : AUCU~EREGLES IGNORFES SUR DENANDE t AIJCUNESFig.
6a.
Representation f the tree in memory127FIW~ f~7.1.
OT~ (Remove).This subroutine is needed when nodes are erased; another subroutine,NEWTgF_~ will erase the nodes.
In the example below, oxv sets D(6),D(7), 9(13) to zero, and NEWTREE erases nodes numbered 6, 7 and 13.If node 12 was also erased, OT~ and NEWT~E would have erased node28 automatically.
The same holds for the node 32, where all the nodesbetween 6 and 13 would have been erased.7.2.
DFER,  DFERX,  GFER,  GFERX.Except for a few details, these four subroutines do the same work.For example, Dr~RX \[I, J\] is applied to a structure J that has to be mov-ed to the right under a dominating node L As illustrated below, Dr~Rx\[31, 30\] moves the structure headed by 30 to the right under the node128 SERGE BOISVERT- ANDRE DUGAS- DENISE B~LANGER.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.~ .0" :> ?~I J--: .
.
.
.
.
~g.
.
.
.
.
.
.
.
.
.
.
.
.
9~:: .
.
.
.
.
.
.
.
.
.
.
.
~m: .
.
.
.
.
~g  .
.
.
.
.
.
.
.
.
.
.
.
~~ .
.
.
.
.
.
.
.
.
.
.
.
.~z?
?
?
?
?
?
~: .
.
.
.
.
~ ~w.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.~ .~Z~ ZU wzm z ~ w z~ ~ z ~ zmFig.
6b.
Corresponding printed treeOBLING: A TESTER FOR TRANSFORMATIONAL GRAMMARS 129. .
.
.
.
.
.
, .
.
.
.
.
.
.
, .
.
, .
.
.
.
.~ .
.
.
.
.
.
.
.
, .
.
.
.
.~ .~,?
?
?
?
?
, cu~ W~ud~ : .
".
.
.
.
.
.
.
.
?
.
.
.o .
.
.
.
.
.
.
.
.
.
.
.
.
.
.~.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
~ .=> .~>g~.
.
.
.
.
.
.
.
.
.
.
.
.~z~z ow.
.
.
.
.  '
.~ : ~ J. .
.
.
.
.
~ : .
.
.
.
.
~.
.
.
.
.
.
.
.
.
.
.
.
.
9~?
o. .
.
.~ .
.
.
.
.
.
, .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
, .
.
.~>Fig.
7a.
Sample tree before OTE and NEwra~ apply~z~wz~z~wzwzw z ~ o~ w O~d3NIIIO ~ D o  H~N~ Z D ~  IONN~ddODHN ?NH"J I  ?+o=~Do 06dI I~NN' I 0~O~DO 3~ddO0~AV~I"~ ~ z z ~  dN"c ~ o130 SERGE BOISVERT-  ANDP~ DUGAS-  DENISE BELANGER, .
.
.
.
.
.
.
.
, .
.
.
.
.
.
, .
.
.
.
.
.
.
, .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.~ ,8~U-?
o o .
o  o ~  .
o o * o ?
- - ~: .
.
.
.
.
.
.
.
.
.
.
.
~.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.~e l o s t $    e s e t 0  t   e Q  o o ? "
" ? "
o ?
?
o ?
?
"Z?
?
?
?
?
o Jo: ?
?
?
?
oz  ?
?
?
?
?
.~: .
.
.
.
.
h~o :e. .
.
.
.
.
go  .
.
.
.
.
.
.
.
.
.
.
.
~o?
?
?
.
?
?
~  ?
?
?
?
?
- -~  ?
?
o .
?
?
, ?
?
?
? '
?
?.
.
.
.
.
.
.
?
?
?
.
?
?
?
,  .
.
.
.
.
.
.
.
.
.
.
?
.
.
.
.
?
.
?
?
>m.
.
.
.
.
?
0 ?
?
.
.
.
.
?
.
.
.
.
.
.
.
, ?
?
.
?
?
?
?
.
?
* 0 o ?
2~ z* * ?
?
.
?
~ ?
?
?
?
?
?
?
, ?
?
.
.
?
?
, ?
?
?
?
o ?
?
?
?
o , ??
o , , o ?
- ?
, o , ~ ?
?
o .
, ?
, .
.
?
?
, .
.
?
.
.
o .
?
.
.
.
, .
o o .
, ~  ~?q~L0tn>uzNgCW{gh.wDX~0 2  ~ u u08dJN ra .=~.
.=oc  :~ o=-  I IczFrld0~3u~ .J m snNIONado0.
~--u o.
3Z  :~-  d03~ 0.
N , u- ~- ,x~.
.~h.Z  NO"  ~cxo.
.~ - ~ w l  ?
?
?
?
o l iN"?
~NIc c ~  x'?W-Jcc IIB- o. o_ngd~D~>O_:E0C GNDr -o .
J  ~ :g uJ o_ HnN :?
o.
i.-- .~ ~ u.  x :|ONH~d,o 3~d~dO:g :~ ~ 0 dO3?
~ uJ .J~cEZZo.
~ z z o - - I+O~D?W W Z D bJ .J O:_J ,Xb .C~O.Fig.
7b.
Sample tree where oT\]~ and N~WTREB have appliedOBLING: A TESTER FOR TRANSFORMATIONAL GRAMMARS 13131.
(Node 31 was created by rule T2 and DF~R was applied on the re-suiting tree)\[ I , / \]DFERX \[;r, j\]GF R \[1, J\]G RX \[I, j\]makes node J the next younger brother of node Imakes node J the youngest son of node Imakes node J the next older brother of node Imakes node J the oldest son in node IThe general technique for these four subroutines i the following.Before modification, the tree is copied in another area of memory.All the terminal nodes identified with the structure J take the placeof the terminal nodes identified with the structure L Then, the terminalnodes of I are requested in the copied structure and parsed with theirdominating nonterminal nodes at the right place.
Gr~R ,permits thenew numbering of the sequence and, if necessary, prunes the tree.In the example illustrated below (Fig.
9a and 9b), Gr~R \[14, 13\] isapplied and node CPL (13) has been attached to node 16, the fatherof node 14.
If GF~RX \[14, 13\] had been specified, node CPL wouldhave been attached irectly to node 14, rather than the father of node 14.7.3.
INTERV,This subroutine is used for the permutation of 2 structures.
Forexample, INT~RV.
\[I, J\] where I = 24 andJ = 28 gives rise to the struc-tural change illustrated below.7.4.
INSERT.This subroutine is used for the insertion of a new terminal node;for example, INSERT \[4, 1HE, 1HT, 1HR, 9\] introduces node withname ETR which becomes a new son of node 9.7.5.
Other subroutines.There is a number of other subroutines concerning conditions pec-ified within a rule, such as the presence or absence of a node or ofa feature in the whole structure, the logical restrictions of loose equalityor strict equality.132 SERGE BOISVERT- ANDR~ DUGAS- DENISE B\]~LAlqGER.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.S .. ?
?
o * ~ ?
* ?
~ o ?
i ~ ?
?
?
?
* ?
?
~ ?
?
* ?
?
~ Z?
, ?
?
?
?
~ ?
?
, ?
?
?
.
?
?
?
?
?
?
?
?
.
~ ?
?
~~W ~ ?
, ?
?
?
?
?
?
* .
?
?
?
?
.
.
?
?
?
* ?
?
?
* ?
?
~?~W : ?
?
~ ?
?
?
?
?
?
.
?
?
?
?
?
?
?
?
?
?
?
* * ?
?
?
~.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.~ .. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.~?
?
?
?
.
?
?
?
- ?
?
?
?
~ z: .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
~.~o i. .
.
.
.
.
.
.
.
.
.
.. .
.
?
.
~ .
?
, .
, .
, .
.
?
?
~ .
.
.
.
.
?
.
.
.
.
>?
?
.
?
.
.
.
.
.
.
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
* .
z. .
.
.
.
.
~_~~ :~>~~Z~W0~td  O~ ~ g ~ 3NII I177dN~NIOHH~d=l~d~ldO?~ w z ~ w ~o.
- IN I?
o-  0- N33f l TdIOHun bJ z ~ h2 .-J ~ N~d~o.o_Od04" c3~ a~ zza -~x : ~ z o ~ c o  dO3~.
.~-a :Q.~ .
- e ~  ?
?
j ?
?
.
.
.
-  aAVm ~ w ~ 2 wO-Fig.
8a.
Sample tree before GFER appliedOBLING~ A TESTER FOR TRANSFORMATIONAL GRAMMARS.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
~ .d8.
.
.
.
.
.
~* ~.
.
.
.
.
.
g~> .
.
.
.
.
.
.
.
.
.
.
.
"~>: .
.
.
.
.
.
.
.
.
.
.
.
.
~z.
.
.
.
.
.
~g?
: .
, .
, .
~ .
.
, .
o ,~  .
: - - z?
?
?
?
?
?m(?
o?
?
?
?
?
?~o; .
, -w. ?
?
?
?
.
?
, ?
?
.
?
?
?
, .
j. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.~,~ :  .~  .
.
.
.
.
.
.
.
.
.
.
.
~.~.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.0 .
.
.
.
.
.
.
.
.
.
.~ .. , ?
.
?
.
, , ~ .
, ~ , , , ?
, ~ , ~ , ?
.
.
, , , ~ .
.
.
, .
?
.
~.
.
.
.
.
.
~g~ ?
?
?
, ?
?
~ ?
?
0 ?
, ?
?
?
.
, ?
?
?
, ?
?
?
?
.
?
, ?
?
?
.
, ?mm ?
?
?
, ?
?
?
, ?
, ?
, ?
?
?
, ?
, ?
, ?
?
?
, ?
?
?
?
?
?
?
, ?
?
?
?
, , , ?
, ~133=>~~z~z~z~-  z ~ z ~ or -OBd?
4NI,o I IH3.-I+ HANo z ~ o  lOW3~d~ 0. o o.
(~ < P .
.~  o ( J  =0 z dOO.
~ IAV30"eU NO"HN ~* 3NIo~x~o I I  0~ Ld z ~ W,J ~'.
J  ?
:~ h .
(l. ~ 1~3_4fV ld~ANIONO ~ Z ~ O  H~dhJ  Z ~ ~J .
Ja :  ~"~ ?
~ h.  a .o .
3~d~dOdO3,O ~AV30"+o~-~o NO'*.-I ?
~ u.
0.
0.
HN"NH"Fig.
8b.
Sample tree where Grsa has applied134 SERGE BOISVERT- ANDRI~ DUGAS-  DENISE B~LANGER.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
, ?
, .
.
.
.
.
.
, .
.
.
.
.
.
.
.
.
.9~: .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.9~?
~ ~m~ Zo O~ldJN IIInqd?c k~RNe... ozc ,~,~.~ zw~g 3aa~dO0 = ~  dO3.
~ t,.
cL cL ~AV30"Q. t-.- (.,.~ O.
~2 - - ) - -  Z NO"O. C30.
?J ~ v- .J 0 ?J ~ ~ HN*NH"~O_ N ?
U .
.~  .
:~o-  A I "e3 oz~ ha~ zh4  haFig.
9a.
Input structureOBLING: A TESTER FOR TRANSFORMATIONAL GRAMMARS 135~i .
i l e ~ e e e  ee$  l se  eee  e e e e e ~e , e , e e e , e e , , ?
, ~ ?
, , , l e , e , ?
?
~ Z~z.
.
.
.
.
.
.
.
.
.
.
- .~zII?
-g  .
.
.
.
.
.
.
~ .
.
.
.
.
.~ ?
,  ~?
?
?
, 1 ?
??
, , ?
?
, .
.
?
~ ~ , ?
?
?
,  ?
.
,  ?
?
?
, .
?1~o z J ~ z208dI I~z~ W33~z~wz ~IdWnN8~d3~dHdOdO3-~AV30  ?NO"Fig.
9b.
Output structure after cFm~ has applied136 SERGE BOISVERT- ANDI~ DUGAS- DENISE BIILANGER.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
, .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.~ ,I iJ.~  : .
.
.
.
~ .
.
.
.
.
.
.
o ~  ?
~  .
.
.
.
.
.
.
.
.
.
.
~?~:.
.
.
.
.
.
~ ?
~ :  .
.
.
.
.
~: .~  ~ ?
.
.
?
.
.
,~ .0 ,~?
.
.
?
.
?mz?
?
~ ?
?
?
, ~ ?
, ?
?
, , ?
?
, , , ' ?
, , ~ , ~ , ?
?
?
.
, , , ?
, ?
, , , ?
.
~Fig.
lOa.
Input structureO~d4N\]TTnqdHnNzoHHHd* dOC)0~:~0 ~IAVNO"_~I.'
- )~_ N ?
b- .~-  o :~ no"O~dJNIIIN3JFlqdHnNIOH~d3~d~dOOBLING: A TESTER POR TRANSFORMATIONAL GRAMMARS @  @ i @  I i   @ @ I @  @ @ @  @ I i @  I @  i o I I   i I  @  i I  i @ I  @ I i @  kUI I ~ l e o ~ $ e ~ I o o $ o i @ $ ~.
.
.
.
.
.
g .
.
.
.
.
.
.
.
.
.
.
.
.
o,.~.
.
.
.
.
.
~g  .
.
.
.
.
~ .
.
.
.
.
.
.
.
.
.
.
.
R~~dIM- !~ed.
, , ?
.
.
.
?
.
, .
, , .
?
.
, , , ?
~ zo~.
.
.~ .
.No.
, ?
.
, ~ .
, .
.
.
.
?
?
.
, .
?
.
.
.
?
?
.
?
.
, , .. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.~>, ?
?
?
?
?
?
?
~ ?
.
?
?
?
?
?
?
?
?
?
.
?
?
, , ?
.
?
?
?
?
?
?
?
~ z. "
-~ " ' '  - ?
?
? "
? "
' ' ' '  ? "
? "
" "  " " "  " ? '
'~.
.
.
.
.
, .
.
, , ?
.
.
, .
.
.
.
.
.
.
.
.
.
.
, ?
.
.
.
, .
- , ,  .
.
.
.
.
.
~137~ ~ z ~ o?m2~Nzm+O~DO?m o z ~ w  z w w ~08d..4NII IF mqd083k(nNIOnk4~d38d8dOdO:)SAY30"NO"8N ?NH"4 I -FIO"dN"08d3NII IH3../f ) ld083HNNIONHSd38,:ttldOdO3dAY:)0"4.NO?.,NN"NH"AI"NO-~-dN"Fig.
lob.
Output structure after ~?r~v has applied138 SERGE BOISVERT - ANDl~ DUGAS - DENISE B\]~LANGER: .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
~u_?
?
, , * , ?
0 , ?
, o $ 1 , $ 1 , , ,.
.
.
.
?
.
.
.
.
.
.
.
.~z>.m~Z .
?
, - , , ,: ~" .
.
.
?
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.~ ,+o x x ~ OD.Fig.
11a.
Insertion of a node (before)OBLING" A TESTER FOR TRANSFORMATIONAL GRAMMARS 139. ?
?
.
.
.
.
?
?
, , .
.
.
.
.
.
.
.
.
~ .
, ,, .
.
.
.
.
.
, .
.
.
.
.
~ .
= .
***eeeoeo$ooe~oe~xtnmo~ o~~ Z ~ W Z~ S ~ Wm??
?Fig.
1lb.
Insertion of a node (after)140 SERGE BOISVERT- ANDRI~ DUGAS-  DENISE BELANGER8.
CONCLUSIONSOBJ-mC is a system which has been implemented in low-level tOR-TeN IV for the CDC 6400.
It occupies 55,000s 60-bit words of memory.It has about 7000 lines of comments and instructions.REFERENCESN.
CHOMSKY, Aspects of the Theory ofsyntax, Cambridge (Mass.
), 1965.A.
Ducas, et al, Description syntaxique~l/mentaire dufranfais inspir~ des th/oriestransformationnelles, Montr6al, 1969.J.
FIUEDM~, A Computer Model of Trans-formational Grammar, New York, 1971.D.
LIEBERMAN, (ed), Specification andUtilization of a Transformational Gram-mar, Yorktown Heights (N.Y.), 1966.D.
L. LotrD~, W. J. SCHO~N~, TOT:A Transformational Grammar Tester,in Proc.
Spring Joint Computer Confer-ence, Part I, 1968, pp.
385-393.R.
PETRICK, A Recognition Procedure forTransformational Grammars, Ph.-D.Dissertation, Cambridge (Mass.
), 1965.J.
R. Ross, A proposed rule of tree-pruning,NSF-17, Computation Laboratory,Harvard University, IV (1966), pp.1-18.A.
M. 7.WICKY, J. FRIEDMAN, \]3.
HALL,D.
E. W.~a.g.F.R, The MrrRE SyntacticAnalysis Procedure for TransformationalGrammars, in Proc.
Fall Joint ComputerConference, Vol.
27, Pt.
1, 1965, pp.317-326.
