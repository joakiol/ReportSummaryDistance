AN INTERPRETATION OF NEGATIONIN FEATURE STRUCTURE DESCRIPTIONSAnuj DawarDepartment of Computerand Information ScienceUniversity of PennsylvaniaPhiladelphia, PA 19104K.
Vi jay-ShankerDepartment of Computerand Information ScienceUniversity of DelawareNewark, DE 19716Feature structures are informational elements that have been used in several linguistic theories and incomputational systems for natural language processing.
A logical calculus has been developed and used as adescription language for feature structures.
In the present work, a framework in three-valued logic issuggested for defining the semantics of a feature structure description language, allowing for a morecomplete set of logical operators.
In particular, an interpretation of the negation and implication operators isexamined within this framework.
We extend this approach to interpret descriptions that involve existence (ornonexistence) of values for attributes.
A definition of augmented feature structures is proposed, and oneparticular interpretation of the description language with a negation operator is described.
A sound andcomplete proof system is presented for the logic thus obtained and its computational spects tudied.1 INTRODUCTIONA number of linguistic theories and computational p-proaches to parsing natural anguage have employed thenotion of associating informational elements, consisting offeatures and their values, with phrases.
Such elements,called feature structures, have been used in linguistictheories, such as Generalized Phrase Structure Grammar(GPSG; Gadzar et al 1985) and Lexical Functional Gram-mar (Kaplan and Bresnan 1983), and in computationalformalisms, uch as Functional Unification Grammar (Kay1979) and PATR-II (Shieber 1984).Rounds and Kasper introduced a logical formalism todescribe feature structures with disjunctive specification(Kasper 1987; Kasper and Rounds 1986; Rounds andKasper 1986).
The language is a form of modal proposi-tional logic.
To define the semantics of this language,feature structures are formally defined as acyclic finiteautomata.
The detailed efinition is given in Section 2.
Afundamental property of the semantics i that it is mono-tonic in the sense that the set of automata satisfying agivenformula is upward-closed under the operation of subsump-tion.
This is important, because we consider a formula to beonly a partial description of a feature structure.
Thisproperty is precisely formulated in Section 2.Several researchers have expressed a need for extendingthis logic to include the operators of negation and implica-tion.
These two are related in that, in most logical systems,it is possible to use one to define the other (in the presenceof a disjunction operator).
In this paper, we shall concen-trate on the problem of extending the logic to includenegation, while also showing that it yields a satisfactoryinterpretation f implication.Karttunen (1984), for instance, provides examples offeature structures in which a negation operator might beuseful.
For instance, the most natural way to represent thenumber and person attributes of a verb such as sleep wouldbe to say that it is not third person singular, rather thanexpressing it as a disjunction of the other possibilities.
Weexpress this agreement constraint by the following formula:agreement : -1 (person : third A number : singular) (1)Pereira (1987) provides the following example formulathat expresses the semantic onstraint that the subject andobject of a clause cannot be coreferential unless the objectis a reflexive pronoun:Computational Linguistics Volume 16, Number 1, March 1990 11Anuj Dawar and K. Vijay-Shanker An Interpretation of Negation in Feature Structure Descriptionsobj : type : reflexive k / -7  (subj : ref ~ obj : ref) (2)This constraint can, in fact, be represented just as naturallyas the following implication:(subj : ref ~ obj : ref) ~ obj : type : reflexive (3)Similarly, the feature co-occurrence constraints in GPSG(Gadzar et el.
1985) include implications of the form3 l ~ q~ (where q~ is some description).
Whi le a formula ofthe form 3 l is not part of the Rounds-Kasper logic, weintend it here as asserting the existence of a feature l in astructure.
This would normally be expressed in the Rounds-Kasper formalism by the formula I:NIL.
As we see later,formulae of the kind we have in this example, i.e.
in whichan existential appears negated, require special treatmentand will motivate an extension to the feature structureformalism.Various interpretations have been suggested that definea semantics for these operators (see Section 3), but nonehas gained universal acceptance.
Pereira (1987) set forthcertain properties that any such interpretation should sat-isfy.
We suggested that three-valued logic provides us witha framework appropriate for defining the semantics of afeature description logic (which we will call FDL) thatincludes a negation operator (Dawar and Vijay-Shanker1989).
We also showed that the three-valued framework(based on Kleene's three-valued logic; Kleene 1952) ispowerful enough to express most of the existing definitionsof negation and implication.
It is therefore possible tocompare these different approaches.
We also presented oneparticular three-valued interpretation for FDL, motivatedby the approach to negation given by Karttunen (1984),that meets the conditions tated by Pereira.In the present work, we give an exposition of theseresults, and we also examine another three-valued interpre-tation for FDL, obtained by using a modified notion of thefeature structures that serve as models.
This new interpre-tation, while preserving the desirable properties of theprevious one, also provides a satisfactory semantics for theproblematic ase, mentioned above, of formulae with anegated existential.In Section 2 we present an exposition of the Rounds-Kasper logic.
In Section 3 we examine some existing ap-proaches to defining the semantics of negation, and we alsopresent he framework of three-valued logic within whichwe define our own interpretation.
In Section 4 we exhibitthe modified notion of feature structures as models forFDL, and we give the semantics of FDL in terms of thesemodified feature structures.
Finally, in Section 5, we presenta proof system for the language and esta61ish some compu-tational results.2 ROUNDS-KASPER LOGICIn this section, we take a look at the calculus developed byRounds and Kasper to describe feature structures.
Thesymbols in the language are taken from two primitivedomains:1.
Atoms ( A ), and2.
Labels ( L ).The set of well-formed formulae (W), is given by:NI lTOPa where a ~ Al:q~ where l~Land~ W~b/\ ~k where ~b, ~b ~ Wq5 V ~b where 4~, ~b ~ WPl '= P2 wherepl, P2 ~ L*To define the semantics of this language, feature struc-tures are defined as acyclic finite automata.
These areformally defined as follows:Delinit ion 1.
An acyel ie finite automation is a 7-tupleA = (Q,~,F,&qo,  F,?O, where:1.
Q is a nonempty finite set (of states),2. z is a countable set (the alphabet),3.
F is a countable set (the output alphabet),4.
6 : Q x ~ ---, Q is a finite partial function (thetransition function),5. qo ~ Q (the initial state),6.
F C Q (the set of final states),7.
X : F --~ r is a total function (the output function), 18. the directed graph (Q, E)  is acyclic, where pEq ifffor some l ~ ~, 6(p, l) = q,9.
for every q G Q, there exists a directed path from q0to q in (Q, E), and10.
for every q C F, 6(q, l) is not defined for any 1.We can define a partial ordering of information onacyclic finite automata.
This partial ordering is given bythe subsumption relation, defined as follows:Definition 2.
Given two acyclic finite automata, A =( QA, ~"A, I'A, 6A, qOA, FA, ~kA ) and B = ( Qs, ~,s, rs, 6s, qos,Fs, ),s), we say that A subsumes B (A E B) iff there is ahomomorphism from A to B, i.e.
there is a mapping h :QA ~ Qn such that:1. h(6A( q, l) = tro(h(q), l),2. tB(h(q)) = 1 A (q) for all q E FA, and3.
h(qoA) = qoBUnification, which is the primary information-combiningoperation on feature structures, can now be simply definedas the operation of finding a least upper-bound (if anyupper-bound exists) under the above ordering.
2We can now give the semantics of a formula over the setof labels L and the set of atoms A.
The domain over whichthis is done is the set of acyclic finite automata A ----- Q, L,A, 6, q0, F, X).
The satisfies relation (~)  is defined asfollows:Definition 3.
An acyclic finite automation A = (Q, L, A,6, q0, F, X) satisfies (~)  a formula in the following cases:12 Cnmputational Linguistics Volume 16, Number 1, March 1990Anuj Dawar and K. Vijay-Shanker An Interpretation of Negation in Feature Structure DescriptionsA ~ NIL alwaysA ~ TOP neverA~ a i f fQ=F={qo}and~(qo)=aA ~ l:4) iff A / l ~ 4)A~ 4) /~p i f fA~ 4)andA~A ~ 4) V ~b iffA ~ 4)orA ~ ~pA ~ PI ~- P2 iff(i(q0, Pl) = 5(qo, P2)In the above, 6 is extended in the standard way to membersof Z*, i.e.
(5(q, E) = q and 5(q, wl) = ~(6(q, w),l) and A/I  isthe automaton obtained from A by making (5(q 0, l) theinitial state and eliminating all unreachable states.A fundamental property of the semantics given above isthat the set of automata satisfying a given formula isupward-closed under the operation of subsumption.
Theproperty is stated in the following theorem (Rounds andKasper 1986):Theorem 1.
A E_ B if and only if for every formula, 4), ifA~ 4) thenB~ 4).Rounds and Kasper also showed that the satisfiabilityproblem for their logic is NP-complete.3 PREVIOUS APPROACHES TO NEGATIONIn this section we examine the problem of adding a nega-tion operator to the language described in the previoussection.
We do this by presenting various approaches todefining the semantics of the extended language.
We lookat these approaches in terms of both their linguistic appro-priateness and their computational properties.
We will alsoshow that the framework of three-valued logic that wepresent can be used as a basis for comparison of thedifferent approaches.3.1 CLASSICAL NEGATIONBy classical negation, we mean an interpretation i whichan automaton A satisfies a formula --7 4) if and only if it doesnot satisfy 4).
Johnson (1987) defined an Attribute ValueLogic (AVL), similar to the Rounds-Kasper Logic, thatincluded a classical form of negation.
Smolka (1988) pre-sented a classical semantics for negation in a Rounds-Kasper-like framework.
While such approaches are appro-priate under one view of feature structures, they are notsatisfactory from the viewpoint of feature structures eenas partial descriptions.
This is because the crucial propertyof monotonicity is lost, as can be seen from the followingexample:Example 1.A = \[person:second\]\ [person :second\ ]B = \[number : singularJ4) = -q(person : second/~ number : singular)As can easily be seen, by the classical semantics, A ~ 4)and A E B, but B ~ 4).Kasper (1988a) discusses an interpretation of negationand implication in an implementation f Functional Unifi-cation Grammar that is extended to include conditionals.Kasper's emantics is classical, but his unification proce-dure uses notions similar to those of three-valued logic.
3Kasper also localized the effects of negation by disallowingpath expressions within the scope of a negation.
Thisrestriction may not be linguistically warranted as can beseen from Pereira's formula example in Section 1.3.2 INTUITIONISTIC LOGICMoshier and Rounds (1987) described an extension of theRounds-Kasper logic, including an implication operatorand hence, by extension, negation.
The semantics i basedon intuitionistic techniques.
The notion of satisfying isreplaced by one of forcing.
Given a set of automata K, aformula 4), and A such that A ~ K, A forces in K ~4) (A F K---~) if and only if for all B E K such that A E_ B, B does notforce 4) in K. Thus, to show that a formula, 4), is satisfiable,we have to find a set K and an automaton A such that Aforces in K 4).Moshier and Rounds also gave a complete proof systemfor their logic, and showed that the satisfiability problem,while decidable, was PSPACE-complete, thus making iteven more intractable than the original Rounds-Kasperlogic.
Furthermore, Langholm (1989) has shown that notall formulae in the Moshier-Rounds logic can have heredi-tarily finite sets of minimal models.
These computationalproblems, along with questions about the linguistic appro-priateness of its semantics, render the linguistic value of theintuitionistic approach questionable.3.3 THREE-VALUED LOGICHere we take a look at how three-valued logic can be usedto define the semantics of FDL.
We also take a look at oneparticular interpretation of FDL that uses the automata ofSection 2 as models.
This interpretation is essentially thesame one we presented earlier (Dawar and Vijay-Shanker1989).
This is an interpretation of negation that is intu-itively appealing, formally simple, and computationally rtoharder than the original Rounds-Kasper logic.
The pri-mary intention here (as in our earlier paper) is, however, toexplore the use of three-valued logic in defining the seman-tics of FDL with negation.
To this end, we will examineother interpretations also within the three-valued frame-work.
Then, in the next section, we motivate a modifiednotion of automata models and redefine our interpretationwith respect to it.3.3.1 THE THREE-VALUED FRAMEWORKWith each formula we associate the set (Tset) of automatathat satisfy the formula, a set (Fset) of automata thatcontradict it, and a set (Uset) of automata that neithersatisfy nor contradict it.
4 The Uset contains all automatathat are not in either of the other two sets.
Differentinterpretations of negation are obtained by varying defini-tions of what constitutes "contradiction."
The reason forComputational Linguistics Volume 16, Number 1, March 1990 113Anuj Dawar and K. Vijay-Shanker An Interpretation of Negation in Feature Structure Descriptionshaving some automata that neither satisfy nor contradict aformula is as follows: an automaton is to be viewed as apartial information structure.
Given a description (for-mula), 4~, a feature structure A may not carry enoughinformation to suggest hat it satisfies or falsifies 4~.
How-ever, it may be possible to extend A to either satisfy orfalsify ~b.
For example, we will place \[person : third\] in theUset of ~b = (number : s ingular /k  person : third).
Ofcourse, this feature structure can be extended to falsify orsatisfy 4~ as in:andpnumber : singular\]erson : third Jnumber :plural\]erson : third JWe will define the Tset and the Fset so that they areupward-closed with respect o subsumption for all formu-lae.
Thus, we avoid the problem of nonmonotonicity associ-ated with the classical interpretation of negation.
In ourlogic, negation is defined so that an automaton A satisfies--~ if and only if it contradicts q~.Formally, the semantics is defined by a partial interpre-tation function, I. I f  WFF is the set of well-formed formu-lae of FDL, and A the set of acyclic finite automata, 5 theinterpretation I is a partial function:I : WFF x A ~{True,  False}I(4~, A) is True iff A satisfied ~b.
It is False if A contra-dicts ~b 6 and is undefined otherwise.
Thus, the followinghold:Tset(~) = {AIt(~, A) -- True} andFset(ck) = {AIt(~, A) = False}3.3.2 A THREE-VALUED INTERPRETATIONWe now look at one such interpretation function that usesthe strong Kleene truth definition for conjunction anddisjunction.Definition 4.
The partial interpretation function I isdefined as follows:1.
I (NIL ,  A)  = True for all A;2.
I (TOP, A)  = False for all A;3.
I(a, A)  = Truei fA  is atomic and ~'(q0) = aI(a, A)  = Falseif A is atomic and X(qo) = bfor some b, b #: a (see Note 2.
)l(a, A )  is undefined otherwise;4.
I ( l  : ~p, A)  = I(dp, A l l )  if A l l  is defined.
(see Note 3.
)I ( l  : ep, A)  is undefined otherwise;5.
I(dp I A qb2, A)  = Trueif I(q~ I, A) = True and I(qb 2, A) = TrueI(~b t A q~2, A) = Falseif I(~b l, A) = False or I(~b2, A) = Falsel(~b I A 4~2, A) is undefined otherwise;6.
/(~b I V ~b2, A) = Trueif I(~b x, A )= True orI(ep 2, A)  = True/(~1 V ~2' A)  = Falseif I(~bl, A) = False and I(~b2, A) = False/(q~l V ~b2, A) is undefined otherwise;7.
I(--CA A)  = True i f  I(ep, A)  = FalseI(--@, A)  = False ifI(~b, A) = TrueI ( -~ ,  A) is undefined otherwise;8.
I (p  I ~- p2, A) = Trueif 6(%, Pl) and 6(qo, P2) are definedand 6(%, Pl) = 6(%, P2)I(Pl ~ P2, ,4) = Falseif A lp  I and Alp  2 are both definedand are not unifiableI(Pl ~ P2, A) is undefined otherwise (see Note 4.
).where,q~, 4h, ~2 E WFFA = <Q,L ,A ,  6, qo, F ,X>CAa ,b@Al~L.Pl, P2 ~ L*NOTES1.
We have not included an implication operator in theformal language, since we find that defining implicationin terms of negation and disjunction (i.e.
4~ =~ ~k------~ v if) yields a semantics for implication that corre-sponds exactly to our intuitive understanding of implica-tion.2.
As one would expect, an atomic formula is satisfied bythe corresponding atomic feature structure.
On theother hand, only atomic feature structures are defined ascontradicting an atomic formula.
An interpretation ofnegation that defines a complex feature structure ascontradiciting a (and hence satisfying ---a) is also possi-ble.
Our definition was motivated by the linguistic inten-tion of the negation operator as given by Karttunen(1984), where, for instance, we require that an automa-ton satisfying the formula case : --ndative have an atomicvalue for the case feature.
However, we now feel thatthis problem would best be dealt with in a multi-sortedlogic and hence, in the interpretation we present in thenext section, we have adopted the other alternativementioned here.3.
In definition 4 above, we state that: I(1 : ep, A)  = I(?b, A~l) i fA / l  is defined.
When A/ l  is defined, I(~, A / l )  maystill be True, False, or undefined.
In any of these cases,I(1: cp, A)  = l(dp, A l l ) .
7 I ( l  : dp, A)  is not defined if A / lis not defined (as illustrated by the example given earlierwhere ~b ---- (person : third A number : singular).
Notonly is this condition required to preserve upward clo-sure, it is also linguistically motivated.14 Computational Linguistics Volume 16, Number 1, March 1990Anuj Dawar and K. Vijay-Shanker An Interpretation of Negation in Feature Structure DescriptionsIn the next section, we will make the distinction infeature structures between not being defined versuscannot be defined.
In this section, we will say thatI ( l  : 4~, A) is not defined if A is not defined for l andI ( l  : 4~, A) = false if A cannot be defined for I.4.
We have chosen to state that the set of automata thatare incompatible with the formula Pl ~- P2 is not the setof automata for which 6(q0, P0 and 6(q0, P2) are definedand ~(qo, Pl) :~ 6(q0, P2), since such an automaton couldsubsume one in which 6(q0, Pl) = 6(qo, P2).
Thus, wewould lose the property of upward closure under sub-sumption.
However, an automaton, A in which/~(qo, Pl)and 6(qo, P2) are defined, and AlP l is not unifiable 8withAlp  2 cannot subsume one in which tS(qo, Pl) = 6(q0, P2).The monotonicity property for the above interpretationcan be stated as follows:Theorem 2.
Tset(qb) is upward-closed under the subsump-tion relation for all formulae ~b.Proof.
The proof is by induction on the structure of 4~ andcan be found in Dawar 1988.\[7We now take a look at some examples mentioned earlierand see how they are interpreted in the logic just defined.The first example xpressed the agreement attribute of theverb sleep by the following formula:agreement  : 7 (person  : th i rd /k  number  : singular) (4)This formula is satisfied by any structure that has anagreement feature which, in turn, either has a personfeature with a value other than third, or a number featurewith a value other than singular.
Thus, for instance, thefirst two structures atisfy the given formula, whereas thethird structure is undefined with respect to the formula.cat : NP  : second\]\] agreement : \[person\[agreement \[person: third \]\]: \[number : plural J\]cat : NP \]agreement : \[person : third\]On the other hand, for a structure to contradict formula(4), it must have an agreement feature defined for bothperson and number with values third and singular respec-tively.Turning to another example mentioned earlier, the for-mula:obj  : type : ref lexive V --l( subj  : re f  ~.
ob j  : re f  ) (5)is satisfied by the first two of the following structures, but iscontradicted by the third (here co-index boxes are used toindicate co-reference of path-equivalence).lob j :  \[type : reflexive\]\]\[ref: \[\]obj : l\[type : reflexivesubj : \[ref : \['iq \]\[ref:lq3 11?
"-,: b,,,e :,,on,-e.x,vd /subj : \[ref : \[\] \] J3.3.3 OTHER THREE-VALUED INTERPRETATIONSOF NEGATIONWe briefly examine here how the three-valued frameworkmay be used to provide interpretations other than the onepresented above.The classical interpretation fnegation can, of course, beexpressed by making I a total function such that whereverI(qL A) was previously undefined, it is now defined to beFalse.Moshier and Rounds consider a version in which forcingis always done with respect o the set of all automata, i.e.K*.
This means that the set of feature structures thatsatisfy --~ is the largest upward-closed set of feature struc-tures that do not satisfy ~b (i.e.
the set of feature structuresincompatible with q~).
We can capture this in the three-valued framework described above by modifying the defini-tion of I in the following cases:?
I(a, A) = Trueif A is atomic and X(q0 ) ---- aI(a, A) = False otherwise?
I(1 : 4~, A)  = Trueif A / l  is defined and I(~b, A / l )  = TrueI ( l : 4~, A) = Falseif A/ I  is defined andVB(A/ I  E_ B =~ I(cb, B) = False)I(1 : qb, A)  is undefined otherwise.?
I(?1 A ?2, A) = TrueifI(q~l, A )= True andI(qb 2, A )= True1(?
1 A 02, A) = FalseifVB(A E_ B ~ I(c~1, B) ~ True or l(~b2, B) ~ True)I ($1/k 4~2, A) is defined otherwise;?
I (?
l W ?2, A) = TrueifI(4h, A) = Trueor I($2, A) = TrueI(4a I V ?b2, A) = FalseifVB(A E B =~ I(c~ l, B) ~ TrueandI(4~2, B) ~ True)I(~b I /k 4~2, A) is undefined otherwise;?
I (p  I ~-p2, A )= Trueif 6(qo, Pl) and b(qo, P2) are definedand 6(q o, Pl) = 5(qo, P2)Computational Linguistics Volume 16, Number 1, March 1990 15Anuj Dawar and K. Vijay-Shanker An Interpretation of Negation in Feature Structure DescriptionsI(pl "~ P2, A) = Falseif Alp  1 and AlP 2 are both definedand are not unifiable or if A is atomicl(Pi ~" Pc, A) is undefined otherwise.As mentioned earlier, our approach was motivated byKarttunen's implementation as described in Karttunen1984.
In the unification algorithm given, negative con-straints are attached to feature structures or automata(which themselves do not have any negative values).
Whenthe feature structure is extended to have enough informa-tion to determine whether it satisfies or falsifies the for-mula, then the constraints may be dropped.
We feel thatour definition of the Uset captures the notion of associatingconstraints with automata that do not have sufficient infor-mation to determine whether they satisfy or contradict agiven formula.As discussed in Section 3.1, Kasper (1988a) used theoperations of negation and implication in extending Func-tional Unification Grammar.
Though the semantics definedfor these operators is a classical one, for the purposes of thealgorithm Kasper identified three classes of automata sso-ciated with any formula: those that satisfy it, those that areincompatible with it, and those that are merely compatiblewith it.
We can observe that these are closely related to ourTset, Fset, and Uset respectively.
For instance, Kasperstates that an automaton A satisfies a formula f : v if it isdefined for fwi th  value v; it is incompatible with f :  v if it isdefined for fw i th  value x(x ~ v) and it is merely compati-ble with f :  v if it is not defined forf.
In three-valued logic,we incorporate these notions into the formal semantics,thus providing a formal basis for the unification proceduregiven by Kasper.
Our logic also gives a more uniformtreatment to the negation operator, since we have removedthe restriction that disallowed path equivalences in thescope of a negation.4 INTERPRETING FDL  WITH AUGMENTEDFEATURE STRUCTURESWe have seen examples (Section 1) of formulae that assertthe existence of certain features.
While 31 is not a formulain the Rounds-Kasper syntax, we can regard it as syntacticsugar for the formula I:NIL, which is indeed satisfiedexactly by those automata that have a feature l.However, the formula -d :N IL  is not satisfiable in thelogic we have defined.
This is because any automaton thatdoes not have a feature labeled l subsumes one that does.We have, however, seen examples of formulae where 3 loccurs in the scope of a negation (for instance, Kasper\[1988b\] uses the formula 3Mood-type--, Rank : Clause).We certainly intend that such formulae be satisfiable.Since feature structures are partial information struc-tures, if they are not defined for an attribute l, it could bedue to lack of information about the value for the attributel.
On the other hand, here we wish to capture the fact that ifa feature structure A satisfies the description --73 l, then notonly is A not defined for l, but it is also the case that itcannot be defined for l. That is, it is erroneous to extend Ato state a value for the attribute I.The problem stems from the fact that in the formula-7--1l, we are trying to capture the information that afeature structure not only does not have a value for thefeature l, but cannot be extended to have a value for l; i.e.we have the information that, in the current context, theinformation structure that we are building is not going toacquire a value for the feature l at any future time.
Thiskind of "negative" information is not expressible in auto-mata models as we have defined them.
As they stand, theycan only capture "positive" information.
To include thenegative information we need, we will define an augmentednotion of feature structures and redefine our interpretationfunction accordingly.To use the analogy with finite state automata, note thatin a deterministic fsa we often consider states that do nothave outgoing arcs defined on certain labels as having thosearcs leading to an "error" state.
Since we view fsas ascomplete structures, this distinction between arcs that arenot defined and those that cannot be defined is unimpor-tant.
However, when we view our automata models aspartial information structures, we must distinguish be-tween the case in which a feature is simply not defined(leaving open the possibility that it may be defined in someextension) and the case in which we know that a certainfeature cannot be defined.In what follows, we capture the information of certainlabels leading to "error" states without explicitly definingsuch states, but by attaching to each state in the structure afinite set of labels.
This set contains those labels that cannotbe defined from that state.
We already have an elementaryform of this notion in our restriction on final states, whenwe specify that they cannot have any outgoing arcs.
We areeffectively saying that no label can be defined from thesestates.
We formalize all these notions below.4.1 AUGMENTED FEATURE STRUCTURESIn this section, we give definitions relating to our aug-mented notion of f-structures.
As we stated above, theaugmentation consists of attaching to each nonfinal node inthe f-structure graph a finite set of labels.
These labels areexactly those for which we know that no outgoing arcs canbe defined from that node.
The set is finite since we requirethat our information structure at any point be finite.
Weformally define our extended notion of f-structure asfollows: 9Definition 5.
An acyclic finite automaton is an 8-tuple,4 == (Q,~,F,  6, qo, F ,X,S) ,  where:1.
Q is a nonempty finite set (of states),2.
2; is a countable set (the alphabet),3.
F is a countable set (the output alphabet),4.
6:Q x Z ~ Q is a finite partial function (thetransition function),5. qo E Q (the initial state),16 Computational Linguistics Volume 16, Number 1, March 1990Anuj Dawar and K. Vijay-Shanker An Interpretation of Negation in Feature Structure Descriptions6.
F C Q (the set of final states),7.
X : F ~ r is a total function (the output function),8.
S :Q\F - - *  P'~"~Y~) is a function from the nonfinalstates to finite subsets of Z,9.
the directed graph (Q, E)  is acyclic, where pEq ifffor some I ~ Z, 6(p, l) = q,10.
for every q ~ Q, there exists a directed path from q0toq in  (Q ,E) ,11. for every q ~ F, 6(q, l) is not defined for any l, and12.
whenever I ~ S(q),  6(q, l) is not defined.We can now define the subsumption ordering on thesestructures as follows:Definition 6.
Given two f-structures, A = ( Q.1, ~.1, rA, 61 ,q0.1, FA, ~.1, S.1) and B = (Qn, ~n, F~, 6n, qon, Fn, ~n, Sn),we say that A subsumes B (A~B)  iff there isa homomorphism from A to B, i.e.
there is a mappingh: Q.1 --* Qs such that:1. h(qo.1) = qon,2.
h(6A(q, l)) = 6 n(h(q), 1),3.
Xn(h(q)) = ~ (q) for all q ~ F~, and4.
SA(q) C Ss(h(q))  for all q ~ Q.1\F.1.This definition of subsumption ensures that, for anyautomaton A, if I ~ S.1(6(q o, p)) then, for any automatonsubsumed by A, the pathp is defined, but the path pl  cannotbe defined.4.2 THE LANGUAGEWe now give the interpretation of FDL in terms of f-structure models as we have just defined them.
The syntaxof the language is the same as before.We first give the following auxiliary definitions:Definition 7.
An f-structure A = (Q, 2;, I', 6, qo, F, ~, S)is:?
atomic if and only if Q = F = {q0 },?
null if and only if Q = {q0} and F = ~ and?
complex otherwise.We can now define the revised semantics:Definition 8.
The (revised) partial interpretation functionI is defined as follows:1.
I (NIL,  A )  = True for all A;2.
I( TOP, A )  = False for all A;3.
I(a, A )  = True i fA is atomic and k(q0) = aI(a, A ) = False if A is atomic with k (q0) :~ a or if Ais complexl(a, A ) is undefined otherwise;4.
I(l:dp, A )  = I(4~, A / l )  if A / l  is defined.I(l: 4~, A ) = False if l C S( qo ) or if A is atomicI( l : 4~, A ) is undefined otherwise;5. l(ckl /~ 42, A )  = Trueif 1(q~1, A ) = True and l(q~2, A ) = TrueI(4~ A (a2, A ) = Falseif l(4h, A ) = False or I(4~2, A ) = FalseI(~b I /~ ~b2, A ) is undefined otherwise;6.
I(q~l V q~2, A)  = Trueif I(~bl, A)  = True or I(q~2, A ) = TrueI(q~l V 4~2, A ) = Falseif I(4h, A)  = False and I(q~2, A)  = FalseI(~b~ V 4~2, A ) is undefined otherwise;7.
I(--~, A ) = True if I(4,, A ) = FalseI(-74~, A ) = False if I(q~, A ) = TrueI(---~, A ) is undefined otherwise;8.
I (p  I ~ P2, A )  = Trueif 6(qo, Px ) and ~(q0, P2) are definedand 6(q o, Pl ) = 6(qo, P2)I(Pl ~" P2, A ) = Falseif Alp  x and A/p  2 are both defined and are notunifiable orPl = wlx and 1 ~ S(6(q o, w)),  orP2 = wlx and I ~ S(6(q o, w))I(p~ ~- P2, A ) is undefined otherwise (see Note 4).where,~b, q~l, ~2 ~ WFFA = (Q ,L ,A ,  6, qo, F,X ) ~Aa, bEAI~LPl, P2, w, x E L*We are now in a position to prove the following monoto-nicity property for our logic.
We express it in terms of theknowledge (or information) ordering --<k on the truth values{_1_, True, False } defined by _1_ <k True, _1_ k False, True ~t kFalse and False ~t k True.
In the following, I(~b, A)  = _t_ isused for I(4>, A ) undefined.Theorem 3.1 A E B if and only if for every formula, q~,I(q~, A ) -<k I(~b, B).Proof.
~ Suppose for every formula, 4~, I(q~, A)  --<kI(~b, B).
Every pathp defined in A must also be defined inB, since I (p  :NIL, A ) = True and hence I (p  :NIL, B)  =True.
Since for every state qi in A, there is a path pf suchthat qi = 6A(qOA, Pi) we can define a map h such thath(qi) = 6B(qon, Pi ).
To see that this map is indeedfunctional, note that, if there is a q E QA such that q =6A(q0A, Pl) = 6A(q0.1, P2) for distinct Pl and P2, thenI(Pl ~" P2, A)  = True.
Thus l (p  1 ~ P2, B) = True and6B(qos, Pl) and 6n(qo s, P2) do indeed describe the samestate.One can immediately see that this map satisfies proper-ties 1 and 2 of being a homomorphism given above in thedefinition of subsumption.
To verify the other two condi-tions, note that if hA(qi) = a for some qi E A, then,I(pt:a, A)  = True.
Hence I(pi:a , B) = True andXB(6n(q0n, Pi)) = a.
Thus condition 3 is satisfied.
Theargument for condition 4 is similar.
We have, therefore,established that h is a homomorphism and hence that Av-- B.
=~ The consequent is trivially true with I(4~, A) =_1_, so we will only consider the case when it is either TrueComputational Linguistics Volume 16, Number 1, March 1990 17Anuj Dawar and K. Vijay-Shanker An Interpretation of Negation in Feature Structure Descriptionsor False.
The proof is by induction on the structure of theformula.Basis:NILTrivial, since I (NIL,  A ) = True, for all A.TOPTrivial, since I( TOP, A ) = False, for all A.aNote that i fA is atomic and A C B, then A = B.
1?Thus, if I(a, A )  = True, then A = B and we are done.If I(a, A ) = False, either A is atomic and the argumentis the same as before, or A is complex.
But then, sinceA E B, B is also complex and I(a, B )  = False.Pl ~-P2If I (p  I ~ P2, h ) = True then there is a q E QA suchthat q = 6 A (qoa, Pl ) = 6a(qoA, P2)" Let h be a homo-morphism witnessing A E_ B.
Then, by the definition of ahomomorphism, h(q) = 6n(qon, Pl ) = 6B(qon, P2) andtherefore, I (p  I ~- P2, B)  = True.In the case in which l (p  I ~ P2 , A ) = False, we havetwo possibilities.
Either Alp  I and Alp  2 are both definedand not unifiable, in which case, clearly by the definitionof subsumption, the same will be true of B, or pl = wlx(choosing Px without loss of generality), for some label land some paths (possibly empty) w and x such that I ESa(6a(qo A, w)).
But then, as we pointed out earlier, thiswould mean that the path wl and hence the path Pl can-not be defined in B either.
Thus, in either case, l (pl  ~-P2, B)  = False.Induction Step:1:4,Since A r"- B, if Al l  is defined, so is B/ I  and Al l  E B/1.But then, by induction hypothesis, I(ep, A l l )  <-k I \[(4~,B/ l )  and therefore I(1 : c~, A) <-k I\] (l:q~, B).If A l l  is not defined and I(l:?k, A )  = False, one of twopossible cases applies: either A is atomic, in which caseA = B or l E Sa(qoA), in which case I E Sn(qo B)  bythe definition of subsumption, and we are done.If I(4~/~ ~b, A ) = True, then I(4~, A ) = True andI(~b, A )  = True.
But then, by induction hypothesis,I(4~, B)  = True and I(~b, B) = True.
ThusI(~b /~ ~k, B)  = True.Similarly, if I(4~ A ~b, A ) = False, I(cb, A ) = False orI(~b, A ) = False.
Hence, by induction hypothesis,I(~, B) = False or I(ff, A ) = False, and thereforeI(q~ /~ ?z, B)  = False.The argument is similar to the one in the previous case.--q,Since I(--~, A ) = True if and only if I(cb, A ) = Falseand vice versa, clearly I(--~, A ) __<k I(--~, B), sinceI(~b, A) _<k I(4~, B) .~The following simple corollary corresponds to the mono-tonicity result we established for our original three-valuedsemantics.Corollary.
For all 4~, Tset(4~) is an upward-closed set.As we mentioned earlier in this section, Langholm (1989)describes negatively extended feature structures in a fash-ion very similar to what is described above.
The interpreta-tion he chooses for the description language is, however,intuRionistic in character.
We believe that the modifica-tions that we suggested to our interpretation (in Section3.3.3) to capture the special case of intuitionistic logic inwhich forcing is always done with respect o K*, whenapplied to our new interpretation yield exactly the interpre-tation described by Langholm.5 PROOF SYSTEMIn this section, we give a proof system for the logic de-scribed above that is essentially an adaptation of the tab-leau proof system described by Moshier and Rounds (1987)for their intuitionistic interpretation of the feature logic.The proof system works, not with individual formulae,but with sets of labeled signed formulae.
The Moshier-Rounds tableau proof method worked with sets of sets oflabeled signed formulae.
However, this extra level of com-plexity !is not needed here.We first introduce the notion of a labeled signed formula:Definition 9.
A labeled signed formula is a triplet(w,X, q~), where w ~ L *, X ~ {True, False} and q~WFF.
(w, True, dp) will be written as wT4~, and( w, False, 4a ) as wF4~.We can now define the notion of an f-structure satisfy-ing a labeled signed formulae:Definition 10.
An f-structure, A, satisfies a labeled signedformula ~ (written A ~ ~) in the following cases:A t = wTep if and only i fA /w is defined and I(4~,A/w) =TrueA t = wFcb if and only i fA /w is defined and I(4~,A/w) =FalseDefinition 11.
A set c of labeled signed formulae is closedif and only if at least one of the following holds:?
wT4~, wF4~ ~ c,?
wTa, wTb C c,?
wTa, wxTc~ ~ e,?
wTa, wT I :N IL  ~ c,?
wT(p  ~ px)  ~ c,?
wFNIL  ~ c, or?
wTTOP ~ cfo rsome/~ L ,w,p  ~ L* ,x  ~ L ?,a ,b  E A and~bWFF.Lemma 1.
Any closed set of labeled signed formulae isunsatisfiable.Proof.
Immediate from the definition of a closed set.
\[\]Definition 12.
A set of labeled signed formulae, c, isdownward-saturated if and only if c is not closed, and18 Computational Linguistics Volume 16, Number 1, March 1990Anuj Dawar and K. Vijay-Shanker An Interpretation of Negation in Feature Structure DescriptionswT-'adp ~ cwF~(~ ~ cwT(l:4~) ~ cwF(l:dp) ~ cwlT(p~ ~ P2) ~ cwlF(p~ ~ P2) ~ cwT(px ~- P2) ~ cwT(p  I ~.
p2) ~ cwT(p~ ~.
P2 ),wT(P2 ~ P3) ~ c=~wFq~ c=wT4~ ~ c=~wlT4a ~ c andwTI:NIL ~ c=~wlF~ ~ corwFl :NIL ~ c~wT(lpx ~ lp2 ) ~ c~wF(lp~ ~- lp2 ) ~ c~wTp~ :NIL ~ c andwTp2:NIL ~ c=~wT(p2 ~" Pl) ~ c=wT(p~ ~'P3) ~ cwT(pl ~ P2), wpl Tdp ~ c~wp2Td p ~ cwT(pl ~" P2), wp1F~ E c~wp2F(b ~ CwF(pl ~ P2), wPl Ta E c=>wp2Fa ~ cwT(4~ /~ ~b) ~ c =>wTdp C c and wT~b E cwF(ep /~ ~) ~ c ~wFdp ~ c or wF~b ~ cwT(~ W ~k) ~ c =~wT(~ c or wT~k ~ cwF(c~ V ~b) ~ c =~wF~  c and wF~k ~ cLemlna 2.
I f  a finite set of labeled formulae, c, is down-ward-saturated, it is satisfiable.Proof.
Consider the automaton, A ---- (Q, L, A,/~, q0, F,~, S ), constructed from c as follows:1.
For every path w for which there is a formula ~b suchthat wT4~ ~ c or wF4~ ~ c, include a state qw in Q,with/~ defining a path from qo to qw labeled w.2.
For every pair of paths p~ = wx~ and PE ---- wx2 suchthat wT(x~ ~- x2) ~ c, let q,~ and q,2 be the samestate.3.
For every formula wTa ~ c, include q~ in F and leth(qw) = a.4.
For every formula wFa ~ c, if there is no label I suchthat there is a state q~t ~ Q, then include qw in F andlet h(q~) ---- b for any atomic value b such that b doesnot occur in any formula in c. ~15.
For every formula wFl: NIL ~ c, include l in S(qw)6.
For every formula wF(p~ ~- P2) ~ c, if states q~p, andqwp~ are defined and neither of them is in F, then addnew states q~ and q2 to Q and F, and for some label1 that does not occur in any formula of c, define~(qwp,, 1) = q~ and ~(q~, 1) = q~ with h(q~) = a and~,(q2) = b where a and b are distinct atomic values.
Ifexactly one of the two states (say, q~p, ) is not in F,add just one new state q to Q and let 6(q~,, 1) = q fora label I that does not occur in c.If, however, one of the paths (say, p~) does not havethe associated state (qwp,) defined, let p be the longestprefix ofp~ such that qw~ does exist, and let p~ = plx.Include I in S(q~).Claim 1 :The above construction of an automaton is well de-fined.We need to verify that the above definition yields anautomaton that meets our definition of an acyclic finiteautomaton without any conflicts.
The possible conflictsthat could arise would be that: X does not define afunction; the graph of the automaton had a cycle; forsome q ~ F and some label 1, 6(q, 1) is defined; or, forsome state q and some label l, 1 ~ S(q) and ~(q, 1) isdefined.
However, in each of these cases, it is easy to seethat were it to arise in the construction given above, theoriginal set c would in fact be closed, contradicting thehypothesis that it is downward-saturated.Claim 2:The automaton so constructed satisfies all the labeledsigned formulae in c.We establish this claim by induction over the structureof the formulae in c. For the base cases (namely labeledsigned formulae of the forms: wXa, wXNIL, wFI:NIL,and wX(p~ ~ P2)) it follows immediately from the con-struction that they are satisfied by A.
For the other cases(wX(q~ V ~b), wX(4J A ~b), and wX~ ~b), their sub-formulae are also in c since it is downward-saturated.But by the induction hypothesis, these sub-formulae aresatisfied by A.
That completes the result.\[\]The entailment relation (k) on sets of labeled signedformulae is defined as follows:Definition 13.
Let c and d be two sets of labeled signedformulae.
Then c I- d if and only if c 4= d and one of thefollowing holds:1. wT~4~ E candd = c U {wFdp)2. wE-14~ ~ c and d ---- c U {wT~b}3. wTl:dp E candd ---- c U {wlTdp, wTI:NIL}4. wFl:c~ E candd = c U {wlFdp}5. wFl:cb E candd = c U {wFI:NIL}6. wlT(pl ~" P2) E candd = c U {wT(lpl ~ lp2)}7. wlF(p I = P2) E candd = c U {wF(lpl ~- lp2)}8. wT(pl ~-P2) E c and d = cU{wTpl:NIL, wTp2:NIL}9. wT(p 1 ~" Pz) ~ candd ----- c U {wT(p2 ~'Pl)}10. wT(p I ~-P2), wT(p2~'P3) E c and d = c U{wr(p~ ~ p3)}11. wT(pl ~-p2),wplTdp E candd = c U {wp2Tdp}12. wT(p I ~P2), wplF4~ ~ candd ---- c U {wp2F~b}13. wF(p I ~.
p2), wplTa E candd ---- c U {wp2Fa}14. wT(cb A ~b) ~ candd = c U {wTep, wT~b}15. wF(4~ A ~b) E c and d -- c U {wF~}16. wF(~ A 4,) E candd = c U {wF~b}17. wT(ep V ~b) E candd = c U {wT4~}18. wT(dp V ~b) ~ candd = c U {wT~b}19. wE(oh V ~b) E c and d = c U {wF?, wF~b}We denote by k* the reflexive and transitive closure of thisentailment relation.Theorem 4.
(Soundness) I f  c t-* d for sets of labeledsigned formulae c and d, and d is downward-saturated,then c is satisfiable.Proof.
This follows immediately from Lemma 2 and thefact that c I-* d implies c Cd .
\ [ \ ]Lemma 3.
For any set of labeled signed formulae c, thereare only finitely many sets of labeled signed formulae dsuch that c I-* d.Computational Linguistics Volume 16, Number 1, March 1990 19Anuj Dawar and K. Vijay-Shanker An Interpretation of Negation in Feature Structure DescriptionsProof.
To prove this, we inductively define the notion oflength of a formula, as follows:In(a) = ln (N IL  ) = In (TOP)  = 1ln(pl "~ P2) = length(pl  ) + length(p2)ln ( -~)  = ln((a) + 1ln(?
W ?)
= ln(?
/~ ?)
= ln(ck) + ln(~) + 1where length denotes tring length.Also, define the length of a labeled signed formulawX?
as ln(?)
+ length(w).
Let ~ be any labeled signedformula such that 4> ~ c but 4, C d for some d such thatc I-* d. Observe that the length of ?
is bounded by thelength of the longest formula in c and that ?
does notcontain any symbols that do not occur in c. The resultfollows.E\]Lemma 4.
For any set of labeled signed formulae c, ifthere is no set of labeled signed formulae d such that c I-d, then c is either closed or downward-saturated.Proof.
Clearly, if c is closed under all the entailmentrules listed above, then it satisfies all the implicationslisted in the definition of downward saturation.
Hence, ifit is not downward-saturated, it must be closed.E\]Lemma 5.
For any satisfiable set of labeled signed formu-lae c that is not downward-saturated, there is a satisfi-able set of labeled signed formulae d such that c l- d.Proof.
Since c is satisfiable, it is not closed.
Since it is notdownward-saturated, by hypothesis, there must be a dsuch that c I- d. However, it is clear from the definition ofentailment that if all such d are unsatisfiable, then so isc.I--\]Theorem 5.
(Completeness) For any satisfiable set oflabeled signed formulae, c, there is a downward-satu-rated set of labeled signed formulae d such that c F-* d.Proof.
By Lemma 3, there must be a d such that c I-* dand for no d '  d i- d'.
All such d are either closed ordownward-saturated by Lemma 4.
However, not all ofthem can be closed since then by Lemma 5, c would beunsatisfiable.
Hence, at least one of them is downward-saturated.
E\]Theorem 6.
(NP-Completeness) The satisfiability prob-lem for the logic we have defined is NP-Complete.Proof.
It follows from the proof of Lemma 3 that thelength of any derivation c I-* d is bounded by n 2, where nis the sum of the lengths of the formulae in c. Since thisbound is polynomial, the problem is in NP.
It is NP-hardbecause the satisfiability problem for the Rounds-Kasper logic, which is a special case, is NP-hard.
E\]6.
CONCLUSIONSA logical formalism with a complete set of logical operatorshas come to be accepted as a means of describing featurestructures.
While the intended semantics of most of theseoperators is well understood, the negation and implicationoperators have raised some problems, leading to a variety ofapproaches in their interpretation.In Dawar and Vijay-Shanker 1989 and the present work,we introduced the framework of three-valued logic as ameans of defining the semantics of a feature structuredescription language with negation.
This framework per-mits us to say that a formula such as ~1:4~ does not have atruth value defined in a feature structure that does not havea feature l. This enables us to define an interpretation that,unlike the classical approach to negation, is monotonic, as alog\]\[c describing partial structures hould be.We presented one particular interpretation of FDL withinthis three-valued framework and compared it with otherapl:,roaches to defining the semantics of negation.
Weshowed that several different such approaches could be castin the three-valued framework.
In particular, we showedthat the special case of the Moshier-Rounds intuitionisticapproach, in which forcing is always considered with re-spect to K* could be captured in our framework.One motivation cited by Moshier and Rounds for consid-ering forcing sets other than K* was so that formulae of theform -~I :NIL could be considered satisfiable.
The samereason led us to examine an augmented notion of featurestructure models for FDL that yields an interpretation thatis conceptually simple, motivated by the preservation ofmonotonicity, and is computationally no harder than theoriginal Rounds-Kasper logic.
We also showed that ourinterpretation meets the conditions et out by Pereira (1987)for a satisfactory interpretation of negation.REFERENCESDawar, A.
1988 The Semantics of Negation in Feature Structure Descrip-tions.
Master's Thesis, University of Delaware, Newark, DE.Dawar, A. and Vijay-Shanker, K. 1989 "A Three-Valued Interpretationof Negation in Feature Structure Descriptions."
In Proceedings of the27th Annual Meeting of the Association for Computational Linguistics:18-24.Gazdar, G.; Klein, E.; PuUum, G.; and Sag, I.
1985 Generalised PhraseStructure Grammar.
Harvard University Press, Cambridge, MA.Johnson, M. 1987 Attribute Value Logic and the Theory of Grammar.Ph.D.
Thesis, Stanford University, Stanford, CA.Karttunen, L. 1984 "Features and Values."
In Proceedings of the TenthInternational Conference on Computational Linguistics.
28-33.Kasper, R. T. 1987 Feature Structures: A Logical Theory with Applica-tion to Language Analysis.
Ph.D. Thesis, University of Michigan, AnnArbor, MI.Kasper, R. T. 1988a "Conditional Descriptions in Functional UnificationGrammar."
In Proceedings of the 26th Annual Meeting of the Associa-tion figr Computational Linguistics: 233-240.Kasper, R. T. 1988b "An Experimental Parser for Systemic Grammars.
"In Proceedings of the Twelfth International Conference on Computa-tional' Linguistics: 309-312.Kay, M. 1979 "Functional Grammar."
In Proceedings of the FifthAnnual Meeting of the Berkeley Linguistics Society: 142-158.Kaplan, R. and Bresnan, J.
1983 "Lexical Functional Grammar: a FormalSystem for Grammatical Representation."
In J. Bresnan (ed.
), TheMental Representation f Grammatical Relations.
MIT Press, Cam-bridge, MA.Kleene, S. C. 1952 Introduction to Metamathematics.
Van Nostrand,New 'York, NY.20 Computational Linguistics Volume 16, Number 1, March 1990Anuj Dawar and K. Vijay-Shanker An Interpretation of Negation in Feature Structure DescriptionsKasper, R. T. and Rounds, W. C. 1986 "A Logical Semantics for FeatureStructures."
In Proceedings of the 24th Annual Meeting of the Associ-ation for Computational Linguistics: 257-266.Langholm, T. 1989.
How to Say No with Feature Structures.
Personalcommunication.Moshier, M. D. and Rounds, W. C. 1987 "'A Logic for Partially SpecifiedData Structures."
In ACM Symposium on the Principles of Program-ming Languages: 156-167.Pereira, F. C. N. 1987.
"Grammars and Logics of Partial Information.
"In J. L. Lassez (ed.
), Proceedings of the 4th International Conferenceon Logic Programming.
989-1013.Rounds, W. C. and Kasper, R. T. 1986 "A Complete Logical Calculus forRecord Structures Representing Linguistic Information."
In IEEESymposium on Logic in Computer Science: 34--43Shieber, S. M. 1984 "The Design of a Computer Language for LinguisticInformation."
In Proceedings of the Tenth International Conference onComputational Linguistics: 362-366.Smolka, G. 1988 A Feature Logic with Subsorts.
LILOG report 33, IBMDeutschland, Stuttgart, F. R. G.NOTESIn the original Rounds-Kasper formulation, the output function is notrequired to be total.
This is because every terminal node in thetransition graph is considered to be a final state.
However, since thenotion of finality of a state is not crucial to the formalism, we havechosen this equivalent alternative for presentation.2.
Strictly speaking, we should be taking the least upper bound in theordering on equivalence classes of automata under isomorphism.3.
See Section 3.3.3.4.
A similar notion was used by Kasper (1988a), who introduces thenotion of compatibility.
We shall compare this approach with ours ingreater detail in Section 3.3.3.5.
In this paper we will not consider cyclic feature structures.6.
And therefore it satisfies the formula ---~.7.
Equality here is strong equality (i.e.
if I(~, (Aft) is undefined then sois I(l:~, A)).8.
Two automata re not unifiable if and only if they do not have a leastupper bound.9.
Langholm (1989) has defined a similar notion of negatively extendedfeature structures.
We will take up a comparison of his approach withours later in this section.10.
Up to isomorphism.11.
We are implicitly assuming that the sets of atoms and labels are bothinfinite.
If this is not the case, the definition of closure of a set oflabeled signed formulae and this construction can be suitably modi-fied.Computational Linguistics Volume 16, Number 1, March 1990 21
