FORMALISMS FOR MORPHOGRAPHEMIC  DESCRIPT IONAlan Black.
Graeme Ritchie.Dept of Arr~.~al I~elZ~gence, Univer~y o\[ F_dlinSw'gh80 South Br/dge, Edinburgh EH1 lltN, 5COTI, ANDSteve Pu lman and Graham RussellCorn/ha/rig Laborazory, Un~ver~y of  Cambr/dgeCorn Exchange Street, C, ambri4t ge C B 2 3QG ,ENGLANDABSTRACTRecently there has been some interest in rule for-maltsms for describing morphologically significantregularities in orthography of words, largelyinfluenced by the work of Koskenniemi.
Varioueimplementationa of these rules are possible, butthere are some weaknesses in the formalism as itstands.
An alternative specification formalism ispossible which solves some of the problems.
Thisnew formalism can be viewed as a variant of the"pure'" Koskenniemi model with certain con-etraints relaxed.
The new formalism has particu-lar advantages for multiple cheLracter changes.
Aninterpreter has been implemented for the formal-ism and a significant subset of EngLish morphogra-phenfice has been described, but it has yet to beused for describing other languages.BackgroundThis paper describes work in a partic~dAr area ofcomputational morphology, that of morphogra-phemics.
Morphographemics is the area dealingwith systematic discrepancies between the surfaceform of words and the symbolic representation fthe words in a lexicon.
Such differences are typi-cal/y orthographic hanges that occuz when basiclexical items are concatenated; e.g.
when the sWmmove and sufflx +~d are concatenated they formmoved with the deletion of an e+.
The work dis-cussed here does not deal with the wider issue ofwhich morphemes can join together.
(The way wehave dealt with that question is described inRussell a aL (1986)).The fzamework described here is based onthe two-level model of morphographemics(Koskenniemi 1983) where rules are written tode~zibe the relationships between surface fo rms(e.g.
moved) and lexical fo rms (e.g.
move+ed).
Inhis thesis, Koskennlemi (1983) presents a formal-ism for describing morphographemics.
In the earlyimplementatiorm (Koskenniemi 1983, Karttunen1983) although a hlgh-level notation was specifiedthe actual implementation was by hand-compilation into a form of finite state machine.Latez implementations have included automaticcompilation techniques (Bear 1986, Ritchie et aZ1987), which take in a high-level specification ofmarface-t~-lexical relationships and produce adirectly interpretable set of automata.
This pre-compilation is based on the later work of Koskenoniemi (1985).Note that there is a distinction between the/u,,e~_7!~ and its Imp~nentatlon.
Although theKoskenniemi formalism is often discussed in termsof automata (or transducers) it is not alwaysnecessary for the morphologist using the system toknow exactly how the rules are implemented, butonly that the rules adhere to theiz definedinterpretation.
A suitable formalism should makeit easier to specify spelling changes in an elegantform.
Obviously for practical reasons thereshould be an efficient implementation, but it is notnecessary for the specification formalism to beidentical to the low-level representation used inthe implementation.As a result of our experience with these rulesystems, we have encountered various limitationsor inelegances, as follows:I I?
in ?
real l~cal ly sized rule set, the descrip-tion may be obscure to the human reader;,?
different rules my inmact with eachother in non-obvious and inconvenient ways;?
certain forms of correspondence d mandthe use of several rules in an clumsymanner;?
some optional correspondences areextremely ditficult to describe.Some of these problems can be overcome using amodified formalism, which we have also imple-mented and teated, although it aim has its limita-tions.Kmkenniemi RulesThe exact form of rule described here is that usedin our wozk (Russell ,~ aL 1986, Ritehie eZ -I.1987) but is the same as Koskenniemi's (1983,1985) apart from some minor changes in surfacesyntax.
Koskenniemi Rules describe relationshipsbetween a sequence of surface characters and asequence of lexlcal characters.
A rule consists ofa rule pair (which consists of a lexical and a sur-face character), an operator, a left  context and ar ight context.
There are three types of ru/e:Con:,=z Re~r/czion: These are of the formpair --* I.eftContext ~ RightContextThis specifies that the rule pair may appearon/y in the given context.Sw-/ace ~ lon :  These are of the formpair *-- LeftContext ~ RightContextThis specifies that if the given contexts andlexical character appear then the surfacecharacter n=~ appear.Combined Ru~: This final rule type is a combina-tion of the above two forms and is ~r/ t tenpair *-* LeftContext ~ RightContextThis form of rule specifies that the surfacecharacter of the rule pair musz appear if theleft and right context appears and the lexicalcharacte~ appears, and also that this is theonZy context in which the rule pair isallowed.The operator types may be thought of as aform of implication.
Contexts are specified as reg-ular expressions of lexical and surface pairs.
Forexample the following rule:Epenthesis+:e *'* {s:s x :x  z:z < {s:s c:c) h :h>~ - -  s:sspecifies (some of) the cases when an ?
is insertedat the conjunction of a stem morpheme and thesuffix +$ (representing plurals for nouns and thirdperson tingular for verbs).
The braces in the leftcontext denote optional choices, while the angledbrackets denote sequences.
The above rule may besummarised as "an ?
must be inserted in the sur-face string when it has s, x, z, ch or sh in its leftcontext and $ in its right".Another addition to the formafism is thatalternative contexts may be specified for each rulepair.
This is done with the or connective for mul-t/pie left and right contexts on the right hand sideof the rule e.g.Elisione:O .-.
C:C ~ < +.
'0 V :V>or <C:C V :V>~ <+~ e:e>This example also in*roduces sets - C and V(which are elsewhere declazed to represent con-sonants and vowels).
The or construct states that?
can correspond to 0 (the null symbol) when (andonly when) in eir3urr of the two given contexts.The first option above copes with words such asmotmd resolving with move+ed and the seconddeals with examples llke agreed ~esolving withagrN+ed.Sets have a somewhat non-standardinterpretation within this basic formalism.
Theexpansion of them is done in terms of the feasibleset.
This is the set of all lexical and surface pairsmentioned anywhere in the set of rules.
That is,all identity pairs from the intersection of the lexi-ca/ and surface alphabets and all concrete pairsfrom the rules, where concrete pairs are those pairsthat do not contain sets.
The interpretation of apair containing a set is all members of the feasibleset that match.
This means that if y:i is a memberof the feasible set and a set Ve is declax~.-d for theset {a e i o u ~} the paiz Ve:Ve represents the pairy:l as well as the more obvious ones.Traditionally, (if such a word can be used),Koskenniem/ Rules are implemented in terms offinite date machines (or transducers).
~ O(Kartlmnen 1983), one of the early implementa-t/ons, required the morphologist o specify therules dizectly in transducer form which was12dtmcult and prone to ~or .
Koskennlemi (1985)later described a possible method for compilationof the high-level specification into transduceri.This means the morphologist does not have towrite and debug low-level finite state machines.Probl-ma wi th  Koskenntemi Formal/sinThe basic idea behind the Koskenniemi Formalism- that rules should describe correspondencesbetween a surface string and s lexical string(which effectively represents a normal form) -appears to be sound.
The problems listed here arenot fundamental to the underlying theory, that ofdescribing re lat ionships between su~face and lexl-ca/strings, but axe more problems with the exactform of the rule notation.
The formal~m as itstands does not make it impossible to describemany phenomena but can make it difficult andunintuitlve.One problem is that of interaction betweenrules.
This is when a pair that is used in s contextpart of a rule A is aim restricted by some otherrule B, but the context within which theappears in A is not a valid context with respect oB.
An example will help to Ulnstrate this.
Sup-pose, having developed the EZ/slon rule givenabove, the linguist wishes to introduce a rulewhich expresses the correspondence b tween reduc-tion and the lexical form reduc~atton, aphenomenon apparently unrelated to elision.
Theobvious rule.
are:Elisione:O ~-, C:C ~ < +:0 V :V  >or <:C:C V :V  >~ <+:0  e:e >A-deletiona:O *-* <c:c e:O +:0 > m t:tHowever, these rules do not operate indepen-dently.
The pair e:O in the left context of the A-deletlon rule is not licensed by the E7/aion rule asit occurs in a context (c:c ~ < +:0 a:O >) which isnot valid with respect o the right context of theE1/slon rule, since the V:V pair does not match thepair a:0.
The necessary EUaton rule to circumventthis problem is:Elisione.~ *-, C :C  m < +:O V :V  >or < C:C V :V  :> ~ < +:0 e:e >or  c:c  ~ <+:0  a:O>Such possible situations mean that the writer ofthe rules must check, every time the r t~ pair froms rule A is used within one of the context state-ments of another rule B, that the charactersequence in that context statement is valid withrespect o rule A. TheoreticaLly it would be possi-ble for a compiler to check for such cases althoughthis would require finding the intersection of thelanguages generated by the set of finite state auto-mats which is computationally expensive (Oareyand Johnson 1979 p266).A similar problem which is more easilydetected is what  can be termed double coercion.This is when two  rules have the same lexical char-acter in their rule pair, and their respective leftand right contexts have an intersection.
The situa-tion which could cause this is where an underlyinglexical charact~ can correspond to two differentsurface characters, in different contexts, with thecorrespondence being completely determined bythe context, but with one context description beingmore general than (subsuming) the other.
Forexample, the following rules allow lexical I to mapto su,-face null or surface I (and might be proposedto describe the generation of forms like probablyand probab/Zlt'y from probable):L-deletion1:O *'* b:b m <e:O +:0 1:I >L-to-I1:i *-" b:b m { e:O e:l }Matching the surface string bOO to the lexicalstring b/e (as demanded by the first rule) would beinvalid because the second rule is coercing the lexi-ca/ l  to a surface t; similarly the surface string btOwould not be able to match the lexical string blebecause of the first rule coercing the lexical Z to asurface 0.
(Again, such conflicts between rulescould in principle be detected by a compiler).There appears to be no simple way round thiswithin the formalism.
A possible modification tothe formalism which would stop conflicts occur-ring would be to disallow the inclusion of morethan one rule with the same lexical character inthe rule-pair, but this seems a little too restrictive.One argument that has been made against heKoskenniemi Formalism is that multiple characterchanges require more than one rule.
That is wherea group of characters on the surface match a groupon in the lexicon (as opposed to one characterchanging twice, which is not catered for nor isintended to be in the frameworks presented here).13For example in English we may wish to describethe ~Jationahlp between the mtrface form applica-tion and the lexical form applyt.atton u a twocharacter change t ?
to y +.
The general way todeal with multiple character changes in theKoskenniem/Formalism is to write a rule for eachcharacter change.
Where a related character changeis referred to in a context of rule it should bewritten as a lexiced character and an ",," on thesurface.
Where " - "  is defined u a surface ~q thatconsists of edI surface characters.
Thus the applica-tion example can be encoded as follows.Y-to-Iy:i *', - -  <+: -  a:a (t:t 1:1 b:b}>C-imertion+:c *-* y : -  m <a:a{t:t 1:1 b:b} >The " - "  on the surface must be used to ensure thatthe rules enforce ach other.
If the following werewrittenY-to-Iyd *" - -  4~ +:e aut {t:t I:l b:b} >C-lnsortion+:c *'* y:i m <a:a {t:t 1:1 b:b}>then ap~3~atlon would ~ be matched withapply+at/on.
This technique is not particul~lyintuitive but does work.
It has been suggestedthat a compile~ could automatically do this.Another problem is that because only oneruie may be written for each pair, the rules areeffectively sorted by ~ rather than phenomenaso when a change is genuinely a multiple changethe ~ changes in it cannot neces~____rily bedescribed together, thug making a rule set di~icultto read.Because of the way sets are expanded, theinterpretation of rules depends on all the otherrules.
The addition or deletion of a spelling rulemy change the feasible pair set and hence a rule'sinterpretation may change.
The problem is not somuch that the rules then need re-compiled (whichis not a very expensive operation) but thatinterpretation of a rule cannot be viewed indepon-dently from the rest of the rule set.The above problems are edl actuedly criti=of the elegance of the formalism for describ-ing speUing phenomena s opposed to actual res-trict/oug in its descriptive power.
However, oneproblem that has been pointed out by Bear is thatrule pairs can only have one type of operator sothat a pair may not be optional In one context butmandatory in another.There has also been some discussion of theformed descriptive power of the formalism, partic-uiarly the work of Barton (1986).
Barton hasshown that the question of finding alexical/surface correspondence from an arbitraryKoskenniemi rule s~t is NP-complete.
It seemsintuitively wrong to suggest that the process ofmorphographemlc analysis of natured language iscomputationally difficult, and hence Barton'sresult suggests that the formalism is actually morepowerful than is r~ l ly  needed to describe thephenomenon.
A leu powerful formalism wouldbe deairable.A final point is that although initially thishigh-level formalism appears to be easy to readand comprehend from the writer's point of view,in practice when a number of rules are involvedthis ceases to be the case.
We have found thatdebugging these rules is a slow and difficult task.A/ternat ive Formalismsection proposes a formalism which is basi-cedly sim~lar to the "pure" Koskenniemi one.Again a description consists of a set of rules.There are two types of rule which aUow thedescription of the two types of changes that canoccur, mandatory changes and optional changes.The rules can be of two types, first surface-to- lex~al rules which are used to describeoptional changes and lexical-to=surface ruleswhich are used to describe mandatory changes, theinterpretation is as followsSw'fac~o-laxtc..aZ ~des: These rules are of theformLHS -* RHSWhere/.2/5 and RH$ are simple fists of sur-face and lexiced characters respectively, eachof the same length.
The interpretation isthat for a surface string and lexical string tomatch there must be a partition of the sur-face string such that each partition is a LI-/Sof a rule and that the lexical string is equalto the concatenation of the correspondingRHSs.Lextcal-to-Surface ~ht/es: These rules are of thefo rm14I.HS *- RHSThe Z.HS and ~P./-/S are equal length strings ofsurface and lexical characters respectively.Their interpx~.tation is that any subetxing ofa lexical string that is a ~P~/S of a rule mustcorrespond to the surface string given in thecorresponding/.~S of the rule.asymmetry in the application rulesmeans that L.S-~_-_~ (lexical-to-su~ace rules) canoverlap while SL-~u~ (surface-to-lexical rules)do not, An  example may help to explain their use,A basic set of spelling rules in this formal-ism would consist of first the simple llst of idan-f l i t  SL-Rulesa ...o ab- - .bc .
.~?e * oZ ""  Zwhich could be automatically generated f~om thein~t ion  of the surface and lexical alphabets.In addition to this basic set we would wish to addthe rule0 - ' .+which would allow us to match null with a spe-cial character marking the start of a su/~.
Theserules would then allow us to match strings likeboyOs to boy+s, glrl to girl and waUcOlng to~+ing .To cope with epenthesis we can add SL-Rulesof the formses - - .
s?sxes - ' *x+szes ' - *z?uches - .ch+sshes - - .
sh+swould allow matching of forms like boxe~with box+s and m~c, he~ with maZch+s but stillallows boxOs with box+s.
We can make the addingof the ?
on the surface mandatory rather than justoptional by adding a cox'responding IS-Rule foreach tL-Rule.
In this case if we add the IS-RulesS es* - ' - s  +sX es* ' - -x  + szes* - - z+sehes .
- - ch+sshes , - - sh  +sthe surface string boxOs would not match box+sbecause thia would violate the LS-Rule; similarly,m~cJ~$ would not match ~_~__tch+s.However if some change is optional and notmandatory we need only write the SL-Rule withno corresponding LS-Rule.
For example, assumingthe word ~co/has the alternative plurals hooves orhoofs, we can describe this optional change bywTiting the SL=RUleves - - .
f+sThe main difference between this form of rulesand the Koskenniemi rules is that now one rulecan be written for multiple changes where theKoskenniemi Formalism would require one foreach character change.
For example, consider thedouble change described above for matching appll-cation with appZy+atlon.
This required two distinctrules in the Koskennlemi Format, while in therevised formalism only two clearly related rulesare x~quiredi ca t - - .y+ati ca t ' -y+atOne problem which the formalism as it standsdoes suffer from is that it requires multiple rulesto describe different "cases" of changes e.g.
eachcase of epenthesis requires a rude - -  one each forwords ending in ch, sh, $, x and z.
In our imple-mentation rules may be specified with sets insteadof just simple characters thus allowing the rules tobe more general.
Unfortunately this is notsufficient as the user really requires to specify theleft and right hand sides of rules as regular expres-sions, thus allowing rules such as:<{ <{sc}h>xzs}es  >--*<{ <{sc}h>xzs}+s>but this seems to significantly reduce the readabil-ity of the formalism.One useful modification to this formalismcould be the coUapsing of the two types of rule( IS and tL).
It appears that an IS-Rule is neverrequired without a corresponding SL-Rule so wecould change the formalism so that we have two15operators --* for the simple SL-Rule for optionalchanges and *-* to repree~qlt the corresponding SLand I S-Rulea for mandatory changes.So far we have implemented an interpreterfor this alternative for_m_-tlsm and written adescription of English.
It.
coverage is comparablewith out English deecription in the KoskenniemlFormalism but the alternative description is possi-bly easier to understand.
The implementation ofthese rules is again in the form of special automatawhich check for valid and invalid patterns, likethat of the Koskenniemt rules.
This is not surpris-ing u both formalisms are designed for licensingmatches between surface and lex/cal strings.
Thetime for compilation and interpretation is compar-able with that for the Koskenniemi rules.Comparison of  the two formal ismsIt is interesting to note that if we extended theKoskenniemi formalism to allo`w regulax expres-sionu of pa/rs on the left hand side of rules ratherthan just simple pairs, ` we get a formalism that isvery similar to our alternative proposal.
The maindifference then is the lack of contexts in 'which therules apply - -  in the alternative formalism therules are alto specifying the correspondences forwhat would be contexts in the Koskenniemi for-malism.Because SL-Rules do not overlap this meansphenomena which are physically close together oroverlapping have to be described in one rule, thusit may be the case that changes have to be declaredin more than one place.
For example, one couldargue that there is e-deletion in the matching ofredu~ton to reduce+atic~ (thus following theKoskenniemi Formalism) or that the change is adouble change in that the e-deletion and the a-deletion are the same phenomena (as in this newformalism).
But there may also be cases where themorphologiet identifies two separate phenomenawhich can occur together in some circumstances.In this new formalism rules would be zequixed foreach phenomena nd also where the two overlap.One example of this In EngLish may be qu/zzeswhere both consonant doubling and e-insertionapply.
In this formalism a rule would need to bewritten for the combined phenonmena as well aseach individual case.
Ideally, a rule formalismshould not require information to be duplicated, sothat phenomena re only described in one place.In English this does not occur often so seems notto be a problem but this is probably not true forlanguages "with richer morphogsaphemics such asFinnish and Japanese.Interaction bet`ween rules however can in asense still exist, but in the formalism's currentform it is significantly easier for a compiler todetect it.
SL-Rules do not cause interaction, sincedifferent possible partitions of the surface stringrepresent d i f f~t  analyses (not conflicting ana-lyses).
Interaction can happen only with L3-Rules, which in principle may have overlappingmatches and hence may stipulate conflicting sur-face sequences for a single lexical sequence.Interaction will occur if any RHS of a rule is asubstring of a RHS of any other rule (or concate-nation of rules) and has a different correspondingLHS.
With the formalism only allowing simplestrings in rules this would be relatively easy todetect but if regular expressions were allowed theproblem of detection would be the same as in theKoskenniemi Formalism.
Double coercion in thenew formalism is actual/y only a special case ofinteraction.The interpretation of symbols representingsets of characters has been changed so that addingand deleting rules does not affect the other rulesalready in the rule set.
This seems to be an advan-tage, as each rule may be understood in isolationfrom others.One main advantage of the new formalism isthat changes can be optional or mandatory.
Ifsome change (say e-deletion) is sometimes manda-tory and sometimes optional there will be distinctrules that describe the d~erent cases.As regenls the computational power of theformalism, no detailed analysis has been made, butintuitively it is suspected to be equivalent o theKoskenniemi Forma~sm.
That is, for every set ofthese rules there is a set of Koskenniemi rules thataccepts/rejects the same surface and lexicalmatches and vice versa.
The formal power seemsan independent issue here as neither formalism hasparticular advantages.It may be worth noting that both formal-isms are suitable for generation as well as recogni-tion.
This is due to the use of the two-level model(surface and lexical strings), rather than the for-realism notations.16Pumm WorkAlthough this alternative formalism ~ to havemine advantages over the Koskenniemi Formalism(optional and mandatory changes, set notation andmultiple character changes), there is still muchwork to be done on the development of the newformalism.
The actual surface syntax of this newf o ~  requires some experimentation to findthe most suitable form for easy specification of therules.
Both the Koskenniem/ Formalism and thenew one seem adequate for specification of Englishmorphogx~phemics (which is comparatively tim-pie) but the real issue appears to be which of themallows the writer to describe the phenomena in themost succinct form.One of the major problems we have found inour work is that although formalisms appear sire-pie when described and initially implemented,actual use often shows them to be complex andd~cu l t  to use.
There is a useful analogy herewith computer programming languages.
New pro-gramming languages offer difl'ex~nt and sometimesbetter faculties but in spite their help, effectiveprogramming is still ?
dimcult task.
To continuethe analogy, both these morphographemic formal-isms require ?
form of debugger to allow thewriter to test the rule set quickly and find itsshort-comingr.
Hence we have implemented adebugger for the Koskenniemi Formalism.
Thisdebugger acts on user given surface and lexicalstrings and allows s~rp or diagnosis modes.
Thestop mode describes the current match step by steptn ~ of the user wrft~en r,~_-~_% and explains thereason for any failures (rude blocking, no rulelieensln 8 apafr etc).
The diagnosis mode runs thematch to completion and summarises the rulesused and any faLlures if they occur.
The impor-tant point is that the debugger describes the prob-lems in terms of the user wriUen rules rather thansome low level automata.
In earlier versions ofour system debugging of our spell ing rules wasvery difficult and time consuming.
We do not yethave a similar debugger for our new formalismbut if fully incorporated into our system we see adebugger as a necessary part of the system to makeit useful.Another aspect of our work is that of testingour new formalism with other languages.
Englishhas a somewhat simple morphographemics and isprobably not the best language to test our formal-ism on.
The Koskenniemi Formalism has beenused to describe a number of different languages(see Oazdar (1985) for a list) and seems adequatefor many languages.
Semitic languages, like Ara-bic, which have discontinuous changes have beenposed as problems to this framework.
Kosken-niemi (personal communication) has shown that infact his formalism is adequate for describing suchlanguages.
We have not yet used our new formal-ism for describing languages other than English,but we feel that it should be at least as suitable asthe Koskenniemi Formalism.Concleslonpaper has described the Koskenniemi Formal-brm which can be used for describing morphogra-phemic changes at morpheme boundaries.
It haspointod out some problems with the basic formal-ism as it stands and proposes a possible alterna-tive.
This alternative is at least as adequate fordescribing English morphographenfics and may besuitable for at least the languages which theKoskenniemi Formalism can describe.The new formalism is possibly better, as ini-tially it appears to be more intuitive and simple towrite but from experience this cannot be said withcertainty until the formalism has beensignificantiy used.AcknowledgementsWe would like to thank Kimmo Koskenniemi forcomments on an earlier draft of this paper.
Thiswork was supported by SERC/Alvey grantGR/C/79114.RefereIic~Barton, O. Edward 1986 Computational Complex=ity in T~o-Level Morphology In ProceedingsACL '86, 24th Armtud Meeting of Associatlon/or Computag ionaZ Llnguls~ica 53-59.Bear, John 1986 A Morphological Recoguisez withSyntaetic and Phonological Rules In Proceed-ings OOLING '86, l lOt Iv~ern~lonaZ Conf~-er~ on Comptrtag tonaZ Linguistics 272-276.Garey, Michasl R.; and ~ohnson, David S. 1979Computers and IntractobIZlty: A Guide to ~e27teor7 of NP-Completeness W.H.Freemanand Co., New York.Gazdar, Gerald 1985 Finite State Morphology: areview of Koskenniemi (1983).
Report No.17CSLI45-32, CSLI, Stanford UniversitT.Karttunen, Lauri 1983 KIMMO: A General Mor-phologicni Analyse~ 7"exa.v Llng~ds~tcsForum, 22:165-186.Koskenniemi, KAmmo 1983 Two-level Morpholoo87: ?
general computational model forwurd-fom recognition and production.Publication No.U, Department of GeneralLlngul~cs, University of Helainki, Finiand.Koskennlemi, Klmmo 1985 Compilation of Auto-mats from Two-Level Rules.
Talk given atWorkshop on Finite-State Morphology,CSLI, Stanford University, July 1985.Rltchie, Graeme D.; Pulman, Steve G.; Black, AlanW.
; and Ru~ell Graham J.
1987 A Compu-tation&!
Framework For Lex/cal Description.DAI Research Paper no.
293, University ofEdinburgh.
Alto to appear in CompucatlonaZZ ~ ~ .Russell Graham J.; Pulman, Steve G.; Ritchle,Gzaeme D.; and Black, Alan W. 1986 A Dic-tionary and Morphological Analyser forEngliah.
In Proceedings COLING "86, llZhIn t~ l~ ~ on C.o~put~lon~Z,/ngutsttc.s 277-279.18
