APPLYING AND IMPROVING THE RESTRICTION GRAMMAR APPROACHFOR DUTCH PATIENT DISCHARGE SUMMARIESPETER SPYNS \[1,2\] GEERT ADRIAENS \[1,3\]Katholieke Universiteit Leuveo\[1\] Center for Computational Linguistics (ccl@et.kuleuven.ac.be)Maria-Theresiastmat 21, B-3000 Leuven, Belgium\[2\] Division of Medical nformatics, University Hospital GasthuisbergHerestraat 49, B-3000 Leuven, Belgium\[3\] Siemens-Nixdorf Software Center LiegeRue Des Fories 2, 4020 Liege, Belgium0.
abs~actThis paper starts by giving a short overview of oneexisting NLP project for the medical sublanguage (1).After having presented our objectives (2), we willdescribe the Restriction Grammar formalism (3), thedatastructure w  use for parsing (4) and our parser (5)enhanced with a special control structure (6).
Anattempt o build a bootstrap dictionary of medicalterminology in a semi-automatic way will also bediscussed (7).
A brief evaluation (8) and a short outlineof our future research (9) will conclude this article.1.
context and state of the artIn medecine, the use of natural language for compilingreports and patient documents i a widespread habit.The importance of the information embedded in apatient discharge summary (PDS) has led to thecreation of various torage and retrieval programs (e.g.Dorda 1990).
Basically, these programs use pattern-matching (enhanced' with boolean selectionpossibilities) to retrieve the required information.
Amore scientifically based method to extract theinformation from a patient discharge summary is alinguistically based analysis, which captures all thesubtilities of the free text.
This "intelligent" approachpermits questions that imply deductive reasoning and istherefore preferred to simple pattern-matching basedtechniques (Zweigenbaum et al1990).A team from the New York University, directed bySager, has developed an NLP system that analyzesPDSs, structures their information and stores the wholein a relational database.
The data can thus be accessedby other programs in an organized way.
This MedicalLanguage Processor (MLP) is an extension of theLinguistic String Project (LSP) (Sager 1981), whichaimed at analyzing technical and specialized languageby means of String Grammar (Sager et al1987).
Morerecently, the LSP-MLP was successfully imported inEurope and it is currently functioning in the H6pitalCantonal de Gen~ve, where it handles French patientdocuments (Sager et al1989).2. objectivesStarting from an existing grammar for English, anattempt was made to develop a grammar for the Dutchlanguage by making use of the experience gained uringthe LSP.
This implies the creation of a set of grammarrules, the implementation f a interpreter/translator forthese rules and the generation ofa limited ictionary.On the basis of a set of 6 PDSs, a limited grammar hasbeen built.
Every word constitutes a separate ntry inthe dictionary; no morphologic analysis takes places.Conjunctions are not yet handled, but the possibilityexists (Hirschman 1986).
Relative clauses also falloutside the scope of the current grammar.
It is ourintention to use the grammar to analyze free input (as itoccurs in PDSs) with an eye to extracting the relevantmedical information.
From there on, the system will beused to help medical secretaries in the classification ofthe PDSs with respect to medical database systems.3.
restriction grammar3.1.
historical backgroundRestriction Grammar (RG) is the Prolog-version ofString Grammar, which emanated during the 60s as thegrammar formalism of the distributionalism schoolpromoted by Harris (1962).
One might wonder whythis theory is being reused.
An up-to-date theoreticalformalism suffers to a large extent from the limited andexperimental character of its applications.
Tile LSP-MLP has proved to lead to large scale useful NLPsystems.
That is why we adopted the same theoreticalbackground ( istributioualism) to develop an aualogousgrammar for the Dutch language.3.2.
relation with other logic formalismsThe RG-formalism is related to Definite ClauseGrammar (DCG).
A grammar consists in both forma-lisms of a set of context-free production rules inter-spersed with Prolog predicates that function as restric-tions.
Advantages of RG are the absence of parametersin the rules and the separate treatment of context-ACTES DE COLING-92, NANTES, 23-28 Adler 1992 1 2 6 4 PROC.
OF COLlNG-92, NANTES, AU6.
23-28, 1992sensitive information, which is stored in a tree-structurethat is gradually built up during the sentence-analysis.Flexibility in creating, adapting and checking thegrammar is thus guaranteed (Hirschman 1986,Hirschman & Puder 1986).3.3. some type definitionsThe RG-grammar contains different types of structures.Alinc, uistic strine is a single option definition whichconsists of a sequence of "required" elements in directcorrespondence with an elementary word in thesentence, interspersed with elements of the adjunct settype.
For instance, the definition for an affirmation isthe following:affn-mation ::= np, sa_rec opt, vp, saree_opt.This rule states that the affirmation consists of an npand vp-string (both required) as well as optionalsentence adjunct strings.An ailjll.q?,l...~l definition has several options, which arethe names of string definitions or sets of stringdefinitions.
The strings of the adjunct set are optionaladditions to the sentence.
In opposition to Sager andHirschman, the optionality and recursivity of somestrings (sa, rn, rv) is embedded in our grammar and nospecial parser mechanisms are needed (see below).sa ::= prate; ptime; pn; nstgt;csstg; dstg.The rule states that a sentence adjunct can consist ofprepositional strings (indicating a date or moment intime), an expression of time (nstgt), a subordinatesentence-structure (csstg), or an adverbial suing (dstg).Structures of the ~ consist of a word class "X",which is the core or head of the structure, occurringwith optional left and right adjuncts (Sager 1981).lnr ::= In, nvar, rn_rec opt.Here, a nominal constituent is surrounded by its leftand right adjunct strings.Positional variant,5 are auxiliary definitions whichgroup together linguistically related classes of strings.nvar ::= lnamer; {d_nvar}, *n; {d_inf},lo_vinf_ro;{dnl}, *nulln; *pro, {w pro2}.The core of a nominal constituent can be formed by aproper name with its adjuncts, a noun, a nominalizedverb string, a null noun and a pronoun.
Note theexistence of the zero noun (*nulln), which is onlyjustified for reasons of the economy principle applied tothe grammar rather than on purely linguistic grounds.New omional and recursive structures are created andincluded in our grammar.
This was useful to skip theextra machinery needed by Sager and Hirschman to copewith the "empty" and repeated adjunct strings (Sager1972).
These new strings allow the parser to adopt auniform strategy for the complete grammar.
All thestrings of the adjunct set have a corresponding optionaland recursive structure.sa rec_opt ::= sa_rec; \[l. (optional definition)sa_rec ::= sa, sa_rec_opt.
(recarsive def'mition)These constructs allow a transparent treatment of anoptional recursive sentence-adjunct.Sometimes, the theoretical frontiers between thedifferent structures are slightly blurred in grammarrules, but this will be cleaned up during the furtherdevelopment of the grammar.As opposed to non-terminal categories (the structuresalready mentioned), a ternlinal cater,try constitutes aleaf of the parse tree.
The variable Word (see below) ofevery leaf is instantiated.
In the grammar, a terminalcategory is marked by an asterisk.nvar ::= lnamer; \[d nvar}, *n; {d inf} ,lo vinf ro;{dnl \], *nulln; *pro, {w_pro2}.are words which are directly integrated in thegrammar and function more or less as fixed ex-pressions.
The example shows the definition of a left-adjunct o a proper noun.
The literals appear betweensquare brackets.lname ::= \[Prof, '.
', dr, '.
'l; \[dr,'.
'\] .3.4. restrictionsThe application of the grammar rules to a sentence canresult in various parse trees.
These are not necessarilycorrect from a pragmatic-linguistic point of view.Thus, the need emerges to distinguish the acceptableanalyses from the bad ones.
The restrictions prune thecombinatorial explosion of parses permitted by thecontext-free grammar rules.
When a restriction fails, thenext positional variant of the category which functiontsas the head of a grammar rule is considered.Restrictions appear between curly brackets.nvar ::= lnamer; {d_nvar}, *n; {d inf},lo_vinf ro;{dial}, *nulln; *pro, {w pro2}.There exist two kinds of restrictions.
The well-formedness restrictions check if the parse tree meetssyntactic and semantic constraints imposed on theleaves or on the syntactic relations between variousnodes of the parse tree (e.g.
w_pro2).
Disqualifyrestrictions consider the input stream (e.g.
d inf fails ifno infinitive is present in the remaining input stream)ACRES DE COLING-92, NANTEs, 23-28 Ao~r 1992 l 2 6 5 PROC.
OF COLING-92, NANTEs.
AUG. 23-28, 1992and enhance fficient parsing by blocking directionswhich lead to failure.
The restrictions are implementedby means of special functions (locating routines) thatallow navigating from one node in the tree to another.Currently, the still limited grammar for the Dutchlanguage consists of some 157 RG-clanses completedwith 41 restrictions.
As already mentioned, con-junctions are not yet covered; neither are relativeclauses or interrogatives sentences.
This grammar wasthe result of confronting a larger theoretically builtgrammar with the linguistic reality of 6 patientdischarge summaries.4.
the data structure of the parse IreeThe data structure used for the parse tree is the oneproposed by Hirschman and Puder (1986).
The parsetree together with its operators are defined as an abstractdata type.
The abstraction function can be defined asfollows:F: Node -> \[TreeTerm,Path\] :TreeTerm =tt(Label,Child,Sibling,Word),Word = \[Item,lnfo\].The representation i variant is:VkE  {Nodes} :Item is a Dutch word or punctuation sign,Info is one of the grammatical categories,Item = \[\] <=> Label = *nulln,Word is instantiated <=>Label = (literal v terminal),Label is always ground.The first relation of the abstraction function states thata TreeTerm contains linguistic (Label,ltem) as well aspositional information (Child,Sibling).
The secondrelation links a node to the path in the parse tree thatmust be traversed to reach the root starting from thatnode.
Movements in the parse tree are executed bymeans of the up/2,  down/2 ,  r ight /2 and left/2operators.
As subtrees are successfully generated, thepath gradually shrinks during the movement upwards inthe tree.5.
the implementation f the parserBasically, an RG translator-interpreter does not differsubstantially from a DCG translator-interpreter.
Themain difference r sides in the handling of the parametersneeded for the construction of the parse tree (absent inRG-rales).
The translator-interpreter takes care of theparameter bindings instead of the grammar rules as isthe case in DCG.
An example of the output afterparsing asentence can be found below.Iumc_~{a,!
rQc" 11 {ilr (> Iiutg  rec_opt{ { ,>mmtl~,~c,icofller{ { i0petrr~tatlon{ { { { IW~V~p subject ma rec opt porto oblact sa rec opt{ { { I Ikvr perm s~ l ma me object ( )(1?~ J( ( ) =w ( ){ { \ [~{- - iIn, at ( ) In "m rn mcopt  I{ I I , -- I  } { , -  ,,Il)6. the control structure6.1.
general outlineThe interpreter/translator mechanism as it is describedin Hirschman 1986 or Dowding & Hirschman 1988works in a depth-first fashion that backtracks whennecessary.
We added a control structure that records theoptions that are unsuccessfully tried as well as theoptions that have led to a null-node.The sentence to be analyzed is logically considered as agraph where the words of the sentence function as arcsbetween the vertices.
The arcs will be labeled withgrammatical categories.
An arc can span variousvertices.
The "sentence-arc" e.g.
spans all the vertices.An arc is uniquely identified by its label and coordinatesin the tree (number of the starting vertex and tree-depth).
The fourth characteristic of a arc, its mode,serves to distinguish a void from an empty arc.
A voidarc means that a grammatical category under a certaiuACTES DE COLING-92, NANTES, 23-28 Aotrr 1992 1 2 6 6 PROC.
OF COLING-92, NANTEs, AUG. 23-28, 1992vertex leads to no success, whereas an empty at~c onlyleads to success if it is realized as an empty string.
Inopposition to a chart parser that remembers whichgrammatical structure spans which vertices, the onlyfunction of the control structure is to record whichgrammatical category leads to failure or realization asan empty string under a certain vertex (= a word).6.2. the data structure of the control mechanismThe backbone consists of a kind of sparse matrix, ofwhich each element is a stack of grammatical labels.The stack contains all the grammatical labels of thearcs that were (or still are) considered on the currentdepth in the parse tree under the current vertex.
TheLast In First Out ordering principle provides theadvantage that arcs recently added below a vertex underconstruction can be modified or discarded without heneed for time-cousuming search-routines.Here again tile control structure is conceived as anabstract data type.
There exist only five publicpredicates: cheek opt ion/3,  t reat  most  regent-a re /4 ,  empty_arc /3 ,  init ia l ize c-ontroi-/i ant iremove cont ro l /0 .6.3. the parsing algorithmWhen the parser tests if an arc can span two vertices(cheek-opt ion/3) ,  the control structure is checkedfirst to see if the sanle grammatical category is notalready present under the starting vertex.
If this is thecase, a failure blocks this option aud the parser willconsider the next category in the grammar rule as thenew candidate arc.
In the other case, the arc is includedas a void arc in the control structure.
This prevents theparser from ending up in an inf'mite loop, by trying tosatisfy a grammatical category already functioning as acandidate are but on a higher level of the parse tree.If a category is present as an empty arc(empty_arc /3)  in the control structure, this meansthat all the other underlying rammatical categorieshave already been tried, but only the empty string cansatisfy this category.
When the parser backtracks andretries this category under the same vertex, uselesssearch paths can be pruned as the previous parsingattempt only allowed the empty string.On successful completion of a parsing attempt by aterminal element or a literal, the grammatical categoryis either removed from the control structure to allowthe same category to be retried on backtracking, ormarked as an empty arc (treat most recent are/4).Backtracking does not affect he control structure, as itis implemented by menus of global Prolog "recordkeys".7. semi-automatic dictionary buildupAs was noted by Wolff, file major lexical category of aword is deterolined by its final coostituent part (Wolff1984).
In order to semi-antomatically build up ourdictionary (currently only coutainiug word classinl0rmadon), we ordered a set of technical medicalterms alphabetically starting from their ends.
Thisallowed us to distinguish relevant suffixes anddetermine the associated grammatical category (e.g.
filesuffix -tara is an adjectival suffix.
The data about rilelink between suffix and word class can be entered intothe system by means of a short interactive program.Some words belonging to a closed grammaticalcategory (e.g.
articles) are al.~ integrated in the suffixfile.
A distinction is made between the real suffixes andtile closed t~Ltegory words.
"the latter are stored uudeLthe form of a closed Prolog-list while tile ti~rmer arcentered as open eaded Prolog-lists.The suffix entrie,q are alphabetically classified, wherebythe ending character functions as the sort key.
The"ending groups" created by this process contain twosubgroups: the real morphemes versus the real suffixes.The fonner have a higher ordering value than the hitter.The latter are in addition ordered according theirdecrca~sing length.
Concerting the suffixes, this meansthat the principle of the longest match is applied.
"lqhegeneral strategy can be stumnariz~ed it,;follows:(...) the table is Iool,:ed at slatting with tile mostspecific entry, and ending with tile least specificone (Adrhtens & Lemmens 1990).The output of the classifying program is a (primitive)dictionary file that must be completed, e.g.
by addingsemantic le, atures.
Some words of the dictionary file canbe marked as "category unknown" or carl be attributedthe wsong category.
To cope with this problem, allinteractive program was added to allow corrections to becarried out.
Despite the fact that tile semi-automaticclassification ofwords proved to be highly eflectivc andtime-saving (l~jrtly due to file high degree of regularityin medical terminology), it still filnctions on a tonlimited basis to be fully integrated in an NLP system.8.
evaluation and resultsThe most serious problem for our parsing approachappears to be structnral ambiguity.
A branch isattached to the first IX~ssible node in the parse treeinstead of a subsequent node on the same or higherlevel.
This is due to the depth-first mechanism of tileparser.
The generation of more than one parse tree doesnot provide a solution, because then the question onwhich basis a final parse tree will be selected remainsunanswered.
The LSP-MI,P dkl also encounter thisproblem, but allows tile "adjuncts o be integrated freely(Sager 1981).
Subsequently, the parse tree.
is passed toa "sublangnage s lection module" aud re- arranged onthe basis of lists of allowed syntagmatic combinationsACRES DE COLING-92, NANI~:S, 23-28 AOI3T 1992 1 2 6 7 PROC.
OF COLING-92, NANIES, AUG. 23-28, 1992of semantic lasses of the medical anguage as theyappear in the distribution pattern of a word.9.
further esearchFarther esearch will be oriented towards the integrationof conjunction handling, which implies the use of ameta-grammar (Hirschman 1986).
The existinggrammar will be continously extended in two phases.After a survey of various grammar books, theoreticallysound grammar rules will be developed.
These ruleswill subsequently be checked against acorpus of PDSs,to see how well the paper grammars fare whenconfronted with random inpuLA more elaborated grammar requires more and refinedrestrictions, which need to eliminate more accuratelydead ends during the parsing process.
A sublanguagemodule must be added to account for the syntacticspecificities of the medical language as well as torearrange some branches of the parse tree.
To transcendthe prototype status, a large scale dictionary should bedeveloped, including a morphological nalyzer.Furthermore, as the ultimate goal is to represent themeaning of the sentence, the syntactic analysis needs tobe completed by a semantic ounterpart.
A distinctionshould be made between general purpose and medicalsublanguage concepts.
The already mentionedrearrangement of the parse tree by the sublanguagecomponent uses semantic lasses, but these are createdon the basis of a syntactic analysis of the distributionof the various texical terms.
This does not include anymodeling of the medical domain nor any deductivereasoning as is pointed out by Zweigenbaum (1990).
Inthe long run, these two aspects need to be included inan intelligent information retrieval system.note.'
For reasons af space limitations, only a restrictedset of grammar ules was shown.
Tile completegrammar as well as the full Prolog code can be found in(Spyns 1991).ReferencesAdriaens G., & M. Lemmens (1990): Ih.g....~s.fd~-extendint, lexicon: off-line and on-line defaulting 0flexical information in the METAL MT Svstem.
InProceedings of the 13th COLING Conference, Vol 3,305-307.Dorda W.G.
(1990): Data-screening and Retrieval ofMedical Data by the System WAREL, inInformatiorl in Medeciq~, 29, 1:3 - 11.Dowding J.
& L. Hirschman (1988): A DynamicTranslator for Rule Pruning in Restriction Grammar, inNatural Language Understanding and Logic Pro-~rammint~ lbi, Dahl V. and Saint-Dizier P.
(eds.
),Elsevier Science Publishers, North-Holland, pp.
79 -92.Grishman R., N.Sager, C.Raze, & B.Bookchin (1973):The Linguistic String Parser, in AFIPS 427 - 434.Harris Z.
(1962): String Analysis of SentenceS~cture,  The Hague.Hirschman L. (1986): Conjunction in meta-restrictiongrammar, in Journal of Logic Programming 4:299 -328.Hirschman L. & K. Puder (1986): RestrictionGrammar: A Prolog Implementation, in Log icProc, rammin~, and its Annlications M. van Caneghemand D.H.D.
Warren (eds.
), Ablex PublishingCorporation Norwood, New Jersey, pp.
244 - 261.Sager N. (1972): A Two-Stage BNF Specification ofNatural Language, in Journal of Cybernetics 2,3:39-50.Sager N. (1981): Natural Lan~,uage InformationProcessing.
a Comuuter Grammar of English and itsAnnlications, Addison-Wesley Publishing Company,New York.Sager N., C. Friedman & M. Lyman (1987): MedicalLanguage Processing: Computer Management ofNarra-tive Data, Addison-Wesley Publishing Company, NewYork.Sager N., M. Lyman, L.J.
Tick, F. Borst, N.T.
Nhan,C.
Reveillard, Y. Su, & J. R. Scherrer (1989):Adapting a Medical Language Processor f om Englishto French, in MEDINFO 89:795 - 799.Spyns P. (1991): A orototvoe of a semi-automatedencoder for medical discharge summaries.
University ofLeuven Master of Computer Science Thesis \[in Dutch\].Wolff  S. (1984): The use of morphosemanticregularities in the medical vocabulary for automaticlexical coding.
In Methods of Information i  Medecine.23:195 - 203.Zweigenbaum P. et al(1990): Natural languageprocessing of patient discharge summaries (NLPAD) -extraction prototype, in Noothoven van Goor J.
(ed.
),AIM Reference Book.
IOS, Amsterdam, 1991ACRES DE COLING-92, NANTES, 23-28 AOt~q" 1992 1 2 6 8 PROC.
OF COLING-92, NANTES, AUG. 23-28, 1992
