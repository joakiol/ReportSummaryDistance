Directed ReplacementLaur i  Kar t tunenRank  Xerox  Research  Cent re  Grenob le6, chemin  de Mauper tu isF-38240 MEYLAN~ FRANCElauri, karttunen@xerox, frAbst ractThis paper introduces to the finite-statecalculus a family of directed replace op-erators.
In contrast to the simple re-place expression, UPPER -> LOWER, definedin Karttunen (1995), the new directed ver-sion, UPPER ?-> LOWER, yields an unam-biguous transducer if the lower languageconsists of a single string.
It transducesthe input string from left to right, mak-ing only the longest possible replacementat each point.A new type of replacement expression,UPPER @-> PREFIX .
.
.
SUFFIX, yields atransducer that inserts text around stringsthat are instances of UPPER.
The symbol... denotes the matching part of the inputwhich itself remains unchanged.
PREFIXand SUFFIX are regular expressions describ-ing the insertions.Expressions of the type UPPER @-> PI~EFIX?
.
.
SUFFIX may be used to compose ade-terministic parser for a "local grammar" inthe sense of Gross (1989).
Other useful ap-plications of directed replacement includetokenization and filtering of text streams.1 In t roduct ionTransducers compiled from simple replace expres-sions UPPER -> LOWER (Karttunen 1995, Kempe andKarttunen 1996) are generally nondeterministic inthe sense that they may yield multiple results evenif the lower language consists of a single string.
Forexample, let us consider the transducer in Figure 1,representing a b I b I b a I a b a -> x.
11The regular expression formalism and other nota-tional cdnventions used in the paper are explained in theAppendix at the end.a:xb:Ob:xa:xFigure 1: a b I b I b a I a b a -> x .
Thefour paths with "aba" on the upper side are:<0 a 0 b:x  2 a 0>, <0 a 0 b:x  2 a:0 0>,<0 a:x 1 b:0 2 a 0>, and <0 a:x 1 b:0 2 a:0 0>.The application of this transducer to the input"aba" produces four alternate results, "axa", "ax","xa", and "x", as shown in Figure 1, since there arefour paths in the network that contain "aba" on theupper side with different strings on the lower side.This nondeterminism arises in two ways.
Firstof all, a replacement can start at any point.
Thuswe get different results for the "aba" depending onwhether we start at the beginning of the string or inthe middle at the "b".
Secondly, there may be alter-native replacements with the same starting point.
Inthe beginning of "aba", we can replace either "ab"or "aba".
Starting in the middle, we can replace ei-ther "b" or "ba".
The underlining in Figure 2 showsaba  aba  aba  abaa X a a X X a XFigure 2: Four factorizations of "aba".the four alternate factorizations of the input string,that is, the four alternate ways to partition the string"aba" with respect o the upper language of the re-placement expression.
The corresponding paths inthe transducer are listed in Figure 1.For many applications, it is useful to define an-108other version of replacement that produces a uniqueoutcome whenever the lower language of the rela-tion consists of a single string.
To limit the numberof alternative results to one in such cases, we mustimpose a unique factorization on every input.The desired effect can be obtained by constrain-ing the directionality and the length of the replace-ment.
Directionality means that the replacementsites in the input string are selected starting fromthe left or from the right, not allowing any overlaps.The length constraint forces us always to choose thelongest or the shortest replacement whenever thereare multiple candidate strings starting at a given lo-cation.
We use the term d i rected rep lacement  todescribe a replacement relation that is constrainedby directionality and length of match.
(See the endof Section 2 for a discussion about the choice of theterm.
)With these two kinds of constraints we can definefour types of directed replacement, listed in Figure3.longest shortestmat ch mat chleft-to-r ight ~-> @>right-to- left  ->~ >@Figure 3: Directed replacement operatorsFor reasons of space, we discuss here only the left-to-right, longest-match version.
The other cases aresimilar.The effect of the directionality and length con-straints is that some possible replacements are ig-nored.
For example, a b I b I b a \[ a b a @->x maps "aba" uniquely into "x", Figure 4.a:xb:OFigure 4: a b \[ b \[ b a \[ a b a @-> x. Thesingle path with "aba" on the upper side is:<0 a:x I b:O 2 a:O 0>.Because we must start from the left and have tochoose the longest match, "aba" must be replaced,ignoring the possible replacements for "b", "ba",and "ab".
The ?-> operator allows only the lastfactorization of "aba" in Figure 2.Left-to-right, longest-match replacement can bethought of as a pr.ocedure that rewrites an inputstring sequentially from left to right.
It copies the in-put until it finds an instance of UPPER.
At that pointit selects the longest matching substring, which isrewritten as LOWER, and proceeds from the end ofthat substring without considering any other alter-natives.
Figure 5 illustrates the idea.Scan Scan Scan.
.
.
.
~ r .
.
.
.
I r - - -  - -~"i Copy  ' Rep lace  I Copy  ' Rep lace '  ~\[ ~ICopy  ~ .~ ' fLongest LongestMatch MatchFigure 5: Left-to-right, longest-match replacementIt is not obvious at the outset that the operationcan in fact be encoded as a finite-state transducerfor arbitrary regular patterns.
Although a uniquesubstring is selected for replacement a each point, ingeneral the transduction is not unambiguous becauseLOWER is not required to be a single string; it can beany regular language.The idea of treating phonological rewrite rules inthis way was the starting point of Kaplan and Kay(1994).
Their notion of obligatory rewrite rule in-corporates a directionality constraint.
They observe(p. 358), however, that this constraint does not byitself guarantee a single output.
Kaplan and Kaysuggest hat additional restrictions, uch as longest-match, could be imposed to further constrain ruleapplication.
2 We consider this issue in more detail.The crucial observation is that the two con-straints, left-to-right and longest-match, force aunique factorization on the input string thus makingthe transduction unambiguous if the L01gER languageconsists of a single string.
In effect, the input stringis unambiguously parsed with respect o the UPPERlanguage.
This property turns out to be importantfor a number of applications.
Thus it is useful to pro-vide a replacement operator that implements theseconstraints directly.The definition of the UPPER @-> LOWER relation ispresented in the next section.
Section 3 introducesa novel type of replace expression for constructingtransducers that unambiguously recognize and mark2The tentative formulation of the longest-match on-straint in (Kaplan and Kay, 1994, p. 358) is too weak.It does not cover all the cases.109instances of a regular language without actually re-placing them.
Section 4 identifies ome useful appli-cations of the new replacement expressions.2 D i rec ted  Rep lacementWe define directed replacement by means of a com-position of regular relations.
As in Kaplan and Kay(1994), Karttunen (1995), and other previous workson related topics, the intermediate l vels of the com-position introduce auxiliary symbols to express andenforce constraints on the replacement relation.
Fig-ure 6 shows the component relations and how theyare composed with the input.Input string.o.Initial match.0.Left-to-right constraint.0oLongest-match constraint.0oRep lacementby a caret that are instances of the upper language.The initial caret is replaced by a <, and a closing> is inserted to mark the end of the match.
Wepermit carets to appear freely while matching.
Nocarets are permitted outside the matched substringsand the ignored internal carets are eliminated.
Inthis case, there are four possible outcomes, shownin Figure 8, but only two of them are allowed underthe constraint hat there can be no carets outsidethe brackets.ALLOWED" a"  b a " a 'b  a<a b> a < a b a>NOT ALLOWEDa "b  a " a 'b  aa <b>a -a<b a>Figure 8: Left-to-right constraint.
No caret outsidea bracketed region.Figure 6: Composition of directed replacementIf the four relations on the bottom of Figure 6 arecomposed in advance, as our compiler does, the ap-plication of the replacement to an input string takesplace in one step without any intervening levels andwith no auxiliary symbols.
But it helps to under-stand the logic to see where the auxiliary markswould be in the hypothetical intermediate r sults.Let us consider the caseofa  b \[ b I b a \[ a ba ~-> x applying to the string "aba" and see in de-tail how the mapping implemented by the transducerin Figure 4 is composed from the four component re-lations.
We use three auxiliary symbols, caret ( ' ) ,left bracket (<) and right bracket (>), assuming herethat they do not occur in any input.
The first step,shown in Figure 7, composes the input string with atransducer that inserts a caret, in the beginning ofevery substring that belongs to the upper language.a b aa " b aFigure 7: Initial match.
Each caret marks the be-ginning of a substring that matches "ab", "b", "ba",or ~aba".Note that only one " is inserted even if there areseveral candidate strings starting at the same loca-tion.In the left-to-right step, we enclose in angle brack-ets all the substrings tarting at a location markedIn effect, no starting location for a replacementcan be skipped over except in the context of an-other replacement starting further left in the inputstring.
(Roche and Schabes (1995) introduce a sim-ilar technique for imposing the left-to-right order onthe transduction.)
Note that the four alternatives inFigure 8 represent the four factorizations in Figure2.The longest-match constraint is the identity rela-tion on a certain set of strings.
It forbids any re-placement that starts at the same location as an-other, longer replacement.
In the case at hand, itmeans that the internal > is disallowed in the context< a b > a.
Because "aba" is in the upper language,there is a longer, and therefore preferred, < a b a >alternative at the same starting location, Figure 9.ALLOWED NOT ALLOWED<a b a> <a b > aFigure 9: Longest match constraint.
No upper lan-guage string with an initial < and a nonfinal > inthe middle.In the final replacement step, the bracketed re-gions of the input string, in the case at hand, just< a b a > , are replaced by the strings of the lowerlanguage, yielding "x" as the result for our example.Note that longest match constraint ignores anyinternal brackets.
For example, the bracketing < a110> < a > is not allowed if the upper language con-tains "aa" as well as "a".
Similarly, the left-to-rightconstraint ignores any internal carets.As the first step towards a formal definition ofUPPER ?-> LOWER it is useful to make the notion of"ignoring internal brackets" more precise.
Figure 10contains the auxiliary definitions.
For the details ofthe formalism (briefly explained in the Appendix),please consult Karttunen (1995), Kempe and Kart-tunen (1996).
3UPPER'  = UPPER/\[Y, ^\] - \[?
* 7''\]UPPER ' '  = UPPER/\[7,<IT'>\] - \[?
* \[7,<\[7,>\]'\]Figure 10: Versions of UPPER that freely allow non-final diacritics.The precise definition of the UPPER ~-> LOWER re-lation is given in Figure 11.
It is a composition ofmany auxiliary relations.
We label the major com-ponents in accordance with the outline in Figure 6.The formulation of the longest-match constraint isbased on a suggestion by Ronald M. Kaplan (p.c.
).Initial match"$\ [  Y," 1 7'< 17'> "I.0.\ [ .
.
\ ]  -> 7" II _ UPPER?0?Left to right\[ '$\[7,"\] [7,':7,< UPPER' 0:7,>\]'1, "$\[7,':\],O ,7,- -> \[\].OoLongest match"$\[7,< \[UPPER'' ~ $\[7,>'\]'\]\],O .ReplacementZ< "$\[Z>\] Y,> -> LOWER ;Figure 11: Definition of UPPER @-> LOWERThe logic of ~-> replacement could be encoded inmany other ways, for example, by using the threepairs of auxiliary brackets, <i, >i, <c, >c, and <a,>a, introduced in Kaplan and Kay (1994).
We takehere a more minimalist approach.
One reason isthat we prefer to think of the simple unconditional(uncontexted) replacement as the basic case, as inKarttunen (1995).
Without the additional complex-ities introduced by contexts, the directionality and3UPPER' is the same language as UPPER except hatcarets may appear freely in all nonfinal positions.
Simi-larly, UPPER'' accepts any nonfinal brackets.111length-of-match constraints can be encoded withfewer diacritics.
(We believe that the conditionalcase can also be handled in a simpler way than inKaplan and Kay (1994).)
The number of auxiliarymarkers is an important consideration for some ofthe applications discussed below.In a phonological or morphological rewrite rule,the center part of the rule is typically very small:a modification, deletion or insertion of a single seg-ment.
On the other hand, in our text processing ap-plications, the upper language may involve a largenetwork representing, for example, a lexicon of mul-tiword tokens.
Practical experience shows that thepresence of many auxiliary diacritics makes it diffi-cult or impossible to compute the left-to-right andlongest-match constraints in such cases.
The size ofintermediate states of the computation becomes acritical issue, while it is irrelevant for simple phono-logical rules.
We will return to this issue in the dis-cussion of tokenizing transducers in Section 4.The transducers derived from the definition inFigure 11 have the property that they unambigu-ously parse the input string into a sequence of sub-strings that are either copied to the output un-changed or replaced by some other strings.
How-ever they do not fall neatly into any standard classof transducers discussed in the literature (Eilenberg1974, Schiitzenberger 1977, Berstel 1979).
If theLOWER language consists of a single string, then therelation encoded by the transducer is in Berstel'sterms a ra t iona l  funct ion ,  and the network is anunambigous  transducer, even though it may con-tain states with outgoing transitions to two or moredestinations for the same input symbol.
An unam-biguous transducer may also be sequent iab le ,  in?
which case it can be turned into an equivalent se-quent ia l  transducer (Mohri, 1994), which can inturn be minimized.
A transducer is sequential justin case there are no states with more than one transi-tion for the same input symbol.
Roche and Sehabes(1995) call such transducers determin is t i c .Our replacement transducers in general are notunambiguous because we allow LOWER to be any reg-ular language.
It may well turn out that, in all casesthat are of practical interest, the lower language is infact a singleton, or at least some finite set, but it isnot so by definition.
Even if the replacement trans-ducer is unambiguous, it may well be unsequentiableif UPPER is an infinite language.
For example, thesimple transducer for a+ b ~-> x in Figure 12 can-not be sequentialized.
It has to replace any string of"a"s by "x" or copy it to the output unchanged e-pending on whether the string eventually terminatesat "b' .
It is obviously impossible for any finite-stateb:OFigure 13, a simple parallel replacement of the twoauxiliary brackets that mark the selected regions.Because the placement of < and > is strictly con-trolled, they do not occur anywhere lse.Insertion7,< -> PREFIX, 7.> -> SUFFIX ;Figure 12: a+ b ~-> x.
This transducer is unam-biguous but cannot be sequentialized.device to accumulate an unbounded amount of de-layed output.
On the other hand, the transducerin Figure 4 is sequentiable because there the choicebetween a and a :x  just depends on the next inputsymbol.Because none of the classical terms fits exactly, wehave chosen a novel term, d i rec ted  t ransduct ion ,to describe a relation induced by the definition inFigure 11.
It is meant to suggest hat the mappingfrom the input into the output strings is guided bythe directionality and length-of-match constraints.Depending on the characteristics of the UPPER andLOWER languages, the resulting transducers may beunambiguous and even sequential, but that is notguaranteed in the general case.3 I nser t ionThe effect of the left-to-right and longest-match on-straint is to factor any input string uniquely withrespect o the upper language of the replace expres-sion, to parse it into a sequence of substrings thateither belong or do not belong to the language.
In-stead of replacing the instances of the upper lan-guage in the input by other strings, we can also takeadvantage of the unique factorization i  other ways.For example, we may insert a string before and aftereach substring that is an instance of the language inquestion simply to mark it as such.To implement this idea, we introduce the specialsymbol ... on the right-hand side of the replacementexpression to mark the place around which the in-sertions are to be made.
Thus we allow replace-ment expressions of the form UPPER ~-> PREFIX?
.
.
SUFFIX.
The corresponding transducer locatesthe instances of UPPER in the input string under theleft-to-right, longest-match regimen just described.But instead of replacing the matched strings, thetransducer just copies them, inserting the specifiedprefix and suffix.
For the sake of generality, we allowPREFIX and SUFFIX to denote any regular language.The definition of UPPER ~-> PREFIX .
.
.
SUFFIXis just as in Figure 11 except hat the Replacementexpression is replaced by the Insertion formula inFigure 13: Insertion expression in the definition ofUPPER ~-> PREFIX ... SUFFIX.With the ... expressions we can construct rans-ducers that mark maximal instances of a regularlanguage.
For example, let us assume that nounphrases consist of an optional determiner, (d),  anynumber of adjectives, a*, and one or more nouns, n+.The expression (d) a* a+ ~-> 7,\[ .
.
.
%3 com-piles into a transducer that inserts brackets aroundmaximal instances of the noun phrase pattern.
Forexample, it maps "damlvaan" into "\[dann\] v \[aan\] ",as shown in Figure 14.d a n n  v aan\ [dana\ ]  v \ [aan\ ]Figure 14: Application of (d) a* n+ ?-> ~,\[...Y,\]to "d  a.tlI'tv aa.L-rl"Although the input string "dannvaan" containsmany other instances of the noun phrase pattern,"n", "an", "nn", etc., the left-to-right and longest-match constraints pick out just the two maximalones.
The transducer is displayed in Figure 15.
Notethat ?
here matches ymbols, such as v, that are notincluded in the alphabet of the network.Figure 15: (d) a* n+ e-> ~,\[...~,\].
The one pathwith "dannvaan" on the upper side is: <00:  \[ 7 d 3a3n4n40: \ ]  5v00: \ [7a3a3a40: \ ]  5>.1124 App l i ca t ionsThe directed replacement operators have many use-ful applications.
We describe some of them.
Al-though the same results could often be achievedby using lex and yacc, sed, awk, perl, and otherUnix utilities, there is an advantage in using finite-state transducers for these tasks because they canthen be smoothly integrated with other finite-stateprocesses, such as morphological analysis by lexi-cal transducers (Karttunen et al1992, Karttunen1994) and rule-based part-of-speech disambiguation(Chanod and Tapanainen 1995, Roche and Schabes1995).4.1 Token izat ionA tokenizer is a device that segments an input stringinto a sequence of tokens.
The insertion of end-of-token marks can be accomplished by a finite-statetransducer that is compiled from tokenization rules.The tokenization rules may be of several types.
Forexample, \ [WHITE_SPACE+ ~-> SPACE\]  is a normal-izing transducer that reduces any sequence of tabs,spaces, and newlines to a single space.
\[LETTER+~-> .
.
.
END_0F_TOKEN\] inserts a special mark,e.g.
a newtine, at the end of a letter sequence.Although a space generally counts as a tokenboundary, it can also be part of a multiword to-ken, as in expressions like "at least", "head overheels", "in spite of", etc.
Thus the rule that intro-duces the END_0F_TOKEN symbol needs to combinethe LETTER+ pattern with a list of multiword tokenswhich may include spaces, periods and other delim-iters.Figure 16 outlines the construction of a simpletokenizing transducer for English.WHITEY,_SPACE+ ?-> SPACE.O.\[ LETTER+ Ia t ~, 1 e a s t Ih e a d Y. o v e r Y. h e e 1 s Ii n Y, s p i t e Z o f \]?-> ... ENDY,_OF~,_TOKEN,O.SPACE-> \[\] If .#.
\] ENDY,_OFY,_TOKEN _ ;Figure 16: A simple tokenizerThe tokenizer in Figure 16 is composed of threetransducers.
The first reduces trings of whitespacecharacters to a single space.
The second transducerinserts an END_0F_TOKEN mark after simple wordsand the, listed multiword expressions.
The third re-moves the spaces that are not part of some multi-word token.
The percent sign here means that thefollowing blank is to be taken literally, that is, parsedas a symbol.Without the left-to-right, longest-match con-straints, the tokenizing transducer would not pro-duce deterministic output.
Note that it must intro-duce an END_0F_TOKEN mark after a sequence of let-ters just in case the word is not part of some longermultiword token.
This problem is complicated bythe fact that the list of multiword tokens may con-tain overlapping expressions.
A tokenizer for French,for example, needs to recognize "de plus" (more-over), "en plus" (more), "en plus de" (in additionto), and "de plus en plus" (more and more) as sin-gle tokens.
Thus there is a token boundary after"de plus" in de plus on ne le fai~ plus (moreover onedoesn't do it anymore) but not in on le \]:air de plusen plus (one does it more and more) where "de plusen plus" is a single token.If the list of multiword tokens contains hundredsof expressions, it may require a lot of time and spaceto compile the tokenizer even if the final result is nottoo large.
The number of auxiliary symbols used toencode the constraints has a critical effect on the ef-ficiency of that computation.
We first observed thisphenomenon i  the course of building a tokenizer forthe British National Corpus according to the specifi-cations of the BNC Users Guide (Leech, 1995), whichlists around 300 multiword tokens and 260 foreignphrases.
With the current definition of the directedreplacement we have now been able to compute sim-ilar tokenizers for several other languages (French,Spanish, Italian, Portuguese, Dutch, German).4.2 F i l te r ingSome text processing applications involve a prelimi-nary stage in which the input stream is divided intoregions that are passed on to the calling process andregions that are ignored.
For example, in processingan SGML-coded document, we may wish to delete allthe material that appears or does not appear in aregion bounded by certain SGML tags, say <A> and</A>.Both types of filters can easily be constructed us-ing the directed replace operator.
A negative filterthat deletes all the material between the two SGMLcodes, including the codes themselves, is expressedas in Figure 17.
"<A>" -$\["<A>"I"</A>"\] </A>" ~-> \[\] ;Figure 17: A negative filterA positive filter that excludes everything else canbe expressed as in Figure 18.113"$"</A> .... <A>" ?-> "<A>".O.
"</A>" "$"<A>" @-> "</A>" ;dann v a a n\[NP d a n n \] \[VP v \[NP a a n \] \]Figure 18: A positive filter Figure 21: Application of an NP-VP parserThe positive filter is composed of two transducers.The first reduces to <A> any string that ends withit and does not contain the </A> tag.
The secondtransducer does a similar transduction on stringsthat begin with </A>.
Figure 12 illustrates the effectof the positive filter.<B>one</B><A>two</A><C>three</C><A>f  our</A><A> two </A> <A>four</A>By means of this simple "bottom-up" technique,it is possible to compile finite-state transducers thatapproximate a context-free parser up to a chosendepth of embedding.
Of course, the left-to-right,longest-match regimen implies that some possibleanalyses are ignored.
To produce all possible parses,we may introduce the ... notation to the simple re-place expressions in Karttunen (1995).5 Extens ionsFigure 19: Application of a positive filterThe idea of filtering by finite-state transductionof course does not depend on SGML codes.
It canbe applied to texts where the interesting and unin-teresting regions are defined by any kind of regularpattern.4.3 Mark ingAs we observed in section 3, by using the ... symbolon the lower side of the replacement expression, wecan construct ransducers that mark instances of aregular language without changing the text in anyother way.
Such transducers have a wide range ofapplications.
They can be used to locate all kinds ofexpressions that can be described by a regular pat-tern, such as proper names, dates, addresses, socialsecurity and phone numbers, and the like.
Such amarking transducer can be viewed as a deterministicparser for a "local grammar" in the sense of Gross(1989), Roche (1993), Silberztein (1993) and others.By composing two or more marking transduc-ers, we can also construct a single transducer thatbuilds nested syntactic structures, up to any desireddepth.
To make the construction simpler, we canstart by defining auxiliary symbols for the basic reg-ular patterns.
For example, we may define NP as\[(d) a* n+J.
With that abbreviatory convention,a composition of a simple NP and VP spotter can bedefined as in Figure 20.NP @-> ~\[NP ... ~,\].0.v Y.\[NP NP Y,\] @-> ~,\[VP .
.
.
Y,\] ;Figure 20: Composition of an NP and a VP spotterFigure 21 shows the effect of applying this com-posite transducer to the string "dannvaan".The definition of the left-to-right, longest-match re-placement can easily be modified for the three otherdirected replace operators mentioned in Figure 3.Another extension, already implemented, is a di-rected version of parallel replacement (Kempe andKarttunen 1996), which allows any number of re-placements to be done simultaneously without in-terfering with each other.
Figure 22 is an exampleof a directed parallel replacement.
It yields a trans-ducer that maps a string of "?
's into a single "b"and a string of "b"s into a single '%'.a+ @-> b, b+ ~-> a ;Figure 22: Directed, parallel replacementThe definition of directed parallel replacement re-quires no additions to the techniques already pre-sented.
In the near future we also plan to allow direc-tional and length-of-match constraints in the morecomplicated case of conditional context-constrainedreplacement.6 AcknowledgementsI would like to thank Ronald M. Kaplan, MartinKay, Andr4 Kempe, John Maxwell, and Annie Za-enen for helpful discussions at the beginning of theproject, as well as Paula Newman and Kenneth 1%.Beesley for editorial advice on the first draft of thepaper.
The work on tokenizers and phrasal analyz-ers by Anne Schiller and Gregory Grefenstette re-vealed the need for a more efficient implementationof the idea.
The final version of the paper has bene-fited from detailed comments by l%onald M. Kaplanand two anonymous reviewers, who convinced me todiscard the ill-chosen original title ("DeterministicReplacement") in favor of the present one.1147 Append ix :  Notat iona l  convent ionsThe regular expression formalism used in this paperis essentially the same as in Kaplan and Kay (1994),in Karttunen (1995), and in Kempe and Karttunen(1996).
Upper-case strings, such as UPPER, representregular languages, and lower-case letters, such as x,represent symbols.
We recognize two types of sym-bols: unary symbols (a, b, c, etc) and symbol pairs(a:x, b:0, etc.
).A symbol pair a:x may be thought of as thecrossproduct of a and x, the minimal relation con-sisting of a (the upper symbol) and x (the lowersymbol).
To make the notation less cumbersome,we systematically ignore the distinction between thelanguage A and the identity relation that maps everystring of A into itself.
Consequently, we also writea:a as just a.Three special symbols are used in regular expres-sions: 0 (zero) represents he empty string (often de-noted by c); ?
stands for any symbol in the knownalphabet and its extensions; in replacement expres-sions, .#.
marks the start (left context) or the end(right context) of a string.
The percent sign, Y,, isused as an escape character.
It allows letters thathave a special meaning in the calculus to be usedas ordinary symbols.
Thus Z\[ denotes the literalsquare bracket as opposed to \[, which has a specialmeaning as a grouping symbol; %0 is the ordinaryzero symbol.The following simple expressions appear freqentlyin the formulas: \[\] the empty string language, ?
*the universal ("sigma star") language.The regular expression operators used in the pa-per are: * zero or more (Kleene star), + one or more(Kleene plus), - not (complement), $ contains, /ignore, I or (union), t~ and (intersection), - minus(relative complement), .x.
crossproduct, .o.
com-position, -> simple replace.In the transducer diagrams (Figures 1, 4, etc.
), thenonfinal states are represented by single circles, finalstates by double circles.
State 0 is the initial state.The symbol ?
represents any symbols that are notexplicitly present in the network.
Transitions thatdiffer only with respect o the label are collapsedinto a single multiply labelled arc.Re ferencesJean Berstel.
1979.
Transductions and Context-FreeLanguages.
B.G.
Teubner, Stuttgart, Germany.Jean-Pierre Chanod and Pasi Tapanainen.
1995.Tagging French--comparing a statistical and aconstraint-based mode\].
In The Proceedings ofthe Seventh Conference of the European Chapterof the Association for Computational Linguistics,Dublin, Ireland.Samuel Eilenberg.
1974.
Automata, Languages, andMachines.
Academic Press.Maurice Gross.
1989.
The Use of Finite Automatain the Lexical Representation of Natural Lan-guage.
In Lecture Notes in Computer Science,pages 34-50, Springer-Verlag, Berlin, Germany.Ronald M. Kaplan and Martin Kay.
1994.
RegularModels of Phonological Rule Systems.
Computa-tional Linguistics, 20:3, pages 331-378.Lauri Karttunen, Kimmo Koskenniemi, and RonaldM.
Kaplan.
1987.
A Compiler for Two-levelPhonological Rules.
In Report No.
CSLL87-108.Center for the Study of Language and Informa-tion, Stanford University.
Palo Alto, California.Lauri Karttunen.
1994.
Constructing Lexical Trans-ducers.
In The Proceedings of the Fifteenth Inter-national Conference on Computational Linguis-tics.
Coling 94, I, pages 406-411, Kyoto, Japan.Lauri Karttunen.
1995.
The Replace Operator.
InThe Proceedings of the 33rd Annual Meeting of theAssociation for Computational Linguistics.
ACL-94, pages 16-23, Boston, Massachusetts.Andr~ Kempe and Lauri Karttunen.
1996.
ParallelReplacement in the Finite-State Calculus.
In TheProceedings of the Sixteenth International Con-ference on Computational Linguistics.
Coling 96.Copenhagen, Denmark.Geoffrey Leech.
1995.
User's Guide to the BritishNational Corpus.
Lancaster University.Mehryar Mohri.
1994.
On Some Applications ofFinite-State Automata Theory to Natural Lan-guage Processing.
Technical Report 94-22.
L'In-stitute Gaspard Monge.
Universit~ de Marne-la-ValiSe.
Noisy Le Grand.Emmanuel Roche.
1993.
Analyse syntaxique trans-formationelle du franfais par transducteurs ellexique-grammaire.
Doctoral dissertation, Univer-sit~ Paris 7.Emmanuel Roche and Yves Schabes.
1995.
Deter-ministic Part-of-Speech Tagging.
ComputationalLinguistics, 21:2, pages 227-53.Marcel Paul Schiitzenberger.
1977.
Sur une variantedes fonctions equentielles.
Theoretical ComputerScience, 4, pages 47-57.Max Silberztein.
1993.
Dictionnaires Electroniqueset Analyse Lexicale du Franfais--Le Syst~me IN-TEX, Masson, Paris, France.115
