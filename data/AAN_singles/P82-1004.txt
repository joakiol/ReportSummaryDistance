What's in a Semantic Network?James 17.
A lienAlan M. FrischComputer Science DepartmentThe University of RochesterRochester, NY 14627AbstractEver since Woods's "What's in a Link" paper, therehas been a growing concern for formalization in thestudy of knowledge representation.
Several argumentshave been made that frame representation languages andsemantic-network languages are syntactic variants of theftrst-order predicate calculus (FOPC).
The typicalargument proceeds by showing how any given frame ornetwork representation can be mapped to a logicallyisomorphic FOPC representation.
For the past two yearswe have been studying the formalization of knowledgeretrievers as well as the representation languages thatthey operate on.
This paper presents a representationlanguage in the notation of FOPC whose form facilitatesthe design of a semantic-network-like retriever.I.
IntroductionWe are engaged in a long-term project o construct asystem that can partake in extended English dialogueson some reasonably well specified range of topics.
Amajor part of this effort so far has been the specificationof a knowledge representation.
Because of the widerange of issues that we are trying to capture, whichincludes the representation of plans, actions, time, andindividuals' beliefs and intentions, it is crucial to workwithin a framework general enough to accommodateeach issue.
Thus, we began developing ourrepresentation within the first-order predicate calculus.So far, this has presented no problems, and we aim tocontinue within this framework until some problemforces us to do otherwise.Given this framework, we need to be able to buildreasonably efficient systems for use in the project.
Inparticular, the knowledge representation must be able tosupport the natural language understanding task.
Thisrequires that certain forms of inference must be made.~'~ Within a general theorem-proving framework, however,those inferences desired would be lost within a widerange of undesired inferences.
Thus we have spentconsiderable effort in constructing a specializedinference component that can support the languageunderstanding task.Before such a component could be built, we neededto identify what inferences were desired.
Notsurprisingly, much of the behavior we desire can befound within existing semantic network systems used fornatural language understanding.
Thus the question"What inferences do we need?"
can be answered byanswering the question "What's in a semantic network?
"Ever since Woods's \[1975\] "What's in a Link" paper,there has been a growing concern for formalization inthe study of knowledge representation.
Severalarguments have been made that frame representationlanguages and semantic-network languages are syntacticvariants of the f~st-order predicate calculus (FOPC).The typical argument (e.g., \[Hayes, 1979; Nilsson, 1980;Charniak, 1981a\]) proceeds by showing how any givenframe or network representation can be mapped to alogically isomorphic (i.e., logically equivalent when themapping between the two notations is accounted for)FOPC representation.
We emphasize the term "logicallyisomorphic" because these arguments have primarilydealt with the content (semantics) of the representationsrather than their forms (syntax).
Though thesearguments are valid and scientifically important, they donot answer our question.Semantic networks not only represent informationbut facilitate the retrieval of relevant facts.
For instance,all the facts about the object JOHN are stored with apointer directly to one node representing JOHN (e.g.,see the papers in \[Findler, 1979\]).
Another exampleconcerns the inheritance of properties.
Given a fact suchas "All canaries are yellow," most network systemswould automatically conclude that "Tweety is yellow,"given that Tweety is a canary.
This is typicallyimplemented within the network matcher or retriever.We have demonstrated elsewhere \[Frisch and Allen,1982\] the utility of viewing a knowledge retriever as aspecialized inference engine (theorem prover).
Aspecialized inference engine is tailored to treat certainpredicate, function, and constant symbols differentlythan others.
This is done by building into the inferenceengine certain true sentences involving these symbols19and the control needed to handle with these sentences.The inference engine must also be able to recognizewhen it is able to use its specialized machinery.
That is,its specialized knowledge must be coupled to the form ofthe situations that it can deal with.For illustration, consider an instance of theubiquitous type hierarchies of semantic networks:FORDSI subtypeMUSTANGSl typeOLD-BLACKBy mapping the types AUTOS and MUSTANGS to bepredicates which are true only of automobiles andmustangs respectively, the following two FOPCsentences are logically isomorphic to the network:(1.1) V x MUSTANGS(x) --) FORDS(x)(1.2) MUSTANGS(OLD-BLACK1)However, these two sentences have not captured theform of the network, and furthermore, not doing so isproblematic to the design of a retriever.
The subtype andtype links have been built into the network languagebecause the network retriever has been built to handlethem specially.
That is, the retriever does not view asubtype link as an arbitrary implication such as (1.1) andit does not view a type link as an arbitrary atomicsentence such as (1.2).In our representation language we capture the formas wetl as the content of the network.
By introducingtwo predicates, TYPE and SUBTYPE, we capture themeaning of the type and subtype links.
TYPE(~O is trueiff the individual i is a member of the type (set ofobjects) t, and SUBTYPE(tl, t2) is true iff the type t I isa subtype (subset) of the type t 2.
Thus, in our language,the following two sentences would be used to representwhat was intended by the network:(2.1) SUBTYPE(FORDS,MUSTANGS)(2.2) TYPE(OLD-BLACK1,FORDS)It is now easy to build a retriever that recognizessubtype and type assertions by matching predicatenames.
Contrast his to the case where the representationlanguage used (1.1) and (1.2) and the retriever wouldhave to recognize these as sentences to be handled in aspecial manner.But what must the retriever know about theSUBTYPE and TYPE predicates in order that it canreason (make inferences) with them?
There are twoassertions, (A.1) and (A.2), such that {(1.1),(1.2)} islogically isomorphic to {(2.1),(2.2),(A.1),(A.2)}.
(Note:throughout his paper, axioms that define the retriever'scapabilities will be referred to as built-in axioms andspecially labeled A.1, A.2, etc.
)(A.1) v tl,t2,t 3 SUBTYPE(tl,t2) A SUBTYPE(t2,t3)--, SUBTYPE(tl,t3)(SUBTYPE is transitive.
)(A.2) v O,tl,t 2 TYPE(o,tl) A SUBTYPE(tl,t2)TYPE(o,t2)(Every member of a given type is a member ofits supertypes.
)The retriever will also need to know how to controlinferences with these axioms, but this issue is consideredonly briefly in this paper.The design of a semantic-network language oftencontinues by introducing new kinds of nodes and linksinto the language.
This process may terminate with afixed set of node and link types that are the knowledge-structuring primitives out of which all representationsare built.
Others have referred to these knowledge-structuring primitives as epistemological primitives\[Brachman, 1979\], structural relations \[Shapiro, 1979\],and system relations \[Shapiro, 1971\].
If a fLxed set ofknowledge-structuring primitives is used in the language,then a retriever can be built that knows how to deal withall of them.The design of our representation language verymuch mimics this approach.
Our knowledge-structuringprimitives include a fixed set of predicate names andterms denoting three kinds of elements in the domain.We give meaning to these primitives by writing domain-independent axioms involving them.
Thus far in thispaper we have introduced two predicates (TYPE andSUBTYPE'), two kinds of elements (individuals andtypes), and two axioms ((A.1) and (A.2)).
We shall nametypes in uppercase and individuals in uppercase lettersfollowed by at least one digit.Considering the above analysis, a retrieval now isviewed as an attempt to prove some queried factlogically follows from the base facts (e.g., (2.1), (2.2)) andthe built-in axioms (such as A.1 and A.2).
For thepurposes of this paper, we can consider aa~ t~ase facts tobe atomic formulae (i.e., they contain no logicaloperators except negation).
While compound formulaesuch as disjunctions can be represented, they are of littleuse to the semantic network retrieval facility, and so will20not be considered in this paper.
We have implemented aretriever along these lines and it is currently being usedin the Rochester Dialogue System \[Allen, 1982\].2.
The Basic Representation: Objects, Events, andRelationsAn important property of a natural anguage systemis that it often has only partial information about theindividuals (objects, events, and relations) that are talkedabout.
Unless one assumes that the original linguisticanalysis can resolve all these uncertainties andambiguities, one needs to be able to represent partialknowledge.
Furthermore, the things talked about do notnecessarily correspond to the world: objects aredescribed that don't exist, and events are described thatdo not occur.In order to be able to capture such issues we willneed to include in the domain all conceivableindividuals (cf.
all conceivable concepts \[Brachman,1979\]).
We will then need predicates that describe howthese concepts correspond to reality.
The class, ofindividuals in the world is subcategorized into threemajor classes: objects, events, and relations.
We considereach in turn.2.1 ObjectsObjects include all conceivable physical objects aswell as abstract objects uch as ideas, numbers, etc.
Themost important knowledge about any object is its type.Mechanisms for capturing this were outlined above.Properties of objects are inherited from statementsinvolving universal quantification over the members of atype.
The fact that a physical object, o, actually exists inthe world will be asserted as 1S-REAL(o).2.2 EventsThe problems inherent in representing events andactions are well described by Davidson \[1967\].
Heproposes introducing events as elements in the domainand introducing predicates that modify an eventdescription by adding a role (e.g., agent, object) or bymodifying the manner in which the event occurred.
Thesame approach has been used in virtually all semanticnetwork- and frame-based systems \[Charniak, 1981b\],most of which use a case grammar \[Fillmore, 1968\] toinfluence the choice of role names.
This approach alsoenables quantification over events and their componentssuch as in the sentence, "For each event, the actor of theevent causes that event."
Thus, rather than representingthe assertion that the ball fell by a sentence such as(try-l) FALL(BALL1),the more appropriate form is(try-2) 3 e TYPE(e,FALL-EVENTS) AOBJECT-ROLE(e,BALL1).This formalism, however, does not allow us to makeassertions about roles in general, or to assert that anobject plays some role in an event.
For example, there isno way to express "Role fillers are unique" or "There isan event in which John played a role."
Because we donot restrict ourselves to binary relations, we cangeneralize our representation by introducing thepredicate ROLE and making rolenames into individualsin the domain.
ROLE(o, r, v) asserts that individual o hasa role named r that is filled with individual v. Todistinguish rolenames from types and individuals, weshall use italics for rolenames.Finally, so that we can discuss events that did notoccur (as opposed to saying that such an event doesn'texis0, we need to add the predicate OCCUR.OCCUR(e) asserts that event e actually occurred.
Thus,finally, the assertion that the ball fell is expressed as(3) 3 e TYPE(e,FALL-EVENTS) AROLE(e,OBJECT, BALL1) AOCCUR(e).Roles are associated with an event ype by assertingthat every individual of that type has the desired role.To assert hat every event has an OBJECT role, we state(4) v e 3 r TYPE(e, EVENTS)--.
ROLE(e, OBJECT, r).Given this formulation, we could now represent that"some event occurred involving John" by(5) a e, rolename TYPE(e,EVENTS) AROLE(e, rolename, JOHN1) AOCCUR(e)By querying fact (5) in our retriever, we can find allevents involving John.One of the most important aspects of roles is thatthey are functional, e.g., each event has exactly oneobject role, etc.
Since this is important in designing anefficient retriever, it is introduced as a built-in axiom:(A.3) v r,o,vl,v2 ROLE(o,r, vl) A ROLE(o,r,v2)--, (vl = v2).2.3 RelationsThe final major type that needs discussing is theclass of relations.
The same problems that arise inrepresenting events arise in representing relations, l:or21instance, often the analysis of a simple noun-nounphrase such as "the book cook" initially may be onlyunderstood to the extent hat some relationship holdsbetween "book" and "cook."
If we" want to representthis, we need to be able to partially describe relations.This problem is addressed in semantic networks bydescribing relations along the same lines as events.For example, rather than expressing "John is 10" as(6) AGE-OF(JOHN1,10)we use the TYPE and ROLE predicates introducedabove to get(7) 3 p TYPE(p,AGE-RELATIONS) AROLE(p, OBJECT, JOHN1) AROLE(p, VALUE,10).This, of course, mirrors a semantic network such asAGE-RE~.ATIONSI typeP1ob jec ts  ~, .~a lueJOHN1 10As with events, describing a relation should not entailthat the relation holds.
If this were the case, it would bedifficult to represent non-atomic sentences such as adisjunction, since in describing one of the disjuncts, wewould be asserting that the disjunct holds.
We assert thata relation, r, is true with HOLDS(r).
Thus the assertionthat "John is 10" would involve (7) conjoined withHOLDS(p), i.e.,(8) \] p TYPE(p,AGE-RELATIONS) AROLE(p, OBJECT, JOHN1) AROLE(p, VALUE, IO) ^HOLDS(p)The assertion "John is not 10" is not the negation of (8),but is (7) conjoined with -HOLDS(p), i.e.,(9) \] p TYPE(p,AGE-RELATIONS) AROLE(p, OBJECT;JOHN1) AROLF(p, VALUE, IO) A-HOLDS(p).We could also handle negation by introducing thetype NO'I'-REIATIONS, which takes one rd.
~,.,,, isfilled by another relation.
To assert he above, we woutdconstruct an individual N1, of type NOT-RELATIONS,with its role filled with p, and assert hat N1 holds.
Wesee no advantage to this approach, however, sincenegation "moves through" the HOLDS predicate.
Inother words, the relation "not p" holding is equivalent tothe relation "p" not holding.
Disjunction andconjunction are treated in a similar manner.3.
Making Types Work for YouThe system described so far, though simple, is closeto providing us with one of the most characteristicinferences made by semantic networks, namelyinheritance.
For example, we might have the followingsort of information in our network:(10) SUBTYPE(MAMMALS,ANIMALS)(11) S UBTYPE(2-LEGGED-ANIMALS,ANIMALS)(12) SUBTYPE(PERSONS,MAMMALS)(13) SUBTYPE(PERSONS,2-LEGGED-ANIMALS)(14) SUBTYPE(DOGS,MAMMALS)(15) TYPE(GEORGE1,PERSONS)In a notation like in \[Hendrix, 1979\], these facts wouldbe represented as:ANIMALS2-LE MAMMALSPERSONS DOGSTGEORGE1In addition, let us assume we know that all instances of2-LEGGED-ANIMALS have two legs and that allinstances of MAMMALS are warm-blooded:(16) v x TYPE(x,2-LEGGF_.D-ANIMALS)HAS-2-LEGS(x)(17) v y TYPE(y,MAMMALS) .-~ WARM-BLOODED(y)These would be captured in the Hendrix formalismusing his delineation mechanism.Note that relations such as "WARM-BLOODED"and "HAS-2-LEGS" should themselves be described asrelations with roles, but that is not necessary for thisexample.
Given these facts, and axioms (A.1) to (A.3),we can prove that "George has two legs" by using axiom(A.2) on (13) and (15) to conclude(18) TYPE(GEORGE1,2-LEGGED-ANIMALS)22and then using (18) with (16) to conclude(19) HAS-2-LEGS(GEORGE1).In order to build a retriever that can perform theseinferences automatically, we must be able to distinguishfacts like (16) and (17) from arbitrary facts involvingimplications, for we cannot allow arbitrary chaining andretain efficiency.
This could be done by checking forimplications where the antecedent is composed entirelyof type restrictions, but this is difficult to specify.
Theroute we take follows the same technique describedabove when we introduced the TYPE and SUBTYPEpredicates.
We introduce new notation into the languagethat explicitly captures these cases.
The new form issimply a version of the typed FOPC, where variablesmay be restricted by the type they range over.
Thus, (16)and (17) become(20) v x:2-LEGGED-ANIMAI.S HAS-2-LEGS(x)(21) V y:MAMMALS WARM-BLOODED(y),The retriever now can be implemented as a typedtheorem prover that operates only on atomic base facts(now including (20) and (21)) and axioms (A.1) to (A.3).We now can deduce that GEORGE1 has two legsand that he is warm-blooded.
Note that objects can be ofmany different types as well as types being subtypes ofdifferent types.
Thus, we could have done the abovewithout the type PERSONS, by making GEORGE1 oftype 2-LEGGED-ANIMALS and MAMMALS.4.
Making Roles Work for YouIn the previous ection we saw how properties couldbe inherited.
This inheritance applies to role assertionsas well.
For example, given a type EVILNTS that has anOBJECT role.
i.e.,(22) SUBTYPE(EVENTS,INDIVIDUALS)(23) v x:EVENTS3 y:PHYS-OBJS ROLE(x, OBJECT, y).Then if ACTIONS are a subtype of events, i.e.,(24) SUBTYPE(ACTIONS,EVENTS),it follows from (A.2), (23), and (24) that for every actionthere is something that fills its OBJECT role, i.e.,(25) v x:ACTIONS3 y:PHYS-OBJS ROLE(x,OBJECT;y).Note that the definition of the type ACTIONS couldfurther specify the type of the values of its OMI".CTrole, but it could not contradict fact (25).
Thus(26) V x:ACTIONS3 y:PERSONS ROLE(x, OBJECT, y),further restricts the value of the OBJECT role for allindividuals of type ACTIONS to be .of type PERSONS.Another common technique used in semanticnetwork systems is to introduce more specific types of agiven type by specifying one (or more) of the rolevalues.
For instance, one might introduce a subtype ofACTION called ACTION-BY-JACK, i.e.,(27)(28)SUBTYPE(ACTION-BY-JACK,ACTIONS)?
abj:ACTION-BY-JACKROLE(abj,ACTOR,JACK).Then we could encode the general fact that all actions byJack are violent by something like(29) v abj:ACTION-BY-JACKVIOLENT(abj).This is possible in our logic, but there is a more flexibleand convenient way of capturing such information.
Fact(29), given (27) and (28), is equivalent o(30) v a:ACTIONS(ROLE a ACTOR JACK)?
--, VIOLENT(a).If we can put this into a form that is recognizable to theretriever, then we could assert such facts directly withouthaving to introduce arbitrary new types.The extension we make this time is from what wecalled a type logic to a role logic.
This allows quantifiedvariables to be restricted by role values as well as type.Thus, in this new notation, (30) would be expressed as(31) v a:ACH'IONS \[ACTOR JACK\]VIOLENT(a).In general, a formula of the formv a:T \[R1V1\]...\[RnVn\] Pais equivalent tov a (TYPE(a,T) AROLE(a,R1,V1) A .
.
.
A ROLE(a,Rn,Vn))?
-* Pa.23Correspondingly, an existentially cluantitied formulasuch as3 a:T \[R1V1\]...\[RnVn\] Pais equivalent o3 a TYPE(a,T) AROLE(a, R1,V1) A .
.
.
^ ROLE(a,Rn,V n) ^Pa.The retriever ecognizes these new forms and fullyreasons about the role restrictions.
It is important oremember that each of these notation changes is anextension onto the original simple language.
Everythingthat could be stated previously can still be stated.
Thenew notation, besides often being more concise andconvenient, is necessary only i f  the semantic networkretrieval facilities are desired.Note also that we can now define the inverse of (28),and state that all actions with actor JACK are necessarilyof type ACTION-BY-JACK.
This can be expressed as(32) v a:ACTIONS \[ACTOR JACK\]TYPE(a, ACTION-BY-JACK).5.
EqualityOne Of the crucial facilities needed by naturallanguage systems is the ability to reason about whetherindividuals are equal.
This issue is often finessed insemantic networks by assuming that each noderepresents a different individual, or that every type inthe type hierarchy is disjoint.
This assumption has beencalled E-saturation by \[Reiter, 1980\].
A natural languageunderstanding system using such a representation mustdecide on the referent of each description as themeaning representation is constructed, since if it createsa new individual as the referent, hat individual will thenbe distinct from all previously known individuals.
Sincein actual discourse the referent of a description is notalways recognized until a few sentences later, thisapproach lacks generality.One approach to this problem is to introduce fullreasoning about equality into the representation, but thisrapidly produces a combinatorially, prohibitive searchspace.
Thus other more specialized techniques aredesired.
We shall consider mechanisms for provinginequality f'trst, and then methods for proving equality.Hendrix \[1979\] introduced some mechanisms thatenable inequality to be proven.
In his system, mere aretwo forms of subtype links, and two forms of instancelinks.
This can be viewed in our system as follows: theSUBTYPE and TYPE predicates discussed above makeno commitment regarding equality.
However, a newrelation, DSUBTYPE(tl,t2) , asserts that t 1 is aSUBTYPE of t 2, and also that the elements of t 1 aredistinct from all other elements of other DSUBTYPESo f t  2.
This is captured by the axioms(A.4) v t, tl,t2,il,i2(DSUBTYPE(tl,t) A DSUBTYPE(t2,t) ATYPE(il,tl) A TYPE(i2,t 2) A~IDENTICAL(tl,t2))--, (i 1 * i 2)(A.5) v tl,t DSUBTYPE(tl,t) ---, SUBTYPE(tl,t)We cannot express (A.4) in the current logic because thepredicate IDFA',ITICAL operates on the syntactic form ofits arguments rather than their referents.
Two terms areIDENTICAL only if they are lexicaUy the same.
To dothis formally, we have to be able to refer to the syntacticform of terms.
This can be done by introducingquotation into the logic along the lines of \[Perlis, 1981\],but is not important for the point of this paper.A similar trick is done with elements of a single type.The predicate DTYPE(i,t) asserts that i is an instance oftype t, and also is distinct from any other instances of twhere the DTYPE holds.
Thus we need(A.6) v il,i2,t (DTYPE(il,t) A DTYPE(i2,t) A~ IDENTICAL(il,i2) )?
--, (i 1 * i 2)(A.7) vi, t DTYPE(i,t) ---, TYPE(i,t)Another extremely useful categorization f objects isthe partitioning of a type into a set of subtypes, i.e., eachelement of the type is a member of exactly one subtype.This can be defined in a similar manner as above.Turning to methods for proving equality, \[Tarjan,1975\] describes an efficient method for computingrelations that form an equivalence class.
This is adaptedto support full equality reasoning on ground terms.
Ofcourse it cannot effectively handle conditional assertionsof equality, but it covers many of the typical cases.Another technique for proving equality exploitsknowledge about types.
Many types are such that theirinstances are completely defined by their roles.
For sucha type T, if two instances I1 and 12 of T agree on alltheir respective rc!~ then they are equal.
If I1 and I2have a role where their values are not equal, then I I andI2 are not equal.
If we finally add the assumption thatevery instance of T can be characterized byits set of rolevalues, then we can enumerate the instances of type Tusing a function (say t) that has an argument for eachrole value.24For example, consider the type AGE-RELS of ageproperties, which takes two roles, an OBJECT and aVALUE.
Thus, the property P1 that captures theassertion "John is 10" would be described as follows:(33) TYPE(P1,AGE-RELS) AROLE(PI,OBJECT, JOHN1) AROLE(P1, VALUE, IO).The type AGE-RELS satisfies the above properties,so any individual of type AGE-RELS with OBJECTrole JOHN1 and VALUE role 10 is equal to P1.
Theretriever encodes such knowledge in a preprocessingstage that assigns each individual of type AGE-RELS toa canonical name.
The canonical name for P1 wouldsimply be "age-rels(JOHNl,10)".Once a representation has equality, it can capturesome of the distinctions made by perspectives in KRL.The same object viewed from two different perspectivesis captured by two nodes, each with its own type, roles,and relations, that are asserted to be equal.Note that one cannot expect more sophisticatedreasoning about equality than the above from theretriever itself.
Identifying two objects as equal istypically not a logical inference.
Rather, it is a plausibleinference by some specialized program such as thereference component of a natural language system whichhas to identify noun phrases.
While the facts representedhere would assist such a component in identifyingpossible referencts for a noun phrase given itsdescription, it is unlikely that they would logically implywhat the referent is.6.
Associations and PartitionsSemantic networks are useful because they structureinformation so that it is easy to retrieve relevant facts, orfacts about certain objects.
Objects are represented onlyonce in the network, and thus there is one place whereone can find all relations involving that object (byfollowing back over incoming ROLE arcs).
While weneed to be able to capture such an ability in our system,we should note that this is often not a very useful ability,for much of one's knowledge about an object will ,lot beattached to that object but will be acquired from theinheritance hierarchy.
In a spreading activation type offramework, a considerable amount of irrelevant networkwill be searched before some fact high up in the typehierarchy is found.
In addition, it is very seldom thatone wants to be able to access all facts involving anobject; it is much more likely that a subset of relations isrelevant.If desired, such associative links between objects canbe simulated in our system.
One could find all propertiesof an object ol (including those by inheritance) byretrieving all bindings of x in the query3x,r ROLE(x,r,ol).The ease of access provided by the links in a semanticnetwork is effectively simulated simply by using ahashing scheme on the structure of all ROLE predicates.While the ability to hash on structures to find facts iscrucial to an efficient implementation, the details are notcentral to our point here.Another important form of indexing is found inHendrix where his partition mechanism is used toprovide a focus of attention for inference processes\[Grosz, 1977\].
This is just one of the uses of partitions.Another, which we did not need, provided a facility forscoping facts within logical operators, imilar to the useof parentheses in FOPC.
Such a focus mechanismappears in our system as an extra argument on the mainpredicates (e.g., HOLDS, OCCURS, etc.
).Since contexts are introduced as a new class ofobjects in the language, we can quantify over them andotherwise talk about hem.
In particular, we can organizecontexts into a lattice-like structure (corresponding toHendrix's vistas for partitions) by introducing atransitive relation SUBCONTEXT.
(A.8) v c,cl,c2 SUBCONTEXT(c,cl) ASUBCONTEXT(cl,c2)SUBCONTEXT(c,c2)To relate contexts to the HOLDS predicate, aproposition p holds in a context c only if it is known tohold in c explicitly, or it holds in a super context of c.(A.9) v p,t,c,c' SUBCONTEXT(c,c,)AHOt.DS(p,c')--, HOLDS(p,c),As with the SUBTYPE relation, this axiom would defyan efficient implementation if the contexts were notorganized in a finite lattice structure.
Of course, we needaxioms similar to (A,9) for the OCCURS and IS-RF_.ALpredicates.7.
DiscussionWe have argued that the appropriate way to designknowledge representations is to identify those inferencesthat one wishes to facilitate.
Once these are identified,one can then design a specialized limited inferencemechanism that can operate on a data base of first order25facts.
In this fashion, one obtains a highly expressiverepresentation language (namely FOPC), as well as awell-defined and extendable retriever.We have demonstrated this approach by outlining aportion of the representation used in ARGOT, theRochester Dialogue System \[Allen, 1982\].
We arecurrently extending the context mechanism to handletime, belief contexts (based on a syntactic theory ofbelief \[Haas, 1982\]), simple hypothetical reasoning, and arepresentation of plans.
Because the matcher is definedby a set of axioms, it is relatively simple to add newaxioms that handle new features.For example, we are currently incorporating a modelof temporal knowledge based on time intervals \[Allen,1981a\].
This is done by allowing any object, event, orrelation to be qualified by a time interval as follows: forany untimed concept x, and any time interval t, there isa timed concept consisting of x viewed during t which isexpressed by the term(t-concept x t).This concept is of type (TIMED Tx), where Tx is thetype of x.
Thus we require a type hierarchy of timedconcepts that mirrors the hierarchy of untimed concepts.Once this is done, we need to introduce new built-inaxioms that extend the retriever.
For instance, we definea predicate,DURING(a,b),that is true only if interval a is wholly contained ininterval b.
Now, if we want the retriever to automaticallyinfer that if relation R holds during an interval t, then itholds in all subintervals of t, we need the followingbuilt-in axioms.
First, DURING is transitive:(A.10) V a,b,c DURING(a,b) A DURING(b,c)--, DURING(a,c)Second, if P holds in interval t, it holds in allsubintervals of t.(A.11) v p,t,t',c HOLDS(t-concept(p,t),c) ADURING(t' ,t)---, HOLDS(t-concept(p,t'),c).Thus we have extended our representation to handlesimple timed concepts with only a minimal amount ofanalysis.Unfortunately, we have not had the space todescribe how to take the specification of the retriever(namely axioms (A.1) - (A.11)) and build an actualinference program out of it.
A technique for buildingsuch a limited inference mechanism by moving to ameta-logic is described in \[Frisch and Allen, 1982\].One of the more interesting consequences of thisapproach is that it has led to identifying variousdifference modes of retrieval that are necessary tosupport a natural language comprehension task, Wehave considered so far only one mode of retrieval, whichwe call provability mode.
In this mode, the query mustbe shown to logically follow from the built-in axiomsand the facts in the knowledge base.
While this is theprimary mode of interaction, others are also important.In consistency mode, the query is checked to see if itis logically consistent with the facts in the knowledgebase with respect to the limited inference mechanism.While consistency in general is undecidable, with respectto the limited inference mechanism it is computationallyfeasible.
Note that, since the retriever is defined by a setof axioms rather than a program, consistency mode iseasy to define.Another important mode is compatibility mode,which is very useful for determining the referents ofdescription.
A query in compatibility mode succeeds ifthere is a set of equality and inequality assertions thatcan be assumed so that the query would succeed inprovability mode.
For instance, suppose someone refersto an event in which John hit someone with a hat.
Wewould like to retrieve possible vents that could be equalto this.
Retrievals in compatibility mode are inherentlyexpensive and so must be controlled using a contextmechanism such as in \[Grosz, 1977\].
We are currentlyattempting to formalize this mode using Reiter's non-monotonic logic for default reasoning.We have implemented a version of this system inHORNE \[Allen and Frisch, 1981\], a LISP embeddedlogic programming language.
In conjunction with thisrepresentation is a language which provides manyabbreviations and facilities for system users.
Forinstance, users can specify what context and times theyare working with respect to, and then omit thisinformation from their interactions with the system.Also, using the abbreviation conventions, the user candescribe a relation and events without explicitly assertingthe TYPE and ROLE assertions.
Currently the systemprovides the inheritance hierarchy, simple equalityreasoning, contexts, and temporal reasoning with theDURING hierarchy.26AcknowledgmentsThis research was supported in part by the NationalScience Foundation under Grant IST-80-12418, and inpart by the Office of Naval Research under GrantN00014-80-C-0197.ReferencesAllen, J.F., "ARGOT: A system overview," TR 101,Computer Science Dept., U. Rochester, 1982.Allen, J.F., "An interval-based representation oftemporal knowledge," Proc., 7th IJCAI, Vancouver,B.C., August 1981a.Allen, J.F., "What's necessary to hide?
: Reasoning aboutaction verbs," Proc., 19th ACL, Stanford U., 1981b.Allen, J.F.
and A.M. Frisch, "HORNE user's manual,"Computer Science Dept., U. Rochester, 1981.Bobrow, D.G.
and T. Winograd, "An overview of KRL,a knowledge representation language," CognitiveScience 1, 3-46, 1977.Brachman, R.J., "On the epistemological status ofsemantic networks," in N.V. Findler, 1979.Charniak, E., "A common representation for problem-solving and language-comprehension information,"Artificial Intelligence 16, 3, 225-255, July 1981a.Charniak, E., "The case-slot identity theory," CognitiveScience 5, 3, 1981b.Davidson, D., "The logical form of action sentences," inN.
Rescher (F_A).
The Logic of Decision and Action.Pittsburgh, PA: U. Pittsburgh Press, 1967.Fillmore, C.J., "The case for case," in E. Bach and R.Harmes (Eds), Universals in Linguistic Theory.
NewYork: Holt, Rinehart and Winston, 1968.Findler, N.V. (Ed).
Associative Networks: Representationand Use of Knowledge by Computers.
New York:Academic Press, 1979.Frisch, A.M. and J.F.
Allen, "Knowledge retrieval aslimited inference," Proc., 6th Conf.
on AutomatedDeduction, New York, June 1982.Grosz, B.J., "The representation a d use of focus indialogue understanding," TN 151, SRI, July 1977.Haas, A., "Mental states and mental actions inplanning," Ph.D. thesis, Computer Science Dept., U.Rochester, 1982.Hayes, P.J., "The logic of frames," in D. Metzing (Ed).Frame Conceptions and Text Understanding.
Walterde Gruyter & Co., 1979.Hendrix, G.G., "Encoding knowledge in partitionednetworks," in N.V. Findler, 1979.Kowalski, R.A?
Logic for Problem Solving.
New York:North Holland, 1979.Levesque, H. and J. Mylopolous, "A proceduralsemantics for semantic networks," in N.V. Findler,1979.Nilsson, N.J. Principles of Artificial Intelligence.
PaloAlto, CA: Tioga Publishing Co., 1980.Perlis, D., "Language, computation, and reality," Ph.D.thesis, Computer Science Dept., U. Rochester, 1981.Reiter, R., "A logic for default reasoning," ArtificialIntelligence 13, 1-2, 81-132, April 1980.Shapiro, S. C., "The SNePS semantic networkprocessing system," in N.V. Findler, 1979.Shapiro, S. C., "A net structure for semantic informationstorage, deduction and retrieval," Proc., IJCAI, 1971.Tarjan, R.E., "Efficiency of a good but not linear setunion algorithm," JACM 22, 2, April 1975.Woods, W. A., "What's in a link: Foundations forsemantic networks," in D.G.
Bobrow and A.M.Collins (Eds).
Representation and Understanding.New York: Academic Press, 1975.27
