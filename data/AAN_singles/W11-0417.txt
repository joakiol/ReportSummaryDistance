Proceedings of the Fifth Law Workshop (LAW V), pages 134?142,Portland, Oregon, 23-24 June 2011. c?2011 Association for Computational LinguisticsEmpty Categories in Hindi Dependency Treebank: Analysis and RecoveryChaitanya GSKIntl Institute of Info.
TechnologyHyderabad, Indiachaitanya.gsk@research.iiit.ac.inSamar HusainIntl Institute of Info.
TechnologyHyderabad, Indiasamar@research.iiit.ac.inPrashanth MannemIntl Institute of Info.
TechnologyHyderabad, Indiaprashanth@research.iiit.ac.inAbstractIn this paper, we first analyze and classify theempty categories in a Hindi dependency tree-bank and then identify various discovery pro-cedures to automatically detect the existenceof these categories in a sentence.
For this wemake use of lexical knowledge along with theparsed output from a constraint based parser.Through this work we show that it is possi-ble to successfully discover certain types ofempty categories while some other types aremore difficult to identify.
This work leads tothe state-of-the-art system for automatic inser-tion of empty categories in the Hindi sentence.1 IntroductionEmpty categories play a crucial role in the annota-tion framework of the Hindi dependency treebank1(Begum et al, 2008; Bharati et al, 2009b).
Theyare inserted in a sentence in case the dependencyanalysis does not lead to a fully connected tree.
Inthe Hindi treebank, an empty category (denoted bya NULL node) always has at least one child.
Theseelements have essentially the same properties (e.g.case-marking, agreement, etc.)
as an overtly real-ized element and they provide valuable information(such as predicate-argument structure, etc.).
A dif-ferent kind of motivation for postulating empty cate-gories comes from the demands of natural lan- guageprocessing, in particular parsing.
There are severaltypes of empty categories in the Hindi dependency1The dependency treebank is part of a Multi Representa-tional and Multi-Layered Treebank for Hindi/Urdu (Palmer etal., 2009).treebank serving different purposes.
The presenceof these elements can be crucial for correct auto-matic parsing.
Traditional parsing algorithms donot insert empty categories and require them to bepart of the input.
The performance of such parserwill be severely affected if one removes these ele-ments from the input data.
Statistical parsers likeMaltParser (Nivre, 2003), MSTParser (McDonald,2005), as well as Constraint Based Hybrid Parser(CBHP) (Bharati et al, 2009a) produce incorrectparse trees once the empty categories are removedfrom the input data.
Hence there is a need for auto-matic detection and insertion of empty categories inthe Hindi data.
Additionally, it is evident that suc-cessful detection of such nodes will help the annota-tion process as well.There have been many approaches for the recov-ery of empty categories in the treebanks like Penntreebank, both ML based (Collins, 1997; Johnson,2002; Dienes and Dubey, 2003a,b; Higgins, 2003)and rule based (R Campbell, 2004).
Some ap-proaches such as Yang and Xue (2010) follow a postprocessing step of recovering empty categories afterparsing the text.In this paper we make use of lexical knowledgealong with the parsed output from a constraint basedparser to successfully insert empty category in theinput sentence, which may further be given for pars-ing or other applications.
Throughout this paper, weuse the term recovery (of empty categories) for theinsertion of different types of empty categories intothe input sentence.The paper is arranged as follows, Section 2 dis-cusses the empty nodes in the treebank and classifies134NULL NP tokens 69NULL VG tokens 68NULL CCP tokens 32Sentences with more thanone empty category in them 159Table 1: Empty categories in Hindi Tree bankthem based on their syntactic type.
In section 3 weprovide an algorithm to automatically recover theseelements.
Section 4 shows the performance of oursystem and discusses the results.
We conclude thepaper in section 5.2 An overview of Empty Categories inHindi dependency TreebankBegum et al, (2008) proposed a dependency frame-work in which an empty node is introduced dur-ing the annotation process only if its presence isrequired to build the dependency tree for the sen-tence (Figures 1, 2, 3) 2.
Empty categories such asthose discussed in Bhatia et al (2010) which wouldbe leaf nodes in the dependency tree are not partof the dependency structure and are added duringPropbanking3.
Consequently, the empty categoriesin Hindi treebank do not mark displacement as inPenn treebank (Marcus et al, 1993) rather, they rep-resent undisplaced syntactic elements which happento lack phonological realization.
In the Hindi depen-dency treebank, an empty category is represented bya ?NULL?
word.
Sentences can have a missing VGor NP or CCP 4.
These are represented by ?NULL?token and are marked with the appropriate Part-of-speech tag along with marking the chunk tag suchas NULL NP, NULL VGF, NULL CCP, etc.
in Ta-ble 22Due to space constraints, sentences in all the figures onlyshow chunk heads.
Please refer to examples 1 to 6 for entiresentences with glosses3These empty categories are either required to correctly cap-ture the argument structure during propbanking or are requiredto successfully convert the dependency structure to phrase struc-ture (Xia et al, 2009)4VG is Verb Group, NP is Noun Phrase and CCP is ConjunctPhrase.Type of empty Inst- Chunk tagcategories ances (CPOS)Empty subject 69 NULL NPBackward gapping 29 NULL VGForward gapping 21 NULL VGFinite verb ellipses 18 NULL VGConjunction ellipses(verbs) 20 NULL CCPConjunction ellipses(nouns) 12 NULL CCPTotal 169Table 2: Empty category types.2.1 Empty category typesFrom the empty categories recovery point of view,we have divided the empty categories in the treebankinto six types (Table 2).The first type of empty category is Empty Subject(Figure 1), example.1 where a clause ?rava kekaaran hi manmohan singh rajaneeti me aaye?
isdependent on the missing subject of the verb ?hai?(is).
(1) NULL gaurtalab hai ki raaoNULL ?noticeable?
?is?
?that?
?Rao?ke kaaran hi manmohan sing?because?
?only?
?Manmohan?
?singh?raajaniiti me aaye?politics?
?in?
?came.
?it is noticeable that because of Rao, ManmohanSingh came in politics?The second type of empty category is due toBackward Gapping (Figure 2), example.2 wherethe verb is absent in the clause that occurs before aco-ordinating conjunct.
(2) doosare nambara para misa roosa?second?
?position?
?on?
?miss?
?Russia?natasha NULL aur tiisare nambara?Natasha?
NULL ?and?
?third?
?position?para misa lebanan sendra rahiim .?on?
?miss?
?Lebanan?
?Sandra?
were?
.135Figure 1: Empty Subject.Figure 2: Backward Gapping.Figure 3: Forward Gapping.Figure 4: Finite verb ellipses.Figure 5: Conjunction ellipses (verbs).136Figure 6: Conjunctuon ellipses (nouns).
?Miss Russia stood second and Miss Lebananwas third?The third type of empty category is ForwardGapping (Figure 3), example 3, which is similar tothe second type but with the clause with the missingverb occurring after the conjunct rather than before.The reason for a separate class for forward gappingis explained in the next section.
(3) divaalii ke dina jua Kele magara?Diwali?
?GEN?
?day?
?gamble?
?play?
?but?NULL gar me yaa hotala me?NULL?
?home?
?in?
?or?
?hotel?
?in?
?Played gamble on Diwali day but was it at homeor hotel?The fourth type of empty category is due to Finiteverb ellipses (Figure4), example 4, where the mainverb for a sentence is missing.
(4) saath me vahii phevareta khadaa pyaaja?along?
?in?
?that?
?favorite?
?raw?
?onion?NULL.NULL?Along with this, the same favorite semi-cookedonion?The fifth type of empty category is Conjunctionellipses (Verbs), example 5 (Figure 5).
(5) bacce bare ho-ga-ye-hai NULL?children?
?big?
?become?
?NULL?kisii ki baat nahiin maante?anyone?
?gen?
?advice?
?not?
?accept?
?The children have grown big (and) do not listento anyone?The sixth type of empty category is the Conjunc-tion ellipses (for nouns), example 6 (Figure 6).
(6) yamunaa nadii me uphaana se?Yamuna?
?river?
?in?
?storm?
?INST?sekado ekara gannaa, caaraa,?thousands?
?acre?
?sugarcane?
?straw?dhana, NULL sabjii kii phasale?money?
?NULL?
?vegetable?
?GEN?
?crops?jala-magna ho-gai-hai .?drowned?
?happened?
?Because of the storm in the Yamuna river, thou-sand acres of sugarcane, straw, money, vegetablecrops got submerged?3 Empty categories recovery AlgorithmGiven the limited amount of data available (only 159sentences with at least one empty category in themout of 2973 sentences in the Hindi treebank, Table12 ), we follow a rule based approach rather than us-ing ML to recover the empty catogories discussed inthe previous section.
Interestingly, a rule-based ap-proach was followed by R Campbell, (2004) that re-covered empty categories in English resulting in bet-ter performance than previous empirical approaches.This work can be extended for ML once more databecomes available.The techniques that are used for recovering emptycategories in the Penn treebank (Collins, 1997;Johnson, 2002;) might not be suitable since the Penntreebank has all the empty categories as leaf nodes inthe tree unlike the Hindi dependency treebank where137for each sentence in the input datatry in Empty Subjecttry in Forward Gappingtry in Finite Verb ellipsesfor each tree in CBHP parse outputtry in Backward Gappingtry in Forward Gappingtry in Finite Verb ellipsestry in Conjunction ellipses (for Verbs)Table 3: Empty categories Recovery Algorithm.the empty categories are always internal nodes in thedependency trees (Figure 2).In this section we describe an algorithm whichrecovers empty categories given an input sentence.Our method makes use of both the lexical cues aswell as the output of the Constraint Based HybridParser (CBHP).
Table 3 presents the recovery algo-rithm which first runs on the input sentence and thenon the output of the CBHP.3.1 Empty SubjectFraming rule 1 requires the formation of a set (Cue-Set) based on our analysis discussed in the previ-ous section.
It contains all the linguistic cues (lex-ical items such as gaurtalab ?noticeable?, maloom?known?, etc).
We then scan the input sentencesearching for the cue and insert an empty category(NULL NP)5 if the cue is found.
Table 4 illustatesthe process where we search for ?CueSet he ki?
or?CueSet ho ki?
phrases.
In Table 4, W+1 representsword next to W, W+2 represents word next to W+1.3.2 Backward GappingTo handle backward gapping cases, we take the in-termediate parse output from CBHP 6 for the wholedata.
The reason behind choosing CBHP lies in itsrule based approach.
CBHP fails (or rather givesa visibly different parse) for sentences with miss-ing verbs.
And when it fails to find a verb, CBHP5We insert a token ?NULL?
with NULL NP as CPOS6CBHP is a two-stage parser.
In the 1st stage it parses intra-clausal relations and inter-clausal relations in the 2nd stage.
The1st stage parse is an intermediate parse.for each word W in the Sentenceif W  CueSetif W+1 & W+2 = he or ho & kiInsert NULL with PRP as POS,NULL NP as CPOSTable 4: Rule for identifying Empty Subject.for each node N in tree Tif head of N = ?insert N in unattached subtrees[]for each node X in unattached subtrees[]while POS(X) is not VGtraverse in the array of unattached subtreesif ?
a conjunct, then recovery=1if recovery = 1insert NULL, with VM as POS,NULL VG as CPOSHead of NULL = ?Table 5: Rule for identifying Backward Gapping usingCBHP.gives unattached subtrees7 (Figure 7, 8, 9 illustratesthe unattached subtrees where the parser is unable tofind a relation between the heads of each unattachedsubtree).
Similarly whenever the parser expects aconjunction and the conjunction is absent in the sen-tence, CBHP again gives the unattached subtrees.We analyze these unattached sub-trees to seewhether there is a possibility for empty category.The array, in Table 5 represents all the nodes hav-ing no heads.
POS represents part of speech andCPOS represents chunk part of speech and ?
repre-sents empty set.3.3 Forward gappingThe main reason for handling the forward gapping asa separate case rather than considering it along withbackward gapping is the prototypical SOV word-order of Hindi, i.e.
the verb occurs after subject andobject in a clause or sentence.
We take the interme-diate parse output from the CBHP for the whole dataand when ever a verb is absent in a clause occurringimmediately after a conjunct, we search for a VG af-7CBHP gives fully connected trees in both the stages.
Wehave modified the parser so that it gives unattached subtreeswhen it fails.138for each node N in tree Tif head of N = ?insert N in unattached subtrees[]for each node X in unattached subtrees[]if !?
a verb between two conjunctsif those conjuncts belongs to conjunct setinsert insert NULL with VM as POS,NULL VG as CPOSTable 6: Rule for identifying Forward Gapping usingCBHP.for each word W in the sentence Sif W  CueSet FGinsert NULL with NULL VG as POSand CPOSif W = Conjunctif POS(W-1) = VGif !?
a VG in S-Winsert NULL with VM as POS,NULL VG as CPOSTable 7: Rule for identifying Forward Gapping .ter the conjunct and insert an empty category if theVG is absent (an example of such cases can be seenin Figure 7).
This procedure is given in Table 6.
Inaddition, we use the lexical cues (such as ya nahii ?ornot?, ya ?or?)
for recovering certain types of emptycategories.
CueSet FG is the set that contains thelexical cues and conjunct set contains lexical cueslike (ki and ya).
This procedure is shown in Table 7.Figure 7: Unattached sub trees in CBHP parse output ofan input sentence (forward gapping).3.4 Finite Verb ellipsesIn the cases where there is no VG at all in the sen-tence, we insert a NULL VG before the EOS (End-Of-Sentence) in the input sentence.
For this case,finite verb ellipses can be recovered directly fromif !?
a VG in S-Winsert NULL with VM as POS,NULL VG as CPOSTable 8: Rule for identifying Finite Verb ellipses in sen-tence.for each node N in tree Tif head of N = ?insert N in unattached subtrees[]if !?
a verb in unattached subtrees[]if those conjuncts belongs to conjunct setinsert insert NULL with VM as POS,NULL VG as CPOSTable 9: Rule for identifying Finite Verb ellipses usingCBHP.the input sentence using the rule in Table 8 .Also,in a sentence with a VG, we use CBHP to ascertainif this VG is the root of the sentence.
If its not, weinsert an additional NULL VG.
This algorithm willcorrectly recover VG in the sentence but the positioncan be different from the gold input at times not be-cause the recovery algorithm is wrong, but there isno strict rule that says the exact position of emptycategory in this case of finite verb ellipse and anno-tators might choose to insert an empty category atany position.
For example, in Figure 8, we can in-sert an empty category either after first NP sub treeor second or the third etc, all these possibilities areaccepted syntactically.
For simplicity purposes, weinsert the empty category just before the EOS.
Thisprocedure is shown in Table 9.3.5 Conjunction ellipses (for verbs)We again use the intermediate parsed output ofCBHP for this type.
Whenever there is a miss-ing conjunction between the two finite clauses, theclausal sub trees are disconnected from each otheras shown in Figure 9.
Hence the rule that shouldbe applied is to insert a NULL CCP between twosub trees with VG heads and insert NULL CCP im-mediately after the first verb in the input sentence.Table 10 shows this procedure.139Figure 8: Unattached Subtrees (Finite verb ellipses).Figure 9: Unattached Subtrees in the case of conjunction ellipses.for each node N in tree Tif head of N = ?insert N in unattached subtrees[]for each node X in unattached subtrees[]if X and X+1 are VG?sinsert insert NULL with CC as POS,NULL CCP as CPOSTable 10: Rule for identifying Finite Verb ellipses usingCBHP.4 Results and DiscussionWe have presented two sets of results, the overallempty categories detection along with the accuraciesof individual types of empty categories in Table 11and Table 12.The results in Table 12 show that the precision inrecovering many empty categories is close to 90%.A high precision value of 89.8 for recovery of Emptysubject type is due to the strong lexical cues thatwere found during our analysis.
CBHP parse out-put proved helpful in most of the remaining types.Few cases such as backward gapping and conjunc-Type of empty Inst- Prec- Recallcategories ances isionEmpty subject 69 89.8 89.8Backward gapping 29 77.7 48.3Forward gapping 21 88.8 72.7Finite verb ellipses 18 78.5 61.1Conjunction ellipses 20 88.2 75(verbs)Conjunction ellipses 12 0 0(nouns)Total 169 91.4 69.8Table 11: Recovery of empty categories in Hindi tree-bank.tion ellipses (for nouns) are very difficult to handle.We see that although CBHP helps in the recoveryprocess by providing unattached subtrees in manyinstances, there are cases such as those of backwardgapping and nominal conjunction ellipses where itdoes not help.
It is not difficult to see why this isso.
The presence of the 2nd verb in the case of back-ward gapping fools CBHP into treating it as the mainverb of a normal finite clause.
In such a case, the140Type of empty Inst- Prec- Recallcategories ances isionNULL NP tokens 69 89.8 89.8NULL VG tokens 68 82 60.2NULL CCP tokens 32 88.2 46.8Total 159 91.4 69.8Table 12: Empty categories in Hindi Tree bankparser ends up producing a fully formed tree (whichof course is a wrong analysis) that is of no use forus.Similar problem is faced while handling conjunc-tion ellipses (for nouns).
Here as in the previouscase, CBHP is fooled into treating two coordinat-ing nominals as independent nouns.
We note herethat both the cases are in fact notoriously difficultto automatically detect because of the presence (orabsence) of any robust linguistic pattern.These results show that our system can be used tosupplement the annotators effort during treebanking.We plan to use our system during the ongoing Hinditreebanking to ascertain it effect.
As mentioned ear-lier, automatic detection of empty categories/nodeswill prove to be indis pensable for parsing a sen-tence.
We also intend to see the effect of our systemduring the task of parsing.5 ConclusionIn this paper we presented an empty category recov-ery algorithm by analyzing the empty categories inthe Hindi treebank.
This, we noticed, uses lexicalcues and parsed output of a constraint based parser.The results show that our system performs consid-erably high ( 90%) for many types of empty cate-gories.
Few types, on the other hand, such as back-ward gapping and nominal coordinating conjunc-tions were very difficult to handle.
Our approachand analysis will be useful in automatic insertion ofempty nodes during dependency annotation.
It willalso benefit data-driven/statistical approaches eitheras a post-processing tool or in recovering empty cat-egories by helping in feature selection for variousmachine learning techniques.AcknowledgmentsWe would like to thank Prof. Rajeev Sangal for pro-viding valuable inputs throughout the work.ReferencesR.
Begum, S. Husain, A. Dhwaj, D. Sharma, L. Bai,and R. Sangal.
Dependency annotation scheme forIndian languages.
2008.
In proceedings of ThirdInternational Joint Conference on Natural LanguageProcessing (IJCNLP), Hyderabad, IndiaA.
Bharati, S. Husain, D. Misra, and R. Sangal.
Twostage constraint based hybrid approach to free wordorder language dependency parsing.
2009a.
InProceedings of the 11th International Conference onParsing Technologies (IWPT).
Paris.A.
Bharati, D. Sharma, S. Husain, L. Bai, R. Begam, andR.
Sangal.
Anncorra: Treebanks for indian languages,guidelines for annotating hindi treebank.
2009b.http://ltrc.iiit.ac.in/MachineTrans/research/tb/DS-guidelines/DS-guidelines-ver2-28-05-09.pdfA.
Bhatia, R. Bhatt, B. Narasimhan, M. Palmer, O. Ram-bow, D. Sharma, M. Tepper, A. Vaidya, and F. Xia.Empty Categories in a Hindi Treebank.
2010.
In theProceedings of the 7th International Conference onLanguage Resources and Evaluation (LREC).R.
Campbell.
Using linguistic principles to recoverempty categories.
2004.
In Proceedings of the 42ndAnnual Meeting of the Association for ComputationalLinguisticsA.
Chanev.
Portability of dependency parsingalgorithms?an application for Italian.
2005.
InProc.
of the fourth workshop on Treebanks andLinguistic Theories (TLT).
Citeseer.M.
Collins.
Three generative, lexicalised models forstatistical parsing.
1997.
In Proceedings of the 35thAnnual Meeting of the Association for ComputationalLinguistics and Eighth Conference of the EuropeanChapter of the Association for Computational Lin-guistics.P.
Dienes and A. Dubey.
Antecedent recovery: Experi-ments with a trace tagger.
2003a.
In Proceedings ofthe 2003 conference on Empirical methods in naturallanguage processing.141P.
Dienes and A. Dubey.
Deep syntactic processing bycombining shallow methods.
2003b.
In Proceedingsof the 41st Annual Meeting on Association for Com-putational Linguistics-Volume 1.D.
Higgins.
A machine-learning approach to the identifi-cation of WH gaps.
2003.
In Proceedings of the tenthconference on European chapter of the Associationfor Computational Linguistics-Volume 2.X.
Fei, O. Rambow, R. Bhatt, M. Palmer, and D. Sharma.Towards a multi-representational treebank.
2008.Proc.
of the 7th Int?lWorkshop on Treebanks andLinguistic Theories (TLT-7)M. Johnson.
A simple pattern-matching algorithmfor recovering empty nodes and their antecedents.2002.
In Proceedings of the 40th Annual Meeting onAssociation for Computational Linguistics.M.
Marcus, M. Marcinkiewicz, and B. Santorini.
Build-ing a large annotated corpus of English: The PennTreebank.
1993.
Computational linguistics.R.
McDonald, F. Pereira, K. Ribarov, and J. Hajic?.Non-projective dependency parsing using spanningtree algorithms.
2005.
In Proceedings of the confer-ence on Human Language Technology and EmpiricalMethods in Natural Language Processing.J.
Nivre.
An efficient algorithm for projective depen-dency parsing.
2003.
In Proceedings of the 8thInternational Workshop on Parsing Technologies(IWPT).M.
Palmer, R. Bhatt, B. Narasimhan, O. Rambow,D.
Sharma, and F. Xia.
Hindi Syntax: AnnotatingDependency, Lexical Predicate-Argument Structure,and Phrase Structure.
2009.
In The 7th InternationalConference on Natural Language Processing.Y.
Yang and N. Xue.
Chasing the ghost: recoveringempty categories in the Chinese Treebank.
2010.
InProceedings of the 23rd International Conference onComputational Linguistics: Posters.142
