Transforming Lattices into Non-deterministic Automata withOptional Null ArcsMark Seligman, Christian Boitet, Boubaker Meddeb-HamrouniUniversit6 Joseph FourierGETA, CLIPS, IMAG-campus, BP 53150, rue de la Chimie38041 Grenoble Cedex 9, Francesel igman@ cer f. net,{ Christ ian.
Boitet, Boubaker.
Meddeb-Hamrouni  } @ imag.
frAbstractThe problem of transforming a lattice into anon-deterministic finite state automaton isnon-trivial.
We present a transformation al-gorithm which tracks, for each node of anautomaton under construction, the larcswhich it reflects and the lattice nodes at theirorigins and extremities.
An extension of thealgorithm permits the inclusion of null, orepsilon, arcs in the output automaton.
Thealgorithm has been successfully applied tolattices derived from dictionaries, i.e.
verylarge corpora of strings.IntroductionLinguistic data -- grammars, speech recognitionresults, etc.
-- are sometimes represented as lat-tices, and sometimes as equivalent finite stateautomata.
While the transformation of automatainto lattices is straightforward, we know of noalgorithm in the current literature for trans-forming a lattice into a non-deterministic finitestate automaton.
(See e.g.
Hopcroft et al(1979),Aho et al(1982).
)We describe such an algorithm here.
Its mainfeature is the maintenance of complete recordsof the relationships between objects in the inputlattice and their images on an automaton as theseare added during transformation.
An extensionof the algorithm permits the inclusion of null, orepsilon, arcs in the output automaton.The method we present is somewhat complex,but we have thus far been unable to discover asimpler one.
One suggestion illustrates the diffi-culties: this proposal was simply to slide latticenode labels leftward onto their incoming arcs,and then, starting with the final lattice node, tomerge nodes with identical outgoing arc sets.This strategy does successfully transform manylattices, but fails on lattices like this one:Figure 1For this lattice, the sliding strategy fails to pro-duce either of the following acceptable solu-tions.
To produce the epsilon arc of 2a or thebifurcation of Figure 2b, more elaborate meas-ures seem to be needed.a.ab.
~ F igure  2aWe present our datastructures in Section 1; ourbasic algorithm in Section 2; and the modifica-tions which enable inclusion of epsilon automa-ton arcs in Section 3.
Before concluding, weprovide an extended example of the algorithmin operation in Section 4.
Complete pseudocodeand source code (in Common Lisp) are availablefrom the authors.1 Structures and termsWe begin with datastructures and terminology.
Alattice structure contains lists of lnodes (latticenodes), lares (lattice arcs), and pointers to thelnitlal.lnode and flnal.inode.
An lnode has alabel and lists of Incoming.lares and outgo-lng.lares.
It also has a list of a-ares (automaton1205arcs) which reflect it A larc has an origin andextremity.
Similarly, an automaton structurehas anodes (automaton nodes), a-arcs, andpointers to the Initial.anode and final.anode.An anode has a label, a list of lares which it re-flects, and lists of Incoming.a-ares and outgo-lng.a-arcs Finally, an a-arc has a pointer to itslnode, origin, extremity, and label.We said that an anode has a pointer to the list oflares which it reflects.
However, as will be seen,we must also partition these lares according totheir shared origins and extremities in the lattice.For this purpose, we include the fieldlate.origin.groups in each anode.
Its value isstructured as follows: (((larc larc ...) lnode)((larc larc ...) lnode) ..) Each group (sublist)within larc.orlgln.groups consists of (1) a list oflarcs sharing an origin and (2) that origin lnodeitself.
Likewise, the late.extremity.groups fieldpartitions reflected larcs according to theirshared extremities.During lattice-to-automaton ransformation, it issometimes necessary to propose the merging ofseveral anodes.
The merged anode contains theunion of the larcs reflected by the mergees.When merging, however, we must avoid the gen-eration of strings not in the language of the in-put lattice, or parasites.
An anode which wouldpermit parasites is said to be ill-formed.
Ananode is ill-formed if any larc list in an origingroup (that is, any list of reflected larcs sharingan origin) fails to intersect with the larc list ofevery extremity group (that is, with each list ofreflected larcs sharing an extremity).
Such an ill-formed anode would purport to be an image oflattice paths which do not in fact exist, thus giv-ing rise to parasites.2 The basic a lgor i thmWe now describe our basic transformation pro-cedures.
Modifications permitting the creationof epsilon arcs will be discussed below.Lattice.to.automaton, our top-level procedure,initializes two global variables and creates andinitializes the new automaton.
The variables are*candidate.a-ares* (a-arcs created to representthe current lnode) and *unconneetable.a-arcs*(a-arcs which could not be connected whenprocessing previous lnodes) During automatoninitialization, an initial.anode is created andsupplied with a full set of lares: all outgoinglarcs of the initial lnode are included.
We thenvisit ever)' lnode in the lattice in topological or-der, and for each lnode execute our central pro-cedure, handle.eurrent.lnode.handle.current.lnode: This procedure creates ana-arc to represent the current lnode and connectsit (and any pending a-arcs previously uncon-nectable) to the automaton under construction.We proceed as follows: (1) If eurrent.lnode isthe initial lattice node, do nothing and exit.
(2)Otherwise, check whether any a-arcs remain on*unconnectable.a-arcs* from previous proc-essing If so, push them onto *candidate.a-arcs*.
(3) Create a candidate automaton arc, orcandidate.a-arc, and push it onto *candidate.a-arcs*.
1 (4) Loop until *candidate.a-arcs* isexhausted.
On each loop, pop a candidate.a-arcand try to connect it to the automaton as follows:Seek potential connecting.anodes on theautomaton If none are found, push candi-date.a-arc onto *unconnectable.a-arcs*, oth-erwise, try to merge the set of connect-Ing.anodes.
CWhether or not the merge succeeds,the result will be an updated set of connect-ing.anodes.)
Finally, execute link.candidate(below) to connect candidate.a-arc to connect-lng.anodes,Two aspects of this procedure require clarifica-tion.First, what is the criterion for seeking potentialconnecing.anodes for candidate.a-arc?
Theseare nodes already on the automaton whose re-flected larcs intersect with those of the origin ofcandidate.a-arc.Second, what is the final criterion for the successor failure of an attempted merge among con-necting,anodes?
The resulting anode must notbe ill-formed in the sense already outlinedabove.
A good merge indicates that the a-arcsleading to the merged anode compose a legiti-mate set of common prefixes for candidate.a-arc .link.candidate: The final procedure to be ex-plained has the following purpose: Given a can-didate.a-arc and its connecting.anodes (the an-odes, already merged so far as possible, whose1 The new a-arc receives the label of the \[node which itreflects.
Its origin points to all of that \[node' s incominglarcs, and its extremity points to all of its outgoinglarcs.
Larc.origin.groups and lare.extremity.groups are computed for each new anode.
None of thenew automaton objects are entered on the automatonyet.1206larcs intersect with the larcs of the a-arc origin),seek a final connecting.anode, an anode towhich the candidate.a-arc can attach (see be-low).
If there is no such anode, it will be neces-sary to split the candidate.a-are using the pro-cedure split.a-arc.
If there is such an anode, awe connect o it, possibly after one or more ap-plications of split.anode to split the connect-ing.anode.A connecting.anode is one whose reflected larcsare a superset of those of the candidate.a-arCsorigin This condition assures that all of thelnodes to be reflected as incoming a-arcs of theconnectable anode have outgoing lares leadingto the lnode to be reflected as candidate.a-arc.Before stepping through the link.candidate pro-cedure in detail, let us preview split.a-are andsplit.anode, the subprocedures which split can-didate.a-arc or connecting.anodes, and theirsignificance.split.a-arc: This subroutine is needed when (1)the origin of candidate.a-arc contains both ini-tial and non-initial lares, or (2) no connect-ing.anode can be found whose larcs were a su-perset of the larcs of the origin of candidate.a-are.
In either case, we must split the currentcandidate.a-are into several new candidate.a-arcs, each of which can eventually connect o aconnecting.anode.
In preparation, we sort thelares of the current candidate.a-art's originaccording to the connecting.anodes which con-tain them.
Each grouping of lares then serves asthe lares set of the origin of a new candidate.a-arc, now guaranteed to (eventually) connect.
Wecreate and return these candidate.a-arcs in a list,to be pushed onto *candidate.a-arcs*.
Theoriginal candidate.a-are is discarded.split.anode.
This subroutine splits connect-ing.anode when either (1) it contains both finaland non-final lares or (2) the attempted con-nection between the origin of candidate.a-areand connecting.anode would give rise to an ill-formed anode.
In case (1), we separate finalfrom non-final ares, and establish a new splitteeanode for each partition.
The splittee containingonly non-final larcs becomes the con-neclng.anode for further processing.
In case (2),some larc origin groups in the attempted mergedo not intersect with all larc extremity groups.We separate the larcs in the non-intersecting ori-gin groups from those in the intersecting origingroups and establish a splittee anode for eachpartition.
The splittee with only intersecting ori-gin groups can now be connected to candi-date.a-arc with no further problems.In either case, the original anode is discarded,and both splittees are (re)connected to the a-arcsof the automaton.
(See available pseudocode fordetails.
)We now describe link.candidate in detail.
Theprocedure is as follows: Test whether connect-ing.anode contains both initial and non-initiallarcs; if so, using split.a-arc, we split candi-date.a-arc, and push the splittees onto*candidate.a-arcs* Otherwise, seek a connect-ing.anode whose lares are a superset of thelares of the origin of a -arc  If there is none,then no connection is possible during the cur-rent procedure call.
Split candidate.a-are, pushall splittee a-arcs onto *candidate.a-ares*, andexit.
If there is a connecting.anode, then a con-nection can be made, possibly after one or moreapplications of split.anode.
Check whether con-necting.anode contains both final and non-finallarcs.
If not, no splitting will be necessary, soconnect candidate.a-arc to connecting.anode.But if so, split connecting.anode, s parating finalfrom non-final lares The splitting procedurereturns the splittee anode having only non-finallares, and this anode becomes the connect-ing.anode Now attempt to connect candi-date.a-arc to connecting.anode.
If the mergedanode at the connection point would be ill-formed, then split connecting.anode (a secondtime, if necessary).
In this case, split.anode re-turns a connectable anode as connecting.anode,and we connect candidate.a-are to it.A final detail in our description of lat-tice.to.automaton concerns the special handlingof the flnal.lnode.
For this last stage of the pro-cedure, the subroutine which makes a new can-didate.a-arc makes a dummy a-arc whose (real)origin is the final.anode.
This anode is stockedwith lares reflecting all of the final larcs.
Thedummy candidate.a-arc can then be processedas usual.
When its origin has been connected tothe automaton, it becomes the final.anode, withall final a-arcs as its incoming a-arcs, and theautomaton iscomplete.3 Epsilon (null) transitionsThe basic algorithm described thus far does notpermit the creation of epsilon transitions, andthus yields automata which are not minimal.However, epsilon arcs can be enabled by varyingthe current procedure split.a-arc, which breaks1207an unconnectable candidate.a-are into severaleventually connectable a-arcs and pushes themonto *candidate.a-arcs*.In the splitting procedure described thus far, thea-arc is split by dividing its origin; its label andextremity are duplicated.
In the variant(proposed by the third author) which enablesepsilon a-arcs, however, if the antecedence con-dition (below) is verified for a given splittee a-arc, then its label is instead 7.
(epsilon); and itsextremity instead contains the larcs of a siblingsplittee's origin.
This procedure insures that thesibling's origin will eventually connect with theepsilon a-arc's extremity.
Splittee a-arcs withepsilon labels are placed at the top of the listpushed onto *candidate.a-ares* to ensure thatthey will be connected before sibling splittees.What is the antecedence condition?
Recall thatduring the present ests for split.a-are, we parti-tion the a-arc's origin larcs.
The antecedencecondition obtains when one such larc partition isantecedent to another partition.
Partition PI isantecedent to P2 if every larc in P1 is antecedentto every larc in P2.
And larcl is antecedent tolarc2 if, moving leftward in the lattice fromlarc2, one can arrive at an lnode where larcl isan outgoing larc.A final detail: the revised procedure can createduplicate epsilon a-arcs.
We eliminate such re-dundancy at connection time: duplicate epsilona-arcs are discarded, thus aborting the connec-tion procedure.4 Extended exampleWe now step through an extended exampleshowing the complete procedure in action.
Sev-eral epsilon arcs will be formed.We show anodes containing numbers indicatingtheir reflected lares We show lare.origin.groups on the left side of anodes when relevant,and larc.extremity.groups on the right.Consider the lattice of Arabic forms shown inFigure 3.
After initializing a new automaton, weproceed as follows:?
Visit lnode W, constructing this candi-date.a-arc:?w+The a-arc is connected to the initial anode.Visit lnode F, constructing thisdate.a-are:candi-The only connecting.anode is that con-taining the label of the initial lnode, >After connection, we obtain:W 1Visit lnode L, constructingdate.a-are:this ?andi-Anodes 1 and 2 in the automaton are con-necting.anodes.
We try to merge them,and get:The tentative merged anode is well-formed, andthe merge is completed.
Thus, before connec-tion, the automaton appears as follows.
(Forgraphic economy, we show two a-arcs withcommon terminals as a single a-arc with twolabels.
)1208wI ?Now, in link.candidate, we split candidate.a-arcso as to separate inital larcs from other larcs.
Thesplit yields two candidate.a-ares: the first con-tains arc 9, since it departs from the originlnode; and the second contains the other arcs.@L?
?L?Following our basic procedure, the connectionof these two arcs would give the followingautomaton:However, the augmented procedure will insteadcreate one epsilon and one labeled transition.Why?
Our split separated larc 9 and larcs (3, 13)in the candidate.a-are.
But larc 9 is antecedentto larcs 3 and 13.
So the splittee candidate.a-arewhose origin contains larc 9 becomes an epsilona-arc, which connects to the automaton at theinitial anode.
The sibling splittee -- the a-arcwhose origin contains (3, 13) -- is processed asusual.
Because the epsilon a-arc's extremity wasgiven the lares of this sibling's origin, connec-tion of the sibling will bring about a merge be-tween that extremity and anode 1.
The result isas follows:0 2~ '_  .~2 L??
Visit lnode S, constructing this candidate.a-are:@s@Anode 1 is the tentative connection point for thecandidate.a-are, since its larc set has the inter-section (4, 14) ~qth that of eandidate.a-are'sorigin.Once again, we split candidate.a-are, since itcontains larc 10, one of the lares of the initialnode.
But larc l0 is an antecedent of arcs 4 and14.
We thus create an epsilon a-arc with larc 10in its origin which would connect to the initialanode.
Its extremity will contain larcs 4 and 14,and would again merge with anode 1 during theconnection of the sibling splittee.
However, theepsilon a-arc is recognized as redundant, andeliminated at connection time.
The sibling a-arclabeled S connects, to anode 1, givingVisit lnode A, constructing this candidate.a-areQThe two connecting.anodes for the candidate.a-arc are 2 and 3.
Their merge succeeds, yielding:We now split the candidate.a-are, since it findsno anode containing a superset of its origin'slares: larcs (12, 19, 21) do not appear in themerged connecting.anode.
Three splittee candi-1209date automaton arcs are produced, with threelarc sets in their origins: (5, 18), (12, 19), and(21).
But larcs 12 and 19 are antecedents oflarcs 5 and 18.
Thus one of the splittees will be-come an epsilon a-arc which will, after all sib-lings have been connected, span from anode 1 toanode 2.
And since (21) is also antecedent to (5,18) a second sibling will become an epsilon a-arc from the initial anode to anode 2.
The thirdsibling splittee connects to the same anode, giv-ing Figure 4.Visit lnode N, constructing this candidate.a-are :The connecting.anode is anode 2.
Once again, asplit is required, since this anode does not con-rain arcs 11, 16, and 22.
Again, three candi-date.a-ares are composed, with larc sets (6, 17),(11, 16) and (22).
But the last two sets are ante-cedent to the first set.
Two epsilon arcs wouldthus be created, but both already exist.
Afterconnection of the third sibling splittee, theautomaton of Figure 5 is obtained.?
Visit lnode K, constructing this candidate.a-arc:We find and successfully merge connect-ing.anodes (3 and 4).
For reasons already dis-cussed, the candidate.a-arc is split into two sib-lings.
The first, with an origin containing larcs(15, 16), will require our first application ofsplit.anode to divide anode 1.
The division isnecessary because the connecting merge wouldbe ill-formed, and connection would create theparasite path KTB.
The split creates anode 4 (notshown) as the extremity of a new pair of a-arcsW, F - -  a second a-arc pair departing the initialanode with this same label set.The second splittee larc contains in its originstate lares 7 and 8.
It connects to both anode 3and anode 4, which successfully merge, givingthe automaton of Figure 6.Visit lnode T, constructing this candidate.a-are:The arc connects to the automaton at anode 5.Visit lnode B, making this candidate.a-arc:The arc connects to anode 6, giving the finalautomaton of Figure 7.Conc lus ion  and P lansThe algorithm for transforming lattices intonon-deterministic finite state automata which wehave presented here has been successfully ap-plied to lattices derived from dictionaries, i.e.very large corpora of strings (Meddeb-Hamrouni (1996), pages 205-217).Applications of the algorithm to the parsing ofspeech recognition results are also planned: lat-tices of phones or words produced by speechrecognizers can be converted into initializedcharts suitable for chart parsing.ReferencesAho, A., J.E.
Hopcroft, and J.D.
Ullman.
1982.Data Structures and Algorithms.
Addison-Wesley Publishing, 419 p.Hopcroft, J.E.
and J.D.
Ullman.
1979.
Introduc-tion to Automata Theory, Languages, andComputation.
Addison-Wesley Publishing,418 p.Meddeb-Hamrouni, Boubaker.
1996.
Mdthods etalgorithmes de reprdsentation et de compres-sion de grands dictionnaires de formes.
Doc-toral thesis, GETA, Laboratoire CLIPS,F6deration IMAG (UJF, CNRS, INPG), Univer-sit6 Joseph Fourier, Grenoble, France.1210\[ I'" 19 15 x \ ]Figure 3ZFigure 4z0W,F$~ L , ~  3 Figure 5F W I Figure 6z E | Figure 7W,F "1211
