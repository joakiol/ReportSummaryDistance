D-PATR:  A Deve lopment  Env i ronmentfo r  Un i f i ca t ion -Based  GrammarsLauri KarttunenArtificial Intelligence CenterSRI International333 Ravenswood AvenueMenlo Park, CA 94025 USAandCenter for the Study of Language and InformationStanford University1 IntroductionI)-PATR is a development environment forunification-based grammars on Xerox l i00 series workstations.
It is based on the PATR formalism developed atSRI International.
This formalism is suitable for encodinga wide variety of grammars.
At one end of this range aresimple phrase-structure grammars with no featureaugmentations.
The PATR formalism can also be used toencode grammars that are based on a number of currentlinguistic theories, such as lexical-functional grammar(Bresnan and Kaplan), head-driven phrase structuregrammar (Pollard and Sag), and functional unificationgrammar (Kay).
At the other end of the range covered byD-PATR are unification-based categorial grammars(Klein, Steedman, Uszkoreit, Wittenburg) in which allthe syntactic information is incorporated in the lexiconand the remaining few combinatorial rules that buildphrases are function application and composition.Definite-clause grammars (Pereira and Warren) can alsobe encoded in the PATR formalism.What these approaches have in common is thatsyntactic rules and lexieal entries can be written down assets of attribute-value pairs.
Moreover, because a value atthe end of one path of attributes can be shared by anotherpath, the structures that are generated by such grammarscan be thought of as directed graphs Cdags").
Unificationis the key operation for building these structures.Because unification is associative and commutative,statements in a unification-based grammar formalism areorder-independent and bidirectional with respect toparsing and generation.
For a comprehensiveintroduction tounification-based approaches togrammar,see Shieber 1986 (forthcoming).The idea that led to the present version of D-PATR wasto produce a simple compact system for experimentingwith unification-based grammars that would run onmachines maller than the Symbolics 3600 for which theoriginal t'ATI~ implementation at SRI had been created.The first version of I)-PATR, initially called }lUG, waswritten at the Scandinavian Summer Workshop forComputational Linguistics in Helsinki, Finland, at theend of August 1985.
Although the actual notation forwriting rules in D-PATR in some respects differs from thenotation in the original PATI?
system, essentially bothsystems implement the samegrammar formalism.
Toemphasize this point, the two implementations are nowcalled Z-PATR (Zeta-LiSP PATR) and D PATR (Interlisp-DPATR).
A number of innovations that came in withl) PATR (HUG) have since migrated to Z-PATR.
A case inpoint is the method for minimizing copying in unificationthat is discussed in the section on parsing and unification.Other implementation differences remain--for example,in the parsing algorithm and in the treatment ofgaps--but grammars written for D-PATR are convertibleinto Z-PATR format, and vice versa.D-PATR consists of four basic parts:?
A unification package?
Interpreter for rules and lexical items?
Input output routines for directed graphs?
An Earley style chart parser.These packages are written in simple Interlisp-D fortransportability o other dialects of LISP.
They do notdepend on the features of any particular machine.
Theonly part of D-PATR that is specific to Xerox 1100 serieswork stations is its user interface.
This last set ofroutines takes full advantage of the graphic capabilities74of D-machines.
It  provides good facil it ies for wr i t ing andedit ing grammars  as well as many debugging tools for the, ~rammar  writer.2 Grammar  Formal i sm2.1 RulesA rule in I\]-PATR is a l ist of atomic eot~stituent labelsthat  may be followed by speczfications.
Specif ications areconstra ints  upon one or more const i tuents  of the rule.
inthe s implest  case, there are no specif ications and thelabels correspond to symbols in an ordinary phrasestructure rule.
For example, the ruleS + NP VPin I) PATR notat ion is wr i t ten as(S NP VP)Before a rule is used by the parser, I)-PATI{ compiles itto a feature set.
A feature set can be displayed in di\[ferentways-- for  example, as a matr i?
or as a directed graph.
\[nthis paper, we usual ly represent feature sets as graphsbut the matr ix  notat ion will also be used occasionally.
\[nthese graphs, the const i tuents  of the rule are representedby labeled arcs, called attributes.
The nodes in the graphare values.
A value can be atomic or complex; a complexwfiue is another  set of at t r ibute-va lue pairs.
Byconvention, the symbol on the left-hand side of a phrasestructure rule is represented by the numer ic  at t r ibute  0.Const i tuents  on the r ight -hand side of the rule arenumbered left-to-right, s tar t ing with 1.
The above ruleD PATR represents  as the following feature set, shownhere first as a graph and then as the equiva lent  matr ix.O-- - -cat - -S  0 \ [cat  S\] -i .
.
.
.
.
ca t - -NP  1 \ [cat  <2 .
.
.
.
ca t - -VP  2 \ [cat  VF;\]Ia r i ty - -2  ar  i t,y 2 Itl abe ls  I I - -NP  labe ls  NP- -2 - -VP  Vspecification is a two-item list of the form( { a t t r ibute  I path \] \[ path  \[ va lue  } ).Here attribute is an atom, path is a list, and value ise i ther  an atomic symbol, a l ist of specifications, or anabbreviat ion tbr such a list.
The last case isd ist inguished from the first by pref ixing the value symbolwith (,~) when it has an abbreviatory role.
Ignoring the(?L>cases, this gives four dif ferent k inds of specifications:(attribute vahte), (path value), (attribute path), and (pathpath).
The same feature set can often be specified inseveral  different ways; in choosing one, we general ly tryto minimize the number  of parentheses.Below is a simple example of a phrase structure ruleaugmented  with specifications.
(S NP VP((0 f se t ) (2  f se t ) )((1 f set )  (2 f se t  sub ject ) )((2 f se t  form) f in i te ) )The first specit~cation is an analogue of an I.F'~; T =annotat ion;  the S node inher i ts  its feature set from the VP.In addition, N\[' is VP's subject and vp's feature setcontains the feature \[form: finite\].
I) I'ATI{ compiles thisrule to the following graph.
(From now on, we shal l  omitthe two non-const i tuent  a tr ibutes,  arity and labels, fi-omour display.
)~cat - -SO--  - .
f se t2- -Q  .
/ / fo r i~f in i tefset  ~C.suba~ct"-~ \[ 1As the graph shows, the feature set of the S-node is thesame as VP'S feature set.
The NP const i tuent  has beenunified with the subject in the feature set of the S and thevp.2.2 Specif icat ionsIn the above rule, the cat feature is interpreted by\[) PATR as a const ra int  on the manner  in which theconst i tuent  can be instant iated.
More constra ints  can beadded by annotat ing  the rule with specifications.
AIt is permissible in D p,.\'rR to write rules that  do notassign their  const i tuents  to any specific syntacticcategory, such as S, NP, \'P.
and the like.
The defaultassumption is that  the const i tuent  \[abels also serve asvalues of cat.
By declar ing them to be DummyCategories,the grammar  writer  can override this convention.
The75default  dummy symbols are x, Y, and z. instead of (S NPVP), one could just  as well write(xYz((0 cat) S)(( I  cat) NP)((2 cat) VP)\[t is also legal to leave cat entirely unspecified.
Thisoption is useful for expressing rules of functionapplication and composit ion in lexically-based categorialgrammars .2.3 Words  and  StemsIn its present  form, D-PATR does not have amorphological analyzer  to relate inflected or derivedforms of words to entr ies in a morpheme lexicon.
Alllexcmes must  be entered individually, in ant ic ipat ion ofhav ing a better  solution avai lable in the future, D-PATRpresently splits the lexicon into two parts: words andstems.
The format of the two lexicons is the same, butentr ies  in the word lexicon may contain a reference to anentry in the stem lexicon.
For example, the entr ies foram, are.
ts, was, were, etc.
in the word lexicon can refer tothe entry for be in the stem lexicon.
Consequently,  whatis common to all forms of the auxi l iary can be stated in asingle place.A \[exical entry  is a l ist consist ing of a form and a list ofsubentrtes.
Each subentry  in turn is a list headed by amorphological category and any number  of specifications.A specification can be a two-item list of the type discussedin the previous section or a template.
A template is anabbreviat ion fo ra  l istofspeci f icat ions.
For example, theentry for kisses in the word lexicon might  look as follows:(kisses (g kiss PresTense Sg3)(N kiss PI)).I Iere N and V are used as names of morphologicalcategories; kiss refers to an entry in the stem lexicon;PresTense, S t3  and PI are templates.
The fact that  kiss isa stem and St3  a template is not marked; it is ra therdetermined by where the i r  definit ions are found.
Theentry for kiss in the stem lexicon could be, for example,(kiss (V VMain TakesNP Dyadic)(N)).When the def init ions for kisses and kiss are76interpreted,  the templates and other specif ications thatoccur in the i r  subentr ies  are processed sequent ia l ly  fromleft to r ight.
Each i tem is compiled to a directed graphand superimposed on the graph previously compiled.
Thisoverwr i t ing operat ion differs fl'om standard unif ication inthat  it never fails; if two specif ications give confl ict ingvalues to some path, the later specif ication overrules theearl ier one.
The lexicon writer  can take advantage of thisconvent ion to set up a hierarchical  feature system inwhich init ia l  default  ass ignments  can be overr idden bylater specifications.2.4 TemplatesDefinit ions for templates  have the same format as theentr ies  in the word and stem lexicons except that  thereare no mult ip le subentr ies;  templates are assumed to beunambiguous.
A template definit ion is simply a Listconsist ing of a template name and a number  ofspecifications.
For example, the template names thatappear in the entr ies  for kiss might  be expanded asfollows: (Note that  a specification may be e i ther  atwo-item list of the form discussed in section 2.2 or a nameof another  template,)(V OneBar)(OneBar (barlevel one))(VMain Predicate ( invert ible false))(Predicate ((trans pred) (sense)))(TakesNP ((syncat f i r s t  cat) NP)((syncat rest f i r s t  cat) NP)((syncat rest rest)(syncat ta i l ) ) )(Dyadic ((trans argl)(syncat f i r s t  trans))((trans arg2)(syncat rest f i r s t  trans)))With these definit ions, the verb entry  for kiss in thestem lexicon compiles to the graph shown below.barl evel -- onecat--Vinvertible--falselex~sense ~- - .
-~/pred~kisst rans - -~arg1~arg2"~~a NPsyncat--L ~ / f i r s t - -<~\ - res t - -<  k t rans\t il- --r st\IIThe role of the template TakesNP in this entry is tostate that  the verb kiss requires two NP's as its syntacticarguments .
The f irst e lement  of the list is the value of thepath <syncat f i r s t>,  the second is <syncat res t  f i r s t>.The template Dyadic l inks the two arguments  in thesemant ic  t rans lat ion  of kiss to the t rans lat ions  of itssyntact ic arguments .2.5 l ,ex iea l  Ru lesThe expansion of morpheme def init ions by means oftemplates is a s t ra ight forward matter:  an init ia l  graphacquires addit ional  features and, perhaps, new values forfeatures it a l ready has.
I)-\['A'I'I{ also allows a more radicalt ransformat ion by means of lexical titles.
A lexical rule isa special kind of template with two attr ibutes:  m and out.\[n applying a lexical rule to a graph, the latter  is J\]rstunified with the value of in.
If the operat ion succeeds, thevalue of out is passed on as the result.
Because the valuesunder out cart be l inked selectively to the correspondingvalues under  in, the usual result  of applying a \[exical ruleis a metamorphos is  of the input graph.
As an example.let us consider the graph corresponding to a possiblelexieal rule for Passive in Engi ish.
To make it easier tosee the effect of the rule, the graph is turned aroud so thatthe out values are opposite to the corresponding Ln values;the indeterminates  in the middle are unif ied with theircounterparts  in the word to which the rule is applied.i n -cat l/ c(~t\le_~ \[ / - t,_.x~....... ~ntics--relatior,-fl- ,',d,dion\ \SOMEBODY- -arR!
7 sem(lnticsl-out/The effect of the rule is to make a transi t ive verb losethe object slot in its syntact ic frame, even thoughsemant ica l ly  it remains  a two-place predicate.
Thesemant ic  effect of the rule is to unify arg2 with thesubject's semant ics  and to assign to argl the valueSOMEI}OI)Y.
This is s imi lar  to the analysis  of passives insome LI,'G grammars .2.6 F i l lers  and  GapsConstructh)ns such as the fb\[lowing containconst i tuents  that,  semant ical ly  and syntactical ly,  fill avacant  s lot - -a  gap--somewhere in the adjacent structure.That paper \[ don't  intend to read - - .Good aw)cados are hard to find - - .The neighbor whose car you asked to borrow - -  called.Is this the company the ht.stogr'am of whose productmrtshe wants  to display - - ?From a parser's point of view, there are two mainproblems to be solved.
For the parse to succeed, the fillerneeds to be avai lable when the incomplete structure isencountered.
There must  also be a way to et l sure  Chat adesignated fil ler will be consumed by a gap somewhere.
Ath i rd problem is that,  in relat ive clauses, the filler mustcontain a relat ive pronoun.Many solut ions to these problems have been proposedand could be implemented in D PATR.
As  a convenience,D PAI'It also makes avai lable to the grammar  writer abui lt - in default  mechanism for d is t r ibut ing theinformation about fillers, gaps, and relat ive pronouns inan appropr iate way.
The or iginal  idea, conceived byFernando Pereira,  was implemented for gaps in z PATRby Stuar t  Shieber.
The scheme in I)-t)A'I'R is animprovement  in that  it also handles sentences withnested fi l ler-gap dependencies.77The default  mechan ism uses four special features: gapln,gapOut, relIn and relOut.
These features need to bement ioned explicit ly only in rules that  introduce fillers,such as the relat ive-clause rule, and in the lexical entr iesof relat ive and interrogat ive pronouns.
Other  rules areautomat ica l ly  augmented  by I)-PAI'R in the appropr iatemanner  when they are compiled to feature sets used bythe parser.
By deact ivat ing this facility, the grammarwriter can also take care of fi l lers and gaps in a manner  ofhis own choosing.3 Pars ing  and  Un i f i ca t ionD PATR uses an active chart  parser that  proceeds in atop-down, breadth-f i rst  manner .
Because theconst i tuents  in a rule are feature sets ra ther  than atomicsymbols, the task is a bit  more complicated than ins tandard implementat ions  of Earley's a lgor i thm.
Weconsider two cases here.Let us assume that  the parser is in the process oft ry ing to build an instance of the rule A ~ I~ C and that  ithas successfully instant ia ted B as B'.
At this point, it willenter  a part ial  instant iat ion  of the rule on the chart.
Wedesignate this active edge as A'(B'): C'.
Here the colonmarks  the line between daughter  const i tuents  that  havebeen found and daughters  that  sti l l  need to beinstant iated.
When an active edge is added to the chart,the parser needs to find all the rules that  match the firstun instant ia ted  const i tuent  to the r ight  of the colon.
Inthe case at hand, it needs to match C' aga inst  he left-handsides of all rules to determine what  rules it should now tryto instant iate.
For example, if there is a rule C ~ D in thegrammar  and C is compatible with C', a looping C: I) or C':I)' edge should be added to the chart.In the case of an ordinary phrase-structure grammar ,this match ing  task is simple because const i tuents  arerepresented by atomic category labels.
Fur thermore,  A =A', B = B', and C = C'.
For D PATR, the s i tuat ion is more78complicated.
F i rst  of all, the const i tuents  are feature sets;second, the const i tuents  in a part ia l ly  \ [nstant iated ruleare general ly  not equal to the corresponding const i tuentsin an un ins tant ia ted  rule.
Because of the l inks amongconst i tuents  in a unif icat ion-based grammar ,ins tant ia t ing  B as B' in the rule A -, B C may also have aneffect on the feature sets of A and C. This  is why we labelthe resul t ing edge A'{13'): C'.
Using the feature set C' tofind the rules that  could instant iate  it is no more difficultthan using the or iginal  C, but  it is iess efficient becausethe result  cannot  be saved and reused when anotherinstance of C must  be bui l t  later.l.)
PATR so lves  this problem by carry ing the or iginalrule along with its part ia l ly  instant iated form on activeedges.
The match ing  task for the prediction step ofEar ley's  a lgor i thm is performed using the const i tuentfrom the original rule ra ther  than its current  instance.A s imi lar  problem arises when an inactive edge isentered on the chart.
When the parser has instant ia ted Cas c:" and entered it on the chart,  it has to find all theincoming active edges at the start ing vertex of C" thatcould be extended with the newly found const i tuent.
If('"were :m atomic symbol, this task would be simple becauseit would involve only simple equal ity checks: because C" isa feature set, we would have to use unif ication, which is amore t ime-consuming operation.
I) PATR avoids theproblem ent irely by keeping track, as part  of theprediction step, of what  edges C" could be used to extend.When an active edge is entered on the chart ,  one piece ofinformation in the edge label is a pointer to the edges thatcould be extended with it.
Init ial ly, the list contains onlythe edge that  generated the new edge; other  edges may beadded later.
This information is passed along onwhenever  an exist ing edge is extended to a new one.
Atthe point at which C" is added to the chart,  no checks arenecessary because the new edge already has a pointer toevery incoming edge at the s tar t ing vertex that  can nowperhaps be extended.Let us now consider a situation, in which the chartcontains two adjacent edges A'(B'):C' and C".In the course of trying to extend the the active edgewith C" to build A", the parser has to unify it with the C"constituent of the active edge.
The nature of chartparsing is :inch Chat, whether or not this unificat, ionsucceeds, it must not alter the contents of the two operandedges.
Both A'IB'):C' and C" must remain on l, he chartbecause they may be needed later on for some otherunification.Because unificaLion is a destructive operation, some ofthe earl ier implementations of unification-based chartparsing, e.g.
Z-PATR, never apply it directly, instead, thefeature sets are first copied and unil ication is then appliedto the copies.
In this way, the operands are leftuntouched, us the parsing algorithm requires, but t.hemethod is computationally inefficient because it involvesa great deal of copying.
1) PATI{ solves the problem in anovel way.
In \[)-PATR, unification is implemented so thatthe original state of the input structures can be restoredafter the operation has been completed.
Whenever adestructive change is about to be nmde in the value of anattribute, the eell and its contents are saved in an array.After unification, all the effects of the operation can beundone by restoring the saved values.
I) PATI{ takesadvantage of this option in the following way.When the.
parser tries to extend A'(B'): C' to A" byunifying C' with C", the operation is applied directly to thetwo feature sets without them being copied in advance.
Ifthe unification fails, its effects are simply cancelled byrestoring the original feature sets from the save array.
Ifthe operation succeeds, the result ing structure is copiedand then the original feature sets are then restored.
Thecopied result remains of course unaffected by thecancellation.
The following sketch summarizes thedifference between I) PATI{ and earl ier versions of Z.PATRwith respect to copying and unification.
Here X and vstand for the original feature sets, z for the result, and thecopied structures are identified with primes.Z-PATR (OLD)?
-~-~ x'Y {opt> ?
'D-PATRxrestore Xun i fy  ~> Z copy -~, Z'y restore YAs the i l lustration shows, the new me~,hod entailsmaking only one copy, not two, when the operationsucceeds.
In the event of failure, 1) I'ATR simply restoresthe original structures without copying anything; the oldmethod always copies both input structures.In the case of Z-PATR, the new method has shortenedparsing times by a factor of three.
It is expected that thistechnique can be further improved by hnplcmenting somefmm of structure sharing \[Karttunen :~nd Kay 1985;Pereira 1.9851 to minimize the need for copying.4 Conch ls ionUnlike some other grammar developmentsystems--for example, Ronald Kaplan's IA,'(~ GrammarWriter's Workbench \[Kiparsky 84\]--I)-PATR \[S not animplementation of a particular linguistic theory.
It isdesigned to be an efficient generic tool for expJoring a,'ange of grammar formalisms in which unit~cation playsa central role.
Because of its fl'iendly interface anddisplay facilities, I)-PA'rR can also be used for educationalpurposes, in partieular, to demonstrate chart parsing andunification.I)-PATR is not a commercial product.
It is madeavailable to users outside SRI who might wish to developunification-based grammars.
I)-I'ATR is currently beingused for grammar development at s\['d International.
('5LI.and Xerox I'AIIC.
For a more comprehensive discussion ofI) PATI{ and its features, see Karttunen (forthcoming).79AcknowledgmentsI)-PATR is  a close relative of Z-PATR, the first I'ATRimplementation, whose main architect is Stuart Shieber.Many of the ideas in D-PATR come from the work of RonaldKaplan, Martin Kay, and Fernando Pereira.
The matrixdisplay package for feature sets in D-PATR was written byPer-Kristian Halvorsen.
I would also like to thank AnnieZaenen and Hans Uszkoreit for their help in designingthe system.This research, made possible in part by a gift from theSystem Development Foundation, was also supported bythe Defense Advanced Research Projects Agency underContract N00039-84-C-0524 with the Naval ElectronicsSystems Command.ReferencesKaplan, R. and J. Bresnan, "I,exical-functional grammar:A Formal System for Grammatical Representation,"The Mental Representation f Grammatical Relations,J.
Bresnan, ed., MIT Press, Cambdridge,Massachusetts, 1983.Karttunen, L. and M. Kay, "Structure Sharing withBinary Trees," Proceedings of the 23rd AnnualMeeting of the ACL, Association for ComputationalLinguistics, 1985.Karttunen, L. D-PATR: A Development Environment forUnification-Based Grammars, CSLI Report, Center forthe Study of Language and Information, Stanford,California (forthcoming in 1986).Kay, M., "Parsing in Functional Unification Grammar,"Natural Language Parsing, D. Dowty, L. Karttunen,and A. Zwieky, eds., Cambridge University Press,Cambridge, England, 1985.Kiparsky, C. "LFG Manual," manuscript, Xerox Palo AltoResearch Center, Palo Alto, California (1985).Pereira, F. C. N., "A Structure-Sharing Representationfor Unification-Based Grammar Formalisms,"Proceedings of the 23rd Annual Meeting of the ACL,Association for Computational Linguistics, 1985.Pereira, F. C. N. and D. H. D. Warren, "Definite-ClauseGrammars for Language Analysis--a Survey of theFormalism and a Comparison with AugmentedTransition Networks," Artificial Intelligence,13:231-278, 1980.Pollard, C., Generalized Phrase Structure Grammars.Head Grammars, and Natural Languages, Ph.D.dissertation, Stanford University, Stanford, California(1984).Pollard, C., Lecture notes on head-drivenphrase-structure grammar, Center for the Study ofLanguage and information, unpublished (February1985).Shieber, S. M., H. Uszkoreit, F. C. N. Pereira, J. J.Robinson, and M. Tyson, "The Formalism andImplementation of PATR lI," Research on InteractiveAcquisition and Use of Knowledge, B. Grosz and M.Stickel, eds., Sill Final Report 1894, SRI International,Menlo Park, California, 1983.Shieber, S. M., L. Karttunen, and F. C. N. Pereira, Notesfrom the Unification Underground: A Compilation ofPapers on Unification-Based Grammar Formalisms.Technical Report 327, Artificial Intelligence Center,SRI International, Menlo Park, California (June1984).Shieber, S. M., An Introductton to Untficatton-BasedApproaches to Grammar, CSLI Lecture Notes Series,(University of Chicago Press, Chicago Illinois,forthcoming in 1986).Steedman, M., "Combinators, Categorial Grammars, andParasitic Gaps," paper presented at the TucsonConference on Categorial Grammar (June 1985).Uszkoreit, H., "On Categorial Unification Grammars," inthis volume.Wittenburg, K., Some Properties of CombinatoryCategorial Grammars of Relevance to Parsing.Technical Report HI-012-86, Microelectronics andComputer Technology Corporation, Austin, Texas,(January 1986).80
