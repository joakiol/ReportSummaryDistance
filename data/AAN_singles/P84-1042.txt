Pane l  on Natura l  Language and  DatabasesDaniel P. FlickingerComputer  Research CenterHewlett-Packard Company1501 Page Mill RoadPalo Alto, California 94304 USAWhile I disagree with the proposition that  databasequery has outlived its usefulness as a test environment fornatura l  language processing (for reasons that  I give below),I believe there are other reasonable tasks which can alsospur new research in NL processing.
In particular, I willsuggest hat  the task of providing a natural  language inter-face to a rich programming environment offers a convenientyet challenging extension of work already being done withdatabase query.First I recite some of the merits of continuing researchon natura l  language within the confines of constructing aninterface for ordinary databases.
One advantage is that  thespeed of processing is not of overwhelming importance inthis application, since one who requests information froma database can expect the retrieval to take time, with orwithout a natural  language interface.
Of course speed isdesirable, and waiting for answers to apparently simple re-quests will be irr itating, but some delay will be tolerable.This tolerance on the part of the user will, I suggest, dis-appear in applications where an at tempt  is made to engagea system in dialogue with the user, as would be the casein some expert systems, or in teaching systems.
Assum-ing that  natura l  language systems will not by themselvesget faster as they are made to cope with larger fragmentsof a natural  language, it will be useful to continue withdatabase query while we wait for miracles of technology tofill our demands for ever greater processing speed.A second reason for not yet abandoning the databasequery as a test environment is that  a great deal of importantnatura l  language processing research remains to be done ingeneralizing systems to cope with more than one naturallanguage.
Work on language universals gives reason to be-lieve that  some significant part  of a natural  anguage systemfor English should be recyclable in construct ing a systemfor some other language.
How much these cross-linguisticconcerns ought to affect the construct ion of a particularsystem is itself one of the questions deserving of atten-tion, but our experience to date suggests that  it pays toavoid language-part icular solutions in an implementationwhich aspires to t reatment of any sizable fragment of a lan-guage, even a single language like English.
The degree oflanguage-independence that a natural  language system canboast may also prove to be one useful metric for evaluat-ing and comparing such systems.
\[t seems clear that  eventhe task of answering database queries will provide a morethan adequate supply of linguistically interesting problemsfor this line of research.Finally, it has simply not been our experience atHewlett-Packard that  there is any shortage of theoreticallyinteresting problems to solve in construct ing a natural  lan-guage interface for databases.
For example, in building suchan interface, we have recently designed and implemented ahierarchically structured lexicon for a fragment of English,together with a set of lexical rules that  can be run eitherwhen loading the system, or when parsing, to greatly ex-pand the size of the lexicon actually used in the system.Several questions of theoretical interest hat  arose in thatprocess remain unanswered; at least some can be answeredby experimenting with our present system, functioning sim-ply as an interface to an ordinary relational database.Having argued that  significant work remains to be donein natura l  language processing as an interface to databases,I nonetheless believe that  it would be fruitful to expandthe scope of a natural  language interface, to permit somemanipulat ion of a programming environment,  allowing notonly the retrieval of information describing the state of thesystem, but also some modification of the system via nat-ural language.
Of course, such a task would be facil itatedby having the information about the environment stored ina manner  similar to that  of a database, so that  our atten-tion could be devoted to the new range of linguistic issuesraised, rather  than to details of how the whole program-ming environment is structured and maintained.
I will notoffer an account of how such a merging of database andgeneral programming environment might be accomplished,but instead will offer some motivation for stretching naturallanguage research in this direction.It seems clear, first of all, that  such an interface wouldbe useful, given that  even a common programming envi-ronment provides a wide array of tools, not all of whichare familiar to any one user.
While it is usually the casethat  one who is accustomed to a given facility would behampered by having to employ only a natural  language in-terface to accomplish familiar tasks (e.g., imagine typing"Move down to the beginning of the next line" every t imea carr iage-return was required), such an interface wouldbe invaluable when trying to utilize an unfamil iar part ofthe system.
A related benefit would be the ability of auser new to a programming environment to customize thatenvironment without any detailed knowledge of it.
This in-direct access to the mult i tude of parameters that  determinethe behavior of a complex environment would also be con-venient for an experienced user attempt ing to alter some188rarely-changed aspect of the environment.
Such a naturallanguage interface might also cope with "how to" questions,at least serving as another link to on-line documentat ion.The linguistically interesting issues that  such an ex-tended interface would raise include a greater need forsome language product ion capabil ity (where the ordinarydatabase query system can get by with only language un-derstanding),  and a greater need for some discourse repre-.sentation.
I suspect hat  some new syntactic onstructionsmight also appear,  rare in a database application but morecommon in programming applications.Using an extended interface of this kind, some dialoguebetween the user and the system would be useful, especiallyin cases where a request was too vague, and the system (likean expert system) could present a series of choice pointsto the user in order to reduce the original request to amanageable one.
Presenting these choices would providea convenient forum for research in language production,while suffering the disadvantage mentioned above of forcingus to worry more about the speed with which the systemperforms.Issues concerning discourse representation could bestudied with this kind of task in a fairly natural  way, sincequestions about  a programming environment would haveto do in part  with the changes taking place during a ses-sion, so that  the system would want to keep track of at leastsome history of a session, both previous events and previousdiscourse.
In addit ion to providing a testbed for discourse-.related research, a system like this would also offer a goodsett ing for study of tense and aspect issues which are notso readily raised in a simple database query application.A final advantage of extending a natural  anguage inter-face to include the programming environment is that  if theinterface were being developed in such an environment, onecould use natura l  language to develop the natural  languagesystem itself, a property that  would be not only useful butalso elegant.189
