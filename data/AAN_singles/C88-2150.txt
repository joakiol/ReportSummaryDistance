Generat ion  as  S t ruc ture  Dr ivenDer ivat ionJ i i rgen  Wedek indIns t i tu te  for  Natura l  Language Process ingUn ivers i ty  of  S tut tgar tFRGAbstractThis paper describes two algorithms which construct two differ-ent types of generators for lexical functional grammars (LFGs).
Thefirst type generates sentences from functional structures and the sec-ond from semantic structures.
The latter works on the basis of ex-tended LFGs, which contain a mapping from f-structures into seman-tic structures.
Both algorithms can be used on all grammars withinthe respective class of LFG-grammars.
Thus sentences can be gener-ated from input structures by means of LFG-grammars and the samegrammar formalism, although not necessarily the same grammar, canbe used for both analysis and synthesis.1 In t roduct ionUsing the same grammar formalism, or even the same grammar, for bothanalysis and synthesis is usually regarded as an elegant, efficient and some-times even as the psychologically most plausible approach to natural an-guage parsing and generation.
In this paper we want to show that thisapproach can be realized within the LFG-framework by defining two gener-ation algorithms.
1 The first permits the construction ofgenerators for LFGswhich generate sentences from fimetional structures.
The second constructsgenerators which generate sentences from semantic structures.Both algorithms are based on concepts of derivation for LFGs whichcan he strengthened in such a way that the derivation can be driven by agiven input structure.
The principles which underlie the control mechanismsfor the derivation arc sufilciently general to also be applicable to otherunification based formalisms which allow the derivation of functional and/orsemantic structures in parallel to constituent s ructures (e.g.
PATI~ (of.
e.g.\[Shieber 831, \[Karttunen 861) .For the generation from semantic structures, a derivation concept ofthis type can be defined, if, following a proposal by Halvorsen and Kaplan(cf.
\[Halvorseu 87\], \[Kaplan 87\]), projector equations are used to describe(co-describe) the semantic structure of a sentence.
Since the projector mech-anism is independent of the specific type of semantic theory, the algorithmworks as long as this mechanism is used to build up semantic representa-tions.In addition, the derivation driven by the semantic structure can be di-rected by constraints over the f-structure.
Usually, semantic informationby itself is regarded as providing a basis for generation which is too weakto capture relevant distinctions in the surface form.
This additional mech-anism could contribute to make the generation more sensitive to syntacticand pragmatic information.
Thus, additional fimctional information canenforce a specific syntactic realization, such as passivization, topicalization,extraposition or discontinuous realization of constituents.It should be clear that the specific constraints which have to be or canbe imposed on this kind of generation are subject to empirical studies onquestions of syntax, discourse and dialogue.
2 Similarly, for machine trans-lation, one will need interlingual comparative r search on these subjects toestablish what relevant functional information can be drawn directly fromthe f-structures of the source text, in order to guarantee a coherent targettext.
These important empirical questions will not be addressed irectly inthis paper.
We consider it an essential requirement for an adequate gen-eration algorithm, however, that it provides the respective possibilities ofcontrol.2 Generat ion from functional structuresIn this section we describe an algorithm which constructs a generator foran arbitrary given LFG 3 which generates terminal strings from functionalstructures.
4 Such an algorithm has to define for every LFG a relationF?
(~,s)  (s is generable from (I)) between directed acyclic graphs (DAGs)and terminal strings.VCeDAG VseV,~ (r,/,(##, s) / f ie( .
.
.
{ .
.
.
.
.
))Depending on what the adequacy condition C( .
.
.
4~, s .
.
. )
for this relationis, one will get different adequacy criteria for possible explications of what'generation' can mean within the LFG-framework.
We started from the- perhaps too idealized - condition that is normally used for the relationbetween strings and f-structures At ,  specified by an adequate parsing algo-rithm for LFG.
sV~,eDAG VseV~,(A?
(s, ~) iffs is derivable from the start symbol S ands has f-structure (I))If we use this condition and insert it into the schema C( .
.
.
q~, s .
.
. )
,(*) V(~eDAG VseV~(F?
(?, s) iffs is derivable from the start symbol S ands has f-structure ~)then the relation ~X~ is simply defined inversely by an adequate generationalgorithm (F~ 1 = At  and also A~ 1 = F?).
This means that a generatorfor an LFG G must accept an input structure (I) by building up a strings, iff s is derivable with f-structure (P in G. Thus, the generator for anLFG constructed bythc  algorithm which satisfies this condition is simply aparser or transducer for the set of well-formed f-structures, which constructsfor an input structure the set of all sentences which have this structure astheir f-structure.
This implies that the generator produces no output, if theinput structure is not a well-formed f-structure.2 .1  Der ivat iona l  backgroundThe algorithm can he based on derivation concepts for LFGs which can bestrengthened in such a way that the derivation can be driven by an inputstructure (structure driven derivation), tIowever, the derivability conditionsformulated in \[Kaplan/Bresnan 82\] cannot he used directly.
According to\[Kaplan/Bresnan 82\] a terminal string s is regarded as well-formed iff itsatisfies the following conditions:(WFF)1.
There is a c-structure c for s that can be derived by the context-freebase of the grammar.2.
There is an f-structure ~ and a mapping ?
from the c-structure nodesto the nodes of ?
such that q' is the unique minimal f-structure thatsatisfies the annotations associated with the e-structure nodes.
(Thef-description solution algorithm (fds-algorithm) constructs both ?
and ~.)~3.
All constraints in the f-description are satisfied by ?.4.
(~ is complete and coherent.These conditions are tested in the following order: 1.
-< 2.
-< 3.,4.. Thus,if the f-structure is built'up after the derivation of the e-structure, ~ it is im-possible to use the functional information contained in an input structure forthe control of the derivation of the c-structure.
A decidable generation pro-cedure presupposes the possibility of comparing the input structure withthe partial f-structure of a derived partial e-structure.
Thus, in order todrive the c-structure derivation by a given input structure it is necessary toderive the partial f-structure in parallel to a partial c-structure.
This meansthat one can use only those derivation concepts which make f-descriptionsolutions for partial c-structures available in each step of the derivation.The concept on which the following algorithm is based is described in moredetail in \[Wedekind 86\].
According to this concept, a derivation is a se-quence of quadruples (e, (I), ?, C% Each quadruple consists ofc a partial c-structure,q~ a partial f-structure,?
a mapping from the c-structure nodes into the set of nodes of (~, andC ?
a constraint set.(?
and ?
would be the result of the fds-algorithm if it were applied tothe corresponding annotated c-structure.
C ~ corresponds to.
tile set of in-stantiated constraining equations contained in the f-description of c. Seethe example in fig.
1.)
I follow the usual convention of identifying the c-structure nodes with sequences of integers.
The linear order of the edgesof a tree is normally encoded by numbering the arcs, and every node isidentified with the sequence of integers numbering the arcs along the pathfrom the root to that node.732c 4 4) C+Fig.
1The corresponding annotated c-structure is derivable by the follow-ing rules:S --~ NP VP VP -* V VP'(1 SUBff) = I ~ = I t = I (t VCOMP) = 1The initial quadruple consists of an S-labeled root node cs, an f-structureroot node 4)s, to which the S node is mapped by ~s  and an empty con-straint set C~.
(es, 4)s,?~,c::~) cs Cs 4)s c.$#o - - - * .A grammar rule also introduces a quadruple.v - -  (~,, 4),.,,V, c,.
*)The time(tonal part (4)r,qF) is obtained by applying the fds-algorithm tothe annotated local tree represented by the rule, and by instantiating themetavariables in the constraining equations with the node indices of thelocal tree introduced by the rule.
(The constraint set of a rule contains theconstraints of the f-description of the local tree.)
Fig.
2 gives an example.{(?
NUM)=?
(0 $UBJ NUM)}PREDVo -~-~- - -  O OThis quadruple corresponds to the rule:v ~ tries(1 PRED) = try(SUBJ,VCOMP)(l suBJ) = (T veorcw suBJ)(i" NUM) =?
(~" SUBJ NUM)Suppose that we have derived from the initial quadruple the quadruple givenin fig.
1; then we can apply the V-rule, since the leaf 2.1 is labeled withV.
The derived quadruple (d, 4)', ~b ~, C ~)  consists of a e-structure which isthe result of expanding 2.1 by or.
The partial f-structure 4)~ is the minimalextension of 4) which results from 4) by unifying the DAG (I) r introducedby the rule with the substructure rooted by qt2A.
Since the new DAG 4)Jis a homomorphie extension of 4), the values of ~b * for the old nodes (of c)are given by 5 and the homomorphism.
The values of ~J for the new nodesresult from ~b ~ and from the value of ~b for 2.1 (of.
the definition below)?C ?~ contains besides C ~ (which is empty) the constraint (2.1 NUM)=~(2.1SUBJ NUM) which is con.structed from (O NUM) =c (0 SUBJ NUM) byattaching 2.1 ;Is a prefix to each node index within that constraint.
Theresult is the constraint set of the f-description of the derived tree.
Fig.
3illustrates the result of the rule application.c' ?, ~b' C?'(2.
!tries2.1A Pig.
3If we reconstruct directed labeled connected rooted aeyelic graphs (DAGs)as transition graphs of connected rooted acyelic finite state automata, whoseleaves (states without leaving transitions) are labeled by a partial functionrrt with atoms of a set A (4) = (Q,L,6, qo,A,m)), s then we can state thedefinition of the derivability relation A~ as follows.DEFINITION 2.1 A terminal string s is derivable with f-structure 4)1(A?
(s, 4)I)) i~there is a sequence wo...  wn such that- coo = (cs, 4)s, ~s, C~) and- for all wi = (c, 4), ~b, C*), wi+l = (c', 4)', ~b', C ~') (0 < i < n) there is arule V -~ {e~, 4).
~, Ct) and- V i sa labe lo fa lea fpofc- d is the result of expanding # in c by er- 4)~ is the minimal extension of 4) which results from 4) by unifying4)r with the substructure ooted by ?~- i fv is anode oft ,  whose c-value is ~*(qo,P) in 4), then its ?Cvalnein ~' is ~*(q'o,P)if/~.J is a node of c', not contained in c, the value of q~ is 6~* (q~, q)and the value of q~ for p is 6*(qo,P), then the value of qV for ,~.jis 6'*(qto,p.q) in 4)'- C ?'
contains besides C ?
the constaints (#.j p) =c (#.i q) etc)for all (j p) =~ (i q) etc.
in C~- s is the terminal string of the c-structure ofw,~- 4)1 is equal to the DAG ofw,  (q~,)- 4),~ satisfies all constraints in C,~- 4), is complete and coherent, t?2 .2  Generat ion  as  f - s t ructure  dr iven  der ivat ionIll principle we could use this derivation concept for generation if we substi-tuted the DAG in the initial quadruple by an input structure and mappedthe S node to the root of the input structure.
IIowever, such a conceptof generation would not satisfy the adequacy condition mentioned above.The derivation would not be adequately controlled by tbe input structurebecause it is not guaranteed thati) the information contained in the input structure is completely derivedandit) no additional information is introduced uring the derivation.It is possible, for example, to derive additional adjuncts or not to derive alladjuncts represented in the input structure.
Due to tbe unification part ofthe derivation process, it is only guaranteed that the f-structure of the gen-erated sentence is compatible with the input structure.
The requirementsi) and it), which will be referred to as completeness and coherence, n showthat the input structure is in fact a complex constraint with a positive and anegative part.
The positive part (compleleness), which requires that the in-put structure (4)in) is subsumed by the derived structure (4),) (4)i,, E 4),),can be made explicit by two kinds of constraints: existential constraints,which demand thatCOMPa: all paths of the input structure are derived,and reentrancy constraints, whicb demand thatCOMPb: all reentraueies of the input strneture are derived) 2Tim negative part (coherence) which demands thatCOH: the derived structure is subsumed by the input structure (4),, L (bl,)ensures that the f-structure of the generated string is the unique minimalstructure that satisfies the completeness constraints expressed by the inputstructure.?
The central problem of generation designed o.s structure driven deriwvtion is the control of the fidfillment of these conditions.
Since this problemalso occurs within other formalisms which build up DAG-strnctures duringthe derivation process, the solutions proposed here for LFG can also beapplied in more or less the same way within the other formalisms.i.)
COMPb.
This condition is controllable if the input structure (I)i~is unfolded.
The functional structure of the initial tuple is then an un-ordered tree 4)t. Since the input structure is a (homomorphic) extensionof the unordered tree (4)t ~ chin) and both structures have the same pathset, the relating homomorphism is an 'onto'-mapping and therefore calledepimorphism.
Part B of fig.
4 gives an example.
13Now, since coherence has to be ensured during generation, the derivedstructure will never become an extension of the input structure and eachgeneration step induces a new epimorphism frmn the derived structure tothe input structure.
The coherence condition guarantees that the epimor-phisms induced in the generation steps always approximate an isomorphism.When the derived structure and the input structure are isomorphic, all rcen-trancies are derived.it.)
COMPs.
The fnlfillment of this condition can be controlled, if, apartfrom the root, all nodes of the DAG introduced by a rule are labeled by a'+'-marker.
This additional labeling distinguishes the generator rules fromthe grammar ules.
Fig.
5 shows the generator rule corresponding to thegrammar rule of fig.
2.
If the root of the unordered tree 4)~ is also T-labeledand all nodes of the strncture that is derived from 4)( are +-labeled, thenall paths of the input structure are derived) 4 The condition that all leavesof a well-formed f-structure are labeled by atomic values ensures that allatomic values of the input structure are derived.733h ~:C ~ ~ r / J ohn  / ~ -  ~ John \Sotry{S,V)AI SFig.
4Fig.
5 'iii.)
COIt It is possible to check this condition in each step of the deriva-tion since the input structure is accessible by the epimorphism induced ineach particular step.
It is guaranteed that no additional information is in-troduced by the rule application, if the substructure to which the expandedc-structure node is mapped by ?
and the epimorphism h ~ is (asid e from the+-labels) an extension of the DAG introduced by the rule.
1~If, for example, the constellation shown in fig.
4 (A and B) is generatedand the rule in fig.
6 were to be applied to node 2.2, condition COtI will beviolated, since the substructure rooted by h~(~b~.2) is not an extension ofthe (unlabeled) structure introduced by that rule.
On the other hand, thesubstructure ooted by h ?
(?2.~) is an extension of the (unlabeled) structureintroduced by the V-rule of fig.
5 and fulfills COH with respect o node 2.1.v m ~ ~ oFig.
6 iSince the (functional) structure which is to be derived from &~ is equal(or isomorphic) to the input structure itself, it is possible to check- the f-completeness and f-coherence of the input structure before thegeneration starts, and- the constraints expressed by the rules simultaneously during the gen-eration.Although the V-rule would satisfy the coherence condition with respectto node 2.1, its application is ruled out, since the substructure rooted byh?
(?2.1) does not satisfy the constraint expressed by the rule.
is Thus, thesequence of tuples which constitute the generation of a terminal string neednot contain a constraint set.The start entity of a generation is then a quintuple/c~, ~,, ?~, ~,., h~).~in is an f-complete and f-coherent input structure, ?~ is the unfolded inputstructure and h~ is the relating epimorphism.
The fleaerabillty relation F~is then defined as follows./~DEFINITION 2.2 A terminal string s is gencn~ble from an input structure~n (r?
(~b~n, s)) iffthere is a sequence We...wn such thato Wo = (cs,~,?S,?~,h~s) ando for allw~ = (c ,~ ,~,~,h~) ,  w~+~ = {d,~b',~',~n,h ~')(0 <_ i < n)there is a generator rule V --* (cr, ~r, ~r, C~) and- V is the label of a leaf/~ of co the substructure rooted by h#(~b~)is (aside from the +-labels)an extension of ~o for all ( j  p) =~ (i q) etc.
in C~, 6~,, (h4'(~bp.j), p) = $~(h~(?,.i), q)etc.,734- c p is the result of expanding p in e by cr- ~' is the minimal extension of @ which results from ~ by unifying?
r with the substructure ooted by.
~bp- if ~ is a node of c, whose e-value is ,5*(qo,p) in ?, then its ~.bt-valuein q,' is ~'*(qto,p ).if p.j  is a node of c I, not contained in c, the value of ?~ is ~* (q~, q)and the value of?
for p is 6*(qo,P), then the value of ~t tbr #.jis t~'*(qto,p.q) in @'.o VpeL*((q~o,p)eDom(~ I*) ~ h~'J(61*(q~,p)) = 6*n(q~On,p))O each node of the functional structure ~n of w. is +-labeledo ?
.
is isomorphic to ~{n (h~ is an isomorphism)- s is the terminal string of the c-structure ofwn.Lemma 1 follows from the above.LEMMA 1 V~'eDAG Vsev~(r~(~, s) ~ A~(s, ~))This lemma can easily be proved, since in each step of the generation ofa sentence the applied rule can be applied exactly in the same way in thecorresponding derivation step of a derivation of that sentence (and viceversa).
So the substructure which includes all +-labeled nodes of a gen-erated functional structure corresponds exactly to that partial f-structurewhich is derived up to that step (and vice versa).
Thus, the derived c-structure is identical to the generated c-stmcture, the derived f-structureis equal to the generated f-structure and thus identical (isomorphic) to theinput structure.
Since the constraints in the constraint set of a derivationmust in fact be the (instantiated) constraints of all rules applied duringthe generation, the input structure satisfies all constraints iff the derivedstructure does.3 Generat ion  f rom semant ic  s t ruc turesIn this section we use the ideas described in section 2to develop an algorithmthat constructs generators which generate terminal strings from semanticstructures.
These ideas are applicable if we can ensure, thata) the semantic structures are representable as DAGe,b) the only operation which is used to construct the semantic structuresis the unification operation, andc) the semantic structure of a sentence can be built up simultaneouslywith the derivation of the c- and f-structure of that sentence.That a) and b) can be ensured for most of the current semantic theories,like Montague Semantics ~MS), Discourse Representation Theory (D1Tr)and Situation Semantics (as), is illustrated, for example, in \[Reyle 88\] (MS,Dffr), \[Halvorsen 87\] (SS) and in works concerning eategorial grammarswhich are augmented by a unification component.
IsC0ndltion c) is satisfiable if we follow a proposal by Halvorsen who de-scribes a possible xtension of LFGs such that the semantic representation fa sentence can he "simultaneously described (co-described) with the func-tional structure" (\[Halvorsen 87\], p.9).
Halvorsen extends the formalismto include a new type of equation, which is used to build up a semanticrepresentation a d establishes an additional (partial) mapping from the f-structure nodes into the node set of the semantic structure.Since the semantic structures are represented as DAGs, we can use forthe generation from semantic structures, a condition llke (*) as an adequacycondition, which refers'to asemantic (a-) structure instead of an f-structure.
(**) VI?,eDAG VseV~ (r~ (~, s) iff s is derivable from the start symbol S ands has a-structure ~)Since this condition implicitly assmnes that F~ -1 is determined by an ad-equate parsing algorithm, this extension of the formalism is neutral withrespect o the problem of the creativity 19 of the extension.
This neutralityis desirable, since the algorithm should be definable independent of a specificsemantic theory.
The question whether a semantic omponent is (or shouldbe) a creative or a conservative extension oftbe syntactic theory (LFG), onthe other hand, depends crucially on the specific semantic theory and onthe format of the rules which prescribe how the compositionality principlesof the chosen theory are to he translated into this new .type of equation.According to condition (**), the generator constructed by the algorithmfor an (extended) LFG is a parser or transducer for well-formed semanticstructures which, in principle, constructs for an input structure all sen-tences which have this structure as its semantic structure, analogously tosection 2.
A semantic structure alone, however, is usually regarded as toopoor with respect o the syntactic information relevant for 'adequate gen-eration results' within a natural anguage system.
We therefore integratethe additional possibility of driving the derivation by syntactic (functional)information.
This is possible because the f-structure of a sentence is builtup in parallel to the a-structure driven derivation of that sentence.
If we as-sume that sentences % and f-structures @i are related to an input structureaccording to the following schema:~)1~%~h/ .
\\///gnkv~e can enm~re by additional constraints on the f-structures that only thosesentences are generable whose f-structures satisfy these constraints.
Thus,we can drive the derivation in a way which is more sensitive to syntacticinformation.
We can ensure, for example, that only a pusive realization ora realization with a specific topic/focus tructure is generable.
Since notevery input structure has a surface realization with an f-structure that fulfillsthese additional constraints, these constraints can be highly creative from aformal point of view.
Therefore, a generator which drives the derivation bya semantic structure with additional constraints and also satisfies condition(**), must be capable to loosen the f-structure constraints if no outputsentence can be derived wh~e f-structure satisfies the constraints, i.e., todrop constraints successively until an output sentence can be derived.
Thecontrol of such a dropping procedure is again dependent on the applicationdomain us and can be determined only by empirical investigations.3oi  The  der ivat ion  o f  semant ic  s t ruc turesAccording to I\[alvorsen's proposal, the semantic structures are con-sh'uctable by means of additional equations which are formulated with aprojector a which "can be prefixed to any expression denoting a functionalstructure" (\[Halvorsen 87\], p.8).
Fig.
7 A gives a slightly simplified exampleof a lexical entry from \[Halvorsen 87\], written as the expansion of a lexicalcategory symbol.v ~ kicks ~ ~ t r  ~-~(1 PRED) = kick' Vo((~, 1) Aam)  = (,, <t SUBJ)) ',.
.
, : ,((# i.)
ARG2) = (c, 0" OBJ)) k i .~  ki~k,?
~ ~A ~aTit .
7In Part A tim two equations at the hottom are called inter-modularequations.We will first give the syntax of this new type of equation.
Let us assume adistinction between functional attributes (L~) and values (A~) and semanticattributes (L~) and values (Ao) (with all four sets pairwise disjoint).
Thenthe set of semantic (a-) designators contains the simple a-designators Aaand the complex a-designators.
A complex a-designator is a term a(t# q)consisting of a complex f-designator (a metavariable (\]" or l )  followed bya possibly empty sequence of functional attributes), and a possibly empty~equence q of semantic attributes.
The a-equations, then, are those equa-tions which have a complex ~r-designator in the first argument position andcomplex or simple ~-designator in the second.ff we assume thati.
the fds-algotithm is used to solve the projector equations and to con-struet th(' semantic structure, andit.
const, rain~s are expressable, s!then we can add the following two conditions to the WFF-condition:(W~'F~)(WFF) ~uld5.
There is a ~-structure i\] and a partial mapping a from the f-structurenodes to the nodes of E, such that ~, is the only minimal a-structurethat satisfies the projector equations a~ociated with the c-structurenodes.
(The fds-algorithm constructs also a and ~.)6.
All w conl~traints are satisfied by ~, a and ~.=~These addition~d couditions must be tested in the order 3 .4  5.
-~ 6..Since the description-solution algorithm is also used for solving the projectorequations, it is easy to simulate the projector-mechanism by using an addi-tional singular ~ttribute.
The solution algorithm enforces and preserves thefanc.ti0n proper~y (uuiqu~ness) of the projector, i.e., if (q~ p) and (~, p')a~'e terms designating some nodes in the f-structure which are \[napped byto some nodes in the a-structure (a(~b~ p), a(~bv f ) ) ,  then the identityof (~b~ p) and (~ f ) ,  which might be established by some other equations,will also enforce the identity of (u(~b~ p) and a(~bv f ) ) .
Thus, we can sim-ulate the projector by using a singular attribute a (not contained in L?,At, La, and A~) that is inserted between the f-designator and the seman-tic attributes of a semantic designator according to the following rewriteschemata.
(a(T p) q) ~ (t p a q)(a(t p) q) ~ (1 p a q)The identity of (~b~ p) and (q~ p') will then also enforce the identity of thevalues of (~  p o') and (~v ff o') .93If we simulate the projector mechanism in this way, the derivation of atr-strueture in parallel to a c- and f-structure closely resembles the derivationprocess described in section 2.1.
A rule introduces a quadruple, where ~ris replaced by the DAG ~r which is obtained by solving the functional anda-annotations of the local tree introduced by the rule.
The constraint setC~r contains the instantiated f- and a-constraints expressed by that rule.Fig.
7 shows in part B the solution of the equation system for the local treeintroduced by the rule of part A.
The initial quadruple consists of a DAG~s  which has one a transition.
(~.~,~,~s,~) ~ ~ ~ c~5'0 - - - , .~The only additional condition that has to be satisfied by the derivedDAG-structures results from the fact that tbe semantic substructures of aderived DAG are not necessarily connected, i.e.
that not every substructurewhich is a value of a a-attribute must necessarily be a substructure of thetopmost a-attribute of 9.
On the one hand, the syntax for the a-equationspermits us to formulate rules which introduce unconnected semantic struc-tures (fig.
8.1 gives an example).
On the other hand, rules can introducegrammatical functions without a a-attribute (eL fig.
8.2 and 8.3).
This canlead to unconnected semantic structures, if the expansion of a c-structurenode which is associated with such a grammatical function introduces a se-mantic structure.
The motivation for not excluding these two sources forthe unconneetedness is that the semantic function of a constituent or gram-matieal function can be uncertain within the local context given by a ruleand has to be determined by another constituent not introduced in thatrule.
~4 In traditional LFG it is usually assumed that the semantic functionof subeategorized constituents such as SUBJ and OBJ is determined by thegoverning verb (PRED) and that the assignment of grammatical functionsto semantic functions may be aflhcted by lexical rules.
These assignmentscan be established by inter-modular equations in the lexical entry for theverb, as illustrated in fig.
7, while at the same time leaving open the as-signments of semantic functions to the NPs in the rules of fig.
8.2 and 8.3by not annotating them with a-equations.1.
Vaeemlml ~eem'8eema seem(t SUBJ a) = (1 VCOMP SUBJ a)(1 VCOMP ~) = (~ a ARG)(I a REL) = seem2.
SvPQFig.
8Thus, unconnected semantic structures can become connected throughinter-modular equations which take into account he semantic structure ofthose constituents whose semantic function is not determined by the contextrepresented by the local tree of a rule.Since the DAG of a derived sentence has to contain a connected semanticstructure, we have to add to the well-formeduess conditions of that DAG,that the value of each or-transition must be accessible from the e-value of the735root of that DAG.
The derived semantic structure is the substructure of thederived DAG which is rooted by the value of the uppermost a-transition.This leads immediately to the definition of the derivability relation.DEFINITION 3.1 A terminal string s is derivable with a-structure ~C(A~(s, ~.))
i~there is a sequence To.
.
.wn such thato Wo = (cs,~s,?S,Ces) ando for all ?0~ = (c ,~,?
,c+) ,  ~+~ = (e ' ,~ ' ,? '
, c " ' )  (0 < i < ~) there i~arule  V --+ (c , ,%,?LCg)  and- V is a label of a leaf it of c- c' is the result of expanding it in e by cr- ~/~ is the minimal extension of ?
which results from ?
by unifying@,.
with the substructure rooted by Ct,- if v is a node of c, whose C-value is 5" (qo, P) in q', then its ?
'-valuein ~'  is 6~*(q~,p)if #.j is a node of d,  not contained in e, the value of ?~ is ~f~ (qD, q)and the value of ?
for it is 8*(qo,p), then the value of ?~ for p.jis ~'*(q~o,P.q) in ~'- C '/'' contains besides C ?
the constraints (it.j p) =~ (it.i q) etc.for all (j p) =~ (i q) etc.
in C~- ~,~ satisfies all constraints in C~- ~,, is f-complete and f-coherento VpeL*c((q~,p.a)eDom(g*) -4 ~qeL*(g*(q~,a.q) = g*n(q~,p.a)))( conncctedness)o E is the substructure of ~n rooted by ~n(q~', a)- s is the terminal string of the c-structure ofwn.3.2  Generat ion  as  semant ic  s t ructure  dr iven  and  con-s t ra ined  der ivat ionThe mechanisms for controlling completeness and coherence, which havebeen developed in section 2, together with the defining conditions of thedifferent ypes of derivation concepts can now be used to design an adequatealgorithm for the generation from semantic structures, which in addition canbe directe d by functional constraints.The process of generating from a semantic input structure ~in has tostart with a complex entity(e~, ,~,, ?~, s,,,, h~, c$)where ~t is an unordered tree consisting of only one a-transition, whosevalue is +-labeled and dominates the unfolded input structure ~'in.
Fig.
9shows the start entity for the generation from a simplified semantic inputstructure, h~ is the induced epimorphism from the substructure rootedby the a-value of k~t onto I;~,.
The start entity contains an empty setof constraints, ince not all constraints expressed by the applied rules canbe checked immediately (e.g.
pure functional constraints) and have to beadded to this set until they can be checked.SoFig.
9The derivation can be constrained by a set C ~?~ of pure functionaland/or inter-modular constraints of the form(g p) =,  (0 f )  et .
.
.
.
d (~ a q) =,  (0 p a)which enforce the derivation of those sentences, whose f- and a-structuresfulfill these constraints.
(These constraints must eventually be retracted ifno sentence is generable.)
E.g.
the setC:e. { ( ,SUBJa)=~(OaARG2)  }-- (0 BYOBJ a) ---?
(~ a ARGI)will enforce a passive realization of the input structure given in fig.
9('Peter is kicked by John'), while the set(0 SUBJ a) =c (0 a ARG2)C~ ?"
= (0 BYOB\] a) =?
(O a ARG1)(0 BYOBJ )--e (O TOPIC)"enforces a passive realization with the BYOBJ in the TOPIC-position('By John, Peter is kicked').The generator rules are constructed analogously to section 2 by an ad-ditional +-labeling of all nodes which are values of semantic attributes (notof the a-attribute !)
within the DAG-structure introduced by the rule.
Fig.10 gives an example.?
trFig.
10Again a crucial restriction follows from the fact that these rules permitthe derivation of structures with an unconnected semantic substructure,which becomes connected in later steps of the derivation by means of inter-modular equations.
If a constellation is derived by means of these rules, asit is given schematically in fig.
11,Fig.
11the generation by expansion of V proceeds without control by the inputstructure as long as the semantic structure introduced by V remains un-accessible.
The coherence-condition is undermined and sentences can begenerated whose semantic structure is not subsumed by the input struc-ture.The coherence-condition can be checked, however, if only those rules areapplied which preserve the connectedness of the semantic structure derivedso far.
This restriction on the order-freeness of the rule application doesnot affect the adequacy condition (**), because in each derivation step ofa sentence with a connected semantic structure there must he at least onenode of the partial c-structure which is expandable in such a way that theexpansion preserves the connectedness of the partial semantic structure.
Ifthe expansion of every terminal node violated this connectedness condition,the semantic structure of that sentence could not be connected.
Hence, atleast one rule must be applicable in such a way.Since it is possible that pure semantic onstraints of the rule's constraintset refer to semantic substructures whose semantic function is uncertainup to that generation step, not all pure semantic onstraints expressed bythe rules can be tested immediately.
This applies to pure semantic on-straints which are constructable from inter-modular constraints by conver-sion.
These constraints contain terms of the form (i a p) (which correspondto (~ a p) annotations) and they are not testable immediately if i is thevalue for (~ q) (q n .
.
.
.
.
pty) (which corresponds to a (T q) --~ annotation)and ?I*(q) has no a- attribute.
Hence, the pure semantic onstraints whichcannot be tested in a particular step, the pure functional constraints, andthe inter-modular constraints of the rule's constraint set have to be collectedin C ?
.
The (constraint-driven) generability relation has to then be definedas follows.DEFINITION 3.2 A terminal string s is generable from an input structure~C~n under a constraint set C eel' (F~(Z~,, s, C~e~')) iff there is a sequencewQ .
.
.w .
such thato w0 = (as, ~t,  cs ,  ~, , ,  h~, C$) and?
for all wi = (c,@,dp, Ein,ha,C?
), w,+l = (d,q2',~b',~in,ha~,C ?
')(0 < i < u) there is a generator rule V ~ (er,qlr ,?
",Ch and- V is a label of a leaf p of co the substructure rooted by h~(~(?t~,o')) is (apart from the +-labels) an extension of li\]r (the substructure of @, rooted by~,(q~, a))o for all pure semantic onstraints (j a p) =c (i a q) etc.
in C~r forwhich ~f(~b,4, a) and 6 (?v.i, a) is defined, 8", (h a (~ (5 ,4 ,  a)), p)~t.
(h~(~(?~.,, a)), q) etc.736- e' is the result of expanding p in e by cr- ~' is the minimal extension of ?
which results from ~ by unifying?2.
with the substructure rooted by euo VpeL*~((q~o,p.a)eDom(6 '*) - ,  :qqeL*(tV*(q~o,o'.q) = 8'*(q~,p.o')))- if v is a node of e, whose ~value is/f* (q0, P) in ~/, then its ?~-valuein @' is tf~*(q~,p).if/~.j is a node of d, not contained in c, the value of qt~ is 6 r (qD, q)aud the valse of ~b for ~ is *5*(qo,p), then the value of ~# for p.jis 5'*(q~o,p.q) in ~2'.o C ?
* containes besides C ?
the pure semantic constraints whichcau.ot be tested in this step, the pure functional and the inter-modular constraints of C~ with p attached as a prefix to thenode indices of the constraintso Vp~((q'0, .v)~Do.,(~") -~ h~'(~'*(q'o, ~p)) = ~'.
(# ,  p))o each node of the substructure of ~ .
rooted by 8.
(q~, a) (the semanticstructurt 0 is +-labeledo the substructure of ?2n rooted hy 6~(q~,a) is isomorphic to ~ i .
(h~is an isomorphism)- ~ .
is f-complete and f-coherent- q~n satisfies all constraints in C.  ?o ~.
satislies all constraints in C ?$~s is the terminal string of the c-structure of wn.If we define the (unconstrained) generability relation ra  aswe Call proveI,EMMA 2 V~eDAG Vs*VT~(P.(~ , s) *-* A~(s, E))The proof from left to right is carried out in analogy to Lemma 1.
Theright-to-left half follows from the fact that the order of the rule applicationduring the derivation of a sentence with a connected semantic structurecan always be rearrauged in such a way that in each step of the derivationthe partial semantic structure is commcted.
Otherwise the derived sentencewould not haw.
~a connected semantic structure.4 AcknowledgementsThe research reported in this paper was partially supported by theEUROTKA-I) accompanying research (BMFT grant No.
101 3207 0) andthe ESPRIT project ACORD (project P393).
The author would like tothank Mark Johnson, Bob Kasper, Stefan Mamma, Klaus Netter, KlausReinhardt and the members of the working group on Unification at theUniversity of Stuttgart (Inge Bethke, Jochen DSrre, Andreas Eisele andttenk Zeevat) who read carefully through earlier versions of this paper andhelped a lot iu improving both the algorithm and its presentation.
Allremaining errors are of course my own.Footnotes1Fbr parsing ct. e.g.
\[Eisele/DSrre 86\].?
~For the description of dialogue structures within LFO el.
\[Netter 88\].3The algorithms described here o~dy works for those grammars which do not haveregular expteesiox~s in the annotations (cf.
\[Kaplan/Maxwefi/Zae~mn 86\]).4'the alg~it lnn has been implemented by Jocben DSrre and Stefan Mamma, el.~Mom~/V~r~e 8r\].5This condition can be weakened in different ways (cf.
fn.15).
However, since itdepends on the domain of application how this ia done in a particular case, and sincewe want to demarche the algez-ithm independently of specific applications, we submit it tothi~ strong condition.SDetalled \[dormation on solution algorithms cent be found in \[Johnson 66\] and\[Johnson ST\].r I  wa~ reminded by an anr~ymou~ reviewer to relate thi~ paper to a paper by Block(\[Block 80\]), who must have had this procedta.e In mind, when he claimed that there isno way to derive c-~tructures from f-structures.
"On the other hand, an LFG grammar, which does not allow traamfonna~tiers Is forced to generate on tv~ differ~tt level~ f-structure and c-structureand then to compa~ the two, \]ooklng for a rnatch~ This is tim case becausethe theory specifically forbids carrying out any operations on either f- ore-stzzlcttu~s (cf.
Kaplan and Bresnan 1982:180).
Thus, there is no way toderive c-structures from f~etructure~."
(\[Block 86\], p.3)I will attempt o clarify this issue in thla paper by 'unf~rbidden' means.Sin fact, functional structures are comtonly regarded as equivalence classes ofisomor-phlc transition graphs.
We can use representatives of these classes wltldn the definitionswithout lc~s of generality.
Furthermove~ all leaves have to labeled by m, if a fmwtionalstructure is well-formed.SThis pref lx i~ procedure rune analogously for all other types of constraints, in LFGthere are constrMats of the form (v p) =c (P q), (v p), (v p) : c  z and their negations(~ mid ~, are node indices, q and p are sequences of attellmtea nd z is an atomic value).The safi~factlon relatio~ between DAGs and these types of constraints is usually definedas:?
~ (.
p) =~ (~ q) ~ 6"(?.,p) = ~.
(?~,,q)~ (v p) ~ 8" is defined for (~bv,p)For the negative constraints tim satisfaction relation is defined by the negated condi-tions.
For the sake of brevity, I will refer to only one type in the following, wheneverconstraints are invdved.1?The relation that is specified by the Wrg-condition between terminal strings andDAGs is equal to A?.
Both procedures are equivalent, since the order which is given bythe respective sequence of applications of rules is imposed onto the fds-algorithin, whichotherwise is orderfroe.l l l t  should be noted that these conditions are different from the conditions that anf-structure must be complete and coherent.
To avoid confusion the latter ones are calledf.eomplete and \]-coher~nt i  the following.la the  completeness constraints can be nmde explicit by the path set (COMPs:, exis-tential constraints} and the elements of the irrefiezlve subset of the Nerode relation overthe path set (COMPb., reentrancy constraints), cf.
\[Hesper/Rounds 86\] and \[Kasper 87\].13 The purpose of the +-labels will be explained below.14 Tills presupposes that the unification operation preserves labels, but this was alreadythe case for the atomic values.15 Within the actual implementation the eohe~nce ondition can be weakened.
Atomic-valued features can be selected which are excluded from the coherence check and tlnmcan be added during the generation process.
Again, it has to be determined in a languagespecific way which features are entirely predictable ither front grarmnatical rules (e.g.strllctural case in German, which under a speclfc analysis could be covered by a structuralrule associating nolninative with SUBJ and accusative with 0B J) or front the lexical entriesassociated with certain predicates (e.g.
grammatical gender in German which has to bespecified for every noun).1aBut that is only because tile input stnmture is slimmed down for reasons of clarity.17Defining conditions whidt did not occur in previous definitions are itemlzcd by o.18Fbr categorial unification granmtm.s (CUG) cf.
\[Uszkoreit 86\] and for unificationcategorial grammars (UCG) cf.
\[Zeevat/Klein/Calder 87\].lOThe extension of a syntactic theory by a semantic theol T is called creative iff thereare grammars where not all grammatically well-formed sentences are also semauticallywell-formed; otherwise the exteamion is called conservativv.20 Within a machine translation system this dropping of constraints could be controlledin such a way that a maximal similarity with respect o the stylistic feahtres of the f-structure of the source language sentence has to he ensured.
What 'maximal similaritywith respect o the stylistic features' mezms again presupposes some empirical work.al One possible additional condition would be to require that each c-structure con-stituent must be interpreted within the semantic structure, i.e.
each c-structure nodemust be mapped by ~o a (the product) into the semantic structure.
Since we wanted tofornminte the algorithm as general as possible, we dispense with this conditiou.22Since it is possible to express constraints refering to the mapping a between ?
and)~ (inter-modular constraints, for exaanple), the refere~ce to &, ~ and ~ is necessary.~23"1"o separate the f- and a-st~atcture from eadx other wc only have to eliminate thea-transitions.a lThe semantic fimction of a gramnmtical function is identified with the semanticattribute, whose value COlTesponds to the a-value of that grannnatical fnnction.References\[Block 86\] Block, R.: Gau a "Parsing Grammar" Be Used for Natural Lmlguage Gener-.,tion?
The Negative Example of LFG.
Ms. Hamburg 1986\[Eisele/DBrre 86\] Eisele, A., DSrre, J.: A I~xlcal FUnctional Grammar System in Prolog.In: Procredlng8 o\] COL\[NG 86, Bonn 1986\[Halvorsen 87\] Halvorsen~ P.-K.: Situation Semantics and Semantic Interpretntlon inConstraint-Based Grammaa~s.
CSLI Report No.
CSLl-8%lO1, Stanford 1987\[Johnson 86\] Johnson, M.: Computing with Regular Path Formula.
Ms. Stanford 1986\[J()hnson 67\] Johnson, M.: Attribute-Value Logic enid the Theory of Grammar.
Ph.D.thesis, Stanford University, Stanford 1987\[Kaplan/Bresnan 82\] Kaplan, R., Bresnaah J.: Lexioal FUnctional Grammar: A FormalSystem for Grammatical Representation.
I : J. Bresnan (ed.
): The MentalRepresen-fallen o\] Grammatical Rehtior~.
Cambridge, Mass.
1982\[Kaplan/Maxwefi/gaenen 86\] Kaplan, R., Maxwell, J., Zaenen, A.: Functional Uncer-tainty.
CSLI monthly voL 2, no.
4, Stanford 1986\[Kaplan 87\] Kaplan, R.: Three Seductions of Computational Psycholingnistles.
in:Whitelock, P. el.
at.
(eds.
): Lingalslic "Theory and Computer Apples/ionia, New York1987\[Karttunen 86\] Karttun~a, L.: D-PATR: A Development Environment for Unification-Based Grarmnars.
In: Proceedings o\] COLING 86, Bonn 1986\[gasper 87\] Kasper, R.T.: Feature Structures: A Logical Theory with Application toLanguage Analysis.
Ph.D. thesis.
University of Michigan, Arm Arbor 1987\[Kasper/Reunds 86\] Kasper, R.T., Rounds, W.: A Logical Semantics for Feature Stntc-tures.
In: Precedings o\] the ~h Annual Meeting o\] ihe A CL, New York 1986\[Monuna/DSrre 87\] Monmm, S., DSrre, J.: Generation from F-Structures.
In: Klein,E., van Benthem, J.
(eds.
): Categories, Po~norphisra nd Unific~6on, Edinburgh,Amsterdam 1987\[Netter 88\] Netter, K.: Syntactic Aspects of LFG-Based Dialogue Parsing.
ESPRITACORD Project 393, Deliverable T2.7'(a), Stuttgart 1988\[Reyle 88\] Reyle, U.: Compositional Semaaltics for LFG.
In: Reyle, U., Bohrcr, C.
(eds.
):Nabaral Language Parding and Linguistle Theories.
Dordrecht 1988\[Shieber 83\] Shieber, S. et at.
: The Formalism and \]hnplementation f PATR-IL In:Orosz, B., Stickel, IV\[.
(eds.
): Re*ea~.A on Inte~etlv?
Acquisilion and U~e of Knowledg~SHI Intentat i~al ,  Menlo Park 1983\[Uazkoreit 86\] Uszkoreit, H.: Categorial Unification Grmmnars.
In: Proceedings o\] COI,ING 86, Bonn 1986\[Wedeldnd 88\] Wedekind, J.: A Concept of Derivation for LFG.
In: Pnzeeedlngs o\] CO\[,ING 86, Bonn 1986\[Zeevat/Kleln/Caider 87\] Zeevat, H., Klein, E., Calder, J.: An haroduetlon to Unifica-tion Categorial Grammar.
In: Haddock, Y. at at.
(ede.
): Edinburgh WorBnO Pa~in CognBive Science, Edinburgh 1987737
