Proceedings of the Second ACL Workshop on Effective Tools and Methodologies for Teaching NLP and CL, pages 28?31,Ann Arbor, June 2005. c?2005 Association for Computational LinguisticsWeb-based Interfaces for Natural Language Processing ToolsMarc Light?
and Robert Arens?
and Xin Lu?
?Linguistics Department?School of Library and Information Science?
?Computer Science DepartmentUniversity of IowaIowa, USA 52242{marc-light,robert-arens,xin-lu}@uiowa.eduAbstractWe have built web interfaces to a numberof Natural Language Processing technolo-gies.
These interfaces allow students toexperiment with different inputs and viewcorresponding output and inner workingsof the systems.
When possible, the in-terfaces also enable the student to mod-ify the knowledge bases of the systemsand view the resulting change in behav-ior.
Such interfaces are important becausethey allow students without computer sci-ence background to learn by doing.
Webinterfaces also sidestep issues of platformdependency in software packages, avail-able computer lab times, etc.
We discussour basic approach and lessons learned.1 IntroductionThe Problem: Natural language processing (NLP)technology is relevant to non-computer scientists:our classes are populated by students from neuro-science, speech pathology, linguistics, teaching offoreign languages, health informatics, etc.
To effec-tively use NLP technology, it is helpful understand,at some level, how it works.
Hands-on experimen-tation is an effective method for gaining such under-standing.
Unfortunately, to be able to experiment,non-computer scientists often need to acquire someprogramming skills and knowledge of the Unix op-erating system.
This can be time consuming andtedious and can distract students from their centralgoal of understanding how a technology works andhow best to employ it for their interests.In addition, getting a technology to run on a setlab machines can be problematic: the programs maybe developed for a different platform, e.g., a pro-gram was developed for Linux but the lab machinesrun MSWindows.
Another hurdle is that machineadministrators are often loath to install applicationsthat they perceive as non-standard.
Finally, lab timescan be restrictive and thus it is preferable to enablestudents to use computers to which they have easyaccess.Our Solution: We built web interfaces to manycore NLP modules.
These interfaces not only al-low students to use a technology but also allow stu-dents to modify and extend the technology.
This en-ables experimentation.
We used server-side script-ing languages to build such web interfaces.
Theseprograms take input from a web browser, feed it tothe technology in question, gather the output fromthe technology and send it back to the browser fordisplay to the student.
Access to web browsers isnearly ubiquitous and thus the issue of lab access isside-stepped.
Finally, the core technology need onlyrun on the web server platform.
Many instructorshave access to web servers running on different plat-forms and, in general, administering a web server iseasier than maintaining lab machines.An Example: Finite state transduction is a coreNLP technology and one that students need to un-derstand.
The Cass partial parsing system (Abney,1997) makes use of a cascade of FSTs.
To use thissystem, a student creates a grammar.
This grammaris compiled and then applied to sentences provided28Figure 1: Web interface to CassFigure 2: Cass Output29by the student.
Prior to our work, the only interfaceto Cass involved the Unix command line shell.
Fig-ure 3 shows an example session with the commandline interface.
It exemplifies the sort of interface thatusers must master in order to work with current hu-man language technology.1 emacs input.txt &2 emacs grammar.txt &3 source /usr/local/bin/setupEnv3 reg gram.txt4 Montytagger.py inTagged input.txt5 cat inTagged |6 wordSlashTagInput.pl |7 cass -v -g gram.txt.fsc > cassOut8 less cassOutFigure 3: Cass Command Line InterfaceA web-based interface hides many of the details, seeFigure 1 and Figure 2.
For example, the use of anASCII-based text editor such as emacs become un-necessary.
In addition, the student does not needto remembering flags such as -v -g and does notneed to know how to use Unix pipes, |, and out-put redirection, >.
None of this knowledge is ter-ribly difficult but the amount accumulates quicklyand such information does not help the student un-derstand how Cass works.2 What we have builtTo date, we have built web interfaces to nine NLP-related technologies:?
the Cass parser (Abney, 1997),?
the MontyTagger Brill-style part-of-speech tag-ger (Liu, 2004),?
the NLTK statistical part-of-speech tagger,?
a NLTK context-free grammar parser (Loperand Bird, 2002),?
the Gsearch context-free grammar parser (Cor-ley et al, 2001),?
the SenseRelate word sense disambiguationsystem (Pedersen et al, 2005),?
a Perl Regular expression evaluator,?
a linguistic feature annotator,?
and a decision tree classifier (Witten and Frank,1999).These interfaces have been used in an introductionto computational linguistics course and an introduc-tion to creating and using corpora course.
Prior tothe interface construction, no hands-on lab assign-ments were given; instead all assignments were pen-cil and paper.
The NLP technologies listed abovewere chosen because they fit into the material of thecourse and because of their availability.2.1 Allowing the student to process inputThe simplest type of interface allows students to pro-vide input and displays corresponding output.
Allthe interfaces above provide this ability.
They allstart with HTML forms to collect input.
In the sim-plest case, PHP scripts process the forms, placinginput into files and then system calls are made torun the NLP technology.
Finally, output files arewrapped in HTML and displayed to the user.
Thebasic PHP program remains largely unchanged fromone NLP technology to the next.
In most cases, itsuffices to use the server file system to pass databack and forth to the NLP program ?
PHP pro-vides primitives for creating and removing uniquetemporary files.
In only one case was it necessary touse a semaphore on a hard-coded filename.
We alsoexperimented with Java server pages and Perl CGIscripts instead of PHP.2.2 Allowing the student to modify knowledgeresourcesThe web interfaces to the Cass parser, Gsearch, andMontyTagger allow the student to provide their cor-responding knowledge base.
For Cass and Gsearch,an additional text box is provided for the grammarsthey require.
The rule sequence and lexicon that theMontyTagger uses can be large and thus unwieldyfor a textarea form input element.
We solvedthe problem by preloading the textareas with a?standard?
rule sequence and lexicon which the stu-dent can then modify.
We also provided the ability toupload the rule sequences and lexicon as files.
Oneproblem with the file upload method is that it assumethat the students can generate ASCII-only files with30the appropriate line break character.
This assump-tion is often false.An additional problem with allowing studentsto modify knowledge resources is providing use-ful feedback when these student-provided resourcescontain syntax or other types of errors.
At this pointwe simply capture the stderr output of the pro-gram and display it.Finally, with some systems such as Spew(Schwartz, 1999), and The Dada Engine (Bulhak,1996), allowing web-based specification of knowl-edge bases amounts to allowing the student to exe-cute arbitrary code on the server machine, an obvi-ous security problem.2.3 Allowing the student to examine internalsystem processingDisplaying system output with a web interface is rel-atively easy; however, showing the internal work-ings of a system is more challenging with a webinterface.
At this point, we have only displayedtraces of steps of an algorithm.
For example, theNLTK context-free grammar parser interface pro-vides a trace of the steps of the parsing algorithm.One possible solution would be to generate Flashcode to animate a system?s processing.2.4 AvailabilityThe web pages are currently available at que.info-science.uiowa.edu/?light/classes/compLing/ How-ever, it is not our intent to provide server cycles forthe community but rather to provide the PHP scriptsopen source so that others can run the interfaceson their own servers.
An instructor at anotheruniversity has already made use of our code.3 Lessons learned?
PHP is easier to work with than Java ServerPages and CGI scripts;?
requiring users to paste input into text boxes issuperior to allowing user to upload files (for se-curity reasons and because it is easier to controlthe character encoding used);?
getting debugging information back to the stu-dent is very important;?
security is an issue since one is allowing usersto initiate computationally intensive processes;?
it is still possible for students to claim the inter-face does not work for them (even though weused no client-side scripting).?
Peer learning is less likely than in a lab set-ting; however, we provided a web forum andthis seems to alleviated the problem somewhat.4 SummaryAt the University of Iowa, many students, who wantto learn about natural language processing, do nothave the requisite Unix and programming skills todo labs using command line interfaces.
In addition,our lab machines run MSWindows, the instructorsdo not administer the machines, and there are restric-tive lab hours.
Thus, until recently assignments con-sisted of pencil-and-paper problems.
We have builtweb-based interfaces to a number of NLP modulesthat allow students to use, modify, and learn.ReferencesSteven Abney.
1997.
Partial parsing via finite-state cas-cades.
Natural Language Engineering, 2(4).Andrew Bulhak.
1996.
The dada engine.http://dev.null.org/dadaengine/.S.
Corley, M. Corley, F. Keller, M. Crocker, andS.
Trewin.
2001.
Finding Syntactic Structure in Un-parsed Corpora: The Gsearch Corpus Query System.Computers and the Humanities, 35:81?94.Hugo Liu.
2004.
Montylingua: An end-to-end naturallanguage processor with common sense.
homepage.Edward Loper and Steven Bird.
2002.
Nltk: The naturallanguage toolkit.
In Proc.
of the ACL-02 Workshopon Effective Tools and Methods for Teaching NaturalLanguage Processing and Computational Linguistics.Ted Pedersen, Satanjeev Banerjee, and Siddharth Pat-wardhan.
2005.
Maximizing Semantic Relatedness toPerform Word Sense Disambiguation.
Supercomput-ing institute research report umsi 2005/25, Universityof Minnesota.Randal Schwartz.
1999.
Random sentence generator.Linux Magazine, September.Ian H. Witten and Eibe Frank.
1999.
Data Mining: Prac-tical Machine Learning Tools and Techniques withJava Implementations.
Morgan Kaufmann.31
