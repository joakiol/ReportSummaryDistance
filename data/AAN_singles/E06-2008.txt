ELLEIPO: A module that computes coordinative ellipsisfor language generators that don?tKarin HarbuschComputer Science DepartmentUniversity of Koblenz-LandauPO Box 201602, 56016 Koblenz/DEharbusch@uni-koblenz.deGerard KempenMax Planck Institute for Psycholinguistics &Cognitive Psychology Unit, Leiden UniversityPO Box 310, 6500AH Nijmegen /NLgerard.kempen@mpi.nlAbstractMany current sentence generators lackthe ability to compute elliptical versionsof coordinated clauses in accordance withthe rules for Gapping, Forward andBackward Conjunction Reduction, andSGF (Subject Gap in clauses with Fi-nite/Fronted verb).
We describe a module(implemented in JAVA, with Germanand Dutch as target languages) that takesnon-elliptical coordinated clauses as in-put and returns all reduced versions li-censed by coordinative ellipsis.
It isloosely based on a new psycholinguistictheory of coordinative ellipsis proposedby Kempen.
In this theory, coordinativeellipsis is not supposed to result from theapplication of declarative grammar rulesfor clause formation but from a proce-dural component that interacts with thesentence generator and may block theovert expression of certain constituents.1 IntroductionCoordination and coordinative ellipsis are essen-tial tools for the sentence aggregation componentof any language generator.
Very often, when theaggregator chooses to combine several clausesinto a single coordinate structure, the need arisesto eliminate unnatural reduplications of corefer-ential constituents.In the literature, one often distinguishes fourmajor types of clause-level coordinative ellipsis:?
Gapping (as in (1)), with a special variantcalled Long-Distance Gapping (LDG).
InLDG, the second conjunct consists of con-stituents stemming from different clauses ?in (2), the main clause and the complement.?
Forward Conjunction Reduction (FCR; cf.
(3)and the relative clause in (4)).?
SGF (Subject Gap in clauses with Finite/Fronted verb; as in (5), and?
Backward Conjunction reduction (BCR, alsotermed Right Node Raising; see (6)).
(1)Henk lives in Leiden and Chris livesg in Delft(2)My wife wants to buy a car, my son wantsg[to buy]gl a motorcycle.
(3)My sister lives in Utrecht and [my sister]fworks in Amsterdam(4)Amsterdam is the city [S where Jan lives andwheref Piet works](5)Why did you leave but didn?t yous warn me?
(6)Anne arrived before [three o?clock]b, and Susileft after three o?clockThe subscripts denote the elliptical mechanism atwork: g=Gapping, gl=LDG, f=FCR, s=SGF,b=BCR.
We will not deal with VP Ellipsis andVP Anaphora because they generate pro-formsrather than elisions and are not restricted to coor-dination (cf.
the title of the paper).In current sentence generators, the coordina-tive ellipsis rules are often inextricably inter-twined with the rules for generating non-elliptical coordinate structures, so that they can-not easily be ported to other grammar formalisms?
e.g., Sarkar & Joshi (1996) for Tree Adjoin-ing Grammar; Steedman (2000) for CombinatoryCategorial Grammar; Bateman, Matthiessen &Zeng (1999) for Functional Grammar.
Genera-tors that do include an autonomous componentfor coordinative ellipsis (Dalianis, 1999; Shaw,2002; Hielkema, 2005), use incomplete rule sets,thus risking over- or undergeneration, and incor-rect or unnatural output.The module (dubbed ELLEIPO, from Greek?????pi?
?I leave out?)
we present here, is less115formalism-dependent and, in principle, less liableto over- or undergeneration than its competitors.In Section 2, we sketch the theoretical back-ground.
Section 3 and the Appendix describe ourimplementation, with examples from German.Finally, in Section 4, we discuss the prospects ofextending the module to additional constructions.2 Some theoretical backgroundELLEIPO is loosely based on Kempen?s(subm.)
psycholinguistically motivated syntactictheory of clausal coordination and coordinativeellipsis.
It departs from the assumption that thegenerator?s strategic (conceptual, pragmatic)component is responsible for selecting the con-cepts and conceptual structures that enable iden-tification of discourse referents (except in case ofsyntactically conditioned pronominalization).The strategic component may conjoin two ormore clauses into a coordination and deliver asoutput a non-reduced sequence of conjuncts.1The concepts in these conjuncts are adorned withreference tags, and identical tags expresscoreferentiality.2Structures of this kind serve as input to the(syn)tactical component of the generator, wherethey are grammatically encoded (lexicalized andgiven syntactic form) without any form of coor-dinative ellipsis.
The resulting non-ellipticalstructures are input to ELLEIPO, which computesand executes options for coordinative ellipsis.ELLEIPO?s functioning is based on the as-sumption that coordinative ellipsis does not re-sult from the application of declarative grammarrules for clause formation but from a proceduralcomponent that interacts with the sentence gen-erator and may block the overt expression of cer-tain constituents.
Due to this feature, ELLEIPOcan be combined, at least in principle, with vari-ous grammar formalisms.
However, this advan-tage is not entirely gratis: The module needs aformalism-dependent interface that converts gen-1The strategic component is also supposed to apply rules oflogical inference yielding the conceptual structures thatunderlie ?respectively coordinations.?
Hence, the conver-sion of clausal into NP coordination (such as Anne likesbiking and Susi likes skating into Anne and Susi like bik-ing and skating, respectively is supposed to arise in thestrategic, not the (syn)tactical component of the generator.This also applies to simpler cases without respectively,such as John is skating and Peter is skating versus Johnand Peter are skating.
The module presented here doesnot handle these conversions (see Reiter & Dale (2000,pp.
133-139) for examples and possible solutions.
)2Coordinative ellipsis is insensitive to the distinction be-tween ?strict?
and ?sloppy?
(token- vs. type-)identity.erator output to a (simple) canonical form.3 A sketch of the algorithmThis sketch presupposes and-coordinations ofonly n=2 conjuncts.
Actually, ELLEIPO handlesand-coordinations with n!2 conjuncts if, in everypair of conjuncts, the major constituents embodythe same pattern of coreferences and contrasts.ELLEIPO takes as input a non-elliptical syntac-tic structure that should meet the following fourcanonical form criteria (see Fig.
1 for the inputtree corresponding to example (7).
(7) Susi h?rte dass Hans einen Unfall hatteSusi heard that Hans an accident hadund dassf Hansf sterben k?nnteand that Hans die might?Susi heard that Hans had an accident andmight die??
Categorial (phrasal and lexical) nodes ?bolded in Fig.
1 ?
carry reference tags (pre-sumably propagated from the generator?s strate-gic component).
E.g., the tag ?7?
is attached tothe root and head nodes of both exemplars of NPHans in Fig.
1, indicating their coreferentiality.For the sake of computational uniformity, wealso attach reference tags to non-referring lexicalelements.
In such cases, the tags denote lexicalinstead of referential identity.
For instance, thefact that the two tokens of subordinating con-junction dass ?that?
in Fig.
1 carry the same tag,is interpreted by ELLEIPO as indicating lexicalidentity.
In combination with other properties,this licenses elision of the second dass (see (7)).?
The conjuncts are sister nodes separated bycoordinating conjunctions; we call these configu-rations coordination domains.
The order of theconjuncts and their constituents is defined.?
Every categorial node of the input tree is im-mediately dominated by a functional node.?
Each clausal conjunct is rooted in an S-nodewhose daughter nodes (immediate constituents)are grammatical functions.
Within a clausal con-junct, all functions are represented at the samehierarchical level.
Hence, the trees are ?flat,?
asillustrated in Fig.
1, and similar to the trees inGerman treebanks (NEGRA-II, TIGER).ELLEIPO starts by demarcating ?superclauses.
?Kempen (subm.)
introduced this notion in histreatment of Gapping and LDG.
An S-node domi-nates a superclause iff it dominates the entiresentence or a clause beginning with a sub-ordinating conjunction (CNJ).
In Fig.
1, thestrings dominated by S1, S5 and S12 are super-Figure 1.
Slightly simplified canonical form of the non-elliptical input tree underlying sentence (7).clauses.
Note that S12 includes clause S13, whichis not a superclause.Then, ELLEIPO checks all coordination do-mains for elision options, as follows:?
Testing for forward ellipsis: Gapping (includ-ing LDG), FCR, or SGF.
This involves inspect-ing (recursively for every S-node) the set of im-mediate constituents (grammatical functions) ofthe two conjuncts, and their reference tags.Complete constituents of the right-hand conjunctmay get marked for elision, depending on thespecific conditions listed in the Appendix.?
Testing for BCR.
ELLEIPO checks ?
word-by-word, going from right to left ?
the corefer-ence tags of the conjuncts.
As a result, completeor partial constituents in the right-hand peripheryof the left conjunct may get marked for elision.The final step of the module is ReadOut.
Af-ter all coordination domains have been proc-essed, a (possibly empty) subset of the terminalleaves of the input tree has been marked for eli-sion.
In the examples below, this is indicated bysubscript marks.
E.g., the subscript ?g?
attachedto esst ?eat?
in (9b) indicates that Gapping is al-lowed.
ReadOut interprets the elision marks and,in ?standard mode,?
produces the shortest ellipti-cal string(s) as output (e.g.
(9c)).
In ?demomode,?
it shows individual and combined ellipti-cal options on user request.
Furthermore, auch?too?
is added in case of ?Stripping,?
i.e.
whenGapping leaves only one constituent as remnant.Example (10) illustrates a combination ofGapping and BCR, with the three licensed ellip-tical output strings shown in (10c).
In (11), Gap-ping combines with BCR in the subordinateclauses.
The fact that here, in contrast with (10),the subordinate clauses do not start their ownsuperclauses, now licenses LDG.
However,ReadOut prevents LDG to combine with BCR,which would have yielded the unintended stringAnne versucht B?cher und Susi Artikel.
(9) a. Wir essen ?pfel und ihr esst Birnen?We eat apples and you(pl.)
eat pears?b.Wir essen ?pfel und ihr esstgBirnenc.
Elliptical option:Wir essen ?pfel und ihr Birnen(10)a. Ich hoffe, dass Hans schl?ft und du hoffst,dass Peter schl?ft?I hope that Hans sleeps and you hope thatPeter sleeps?b.
Ich hoffe dass Hans schl?ftb unddu hoffstg dass Peter schl?ftc.
Elliptical options:Gapping: Ich hoffe, dass Hans schl?ft unddu, dass Peter schl?ftBCR: Ich hoffe, dass Hans und du hoffst,dass Peter schl?ftGapping and BCR: Ich hoffe, dass Hansund du, dass Peter schl?ft(11)a.Anne versucht B?cher zu schreiben andSusi versucht Artikel zu schreiben?Anne tries to write books and Susi triesto write articles?b.
Anne versucht B?cher zubschreibenb und Susi versuchtgArtikel zugl schreibenglc.
Elliptical options:Gapping: Anne versucht B?cher zuschreiben und Susi Artikel zu schreibenBCR: Anne versucht B?cher und Susiversucht Artikel zu schreibenGapping and BCR: Anne versuchtB?cher und Susi Artikel zu schreibenLDG: Anne versucht B?cher zu schreibenund Susi Artikel1174 ConclusionCurrently, ELLEIPO can handle all major types ofclausal coordinative ellipsis in German andDutch.
However, further finetuning of the rulesis needed, e.g., in order to take subtle semanticconditions on SGF and Gapping into account.We expect further improvements by allowing forinteractions between the ellipsis module and thegenerator?s pronominalization strategy.
Work onporting ELLEIPO to related languages, in particu-lar English, and to coordinations of non-clausalconstituents (NP, PP, AP) is in progress.ReferencesJohn A. Bateman, Christian M.I.M.
Matthiessen& Licheng Zeng (1999).
Multilingual naturallanguage generation for multilingual software:a functional linguistic approach.
Applied Arti-ficial Intelligence, 13, 607?639.Ehud Reiter & Robert Dale (2000).
Buildingnatural language generation systems.
Cam-bridge UK: Cambridge University Press.Hercules Dalianis, (1999).
Aggregation in natu-ral language generation.
Computational Intel-ligence, 15, 384?414.Feikje Hielkema (2005).
Performing syntacticaggregation using discourse structures.
Un-published Master?s thesis, Artificial Intelli-gence Unit, University of Groningen.Gerard Kempen (subm.).
Symmetrical clausalcoordination and coordinative ellipsis as in-cremental updating.
Downloadable from:www.gerardkempen.nl/publicationfilesAnoop Sarkar & Aravind Joshi (1996).
Coordi-nation in Tree Adjoining Grammars: Formal-ization and implementation.
In: Procs.
ofCOLING 1996, Copenhagen, pp.
610?615.James Shaw (1998).
Segregatory coordinationand ellipsis in text generation.
In: Procs.
ofCOLING 1998,Montreal, pp.
1220?1226.Mark Steedman (2000).
The syntactic process.Cambridge MA: MIT Press.Appendix: A sketch of the algorithm1 proc ELLEIPO(SENT) {2 mark root nodes of all superclauses in SENT;3 for all coordinators and their left- and right-neighboring clauses (LCONJ, RCONJ) {4 call GAP(LCONJ, RCONJ, ?g?
); // string ?g?gets an ?l?
attached for any level of LDG; theresulting string is attached, in line 9 of GAP, toleaves that ReadOut interprets as elidable//5 FCRcontrol=TRUE; BCRcontrol=TRUE;//global variables communicating the end ofleft- or right-peripheral identical strings//6 call FCR(LCONJ, RCONJ);7 call SGF(LCONJ, RCONJ);8 call BCR(LCONJ, RCONJ);};9 call ReadOut();}1 proc GAP(LC, RC, ELLIM) {//ELLIM recordsthe ?elliptical mechanism(s)?
applied: ?g?
forGapping; ?gl?, ?gll?, etc., for LDG levels//2 check whether the HEAD verb of LC and theHEAD verb of RC have the same reference tag;3 if not then return; //verbs differ=>no gapping//4 check whether all other constituents in LC have acounterpart in RC with same grammatical function,not necessarily at the same left-to-right position;modifiers need identical mod-type;5 if not then return; // no proper set of contrastivepairs of immediate constituents found//6 for all pairs (LSIB, RSIB) resulting from (4) {7 if (LSIB is an S-node) & (LSIB is not a super-clause root) then {//LSIB = ?left sibling?//8 if (LSIB and RSIB are not coreferential)9 then attach ?l?
to ELLIM;//LDG variant//10 call GAP(LSIB, RSIB, ELLIM);}11 if NOT((LSIB is an S-node) & (LSIB and RSIBare coreferential))12 then mark RSIB for elision, with ELLIM;}}1 proc FCR(LC, RC) {2 while (FCRcontrol) {3 set LSIB and RSIB to left-most daughter of LCand RC, resp.
;4 if (LSIB and RSIB are not coreferential)5 then {FCRcontrol = FALSE;6 return;}7 if (LSIB is an S-node)8 then call FCR(LSIB, RSIB);9 call FCR(right neighbor of LSIB, right neigh-bor of RSIB);10 mark RSIB for elision by adding ?f?
;}}1 proc SGF(LC, RC) {2 if (NOT(SUBJ is 1st daughter of LC)) & (HEADis 2nd daughter of LC) & (SUBJ is 1st or 2nddaughter of RC) & (HEAD is 1st or 2nd daughterof RC)3 then mark RC?s SUBJ for elision, with ?s?
;}1 proc BCR(LC, RC) {2 while (BCRcontrol) {3 set LSIB and RSIB to right-most daughter nodeof LC and RC, respectively;4 if (LSIB and RSIB are not coreferential)5 then {BCRcontrol = FALSE; return;};6 call BCR(LSIB, RSIB);7 call BCR(left neighbor of LSIB, left neighborof RSIB);8 if (RSIB is a terminal node)9 then mark LSIB for elision, with ?b?
;}}118
