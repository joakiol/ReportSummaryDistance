A RATIONAL RECONSTRUCTION OF THE PROTEUS SENTENCE PLANNERGraeme RitchieDepartment of Artificial IntelligenceUniversity of Edinburgh, Hope Park SquareEdinburgh EH8 9NWABSTRACTA revised and more structured version ofDavey's discourse generation program has beenimplemented, which constructs the underlying formsfor sentences and clauses by using rules whichannotate and segment the initial sequence of eventsin various ways.i.
The Proteus ProgramThe text generation program designed and im-plemented by Davey (1974,1978) achieved a highlevel of fluency in the generation of small para-graphs of English describing events in a limiteddomain (games of "tic-tac-toe"/"noughts-and-crosses").
Although that work was completed tenyears ago, the performance is still impressive bycurrent standards.
The program could play a gameof "noughts-and-crosses" with a user, then producea fluent sunmmry of what had happened during thegame(whether or not the game was complete).
Forexample:The game began with your taking a corner, andI took the middle of an adjacent edge.
If you hadtaken the corner opposite the one which you hadjust taken, you would have threatened me, but youtook the one adjacent to the square which I hadjust taken.
The game hasn't finished yet.As well as heuristics for actually playing agame, the program contained rules for text genera-tion, which could be regarded as having the follow-ing components (this is not a decomposition used byDavey, but an organisation imposed here in order toclarify the processing):(a) Sentence planner(b) Description constructor(c) Systems networkThe third (syntactic) component, is a majorpart of the original Proteus program, and Daveyincluded a very detailed systemic grammar (in thestyle of Hudson (1971)) for the area of English hewas concerned with; consequently the writtenaccoun~ (Davey (1974,1978)) deal mainly with thesegrammatical aspects.
However, much of the fluencyof the discourses produced by Proteus seems toderive from the crucial computations performed byThis research was supported by SERC grantsGR/B/9874.6 and GR/C/8845.1.components (a) and (b), since the syntactic systemis largely set up to convert deep representationsinto surface tokens, without too much regard forglobal contextual factors.
Unfortunately, thewritten accounts give only a rough informal outlineof how these components operated.
A completely re-vised version of Proteus has been implemented inProlog on a DEC System iO, and this paper describesthe working of its sentence planner.
The systemoutlined below is not an exact replication ofDavey's program, but is a "rational reconstruction'~that'is, an attempt to present a slightly cleaner,more general method, based on Davey's ideas andperforming the same specific task as Proteus.Paradoxically, this cleaning up process may lead tominor losses of fluency, where particular effectswere gained in Proteus by slightly ad hoc measures.2.
The Sentence PlannerThe module which creates the overall clausalstructure of each sentence works on a list ofnumbers representing the course of a game (completeor unfinished), where each square is represented bya number between i and 9.
The processing carriedout by the sentence planner can be seen asoccurring in three logical phases:i. move annotation2.
sentence segmentation3.
case-frame linkingAlthough these stages are logically distinct,they need not occur wholly in temporal sequence.However, the abstract model is clearer if viewedin separate stages.2.1.
Move AnnotationThe system has a set of heuristic ruleswhich enable it to play noughts-and-crosses to areasonable standard.
(A non-optimal set of ruleshelps to introduce some variety into the play).It uses these move-generating rules to work throughthe history of the game, computing at each positionwhich move it would have made for that situationand which move-generating rule gives rise to themove actually made at that point.
This allows itto mark the actual move in the given history withcertain tactical details, using the implicitassumption that whoever made the moves had the sameknowledge of the game as the system itself does.The five move-generators are totally ordered toreflect a "priority" or "significance" with327respect to the game, and each move-generator islabelled with one of three categories - "defen-sive" (e.g.
blocking the third square in anopponent's near-complete line), "offensive" (e.g.creating a near-complete line, which thusthreatens the opponent) or "neutral" (e.g.
takinga square to start the game).
In addition to basicorganisational entries (square taken, name ofplayer, pointer to preceding move, pointer tofollowing move), the annotation of the movescontains the following information:(a) generating heuristic(s) - there is alist, in priority order, of the heuristicswhich could have given rise to that move.
(b) tactically equivalent alternatives - foreach heuristic listed in (a), there is alist of the other squares which couldalso have resulted from that heuristic.
(c) lines involved - for each squarementioned in the various entries, thereis a note of which lines (if any) were(or would have been) tactically involvedin that move.
(d) better move - if there is a higherpriority heuristic that would give riseto a different choice of square, anannotated description of that "better"move is attached.For example, the game described by thediscourse in Section 1 above would initially bejust a sequence of square-numbers, together withthe name of the first player:user 1 2 3After annotation, the third move (square 3)would have the following information attached:square : 3heuristics/alternatives : take \[9 8 7 6 5 4)better move :square : 9 (i 5 9)heuristics/alternatives :threaten f7 (i 4 7) 5 (i 5 9) 4 (I 4 7)\]2.2 Sentence SegmentationThe sentence segmentation processinvolves grouping the annotated moves intoclusters so that each cluster contains anappropriate amount of information for one sentence.This uses the following guidelines, in thefollowing order, to determine the number of moveswithin a sentence:i.
If there is just one move left in thesequence, that must be a single sentence.2.
If there are just two moves left, theyform a single sentence.3.
If a move is a "mistake" (i.e.
there is atactically better alternative) then starta new sentence to describe it.
This isquite a dominant principle, in that thesystem will perform "look-ahead" of two(actual) moves in the annotated chain tocheck if there is a mistake looming up.4.
If a move is a combined attack and defenc~give it a sentence to itself.5.
If this move is an attack, and the nextmove successfully thwarts that attack,then put these two moves into a sentenceon their own.6.
Put the next three moves in a sentence.
(No more than three moves may occur in asingle sentence structure).As well as segmenting the moves, this moduleattaches to each move a tag indicating its overalltactical relationship to the preceding moves.This is a gross summary of some of the tacticalinformation provided by the annotator, and encodesmuch of the information needed by the next stage(case-frame linking).
There are four tag-valuesused - "consequence" (the move is a result of thepreceding one), "thwart" (the move prevents anattack by the preceding one), "mistake" (the moveis a failure to make the best possible move), and"null" (an all-purpose default).2.3 Case-frame Linkin$Once the moves have been annotated,grouped and tagged, their descriptions can beconstructed and linked together, to form theinternal structure of the sentence.
In thisprocess, various case-frame structures are com-puted from the information attached to each move,and are placed in order, linked by variousrelationships.
There may be, within a sentence,several descriptions associated with a singlemove, since it is possible for more than oneaspect of a move to be mentioned.
In each case-frame structure, the other roles will containsuitable fillers - e.g.
the square taken (for a"take" description), or the other player (for a"threat") - which are computable from the anno-tations.
Each such case-frame description willeventually give rise to a full tensed clause.
Inaddition, some of these case-frames will have,embedded within them on the "method" case-role,further simple case-frames which will eventuallygive rise to adjuncts to the tensed clause in theform of verb phrases (e.g.
"...by taking acorner..").
Hence the linking process involvesselecting those descriptive structures (from theannotations) which are to be expressed linguisti-cally, formulating these as filled case-frame~,and labelling the relationships between thesedescriptions.
Relationships between case-framedescriptions are indicated by attaching to eachcase-frame a "link" symbol indicating its relationto the surrounding discourse (either within thatsentence, or across the preceding sentenceboundary).
This process is non-deterministic inthe sense that there are usually several equallygood ways of expressing a given move or sequenceof moves within a sentence.
The program contains328rules for all such possibilities, and worksthrough all the possible combinations using asimple depth-first search.
The case-frameconstruction also determines the clausal structureof the sentence, in that the nesting or con-joining of clauses is fixed at this stage.
Theclausal structure does not allow recursivelevels - there are, for example, no verbs withsentential complements.
The case-frame construc-tion and tagging depends on the links insertedby the sentence-segmenter, together with threeitems of information from the annotations on themoves - whether the move has two aspects, defen-sive and offensive; any "better" move that hasbeen attached; and whether the tactic-nameuniquely defines, within the context, which squaremust have been taken.
The case-frame constructionand linking proceeds according to certainguidelines:I. if the move is a "mistake", indicate thatby describing both the better move andthe actual move.2.
if a move has two possible descriptions,one "offensive" and the other "defensive",describe both aspects.3.
if a move has two possible descriptionswhich have the same classification withinthe set {neutral, offensive, defensive},then choose the most significant (asdetermined by the priority ordering oftactics).4. if two consecutive (actual) moves aresuch that the second one prevents anattack made by the first, then select thetactics corresponding to these aspects todescribe them.5.
if there are no "offensive" or "defensive"aspects listed, use the simple "take"form.The following rule is also applied to allmoves described: if the square taken is notuniquely determined by the tactic-name, and thetactic-name is not "take", then create a "take"case-frame describing the move, and either makeit into a separate conjoined clause (if the movehas a sentence to itself) or attach it to the maincase-frame as the "method".Since the aim of the current project is touse this discourse domain as a "back-end" forexperimenting with functional unification grammar(Kay (1979)), the sentence planner has to produce"fuctional descriptions" to indicate the under-lying grau~natical form for each sentence.
Thelinked case-frames are therefore reformulatedinto functional descriptions, with the linksattached to the front of each clause determiningtwo aspects of the syntactic structure - thelexical item (if any) to be used as "binder" or"connective" at the front of the clause (again, anon-deterministic choice), and the grammnticalfeatures (e.g.
modality, aspect) to be added tothe clause in addition to those default settingsprogrammed into the system.
The ten possible"links", with their possible surface realisationsare:hypotheticalaltho althoughcondante ifcondconsesequenceexternal-contrast howeverinternal-contrast butconjunction andinternal-result and soexternal-result consequentlyas a resultIn addition, the first four of the abovelinks cause the clause to have perfect aspect,"hypothetical" and "altho" cause the presence ofthe modality "can", and "condconse" results inthe modality "will".
(Notice that "could" isregarded as the past tense of "can", and "would"as the past tense of "will").3.
Possible GeneralisationsAfter establishing a suitably implementationindependent description of the processingnecessary to achieve the behaviour of Proteus,the next step should be to try to extract somegeneral notion of how to describe a sequence ofevents.
The domain used here (tic-tac-toe) hasthe unusually convenient feature that there is abasic canonical form for representing (in arelatively neutral, primitive form) what thesequence of events was.
That is, the originallist of moves is a non-grammatical representationof the world events to be described.
It is notrealistic to make such an assumption in general,so a more abstract model may have to take up theplanning process at a slightly later stage, whenmoves already have some form of "descriptions".REFERENCESDavey, Anthony (1974) The Formalisation ofDiscourse Production.
Ph.D. Thesis, Universityof Edinburgh.Davey, Anthony (1978) Discourse Production.Edinburgh: Edinburgh University Press.Hudson, Richard (1971) English Complex Sentences.Amsterdam: North Holland.Kay, Martin (1979) Functional Grammar.
Pp.142-158 in Proceedings of the Fifth Annual Meetingof the Berkeley Linguistics Society.
Berkeley,CA: University of California.329
