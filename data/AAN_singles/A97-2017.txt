GATE - a Genera l  Arch i tec ture  for Text  Eng ineer ingHamish CunninghamDept.
Computer ScienceUniversity of Sheffield211 Portobello St.Sheffield S10 4DPhamish@dcs, shef.
ac.
ukKevin HumphreysDept.
Computer ScienceUniversity of Sheffield211 Portobello St.Sheffield S10 4DPkwh~dcs, shef.
ac.
ukRobert GaizauskasDept.
Computer ScienceUniversity of Sheffield211 Portobello St.Sheffield S10 4DProbertg@dcs, shef.
ac.
ukYorick WilksDept.
Computer ScienceUniversity of Sheffield211 Portobello St.Sheffield S10 4DPyorick@dcs, shef .
ac.
ukFor a variety of reasons NLP has recently spawneda related engineering discipline called language en-gineering (LE), whose orientation is towards the ap-plication of NLP techniques to solving large-scale,real-world language processing problems in a robustand predictable way.
Aside from the host of funda-mental theoretical problems that remain to be an-swered in NLP, language ngineering faces a varietyof problems of its own.
First, there is no theory oflanguage which is universally accepted, and no com-putational model of even a part of the process oflanguage understanding which stands uncontested.Second, building intelligent application systems, sys-tems which model or reproduce nough human lan-guage processing capability to be useful, is a large-scale engineering effort which, given political andeconomic realities, must rely on the efforts of manysmall groups of researchers, spatially and temporallydistributed.
The first point means that any attemptto push researchers into a theoretical or represen-tational straight-jacket is premature, unhealthy anddoomed to failure.
The second means that no re-search team alone is likely to have the resources tobuild from scratch an entire state-of-the-art LE ap-plication system.Given this state of affairs, what is the best prac-tical support hat can be given to advance the field?Clearly, the pressure to build on the efforts of othersdemands that LE tools or component technologiesbe readily available for experimentation a d reuse.But the pressure towards theoretical diversity meansthat there is no point attempting to gain agreement,in the short term, on what set of component tech-nologies hould be developed or on the informationalcontent or syntax of representations that these com-ponents hould require or produce.Our response has been to design and implementa software environment called GATE (Cunninhamet al, 1997), which we will demonstrate at ANLP.GATE attempts to meet the following objectives:1. support information interchange between LEmodules at the highest common level possiblewithout prescribing theoretical approach;2. support the integration of modules written inany source language on any common platform;3. support the evaluation and refinement of LEcomponent modules, and of systems built fromthem, via a uniform, easy-to-use graphical in-terface which in addition offers facilities for vi-sualising data and managing corpora.Corresponding to the three key objectives identi-fied above GATE comprises three principal elements:GDM, the GATE Document Manager, based on theT IPSTER document manager; CREOLE, a Collec-tion of REusable Objects for Language Engineering:a set of LE modules integrated with the system; andGGI, the GATE Graphical Interface, a developmenttool for LE R&D, providing integrated access to theservices of the other components and adding visual-isation and debugging tools.The GDM provides a central repository or serverthat stores all information an LE system generatesabout the texts it processes.
All communication be-tween the components ofan LE system goes throughGDM, which insulates these components from directcontact with each other and provides them with auniform API for manipulating the data they produceand consume.
The basic concepts of the data modelunderlying the GDM are those of the T IPSTER ar-chitecture, which is specified (Grishman, 1996).All the real work of analysing texts in a GATE-based LE system is done by CREOLE modules orobjects (we use the terms module and object ratherloosely to mean interfaces to resources which may bepredominantly algorithmic or predominantly data,or a mixture of both).
Typically, a CREOLE objectwill be a wrapperaround a pre-existing LE moduleor database - a tagger or parser, a lexicon or ngramindex, for example.
Alternatively, objects may be29developed from scratch for the architecture - in ei-ther case the object provides a standardised API tothe underlying resources which allows access via GGIand I /O via GDM.
Tile CREOLE APIs may also beused for programming new objects.When the user initiates a particular CREOLE ob-ject via GGI (or when a programmer does the samevia the GATE API when building an LE applica-tion) the object is run, obtaining the information itneeds (document source, annotations from other ob-jects) via calls to the GDM API.
Its results are thenstored in the GDM database and become availablefor examination via GGI or to be the input to otherCREOLE objects.GDM imposes constraints on the I /O format ofCREOLE objects, namely that all information mustbe associated with byte offsets and conform to theannotations model of the T IPSTER architecture.The principal overhead in integrating a module withGATE is making the components use byte offsets, ifthey do not already do so.The GGI is a graphical tool that encapsulates theGDM and CREOLE resources in a fashion suitablefor interactive building and testing of LE compo-nents and systems.
The GGI has functions for creat-ing, viewing and editing the collections of documentswhich are managed by the GDM and that form thecorpora which LE modules and systems in GATEuse as input data.
The GGI also has facilities todisplay the results of module or system execution -new or changed annotations associated with the doc-ument.
These annotations can be viewed either inraw form, using a generic annotation viewer, or in anannotation-specific way, if special annotation view-ers are available.
For example, named entity annota-tions which identify and classify proper names (e.g.organization ames, person names, location names)are shown by colour-coded highlighting of relevantwords; phrase structure annotations are shown bygraphical presentation of parse trees.
Note that theviewers are general for particular types of annota-tion, so, for example, the same procedure is used forany POS tag set, Named-Entity markup etc.
ThusCREOLE developers reuse GATE data visualisationcode with negligible overhead.A central function of the GGI is to provide agraphical launchpad for the various LE subsystemsavailable in GATE.
To that end, the main panelof the GGI top-level display shows the particulartasks which may be performed by modules or sys-tems within the GATE system (e.g.
parsing).
Hav-ing chosen a task, a window appears displaying aconnected graph of the modules that need to be runto achieve the task.
In this graph, the boxes denot-ing modules are active buttons: clicking on themwill, if conditions are right, cause the module tobe executed.
The paths through the graph indi-cate the dependencies amongst he various modulesmaking up this subsystem.
At any point in time,the state of execution of the system, or, more ac-curately, the availability of data from various mod-ules, is depicted through colour-coding of the mod-ule boxes.
After execution, the results of completedmodules are available for viewing by clicking againon the module box, and are displayed using an ap-propriate annotation viewer as described above.
Inaddition, modules can be 'reset', i.e.
their resultsremoved from the GDM, to allow the user to pickanother path through the graph, or re-execute hav-ing altered some tailorable data-resource (such as agrammar or lexicon) interpreted by the module atrun-time.
(Modules running as external executablesmight also be recompiled between runs.
)To illustrate the process of converting pre-existingLE systems into GATE-compatible CREOLE setswe use as an example the creation of VIE (VanillaInformation Extraction system) from LaSIE (Large-Scale Information Extraction system) (Gaizauskaset al, 1995), Sheffield's entry in the MUC-6 sys-tem evaluations.
LaSIE module interfaces were notstandardised when originally produced and its CRE-OLEization gives a good indication of the ease ofintegrating other LE tools into GATE.
The worktook around 2 person-months.
The resulting sys-tem, VIE, is distributed with GATE.ReferencesCunninham, H., K. Humphreys, R. Gaizauskas, andY.
Wilks.
1997.
Software Infrastructure for Nat-ural Language Processing.
In Proceedings of theFifth Conference on Applied Natural LanguageProcessing (ANLP-97), March.Gaizauskas, R., T. Wakao, K Humphreys, H. Cun-ningham, and Y. Wilks.
1995.
Description of theLaSIE system as used for MUC-6.
In Proceedingsof the Sixth Message Understanding Conference(MUC-6).
Morgan Kaufmann.Grishman, R. 1996.
T IPSTER Architecture DesignDocument Version 2.2.
Technical report, DARPA.Available at http: / /www, t ips ter ,  org/.30
