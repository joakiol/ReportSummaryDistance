GATE - a Genera l  Arch i tec ture  for  Text  Eng ineer ingHamish CunninghamInst i tute for Language,Speech and Hearing /Dept.
Computer  ScienceUniv.
Sheffield, UKhamish@dcs, he f .
ac.
ukYor i ck  Wi lksInst i tute for Language,Speech and Hearing /Dept.
Computer  ScienceUniv.
Sheffield, UKyor ick@des ,  she f .
ac.
ukRobert  J. GaizauskasInst i tute for Language,Speech and Hearing /Dept.
Computer  ScienceUniv.
Sheffield, UKrober tg~dcs ,  she f .
ac.
ukh t tp : / /www,  des .
she f .
ac .
uk / re  search /groups /n ip /n ip ,  h tmlAbstractMuch progress has been made in theprovision of reusable data resources forNatural Language Engineering, such asgrammars, lexicons, thesauruses.
Al-though a number of projects have ad-dressed the provision of reusable algo-rithmic resources (or 'tools'), takeup ofthese resources has been relatively slow.This paper describes GATE, a GeneralArchitecture for Text Engineering, whichis a freely-available system designed tohelp alleviate the problem.1 Resource Reuse and NaturalLanguage EngineeringCar designers don't reinvent he wheel each timethey plan a new model, but software ngineers of-ten find themselves repetitively producing roughlythe same piece of software in slightly ditfenmtR)rm.
The reasons for this inefficency have beenextensively studied, and a number of solutions arenow available (Prieto-Diaz and t~h'eeman, 1987;Prieto-Diaz, 1993).
Similarly, the Natural Lan-guage Engineering (NLE l) community has identi-fied the potential benefits of reducing repetition,and work has been flmded to promote reuse.
Thiswork concerns either eusable resources which areprimarily data or those which are primarily algo-rithmic (i.e.
processing 'tools', or programs, orcode libraries).Successflfl examples of reuse of data resourcesinclude: the WordNet thesaurus (Miller el; al.,1993); the Penn Tree Bank (Marcus et al, 1993);the Longmans Dictionary of Contemporary Eng-lish (Summers, 1995).
A large number of pa-pers report results relative to these and other re-sources, and these successes have spawned a num-1See (Boguraev et al, 1995) or (Cunningham etal.,1995) for discussion of the significance ofthis label.ber of projects with similar directions, one of thelatest examples of which being ELRA, tile Euro-I)ean Language Resources Association.The reuse of algorithmic resources remains morelimited (Gunninghaln et al, 1994).
There are anumber of reasons for this, including:1. cultural resistance to reuse, e.g.
mistrust of'foreign' code;2. integration overheads.In some respects these probleIns are insolublewithout general changes in the way NLE researchis done researchers will always be reluctant touse poorly-documented or unreliable systems aspart of their work, for exmnple.
In other respects,solutions are possible.
They include:1. increasing the granularity of the units ofreuse, i.e.
providing sets of small building-blocks instead of large, Inonolithic systems;2. increasing the confidence of researchers inavailable algorithmic resources by increasingtheir reuse and the amount of testing andevaluation they are subjected to;3. separating out, the integration problems thatare independent of the type of informationbeing processed and reducing the overheadcaused by these problems by providing a soft-ware architecture for NLE systems.Our view is that succesful algorithmic reuse inNLE will require the provision of support soft-ware for NLE in the form of a general architectureand development environment which is specificallydesigned for text processing systems.
UnderEPSRC 2 grant GR/K25267 the NLP group at, theUniversity of Sheffield are developing a systemthat aims to implement this new approach.
Thesystem is called GATE - the General Architecturefor Text Engineering.~The Engineering and Physical Science ResearchCouncil, UK funding body.1057GATE is an architecture in the sense that itprovides a common infrastructure for building lan-guage engineering (LE) systems.
It is also a de-velopment environment that provides aids for theconstruction, testing and evaluation of LE systems(and particularly for the reuse of existing compo-nents in new systems).
Section 2 describes GATE.A substantial amount of work has already beendone on architecture for NLE systems (and GATEreuses this work wherever possible).
Three exist-ing systems are of particular note:?
ALEP (Simpkins, Groenendijk 1994), whichturns out to be a rather different enterprisefrom ours;?
MULTEXT (Thompson, 1995), a differentbut largely complimentary approach to someof the problems addressed by GATE, partic-ularly strong on SGML support;?
T IPSTER (ARPA, 1993a) whose architec-ture (TIPSTER, 1994; Grishman, 1994) hasbeen adopted as the storage substructure ofGATE, and which has been a primary influ-ence in the design and implementation of thesystem.See (Cunningham et al, 1995) for details of therelation between GATE and these projects.2 GATEArch i tec ture  overv iewGATE presents LE researchers or developers withan environment where they can use tools andlinguistic databases easily and in combination,launch different processes, say taggers or parsers,on the same text and compare the results, or, con-versely, run the same module on different ext col-lections and analyse the differences, all in a user-friendly interface.
Alternatively module sets canbe assembled to make e.g.
IE, IR or MT systems.Modules and systems can be evaluated (using e.g.the Parseval tools), reconfigured and reevaluated- a kind of edit/compile/test cycle for LE compo-nents.GATE comprises three principal elements:?
a database for storing information abouttexts and a database schema based on anobject-oriented model of information abouttexts (the GATE Document Manager -GDM);?
a graphical interface for launching process-ing tools on data and viewing and evaluatingthe results (the GATE Graphical Interface -GGI);?
a collection of wrappers for algorithmic anddata resources that interoperate with thedatabase and interface and constitute a Col-lection of REusable Objects for Language En-gineering- CREOLE.GDM is based on the T IPSTER document man-ager.
We are planning to enhance the SGML ca-pabilities of this model by exploiting the resultsof the MULTEXT project.GDM provides a central repository or serverthat stores all the information an LE system gen-erates about the texts it processes.
All commu-nication between the components of an LE sys-tem goes through GDM, insulating parts fi'omeach other and providing a uniform API (applica-tions programmer interface) for manipulating thedata produced by the system.
3 Benefits of thisapproach include the ability to exploit the ma-turity and efficiency of database technology, easymodelling of blackboard-type distributed controlregimes (of the type proposed by: (Boitet andSeligman, 1994) and in the section on control in(Black ed., 1991)) and reduced interdependence ofcomponents.GGI is in development at Sheffield.
It is agraphical launchpad for LE subsystems, and pro-vides various facilities for viewing and testing re-sults and playing software lego with LE compo-nents - interactively assembling objects into dif-ferent system configurations.All the real work of analysing texts (and maybeproducing summaries of them, or translations, orSQL statements, etc.)
in a GATE-based LE sys-tem is done by CREOLE modules.Note that we use the terms module and ob-ject rather loosely to mean interfaces to resourceswhich may be predominantly algorithmic or pre-dominantly data, or a mixture of both.
We exploitobject-orientation for reasons of modularity, cou-pling and cohesion, fluency of modelling and easeof reuse (see e.g.
(Booch, 1994)).Typically, a CREOLE object will be a wrap-per around a pre-existing LE module or database-- a tagger or parser, a lexicon or n-gram index,for example.
Alternatively objects may be devel-oped from scratch for the architecture - in eithercase the object provides a standardised API to theunderlying resources which allows access via GGIand I /O via GDM.
The CREOLE APls may alsobe used for programming new objects.The initial release of GATE will be deliveredwith a CREOLE set comprising a complete MUC-compatible IE system (ARPA, 1996).
Some ofh3Where very large data sets need passing betweenmodules other external databases can be employed ifnecessary.1058the objects will be based on freely available soft-ware (e.g.
the Brill tagger (Brill, 1994)), whileothers are derived from Sheffield's MUC-6 en-trant, LaSIE 4 (Gaizauskas et al, 1996).
Thisset is called V IE  a Vanilla IE system.
CRE-OLE should expmld quite rapidly during 1996-7,to cover a wide range of LE I{&D components,but for the rest of this section we will use IE asan example of the intended operation of GATE.The recent MUC competition, the 6th, detlnedfour IE tasks to be carried out on Wall StreetJournal articles.
Developing the MUC systemupou which VIE is based took approximately 24person-months, one significant element of whichwas coping with the strict MUC output specifica-tions.
What does a research group do which eitherdoes not have the resources to tmiht such a largesystem, or even if it did would not want to spendeffort on areas of language processing outside of itsparticular specialism?
The answer until now hasbeen that these groups cannot take part in large-scale system building, thus missing out on thechance to test; their technology in an application-oriented environment and, perhaps more seriously,missing out on the extensive quantitative wdua-lion mechanisms developed in areas such as MUC.in GATE and VIE we hope to provide an environ-ment where groul/s can mix and match elementsof our MUC technology with componeuts of theirown, thus allowing the benefits of large-scale sys-tems without the overheads.
A parser developer,for example, can replace the parser sut)plied withVIE.Liceneing restrictions preclude tile distributionof MUC scoring tools with GATE, but Shetfieldmay arrange for evaluation of data I)rodu(:ed byother sites.
In this way, GATE/V IE  will sup-port comparative valuation of LE conq)olmntsat a lower cost than the ARPA programmes(ARPA, 1993a) (partly by exploiting their work,of course!).
Because of the relative informality ofthese evaluation arrangelnents, and as the rangeof evaluation facilities in GATE expands beyondthe four IE task of tile current MUC we shouldalso be able to offset the tendency of evaluationprogralnnms to (lamt)en imlovation.
By increasingthe set of widely-used and evaluated NLP compo-nents GATE aims to increase the eonfiden(:e~ of LEresearchers in algorithinie reuse.Working with GATE/VIE,  the researcher willDon, the outset reuse existing components, I;heoverhead for doing so being much lower than isconventionally the case instead of learning newtricks for each mo<lule reused, tile common APIs41~m'ge-S(:alc IE.of GDM and CREOLE mean only one integrationnmchatiisih must be learnt.
And as CREOLE (,'x-pands, more and more modules and datahases willbe available at low cost.
We hope to move to-wards sub-component level reuse at some fl~turepoint, possibly providing C++ libraries as part ofall OO LE framework (Cunningham et al, 1994).This addresses the need for increased granularityof the units of reuse as noted in section 1.As we built our MUC system it; was often thecase that we were unsure of the implications forsystem performance of using tagger X instead oftagger Y, or gazeteer A instead of pattern marcherB.
In GATE, substitution of <'omponents i at)oint-and-click operation in tile GGI interface.
(Note that delivered systems, e.g.
EC proje, ctdemonstrators, can use GDM and CREOLE with-out GGI see below.)
This facility supports hy-brid systems, ease of upgrading and open systems-style module inte, rchangeability.Of course, GATE does not; solve all the prob-lems involved in plugging <liverse LE modules to-gether.
There are two barriers to such integration:?
incompatability of 7~presentation of informa-tion about text and tile mechanisms for stor-age, rctriewJ and inter-module communica-tion of that information;?
in(:ompatability of type of information usedand produced by different modules.GATE enforces a separation between these twoand provides a solution to the former (based onthe work of the T IPSTER architecture group(TIPSTER, 1994)).
This solution is to adopt acommon model for expressing information abouttext, and a common storage mechanism for man-aging that information, thereby cutting out signifleant parts of the integration overheads that oftenblock algorithmic reuse.
Because GATE placesno constraints on the linguistic formalisms or imformation content used by CREOLE objects (or,for that matter, the programming language theyare iinplemented in), the latter problem must besolved by dedicated translation functions e.g.tagsct-to-tagset mapp ing  and, in solne cases, byextra processing - e.g.
adding a semantic proces-sor to complement a bracke, ting parser in orderto produce, logical form to drive a discourse inter-preter.
As more of this work is done we can expectthe overhead involved to fall, as all results will beavailable as CIt,EOLE objects, hi the early stagesSheflMd will provide some resources for this workin order to get the ball rolling, i.e.
we will pro-vide help with CREOLEising existing syst;ems andwith developing interface routines where practicaland necessary.
We are confident hat integration1059is possible (partly because we believe that dif-ferences between representation formalisms tendto be exaggerated) - and others share this view,e.g.
the MICROKOSMOS project (Onyshkevychet al, 1994).GATE is also intended to benefit he LE systemdeveloper (which may be the LE researcher witha different hat on, or industrialists implementingsystems for sale or for their own text process-ing needs).
A delivered system comprises a setof CREOLE objects, the GATE runtime engine(GDM and associated APIs) and a custom-builtinterface (maybe just character streams, maybea Visual Basic Windows  GUI,  ... ).
The  interfacemight reuse code from GGI,  or might be developedfrom scratch.
The  LE  user has the possibility toupgrade by swapping parts of the CREOLE set ifbetter technology becomes available elsewhere.GATE cannot eliminate the overheads involvedwith porting LE systems to different domains (e.g.from financial news to medical reports).
TuningLE system resources to new domains is a cur-rent research issue (see also the LRE DELIS andECRAN projects).
The modularity of GATE-based systems hould, however, contribute to cut-ting the engineering overhead involved.Re ferencesAdvanced Research Projects Agency.
1993.
Pro-ceedings of TIPSTER Text Program (Phase I).Morgan Kaufman.Advanced Research Projects Agency.
1996.
Pro-ceedings of the Sixth Message UnderstandingConference (MUC-6).
Morgan Kaufmann.Black W.J.
(ed.).
1991.
PLUS - a Pragmatics-Based Language Understanding System, FLlnc-tional Design.
ESPRIT P5254 DeliverableD1.2.Boguraev B., R. Garigliano, J. Tait.
1995.
Edito-rial.
Journal of Natural Language Engineering,Vol.
1 Part 1, Cambridge University Press.Boitet C., M. Seligman.
1994.
The "Whiteboard"Architecture: A Way to Integrate Heteroge-neous Components of NLP Systems.
Proceed-ings of COLING.Booch G. 1994.
Object-oriented Analysis andDesign 2nd.
Ed.
Addison Wesley.Brill E. 1994.
Some Advances in Transformation-Based Part of Speech Tagging.
Proceedings ofThe Twelfth National Conference on ArtificialIntelligence (AAAI-94), Seattle, Washington.Cunningham H., M. Freeman, W.J.
Black.
1994.Software Reuse, Object-Orientated Frameworksand Natural Language Processing.
Conferenceon New Methods in Natural Language Process-ing, Manchester.Cunningham H., R.J. Gaizauskas, Y. Wilks.
1995.A General Architecture for Text Engineering(GATE) - a new approach to Language Engi-neering R&D.
Technical Report CS - 95 - 21,Department of Computer Science, University ofSheffield.Gaizausl~s R.J., K. Humphreys, T. Wakao, H.Cunningham, Y. Wilks.
1996.
LaSIE - aLarge-Scale Information Extraction System.
In(ARPA, 1996).Grishman R. 1994.
TIPSTER II Architecture De-sign Document Version 1.52 (Tinman Architec-ture).
TIPSTER working paper 1995, availableat http://www.cs.nyu.edu/tipster.Marcus M., B. Santorini, M. Marcinkiewicz.
1993.Building a large annotated corpus of English:the Penn Treebank.
Computational Linguistics19(2).Miller G.A., R. Beckwith, C. Fellbaum, D. Gross,K.
Miller.
1993.
Introduction to WordNet: anOn-line Lexical Database.
Distributed with theWordNet software, 1993.Onyshkevych B., Boyan, S. Nirenburg.
1996.
Ma-chine Translation 10:1-2, 1996.
(Special issue onbuilding lexicons for machine translation.
)Prieto-Diaz R., P. Freeman.
1987.
Status Report:Software Reusability.
IEEE Software, Vol.
4,No.
1.Prieto-Diaz R. 1993.
Status Report: SoftwareReusability.
IEEE Software, Vol.
10, No.
3.Simpkins N., M. Groenendijk.
1994.
The ALE.PProject.
Cray Systems / CEC, Luxemburg.Summers D. et al eds.
1995.
Longman Dictionaryof Contemporary English, 3rd Edition.
Long-man, Harlow.Thompson H. 1995.
MULTEXT Workpackage 2Milestone B Deliverable Overview.
LRE 62-050MULTEXT Deliverable 2.TIPSTER Architecture Committee.
1994.
TIP-STER Text Phase II Architecture Concept.TIPSTER working paper 1994, available athttp://www.cs.nyu.edu/tipster.1060
