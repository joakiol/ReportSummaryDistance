Normal  Form Theorem Prov ing  fo r  the  Lambek Ca lcu lus  ~Mark HeppleCent re  for Cogni t ive  Science, Un ivers i ty  of Ed inburgh ,2 Bucc leuch Place, Ed inburgh ,  Scot land.e-maih markQuk.ac.ed.epistemiAbst rac tThe possibility of multiple equivalent proofs presents a problemfor efficient parsing of a number of flexible categorial grammar(CG) frameworks.
In this paper I outline a normal form sys-tem for a sequent formulation of the product-free associativeLambek Calculus.
This le,'~ls to a simple parsing approach thatyields only normal form proofs.
This approach is both ~afe inthat all distinct readings for a sentence will be returned, andoptimal in ~;hat here is only one normal form proof yieldingeach distinct meaning.1 The  Lambek  Ca lcu lusThe  (product - f ree)  Lambek  Calcu lus  (Lambek,  1958)is a h ighly  f lexible CG f ramework  that  can be given aGentzen.
.style sequent  fo rmula t ion  wi th  the fol lowingrules :23(1) Axiom: x: f  =~- x: /Righ~ rules: F, y:i ~ x:f  y:i, F ~ x:fF ----> x/y:Ai.f \[/R\] F -~ x\y:Ai.f\[\rt\]Left :rules: &, =.~ y:g F, x:fg, A ~ z:hI/L\]F, x/y:f ,  A, A => z:h~-~ y:g F, x:fg, A => ~:h. .
.
.
.
.
.
.
.
.
.
.
.
.
\[\L\]F, A, x\y: f ,  A =?- z:hCut rule: A ==> x:\]  F, x:f, A --> y:g\[cut\]F, A, A --'~- y:gIn this fo rmulat ion ,  which we wil l  call L, each type isassoc iated with a lambda expression,  correspondingto its mean ing ,  and the rules specify tlow these arecont ructed .
The  left rules con 'espond semant ica l ly  tofunct iona l  appl icat ion,  the r ight  rules to funct iona labst ract ion .
The  lambda express ion for the suecedentof the root  sequent  corresponds to its meaning as acombinaff ion of the meanings  of the antecedent  types.Th is  wil l  be loosely refered to as the 'mean ing  (or1I am grateful to Guy Barry and Olyn Morrill for discussionof the ideas in this paper.
Thanks also to Inge Bethke andNeil Leslie for comments on a draft.
All errors are my own.This work was carried out under ESRC Postgraduate AwardC00428722003.21n the notation used here, types x/y and x\y both denotefunctions from y (the argument ype) into x (the value type).3A sequent is an object of the form F => x, where =0 , thederivability relation, indicates that x can be derived from F.Specific to '~he Lambek Calculus, we require that each sequenthas a non-empty antecedent sequence and precisely one sucre-dent type.
We call the bottom-most sequent of any proof theroot, and the inference that has the root as its conclusion theroot inference.
We call to the right hand premise of a left ruleits major premise, its other the minor premise.
In addition, wecall the nudn branch of any proof that (unique) path Sl, s 2..,snthrough the proof such that s I is the root sequent, sn corre-sponds to an axiom instance, and non of s2,..,sn is the minorpremise of a left inference.reading)  assigned by the proof ' .
We assume that  eachantecedent  ype of the in i t ia l  sequent  is assigned ad ist inct  var iab le  for its semant ics .
4 The  semant ics  oftypes wil l  somet imes  be omi t ted  to save space.Lambek  (1958) demonst ra tes  that  the cut  rule ise l iminable  in the sense that  all theorems of the cal-culus Call be proven using just  the remain ing  rules.These remain ing  rules prov ide  a decis ion procedurefor theoremhood (since each inference removes  a con-nect ive,  so that  search for proofs  is f inite), and wecons ider  only these in the  rest of the paper f i2 The  Prob lem o f  Mu l t ip le  Equ iva lent  P roo fsThe calculus L typica l ly  al lows more than  one proofassigning each possible read ing  for a sequent.
Weshal l  cons ider  some i l lustrat ive examples .
The fol-lowing two proofs assign the  same reading:z:h =:> z:h y:gh ~ y:ghi/L\]y/'~:g, z:h y:gh x:fgh ?
:> ~ x.:gh I/L\]x/y: f ,  y/'~:g, z:h o x:fghy:gh ~ y:gh x:fgh ~ x:fgh\[/L\]~:h ~ ~:h x/y: f ,  y:gh ::~ x:f#h\[/L\]x/y: / ,  y/~:g, z:h :?
x:fghHere we see that  the operat ions  involved in 'bu i ld ing 'some argument  type  (here y) may be per fo rmed ei-ther  before or after the left inference on the functorrequi r ing that  a rgument  (here x /y ) .
Another  exam-ple of d is t inct  proofs assigning the same meaning isthe fol lowing (in both  of which the subproof  for thepremise x /y ,  y => w/ (w\x )  is omi t ted) :z:g :~ z.:o x/y::g, y:i :> w/(w\x):~j.
(j(ygi))I/L)x /y / , :y ,  ~:0, y:~ :~ w/(w\x):~j.
(j(:gi))\[/R\]xly/z: f ,  z:g ::~ w/(w\x)/y:Ai.Aj.
( j(fgi))x/y:/g, y:i : .
w/(w\x):~j.
(j(ygi))\[/n\]z:g -~ ~:g x/y:fg, y:i ~ w/(w\x):Ai.Aj.
(j(fgi)) \[/LJx/y/z: f ,  ~,:g ::z, w/(w\x)/y:M.Aj.
( j(fgi))These show a case where a r ight inference can equal lywell  be made ei ther  before or after some unre lated left4This is because we are interested in the equivalence or notof proofs aside from contingent equivalences that may steinfrom particular semantic assignments o antecedents.6Moor~gat (1990) demonstrates that cut elimination pre-serves the strong recogrdsing capacity of the calculus in the sensethat the systems with and without cut will yield precisely thesame readings for any theorem modulo logical equivalence.173inference.
A final example:x/y:f :=~ x/y:f y:g ::~ y:g x:,fg :=~ x:fg\[/L\]x/y:f, y:g =-~ x:fgx/y:\] :=> x/y:Ag.fg I/R\]Here we see that where the type instantiating an ax-iom is functional, it is also possible to 'unpack'  thetype and 'equate'  subformulas of this in further ax-iom instances.
The lambda expressions assigned bythese two proofs are equivalent under r/-reduction.The existence of multiple equivalent proofs presentsa problem for efficient theorem proving based on thecalculus L. Search for proofs must be exhaustive toensure that all different 'readings' for a given sequentare found, and a naive theorem prover will expendconsiderable ffort constructing proofs that assign thesame meaning.
This radically reduces the efficiencyof Lambek Calculus theorem proving.
Hepple andMorrill (1989), working with a somewhat differentCG framework that also admits multiple equivalentproofs, suggest hat this problem be dealt with by de-riving a notion of normal form (NF) for proofs, andthen adapting the parsing method such that this onlyreturns NF proofs.
Khnig (1989) takes this kind ap-proach to handling the problem of multiple equivalentproofs for Lambek sequent heorem proving, generat-ing a notion of NF for such proofs, and deriving fromthis a parsing strategy intended to compute only NFproofs.
:However, Khnig's parsing algorithm fails toexclude all non-NF proofs when used with a standardpropositional Lambek Calculus.In this paper I define a NF system for the sequentformulation of the (product-free) Lambek Calculus,which gives rise to a parsing approach that yields onlynormal proofs.3 A New Approach3.1 Headed Proo fsWe begin by introducing the notion of head type, asthis is crucial to the approach.
We use symbols P ,  Q,R,  etc to designate proofs, and the notation P(S) torepresent a proof P of the sequent S. Intuitively, thehead type of a sequent S under some proof P (S) is theantecedent type of S that has widest scope semanti-cally.
The meaning assigned by a proof is always alambda expression of the form: 6(3) y:j" ~ y:)" x:gi f ::~ x:gi fz:i =~ z:i y:f, x\y:gi :=:, x.gtf \[/L\]y:f, x\y/z:g, z:i ~ x:gi$y:y, x\y/z:g ~ x/~:Ai.
(gif) I/R\]\[\L\]The head type here is the antecedent x \y /z  since it isthe semantic variable g of this that has widest ,~cope inthe meaning assigned by the proof.
Note the charac-teristic of this proof that a value subpart of the headtype is 'equated'  with a value subpart of the succe-dent type in the sense that these together iustanti-ate opposite sides of an axiom instance, in particularthat axiom instance at the top of the main br,~nch (cf.footnote 3).
This fact is the syntactic counterpart ofthe head type having the widest scope semantically.
7More generally, for the head H of a sequent undersome proof and the sole antecedent A of the proof'smain branch axiom, it is always the case that A is avalue subformula of H (or is H itself).
Not all proofshave a head, as in (4), where the variable that haswidest scope in the meaning assigned by the proofdoes not originate with an antecedent of the initialsequent, but rather with a type that is ' introduced'in a right inference:(4) y:g =~ y:g x:fg :..v. x:fgI/L\]x/y:f, y:g =~ x:fg z:i(fg) ~ z:i(fg).\[\L\]x/y:f, y:g, ~\x:i ::V. z:i(fg)\[/n\]x/y:I ,  y:g ~ ~/(~\x):~.C~Cfg))We use numerically subscripted proof symbols (e.g.P3~ Pn ,  Qm~ etc) to refer to the headedness ofproofs, in particular a proof Pn,  n > 1, is a headedproof, with the head being the nth member of theantecedent sequence of the root sequent.
If n = 0,then the proof is unheaded.
Given the relation men-tioned above between the head of a proof and themain branch axiom of this, we can give a recursivecharacterization of the form of subscripted proofs asin (5) (where superscripted Greek letters are usedto indicate sequences of given numbers of types, i.e.71" n corresponds to a sequence of n types):(5) Each proof Pn is of one of the forms:a. axiom where n = 1x==~x(2) Avl..v,~.
(hU1..Um) (n, m >_ O)where h is some semantic variable.
The head type ofthe sequent under the given proof is that antecedentwhose meaning is the variable h. Consider (3):b. qraCy, iv ::~ x) where ((m > 0) & (n =: m-  1))\[\RI or (Cm = 03 & (~ --: 0)) 71- =:~ x\ye.
Qm(r k, y =v.
x) where ((m : k + 1) & (n --- 0))~k ~ x/y \[/rt\] or CC'~ < k) ~ C" ::: "q)eNote that the meaning assigned by any (cut-free) proof isalways be a lambda expression in/~-normal form (i.e.
contain-ing no subterms of the form (Av.P)Q) - -  provided that themeanings assigned to the root sequent antecedents are in f~-normal (which is the case here, since we assign these distinctvariables) as may be shown by an inductive proof.7Note the semantic significance of the main branch axiom inthis.
The semantics assigned by a proof P always correspondsto that of the succedent of the main branch axiom of P havingundergone zero or more lambda bstractions.
This follows fromthe semantics of the rules of L.174d.
R(s  k .~y)  q ; (?%x,?~z)\[\L\]?~ ~k x\y, ?
.
zwho,'e ((~" < .
*) a (~ = ~'))or ((j > m) & C n=j+k) )e. ~(~k,:~y) QsC?
'Lx ,?~)  \[/L\] ?,,, ~/y, ~k, ?
=~,where ((j _< m + 1) & (n = j))or ((j > m + 1) ~ (,, = i + k))The base case for the definition is where a subproofconsists only of an axiom inference, in which case thehead of the proof is the single antecedent member(and hence, n = 1).
From there, the position of thehexad can be kept track of by counting the numbero:l' antecedents added in beside the head as subproofsare combined.
Note that every cut-free proof in L isa proof P~ '.for some value of n.82  A Const ruct ive  Not ion  o f  Normal  FormIn (6), a recursive definition is given for a construc-t ive notion of NF (CNF).
For this definition, it isu,.
;eful to distinguish two subtypes of proof: T 1 and"r:!.
The set of ~'1 proofs is precisely the set of CNFproofs.
The 'r2 proofs are a subset of the 71 proofs- -those whose main branch includes no right inferences.
(6) The set of CNF (T1) proofs is the smallest set such that:a. i\] x is an atomic type, then axiom E T 2x =:2> xb, if P,,+t(Tr n, x, ?
=~ z) @ T 2 arm Q(?
==:, q) 6 7" 1the.
q (?
~ q) p,,+~(~r '~, x, ?
~ ~) e r2I/L}~r", :,/q, ?, ?
~\[\L\]~"~, ?, ~\q, ?
~c.
if P E T2 then P C T 1d.
if P(Tr, x => y) ~ T 1 thenP (~, x -~ y) e r l ,  .
.d p (x, r : .
y)I/R\]r -~ y/x or ~ y\x(~ TlGiven (6a), CNF proofs only contain axiom leavesthat are instantiated with atomic types.
(6b) allowsfo:c the occurrence of left inferences in CNF proofs,aI~d requires that these must be with respect to thehead of the major prenfise's subproof (~major sub-proof').
Given (6c), every ~r 2 proof is a 71 proof also.Given (6d), only T1 proofs may have a right rulethe root inference--no ~r2 proof will be of this form.Since the major subproof of a left inference must  bea 7 2 proof, a right inference may never occur abovesL left inference on the main branch of a CNF proof.Thus, the main branch of a CNF proof is always ofthe following form (starting at the root): zero or morerigilt inferences, followed by zero or more left infer-ences, terminating with an axiom inference.
The mi-nor subproofs of left inferences are T 1, and so are alsoof this general form.We will see later how we can ensure that the the-orem prover generates all and only the CNF proofsof a sequent.
However, for such a move to be useful,the notion of CNF must satisfy certain requirements.Most importantly, generating only CNF proofs shouldbe safe in the sense that the theorem prover returnsevery distinct reading of a sequent that can be as-signed.
This will be the case if for every proof of asequent, there exists a semantically equivalent CNFproof.
To demonstrate this, a second notion of nor-mal form will be defined, using the method of proofreduction, which is equivalent o the constructive no-tion of NF, and provably complete.3.3 A Reduct ive  Not ion  of  Normal  Form8.3.1 Reduct ion  and  Normal  FormsA standard approach to defining NFs involves defin-ing a cont ract ion  relation (1>1) between terms.
Thecontraction relation is stated as a number of contrac-tion rules, each of the form X ~>1 Y (in which theform on the left is termed a redex and the form on theright its cont ractum) .
Each contraction rule allowsthat any term containing an occurrence of a redexmay be transformed into a term in which that occur-rence is replaced by its contractum.
A term is saidto be in NF if and only if it contains no occurrencesof any redex.
The contraction relation generates areduct ion relation (I>) which is such that X reducesto Y (X i> Y) if and only if Y is obtained from X bya finite series (possibly zero) of contractions.
A termY is a NF of X if and only if Y is ~NFandX ~- Y.3.3.2 P roo f  Reduct ion  and  the  Lambek Calcu-lusWe shall next consider a set of contraction rulesstated on proofs in L. 8 These together define a re-ductive notion of NF.
A total of eighteen contractionrules are required, which fall into four groups.An instance of the first group of contraction rulesis shown in (7).
(7) x/y ::> x/y y ::> y x ::> xt,, I/L\]x/y, y ==:, xx/y :* x/y l/R\]This contraction rule expands an axiom leaf insta:n-tinted with a functional type to give a subproof con-taining two axiom leaves, each of which is instantiatedwith a 'simpler' type than the original axiom (undersome metric of simplicity).
There is a second rule inthis group for which the functional type in the redexis leftward directional.An instance of the second group of contraction rulesis shown in (8).
In the redex, a right inference isapplied to the major premise of left inference.
In thecontractum, the subproof has been restructured soSProof reduction originates with Prawitz (1965).175that the right inference is applied to the root sequent,and the left inference to its sole premise.
(8) Q(?, x, ?, w ~ z)\[/RIP(~ ~ y) ?, ~, ?
~ ~/W\[/Lj?, x/y, ~, ?
=~ ~/wPCr =, y) qC?, ~, ?,  w :~ ~) \[/L\]>, ?,x /y ,  ~, ?
,w  ~ ~l/R\] ?, x/y, ~, ?
~ ~/wThere are four contraction rules of this group whicharise with the directionality of the connectives for thetwo inferences.An instance of the third group of contraction rulesis shown in (9).
Note that this makes useof the subscripted proof notation, allowing us toreeognise where a left inference is with respect tothe head of the stated subproof.
In the subproofP, ,+1(?
'~, x, ?, v, c~ =:> z), the head is the type x. Itfollows that the type x /y  is the head of the entireredex proof, and that v /w is not.
Thus we can seethat in the redex, a head left inference (i.e a left infer-ence with respect to the head of the given subproof)is applied to the major premise of non-head left in-ference.
In the contractum, the subproof has beenrestructured so that the head inference is applied tothe root sequent, and the non-head inference to itsmajor premise.a(-~ :~ w) ?
", x/y, ~, ?, v, ~ ::> ,~I/L\]?
",  x/y, r, ?, v/w, ~,, ~ :~>, R("/ :=~ w) P, ,+t(?
n, x, ~', v, ?r :-~ z)\[/L \]Q(.,r ~ y) en, x, ?, vlw, ~, a ~I/L}? '
,  ?ly, ~r> ?, vlw, ~, a ~There are eight contractio-1 rules in this group, whicharise with the directionality of the connectives in-volved, and whether the head functor occurs to theright or left of the non-head functor.An instance of the fourth group of contraction rulesis shown in (10).
In the redex, a head-left inferenceis applied to the major premise of a non-head left in-ference, where the latter can be seen to in-part servethe purpose of 'building' the argument required bythe head functor.
In the coutractum, the inferenceshave been reordered so that the head inference ap-plies to the root sequent, and the non-head inferenceapplies to the minor premise of this.
(~_01 qC~r, ~, ~ ~, y) p,,+~(?~, ?, ~ ~ ~)I/L}I/L\] ?
",  ?/y, 7r, ~/w, ?, -y, ~ ~R(?
=~ w) q(x,  v,-y ~ y) /L_ _ \[ le, ,+,(?,~I/L\]We :require four contraction rules of this pattern,176which arise with the directionality of two functors(the left-right order of the two functors being deter-mined by the head functor).We call any proof that contains no redexes (whichis consequently a NF under the reduction system)an irreducible normal  fo rm (INF).
It is easily veri-fied that for each contraction rule, the contractumsubproof assigns a lambda expression for the root se-quent combination equivalent o that assigned by theredex.
Thus, meaning is preserved under contraction,and also in turn under reduction.
Hence, an INF ofany proof P always assigns the same reading as P .We will next demonstrate that normal isat ion holdsfor the reductive NF system; that is, that every proofhas an INF.
This property follows provided that thefollowing (stronger) property holds:(11) Strong Normalisation: Every reduction is finite.Thus, for every proof, a finite series of contractionsalways leads to an irreducible proof.To prove that every reduction is finite, it is suf-ficient to give a metric that assigns to each proof afinite non-negative integer score, and under which itcan be shown that every application of a contractionrule reduces the score of a proof by a positive integeramount.
The scoring system given in (12) satisfiesthese requirements?
(12)Thea.score for any proof P (written sc(P )) is as follows:if P is an axiom leaf instantiated with type xthen so(P) = factorial(3 ate(x))b. ff P has a right inference at its root, wi~h premisesubproof Q then sc(P) = sc(Q) + 1c.
if the root inference of P is a head left inference,with major subproof Q and minor subproof R thensc(P) = (sc(R) + 1)sc(q) + 1d.
if the root inference of P is a non-head left infer-ence, with major subproof Q and minor subproofR tt~ert so(P) = (sc(R) + 1)so(q)3.4 Equ iva lence  o f  the  Two SystemsWe write CNF(P)  and INF(P )  to indicate that aproof is in NF under the respective systems.
The twoNF systems can be shown to be equivalent in thatthey designate precisely the same sets of proofs to bein NF, i.e:(13) Lemma h for all P, CNF(P) ~-~ INF(P)This follows given Lemmas 2 and 3.
(14) Lemma2: for all P, ~INF(P) --~ ~CNF(P)It is easily checked that no redex subproof is in CNF.Hence, any reducible proof is not a CNF.
(15) Lemma 3: for all P, -~CNF(P) --* -,INF(P)9The atmnic type count (ate) of a type is defined as follows:(i) ate(x) = 1 if x is an atomic type; (ii) ~,tc(x/y) = atc(x\y)= ate(?)
+ ,~tc(y)This may be proven by induction on PGiven the equivalence of the two NF systems, andthe normalisation result for the reductive NF system,it follows that for every proof in L, there exists a CNFproof that assigns the same reading.
Hence, generat-ing all and only the CNF proofs of a given sequentis safe in.
the sense that we can be sure all possiblereadings for the combination will be returned.3.5 The  Un iqueness  of  Normal  FormsThe approach wi!l be optimal if there is only a sin-gle CNF asslgnhlg each distinct reading.
As we havealready noted (footnote 6), the meaning assigned byany (cut-free) proof will be a lambda expression thatis in/%normal form.
Extensional equivalence for theLambda Calculus is given by the /~\]-reduction sys-tem.
Since this system exhibits the Church-Rosserproperty~ any two terms in fl-normal form will beequivalent just in case applying some sequence of ~/ocontractions (i.e.
Av.
fv  ~>1 f)  to each yields the sameterm (nmdulo c~-conversion).Let us consider two distinct CNF proofs P and Qof some sequent S. Assume that these differ ill someregard along their main branches.
The bottom part ofeach main branch will consist of a sequence of zero ormore right inferences.
The length and nature of thissequence of inferences is fully determined by the typeof the succedent in the root sequent S, and so P andQ may not differ in this regard.
Thus, the meaningsassigned by P and Q will be lambda expressions ofthe following forms (in which the lambda abstractionsAv:..v,~.
correspond to the initial sequence of rightinferences):P : .\v:..v~.
(fYi..U,,~)Q : ,~vl..v,.
(oUd..uU)The remainder of each main branch will consist ofsome sequence of head left inferences, terminatingin an axiom instance.
Consequently, the two CNFproofs may differ along their main branch only intwo regards: (i) a different antecedent type is thefunctor for the first left inference (this determiningthe functor for the remaining left inferences on themain branch), (ii) even if the same type is chosen forthe functor of the first left inference, at some point adifferent ,;ubsequence of antecedents is chosen to 'con-struct' the argument of the functor.
In either case,the semantics assigned to the two proofs will be non-equivalent.
Thus, for case (i) f and g will be distinctvariables.
In both cases~ it may be that m : \]c, andeven if ra --= \]c, at least some of the Ui and Ui I willdiffer in the lambda variables that m'e put together toform these (i.e.
the lambda expressions correspondingto antecedent semantics).
It is evident that in any ofthese eventualities, no sequence of ~?-contractions canyield a common term from two such terms and sothe two proofs must assign distinct readings.
If thetwo NF proofs are similar along theh" main branches,they must differ in the minor subproof or some leftinference.
The same arguments apply in turn that ifthese subproofs differ in form, then they must be non-equivalent.
Hence, distinct CNF proofs always differsemantically, and so the uniqueness property holds.Since reduction preserves meaning, and distinct NFsare non-equivalent, it follows that every proof has aunique NF.
1?3.6 Normal  Form Theorem Prov ingFor the purpose of theorem proving, we specify anamended version of the calculus, which we term the'p~sing calculus' (PC), which is such as to only allowthe construction of proofs that con'espond to CNFproofs.
To this end, we move from a system whichuses a single notion of sequent, to one which distin-guishes two different types of sequent Type 1 andType 2--this type being marked as a subscript on thederivability arrow =>.
The point of this distinction isto allow us to limit the form of the proof that may begiven for some sequent merely by its type.
The Type1/Type 2 distinction essentially corresponds to the~1/72 distinction in the definition of CNF.
For Type2 sequents we distinguish the antecedent element thatmust be the head of any proof of the sequent by di-viding the antecedent sequence into three subparts,separated by -+-'s, as for example in ?+x+Tr => z, ofwhich the first and last parts are (possibly empty)sequences of types, and the middle paa't a single typethat is required to be the head of any proof of thissequent.The following set of inference rules allow onlyproofs of the required form to be constructed:(16)Axiom: e~-x:f-~e =~,,~x:f where x is an atomictype (an(l e denotes theen~pty sequence)Right rules: F, y:i ~x : f  I/R\] y:i, 1" ~:x : fr ~,?/y:~i./ r ~,x\y:~;./\[\R\]Left rules: A =>lY:g F+x: fg+A =:>~z:h I/LiF+x/y:f+(A, A) :>:z:hA =>ly:g F?x:fg+A =>2z:h \[\L\](F, ~,)+?\y:f" i -A -->~ z:h\[2~-*1\] rule: A+x: f+F  =>~y:g where y is an ~tomi(:\[2~-*1\] type, and x := y or xA, x:f, r -~ly:g a function onto yObserve that the axiom inference specifies a Type 2sequent, with the single antecedent type being thedesignated head of that sequent.
This correspondsto clause (a) of the definition of CNF in (6).
Theleft inference rules have Type 2 sequents for theirconclusion and major premise and a Type 1 sequentfor the minor premise.
Note that the active type forthe inference is the designated head of the conclusionand its value subformula is the designated head ofthe major premise.
This corresponds to clause (b) ofthe CNF definition.
The right rules have a Type 1l eFrom this it follows that the reductive NF system exhibitsthe Church-Rosser property,177premise and conclusion, in line with clause (d) of theCNF definition.
In addition, there is a rule \[2~-41\],corresponding to the clause (c) of the CNF defini-tion.
Note there is a condition on the rule whichdoes not correspond to anything hi clause (c).
It iseasily shown that this condition is always fulfilled byT2 proof~s, so its addition does not alter the set ofproofs admitted by the PC.
However, the conditionwill considerably limit the application of the \[2~-.1\]rule in top-down search for proofs and so increase theefficiency of theorem proving.
It is easily shown thatPC and CNF proofs exist in 1-to-1 correspondence.4 D iscuss ionIt can be seen that the form of any CNF proof isstrongly tied to the form of the lambda expression itassigns a.s its meaning.
As we have seen, the lambdaterm corresponding to the meaning of any (cut free)proof in I, is always a fl-NF term of the form:~vl..v~.
(hUi..U~) (n, m > 0)where h is a variable, and the main branch of a CNFproof is always of the following form (starting at theroot): zero or more right inferences, followed by zeroor more left inferences, terminating with an axiominference.
The correspondence b tween the two is asfollows: the initial sequence of right inferences cor-responds to the lambda abstractions of ~he variablesvi..v~, and the ensuing left inferences are just thoserequired to apply the variable h (the semantics of thehead) to each of its arguments Ui..Um in turn, withe~ch of the subterms Ui being 'constructed' in thesubproof or a minor premise.These observations provide the basis for relatingthis approach to that of Khnig (1989), mentioned ear-lier.
Khnig uses a non-standard method for arrivingat a notion of NF proof which involves firstly map-ping proofs into objects called 'syntax trees', whereproofs that yield the same syntax tree form an equiv-alence class, and then mapping from each syntax treeto a single NF proof.
From the form of such NFproofs, Khnig derives a set of Cnesting constraints'which are used to limit the operation of a top-downtheorem prover, and which are such that they willnever prevent he construction of any NF proof.
AsKhnig points out, however, the ~nesting constraints'do not exclude the construction all non-NF proofswhen used with a standard propositional formulationof the Lambek Calculus (though better results areobtained with a unification-based version of the Lam-bek Calculus that Khnig describes).
Khnig's syntaxtrees can be seen to bear a strong correspondence,in terms of their structure, to the lambda term forthe meaning assigned by a proof (although the for-mer include sufficient information, of types etc, toallow (re)construction of a complete proof for the ini-tial sequent), and the relation of Khnig's NFs to thesyntax trees used to define them closely parallels therelation between CNF proofs in the present approachand their corresponding lambda terms.178A further topic worthy of comment is the rela-tion between the current approach and natural de-duction approaches uch as that of Prawitz (1965).As Prawitz observes, sequent calculi can be under-stood as meta-calculi for corresponding natural de-duction systems.
Introduction rules correspond toright rules and elimination rules to left rules.
InPrawitz's NFs, an introduction rule may never ap-ply to the major premise of an elimination rule (sucha subproof being a redex) so that eliminations alwaysappear above introductions on the main branch ofa NF proof, li which seems to parallel the form ofCNF sequent proofs.
However, the relation is notso straightforward.
For a natural deduction formu-lation of the (product-free) Lambek Calculus, i2 theoccurrence of a relevant redex in a natural deductionproof (i.e.
where an introduction rule applies to themajor premise of an elimination) corresponds to theoccurrence of a fl-redex in the corresponding proofterm.
For sequent proofs, however, the occurrenceof a fl-redex corresponds to a use of the cut rule inthe proof--the lambda terms for cut-free proofs arealways in fl-NF.
Unfortunately, limitations of spaceprevent due discussion of this topic here.Re ferencesHepple, M. 1990.
Grammatical  Relations and tileLambek Calculus.
In Proceedings of the Sym-posium on Discontinuous Constituency.
Institutefor Language Technology and Artificial Intelligence,Tilburg University, The Netherlands.Hepple, M.R.
and Morrill, G.V.
(1989).
Parsing andDerivational Equivalence.
In: Proceedings of the4th Conference of the European Chapter of the As-sociation for Computational Linguistics.
Manch-ester, UK.
1989.Khnig, E. (1989).
Parsing as Natural Deduction.
In:Proceedings of the 27th Annual Meeting of the Asso-ciation for Computational Linguistics.
USA.
1989.Lambek, J.
1958.
The mathematics of sentence struc-ture.
American Mathematical Monthly, 65,154-170.Morrill, G. 1990.
Grammar as Logic.
To appear in:Prodeedir~gs of the Seventh Amsterdam Colloquium.University of Amsterdam.Moortgat, M. 1990.
Cut Elimhlation and the Elim-ination of Spurious Ambiguity.
To appear in:Prodeedings of the Seventh Amsterdam Colloquium.University of Amsterdam.Prawitz, D. 1965.
Natural Deduction: A Proof-Theoretical Study.
Ahnqvist and Wiksell, Uppsala.liThe terms main branch, major premise, tc have been bor-rowed from Prawitz, and are defined analogously for his system.12Note that a natural deduction formulation of the Lam-bek Calculus differs from standard natural deduction systemsin that the linear order of assumptions within a proof is im-portant, (roughly) corresponding to the linear order of wordscombined.
See, for example, the 'ordered' natural deductionformulations outlined in Hepple (1990) and Morrill (1990).
