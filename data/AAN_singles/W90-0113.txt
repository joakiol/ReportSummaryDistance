An Object Oriented Approach to Content Planning forText GenerationUrsula Wolz lColumbia UniversityDepartment ofComputer ScienceNew York, New York 10027(212) 854 - 8124email: wolz@cs.columbia.eduAbstractI'his paper describes GENIE, an object-orientedarchitecture that generates text with the intent of extendinguser expertise in interactive environments.
Suchenvironments present three interesting oals.
First, toprovide information within the task at hand.
Second toboth respond to a user's task related question andsimultaneously extend their knowledge.
Third, to do this ina manner that is concise, clear and cohesive.
Instead ofgenerating text based solely on either discourse goals,intentions, or the domain, we found a need to combinetechniques from each.
We have developed an objectoriented architecture in which the concepts about whichwe talk (domain entities), the goals that may beaccomplished with them (intentions), end the rhetoricalacts through which we express them (discourse goals) arerepresented as objects with localized knowledge endmethods.
This paper describes how current ext planningmethods were insufficient for our needs, and presents ourobject-oriented method as an alternative.1.
IntroductionA practical problem for text generation is how to producegood advice for users of interactive nvironments.
Insuch settings users attempt to accomplish tasks bycombining the set of available commands in a potentiallyinfinite number of ways.
In this setting, the textgeneration problem amounts to describing and justifyinga plan of action to the user, or describing trade-offsbetween alternative plans, for example when suggesting abetter way to do a task.
In developing GENIE \[Wolz et al90, Wolz 90a, Wolz 90b\], an advice giving system foraccomplishing tasks using Berkeley Unix Mail, wediscovered that current approaches to content planningwere insufficient for our needs in two ways.
First, to1Supported in part by ONR grant N00014-82-K-0256, by NSF grantIST-84-51438, a grant from DARPA, and a grant from Siemens Researreh andTechnology Laboratories.produce the kind of informative responses we found innaturally occurring settings, we needed to carefullypartition how textual, domain, and intentional knowledgeinfluence the generation process.
Second, in definingtextual structure, we found that both schemas \[McKeown85\] and simple plan operators \[Hovy 88, Moore & Paris89\] could not model the general structures we requiredwithout introducing far too many special case operators.Instead we found we could eliminate special caseoperators by using a two stage process of liberal,minimally constrained planning, followed by pruning inwhich speech acts contend for inclusion in the text.Both partitioning and our two stage planning process fallnaturally within an object oriented paradigm.
Objects ofour three types, namely domain, intentional and textual,have "knowledge" of how they participate in developing aresponse to a question.
This allows domain knowledge toplay more of a role in structuring response content than inother systems.
More importantly, as this paper will show,all three can have localized knowledge of how theyinteract with other objects which reduces the need forspecial cases.The next section will elaborate on the practical problemof advice giving in open-ended settings, define our goalsfor text generation i  such settings, and justify why ourgoals are appropriate.
Section 3 shows why schema ndplan operators are insufficient.
Our object-orientedapproach is described in section 4, with an emphasis ontext structuring.
Section 5 reports on the status of GENIE,and section 6 presents our conclusions.2.
BackgroundThe GENIE project at Columbia addresses the problem ofhow to extend users' expertise in interactiveenvironments.
A communicative problem arises in suchenvironments because users tend to get stuck in a starterset \[Finin 83\] of commands and never progress to moresophisticated methods for accomplishing tasks.
Question9fianswering in such an environment requires that a textgenerator not only respond to the specific question asked,but also attempt to add a little extra information in orderto enrich the user's knowledge.
The domain we consideris Berkeley Unix Mail, chosen because it is a microcosmof Unix, providing extremely rich and sophisticatedfunctionality with a frustratingly hard to learn interface.The domain also allows us to focus on extending systemexpertise rather than domain problem solving since theactivities, sending, receiving and managing messages, donot require high level thinking skills.Interactive environments can be characterized ascomputational tools that allow users to accomplish tasks.Examples range from desk top aides such as wordprocessors, message systems and spread sheets, tocad/cam systems and multi-purpose programmingenvironments.
Typically a core set of functionality canbe combined and manipulated to construct solutions todomain specific problems.
A user approaches such anenvironment with a domain specific or computationalgoal, and constructs a plan to satisfy that goal with thefunctional mechanisms available in the environment.In such open-ended settings no two users will approachthe system with the same background or needs.Consequently the degree of difficulty of functionality ismore dependent upon the particular experience of a user,than on broad categories of functional difficulty or userexpertise \[Chin 88\].
Users tend to develop their ownhighly personal repertory of commands.
For example, an"expert" user who has extensive experience readingmessages, and a "novice", one who has almost noexperience reading messages, may both need to beintroduced to a method for storing mail in files.
The levelof expertise of the first user is less significant hanwhether his or her particular expertise contributes to howmuch more easily the new method can be communicated.Therefore a particular goal may be satisfied by more thanone plan, where the criteria for which plan is "best" isdependent upon the context of the task at hand.
Thiscontext can be viewed as a model of the user, and it is theprimary influence on the choice of content and thestructure in which that content appears as text.
It consistsof:?
The discourse context w The type ofquestion the user is asking, and thespecificity of the question.
For example, isthe user asking for a plan, for an explanationfor why a plan failed, or for a better plan thanthe one he or she is currently using 2.?
The situational context - -  The "physical2A more accurate label might be the "question context," howevereventually this structure should represent the dialogue between the userand GENIE over time.
We keep the more grand label to remind ourselvesof this.situation" the user is in, that is, the state ofthe environment and the user's position in it.This includes background knowledge aboutdomain entities such as what some one'semail (electronic mail) address is.?
Be l ie fs  about  the User ' s  Task  Exper t i se  wThe computational goals GENIE believes theuser knows about and the plans the user hasfor satisfying them.Finally, since a user's primary goal is to complete thetask, and only secondarily to get new information, he orshe would prefer a succinct, informative answer.However the answer should also be sufficientlygrounded, that is, it should contain advanced organizers\[Gagne & Briggs 79\] that explicitly articulate any of itsgoals, assumptions, and decisions in choosing acourse ofdomain action that are not obvious to the user.An example scenario might help illustrate these points.Consider the user model defined at the top of Figure 2-1.The user asks the question, "how do I send a message",which implies a question intent to receive a plan for thegoal "send a message."
The discourse context containsthe question intent "given a goal give me a plan", and theexpectation that such a plan exists, and that GENIE willprovide it to the user.
The statement of the goal furtherindicates that the user is asking about sending a singlemessage, in contrast to "sending mail" where the quantityof messages i ambiguous.
The goal statement does nothowever does not say anything about who the recipientmight be.
The details of the goal statement can have aprofound effect on how GENIE selects content, andchooses to present it.
Physically, the user is in the Unixshell, and has no new mail.
In the past the user has neverinitiated the sending of a message, but has only sentmessages in reply to messages s/he has received.
Finally,as background, in Berekely Unix mail, one cannot "getinto" the mail environment with the command "mail"unless one has new mail.
The text GENIE produces as aresult of this scenario appears in the lower part of thefigure.Sentences 1 - 3 are produced as a result of responding tothe user by introducing a plan for sending mail.
Sentence1 is an advanced organizer, which makes sure GENIE isanswering the question the user asks.
Note that if GENIEhad true dialogue capabilities, it might pose this as aquestion.
Only ff the user responded in the affirmativewould it proceed with the remainder of the text as is.Sentences 4 and 5 are enrichment, elucidating why theuser's usual plan won't work.
Note too, how discoursegoals are merged.
For example, sentence 3 is both anexample and a definition of syntax.Text generation for interactive nvironments hereforerequires addressing the following goals:1.
Provide information about the relationship between96Input:Discourse: How can I send a message to message?Situation: User is in Unix, with no new mail.Kathy is a user with email address "kathy.
"User knowledge of domain tasks:User has never sent a message from Unix shell,but has only initiated sending from "read mode"afar reading new mail.Output:(1) I assume you are in unix, your ecipient is anindividual, and the address i a local address.
(2) Youmust supply the email address of the individual.
(3)Forexample, to send mail to Kathy, typemail kathysince kathy is her email address.
(4) You usual method is to read your mail, then use themail command inside the mail environment.
(5) Since you donot have any new mail, your usual method will not work.Figure 2-1: An example scenariousers' task (their computational goal) and themethods ((plans) that may be used to accomplishthem.
Do this within the current context of the taskat hand.2.
Respond informatively, but also attempt to provideenriching material.3.
Provide advanced organizers, but do it in a mannerthat is concise, clear and cohesive.Taken together these goals suggest that a large amount ofinformation must be presented in as short a text aspossible.
Evidence from three informal studies indicatesthat natural occurring texts satisfy these goal.
First a setof textual materials, including manuals, tutorials, textsand canned text on-line resources were studied.
Tutorialsand on-line resources tended to focus on respondingdirectly to the problem of how to do tasks.
Referencemanuals, text books and especially "advanced user"manuals focused on enrichment.
In all, 20 passagescovering information about Unix, Lisp, Pascal, Logo anda number of word processors were analyzed.
These textshave strongly influenced our approach to contentselection and structuring.
In particular, we found thatfour types of strategies occurred through whichinformation about he relationship between domain plansand goals was given:?
Introducing: Presenting plans that the userhas not encountered before.?
Reminding: Briefly describing plans towhich the user has been exposed, but mayhave forgotten.?
Clarifying Distinctions: Explainingdistinctions and options about plans.?
Elucidating Misconceptions: Clearing upmisunderstandings that have developed aboutplans to which the user has been exposed.These strategies had a consistent general structure thatincluded sub-strategies such as summarizing orelaborating on a plan that had their own linguisticstructure.
See \[Wolz et al 90\] for a thorough discussionof these strategies.
The "Introduce" strategy will bediscussed extensively in the following sections.The second analysis looked at 30 unix related questionanswering sessions in which the correspondence occurredthrough electronic mail.
We found that the responses stillfell within the four strategies.
The respondent made anattempt to respond informatively, and in 8 cases explicitlyincluded contextual information that acted as an advancedorganizer, or that might not have been obvious to thequestioner.
In 7 cases the respondent includedinformation that was not merely in response to thequestion, but that could extend the questioner's expertise.Most importantly however, we found instances wheresub-strategies, and sometimes the four basic strategiesthemselves, were combined to produce very conciseutterances.
We also noticed that sub-strategies wereabsent when their contents was not critical, or when itwas obvious from the question.
The last of these pointshave led us to the goal of conciseness.A third study of human-to-human tutoring in a computerlab also corroborated the strategies, the incidence ofenriching behavior, the use of advanced organizers.However, verbal responses tended to be significantlymore long winded, exhibiting more of a stream ofconsciousness than the mail messages.
Since GENIEproduces interactive text, our goal is to most closelymatch the mail message behavior, and aim forconciseness.3.
L imitat ion of  Cur rent  ApproachesGENIE was developed as a result of the design goalsenumerated above, namely to answer a question withinthe task at hand, satisfy the dual discourse goals ofresponding and enriching, and do this clearly andconcisely.
These goals presented some special problemsfor capturing textual structure, and for defining choicepoints for refining that structure into natural languageclauses and vocabulary.In order to cover two simultaneous discourse goalsthrough clear and concise text, we discovered thatschemas \[McKeown 85, Paris 87\] provided too rigid astructure with insufficient definition of choice points,while plan operators \[Hovy 88, Moore & Paris89\] provided too many choice points without sufficientstructure.
In order to answer a question within the task at97hand, GENIE needed to make choice point decisions basedon intentional \[Appelt 85, Moore & Paris 89\], domainand textual \[McKeown 85, Paris 87\] knowledge.
Previouswork on text generation has tended to put the emphasis onone of the three, incorporating the other two implicitly.The problem can be best illustrated by looking at theinformal description of the strategy of "introducing"presented in Figure 3-1.
The structure of this strategywas derived from principles of instructionaldesign \[Gagne & Briggs 79\] and on the analysis of text.The informal definition contains both structure, in theform of how to expand an introduction i to sub-structuressuch as "summarize", and under what circumstances to doso, for example whether the goal is satisfied by an actionor another plan, or whether the user knows or does notknow the subgoal.
This strategy assumes a recursivedefinition of a goal, where the goal can be satisfied by anaction or indirectly by a plan that itself consists of a set ofsubgoals.
This definition of a goal follows that used inSTRIPS \[Fikes and Nilsson 71\] where the term goalrefers to a state difference.
It is to be distinguished fromthe goal state, or end state which is sometimes referred toas "the goal.
"Casting this informal description as a formal schemalooses the explicit information about what circumstancesmotivate expansion into particular sub-structures.
Forexample, the schema definition presented in Figure 3-2does not contain choice point knowledge.Conversely, casting the description as a set of planoperators looses the explicit structure in the informaldescription.
The structure merges only during planning.Researchers in text generation using plan operators(Appelt85,Hovy88, Moore-paris89) have adapted thehierarchical definition of a plan operator developed bySacerdoti \[Sacerdoti 77\] A discussion of the merits anddisadvantages of the subtle differences betweendefinitions is not appropriate here.
Instead, we mustfocus here on the components of plan operators that arecritical to representing choice points and sub-structure,namely a constraint/action-body pair.
Constraints orpreconditions define choice points, while the body of theoperator defines actions that are taken if the constraintsare met.
Figure 3-3 shows informal definitions of some ofthe operators that would be required to model the sub-structures that appear in Figure 3-1.Plan operators introduce an even more insidious problem.Note that both Introduce-plan and Introduce-actioncontain the operator "state-goal" in their bodies.
Otherhigh-level strategies uch as Remind Plan or ElucidateMisconception also include this sub-structure.
Recall thatGENIE will initiate two strategies, one in response and oneto enrich.
For example, to produce the text in Figure 2-1GENIE chose to respond by introducing a new plan to theuser, and enrich, by elucidating why the user's usual planwon't work in the current situation.
The fundamental1.
Informally, introducing a plan consists ofa.
Stating the goal.b.
If the goal is satisfied by an action, introducing theaction, otherwise:c. Stating any assumptions that affected the choice ofplan.d.
Summarizing the sub-goals for the plan.e.
For each sub-goal either introducing or remindingabout he plan for the sub-goal depending on whetherthe model of user task expertise indicates the userknows how to satisfy the sub-goal.f.
If the plan is not the top-level plan, reviewing thesteps in the plan through an example.g.
Relating each step in the example to a sub-goal.2.
Introducing an action consists of:a.
If the goal which the plan satisfies is the top levelgoal, stating the goal.b.
Presenting the syntax.c.
Describing the parameters.d.
Describing any preconditions that must exist for it towork.e.
Describing the effects (which is not the same asstating the goal).f.
If the goal which the plan satisfies is the top levelgoal, giving an example.Figure 3-1: Introducing a plan or an actionIntroduce Schema{goal-statement}{assumptions plan-summary(introduce I remind) example* comparison*}{syntax parameters preconditionseffects example* }{ } = optionality* = zero or moreFigure 3-2: The strategy of introducing as a Schemaproblem with having two discourse strategies within asingle text is that when each is instanfiated as a sequenceof speech acts, redundancy and conflicts may appearunless the instantiafions of those structures arecoUaboratively developed.
Furthermore, in GENIE, thehighest level strategies (remind, introduce, elucidate,clarify) all contain at least one instance of recursion onanother top level strategy.
For example, introducing aplan requires introducing or reminding the substeps of theplan.
Published descriptions of cur~nt content planners98introduce-planconstraints: goal is satisfied by planaction-body: state-goalstate-assumptionssummarize-planexpand-planplan-examplerelate-stepsintroduce-actionconstraints: goal is satisfied by actionaction-body: state-goalstate-syntaxstate-preconditionsstate-parametersaction-exampleFigure 3-3: Possible plan operators for introducingdon't show how this kind of open-ended recursion ishandled.
Examples tend to only show how a top leveldiscourse goal is elaborated through arefinement process.When runaway recursion might occur, computationaltricks such as limiting the number of levels of deepeningis suggested.
This is not sufficient for GENIE'S purposes.For example consider adomain goal G that is satisfied byplan P, that expands into subgoals, that are satisfied byplans that themselves expand until a set of actions isreached.
Clearly one can't limit the expansion since theactions are a critical component of the text.
If one blindlyfollows the informal description of introducing the toplevel plan P, then all of the subgoals and sub-plans will beincluded recursively.
Merely stating the top level goaland plan, and the resulting actions would seem to be anatural intuitive solution.
But this would require differentoperators for "high" level strategies, than for those furtherdown the structure.
This thwarts the elegant nature ofindependent, generalized structures such as schema's andplan operators.
To further aggravate the situation,consider that many of those actions may have the samepreconditions.
Again, if one blindly follows ageneralized "introduce action" operator, then for all thoseactions that include precondition P, a speech act stating Pwill be included.
One would prefer that P be stated atmost once.Avoiding this problem through "special case" operators iinsufficient.
For example, consider two plan operatorsthat handle when to state the goal.1.
If introducing in response, include a statement of thegoal unless it is explicitly mentioned in the question.2.
If introducing as enrichment, do the same thingexcept if you already mentioned the goal inresponse, don't mention it again.The second operator is dependent upon the result of thefirst one, and although superficially they seem to beindependent entities, they are not.
Now a third specialcase is introduced when "elucidating a misconception",because here too, there are circumstances in which thegoal should be stated.
All three operators know abouteach other implicitly through their constraints.
Becauseplan operators based on Sacerdoti's hierarchical modelassume a set of abstraction spaces, "high level" operatorsalways precede lower-level ones, and the higher onesconsequently have an implicit influence on thesubordinate ones.A final problem with implementing the informalstructure of Figure 3-1 as plan operators is that asignificant amount of domain specific knowledge isembedded in the operators, The operators in Figure 3-3illustrate this point.
The "state-..." operators areessentially "inform" speech acts, but they imply that aspecific sort of domain object is to be the subject of theinforming.
Although text plan operators are supposed tobe textual in nature, it is far too easy to implicitly embeddomain knowledge in them.
This compounds thecomplexity in developing constraints because textual,domain, and intentional knowledge can be haphazardlyintertwined.
A similar problem occurs in creating the testson schemas, since the test may be described by anarbitrary lisp expression.
In developing GENIE, we foundourselves mired in layers of operators that contained suchcomplex inter-related constraints.
This suggested adifferent sort of architecture that would allow us to dealwith the complexity of inter-related, but distinctinfluences, and at the same time model both structure andchoice of structure in one formalism.4.
An Object-Oriented Architecture forContent PlanningGiven the problems described in the previous ection, wewill focus here on the aspects of GENIE'S object-orientedarchitecture that address the problems of text structuringand content choice.
The over-all architecture is describedin \[Wolz 90a\].
In particular, this section will illustratehow special case operators are avoided by cleanlydividing the structuring process into two stages.
First,rhetorical strategies are refined with minimal constraintsto the point of rhetorical acts.
Second, the rhetorical actscontend for inclusion in the set that is realized as text.Some acts may have cause to be explicitly included orexcluded, and among those that are included some maybe merged with others, while some may need to beexplicitly kept separate.
Before these processes can bedescribed however, it is necessary to articulate the natureof object-orientedness a  it applies to GENIE, and describethe input to the text structuring phase.994.1.
Object Classes for Content PlanningGENIE employs three overlapping classes of objects;domain objects, intentional objects and discourse objects.Domain Objects classify domain entities, including boththe commands uch as "mail" or "copy" that the userinvokes, and the entities manipulated by commands suchas flies, messages and users.
Intentional Objects allowGENIE tO construct and analyze plans, and includecomputational goals, plans to satisfy them, and actions(which contain commands as a subclass).
DiscourseObjects include rhetorical strategies, rhetorical plans,rhetorical acts, syntactic structures and vocabulary.
Notethat these classes are not mutually exclusive.
Forexample, agoal such as "wanting to send mail" is both anintentional nd domain object since it is a domain specificgoal.Each object class has explicit relationships to otherclasses.
For example the class "goal" contains anattribute "who-satisfies-me", whose value can point toeither a plan or an action.
A plan in turn is an object classthat is related to a rhetorical strategy "talk-about."
Thestrategy in turn knows under what circumstances theobject about which it talks (the plan) should beintroduced, reminded about, clarified or elucidated, thatis, it is related to these other hetorical strategies.
Finally,rhetorical strategies may be instantiated either byrhetorical plans, that recurse to other strategies, or byrhetorical acts such as "stating" that can be manifested asEnglish texL4.2.
Constructing Domain Objects for Inclusionin the TextRecall that GENIE answers questions about how to dotasks.
In other words, it provides descriptions of therelationships between goals, plans, actions and the effectsof actions in the domain.
Providing an answer involvesunderstanding the user's question in a situational contextby instantiating a set of domain objects, generating the setof objects (domain goals, plans, actions, effects) that areexpected in reply, and selecting the discourse objects thattalk about hose objects.For example, consider the question from Figure 2-1:"How do I send a message?"
As a result of parsing thissentence, the discourse context will include aninstantiation of the very specific goal "send-mail."
Thediscourse context will also include the question intent hatthe user expects to be told the best plan for the goal in thecurrent context.
A specialized plan class knows how toconstruct an instantiation of such a plan, calling itbes t -p lan .
It creates a relationship between theinstantiation of the "send-mail" goal, and best -p lanand relates best -p lan  to an instantiation of an abstractplan for satisfying that goal.
It also instantiatesdiscriminator objects that capture the assumptions anddecisions that were made in constructing the abstractplan.
Like other objects that might be included in thefinal text, these discriminator bjects, which are domaindependent, have rhetorical strategies that can talk aboutthem.
best -p lan  is then refined, by instantiating thesubgoals of its abstract plan until the process bottoms outas actions.Figure 4-1 shows some of the itentional objects that areinstantiated for bes t -p lan .
Describing the actualprocess here would take us too far afield.
Note that thediscriminators include which part of the user modelaffected the choice.
Decisions that are based on thediscourse and situational context are "stronger" than thosethat are based on the model of user task knowledge.
Theformer are deduced from facts, the latter, like defaultheuristics for object types, are deduced from weakerbeliefs.
The strength of the deduction will affect how thedecision is described in the text.BEST-PLAN (plan)subgoals: ENTER-SEND-MODE-I, CHOOSE-RECIPIENTS-IENTER-SEND-MODE- 1 (goal)discriminator: UNIX-READ-Iwho-satisfies-me: B-SUB-IB-SUB-I (plan)subgoals: SEND-FROM-UNIX- 1SEND-FROM-UNIX-1 (goal)who-satisfies-me: SEND-FROM-UNIX-ACTION- 1CHOOSE-RECIPIENTS-I (goal)discriminator: GROUP-SINGLEdwho-satisfies-me: B-SUB-2B-SUB-2 (plan)subgoals: CHOOSE-SINGLEdCHOOSE-SINGLE-I (goa D B-SUB-3 (plan)discriminator: LOCAL-REMOTE-I subgoals: CHOOSE-LOCAL-1who-satisfies-me: B-SUB-3CHOOSE-LOCAL-Iwho-satisfies-me: CONSTRUCT-LOCAL-ADDRESS-ACTION- 1UNIX-READ-I (discriminator)choice-from: SITUATIONGROUP-SINGLEd (discriminator)choice-from: USER-TASK-MODELLOCAL-REMOTE-1 (discriminator)choice-from: USER-TASK-MODELFigure 4-1: Set of Objects to be Included in ResponseThe best plan by itself is not sufficient for GENIE'Sdesign goals.
In particular, its construction offers littleinsight into what the user knows about it, or for thatmatter whether the user knows any plan for satisfying thegoal, and whether that plan works in the current context.Therefore, in this context it is also necessary to constructa User Model Plan, user -p lan ,  that has a similarstructure.
The two plans are "compared" by annotatingdifferences in the sets of objects produced for each.
Morei00importantly, the best-plan and user-plan areannotated as to whether each is valid in the currentsituation, and if so, whether they are the same plan.
Theinformation is critical to how each will be "talked about.
"In the scenario f Figure 2-1 the user -p lan  will notwork because it requires that new mail exist, which is notthe case in the scenario.
Once the relationship betweenthe goal, bes t -p lan  and user -p lan  have beenestablished, text structuring can begin.4.3.
Structuring Content: InstantiatingRhetorical StrategiesStructuring content consists of selecting two rhetoricalstrategies, one for responding, and one for enriching, andinstantiating a rhetorical plan for each strategy.
Theselection is based on the nature of the question intent, thedomain plans that have been constructed, whether thosedomain plans satisfy the goal, and whether they areidentical.
The selection rules were compiled from ourdesign goals, and result in one plan being described inresponse and possibly a second being described asenrichment.
The plans for the two strategies are thenreeursively expanded until the process bottoms out as aset of rhetorical acts.Structuring begins when the domain plans such asbest-plan and user-plan are sent messages to"talk-about" themselves 3.
In the example scenario,best-plan decides that it should be "introduced inresponse to the question" because it is not identical touser-plan.
Had the plans been identical,bes t -p lan  would have chosen to be reminded instead.user -p lan  decides that it should be "elucidated asenrichment" because it doesn't work in the currentcontext.The strategies map to rhetorical plans that are asequences of message passing instructions with simplecontrol structures, uch as interating on a list, and binarybranching.
A rhetorical plan is refined by sending thosemessages toother hetorical strategies or to rhetorical actsthat cannot not be further refined.
The method forexpanding the rhetorical plan is dependent upon theobject type of the entity to be talked about.
Classes ofobjects may use the same rhetorical strategy throughinheritance, however, when appropriate two classes mayrequire the same strategy, but have their own privaterhetorical plans for those strategies.
For example, giventhe informal descriptions of introducing a plan or anaction in Figure 3-1, it is clear that the text structure ofintroducing these two kinds of things is dissimilar.
Therhetorical strategy associated with introducing a plan isformally described as:3In other scenarios, other kinds of plans might be constructed, see\[Wolz 90a\] for details.
(rh-plan introduce plan((state-it goal-I-satisfy)(ITERATE choice ON choices-made WITH(describe-decisions choice)(ITERATE subgoal ON subgoals WITH(summarize subgoal))(ITERATE subgoal ON subgoals WITH(IF (subgoal in-user-model)(remind who-satisfies-me)(introduce who-satisfies-me)))))This plan says, to introduce a plan, state the goal itsatisfies.
For each choice made to construct i , describethe reason for the choice.
For each subgoal, summarizethe subgoal, then for each subgoal, if the subgoal isknown by the user, remind the user about how it can besatisfied, otherwise, introduce how it can be satisfied.
Aparticular object, like a domain plan, has a set ofattributes or slots that link it to other objects.
Forexample, a plan has a "goal-l-satisfy" slot that relates it tothe goal it satisfies, and the goal in turn has a "who-satisfies-me" slot that points to the plan.
The statement"(state-it goal-I-satisfy)" says to send a "state-it" messageto the object related to me by my "goal-l-satisfy"attribute.
When this message is sent, a rhetorical objectof class "state-it" is instantiated that links the callingrhetorical object with the called object, creating tiesbetween them and the domain objects.Of particular significance is the fact that rhetorical planare minimally constrained.
For example, the plan forintroducing a domain plan has no constraints on when toinclude the statement of the domain goal, so this plan canbe used both to describe the best -p lan ,  or one of itssub-plans, or the user -p lan  without complexconstraints.
More importantly, this rhetorical plan doesnot need to keep track of which operators are appropriatefor different kinds of objects.
For example, whenexpanding its subgoals, it merely sends a message to theobject related to the subgoal by the "who-satisfies-me"slot.
The object, either a plan or an action, uponreceiving the message instantiates its localized rhetoricalplan for reminding or introducing.
This process continuesuntil a set of rhetorical acts is constructed.4.4.
Contending for Inclusion: CommunicationBetween Rhetorical ActsThe structuring stage produces an initial ordering ofrhetorical acts that contain functional descriptions whichwhen given to the surface generator can produce text.
Theform of these descriptions is based on the theory offunctional grammar \[Halliday 85\].
Due to the minimallyconstrained refinement employed uring the expansion ofthe strategies, the set of rhetorical acts produce redundant,extraneous or obvious information that would be terriblyverbose if instantiated as text.
For example, Figure 4-2shows the text that would be produced if the first 6rhetorical acts instantiated in the send mail example werei01given to the surface generator.
Note that these 6 acts areonly 1/5 of the rhetorical acts that are produced in thisexample.STATE-IT-GOAL- 1 ::domain-object\[goal\] :send-mall-ISTATE-IT-STRONG-DISCRIMINATOR- l ::domain-object\[discriminator\] :unix-read- 1STATE-IT-GOAL-2 ::domain-object\[goal\] :choose-recipients- 1STATE-IT-WEAK--DISCRIMINATOR- 1 ::domain-object\[discriminator\] :gr up-single-1STATE-IT-GOAL-3 ::domain-object\[goal\] :send-individual- 1STATE-1T-WEAK-DISCR/MINATOR-2 ::domain-object\[discriminator\] :local-remote- 1You want to send mail.I know you are in Unix.You want to specify a recipient.I assume your recipient is an individual.You want o specify a single recipient.I assume the address i  a local address.Figure 4-2: Text Produced Before Content Filteringsome distance may find themselves next to each other, oreven merged, if the acts between them are excluded.Once processing is complete, the remaining objects applyknowledge for constructing clause level structures whichare then passed to the surface generator.Figure 4-3 shows how the 6 acts from Figure 4-2 contendto be included, and are eventually merged to produce thefirst sentence in Figure 2-1.
The first act of stating themain goal can be excluded because it is in the discourse,and is probably obvious to the user.
The second and thirdstatements of goals may be excluded because they arepart of a goal-plan-goal chain, that is, they supplyunnecessary detail about he relationship between the toplevel goal and the actions.
The result of these deletionsmakes the two "weak" discriminator statements adjacent,at which point they can be merged.
This newly mergedobject can then be merged with the "strong" discriminatorthat follows it.
In general, when weak assertions outnumber strong ones, the weak assertions can subsume thestrong assertions, if the significance of the strongassertion isn't important.
For example, it is acceptable tosay "I assume X and Y" even if you "know X" providedthe distinction between knowing X and assuming X is notcritical to the response.The contention stage reviews this list and specificallyincludes, excludes, merges or keeps separate acts withinthis list.
For example information derived from either thesituational context, such as the mode the user is in, shouldbe included because it may not be obvious to the user.Information derived from the discourse context, such asan explicit reference to the goal may be excluded asobvious because it was referred to in the question.
In theprocess of both reminding and clarifying, the samepreconditions may be introduced twice.
These can bemerged into one utterance.
However, if a component ofan utterance is critical, such as a failed precondition whenelucidating a misconception, then it should be keptseparate.The rhetorical acts contain the methods for determininghow they can be filtered.
This includes specific rules forwhen they may be excluded, when they must be included,what other objects they may or must be merged with andwhich one is dominant, and when they are to be keptseparate.
Contention for inclusion in the text begins whenthe set of rhetorical acts is sent messages to "execute"themselves.
Each examines its methods for how it maybe merged etc.
Processing continues until all objectsreturn successfully.
Some objects will have beenexcluded and some will have instantiated new "merged"objects, subordinating themselves to the merged object.Restructuring occurs during merges and excludes.
Amerge may move an act up or down depending onwhether the dominant act comes before or after thesubmissive one.
Two acts which are initially separated byExcluded\[STATE-IT-GOAL-1 because IN-DISCOURSE-CONTEXTExcluded!STATE-IT-GOAL-2 because IN-GOAL-PLAN-GOAL-PATHExcluded\[STATE-IT-GOAL-3 because IN-GOAL-PLAN-GOAL-PATHMerged!STATE-IT-WEAK-DISCRIMINATOR-2 andSTATE-IT-WEAK-DISCRIMINATOR- 1 intoCONJOINED-WEAK-DISCRIMINATOR- 1becauseSAME-TYPEMerged!CONJOINED-WEAK-DISCRIMINATOR- 1andSTATE-IT-STRONG-DISCRIMINATOR- 1 intoCONJOINED-WEAK-DISCRIMINATOR-2 becauseWEAK dominates STRONGI assume you are in unix, your recipient is an individual, andthe address i  a local address.Figure 4-3: Application of Filtering Methods5.
StatusGE~E is implemented on a Sun 3/60 in Sun CommonLisp.
All of the object types described are representedusing Hyperclass \[Smith and Carando 86\] which providespowerful inheritance mechanisms.
Surface textgeneration is accomplished through FUF\[Elhadad88\] that employs a two stage process of functionalunification \[Kay 79\] and linearization to produce English102\[Finin 83\] Finin, T. Providing help and advice in taskoriented system.
Proceedings ofthe Eighth InternationalJoint Conference on Artificial Intelligence, Karlsruhe,West Germany, 1983, pp.
176-178.\[Gagne & Briggs 79\] Gagne, R. M. and L. J. BriggsPrinciples of Instructional Design.
Holt Rinehart andWinston, New York, 1979.\[Halliday 85\] Halliday, M.A.K.
An Introduction toFunctional Grammar.
Arnold, London, 1985.\[Hovy 88\] Hovy E.H. Two types of planning inlanguage generation.
Proceedings of26th Meeting ofACL, Association for Computational Linguistics, 1988.\[Kay 79\] Kay, M. Functional Grammar.
Proceedings ofthe 5th meeting of the Berkeley Linguistics Society,1979.\[MeKeown 85\] McKeown, K.R.
Text Generation:Using Discourse Strategies and Focus Constraints toGenerate Natural Language Text.
Studies in NaturalLanguage Processing.
Cambridge University Press,Cambridge, England, 1985.\[Moore & Paris 89\] Moore, J.D.
and C.L.
Paris.Planning text for advisory dialogues.
Proceedings of27th?
Meeting of ACL, Association for ComputationalLinguistics, 1989, pp.
203 - 211.\[Paris 87\] Paris, C.L.
The Use of Explicit User Modelsin Text Generation: Tailoring to a User's Level ofExpertise.
Ph.D. Thesis, Columbia University, 1987.\[Sacerdoti 77\] Sacerdoti, E. A Structure for Plans andBehavior.
American Elsevier North-Holland, New York,1977.\[Smith and Carando 86\] Smith, R.G and P.J.
Carando.Structured Object Programming In Strobe.Schlumberger-DoU Research, Ridgefield, CT, 1986.\[Wolz 90a\] Wolz, U.
Extending User Expertise inInteractive Environments.
Ph.D. Thesis, ColumbiaUniversity, 1990.
Forthcoming.\[Woh 90b\] Wolz, U.
The impact of user modeling ontext generation i  task-centered settings.
SecondInternational Conference on User Modeling, Honolulu,Hawaii, 1990.\[Woiz et al 90\] Woh, U., K.R.
McKeown andG.
E. Kaiser.
"Automated tutoring in interactiveenvironments: A task centered approach.
"Machine-MediatedLearning 3, 1, 1990, pp.
53-79.104
