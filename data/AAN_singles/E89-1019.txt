LEXICAL  ACQUIS IT ION IN THECORE LANGUAGE ENGINEDavid M. CarterSRI International Cambridge Research Centre23 Millers Yard, Mill LaneCambridge CB2 1RQ, U.K.Keywords:  computational lexicography; lexical acquisitionABSTRACTThe SRI Core Language Engine (CLE) isa general-purpose natural anguage frontend for interactive systems.
It trans-lates English expressions into representa-tions of their literal meanings.
This paper ,presents the lexical acquisition componentof the CLE, which allows the creation oflexicon entries by users with knowledge ofthe application domain but not of linguis-tics or of the detailed workings of the sys-tem.
It is argued that the need to caterfor a wide range of types of back end leadsnaturally to an approach based on elic-iting grammaticality judgments from theuser.
This approach, which has been usedto define a 1200-word core lexicon of En- ?glish, is described and evaluated.1 INTRODUCTIONThe SRI Core Language Engine (CLE; A1-shawi et al 1988a,b) is a domain indepen-dent system for translating English sen-tences into formal representations of theirliteral meanings which are capable of sup-porting reasoning.
It is designed to beused as a major component of interac-tive advisor systems uch as interfaces todatabase management systems and diag-nostic expert systems.
The main contri-bution of the CLE is intended to be sub-stantial coverage of English constructionsin both syntax and semantics that is wellmotivated and hence extensible.The CLE makes use of three main typesof lexicon entry.A syntactic entry for a word consistsof one or more complex categories,each specified by a principal categorysymbol augmented by a set of con-straints on the values of syntactic fea-tures.
Such categories also appearin the CLE's grammar, and match-ing and merging of the informationencoded in them carried out by unifi-cation during parsing.Word sense entries for words arespecified in the same way, but involvesemantic as well as syntactic features.Semantic interpretation, which takesplace in tandem with parsing, worksby unification of feature values inword sense entries and semantic in-terpretation rules.Sortal (selectional) restrictions aredefined for logical form predicates(i.e.
word senses).
After possi-ble semantic interpretations are con-structed, the CLE applies these re-strictions with reference to a user-definable hierarchy of sortal classes,to reject any interpretations in whichthe sort expected by some argument- 137  -of a predicate is inconsistent withthat of the object filling that argu-ment.The CLE lexical acquisition tool VEX(for Vocabulary EXpander) allows the cre-ation of CLE lexicon entries by users withknowledge both of English and of the ap-plication domain, but not of linguistic the-ory or of the way lexical entries are rep-resented in the CLE.
It asks the user forinformation on the grammaticality of ex-ample sentences, and for selectional re-strictions on arguments of predicates, andwrites to disc a set of instructions that canimmediately be used by the CLE to cre-ate appropriate lexical entries automati-cally in main memory.2 THE TASK OF LEX ICALACQUIS IT IONVEX's task is to aid in the creation of lexi-' cal entries that will allow the CLE to mapcertain English expressions into appropri-ate logical form predicates.
These predi-cates are expected then to receive furtherapplication-specific processing.
A crucialfactor in designing VEX was that virtu-ally no assumptions can be made aboutthe nature of this subsequent processingor about the representations, if any, intowhich predicates will be mapped; indeed,the main use of VEX so far, one which sug-gests its viability, has been to constructthe CLE's 1200-word core lexicon, whichis intended to be application-independent.This situation contrasts with that ob-taining in, for example, the TEAM system(Grosz et al 1987).
Whereas the CLE isintended to interface to a range of backend systems, TEAM was designed specifi-cally as a front end for databases of a par-ticular kind.
This means that lexical ac-quisition in TEAM is essentially a matterof determining the English counterpartsof particular database relations, and thatthe possibilities for word behaviours areconstrained by the kinds of relations thatexist.
Furthermore, TEAM's coverage ofverb subcategorization is rather more lim-ited than that of the CLE.
Thus TEAM isable to allow the user to volunteer a sen-tence from which, with the help of somehard-wired auxiliary questions, it infersthe syntactic and semantic haracteristicsof the way a verb and its arguments mapinto the database.However, because of the CLE's widesyntactic overage and the lack of con-straints from any known application, itis too risky to allow the user to volun-teer sentences to VEX.
Instead, VEX it-self presents example sentences to the userand asks whether or not they are accept-able.
In addition, the logical forms pro-duced are of a fairly neutral, conserva-tive nature, and correspond one-to-one tothe individual surface syntactic subcate-gorization(s) that are identified; for exam-ple, related usages like the transitive andintransitive uses of "break" ("John brokethe window" vs. "The window broke") willbe mapped onto different predicates, leav-ing it to the back end to make whatever itneeds to of the relationship between them.Thus apart from eliciting selectional re-strictions, virtually all of VEX's process-ing is done at the level of syntax.3 THE STRATEGY ADOPTEDVEX adopts a copy and edit strategy inconstructing lexical entries.
It is providedwith pointers to entries in a "paradigm"lexicon for a number of representativeword usages and declarative knowledge ofthe range of sentential contexts in whichthese usages can occur.
For example, itknows that a phrasal verb such as "relyon" that takes a compulsory prepositionalphrase complement can be the main verb- 138  -in a sentence of the form "np verb prepnp" (e.g.
"John relies on Mary") but notin one of the form "np verb np preI\]'(e.g.
*"John relies Mary on").
Entriesin the paradigm lexicon are distinguishednot only by the type and number of argu-ments they take, but also by phenomenasuch as "tough-movement", subject rais-ing and equi-NP deletion.
VEX elicitsgrammaticality judgments from the userto determine which paradigm (or set ofparadigms) occurs in the same contextsas the word being defined, and then con-structs the new entries by making substi-tutions in these paradigm entries.
Eachuse of a paradigm will give rise to one dis-tinct predicate.An alternative to this copy and editstrategy would be a more detailed, know-ledge-based method in which VEX wasequipped with knowledge of the functionof every feature and other construct in therepresentation, and asked the user ques-tions in order to build entries in a bottom-up fashion.
However, such an approachhas several drawbacks.The complexity of the representationwould make a bottom-up approach un-wieldy and time-consuming, both for thebuilder of VEX ana for the user, whowould have to answer an inordinately onglist of questions for every new entry.
Fur-thermore, interaction at the level of indi-vidual inguistic features would allow gen-uinely novel entries to be created, which,given that the user is a non-linguist, Wouldalmost certainly lead to inconsistencies.In addition, endowing VEX directly withknowledge of the representation wouldmean that as the representation devel-oped, VEX would continually have to beupdated.The copy and edit approach, on theother hand, makes VEX independent ofmost changes to the representation.
Fur-thermore, the fact that its knowledge isspecified at the level of word behaviours,means that as the CLE's coverage in-creases, modifications to this knowledgeare easy to make.
It also makes robustand (relatively) succinct interaction withthe user easier to achieve.4 ASSUMPTIONS BEHINDTHE STRATEGYThe appropriateness of VEX's strategydepends on a number of assumptions, in-cluding the following.Firstly, it assumes that the syntac-tic behaviours of arbitrary words are de-scribable in terms of a fixed, manageablysmall set of paradigms.
The alternativeview, which has been argued for by Gross(1975), is that in fact every word is in someway idiosyncratic.
I offer no counterargu-ments to that position here, but merelyobserve that as far as copy-and-edit lexi-cal acquisition is concerned, it is a counselof despair; if every word has its peculiari-ties, then every lexical entry must be con-structed from scratch by a trained linguist(either by hand or using a bottom-up lex-ical acquisition tool of the kind dismissedabove for use by non-linguists).
VEX'sapproach, on the other hand, can be ex-pected to work if the approzimate regular-ities that undoubtedly do exist are strongenough that the exceptions will not causemajor problems, and this indeed seems tobe the case for open class words.
VEXdoes not attempt o deal with closed classwords, as these are more idiosyncratic,and in any case are few enough for entriesto be written for them by hand as part ofthe development of the CLE.Secondly, however, even once we acceptthe use of a finite paradigm set, there isthe question of what those paradigms are.One might at first think that paradigmswould be represented by "typical" tran-- 139  -sitive verbs, count nouns and so on; butin fact, such typical words are very hardto find, because in practice almost everyword has a range of behaviours that itshares with various other words.
If weimagine an ideal hand-coded lexicon forthe whole language, then the entry for aword will consist of a set of categories,each of which allows a number of syn-tactic patterns of use.
The mappings be-tween words and categories, and betweencategories and patterns, are both many-to-many; indeed, one category may allowthe same set of patterns as a collection ofother categories by virtue of leaving un-specified a feature value which the othercategories collectively enumerate.We define a paradigm as any mini-mal non-empty intersection of entries, or,equivalently, as any maximal set of cate-gories with the same distribution amongentries.
That is, every category in aparadigm will occur in exactly the sameset of entries in the ideal lexicon as everyother category (if any) in that paradigm;and every entry will be a disjoint union ofparadigms.
The reason this "grain size"for paradigms is correct is as follows.
Anysmaller grain size would result in somepairs of paradigms always occurring to-gether in entries, thereby multiplying thenumber of distinct predicate names andlosing generality.
A larger grain size, how-ever, would mean that some words eithercould not be assigned a consistent set ofparadigms, or would be assigned the samecategory more than once, leading to spu-rious multiple analyses.The third assumption on which VEX'sstrategy is based is that judgments ofgrammaticality are to a large extentshared between speakers of the languageand tend to be absolute, binary ones.
Ex-perience has shown, however, that dif-ferent users have different intuitions, andeven the same user can give different an-swers on different occasions.
To deal withthis problem, if VEX receives a set of judg-ments from which it cannot form a con-sistent paradigm set, it offers the user achoice of ways in which he can change hismind; this process of negotiation usuallyarrives at a satisfactory conclusion.
Theuser can also choose to backtrack at anytime.In any case, although grammaticalityjudgments are sometimes variable andindeterminate, they are much less sothan judgments of semantic acceptabil-ity, which do not play any part in VEX'smain decision-making process.
In or-der to remind the user to judge gram-maticality rather than semantic well-formedness, VEX presents example sen-tences containing "nonsense nouns" suchas "thingummy" and "whatsit".5 EL IC IT ING SYNTACTICINFORMATIONThe algorithm for defining a new word orphrase specified by the user is as describedhere; an example of its operation follows.First, the user is asked for the part(s) ofspeech of the new item (noun, verb, etc;no further grammatical knowledge is as-sumed).
The rest of the definition pro-cess takes place separately for each partof speech.
VEX majors on verb andadjective definitions, and knows aboutonly very gross distinctions between ountypes (e.g.
count vs. mass nouns), becauseother distinctions, notably that betweenrelational and non-relational nouns, ar-guably have as much to do with pragm_at-ics as with syntax and are therefore leftfor later back-end processing to deal with.After determining any irregular inflec-tional forms, VEX elicits grammaticalityjudgments from the user.
In the mostrecently released version of the system,140-VEX knows about 52 different paradigmsand their grammaticality in the context of52 different sentential patterns.
1 Its taskis to discover the behaviour of the newword or phrase by presenting as few ex-ample sentences to the user as possible,and then to find the minimal subset ofthe paradigms that between them accountfor that behaviour.
The sets of paradigmsand sentences are progressively reduced asfollows.?
Paradigms for a different part ofspeech or number of words from those ofthe new phrase are eliminated.?
VEX removes entence patterns whicheither do not correspond to any survivingparadigms, or whose grammaticality canbe deduced from that of other patterns inthe subset.
For example: if sentence pat-tern S1 is grammatical when (and onlywhen) a word or phrase with paradigmP1 is inserted in it; sentence pattern $2is grammatical only for paradigm P2; andsentence pattern $3 is grammatical onlyfor P1 and P2: then there is no pointin presenting $3 to the user if S1 and$2 are also to be presented, because $3will be grammatical when and only wheneither S1 or $2 (or both) are grammati-cal.
Thus VEX orders the candidate sen-tence patterns according to the numberof paradigms associated with them, andeliminates from the resulting list any pat-terns whose paradigm set is exactly theunion of those of one or more later items.?
The remaining sentence patterns,with forms of the item being defined sub-stituted in, are presented to the user, whostates which of them are grammatical.
Be-cause the number of possible word be-haviours is quite large, up to 18 sentencesmay be presented in this way; instead ofimmediately making a full choice, there-fore, VEX allows the user to make a par-1The equality of these numbers i coincidental.tial choice, and will then provide furtherguidance by specifying what paradigmsmight be implied by that choice, and whatother sentences would need to be judgedgrammatical for those paradigms to be ac-ceptable.?
Some of the user's approved sentencesmay be "false positives" in the sense thatthey are grammatical only by virtue ofresulting from another grammatical sen-tence by an operation such as pronominal-ization or addition of an optional preposi-tional phrase.
VEX detects any such sen-tence pairs and eliminates false positives,sometimes with reference to the user's an-swer to a yes/no question about any im-plications holding between the sentences.?
VEX then tries to find a minimal setof paradigms which, together, occur in alland only the contexts the user has markedas grammatical.
At this point, one of thefollowing occurs:(a) There is exactly one minimal set.This set is accepted, and VEX moves onto consider semantic aspects of the newentry (see section 7 below).
(b) There are no minimal sets, becauseevery set of paradigms that together al-lows the sentences the user has said aregrammatical also allows a sentence thatwas (by implication) judged ungrammat-ical.
This occurs quite often becauseusers frequently ignore sentences, mis-read them, or simply have different in-tuitions on them from those embodied inthe CLE's data.
VEX responds by askingthe user to accept one of several additionsto, or deletions from, the grammatical set.The user may either accept a revision orreconsider his assumptions and backtrackto some earlier point in the dialogue.
Thebacktracking mechanism is in fact avail-able throughout a VEX session, and al-lows the user to restart the dialogue froma range of earlier points.- 141  -(c) There are several minimal sets ofthe same size.
In this case, VEX prefersless ambiguous ets, i.e.
those that min-imize the number of occasions that twoparadigms in the set both account for thegrammaticality of a sentence (and hencecould lead to apparent ambiguity in pars-ing).
If this does not select a uniqueparadigm set, VEX chooses a set at ran-dom and warns the user of the conflict;such conflicts almost always result fromVEX being unable to separate two distinctbehaviours for a phrase, a situation whichcan be remedied by the user presentingthe behaviours to VEX in two separatedialogues.6 AN EXAMPLESuppose the user wishes to define thephrasal verb "use up".
After morpholog-ical information has been supplied, VEXpresents the following list of sentences:I The thingummy used up.2 The thingummy used the whatsitup.3 The whatsit was used up by thethingummy.4 The thingummy used the boojumup very good.5 The boojum was used up thewhatsit by the thingummy.6 The whatsit was used up for theboojumby the thingummy.7 The thingummy used up existing.8 The thingummy used up the whatsitthat the boojum existed.% The whatsit was used up by thethingummy to exist.and invites the user to specify which onesare grammatical in the domain in ques-tion.
The user would approve sentences 2,3 and 9 only.
VEX then considers the pos-sibility that, because sentence 3 is gram-matical, sentence 9 is grammatical onlywhen "to exist" is an optional modifier.This is in fact the case.
It asks the user:Does "the whatsit was used up bythe thingummy to exist"necessarily imply"the whatsit was used up by thethingummy IN ORDER TO exist"7When the user answers affirmatively, sen-tence 9 is dropped from consideration.
(Contrast the case of "call on", where"The board called on the chairman to re-sign" can mean something quite differentfrom "The board called on the chairmanin order to resign").VEX now has enough information to de-cide that "use up" behaves yntacticallyas a transitive particle verb.7 EL IC IT ING SEMANTICINFORMATIONOnce a set of paradigms has been estab-lished, VEX asks for a name for the pred-icate corresponding to each one, and thenfor sortal restrictions on the predicate andits arguments.
Sortal restrictions may begiven to VEX directly as a list (interpretedconjunctively) of atoms occurring in thesort hierarchy currently in force, or indi-rectly as a pointer to sortal restrictionson another predicate or one of its argu-ments.
If an explicit list is provided, theyare checked for existence in the sort hi-erarchy currently in force and for mutualconsistency in terms of that hierarchy (e.g.the list "male female" would normally berejected), but no check is made for theexistence of other predicates referred to,since these may not yet have been definedor incorporated into the system.VEX allows ~he user to specify anynumber of alternative sets of restrictionson a predicate.
However, the use of morethan one set is discouraged, because if the- 142  -alternative r strictions are assigned to dis-tinct predicates then the CLE will be ableto provide the back-end system with moreinformation than would otherwise be pos-sible.8 FURTHER PROCESSINGWhen selectional restrictions have beenacquired, VEX writes out to disc a setof "implicit" lexical entries.
Implicit lex-ical entries are instructions interpretedby CLE code that makes substitutions,for words and predicate names, in en-tries for the paradigms that VEX knowsabout.
The results of these substitutionsare explicit, feature-based entries, whichare then compiled directly into the for-mat used by the parser itself.
Both ex-pansion and compilation happen automat-ically and are hidden from the user; thusas soon as a word is defined with VEX, itcan be used in an input sentence.The are three main advantages in in-troducing this "implicit" level of represen-tation.
Firstly, implicit entries are muchsmaller than explicit and compiled ones,which results in considerable saving ofspace since the latter are only generatedon demand.
Secondly, if the paradigm en-tries are later changed, for example be-cause of developments in the feature sys-tem, existing implicit entries will usuallynot need to be altered; their explicit andcompiled forms will automatically cometo reflect those of the paradigm entrieswhen the system is recompiled.
This hasoccurred many times during the develop-ment of the CLE.
Thirdly, implicit entriesare also rather shorter than explicit onesand are therefore asier to edit by handwhere desired.
Hand editing is appropri-ate on those occasions when VEX has notquite produced the desired results, eitherbecause of peculiarities in the phrase be-ing defined, or more commonly becausethe user changes his mind about what de-tailed responses to VEX are appropriate(for example, changing a predicate name)and does not wish to redefine the phrasefrom scratch.
It can also be useful if, forexample, the sort hierarchy is extended af-ter some entries have been defined, and itis necessary to update the sortal restric-tions on those entries to take full advan-tage of the extension.9 SUMMARY ANDCONCLUSIONSThe application-independence of the CLEleads to a style of lexical acquisition differ-ent from that of earlier, dedicated natural-language front ends.
I have argued for atechnique based on a limited number ofsyntactic paradigms, a subset of which areselected for the construction ofnew entriesaccording to the user's judgments of sen-tence grammaticality.
This allows the lex-ical acquisition component to avoid strongdependencies on the CLE's linguistic rep-resentation, the application domain, thenature of the back end system, or theuser's knowledge of linguistics.VEX's concentration on syntac-tic paradigms allows a wide range of sub-categorization types to be recognised anddealt with, and also permits a non-triviallexicon to be easily maintained while thesystem is under development.
The use ofVEX to define the CLE's 1200 word corelexicon is evidence for the practicality ofthe approach.The crucial factor in evaluating VEX,however, is its acceptability to the non-linguist (but application-expert) users forwhom it was designed.
No formal evalua-tion of this has been carried out, but in-formal feedback from members of the com-panies to whom a version of the CLE wasdelivered in the summer of 1988 has been- 143 -generally positive.
It appears that, oncethey have studied the annotated VEX ses-sion transcript distributed with the CLEdocumentation, those who have so farused the system have had no great dif-ficulty with the idea of using nonsensewords or with concepts uch as grammat-icality and paradigms.Perhaps the most difficult task faced bythe VEX user is to decide which of the sen-tences presented are grammatical; how-ever, this task is significantly eased by thepossibility of backtracking, by the consis-tency checker, and by the partial choicefacility, all of which were implemented inresponse to comments by users of earlierversions of the system.
The difficultiesthat remain seem largely due to the factthat the CLE is intended to be usable in aswide as possible a range of hardware andsoftware nvironments, o that the inter-face cannot assume any graphical facilitiessuch as cursor-addressable displays.
Weresuch facilities to be available, the systemcould provide step-by-step feedback on theconsequences of individual grammaticalityjudgments.The fact that VEX is not specific to anyone application domain or type of back-end system, and is relatively loosely cou-pled to the internal characteristics of theCLE, means that the techniques it em-bodies should in principle be applicable to(even if not always optimal or sufficient in)a wide range of natural anguage process-ing contexts.
Indeed, it might be possibleto produce a version of VEX with clearly-defined interfaces at morphological, syn-tactic and semantic levels that could sim-ply be "plugged in" to a range of existingsystems to provide them with a lexical ac-quisition capability.10 ACKNOWLEDGEMENTSDevelopment of the CLE has been carriedout as part of a research programme innatural anguage processing supported bythe UK Department ofTrade and Industryunder Alvey grant ALV/PRJ/IKBS/105and by members of the NATTIE consor-tium (British Aerospace, British Telecom,Hewlett Packard, ICL, Olivetti, Philips,Shell Research, and SRI).
I would like tothank the CLE development team, andvarious members of the consortium orga-nizations, for valuable criticisms and sug-gestions.11 REFERENCESAlshawi, Hiyan, David M. Carter, Jan vanEijck, Robert C. Moore, Douglas B.Moran, Fernando C.N.
Pereira, ArnoldG.
Smith and Steve G. Pulman.
1988a.Interim Report on the SRI Core Lan-guage Engine.
Report CCSRC-005,SRI International Cambridge ResearchCentre, Cambridge, England.Alshawi, Hiyan, David M. Carter, Jan vanEijck, Robert C. Moore, Douglas B.Moran and Steve G. Pulman.
1988b.Overview of the Core Language En-gine.
Proceedings of the InternationalConference on Fifth Generation Com-puter Systems, Tokyo, pp.
1108-1115;also Report CCSRC-008, SRI Inter-national Cambridge Research Centre,Cambridge, England.Gross, Maurice.
1975.
M~thodes en Syn-taze, Hermann, Paris.Grosz, Barbara J., Douglas E. Ap-pelt, Paul Martin, and Fernando C.N.Pereira.
1987.
TEAM: An Experimentin the Design of Transportable Natural-Language Interfaces.
Artificial Intelli-gence, 32:173-243.- 144-
