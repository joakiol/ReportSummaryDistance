Structure Sharing with Binary TreesLauri KarttunenSRI International, CSLI StanfordMartin KayXerox PARC, CSU StanfordMany current interfaces for natural languagerepresent syntactic and semantic information in theform of directed graphs where attributes correspondto vectors and values to nodes.
There is a simplecorrespondence between such graphs and the matrixnotation linguists traditionally use for feature sets..' n "< 'a ' " "sg 3rdb.
I cat: np -\]1rnumber: sgagr: \[..person: 3rdJJFigure IThe standard operation for working with such graphsis unification.
The unification operation succedes onlyon a pair of compatible graphs, and its result is agraph containing the information in bothcontributors.
When a parser applies a syntactic rule, itunifies selected features of input constituents tocheck constraints and to budd a representat=on for theoutput constituent.Problem: proliferation of copiesWhen words are combined to form phrases,unification is not applied to lexlcat representationsdirectly because it would result in the lexicon beingchanged.
When a word is encountered in a text, acopy is made of its entry, and unification is applied tothe copied graph, not the original one.
In fact,unification in a typical parser is always preceded by acopying operation.
Because of nondeterminism inparsing, it is, in general, necessary to preserve everyrepresentation that gets built.
The same graph maybe needed again when the parser comes back topursue some yet unexplored option.
Our experiencesuggests that the amount of computational effortthat goes into producing these copies is much greaterthan the cost of unification itself.
It accounts for asignificant amount of the total parsing time.In a sense, most of the copying effort is wasted.Unifications that fail typically fail for a simple reason.If it were known in advance what aspects of structuresare relevant in a particular case, some effort could besaved by first considering only the crucial features ofthe input.Solution: structure sharingThis paper lays out one strategy that has turned out tobe very useful in eliminating much of the wastedeffort.
Our version of the basic idea is due to MartinKay.
It has been implemented in slightly differentways by Kay in Interlisp-O and by Lauri Karttunen inZeta Lisp.
The basic idea is to minimize copying byallowing graphs share common parts of theirstructure.This version of structure sharing is based on fourrelated ideas:133?
Binary trees as a storage device for featuregraphs?
"Lazy" copying?
Relative indexing of nodes in the tree?
Strategy for keeping storage trees as balancedas possibleBinary treesOur structure-sharing scheme depends onrepresented feature sets as binary trees.
A treeconsists of cells that have a content field and twopointers which, if not empty, point to a left and aright cell respectively.
For example, the content of thefeature set and the corresponding directed graph inFigure 1 can be distributed over the cells of a binarytree in the following way.Figure 2The index of the top node is 1; the two cells belowhave indices 2 and 3.
In general, a node whose indexis n may be the parent of ceils indexed 2n and 2n + 1.Each cell contains either an atomic value or a set ofpairs that associate attribute names with indices ofcells where their value is stored.
The assignment ofvaiues to storage cells is arbitrary; =t doesn't matterwhich cell stores which value.
Here, cell 1 conta,ns theinformation that the value of the at"tribute cat isfound in ceil 2 and that of agr in cell 3.
This is a slightsimplification.
As we shall shortly see, when the valuein a cell involves a reference to another cell, thatreference is encoded as a relative index.The method of locating the cell that corresponds to agiven index takes advantage of the fact that the treebranches in a binary fashion.
The path to a node canbe read off from the binary representation of its indexby starting after the first 1 in this number and taking 0to be a signal for a left turn and 1 as a mark for a rightturn.
For example, starting at node 1, node S isreached by first going down a left branch and then aright branch.
This sequence of turns corresponds tothe digits 01.
Prefixed with 1, this is the same as thebinary representation of 5, namely 101.
The sameholds for all indices.
Thus the path to node 9 (binary1001) would be LEFT-LEFT-RIGHT as signalled by thelast three digits following the initial 1 in the binarynumeral (see Figure 6).Lazy copyingThe most important advantage that the schememinimizes the amount of copying that has to be done.In general, when a graph is copied, we duplicate onlyThe operation that replaces copying in this schemestarts by duplicating the topmost node of the treethat contains it.
The rest of the structure remains thesame.
It is Other nodes are modified only ~f and whendestructive changes are about to happen.
Forexample, assume that we need another copy of thegraph stored in the tree in Figure 2.
This can beobtained by producing a tree which has a differentroot node, but shares the rest of the structure with itsoriginal.
In order to keep track of which tree actuallyowns a given node, each node tames a numeral tagthat indicates its parentage.
The relationshipbetween the original tree (generation 0) and its copy(generation 1) is illustrated in Figure 3 where thegeneration is separated from the index of a node by acolon.1:0 1:1person 4 2:0 Inp l  3:0 number S4:0 S:OFigure 3134If the node that we want to copy is not the topmostnode of a tree, we need to duplicate the nodes alongthe branch leading to it.When a tree headed by the copied node has to bechanged, we use the generation tags to minimize thecreation of new structure.
In general, all and only thenodes on the branch that lead to the site of adestructive change or addition need to belong to thesame generation as the top node of the tree.
The restof the structure can consist of old nodes.
For example,suppose we add a new feature, say \[gender: femJ tothe value of agr in Figure 3 to yield the feature set inFigure 4.pat: np 11  Fperson: 3rd Jnumber: sg agr:gender: fernFigure 4Furthermore, suppose that we want the change toaffect only the copy but not the original feature set.In terms of the trees that we have constructed for theexample in Figure 3, this involves adding one new cellto the copied structure to hold the value fem, andchanging the content of cell 3 by adding the newfeature to it.The modified copy and its relation to the original isshown in Figure S. Note that one half of the structureis shared.
The copy contains only three new nodes.2 : 0 ~  4/ ~ J...~ml~t ~ j number 5/ "~ gender 64:0,1~"\] S:oF'~ f6:1 ~m'--~,Figure 5From the point of view of a process that only needs tofind or print out the value of particular features, itmakes no difference that the nodes containing thevalues belong to several ,trees as long as there is noconfusion about the structure.Relative addressingAccessing an arbitrary cell in a binary tree consumestime in proportion to the logarithm of the size of thestructure, assuming that cells are reached by startingat the top node and using the index of the targetnode as an address.
Another method is to use relativeaddressing.
Relative addresses encode the shortestpath between two nodes in the tree regardless ofwhere they are are.
For example, if we are at node 9in Figure 6.a below and need to reach node 11, it iseasy to see that it is not necessary to go all the way upto node 1 and then partially retrace the same path inlooking up node 11. instead, one can stop goingupward at the lowest common ancestor, node 2., ofnodes 9 and 11 and go down from there.a.Figure 6With respect to node 2, node 11 is in the sameposition as 7 is with respect 1.
Thus the retativeaddress of cell 11 counted from 9 is 2,7-- 'two nodes135up, then down as if going to node 7".
In general,relative addresses are of the form <up,down > where<up> is the number of links to the lowest commonancestor of the origin and <down> is the relativeindex of the target node with respect to it.Sometimes we can just go up or down on the samebranch; for example, the relative address of cell 10seen from node 2 is simply 0,6; the path from 8 or 9 to4is 1,1.As one might expect, it is easy to see theserelationships if we think of node indices in theirbinary representation (see Figure 6.b).
The lowestcommon ancestor 2 (binary 10) is designated by thelongest common initial substring of 9 (binary 1001)and 11 (binary 1011).
The relative index of 11, withrespect to, 7 (binary 111), is the rest of its index with 1prefixed to the front.In terms of number of links traversed, relativeaddresses have no statistical advantage over thesimpler method of always starting from the top.However, they have one important property that isessential for our purposes: relative addresses remainvalid even when trees are embedded ~n other trees;absolute indices would have to be recalculated.Figure 7 is a recoding of Figure S using relativeaddresses.2:0 ~ 3.01 ~o~,~1~ I ~:l l  person1,4/ \  I I number 1,s4:01 ira I 5:01 sg I 6:1Figure 7Keeping trees balancedWhen two feature matrices are unified, the binarytrees corresponding to them have to be combined toform a single tree.
New attributes are added to someof the nodes; other nodes become "pointer nodes,"136i.e., their only content is the relative address of someother node where the real content is stored.
As longas we keep adding nodes to one tree, it is a simplematter to keep the tree maximally balanced.
At anygiven time, only the growing fringe of the tree can beincompletely filled.
When two trees need to becombined, it would, of course, be possible to add allthe cells from one tree in a balanced fashion to theother one but that would defeat the very purpose ofusing binary trees because it would mean having tocopy almost all of the structure.
The only alternativeis to embed one of the trees in the other one.
Theresulting tree will not be a balanced one; some of thebranches are much longer than others.
Consequently,the average time needed to look up a value ~s boundto be worse than in a balanced tree.For example, suppose that we want to unify a copy ofthe feature set in Figure lb, represented as in Figure 2but with relative addressing, with a copy of thefeature set in Figure 8.a.
agr: \[gender: fem\]\]l:01agr0,2 Jgender 2:ol 1,31 3:oFigure 8a.
\[-cat: npI person: 3rd I ILagr: I-number: sg-~Lgender : fem~JI cat0,2 lb.
1"1 aqr0,3Z .
0 \ [ ~ ~ ~ ~ ~  ~ n  1,4?
~1_:.~ I number 1,51:11 agrO,2 I2:11 --> 2,1 I 3:0Figure 9Although the feature set in Figure 9.a is the same asthe one represented by the right half of Figure 7, thestructure in Figure 9.b is more complicated because itis derived by unifying copies of two separate trees,not by simply adding more features to a tree, as inFigure 7.
In 9b, a copy of 8.b has been embedded asnode 6 of the host tree.
The original indices of bothtrees remain unchanged.
Because all the addressesare relative; no harm comes from the fact that indicesin the embedded tree no longer correspond to thetrue location of the nodes.
Absolute indices are notused as addresses because they change when a tree isembedded.
The symbol ->  in node 2 of the lower treeindicates that the original content of thisnode--<jender 1,3~has been replaced by the addressof the cell that it was unified with, namely cell 3 in thehost tree.In the case at hand, it matters very little which of thetwo trees becomes the host for the other.
Theresulting tree is about as much out of balance eitherway.
However, when a sequence of unifications is~erformed, differences can be very significant.
Forexample, if A, B, and C are unified with one another, ~tcan make a great deal of difference, which of the twoalternative shapes in Figure 10 is produced as the finalresult.A A.., ?
~ ~,&Figure 10When a choice has to be made as to which of the two?
,rees to embed in the other, it is important tominimize the length of the longest path in theresulting tree.
To do this at all efficiently requiresaddtitional infornation to be stored with each node.According to one simple scheme, this is simply thelength of the shortest path from the node down to anode with a free left or right pointer.
Using this, it is asimple matter to find the shallowest place in a tree atwhich to embed another one.
If the length of thelonger path is also stored, it is also easy to determinewhich choice of host will give rise to the shallowestcombined tree.Another problem which needs careful attentionconcerns generation markers.
If a pair of trees to beunified have independent histories, their generationmarkers will presumably be incommensurable andthose of an embedded tree will therfore not be validein the host.
Various solutions are possible for thisproblem.
The most straightforward is relate thehistories of all trees at least to the extent of drawinggeneration markers from a global pool.
In Lisp, forexample, the simplest thing is to let them be CONScells.ConclusionWe will conclude by comparing our method ofstructure sharing with two others that we know of: R.Cohen's immutable arrays and the idea discussed inFernando Pereira's paper at this meeting.
The threealternatives involve different trade-offs along thespace/time continuum.
The choice between them wdldepend on the particular application they areintended for.
No statistics on parsing are avadable yetbut we hope to have some in the final version.AcknowledgementsThis research, made possible in part by a gift from theSystems Development Foundation, was alsosupported by the Defense Advanced Research ProjectsAgency under Contracts N00039-80- C-0575 andN00039-84-C-0524 with the Naval Electronic SystemsCommand.
The views and conclusions contained inthis document are those of the author and should notbe interpreted as representative of the officialpolicies, either expressed or implied, of the DefenseAdvanced Research Projects Agency, or the UnitedStates government.
Thanks are due to FernandoPereira and Stuart Shieber for their comments onearlier presentations of this material.136ATHIS PAGE INTENTIONALLY LEFT BLANK.
