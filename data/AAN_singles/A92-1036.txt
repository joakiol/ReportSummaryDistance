Portable Natural Language Generation using SPOKESMANAbstract 1This paper reports on the SPOKESMAN natural anguagegeneration system, which is a domain independent text gen-erator designed to incrementally produce text for an underly-ing application program.
This work is a direct outgrowth ofthe work we reported on at the last ACL Applied Conferencein 1988, where we connected an application program directlyto the linguistic omponent, Mumble-86.
The major addi-tion has been a new component to the system, a text plannerthat provides the capability to compose the utterance incre-mentally.
The central feature of the text planning com-ponent is a new level of representation that both capturesmore linguistic generalizations and makes the system moreportable, so that we can easily interface to different domainsand different kinds of application programs.
This larger sys-tem is called "Spokesman", as it acts as the mouthpiece fora number of application programs.1.
IntroductionThere are generally two approaches toachieving portabil-ity.
One is to build peripheral components hat can auto-matically or semi-automatically acquire the knowledgeneeded to port to a new domain.
The second is to modular-ize the system so that the components hat are not domainspecific are kept separate from those that are, and to try tomaximize the amount of knowledge in the more generalcomponents.
In the long term, a combination of theseapproaches will certainly be needed.
In the work presentedhere, we have concentrated on the later.
For example, bytaking advantage of the fact that most of language isnot par-ticular to any domain, we have isolated the linguistic realiza-tion component and used the Text Structure to captureabstract linguistic generalizations.
Also by using theknowledge base of the application directly we can not onlycapture generalizations about objects which are expressedsimilarly, but also handle those cases where the means ofexpression is specific to a particular domain.2.
ModularizationIn our earlier work, generation i volved three modules: alinguistic realization component (LRC) MUMBLE-86(Meteer, et.al 1987), an underlying application program, anda special purpose text planner to handle the mapping fromone to the other.
The text planner used the input specifica-tion language to Mumble-86 as a means of compensating1 The work reported here was done at BBN Systems andTechnologies, Cambridge, Massachusetts.
I would like to thank allof my BBN colleagues, in particular Glenn Abrett, StephenDeutsch, Dawn MacLaughlin, and Varda Shaked, for theircontributions to this work during my tenure at BBN.Mar ie  MeteerSage LabRensselaer Polytechnic InstituteTroy,  New York 12180METEER@CS.RPI.EDUfor the semantic deficits of linguistically naive underlyingapplication programs without compromising principledgrammatical treatments in natural language generation.V / / /~/ALBM.spedf ic  text p lanner / , / /A('u nderl ying represent a ion ?
I(EE ) Y~/~ i u  .
.
.
.
.
.
.
.
.
.
.
: .
.
_ .
.
n: : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :  LANOUAOE :::::::::::::::::::::::::::::::::::::::::::::::::::::::1988 Architecture: Interfacing to Mumble-86While this modularization isolated the linguistic com-ponent, using it directly required ~e developer to be aware ofvery low level linguistic details.
For example, thespecification of a noun phrase requires that informationabout number, person, and determiner be included.Furthermore, there was no way to ensure that a particularspecification built by a text planner would actually beexpressible by the linguistic component.
For example,there was no~hing to prevent a planner from composing aspecification combining a completive vent with a duration(e.g.
*"the plane landed for ten minutes").
Also, thespecification language itself cannot capture certaingeneralizations about what features can co-occur in languageand what is expressed by certain combinations of features,leaving them to the text planner.
For example, a singlenoun phrase with a definite article indicates that the entity isknown (e.g.
"the dog"); however if a proper name is used,the article is omitted even when the entity is known (e.g.
"Fluffy").While this architecture was a successful means of workingdirectly with MUMBLE-86, it left a great deal of work to bedone by the planner, most of which must be builtspecifically for each application.
Our approach indeveloping a text planner for the current system was tointroduce modularity into the text planner, separating whatis general to language from that which is specific to anapplication.
The resulting system is called SPOKESMAN,and its architecture is shown below.
The general knowledgeused by the .ext planner esides in the TEXT PLANNERCORE; the domain specific portions of the text planner areagain indicated by diagonal lines.Note that three of the applications shown all use the sameknowledge representation language, the Simple FrameLanguage (SFL, Abrett, et al 1989).
Following our overallapproach of modularizing those portions of the system thatare shared, we built a subsystem for interfacing with therepresentation language that contains all the routines foraccessing objects in SFL and for handling what is commonto all SFL-based applications, uch as the concept THING.237?
/ f f .." "~.. X. X.
"% '~ ~ "% "% i f  f f J J J r(underlying '~ /(t~n~edvi~* //\]~ SPOKESMAN~-~.
SPOKESMAN/\]\\ SPOKESMAN'representation" ntatno"?
\ \ \ \ \ \ \N~ _ .
WML_ ) _ _ Q,,%I,,",:,,'~,~",:,,',,',SFL INTERFACE,',",", ' , ' ,", ' ,  , ,"; ~:: : ii; i i i i :i; i:i ; :i ::i :)ii i   ::iii i l :i ii lii~ i i::iiiiiiiiiiiii::iiiiiiiiiiiiiiiiii:iiiiil !
l !
::i ::i:: : !
}ii~ i?
:rE XY PL~ R C 6 i~E i ;)ii i l ii i )iil )i i !
i!
ii i i i i !
ili;i;ii i  :: i : i : ):: i : iii:: i :iiiiiii   ::i :i :i  i::i i i~iii  ii  l i)ii ::i :i :i :i ~iiiiiii::i :: : :; .:..:.:.:.:,:.:,:.:.:.:.:.
: :,:-:.:,:.:-:,:,:.:.:-:.:.:,:.:.:-:-:-:-:-:-:-:-:-:.
: .
..:.:.:.:.:::.:::::.
::: :.:.
::: :::::::.
::::: .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.:.:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::a:a:;:a::::::.~:::::.~:::::~::~::~:~:~::~::~:~::~:~::~:::~:~:~::~:~:~:~::::.~::: SPECIFICATION LANGUAGE *:."
............. :` -:` '.
:` .~:~:.:.
:~:~..~:~:.` .~:~:.:.:.:~:.:.:~`~:~:.
:'.~:` ~`` :.:.:.:~:.:~:~:~:.:.:.:.:.
:1992 Architecture: TheSpokesman is essentially an object-oriented program inthat the routines for mapping from one level to the other arespecialized for the type of object being mapped, just asgeneric methods in CLOS or Flavors are specialized for dif-ferent classes or flavors in those object oriented program-ming languages.
Each mapping function is a table which,when given an object, will walk up the KB hierarchy until itfinds a routine associated with that object's type or a type itinherits from.
If that routine is a template, it will executethe template; if it is a class of alternatives, it will select oneand execute that.
This process is shown schematicallybelow.
There are different tables for the mappings betweeneach level of representation i  Spokesman, and, in somecases, different ables depending on the context defined byrepresentational level.Mapping-.
(fo?
type) funa/onexpm~ion2 l~' \[ 3< INSTANCE> "'expreeelorl of Instant ' "MappingsT-blolTable;?.
3Cllll of Dltematlweexpression IAs we discussed earlier, one of our goals has been to iso-late what is common to a language (though not necessarilyall languages) from what is particular to the application thegenerator is speaking for.
In particular, we wanted to bothcapture the generalizations available from the cooccurance offeatures in the linguistic specification and ensure that thespecifications that are built are expressible in language.Within the text planner core, these generalizations arecaptured in the level of representation called the TextStructure (TS), which is used to compose the text.
TS is atree representing the constituency of the utterance, whereconstituents may be entire paragraphs related by rhetoricalrelations, or they may be lexically headed constituentsinternal to a clause.
The terms of the TS are abstractionsover the concrete resources of language (words, phrases,morphological markers).
This vocabulary and the structurebuilt with it provides the text planner with a representationof what decisions have already been made, thus constrainingfurther decisions, and of what opportunities are available forfurther composition.3.
Captur ing differences between domainIn what we have presented so far, the focus has been ontaking advantages of similarities within language and amongapplications to isolate domain independent components fromthose that need to be specific to the application program.Spokesman Generation SystemHowever, there are some things that are intrinsically domainspecific, both in what information is expressed and in how itis expressed.
A generation system that is to produce real-istic texts in a domain must allow the developer to special-ize routines at all levels of the generation process.One example of a domain specific expression is the waypilots are addressed in the Air Traffic Control domain.Rather than using the pilot's name, the controller addressesthe pilot using the flight ID of the plane the pilot isflying--in effect he addresses the plane; similarly, pilotsaddress controllers using their function (e.g approach,tower).
In SPOKESMAN, this is handled using the map-pings.
Rather than using the mapping for PERSON, whichpilot inherits from, a mapping specific to the conceptPILOT is set up, which puts the aircraft instance rather thanthe pilot instance in the resultant Text Structure node.
Inthe next phase of the generation process, which maps fromthe text structure to the linguistic specification, the mappingfrom the aircraft to the lexical resource is used, whichcombines the airline and the plane's ID number into aphrase, such as "United four fifty one".4.
Conc lus ionWe have described the modularization f the SPOKESMANgeneration system, which is designed to increase itsportability, and we have briefly shown how the use ofmappings directly from the application's knowledge base canboth capture generalities in how information is expressedand allow specializations for domain specific expressions.
(For a more detailed escription of SPOKESMAN and TextStructure, see Meteer 1991, 1992.
)Abrett, G., Burstein, M., & Deutsch, S. (1989) TARL: TacticalAction Representation Language, An Environment for BuildingGoal Directed Knowledge Based Simulations.
BBN TechnicalReport No.
7062.McDonald, D. & Meteer, M. (1988) From Water to Wine:Generating Natural Language Text from Today's ApplicationsPrograms, Proceedings of the 2nd Conference on Applied NaturalLanguage Processing, Austin, Texas.Meteer, M. (1991a) SPOKESMAN: Data Driven, Object OrientedNatural Language Generation, Proceedings of the Seventh IEEEConference on Artificial Intelligence Applications, Miami Beach,Florida, February 26-28.Meteer, M. (1991b) Abstract Linguistic Resources for TextPlanning" Covaputationallntelligence.
7(4).Meteer, M. (1992) Expressibility and the problem of efficient textplanning.
Pinter Publishers.
(forthcoming)Meteer, M., McDonald, D., Anderson, S., Forster, D., Gay, L.,Huettner, A., and Sibun, P. 1987.
Mumble-86: Design andImplementation.
UMass Technical Report 87-87.
University ofMassachusetts, Amherst, MA.238
