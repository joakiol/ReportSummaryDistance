Proceedings of NAACL-HLT 2015, pages 56?60,Denver, Colorado, May 31 ?
June 5, 2015.c?2015 Association for Computational LinguisticsVisualizing Deep-Syntactic Parser OutputJuan Soler-Company1Miguel Ballesteros1Bernd Bohnet2Simon Mille1Leo Wanner1,31Natural Language Processing Group, Pompeu Fabra University, Barcelona, Spain2Google Inc.3Catalan Institute for Research and Advanced Studies (ICREA)1,3{name.lastname}@upf.edu2bohnetbd@google.comAbstract?Deep-syntactic?
dependency structuresbridge the gap between the surface-syntacticstructures as produced by state-of-the-artdependency parsers and semantic logicalforms in that they abstract away from surface-syntactic idiosyncrasies, but still keep thelinguistic structure of a sentence.
They havethus a great potential for such downstreamapplications as machine translation and sum-marization.
In this demo paper, we propose anonline version of a deep-syntactic parser thatoutputs deep-syntactic structures from plainsentences and visualizes them using the Brattool.
Along with the deep-syntactic structures,the user can also inspect the visual presen-tation of the surface-syntactic structures thatserve as input to the deep-syntactic parserand that are produced by the joint tagger andsyntactic transition-based parser ran in thepipeline before deep-syntactic parsing takesplace.1 Introduction?Deep-syntactic?
dependency structures bridge thegap between surface-syntactic structures as pro-duced by state-of-the-art dependency parsers and se-mantic logical forms in that they abstract away fromsurface-syntactic idiosyncrasies, but still keep thelinguistic structure of a sentence.
More precisely,a deep-syntactic structure (DSyntS) is a dependencytree that captures the argumentative, attributive andcoordinative relations between full (i.e., meaning-ful) words of a sentence.
For illustration, Figure1 shows a surface-syntactic structure (above) anddeep-syntactic structure (below) for the sentence:almost 1.2 million jobs have been created by thestate in that time.DSyntSs have a great potential for such down-stream applications as deep machine translation,summarization or information extraction.
In deepmachine translation as discussed, e.g., by Jones etal.
(2012), DSyntSs simplify the alignment betweenthe source and target language structures consider-ably.
In extractive summarization, sentence fusion(Filippova and Strube, 2008) becomes much morestraightforward at the level of DSyntSs.
A stochas-tic sentence realizer that takes as input DSyntSs canthen be used to generate surface sentences (Balles-teros et al, 2015).
In information extraction (Attardiand Simi, 2014) the procedures for the distillation ofthe information to fill the slots of the correspondingpatterns are also simpler at the DSyntS level.However, it is only recently that deep-syntacticparsing has been introduced as a new parsingparadigm; see, e.g., (Ballesteros et al, 2014).1Novisualization interfaces are available as yet to con-trol the output of deep-syntactic parsers.
In this pa-per, we propose such a visualization interface.
Theinterface can be used for both a pipeline consistingof a syntactic parser and a deep parser and a jointsyntactic+deep parser.
In the first configuration, itfacilitates the visualization of the output of the syn-tactic parser and of the output of the deep parser.In the second configuration, it visualizes directly theoutput of the joint parser.In what follows, we present its use for thefirst configuration applied to English.
As surface-syntactic parser, we use Bohnet and Nivre (2012)?sjoint tagger+lemmatizer+parser.
As deep parser, weuse Ballesteros et al (2014)?s implementation.
Bothhave been trained on the dependency Penn Tree-bank (Johansson and Nugues, 2007), which has beenextended by the DSyntS-annotation.
The interfacecan be inspected online; cf.
http://dparse.1The source code of Ballesteros et al?s deep parserand a short manual on how to use it can be down-loaded from https://github.com/talnsoftware/deepsyntacticparsing/wiki.56(a) almost 1.2 million jobs have been created by the state in that timeadvquantquantsubjanalyt perfanalyt passagentadvpreposdetpreposdet(b) almost 1.2 million job create state in that timeATTRATTRATTRIIIATTRIIATTRFigure 1: Sample equivalent (a) SSynt- and (b) DSynt-structures.
A SSyntS contains all tokens of the sentence, whilein the corresponding DSyntS the grammatical tokens that are void of lexical meaning are omitted.multisensor.taln.upf.edu/main.
It ac-cepts as input an English sentence and delivers asoutput the surface- and deep-syntactic structures ofthis sentence.Section 2 shows how the online model of the deepparser is trained and displays its performance for theEnglish model.
Section 3 describes the visualizationinterface and its use online.
In Section 4, a numberof other existing visualizers of the output of depen-dency parsers are briefly listed.
Section 5, finally,concludes and makes some suggestions for futurework.2 Deep-Syntactic ParserAs already mentioned above, we use the jointPoS-tagger+lemmatizer+parser of Bohnet and Nivre(2012)2as surface parser, setting up a pipelinewith the deep-syntactic parser of Ballesteros et al(2014).3The output of the first serves as input to thelatter.The online versions of the joint PoS-tagger+lemmatizer+parser and the deep-syntacticparser have been trained on the dependencyPenn Treebank (Johansson and Nugues, 2007) inCoNLL09 format.
To have an English trainingdataset for the deep-syntactic parser, we derivedDSyntSs from the syntactic structures of the de-pendency Penn Treebank, extending thus the PennTreebank by a new layer of annotation, as describedin Section 2.1.
The performance figures obtainedusing this dataset are shown in Section 2.2.2The joint PoS-tagger+Lemmatizer+parser is available fordownloading at https://code.google.com/p/mate-tools/.3The deep-syntactic parser is availabe for download athttps://code.google.com/p/deepsyntacticparsing/.2.1 Training Dataset for the Deep-SyntacticParserThe English deep-syntactic dataset has been ob-tained using a rule-based graph transducer that con-verts the syntactic annotation of the dependencyPenn Treebank into a DSyntS annotation in theCoNLL09 format.
The conversion removes definiteand indefinite determiners, auxiliaries, THAT com-plementizers, TO infinitive markers, and all func-tional (or lexically-bound) prepositions which wewere able to recover in PropBank and NomBank.In these two resources, 11,781 disambiguated pred-icates are described and their semantic roles arelisted.
We use two fields of their XML files to gatherprepositions: the last word of the field ?descr?
in?roles?, and the first word of the field of the corre-sponding role in ?example?.
In this way, we retrieve,for instance, for the lexical unit beg.01 the prepo-sition from for the second semantic role (as in begfrom someone), and the preposition for for the thirdrole (as in beg someone for something).
The corre-spondence between prepositions and semantic rolesis also used for the mapping of dependency relations(Mille and Wanner, 2015).For each surface dependency relation, a defaultmapping that is conditioned by the encountered syn-tactic structure and dictionary entries is defined.Thus, a subject is by default mapped to a first ar-gument I unless it is the subject of a passive verb.In this case, the subject is mapped to the secondargument II.
Along similar lines, a dictionary en-try may specify in the subcategorization pattern ofa headword the association of a given preposition toa different argument slot than indicated by the de-fault mapping.
For instance, in the sentence Sonyannounced its plans to hire Mr. Guber, to is a depen-57POS LEMMA LAS UASEnglish 98.50 99.46 89.70 92.21Table 1: Performance of Bohnet and Nivre?s joint PoS-tagger+dependency parser trained on the PTB Treebankfor English.Hypernode Detection (English)MeasureSSyntS?DSyntS Transducerph98.42 (41967/42461)rh98.82 (41967/42467)F1h98.62Attachment and labeling (English)Measure SSynS?DSyntS TransducerLAP 81.80 (34882/42461)UAP 85.82 (36598/42461)LA-P 89.11 (37998/42641)LAR 82.14 (34882/42467)UAR 86.18 (36598/42467)LA-R 89.48 (37998/42467)Table 2: Performance of the Ballesteros et al deep-syntactic parser trained on the adapted version of the PTBTreebank for English.dent of plan with the surface dependency NMOD.NMOD is by default mapped to the deep relationATTR, but in the dictionary entry of plan it is statedthat a dependent introduced by to is mapped to II,such that in the case of plan, the default will be over-written in that NMOD will be mapped to II.2.2 Parser ResultsOur models offer state-of-the-art performance forpart-of-speech tagging, lemmatization, syntactic de-pendency parsing and deep-syntactic parsing.4Ta-bles 15and 26show the results of both parsers.4This is the first attempt to build English deep-syntacticstructures; Ballesteros et al (2014) report results for Spanishonly.5?POS?
stands for part-of-speech accuracy, ?LEMMA?
forlemma accuracy, ?LAS?
for labeled attachment score, and?UAS?
for unlabeled attachment score6?ph?
stands for hypernode detection precision, ?rh?
for hy-pernode detection recall, ?F1h?
for hypernode detection F1measure, ?LAP?
for labeled attachment precision, ?UAP?
for un-labeled attachment precision, ?LA-P?
for label accuracy preci-sion, ?LAR?
for labeled attachment recall, ?UAR?
for unlabeledattachment recall, and ?LA-R?
for label accuracy recall.3 Tree VisualizationOur visualization interface is built with a JavaHTTPServer, which is bound to an IP address andport number that listens to incoming connectionsfrom users.
The HTTPServer Java class connectswith both the joint tagger+lemmatizer+parser andthe deep-syntactic parser and provides the output ofplain text input sentences in real time.
To ensure realtime performance, a model of both parsers is alreadyloaded, and the interface waits for new input givenby the users.The main page (see http://dparse.multisensor.taln.upf.edu/main) lets theuser introduce a text and select what kind of parsingshe wants to see in the output, the surface-syntactic,deep-syntactic or both at the same time.
Dependingon the choice of the user, after parsing the CoNLLoutputs (surface- and/or deep-syntactic) are shown.If desired, they can be also downloaded.
A click onthe corresponding link takes the user to the graphicrepresentation of the parse tree.The visualization of the output is performed bythe annotation tool Brat (Stenetorp et al, 2012).
Brattakes an annotation file, which is produced by trans-forming the CoNLL files that the parsers output intoBrat?s native format, and generates the graphical in-terface for the dependency trees.Figure 2 shows three sample surface syntacticstructures in Brat.
In Figure 3, their equivalent deep-syntactic structures are displayed.
As already Fig-ure 1, the figures illustrate the difference of bothtypes of structures with respect to the abstractionof linguistic phenomena.
The DSyntSs are clearlymuch closer to semantics.
As a matter of fact, theyare equivalent to PropBank structures (Palmer etal., 2005).
However, this does not mean that theymust per se be ?simpler?
than their correspondingsurface-syntactic structures?compare, for instance,the structures (3a) and (3b) in Figures 2 and 3, whereboth SSyntS and DSyntS contain the same numberof nodes, i.e., are isomorphic.The structures (2a) and (2b) illustrate the capacityof the deep parser to correctly identify the argumentsof a lexical item without that explicit hints are avail-able in the surface structure.58(1a)(2a)(3a)Figure 2: Visualization of surface syntactic structures with Brat(1b)(2b)(3b)Figure 3: Visualization of deep-syntactic structures with Brat4 Related WorkVisualization interfaces normally offer a universaland simple way to access the output of NLP tools,among them parsers.
This leads to better compre-hension of their outputs and a better usability fordownstream applications.
Therefore, it is not sur-prising that visualization interfaces have been a rel-evant topic during the last years in the NLP com-munity; see, e.g., (Collins et al, 2008; Collins etal., 2009; Feng and Lapata, 2010).
In the pars-ing area, tools such as MaltEval (Nilsson and Nivre,2008), the Mate Tools (Bohnet and Wanner, 2010),XLDD (Culy et al, 2011), TreeExplorer (Thiele etal., 2013), ViZPar (Ortiz et al, 2014), MaltDiver(Ballesteros and Carlini, 2013), or XLike Services(Carreras et al, 2014) have been proposed for the vi-sualization of parse trees and their subsequent eval-uation.
The interface described in this paper servesa similar purpose.
To the best of our knowledge,it is the first interface that uses the flexible off-the-shelf tool Brat and that serves for the visualizationof deep-syntactic structures.5 Conclusions and Future WorkWe have presented an operational interface for thevisualization of the output of a deep-syntactic parserand of surface-syntactic structures that serve it as in-put.
The interface is flexible in that it allows for thedisplay of any additional structural information pro-vided by an extended parsing pipeline.
For instance,if the obtained deep-syntactic structure is projectedonto a frame-like structure (Chen et al, 2010) withsemantic roles as arc labels, this frame structure canbe displayed as well.
We are currently working onsuch an extension.
Furthermore, we aim to expandour visualization interface to facilitate active explo-ration of linguistic structures with Brat and thus addto the static display of structures the dimension ofVisual Analytics (Keim et al, 2008).AcknowledgmentsThis work has been partially funded by the EuropeanUnion?s Seventh Framework and Horizon 2020 Re-search and Innovation Programmes under the GrantAgreement numbers FP7-ICT-610411, FP7-SME-606163, and H2020-RIA-645012.59ReferencesG.
Attardi and M. Simi.
2014.
Dependency parsing tech-niques for information extraction.
In Proceedings ofEvalita 2014.M.
Ballesteros and R. Carlini.
2013.
Maltdiver: Atransition-based parser visualizer.
In Demonstrationsof the Sixth International Joint Conference on NaturalLanguage Processing, page 25.
IJCNLP.M.
Ballesteros, B. Bohnet, S. Mille, and L. Wanner.2014.
Deep-syntactic parsing.
In Proceedings of the25th International Conference on Computational Lin-guistics (COLING).M.
Ballesteros, B. Bohnet, S. Mille, and L. Wanner.2015.
Data-driven sentence generation with non-isomorphic trees.
In Proceedings of the 2015 Con-ference of the North American Chapter of the Asso-ciation for Computational Linguistics ?
Human Lan-guage Technologies (NAACL HLT 2015).B.
Bohnet and J. Nivre.
2012.
A transition-based sys-tem for joint part-of-speech tagging and labeled non-projective dependency parsing.
In EMNLP-CoNLL.B.
Bohnet and L. Wanner.
2010.
Open Source GraphTransducer Interpreter and Grammar DevelopmentEnvironment.
In Proceedings of the InternationalConference on Linguistic Resources and Evaluation(LREC).X.
Carreras, L. Padr?o, L. Zhang, Z. Rettinger, A.and Li,E.
Garc?a-Cuesta, Z. Agic, B. Bekavec, B. Fortuna,and T.?Stajner.
2014.
Xlike project language analysisservices.
Proceedings of the Demonstrations Sessionat EACL, pages 9?12.D.
Chen, N. Schneider, D. Das, and N.A.
Smith.
2010.Semafor: Frame argument resolution with log-linearmodels.
In Proceedings of the 5th international work-shop on semantic evaluation, pages 264?267.
Associ-ation for Computational Linguistics.C.
Collins, G. Penn, and S. Carpendale.
2008.
Inter-active visualization for computational linguistics.
InProceedings of the 46th Annual Meeting of the Asso-ciation for Computational Linguistics on Human Lan-guage Technologies, Stroudsburg, PA, USA.
Associa-tion for Computational Linguistics.C.
Collins, S. Carpendale, and G. Penn.
2009.DocuBurst: Visualizing Document Content Us-ing Language Structure.
In Proceedings of theEurographics/IEEE-VGTC Symposium on Visualiza-tion (EuroVis ?09), pages 1039?1046.
EurographicsAssociation.C.
Culy, V. Lyding, and H. Dittmann.
2011. xLDD:Extended Linguistic Dependency Diagrams.
In Pro-ceedings of the 2011 15th International Conferenceon Information Visualisation, IV ?11, pages 164?169,Washington, DC, USA.
IEEE Computer Society.Y.
Feng and M. Lapata.
2010.
Visual Informationin Semantic Representation.
In Proceedings of the2010 Conference of the North American Chapter of theAssociation for Computational Linguistics ?
HumanLanguage Technologies (NAACL HLT 2010), pages91?99, Stroudsburg, PA, USA.
Association for Com-putational Linguistics.K.
Filippova and M. Strube.
2008.
Sentence fusionvia dependency graph compression.
In Proceedingsof the International Conference on Empirical Methodsin Natural Language Processing (EMNLP).R.
Johansson and P. Nugues.
2007.
Extendedconstituent-to-dependency conversion for English.
InProceedings of the 16th Nordic Conference of Com-putational Linguistics (NODALIDA), pages 105?112,Tartu, Estonia, May 25-26.B.
Jones, J. Andreas, D. Bauer, K.-M. Hermann, andK.
Knight.
2012.
Semantics-based machine transla-tion with hyperedge replacement grammars.
In Pro-ceedings of the International Conference on Computa-tional Linguistics (COLING).D.A.
Keim, F. Mansmann, J. Schneidewind, J. Thomas,and H. Ziegler.
2008.
Visual Analytics: Scope andChallenges.
In S. Simoff, editor, Visual Data Mining,LNCS 4404, pages 76?90.
Springer Verlag, Berlin.S.
Mille and L. Wanner.
2015.
Towards large-coveragedetailed lexical resources for data-to-text generation.In Proceedings of the First International Workshop onData-to-Text Generation, Edinburgh, Scotland.Jens Nilsson and Joakim Nivre.
2008.
Malteval: an eval-uation and visualization tool for dependency parsing.In Proceedings of the Sixth International Conferenceon Language Resources and Evaluation (LREC?08),Marrakech, Morocco, may.
European Language Re-sources Association (ELRA).I.
Ortiz, M. Ballesteros, and Y. Zhang.
2014.
ViZPar: AGUI for ZPar with Manual Feature Selection.
Proce-samiento del lenguaje natural, 53.Martha Palmer, Paul Kingsbury, and Daniel Gildea.2005.
The Proposition Bank: An annotated corpus ofsemantic roles.
Computational Linguistics, 31.P.
Stenetorp, S. Pyysalo, G. Topi?c, T. Ohta, S. Ananiadou,and J. Tsujii.
2012.
BRAT: A Web-based Tool forNLP-Assisted Text Annotation.
In 13th Conference ofthe European Chapter of the Association for Compu-tational Linguistics, pages 102?107.
Association forComputational Linguistics.G.
Thiele, M. G?artner, W. Seeker, A. Bj?orkelund, andJ.
Kuhn.
2013.
Treeexplorer ?
An extensible Graphi-cal Search Tool for Dependency Treebanks.
In Pro-ceedings of the Demonstrations of the 51st AnnualMeeting of the Association for Computational Linguis-tics (ACL 2013).60
