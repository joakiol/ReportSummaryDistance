The intersection of Finite State Automata and Definite ClauseGrammarsGertjan van NoordVakgroep A l fa - in fo rmat ica  & BCNRi jksunivers i te i t  Gron ingenvannoord@let ,  rug.
nlAbstractBernard Lang defines parsing as ~ cal-culation of the intersection of a FSA (theinput) and a CFG.
Viewing the input forparsing as a FSA rather than as a stringcombines well with some approaches inspeech understanding systems, in whichparsing takes a word lattice as input(rather than a word string).
Furthermore,certain techniques for robust parsing canbe modelled as finite state transducers.In this paper we investigate how we cangeneralize this approach for unificationgrammars.
In particular we will concen-trate on how we might the calculation ofthe intersection of a FSA and a DCG.
Itis shown that existing parsing algorithmscan be easily extended for FSA inputs.However, we also show that the termi-nation properties change drastically: weshow that it is undecidable whether the in-tersection of a FSA and a DCG is empty(even if the DCG is off-line parsable).Furthermore we discuss approaches tocope with the problem.1 IntroductionIn this paper we are concerned with the syntacticanalysis phase of a natural language understandingsystem.
Ordinarily, the input of such a system isa sequence of words.
However, following BernardLang we argue that it might be fruitful to take theinput more generally as a finite state automaton (FSA)to model cases in which we are uncertain about heactual input.
Parsing uncertain input might be nec-essary in case of ill-formed textual input, or in caseof speech input.For example, if a natural anguage understand-ing system is interfaced with a speech recognitioncomponent, chances are that this c o ~ t  is un-certain about the actual string of words that hasbeen uttered, and thus produces a word lattice of themost promising hypotheses, rather than a single se-quence of words.
FSA of course generalizes suchword lattices.As another example, certain techniques to dealwith ill-formed input can be characterized asfinitestate transducers (Lang, 1989); the composition ofan input string with such a finite state transducerresults in a FSA that can then be input for syntac-tic parsing.
Such an approach allows for the treat-ment of missing, extraneous, interchanged or mis-used words (Teitelbaum, 1973; Saito and Tomita,1988; Nederhof and Bertsch, 1994).Such techniques might be of use both in the caseof written and spoken language input.
In the lattercase another possible application concerns the treat-ment of phenomena such as repairs (Carter, 1994).Note that we allow the input to be a full FSA(possibly including cycles, etc.)
since some of theabove-mentioned techniques indeed result in cy-cles.
Whereas an ordinary word-graph always de-fines a finite language, a FSA of course can easily de-fine an infinite number of sentences.
Cycles mightemerge to treat unknown sequences of words, i.e.sentences with unknown parts of unknown lengths(Lang, 1988).As suggested by an ACL reviewer, one couldalso try to model haplology phenomena (such asthe 's  in English sentences like 'The chef at Joe'shat', where 'Joe's" is the name of a restaurant)using a finite state transducer.
In a straightforwardapproach this would also lead to a finite-stateautomaton with cycles.It can be shown that the computation of the in-tersection of a FSA and a CFG requires only a rain-159imal generalization f existing parsing algorithms.We simply replace the usual string positions withthe names of the states in the FSA.
It is also straight-forward to show that the complexity of this processis cubic in the number of states of the FSA (in thecase of ordinary parsing the number of states equalsn + 1) (Lang, 1974; Billot and Lang, 1989) (assumingthe right-hand-sides of grammar rules have at mosttwo categories).In this paper we investigate whether the sametechniques can be applied in case the grammar isa constraint-based grammar rather than a CFG.
Forspecificity we will take the grammar to be a DefiniteClause Grammar (DCG) (Pereira nd Warren, 1980).A DCG is a simple example of a family of constraint-based grammar formalisms that are widely usedin natural language analysis (and generation).
Themain findings of this paper can be extended to othermembers of that family of constraint-based gram-mar formalisms.2 The intersect ion of  a CFG and a FSAThe calculation of the intersection of a CFG anda FSA is very simple (Bar-Hillel et al, 1961).
The(context-free) grammar defining this intersectionis simply constructed by keeping track of thestate names in the non-terminal category sym-bols.
For each rule 9\[o -'-' X l .
.
.X .
there arerules (Xoqoq) "-* (X lqoq l ) (X2q lqa)  .. .
(X ,q , - lq ) ,for all q0...q..
Furthermore for each transition6(qi, or) = qt we have a rule (orqiqk) --~ or.
Thusthe intersection of a FSA and a CFG is a CFG thatexactly derives all parse-trees.
Such a grammarmight be called the parse-forest grammar.Although this construction shows that the in-tersection of a FSA and a CFG is itself a CFG, itis not of practical interest.
The reason is that this?
construction typically ields an enormous arnountof rules that are 'useless'.
In fact the (possibly enor-mously large) parse forest grammar might definean empty language (if the intersection was empty).Luckily "ordinary" recognizers/parsers for CFG canbe easily generalized to construct this intersectionyielding (in typical cases) amuch smaller grammar.Checking whether the intersection is empty or notis then usually very simple as well: only in thelatter case will the parser terminate succesfully.To illustrate how a parser can be generalized toaccept aFSA as input we present a simple top-downparser.A context-free grarnxrmr is represented as adefinite-clause pecification as follows.
We do notwish to define the sets of terminal and non-terminalsymbols explicitly, these can be understood fromthe rules that are defined using the relation ru le  / 2,and where symbols of the ~ are prefixed with'-' in the case of terminals and '+' in the case ofnon-terminals.
The relation top /1  defines the startsymbol.
The language L' = a"b"  is defined as:top (s) .ru le(s,  \ [ -a ,+s, -b\ ] ) .
ru le(s,  \[\]) .In order to illustrate how ordinary parsers can beused to compute the intersection of a FSA and aCFG consider first the definite-clause pecificationof a top-down parser.
This parser uns in polyno-mial time if implemented using Earle), deductionor XOLDT resolution (Warren, 1992).
It is assumedthat the input string is represented bythe t rans  / 3predicate.parse  (P0, P) :-top (Cat), parse  (+Cat ,P0,P) .parse  (-Cat, P0, P) :-t rans  ( P0, Cat, P ),s ide_e f fec t (p (Cat ,P0 ,P )  - -> Cat) .parse  (+Cat, P0, P) :-ru le  (Cat, Ds},parse_ds  (Ds, P0, P, His  ),s ide_e f fec t (p (Cat ,P0 ,P )  - -> His) .parse_ds( \ [ \ ] ,P ,P ,  \[\]) .parse_ds( \ [H lT \ ] ,P0 ,P ,  \[p(H, P0,Pl) \[His\]) :-parse(H,  P0, Pl),parse_ds  (T, PI, P,His) .The predicate side_effect is used to constructthe parse forest grammar.
The predicate always uc-coeds, and as a side-effect asserts that its argumentis a rule of the parse forest grammar.
For the sen-fence 'a a b b' we obtain the parse forest grammar:p(s ,2 ,2 )  - ->  \ [ \ ] .p (s , l ,3 )  - ->\ [p ( -a ,  1 ,2 )  ,p (+s ,  2 ,2 )  ,p ( -b ,  2 ,3 )  \] .p(s ,0 ,4)  - ->\ [p ( -a ,0 ,1 ) ,p (+s , l ,3 ) ,p ( -b ,3 ,4 )  \] .p (a , l ,2 )  - -> a.p(a ,0 ,1)  - -> a.p(b ,2 ,3)  - -> b.p(b ,3 ,4)  - -> b.The reader easily verifies that indeed this grammargenerates (a isomorphism of) the single parse treeof this example, assuming of course that the startsymbol for this parse-forest grammar is p ( s, 0,4 ).In the parse-forest grammar, complex symbols arenon-terminals, atomic symbols are terminals.Next consider the definite clause specificationof a FSA.
We define the transition relation usingthe relation t rans /3 .
For start states, the relation1 60a,qO,qlIas,qO,q2s,ql,q2a,ql,qO s,qO,q2a a,qO,ql s,qLq:' b,q2,q2a a,ql,q0 s,q0,q0 b,q2,q2 bI Ia bb,q2,q2Ibb,q2,q2IbFigure 1: A parse-tree extracted from the parse forest grammarstart/1 should hold, and for final states the relationfinal/1 should hold.
Thus the following FSA, defin-ing the regular language L = (aa)*b + (i.e.
an evennumber of a's followed by at least one b) is given as:start(qO), final(q2).trans(qO,a,ql), trans(ql,a,qO).trans(qO,b, q2).
trans(q2,b, q2).Interestingly, nothing needs to be changed to usethe same parser for the computation fthe intersec-tion of a FSA and a CFG.
If our input 'sentence' nowis the definition of t rans  / 3 as given above, we ob-tain the following parse forest granunar (where thestart symbol is p ( s,  q0, q2 ) ):p(s,qO,qO) --> \[\].p (s ,q l ,q l )  --> \[\].p (s ,q l ,q2)  -->\[p (-a, ql,qO) ,p (+s,qO,qO) ,p (-b, q0,q2) \].p (s,q0,q2) -->\[p (-a, qO,ql) ,p (+s,ql,q2) ,p (-b, q2,q2) \].p (s ,q l ,q2)  -->\[p ( -a,q l ,q0)  ,p (+s,q0,q2) ,p (-b,q2,q2) \].p(a ,q0,q l )  --> a.p(a ,q l ,q0)  --> a.p(b,q0,q2) --> \]3.p(b,q2,q2) --> \]3.Thus, even though we now use the same parserfor an infinite set of input sentences (representedby the FSA) the parser still is able to come upwith a parse forest grammar.
A possible derivationfor this grammar constructs he following (abbrevi-ated) parse tree in figure 1.
Note that the construc-tion of Bar Hillel would have yielded a grammarwith 88 rules.3 The intersection of a DCG and a FSAIn this section we want to generalize the ideas de-scribed above for CFG to DCG.First note that the problem of calculating the in-tersection of a DCG and a FSA can be solved triv-ially by a generalization f the construction by (Bar-Hillel et al, 1961).
However, if we use that methodwe will end up (typically) with an enormously argeforest grammar that is not even guaranteed tocon-tain solutions *.
Therefore, we are interested inmethods that only generate a small subset of this;e.g.
if the intersection is empty we want an emptyparse-forest grammar.The straightforward approach is to generalize ex-isting recognition algorithms.
The same techniquesthat are used for calculating the intersection of aFSA and a CFG can be applied in the case of DCGs.In order to compute the intersection ofa DCG and aFSA we assume that FSA are represented asbefore.DCGs are represented using the same notation weused for context-free grammars, but now of coursethe category symbols can be first-order terms of ar-bitrary complexity (note that without loss of gener-ality we don't ake into account DCGs having exter-\]In fact, the standard compilation ofDCG into Prologclauses does omething similar using variables instead ofactual state names.
This also illustrates that his methodis not very useful yet; all the work has still to be done.161As10111B210A11B1lUA210111B~10Aa10B30Figure 2: Instance of a PCP problem.AIBI1+111A11B1111A310+B3= 101111110= 101111110Figure 3: Illustration of a solution for the PCP problem of figure 2.nal actions defined in curly braces).But if we use existing techniques for parsingDCGs, then we are also confronted with an undecid-ability problem: the recognition problem for DCGsis undecidable (Pereira and Warren, 1983).
A for-tiori the problem of deciding whether the intersec-tion of a FSA and a DCG is empty or not is undecid-able.This undecidability result is usually circum-vented by considering subsets of DCGs which canbe recognized effectively.
For example, we canrestrict he attention to DCGs of which the context-free skeleton does not contain cycles.
Recognitionfor such 'off-line parsable' grammars is decidable(Pereira nd Warren, 1983).Most existing constraint-based parsing algo-rithms will terminate for grammars that exhibit heproperty that for each string there is only a finitenumber of possible derivations.
Note that off-lineparsability is one possible way of ensuring that thisis the case.This observation is not very helpful in establish-ing insights concerning interesting subclasses ofDCGs for which termination can be guaranteed(in the case of FSA input).
The reason is that thereare now two sources of recursion: in the DCG andin the FSA (cycles).
As we saw earlier: even forCFG it holds that there can be an infinite numberof analyses for a given FSA (but in the CFG this ofcourse does not imply undecidability).3.1 Intersection of FSA and off-line parsableDCG is undecidableI now show that the question whether the intersec-tion of a FSA and an off-line parsable DCG is emptyis undecidable.
A yes-no problem is undecidable (cf.
(Hopcroft and Ullman, 1979, pp.178-179)) if there isno algorithm that takes as its input an instance ofthe problem and determines whether the answer tothat instance is 'yes' or 'no'.
An instance of a prob-lem consists of a particular choice of the parametersof that problem.I use Post's Correspondence Problem (PCP) as awell-known undecidable problem.
I show that if theabove mentioned intersection problem were decid-able, then we could solve the PCP too.
The follow-ing definition and example of a PCP are taken from(Hopcroft and Ullman, 1979)\[chapter 8.5\].An instance of PCP consists of two lists, A =vx... vk and B = wl .
.
.
wk of strings over some al-phabet ~,,.
Tl~s instance has a solution if there is anysequence of integers i l .
.
.
i,~, with m > 1, such thatVi i ,  '0i2, ?
? "
,  Vim ~ 'Wil ~ f~Li2, ? "
?
~ ~ im "The sequence i l ,  ?
?
., im is a solution to this instanceof PCP.
As an example, assume that :C = {0,1}.Furthermore, let A = (1, 10111, 10) and B =011, 10, 0).
A solution to this instance of PCP is thesequence 2,1,1,3 (obtaining the sequence 10111Ul0).For an illustration, cf.
figure 3.Clearly there are PCP's that do not have a solu-tion.
Assume again that E = {0, 1}.
Furthermorelet A = (1) and B = (0).
Clearly this PCP does nothave a solution.
In general, however, the problem162trans (q0,x, q0) .
start (q0) .
final (q0) .top (s) .rule(s, \[-r(X, \[\],X, \[\])\]) .ru le(r(A0,A,B0,B),  \[-r(A0,AI,B0,BI),-r(AI,A, BI,B)\]).rule(r(\[ l lA\] ,  A, \[I,I,I IB\],B), \[+x\]) .ru le(r( \ [ l ,0 ,1,1,11A\] ,A,  \[I,0\]B\], B),\[+x\]).rule(r( \[ l ,01A\] ,  A, \[01B\], B),\[+x\]).% FSA% start symbol DCG% require A's and B's match% combine two sequences of% blocks% block AI/BI% block A2/B2% block A3/B3Figure 4: The encoding for the PCP problem of figure 2.whether some PCP has a solution or not is not de-cidable.
This result is proved by (Hopcroft and Ull-man, 1979) by showing that the halting problem forTuring Machines can be encoded as an instance ofPost's Correspondence Problem.First I give a simple algorithm to encode any in-stance of a PCP as a pair, consisting of a FSA and anoff-line parsable DCG, in such a way that the ques-tion whether there is a solution to this PCP is equiv-alent o the question whether the intersection ofthisFSA and DCG is empty.Encoding of PCP.1.
For each I < i < k (k the length of lists A andB) define a DCG rule (the i - th member of A isal ... am, and the i - th  member of B is bl .
.
.
b,):r(\[al .
.
.
a,~lA\], A, \[bl .. .
b, iB\], B) ~ \[z\].2.
Furthermore, there is a rule r(Ao,A,  Bo, B) --+r( Ao, A1, Bo, B1), r( A1, A, BI, B).3.
Furthermore, there is a rule s ~ r(X,  \[\],X, \[\]).Also, s is the start category of the DCG.4.
Finally, the FSA consists of a single state qwhich is both the start state and the final state,and a single transition ~(q, z) = q.
This FSAgenerates =*.Observe that the DCG is off-line parsable.The underlying idea of the algorithm is reallyvery simple.
For each pair of strings from the listsA and B there will be one lexical entry (deriving theterminal z) where these strings are represented byadifference-list encoding.
Furthermore there is a gen-eral combination rule that simply concatenates A-strings and concatenates B-strings.
Finally the rulefor s states that in order to construct a succesful topcategory the A and B lists must match.The resulting DCG, FSA pair for the example PCPis given in figure 4:Proposition The question whether the intersec-tion of a FSA and an off-line parsable DCG is emptyis undecidable.Proo?
Suppose the problem was decidable.
In thatcase there would exist an algorithm for solving theproblem.
This algorithm could then be used to solvethe PCP, because a PCP ~r has a solution if and onlyif its encoding iven above as a FSA and an off-lineparsable DCG is not empty.
The PCP problem how-ever is known to be undecidable.
Hence the inter-section question is undecidable too.3.2 What to do?The following approaches towards the undecidabil-ity problem can be taken:?
limit the power of the FSA?
limit the power of the DCG?
compromise completeness?
compromise soundnessThese approaches are discussed now in turn.Limit the FSA Rather than assuming the input forparsing is a FSA in its full generality, we might as-sume that the input is an ordinary word graph (aFSA without cycles).Thus the techniques for robust processing thatgive rise to such cycles cannot be used.
One exam-ple is the processing of an unknown sequence ofwords, e.g.
in case there is noise in the input andit is not clear how many words have been utteredduring this noise.
It is not clear to me right nowwhat we loose (in practical terms) if we give upsuch cycles.Note that it is easy to verify that the questionwhether the intersection ofa word-graph and an off-line parsable DCG is empty or not is decidable since163it reduces to checking whether the DCG derives oneof a finite number of strings.Limit the DCG Another approach is to limit thesize of the categories that are being employed.
Thisis the GPSG and F-TAG approach.
In that case weare not longer dealing with DCGs but rather withCFGs (which have been shown to be insufficient ingeneral for the description of natural languages).Compromi~ completeness Completeness in thiscontext means: the parse forest grammar containsall possible parses.
It is possible to compromisehere, in such a way that the parser is guaranteed toterminate, but sometimes misses a few parse-trees.For example, if we assume that each edge in theFSA is associated with a probability it is possible todefine a threshold such that each partial result hatis derived has a probability higher than the thres-hold.
Thus, it is still possible to have cycles in theFSA, but anytime the cycle is 'used' the probabil-ity decreases and if too many cycles are encounteredthe threshold will cut off that derivation.Of course this implies that sometimes the in-tersection is considered empty by this procedurewhereas in fact he intersection is not.
For any thres-hold it is the case that the intersection problem ofoff-line parsable DCGs and FSA is decidable.Compromise soundness Soundness in this con-text should be understood as the property that allparse trees in the parse forest grammar are validparse trees.
A possible way to ensure terminationis to remove all constraints from the DCG and parseaccording to this context-free skeleton.
The result-ing parse-forest grammar will be too general mostof the times.A practical variation can be conceived as fol-lows.
From the DCG we take its context-free skele-ton.
This skeleton isobtained by removing the con-straints from each of the grammar rules.
Then wecompute the intersection f the skeleton with the in-put FSA.
This results in a parse forest grammar.
Fi-nally, we add the corresponding constraints fromthe DCG to the grammar rules of the parse forestgral'nrrlaroThis has the advantage that the result is stillsound and complete, although the size of the parseforest grammar is not optimal (as a consequence it isnot guaranteed that the parse forest grammar con-tains a parse tree).
Of course it is possible to experi-ment with different ways of taking the context-freeskeleton (including as much information as possible/ useful).ACknowledgmentsI would like to thank Gosse Bouma, Mark-JanNederhof and John Nerbonne for comments on thispaper.
Furthermore the paper benefitted from re-marks made by the anonymous ACL reviewers.ReferencesY.
Bar-Hillel, M. Perles, and E. Shamir.
1961.On formal properties of simple phrase structuregrammars.
Zeitschrifl fttr Phonetik, SprachWis-senschafl und Kommunicationsforschung, 14:143--172.
Reprinted in Bar-Hillel's Language andInformation - Selected Essays on their Theoryand Application, Addison Wesley series in Logic,1964, pp.
116-150.S.
Billot and B. Lang.
1989.
The structure of sharedparse forests in ambiguous parsing.
In 27th An-nual Meeting of the Association for ComputationalLinguistics, pages 143-151, Vancouver.David Carter.
1994.
Chapter 4: Linguistic analysis.In M-S. Agnts, H. Alshawi, I. Bretan, D. Carter,K.
Ceder, M. Collins, IL Crouch, V. Digalakis,B Ekholm, B. Gamb~ick, J. Kaja, J. Karlgren, B. Ly-berg, P. Price, S. Pulman, M. Rayner, C. Samuels-son, and T. Svensson, editors, Spoken LanguageTranslator: First Year Report.
SICS Sweden / SRICambridge.
SICS research report R94:03, ISSN0283-3638.Barbara Grosz, Karen Sparck Jones, andBonny Lynn Webber, editors.
1986.
Readingsin Natural Language Processing.
Morgan Kauf-John E. Hopcroft and Jeffrey D. Ullman.
1979.
In-troduction to Automata Theory, Languages and Com-putation.
Addison Wesley.Bernard Lang.
1974.
Deterministic techniques forefficient non-deterministic parsers.
In J. Loeckx,editor, Proceedings ofthe Second Colloquium on Au-tomata, Languages and Programming.
Also: Rap-port de Recherche 72, IRIA-Laboria, Rocquen-court (France).Bernard Lang.
1988.
Parsing incomplete sentences.In Proceedings ofthe 12th International Conference onComputational Linguistics (COLING), Budapest.Bernard Lang.
1989.
A generative view of ill-formed input processing.
In ATR Symposium onBasic Research for Telephone Interpretation (ASTI),Kyoto Japan.Mark-Jan Nederhof and Eberhard Bertsch.
1994.Linear-time suffix recognition for deterministic164languages.
Technical Report CSI-R9409, Comput-ing Science Institute, KUN Nijmegen.Fernando C.N.
Pereira and David Warren.
1980.Definite clause grammars for language analysis -a survey of the formalism and a comparison withaugmented transition etworks.
Artificial Intelli-gence, 13~ reprinted in (Grosz et al, 1986).Femando C.N.
Pereira and David Warren.
1983.Parsing as deduction.
In 21st Annual Meeting ofthe Association for Computational Linguistics, Cam-bridge Massachusetts.H.
Saito and M. Tomita.
1988.
Parsing noisysentences.
In Proceedings of the 12th InternationalConference on Computational Linguistics (COLING),pages 561-566, Budapest.R.
Teitelbaum.
1973.
Context-free error analysis byevaluation of algebraic power series.
In Proceed-ings of the Fifth Annual ACM Symposium on Theoryof Computing, Austin, Texas.David S. Warren.
1992.
Memoing for logic pro-grams.
Communications of the ACM, 35(3):94-111.165
