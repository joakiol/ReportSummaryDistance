LR Pa rse rsFor Natural  Languages,Masaru  TomitaComputer Science DepartmentCarnegie-Mellon UniversityPittsburgh, PA 15213AbstractMLR, an extended LR parser, is introduced, and itsapplication to natural language parsing is discussed.An LR parser is a ~;hift-reduce parser which isdoterministically guided by a parsing table.
A parsingtable can be obtained automatically from a context-free phrase structure grammar.
LR parsers cannotmanage antl)iguous grammars such as naturallanguage grammars, because their I)arsing tableswould have multiply-defined entries, which precludesdeterministic parsing.
MLR, however, can handlemulliply-defined entries, using a dynamicprogramnting method.
When an input sentence isambiguous, the MI.R parser produces all possibleparse trees witftoul parsing any part of the inputsentenc:e more than once in the same way, despite thefact that the parser does not maintain a chart as inchart par~ing.
Our method also prnvkles an elegantsolution to the problem of multi-part-of-speech wordssuch as "that".
The MLR parser and its parsing tablegenerator have been implemented at Carnegie-MellonUniversity.1 IntroductionLR parsers\[ I ,  2\] have been developed originally forprogramming language of compilers.
An LR parser is a shift-reduce parser which is detenninistically guided by a par.~it~g tableindicating what action should be taken next.
The parsing tablecan be obtained automatically from a context-free phrasestructure grammar, using an algorithm first developed byDeRemer \[5, 6\].
We do not describe the algorithm here, refferingthe render to Chapter 6 in Aho and UIIman \[4\].
The LR parsershave seldom been used for Natural Language Processingprobably because:1.
It has been thought that natural languages are notcontext-free, whereas LR parsers can deal only withcontext-free languages.2.
Natural languages are ambiguous, while standard LRparsers can not handle ambi~juous languages.The recent literature\[8\] shows that the belief "naturallanguages are not context-free" is not necessarily true, and thereis no reason for us to give up the context-freedom of naturallanguages.
We (to not discuss on this matter further, consideringthe fact that even if natural languages are not context-free, afairly comprehensive grammar for a subset of natural languagesuflicient for practical systems can be written in context.freephrase structure.
lhtJ.% our main concern is how to cope with theambiguity of natural languages, and this concern is addressed inthe fallowing section.2 LR parsers and Ambiguous GrammarsIf a given grammar is ambiguous?
we cannot have a parsingtable in which ~ve~y entry is uniquely defined; at lea~t one entry ofit~ parsing table is inulliply defined.
It has been thought that, forLR pa~sers, nndtiple entries are fatal because they makedeterministic parsing no longer po~$ible.Aho et.
al.
\[3\] and Shieber\[121 coped with this ambiguityproblem by statically 3 selecting one desired action out of multipleactions, and thus converting n=ulliply-defined entries intouniquely-defined ones.With this approach, every input sentencehas no more than one parse tree.
This fact is desirable forprogralnming languages.For natural languages, however, it is sometimes necessary for aparser to produce more than one parse tree.
For example,consider the following short story.I saw the man with a telescope.He should have bought it at the department store.When the first sentence is read, there is absolutely no way toresolve the ambiguity 4 at that time.
The only action the systemcan take is to produce two parse trees and store themsomewhere for later disambiguation.In contrast with Aho et.
al.
and Shieber, our approach is toextend LR parsers so that they can handle multiple entries andproduce more than one parse tree if needed.
We call theextended LR parsers MLR parsers.ll'his rP.~i:i'?l'Ctl was -~pon~oled by the Df.
'ieose Advanced Research ProjectsAgency (DOD), ARPA Older No.
3597, munitoled hy lhe Air Foi'r:e AvionicsLot)oratory Under C, uolracl F3:)(~15 81 K-t539.
The views and con,.
;lusion$conl,lii~cd i=1 lhi.~; (lo=;unlq;nt a~i.~ tho'.
;e ()| tt1~.!
;iu|hor.~; alld should not be illlerpretedas n:pre.-',enling the official p(':licie:;, c, ilher expressed or implied, of the DefenseAdvanced Re,ql..';.trch Projects Ag4.tncy or the US Gow.~.rnnlent.2A grammar is ambiQuous, if some input sentence can be parsed in more thanon~.
W,gy,3By t'~tatically", we mean the ~..:election is done at par.~ing table constructiontime,4"1" have the telescope, or "the man" has the telescope.3543 MLR Parsersof different parses have in the chart parsing method \[10, 11\].
Theidea should be made clear by the following example.An example grammar and its MLR parsing table produced bythe construction algorithm are shown in fig.
1 and 2, respectively.The MLR parsing table construction algorithm is exactly the sameas the algorithm for LR parsers.
Only the difference is that anMLR parsing table may have multiple entries.
Grammar symbolsstarting with ..... represent pre-terminals.
"sh n" in the actiontable (the left part of the table) indicates the action "shift oneword from input buffer onto the stack, and go to state n".
"re n"indicates the action "reduce constituents on the stack using rulen".
"acc" stands for tile action "accept", and blank spacesrepresent "error".
Goto table (the right part of the table) decidesto what state the parser should go af tera  reduce action.
Theexact definition and operation of LR parsers can be found in Ahoand Ulhnan \[4\].We can see that there are two multiple entries ir~ the table; onthe rows of state t t  and 12 at the column of " 'prep".
Asmentioned above, once a parsing table has multiple entries,deterministic parsing is no longer possible; some kind of non-determinism is necessary.
We .~hali see that our dynamicprogramming approach, which is described below, is much moreefficient than conventional breath-first or depth-first search, andmakes MLR parsing feasible.4 An ExampleIn this section, we demonstrate, step by step, how our MLRparser processes the sentence:I SAW A MAN WITH A TELESCOPEusing the grammar and the parsing table shown in fig t and 2.This sentence is ambiguous, and the parser should accept thesentence in two ways.Until the system finds a multiple entry, it behaves in tile exactsame manner as a conventional LR parser, as shown in fig 3-abelow.
The number on the top (ri.qhtmost) of the stack indicatesthe current state.
Initially, the current state is 0.
Since the parseris looking at the word "1", whose category is "*n",  the next action"shift and goto state 4" is determined from the parsing table.
"\]he.parser takes the word "1" away from the input buffer, and pushesthe preterminal "*n" onto tile stack.
The next word the parser islooking at is "SAW", whose category is " 'v " ,  and "reduce usingrule 3" is determined as the next action.
After reducing, theparser determines the current state, 2, by looking at theintersection of the row of state 0 and the column of "NP ?
', and soon.Our approach is basically pseudo-parallelism (breath-firstsearch).
When a process encounters a multiple entry with ndifferent actions, the process is split into n processes, and theyare executed individually and parallelly.
Each process iscontinued until either an "error" or an "accept" action is found.The processes are, however, synchronized in the following way:When a process "shifts" a word, it waits until all other processes"shift" the word.
Intuitively, all processes always look at thesame word.
After all processes shift a word, the system may findthat two or more processes are in the ~lnle state; that is, someprocesses have a common state number on the top of theirstacks.
These processes would do the exactly same thing untilthat common state number is popped from their stacks by some"reduce" action.
In our parser, this common part is processedonly once.
As soon as two or more processes in a common stateare found, they are combined into one process.
This combiningmechanism guarantees that any part of an input sentence isparsed no more than once in the same manner."
This makes theparsing much more efficient than simple breath-first or depth-firstsearch.
Our method has the same effect in terms of parsingefficiency that posting and recognizing common subconstituentsSTACK MrXT-ACI  ION NEXT-WORD.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.0 sh 4 \[0 =n 4 re 3 SAW0 NP Z sh 7 SAW0 NP 2 "v  7 sh 3 A0 NP 2 ev 7 =det.
3 sh IO MAN0 NP 2 Ov 7 O?let, 3 en tO re 4 WITH0 NP 2 =v 7 NP tZ re 7, sh 6 WI \ [ I I. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
: .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.Fig 3oaAt this point, tile system finds a multiple entry with two differentactions, "reduce 7" and ".3hilt g".
Both actions are processed inparallel, as shown in fig 3-b.S ta te  *det  *n *v "prep $ NP PP VP S. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.sh3 sh4 2 tsh6 acc 5sh7 sh6 9 8sht0re3 re3 re3re2 re2sh3 sh4 11sh3 sh4 1201. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
2( I )  S --> NP VP 3(2) S --> S PP 4(3 )  NP - ->  =n 5(4 )  NP - ->  *det  *n 6(5 )  NP - ->  NP PP 7(6 )  PP - ->  =prep NP 8(7 )  VP - ->  "v NP 9. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
101112Fig 1re t  te lre5 re5 re5re4 re4 re4re6 re6 ,sh6  re6 9re7 ,sh6  re7 9Fig 23550 NP 2 VP 8 re t W\[FII0 NP 2 *v 1 HI ) 12 *prep  6 wa i t  A0 S \[ sh 6 WI\[I I0 NP 2 "v l NP 12 "prep 6 wa i t  AThis process is also finished by the action "accept".
Thesystem has accepted the input sentence in both ways.
It isimportant to note that any part of the input sentence, includingthe prepositional phrase "WITH A TELESCOPE", is parsed onlyonce in the same way, without maintaining a chart.0 S I * l ) rep 6 sh 3 A0 NP Z *v 7 NP t2 "prep  6 sh 3 A. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.Fig 3-bHere, the system finds that both processes have the commonstate number, 6, on the top of their slacks.
It combines twoproces:;os into one, and operates as if there is only one process,as shown in fig 3-c.5 Another ExampleSome English words belong to more than one gramillaticalcategory.
When such a word is encountered, tile MLR parsingtable can immediately tell which of its cutegories are legal andwhich are not.
When more than one of its categories are legal,tile parser behaves as if a multiple entry were encountered.
Theidea should be'made clear by the following example.. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
e .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.O S | III "p rep  6 sh 3 A0 HI' 2 "v 1 i'lP 12 4v0 S t "prep  13 "det  3 sh 10 TELESCOPE0 MP 2 "v  7 NP t2 d#"0 S I I "p rep  6 "dot  3 "n )0 re 4 $0 NP 2 "v  7 NP t2 alP"Consider the word "that" in the sentence:That information is important is doubtful.A ~3ample grammar and its parsing table are shown in Fig.
4 and 5,respectively.
Initially, the parser is at state O.
The first word"that" can be either " "det"  or "*that" ,  and the parsing table tellsus that both categories are legal.
Thus, the parser processes "sh5" and "sh 3" in parallel, as shown below.0 S !
j "prop G ~IP tt re 6 $0 NP 2 "v 7 NP 12 ~.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.STACK NEXI ACIION N\[XI WORD.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.0 sh 5, sh 3 I 'hatFig 3-cThe action "reduce 6" pops the common state number 6, andthe system can no longer operate the two processes as one.
Thetwo processes are, again, operated in parallel, as shown in fig3-d.0 S I PP 5 re 2 $0 NP 2 =v 7 NP 12 PP 9 re 5 $0 S \[ accept0 NP 2 *v 7 NP 12 re 7 $.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.Fig 3-dNOW, one of the two processes is finished by the action"accept".
The other process is still continued, as shown in fig3-e.. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.0 NP 2 VP 8 re t $0 S t accept0 sh 5 Fhat0 sh 3 That0 *det  5 sh 9 i n fo rmat ion0 " that  3 sh 4 in fo rmat ion0 *det  5 *n 9 re 2 is0 * that  3 *n 4 re 3 is0 NP 2 sh 6 Is0 =that  3 NP 2 sh 6 isFig.
6-aAt this point, the parser founds that both processes are in thesame state, namely state 2, and they are combined as oneprocess.Fig 3-e0(1 )  S - ->  NP VP 2(2)  NP - ->  "det *n 3(3 )  NP - ->  "n 4(4)  NP - - )  * that  S 5(5 )  VP - ->  "be "adj  6. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
789Fig.
4 10State  *ad j  "be  "det  *n * that  $ NP S VP.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.sh5 sh4 sh3 2 1accsh6 7sh5 sh4 sh3 2 8re3sh9shlOre1 re1re4re2re5 re5.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.Fig.
535600 *t at 3 NP G M P h  q~ml~a'~P 2 sh 6 iS0 NP ~ Z  *he 6 sh 10 important0 " that  3 NP0 NPh=mmmm~2 "be 6 " .d  j .
t  at 3 NP f tO re 5 1,o0 N P ~ 2  VP 7 re t |s0 " that  3 NP-.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.Fig.
6- bThe process is split into two processes again.0 ~IP 2 VP 7 re I i$0 * that  3 NP 2 VP 7 re 1 1=10 5 1 #ERRORI t l0 "thor 3 $ 8 re 4 is.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.Fig.
6-?
?One of two processes detects "error" and halts; only the otherprocess goes on.0 NP 2 sh 6 t=0 NP 2 *he 6 sh tO doubtful0 ~JP Z "be 6 "adJ tO re 5 $0 .P 2 vP 7 re 1 $0 s I ace $.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.Fig.
6-dFinally, the sentence has been parsed in only one way.
Weemphasize again that, "in spite of pseudo-parallelism, each part ofthe sentence was parsed only once in the same way.6 Conc lud ing  RemarksThe MLR parser and its parsing table generator have beenimplemented at Computer Science Department, Carnegie.MellonUniversity.
The system is written in MACLISP and running onTops-20.One good feature of an MLR parser (and of an LR parser) isthat, even if the parser is to run on a small computer, theconstruction of the parsing table can be done on more powerful,larger computers.
Once a parsing table is constructed, theexecution time for parsing depends weakly on the number ofproductions or symbols in a grammar.
Also, in spite of pseudo.parallelism, our MLR parsing is theoretically still deterministic.This is because the number of processes in our pseudo.parallelism never exceeds the number of states in the parsingtable.One concern of our parser is whether the size of a parsing tableremains tractable as the size of a grammar grows.
Fig.
6 showsthe relationship between the complexity of a grammar and its LRparsing table (excerpt from Inoue \[9\]).XPL EULER FORTRAN ALGOL60Termina ls  47 74 63 66Non- termina l  s 51 45 77 99Product  ions 108 121 172 205Sta tes  180 t93 322 337Tab leS ize(byte)  2041 2587 3662 4264Fig.
6Although the example grammars above are for programminglangauges, it seems that the size of a parsing table grows only inproportion to the size of its grammar and does not grow rapidly.Therefore, there is a hope that our MLR parsers can managegrammars with thousands of phrase structure rules, which wouldbe generated by rule-schema and meta-rules for natural languagein systems such as GPSG \[7\].AcknowledgementsI would like to thank Takehiro Tokuda, OsamuWatanabe, Jaime Carbonell and Herb Simon forthoughtful comments on an earlier version of thispaper.References\[1\] Aho, A. V. and Ullman, J. D.The Theory of Parsing, Translation and Compiling.Prentice-Hall, Englewood Cliffs, N. J., 1972.\[2\] AhO, A. V. and Johnson, S. C.LR parsing.ComPuting Surveys 6:2:99-124, 1974.\[3\] Aho, A. V., Johnson, S. C. and UIIman, J. D.Deterministic parsing of ambiguous grammars.Comm.
ACM 18:8:441-452, 1975.\[4\] Aho, A. V. and UIIman, J. D.Principles of Compiler Design.Addison Wesley, 1977.\[5\] Oeremer, F. LPractical Translators for LR(k) Languages.PhD thesis, MIT, 1969.\[6\] DeRemer, F. L.Simple LR(k) grammars.Comm.
ACM 14:7:453-460, 1971.FI Gazdar, G.Phrase Structure Grammar.D.
Reid,l, 1982, pages 131.186.\[8\] G=zder, G.Phrase Structure Grammars and Natural Language.Proceedings of the Eighth International Joint Conferenceon Artificial Intelligence v.1, August, 1983.\[9\] Inoue, K. and Fujiwara, F,On LLC(k) Parsing Method of LR(k) Grammars.Journal of Inlormation Processing vol.6(no.4):pp.206-217,1983.\[10\] Kapisn, R. M.A general syntactic processor.Algorithmics Press, New York, 1973, pages 193.241.\[1~\] Kay, M.The MIND system.Algorithmics Press, New York, 1973, pages 155-188.\[12\] Shieber, S. M.Sentence Disambiguation by a ShiR-Reduce ParsingTechnique.Proceedings of the Eighth International Joint Conferenceon Artificial Intelligence v.2, August, 1983.357
