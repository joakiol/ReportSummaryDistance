Acquisition of Conceptual Data Modelsfrom Natural Language DescriptionsWilliam J.Black,Department ofComputation, UMIST,PO Box 88, Sackville Street,Manchester, M60 1QD, UKAbstractAcquiring information systems specifications from naturallanguage description is presented as a problem class thatrequires a different treatment of semantics when comparedwith other applied NL systems such as database andoperating system interfaces.
Within this problem class, thespecific task of obtaining explicit conceptual data modelsfrom natural language text or dialogue is beinginvestigated.
The knowledge brought o bear on this task isclassified into syntactic, semantic and systems analysisknowledge.
Investigations with a simple syntactic parseand with a semantic analysis using McCorcl's Slot Grammarare reported, and the structure of the systems analysisknowledge is considered.1 IntroductionThis section introduces the application of computer-basedtools for information systems requirements analysis, design.and implementation, and outlines a motivation forendowing such tools with natural language interfaces.
Itconcludes with the structure of the remainder of the paper.Information systems development suffers from two widelyacknowledged problems:?
an applications backlog, whereby demand forapplications exceeds resources available for itssatisfaction.?
a requirements analysis problem.
This is oftenmanifested as a maintenance problem, wherebyresources that could be put into reducing theapplications backlog are instead devoted to correctingfaults in delivered systems.
Most such faults aretraceable to erroneous pecifications, resulting from afailure to establish user requirements correctly.The industry has provided solutions to each of theseproblems:The problem of productivity has been addressed by theprovision of more powerful higher-level languages knownas 'application generators' or 'fourth generation languages '(4GLs), in which the same functionality can be achieved ina tenth or less of the instructions needed in a conventionalprocedural computer language.A general feature of such software tools is that they doaway with the need for much procedural programming byemploying declarative notations in which requirements canbe expressed in sufficient detail for the software to provideprocedures to meet them.
(Naturally, the sophistication ofthese declarative notations varies according to the breadthof their application coverage.
)The requirements analysis problem has been addressed sincethe mid nineteen-seventies by a range of prescriptivedevelopment methods providing working procedures andgraphical representation languages, in place of traditionalapproaches which rely heavily on natural languagenarrative to specify prooessing requirements.
A typicalrepresentation or conceptual modelling language isdescribed in section 2.A problem with both the high-level application generatorsand the development methods is that they have beenestablished independently by a variety of manufacturers,software houses, consultants and academics, resulting in amultitude of competing products and methods, with nostandard accepted by the industry.
Suppliers and userstherefore face considerable training and consultancy costsdue to staff mobility.A more recent trend is to combine the two approaches toproduce a more powerful software tool environment oranalyst's workbench which enables the analyst to editdiagrams that formally represent the requirements, andusing these specifications to automatically generatecomputer programs.
Such tools represent an improvementon previous practice in two ways: firstly by bringingforward the use of precise formal languages from the codingto the specification phase in the software life-cycle, andsecondly by automating the coding phase.
However, theydo not similarly automate the analysis phase that mustprecede the formal expression of requirements in aspecification, although they may mechanize the process ofrecording and revising a specification.The nature of such tools is described in section 3.It is proposed that a natural language interface to toolsprovided to mechanize such methods would provide severalbenefits:It is possible to develop a specification using arepresentation language with which the analyst is not241familiar, by hiding the representation language fromthe analyst.It can alternatively help the analyst learn thespecification language by displaying the graphicalrepresentation f a given description.With a natural language generation facility it ispossible for an analyst to informally verify that agraphical representation of some aspect of a systemexpresses the desired meaning.A natural anguage generator can be used to translate aspecification developed by someone else using arepresentation that the reader is not familiar with.
Inaddition to facilitating communication betweenanalysts ~ained on different methods, this techniquecould facilitate communication between analysts andtheir users or expert informants.A further motivation is that increasingly, the 4GLsdescribed above are in the hands of end users who developapplications directly.
4GLs typically make straightforwardapplications easy to develop, often prompting the users forthe parameters that specialize the application as aninstance of the stereotype systems that lie within the tool'sapplication bandwidth.
However, they are often poor atenabling more elaborate requirements to be met where thereare interdependencies between data Ides and complexintegrity and validation rules.
A tool built on the linesdescribed below cart help end users inexpert in analysis toarticulate their own requirements and then to convert hoserequirements into executable code.The architecture of an information systems developmentworkbench with an integrated natural anguage and graphicsinterface is described in section 4.
An approach toknowledge representation within this system is discussed insection 5.
Approaches to natural language analysis andgeneration and the results of some prototyping work arediscussed in section 6.Conceptual Data ModelsWithin system development methods, there exist severalnotations for the representation of aspects of theinformation processing systems.
A comprehensive methodwill be able to represent a conceptual model of the real andabstract objects in the system's environment, thefunctional requirements of the system, and its detaileddesign and implementation.
Methods differ according totheir emphasis on the data the system deals with or itsprocessing requirements.
Here, we will only discuss data-oriented approaches, and in particular Entity-Relationship(ER) modelling(Martin 1984, MacDonald 1986), and theInformation Structure Diagram within NIAM (Verheijen andvan Bekkum, 1982; Blank and Krijger, 1982), an approachto conceptual modelling that claims to be directly informedby considerations of the structure of natural languagesentences.Both approaches tarted as paper-and-pencil notations forunambiguously recording the systems analysfsunderstanding of the relationships between objects that aresignificant to the proposed computer system.
Now,however, both feature in interactive computer-based tools.ER analysis is the cornerstone of several applicationdevelopment toolkits, including the InformationEngineering Workbench, which uses such models as inputto a process that ultimately leads to automatic codegeneration.
Using this software, the analyst creates a modelof data objects and relationships, and then specifies howprograms will access this data by superimposing accesspaths and conditions on the ER diagram to produce a 'datanavigation diagram' which can in turn be the input to anautomatic process of computer program generation.The NIAM approach is somewhat different.
It aims to avoidaltogether the need to describe the objectives of a computerprogram prvcedurally.
The NIAM conception is that if allthe relationships and dependencies among data objects arespecified rigorously, all events in the world cart be recordedin the database by the assertion or retraction of 'sentences'from the information base (database).
Further, rules forderiving information, such as that produced in reports, canbe included in the conceptual model.
Under this approach,the need for application programs is obviated, since 'allcomputations may be executed under the control of theinformation base handler instead of an application program'(Blank and Krijger 1982, p 140).
NIAM thus belongs tothe 'executable specifications' class of approaches tosystem design.
To illuslxate NIAM's modelling language,we will use example sentences from a narrative in adatabase xamination paper (1) and (2).
(1) Customers send the company purchase orders forpharmaceutical suppfies.
(2) Each order contains requests for quantities of manydifferent products which are all required for one shop.2.1  NIAM Information Structure DiagramsIn this section, we describe the modelling constructs of theNIAM information structure diagrwn (ISD).
The derivationof the model from natural language text is taken up insection 6.The NIAM method uses similar constructs to ERAmodelling, (employing different erminology) but at a moreatornistic level.
Its perspective is derived from thestructures of natural language, on the justification that adatabase comprises a set of sentences and the purpose ofthe conceptual darn model is to specify a grammar of thesentences allowed in a particular database (Blank andKrijger, 1982).
Relationships between objects haveassociated with them two role names, one for each relatedobject.Figure 1 shows how (1) and (2), together with some furtherinformation about warehouses and picking lists, can berepresented inNIAM notation~242.
as  .. \ [ fo r  .Figure 1 - NIAM Infornmtion Structurc DiagramNIAM representations are constructed from objects andrelationships.Objects are of two kinds: NOLOTs or NOn-Lexical ObjectTypes are concrete or abstract objects of reality, and LOTsor Lexieal Object Types are objects of which occurrenceshave values, i.e.
they are names.
NOLOTs and LOTs aresynonyms for entities and attributes, and are shown byunbroken and broken circles respectively.Relationships are associations between objects: eitherbetween two NOLOTs or between a NOLOT and a LOT.
Theyare shown by lines connecting two circles.
Semantically,the relationship is the Cartesian product of the two relatedobject types.
On the line are two rectangular boxes bearingthe name of the role each object plays in the relationship.The concept of a role is similar to that of a case role inlinguistics (cf Fillmore 1968).In addition to portraying objects and their relationships,NIAM also explicitly represents constraints between theseobjects.Relationship degree is shown by double headed arrowsbeside one or both roles.
The relationship betweencustomer and purchase order in Figure 1 is a one to many(I:N) relationship in that a customer may send manypurchase orders, but each order is only sent by onecustomer.
A many to many (M:N) relationship, such as thatbetween purchase orders and pharmaceutical supplies, isshown by the arrow's spanning both roles.
A one to one(1:1) relationship has separate arrows alongside ach role.Whether a relationship is obligatory or not is also shownin the diagram.
The 'V' across the line between purchaseorder and the 'sent-by' role indicates that a purchase ordercannot exist without being related in this way to acustomer, but the absence of such a symbol at the oppositeend of the relationship line shows that a customer can existwithout having any (current) purchase orders.Additional constraints, such as subset and set inequalityconstraints between objects, relationships or roles can alsobe modelled on the NIAM ISD.
For example, the arrowlinking pharmaceutical supplies to product indicates asubset relationship.Often, M:N relationships are indicative that further analysisis required.
Where such a relationship conveys genuineinformation, it is usually helpful to resolve therelationship into two I:N relationships, with a new entitytype between.The M:N relationship in figure 1 between purchase orderand pharmaceutical supplies was derived from sentence (1).In sentence (2), further information about orders wassupplied.
All the information conveyed by the M:Nrelationship is represented by the chain of I:Nrelationships linking purchase order, request, product andpharmaceutical supplies.Tools for Conceptual ModellingMany proprietary tools exist for editing conceptual datamodels, e.g.
Excellerator, Information EngineeringWorkbench, and Blues.
The system enables the user to drawdiagrams using a mouse input device.
The user selects fromthe symbols in the notation by clicking the mouse button,moving the cursor to a desired location and clicking again.Lines connecting symbols can be selected in the same wayand placed by clicking twice, to indicate the two symbolsthe line connects.Violations of the 'syntax' of the notation are policed bythe software.Modifications to both the content and layout of a diagramcan be made by cutting and pasting.
Annotatingcomponents with their names and other attributes is doneby clicking on existing symbols to open a dialoguewindow.As the diagram is thus created and edited, the informationexpressed in it is stored in a data dictionary (or'encyclopaedia').It can be argued that such an interface is so user-fi'iendlythat no case could be made for a natural languagealternative.
However, it is emphasised that a tool asdescribed above is entirely passive.
It simply records theinformation fed into it, and can give no guidance as to thecorrect way to represent a given state of affairs.
It can onlybe used by an expert in the method of analysis itdocuments.
For such an expert, it is probably an optimal243tool.
However, we have noted in section I that owing tothe babel of alternative notations, there are circumstancesin which experienced analysts are required to use methodsthey are not familiar with.
This is the premise of theAMADEUS project (Loucopoulos et al1986, Black et a/1987) which seeks to provide a facility for translatingbetween alternative method notations.
Briefly, therequirement to use unfamiliar methods can arise because ofjob mobility, organizational take-overs, customersdictating the method to be used by those who tender fortheir contracts, and in the course of training.It is also envisaged that the system will be used by endusers to develop applications without professional support.Figure 1 illustrates, by the variety of special symbols usedand their connectivity, that for end-user applicationdevelopment, notations like the N/AM ISD would require anexplanation facility to support comprehension, For a non-expert to use such a notation constructively to devel6p aspecification also requires ome form of expert assistance.A f'mal motivation for building the system is that as anintegrated natural language and graphics interface, itprovides a context in which the relative merits of the twointerface styles can be compaxed.
As Thompson (1983) hasnoted, almost no empirical work has ever been carried outinto the relative merit of natural language and graphicinterfaces.I a?usernt?lyseJrfac~gen~I"at rk Irill )hics interf; It ;e prconceptual model managerlong-term session/spec.knowledge-base databaseArchitecture of an integrated NL andgraphics environment.Figure 2 - System components and data  flows4.1 Dialogue StructureA natural interface using both text and graphics requires alarge bit-mapped screen and both keyboard and pointinginput devices.
An Apollo DN3000 running Quintus Prologunder UNIX has been selected as an environment fordevelopment of the system.
The intended ialogue structureemploys two windows, one for text and one for graphics.In both cases, highlighting is used for attention focussingand establishing correspondence between a diagram andnatural language narrative.Text to graphics.
Appendix A shows an hypotheticaldialogue where the user input is in the text window.This dialogue owes much to the style of dialogue employedin Nanok/aus (Haas and Hendrix 1983), and would suit avery inexperienced or casual user.
Someone more used toexpressing rules in unambiguous English might be able tosay most of the above in one sentence:"A paper is written by one or more authors, one ofwhich must also be its presenter, and any of whom may bethe authors of other papers.
"For this reason, the interface must have good syntacticcoverage and a formal semantic omponent that deals withquantifier seeping.Graphics to text.
A dialogue where the input takesplace in the graphics window proceeds as follows: The userselects and places new symbols in the graphics window.For each symbol added, the change is recorded in thesession database, and its internal representation is passedto the language generation component, which produces anEnglish description of the effect of the changes.
Supposefor example, that the graphics window contains the firstdrawing shown in Appendix A.
The user then adds the Vsymbol to produce the next drawing shown.
In response,the following text is produced:"A paper must be written_by at least one author.
(Previously it could apparently exist without being writtenby an author.
)".Alternative uses of the natural anguage generation facilityexist.
For example, a user could highlight a part of thediagram and request a translation into English, or couldenter changes in a "what if" mode and have theirconsequences xplained.4.2 System structureTo produce a dialogue such as that shown in Appendix A oras described above, a system organization such as thatshown in figure 2 is required.Both user interfaces must use the same internalrepresentation for the aspects of systems describedalternatively in text or graphics.
This is discussed below.The session/specification database is the counterpart of thedata dictionary in individual proprietary tools.
In such asystem, the graphics interface is such an integral part of244the system that it along with the natural language interfacerequires to be re-implemented.5 Knowledge representation frameworkIt has been established in the separate AMADEUS project(Black et a/ 1987) that a flame representation based on FRL(Roberts and Goldstein, 1977) is capable of representingall the modelling constructs used in a range of requirementsspecification otations.
SpecificaLly, in the case of NIAM,objects (lexical and non-lexical) and relationships arerepresented by frames, and roles by slots.
Constraints ofrelationship degree and optionality are represented togetherby facets of role slots.As an example, Figure 3 shows a set of frames representingsome of the information about paper authorship shown inAppendix A.It is intended that a uniform knowledge representationstructure such as that shown in Figure 3 will be usedthroughout he system, both for storing the facts gatheredin a session, and for representing the stored knowledge inthe system, including the dictionary.paper (ako,valua,object)(written_by,value,authorship)author (ako,value,object)(writer_of,value,authorship)authorship (ako,value,association)(written_by,domain ,paper)(written_by,mln__card, 1)(written_by,max_card, 1 )(writer_of,domain,aut hor)(write r_of,min_card,O)(writerof,rnax._card,N)Figure 3 Internal representation of objects andrelationships.6 Approaches to NL analysis andgenerationHaas and Hendrix (1983) describe a system where asemantic network model of object classes, instances andproperties is constructed through a co-operative naturallanguage dialogue.
In the early version, Nanoldaus, thesyntactic coverage is restricted to simple sentences inwhich the user may assert propositions about the setmembership and other properties of objects.
(Enomoto et al1984) describes a system in which anunambiguous fragment of English (based on Montague'sPTQ) cart be used in a highly constrained way to describethe desired behaviour of a system.Other work on natural anguage understanding of descriptivetext has tended to use ad-hoc semantic grammars pecializedto the application domain.
Norton (1982) describes aprogram that acquires knowledge of the BASICprogramming language's yntax and semantics from atextbook and uses this to generate an interpreter for part ofthe language.
In some respects, the goals are similar to ourown, but the semantic grammar approach used means thatlittle of that apporach is re-usable.Less directly related to the system specification domain is(Mellish 1985) which describes a system for the semanticinterpretation of mechanics problems expressed in English.The program made use of the given/new distinction inestablishing the co-reference of definite and indefinitedescriptions, incrementally constructing extensionalsemantic interpretations using intermediate intensionalreference ntities.Earlier work on text comprehension (e.g.
de Jong, 1979)concentrated on skimming techniques to match text contentagainst sketchy scripts.
Such a grain of analysis isinappropriate for present purposes.6.1 Conceptual Modelling from NL Text.The goal of conceptual modelling is to identify thesignificant objects and relationships in the applicationuniverse of discourse.
As with other NLU tasks, thisrequires knowledge of three sorts: syntax, semantics andreal-world knowledge.
In this section, we discuss theseparate contribution each source of knowledge makes inconceptual modelling.Syntax.
Martin (1984) has observed that there is asimple mapping of surface syntactic categories onto thecomponents of ER modelling.
Nouns correspond to entities(objects), and verbs correspond to relationships (or in thecase of NIAM, with role names).
On this basis, sentences(3) and (4) would receive different analyses, as shownbelow.
(3)(4)Customers send orders for products.Customers order products.The English description in (2) is much less directly helpfulin identifying relationships.
The attachment of the relativeclause which are all required for one shop to order ratherthan product, request or quant/ty cannot be decided onpurely syntactic grounds.
Fmxher, that quam/ty is anattribute of request rather than an entity in its own rightcannot be determined without extra-linguistic knowledge.The requirements for a linguistic approach are that either isis constructed in the same manner as Nanoklaus, to employsimple input phrase structures, but embedded in a .co-operative dialogue, or else it should have sufficientlinguistic coverage to handle the complex sentencestructures exhibited in (1) and (2).
Most importantly in thelatter respect, it should have a reasonable treatment of thevariety of natural language quantifiers and relative clauses.Many database interfaces have such capabilities, McCord(1982), Dahl (1982) and Warren and Pereira (1982) intera//a.245Semantics.
Chamiak (1983) makes a distinction betweeninferential and non-inferential semantics.
The former isconcerned with establishing the logical formcorresponding to a syntactic analysis of a sentence,whereas the latter is concerned with co-oecurrencerestrictions between phrases which may be stated in termsof lexical subcategories uch as human, mass, machine,etc.Database interfaces are the most common instances ofcomplete natural language interfaces which comprise bethsyntactic and semantic components.
As such they arepotential models for the development of interfaces to newtypes of software systems.
However, their approach tosemantics cannot be imported wholesale.
They avoid thegeneral theoretical problem of what a semantics of naturallanguage should consist of by an operational approach inwhich the propositional content of a sentence isrepresented by a database tuple, and lexicalsubcategorization is implemented in application-specificcategories.
The following dictionary entries, for 'order'both as a noun and a verb have been encoded in thenotation used by (McCord 1982).noun (order,ord(O no,Cust,Supp,C)&item(O_no,Prod,Qty)nil,O_no:transaction,\[npobj(for):Prod:goods\]).verb (order,ord(O_no,Cust,Supp,C)&item(C) no,Prod,Qty)C,Cust:prsn,\[obj:Prod:goods,npobj(from):Supp:prsn\]).Each of these dictionary entries has five components.
Thefirst is the name of the word, the second is thepropositional meaning, the third a variable denoting time,the fourth specifies the semantic subeategorization f theword (in the case of nouns) or its subject (in the case ofverbs), and the last subeategorizes the objects or otherpostmodifiers the word may take.One danger with application-specific lexicalsubcategorization is that it may be applied toorestrictively.
For example, in the lexicon published in(McCord 1982), subclasses are specifically restricted to thedatabase entities that can be expected in a query.
Forexample, the semantics of take are specified to expect astudent as subject and a course as an object.
Suchrestrictions are fine for database queries, such as (5) but aquestion such as (6) cannot even be asked.
(5)(6)Which students took Logic?Do lecturers ever take courses?Real world knowledge.
It is not possible to producean analysis such as that shown in Figure 1 without 'real-world' knowledge in addition to a grammar and dictionary.For example, the knowledge that pharmaceutical suppliesare a subset of products is required to link the informationacquired from the analyses of (1) and (2).
The full extent owhich real-world knowledge will be required in the systemis not known, but it is assumed that the sort of notationshown in Figure 3 can be employed to encode arbitrary real-world knowledge for the system.The boundary between what is linguistic knowledge andwhat is real-world knowledge is not a clear one.
In thesample dictionary entries for order, we have shown thatcorresponding to an order, there is also an item.
This wasnecessary so that the type of object can be linked to anargument place in the predication.
It can be argued that thisamounts to non-linguistic knowledge that orders typicallycomprise several distinct i ems.Adapting a database Interface.
An initial prototypesystem for inferring the existence of entities andrelationships from natural language descriptions is beingconstructed using McCord's Slot Grammar (McCord 1982),selected for its syntactic coverage and trealanent of avariety of natural language quantifiers.To adapt the form of lexieal entries in the McCord parserfrom the database query task to the present one, genericdefinitions of word meanings have been provided, allowinga wider range of assertions to be made.Results.
With these defindons it has been possible in arudimentary way to determine the existence of somerelationship types between entities to build simple ERmodels.
This is done by examining the attributes of therelational database predicates in the parse tree.
Theexistence of a relationship between two database relations,is indicated by the sharing of attributes.
If the identifier ofone relation occurs as a non-identifying attribute in anotherrelation, we may infer a I:N relationship between them.For example, in the following parse of the sentence"enstorners order products" the variable _133 is common toboth order and customer:.\[customers,order,products,.\]\[s,dcl\] main ord(_195,_133,_197,_198)\[np,pl\] indef:_133:prsn c st(__133,__134,_135)\[advc\] conjunct present(__198)\[np,pl\] indef:_199:goods prod(__199,__244,_245)This occurs precisely because the dictionary entry for"order" explicitly provided for the identier of the subject obe an argument of the predication.)
The sharing of thearguments tells us that a relationship exists between theentity order and the entity customer, and furthermore, it is aI:N relationship from customer to order, since the sharedargument is the whole key of customer, and either a non-key or part key in order.Current status of project.
The prototyping activitydescribed above is ongoing, but in parallel, the overalldesign is being elaborated, and a purpose-built parser basedon LFG is being implemented in Prolog.
Work on the246generation component has not yet commenced.7 Summary and ConclusionsThis paper has outlined an application area that can serveas a test-bed for work on the processing of natural anguagetext for the purpose of knowledge acquisistiort, a problemthat is much wider than the specific case of informationsystems design.
The role of natural language analysis andgeneration within an environment hat also supports aWIMPs (Windows, Icons, Mice and Pointers) interface wasdefended, and the architecture of the software outlined.Finally, the relative place of syntactic, semantic and real-world knowledge in conceptual modellingwas discussed, andthe adaptation of a database interface to the analysiscomponent of the system was describe&AcknowledgementsEdem Williams carried out some lexieographic work andimplemented a version of the McCord Slot Grammar parser,and carried out some preliminary work on identifyingobjects and relationships under this approach.
I amgrateful to Donal Flynn for discussions about NIAM.ReferencesBlack, W.J, Sutcliffe, A.G., Loucopoulos, P and Layzell,P.J.
(1987) Translation between pragmatic softwaredevelopment methods.
Submitted to ESEC87,Strasbourg.Blank and Krijger (eds) (1982).
Evaluation of methods andtechniques for the analysis, design andimplementation of information systems., AcademicService, pp 137-156.Dahl,V (1982) On database systems development throughlogic, ACM Transactions on Database Systems 7, 1(Y2-123Enomoto, H, Yonezald,N, Saeki, M and Aramata, H (1984)Natural Language Based Software Development SystemTELL, ECAI-84.Fillmore, C J (1968) "the Case for Case' in Bach and Harms(eds) Universals in Linguistic Theory, Holt, Reinhartand Winston.Haas, N and Hendrix, G.G.
(1983) Knowledge acquisitionfrom Interactive Dialogue, in Michalski, Mitchell andCarbonell (eds) Machine \[.earning I, Tioga.Loucopoulos, P; Black, W.J; Layzell, P.J; Suteliffe, A.G.(1986) AMADEUS : A multi-method approach todeveloping universal specifications.
Paper presentedto ESPRIT Technical Week, September 1986.MacDonald, I.G.
(1986) Information Engineering AnImproved, Automatable Methodology for the design ofData Sharing Systems, In Olle, T.W et al(eds)Information Systems Design Methodologies:Improving the Practice, North-Holland.Martin, J.
(1984) Information Engineering, S avantInstitute.McCord M.G.
(1982) Slots and Modifiers in LogicGrammars, Artificial Intelligence 18, 327-367.Mellish, C (1985) Computer Interpretation of NaturalLanguage Descriptions, Ellis Horwood.Norton.
LM.
(1982) Automatic Analysis of InstructionalText, Artificial Intelligence 20, 307-344.Thompson, H (1983) Natural language processing: acritical analysis of the field, with some implicationsfor parsing, in Sparck-Jones and Wilks (eds)Automated Natural Language Parsing, Ellis Horwood,Chichester.Verheien, G.M.A and van Bek~tm, J (1982) NIAM: AnInformation Analysis Method, In Olle, T.W et al(eds)Information Systems Design Methodologies: A FeatureAnalysis, North-Holland.Warren, D.H.D and Pereira, EC.N (1982) An efficienteasily adaptable system for interpreting naturallanguage queries AJCL 8, 110-122.Appendix ASample dialogueus~ A paper can be written by several authorsMust a paper be written by at least one author?user yesHow would you describe the role of the author withrespect o the paper, e.g.The author __s  the paper, orThe author is of the paper?user walter_ofCan the author be the writer of other papers?~ yes~itten by wpter of247s~ okuser The paper must be present~l by one of the authors.en_by ~e~of248
