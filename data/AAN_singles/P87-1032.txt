INCORPORATING INHERITANCE AND FEATURE STRUCTURESINTO A LOGIC  GRAMMAR FORMALISMHarry H. Porter, IIIOregon Graduate Center19600 N.W.
Von Neumann Dr.Beaverton Oregon 97008-1999ABSTRACTHassan Ait-Kaci introduced the #/-term,an informational structure resembling feature-based functional structures but which alsoincludes taxonomic inheritance (Ait-Kaci, 1984).We describe e-terms and how they have beenincorporated into the Logic Grammar formal-ism.
The result, which we call InheritanceGrammar, is a proper superset of DCG andincludes many features of PATR-II.
Its taxo-nomic reasoning facilitates semantic type-classreasoning during grammatical analysis.INTRODUCTIONThe Inheritance Grammar (IG) formalismis an extension of Hassan Ait-Kaci's work on #/-terms (Ait-Kaci, 1984; Ait-Kaci and Nasr,1986).
A e-term is an informational structuresimilar to both the feature structure of PATR-II(Shieber, 1985; Shieber, et al 1986) and thefirst-order term of logic, e-terms are ordered bysubsumption and form a lattice in whichunification of #/-terms amounts to greatest lowerbounds (GLB, \[-'\]).
In Inheritance Grammar, #/-terms are incorporated into a computationalparadigm similar to the Definite Clause Gram-mar (DCG) formalism (Pereira and Warren,1980).
Unlike feature structures and first-orderterms, the atomic symbols of #/-terms areordered in an IS-A taxonomy, a distinction thatis useful in performing semantic type-class rea-soning during grammatical analysis.
We beginby discussing this ordering.THE IS-A RELAT ION AMONGFEATURE VALUESLike other grammar formalisms usingfeature-based functional structures, we willassume a fixed set of symbol8 called the signa-ture.
These symbols are atomic values used torepresent lexical, syntactic and semanticcategories and other feature values.
In manyformalisms (e.g.
DCG and PATR-II), equality isthe only operation for symbols; in IG symbolsare related in an IS-A hierarchy.
These rela-tionships are indicated in the grammar usingstatements such as1:boy < mascul ineObject .girl < feminineObject.man < mascul ineObject .woman < feminineObJect.
{boy, girl} < child.
{man, woman} < adult.
{child, adult} < human.The symbol < can be read as "is a" and thenotation {a , , .
.
.
,an}<b is an abbreviation foral<b, ?
?
?
,an<b.
The grammar writer need notdistinguish between instances and classes, orbetween syntactic and semantic categories whenthe hierarchy is specified.
Such distinctions areonly determined by how the symbols are used inthe grammar.
Note that  this example orderingexhibits multiple inheritance: femin ineOb-jeers are  not  necessar i l y  humans andhumans are not necessarily femin ine0b-J eers ,  yet a g i r l  is both a human and afeminineObj ect.Computation of LUB (t_ J) and GLB (\['7)in arbitrary partial orders is problematic.
InIG, the grammar writer specifies an arbitraryordering which the rule execution systemautomatically embeds in a lattice by the addi-tion of newly created symbols (Maier, 1980).Symbols may be thought of as standingfor conceptual sets or semantic types and theIS-A relationship can be thought of as setI Symbols appearing in the grammar but not in the228inclusion.
Finding the GLB-i .e.
unification ofsymbols-then amounts to set intersection.
Forthe partial order specified above, two new sym-bols are automatically added, representingsemantic categories implied by the IS-A state-ments, i.e.
human females and human males.The first new category (human females) can bethought of as the intersection of human andfemin lneObJect  or as the union of girl andwoman 2, and similarly for human males.
Thesignature resulting from the IS-A statements isshown in Figure 1.C-TERMS AS FEATURE STRUCTURESMuch work in computational linguistics isfocussed around the application of unification toan informational structure that maps attr ibutenames (also called feature names, slot names, orlabels) to values (Kay, 1984a; Kay, 1984b;Shieber, 1985; Shieber, et al 1986).
A value iseither atomic or (recursively) another such map-ping.
These mappings are called by variousnames: feature structures, functional structures,f-structures, and feature matrices.
The featurestructures of PATR-II are most easily under-stood by viewing them as directed, acyclicgraphs (DAGs) whose arcs are annotated withfeature labels and whose leaves are annotatedwith atomic feature values (Shieber, 1985).IS-A s tatements  are taken to be unrelated.2 Or anything in between.
One is the most liberal in-terpretation, the other the most conservative.
The signs-ture could be extended by adding both classes, and anynumber in between.IGs use C-terms, an informational struc-ture that is best described as a rooted, possiblycyclic, directed graph.
Each node (both leafand interior) is annotated with a symbol fromthe signature.
Each arc of the graph is labelledwith a feature label (an attribute).
The set offeature labels is unordered and is distinct fromthe signature.
The formal definition of C-terms,given in set theoretic terms, is complicated inseveral ways beyond the scope of thispresentation-see the definition of well-formedtypes in (Ait-Kaci, 1984).
We give severalexamples to give the flavor of C-terms.Feature structures are often representedusing a bracketed matrix notation, in additionto the DAG notation.
C-terms, on the otherhand, are represented using a textual notationsimilar to that of first-order terms.
The syntaxof the textual representation is given by the fol-lowing extended BNF grammar 3.term ::=featureList ::=feature ::=symbol \[ featureList \]\[ featureList( feature , feature ,... , feature )label => term\[ label ~ variable \[ : term \]Our first example contains the symbolsnp, s ingu lar ,  and th i rd .
The label of3 The vertical bar separates alternate constituents,brackets enclose optional constituents,  and ellipses are used(loosely) to indicate repetition.
The characters ( ) ->  , andz are terminals.femin ineObject  human mascu l ineOb jectadu  i t humanF ema i e humanMa i e ch i  i dwoman man g i r  I boyFigure 1.
A signature.229the root node, np, is called the head symbol.This C-term contains two features, labelled bynumber and person.np ( number ~ singular,person ~ th i rd )The next example includes a subterm atagreement:=>:(cat ~ np,agreement ~ (number ~ singular,person ~ third))In this C-term the head symbol is missing, as isthe head symbol of the subterm.
When a sym-bol is missing, the most general symbol of thesignature (T )  is implied.In traditional first-order terms, a variableserves two purposes.
First, as a wild card, itserves as a place holder which will match anyterm.
Second, as a tag, one variable can con-strain several positions in the term to be filledby the same structure.
In C-terms, the wildcard function is filled by the maximal symbol ofthe signature (T )  which will match any C-termduring unification.
Variables are usedexclusively for the tagging function to  indicateC-term eore/erence.
By convention, variablesalways begin with an uppercase letter whilesymbols and labels begin with lowercase lettersand digits.In the following ~b-term, representing Theman want8 to dance with Mary, X is a variableused to identify the subject of wants with thesubject of dance.sentence (subject ~ X: man,predicate ~ wants,verbComp ~ clause (subject ~ X,predicate ~ dance,object ~ mary ))If a variable X appears in a term tagginga subterm t, then all subterms tagged by otheroccurrences of X must be consistent with (i.e.unify with) t 4.
If a variable appears without asubterm following it, the term consisting of sim-ply the top symbol (T )  is assumed.
The con-straint implied by variable coreference is notjust equality of structure but equality of refer-ence.
Further unifications that  add informationto one sub-structure will necessarily add it tothe other.
Thus, in this example, X constrainsthe terms appearing at the paths subject=>and verbComp~sub ject~ to be the sameterm.In the ~b-term representation of the sen-tence The man with the toupee sneezed, shownbelow, the np filling the sub jec t  role, X, hastwo attributes.
One is a qua l i f ie r  filled bya relativeClause whose subject is Xitself.sentence (subject ~ X: np (head ~ man,qualifier ~ relativeClausesubject ~ X,predicate ~ wear,object ~ toupee)),predicate ~ sneezed)As the graphical representation (in Figure 2) ofthis term clearly shows, this C-term is cyclic.UNIF ICAT ION OF ~b-TERMSThe unification of two ~b-terms is similarto the unification of two feature structures inPATR-II or two first-order terms in logic.Unification of two terms t I and t 2 proceeds asfollows.
First, the head symbols of tl and t2"areunified.
That  is, the GLB of the two symbols inthe signature lattice becomes the head symbolof the result.
Second, the subterms of t I and t,are unified.
When t I and t 2 both contain thefeature f, the corresponding subterms are unifiedand added as feature f of the result.
If oneterm, say h, contains feature f and the otherterm does not, then the result will containfeature f with the value from h. This is thesame result that  would obtain if t2 containedfeature f with value T .
Finally, the subterm4 Normally, the subterm at X will be written follow-ing the first occurrence of X and all other occurrences of Xwill not include subterms.230coreference constraints implied by the variablesin t 1 and t 2 are respected.
That  is, the result isthe least constrained ~b-term such that if twopaths (addresses) in t 1 (or t2) are tagged by thesame variable (i.e.
they core/%r) then they willcorefer in the result.For example, when the C-term(agreement @ X: (number@singular),subject => (agreement@X))is unified with( sub jec t@(agreement@(person@third)))the result is(agreement @ X: (number@singular,person@third) ,subject @ (agreement@X))INHERITANCE GRAMMARSAn IG consists of several IS-A statementsand several grammar rul?~.
A grammar rule isa definite clause which uses C-terms in place ofthe first-order literals used in first-order logicprogramming s. Much of the notation of Pro\]ogand DCGs is used.
In particular, the : -  sym-bol separates a rule head from the C-termscomprising the rule body.
Analogously to Pro-log, l ist-notation (using \[, I, and \])  can beused as a shorthand for C-terms representinglists and containing head and ta i l  features.When the - ->  symbol is used instead of "-,the rule is treated as a context-free grammarrule and the interpreter automatically appendstwo additional arguments (start and end) tofacilitate parsing.
The final syntactic sugarallows feature labels to be elided; sequentiallynumbered numeric labels are automatically sup-plied.Our first simple Inheritance Grammarconsists of the rules:sent  - ->  noun (Num) ,verb  (Num) .noun  (p lu ra l )  - ->  \ [cats \ ]  .verb  (p lu ra l )  - -> \ [meow\]  .The sentence to be parsed is supplied as a goal6 This is to be contrasted with LOGIN, in which ?-Figure 2.
Graphical representation f a C-term.231clause, as in:: -  sent  ( \ [ ca ts ,meow\ ]  , \[\]) .The interpreter first translates these clausesinto the following equivalent IG clauses,expanding away the notational sugar, beforeexecution begins.sent  ( s ta r t~P l ,end~P3)  : -noun  ( l~Num,  s tar t~P l ,  end~P2)  ,verb  ( l~Num,  s tar t~P2,  end~P3)  .noun  ( l~p lura l ,s ta r t~ l i s t  (head ,  cats,  ta i l~L)  ,end~L)  .verb  ( l~p lura l ,s ta r t~ l i s t  (head ,meow,  ta i l~L)  ,end~L)  .
: -  sent  ( s ta r t~ l i s t  (head ,cats ,ta i l~ l i s t  (head ,meow,ta i l~n i l ) )  ,end~ni l  ) .As this example indicates, every DCG is anInheritance Grammar.
However, since the argu-ments may be arbitrary C-terms, IG can alsoaccomodate f ature structure manipulation.TYPE-CLASS REASONING IN PARSINGSeveral logic-based grammars have usedsemantic categorization of verb arguments todisambiguate word senses and fill case slots (e.g.Dahl, 1979; Dahl, 1981; McCord, 1980).
Theprimary motivation for using !b-terms for gram-matical analysis is to facilitate such semantictype-class reasoning during the parsing stage.As an example, the DCG presented in(McCord, 1980) uses unification to do taxonomicreasoning.
Two types unify iff one is a subtypeof the other; the result is the most specific type.For example, if the first-order term smi th :_representing an untyped individual 6, is unifiedwith the type expression X :person:  student ,representing the student subtype of person, theresult is smi th  :person  : s tudent .terms replace first-order terms rather than predications.e Here the colon is used as a right-associative infixoperator meaning subtype.While .this grammar achieves extensivecoverage, we perceive two shortcomings to theapproach.
(1) The semantic hierarchy is some-what inflexible because it is distributedthroughout the lexicon, rather than being main-tained separately.
(2) Multiple Inheritance isnot accommodated (although see McCord,1985).
In IG, the ?-term s tudent  can act as atyped variable and unifies with the C-termsmi th  (yielding smith)  assuming the presenceof IS-A statements such as:s tudent  < person .
{smith ,  Jones,  b rown} < s tudent .The taxonomy is specified separately-even withthe potential of dynamic modification-and mul-tiple inheritance is accommodated naturally.OTHER GRAMMATICAL APPLICATIONSOF TAXONOMIC REASONINGThe taxonomic reasoning mechanism of IGhas applications in lexical and syntacticcategorization as well as in semantic type-classreasoning.
As an illustration which uses C-termpredications, consider the problem of writing agrammar that accepts a prepositional phrase ora relative clause after a noun phrase but onlyaccepts a prepositional phrase after the verbphrase.
So The flower under the tree wilted, Theflower that was under the tree wilted, and Johnate under the tree should be accepted but not*John ate that was under the tree.
The taxon-omy 8peeifie~ that prepos i t iona lPhraseand re la t iveC lause  are npMod i f ie rs  butonly a prepos i t iona lPhrase  is a vpMo-d i f ie r  The following highly abbreviated IGshows one simple solution:{prepos i t iona lPhrase ,re la t iveC lause}  < npMod i f ie r .p repos i t iona lPhrase  < vpMod i f ie r .sent ( .
.
. )
- ->  r ip ( .
.
. )
,vp ( .
.
. )
,vpMod i f ie r  (...) .np(.
.
. )
--> np( .
.
. )
,npModi f ie r  (...) .np( .
.
. )
--> .
.
.vp(.
.
. )
--> .
.
.prepos i t iona lPhrase( .
.
. )
--> .
.
?232re la t iveC lause( .
.
. )
- ->  ...IMPLEMENTATIONWe have implemented an IG developmentenvironment in Smalltalk on the Tektronix4406.
The IS-A statements are handled by anordering package which dynamically performsthe lattice extension and which allows interac-tive display of the ordering.
Many of the tech-niques used in standard depth-first Prolog exe-cution have been carried over to IG execution.To speed grammar execution, our systemprecompiles the grammar ules.
To speed gram-mar development, incremental compilationallows individual rules to be compiled whenmodified.
We are currently developing a largegrammar using this environment.As in Prolog, top-down evaluation is notcomplete.
Earley Deduction (Pereira and War-ren, 1980; Porter, 1986), a sound and completeevaluation strategy for Logic programs, freesthe writer of DCGs from the worry of infiniteleft-recursion.
Earley Deduction is essentially ageneralized form of chart parsing (Kaplan, 1973;Winograd, 1983), applicable to DCGs.
We areinvestigating the application of alternative xe-cution strategies, uch as Earley Deduction andExtension Tables (Dietrich and Warren, 1986)to the execution of IGs.ACKNOWLEDGEMENTSValuable interactions with the following peopleare gratefully acknowledged: Hassan A.it-Kaci,David Maier, David S. Warren, FernandoPereira, and Lauri Karttunen.REFERENCESAJt-Kaci, Hassan.
1984.
A LatticeTheoretic Approach to Computation Based on aCalculus of Partially Ordered Type Structures,Ph.D.
Dissertation, University of Pennsylvannia,Philadelphia, PA.A.it~-Kaci, Hassan and Nasr, Roger.
1986.LOGIN: A Logic Programming Language withBuilt-in Inheritance, Journal of Logic Program,ruing, 3(3):185-216.Dahl, Veronica.
1979.
Logical Design ofDeductive NL Consultable Data Bases, Proc.5th Intl.
Conf.
on Very Large Data Bascn, Rio deJaneiro.Dahl, Veronica.
1981.
Translating Span-ish into Logic through Logic, Am.
Journal ofComp.
Linguistics, 7(3):149-164.Dietrich, Susan Wagner and Warren,David S. 1986.
Extension Tables: Memo Rela-tions in Logic Programming, Technical Report86/18, C.S.
Dept., SUNY, Stony Brook, NewYork.Kaplan, Ronald.
1973.
A General Syn-tactic Processor, in: Randall Rustin, Ed.,Natural Language ProcesMng, A_lgorithmicsPress, New York, NY.Kay, Martin.
1984a.
FunctionalUnification Grammar: A "Formalism for MachineTranslation, Proc.
2Znd Ann.
Meeting of theAssoc.
for Computational Linguistics (COLING),Stanford University, Palo Alto, CA.Kay, Martin.
1984b.
Unification inGrammar, Natural Lang.
Understanding andLogic Programming Conf.
Proceedings, IRISA-INRIA, Rennes, France.Maier, David.
1980.
DAGs as Lattices:Extended Abstract, Unpublished manuscript.MeCord, Michael C. 1980.
Using Slotsand Modifiers in Logic Grammars for NaturalLanguage, Artificial Intelligence, 18(3):327-368.McCord, Michael C. 1985.
Modular LogicGrammars, Proc.
of the eSrd ACL Conference,Chicago, IL.Pereira, F.C.N.
and Warren, D.H.D.
1980.Definite Clause Grammars for LanguageAnalysis - A Survey of the Formalism and aComparison with Augmented Transition Net-works, Artificial Intelligence, 13:231-278.Pereira, F.C.N.
and Warren, D.H.D.
1983.Parsing as Deduction, elst Annual Meeting ofthe Assoc.
for Computational Linguistics, Bos-ton, MA.Porter, Harry H. 1986.
Earley Deduction,Technical Report CS/E-86-002, Oregon Gradu-ate Center, Beaverton, OR.Shieber, Stuart M. 1985.
An Introductionto Unification-Based Approaches to Grammar,Tutorial Session Notes, ?3rd Annual Meeting ofthe A~oc.
for Computational Linguistics, Chi-cago, IL.233Shieber, S.M., Pereira, F.C.N., Karttunen,L.
and Kay, M. 1986.
A Compilation of Paperson Unification-Based Grammar Formalisms,Parts I and II, Center for the Study of Languageand Information, Stanford.Winograd, Terry.
1983.
Language aa aCognitive Process, Vol.
Z: Syntax, Addison-Wesley, Reading, MA.234
