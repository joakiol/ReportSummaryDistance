CN YUR CMPUTR RAED THS?Linda G. MeansComputer  Science Depar tmentGeneral  Motors  Research LaboratoriesWarren ,  M ich igan  ,18090ABSTRACTThis paper describes strategies for automaticrecognition of unknown variants of known words ina natural anguage processing system.
The typesof lexical variants which are detectable include in-flexional aberrations, ad hoc abbreviations andspelling/typographical errors.
This technique isindependent of any particular grammar or parsingformalism, and can be implemented as a lexicallookup routine which heuristically prunes and or-ders the list of possible fixes found in the lexicon,then allowing the parser to treat the list of candi-dates as a set of multiple meanings for a polyse-mous word.1 INTRODUCTIONThis paper describes a technique for automaticrecognition of unknown variants of known wordsin a natural language processing system.
~Knownword" refers here to a word which is in the lexi-con.
The types of lexical variants which are de-tectable include inflexional aberrations, ad hocabbreviations and spelling/typographical errors.The strategies presented here have been imple-mented fully in an English database query systemand play a crucial role in a text-understandlng sys-tem which is in the early stages of design.
Thistechnique, however, is independent of any par-ticular grammar or parsing formalism, and canbe implemented as a lexical lookup routine whichheuristically prunes and orders the list of possi-ble fixes found in the lexicon.
First, a context-freeplausibility assessment is based on a comparison ofthe structure of each candidate fix with that of theunknown word, and determines the order in whichfixes will be considered by the parser.
Then, theparsing process can choose among the candidatefixes in the same way that it tests multiple mean-ings of polysemous words for a good syntactic andsemantic fit.
The use of heuristics to identify themost plausible fixes for a hypothesized ad hoc ab-breviation or spelling error will be the focus of thispaper.Unknown words have traditionally been handledby natural language processing systems in the fol-lowing ways:1.
Query the user for a replacement, possibly of-fering a menu of spelling corrections.
Thisstrategy will allow correction of misspelledwords as well as correctly spelled words whichare not in the lexicon, and generally ensuresan accurate interpretation by the computer.However, continued interaction of this sortmay  prove frustrating to a poor typist, andis, of course, unsuitable for a non-interactivenatural language processor.2.
Enter into a dialogue with the user to providea definition for a new word.
This strategyrequires a lexicon interface based on a met-alanguage which would specify grammaticalproperties for a word without necessitating aninordinate degree of linguistic sophisticationor knowledge of the database on the part ofthe end user.
Although various attempts havebeen made to design such interfaces I, manyoutstanding research issues remain, and thisapproach too requires an interactive environ-ment.3.
Try to infer syntactic and/or semantic fea-tures of the unknown word from the linguis-tic context, with no user interaction.
Thisstrategy can be used to choose a plausiblecorrection for a misspelled word as well as toparse an expression containing an unknownword.
Early research in this area attemptedto model human reasoning about unknownwords in a script-based parser \[5\], and hassince come to encompass a variety of multi-strategy, expectation-based techniques as ex-emplified in the DYPAR \[2\] and NOMAD \[4\]systems.
This technique shifts the burden oflinguistic expertise from the end user to thecomputer system, but has met so far withonly limited success, and accuracy can onlybe assured by interaction with the user toXTwo outstanding examples are the TELI  \[1\] and TEAM\[6\] systems,93confirm the hypothesized interpretation.
Anadditional limitation to this approach is thatmany existing natural language parsers can-not accomodate this sort of analysis.At General Motors Research Laboratories wehave encountered two situations in which the tra-ditional interactive strategies axe inadequate, andwhere it is preferable to try to fix an unknownword automatically.The first involves Datalog, our research proto-type of an English database query system \[7\].
Thissystem was designed with the philosophy that amore humanlike sort of interaction is obtained byletting the system reason about ambiguities of MIsorts as well as it can, always informing the user ofits interpretation before displaying the response.Automatic lexical correction satisifes the objec-tives of this design principle.A more compelling need for this capability hasarisen in a text-understanding project that wehave undertaken, which aims to read and sum-maxize the content of free-form text records in adiagnostic database.
The cases axe entered by au-tomotive technicians in the process of solving a va-riety of vehicle failure problems referred to themby service personnel in dealerships.
The techni-cians are generally people who axe not expert typ-ists, may not have excellent language skills, andhave a time constraint imposed by a heavy loadof calls.
Also, two of the three free-form textfields in the database are abstract lines which axelimited to a few words, which imposes a severespace constraint.
As a result, the language usedin the free-form text tends to be highly ill-formed,with an abundance of ad hoc abbreviations andtypographical and spelling errors.
And  althoughthe technicians' least compelling concern at data-entry time is linguistic in nature, their errors comeback to haunt them, as the lexical errors impedethe success of subsequent keyword searches doneto find analogous cases in the database.
So auto-matic lexicai correction, in addition to being nec-essary to our text-understanding task in the longertext field, could also be of service in making cor-rections to the abstract lines in the database.
Thesize of the database precludes the feasibility ofan interactive system which would read text fromexisting cases and query a program operator forf i xes .Incidentally, all examples used here of spellingerrors and ad hoc abbreviations axe taken fromour free-form text data.2 FLEX IBLE  MORPHOLOGYOne common type of spelling error involvesspelling changes in base forms when adding aninflexional suffix.
Two sorts of errors must beaddressed in this area: failure to make a nec-essary spelling change (e.g.
plug/pluged), andthe occurrence of inappropriate spelling changes(come/comming).
Inflected forms containing ei-ther of these errors can be detected by a forgivingmorphology algorithm.Our algorithm currently recognizes only oneprefix and/or suMx per word.
Flexibility regard-ing inflexional spelling changes pertains only tosuffixes; although additional suffixes can be spec-ified easily, those currently recognized axe:-, (noun, verb) -er (adj)-ed (verb) -eat (adj)-ing (verb) -ly (adj, adv)-merit (verb)The flexible morphology algorithm looks for aknown suffix at the end of an unknown word.
Iffound, the suffix is stripped off, and the remainder,a postulated base form, is looked up in the lexicon.If not found, spelling change transformations axeperformed on the base form, and lexical lookup isperformed after each transformation.
Morphologi-cal analysis succeeds when a postulated base formis found in the lexicon with a syntactic categorywhich is compatible with the suffix.Consider the two ill-formed inflexions men-tioned above.
For an unknown word pluged, the-ed suffix is stripped off.
The remainder, plug,is found in the lexicon as a verb, so morphologysucceeds.
For the unknown word comming, thepostulated base form after stripping off the -ing iscomm.
Transformations specified for an -ing suffixaxe-"1.
If base ends in a double consonant, reduce it.2.
If base ends in a single consonant, append an-Co3.
If base ends in -i, change to -y.In the case of ,omm, morphology succeeds afterperforming the first two transformations and find-ing the verb come in the lexicon.This algorithm has proven quite effective in rec-ognizing inflected forms which contain common er-rors such as erroneously doubling a word-final con-sonant or failing to double a consonant before an94inflected suffix; failure to drop word-final -e before-ing; and failure to change -y to -ie before adding-s or  -ed.Morphology is the first fix tried for an unknownword, as it is less computationally intensive thandetection of spelling errors and ad hoc abbrevia-tions, and occurs more frequently.3 AD HOC ABBREVIAT ION RECOG-N IT IONabsence of contextual evidence is more difficult.For each possible abbreviation expansion found inthe lexicon for an unknown word, a comparison ismade between the structure of the unknown wordand that of the expansion, and the candidate fix isassigned to one of five categories, which serves as ameasure of its plausibility.
Distinct heuristics areused to rate contraction-type and truncation-typefixes.
The criteria used to classify candidate fixesand the ordering of the five plausibility categoriesare described below.When morphology fails to detect a variant of aknown word, an ad hoc abbreviation or spellingerror is hypothesized.
Each possible abbreviationexpansion found in the lexicon is assigned a plau-sibility score on the basis of a comparison of thestructure of the unknown word and of the poten-tial fix.There are definite identifiable tendencies usedby humans to abbreviate words.
Although the ten-dencies which will be discussed here have not beentested empirically, our abbreviation-plausibilityheuristic which incorporates them performs wellin ordering lists of candidate abbreviation expan-sions.
Further experimentation with the algorithmwill undoubtedly produce even better results, butthe heuristics described here have performed sat-isfactorily.Abbreviation occurs as a result of truncation orcontraction.
To identify candidate abbreviationexpansions for a postulated abbreviation, the lex-icon is searched for words whose initial substringcoincides with the unknown word (truncation-type fixes) and words which contain all lettersof the unknown word in the same relative order(contraction- type fixes}.
Bear in mind that an-other property of abbreviations i that they gen-erally begin in the same letter as the word fromwhich they axe derived 2, so it is only necessary tosearch the portion of the lexicon beginning in thesame letter as the unknown word, and it is onlynecessary to consider lexical words whose lengthexceeds that of the unknown word.Finding possible expansions of an abbreviationis a simple task.
s Rating their plausibility in the2The rare exceptions uch as zrm't for transmit or ztra fore~ra will not be treated here.SThe only exceptions are those infrequent abbreviat ionswhich contain letters not occurr ing in the expansion, likeno.
as an abbrev ia t ion  for number.
These tend to becommon abbreviat ions which should be entered into thelexicon; ad hoc abbreviat ions generally do not have  thischaracteristic.3.1 Truncat ion - type  Abbrev ia t ionsTruncation-type fixes are classified as eitherplausible or implausible, based on the extensionstring, i.e.
the string which is chopped off to ab-breviate a word.
I will refer to the two truncationclassifications as trunc-good (plausible) and trunc-bad (implausible}.If the extension consists entirely of vowels or en-tirely of consonants, it is classified as trunc-bad, aspeople generally tend to truncate words by delet-ing at least an entire syllable.
If the unknownword ends in a vowel and the extension begins ina consonant, again it gets a trunc-bad rating, aspeople tend to truncate words by using the entireinitial syllable(s), plus the initial consonant(s) ofthe following syllable if the preceding syllable endsin a vowel.
If the entire initial consonant clusterof the expansion does not occur at the start of theunknown word, assign trunc-bad.Any truncation-type fix not classified as trunc-bad is rated as trunc-good (plausible}.
So the lex-ical word hesitation is classified as trunc-bad foran unknown word heM, and trunc-good for an un-known word hes.3.2 Cont ract ion - type  Abbrev ia t ionsThree degrees of plausibility are distinguishedfor contraction-type fixes.
Because the eliminationof vowels from a word is a common contractionstrategy, and the absence of vowels in an unknownword is a strong indicator of an ad hoc abbrevi-ation as opposed to a spelling error, the highestdegree of plausibility is assigned to those lexicalwords from which only vowels have been excisedto derive the unknown word.
The classificationdesignated for such fixes is called missing-vowels.
44The missing-vowels criterion requires two qualif ication.I f  a doubled consonant in the abbreviat ion is simplified,the abbreviat ion can still be classified as missing-vowels.95For an unknown word assm, for instance, assumewill be classified as a missing-vowels fix.For contraction-type fixes in which consonantsas well as vowels have been excised to derive theunknown word, one of two classifications i as-signed: contract-good (plausible) and contract-bad (implausible).
The favorable rating is as-signed if none of the following criteria for an im-plausible rating apply:I.
If the abbreviation cannot be derived from thelexical word by removing a single substring,assign contract-bad.
This criterion reflectsthe common tendency to contract a word byusing some initial portion plus some final por-tion.
For an unknown word ht, some fixesclassified as contract-bad for this reason arehatch, hertz and heater.2.
If the abbreviation differs from the lexicalword by a single substring, but the substringcontains only consonants, assign contract-bad.
This is motivated by the fact that atleast one entire syllable is generally removedto contract a word.
For an unknown wordsateh, the fix scratch is classified as contract-bad.3.
If the abbreviation differs from the lexicalword by a single substring, but a vowel imme-diately precedes or follows the substring in theexpansion, assign contract-bad.
The implau-sibility here arises from the fact that a vowelin the abbreviation is adjacent to a differentconsonant than in the lexical word, which isunlikely, or that two adjacent vowels in theabbreviation are not adjacent in the lexicalword, which is even less likely.
Consider asan example the fix regulate for an unknownword rears.4.
If the entire initial consonant cluster of thelexicM word does not occur at the start of theabbreviation, assign contract-bad, e.g.
strainas a fix for stn.Consider the classification of fixes from our lex-icon for an unknown word compt as an example ofthe ordering capability of the contraction heuris-tics:For instance, the abbreviat ions probbl, probl, prbbl and prblall have a missing-vowels relat ionship with the expan-sion probable.
Also, for each vowel  removed to derive theabbreviat ion, all adjacent vowels in the expansion mustalso have been removed.
Thus, count is not classified asa missing-vowels fix for an unknown word cont.missing-vowels contract-good contract-badcompute compartment consumptioncompact compensatecomponent computercomplaint composite3.3 Order ing  of  P laus ib i l i ty  Categor ies  forAbbrev ia t ionsThe five abbreviation plausibility classificationsthemselves are ordered in terms of plausibility.From high acceptability to low, the ordering is:1. missing-vowels2.
trunc-good3.
contract-good4.
trunc-bad5.
contract-badAs a result, missing-vowels fixes axe always pre-ferred over truncation or other contraction fixes.Plausible truncation fixes are preferred over plau-sible contraction fixes, but plausible contractionfixes are preferred over implausible truncationfixes.
For an unknown word 8pr, fixes are foundin our lexicon for four of the five classifications:missing- trune- contract-  contract-vowels good good badspare sprocket speaker separatesuper spring spacer sparkspray speedometer 8portsprint sputter sulphurspicer suppressor3.4 In teract ion  of  Morpho logy  and  Abbre -v ia t ion  Detect ionAbbreviations are easily recognizable when in-flected with suffixes known to the morphologicalanalyzer.
If an unknown word ends in a knownsuffix, the suffix is stripped off, and if the remain-der does not end in a vowel s, two comparisons aremade with each lexical entry: one with the entireunknown word, and one with the suffix strippedoff, checking for syntactic ategory compatibilitybetween the suffix and the lexical definition.
So foran unknown word such as outs, expansions will befound for the entire word (e.g.
outside), and alsofor out, with a syntactic category restriction ofnoun or verb (e.g.
outlet, outline).It is not unusual to encounter an abbreviationwith an inflected suffix.
It is unusual, however, forSAbbreviat lons rarely end in a vowel  (see Section 5), so ifthe str ing left after str ipping off a suffix ends in a vowel,the unknown word is not l ikely to be an abbreviat ion.96an ad hoc abbreviation to incorporate the spellingchanges required to inflect the expansion.
Giventhe contraction ass//for assembly, for instance, theplural form of the abbreviation is likely to be as-sys, not aasies.
As a result, I don't see a need toperform the usual spelling change transformation~on an inflected abbreviation.4 SPELL ING CORRECTIONThe currently implemented spelling corrector iscapable of identifying five types of spelling/typo-graphical errors: wrong letter, missing letter, ex-tra letter, transposed letters, and missing blank(incorrect segmentation in which two words arerun together).
The first four of the error cate-gories listed above have been found to account forover 80% of the spelling errors found in studiesperformed with end users \[3\], \[9\].
Like the abbre-viation detector, the spelling corrector only treatswords which consist entirely of alphabetic charac-ters.4.1 Spel l ing Er ror  P laus ib i l i ty  AssessmentUnlike the abbreviation plausibility strategies,the spelling correction plausibility heuristics can-not identify implausible fixes; they can only dis-tinguish the most highly plausible fixes fromthe other fixes, which are considered plausibility-neutral.No discriminators have been established formissing-blank fixes.
In the wrong-letter category,the plausibility rating is boosted for fixes in whichthe correct letter phonologically resembles its erro-neous replacement (e.g.
substitutions within setsof sibilants, vowels, or nasals), or when the twoletters are adjacent on the keyboard.Missing-letter fixes are rated by comparing themissing letter with the letters that precede and fol-low it in the fix.
A fix is assigned a higher score ifa missing vowel is preceded or followed by anothervowel (reflecting the common spelling error of re-ducing a diphthong, triphthong, vowel digraph ortrigraph), or if a missing consonant is preceded orfollowed by an identical consonant (capturing thepropensity to reduce doubled consonants).Extra-letter fixes are also evaluated on the ba-sis of the letters preceding and following the extraletter.
A higher rating is assigned to those fixes inwhich an extra consonant is preceded or followedby an identical consonant, or an extra voweloccursadjacent to another vowel, capturing the proclivityto unnecessarily double consonants or create diph-thongs or triphthongs.
Transposed-letters fixesare considered plausible when the two transposedletters are adjacent (even more so when adjacenttransposed letters are both vowels), and when twoconsonants have been transposed around vowels.Other researchers have expressed doubt aboutthe feasibility of searching a large lexicon forall possible spelling corrections \[2\], preferring anexpectation-based search in which the syntacticand/or semantic features expected by the parserupon encountering an unknown word are used toprune the search space for corrections.
For aparser which can accommodate this approach, per-haps a combination of expectation-based pruningand plausibility heuristics would yield the best re-sults.
Even in the absence of parser expectations,a couple of strategies can be employed to reducethe search space considerably.First, for the five categories of errors which wecan detect, a lexical word need not be consideredas a fix unless the length differential with the un-known word is less than 2 (accounting for all er-ror types except missing blank), or unless the un-known word begins in the lexical word (in the caseof a missing blank).Secondly, another pruning strategy which mer-its mention is that of searching only the subset ofthe lexicon beginning in the same letter as the un-known word.
An  examination of one abstract fieldin 11,000 cases from our diagnostic database re-vealed only two misspelled words in which the ini-tial letter differs from that of the correction (oightfor light and irratic for erratic}.
There occurredin the same data set 1207 misspelled words begin-ning in the same letter as the correction.
Perhapstypists tend to notice and correct a misspellingmore readily when the initial letter is in error.
Atany rate, our data seem to indicate that this prun-ing strategy is not unreasonable, particularly in aninteractive application like database query wherethe fail-sake method of querying the user exists inthe event of spelling correction failure.When spelling correction fails to find an accept-able fix beginning in the same letter, other lexicalsubsets may be searched as a last resort, chosenperhaps on the basis of phonetic similarity or key-board adjacency to the first letter of the unknownword (which would prove successful in our excep-tional cases of oight and irratie).Using the pruning strategies of a < 2 lengthdifferential in a same-first-letter subset of the lexi-97con, we have experienced very good response timewith a lexicon of over 2600 words, which wouldbe a good indicator of success for applications likedatabase query where lexicons tend to be ratherlimited.4.2 I n te ract ion  of  Morpho logy  and  Spel l ingCor rect ionThe interaction of the spelling corrector withthe morphological analyzer is more problematicthan abbreviation-morphology interaction.
Thedifficulty lies in the occurrence of morphologicalspelling changes in inflected forms (recall thatinflected abbreviations generally do not incorpo-rate the usually requisite spelling changes}.
Forspelling correction as well as abbreviation recogni-tion, two comparisons are made with each entry inthe appropriate lexical subset when the unknownword ends in an inflected suffix: one comparisonwith the entire unknown word, and a second withthe postulated base form, checking for syntacticcategory compatibility with the possible fix.One obvious problem is that while our spellingcorrection algorithm can identify one and onlyone spelling error per word, an inflexional spellingchange in an already misspelled word results intwo deviations from the lexical word.
Consider,for instance, a~perating as a misspelled inflexionof aeparate.
After stripping off the -ing from theunknown word, a comparison of the postulatedmisspelled base form aeperat with the lexical wordseparate will fM1.One possible solution to this problem would in-volve the use of an inflect-word function whichcomposes its base and suffix arguments into an in-flected form with requisite spelling changes.
Thelexical search for fixes then would compare the in-flected unknown word with the inflected form ofthe lexical word (e.g.
compare aeperatingwith aep-aratin?, computing the latter form from the lexicalentry ~eparate inflected with suffix -ing).5 ADJUDICAT ION BETWEEN SPELL -ING AND ABBREVIAT ION F IXESOnce the lists of abbreviation fixes and spellingfixes have been ordered internally, priority mustbe given to one of these categories.
Although anumerical score is assigned to each fix, the rela-tivity of the scores holds only within the broadercategories of spelling and abbreviation, and notacross categories.
Various criteria may be appliedto determine whether the unknown word is morelikely to be an abbreviation or a misspelling.While there occasionally occur such fortuitoussignals of abbreviation as a word-final period or anapostrophe before an inflected suffix (e.g.
rcpl'edfor replacea~, other subtle discriminators can alsobe identified.
With the exception of standard ab-breviations for U.S. states and a few other com-mon abbreviations (e.g.
ilmo, demo, info), abbre-viations of single words (as opposed to acronymicabbreviations} rarely tend to end in vowels.
Anunknown word ending in a vowel, then, is muchmore likely to be a misspelling than an ad hocabbreviation.Consider too the fact that while the spellingheuristics fail to identify implausible fixes, theabbreviation heuristics do identify classes of im-plausibility for truncations as well as contractions.Generally speaking, abbreviation fixes classified astrunc-bad or contract-bad axe implausible to sucha high degree that they should not be consideredat all when more plausible abbreviation fixes orany spelling fixes have been identified.
So the fi-nal ordering of the entire list of fixes may be es-tablished by listing spelling fixes first (or maybeonly} when the unknown word ends in a vowel orwhen no abbreviation fix is classified higher thantrunc-bad, and placing abbreviation fixes beforespelling fixes otherwise.6 ROLE OF THE PARSERThe Datalog parser has a Cascaded ATN archi-tecture, in which semantic feedback is providedto the working parser during the parse.
A suc-cessful parse yields a semantic representation ofthe input expression as well as a syntactic parsetree.
Lexical ambiguity is resolved by the parserthrough the rejection of unacceptable interpreta-tions by either syntax or semantics.
Multiple ab-breviation and/or spelling fixes for an input wordaxe treated by the parser as cases of lexical ambi-guity, differing only in how the user is informed ofthe fix when the response is displayed.
In the orig-inal implementation f the lexical correction algo-r ithm in Datalog, even though the list of candi-date fixes found during lexical lookup was not or-dered or pruned before parsing, good results wereobtained in the recognition of spelling errors andabbreviations.
The incorporation of plausibilityheuristics, however, reduces parsing time consid-erably, as they eliminate unlikely candidates fromconsideration before parsing while also ordering98candidates in terms of plausibility, thus obtaininga successful parse earlier.7 FURTHER RESEARCH ISSUESAlthough initial experimentation with the lex-ical correction algorithm has yielded fairly goodresults in our database query system and text-understanding project, many  research issues re-main unresolved.
These pertain primarily to lex-ical variants which the algorithm cannot identifyas possible fixes.7.1 Robust  Spel l ing CorrectionSpelling errors which are not handled includeextra blank (incorrect segmentation which splitsone word into two), more than one letter in error(e.g.
droan for drone}, and misspellings which co-incide with a lexical word (this would be a rareoccurrence for an ad hoc abbreviation).
Furtherwork is needed to design a more robust spellingcorrection algorithm which can account for agreater variety of spelling errors as well as discrim-inate among good and bad correction candidates e.The five types of spelling errors found by our pro-gram are often the result of keyboard slips insteadof a misconstrual of the correct spelling.
An  idealspelling correction algorithm would assess the dif-ferences between an unknown word and a postu-lated fix in terms of keyboard layout and typinghabits, as well as phonetic similarity and interfer-ence from other words with a similar pronuncia-tion (e.g.
fluzuate for fluctuate).7.2 Unknown WordsIdentification of truly unknown words (thosewhich should be added to lexicon) is difficult.
Weget around this problem with our free-form textby preprocessing all new text to find new wordsto add to the lexicon.
Morphology weeds out in-flected forms of known words.
A list of unknownwords is then sent to a lexicon building program,which allows a lexicon builder to make decisionsabout each word and automatically creates a lex-ical definition with features elected by the user.Misspellings, abbreviations and inftexions can beskipped over easily, or renamed as new lexical en-tries.
In the lexical lookup stage, an acceptabilitythreshold can be established below which a fix will6An excellent source of information on spelling correctionalgorithms is Peterson's annotated bibliography in \[8\].be rejected from consideration, so if no candidatefixes exceed the threshold, none will be consideredby the parser.7.3 Misspel led Inf lexional  SuiftxesSpelling correction of inflexional suffixes is lack-ing.
Morphology cannot recognize a word with amisspelled suffix such as engagernant, and as onlythe base form engage occurs in the lexicon, spellingcorrection cannot find the correct fix either.
Per-haps spelling correction of inflexional suffixes canbe implemented as a last resort measure.
I haven'tseen much of a need for it, possibly because thesuffixes we identify are quite short, although itcould be a problem if multiple suffixes were rec-ognized by morphology (e.g.
8tandardlzation =standard + ize + ation).7.4 Abbrev ia t ion  I r regular i t iesMisspelled abbreviations are another difficulty;the algorithm will not recognize accell as a trun-cation of acceleration.Abbreviated inflected suffixes on abbreviationsare also beyond our current capabilities; whereasrepled can be recognized as an inflected contrac-tion of replaced, repld cannot be recognized (andthe latter is probably the more likely contraction).7.5 Shor t  WordsOne- and two-letter words are difficult to fix be-cause of the high number of candidate fixes thatare found.
We do not attempt to fix one-letterwords, and generally find an unwieldy number ofspelling fixes as well as abbreviation fixes for two-letter words.7.6 Syl labic Analys is  of  Abbrev ia t ionsWe have not yet experimented with a syllable-based comparison of the unknown word with can-didate fixes as a method of context-free plausibil-ity assessment.
Although this approach may proveto be more effective, it would also be more compu-tationally intensive and may be unnecessary.
Thestrategies described here have been designed tocapture many of the same generalities regardingabbreviation plausibility which would be inherentto a syllable-based approach.998 CONCLUSIONSeveral decades of research in natural languageprocessing have resulted in significant advancesin our ability to parse well-formed input withina well-specified omain.
One challenge which wenow face is the ability to forgive linguistic devia-tions which do not obscure meaning.The lexical correction techniques described here-in appear to be promising for natural language ap-plications in which it is necessary to curtail user in-teraction in resolving ambiguities.
Even in a moreinteractive environment, the usefulness of this ca-pability should not be ruled out.
It accommodatesusers who lack good spelling and/or typing skillsby forgiving spelling errors and by allowing consid-erable conservation of keystrokes through ad hocabbreviation recognition.\[6\] Barbara J. Grosz, Douglas E. Appelt, Paul A.Martin, and Fernando C.N.
Pereira.
TEAM:An Experiment in the Design of TransportableNatural-Language Interfaces.
Artificial Intel-ligence, 32:173-243, 1987.\[7\] Carole D. Hafner and Kurt S. Godden.
Designof Natural Language Interfaces: A Case Study.Research Publication GMR-4567, General Mo-tors Research Laboratories, Warren, MI, 1984.\[81 James L. Peterson.
Computer Programsfor Detecting and Correcting Spelling Errors.Communications of the A CM, 23(12):676-687,1980.\[91 James L. Peterson.
A Note on UndetectedTyping Errors.
Communications of the A CM,29(7):633-637, 1986.9 ACKNOWLEDGEMENTSMany thanks to my GMR colleagues Kurt God-den and Sam Uthurusamy for their continued in-terest and feedback on this topic.References\[I\] Bruce W. Ballard and Douglas E. Stum-berger.
Semantic Acquisition in TELl: ATransportable, User-Customized Natural Lan-guage Processor.
In Proceedings of the P.~thAnnual Meeting of the Association for Com-putational Linguistics, pages 20-29, 1986.\[2\] Jaime G. Carbonell and Philip J. Hayes.
Re-covery Strategies for Parsing Extragrammati-cal Language.
American Journal of Computa-tional Linguistics, 9(3-4):123-146, 1983.\[3\] Fred J. Damerau.
A Technique for ComputerDetection and Correction of Spelling Errors.Communications of the ACM, 7(3):171-176,1964.\[4\] Richard H. Granger.
The NOMAD System:Expectation-Based Detection and Correctionof Syntactically and Semantically Ill-FormedText.
American Journal of ComputationalLinguistics, 9(3-4):188-196, 1983.\[5\] Richard H. Granger, Jr. FOUL-UP: A Pro-gram that Figures Out Meanings of Wordsfrom Context.
In Proceedings of the 5th In-ternational Joint Conference on Artificial In-telligence, pages 172-178, 1977.100
