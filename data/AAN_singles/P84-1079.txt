UNDERSTANDING OF JAPANESEIN AN INTERACTIVE  PROGRAMMING SYSTEMKenji Sugiyama I, Masayuki Kameda, Kouji Akiyama, Akifumi MakinouehiSoftware LaboratoryFujitsu Laboratories Ltd.1015 Kamikodanaka, Nakahara-ku, Kawasaki 211, JAPANABSTRACTKIPS is an automatic programming system which generatesstandardized business application programs through interactivenatural language dialogue.
KIPS models the program underdiscussion and the content of the user's statements as organizationsof dynamic objects in the object*oriented programming sense.
Thispaper describes the statement*model and the program-model, theiruse in understanding Japanese program specifications, and bow theyare shaped by the linguistic singularities of Japanese input sentences.I INTRODUCTIONKIPS, an interactive natural language programming system,that generates standardized business application programs throughinteractive natural language dialogue, is under development atFujitsu (Sugiyama, 1984).
Research on natural languageprogramming systems ( 'NLPS')  (l-leidorn, 1976, McCune, 1979) hasbeen pursued in America since the late 1960's and some results ofprototype systems are emerging (Biermaun, 1983).
But in Japan,although Japanese-like programming languages (Ueda, 1983) haverecently appeared ,  there is no natural language programmingsystem.Generally, for a Net~PS to understand natural languagespecifications, modeling of both the program under discussion and ofthe content of the user's statement: is required.
In conventionalsystems (Heidorn, 1970, McCune, 1979), programs and rulesencoding linguistic knowledge first govern parsing procedures whichextract from the user's input a statement*model; then "programmodel building rules" direct procedures which update or modify theprogram-model in light of what the user has stated.
There are thustwo separate models and two separate procedural components.However, we believe that knowledge about semantic parsingand program model building should be incorporated into thestatement*model and the program-model, respectively.
In the NLPSwe are working on, these two models are organizations of objects (inthe object-oriented programming sense (Bobrow, 1981)), eachpossessing local knowledge and procedures.
The user's input is firstparsed by a syntactic analysis procedure which communicates sub-trees to the statement*model objects for semantic judgments andannotations, such that the completed parse tree is triviallytransformable into the statement model.
In the second stage, thestatement model is sent to an object in the program model(#PROGRAM) which sends messages to other program-modelobjects corresponding to components of the user's statement; it isthese objects which perform the updating and modificationoperations.This paper describes the statement*model and the program-model, their use in understanding Japanese program specifications,and how they have been shaped by the linguistic singularities of theJapanese input sentences dealt with so far.Isuglyams's current address k Advanced Computer Systems Department,SRI InternatlonsJ, Menlo Park, CA 94028.II MODELSA.. P ro l \ [ ram .ModelTo get a better understanding of the way users describeprograms, we asked programmers to specify programs in a shortparagraph, and sampled illustrative descriptions of simple programsfrom a Hyper COBOL user's manual (Fujitsu, 1981) (Hyper COBOLis the target programming language of KIPS).
This resulted in acorpus of 60 program descriptions, comprising about 300 sentences.The program model we built to deal with this corpus is dividedinto a model of files and a model of processes (Figure I).. .
.
.
.
.
.
model of  p rocesses  .
.
.
.
.
.
.
.
.
.
.
.
mode l  o f  files .
.
.
.. .
.
.
.
.
.
.
.
.
.
.
.
.
~" .
.
.
.
.
.
.  "
r  .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.  "
r -  .
.
.
.
.
.
.
b .
.
.
.
.~  C I~,UB~ file-type ', '.
.
.
.
.
.
.
/ , , , , , , \ ' /  .
.
.
.
.
/ I,,..-I #s'rATEI ~ ~ / #S~A~ / Ityp,,.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
inutmmcuc property~- .
- -  8upurlsub re la t ion.
.
.
.
c lans / instance re lat ion=~-~= coapouitu object8F l~re  1.
The progr~ aod,l385The model of files comprises in turn several sub-models,objects containing knowledge about file types, record types and itemtypes.
A particular file is represented by an object which is aninstance of all three of these.
Class-level objects have suchproperties as bearing a certain relation to other class-level objects,having a name, and so forth.
For example, the object #RECORD-TYPE has ITEM-TYPES relations with the #1TEM-TYPE object,and DATA-LENGTH and CHARACTER-CLASS properties.Objects on the instance level have such properties as z specific datalength and a specific name.The model of processes is a taxonomy of objects bearingsuper/subset relations to one another.
On the highest level we findsuch objects as #OPERATION, #DATA, #PROGRAM,#CONDITION, and #STATE.The specific program-model, which is built up through adialogue with the user, is a set of instance-level objects belonging toboth file and process classes.B.
S ta tement  ModelIn a NLPS system, it is necessary to represent the content ofthe user's input sentences in an intermediary form, rather thanincorporating it directly into the program model, because the user'sstatements may either contradict what was said previously, or omitsome essential information.
The statement model provides thisintermediary representation, whose content must be checked forconsistency, and sometimes augmented, before it is assimilated andacted upon.The sentences in the corpus can, for the purpose of statement*model building, be classified into operations entences, parametersentences, and item*condition sentences (Figure 2).
Their semanticcomponents can be divided into nominal phrases and relations- names or descriptions of operations, parameters, data classes, andspecific pieces of data (e.g.
the item "Hinmei'), and relationsbetween these 2 (Figure 3).
Naming these elements, identifyingsubclasses of operations, and categorizing the dependencies yields thestatement model (Figure 4): subcomponents of the sentencecorrespond to class-level objects organised in a super/sub hierarchy,and the content of the sentence as a whole corresponds to a systemof instance-level objects, descendants from those classes.operat ionsontencopea'smnCer8entente?tnn-cond?t?on8un~oncn5or t~a~ account ~ewi thak~'H inm~?then outp~ ~totheacco~nt ~el .~ek~em~a~ i# 'H inm~Figure 2.
Three 8ontnnce typossort's key item "Hinmei " isoperation , spnctf.t?
dat&d&ta clams /paxannterFigure 3.
The 8emmtlc nlununtsH I  Unders tand ing  o f  JapaneseKIPS understands Japanese program specifications in twophases.
The sentence analysis phase analyzes an input andgenerates an instance of a statement model.
The specificationacquisition phase builds an instance of the program model from theextracted semantics.A k, Imp lement ing  the ModelsTo  real ize a natural anguage understanding system using themodels we are developing, objects in the models have to be dynamicas well as static, in the sense that the objects should express, forinstance, how to instantiate themselves as well as static relationssuch as super/sub relations.
Object-oriented and data-orientedprogram structures (Bobrow, 1981) are good ways to expressdynamic objects of this sort.
KIPS uses FRL (Roberts, 1977)extended by message passing functions to realize these programmingstyles.B.
Sentence  Anal},sisThe sentence analysis phase performs both syntactic andsematic analysis.
As described above, the semantics i representedin the statement model.
Syntax in KIPS is expressed by rules ofTEC (Sugiyama, 1982) which is an enhancement ofPARSIFAL (Marcus, 1980).
The fundamental difference is thatTEC has look-back buffers whereas PARSIFAL has an attentionshift mechanism.
This change was made in order to cope with twoimportant aspects of Japanese, viz., (1) the predicate comes last in asentence, and (2) bunsetsu s sequences are otherwise relativelyarbitrary.The basic idea of TEC is as follows?
To determine therelationship between a noun bnnsetstt, which comes early in thesentence, and the predicate, the predicate bunsetsu has to be parsed.Since it comes last in the sentence, the noun bnnsetsn has to bestored for later use to form an upper grammatical constituent.
Thearbitrary number of noun bunsetsus are stored in look-back buffers,and are later used one by one in a relatively sequence-independentway.1.
Overv iewThe syntactic characteristics of the sample sentences, whichwere found to be useful in designing the sentence analysis, are that(1) the semantic elements, which are stated above, correspondclosely to bunsetsu, (2) parameter sentences and item-conditionsentences can be embeded in operation sentences and tend to beexpressed in noun sentences (sentences like "A is B'), and (3)operation sentences tend to be expressed in verb sentences ( entenceslike "do A').
Guided by these observations, parsing rules aredivided into three phases; bunsetsu parsing, operand parsing, and\[*0e~TZOil,r~- tt.
rATx rxcs I.i icA 00e~r I0S  I ?\ , / \ ~ I \.. .
.
.
~" .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
?
lUnF?guro 4.
The st&tonnn~ node12Subordinstlnz sententls\] conjunctions m fret.ted u relations between statesor  operations, seen u described by seutentisl clauseS,8A linguistic onstituent which zpproximltely corresponds to "phrue" inEnglish.386operation parsing.
Bunsetsn parsing identifies from the input wordsequence a set of bunsetsu structures, each of which contains atmost one semantic element.
Operand parsing makes up suchoperands as parameter and item-condition specifications that may begoverned irectly by operations.
Operation parsing determines therelations between an operation and various operands that have beenfound in the input sentence.
Each of these phases ends messages tothe statement model, so that it can add to a parse tree informationnecessary for building the semantic structure of an input or candetermine the relationship between the partial trees built so far.
AnTheneuron.atmodelrule*USEF?
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
?l TO-GET $vlAun SAS:GET l. .
.
.
.
.
L .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.l ITDfS lunar *ITEM Il ORDBI Susef *ORDER l"T0-GET , r r l~ .
?
I ' I "D~,( -1;  * IS lOT DECLIllABLE\]\[ C; (S~ <S id le  F~iX,q~ OF c'T0-GET<Sl~tgrIC FEARUTE OF - lST>) \ ]  -> .
.
.I II Jm Ict  /~  JI & -~ II key I-1st  1stI ms I I es  II ~ f ,~ I I c~-~,~.
,  II "Hinmei" I I earl IFigure 6.
Syntax and Semantic Interact ioninstance of the statement model b extracted from the semanticinformation attached to the final parse tree.2.
S ) 'n tax  and Semant lcn  In teract ionFigure ,5 shows how message passing between the syntacticcomponent (rules) and the semantic omponent (model) occurs inorder to determine the semantic relationship between the bunaetgus('Hinmei" and key), The boxes denoted by -lst, C, 1st aregrammatical constituent storages called look-back buffer, look-upstack, and look-ahead buffer in TEC (Sugiyama, 1982), respectively.One portion of the rule's patterns (viz.
\[-1;...\]) checks if theconstituent iu the -lst buffer is not declinable.
Another portion (viz.\[C;...\]) sends the message "TO-GET *ITEM" to the semanticcomponent (*KEY) asking it to perform semantic analysis.On receiving the message from the syntax rule, *KEYdetermines the semantic relation with *ITEM, and returns theanswer =ITEMS = .
The process is as follows.
The message activatesa method corresponding to the first argument of the message (viz.TO-GET).
Since the corresponding method is not defined in *KEYitself, it inherits the method SAS:GET from the upper frame *USEF.This method searches for the slot names that have the facet $usefwith *ITEM, and finds the semantic relation ITEMS.As illustrated in the example, the syntax and semanticsinteraction results in a syntactic component free from semantics,and a semantic component free from syntax.
Knowledge ofsemantic analysis can be localized, and duplication of the sameknowledge can be avoided through the use of an inheritancemechanism.
Introducing a new semantic element is easy, because anew semantic frame can be defined on the basis of semanticcharacteristics shared with other semantic elements.O.. Speci f icat ion Acqu is i t ionFilling the slots which represent a user's program specificationis considered as a set of subgoals and completing a frame as a goal.Program models are built through message passing among programmodel objects in a goal-oriented manner.1.
Subgo.d ing\[Strucure of subgoaling knowledge\]The input semantic structure to the acquisition (1) isfragmentary, (2) varies in specifying the same program, and (3) thesequence of specifying program functions is relatively arbitrary.
Todeal these phenomena, several subgoaling methods, each of whichcorresponds to a different way of specifing a piece of programinformation, are defined in different facets under n same slot.
Forexample, u program model object #CHECK in Figure 6 has Stileand $acquire facets under the slot INPUT.ingtffince8 ofthe statement model?
TO-ACqUIRE *CHECKI"(The #emantic #truc~ure forthe Japanese cent.nee ach ae"make the account fi le an input,and check it.
")The progrn  modelinstance clanu8PROGRAMI I gPSF4' .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
~ .
.
.
.
.
.
.
.
.
.
?
4' .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
4"- '~ J  PROCESSES gvalue 8C!.
!~1 I J J TO-ACQUIRE gvalue RULE-INTPR i? "
- - - r  .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
J .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
"A \ \  "TO-INSTAETIATE" ~ /mTO-ACQUIRE eCHECgl = ~ * .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
?
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.I I ~ J *RULE1 Spat ISAC:PATI IJ~  #CHE~I ~-~l  Sexuc (IRPUT hcqu l re)  l+--Y  .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
* I .
.
.
.
II IIII~T gvtlue IFII, E3 I I IgPUT St i le ISAC:IIIFILE I?
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
* I Sucquire ISAC: INPUT IA J OUTPUT I l l -added SAME-RECORD I"TO-ACQUIRE eFILEI ?
* .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
*.
.
.
.
.
.
.
.I IFigure g. Subgotltng387In order to select one of the different subgoaling methods,depending on the input semantic structure, a rule-like structure isintroduced.
A pattern for a rule (e.g.
"RULE1 in #CHECK) isdefined under Spat which tests the input semantic structure, and anaction part of a rule is defined under Sexec which shows thesubgoal's names (slots) to be filled and the subgoaling methods(facets) to do the job.
The message "TO-ACQUIRE us  triggers arule interpreter.
The interpreter is physically defined in the highestframe of the process model (#PSF), since it expresses overallcommon knowledge.#PROGRAMI has a discourse model in order to acquireinformation provided relatively arbitrarily.
The current modeldepends on the kind of operations and the sequence in which theyare defined.
Usually, the most currently defined or referred tooperation gets first attention.\[Process of subgoaling\]The example of acquisition of the semantic structure in Figure6 begins with sending the message "TO-ACQUIRE *CHECKI" to#PROGRAMI.
On receiving the message, #PROGRAMIeventually instantiates the #CHECK operation, makes the instance(#CIIECKI) one of the processes, and then send it another message"TO-ACQUIRE *CHECKI" which specifies what semantic structureit must acquire (viz.
the structure under *CHECKI).The me~sage sent to #CHECKI then activates the ruleinterpreter defined in #PSF.
The interpreter finds *RULEI asappropriate, and executes the subgoaling methods specified as(INPUT $acquire) and so forth.
One of the methods (ISAC:INPUT)creates #FILE3, makes it INPUT of the current frame (#CHECKI),and asks it to acquire the remaining semantic structure (*FILEI).2.
In te rna l  Subgoa l ln~As explained before, some inputs lack the informationnecessary to complete the program model.
This information isconsidered to be in subgoals internal to the system andsupplemented by either defaults, demons (Roberts, 1977) orcomposite objects (Bobrow, 1981).
For example, the default is usedto supplement the sorting order unless tated otherwise xplicitly.Demons are used to build a record type automatically.
Theinput sentence seldom specifies the record types.
This is becauseoutput record type is automatically calculable from the input recordtype depending on the operation employed.
However, the programmodel needs explicit record type descriptions.
This is accomplishedby the demons defined under the OUTPUT slot in the operationframes.
For example, when a output file is created for the operation#CHECK in Figure 6, the sir-added emon (viz.
SAME-RECORD)is activated to find a record type for the output file.
As shown inFigure 1, this results in finding the same record type (#ACCOUNT-RECORD) for the output files (#FILEI, #FILE2) as that of theinput file (#FILE3).Specification of output files is implicit in many cases.
Forexample, the CHECK operation assumes that it creates a valid filewhich satisfies the constraints, and an invalid file which does not.As a natural way of implementation, composite objects areemployed, and the output files as well as the files' states are alsoinstantiated as a part of #CHECK's instantiation (Figure 1).3.
Discuss ionProgram specification acquisition is realized using the programmodel, which is a natural representation of the user's programintage.
This is accomplished through message passing, default usage,demon activation and composite objects instantiation.
Knowledgein an object in the model is localized and hence easy to update.Inheritance makes it possible to eliminate duplicate representation fthe same knowledge, and adding a new object is easy because of theknowledge localization.IV CONCLUSIONThis paper discussed the problems encountered whenimplementing a Japanese understanding subsystem in an interactiveprogramming system, KIPS, and proposed an "object-centered"approach.
The subsystem consists of sentence analysis andspecification acquisition, and the task domain of each is modeledusing dynamic objects.
The "obj~t-centered" approach is shown tobe useful for making the system flexible.
A prototype system is nowoperational on M-series machines and has successfully producedseveral dozens of programs from the Japanese specification.
Ournext research will be directed toward understanding Japanesesentences that contain other than the process pecifications.V ACKNOWLEDGEMENTSThe authors would like to express their thanks to TatsuyaHayashi, Manager of Software Laboratory, for providing astimulating place in which to work.
We would also like to thank Dr.Don Walker, Dr. Robert Amsler and Mr. Armar Archbold of SRIInternational, who have provided valuable help in preparing thispaper.VI REFERENCESBiermann,A.W.
; Ballard,B.W.
; Sigmou,A.H.
An Experimental Studyof Natural Language Programming.
Int.
J. Mun-MachineStudies, 1083, (18), 71-87.Bobrow,D.G; Stefik,M.
The LOOPS Manual.
Technical Report,Xerox PARC, 1981.
KB-VLSI-81-13.Fujitsu Ltd. Hyper COBOL Programming Manual V01.
, 1081.
\[inJapanese\].Heidorn,G.E.
Automatic Programming Through Natural LanguageDialogue: A Survey.
IBM J. Res.
~/ Develop., 1976, ?0(~),302-313.Marcus,M.P.
A Theory of Syntactic Recognition for NaturalL4nguage.
: MIT Press 1980.MeCune,B.P.
Building Program Model lncrementall~ fromInformal Descriptions.
PhD thesm, Stanford Univ., 1979.AIMo333.Roberts,R.B.
; Goldstcin,l.P.
The FRL Manual.
Technical Report,MIT, AI Lab., 1977. memo 409.Sugiyama,K.
; Yachida,M.
; Makinouchi,A.
A Tool for NaturalLanguage Analysis: TEC.
?5th Annual Convention,Information Processing Societal of Japan, 1982, , 1033-1034.\[in Japanese\].Sugiyama,K.
; Akiyama,K.
; Kameda,M.
; Makinouchi,A.
AnExperimental Interactive Natural Language ProgrammingSystem.
The Transactions of the Institute of Electronics andCommunication Engincerings of Japan, 1984, J67-D(3),297-304.
\[in Japanese, and is being translated into English byUSC Information Sciences Institute\].Ueda; Kanno; Honda.
Development of Japanese ProgrammingLanguage on Personal Computer.
Nikkci Computer, 1983,(34), 110-131.
\[in Japanese\].388
