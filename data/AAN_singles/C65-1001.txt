I1965 In ternat iona l  Conferenceon  Computat iona l  L ingu is t i csSOME QUEST IONS OFTHEORYlANGUAGES.
Abraham53, Uri u., Bu6apest I., HungaryComputing Centre of t~e Hungarian Academy of SciencesI ~ L: ~ ,",':: i~ ~: '~ IAbraham 2ABSTRACT.
It is shown that theassumpt ion  thatlanguage is non-finite involves the use of aconstructive logic which lea#s to some restrictionson language theory an~ to the fact that the onlypossible definition of language is that propose~by ~enerative grammars.
Generative grammars canbe formulate~ a~ normal /~ar~ov/ algorithms an~thu~ their study can be reduce~ to the stu#7 ofsuch algorithms of a special type.
A new typeof ~enerative grammar is ~efine~, called matrixgrammar.
It is shown that a language generatedby a context-restricted grammar can be alsogenerate~ by a matrix grammar.
Some propertiesof matrix grammars are shown to be ~eci~able.The problem of the explicative power of generativegrammars is ~iscusse~.I.
language metatheory, as indeed any metatheorT,must exactly specify the o~erations allowed inbuilding up the theory /of language/.
This may be~one by choosing the lo~ic of the tbeorT.If languageis consi~ere~ a non-finite set,a constructive logic/Kolmogorov/ must be choosen.
This entails somerestrictions on the notions an~ methods to be usedin language theory.
~amely, we can not speak ofactually infinite sets, au~ we can not use t~equantifiers "the~ exists" an~ "all".
Thus wecan not include in language theory the notionOf 'language' itself in the usual way, as the setof al~ /grammatically orsentences.
Similarly, we"distributional analysis"restrictinus./ , as it generally hassemantically/ correctcan not makeuse  of/at least without anythe form:Abraham 3/the sentence/ s I has the property %~I~ ' ifthere exists /a sentence/ s 2 with the propertyR 2 /not necessarily R 1 ~ R 2 /.It follows that the single way of ~efininglanguage is that proposed by generative grammars.These grammars are in fact devices that produce/generate/ the sentences of a language /an~ onlythose/, one after the other.
So, at every momentwe have generated a finite set of sentences,and a% the same, if the grammar is properlyconstructed, at evry moment we can generate asentence not yet generated before.
So, in factthe language /the set of all the sentences ofthe language/ is a potentially infinite setand the abovemeutione~ ~ifflculties do not arise.The restrictions to be respected within generativegrammars as to the /logically correct/ notionsan~ operations are precisely formu~ate~ /it maybe interesting to note that Chomsky ~oes notrespect all of them/.2.
Most of the properties /an~ possibly even t?emost important ones/ of generative grammars areobtaineg by constructing automata, equivalent toAbraham 4differentusing theshown thatstudy generative grammarsgenerative grammars, and in this wayresults of automata theory.
It isa more natural /an~ easy/ way tois to formulate themas normal /k,'arkov/ a lgor i thms \ [7 \ ] , \ [1 \ ] .
So, i fgiven a Phrase Structure Grammar G it can begiven a finite set of normal algorithms G = I~LIso that by applying the algorithms to the initialstrings ~.
:e obtain the language generated by G.The algorithms ~ have the properties:(i) each rule /of the algorithm/ rewrites at onceonly one symbol;(ii) by applying a rule to aof the strin~ is not ~iminished.string the lengthFor constructing G we must be able to compose thenormal algorithms so that these properties shouldbe ?reserved.
The composition rule given by Markovdoes not fulfil this condition.
So the followingcomposition rule is proved ane used:If ~Lvp ' ~Vp are two normal algorithms withthe properties (i) an~ (ii) then for every O g ~/the set of initial strings/ we haveAbraham 5where ~ is a normal algorithm with the scheme?
,,here {,~ek/p i \ [ ,~  are symbols put inone-to-one correspondence to the symbols from V V/an~ different from them and between them/; ~ isthe list of the rules of the al@orithm ~ withevery ~ changed to ~ .
Evidently Z has theproperties (i\] and "(ilJ ?It is shown that to a set of algorithms G = {C%~}a single algorithm ,~ corresponds if J~.
/the setof the initial strings/ is FroFerly enlarged, .sothat L(G) = ~%(Z)  , Thus the study of 2SG isreducible to t}~e study of normal algorithms ofthe type of for /the rewriting rules of which are,in fact, context-restrlcted rules/.
The sufficientanc~ necessary conditionsgenerating a non-f~ ~.it e~encrative grammars/.are estahlishe~ ~ forla:~gua\[e /by differentAbraSam 6It is shown that each singular/Choms~y/ can be formulate~ asof type Ot  .transformationan algorithmThe most  studied generative grammars are thecontext-free grammars /CFG/ and the context-restrictedgrammars /CRG/.
Some properties of these grammarsare considered to be uneeciaable.
In this respectthey are also ~ifferent.
The differences are formu-lated in Table I \[6\]:PropertyI.
is the languagegenerate~ by a~zrammar empty ?2.
is the lanEua~egenerated by agrammar infinite ?3.
fo r  any stringsi~ ~ can some\[string inclu~in~f!be ~erive~ fromin a ~rammar ?CFGDIu ID UD UAbraham 7where D inaicates that the property in questionis aeci~able, U that it is un~eci~able.The CF grammars have not the necessary generativepower to mo~el natural languages.
The CR grammarsmay have this power /altough this ~roblem has notbeen clearea up/ but the un~ecibality of the pro-perties I - 3 /especially, 3/ makes highly @oubt-ful their fitness for modeling natural languages.A new type of generative grammars is proposedunder the name of matrix grammars /MG/ \[2\].A matrix grammar is a quintupleG : (v ,  , F,whereis a context-free frammar an@~ F* is a finite' setof matrices /called matrix rules/ @eflne@~ as follows:(1) f*.
is a matrix rule if it has the 'form~ F (~z_i~_~) an~ not necessarily {~ ~{j  ;Abraham 8(2) f~where {*is a matrix rule if it has the form.
!ioa~e matrix rule~ or belon~ to F.To apply a matrix rule f* to a strin G x means toapply to x all t}~e context-free rules which formit, in the given order /to a?
?ly a CF rule to astrin~ means to replace the first occureuce ofits left-side with its r ight -s lde/ .
If at leastone of these context-free rules can not be appliedto x , we say that f can not.
be applied to x.It is shown that for any context-restr ictedgrammar G it is po.~sible to construct a /stroncly/equivalent matrix grammar.For instauce, t!
:e /not context-free/ languageI = { an bn cn }is geuerate~ by the matr ix grammaro= (v ,v~,  ~ , F )withV = \[S,X,Y,Z,a,b,c\]  ; %= ; Z={SJAbraham 9F:\[ S -~ abc\]IS--~ aXbYcZ\]X -~ a~Y - ,bYZ --~ cZ x a\]g- - *b7~ - - - .
cIt is shown that the properties 1,2,3 are ~eci~ablefor matrix g~ammars.
So the statement that theyare un~eci~able for the CE grammars is erroneous/the erroneousness of the ~roof of the un~eci~abilityof property 3 given in ~5\] can be easily shown/.So the fitness of these grammars for modelin~ natu-ral lan~iages is most likely.As we have mentione~, for each singular transfor-mation a normal algorithm can be constructe@ whichcontains an\]y context-restricted rules, r.ep, artingfrom this, it can be shown that for a transfor-mational grammar /containing only singular trans-formations, see \[4\] / a weakly equivalent matrix~rammar can be constructed.Abraham 1OThe matrix grammars can be formu2at~dalgorithm, too.as a norma~Since any normal /Mar~ov/ algorithm can hereversed, it is possible to devise a method forthe construction of a recognition grammarcorresponding to any given generative grammar.As the matrix grammar corresponding to a transfor-mational grammar Is, in general, only weaklyequivalent to the latter, and in automatic/natural/ language processing /and especially inmachine translation/ the adequate analysis isa crucial requirement, the to strong requirementof Choms~y to derive the structure of a generatedsentence from the ~r~y it is generated, is drorred,and t!~e matrix ~rammar is completed with adefinitional apparatus /rA/ that makes it possibleto assign to a generated sentence the same struc-ture /analysis/ as is assigmed by a transformatio-nal grammar /details see in ~3\] /.
By constructingthe recognition grammar correspondinggenerative grammar, the DA of thecrammar is taken over.to a givengenerativeAbraham II3.
Some examples are shown how the above considera-tions can he applie?
to automatic proces~'ing of na-tural lanfuages.BIBLIOGRAPHYIll Abraham, ~'J., ., Formal Stufy of Generative Gram-mars I, Computational Zin~uistics II,pp.5-18, 1964\[2\] Abraham, S., Some Questions of Phrase StructureGrammars I,/under press in Computational!inguistics IV/\[3\] Abraham,S., Some Questions of Language TheoryKiefer,F., /under press in Acta Hungarica/"\[4\] :3homsky,N., Cate?ories an?MIT Press, 1964Syntactic Theory,\[q\] Chomsky,~.,"~ Formal J rT~ operties of Grammars inHandbook of !~athematical Psychology,J.
?Jiley an@ Sons,Inc.
~ew York,NY,vol.2,Dp.323-418, 1963\[6\] ~andweber,2.S., Decision Problems of PhraseStructure Grammars, IEE Trans.,vol.EC-13,Fp.354-362, 1964\[7\] Markov,A.A., Teorija algorifmov, Trudy Mat.
Inst.AN SSSR, Xoscow, 1954
