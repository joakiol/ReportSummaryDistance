NEW FRONTIERS BEYOND CONTEXT-FREENESS:DI-GRAMMARS AND DI-AUTOMATA.Peter StaudacherInstitut for Allgemeine und IndogermanischeSprachwissenschaftUniversitat RegensburgPostfach 3978400 Regensburg 1GermanyAbstractA new class of formal languages will be definedthe Distributed Index Languages (DI-lan-guages).
The grammar-formalism generating thenew class - the DI-grammars - cover unbounddependencies in a rather natural way.
The placeof DI-languages in the Chomsky-hierarchy willbe determined: Like Aho's indexed Languages,DI-languages represent a proper subclass ofType 1 (contextsensitive languages) and prop-erly include Type 2 (context-free languages), butthe DI-class is neither a subclass nor a super-class of Aho's indexed class.
It will be shownthat, apart from DI-grammars, DI-languages canequivalently be characterized by a special type ofautomata - DI-automata.
Finally, the time com-plexity of the recognition-problem for an inter-esting subclass of DI-Grammars will approxi-mately be determined.I IntroductionIt is common practice to parse nested Wh-dependen-cies, like the classical example of Rizzi (1982) in (1),(1) Tuo fratello, \[a cui\]l mi domando \[che storie\]2abbiano raccontato t 2 t 1, era molto preoccupato(Your Brother, \[to whom\] 1 I wonder \[which sto-ries\] 2 they told t 2 t 1 was very troubled)using a stack mechanism.
Under the binary branchinghypothesis the relevant structure of (1) augmented bywh-stacks is as follows:(2)\[a cui\] 1 mi dornandoLpush ---tit 11--~ i--push ---~\[t2,tll--- 1\[che storie\]2abbiano V2\[t2,tl\]/ \vlIt21 PPItll/ \V~I\] NP.It2I popIP?P \]raccontato t 2 t 1Up to now it is unclear, how far beyond context-freeness the generative power of a Type 2 grammarformalism is being extended if such a stack mechanismis grafted on it (assuming, of course, that an upperbound for the size of the stack can not be motivated).Fernando Pereira's concept of Extraposition Gram-mar (XG), introduced in his influential paper (Pereira,1981; 1983; cf.
Stabler, 1987) in order to delimit thenew territory, can be shown to be inadequate for thispurpose, since it is provable that the class of languagesgenerable by XGs coincides with Type 0 (i,e.
XGs havethe power of Turing machines), whereas the increase ofpower by the stack mechanism is not even enough togenerate all Type 1 languages (see below).In (2) an additional point is illustrated:the stack \[t2,tl\] belonging to V 2 has to be divided intothe substacks \[t2\] and \[tl\], which are then inherited bythe daughters V l and PP.
For the PP-index tlis not dis-charged from the top of the V2-stack \[t2,tl\].
Generaliz-ing to stacks of unlimited size, the partition of a stackamong the inheriting subconstituents K 1 and K 2 of aconstituent K 0 is as in (3)(3) K0 It 1,...,tj,tj+l,...,tk\]/ \Klltl,...,tjl K2ltj+l,...,tkl358If the generalization i  (3) is tenable, the extension ofcontext-free grmnmars (Vijay-Shanker and Weir, 1991,call the resulting formalism "linear indexed granunar"(LIG)) discussed by Gazdar in (Gazdar, 1988), inwhich stacks are exclusively passed over to a singledaughter (as in (3.1)), is too weak.
(3.1) a)K0\[tl,..,,tk\] b) KoItl,....,tk\]/ \ / \Kl\[tl,...,t k\] K 2 K1 K2\[tl,...,tk\]Stack-transmission by distribution, however, as in (3)suggests the definition of a new class of grammarsproperly containing the context-free class.2 Dl=Grammars and DI- languagesA DI-grammar is a 5-tupel G = (N,T,F,P,S), whereN,T,S are as usual, F is a alphabet of indices, P is a setof rules of the following form1) (a) A --> o~ (b)A-->aBf~ (c)Af->o~,(A, BeN; o~, Be(N~T)*;feF)The relation "= >" or "directly derives" is defined asfollows:2)o~ => 1)if either i)= 5A/ndex ?, 8,y e (NF*uT)*, indexeF*, AeN,A --) BIB2...B n is a rule of form 1)(a)8 = 8BlindexlB2index2...BnindexnTor ii)o~ = 8A/ndex y, 8,T e (NF*wT)*, index eF*, AeN,A --) B 1..Bkf.. B n is a rule of form 1)(b), fEFB = 5Blindexl...Bkfindexk...Bnindexn7or iii)ct = 8Afindex y ,8 ,?
e (NF*vT)*, index eF*, AeN,Af --* B1B2...B n is a rule of form 1)(c), feFB = 8BlindexlB2index2...Bnindexny(*) and index = indexlindex2...index n,and for B i e T: index i = ~ O.e.
the empty word)(o~a)The reflexive and transitive closure *=> of => is de-fined as usual.Replacing (*) by"mdex i = index for Bie N, index i =for B i e T", changes the above definition into a defini-tion of Aho's well known indexed grammars.
How in-dex-percolation differs in indexed and Di-grammars iillustrated in (4).
(4) Index-Percolation(i) in (ii) inAho 's Indexed-Grammars Dl-GrammarsMf  l f  2f 3f4 Mf  l f  2f 3f4/ \ / \Lflf2f3f4 Rflf2f3f4 L f l f2 Rf3f4i.e:index multiplication vs. index distributionThe region in the Chomsky hierarchy occupied by theclass of DI-languages i indicated in (5)(5)Ty~,-o.
I2JAho 's  IndexedLanguagesType-l.L4.UType-2?ontexffxee.
I3DI-Languagmwhere(5.1) L 1 = {anbncn; n_>_> 1 }(5.2) L 2 = {a k, k = 2 n, 0 < n}(5.3) L 3 = {WlW2...WnZlWn...ZnWlZn+lm(wn)m(Wn.
1)...m(w2)m(wl); n.~l & wie{a,b} + (1.~i~n) &ZlZ2...ZnZn+ 1 e D 1 }m(y) is the mirror image of y and D 1 is theDyck language generated by the followingCFG G k (DI=L(Gk)), G k = ({S},{\[,I},R k, S),where R k = {S -~ \[S\], S ~ SS, S -~ ~}(5.4) L 4 = {ak; k = n n, n.~>l}; (L 4 is not an indexedlanguage, s.Takeshi Hayashi (1973)).By definition (see above), the intersection of the classof indexed languages and the class of DI-languages in-cludes the context-free ( rr) languages.
The inclusion isproper, since the (non-cfr) language L 1 is generated byG 1 = ({S,A,B}, {a,b,c}, {f,g}, R 1, S), where R 1 = {S-+ aAfc, A --, aAgc, A --, B, Bg --, bB, Bf -+ b}, andG 1 obviously is both a DI-gratmnax and and an indexedgrammar,-Like cfr.
languages and unlike indexed languages,DI-languages have the constant growth property (i.e.for every DI-grammar G there exists a keN, s.th.
forevery weL(G), s.th.
\[wl>k, there exists a sequence w1359(--w), w2,w3,...(wi?L(G)) , such that Iwnl < IWn+ll <(n+l)xlwl for every member w n of the sequence).
HenceL2, and afortiori L4, is not a DI-language.
But L2 is anindexed language, since it is generated by the indexedgrammar G 2 =({S,A,D}, {a}, {f,g}, R 2, S), where R 2= {S --~Ag, A ---> Af, A ---> D, Df--~ DD, Dg --~ a}.L 3 is a DI-language, since it is generated by the DI-grammar G3 -- ({S,M,Z},{a,b,\[,\]},{f,g},R3,S) whereR3 = { S ~ aSfa, M ~ \[M\], Zf  ~ Za, Zg ~ Zb,S---~bSgb, M---~MM, Zf --~ a, Zg --~ bS ---> M, M--~ Z }e.g, abb\[b\[ab\]\]bba ( ?
L3) is derived as follows:S ~ aSfa ~ abSg/ba ~ abbSgg/bba ~ abbMgg/bbaabb\[Mgg\]\]bba = bb\[MgMg/\]bba (here the index "ggf'has been distributed) ~ abb\[ZgMgl\]bbaabb\[bMg/\]bba ~ abb\[b\[Mg/\]\]bba ~ abb\[b\[Zg/\]\]bbaabblb\[Zfo\]\]bba ~ abblb\[ab\]\]bba.2.1 DI-Grammars and Indexed GrammarsConsidering the well known generative strength of in-dexed grammars, it is by no means obvious that L 3 isnot an indexed language.
In view of the complexity ofthe proof that L3 is not indexed, only some importantpoints can be indicated - referring to the 3 main partsof every word x ?
L 3 by Xl, \[Xm\],Xr,aS illustrated in theexample (6):(6 )ab abb abbb abbbb\[\[abbbb\[\[abbb\]abb\]\]ab\]bbbbabbbabbabaLWIJ I.-W2J l.~3J L.w4.--I L-~4--I I.~,3.--I LW2J l-wIJ' x 1,- J, \[ Xm\]  i i X r  i= xAssume that there is a indexed grammar GI=(N,T,F,P,S) such that L3=L(GI):1.
Since G I can not be contextfree, it follows from theintercalation (or "pumping") lemma for indexed gram-mars proved by Takeshi Hayashi n (Hayashi, 1973)that there exists for G I an integer k such that for any x?
L 3 such that Ixl>k a derivation can be found with thefollowing properties:S =*=> zAfr/z'=*=> ZSlAf/.tfr/s I "z"=*=> zslrlAf#frirl'Sl'Z'=*=>zslrlBf#frlrl'Sl" z,=*=> zslrtlBfr/t l 'r 's 1 'z" =*=> x,(zz', r lr 1"?
T*, Sltlt l 's 1" ?
T +, f ?
F, ~t, rI ?
F*)By intercalating subderivations which can effectivelybe constructed this derivation can be extended as fol-lowsS =* => zAfqz'=*=>zs 1Af# fqs 1 "z"=*=> zs 1...snA0C#')nfr}sn...s 1 "z"=*=> zs l...SnrnB(f# 3nfqrn'Sn... s 1'z"=*=> ZSl...Snrntn...tlBfr/t l'...tn'rn'sn'.., s 1'z'=*=> ZSl...Snrntn...tlwt 1 "...tn'rn'Sn'... s 1"z"The interdependently extendible parts of x Sl...s n,tn...t 1, t l'...tn', rnrn', and Sn'... s 1", can not all be sub-words of the central component \[Xm\] of x (or all besubwords of the peripheral components XlXr), else,\[Xm\] (or XlXr) could be increased and decreased inde-pendently of the peripheral components x 1 and x r (or of\[Xm\], respectively) of x ,  contradicting the assumptionthat x ?
L 3.
Rather, the structure of x necessitates that.Sl...s n and Sn'...s 1' be subwords of XlX r and that the"pumped" index (f# 3 n be discharged eriving the cen-tral component \[Xm\].
Thus, we know that for every/>0there exists an index IX ?
F +, a x ?
L3, and a subword\[Xm" \]of the central part \[Xm\] of x such that \[Xm'\]>land M~t=*=>\[Xm" \] (M=B or the nonterminal of a de-scendant of A(f# 3nfo).
To simplify our exposition wewrite Ix m'\] instead of \[Xm\] and have(7) MIx =*=> \[Xm\]with the structure of x I and x r being encoded and storedin the index IX.2.
The balanced parentheses of \[Xm\] can not be en-coded in the index Ix in (7) in such a manner that \[Xm\]is a homomorphic image of Ix.
For the set I={Ix';S=*=>XlMIx'x r =*=>Xl\[Xm\]X r ?L  3 } of all indices whichsatisfy (7) is regular (or of Type 3), but because of theDyek-strueture of \[Xm\] , LM={\[Xm\];Xl\[Xm\]Xr?L3} isnot regular but essentially context-free orof Type 2.3.
In the derivation underlying (7) essential use ofbranching rules of the type A--~B1B2...B k (k_>.2) has tobe made in the sense that the effect of the rules can notbe simulated by linear rules.
Else the central part \[Xm\]could only have linear and not trans-linear Dyck-struc-ture.
Without branching rules the required trans-linearparenthetical structure could only be generated by theuse of additional index-introducing rules in (7), in or-der to "store" and coordinate parentheses, which, how-ever, would destroy the dependence of \[x m\] from x I andx r ?4.For every n_>_> 1,L 3 contains words w of the form(8)Wl..WkIIl..lIllwkllWk.lllllwk.211wk_alll..llll..lllm(wk)..m(w 1)t-.n+l~ t-.n+l--a360where k=2 n, wie {a,b} + for l<i_<2n; m(w i) is the mirrorimage of wfi.e the central part \[Xm\] of such a word contains2n+l' l  pairs of parentheses, asshown in (9) for n=3:(9) \[\[\[\[wsl\[w7l\]\[\[w6l\[w5lll\[\[\[w4l\[w3ll\[\[w2\]\[Wl\]\]\]\]According to our assumption, G I generates all wordshaving the form (8).
Referring to the derivation in (7),consider a path from MIx to any of the parenthesizedparts w i of \[Xm\] in (8).
(Ignoring for expositional pur-poses the possibility of "storing" (a constant amount of)parentheses in nonterminal nodes,) because of 2. and 3.an injective mapping can be defined from the set ofpairs of parentheses containing at least two other (andbecause of the structure of (8) disjunct) pairs of paren-theses into the set of branching nodes with (at least)two nonterminal daughters.
Call a node in the range ofthe mapping a P-Node.
Assuming without loss of gen-erality that each node has at most two nonterminaldaughters, there are 2n-1 such P-nodes in the subtreerooted in MIx and yielding the parenthesized part \[Xm\]of (8).
Furthermore, every path from MIx to the root W iof the subtree yielding \[wi\] contains exactly n P-nodes (where 2n=-k in (8)).Call an index-symbol f inside the index-stack ixa w i-index if f is discharged into a terminal constituting aparenthesized w i in (8) (or equivalently, if f encodes asymbol of the peripheral Xl..Xr).Let ft be the first (or leflmos0 wi-index from above inthe index-stack Ix, and let w t be the subword of \[Xm\]containing the terminal into which ft is discharged, i.eall other wi-indices in Ix are only accessible after ft hasbeen consumed.
Thus, for Ix=alto we get from (7)Mafto-=+=>uBt \[v.t f o\]v=+=>utWt \[~fto\]vt andWt\[ffto\]ffi+=>wtThe path Pt from Mix to w t contains n B-nodes, fork=2 n in (8).
For every B-node Bj (0_<j<n) of Pt we ob-tain because of the index-multiplication effected by no-terminal branching:Bjt jft J= > Ljt jgtolRjt ft \] andLj \[xjfta\] =* = >uj+ 1Bj+ l\[%j+lfto\]vj + 1(Bj,Bj + 1,Lj,Rj ~ N, xj,xj+ 1,(IeF*,ft EF,u j + 1,vj + I e {a,b,\[,\]}*)Every path Pj branching off from Pt at Bj\[xjfto \] leadsto a word wj derived exclusively by discharging wi-in-dices situated in Ix below (or on the right side of) ft.Consequently, ft has to be deleted on every such pathPj, before the appropriate indices become accessible,i.e.
we get for every j with 0< j<n:ajE'jft"\] = >ujRjt j t,,Jyj =* = > yjqtfto\] ,(Bj,Rj,Cj eN,xj,o F*,ftThus, for n>lN\[ in (8) (INI the cardinality of the non-terminal alphabet N of G I, ignoring, as before the con-stant amount of parenthesis-storing in nonterminals)because of \[{Cj;0<j<n}l=n the node-label Cj\[fto \]occurstwice on two different paths branching off from Pt, i.e.there exist p, q (0_<p<q<n) such that:Mnftcr = + = > UpRp\[xpftO\]vqRq\[Xq fto\]y and= = > ypC\[fto\]z p = + = > ypZZp Rp\[xpfto \] *Rq\[zqftO \] = * = > yqC\[fto\]_Zo = + = > yqZZq, .
(/a=xf~, ao,xa,oeF ,ft~F; M,Ru,Ra,C~r~;t .
1 , * ~Up,Vq,y,yq,yp,Zp,Zq,Z~T ) +where z~{ZlWl...ZrWrZr+l; wi~{a,b} & Zl...Zr+l~D 1(= the Dyck-language from (5.3)}.I.e.
G I generates words w" =Xl"\[Xm"\]Xr", the centralpart of which contain a duplication (of "z" in\[Xm"\]=ylzY2zy 3) without correspondence in Xl" or Xr",thus contradicting the general form of words of L 3.Hence L 3 is not indexed.2.2 DI-Grammars and Linear Indexed Grammars IAs already mentioned above, Gazdar in (Gazdar, 1988)introduced and discussed a grammar formalism, after-wards (e.g.
in (Weir and Joshi, 1988)) called linear in-dexed granunars (LIG's), using index stacks in whichonly one nonterminai on the right-hand-side of a rulecan inherit the stack from the left-hand-side, i.e.
therules of a LIG G=(N,T, F, P, S) with N,F,T,S as above,are of the Formi.
A\[..\] ~A1U...Ai\[..\]..~I nii.
A\[..\] -~AI\[\]...Ai\[f..\]...A niii.
A \[f..\]-~A 1 \[\]...Ai\[..\]...Aniv.
All ~awhereA 1,...,AneN, feF, and aeT~{e}.
The "derives"-relation => is defined as followso(A \[fl.. fn\] ~=>o~ i H...A \[fl.. fn\]..-~n\[\] ~if A\[..\] -~A l\[\]...Ai\[..\]..,4n~PIThanks to the anonymous referees for suggestions for thissection and the next one.361cxA \[/'1 ..fn\] 13=>~-//1 \[\]...A \[ffl.. fn\]...A n\[\] 13ff A\[..\] ---)A l\[\]..Ai\[f..\]...AneP~4 \[ffl.. fn\]13=>aA 1 \[1..-/1 Ill.. fn\].. ~ln\[\]13ff A\[f..\] -+A l\[\]...Ai\[..\]...AnePc~,4 \[\]13=>~al3if A\[\] --+aeP=*---> is the reflexive and transitive closure of =>, andL(G)={w; weT* & S\[\]=*=>w}.Gazdar has shown that LIGs are a (proper) subclass ofindexed grammars.
Joshi, Vijay-Shanker, and Weir(Joshi, Vijay?Shanker, and Weir, 1989; Weir and Joshi,1988) have shown that LIGs, Combinatory CategorialGrammars (CCG), Tree Adjoinig Grammars (TAGs),and Head Grammars (HGs) are weakly equivalent.Thus, ff an inclusion relation can be shown to hold be-tween DI-languages (DIL) and LILs, it simultaneouslyholds between the DIL-class and all members of thefamily.To simulate the restriction on stack transmission i aLIG GI=(N1,T , FI, P1, S1) the following construction ofa DI-grammar Gd suggests itself:Let G d =(N, T, F, P, S) where N-{S}={X'; XeN1},F={f'; fEF1}~{#}, and P={S--+SI'#}u{A'--~A l'#...Ai'...An'#; A\[..\] ---~A 1 \[\]..Ai\[..\]...An~PI}~{A'-+A 1"#...Ai'f'... An'#;A \[..\] ---~A 1 \[\].-Ai\[f..\].-An~P1}u{A' f '~A I'#...Ai'...An'#;A\[f..\]-~A l\[\].-Ai\[..\]'tlnePl}~{A'#---~a; A\[\] --~a~Pl}It follows by induction on the number of derivationsteps that for X'eN, X~NI, tt'~F*, tt~Fi*, and w ~T*(10) X'tt'#=*o=>w if and only if X\[~t\]=*Gl=>wwhere X'=h(X) and ~t'=h(10 (h is the homomorphismfrom (NIwFI)* into (NuF)* with h(Z)=Z').
For thenontrivial part of the induction, note that A'#~t" can notbe terminated in G.Together with S=>S 1"# (I0) yields L(GI)=L(G ).The inclusion of the LIG-class in the DI-class isproper, since L 3 above is not a LIG-language, or togive a more simple example:Lw= {analnla2nlbln2b2n2b  \[ n = nl + n2} is accord-ing to (Vijay-Shanker, Weir and Joshi, 1987) not inTAL, hence not in LIL.
But (the indexed langauge) L wis generated by the DI-GrammarGw=({ S,A,B },{a,b,al,a2,b 1,b2 },{ S--~aSIb, S--~AB,Af---~a 1Aa2,Bf--~b 1Bb2,Af--+ala2,Bf-+b lb2,A-+e,B"+e},S).2.3 Generalized Composition and CombinatoryCategorial GrammarsThe relation of DI-granunars to Steedman's Combina-tory Categorial Grammars with Generalized Composi-tion (GC-CCG for short) in the sense of (Weir andJoshi, 1988) is not so easy to determine.
If for each n~_>lcomposition rules of the form(x/y) (...(Yllzll)12....Inzn)--, (...(XllZll)12....Inzn) and(...(YllZll)12....Inzn) (x\y)~ (...(XllZll)12....Inzn)are permitted, the generative power of the resultinggrammars is known to be stronger than TAGs (Weirand Joshi, 1988).Now, the GC-CCG given byf(~)={#} f(al)={SDU#, SDG#, #/X/#,#/X~#}f(a)={A,XkA} fCol)={S/Y/#, S/Y~#, #/YI#,#/~#}f(b)={B, YxB} f(D ={K} f(\])={#/#kK, ~#~Z}generates a language Lc, which when intersected withthe regular set{ a,b}+{ \[,\],a 1,b 1 }+{a,b} +yields a language Lp which is for similar reasons as L 3not even an indexed language.
But Lp does not seem tobe a DI-language ither.
Hence, since indexed lan-guages and DI-languages are closed under intersectionwith regular sets., L c is neither an indexed nor (so itappears) a DI-language.The problem of a comparison of DI-grammars andGC-CCGs is that, inspite of all appearances, the com-bination of generalized forward and backward com-position can not directly simulate nor be simulated byindex-distribution, atleast so it seems.3 DI-AutomataAn alternative method of characterizing DI-languagesis by means of DI-automata defined below.Dl-automata (dia) have a remote resemblance toAho's nested stack automata (nsa).
They can best beviewed as push down automata (pda) with additional po-wer: they can not only read and write on top of theirpush down store, but also travel down the stack and(recursively) create new embedded substacks (which canbe left only after deletion), dia's and nsa's differ in thefollowing respects:1. a dia is only allowed to begin to travel down thestack or enter the stack reading mode, if a tape,symbolA on top of the stack has been deleted and stored in aspecial stack-reading-state qA, and the stack-readingmode has to be terminated as soon as the first index-symbol f from above is being scanned, in which casethe index-symbol concerned is deleted and an embed-ded stack is created, provided the transition-functiongives permission.
Thus, every occurrence of an index-symbol on the stack can only be "consumed" once, and362only in combination with a "matching" non-index-sym-bol.A nsa, on the other hand, embeds new stacks behindtape symbols which are preserved and can, thus, beused for further stack-embeddings.
This provides forpart of the stack multiplication effect.2.
Moving through the stack in the stack reading mode,a dia is not allowed to pass or skip an index symbol.Moreover, no scanning of the input or change of state ispermitted in this mode.A nsa, however, is allowed both to scan its input andchange its state in the stack reading mode, which, to-gether with the license to pass tape symbols repeatedly,provides for another part of the stack multiplication ef-fect.3.
Unlike a nsa, a dia needs two tape alphabets, sinceonly "index symbols" can be replaced by new stacks,moreover it requires two sets of states in order to di-stinguish the pushdown mode from the stack readingmode.Formally, a di-automaton is a 10-tuple D ={q, Q17 T,F,Z~,z~s,?,#),where q is the control state for the pushdown mode,QI-={qA; A e,/"} a finite set of stack reading states,T a finite set of input symbols,/ 'a  finite set of storage symbols,I a finite set of index symbols where Ir-d"=~,ZoeFis the initial storage symbol,$ is the top-of-stack marker on the storage tape,?
is the bottom-of embedded stack marker on thestorage tape,# marks the bottom of the storage tape,where $,?,# f~F~ T~I,Dir = {-1,0,1} (for "1 step upwards","stay","l stepdownwards", respectivly,E = {0,1} ("halt input tape", "shift input tape", respec-tively),T'= Tu  {#}, l '=  Fu  {?
},d~is a mapping1) in the push down mode:from {q} x T' x SFinto finite subsets of{q} x O x $1"((FuI) *)2) in the stack reading mode: for everyA ~/"(a)from {qA} x 7" x 1-" into subsets of {qA} x {0} x {1}(for walking down the stack)(b)from {q} xT' x $(A} into subsets of (qA} x (0} x {1}(for initiating the stack reading mode)(c) from {q} x T' x {,4} into subsets of {q} x {0} x (-1}(for climbing up the stack)3) in the stack creation mode:from QFx T' x I into finite subsets of{q} x {0} x $F((l"u1) *)?, and from QFx T' x $1 intofinite subsets of {q} x {0} x $$F((F~l)*)?
(for re-placing index symbols by new stacks, preserving thetop-of-stack marker $)4) in the stack destruction mode:from {q} x T' x {$?}
into subsets of {q} x {0}.As in the case of Aho's nested stack automaton a confi-guration of a DI-automaton D is a quadruple(P,al....an#,i,X1...AXj...Xm),where1.
p e {q}UQF is the current state of D;2. al...a n is the input string, # the input endmarker;3. i (l<i<n+l) the position of the symbol on the inputtape currently being scanned by the input head (=ai);4. x1...^Xi...x m the content of the storage tape wherefor m>l XI=$A, AeF, Xm=#, X2...Xm.
1 e (F~Iw{$,?
})*; Xj is the stack symbol currrently being readby the storage tape head.
If m=l, then Xm--$#.As usual, a relation I'D representing a move by the au-tomaton is defined over the set of configurations:(i)(q, al...an#,i,oc$^AYI3)~)(q, al...an#,i+d,oc$^Z1...ZkYI3),if (q,d,$Z1...Zk) ES(q, ai,$A ).
(ii)(P,al...an#,i,X1...^Xj...Xm)I'D(qA, al...an#,i,X1..Xi^Xj+l...Xm),if, (qA, O, 1) eS(P, ai,Xj) , where either Xj=$A and p=q, orXj*SA (Aer) and P=qA;(iii)(q, al...an#,i,Xl...^ Xj...Xm) ~D(q,al...an#,i,Xl...Xj_lO$^Al ...AkCXj+ l...Xm),if (q,0,$Al...Ak?
)eS(q, ai,Xj), where XjeI and O=e, orXj=SF (FeI) and 0=$;(iv)(q,al".an#,i,Xl.--Xj-l$^ ?Xj+l...Xm) I'D(q,al...an#,i,X l...^ Xj.IXj+l...Xm),if (q,0) eS(q, ai,$^?
).I'D* is the reflexive and transitive closure of ~'D.. N(D)or the language accepted by empty stack by D is definedas followsN(D)={w; weT* & (q,w#,l,$^Z0 #)I'D* (q,w#,lwl+l,$ ^#)To illustrate, the DI-automaton DI 3 accepting L3 byempty stack is specified:DI 3 = (q (state for pda-mode), (QF =) {q~qM, qz, q$}(states for stack reading mode),('/'=) {a,b,\[,\]} (---inputalphabet), (G=){S,M,Z,a,b,\[,\],} (--tape symbols for Ixta-mode),(l=){f,g} (--tape symbols representing indices),5,S,S,?,#)where for every x e T:8(q,x,$S) = {(q, O, SaSfa), (q, O,$bSgb), (q, O, CM),),(for the G3-ndes: S --~ aSfa, S ~bSgb, S ~ M)8(q,x,$M) = ((q, O,S\[MJ), (q, O, SMM), (q, O, SZ),},363(for: M-+\[M\], M-+MM, M---~Z)8(q,x,$x) = {(q,1,$)}(i.e.
: if input symbol x = "predicted" terminal symbolx, then shift input-tape one step ("1") and delete suc-cessful prediction" (replace Sx by $))8(q,x,$Z) contains {(qz, 0,$)},(i.e.
: change into stack reading mode in order to findindices belonging to the nonterminal Z)5(qz, x,$Y ) = 5(qz, x,Y ) contain {(qz, O,1)} (for every xT, Y ~/ )(i.e.seek first index-symbol belonging to Z inside thestack)5(qz, x, $J9 = {(qz, o, $$Za?
), (qz, O, $$a?
)),5(qz, x, Sg) = {(qz, O, SSZb?
),(qz, 0,$$b?
)},5(qz, xJ) = {(q,x, $Za?
), (q,x, SAC)},5(qz, x,g) = {(q,x, SZb?
), (q,x, Sb?)},(i.e.
simulate the index-rules Zf~Za, Zf~a bycreation of embedded stacks)5(q,x,S?)
= {(q, O)},(i.e.
delete mpty sub-stack)8(q,x,Y) = {(q,O,-1)} (forx ~ T, Y ~ G-~g})(i.e.
move to top of (sub-)stack).The following theorem expresses the equivalence of DI-grammars and DI-automata(11) DI-THEOREM: L is a Dl-language (i.e.
Lis generated by a Dl-grammar) if  and only if  Lis accepted by a Dl-automaton.Proof sketch:I.
"only irk(to facilitate a comparison this part followsclosely Aho's corresponding proof for indexed gram-mars and nsa's (theorem 5.1) in (Aho, 1969))If L is a DI-language, then there exists a DI-grammarG=(N,T,F,P,S) with L(G)=L.
For every DI-grammar anequivalent DI-grammar in a normal form can be con-structed in which each rule has the form A---~BC, A-~a,A---~Bf or Af---~B, with A?N; B,C?
(N-{S}), a?T, f~F;and e ?
L(G), only if S---~e is in P. (The proof is com-pletely analogous to the corresponding one for indexedgrammars in (Aho, 1968) and is therefore omitted).Thus, we can assume without loss of generality that Gis in normal form.A DI-automaton D such that N(D)=L(G) is constructedas follows:Let D=(q, Q17T, IS, l,d,,Z~$,?,#), with T=N~T~{$,?,#},QI~{qA;Ae2-~, I=F, Zo=S where ~ is constructed inthe following manner for all a?T:.
(q,O,$BC)?e~(q,a,$A), ifA---~BC e P,(q,O,$b) ?
~(q,a,$A), ifA-+b ?
P,.3.4.5..7.8.
(q,O,$BJ) ~ ~(q,a,$A), ifA--~Bf e P(q,1,$) ~ 8(q,a, Sa)(qA, O,$) ?
d(q,a,$A) for all A ?
F,(qA, O,1) ?
8(qA, a,B ) for all A ?
F and all B?F,i.(q,O,$B?)
?
8(qA,a,J) andii.(q,O,$$B?)
?
8(qA, a,$J) for all A ?
F withAf-+B ?
P,(q,O) ?
d(q,a,$?
)(q,O,-1) e 8(q,a,B) for all B ?
F~{?
}(q,O,$) e 8(q,#,$S) ffand only ff S~ s is in P.LEMMA 1.1If(i) Afl...fk =n=> al...a mis a valid leflmost derivation in G with 1~0, n~>l andAeN, then for n,~.l, Zl31...l~ke(N~{?
})*, o~(N~{$,?})
,~t~(N~F~{?})
:(ii) (q, al...am#, 1,o~$^AZI5 lfl...lSkfklt#)\[-D*(q, al...am#,m+l,o~$^Z151...15k~t#).Proof by induction on n (i.e.
the number of derivationsteps):If n=l, then (i) is of the form A=>a where acT andk=0, since only a rule of the form A--+a can be appliedbecause of the normal form of G and since inDI-grammars (unlike in indexed grammars) unconsu-med indices can not be swallowed up by terminals.
Be-cause of the construction of5, (ii) is of the form(q,a#, 1,~$^AZ~ 1...\[3k~t#) = (q,a#, 1,~$^AZlx#)\[-D(q,a#, 1,ot$AaZ~t#)\[-D(q,a#,2,ot$^ZIx#)=(q,a#,2,?t$^ZI 31...13k~t#)Suppose Lemma 1.1 is true for all n<n' with n'> 1.A lethnost derivation Afl...f k =n'=> al...a m can havethe following three forms according as A is expandedin the first step:1)Afl .
.
.~+ 1...fk =>Bfl.
:.~Cfi+ 1...fk =tll=>al...aiC~+l..-fk=n2=>al...aiai+l...a mwith nl<n' and n2<n"2)Afl...fk-~Bffl...fk=nl=>a i ... m with n l<n'.3)Afl...fk--+Bf2...fk =nl=>al...amwith nl<n' and (Afl-+B)eP.From the inductive hypothesis and from 1.-8. above, itfollows1')(q, al...am#,l,o~S^AZI31fl...13j~13j+l~+l...13kfk~t#)I'D(q, al ...am#, 1,?~$^BCZI3 lf l "''lSjl~13j+ 17+ l'"lSkfk} x#)~D*(q,a 1..am#,i+ 1,ot$^CZI5 l132...13jlSj+ l~+l...13kfk~ t# )I-D*(q, al...am#,m+l,~$^ZI31...13jl~j+ 1...13klX #)3642')(q,a 1...am#, 1 <z$^AZI 3 lfl...Okfklt#)I'D (q, al...am#, 1,c~$^BfZ~ lfl... ~kfk~t#)I'D* (q, al...am#,m+l,~$^ZOl.-.~kl t#)3 ')(q,a 1...am#, I,aS^AZI~ lfl... OkfkU#)I'D (qA,al...am#, 1,~$^ZO lfl...Okfklt#)I'D* (qA, al...am#,l,~$Zl31^fl...~kfkg #)I'D (q,al...am#, 1,~$Z~ 1 $^B?
~2f2...13kfkll#)I'D* (q,al...am#,m+l,~$Z~l$^?~2...\[~kl t#)~D (q, al...am#,m+l,c~$Z~^X\[}2...\[~k) t#)~D* (q,al...am#,m+ 1,o~$^Z~X~2..-~kU#)where oX=~ 1.LEMMA 1.2If for Z~l...~ke,(N~{?
})* , ~x~(N~{$,?
})*, andm_~>l, lt~(NuF~{?
})"(q,al...am#,l,o~S^AZI3 lfl...13kfkll# )}'D* (q,al...am#,m+ 1,?~$^Z~ 1...13kl~#)then for all ~1Af 1 .
..fk=*=>al ...a m .The proof (by induction on n) is similar to the proof ofLcmma 1.1 and is, therefore, omitted.II.
("iP)If L is accepted by a DI-automaton D=(q, QFZFd,L,Z6$,?,#), then we can assume without loss of gen-eralitya) that D writes at most two symbols on a stack in ei-filer the push down mode or the stack creation mode (itfollows from the Di-automaton definition that the firstone of the two symbols cannot be a index symbol fromI),b) that T and F are disjunct.A DI-grammar G with L(G)=N(D)=L can be con-structed as follows:Let G=tN,F,T,P,S) with N=F, F=I, S=Z 0.
P containsfor all aeT, A,B,CeN, and feF the productions(da=a, if d=1, else da=6 )I.
A--+daBC , if2.
A-+daBf , if3.
A->daB , if4.
A=-)da, if5.
Af-)BC, if6.
Af--,B, if(q,d,$BC)eigq, a,$A),(q.a.$BsO e#(q.a.$A),(q,d,$B) eS(q,a,$A),(q, a, $) e ,~q, a, $A) ,(q, O, $ B C ?)
e 6(qA, a,J) or(q, O,$$BC?)
e d(qA,a,$./)(q, O, $ B ?)
~ d(qA,a,j9 or(q, O,$$B?)
~ d(qA, a,$f)For all n~.l, m~l, \]31...13ke(NuJ{?
})* , ?ze(N~{$,?
})*, * *fl,f2,....,fk~F, AeN, lie(NuFv{?})
, and al...am~TII.1 and II.2 is true:II.
1: If (q,a 1...am#, 1 ~$^A\[3 lfl... ~kfkl~#)I'D n (q, al .--am#,m+l,~x$^~ 1 ..- k~ t#)then in G the derivation is validAfl...fk=*=>al .
..a m .II.2: IfAf 1...fk=n=->al ...a m-is a lefanost derivation in G, then the following transi-tion of D is valid(q, al...am#,l,o~$^A\[3 lfl...~kfklt#)i'D* (q, al...am#,m+l,~$^l~l...13k~t#)The proofs by induction of 1.1 and H.2 (unlike theproofs of the corresponding lemmata for nsa's and in-dexed grammars (s.Aho, (1969)) are as elementary asthe one given above for I.
1 and are omitted.The DI-automaton concept can be used to show theinclusion of the class of DI-languages in the class ofcontext-seusitive languages.
The proof is strucuraUyvery similar to the one given by Aho (Aho, 1968) forthe inclusion of the indexed class in the context-sensi-tive class: For every DI-automaton A, an equivalent DI-automaton A" can be constructed which accepts its in-put w ff and only ira accepts w and which in additionuses a stack the length of which is bounded by a linearfunction of the length of the input w. For A" a linearbounded automaton M (i.e the type of automaton char-acteristic of the context-sensitive class) can be con-structed which simulates A : For reasons of space theextensive proof can not be given here.Some Remarks on the Complexity ofDI-RecognitionThe time complexity of the recognition problem for DI-grammars will only be considered for a subclass of DI-grammars.
As the restriction on the form of the rules isreminiscent of the Chomsky normal form for context-free grammars (CFG), the grammars in the subclasswill be called DI-Chomsky normal form (DI-CNF)grammarsA DI-grammar G=(N,T,F,P,S) is a DI-CNF grammarff and only ff each rule in P is of one of the followingforms where A,B,C~N-{S}, feF, aeT, S--,a, ff 6~L(G),(a) A--,BC, (b)A-BfC, (c) A-+BCf,(d) Af--)BC, (e)Af--,a, (0 A->aThe question whether the class of languages generatedby DI-CNF grammars i  a proper or improper subclassof the DI-languages will be left open.In considering the recognition of DI-CNF grammarsan extension of the CKY algorithm for CFGs (Kasami,1965; Younger, 1967) will be used which is essentially365inspired by an idea of Vijay-Shanker and Weir in(Vijay-Shanker and Weir, 1991).Let the n(n+l)/2 cells of a CKY-table for an inputof length n be indexed by i and j (l~_<j_~.n) in such amanner that cell Z i,j builds the top of a pyramid the ba-se of which consists-of the input ai...aj.As in the case of CFGs a label E of a node of a deri-vation tree (or a code of E) should be placed into cellZi, j only if in G the derivation E=*=>ai...a j is valid.Since nonterminal nodes of DI-derivation tr6es are la-beled by pairs (A,~t) consisting of a nonterminal A andan index stack B and since the number of such pairswith (AdO =*=> w can grow exponentially with thelength of w, intractability can only be avoided if indexstacks can be encoded in such a way that substacksshared by several nodes are represented only once.Vijay-Shanker and Weir solved the problem for lin-ear indexed grammars (LIGs) by storing for each nodeK not its complete label Aflf2...fn, but the nonterminalpart A together with only the top fl of its index stackand an indication of the cell where the label of a de-scendant of K can be found with its top index f2 conti-nning the stack of its ancestor K. In the following thisidea will be adopted for DI-grammars, which, however,require a supplementation.Thus, if the cell Z i ; of the CKY-table contains anentry beginning with ~l<A,fl, (B,f2,q,p),..>", then weknow thatAtt=*=>ai_.a j with tt--fltt 1 eF*is valid, and further that the top index symbol f2 onBl(i.e.
the continuation of f l )  is in an entry ofceU Zp~qbeginning with the noterminal B.
If, descending insuch a manner and guided by pointer quadruples like"<B,f2,p,q>" , an entry of the form <C,fn,-,..> is met,then, in the case of a LIG-table, the bottom of stackhas been reached.
So, entries of the form<A,fl,(B,f2,p,q)> are sufficient for LIGs.But, of course, in the case of DI-derivatious the bot-tom of stack of a node, because of index distribution,does not coincide with the bottom of stack of an arbitr-ary index inheriting descendant, cf.
(13)LIG-Percolation vs. DI-PercolationAflf2...f n Af l f2.
.
.~+l.
.
.
f  n/ \ / \Bf2...f n B 2 Bf2f3... ~ B2ft+l...fnI I ^Df3,..fj II /ICf n (bottom of Cf t tI \ stack) / \ (stack continuation)Rather, the bottom of stack of a DI-node coincides withthe bottom of stack of its rightmost index inheriting de-scendant.
Therefore, the pointer mechanism for DI-en-tries has to be more complicated.
In particular, it mustbe possible to add an "intersemital" pointer to a sisterpath.
However, since the continuation of the unarystack (like of Cf t in ( ) )  of a node without index inher-iting descendants is necessarily unknown at the time itsentry is created in a bottom up manner, it must be pos-sible to add an intersemital pointer to an entry later on.That is why a DI-entry for a node K in a CKY-ceUrequires an additional pointer to the entry for a descen-dant C, which contains the end-of-stack symbol of Kand which eventually has to be supplemented by an in-tersemital continuation pointer.
E.g.
the entry(14) < Bl,f2,(D,f3,p,q),(C,ft,r,s) > in Z i,jindicates that the next symbol f3 below f2 on the indexstack belonging to B 1 can be found in cell ZO q in theentry for the nonterminal D; the second ~l{~druple(C,f t r,s) points to the descendant C of Blcarrying thelast ~ndex ft of Bland containing a place where a con-tinuation pointer to a neighbouring path can be addedor has already been added.To illustrate the extended CKY-algorithm, one ofthe more complicated cases of specifying an entry forthe cell Zi, j is added below which dominates most ofthe other cases in time complexity:FOR i:=n TO 1 DOFORj:=i TO n DOFOR k:=i TO j-1 DOFor each rule A~ AlfA2:if <Al,f,(Bl,fl,Ploql),(C 1,f3,sl,tl)>eZi,kfor some B1, CleN,f l , f3eF,Pl, ql (i-<Pl<ql~k), Sl,tl (i-<Pl<Sl-<tl ~&)and <A2,fo-,-> eZk+l, j for some fceFthen 1. if<B 1,fl, (B2,f2,P2,q2), X>eZpl,qlforsome B2,eN, f2eF, P2, q2with i~.p2<q2<_k, and if ql<P2, thenX=- , else X=(C,f t, u,v) for someCEN, fteF, u,v (Pl<UgVg ql)thenZi,j :=Zi,jw{<A,fl,(B2,f2,P2,q3 ),(A2,fok+l,j) >}elseif <Bl,fl,-,-> eLpl ,qlZij:=Zijw{<A, fl,(A~,fc,k+ 1,j),(A 2,fc,k + I d)> }2. if<Cl,f3,-,->?Lsl,tl366thenZsl,tl :=Zsl,tlw{ <C l,f3,(A 2,fc,k + l j),-> }The pointer (A2,fc,k+lj) in the new entry of Zij pointsto the cell of the node where the end of stack of thenewly created node with noterminal A can be found.The same pointer (A2,fc,,k+lj) appears in cell Zsl,t 1as "supplement" in order to indicate where the stack ofA is continued behind the end-of-stack ofA 1.
Note thatsupplemented quadruples of a cell Zi, j are uniquelyidentifiable by their form <N,fl,(C,f2,r,s),->, i.e.
theempty fourth component, and by the relationj<_r~s.
Supplemented quadruples cannot be used as en-tries for daughters of "active" nodes, i.e.
nodes the en-tries of which are currently being constructed.Let al..a n be the input.
The number of entries of theform <B,fl,(D,f2,p,q),(C,f3,r,s)> (fl,f2,f3eF, B,C, D~N, l<i,p,q,r, sj_~a) in each cell Zi, iwill then be boundedby a polynomial of degree 4, i.e ~.
O(n4).
For a fixedvalue of ij,k, steps like the one above may requireO(n 8) time (in some cases O(n12)).
The three initialloops increase the complexity by degree 3.References\[Aho, 1968\] A. V. Aho.
Indexed Grammars,J~4ss.Comput.Mach.
15, 647-671, 1968.\[Aho, 1969\] A. V. Aho.
Nested Stack Automata,J.Ass.Comp.Mach.
16, 383-, 1969.\[Gazdar, 1988\] G. Gazdar.
Applicability of IndexedGrammars to Natural Languages, in: U.Reyle andC.Rohrer (eds.
)Natural Language Parsing and Lin-guistic Theories, 69-94, 1988.\[Joshi, Vijay-Shanker, and Weir, 1989\] A. K. Joshi, K.Vijay-Shanker, and D. J. Weir.
The convergence ofmildly context-sensitive grammar formalisms.
In T.Wasow and P. Sells (EAs.
), The processing of lin-guistic structure.
MIT Press, 1989.\[Kasami, 1965\] T. Kasami.
An efficient recognitionand syntax algorithm for context-free lan-guages.(Tech.
Rep. No.
AF-CRL-65-758).
Bedford,MA: Air Force Cambridge Research Laboratory,1965.\[Pereira, 1981\] F. Pereira.
Extraposition Grammars, in:American Journal of ComputationalLinguistics,7,243-256, 1981.\[Pereira, 1983\] F. Pereira.
Logic for Natural LanguageAnalysis, SRI International, Technical Note 275,1983.\[Rizzi, 1982\] L. Rizzi.
Issues in Italian Syntax,Dordrecht, 1982.\[Stabler, 1987\] E. P Stabler.
Restricting Logic Gram-mars with Government-Binding Theory, Computa-tionalLinguistics, 13, 1-10, 1987.\[Takeshi, 1973\] Hayaski Takeshi.
On Derivation Treesof Indexed Grammars, PubI.RIMS, Kyoto Univ., 9,61-92, 1973.\[Vijay-Shanker, Weir, and Joshi, 1986\] K. Vijay-Shanker, D. J. Weir, and A. K. Joshi.
Tree adjoiningand head wrapping.
11th International Conferenceon Comput.
Ling.
1986.\[Vijay-Shanker, Weir, and Joshi, 1987\] K. Vijay-Shanker, D. J. Weir, A. K. Joshi.
Characterizingstructural descriptions produced by various gram-matical formalisms.
25th Meeting Assoc.Comput.Ling., 104-111.
1987.\[Vijay-Shanker and Weir, 1991\] K. Vijay-Shanker andDavid J. Weir.
Polynomial Parsing of Extensions ofContext-Free Grammars.
In: Tomita, M.(ed.)
Cur-rent lssues in Parsing Technology, 191-206, London1991.\[Weir and Joshi, 1988\] David J. Weir and Aravind K.Joshi.
Combinatory Categorial Grammars: Genera-tive power and relationship to linear context-free r -writing systems.
26th Meeting Assoc.Comput.
Ling.,278-285, 1988.\[Younger, 1967\] D. H. Younger.
Recognitio_n a dparsing context-free languages in time n 3. lnf Con-trol, 10, 189-208.367
