Proceedings of the Third Workshop on Issues in Teaching Computational Linguistics (TeachCL-08), pages 27?35,Columbus, Ohio, USA, June 2008. c?2008 Association for Computational LinguisticsDefining a Core Body of Knowledge for theIntroductory Computational Linguistics CurriculumSteven BirdDepartment of Computer Science and Software EngineeringUniversity of Melbourne, Victoria 3010, Australiasb@csse.unimelb.edu.auAbstractDiscourse in and about computational linguis-tics depends on a shared body of knowledge.However, little content is shared across theintroductory courses in this field.
Instead,they typically cover a diverse assortment oftopics tailored to the capabilities of the stu-dents and the interests of the instructor.
If thecore body of knowledge could be agreed andincorporated into introductory courses severalbenefits would ensue, such as the proliferationof instructional materials, software support,and extension modules building on a com-mon foundation.
This paper argues that it isworthwhile to articulate a core body of knowl-edge, and proposes a starting point based onthe ACM Computer Science Curriculum.
Avariety of issues specific to the multidisci-plinary nature of computational linguistics areexplored.1 IntroductionSurveys of introductory courses in computationallinguistics and natural language processing provideevidence of great diversity.1 Regional variation isstark: courses may emphasise theory over program-ming (or vice versa), rule-based approaches overstatistical approaches (or vice versa), tagging andparsing over semantic interpretation (or vice versa),and so on.
The diversity is hardly surprising giventhe particular background of a student cohort and theparticular expertise of an instructor.1http://aclweb.org/aclwiki/index.php?title=List_of_NLP/CL_coursesIn spite of this variation, the introductory courseneeds to serve some common, basic needs.
For somestudents, it will be the first step in a pathway leadingto specialised courses, graduate research, or employ-ment in this field.
These students should receive asolid technical foundation and should come awaywith an accurate picture of the many opportunitiesthat lie ahead.
For students who do not continue, theintroductory course will be their main exposure tothe field.
In addition to the technical content, thesestudents need to understand how the field drawsfrom and contributes back to its parent disciplinesof linguistics and computer science, along with tech-nological applications that are helping to shape thefuture information society.
Naturally, this courseis also a prime opportunity to promote the field tonewcomers and encourage them to pursue advancedstudies in this area.
In all cases, the introductorycourse needs to cover a core body of knowledge.The fact that a core body of knowledge existsin computational linguistics is demonstrated anec-dotally: a doctoral student is told to curtail herextended discussions of basic POS tagging and CFGparsing algorithms since they are part of the pre-sumed knowledge of the audience; a researcher pre-senting work to a general linguistics or computer sci-ence audience discovers to his surprise that certainmethodologies or algorithms need to be explicatedand defended, even though they was uncontroversialwhen presented at a conference; a keynote speaker ata computational linguistics conference can presumethat certain theoretical programs and practical goalsof the field are widely accepted.
These three areas?
terminology, methodology, ideology ?
constitute27part of the core body of knowledge of computationallinguistics.
They provide us with the starting pointfor identifying the concepts and skills to be coveredin the introductory course.Identifying a core body of knowledge would bringthree major benefits.
First, technical support wouldbe consolidated: instructional materials togetherwith implementations of standard algorithms wouldbe available in several programming paradigms andlanguages.
Second, colleagues without a researchspecialization in computational linguistics wouldhave a non-controversial curriculum with externalsupport, a standard course that could be promotedto a broad range of students as a mainstream option,in both linguistics and computer science.
Similarly,new graduates beginning a teaching career wouldbe better equipped to push for the adoption of anew computational linguistics or natural languageprocessing course at institutions where it is notyet established.
Third, employers and graduateschools would be able to make assumptions aboutthe knowledge and skills of a new graduate.The goal of this paper is to advocate the idea ofconsensus around a body of knowledge as a promis-ing way to coordinate the introductory computa-tional linguistics curriculum, without attempting tomandate the structure of individual courses or thechoice of textbooks.
The paper is organised as fol-lows: section 2 sets the scene by describing a vari-ety of contexts in which computational linguisticsis taught, drawing on the author?s first-hand experi-ence; section 3 sets out a possible organization forthe introductory topics in computational linguistics,modelled on the ACM Computer Science Curricu-lum; section 4 explores some implications of thisapproach for curriculum and assessment.
The papercloses with remarks about next steps.2 Contexts for Teaching and Learning inComputational LinguisticsIn this section a variety of scenarios are describedin which the author has had direct first-hand experi-ence.
All cases involve entry-level courses in com-putational linguistics.
They provide the back-dropto the current proposal, exemplifying a range ofcontexts in which a core body of knowledge wouldneed to be delivered, contexts imposing differentconstraints on implementation.Before embarking on this discussion it is helpfulto be reminded of the differing backgrounds andgoals of new students.
Some want to use com-putational techniques in the analysis of language,while others want to use linguistic knowledge in thedevelopment of language technologies.
These back-grounds and goals are orthogonal, leading to the gridshown in Table 1.I will begin with the most common context of agraduate-level course, before progressing to upper-level undergraduate, lower-level undergraduate, andsecondary levels.2.1 Graduate-Level CoursesDozens of graduate programs in computer scienceand in linguistics have an introductory course oncomputational linguistics or natural language pro-cessing.
In most cases, this is all the formal train-ing a student will receive, and subsequent trainingis happens in private study or on the job.
In someuniversities this is the entry point into a suite of moreadvanced courses in such areas as lexical semantics,statistical parsing, and machine translation.
Even so,it is important to consider the shared assumptions ofthese specialised courses, and the needs of a studentwho only undertakes the introductory course.There are two principal challenges faced byinstructors at this level.
The first is to adequatelycover the theoretical and practical sides of the fieldin a single semester.
A popular solution is not to try,i.e.
to focus on theory to the exclusion of practicalexercises, or to simply teach ?programming forlinguists.?
The former deprives students of thechallenge and excitement of writing programs toautomatically process language.
The latter fails tocover any significant domain-specific theories oralgorithms.The second challenge is to address the diversebackgrounds of students, ranging from those with acomputer science background to a linguistics back-ground, with a scattering of students who have abackground in both or in neither.The author taught at this level at the Universityof Pennsylvania over a period of three years.
Per-haps the most apt summary of the experience istriage.
Cohorts fell into three groups: (i) students28Background: Arts and Humanities Background: Science and EngineeringLanguageAnalysisProgramming to manage language data,explore linguistic models, and test empir-ical claimsLanguage as a source of interesting prob-lems in data modeling, data mining, andknowledge discoveryLanguageTechnologyKnowledge of linguistic algorithms anddata structures for high quality, maintain-able language processing softwareLearning to program, with applicationsto familiar problems, to work in languagetechnology or other technical fieldTable 1: Summary of Students?
Backgrounds and Goals, from (Bird et al, 2008a)who are well prepared in either linguistics or com-puter science but not both (the majority) who willperform well given appropriate intervention; (ii) stu-dents who are well-prepared in both linguistics andcomputer science, able to complete learning taskson their own with limited guidance; and (iii) stu-dents with minimal preparation in either linguis-tics or computer science, who lack any foundationalknowledge upon which to build.
Resources targettedat the first group invariably had the greatest impact.2.2 Specialised Upper-Level UndergraduateCoursesIn contrast with graduate-level courses, a specialisedupper-level undergraduate course will typically bean elective, positioned in the later stages of anextended sequence of courses (corresponding toACM unit IS7 Natural Language Processing, see?3).
Here it is usually possible to make reliableassumptions about background knowledge andskills, and to provide training that is pitched atexactly the right level.The author taught at this level in the ComputerScience and Linguistics departments at theUniversity of Melbourne during the past fiveyears (five times in Computer Science, once inLinguistics).
In the Linguistics department, thecourse began by teaching programming, withillustrations drawn from linguistic domains,before progressing to topics in text processing(tokenization, tagging), grammars and parsing, anddata management.
Laboratory sessions focussed onthe acquisition of programming skills, and we foundthat a 1:5 staff-student ratio was insufficient.In the Computer Science department, the firstapproach was to introduce linguistics for 2-3 weeksbefore looking at algorithms for linguistic process-ing.
This was unpopular with many students, whodid not see the motivation for learning about suchtopics as morphology and verb subcategorization inisolation from practical applications.
A revised ver-sion of the course opened with topics in text process-ing, including tokenization, extracting text from theweb, and moving on to topics in language engineer-ing.
(Bird et al (2008b) provide a more extendeddiscussion of opening topics.
)A third option is to teach computational linguistictopics in the context of a specialised course in anallied field.
Thus a course on morphology couldinclude a module on finite-state morphology, and acourse on machine learning could include a mod-ule on text mining.
In the former case, a linguisticdomain is presupposed and the instructor needs toteach the linguist audience about a particular corpusto be processed or an algorithm to be implementedor tested.
In the latter case, a family of algorithmsand data structures is presupposed and the instructorneeds to teach a computer science audience aboutlinguistic data, structures, and processes that canserve as a domain of application.2.3 Cross-Disciplinary TransitionPeople entering computational linguistics fromeither a linguistics or computer science backgroundare faced with a daunting challenge of learningthe fundamentals of the other field before theycan progress very far with the study of the targetdomain.
A major institution with a long historyof teaching computational linguistics will havea cadre of graduate students and post-doctoralresearchers who can support an instructor inteaching a course.
However, one measure of thesuccess of the approach being advocated here arethat such institutions will be in the minority of thosewhere computational linguistics is taught.
In suchcontexts, a computational linguistics course will be29a lone offering, competing for enrolments with avariety of more established electives.
To compoundthe problem, a newcomer to the field may be facedwith taking a course in a department other thantheir host department, a course which presumesbackground knowledge they lack.
Additionalsupport and self-paced learning materials arecrucial.
Efforts on filling out the computationallinguistics content in Wikipedia ?
by instructors andstudents alike ?
will help the entire community.2.4 Lower-Level Undergraduate CoursesAn intriguing option for delivery of an introduc-tion to computational linguistics is in the contextof entry-level courses in linguistics and computerscience.
In some cases, this may help to addressthe declining interest of students in these individualdisciplines.As computer science finds a broader role in ser-vice teaching, rather than in training only those stu-dents doing a major, the curriculum needs to bedriven by topics of broad appeal.
In the author?s cur-rent first year teaching, such topics include climatechange, population health, social anthropology, andfinance.
Many fundamental concepts in data struc-tures and algorithms can be taught from such start-ing points.
It is possible to include language pro-cessing as one of the drivers for such a course.Many possibilities for including computationallinguistics exist in the second-level computer sci-ence curriculum.
For example, algorithmic methodsinvolving time-space trade-offs and dynamic pro-gramming can be motivated by the task of building asimple web search engine (Bird and Curran, 2006).Concrete tasks involve web crawling, text extrac-tion, stemming, and indexing.
Spelling correctioncan be used as a driver for teaching core computerscience concepts in associative arrays, linked lists,and sorting by a secondary key.An analogous opportunity exists in the context ofentry-level courses in linguistics.
Linguistics stu-dents will readily agree that most human knowledgeand communication is represented and expressedusing language.
But it will come as a surprise thatlanguage technologies can process language auto-matically, leading to more natural human-machineinterfaces, and more sophisticated access to storedinformation.
In this context, a linguistics studentmay grasp a broader vision for his/her role in themultilingual information society of the future.In both cases, the hope is that students are inspiredto do further undergraduate study spanning linguis-tics and computer science, and to enter industryor graduate school with a solid preparation and asuitable mix of theoretical knowledge and technicalskills.The major obstacle is the lack of resources avail-able to the typical instructor, who is not a specialistin computational linguistics, and who has to deliverthe course to a large audience having no prior inter-est or knowledge in this area.
They need simplepackages and modules that can be incorporated intoa variety of teaching contexts.2.5 Secondary SchoolProgramming and Information Technology havefound a place in the secondary curriculum in manycountries.
The coursework is typically animatedwith projects involving games, databases, anddynamic websites.
In contrast, the curriculuminvolving the grammar and literature of a majorworld language typically only uses informationtechnology skills for such mundane tasks as wordprocessing and web-based research.
However, asinnovators in the language curriculum look fornew ways to enliven their classes with technology,computational linguistics offers a ready-madesource of interesting problems and methods.In Australia, the English Language curriculum ofthe Victorian Certificate of Education is a linguisticsprogram offered as part of the last two years ofsecondary education (VCAA, 2006; Mulder et al,2001).
This course provides a promising host forcomputational linguistics content in the Victoriansecondary curriculum.
The author has delivered an?Electronic Grammar?
module2 in an English classin a Victorian secondary school over a three weekperiod, jointly with a teacher who has a doubledegree in linguistics and computer science.
Studentswere taught the elements of programming togetherwith some simple applications involving taggers,parsers and annotated corpora.
These activitiesserved to reinforce students?
understanding oflexical categories, lexical semantics, and syntactic2http://nltk.org/electronic_grammar.html30ambiguity (i.e.
prepositional phrase attachment).Similar methods could be applied in secondlanguage learning classes to locate common wordsand idioms in corpora.In this context, key challenges are the installa-tion of specialised software (even a programminglanguage interpreter), overcoming the impenetrablenature of standard part-of-speech tagsets by map-ping them to simplified tagsets, and providing suit-able training for teachers.
A promising solutionis to provide a self-paced web-based programmingand testing environment, side-stepping issues withschool infrastructure and teacher training.33 Defining the CL Body of KnowledgeA promising approach for identifying the CL bodyof knowledge is to begin with the ACM ComputingCurricula 2001 Computer Science Volume (ACM,2001).
In this scheme, the body of knowledge withincomputer science is organised in a three-level hierar-chy: subfields, units and topics.
Each subfield has atwo-letter designator, such as OS for operating sys-tems.
Subfields are divided into several units, eachbeing a coherent theme within that particular area,and each identified with a numeric suffix.
Withineach unit, individual topics are identified.
We canselect from this body of knowledge the areas thatare commonly assumed in computational linguistics(see the Appendix), and then expect them to be partof the background of an incoming computer sciencestudent.The field of linguistics is less systematised, and noprofessional linguistics body has attempted to devisean international curriculum standard.
Helpful com-pendia of topics exist, such as the Language Files(Stewart and Vaillette, 2008).
However, this doesnot attempt to define the curriculum but to providesupporting materials for introductory courses.Following the ACM scheme, one could try toestablish a list of topics comprising the body ofknowledge in computational linguistics.
This is notan attempt to create a comprehensive ontology forthe field (cf.
Cole (1997), Uszkoreit et al (2003)),but rather a simple practical organization of intro-ductory topics.3This is a separate activity of the author and colleagues,available via ivle.sourceforge.netCL.
Computational LinguisticsCL1.
Goals of computational linguisticsroots, philosophical underpinnings,ideology, contemporary dividesCL2.
Introduction to Languagewritten vs spoken language; linguistic levels;typology, variation and changeCL3.
Words, morphology and the lexicontokenization, lexical categories, POS-tagging,stemming, morphological analysis, FSAsCL4.
Syntax, grammars and parsinggrammar formalisms, grammar development,formal complexity of natural languageCL5.
Semantics and discourselexical semantics, multiword expressions,discourse representationCL6.
Generationtext planning, syntactic realizationCL7.
Language engineeringarchitecture, robustness, evaluation paradigmsCL8.
Language resourcescorpora, web as corpus, data-intensive linguistics,linguistic annotation, UnicodeCL9.
Language technologiesnamed entity detection, coreference, IE, QA,summarization, MT, NL interfacesFollowing the ACM curriculum, we would expectto designate some of these areas as core (e.g.CL1-3), while expecting some number of additionalareas to be taken as electives (e.g.
three from theremaining six areas).
A given curriculum wouldthen consist of three components: (a) bridgingstudies so students can access the core knowledge;(b) the core body of knowledge itself; and (c)a selection of electives chosen to give studentsa balance of linguistic models, computationalmethodologies, and application domains.
Theseissues involve fleshing out the body of knowledgeinto a sequential curriculum, the topic of the nextsection.4 Implications for the CurriculumThe curriculum of an introductory course builds outfrom the body of knowledge of the field by lin-earizing the topic areas and adding bridging studiesand electives.
The result is a pathway that medi-ates between students?
backgrounds and their goalsas already schematised in Table 1.
Figure 1 dis-plays two hypothetical pathways, one for students31ParsingComputational Linguistics Core Body of KnowledgeLinguisticsPREPARATIONFOUNDATIONEXTENSIONComputerScienceMathematics,Statistics PsychologyDiscourse Generation...LanguageEngineering ..."LING-380 Language Technology""CS-390 Natural Language Processing"Figure 1: Curriculum as a Pathway Through the Core Body of Knowledge, with Two Hypothetical Coursesfrom a computer science background wanting tolearn about natural language processing, and one forstudents from a linguistics background wanting tolearn about language technology.
These could serveas templates for individual advanced undergraduatecourses with names that are driven by local market-ing needs rather than the need to emphasise the com-putational linguistics content.
However, they couldalso serve as a guide for a whole series of courseselections in the context of a coursework mastersprogram.
Clearly, the adoption of a core body ofknowledge has rather limited implications for thesequence of an individual curriculum.This section explores these implications for thecurriculum and raises issues for wider discussionand exploration.4.1 Diverse Entry PointsAn identified body of knowledge is not yet a cur-riculum.
It must sit in the context of the backgroundand goals of a particular audience.
An analysis ofthe author?s experience in teaching computationallinguistics to several types of audience has led toa four-way partitioning of the possible entry points,shown in Figure 2.The approaches in the top half of the figure aredriven by applications and skills, while those in thebottom half are driven by theoretical concerns bothinside and outside computational linguistics.
Theentry points in the top-left and bottom-right of thediagram seem to work best for a computer scienceaudience, while the other two seem to work bestfor a linguistics audience (though further work isrequired to put such impressionistic observations ona sound footing).By definition, all students would have to coverthe core curriculum regardless of their entry point.Depending on the entry point and the other coursestaken, different amounts of the core curriculumwould already be covered.
For students withminimal preparation, it might actually take morethan one course to cover the core curriculum.4.2 Bridging StudiesOne approach to preparation, especially suitable atthe graduate level, is to mandate bridging studiesfor students who are not adequately prepared for theintroductory course.
This could range from an indi-vidual program of preparatory readings, to a sum-mer intensive course, to a full semester course (e.g.auditing a first or second year undergraduate coursesuch as Introduction to Language or Algorithms andData Structures).It is crucial to take seriously the fact that somestudents may be learning to program for the firsttime in their lives.
Apart from learning the syntaxof a particular programming language, they need tolearn a new and quite foreign algorithmic approachto problem solving.
Students often report that theyunderstand the language constructs and follow theexamples provided by the instructor, but find theyare unable to write new programs from scratch.32Programming First:skills and problem-solvingfocus, with CL for motivation,illustrations, and applicationsText Processing First:application focus, token-ization, tagging, evaluation,language engineeringLinguistics First:syntax, semantics, morph-ology, with CL for testing atheory, exploring corporaAlgorithms First:CL algorithms or CL asapplication for an allied field(e.g.
AI, IR, ML, DB, HCI)Language ComputingApplicationTheoryFigure 2: Approaches to Teaching NLPThis accords with the finding that the way inwhich programmers understand or write programsdiffers greatly between the novice and the expert(Lister et al, 2006).
The issue is independent ofthe computational linguistics context, and fits themore general pattern that students completing anintroductory programming course do not perform aswell as expected (McCracken et al, 2001).Bridging studies can also overlap with the courseitself, as already indicated in Figure 1.
For example,in the first week of classes one could run a quiz thatidentifies students who are not sufficiently preparedfor the programming component of the course.
Sucha quiz could include a diagnostic non-programmingtask, like articulating the search process for lookingup a name in a telephone book, which is a predictorof programming skill (Simon et al, 2006).
Earlyintervention could include extra support, readings,classes, and so on.
Some students could be alertedto the fact that they will find the course very chal-lenging.
Some students in this category may optto switch to a less demanding course, which mightactually be the best outcome for all concerned.4.3 Organizational ModelsLinguistics Model: A natural way to structure thecomputational linguistics curriculum is to adoptorganizational patterns from linguistics courses.This could involve progression up through thelinguistic levels from phonology to discourse, ora focus on the analysis of a particular language orlanguage family, the implementation of a particularlinguistic theory, or skills development in corpuslinguistics or field methods.
In this way, content canbe packaged to meet local needs, while retaininglatitude to enter and exit the core body of knowledgein computational linguistics.Computer Science Model: The curriculumcould adopt organizational patterns from othercomputer science courses.
This could involveprogression through families of algorithms, ornavigating the processing pipeline of speechunderstanding, or exploring the pieces of amulti-component system (e.g.
question answering).As with the linguistics model, the course would bebadged to appeal to students in the local context,while covering the core body of knowledge incomputational linguistics.Vocational Model: In some contexts, establishedtheoretical courses dominate, and there is room topromote a course that is focussed on building pro-gramming skills in a new language or for some newapplication area.
This may result in a popular elec-tive that gives students a readily marketable skill.4This approach may also work at the secondary levelin the form of an after-school club.
The course isstructured according to the features of a particularprogramming language, but examples and projectson text processing succeed in covering the core body4The author found this approach to be successful in the caseof a database theory course, in which a semester project onbuilding a web database using PHP and MySQL added signifi-cant appeal to an otherwise dry subject.33of knowledge in computational linguistics.Dialectic Model: As discussed above, a majorgoal for any curriculum is to take students from oneof the entry points in Figure 2 into the core body ofknowledge.
One approach is to consider transitionsto topics covered in one of the other entry points:the entry point is a familiar topic, but from there thecurriculum goes across to the other side, attempt-ing to span the divide between computer scienceand linguistics.
Thus, a computational linguisticscurriculum for a computer science audience couldbegin with algorithms (bottom-left) before applyingthese to a range of problems in text processing (top-left) only to discover that richer sources of linguisticknowledge were required (bottom-right).
Similarlya curriculum for a linguistics audience could beginwith programming (top-right), then seek to applythese skills to corpus processing for a particular lin-guistic domain (bottom-left).This last approach to the curriculum criss-crossesthe divide between linguistics and computer science.Done well, it will establish a dialectic between thetwo fields, one in which students reach a matureunderstanding of the contrasting methodologiesand ideologies that exist within computationallinguistics including: philosophical assumptions(e.g.
rationalism vs empiricism); the measurementof success (e.g.
formal evaluation vs linguisticexplanation); and the role of observation (e.g.a single datum as a valuable nugget vs massivedatasets as ore to be refined).5 ConclusionA core body of knowledge is presumed backgroundto just about any communication within the fieldof computational linguistics, spanning terminology,methodology, and ideology.
Consensus on this bodyof knowledge would serve to underpin a diverserange of introductory curricula, ensuring they coverthe core without imposing much restriction on thedetails of any particular course.
Curricula beginningfrom four very different starting points can progresstowards this common core, and thence to specialisedtopics that maximise the local appeal of the courseand its function of attracting newcomers into thefield of computational linguistics.There is enough flexibility in the curriculum ofmost existing introductory computational linguis-tics courses to accommodate a core body of knowl-edge, regardless of the aspirations of students or theresearch interests of an instructor.
If the introductorycourse is part of a sequence of courses, a larger bodyof knowledge is in view and there will be scope forswitching content into and out of the first course.
Ifthe introductory course stands alone as an electivethat leads to no other courses, there will also bescope for adding or removing content.The preliminary discussion of this paper leavesmany areas open for discussion and exploration.The analyses and recommendations remain at thelevel of folk pedagogy and need to be establishedobjectively.
The various pathways have only beendescribed schematically, and still need to be fleshedout into complete syllabuses, down to the level ofweek-by-week topics.
Support for skill developmentis crucial, especially in the case of students learn-ing to program for the first time.
Finally, obsta-cles to conceptual learning and skill developmentneed to be investigated systematically, with the helpof more sophisticated and nuanced approaches toassessment.AcknowledgmentsThe experiences and ideas discussed in this paperhave arisen during my computational linguisticsteaching at the Universities of Edinburgh,Pennsylvania and Melbourne.
I?m indebted toseveral co-teachers who have accompanied me onmy journey into teaching computational linguistics,including Edward Loper, Ewan Klein, BadenHughes, and Selina Dennis.
I am also gratefulto many students who have willingly participatedin my explorations of ways to bridge the dividebetween linguistics and computer science over thepast decade.
This paper has benefitted from thefeedback of several anonymous reviewers.34ReferencesACM.
2001.
Computing Curricula 2001: Computer Sci-ence Volume.
Association for Computing Machinery.http://www.sigcse.org/cc2001/.Steven Bird and James Curran.
2006.
Building asearch engine to drive problem-based learning.
InProceedings of the Eleventh Annual Conference onInnovation and Technology in Computer Science Edu-cation.
http://eprints.unimelb.edu.au/archive/00001618/.Steven Bird, Ewan Klein, and Edward Loper.
2008a.Natural Language Processing in Python.
http://nltk.org/book.html.Steven Bird, Ewan Klein, Edward Loper, and JasonBaldridge.
2008b.
Multidisciplinary instruction withthe Natural Language Toolkit.
In Proceedings of theThird Workshop on Issues in Teaching ComputationalLinguistics.
Association for Computational Linguis-tics.Ronald Cole, editor.
1997.
Survey of the State of the Artin Human Language Technology.
Studies in NaturalLanguage Processing.
Cambridge University Press.Raymond Lister, Beth Simon, Errol Thompson, Jacque-line L. Whalley, and Christine Prasad.
2006.
Notseeing the forest for the trees: novice programmersand the SOLO taxonomy.
In Proceedings of the 11thAnnual SIGCSE Conference on Innovation and Tech-nology in Computer Science Education, pages 118?122.Michael McCracken, Vicki Almstrum, Danny Diaz,Mark Guzdial, Dianne Hagan, Yifat Ben-DavidKolikant, Cary Laxer, Lynda Thomas, Ian Utting, andTadeusz Wilusz.
2001.
A multi-national, multi-institutional study of assessment of programmingskills of first-year CS students.
SIGCSE Bulletin,33:125?180.Jean Mulder, Kate Burridge, and Caroline Thomas.2001.
Macmillan English Language: VCE Units 1 and2.
Melbourne: Macmillan Education Australia.Simon Simon, Quintin Cutts, Sally Fincher, PatriciaHaden, Anthony Robins, Ken Sutton, Bob Baker, IlonaBox, Michael de Raadt, John Hamer, Margaret Hamil-ton, Raymond Lister, Marian Petre, Denise Tolhurst,and Jodi Tutty.
2006.
The ability to articulate strategyas a predictor of programming skill.
In Proceedings ofthe 8th Australian Conference on Computing Educa-tion, pages 181?188.
Australian Computer Society.Thomas W. Stewart and Nathan Vaillette, editors.
2008.Language Files: Materials for an Introduction to Lan-guage and Linguistics.
Ohio State University Press.Hans Uszkoreit, Brigitte Jo?rg, and Gregor Erbach.
2003.An ontology-based knowledge portal for languagetechnology.
In Proceedings of ENABLER/ELSNETWorkshop ?International Roadmap for LanguageResources?.VCAA.
2006.
English Language: VictorianCerticate of Education Study Design.
VictorianCurriculum and Assessment Authority.
http://www.vcaa.vic.edu.au/vce/studies/englishlanguage/englangindex.htm%l.Appendix: Selected Topics from ACM CSBody of Knowledge Related toComputational LinguisticsDS.
Discrete StructuresDS1.
Functions, relations and setsDS2.
Basic logicDS5.
Graphs and treesDS6.
Discrete probabilityPF.
Programming FundamentalsPF1.
Fundamental programming constructsPF2.
Algorithms and problem solvingPF3.
Fundamental data structuresPF4.
RecursionAL.
Algorithms and ComplexityAL1.
Basic algorithmic analysisAL2.
Algorithmic strategiesIS.
Intelligent SystemsIS1.
Fundamental issues in intelligent systemsIS2.
Search and constraint satisfactionIS3.
Knowledge representation and reasoningIS7.
(Natural language processing)IM.
Information ManagementIM1.
Information models and systemsIM3.
Data modelingSP.
Social and Professional IssuesSP4.
Professional and ethical responsibilitiesSP5.
Risks and liabilities of computer-based systemsSE.
Software EngineeringSE1.
Software designSE2.
Using application programming interfacesSE9.
Component-based computing35
