Requirements for Robust Natural LanguageInterfaces:  The LanguageCraft  T~4and XCALIBUR exper iencesJaime G. CarbonellCarnegie+Mellon Universityand Carnegie-Group Inc.Pittsburgh, PA 15213, USAIn t roduct ionNatural Language interfaces to data bases and expert systemsrequire the integration of several crucial capabilities in order to bejudged hab i tab le  by their end users and product ive  by thedevelopers of applications.
User habitability is measured in terms oflinguistic coverage, robustness of behavior and speed of response,whereas implementer productivity is measured by the amount ofeffort required to connect the interface to a new application, todevelop its syntactic and semantic grammar, and to test and testand debug the resultant system assuring a certain level ofperformance?
These latter criteria have not been addressed directlyby natural language researchers in pure laboratory settings, withthe exception of user-defined extensions to an existing interface(e.g., NanoKLAUS \[4\], vex  \[6\]).
But, in order to amortize the costof developing practical, robust and efficient interfaces over multipleapplications, the implementer productivity requirements are asimportant as user habitability.
We treat each set of criteria in turn,drawing from our experience in XCALIBUR \[2\] and inLanguageCraft TM \[5\], a commercially available environment and runtime module for rapid development of domain-oriented naturallanguage interfaces, f In our discussion we distill the generallessons accrued from several years of experience using thesesystems, and conducting several small-scale user studies.User  Hab i tab i l i tyNatural language used for communication in task-oriented ialogsdiffers from that of published text.
Perhaps it should not besurprising that dialog phenomena, especially e!lipsis and anaphora\[3\] dominate over complex syntactic constructions, but theimplications of this observation for habitability of natural languageinterfaces have not yet become widely known or accepted.Conversely, the criteria for user habitability itemized below applyonly to interfaces, not to the comprehension of longer written texts??
Coverage  - All significant domain concepts (objects,relations, states and actions) must be incorporated in thegrammar and knowledge base.
Conceptual coverage is morecrucial than extended syntactic coverage, as users will adaptto syntactic limitations but will not tolerate the total inability toexpress concepts or operatrons llley lodge slgnlilcant.Moreover, users of interactive natural anguage systems veryseldom type long complicated sentences of the type thatabound in literary works.
Even such common grammaticalstructures as subordinate clauses and clause-levelcoordination occur with relatively low frequency in task-oriented interfaces,?
E l l ips i s  Reso lu t ion  - Brevity is the key to successfulcommunication.
Natural language has been comparedunfavorably with artificial command languages on thegrounds that it is often more verbose, and typing is an activityone wishes to minimize.
However, we have found that inmany communications with expert systems and in somedatabase query tasks, fully half of all interactions areexpressed as extremely brief elliptical utterances.
Exploitingcontextual information, one can sometimes communicatewith fewer keystrokes in natural language than in an artificiallanguage lacking in elliptical or anaphoric reference.
Supportfor ellipsis is therefore a central design component ofLanguageCraft and XCALIBUR,?
Anaphora  Reso lu t ion  - Anaphora is almost as ubiquitousas ellipsis.
Using pronouns like "it" or dydatic references like"that calculation" to refer to objects or actions of arbitrarycomplexity makes communication more natural and muchbriefer.
A surprising result from one of our early user studiesshowed that whereas it is possible to restrict users fromemploying complex grammatical structures, it is not possiblefor them to avoid use of anaphors.
Users will understand andfollow the instruction to avoid anaphors for a couple ofsentences and revert back to using them as soon as theyconcentrate on the task at hand.Meta language - Utterances about other utterances occurwith some regularity, e.g., "1 meant to type gauss.for instead","Oops, I didn't mean that!
", or "When I say 'print' I mean onthe terminal".
However these are more difficult to handlesystematically and therefore go beyond the scope of thecurrent practical implementations.Robustness - Users invariably cornrnit errors oforthography, switch word order, violate agreement, omitfunction words, insert spurious words, or use incorrectpunctuation?
Moreover, they often do not notice their errors,as task knowledge and redundancies in the language allowfor fairly easy human comprehension of sentences that fail torespect all grammatical niceties.
Approximately a third of allsentences in our analyzed sample of several hundredinteractions were extragrammatical in a strict sense, mostlydue to sloppy user input.
However, initial work at automatedrecovery when possible, and focused interactive correctionwhen needed, shows promise for future improvements in thisimportant aspect of user habitability \[1\].Response time - Next to grammatical coverage, perhapsthe most widely recognized requirernent for habitability isreal-time response.
We find that whereas this is indeed anissue, the combination of new parsing techniques \[8\], fasterhardware, and on-line parsing 2 mean that real timeperformance will be less of a concern for developers of taskoriented natural language interfaces.Back-end response - Last but certainly not least, themanner by which the backend system responds to the user iscrucial.
An ideal natural language recognizer coupled to anexpert system or data base that returns its answers in a formtotally incomprehensible to the user is of little use.
Thus inboth XCALIBUR and I_anguageCraft we have developednatural language generators (as well as graphics and tabularoutput generators) to close the communication loop with theuser.1LanguageCraft, Plume and Gramrnar Writer's Workbench are trademarks ofCarnegie Group Inc.2On-line parsing means that a system parses the input as it is being typed from leftto right, and thus exploits user typing time that would otherwise be idled away.162System Bu i lder  P roduct iv i tyThe more elaborate a natural anguage interface, the harder it is toport to new application domains.
In this manner there is sometension between habitability and complexity of development.
But, inorder to ease the difficulty without materially sacrificing thehabitability requirements et forth above, several principles anddevelopment tools have emerged,-to wit:Decompos i t ion  - Traditionally, the syntactic recognitionand semantic interpretation components of a naturallanguage system were compartamentatized into separatesubsystem,'~ because the former is domain general whereasthe latter is domain specific.
However, such separationentails serious performance compromises, both in speed andaccuracy of the resultant analysis (e.g.
the inability to resolvesyntactic ambiguities without semantic criteria, and theinability to recover from ill-formed input unless both semanticand syntactic constraints are u~fified in the recognitionprocess).
Lately, a new approach is emerging, whereseparate syntactic and semantic knowledge sources areprecompiled into a unified grammar \[7\], thus sharing theadvantages o f  separation of knowledge sources atdevelopment time and integrated robust parsing at run time.?
Grammar  deve lopment  workbenches  - In order tospeed the development of a new interface, and to ensureconsistency and well-formedness of new grammars andlexicons, specialized software tools are begin developed,much like the structured editors ~md prnura!nnfingenvironments that improve programmer prodLIctivily.Moreover, grammars are more highly structured tlutncomputer programs, thus such tools have an even qreaterimpact in improving grammar-writer productivity.?
Run-t ime trac ing and displays - Once again borrowingfrom software engineering, utilities to trace the application ofa grammar to a set of examples (and to display the processingand output in meaningful ways exploiting graphic capabilitiesof the new workstations) are enhancing the debugging andquality assurance aspects of new grammar development.Systemat ic  backend t rans lator  - As the productivity ofthe grammar developer increases, the effort to connect theparser to the bacl;,end application becomes a larger fractionof the total development cost.
\ ]he major part of this problementails the translation of semantic structures output by theparser (such as case frames) into the input language requiredby the application (such as data base query languages).
Inorder to enhance developer productivity and minimize errorsof ad-hoc programming, we have developed a systematictransformation I~nguage (KAFKA) in XCALIBUR, and a rule.based translator in LanguageCraft.The systematic develqpment of natural language interfacesrequires a run time system capable of providing the habitabilityrequirements listed in the previous section, and a developmentenvironment capable of providing the grammar-writer andapplications engineering support listed here.
LanguageCraft is thefirst commercial system to provide most of these capabilities.Plume, its case-frame run-time parser, contains a substantial part ofcommon English syntax (and recently a JPLUME contains Japanesesyntax), and manages dialog issues such as ellipsis resolution andinteractive disambiguation.
The Grammar Writers Workbenchprovides the LanguageCraft development environment, consistingof a structured grammar editor, a consistency checker, debuggingand tracing facilities, and support for a rule-based language toconnect to different applications.
We expect these facilities toimprove in LanguageCraft, especially as it becomes multilingual andour experience base with different applications increases.
And, wealso expect other systems to emerge that incorporate differentmethods for meeting the requirements set forth in the presentdocument.References1.
Carbonell, J. G. and Hayes, P. J., "Recovery Strategies forParsing Extragrarnmatical Language," American ,Journal ofComputational Linguistics, Vol.
9, No.
3-4, 1983, pp.
123-146.2.
Carbonell, J. G., Boggs, W. M., Mauldin.
M. L. and Anick, P. G.,"The XCALIHLJI~ Project, A Natural Language Interlace toExpert Systems and Data Ilases," in Applications in AHilicialInlellige.nce, S. Andriole, ed., Petrocelli Books Inc., 1985.3.
Carbonetl, J. G., "Discourse Pragmatics in Task-OrientedNatural Language Interface,;," Proceedings of the 21st atlndlalmeeting el the Association for Computational Linguistics, 1983.4.
Haas, N. and Hendrix, G. G., "Learning by Being Tdld:Acquiring Knowledge for hfformation Management," in Machinel.eaming, An Artificial Intelligence Approach, R. S. k, lici/~l.lski,J.
G. Carbonell and T. M. Mitchell, eds., Tioga Press, Pale Alto,CA, 1983.5.
Carnegie Group Ioc., The LanguageCraft Reference Manual,Pittsburgh, PA, 1985.6.
Meyers, A., "vex  - An Extensible Natural Language Processor,"Proceedings of IJCAI-85.
Los Angeles, CA, 1985, pp.
821-825.7.
Tomita, M. and Carbonell, J. G., "Another Stride TowardsKnowledge-Based MachiNe Translation: An Entity OrientedApproach," Proceedings of COLING-86, 1986.8.
Tomita, M., Efficient Parsing for Natural Langauge, KluwerAcadmic Pulishers, 1986.163
