Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 1669?1679,Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational LinguisticsLightly Supervised Learning of Procedural Dialog SystemsSvitlana VolkovaCLSPJohns Hopkins UniversityBaltimore, MDsvitlana@jhu.eduPallavi Choudhury, Chris Quirk, Bill DolanNLP GroupMicrosoft ResearchRedmond, WApallavic,chrisq,billdol@microsoft.comLuke ZettlemoyerComputer Science and EngineeringUniversity of WashingtonSeattle, WAlsz@cs.washington.eduAbstractProcedural dialog systems can help usersachieve a wide range of goals.
However,such systems are challenging to build,currently requiring manual engineering ofsubstantial domain-specific task knowl-edge and dialog management strategies.
Inthis paper, we demonstrate that it is pos-sible to learn procedural dialog systemsgiven only light supervision, of the typethat can be provided by non-experts.
Weconsider domains where the required taskknowledge exists in textual form (e.g., in-structional web pages) and where systembuilders have access to statements of userintent (e.g., search query logs or dialoginteractions).
To learn from such tex-tual resources, we describe a novel ap-proach that first automatically extracts taskknowledge from instructions, then learns adialog manager over this task knowledgeto provide assistance.
Evaluation in a Mi-crosoft Office domain shows that the indi-vidual components are highly accurate andcan be integrated into a dialog system thatprovides effective help to users.1 IntroductionProcedural dialog systems aim to assist userswith a wide range of goals.
For example, theycan guide visitors through a museum (Traum etal., 2012; Aggarwal et al, 2012), teach studentsphysics (Steinhauser et al, 2011; Dzikovska etal., 2011), or enable interaction with a health careU: ?I want to add page numbers and a title?S: ?Top or Bottom of the page?
?U: ?Top?S: ?Please select page design from the tem-plates?
(*System shows drop down menu*)U: *User selects from menu*S: ?Enter header or footer content?U: ?C.V.
?S: ?Task completed.
?Figure 1: An example dialog interaction betweena system (S) and user (U) that can be automaticallyachieved by learning from instructional web pageand query click logs.system (Morbini et al, 2012; Rizzo et al, 2011).However, such systems are challenging to build,currently requiring expensive, expert engineeringof significant domain-specific task knowledge anddialog management strategies.In this paper, we present a new approach forlearning procedural dialog systems from task-oriented textual resources in combination withlight, non-expert supervision.
Specifically, we as-sume access to task knowledge in textual form(e.g., instructional web pages) and examples ofuser intent statements (e.g., search query logs ordialog interactions).
Such instructional resourcesare available in many domains, ranging fromrecipes that describe how to cook meals to soft-ware help web pages that describe how to achievegoals by interacting with a user interface.11ehow.com,wikianswers.com1669There are two key challenges: we must (1)learn to convert the textual knowledge into a us-able form and (2) learn a dialog manager that pro-vides robust assistance given such knowledge.
Forexample, Figure 1 shows the type of task assis-tance that we are targeting in the Microsoft Officesetting, where the system should learn from webpages and search query logs.
Our central contribu-tion is to show that such systems can be built with-out the help of knowledge engineers or domain ex-perts.
We present new approaches for both of ourcore problems.
First, we introduce a method forlearning to map instructions to tree representationsof the procedures they describe.
Nodes in the treerepresent points of interaction with the questionsthe system can ask the user, while edges representuser responses.
Next, we present an approach thatuses example user intent statements to simulate di-alog interactions, and learns how to best map userutterances to nodes in these induced dialog trees.When combined, these approaches produce a com-plete dialog system that can engage in conversa-tions by automatically moving between the nodesof a large collection of induced dialog trees.Experiments in the Windows Office help do-main demonstrate that it is possible to build aneffective end-to-end dialog system.
We evaluatethe dialog tree construction and dialog manage-ment components in isolation, demonstrating highaccuracy (in the 80-90% range).
We also conducta small-scale user study which demonstrates thatusers can interact productively with the system,successfully completing over 80% of their tasks.Even when the system does fail, it often does so ina graceful way, for example by asking redundantquestions but still reaching the goal within a fewadditional turns.2 Overview of ApproachOur task-oriented dialog system understands userutterances by mapping them to nodes in dialogtrees generated from instructional text.
Figure 2shows an example of a set of instructions and thecorresponding dialog tree.
This section describesthe problems that we must solve to enable such in-teractions, and outlines our approach for each.Knowledge Acquisition We extract task knowl-edge from instructional text (e.g., Figure 2, left)that describes (1) actions to be performed, suchas clicking a button, and (2) places where inputis needed from the user, for example to enter thecontents of the footer or header they are trying tocreate.
We aim to convert this text into a form thatwill enable a dialog system to automatically assistwith the described task.
To this end, we constructdialog trees (e.g., Figure 2, right) with nodes torepresent entire documents (labeled as topics t),nodes to represent user goals or intents (g), andsystem action nodes (a) that enable execution ofspecific commands.
Finally, each node has an as-sociated system action as, which can prompt userinput (e.g., with the question ?Top or bottom ofthe page??)
and one or more user actions au thatrepresent possible responses.
All nodes connectto form a tree structure that follows the workflowdescribed in the document.
Section 3 presents ascalable approach for inducing dialog trees.Dialog Management To understand user intentand provide task assistance, we need a dialog man-agement approach that specifies what the systemshould do and say.
We adopt a simple approachthat at all times maintains an index into a node ina dialog tree.
Each system utterance is then simplythe action as for that node.
However, the key chal-lenge comes in interpreting user utterances.
Aftereach user statement, we must automatically up-date our node index.
At any point, the user canstate a general goal (e.g., ?I want to add page num-bers?
), refine their goal (e.g., ?in a footer?
), or both(e.g.,?I want to add page numbers in the footer?
).Users can also change their goals in the process ofcompleting the tasks.We develop a simple classification approachthat is robust to these different types of user behav-ior.
Specifically, we learn classifiers that, given thedialog interaction history, predict how to pick thenext tree node from the space of all nodes in the di-alog trees that define the task knowledge.
We iso-late two specific cases, classifying initial user ut-terances (Section 4) and classifying all subsequentutterances (Section 5).
This approach allows us toisolate the difference in language for the two cases,and bias the second case to prefer tree nodes nearthe current one.
The resulting approach allows forsignificant flexibility in traversing the dialog trees.Data and Evaluation We collected a large set ofsuch naturally-occurring web search queries thatresulted in a user click on a URL in the MicrosoftOffice help domain.2 We found that queries longerthat 4-5 words often resembled natural languageutterances that could be used for dialog interac-2http://office.microsoft.com1670Figure 2: An example instructional text paired with a section of the corresponding dialog tree.tions, for example how do you add borders, howcan I add a footer, how to insert continuous pagenumbers, and where is the header and footer.We also collected instructional texts from theweb pages that describe how to solve 76 of themost pressing user goals, as indicated by queryclick log statistics.
On average 1,000 user querieswere associated with each goal.
To some extentclickthroughs can be treated as a proxy for userfrustration; popular search targets probably repre-sent user pain points.3 Building Dialog Trees fromInstructionsOur first problem is to convert sets of instructionsfor user goals to dialog trees, as shown in Figure2.
These goals are broadly grouped into topics(instructional pages).
In addition, we manuallyassociate each node in a dialog tree with a train-ing set of 10 queries.
For the 76 goals (246 in-structions) in our data, this annotation effort tooka single annotator a total of 41 hours.
Scaling thisapproach to the entire Office help domain wouldrequire a focused annotation effort.
Crucially,though, this annotation work can be carried out bynon-specialists, and could even be crowdsourced(Bernstein et al, 2010).Problem Definition As input, we are given in-structional text (p1 .
.
.
pn), comprised of topics(t1 .
.
.
tn) describing:(1) high-level user intents (e.g., t1 ?
?add and for-mat page numbers?
)(2) goals (g1, .
.
.
, gk) that represent more spe-cific user intents (e.g., g1 ?
?add header orfooter content to a preformatted page numberdesign?, g2 ?
?place the page number in theside margin of the page?
).Given instructional text p1 .
.
.
pn and queriesq1 .
.
.
qm per topic ti, our goals are as follows:Figure 3: Relationships between user queries andOHP with goals, instructions and dialog trees.- for every instructional page pi extract a topicti and a set of goals g1 .
.
.
gk;- for every goal gj for a topic ti, extract a set ofinstructions i1 .
.
.
il;- from topics, goals and instructions, constructdialog trees f1 .
.
.
fn (one dialog tree pertopic).
Classify instructions to user interac-tion types thereby identifying system actionnodes a1s .
.
.
als.
Transitions between thesenodes are the user actions a1u .
.
.
alu.Figure 2 (left) presents an example of a topicextracted from the help page, and a set of goalsand instructions annotated with user action types.In the next few sections of the paper, we out-line an overall system component design demon-strating how queries and topics are mapped to thedialog trees in Figure 3.
The figure shows many-to-one relations between queries and topics, one-to-many relations between topics and goals, goalsand instructions, and one-to-one relations betweentopics and dialog trees.User Action Classification We aim to classifyinstructional text (i1 .
.
.
il) for every goal gj in thedecision tree into four categories: binary, selec-tion, input or none.Given a single instruction i with category au,we use a log-linear model to represent the distri-1671bution over the space of possible user actions.
Un-der this representation, the user action distributionis defined as:p(au|i, ?)
=e???
(au,i)?a?u e???
(au,i) , (1)where ?
(au, i) ?
Rn is an n-dimensional fea-ture representation and ~?
is a parameter vector weaim to learn.
Features are indicator functions ofproperties of the instructions and a particular class.For smoothing we use a zero mean, unit varianceGaussian prior (0, 1) that penalizes ~?
for driftingtoo far from the mean, along with the followingoptimization function:log p(Au, ?|I) = log p(Au|I, ?)?
log p(?)
==?au,i?
(Au,I)p(au|i, ?)??i(?
?
?i)22?2i+ k(2)We use L-BFGS (Nocedal and Wright, 2000) asan optimizer.Experimental Setup As described in Section 2,our dataset consists of 76 goals grouped into 30topics (average 2-3 goals per topic) for a total of246 instructions (average 3 instructions per goal).We manually label all instructions with user ac-tion au categories.
The distribution over cate-gories is binary=14, input=23, selection=80 andnone=129.
The data is skewed towards the cat-egories none and selection.
Many instruction donot require any user input and can be done auto-matically, e.g., ?On the Insert tab, in the Headerand Footer group, click Page Number?.
The ex-ample instructions with corresponding user actionlabels are shown in Figure 2 (left) .
Finally, we di-vide the 246 instructions into 2 sets: 80% trainingand 20% test, 199 and 47 instructions respectively.Results We apply the user action type classifi-cation model described in the Eq.1 and Eq.2 toclassify instructions from the test set into 4 cate-gories.
In Table 1 we report classification resultsfor 2 baselines: a majority class and heuristic-based approach, and 2 models with different fea-ture types: ngrams and ngrams + stems.
For aheuristic baseline, we use simple lexical clues toclassify instructions (e.g., X or Y for binary, selectY for selection and type X, insert Y for input).
Ta-ble 1 summarizes the results of mapping instruc-tional text to user actions.Features # Features AccuracyBaseline 1: Majority ?
0.53Baseline 2: Heuristic ?
0.64Ngrams 10,556 0.89Ngrams + Stems 12,196 0.89Table 1: Instruction classification results.Building the Dialog Trees Based on the classi-fied user action types, we identify system actionsa1s .
.
.
als which correspond to 3 types of user ac-tions a1s .
.
.
als (excluding none type) for every goalin a topic ti.
This involved associating all wordsfrom an instruction il with a system action als.
Fi-nally, for every topic we automatically construct adialog tree as shown in Figure 2 (right).
The dia-log tree includes a topic t1 with goals g1 .
.
.
g4, andactions (user actions au and system actions as).Definition 1.
A dialog tree encodes a user-systemdialog flow about a topic ti represented as a di-rected unweighted graph fi = (V,E) where top-ics, goals and actions are nodes of correspond-ing types {t1 .
.
.
tn}, {g1 .
.
.
gk}, {a1 .
.
.
al} ?
V .There is a hierarchical dependency between topic,goal and action nodes.
User interactions arerepresented by edges ti ?
{g1 .
.
.
gk}, a1u =(gj , a1) .
.
.
alu = (ak?1, ak) ?
E.For example, in the dialog tree in Figure 2 thereis a relation t1 ?
g4 between the topic t1 ?addand format page numbers?
and the goal g4 ?in-clude page of page X of Y with the page number?.Moreover, in the dialog tree, the topic level nodehas one index i ?
[1..n], where n is the numberof topics.
Every goal node includes informationabout its parent (topic) node and has double indexi.j, where j ?
[1..k].
Finally, action nodes includeinformation about their parent (goal) and grand-parent (topic) nodes and have triple index i.j.z,where z ?
[1..l].4 Understanding Initial QueriesThis section presents a model for classifying ini-tial user queries to nodes in a dialog tree, whichallows for a variety of different types of queries.They can be under-specified, including informa-tion about a topic only (e.g., ?add or delete pagenumbers?
); partially specified, including informa-tion about a goal (e.g., ?insert page number?
); orover-specified, including information about an ac-tion ( e.g., ?page numbering at bottom page?.
)1672Figure 4: Mapping initial user queries to the nodeson different depth in a dialog tree.Problem Definition Given an initial query, thedialog system initializes to a state s0, searches forthe deepest relevant node given a query, and mapsthe query to a node on a topic ti, goal gj or actionak level in the dialog tree fi, as shown in Figure 4.More formally, as input, we are given automati-cally constructed dialog trees f1 .
.
.
fn for instruc-tional text (help pages) annotated with topic, goaland action nodes and associated with system ac-tions as shown in Figure 2 (right).
From the querylogs, we associate queries with each node type:topic qt, goal qg and action qa.
This is shown inFigure 2 and 4.
We join these dialog trees repre-senting different topics into a dialog network byintroducing a global root.
Within the network,we aim to find (1) an initial dialog state s0 thatmaximizes the probability of state given a queryp(s0|q, ?
); and (2) the deepest relevant node v ?
Von topic ti, goal gj or action ak depth in the tree.Initial Dialog State Model We aim to predictthe best node in a dialog tree ti, gj , al ?
V basedon a user query q.
A query-to-node mapping is en-coded as an initial dialog state s0 represented by abinary vector over all nodes in the dialog network:s0 = [t1, g1.1, g1.2, g1.2.1 .
.
.
, tn, gn.1, gn.1.1].We employ a log-linear model and try to maxi-mize initial dialog state distribution over the spaceof all nodes in a dialog network:p(s0|q, ?)
=e?i ?i?i(s0,q)?s?0 e?i ?i?i(s?0,q), (3)Optimization follows Eq.
2.We experimented with a variety of features.Lexical features included query ngrams (up to 3-grams) associated with every node in a dialog treewith removed stopwords and stemming query un-igrams.
We also used network structural features:AccuracyFeatures Topic Goal ActionRandom 0.10 0.04 0.04TFIDF 1Best 0.81 0.21 0.45Lexical (L) 0.92 0.66 0.63L + 10TFIDF 0.94 0.66 0.64L + 10TFIDF + PO 0.94 0.65 0.65L + 10TFIDF + QO 0.95 0.72 0.69All above + QHistO 0.96 0.73 0.71Table 2: Initial dialog state classification resultswhere L stands for lexical features, 10TFIDF - 10best tf-idf scores, PO - prompt overlap, QO - queryoverlap, and QHistO - query history overlap.tf-idf scores, query ngram overlap with the topicand goal descriptions, as well as system actionprompts, and query ngram overlap with a historyincluding queries from parent nodes.Experimental Setup For each dialog tree,nodes corresponding to single instructions werehand-annotated with a small set of user queries,as described in Section 3.
Approximately 60% ofall action nodes have no associated queries3 Forthe 76 goals, the resulting dataset consists of 972node-query pairs, 80% training and 20% test.Results The initial dialog state classificationmodel of finding a single node given an initialquery is described in Eq.
3.We chose two simple baselines: (1) randomlyselect a node in a dialog network and (2) use a tf-idf 1-best model.4 Stemming, stopword removaland including top 10 tf-idf results as features ledto a 19% increase in accuracy on an action nodelevel over baseline (2).
Adding the following fea-tures led to an overall 26% improvement: queryoverlap with a system prompt (PO), query overlapwith other node queries (QO), and query overlapwith its parent queries (QHistO) .We present more detailed results for topic, goaland action nodes in Table 2.
For nodes deeper inthe network, the task of mapping a user query to anaction becomes more challenging.
Note, however,that the action node accuracy numbers actually un-3There are multiple possible reasons for this: the soft-ware user interface may already make it clear how to accom-plish this intent, the user may not understand that the softwaremakes this fine-grained option available to them, or their ex-perience with search engines may lead them to state their in-tent in a more coarse-grained way.4We use cosine similarity to rank all nodes in a dialognetwork and select the node with the highest rank.1673derstate the utility of the resulting dialog system.The reason is that even incorrect node assignmentscan lead to useful system performance.
As longas a misclassification results being assigned to atoo-high node within the correct dialog tree, theuser will experience a graceful failure: they maybe forced to answer some redundant questions, butthey will still be able to accomplish the task.5 Understanding Query RefinementsWe also developed a classifier model for mappingfollowup queries to the nodes in a dialog network,while maintaining a dialog state that summarizesthe history of the current interaction.Problem Definition Similar to the problem def-inition in Section 4, we are given a network of di-alog trees f1 .
.
.
fn and a query q?, but in additionwe are given the previous dialog state s, whichcontains the previous user utterance q and the lastsystem action as.
We aim to find a new dialogstate s?
that pairs a node from the dialog tree withupdated history information, thereby undergoing adialog state update.We learn a linear classifier that modelsp(s?|q?, q, as, ?
), the dialog state update distribu-tion, where we constrain the new state s?
to containthe new utterance q?
we are interpreting.
This dis-tribution models 3 transition types: append, over-ride and reset.Definition 2.
An append action defines a dialogstate update when transitioning from a node to itschildren at any depth in the same dialog tree e.g.,ti ?
gi.j (from a topic to a goal node), gi.j ?ai.j.z (from a goal to an action node) etc.Definition 3.
An override action defines a dialogstate update when transitioning from a goal to itssibling node.
It could also be from an action node5to another in its parent sibling node in the same di-alog tree e.g., gi.j?1 ?
gi.j (from one goal to an-other goal in the same topic tree), ai.j.z ?
ai.
?j.z(from an action node to another action node in adifferent goal in the same dialog tree) etc.Definition 4.
A reset action defines a dialog stateupdate when transitioning from a node in a currentdialog tree to any other node at any depth in adialog tree other than the current dialog tree e.g.,ti ?
t?i, (from one topic node to another topic5A transition from ai.j.z must be to a different goal or anaction node in a different goal but in the same dialog tree.
(a) Updates from topic node ti(b) Updates from goal node gj(c) Updates from action node alFigure 5: Information state updates: append, resetand override updates based on Definition 2, 3 and4, respectively, from topic, goal and action nodes.node) ti ?
g?i.j (from a topic node to a goal nodein a different topic subtree), etc.The append action should be selected when theuser?s intent is to clarify a previous query (e.g.,?insert page numbers?
?
?page numbers in thefooter?).
An override action is appropriate whenthe user?s intent is to change a goal within thesame topic (e.g., ?insert page number?
?changepage number?).
Finally, a reset action should beused when the user?s intent is to restart the dialog(e.g., ?insert page x of y?
?
?set default font?
).We present more examples for append, overrideand reset dialog state update actions in Table 3.1674Previous Utterance, q User Utterance, q?
Transition Update Action, ainserting page numbers qt1 add a background ti ?
t?i 2, reset-T, resethow to number pages qt2 insert numbers on pages in margin ti ?
si.j 1.4, append-G, appendpage numbers qt3 set a page number in a footer ti ?
ai.j.z 1.2.1, append-A, appendpage number a document qt4 insert a comment ti ?
g?i.j 21.1, reset-G, resetpage number qt5 add a comment ?redo?
ti ?
a?i.j.z 21.2.1, reset-A, resetpage x of y qg1 add a border gi.j ?
t?i 6, reset-T, resetformat page x of x qg2 enter text and page numbers gi.j ?
gi.
?j 1.1, override-G, overrideenter page x of y qg3 page x of y in footer gi.j ?
ai.j.z 1.3.1, append-A, appendinserting page x of y qg4 setting a default font gi.j ?
g?i.j 6.1, reset-G, resetshowing page x of x qg5 set default font and style gi.j ?
a?i.j.z 6.4.1, reset-A, resetpage numbers bottom qa1 make a degree symbol ai.j.z ?
t?i 13, reset-T, resetnumbering at bottom page qa2 insert page numbers ai.j.z ?
gi.
?j 1.1, override-G, overrideinsert footer page numbers qa3 page number design ai.j.z?1 ?
ai.j.z 1.2.2, append-A, appendheaders page number qa4 comments in document ai.j.z ?
g?i.j 21.1, reset-G, resetpage number in a footer qa5 changing initials in a comment ai.j.z ?
a?i.j.z 21.2.1, reset-A, resetTable 3: Example q and q?
queries for append, override and reset dialog state updates.Figure 5 illustrates examples of append, over-ride and reset dialog state updates.
All transitionspresented in Figure 5 are aligned with the exampleq and q?
queries in Table 3.Dialog State Update Model We use a log-linearmodel to maximize a dialog state distribution overthe space of all nodes in a dialog network:p(s?|q?, q, as?)
=e?i ?i?i(s?,q?,as,q)?s??
e?i ?i?i(s?
?,q?,as,q), (4)Optimization is done as described in Section 3.Experimental Setup Ideally, dialog systemsshould be evaluated relative to large volumes ofreal user interaction data.
Our query log data,however, does not include dialog turns, and so weturn to simulated user behavior to test our system.Our approach, inspired by recent work (Schatz-mann et al, 2006; Scheffler and Young, 2002;Georgila et al, 2005), involves simulating dialogturns as follows.
To define a state s we sam-ple a query q from a set of queries per node vand get a corresponding system action as for thisnode; to define a state s?, we sample a new queryq?
from another node v?
?
V, v 6= v?
whichis sampled using a prior probability biased to-wards append: p(append)=0.7, p(override)=0.2,p(reset)=0.1.
This prior distribution defines a dia-log strategy where the user primarily continues thecurrent goal and rarely resets.We simulate 1100 previous state and new querypairs for training and 440 pairs for testing.
Thefeatures were lexical, including word ngrams,stems with no stopwords; we also tested networkstructure, such as:- old q and new q?
query overlap (QO);- q?
overlap with a system prompt as (PO);- q?
ngram overlap with all queries from the oldstate s (SQO);- q?
ngram overlap with all queries from thenew state s?
(S?QO);- q?
ngram overlap with all queries from thenew state parents (S?ParQO).Results Table 4 reports results for dialog stateupdates for topic, goal and action nodes.
We alsoreport performance for two types of dialog updatessuch as: append (App.)
and override (Over.
).We found that the combination of lexical andquery overlap with the previous and new statequeries yielded the best accuracies: 0.95, 0.84 and0.83 for topic, goal and action node level, respec-tively.
As in Section 4, the accuracy on the topiclevel node was highest.
Perhaps surprisingly, thereset action was perfectly predicted (accuracy is100% for all feature combinations, not includedin figure).
The accuracies for append and overrideactions are also high (append 95%, override 90%).Features Topic Goal Action App.
Over.L 0.92 0.76 0.78 0.90 0.89L+Q 0.93 0.80 0.80 0.92 0.83L+P 0.93 0.80 0.79 0.91 0.85L+Q+P 0.94 0.80 0.80 0.93 0.85L+SQ 0.94 0.82 0.81 0.93 0.85L+S?Q 0.93 0.80 0.80 0.91 0.90L+S?+ParQ 0.94 0.80 0.80 0.91 0.86L+Q+S?Q 0.94 0.81 0.81 0.91 0.88L+SQ+S?Q 0.95 0.84 0.83 0.94 0.88Table 4: Dialog state updates classification ac-curacies where L stands for lexical features, Q -query overlap, P - prompt overlap, SQ - previousstate query overlap, S?Q - new state query overlap,S?ParQ - new state parent query overlap.16756 The Complete Dialog SystemFollowing the overall setup described in Section 2,we integrate the learned models into a completedialog system.
To evaluate the quality of the in-teractions with this system, we performed a smallscale user study, as described here.Experimental Setup We randomly chose 8goals, across topics, from the 76 used to train ourmodels.
For each goal, six users were shown a Mi-crosoft Word document before and after the goalwas executed.
Users were allowed to interact withthe system in an unconstrained manner providing atotal of 48 interactions.
If at any point they thoughtthe system response was irrelevant to their intent,they could either rephrase or start over.User Study We objectively measured task com-pletion and the quality of individual system utter-ances.
We also asked the users to rate the system(on a scale of 1-5, with 5 being best) on variousmeasures, including whether the system asked rel-evant questions.
Table 5 summarizes the results.In general, users were able to complete the tasksand were reasonably satisfied.Discussion Figure 6 shows four example di-alogs.
User utterances ranged from single key-words to rich, sentence-like goal descriptions.
Forthe shorter inputs, the system was generally ableto identify a small cohort of high-probability in-tents.
For longer inputs, especially with explicitlyspecified parameter settings, the system was usu-ally able to elicit whatever additional informationwas required to complete the task.
The majority oferrors fell into two categories when the system:I. missed key information in the input andasked redundant questions ?
Figure 6 (C);II.
failed to correctly identify the intent, andasked an irrelevant question ?
Figure 6 (D).Table 5 shows the frequency of each error type.Objective Measures Observed RatesUser achieved task 83%System asked irrelevant questions 19%System asked redundant questions 18%User Satisfaction Score Std.Dev.Overall satisfaction 3.42 0.49Questions were relevant 4.17 0.41Ambiguity was managed 4.00 0.89Table 5: User study results.U: ?I want a page number and title at the bot-tom of the page?S: ?Choose a page number design from thegallery of designs?U: *User selects design*S: ?To insert header or footer content before thepage number, type the content, and then pressTAB to position the content?U: ?Professional Resume?S: ?Task Completed?
(A)U: ?Alphabetize bullets?S: ?Do you want to sort a list alphabetically?U: ?Sort a list?S: ?Select the text in a bulleted or numberedlist?U: *User selection*S: ?Ascending or Descending?
?U: ?Ascending?S: ?Task Completed?
(B)U: ?I want the background color to be yellow?S: ?Choose a color for the document?U: ?Yellow ?S: ?Task completed?
(C)U: ?I want to change the font face and size?S: ?Choose the default font?U: ?No, reduce the size of the text?S: *System Restarts*(D)Figure 6: Four example dialogs from the userstudy, including cases that (A and B) completesuccessfully, (C) have a redundant question, and(D) fail to recognize the user intent.7 Related workTo the best of our knowledge, this paper presentsthe first effort to induce full procedural dialog sys-tems from instructional text and query click logs.Grounded Language Learning There has beensignificant interest in grounded language learn-ing.
Perhaps the most closely related worklearns to understand instructions and automati-1676cally complete the tasks they describe (Branavanet al, 2009; Vogel and Jurafsky, 2010; Kush-man et al, 2009; Branavan et al, 2010; Artzi andZettlemoyer, 2013).
However, these approachesdid not model user interaction.
There are alsomany related approaches for other grounded lan-guage problems, including understanding gamestrategy guides (Branavan et al, 2011), model-ing users goals in a Windows domain (Horvitzet al, 1998), learning from conversational inter-action (Artzi and Zettlemoyer, 2011), learningto sportscast (Chen and Mooney, 2011), learningfrom event streams (Liang et al, 2009), and learn-ing paraphrases from crowdsourced captions ofvideo snippets (Chen and Dolan, 2011).Dialog Generation from Text Similarly to Pi-wek?s work (2007; 2010; 2011), we study extract-ing dialog knowledge from documents (mono-logues or instructions).
However, Piwek?s ap-proach generates static dialogs, for example togenerate animations of virtual characters having aconversation.
There is no model of dialog man-agement or user interaction, and the approach doesnot use any machine learning.
In contrast, to thebest of our knowledge, we are the first to demon-strate it is possible to learn complete, interactivedialog systems using instructional texts (and non-expert annotation).Learning from Web Query Logs Web querylogs have been extensively studied.
For example,they are widely used to represent user intents inspoken language dialogs (Tu?r et al, 2011; Celiky-ilmaz et al, 2011; Celikyilmaz and Hakkani-Tur,2012).
Web query logs are also used in many otherNLP tasks, including entity linking (Pantel et al,2012) and training product and job intent classi-fiers (Li et al, 2008).Dialog Modeling and User Simulation Manyexisting dialog systems learn dialog strategiesfrom user interactions (Young, 2010; Rieser andLemon, 2008).
Moreover, dialog data is often lim-ited and, therefore, user simulation is commonlyused (Scheffler and Young, 2002; Schatzmann etal., 2006; Georgila et al, 2005).Our overall approach is also related to manyother dialog management approaches, includingthose that construct dialog graphs from dialog datavia clustering (Lee et al, 2009), learn informationstate updates using discriminative classificationmodels (Hakkani-Tur et al, 2012; Mairesse et al,2009), optimize dialog strategy using reinforce-ment learning (RL) (Scheffler and Young, 2002;Rieser and Lemon, 2008), or combine RL withinformation state update rules (Heeman, 2007).However, our approach is unique in the use of in-ducing task and domain knowledge with light su-pervision to assist the user with many goals.8 Conclusions and Future WorkThis paper presented a novel approach for au-tomatically constructing procedural dialog sys-tems with light supervision, given only textual re-sources such as instructional text and search queryclick logs.
Evaluations demonstrated highly accu-rate performance, on automatic benchmarks andthrough a user study.Although we showed it is possible to build com-plete systems, more work will be required to scalethe approach to new domains, scale the complex-ity of the dialog manager, and explore the range ofpossible textual knowledge sources that could beincorporated.
We are particularly interested in sce-narios that would enable end users to author newgoals by writing procedural instructions in naturallanguage.AcknowledgmentsThe authors would like to thank Jason Williamsand the anonymous reviewers for their helpfulcomments and suggestions.ReferencesPriti Aggarwal, Ron Artstein, Jillian Gerten, An-thanasios Katsamanis, Shrikanth Narayanan, AngelaNazarian, and David R. Traum.
2012.
The twinscorpus of museum visitor questions.
In Proceedingsof LREC.Yoav Artzi and Luke Zettlemoyer.
2011.
Learningto recover meaning from unannotated conversationalinteractions.
In NIPS Workshop In Learning Seman-tics.Yoav Artzi and Luke Zettlemoyer.
2013.
Weakly su-pervised learning of semantic parsers for mappinginstructions to actions.
Transactions of the Associa-tion for Computational Linguistics, 1(1):49?62.Michael S. Bernstein, Greg Little, Robert C. Miller,Bjo?rn Hartmann, Mark S. Ackerman, David R.Karger, David Crowell, and Katrina Panovich.2010.
Soylent: a word processor with a crowd in-side.
In Proceedings of ACM Symposium on UserInterface Software and Technology.1677S.
R. K. Branavan, Harr Chen, Luke S. Zettlemoyer,and Regina Barzilay.
2009.
Reinforcement learningfor mapping instructions to actions.
In Proceedingsof ACL.S.
R. K. Branavan, Luke S. Zettlemoyer, and ReginaBarzilay.
2010.
Reading between the lines: learn-ing to map high-level instructions to commands.
InProceedings of ACL.S.
R. K. Branavan, David Silver, and Regina Barzi-lay.
2011.
Learning to win by reading manuals ina monte-carlo framework.
In Proceedings of ACL.Asli Celikyilmaz and Dilek Hakkani-Tur.
2012.
Ajoint model for discovery of aspects in utterances.In Proceedings of ACL.Asli Celikyilmaz, Dilek Hakkani-Tu?r, and Gokhan Tu?r.2011.
Mining search query logs for spoken languageunderstanding.
In Proceedings of ICML.David L. Chen and William B. Dolan.
2011.
Collect-ing highly parallel data for paraphrase evaluation.
InProceedings of ACL.David L. Chen and Raymond J. Mooney.
2011.
Learn-ing to interpret natural language navigation instruc-tions from observations.
In Proceedings of AAAI.Myroslava Dzikovska, Amy Isard, Peter Bell, Jo-hanna D. Moore, Natalie B. Steinhauser, Gwen-dolyn E. Campbell, Leanne S. Taylor, Simon Caine,and Charlie Scott.
2011.
Adaptive intelligent tuto-rial dialogue in the beetle ii system.
In Proceedingsof AIED.Kallirroi Georgila, James Henderson, and OliverLemon.
2005.
Learning user simulations for infor-mation state update dialogue systems.
In Proceed-ings of Eurospeech.Dilek Hakkani-Tur, Gokhan Tur, Larry Heck, AshleyFidler, and Asli Celikyilmaz.
2012.
A discrimi-native classification-based approach to informationstate updates for a multi-domain dialog system.
InProceedings of Interspeech.Peter Heeman.
2007.
Combining ReinforcementLearning with Information-State Update Rules.
InProceedings of ACL.Eric Horvitz, Jack Breese, David Heckerman, DavidHovel, and Koos Rommelse.
1998.
The Lumiereproject: Bayesian user modeling for inferring thegoals and needs of software users.
In Proceedingsof Uncertainty in Artificial Intelligence.Nate Kushman, Micah Brodsky, S. R. K. Branavan,Dina Katabi, Regina Barzilay, and Martin Rinard.2009.
WikiDo.
In ACM HotNets.Cheongjae Lee, Sangkeun Jung, Kyungduk Kim, andGary Geunbae Lee.
2009.
Automatic agenda graphconstruction from human-human dialogs using clus-tering method.
In Proceedings of NAACL.Xiao Li, Ye-Yi Wang, and Alex Acero.
2008.
Learn-ing query intent from regularized click graphs.
InProceedings of SIGIR.Percy Liang, Michael I. Jordan, and Dan Klein.
2009.Learning semantic correspondences with less super-vision.
In Proceedings of ACL-IJCNLP.F.
Mairesse, M. Gasic, F. Jurcicek, S. Keizer, B. Thom-son, K. Yu, and S. Young.
2009.
Spoken lan-guage understanding from unaligned data using dis-criminative classification models.
In Proceedings ofAcoustics, Speech and Signal Processing.Fabrizio Morbini, Eric Forbell, David DeVault, KenjiSagae, David R. Traum, and Albert A. Rizzo.
2012.A mixed-initiative conversational dialogue systemfor healthcare.
In Proceedings of SIGDIAL.Jorge Nocedal and Stephen J. Wright.
2000.
Numeri-cal Optimization.
Springer.Patric Pantel, Thomas Lin, and Michael Gamon.
2012.Mining entity types from query logs via user intent.In Proceedings of ACL.Paul Piwek and Svetlana Stoyanchev.
2010.
Generat-ing expository dialogue from monologue: Motiva-tion, corpus and preliminary rules.
In Proceedingsof NAACL.Paul Piwek and Svetlana Stoyanchev.
2011.
Data-oriented monologue-to-dialogue generation.
In Pro-ceedings of ACL, pages 242?247.Paul Piwek, Hugo Hernault, Helmut Prendinger, andMitsuru Ishizuka.
2007.
T2d: Generating dialoguesbetween virtual agents automatically from text.
InProceedings of Intelligent Virtual Agents.Verena Rieser and Oliver Lemon.
2008.
Learning ef-fective multimodal dialogue strategies from wizard-of-oz data: Bootstrapping and evaluation.
In Pro-ceedings of ACL.A.
Rizzo, Kenji Sagae, E. Forbell, J. Kim, B. Lange,J.
Buckwalter, J. Williams, T. Parsons, P. Kenny,David R. Traum, J. Difede, and B. Rothbaum.
2011.Simcoach: An intelligent virtual human system forproviding healthcare information and support.
InProceedings of ITSEC.Jost Schatzmann, Karl Weilhammer, Matt Stuttle, andSteve Young.
2006.
A survey of statistical user sim-ulation techniques for reinforcement-learning of dia-logue management strategies.
Knowledge Engineer-ing Review, 21(2).Konrad Scheffler and Steve Young.
2002.
Automaticlearning of dialogue strategy using dialogue simula-tion and reinforcement learning.
In Proceedings ofHuman Language Technology Research.Natalie B. Steinhauser, Gwendolyn E. Campbell,Leanne S. Taylor, Simon Caine, Charlie Scott, My-roslava Dzikovska, and Johanna D. Moore.
2011.1678Talk like an electrician: Student dialogue mimick-ing behavior in an intelligent tutoring system.
InProceedings of AIED.David R. Traum, Priti Aggarwal, Ron Artstein, SusanFoutz, Jillian Gerten, Athanasios Katsamanis, AntonLeuski, Dan Noren, and William R. Swartout.
2012.Ada and grace: Direct interaction with museum vis-itors.
In Proceedings of Intelligent Virtual Agents.Go?khan Tu?r, Dilek Z. Hakkani-Tu?r, Dustin Hillard, andAsli C?elikyilmaz.
2011.
Towards unsupervised spo-ken language understanding: Exploiting query clicklogs for slot filling.
In Proceedings of Interspeech.Adam Vogel and Dan Jurafsky.
2010.
Learning to fol-low navigational directions.
In Proceedings of ACL.Steve Young.
2010.
Cognitive user interfaces.
In IEEESignal Processing Magazine.1679
