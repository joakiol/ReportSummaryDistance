Fax: An Alternative to SGMLKenneth W. Clmrch, William A. Gale, Jonathan I. tlelfman and David D, LewisAT&T Bell Laboratories600 Mountain Ave.Murray Hill, NJ 07974, USAkwc @research.art.cornWe have argued elsewhere (Church and Mercer,1993) that text is more available than ever before,and that the availability of massive quantities ofdata has been responsible for much of the recentinterest in text analysis.
Ideally, we wotdd hopethat this data would be distributed in a convenientformat such as SGML (Goldfarb, 1990), but inpractice, we usually have to work with the data inwhatever format it happens to be in, since weusually aren't in much of a position to tell tim dataproviders how to do their business.
Recently, wehave been working with a collection of 15,000AT&T internal documents (500,000 pages or 100million words).
Unfortunately, this data is storedin a particularly inconvenient format: fax.It might seem odd to work with a corpus of faxes,but faxes might well be the way of the future.
Faxis used a lot more than SGML (especially over tele-phone networks).
SGML might be more con-venient for our research, but the world is using fax.So, what can we do with a corpus of faxes?
Rightnow, we might not consider a fax to be as"machine readable" as a text file, but if we set ourminds to it, it ought to be possible to do practicallyanything with a fax that can be done with a textfile.
In particular, it should be possible to search(grep) for sections of interest in a fax, cut them outof one document and paste them into another, oruse them as input to an arbitrary program.
If weare successful, the user shouldn't have to knowabout markup languages (e.g., SGML), tables,figures, floating displays, headers, footers,footnotes, columns, fonts, point sizes, charactersets (e.g., ascii, unicode), and all sorts of other"technical details."
As tar as the user isconcerned, the system is just faxes (or bitmaps),through and through.1.
Image EMACS: the Ultimate in WYS1WYGMany of the pieces of this proposal are wellunderway.
The Image EMACS editor (Bagley andKopec, 1992; Bush, 1993), for example, makes itpossible to edit bitmaps more or less the same waythat one edits a text file.
You can scan an imageinto the computer, change a few words, re-justify at~aragraph, and then print it out again.hnage EMACS is the nltimatc in WYSIWYG:what you see is what you get, and vice versa.
MostWYSIWYG editors do only half the job; they letyou print out what you see, but they don't let youscan it back in.
The round trip is key.
It makes itpossible to work with any document in any format.
(At worst, the document can be printed out andscanned into hnage EMACS.)
Most WYSIWYGeditors don't provide a complete round trip andtherefore their applicability is limited to a relativelysmall fraction of the world's documents, those thathappen to be formatted in a suitable marku I)language.2.
Fax-a-Query: the Ultimate in WYSIWYGInterfaces for Infurmation Retrieval (1R)Users will need to search bitmaps for sections ofinterest.
Traditionally, most IR systems have beendeveloped for collections of text files rather thanbitmaps.
The user types in a query and the systemretrieves a set of matching documents.
Some ot'these systems depend on manual indexing, e.g.,subject erms or hypertext links.
Others allow theuser to type in an arbitrary piece of text as input.Documents are retrieved lay matching wordsagainst the qt, ery and weighting appropriately(Salton, 1989).These systems have been extended to retrievebitnmps, by first pre-processing the bitmaps withan OCR program.
Although the OCR results arcfar from perfect, and users would complain aboutthe OCR errors if they saw them, the OCR outputhas been strewn to be more than adequate forretrieval purposes (Smith (1990), Taghva et al(toappear)).But why should a user have to type in a query?Why not provide a complete round trip capability?If OCR were used on the queries as well as on thedocuments, then the query could be a page of abook, article, a fax, or whatever.
As far as the useris concerned, the system is just laxes (or bitmaps),through and through.525Figure 1: An example of the fax-a-query prototype.
A user is reading a document in a bitmap browser (leftpanel), and comes across a topic of interest.
The user sweeps a box over an interesting section of thebitmap (inverse video at bottom of left panel), which causes the corresponding words (produced by OCR)to be sent to an information retrieval system.
A relevant document pops up in another bitmap browser(right panel).We call this proposal Fax-a-Query, and illustrate itin Figure 1.
A user is reading a document in abitmap browser, and comes across a topic ofinterest.
The user sweeps a box over aninteresting section of the bitmap, which causes thecorresponding words (produced by OCR) to besent to an information retrieval system.
Arelevant document pops up in another bitmapbrowser.Fax-a-Query is also useful for retrieving picturesas well as text.
Most picture retrieval systemrequire manual indexing, which can be veryexpensive.
However, since a picture is oftensurrounded by useful text such as a caption, onecan find the picture by matching on the text.We have applied a prototype Fax-a-Query systemto our database of 15,000 AT&T internaldocuments.
These documents were scanned iutothe computer by the AT&T library for archivalpurposes.
They are stored in TIFF, format at 400dots per inch, using Group 4 fax compression.
Ittook us about a minute per page or a year of realtime to OCR the collection and 40 hours of realtime to index the collcction with the SMARTinformation retrieval system (Salton and McGill,1983, chapter 4).
1 The bitmap browser wasborrowed li'om tbe Ferret system (Katseff,personal communication).Fax-a-Query was also designed to be usable fi'oma standard fax machine, for users that may be onthe road and don't have access to a terminal with awindow system.
A user could fax a query to thesystem ,and the system would fax back some1.
The OCR errors slow the indexing process considerablysince they make tile vocabulary too large to fit ill mainmemory.
Our data has a huge vocabulary (3 millionwords), most of which are OCR errors.
By comparisou, theTREC text collection (Dumais, 1994) has a much smallervocabulary (1million words).
The difference in vocabularysizes is especially significant given that TREC isconsiderably larger (2 gigabytes) tbau our OCR output (1gigabyte).526relevant documents.
In this way, a user could callthe borne office from any public fax machineanywhere and access documents in a fax mailt)ox,a private file computer, or a public library.
(Thiscapability is currently limited by the fact that OCRdoesn't work very well on low resolution faxes.)3.
Do We Need OCR?Fax-a-Query makes heavy use of OCR, hut doesso in such a way that users are often mtaware ofwhat is actually happening behind the scenes.hnage EMACS works directly on the pixels, inorder to avoid OCR errors.
Even though users canbe fairly well shielded from the limitations of theOCR program, the OCR errors are fiustratingnonetheless.Two examples of the word "pair" are shown inFigure 2.
Both examples were extracted flom thesame document, rot from different pages.
One ofthem was recognized correctly and tile other witsmisrecognized as "liair".
As can be seen inFigure 2, the two images are ahnost identical.Even a very simple-minded measure such asHamming distance would have worked better thanOCR, at least in tiffs case.The "liair" error wits probably caused byincorrectly segmenting the "p"  into two letters,and then labeling the left half of the "p"  its an'T '  and the second half as an 'T ' .
This error isparticularly inexcusable since the spacing of theletters within a word is completely determined bythe font.
There is no way that " l i"  should heconfusable with "p"  since it would requireshilling the "1" with respect o the " i "  in boththe horizontal and vertical dimensions in waysthat are extremely unlikely.
The Hammingdistance approach would not make this kind oferror because it works at the word-level ratherthan the character-level, and so it would not try toshift parts of words (or letters) around in crazyways.in general, we have found that two instances ofthe same word in the same document are oftenvery similar to one another, nmch more so thantwo instances from different doctnnents.
Figure 3,for example, shows a number of examples of theword "using" selected from two differentdocuments.
If we sum all of tile instances of"using" across the two documents, as shown inthe bottom-most panel, we get a mess, indicatingthat we can't use Hamming distance, or anythinglike it, for comparing across two documents.
Butif we sum within a single document, .
'is shown inthe two panels just above the bottom-most panel,then we find nmch better agreement, indicatingthat something like Hamming distance ought towork faMy well, as long as we restrict he searchto a single doenment.Ttte strong document effect should not hesurprising.
Chances are that all of the instances of"using" have been distorted in more or less tileslnne way.
They were p,obably all Xeroxed abouteqttally often.
The gain control on tile scannerwits probably fairly consistent throughout.
TheIbm is likely to be the salne.
The point size islikely to be the same, and so on.
Some authorsrefer to these factors its defects (Baird, 1992), trotwe prefer to think of thein its document-specificproperties.We have used this Ilamming distance approach tobuild a predicate that compares two boxes andtests whether the pixcls in the two boxescorrespond to the same word.
In tile case of thetwo "pairs" in Figure 2, for example, tilepredicate produces the desired result.
Thisdistance measure has been used to implement asearch corn,hand.
When the user clicks on aninstance of a word, the systent highlights the nextinstance of the same word, by searching thebitmap for the next phtce that has ahnost he samepixels.
2It is remarkable that this search commandmanages to accomplish nutch of what we had beettdoing with OCR, but without the C (it is word-based rather than character-based) attd withont heR (it doesn't need to recognize the words in orderto search for the next instance of tile same thing).This opens an interesting question: how muchnatural hmgtutge processing can be done withoutthe C and without he R?
For example, could wecount ngram statistics at the pixel-level withoutgiving the OCR program a chance to screw tip theCs and the Rs?4.
Conclusions: Bitnmps :tre The Way of TheFutureWe have been working with a large corpus offaxes (15,000 docnments or 500,000 pages or2.
It is possible to implement this search nmch moreefficiently by i)re-computing It few monmnts for each of thewords in the bitmap and using these moments to quicklyexclude words that are too big or too small, or too spreadout or llOt spread oat enough..527528100,000,000 words).
Faxes raise a number ofinteresting technical challenges: we need editors,search engines, and much more.
Of course, wewouldn't have to work on these hard problems ifonly people would use SGML.
But, people aren'tusing SGML.
SGML may be more convenient forus, but the world is using fax because it is moreconvenient for them.Fax hardware and software are everywhere:hotels, airports, news stands, etc.
Everyoneknows how to use a fax machine.
Wordprocessors are more expensive, and require moretraining and skill.
The markup issues, forexample, are very demanding on the users.
Part ofthe problem may be the fault of the markuplanguages, but the real problem is that theconcepts are just plain hard.
Most users don'twant to know about tables, figures, floatingdisplays, headers, footers, footnotes, columns,fonts, point sizes, character sets, and so on,Libraries are scanning large numbers ofdocuments because scanning has become cheaperand more convenient than microfiche.
Our libraryis scanning 105 pages per year.
Our library hasalso been trying to archive "machine readable"text files in addition to the bitmaps, but withsomewhat less success.
Because it is too expenseto re-key the text, they have been asking authorsfor text files, but most authors aren't verycooperative.Even when the text file is available, we shouldalso archive the bitmap as well, because thebitmap is more likely to survive the test of time.We tend to think of the text file as the mastercopy, and the bitmap and the hardcopy as a by-product, when in fact, it should probably be theother way around.
When the first author wasfinishing his Ph.D., he had to generate a copy ofthe thesis for archival purposes.
At the time, itseemed that the school library was stuck in thestone age, because they insisted on a hardcopyprinted on good paper, and they were notinterested in his wonderful "machine readable"electronic version.
In retrospect, hey made thefight decision.
Even if the tapes had not rotted inhis basement, he still couldn't read them becausethe tape reader is long gone, and the tape format isnow obsolete.
The markup language is alsoprobably dead (does anyone remember R?
), alongwith the computer (a PDP-10), the operatingsystem (ITS), and most other aspects of thehardware and software that woulff be needed toread the electronic version.The debate between text files or bitmaps isanalogous to the old debate between character-based terminals such as a VT100 and bitmapterminals.
At the time, bitmap terminals eemedwasteful to some because they required what wasthen a lot of memory, but nowadays, it is hard tofind a character-based terminal anywhere, and it ishard to remember why anyone would have wantedone.
How could you run a window system onsuch a terminal?
How could you do anyinteresting raphics?
There were solutions, ofcourse, but they weren't pretty.So too, there might soon be a day when peoplemight find it hard to imagine why anyone wouldwant a text file.
How could you do any interestinggraphics?
Equations?
There are solutions(markup and include files), but they aren't pretty.Of course, bitmaps require a little more space (a400 dpi G4 fax takes about 20 times the space asthe equivalent text file), but the bitmap is so muchmore powerful and so much easier to use that it iswell worth the extra space.ReferencesBagley, S. and Kopee, G. (1992) "Editing Images of Text,"Xerox, PARC.Baird, H. (1992) Document hnage Defect Models, in Baird,Bunke and Yam,'unoto (eds.)
Structured Document hnageAnalysis, Springer-Verlag, Berlin, Germany, pp.
546-556.Bush, M. (1993) Speech and Text.hnage Processing inDocuments, ARPA Human Language Technology, MorganKaufmann Publishers, San Francisco, CA, USA., pp.
376-380.Church, K. and Mercer, R. (1993) "lnt~3duction t  the SpecialIssue on Computational Linguistics Using Large Corpora,"Computational Linguistics, 19:1, pp.
1-24.Dumais, S. (1994) "Latent Semantic Indexing (LSI) andTREC-2," in Ilarman, D.
(ed.)
The Second Text REtrievalConference (TREC-2), National Institute of Standards andTechnology, Gaithersburg, MD, USA.Goldfarb, C. (1990) "The SGML l-landbook," ClarendonPress.Salton, G. and McGill, M. (1983) Introduction to Modernhlformatian Retrieval, McGraw-Hin Book Company, NewYork, NY, USA.Salton, G. (1989) Automatic Text Processing, Addison-WesleyPublishing Co., Reading, MA, USA.Smith, S. (1990) "An Analysis of the Effects of DataCorruption on Text Retrieval Perform,'mce," ThinkingMachines Corp., DRg0-1, Cambridge, MA, USA.Tughva, K, Bo~ack, J. and Condit, A.
(to appear) "Results ofApplying Probabilistic IR to OCR Text," in SeventeenthInternational ACM SIGIR Conference on Research andDevelopment i  Information Retrieval.\[\] browser - - -~I l l .
t..,/, 7. :..J --;.
IFigure 2: Two instances of the word "pair" and their pixel-wise differences.
The pixel-wise differencesshow that the two images are ahnost identical, and yet, one was recognized correctly as "pair" and theother incorrectly as "l iair".
Even a very simple-minded measure such as llamnfing distance would haveworked better than OCR, at least in this case.u sltu/ l /us ingslngjI ~ ~  .
.
.
.
- I  ~c~ ~ - -\]usmgl s lnW .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
TOFigure 3: Hamming distance is ranch more ai~propriate within documents than across documents.
Theupper left shows 9 insta,lces of "using" extracted from one docume,~t and the upper right shows 4 moreinstances extracted from another document.
The 9 instances are summed into one image (middle left) andthe 4 instances are summed into another image (iniddle right).
These two images (middle left and middleright) indicate a high degree of interhal consistency within a document.
The bottom image is the sum of all13 instances.
Clearly, there is more consistency within documents than across documents.529
