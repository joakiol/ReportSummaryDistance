PROOF-NETS AND DEPENDENCIESAlain LECOMTEGRILUniversit6 Blaise Pascal34 Avenue Carnot63037- CLERMONT-FERRAND codex(France)AbstractProof-Nets (Roorda 1990) are a good device for processingwith eategorial grammars, mainly because they avoidspurious ambiguities.
Nevertheless, they do not provideeasily readable structures and they hide the true proximitybetween Categorial Grammars and Dependency Grammars.We give here an other kind of Proof-Nets which is muchrelated to Dependency Structures imilar to those we meetin, for instance (Hudson 1984).
These new Proof-Nets arecalled Connection Nets.
We show that Connection Netsprovide not only easily interpretable structures, but alsothat processing with them is more efficient.
11 , In t roduct ionNowadays, two formalisms are very attractive in NaturalLanguage Processing:- Categorial Grammars, and- Dependency Grammars.Numerous tudies try to shed light on their similaritiesand differences.
We may quote for instance works byHudson (1984, 1990), Barry & Picketing(1990), Hausser(1990), Hepple (1991).
One interesting particularitycommon to these two formalisms eems to be thecapacity of leading to an incremental processing, which,in turn, leads to an on-line processing.Moreover, these formalisms are now very well known.Categorial Grammars have been much studied recently,particularly since the article of Ades and Steedman(1982) and the re-discovering ofprevious works done byLambek (1958, 1961).
The most comprehensive formtaken by Categorial Grammars i the Lambek Calculus,studied by many authors like Moortgat (1988, 1990),Buszkowski (1986, 1988), Descl6s (1990)etc.
Since therecent work by J-Y Girard (see for instance Girard 1987),which led to the framework of Linear Logic, it hasbecome apparent that the Lambek Calculus amounts to anon-commutative rsion of a sub-system of LinearLogic, where a structural rule forbids seqnents with anempty antecedent.Semantic properties of this system have been studied byBuszkowski (1986, 1988) and Wansing (1990).
Twomodels are often given: one consists of residuationsemigroups spread over free semigroups, and another oneis given by the directional typed lambda-calculus.Dependency Grammars are originating from earlier worksby the French linguist Tesnitre (1965).
They weretheoretically studied by Gaifman, who demonstratedtheorems on the Generative Capacity of DependencyGrammars.
We will consider here that the formalism of"Word Grammar" (Hudson 1984, 1990) is representativeof this trend.Our purpose in this communication is to show thatbuilding dependency structures gives an other kind ofsemantics for the Lambek Calculus and varioussubsystems.
This semantics is useful in that it willallow us to conceive extensions of the LambekCalculus.
Moreover, the correspondance proposedbetween these two aspects provides us with a method ofparsing related to the conception of "parsing asdeduction", together with a method for avoiding spuriousambiguities.
We will show that it is isomorphic to themethod of proof-nets (Girard 1987, Danos and Regnier1989, Roorda 1990, 1991), but that it has the advantageover this last method of being more effieient and ofproviding more clarity on the result of processing.
Thedevices we obtain are more readable, because they areinterpretable in terms of dependency structures.Otherwi~, the parsing method can be an incrementalone.2.
The Method of Proof-Nets in the LambekCa lcu lusThe problem of spurious ambiguities in CategorialGrammar is very often discussed (see for instanceHendriks and Roorda (1991)).
A proof-net is a devicewhich contains all the equivalent proofs of the sameresult.
As Roorda (1990) says: "A proof-net can beviewed as a parallellized sequent proof \[...\] It is aconcrete structure, not merely an abstract equivalenceclass of derivations, and surely not a special derivationwith certain constraints on the order in which the rulesmust be applied.
"The principles of construction of proof-nets are related tothe inference rules of the Lambek Calculus, when it isviewed as a sequent calculus.
If we here omit theproduct, we have the following rules, which belong totwo different types:1 1 am indebted to Dirk Roorda for fruitful discussionsduring a brief visit I made in Amsterdam in Spring 1991Ac'rv_s DE COL1NG-92, NANTES, 2.3-28 hofrr 1992 3 9 4 Pgoc.
OF COLING.92, NANTES, AUG. 23-28, 1992Binary  rules (or type-2 rules):(where O is a non-empty sequence of categories, and Fand A are arbitrary sequences of categories) 2\[L/I: O--4B F, A, A -4 C. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.F, A/B, O, A --~ C\[L\\]: O -~ B F, A, A --7 CF, O, B\A, A --~ CUnary rules (or type-I rules): (F is non empty)\[R/l: 0 ,  B --~ A \[R\\]: B, @ ~ A@~A/B O~BXAIn these rules, contexts (O, F, A) are "static".
Thatmeans that they can neither be contracted, nor expanded,nor permuted.
They play no role in the application ofrules.
So, it is convenient to "forget" them and torepresent the rules according to schemes similar to:A*BSuch a scheme is called a link.
Other types of links areprovided by the identity axiom: \[axl A---~A, whichbecomes:r - - - - - - - - i  +A Aand by the cta-rule:O-- )A  A, A, F --~ C\[cut\]: .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
which becomes:A, O, F -o  C+A ALinks associawal to rules belong to two type.s:type-2 links corresponding to type-2 rules(depicted by lines)type-I links corresponding to type-1 rules(depicted by dashed lines)D. Reorda (1990) has shown the following theorem:Theorem: (Soundness and Completeness of Proof-Netsw.r.t.L.
)2 We use here the notation introduced by J. Lambek,according to which the argument category is always underthe slash, in such a way that Aft\] means a category whichbecomes an A if a B is met on file right, and BXA a categorywhich becomes an A if a B is met on tlie left.If the rules \[L\\], \[L/J, JR\\], \[R/I are represented by thefollowing links:+ +A B I3- AA~I3 B/A+ +B d d B ?
?
?
?A~B B/Athen a sequent F --~ A is a theorem of the (Product free)Lambek Calculus if and only if we can build, startingwith this sequent and applying links re, cursively, aconnected planar graph having the following property:for each application of a typed link, every suppressionof one of the two dashed lines leaves the graphconnected.Examples :a -', b / (a \ b) is a theorem: see figure (1) below.b / (a \ b) ~ a is not a theorem: see figure (2) below.figure (1):b/&,)figure (2):r - -ab/(aXb) +aIn this last ease, we see that file suppression of the edge2 leads to disconnection.3.Dependency  St ruc turesA dependency structure associated toa sentence is a treeon the words of this sentence.
Edges representdependency links such that the source of an edge isconsidered as the head and the target as a dependant.Hudson (1984) givcs criteria to distinguish eads anddependants.
It is an open question whether a head can bevicwed as a functor, the dependant being viewed as anargumenL The facts that criteria involve agreement andACTES DE COLING-92, NANTES, 23-28 AO'tYr I992 3 9 5 Paoc.
OF COL1NG-92, NANTES, AUG. 23-28, 1992that according to the Keenan's thesis: "functors agreewith their argument" seem in favour of identification.But other scholars disagree, like Moortgat and Morrill,who introduce in their recent works, four notions: head,dependant,functor and argument.
Nevertheless, we willaccept the first thesis in the following, adopting theconception of Barry and Pickering (1990) on thissubjecLAnother problem appears in the necessity of accountingfor slructums with multiplicity of heads (in Ihe case ofthe control of infinitives for instance) because thisnecessity leads to graphs which are no longer trees, butdags.We assume that a dependency structure is a graph onwords, In a first step, we will consider only trees.
Theapproach will be that of a semantic interpretation iterms of wee.s, similar to what we do when we give asemantic interpretation of logic formulae in terms ofsets.
The usual operators like / and \ will be interpretedas connection operations in an algebra of trees.
In asecond step, we will have to modify this interpretationin order to obtain not only application and compositionbut division too.4.Operations on TreesWe start with a set of directed trees associated to lexicalentries.
(see figure (3) below).figure (3)c o nnai t: Anp npprometnp sp\[A\]nptrees are called initial trees.
The initial state of arepresentation f the structure of a sentence consists inan ordered sequence of these initial trees, Then, at each~aep.
we build a new tree obtained by connection ofprevious trees, These operations are: (cf Lecomte 1990)- left-linkage- right-linkageA tree GI is right (resp.
left) linkable to a tree G2 iff:I) G 1 and G2 are adjacent, G2 being adjacent to the right(w.ap, left) ofG 12) GI has a rightmost (resp leftmost) branch the firstedge of which is right (resp left) directed and themaximal sub-tree attached to this first edge entirelycovers a continuous ubtree of G2.The by-product of the right-linkage (resp left-linkage) ofGI with G2, when GI is right (resp left) linkable to G2is the tree G3 obtained as the union of G 1 and G2,modified in the following way:The rightmost dght-direeted (resp.
leftmost left-directed)first-levd edge of G 1 is connected to the root of G2, andthe subtree of G2 covered by the maximal subtreeattached to this edge is said to be marked in G2.
Left(res'p.
right)-directed ges of G 2 which are not markedromainfree and take precedence in the left-to-right (respright-to-left) order of first-level edges over thoseremaining free in G 1.We can introduce restrictions on these operations:we will call restriction-AB the following constraint: hesubtree of G 2 covered by the subtre,  of G1 must beidentical to the whole tree G2,restriction-C: at most the rightmost (rcsp leftmost)branch of G2 may be uncovered.restriction-Crec: aright (resp left) subtree of G2 may beuncove~drestriction-Cmix: at most the rightmost (resp leftmos0or the leftmost (resp rightmost) branch of G2 may beuncoveredDefinition: we call connection tree every initial treeand every tree obtained by the application of linkageoperations on earlier connection trees (according toeventual restrictions).We claim that such a system gives an interpretation fvery simple categorial grammars, depending on therestrictions we select.
Like similar constructions(Stoedman 1991) where general principles such asAdjacency, Directional Consistency and DirectionalInheritance arc explained in terms of a more detailedanalysis of categories, this system is suited to expresssuch generalities.
Because of the structure of linkageoperations, these principles are obvious.
Adjacency andDirectional Consistency are contained in the definition.Directional Inheritance comes from the fact that we neverallow to change anything in the labels of edges (the factthat they are left or right directed).
We only allow mchange tile status of an edge (free to bound or marked).
Inso doing, we reach, like Steedman does.
the conclusionthat so-called Dysharmonic Composition Rules areconsistent with these principles (even if they are notwith the Lambek Calculus\[).A connection system eliminates purious ambiguitiesbecause when they are bound, links are undefeasable :there is no way of re-doing something that wasprimilarly done with success.
In this respect, thecalculus on trees concurs with the well known method ofchart-parsing.
(see figure (4): there is only one tree fortwo reductions by means of Cancellation Schemes).Ac'rF.s DE COLING-92, NANTES, 23-28 AOt~'r 1992 3 9 6 PREC.
OF COLING-92, NANTES, AUO.
23-28, 1992figure (4):a/ (c\b) (c\b) /dc \bd>aa/(c\b) (c\b)/da/dd>Ba/Moreover, a connection system provides us with asemantics for Dependency-Constituency Grammars, inthe tradition of Barry and Picketing (1990) and MarkHepple (1991).5.Connect ion  and  Ident i f i ca t ion :  an  Extens iono f  Connect ion  Systems5.1.The Need for Division RulesIt is obvious that the previous ystem does not includeany kind of Division Rules or any kind of Type-RaisingRule.
So, it cannot provide any analysis for sentenceswith extraction, as for instance:le livre dont je connais le titre est sur la table(the book the title of which I know is on the table)because in such an analysis, we have to transform aregular n (titre) into a functorial category which requiresa nonn-tandifier on its right (n/(nkn)).We shall define a new connection system which is aconservative extension of the previous one (except forthe admissibility of Dysharmonic Rules).
We will callit: the Connection Net System.As for the proof-nets, we want to demonstrate theoremsthat have a sequent form like: F---~ X, where F is a nonempty sequence of categories and X is a category.
Wedistinguish two kinds of connection Irees: those whichare on the right-hand side of the sequent we want todemonstrate, and those which are on the left-hand side.When we are viewing the problems in a natural-deduction way, we can say that the first are the trees tobuild and the second are those which are used in thistask.
We will call the firstright-trees and the second left-trees.
The set  of left-trees and right-trees at any stagewill be called a Construction Net.Schematically, operations are not merely connectionsbecause connections can only expand elementary treestowards more complex ones.
And we need operations toreduce the complexity of a tree.
For instance, to showthe usual rule of Type-Raising: a ~ b/(a~b) we have toshow that the fight-tree associated to b/(a~b) reduces tosomething isomorphic to a.
The fact that, generally, theconverse (b/(a~)-oa) is not true results from the fact thatthe same reduction is not possible when the same tree isput on the left-hand side.
This exemplifies thefundamental dissymetry of the calculus.5.2.Type-I Edges and Type-2 EdgesWe will then distinguish two sorts of edges and twosorts of nodes in a connection tree: typed edges andnodes and type-2 edges and nodes.Def in i t ion :  A type-2 edge in a connection tree is:- an odd level edge in a left-tree, or- an even level edge in a right-treeA type-1 edge in a connection tree is:- an even level edge in a left-tree, or- an odd level edge in a right-treeA type-i (i =1.2) node is the target of a type-iedge.Roots are type-1 nodes if in a left-tree, and tyl~-2 nodes if in a right-tree.Two nodes are mid to be complementary if they have notthe same type.Examples: figure (5)a) a new tree assigned to a lexical entry:prometnp ,," s \[infl sp\[/l\]npb) a pair (L, R) associated toa sequent:a ~ b/ (a\b)b % ,L RDef in i t ion :  we call identification link either a non-directed edge which links two identical nodes which arecomplementary, one in a left-tree, the other in a right-tree, or a type-I directed edge linking two comple-mentary nodes having same label.We call connection link every link we shall be able toestablish, according to the following conventions,between a typo-I node, which is the ending point of aACRES DE COLING-92, NANTFm, 23-28 Aotrr 1992 3 9 7 PRec.
OF COLING-92, NANTES, AUG. 23-28, 1992type-2 edge, and a type-2 node which does not belong tothe same tree.5.3.Nodes-numberingRule: each node of the initial construction net receives anumber, called its degree, according to the followingroles:-for a type-2 edge:if it is right directed, the degree of its source is lessthan the degree of all the nodes below it,if it is left directed, the degree of its source isgreater than the degree of all the nodes belowit,for two type-2 edges, children's degrees of theleftmost branch are less than those of therightmost branch.-for a type-1 edge:if it is right directed, the degree of its source isgreater than the degree of all the nodes belowit,if it is left directed, the degree of its source is lessthan the degree of all the nodes below it,for two type-I edges, children's degrees of therightmost branch are less than those of theleftmost branch.The lowest degree of the right successor of an initialtree is the successor of the greatest degree of thislatter tree.Example of such a numbering: figure (6).
.
.
.?
",%L Rintervals:s'-s' : \ [1_8\ ]s-s : \[3 _ 41np-np : \[2 _ 7\]s-s: \[5_61Each link is now associated to a pair of degrees, calledits interval.From now on, L and R will denote respectively: the lefthand side and the right hand side of a Construction Net.The Construction Net will be denoted by: <L I R>.5.4.Linking the NodesNodes will be linked according to the followingprinciples:COMPLEMENTARITY: two nodes are linked only ifthey have the same label and they are of complementarytypes.NON-OVERLAP: the linking of all the nodes in theConstruction Net must meet the non-overlapconvention, which stipulates that given two arbitraryintervals, either one contains the other or they aredisjoint.Theorem: (Conservativity of Connection Operations)The Non-Overlap condition is a conservative extensionof the conditions on connection (restriction C rec)stipulated in ~4.
That means: every connection systembased on C rec, when translated in the Connection NetSystem, follows this convention.5.5.Building a Correct NetDefinition: Given an ordered sequence of left-trees Land a right-tree R, we will say that L and R yield acorrect net iff there is a linkage of all the nodes in theConstruction Net <L I R>, which gives a connectedgraph, respects the complementarity principle and thenon-overlap rinciple, and is such that: when all therype-I edges are removed, the graph remains connected.The fundamental result is the following:Theorem:  (Soundness and Completeness w.r.t.
A 3)Let F --~ A be a sequent expressed in theProduct-Free Lambek Calculus, where F is a nonempty sequence of categories and A is acategory, let L be the sequence of left connectiontrees associated to the elements of F and R bethe right tree associated to A, the sequent is atheorem if and only if L and R yield a correctneL In other terms: the Connection Net Systemis sound and complete w.r.t, the Product-FreeLambek Calculus,Examples: figure (6) shows that:s/(s/np) s/((s/np)ks) I-- sis a theorem of the Lambek Calculus.Figure (7) below gives a correct net for the analysis ofthe sentence:le livre dont je connais le litre est sur la table3 A is the usual designation of the Product-Free LambekCalculus (see Zielonka 1981).AcrEs DE COLING-92, NANTES, 23~28 AOUT 1992 3 9 8 PROC.
OF COL1NG-92, NANTES, AUO.
23-28, 1992(figure 7):np npXnp/(s/(npXnp))np n ks/np np np\s ~ sn p ~  sTheorem: (Categorization fLinks) In a correct net,links are either identification links or connection links.Corol lary: A net is correct if and only if all nodes areeither identified or connected.Def in i t ion:  we call Tree on words the tree obtainedfrom a correct net by merging connected nodes andremoving identification links.
In the case of anidentification link consisting in a type-1 edge, the linkand the nodes linked by it are removed, and the adjacenttype-2 edges are merged.Example: figure (g): Pierre promet dMarie de venirnp s sp\[~t\] s___ ii snp6.
Bui ld ing DependenciesObtaining a Dependency Structure from a tree on wordsamounts to doing little transformations on the correctnet obtained by "equating" an ordered sequence of initialtrees to a node representing a primitive category.
Thesetransformations i volve indexing nodes in such a waythat:- indices of two different initial trees constitute twodisjoint sets.- indices inside an initial tree may be identical (if wewant o express acoreference)- linking two nodes results in identifying theirindices.Example: figure (9)prometnp \[i\] O~#:  s \[infl sp\[~\] [j\]np \[i\]spJ~l lkla "~ np\[klAfter getting a tree on words, we identify two distantnodes having the same index: we call the new nodeobtained: a shared node.Finally, we can say that dependencies are obtained in thefollowing stages:1 ~ indexing the nodes having the same label andbelonging to different initial trees by different variables,taken in a set {i, j, ...} (the distribution of indices insidean initial tree being set by the lexicon) \[INDEXING-step\].2-building the net corresponding to theassertion that he sequence is of type s \[NET-step\].3- suppressing the nodes identified by type-1edges of the left-hand side and all the identification links\[COLLAPSING-step\].4- if the same index appears on distinct nodeshaving the same label: merging them \[MERGING-step\]Example: figure (10)Pierre promet fi Marie de venir\ [ ~  s \[inflnpO=kJ \[~\[11 li=l}yields:np \ [ i ~ ~ l n  flbut, with permet instead of promet:permet e ~ ~  ~npli\] O,,~'s\[inf\] sp\[~\] \[j\]np\[JlPierre permet d Marie de venir:n p ~ACRES DE COLING-92, NANTES, 23-28 AOOT 1992 3 9 9 PROC.
OF COLING-92, NANTES, AUG. 23-28, 19927.Remarks and ConclusionThis method of Connection Nets has many advantagesover other methods.Firstly, compared to classical strategies in the sequentcalculus, it avoids purious ambiguities and in so doing,it improves efficiency of searching the solution.Secondly, compared to the method of Proof-Nets, itgives more clarity to the resulting structures.
It is moreefficient oo, because the stage of checking the coanexitywhen suppressing a branch of a type-1 link is replacedby a stage where the connexity is checked only once:when we have removed all the type-1 edges.
Thecorresponding stage in Proof-Nets is usually namedswitching.
In the early method by Girard which used the"long lrip condition", there was a switch for each linkand that gave an exponential-time algorithm (in thenumber of links).
In the method efined by Roorda, onlytype-1 links lead to switches.
The reason lies in thenecessity of checking that a type-1 link is not used toconnect wo subsets of the net, which would not beconnected without it.
(Let us recall that a type-I linkrefers to a unary rule).
In our method, switches arecompletely avoided.Thirdly.
it can be done incrementally.
The reason is thatthe numbering of nodes is consistent with the order ofinitial trees.
Thus, at each stage of the processing fromleft to right, we may have a beginning net whichrepresents he present state of the processing.
Here, theproperties of left-associative grammars (Hausser 1990)are reeLFinally, a very few transformations are needed in order toobtain graphs on words which can be really interpreted asDependency Structures.BIBLIOGRAPHYAdes, A. and Steedman, M.: 1982, 'On the Order ofWords', Linguistics and Philosophy4, 517-558.Barry, G. and Morrill, G.: 1990.
(Eds) Studies inCategorial Grammar.
Edinburgh WorkingPapers in Cognitive Science, Volume 5.
Centrefor Cognitive Science, Edinburgh.Barry, G & Picketing, M.: 1990; 'Dependency andConstituency in Categorial Grammar', in Barry,G.
and Morrill, G. 1990 and Lecomte, A.1992.Buszkowski 1986; 'Completeness Results for LambekSyntactic Calculus', Zeitschr.
f. math.
Logikund Grundlagen d.Math.
32, 13-28.Buszkowski 1988; 'Generative Power of CategorialGrammar',in R.Oehrle, E.Bach et D.Wheeler(eds) Categorial Grammars and NaturalLanguages Structures.Danos, V. and Regnier, L.: 1989, 'The structure ofmultiplicatives' Arch.
Math.
Logic, 28, 181-203.Descl~,s, J.P.: 1990, Langages applicatifs, languesnaturelles elcognition, Hermes, Paris.Girard 1987; 'Linear Logic', Thoreticol ComputerScience 50, 1-102.Hausser, R.: 1990, Computation of Language,Springer-Verlag, Berlin, Heidelberg.Hendriks, H. and Roorda, D.: 1991, 'SpuriousAmbiguity in Categorial Grammar', deliverableof the ESPRIT project BRA 3175 DYANA.Hepple, M.:1991, 'Efficient Incremental Processingwith Categorial Grammar' Proceedings of ACL1991, Berkeley.Hudson, R.A.: 1984, Word Grammar, Blackwell,Oxford.Hudson, R. A.: 1990, English Word Grammar,Blackwell, Oxford.Lambek, J.: 1958, 'The Mathematics of SentenceStructure',AmericanMath.Monthly 65,154-170.Lambek, J.: 1961, 'On the Calculus of Syntactic Types'in Structure of Language and its MathematicalAspects, AMS, Providence.Lecomte, A.: 1990, 'Connection Grammars: a Graph-Oriented lntertn'etation fCategorial Grammars'in Lecomte, A.
(ed), 1992.Lecomte, A.: 1992.
(ed.
)Word Order in CategorialGrammar, ADOSA, Clermout-Ferrend.Moortgat, M.: 1988; Categorial Investigations.
Logicaland Linguistic Aspects of the LambekCalculus, Dordrecht, Foris.Moortgat, M.: 1990, 'Proof nets, partial deduction andresolution - Part 2' in Lecomte, A.
1992.Oehrle, R.,Bach, E.and Wheeler, D. (eds): 1988,Categorial Grammars and Natural LanguagesStructures, D. Reidel Publishing Company,Dordrecht et Boston.Roorda, D.: 1990, 'Proof nets, partial deduction andresolution - Part 1' in Lecomte, A.
1992.Roorda, D.: 1991, Resource Logics: Proof-theoreticalInvestigations, PhD Thesis, Faculteit vanWiskunde n informatica, Amsterdam.Steedman, M.: 1991, ~I'ype-Raising and Directionalityin Combinatory Grammar', Proceedings ofACL 1991, Berkeley.TesniSre, L.: 1965, Eldments de syntaxe structurale,Klincksieck, Paris.Wansing, H.: 1990, Formulaes-as-types for atlierarchy of Sublogics of IntuitionisticPropositional Logic, Gruppe fiir Logik,Wissentheorie und Information an der FreienUniversit~t Berlin.Zielonka, W.: 1981, 'Axiomatizability of Ajdukiewicz-Lambek Calculus by Means of CancellationSchemes' Zeitschr.
f. math.
Logik undGrundlagen d. Math.
27, 215-224.ACRES DE COLING-92., NANTES, 2.3-28 ^OUT 1992 4 0 0 PROC, OF COLING-92, NANTEs, AUG. 23-28, 1992
