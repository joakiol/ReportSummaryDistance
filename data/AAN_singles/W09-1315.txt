Proceedings of the Workshop on BioNLP, pages 117?124,Boulder, Colorado, June 2009. c?2009 Association for Computational LinguisticsTransforming Controlled Natural Language Biomedical Queriesinto Answer Set ProgramsEsra Erdem and Reyyan YeniterziFaculty of Engineering and Natural SciencesSabanc?
UniversityOrhanl?, Tuzla 34956 Istanbul, TurkeyAbstractWe introduce a controlled natural language forbiomedical queries, called BIOQUERYCNL,and present an algorithm to convert a biomed-ical query in this language into a programin answer set programming (ASP)?a for-mal framework to automate reasoning aboutknowledge.
BIOQUERYCNL allows users toexpress complex queries (possibly containingnested relative clauses and cardinality con-straints) over biomedical ontologies; and sucha transformation of BIOQUERYCNL queriesinto ASP programs is useful for automat-ing reasoning about biomedical ontologies bymeans of ASP solvers.
We precisely describethe grammar of BIOQUERYCNL, implementour transformation algorithm, and illustrate itsapplicability to biomedical queries by someexamples.1 IntroductionThe rapid increase in the popularity and usage ofWeb leads researchers to store data and make it pub-licly available in many ways.
In particular, to facili-tate access to its desired parts, it is stored in a struc-tured form, like ontologies.
These ontologies canbe queried with an SQL-like formal query language.However, since these ontologies have been devel-oped for and widely used by people that lacks thenecessary knowledge in a formal query language,a simpler and more commonly known language isneeded to represent queries.
A natural language isthe perfect answer, but ambiguities in its grammarand vocabulary make it difficult to automate reason-ing about queries in natural language.
Therefore, torepresent queries, we consider a middle ground be-tween these two options: a Controlled Natural Lan-guage (CNL).A CNL is a subset of a natural language, with a re-stricted grammar and vocabulary, that overcomes theambiguity of natural languages.
Since we considerqueries in a specific domain, namely biomedicine,and over specific sources of information, namelybiomedical ontologies, a CNL designed and devel-oped for reasoning about biomedical ontologies issufficient to represent biomedical queries.
Essen-tially, a CNL is a formal language but with a lookof a natural language.
Therefore, compared to anatural language, a CNL can be easily converted tosome other formalisms.
This allows us to use au-tomated reasoners, specifically developed for suchformalisms, to find answers to queries expressed ina CNL.One such formalism is Answer Set Programming(ASP) (Baral, 2003).
ASP is a new knowledge rep-resentation and reasoning paradigm which supportsrepresentation of defaults, constraints, preferences,aggregates, etc., and provides technologies that al-low us to automate reasoning with incomplete in-formation, and to integrate other technologies, likedescription logics reasoners and Semantic Web tech-nologies.
For instance, in (Bodenreider et al, 2008),the authors illustrate the applicability and effective-ness of using ASP to represent a rule layer that inte-grates relevant parts of some biomedical ontologiesin RDF(S)/OWL, and to compute answers to somecomplex biomedical queries over these ontologies.Although CNLs are appropriate for expressingbiomedical queries, and methods and technologies117Figure 1: Architecture of the Overall Systemof ASP are appropriate for automated reasoningabout biomedical ontologies, there is no algorithmto convert a CNL biomedical query into a program.In (Bodenreider et al, 2008), biomedical queries arerepresented as programs in ASP; however, these pro-grams are constructed manually.
However, manuallyconstructing ASP programs to represent biomedi-cal queries is not only time consuming but alsorequires expertise in ASP.
This prevents automat-ing the whole process of computing an answer to aquery, once it is given in a CNL.In this paper, we design and develop a CNL(called BIOQUERYCNL) for expressing biomedicalqueries over some ontologies, and introduce an al-gorithm to convert a biomedical query expressed inthis CNL into a program in ASP.
The idea is to au-tomatically compute an answer to the query usingmethods of (Bodenreider et al, 2008), once the usertypes the query.
This idea is illustrated in Figure 1.Similar approaches of using a CNL for queryingontologies have been investigated in various stud-ies.
For instance, (Bernstein et al, 2005) consid-ers queries in the controlled natural language, At-tempto Controlled English (ACE) (Attempto, 2008),and transforms them into queries in PQL (Klein andBernstein, 2004) to be evaluated by a query engine.
(Bernstein et al, 2006) presents a system that guidesthe user to write a query in ACE, and translates thequery into SPARQL to be evaluated by the reasonerof JENA (Jena, 2008).
On the other hand, (Kauf-mann et al, 2006) transforms a given natural lan-guage query to a SPARQL query (using the Stan-ford Parser and WORDNET) to be evaluated by areasoner like that of JENA.
Our work is differentfrom these studies in two ways: we consider queriesover biomedical ontologies (thus different forms ofqueries, and vocabulary), and we transform a queryinto an ASP program to automate reasoning over arule layer presented in ASP.Transformations of natural language sentencesinto ASP has been studied in (Baral et al, 2008) and(Baral et al, 2007).
In (Baral et al, 2008), the au-thors introduce methods to transform some simpleforms of sentences into ASP using Lambda Calcu-lus.
In (Baral et al, 2007), the authors use C&Ctools (CC, 2009) to parse the some forms of natu-ral language input, and perform a semantic analysisover the parser output using BOXER (Boxer, 2009),to do reasoning in ASP.
Our work is different in thatwe consider a CNL to express queries, and intro-duce a different method for converting CNL to a pro-gram in ASP, via Discourse Representation Struc-tures (DRS) (Kamp, 1981).In the rest of the paper, first we briefly discussASP with some examples (Section 2).
Then we de-fine the grammatical structure of BIOQUERYCNLand give some examples (Section 3).
Next, weintroduce our algorithm for transforming a BIO-QUERYCNL query into an ASP program and ex-plain it by an example (Section 4).
We concludewith a discussion of challenges related to the im-plementation of our algorithm (Section 5) and otherrelated problems that we are working on (Section 6).2 Answer Set ProgrammingAnswer Set Programming (ASP) (Lifschitz, 1999;Marek and Truszczyn?ski, 1999; Niemela?, 1999;Baral, 2003) is a new knowledge representationand reasoning paradigm which supports representa-tion of defaults, constraints, preferences, aggregates,etc., and provides technologies that allow us to auto-mate reasoning with incomplete information, and tointegrate other technologies, like description logicsreasoners and Semantic Web technologies.In ASP, knowledge is represented as a ?program?
(a finite set of ?rules?)
whose meaning is capturedby its models (called ?answer sets?
(Gelfond andLifschitz, 1988)).
Answer sets for a program canbe computed by ?answer set solvers?
such as DLV118(DLV, 2009).
Consider for instance the program:gene_gene(??ADRB1??,??CHRM5??).gene_gene(??CHRM1??,??CHRM5??
).chain(X,Y) :- gene_gene(X,Y).chain(X,Y) :- gene_gene(Y,X).chain(X,Y) :- gene_gene(X,Z), chain(Z,Y).The first rule expresses that the gene ADRB1 inter-acts with the gene CHRM5.
The second rule ex-presses that the gene CHRM1 interacts with the geneCHRM5.
The third, the fourth, and the fifth rulesexpress a chain of such interactions.
In a rule con-taining :-, the left-hand-side of :- is called the headof the rule, the right-hand-side is called the body ofthe rule.
Such a rule p :- q, r. is read as ?p if qand r?.
Here the head atom is p, and the body atomsare q and r. The answer set for this program de-scribes that there is a chain of interactions betweenCHRM1 and CHRM5, ADRB1 and CHRM5, andADRB1 and CHRM1.As mentioned above, the language of ASP is ex-pressive enough to represent defaults, constraints,preferences, aggregates, etc.. For instance, the ruletreats_2diseases(R) :-#count{D:treats(R,D)}>=2, drug(R).describes drugs R that treat at least 2 diseases.3 A Controlled Natural Language forBiomedical QueriesWe introduce a controlled natural language, calledBIOQUERYCNL, to express biomedical queries,whose grammar is shown in Table 1.
This gram-mar should be considered in connection with thegiven biomedical ontologies.
The italic words in thegrammar, for instance, represent the information ex-tracted from the related ontologies.
We call theseitalic words ontology functions; the detailed descrip-tion of these functions are given in Table 2.With BIOQUERYCNL, the users can ask simplequeries, queries with nested relative clauses (withany number of conjunctions and disjunctions), andqueries with cardinalities.
Some sample queries aregiven below.
(Q1) Which symptoms are alleviated by the drugEpinephrine?
(Q2) What are the side-effects of the drugs that treatthe disease Asthma?
(Q3) What are the genes that are related to thedisease Asthma and are targeted by the drugEpinephrine?
(Q4) What are the symptoms of the diseases that arerelated to the gene ADRB1 or that are treatedby the drug Epinephrine?
(Q5) Which genes are targeted by at least 2 drugsand are related to at most 3 diseases?BIOQUERYCNL is a subset of Attempto Con-trolled English (ACE) (Attempto, 2008), which canrepresent a wide range of queries (Fuchs et al,2008), specialized for biomedical ontologies.4 Converting Controlled NaturalLanguage Queries to ProgramsWe have implemented an algorithm, QUERY, pre-sented in Algorithm 1, that obtains an ASP ruleHead ?
Body from a query Q expressed in BIO-QUERYCNL, via transforming Q into a DRS.
Wewill explain the main steps of the QUERY algorithmby an example, considering query (Q4).Algorithm 1 QUERY(Q)Input: A query QOutput: An ASP rule Head ?
Body1: D := Find the DRS of Q2: Head := HEAD(D)3: Body?
:= BODY(D)4: Body := POSTPROCESSING(Body?
)5: return Head ?
Body4.1 Transforming a CNL Query into DRSAttempto Controlled English (ACE) text can beconverted into Discourse Representation Structures(DRS) (Kamp, 1981) ?
a variant of the first-orderlogic that is used for the dynamic interpretation ofnatural language and systematic translation of natu-ral language into logical form ?
without any am-biguity, using tools like Attempto Parsing Engine(APE).
APE converts ACE text to DRS by an ap-proach similar to (Blackburn and Bos, 2005), as ex-plained in (Fuchs et al, 2008).
For instance, APEtransforms query (Q4) into the following DRS:119Table 1: The Grammar of BIOQUERYCNLQUERY?
YESNOQUERY |WHQUERY QUESTIONMARKYESNOQUERY?
DODOESQUERY | ISAREQUERYWHQUERY?
WHATQUERY |WHICHQUERYDODOESQUERY?
[ Do | Does ] Type() Instance(T ) PREDICATERELATIONISAREQUERY?
[ Is | Are ] Type() Instance(T ) V erb(T )WHATQUERY?
What BE Type() that PREDICATERELATIONWHATQUERY?
What BE OFRELATION that PREDICATERELATIONWHATQUERY?
What BE OFRELATIONINSTANCE that PREDICATERELATIONWHICHQUERY?
Which Type() PREDICATERELATIONOFRELATION?
Noun(T ) of Type()OFRELATIONINSTANCE?
Noun(T ) of Type() Instance(T )PREDICATERELATION?
ACTIVERELATION (CONNECTOR (that)?
PREDICATERELATION)*PREDICATERELATION?
PASSIVERELATION (CONNECTOR (that)?
PREDICATERELATION)*ACTIVERELATION?
V erb(T, T ?)
Type() Instance(T ?)ACTIVERELATION?
V erb(T, T ?)
GENERALISEDQUANTOR PositiveNumber Type()PASSIVERELATION?
BE V erb(T ?, T ) by Type() Instance(T ?)PASSIVERELATION?
BE V erb(T ?, T ) by GENERALISEDQUANTOR PositiveNumber Type()BE?
is | areCONNECTOR?
and | orGENERALISEDQUANTOR?
at least | at most | more than | less than | exactlyQUESTIONMARK?
?Table 2: The Ontology FunctionsType() returns the type information the ontologies keep, ex.
gene, disease, drugInstance(T ) returns instances of the type T , ex.
Asthma for type diseaseV erb(T ) returns the verbs related to the type T , ex.
approve for type drugV erb(T, T ?)
returns the verbs where type T is the subject and type T ?
is the object, ex.
drug treat diseaseNoun(T ) returns the nouns that are related to the type T , ex.
symptom for type disease[A,B,C,D]query(A,what)-1predicate(B,be,A,C)-1relation(C,of,D)-1object(C,symptoms,countable,na,eq,1)-1[E,F,G]modifier_pp(F,to,E)-1property(G,related,pos)-1predicate(F,be,D,G)-1object(E,gene_ADRB1,countable,na,eq,1)-1v[H,I]predicate(I,treated,H,D)-1object(H,drug_Epinephrine,countable,na,eq,1)-1object(D,diseases,countable,na,geq,2)-1Note that the DRS consists of two kinds of expres-sions.
The lines with a list of uppercase letters, like[E,F,G], describe the domain of the DRS; each up-percase letter is a referent.
The rest of the DRS de-scribe the conditions about the domain.The DRS above contains some predefined pred-icates, such as object, property, predicate,query, etc.. All the nouns, adjectives, verbs, mod-ifiers, etc.
are represented with one of them.
Forinstance,?
object describes objects and the relevantforms of nouns denoting them (like ?diseases?)?
predicate describes relations that are pro-120duced by different forms of verbs (like?treated?),?
relation describes relations that are producedby of-constructions (like ?symptoms of dis-ease?),?
query describes the form of the query and theobjects that the query is referring to.Ontologies represent relations between concepts.A rule layer over ontologies introduce further con-cepts integrating them.
ASP takes into accountrelevant concepts and relations to answer a givenquery about these ontologies.
In the biomedicalqueries we consider, the concepts and instances arerepresented with object and the relations betweenthese concepts are represented with predicate andrelation.
The query is also important in terms ofthe type of information the user asks for.4.2 Constructing the Head and the Body AtomsOnce the corresponding DRS is obtained from agiven BIOQUERYCNL query, the head and the bodyatoms are constructed by analyzing the conditions inthe DRS, as described in Algorithms 2 and 3.The HEAD algorithm is about the query pred-icate, which refers to objects or relations thatare asked for in the given query.
By followingthe referents, starting from the one mentionedin query, the algorithm finds out the type ofthe information that is asked for in the givenquery.
Consider, for instance, query (Q4).
Thereferent mentioned in query(A,what) is A.It is mentioned in predicate(B,be,A,C)-1,and here it denotes an object with referentC.
Now let?s find where C is mentioned: inobject(C,symptoms,countable,na,eq,1)-1 todenote symptoms.
Therefore, the query asks forsymptoms.
Based on this information, Algorithm 2returns the head of the ASP rules as follows:what_be_symptoms(SYM1)The BODY algorithm analyzes the predicate andthe relation predicates.
These two predicates de-scribe relations between objects described by theobject predicates.
The algorithm starts from thepredicate and the relation predicates, and then,by following the referents, it returns the body atomsof the ASP rule.
For instance, Algorithm 3 returnsthe following body atoms for query (Q4):symptoms_of_diseases(symptom_SYM1,disease_DIS1)diseases_be_related_to_gene(disease_DIS1,gene_??ADRB1??)drug_treated_diseases(drug_??Epinephrine?
?,disease_DIS1)These body atoms are given to POSTPROCESSINGstep, to produce bodies of the ASP rules.4.3 Constructing the ASP RulesPOSTPROCESSING is the last step of the QUERYalgorithm.
At this step, first the number of rulesis determined, and then the body atoms are placedin the bodies of these rules.
In ASP, a conjunc-tive query can be represented by a rule.
However,disjunctive queries are represented by several ruleswith same head but different bodies.
For instance,query (Q4) is a disjunctive query (a disjunction oftwo queries), so there will be two rules representingthis query:what_be_symptoms(SYM1) :-symptoms_of_diseases(symptom_SYM1,disease_DIS1),diseases_be_related_to_gene(disease_DIS1,gene_??ADRB1??
).what_be_symptoms(SYM1) :-drug_treated_diseases(drug_??Epinephrine?
?,disease_DIS1),symptoms_of_diseases(symptom_SYM1,disease_DIS1).Next, the predicate names in the bodies of theserules are matched with the names of the already de-fined predicates in ontologies or in the rule layerover these ontologies.
After matching the predicatenames, the parameters of the predicates may have tobe reordered.The matching of the predicates very much de-pends on the user interface (UI).
If UI enforces usersto use a specific grammar and lexicon while form-ing the query, then the matching can be done withan easy table look-up method.
If the UI allows moreflexibility of constructing a query, then the match-ing algorithm should use some basic Natural Lan-guage Processing methods and similarity metrics tofind the most probable matching.After matching the predicates, the ordering of theparameters can be done easily.
The BODY algorithm121Algorithm 2 HEAD(D)Input: A DRSOutput: Head of an ASP rule1: query(Ref ,QuestionWord) // e.g., query(A,which) for ?Which drug ...?2: if Ref is an object then3: Object := REFERSTO(Ref ) // e.g., A refers to a ?drug?
DRG14: Head := CONCAT(QuestionWord,Object,Ref ) // e.g., which drug(DRG1)5: else if Ref is a subject of a predicate then // query(A,what) for ?What are the genes ...?6: Object := REFERSTO(Ref ) // e.g., A refers to ?genes?
GENE17: Head := CONCAT(QuestionWord,Predicate,Object,Ref ) // e.g., what be genes(GENE1)8: end if9: return Headreturns the body predicates with the parameters.
Inthese parameters, the type and the instance namesare kept together.
Thus, ordering of those parame-ters are done just by using the type information.
Af-ter the ordering is done, the type information part isremoved from the parameters.For instance, after matching the predicates, we getthe following ASP rule for query (Q4).what_be_symptoms(SYM1) :-disease_symptom(DIS1,SYM1),disease_gene(DIS1,??ADRB1??
).what_be_symptoms(SYM1) :-treats_disease(??Epinephrine?
?,DIS1),disease_symptom(DIS1,SYM1).With an ASP rule layer over ontologies, andthis ASP program, an ASP solver, like DLVHEX(DLVHEX, 2009), returns an answer to query (Q4).For instance, consider the ASP rule layer, andthe gene, disease, drug ontologies of (Bodenreideret al, 2008).
The ontologies of (Bodenreider etal., 2008) are obtained from the ontologies PHAR-MGKB (PharmGKB, 2008), UNIPROT (UniProt,2008), GENE ONTOLOGY (GO) (GeneOntology,2008), GENENETWORK database (GeneNetwork,2008), DRUGBANK (DrugBank, 2008), and theMedical Symptoms and Signs of Disease web page(MedicalSymptomsSignsDisease, 2008).
With thisrule layer and the ontologies, and the ASP programabove, the following is a part of the answer DLVHEXfinds to the query above:noisy breathing faster breathingshortness of breath coughingchest tightness wheezing4.4 Another ExampleThe algorithm discussed above returns the followingASP program for query (Q5):which_genes(GN1) :-2<=#count{DRG1:drug_gene(DRG1,GN1)},#count{DIS1:disease_gene(DIS1,GN1)}<=3.Since query (Q5) contains cardinality constraints,the ASP program uses the aggregate #count.More examples of biomedical queries, andthe ASP programs generated by our programcan be seen at http://people.sabanciuniv.edu/esraerdem/bioquery-asp/bionlp09/ .5 Implementational IssuesWe have implemented the algorithms explainedabove in PERL.
We have used Attempto ParsingEngine APE to convert a given BIOQUERYCNLquery into a DRS.
Since BIOQUERYCNL is aboutbiomedical ontologies, we provided APE some in-formation about biomedical concepts, such as gene,drug, and words that represent relations betweenthese concepts such as treat, target etc..However, providing such information is not suf-ficient to convert all BIOQUERYCNL biomedicalqueries into programs, mainly due to specific in-stances of these concepts (consider, for instance,various drug names that appear in ontologies).
Oneway to deal with this problem is to extract from theontologies all instances of each concept and providethem to APE as an additional lexicon.
This may notbe the perfect solution since this process has to berepeated when an instance is added to the ontology.An alternative way can be enforcing the user to enter122Algorithm 3 BODY(D)Input: A DRSOutput: Body of an ASP rule1: Body := empty string2: for each predicate P do3: // P can be of the form predicate(Ref ,Verb, SubRef ), like predicate(H, targeted, A)4: Subject := REFERSTO(SubRef ) // e.g., A refers to ?genes?
GENE15: if P has a verb phrase modifier then6: ?Modifier,Object?
:= REFERSTO(Ref ) // e.g., H refers to ?
?by?, ?drug?
DRG1 ?7: end if8: if P has an object then // P can be of the form predicate(Ref ,Verb, SubRef ,ObjRef )9: Object := REFERSTO(ObjRef )10: end if11: Body := CONCAT(Body, Subject,Verb,Modifier,Object)12: // e.g., genes targeted by drugs(GENE1, DRG1)13: end for14: for each relation R do15: // R can be of the form relation(Ref1, of ,Ref2), like relation(C, of , D)16: Object1 := REFERSTO(Ref1) // e.g., C refers to ?symptoms?
SYM117: Object2 := REFERSTO(Ref2) // e.g., D refers to ?diseases?
DIS118: Body := CONCAT(Body,Object1,??of?
?,Object2)19: // e.g., symptoms of diseases(SYM1, DIS1)20: end for21: return Bodythe concept name just before the instance (like ?thedrug Epinephrine?)
in the query.
This is how we dealwith instance names, in the current version of ourimplementations.
However, such BIOQUERYCNLqueries are not in the language of APE; so, withsome preprocessing, we rewrite these queries in thecorrect syntax for APE.6 ConclusionWe have designed and developed a Controlled Nat-ural Language (CNL), called BIOQUERYCNL, torepresent biomedical queries over some ontologies,and provided a precise description of its grammati-cal structure.We have introduced an algorithm to convertqueries in BIOQUERYCNL to a program in AnswerSet Programming (ASP).
The idea is to compute an-swers to these queries automatically, by means ofautomated reasoners in ASP, over biomedical on-tologies in RDF(S)/OWL and a rule layer in ASPintegrating these ontologies.
Our algorithm canhandle various forms of simple/complex disjunc-tive/conjunctive queries that may contain (nested)relative clauses and cardinality constraints.We have implemented this algorithm in PERL,and tried it with the ASP rule layer, and the ontolo-gies of (Bodenreider et al, 2008).One essential part of the overall system is an in-telligent user interface that allows a user to enterbiomedical queries in BIOQUERYCNL.
Design andimplementation of such a user-interface is a part ofour ongoing work.AcknowledgmentsThanks to Tobias Kuhn for his help with ACE.
Thiswork is supported by the Scientific and Technolog-ical Research Council of Turkey (TUBITAK) grant108E229.ReferencesAttempto.
2008. http://attempto.ifi.uzh.ch/site/.123Chitta Baral, Juraj Dzifcak, and Luis Tari.
2007.
To-wards overcoming the knowledge acquisition bottle-neck in answer set prolog applications: Embracingnatural language inputs.
In Proc.
of ICLP, pages 1?21.Chitta Baral, Juraj Dzifcak, and Tran Cao Son.
2008.Using answer set programming and lambda calculusto characterize natural language sentences with nor-matives and exceptions.
In Proc.
of AAAI, pages 818?823.Chitta Baral.
2003.
Knowledge Representation, Rea-soning and Declarative Problem Solving.
CambridgeUniversity Press.Abraham Bernstein, Esther Kaufmann, Anne Go?hring,and Christoph Kiefer.
2005.
Querying ontologies: Acontrolled english interface for end-users.
In Proc.
ofISWC, pages 112?126.Abraham Bernstein, Esther Kaufmann, Christian Kaiser,and Christoph Kiefer.
2006.
Ginseng: A guided in-put natural language search engine for querying on-tologies.
In Jena User Conference.Patrick Blackburn and Johan Bos.
2005.
Representationand Inference for Natural Language.
A First Course inComputational Semantics.
CSLI.Olivier Bodenreider, Zeynep Hande C?oban, Mahir CanDog?anay, Esra Erdem, and Hilal Kos?ucu.
2008.
Apreliminary report on answering complex queries re-lated to drug discovery using answer set programming.In Proc.
of ALPSWS.Boxer.
2009. http://svn.ask.it.usyd.edu.au/trac/candc/wiki/boxer.CC.
2009. http://svn.ask.it.usyd.edu.au/trac/candc/wiki.DLV.
2009. http://www.dbai.tuwien.ac.at/proj/dlv.DLVHEX.
2009. http://con.fusion.at/dlvhex/.DrugBank.
2008. http://redpoll.pharmacy.ualberta.ca/drugbank/.Norbert E. Fuchs, Kaarel Kaljurand, and Tobias Kuhn.2008.
Discourse representation structures for ace 6.0.Technical Report IFI-2008.02, Department of Infor-matics, University of Zurich.Michael Gelfond and Vladimir Lifschitz.
1988.
Thestable model semantics for logic programming.
InRobert Kowalski and Kenneth Bowen, editors, LogicProgramming: Proceedings of the Fifth InternationalConference and Symposium.GeneNetwork.
2008. http://humgen.med.uu.nl/?lude/genenetwork.GeneOntology.
2008. http://www.geneontology.org.Jena.
2008. http://jena.sourceforge.net/.Hans Kamp.
1981.
A theory of truth and semantic rep-resentation.
In J.
A. G. Groenendijk, T. M. V. Janssen,and M. B. J. Stokhof, editors, Formal Methods in theStudy of Language, volume 1, pages 277?322.Esther Kaufmann, Abraham Bernstein, and Renato Zum-stein.
2006.
Querix: A natural language interfaceto query ontologies based on clarification dialogs.
InProc.
of ISWC.Mark Klein and Abraham Bernstein.
2004.
Toward high-precision service retrieval.
IEEE Internet Computing,8(1):30?36.Vladimir Lifschitz.
1999.
Action languages, answer setsand planning.
In The Logic Programming Paradigm:a 25-Year Perspective.
Springer.Victor Marek and Miros?aw Truszczyn?ski.
1999.
Sta-ble models and an alternative logic programmingparadigm.
In The Logic Programming Paradigm: a25-Year Perspective.
Springer.MedicalSymptomsSignsDisease.
2008. http://www.medicinenet.com/symptoms_and_signs/article.htm.Ilkka Niemela?.
1999.
Logic programs with stable modelsemantics as a constraint programming paradigm.
An-nals of Mathematics and Artificial Intelligence, 25.PharmGKB.
2008. http://www.pharmgkb.org.UniProt.
2008. http://www.ebi.uniprot.org/index.shtml.124
