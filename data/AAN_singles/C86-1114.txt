The Treatment of Movement-Rules in a LFG-ParserHans-Ulrich Block, Hans HaugenederSiemens AG, MOnchenZT ZTI INFW.
GermanyIn this paper we propose a way of how to treat long-distance movement phenomena as exemplified in 1) inthe framework of an LFG-based parser.
(1) Who do you think Peter tried to meet'You think Peter tried to meet who'We therefore concentrate first on the theoretical statusof so called wh- or long-distance-movement in LexicalFunctional Grammar (LFG) and in the Theory ofGovernment & Binding (GB), arguing that a generalmechanism that is compatible with both LFG and GBtreatment of long-distance-movement can be found.Finally we present the implementation of such amovement mechanism in a LFG-Parser.The basic principles of the treatment of long distancephenomena or constituent control in LFG as described in(Kaplan/Bresnan 1982) can be characterized roughly inthe fol lowing way:1.
The contextfree grammar is augmented byproductions expanding to the empty word:XP~eBy the means of these productions traces areintroduced at the "originating" position of a"displaced" constituent or speaking more in LFGterms a phonetically empty constituent isintroduced at a c-structure position (thecontrollee constituent) whose role in the f-structure is to be played by the lexically specifiedlinearly and structurally displaced constituent(the controller constituent).2.
Besides the immediate domination metavariables($, ~) another type of metavariables is used, thebounded domination metavariable, the double-ups and double-downs here represented t T asand $ $ for convenience.
In contrast to theimmediate domination variables, which al low toexpress identities of f-structures or f-structureparts assigned to c-structure nodes standing inthe relation of immediate domination, thebounded domination metavariables al low toidentify the f-structures of two c-structure nodesfar apart in the c-structure.The use of these metavariables can be seen in thefol lowing LFG grammar rules, where the symbol thatintroduces the controller constituent has among itsequations one o f the  form $ = $ $ and the empty wordis associated with the equation ~ = ~ ~.S' NP S(1" Q-FOC) = $ t =~=~NP -~ et=t tThe instantiation procedure for these boundeddomination variables thereby is defined such that itidentifies the f-structures of the controller andcontrollee in a way which is shown in the fo l lowingschematical description in figure 1 for a sentence like(2), leading to f-structures with shared substructures.
(2) \[S' \[NP who\]\[s does he try to find \[NP e\]\]s IS'$=~S' / \NP fj.f h S\~:f,NP f~ jt t: "----~-'t--- t twho does he try to find eFigure 1In addition to the basic approacl~ presented so far thereare some more means for expressing the various c-structurally defined constraints that have to be fullf i l ledin order to be allowed to identify two constituents' f-structures in the way just described and thereby rule outa lot of otherwise possible but ungrammaticalstructures.The central additional mechanism to deal with theserestrictions governing the possibliliy of establishing theconstituent-control relation between two constituentsis the use of bounding nodes.
In LFG these are notspecified globally but introduced at a rule specific basis,allowing for a natural treatment of the variousidiosyncratic onstituent control constructions in variouslanguages that withstand a grammatical description bymeans of global bounding categories (seeKaplan/Bresnan (1982:245f) for a deeper discussion !
).Thus for example in the fol lowing VP- and S'-expansionintroducing a sententiell wh-complement, the markingof S as bounding node accounts for theungrammaticality of (3).VP -~ (NP) S'S' --~ whether S(3) *What does he\[vp wonder Is' whether \[s shewants \[NP e\]\]s' \]S\]VPThe blocking of structures like these is achieved bypermitting no bounding node to lie on the pathbetween the empty constituent and the root node ofthe control domain, which is specified as annotation ofthe ~ g-meatvariable ($ St), shown in the fol lowing482rule.S' --.
NP S(T Q-FOC) = $ 1' = $~=~sWith the fragmentary grammar rules just presented theidentification of 'what with 'e"  in the embeddedclauses object position is prevented as shown in Figure2.S'NP fj fh \VP f~l.
: fh / S/ .
.
.
.
.
.
\ .
.
.
./ NP fk " ' ' '~i / I '  : fkr t: - .
- - - -~- -F~ t twhat does he wonder wether she wants eFigure 2Here the occurrence of the bounding node (S) in thetree structure dominated by the root node of theconstituent control domain effectively makes the S-dominated subtree inaccessible to any constituentcontrol from outside.to constituent control (as categorial subscripts andadditional feature restrictions) are not described as wedo not treat them in our implementation.In the GB~framework wh-Movement is regarded as aninstance of the general transformation "move ct".
Thewh-Phrase is moved out of its position (a.)
into theCOMP-Position dominated by S' and thereby leaves atrace in its original D-structure position (b.).
(4) a.
\[S'__ \[s haveyou done whati\]s \]s'b.
\[s' whati \[s haveyou done ti\]s\]s'wh-Movement underlies the constraint of subjacencybut may be applied cyclically via the COMP-position,leaving traces in any COMP-position it meets:(5) \[s' whoi \[s do you think Is' ti\[S Peter wants Is' ti\[s PRO tomeet ti IS \]S' \]S \]s'\]s \]s'This assumption explains the ungrammaticality of (6) bythe mere fact that the possible intermediate landing sitefor what is occupied by who.
(6) *\[s' Whati \[s doyou think \[S' whoj \[s tj did ti\]s \]S' \]s \]s'Furthermore this assumption explains theungrammaticality of (7a) by the absence of a COMP-position in NP and the assumption that NP is a boundingnode.
(7) a.
*\[s' Whoi \[s do you believe \[NP the claim \[S' tithat \[s John loves ti\]s \]S'\]NP\]S\]S'b.
\[s' Whoi do you think that \[s John loves ti\]s\]s'From a technical point of view, leaving asidephilosophical and psychological reflections on universalgrammar and learnability, the main difference betweenthe two theories regarding wh-Movement can be seenin the fol lowing.1) Whereas in LFG the application of wh-Movementis constrained by bounding nodes in GB it isconstrained by bounding categories.
G8 is morerestrictive in this point and aims towardsa greatergeneralization, as it is excluded for two nodes withthe same category to have different bounding nodecharacteristics.2) In GB the principle of subjacency which roughlysays that no movement may cross two or morebounding nodes is used to explain the difference ingrammaticality of (7a) and (7b) above.
In LFG thesame ungrammaticality is explained by the identityof the root node and the bounding node.
The rootnode - being by definit ion a s ister  of the movedphrase - defines the subtree in which the trace forthe moved phrase can and must be found.
The factthat this root node may be crossed even if it is abounding node but that the search is blocked ifanother bounding node is encountered evoques thesubjacency effect.3) The grammaticality of (5) is explained in GB bycylic COMP-to-COMP-movement.
The NP in questionis first moved into the first COMP-positon w i thoutviolation of subjacency.
Form there it is moved -again without violation of subjacency - to the nextCOMP-position.
In LFG these facts are described byan additional grammar rule.
The two rules for S'Kaplan/Bresnan (1982:241,253) suggests are:S' -* NP S(~ Q-FOC) = ~ T = ,!,S' ~ (that) St=$t t=$~4) A last difference can be seen in the differentgrammar-modules long-distance-movement istreated in, In GB the movement is treated in a strictlyconstitutional way.
It is part of the grammar'smovement-rule-module and operates on nothingbut positions.
In LFG, long-distance movement isassociated with the c-structure part of the grammaras well as with the part that is repsonsible for theinstantiation of the variables, especially the boundeddomination metavariable.
Thus - although beingintroduced via phrases in the c-structure rules - iteffectively does not operate on phrases but onfunctional variables.
(According to Ron Kaplan (personal communication)a totally f-structure-oriented approach of suchphenomena will be given m the ongoingdevelopment of LFG, whose exact elaboration isforthcoming)When constructing our parser we found it veryenlighting to "merge" the two theories in the fo l lowingway.
Weconsider subjacency as an epiphenomenon of thefact that 1) bounding nodes are strict boundariesfor movement and 2) a bounding node may be483crossed if it is a root node (as in LFG).adapt the more flexible LFG view of (rule-specific)bounding nodes instead of bounding categories,as one can anyway derive bounding nodes frombounding categories by replacing everyoccurrence in the grammar rules' right hand sideof a bounding category by the bounding-node-marker.prefer the principle of cyclicity'over equations ofthe type $ $= $ $~treat movement strictly constitutionally.Our parser is based on Earley's (1970) algorithmaugmented by a mechanism for treating long-distancephenomena according to the above mentionedprinciples.
The basic context-free parser operates ontwo ordered sets of states that correspond to the statesets si and si+ 1 in the Earley-Parser to the end of whichconstantly new states which are still to be worked onare added.
A state is a quintupel (<tree> <le f t><r ight> <dot> <pred.-list>).- <tree > is the current parsetree of that path,- <lef t> and <r ight> are pointers to the input stringthe constituent begins with and the input string thatimmedeately follows the constituent respectively,- <dot> marks the current position in the right side ofthe cf grammar rule and<pred.-list> is a set of pointers to all preceedingstates who's treenodes might become the mother ofcurrent states' tree.A treenode is a complex data structure that contains thenode's label (i.e.
its syntactic category), a list of itsdaughters and a pointer to the f-structure attached toit.The basic operations are predict, scan and completewhich are close to the definition in Earley (1970).
For theconstruction of the c-structure these actions areaugmented in the following way: predict creates anempty treenode labeled with the predicted category,scan attaches the next input word as the rightmostdaughter to the state's <tree >, and complete attachesthe state's <tree> as the rightmost daughter to alltreenodes in the states of the current state's <pred.-list>.For the construction of the f-structure, which is built upincrementally being used as a filter on c-structures assoon as possible (as described in Block/Hunze(1986)) thefollowing augmentations are performed: The <dot>part of a state not only marks the position in the cf-rule's right hand side but also contains the functionalequations associated with that position.
Whencompleting and scaning the parser instantiates the up-and down-arrow of the equations with virtual copies ofthe mother's and daughter's f-structure.
The equationsare then evaluated and the new f-structure associatedwith the up-arrow becomes the f-structure of the newstate's tree.The basic idea behind the treatment of long-distancephenomena is to augment the mechanism for the484contextfree skeleton of the grammar with a mechanismthat transports displaced elements until they can beconsumed at suitable postions.
The suitability of thesepositions thereby is restricted by several constraints.Firstly a position only can come into account if a phraseof the same type as the moved phrase is predicted bythe grammar.
Secondly the mechanism for propagatingthe moved constituents obeys certain linguisticconstraints uch as bounding nodes.
Thus it roughly canbe viewed as a sort of linguistically constrainedHOLD/VIR-mechanism that is integrated in the parser,freeing the grammar writer from the necessity ofencoding the details of holding displaced elements andconsuming them by VIR explicitly on the grammar level.An advantage of this approach for the handling of suchphenonena is that one can do without emptyproductions in the cf part of grammar that tend to leadto an enormous amount of spurious phrase structuretrees.
On the othei" hand the mechanism to bepresented shows some asymetry, since it only deals withlong distance dependencies where the displacedelement occurs in terms of parsing direction before itsoriginating position.
Since the parser presented hereparses form left to right this means that we take theassumption for granted that there are no rightwardlong-distance movements.For the treatment of movement <dot> is expanded tothe complex data-structure of the type (<syn.
cat.><equations> <slash>) where <slash> is a flagcontaining information on constituents to be moved.
If<slash> is empty no movement is performed.
If<slash> is set the node which is associated to the<dot> will be moved rightward.A state is augmented by three additional components,namely <pending> and <consumed> <to-be-moved> that are used for the bookkeeping of movednodes.<pending> is a pushdown stack of the nodes that aremoved.
Each time a node is declared in the grammar tobe moved it is pushed onto the <pending> of the statebeing developed.
The nodes in <pending> are thenpropagated to the subsequent paths.<consumed> is the list of all traces consumed in asubtree.
That is whenever a constituent on < pending >is used to satisfy the corresponding prediction of somestate (i.e.
being used as if it was the current element inthe input at some state) it is popped from <pending>and pushed on <consumed >.
Furthermore<consumed> is used to control the attachment ofphrases to their mother nodes by the completer,allowing phrases dominated by a root node withconsumed subphrases in them to be attached only ifthat phrase is also in <pending > in the mother state.<to-be-moved> is used to transport a displacedconstituent o its corresponding root-node, where afterbeing pushed onto <pending> it can be consumed asa missing constituentThe snapshot of the parser's states in (9) shows therelevant subset of states induced by the attachment ofanwh-NP byagrammar rule like (10) whilst parsing asentence like the one in (8).
(8) (I don't know) who he loves?1 2 3 4(9)<tr  > <l , r> <dot  > < plst> <pg > <cd><tbm>\[S'\] (1,1) .NP NIL NIL NIL (1)\[NPwho\](1,2) EOR (1) NIL NIL NIL (2)\[S'\[NP~ho\]\](1,2) .S NIL NIL NIL NPwh o (3)(* the parsed wh NP "who " is moved to its root node)(2,2) .NP (3) (NPwho) NIL NIL (4)(* in order to be available for consumation it is pushed on<pending> )IS\]\[S\[NPhe\]\](2,3) .VP (3) (NPwh o) NIL NIL (5)\[VP\[Vlove\]\](2,4) .NP (5) (NPwho) NIL NIL (6)\[NP\] (4,4) .PN (6) (NPwho) NIL NIL (7)\[VP\[Vlove\]\[NPwho\]\](3,4) EOR (5) NIL (NPwho) NIL (8)(* the moved NP is consumed as direct object of "love")\[S\[NPhe\]\[VP\[Vlove\]\[NPwho\]\]\](2,4) EOR (3) NIL (NPwho) NIL (9)\[S'\[NPwho\]\]\[S\[NPhe\]\[VP\[VloveJ\[NPwho\]\]\]\](1,4) EOR NIL NIL NIL NIL (10)(* after completing a state with a root-node ca tegory predic-ted, the moved NP is taken out of < consumed>, meaning thatthe structure, where it has to be consumed is closed and themovement is performed completely)(10) S' ~ NP S( t  Q-FOC) = $ t ~(with S being a root-node)In order to see the working of our mechanism in thecase of a cyclic movement a look at the followingexamples shows its basic features.
Thus in an examplelike( t l )  Who do you believe that he knows1 2 3 4the moved wh-NP is transported into the embeddedsentence via landing at a S'-initial optional NP-position,from where it is moved in turn.
(12) S' --, {NP/f) _S(with S being a root-node again)NPpIwhoSvyOU JIb (~h~ve *NP VP ,~  , ~- -~IV NPt h e iiJlovesFigure 3With a grammar  rule like (12) - where XP/$ in our rulenotat ion means that  the phrase XP is to be moved - thewh-NP who is first moved form its matr ix4entenceinitial posit ion and consumed at the embeddedsentences' NP-position from where it is moved again asshown in Figure 3.The treatment of tile three critical components<pend ing>,  <consumed> and <to-be-moved> insuch a case of cyclic mow~ment is shown in the followingpartial trace(13)<tr  ><l , r> <dot> <plst > < pg > <cd><tbm>\[VP\[Vbelieve\] \](1,D .s' (NPwho) N~L N~L (1)(* when the embedded sentence is predicted the movedconstituent is already pending)\[S'\] (1,1) ,NP T (1) (NPwh o) NIL NIL (2)\[S'\[NPwho\]\](I,1) .COMP NIL NIL (NPwho) NPwho (3)(* the moved constituent is consumed and moved in turn byputting it on < to-be-moved>)\[S'\[NPwho\]that\](1,2) .S (1) NIL (N Pwho) NPwh o (4)\[S\] (2,2) ,NP (4) (NPwho) NIL NIL (5)(* in order to be available for consuma tion it is pushed on<pending> )\[VP\[Viove\]\[NPwho\]\](3,4) \[!OR (5) NIL (NPwho) NIL (6)(* the moved NP is consumed as direct object of "love ")\[S\[N P john\] [VP\[Vlove\] \[NPwho\]\]\](2,4) \[!OR (3) NIL (NPwho) NIL (7)\[S'\[N Pwho\]that\]\[S\[N Piohn\] [VP\[V~ove\]\[NPwho\]\]\]\]485(1,4) EOR (1) NIL (NPwho) NIL (8)\[VP\[Vbelieve\]\[S'\[NPwho\]that\] [S\[N Pjoh n\] \[VP\[Vlove\]\[N Pwho\]\]\]\]\](..,4) EOR NIL (NPwho) NIL (9)(* the moved wh-NP is still on < consumed>, waiting to bediscarded when the state predicting its originating root-nodecategory is completed)The organisation of the list of <pend ing> nodes as apushdown-stack rather than a queue mirrors theproperty of long-distance movement to be nested.
Theparser wil l  therefore account for the ungrammaticaltrace bindings in (14).
(14) *Which sonatai is this violinj easy to play ti on tjThough the sentence wil l  finally be parsed, it wil l  have,as predicted, the semantically deviant nested binding ofthe traces: to play the violin on which sonata.The mechanism presented so far does not cover thetreatment of bounding nodes, as there are no boundingrestrictions on the way how the constituents on< pending > are transported and/or consumed.
Withoutimposing any further restrictions on our mechanism, it ispossible to move a constituent into a subtree dominatedby a bounding node.To prevent this a new empty <pend ing> is used inevery state that is a consequence of the prediction of abounding node category.
Thus any moved constituentwhich is possibly on <pend ing> at such a state of theanalysis is not available during the parsing of thebounded node category dominated substructure.When, however, this substructure is parsed completelyand attached to its mother structure by the completerthe old (i.e.
the mother's state) <pending > is used andpropagated in the subsequent states.Thus in an example like (15) if at some state thebounding node category S (5) is predicted all thesuccessive states (as for example statej) have a newempty <pend ing>.
(15) *What does he\[vp wonder \[s' whether \[s shewants \[NP e\]\]S\]S' \]vP(16) ....... whether she wants1 2 3 4<tr  > <l,r  > <dot> < plst> < pg > <cd> <tbm >\[S' \[V wonder\]\](1,1) .$ (NPwh o) NIL NIL (i)(* when the bounding node category is predicted "what" ispending; it will not be propagated to those subsequent statesthat expand the bounding node doina ted substructure)IS\] (1,1) .NP NIL NIL NIL (j)\[S she wants\](2,4) .EOR NIL NIL NIL (k)\[S' whether\]\[S she wants\]\](1,4) .EOR (i) (NPwho) NIL NIL (I)(* after the completion of the S-structure the old <pending>is activated again, making "what" acessible again)\[S' what ....wants\](..,4) .EOR NIL (NPwho) NIL NIL (m)In our example the parser will come to state I aftercompleting state i and finally (via some more completeroperations) to state m. State m finally represents aconfiguration that says that (14) wil l  not be parsed dueto the fact that <pend ing> is not empty while thecomplete input is analysed with no predictions left.For the specification of bounding nodes in our grammarwe offer three possibilities.
Firstly in the spirit of LFG ona rule specific basis, secondly globally by declaring acategorya globally bounding node (which diminishesthe grammar writers work on actually globallybounding nodes) and thirdly a negative specificationconcerning bounding features of a globally boundingnode, thus admitting an simple expression ofexceptions.The parserpesented is implemented in ln ter l i sp -Donapersonal Lisp workstation and has been testet with agrammar comprising a major part of the phenomenadiscussed in Kaplan/Bresnan's fundamental LFG-paper.The work described here is partly sponsored by theFederal Ministry of Research and Technology in theWlSBER-project.We would like to express our thank to our collegues M.Gehrke and R. Hunze for their criticism andencouragement.LiteratureBlock, H.-U.
and Hunze, R. (1986)Incremental Construction of C- and F-Structure in anLFG-Parser, Proc.
COLING-86 (to appear)Earley, Jay (1970)An Efficient con textfree parsing algorithm.Communications of  the ACM 6(8), 541-455Kaplan, Ronald M. and Bresnan, Joan (1982)LexicaI-Functional Grammar: A Formal System forGrammatical Representation in: Bresnan, Joan (ed):The Mental Representation of  GrammaticalRelations.
Cambridge/Mass.486
