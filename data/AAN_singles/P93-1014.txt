A UNIFICATION-BASED PARSER FOR RELATIONALGRAMMARDavid E. JohnsonIBM Research DivisionP.O.
Box 218Yorktown Heights, NY 10598dj ohns @ war son.
ibm.
comAdam MeyersLinguistics DepartmentNew York UniversityNew York, NY 10003meyers@acf2.nyu.eduLawrence S. MossMathemat ics  DepartmentInd iana UniversityBloomington,  IN 47401lmoss@indiana.eduAbst rac tWe present an implemented unification-basedparser for relational grammars developed withinthe stratif ied feature grammar (SFG) frame-work, which generalizes Kasper-Rounds logic tohandle relational grammar analyses.
We first in-troduce the key aspects of SFG and a lexicalized,graph-based variant of the framework suitable forimplementing relational grammars.
We then de-scribe a head-driven chart parser for lexicalizedSFG.
The basic parsing operation is essentiallyordinary feature-structure unification augmentedwith an operation of label unification to build thestratified features characteristic ofSFG.INTRODUCTIONAlthough the impact of relational grammar(RG) on theoretical linguistics has been substan-tial, it has never previously been put in a formsuitable for computational use.
RG's multiple syn-tactic strata would seem to preclude its use in thekind of monotonic, unification-based parsing sys-tem many now consider standard (\[1\], \[11\]).
How-ever, recent work by Johnson and Moss \[2\] on aKasper-Rounds (KR) style logic-based formalism\[5\] for RG, called Stratif ied Feature Grammar(S FG), has demonstrated that even RG's multiplestrata are amenable to a feature-structure t at-ment.Based on this work, we have developed aunification-based, chart parser for a lexical ver-sion of SFG suitable for building computationalrelational grammars.
A lexicalized SFG is sim-ply a collection of stratif ied feature graphs (S-graphs), each of which is anchored to a lexicalitem, analogous to lexicalized TAGs \[10\].
The ba-sic parsing operation of the system is S-graphunif ication (S-unification): This is essentiallyordinary feature-structure unification augmentedwith an operation of label unification to build thestratified features characteristic of SFG.RELATED WORKRounds and Manaster-Ramer \[9\] suggested en-coding multiple strata in terms of a "level" at-tribute, using path equations to state correspon-dences across strata.
Unfortunately, "unchanged'relations in a stratum must be explicitly "car-ried over" via path equations to the next stra-tum.
Even worse, these "carry over" equationsvary from case to case.
SFG avoids this problem.STRAT IF IED FEATURE GRAM-MARSFG's key innovation is the generalization ofthe concept \]eature to a sequence of so-called re-lational signs (R-signs).
The interpretation fa stratif ied feature is that each R-sign in a se-quence denotes a primitive relation in differentstrata.
1For instance, in Joe gave Mary tea there are,at the clause level, four sister arcs (arcs with thesame source node), as shown in Figure h onearc labeled \[HI with target gave, indicating aveis the head of the clause; one with label \[1\] andtarget Joe, indicating Joe is both the predicate-argument, and surface subject, of the clause; onewith label \[3,2\] and target Mary, indicating thatl We use the following R-signs: 1 (subject), 2 (directobject), 3 (indirect object), 8 (chSmeur), Cat (Category),C (comp), F (flag), H (head), LOC (locative), M (marked),as well as the special Null R-signs 0and/, explainedbelow.97\[Ca~\] s\[1\] Joe\[Hi save\[3, 2\] Mary\[2, 8\] teaFigure 1: S-graph for Joe gave Mary tea.Mary is the predicate-argument i direct object,but the surface direct object, of the clause; andone with label \[2,8\] and target tea, indicating teais the predicate-argument direct object, but sur-face ch6meur, of the clause.
Such a structure iscalled a st rat i f ied feature  graph  (S-graph).This situation could be described in SFG logicwith the following formula (the significance of thedifferent label delimiters (,), \[, \] is explained be-low):R I : - -  \ [Hi:gave A \[1): JoeA \[3, 2 ) :  Mary A \[2, 8 ) :  tea  .In RG, the clause-level syntactic informationcaptured in R1 combines two statements: onecharacterizing gave as taking an initial 1, initial2 and initial 3 (Ditranslt ive);  and one character-izing the concomitant "advancement" of the 3 to2 and the "demotion" of the 2 to 8 (Dative).
InSFG, these two statements would be:D i t rans i t ive  : :\ [Hi :gave A \[1):T A .
\ [2):T A \[3):T ;Dat ive :---- (3, 2): T ~ (2, 8_): T.Ditransitive involves standard Boolean con-junction (A).
Dative, however, involves an opera-tor, &, unique to SFG.
Formulas involving ~ arecalled e~tension formulas and they have a morecomplicated semantics.
For example, Dative hasthe following informal interpretation: Two dis-tinct arcs with labels 3 and 2 may be "extended"to (3,2) and (2,8) respectively.
Extension formulasare, in a sense, the heart of the SFG descriptionlanguage, for without hem RG analyses could notbe properly represented.
22We gloss over many technicalities, e.g., the SFG notiondata justification and the formal semantics of stratified fea-tures; cf.
\[2\].RG-style analyses can be captured in terms ofrules such as those above.
Moreover, since theabove formulas tate positive constraints, they canbe represented as S-graphs corresponding to theminimal satisfying models of the respective formu-las.
We compile the various rules and their com-binations into Ru le  Graphs  and associate sets ofthese with appropriate lexical anchors, resultingin a lexicalized grammar, sS-graphs are formally feature structures: givena collection of sister arcs, the stratified labels arerequired to be functional.
However, as shown inthe example, the individual R-signs are not.
More-over, the lengths of the labels can vary, and thiscrucial property is how SFG avoids the "carryover" problem.
S-graphs also include a strict par-tial order on arcs to represent linear precedence(cf.
\[3\], \[9\]).
The SFG description language in-cludes a class of l inear  precedence statements,e.g., (1\] -4 (Hi means that in a constituent "thefinal subject precedes the head".Given a set 7Z,9 of R-signs, a (strat i f ied) fea-ture  (or label) is a sequence of R-signs which maybe closed on the left or right or both.
Closed sidesare indicated with square brackets and open sideswith parentheses.
For example, \[2, 1) denotes a la-bel that is closed on the left and open on the right,and \[3, 2, 1, 0\] denotes a label that is closed on bothsides.
Labels of the form \[-.-\] are called ( tota l ly)closed; of the form (...) ( tota l ly)  open; andthe others part ia l ly  closed (open) or closed(open) on the  r ight  (left), as appropriate.Let B?
denote the set of features over 7Z*.
B?is partially ordered by the smallest relation C_ per-mitting eztension along open sides.
For example,(3) ___ (3,2) U \[3,2,1) C \[3,2, 1,0\].Each feature l subsuming (C) a feature f providesa partial description of f .
The left-closed bracket \[allows reference to the "deepest" (initia~ R-sign ofa left-closed feature; the right-closed bracket \] tothe "most surfacy" (fina~ R-sign of a right-closedfeature.
The totally closed features are maximal(completely defined) and with respect o label uni-fication, defined below, act like ordinary (atomic)features.Formal definitions of S-graph and other defini-tions implicit in our work are provided in \[2\].s We ignore negative constraints here.98AN EXAMPLEFigure 2 depicts the essential aspects of the S-graph for John seemed ill. Focus on the features\[0,1\] and \[2,1,0\], both of which have the NP Johnas target (indicated by the ~7's).
The R-sign 0 isa member of Null, a distinguished set of R-signs,members of which can only occur next to brackets\[ or \].
The prefix \[2,1) of the label \[2,1,0\] is theSFG representation f RG's unaccusative analysisof adjectives.
The suffix (1,0\] of \[2,1,0\]; the prefix\[0,1) of the label \[0,1\] in the matrix clause; and thestructure-sharing collectively represent the raisingof the embedded subject (cf.
Figure 3).Given an S-graph G, Nul l  R-signs permit thedefinitions of the pred icate -argument  graph,and the surface graph, of G. The predicate-argument graph corresponds to all arcs whose la-bels do not begin with a Nul l  R-sign; the rele-vant R-signs are the first ones.
The surface graphcorresponds to all arcs whose labels do not endwith a Nul l  R-sign; the relevant R-signs are thefinal ones.
In the example, the arc labeled \[0,1\]is not a predicate-argument arc, indicating thatJohn bears no predicate-argument relation to thetop clause.
And the arc labeled \[2,1,0\] is not asurface arc, indicating that John bears no surfacerelation to the embedded phrase headed by ill.The surface graph is shown in Figure 4 andthe predicate-argument graph in Figure 5.
No-tice that the surface graph is a tree.
The tree-hood of surface graphs is part of the defini-tion of S-graph and provides the foundation forour parsing algorithm; it is the SFG analog tothe "context-free backbone" typical of unification-based systems \[11\].LEXICAL IZED SFGGiven a finite collection of rule graphs, we couldconstruct he finite set of S-graphs reflecting allconsistent combinations of rule graphs and thenassociate ach word with the collection of derivedgraphs it anchors.
However, we actually only con-struct all the derived graphs not involving extrac-tions.
Since extractions can affect almost any arc,compiling them into lexicalized S-graphs would beimpractical.
Instead, extractions are handled bya novel mechanism involving multi-rooted graphs(of.
Concluding Remarks).We assume that all lexically governed rules suchas Passive, Dative Advancement and Raising arecompiled into the lexical entries governing them.\[Cat\] vP\[0,11\[HI seemed\[Cat\] AP\[c\] \[2,1,0\]\[n\] i nFigure 2: S-graph for John seemed ill\[o,1)(1,o\] m\[elFigure 3: Raising Rule Graph\[cat\](1\]\[H\]\[c\]VP~Johnseemed\[Cat\] AP\[HI i nFigure 4: Surface Graph for John seemed ill\[Cat\] VP\[H\] seemed\[c t\] AP\[c\] \[2) John\[H\] iJ.J.Figure 5: Predicate-Argument Graph for Johnseemed ill99Thus, given has four entries (Ditransitive, Ditran-sitive + Dative, Passive, Dative + Passive).
Thisaspect of our framework is reminiscent of LFG\[4\] and HPSG \[7\], except hat in SFG, relationalstructure istransparently recorded in the stratifiedfeatures.
Moreover, SFG relies neither on LFG-style annotated CFG rules and equation solvingnor on HPSG-style SUBCAT lists.We illustrate below the process of constructinga lexical entry for given from rule graphs (ignor-ing morphology).
The rule graphs used are forDitransitive, Dative and (Agentless) Passive con-structions.
Combined, they yield a ditransitive-dative-passive S-graph for the use of given occur-ring in Joe was given ~ea (cf.
Figure 6).Dltransit ive:\[H\] given\[3)\[2)\[I)DATive:(2, 8)(3,2)DI tl DAT:\[H\] given\[3, 2)\[2, 8)\[1)PASsive:(2,1)\[1, 8, 0\]\[Cat\] s\[0,11 m Joe\[H\] was\[c\]\[Cat\] vP\[H\] given\[3,2,1,0\] m\[2, 8\] tea\[1,8,0\]Figure 6: S-graph for Joe was given iea.D113 DAT)  U PAS:\[H\] given\[3,2, i)\[2, 8)\[1, s, 0\]The idea behind label unification is thattwo compatible labels combine to yield a labelwith maximal  nonempty  overlap.
Left (right)closed labels unify with left (right) open labels toyield left (right) closed labels.
There are ten typesof label unification, determined by the four typesof bracket pairs: totally closed (open), closed onlyon the left (right).
However, in parsing (as op-posed to building a lexicalized grammar), we stip-ulate that successful label unification must resultin a ~o~ally closed label.
Additionally, we assumethat all labels in well-formed lexicalized graphs(the input graphs to the parsing algorithm) are atleast partially closed.
This leaves only four cases:Case 1.
\[or\] Ll \[o~1 = \[Or\]Case 2.
\[~) u \[~#\] = \[~#1Case 3.
(o~\] LI \ [~\]  : \[~c~\]Case 4.
\[+#) u (#+\] = \[+#+\]Note: c~, fl, 7 @ T~S+ and/3 is the longest com-mon, nonempty string.100The following list provides examples of each.1.
\[1,0\] U \[1,0\] = \[1,0\]2.
\[1) U \[1,0\] = \[1,0\]3.
(~,0\] U \[2,1,0\] = \[2,1,0\]4.
\[2,1) U (1,0\] = \[2,1,0\]Case 1 is the same as ordinary label unifica-tion under identity.
Besides their roles in unifyingrule-graphs, Cases 2, 3 and 4 are typically usedin parsing bounded control constructions (e.g.,"equi" and "raising") and extractions by meansof "splicing" Null R-signs onto the open ends oflabels and closing off the labels in the process.
Wenote in passing that cases involving totally openlabels may not result in unique unifications, e.g.,(1, 2) U (2, 1) can be either (2,1,2) or (1,2,1).
Inpractice, such aberrant cases seem not to arise.Label unification thus plays a central role in build-ing a lexicalized grammar and in parsing.THE PARSING ALGORITHMS-unification is like normal feature structureunification (\[1\], \[11\]), except that in certain casestwo arcs with distinct labels 1 and l' are replacedby a single arc whose label is obtained by unifying1 and l'.S-unification is implemented via the proceduresUn i fy -Nodes ,  Uni fy -Arcs ,  and Uni fy-Sets-of -Arcs:1.
Uni fy -Nodes(n,n ' )  consists of the steps:a.
Unify label(n) and label(n'), where nodelabels unify under identityb.
Unify-Sets-of-Arcs(Out-Arcs(n), Out-Arcs(n'))2.
Uni fy-Arcs(A,A' )  consists of the steps:a.
Unify label(A) and label(A')b. Unify-Nodes(target (A),target (A'))3.
Uni fy-Sets-of -Arcs(SeQ,  Set2),where Sett = {Aj , .
.
.
,A~} and Set2 ={Am,..., An}, returns a set of arcs  Set3, de-rived as follows:a.
For each arc Ai ?
SeQ, attempt o findsome arc A~ ?
Set2, such that Step 2aof Unify-arcs(Ai,A~) succeeds.
If Step2a succeeds, proceed to Step 2b and re-move A~ from Sets.
There are three pos-sibilities:i.
If no A~ can be found, Ai ?
Set3.ii.
If Step 2a and 2b both succeed, thenUnify-arcs(Ai, A~) ?
Set3.iii.
If Step 2a succeeds, but Step 2bfails, then the procedure fails.b.
Add each remaining arc in Set2 to Set3.We note that the result of S-unification can be aset of S-graphs.
In our experience, the unificationof linguistically well-formed lexical S-graphs hasnever returned more than one S-graph.
Hence,S-unification is stipulated to fail if the result isnot unique.
Also note that due to the nature oflabel unification, the unification procedure doesnot guarantee that the unification of two S-graphswill be functional and thus well-formed.
To insurefunctionality, we filter the output.We distinguish several classes of Arc: (i) Sur-face Arc vs. Non-Surface, determined by absenceor presence of a Null R-sign in a label's lastposition; (ii) Structural Arc vs. Constraint Arc(stipulated by the grammar writer); and (iii) Re-lational Arc vs. Category Arc, determined by thekind of label (category arcs are atomic and haveR-signs like Case, Number, Gender, etc.).
Theparser looks for arcs to complete that are Sur-face, S t ructura l  and  Re la t iona l  (SSR) .A simplified version of the parsing algorithmis sketched below.
It uses the predicates Left-P recedence  , R ight -P recedence  and Com-plete:.
P recedence:  Let Q~ = \[n~,Li, R~\], F?
SSR-Out-Arcs(n~) such that Target(F)= Anchor(Graph(n~)), and A ?
SSR-Out-Arcs(ni) be an incomplete terminal arc.Then:A.
Le f t -P recedence(A ,  n~) is true iff:a.
All surface arcs which must followF are incomplete.b.
A can precede F.c.
All surface arcs which must bothprecede F and follow A are com-plete.B.
R ight -P recedence(A ,  n~) is true iff:a.
All surface arcs which must precedeF are complete.b.
A can follow F.c.
All surface arcs which must bothfollow F and precede A are com-plete.1012.
Complete  : A node is complete if it is eithera lexical anchor or else has (obligatory) out-going SSR arcs, all of which are complete.
Anarc is complete if its target is complete.The algorithm is head-dr iven  \[8\] and was in-spired by parsing algorithms for lexicalized TAGs(\[6\], \[10\]).S impl i f ied Pars ing  A lgor i thm:Input :  A string of words Wl , .
.
.
,  w~.Output :  A chart containing all possible parses.Method:A. Initialization:1.
Create a list of k state-sets$1 , .
.
.
,  Sk, each empty.2.
For c = 1 , .
.
.
, k ,  for eachGraph(hi) of Wc, add \[ni, c - 1, c\]to Se.B.
Complet ions :For c = 1, .
.
.
,  k, do repeatedly until nomore states can be added to Se:1.
Le f tward  Completion:For all= ?\] Se,Qj = \[nj, Lj, L~\] E SL,, such thatComplete(nj ) andA E SSR-Out-Arcs(ni), such thatLeft-Precedence(A, hi)I F  Unify-a~-end-of-Path(ni, nj, A )n~,2.THEN Add \[n~,Lj,c\] to So.R ightward  Completion:For allQi = \[n/, L~, R~\] E SR,,Qj = \[nj,Pq, c\] 6 Sc such thatComplete(nj ), andA E SSR-Out-Arcs(ni), such thatRight-Precedence(A, hi)IF  Unify-at-end-of-Path(n~, nj, A)THEN Add \[n~, Li, el to So.To illustrate, we step through the chart for Johnseemed ill ( cf.
Figure 7).
In the string 0 John 1seemed 2 ill 3, where the integers represent stringpositions, each word w is associated via the lexi-calized grammar with a finite set of anchored S-graphs.
For expository convenience, we will as-sume counterfactually that for each w there is onlyone S-graph G~ with root r~ and anchor w. Alsoin the simplified case, we assume that the anchoris always the target of an arc whose source is theroot.
This is true in our example, but false ingeneral.For each G~, r~ has one or more outgoingSSR arcs, the set of which we denote SSR-Out-Arcs(r~).
For each w between integers x and yin the string, the Initialization step (step A of thealgorithm) adds \[n~, x, y\] to state set y.
We de-note state Q in state-set Si as state i:Q.
For aninput string w = Wl,...,w,~, initialization cre-ates n state-sets and for 1 < i < n, adds statesi : Qj ,1 _< j < k, to Si , one for each of the kS-graphs G~.
associated with wi.
After initializa-tion, the example chart consists of states 1:1, 2:1,3:1.Then the parser traverses the chart from left toright starting with state-set 1 (step B of the algo-rithm), using left and right completions, accordingto whether left or right precedence conditions areused.
Each completion looks in a state-set o theleft of Sc for a state meeting a set of conditions.In the example, for c = 1, step B of the algorithmdoes not find any states in any state-set preced-ing S1 to test, so the parser advances c to 2.
Aleft completion succeeds with Qi = state 2:1 =\[hi, 1, 2\] and Qj = state 1:1 = \[nj, 0, 1\].
State 2:2= \[n~, 0, 2\] is added to state-set $2, where n~ =Unify-at-end-of-Path(n,, nj, \[0, 1)).
Label \[0, 1) isclosed off to yield \[0, 1\] in the output graph, sinceno further R-signs may be added to the label oncethe arc bearing the label is complete.The precedence constraints are interpreted asstrict partial orders on the sets of outgoing SSRarcs of each node (in contrast o the totally or-dered lexicalized TAGs).
Arc \[0, 1) satisfies left-precedence because: (i) \[0, 1) is an incomplete ter-minal arc, where a te rmina l  arc is an SSR arc,the target of which has no incomplete outgoingsurface arcs; (ii) all surface arcs (here, only \[C\])which must follow the \[H\] arc are incomplete; (iii)\[0 1) can precede \[H\]; and (iv) there are no (incom-plete) surface arcs which must occur between \[0 1)and \[H\].
(We say can in (iii) because the parseraccomodates variable word order.
)The parser precedes to state-set $3.
A rightcompletion succeeds with Q~ = state 2:2 = \[n~, 0, 2\]and Q~ = state 3:1 = \[n~,2,3\].
State 3:2 -\[n~', 0, 3\] is added to state set $3, n~' = Unify-at-1021..11LP=0 RP=I L.P=I RP=2 VP\[H\] ?
\[o,/ seemed APJohn seemed=:=JLP:0 RP:2VP"OlJl ,\[H\] ~.JohnJohn seemed3:1JLP:2 RP=3AP" '~  \[.
"\]NP illill3:2\]LP=0 RP=3VP"JohnJohn seemed illFigure 7: Chart for John seemed ill.end-of-Path(n~, n~, \[C\]).
State 3:2 is a successfulparse because n~' is complete and spans the entireinput string.To sum up: a completion finds a state Qi =\[hi, L,, R~\] and a state Qj = \[nj, Lj, Rj\] in adja-cent state-sets (Li = Rj or P~/ = Lj) such thatni is incomplete and nj is complete.
Each success-ful completion completes an arc A E SSR-Out-Arcs(n~) by unifying nj with the target of A. Leftcompletion operates on a state Qi = \[ni,Li, c\]in the current state-set Sc looking for a stateQj = \[nj, Lj, L~\] in state-set SL, to complete somearc A E SSR-Out-Arcs(ni).
Right completion isthe same as left completion except that the rolesof the two states are reversed: in both cases, suc-cess adds a new state to the current state-set So.The parser completes arcs first leftward from theanchor and then rightward from the anchor.CONCLUDING REMARKSThe algorithm described above is simpler thanthe one we have implemented in a number of ways.We end by briefly mentioning some aspects of theVP//~\[LOC\]V pp\ [F J J~ \ [MI  / \in NP\[/,Q\]Figure 8: Example: inP ~ \[c\]dwhatFigure 9: Example: Whatgeneral algorithm.Opt iona l  Arcs:  On encountering an optionalarc, the parser considers two paths, skipping theoptional arc on one and attempting to complete iton the other.Const ra in t  Arcs  These are reminiscent ofLFG constraint equations.
For a parse to be good,each constraint arc must unify with a structuralarc.Mul t i - t ie red  S -graphs :  These are S-graphshaving a non-terminal incomplete arc I (e.g., the\[LOC\] arc in Figure 8.
Essentially, the parsersearches I depth-first for incomplete terminal arcsto complete.Pseudo-R-s igns :  These are names of sets ofR-signs.
For a parse to be good, each pseudo-R-sign must unify with a member of the set it names.Ext rac t ions :  Our approach is novel: it usespseudo-R-signs and mul t i rooted  S-graphs, illus-trated in Figure 9, where p is the primary root andd, the dangling root, is the source of a "slashedarc" with label of the form (b, / \ ]  (b a pseudo-R-sign).
Since well-formed final parses must be103single-rooted, slashed arcs must eventually unifywith another arc.To sum up: We have developed a unification-based, chart parser for relational grammars basedon the SFG formalism presented by Johnson andMoss \[2\].
The system involves compiling (combi-nations) of rules graphs and their associated lexi-cal anchors into a lexicalized grammar, which canthen be parsed in the same spirit as lexicalizedTAGs.
Note, though, that SFG does not use anadjunction (or substitution) operation.\[10\] Yves Schabes.
Mathematical and Compu-tational Properties of Lezicalized Grammars.PhD thesis, University of Pennsylvania, 1990.\[11\] Stuart Shieber.
Constraint-Based GrammarFormalisms.
MIT Press, 1992.Re ferences\[1\] Bob Carpenter.
The Logic of Typed FeatureStructures.
Cambridge UP, Cambridge, 1992.\[2\] David E. Johnson and Lawrence S. Moss.Some formal properties of stratified featuregrammars.
To appear in Annals of Mathe-matics and Artificial Intelligence, 1993.\[3\] David E. Johnson and Paul M. Postal.
ArePair Grammar.
Princeton University Press,1980.\[4\] Ronald Kaplan and Joan Bresnan.
Lexical-functional grammar, a formal system forgrammatical representation.
In J. Bresnan,editor, The Mental Representation of Gram-matical Relations.
MIT Press, 1982.\[5\] Robert Kasper and William C. Rounds.
Thelogic of unification in grammar.
Linguisticsand Philosophy, 13:35-58, 1990.\[6\] Alberto Lavelli and Giorgio Satta.
Bidirec-tional parsing of lexicalized tree adjoininggrammars.
In Proceedings of the 5th Confer-ence of the European Chapter of the Associa-tion of Computational Linguistics, 1991.\[7\] Carl Pollard and Ivan Sag.
Information-basedSyntaz and Semantics.
CSLI Lecture Notes.University of Chicago Press, Chicago, 1987.\[8\] Derek Proudian and Carl Pollard.
Parsinghead-driven phrase structure grammar.
InProceedings of the 23rd Annual Meeting of theACL, 1985.\[9\] William C. Rounds and Alexis Manaster-Ramer.
A logical version of functional gram-mar.
In Proceedings of The 25th AnnualMeeting of the Association for ComputationalLinguistics, 1987.104
