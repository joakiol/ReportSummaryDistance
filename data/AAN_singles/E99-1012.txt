Proceedings of EACL '99Ambiguous  propos i t ions  typedTim FernandoPhilosophy DepartmentUniversity of TexasAustin, TX 78712-1180, USAf ernando~ims, uni-stuttgart, de*Abst rac tAmbiguous propositions are analyzed ina type system where disambiguation iseffected uring assembly (i.e.
by coer-cion).
Ambiguity is introduced througha layer of types that are underspecifiedrelative to a pre-existing collection of de-pendent types, construed as unambigu-ous propositions.
A simple system ofreasoning directly with such underspec-ification is described, and shown to besound and complete for the full range ofdisambiguations.
Beyond erasing types,the system supports constraints on dis-ambiguations, including co-variation.1 IntroductionA widely held view expressed in (Carbonell andHayes, 1987) is that "if there were one word todescribe why natural language processing is hard,it is ambiguity."
For any given natural languageutterance, a formal language such as predicatelogic typically offers several non-equivalent (well-formed) formulas as possible translations.
An ob-vious approach is to take the disjunction of allalternatives, assuming (for the sake of the argu-ment) that the disjunction isa formula.
Even if itwere, however, various objections have been raisedagainst his proposal (e.g.
(Deemter, 1996)).
Forthe purposes of the present paper, what is inter-esting about a word, phrase, sentence or discoursethat is ambiguous in isolation is how it may getdisambiguated when combined with other expres-sions (or, more generally, when placed in a widercontext); the challenge for any theory of ambigu-ity is to throw light on that process of disambigua-tion.
*From June to mid-August 1999, I will be visitingIMS, Uni Stuttgart, Azenbergstr 12, 70174 Stuttgart,Germany.
Where I might be after that is unclear.More concretely, suppose ?
were a binary con-nective on propositions A and B such that A ?
B isa proposition ambiguous between A and B. Underthe "propositions-as-types" paradigm (e.g.
(Gi-rard et al, 1989)) identifying proofs of a proposi-tion with programs of the corresponding type (sothat "t: A" can be read as t is a proof of proposi-tion A, or equivalently, t is a program of type A),disambiguation may take the form of type coer-cion.
An instructive xample with F as the con-textisx:(A-+ B) oC, y:DoAr ~- ap(p.(x),q.
(y)):B (1)where ap is function application (corresponding tomodus ponens), while p. and qo are the first andsecond o-projections, o thatandx:(A ~ B) ?C  ~ p,(x):A ~ By :D .A  ~- qo(y):A.Evidently, there is something conjunctive (nevermind disjunctive) about o; but beyond the ques-tion as to whether the unambiguous propositionsconstituting the possible readings of an ambigu-ous proposition form a conjunctive or disjunctiveset (whatever that may precisely mean), there isalso the matter of the interconnected choices fromsuch sets, mediated by terms such as p?
(x) andq?
(Y).To ground these abstract considerations in nat-ural language processing, a few words about howto think of the terms t and types A are useful.For predicate logic formulas A, the terms t mightbe intuitionistic natural deduction proofs, relatedby the Curry-Howard isomorphism to a suitabletyped A-calculus.
A notable innovation madein Intuitionistic Type Theory (ITT, (Martin-LSf,86Proceedings of EACL '991984)) is to allow proofs to enter into judgments ofwell-formedness (propositionhood).
This standsin sharp contrast to ordinary predicate logic (be itintuitionistic or classical), where well-formednessis a trivial matter taken for granted (rather thananalyzed) by the Curry-Howard isomorphism.
Fora natural anguage, however, it is well-formednessthat is addressed by building types A over sen-tences, nouns, etc (in categorial grammar; e.g.
(Morrill, 1994)) or LFG f-structures (in the "glue"approach, (Dalrymple t al., 1993; Dalrymple etal., 1997)).
Now, while ITT's rules for proposi-tionhood hardly constitute an account of gram-maticality in English, the combination (in ITT)of assertions of well-formedness (A type) and the-oremhood (t: A) re-introduces matters of informa-tion content (over and above grammatical form),which have been applied in (Ranta, 1994) (amongother places) to discourse semantics (in particu-lar, anaphora).
The present paper assumes themachinery of dependent functions and sums inITT, without choosing between grammatical ndsemantic applications.
In both cases, what ambi-guity contributes to the pot is indeterminacy intyping, the intuition being that an expression isambiguous to the extent that its typing is inde-terminate.That said, let us return to (1) and consider howto capture sequent inferences such asr I -x : (A -+ B) .C  rFy :D?AV }- ap(p?(x),q?
(y)):B(i)and more complicated cases from iterated appli-cations of .
,  nested among other type constructs.The idea developed below is to set aside the con- andnective ?
(as well as notational clutter p., q.
), (ii)and to step up from assertions t : A to (roughly)t :: A, where A is a set of types A (roughly,t : A : ,4).
For instance, a direct transcription ofthe -~-introduction rule into :: isF,x::A }- t::BF }- Ax.t::A -+/3 (2)where .4 --+/3 abbreviates the set{A --+ B I A E Aand B E/3}.But what exactly could t ::A mean?
The disjunc-tive conceptiont::A iff t:A for someAEA (3)would have as a consequence the implicationt::-4 and .4 C B implies t::B.Now, if combinatorial explosion is a problem forambiguity, then surely we ought to avoid feedingit with cases of spurious ambiguity.
A comple-mentary alternative is conjunction,t::A iff t:A for a l lAEA,  (4)the object his time being to identify the C_-largestsuch set A, as (4) supportst::A and B C .4 implies t::B .But while (4) and (2) will do for Ax.y where y isa variable distinct from x, (4) suggests that (2)overgenerates for Ax.x.
Spurious ambiguity mayalso arise to the left of ~- (not just to the right),if we are not careful to disambiguate he context.
(1) illustrates the point; compareF ~- x::{A --~ B,C} F ~- y::{A,D} (5)r I- ap(=,v)::{B}where the context F is left untouched, toF }-- x::{A -+ B,C} F }- y::{A,D} (6)x::{A -+ B},y:: {A} }- ap(x,y):: {B}where the context gets trimmed.
(5) and (2) yieldF Ax.Ay.ap(x,y)::{A -~ B,C} -~ ({A,D} -~ {B})whereas (6) and (2) yieldI- Ax.Ay.ap(x,y):: (A -+ B} + ((A} -~ {B}) .To weed out spurious ambiguity, we willattach variables onto sets .4 of types, to formdecorated expressions ctcollect constraints on a's in sets C, hung assubscripts, }-c, on ~-.
(3) and (4) are then sharpened by a contextualcharacterization, semantically interpreting judg-ments of the form t :: a and a typ by disambigua-tions respecting suitable constraints.2 Two sys temsLet us begin with a system of dependent types,confining our attention to three forms of judg-ments, F context, A type and t :A.
(That is, forsimplicity, we leave out equations between typesand between terms.)
Contexts can be formed fromthe empty sequence ()(Oc) }- 0 context(tc) F ~ A type x ~ Var(P)F, x : A context87Proceedings of EACL '99where Var(F) is the set of variables occurring inF.
Assumptions cross \[--(As) ~- F, x: A contextF,x:A~-x:Aand contexts weaken to the rightF ~- O ~- F, A context(Weak) F, A ~- O(where O ranges over judgments A type and t :A).
Next come formation (F), introduction (I)and elimination (E) rules for dependent functionsrI (generalizing non-dependent functions -+)(l'I F) ~- F, x: A context F, z : A ~- B type(HI)(HE)r F (I'Ix:A)B typeF,z:A I- t:BF ~- )~z.t:(1-Iz:A)Br F t:(Hz:A)B r F u:Ar F ap(t,~,):B\[~ := ~\](where B\[x := u\] is B with x replaced by u)and for dependent sums Y\].
(generalizing Carte-sian products x)(~-\].
F) ~- F,x:A context r ,x :A  ~- B typeF ~- (~E\]x:A)B typer f- t:A r l- ~:B\[: := t\] (El) r F (t ,u):(Ez:A)BFF t : (Ex:A)B(EEp)  r F p(t):Ar F t:(~,x:A)S(EEq)  r ~-q(t):B\[x :=p(t)\] "Now for the novel part: a second system, withterms t as before, but colons squared, and :-types A, B replaced by decorated expressions a, j3and unadorned expressions .4 generated simulta-neously according too I(H I (E,(I I  :::a), I (E  :::a), ia~{t} J aP \[ aq{t}where a belongs to a fixed countable set X of vari-ables.
The intent (made precise in the next sec-tion) is that a u-expression .4 describes a set of:-types, while a d-expression a denotes a choicefrom such a set.
D-expressions of the form a~, a p,aq{t} and a/~{t} are said to be non-dependent,and are used, in conjunction with constraints ofthe form fcn(a,/3), sum(a) and eq(a,/3), to infersequents relativized to finite sets C of constraintsas followsr F-c t::a r I-c' u::X3 (\[In) r Fcuc, u{f~(~,~)} ap(t, u)::as{u}F \["c t::a(EnP) F FCu(sum(a)} p(t)::aPF \[-C t::a(E  nq) r Fco{sum(o)} q(t)::aq{p(t)} 'where each of the three rules have the side condi-tion that a is non-dependent.
1 In addition,r Fc t::(I'\[z::a)X~ r Fc, u::~r(HE)?
r FCUC'U{eq(a,'y)} ap(t,u)::~\[x := u\]with the side condition a # % The intuition (for-malized in clauses (c2)-(c4) of the next section) isthat- the constraint eq(a, 7) is satisfied by a dis-ambiguation equating a with %- fcn(a, i3) is satisfied by a disambiguation f (~and/3 to :-types of the form (H z : A)B andA respectivelyand- sum(a) is satisfied by a disambiguation of ato a :-type of the form (~-'~ x: A)B).Rules of the previous ystem translate to(()c)?
F~ () cxtF I-C -4 typ x ~ Var(F)(tc)?
Fc r ,z: :A~ coot(As)O Fc F,x::a cxtF,x::a ~-c x::aF I-c 0 I-c, F, A cxt(Weak)?
F, A I-cue' 0(iiF)O Fc r ,x : :a  cxt r ,x : :a  Fc' B typF \[-CuO (l'I x::a) B typF,x::a I-c t::~( l l I )  ?
r I-c ~z.t::(H z::a)x~r I-c t::( I Iz::a)~ r I-c' u::a( l iE)?
r Fcuc, ap(t,u)::~\[z :=u\](~F)O J-c I ' ,z: :a cxt F,x::a ~-c' B typr Fcuc' (~z : :a )B  typr kc t::a r bc, u::~\[x := t\](EI)?
r Fc~c, (t,~)::(E~::a)~(EEp)O r Fc t : : (Ex : :a )~F ~-c p(t)::ar kC t : : (Ez : :a )~ (E  E~) ?
r Vc q(t)::~\[x := p(t)\] "1Variations on this side condition ~e taken up in?5 below.88Proceedings of EACL '99Further rules provide co-varying choicesF l-c t::a z ?
Vat(r) (::c) l -cC,  z : :a  cxt(YIc) l-c r ,x: :a cxt r ,x : :a  l-o t::t~l-cuc' r,y::(l'Ix::a)/~ cxt(~c)  l-c r ,x: :a cxt r ,x : :a  t-o t::t3t-cuc, r,y::(5:~::a)t~ ?xt 'where (Hc) and (~"\].c) each have the side conditiony ?
Var(r) u {z}.3 D isambiguat ing  ::Let Ty  be the collection of :-type expressions A,and for every d-expression a, let- X(a) be the set of variables in 2:' occurringin a- D(a) be the set of (sub-)d-expressions/~ oc-curring in a (including a)and- U(a) be the set of (sub-)u-expressions A oc-curring in a.Suppressing the tedious inductive definitions ofD(a) and U(a), let us just note that, for instance,D((l-I x::a=)(~'\]~y::a'y)a=  is(IIa=, a~V, az}and U((I- I x ::a=)(~'~.
y::a'y)az) iso, o'}.Next, given a d-expression a0 and a function p :D(ao) --+ Ty,  let -P be the function from U(a0)to Pow(Ty) such that for a E X(ao),a p = Ty  ,for (I-\[ x : :a)A e U(ao),( ( I~x : :a )x )  p = {(Hx:p(a ) )A  I A E A p}and for ()-~.=::a)A e U(ao),((~-~x::a)A) p = {(Zx :p(a) )A  I A e AP} .Now, call p a disambiguation of ao if the followingconditions hold:(i) for every A= E D(a0), p(,4=) E A p(ii) for every (1FIx::a)/3 E D(ao),p((H ~:: a)Z) = (H ~: p(a))p(x~)(iii) for every (~x: :a) /3  E D(ao),p ( (~ x :: a)lh) = (~ x :p(a))p(13)(iv) for every a~{t} E D(ao),p(a) = (rl x :p(/~))Afor some x and A with A\[x := t\] = p(a~{t})(v) for every a p e D(ao),p(a) = (~x:p(aP) )B  for some x and Band(vi) for every aq{t} E D(ao),p(a) = (~x:A)Bfor some x, A and B withSix :=  t\] = p(aq{t}) .Next, let us pass from a single d-expression aoto a fixed set Do of d-expressions.
A disambigua-tion of the set Do of d-expressions is a function pfrom U{D(a) \] a E Do} to Ty such that for alla E Do, p restricted to D(a) is a disambiguationof a.
2 A disambiguation p of Do respects a set Cof constraints if there is an extension p+ _D p sothat(cl) p+ is a disambiguation fDo U {a I a is mentioned in C}(c2) whenever eq(a,/~) E C, p+(a) --- P+(I~)(c3) whenever fcn(a,/3) e C,p+(a) = (Ilx:p+(l~))B for some x and Band(c4) whenever sum(e) E C,p+(a) = (~x:A)B  for some x, A and B.Given a sequence F of the formXl :e l ,  .
.
.~Xn:an~let irna(F) = {a l , .
.
.
, an} ,  and for every disam-biguation p of a set Do containing ima(F), letFp = X l :P (a l ) ,  " " ,  xn:p(an)  ?Let us say that l-c F cxt can be disambiguatedto l- F' context if there is a disambiguation p ofima(F) respecting C such that F' = Fp.
Similarly,F l-c a typ (t :: a) can be disambiguated to F' l-A type (t : A) if there is a disambiguation p ofirna(F) U {a} respecting C such that F' = Fp andA = p(a).2It is crucial for this formulation that the set Var(F)mentioned in side conditions for various rules in theprevious section include all variables in P, whetherthey occur freely or bound.89Proceedings of EACL '994 Re la t ing  the  der ivat ionsObserve that to derive a sequent other than }-0 context in the first system, or ~?
0 cxt in thesecond, we need to assume a non-empty set 7"of sequents.
Let us agree to write F ~_r O tomean that the sequent F }- O is derivable fromT, and ~_T F context o mean that }- F context isderivable from 7".
Similarly, for the second system(with ~- replaced by ~-c, context by cxt, etc).
Asevery rule (R) for the first system has a counter-part (R) ?
in the second system, it is tempting toseek a natural translation .?
from the first systemto the second system validating the followingClaim: F ~-?"
O implies F ?
~-~'?
0%For example, if 7" consists of the sequent ~- A type,F is empty, and O is Az.x: (\[i z :A)A,  then 7"o is{~-?
a typ}, F ?
is empty, and O ?
is Ax.z :: (I\] x ::ax)ax.
Replacing F by y:A, and O by ~z.y:(YIx:A)A, we get y :: ay for F ?
and ~z.y :: (l'I x :: az)%for 0%To pin down a systematic definition of .
?, it iseasy enough to fix a 1-1 mapping X ~4 a x ofatomic :-types X to variables ax in ~Y, and setx o = ,,x (7)( (Hx :A)B)?
= (1-\[x::A?.
)B ?
(8)( (E  x:A)B)?
= (E  x : :A?
, )B ?
(9)(A type) ?
= A ?
typ (10)(*:A) ?
= z : :A?
, .
(11)While (11) induces a translation F?
of a contextF, what about (t : A) ?, where t is not just, as in(11), a variable x?
Before revising the definitionof d-expressions a to accommodate subscripts ton A ?, let us explore what we can do with (7)-(11).
Define a simple type base 7" to be a set ofsequents of the form F ~- A type.
Given a simpletype base 7", let 7"0 be its translation into :: ac-cording to equations (11) and (10).
By inductionon derivations from 7", we can prove a reformu-lation of the claim above, where F ?
and O ?
arereplaced by disambiguations.Proposition 1.
Let 7" be a simple type base.
(a) r context implies ~0 F' cxt for some F'such that ~-o F' cxt can be disambiguated toF context.
(b) F ~T A type implies F' ~?
a typ for somer '  and a such that F' ~-0 a typ can be dis-ambiguated to F ~ A type.
(c) F ~_ 7" t : A implies F' ~-o ~ t :: a for some F'and a such that F' ~-o t :: a can be disam-biguated to F ~- t:A.Moreover, as the rules (1-In), (~\] nv) and (~ nq)can, for disambiguations that meet the appropri-ate constraints, be replaced by (1"I E), (~\] Ep) and(~ Eq), it follows thatProposition 2.
Let 7" be a simple type base.
(a) / f  ~-c ~ F cxt and \[-c F cxt can be d/sam-biguated to ~- F' context, then ~" F' context.
(b) I f r  ~- ?
T~ a typ and r ~-c a typ can be disam-biguated to F' ~- A type, then F' ~_T A type.
(c) I f r  \[--c r?
t: :a andr  ~-c t::a can be disam-biguated to r '  F- t:A, then F' ~_r t:A.Conversely, going from ( l iE)  ?, (~Ep)  ?
and(E  Eq) ?
to (\[in), (Y\]~ np) and ()-~ nq), we haveProposition 3.
Let 7" be a simple type base.
(a) / f  ~_r r '  context and ~-c r cxt can be disam-biguated to ~- F' context, then ~-c y?
F cxt.
(b) I fF '  ~_7" A type and P ~-c a typ can be disam-biguated to r '  S A type, then P ~-~ a typ.
(c) If F' ~-~" t : A and F ~-c t :: a can be disam-biguated to F' ~- t:A, then F ~o t::t~.Proposition 3(c) is roughly ~ of (3), while Propo-sition 2(c) approximates =~ of (4).
If Proposi-tion 2 says that the system for :: above is sound,Proposition 3 says it is complete.
3 To tie togetherPropositions 2 and 3 in an equivalence, it is usefulto define a set C of constraints to be satisfiableif 0 is a disambiguation (of 0) respecting C. Notethat sequents ~-c F and F ~-c e have disambigua-tions exactly when C is satisfiable.
Consequently,Propositions 2 and 3 yield (focussing on ::)Coro l lary  4.
Given a simple type base 7" and asatisfiable set C of constraints, the following areequivalent.O) r(ii) F' ~_T t : A, for every sequent F' ~- t : A towhich F ~-c t : :a  can be disambiguated(iii) F' ~_T t : A, for some sequent ?'
~- t : A towhich F ~-c t : :a  can be disambiguated.SAs for how this relates to soundness and com-pleteness in say, classical predicate logic, please seethe discussion of translation versus entailment in theconcluding paragraph below.90Proceedings of EACL '99The formulation above of Corollary 4 depends onthe possibility of deriving sequents F ~c O whereC is not satisfiable.
We could have, of course,added side conditions to (1-In), (~-~.
nj,) and (~"~ nq)checking that the constraints are satisfiable.
Byelecting not to do so, we have exposed a certainseparability of inference from constraint satisfac-tion, which we will explore in the next section.For now, turning to the general case of a set Tof :-sequents, observe that if 7" is to be compatiblewith the first system, then(i) whenever F }- Ax.t:C belongs to 7",C must have the form (rI x:A)B withF,x:A }_7- t:B(ii) whenever F }- (t, u):C belongs to T,C must have the form (~\[: z: A)B withF \]_r t:A and F }_.7" u:B\[x := t\]whenever F }- ap(t,u):B belongs to 7",F \]_r t : (1-\[ x : A)B for some x and A suchthat F \]_'r u: Awhenever F ~- p(t) :A belongs to T,F }_7" t:(~\]x:A)B for some x and Bwhenever P }- q(t):B belongs to T,F ~_r t:(~_,x:A)B for some x and Awhenever F ~- e belongs to 7", ~'r  F contextwhenever ~- F,x : A context or F ~- t : Abelongs to T, F ~_7" A type(iii)(iv)(v)(vi)(vii)and(viii) whenever F }- (1-I z:A)B type orr ~- (~'\]~z:A)B type belongs to T,F \[_r A type and F, x:A }_7" B type.Thus, a base set T compatible with the first sys-tem can be assumed without loss of generality toconsist of sequents of two forms: F ~ A type andF }- t: B, where A and t are atomic (i.e.
indecom-posable by I-i, ~ and A, (,), ap,p, q respectively).By clause (vii) above, it follows that for every se-quent F ~- t : B in T, there is some To C_ Tsuch that F ~_7~ B type.
So starting with sim-ple type bases To, we can take (for B) the D-expression/3 which Proposition l(b) returns, givenF \[-% B type.
We can then define T ?
by trans-lating F ~- t :B  as F ?
}- t ::/3.
Alternatively, wemight make do with simple type bases by refor-mulating t as a variable xt, and smuggling zt intoenriched contexts F' for which a T-derivation ofF' ~- O' is sought (with O' adjusted for zt, ratherthan t).
That is, instead of injecting t on top of\]- (within some superscript 7"), we might add it(along with the context it depends on) to the leftof ~-.5 Var ia t ions  and  re f inementsThe sequent rules for :: chosen above lie betweentwo extremes.
The first is obtained by droppingthe side conditions of (I-In), (~-~.
np) and (~-'~.
nq),rendering the four rules (\[i E) ?, (~-\] Ep) ?, (~  nq) ?and (H E)?
redundant.
The idea is to put off con-straint satisfaction to the very end.
Alternatively,the side conditions of (I'\[n), (~-~.
np), (~-~ n~) and(l-I E)# might be strengthened to check that theconstraints are satisfiable (adding to (1-In), for ex-ample, the requirement that sum(a) ~ C U C' andeq(a,~') ?
C U C' for all 8' 6 D(/3)).
Assum-ing that we did, we might as well rewrite the rel-evant d-expressions, and dispense with the sub-script C. (For example, with the appropriate sideconditions, (\[In) might be revised tor t : :a I" F- u::#r\[a := (1J=::#)a\] F- ap(t,=)::a\[x := =1where F\[a := (I-I x::B)a\] is F with a replaced by(\[i z ::/3)a.)
An increase in complexity of the sideconditions is a price that we may well be willingto pay to get rid of subscripts C. Or perhaps not.Among the considerations relevant o the inter-play between inference and constraint satisfactionare:(z) the diffficulty/ease of applying/abusing infer-ence rules(D) the difficulty of disambiguating (i.e.
of veri-fying the assumption in Corollary 4 of a "sat-isfiable set C" )(W) wasted effort on spurious readings (i.e.
se-quents F ~-c O with non-satisfiable C).Designing sequent rules balancing (I), (D) and (W)is a delicate language ngineering problem, aboutwhich it is probably best to keep an open mind.Consider again the binary connective ?
mentionedin the introduction (which we set aside to concen-trate instead on certain underspecified representa-tions).
It is easy enough to refine the notion of adisambiguation to an e-disambiguation, where e isa function encoding the readings pecified by o. Inparticular, example (1) can be re-conceptualizedin terms of(i) the instanceF ~-o z::a r I-o y::~r F{fcn(c~,~)} ap(z,y)::a~{y}of the rule (1"I n) where F is the context x ::a,y::/3, and say, a is % and/3 is a'~ (againstthe base set of sequents }-e a typ and ~-$a' typ)91Proceedings of EACL '99and(ii) an c-disambiguation f a~{y}, where ~(a) ={A --+ B, C} and e(/3) = {A, D}.Given a (partial) function e from some setDo of d-expressions to Pow(Ty) - {0}, an e-disambiguation of Do is a disambiguation p ofDo such that for every a in the domain of ?,p(a) E e(a).
4 Now, there are at least two waysto incorporate e-disambiguations i to Corollary 4.The first is to leave the sequent rules for :: as be-fore, but to relativize the notion of a satisfiableset C of constraints to e (adding to the defini-tion of "p respects C" the requirement that theextension p+ be an e-disambiguation).
A moreinteresting approach is to bring e into the sequentrules by forming constraints o guarantee that dis-ambiguations are e-disambiguations (the generalpoint being that all kinds of information mightbe encoded within the subscripts C on ~-).
Forstarters, we might change the rule (0c) ?
to(Oc)?
I-o,  0 cxtwhere the subscript 0, e denotes a constraint setrequiring that for every a in the domain of e,a can only be disambiguated into an element ofe(a).
The rules (l-in), (~nv)  , (~'~ nq) and (FI E)?might then be modified to trim the sets e(a) sothat in example (1), for instance, the applica-tion of (Fin) reduces e(a) = {A -~ B, C) toe'(a) = {A --+ B}.
More specifically, let (l'In)ber I-c,, x : :a  r ~c,,e y::~ (Fin) rwith the side condition that~x is non-dependent, and e is consistentwith 4 (i.e.
for every a in the domain ofboth e and d, ~(a) n e'(a) # 0)and where C" is C t3 C'U {fcn(a,B)} and e" com-bines e and e' in the obvious way (e.g.
map-ping every a in the domain of both ?
and e' toe(a)nd(a)).
(Subscripts C, e may, as in the case of0, ?, be construed as single constraint sets, whichare convenient for certain purposes to decomposeinto pairs C, e.)We could put a bit more work into (Fin) asfollows.
Given an integer k > 0, let Du(/3) be4We can also introduce, as a binary connective onu-expressions and/or on d-expressions, although thiswould require a bit more work and would run againstthe spirit of underspecified representations, insofar as?
spells out possible disambiguations.the subset of the set D(~) of sub-d-expressionsof B, from which ~ can be constructed with < kapplications of d-expression formation rules.
(Forexample, D1 ( (~ x :: a)( I t  Y ::/3)7) iswith ~ and 7 buried too deeply to be included.
)Now, for a fixed k, add to the side condition of(l'\]n) the requirement that sum(a) 9~ C U C' andeq(a, ff) 9~ C U C' for all/3' e Dk(/~); and choosee" to also rule out the possibility that a is f f  forsome f f  E Dk(~).
Clearly, the larger k is, thestronger the rule becomes.
But so long as a satisfi-ability check is made after inference (as suggestedby Corollary 4), it is not necessary that the con-straint set C in a sequent F I-c O that has beenderived be reduced (to make all its consequencesexplicit) any more than it is necessary to requirethat C be satisfiable.
(Concerning the latter, no-tice also that spurious equents may drop out asfurther inferences are made, eliminating the needthere to ever disambiguate.
)To establish (the analog of) Corollary 4, a cru-cial property for a sequent ruler l  t-cl O1 --- r ,  t-c. O, (,)r -cOto have is monotonicity: for every disambiguationp respecting C, p respects Ci for 1 < i < n. s (Thisis a generalization f Ci _C C, suggested by the en-coding above of e-disambiguations/, in terms ofconstraints.)
To weed out spurious readings (con-sideration (W) above), side conditions might beimposed on (*), which ought (according to (I))to be as simple as possible.
The trick in design-ing C (and (*)) is to make inference }- just com-plicated enough so as, (D), not to put an undueburden on disambiguating at the end.
The wholeidea is to distribute the work between inferring se-quents and (subsequently) checking satisfiability.The claim is that the middle ground between thetwo extremes mentioned at the beginning of thissection (i.e.
between lax side conditions that leavethe bulk of the work to disambiguation at the end,and strict side conditions that essentially reduce::to :) is fertile.6 D iscuss ionMore than one reader (of a previous draft of thispaper) has asked about linguistic examples.
The5Compare to (Alshawi and Crouch, 1992).
Mono-tonicity is used above for soundness, Proposition 2.Completeness, Proposition 3, follows from havingenough such rules (*) (or equivalently, making the sideconditions for (*) comprehensive enough).92Proceedings of EACL '99short, easy answer is that the sort of ambiguityaddressed here can be syntactic (with types Aranging over grammatical categories) or seman-tic (with types drawn, say, from a higher-orderpredicate logic).
Clearly, more must be said - -for example, to properly motivate the rules (:: c),(I-\[c) and (~"\]c) mentioned at the end of ?2.
De-tailed case studies are bound to push :: in variousdirections; and no doubt, after applying enoughpressure, the system above will break:Be that as it may, I hope that case studieswill be carried out (by others and/or by myself),testing, by stretching, the basic idea above.
Iclose with a few words on that idea, and, beg-ging the reader's indulgence, on the theoreticalbackground out of which, in my experience, itgrew.
From examining the binary connective ?in (Fernando, 1997), I concluded that ?
is unlikeany ordinary logical connective related to entail-ment because the force of ?
is best understood rel-ative not to entailment, but to translation.
Un-derlying the distinction between entailment andtranslation is that between well-formed formulasand possibly ambiguous expressions (correspond-ing, in the present work, to :-types, on the onehand, and d: and u-expressions, onthe other).
Anabstract picture relating the processes of trans-lation and entailment is framed in (Femando, inpress), which I have attempted toflesh out here forthe case of ITT, with a view to extending ITT'sapplications beyond anaphora to underspecifica-tion.
The obvious step is to drop all types, andconstrue the terms as belonging to a type-free A-calculus.
The twist above is that ambiguous ex-pressions are typed by d-expressions a, distinctfrom u-expressions .4.
The construction is, in fact,quite general, and can be applied to linear deriva-tions as well.
The essential point is to break freefrom a generative straitjacket, relaxing the infer-ence rules for derivations by collecting constraintsthat are enforced at various points of the deriva-tion, including the end.M.
Dalrymple, J. Lamping, F.C.N.
Pereira, andV.
Saraswat.
1993.
LFG semantics via con-straints.
In Proc.
Sixth European A CL.
Univer-sity of Utrecht.M.
Dalrymple, V. Gupta, J. Lamping, andV.
Saraswat.
1997.
Relating resource-based se-mantics to categorial semantics.
Mathematicsof Language 5, Saarbriicken.Kees van Deemter.
1996.
Towards a logic of am-biguous expressions.
In K. van Deemter andS.
Peters, editors, Semantic Ambiguity and Un-derspecification.
CSLI Lecture Notes Number55, Stanford.Tim Fernando.
1997.
Ambiguity under changingcontexts.
Linguistics and Philosophy, 20(6).Tim Fernando.
In press.
A modal ogic for non-deterministic discourse processing.
Journal ofLogic, Language and Information.Jean-Yves Girard, Yves Lafont, and Paul Tay-lor.
1989.
Proofs and Types.
Cambridge Tractsin Theoretical Computer Science 7.
CambridgeUniversity Press.Per Martin-LSf.
1984.
Intuitionistic Type Theory.Bibliopolis, Napoli.
Notes by Giovanni Sambinof a series of lectures given in Padua, June 1980.Glyn V. Morrill.
1994.
Type Logical Grammar.Kluwer Academic Publishers, Dordrecht.Aarne Ranta.
1994.
Type-Theoretical Grammar.Oxford University Press, Oxford.Re ferencesH.
Alshawi and R. Crouch.
1992.
Monotonic se-mantic interpretation.
In Proc.
30th AnnualMeeting of the Association for ComputationalLinguistics.J.
Carbonell and P. Hayes.
1987.
Natural lan-guage understanding.
In S. Shapiro, D. Eck-roth, and G. Vallasi, editors, Encyclopedia ofArtificial Intelligence.
Wiley and Sons, NewYork.93
