Proceedings of the 47th Annual Meeting of the ACL and the 4th IJCNLP of the AFNLP, pages 994?1002,Suntec, Singapore, 2-7 August 2009. c?2009 ACL and AFNLPA Polynomial-Time Parsing Algorithm for TT-MCTAGLaura KallmeyerCollaborative Research Center 441Universita?t Tu?bingenTu?bingen, Germanylk@sfs.uni-tuebingen.deGiorgio SattaDepartment of Information EngineeringUniversity of PaduaPadova, Italysatta@dei.unipd.itAbstractThis paper investigates the class of Tree-Tuple MCTAG with Shared Nodes, TT-MCTAG for short, an extension of TreeAdjoining Grammars that has been pro-posed for natural language processing, inparticular for dealing with discontinuitiesand word order variation in languages suchas German.
It has been shown that the uni-versal recognition problem for this formal-ism is NP-hard, but so far it was not knownwhether the class of languages generatedby TT-MCTAG is included in PTIME.
Weprovide a positive answer to this ques-tion, using a new characterization of TT-MCTAG.1 IntroductionFor a large range of linguistic phenomena, exten-sions of Tree Adjoining Grammars (Joshi et al,1975), or TAG for short, have been proposed basedon the idea of separating the contribution of a lex-ical item into several components.
Instead of sin-gle trees, these grammars contain (multi-)sets oftrees.
Examples are tree-local and set-local mul-ticomponent TAG (Joshi, 1985; Weir, 1988), MC-TAG for short, non-local MCTAG with dominancelinks (Becker et al, 1991), Vector-TAG with dom-inance links (Rambow, 1994) and, more recently,Tree-Tuple MCTAG with Shared Nodes (Lichte,2007)), or TT-MCTAG for short.For some of the above formalisms the wordrecognition problem is NP-hard.
This has beenshown for non-local MCTAG (Rambow and Satta,1992), even in the lexicalized case (Champollion,2007).
Some others generate only polynomial lan-guages but their generative capacity is too limitedto deal with all natural language phenomena.
Thishas been argued for tree-local and even set-localMCTAG on the basis of scrambling data from lan-guages such as German (Becker et al, 1992; Ram-bow, 1994).In this paper, we focus on TT-MCTAG (Lichte,2007).
So far, it has been shown that the univer-sal recognition problem for TT-MCTAG is NP-hard (S?gaard et al, 2007).
A restriction on TT-MCTAG has been proposed in (Kallmeyer andParmentier, 2008): with such a restriction, the uni-versal recognition problem is still NP-hard, butthe class of generated languages is included inPTIME, i.e., all these languages can be recognizedin deterministic polynomial time.
In this paper, weaddress the question of whether for general TT-MCTAG, i.e., TT-MCTAG without the constraintfrom (Kallmeyer and Parmentier, 2008), the classof generated languages is included in PTIME.
Weprovide a positive answer to this question.The TT-MCTAG definition from (Lichte, 2007;Kallmeyer and Parmentier, 2008) imposes a con-dition on the way different tree components from atree tuple in the grammar combine with each other.This condition is formulated in terms of mappingbetween argument and head trees, i.e., in order totest such a condition one has to guess some group-ing of the tree components used in a derivation intoinstances of tree tuples from the grammar.
This re-sults in a combinatorial explosion of parsing anal-yses.
In order to obtain a polynomial parsing al-gorithm, we need to avoid this effect.On this line, we propose an alternative charac-terization of TT-MCTAG that only requires (i) acounting of tree components and (ii) the check ofsome local conditions on these counts.
This allowsfor parsing in polynomial deterministic time.TT-MCTAG uses so-called ?parallel unordered?rewriting.
The first polynomial time parsingresults on this class were presented in (Ram-bow and Satta, 1994; Satta, 1995) for somestring-based systems, exploiting counting tech-niques closely related to those we use in this pa-per.
In contrast to string-based rewriting, the tree994rewriting formalisms we consider here are struc-turally more complex and require specializationsof the above techniques.
Polynomial parsing re-sults for tree rewriting systems based on paral-lel unordered rewriting have also been reportedin (Rambow, 1994; Rambow et al, 1995).
How-ever, in the approach proposed by these authors,tree-based grammars are first translated into equiv-alent string-based systems, and the result is againprovided on the string domain.2 Tree Adjoining GrammarsTree Adjoining Grammars (Joshi et al, 1975) area formalism based on tree rewriting.
We brieflysummarize here the relevant definitions and referthe reader to (Joshi and Schabes, 1997) for a morecomplete introduction.Definition 1 A Tree Adjoining Grammar(TAG) is a tuple G = (VN , VT , S, I,A) whereVN and VT are disjoint alphabets of non-terminaland terminal symbols, respectively, S ?
VN is thestart symbol, and I and A are finite sets of initialand auxiliary trees, respectively.
2Trees in I ?A are called elementary trees.
Theinternal nodes in the elementary trees are labeledwith non-terminal symbols, the leaves with non-terminal or terminal symbols.
As a special prop-erty, each auxiliary tree ?
has exactly one of itsleaf nodes marked as the foot node, having thesame label as the root.
Such a node is denoted byFt(?).
Leaves with non-terminal labels that arenot foot nodes are called substitution nodes.In a TAG, larger trees can be derived from theelementary trees by subsequent applications of theoperations substitution and adjunction.
The sub-stitution operation replaces a substitution node ?with an initial tree having root node with the samelabel as ?.
The adjunction operation replacesan internal node ?
in a previously derived tree ?with an auxiliary tree ?
having root node with thesame label as ?.
The subtree of ?
rooted at ?
isthen placed below the foot node of ?.
Only inter-nal nodes can allow for adjunction, adjunction atleaves is not possible.
See figure 1 for an exampleof a tree derivation.Usually, a TAG comes with restrictions on thetwo operations, specified at each node ?
by setsSbst(?)
and Adj (?)
listing all elementary treesthat can be substituted or adjoined, respectively.Furthermore, adjunction at ?
might be obligatory.NPJohnSNP VPVlaughsVPADV VP?alwaysderived tree:SNP VPJohn ADV VPalways Vlaughsderivation tree:laugh1 2john alwaysFigure 1: TAG derivation for John always laughsTAG derivations are represented by derivationtrees that record the history of how the elemen-tary trees are put together.
A derivation tree isan unordered tree whose nodes are labeled withelements in I ?
A and whose edges are labeledwith Gorn addresses of elementary trees.1 Eachedge in a derivation tree stands for an adjunctionor a substitution.
E.g., the derivation tree in fig-ure 1 indicates that the elementary tree for John issubstituted for the node at address 1 and always isadjoined at node address 2.In the following, we write a derivation tree Das a directed graph ?V,E, r?
where V is the set ofnodes, E ?
V ?
V is the set of arcs and r ?
V isthe root.
For every v ?
V , Lab(v) gives the nodelabel and for every ?v1, v2?
?
E, Lab(?v1, v2?
)gives the edge label.A derived tree is the result of carrying out thesubstitutions and the adjunctions in a derivationtree, i.e., the derivation tree describes uniquely thederived tree; see again figure 1.3 TT-MCTAG3.1 Introduction to TT-MCTAGFor a range of linguistic phenomena, multicompo-nent TAG (Weir, 1988) have been proposed, alsocalled MCTAG for short.
The underlying motiva-tion is the desire to split the contribution of a singlelexical item (e.g., a verb and its arguments) intoseveral elementary trees.
An MCTAG consists of(multi-)sets of elementary trees, called tree sets.If an elementary tree from some set is used in aderivation, then all of the remaining trees in theset must be used as well.
Several variants of MC-TAGs can be found the literature, differing on the1In this convention, the root address is ?
and the jth childof a node with address p has address p ?
j.995specific definition of the derivation process.The particular MCTAG variant we are con-cerned with is Tree-Tuple MCTAG with SharedNodes, TT-MCTAG (Lichte, 2007).
TT-MCTAGwere introduced to deal with free word order phe-nomena in languages such as German.
An exam-ple is (1) where the argument es of reparieren pre-cedes the argument der Mann of versucht and isnot adjacent to the predicate it depends on.
(1) ... dass es der Mann zu reparieren versucht... that it the man to repair tries?...
that the man tries to repair it?A TT-MCTAG is slightly different from stan-dard MCTAGs since each elementary tree set con-tains one specially marked lexicalized tree calledthe head, and all of the remaining trees in the setfunction as arguments of the head.
Furthermore, ina TT-MCTAG derivation the argument trees musteither adjoin directly to their head tree, or theymust be linked in the derivation tree to an elemen-tary tree that attaches to the head tree, by meansof a chain of adjunctions at root nodes.
In otherwords, in the corresponding TAG derivation tree,the head tree must dominate the argument trees insuch a way that all positions on the path betweenthem, except the first one, must be labeled by ?.This captures the notion of adjunction under nodesharing from (Kallmeyer, 2005).2Definition 2 A TT-MCTAG is a tuple G = (VN ,VT , S, I,A,T ) where GT = (VN , VT , S, I,A) isan underlying TAG and T is a finite set of treetuples of the form ?
= ?
?, {?1, .
.
.
, ?r}?
where?
?
(I ?
A) has at least one node with a terminallabel, and ?1, .
.
.
, ?n ?
A.
2For each ?
= ?
?, {?1, .
.
.
, ?r}?
?
T , we call ?the head tree and the ?j?s the argument trees.We informally say that ?
and the ?j?s belong to ?,and write |?| = r + 1.As a remark, an elementary tree ?
from the un-derlying TAG GT can be found in different tree tu-ples in G, or there could even be multiple instancesof such a tree within the same tree tuple ?.
In thesecases, we just treat these tree instances as distincttrees that are isomorphic and have identical labels.2The intuition is that, if a tree ??
adjoins to some ?, itsroot in the resulting derived tree somehow belongs both to ?and ??
or, in other words, is shared by them.
A further tree ?adjoining to this node can then be considered as adjoining to?, not only to ??
as in standard TAG.
Note that we assume thatfoot nodes do not allow adjunctions, otherwise node sharingwould also apply to them.For a given argument tree ?
in ?, h(?)
denotes thehead of ?
in ?.
For a given ?
?
I?A, a(?)
denotesthe set of argument trees of ?, if there are any, orthe empty set otherwise.
Furthermore, for a givenTT-MCTAG G, H(G) is the set of head trees andA(G) is the set of argument trees.
Finally, a nodev in a derivation tree for G with Lab(v) = ?
iscalled a ?-node.Definition 3 Let G = (VN , VT , S, I,A,T ) besome TT-MCTAG.
A derivation tree D =?V,E, r?
in the underlying TAG GT is licensed inG if and only if the following conditions (MC) and(SN-TTL) are both satisfied.?
(MC): For all ?
from G and for all ?1, ?2in ?, we have |{v | v ?
V, Lab(v) = ?1}| =|{v | v ?
V, Lab(v) = ?2}|.?
(SN-TTL): For all ?
?
A(G) and n ?
1,let v1, .
.
.
, vn ?
V be pairwise differenth(?
)-nodes, 1 ?
i ?
n. Then there arepairwise different ?-nodes u1, .
.
.
, un ?
V ,1 ?
i ?
n. Furthermore, for 1 ?
i ?n, either ?vi, ui?
?
E, or else there areui,1, .
.
.
, ui,k, k ?
2, with auxiliary tree la-bels, such that ui = ui,k, ?vi, ui,1?
?
E and,for 1 ?
j ?
k ?
1, ?ui,j, ui,j+1?
?
E withLab(?ui,j , ui,j+1?)
= ?.
2The separation between (MC) and (SN-TTL)in definition 3 is motivated by the desire toseparate the multicomponent property that TT-MCTAG shares with a range of related formalisms(e.g., tree-local and set-local MCTAG, Vector-TAG, etc.)
from the notion of tree-locality withshared nodes that is peculiar to TT-MCTAG.Figure 2 shows a TT-MCTAG derivation for (1).Here, the NPnom auxiliary tree adjoins directly toversucht (its head) while the NPacc tree adjoins tothe root of a tree that adjoins to the root of a treethat adjoins to reparieren.TT-MCTAG can generate languages that, ina strong sense, cannot be generated by LinearContext-Free Rewriting Systems (Vijay-Shankeret al, 1987; Weir, 1988), or LCFRS forshort.
An example is the language of all stringspi(n[1] .
.
.
n[m])v[1] .
.
.
v[m] with m ?
1, pi a per-mutation, and n[i] = n is a nominal argument ofv[i] = v for 1 ?
i ?
m, i.e., these occurrencescome from the same tree set in the grammar.
Sucha language has been proposed as an abstract de-scription of the scrambling phenomenon as foundin German and other free word order languages,996*VPVP?
versucht,(VPNPnom VP?)
+ *NPnomder Mann, {}+*VPzu reparieren,(VPNPacc VP?)
+ *NPacces, {}+derivation tree:reparieren?versucht?NPnom1 ?Mann NPacc1esFigure 2: TT-MCTAG derivation of (1)* ?
VPv,( ?1 VPv=?n VP?NA)+* ?2 VPv VP?NAv=+,( ?3 VPv=?n VP?NA)+Figure 3: TT-MCTAGand cannot be generated by a LCFRS (Becker etal., 1992; Rambow, 1994).
Figure 3 reports a TT-MCTAG for this language.Concerning the other direction, at the time ofwriting it is not known whether there are lan-guages generated by LCFRS but not by TT-MCTAG.
It is well known that LCFRS is closedunder the finite-copy operator.
This means that,for any fixed k > 1, if L is generated by a LCFRSthen the language {w |w = uk, u ?
L} canalso be generated by a LCFRS.
We conjecture thatTT-MCTAG does not have such a closure prop-erty.
However, from a first inspection of the MC-TAG analyses proposed for natural languages (seeChen-Main and Joshi (2007) for an overview), itseems that there are no important natural languagephenomena that can be described by LCFRS andnot by TT-MCTAG.
Any construction involvingsome kind of component stacking along the VPprojection such as subject-auxiliary inversion canbe modelled with TT-MCTAG.
Unbounded extra-position phenomena cannot be described with TT-MCTAG but they constitute a problem for any lo-cal formalism and so far the nature of these phe-nomena is not sufficiently well-understood.Note that, in contrast to non-local MCTAG, inTT-MCTAG the trees coming from the same in-stance of a tuple in the grammar are not requiredto be added at the same time.
TT-MCTAGs sharethis property of ?non-simultaneity?
with other vec-tor grammars such as Unordered Vector Gram-mars (Cremers and Mayer, 1973) and Vector-TAG (Rambow, 1994), V-TAG for short, and itis crucial for the polynomial parsing algorithm.The non-simultaneity seems to be an advantagewhen using synchronous grammars to model thesyntax-semantics interface (Nesson and Shieber,2008).
The closest formalism to TT-MCTAG isV-TAG.
However, there are fundamental differ-ences between the two.
Firstly, they make a dif-ferent use of dominance links: In V-TAG domi-nance links relate different nodes in the trees ofa tree set from the grammar.
They present domi-nance requirements that constrain the derived tree.In TT-MCTAG, there are no dominance links be-tween nodes in elementary trees.
Instead, the nodeof a head tree in the derivation tree must domi-nate all its arguments.
Furthermore, even thoughTT-MCTAG arguments can adjoin with a delayto their head, their possible adjunction site is re-stricted with respect to their head.
As a result,one obtains a slight degree of locality that canbe exploited for natural language phenomena thatare unbounded only in a limited domain.
This isproposed in (Lichte and Kallmeyer, 2008) wherethe fact that substitution nodes block argument ad-junction to higher heads is used to model the lim-ited domain of scrambling in German.
V-TAGdoes not have any such notion of locality.
Instead,it uses explicit constraints, so-called integrity con-straints, to establish islands.3.2 An alternative characterization ofTT-MCTAGThe definition of TT-MCTAG in subsection 3.1 istaken from (Lichte, 2007; Kallmeyer and Parmen-tier, 2008).
The condition (SN-TTL) on the TAGderivation tree is formulated in terms of heads andarguments belonging together, i.e., coming fromthe same tuple instance.
For our parsing algo-rithm, we want to avoid grouping the instancesof elementary trees in a derivation tree into tu-ple instances.
In other words, we want to checkwhether a TAG derivation tree is a valid TT-997MCTAG derivation tree without deciding, for ev-ery occurrence of some argument ?, which of theh(?
)-nodes represents its head.
Therefore we pro-pose to reformulate (SN-TTL).For a node v in a derivation tree D, we writeDv to represent the subtree of D rooted at v. For?
?
(I ?
A), we define Dom(v, ?)
as the set ofnodes of Dv that are labeled by ?.
Furthermore,for an argument tree ?
?
A(G), we let pi(v, ?)
=|Dom(v, ?
)| ?
|Dom(v, h(?
))|.Lemma 1 Let G be a TT-MCTAG with underlyingTAG GT , and let D = ?V,E, r?
be a derivationtree in GT that satisfies (MC).
D satisfies (SN-TTL) if and only if, for every v ?
V and every?
?
A(G), the following conditions both hold.
(i) pi(v, ?)
?
0.
(ii) If pi(v, ?)
> 0, then one of the following con-ditions must be satisfied:(a) Lab(v) = ?
and pi(v, ?)
= 1;(b) Lab(v) = ?
and pi(v, ?)
> 1, and thereis some ?v, v??
?
E with Lab(?v, v??)
=?
and pi(v?, ?)
+ 1 = pi(v, ?
);(c) Lab(v) /?
{?, h(?)}
and there is some?v, v??
?
E with Lab(?v, v??)
= ?
andpi(v?, ?)
= pi(v, ?
);(d) Lab(v) = h(?)
and there is some?v, v??
?
E with Lab(?v, v??)
= ?
andpi(v, ?)
?
pi(v?, ?)
?
pi(v, ?)
+ 1.Intuitively, condition (i) in lemma 1 captures thefact that heads always dominate their argumentsin the derivation tree.
Condition (ii)b states that,if v is a ?-node and if v is not the only ?pend-ing?
?-node in Dv, then all pending ?-nodes inDv, except v itself, must be below the root adjoin-ing node.
Here pending means that the node isnot matched to a head-node within Dv.
Condition(ii)c treats the case in which there are pending ?-nodes in Dv for some node v whose label is neither?
nor h(?).
Then the pending nodes must all bebelow the root adjoining node.
Finally, condition(ii)d deals with the case of a h(?
)-node v where,besides the ?-node that serves as an argument ofv, there are other pending ?-nodes in Dv.
Theseother pending ?-nodes must all be in Dv?
, wherev?
is the (unique) root adjoining node, if it exists.The argument of v might as well be below v?, andthen the number of pending ?-nodes in Dv?
is thenumber of pending nodes in Dv, incremented by1, since the argument of v is not pending in Dvbut it is pending in Dv?
.
Otherwise, the argumentof v is a pending ?-node below some other daugh-ter of v. Then the number of pending ?-nodes inDv?
is the same as in Dv.PROOF We first show that (SN-TTL) implies both(i) and (ii).Condition (i): Assume that there is a v ?
Vand a ?
?
A(G) with pi(v, ?)
< 0.
Then forsome n and for pairwise different v1, .
.
.
, vn with?v, vi?
?
E?, Lab(vi) = h(?)
(1 ?
i ?
n),we cannot find pairwise different u1, .
.
.
, un with?vi, ui?
?
E?, Lab(ui) = ?.
This is in contradic-tion with (SN-TTL).
Consequently, condition (i)must be satisfied.Condition (ii): Assume ?
and v as in the state-ment of the lemma, with pi(v, ?)
> 0.
Letv1, .
.
.
, vn be all the h(?
)-nodes in D. Thereis a bijection f?
from these nodes to n pairwisedistinct ?-nodes in D, such that every pair vi,f?
(vi) = ui satisfies the conditions in (SN-TTL).Because of (MC), the nodes u1, .
.
.
, un must beall the ?-nodes in D. There must be at least one vi(1 ?
i ?
n) with ?vi, v?
?
E+, ?v, f?(vi)?
?
E?.Then we have one of the following cases.
(a) ui = v and vi is the only h(?
)-node dominat-ing v with a corresponding ?-node dominated byv.
In this case (ii)a holds.
(b) Lab(v) = ?, i.e., ?f?1?
(v), v?
?
E+ and thereare other nodes u ?
Dom(v, ?
), u 6= v with?f?1?
(u), v?
?
E+.
Then, with (SN-TTL), theremust be a v?
with ?v, v??
?
E, Lab(?v, v??)
= ?and for all such nodes u, ?v?, u?
?
E?.
Conse-quently, (ii)b holds.
(c) Lab(v) /?
{?, h(?)}.
Then, as in (b), theremust be a v?
with ?v, v??
?
E, Lab(?v, v??)
= ?and for all u ?
Dom(v, ?)
with ?f?1?
(u), v?
?E+, ?v?, u?
?
E?.
Consequently, (ii)c holds.
(d) Lab(v) = h(?).
If f?
(v) is dominated by a v?that is a daughter of v with Lab(?v, v??)
= ?, thenfor all u ?
Dom(v, ?)
with ?f?1?
(u), v?
?
E+we have ?v?, u?
?
E?.
Consequently, pi(v?, ?)
=pi(v, ?)
+ 1.
Alternatively, f?
(v) is dominated bysome other daughter v?
of v with Lab(?v, v??)
6=?.
In this case v?
must still exist and, for allu ?
Dom(v, ?)
with u 6= f?
(v) and with?f?1?
(u), v?
?
E+, we have ?v?, u?
?
E?.
Conse-quently, pi(v?, ?)
= pi(v, ?
).Now we show that (i) and (ii) imply (SN-TTL).With (MC), the number of ?-nodes and h(?
)-nodes in V are the same, for every ?
?
A(G).
Forevery ?
?
A(G), we construct a bijection f?
of the998same type as in the first part of the proof, and showthat (SN-TTL) is satisfied.
To construct f?, for ev-ery v ?
V we define sets V?,v ?
Dom(v, ?)
of ?-nodes v?
that have a matching head f?(v?)
domi-nating v. The definition satisfies |V?,v| = pi(v, ?
).For every v with v1, .
.
.
, vn being all its daughters:a) If Lab(v) = ?, then (by (ii)) for every 1 ?
j ?n with Lab(?v, vj?)
6= ?, V?,vj = ?.
If there is avi with Lab(?v, vi?)
= ?, then V?,v = V?,vi ?
{v},else V?,v = {v}.b) If Lab(v) /?
{?, h(?
)}, then (by (ii)) V?,vj = ?for every 1 ?
j ?
n with Lab(?v, vj?)
6= ?.
Ifthere is a vi with Lab(?v, vi?)
= ?, then V?,v =V?,vi , else V?,v = ?.c) If Lab(v) = h(?
), then there must be some i,1 ?
i ?
n, such that V?,vi 6= ?.
We need todistinguish two cases.
In the first case we haveLab(?v, vi?)
6= ?, |V?,vi | = 1 and, for every1 ?
j ?
n with j 6= i, either V?,vj = ?
orLab(?v, vj?)
= ?.
In this case we define f?
(v) =v?
for {v?}
= V?,vi .
In the second case we haveLab(?v, vi?)
= ?
and, for every 1 ?
j ?
n withj 6= i, V?,vj = ?.
In this case we pick an arbitraryv?
?
V?,vi and let f?
(v) = v?.
In both cases we letV?,v = (?ni=1 V?,vi) \ {f?
(v)}.With this mapping, (SN-TTL) is satisfied whenchoosing for each h(?
)-node vi the ?-node ui =f?
(vi) as its corresponding node.
4 Parsing algorithmIn this section we present a recognition algorithmfor TT-MCTAG working in polynomial time in thesize of the input string.
The algorithm can be eas-ily converted into a parsing algorithm.
The ba-sic idea is to use a parsing algorithm for TAG,and impose on-the-fly additional restrictions onthe underlying derivation trees that are being con-structed, in order to fulfill the definition of validTT-MCTAG derivation.
To simplify the presenta-tion, we assume without loss of generality that allelementary trees in our grammars are binary trees.The input string has the form w = a1 ?
?
?
an witheach ai ?
VT and n ?
0 (n = 0 means w = ?
).4.1 TAG recognitionWe start with the discussion of a baseline recogni-tion algorithm for TAG, along the lines of (Vijay-Shanker and Joshi, 1985).
The algorithm isspecified by means of deduction rules, follow-ing (Shieber et al, 1995), and can be implementedusing standard tabular techniques.
Items have theform [?, pt, i, f1, f2, j] where ?
?
I ?
A, p is theaddress of a node in ?, subscript t ?
{?,?}
speci-fies whether substitution or adjunction has alreadytaken place (?)
or not (?)
at p, and 0 ?
i ?
f1 ?f2 ?
j ?
n are indices with i, j indicating the leftand right edges of the span recognized by p andf1, f2 indicating the span of a gap in case a footnode is dominated by p. We write f1 = f2 = ?
ifno gap is involved.
For combining indices, we usethe operator f ?
?f ??
= f where f = f ?
if f ??
= ?,f = f ??
if f ?
= ?, and f is undefined otherwise.The deduction rules are shown in figure 4.The algorithm walks bottom-up on the deriva-tion tree.
Rules (1) and (2) process leaf nodesin elementary trees and require preconditionLab(?, p) = wi+1 and Lab(?, p) = ?, respec-tively.
Rule (3) processes the foot node of aux-iliary tree ?
?
A by guessing the portion of wspanned by the gap.
Note that we use p?
in theconsequent item in order to block adjunction atfoot nodes, as usually required in TAG.We move up along nodes in an elementarytree by means of rules (4) and (5), depending onwhether the current node has no sibling or has asingle sibling, respectively.Rule (6) substitutes initial tree ?
at p in ?, un-der the precondition ?
?
Sbst(?, p).
Similarly,rule (7) adjoins auxiliary tree ?
at p in ?, under theprecondition ?
?
Adj (?, p).
Both these rules usep?
in the consequent item in order to block mul-tiple adjunction or substitution at p, as usually re-quired in TAG.
Rule (8) processes nodes at whichadjunction is not obligatory.The algorithm recognizes w if and only if someitem [?, ?
?, 0,?,?, n] can be inferred with ?
?
Iand Lab(?, ?)
= S.4.2 TT-MCTAG recognitionWe now extend the recognition algorithm of fig-ure 4 to TT-MCTAG.
Let G be an input TT-MCTAG.
We assume that the tuples in T are num-bered from 1 to |T |, and that the elementary treesin each ?i are also numbered from 1 to |?i|, withthe first element being the head.
We then write ?q,rfor the r-th elementary tree in the q-th tuple in T .A t-counter is a ragged array T of integers withprimary index q ranging over {1, .
.
.
, |T |} andwith secondary index r ranging over {1, .
.
.
, |?i|}.We write T (q,r) to denote the t-counter withT [q, r] = 1 and zero everywhere else.
We also usethe sum and the difference of t-counters, which are999[?, p?, i,?,?, i + 1] (1)[?, p?, i,?,?, i] (2)[?,Ft(?
)?, i, i, j, j] (3)[?, (p ?
1)?, i, f1, f2, j][?, p?, i, f1, f2, j] (4)[?, (p ?
1)?, i, f1, f2, k][?, (p ?
2)?, k, f ?1, f ?2, j][?, p?, i, f1 ?
f ?1, f2 ?
f ?2, j](5)[?, ?
?, i,?,?, j][?, p?, i,?,?, j] (6)[?, ?
?, i, f1, f2, j][?, p?, f1, f ?1, f ?2, f2][?, p?, i, f ?1, f ?2, j](7)[?, p?, i, f1, f2, j][?, p?, i, f1, f2, j] (8)Figure 4: A baseline recognition algorithm for TAG.
Rule preconditions and goal item are described inthe text.
[?q,r, p?, i,?,?, i + 1, T (q,r)] (9)[?q,r, p?, i,?,?, i, T (q,r)] (10)[?q,r,Ft(?q,r)?, i, i, j, j, T (q,r)] (11)[?q,r, (p ?
1)?, i, f1, f2, j, T ][?q,r, p?, i, f1, f2, j, T ] (12)[?q,r, (p ?
1)?, i, f1, f2, k, T1][?q,r, (p ?
2)?, k, f ?1, f ?2, j, T2][?q,r, p?, i, f1 ?
f ?1, f2 ?
f ?2, j, T1 + T2 ?
T (q,r)](13)[?q?,r?
, ?
?, i,?,?, j, T ?
][?q,r, p?, i,?,?, j, T ?
+ T (q,r)] (14)[?q?,r?
, ?
?, i, f1, f2, j, T ?
][?q,r, p?, f1, f ?1, f ?2, f2, T ][?q,r, p?, i, f ?1, f ?2, j, T + T ?
](15)[?, p?, i, f1, f2, j, T ][?, p?, i, f1, f2, j, T ] (16)Figure 5: A recognition algorithm for TT-MCTAG.
Rule preconditions are the same as for figure 4,filtering conditions on rules are described in the text.defined elementwise in the obvious way.Let D be a derivation tree generated by the TAGunderlying G. We associate D with the t-counterT such that T [q, r] equals the count of all occur-rences of elementary tree ?q,r appearing in D. In-tuitively, we use t-counters to represent informa-tion about TAG derivation trees that are relevantto the licensing of such trees by the input TT-MCTAG G.We are now ready to present a recognizer basedon TT-MCTAG.
To simplify the presentation, wefirst discuss how to extend the algorithm of fig.
4in order to compute t-counters, and will later spec-ify how to apply TT-MCTAG filtering conditionsthrough such counters.
The reader should howeverkeep in mind that the two processes are strictlyinterleaved, with filtering conditions being testedright after the construction of each new t-counter.We use items of the form [?q,r, pt, i, f1, f2, j,T ], where the first six components are defined asin the case of TAG items, and the last component isa t-counter associated with the constructed deriva-tions.
Our algorithm is specified in figure 5.The simplest case is that of rules (12) and (16).These rules do not alter the underlying derivationtree, and thus the t-counter is simply copied fromthe antecedent item to the consequent item.Rules (9), (10) and (11) introduce ?q,r as thefirst elementary tree in the analysis (?q,r ?
A incase of rule (11)).
Therefore we set the associatedt-counter to T (q,r).In rule (14) we substitute initial tree ?q?,r?
atnode p in ?q,r.
In terms of derivation structures,we extend a derivation tree D?
rooted at node v?with Lab(v?)
= ?q?,r?
to a new derivation tree Dwith root node v, Lab(v) = ?q,r.
Node v has a sin-gle child represented by the root of D?.
Thus thet-counter associated with D should be T ?
+T (q,r).A slightly different operation needs to be per-formed when applying rule (15).
Here we havea derivation tree D with root node v, Lab(v) =?q,r and a derivation tree D?
with root node v?,Lab(v?)
= ?q?,r?
.
When adjoining ?q?,r?
into ?q,r,we need to add to the root of D a new child node,represented by the root of D?.
This means thatthe t-counter associated with the consequent itemshould be the sum of the t-counters associated withD and D?.Finally, rule (13) involves derivation trees D1and D2, rooted at nodes v1 and v2, respectively.Nodes v1 and v2 have the same label ?q,r.
The ap-plication of the rule corresponds to the ?merging?of v1 and v2 into a new node v with label ?q,r aswell, Node v inherits all of the children of v1 andv2.
In this case the t-counter associated with theconsequent item is T1 + T2 ?
T (q,r).
Here T (q,r)1000needs to be subtracted because the contribution oftree ?q,r is accounted for in both v1 and v2.We can now discuss the filtering conditions thatneed to be applied when using the above deduc-tion rules.
We start by observing that the algo-rithm in figure 5 might not even stop if there is aninfinite set of derivation trees for the input stringw = a1 ?
?
?
an in the underlying TAG GT .
Thisis because each derivation can have a distinct t-counter.
However, the definition of TT-MCTAGimposes that the head tree of each tuple containsat least one lexical element.
Together with con-dition (MC), this implies that no more than n tu-ple instances can occur in a derivation tree for waccording to G. To test for such a condition, weintroduce a norm for t-counters||T ||m =|T |?q=1max|?q|r=1 T [q, r] .We then impose ||T ||m ?
n for each t-counter con-structed by our deduction rule, and block the cor-responding derivation if this is not satisfied.We also need to test conditions (i) and (ii) fromlemma 1.
Since these conditions apply to nodesof the derivation tree, this testing is done at eachdeduction rule in which a consequent item may beconstructed for a node ?
?, that is, rules (14), (15)and (16).
We introduce two specialized predicatesF?
(T ) ?
?
(q, r) : T [q, 1] ?
T [q, r] ;F=(T ) ?
?
(q, r) : T [q, 1] = T [q, r] .We then test F?
(T ), which amounts to testingcondition (i) for each argument tree in A(G).Furthermore, if at some rule we have F?
(T ) ?
?F=(T ), then we need to test for condition (ii).To do this, we consider each argument tree ?q,r,r 6= 1, and compare the elementary tree ?q,r in theconsequent item of the current rule with ?q,r andh(?q,r) = ?q,1, to select the appropriate subcondi-tion of (ii).As an example, assume that we are applyingrule (15) as in figure 5, with p = ?.
Let Tc =T + T ?
be the t-counter associated with the con-sequent item.
When we come to process some ar-gument tree ?q,r such that Tc[q, r] ?
Tc[q, 1] > 0and ?q,r 6?
{?q,r, ?q,1}, we need to test (ii)c. Thisis done by requiringT ?
[q, r]?
T ?
[q, 1] = Tc[q, r]?
Tc[q, 1].If we are instead applying rule (16) with p = ?and T [q, r] ?
T [q, 1] > 0, then we test (ii)a, sincethere is no adjunction at the root node, by requir-ing ?q,r = ?q,r and T [q, r] ?
T [q, 1] = 1.We block the current derivation whenever theconditions in lemma 1 are not satisfied.The algorithm recognizes w if and only if someitem [?q,1, ?
?, 0,?,?, n, T ] can be inferred sat-isfying ?q,1 ?
I , Lab(?q,1, ?)
= S and F=(T ).The correctness immediately follows from the cor-rectness of the underlying TAG parser and fromlemma 1.Finally, we turn to the computational analysisof the algorithm.
We assume a tabular implemen-tation of the process of item inference using ourdeduction rules.
Our algorithm clearly stops aftersome finite amount of time, because of the filteringcondition ||T ||m ?
n. We then need to derive anupper bound on the number of applications of de-duction rules.
To do this, we use an argument thatis rather standard in the tabular parsing literature.The number of t-counters satisfying ||T ||m ?
nis O(ncG), with cG =?|T |i=1 |?i|.
Since all ofthe other components in an item are bounded byO(n4), there are polynomially (in n) many itemsthat can be constructed for an input w. It is not dif-ficult to see that each individual item can be con-structed by a number of rule applications boundedby a polynomial as well.
Therefore, the total num-ber of applications of our deduction rules is alsobounded by some polynomial in n. We thus con-clude that the languages generated by the class TT-MCTAG are all included in PTIME.5 Conclusion and open problemsWe have shown in this paper that the class of lan-guages generated by TT-MCTAG is included inPTIME, by characterizing the definition of TT-MCTAG through some conditions that can betested locally.
PTIME is one of the requiredproperties in the definition of the class of MildlyContext-Sensitive (MCS) formalisms (Joshi et al,1991).
In order to settle membership in MCS forTT-MCTAG, what is still missing is the constant-growth property or, more generally, the semilin-earity property.AcknowledgmentsThe work of the first author has been sup-ported by the DFG within the Emmy-NoetherProgram.
The second author has been partiallysupported by MIUR under project PRIN No.2007TJNZRE 002.1001ReferencesTilman Becker, Aravind K. Joshi, and Owen Rambow.1991.
Long-distance scrambling and tree adjoininggrammars.
In Proceedings of ACL-Europe.Tilman Becker, Owen Rambow, and Michael Niv.1992.
The Derivationel Generative Power of FormalSystems or Scrambling is Beyond LCFRS.
Tech-nical Report IRCS-92-38, Institute for Research inCognitive Science, University of Pennsylvania.Lucas Champollion.
2007.
Lexicalized non-local MC-TAG with dominance links is NP-complete.
In Ger-ald Penn and Ed Stabler, editors, Proceedings ofMathematics of Language (MOL) 10, CSLI On-LinePublications.Joan Chen-Main and Aravind Joshi.
2007.
Someobservations on a graphical model-theoretical ap-proach and generative models.
In Model TheoreticSyntax at 10.
Workshop, ESSLLI 2007, Dublin, Ire-land.Armin B. Cremers and Otto Mayer.
1973.
On matrixlanguages.
Information and Control, 23:86?96.Aravind K. Joshi and Yves Schabes.
1997.
Tree-Adjoning Grammars.
In G. Rozenberg and A. Salo-maa, editors, Handbook of Formal Languages, pages69?123.
Springer, Berlin.Aravind K. Joshi, Leon S. Levy, and Masako Taka-hashi.
1975.
Tree Adjunct Grammars.
Journal ofComputer and System Science, 10:136?163.A.
Joshi, K. Vijay-Shanker, and D. Weir.
1991.
Theconvergence of mildly context-sensitive grammati-cal formalisms.
In P. Sells, S. Shieber, and T. Wa-sow, editors, Foundational Issues in Natural Lan-guage Processing.
MIT Press, Cambridge MA.Aravind K. Joshi.
1985.
Tree adjoining grammars:How much contextsensitivity is required ro providereasonable structural descriptions?
In D. Dowty,L.
Karttunen, and A. Zwicky, editors, Natural Lan-guage Parsing, pages 206?250.
Cambridge Univer-sity Press.Laura Kallmeyer and Yannick Parmentier.
2008.
Onthe relation between Multicomponent Tree Adjoin-ing Grammars with Tree Tuples (TT-MCTAG) andRange Concatenation Grammars (RCG).
In CarlosMart?
?n-Vide, Friedrich Otto, and Henning Fernaus,editors, Language and Automata Theory and Ap-plications.
Second International Conference, LATA2008, number 5196 in Lecture Notes in ComputerScience, pages 263?274.
Springer-Verlag, Heidel-berg Berlin.Laura Kallmeyer.
2005.
Tree-local multicomponenttree adjoining grammars with shared nodes.
Com-putational Linguistics, 31(2):187?225.Timm Lichte and Laura Kallmeyer.
2008.
FactorizingComplementation in a TT-MCTAG for German.
InProceedings of the Ninth International Workshop onTree Adjoining Grammars and Related Formalisms(TAG+9), pages 57?64, Tu?bingen, June.Timm Lichte.
2007.
An MCTAG with Tuples for Co-herent Constructions in German.
In Proceedingsof the 12th Conference on Formal Grammar 2007,Dublin, Ireland.Rebecca Nesson and Stuart Shieber.
2008.
Syn-chronous Vector TAG for Syntax and Semantics:Control Verbs, Relative Clauses, and Inverse Link-ing.
In Proceedings of the Ninth International Work-shop on Tree Adjoining Grammars and Related For-malisms (TAG+9), Tu?bingen, June.Owen Rambow and Giorgio Satta.
1992.
Formal prop-erties of non-locality.
In Proceedings of 1st Interna-tional Workshop on Tree Adjoining Grammars.Owen Rambow and Giorgio Satta.
1994.
A rewrit-ing system for free word order syntax that is non-local and mildly context sensitive.
In C.
Mart?
?n-Vide, editor, Current Issues in Mathematical Lin-guistics, North-Holland Linguistic series, Volume56.
Elsevier-North Holland, Amsterdam.Owen Rambow, K. Vijay-shanker, and David Weir.1995.
Parsing d-Ttree grammars.
In Proceedings ofthe Fourth International Workshop on Parsing Tech-nologies, Prague, pages 252?259.Owen Rambow.
1994.
Formal and ComputationalAspects of Natural Language Syntax.
Ph.D. thesis,University of Pennsylvania.Giorgio Satta.
1995.
The membership problem for un-ordered vector languages.
In Developments in Lan-guage Theory, pages 267?275.Stuart M. Shieber, Yves Schabes, and Fernando C. N.Pereira.
1995.
Principles and Implementation ofDeductive Parsing.
Journal of Logic Programming,24(1&2):3?36.Anders S?gaard, Timm Lichte, and Wolfgang Maier.2007.
The complexity of linguistically motivatedextensions of tree-adjoining grammar.
In RecentAdvances in Natural Language Processing 2007,Borovets, Bulgaria.K.
Vijay-Shanker and Aravind K. Joshi.
1985.
Somecomputational properties of Tree Adjoining Gram-mars.
In Proceedings of the 23rd Annual Meetingof the Association for Computational Linguistics,pages 82?93.K.
Vijay-Shanker, D. J. Weir, and A. K. Joshi.
1987.Characterizing structural descriptions produced byvarious grammatical formalisms.
In 25th Meet-ing of the Association for Computational Linguistics(ACL?87).David J. Weir.
1988.
Characterizing mildly context-sensitive grammar formalisms.
Ph.D. thesis, Uni-versity of Pennsylvania.1002
