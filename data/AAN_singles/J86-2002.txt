SUMMARIZING NATURAL LANGUAGE DATABASE RESPONSESJugal  K. Kal itaDepartment of Computer and Information ScienceUniversity of PennsylvaniaPhiladelphia, PennsylvaniaMadene L. JonesDepartment of Computer ScienceUniversity of WaterlooWaterloo, Ontario, CANADAGordon I. McCallaDepartment of Computational ScienceUniversity of SaskatchewanSaskatoon, Saskatchewan, CANADAIn a human dialogue it is usually considered inappropriate if one conversant monopolizes the conver-sation.
Similarly it can be inappropriate for a natural language database interface to respond with alengthy list of data.
A non-enumerative "summary" response is less verbose and often avoids mislead-ing the user where an extensional response might.In this paper we investigate the problem of generating such discourse-oriented concise responses.We present details of the design and implementation f a system that produces ummary responses toqueries of a relational data base.
The system employs a set of heuristics that work in conjunction with aknowledge base to discover underlying regularities that form the basis of summary responses.
Thesystem is largely domain-independent, and hence can be ported relatively easily from one data base toanother.
It can handle a wide variety of situations requiring a summary response and can be readilyextended.
It also has a number of shortcomings which are discussed thoroughly and which form thebasis for a number of suggested research directions.1 INTRODUCTIONResearch into the diverse and complex issues involved indeveloping smart natural language interfaces to databasesystems has been going on for over a decade.
Pioneeringfront-end systems uch as REL (Thompson and Thomp-son 1975), LUNAR (Woods, Kaplan, and Nash-Webber1972), ROBOT (Harris 1977), "PLANES (Waltz 1978),REQUEST (Plath 1976), TORUS (Mylopoulos et al1976), and RENDEZVOUS (Codd et al 1978) exper-imented with, among other things, various parsingformalisms (e.g.
semantic grammars, transformationalgrammars, and augmented transition etworks); differentknowledge representation schemes (e.g.
using productionsystems or semantic networks); and the use of clarifica-tion dialogues in disambiguating a user's query.Recent research as addressed various dialogue issuesthat arise in natural language database interactions.Researchers such as Davidson (1982), Grosz (1977),Sidner and Israel (1981), and Webber (1978) have tack-led problems uch as the resolution of anaphoric refer-ences, the tracking of the user's focus of attention, andthe generation of cooperative r sponses.
In particular, theCO-OP system (Kaplan 1982) analyzes the user'spresumptions in order to generate appropriate xplana-tions for answers that may otherwise mislead the user.Janas (1979) takes a similar approach to generate indi-rect answers instead of providing direct inappropriateones.
Mays (1982) has developed techniques to monitorCopyright1986 by the Association for Computational Linguistics.
Permission to copy without fee all or part of this material is granted provided thatthe copies are not made for direct commercial advantage and the CL reference and this copyright notice are included on the first page.
To copyotherwise, or to republish, requires a fee and/or  specific permission.0362-613X/86/020107-124503.00Computational Linguistics, Volume 12, Number 2, April-June 1986 107Kalita, Jones, and McCalla Summarizing Natural Language Database Responseschanges in the data base and provide relevant informa-tion on these changes to the user.
McCoy (1982) andMcKeown (1982) attempt o provide answers to ques-tions about the structure of the data base rather thanextensional information as to its contents.In this paper we investigate another dialogue issue: thegeneration of "summary" rather than extensionalresponses.
Joshi, Kaplan, and Lee (1977) mention this asan interesting issue, but so far as we know the generationof summary responses has not been subsequently studiedto any great extent.
Summary responses are formulatedin terms of general characteristics, hared by the exten-sional response set, that distinguish responses in that setfrom other information in the data base.
It is often thecase, as we argue later, that summary responses are notordy more succinct than extensional responses, but areoften more appropriate as well.
In order to explore theissue of summary response generation, we haveconstructed a system that produces summary responsesfrom a small relational data base of student records.
Thesystem has two components: a domain-independent setof heuristics and a domain-dependent set of frames that"customize" the heuristics for a specific data base and aparticular class of users.
Since the frames are relativelyeasy to specify for a given database context, the summa-ry response techniques developed here may well be wide-ly applicable; that is, the system is to a large extentportable.The paper goes more fully into the nature of summaryresponses and their usefulness.
It describes the responsegeneration system in detail, including a presentation ofthe frames and heuristics used in the student databaseexample.
Extensive discussion is devoted to thestrengths, weaknesses, and subtleties of this approach tosummary response generation; and future researchdirections are outlined.
A readable overview of thesystem can be found in Kalita, Colbourn (Jones) andMcCalla (1984); a detailed presentation is available inKalita (1984).2 THE NATURE OF SUMMARY RESPONSESAn important convention of human conversation is thatno participant monopolize the discourse, ensuring thatcontrol can be shared (Joshi, Kaplan, and Lee 1977).
Forexample it is often considered inappropriate for a speakerto respond with a lengthy list of data; a shorter non-enu-merative response is, at times, more appealing.
Lengthyresponse sets could be summarized, or defined by a char-acteristic or attribute.
For instance, the questionQI:  Which employees engage in profit sharing?may be answered by listing the extension of a setcontaining perhaps, a long list of names, or by the inten-sional responseSI: All vice-presidents.Such summary answers avoid unnecessary and distractingdetails, and more important, they do not mislead the user.As another example, consider the query Q2 givenbelow (from Reiter et al 1983):Q2: Which department managers earn over $40k peryear?$2-1: Abel, Baker, Charles, Doug.$2-2: All of them.Response $2-1 is what might be expected of an existingsystem; response $2-2, the summary response, is normal-ly more appropriate if conversational principles and prac-tices are to be adhered to.
By enumerating managers whoearn over $40k, the first response implies that there aremanagers who do not earn that much.
Such a scalar impli-eature follows from the cooperative principle in conversa-tion (Grice 1975:45) that requires a speaker to makehis/her "conversational contribution", such as isrequired, at the stage at which it occurs, by the acceptedpurpose or direction of the talk exchange in which\[he/she is\] engaged".
There are four maxims that derivefrom this principle:(i) the maxim of quantity - make the contribution asinformative as desired but not more so;(ii) the maxim of quality - do not say what is believedto be false or that for which evidence is lacking;(iii) the maxim of relation - be relevant;(iv) the maxim of manner  - avoid obscurity, avoid ambi-guity, be brief, be orderly.In the case of query Q2 above, the responder wouldonly enumerate positive instances if he/she could not saythe more informative Al l  o f  them.
Thus, $2-1 mightmislead a user, who would expect the system to respondwith $2-2 if it were true.
Of course, the Gricean maximsmust be viewed as being phrased relative to theresponder's perceptions of the user's knowledge.
Thus,the responder would have to know exactly what partic-ular knowledge a given user had before being able todecide with certainty which responses are likely to bemisleading.
The usefulness of modelling the user will bediscussed further in section 6.In general, summary responses are aimed at meetingthe maxims of quantity and manner.
As Q2 illustrates, asummary response can be (somewhat paradoxically)more informative than an extensional response.
It canalso be briefer and less obscure than an extensionalresponse.
It is important to make only the relevantsummary responses.
Our system tries to maintain rele-vance through the use of a knowledge base tailored tomeet the expectations of different classes of users (seesection 4.2).
Since we don't produce responses not satis-fied by the data, the maxim of quality is not changed bythe generation of summary responses.
It is possible,however, to produce a summary response which itselfviolates Grice's maxims.
For example, assume the queryWho passed CMPT 110?
were posed to a summaryresponse generation system.
Producing the answer Al lstudents who got over 50% (if this happened to be true inthe current data base) would normally violate the maxims108 Computational Linguistics, Volume 12, Number 2, April-June 1986Kalita, Jones, and McCana Summarizing Natural Language Database Responsesof quantity and relation in that most users would be giveninformation they already knew.
Similarly, producing theanswer All students who got over 60% (if this happenedto be true in the current data base) might mislead a userinto thinking that 60?6 was a passing grade, hence violat-ing the maxim of quality (actually, Joshi's generalizationof this maxim since, strictly speaking, the answer is truth-ful).
Some techniques are incorporated into our system tohelp reduce the chances of this kind of thing occurring(see section 4), but it is still a problem, as we discuss inthe concluding section.Generation of summary responses is analogous to areversal of the interpretation process.
A natural anguagequestion is interpreted into one or more propositions thedata in the answer must satisfy, and then the appropriatedata is retrieved.
In a conventional database manage-ment system (DBMS), this extensional response is theonly possible answer.
But, we want to go back from theextensional data to predicates describing characteristicsof the data and from there to natural anguage.
Considerthe query, Which employees use a company car?.
Theinternal form into which this question is interpreted mightbe(employee uses car) & (car belongs to company)(The actual internal notation used in our system is morecomplicated than this - see section 4.3).
A conventionalDBMS would produce a response consisting of a set ofemployee names and possibly other relevant informationabout them.
But, we want to obtain a descriptiveanswer, such as(employee is president) V (employee is vice-president)which in turn can be expressed in natural language asThe president and the vice-presidents.Hence, we must obtain a description that is true of therelevant data and present he description to the question-er instead of providing the actual data values that satisfythe propositions set forth in the question.It is possible for a system to arrive at such conciseresponses from an extended atabase schema by employ-ing a heuristic search of the extensional data for theexistence of "interesting" patterns.
In the next section weoverview a system for producing summary responses.3 OVERVIEW OF THE SYSTEMWe have designed a system that produces summaryresponses to queries posed to a simple relational database of student records.
In order to concentrate on thepragmatics issues underlying the generation of summaryresponses, we ignore the complexities of starting with,and eventually producing, surface language.
Instead, thesystem starts with predicates representing the user'squery and produces predicates representing a summaryresponse.The flow of control in the system is simple.
The user'squery is formulated in an internal form which is under-stood by the underlying database management system.This internal form is discussed more fully in section 4.3.Using this query, the DBMS obtains ~ the extensionalresponse set, that is, the tuples that satisfy the user'squery.
After the data is accessed, the system consults itsknowledge base to try to formulate a summary response.A prime component of this knowledge base is a set ofheuristics used to find interesting non-enumerativepatterns.
As soon as a heuristic succeeds in discoveringsuch a pattern, the system terminates the search andproduces the response as dictated by the successfulheuristic.
This response is also in an internal notationidentical in form to that used to represent the input.
If allheuristics fail, the system reports its inability to produce adescriptive response.
In any event, the user may ask thesystem to produce an extensional list of the data ifdesired.Let's look at the knowledge base in slightly moredetail.
In order for the system to provide meaningfuldescriptive responses, the user's conceptions regardingthe nature and contents of the data base must be takeninto account.
Without a separate knowledge base, thiswould be impossible.
The knowledge base is employedto outline strategies for obtaining summary responses, toensure that the qualitative responses generated areappropriate, and to produce salient information fordescribing the data that satisfy a query.
The knowledgebase consists of two distinct parts: the heuristics, and theframes for the relations and attributes.The heuristics guide the search for "interesting"patterns in the data; the frames assist in determining"interestingness".
The heuristics are the procedural partof the system's knowledge.
There are several heuristics,including the equality, inequality, range, conjunction,disjunction, and foreign-key heuristics.
They are orderedaccording to the complexity of the search proceduresinvolved and are tried in this order so that the easiest(and usually the simplest to understand) summaryresponse is found first.The second part of the system's knowledge is repres-ented by frames which encode useful information aboutthe relations in the data base and their attributes.
Thereare two types of frames: relation frames, which suggestways of joining relations together in order to facilitatethe discovery of elaborate patterns in the data; and attri-bute frames, which give characteristics of various attri-butes in the relations in order to aid the determination ofrelevant and interesting patterns.Currently, both the frames and the heuristics must beprespecified by the system designer, rather than automat-ically created by the system to suit a given databasecontext.
However, this isn't a big problem since theheuristics are domain-independent and, hence, may beused with any other database domain without modifica-tion.
And, although the frames must be tailored to reflectcharacteristics of the particular data base and user, theframe notation is sufficiently straightforward that itComputational Linguistics, Volume 12, Number 2, April-June 1986 109Kalita, Jones, and McCaila Smnmarizlng Natural Language Database Responsesseems possible for a database manager to be able to do itrelatively easily.4 DETAILS OF THE SYSTEM4.1 THE RELATION AND ATI'RIBUTE FRAMESThe sample relational data base used in our implementa-tion consists of three relations:- STUDENTS,- COURSE-DESCRIPTIONS, and- COURSE-REGISTRATIONS.The data base stores useful information about graduatestudents and the courses in which they register.
Therelations and their attributes are shown in Figure 1.
Keyattributes are shown in italics.The current relation frames are very simple.
Eachframe corresponds to an actual relation in the data base;it provides the possible links with all other relations.
Inother words, these frames define all lossless joins of tworelations.
In cases where a direct join is not possiblebetween two specific relations, the frame contains thename of a third relation that must be included in the join.If two relations R~ and R 2 can be directly joined throughattributes A 1 in R 1 and A 2 in R 2, the corresponding entryin the LINKS siot is((R1 R2) (A 1 A2)).If the relations R 1 and R 2 cannot be joined directly, butcan be indirectly joined through a relation R3, the corre-sponding entry in the LINKS slot of the relation framesfor R 1 and R 2 is((R1 R2 R 3) (A 1 A31) (A32 A2)).The first sublist indicates that the relations R 1 and R 2 canbe indirectly joined through relation R 3.
The secondsublist indicates that R 1 and R 3 can be joined using theattribute A 1 in R1 and the attribute A31 in R 3.
Similarly,the relations R 3 and R. 2 can then be joined through theattribute A32 in R 3 and A 2 in R vFor the STUDENTS relation under consideration, therelation frame can be seen in Figure 2.
The relationsSTUDENTS and COURSE-REGISTRATIONS may bejoined through the fields STUDENT-ID-NO in STUDENTSand STUDENT-ID in COURSE-REGISTRATIONS.
Therelations STUDENTS and COURSE-DESCRIPTIONScannot be joined directly; the join has to be performedthrough the relation COURSE-REGISTRATIONS.STUDENTS and COURSE-REGISTRATIONS are linkedthrough the fields named above.
COURSE-REGISTRATIONS and COURSE-DESCRIPTIONS arejoined through the COURSE-NO field in both theserelations.The information in the relation frames is employedwhen the system fails to produce a non-enumerativeanswer after exhausting all the heuristics that deal withonly one relation.
The system then attempts to find adescriptive xpression considering another relation withwhich the original or target relation has some commonjoin-attribute(s).Relation frames allow the database manager the flexi-bility of naming attributes differently in differentrelations.
They also can be used to restrict the types ofjoins that can be undertaken (i.e.
not all possible joinsneed to be specified).
Except for these distinctions, itwould be relatively straightforward to generate therelation frames automatically.STUDENTS:(STUDENT-ID-NO, NAME, NO-OF-YEARS-COMPLETED,NATIONALITY, NATURE-OF-FINANCIAL-AID, NO-OF-COURSES-THIS-TERM,NO-OF-COURSES-COMPLETED, TAKING-MAKEUP-COURSES?,CUMULATIVE-GPA, UG-MAJOR)COURSE-DESCRIPTION:(COURSE-NO, COURSE-NAME, COURSE-LEVEL)COURSE-REGISTRATIONS:(COURSE-NO.
STUDENT-ID, OFFERED-IN-TERM, COURSE-GRADE)Figure 1.
Relations and Attributes in Graduate Student Data Base.Relation-Name: STUDENTSLinks:(((STUDENTS COURSE-REGISTRATIONS)(STUDENT-ID-NO STUDENT-ID))((STUDENTS COURSE-DESCRIPTIONS COURSE-REGISTRATIONS)(STUDENT-ID-NO STUDENT-ID) (COURSE-NO COURSE-NO)))Figure 2.
Relation Frame for the Relation STUDENTS.110 Computational Linguistics, Volume 12, Number 2, April-June 1986Kalita, Jones, and McCalla Summarizing Natural Language Database ResponsesIn addition to the relation frames, the system isprovided with a number of attribute frames, each ofwhich corresponds to an actual attribute in the data base.Attribute frames are critical in this approach to summaryresponse generation and thus are described in somedetail.
Attribute frames allow important attributes andmeaningful attribute values to be specified in advance.Together with the heuristics, they give our system manyof the abilities of McCoy's (1982) ENHANCE system toreflect a user's preconceived notions as to which patternsof data are meaningful and which are not.
A differentset of attribute frames can be designed for each type ofuser (presumably by the database manager), thus allow-ing user modelling of a sort to be implemented.Attribute frames guide the system in describing thedata on the basis of attributes whose values serve topartition an entity class (represented by a relation in thedata base) into two mutually exclusive subclasses, namelythe part of the entity class that satisfies the user's queryand the part that does not.
As pointed out by Lee andGerritsen (1978), some partitions of an entity class aremore meaningful than others.
Our system employs attri-bute frames to determine which attributes hould be usedfor describing a partition and which resulting classifica-tions are meaningful.
Figure 3 shows an attribute framefor the attribute NATIONALITY in the STUDENTSrelation.Name:- (NATIONALITY, STUDENTS)Nature-of-Attribute:- String of charactersDistinguishing-Values:-(((Canadian) (=) (# foreign))((U.K.U.S.A.
Australia ...)(member-of English-speaking-countries))((U.K. France ...)(member-of Europe))...)Potential-range:- Any member from a given list of countriesRound-off-to-be-done?
:- Not applicablePreference-Category:- 1Figure 3.
Attribute Frame for NATIONALITY.The NAME slot contains the internal name of the attri-bute, i.e.
the name under which it is stored in the database, and the name of the relation in which it occurs.
Ifthe attribute occurs in more than one relation, this fieldcontains an entry for each relation.
The general formatof the contents of this slot is(Attribute-Name-in-Relation- 1 Relation-l-Name)\[(Attribute-Name-in-Relation-2 Relation-2-Name) ... \]The expression within the "\[ \]" brackets is optional.
Thethree dots indicate that an arbitrary number of repe-titions of the immediately preceding expression isallowed.
In the case of the attribute frame of Figure 3,the NAME slot indicates that the frame represents infor-mation about the NATIONALITY attribute in theSTUDENTS relation.The second slot, NATURE-OF-ATTRIBUTES, containsinformation regarding the type of values contained in thefield - e.g., numeric, character, or boolean.
TheNATIONALITY attribute assumes character values.The DISTINGUISHING-VALUE slot provides informa-tion for distinguishing a subclass of an entity from othersubclasses.
This slot stores any distinguishing values theattribute may take.
These values are crucial in producingdescriptive responses to the user's queries, so some timewill be spent elaborating this idea.
The slot contains oneor more clauses, each of the following format:(((list-of-attribute-values-1 (applicable-operator-l-1 \[denomination-l- l \])\[ (applicable-operator- 1-2 \[denomination- 1-2\])\].*.
)If the actual values of the attribute satisfy"appl icable-operator- l - l"  with respect o the contents ofthe list "list-of-attribute-values-l", the actual valuesmay be termed as "denominat ion- l - l "  for producingresponses.
If the value of "denominat ion- l - l "  is null, nospecial names can be attached to the actual values of theattribute.Looking at the NATIONALITY attribute frame ofFigure 3, a number of distinguishing values have beenspecified.
Consider the clause ((Canadian) (=)  (#Computational Linguistics, Volume 12, Number 2, April-June 1986 111Kalita, Jones, and McCalla Summarizing Natural Language Database Responsesforeign)).
The value "Canadian" is a distinguishingvalue.
The term " (=)"  indicates that it is possible toidentify a class of students using the descriptiveexpression "NATIONALITY ---- Canadian".
IfNATIONALITY # "Canadian", the student may bereferred to as a "FOREIGN" student.
Similarly, if thevalue stored for a student under the attributeNATIONALITY is a member of the set (U.K .U.S .A.Australia ...), he/she may be designated as coming froman English-speaking country.
Finally, if the student hasvalue U.K., France, etc.
for NATIONALITY, he/she maybe considered to be from Europe.Distinguishing values correspond to key values thatnaturally divide the values in a domain into distinct class-es.
In this sense they are very similar to McCoy's (1982)"very specific axioms", although how they interact withheuristics to produce summary responses i different.
Toillustrate, for most users the value 18 of an AGE attributeis a distinguishing value dividing children from adults; 65is a distinguishing value separating adults from seniorcitizens.
Other values are not important and, therefore,should not be considered to be "distinguishing".
Similar-ly, suppose that a grade point average of six or greater isnecessary for a graduate student o register in four cours-es rather than the usual three courses.
The value "6",then, can be considered to be a distinguishing value forthe CUMULATIVE-GPA attribute.
This would allowquestions like Which students are taking four or morecourses?
to be answered with All students with GPA of sixor higher rather than with the response All students withGPA of 6.52 or higher which might be true of the currentdata.
The latter response is inappropriate because itviolates the maxim of quality in that it might mislead theuser into thinking that 6.52 is a significant value in theUniversity.
(See Q8-$8 in section 4.2.4 for the details asto how the proper summary response for this kind ofquestion is generated by our system.
)Returning to the NATIONALITY frame of Figure 3,the distinguishing values specified there would make itpossible for our system to answer the question Whichstudents are taking the "'Intensive English" course in theFall term?
with the response Most entering foreignstudents from non-English speaking countries rather thanthe misleading answer All students from China, Iran, andFrance, which might happen to be true currently.
Onceagain, the latter response violates the maxim of quality, acommon occurrence if summary responses are not care-fully tuned to reflect significant domain subdivisions.The DISTINGUISHING VALUE slot enables the data-base manager to specify classifications that he/she woulda priori like to appear meaningful to the user in descrip-tive responses.
Without this information the system mayfail to faithfully reflect the user's perceived notionsregarding appropriate partitioning of entity classes.
Bychanging the distinguishing values, the database managercan adapt the system to serve the needs of a variety ofusers.
Although it isn't our concern here, it would evenbe possible to remove all distinguishing values and hencehave the system produce no summary responses.
For anygiven class of users, the database manager will need tospecify all of these distinguishing values by hand, butonce they are specified, they can be used by many differ-ent heuristics in many different situations for as long asthe database structure remains the same, even if thetuples in the data base change.
Further examples of theuse of distinguishing values and how they interact withthe heuristics will be presented shortly.Let us return at last to the other slots in an attributeframe.
The POTENTIAL-RANGE slot provides anapproximate range in which the values of the attributemay lie.
The information in this slot is employed inconjunction with the range heuristics which are discussedin the next section.
In the NATIONALITY attributeframe of Figure 3, the potential range would be specifiedin terms of a long list (not shown) of possible countriesof origin.It is sometimes necessary to round off values ofnumeric attributes in order to produce answers withacceptable range specifications.
However, not all numericattributes can be rounded.
Whether ounding is allowablefor a particular attribute depends on several factorsincluding the type of values the attribute can assume (i.e.,integer, real, etc.)
and the potential range o~ its values aswell as other attribute characteristics.
The ROUNDING-TO-BE-DONE?
slot contains a boolean value indicatingwhether rounding is appropriate for the particular attri-bute under consideration.
It obviously is not for thecharacter values of the NATIONALITY attribute frame.Straightforward as it may seem, rounding allows oursystem to avoid violating Grice's maxims of manner,specifically by making answers less obscure.It is often more useful to provide descriptive answerson the basis of certain preferred attributes.
For example,in the STUDENTS relation, it is more "meaningful" toprovide answers on the basis of the attributeNATIONAL ITY  or  UG-MAJOR rather than STUDENT-ID-NO or AMOUNT-OF-FINANCIAL-AID.
However, it isimpossible to give a concrete weight regarding each attri-bute's preferability.
Therefore, we have classified theattributes into several groups; all attributes in a group areconsidered equally useful in producing meaningful qual-itative answers to queries.
The groups for the STUDENTSrelation are given in Figure 4.This classification means that it is preferable and moreuseful to produce descriptive responses using the attri-butes in group 1 than the attributes in group 2, and theattributes in 2 are preferable to 3, which are in turn pref-erable to 4.
This categorization is done by the databasemanager, based on his/her judgement as to the perspec-tives of the various classes of users.
In the slot PREFER-ENCE-CATEGORY, there is an entry corresponding toeach relation the attribute occurs in.
The information inthis slot ensures that the system chooses a descriptionbased on the most salient attribute for producing a112 Computational Linguistics, Volume 12, Number 2, April-June 1986Kalita, Jones, and McCalla Summarizing Natural Language Database Responses1: (NATIONALITY, CUMULATIVE-GPA, UG-MAJOR)2: (NO-OF-YEARS-COMPLETED, NATURE-OF-FINANCIAL-AID)3: (NO-OF-COURSES-THIS-TERM, NO-OF-COURSES-SO-FAR, TAKING-MAKEUP-COURSES?
)4: (STUDENT-ID-NO, NAME)Figure 4.
Preference Categories for the Relation STUDENTS.Name:- (CUMULATIVE-GPA STUDENTS)Nature-of-Attribute:- RealDistinguishing-Values:-(((0.00 2.00) (in-the-range-of poor))((2.00 4.00) (in-the-range-of satisfactory))((4.00 6.00) (in-the-range-of good))((6.00 7.00) (in-the-range-of excellent))((7.00 8.00) (in-the-range-of utstanding))((2.00) (>_) (_<))((6.00) (_>) (_<)))Potential range:- (0.00-8.00)Rounding-to-be-done?
:- YesPreference-Category:- 1Figure 5.
Attribute Frame for CUMULATIVE-GPA.Name:- (NO-IF-COURSES-THIS-TERM STUDENTS)Nature-of-Attribute:- IntegerDistinguishing-Values:-(((2) < light-load))((3 4) (member-of normal-load))((5) (> heavy-load)))Potential-Range:- (0-6)Rounding-to-be-done:- NoPreference-Category:-3Figure 6.
Attribute Frame for NO-OF-COURSES-THIS-TERM.response.
The preference category of the NATIONALITYattribute of Figure 3 is 1.Preferred attributes perform for our system the samefunction that McCoy's (1982) "important attributes list"does for the ENHANCE system.
We go further thanMcCoy in specifying several preference categories, ratherthan having one long list.
Although all attributes areassigned a preference category in this example, we can,like McCoy, leave out unimportant attributes altogetherif it is appropriate to do so.Let us now look at two more attribute frames.
Figure5 shows the frame for the attribute CUMULATIVE-GPAin the STUDENTS relation.
From this, it is clear thatCUMULATIVE-GPA takes real values in the range 0.00to 8.00.
If CUMULATIVE-GPA is in the range 2.00-4.00,it may be termed "poor.
"; Similarly, if it is in the range4.00 to 6.00, it is considered as "good", and so on.
Ifnone of the first five clauses in the DISTINGUISHINGVALUE slot is satisfied, the system attempts to use thelast two clauses.
The clause ((2.00) (>) (<))  says thatwe can use expressions such as "GPA > 2.00" or "GPA< 2.00", which cover a wider range than the first fiveclauses (e.g.
Which students are allowed to continue?
mightbe answered All students with GPA of  2 or more.
- seealso Q7-$7 in section 4.2.4).
It should be noted thatthese expressions may be used only if all values for theattribute GPA in the selected tuples satisfy the corre-sponding condition.
However, we cannot use expressionsof the form "GPA = 2.00".
We avoid using equafities forattributes that assume rational values.
The clause ((6.00)(>) (<))  conveys a similar idea.Figure 6 shows the frame for the attributeNO-OF-COURSES-THIS-TERM in the STUDENTSrelation.
From this figure, one can conclude that theattribute NO-OF-COURSES-THIS-TERM assumes integervalues in the range 0-6.
If this field has a value <2, itmay be termed "light-load".
If NO-OF-COURSES-THIS-TERM is either 3 or 4, it is "normal-load".
If the value ofthe attribute is > 5, it is "heavy load".
The values of thethresholds hown here are applicable in the case of grad-uate students.
These values would, obviously, be differ-ent if we considered a data base of undergraduatestudents.Currently, the attribute frames are static entities withtheir contents being defined a priori by the databasemanager to reflect the expectations of one set of users.Of course it is possible to have many different sets ofattribute frames for many different classes of users, but aComputational Linguistics, Volume 12, Number 2, April-June 1986 113Kalita, Jones, and McCalla Summarizing Natural Language Database Responsesbetter approach might be to allow the user to alter thecontents of these frames interactively to suit his/her ownidiosyncratic perceptions of the information in the database.
This would require us to figure out how to presentthe frames and the possible changes to the user, some-thing we haven't done as yet.
Even more difficult wouldbe the automatic reation (and later adjustment) of theattribute frames as the result of feedback from a partic-ular user or class of users.
This is dearly a majorresearch issue beyond the scope of our current concerns.4.2 THE HEURISTICSAS mentioned earlier, the heuristics employed in thesystem are procedural in nature.
In conjunction with theframes described above, they guide the system to searchfor various interesting patterns that distinguish the tuplesdescribing the query response from the rest of the tuplesin the data base.
The interesting patterns are similar toMcCoy's (1982) "distinguishing descriptive attributes",although we use them to produce summary responsesrather than to answer questions on database structure.Our use of a number of specially designed heuristicsusing frames to produce meaningful responses is alsodifferent from McCoy's approach, which uses threedifferent kinds of axioms to control a general searchprocedure.In order to help overcome possible problems of combi-natorial explosion (mentioned as a problem for McCoy'sENHANCE as well), the heuristics are linearly orderedaccording to the complexity of the required search proce-dures.
Hence, the system first searches for simplepatterns; the complexity of the response patterns growsas later heuristics are employed.
This ordering of theheuristics assumes that, if more than one descriptiveanswer can be obtained for a query, it is sensible toproduce the "simplest" one.
It would be easy to changethis if more sophisticated termination conditions for thesearch were desired.We assume that the natural anguage query has beenparsed and transformed to an internal form, and therequired data have been accessed.
The heuristics areapplicable only after the tuples that satisfy the user'squery are at hand.
Let Tqual be the set of tuples thatsatisfy the user's query, and Tunqual be the rest of thetuples in the relation relevant o the current query.4.2.1 THE EQUALITY HEURISTICThe equality heuristic is the most elementary of all theheuristics.
It corresponds to the usage of everyday wordssuch as all, everybody and everyone.
To start ourdiscussion, we present a formal specification of theheuristic.Determine if all data values appearing as the valueof a particular attribute A in Tqual are the same(say, a).
a must be a DISTINGUISHING VALUE inthe domain of values for attribute A.
If so, and if notuple in Tunqual has the value a for the attribute A,the general formulation of the response is:All tuples having the value a for attribute A.An example is the question-answer pair Q3-$3:Q3: Who are the Canadian students with GPA of 7.5 orhigher?$3: All students receiving NSERC scholarships.For applying this heuristic, the value a of the attributeA must have some "distinguishing" importance in thedomain.
In the above example, the attribute underconsideration is NATURE-OF-FINANCIAL-AID.
Thevalue NSERC is considered to be a DISTINGUISHINGVALUE in the domain of values that the attributeNATURE-OF-FINANCIAL-AID can take.The equality heuristic may also be applied to certainnumeric attributes.
Consider the following question andanswer pertaining to the graduate student data base.Q4: Which students have completed less than 5 courses?$4: All first year students.Here, the value of the attribute NO-OF-YEARS-COM-PLETED is 0 for all tuples that satisfy the query Q4.Also, among the unqualified tuples, there is none inwhich NO-OF-YEARS-COMPLETED ---- 0.
Finally, thevalue 0 distinguishes first year students from others,according to the attribute frame for NO-OF-YEARS-COMPLETED.Before leaving the equality heuristic, it should benoted that Q1-S1 (Which employees ngage in profit shar-ing?
- All vice-presidents.)
from section 2 could behandled by the equality heuristic (all employees engagingin profit sharing have the rank "vice-president"; nobodywho isn't engaging in profit sharing has this rank).4.2.2 THE INEQUALITY HEURISTICThe dual of the equality heuristic is the inequality heuris-tic; instead of looking for equalities, the system searchesfor inequalities.
Formally, the heuristic may be stated as,Determine if each data value for a particular attri-bute in Tqual is not equal to some particular value 7and all tuples in Tunqual have that value.
This value-f must be a DISTINGUISHING VALUE in thedomain of the values for attribute A.
The generalformulation of the response isAll tuples with value of attribute A ~ V.In order to produce the required response, thesystem must make certain that A ~ ~, is not true inany of the tuples which do not satisfy the user'squery.Let us consider an example.
In the student data base,the value "Computer Science" for the attribute UG-MA-JOR may be considered a distinguishing value.
Thisallows us to produce a response such asAll students with majors other than Computer Science.or, equivalently,All non-Computer Science majors.as in the following question and answer pair:Q5: Which students have taken more than six courses?114 Computational Linguistics, Volume 12, Number 2, April-June !
986Kalita, Jones, and McCalla Snmmarizing Natural Language Database Responses$5: All students with non-Computer Science under-graduate background.At the same time, we may avoid producing a responsesuch as (say)All students from departments other thanMechanical Engineering,if Mechanical Engineering is not of interest o us.
Thus, itis clear that the specification of distinguishing attributevalues is dependent on the user's conception of the dataas well as the application under consideration.
It shouldbe noted that phraseology subtleties uch as the differ-ences between All non-Computer Science majors, Allstudents with majors other than Computer Science, or Allstudents with non-Computer Science undergraduate back-ground are not reflected in different internal notations,but are the responsibility of the natural anguage gener-ation component which we haven't developed as yet.Such subtleties can be quite important, but are left forfuture research.
The whole issue of natural languagegeneration (and interpretation) is discussed further insection 4.3.4.2.3 MODIFICATION OF THE EQUALITY ANDINEQUALITY HEURISTICSIf the equality or inequality heuristics are not applicablein their pure form and there are a "few" ("few" dependson the relative number of tuples in Tqual and Tunqual andsome other factors) tuples in Tunqual that  do not satisfythe requirement of the heuristic, a modification of theresponse produced by the heuristic may be presented tothe user.
An example of such a modification is seen in thefollowing:Q6: Which students are receiving University scholar-ships?$6: All but one foreign student.
In addition, two Cana-dian students are also receiving University scholar-ships.4.2.4 RANGE HEURISTICSThese heuristics determine if the data values for an attri-bute in the tuples in Tqual are within a particular well-de-fined range.
There are two main types of range heuristics- one is concerned with maximum values and the otherwith minimum values.
The first of these, the maximumheuristic, may be formally stated as,Determine if all data values for attribute C in Tqualare below some maximum (say,/3), and there is notuple in Tunqual with values for C < /3.
This value/3must have some "distinguishing importance" in thedomain of the values of attribute C. In this case, thegeneral formulation of the response isAll tuples with the value of attribute C < /3.An illustrative xample isQ7: Which students have been advised to discontinuestudies at the University?$7: All students with a cumulative GPA of 2.0 or less.Here GPA = 2.0 is assumed to have some "distinguishingimportance" in the field of numbers representing GPAsof students (i.e., a value that may be "generally" used topartition the set of all possible GPAs into two classes:ones above 2.0, and ones equal to or lower than 2.0).The maximum heuristic is generally applicable in the caseof numeric attributes.Similarly, the minimum heuristic may be formally speci-fied as,Determine if all data values for attribute C in Tqualare above a certain minimum (say, d) and there areno tuples in Tunqual with value for C > d ?
dJ musthave some "distinguishing importance" in thedomain of the values of attribute C. The generalformulation of the response isAll tuples having the value in column C > &An illustrative xample isQ8: Which students are taking four or more courses?$8: All students with GPA of six or higher.When the tuples in Tqual satisfy both the maximumand the minimum heuristics for the same attribute A, weget a range specification.
Let a be the minimum valueand/3 be the maximum value of the attribute A in Tqual.Then the response can be modified asAll tuples with value of attribute rangingfrom a through/3.An example of an answer with range specification isQ9: Who are the students taking courses in secondyear?$9: All students who have completed between 3 and 5courses o far.There are several rules that should be followed whileproducing answers in terms of ranges.
Some of the rulesemployed in the current implementation are given below.These rules are fairly arbitrary, but rules like them will benecessary to prevent summary responses from themselvesviolating Grice's maxims, especially the maxims ofmanner and quality.?
If the upper limit of the actual range for an attribute isthe maximum potential value for the attribute, it isbetter to modify the answer as more than a where a isthe lower limit of the actual range.
For example, if foran attribute A the upper limit of the maximum poten-tial range is 1000, instead of providing a responsebetween 750 and 1000, it is advisable to say more than750 if Grice's maxim of manner (be brief) is to besatisfied.?
A similar action is taken at the other end of the scale.For example, if the lower limit of the maximum poten-tial range is 0, instead of responding as between 0 and200, we might answer as less than 200.?
The actual range specified in an answer should not bemore than 75% of the potential range of the attributevalues.
The particular choice of 75% is not sacrosanct,but the rule itself is important if we are to avoid theproblem of producing a response that essentially coversComputational Linguistics, Volume 12, Number 2, April--June 1986 115Kalita, Jones, and McCalla Summarizing Natural Language Database Responsesthe entire range of potential attribute values.
Such aresponse would mislead the user into thinking thatthere existed values outside of this range, which wouldviolate Grice's maxim of quality.?
The actual range specified in an answer should not beso small as to identify the actual tuples that constitutethe answer.
For example, we should not produce aresponse such as, All students with student-id-no between821661 and 821663.
In fact, such answers are notbrief when compared with the size of the set of tuplesthey qualify.
Moreover, they can mislead the user intothinking that there are many more tuples than thereactually are in the response set.These violations of the maxims of manner and qualityshould be avoided.While producing range specifications, it is often neces-sary to round off the upper and lower limits in case ofnumeric attributes.
For example, instead of sayingStudents with GPA between 6.
06 and 6.92 we may as wellsay Students with GPA between 6.
O0 and 7.
00.Rounding cannot be done for all numeric attributes.The applicability of the rounding operation depends onseveral factors including the nature of the values theattribute takes - e.g.
whether they are an integer orrational, and their potential range.?
In case of integer values, if the potential range is"small", rounding should be avoided.
For example, thefield NO-OF-YEARS-COMPLETED in a student database has a tight potential range (0-5 years).
In thiscase, if we have data values between 2 and 4 years, weshould not round off and say between 2 and 5 years.?
For integer values, if the potential range is wide,rounding off may be done (except for some casesdiscussed below).
For example, the expression Studentswith marks between 61 and 78 may be rounded toStudents with marks between 60 and 80.
However, forthis rounding to be correct, it is necessary to ensurethat there are no tuples in Tunqual with marks 60, 79 or80.?
There are certain attributes that are integral and do notallow approximation by their inherent nature.
Oneexample of such an attribute is STUDENT-ID-NO.
Astudent identification umber 82116 cannot be approx-imated as STUDENT-ID-NO = 82115 or STUDENT-ID-NO = 82120.
Similarly, we cannot round the attri-bute YEAR-OF-BIRTH in many circumstances.
Thisdecision whether rounding should be done or not isoften subjective.
Hence, this information must beprovided by the system builder and stored in the know-ledge base.?
If an attribute assumes non-integer (i.e., rational)values, the system may nearly always proceed withrounding.
It may be possible to find counter examplesto this assertion in some database domains.
However,for the purpose of the current implementation, weaccept his assumption to be true at all times.It should be noted that the heuristics explained aboveare applicable when a single attribute of the relevantrelation is considered.
If no such heuristic an be success-fully applied to the pertinent data, the system attempts touse one of the conjunction or disjunction heuristics joint-ly on two or more attributes.4.2.5 CONJUNCTION HEURISTICThe conjunction heuristic is the first of the complexheuristics involving more than one predicate.
Usually,each of these predicates involves a distinct attribute inthe data base, although it is possible that two or morepredicates relate to values of the same attribute.
Theseheuristics provide the system with the facility to usecommon connectives such as and and or.The conjunction heuristic is expressed succinctly in thefollowing paragraph.If all values of an attribute C in Tqual satisfy arelation R (in the mathematical sense), and thereare tuples in Tunqual that also satisfy the samerelation R, determine via the above heuristics ifthere is/are some "interesting" distinguishingcharacteristic(s) that the set Tqual satisfies, but theset of tuples in Tunqual satisfying the relation R donot.
Let us call the distinguishing characteristic(s)D. The general formulatioh of the response isAll tuples that satisfy the relation R and have thecharacteristics D.An example is,Q10: Which students are working as T.A.
or R.A.?S10: Students who have completed more than 1 year atthe University and who are not employed outsidethe University.All the tuples in Tqual resulting from Q 10 are found bythe system to have the values for the attributeNO-OF-YEARS-COMPLETED > 1.
However, the systemfinds that there are some tuples in Tunqual that also havevalues greater than 1 for the attribute NO-OF-YEARS-COMPLETED.
Let us call these tuples Tequa 1.Next the system attempts to find some characteristicsthat distinguish Tequa 1from Tqual.
It finds that in Tequa 1the field NATURE-OF-FINANCIAL-AID _- OUT-SIDE-JOB for all tuples whereas in Tqual , NATURE-OF-FINANCIAL-AID -- UNIVERSITY-SCHOLARSHIP for alltuples.
After finding this difference, the system is able toqualify the phrase Students who have completed more than1 year in the University by the phrase who are notemployed outside the University to produce the completeresponse.4.2.6 DISJUNCTION HEURISTICIf none of the above heuristics can be applied successful-ly, the system attempts to use the disjunction heuristic.
Asis evident from the nomenclature, this heuristic enablesthe system to formulate complex responses using theconnective OR.
Formally, this heuristic may be expressedas follows.116 Computational Linguistics, Volume 12, Number 2, April-June 1986Kalita, Jones, and McCalla Summarizing Natural Language Database ResponsesDivide the tuples in Tqual into a number of subsetsand try to apply one of the heuristics explainedearlier to each subset.
If successful, the resultingresponse consists of several predicates connectedby the relational operator OR (V).
It has the gener-alized formatTuples with (attribute I R I  a~ ) V (attribute  R 2 a2)lV  (attribute 3 R 3 a 3 ) ... !where Ri's are relations (in the mathematicalsense); ai's are distinguishing values of the corre-sponding attributei's.While formulating responses with the disjunctionheuristic, the number of such subsets hould be restrictedto two or three, if possible.
If too many subsets are iden-tified, it is difficult for the user to grasp all of them.
Ifmore than three subsets are presented, this approach isno more elegant han listing the data, which we are tryingto avoid.
The number of allowable subsets also dependson the number n of tuples in Tqual.
If n is "large", thenumber of subsets one would consider acceptable may besomewhat higher.It should be mentioned that in the generalizedexpression for the response, the various attributei's maybe the same attribute, or they may be different.
In certaincases, the same attribute may partition the relevant infor-mation into two or more groups in distinct ways.
Anexample showing three partitions based on the values ofthree different attributes i ,Q I 1: Which students are not receiving University schol-arships?S11: Students who are receiving NSERC scholarships orhave cumulative GPA less than 6.0 or havecompleted at least two years at the University.In attempting to answer Q11, the system finds that itis not possible to obtain an appropriate answer using theprevious heuristics.
It then checks to see if the tuples inTqual can be divided into two or three separately identifi-able subsets.
In this case, it successfully partitions Tqualinto three subsets - Tqual_l, Tqual_ 2 and Tqual_ 3 where?
Tqual_ 1 consists of all tuples in Tqual for whichNATURE-OF-FINANCIAL-AID = NSERC-SCHOLAR-SHIP,?
Tqual_ 2 is the subset of all tuples in Tqual with CUMU-LATIVE-GPA < 6.00, and?
Tqual_ 3 is the subset of tuples in Tqual for whichNO-OF-YEARS-COMPLETED > 2.While subdividing the total response set Tqual intosubsets, the system should ensure that no tuple in Tunqualsatisfies the various disjunctive predicates.4.2.7 FOREIGN-KEY HEURISTICIf nothing satisfactory can be found employing all of theabove heuristics, the system attempts to search other"related" relations to obtain a suitable response.
Arelated relation is one with which the relation underconsideration has some common or join attribute(s).Formally, the foreign-key heuristic may be stated as,Obtain the tuples in the target relation R t that satis-fy the user's query.
Let these tuples constitute anew relation R n. Determine if the target relation R tmay be joined directly or indirectly with some otherrelation(s) in the data base by consulting therelation frame for R t. Let these other relations bedesignated {Rj} where maximum(j) = number ofsuch "related" relations.
Take join of R n with theRj's one at a time (these joins may be direct or indi-rect and are performed via the attributes specifiedin the relation frame).
Project the resulting relationon the attributes of Rj and try to apply one of theprevious heuristics to this resultant relation.
Stoponly when there is successful application of aheuristic for some Rj, or each relation Rj has beentried unsuccessfully.As an example, consider the following question andthe response to it:Q12: Which students are taking CMPT 994?S12: All students who have completed at least one yearof studies.While attempting to answer Q 12, the system finds thatthe question pertains to the relation COURSE-REGIS-TRATION.
However, it fails to obtain any interestingdescriptive pattern about the tuples in Tqual by consider-ing this relation alone.
Hence, the system consults theLINKS slot in the relation frame for COURSE-REGISTRA-TION and finds that COURSE-REGISTRATION may bejoined with the relation STUDENT via the fieldsSTUDENT-ID-NO in STUDENTS and STUDENT-ID inCOURSE-REGISTRATION.
It takes a join of all the tuplesconstituting Tqual with the relation STUDENTS andprojects the resulting relation on the attributes of therelation STUDENTS.
Let us call these tuples Tnew_qual.Next, it attempts to discover the existence of somepattern in the Tnew_qual tuples.
Ultimately, it succeeds inproducing the response given in S12 by employing aminimum range heuristic.4.3 THE INTERNAL FORM OF A QUERYThe internal form of a query is(Command Database- Ident i f i ca t ion  P red icate -Form)?
Command is some operation to be performed, at themoment limited to the command OBTAIN, meaningobtain information from the data base.?
Database- Ident i f i ca t ion  names a particular data base onwhich the command is to be carried out; in the currentimplementation, GRAD-STUDENT-RECORDS.?
Predicate-Form breaks down into- (Predicate (Relation-Name Attribute-Name)At t r ibute -Va lue)(e.g., (GREATER-OR-EQUAL (STUDENTS CUMU-LATIVE-GPA) 6) )or- (Con junct ion  P red icate -Form I P red icate -Form 2 ...Pred icate -Form n)(e.g., (OR-ANY-OFComputational Linguistics, Volume 12, Number 2, April-June 1986 117Kalita, Jones, and McCalla Summarizing Natural Language Database Responses(EQUAL (STUDENTSNATURE-OF-FINANCIAL-AID) NSERC)(LESS-THAN (STUDENTS CUMULATIVE-GPA) 6)(GREATER-OR-EQUAL (STUDENTSNO-OF-YEARS-COMPLETED) 2) ) )Common predicates such as EQUAL, NOT-EQUAL,LESS-THAN, and GREATER-OR-EQUAL, and conjunc-tions such as AND-ALL-OF, AND-ANY-OF, etc.
can behandled.
The internal form of the system output isdefined in a similar manner except here is no command.The following examples of queries and answers (takenfrom section 4.2) represented in this internal form shouldclarify this notation.
First we look at a relatively simplecase:Q4: Which students have completed less than 5 courses?
(OBTAIN GRAD-STUDENT-RECORDS(LESS-THAN (STUDENTS NO-OF-COURSES-COM-PLETED) 5))$4: All first year students.
(GRAD-STUDENT-RECORDS(EQUAL (STUDENTS NO-OF-YEARS-COMPLET-ED) 0))Next we take a more complicated question-answer pair:Q10: Which students are working as T.A.
or R.A.?
(OBTAIN GRAD-STUDENT-RECORDS(AND-ANY-OF(EQUAL (STUDENTS NATURE-OF-FINAN-CIAL-AID) TA)(EQUAL (STUDENTS NATURE-OF-FINAN-CDd~-AID) ILA)))S10: Students who have completed more than one yearat the University and who are not employed outsidethe University.
(GRAD-STUDENT-RECORDS(AND-ALL-OF(GREATER-THAN (STUDENTS NO-OF-YEARS-COMPLETED) 1)(NOT-EQUAL (STUDENTS NATURE-OF-FINAN-CIAL-AID) OUTSIDE-JOB)))We do not want to downplay the difficulties of inter-preting natural language into an internal form such asthis, nor do we want to trivialize the difficulty of produc-ing surface language responses from the internal form.However, parsing and natural anguage generation werenot the central concerns of this research; we insteadwanted to concentrate on the pragmatic issues underlyingsummary response generation i  a natural anguage data-base interface.
There is a plethora of work, of course,describing various approaches to parsing we could drawon should we want to extend our system.
Possibly themost appropriate parsing strategy for this domain wouldbe a keyword approach (e.g., Small 1980) where theinput query is scanned for words indicative of attributenames or predicates relevant o the particular data basebeing queried.
This approach might work well herebecause the target internal form is phrased only in termsof these domain specific attributes and predicates.Similarly, generation could be in terms of catch phras-es triggered by the presence of predicates or attributes inthe internal form of the output.
There is relatively lesswork on natural anguage generation on which to base amore sophisticated natural language generation compo-nent, but work such as McDonald's (1983) MUMBLEsystem 1night be usefully adapted to the determination ofappropriate surface phraseology of summary responses.The approach taken in McKeown's (1982) TEXT systemis also appealing in this regard since its area of applica-tion is data bases (albeit describing database structurerather than database contents).
To adapt methods fromeither of these systems (or in fact from most otherapproaches to generation) would require a considerableenhancement of the knowledge base of our system,something that is currently beyond the scope of theresearch.5 IMPLEMENATION CONSIDERATIONSA system incorporating the details discussed above hasbeen implemented in Franz Lisp on a VAX-11/750running under UNIX 1 and has been tested on a data baseof student records.
The system was tested on a variety ofquestions.
These included all of the examples Q3-Q12where the system produced internal versions of thesummary responses $3-S12.
Further details of theseexamples (and others) are contained in Kalita (1984).The data base is currently very small (containing therecords of only 25 students or so), so the averageresponse time of the system was in the order of seconds,even for the most time consuming heuristics.
A moremeaningful analysis is a complexity analysis of theresponse time in terms of the number of tuples in thedata base.
With this in mind, in this section we examineimplementation aspects of the system, including acomplexity analysis of the various heuristics.The system has two main components - one for datamanipulation, the other to produce the summaryresponses.
The data manipulation component enablesthe system builder to introduce new relations, new attri-butes, and new tuples into the relations.
As new tuplesare entered, various checks regarding the nature of theattribute values and the number of attributes areperformed.
The data manipulation component alsoaccesses the data that satisfy a query and performs tand-ard relational functions uch as selection, projection, andlossless join.
This component does not possess thesophistication of a standard atabase package.
However,it is sufficient for the purposes of this research since theinternal form of a query can be directly handled by thedata manipulation routines.The other main component of the system producessummary responses to a user's queries.
First the user'sinput is read and checked for syntactic accuracy (i.e.,that it follows the proper internal form, that it containsonly references to valid names of relations and attributes,etc.).
The query is then passed to the data manipulation118 Computational Linguistics, Volume 12, Number 2, April-June 1986Kalita, Jones, and McCalla Summarizing Natural Language Database Responsescomponent for data access.
Returned are the two sets oftuples: Tqual, those tuples satisfying the user's query, andTunqual , those that do not.
The summary responsecomponent hen regains control and invokes routinescorresponding to the individual heuristics.
The invoca-tion of the heuristics is done successively in predeter-mined order until one of them is successful.
There issome dependence among the heuristic routines sincecertain information, once obtained, can be shared.
Theheuristics receive assistance from the frames during theprocess of obtaining summary responses.
These framesare stored as property lists associated with the relationand attribute names.The heuristics attempt to determine a descriptiveresponse by searching through Tqual and Tunqual.
In thecurrent implementation, the tuples are examined serially.Once a tuple has been accessed, various attribute valuesin it are tested in parallel to determine if they satisfy therequirement of a heuristic.
Such tuple-serial attribute-parallel inspection of attribute values may increase proc-essing time in some cases.
However, on average, the timerequired for obtaining a response is considerably reducedsince the tuples need not be accessed repeatedly for eachcandidate attribute under consideration.While applying the equality heuristic for each attributein the target relation, the system keeps a frequency countof different values that occur in the various attributes inTqual.
If at any time during the equality processing ofTqual the system finds more than three different datavalues for a particular attribute, it ignores the attributeduring subsequent processing for the equality heuristic.
Iffor a particular attribute, all values in Tqual are the sameand this particular value is (a) a distinguishing value and(b) does not occur in any of the tuples in Tunqual, thesystem produces a response using the equality heuristic.If there are up to three different values that occur for anattribute in Tqual and do not occur in Tunqual, the systemcompares the dominant frequency with the otherfrequencies.
In the current implementation, the systemproduces an answer using a modification of the equalityheuristic if the other frequencies are less than 10% ofthe dominant frequency.For the application of the inequality heuristic, theroles played by Tqual and Tunqual are interchanged.Otherwise, the processing is essentially the same.For the range heuristics, the maximum and minimumvalues for each attribute in Tqual are found in tuple-serialattribute-parallel mode.
If both heuristics are successfulfor a particular attribute, a response in terms of rangespecification is generated.
The rules discussed in section4.2.4 are applied for obtaining responses using theheuristics.The disjunction heuristic is attempted when it is possi-ble to divide the tuples in Zqual into two or threesubgroups based on equality, inequality, or range heuris-tics.
While applying the earlier heuristics, the system hasretained information that may help in the application ofthe disjunction heuristic.
However, application of thedisjunction heuristic may necessitate a substantialamount of repetitive grouping and regrouping of tuplesand may be expensive in its time requirements.
Even so,success is not guaranteed.The conjunction heuristic is successful when there aretuples in Tunqual that satisfy the predicate(s) satisfied bythe tuples in Tqual.
Let the tuples in Tunqual that satisfyf the predicate(s) be called T unqual.
To obtain an answer,the equality, inequality, and range heuristics aret employed using Tqual and T unqual (instead of the usualTqual and Tunqual) to find some distinguishing character-istics between the two sets.
This distinguishingdescription is then used as a qualifier to obtain the finalcomplete response.The foreign-key heuristic involves a join and a projec-tion, and finally the application of all previous heuristics.If the target relation has common join attributes withseveral other relations, joins may have to be performedwith each such relation, and the process repeated againfor each resultant relation.If one of the heuristics ucceeds, a response is gener-ated in the format described above.
If none of theheuristics succeeds, the extensional response Tqual isproduced.
The user can also ask for Tqual to be producedif he or she is unsatisfied with just the summary response.In order to determine the implications of our approachto summary response generation, it is important o lookat the computational complexity of the algorithms.
Theapplication of the equality, inequality, and the rangeheuristics takes time of the order of O(N a N t) where N a isthe number of attributes in the target relation, and N t isthe number of tuples in the target relation (i.e., the sumof the number of tuples in Tqual and Tunqual for the targetrelation).
Performance is improved if the value compar-isons are done in parallel for all attributes in a tuple.
Thisperformance improvement results since the tuples neednot be accessed for each attribute separately.
However,this does not reduce the basic complexity involved in thedetermination.The complexity of applying the disjunction heuristic isdependent on the nature of data distribution in Tqual.Successful application may involve a large number ofpermutations of the tuples for repetitive grouping andregrouping.
This is the heuristic most likely to lead to acombinatorial explosion.The conjunction heuristic takes time of the order O(N aN t + N a Nt l )  where Ntl is the sum of the number oftuples in Tqual and the number of tuples in Tunqual thatsatisfy some mathematical relation(s) satisfied by the!tuples in Tunqual (i.e., T unqual defined earlier).
Thiscomplexity can be arrived at only if we assume that thedisjunction heuristic is not applied to determine the!distinguishing characteristics between Tqual and T unqual.Otherwise, the time required will be O(N a N t + N a Nt l )+ Odh (Tqual, 74unqual) where Odh is the time requirementfor the application of the disjunction heuristic.Computational Linguistics, Volume 12, Number 2, April-June 1986 119Kalita, Jones, and McCalla Summarizing Natural Language Database ResponsesThe foreign-key heuristic requires additional time forperforming joins and projections.
The number of joinsthat may be performed is a function of the number ofrelations with which the target relation has common join(direct or indirect) attributes.
Indirect joins involve oneor more additional simple joins.
The complexity of thecomputations necessary after completion of the join andsubsequent projection is the same as discussed in thepreceding paragraphs.The implications of these complexity bounds for largedata bases cannot be ignored.
Processing time for thesimple equality, inequality, and range heuristics is linearin the number of tuples in the data base.
This is about asgood as can be expected, although it still may be quiteslow if real time response is needed.
Processing times forthe disjunction, conjunction, and foreign-key heuristicscan be substantially worse as juggling, rejuggling, andjoining take place.
If each query must be independentlyprocessed, we don't see much hope of improving on thesetimes.
However, it may be possible to add a "memory"tothe system's knowledge base to keep track of previousresponses and hence avoid re-accessing the data base foreach query.
The nature of such a memory and some ofthe implications are discussed in the next section.6 CONCLUSIONS AND FUTURE RESEARCHGeneration of descriptive summary responses has impor-tant implications if interactions with a data base are tohave the properties and constraints normally associatedwith human dialogue.
Without these constraints, inter-actions with a DBMS can simply be viewed as dull factualexchanges between a human being and a machine.
Nodoubt, the necessary data is obtained by the user, butthese interactions lack the "intelligence" and elegance weascribe to human behaviour.Furthermore, such interactions may fail to present heinformation content of the data.
The data produced is thesuperficial representation f the "actual contents" or theinformation that underlies it.
In general, most commercialDBMSs make little attempt o extract this deep-seatedabstract information.
Advances in data modelling havehelped to bridge this gap (see, for example, Chen 1976,Smith and Smith 1977, Roussopoulos 1977, Mylopouloset al 1980).
However, the data models are tools meantprincipally for the database administrator.
They providelittle guidance to the user in interpreting the data.
Thetask of interpretation and obtaining a "feeling" for theinformation content of the data still rests mostly with theuser.
A system such as the one discussed here transferssome of the responsibility of data interpretation from theuser to the computer system.
It undertakes a guidedsearch of the data that satisfy the user's query andattempts to extract a brief qualitative xpression describ-ing the information therein.Currently, while producing summary responses, thesystem stops as soon as any heuristic is successful inobtaining a pattern.
Such responses are composed of oneor more predicate forms, as explained in section 4.3.However, the first such response may not be the "best"possible one.
In order to obtain the best answer, it isadvisable to continue the process of identifying responsesusing the remaining heuristics.
If, ultimately, severalanswers are obtained, a decision regarding which one topresent o the user must be made.
For this purpose, eachanswer could be assigned a weight and those withweights below a particular threshold would not bepresented.
Although the problem of assigning weights isencountered in several other applications of artificialintelligence, the issues involved are complicated; we donot delve into this topic here.There are a number of issues that arise concerning theinteraction of the data base and the knowledge base.The current system depends on the discovery of relation-ships occurring in the data base and makes use of theknowledge base only to find distinguishing values, possi-ble joins, and appropriate heuristics.
Since the heuristicsare universal in nature, this implies that the techniquesemployed here can be transported to another domain (orused by another set of users) without undue modifica-tion.
The only changes that have to be incorporated arenew relation and attribute frames for each new databasedomain (or each new type of user).Unfortunately, the portability is achieved by goingdirectly to the data base, and is bought at the expense ofusing reasonably inefficient sequential searches (seesection 5).
This raises the question of whether it mightbe possible to avoid database access altogether.
Thecurrent knowledge base is too impoverished to be useddirectly, but we could consider various enhancements.One possibility might be to generalize the idea of distin-guishing values to provide rules describing the criteria formembership in a given class.
For example, one suchcriterion could be that a passing mark is a grade point of1 so that any question such as Who failed CMPT 110?could be answered with All students with a mark of  lessthan 1 without needing to consult the data base at all(assuming the user didn't know this so that the maxim ofquality isn't violated).
This kind of criterion would besimple to represent, but is obviously not a completerepresentation f what it means to fail a course since itignores students who have failed by withdrawing too late,by not writing the final exam, by murdering the profes-sor, etc.
In general, to represent all the various subtletiesof such criteria is a substantial problem in knowledgerepresentation (consider, for example, having to repre-sent the qualifications needed for a scholarship or all therequirements o get an undergraduate d gree).
Althoughit would be nice to be able to represent such generalrules, it should be pointed out that consulting the database as in our current approach circumvents the need toconsider these representation issues.
The heuristics canpick out relevant commonalities among students whofailed a course, or won a scholarship, or received an120 Computational Linguistics, Volume 12, Number 2, April-June 1986Kalita, Jones, and McCalla Summarizing Natural Language Database Responsesundergraduate d gree, without the need for sophisticatedknowledge representation techniques.Even if the representation issues were to be solved,however, database access would still be necessary.
Aprime reason is that any general rules will sometimeshave exceptions that can only be discovered by looking atthe data.
Our heuristics currently allow some suchexceptions to be found, although they are by no means acomplete solution to the problem of exceptions.
Themodified equality and inequality heuristics (section 4.2.3)explicitly allow for occasional deviations (e.g., seeQ6-$6), and the conjunction and disjunction heuristicscan find characteristics common to entire exceptionclasses (e.g., if one entire section of a class were givenexemption from the final examination, the disjunctionheuristic ould answer the question Who completed CMPT378?
with the response All students who wrote the finalexamination or were in section 02.).
Nevertheless, thereare still open questions involving exceptions (such asbeing less ad hoe in defining exactly what a few means inthe modified equality and inequality heuristics), whichcould be worked on as a further direction of thisresearch.There is still a third reason (besides avoiding know-ledge representation problems and recognizing excep-tions) that the data base should be consulted: to discoverpatterns in the data that can't be explicitly predicted.Consider the following question answer pair:Q12: Which athletes failed HIST 101?S12: The football players.Response S12 summarizes information that can't berepresented in a rule in the knowledge base (i.e., it isn'tnecessary that only the football players failed this course)and can only be found by looking through the data.Again, our heuristics would be able to find this pattern inthe data, assuming that football player is a distinguishingvalue (which it might be to the athletic director, forexample).
In general there will be many such situationswhere the system knows that something interesting (i.e.,something for which there is a distinguishing value) couldoccur in the data, but the exact context in which it actu-ally occurs can't be foreseen.Thus, it will normally be necessary to consult the database.
Nevertheless, an interesting research direction willcertainly be to enhance the knowledge base as much aspossible to provide rules that can at least direct thesearch through the data with more subtlety than distin-guishing values are able to.Another possible knowledge-base xtension, whichwould avoid the problem of having rules disembodiedfrom the data they reflect and which might be an answerto some of the efficiency problems of database consulta-tion mentioned above, is to create a "memory" thatwould store patterns found in previous database searches.In other words, the memory would store the scalar impli-catures that the system finds to be valid in the data base.This is similar in intent to Lebowitz's (1983)RESEARCHER system, which attempts to generalizeconcepts read from patent abstracts into a generaliza-tion-based memory.
We would not be as concerned withdescribing how given instances differ from their gener-alizations, but would have to be concerned with how thegeneralizations change as the database contents aremodified.The memory would obviate the need to search thedata base for repeated queries.
For example, let a ques-tion Q that has been answered by the system have ananswer A stored in an internal form.
If the question Q isposed by the user again, the answer A can be returned.Similarly, if the question posed matches A, Q can beproduced as the answer.
For example, let us consider theexample Q7-$7 from section 4.2.4.
If the question posedis Q7-1, which is the interrogative form of $7, the answerprovided may be S7-1, the assertive form of Q7.Q7-1:Who are the students with cumulative GPA of 2.0or less?$7-1: All students who have been advised to discontinuestudies at the University.In some cases, it may not be possible to phrase ameaningful English question corresponding to the inter-rogative form of the response to a query.
This is especial-ly true in situations where complex responses areproduced (e.g., in questions Q6, Q10, and Q11 in section4).
However, it may be possible to break up a complexquery into two or more sub-queries.
If answers to thesesub-queries are already resident in the memory, thesystem may be able to compose the final response fromthe existing answers to these sub-queries.
Clearly, theamount of search required to answer the query may beconsiderably reduced if parts of the answer can beretrieved from the memory, assuming the memory itself isorganized for efficient retrieval.The memory would usually be empty at system initial-ization; it would grow in size as the system interactedwith the user and learned new facts about the data.
Itwould have to be modified as the data in the data basechanged.
This would mean that the memory wouldsomehow have to keep track of how the stored queriesrelated to the data that produced them so as to be able todetermine which queries would be affected by a givenchange in the data.
It would also require some means ofdetermining how new data affected queries summarizingexisting data.
This is the reverse process to thatsuggested by the Mays (1982) monitoring scheme, wheremonitors are posted to look for future changes in the database.
The memory part of our system would have toreason backwards from the current situation to infer howchanges affect previously abstracted summaries.
Wheth-er Mays's temporal logic can be adapted to be useful inbackwards reasoning is an interesting question.
In anyevent, the amount of processing time required to keepthe memory up to date is unclear.
However, it wouldseem to be a computationally intense activity, whichsuggests there would be a trade-off between the timeComputational Linguistics, Volume 12, Number 2, April-June 1986 121Kalita, Jones, and McCalla Snmmarlzlng Natural Language Database Responsesspent maintaining the memory, on the one hand, and thetime saved in database access by having the memory, onthe other hand.As mentioned earlier, the database manager canimplement different user models by creating differentsets of attribute and relation frames for each type of user.This capability is similar to the idea of database views.For each type of user, the system would contain informa-tion about stereotypical knowledge possessed by thatclass of user.
Different classes of users have differentideas about what values are "distinguishing" (e.g., anaverage of 4 might be fairly insignificant o an under-graduate accessing a student record data base, but to agraduate student it represents the dividing line betweenbeing allowed to graduate or not).
TheCUMULATIVE-GPA attribute frame in the graduatestudent user model would therefore be different from theCUMULATIVE-GPA frame in the undergraduate studentmodel.
For security purposes, it might be useful toprevent certain joins from taking place (e.g., it wouldn'tbe appropriate for students to access their professors'marks lists by joining the relation COURSE-REGISTRATIONS to the relation MARKS-LISTS (say) onthe attribute COURSE-NO).
The student user modelscould reflect this by appropriate restrictions on therelation frames.
It is even possible to prevent summaryresponses altogether for certain attributes by having nodistinguishing values in the corresponding attributeframes, or by providing them with a "nil" preferencecategory.
Such security and privacy considerations canbe important for certain classes of users.
All of this iscurrently possible, although not something we haveactively experimented with.
An extension to this capabili-ty might make it possible for the user to customize thekinds of summary responses he/she receives, rather thanrelying on the database manager to provide him/her withthe appropriate user model.
Whether to have the user fillin a template corresponding to each attribute frame, orwhether to use natural language to specify the informa-tion in the various attribute frames is an open researchquestion.In the present system we have assumed that thesystem is provided with (and produces) a formal repre-sentation of the user's query.
Ideally, the system's inter-face should include a natural language parser andgenerator, but as discussed earlier (section 4.3) this issuewas not tackled here.
There are still many open ques-tions having to do with surface language, apart fromissues of interpretation and generation per se.
One suchquestion of particular interest o this research is categor-izing types of surface language that demand a summaryresponse, as opposed to types that demand an exten-sional response or types where either an extensional or asummary response are appropriate.
For example, Whatare the characteristics of  the students who failed CMPT110?
requires a summary response; Give me the names ofthe students who failed CMPT 110 demands an exten-sional response; and Who failed CMPT 110?
allows foreither kind of response.
However, the problem is subtle.For example, the request Give me the names of  thestudents who registered on Wednesday could be answeredwith an extensional response (which would normally bewhat is expected) or conceivably the summary responseThose with surnames beginning with the letters N throughR.The key to recognizing what kind of response is need-ed is to recognize the user's intent (or at least his/herknowledge) in asking the question; that is, to consult auser model to see which kind of answer is appropriate.Thus, if it is known that the user is an administrator incharge of registration and that he/she is formulatingregistration policies, the second answer above might bereasonable.
If the user is a clerk in charge of sending outregistration forms, the first might be correct.
Finally, ifthe user already knows all the names, then perhaps thesummary response is desired (assuming the user has beenunable to discern the pattern on his/her own).The kind of user model needed to handle this is moresophisticated than the simple user model currently used.To see this, let's look at the ambiguous query Who failedCMPT 1107 once again.
This question can admit either asummary response or an extensional response.
If thesystem knows the user knows all the students who failedCMPT 110, then some description of their characteristics(e.g., students who were absent from the final examination)is probably more appropriate.
On the other hand, if thesystem knows the user knows that students who miss thefinal examination fail the course, then a summaryresponse describing this fact would be inappropriate, anda list of the students' names is likely what is desired.This won't be foolproof, of course.
The user could beasking for a re-iteration of something he/she alreadyknows (for confirmation purposes, perhaps) or could beasking for another summary pattern besides the one theuser already knows.
Another subtlety that arises is thedistinction between implicit and explicit knowledge - theuser may know something but not realize it, or may notbe able to make the inferences needed to deduce some-thing that he/she has the knowledge to deduce.
Forexample, the user may know the names of all the studentswho failed CMPT 110 but not realize these are the onlystudents; or he/she may know everybody who didn'twrite the final examination and also the rule that if thefinal examination is missed a student fails the course, butthe user may not have applied the rule in this case.Finally, for some extensional responses, it still might beappropriate to repeat a general rule that the user knows,just to re-inforce in his/her mind the applicability of therule in this situation.
Thus, if the user has asked whichmanagers earn more than $40K (see Q2), then even ifthe user knows that in general all managers earn over$40k, it might be useful to re-iterate this fact afterproducing the list of managers' names since it would bedifficult for the user to check that all the names had122 Computational Linguistics, Volume 12, Number 2, April-June 1986Kalita, Jones, and McCalla Snrnmarizing Natural Language Database Responsesappeared without exceptions (especially if the list werelong).These kinds of complications make the task of devis-ing the user model quite tricky.
It must keep track ofsubtle degrees of knowledge, incomplete knowledge,changing knowledge, laziness in applying knowledge,etc., and it must be possible to recognize user's intentionsin the use of this knowledge.
There is a growing body ofresearch involved in representing the kinds of knowledgeneeded here, and in dealing with language as intentionalbehaviour.
The work by the University of Torontogroup, in particular, pioneered this approach (see Cohen1978, Allen 1979, and Allen and Perrault 1980, forexample) and could form a starting point for researchinto user model extensions.
The first problem would beto represent what the user knows and doesn't know(since many of the decisions about what to present tohim/her depend on this).
Subsequent steps could getinto recognizing intentions and other sophisticateddiscourse phenomena.There are other, more subtle, problems that arise withthis approach to summary response generation.
Onesuch problem involves avoiding the production ofresponses that "overlap" (i.e., are implicit in) the ques-tion.
Such overlapping definitions themselves violateGrice's maxims of relation and quantity.
For example,Q14: Which students had a GPA of greater than 5?S14: All students with a GPA of greater than 5.orQ15: Which graduate students are both teaching andresearch assistants?S15: All graduate students receiving money for teachingand being paid by a professor to do research.Simple cases like Q14-S14 can be prevented by explicitlyprohibiting responses that have the same predicates asthe question.
This would apply even if only one conjunctor disjunct is the same in both question and response.Q15-S15 presents a more complex problem since theanswer, although directly implied in the user's mind, mayin fact involve attributes different from the question(e.g., the data base may have attributes uch as TEACH-ING-ASSISTANT?, RESEARCH-ASSISTANT?, MONEY-RECEIVED-FROM-TEACHING, MONEY-RECEIVED-FOR-RESEARCH).
In cases such as this, where the database is in some sense redundant, extra information wouldhave to be added to the attribute frames to indicate over-lapping attributes.
This information could then be used toavoid producing responses that overlap the query.
Eventhis extension would not provide a total solution to theproblem, since the user may be able to make many subtleconnections among the data in the data base that willlead to an overlapping response from his/her point ofview.
Additional user modelling techniques to thosediscussed above will have to be developed to predictthese connections and thus prevent the production of aresponse implicit in the query.Another subtle problem that arises is the problem of"accidental summaries", i.e., summaries that are true ofthe current data base but not in general.
Our use ofdistinguishing values is an attempt o reduce the chancesof this occurring, but it can still happen.
For example, itmay be true in the simple student data base that, current-ly, all people who are from Canada also have NSERCgrants.
"NSERC" may also be a distinguishing value forthe NATURE-OF-FINANCIAL-AID attribute (e.g., toanswer question Q3).
However, to respond to the ques-tion Who are the students from Canada?
with the answerAll students with NSERC grants might mislead the userinto thinking that there was some necessary connectionbetween being from Canada and having an NSERC grant,rather than an accidental one.
Accidental summariesviolate Grice's maxim of quality in that they imply some-thing is true that is not.
Just avoiding the production ofsummary responses in such cases will not solve the prob-lem, since it still may be very useful to produce a summa-ry response.
Thus, it may be accidental that all managersearn over $40k, but answer $2-1 (Abel Baker, Charles,Doug.)
to question Q2 (.Which department managers earnover $40k per year?)
still (normally) violates Grice'smaxims, and the summary response $2-2 (All of them.)
isstill (normally) more appropriate.
The only long termsolution to this problem is to expand the knowledge basewith further information about necessary relationships inthe world being modelled (e.g., for the student data base,the knowledge base could be stocked with rules andregulations about academic programmes, tudent eligibil-ity for various prizes, etc.)
These necessary relationshipscould then be used to clarify the summaries provided tothe user as to whether accidental or necessary relation-ships were being reported.In conclusion, we would like to say that, despite its useover the last twenty years, the database nvironment stillforms a nice microworld to study a variety of naturallanguage issues.
Hopefully, some of these have been illu-minated by this research.7 ACKNOWLEDGEMENTSThis paper is based on graduate research done by JugalKalita at the University of Saskatchewan.
We would liketo thank the other members of his M.Sc.
thesis commit-tee, Robin Cohen and Paul Sorenson, for their construc-tive comments.
Thanks also to the referees for theiruseful and constructive comments - that the final versionof this paper is considerably better than the original is, inno small measure, due to them.
We would also like toacknowledge the financial support of the University ofSaskatchewan and the Natural Sciences and EngineeringResearch Council of Canada.R~EFERENCESAllen, J.F.
1979 A Plan-Based Approach to Speech Act Recognition.TR-131, Department of Computer Science, University of Toronto,Toronto, Ontario, Canada.Computational Linguistics, Volume 12, Number 2, April-June 1986 123Kalita, Jones, and McCalla Summarizing Natural Language Database ResponsesAllen, J.F.
and Perrault, C.R.
1980 Analyzing Intention in Dialogues.Artificial Intelligence 15(3): 143-178.Codd, E.F.; Arnold, R.S.
; Cadious, J.M.
; Chang, C.L.
; and Roussopou-los, N. 1978 RENDEZVOUS Version 2: An Experimental EnglishLanguage Query Formulation System for Casual Users of RelationalDatabases.
Research Report No.
RJ2144 (29407), IBM ResearchLaboratory, San Jose, California.Chen, P.P.S.
1976 The Entity-Relationship Model - Towards aUnified View of Data.
ACM Transactions on Database Systems 1 (2):9-36.Cohen, P.R.
1978 Planning Speech Acts.
TR-118, Department ofComputer Science, University of Toronto, Toronto, Ontario, Cana-da.Davidson, J.
1982 Natural Language Access to Database: UserModelling and Focus.
Proceedings of Fourth National Conference ofthe Canadian Society for Computational Studies of Intelligence, Saska-toon, Saskatchewan, Canada: 204-212.Grice, H.P.
1975 Logic and Conversation.
In Cole, P. and Morgan,J.L., Eds., Syntax and Semantics: Speech Acts, Vol.
3.
AcademicPress, New York: 41-58.Grosz, B.J.
1977 The Representation and the Use of Focus in aSystem for Understanding Dialogues.
Proceedings of the Fifth Inter-national Joint Conference on Artificial Intelligence.
Cambridge,Massachusetts: 67-76.Harris, L. 1977 User Oriented Database Query with the ROBOTNatural Language Query System.
International Journal of Man-Ma-chine Studies 9: 697-713.Janas, J.M.
1979 How to Not Say "NIL" - Improving Answers toFailing Queries in Data Base Systems.
Proceedings of the Sixth Inter-national Joint Conference on Artificial Intelligence.
Tokyo, Japan:429-434.Joshi, A.K.
; Kaplan, S.J.
; and Lee, R.M.
1977 ApproximateResponses from a Data Base Query System: An Application ofInferencing in Natural Language.
Proceedings of the Fifth Interna-tional Joint Conference on Artificial Intelligence.
Cambridge, Massa-chnsetts: 211-212.Kalita, J.K. 1984 Generating Summary Responses to NaturalLanguage Database Queries.
Technical Report 84-9, Department ofComputational Science, University of Saskatchewan, Saskatoon,Canada.Kalita, J.K.; Colbourn (Jones), M.J.; and McCalla, G.I.
1984 AResponse to the Need for Summary Responses.
Proceedings ofCOL1NG-84: lOth International Conference on Computational Linguis-tics.
Stanford, California: 432-436.Lebowitz, M. 1983 RESEARCHER: An Overview.
Proceedings of theAmerican Association for Artificial Intelligence Conference (AAAI-83).Washington, D.C.: 232-235.Kaplan, S.J.
1982 Cooperative Responses from a Portable NaturalLanguage Query System.
Artificial Intelligence 19(2): 165-187.Lee, R.M.
and Gerritsen, R. 1978 Extended Semantics for Generaliza-tion Hierarchies.
Proceedings of the 1978 ACM SIGMOD InternationalConference on Management of Data.
Austin, Texas.Mays, E. 1982 Monitors as Responses to Questions: DeterminingCompetence.
Proceedings of the American Association for ArtificialIntelligence Conference (AAA1-82).
Pittsburgh, Pennsylvania: 421-423.McCoy, K.F.
1982 Augmenting a Database Knowledge Represen-tation for Natural Language Generation.
Proceedings of the TwentiethAnnual Conference of the Association for Computational Linguistics,Toronto, Ontario, Canada: 121-128.McDonald, D. 1983 Natural Language Generation as a ComputationalProblem: An Introduction.
In Brady, M. and Berwick.
R., Eds.,Computational Models of Discourse, M1T Press, Cambridge, Massa-chusetts: 209-265.McKeown, K.R.
1982 The TEXT System for Natural Language Gener-ation: An Overview.
Proceedings of the Twentieth Annual Conferenceof the Association for Computational Linguistics, Toronto, Ontario,Canada: 113-120.Mylopoulos, J.; Bernstein, P.A.
; and Wong, H.K.T.
1980 A LanguageFacility for Designing Database-Intensive Applications.
ACM Trans-actions on Database Systems 5(2): 185-207.Mylopoulos, J.; Borgida, A.; Cohen, P.; Roussopoulos, N.; Tsotsos, J.;and Wong, H.K.T.
1976 TORUS: A Step Towards Bridging theGap between Databases and the Casual User.
Information Systems2(1): 49-64.Plath, W.J.
1976 REQUEST: A Natural Language Question AnsweringSystem.
IBM Journal of Research and Development 20(4): 326-335.Reiter, R.; Gailaire, H.; King, J.J.; Mylopoulos, J.; and Webber, B.L.1983 A Panel on AI and Databases.
Proceedings of the 8th Interna-tional Joint Conference on Artificial Intelligence.
Karlsruhe, WestGermany: 1199-1206.Roussopoulos, N. 1977 A Semantic Network Model of Databases.TR104, Department of Computer Science, University of Toronto,Toronto, Ontario, Canada.Sidner, C.L.
and Israel, D.J.
1981 Recognizing Intended Meaning andSpeakers' Plans.
Proceedings of the Seventh International Joint Confer-ence on Artificial Intelligence.
Vancouver, British Columbia, Canada:203-208.Small, S. 1980 Word Expert Parsing: A Theory of Distributed Word-Based Natural Language Understanding.
TR-954, University ofMaryland, College Park, Maryland.Smith, J.M.
and Smith, D.C.P.
1977 Database Abstraction: Aggre-gation and Generalization.
ACM Transactions on Database Systems2(2): 105-133.Thompson, B.H.
and Thompson, F.B.
1975 Practical NaturalLanguage Processing: The REL System as Prototype.
In: Rubinoff,M.
and Yovits, M., Eds., Advances in Computers 13.
AcademicPress, New York: 109-168.Waltz, D.L.
1978 An English Language Question Answering Systemfor a Large Relational Database.
Communications of the ACM 21 (7):526-539.Webber, B.L.
1978 Description Formation and Discourse ModelSynthesis.
Proceedings of the Theoretical Issues in Natural LanguageProcessing Workshop (TINLAP-2), University of Illinois at Urbana-Champaign, Illinois: 42-50.Woods, W.; Kaplan, R.; and Nash-Webber, B.
1972 The LunarSciences Natural Language Information System: Final Report.
BBNReport 2378, Bolt, Beranek and Newman 2ne., Cambridge, Massa-chusettsNOTEUNIX is a trademark of AT&T Bell Laboratories.124 Computational Linguistics, Volume 22, Number 2, April-June 2986
