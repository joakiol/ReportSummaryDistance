NL Assistant: A Toolkit for Developing Natural LanguageApplicationsDeborah A. Dahl, Lewis M. Norton, Ahmed Bouzid, and Li LiUnisys CorporationIntroductionWe will be demonstrating a toolkit fordeveloping natural anguage-based applicationsand two applications.
The goals of this toolkitare to reduce development time and cost fornatural anguage based applications by reducingthe amount of linguistic and programming workneeded.
Linguistic work has been reduced byintegrating large-scale linguistics resources---Comlex (Grishman, et.
al., 1993) and WordNet(Miller, 1990).
Programming work is reduced byautomating some of the programming tasks.
Thetoolkit is designed for both speech- and text-based interface applications.
It runs in aWindows NT environment.
Applications canrun in either Windows NT or Unix.System ComponentsThe NL Assistant toolkit consists of1.
a natural language processing engine (Dahl,1992)2. lexical and semantic servers based onComlex and WordNet (Grishman et.al,1993, Miller, 1990)3. template flies which serve as the basis fornew applicationsa graphical toolkit for entering linguisticand application-related information5.
algorithms for automatic rule generationbased on developer input.4.Natural Language DevelopmentTwo strategies address the goal of minimizingthe amount of linguistics expertise required todevelop applications with the NL Assistanttoolkit.
To reduce the amount of lexicalinformation that the developer must add, large-scale lexical resources have been integrated withthe toolkit.
These include Comlex and WordNetas well as additional, internally developedresources.
The second strategy is to provide easyto use editors for entering linguistic information.ServersLexical information is supplied by four externalservers which are accessed by the naturallanguage engine during processing.
Syntacticinformation is supplied by a lexical server basedon the 50K word Comlex dictionary availablefrom the Linguistic Data Consortium.
Semanticinformation comes from two servers, a KBserver based on the noun portion of WordNet(70K concepts), and a semantics servercontaining case frame information for 2500English verbs.
A denotations server usingunique concept names generated for eachWordNet synset at ISI links the words in thelexicon to the concepts in the KB.
When theengine is connected to the servers, wheneverlexical information for specific words cannot befound in the local engine, it is requested fromthe servers.
When the servers cannot supplylexical information for a particular word,various heuristics are used to hypothesize themissing information.
When hypothesizedinformation is wrong, it can be corrected byusing the editors.EditorsAlthough the servers minimize the amount oflinguistic work that needs to be done to developan application, they do not eliminate it.
Themain reason for this is that a particularapplication will make use of words that do notexist in the dictionary.
For example, in ourinitial applications these have included wordssuch as the verbs 'OEM', 'interface','download', and 'customize'.
To improve the33ease of use of the linguistic developmentenvironment, several special-purpose ditorshave also been implemented.
These includeeditors for lexical, semantic, and knowledge-base work.The figure below illustrates an editing session inthe semantic rule editor for the verb advise.Application DevelopmentLinking the application-independent semanticrepresentation to the back-end applicationsoftware is the task of the application module.To reduce the amount of time required todevelop an application and the amount ofexpertise required, we have structured theapplication module into a set of several differenttypes of rules.
(Norton, et.
al., 1996) The tasksthese rules have to perform are: (1) map theuser's utterance into an utterance class whichconsists of pragmatically equivalent utterances.
(2) determine, based on the user's utterance, thestate of the dialog, and any other informationrelevant to the application (such as the state of adatabase) what to do next (3) perform the nextaction or set of actions.
Actions include sayingsomething to the user, retrieving informationfrom a database, and resetting the dialog to anew state.
These rules are written in Prolog.
Thetoolkit provides an editor for editing andmanaging these rules.
In addition, the toolkitprovides tools for automatically generating rulesin the special case of applications which do notcontrol a dialog.ApplicationsWe will demonstrate a web-based textapplication on the topic of the NL Assistantproduct.
We will also demonstrate a speechrecognition application for mortgage quotations,our Mortgage Assistant product.MetricsThe largest application we have developed todate has 37 answer classes on the topic of theNL Assistant product.
It used 683 trainingsentences and achieved a score of 83% firstanswer correct and 88% first or second answercorrect on a live test with 144 queries.
Itrequired approximately two person-months todevelop.ReferencesDahl, Deborah A.
"'Pundit--Natural languageinterfaces".
In G. Comyn, N.E.
Fuchs, and M.J. Ratcliffe, eds.
Logic programming in action.Springer-Verlag, 1992.Grishman, Ralph, Catherine Macleod andSusanne Wolf.
"The Comlex syntax project".ARPA Human Language TechnologyWorkshop.
Morgan Kaufmann, 1993.Linebarger, Marcia C., Lewis M. Norton, andDeborah A. Dahl.
"'A Portable approach to lastresort parsing and interpretation".
ARPAHuman Language Technology Workshop, 1993.Miller, George A.
"'Five papers on WordNet".International Journal of Lexicography.
1990.Norton, Lewis M., Carl E. Weir, AhmedBouzid, Deborah A. Dahl, and K.W.
Scholz.
"'Amethodology or application development forspoken language systems".
Proceedings ofICSLP96.
Philadelphia, PA, 1996.34
