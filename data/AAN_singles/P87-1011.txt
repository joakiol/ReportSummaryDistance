PREDICT IVE  COMBINATORS"  A METHOD FOR EFF IC IENTPROCESSING OF  COMBINATORYCATEGORIAL  GRAMMARSKent WittenburgMCC,  Human Interface Program3500 West Balcones Center DriveAustin, TX  78759Department of LinguisticsUniversity of Texas at AustinAustin, TX  78712ABSTRACTSteedman (1985, 1987) and others have proposed thatCategorial Grammar, a theory of syntax in which grammati-cal categories are viewed as functions, be augmented withoperators uch as functional composition and type raising inorder to analyze ?
noncanonical" syntactic onstructions suchas wh- extraction and node raising.
A consequence of theseaugmentations is an explosion of semantically equivalentderivations admitted by the grammar.
The present workproposes a method for circumventing this spurious ambiguityproblem.
It involves deriving new, specialized combinatorsand replacing the orginal basic combinators with thesederived ones.
In this paper, examples of these predictivecombin~tor8 are offered and their effects illustrated.
An al-gorithm for deriving them, as well as s discussion of theirsemantics, will be presented in forthcoming work.IntroductionIn recent years there has been a resurgence of interest inCategorial Grammar  (Adjukeiwicz 1935; Bar-Hillel 1953).The work of Steedman (1985, 1987) and Dowry (1987) is rep-resentative of one recent direction in which Categorial Gram-mar (CG) has been taken, in which the operations of func-tional composition and type raising have figured in analysesof "noncanonical" structures such as wh- dependencies andnonconstituent conjunction.
Based on the fact that suchoperations have their roots in the ?ombinator~/ c~lc~lua(Curry and Feys 1958), this line of Categorial Grammar hascome to be known as Combinatory Categorial Grammar(CCG).
While such an approach to syntax has beendemonstrated to be suitable for computer implementationwith unification-based grammar formalisms (Wittenburg1986a), doubts have arisen over the efficiency with whichsuch grammars can be processed.
Karttunen (1986), for in-stance, argues for an alternative to rules of functional com-position and type raising in CGs on such grounds.
1 Otherresearchers working with Categorial Unification Grammarsconsider the question of what method to use for long-distancedependencies an open one (Uszkoreit 1986; Zeevat, Klein, andCalder 1986).The property of Combinatory Categorial Grammars thathas occasioned concerns about processing is spurious am-biguity: CCGs  that directly use functional composition andtype raising admit alternative derivations that neverthelessresult in fully equivalent parses from a semantic point ofview.
In fact, the numbers of such semantically equivalentderivations can multiply at an alarming rate.
It was shownin Wittenburg (1986a) that even constrained versions of func-tional composition and type raising can independently causethe number of semantically equivalent derivations to grow atrates exponential in the length of the input string.
2 Whilethis spurious ambiguity property may not seem to be a par-titular problem if a depth-first (or best-first) parsing algo-rithm is used-after all, if one can get by with producing justone derivation, one has no reason to go on generating theremaining equivalent ones-the fact is that both in caseswhere the parser ultimately fails to generate a derivation andwhere one needs to be prepared to generate all and onlygenuinely (semantically) ambiguous parses, spurious am-biguity may be a roadblock to efficient parsing of naturallanguage from a practical perspective.The proposal in the present work is aimed towardeliminating spurious ambiguity from the form of Com-binatory Categorial Grammars  that are actually used duringparsing.
It involves deriving a new set of combinators,termed predictive combinators, that replace the basic formsof functional composition and type raising in the originalgrammar.
After first reviewing the theory of CombinatoryCategorial Grammar  and the attendant spurious ambiguityproblem, we proceed to the subject of these derived com-binators.
At the conclusion, we compare this approach toother proposals.iKarttunen suggests that these operations, at least intheir most general form, are computationally intractable.However, it should be noted that neither Steedman norDowty has suggested that a fully general form of type rais-ing, in particular, should be included as a productive rule ofthe syntax.
And, as Friedman, Dai, and Wang (1986) haveshown, certain constrained forms of these grammars thatnevertheless include functional composition are weaklycontext-free.
Aravind Joshi (personal communication}strongly suspects that the generative capacity of the gram-mars that Steedman assumes, say, for Dutch, is in the sameclass with Tree Adjoining Grammars (Joshi 1985) and HeadGrammars (Pollard 1984).
Thus, computational tractabilityis, I believe, not at issue for the particular CCGs assumedhere.2The result in the case of functional composition was tiedto the Catalan series (Knuth 1975), which Martin, Churchand Patil (1981) refer to as =almost exponential'.
For aparticular implementation .of type raising, it was 2 n'1.
Thefact that derivations grow at such a rate, incidentally, doesnot mean that these grammars, if they are weakly context-free, are not parsable in n 3 time.
But it is such ambiguitiesthat can occasion the worst case for such algorithms.
SeeMartin, Church, and Patti (1981) for discussion.73Overv iew of CCGThe theory of CombinatoriaJ Categorial Grammar hastwo main components: a categorial exicon that assignsgrammatical categories to string elements and a set of com-binatory rules that operate over these categories.
3Categor la l  exiconThe grammatical categories assigned to string elements ina Categorial Grammar can be basic, as in the category CN,which might he assigned to the common noun man, or theymay he of a more complex sort, namely, one of the so-calledfunctor categories.
Functor categories are of the form XIY ,which is viewed as a function from categories of type Y tocategories of type X.
Thus, for instance, a determiner such asthe might be ~ igned the category NPICN , an indicationthat it is a function from common nouns to noun phrases.An example of a slightly more complex functor categorywould be tensed transitive verbs, which might carry the cate-gory (SINP)INP.
This can be viewed as a second order func-tion from (object) noun phrases to another function, namelySINP , which is itself a function from (subject) noun phrasesto sentences.
4 (Following Steedman, we will sometimes ab-breviate this finite verb phrase category as the symbol FVP.
)Directionality is indicated in the categories with the followingconvention: a righ~slanting slash indicates that the argumentY must appear to the right of the functor, as in X/Y; a left-slanting slash indicates that the argument Y must appear tothe left, as in X\Y.
5 A vertical slash in this paper is to beinterpreted as specifying a directionality of eith~" left orright.Combinator ia l  rulesImposing directionality on categories entails including twoversions of the basic functional application rule in the gram-mar.
Forward functional application, which we will note as' fa>' ,  is shown in (la), backward functional application('ra<') in (Ib).(t)a.
Forward Funct iona l  App l i ca t ion  ( fa~)X/Y  Y => Xb.
Backward Funct iona l  App l i ca t ion  ( fa<)Y X\Y => XAn example derivation of a canonical sentence using justthese comhinatory rules is shown in (2).C2)S. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
fa<S\NP (=FVP)NP NP.
.
.
.
.
.
.
.
.
fa> .
.
.
.
.
.
.
.
.
.
.
f~>NP/CN CN S\NP/NP SPIES CS.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
_ _~he man ate the cameUsing just functional application results in derivations thattypically mirror traditional constituent structure.
However,the theory of Combinatory Categorial Grammar departsfrom other forms of Categorial Grammar and relatedtheories uch as HPSG (Pollard 1085; Sag 1987) in the use offunctional composition and type raising in the syntax, whichoccasions partial constituents within derivations.
Functionalcomposition is a combinatory operation whose input is twofunctors and whose output is also a funetor composed out ofthe two inputs.
In (3) we see one instance of functional com-position (perhaps the only one) that is necessary in English.
6(3) Forvard  funct iona l  compost, , ton (fc>)X/Y Y/Z => XlZThe effect of type raising, which is to be taken as a ruleschema that is iustantiated through individual unary rules, isto change a category that serves as an argument for somefunctor into a particular kind of complex functor that takesthe original functor as its new argument.
An instance of atype-raising rule for topicalized NPs is shown in (4a / ;  a rulefor type-raising subjects is shown in (4h) in two equivalentnotations.(4)a.
Toptca l tza%ton  (Cop)NP => S / (S /NP)b. SubJec~ ~ype- ra l s ing  (s~r)NP => S/FVP\[NP => Sl (s\m,) \]The rules in (3) and (4) can be exploited to account forunbounded dependencies in English.
An instance oftopicalization is shown in (,5).31n Wittenburg (1986a), a set of unary rules is alsosumed that may permute arguments and shift eategories invarious ways, but these rules are not germane to the presentdiscussion.4When parentheses are omitted from categories, thebracketing is left, associative, i.e., SINP\[NP receives exactlythe same interpretation as (SINP)INP.5Note that X is the range of the functor in both theseexpressions and Y the domain.
This convention does nothold across all the categorial grammar literature.6Functional composition is known as B in the com-binatory calculus (Curry and Feys 1958).7The direction of the slash in the argument categoryposes an obvious problem for cases of subject extraction, atopic which we will not have space to discuss here.
But seeSteedman (1087).74s/(S/NP).
.
.
.
.
.
top .
.
.
.
.
s i rNP NP FVP/S FVP/NPApples he sa id  John hates l(6)SS/NPS/FVP.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
fC>S/S.
.
.
.
.
.
.
.
.
.
.
.
.
.
fC>S/FVP SlFVP.
.
.
.
.
S~rNPSuch analyses of unbounded dependencies get by withoutpositing special conventions for percolating slash features,without empty categories and associated ~-rules, and withoutany significant complications to the string-rewritingmechanisms such as transformations.
The two essential in-gredients, namely, type-raising and functional composition,are operations of wide generality that are sufficient for han-dling node-raising (Steedman 1985; 1987) and other forms ofnonconstituent conjunction (Dowry 1987).
Using thesemethods to capture unbounded dependencies also preserves akey property of grammm-s, namely, what Steedman (1985)refers to as the ad.~acency property, maintained when stringrewriting operations are confined to concatenation.
Gram-mars which preserve the adjacency property, even thoughthey may or may not be weakly context-free, neverthelesscan make use of many of the parsing techniques that havebeen developed for context-free grammars since the ap-plicability conditions for string-rewriting rules are exactly thesame.The  spurious amblgulty problemA negative consequence of parsing directly with the rulesabove is an explosion in possible derivations.
While func-tional composition is required for long-distance dependencies,i.e., a CCG without such rules could not find a successfulparse, they are essentially optional in other cases.
Considerthe derivation in (6) from Steedman (19.85).
~(e)SS/NPS/VPSlFVPS/S.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
fC>S/S'.
.
.
.
.
.
.
.
.
.
.
.
.
.
fC>S/VP.
.
.
.
.
.
.
.
f c>s /Fw FvP/vP vP/S' s'/s s/FvP FVP/VP VP/NP NP.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.I can bel ieve that she will eat cakesThis is only one of many well-formed erivations for this sen-tence in the grammar.
The maximal use of functional com-position rules gives a completely left branching structure tothe derivation tree in (6); the use of only functional applica-tion would give a maximally right-branching structure; a to-tal of 460 distinct derivations are in fact given by the gram-mar for ~his sentence.Given that derivations using functional composition canbranch in either direction, spurious ambiguity can arise evenin sentences which depend on functional composition.
Note,for instance, that if we topicalized cMces in (6), we would stillbe able to create the partial constituent S/NP bridging thestring I can bdi~e that she will eat in 132 different ways.Some type-raising rules can also provoke spurious am-biguity, leading in certain cases to an exponential growth ofderivations in the length of the string (Wittenburg 1986a).Here again the problem stems from the fact that type-raisingrules can apply not just in cases where they are needed, butalso in cases where derivations are possible without type rais-ing.
An example of two equivalent derivations made possiblewith subject type-raising is shown in (7).(7)&.
S. .
.
.
.
.
.
.
.
.
.
fa<\]~P S\NPJohn walksb.
S. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
f&>s / ( s \~).
.
.
.
.
.
.
ST, rsP s \ sPJohn walksNote that spurious ambiguity is different from the classicambiguity problem in parsing, in which differing analyses willbe associated with different attachments or other linguis-tically significant labelings and thus will yield differingsemantic results.
It is a crucial property of the ambiguityjust mentioned that there is no difference with respect otheir fully reduced semantics.
While each of the derivationsdiffers from the others in the presence or absence of someintermediate constituent(s), the semantics of the rules offunctional composition and type raising ensure that after full9 reductions, the semantics will be the same in every case.Predict ive eomblnatorsHere we show how it is possible to eliminate spurious am-biguity while retaining the the analyses (but not thederivations) of long-distance dependencies just shown.
Theproposal involves deriving new combinatory rules thatreplace functional composition and the ambiguity-producingtype-raising rules in the grammar.
The difference betweenthe original grammar and this derived one is that the newcombinators will by nature be restricted to just those deriva-tional contexts where they are necessary whereas in theoriginal grammar, these rules can apply in a wide range ofcontexts.The key observation is the following.
Functional com-position and certain type raising rules are only necessary (inthe sense that a derivation cannot be had without them) if8We do not show the subject type-raising rules in thisderivation, but assume they have already applied to the sub-ject NPs.9This equivalence holds also if the "semantics* consistsof intermediate f-structures built by means of graph-unification-based formalisms ~ in Wittenburg (1986a).75categories of the form XI(YIZ ) appear at one end of deriva~tional substring.
This category type is distinguished byhaving an argument term that is itself a functor.
As provedby Dowry (1987), adding functional composition toCategorial Grammars that admit no categories of this typehas no effect on the set of strings these grammars cangenerate, although of course it does have an effect on thenumber of derivations allowed.
When CGs do allowcategories of this type, then functional composition (andsome instances of type raising) can be the c~-ucial ingredientfor success in derivations like those shown in schematic formin (S).Ce)9,.
XY /ZX/(Y/Z) Y/~ {~/W WI .
.
.
.
.
.
IZb.
X. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
fa<Y/gY/~ Q/W W/ .
.
.
.
.
.
/Z X\CYIZ)These schemata re to be interpreted as follows.
The cate-gory strings shown at the bottom of (8a) and (gb) are eitherlexical category assignments OR (as indicated by the carets)categories derivable in the grammar with rules of functionalapplication or unary rules such as topicalization.
Recall thatCCGs with such rules alone have no spurious ambiguityproblem.
The category strings underneath the wider dashedlines are then reducible via (type raising and) functional com-position into functional arguments of the appropriate sortthat are only then reduced via functional application to theX terms.
10 It is this part of the derivation, i.e., the partrepresented by the pair of wider dashed lines, in whichspurious ambiguity shows up.
Note that (5) is intended to bean example of the sort of derivation being schematized in(8a): the topicalization rule applies underneath the leftmostcategory to produce the X/(Y/Z) type; all other categories inthe bottommost string in (8a) correspond to lexical categoryassignments in ($).There are two conditions necessary for eliminatingspurious ambiguity in the circumstances we have just laidout.
First, we must make sure that function composition(and unary rules like subject type-raising) only apply when ahigher type functor appears in a substring, as in (8).
Whenno such higher type functors appears, the rules must then beabsent from the picture-they are unnecessary.
Second, wemust be sure that when function composition and unary ruleslike subject type-raising do become involved, they produceunique derivations under conditions like (8), avoiding thespurious ambiguity that characterizes function compositionand type raising as they have been stated earlier.10While we have implied (as evidenced by the right-leaning slashes on intermediate categories) that forward func-tional composition is the relevant composition rule, back-wards functional composition could also be involved in thereduction of substrings, as could type raising.The natural solution for enforcing the first condition is toinvolve categories of type X\[(YIZ ) in the derivations from thestart.
In other words, restricting the application of func-tional composition and the relevant ype-raising rules is pos-sible if we can incorporate some sort of top-down, or predic-tive, information from the presence of categories of typeX\[(YIZ).
Standard dotted rule techniques found in Earieydeduction (Earley 1970) and active chart parsing (Kay 1980)offer one avenue with which to explore the possibility of ad-ding such control information to a parser.
However, sincethe information carried by dotted rules in algorithmsdesigned for context-free grammars has a direct correlate inthe slashes already found in the categories of a CategorialGrammar, we can incorporate such predictive informationinto our grammar in categorial terms.
Specifically, we canderive new combinatorial rules that directly incorporate the?
top-down" information.
I call these derived combinatorialrules predictive combinators.
11It so happens that these same predictive combinators willalso enforce the second condition mentioned above, by virtueof the fact that they are designed to branch uniformly fromthe site of the higher type functor to the site of the "gap' .For cases of leftward extraction (aa), derivations will beuniformly left-branching.
For cases of rightward extraction(8b), derivations will be uniformly right-branching.
It is ourconjecture that CCGs can be compiled so as to force uniformbranching in just this way without al'fecting the languagegenerated by the grammar and without altering the semanticinterpretations of the results.
We will now turn to some ex-amples of the derived combinatory rules in order to see howthey might produce such derivations.The first predictive combinator we will consider is derivedfrom categories of type X/(Y/Z) and forward functional com-position of the a~'gument term of this category.
It isdesigned for use in category strings like those that appear in(8a).
The new rule, which we will call forward-predictivefunctional composition, isshown in (9).
(9) Forward-predtc t~.ve  forward func~iona lcomposl ~,lon ( fp fc>)x/CYlZ) Y lW => XlCW/z)Assuming a CCG with the rule in (9) in place of forwardfunctional composition, we are able to produce derivationssuch as (10).
Here, as in some earlier examples, we assumeSubject type-raising has already applied to subject NPcategories.11There is a loose analogy between these predictive ?om-binators and the concept of supercombinators first proposedby Hughes (1982).
Hughes proposed, in the context of corn-pilation techniques for applicative programming languages,methods for deriving new combinators from actual programs.He used the term supercomblnators to distinguish thisderived set from the fixed set of combinators proposed byTurner (1979).
By analogy, predictive combinators in CCGsare derived from actual categories and rules defined inspecific Combinatory Categorial Grammars.
There are inprinciple infinitely many of them, depending on the par-ticulars of individual grammars, and thus they can be distin-guished from the fixed set of "basic" combinatorial rules forCCGs proposed by Steedman and others.76(10)S. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
f$1~Sl (VPINP).
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
fp fc>Sl (~'VPIm).
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
fp fc>Sl (S/m).
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
fp fc>s~ (s'/m).
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
fp fc>Sl (w/ in  ~).
.
.
.
.
.
.
.
.
.
.
.
.
.
fpfc>Sl (ZVP Im).
.
.
.
.
.
.
.
fpfc>S/ (S /m).
.
.
.
topNP S/FVP FVP/VP VP/S ~ S'/S S/FVP FVP/VP VP/NPcakes I can be l ieve  that  she w i l l  ea tWe took note above of the fact that there were at least 132distinct derivations for the sentence now appearing in (10)with CCGs using forward functional composition directly.With forward-predictive forward functional composition i itsplace, there is one and only one derivation admitted by thegrammar, namely, the one shown.
In order to see this, notethat the string to the right of cakes is irreducible with anyrules now in the grammar.
Only fpfc~> can be used toreduce the category string, and it operates in a necessaxilyleft branching fashion, triggered by an X/(Y/Z) category atthe left end of the string.A second predictive combinator necessary to fully incor-porate the effects of forward functional composition is a ver-sion of predictive functional composition that works in thereverse direction, i.e., backward-predictive forward func-tional composition.
It is necessary for category strings likethose in (8b), which are found in CCG analyses of Englishnode raising (Steedman 1985).
The rule is shown in (11).
(11) Backward-pred ic t ive  fo~ard  funct iona lcompos i t ion  (bpfc>)wlz x\ (Y/z) => x\ (Y/W)Intuitively, the difference between the backward-predictive and the forward-predictive rsions of functioncomposition is that the forward version passes the "gap"term rightward in a left-branching subderivation, whereas thebackward version passes the "principle functor" in the ar-gument term leftward in a right-branching subderivation.We see an example of both these rules working in the case ofright-node-raising shown in (12).
It is assumed here, as inSteedman (1985), that the conjunction category involvesfinding like bindings for category variables corresponding toeach of the conjuncts.
We use A and B below as names forthese variables, and the vertical slash must be interpretedhere as a directional variable as well.
Note that bindings ofvariables in rule applications, as say the X term in the in-stance of pbfc~, can involve complex parenthesizedcategories (recall that we assume left-association) in additionto basic ones.(12)S.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
fa~S/NF.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
fa~(s/~) I (FW/m).
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
fp fc>(s/tnD / (s/m)(A/NF) / (A/NP) \ (A/FVF).
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
bpfc>SIFVP FvP/m (A I B) / (A I B) \ (A I B) S/F'v'P FVP/NP mJohn baked but  Harry ate  XIt is our current conjecture that replacing forward func-tional composition in CCGs with the two rules shown willeliminate any spurious ambiguity that arises directly fromthis composition rule.
However, we have yet to show howspurious ambiguity from subject type-raising can beeliminated.
The strategy will be the same, namely, toreplace subject type-raising with a set of predictive com-binators that force uniformly branching subderivations incases requiring function composition.For compiling out unary rules generally, it is necessary toconsider all existing combinatory rules in the grammar.
Inour current example grammar, we have four rules to considerin the compilation process: forward and backward(predictive) functional application, and the newly derivedpredictive function composition rules as well.
Subject ype-raising can in fact be merged with each of the four corn-binatory rules mentioned to produce four new predictivecombinators, each of which have motivation for certain casesof node-raising.
Here we will look at just one example,namely, the rule necessary to get leftward "movement"(topicalization and wh- extraction) over subjects.
Such a rulecan be derived by merging subject ype-raising with the rightdaughter of the new forward-predictive forward functioncomposition rule, maintaining all bindings of variables in theprocess.
This new rule which, in the interest of brevity, wecall forward-predictive subject ype raising is shown in (13).
(13) Forward-predict,  lye subJec~ ty'pera is ing (fpstr)xl(s/z) m => X l (m/z )The replacement of subject ype raising with the predictivecombinator in (13) eliminates purious derivations uch as(7b).
Instead, the effects of subject ype raising will only berealized in derivations such as (14), which are marked by re-quiring the effects of subject ype raising to get a derivationat all.77(14)Ss/(FVP/SP).
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
fps~rS / (S / re ' ).
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
fp fc>S/ (F~TIm ~).
.
.
.
.
.
.
.
.
.
.
.
.
.
fps t rS/ (s /m ~).
.
.
.
.
.
.
tOp~ FVP/S NP.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.Apples he sa ld  JohnFVP/NPha~es!The predictive combinator rules in (9), (11), and (13) areexamples of a larger set necessary to completely eliminatespurious ambiguity from most Combinatory CategorialGrammars.
In the class of function composition rules, wehave considered only forward functional composition in thispaper, but many published CCG analyses assume rules ofbackward functional composition as well.
As we mentioned,compiling out type-raising rules may involve adding as manynew combinators as there axe general combinatory rules inthe grammar previously.
Other unary rules that producespurious ambiguity may require even more predictive eom-binators.
The rule of subject-introduction proposed in Wit-tenburg (1986a) may be one such example.There are of course costs involved in increasing the size ofa rule base by enlarging the grammar through the addition ofpredictive combinators.
However, the size of a rule base iswell known to be a constant factor in asymptotic analyses ofparsing complexity (and the rule base for Categorial Gram-mars is very small to begin with anyway).
On the otherhand, the cost of producing spuriously ambiguous derivationswith grammars that include functional composition is at leastpolynomial for the best known parsing algorithms.
Thereasoning is as follows.
Based on the (optimistic) assumptionthat relevant CCGs are weakly context-free, they are amen-able to parsing in n 3 time by, say, the Esrley algorithm(Earley 1970).
12 As alluded to earlier in footnote 2, "all-waysambiguous" grammars, a characterization that holds forCCGs that use function composition directly, occasion theworst case for the Earley algorithm, namely n 3.
This is be-cause all possible well-formed bracketings of a string are infact admitted by the grammar in these worst cases (as ex-emplified by (6)) and the best the Earley algorithm can dowhen filling out, a chart (or its equivalent) in such cir-cumstances i O(n3).
The methods presented here for nor-realizing CCGs through predictive combinators eliminate thisparticular source of worst case ambiguity.
Asymptotic pars-ing complexity will then be no better or worse than thegrammar and parser yield independently from the spuriousambiguity problem.
Further, whatever the worst case resultsare, there will presumably be statistically fewer instances ofthe worst cases since an omnipresent source of all-ways am-biguity will have been eliminated.Work on predictive ombinators at MCC is ongoing.
Atthe time of this writing, an experimental gorithm for corn-12Even if the CCGs in question are not weakly context-free, it is still likely that asymptotic omplexity results willbe polynomial unless the relevant class is not within that ofthe limited extensions to context-free grammars that includeHead Grammars (Pollard 1984) and TAGs (Joshi 1985).
Pol-lard (1984) has a result of n 7 for Head Grammars.piling a predictive form of CCGs, given a base form alongthe lines of Steedman (1985), has been implemented forCCGs expressed in a PATR-like unification grammar for-malism (Shieber 1984).
We believe from experience that ouralgorithm is correct and complete, although we do not have aformal proof at this point.
A full formal characterization fthe problem, along with algorithms and accompanying cor-rectness proofs, is forthcoming.Compar i son  wi th  prev ious workPrevious suggestions in the literature for coping withspurious ambiguity in CCGs are characterized not byeliminating such ambiguity from the grammar but rather by13 attempting to minimize its effects during parsing.Karttunen (1986) has suggested using equivalence testsduring processing; in his modified Earley chart parsing algo-rithm, a subeonstituent is not added to the chart withoutfirst testing to see if an equivalent constituent has alreadybeen built.
14 In its effects on complexity, this check is reallyno different han a step already present in the Earley algo-rithm: an Earley state (edge) is not added to a state set(vertex) without first checking to see if it is a duplicate ofone already there.
15 The recognition algorithm does nothingwith duplicates; for the Earley parsing algorithm, duplicatesengender an additional small step involving the placement ofa pointer so that the analysis trees can be recovered later.Duplicates generated from functional composition (or fromother spurious ambiguity sources) require a treatment no dif-ferent than Earley's duplicates except that no pointers needto be added in parsing-their derivations are simply redun-dant from a semantic point of view and thus they can be ig-nored for later processing.
Karttunen's proposal does notchange the worst-case complexity results for Earley's algo-rithm used with CCGs as discussed above and thus does notoffer much relief from the spurious ambiguity problem.However, parsing algorithms uch as Karttunen's that checkfor duplicates are of course superior from the point of view ofasymptotic omplexity to parsing algorithms which fail tomake cheeks.
The latter sort will on the face of it be ex-ponential when faced with ambiguity as in (6) since each ofthe independent derivations corresponding to the Catalanseries will have to be enumerated independently.In earlier work (Wittenburg 1986a, 1986b), I have sug-gested that heuristics used with a best-first parsing algorithmcan help cope with spurious ambiguity.
It is clear to me nowthat, while more intelligent methods for directing the searchvan significantly improve performance in the average case,they should not be viewed as a solution to spurious am-biguity in general.
Genuine ambiguity and unparsable inputin natural language can force the parser to search exhaus-tively with respect o the grammar.
While heuristics usedeven with a large search space can provide the means fortuning performance for the "best" analyses, the search spaceitself will determine the results in the "worst" cases.
Com-piling the grammar into a normal form based on the notionof predictive eombinators makes exhaustive search morepalatable, whatever the enumeration order, since the search13This characterization also apparently holds for theproposals from Pareschi and Steedman (1987) beingpresented at this conferenee.14While Karttunen's categorial fragment for Finnish doesnot make direct use of functional composition and type rais-ing, it nevertheless suffers from spurious ambiguity of asimilar sort stemming from the nature of the categories andfunctional application rules he defines.15The n 3 result crucially depends on this check, in fact.78space itself is vastly reduced.
Heuristics (along with best-first methods generally) may still be valuable in the reducedspace, but any enumeration order will do.
Thus Earley pars-ing, best-first enumeration, and even LR  techniques are stillall consistent with the proposal in the current work.ACKNOWLEDGEMENTSThe research on which this paper is based was carried outin connection with the Lingo Natural Language InterfaceProject at MCC.
I am grateful to Jim Barnett, Elaine Rich,Greg Whittemore, and Dave Wroblewski for discussions andcomments.
This work has also benefitted from discussionswith Scott Danforth and Aravind Joshi, and particularlyfrom the helpful comments of Mark Steedman.REFERENCESAdjukiewicz, K. 1935.
Die Syntaktische Konnexitat.Studia Philosophica 1:1-27.
\[English translationin Storrs McCall (ed.).
Polish Logic 1920-1939,pp.
207-231.
Oxford University Press.\]Bar-Hillel, Y.
1953.
A Quasi-Arithmetical Notation forSyntactic Description.
Language 29: 47-58.\[Reprinted in Y. Bar-Hillel, Language and Infor-mation, Reading, Mass.
: Addison-Wesley, 1964,pp.
61-74.
ICurry, H., and R. Feys.
1958.
Combinatory Logic:Volume 1.
Amsterdam: North Holland.Dowry, D. 1987.
Type Raising, Functional Composi-tion, and Non-Constituent Conjunction.
To ap-pear in R. Oehrle, E. Bach, and D. Wheeler (eds.
),Categorial Grammars and Natural LanguageStructures, Dordrecht.Earley, J.
1970.
An Efficient Context-Free Parsing Al-gorithm.
Communications of the ACM13:94-102.Friedman, J., D. Dai, and W. Wang.
1986.
The WeakGenerative Capacity of Parenthesis-FreeCategorial Grammars.
Technical report no.86-001, Computer Science Department, BostonUniversity, Boston, Massachusetts.Hughes, R. 1982.
Super-combinators: a New Im-plementation Method for Applicative Languages.In Symposium on Lisp and Functional Program-ming, pp.
1-10, ACM.Joshi, A.
1085.
Tree Adjoining Grammars: How MuchContext-Sensitivity is Required to ProvideReasonable Structural Structural Descriptions?In D. Dowry, L. Karttunen, and A. Zwicky (ads.
),Natural Language Parsing: Psychological, Com-putational, and Theoretical Perspectives.Cambridge University Press.Karttunen, L. 1986.
Radical Lexicalism.
Paperpresented at the Conference on Alternative Con-ceptions of Phrase Structure, July 1986, NewYork.Kay, M. 1980.
Algorithm Schemata nd Data Struc-tures in Syntactic Processing.
Xerox Palo AltoResearch Center, tech report no.
CSL-80-12.Knuth, D. 1975.
The Art of Computer Programming.Voh 1: Fundamental Algorithms.
Addison Wes-ley.Martin, W., K. Church, and R. Patil.
1981.
PreliminaryAnalysis of a Breadth-First Parsing Algorithm:Theoretical and Experimental Results.
MIT techreport no.
MIT/LCS/TR-291.Pareschi, R., and M. Steedman.
1987.
A Lazy Way toChart Parse with Categorial Grammars, thisvolume.Pollard, C. 1984.
Generalized Phrase Structure Gram-mars, Head Grammars, and Natural Languages.Ph.D.
dissertation, Stanford University.Pollard, C. 1985.
Lecture Notes on Head-DrivenPhrase Structure Grammar.
Center for theStudy of Language and Information, StanfordUniversity, Palo Alto, Calif.Sag, I.
1987.
Grammatical Hierarchy and LinearPrecedence.
To appear in Syntax and Semantics,Volume 20: Discontinuous Constituencies,Academic.Shieber, S. 1984.
The Design of a Computer Languagefor Linguistic Information.
Proceedings ofColing84, pp.
362-366.
Association for Computa-tional Linguistics.Steedman, M. 1985.
Dependency and Coordination inthe Grammar of Dutch and English.
Language61:523-568.Steedman, M. 1987.
Combinators and Grammars.
Toappear in R. Oehrle, E. Bach, and D.
Wheeler(eds.
), Categorial Grammars and Natural Lan-guage Structures, Dordrecht.Turner, D. 1979.
A New Implementation Techniquefor Applicative Languages.
Software -- Practiceand Experience 9:31-49.Uszkoreit, H. 1986.
Categorial Unification Grammars.In Proceedings of Coling 1986, pp.
187-194.Wittenburg, K. 1985a.
Natural Language Parsing withCombinatory Categorial Grammars in a Graph-Unification-Based Formalism.
Ph.D. disser-tation, University of Texas at Austin.\[Some ofthis material is available through MCC techreports HI-012-86, HI-075-86, and HI-179-86.\]Wittenburg, K. 1986b.
A Parser for Portable NL Inter-faces using Graph-Unification-Based Grammars.79In Proceedings ofAAA/-86, pp.
1053-10,58.Zeevat, H., E. Klein, and J. Calder.
1086.
UnificationCategorisl Grammar.
Centre for CognitiveScience, University of Edinburgh.80
