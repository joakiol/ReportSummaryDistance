The donkey  s t r ikes  backExtending the dynamic interpretation "constructively"Tim Fernandofernando@cwi, nlCentre for Mathematics and Computer ScienceP.O.
Box 4079, 1009 AB Amsterdam, The NetherlandsAbstractThe dynamic interpretation of a formulaas a binary relation (inducing transitions)on states is extended by alternative treat-ments of implication, universal quantifi-cation, negation and disjunction that aremore "dynamic" (in a precise sense) thanthe usual reductions to tests from quanti-fied dynamic logic (which, nonetheless, canbe recovered from the new connectives).
Ananalysis of the "donkey" sentence followedby the assertion "It will kick back" is pro-vided.1 In t roduct ionThe lineIf a farmer owns a donkey he beats it (1)from Geach \[6\] is often cited as one of the success to-ries of the so-called "dynamic" approach to naturallanguage semantics (by which is meant Kamp \[12\],Heim \[9\], Sarwise \[1\], and Groenendijk and Stokhof\[7\], among others).
But add the noteIt will kick back (2)and the picture turns sour: processing (1) may leaveno beaten donkey active.
Accordingly, providing areferent for the pronoun it in (2) would appear tocall for some non-compositional surgery (that mayupset many a squeamish linguist).
The present pa-per offers, as a preventive, a "dynamic" form of im-plication =~ applied to (1).
Based on a "construc-tive" conception of discourse analysis, an overhaulof Groenendijk and Stokhof \[7\]'s Dynamic PredicateLogic (DPI.)
is suggested, although :=~ can also beintroduced less destructively so as to extend DPLconservatively.
Thus, the reader who prefers theold "static" interpretation f (1) can still make thatchoice, and declare the continuation (2) to be "se-mantically ill-formed."
On the other hand, Groe-nendijk and Stokhof \[7\] themselves concede that "atleast in certain contexts, we need alternative xter-nally dynamic interpretations of universal quantifi-cation, implication and negation; a both internallyand externally dynamic treatment ofdisjunction."
Aproposal for such connectives is made below, extend-ing the dynamic interpretation i a manner analo-gous to the extension of classical logic by constructivelogic (with its richer collection of primitive connec-tives), through a certain conjunctive notion of par-allelism.To put the problem in a somewhat general per-spective, let us step back a bit and note that in as-signing a natural language utterance a meaning, it isconvenient to isolate an intermediate notion of (say)a formula.
By taking for granted a translation of theutterance to a formula, certain complexities in natu-ral language can be abstracted away, and semanticscan be understood rigorously as a map from formu-las to meanings.
Characteristic of the dynamic ap-proach mentioned above is the identification of themeaning of a formula A with a binary relation onstates (or contexts) describing transitions A induces,rather than with a set of states validating A.
In thepresent paper, formulas are given by first-order for-mulas, and the target binary relations given by pro-grams.
To provide an account of anaphora in natu-ral language, DPL translates first-order formulas Ar m DPL ro tiff 1 to p ogra s A f m (quan " ed) dynam'c logic(see, for example, Harel \[8\]) as followsA DPL - A?
for atomic A130(A&B) DPL = ADPL; BDPL(~A)DPL --- .., (A DPL)(:Ix A) DPL = :r "-'~ ?
A DPLThe negation --,p of a program p is the dynamic logictest(\[p\] ?)
?with universal and static features (indicated respec-tively by \[p\] and ?
),1 neither of which is intrinsic tothe concept of negation.
Whereas ome notion of uni-versality is essential to universal quantification andimplication (which are formulated through negationVzA = -~3z-~AA D B = -,(A&-~B)and accordingly inherit some properties of negation),our treatment of (2) will be based on a dynamic(rather than static) form =~ of implication.
Dynamicforms of negation ~, universal quantification and dis-junction will also be proposed, but first we focus onimplication.2 The idea in briefThe semantics \[A\] assigned to a first-order formulaA is that given to the program A DP\[ - -  i.e., a binaryrelation on states.
In dynamic logic, states are vabuations; more precisely, the set of states is defined,relative to a fixed first-order model M and a set X ofvariables (from which the free variables of formulasA are drawn), as the set \[M\[x of functions f ,g , .
.
.from X to the universe IMI of M. Atomic programscome in two flavors: tests A?
where A is a formulain the signature of M with free variables from X,and random assignments x :=?
where z E X. Theseare analyzed semantically by a function p taking aX X program p to a binary relation p(p) C IMI x IMIaccording tofp(A?
)g iff f=gandM~A\ [ f \ ]fp(x :=?
)g iff f = g except possibly at x .The programs are then closed under sequential com-position (interpreted as relational composition)fp(p;p')g iff fp(p)h and hp(p')g for some h ,non-deterministic choice (interpreted as union)f p(p + p')g iff f p(p)g or hp(p')g ,and Kleene star (interpreted as the reflexive transiveclosure).
Rather than extending ~ simultaneouslyto formulas built from modalites \[p\] and (p) labelledby programs p, it is sufficient o close the programs1The semantics of dynamic logic is reviewed in thenext section, where what exactly is meant, for example,by %tactic" is explained.under a negation operation interpreted semanticallyas followsfP('~P)g iff f = g and fp(p)h for no h .As previously noted, -~p is equivalent to (\[p\]_l.
)?.Returning to DP1, an implication A D B betweenformulas is interpreted in DP1 by equating it with-~ (A ~ -~B), which is in turn translated into thedynamic logic program-~ (ADPL ; -,(BDPL)).Applying the semantic function p to this then yieldss\[ADB\]t  iff t=s  and(Vs' such that s\[A\]s'), ' \ [B i t ' .
(3)Now, given that a state is a single function from Xto JMJ, it is hardly odd that implication is static(in the sense that the input and output states s andt must be the same), as any number of instantia-tions of s t (and t e) may be relevant o the right handside of (3).
That is, in terms of (1), the difficultyis that there may be several farmer/donkey couples,whereas a state can accomodate only one such pair,rendering an interpretation of (2) problematic.
Toovercome this predicament, he collection of statescan be extended in at least two ways.
(P1) Borrowing and modifying an idea from Kleene\[14\] (and Brouwer, Kolmogorov,...), incorporateinto the final state t a functional witness f tothe V3-clause in the right hand side of (3) toobtains\[Azc, B\]t iff t=(s , f )  andf is a function withdomain {s' \[s\[A\]s'},and (Vs' E dom(f))s'\[B\]f(s') .Or, to simplify the state t slightly, break the con-dition (in the righthand side) up into two mutu-ally exclusive clauses depending on whether ornot the domain of f is emptys\[A=~ Bit iff (t is a function withnon-empty domain{s' J s\[A\]s'} and(Vs' e dom(/))s'\[n\]t(s'))or(t = s and-,3s' s\[A\]s') ,so that closing the notion of a state under a par-tial function space construct becomes ufficient.131i P2) Keep only the image of a functional witness sothat the new (expanded) set of states consistssimply of the old states (i.e, valuations) togetherwith sets of valuations.
More precisely, definesEA~ Bit iff (3 a function f withnon-empty domain{s' l s\[A\]s' } wheret is the collapsedimage of jr and(Vs' ?
dom(jr))s'\[B\]jr(s'))or(t = s and",3s' s\[A\]s').
(4)The "collapsed image of fl',{t' e IMI x I 3s' jr(s t) - - t ' )  UU{e c_ IMI x I _~s' jr(s') = e}) ,is simply the image of jr except hat the sets ofvaluations in the image are "collapsed", so thatthe resulting set has only valuations as elements.
(The collapsing is "justified" by the associativityof conjunction.
)Observe that, in either case, DPL's negation can bederived--A = A=~_L(whence D is also definable from => and &).
Thefirst proposal, (P1), yields a dizzying tower of higher-order functions, in comparison to which, the secondproposal is considerably simpler.
Behind the stepfrom (3) to either proposal is the idea that implica-tion can spawn processes running in parallel.
(Buriedin (3) is the possibility of the input state s branchingoff to a multiplicity of states t'.)
The parallelism hereis "conjunctive" in that a family of parallel processesproceeds along happily so long as every member ofthe family is well; all is lost as soon as one fails.
2More precisely, observe that, under (P2), a naturalclause for s\[A\]t, where s is a set of valuations and Ais an atomic formula, is 3s\[A\]t iff B a function jr : s -*onto t such that(Vs' e s) s'\[Alf(s') .2The notion of parallelism is thus not unlike that ofconcurrent dynamic logic (Peleg \[19\]).
By contrast, thenon-empty) sets of valuations used (e.g., in Fernando\]) to bring out the eliminative character of informationgrowth induced by tests A?
live disjunctively (and dieconjunctively).3A (non-equivalent) alternative iss\[Alt iff (Vs' e s) (3t' e t) s'IAlt' and(Vt' e t) (3s' e s) s'\[AIt',yielding a more promiscuous ontology.
This is studied inFernando \[5\], concerning which, the reader is referred tothe next footnote.
(That is, in the case of (2), every donkey that afarmer beats according to (1) must kick back.)
Asimilar clause must be added to (P1), although tomake the details for (P1) obvious, it should be suffi-cient to focus (as we will) on the case of (P2), wherethe states are structurally simpler.
But then, a fewwords justifying the structural simplification i  (P2)relative to (P1) might be in order.
43 A digression: forgetfulness andinformation growthIf semantic analysis amounts abstractly to a mappingfrom syntactic objects (or formulas) to other math-ematical objects (that we choose to call meanings),then what (speaking in the same abstract erms) isgained by the translation?
Beyond some vague hopethat the meanings have more illuminating structurethan have the formulas, a reason for carrying outthe semantic analysis is to abstract away inessen-tim syntactic detail (with a view towards isolatingthe essential "core").
Thus, one might expect thesemantic function not to be 1-1.
The more generalpoint is that an essential feature of semantic analysisis the process of forgetting what can be forgotten.More concretely, turning to dynamic logic and itssemantic function p, observe that after executinga random assignment x :=?, the previous ( - inputstate) value of x is overwritten (i.e., forgotten) in theoutput state, s Perhaps an even more helpful exampleis the semantic definition of a sequential compositionp; p'.
The intermediate state arising after p but be-fore p' is forgotten by p(p;p') (tracking, as it does,only input/output states).
Should such informationbe stored?
No doubt, recording state histories wouldnot decrease the scope of the account hat can thenbe developed.
It would almost surely increase it, butat what cost?
The simpler the semantic framework,the better - -  all other things being equal, that is(chief among which is explanatory power).
Other-wise, a delicate balance must be struck between thecomplexity of the framework and its scope.
Now,part of the computational intuition underlying dy-namic logic is that at any point in time, a state (i.e.,valuation) embodies all that is relevant about thepast to what can happen in the future.
(In otherwords, the meaning of a program is specified simplyby pairs of input/output states.)
This same intu-ition underlies (P2), discarding (as it does) the wit-4The discussion here will be confined to a somewhatintuitive and informal evel.
A somewhat more techni-cal mathematical ccount is developed at length in Fer-nando \[5\], where (P2) is presented as a reduction of (P1)to a disjunctive normal form (in the sense of the "con-junctive" and "disjunctive" notions of parallelism alreadymentioned).5It should, in fairness, be pointed out that Vermeulen\[22\] presents a variant of dynamic logic directed towardsrevising this very feature.132ness function tracing processes back to their "roots.
"(Forgetting that spawning record would seem to beakin to forgetting the intermediate state in a sequen-tial composition p; p~.)
Furthermore, for applicationsto natural language discourse, forgetfulness wouldappear quite innocuous if the information contentof a state increases in the course of interpreting dis-course (so that all past states have no more infor-mation content han has the current state).
And itis quite natural in discourse analysis to assume thatinformation does grow.Consider the following claim in an early paper(Karttunen \[13\]) pre-occupied with a problem (viz.,that of presuppositions) that may appear peripheralto (1) or (2), but is nonetheless fundamental to the"constructive" outlook on which =?, is basedThere are definitions of pragmatic presup-position ... which suggest that there issomething amiss in a discourse that doesnot proceed in \[an\] ideal orderly fashion .
.
.
.All  things considered, this is an unreason-able view .
.
.
.
People do make leaps andshortcuts by using sentences whose presup-positions are not satisfied in the conversa-tional context.
This is the rule rather thanthe exception, and we should not base ournotion of presupposition on the false pre-miss that it does not or should not happen.But granting that ordinary discourse is notalways fully explicit in the above sense, Ithink we can maintain that a sentence isalways taken to be an increment o a con-te~:t that satisfies its presuppositions.
\[p.191, italics added\]To bring out an important dimension of "incrementto a context", and at the same time get around thedestruction of information in DPL by a random as-signment, we will modify the translation .DPI.
(map-ping first-order formulas into programs) slightly intoa translation .~, over which (P2) will be worked out(though the reader should afterwards have no dif-ficulty carrying out the similar extension to DPI.
).The modification is based (following Fernando \[4\],and, further back, Barwise \[1\]) on (i) a switch fromvaluations defined on all variables to valuations de-fined on only finitely many variables, and on (ii) theuse of guarded assignments x := * (in place of ran-dom assignments), given by=z?
+ -~(z=z?
);  ~:=?,which has the effect of assigning a value to x pre-cisely when initially z is unbound (in which easethe test z = z?
fails).
Note that (i) spoils biva-lence, which is to say that certain presuppositionsmay fail.
6 Accordingly, our translation R(~) ~ of anSTo what extent an account of presuppositions canbe based on the break down in bivalence resulting fromatomic formula R(~) to a program must first attendto presuppositions by plugging truth gaps throughguarded assignments, before testing R(~)= ?
:=  ?
; (5 )(where ?
:-- ?
abbreviates xl := * ; .
.
.
; z~ := ?
for= z l , .
.
.
, xk ) .
To avoid clashes with variablesbound by quantifiers, the latter variables might bemarked(3x A)  e = YA,z : - ' *  ; A\[yA,~/x\] e , (6)the idea being to sharpen (5) by translating atomicformulas R(~, y, ~) with unmarked variables 3, andmarked variables y, ~ (for 3 and V respectively) asfollows= := ?
; (7 )Note that to assert a formula A is not simply to testA, but also to establish A (if this is at all possible).Establishing not A is (intuitively) different from test-ing (as in DPL) that A cannot be established.
7 Anegation ,-, reflecting the former is described next,avoiding an appeal to a modal notion (hidden in -~by writing --,p instead of (\[p\]_l_)?
).4 Working out the idea formallyStarting over and proceeding a bit more rigorouslynow, given a first-order signature L, throw in, forevery n-ary predicate symbol R E L, a fresh n-arypredicate symbol/~ and extend the map : to thesesymbols by setting R = R. Then, interpret/~ in anL-structure M as the complement of R/~M _ IM I ' -R  M.So, without loss of generality, assume that we areworking with a signature L equipped with such amap :, and let M be an L-model obeying the com-plementarity condition above (readily expressible inthe first-order language).
Fix a countable set X0 ofvariables, and define two fresh (disjoint) sets Y andZ of "marked" variables inductively simultaneouslywith a set ~ of L-formulas (built from &, V, V, 3 and=~) as follows(i) T, _1_ and every atomic L-formula with free vari-ables from Xo U Y U Z is in(ii) if A and B are in ~, then so are A&B,  A V Band A ~ B(iii) for every ("unmarked") z E X0, if A E ?, thenVz A and 3z A belong touninitialized variables will not be taken up here.
The in-terested reader is referred to Fernando \[4\] for an internalnotion of proposition as an initial step towards this end.7As detailed in Fernando \[4\], this distinction c~nbe exploited to provide an account of Veltman \[21\]'smight operator as -1--.
relative to an internal notion ofproposition.133(iv) for every x E X0, if A E 4, then the fresh("marked") variables YA,, and za,, belong toY and Z respectively.Next, define a "negation" map ,-~ ?
on ~ by, - ,T  = 1.~ .L  = T~ R(~,~,-~) = R(~,~,-~).~(A&B) = ,,,A V , .
,B,~(AVB)  = ,-~A &,,~B(VxA) = 3x ,-~A-~(3xA) = Vx ,,-A~(A::# B) = A & NB .This approach, going back at least to Nelson \[17\] (aparticularly appropriate reference, given its connec-tion with Kleene \[14\]), treats positive and negativeinformation in a nearly symmetric fashion; on for-mulas in ~ without an occurrence of ::~, the function,~N.
is the identity.
Furthermore, were it not for:V, our translation -~ would map formulas in (~ toprograms interpreted as binary relations onSo = {s \[ s is a function froma finite subset of X to IMI} ,where X is the full set of marked an unmarked vari-ablesX = XoUYUZ.All the same, the clauses for s\[A\]t can be formulateduniformly whether or not s E So, so long as it isunderstood that for a set s of valuations, u E X, andatomic A,sp(u := , ) t  iff 3 a function f : s --*~,o t suchthat (Vs' e s) s' p(u := *)f(s ' )sp(A?
)t iff ~ = s and (Ys' 6. s) s'p(A?
)s' .
(These clauses are consistent with the intuition de-scribed in section 2 of a "conjunctive" family of pro-cesses running in parallel.)
The translation .e is thengiven by (7),(A&B) e = A ' ;B  e(AVB)  e = Ae+B e ,(6) and (4), with IMI x replaced by So.
All thatis missing is the clause for universal quantificationVx A, which (following Kleene \[14\]) can be inter-preted essentially as zA,~ = ZA,~: ~ A\[ZA,x/X\], ex-cept that in the antecedent, ZA,,: is treated as un-markeds~/x Air iff t is the collapsed image ofa function f with domain{s' I sp( A,  := ,)s'} suchthat (Vs' e dom(f))s'\[A\[zA,x/z\]\]f(s') .The reader seeking the definition of \[A\] spelled outin full is referred to the appendix.Observe that non-deterministic choice + (forwhich DPL has no use) is essential for defining N.Strong negation ,,, is different from -% and lacks theuniversal force necessary to interpret implication (ei-ther as ,,~ (.& ~ .))
or as -V ,~ .).
On the other hand,--A can be recovered as A =~ .L, whence static impli-cation D is also derivable.
Note also that an elements of So can be identified with {s}, yielding states ofa homogeneous form.5 A few examplesThe present work does not rest on the claim that thedisorderly character of discourse mentioned above byKarttunen \[13\] admits a compositional translation toa first-order formula.
The problem of translating anatural language utterance to a first-order formula(e.g., assigning a variable to a discourse marker) isessentially taken for granted, falling (as it does) out-side the scope of formal semantics (conceived as afunction from formulas to meanings).
This affordsus considerable freedom to accomodate various in-terpretations.
The donkey sentence (1) can be for-mulated as_ srCx) o sCx, y) ao eyCy)beats(x, y)or given an alternative "weak" readingf~,-~er(z) a o~s(z ,  z) & do~key(z)::>y) doPey(y) beat (x, y)so that not every donkey owned by a farmer need bebeaten (Chierchia \[2\]).
In either case, the pay back(2) can be formulated askicks-back(y, x) .A further alternative that avoids presupposing theexistence of a donkey is to formulate (1) and (2) aso s(x, y) do sy(y)beat-(x, y) kick -baek(y, x),observing that\[(A=> B)&C\] ~ \[A => (B&C) \ ] .N ext,nendijk and Stokhof \[7\]If a client turns up, you treat him politely.You offer him a cup of coffee and askhim to wait.Every player chooses a pawn.
He puts itwe consider a few examples from Groe-(8)134on square one.It is not true that John doesn't own a car.It is red, and it is parked in front of hishouse.Either there is no bathroom here, or itis a funny place.
In any case, it is noton the first floor.Example (8) can be formulated asclient(z) turns-up(z)treat-polit ely(y, x)(9)(10)(11)followed byo  er-co  ee(y,z) as -to-.ait(y,z),and (9) asp layer(z)  ::~ ehoose(z,y) & pawn(y)followed byput-on-sqaare-on~x, y) .The double negation in (10) can be analyzed ynam-ically using - ,~.
,  and (11) can be treated asbathroom(z) :~ -here(x) V funny-placefollowed by~on-first-floo~z) ,where, in this case, the difference between -,, and -~is immaterial.Groenendijk and Stokhof \[7\] suggest equating (notA) implies B, in its dynamic form, with A V B. Toallow not A to be dynamic, not should not be inter-preted as ~.
But even (-~ A) =:~ B is different fromA V B, as the non-determinism in A V B is lost in(,,~ A) :?.
B, and :=~ may lead to structurally morecomplex states (?
So).
What is true is that,,~,,~ ((NA) :=~ B) = ,,, ((~A) & ~B)= (-,,~A) V ,~,~Bwhich reduces to A V B if ~ occurs neither in Anor B.
Whereas the translation -~-~.
yields a staticapproximation, the translation ~,-,-, applied recur-sively, projects to an approximation that is a binaryrelation on So.Notice that quantifers do not appear in the trans-lations above of natural language utterances intofirst-order formulas.
The necessary quantification isbuilt into the semantic analysis of quantifier-free for-mulas, following the spirit (if not the letter) of Paginand Westerst?hl \[18\].
(A crucial difference, of course,is that the universal quantification above arises froma dynamic =~.)
The reader interested in composi-tionality should be pleased by this feature, insofar asquantifer-free formulas avoid the non-compositionalrelabelling of variables bound by quantifiers (in thesemantic analysis above of quantified formulas).6 Concern ing  cer ta in  po in tsThe present paper is admittedly short on linguisticexamples - -  a defect that the author hopes somesympathetic reader (better qualified than he) willcorrect.
Towards this end, it may be helpful to takeup specific points (beyond the need for linguistic ex-amples) raised in the review of the work (in the formit was originally submitted to EACL).Referee 1.
What are the advantages over expla-nations of the anaphoric phenomenon i question interms of discourse structure which do not require achange of the formal semantics apparatus?The "anaphoric phenomenon i question" amounts,under the analysis of first-order formulas as pro-grams, to the treatment of variables across ententialboundaries.
A variable can have existential force, asdoes the farmer inA farmer owns a donkey,or universal force, as does the farmer inEvery farmer owns a donkey.Taking the "the formal semantics apparatus" tobe dynamic logic, DPL treats existential variablesthrough random assignments.
The advantage of theproposal(s) above is the treatment of universal vari-ables across sentential variables, based on an exten-sion of dynamic logic with an implication connective(defined by (4), if A and B are understood as pro-grams).
(Note that negation and disjunction can beanalyzed ynamically already within dynamic logic.
)Referee 2.
Suggestions for choosing between thestatic/dynamic versions would enhance the useful-ness of the framework.Choose the dynamic version.
Matching discourseitems with variables is, afterall, done by magic,falling (as it does) outside the scope of DPL or Dis-course Representation Theory (DRT, Kamp \[12\]).But the reader may have good reason to object.P rogramme Commit tee .
A comparison to aDRT-style semantics should be added.Yes, the author would like to describe the discourserepresentation structures (DRS's) for the extensionto higher-order states above.
Unfortunately, he doesnot (at present) know how to.
s Short of that, itmay be helpful to present he passage to states thatare conjunctive sets of valuations in a different light.Given a state that is a set s of valuations l, s~,...,let X, be the set of variables in the domain of somesi GsX, = U dom(si).siEsSSome steps (related to footnote 4) towards that di-rection are taken in Fernando \[5\].
Another approacb,somewhat more syntactic in spirit, would be to build onK.
Fine's arbitrary objects (Meyer Viol \[15\]).135Now, s can be viewed as a set F, of functions f~labelled by variables z E X, as follows.
Let f~ bethe map with domain {si e s \[ z e dom(si)} thatsends such an si to si(z).
In pictures, we pass fromtoI st :dl~ct 1 s = s2:d2--+c2{ f~ l :{s i~s lz t~d i}__+Cl  }F, -- f~2 : {si E s I z2 E di} -.-* c2 ,so that the step from states sl ,s2,.
.
,  in So to themore complicated states s in Power(S0) amounts toa semantic analysis of variables as functions, ratherthan as fixed values from the underlying first-ordermodel.
(But now what is the domain of such a func-tion?)
The shift in point of view here is essentiallythe "ingenious little trick" that Muskens \[16\] (p. 418)traces back to Janssen \[11\] of swapping rows withcolumns.
We should be careful to note, however,that the preceding analysis of variables was carriedout relative to a fixed state s - -  a state s that isto be supplied as an argument to the partial binaryfunctions globally representing the variables.Finally, A. Visser and J. van Eijck have suggestedthat a comparison with type-theoretic and game-theoretical semantics (e.g., Ranta \[20\] and Hintikkaand Kulas \[10\]) is in order.This again is no simple matter to discuss, and (alas)fails somewhat beyond the scope of the present pa-per.
For now, suffice it to say that (i) the trans-lation ?
e above starts from first-order formulas, onwhich (according to Ranta \[20\], p. 378) the game-theoretic "truth definition is equivalent to the tra-ditional Tarskian one", and that (ii) the use of con-structive logic in Ranta \[20\] renders the reductionfrom the proposal (P1) to (P2) (described in section2) implausible inasmuch as that represents a (con-structively unsound) transformation to a disjunctivenormal form (referred to in footnote 4).
But whatabout constructiveness?7 Between const ruct ion  and  t ru thHaving passed somewhat hastily from (P1) to (P2),the reader is entitled to ask why the present au-thor has bothered mentioning realizability (allud-ing somewhat fashionably or unfashionably to "con-structiveness") and has said nothing about (classical)modal ogic-style formalizations (e.g., Van Eijck andDe Vries \[3\]), building say on concurrent dynamiclogic (Peleg \[19\]).
A short answer is that the con-nection with so-called and/or computations came tothe author only after trying to understand the inter-pretation of implication in Kleene \[14\] (interpretingimplication as a program construct being nowheresuggested in Peleg \[19\], which instead introduces a"conjunction" fl on programs).
A more serious an-swer would bring up his attitude towards the moreinteresting questiondoes all talk about so-called dynamicsemantics come to modal logic?The crazy appeal dynamic semantics exerts on theauthor is the claim that a formula (normally con-ceived statically) is a program (i.e., something dy-namic); showing how a program can be understoodstatically is less exciting.
Some may, of course, findthe possibility of "going static" as well as "going dy-namic" comforting (if not pleasing).
But if reduc-ing dynamic semantics to static truth conditions isto complete that circle, then formulas must first betranslated to programs.
And that step ought not tobe taken completely for granted (or else why bothertalking about "dynamic semantics").
Understandinga computer program in a precise (say "mathemati-cal") sense is, in principle, to be expected insofaras the states through which the computer programevolves can be examined.
If a program can be im-plemented in a machine, then it has a well-definedoperational semantics that, moreover, is subject (insome sense or another) to Church's thesis.
In thatsense, understanding a computer program relativeto a mathematical world of eternal truths and staticformulas is not too problematic.
Not too problem-atic, that is, when compared to natural language,for which nothing like Church's thesis has gained ac-ceptance.
To say thatnatural anguage is a programming languageis outrageous (- -  perhaps deliberately so --),  andthose of us laboring under this slogan must admitthat we do not know how to translate an Englishsentence into a FORTRAN program (whatever thatmay mean).
Nor, allowing for certain abstractions,formulas into programs.
Furthermore, a favorite toytranslation, DPL, goes beyond ordinary computabil-ity (and FORTRAN) when interpreted over the nat-ural numbers.
(The culprit is --.)
Not that theidea of a program must necessarily be understoodin the strict sense of ordinary recursion theory.
Butsome sensitivity to matters relating to computation("broadly construed") is surely in order when speak-ing of programs.It was the uncomputable character of DPL's nega-tion and implication that, in fact, drove the presentwork.
Strong negation ,~ is, from this standpoint,a mild improvement, but it would appear that thesituation for implication has only been made morecomplicated.
This complication can be seen, how-ever, as only a first step towards getting a handle onthe computational character of the programs usedin interpreting formulas dynamically.
Whether moreeffective forms of realizability (incorporating, as was136originally conceived, some notion of construction orproof into the witnessing by functions) can shed anyhelpful light on the idea of dynamic semantics isan open question.
That realizability should, crazilyenough, have anything to say whatsoever about a lin-guistic problem might hearten those of us inclined toinvestigate the matter.
(Of course, one might takethe easy way out, and simply restrict =~ to finitemodels.
)Making certain features explicit that are typicallyburied in classical ogic (such as the witness to theV3-clause in ::~) is a characteristic practice of con-structive mathematics that just might prove fruit-ful in natural language semantics.
A feature thatwould seem particularly relevant to the intuition thatdiscourse interpretation amounts to the constructionof a context is information growth.
9 The extensionof the domain of a finite valuation is an importantaspect of that growth (as shown in Fernando \[4\],appealing to Henkin witnesses, back-and-forth con-structions, ...).
The custom in dynamic logic of re-ducing a finite valuation to the set of its total ex-tensions (relative to which a static notion of truth isthen defined) would appear to run roughshod overthis feature - -  a feature carefully employed above todraw a distinction between establishing and testinga formula (mentioned back at the end of section 3).But returning to the dynamic implication ::~ intro-duced above, observe that beyond the loss of struc-ture (and information) in the step from (P1) to (P2),it is possible within (P2) (or, for that matter, within(P1)) to approximate =~ by more modest extensions.There is, for instance, the translation -,~,,~ ?
(not tobe confused with -----) which (in general) abstractsaway structure with each application.
The interpre-tation of implication can be simplified further by not-ing that --Tr can be recovered as ~r =V .1_, and thus thestatic implication D of DPI.
can be derived from ::~.Reflecting on these simplifications, it is natural toask what structure can dynamic semantics afford toforget?Is there more structure lurking behindconstruction than concerns truth?With the benefit of the discussion above aboutthe dual (establishing/testing) nature of asserting aproposition - -  or perhaps even without being sub-jected to all that babble - - ,  surely we can agree thatStory-telling requires more imaginationthan verifying facts.9The idea that information grows during the run ofa typical computer program is, by comparison, not soclear.
One difference is that whereas guarded assign-ments would seem sufficient for natural anguage appli-cations, a typical computer program will repeatedly as-sign different values to the same variable.
To pursue thematter further, the reader may wish to (again) consultVermeulen \[22\].AcknowledgmentsMy thanks to J. van Eijck and J. Ginzburg forcriticisms of a draft, to K. Vermeulen, W. Meyer-Viol, A. Visser, P. Blackburn D. Beaver, and M.Kanazawa for helpful discussions, and to the con-ference's anonymous referees for various suggestions.Appendix: (P2) fleshed out withoutproseFix a first-order model M and a set X of vari-ables partitioned between the unmarked (x , .
.
. )
andmarked (y , .
.
.
and z , .
.
.
for existential and universalquantification, respectively).
(It may be advisable toignore the marking of variables, and quantified for-mulas; see section 5 for some examples.)
Let So bethe set of functions defined on a finite subset of X,ranging over the universe of M. Given a sequenceof variables ux , .
.
.
,  u,, in X, define the binary rela-tion p(~ := *) on s and t E So U Power(So) bysp(~:=*)t iff ( sESo ,  teSo ,  t _Dsanddom(t) = dom(s) U {ul , .
.
.
,  u,})or(s ~ So and3 a function f : s --'o,~to t suchthat (Vs r E s) s'p(~ := *)f(s~)) .L-formulas A from the set @ defined in section 3 areinterpreted semantically by binary relations~'A\] C (So U Power(so))x(So u Power(S0))according to the following clauses, understood induc-tivelysl\[n(~,y,~)\]t iff (s E So , sp('~ : -  . )
tand M ~ nit\])or(3 a function f froms onto t such that(Vs' e s)s'\[R(~,y,-~\]f(s'))s\[A&S\]t iff s\[A\]\]u and u\[B\]t forsome us\[A V B\]t iff s\[A\]\]t or s\[B\]ts~/x A\]\]t iff t is the collapsed imageof a function f withdomain{s' I sp(zA,.
:= ,)s'}such that(Vs' e dom(/))s'\[A\[za,o:/x\]\]f(s')s\[3x A\]t iff sp(YA,~ :=*)u  and137u~A\[yA,~/x\]\]t forsome us\[A ~ B\]t iff (3 afunction f withnon-empty domain{s' i s\[A\]s'} wheret is the collapsedimage of f and(Vs' e dora(f))s'\[Blf(s'))or(t = s and-,Bs' s\[A\]s') ,and, not to forget negation,s\[T\]t iff s=ts\[?\]t iff you're a donkey(in which case you are free to derive anything).References\[1\] Jon Barwise.
Noun phrases, generalized quan-tifiers and anaphora.
In E. Engdahl andP.
G~denfors, editors, Generalized Quantiflers,Studies in Language and Philosophy.
Dordrecht:Rediel, 1987.\[2\] G. Chierchia.
Anaphora and dynamic logic.ITLI Prepublication, University of Amsterdam,1990.\[3\] J. van Eijck and F.J. de Vries.
Dynamic inter-pretation and Hoare deduction.
J.
Logic, Lan-guage and Information, 1, 1992.\[4\] Tim Fernando.
Transition systems and dynamicsemantics.
In D. Pearce and G. Wagner, edi-tors, Logics in AI, LNCS 633 (subseries LNAI).Springer-Verlag, Berlin, 1992.
A slightly cor-rected version has appeared as CWI Report CS-R9217, June 1992.\[5\] Tim Fernando.
A higher-order xtension of con-straint programming in discourse analysis.
Po-sition paper for the First Workshop on Princi-ples and Practice of Constraint Programming(Rhode Island, April 1993).\[6\] P.T.
Geach.
Reference and Generality: an Ex-amination of Some Medieval and Modern The-ories.
Cornell University Press, Ithaca, 1962.\[7\] J. Groenendijk and M. Stokhof.
Dynamic predi-cate logic.
Linguistics and Philosophy, 14, 1991.\[8\] David Hard.
Dynamic logic.
In D. Gabbay andF.
Guenthner, editors, Handbook of Philosophi-cal Logic, Volume 2.
D. Reidel, 1984.\[9\] Irene Heim.
The semantics of definite and in-definite noun phrases.
Dissertation, Universityof Massachusetts, Amherst, 1982.\[10\] J. Hintikka and J. Kulas.
The Game of Lan-guage.
D. Reidel, Dordrecht, 1983.\[11\] Theo Janssen.
Foundations and Applications ofMontague Grammar.
Dissertation, University ofAmsterdam (published in 1986 by CWI, Ams-terdam), 1983.\[12\] \].A.W.
Kamp.
A theory of truth and semanticrepresentation.
In J. Groenendijk et.
al., edi-tors, Formal Methods in the Study of Language.Mathematical Centre Tracts 135, Amsterdam,1981.\[13\] Lauri Karttunen.
Presupposition and linguisticcontext.
Theoretical Linguistics, pages 181-194,1973.\[14\] S.C. Kleene.
On the interpretation of intuition-istic number theory.
J.
Symbolic Logic, 10, 1945.\[15\] W.P.M.
Meyer Viol.
Partial objects and DRT.In P. Dekker and M. Stokhof, editors, Proceed-ings of the Eighth Amsterdam Colloquium.
In-stitute for Logic, Language and Computation,Amsterdam, 1992.\[16\] Reinhard Muskens.
Anaphora and the logic ofchange.
In J. van Eijck, editor, Logics in AI:Proc.
European Workshop JELIA '90.
Springer-Verlag, 1991.\[17\] David Nelson.
Constructible falsity.
Y. SymbolicLogic, 14, 1949.\[18\] P. Pagin and D. Westerst?hl.
Predicate logicwith flexibly binding operators and natural an-guage semantics.
Preprint.\[19\] David Peleg.
Concurrent dynamic logic.
J. As-soc.
Computing Machinery, 34(2), 1987.\[20\] Aarne Ranta.
Propositions as games as types.Synthese, 76, 1988.\[21\] Frank Veltman.
Defaults in update semantics.In J.A.W.
Kamp, editor, Conditionals, Defaultsand Belief Revision.
Edinburgh, Dyana deliver-able R2.5.A, 1990.\[22\] C.F.M.
Vermeulen.
Sequence semantics for dy-namic logic.
Technical report, Philosophy De-partment, Utrecht, 1991.
To appear in J. Logic,Language and Information.138
