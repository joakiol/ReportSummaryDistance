Proceedings of the ACL-HLT 2011 System Demonstrations, pages 109?114,Portland, Oregon, USA, 21 June 2011. c?2011 Association for Computational LinguisticsSystemT: A Declarative Information Extraction SystemYunyao LiIBM Research - Almaden650 Harry RoadSan Jose, CA 95120yunyaoli@us.ibm.comFrederick R. ReissIBM Research - Almaden650 Harry RoadSan Jose, CA 95120frreiss@us.ibm.comLaura ChiticariuIBM Research - Almaden650 Harry RoadSan Jose, CA 95120chiti@us.ibm.comAbstractEmerging text-intensive enterprise applica-tions such as social analytics and semanticsearch pose new challenges of scalability andusability to Information Extraction (IE) sys-tems.
This paper presents SystemT, a declar-ative IE system that addresses these challengesand has been deployed in a wide range of en-terprise applications.
SystemT facilitates thedevelopment of high quality complex annota-tors by providing a highly expressive languageand an advanced development environment.It also includes a cost-based optimizer and ahigh-performance, flexible runtime with mini-mummemory footprint.
We present SystemTas a useful resource that is freely available,and as an opportunity to promote research inbuilding scalable and usable IE systems.1 IntroductionInformation extraction (IE) refers to the extractionof structured information from text documents.
Inrecent years, text analytics have become the driv-ing force for many emerging enterprise applicationssuch as compliance and data redaction.
In addition,the inclusion of text has also been increasingly im-portant for many traditional enterprise applicationssuch as business intelligence.
Not surprisingly, theuse of information extraction has dramatically in-creased within the enterprise over the years.
Whilethe traditional requirement of extraction quality re-mains critical, enterprise applications pose severaltwo challenges to IE systems:1.Scalability: Enterprise applications operateover large volumes of data, often orders ofmagnitude larger than classical IE corpora.
AnIE system should be able to operate at thosescales without compromising its execution ef-ficiency or memory consumption.2.Usability: Building an accurate IE system isan inherently labor intensive process.
There-fore, the usability of an enterprise IE system interms of ease of development and maintenanceis crucial for ensuring healthy product cycleand timely handling of customer complains.Traditionally, IE systems have been built from in-dividual extraction components consisting of rulesor machine learning models.
These individual com-ponents are then connected procedurally in a pro-gramming language such as C++, Perl or Java.
Suchprocedural logic towards IE cannot meet the increas-ing scalability and usability requirements in the en-terprise (Doan et al, 2006; Chiticariu et al, 2010a).Three decades ago, the database community facedsimilar scalability and expressivity challenges inaccessing structured information.
The communityaddressed these problems by introducing a rela-tional algebra formalism and an associated declar-ative query language SQL.
Borrowing ideas fromthe database community, several systems (Doan andothers, 2008; Bohannon and others, 2008; Jain et al,2009; Krishnamurthy et al, 2008; Wang et al, 2010)have been built in recent years taking an alternativedeclarative approach to information extraction.
In-stead of using procedural logic to implement the ex-traction task, declarative IE systems separate the de-scription of what to extract from how to extract it,allowing the IE developer to build complex extrac-109Development EnvironmentOptimizerRules(XQL)ExecutionEngineSampleDocumentsRuntimeEnvironmentunti environ entInputDocumentStreamAnnotatedDocumentStreamPlan(Algebra)UserInterfacePublishFigure 1: Overview of SystemTtion programs without worrying about performanceconsiderations.In this demonstration, we showcase one suchdeclarative IE system called SystemT, designedto address the scalability and usability challenges.We illustrate how SystemT, currently deployed ina multitude of real-world applications and com-mercial products, can be used to develop andmaintain IE annotators for enterprise applica-tions.
A free version of SystemT is available athttp://www.alphaworks.ibm.com/tech/systemt.2 Overview of SystemTFigure 1 depicts the architecture of SystemT.
The sys-tem consists of two major components: the DevelopmentEnvironment and the Runtime Environment.
The Sys-temT Development Environment supports the iterativeprocess of constructing and refining rules for informationextraction.
The rules are specified in a declarative lan-guage called AQL (F.Reiss et al, 2008).
The Develop-ment Environment provides facilities for executing rulesover a given corpus of representative documents and vi-sualizing the results of the execution.
Once a developeris satisfied with the results that her rules produce on thesedocuments, she can publish her annotator.Publishing an annotator is a two-step process.
First,given an AQL annotator, there can be many possiblegraphs of operators, or execution plans, each of whichfaithfully implements the semantics of the annotator.Some of the execution plans are much more efficient thanothers.
The SystemT Optimizer explores the space ofthe possible execution plans to choose the most efficientone.
This execution plan is then given to the SystemTRuntime to instantiate the corresponding physical oper-ators.
Once the physical operators are instantiated, thecreate view Phone asextract regex /\d{3}-\d{4}/ on D.text as numberfrom Document D;create view Person asextract dictionary ?firstNames.dict?
on D.text as namefrom Document D;create view PersonPhoneAll asselect CombineSpans(P.name, Ph.number) as matchfrom Person P, Phone Phwhere FollowsTok(P.name, Ph.number, 0, 5);create view PersonPhone asselect R.name as namefrom PersonPhoneAll Rconsolidate on R.name;output view PersonPhone;Figure 2: An AQL program for a PersonPhone task.SystemT Runtime feeds one document at a time throughthe graph of physical operators and outputs a stream ofannotated documents.The decoupling of the Development and Runtime en-vironments is essential for the flexibility of the system.
Itfacilitates the incorporating of various sophisticated toolsto enable annotator development without sacrificing run-time performance.
Furthermore, the separation permitsthe SystemT Runtime to be embedded into larger appli-cations with minimum memory footprint.
Next, we dis-cuss individual components of SystemT in more details(Sections 3 ?
6), and summarize our experience with thesystem in a variety of enterprise applications (Section 7).3 The Extraction LanguageIn SystemT, developers express an information extrac-tion program using a language called AQL.
AQL is adeclarative relational language similar in syntax to thedatabase language SQL, which was chosen as a basis forour language due to its expressivity and familiarity.
AnAQL program (or an AQL annotator) consists of a set ofAQL rules.In this section, we describe the AQL language andits underlying algebraic operators.
In Section 4, we ex-plain how the SystemT optimizer explores a large spaceof possible execution plans for an AQL annotator andchooses one that is most efficient.3.1 AQLFigure 2 illustrates a (very) simplistic annotator of rela-tionships between persons and their phone number.
At ahigh-level, the annotator identifies person names using asimple dictionary of first names, and phone numbers us-ing a regular expression.
It then identifies pairs of Personand Phone annotations, where the latter follows the110former within 0 to 5 tokens, and marks the corre-sponding region of text as a PersonPhoneAll annota-tion.
The final output PersonPhone is constructed byremoving overlapping PersonPhoneAll annotations.AQL operates over a simple relational data modelwith three data types: span, tuple, and view.
In thisdata model, a span is a region of text within a doc-ument identified by its ?begin?
and ?end?
positions,while a tuple is a list of spans of fixed size.
A viewis a set of tuples.
As can be seen from Figure 2,each AQL rule defines a view.
As such, a view is thebasic building block in AQL: it consists of a logicaldescription of a set of tuples in terms of the docu-ment text, or the content of other views.
The inputto the annotator is a special view called Documentcontaining a single tuple with the document text.The AQL annotator tags some views as output views,which specify the annotation types that are the finalresults of the annotator.The example in Figure 2 illustrates two of thebasic constructs of AQL.
The extract statementspecifies basic character-level extraction primitives,such as regular expressions or dictionaries (i.e.,gazetteers), that are applied directly to the docu-ment, or a region thereof.
The select statementis similar to the corresponding SQL statement, butcontains an additional consolidate on clausefor resolving overlapping annotations, along with anextensive collection of text-specific predicates.To keep rules compact, AQL also allows a short-hand pattern notation similar to the syntax of theCPSL grammar standard (Appelt and Onyshkevych,1998).
For example, the PersonPhoneAll viewin Figure 2 can also be expressed as shown below.Internally, SystemT translates each of these extractpattern statements into one or more select and ex-tract statements.create view PersonPhoneAll asextract pattern<P.name> <Token>{0,5} <Ph.number>from Person P, Phone Ph;SystemT has built-in multilingual support in-cluding tokenization, part of speech and gazetteermatching for over 20 languages using IBM Lan-guageWare.
Annotator developers can utilize themultilingual support via AQLwithout having to con-figure or manage any additional resources.
In ad-dition, AQL allows user-defined functions in a re-firstNames.dictDocumentInput Tuple?I?ve seen John and Martin, ?Output Tuple 2 Span 2Document Span 1Output Tuple 1 DocumentDictionaryPerson(?Anna?, ?John?, ?Martin?, ?
)Figure 3: Dictionary Extraction Operatorstricted context in order to support operations suchas validation or normalization.
More details on AQLcan be found in the AQL manual (Chiticariu et al,2010b).3.2 Algebraic Operators in SystemTSystemT executes AQL rules using graphs of op-erators.
These operators are based on an algebraicformalism that is similar to the relational algebraformalism, but with extensions for text processing.Each operator in the algebra implements a singlebasic atomic IE operation, producing and consum-ing sets of tuples (i.e., views).Fig.
3 illustrates the dictionary extraction operatorin the algebra, which performs character-level dic-tionary matching.
A full description of the 12 differ-ent operators of the algebra can be found in (F.Reisset al, 2008).
Three of the operators are listed below.?
The Extract operator (E) performs character-level operations such as regular expression anddictionary matching over text, producing one tu-ple for each match.?
The Select operator (?)
takes as input a set oftuples and a predicate to apply to the tuples, andoutputs all tuples that satisfy the predicate.?
The Join operator (??)
takes as input two sets oftuples and a predicate to apply to pairs of tuples.It outputs all pairs satisfying the predicate.Other operators include PartOfSpeech for part-of-speech detection, Consolidate for removingoverlapping annotations, Block and Group forgrouping together similar annotations occurringwithin close proximity to each other, as well as ex-pressing more general types of aggregation, Sort forsorting, and Union and Minus for expressing setunion and set difference, respectively.111Person PhonePlan BPlan A Find matches of Person, then discard matches that are not followed by a Phone?
?
?dictFind matches of Person and Phone, then identify pairs that are within 0 to 5 tokens of each otherPlan CFind matches of Phone, then discard matches that are not followed by a Person?
?regexFigure 4: Execution strategies for PersonPhoneAll inFig.
24 The OptimizerGrammar-based IE engines such as (Boguraev,2003; Cunningham et al, 2000) place rigid restric-tions on the order in which rules can be executed.Such systems that implement the CPSL standard orextensions of it must use a finite state transducer toevaluate each level of the cascade with one or moreleft to right passes over the entire input token stream.In contrast, SystemT uses a declarative approachbased on rules that specify what patterns to extract,as opposed to how to extract them.
In a declarativeIE system such as SystemT the specification of anannotator is completely separate from its implemen-tation.
In particular, the system does not place ex-plicit constraints on the order of rule evaluation, nordoes it require that intermediate results of an anno-tator collapse to a fixed-size sequence.As shown in Fig.
1, the SystemT engine doesnot execute AQL directly; instead, the SystemTOptimizer compiles AQL into a graph of operators.Given a collection of AQL views, the optimizer gen-erates a large number of different operator graphs,all of which faithfully implement the semantics ofthe original views.
Even though these graphs alwaysproduce the same results, the execution strategiesthat they represent can have very different perfor-mance characteristics.
The optimizer incorporatesa cost model which, given an operator graph, esti-mates the CPU time required to execute the graphover an average document in the corpus.
This costmodel allows the optimizer to estimate the cost ofeach potential execution strategy and to choose theone with the fastest predicted running time.Fig.
4 presents three possible execution strategiesfor the PersonPhoneAll rule in Fig.
2.
If the opti-mizer estimates that the evaluation cost of Person ismuch lower than that of Phone, then it can determinethat Plan B has the lowest evaluation cost amongthe three, because Plan B only evaluates Phone inthe ?right?
neighborhood for each instance of Per-son.
More details of our algorithms for enumeratingplans can be found in (F.Reiss et al, 2008).The optimizer in SystemT chooses the best exe-cution plan from a large number of different algebragraphs available.
Depending on the execution plangenerated by the optimizer, SystemT may evaluateviews out of order, or it may skip evaluating someviews entirely.
It may share work among views orcombine multiple equivalent views together.
Evenwithin the context of a single view, the system canchoose among several different execution strategieswithout affecting the semantics of the annotator.This decoupling is possible because of the declar-ative approach in SystemT, where the AQL rulesspecify only what patterns to extract and not how toextract them.
Notice that many of these strategiescannot be implemented using a transducer.
In fact,we have formally proven that within this large searchspace, there generally exists an execution strategythat implements the rule semantics far more effi-ciently than the fastest transducer could (Chiticariuet al, 2010b).
This approach also allows for greaterrule expressivity, because the rule language is notconstrained by the need to compile to a finite statetransducer, as in traditional CPSL-based systems.5 The RuntimeThe SystemT Runtime is a compact, small memoryfootprint, high-performance Java-based runtime en-gine designed to be embedded in a larger system.The runtime engine works in two steps.
First, itinstantiates the physical operators in the compiledoperator graph generated by the optimizer.
Second,once the first step has been completed, the runtimefeeds documents through the operator graph one at atime, producing annotations.SystemT exposes a generic Java API for the inte-gration of its runtime environment with other appli-cations.
Furthermore, SystemT provides two spe-cific instantiations of the Java API: a UIMA API anda Jaql function that allow the SystemT runtime tobe seamlessly embedded in applications using theUIMA analytics framework (UIMA, 2010), or de-ployed in a Hadoop-based environment.
The latter112allows SystemT to be embedded as a Map job in amap-reduce framework, thus enabling the system toscale up and process large volumes of documents inparallel.5.1 Memory ConsumptionManaging memory consumption is very importantin information extraction systems.
Extracting struc-tured information from unstructured text requiresgenerating and traversing large in-memory datastructures, and the size of these structures deter-mines how large a document the system can processwith a given amount of memory.Conventional rule-based IE systems cannotgarbage-collect their main-memory data structuresbecause the custom code embedded inside rules canchange these structures in arbitrary ways.
As a re-sult, the memory footprint of the rule engine growscontinuously throughout processing a given docu-ment.In SystemT, the AQL view definitions clearlyspecify the data dependencies between rules.
Whengenerating an execution plan for an AQL annota-tor, the optimizer generates information about whenit is safe to discard a given set of intermediate re-sults.
The SystemT Runtime uses this informationto implement garbage collection based on reference-counting.
This garbage collection significantly re-duces the system?s peak memory consumption, al-lowing SystemT to handle much larger documentsthan conventional IE systems.6 The Development EnvironmentThe SystemT Development Environment assists adeveloper in the iterative process of developing,testing, debugging and refining AQL rules.
Be-sides standard editor features present in any well-respected IDE for programming languages such assyntax highlighting, the Development Environmentalso provides facilities for visualizing the results ofexecuting the rules over a sample document collec-tion as well as explaining in detail the provenance ofany output annotation as the sequence of rules thathave been applied in generating that output.7 EvaluationAs discussed in Section 1, our goal in building Sys-temT was to address the scalability and usabilityApplication Type Type of Platformbrand management server-sidebusiness insights server-sideclient-side mashups client-sidecompliance server-sidesearch (email, web, patent) server-sidesecurity server-sideserver-side mashups server-sideTable 1: Types of applications using SystemTchallenges posed by enterprise applications.
Assuch, our evaluation focuses on these two dimen-sions.7.1 ScalabilityTable 1 presents a diverse set of enterprise applica-tions currently using SystemT.
SystemT has beendeployed in both client-side applications with strictmemory constraints, as well as on applications onthe cloud, where it can process petabytes of datain parallel.
The focus on scalability in the designof SystemT is essential for its flexible executionmodel.
First of all, efficient execution plans aregenerated automatically by the SystemT Optimizerbased on sample document collections.
This en-sures that the same annotator can be executed effi-ciently for different types of document collections.In fact, our previous experimental study shows thatthe execution plan generated by the SystemT opti-mizer can be 20 times or more faster than a manu-ally constructed plan (F.Reiss et al, 2008).
Further-more, the Runtime Environment of SystemT resultsin compact memory footprint and allows SystemTto be embedded in applications with strict memoryrequirements as small as 10MB.In our recent study over several document col-lections of different sizes, we found that for thesame set of extraction tasks, the SystemT through-put is at least an order of magnitude higher thanthat of a state-of-the-art grammar-based IE system,with much lower memory footprint (Chiticariu et al,2010b).
The high throughput and low memory foot-print of SystemT allows it to satisfy the scalabilityrequirement of enterprise applications.7.2 UsabilityTable 2 lists different types of annotators built us-ing SystemT for a wide range of domains.
Most,113Domain Sample Annotators Builtblog Sentiment, InformalReviewemail ConferenceCall, Signature, Agenda, DrivingDirection, PersonPhone, PersonAddress, PersonEmailAddressfinancial Merger, Acquisition, JointVenture, EarningsAnnouncement, AnalystEarningsEstimate, DirectorsOfficers, CorporateActionsgeneric Person, Location, Organization, PhoneNumber, EmailAddress, URL, Time, Datehealthcare Disease, Drug, ChemicalCompoundweb Homepage, Geography, Title, HeadingTable 2: List of Sample Annotators Built Using SystemT for Different Domainsif not all, of these annotators are already deployedin commercial products.
The emphasis on usabilityin the design of SystemT has been critical for itssuccessful deployment in various domains.
First ofall, the declarative approach taken by SystemT al-lows developers to build complex annotators withoutworrying about performance.
Secondly, the expres-siveness of the AQL language has greatly eased theburden of annotator developers when building com-plex annotators, as complex semantics such as dupli-cate elimination and aggregation can be expressed ina concise fashion (Chiticariu et al, 2010b).
Finally,the Development Environment further facilitates an-notator development, where the clean semantics ofAQL can be exploited to automatically construct ex-planations of incorrect results to help a developer inidentifying specific parts of the annotator responsi-ble for a given mistake.
SystemT has been suc-cessfully used by enterprise application developersin building high quality complex annotators, withoutrequiring extensive training or background in naturallanguage processing.8 DemonstrationThis demonstration will present the core function-alities of SystemT.
In particular, we shall demon-strate the iterative process of building and debug-ging an annotator in the Development Environment.We will then showcase the execution plan automati-cally generated by the Optimizer based on a sampledocument collection, and present the output of theRuntime Environment using the execution plan.
Inour demonstration we will first make use of a simpleannotator, as the one shown in Fig.
2, to illustratethe main constructs of AQL.
We will then showcasethe generic state-of-the-art SystemT Named Enti-ties Annotator Library (Chiticariu et al, 2010c) toillustrate the quality of annotators that can be builtin our system.ReferencesD.
E. Appelt and B. Onyshkevych.
1998.
The commonpattern specification language.
In TIPSTER workshop.B.
Boguraev.
2003.
Annotation-based finite state pro-cessing in a large-scale nlp arhitecture.
In RANLP.P.
Bohannon et al 2008.
Purple SOX Extraction Man-agement System.
SIGMOD Record, 37(4):21?27.L.
Chiticariu, Y. Li, S. Raghavan, and F. Reiss.
2010a.Enterprise information extraction: Recent develop-ments and open challenges.
In SIGMOD.Laura Chiticariu, Rajasekar Krishnamurthy, Yunyao Li,Sriram Raghavan, Frederick R. Reiss, and Shivaku-mar Vaithyanathan.
2010b.
Systemt: an algebraic ap-proach to declarative information extraction.
ACL.Laura Chiticariu, Rajasekar Krishnamurthy, YunyaoLi, Frederick Reiss, and Shivakumar Vaithyanathan.2010c.
Domain adaptation of rule-based annotatorsfor named-entity recognition tasks.
EMNLP.H.
Cunningham, D. Maynard, and V. Tablan.
2000.JAPE: a Java Annotation Patterns Engine (Second Edi-tion).
Research Memorandum CS?00?10, Departmentof Computer Science, University of Sheffield.A.
Doan et al 2008.
Information extraction challengesin managing unstructured data.
SIGMOD Record,37(4):14?20.A.
Doan, R. Ramakrishnan, and S. Vaithyanathan.
2006.Managing Information Extraction: State of the Art andResearch Directions.
In SIGMOD.F.Reiss, S. Raghavan, R. Krishnamurthy, H. Zhu, andS.
Vaithyanathan.
2008.
An algebraic approach torule-based information extraction.
In ICDE.A.
Jain, P. Ipeirotis, and L. Gravano.
2009.
Buildingquery optimizers for information extraction: the sqoutproject.
SIGMOD Rec., 37:28?34.R.
Krishnamurthy, Y. Li, S. Raghavan, F. Reiss,S.
Vaithyanathan, and H. Zhu.
2008.
SystemT: a sys-tem for declarative information extraction.
SIGMODRecord, 37(4):7?13.D.
Z. Wang, E. Michelakis, M. J. Franklin, M. Garo-falakis, and J. M. Hellerstein.
2010.
Probabilisticdeclarative information extraction.
In ICDE.114
