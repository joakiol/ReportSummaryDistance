Speaker-independent context update rules for dialogue managementSamson de Jager, Nick Wright, Alistair KnottDept.
of Computer ScienceUniversity of Otagosdejager/nwright/alik@cs.otago.ac.nzAbstractThis paper describes a dialogue manage-ment system in which an attempt is madeto factor out a declarative theory of con-text updates in dialogue from a proceduraltheory of generating and interpreting ut-terances in dialogue.1 Background: declarative and proceduralresources for text processingIn computational linguistics, a very useful distinc-tion can be drawn between declarative models oflanguage, which specify what constitutes a ?correct?or ?proper?
sentence or discourse, and proceduralmodels, which specify how a proper sentence or dis-course can be interpreted or generated.
This distinc-tion is virtually ubiquitous in computational mod-els of sentence structure and sentence processing.In these models, a sentence grammar is a declar-ative construct, and a sentence parser or sentencegenerator consults the grammar in a systematic wayat each iteration in order to interpret or create sen-tences.
The idea of systematicity is very important.For instance, in a chart parser the process of sentenceparsing is broken down into a sequence of procedu-ral operations each of which has exactly the samegeneral form: a search of the set of grammar rules,and the creation of a new chart edge if the searchis successful.
In fact, the benefits of thinking of aparser as a procedural module consulting a declar-ative grammatical resource are most clearly seen inthe fact that the procedural component can be ex-pressed systematically in this way.The declarative/procedural distinction is also in-creasingly common in computational treatments ofextended monologues.
There are several overtlydeclarative theories of the structure of such texts(many of them stemming from the work of Mannand Thompson (1988) and Grosz and Sidner(1986)), and several models of text generation andtext interpretation which make reference to thesedeclarative theories (see e.g.
Hovy (1993) andMarcu (2000) for a summary of generation and in-terpretation methods respectively).
Again, the mostattractive feature of the declarative/procedural dis-tinction is that the procedural algorithms envisagedare very systematic.In models of dialogue structure, a clean separa-tion between declarative and procedural models hasproved more elusive.
By analogy with the cases ofsentences and monologic discourse just described,what is required is a declarative model of ?well-formed dialogue?, together with procedural mecha-nisms that consult this model in a systematic way toproduce and interpret contributions to a dialogue.To begin with, what is a declarative theory of di-alogue structure?
In this paper, we will assume atheoretical perspective in which dialogue moves arerepresented as context-update operations (see e.g.Traum et al(1999)).
An utterance in a dialogue isunderstood as a function which (when defined) takesthe current dialogue context and outputs a new dia-logue context that constitutes the input to the nextutterance in the dialogue.
The declarative theory ofdialogue coherence will therefore be a theory aboutthe legal ways in which the dialogue context can beutteranceinterpretationDialoguecontextutteranceprocessingutteranceprocessinginterlocutor (I)utterance processing rulesA?s utteranceI?s utteranceutterancegenerationA BA BA CProcess A consults data from BProcess A writes data in BProcess A hands control to process CFigure 1: A model of dialogue management factoring out a declarative component of ?utterance processing?.updated.1 The question we focus on is: how can weformulate a model of dialogue processing that makesreference in a systematic way to this declarative the-ory?The difficulty is that ?dialogue processing?
is nota uniform activity.
There are two very different pro-cesses involved: one is utterance interpretation, andthe other is utterance generation.
An agent par-ticipating in a dialogue runs these two processesroughly in alternation.
If an algorithm for dialogueprocessing is to be systematic in the way discussedabove, we expect it to consult the declarative theoryof context updates in the same way when process-ing each utterance, whether it is being generated orinterpreted.
But is this really possible?
The pro-cess of generating an utterance seems very differentfrom that of interpreting one.
Perhaps most obvi-ously, when an agent is generating an utterance, itneeds to work out what the content of this utteranceis, while when the agent is interpreting an utterance,this content is handed to it on a plate, and it simplyhas to work out how it is to be incorporated into thecurrent discourse context.2 Dialogue management usingspeaker-independent resourcesThis paper describes the dialogue managementscheme implemented in a dialogue system calledTe Kaitito2 (Knott et al, 2002; de Jager et al,1Note that there is nothing procedural in the notion of anupdate; it is just a way of characterising the meaning of an ut-terance in a dialogue.2Te Kaitito is a bilingual system, which supports dialoguesin either English or Ma?ori.
Te Kaitito means ?the extemporespeaker?
or ?the improviser?.2002).
In this scheme, an attempt is made to fac-tor out a speaker-independent component of ut-terance processing which is the same whether theutterance is being generated or interpreted from aspeaker-dependent component of utterance pro-cessing which is completely different for utterancegeneration and utterance interpretation.
Both ofthese types of processing are thought of as opera-tions which perform updates on the dialogue con-text.
The basic idea is that a speaker-dependent op-eration is responsible for adding new informationabout an utterance and its semantic content to thedialogue context, while a speaker-independent oper-ation consults a declarative model of dialogue struc-ture to further process this information in the light ofwhat is already in the dialogue context.
Imagine anagent A participating in a dialogue with an interlocu-tor I .
When A is generating an utterance, we pro-pose that A performs two completely separate opera-tions.
Firstly there is a speaker-dependent operationof utterance generation, which is performed usinga collection of very procedural and very domain-specific resources, including A?s current plans andknowledge of the world.
As a consequence of thisoperation, a new utterance representation is addedto the dialogue context, and (as a side-effect) Aactually makes an utterance.
Secondly, a speaker-independent operation of utterance processing oc-curs, in which a set of utterance processing rulesare consulted, and various further changes are madeto the dialogue context.
Imagine now that A inter-prets a response utterance coming from I .
Thereare again two separate operations.
Firstly there is aspeaker-dependent operation of utterance interpre-tation, involving sentence parsing, syntactic and se-mantic disambiguation and so on.
As a consequenceof this operation, again a new utterance represen-tation is added to the dialogue context.
Secondly,another speaker-independent operation of utteranceprocessing occurs, in which exactly the same set ofutterance processing rules are consulted, and furthercontext updates are made.
This picture of dialogueprocessing is summarised in Figure 1.
In the remain-der of the paper, this picture will be picture will beexamined in more detail.3 A DRT-based model of utterances anddialogue contextThe semantics of sentences in Te Kaitito are rep-resented using Discourse Representation Structures(DRSs: see (Kamp and Reyle, 1993)), both for sen-tence generation and sentence interpretation.
Themain extension of classical DRT is to incorporate atreatment of presuppositions along the lines of thatgiven in van der Sandt (1992).
In this treatment,a sentence is modelled as an assertion DRS and aset of presupposition DRSs, each of which spec-ifies information which must be found in the dia-logue context before the sentence?s assertion can befurther processed.
Our system is a modification ofvan der Sandt?s, in that presuppositions are used tomodel the context-dependence of questions and an-swers as well as phenomena like definite descrip-tions and anaphora (see de Jager et al (2002) forsome motivation for this idea, and see Section 5 forsome examples).The dialogue context in Te Kaitito is also repre-sented as a DRS, with additional extensions roughlyalong the lines of Poesio and Traum (1998).
Themain extension is the idea of a discourse unit, whichis a sub-DRS gathering all of the semantic informa-tion expressed in a single utterance by one of thedialogue participants, the whole of which is treatedas a first-class object to which other predicates canapply (e.g.
asserts(speaker, U1)).
This idea ofdiscourse units is also adopted in the MIDAS sys-tem (Bos and Gabsdil, 2000).
The other extensionof classical DRT (also following Poesio and Traum)is that the dialogue context is modelled as a pairof DRSs: a common ground DRS containing factswhich are mutually believed, and a stack DRS con-taining ungrounded information (questions whichhave not been fully answered, assertions which havenot been acknowledged, and so on).
The stack DRSis actually a sub-DRS of the common ground DRSin our implementation, capturing the idea that refer-ents within the common ground are available withinthe stack DRS, but not vice versa.Our model differs from that of Poesio and Traumin one fairly small respect, because we also envis-age a role for discourse units in text planning.
Oneof the functions of a dialogue in our system is to al-low a user to author a knowledge base of facts thatserves as input to a text planning system (Knott andWright, 2003).
A text planner needs to be able topartition its knowledge base into ?utterance-sized?sets of facts, which can then be structured into largertexts in various ways.
It is very useful if the systemcan remember how the user performed these parti-tions during the authoring dialogue.
The discourseunits of Poesio and Traum seem almost tailor-madefor this purpose.
However, not all of the predicatesinside a discourse unit should be retained in thesecached utterances.
Some predicates are only presentin a sentence because they feature in referring ex-pressions; since referring expressions will be differ-ent depending on the context in which they are pro-duced, we need a separate context-specific routineto add these predicates to the semantics of an utter-ance when a sentence is to be produced.
See Knottand Wright (2003) for more details about how thesecached utterances are obtained and used.An example of a dialogue context is given in Fig-ure 2.
This is how the context would appear after thehouse(X2)U1,X1,X2U1:in(X1,X2)Common ground DRSStack DRScat(X1)Figure 2: A simple dialogue contextinterlocutor I has uttered the sentence A cat was ina house, and the agent A has successfully added thisinformation to the common ground.
Note first thatthe stack DRS is empty.
Note also that the predicatescat(X1) and house(X2) have been moved from theutterance unit U1 into the top level of the commonground, while the actual predication associated withthis sentence stays in the utterance.
This ?unloading?of material into the top-level DRS is superficiallysimilar to the operation performed in MIDAS sys-tem for grounding an utterance.
But in our case itsfunction is purely to do with the text-planning appli-cation, and has nothing to do with making referentsaccessible.
We assume all material inside utteranceunits is accessible as if it were in the outer DRS.4 Utterance processing rulesIn the top-level control loop of the dialogue man-ager described in Section 2, when an utterance isinterpreted or generated (using speaker-specific pro-cesses), a new utterance representation is addedto the stack DRS.
An utterance representation con-sists of a discourse unit as described in Section 3,plus two kinds of predicate about the utterance rep-resented by this unit: firstly a predicate specifyingwhat dialogue act it performs, and secondly predi-cates specifying which variables it contains.
Afterthis comes the speaker-independent operation of ut-terance processing introduced in Section 2.Utterance processing is modelled as a cyclicalprocess of applying context update rules, in the kindof way envisaged in the MIDAS system (Bos andGabsdil, 2000).
An utterance processing rule con-tains a condition to look for in the dialogue context,and an action, which is an update operation on thecontext.
At each cycle, the set of rules is searched,and the first rule whose condition matches has itsaction executed.
The cycle is repeated until no rulestrigger.There is no reason a priori why speaker-independent context update operations need be ap-plied cyclically by a rule interpreter.
But there areseveral reasons why one might want to use a cycli-cal scheme.
For Bos and Gabsdil (2000), the pri-mary reason is that updating the context involves agreat deal of reasoning, and can in fact be construedas a kind of reasoning.
Reasoning is naturally mod-elled as the cyclical application of rules of inference,and hence a cyclical framework for updates seemsquite natural.
In our system, however, the dialoguemanager does not invoke a general-purpose theoremprover.3 We use a cyclical scheme for several sepa-3While this is of course limiting for a practical system, werate reasons.Firstly, there are dialogue moves which decom-pose naturally into sequences of smaller moves,some of which can also be made individually.
Forinstance, an acknowledgement can be given explic-itly (using an utterance like Okay), or implicitly, bymaking a new forward-looking utterance.
It makessense to model the implicit acknowledgement in thislatter case using the same rule used to model the ex-plicit one.
To do this requires a cyclical scheme formaking context updates.Secondly, there are dialogue moves which decom-pose into sub-moves which have specific verbal andnonverbal reflexes.
For instance, when a speaker isprocessing an incoming question utterance, she firstof all has to recognise that it is a question.
Whenthis happens, the agent might furrow her brow, orutter a filler like Hmm!, and only after some time ac-tually respond to the question.
Such actions are con-veniently modelled as overt side-effects of the appli-cation of cyclical context-update rules.4Perhaps most importantly, the cyclical applica-tion of context-update rules has the same kind ofsystematicity as is found in the operation of a sen-tence parser or a sentence generator.
In Section 1 itwas argued that the benefits of a separation betweendeclarative and procedural resources are largely dueto the systematic iterative or procedural recursive al-gorithms which this separation permits.
Our sug-gestion is to think of the set of utterance-processingrules as a declarative theory of ?legal dialogue con-text updates?, and to think of the rule interpreter cy-cling on these rules as the dialogue equivalent of asentence generation algorithm.5 A simple worked exampleIn this section, we will give some examples of theutterance processing rules used in Te Kaitito?s dia-logue manager, and explain how they are used.
Theexamples relate to the very simple dialogue given inFigure 3.
After the first two utterances, the dialoguecontext will be the one which was shown in Figure 2.feel that architectures for dialogue management can be studiedrelatively independently from issues to do with general-purposereasoning techniques.4Te Kaitito has in fact been used as the back-end of an an-imated conversational agent which performs a few simple non-verbal strategies of this kind.
For details see (King et al, 2003).We take up the story when the agent?s interlocutor I1 I A cat was in a house2 A Okay3 I The cat barked4 A OkayFigure 3: An example dialoguemakes the second assertion.
After this utterance hasbeen interpreted, the dialogue context is as shown inFigure 4.
Basically, a new sentence DRS has arrivedhouse(X2)U1,X1,X2U1:in(X1,X2)Common ground DRSStack DRSU2:U2barked(x1) cat(x1)x1var?inside(x1, U2)cat(X1)assertion?act(U2)Figure 4: Context after interpretation of Utterance 3in the stack DRS.
Note that the sentence contains apresupposition DRS, which is given in dashed lines.Note also the predicates specifying the dialogue actperformed by the utterance (which in this case is de-rived from the syntax of the sentence), and detailingwhich variables are mentioned in it.Speaker-independent utterance processing rulesnow fire.
The first rule to fire in this case is a rulewhich attempts to resolve the presuppositions of theutterance.
(Recall that presupposition resolution isconsidered part of dialogue management rather thansimple sentence interpretation; again see de Jager etal.
(2002) for details.)
After presupposition reso-lution, the context is as shown in Figure 5; the pre-supposition box disappears, and the variable x1 isbound to X1.
In fact, no further utterance process-ing rules will fire in this cycle.A speaker-specific process of response generationis now invoked.
In this case, the process specifiesthat an assertion whose presuppositions have beenfully resolved should be acknowledged, and conse-quently an acknowledgement is given to the speaker.A semantic representation of this acknowledgementStack DRSU2:U2barked(X1)assertion?act(U2)var?inside(X1, U2)house(X2)U1,X1,X2U1:in(X1,X2)Common ground DRScat(X1)Figure 5: Context after processing of Utterance 3sentence is added to the stack DRS, as shown inFigure 6.
Notice that an acknowledgement is rep-resented semantically as presupposing a forward-looking dialogue act.
(In Te Kaitito?s type hierarchy,an assertion is one such act.
)Stack DRSU2:U2var?inside(x1, U2)barked(X1)assertion?act(U2)U3U3:forward?act(x1)x1acknowledgement?act(U3)house(X2)U1,X1,X2U1:in(X1,X2)Common ground DRScat(X1)Figure 6: Context after generation of Utterance 4The agent has now uttered the acknowledgement;it remains for it to bring its dialogue context upto date, using the same utterance processing rulesas are used when processing the interlocutor?s ut-terance.
The first rule is presupposition resolutionagain.
Crucially, the same presupposition resolu-tion routine is invoked now as was invoked when theinterlocutor?s assertion was being processed.
Afterthis routine, the presupposed forward-looking dia-logue act is bound to the assertion utterance (whichin Te Kaitito?s type hierarchy is a type of forward-looking act), the presupposition box is removed, andan explicit statement of the relationship between theassertion U2 and the acknowledgement U3 is added.The dialogue context is now as shown in Figure 7.house(X2)U1,X1,X2U1:in(X1,X2)Common ground DRScat(X1) Stack DRSU2:U2barked(X1)assertion?act(U2)U3U3:var?inside(X1, U2)acknowl?ment?of(U3, U2)Figure 7: Context after processing Utterance 4 (1)Finally, a second utterance-processing rule re-moves the acknowledgement altogether and trans-fers the assertion U2 to the common ground, asshown in Figure 8.U2:barked(X1)house(X2)U1:in(X1,X2)Common ground DRScat(X1)U1,X1,X2, U2Stack DRSFigure 8: Context after processing Utterance 4 (2)6 DiscussionThe important thing about the example just workedthrough is that the utterance-processing rules whichoperate after each utterance is added to the stackwould work in just the same way if the agent hadbeen making an assertion and the interlocutor hadbeen acknowledging it.
The Te Kaitito system isable to generate assertions as well as interpret them,and is able to interpret acknowledgements as wellas generate them.
For instance, if the user asks aquestion, the system has to answer it with an as-sertive statement, and it has to be able to interpret anacknowledgement of this answer (whether the usergives this explicitly, or implicitly).An example dialogue to illustrate this alternativepattern is given in Figure 9.
During the course of5 I Which cat barked?6 A It was the blue cat.7 I Okay.Figure 9: Dialogue with an acknowledgement by Ithis dialogue, the utterance processing rules whichupdate the dialogue context after the system?s asser-tion (Utterance 6) are the same as those which up-date the dialogue context after the assertion by theuser in Utterance 3 of Figure 3.
And the utteranceprocessing rules which update the context after theuser?s acknowledgement (Utterance 7) are the sameas the rules which update the context after the sys-tem?s acknowledgement of the user?s assertion inUtterance 4 of Figure 3.
The process of generatingan assertion is quite different from that of interpret-ing one, as emphasised in Section 1, and the samegoes for the processes of interpreting and generatingan acknowledgement, but what this system attemptsto do is to factor out the components of these twooperations which are the same, and which just con-cern how the semantic specification of an incomingutterance can be incorporated into the current dia-logue context.
To the extent that this is possible,an attractive separation can be achieved between adeclarative (rule-based) theory of context updates indialogue and a procedural theory of utterance inter-pretation and generation.7 AcknowledgementsThis work was funded by University of Otago Re-search Grant MFHB10, and by the NZ Founda-tion for Research in Science & Technology grantUOOX02.ReferencesJ Bos and M Gabsdil.
2000.
First-order inference and theinterpretation of questions and answers.
In Proceed-ings of Gotalog 2000.
Fourth Workshop on the Seman-tics and Pragmatics of Dialogue., pages 43?50.S de Jager, A Knott, and I Bayard.
2002.
A DRT-basedframework for presuppositions in dialogue manage-ment.
In Proceedings of the 6th workshop on the se-mantics and pragmatics of dialogue (EDILOG 2002),Edinburgh.B J Grosz and C L Sidner.
1986.
Attention, intentions,and the structure of discourse.
Computational Lin-guistics, pages 175?203.E Hovy.
1993.
Automated discourse generation usingdiscourse structure relations.
Artificial Intelligence,63:341?385.H Kamp and U Reyle.
1993.
From discourse to logic.Kluwer Academic Publishers, Dordrecht.S King, A Knott, and B McCane.
2003.
Language-driven nonverbal communication in a bilingual con-versational agent.
In Proceedings of the 16th Interna-tional Conference on Computer Animation and SocialAgents (CASA).A Knott and N Wright.
2003.
A dialogue-based knowl-edge authoring system for text generation.
In AAAISpring Symposium on Natural Language Generationin Spoken and Written Dialogue, Stanford, CA.A Knott, I Bayard, S de Jager, and N Wright.
2002.
Anarchitecture for bilingual and bidirectional nlp.
In Pro-ceedings of the 2nd Australasian Natural LanguageProcessing Workshop (ANLP 2002).W C Mann and S A Thompson.
1988.
Rhetoricalstructure theory: A theory of text organization.
Text,8(3):243?281.D Marcu.
2000.
The Theory and Practice of DiscourseParsing and Summarization.
MIT Press, Cambridge,MA.M Poesio and D Traum.
1998.
Towards an axiomati-zation of dialogue acts.
In J Hulstijn and A Nijholt,editors, Proceedings of the Twente Workshop on theFormal Semantics and Pragmatics of Dialogues (13thTwente Workshop on Language Technology), pages207?222.D Traum, Bos J, R Cooper, S Larsson, I Lewin, C Mathe-son, and M Poesio.
1999.
A model of dialogue movesand information state revision.
TRINDI project deliv-erable.R Van der Sandt.
1992.
Presupposition projection asanaphora resolution.
Journal of Semantics, 9:333?377.
