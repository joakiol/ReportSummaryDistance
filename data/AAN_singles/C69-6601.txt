An in tu i t ive  representat ion  o f  context - f ree  languagesBy L~szl6 KALM~ in Bzeged, Hungary1.
In  th i s  paper ,  the  fo l low ing  concept ion  of  language isused .
A l~guage i s  an ordered  t r ip le  L = (V ,  C, f )  where V and Care  two d is jo in t ,  non-empty ,  f in i te  sets  and f i s  sn app l i ca t ion  of  Cin to  the  set  of  a l l  subsets  o f  the  f ree  semigroup F (~ generated  by ?.The set  V i s  ca l led  the  vocabu lary  ( in  Chomsky ~1~, te rmina lvocabu-la ry ) ,  i t s  e lements  a re  ca l led  word_____~s, those  of  F(V) Ford  s t r ings .
Thee lements  o f  C (which cor responds  to  the  aux i l i a ry  vocabu lary  in  Chom-sky \[i~) are called ~smmat iea l )  categories.
For any category c ~ C,the elements of f~)~ F~)  are called the word strings belonging tothe category c.The usual conception of language, viz.
a subset S of F~V), isS particular case in which C = ~s} contains a single element s ~thecategory of sentences, a sentence, i. e. a word string belonging tothe category s, being an element of S~ However, both for natural andfo rms l  languages, the above, more general conception seems to be moreappropriate, for we are not only interested, in the ease of a naturallanguage,  in ~hat are the sentences, and, for a programming language,say, what are the programs, but also, what are the noun phrases, verbalphrases, etc., and, what are the declsrations, Statements, expressions,etc., respectively.
Another advantage of our more general conceptionis that for a generative grammar of L, we can use the set.C of catego-ries (but of course, we can use any superset of C as we l~ as auxili-ary vocabulary.Accordingly, we define a context-free grammar as an orderedtriple G = (V, C, R~ where V and C ar~ two disjoint, non-empty, fini-te sets and R is s subset of the Cartesian product of C with the freesemigroup P (VU C) generated by the union of V and C. V and C arecalled the vocabulary and set of cste6ories (or terminal and auxili-a ry  vocabulary), respectively; the elements r of R, which are of theform (c ,~ with c ~ C and ~ E F(V ~ ~,  are called (production) rules.A rule (c, ~> will be written in the sequel as "c:d" as in the pres-entation of ALGOL 68 \[2\], rather than "c ,~"  as in Chomsky or "c: :=d',- 2 -as  in the presentation of ALGOL 60 C3~).
A "mixed string," i. e. anelement ~ of F ~ U C) is called a direct production of a category cif c:~ is a rule; productions of a category o are defined recursivelyas ~) its direct productions end ~ii) mixed strings ~ = d l~3 form-ed of productions ~t= c%ie~63 of e by replacing a category c t by adirect production ~2 of ci?
(We denote the semigroup operation ofF (V U C) by juxtaposition end do not distinguish in notation a stringformed of a single element (of V  C) from that element.)
Terminalproductions of c ere those of its productions which are elements ofF~)  ~.
e. formed of words only); and the language L generated by acontext-free ~rammar G = ~V, C, R~ is defined as L = 4?, C, f~ where,for any category c ~ C, f~) is the set of all terminal productionsof c. (Also, any language L / = (V, C/, fl) with CtC C where fl isthe mapping f above restricted to C / could be regarded ssa  languagegenersted by G as well.)
A language L is a comtext.free language ifit is generated by some context-free grammar.2.
The intuitive representation of context-free languages s~bout which I shall speak is a representation by means of flag diagrams.A flag diagram is an ordered septuple D -- (V, C ,  H ,  fl' f2' gl' g2~'where V and C are disjoint, non-empty, finite sets; H is a finite ori-ented graph; fl and f2 are mappings of two disjoint, non-empty subsetsP1 end P2' respectively, of the set P of points (vertices) of H ontoC; and gl and g2 are mappings of two disjoint subsets E 1 and E2, re-spectively, of the set E of edges of H, of which E 1 is non-empty, on-to V and into C, respectively.
The sets V and C are called again v__oo-cabulary (set of words) and set of categories, respectively.
A pointPl ~ P1 and a point P2~ P2 with f l@l) = f2(P2~ = c E C are calleda starting c-point snd an ending c-point, respectively; an edge e l~ E 1with gl(el) = v ~ V and sn edge e 2 ~ E 2 with g2(e2~ = c~ C are calleda v-edge and a c-edge, respectively.
Starting and ending c-points aremarked by s flag-head, pointing to the left and to the right (i. e. bya pentagon with two horizontal, one vertical and two slant sides whichform an angle pointing to the left and to the right), respectively,bearing the symbol c; v-edges e are marked by the word v written a-bove the edge e, and c-edge~ are mar~ed by a double flag-head, point-i~  tu Both sides (i. e. by a hexagon with two horizontal and fourslent sides which form two angles, pointing to the left and to the-3 -right , bearing the s bol c. (See Fig.
i.
)starting endingc-point v-edge c-e dgeFig.
1.In the case E 2 = @ we call D = (V, C, H~ fl' f2; gl' g2~'which can be written for short as D = <V, C, H, fl' f2' gl> for g2is the empty mapping, viz.
the m~pping of the empty set E2 into c,a finite state fla~ diagram.
In this case, an ~riented, possiblyself-intersecting) path Q ~.
e. going possibly severai but a finitenumber of times through the same point or edg~ of H is called a c~path of H (c ~ C), if it leads from s starting c-point Pl to an end-ing c-point P2 but otherwise, does not go throug~ any starting orending c-point (implying the condition that Q has not to go throughPl or P2 once mor~.Let be el, e2, ..., e n the edges belonging to E 1 of a c-pathQ of H, each written as m2ny times as Q goes through it and writtenin the order in which Q goes through them.
The word string VlV2...Vn,where, for i = I, 2, ..., n, v i = gl(ei), is called the word strin~robe  read along the c-path Q.
The language represented h~ a finitestate flag diagram D = <V, C, H, fl' f2' g~ is defined as L = ~V, C, f>,where, for any c ~ C, f(c) is the set of all word strings to be readalong some c-path of E. A language is a finite state language if itis represented by some finite state flag diagram.Flag diagrams in general are generalizations of finite stateflag diagrsms.
In the case of a flag diagram D = <V, C, H, fl' f2' gl'g2> in general, an ~riented, possibly self-intersecting~ path Q of His called a c-path of H ~ ~ C) if, besides leading from a starting c-point to an ending c-point but otherwise not going through any startingor ending c-point, it does not go through any cl-edge of H ~t  ~ C).The word string to be read along a c-path of H is defined in the sameway as in the case of a finite state flag diagram.In order to define the language represented by a flag diagramin general, we need still some auxiliary notions.
Consider two differ-H <V, C, ent ~nts  Pl and P2 of the oriented graph^of a flag diagram D =-4 -H, fl' f2' gl' g2>" The subgraph H / of H connectin~ Pl with P2 con-sists, by definition, of all points p of H for which both from Pl top and from p to P2 at least one (oriented) path leads, together withthe edges which connect theszpoints p in H. (If there is no such pointp then H / is the empty graph; otherwise, both Pl and P2 are points ofH~).
A subgraph of H connecting a starting c-point with an ending c-point ~ ~ C), provided it is not empty, is cslled a c-subgraph of H.The derivatives of a fla~ diagram D = <V, C, H, fl' f2' gl' g~are defined by recursion as (i) D itself, and (ii) any flag diagram ofthe form D t = <V, C, H I , f~, f~, g~, g~> which can be obtained from so-me derivative D" = <V, C, E", f~, f~, g~, g~> of D by replacing one ofits c-edges (c ~ C) e by any c-subgraph H"' of H. Here, replacing hasto be understood in the following sense.
First, the starting c-pointPl ~nd the ending c-point P2 of H connected by H"  are replaced by thest~zting point P3 and the ending point P4' respectively, of the edge eof H"; then, the graph H'" modified thus is inserted, instead of e, be-tween P3 and P4 in H".
Any point or edge of H" and H ~ which was a start-ing c~-point, an ending c'-point, a ~-edge or a c~-edge in H" and H, re-spectively (c' E C, v & V), remains so after the replacement; in parti-cular, P3 and P4 remein marked or unmarked as they were in H" ratherthen getting marked by a flag-head, bearing the s~bo l  c and pointingto the left and to the right, respectively, as Pl snd P2' respectively,were m~rked in H.Now, we define the language represented by a fls~ diagrem D =(V, C, H, fl' f2' gl' g2) as L = <V, C, f> where, for any c E C, f(c)is the set of all word strings to be read along some c-path of the ori-ented graph H' of some derivative D' = (V, C, H' , fl'# f~, g~, g~)of D.As a simple example, Fig.
2. shows a flag diagram D represent-ing the language L = (V, C, f> with V =~0,  ( , )} ,  C = {s} and f(s) =~b, (C) ,  ((0)) ; (((0)))i , ...}.
On Fig.
3, some of the derivatives ofD ere shove.0-7ig.
2.c-5 -00<D l + o0?
,t+i + + + o o ?
.
+ , o ?
.
?
?
.
.
.
.
.
.
+ ?
o .
o ~ o .
o ?
o .
.
o o + .
.
?
e , o o o o tFig.
3.3.
Obviously, any cQntext~free language can be representedby some flag diagram.
Indeed, let G = (V, C, R~ be a context-freegrammar.
To  each rule r = c :~ R, where 6= SlS2...Sn, c E C, el,s 2, ..., SnE V U C, form an oriented grsph H r with n + 1 points P O,Pl' P2' "''' Pn of which P0 is a starting c-poi~t~ pm an ending c-point and, for i = l, 2, ..., ~, Pi-1 is connected with Pi hy a~ s i-edge (i. e., for s i = v E V a v-edge, for s i = c E C a c -edg~ el,oriented towards Pi" The ~isconnected) unio~ of these oriented graphsHr, for all rules r ~ R, defines a flag diagram obviously representingthe language generated by G.Using this constuction e. g. for the context-free grammar G =<V, C, R~ with ?
=~O, (  , )9, C =~s~ and R =~s:O,  s:~s)~ generatingthe l~mguage represented by the flag diagram shown by Fig.
2, we shouldobtain the flag diagram, shown by Fig.
4.
Replacing this disconnectedflag diagram by the connected one shown by Fig 2 corresponds to the AL-GOL 68-like way of writing s:O;(s) (or the ALGOL 60-like way of writings : :=O\ [~) )  of the rules belonging to R.Besides the possibility of reduction of the number of starting-6 -Fig.
4.and ending c-points in a similar way, we have often the more importantpossibil ity of reduction of the number of c-edges.
E .g .
the languagegenerated by the context-free grammar G = (V, C, R) with V = ~a, b,...,z, O, 1,..., 9 , C = letter, digit, identifier , R = rl, r2,... ,r26 , r27 , r28,... , r36 , r37, r38 , r39~, wherer I = letter:a ~r 2 = letter:b. e .
e ?
e e o e e e e or26 = letter:zr27 = dig i t :Or28 = digit:l. o o o o e e e o o o e er36 = digit:9r37 = identifier:letterr38 = identifier:identifier letterr39 = identifier:identifier digithere, space has been used between "identifier" snd "letter" or "digit"to denote the semigreup operation), can be represented, instead of the ~flag diagram indicated by Fig.
5, which we get using the above constuct-ion end for which the overall number of c-edges is 5, by the flag dia-gram indicated by Fig.
6, for which this number is O, the language in~ue~tion being actually a finite state language.To show a more complicated exsmple, take the lsnguage of theChurch lambda conversion t4J where we use x, x|, xJl, XllJ ,... as va-riables end for simplicity (as a matter of~fact, for obtaining a con-text-free language at all) we allow the abstraction ~v~ even if thevariable v is not contsined, or contained as a bound variable, in the(well-formed) formula g. This language is generated by the context-free grammar G = (V, C, R~ with V = ~x, \] , ~, ~, ~, ~, \], ( , )~ ,  C =-7 -eeeeeeeeeeeeeeeeeee ,oeeeeeoeeeeoeeaoe lee le<identifier ~ identifie?<iden%ifl er ~ iden%i  f i e r ~  iden%ifi er><iden%i fief ~ i d e n t i f i e r ~  iden, ifier>Fig, 5.a:Fig .
6.~variable, formula} 8nd R = {rl.
r2, r3.
r4, rs~ , wherer I = variable:xr 2 = variable:variable|- 8 -r 3 = formula:variabler4 = formula:~formul~ (formula)r 5 = formula:~variable~foJ~mul~(here, the semigroup operation is denoted by juxtaposition agai~ .Fig.
7 shows a simple flag diagram representing this language.
Here,the overall number of c-edges is 4.Fig.
7.Flag diagrams can be used with advantage as a tutorial tool inteaching progrs~ing  languages.
In the ease of a great number of cate-gories, starting and ending c-points can be marked by flags with handleof different length for different categories c, rather than just flag-heads, pointing to the left and to the right, respectively, as shownby Fig.
8, serving to give a survey over the possible modes in ALGO~ 68.Here, the flags instead of flag-heads are not really needed, for we havetwo categories only.
However, inserting some more flags (which needssome more branchings too), we can get a flag diagram which is equivalentto the metaproduction rules of modes ~ i th  25 categories) of C2\], 1.2.1 .Besides such tutorial use of flag diagrams, they might have atheoretical interest in furnishing a natural classification of context-free languages according to the minimum of the overall number of c-edgesin the flag diagrams representing a given such language.
This minimumcan be considered as a measure of the non-finite state character of thegiven l~nguage.
However, for such a theoretical use, a method for cal-culation of the minimum in question would ~e needed.-9 -I integralreal ~t booleancharacterformatprocedureJ Withr ~ klll~"reference torow ofstructured with ~ _  fieldparameter .~ia?
z ?l e t te r~digit " zero\]w~i ?he ~I:\[nine II runion of.iandmodeFig.
8.r ,- 10 -ReferencesC2\]See e. g. N. Chomsky, Three models for the description of langa-~ge, IRE Transactions, 2 6950,  113-124.See A. van Wijngaarden ~editor), ~.
J. Mailloux, J. E. T.. Peck,and C. H. A. Koster, Final Draft Report on the AlgorithnLic Lsngu-sge ALGOL 68, Stichting Mathematisch Centrum, Amsterdam, Rekem-sfdeling, I~m 100 (1968).See P. Naur (editor) , J. W. Bsckus, J.
Green, C. Ketz, J. McCarthy,A.
J. Perlis, H. Rutishauser, K. Samelson, B. Vsuquois, J. G. Weg-stein, A. van Wijngaarden, and M. Woodger, Report on the Algorith-mic Language ALGOL 60, Numerische lath., 2 (1960), 106-136, orC oz~munications AC~, 3 (1960)~ 299-314.See e. g. A.
Church, A set of postulates for the foundation ofLogic, second paper, Ann~ls of Math., (23 34 C1933)?
