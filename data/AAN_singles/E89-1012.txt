Programming in Logic with Constraints forNatural Language ProcessingPatrick Saint-DizierLSI UniversiM Paul Sabatier118 route de Narbonne31062 TOULOUSE Cedex FranceAbst rac tIn this paper, we present a logic-basedcomputational model for movement heory inGovernment and Binding Theory.
For that purpose,we have designed a language called DISLOG.DISLOG stands for programming in logic withdiscontinuities and permits to express in a simple,concise and declarative way relations or constraintsbetween non-contiguous elements in a structure.DISLOG is also weel adapted to model other types oflinguistic phenomena like Quantifier Raisinginvolving long-distance r lations or constraints.1.
In t roduct ionMany areas of natural language syntax andsemantics are a fruitful source of inspiration forcomputer languages and systems designers.
Thecomplexity of natural language and the high level ofabstraction of most linguistic and semantic theorieshave motivated the emergence of highly abstract andtransparent programming languages.
One of the moststriking examples is undoubtedly Prolog, initiallydesigned for natural language parsing, viaMetamorphosis Grammars (Colmerauer 1978).For a few years, the Logic Programming paradigmhas been augmented with a number of technical andformal devices designed to extend its expressivepower.
New logic programming languages haveemerged, several of them motivated by naturallanguage processing problems.
Among them let usmention: CIL (Mukai 1985), designed to express in adirect way concepts of Situation Semantics, MOLOG(Farinas et al 1985), an extension to Prolog designedto specify in a very simple and declarative way thesemantics of modal operators and ~,-Prolog (Nadathurand Miller 1988), designed to deal with X-expressionsand X-reduction.Recently, the Logic Programming paradigm hasbeen augmented with the concept of constrained logicprogramming (CLP).
The basic research done withinthis area amounts to specifying tools for a morerefined control on the type of values or terms avariable in a program can stand for.
Answers togoals can be intensional: they are sets of equations(constraints) rather than mere values.
Furthermore, theidea at the operational level, incorrect assignments arefiltered out as soon as they are encountered whenbuilding a proof, making thus proof procedures moreefficient.In this document, we deal with a new, original,type of CLP mechanism: constraints on proof trees.This type of constraint has emerged from, inparticular, the definition of a computational model forthe quantifier aising operation and for movementtheory in Government and Binding theory (notedhereafter as GB).
We model those phenomena in termsof constraints between on-contiguous elements in astructure.
For example, we want to expressconstraints between a moved constituent and itsco-indexed trace.
Constraints are expressed in terms ofrelations between subtrees in a syntactic tree or interms of relations between parenthetized constituentsin the now more commonly adopted annotated surfaceforms of sentences.We have designed Dislog, programming in logicwith discontinuities, which permits to expressrelations between non-contiguous elements in astructure in a simple, declarative and concise way.Dislog is an extension to Prolog; its procedural anddeclarative semantics are given in (Saint-Dizier1988b), computer applications like compiler writingand planning are given in (Saint-Dizier 1988a), its usein natural language parsing for free-phrase orderlanguages is given in (Saint-Dizier 1987).
In thepresent document we will focus on modellingmovement theory in GB (Chomsky 1982, 1986) andQuantifier Raising (May 1986), which have been inthe past two years our main guidelines to specifyDislog.
We do not have in mind to build a completemodel of GB theory, but we feel that the transfer ofsome of its main principles and results to the field ofnatural anguage processing isworth investigating andis very promising for reasons we will develophereafter.
We are also convinced that GB principlesshould be paired with other approaches ofAI to deal,for example, with the lexicon, lexical semantics,~,_~ - 87  -feature representation a d control systems and, finally,logical form construction.2.
Movement  Theory  in GBIn this section, we briefly summarize the mainaspects of movement theory (Chomsky 1982, 1986)and give several examples.
GB theory is a completerevision of the baroque set of rules andtransformations of the standard theory, achieving amuch greater expressive power and explanatoryadequacy.
GB theory is composed of a very small basecomponent (which follows X-bar syntax), a singlemovement rule and a small set of principles whoserole is to control the power of the movement rule.
GBexhibits a greater clarity, ease of understanding andlinguistic coverage (in spite of some points whichremain obscure).
The recent formalization of GBtheory has several attractive properties for the designof a computational model of natural languageprocessing, among which:-concision and economy of means,- high degree of parametrization,-modularity (e.g.
independence of filteringprinciples),- declarativity (e.g.
no order in the applicationof rules),-absence of intermediate structures (e.g.no deep slructure).GB theory postulates four levels: d-structure(sometimes not taken into account, like in ourapproach), s-structure (surface form of structuraldescription), phonetic form (PF) and logicalform (LF).
The latter two levels are derivedindependently from s-structure.
We will be mainlyinterested here in the s-structure level.
Movementtheory being also applicable, with different parametervalues, to LF, we will also show how our approach iswell-adapted tocharacterize LF level from s-structurelevel.2.1 Move-cx and  const ra in tsIn GB, grammaticality of a sentence is based onthe existence of a well-formed annotated surface formof that sentence.
Thus, no real movements ofconstituents occur and additional computational ndrepresentational problems are avoided.
Up to now veryfew and only partial works have been undertaken tomodel principles of GB theory.
Among them, let usmention (Berwick and Weinberg 1986), (Stabler 1987)and (Brown et al 1987).
There is however anincreasing interest for this approach.GB theory postulates a single movement- 88 -rule, more-a, controlled by principles and filters.This very general rule states:Move any constituent a to any posit ion.The most immediate constraints are that tx ismoved to the left to an empty position (a subjectposition which is not 0-marked) or is adjoined to aCOMP or INFL node (new positions are created fromnothing, but this not in contradiction with theprojection principle).
Constraints and filters controlmovement but they also force movement.
Forexample, when a verb is used in the passive voice, itcan no longer assign case to its object.
The object NPmust thus move to a place where it is assigned case.The (external) subject 0-role being also suppressed,the object NP naturally moves to the subjectposition, where it is assigned case, while keeping itsprevious 0-role.Another immediate constraint is the 0-criterion:each argument has one and only one 0-role and each0-role is assigned to one and only one argument.
Suchroles are lexically induced by means of the projectionprinciple (and by lexical insertion), confering thus anincreasing role to lexical subeategorization.
Finally,government gives a precise definition of what aconstituent can govern and thus how the projectionprincipled is handled.Move- ix  is too abstract to be directlyimplementable.
It needs to be at least partiallyinstantiated, in a way which preserves its generalityand its explanatory power.
In addition, while thetheory is attaining higher and higher levels ofadequacy, the interest for analysing the specifics ofparticular constructions is decreasing.
As aconsequence, we have to make explicit elements leftin the shade or just neglected.
Finally, the featuresystem implicit in GB theory has also to beintegrated.2.2 Examples  o f  movementsAll the examples given below are expressed withinthe framework of head-initial languages like Frenchand English.
Let us first consider the relativeclause construction.
In a relative clause, an N ispronominalized and moved to the left and adjoined to aCOMP node.
A trace of N is left behind andco-indexed with the pronominalized N:(1) \[COMP N(+Pro)i ........ \[N2 trace i \] ...... \]as in:\[COMP thati John met IN2 trace i \] yesterday \]Where i is the co-indexation link.The case of the passive construction is alittle more complicated and needs to be explained.
Anobject NP is moved to a subject position because thepassivisation of the verb no longer allows the verb toassign case to its object NP and a 0-role to its subjectNP (in an indirect manner):at d-structure we have, for example:\[ \[NP \] \[INFL gives \[ N2 a book \] \] \]and at s-structure we have:\[ \[NP a booki \] \[INFL is given \[N2 tracei \] \].At d-structure, the subject NP is here notmentioned.
In a passive construction, the subject isnot moved to a PP position (by N2).
0-roles areredistributed when the verb is passivized (thisillustrates once again the prominent role played by thelexical description and the projection principle) and aby-complement with the previous 0-role of thesubject NP is created.Another example is the subject-to-subject raisingoperation, where:It seems that Jane is on timebecomes:Jane seems to be on time.Jane moves to a position without 0-role (it is not0-marked by seem ).
When the clause is on time is inthe infinitive form then the subject NP position is nolonger case-marked, forcing Jane to move:\[INFL Janei seem \[COMP lracei \[VP to be ontime \] \] \]Finally, let us consider the wh-construalconstruction occuring at logical form (I.F) (May 86).The representation f:Who saw what ?is at s-structure:\[COMP2 \[COMP whoi \] \[INFL tracei saw'\[Nwhat \] \] \]and becomes at IF:\[COMP2 \[COMP whatj \] \[COMP whoi \] \] \[INFLtracei saw tracej \] \].Both what and who are adjoined to a COMP node.This latter type of movement is also restricted bya small number of general principles based on thetype of landing site a raised quantifier may occupy andon the nature of the nodes a quantifier can cross overwhen raised.
The first type of constraint will bedirectly expressed in rules by means of features; thelatter will be dealt with in section 5 devoted toBounding theory, where a model of the subjacencyconstraint is presented.2.3 Towards  a computat iona lexpression of movementsMovements have to be expressed in a simplecomputational way.
Let us consider the relative clauseconstruction (wh-movement in general), all the otherexamples can be expressed in the same way.Relative clause construction can be expressed in adeclarative Way by stating, very informally, that:within the domain of a COMP, an N(+Pro) isadjoined to that COMP and somewhere lse in thatdomain an N2 is derived into a trace co-indexed withthat N(+Pro).
The notion of domain associated to anode like COMP refers to Bounding theory and willbe detailed in section 5, the constraint on theco-existence in that domain of an N(+Pro) adjoined toa COMP and, somewhere else, of an N2 derived into atrace can directly be expressed by constraints onsyntactic trees, and, thus, by constraints on prooftrees in an operational framework.
This is preciselythe main motivation of DISLOG that we now brieflyintroduce.3.
An In t roduct ion  to D ISLOG,P rogramming in Log ic  w i thD iscont inu i t ies .Dislog is an extension to Prolog.
It is a languagecomposed of Prolog standard clauses and of Dislogclauses.
The computational spects are similar to thatof Prolog.
Foundations of DISLOG are given in(Saint-Dizier 1988b).
We now introduce and brieflyillustrate the main concepts of Dislog.3.1.
Dis iog c lausesA Dislog clause is a t-mite, unordered set of Prologclauses fi of the form:{f l  ,f2 .
.
.
.
.
.
.
.
.
fn }.The informal meaning of a Dislog clause is: iraclause f i  in a Dislog clause is used in a given prooftree, then all the other ~ of that Dislog clause mustbe used to build that proof tree, with the samesubstitutions applied to identical variables.
Forexample, the Dislog clause (with empty bodies here,for the sake of clarity):{ arc(a/a), arc(e~9 3.means that, in a graph, the use of arc(a,b) toconstruct a proof is conditional to the use of arc(e~.If one is looking for paths in a graph, this means that- 89 -all path going through arc(a,b) will also have to gothrough arc(el).A Dislog clause with a single element isequivalent to a Prolog clause (also called definiteprogram clause).A Dislog program is composed of a set of Dislogclauses.
The definition of a predicate p in a Dislogprogram is the set of all Dislog clauses which containat least one definite clause with head predicate symbolp.
Here is an example of a possible definition for p:{ p(1), h :- t(X) }.
{ (p(X) :- tfX), p(X-1) ) ,  d(3) }.
{ p(5) }.A full example is given in section 3.3.3.2 Const ra in ing  D is iog  c lausesWe now propose some simple restrictions of theabove general form for Dislog clauses.
A first type ofrestriction is to impose restrictions on the order of useof Prolog clauses in a Dislog clause.
We say that aninstance of a clause ri precedes an instance of a clauserj in a proof tree if either i appears in that proof treeto the left of rj or if ri dominates rj.
Notice that thisnotion of precedence is independent of the strategyused to build the proof tree.
In the following diagram,the clause: a :- al precedes the clause b :- bl.
:/ \a bal blor:IalI!IblTo model this notion of precedence, we add toDislog clauses the traditional inear precedencerestriction otation, with the meaning iven above:a < b means that the clause with head aprecedes the clause with head b (clause numbers canalso be used).
When the clause order in a Dislogclause is complete, we use the more convenientnotation:fl /12 / .
.
.
.
.
.
.
.
.
.
.
.
/ fn.which means that fl precedes 12 which precedes 13etc...
The relation I is viewed as an accessibilityrelation.Another improvement to Dislog clauses is theadjunction of modalities.
We want to allow Prologclauses in a Dislog clause to be used several times.This permits to deal, for example, with parasitic gapsand with pronominal references.
We use the modalitym applied on a rule to express that this clause can beused any number of times in a Dislog clause.
Forexample, in:t :l.:e, mO ) :.the clause f3 can be used any number of times,provided that fl anti t2 are used.
Substitutions foridentical variables remain the same as before.Another notational improvement is the use of thesemi-colon ';' with a similar meaning as in Prolog tofactor out rules having similar parts:C.{a,b}.
and {a,c}can be factored out as:{a, (b ;c )} .which means that a must be used with either b or3.3 P rogramming in D is logHere is a short and simple example where Dislograms out to be very well-adapted.In a conventional programming language, there areseveral one-to-one or one-to-many relations betweennon-contiguous instructions.
For instance, there is arelation between a procedure and its correspondingcalls and another relation between a label declarationand its corresponding branching instructions.
Dislogrule format is very well adapted to express thoserelations, permitting variables to be shared betweenseveral definite clause in a Dislog clause.
Thesevariables can percolate, for example, addresses ofentrypoints.We now consider the compiler given in (Sterlingand Shapiro 86) which transforms a program writtenin a simplified version of Pascal into a set of basicinstructions (built in the argument)'.
This smallcompiler can be augmented with two Dislog rules:{procedure d claration, procedure call(s) }.
{ label statement, branching instruction(s) tolabel}.In order for a procedure call to be allowed to- 90 -appear before the declaration of the correspondingprocedure we do not state any linear precedencerestriction.
Furthemore, procedure call and branchinginstruction description rules are in a many-to-onerelation with respectively the procedure declaration andthe label declaration.
A procedure call may indeedappear several times in the body of a program (this isprecisely the role of a procedure in fact).
Thus, wehave to use the modality m as follows:{procedure declaration, re(procedure call) }.
{ label statement, re(branching instruction tolabel)}.In a parse tree corresponding to the syntacticanalysis of a Pascal program, we could have, forexample the following tree:proc caU(Address)proc_declaration(Address,Code) ?proc call(Address) ?p r o c _ c ~ ,The main calls and the Dislog rules are thefollowing:parse(Structure) --> \[program\],identifier(X), \[';'\],statement(Structure).statement((S;Sa)--> \[begin\],statement(S),rest_statement(Sa).statement(assign(X,V)) -->identifier(X), \[':='\],expression(V)./* procedure declaration and call */{ (statement(proc_decl(N,S))-->\[procedure\],identifier(N),statement(S),\[end\] ) ,m(statement(proc_call(N,S)) -->identifier(N) ) }./* label declaration and branching */{ (statement(label(N))-->identifier(N),\[':'\] ) ,m(statement(goto(N)) -->identifier(N)) }.We have carried out an efficient and completeimplementation for Dislog rules which are compiledinto Prolog clauses.4.
Express ing movement  rules inD is logA way of thinking to move-or (as in Sells 85) isthat it expresses the 'movement' part of a relationbetween two structures.
We quote the term movementbecause, in our approach, we no longer deal withd-structure and no longer have, thus, movements butrather long-distance r lations or constraints.We think that, in fact, move-vt is itself therelation (or prototype of relation) and that theconstraints (case assignment, 0-marking, boundingtheory, etc...) are just specific arguments orconstraints on that relation: everything is possible(relation) and constraints filter out incorrectconfigurations.
From this point of view, Dislog is asimple and direct computational model for move-or.4.1 Express ing  movement  inD is logThe relativisation rule given above is expressed ina straightforward way by a Dislog clause.
That Dislogclause is composed of two Prolog(-like) clauses.
Thefirst clause deals with the adjunction of the N(+Pro)to the COMP and the second clause deals with thederivation of the N2 into a trace.
A shared variable Ipermits to establish the co-indexation link.
TheDislog clause is the following, in which we adopt heX-bar syntax terminology:xp(comp,O,_,_, ) --> xp(n,O,pro(Case)J,_) ,xp(comp,O,_,_, ).
Ixp(n2,CaseJ,_) -- > trace(l).An xp is a predicate which represents anycategory.
The category is specified in the firstargument, the bar level in the second, syntacticfeatures in the third one (oversimplified here), thefourth argument is the co-indexation link and the lastone, not dealt with here, contains the logical formassociated with the rule.
Notice that using identicalvariables (namely here I and Case) in two differentclauses in a Dislog clauses permits to transfer featurevalues in a very simple and transparent way.The passive construction is expressed in a similarway.
Notice that we are only interested in thes-structure description since we produce annotated- 91 -surface forms (from which we then derive a semanticrepresentation).
The passive construction rule inDislog is:xp(infl,1 .
.
.
.
,_) --> xp(n,O,_J,_), xp(infl,1 .
.
.
.
,_)I xp(n,2,_,l,_)--> trace(l).Case and 0-role are lexically induced.
Following aspecification format like in (Sells 85), we have, forexample, for the verb to eat, the following lexicalentry:eat, V, (subject:NP, agenO, (object:NP, patienO,assigns no case to object.which becomes with the passive inflection:eaten, V, (object: NP, patient), assigns no case.
(the by-complement is also lexically induced by alexical transformation of the same kind with:iobject:NP, agent, case: ablative)Let us now consider the subject-to-subject raisingoperation.
At d-structure, the derivation of an N2 intothe dummy pronoun it is replaced by the derivation ofthat N2 into an overt noun phrase.
This is formulatedas follows in Dislog:xp( infl,2 , C as e .
.
.
.  )
-->xp(infl,1,_,_,_) txp(n~,,Case,l,_)--> trace(l).xp(n,2,Case,1, ),The movement construction rules given abovehave many similarities.
They can be informally puttogether to form a single, partially instaneiatedmovement rule, roughly as follows:( (xp( in f l ,1 ,  , , ) --> xp(n ,O,_ , l , _ ) ,xp(infl,1 .
.
.
.
,_) ) ;(xp( inf l ,2,Case .
.
.
.  )
--> xp(n,2,Case, l ,_) ,xp(infl,1,_,_,_) ; etc .... /xp(n2,(Case;pro(Case))?__) --> trace(l) .4.2 Other  uses of  D is log fornatural  language processingDislog has many other uses in natural languageprocessing.
At the semantic level, it can be used in aconvenient way as a computational model to deal withquantifier raising, with negation and modality operatorraising operations or to model some meaningpostulates in Montague semantics.
Dislog can alsoprovide a simple model for temporal relationsinvolving the notion of (partial) precedence ofactionsor events.Semantic interpretation r formula optimisationoften involves putting together or rewriting elementswhich are not necessarily contiguous in a formula.Dislog rules can then be used as rewriting rules.In order to properly anchor the N2, we have torepeat in the Dislog rule a rule from the basecomponent (rule with infl).
Once again, this islexically induced from the description of the verb toseem: when the N2 is raised, the propositionfollowing the completive verb has no subject, it istenseless, i.e.
in the infinitive form.
Finally, noticethe case variable, designed to maintain the case chain.The wh-construal construction atLF is dealt within exactly the same manner, an N2(+pro) is adjoinedto a COMP node:xp(comp,2,_,_,_) --> xp(n,2,pro(Case), l ,_),xp(comp,2,_ .
.
.
.  )
Ixp(n2,Cased,_)--> trace(l).Case permits the distinction between differentpronouns.
Notice that this rule is exactly similar tothe relative construction rule.Dislog rules describing movements can be used inany order and are independent of the parsing strategy.They are simple, but their interactions can becomequite complex.
However, the high level ofdeclarativity of Dislog permits us to controlmovements in a sound way.Finally, at the level of syntax, we have shown in(Saint-Dizier 87) that Dislog can be efficiently used todeal with free phrase order or free word orderlanguages, producing as a result a normalizedsyntactic tree.
Dislog can also be used to skip parts ofsentences which cannot be parsed.4.3 Formal  grammat ica l  aspects ofDis log rulesA Dislog rule can be interpreted by a te rmattribute grammar.
A term attribute grammar hasarguments which are terms.
It is a context-freegrammar that has been augmented with conditions (onarguments) enabling non-context-free aspects of alanguage to be specified.
A Dislog rule can betranslated as follows into a term attribute grammar.Consider the rule:a- ->b / c- ->d.a possible (and simple) interpretation is:a(X,Y) --> b(X,X1), add(Xl,\[c-->dl,Y).b(X,Y) --> withdraw(\[c-->d1,X,Y1), d(Y1,Y).When a-->b is executed, the rule c-->d is stored inan argument (X and Y represent input and outputarguments for storing these rules to be executed, likestrings of words are stored in DCGs).
c-->d can only- 92 -be executed if it is present in the list.
At the end ofthe parsing process, the list of rules to be executedmust be empty (except for rules marked with modalitym).
Notice also that shared variables in a Dislog ruleare unified and further percolated when rules are storedby the procedure add.however more general and more powerful because itdeals with unordered sets of rules rather than with asingle, rigid rewriting rule, it also permits tointroduce modalities and no extrasymbols (torepresents kips or to avoid loops) need to beintroduced (see Saint-Dizier 88b).Dislog rules can be used to expresscontext-sensitive languages.
For example, considerthe language L= {anbmcndm, n, m positive integers),it is recognized by the following rammar:S--> A,B,  C,D.A--> \[a\],A / C--> \[c\],C.B--> \[b\],B I D--> \[d\],D.A --> \[a\].
B --> \[b\].C--> lc\].
D --> \[dl.If a, b, c and d are mixed, with the only conditionthat the number of a's is equal to the number of o'sand the number of b's is equal to the number of d's,we have:{ (S --> \[a\], S), (S --> \[c\], S) 1.
{ (S --> \[b\], S), (S --> \[d\], S) }.S --> \[a\] / \[b\] / \[el / \[d\].Bounding nodes and modalities can also be addedto deal with more complex languages.4.4 Related worksDislog originates a new type of logic-basedgrammar that we call Contextual DiscontinuousGrammars.
The closest formalisms to Dislog areExtraposition Grammars (Pereira 1981) and GappingGrammars (DaM and Abramson 1984).
As opposed toGapping Grammars, Dislog permits to deal with treesrather than with graphs.
Gapping Grammars are oftype-0 and are much more difficult o write and tocontrol the power of.
Compared to ExtrapositionGrammars, Dislog no longer operates movements ofstrings and it is also more general since a Dislogclause can contain any number of Prolog clauseswhich can be used in any orderand at any place withina domain.
Extraposition grammars also involvegraphs (although much simpler than for GappingGrammars) instead of trees, which are closer to thelinguistic reality.
The implementation f Dislog isabout as efficient as the very insightfulimplementation provided by F. Pereira.5.
Bounding Theory in DislogBounding theory is a general phenomena commonto several linguistic theories and expressed in verysimilar ways.
Roughly speaking, Bounding theorystates constraints on the way to move constituents,or, in non-transformational terms on the way toestablish relations between on-contiguous elementsin a sentence.
The main type of constraint isexpressed in terms of domains over the boundaries ofwhich relations cannot be established.
For example, ifA is a bounding node (or a subtree which is asequence of bounding nodes), then the domain of A isthe domain it is the root of and no constituent Xinside that domain can have relations with aconstituent outside it(at least not directly):ABor, if A represents a sequence B ... C of boundingnodes:\De m p t y ~In Dislog, if an instance of a Dislog clause isactivated within the domain of a bounding node, then,the whole Dislog clause has to be used within thatdomain.
For a given application, bounding nodes arespecified as a small database of Prolog facts and areinterpreted by the Dislog system.More recently (Dahl, forthcoming), StaticDiscontinuity Grammars have been introduced,motivated by the need to model GB theory forsentence generation.
They permit o overcome somedrawbacks of Gapping Grammars by prohibitingmovements of constituents in rules.
They have alsoborrowed several aspects to Dislog (like boundingnodes and its procedural interpretation).
Dislog isIn the case of Quantifier Raising, we have severaltypes of bounding nodes: the nodes of syntax, nodescorresponding to conjunctions, modals, sometemporal expressions, etc... Those nodes are declaredas bounding nodes and are then processed by Dislog ina way transparent tothe grammar writer.6.
An implementat ion of Dislog for- 93 -natura l  language process ingWe have carried out an specific implementation ofDislog for natural language parsing described in(St-Dizier, Toussaint, Delaunay and SebiUot 1989).The very regular format of the grammar rules (X-barsyntax) permits us to define a specific implementationwhich, in spite of the high degree of parametrizationof the linguistic system, is very efficient.We use a bottom-up arsing strategy similar tothat given in (Pereira and Shieber 1987), with someadaptations due to the very regular ule format ofX-bar syntax rules, and a one-step look-aheadmechanism which very efficiently anticipates therejection of many unappropriate rules.
The sentenceswe have worked on involve several complexconstructions; they are parsed in 0.2 to 2 secondsCPU time in Quintus Prolog on a SUN 3.6workstation.7.
Perspect ivesIn this paper, we have presented a simple,declarative computational model for movement theoryin Government and Binding.
For that purpose, wehave introduced Dislog, a logic programminglanguage built on top of Prolog, designed to expressin a simple, transparent and concise way relations orconstraints between on-contiguous constituents in astructure.
Although Dislog is still in an early stage ofdevelopment, it seems a promising language fornatural language processing and also to represent andto program several kinds of problems where the ideaof non-contiguity is involved.
The efficientimplementation we have carried out permits to useDislog on a large scale.
We have designed a prototypeparser which includes our model of movement rules,the GB base component, a quite extensive l xicon andsemantic compositional rules to build logicalformulas.
We also use the same model for naturallanguage generation.AcknowledgementsI would like to thank A. Borillo, M. Borillo, C.Brown, V. Dahl, C. Delannay, G. Lapalme, P.Sebillot and J. Virbel for their comments on ealierversions of this work.
This project is supported bythe INRIA and by the PRC CommunicationHomme-machine of the CNRS.ReferencesBerwiek, R. and Weinberg, A., The GrammaticalBasis of Linguistic Performance, MIT Press, 1986.Brown, C., Pattabhiraman, T., Massicotte, P.,Towards a Theory of Natural Language Generation:the Connection between Syntax and Semantics, in:Natural Language Understanding and LogicProgramming H, V. Dahl and P. Saint-Dizier Edts,North Holland 1987.Chomsky, N., Lectures on Government andBinding, Foris Pub., Dordrecht, 1981.Chomsky, N., Barriers, Linguistic Inquirymonograph rib.
13, MIT Press 1986.Colmerauer, A., Metamorphosis Grammars, in:Natural Language Understanding by Computer,Lecture notes in Computer Science, L. Bole Edt.,Springer-Verlag, 1978.Dahl V., Abramson, H., On Gapping Grammars,Proc.
of the 3rd Logic Programming Conference,Uppsala, 1984.Farinas del Cerro, L., Arthaud, A., Molog:Programming in Modal Logic, Fifth GenerationComputing journal, 1985.May, R., Logical Form, Linguistic Inquirymonograph nb.
12, MIT Press, 1986.Mukai, K., Unification over ComplexIndeterminates, Fifth Generation Computer journal,1985.Nadathur, G., Miller, D., An overview of2.-Prolog, Technical report MS-CIS-88-40, Universityof Pennsylvania, 1988.Pereira, F., Logic for Natural Language Analysis,SRI technical report 275, Stanford, 1985.Pereira, F., Sheiber, S., Prolog for NaturalLanguage Analysis, CSLI lecture Notes, ChicagoUniversity Press, 1987.Saint-Dizier, P., Contextual DiscontinuousGrammars, in: Natural Language Understanding andLogic Programming H, V. Dahl and P. Saint-DizierEdts, North Holland, 1987.Saint-Dizier, P., Dislog, Programming in Logicwith Discontinuities, Computational Intelligence,vol.
5-1, 1988.Saint-Dizier, P., Foundations of Dislog,programming in Logic with Discontinuities, inproc.
of FGCS'88, Tokyo, 1988.Saint-Dizier,P., Toussaint,Y.,Delaunay,C.,Sebillot,P., A Natural language processing systembased on principles of government and binding theory,in Logic Programming and Logic grammars, P.Saint-Dizier and S. Szpakowicz Edts, Ellis Horwood,1989.Sells, P., Lectures on Contemporary SyntacticTheories, CSLI lecture notes no 3, ChicagoUniversity Press, 1985.Stabler, E., Parsing with Explicit Representationsof Syntactic Constraints, in: Natural LanguageUnderstanding and Logic Programming II, V. Dalaiand P. Saint-Dizier Edts, North Holland, 1987.Sterling, L., Shapiro, S., The Art of Prolog,M1T Press, 1986.- 94 -
