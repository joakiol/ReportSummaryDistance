A Fast  and  Por tab le  Rea l i zer  for Text  Generat ion  SystemsBenoit Lavoie and Owen RainbowCoGenTex, Inc.840 Hanshaw Road, Ithaca, NY 14850, USAbenoit, owen@cogentex, com1 IntroductionSystems that generate natural language output aspart of their interaction with a user have becomea major area of research and development.
Typ-ically, natural language generation is divided intoseveral phases, namely text planning (determiningoutput content and structure), sentence planning(determining abstract arget language resources toexpress content, such as lexical items and syntac-tic constructions), and realization (producing the fi-nal text string) (Reiter, 1994).
While text and sen-tence planning may sometimes be combined, a real-izer is almost always included as a distinct module.It is in the realizer that knowledge about the targetlanguage resides (syntax, morphology, idiosyncraticproperties of lexical items).
Realization is fairly wellunderstood both from a linguistic and from a com-putational point of view, and therefore most projectsthat use text generation do not include the realizerin the scope of their research.
Instead, such projectsuse an off-the-shelf realizer, among which PENMAN(Bateman, 1996) and SURGE/FUF (Elhadad andRobin, 1996) are probably the most popular.
In thistechnical note and demo we present a new off-the-shelf realizer, REALPRO.
REALPRO is derived fromprevious systems (Iordanskaja et al, 1988; Iordan-skaja et al, 1992; Rambow and Korelsky, 1992), butrepresents a new design and a completely new imple-mentation.
REALPRO has the following characteris-tics, which we believe are unique in this combination:?
REALPRO is implemented in C++.
It is there-fore both fast and portable cross-platform.?
REALPRO can be run as a standalone server,and has C++ and Java APIs.?
The input to REALPRO is based on syntac-tic dependency (roughly, predicate-argument andpredicate-modifier st ucture).?
Syntactic and lexical knowledge about the tar-get language is expressed in ASCII files which areinterpreted at run-time.
It can easily be updated.265We reserve a more detailed comparison with PEN-MAN and FUF, as well as with AlethGen/GL (Coch,1996) (which is perhaps the system most similar toREALPRO, since they are based on the same linguis-tic theory and are both implemented with speed inmind), for a more extensive paper.
This technicalnote presents REALPRO, concentrating on its struc-ture, its coverage, its interfaces, and its performance.2 Input StructureThe input to REALPRO is a syntactic dependencystructure.
It is called the Deep-Syntactic Struc-ture or "DSyntS" for short, and is inspired in thisform by I. Mel'~uk's Meaning-Text Theory (Mel'~uk,1988).
This representation has the following salientfeatures:?
The DSyntS is an unordered tree with labelednodes and labeled arcs.
* The DSyntS is lexicalized, meaning that thenodes are labeled with lexemes (uninflected words)from the target language.?
The DSyntS is a dependency structure andnot a phrase-structure structure: there are no non-terminal nodes, and all nodes are labeled with lex-emes.?
The DSyntS is a syntactic representation, mean-ing that the arcs of the tree are labeled with syn-tactic relations such as "subject" (represented inDSyntSs as I), rather than conceptual or semanticrelations uch as "agent".?
The DSyntS is a deep syntactic representation,meaning that only meaning-bearing lexemes are rep-resented, and not function words.First, consider the simple example in Figure 1,which corresponds to the sentence (1):(1) This boy sees Mary.Lexemes which are in the lexicon are in uppercase,those that are not are in lowercase.
For lexemes notin the lexicon it is necessary to specify the word classseeboy MaryATTR lTHIS 1Figure 1: Input structure for sentence (1)as a feature, e.g.
word-class:verb.
For readability, weomit these features in the tree diagrams.
Subjectand object are indicated by the arc labels I and II,respectively, and modification is represented by thearc label ATTR.
If we add feature question:+ to theverb and feature number:pl to the node for boy, thenwe get (2):(2) Do these boys see Mary?This illustrates that function words (do) need notbe included in the input DSyntS, and that syntac-tic issues uch as subject-verb and noun-determineragreement are handled automatically.
The tree inFigure 2 yields (3):(3) Mary winning this competition meansshe can study in Paris and can live with heraunt, whom she adores.meanwin mood: pr~-p,, study cooy  ,Mary competitionr^rR$ AND2 Mary \CANTHIS 1 v g~=: ~ \live Arra~A ~ v r a  IN1WITH1 CAN ,l~nl Parisaunt el: person.22s~d~: tom Mary adorepro: proMary gender: fern aunt ~a:p~o.-22pro: pro gender: fernFigure 2: Input structure for sentence (3)Note that REALPRO does not perform the task oflexical choice: the input to REALPRO must specifyall meaning-bearing lexemes, including features forfree pronominalization.
Also, REALPRO does notmap any sort of semantic labels to syntactic ate-gories.
These tasks, we assume, are handled by aseparate component (such as a sentence planner).This has the advantage that the sentence plannercan be unabashedly domain-specific, which is neces-sary in today's applications, ince a broad-coverageimplementation f a domain-independent theory ofconceptual representations and their mapping to lin-guistic representations is still far from being realistic.~rthermore, there is no non-determinism in REAL-PRO: the input to REALPRO fully determines theoutput, though the input is a very abstract linguis-tic representation which is well suited for interfac-ing with knowledge-based applications.
This meansthat REALPRO gives the developer control over theoutput, while taking care of the linguistic details.3 Sys tem Arch i tec tureThe architecture ofREALPRO is based on Meaning-Text Theory, which posits a sequence of correspon-dences between different levels of representation.In REALPRO, each transformation is handled bya separate module.
REALPRo is really a realizershell, which allows for a (run-time) configuration us-ing specially formatted Linguistic Knowledge Bases(LKBs) which state grammar ules, lexical entries,and feature defaults.
Each module draws on one orseveral LKBs.
The lexicon is an LKB which is usedby all components.
Figure 3 shows the architecture.?
First, the input DSyntS is checked for syntactic va-lidity and default features from the Default FeatureSpecification are added.?
The Deep-Syntactic Component takes as input aDSyntS.
Using the DSynt grammar and the lexi-con, it inserts function words (such as auxiliariesand governed prepositions), and produces a seconddependency tree, the surface-syntactic structure orSSyntS, with more specialized arc labels.?
The Surface-Syntactic Component linearizes thenodes of the SSyntS, which yields the deep-morphological structure, or DMorphS.
It draws onthe SSynt grammar, which states rules of linearprecedence according to arc labels.?
The Deep-Morphological Component inflects theitems of the DMorphS, yielding the Surface-Morphological Structure (SMorphS).
It draws on in-formation from the lexicon, as well as on a default in-flection mechanism (currently hard-coded in C++).?
The Graphical Component adds abstract punctu-ation and formatting instructions to the SMorphS(including "point absorption"-see (White, 1995)),yielding the Deep-Graphical Structure (DGraphS).?
Ad-hoc formatters transform the DGraphS intoformatting instructions for the targeted outputmedium.
Currently, REALPRo supports ASCII,HTML, and RTF output.266Zealiater Input~DSyntS~ DSynt CheckerDSyntSDSynt ComponentSSyntS"1 SSynt ComponentDM~rphSDMorph Component ISMo~phSI Graph Component IASCII Formatter I I HTML Formatter I I RTF Formatter~Defau l ts~-IFigure 3: System architecture4 L ingu is t i c  Knowledge BasesAs mentioned in Section 3, REALPRO is configuredby specifying several LKBs.
The system comes withLKBs for English; French is currently under devel-opment.
Normally, the user need not change the twogrammar LKBs (the DSynt and SSynt grammars),unless the grammar of the target sublanguage is nota subset of English (or French).
However, the usermay want to extend the lexicon if a lexeme with ir-regular morphology is not in it yet.
(Recall thatnot all words in the input representation need be inthe lexicon.)
For example, in order to generate saw(rather than the default seed) for the past tense ofto see, the following entry would be added to thelexicon.LEXEME : SEECATEGORY : verbMORPHOLOGY: \[(\[mood:past-part\] seen \[inv\] )(\[tense:past\] saw \[inv\] )\]The user may also want to change the defaults.For example if in his/her application all sentencesmust be in past tense, the user can set the defaulttense to be past rather than present as follows:DEFAULT: verb \[ tense:past mood:ind \]5 Coverage  o f  the  Eng l i sh  GrammarThe English grammar currently covers a wide rangeof syntactic phenomena:?
Full range of verbal forms (such as compoundtenses, aspects, passive voice, and so on), includ-ing negation and questions.
Also subject-verb agree-ment.?
Coordination of both nouns and clauses.?
Relative clauses (both on subject and object).?
Default word order; certain word order vari-ations (including so-called "topicalization", i.e.fronting of adjuncts or non-subject complements)are controled through features.?
Full English morphology, including a full rangeof pronominal forms (personal pronouns, possessivepronouns, relative pronouns).?
Full range of punctuation, such as commasaround descriptive relative clauses.Most of these points are illustrated by the inputin Figure 2.
Phenomena currently not handled au-tomatically include certain types of "fancy syntax"such as clefts and it-clefts (though these can be gen-erated by specifying the surface structure in the in-put), as well as long-distance dependencies such asThese are books which I think you should buy (wherewhich is an argument of buy).6 In ter facesREALPRO is currently distributed with a socket in-terface which allows it to be run as a standaloneserver.
It has an application programming interface(API), available in C++ and Java, which can beused to integrate REALPRO in applications.
Fortraining, debugging, and demonstration purposes,REALPRO can also be used in interactive mode to re-alize sentences from ASCII files containing syntacticspecifications.
The following ASCII-based specifica-tion corresponds to the DSyntS of sentence (2):SEE \[ quest ion:+ \]( I boy \[ number:pl \]( ATTR THIS1 )II Mary \[ class:proper_noun \] )In this definition, parentheses 0 are used to specifythe scope of dependency while square brackets ~ areused to specify features associated with a lexeme.REALPRO can output text formatted as ASCII,HTML, or RTF.
In addition, REALPRO can also out-put an ASCII representation f the DGraphS thata user application can format in application-specificways.7 System Per fo rmanceThe following table shows the runtime for sentencesof different lengths.
These sentences are all of theform This small girl often claims that that boy oftenclaims that Mary likes red wine, where the middleclause that that boy often claims is iterated for thelonger sentences.
The row labeled "Length" refers tothe length of the output string in words.
Note thatthe number of output words is equal to the numberof nodes in the SSyntS (because it is a dependencytree), and furthermore the number of nodes in the267SSyntS is greater than or equal to the number ofnodes in the DSyntS.
(In our case, the number ofnodes in the input DSyntS is equal to the number ofwords in the output string.)
The row labeled "Sec"represents average xecution time (over several testruns) for the sentence of the given input length, inseconds, on a PC with a 150MHz Pentium processorand 32 Megs of RAM.ILen hl 5 110115 20130140150Sec .11 .17 .20 .28 .44 .58 .72We also tested the system on the syntacticallyrather varied and complex input of Figure 2 (whichis made up of 20 words).
The average runtime forthis input is 0.31 seconds, which is comparable tothe runtime reported above for the 20 word sen-tence.
We conclude that the uniformity of the syn-tactic constructions found in the sentences used inthe above test sequence does not influence the re-sults.The complexity of the generation algorithm de-rives primarily from the tree traversals which mustbe performed twice, when passing from DSyntS toSSyntS, and from SSyntS to the DMorphS.
Let n bethe length of the output string (and hence an up-per bound on the size of both DSyntS and SSyntS).At each node, each rule in the appropriate grammar(deep- or surface-syntactic) must be checked againstthe subtree rooted at that node.
This tree match-ing is in the general case exponential in n. How-ever, in fact it is dependent on two variables, themaximal size of grammar ules in the grammar (orn, whichever is greater), and the branching factor(maximum number of daughter nodes for a node)of the input representation.
Presumably because ofdeeper facts about language, the grammar ules arequite small.
The current grammar does not have anyrules with more than three nodes.
This reduces thetree matching algorithm to polynomial in n. Fur-thermore, while the branching factor of the inputtree can in theory be n - 1, in practice it will bemuch smaller.
For example, all the input trees usedin the tests discussed above have branching factorsof no more than 5.
We thus obtain de-facto linearperformance, which is reflected in the numbers givenabove.8 StatusThe system is fully operational, runs on PC as wellas on UNIX work stations, and is currently usedin an application we have developed (Lavoie et al,1997) as well as in several on-going projects (weatherreport generation, machine translation, project re-port generation).
REALPRO is licensed free of chargeto qualified academic institutions, and is licensed fora fee to commercial sites.AcknowledgmentsThe development of REALPRo was partially supportedby USAF Rome Laboratory under contracts F30602-93-C-0015, F30602-94-C-0124, and F30602-92-C-0163,and by DARPA under contracts F30602-95-2-0005 andF30602-96-C-0220.
We are grateful to R. Kittredge, T.Korelsky, D. McCullough, A. Nasr, E. Reiter, and M.White as well as to three anonymous reviewers for help-ful comments about earlier drafts of this technical noteand/or about REALPRo.ReferencesBateman, J.
A.
(1996).
KPML development envi-ronment.
Technical report, Institut ffir IntegriertePublikations- und Informationssysteme (IPSI), GMD.Coch, J.
(1996).
Overview of AlethGen.
In Proceedingsof the Eighth International Natural Language Genera-tion Workshop (INLG '96) (Demonstrations Volume),Herstmonceux Castle, Sussex.Elhadad, M. and Robin, J.
(1996).
An overview ofSURGE: a reusable comprehensive syntactic realiza-tion component.
In Proceedings of the Eighth In-ternational Natural Language Generation Workshop(INLG '96) (Demonstrations Volume), HerstmonceuxCastle, Sussex.Iordanskaja, L., Kim, M., Kittredge, R., Lavoie, B., andPolgu~re, A.
(1992).
Generation of extended bilin-gual statistical reports.
In Proceedings ofthe l~th In-ternational Conference on Computational Linguistics(COLXNG'9~).Iordanskaja, L., Kittredge, R., and Polgu~re, A.
(1988).Implementing the Meaning-Text Model for languagegeneration.
Paper presented at COLING-88.Lavoie, B., Rainbow, O., and Reiter, E. (1997).
Cus-tomizable descriptions of object-oriented models.
InProceedings of the Conference on Applied Natural Lan-guage Processing (ANLP'97), Washington, DC.Mel'~uk, I.
A.
(1988).
Dependency Syntax: Theory andPractice.
State University of New York Press, NewYork.Rainbow, O. and Korelsky, T. (1992).
Applied text gen-eration.
In Third Conference on Applied Natural Lan-guage Processing, pages 40-47, Trento, Italy.Reiter, E. (1994).
Has a consensus NL generation archi-tecture appeared, and is it psycholinguistically plau-sible?
In Proceedings of the 7th International Work-shop on Natural Language Generation, pages 163-170,Maine.White, M. (1995).
Presenting punctuation.
In Proceed-ings of the FiSh European Workshop on Natural Lan-guage Generation (EWNLG5).268
