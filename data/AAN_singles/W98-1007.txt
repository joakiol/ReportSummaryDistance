Arabic Morphology Using Only Finite-State OperationsKenneth  R. BEESLEYXerox Research Centre EuropeGrenoble Laboratory6, chemin de Maupertuis38240 MEYLANFranceKen.
Beesley?xrce.
xerox, comAbst rac tFinite-state morphology has been successfulin the description and computational imple-mentation of a wide variety of natural lan-guages.
However, the particular challenges ofArabic, and the limitations of some implementa-tions of finite-state morphology, have led manyresearchers to believe that finite-state powerwas not sufficient o handle Arabic and otherSemitic morphology.
This paper illustrates howthe morphotactics and the variation rules ofArabic have been described using only finite-state operations and how this approach hasbeen implemented in a significant morpholog-ical analyzer/generator.1 In t roduct ionIn Arabic, as in other natural languages, thetwo challenges of morphological nalysis are thedescription of 1) the morphotactics and 2) thevariation rules.
Morphotactics i the study ofhow morphemes combine together to make well-formed words.
Variations are the discrepan-cies between the underlying or morphophone-mic strings and their surface realization, whichare either phonological or orthographical stringsdepending on the purpose of the grammar.The key insight and claim of the finite-stateapproach to morphology (Karttunen, 1991;Karttunen et al, 1992; Karttunen, 1994)isthat both morphotactics and variation gram-mars can be written as regular expressions,which are compiled and implemented on com-puters as finite-state automata.
Such grammarsare interesting theoretically because they arehighly constrained; and in practical computa-tional linguistics for natural anguages, finite-state automata re fast, usually compact insize, bidirectional, combinable using all validfinite-state operations, and consultable usinglanguage-independent lookup code.Finite-state approaches to morphology, in-cluding the readily available implementationknown as Two-Level Morphology (Koskenniemi,1983; Antworth, 1990), have been shown towork in significant projects for French, English,Spanish, Portuguese, Italian, Finnish, Turkishand a wide variety of other natural anguages.But despite the high attractiveness of finite-state computing, many investigators have con-cluded that finite-state techniques are not ad-equate for describing Semitic root-and-patternmorphology.
This paper will present he casethat fully implemented finite-state morphologycan be and has been used successfully for Ara-bic.2 Regu lar  Express ionsWhen writing a finite-state morphologicalgrammar, linguists tate morphotactic and vari-ation rules in the metalanguage of regular ex-pressions or in higher-level languages that areconvenient shorthand notations for complexregular expressions.2.1 Regular Expressions, RegularRelations, and Finlte-StateTransducersA regular expression that contains an alphabetof one-level symbols defines a regular languageand compiles into a finite-state machine (FSM)that accepts this regular language.
A regularexpression that contains an alphabet of pairedsymbols defines a regular relation (a relationbetween two regular languages) and compilesinto a finite-state transducer (FST) that mapsfrom every string of one language into stringsof the other.
H the necessary finite-state algo-rithms and compilers are available, componentsof the grammar, including various sublexicons50and rules, can be compiled into separate trans-ducers and then combined together using anyoperations that are mathematically valid.The Xerox implementation of finite-statemorphology includes a complete range of fun-damental algorithms (concatenation, union, in-tersection, complementation, etc.)
plus higher-level shorthand languages uch as lexc (Kart-tunen, 1993), twolc (Karttunen and Beesley,1992) and Replace Rules (Karttunen, 1995;Karttunen and Kempe, 1995; Karttunen, 1996).2.2 Finite-State OperationsWhen defining morphotactics or variations viaregular expressions, the linguist has access to allthe operations that are mathematically valid onregular languages and relations.
The followingis a brief outline of regular expressions in theXerox notation:For each symbol s, the regular expression sdenotes a regular language consisting of the sin-gle string "s".
If A and B are regular languages,then the regular expressions in Figure 1 also de-note regular languages.
The cross-product of Aand B, denoted A .x.
B, relates each string inA, the upper language, to every string of B, thelower language, and vice versa.
A .x.
B thusdenotes a regular elation.
Where u and 1 aresymbols, u:l is a notation equivalent to u .x.
1.For formal reasons, relations are not quite asmanipulable as simple languages; in particular,relations are closed under concatenation, union,and iteration, but not under intersection, sub-traction or complementation.Relations are closed under composition, asomewhat more difficult operation to concep-tualize.
Let A, B and C denote regular lan-guages; let X denote a regular elation betweenan upper-side language A and a lower-side lan-guage B; and let Y denote a regular relationbetween the upper-side language B and a lower-side language C. Then the composition of Yunder X, denoted X .o.
Y, denotes a regularrelation Z that maps directly between languagesA and C; the intermediate language B disap-pears in the process of composition.In defining natural-language morphotactics,union and concatenation are the basic oper-ations required.
Variation rules and long-distance-dependency filters are applied usingcomposition.
And we shall illustrate below howArabic root-and-pattern interdigitation can beperformed via intersection and composition.3 Regu lar -Express ion  Grammars3.1 Concatenat ive Morphotact icsIndividual morphemes of natural anguage typ-ically consist of one or more symbols, simplyconcatenated together.
Thus the English mor-phemes , ed and ing represent the concatena-tions \[s\], \[e d\] and \[i n g\] respectively.
Where0 represents e (the zero-length string), the setof regular verb suffixes of English can be repre-sented as the union \[Is\] I \ [e d\] \[ \[i n g\] I 0\].The set of verb stems taking these endings in-cludes wreck, walk, and talk, which can also beformalized using concatenation a d union: \[\[wr e c k\] I \[w a 1 k\] \] It a 1 k\]\].
The unionof endings can then be concatenated onthe endof the union of verb stems to form a larger ex-pression that denotes a language that looks likea subset of English verbs: \[\[w r e e k\] I \[w a 1k\] l  \[t a l k\]\] \[\[s\]l \[e d\] I\[i n g\] l  0\].If the linguist defines the symbols +Verb,+3PS (for "third personal singular"), +Past ,+PrPar t  (for "present participle") and+Bare,  the following expression denotesthe relation that maps lower-side (surface)string like "talks" to the upper-side string"talk+Verb+3PS", and vice-versa.
The pre-ceding plus signs of these "tag" symbols areincluded simply to improve the human read-ability of the resulting strings; because the plussign is normally a special Kleene Plus symbolin regular expressions, it is literalized in theexamples below with a preceding percent sign.\[\[w:w r:r e:e c:c k:k\] I \[w:w a:a hi k:k\]I \[t:t a:a hl k:k\]\] %+Verb:O \[\[%+3PS:s\] I\ [%+Past:e O:d\] I \ [~+PrPar t : i  O:n O:g\] I%+Bare:O\]By convention i  Xerox regular expressions de-noting relations, the relation s:s can be writtensimply as s, as in the following:\[\[w r e c k\] I \[w a I k\] I It a 1 k\]\]?
%+Verb:0 \[\[%+3PS:s\] I [%+Past :e 0:d\] l\ [%+PrPart : i  0:n 0:g\] 1%+Bare:0\]The English-verb fragment shown here wascarefully chosen to be simple.
However, thereare three classes of phenomena for which unionand concatenation, by themselves, are general\])'inadequate or at least very inconvenient for de-scribing all and only the strings that appear ina natural anguage:510\[A\]ABA \] BA&B(A)A*A+A/B?A-B\B"Bthe zero-length string (often called E)bracketing; denotes the same language as Athe concatenation of B after Athe union of A and Bthe intersection of A and Boptionality, equivalent to \[ A I 0 \]Kleene star iteration, zero or more concatenations of Aequivalent to \[ A A* \]) i.e.
one or more concatenations of Athe regular language A, ignoring any instances of Bany symbol, i.e.
the union of all single-symbol stringslanguage A, minus all strings in language Bequivalent to \[?
- B\], the union of all single-symbolstrings minus the strings in Bequivalent to \[?
* - B\], the complement of BFigure h Some Finite-State Notations...Discontiguous dependencies between mor-phemes in a word,Non-concatenative morphotactic processessuch as reduplication and Semitic interdig-itation, andVariations, typically assimilations, dele-tions and epentheses, that map between theabstract morphophonemic strings and theircorrect surface realizations.We continue with illustrations of how such phe-nomena can be handled in a finite-state gram-mar.3.2 D iscont iguous  Dependenc iesTo illustrate discontiguous dependencies, let usignore for a second the internal structure of Ara-bic stems and postulate a set of noun stems in-cluding kaatib ("scribe"), kitaab ("book"), anddaaris ("student"), formalized as \[\[k a a t ib\] \] \[k i t a a b\] I \[d a a r i s\]\].
The setof possible case endings includes the definite setu (nominative), a (accusative) and i (genitive)as well as the indefinite set un (nominative),an (accusative) and in (genitive).
1 The moststraightforward way to proceed to describe themorphotactics of a fragment of Arabic nouns isto concatenate the possible case endings ontothe noun stems.
Informative multicharacter1The spellings un,  an  and in  roughly represent hepronunciation.
Orthographically, the indefinite case end-ings consist of single symbols that are distinct from thesingle symbols used for definite endings.
(P rep%+:b  0:i) (Art?70+:l) \[\[k a a ti b\] \[ \[k i t a a b\] I \[d a a ri s\]\] ~+Noun:O \[ \[%+Def:O \ [%+Nom:u\] ~+Acc :a  \] %+Gen: i \ ] \ ]  I \ [%+Indef :O\ [%+Nom:u  0:n 1%+Acc :a  0 :n \ ]  %+Gen: i0"n\]\]\]Figure 2: An Overgenerating Lexicon Fragmentfor Arabic Nounssymbols, +Noun,  +Def  (for "definite"), + In -def  (for "indefinite") and +Nom,  +Acc  and+Gen are defined for the upper-side language.Ilk a a t i b\] t \[k i t a a b\] I \ [da  ar i s\]\] +Noun:0  \ [ \ [%+Def :0  \ [%+Nom:u1%+Acc :a  I ~o+Gen:i \ ] \ ]  I \ [7o+Indef :0\ [~+Nom:u  0:n 1%+Acc :a  0:n I ~+Gen: i0"n\]llThe resulting relation includes pairs of stringslikeUpper: kaatib+Noun+Indef+AccLower: kaatibanArabic nouns can also have a prefixed definitearticle, which we will represent as l, and prefixedprepositions like bi.
Both are optional, and ifbi and l cooccur, then bi must come first.
Themost straightforward way to allow these prefixesis to concatenate them on the front of the regu-lar expression as in Figure 2.
P rep+ and Ar t+are interpreted as multicharacter symbols, andthe parentheses indicate optionality, as shownin Figure 1.52However, Arabic words with a prefixed defi-nite article l are in fact precluded from takingindefinite case suffixes.
And words with a pre-fixed bi are compatible only with genitive casesuffixes.
The expression, as written in Figure 2,overgenerates, producing ill-formed string pairslike the following:Upper: hrt+kaatib+Noun+Indef+AccLower: IkaatibanUpper: Prep+Art+kaatib+Noun+Def+NomLower: bilkaatibuIt is possible to rewrite the regular expressionin various ways to eliminate the overgeneration,but this is tedious and dangerous, requiring themaking and subsequent parallel maintenance ofmultiple copies of the noun stems.
In practice, itis much more convenient to let the core lexiconovergenerate and subsequently filter out the badstrings, either at compile time or at runtime.The most straightforward method is to removethe ill-fonued strings via composition of finite-state filters.
Starting with the overgeneratinggrammar of Figure 2, one set of illegal stringsto be eliminated contains both the Ar t+ andthe +Indef  symbols on the upper side.
Wecan characterize these illegal strings in a regularexpression:?
* Ar t~+ 7" ~+Indef  ?
*Other illegal strings contain P rep+ and theneither +Nom or +Acc  on the upper side.7" PrepS'o+ ?
* \[?\]'o+Nom \] ~+Acc \ ]  ?
*The union of these two expressions character-izes the ill-formed upper-side strings to be elim-inated, and the complement (notated ") of thatunion denotes the good strings."\[\[?
* Ar t~+ ?
* ~+Indef  7*\] I \[?
*P rep%+ ?
* \[?
'/o+Nom I ?\]'oWAcc\] ?
*\]\]When this "filter" expression is composed ontop of the overgenerating lexicon transducer,only the legal strings are matched, and the ille-gal strings are in fact eliminated from the result,which is again a finite-state transducer.
Thereare several variations of this method that pro-duce the same effect (Beesley, 1998d), with dif-ferent penalties in the size of the resulting trans-ducer or in the performance; but in the end theconstraint of discontiguous dependencies is eas-ily accomplished using finite-state techniques.3.3 Non-Coneatenative MorphotacticsWhile the morphotactic structure of many nat-ural languages can be satisfactorily describedusing just concatenation, perhaps with subse-quent filtering to constrain discontiguous de-pendencies, there are other languages with mor-photactic phenomena that are notoriously non-concatenative, in particular eduplication, in-fixation and Semitic stem interdigitation (alsoknown as intercalation).
We will concentrate onArabic here, arguing that roots, patterns andvocalizations can be formalized as regular ex-pressions denoting regular languages, and thatstems are formed by the intersection of theseregular languages.For illustration, let us assume, followingthe influential McCarthy (1981) analysis fairlyclosely, that Arabic stems consist of a rootlike ktb, a consonant-vowel template such asCVCVC,  and a vocalization like ui.
WhereMcCarthy proposed an extension of autoseg-mental theory, placing each of these morphemeson a separate tier, and proposing "associationrules" to combine and linearize them into thestem kutib, we propose to formalize the samedata in purely finite-state terms.Let each root like ktb be formalized as \[kt b\]/7, i.e.
as the language consisting of allstrings containing k, t and b, in that order, ig-noring the presence of any other symbols.
(Thenotation \[k t b\]/?
is equivalent to \[7" k 7" t7" b 7*\].)
Let C denote the union of all rad-ical consonants, and let V denote \[a \] i \] u\],the union of all vowels.
CV templates are de-fined as concatenations of Cs and Vs. Usingthe Xerox xfst interface, these definitions canbe computed asdefine ktb \[k t b\]/?
;define drs \[d r s\]/?
;define C \[ k ~ t ~ b \[ d m r m s \] ;define V \[ a I i \] u \] ;define FormI \[ C V C V C \] ;define FormII \[ C V C X V C \] ;define formIII \[ C V V C V C \] ;Vocalizations are also defined as regular expres-sions denoting regular languages, e.g.
PerfectActive as \[a*\] / \V,  the set of all strings contain-ing zero or more as, ignoring all other symbolsexcept vowels.
Other vocalizations are definedsimilarly:53define PerfActive \[a*\]/\V ;define PerfPassive \[u* i\]/\V ;define ImperfPassive \[u a*\]/\V ;Given the definitions above, xfst will evalu-ate the expressions on the left below, indicatingthe intersection of a root, a pattern and a vocal-ization, and return a language consisting of thesingle string on the right, an interdigitated butstill morphophonemic stem (Beesley, 1998a).\[ktb & FormI ~ PerfActive \] ~ katab\[ktb & FormIII ~ PerfPassive \] ~ kuutib\[drs ~ FormII & PerfActive \] ~ darXasThe X in the Form II pattern indicates thegemination (or lengthening) of the previous con-sonant, and its realization is controlled by varia-tion rules.
Consonant spreading, as in Form IXand Form XII, and biliteral roots also use themorphophonemic X symbol (Beesley, 1998c).Form I vocalizations are in fact idiosyncraticfor each root, and those for the Imperfect Ac-tive are more troublesome, but the same kindof formalism applies.
2 If patterns are allowed tocontain non-radical consonants, as in the anal-yses of Harris (1941) and Hudson (1986), thenthe definitions must be complicated slightly toprevent radicals from intersecting with the non-radical consonants (Beesley, 1998b).
For a dif-ferent formalization of this and other modelsproposed by McCarthy, but using techniquesthat go beyond finite-state power, see Kiraz(1996).3.4  Def in ing Var iat ion RulesWhen underlying morphemes are concatenatedand intersected together, the resulting strings2The Form I perfect active stem vowel for ktb hap-pens to be /a/, so the general PerfectActive vocaliza-tion \[a*\]/\V works in this case; other oots will require\[a i\]/\V or \[a u\]/\V.
For the Imperfect Passive, the vo-calization is \[u a*\]/kV for all forms.
For the ImperfectActive, the least attractive case for vowel abstraction,the Form I roweling is \[a*\]/\V, \[a i\]/\V or \[a u\]/\V,depending on the root; the Form II through IV vow-eling is \[u a* i\]/\V; the Form V and VI voweling is\[a*\]/kV; and the remaining forms VII to XV use \[a*i\]/\V.
If such generalization f vocalization appears ten-uous, the alternative is simply to keep the vowels in thepatterns, resulting in a two-way intersection ofroots andpatterns (Harris, 1941; Kataja and Koskenniemi, 1988).are often still very abstract or morphophone-mic; there may be many phonological or or-thographical variations between these morpho-phonemic strings and their ultimate surface pro-nunciation or spelling.
For example, Englishnouns usually pluralize by taking an s suffix,as in book~books, but words like fly pluralizeas flies rather than *flys.
The variation be-tween underlying y and the surface ie can bedefined in terms of two-level rules or ReplaceRules, which partially mimic traditional rewriterules in their superficial syntax (Chomsky andHalle, 1968).
Johnson (1972) demonstratedthat rewrite-rules, as used by linguists, had onlyfinite-state power and could be implemented asfinite-state transducers; this important result,unfortunately overlooked at the time and laterrediscovered by Kaplan and Kay (1981) (seealso Kaplan and Kay (1994)) is a key mathe-matical foundation for finite-state morphologyand phonology.The variation rules required for Arabic wererelatively difficult to write, but they are not dif-ferent in kind or power from the rules requiredfor other languages.
The most difficult chal-lenges involve the so-called weak roots, thosecontaining a w (.~), y (~) or hamza (glottal stop)as one of the radicals.Via concatenation and intersection, the lex-icon produces morphophonemic strings likekatab-Fa, the Form I perfect active of ktb,with a masculine singular Wa suffix; similarlyfor daras-{-a, based on drs.
These particularstrings are very surfacy already, being realizedin their fully-voweled form as kataba, renderedas ( .~ ,  and darasa, rendered as (~,~.~).
Whentrivial "relaxation" rules are composed on thebottom of the lexicon, allowing optional dele-tion of the short vowels, the system is also ableto analyze the surface forms ktb (.,J) and drs(~r,)#) and all the other partially voweled vari-ations.With weak roots, however, such as the fi-nally weak bny, the dictionary generates paral-lel morphophonemic forms like banay-{-a, butthe surface form is properly spelled with a y-like 'alif maqs.uura, ~ .
,  rather than with anormal y with two dots (~.
is not a possiblespelling for underlying banay+a) .
This or-54thographical change reflects the fact that theword is pronounced /banal/ rather than /ba-naja/.
The perfect passive buniy%a, however,is still spelled as bny (~.)
,  reflecting a pronun-ciation of/bunija/, although in Egyptian ortho-graphical practice the dots are usually droppedhere as well, yielding ~.
again.
With the fem-inine ending, banay-fat ,  the underlying y dis-appears completely, both phonologically and or-thographically, ielding surface bnt (,:~.
).With a medially-weak root like qwl, the mor-phophonemic Form I perfect active qawul-t-agets realized as qAl (J~), reflecting the pronun-ciation /qalla/.
When the suffix begins with aconsonant, as in qawuld-ta, the surface spellingis qlt, reflecting the pronunciation/qulta/.
Aninitially weak example like taWwlidJcu, basedon root wld, yields .~, with the deletion of theinitial radical w, while tud-wlad%u, with aninitial tud- prefix, yields aJ~ with the w in-tact.
Similarly for root w'd, but with hamzacomplications: yad-w'id-l-u yields a~.
whileyu%w'ad-{-u yields ~2-"The rule writer must also handle a numberof assimilations, as in the Form VIII of root5kr, underlying 8takar-{-a, which is pronounced/Piddakara/ and written accordingly, includingdiacritics for clarity, as "~!.
Similary, for rootswith an initial pharyngealized saad (~,,) or d. aad(~j,) radical, such as .drb, the underlying FormVIII is .dtarab-{-a, emerging with the infixedForm VIII t assimilating to its pharyngealizedversion t. in ~.
'~!
.
None of these phenom-ena is phonologically surprising; local assimila-tions and contextual instabilities in semiconso-nants l i ke /w/and/y /are  garden-variety vari-ations, elegantly handled with finite-state vari-ation rules.4 P ract i ca l  App l i ca t ions4.1 History of Comput ing  SemiticStems via Intersect ionClassic Two-Level (Koskenniemi, 1983; Kart-tunen, 1983; Antworth, 1990) and finite-statelexicons (Karttunen, 1993) build underlyingstrings via concatenation o ly, but this limita-tion is not characteristic of the overall theorybut only of the computational implementations.Kataja and Koskenniemi (1988) were appar-ently the first to understand that concatenatinglanguages were just a special case; they showedthat by generalizing lexicography to allow regu-lar expressions, Semitic (specifically Akkadian)roots and patterns could denote regular lan-guages, and that stems could be computed asthe intersection of these regular languages.
3This principle was borrowed in the ALP-NET prototype analyzer for Arabic morphol-ogy (Beesley, 1989; Beesley, 1991); but it usedan implementation of Two-Level Morphologyenhanced with a "detouring" mechanism thatsimulated the intersection of roots and patternsat runtime.
This prototype grew into a largecommercial system in 1989 and 1990 (Beesleyet al, 1989; Beesley, 1990).
In 1989, LauriKarttunen (personal communication) also pro-posed and demonstrated in an Interlisp scriptthe intersection of roots, patterns and vocal-izations as an alternative to the finite-state so-lution of (Kay, 1987), which used a four-tapefinite-state transducer t ansducer.4.2 Current  Xerox SystemThe current Xerox morphological nalyzer forArabic is based on dictionaries licensed fromALPNET, but the rules and organization of thesystem have been extensively rewritten.4.2.1 System ComponentsThe Arabic morphological nalyzer starts outas a dictionary database containing entries forprefixes, suffixes, roots and patterns of Arabic.The database also includes morphotactic cod-ings.
Perl scripts extract the pertinent infor-mation from this database, reformatting it aslexc files, which are then compiled into a finite-state transducer that we label the "core" lex-icon transducer.
On top of the core FST, fil-ters are composed to remove the strings thatare ill-formed because of discontiguous depen-dencies.
Finite-state rules that intersect rootsand patterns are compiled into transducers andcomposed on the bottom of the core, leavingSKataja (personal communication) wrote compara-tive two-level grammars of the Neo-Babylonian and Neo-Assyrian dialects of Akkadian.
The source dictionariescontained separate sublexicons for roots and patterns;these were intersected via awk scripts into Koskenniemi'sTwoL format, which was then compiled.55Filters?O?Core Lexicon,o.Intersect Rules?0,Variation RulesFigure 3: Constructing the Common FSTlinearized lexical strings for the variation rules(also compiled into FSTs) to apply to, as shownin Figure 3.
The result of the composition is asingle "common" FST, with slightly enhancedfuUy-voweled strings in the lower language.For generation purposes, where the user prob-ably wants to see only formally correct fully-roweled strings, the bottom level is triviallycleaned up by yet another layer of composedrules.
For recognition purposes, the rules ap-plied to the bottom side include\[ a I i I u I o I - \] (->) 0 ;which optionally maps the fatha (a), kasra (i),d.amma (u), sukuun (o) and shadda ( ' )  to theempty string.
The resulting "analysis" trans-ducer recognizes fully-voweled, partially vow-eled, and the usual unvoweled spellings.
Wherediacritics are present in the input, the output iscorrespondingly less ambiguous.4.2.2 System StatusThe current dictionaries contain 4930 roots,each one hand-coded to indicate the subset ofpatterns with which it legally combines (Buck-walter, 1990).
Various combinations of pre-fixes and suffixes, concatenated to the inter-sected stems, and filtered by composition, yieldover 72,000,000 abstract, fully-voweled words.Sixty-six finite-state variation rules map theseabstract strings into fully-voweled orthographi-cal strings, and additional rules are then appliedto optionally delete short vowels and other di-acritics, allowing the system to analyze unvow-eled, partially voweled, and fully-roweled or-thographical variants of the 72,000,000 abstractwords.
New entries are added easily to the orig-inal le:dcal database.A full-scale version of the current sys-tem is available for testing on the Internetat ht tp://www.xrce.xerox.com/research/mltt /arabic.
A Java interface renders Arabic wordsin traditional Arabic script, both for input andoutput.Re ferencesEvan L. Antworth.
1990.
PC-KIMMO: a two-level processor for morphological analysis.Number 16 in Occasional publications in aca-demic computing.
Summer Institute of Lin-guistics, Dallas.Kenneth R. Beesley, Tim Buckwalter, and Stu-art N. Newton.
1989.
Two-level finite-stateanalysis of Arabic morphology.
In Proceed-ings of the Seminar on Bilingual Computingin Arabic and English, Cambridge, England,September 6-7.
No pagination.Kenneth R. Beesley.
1989.
Computer analysisof Arabic morphology: A two-level approachwith detours.
In Third Annual Symposium onArabic Linguistics, Salt Lake City, March 3-4.
University of Utah.
Published as Beesley,1991.Kenneth R. Beesley.
1990.
Finite-state de-scription of Arabic morphology.
In Proceed-ings of the Second Cambridge Conference onBilingual Computing in Arabic and English,September 5-7.
No pagination.Kenneth R. Beesley.
1991.
Computer analy-sis of Arabic morphology: A two-level ap-proach with detours.
In Bernard Comrie andMushira Eid, editors, Perspectives on ArabicLinguistics III: Papers from the Third An-nual Symposium on Arabic Linguistics, pages155-172.
John Benjamins, Amsterdam.
Readoriginally at the Third Annual Symposium onArabic Linguistics, University of Utah, SaltLake City, Utah, 3-4 March 1989.Kenneth R. Beesley.
1998a.
Arabic morphologi-cal analysis on the Internet.
In ICEMCO-g8,Cambridge, April 17-18.
Centre for MiddleEastern Studies.
Proceedings ofthe 6th Inter-national Conference and Exhibition on Multi-56lingual Computing.
Paper number 3.1.1; nopagination.Kenneth R. Beesley.
1998b.
Arabic stem mor-photactics via finite-state intersection.
Paperpresented at the 12th Symposium on Ara-bic Linguistics, Arabic Linguistic Society, 6-7March, 1998, Champaign, IL.Kenneth R. Beesley.
1998c.
Consonant spread-ing in Arabic stems.
In COLING'98.Kenneth R. Beesley.
1998d.
Constraining sep-arated morphotactic dependencies in finite-state grammars.
In FSMNLP-98, Bilkent.Bilkent University.Timothy A. Buckwalter.
1990.
Le:dcographicnotation of Arabic noun pattern morphemesand their inflectional features.
In Proceed-ings of the Second Cambridge Conference onBilingual Computing in Arabic and English,September 5-7.
No pagination.Noam Chomsky and Morris Halle.
1968.
TheSound Pattern of English.
Harper and Row,New York.Zelig Harris.
1941.
Linguistic structure of He-brew.
Journal of the American Oriental So-ciety, 62:143-167.Grover Hudson.
1986.
Arabic root and patternmorphology without tiers.
Journal of Lin-guistics, 22:85-122.
Reply to McCarthy:1981.C.
Douglas Johnson.
1972.
Formal Aspectsof Phonological Description.
Mouton, TheHague.Ronald M. Kaplan and Martin Kay.
1981.Phonological rules and finite-state transduc-ers.
In Linguistic Society of America MeetingHandbook.
Fifty-Sixth Annual Meeting, NewYork.
December 27-30.
Abstract.Ronald M. Kaplan and Martin Kay.
1994.Regular models of phonological rule systems.Computational Linguistics, 20(3):331-378.Lauri Karttunen and Kenneth R. Beesley.
1992.Two-level rule compiler.
Technical ReportISTL-92-2, Xerox Palo Alto Research Center,Palo Alto, CA, October.Lauri Karttunen and Andr6 Kempe.
1995.The parallel replacement operation infinite-state calculus.
Technical ReportMLTT-021, Rank Xerox Research Centre,Grenoble, France, December.
A~ilable ath ttp : / / www.xrce.xerox.com / publis /mltt /mltttech.html.Lauri Karttunen, Ronald M. Kaplan, and AnnieZaenen.
1992.
Two-level morphology withcomposition.
In COLING'92, pages 141-148,Nantes, France, August 23-28.Lauri Karttunen.
1983.
K IMMO:  a generalmorphological processor.
In Mary Dalrymple,Edit Doron, John Goggin, Beverley Good-man, and John McCarthy, editors, Tezas Lin-guistic Forum, number 22, pages 165-186.Department of Linguistics, The University ofTexas at Austin, Austin, TX.Lauri Karttunen.
1991.
Finite-state con-straints.
In Proceedings of the Interna-tional Conference on Current Issues in Com-putational Linguistics, Penang, Malaysia,June 10-14.
Universiti Sains Malaysia.Lauri Karttunen.
1993.
Finite-state lexiconcompiler.
Technical Report ISTL-NLTT-1993-04-02, Xerox Palo Alto Research Center,Palo Alto, CA, April.Lauri Karttunen.
1994.
Constructing lexicaltransducers.
In COLING'g~, Kyoto, Japan.Lauri Karttunen.
1995.
The replace opera-tor.
In Proceedings of the 33rd Annual Meet-ing of the ACL, Cambridge, MA.
Availableat http://www.xrce.xerox.conl/publis/mltt /mltttech.html.Lauri Karttunen.
1996.
Directed replacement.In Proceedings of the 3~rd Annual Meeting ofthe ACL, Santa Cruz, CA.Laura Kataja and Kimmo Koskenniemi.
1988.Finite-state description of Semitic morphol-ogy: A case study of Ancient Akkadian.
InCOLING'88, pages 313-315.Martin Kay.
1987.
Nonconcatenative finite-state morphology.
In Proceedings of the ThirdConference of the European Chapter of theAssociation for Computational Linguistics,pages 2-10.George Anton Kiraz.
1996.
Computingprosodic morphology.
In COLING'96, pages664-669.Kimmo Koskenniemi.
1983.
Two-level mor-phology: A general computational model forword-form recognition and production.
Pub-lication 11, University of Helsinki, Depart-ment of General Linguistics, Helsinki.John J. McCarthy.
1981.
A prosodic theory ofnonconcatenative morphology.
Linguistic In-quiry, 12(3):373-418.57
