An Object-Oriented Linguistic Engineering Environment usingLFG (Lexical Functionnal Grammar) and CG (ConceptualGraphs)J~r6me Vap i l l on ,  Xav ie r  Br i f fau l t ,  Gdrard  Sabah,  Kar im Ch iboutLanguage and Cogni t ion GroupL IMS I -  CNRSB.P.
133, 91403 Orsay Cedex, FRANCEvap/xavier/gs/chibout ?rl ims i. frAbstractIn order to help computational linguists,we have conceived and developed a lin-guistic software engineering environment,whose goal is to set up reusable and evo-lutive toolkits for natural language pro-cessing.
This environment is based on aset of natural anguage processing compo-nents, at the morphologic, syntactic andsemantic levels.
These components aregeneric and evolutive, and can be usedseparately or with specific problem solv-ing units in global strategies built for man-machine communication (according to thegeneral model developed in the Languageand Cognition group: Caramel).
All thesetools are complemented with graphic in-terfaces, allowing users outside the field ofComputer Science to use them very eas-ily.
In this paper, we will present first thesyntactic analysis, based on a chart parserthat uses a LFG grammar for French, andthe semantic analysis, based on conceptualgraphs.
Then we will show how these twoanalyses collaborate to produce semanticrepresentations and sentences.
Before con-cluding, we will show how these modulesare used through a distributed architecturebased on CORBA (distributed Smalltalk)implementing the CARAMEL multi-agentarchitecture.1 Introduction1.1 Genera l i t iesNatural language processing is nowadays tronglyrelated to Cognitive Science, since linguistics, psy-chology and computer science have to collaborateto produce systems that are useful for man-machinecommunication.
This collaboration has allowed for-malisms that are both theoretically well-founded andimplementable to emerge.
In this paradigm, we haveconceived and developed a linguistic software ngi-neering environment, whose goal is to set up reusableand evolutive toolkits for natural anguage process-ing (including collecting linguistic data, analysingthem and producing useful data for computer pro-cesses).
Based on a large number of graphical, veryintuitive, interfaces, this environment has two maingoals:* to provide tools usable by users outside the fieldof Computer Science (e.g., computational lin-guists) for them to be able to easily collect dataand test their linguistic hypotheses* to allow computer scientists to exploit thesedata in computer programsRemark: in the text, some figures describe thestructure of our tools; we have used Booch's conven-tions (Booch, 1994) about object oriented analysisand conception.
They are summarized here:I name I class operationscent ains/uses1,2...N relation cardinalityinheritsFigure 1: symboles used in the figures1.2 Extens ions  to  LFG fo rmal i smFour types of equations are defined in classical LFG(Bresnan and Kaplan, 1981):1. unifying structures (symholised by " - " ) ,2. constrained unification of structures, only trueif a feature is present in both structures, butmay not be added (symbol "=c"),3. obligatory presence of a feature (symbol "~"),4. obligatory absence of a feature (symbol tilde).99We have defined three non-standard types of equa-tions used in our parser:1. obligatory difference between two values (sym-bol "#"),2. disjunction of obligatory differences (a sequenceof obligatory differences eparated by the sym-bol "1") (this can also be viewed as the negationof a conjonction of obligatory presences)3. prioritary union, copy into a F-Structure theattributes of the other that are not present inthe first one, nor inconsistent with it.Among other existing systems (e.g., A. An-drew's system , Charon, The "Konstanz LFGWorkbench" and Xerox "LFG Workbench"; seehttp://clwww.essex.ac.uk/LFG for more details onthese systems), only the last one is a complete n-vironment for editing grammars and lexicons.
Oursystem adds to this feature an open architecture andmany interfaces that make it very easy to use.2 The LFG Environment2.1 Foundat ion :  a LFG parserAccording to the principles of lexical functionalgrammars, the process of parsing a sentence is de-composed into the construction of a constituentparts structure (c-structure) upon which a func-tional structure is inserted.
C- structure construc-tion is based on a chart parser, that allows the sys-tem to represent syntactic ambiguities (Kay, 1967),(Winograd, 1983).
In order to be used within a LFGparser, a classical chart has to be complementedwith a new concept: completed arcs (which repre-sent a whole syntactic structure) have to be differ-enciated between completed arcs linked with a cor-rect F-Structure, and those which are linked to anF- Structure that cannot be unified or that does notrespect well-formedness principles.2.2 V isua l i s ing  the ChartIn the Chart interface, words are separated bynodes, numbered from 1 to numberOfWords + 1.Each arc is represented by a three segment polygon(larger arcs are above the narrower, for readibilityreason).Active arcs are grey and positioned under thewords.
Completed arcs with uncorrect F-Structuresare red and also placed under the words.
Com-pleted arcs with correct F-Structures are blue andabove the words.
Lastly, completed arcs with F-Structures that don't respect well formedness prin-ciples are grey and above the words.
The user canselect the kind of arc he is interested in.
By clickingon an arc with the left button, the arc and all itsdaughters become green, thus showing the syntac-tic hierarchy.
By clicking with the middle button, aiii suaJ saU?n vl?.,~ .
?
!PlIOPOSITiON:t~,GNSSCOMPL',I_t .
.
.
.
\]CONTEXTE :t 4 '........ _GNSIMPLE:t2SN:I~/ii I - G; ;SCOMPm__.__....~1:2 ~1) :  ~ , , ,  GVCO!IUR;~ 7 P__L~_ :nilC N$$COMPL;s SV:te ii ,PI).O r,I :L-dl.
Nk'd  .
.
.
.
V :flit 'ONCT '..m Iime Z chien 3 mangeait  4 $Figure 2: The Chart Interfacemenu appears within which one can choose to exam-ine the applied rule or the F-Structures (see belowfor the corresponding interface).2.3 Vistta l is ing F -S t ructuresAs shown in Figures 3 and 4, F-Structures are repre-sented by attribute-value pairs (a value may itself bea F- Structure).
In addition to such a graphical rep-resentation, a linear representation (more suitablefor storing data on files or printing them) has beendeveloped and it is possible to switch from one tothe other.
This allows us to keep track of previousresults and to use them for testing the evolution ofthe system.2.4 Lexicon and lexicon managementSince LFG is a "lexical" grammar, it is importantto have powerful and easy to use lexicon manage-ment tools.
To be as flexible as possible, we havechoosen to use several exica at the same time in thesame analyser.
The lexicon manager contains a listof lexica ordered by access priority.
For each wordanalysed, the list is searched, and the first analysisencountered is returned.Two kinds of lexica are currently used; this kindof structuration is quite flexible:?
if the user uses a big lexicon, but wants to re-define a few items for his own needs, he justhas to define a new small lexicon containing themodified items, and to give it a high priority.?
if the user has a big lexicon with a slow ac-cess, the access can be optimised by putting themmumnnm\[\]Nmnmmm\[\]m\[\]100Ul J l i ta i resPTypeProv  =Pred  =Neg =Temps  =TypeAux  =$uj =Mode =PType =Af t=AUX =Su je t  - *T rans  = directPronomina l  = -id : 2.262000Iassert/ 'manger '<  Su j  \[ Su j  Oh)  >/impar fa i tau;,C, vo i rDef  = def in iNumera l  = ~Pred  = / ' ch ien ' /Genre  = mascNum = s ingPers  = prs3Re l  = ~Ar t i c le  - +id ' 2261 ,?,38ind icat i fassert?Figure 3: graphical representation of a F-Structurewords frequently used in a direct access lexiconstored in memory.Our lexicon currently contains 7000 verbs, all theclosed classes words (e.g., prepositions, articles, con-junctions), 12000 nouns and about 2500 adjectives.To mitigate the consequences of some lacks of thislexicon, a set of subcategorisation frames is indepen-dently associated with the lexicon (3000 frames).The user may also define a direct access lexicon,whose equations are written in a formalism close tothe standard LFG formalism.
Dedicated interfaceshave been developped for editing these lexica, withsyntactic and coherence checking.Example of an entry of a canonical form:@chien={ 'chien canonique'CAT- -  N;T Pred = chien}Example of an entry of an inflected form:#chiennes={ "chien fern plur' "chiennes f-flechie"T Num = plur;T Genre =fem;@chien-~'chien canonique'}All these lexica conform to the specification de-fined by an abstract lexicon class.
It is possible, and101UUl i ta l r~PTypeProv = assertPred =/ 'manger '<  Su j  I Su l  Ob j  >/Neg  - -Temps  = imparfaitTypeAux  = auxAvo i rMode  = indicatifPType = assertA f t= +AU?
= ~$ujet  = +Trans = directPronomina l  = -Su j  = FS: \ [Def = deflniNumera l  = ~Pred =/ ' ch ien ' /Genre = mascNum = singPers = prs3Rel = ~Ar t i c le  = ?}?
l I?Figure 4: textual representation of a F-Structurevery easy, to add new kinds of lexica, provided theyconform to this specification.2.5 T rack ing  fa i lure  causesA specific feature ("Error ") allows the system tokeep a value that makes explicit the reason why theunifying process has failed.
Possible situations arelisted below:1.
Unifying failure.
The values of a given featureare different between the two F-Structures tobe unified.
The generated F-Structure containsthe feature Error , whose value is an associa-tion of the two uncompatible values.
Example:Num = sing --+ plur.2.
A feature present in an equation has nonvalue in either of the two F-Structures tobe unified.
Example: with the equation'~ Suj Num = ~ Num" and two F-Structureswithout the Num feature, the generated F-Structure contains "Num -- n i l -+ nil" .3.
While making a constrained unification (e.g.,J, Num =c sing ) a feature does not exist.
Weobtain: Num = sing --* nil.4.
An obligatory feature is absent.Example: Num-- obligatoire.5.
A forbidden feature is present.
The forbid-den state for a feature is represented by addingthe value "tilde" to the feature (e.g., Num --"tilde").
Therefore, this is the same situationas the simple unification.
A failure results fromthe case when a F-Structure contains this fea-ture.
Example: Num=sing-+ "tilde".6.
A feature has a forbidden w~lue.
Example:Num= "tilde" sing.7.
When a disjunction of constraints is the rea-son of the failure, the block itself is set as thevalue of the "Error" feature in the resulting F-Structure.These errors can be recovered through the interface(errors are highlighted in the representation), whichallows the user to track them easily.
Moreover, thesewell defined categories make it easy to find the realcause of the error and to correct the grammar andthe lexicon.2.6 S t ructure  of  the  ru lesSmalltalk80 specific features (mainly the notions of"image" and incremental compilation) have beenheavily exploited in the definition of the internalstructure of the grammar ules.
Basically a rule isdefined as the rewriting of a given constituent (leftpart of the rule), equations being linked to the rightconstituents.
Each non terminal constituent of thegrammar is then defined as a Smalltalk class, whoseinstance methods are the rules whose left part is thisconstituent (e.g., NP is a class, NP --* ProperNounand NP --~ Det Adj* Noun are instance methods ofthis class).The Smalltalk compiler has been redefined onthese classes o that it handles LFG syntax.
There-fore, all the standard tools for editing, searching,replacing (Browsers) may be used in a very naturalway.
A specific interface may also be used to consultthe rules and to define sets rules to be used in theparser.A great interest of such a configuration is to allowthe user to define his own (sub-)set or rules by defin-ing sub-classes of a category when he wants to definedifferent rules for this category (since a method witha given name cannot have two different definitions).On the  use of  the  Envy /Manager  sourcecode manager  to mainta in  the  syntact i c  ru lesbase.
Envy/Manager is a source code manager forteam programming in Smalltalk, proposed by OTI.It is based on a client-server architecture in whichthe source code is stored in a common database ac-cessible by all the developpers.
Envy stores all thesuccessive versions of classes and methods, and pro-vides tools for managing the history.
Applicationsare defined as sets of classes, methods, and exten-sions of classes, that can be independently editedand versioned.
Very fine grained ownership and ac-cess rights can be defined on the software compo-nents.
The structuration of our syntactic rules baseenables us to benefit directly of these functionali-ties, and hence to be able to manage versions, accessrights, comparisons of versions (Figure 5)... on allour linguistic data.I Non termin~d Constituent I iMAGEI User CItes r I DellN~on(m e tI Application Versi(x~ ~ CI~a Version ~ Method VersionENV Y/MANA GERFigure 5: Structuring the set of rulesContent  of  the  rules.
The current grammarcontains about 250 rules that covers most of theclassical syntactic structures of French simple sen-tences.
They have been tested on data coming fromthe TSNLP european project.
In addition to thesesimple sentences, difficult problems are also han-dled: clitics, complex determiners, completives, var-ious forms of questions, extraction and non limiteddependancies, coordinations, comparatives.
Someextensions are currently under development, includ-ing negation, support verbs, circonstant subordinatephrases and ellipses.3 Conceptual graphsConceptual graphs (Sowa, 1984) form the basis ofthe semantic and encyclopedic representations u edin our system.
Conceptual graphs are bipartitegraphs composed of concepts and relations.
A con-ceptual graph database is generally composed of thefollowing subparts:?
a lattice of concepts and relation types?
a set of canonical graphs, associated with con-cepts and relation types, used for example toexpress the selectionnal restrictions on the ar-guments of semantic relations.?
a set of definitions, associated with conceptsand relation types, used to define the meaningof concepts.?
a set of schemas and prototypes.?
a set of operations, such as join, contraction,expansion, projection...?
a database containing the description of a situ-ation in terms of conceptual graphs.The framework we describe here aims at managingall this information in a coherent manner, and atfacilitating the association with the linguistic pro-cesses described above.Graphs can be visualized, modified, saved,searched through different interfaces, using graph-ical or textual representations.
Operations can beperformed programmatically or using the interfaceshown in Figure 7.102Figure 6: Graphical representation f "a cheap horseis scarce" (with second order concepts)The lattice, and the different items of informa-tion associated with concepts and relations types,can be visualized, modified, searched and saved us-ing graphical or textual representations (Figure 10).An "individual referents inspector" allows to in-spect the cross-references between references, con-cepts and graphs.4 Ana lys ing  a sentenceThe processus of analysis from sentence to seman-tic representation can be separated into three sub-processes.
After the sentence has been segmented,we obtain the lexical items in LFG-compliant formvia the lexieal manager.
After parsing, we obtainsome edges with their respective F-Structures.
(Del-monte, 1990) has developed a parser which uses basicentries with mixed morphological, functionnal andsemantic informations.
The rules use different levelinformation.
We propose to map the semantic struc-ture on the syntactic one in a manner that avoidstoo many interdependencies.
We use a intermedi-ate structure (named "syntax-semantic able") thatexpresses the mapping between the value of a LFGPred and a concept, as well as connected conceptsand relations.
Semantic data in the lexical knowl-edge base are defined by using conceptual graphs,as shown in the paragraph 4.1 below about someverb examples.
Selectional restrictions defined withcanonical graphs are then used to filter the graphs,when more than one is obtained at this level.4.1 Semant ic  verb  classi f icat ion in thelexical knowledge baseThe lexical knowledge base is based on a hierarchicalrepresentation f French verbs.
We have developpeda systematic and comprehensive r presentation ofverbs in a hierarchical structure, data coming fromthe French dictionary "Robert".
Our method relieson classification method proposed by (Talmy, 1985)and (Miller, Fellbaum and Gross, 1989), (Miller andFellbaum, 1991).
We chose a description with astructure composed of a basic action (the first of themost general uperclasses, e.g.
stroll and run canbe associated with walk as a basic action, andwalk,ride, pass point atmoving, which is a step further ingenerality) associated with thematic roles that spec-ify it (i.e., object, mean, manner, goal, and method).The basic actions are in turn defined with the samestructure, based on a more general basic action.The hierarchy of verbs depends on the thematicrelations associated with them.
A verb V1 is thehyperonym (respectively a hyponym) of a verb V2(which is noted VI~-V2, respectively VI-<V2) if theyshare a common basic action and if, in the thematicrelations tructure associated with it, we have:* absence (for the hyperonym) or presence (forthe hyponym) of a particular thematic relation:e.g.
for the pair divide /cut ; to cut is to divideusing a sharp instrument, hus divide ~- cut?
presence of a generic value thematic relationvs.
a specific value (example cut (object isgeneric:solid object ~- behead (object is ahead))For every verb:?
the semantic description pointed out is codedin the lexical knowledge base as a definitionalgraph.type  cut (*x) is \[divide: *x\]-(obj) \[Object: (car) --* \[solid\](method) --+ \[traverse\]--~ (Object: ~'y)(mean) -+ \[Instrument\]--* (car) --+\[shar,\].?
a canonical graph makes explicit the selectionalrestrictionsCanonica l  g raph  for  cut  is(Agent) -~ \[Animate\](Obj) ---+ \[Object: *y\]--~ (car) ---+ \[solid\].4.2 An exampleBelow, we give an example for the sentence "Un av-ocat vole une pomme" (a lawyer steals an apple),where "avocaf' is ambiguous and refers to a lawyeror to an avocado.
A semantic representation ofthis sentence is derived from its non-ambiguous F-Structure.The entries in the translation table (from LFGpred \[in French\] to conceptual graphs types \[in En-glish\]) are as follow:103Figure 7: Conceptual graph operation manager, showing the result of a join between two graphs, and theliste of available operations.
'avocat '  --.
(Lawyer Avocado)'pomme'  ---* (Apple).
'vo ler (derober) '  --* (Steal(Agent ~ I Suj; Ob-jet --* 1" Obj)),Explanations: the first item between quotes isthe Pred value, followed by a list of types of con-cepts (or types of relations) and their mapping def-inition structure in the F-Structure.
~ representsthe local F-Structure.
T represents the F-Structurethat contains the local F-Structure.
For example,Agent --* ~ Suj means that a concept of Type "Steal"is connected to a concept hat can be found in the F-Structure of the feature "Suj" in the local F- Struc-ture.
From these data, the following graphs (Figure8) are obtained.The "Deft feature of the F-structure gives us in-formation about the referents of concepts.
For ex-ample, the F- Structure for 'apple' contains "Def =indefini", which implies the use of a generic referentfor the concept (corresponds to an apple, indicatedby a star in Figure 8).
Then, since canonical graphsexpress electional restrictions, they are used to fil-ter the results through the join operation.
For ex-2) Avocado'.
* Agent SteaJ Object  Apple:'Figure 8: Graphs from the sentence "Un avocat voleune pomme"ample, "Steal" needs an animated agent (Figure 9),therefore graphs with the "Avocado" concept can beremoved from the selection.Figure 9: Canonical Graph for "Steal"These principles are the bases of the system cur-rently available, but we are working on improve-ments and extensions.
We want to address theissue of adjunct processing, prepositional comple-IL104Figure 10: Lattice visualizer, showing (bottom right) the canonical graphs of "d~concerter" (to disconcert),the "graph origin" inspector (top right), and the menu of operations (bottom left)ments (with problem of second order concepts), etc.5 Conc lud ing  remarks :  Shar ing  thetoo ls  on  a network  w i th  CORBAThe different ools described in this paper are cur-rently being extended to be CORBA-compatible.CORBA (Common Object Request Broker Archi-tecture) (Ben-Natan, 1995), has been defined bythe OMG as an interoperability norm for heteroge-neous languages (Smalltalk, C++, JAVA) and plat-forms (UNIX, Macintosh, PC).
CORBA defines acommon interface definition language (IDL), as wellas a set of services (naming service, security, con-currency management...).
CORBA objects can bedistributed worldwide (for example using Internet)using an ORB (Object Request Broker).
Varioustools implement this CORBA norm.
We have usedDistributed Smalltalk (Pare Place Digitalk) to real-ize the distributed implementation of an analyser.With this system, users can currently make an anal-ysis, see the results of this analysis, the F-structures,see the syntactic rules base... With this kind ofarchitecture, systems necessiting a large amount ofressources can be distributed amongst workstationson a network and/or be used by clients having fewressources.
Moreover these ressources can be phys-ically located in any place of a network, allowingthus to distribute the responsibility of their man-agement and maintenance todifferent persons.
Withthe communication possibilities offered by Internet,it makes it possible to coordinate the cooperativeefforts of several teams in the world around a sin-gle, coherent, though distributed system.
We arecontinuing our work toward the implementation f acomplete distributed multi-agent system, followingthe CARAMEL architecture (Sabah and Briffault,1993), (Sabah, 1995), (Sabah, 1997).Re ferencesBen-Natan, R. 1995, CORBA, a Guide to the Com-mon Object Request Brocker.
McGraw-Hill.Booch G. 1994, Analyse et conception orienteesobjets , Addison-Wesley, Reading Mass.Bresnan Joan and Ronald Kaplan 1981, Lexicalfunctional grammars ; a formal system for gram-105matical representation, The mental representationof grammatical relations, MIT Press, Cambridge,Mass.Delmonte R. 1990, Semantic Parsing with LFG andConceptual Representations, Computers and theHumanities, Kluwer Academic Publishers, 24 , p.461-488.Kaplan R.M.
and J.T.
Maxwell \].994, GrammarWriter's Workbench, Xerox Corporation, Version2.0.Kay Martin 1967, Experiments with a powerfulparser, Proceedings 2nd COLIN(\], , p. 10.Kay Martin 1979, Functional grammars, Proceed-ings 5th.
annual meeting of the Berkeley linguisticsociety, Berkeley, p. 142- 158.Miller A. G., C. Fellbaum and D. Gross 1989,WORDNET a Lexical Database Organised onPsycholinguistic Principles, Proceedings IJCAI,First International Lexical Acquisition Workshop,Detroit.Miller G. A. and C. Fellbaum 1991, Semantic net-works of English, Cognition, 41 , p. 197-229.Pitrat Jacques 1983, R~alisation d'un analyseur-g@n@rateur lexicographique g@n~ral, rapport derecherche GR22, Institut de programmation, ParisVI, 79/2.Sabah G@rard 1995, Natural Language Understand-ing and Consciousness, Proceedings AISB - work-shop on "Reaching for Mind", Sheffield.Sabah G~rard 1997, The fundamental role ofpragmatics in Natural Language Understandingand its implications for modular, cognitively mo-tivated architectures, Studies in ComputationalPragmatics: Abduction, Belief, and Context, Uni-versity College Press, to appear, London.Sabah G@rard and Xavier Briffault 1993, Caramel:a Step towards Reflexion in Natural Language Un-derstanding systems, Proceedings IEEE Interna-tional Conference on Tools with Artificial Intelli-gence, Boston, p. 258-265.Sowa John 1984, Conceptual structures: informa-tion processing in mind and machine , AddisonWesley, Reading Mass.Talmy L. 1985, Lexicalisation patterns: Semanticstructure in lexical forms, Language typology andsyntactic description, 3 , Cambridge UniversityPress, New York, p. 57-149.Winograd Terry 1983, Language as a cognitive pro-cess, Volume I syntax, Addison Wesley, ReadingMass.106
