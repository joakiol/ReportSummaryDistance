Generating a 3D Simulation of a Car Accident from a WrittenDescription in Natural Language: the CarSim SystemSylvain DUPUY, Arjan EGGES, Vincent LEGENDRE, and Pierre NUGUESGREYC laboratory - ISMRA6, bd du Mare?chal JuinF-14050 Caen, FranceEmail: {dupuy,vlegendr}@ensicaen.ismra.frpnugues@greyc.ismra.fregges@cs.utwente.nlAbstractThis paper describes a prototype systemto visualize and animate 3D scenes fromcar accident reports, written in French.The problem of generating such a 3Dsimulation can be divided into two sub-tasks: the linguistic analysis and the vir-tual scene generation.
As a means ofcommunication between these two mod-ules, we first designed a template for-malism to represent a written accidentreport.
The CarSim system first pro-cesses written reports, gathers relevantinformation, and converts it into a for-mal description.
Then, it creates the cor-responding 3D scene and animates thevehicles.1 IntroductionThis paper describes a prototype system to visu-alize and animate a 3D scene from a written de-scription.
It considers the narrow class of textsdescribing car accident reports.
Such a systemcould be applied within insurance companies togenerate an animated scene from reports writtenby drivers.
The research is related to the TACITproject (Pied et al, 1996) at the GREYC labora-tory of the University of Caen and ISMRA.There are few projects that consider automaticscene generation from a written text, althoughmany projects exist that incorporate natural lan-guage interaction in virtual worlds, like Ulysse(Bersot et al, 1998; Gode?reaux et al, 1999) or An-imNL (Badler et al, 1993).
Visualizing a writtencar accident report requires a different approach.It is closer to projects focusing on text-to-sceneconversion, like WordsEye (Coyne and Sproat,2001).
However, unlike the latter, our objectiveis to build an animation rather than a static pic-ture and behavior of dynamic objects must thenbe taken into account.
There also exist systemsthat carry out the reverse processing, from videodata to text description, as ANTLIMA (Blocherand Schirra, 1995).We present here an overview of the CarSimsystem that includes a formalism to describe andrepresent car accidents, a linguistic module thatsummarizes car accident reports according to thisformalism, and a visualizing module that convertsformal descriptions to 3D animations.
In our case,the linguistic module has to deal with texts wheresyntax and semantics involve time and space de-scription and simultaneous actions of two or moreactors (i.e.
the cars).The remainder of our paper is organized as fol-lows.
Section 2 presents the formalism for describ-ing an accident.
Section 3 describes the templatefilling methods that lead to the conversion of atext into its formal representation.
Section 4 cov-ers planning techniques and accident modelling al-gorithms that we use.
Finally, Section 5 presentsand discusses the evaluation of the system on thetest corpus (MAIF corpus).FDLinguisticanalysisVirtual scenegeneratorFigure 1: The two subsystems and the FD (For-mal Description) as a means of communication.2 Formal Representation inCarSim?Ve?hicule B venant de ma gauche, je metrouve dans le carrefour, a` faible vitesse en-viron 40 km/h, quand le ve?hicule B, per-cute mon ve?hicule, et me refuse la priorite?a` droite.
Le premier choc atteint mon ailearrie`re gauche, sous le choc, et a` cause dela chausse?e glissante, mon ve?hicule de?rape,et percute la protection me?tallique d?un ar-bre, d?ou` un second choc frontal.?
Text A4,MAIF corpus.
?I was driving on a crossroads with aslow speed, approximately 40 km/h.
VehicleB arrived from my left, ignored the priorityfrom the right and collided with my vehicle.On the first impact, my rear fender on theleft side was hit and because of the slipperyroad, I lost control of my vehicle and hit themetallic protection of a tree, hence a secondfrontal collision.?
Text A4, MAIF corpus,our translation.The text above is an accident report from theMAIF1 corpus, which contains 87 texts in French.It is a good example of the possible contents of anaccident description: a rather complex interactionbetween a set of different objects (two cars and atree).
This section describes the formal represen-tation used in the CarSim system.
The exampleof Text A4 will be explained with more details inSection 2.5.2.1 The General Accident ModelIn CarSim, the general accident model con-sists of three lists of objects: motionless objects(STATIC), moving objects (DYNAMIC), and fi-nally collisions (ACCIDENT).STATIC and DYNAMIC lists describe the gen-eral environment in which the accident takesplace.
Knowing them, the accident itself is theonly remaining item to determine.
Using manualsimulation, we realized that most accidents in thecorpus could be framed using an ordered list ofcollisions2.
Each collision is represented by a re-lation between two objects either in DYNAMICand/or STATIC lists2.2 Static ObjectsIn general, a static object can be defined with twoparameters: one defining the nature of the objectand another one that defines its location.
In Car-Sim, a static object can be either a road type oran object that can participate in a collision (e.g.a tree).
In the formal description, a reference tothe latter kind of object can occur in a collisionspecification.
This is why these static objects aredefined with an identity parameter (ID).Concerning ROAD objects, their nature is spec-ified in the KIND parameter.
The possible KINDvalues in the present prototype are: crossroads,straightroad, turn left, and turn right.TREEs, LIGHTs (traffic lights), STOPSIGNs,and CROSSINGs (pedestrian crossings) are the1Mutuelle Assurance Automobile des Instituteursde France.
MAIF is a French insurance company.2Two collisions will never happen at the same time.other possible static objects.
Their location isgiven by the COORD parameter.
Since trees andtraffic lights can participate in collisions, they alsohave an ID, that allows further references.
Finally,traffic lights contain a COLOR parameter to in-dicate the color of the light (red, orange, green orinactive).2.3 Dynamic ObjectsDynamic objects cannot be defined by giving onlytheir nature and position.
Rather than the posi-tion, the movement of the object must be defined.In the CarSim formal representation, eachdynamic object is represented by a VEHICLE,with a KIND parameter indicating its nature,(car or truck) and a unique identifier ID.
Themovement of a dynamic object is defined bytwo parameters.
The INITIAL DIRECTIONdefines the direction to which the object isheaded before it starts driving (north, south,east, or west).
The second parameter is anordered list of atomic movements that are de-scribed by EVENTs.
This list is called the eventchain and corresponds to the CHAIN parame-ter.
KIND specifies the nature of each event.At present, CarSim recognizes the followingevents: driving forward, stop, turn left, turn right,change lane left, change lane right, overtake.Figure 2 shows the motion of a dynamic objectwith KIND = car, INITIAL DIRECTION = Eastand CHAIN =<driving forward, turn left, driv-ing forward>.event 1event 2event 3Figure 2: A crossroads with a vehicle driving for-ward, turning left and driving forward with aninitial direction to the East.2.4 CollisionsAs we said before, the accident is described byan ordered list of collisions.
The order of thecollisions in the list corresponds to the order inwhich they take place in the accident simulation.A collision is defined by giving the two objectsthat participate in the collision and some addi-tional attributes.
At present, these attributes arethe collision coordinates and the parts of the vehi-cles that are involved in the collision (participat-ing parts).There is a slight distinction between the vehi-cle that collides (in other words: the actor) andthe vehicle that is hit (the victim).
For planningreasons (and also for linguistic grounds) it is use-ful to maintain this distinction in the formalism.To summarize, a collision occurs between an actorand a victim.
The victim can be either a static ora dynamic object, the actor clearly has to be adynamic object.
The notions of actor and victimare not related with the responsibility of one par-ticular vehicle within the accident.
This kind ofrelationships must be deduced from a complex re-sponsibilities analysis, that could be based on thetraffic rules.Next to the location (coordinates) of the colli-sion, something has to be said about the configu-ration of the objects while colliding.
The partici-pating parts are sometimes given in the text, seefor example Text A4 at the beginning of this sec-tion.
The CarSim system uses a simplified modelof these vehicle parts.
They are divided in fourcategories: front, rear, leftside, and rightside, plusone unknown category.2.5 An ExampleIn order to give an example of a formal accidentdescription and also to introduce the linguisticpart, we will give now more details about the man-ually written FD of Text A4.In a written text, information can be given ei-ther explicitly or implicitly.
Besides, the contentsof implicit information differs in each text.
In TextA4, what information can we directly gather fromthe text?Text A4 describes an accident with twocollisions, involving two vehicles and a tree.
Ittakes place at a crossroads.
The first collision in-volves two vehicles.
One of them is referred toas the ?vehicle B?, the other is the narrator?s ve-hicle (?my vehicle?).
From now on, vehicles willbe called vehicleB and vehicleA respectively.
Thesecond collision involves vehicleA and the tree.
Inthe FD, the tree is identified in a unique way astree1.
From this information, we already knowhow many objects will be needed to describe theaccident: two static objects (a crossroads and atree tree1 ), two dynamic objects (vehicleB andvehicleA) and finally two collisions.The text does not mention any special behaviorof the two vehicles.
They are both driving whenthe accident occurs.
Hence, the event chain is thesame for both vehicles, a single driving forwardevent.The roles played by the vehicles in each colli-sion are also given.
As human beings, we deducethem from the grammatical functions of the noungroups or pronouns referring to the vehicles in thesentences where collisions are described.
In thefirst collision, the actor is vehicleB and the victimvehicleA (respectively, subject and object of theverb ?percuter?, ?to collide with?
in the transla-tion).
In the second one, the actor is vehicleA andthe victim tree1.The parts of the vehicles that participate ina collision are sometimes explicitly given in thereport, as for example for vehicleA in Text A4.In the first collision, the impact occurs at therear left-hand side of the vehicle (?On the firstimpact, my rear fender on the left side was hit?
)and in the second one, vehicleA hits the treewith the front of the car (?hence a second frontalcollision?
).Actually, we don?t know whether the vehiclesin the text are cars, trucks or something else.
Asno precise information is explicitly given in thetext, we simply assume that these vehicles arecars3.
The type of vehicles is not the only im-plicit piece of information in the text.
The initialdirections of the vehicles are only known relativelyto each other.
We know that vehicleB is comingfrom the left-hand side of vehicleA (?Vehicle Barrived from my left?)
and if we arbitrary decidethat vehicleA starts heading to the North, thenvehicleB has to start heading to the East.
Thesame fragment of the text gives us the participat-ing part of vehicleB.
Since the participating partof vehicleA in the first collision is leftside, we canconclude that vehicleB?s part is front.
The treehas no particular participating part.
Thus, it willbe defined as unknown but we can assume thatthe impact occurs with the trunk because all thescene takes place in a two-dimensional plane.Below is the formal description of Text A4 thatcan be given to the simulation module of CarSim:// Static objectsSTATIC [ROAD [KIND = crossroads;]TREE [ID = tree1; COORD = ( 5.0, -5.0 );3car will be the default value of the KIND param-eter of dynamic objects.
]]// Dynamic objectsDYNAMIC [VEHICLE [ID = vehicleB; KIND = car;INITDIRECTION = east;CHAIN [EVENT [KIND = driving_forward;]]]VEHICLE [ID = vehicleA; KIND = car;INITDIRECTION = north;CHAIN [EVENT [KIND = driving_forward;]]]]// Collision objectsACCIDENT [COLLISION [ACTOR = vehicleB, front;VICTIM = vehicleA, leftside;COORD = ( 1.0, 1.0);]COLLISION [ACTOR = vehicleA, front;VICTIM = tree1, unknown;]]The only information we did not discuss yet arethe coordinates of static objects and impacts.
Co-ordinates are numbers.
They are never explicitlygiven in the text and obviously, even if some num-bers appeared in the text, the semantic of thesenumbers would be implicit too.
CarSim assumesthat coordinates (0,0) are the center of the scene.In Text A4, the origin is the center of the cross-roads.
The first collision occurs in the crossroads,hence the coordinates will be close to the origin.The coordinates of the tree are chosen so that theymatch the idea of the scene as a reader could imag-ine it.
They also depend on the size of the graphi-cal objects that are used in the 3D scene (e.g.
thesize of the roads).3 The Information Extraction TaskThe first stage of the CarSim processing chain isan information extraction (IE) task that consistsin filling a template corresponding to the formalaccident description (FD) described in Section 2.Such systems have been already implemented, asFASTUS (Hobbs et al, 1996), and proved theirrobustness.
Our information retrieval subsystemis restricted to car accident reports and is goal-driven.
The main idea is to start from a defaultdescription, a pre-formatted FD, that the IE taskalters or refines using inference rules.
Hence, thedefault output will be a well-formatted FD, de-scribing a collision between two cars, even if thegiven text is a poem.3.1 ParsingThe first step of the information extraction pro-cess is a lexical analysis and a partial parsing.
Theparser generates tokenized sentences, where noungroups, verb groups, and prepositional groups areextracted.
The parser uses DCG rules (Pereiraand Shieber, 1987) and a dictionary containingall the words that occur in the corpus.3.2 Extracting Static ObjectsThe formalism describes two types of static ob-jects: the type of road (the road configuration)and some other static objects (stop signs, traf-fic lights, pedestrian crossings and trees).
Themethod used to extract these objects consists inlooking up for keywords in the tokenized text.The extraction of static objects is done at thebeginning of the information extraction task.
Werealized that the road configuration is the mostrelevant piece of information in the description ofan accident, since it conditions all the followingsteps (see Section 3.4 for further explanations).The formalism considers four different config-urations: straightroad, crossroads, turn left, andturn right.
In the present system, we restricted itto three types of road:?
crossroads, indicated by cue words suchas ?carrefour?, ?intersection?, ?croisement?
(crossroads, intersection, junction).?
turn left, with cues such as ?virage?,?courbe?, ?tournant?
(bend, curb, turn).We assume that turn left and turn right areequivalent.?
straightroad, that corresponds to the situa-tion when none of the previous words havebeen found.3.3 Extracting CollisionsA collision consists of a verb, an actor, a vic-tim and of the participating parts of the twovehicles.
We select verbs describing a colli-sion such as ?heurter?
(?to hit?
), ?taper?
(?tobang?
), ?percuter?
(?to crash into?
), ?toucher?
(?to touch?),.
.
.For each extracted verb, the system checkswhether the verb group is in passive or activeform, then identify the related grammatical rela-tions: subject-verb and verb-object or verb-agent.Extraction techniques of such dependencies havealready been implemented, as in (A?
?t-Mokhtarand Chanod, 1997).
Our system uses three pred-icates in order to find the subject (find subject)and either the object (find object) or the agent(find agent) of the verb.
If the verb is in an activeform, it makes the assumption that the subjectand the object of the verb will be respectively theactor and the victim of the collision.
In the caseof a passive form, the subject will be the victimand the agent, the actor.Below is the sketch of the algorithm of thesethree predicates:?
find subject looks for the last noun group be-fore the verb that describes a valid actor, thatis a vehicle or a personal pronoun like ?je?(?I?
), ?il?
(?he?
), or ?nous?
(?we?)
.?
find object starts looking for the first noungroup after the verb that describes a validvictim, that is both vehicles and static ob-jects.
If no valid victim is found, it searchesfor a reflexive or personal pronoun inside theverb group.
In case of failure, the first noungroup after the verb is chosen.?
find agent looks for a valid actor in a prepo-sitional group introduced by ?par?
(?by?
).3.4 Generating Collisions and DynamicObjectsFor each collision, the system tries to extract theparticipating parts of the vehicles in the noungroups that refer to the actor and the victim.
Todo this, it looks for cues like ?avant?, ?arrie`re?,?droite?, or ?gauche?
(?front?, ?rear?, ?right?, or?left?
).Then, the system creates two dynamic objects(see Section 3.5) and a collision between them.The generated properties of the collision dependon the road configuration:?
Straight road: the first vehicle heads to theEast, the other one starts from the oppositeend of the road, heading to the West.
Thecollision is a head-on impact.?
Turn: The first vehicle starts heading to theEast, then turns to the Left.
The second onestarts heading to the South, then turns to theRight.
The collision is frontal and happens atthe center of the turn.?
Crossroads: We choose to represent here themost frequent traffic offence (in France).
Thefirst vehicle drives straight to the East, thesecond one drives to the North.
The front ofthe actor?s vehicle collides with the left-handside of the victim.As we do not extract the initial directions ofthe vehicles, these three cases are the only possi-ble ones.
When the system cannot find the actoror the victim of a collision, default objects are cre-ated matching the road configuration.3.5 Deleting Useless ObjectsWhen creating collision objects, two new vehiclesare instantiated for each collision, even if the vic-tim is a static object.
Moreover, one vehicle canobviously participate in several collisions.
All theunnecessary vehicles should then be thrown away.A vehicle that represents a static object can beremoved easily, since the real static object stillexists.
All we have to do is to modify the referencegiven in the victim parameter of the collision inthe template, then delete the redundant vehicle.Deleting the duplicates is more difficult and in-volves a coreference resolution.
An identificationmechanism of the narrator has been added to thesystem.
All the personal pronouns in the first per-son or some expressions like ?the vehicle A?
willbe designated with the id enunciator.
In the othercases, coreference occurs only when the two idsare strictly the same (in the sense of string com-parison).
Then, the system keeps only the firstcreated object between the duplicates and deletethe others.3.6 Extracting Event ChainsThe vehicles generally do not drive straightforward.
They carry out two or moresuccessive actions.
In the formal descrip-tion, these possible actions correspond to theevents of dynamic objects and are in limitednumber: driving forward, turn left, turn right,change lane right, change lane left, overtake, andstop.In written reports, these actions are mostly in-dicated by verbs.
The system has to identify themand to link the corresponding event(s) to the ap-propriate vehicle.
When the subject is identifiedas the narrator, the link is obvious.
In the othercases, if there are only two vehicles, the narra-tor and another one, a new event is added to theevent chain of the second vehicle.
Otherwise, thesystem checks whether the subject of the verb isstrictly identical (string comparison) to one vehi-cle?s id.
In this case, a new event is also createdand added to the event chain.
Some verbs implymultiple events, e.g.
?rede?marrer?
(?to get driv-ing again?)
that indicates that the driver stoppedbeforehand.
Consequently, a stop event then adriving forward event are added.With this simple extraction mechanism, the or-der of the events in the event chain does not neces-sarily respect the chronology but rather the orderof the text.
We assume that the story is linear,which is the case in most accident reports.3.7 Writing the Formal DescriptionThe final step of the linguistic part consists in for-matting a template corresponding to the accidentdescription.
Because the inferred facts have ex-actly the same attributes as the formalism?s el-ements, a very simple transcription algorithm isused to convert the facts in a text file that can beprocessed afterwards by the simulator.4 PlanningPlanning complex events like collisions requiresa well-defined and flexible planning architecture.General planning algorithms which apply methodsincorporating artificial intelligence, are discussedin (Nilsson, 1998).
The CarSim planner is muchmore straightforward, because the planning pro-cess is not as complex as a lot of traditional AIplanning problems, see also (Norvig and Russell,1995).
The total planning process is performed byusing five different subplanners, which all performa small part of the total planning task.4.1 The PreplannerThe preplanner is a planner that ensures the con-sistency of the formal description.
If some valuesare not given (e.g.
coordinates of a static object orinitial directions of dynamic objects) or some val-ues imply a contradiction (a vehicle turning left ona straight road), this planner tries to find (default)values and to solve the conflicts.
This planner isa simple knowledge base, as discussed in (Norvigand Russell, 1995).4.2 The Position PlannerThe position planner estimates the start and endpositions of the vehicles in the simulation.
By de-fault, a vehicle is placed 20 meters away from thecenter of the (cross)road.
If two or more vehiclesare moving in the same direction, they can?t all beplaced at this distance because they would over-lap.
Therefore, if there is more than one vehiclefacing a particular direction, the second vehicle isplaced at a distance of 26 meters from the centerand if there is a third vehicle, it is placed at 32 me-ters from the center4.
Regarding the end points ofthe vehicles, the vehicle that is placed closest tothe center, will have its end point placed fartheraway from the center.
The vehicle initially havinga start point far away from the center will have anend point close to the center, so that every vehicletraverses approximately the same distance.4.3 The Trajectory PlannerBased on the (very global) description of themovement of every vehicle in the formal model,this planner constructs a trajectory, representedby a set of points in the Euclidian space.
Everyevent in the event chain is converted to a list oftrajectory points.
A turn is approximated by anumber of points lying on a circle arc.
Overtak-ing is modelled by using a goniometrical function.4.4 The Accident PlannerThe accident planner uses the trajectory that iscreated by the trajectory planner.
Since eventchains only include atomic movements and notcollisions, this trajectory is planned as if there wasno collision at all.
The task of the accident plan-ner is to change this trajectory in such a way thatit incorporates the collision.
Some part of it hasto be thrown away and an alternative part (whichultimately leads to the point of collision) has to beadded to the trajectory.
For every vehicle, actoror victim, the trajectory is thus changed in twosteps:1.
Remove a part of the trajectory.2.
Add a part to the trajectory so that the fi-nal result will be a trajectory that leads thevehicle to the point of collision.The part of the trajectory that has to be re-moved depends on the coordinates where the colli-sion occurs.
We designed an algorithm that drawsa circle around the collision point and removes thetrajectory part that lies within the circle region.Also, the segment that comes after the removedtrajectory part is thrown away, because a trajec-tory does not allow gaps.
The radius of the circleis thus a parameter that defines the precision ofthe algorithm.
If a large radius is chosen, a largepart of the trajectory will be removed.
An appli-cation of the algorithm using a small radius onlyremoves the trajectory part closest to the collisionpoint.4In the CarSim system, the maximum number ofvehicles that can have the same initial direction isthree.4.5 The Temporal PlannerThe temporal planner of the CarSim system isnot a planner in the sense of the planners de-scribed in (Nilsson, 1998) The temporal plannerof the CarSim system plans the temporal valuesof the trajectory in two steps.
Generally, a trajec-tory consists of a number of ?normal?
trajectorypoints, followed by a number of trajectory pointsthat represent a collision.
First the segment thatis not part of any collision is planned.
After that,the system plans the remaining segment.
In theCarSim system, every trajectory point has a timevalue.
This is a value between 0 and 1, with 0 rep-resenting the beginning of the simulation and 1being the end of it.
The temporal planner tries tofind time values for the trajectory points so thatthe collisions happen in a natural way.5 Results and DiscussionThe CarSim system has been implemented andevaluated over the MAIF corpus.
The assessmentmethod does not consist, as usually done with IEsystems, in calculating a precision and a recall.Our objective is to design a system that carriesout the whole processing chain, that is from awritten report up to a 3D animation.
Therefore,we preferred to compare the simulation with theunderstanding and mental representation of thescene that could have a human reader.
This im-plies that some aspects of the formal descriptionare not taken into account when evaluating thesystem, e.g.
we assume that the value of the INI-TIAL DIRECTION parameter is less importantthan the positions of the vehicles relatively to eachother.
Hence, we considered that the result is ac-ceptable as far as the latter is correct.According to such criteria, we considered thatthe simulation provided by the system corre-sponds, in 17% of the texts, with what could haveimagined a human being.
Figure 3 & 4 show thetwo collisions described in Text A4.Failure cases have many different grounds.They may be related either to the IE task, tothe simulator, or to a lack of cooperation betweenthe two subsystems.
Evaluating separately eachsubsystem leads to a better understanding of theactual limits of the system.Feeding the simulator with manually writtenformal descriptions provides a good way to eval-uate it for itself.
According to such tests, theCarSim system generates an acceptable simula-tion of almost 60% of the reports.
This impliesthat the results of the overall system will be lower.CarSim?s simulator does not succeed in simulat-ing manually written formal descriptions becauseFigure 3: The first collision in Text A4.Figure 4: The second collision in Text A4.of three main causes: expressivity of the formal-ism that does not cover all possible accidents (e.g.synchronization between event chains of differentobjects), the restricted number of scenarios con-sidered by the CarSim visualizer and the limiteddatabase of 3D graphical objects.
Depending onthe text, the failure is the result of either onlyone of these restrictions or a combination.
Futurework on the project will focus on these issues.The efficiency of the IE task varies with thenature of extracted information.
First, the resultsclearly depend on the accuracy with which thesystem can correctly extract impacts, that isfind the verb representing the collision and alsoresolve the actor, the victim and possibly theirparticipating parts5.
This task is successfullyaccomplished in 69% of the texts6.
In addition,the system correctly extracts EVENTS in 35% ofthe texts.
This means that in 35% of the texts,all the events are properly extracted with a goodordering.5when the parts are explicitly described6In the rest, it generates default impacts or impactsare erroneous.Concerning time and space information, thesystem provides only simple mechanisms to ob-tain them.
Our system is at an early stage andour objective when designing it was to see whethersuch an approach was feasible.
It represents asort of improved baseline with which we can com-pare further results.
At this time, the temporalinformation known by the system is restricted tothe events associated with dynamic objects.
Ourmethod assumes that they are given in the text inthe same order they occur in reality.
This is a sim-plification that proves wrong in some reports.
Fur-ther improvements could take into account tensesof verbs, temporal adverbs and prepositions, sothat the system could determine the real chrono-logical relationships between events.A similar comment can be given with regards tospatial information.
In CarSim, the spatial con-figuration (the background of the scene) is givenmainly by the type of roads.
The extraction ofparticipating parts also provides additional in-formation that influence the relative positions ofthe vehicles when colliding.
During preplanningstage, the system checks the consistency of theFD and tries to resolve conflicts between the dif-ferent information.
At present, initial directionsof the vehicles depend only on the background ofthe scene, that is the road configuration.
The co-ordinates are also chosen arbitrary from the be-ginning.
See for example the tree referred as tree1in Text A4: no information about its location isgiven in the text.
The only facts relative to it thatwe can deduce from the original report are its ex-istence and its involvement in a collision.
More-over, the problem of choosing a referential fromwhich to calculate coordinates is quite unsolvablefor texts that do not mention it explicitly.
The IEtask could involve deeper semantic analysis thatprovides means of constructing a more global spa-tial representation of the scene.6 ConclusionThis paper has presented a prototype system thatis able to process correctly 17% of our corpus ofcar accident reports up to a 3D simulation of thescene.
The chosen approach divides the task be-tween information extraction to fill templates andplanning to animate the scene.
It leads to en-couraging results, considering that the informa-tion retrieval could be improved by integratingmore elaborate methods to deal with space andtime in written texts.ReferencesS.
A?
?t-Mokhtar and J-P. Chanod.
1997.
Subjectand object dependency extraction using finite-state transducers.
In Proceedings of ACL work-shop on Automatic Information Extraction andBuilding of Lexical Semantic Resources for NLPApplications.N.
Badler, W. Becket, B.
Di Eugenio, C. Geib,L.
Levison, M. Moore, B. Webber, M. White,and X. Zhao.
1993.
Intentions and expectationsin animating instructions: the AnimNL project.In Intentions in Animation and Action.
Insti-tute for Research in Cognitive Science, Univer-sity of Pennsylvania, March.O.
Bersot, P.O.
El-Guedj, C. Gode?reaux, andP.
Nugues.
1998.
A conversational agent tohelp navigation and collaboration in virtualworlds.
Virtual Reality, 3(1):71?82.A.
Blocher and J.R.J.
Schirra.
1995.
Optionaldeep case filling and focus control with mentalimages: ANTLIMA-KOREF.
In Proceedings ofIJCAI-95, pages 417?423.R.E.
Coyne and R. Sproat.
2001.
Wordseye:An automatic text-to-scene conversion system.In Proceedings of International Conference onComputer Graphics and Interactive Technolo-gies (SIGGRAPH 2001).
AT&T Research Lab.C.
Gode?reaux, P.O.
El-Guedj, F. Revolta, andP.
Nugues.
1999.
Ulysse: An interactive, spo-ken dialogue interface to navigate in virtualworlds, lexical, syntactic, and semantic issues.In John Vince and Ray Earnshaw, editors, Vir-tual Worlds on the Internet, chapter 4, pages53?70.
IEEE Computer Society Press.J.R.
Hobbs, D. Appelt, J.
Bear, D. Israel,M.
Kameyama, M. Stickel, and M. Tyson.
1996.FASTUS: A cascaded finite-state transducer forextracting information from natural-languagetext.
In Roche and Schabes, editors, FiniteState Devices for Natural Language Processing.MIT Press.N.J.
Nilsson.
1998.
Artificial Intelligence, a NewSynthesis.
Morgan Kaufmann Publishers, Inc.P.
Norvig and S.J.
Russell.
1995.
Artificial intel-ligence: a modern approach.
Prentice Hall.F.C.N.
Pereira and S.M.
Shieber.
1987.
Prologand Natural Language Analysis.
Stanford Uni-versity.
CSLI Lecture Notes No.10.F.
Pied, C. Poirier, P. Enjalbert, and B. Vic-torri.
1996.
From language to model.
InWorkshop Corpus-Oriented Semantic Analysisin European Conference on Artificial Intelli-gence (ECAI), August.
