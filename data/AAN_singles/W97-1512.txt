ALEP-BasedDistr ibuted Grammar EngineeringAxe l  Theof i l id i sIAIMartm-Luther-~,tr .
1466111 Saarbr/icken, Germanyaxe l~ ia?
,  un?- sb.
dePau l  SchmidtUniversity of Mainz, FASK GermersheimAn der Universit~t 276726 Germersheim,  Germanyschmidtp@usun2, fask.
uni-mainz, deAbst rac tStarting from a clarification concerningthe notion of distributed grammar engi-neering, we present options of distributedgrammar engineering as are supported bythe ALEP grammar development platformand as were instantiated in the LS-GRAMproject.
The notion of distributed gram-mar engineering being grounded in theconcepts of grammar modularization a dgrammar module integration, we focus onALEP features providing operational sup-port for these two concepts in terms ofboth data storage and internal classifi-cation of grammar code.
We concludewith an indication of the major benefitsof ALEP facilities for distributed gram-mar engineering and derive some generaldesiderata from this.1 Two Not ions  o f  D is t r ibutedGrammar  Eng ineer ingAccording to our understanding, two notions ofdistributed grammar engineering (DGE) should bedistinguished: (i) DGE meaning that tasks whichjointly contribute to the development and mainte-nance of a grammatical resource are distributed overdifferent persons working, perhaps, at different sites;(ii) DGE meaning that different domains of linguis-tic information, different layers of linguistic descrip-tion are distributed over different processing (sub-)tasks.Irrespective of this difference in notion, there isa fundamental presupposition common to both no-tions of DGE: that grammatical resources bear amodular structure, and that grammar modules be-ing distributed over different authors or processingdevices can neatly be integrated to form a coherentgrammatical resource, respectively to support a co-herent chain of processing tasks.
Thus, as shownin Figure 1, the idea of DGE is firmly groundedin the concepts of modularization and integration:once grammar modularization is provided and inte-gration of grammar modules is ensured, the optionof DGE falls off as a side-effect.grammarintegrat ion ~ modular izat iondistributionFigure 1: DGE grounded in the concepts of modu-larization and integrationIn the following two sections we will presentoptions of grammar modularization and grammarmodule integration as are supported in the ALEPgrammar development platform both in terms ofdata storage (section 2) and in terms of internalclassification of grammar code (section 3).
We willindicate how these options were made use of to sup-port DGE in the LS-GRAM project, 1in the contextof which broad-coverage rammatical resources fornine EU-languages were developed.
Though no op-erational concept of DGE has been implemented atthe multi-lingual level in this project, each particu-lar grammar was collaboratively written by severalauthors which, in some cases, were even located atdifferent sites?
thus giving rise to a real need forDGE support.1LRE 61029: Large-Scale Grammars for EULanguages2The Dutch grammar was developed at SST, Utrecht,and KUL, Leuven; the German grammar at IAI,Saarbrficken, and IMS, Stuttgart; the Italian grammarat DIMA, Torino, and ILC, Pisa; the Spanish grammarat FBG and UPF, both Barcelona.84 ?2 Grammar  Modu lar i za t ion  andIn tegrat ion  in  te rms o f  DataS torageThe ALEP platform realizes an object-oriented nvi-ronment.
As such it assumes torage of data at twolevels: the file level and the object level.
At the filelevel, data (grammar code) may be distributed overan arbitrary number of files, each of them contain-ing a particular type of data (e.g.
type and featuredeclarations, lexical entries, phrase structure rules).A phrase structure grammar, for instance, may bedistributed over several files each of them containinga set of rules accounting for a particular domain ofconstituency (e.g.
'S', 'VP', 'NP') or for some par-ticular type of construction (e.g.
apposition, coordi-nation, extraposition).
Similarly, a lexicon may bedistributed over several files along dimensions suchas part-of-speech category or sub-language.At the object level, on the other hand (cf.
(Groe-nendijk, 1994)), an arbitrary number of files consti-tuting a coherent grammar module may be groupedinto an object being defined in terms of the ALEPUser Language (AUL) 3 and stored in the ALEP Ob-ject Repository (AOR).
Figures 2 and 3 show sam-ple (but partial) AUL objects representing a phrasestructure component and a declarations componentof a grammar.lg_ps_rules Ilowv \[namenowv \[.ownerrule_filesstr\]i~jloc(file-infolbTe\file_info \[basedecl_ref'GRAM//RULES//STR//'\]str_xp J''GRAM//RULES/STR//'\]str_sent J '\[,ypo \]/ n?wV \[o me dec\]tnowv" nowvLOWner iai j jFigure 2: Sample A UL object representing a phrasestructure componentThe object of type I lg_ps_rules bears the list-typefeature 'rule_files', with each of the 'fileAnfo' fea-ture structures pointing to a file containing a setof phrase structure rules.
4 In addition, an object oftype ~ is referred to by the feature 'decl_ref'.3A typed feature structure notation similar to the lin-guistic formalism supplied with ALEP.4A UNIX directory path and a file name are given asthe vMues of the attributes 'loc' and 'base'.85nowv \[name dec\]nowv/owner iaij( r,odecl_files file_info I.base'ORAM //DEOLS //  PES //'\] \typ_syn J'~Figure 3: Sample A UL object representing a decla-rations componentThis object (shown in Figure 3) represents the dec-larational basis of the respective phrase structurecomponent.
It refers, in its turn, to a list of files con-taining a coherent set of declarations (e.g.
type andfeature or macro declarations) upon which a phrasestructure component or any other grammar compo-nent (e.g.
a lexicon component) may be based.A coherent set of grammar components may, inturn, be grouped (i.e.
integrated) into a higher-level object of type lglingware_group\] represent-ing a complete grammar (or sub-grammar).
This isshown in Figure 4 illustrating the modular and, atthe same time, hierarchical style of data structuringcharacteristic of ALEP.
5Presuming a principled distribution of grammat-ical data over files (reflecting, for instance, differ-ent types of grammatical phenomena or different do-mains of grammatical description), a whole range ofspecialized grammars or grammar components maybe configured at the object level according to par-ticular grammar development or maintenance tasks.Objects may be defined, for instance, which incre-mentally extend the core coverage of a grammar bynew domains of linguistic description.
This is illus-trated in Figure 5, where two \[lg_ps_rules\] objectsare shown, both of which share the files containingthe basic phrase structure rules dealing with senten-tim (file 'str_sent') and non-sentential (file 'str_xp')constructions, but which extend this set of files onceby a file accounting for coordinated structure and, inthe second case, by a file accounting for paragraphstructure.Based on this kind of definition of specializedgrammars or grammar components, grammar de-velopment and maintenance tasks being related toparticular domains of linguistic decription may eas-ily be assigned to, and distributed over, differentpersons possibly working at different sites.
Physi-cal distribution (exchange) of grammar componentsis conveniently supported by the ALEP 'Export'5Objects of typo I lg_lox ules I and L lg_tlm_r?leslrepresent lexicon, respectively two-level morphology,components.lgJingwa,re_group \]I'g ex-,:u'es I I'g-p s-ru'esl I 'g-t m-rulos I~ ~  GRAM/DECLS'~ ~ "~ RULES/x LEX/ STR/ TLM/l \  l \  l \1 \ / % 1 \l \ l %.
1 \l %.
l \ l \Figure 4: Data storage at the AOR object level and the UNIX file levellg_ps_rules\[lOWVname str_coor \]owner axel IversionW?rkarea" ~lsg_de, i i)JnowvIg_ps_rules\[lOWVname str_para Iowner thierry /versionW?rkarea ~lsg_de, ims)\]nOWV.../str..sent .../str_xp .../str_coor .../str_paraFigure 5: Object-based efinition of specialized grammar componentsand 'Import' functionality, where 'Export' performsa (UNIX) 'tar' operation on a selected set of ob-jects, and 'Import' performs an 'untar' operation onan 'Export'-created tar-file, asserting all respectiveobjects to the AOR as well as creating all directo-ries and files being referred to by these objects (of.
(Groenendijk, 1994), chapter 3).Management of larger sets of objects being iter-atively exchanged between persons or sites is wellsupported by a number of features being assigned toevery object, such as the 'comment' feature, whichallows to encode a comment string with every ob-ject, and, most importantly, the object identifica-tion feature 'nowv' which requires every object tobe assigned a unique combination of (object) name,(object) ownership, (object) workarea, and (object)version (cf.
(Groenendijk, 1994), chapter 4), thusallowing to keep track of distributedness in gram-mar writing.
In the illustration given in Figure 5,for instance, the 'nowv' feature indicates that Axelobviously is the person who elaborates on the sec-ond version of a phrase structure component cover-ing coordinated structure as part of the German LS-GRAM resources developed at IAI, whereas Thierryis the person who elaborates on the third version ofa phrase structure component covering paragraphstructure as part of the German LS-GRAM re-sources developed at IMS.This style of distributed grammar developmenthas been a standard practice in the LS-GRAMproject.
Thus, for instance, it has been a typicalapproach to have the morphological nd the syn-tactic grammar components developed by differentpersons and, as in the case of the Italian or Spanishgrammar, even at different sites.After each cycle of distributed grammar develop-ment based on the definition of specialized grammarsor grammar components, re-integration of the var-ious grammar modules can easily be performed atthe level of data storage by defining respective new86I lg-"ngware-gr?up" I I 'g ngware-gr?up b I \[lg_"ngware_group1 I I I I I 1.../lex_core .../lex_finc .../lex_econ(= finance) (= economy).../str_core .../str_apps .... /str_coor(= apposition) (= coordinationFigure 6: Object-based sub-grammar configurationobjects.
Grammar modules being established at thefile level and spread over different objects represent-ing specialized grammar components can be mergedinto one object representing a full coverage gram-mar component.
Such full coverage grammar com-ponents may, in turn, be grouped into a higher levelobject of type I lg_lingware_group \] representing a fullcoverage grammar.
6Interesting to note is that the style of modular-ization and integration of grammars upported inALEP at the level of data storage not only conve-niently supports DGE (as we hope to have shown),but also a high degree of flexibility in configuring(and re-configuring) rammars according to specific(and changing) demands of different application sce-narios.
This is illustrated in Figure 6, showing howsub-grammars with varying coverage can be con-figured at the object level based on a fine-grainedmodularization of grammar components along di-mensions uch as sub-language for lexicon compo-nents, or types of syntactic onstructions for phrasestructure components.Grammar Modularization andIntegration in terms of DataClassificationBesides in terms of data storage, ALEP also sup-ports grammar modularization and integration interms of internal classification of grammar codebased on the notion of specifiers.
Specifiers are desig-nated feature structures 7 which serve the purpose ofencoding membership of a rule in one (or more thanone) class of rules and, thus, realize the notion of arule classifier.
By specifying rules to be members of6Though the process of merging objects is not yetfunctionally supported in the ALEP environment, itis considered a trivial task to integrate a respectivefunctionality.7'designated' in that they are picked out by a specialfeature path declarationparticular classes of rules, grammars are internally(and, in that, multi-dimensionally) partitioned intosub-grammars (cf.
(Simpkins, 1994a), chapters 5and 7).Specifier-based grammar partitions may be estab-lished along two basic dimensions illustrated in Fig-ure 7: along a vertical dimension, grammar par-titions may be established according to differenttypes of processing operations to apply; lexical en-tries, for instances, may be specified to be appliedduring word segmentation (= two-level based mor-phographemic analysis), during analysis (= pars-ing), or during refinement only (the operation of re-finement will be explicated below).
Along a horizon-tal dimension, on the other hand grammar partitionsmay be established according to different ypes ofstructural units being involved in the parsing oper-ation; structure rules may be specified to be appliedonly when parsing morphemes to words, words tosentences, or sentences to paragr~,phs.The main effect that can be obtained by anintelligent specifier-based grammar partitioning isin terms of increased performance fficiency: Byspecifier-based grammar partitioning, access of rulesduring execution of some processing (sub-)task canbe restricted to a sub-grammar being identified viaa particular instance of the specifier feature struc-ture and encoding only as much information as isrelevant o the respective processing task.Irrespective of performance support, however,specifier-based grammar partitions constitute an op-erational concept of grammar modularization thatcan be multiply exploited in DGE.
In that, theALEP 'Refine' operation plays a crucial role.
'Re-fine' is a monotonically operating feature-decorationalgorithm which (re-)applies tructure rules and lex-ical entries to consolidated structure trees as are ob-tained from analysis (or synthesi, 0.
Important withregard to DGE, as we will see shortly, is that 'Re-fine' may be executed an arbitrary number of timesin succession.The set of rules applied by the: 'Refine' operation87sent-to-paraword-to-sentmorph-to-word- Oegmen 3 - -  C-.
yse  - -  - -Figure 7: Grammar partitioning along a vertical and a horizontal dimensionmust constitue a complete grammar which is unifi-able (partially identical perhaps) with the grammarthat was applied by the preceding operation.
Inthat, however, 'Refine' will produce an effect onlyby application of rules which add some information(feature decoration!)
compared to the correspondingrules that were applied by the preceding operation.By a systematic distribution (based on a verticalgrammar partition scheme) of different domains oflinguistic information over an analysis grammar andone, or more, 'Refine' grammars, the presumed mod-ularity of linguistic knowledge is (monotonically)fleshed out at the level of grammar engineering.Thus, for instance, it has been a typical practicein LS-GRAM to distribute syntactic and semanticinformation over an analysis and a refinement gram-mar respectively; by this, parsing will not be affectedby ambiguities residing in the semantic domain (cf.,for instance, (Schmidt et al, 1996a) and (Schmidtet al, 1996b)).1Canalyse~!
!syntaxsemanticsFigure 8: Grammar partitioning according to differ-ent domains of linguistic informationMore importantly with regard to DGE, however,is that grammar modules being distributed overthe processing operations of analysis and refine-ment and being delimited according to different do-mains of linguistic information, can simultaneouslybe distributed over different authors according totheir specific expertise.
The degree of this kind ofdistributedness can be significantly increased by astill finer-grained modularization f grammatical re-sources assuming multiple application of the 'Refine'operation, as illustrated in Figure 9.
Thus an ac-count of syntax can be distributed over a grammarmodule supporting shallow parsing and a grammarmodule performing syntactic filtering based on therefinement operation; different aspects of semanticsand pragmatics may futhermore be distributed overdistinct grammar modules being successively appliedduring further efinement s ages:~ef lne~Oef lnek~1tCreflne,.Dlsyntax1 : shallow parsingsyntax2: syntactic filteringsemantics1: linking theorysemantics2: lexical semanticspragmaticsl : register & stylepragmaticsz : implicatureFigure 9: Grammar partitioning according to differ-ent domains of linguistic informationHowever, if the only effect of specifier-based gram-mar partitioning was that of distributing differ-ent domains of linguistic information over grammarmodules to be applied during successive process-ing stages, the same effect could also be obtainedby simply assuming distinct grammar modules interms of data storage (i.e.
at the file and objectlevel of data storage).
But, in terms of both gram-88\[:o.o.O: r\]gramphen \[extrp :g_phen " " "core yspec specl \[appo~ n\]gramphen \[: :t  ?'d...
yg_phen\[.core Y\[:ppo d n\]gramphen \[?xtrp ;core g_phenyspecFigure 10: Specifier feature structures establishing a cross-classificatory grammar partitionmar development and maintenance tasks it is, infact, an advantage of the specifier-based approachto grammar modularization that logically relatedgrammar code may be stored in one and the samefile, though it will be applied, in effect, at differ-ent processing stages.
An even bigger advantageis that the specifier-based approach to grammarmodularization supports a multi-dimensional, cross-classificatory partitioning of grammars which is notpossible in terms of data storage, unless at the costof redundantly duplicating rammar code.
In termsof specifier feature structures as those shown in Fig-ure 10, for instance, grammar ules are simultane-ously assigned to the class of rules establishing acore-coverage rammar and to one of several classesof rules accounting for specific grammatical phenom-ena, such as apposition, coordination or extraposi-tion.Based on specifier feature structures establishinga cross-classificatory partition scheme for grammars,specialized grammar modules can be both uniquelyidentified by full specification, and integrated by un-derspecification, of specifier features.
Thus, for in-stance, by reference to the underspecified featurestructure shown in Figure 11, all grammar modulesare called except for those dealing with extraposi-tion.\[gramphela \[extrp n\]\]spec \[ g_pnenFigure 11: Underspecified specifier feature structureeffecting rammar module integration4 Conc lus ions  and Des iderataThe mechanisms and devices described in the pre-vious sections constitute a first step towards remov-ing a decisive bottleneck in large-scale distributedgrammar engineering s. The bottleneck is that thebigger and the more complex a grammar becomesthe more difficult it is to extend it, improve it, or8We think that large-scale grammar engineering mustbe distributed in general.adapt it.
Grammars tend to become huge, incom-prehensible monolithic blocks which are more andmore difficult to maintain, with distributed evelop-ment becoming impossible.
In the following we willmake some general, summarizing points about whatwe think can be derived from the kind of facilitiesprovided by ALEP for DGE in general.
In this, wewill mainly focus on benefits of specifier-based parti-tioning, addressing the issues of testing, distribution,maintenance and deployment, as well as touching onthe issue of monotonic vs. non-monotonic grammardevelopment.
In section 4.2 we conclude with deriv-ing some general desiderata for DGE.4.1 Benefits for Large-Scale GrammarEngineer ingTesting: A major advantage of the specifier facil-ity lies in the fact that testing (and thus develop-ment) becomes easier as specific modules (that maybe under reconstruction) may be tested separatelyby plugging together just the relevant modules interms of reference to the approriate specifiers.
Thus,it is possible to plug together a core grammar witha coordination module in order to test coordinationwhile leaving aside other phenomena, such as ex-traposition, which may be irrelevant at the givenstage of grammar development.
Then, gradually,more modules may be added (one by one) in orderto explore the interaction of these modules.Dist r ibut ion:  It is obvious that, as far as distri-bution of grammar development is concerned (in thesense that different linguists develop the same gram-mar), facilities as described are a minimum.
Basedon mechanisms of grammar partitioning, grammarscan be developed in a distributed fashion in that onelinguist may work on developing a treatment of ap-positions, building on a given core grammar, whileanother one is working on a treatment of coordina-tion, building on the same core grammar withoutunwanted interference.Ma intenance:  From what has been said abouttesting and distribution, it is obvious that a gram-mar existing in a modular form as supported bythe facilities described is better maintainable thana monolithic one.Dep loyment :  In the same way grammar mod-ules can be plugged together for testing and, more89generally, for development purposes, grammar mod-ules can also be plugged together in order to be de-ployed in different application scenarios with distinctrequirements in terms of linguistic overage or depthof analysis.
That is, one could well envisage that,for particular applications, pecific sets of grammarmodules are plugged together by reference to the ap-propriate specifiers.Monoton ic  vs. Non-Monoton ic  GrammarDeve lopment :  The specifier facility, as introducedso far, suggests that the optimal way of proceedingin grammar development (also independently of thisfacility) is to proceed monotonically, i.e.
by sim-ply adding different modules accounting for specificdomains of linguistic description (such as those ex-emplified by coordination and extraposition) to al-ready available modules.
However, this is an unreal-istic requirement as the treatment of new phenom-ena hardly ever consists of simply adding (monoton-ically) sets of new rules to an existing grammar.
Itis often required to revise existing modules (even thecore grammar) in the light of requirements derivingfrom the treatment of new phenomena.
But even inthis case the modularization achieved by specifier-based partitioning of grammars i the condition forperforming the required changes efficiently and un-der optimal control, since the consequences of suchchanges can be studied module by module.As a final point, it should be mentioned that par-titioning of grammars by approriate specifiers up-ports adaptation of a grammar to new theoreticalinsights about the nature of human language thatmay become necessary by new developments in the-oretical linguistics.
Specifiers thus contribute con-siderably to the 'reusability' of grammars.4.2 Des iderataThe options of grammar modularization provided inALEP both in terms of file and object-based atastorage and in terms of specifier-based classificationof grammar code, constitute a good basis for sup-porting DGE at an operational level.
As for supportfor grammar module integration, however, we stillsee the need for add-on functionality complementingoperational support for grammar modularization.When thinking of grammar module integration iterms of data storage, one has to bear in mind that,in itself, integration of grammar modules at the levelof data storage does not yet entail an integratedgrammar.
Integration of grammar modules presup-poses integration i  terms of linguistic specificationsmeaning that each particular grammar module mustbe integratable at least wrt.
a common declarationalbasis (type and feature theory, macros etc.)
andsome implemented notion of a core grammar.In both respects, problems with integration mayoccur during the course of distributed grammar de-velopment, where different persons simultanouslyelaborate on different grammar modules.
Interfer-ences may occur, for instance, due to the fact thatwork on a specific grammar module requires partsof the declarational basis to be modified which areshared by other modules.
Interference may also oc-cur due to the fact that a specific grammar modulebeing developed by one author feeds in informationinto modules developed by other authors, with thesemodules, in turn, being supposed to thread this in-formation to still other modules.
To get hold of suchinterferences, ophisticated versioning control func-tionality is required providing for automatic reationof version protocols (encoding modifications, author-ship etc.
), for comparing or merging parallel versionsof some grammar module, and for checking informa-tion paths across grammar modules.As for the concept of specifier-based grammarpartitioning, we consider it desirable to provide adirect linking to the data storage layer by provid-ing the option of defining objects not only in termsof a reference to files, but also in terms of a ref-erence to specifier information.
The idea is thatthe data being represented by an object can be se-lected (and automatically stored in appropriate files)based on a full or partial specification of the spec-ifier feature structure.
By implementation of thisidea, specifier-based grammar partitions of arbitrarygrain-size could become physically manifest at theobject-level of data storage making them immedi-ately accessible to object-level support of DGE suchas the 'Export' / ' Import'  functionality.ReferencesMarius Groenendijk.
1994.
Environment ToolsGuide.
ALEP-2 - Guide to the ALEP User In-terface Tools.
CEC, Luxembourg.Paul Schmidt, Sibylle Rieder, Axel Theofilidis,Thierry Declerck.
1996a.
Final Documen-tation of the German LS-GRAM Lingware(LRE 61029, Deliverable DC-WP6e (German)).IAI, Saarbriicken (http://www.iai.uni-sb.de/LS-GRAM).Paul Schmidt, Sibylle Rieder, Axel Theofilidis,Thierry Declerck.
Lean Formalisms, Linguis-tic Theory, and Applications.
Grammar Devel-opment in ALEP.
1996b.
In Proceedings of the16th International Conference on ComputationalLinguistics (COLING-96), pages 286-291, Copen-hagen, Denmark.Neil K. Simpkins.
1994a.
ET-6/1 Linguistic Formal-ism.
ALEP-2 - User Guide.
CEC, Luxembourg.Neil K. Simpkins.
1994b.
Linguistic Developmentand Processing.
ALEP-2 - User Guide.
CEC,Luxembourg.90
