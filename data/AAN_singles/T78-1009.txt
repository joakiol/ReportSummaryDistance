Subsequent  Reference :  Syntact i c  and  Rhetor i ca l  Const ra in tsDavid D. McDonaldMIT Artificial Intelligence LaboratoryCambridge, Massachusetts 0Z139AbstractOnce a_.nn ~ is introduced into a discourse, the form ofsubsequent references to it are strongly governed byconvention.
This paper discusses how those conventions canbe represented for use by a generation facility.
A multistagerepresentation is used, allowing decisions to be made whenand where the information is available.
It is suggested that aspecification of rhetorical structure of the intended messageshould be included with the present syntactic one, and theconventions eventually reformulated in terms of it.I n t roduct ionWhenever a speaker wants fo refer in text or speech tosome object, action, state, etc., she must find phrase which willboth provide an adequate description and fit the context.What governs her choice?
One way to find out might be tolook at the selected phrase afier the fact and try to develop astatic characterization of the relation between it and itscontext.
This is what most non-computational inguisfs do.However,  relations derived fron~ finished texts are at bestincomplete.
They will not tell us how the choice was made oreven guarentee tllat the relation(s) was apparent w.hen thechoice had to be made.To get a dear picture of what people know about makingreferences, we have to focus our attention of the process thatthey 8_,o through.
It must involve making decisions on the basisof some contextual evidence.
What is the evidence?
How andwhen is it computed?
How is it described?
Is the decision ofwhat phrase to use made all at once or as a gradualrefinement?
How is this process interleaved with the largerprocess of constructing the rest of the utterance?This report describes research done at the ArtificialIntell igence Laboralory of the Massachusetts Institute ofTechnology.
Support for the laboratory's artificial intellienceresearch is provided in part by the Advanced Researc'hProjects Agenc:y of the Department of Defence under Office ofNaval Research contract N00014-75-C-0643.We can narrow tile research problem by.
distinguishing twokinds of references: initial and subsequent.
This classificationdivides instances of reference by their position in a discourse.
"Init ial" references introduce new entities into the discourse,whi le "subsequent" references are another mention of onealready introduced.An inilial reference must be an encompassing enoughdescription of the new entity that the audence will be able torecognize it, This requires matchin 8 goals with evidence froma model of what the audience is likely to already know andhow likely ttley are to understand various choices of wording(e.8.
which of its properties should be emphasized?
- why is itbeing introduced?).
This is not easy.
People talking or writin 8about unfamiliar things or to unfamiliar audiences are notpart icular ly good at it.Subsequent references are another matter.
They are veryhighly grammalisized.
Willie an initial reference may takealmost any form: noun phrases with unrestricted numbers ofadjectives and qualifying phrases, nominalized clauses, verbphrases (for actions), etc., subsequent references must usevery  specialized forms: personal, reflexive, and personalpronouns; special determiners like "this" or "my"; class nounslike "thing" or "one"; and so on.
Here, grammatical conventiondictates most decisions and leaves only some details to freechoice.?
.=My observations in this paper are based on experienceswith a program for generating English texts from the8oal-or iented, internally represented messages of otherprograms.
My program, and the state of the art in general, candeal much better with the representation of a grammar thanwith then representation of an audience model.
Hence thefocus here on subsequent references.The next section looks at the course of the wholegenerat ion process as my program models it, and fits thesub-process of finding phrases fol: references within it.
Thenthe process of deciding whether or not to use a pronoun wigbe examined in some detail.
This will lead to the problem of64accessing audience models and the idea that the relevantinfor,~nlion should be computed oulside the linguisticconslruclion process per 5e.
Thal idea is expanded to include"rhelorical structures" like the relation "all of a set" that leadsto a phrases like "...a square .
.
.
.
the other square".
Finally, adesign?
for lhis rhelorical slruclure is sketched.In terna l  representat ionSuppose we had a logically minded program that wanted ton~ake the statemenl:VX man(x) .-', mortal(x)People who have worked on language generation have almostun\,ersally factored oul all of lhe program's knowledge oflangua~,e into a temporally and computationally distinctcomponent.
Once lhe resl of the program has compiled adescr ipt ion of what it wanls to say ~ like the formula above -i t  passes it off to its "linguistic generation component" and letsit come up with the actual text.13ul before moving on to that component, let us look closerat this formula.
I am presuming lhal the speaker's primary(non-linguislic) represenlalion, be il predicate logic, semanlicnet~, or whatever, uses a lotally unambiguous style ofrepresenlal ion - son~elhing equivalent Io always referin8 to anol)jecl, elc.
by its unique name.
For example, the three "x"'sin the formula all denote lhe same object (albeit local).
The twopredicates, the quantifier and the irnplication sign all denotedifferent ol)jecls.We usually think of objects - noun phrases - as being theonly lhings lhal mighl be refered to more lhan once, but thalis nol the case.
Consider the formula mortal(Romeo) ^mortal(Juliet).
Thal could' be rendered in any of several waysincluding: "Pomeo is mortal  and so is Jufief".
Here lhe secondinstance of mortal() was realized by a special, highly restrictedgrarm,~atic device - exaclly lhe characteristics of a "subsequentreteren?e".
From lhe point of view of the language generationcomponenl, lhe imporlanl lhing will be lhe repetition of somenan~e l'rom lhe input formula not, at first glance at leasl, thekind of object lhal name denotes.
("The set of descriptiveformula~ supplied to the linguislics component is called thepro\[~ram's "message".
Subformulas or terms within a messageare called "elet ,ents" or "msg-elmls".
)The internal objects lhal appear in a speaker'sdescriplions will have defining and incidenlal properliesassocialed wilh them which are accessible through their names.This will include a property (aclually a packet of properliesand procedures) which records what the program knows aboutrealizing the object as an English phrase.
\] refer to thisprop~,rty as the object's "entry" - as in an entry in ah'anslatin~, diclionary.
,An enlry specifies what are the set ofpossihle English phrases that could be used for the object, andincludes a set of conlexl sensitive tests that will indicatewl~ich phrase to choose.
Breaking down the speaker's "how tosay il" knowledge inlo such small chunks facililates the use ofa ~eneral recursive process for turning messages into texts byfollowing the compositional structure of the formula(s) fromtop to bollom.Besides pointing Io permanent properties, a objecl's namewill also be the reposilory of more or less temporaryannotalions.
In parlicular, when the generation componentrealizes an instance of an object as phrase, it can add anannotation to it markin~ what kind of phrase was selected,where in lhe text this occured, whal the immediatelycJominaling clause was at the time, and so on.
The next limethere is an instance of that same object the annotation can befound and used Io help decide whal kind of subsequentreference should be made.Before the linguistic processing is begun, is it possible toe?mnine the input formula and delermine what subsequentreferences it will educe?
The bound variable x appears threetirnes, once with the quantifier and once with each predicate.it would he a. candidate for some subsequent references ifpinfacl, the formula was rendered into English literally.
"For  any thinE.
, if that thing is a man, then it is mortal.
"Rut other, more fluent, renderings of that formula will not givethe x's a separate status:"E~cinF.
a man implies beinE, mortal""All  nlen are mortal"in shorl, it is not possible 1o predict which objects will bee~plicil ly refered to and which not jusl on the basis of aformula in the inlernal representation language.
You wouldhave to know (1) how lhe terms that dominate the object inthe formula are going to be renclered; and (2) whether theobject was rnenlioned earlier in lhe discourse and how it wasdescribed there.
Then you would still have to, in effect,duplicate lhe reasoning process that the generation componentwould 8o lhrough ilself.A ~, we will see later, lhe generation component will oftenneed "advice" as to whether or nol the audience wouldunderstand certain phrasings.
"The audience model whichmakes these decisions will presumably prefer to work frompre-calculated observations so as to avoid delay.
Theimplication ol the tact that you cannot whelher that there willbe a subsequent reference to a parlicular object until itactually happens is thai you cannot make special preparationsfor it.
The audience model, or any other effected part of theprogram, will have to be generally prepared for whatever63objects might be asked about.The possibil ity of three different renderings for the sameformula implies that the formula per se does not containenough specification to pick out just one of them.
If youconsider the three sentences for a moment, you will appreciatethat what distinguishes them are differences in rhetoricalemphasis and in how to interpret Vx.
These are things thatFrege del iberately omitted from the predicate calculus.
Todirect the generation component so as to arrive at a particularone of those sentences, more formulas would have to be addedto the message or else found in the larger context (e.g.
theformula mighf be part of a proof), and the entries forquanli f iers, implication, etc.
would have to.
be augmented tonotice ther,~.Upgrading the predicate calculus enough to motivate theuse of fluent English is a facinating problem, but one which 1will ~loss over in this paper.
See McDonald \[1978a\] for moredetails.
For now, l will assume that the decisions made by thevarious entries come out 'so as to give the literal version ofthe formula with the explicit references just so that we canuse it for an example.Syntact i c  ContextBelow is my program's representation of the situation justas it is about to choose a phrase for the third instance of x inthe formula.
The point of showing this constituent structure isto demonstrate that while the program has a great deal of datato bring to bear on the choice, it also has a great deal of datawhich is utter ly irrelevant to it.
The packaging of the data -the size of the search space - is at least as important ashaving the data available in the first place.clause1\[int ro\]  \[clause\]clause 4\ [p rep \ ] \ [ob j \ ]  \[ intro\] \[clause\]for rip__3 I- coord.
"if" I- coord.
"then" .
.
.
f~  --,, clause5 clauseg.\[(:let \]\[head\] _~ .
.
.
.
~ / -~"any thin E \[subj\] \[pred\] \[subj\] \[pred\]v?9_7_._, x mortal()\[det\]\[head\] [vg\]\[pred-nom\]that timing be n p_8\[det \]\[head\]a manin lime diagram, the names of grammatical categories:clausei, pp, etc., denote the syntactic nodes of an annotatedsurface structure.
Each node has a set of immediateconstituents, organized by a list of named constituent slots.
Aslot can be empty, hold another node, hold a word or idiom, orhold an element of the input formula which has yet to beprocesse~, e.g.
x, or mortal().
The words at the leaves of thet ree are given in their root form.
A morphology subroutinespecial izes them for number, lense, etc.
when they are spoken(pr inted on the console).The choice of what syntactic categories, descriptivefeatures and constituent slots to maintain is tied up with thechoice of actions associated with them by the linguisticscomponent.
The \[ intro\] constituent, for example, will act toinsure lhat any introductory clause is realized as a participle.There are many trade-offs involved in the design of thisgrammar, and I will again gloss over them for this paper.The choice of refering phrase for a subsequent referenceis determined largely by the syntactic relationship betweenthe current instance and the previous instance to the sameobject.
|n a static, after the fact analysis, we would determinethis relationship by examining their positions in a tree like theone above.
This is a simple enough operation for a personusing her eyes, but it is an awkward mark and sweep stylesearch for a computer program.My program uses a much more efficient, and | would saymore perspicuous approach based on recording potentiallyrelevant facts at the time they are first noticed by thelinguistics component The wording of the heuristics that areused for the decisions are similar to the wordings used instatic analysis.
(They almost have to be, given that that is howthe bulk of linguistic research has been done to date.)
But thedata for the heuristics is acquired in a more natural manner.Before discussing lhe program actual pronominalizationheuristics, I will first digress (o describe the workings of thegenerat ion process which collects (and creates) the data.Tile tree in the previous column was developedincremenlal ly.
Clausel is the result of realizing theconceptual ly topmost part of the input formula - thequantification, its argument - the implication - was thenposit ioned in the new syntactic structure but not yet realizeditself.
This is what the constituent tree looked like at thatpoint.clause!\ [ intro\ ]  \[clause\]1--~PE'~g man(x) ~ mortal(x)for xAll of the generation components actual knowledge isspread about many small, local routines: dictionary entries forthe object that will appear in input formulas; "realizationstrategies" - the construction routines that those entriesexecute to implement their decisions; or "grammar routines" -66associated with the names of categories or constituents and incharge of effecting conventional details not involved inconveying rneanin 8.
These routines are all activated andorganized by a simple controller.The controller works by walking the constituent tree, topdown through the syntactic nodes and from left to right ateach level of constituents, The process begins with the topnode of the tree just after it is built by the entry for the thetopmost element of the input formula.Outline of the ControllerExamine-nocJe( l )  call tlme grammar routine for this category node(2) rebind the node recursive state variables(3) call Examine-constiluenlsExamine -constituents- For each consliluenl slots of the current node in order do:( i )  call the grammar routine for thai slot name(2) call Exaraine-slol-conlentsExamine-slot -conlents- Cases:contents = nil do nothingcontents = <word >call the morphology subroutine with the wordprint lhe resultconlenls = <node>call E~amine-nodeconlenls = <msg-elmt>use the dictionary entry for the element to finda phrase for the element; replace the element wilhthat phrase as the contents of the slot;loop lhrough the cases again.So, having generated clause2, in effect by starting thecontrol ler on the last case of Examine-slot-contents, theconlrol ler will loop around.
Time contents will now be clause2;the lhird case will be taken and the clause "entered".
Its firstconstituent conlains another node; lhe controller recursivelyre-enters  Examine-node and enters time prepositional phrase.Ils first constituent contains time word "for", which isimmediatedty printed out wilh no changes from the morphologysubroutine; the second contains the first instance of x which isprocessed with the dictionary entry common to "issolatedvariables".
The noun phrase it constructs replaces the x in theconstituent tree; the controller then loops thrQugh the casesonce more, recursively calling Examine-node on NP3.
\]t is nowthree invocations deep.
The dolled line shows its path.Icladse 1\[inl ro \ ] "  \[clause\].~ ~_2  man(x) -~ mortal(x)\ [p rep \ ] \ [pb j \ ]for ~\[deli'\]\[l~ead\]any l'hingspoken: "For  any thing, "After processing np3, the controller will leave lhe np andthepp, gO to the next constituent of clause\], use the dictionaryent ry  for implications, and so on, et cettera.The design of this generation component is orientedaround the decision making process of the dictionary entries(see \[McDonald 1978b\] for more discussion).
The principlereason that the process is deterministic and indelible, forexample, is to simplify the conditions that the entries will haveIo lest for.
A more relevant example here is the use thecontrol ler to "pre-calculate" certain relations about the contextand make lhem available through the values of recursive stalevariables mainlained by Examine-node.
For example, thecontrol ler keeps pointers to the "current-main-clause","current-verb-phrase",  etc.. \]l keeps track of whether it is ina subordinate context, of what the last constituent was, lastsentence, and so on.Any of lhese relations could be calculated independantlyI~y direct ly exarninin~ the form of the constituent tree and theannotalions on its nodes and embedded message elements.
Butthe point is more than just efficiency.
By maki.ng certainrelations readily available and not others, one says that justthose relations are the important ones for making linguisticdecisions.
A one of a kind operation like subject-verbagreement will have a special predicate written for it that"knows" where to find the relevant subject constituent in theconstituent tree.
But relations that are often Used, particularlythose needed for evaluating pronominalizalion, are maintainedby the controller, and, as a corollary, are only available intheir pre-compuled form when the controller is present at thatpoint in the tree.The design of the controller guarentees that thegenerat ion process will have these properties: (1) \]t is done inone pass - the controller never backs up.
(2) Thereforedecisions, choices of phrasing, must be made correctly the firsttime.
(3) It is incremental.
When the first part of the text isbeing printed out, later parts will be in their internal form.
(4)Therefore very specific facts about the linguisticcharacteristics of earlier parts of the text are available toinfluence the decisions made about the later parts.
(.5) \]nparticular, when the time comes to render any particular67n~essage element into English, the entire text up to that pointwill have been generated and typed out to the audience.Heur i s t i cs  ?or dec id ing  to use a pronounVirtually any element in a .message could be potentiallyrealized with a pronoun.
Accordingly, the heuristics forjudginB if a pronoun should be used are abstracted away fromthe elemenls' individual dictionary entries into a commonsubroutine.
Call it "pronoun?".
Pronoun?
operates like apredicate.
Eitl~er it finds lhat a pronoun can be used andreturns it, or else it relurns nil and the msg-elmt's entry isconsulted Io construct a full phrase.By the lime the coniroller reaches the third instance of xin tl~e example, it will have already passed through andprocessed the earler two instances.
Rather than look backthrough the tree to find lhem, pronoun?
will consult a storedrecord lhat describes their situation.
Below is a blowup ofpart of the controller, showing more of what happens when amessage element is processed.Examine-slot-contents,.. earlier cases...contents = <msg-elmt>either Ipronoun?
(<msg-elmt>) ,oruse its dictionary entry iadd <msoo-elmt> to discourse-list; I', lake ts discourse recordf .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
"Ireplace <msg-elmt> with phrase; ,loop through cases again i. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.__iThe discourse-list contains the names of all of the internalelements that have been mentioned so far in the discourse.
|fthis example message had been the start of the discourse, thecontents of discourse-list would be:(man(), .-), X, V)The need for a subse~iuent reference is indicated by the nameof tlle message element already being on lhat list when thecontroller reaches an instance of it in the consitituent ree.After the generated phrase is returned by whateversource, Ihe context of the original msB-elmt and facts aboutthe new phrase are recorded as a special annotation kept withthe name of the element.
This discourse record is a vector ofjust those properties which, from the point of view of laterroutines such as the pronominalization heuristics, are sufficientto characterize that instance of the message element in thediscourse.
These are the vectors currently created for thefirst two instances of "x".
How the different items are used isgiven later.instance3msg-index \]clause-index c|clause-depth Jslot \[obj\]became npslrateBies-used ( quantifier->determinerdet<-any head<-lhing )instance5msg-index |clause-index c2c l ause-dept h 2slot \[sub j\]bec arne npstrategies-used ( det<-that head<-lhing )The heuristics governing the use of a pronoun areevahJated in staBes according to how much trouble theproBram must 8o through inorder to Bet the information itneeds.First come the "quick checks": predicates that can beevahJated just on basis on the candidate msg-elmt and theimmediate, controller defined linguistic context.
These include:Ca) is the rnsE-elrnt on the discourse-list?
(b) is it the token for"me" or "you'??
(c) has it been already marked for (or against)pronominalization by an earlier grammar routine?
(d) is itcontents of a predicate constituent or a complementconstih~ent Or any other constituent which is never given by aprOnoun?If any of these checks decide that a pronoun can be used,a common subroutine will make the actual choice.
Otherwise,the checks either rule out the possibility of a pronounaltogether or the pass the msg-elmt lhrough for a moreextensive deliberation.The full-scale deliberation first analyzes the relationship ofthis instance of the msg-elrrd and the lasl instance bycomparing the current context, as given by the statusvariables in the controller, with the past contexl, as read offthe msB-elml's entry in the discourse record.
This yields a setof derived, descriptive features which are the inlgut to theactual heuristics.The derived features abstract out details which areirrelevant to lhe heuristics.
For example, the current set ofheuristics look for last instance having been either aproposition, or a "thing" (i.e.
by looking at the became item inits discourse record).
Whether a "thing" was actually a nounp ~rase, a nominalized clause, or a trace is all the same to theheuristics.
The initial analysis into features makes this lest for68was-a-thing, vs. was-a-proposition once and for all and makes itunnecessary for the heuristics tidal refer to this distinction torepeatedly include all of the particular cases.
For that matter,it is also unnecessary to rewrite the code for the heuristicsevery lime there is a new definilion for a feature.Other syntactic features currently computed includemeasures of relative position like same-simplex, same-sentence,or stale, and proceed-and-command, whihc are computed fromthe several position indexes in the.record.
The record of whatconstiluent slot the last instance was in, in conjunction withthe clause indexes, is used to check for features such ?
aswhether the last instance was the previous-subject.
Also,parallel positions within conjoined phrases are noted.Once the list of'features is computed, the heuristics arerun.
At the moment, they are implemented as simplecondilionals.
Here again, there can be an immediate yes or nodecision, or else a yet more involved process is invoked (seebelow).
The grammar forces an immediate decision whenproceed-and-command applies.
Olherwise, a number oiheuristics will immediately cause a pronoun to be used if thereare no "distraclin8" references 1o other object in that vicinityof the discourse.
For example, if the last instance of theobject was itself realized as a pronoun, this will cause animmediately decision to use one again.In the ease'of this example, lhe third instance of "x" willbe described as:same-sentence, last-subject, was-a.~thingAs there are no other similar references in the vicinity todishact the audience, the heuristics will immediately decidethat a pronoun should be used.
The subr0uline for computingthe correct print name for pronouns is then consulted, and theresult, "it" is returned to be inserted in the constituent treeand "spoken" on the next loop of l'he controller.Reasoning about distracting referencesExcept when instance and anaphor are in the same simplexclause, syntactic relations alone are never enough to dictatewhelher or not a message element should be pronorninalized.The linguislics component must to be able to tell if there areany other elements with which this one might possibly beconfused.
The problem is, of course, that the "confusion" willbe a semantic or pra~',matic one, i.e.
it will be based oncognilive facts about the message elements which thelinguistics component, per se, knows nothing about.Given an oracle to tell it which message elements wouldcompete wilh current one for the interpretation of.a pronounin that position, the linguistics component, can use a simpleprocedure to decide whether to go ahead with the pronoun,namely to run those other elements through thepronorninalization heuristics as well and see which accumulatestile best reasons for being pronominalized.Consider this example sentence.
|magine that thelinguistics component has reached the point in brackets andmust make the choice whelher to say "her" or "Candy's".
"Candy asAed Carol to reschedule {her, Candy's} meeting forearlier in lhe day"Whether or not two objects will be ambiguous depends onwhat the audience knows.
In this case, an audience that knowswho both Candy and Carol are will know that Candy is agraduate student who might well organize a meeting and thatCarol is e group secretary, someone who would probably makethe arrangements needed for changing a meeting's time.
Forsuch an audience, it would be not at all confusin 8 to say "hermeeting".
An audience lhat didn't know who they werehowever would at best be confused and would in fact probablymake the wrong choice.This kind of information is much too specific to imagineencoding as part of general purpose dictionary entries.
Butbecause of the general unpredictability al the message level ofwhether an objecl will have subsequent references made to itin lhe eventual text, the linguistics component will have tomake its query to the main program "oracle" at lhe very lastminute as part of pronominalization heuristics.The oracle will presurnably be some kind of audiencemodel.
But for present purposes, we can think of it as afunction that takes lhe object we are inlerested in ("Candy")as its argument and returns a list of those objects lhatappeared in lhis and recent messages which the audiencemight confuse with it.
So, in this case, if the audience knewCandy and Carol, then the oracle would return a null list, andthe pronominalization option would go through.
If they didn'tknow them, then it would return "( Carol )", and a furtherrouncl of heuristics would be tried.To compare the relative "pronominalizability" of severalmessaoe elements, Pronoun?
runs them separately through theanalysis and evaluation procedure.
But instead of acting onthe evaluation direclly, il makes a list of the names of theindividual heuristics that each passes and then compares thetwo lists.
In the current program these would be:Cand~sanle-senfenceproceed-and-commandCarolsarne-sirnplex- ;via a lraceproceed-and-commandupslairs-subjectno-inter veening-dist raction69\]n this case, the relative number of heuristics alone wouldindicate lhal Carol would make a "belier" interpretation for apronoun in lhat position, and that, therefore, the possibility ofa using a pronoun for Candy should be rejected.
But actually,the different heuristics are given weightings.
Same-simplex,for exarnpfe, is much better evidence than same-sentence.Non-pronomina l  subsequent referencesEvery subsequent reference is first checked for thepossibil ity of using a pronoun.
If this check fails, a summaryvector of lhe features analysed and of heuristics passed andfailed is passed along to the message element's dictionaryentry.
Entries may have their own idiosyncratic proceduresfor dealing with these situations, but they may also make useof general procedures packaged by the grammar.As explained in \[McDonald 1978b\], the "thinking" part of adictionary entry consists of a set of "filters", which, if theircondilions are met, will execute one or more "realizationstrategies" which assemble the phrase or modifer that thefilter set decided upon.
Because entries are not evaluateddirectly but instead are interpreted, it is possible for theinterpreter to dynamically add or subtract filter se~s accordingto the grammatical (or rhetorical - see below) circumstances.One of time more common reasOns for rejecting the use of apronoun is that it might be missinlerpreled as refering to someother object.
The form of subsequent reference eventuallychoosen in these cases must distinguish the object from theone it is potenlially ambiguous with, but does not have torecapitulate any more delail.In parlicular, one frequent pattern for an initial referenceis a noun phrase with the name of a class of objects as itshead word, with a series of adjectives, classifiers, or qualifyingphrases surounding it.
There is a simple formula forconstructing a non-pronominal, subsequent reference to followthis kind of NP, namely !o repeat the class name as the headword and use either "that" or "the" as a determiner.Part of an element's discourse record is a list of therealization slrategies that were used in the construction ofprevious phrases.
This is a technique for smoothing over theirrelevant detail of the actual phrase that what used.
As therealization strategies are refered to by name, can beannotated with properties describing what they do, andentered into abstraction hierarchies, Routines that have tothink about what other routines have done or might do can doso at whatever level of generality is appropriate.
Inparticular, lhis is a way to describe patterns of noun phraseconstruction so that I~eneral purpose filler sets can recognizethem.The initial references pattern above is recognized by afilter set thai the entry interpreter can add.
The filter'spredicate checks for the name of the realization strategyhead<-classname being included as one of the "strategies-used"of the anaphor, if it is found, this filter set will lakeprecedence over any others in the entry.
The filter set'saction wilt assernble a new noun phrase with the same classname as used for initial references (it is recorded with theentry), and either the or thai as the determiner depending ona heuristic rneasure of the distance between this instance andthe last.
This is time process operating in a sentencelike:"There is room for a block on a surface iff that surface is atable or has a clear top.
"Subsequent  re fe rences  to the  same k ind  of objectThe controller makes only one pass through constituenttree, turning internal, messa=oe level structures into linguistic.~.tructui'es as it passes.
While time amount of informationavailable for material behind time controller is limited only byhow much annotation lhe designer cares to record, material infront of the controller is only megerly described.
The(potential) linguistic properties of an object embedded in theconstituenl tree in front of lhe controller can be explored to alimited extent by "queryinl~" its dictionary entry.
However,this is limited as a practical mailer because the interveeninglext has not been finished and any fillers in that entry whichdepended on lime discourse contexl will be undefined.This means thai if you want the realization of twoseparated objects 1o be coordinated, the coordination has tobe planned for well in advance and somehow marked.Otherwise the first object will be realized freely, since itwould not be able to "see" that there is even a second objectpresenl.
Time phrases below are examples of wherecoordination is required.
(The first two are from thetic-tac-toe talking program of \[Davey ,1.974\].
He used specialpurpose routines to handcrafl the pairs.
)"...my edge and ),'ours...""...a corner ...the opposite one...""...will enclose X's in square brackets and Y's in angle brackets""...a big block and a l i t t leone"In each of these cases, the two objects were both of thesame "sort": edges, corners, brackets, or blocks.
By the usualcriteria, this would mean that they share di'ctionary entries,and, indeed, the paired phrases have much in common, andcould be seen as only differing in the choice of strategy fortheir adjectives and/or determiners.
Th is  means that thecoordinating mark must be something other than the "kind-of"70poinler  thai links objects with their entries.
It will alsoprohably have to be a lemporary structure, since "theoppo~;i/e corner" is a transient phenomena, defined only atparticular moments in each came of tic-tac-toe.The simplest way 1o mark the pairs is with an additionalformula in the inpul message, e.g.
(all-of-a-set cornerl cornerg)or (contrast-by-size B6 B3)When the message is initially processed, formulas like theseare indexed by their arguments so lhat, e.B., lhe dictionaryentry  for blocks will be able to notice them and choose itsstrategies accordingly.Indicators like all-el-a-set are a part of the commongrammar, and operate in the same way that the earlier filterset for subsequent references by classnames does.
Thedict ionary entry inlerpreter keeps track of the arguments tothe formula and when time last of tt~em is being processed, it" inlerupts" and preempts the choice of determiner to insurethat it is the, indicating lhal the speaker intends for theaudien?e to appreciate lhat there is no other corner (orwhatever)  left.
(This is a simplification.
)Rhetor i ca l  contextRhetoric is the arl of persuasion \[Aristotle\].
Stylisticvariations in ordering, word choice, use of function words,elipsi~, etc.
are potenfially rhetorical techniques, if thespeaker program (or rather its designer) knows when their usewould have a parlicular desired effect, i.e.
when their usewould make lhe text more persuasive.The rhetorical conlexl will typically be just an additionalpararneler to be noticed by the enlires and ~rammalicalroutines.
The dimension that it adds, however, greatlyincreases lhe fluency of lhe linguistic component's output.
Theonly problem is that rhetoi'ical phenomena have not beenstudied much at all - they have been sweep under the rug of"stylir.tic variations".Goals about !low to express lhe message's content can bespecified in lhe message.
They will have their own dictionaryentries and end up determining part of the rhetorical contextthal accompanies the syntactic context.
(At this wrilini~, thedetails of lime slructure of the rhetorical context are still beingimplemented.
What follows is a skelch.
)Consider:All of the pronorninalizalion heuristics menlioned earlierwere based on syntactic relations.
However, there are otherrelal ions governing lhe understanding and generation of texls,which have to do with their "rhelorical" or "discourse"structure, hl particular, each region of text will have a focus -loosely speaking lhe objecl or action lhat lhal text is "about"(see \[Sidner 1978\] for an elaboration).Pronominalization of subsequent references Io the focusedobject is almost always obligatory.
(There can be exceptions iftime last several references to the object were pronominalized,and time intention is to "refresh" the audience's memory.)
In theexample witl l  "Candy" and "Carol", if the previous part of thediscourse had been saying thinl~s about Candy, then she wouldhave been established as the focus of that sentence.
Then thepresence of a current-focus heuristic in Candy's list ofsucessful heurislics would have outweighed all of thesyntactical ly based heuristics in Caters list and the pronounwould have been used.The only question is how to mark and monitor focus or anyother rhetorical indicator.
It is not a natural or evenconsistantly definable part of a syntactic constituent structure.TI-""afore it will have to be "tacked on" somehow.
Thete,::mique | am experimenting with is to implement a focus"register" which is explicitly set and reset by any dictionaryentries lhat effect focus.
A new message could also effect thefocus register via an explicit directive included with it - say,when the topic of conversalion is being changed.
An explicitlydictated focus would cause the linguistics component to"lran.~.form" time realization of the conlent parts of the messageto insure that time new focus is properly marked as such bythe syntactic form of the text.Time rhetorical conlext could be very domain specific.Consider the sentence:"The black queen can now take a pawn.
"Notice that it is not necessary to say "a white pawn" becauseof the irnmediale inference that one makes about what piecesit is legal for a piece of a g, iven color to "take".Since the criteria for conslructing a relating expressionfor any chess piece will overlap, they wilt likely share adict ionary entry.
Thus we have a sort of subsequentreference phenomena.
The enlry for chess pieces will beIookin8 for the mention of a piece'S color earlier in lhe text.
Ifit finds one, or rather if it finds one of the complementarycolor, and if the situation is right, it can omit any mention ofcolor from the phrase it has assembled.How to determine that the situation is "right" is a matterfor the rhetorical conlext to specify.
The problem is the colorof contrasting piece can be omitled only if the choice of verbor some other device indicales that, in fact, a constrastin 6conlexl  is presenl.
But there are too many suitable verbs toimagine listing them in the entry and explicitly looking forlhern.7th~stead, lhe rhetorical context will include a list of"relations" tha!
currently hold.
What relations there should beis a matter of the rhetorical roles lhat different parts of ame.
'..s~se mig,ht play and whether the recog,nition of these rolesby the audience could be facilitated by a choice of wording,(i.e.
it is a matter of research and experiment).
FOr a programthat talked about chess g,ames, one of these relations wouldbe:opposing-piecespiece1 = xxxpiece2 = xxxrelation-name = {attack, defend, pin, ...}To decide whether to include the name of a piece's color, theent ry  looks 1o see if there is an opposinl~-pieces relationholdin8 at lhe moment.
If there is, it looks to see if its piece ispart of the relation and whether it is the second of the two tobe mentioned.
If so, it omits the color name.The power of this representational technique is that itcompiles its record of the needed facts at the time when theyeasily determined, i.e.
as the messag,e is being, compiled, weltbefore the relation name has been rendered into Enslish andthe simplicity of the relation obscured.This technique should be applicable to many morephenomena titan simply subsequent reference.
Considersentences like these:"Briall also wants to come to the meeting.
""Mitch as a class then and so does Beth.
""The meetin~ might run overtime, but I don't expect it.
"The underlined words are not a part of the "literal" content ofthose sentences.
They represent rhetorical relations betweenparts of the sentence or between the sentence and earlierparts of the discourse.|f the source messag,es for those sentences described onlytheir l iteral content, it would be impossible to motivate the useof also, so, or but in those ways, yet they are what g,ive thesentences their naturalness.
But if those rhetorical relationsare inchJded as part of the linguistic context, with their links tospecific phrases and dictionary entries, including these "little"words becomes simple.Language Generation" in the proceeding,s of the 2d AnnualMeeting, of the CSCSI/SCEIO, Toronto, Canada, July 19-21,1978.Sidner \ [1978\]  "The Use of Focus as a Tool for Disambiguationof Definate Noun Phrases, this volume.ReferencesAristotle, Rhetoric and Poetic~ translated by Roberts, ModernLibrary edition, Random House, Newy York, 1954.Davey \[1974\]  The Formalization o Discourse Production, Ph.D.thesis, Edinburgh University.McDonald \[1978a\] "How MUMBLE translated the barberproof" manuscript being readied for publication, MIT A.|.Lab.
Cambridge, Mass.McDonald \[1978b\]  "A Simultaniously Procedural andDeclarative Representation and Its Use in Natural72
