Middleware for Creating and Combining Multi-dimensional NLP MarkupUlrich Scha?ferGerman Research Center for Artificial Intelligence (DFKI)Language Technology LabStuhlsatzenhausweg 3, D-66123 Saarbru?cken, Germanyemail: ulrich.schaefer@dfki.deAbstractWe present the Heart of Gold mid-dleware by demonstrating three XML-based integration scenarios where multi-dimensional markup produced online bymultilingual natural language processing(NLP) components is combined to deliverrich, robust linguistic markup for use inNLP-based applications like informationextraction, question answering and seman-tic web.
The scenarios include (1) robustdeep-shallow integration, (2) shallow pro-cessing cascades, and (3) treebank storageof multi-dimensionally annotated texts.1 Introduction and MotivationHeart of Gold is a middleware architecture for cre-ating and combining markup produced by mul-tiple natural language processing components inmultilingual environments.
It was initially devel-oped for a special sort of multi-dimensional an-notation, namely application-oriented, XML- andXSLT-based online integration of various shallowNLP components with a deep HPSG parser for in-creased robustness in the hybrid natural languageprocessing paradigm (Callmeier et al, 2004).The middleware, however, can also be used forvarious other online and offline tasks related tomulti-dimensional markup creation and integra-tion.
These comprise automatic corpus annotation,incorporation of multi-dimensional markup into asingle XML representation, and NLP componentcascades interleaved with XSL annotation trans-formation.
The middleware provides XML-RPCinterfaces for simple, networking-enabled andprogramming language-independent applicationand component integration.
Heart of Gold is avail-able as one of the DELPH-IN open source toolsavailable from http://www.delph-in.net1.1I would like to thank Robert Barbey, ?Ozgu?r Demir2 Middleware ArchitectureFig.
1 gives a schematic overview of the middle-ware server in between applications (above) andexternal NLP components (below).
When a newapplication session in Heart of Gold is started, ittakes a configuration specifying NLP componentsto start for the session.
Each component is startedaccording to its own parameterized configuration.The client can send texts to the middleware and theComputedannotationsXML,RMRSApplicationModule Communication ManagerResultsQueriesExternal,persistentannotationdatabaseModulesExternal NLPcomponentsXSLT serviceFigure 1: Middleware architectureNLP components are then queried in a numericallydefined processing order (?Depth?
in Fig.
4).
Theshallowest components (e.g.
tokenizer) are as-signed a low number and are started first etc.
Theoutput of each component must be XML markup.Each component gets the output of the previouscomponent as input by default, but can also re-quest (via configuration) other annotations as in-put.
Components may produce multiple outputannotations (e.g.
in different formats).
Thus, theand Thomas Klo?cker for their implementation work, BerndKiefer and the co-authors in the cited papers for fruitful co-operation, and the reviewers for valuable comments.
Thiswork has been supported by a grant from the German FederalMinistry of Education and Research (FKZ 01IWC02).81component dependency structure in general formsa graph.2.1 Session and multi-dimensionalannotation managementThe resulting multi-dimensional annotations arestored in a per-session markup storage (Fig.
2)that groups all annotations for an input query (asentence or text) in annotation collections.
Themarkup storage can also be made persistent bysaving it to XML files or to an XML database.Annotations can be accessed uniquely via a URI ofSession Annotationcollection (1per input text)Standoff annotations (computed by modules/components)Figure 2: Session and multi-dimensional markupstoragethe form hog://sid/acid/aid in XPath expres-sions where sid is a session ID, acid is an anno-tation collection ID and aid is an annotation iden-tifier typically signifying the name of the produc-ing component.
Structured metadata like configu-ration and processing parameters (e.g.
processingtime and date, language ID etc.)
are always storedwithin the annotation markup as first root daughterelement.2.2 XML standoff markup as first-class citizenUnlike other NLP architectures (e.g.
GATE (Cun-ningham et al, 2002) etc.
), Heart of Gold treatsXML standoff annotations (Thompson and McK-elvie, 1997) as first class citizens and natively sup-ports XML (and only XML) markup of any kind.Moreover, Heart of Gold does not prescribe spe-cific DTDs or Schemata for annotations, providedthat the markup is well-formed.
In this sense, itis a completely open framework that may how-ever be constrained by requirements of the actu-ally configured components.
The advantage ofthis openness is easy integration of new compo-nents.
Mappings need only be defined for theimmediately depending annotations (see next sec-tion) which is by far not an n-to-n mapping in prac-tical applications.However, the fact that a specific DTD orSchema is not imposed by the middleware doesnot mean that there are no minimal requirements.Linking between different standoff annotations isonly possible on the basis of a least common en-tity, which we propose to be the character spans inthe original text2.
Moreover, we additionally pro-pose the use of the XML ID/IDREF mechanism tofacilitate efficient integration and combination ofmulti-dimensional markup.Finally, depending on the scenario, specificcommon, standardized markup formats are appro-priate, an example is RMRS (Copestake, 2003) fordeep-shallow integration in Section 3 or the XML-encoded typed feature structure markup generatedby SProUT (Droz?dz?yn?ski et al, 2004).2.3 XSLT as ?glue?
and query languageWe propose and Heart of Gold heavily relies on theuse of XSLT for combining and integrating multi-dimensional XML markup.
The general idea hasalready been presented in (Scha?fer, 2003), but thedevelopments and experiences since then have en-couraged us to proceed in that direction and Heartof Gold can be considered as a successful, moreelaborated proof of concept.
The idea is relatedto the open markup format framework presentedabove: XSLT can be used to transform XML toother XML formats, or to combine and query an-notations.
In particular, XSLT stylesheets may re-solve conflicts resulting from multi-dimensionalmarkup, choose among alternative readings, fol-low standoff links, or decide which markup sourceto give higher preference.
(Carletta et al, 2003), e.g.
propose the NXTSearch query language that extends XPath byadding query variables, regular expressions, quan-tification and special support for querying tem-poral and structural relations.
Their main argu-ment against standard XPath is that it is impossi-ble to constrain both structural and temporal re-lations within a single XPath query.
Our argu-ment is that XSLT can complement XPath whereXPath alone is not powerful enough, yet providinga standardized language.
Further advantages wesee in the XSLT approach are portability and effi-ciency (in contrast to ?proprietary?
and slow XPathextensions like NXT), while it has a quite sim-ple syntax in its (currently employed) 1.0 version.XSLT can be conceived as a declarative specifi-cation language as long as an XML tree structure2Our experience is that a common tokenization is notrealistic?too many existing NLP components have differingconcepts of what constitutes a token.82Figure 3: Heart of Gold analysis results in GUI with specialized XML visualizationsis preserved (not necessarily fully isomorphic tothe input structure).
However, XSLT is Turing-capable and therefore suited to solve in princi-ple any markup integration or query problem.
Fi-nally, extensions like the upcoming XSLT/XPath2.0 version or efficiency gains through XSLTC(translet compilation) can be taken on-the-fly andfor free without giving up compatibility.
Tech-nically, the built-in Heart of Gold XSLT proces-sor could easily replaced or complemented by anXQuery processor.
However, for the combinationand transformation of NLP markup, we see no ad-vantage of XQuery over XSLT.Heart of Gold comes with a built-in XSL trans-formation service, and module adapters (Sec-tion 2.4) can easily implement transformation sup-port by including a few lines of code.
Stylesheetscan also be generated automatically in Heart ofGold, provided a systematic description of thetransformation input format is available.
Anexample is mapping from named entity gram-mar output type definitions in scenario 1 below.Stylesheets are also employed to visualize the lin-guistic markup, e.g.
by transforming RMRS toHTML (Fig.
3) or LATEX.2.4 Integrated NLP componentsNLP components are integrated through adapterscalled modules (either Java-based, subprocesses orvia XML-RPC) that are also responsible for gener-ating XML standoff output if this is not supportednatively by the components (e.g., TnT, Chunkie).Various shallow and deep NLP components havealready been integrated, cf.
Fig.
4.Component Type Depth LanguagesJTok tokenizer 10 de, en, it,.
.
.ChaSen Jap.
tagger 10 jaTnT stat.
tagger 20 de, enChunkie stat.
chunker 30 de, enChunkieRmrs chunk RMRS 35 de, enLingPipe stat.
NER 40 en, es,.
.
.SDL subarchitect.Sleepy shallow parser 40 deSProUT shallow NLP 40 de, el, en, ja,.
.
.RASP shallow NLP 50 enPET HPSG parser 100 de, el, en, ja,.
.
.Figure 4: Integrated components.
References forcomponents and resources not cited are availableon http://heartofgold.dfki.de/Publications Components.html3 Scenario 1: Deep-Shallow IntegrationThe idea of hybrid deep-shallow integration is toprovide robust linguistic analyses through multi-dimensional NLP markup created by shallow anddeep components, e.g.
those listed in Fig.
4.
Ro-bustness is achieved in two ways: (1) variousshallow components perform preprocessing andpartial statistical disambiguation (e.g.
PoS tag-ging of unknown words, named entity recognition)that can be used by a deep parser by means ofa so-called XML input chart (multi-dimensionalmarkup combined through XSLT in a single XML83document in a format convenient for the parser).
(2) shallow component?s output is transformedthrough XSLT to partial semantic representationsin RMRS syntax (Copestake, 2003) that is poten-tially more fine-grained and structured than whatis digestible by the deep parser as preprocessinginput (mainly PoS/NE type and span informationvia the XML input chart).
This allows for (a) afallback to the shallow representation in case deepparsing fails (e.g.
due to ungrammatical input), (b)combination with the RMRS generated by deepparsing or fragments of it in case deep parsingfails.First application scenarios have been investi-gated successfully in the DEEPTHOUGHT project(Uszkoreit et al, 2004).
A further application (hy-brid question analysis) is presented in (Frank et al,2006).
Recently, linking to ontology instances andconcepts has been added (Scha?fer, 2006).4 Scenario 2: Shallow CascadesThe second scenario is described in (Frank etal., 2004) in detail.
A robust, partial semanticsrepresentation is generated from a shallow chun-ker?s output and morphological analysis (Englishand German) by means of a processing cascadeconsisting of four SProUT grammar instanceswith four interleaved XSLT transformations.
Thecascade is defined using the declarative systemdescription language SDL (Krieger, 2003).
AnSDL architecture description is compiled into aJava class which is integrated in Heart of Goldas a sub-architecture module (Fig.
5).
The sce-nario is equally a good example for XSLT-basedannotation integration.
Chunker analysis resultsare included in the RMRS to be built through anXSLT stylesheet using the XPath expressiondocument($uri)/chunkie/chunks/chunk[@cstart=$beginspan and @cend=$endspan]where $uri is a variable containing an annotationidentifier of the form hog://sid/acid/aid asexplained in Section 2.1.5 Scenario 3: Corpus AnnotationGiven the powerful online middleware archi-tecture described above, automatic, multi-dimensional corpus annotation can then beregarded as a simple by-product.
Heart of Goldsupports persistent storage of XML markup eitheron the file system or to XML databases throughthe built-in XML:DB interface.
Through XSLT, itis possible to combine multi-dimensional markup(that would straightforwardly be stored in multipleXML documents) into a single XML document.Heart of Gold NLP architecture instanceinput sentence Chunkienodeid_cat SProUT SProUTrmrs_finalXSLT SProUT XSLT XSLT XSLTrmrs_phrase reorderfs2rmrsxmlrmrs_lexRMRS resultpos_filterSProUTrmrs_morph.
.
.
other NLP components .
.
.SDL?defined SProUT?XSLT cascade sub?architectufeFigure 5: SProUT XSLT cascade in a Heart ofGold architecture instance.ReferencesU.
Callmeier, A. Eisele, U. Scha?fer, and M. Siegel.
2004.The DeepThought core architecture framework.
In Proc.of LREC-2004, pages 1205?1208, Lisbon, Portugal.J.
Carletta, S. Evert, U. Heid, J. Kilgour, J. Robertson, andH.
Voormann.
2003.
The NITE XML toolkit: flexibleannotation for multi-modal language data.
Behavior Re-search Methods, Instruments, and Computers, special is-sue on Measuring Behavior, pages 353?363.A.
Copestake.
2003.
Report on the design of RMRS.
Tech-nical Report D1.1b, University of Cambridge, UK.H.
Cunningham, D. Maynard, K. Bontcheva, and V. Tablan.2002.
GATE: A framework and graphical developmentenvironment for robust NLP tools and applications.
InProceedings of ACL-2002.W.
Droz?dz?yn?ski, H.-U.
Krieger, J. Piskorski, U. Scha?fer, andF.
Xu.
2004.
Shallow processing with unification andtyped feature structures ?
foundations and applications.Ku?nstliche Intelligenz, 2004(1):17?23.A.
Frank, K. Spreyer, W. Droz?dz?yn?ski, H.-U.
Krieger, andU.
Scha?fer.
2004.
Constraint-based RMRS constructionfrom shallow grammars.
In Proceedings of HPSG-2004,pages 393?413.
CSLI Publications, Stanford.A.
Frank, H.-U.
Krieger, F. Xu, H. Uszkoreit, B. Crysmann,and U. Scha?fer.
2006.
Question answering from struc-tured knowledge sources.
Journal of Applied Logics, Spe-cial Issue on Questions and Answers.
To appear.H.-U.
Krieger.
2003.
SDL?a description language forbuilding NLP systems.
In Proceedings of the HLT-NAACLWorkshop on the Software Engineering and Architectureof Language Technology Systems, pages 84?91.U.
Scha?fer.
2003.
WHAT: An XSLT-based infrastructurefor the integration of natural language processing compo-nents.
In Proceedings of the HLT-NAACL Workshop onthe Software Engineering and Architecture of LanguageTechnology Systems, pages 9?16, Edmonton, Canada.U.
Scha?fer.
2006.
OntoNERdIE?mapping and linking on-tologies to named entity recognition and information ex-traction resources.
In Proc.
of LREC-2006, Genoa, Italy.H.
S. Thompson and D. McKelvie.
1997.
Hyperlink seman-tics for standoff markup of read-only documents.
In Pro-ceedings of SGML-EU-1997.H.
Uszkoreit, U. Callmeier, A. Eisele, U. Scha?fer, M. Siegel,and J. Uszkoreit.
2004.
Hybrid robust deep and shallowsemantic processing for creativity support in documentproduction.
In Proc.
of KONVENS-2004, pages 209?216.84
