HOW TO INVERT A NATURAL LANGUAGE PARSER INTO AN EFFICIENT GENERATOR:AN ALGORITHM FOR LOGIC GRAMMARSTomek StrzalkowskiCourant Institute of Mathematical SciencesNew York University251 Mercer SueetNew York, NY 10012ABSTRACTThe use of a single grammar in natural anguage pars-ing and generation is most desirable for variety of rea-sons including efficiency, perspicuity, integrity, robust-hess, and a certain ,amount of elegance.
In this paperwe present an algorithm for automated inversion of aPROLOG-coded unification parser into an efficientunification generator, using the collections of minimalsets of essential arguments (MSEA) for predicates.The algorithm is also applicable to more abstract sys-tems for writing logic grammars, uch as DCG.INTRODUCTIONIn this paper we describe the results obtainedfrom the experiment with reversing a PROLOG parserfor a substantial subset of English into an efficient gen-erator.
The starting point of the experiment was astring parser for English (Grishman, 1986), which isused in an English-Japanese MT project.
The PROLOGversion of this parser was inverted, using the methoddescribed here, into an efficient PROLOG generatorworking from regularized parse forms to English sen-tences.
To obtain a PROLOG parser (or any PROLOGprogram) working in the reverse, requires ~some mani-pulation of the clauses, especially the ordering of theliterals on their right-hand side, as noted by Dymetmanand Isabelle (1988).
We do not discuss here certainother translbrmations u ed to "normalize" the parsercode in order to attain maximum efficiency of thederived generator progrmn (Strzalkowski, 1989).1N AND OUT ARGUMENTSArguments in a PROLOG literal can be marked aseither "in" or "out" depending on whether they arebound at the time the literal is submitted for execulionor after the computation is completed.
For exmnple, intovo ( \ [ to ,  eat, fish\], T4,\[np, \[n, john\] \] , P3)the first and the third arguments are "in", while theBarring the presence of non-reversible operators.remaining two are "out".
When tovo is used for genueration, i.e.,tOvo (TI, T4, Pl,\[eat, \[np, \[n, john\] \] ,\[np, \[n, f ish\] \] \] )then the last argument is "in", while the first and thethird are "out"; T4 is neither "in" nor "out".
Theinfixmation about "in" and "out" status of arguments iimportant in determining the "direx'tion" in whichpredicates containing them ca~ be run 2.
As a furtherexample consider the literalstibject (AI, A2, WHQ, h~JM, P)where A1 and A2 arc input and output strings ofwords, WttQ indicates whether the subject phrase is apart of a clause within a wh-question, ~ is thenumber of the subject phrase, and P is the final trans-lation.
During parsing, the "in" arguments are: A1and WgQ, the "out" arguments are A2, ~ and P;during generation, the "in" arguments are p and WrlQ,the "out" arguments are A1 a~d NUN.
In generating,A2 is neither "in" nor "out".
'lqms, upon reversing thediroction of computation, ar~ "out" argument does notautomatically become an '%" argument, nor does an"in" argument automatically become an "out" argu-ment.
Below is a method for computing "in" and "out"status of arguments in any given literal in a PROLOGprogram, as required by the inversion procedure.
Thisalgorithm is already general enough to handle any PRO-LO(~ program.An argument X of literal pred( ?
?.
X ?
?. )
on the rhs ofa clause is "in" if(A) it is a constant; or(B) it is a function and all its arguments are "in"; or(C) it is "in" or immediately "out" in some previousliteral predo on the rhs of the same clause, i.e.,l (Y) :-- pred o (X, Y),pred (X); or(D) it is "out" in an rhs literal predo delayed until aftersome predicate pred~ such that predo precedes2 For more discussion on directed predicates in PROLOO seeShoham and McDermott (1984), and Debray (1989).1 347pred l ,  and predt  precedes pred  on the rhs; 3 or(E) it is "in" in the head literal L on lhs of the sameclause.An argument X is "in" in the head literalL = pred  ( "  ?
X .
.
.  )
of a clause if (A), or (B), or(F) L is the top-level literal and X is "in" in it (knowna priori); or(G) X occurs more than once in L and at least one ofthese occurrences i  "in"; or(H) for every literal L 1 : pred  ( .
?
?
Y .
?
.  )
unifiablewith L on the rhs of any clause with the headpredicate pred l  different han pred ,  and such thatY unifies with X, Y is "in" in L 1.We distinguish two categories of "out" arguments inliterals appearing on the right-hand side of a clause:immediate  and delayed.
An argument X occurring inliteral pred( .
.
.
X .
.
.  )
is immediate ly  "out" if it isfully bound 4 immediately after pred( .
.
.X .
.
. )
isexecuted.
An argument X in pred  ( ?
?
?
X ?
?
? )
is "out"de layed  unt i l  a f ter  p redo ,  if it is fully bound only afterpredo ,  following pred  on rhs, is executed.
For exam-ple, consider the following fragment:vp(SN)  :- agree(SN,  VN) ,v (VN)  .agree  (N, N) .If VN is immediately "out" in v, then SN in agreeis "out" delayed until after v. For arguments withtheir "out" status delayed until after predo ,  the "out"status is assigned only after predo  is executed.An argument X of literal pred  ( .
.
?
X ?
?
? )
on the rhs ofa clause is immediate ly  "out" if(A) it is "in" i npred( .
.
.X  .
.
.
); or(B) it is a functional expression and all its argumentsare either "in" or immediately "out"; or(C) tbr every clause with the head literalpred(  .
.
.
Y .
.
. )
unifiable with pred(  .
.
.
X ?
.
.
)and such that Y unifies with X, Y is either "in","out" or "unknwn", and Y is marked "in" or "out"in at least one case.An argument X of literal pred(  ?
?
?
X ?
?. )
on the rhs ofa clause is "out" de layed  unt i l  after  p redo("  ?
?
Y "  "" )following pred  if(D) Y is immediately "out" in predo  and X=f  (Y); or(E) X is a functional expression and all of its argu-ments are either "in" or immediately "out" or "out"delayed until after predo;  or3 The precedence is with respect o the order of evaluation,which in PROLO6 is left-to-right."
An argument is considered fully bound if it is a constant or itis bound by a constant; an argument is partially bound if it is, or isbound by, a te .n  in which at least one variable is unbound.
(F) there is a predicate pred l ( ' "X" 'Z ' ' " )preceding predo  on the rhs, where Z* is a subsetof arguments ofpred l  such that every argument inZ* is "out" delayed until after predo  and wheneverZ* is "in" then X is immediately "out" in pred , .An argument X of literal pred  ( .
?
?
X ?
?
? )
on the lhs ofa clause is "out" if(G) it is "in" i npred( .
.
.
X .
?
?
); or(H) it is "out" (immediately or delayed) in literalpred  i ( " "" X ?
?
? )
on the rhs of this clause, provid-ing that pred l  ~pred  (again, we must take provi-sions to avoid infinite descend, cf.
(H) in "in"algorithm); if pred l  =pred  then X is marked"unknwn".ESSENTIAL ARGUMENTSSome arguments of every literal are essential inthe sense that the literal cannot be executed success-fully unless all of them are bound, at least partially, atthe time of execution.
A literal may have several alter-native, possibly overlapping, sets of essential argu-ments.
If all arguments in any one of such sets ofessential arguments are bound, then the literal can beexecuted.
Any set of essential arguments which havetile above property is called essent ia l .
We shall callthe set MSEA of essential arguments a min imal  set  o fessent ia l  a rguments  if it is essential, and no propersubset of MSEA is essential.
If we alter the ordering ofthe rhs literals in the definition of a predicate, we mayalso change its set of MSEA's .
We call the set ofMSEA's  existing for a current definition of a predicatethe set of act ive MSEA's  for this predicate.
To run apredicate in a certain direction requires that a specificMSEA is among the currently active MSEA's  for thispredicate, and if this is not already the case, then wehave to alter the definition of this predicate so as tomake this MSEA become active.
As an example con-sider the following clause from our PROLOG parser:objectbe (01,02, PI, P2, PSA, P) --venpass  (01,02, P1, P3) ,concat ( \ [P2 ,P3 \ ] ,PSA,  P) .Assuming that {O1} and {P3} are MSEA's  of ven-pass  and that P3 is "out" in venpass  whenevere l  is "in", we obtain that {O1} is the only candidatefor an active MSEA in ob jec tbe .
This is becauseP3 is not present on the argument list of objectbe,and thus cannot receive a binding before the executionof venpass  commences.
Moving to the coneatliteral, we note that its first argument is partially boundsince P3 is "out" in venpass .
This is enough foreoneat  to execute, and we conclude that O1 is infact the only essential argument in ob jeetbe .
If wereverse the order of venpass  and concat ,  then{p} becomes the new active MSEA for ob jec tbe ,while {O1} is no longer active.
Given the binding toits third argument, eoneat  returns bindings to the348 2first two, and thus it also binds P3, which is an essen-tial argument in venpaas .
5Below is the general pro-cedure MSEAS for computing the active sets of essen-tial arguments in the head literal of a clause as pro-posed in (Strzalkowski and Peng, 1990).Let's consider the following abstract clausedefining a predicate R~:R i(X 1," "  ,Xk) :- (R)Q1( ' "  "),02( ' '  ") ,?
, ,Q.
( .
.
. )
.Suppose that, as defined by (R), R i has the set MSi ={m 1, " " ' ,mj} of active MSEA's, and let MRI ~_ MSI bethe set of all MSEA for R~ that can be obtained by per-muting the order of literals on the right-hand side of(R).
Let us assume further that R i occurs on rhs ofsome other clause, as shown below:P (X~,.
.
.
,X,) :- (P)Rl(Xl ,1,  " " " ,X1,,1),R2(X2,1 ,  ' ' '  ,X2,k2),?
.
?R,.
(x~, ~, - .
.
,x~,k~).We want to compute MS, the set of active MSEA's forP, as defined by (P), where s >_ 1, assuming that weknow the sets of active MSEA for each R~ on the rhs.
6In the following procedure, the expression VAR (T),where 7" is a set of terms, denotes the the set of all vari-ables occurring in the terms in T.MSEAS (MS,MSEA, VP,i, OUT)(1) Start with VP = VAR ({X1, " " ,X.
}), MSEA = f~,i=1, and OUT = O.
When the computation iscompleted, MS is bound to the set of activeMSEA's for P.(2) Let MR 1 be the set of active MSEA's of R 1, andlet MRU1 be obtained from MR ~ by replacing allvariables in each member of MR1 by theircorresponding actual arguments of R~ on the rhsof (C1).
(3) I fR  I = P then for every rnl,k e MRU1 if everyargument Yt e m 1,k is always unifiable 7 with itss We note that since concat  could also be executed withP2 bound, the set {O1, P2} constitutes another active MSEA for in-verted ob jeetbe .
Ilowever, this MSEA is of little use since thebinding to O'I is unlikely to be, known in generation.6 MSEA's of basic predicates, uch as concat, are assumed tobe known a priori; MSEA's for recursive predicates are first comput-ed from non-recursive clauses.
We assume that symbols Xi indefinitions (P) and (R) above represent terms, not just variables.
Formore details see (Strzalkowsld and Peng, 1990).
The case of s=O isdiscussed below.7 A term Y is always unifiable with a term X if they unify re-gardless of the possible bindings of any variables occurring in Y(variables tandardized apart), while the variables occurring in X areunbound.
Any term is always unifiable with a variable, but the in-verse is not necessarily true.corresponding .argument X in P then remove m I,kfrom MRU 1.
For every set ml,kj = ml,k vo {X I,j},where X 1,j is an argument in R 1 such that it is notalready in m l,k and it is not always unifiable withits corresponding argument in P, and m 1,kj is not asuperset of any other ml,t remaining in MRUt,add ml&.
to MRU 1.
(4) For each ml,j e MRU1 O'=l ' ' '  r l )  compute bh,j:= VAR(ml, j)  c~ VP.
Let MP1 = {t/1,./ I~(t-tx,j), j= l  .
.
.
r}, where r>0, and ~(I-q,j) = \[I-h,j?
~ or (lth,j = O and VAR (m I,j) = ~D)\], If MP 1 =O then QUIT: (C1) is ill-formed and cannot beexecuted.
(5) For each I-q,j 6 MP1 we do the following: (a)assume that bh,j is "in" in R1; (b) compute setOUT1, j of "out" arguments for R i; (c) callMSEAS (MS Lj,btl.j,VP, 2,0UTI,j); (d) assign MS:= ~ MSI , j .j=l..r(6) In some i-th step, where l<i<_s, and MSEA =~/i-l,k, let's suppose that MR i and MRUi are thesets of active MSEA's and their instantiations withactual arguments of R i, for the literal R i on the rhsof (p).
(7) If Ri = P then for every mi,.
e MRUi if everyargument Y, e mi,u is always unifiable with itscorresponding argument Xt in P then remove mi, ufrom MRUi.
For every set mi,~, 1 = mi.u u \[Xi,j}where X~.i is an argument in R i such that it is notalready in mi, u and it is not always unifiable withits corresponding argument in P and mi,.j is not asuperset of any other mi, t remaining in MRUi, addmi..j to MRU 1 .
(8) Again, we compute the set MP i = {t.ti,j Ij= l  .
.
.
ri}, where P-i,j = (VAR (mi,j) - OUTi<,k),where OUT~<.k is the set of all "out" arguments inlitemls R 1 to Ri_  1 .
(9) For each \].ti, j remaining in MP i where i<_s do thefollowing:(a) if bti,j = ~ then: (i) compute the set OUTj of"out" .arguments of Ri; (ii) compute the unionOU'I}j := OU~I) vo OU~<,k; (iii) callMSEAS (MSi,j, I.ti-1,k, VP,i +1, OUTi,j);(b) otherwise, if bti,j ~ ~ then find all distinctminimal size sets v, c VP such that wheneverthe arguments in vt are "in", then the argu-ments in ~i,j are "out", If such v /s  exist, thenfor every vt do: (i) assume v, is "in" in P; (ii)compute the set OUT~,j, of "out" arguments inall literals from R 1 to Ri; (iii) callMSEA S (MSi,j, , ~ i -  1, k WV t, VP ,  i + 1,0 UT i,j, );(c) otherwise, if no such vt exist, MSi,j := O.
(10) Compute MS := U M&,j;j =l..r3 349( l l )For  i=s+l setMS := {MSEA}.In order to compute the set of all MSEA's for P, theprocedure presented above need to be modified so thatit would consider all feasible orderings of literals onthe rhs of (P), using information about all MSEA's forRi's.
This modified procedure would regard the rhs of(P) as an unordered set of literals, and use variousheuristics to consider only selected orderings.
We out-line the modified procedure briefly below.Let RR denote this set, that is, RR = {Ri Ii=1 " ' s} .
We add RR as an extra argument oMSEAS procedure, so that the call to the modified ver-sion becomes MSEAS (MS,MSEA,VP,RR,i, OUT).Next we modify step (2) in the procedure as follows:(2') F:or every element Rt.
1 ~ RR, do (2) to (5):(2) Let MR,.
1 be the set of all MSEA's of R,.
1, and letMRU,.
1 be obtained from MR,.
1 by replacing allvariables in each member of MR,, 1 by theircorresponding actual arguments of R,, 1.Further steps are modified accordingly.
The readermay note that the modified MSEAS procedure willconsider all feasible ways of ordering elements of RR.In the steps shown above, we select all literals aspotential leading elements on the right hand side, eventhough most of them will be rejected by steps (3) and(4).
For those that survive, we will select elementsfrom the rest of RR that can follow them.
In step (5)the recursive call to MSEAS will beM SEAS (MS,.
1.y,l-t,, 1,j, VP,RR-{R,.
1},2,OUT,.
1.j).
Instep (6), that is, in i-th step of the recursion, we con-sider all elements of RR-{R,,j I j=l  ?
?
?
i -1}, for selec-tion of the i-th literal on the right-hand side.
By thistime we will have already generated a number of pos-sible orderings of {R t I l=l ?
?.
i-1}.
We add step (6')which contains the head of an iteration over theremaining elements of RR, and covering steps (6) to(11).
Again, some of the elements of RR will berejected in steps (7) and (10).
We continue until RR iscompletely ordered, possibly in several different ways.For each such possible ordering a set of MSEA's willbe computed.
Step (12) is an end condition withRR=~.
To obtain a meaningful result, MSEA's inMR,,j's must be grouped into sets of these which areactive at the same time, that is, they belong to the setof active MSEA's for a specific definition of P (i.e.,ordering of RR).
MSEA's belonging to differentgroups give rise to alternative sets of MSEA's in thefinal set MS.
Note that in this modified algorithm, MSbecomes a set of sets of sets.An important part in the process of computingessential arguments for literals is the selection ofMSEA's for lexicon access and other primitives whosedefinitions are not subject o change.
As an example,consider a fragment of a lexicon:verb ( \[looks IV\] ,V, sg, look) .verb(  \[looklV\] ~V,pl, look) .verb  ( \ [arr ives IV\], V, sg, arr ive) .verb  ( \[arr ive IV\], V, pl, arrive) .The lexicon access primitive verb  (VI, V2, Nm, P)has two sets of essential arguments: {Vl} and{Nm, P}.
This is because {vl} can be consistentlyunified with at most one of { \ [ looka lV \ ]} ,{ \ [ look  IVl }, { \ [a r r ive  I V\] }, etc., at a time.
Simi-larly, {Nm, P} can be consistently unified at any onetime with at most one of {sg, look},  {pl ,  look},{sg, a r r ive} ,  etc.
Note that neither {P} nor {Nm}alone are sufficient, since they would unify withcorresponding arguments in more than one clause.This indeterminacy, although not necessarily fatal,may lead to severe inefficiency if the generator has tomake long backups before a number agreement is esta-blished between, say, a verb and its subject.
On theother hand, if the representation from which we gen-erate does not include information about the lexicalnumber for constituents, we may have to accept {P } asthe generation-mode MSEA for verb, or else we riskthat the grammar will not be reversed at all.REORDERING LITERALS IN CLAUSESWhen attempting toexpand a literal on the rhs ofany clause the following basic rule should be observed:never expand a literal before at least one its activeMSEA's is "in", which means that all arguments in atleast one MSEA are bound.
The following algorithmuses this simple principle to reorder rhs of parserclauses for reversed use in generation.
This algorithmuses the information about "in" and "out" argumentsfor literals and sets of MSEA's for predicates.
If the"in" MSEA of a literal is not active then the rhs's ofevery definition of this predicate is recursively reor-dered so that the selected MSEA becomes active.
Weproceed top-down altering definitions of predicates ofthe literals to make their MSEA's active as necessary,starting with the top level predicate parse(S,P), whereP is marked "in" (parse structure) and S is marked"out" (generated sentence).
We continue until wereach the level of atomic or non-reversible primitivessuch as concat, member, or dictionary look-up rou-tines.
If this process succeeds at reversing predicatedefinitions at each level, then the reversed-parser gen-erator is obtained.INVERSE("head :- old-rhs",ins,outs);{ins and outs are subsets of VAR(head) whichare "in" and are required to be "out", respectively }begincompute M the set of all MSEA's for head;for every MSEA m e M dobeginOUT := ~;if m is an active MSEA such that me ins thenbegincompute "out" arguments in head;add them to OUT;4 350if outs cOUT then DONE("head:-old-rhs")endelse if m is a non-active MSEA and mc_ins thenbeginnew-.rhs := O; QUIT := false;old-rhs-1 := old-rhs;for every literal L do M L := ~;{done only once during the inversion}repeatmark "in" old-rhs-1 arguments which areeither constants, or marked "in" in head,or marked "in", or "out" in new-rhs;select a literal L in old-rhs-1 which hasan "in" MSEA m L and if m L is not active in Lthen either M L = 0 or m L e ML;set up a backtracking point containingall the remaining alternativesto select L from old-rhs-1;if L exists thenbeginif m L is non-active in L thenbbeginif M L = O then M~, := M L ~3 {mL} ;for every clause "L1 :- rhSL/' such thatL1 has the same predicate as L dobeginINVERSECL1 :- rhsu",ML,~);if GIVEUP returned then backup, undoingall changes, to the latest backtrackingpoint and select another alternativeendend;compute "i~f' and "out" arguments in L;add "out" arguments o OUT;ncw-rhs := APPEND-AT-THE-END(ncw-rhs,L);old-rhs- 1 := REMOVE(old-rhs- 1,L)end {if}else beginbackup, undoing all changes, to the latestbacktracking point and select anotheralternative;if no such backtracking point exists thenQUIT := trueend {else}until old-rhs-1 = O or QUIT;if outscOUT and not QUIT thenDONE C head:-new -rh s")end {elseif}end; {for}GIVEUPCgrammar can't be inverted as specified")end;MOVING LITERALS BETWEEN CLAUSESThe inversion algorithm, as realized by the pro-cedure INVERSE, requires that for each clause in theparser code we can find a definite order of literals onits right-hand side that would satisfy the requirementsof running this clause in the reverse: appropriateminimal sets of essential arguments (MSEA's) arebound at the fight time.
However, this requirement isby no means guaranteed and INVERSE may encounterclauses for which no ordering of the literals on theright-hand side would be possible.
It may happen, ofcourse, that the clause itself is ill-formed but this is notthe only situation.
It may be that two or more literalson tile right-hand side of a clause cannot be scheduledbecause ach is waiting for the other to deliver themissing bindings to some essential arguments.
As anexample, consider the grammar fragment below:sent(P) " -  sub(NI ,P I ) ,vp (NI,PI, P).vp(NI ,P I ,P)  :- v(N2,P2),agree (NI, N2),obj (P1,P2,P)  .In the generation mode, that is, with the variable Pinstantiated by the parse structure of a sentence, thefollowing active MSEA's and "out" arguments havebeen computed:predicate MSEA "out"sent {P}sub {PI} N1vp {NI,P} P1v {P2} N2agree {NI,N2}obj {P} PI ,P2In order to use these rules for generation, wewould have to change the order of literals on the right-hand side of sent  clause, so that the vp is expandedfirst.
However, doing so would require that the variableN1 is bound.
This we could get by firing sub j  first,but we can't do this either, since we wouldn't knowthe binding to P1.
We note, however, that if we con-sider the two clauses together, then a consistent order-ing of literals can be found.
To see it, we expand vpon the right-hand side of the first clause replacing itwith the appropriately unified literals in the right-handside of the second clause, and obtain a single newclause that can be reordered for generation as follows:sent(P) :- ob j (P I ,P2 ,P) ,v (N2, P2) ,sub (NI, PI) ,agree (NI, N2 ) .Now we can reintroduce the non-terminal vp, andbreak the above rule back into two.
Note that as aresult agree  migrated to the first clause, and N2replaced N1 on the argument list of vp.
Note alsothat N2 is not an essential argument in the new vp.sent(P) :- vp(N2,P l ,P ) ,sub (NI, Pl) ,agree (NI, N2 ) .vp(N2,PI ,P)  :- ob j (P I ,P2,P) ,v (N2, P2) .5 351The only thing that remains to be done is to automati-cally determine the arguments of the new vp predi-cate.
Doubtless, it will be a subset of the argumentsoccurring in the literals that create the right-hand sideof the new clause.
In the example given this set is{N2,1?1, I72,17}.
From this set, we remove all thosearguments which do not occur in other literals of theoriginal clause, that is, before the break up.
The onlysuch argument is 172, and thus the final set of argu-ments to vp becomes {N2,P:I.,1?
}, as shown above.The complete algorithm for interclausal reordering ofgoals can be described by a largely straightforwardextension to INVERSE (Strzalkowski, 1989) 8CONCLUSIONSIn this paper we presented an algorithm forautomatic inversion of a unification parser for naturallanguage into an efficient unification generator.
Theinverted program of the generator is obtained by anoff-line compilation process which directly manipu-lates the PROLOG code of the parser program.
We dis-tinguish two logical stages of this transformation: com-puting the minimal sets of essential arguments(MSEA's) for predicates, and generating the invertedprogram code with INVERSE.
We have completed afirst implementation f the system and used it to deriveboth a parser and a generator f om a single DCG gram-mar for English (Strzalkowski and Peng, 1990).This method is contrasted with the approachesthat seek to define a generalized but computationallyexpensive valuation strategy for running a grammarin either direction without a need to manipulate itsrules (Shieber, 1988), (Shieber et al, 1989), and seealso (Colmerauer, 1982) and (Naish, 1986) for somerelevant techniques, employing the trick known as goalfreezing.
To reduce the cost of the goal freezing, andalso to circumvent some of its deficiencies, Shieber etal.
(1989) introduce a mixed top-downPoottom-up goalexpansion strategy, in which only selected goals areexpanded uring the top-down phase of the interpreter.This technique, still substantially more expensive thana fixed-order top-down interpreter, does not by itselfguarantee that the underlying rammar formalism canbe used bidirectionally, and it may need to be aug-mented by static goal reordering, as described in thispaper.ACKNOWLEDGMENTSRalph Grishman, Ping Peng and other membersof the Natural Language Discussion Group providedvaluable comments to earlier versions of this paper.s It should be noted that recursive clauses are never used forliteral expansion during interclausal ordering, and that literals are notmoved to or from recursive clauses, although argument lists of recur-sive literals may be affected by literals being moved elsewhere.This paper is based upon work supported by theDefense Advanced Research Project Agency underContract N00014-85-K-0163 from the Office of NavalResearch.REFERENCESColmerauer, Alain.
1982.
PROLOG II: Manuel dereference et modele theorique.
Grouped'Intelligence Artificielle, Faculte de Sciences deLuminy, Marseille.Dymetman, Marc and Isabelle, Pierre.
1988.
"Rever-sible Logic Grammars for Machine Translation."Proc.
of the Second Int.
Conference on MachineTranslation, Pittsburgh, PA.Debray, Saumya, K. 1989.
"Static Inference Modesand Data Dependencies in Logic Programs.
"ACM Transactions on Programming Languagesand Systems, 11(3), July 1989, pp.
418-450.Grishman, Ralph.
1986.
Proteus Parser ReferenceManual.
Proteus Project Memorandum #4,Courant Institute of Mathematical Sciences, NewYork University.Naish, Lee.
1986.
Negation and Control in I'ROLOG.Lecture Notes in Computer Science, 238,Springer.Shieber, Stuart, M. 1988.
"A uniform architecture forparsing and generation."
Proceedings of the12th COLING, Budapest, Hungary, pp.
614-619.Shieber, Stuart M., van Noord, Gertjan, Moore, RobertC.
and Pereira, Fernando C.N.
1989.
ASemantic-ttead-Driven Generation Algorithm forUnification-Based Formalisms.
Proceedings ofthe 27th Meeting of the ACL, Vancouver, B.C.,pp.
7-17.Shoham, Yoav and McDermott, Drew V.
1984.
"Directed Relations and Inversion of PROLOGPrograms."
Proc.
of the Int.
Conference of FifthGeneration Computer Systems,Strzalkowski, Tomek.
1989.
Automated Inversion of aUnification Parser into a Unification Generator.Technical Report 465, Courant Institute ofMathematical Sciences, New York University.Strzalkowski, Tomek.
1990.
"An algorithm for invert-ing a unification grammar into an efficientunification generator."
Applied MathematicsLetters, vol.
3, no.
1, pp.
93-96.
Pergamon Press.Strzalkowski, Tomek and Peng, Ping.
1990.
"Automated Inversion of Logic Grammars forGeneration."
Proceedings of the 28th AnnualMeeting of the ACL, Pittsburgh, PA.352 6
