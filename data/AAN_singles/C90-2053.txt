A New Parallel Algorithm for Generalized LR ParsingHiroald NUMAZAKI l\[ozumi TANAKADepartment of Computer ScienceTokyo Institute of ~i~chnology2--12-10ookayama Meguro-ku 'Ibkyo 152, JapanAbstractTomita's parsing algorithm\[~Ibmita 86\], which adapted the LR parsing al-gorithm to context fl'ee grammars, makes useof a breadth-first strategy to handle LR tableconflicts.
As the breadth-first strategy is com-patible with parallel processing, we can easilydevelop a parallel generalized LR parser b~edon Tomita's algorithm \[Tanaka 89\].
However,there is a problem in that this algorithm syn-chronizes parsing processes on each shift a,:-tion for the same input word to merge manyst~ks :into Graph Structured Stacks (GSS).
Inother words, a process that has completed ashift action must wait until all other processeshave ended theirs --- a strategy that reducesparallel performance.
We have developed anew parallel parsing algorithm that does notneed to wait for shift actions before mergingmany stacks, using stream communication of aconcurrent logic programming language calledGIIC \[Ueda 85\].
Thus we obtain a parallelgeneralized LR parser implemented in GHC.1 In t roduct ionTo provide an efficient parser tbr natural an-guage sentences, a parallel parsing algorithmis desirable.
As Tomita's algorithm is com-patible with parallel processing, we can eas-ily develop a parallel generalized LR parser\[Tanaka 89\].
However, with respect o the per-formance of the parallel parsing, one of thedefects of Tomita's algorithm is that it forcesmany parsing processes to synchronize on eachshift action for the same input word.
A pars-ing process that has completed a shift actionmust wait until all other processes have con>pleted their shift actions as well; such a syn-chronization strategy reduces the performanceof parallel parsing.In this paper, we will present a new parallelparsing algorithm which is a natural extensionof Tomita's \[Tolnita 86\].
Our algorithm canachieve greater performance in parallel pars-ing for natural anguage sentences.There are two major differences betweenTomita's algorithm and ours.
Initially, thenew algorithm does not make parsing pro-cesses wait for shift actions to merge manystacks with the same top state.
The processthat has finished a 'shift N' action first canproceed to the next actions until a reduce ac-tion needs to pop the element 'N' from thestack.
If some other parsing processes carryout the same 'shift N' actions, their stacks willbe merged into the position in which the firstprocess has placed an element by the 'shift N'action.Secondly, to avoid duplications of parsingprocesses the new algorithm employs rl~reeStructured Stacks (TSS) instead of GraphStructured Stacks (GSS).
The reason why wedo not use GSS is because it is rather compli-cated to implement the GSS data structure inthe framework of a parallel ogic prograrnminglanguage ,inch as GltC.
The merge operationof the stacks is realized by a GttC stream com-munication mechanism.In section 2 we explain generalized LR pars-ing, in section 3 give a brief introduction toGtIC, and in section 4 decribe our new parallelgeneralized LR parsing algotihm.
In section 5we compare tile parallel parsing performanceof our algorithm with Tornita's.1 305~L2 Generalized LR Parsing Al-gorithmThe execution of the generalized LR algorithmis controlled by an LR parsing table generatedfrom predetermined grammar ules.
Figure 1shows an ambiguous English grammar struc-ture, and Figure 2 an LR parsing table gener-ated from Figure 1.Action table entries are determined by aparser's; state (the row of the table) and alook-ahead preterminal (the column of the ta-ble) of an input sentence.
There are two kindsof stack operations: shift and reduce opera-tions.
Some entries in the LR table containmore than two operations and are thus in con-flict.
In such cases, a parser must conductmore than two operations simultaneously.The symbol 'sh N' in some entries indicatesthat the generalized LR parser has to push alook-ahead preterminal on the LR stack andgo to 'state N'.
The symbol 're N' means thatthe generalized LR parser has to reduce fromthe top of the stack the number of elementsequivalent to that of the right-hand side of therule numbered 'N'.
The symbol 'ace' meansthat the generalized LR parser has success-Nlly completed parsing.
If an entry containsno operation, the generalized LR parser willdetect an error.The right-hand table entry indicates whichstate the parser should enter after a reduce op-eration.
The LR ta.ble shown in Figure 2 hastwo conflicts at state 11 (row no.
11) and ste~te(1) S -+ NP, VP.
(2) S ~ S, PP.
(3) NP --.
NP, PP.
(4) NP ~ det, noun.
(5) NP --* pron.
(6) VP --+ v, NP.
(7) PP --+ p, NP.Fig.l: An Ambiguous English Grammar12 for the 'p' column.
Each of the conflictingtwo entries contains ashift and a reduce opera-tion and is called a shift-reduce conflict.
Whenparser encounters a conflict, it cannot deter-mine which operation should be carried outfirst.
In our parser, conflicts will be resolvedusing a parallel processing technique such thatthe order of the operations in conflict is; of noconcern.3 Brief Introduction to GHCBefore explaining the details of our algorithm,we will give a brief introduction to GHC, typ-ical statements ofwhich are given in Figure 3.Roughly speaking, the vertical }::~ar i,l a. GttCstatement (Fig.3) functions as a cut symbol ofProlog.
When goal 'a' is executed, a processof statement (1) is activated and the body be-comes a new goal in which 'b(Stream)' and'c(Stream)' are executed simultaneously.
InGHC, this is cMled AND-parallel execution.In other words, subprocesses 'b(Stream)' and56789101112det noun pron vshl sh2sh5shl sh2shl sh2p $ NP PP VP S4 3re5 re5 re5sh6 accsh8 sh6re4 re4 re4re2 re2re1 re1re3 re3 re3re7 sh6/re7 re7sh6/re6 re611127I0 91010Fig.2: A LR Parsing Table obtained from Fig.1 Grammar306 2'c(Strea,m)'  are created by a parent  process'a' and they run in parallel.
Note that thedefinition of process 'c' in statement (3) isgoing to instantiate the variable 'Stream' in'c(Stre~m)' with '\[a \[ Streaml\]'.
In such acase the execution of process 'c' will be sus-pended until 'Stream' has been instantiated byprocess 'b(Stream)'.
By the recursive process,:'all in the body of definition (2), process 'b'continues to produce the atom 'x' and places iton stream.
The atom 'x' is sent to process 'c'by the GIIC stream communication; process)c' continues to consume atom 'x' on stream.
(1) a : -  t rue  Ib (S t ream)  ,c (S t ream)  .
(2) b(Stream): -  t rue \[Stream=\[ x lRest  \],b (Rest) .
(3) c(\[ A\[Streaml \]):- true \[c (Streaml) .Fig.3: TypicM Statement of GHCtured Stacks (TSS) instead of Tomita's GraphStructured Stacks (GSS).
An example of TSSis given in the form of a list data structurein GHC.
Consider the following generalizedLR parsing, using for the input sentence, thegrammar and the table in Figure 1 and Figure2 respectively.
After the parser has shifted theword 'with', the following two stacks with thesame top state '6' will be obtained:Sentence  :" I open the door with a key "(1) top < \[ 3 , s ,0  \](2) top < \[ 6 ,p ,12 ,np ,8 ,v ,4 ,np ,0  \]Fig.4: Two Stacks to be MergedWe will merge these two stacks and get thefollowing TSS:(3) \[ 6,p, \[12,np,8,v,4,np,O\],\[3,s,0\] \Figure 5 shows an image of the TSS above.4 New Para l le l  Genera l i zed  LRPars ing  A lgor i thmq'he new parallel parsing algorithm is a.~a.tural extension of Tomita's algorithm_oml~.a 86\] and enables us to achieve greaterparal\]el performance.
In our algorithm, if aparsing sentence contains syntactic ambigui-ties, two or more parsing processes will run inparallel.4:.1 Tree Structured Stacks'lb avoid tile duplication of parsing processes,the new algorithm makes use of Tree Struc-4.2 Stack Operations on StreamIn order to merge the stacks, Tomita's algo-rithm must synchronize the parsing processesfor shift operations, thereby reducing paral-lel performance.
"ib solve this problem, wehave developed an improved parallel general-ized LR algorithm that involves no waiting forshift operations before merging many stacks.The new algorithm is made possible by a GHCstream communication mechanism.Through this stream communication mech-anism, a process that has completed a 'shiftN' first has the privilege of proceeding to sub-sequent actions and continuing to do so untila reduce action pops an element with state 'N'top12 np ...... 8 .... v - - - -~nP~) - - ( -0~bot to  m ~ ~  -Fig.5 : A qYee Structured Stack3 307into the stack.
If other parsing processes carryout the same 'shift N' actions, their stacks willbe merged into the position in which the "priv-ileged" process had, by the 'shift N' action,inserted an element.
The merging of stacksis tlhus greatly facilitated by the GHC streamcommunication mechanism.To begin parsing, we will create a sequenceof !goal processes, namely p l ,p2 , .
.
.
,pn,p$,each of which corresponds to a look-aheadpreterminal of an input sentence (referred tohereafter as a parent process).
The stack in-formation is sent from process pl to processp$ using the GtIC communication mechanism.Each parsing process receives the TSS from itsinput stream, changes the TSS in parallel ac-cording to the LR table entry, and sends theresults as the output stream - -  which in turnbecomes the input stream of the adjacent pro-cess.
The stream structure is as follows:\[ Stackl ,Stack2, .
.
.
,Stackn \] Stream \]where Stacki is a TSS like (3) o1" a simplestack like (1).Consider the case where a shift-reduce con-flict occurs and the parent process producestwo subprocesses which create stacks (1) and(2) (Fig.4).
In order to merge both stacks,Tornita's parser forces the parent process towait until the two subprocesses have returnedthe stacks (1) and (2).
Our algorithm at-tempts to avoid such synchronization: eventhough only one subprocess has returned stack(2), the parent process does not wait for stack(1), but generates the following stack struc-ture and sends it on to the output stream(which in turn becomes the input stream ofthe adjacent process).
The adjacent processcan then perform its own operations for thetop of stack (2) on the input stream.
Thus thenew algorithm achieves greater parallel perfor-mance than its predecessor.Output Stream of Parent Process :\[ \[6,p I Tail\] I Stream \]where '6,p' are the top two elements of thestack (2).Note that 'Tail' and 'Stream' remain unde-fined until the other subprocess returns stack(1).
If the adjacent process wants to retrieve'Tail' and 'Stream' after processing the top ofstack (2), the process will be suspended until'Tail' and 'Stream' have been instantiated bythe rest of stacks (2) and (1).This kind of synchronization is supported byGItC.
Let's suppose the adjacent process re-ceives the above output stream from the pa.r-ent process.
Before the parent process hasgenerated stack (1), the adjacent process canexecute 5 steps for the top two elements ofstack (2) ( see Figure 6 ).
During the execu-tion of the adjacent process, the parent pro-cess will be able to run in parallel.As soon as the parent process receives tack(1) with the same top elements '6,p' of stack(2), it instantiates the variables 'Tail' and'Stream' and merges '6,p', getting the sameTSS shown in Figure 5:Ta i l  : \[ \[ : t2,np,8,v,4,np,O "1,\[ 3,s,O \] \]Stream : \[ \]We need to consider the case where the topelement of stack (1) is different from that ofstack (2).
For example, suppose that stack (1)State Symbol Action Stream615610detnoun$np$sh 1sh 5re 4goto iire 7\[ \[ l,det,6,p I Tail \] I Stream \]\[ \[ 5,noun,l,det,6,p I Tail \] I Stream \]\[ \[ 6,p I Tail \] I Stream \]\[ \[ ll,np,6,P I Tail \] I Stream \]\[ Tail I Stream \]Fig.6 The Parsing Process with an Incomplete StackL - -308 4is \[ 8 ,p ,3 ,s ,o  \], then the variables 'Ta i l 'and 'Stream' will be instantiated as follows:Tail = \[ 12,np,8,v,4,np,O \]Stre~a = \[ \[ 8,p,3,s,O \] \]In this case, we have two simple stacks in thestream.5 Compar i son  o f  Para l le l  Pars -ing  Per fo rmanceIn this section, we will show by way of a simpleexample that our algorithm has greater paral-lel parsing performance than Tomita's origi-nal algorithm.
Consider the parallel parsingof the input sentence " I open the door witha key ", using a grammar in Figure 1 and atable in Figure 2.
As the input sentence hastwo syntactic ambiguities, the parsing processencounters a shift-reduce conflict of tile LR ta-ble and is broken down into two subprocesses.Figure 7 shows the state of the parsing processand grammatical symbols which are put intoa stack.
When the process has the state 12and tile look-aheM preterminal 'p', the pro-cess encounters a 'sh 6/re 6' conflict.
Then itis broken down into two subprocesses: the firstprocess performs the 'sh 6' operation and goesto state 6, and the other performs the 're 6'operation.
The second process also goes to thestate 6 after performing 'goto 9','re l','goto 3',and 'sh 6' operations.
'File processes that runaccording to the simple parallel LR parsingalgorithm are shown in Figure 7(a).We can see that  the two processes performthe same operations after performing the 'sh6' operations.
If we do not merge these kindsof processes, we will face an explosion in thenumber of processes.
Tomita's algorithm (shown in Figure 7(b) ) can avoid the duplica-tion of parsing processes by merging them intoone process.
However, tile algorithm needsa synchronization that decreases the numberof processes which are able to run in parallel.On the other tiand, our algorithm ( shown inFigure 7(c) ) does not require such synchro-nization as long as these processes do not tryto reduce the incomplete part of a stack.
Inthis example, two processes run in parallel af-ter a 'sh 6/re 6' conflict has occurred.
Then,an incomplete stack like \ [6 ,p lTa i l \ ]  is cre-ated, with tile upper process in Figure 7(c)0 Shift Action ~_~ Reduce & Goto ActionFig.7(a): A Simple P~allel LR ParsingFig.7(b): A Parallel Parsing Guided by Tomita's Algorithmv% f<jFig.7(c): Our Parallel Parsing5 309performing the 'sh 1', 'sh 5', and 're 4' stackoperations while the lower process calculatesits incomplete part.
After finishing the 'sh 6'operation of the lower process, the incompletepart 'Ta i l '  will be instantiated and thus weobtain the following tree structured stack:\[ 6,p, \[ 12,np,8,v,4,np,0 \ ] ,\[ 3 , s ,o  \] \]It is remarkable that our algorithm takes lesstime to than either the simple algorithm orTomita's to generate the first result of parsing.The reason is that our algorithm can analyzetwo or more positions of an input sentence inparallel, which is a merit when parsing withincomplete stacks.The complexity of our algorithm is identicalto that of Tomita's \[Johnson 89\].
The onlydifference between the two is the number ofprocesses that run in parallel.
So if we sim-ulate the parsing of our algorithm and thatof Tomita's on a single processor, the time ofparsing will be exactly the same.6 Conc lus ionWe have described a new parallel general-ized LR parsing algorithm which enables us toachieve greater performance of parallel pars-ing than Tomita's algorithm.
Simulations in-dicate that most processes run in parallel andthat the number of suspended processes i verysmall, but the experiment must be carried outusing many processors.
Fortunately, ICOT(heMqua.rters of the Japanese fifth generationproject) has offered us the possibility of usingthe Multi-PSI machine composed of 64 proces-sors.
We are now preparing to conduct such anexperiment to put our new parsing algorithmto the test.References\[Aho '72\] Aho,A.V.and Ulman,J.D.
: The The-ory o\] Parsing, Translation, and Compiling,Prentice-Hall,Englewood Cliffs,New Jersey(1972)\[Knuth 65\] Knuth,D.E.
: On the translation o\]languages \]rom left to right,Information andControl 8:6,pp.607-639\[Johnson 89\] Mark Johnson :The Computa-tional Complexity of Tomita's Algorithm In-ternational Workshop on Parsing Technolo-gies, pp.203-208 (1989)\[Matsumoto 87\] Matsumoto,Y.
:AParallel Parsing System for Natural Lan-guage Analysis, New Generation Comput-ing, 1/ol.5, No.
1, pp.63-78 (1987)\[Matsumoto 89\] Matsumoto,Y.
:Natural Lan-guage Parsing Systems based on Logic Pro-gramming, Ph.D thesis of Kyoto University,(June 1989)\[Mellish 85\] Mellish,C.S.
:Computer Interpre-tation of Natural Language Descriptions,Ellis Horwood Limited (1985)\[Nilsson 86\] Nilsson,U.
: AID:An AlternativeImplementation of DCGs, New GenerationComputing, 4, pp.383-399 (1986)\[Tanaka 89\] Tanaka, H. and Numazaki,H.
:Parallel Generalized LR Parsing based onLogic Programming International Workshopon Parsing Technologies, pp.
329-338 (1989)\[Pereira 80\] Pereira,F.and War-ren,D.
: Definite Clause Grammar for Lan-guage Analysis-A Survey of the Formalismand a Comparison with Augmented Tran-sition Networks, Arti\].
Intell, Vol.13, No.3,pp.231-278 (1980)\[Tanaka 89\] Tanaka, H.
Numazaki,H.
:ParallelGeneralized LR Parser (PGLR) basedon Logic Programming, Proc.
of FirstAustralia-Japan joint Symposium on Natu-ral Language Processing, pp.
201-211 (1989)\[Tonfita 86\] Tomita,M.
:Effieient Parsing \]orNatural Language, Kluwer Academic Pub-lishers (1986)\[Tomita 87\] Tomita,M.
:An EJ:ficien Augmented-Context-Free Pars-ing Algorithm, Computational Linguistics,Vol.13, Numbers 1-2, pp.31-46 (1987)\[Ueda 85\] Ueda,K.
:Guarded Horn Clauses,Proc.
The Logic Programming Conference,Lecture Notes in Computer Science, 221(1985)310 6
