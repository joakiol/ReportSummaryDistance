Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics, pages 37?42,Jeju, Republic of Korea, 8-14 July 2012. c?2012 Association for Computational LinguisticsIRIS: a Chat-oriented Dialogue System based on the Vector Space ModelRafael E. Banchs Haizhou LiHuman Language Technology Human Language TechnologyInstitute for Infocomm Research Institute for Infocomm ResearchSingapore 138632 Singapore 138632rembanchs@i2r.a-star.edu.sg hli@i2r.a-star.edu.sgAbstractThis system demonstration paper presentsIRIS (Informal Response Interactive Sys-tem), a chat-oriented dialogue system basedon the vector space model framework.
Thesystem belongs to the class of example-based dialogue systems and builds its chatcapabilities on a dual search strategy over alarge collection of dialogue samples.
Addi-tional strategies allowing for system adap-tation and learning implemented over thesame vector model space framework arealso described and discussed.1 IntroductionDialogue systems have been gaining popularity re-cently as the demand for such kind of applicationshave increased in many different areas.
Addition-ally, recent advances in other related languagetechnologies such as speech recognition, discourseanalysis and natural language understanding havemade possible for dialogue systems to find practi-cal applications that are commercially exploitable(Pieraccini et al, 2009; Griol et al, 2010).From the application point of view, dialoguesystems can be categorized into two major classes:task-oriented and chat-oriented.
In the case of task-oriented dialogue systems, the main objective ofsuch a system is to help the user to complete a task,which typically includes booking transportation oraccommodation services, requesting specific infor-mation from a service facility, etc.
(Busemann etal., 1997; Seneff and Polifroni, 2000; Stallard,2000).
On the other hand, chat-oriented systemsare not intended to help the user completing anyspecific task, but to provide a means for participa-ting in a game, or just for chitchat or entertain-ment.
Typical examples of chat-oriented dialoguesystems are the so called chat bots (Weizenbaum,1966; Ogura et al, 2003, Wallis, 2010).In this paper, we introduce IRIS (Informal Res-ponse Interactive System), a chat-oriented dialoguesystem that is based on the vector space modelframework (Salton et al, 1975; van Rijsbergen,2005).
From the operational point of view, IRISbelongs to the category of example-based dialoguesystems (Murao et al, 2003).
Its dialogue strategyis supported by a large database of dialogues that isused to provide candidate responses to a given userinput.
The search for candidate responses is per-formed by computing the cosine similarity metricinto the vector space model representation, inwhich each utterance in the dialogue database isrepresented by a vector.Different from example-based question answer-ing systems (Vicedo, 2002; Xue et al, 2008), IRISuses a dual search strategy.
In addition to the cur-rent user input, which is compared with all existentutterances in the database, a vector representationof the current dialogue history is also comparedwith vector representations of full dialogues in thedatabase.
Such a dual search strategy allows for in-corporating information about the dialogue contextinto the response selection process.The rest of the paper is structured as follows.Section 2 presents the architecture of IRIS as wellas provides a general description of the dataset thathas been used for its implementation.
Section 3presents some illustrative examples of dialoguesgenerated by IRIS, and Section 4 presents the mainconclusions of this work.372 The IRIS ImplementationIn this section we first provide a detailed descrip-tion of the IRIS architecture along with the mostrelevant issues behind its implementation.
Then,we describe the specific dialogue dataset that sup-ports the IRIS implementation.2.1 ArchitectureAs already mentioned, IRIS architecture is heavilybased on a vector space model framework, whichincludes a standard similarity search module fromvector-based information retrieval systems (Saltonand McGill, 1983).
However, it also implementssome additional modules that provide the systemwith capabilities for automatic chatting.Figure 1 depicts a block diagram that illustratesthe main modules in the IRIS architecture.
As seenfrom the picture, the whole system comprises se-ven processing modules and three repositories.Figure 1: General block diagram for IRISThe main operation of IRIS can be described asfollows.
When a new dialogue starts, the control ofthe dialogue is passed from the dialogue manage-ment module to the initiation/ending module.
Thismodule implements a two-state dialogue strategywhich main objectives are: first, to greet the userand self-introduce IRIS and, second, to collect thename of the user.
This module uses a basic parsingalgorithm that is responsible for extracting theuser?s name from the provided input.
The name isthe first vocabulary term learned by IRIS, which isstored in the vocabulary learning repository.Once the dialogue initiation has been concludedthe dialogue management system gains back thecontrol of the dialogue and initializes the currenthistory vector.
Two types of vector initializationsare possible here.
If the user is already know byIRIS, it will load the last stored dialogue historyfor that user; otherwise, IRIS will randomly selectone dialogue history vector from the dialogue data-base.
After this initialization, IRIS prompts theuser for what he desires to do.
From this moment,the example-based chat strategy starts.For each new input from the user, the dialoguemanagement module makes a series of actions that,after a decision process, can lead to different typesof responses.
In the first action, the dynamic repla-cement module searches for possible matches bet-ween the terms within the vocabulary learningrepository and the input string.
In a new dialogue,the only two terms know by IRIS are its own nameand the user name.
If any of this two terms areidentified, they are automatically replaced by theplaceholders <self-name> and <other-name>, res-pectively.In the case of a mature dialogue, when there aremore terms into the vocabulary learning repository,every term matched in the input is replaced by itscorresponding definition stored in the vocabularylearning database.Just after the dynamic replacement is conducted,tokenization and vectorization of the user input iscarried out.
During tokenization, an additionalchecking is conducted by the dialogue manager.
Itlooks for any adaptation command that could bepossibly inserted at the beginning of the user input.More details on adaptation commands will begiven when describing the style/manner adaptationmodule.
Immediately after tokenization, unknownvocabulary terms (OOVs) are identified.
IRIS willconsider as OOV any term that is not contained ineither the dialogue or vocabulary learning data-bases.
In case an OOV is identified, a set of heuris-tics (aiming at avoiding confusing misspellingswith OOVs) are applied to decide whether IRISshould ask the user for the meaning of such a term.38If IRIS decides to ask for the meaning of theterm, the control of the dialogue is passed to thevocabulary learning module which is responsiblefor collecting the meaning of the given term fromthe user or, alternatively, from an external sourceof information.
Once the definition is collected andvalidated, it is stored along with the OOV term intothe vocabulary learning repository.
After comple-ting a learning cycle, IRIS acknowledges the userabout having ?understood?
the meaning of the termand control is passed back to the dialogue manage-ment module, which waits for a new user input.If IRIS decides not to ask for the meaning of theOOV term, or if no OOV term has been identified,vectorization of the user input is completed by thevector similarity modules and similarity scores arecomputed for retrieving best matches from thedialogue database.
Two different similarity scoresare actually used by IRIS.
The first score is appliedat the utterance level.
It computes the cosinesimilarities between the current user input vectorand all single utterances stored in the database.This score is used for retrieving a large amount ofcandidate utterances from the dialogue database,generally between 50 and 100, depending on theabsolute value of the associated scores.The second score is computed over historyvectors.
The current dialogue history, which isavailable from the current history repository, inclu-des all utterances interchanged by the current userand IRIS.
In other to facilitate possible topic chan-ges along the dialogue evolution, a damping or?forgetting?
factor is used for giving more impor-tance to the most recent utterances in the dialoguehistory.
A single vector representation is then com-puted for the currently updated dialogue historyafter applying the damping factor.
The cosinesimilarity between this vector and the vector repre-sentations for each full dialogue stored in the dia-logue database are computed and used along withthe utterance-level score for generating a final rankof candidate utterances.
A log-linear combinationscheme is used for combining the two scores.
Thedialogue management module randomly selectsone of the top ranked utterances and prompts backto the user the corresponding reply (from the dia-logue database) to the wining utterance.Just immediately before prompting back the res-ponse to the user, the dynamic replacement moduleperforms an inverse operation for replacing the twoplaceholders <self-name> and <other-name>, incase they occur in the response, by their actualvalues.The final action taken by IRIS is related to thestyle/manner adaptation module.
For this action totake place the user has to include one of three pos-sible adaptations commands at the beginning ofher/his new turn.
The three adaptation commandsrecognized by IRIS are: ban (*), reinforce (+), anddiscourage (?).
By using any of these three charac-ters as the first character in the new turn, the user isrequesting IRIS to modify the vector space repre-sentation of the previous selected response asfollows:?
Ban (*): IRIS will mark its last response as aprohibited response and will not show suchresponse ever again.?
Reinforce (+): IRIS will pull the vector spacerepresentation of its last selected utterancetowards the vector space representation of theprevious user turn, so that the probability ofgenerating the same response given a similaruser input will be increased.?
Discourage (?
): IRIS will push the vectorspace representation of its last selected utter-ance apart from the vector space represen-tation of the previous user turn, so that theprobability of generating the same responsegiven a similar user input will be decreased.2.2 Dialogue Data CollectionFor the current implementation of IRIS, a subset ofthe Movie-DiC dialogue data collection has beenused (Banchs, 2012).
Movie-DiC is a dialoguecorpus that has been extracted from movie scriptswhich are freely available at The Internet MovieScript Data Collection (http://www.imsdb.com/).In this subsection, we present a brief description onthe specific data subset used for the implementa-tion of IRIS, as well as we briefly review theprocess followed for collecting the data and ex-tracting the dialogues.First of all, dialogues have to be identified andparsed from the collected html files.
Three basicelements are extracted from the scripts: speakers,utterances and context.
The speaker and utteranceelements contain information about the characterswho speak and what they said at each dialogueturn.
On the other hand, context elements containall the additional information (explanations anddescriptions) appearing in the scripts.39The extracted dialogues are stored into a datastructure such that the information about turn se-quences within the dialogues and dialogue sequen-ces within the scripts are preserved.Some post-processing is also necessary to filterout and/or repair the most common parsing errorsoccurring during the dialogue extraction phase.Some of these errors include: bad script formatting,same-speaker turn continuations, explanatory notesinserted within the turns, misspelling of names inthe speaker headers, changes in the encoding for-mat, etc.The final dialogue collection used in the IRISimplementation consists of dialogues from 153movie scripts, mainly belonging to the comedy,action and family genres.
Table 1 summarizes themain statistics of the resulting dataset.Total number of movie scripts 153Total number of  dialogues 24,265Total number of  speaker turns 159,182Average amount of dialogues per movie 158.59Average amount of turns per dialogue 6.56Total number of running words 1,670,879Overall vocabulary size 34,903Table 2: Main statistics of the movie dialoguedataset used in the IRIS implementationFor each turn in the dialogue collection, a vectorspace model representation was constructed.
Forthis, the standard bag-of-words weighting schemeknown as TF-IDF was used (Spark, 1972; Saltonand Buckley, 1988).Before performing the vectorization, word toke-nization was conducted.
In this step, all punctua-tion marks were removed, with the exception ofthe question ???
and exclamation ?!?
marks.
Simi-larly, all other non-alphanumeric characters occur-ring in the utterances were removed as well.
Alsoduring the tokenization phase, all self-references tocurrent speaker names in the utterances were re-placed by the <self-name> placeholder, as well asall references to the names of other speakersparticipating in the same dialogue were replacedby the <other-name> place-holder.Finally, a vector space model representation wasalso computed for each full dialogue in the collec-tion.
For this bag-of-words model at the dialoguelevel, both utterance and context information weretaken into account.
Again, the TF-IDF weightingscheme was used.3 Some Dialogue ExamplesIn this section we show some real examples ofinteractions between IRIS and human users.
First,we present some interesting examples of good per-formance, as well as illustrate some of the learningcapabilities of IRIS.
Then, we present some of thecommon failures which identify specific points ofattention for further improvements.3.1 Good Performance ExamplesOur first example illustrates the beginning of atypical chat session between IRIS and a new user.This example is depicted in Table 2.# Spkr.
Turn1 IRIS Hi, I?m IRIS?
What?s your name?2 USER Hi Iris, I am Peter3 IRIS Nice name Peter... What do you want to talkabout?4 USER Sports?5 IRIS How come in all that time I was trying to getyou a date, you never asked me out?6 USER ok, do you want to go for dinner tonight?7 IRIS Yes.8 USER What kind of food do you like?9 IRIS Anything but guts and mushrooms.10 USER Ok pick you up at seven!11 IRIS Ok.
Pick me up at seven.Table 2: Beginning of a chat session between IRISand a new userFor the dialogue depicted in Table 2, turn num-bers 1, 2 and 3 are processed by the dialogue intia-tion/ending module.
The example-based dialoguemanagement strategy starts from turn 4 onwards.Notice that as far as this is a new user, not previousdialogue history exists, so in this case a randomhistory vector has been selected and instead offocusing in the sports topic suggested by the user,IRIS ?takes the initiative?
of asking for a date.In our second example, which is presented inTable 3, we illustrate the beginning of a typicalchat session between IRIS and a returning user.For this particular user, her last interaction withIRIS was about sports.Similar to the previous example, turn 1 is pro-cessed by the dialogue intiation/ending module andthe example-based dialogue management strategystarts from turn 2 onwards.
In this particular case,IRIS is much more centered on the sports topic asthis context information has been already provided40by the stored dialogue history of the previous chatsession with this particular user.# Spkr.
Turn1 IRIS Hey, Helen... welcome back!
How are youdoing?2 USER fine and you?3 IRIS Is there more?4 USER Yes, I finally went to that tennis match I toldyou the last time.5 IRIS The match!6 USER Yes, have you seen some sports recently?7 IRIS I hate sports.Table 3: Beginning of a chat session between IRISand a returning userIn our third example, which is presented inTable 4, we illustrate the learning of a new vocabu-lary word by IRIS.
In this example, when the un-known term paella is detected, the control of thedialogue is passed to the vocabulary learning mo-dule, which takes care of turns 7, 8, 9 and 10.# Spkr.
Turn1 USER do you cook anything Iris?2 IRIS Eggs.3 USER ha ha ha!4 IRIS Ha-ha-ha!
Ha-ha-ha!5 USER Can you cook anything else?6 IRIS Do you cook?7 USER Paella8 IRIS What the hell is that???
?9 USER It is a Spanish food.
Yellow rice with someseafood on it.10 IRIS Ok, I see... thanks!11 USER So, do you want some paella today?12 IRIS Well, it beats working in a seafood restaurant...Table 4: Chat segment in which IRIS learns thenew vocabulary term paellaNotice that when the user asks IRIS abouthaving some paella today, IRIS is already able toassociate it with seafood as it was stated in theuser?s provided definition.
The process actuallyoccurs as follows: after tokenization, but beforevectorization of the user input in turn 11, thedynamic replacement module substitutes the termpaella by its definition, which has been previouslystored in the vocabulary learning repository whenturn 9 was processed.
The actual user input that isfinally vectorized in turn 11 is the following one:so do you want some it is a spanish food yellowrice with some seafood on it today ?, which is theutterance used by IRIS to retrieve and select theresponse it provides in turn 12.3.2 Common Failure ExamplesIn this subsection we focus our attention in themost common failures exhibited by IRIS.
Some ofthese failures put in evidence specific points ofattention that should be taken into account forfurther improvements of the system.Our first example illustrates the problem of IRISlack of consistency in issues for which consistentanswers are required.
Two specific chat segmentsin which IRIS provides inconsistent responses arepresented in Table 5.# Spkr.
Turn1 USER how old are you Iris?2 IRIS I'm thirteen, how old are you?3 USER I am 404 IRIS Only I did better... 40 crates a day.5 USER how old are you Iris?6 IRIS Ten.# Spkr.
Turn1 USER Yes, have you seen some sports recently?2 IRIS I hate sports.3 USER Really, what about soccer?4 IRIS I'd sooner watch soccer.5 USER what do you prefer soccer or football?6 IRIS Football is my life.Table 5: IRIS incapability to being consistentThe first example presented in Table 5 constitu-tes a serious consistency problem.
In this case IRIShas reported two different ages in the same chatsession.
The second case, although not so seriousas the previous one, also constitutes a consistencyfailure.
In this case IRIS states Football is my lifejust two turns after saying I hate sports.Our second example, which is presented in Ta-ble 6, illustrates a problem derived from the noisethat is still present in the dataset.# Spkr.
Turn1 IRIS You watching the ballgame?2 USER No3 IRIS Bianca stares at him for a moment.Table 6: Example of noise in the dialogue datasetIn the particular example illustrated in Table 6,as seen from turn 3, a context element has been41mistakenly stored in the data collection as anutterance during the dataset preparation phase.Several problems similar to this one, which arerelated to noise in the database, have been detectedalready.
To tackle this problem we need to refinethe parsing and post-processing algorithms usedduring the dialogue dataset construction phase.4 Conclusions and Future WorkIn this paper, we have presented IRIS (InformalResponse Interactive System), a chat-oriented dia-logue system that is based on the vector spacemodel framework.
The system belongs to the classof example-based dialogue systems and builds itschat capabilities on a dual search strategy over alarge collection of movie dialogues.Additional strategies allowing for system adap-tation and learning have been also implementedover the same vector space model framework.More specifically, IRIS is capable of learning newvocabulary terms and semantically relating them toprevious knowledge, as well as adapting its dia-logue decisions to some stated user preferences.We have also described the main characteristicsof the architecture of IRIS and the most importantfunctions performed by each of its constituentmodules.
Finally, we have provided some exam-ples of good chat performance and some examplesof the common failures exhibited by IRIS.As future work, we intend to improve IRIS per-formance by addressing some of the already identi-fied common failures.
Similarly, we intend to aug-ment IRIS chatting capabilities by extending thesize of the current dialogue database and integra-ting a strategy for group chatting.AcknowledgmentsThe authors would like to thank the Institute forInfocomm Research for its support and permissionto publish this work.ReferencesBanchs R E (2012) Movie-DiC: a movie dialogue cor-pus for research and development.
In Proc.
of the 50thAnnual Meeting of the ACL.Busemann S, Declerck T, Diagne A, Dini L, Klein J,Schmeier S (1997) Natural language dialogue servicefor appointment scheduling agents.
In Proc.
of the 5thConference on Applied NLP, pp 25-32.Griol D, Callejas Z, Lopez-Cozar R (2010) Statisticaldialog management methodologies for real applica-tions.
In Proc.
of SIGDIAL?10, pp 269-272.Murao H, Kawaguchi N, Matsubara S, Yamaguchi Y,Inagaki Y (2003) Example-based spoken dialoguesystem using WOZ system log.
In Proc.
of the 4thSIGDIAL, pp 140-148.Ogura K, Masuda T, Ishizaki M (2003) Building a newInternet chat system for sharing timing information.In Proc.
of the 4th SIGDIAL, pp 97-104.Pieraccini R, Suendermann D, Dayanidhi K, Liscombe J(2009) Are we there yet?
Research in commercialspoken dialog systems.
In Proc.
of TSD?09, pp 3-13.Salton G, Wong A, Yang C (1975) A vector space mo-del for automatic indexing.
Communications of theACM 18(11):613-620.Salton G, McGill M (1983) Introduction to moderninformation retrieval.
McGraw-Hill.Salton G, Buckley C (1988) Term-weighting approa-ches in automatic text retrieval.
Information Proces-sing & Management 24(5):513-523Seneff S, Polifroni J (2000) Dialogue management inthe Mercury flight reservation system.
In Proc.
of theANLP-NAACL 2000 Workshop on ConversationalSystems, pp 11-16.Spark K (1972) A statistical interpretation of term speci-ficity and its application in retrieval.
Journal of Do-cumentation 28(1):11-21Stallard D (2000) Talk?n?travel: a conversational systemfor air travel planning.
In Proc.
of the 6th Conferenceon Applied NLP, pp 68-75.van Rijsbergen C (2005) A probabilistic logic for infor-mation retrieval.
In Advances in Information Retrie-val, Lecture Notes in Computer Science 3408:1-6.Vicedo J (2002) SEMQA: A semantic model applied toquestion answering systems.
PhD Thesis, Universityof Alicante.Wallis P (2010) A robot in the kitchen.
In Proceedingsof the ACL 2010 Workshop on Companionable Dia-logue Systems, pp 25-30.Weizenbaum J (1966) ELIZA ?
A computer programfor the study of natural language communication be-tween man and machine.
Communications of theACM 9(1):36-45.Xue X, Jeon J, Croft W (2008) Retrieval models forquestion and answer archives.
In Proc.
of the 31stAnnual International ACM SIGIR Conference onR&D in Information Retrieval, pp 475-482.42
