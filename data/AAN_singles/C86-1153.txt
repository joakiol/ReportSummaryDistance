Construction of a modular and portable translation systemFu j io  NISIIIDA, Yoneharu FUJITA and Shi.nobu 'FAKAMATS\[IDepartment of Electrical Engineering,Faculty of Engineering,University of Osaka Prefecture,Saka\], Osaka, Japan 59\]i. IntroductionIn recent years the study of nlachJ net rans \ ] .a t ion  has made great  advances  and thet rans la t ion  system has been la rger  and compl icatedwJ th  augment ing  fae i \ ]  \ ] t ies .
Fur thermore ,  mostrecently, many powerfu\[ workstations have beendeveloped and wtrious MT systems for specialpurposes  are  ready  to be mounted on theseworkstations.\]in snch a state of affairs Jt will be neededthat many MT systems are reorganized or re-constructed on a program module basis for easymodification lllaJ ntainance and transplantation.
'\]'h:is paper has two purposes.
One of th~i~l :{s toshow a method of constructing an MT system ~'3" ona library module basis by the aids ~ a progralnmingconstruction system called L-MAPS.
~) The M\]' systemcan be wr i t ten  in  any progranm~Jng languagedes ignated  by a user  i f  an appropr ia te  data  base andthe appropr ia te  process ing  funct ions  are  imp\].ementedin  advance .
For example,  i t  call be wr i t ten  in acoml)i\].er language l i ke  C \ ]aeguage,  which Jspreferable for a workstation with a relative slowrunning machine speed.
4)The other purpose is to give a brief:introduction of a program generating system calledLibrary-Modul.e Aided Program SynthesizJ ng system(abbreviated to \[,-MAPS ) running on a library modulebasis.
L-MAPS permits us to write programspecifications in a restricted natural \]anguagelike Japanese and converts them to formalspecifications.
It refines the formal specificationsusing the library modules and geeerates a readablecomment of tile refiined specification written in tlreabove natural language every refinement in option.Tim convers ion  between fo rmal  express ions  andnatura l  language express ions  i s  per formede f f i c ient \ ]y  on a case  grammar bas is .?
2 ) :~)  2.
Overview of  the MT system organ izat \ ] .onOur machine translation system is constructedon the intermediate expressions based on universalsubframes of predicates and predicative nouns.
Itaims at a multiliugual transfer system.
\[\]p to now,however ~ no universal precise semant J c categorysystem over various languages has been constructedyet, and our MT system is compelled to work ratheron a b i l ingua l  basis in  the selection ofequ iva lent .
s ,The f i r s t  vers io~of  the  par~q~ was wr i t ten  inan extended vers ion  " of  LINGOL - '~ ' .
I t  has  anadv ice  par t  and a semant ic  par t  in  each rewr i t ingru le .
Both par ts  of  them pernl i t  users  to  descr ibeany L isp  program for  des ignat ing  deta i l s  of  thereduct ion  procedures .
These techn iques  used JnLINGOL and ATN seem apparent ly  conven ient .
However,they  o f ten  make the data  par t  inseparab le  from theprogram par t  and br ing  an MT system to muchcomplex i ty ,  and accord ing ly ,  p revents  app l i cab i l i tyof  tire programs o f  the MT system Lo anothert rans la t ion  between other  languages .Recent ly ,  a rev ised  vers ion  of  our  MT systemhas been const ructed ,  rfhe main program orprocedural part cons:i sts of uni f:i cat\] on arKlsubstJtut:ion, while the data part consists of frameknowledge rewriting ruins and word dictionaries.Rewriting ru\]es wi th arguments describe thedetails of the syntactic and semantic structure ofthe language explicitly.
For example, the predicatepart: of the Hornby's verb llattern VP\]3A of Eagl:ishis written as follows:PREDP( PRED-co:to,MOI):m , kl-C \]:t\],k2-c2:t2)--> VP( PRED-co:to,MOD:m ) NP(k\] -Cl : t \ ] )PP( k2-c2:TO-t 2)where PREDP, VP, NP and PP denote a PR\]'\]DJcagePhrase, a Verb Phrase, a Noun Phrase and aPrepositional Phrase respecively, k-c:t denotes atriple of a case label, a semantic category and aterm and in denotes var:ious modal values such astense an(\] aspect.
These rewriting rules aretabnlated in several tab\] es :\[or an effJ (lentprocessJ ug.The parsing system first applies the syntacticpar t  of  a rewr i t ing  ru le  to  that  of  a hand le  in  areduction sequence of a given source sentence, fftile system finds a unJf:iable rewriting rule, :itchecks whether the semantic part is unifiable.
\]'hecategory check of a term in a handle for thecase-frame condition is processed by a special kindof unification under an interpretation that the termcategory in a rule :is a restricted variable.The intermediate expression of tile handle partis constructed by substituting the unified termsfor the arguments in the left-hand side of therewriting ru le .3.
The L-MAPS system aud language conversionThe L-MAPS system is costructed on afundamental \].ibrary module basis.
When a user givesa specification by referrkng to the libraly module,L-MAPS searches applJ(.
:able library modules andrefines the spa(if J cation by linking several modulesor replacing :it by the detailed procedure called theOperation Part of an applicable library module.The formal specifications of programs as wellas tile library modules are generally difficult forusers to read and write correctly though they areefficient and rigorous for inachine operation.
Hence,it is desirab\].e to rewrite the formal specificationJn a natural l.anguage.
I.-MAPS performs a conversionbetween a restricted natural language expressionand a fornlal language expression through theintermediate (or the internal) expression of thenatural language expression with the aids of case\].abels.The conversion between a restricted naturallanguage expression and the intermediate expressioncan be done Jn a similar manner to the conversioncarried out in machine translation.Formal specifications generaJ.ly have differentforms from those of the intermediate expressions.649The intermediate expression of a sentence takes thefollowing form :(PRED:tp, Kl:tl ....... Kn:tn) (I)where PRED K1 and Kn are case labe\].s and tp tland tn are terms corresponding to their cases?
Onthe other hand, a procedure expression appearing informal specifications as well as in a heading ofeach library module has tile following form:proc - labe l (K l ' : t l ' ,  K2 ' : t2 ' ,  .
.
.
.
.
K r i ' : tn ' )  (2)where the procedure name plays a role of thekey word and it is constructed from the predicateterm the object term and others of the intermediateexpression?
It is used for retrieving librarymodules app l i cab le  to a given spec i f i ca t ion .\].-MAPS performs the convers ion between thein termediate  express ion( I )  and the proceduralexpress ion(2)  by a method s imi la r  to the casestructure conversion between different languages.The conversion :ks applied not onJy to theconst ruct ion  of a formal specJ f Jeat ion  from aninformal specificatJ on written Jn restrictedJapanese or English but also to the generation ofJapanese or English comments on the refJ nedspecifications generated by L-MAPS itself.4.
Modularization of programsThe revised MT system is reconstructed based onlibrary modules by the aids of L-MAPS.
Each librarymodule has a structure as shown in Table i.Table 1 A part of library modulesPROC: HANDLE_REDUCE(SO:reduced_sequence, OBJ:handle,INSTR:reduction rule,GOAL:new_reduce~_sequence)IN: GIVEN(OBJ:reduced_sequence,handle,reduction_rule)OUT: REDUCED_FORM(OBJ:new_reduced_sequence)ENTITYTYPE: ................................OP: RULE_APPLY(OBJ:reduction_rule, PARTIC:handle,GOAL:reduced_symbol)BRARCIII(COND:EQUAL(reducedsymboI,NULL),OP:RETURN(FAIL))FOR(COUNT:n,FROM:l,TO:-(stack_pointer,symbol_number ofhandle),OP:COPY(OBJ:reduced_sequence(n),GOAL:new_reducedsequence(n)))COPY(OBJ:reduced_symbol,GOAL:newreduced_sequence(+(n,l)))RETURN(TRUE)The heading of each module has both theprocedural expression and the input-output predicateexpression (abbreviated to the IO expression).Program specifications given by a user can call amodule by using one of these headings.The IO expression consists of a pair of aninput and an output predicate and asserts that theoutput predicate holds under the given inputpredicate.The IO expressions are used to automaticallylink some modules for a specification and to checklinking of modules specified by their proceduralexpressions.The type part describes the types of regionsstructures and roles of input output or localvariables.650Tile OP part describes the procedures for the~nnction assured in the heading part.
\]'he proceduresare described in a little more detail by using tileheadings of more fundainental modules?Control statements are represented by using aprefixed-form of Pascal called the General ControlExpression (abbrewkated to GCE,) here?
The controlstatements are expanded into a programming languagesuch as L:isp and C designated by users.
Someconversion rules are shown in Table 2.Table 2 Conversion rules to objective lauguagesIF TIIEN(CONI): p. OP: s .................... (GCE)(CORD (p s ) )  .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
(L isp)I F (p )  s ; .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
(C)IF TIIEN_I~,LSE(COND: p, OPI: s l ,  OP2:s2  .
.
.
.
(GCE)(CON:\[) (ps \ ] )  ( t  s2) )  .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
(L isp)IF(p)  s\] ELSE s2 ; .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
(C)FOR(COUNT: i ,  FROM: m, TO: n, OP: s) .
.
.
.
.
.
(GCE)(SETQ J m)(\],OOP ()(CORD ((EQUAL i n) (EXIT-LOOP))(T ~ (SETQ i (ADm i ) ) )))  .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
(map)FOR(J = m; J <= n; J++) s .
.
.
.
.
.
.
.
.
.
(C)?
, o .
0 , o o ?
.
0 .
o ?
.
.
.
.
.
~ , .
0 .
o .
o o o .
.
.
.
.
o o ~o o o o , o o , , .
0 .
o ~ , , , .
o ~ 0 .
?
o .
.
, .
o o , .
0 ?
?
.
GCorresponding to tlle genera\] control \]anguage~general data structures are also introduced.
Ifrefined specifications are designated to be expandedto a programming language which do not have thecorresponding data structures inherently, theequivalent data structures and the access functionmust be imp\].emented in advance by combining thefundamental data structures in the language.
Forexample, if Lisp is designated as the programminglanguage, a struct which appears in a general datastructure of a specification is expanded to thecorrespondig associative list structure and thelists can be accessed by associative functions.5.
Refinement and Expansion by the L-MAPS systemFigure 1 shows an outline of the processing byL-MAPS.\[ specificati?ns' I?J~llibrary modules(i) Iprocedural l~{input-output\] ~ --'\[expressionsJ ~expressions I",\]specification byI ~input-output IJ, .11  "~expr essions I(2) I detection of ~ I  I/ ....\[ insuf ficiency\]~$/~- -~subproblems I, / ,/~-q~requests of I"/I"" \]additional modules I / / ....(3) ~ ~ ...... ~ad'ditional modules I~ - ~intermediate I-jpr?gra.ms Ij~~ |object language,l(4) ~efinement,expansion~---Jexpansion mode I-~  ~ -~object programs\[Fig.l The processing by L-MAPSIn re f inement ,  L-MAPS t r ies  to un:i.fy theheading e l  an express ion  in a given spee i f J ca t ionand the corresponding heading of a l : ibrary module.I f  L-MAPS succeeds in the un i f i ca t ion ,  i t  const ructsa more detaJ \ ]ed descr ip t ion  of the spec i f i cat f ion  byusing the un i f ied  Operat ion Part  of the module .The refined part with a more detaileddescription can be substituted directly for theoriginal part in the specification or can be calledin a form of a subprogram as a procedure or a dosedsubroutine from the specification part.
One of themis selected by the user.The principal part of the above refinement isunification of a specification and the heading of alibrary module.
When the arguments of a module areconfined to the individual variables and the numberof arguments of a function is confined to a constantthe un i f i ca t ion  caa be car r ied  out; by an ord inaryun i f i ca t ion  of the f i r s t  order log ic .
0therwJse,  theun i f i ca t ion  procedure for  the second order ilogic i sneeded.L-MAPS has a un i f i ca t ion  procedure for  thesecond order log ic .
IIowever, the un~ f Jcat Jonprocedure i s  conf ined to a un i la tera l  un i f i ca t ionfrom a module to a spec i f i ca t ion  in which eachsymbol i s  J n terpreted  as a constant  under thecondi t ion  that  any subst i tu t ion  for  the symbol Jnthe spec i f i ca t ions  i s  forb idden.
Accorddagly, theun i f i ca t ion  procedure can be much s impl i f ied  forp ract i ca l  purpose.F ig.2 shows par ts  of a given spec i f i ca t ionwr i t ten  in the res t r i c ted  Engl ish for  a pars ingprogram of EngI ish sentences and F ig.3 shows a partof the generated formal spec i f i ca t ion .. .
.
, .
, , .
.
.
.
.
.
.
.
.
.
.
, .
.
.
.
.
, ?
ofor i from i to mjs:=jsearch handles from reducedsequences(i)by using reduction rules, andstore it in handle(l..k) and rule(\[..k)if k is greater than 0for n from 1 to kreduce handle(n) Jn reduced_sequences(i)by using rule(n), andstore the result innew_reduced_sequences(j).
.
.
, , .
.
.
o .
, .
.
.
.
.
.
.
.
.
.
, .
.
* .
.
.
.Fig.2 The informal specification for a parsingprogramFOR(COUNT:I,FROM:I,IO:M,OP: =(JS,J)HANDLE_SEARCH(SO:REDUCEDSEQUENCES(I),INSTR:REDUCTIONRULES,GOAL:(HARDLE(1..R),RULE(I..K)))BRANCNI(COND:>(K,O)OP:FOR(COUNT:N,FROM:I,TO:K,OP:HANDLE REDUCE(SO:REDUCEDSEQUENCES(I),OBJ:HANDLE(N),INSTR:RULE(N),GOAL:NEW_REDUCED_SEQUENCES(J))))Fig.3 A part of formal specifications\[,-MAPS re f ines  the formal spec i f i ca t ion  by re fer rdngto l ib rary  modules such as shown in Table \] andgenerates  a ref:ined spec i f i ca t ion  and the comment:shown in Fig.4.RULE APPI,Y(OBJ: REDUCTION_RULE, PARTIC : HANDLE,GOAL:REDUCED SYMBOL)BRANCH1 (COND: EQUAL(REDUCED_SYMBOL, NULL),OP:RETURN(FAIL) )FOR (COUNT: N, FROM: 1, TO : -  (STACK_POINTER,SYMBOL NUMBER OF HANDI,E),OP: COPY(OBJ: REDUCED_SEQUENCE(N), - -GOAL: NEW_REDUCED _SEQUENCE ( N ) ), .
.
.
.
.
.
.
.
~ .
.
.
.
.
o .
.
.
.
.
.
.
.
.
.
.
.
.
.F ig .4(a)  A part  of tile re f ined  spec i f i ca t ionapply t:he rnl.e to the handle, ands tore  t;he result;  in a reduced symbol.J f  the reduced_symbol Js nu l l  re turn( fa i l ) .for  n from t. t:o stack_po:inter-synlbol_numberof hand\] ecopy reducedsequence(n):into new reduced sequence(n) .. o .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
, .
.
.
, .
.
.
.F ig .4(b)  The comments of the re f ined spec i f i ca t ionin F ig .4 (a )In the refinement process global optimizationsare tried to be done at the user's option.
Some ofthem are rearrangement of conditional controlstatements and fusion of several iteration loops:i.nto one loop.6.
ConclusionThe translation system :is constructed on amodular basis consisting of 24 application modulesand 30 bas:\[c modules by refining and expandingspecifications by the aids of the L-MAPS systemconsisting of about 1000 lines of Lisp statements.The generated translation-system programs is abouti000 lines in both C language and Franz Lisp.Besides various advantages due to the modular:\[-zation, the translation speed is almost the same asthat of the old version in LISP.
Furthermore, thetranslation speed in C language is about three timesfaster than that of Franz Lisp at a compiler mode inEnglish-Japanese translation.Referencesl)Pratt,V.R.
: LINGOL-A Progress Report, IJCAI4,422-428 (1975).2)Nishida,F., Takamatsu,S.
and Kuroki,B.
:English-Japanese Translation throughCase-Structure Conversion, COLING-80, pp.447-454 (1980).3)Nishida,F.
and Takamatsu,S.
: Japanese-EnglishTranslation through Internal Expressions,COLING-82, pp.271-276 (1982).4)Nishida,F.
and Fujita,Y.
: Semi-Automatic ProgramRefinement from Specification Using LibraryModules, Trans?
of IPS of Japan, Voi.25,No.5, pp.785-793,(1984), (Written inJapanese).5)Tanaka,ll., Sato,T and Motoyoshi,F.
: PredictiveControl Parser: Extended LINGOL, 6th IJCAI,Vol.2, pp.868-870, (1979).651
