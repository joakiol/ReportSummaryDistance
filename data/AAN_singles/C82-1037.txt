COLING 82, J. Horeckp (ed.
)North-Holland Publishing Compa~?
Academia.
1982 /A SOFTWARE ENVIRONMENT FOR DEVELOPING NATURAL LAN~JAGEUNDERSTANDING SYSTEMFumio Mizoguchi and Shozo KondoDepartment of Industrial Administrat ionScience Univers i ty of TokyoNoda 278, ChibaJapanThis paper dea ls  with a software environmentfor developing the natural language understandingsystem.
The system called Mult i -Layered SoftwareEnvironment ( MLSE ) is proposed for providing adesigner of a language understanding system withwide varieties of design alternatives in softwarecomponents which derive from ComputationalLinguistics.
The MLSE is a collection of modulepackages for building the tools for languageunderstanding system.
That is, by integrating theComputational Linguistics methods into the MLSEscheme, we have emphasized the layered approach tobui ld the software environment as the basis fordeveloping the language understanding system.
Inorder to i l lustrate the strategy of the MLSEscheme, we have discussed the case study fordesigning Question and Answering system.
BasedupOn this case study, we have developed a newlanguage understanding system called Japanese Q &A system ( JQAS ) which was a product of the MLSEscheme.
The MLSE has implemented in variety ofLISPs such as Inter-Lisp on DEC-20 and Lisp F3 onIBM370.The JQAS has domain specif ic Q & A systemfor computer documentation and explanation system.I NTRODU CTI ONThis paper is focussed on the necessary softwareenvironment for designing Natural Language Understanding ( NLU )systems .
Here,the notion of software environment is to provide adesigner of an understanding system with wide varieties of designalternatives in software components which derive from thecomputational l inguistics methods.
Therefore,the goal of thispaper is to propose a scheme for the software environment which isappropriate for the design of a NLU system.
In order toaccomplish this goal, the Mult i -Layered Software Environment (MLSE ) which we propose in this paper is described and implementedfor the development of a NLU system.In order to bui ld a NLU program,we must formulate theproblem to fit the existing tools of Knowledge Engineering, orbui ld the tools that will be applicable to the problem.
For  thispurpose, there have been a number of attempts to support thesedesign activities such as E-LINGOL and ATN.
As for knowledgerepresentation, KRL, FRL, Unit  and RLL are proposed as generalpurpose semantic representation systems.
If the tools for NLU233234 F. MIZOGUCHI and S. KONDOsystems are su i table  to the problem domain, the necessary  task ofthe designer is to select  the best  tool among them and toformulate  the proble m in terms of the format which are spec i f iedin the tool.
Problably,  this design process is h ighly dependentupon the sof tware or tool which is appl ied to the problem.
Then,the design act iv i t ies  wil l  focus on how to formulate  the "DomainSemant ic"  in NLU.SOFTWARE ENVIHON~.ENTThe present  study proposed to support  the design of naturallanguage unders tand ing  system by cons ider ing the fo l lowingcomponents.i.
As the bas ic  implementat ion  language, we select  Lisp F3wr i t ten in FORTRAN which is not machine dependent.
Our comput ingfac i l i t ies  are both IBM 3031 of the Sc ience Un ivers i ty  of Tokyoand M200 of the Tokyo Un ivers i ty  of Computer  Center.
However,  theimplementat ion  is carr ied out by  In ter -L i sp  of DEC-20.2.
The necessary  Lisp funct ions are deve loped by the F3users.
As a result,  the user  of Lisp F3 can extend the fac i l i t iesof Lisp funct ion  to meet his requirements.
The Lisp system atthis stage inc ludes the same level of Inter-L isp.3.
In order to support  the coding and debugging, we havedes igned the pret typr in t  and zoom editor  as usefu l  funct ions.These funct ions are cons idered as the pr imi t ive  funct ions fordeveloping the modules l ibrary.4.
There are a number of module  programs which are furtherdeveloped into sub-components  of the Computat iona l  L inguist ic .These programs are main ly  parser, generator  and semant icrepresentat ion  system.5.
The natural  language unders tand ing  system,espec ia l ly ,Quest ion  & Answer ing  system is deve loped by combining thesemodules with schedul ing  funct ion which is ca l led Agenda.There fore , the  design of Agenda is important  part  for developingthe var ious control  s t ructures which deal wi th  language process-ing.TO develop these several  components,  we have prepared  thescheme cal led MLSE which is shown in F ig.
l .
MLSE consists of f ivelayers which correspond to the above components.The main layers f rom CLL to UFL  in F ig .
l  are the basis fordeveloping the rest of two layers which are regarded as a toollevel for natural  language unders tand ing  system.
In case of aModule  Package Layer( MPL ), there are two kinds of programpackages.
One is a co l lect ion of module  programs for patternmatchers which are fur ther  served as components of parser,generator  and F rame base system.
These pattern match ing modulescan treat a var iety  of data structures f rom Lisp bas ic  data touser def ined data such as F rame and semant ic  nets.
The other isder ived f rom the pre-ex is t ing  tools such as natural  languageinter face and knowledge representat ion  system.
In this respect,we have deve loped ATN base semant ic  nets system for Japanese.Therefore,  MPL is a large co l lect ion of tool module program fromcomponents to tool levels.
These modules are cons is tent  in codingstyle which is usefu l  for a not ion of module l ibrary.The top level of the layer is ca l led Language Unders tanderLayer ( LUL ) which is bu i l t  as domain spec i f i c  languageprocess ing system.
The LUL is the language system which isimplemented by us ing the components of MPL with user 's  def inedmain program.
That is, by us ing the package programs f rom MPL, weSOFTWARE ENVIRONMENT FOR AN NLU SYSTEM 235can deve lop  the domain  spec i f i c  too l  fo r  the language process ingsystem.
In  the  scheme,  LUL  is in tegrated  in to  the spec i f i cknowledge  base  sys tems such  as Sys tem- l ,  Sys tem-2  ... and  so  on.The  sys tem cor responds  to the ac tua l  Q & A system.The  present  imp lementat ion  is car r ied  out  fo r  des ign ingJapanese  Q & A sys tem for  ins t ruc t ing  computer  documentat ionsystem.
That  is, JQAS is a k ind  of ins t ruc t iona l  sys tem forsuppor t ing  the user ' s  documentat ion  and  re t r ieva l  of necessaryin fo rmat ion  on MLSE programs.l~%gu~je :3nderstander i~wer/ ,  ( r /('.~L) Language System designerPrOCessor f l  _ _  f l  ComputationalLisp_FunctionLinguistics Progr~nsF~P~ ,h~F- -  .h Ioti,..~=ti= / Q---o-O ,~ o/oti,...~.o~.~ ~ v ~ ~ EDITF  , EDITS , PP ~ gOON!DE , DFa,lqic FUnctiC., 0 I ?
fO\ ~0 prj2aiti%~-Fu~ctior~/A  \2!
\ 7 "?=-""I 1 ,  ,CAR , I I ,  R , O0~lS ,f t r l "  , G '~P .
.
.
.. .
.
.
.
.
.
.
.
.
.
k .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.C~oeLanqu,Ne I.~y~r F3-Lisp or ( Inter-Lisp , MAC-Lisp )Fig.l A Sr~ne for Mult/-l~yered Software Environment236 F. MLZOGUC~ and S. KONDOSol t~'4~e i'ackage\( LISP functions )Module Pr~graus for :Parsing SystemNatural Language InferenceeslgneII ~ Donain SpecificControl Mechanism(Knowledge Base-2 ) MossagosList of VariableContent of FunctionDate of codingMOdification DateCodeModule LibraryName of Function ~ Core + Modules~Tool of DomainTest and !lModification PhaseFig.2 Design Process for NLU SystemSOFTWARE ENVIRONMENT FOR AN NLU SYSTEM 237DESIGN PROCESSThe design process within MLSE is described by the schemewhich is shown in Fig.2.
This scheme is obtained from thegeneral ization of the design process in an interactive system byintroducing the notion of " shared package user's group " thathave the common files and uti l ize the basic componets of a NI/Jprogram.
As is shown in Fig.2, the activities are divided intothree parts.The first is program packages which consist of variousprogram modules for computational l inguistic methods.
Thesemodules include the components for a paser and a knowledgerepresentation system.The second is the shared package user's group thatdevelops cooperatively the NLU system.
The communication amongthe group is made by the use of a mail system.The third corresponds to the construction of NLU system byusing the modules programs.
This implementation is carried out bycombining the package into the core program which fits the purposeof the NLU system.
If there are  some changes in the packageprogram,then the user must accept the message on the codemodif ication by documentation.The entire design process is usual ly step by step in orderto meet the requirement of a given problem domain.
Therefore,there are a number of messages passing among the designers toaccomplish the knowledge base system.
This feedback loop isdescribed in terms of a testing and modif ication phase in Fig.2.Probably, the main activities of this process are to document themo~11e library which is  a collection of LISP code, name offunction, list of variable,coding date and so on.
By looking atthese documentations, the designer can bui ld the domain specif ictool without constructing the common programs for a NLU system.CASE STUDY TO DEVELOP SIMPLE AGENDA SYSTEMIn this section, we shall show details of how to bui ld thetools by using components within the MLSE scheme?
The tools thatwe have selected as case studies are a design of various Agendasystems?
We believe that agenda is one of the important systemfor bui lding a NLU system.Let us start with the first example of simple agenda systemwhich is shown in Fig.3.
In this flow chart, the agenda systemoperates within a control mechanism called the matching-act cycle.In matching, it finds the rule to be executed, and in action itexecutes this rule which is described by the action sides of therule form.
The matching-act cyle is repeated until either no rulecan be found or an action element of rule will stop the process-ing.
The LISP code of this f low chart is shown in Fig.3.
Thedefinition called PS-TOP is the function for dealing with thematching-act cycle in the agenda system.
Although this codingexample is simple, the design of agenda system is started in thisway.
In this coding, the other functions are not included, but itis clear in order to show the Control structure of agenda system.Therefore, this example is regarded as the basic component ofagenda system.238 F. MIZOGUCHI and S. KONDOReturn tothe first rule set.I I ~=~ ~  "i" =\[ Replace Jbynext rule set.<PS-TOP( LAMBDA NIL(* PS-TOP CONTROLS SYSTEM FLOW OF puRE PRODUCTION SYSTEM)(PROG (RULES MODEL RULES* DB RULE RULE-NAME)LOOP1(START)LOOP2(SETQ RULES* RULES)LOOP3<COND ( (NULL RULES*)(COND ((END) (GO LOOP1)) {T (RETURN N IL>(SETQ RULE (CAR RULES*))(SET~ RULE-NAME (CAR RULE)) :(* IF PATTERN-MATCH-DB RETURNS TRUE , ACTIONS OF THE MATCHED RULEIS ACTIVATED)(COND ( (PATTERN-MATCH-DB (CADR RULE) )(ACTIVATE-ACTIONS (CAR (CDDDR RULE) ) )(PRINT-RESULT)(GO LOOP2) ) )(SETQ RULES* (CDR RULES*))(GO LOOP3) ) ) >F ig .3  A f low chart for control  s t ructure  of a s imple  agenda systemand LISP codeCONCLUSIONAS for the scheme of sof tware env i ronment  to meet  therequi rements  for a design of NLU sys tem,  we have proposed  a f ivelayered env i ronment  which has h ierarchica l ,  mul t i - leve l  s t ructuresof sof tware systems.
The scheme is ca l led MLSE and thesecharacter is t ics  are fo l lowing:i.
There exists the core language which served as theassembly  language in NLU systems.
In this case, LISP is selected.2.
In case of des igning the NLU systems, the u t i l i tyfunct ions such as s t ructura l  and zoom editor  are some of theimportant  funct ions.
In this respect,  L ISP is a l ready deve lopedin these funct ions.
These fac i l i t ies  are important  to develop themodule  packages.3.
There exists a number of NLU module  packages which  may befur ther  used  as the components of tools.We be l ieve that these three character is t ics  are app l icab lefor des igning NLU system.REFERENCEWinograd ,T .
"Language as a cogni t ive process"Read ing ,Mass .
:Add ison-Wes ley , (draf t ) .
