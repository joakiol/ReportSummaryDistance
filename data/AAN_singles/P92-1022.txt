An Alternative Conception ofTree-Adjoining Derivation*Yves SchabesDepartment of Computer andInformation ScienceUniversity of PennsylvaniaPhiladelphia, PA 19104Stuart M. ShieberAiken Computation LaboratoryDivision of Applied SciencesHarvard UniversityCambridge, MA 02138Abst rac tThe precise formulation of derivation for tree-adjoining grammars has important ramificationsfor a wide variety of uses of the formalism, fromsyntactic analysis to semantic interpretation andstatistical language modeling.
We argue that thedefinition of tree-adjoining derivation must be re-formulated in order to manifest he proper linguis-tic dependencies in derivations.
The particularproposal is both precisely characterizable, througha compilation to linear indexed grammars, andcomputationally operational, by virtue of an ef-ficient algorithm for recognition and parsing.1 In t roduct ionIn a context-free grammar, the derivation of astring in the rewriting sense can be captured ina single canonical tree structure that abstracts allpossible derivation orders.
As it turns out, thisderivation tree also corresponds exactly to the hi-erarchical structure that the derivation imposes onthe str!ng, the derived tree structure of the string.The formalism of tree-adjoining grammars (TAG),on the other hand, decouples these two notions ofderivation tree and derived tree.
Intuitively, thederivation tree is a more finely grained structure*The authors are listed in alphabetical order.
The firstauthor was supported in part by DARPA Grant N0014-90-31863, ARO Grant DAAL03-S9-C-0031 and NSF GrantIRI90-16592.
The second author was supported in part byPresidential Young Investigator award IRI-91-57996 fromthe National Science Foundation.
The authors wish tothank Aravind Joshi for his support of the research, andAravind Joshi, Anthony Kroeh, Fernando Pereira, andK.
Vijay-Shanker for their helpful discussions of the issuesinvolved.
We are indebted to David Yarowsky for aid inthe design of the experiment mentioned in footnote 5 andfor its execution.167than the derived tree, and as such can serve as asubstrate on which to pursue further analysis ofthe string.
This intuitive possibility is made man-ifest in several ways.
Fine-grained syntactic anal-ysis can be pursued by imposing on the deriva-tion tree further combinatoriM constraints, forinstance, selective adjoining constraints or equa-tional constraints over feature structures.
Statis-tical analysis can be explored through the speci-fication of derivational probabilities as formalizedin stochastic tree-adjoining rammars.
Semanticanalysis can be overlaid through the synchronousderivations of two TAGs.All of these methods rely on the derivation treeas the source of the important primitive relation-ships among trees.
The decoupling of derivationtrees from derived trees thus makes possible amore flexible ability to pursue these types of anal-yses.
At the same time, the exact definition ofderivation becomes of paramount importance.
Inthis paper, we argue that previous definitions oftree-adjoining derivation have not taken full ad-vantage of this decoupling, and are not as appro-priate as they might be for the kind of furtheranalysis that tree-adjoining analyses could makepossible.
In particular, the standard definition ofderivation, due to Vijay-Shanker (1987), requiresthat elementary trees be adjoined at distinct nodesin elementary trees.
However, in certain cases,especially cases characterized as linguistic modi-fication, it is more appropriate to allow multipleadjunctions at a single node.In this paper, we propose a redefinition of TAGderivation along these lines, whereby multiple aux-iliary trees of modification can be adjoined at asingle node, whereas only a single auxiliary treeof predication can.
The redefinition constitutes anew definition of derivation for TAG that we willrefer to as extended erivation.
In order for sucha redefinition to be serviceable, however, it is nec-essary that it be both precise and operational.
Inservice of the former, we provide a rigorous peci-fication of our proposal in terms of a compilationof TAGs into corresponding linear indexed gram-mars (LIG) that makes the derivation structureexplicit.
With respect o the latter, we show howthe generated LIG can drive a parsing algorithmthat recovers, either implicitly or explicitly, theextended erivations of the string.The paper is organized as follows.
First, we re-view Vijay-Shanker's standard definition of TAGderivation, and introduce the motivation for ex-tended erivations.
Then, we present he extendednotion of derivation informally, and formalize itthrough the compilation of TAGs to LIGs.
Theoriginal compilation provided by Vijay-Shankerand Weir and our variant for extended erivationsare both decribed.
Finally, we briefly mention aparsing algorithm for TAG that recovers extendedderivations either implicitly or explicitly, and dis-cuss some issues surrounding it.
Space limitationspreclude us from presenting the algorithm itself,but a full description is given elsewhere (Schabesand Shieber, 1992).2 The  Standard  Def in i t ion  ofDer ivat  ionTo exemplify the distinction between standard andextended erivations, we exhibit the TAG of Fig-ure 1.
This grammar derives some simple nounphrases uch as "roasted red pepper" and "bakedred potato".
The former, for instance, is associ-ated with the derived tree in Figure 2(a).
The treecan be viewed as being derived in two ways 1Dependent :  The auxiliary tree fifo is adjoinedat the root node (address e) of fire.
The re-sultant tree is adjoined at the root node (ad-dress e) of initial tree ap~.
This derivation isdepicted as the derivation tree in Figure 3(a).Independent :  The auxiliary trees fir?
and fireare adjoined at the root node of the initialtree ape.
This derivation is depicted as thederivation tree in Figure 3(b).In the independent derivation, two trees are sepa-rately adjoined at one and the same node in theinitial tree.
In the dependent derivation, on theother hand, one auxiliary tree is adjoined to the1 As is s tandard  in the TAG l iterature we disallow ad-junct ion at the foot nodes of auxil iary trees.168NP NPI IN N1 Ipotato pepperNAdj N*Iroasted(%) (%) (g.,)N NAdj N* Adj N*1 ("red bakedFigure 1: A sample tree-adjoining grammarNP NPI IN NAdj N Adj Nroasted Adj N red Adj Ni I I Ired pepper roasted pepper(a) (b)Figure 2: Two trees derived by the grammar ofFigure 1g, %(a) (b)Figure 3: Derivation trees for the derived tree ofFigure 2(a) according to the grammar of Figure 1other, the latter only being adjoined to the initialtree.
We will use this informal terminology uni-formly in the sequel to distinguish the two generaltopologies of derivation trees.The standard definition of derivation, as codifiedby Vijay-Shanker, estricts derivations so that twoadjunctions cannot occur at the same node in thesame elementary tree.
The dependent notion ofderivation is therefore the only sanctioned eriva-tion for the desired tree in Figure 2(a); the inde-pendent derivation is disallowed.
Vijay-Shanker'sdefinition is appropriate because for any indepen-dent derivation, there is a dependent derivation ofthe same derived tree.
This can be easily seen inthat any adjunetion of/32 at a node at which anadjunction of/31 occurs could instead be replacedby an adjunction of/32 at the root of/31.The advantage of this standard definition ofderivation is that a derivation tree in this normalform unambiguously specifies a derived tree.
Theindependent derivation tree on the other hand isambiguous as to the derived tree it specifies inthat a notion of precedence of the adjunctions atthe same node is unspecified, but crucial to thederived tree specified.
This follows from the factthat the independent derivation tree is symmetricwith respect o the roles of the two auxiliary trees(by inspection), whereas the derived tree is not.By symmetry, therefore, it must be the case thatthe same independent derivation tree specifies thealternative derived tree in Figure 2(b).3 Mot ivat ion  for ExtendedDer ivat ionsIn the absence of some further interpretation ofthe derivation tree nothing hinges on the choiceof derivation definition, so that the standard ef-inition is as reasonable as any other.
However,tree-adjoining rammars are almost universallyextended with augmentations that make the issueapposite.
We discuss three such variations here, allof which argue for the use of independent deriva-tions under certain circumstances.3.1 Add ing  Ad jo in ing  Const ra in tsAlready in very early work on tree-adjoining gram-mars (Joshi et al, 1975) constraints were allowedto be specified as to whether a particular auxiliarytree may or may not be adjoined at a particularnode in a particular tree.
The idea is formulatedin its modern variant as selective-adjoining con-straints (Vijay-Shanker and Joshi, 1985).
As anapplication of this capability, we consider the re-mark by Quirk et al (1985, page 517) that "di-rection adjuncts of both goal and source can nor-mally be used only with verbs of motion", whichaccounts for the distinction between the followingsentences:(1)a. Brockway escorted his sister to the annualcotillion.b.
#Brockway resembled his sister to the an-nual cotillion.This could be modeled by disallowing through se-lective adjoining constraints he adjunction of theelementary tree corresponding toa to adverbial atthe VP node of the elementary tree correspondingto the verb resembles.
2 However, the restrictionapplies even with intervening (and otherwise ac-ceptable) adverbials.(2)a.
Brockway escorted his sister last year.b.
Brockway escorted his sister last year tothe annual cotillion.(3)a.
Brockway resembled his sister last year.b.
#Brockway resembled his sister last year tothe annual cotillion.Under the standard efinition of derivation, thereis no direct adjunction in the latter sentence ofthe to tree into the resembles tree.
Rather, it isdependently adjoined at the root of the elemen-tary tree that heads the adverbial last year, thelatter directly adjoining into the main verb tree.To restrict both of the ill-formed sentences, then,a restriction must be placed not only on adjoining2Whether  the adjunct ion occurs at the VP node or theS node is immaterial  to the argtnnent.169(4)a.b.(5)a.b.(6)a.
*b.
*the goal adverbial in a resembles context, but alsoin the last year adverbial context.
But this con-straint is too strong, as it disallows entence (2b)above as well.The problem is that the standard derivationdoes not correctly reflect he syntactic relation be-tween adverbial modifier and the phrase it modi-fies when there are multiple modifications in a sin-gle clause.
In such a case, each of the adverbialsindependently modifies the verb, and this shouldbe reflected in their independent adjunction at thesame point.
But this is specifically disallowed in astandard erivation.It is important to note that the argument ap-plies specifically to auxiliary trees that correspondto a modification relationship.
Auxiliary trees areused in TAG typically for predication relations aswell, 3 as in the case of raising and sentential com-plement constructions.
4 Consider the followingsentences.
(The brackets mark the leaves of thepertinent rees to be combined by adjunction inthe assumed analysis.
)Brockway conjectured that Harrisonwanted to escort his sister.\[Brockway conjectured that\] \[Harrisonwanted\] [to escort his sister\]Brockway wanted to try to escort his sis-ter.\[Srockway wanted\] [to try\] \[to escort hissister\]Harrison wanted Brockway tried to escorthis sister.\[Harrison wanted\] [Brockway tried\] \[to es-cort his sister\]Assume (following, for instance, the analysis ofKroch and Joshi (1985)) that the trees associ-ated with the various forms of the verbs "try","want", and "conjecture" all take sentential com-plements, certain of which are tensed with overtsubjects and others untensed with empty subjects.The auxiliary trees for these verbs specify by ad-3We use the te rm 'predicat ion '  in its logical sense, thatis, for auxi l iary trees that  serve as logical predicates overthe  trees into which they  adjoin,  in contrast  o the te rm'sl inguist ic  sub-sense in which the argument  of the predicateis a l inguist ic  subject .4 The  d ist inct ion between predicat ive and  modif ier  treeshas  been proposed previous ly  for pure ly  l inguist ic reasonsby Kroch (1989), who refers to them as themat ic  and  ath-emat ic  trees, respectively.
The  arguments  presented herecan be seen as prov id ing fur ther  evidence for di f ferent iat ingthe two k inds  of auxi l iary  trees.170junction constraints which type of sentential com-plement hey take: "conjecture" requires tensedcomplements, "want" and "try" untensed.
Underthis analysis the auxiliary trees must not be al-lowed to independently adjoin at the same node.For instance, if trees corresponding to "Harrisonwanted" and "Brockway tried" (which both re-quire untensed complements) were both adjoinedat the root of the tree for "to escort his sister", theselective adjunction constraints would be satisfied,yet the generated sentence (6a) is ungrammatical.Thus, the case of predicative trees is entirely unlikethat of modifier trees.
Here, the standard notionof derivation is exactly what is needed as far as in-terpretation of adjoining constraints i concerned.In summary, the interpretation f adjoining con-straints in TAG is sensitive to the particular no-tion of derivation that is used.
Therefore, it can beused as a litmus test for an appropriate definitionof derivation.
As such, it argues for a nonstandard,independent, notion of derivation for modifier aux-iliary trees and a standard, dependent, notion forpredicative trees.3.2 Add ing  Sta t i s t i ca l  ParametersIn a similar vein, the statistical parameters ofa stochastic lexicalized TAG (SLTAG) (Resnik,1992; Schabes, 1992) specify the probability of ad-junction of a given auxiliary tree at a specific nodein another tree.
This specification may again beinterpreted with regard to differing derivations,obviously with differing impact on the resultingprobabilities assigned to derivation trees.
(In theextreme case, a constraint prohibiting adjoiningcorresponds to a zero probability in an SLTAG.The relation to the argument in the previous ec-tion follows thereby.)
Consider a case in whichlinguistic modification of noun phrases by adjec-tives is modeled by adjunction of a modifying tree.Under the standard efinition of derivation, mul-tiple modifications of a single NP would lead todependent adjunctions in which a first modifieradjoins at the root of a second.
As an example,we consider again the grammar given in Figure 1,that admits of derivations for the strings "bakedred potato" and "baked red pepper".
Specifyingadjunction probabilities on standard erivations,the distinction between the overall probabilitiesfor these two strings depends olely on the ad-junction probabilities of fire (the tree for red) intoapo and ape (those for potato and pepper, respec-tively), as the tree fib for the word baked is adjoinedin both cases at the root of fl~ in both standardderivations.
In the extended erivations, on theother hand, both modifying trees are adjoined in-dependently into the noun trees.
Thus, the overallprobabilities are determined as well by the prob-abilities of adjunction of the trees for baked intothe nominal trees.
It seems intuitively plausiblethat the most important relationships to charac-terize statistically are those between modifier andmodified, rather than between two modifiers.
5 Inthe case at hand, the fact that potatoes are morefrequently baked, whereas peppers are roasted,would be more determining of the expected overallprobabilities.Note again that the distinction between modi-fier and predicative trees is important.
The stan-dard definition of derivation is entirely appropriatefor adjunction probabilities for predicative trees,but not for modifier trees.3 .3  Add ing  Semant icsFinally, the formation of synchronous TAGs hasbeen proposed to allow use of TAGs in semanticinterpretation, atural language generation, andmachine translation.
In previous work (Shieberand Schabes, 1990), the definition of synchronousTAG derivation is given in a manner that requiresmultiple adjunctions at a single node.
The needfor such derivations follows from the fact that syn-chronous derivations are intended to model seman-tic relationships.
In cases of multiple adjunctionof modifier trees at a single node, the appropri-ate semantic relationships comprise separate mod-ifications rather than cascaded ones, and this isreflected in the definition of synchronous TAGderivation.
6 Because of this, a parser for syn-chronous TAGs must recover, at least implicitly,the extended erivations of TAG derived trees.5Intu i t ion is an  appropr iate  guide in the design of theSLTAG framework,  as the idea is to  set  up a l inguisti-cally plausible in f rast ructure  on top of which a lexically-based stat ist ical  model  can be bui lt .
In addit ion,  sugges-tive ( though certainly not  conclusive) evidence along theselines can be gleaned f rom corpora analyses.
For instance,  ina s imple exper iment  in which med ium frequency triples ofexact ly  the discussed form "(adjective) (adjective) (noun)"were examined,  the mean mutua l  in format ion between thefirst adject ive and  the noun  was found to be larger thanthat  between the two adjectives.
The  stat ist ical  assump-t ions beh ind the exper iment  do not  allow very robust  con-clusions to be drawn,  and  more work is needed along theselines.6The  impor tance  of the d ist inct ion between predicat iveand  modif ier  trees with respect  to how der ivat ions are de-f ined was not  apprec iated in the earlier work; der ivat ionswere taken to be of the  independent  variety in all cases.
Infuture work, we p lan to remedy this flaw.171Note that the independence of the adjunction ofmodifiers in the syntax does not imply that seman-tically there is no precedence or scoping relationbetween them.
As exemplified in Figure 4, the de-rived tree generated by multiple independent ad-junctions at a single node still manifests nestingrelationships among the adjoined trees.
This factmay be used to advantage in the semantic half ofa synchronous tree-adjoining rammar to specifythe semantic distinction between, for example, thefollowing two sentences: 7(7)a. Brockway paid for the tickets twice inten-tionally.b.
Brockway paid for the tickets intention-ally twice.We hope to address this issue in greater detail infuture work on synchronous tree-adjoining gram-mars.4 Informal Specification ofExtended DerivationsWe have presented several arguments that thestandard notion of derivation does not allow foran appropriate specification of dependencies tobecaptured.
An extended notion of derivation isneeded that.
Differentiates predicative and modifier auxil-iary trees;2.
Requires dependent derivations for predica-tive trees;3.
Requires independent derivations for modifiertrees; and4.
Unambiguously specifies a derived tree.Recall that a derivation tree is a tree with un-ordered arcs where each node is labeled by an el-ementary tree of a TAG and each arc is labeledby a tree address pecifying a node in the parenttree.
In a standard derivation tree no two siblingarcs can be labeled with the same address.
In anextended derivation tree, however, the conditionis relaxed: No two sibling arcs to predicative treescan be labeled with the same address.
Thus, forany given address there can be at most one pred-icative tree and several modifier trees adjoined atrWe are indebted to an  anonymous  reviewer for ra is ingthis issue crisply th rough examples  imi lar  to those givenhere.T(a) Co) ~N--N*~AFigure 4: Schematic extended erivation tree andassociated erived treethat node.
So as to fully specify the output derivedtree, we specify a partial ordering on sibling arcsby mandating that arcs corresponding to modifiertrees adjoined at the same address are treated asordered left-to-right.
However, all other arcs, in-cluding those for predicative adjunctions are leftunordered.A derivation tree specifies a derived tree througha bottom-up traversal (as is standard since thework of Vijay-Shanker (1987)).
The choice of aparticular traversal order plays the same role aschoosing a particular rewriting derivation orderin a context-free grammar - -  leftmost or right-most, say - -  in eliminating spurious ambiguity dueto inconsequential reordering of operations.
Anextended derivation tree specifies a derived treein exactly the same manner, except that theremust be a specification of the derived tree spec-ified when several trees are adjoined at the samenode.Assume that in a given tree T at a particularaddress t, the predicative tree P and the k mod-ifier trees M1, .
.
.
,  Mk (in that order) are directlyadjoined.
Schematically, the extended erivationtree would appear as in Figure 4(a).
Associatedwith the subtrees rooted at the k + 1 elementaryauxiliary trees in this derivation are k + 1 derivedauxiIiary trees (Ap and A1, .
.
.
,  Ak, respectively).
(The derived auxiliary trees are specified induc-tively; it is this sense in which the definition cor-responds to a bottom-up traversal.
)There are many possible trees that might be en-tertained as the derived tree associated with thederivation rooted at T, one for each permutation172of the k + 1 auxiliary trees.
Since the ordering ofthe modifiers in the derivation tree is essentiallyarbitrary, we can fix on a single ordering of thesein the output tree.
We will choose the ordering inwhich the top to bottom order in the derived treefollows the partial order on the nodes in the deriva-tion tree.
Thus A1 appears higher in the tree thanA2, A2 higher than A3 and so forth.
This much isarbitrary.The choice of where the predicative tree goes,however, is consequential.
There are k + 1 possiblepositions, of which only two can be seriously main-tained: outermost, at the top of the tree; or inner-most, at the bottom.
We complete the (informal)definition of extended erivation by specifying thederived tree corresponding to such a derivation tomanifest outermost predication as depicted in Fig-ure 4(b).Both linguistic and technical consequences ar-gue for outermost, rather than innermost, predi-cation.
Linguistically, the outermost method spec-ifies that if both a predicative tree and a modifiertree are adjoined at a single node, then the pred-icative tree attaches "higher" than the modifiertree; in terms of the derived tree, it is as if thepredicative tree were adjoined at the root of themodifier tree.
This accords with the semantic in-tuition that in such a case, the modifier is modify-ing the original tree, not the predicative one.
(Thealternate "reading", in which the modifier modi-fies the predicative tree, is still obtainable underan outermost-predication standard by having themodifier auxiliary tree adjoin at the root node ofthe predicative tree.)
In contrast, the innermost-predication method specifies that the modifier treeattaches higher, as if the modifier tree adjoined atthe root of the predicative tree and was thereforemodifying the predicative tree, contra semantic in-tuitions.From a technical standpoint, the outermost-predication method requires no changes to theparsing rules to be presented later, but only a sin-gle addition.
The innermost-predication methodinduces ome subtle interactions between the orig-inal parsing rules and the additional one, necessi-tating a much more complicated set of modifica-tions to the original algorithm.
(In fact, the com-plexities in generating such an algorithm consti-tuted the precipitating factor that led us to reviseour original, innermost-predication, attempt at re-defining tree-adjoining derivation.
)5 Formal  Spec i f i ca t ion  o f  Ex -tended Der ivat ionsIn all three application areas of TAGs, the needis evidenced for a modified notion of derivationthat retains the dependent notion of derivation forpredicative trees but mandates independent ad-junction for modifier trees.
A formal definitionof extended erivation can be given by means of acompilation of tree-adjoining grammars into linearindexed grammars.
We discuss such a compilationin this section.
This compilation is especially use-ful as it can be used as the basis for a parsing al-gorithm that recovers the extended erivations forstrings.
The design of the algorithm is the topicof Section 6.Linear indexed grammars (LIG) constitute agrammatical framework based, like context-free,context-sensitive, and unrestricted rewriting sys-tems, on rewriting strings of nonterminal and ter-minal symbols.
Unlike these systems, linear in-dexed grammars, like the indexed grammars fromwhich they are restricted, allow stacks of markersymbols, called indices, to be associated with thenonterminal symbols being rewritten.
The linearversion of the formalism allows the full index infor-mation from the parent to be used to specify theindex information for only one of the child con-stituents.
Thus, a linear indexed production canbe given schematically as:curred.
For these reasons, we use the technique inthis work.The compilation process that manifests thestandard efinition of derivation can be most eas-ily understood by viewing nodes in a TAG elemen-tary tree as having both a top and bottom compo-nent, identically marked for nonterminal category,that dominate (but may not immediately domi-nate) each other.
(See Figure 5.)
The rewriterules of the corresponding linear indexed gram-mar capture the immediate domination betweena bottom node and its child top nodes directly,and capture the domination between top and bot-tom parts of the same node by optionally allowingrewriting from the top of a node to an appropriateauxiliary tree, and from the foot of the auxiliarytree back to the bottom of the node.
The indexstack keeps track of the nodes that adjunction hasoccurred on so that the recognition to the left andthe right of the foot node will occur under identicalassumption of derivation structure.
In summary,the following LIG rules are generated:.
Immediate domination dominating foot: Foreach auxiliary tree node r/ that dominatesthe foot node, with children 01, ?
.
.
,  rl, .
.
.
.
, r/,,where r/a is the child that also dominates thefoot node, include a productionb\[..r/\] - , t\[,1\].., t\[o,-x\]t\[..,,\]t\[r/,+l\].-- t\[o,\]/o\[../3o\] --.
Nile1\].." N,-1\[/3,-1\]N,J..~3,\]U,+l \[/3,+d""" gk \[/3k\]The Ni are nonterminals, the/3/strings of indices.The ".." notation stands for the remainder of thestack below the given string of indices.
Note thatonly one element on the right-hand side, Ns, in-herits the remainder of the stack from the parent.
(This schematic rule is intended to be indicative,not definitive.
We ignore issues such as the option-ality of the inherited stack, how terminal symbolsfit in, and so forth.
Vijay-Shanker and Weir (1990)present a complete discussion.
)Vijay-Shanker and Weir (1990) present a way ofspecifying any TAG as a linear indexed grammar.The LIG version makes explicit the standard no-tion of derivation being presumed.
Also, the LIGversion of a TAG grammar can be used for recog-nition and parsing.
Because the LIG formalismis based on augmented rewriting, the parsing al-gorithms can be much simpler to understand andeasier to modify, and no loss of generality is in-.
Immediate domination not including foot:For each elementary tree node r/ that doesnot dominate a foot node, with childrenr / i , .
.
.
,  r/,~, include a productionb\[,\] --, t\[r/d...t\[,,\].
No adjunction: For each elementary tree noder/that is not marked for substitution or oblig-atory adjunction, include a production.
Start root of adjunction: For each elementarytree node r/on which the auxiliary tree/3 withroot node r k can be adjoined, include the fol-lowing production:t\[..,or\]5.
Start foot of adjnnction: For each elementarytree node r/on which the auxiliary tree fl with178Type 4 , ,~Type1/2 2 ~  ~ -b \ [ ; \ ]/ :Type $ /Figure 5: Schematic structure of adjunction with top and bottom of each node separatedfoot node r/!
can be adjoined, include the fol-lowing production:---.
b\[.
.
,f l6.
Start substitution: For each elementary treenode ~/marked for substitution on which theinitial tree a with root node qr can be substi-tuted, include the productionWe will refer to productions generated by Rule iabove as Type i productions.
For example, Type 3productions are of the form t\[..~/\] -* b\[..T/\].
For fur-ther information concerning the compilation seethe work of Vijay-Shanker and Weir (1990) andSchabes (1991).
For present purposes, it is suf-ficient to note that the method directly embedsthe standard notion of derivation in the rewritingprocess.
To perform an adjunction, we move (byRule 4) from the node adjoined at to the top ofthe root of the auxiliary tree.
At the root, ad-ditional adjunctions might be performed.
Whenreturning from the foot of the auxiliary tree backto the node where adjunction occurred, rewritingcontinues at the bottom of the node (see Rule 5),not the top, so that no more adjunctions can bestarted at that node.
Thus, the dependent atureof predicative adjunction is enforced because onlya single adjunction can occur at any given node.In order to permit extended erivations, wemust allow for multiple modifier tree adjunctionsat a single node.
There are two natural ways thismight be accomplished, asdepicted in Figure 6.174(a) predicativetreeFigure 6: Schematic structure of possible predica-tive and modifier adjunctions with top and bottomof each node separated1.
Modified start foot of adjunction rule: Allowmoving from the bottom of the foot of a mod-ifier auxiliary tree to the top (rather than thebottom) of the node at which it adjoined (Fig-ure 6b).2.
Modified start root of adjunction rule: Allowmoving from the bottom (rather than the top)of a node to the top of the root of a modifierauxiliary tree (Figure 6c).As can be seen from the figures, both of thesemethods allow recursion at a node, unlike the orig-inal method depicted in Figure 6a.
Thus multi-ple modifier trees are allowed to adjoin at a singlenode.
Note that since predicative trees fall underthe original rules, at most a single predicative treecan be adjoined at a node.
The two methods cor-respond exactly to the innermost- and outermost-predication methods discussed in Section 4.
Forthe reasons described there, the latter is preferred.In summary, independent derivation structurescan be allowed for modifier auxiliary trees by start-ing the adjunction process from the bottom, ratherthan the top of a node for those trees.
Thus, wesplit Type 4 LIG productions into two subtypesfor predicative and modifier trees, respectively.4a.
Start root of predicative adjunction: For eachelementary tree node r/on which the predica-tive auxiliary tree fl with root node fir can beadjoined, include the following production:-+4b.
Start root of modifier adjunction: For eachelementary tree node y on which the modi-fier auxiliary tree/~ with root node r/~ can beadjoined, include the following production:--,Once this augmentation has been made, we nolonger need to allow for adjunctions at the rootnodes of modifier auxiliary trees, as repeated ad-junction is now allowed for by the new rule 4b.Consequently, P~ules 4a and 4b must treat all mod-ifier auxiliary tree root nodes as if they have ad-joining constraints that forbid modifier tree ad-junctions that do not correspond to modificationof the tree itself.This simple modification tothe compilation pro-cess from TAG to LIG fully specifies the modifiednotion of derivation.
The recognition algorithmsfor TAG based on this compilation, however, mustbe adjusted to allow for the new rule types.1756 Recogn i t ion  and  Pars ingFollowing Schabes (1991), the LIG generated bycompiling a TAG can be used as the basis for Ear-Icy recognition.
Schabes's original method mustbe modified to respect he differences in compi-lation engendered by extended erivations.
Suchparsing rules, along with an extension that allowsbuilding of explicit derivation trees on-line as a ba-sis for incremental interpretation, have been devel-oped, and are presented in an extended version ofthis paper (Schabes and Shieber, 1992).
In sum-mary, the algorithm operates as a variant of Earleyparsing on the corresponding LIG.
The set of ex-tended derivations can subsequently be recoveredfrom the set of Earley items generated by the al-gorithm.
The resultant algorithm can be furthermodified so as to build an explicit derivation treeincrementally as parsing proceeds; this modifica-tion, which is a novel result in its own right, al-lows the parsing algorithm to be used by systemsthat require incremental processing with respectto tree-adjoining grammars.As a proof of concept, the parsing algorithmjust described was implemented in Prolog on topof a simple, general-purpose, agenda-based infer-ence engine.
Encodings of explicit inference rulesare essentially interpreted by the inference ngine.The Prolog database is used as the chart; itemsnot already subsumed by a previously generateditem are asserted to the database as the parserruns.
An agenda is maintained of potential newitems.
Items are added to the agenda s inferencerules are triggered by items added to the chart.Because the inference rules are stated explicitly,the relation between the abstract inference rulesdescribed in this paper and the implementation isextremely transparent.
Because the prototype wasimplemented asa meta-interpreter it is not partic-ularly efficient.
(In particular, the implementationdoes not achieve the theoretical O(n 6) bound oncomplexity, because of a lack of appropriate in-dexing.)
Code for the prototype implementationis available for distribution electronically from theauthors.7 Conc lus ionThe precise formulation of derivation for tree-adjoining grammars has important ramificationsfor a wide variety of uses of the formalism, fromsyntactic analysis to semantic interpretation andstatistical language modeling.
We have arguedthat the definition of tree-adjoining derivationmust be reformulated in order to take greatest ad-vantage of the decoupling of derivation tree andderived tree by manifesting the proper linguisticdependencies in derivations.
The particular pro-posal is both precisely characterizable, through acompilation to linear indexed grammars, and com-putationally operational, by virtue of an efficientalgorithm for recognition and parsing.ReferencesAravind K. Joshi, L. S. Levy, and M. Takahashi.1975.
Tree adjunct grammars.
Journal of Com-puter and System Sciences, 10(1).Anthony Kroch and Aravind K. Joshi.
1985.
Lin-guistic relevance of tree adjoining grammars.Technical Report MS-CIS-85-18, Department ofComputer and Information Science, Universityof Pennsylvania, April.Anthony Kroch.
1989.
Asymmetries in long dis-tance extraction in a tag grammar.
In M. Baltinand A. Kroch, editors, Alternative Conceptionsof Phrase Structure, pages 66-98.
University ofChicago Press.Randolph Quirk, Sidney Greenbaum, GeoffreyLeech, and Jan Svartvik.
1985.
A Comprehen-sive Grammar of the English Language.
Long-man.Philip Resnik.
1992.
Lexicalized tree-adjoininggrammar for distributional analysis.
To appearin Proceedings of the 14 th International Confer-ence on Computational Linguistics.Yves Schabes and Stuart M. Shieber.
1992.
Analternative conception of tree-adjoining deriva-tion.
Technical Report 08-92, Harvard Univer-sity.Yves Schabes.
1991.
Computational andmathematical studies of lexicalized grammars.Manuscript in preparation based on the author'sPhD dissertation (University of Pennsylvania,August 1990).Yves Schabes.
1992.
Stochastic lexicalized tree-adjoining grammars.
To appear in Proceedingsof the 14 th International Conference on Com-putational Linguistics.Stuart M. Shieber and Yves Schabes.
1990.
Syn-chronous tree-adjoining rammars.
In Pro-ceedings of the 13 th International Conference176on Computational Linguistics (COLING'90),Helsinki.K.
Vijay-Shanker and Aravind K. Joshi.
1985.Some computational properties of Tree Adjoin-ing Grammars.
In 23 ~d Meeting of the Associ-ation for Computational Linguistics, pages 82-93, Chicago, Illinois, July.K.
Vijay-Shanker and David J. Weir.
1990.
Poly-nomial parsing of extensions of context-freegrammars.
In Masaru Tomita, editor, CurrentIssues in Parsing Technologies, pages 191-206.Kluwer Accademic Publishers.K.
Vijay-Shanker.
1987.
A Study of Tree Ad-joining Grammars.
Ph.D. thesis, Departmentof Computer and Information Science, Univer-sity of Pennsylvania.
