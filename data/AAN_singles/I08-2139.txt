Netgraph ?
Making Searching in Treebanks EasyJi??
M?rovsk?Charles University in PragueFaculty of Mathematics and PhysicsInstitute of Formal and Applied LinguisticsMalostransk?
n?m.
25, 118 00 Prague 1, Czech Republicmirovsky@ufal.mff.cuni.cz1 IntroductionSearching in a linguistically annotated treebank isa principal task that requires a sophisticated tool.Netgraph has been designed to perform the search-ing with maximum comfort and minimum require-ments on its users.
Although it has been developedprimarily for the Prague Dependency Treebank 2.0(Haji?
et al 2006), it can be used with other tree-banks too, both dependency and constituent-struc-ture types, as long as the treebank is transformed toa suitable format.In  this  paper,  we present  Netgraph query  lan-guage and on many examples show how it can beused to search for frequent linguistic phenomena.In section 1 (after this introduction) we extreme-ly briefly  describe  the  Prague Dependency Tree-bank 2.0, just to make the examples in the subse-quent text more understandable.
In the next subsec-tion  we mention  the  history  of  Netgraph and itsproperties as a tool.In  section  2 we  offer  an  introduction  to  thequery language of Netgraph along with the idea ofmeta-attributes  and  what  they  are  good  for,  andpresent  linguistically  motivated  examples  ofqueries in the Prague Dependency Treebank.Finally, in  section 3 we offer some concludingremarks.1.1 Prague Dependency Treebank 2.0The Prague Dependency Treebank 2.0 (PDT 2.0,see Haji?
et al 2006, Haji?
2004) is a manually an-notated  corpus  of  Czech.
It  is  a  sequel  to  thePrague Dependency Treebank 1.0 (PDT 1.0,  seeHaji?
et al 2001a, Haji?
et al 2001b).The texts in PDT 2.0 are annotated on three lay-ers - the morphological layer, the analytical layerand the tectogrammatical layer.
The corpus size isalmost 2 million tokens (115 thousand sentences),although ?only?
0.8 million tokens  (49 thousandsentences) are annotated on all three layers.
By 'to-kens' we mean word forms, including numbers andpunctuation marks.On the morphological layer (Hana et al 2005),each token of every sentence is annotated with alemma (attribute m/lemma), keeping the base formof the token, and a tag (attribute m/tag), keepingits  morphological  information.
Sentence  bound-aries are annotated here, too.The analytical layer roughly corresponds to thesurface syntax of the sentence; the annotation is asingle-rooted dependency tree with labeled nodes(Haji?
et al 1997, Haji?
1998).
Attribute afun de-scribes the type of dependency between a depen-dent node and its governor.
The nodes on the ana-lytical layer (except for technical roots of the trees)also correspond 1:1 to the tokens of the sentences.The  order  of  the  nodes  from left  to  right  corre-sponds exactly to the surface order of tokens in thesentence (attribute  ord).
Non-projective construc-tions (that are quite frequent  both in Czech (Ha-ji?ov?
et  al.
2004)  and  in  some other  languages(see  Havelka 2007)) are allowed.The tectogrammatical layer captures the linguis-tic meaning of the sentence in its context.
Again,the  annotation  is  a  dependency tree  with labelednodes (see Haji?ov?
1998).
The correspondence ofthe nodes to the lower layers is more complex here.It is often not 1:1, it can be both 1:N and N:1.
Itwas shown in detail in M?rovsk?
(2006) how Net-graph deals with this issue.Attribute  functor describes  the  dependencybetween a dependent node and its governor.
A tec-945togrammatical lemma (attribute  t_lemma) is as-signed to every node.
Grammatemes, which keepadditional annotation, are rendered as a set of 16attributes  grouped  by  the  ?prefix?
gram (e.g.gram/verbmod for verbal modality).Topic  and  focus  (Haji?ov?
et  al.
1998)  aremarked  (attribute  tfa),  together  with  so-calleddeep word order reflected by the order of nodes inthe annotation (attribute deepord).Coreference relations between nodes of certaincategory types are captured (Ku?ov?
et al 2003),distinguishing also the type of the relation (textualor grammatical).
Each node has an identifier  (at-tribute  id)  that  is  unique  throughout  the  wholecorpus.
Attributes   coref_text.rf andcoref_gram.rf contain  ids  of  coreferentialnodes of the respective types.1.2 Netgraph as a ToolThe development of Netgraph started in 1998 as atopic  of  Ondru?ka's  Master's  thesis  (Ondru?ka1998), and has been proceeding along with the on-going annotations of the Prague Dependency Tree-bank 1.0 and later  the Prague Dependency Tree-bank 2.0.
Now it is a fully functional tool for com-plex searching in PDT 2.0 and other treebanks.Netgraph is  a  client-server  application that  al-lows multiple users to search the treebank on-lineand simultaneously through the Internet.
The serv-er (written in C) searches the treebank, which is lo-cated at the same computer or local network.
Theclient (written in Java2) serves as a very comfort-able graphical user interface and can be located atany node in the Internet.
The client exists in twoforms: as an applet and as a stand-alone applica-tion.
The applet version can be run from Netgraphhome page and searches  in PDT 2.0.
The stand-alone version can be downloaded from the samepage  and  can  connect  anonymously  to  PDT  2.0server.
More  information  can  be  found  on  Net-graph home page (http://quest.ms.mff.cuni.cz/net-graph).The client sends user queries to the server andreceives  results  from it.
Both  the  server  and theclient also can, of course, reside at the same com-puter.
Authentication by the means of login namesand passwords is provided.
Users can have variousaccess permissions.A detailed description of the inner architectureof Netgraph and of the communication between theserver  and the client was given in M?rovsk?, On-dru?ka and Pr?
?a (2002).Netgraph server requires the treebank in FS for-mat,  encoded in UTF-8.
A formal  description ofthe format can be found in Haji?
et al 2001a.
Net-graph query  language,  presented  in the  next  sec-tion, is an extension of FS format.2 Netgraph Query LanguageIn this section we give an introduction to Netgraphquery language.
We show on a series of exampleshow some frequent  linguistic  phenomena  can  besearched for.2.1 The Query Is a TreeThe query in Netgraph is a tree that forms a subtreein the result trees.
The treebank is searched tree bytree and whenever the query is found as a subtreeof a tree (we say the query and the tree match), thetree becomes part of the result.
The result is dis-played tree by tree on demand.
The query can alsoconsist of several trees joined either by AND or ORrelation.
In that case, all the query trees at the sametime (or at least one of the query trees, respective-ly) are required to match the result tree.The query has both a textual form and a graphi-cal form.
In the following text, we will use its tex-tual form for simple queries and its graphical form(or both forms) for more advanced queries.The syntax of the language is very simple.
In thetextual  form,  square  brackets  enclose a node,  at-tributes  (pairs  name=value) are separated by acomma, quotation marks enclose a regular expres-sion in a value.
Parentheses enclose a subtree of anode, brothers are separated by a comma.
In multi-ple-tree queries, each tree is on a new line and thefirst line contains only a single AND or OR.
Alterna-tive  values  of  an attribute,  as  well  as  alternativenodes,  are  separated  by  a  vertical  bar.
It  almostcompletes the description of the syntax, only onething (references)  will  be added in the followingsubsection.The simplest possible query (and probably of lit-tle interest on itself) is a simple node without anyevaluation:  [].
It matches all nodes of all trees inthe treebank, each tree as many times as how manynodes there are in the tree.
Nevertheless, we mayadd  conditions  on  its  attributes,  optionally  usingregular expressions in values of the attributes.
Thus946we may search e.g.
for all nodes that are Subjectsand nouns but not in first case:[afun=Sb, m/tag="N...[^1].
*"].We may notice here that regular expressions al-low  the  first  (very  basic)  type  of  negation  inqueries.More interesting queries usually consist of sev-eral nodes, forming a tree structure.
The followingexample  query  searches  for  trees  containing  aPredicate  that  directly  governs  a  Subject  and  anObject:[afun=Pred]([afun=Sb],[afun=Obj]).Please  note  that  there  is  no  condition  in  thequery on the order of the Subject and the Object,nor  on  their  left-right  position  to  their  father.
Itdoes  not prevent  other nodes  to  be directly  gov-erned by the Predicate either.2.2 Meta-AttributesThis  simple  query  language,  described  briefly  inonly a few examples, is quite useful but not power-ful  enough.
There  is  no  possibility  to  set  a  realnegation, no way of restricting the position of thequery in the result tree or the size of the result tree,nor the order of nodes can be controlled.
To allowthese and other things,  meta-attributes  have beenadded to the query system.Meta-attributes are not present in the corpus butthey pretend to be ordinary attributes and the useruses  them  the  same  way  like  normal  attributes.Their  names  start  with  an  underscore.
There  areeleven meta-attributes, each adding some power tothe query language, enhancing its semantics, whilekeeping  the  syntax  of  the  language on  the  samesimple  level.
We present  several  of  the  meta-at-tributes in this subsection, some others will be pre-sented  in  the  subsequent  section,  when  they  areneeded.
A  detailed  description  of  the  principalmeta-attributes was given in M?rovsk?
(2006).Coordination is a frequent phenomenon in lan-guages.
In PDT (and in most other treebanks, too)it is represented by a coordinating node.
To be ableto skip (and effectively ignore) the coordination inthe queries, we have introduced the meta-attribute_optional that  marks  an  optional  node.
Thenode then may but does not have to be in the result.If  we  are  interested,  for  example,  in  Predicatesgoverning Objects, we can get both cases (with co-ordination and without it) in one query using thismeta-attribute:[afun=Pred]([afun=Coord,_op-tional=1]([afun=Obj])).The Coordination becomes optional.
If there is anode between the Predicate and its Object in theresult  tree, it has to be the Coordination.
But theObject may also be a direct son of the Predicate,omitting  the  optional  Coordination.
The  picturedemonstrates  that  the  graphical  representation  ofthe  query  is  much more  comprehensible  than  itstextual version:There  is  a  group  of  meta-attributes  of  rathertechnical nature, which allow setting a position ofthe query in the result tree, restricting the size ofthe result tree or its part, and restricting number ofdirect sons of a node.
Meta attribute _depth con-trols the distance of a node from the root (usefulwhen searching for a phenomenon in subordinatedclauses, for  example),  _#descendants controlsnumber of nodes in the subtree of a node (usefule.g.
when searching for ?nice?
small examples ofsomething),  _#sons controls  number  of  (direct)sons of a node.Controlling number of direct sons (mainly in itsnegative sense) is important for studying valencyof words (Haji?ov?
and Panevov?
1984).
The fol-lowing example searches on the tectogrammaticallayer of PDT.
We want a Predicate that governs di-rectly an Actor and a Patient and nothing else (di-rectly):[functor=PRED,_#sons=2]([func-tor=ACT],[functor=PAT]).The graphical representation of the query is:If  we  replaced  PAT  with  ADDR,  we  mightsearch for errors in the evaluation, since the theory947forbids Actor and Addressee being the only partsof a valency frame.So far, we could only restrict number of nodes.But we often want to restrict a presence of a certaintype of node.
We want to specify that there is not anode of a certain quality.
For example, we mightwant to search (again on the tectogrammatical lay-er)  for  an  Effect  without  an  Origo  in  a  valencyframe.
The meta-attribute that allows this real typeof negation is called _#occurrences.
It controlsthe  exact number of occurrences of a certain typeof node, in our example of Origos:[functor=PRED]([functor=EFF],[functor=ORIG,_#occurrences=0])with graphical representation:It says that the Predicate has at least one son ?an Effect, and that the Predicate does not have anOrigo son.There is still one important thing that we cannotachieve with the meta-attributes presented so far.We cannot set any relation (other than dependen-cy) between nodes in the result trees (such as or-der, agreement in case, coreference).
All this canbe done using the meta-attribute _name and a sys-tem of references.
The meta-attribute  _name sim-ply names a node for a later reference from othernodes.Curly brackets enclose a reference to a value ofan attribute of the other node (with a given name)in the result tree.
This, along with the dot-referenc-ing inside the reference and some arithmetic possi-bilities, completes our description of the syntax ofthe query language from subsection 2.1.In the following example (back on the analyticallayer and knowing that attribute ord keeps the or-der of the nodes (~ tokens) in the tree (~ sentence))from left to right, we search for a Subject that is onthe right side from an Object (in the tree and alsoin the sentence):[afun=Pred]([afun=Sb,ord>{N1.ord}],[afun=Obj,_name=N1])with graphical representation:We have named the Object node N1 and speci-fied that ord of the Subject node should be biggerthan  ord of  the  N1 node.
If  we  usedord>{N1.ord}+5, we would require them to beat least five words apart.Meta-attribute  _#lbrothers  (_#rbrothers)  con-tains number of left (right) brothers of a particularnode in the result tree.
Thus, we can define that anode (e.g.
an Attribute) is the leftmost son of an-other node (e.g.
an Object):[afun=Obj]([afun=Atr,_#lbroth-ers=0]).Meta-attribute  _transitive defines a transi-tive  edge.
The following example  searches  for  averb  node  that  governs  transitively  another  verbnode:[m/tag="V.*"]([m/tag="V.*",_tran-sitive=true]).If we do not want them to be direct father andson, we have two possibilities:  Either we put an-other node without any evaluation in between themin the query:[m/tag="V.*"]([]([m/tag="V.*",_transitive=true]))with graphical representation:or, we can use meta-attribute _depth and refer-ences:[m/tag="V.*",_name=N1]([m/tag="V.*",_transitive=true,_depth>{N1._depth}+1])which  is  perhaps  a  little  bit  more  complex.
Thegraphical representation of the query is:948Using several meta-attributes  in one query canform a powerful  combination.
The following ex-ample searches for the rightmost list descendant ofa Predicate:[afun=Pred]([_transitive=true,_#sons=0,_name=N1],[_transi-tive=true,_#sons=0,ord>{N1.ord},_#occurrences=0])with graphical representation::The first transitive descendant of the Predicate isthe list (_#sons=0) we are looking for.
The sec-ond transitive descendant is a list that we do notwant to be in the result (with higher  ord).
There-fore, we set _#occurrences to zero.3 ConclusionWe have presented  Netgraph query  language,  itsbasics  and  also  its  advanced  techniques,  namelymeta-attributes, references and their combination.We have demonstrated that many linguistic phe-nomena can be searched for using this language.
Itcan  be  shown  (M?rovsk?
2008)  that  Netgraphquerying power outperforms the querying power ofTGrep  (Pito  1994),  which  is  a  traditional  (andnowadays  outdated)  treebank  searching  tool.
Onthe other hand, it  seems (it  has not been studiedthoroughly  yet)  that  Netgraph has  slightly  lessersearching  power  than  TGrep2  (Rohde  2005),which  can  use  any  boolean  combination  of  itssearching patterns.Acknowledgement    The research reported in thispaper was supported by the Grant Agency of theAcademy  of  Sciences  of  the  Czech  Republic,project IS-REST (No.
1ET101120413).ReferencesHaji?
J. et al 2006.
Prague Dependency Treebank 2.0.CD-ROM LDC2006T01, LDC, Philadelphia, 2006.Haji?
J.
2004.
Complex Corpus Annotation: The PragueDependency Treebank.
Jazykovedn?
?stav  ?.
?t?ra,SAV, Bratislava, 2004.Haji?
J., Vidov?-Hladk?
B., Panevov?
J., Haji?ov?
E.,Sgall P., Pajas P. 2001a.
Prague Dependency Tree-bank  1.0  (Final  Production  Label).
CD-ROM LD-C2001T10, LDC, Philadelphia, 2001.Haji?
J.,  Pajas  P.  and  Vidov?-Hladk?
B.
2001b.
ThePrague Dependency Treebank: Annotation Structureand  Support.
In  IRCS  Workshop  on  Linguisticdatabases, 2001, pp.
105-114.Hana J.,  Zeman D.,  Haji?
J.,  Hanov?
H.,  Hladk?
B.,Je?
?bek E. 2005.
Manual for Morphological Annota-tion, Revision for PDT 2.0.
?FAL Technical ReportTR-2005-27, Charles University in Prague, 2005.Haji?
J. et al 1997.
A Manual for Analytic Layer Tag-ging  of  the  Prague  Dependency  Treebank.
?FALTechnical Report TR-1997-03, Charles University inPrague, 1997.Haji?
J.
1998.
Building a Syntactically Annotated Cor-pus: The Prague Dependency Treebank.
In Issues ofValency and Meaning, Karolinum, Praha 1998, pp.106-132.Haji?ov?
E., Havelka J., Sgall P., Vesel?
K., Zeman D.2004.
Issues of Projectivity in the Prague Dependen-cy Treebank.
MFF UK, Prague, 81, 2004.Havelka  J.
2007.
Beyond  Projectivity:  MultilingualEvaluation of Constraints and Measures on Non-Pro-jective  Structures.
In  Proceedings  of  ACL  2007,Prague, pp.
608-615.Haji?ov?
E. 1998.
Prague Dependency Treebank: Fromanalytic  to  tectogrammatical  annotations.
In:  Pro-ceedings of 2nd TST, Brno, Springer-Verlag BerlinHeidelberg New York, 1998, pp.
45-50.Haji?ov?
E, Panevov?
J.
1984.
Valency (case) frames.In P. Sgall (ed.
): Contributions to Functional Syntax,Semantics  and  Language  Comprehension,  Prague,Academia, 1984, pp.
147-188.M?rovsk?
J.
2006.
Netgraph:  a  Tool  for  Searching inPrague Dependency Treebank 2.0.
In Proceedings ofTLT 2006, Prague, pp.
211-222.949Haji?ov?
E., Partee B., Sgall P. 1998.
Topic-Focus Ar-ticulation,  Tripartite  Structures  and  Semantic  Con-tent.
Dordrecht, Amsterdam, Kluwer Academic Pub-lishers, 1998.Ku?ov?
L.,  Kol??ov?-?ezn??kov?
V.,  ?abokrtsk?
Z.,Pajas  P.,  ?ulo  O.
2003.
Anotov?n?
koreference  vPra?sk?m  z?vislostn?m  korpusu.
?FAL  TechnicalReport  TR-2003-19,  Charles  University  in  Prague,2003.Ondru?ka R. 1998.
Tools for Searching in SyntacticallyAnnotated Corpora.
Master Thesis, Charles Univer-sity in Prague, 1998.M?rovsk?
J.,  Ondru?ka  R.,  Pr?
?a  D.  2002.
Searchingthrough Prague Dependency Treebank - Conceptionand Architecture.
In Proceedings of The First Work-shop on Treebanks and Linguistic Theories, Sozopol,2002, pp.
114--122.M?rovsk?
J.: Netgraph Home Page: http://quest.ms.mff.-cuni.cz/netgraphM?rovsk?
J.
2008.
Towards a Simple and Full-FeaturedTreebank Query Language.
In Proceedings of FirstInternational Conference on Global Interoperabilityfor Language Resources, Hong Kong, 2008, in print.Pito  R.  1994.
TGrep  Manual  Page.
Available  fromhttp://www.ldc.upenn.edu/ldc/online/treebank/Rohde D. 2005.
TGrep2 User Manual.
Available fromhttp://www-cgi.cs.cmu.edu/~dr/TGrep2/tgrep2.pdf950
