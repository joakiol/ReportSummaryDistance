Chart Parsing and Constraint ProgrammingFrank MorawietzSeminar flit SprachwissenschaftUniversifiit TfibingenWilhehnstr.
I 1372074 Tfibingen, Germanyfrank@s fs.
nphil, uni-tuebingen, deAbstractIn this paper, lmrsing-as-deduction and constraint pro-gramming are brought ogether to outline a procedure forthe speeitication of constraint-based chart parsers.
Foblowing the proposal in Shieber et al (1995), we showhow to directly realize tim inference rules tbr deductiveparsers as Constraint Handling Rules (Fr{ihwirlh, 1998)by viewing lhe items of a chart parser its constraints andlhe constraint base as a charl.
This allows the direct useof constraint resolution to parse sentences.1 I n t roduct ionThe parsing-as-deduction approach proposed in Pereiraand Warren (1983) and exlended in Shieber et al (1995)and the parsing schemala detincd in Sikkel (1997) arewell established parsing paradigms in computalional lin-guistics.
Their main slrengths are Iheir llexibility andlhe level of abstraction concerning control informal\]o,1inherenl in parsing algorithms, lVurlhermore, lhcy areeasily exlcnsible In more complex formalisms, e.g., at\]g-mcntcd phrase struclure rules or the ID/LP formal.Constraint Programming (CP) has been used in com-putational linguislics in several areas, for example in(typed) featut'e-lmsed systems (Smolka, 1995), or condiotional constraints (Matiasek, 1994), or adwmccd compi-lation techniques (G6tz and Meurcrs, 1997) or special-ized constraint solvers (Manandhar, 1994).
But noneof these approaches uses constraint programming tech-niques lo implement standard chart parsing algorithnlsdirectly in a constraint system.In this papel; I will bring these two tmmdigms to-gether by showing how to implement algorithn\]s fl'omthe parsing-as-deduction sctmme by viewing the parsingprocess as constraint propagation.The core idea is that the items of a conventional chartparser are constraints on labeled links between the wordsand positions of an input string.
Then tile inference rulesallow for the deduction of new constraints, again labeledand spanning parts of tim input siring, via constraintpropagation.
The resulting constraint store represents hechart which can be accessed to determine whether theparse was success fu l  or to reconstruct  a parse tree.While this ntay seem a trivial observation, it is not.iust another way of implementing deductive parsing inyet another language.
"file approach allows for a rapidand very flexible but at lhe same time uniform methodof implementation f all kinds of parsing algorithms (forconstraint-lmsed theories).
The goal is not necessarily tobuild tim fastest imrscr, but rather to build - for an ar-bitrary algorithm - a parser fast and pcrspict\]ously.
Forexample, the advantage of our approach compared to theone proposed in Shieber et al (1995) is that we do nothave to design a special dedt,ction engine and we do nothave In handle chart and agenda explicitly.
Furlhemmre,the process can be used in any constrainl-based formal-ism which allows for constraint propagation and there-fore can bc easily integrated into existing applications.The paper proceeds by reviewing Ihc parsing-as-deduction approach and a imrticular way of imple-menting constraint syslclns, Constraint Handling P, ules(CHR) as presented in l~rfihwir/h (1998).
Then it showshow to implement several parsing algorithms very natu-rally with constraint propagation rules before concludingwith an outlook on how 1o exteml the technique In moreadvanced applications.1.1 Pars ing  as DeductionAlthough I assume some familiarity with parsing-as-deduction, I will recall some basic delinitions for con-venience.
The nolations and dm three basic algorithmsare directly token from Shieber et al (t 995).As usual, strings w result from concalcnation o1' sym-bols from some alphal~et set ?, i.e., w C- E':.
We refert(i tile decomposition of such a siring into its alphabetsymbols with indices.
We lix this notation using w =Wl... uS,.
Further notational conventions are: i, j E N, nfor the length of the string to be parsed, A,B,C,... forarbilrary formulas or nonterminals, a b,c,.., for termi-nals, a for the empty string and o~,\[3,7,.., for strings ofterminals and nonterminals.
Formtflas used in parsingwill also be called items or edges.
A grammatical deduc-tion system or, in Sikkel's terminology a pal:ring schema,is defined as a set of deduction schemes and a set of ax-ioms.
These are given with the help of formula schematawhich contain (syntactic) me\]a-variables which are in-s\]an\]tared with concrete terms on application of tim rules.A deduction scheme R has t11o general formAI - .
-  A ,( side conditions on A \] .
.
.
A , ,  C )C551Table 1: Parsing algorithms as Grammatical Deduction SystemsBottom-Up Top-Down EarleyItemsAxiomGoalScanPredictComplete\[j,c~-\] \[j, ?
\[~1 \[i,j,A,o~* ~1\[o, ?
\] \[o, ?
Sl \[o, o, s', ?
s\]\[,,,s.\] \[,,, .\] \[0,,,,s',s.\]\[j, ot * \] \[j, * w.i+l ~\] \[i, j ,a, o~ * w.i+ |\[3\]\ [ j+  1,mvj+l "\]' \ [ j+  l, ?
\[3\] \[i,j+ I ,A,~wj+I * \[3\]~ (B___~ T ) \[i:j,a,o~.B~\] (B__+ T)\[j, ?
7\[3\] \[j, j, B, ?
3'\]\[k,j,n,Vo\](B ---+ y) \[i,j,A,aB \[3\] \[j, ae  ?
\]where the Ai and C arc formula schemata.
The Ai arecalled antecedents and C the consequence.
Note that de-duction schemes may refer to string positions, i.e., theindices within the input string, in their side conditions.Application of these schemata nd derivations of formu-las are then detined as in the Shieber et al article.
In-tuitively, parsing uses the deductive rules - if their an-tecedents and the side conditions are met - to infer newitems from the axioms and already generated items untilno new ones can be derived.
The parse was successful ifa goal item was derived.Therefore, all the parsing systems used in this paperare delincd by specifying a class of items, a set of ax-ioms, a set of inference rules and a subset of the items,the goals, For better eadability, I follow Shieber et al inusing the familiar dotted items for the presentation.
Thethree classical example algorithms we will use to illus-trate our technique are given in Tab.
1.
I assume famil-iarity with these algorithms.Unless specified differently, we assume that we aregiven a context-free grammar ~ = ( N, Z, S, P ) with non-terminals N, terminals Z, start symbol S and set o1' pro-ductions P. For Earley's algorithm we also assume a newstart symbol S' which is not in N. Each production is ofthe form A ----+ o~ with A G N, c~ E (NU Z)*.
For examplesI will use the simple PP-attachmcnt grammar ~ given inFig.
1 with the obvious sets of nonterminals and termi-nals, the start symbol S and productions P. It is left tothe reader to calculate xample derivations for the threealgorithms t'or a sentence such as John hit the dog withthe stick.1.2 Constraint Handling RulesThere are several constraint programming environmentsavailable.
The most recent and maybe the most tlexible isthe Constraint Handling Rules (CHR) package includedin SICStus Prolog (Friihwirth, 1998).
These systemsS ---+ NPVP V - -}  hitVP ----+ V NP \[ V NP PP PN ---+ JohnPP ~ PNP N ---+ dog\]stickNP - -+ PN \] Det N I P ---+ withNI ----+ N I N1 PP Det ----q theFigure 1: Example Grammar: PP-attachmentmaintain a constraint base or store which is continuallymonitored for possible rule applications, i.e., whetherthere is enough information present to successfully use arule to silnplify constraints or to derive new constraints.Whereas usually one deals with a tixed constraint domainand a specialized solver, CHR is an extension of the Pro-log language which allows for the specification of user-defined constraints and arbitrary solvers.
The strengfl~ ofthe CHR approach lies in the fact that it allows for mul-tiple (conjunctively interpreted) heads in rules, that it isflexible and that it is tightly and transparently integratedinto the Prolog engine.In CHR constraints are just distinguished sets of(atomic) formulas.
CHR allow the definition of rule setsfor constraint solving with three types of rules: Firstlysimplification rules (<=>)  which replace a number ofconstraints in the store with new constraints; secondlypropagation rules (==>)  which add new constraintsto the store in case a number of constraints is alreadypresent; and thirdly "simpagation" rules (<=> in com-bination with a \ in the head of the rule) which replaceonly those constraints with new ones which are to theright of the backslash.
Rules can have guards.
A guard(separated from the rest of the body by a I) is a conditionwhich has to be met before the rule can be applied.We cannot go into the details of the formal seman-tics of CHR here.
The interested reader is referred toFrfihwirth (1998).
Since I will refer back to it let us just552note that logically, simplification rules are cqt, ivalencesand propagation rules are implications if their gtmrd issatislied.
Simpagation rules are special cases of simpli-fication rules.
Soundness and completeness results forCHR are available (Abdennadher tal., 1996 Abdennad-her, 1998).2 Parsing as Constraint PropagationThe basic observation which turns parsing-as-deductioninto constraint propagation is simple: items o1' a chartparser arc just specM formulas which are used in an in-ference process.
Since constraints in constraint program-ruing are nothing but atomic formulas and c(mslraint han-dling rules nothing but inference rules, the connection isimmediate.In more detail, I will present in this section how toimplement the three parsing algorithms given in %b.
i inCHR and discuss the advantages and drawbacks of thisapproach.
Since CHP, are integrated in SICStus Prolog,I will present constraints and rules in Prolog notation.We use tile following two types of constraints.
Theconstraints cor,'esponding to tile items will be callededge constraints.
They have two arguments in case ofthe two naive algorithms and tive in tile case o1' Ear-ley's algorithm, i.e., edge (X, N) means in the case of thebottom-up algorithm that we have recognized a list ofcategories X up to position N, in the case of tile top-downalgorithm that we are looking for a list of categories Xstarting at position N and in tile case of Earlcy's algo-rithm edge (A,Alpha,Beta, I , J )  means that we founda substring fl'om I to J by recognizing the list of cate-gories Alpha, bul we are still looking for a list of cate-gories Beta to yield category k. The second constraint,werd(Pos,Cat-Word),  is treed in tile scanning steps.It avoids using Icxical entries in prediction/completionsince in gramnmr ules we do not use woIWs but theircategories.For simplicity, a gramnmr is given as Prok/g Ihcts: lex-ical items as lex (Word, Category) and gramnmr ulesas ru le  (RHS, LHS) where RHS is a list of categories rep-resenting the right hand side and LHS is a single categoryrepresenting the left hand side of the rule.The algorithms are simple to implement by specify-ing the inl'erenee rules as constraint propagation rules,the axioms and the goal items as constraints.
The infer-once rules are translated into CHR in the following way:The antecedents are transformed into constraints appear-ing in the head of the propagation rules, the side condi-tions into the guard and the consequence is posted in thebody.
A summarization of the resulting CHR programsis presented in Tab.
2.We use Earley's algorithm for a closer look at the CHRpropagation rules.
In the scanning step, we can movetile head of the list of categories we arc looking for tothose we already recognized in case we have an appro-priately matching edge and word constraint in our con-straint store.
The result is posted as a new edge constraintparse(InList):-axiom,post eonst(InList,report(Length).0, Length),post_const(\[\], Len, Len).post_const(\[Word}Str\], InLen, Len):-rAndall(Cat, lex(Word,Cat), Cats),post words(Cats, InLen, Word),NewLen is InLen + i,post const(Str, NewLen, Len).Figure 2: Utilities for CHRdmsed deductive parsingwith tile positional index appropriately increnmnted.The prediction step is more complex.
There is onlyone head in a rule, namely an edge which is still lookingtbr s()me category to be found.
If one can lind rules witha matching LHS, we collect all of them in a lisl and posttile approl)riatc fl'esh edge constraints lbr each element ofthat list with the predicate post_ea_edges/3 which postsedges of tim lbllowingkind: edge(LHS,\[ J ,RHS, J ,d) .The collection of all matching rules in a call to se to f /3is necessm 7 since CHR are a committed choice lan-guage.
One cannot enumerate all solutions via back-tracking.
If there are no matching rules, i.e., tim listof RHSs we found is cmpty, the call to se to f  i, theguard will fail and therefore avoid vacuous predictionsand nontermination f tile predictor.Lastly, tile completion step is a pure propagation rulewhich |1"a11s\]alcs literally.
The two antecedents are inthe head and lhe consequence in the body with appro-priate instantiations o1' the positional variables and withthe movement of the category recognized by the passiveedge from the categories Io be found to those found.In the table there is one more type of rule, called anabsorption rule.
It discovers those cases where we postedan edge consmtint which is already present in the chartand simply absorbs the newly created one.Note that we do not have to specify how to insert edgesinto ciflmr chart or agenda.
The chart and the agenda rerepresented by the constraint store and therefore built-in.
Neither do we need a specialized eduction engineas was necessary for the implementation described inShieber et al In fact, the utilities needed are extremelysimple, see Fig.
2.All we have to do for parsing (parse / l )  is to post theaxion?
and o~1 traversal of the input stri,g to post theword constraints according to the lexicon of the givengrammar.
Then the constraint resolution process witll theinference rules will automatically build a complete chart.The call to repor t /1  will just determine whether dmreis an appropriate edge with the correct length in the chartand print that information to the screen.Coming back to the issues of chart and agenda: theconstraint store l'nnetiot~s as chart and agenda t the samei axiom/0 just posts Ihe edge(s) delined in Tab.
2.553Table 2: Parsing systems as CHR programsBottom-Up Top-Down EarleyI tems edge (X,N) edge  (X,N)Ax iom edge ( \[ \] , 0 ) edge  ( \[ s \] , 0 )Goa l  edge( Is\] ,Len) edge( \[\] ,Len)edge(A,Alpha,Beta, I,J)edge(sprime,\[\],\[s\],0,0)edge(sprime,\[s\],\[\],0,Len)ScanBottom-UpTop-DownEarleyedge(Stack,N), word(N,Cat- Word) :=>N1 is N+I,edge(\[CatlStack\],Nl).edge(\[CatlT\],N), word(N,Cat- Word) ==>N1 is N+I,edge(T,Nl).edge(A,ilpha,\[CatlBeta\],I,J), word(J,Cat- Word)Jl is J+l,edge(h,\[Catlilpha\],Beta,I,Jl).==>PredictTop-DownEarleyedge(\[LHSIT\],N) ::>setof(RHS, rule(RHS,LHS), List) Ipost_td edges(List,T,N).edge( A, Alpha,\[Bl Beta\], I,d} ==>setof(Gan~a, rule(Gamma,B), List)post ea_edges(List,B,J).CompleteBottom-UpEarleyedge(Stack,N) ::>setof(Rest-LHS, split(Stack,Rest,LHS), List)post bu_edges(List,N).edge(h,ilpha,\[BIBeta\],I,K), edge(B,Gamma,\[\],K,J) ==>edge(i,\[Blilpha\],Beta,I,J).AbsorbBottom-Up edge(L,N) \ edge(L,N) <:> true.Top-Down edge(L,N) \ edge(L,N) <=> true.Ear ley  edge (A,Alpha, Beta, I, J) \ edge (A,Alpha, Beta, I, J) <:> true.time since as soon as a constraint is added all rules aretried for applicability.
If none apply, the edge will remaindormant until another constraint is added which triggersa rule together with it.
2 So, the parser works incremen-tally by recursively trying all possible inferences for each2 Another way to "wake" a constraint is to instanliate any of its vari-ables in which case, it will be matched against he rules again.
Since allour constraints are ground, this does not play a role here,constraint added to the store before continuing with theposting of new constraints fi'om the post_const/3 pred-icate.
The way this predicate works is to traverse thestring fi'om left-to-right.
It is trivial to alter tile predicateto post the constraints from right-to-left or any arbitraryorder chosen.
This can be used to easily test differentparsing strategies.The testing for applicability of new rules also has a554I ?- parse(\[john, hit, the, dog,with, the, stick\]).Input recognized.word (0, pn- j ohn)word ( I, v-hi t),word (2, det- theword (3, n-dog) ,word ( 4, p-wi th)word ( 5, det- the )word ( 6, n-stick)edge(sprlme, \[\], \[s\],O,O),edge(s,\[\],\[np,vp\],O,O),edge(np, \[\] , \[det,nbar\], O, O) ,edge(np, \[\], \[pn\], O, O) ,edge(np, \[phi, \[\] , O, I) ,edge(s, \[np\], \[vp\],O,l),edge(vp,\[\], \[v,np\],l,l),edge(vp, \[\], \[v,np,pp\],l,l),edge(s,\[vp,np\],\[\],O,7),edge(sprime,\[s\], \[\],0,7)Figure 3: A partial CHP.
generated chartconnection with the absorption rules.
We absorb tilenewer edge since we can assume that all possible propa-gations have been done with lhe old identical edge con-straint so that we can safely throw tile other one away.As an example I'OZ" tile resulting chart, part of the out-put of an Earley-parse for John hit the dog with the stickassuming the grammar fl'om Fig.
I is presented in Fig.
3.The entire conslrainl stere is prinlcd lo tl~e screen afterthe constraint resolution process tops.
Tile order of fileconstraints actually reflects tile order of the constructiono1' the edges, i.e., the chart constitutes a lrace o1' tile parseat the same time.
Although the given siring was ambigu-ous, only a single solution is visible in lh.e chart.
This isdue to the fact that we only (lid recognition.
No explicitparse wits built which could have differentiated betweenihe two solutions.
It is an easy exercise to either write apredicate to extract all possible parses from the chart orto alter the edges in such a way flint an explicit parse treeis built dr,ring parsing.By using a built-in deduction engine, one gives up con-trol of its efficiency.
As it turns out, this CHR-based ap-proach is slower titan the specialized engine developedand provided by Shieber et al by about a factor of 2, e,g.,for a six word sentence and a simple grammar tile pars-ing time increased from 0.01 seconds to 0.02 seconds ona LINUX PC (Dual Pentium lI with 400MHz) runningSICStus Prolog.
This factor was preserved under 5 and500 repetitions of the same parse.
However, speed wasnot the main issue in developing this setup, but rathersimplicity and ease of implementation.qb sunl up this section, tile advantages of the approachlie in its flexibility and its availability for rapid prototyp-ing of different parsing algorithms.
While we used thebasic examples fl'om the Shieber et al article, one canalso implement all Iho different deduction schemes fromSikkel (1997).
This also includes advanced algorithmsst,ch as left-corner or head-corner parsing, the relinedEarley-algoriflml proposed by Graham el al.
(1980), or(unification-based) II)/LP parsing as defined in Moraw-ietz (1995), or any improved version of any of these.Furthermore, because of the logical semantics of CHP,with their soundness and completeness, all eorrecmessand so/redness proofs for the algorithms can be directlyapplied to this constraint propagation proposal.
The maindisadvantage of the proposed approach certainly lies inits apparent lack of efficiency.
One way to address thisproblem is discussed in the next section.3 Extensions of the Basic TechniqueThe,'e are tw'o directions the extensions of the presentedtechnique of CHR imrsing might rake.
Firstly, one mightconsider lmrsing of more complicated granmm,'s com-pared to tile CF ones which were assumed so far.
Fol-lowing Shieber et al, one can consider utfification-tmsedgrammars or tree adjoining grammars.
Since I think lha!the previous sections howed lhat the Shieber ctal.
ap-proach is transferable in general, the results they presentare applicable here as well.
3 Instead, I want to considerparsing of minimalist grammars (Chomsky, 1995) as de-lined in recent work by Stabler (I 997, 1999).
43.1 Minimalist ParsingWe cannot cover the flleory behind deriwltional minimal-ism as presenled in Smbler's papers in any delail.
Verybriefly, lexical items arc combined wilh each other by abinary operation meIx'e which is lriggered by the avail-ability of an appropriate pair of clashing features, herenoted as cat: IC) for Smbler's categories c and comp (C)for =c.
Fttrlhermorc, there is a treaty operation movewhich, again on tile awfilability era  pair of clashing fea-tures (e.g., -case, +case), triggers the extraelion era(possibly trivial) subtree and its merging in at tile rootnode.
On completion of these operations lhe clashingfeature pairs are removed.
The lexical items are of tilel'orm o1' linked sequences o1' trees.
Accessibility o1' fea-lures is detined via a given order on the nodes in thischain of trees.
A parse is acceptable if all features havebeen checked, apart li'om one category feature whichspans the length of the string.
The actual algorithmworks naively bottom-up and, since the operations areat most binary, the algorithm is CYK-based.3Obviously, using unification will inlroduce addilional complexity,but no change of the basic melhod isrequired.
If lhe tmilicazion can bereduced to Prolog unilication, it can stay in the head of the rule(s).
If itneeds dedicated tmilicalion algorilhms, they have to be called explicitlyit\] the guard.4 The code for the original implenlenzalion u derlying the paper waskindly provided by Hd Stabler Altar/from Ihe implementation in CHP,,all file rest is his work and his ideas.555Table 3: Part of a CHR-based minimalist parserItemsAxiomGoaledge(I, J, Chain, Chains)edge(I, I, Chain, Chains)edge(I, I+l, Chain, Chains)edge(J, J, Chain, Chains)edge(0, Length, \[cat(C)\], \[\])( \[Chain l Chains \] ----+ e), I a variable( \[Chain I Chains\] ----+ Wi+l)and there is no -X in \[Chain I Chains\]( \[ChainlChains\] - -~  wi+l), J a variableand -X, I and I+l  occur in \[ChainlChains\]Merge edge(I,J,\[comp(X) IRestHead\],Ch0), edge(K,L,\[cat(X) IRestComp\],Chl)eheck(RestHead,NewHead, I,J,K,L,A,B,RestComp,Ch0,Chl,Ch) 1edge(A,B,NewHead,Ch).==>An initial edge or axiom in this minimalist parsing sys-tem cannot simply be assumed to cover only the part ofthe string where it was l~und since it could have been theresult of a move.
So the elements of the lexicon whichwill have to be moved (they contain a movement trig-ger -X) actually have the positional indices instantiatedin the last o1' those features appearing.
All other move-ment triggers and the position it will he base generatedare assumed to be traces and therefore mpty.
Their po-sitional markers are identical variables, i.e., they span noportion of the string and one does not know their valueat the moment of the construction of the axioms.
Theyhave to be instantiated during the minimalist parse.Consider the set of items as delined by the axioms, seeTab.
3.
The general form of the items is such that wehave the indices first, then we separate the chain of treesinto the first one and the renmining ones for better access.As an example for the actual edges and to illustrate thediscussion about tile possibly variable string positions inthe edges, consider the lexical item it (as in believe it):lex(it,I,\[(K,K):\[cat(d),-case(I,J)\]\]):-J is I+l.Since I = 1 in the example the following edge resultsedge(K, K, \ [ ca t (d ) , - case(1 ,2 ) \ ] \ ] ,  \ [ \ ] ) .Weknowthat it has been moved to cover positions 1 to 2, but wedo not know (yet) where it was base generated.We cannot go into any further detail how the actualparser works.
Nevertheless, the propagation rule formerging complementizers shown in Tab.
3 demonstrateshow easily one can implement parsers for more advancedtypes of grammars.
55The predicate check implements the checking of the features andi,ldices and recomputes the new values for the resulting edge.3.2 Compiling the Grammar Rules into theInference RulesA proposal for improving tile approach consists in mov-ing the test for rule applicability from the guards intothe heads of the CHR rules.
One can translate a givencontext-fi'ee grammar under a given set of inference rulesinto a CHR program which contains constraint propaga-tion rules for each grammar rtde, thereby making tile pro-cessing more efficient.
For simplicity, we discuss onlytim case of bottom-up arsing.For the translation from a CF grammar into a con-straint framework we have to distinguish two types ofrules: those with from those without an empty RHS.
Wetreat the trivial case of the conversion first.
For each rulein the CF grammar with a non-empty RHS we create aconstraint propagation rule such that each daughter ofthe rule inu'oduces an edge constraint in the head of thepropagation rule with variable, but appropriately nmtch-ink string positions and a tixed label.
Tile new, propa-gated edge constraint spans tbe entire range of the posi-tions ot' the daughters and is labeled with the (nontermi-nal) symbol of the LHS of tile CF rule.
In our example,the resulting propagation rule for S looks as follows:edge(I,K, np), edge(K,J,vp) ::> edge(I,J,s)The translation is a little bit more complicated for ruleswith empty RHSs.
Basically, we create a propagationrule for each empty rule, e.g., A ----+ e, such that the headis an arbitrary edge, i.e., both positions and the label arearbitrary variables, and post new edge constraints withthe LHS of the CF rule as label, using the positional vari-ables and spanning no portion of the string, resulting inCHR rules of the following type:edge(I,J,_Sym) :=> J is I+ledge(l,I,A), edge(J,J,A)556But obviously rtfles of tiffs type lead to nonlerlninationsince they would propagate furlhcr constraints on theirown output which is avoided by inchlding a guard whichensures flint empty edges are only propagated for everypossible string position once by testing whether the edgespans a string of length one.
Recall that storing and us-ing already existing edge conslrairfls is aw)idcd with anabsorption rule.
Since these empty constraints can bereused an arbitrary number of times, we get the desiredeffect with.out having to fear nontermination.
Allhoughthis is not an elegant solution, it seems lhat other alterna-tives such as analyzing and transforming the entire gram-mar or posting the empty constraints while traversing theinput string arc not appealing eflher since they give upthe one-to-one correspondence b tween the rules of theCF grammar and the constraint program which is advan-tageous in debugging.With this technique, the parsing timcs achieved werebetter by a factor of a third compared to the Shieher et alimplemenlation.
Although now the process of the com-pilation obscures the direct com~ection betweet~ parsing-as-deduction and constraint propagalion somewhat, theincrease in speed makes it a worfl~while xercise.4 ConclusionIn the paper, the similarity between parsing-as-deductionand constraint propagation is used to propose a llexibleand simple system which is easy to implement and flmre-fore offers itself as a tcstbed for different parsing strate-gies (such as top-down or bottom-up), for wu'ying modes?
of processing (such as left-to-right or right-to-left) or fordifferent ypes of grammars (such as for example min-imalist grammars).
Compared to the Shieber al)proach,the pure version see,ns to be lacking in efliciency.
Thiscan be remedied by providing an automatic compilationinto more eflicient specialized parsers.While the paper has shown that existing constraintsystems are powerful enough to allow chart parsing,more work has to be invested in the realization of sucha larger system combining these techniques with con-straint solvers lbr existing constraint-based natural an-guage theories m see whether ft,rther benelils can be got-ten from using parsing as constraint propagation.
Dt, e tothe tlexibility of the CHR system, one can now use theconstraint propagation approach to drive other constraintsolving or constraint resolution techniques (also imple-mented in CHR) resulting in a homogenous environmentwhich combines both classical constraint solving with amore operational generator.Specifically, one can use each created edge to postother constraints, for example about he wdl-formednessof associated typed feature structures.
By posting them,they become available for other constraint handling rules.In particular, systems directly implementing HPSG seemto suffer fi'om the problem how to drive the constraintresolution process efficiently.
Some systems, as for ex-ample ALE (Carpenter and Penn, 1998) use a phrasestructtH'e backbone to drive tile process.
Tile p,oposalhere would allow to use 111e ID/LP schemata directly asconstraints, but nevertheless a the driving tbz'ce behindlhe other constraint satisfi~ction techniques.
However, forthe moment this remains peculative.ReferencesAbdemmdhcr, S. (1998).
Almlyse yon regelbasiertenConstraintli~sern, PhD thesis, Ludwig-Maximilians-Universitfit Mfinchen.Abdennadheh S., Frfihwirth, T. and Meuss, H. (1996).On conlluence of constraint handling rules, LNCS'1118, Springer.Carpenter, B. and Penn, G. (1998).
ALE: The attributelogic engine, version 3.1, User mamtal, Carnegie Mel-lon University, Pittsburgh.Chomsky, N. (1995).
The Minimalist Program, Vol.
28of Current Studies in Linguistics, MIT Press.Friihwirth, T. (1998).
Thcory and practice of constrainthandling rules, Journal (),/'Logic Pmgtzmlnting 37.G6tz, T. and Meurers, D. (1997).
Interleaving universalprinciples and relational constraints over typed featurelogic, A CTJEA CL Collj'erence '97, Madrid, Spain.Graham, G., Harrison, M. G. and Ruzzo, W. L. (1980).An improved context-li'cc recognizer, ACM 7)wnsac-tions on Programming Languages and Systems 2 (3).Manandhar, S. (1994).
An attributive logic of set descrip-tions and set operations, ACL Conference '94.Matiasek, J.
(1994).
PHnciple-Based Processing of Nat-ural Language Using CEP Techniques, PhD thesis, TUWien.Morawiclz, F. (1995).
A Unification-Based ID/LP Pars-ing Schema, Proceedings of the 4th IWPT, Prag.Pereira, F. C. N. and Warren, D. H. D. (1983).
Parsing asdeduction, ACL Collference ' 83.Shieber, S. M., Schabes, Y. and Pereira, F. C. N. (1995).Principles and i,nplemenlation of deductive parsing,Journal of Logic Pmgtwmming 24(1-2).Sikkel, K. (1997).
Patwing Schemata: A FrameworkJbr Specification and Analysis o.f Pa~wing Algorithms,ETACS Series, Springer.Smolka, G. (1995).
The Oz programming model, inJ.
van Leeuwen (ed.
), Conqmter Science 7bday, LNCS1000, Springer.Stabler, E. (1997).
Derivational minimalism, in C.
Retor6(ed.
), Logical Aspects of Computational Linguistics,LNAI 1328, Springer.Stabler, E. (2000).
Minimalist grammars and recogni-tion, Presented at the Workshop Linguistic Form andits" Conqnttation of the SFB 340 in Bad Teinach, Uni-versitiit Tiibingen.
Draft.557
