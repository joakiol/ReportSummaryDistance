Extracting Formal Specifications from NaturalLanguage Regulatory DocumentsNikhil Dinesh, Aravind Joshi, and Insup LeeDepartment of Computer Science, Univeristy of Pennsylvania,Philadelphia, PA - 19104 USAnikhild,joshi,lee@cis.
upenn.eduBonnie WebberUniversity of Edinburgh, Edinburgh, EH8 9LW Scotlandbonnie@inf.ed.
ac.
ukAbstractFormal verification techniques provide a way to determine whether regulatory doc-uments are consistent and whether implementations conform to them.
To applythese techniques a formal description of the regulation needs to be extracted.
Wepresent a framework, under which NLP techniques can be brought to bear, to aida requirements engineer in extracting the formal description.1 IntroductionRegulatory documents, which include the vast bodies of legislation, operatingprocedures and organizational policy, are meant to be accessible to the peopleaffected by them.
Hence, they have to be in natural language (NL).
Onthe other hand, regulations are expected to be consistent, and the governedentities/events are expected to conform to the regulation.For example, the Food and Drug Administration?s Code of Federal Reg-ulations (FDA CFR) governs the bloodbanks in America.
1 The bloodbanksperform safety-critical functions like the testing of blood for communicabledisease agents (like HIV).
It is highly desirable to determine whether (a) theCFR is consistent, and (b) a bloodbank?s implementation of such a functionconforms to the CFR.?
This research was supported in part by NSF CCF-0429948 and ARO 911NF-05-1-01581 http://www.gpoaccess.gov/cfr/index.htmlThe problem of creating descriptions of regulation which can be checkedfor consistency has been explored by several authors [1,8], but the challenge ofchecking an implementation for conformance has not been addressed, and thisis the main goal of our work.
The conformance guarantees can be obtainedif formal descriptions of regulation and implementations are available, and ifverification techniques [4] can be applied to these descriptions.
But extractinga formal description of regulation is expensive, as regulatory bases like theCFR are large (about a million words) and complex.Formal descriptions of regulation are usually extracted by an individualwho has a background in logic, e.g., [1,8].
We will call this individual therequirements engineer.
In this paper, we describe a framework to assist arequirements engineer in extracting a formal description of regulation for usein conformance checking.An overview of the framework, the theoretical background and the variousconstraints that apply is given in Section 2.
This lets us determine the natureof the description that needs to be extracted from the regulation.
We thenturn to the question of how these descriptions might be composed.
In Section3, we attempt to map the denotations of sentences assigned by Kratzer [12]to a form that can be used for the task at hand.
Some difficulties arise inthis mapping, mainly because notions of obligation (that which is required)and permission (that which is allowed) are not captured in the denotations.We argue that an account of these notions is essential to the task at hand.Section 4 describes a semantic representation, and composition procedure toassist the requirements engineer in extracting the required description.
Bytreating obligations and permissions as different dimensions of the descriptioncomputed, the difficulties encountered in Section 3 are addressed.The approach is motivated by our case study of the FDA CFR, and weuse (1) and (2) as examples through the course of this paper.
2 (1) conveysan obligation to perform a test for HIV and Hepatitis B, and (2) conveys apermission not to test source plasma (a blood component) for Hepatitis B.
(1) Except as specified in (2), you must test each donation of human blood or bloodcomponent, for evidence of infection due to the Human immunodeficiency virus,and the Hepatitis B virus.
(2) You are not required to test donations of Source Plasma for evidence of infectiondue to the Hepatitis B virus.2 A FrameworkTo determine whether an implementation (bloodbank) conforms to the regu-lation (CFR), we extract specifications in the Computation Tree Logic (CTL)from the CFR.
Then, given a description of a bloodbank?s procedure (as afinite transition system, or model) there is an efficient search procedure to2 (1) and (2) are modified versions of sentences that appear in the FDA CFR 610.40.
Theactual sentences are very long, and the modifications are made in the interests of space.determine if the model conforms to the CTL specification [3].
This is knownas temporal model checking [2,13].
The problem of conformance checking isthus split into three steps:(1) Extract CTL specifications from the regulation - This is done by arequirements engineer, and our goal is to assist her.
We use CTL as thespecification language, because it allows for efficient model checking [3].
(2) Obtain a model of an implementation - We assume the availability ofmodels.
There are tools that aid in extracting models from software [5], andin creating models if they cannot be extracted directly [11].
(3) Apply model checking to determine if the model conforms to the CTLspecification.Formally, a model can be defined as follows:Definition 2.1 A model M is the five-tuple (S, I, ?, pi,?
), where:(a) S is a set of states, I ?
S is a non-empty set of initial states,(b) ?
?
S ?
S is a total transition relation (that is, ?s ?
S : [?t ?
S : (s, t) ?
?
]),(c) pi is a set of propositions (with power set 2pi), and(d) ?
: S ?
2pi is a function from states to sets of propositions.
?
(s) for s ?
S can bethought of as the propositions true at s.Figure 1(a) and 1(b) show models of two different bloodbanks.
The left-most state is the initial state.
Each state is labeled with ?(s).
The propo-sitions have the following interpretation: d?
is true (d?
?
?
(s)) iff a donationof blood or blood component is being processed, sp?
is true iff a donation ofsource plasma is being processed, thiv?
is true iff a test for HIV has been per-formed, and thepb?
is true iff a test for Hepatitis B has been performed.
Theuse of the propositions deo (denoting deontic accessibility) and app1 (denotingthe application of a permission) is explained in later sections.deo, d?,sp?,thiv?,thepb?deo, d?,thiv?,thepb?
(a) A model of a bloodbankwhich tests all donationsdeo, d?,sp?,thiv?,app1deo, d?,thiv?
,thepb?
(b) A model of a bloodbankwhich does not test dona-tions of source plasma forHepatitis BFig.
1.
Two models of bloodbanksDefinition 2.2 Given a finite set of propositions pi, CTL formulas are defined induc-tively as follows:(a) p ?
pi is a formula,(b) Boolean combinations and negations of formulas are formulas,(c) if ?, and ?
are formulas, then AG(?)
(on all paths, globally ?
), AX(?)
(on allpaths, at the next state ?
), and ?AU?)
(on all paths, ?
until ?)
are formulas.The only temporal operator in CTL that we use is AG (for reasons thatwe describe below), and hence rather than define the interpretation formally,we will give some examples.
Let M1 be the model in Figure 1(a), and M2 bethe model in Figure 1(b).
The CTL specification AG(deo ?
(d?
?
thiv?))
holdsof both models, since on all paths (from the initial state, the leftmost one inFigures 1(a), and 1(b)), globally, in all deontically accessible states deo, if adonation of blood or blood component is being processed d?, it is tested for HIVthiv?.
Hence, we write M1  AG(deo ?
(d?
?
thiv?
)), and M2  AG(deo ?
(d?
?thiv?)).
Also, M1  AG(deo ?
(sp?
?
thepb?)).
But, M2 6 AG(deo ?
(sp?
?
thepb?
))(since there is a state s with sp?
?
?
(s), and thepb?
6?
?
(s)).2.1 Approaches to extracting specificationsThe central problem we face is that CTL and other temporal logics that lendthemselves to model checking are not expressive enough for a compositionalsemantic procedure to be defined for natural language.
One reason is thatCTL, like propositional logic, cannot express relations between entities.There are several routes one might take to address this problem, i.e., designmore expressive logics that allow for tractable model checking, focus on asubset of NL from which an automatic translation is guaranteed, or makethe procedure machine-assisted.
While the design of more expressive logicsmakes the composition of specifications easier, using them for model checkingneeds the creation of more expressive models (which requires more effort).As a result, there is a trade-off between amount of effort spent in obtainingmodels, and that in obtaining the specifications.
Our decision to work withless expressive models is motivated by the extensive tool support availablefor creating and extracting such models [5,11].
Further, subsets of NL forwhich automatic translation is guaranteed, such as the one derived by Holtand Klein [10], assume (among other things) that references are resolved andhence cannot be directly applied to regulatory documents.
We are thus leftwith the choice of making the procedure machine-assisted.There have been two kinds of machine-assisted approaches to extractingtemporal logic specifications: (a) composing the semantics in a general seman-tic framework which is then mapped to temporal logic [7], and (b) attemptingto compose the semantics in the temporal logic directly [6].
In the latter ap-proach, a human specifies denotations for a portion of the sentence, and therest of the composition happens automatically.
We attempt to compose thesemantics in a temporal logic directly like [6], as it lends itself to definingsemantic representations with which a requirements engineer can interact inwell-defined ways.2.2 Constraints on the CTL specificationsWe apply two constraints to the CTL specifications:(i) The specifications extracted should hold of all and only the valid mod-els.
There may be several implementations that aim to conform to a singlebase of regulation.
Given (1) and (2), the models in Figures 1(a) and 1(b) areboth valid.
This is an important difference from the NL sentences consideredin previous approaches, which were elicited from appropriate users by pre-senting them with a single model.
For example, Holt and Klein [10] obtainedspecifications by asking users to describe a particular timing diagram.
(ii) To account for the variation between models, all temporal informationabout the governed entities/events is modelled through propositions.
The onlyuse of the temporal operators in CTL is to obtain a quantification over pathsand states.
A mapping will need to be performed so that the propositionsused in the specifications can be evaluated at a states in different models, andthe critical assumption is that this mapping will be very easy to specify.3 From Sets of Worlds to Sets of ModelsSeveral approaches in formal semantics take sentences to denote sets of worlds.For normative statements, we assume (following Kratzer [12]) that worlds areconnected by an accessibility relation.
Consider (1) in Section 1 which amongother things requires a test for Hepatitis B if no exceptions apply.
A denotationof this requirement is given in (3), and is the set of worlds w0, such that forevery deontically accessible world w, for every entity x such that x is a donationin that world d?
(x,w), if no exception holds of that donation ?e?
(x,w), a testfor Hepatitis B is carried out for that donation thepb?(x,w).
We will assumethat negation has the highest precedence.
Therefore ?a ?
b ?
(?a) ?
b, andbrackets are used to resolve other ambiguities.
(3) ?w0.
?w : (w ?
deo(w0)?
(?x : (d?
(x,w) ?
(?e?(x,w)?
thepb?
(x,w)))))A difference between worlds in Kratzer?s denotations and states in a modelis that: in a state there is no notion of entities and relations between them.All that is available at a state s is the set of propositions which are true atthat state ?(s).
To map (3) to a form that is useful for checking conformance,we need two assumptions.First, we assume that regulation denotes the set of models that conform toit.
Intuitively speaking, w0 in (3) can be thought of as a model in its entirety,and w ?
deo(w0) correspond to special states in the model.
A universal quan-tification over accessible worlds can be replaced with the CTL AG operator.We then obtain the denotation in (4), read as : on every path in M, if a state isdeontically accessible, for each donation x at that state, if no exception holds,a test is carried out.
In a model, only special states (like when the bloodbankhas finished processing all the donations it has received) need to conform tothe regulation, and deo can be thought of as marking those states.
(4) ?M.
M  AG(deo?
(?x : (d?(x)?
(?e?(x)?
thepb?
(x)))))(4) is still not in CTL because of the universal quantification over enti-ties x at a state.
The universal quantifier can be eliminated by assuming aserial processing model.
This has the effect that at the deontically accessiblestates, exactly one donation is under consideration (e.g.
the models in Fig-ures 1(a) and 1(b)).
In the sections of the CFR that we examined, a universalquantification over entities is absolutely essential when these entities corre-spond to inputs of an implemenation.
This assumption lets us tie the inputsto states, and use the quantification over states to achieve the quantificationover entities.
Thus (4) can be reduced to (5).
(5) ?M.
M  AG(deo?
(d?
?
(?e?
?
thepb?
)))A problem that is encountered in taking this approach is that there is nodistinction between obligations, and permissions (both of which stem from theHohfeldian legal conceptions of right, duty, privilege, and no right [9]).
Whilethis did not cause a problem for the obligation in (1), if one were to follow thesame procedure for the permission in (2), we would get the denotation in (6).
(6) ?M.
M  ?
(AG(deo ?
(sp?
?
thepb?
)))A model satisfies (6) only if there is some path in which there is a state thatis deontically accessible, and if a donation of source plasma is being processedit is not tested.
This is too strong a requirement, because an organization maychoose not to do what it is permitted to do.
The model in Figure 1(a) is avalid model, which would be declared invalid if (6) were required of it.Another problem is that it is not clear how one would use (6) in interpretingthe exemption e?
in (5).
A reasonable candidate is e?
?
deo ?
(sp?
?
?thepb?
).But this is not the exemption because it is true in every deontically accessiblestate in which a donation of source plasma is not being processed.
Consider astate s at which sp?
= false (sp?
6?
?(s)).
At s, e?
?
(deo ?
(false ?
?thepb?))
?(deo?
true) ?
true.
The specification in (5), at s is: AG(deo?
(?e?
?thepb?))
?AG(deo ?
(?true ?
?thepb?))
?
AG(deo ?
true) ?
AG(true) ?
true .
Therefore, amodel that doesn?t test any donation for Hepatitis B would conform to (5).We now turn to the task of addressing these problems by revising how thespecifications are composed.4 Extracting the specificationsTo aid the requirements engineer in extracting the specifications, the ideais to present her with intermediate semantic representations of the sentencewith which she interacts.
The intermediate representations that we use fallinto the category of abstract syntax trees (ASTs).
ASTs are generally used asintermediate representations in compiling code in a high-level programminglanguage to machine dependant code.
The internal nodes in ASTs are oper-ators (predicates/meta-predicates), the subtrees they dominate are operands(arguments), and leaf nodes correspond to variables or constants (the require-ments engineer specifies the denotation of the leaves).
An AST encodes theresolution of scope ambiguities, i.e., if p1 dominates p2 in the AST, then p1outscopes p2.Section 4.1 describes some phenomena in natural language that can beused in the construction of the ASTs, and how these ASTs can be interpreted.In Section 4.2, we describe how the ASTs and their interpretation for (1) and(2) (in Figures 3 and 4) address the problems described in Section 3.
34.1 Abstract Syntax Trees (ASTs) and their interpretationTo capture the distinction between obligations and permissions, the denotationof each node N in an AST is given by the 3-tuple: [[N ]] =0@?NONPN1A , where ONis a set of propositional logic formulas which correspond to the obligationsthat have been satisified, and PN is a set of propositional logic formulas thatcorrespond to the permissions that have been taken, and ?N is a propositionallogic formula which can be thought of as indicating whether N is true at astate.
The set of obligations O obtained from the policy base is the unionof the obligations obtained at the root of the AST for each sentence.
Thedenotation of the policy base is then given by: ?M.
M  AG0@deo ?^?
?O?1A .
Wenow identify various linguistic constructions that can be used to obtain ASTs.Copyp i z T l1, l2....lnpT :[z ?
l1, i ?
1]... T :[z ?
ln, i ?
n]Fig.
2.
Semantics of the Copy meta-predicateCopyand i z eachx is a donation of hu-man blood or blood com-ponent ?(1).
i .1except asspecified in (2) -?(1).
i .2mustyou, test x , for evi-dence of infection dueto z - ?(1).
i .3the Human immuno-deficiency viusthe Hepatitis B virusand???
(1).1.1 ?
(??
(1).1.2 ?
?(1).1.3){?
(1).1.1 ?
(??
(1).1.2 ?
?(1).1.3)}{}?????(1).1.1{}{}??????
(1).1.2 ?
?(1).1.3{??
(1).1.2 ?
?(1).1.3}{}?????(1).1.2{}{}?????(1).1.3{?(1).1.3}{}?????(1).1.3{}{}??...Fig.
3.
AST and its interpretation for (1)Distributive readings and the Copy meta-predicate: (1) is ambigu-ous between a collective reading (where there is a single test for both the3 We assume that obligation and permission denoting categories, e.g.
must, do not occurin contexts like antecedent clauses of subordinating conjunctions (like if), and restrictors ofdeterminers.
Handling these cases requires an extension to CTL which is beyond the scopeof this paper.everyx is a donation of SourcePlasma - ?2.1notare requiredyou to test x for evidence ofinfection due to the Hepatitis Bvirus z of this section - ?2.2???
(2).1 ?
app1 ?
??(2).2{}{?
(2).1 ?
app1 ?
??(2).2}?????(2).1{}{}???
?app1 ?
??
(2).2{}{app1 ?
??(2).2}?????(2).2{?(2).2}{}?????(2).2{}{}??Fig.
4.
AST and its interpretation for (2)diseases), and a distributive reading (where there are separate tests for eachdisease).
However, (2) gives an exemption to a test for one of the diseases, andthis suggests that a distributive reading may be more appropriate in the spec-ifications extracted, and that the distributivity has scope over the exception.Hence Copy dominates except in Figure 3.The interpretation of the Copy meta-predicate is given in Figure 2.
It iscalled a meta-predicate because it is a function from an AST to another AST,by simple variable substitution.
For the AST for (1) shown in Figure 3, thisresults in an AST rooted with and with subtrees corresponding to each of thetests.
The interpretation of and in this context is given by:and0@?1AO1AP1A1A ...0@?nAOnAPnA1A =0@?ni=1?iA?ni=1OiA?ni=1PiA1AThe RHS of the equation corresponds to the denotation of the node labeledand in the AST (shaded in gray in Figure 3).Universally Quantified NPs correponding to inputs: As mentionedin Section 3, the universal quantification over inputs (donations) is achievedby associating states with unique inputs.
The interpretation of the determinereach is designed with idea that the obligations will be evaluated at each state.each0@?A{}{}1A0@?BOBPB1A =0@?A ?
?B{?A ?
?BO.j |?BO.j ?
OB}{?A ?
?BP.j |?BP.j ?
PB}1AThe interpretation of the determiner no is similar to that of each/every,except that a negation needs to be applied to the nuclear scope.
We discussthe interpretation of negation in what follows.Conditional and Exceptive constructions: There are several predi-cates that denote conditions and exceptions.
For example, the subordinat-ing conjunctions if , unless, and except as, coordinating conjunctions likeexcept that or but.
The interpretation of if is the same as that for every.
Theinterpretation of predicates like except as, and unless are similar, the onlydifference being that ?
?A is used instead of ?A in the RHS.Modals and Negation: The semantics of modals and negation are givenbelow:must0@?A{}{}1A =0@?A{?A}{}1A may0@?A{}{}1A =0@appi ?
?A{}{appi ?
?A}1Anot0@?AOAPA1A =0@??A{?
?AP.j |?AP.j ?
PA}{appj ?
?
?AO.j |?AO.j ?
OA}1A , where ?
?A =?appj ?
?
?A ?A ?
?AO.j ?
OA?
?A otherwisemust(A) results in the interpretation that ?A is an obligation.
may(A)results in the interpretation that appi ?
?A is a permission, where appi isa variable introduced which the implementation must set to true when thepermission is applied (we discuss its use in Section 4.2).
And intuitively, theinterpretation of negation captures the idea that may(?A) ?
not(must(A)).4.2 DiscussionThere are two obligations obtained at the root of the AST for (1): ?
(1).1.1 ?(??
(1).1.2 ?
?
(1).1.3) ?
d?
?
(?e?1 ?
thiv?)
and ?
(1).2.1 ?
(??
(1).2.2 ?
?
(1).2.3) ?d?
?
(?e?2 ?
thepb?)
, where d?
is true iff the donation is one of blood or bloodcomponent, e?1 and e?2 are the exceptions to the required test for each disease,and thiv?
and thepb?
are true iff tests for HIV and Hepatitis B respectivelyhave been performed.
The computation of the second obligation is not shownin Figure 3, and is obtained from the second child of and (in the AST shadedin gray).
Note that the individual propositions like d?
need to be specified bythe requirements engineer at the leaf nodes of the AST.Figure 4 shows the AST and its interpretation for (2).
The permissionobtained at the root node is : ?(2).1?app1???
(2).2 ?
sp??app1??thepb?
where sp?is true iff a donation of source plasma is being processed, and thepb?
is true iffa test for the Hepatitis B virus has been carried out.The use of the app1 proposition is as follows.
It is possible for the regula-tion to cancel the permission given in (2), but there may be several cases inwhich permission not to test a donation of source plasma for Hepatitis B isgiven.
Suppose the case under consideration is one where the permission in(2) is cancelled, but the organization doesn?t test a donation of source plasmafor Hepatitis B because a different permission can be applied.
Since the per-mission being applied sets thepb?
to false, and sp?
is true, the only way for theimplementation to indicate that the permission in (2) is not being applied isby setting app1 to false.
Setting e?1 ?
false, and e?2 ?
sp?
?
app1 ?
?thepb?
:?O.1 ?
d?
?
(?false?
thiv?
), and ?O.2 ?
d?
?
(?(sp?
?
app1 ?
?thepb?)?
thepb?
)Considering just these obligations, the denotation of the regulatory doc-ument would be: ?M.
M  AG(deo ?
(?O.1 ?
?O.2)) .
Therefore, a bloodbankcould decide not to test a donation of source plasma for Hepatitis B, but theywould always have to test a donation for HIV.5 Conclusions and Future WorkWe have described a framework to assist a requirements engineer in extractingCTL specifications from regulatory documents.
An account of obligations andpermissions turns out to be essential in composing the specifications.
Thecomposition procedure (defined in Section 4) was applied to a large part ofthe FDA CFR 610.40.
While it does seem to scale well, providing tool supportto extract and interact with the ASTs is vital.
To this end, we plan to conducta small scale annotation of ASTs which will let us determine the accuracy withwhich these representations can be computed.
On the user interface side, weare working on ways of presenting the ASTs to the requirements engineer.References[1] Breuker, J. and N. den Haan, Separating world and regulation knowledge: where is thelogic?, in: M. Sergot, editor, Proceedings of the third international conference on AIand Law (1991), pp.
41?51.
[2] Clarke, E. M. and E. A. Emerson, Synthesis of synchronization skeletons for branchingtime temporal logic, in: Logic of Programs: Workshop, 1981.
[3] Clarke, E. M., E. A. Emerson and A. P. Sistla, Automatic verification of finite-state concurrent systems using temporal logic specifications, ACM Transactions onProgramming Languages and Systems 8 (1986), pp.
244?263.
[4] Clarke, E. M. and J. M. Wing, Formal methods: State of the art and future directions,ACM Computing Surveys 28 (1996), pp.
626?643.
[5] Corbett, J. C., M. B. Dwyer, J. Hatcliff, S. Laubach, C. S. Pasareanu, Robby andH.
Zheng, Bandera: Extracting finite-state models from java source code, in: Proceedingsof the International Conference on Software Engineering (ICSE), 2000.
[6] Fantechi, A., S. Gnesi, G. Ristori, M. Carenini, M. Marino and M. Moreschini, Assistingrequirements formalization by means of natural language translation, Formal Methodsin System Design 4 (1994), pp.
243?263.
[7] Fuchs, N. and R. Schwitter, Attempto controlled english (ace), in: First InternationalWorkshop on Controlled Language Applications, 1996.
[8] Glasse, E., T. V. Engers and A. Jacobs, Power: An integrated method for legislation andregulations from their design to their use in e-government services and law enforcement,in: M.-F. Moens, editor, Digitale Wetgeving, Digital Legislation, Die Keure Brugge, 2003pp.
175?204, iSBN 90 5958 039 7.
[9] Hohfeld, W. N., Fundamental legal conceptions as applied in judicial reasoning, YaleLaw Journal 23 (1913), pp.
16?59.
[10] Holt, A. and E. Klein, A semantically-derived subset of English for hardwareverification, in: 37th Annual Meeting of the ACL, 1999.
[11] Holzmann, G., The Spin model checker, IEEE Trans.
on Software Engineering 23(1997), pp.
279?295.
[12] Kratzer, A., The notational category of modality, in: H.-J.
Eikmeyer and H. Rieser,editors, Words, Worlds, and Contexts.
New approaches to Word Semantics, deGruyter,Berlin, 1981 .
[13] Queille, J. P. and J. Sifakis, Specification and verification of concurrent systems inCAESAR, in: Proceeding of the Fifth ISP, 1981.
