Multilingual Question Answering with High Portability onRelational DatabasesHanmin JungDepartment of Computer Science andEngineeringPohang University of Science and TechnologySan 31, Hyoja-dong, Nam-gu, Pohang,Kyungbuk, Korea (790-784)Telephone: +82-54-279-5581jhm@postech.ac.krGary Geunbae LeeDepartment of Computer Science and EngineeringPohang University of Science and TechnologySan 31, Hyoja-dong, Nam-gu, Pohang, Kyungbuk,Korea (790-784)Telephone: +82-54-279-5581gblee@postech.ac.krAbstractThis paper describes a highly-portablemultilingual question answering system onmultiple relational databases.
We applysemantic category and pattern-basedgrammars, into natural language interfaces torelational databases.
Lexico-semantic pattern(LSP) and multi-level grammars achieveportability of languages, domains, andDBMSs.
The LSP-based linguisticprocessing does not require deep analysisthat sacrifices robustness and flexibility, butcan handle delicate natural languagequestions.
To maximize portability, we drivevarious dependent parts into two tightcorners, i.e., language-dependent part intofront linguistic analysis, anddomain-dependent and database-dependentparts into backend SQL query generation.Experiments with 779 queries generate onlyconstraint-missing errors, which can beeasily corrected by adding new terms, of2.25% for English and 5.67% for Korean.IntroductionAs a natural language (NL) interface, questionanswering [7] on relational databases 1  allowsusers to access information stored in databases byrequests in natural language [16], and generatesas output natural language sentences, tables, andgraphical representation.
The NL interface can becombined with other interfaces to databases: a1  We also call it NLIDB (Natural Language Interface toDataBases).formal query language interface directly usingSQL, a form-based interface with fields to inputquery patterns, and a graphical interface using akeyboard and a mouse to access tables.
The NLinterface does not require the learning of formalquery languages, and it easily represents negationand quantification [4], and provides discourseprocessing [8].The use of natural language has both advantagesand disadvantages.
Including general NLPproblems such as quantifier scoping, PPattachment, anaphora resolution, and ellipticalquestions, current NLIDB has manyshortcomings [1]: First, as a frequent complaint,it is difficult for users to understand which kindsof questions are actually allowed or not.
Second,the user assumes that the system is intelligent; heor she thinks NLIDB has common sense, and candeduce facts.
Finally, users do not know whethera failure is caused by linguistic coverage or byconceptual mismatch.
Nevertheless, naturallanguage does not need training in anycommunication media or predefined accesspatterns.NLIDB systems [2], one of the first applicationsof natural language processing, including?LUNAR?
were developed from the 1970s [23].In the 1980s, research focuses on intermediaterepresentation and portability, and attempts tointerface with various systems.
CHAT-80 [22]transforms an English query into PROLOGrepresentation, and ASK [20] teaches users newwords and concepts.
From 1990s, commercialsystems based on linguistic theories such asGPSG, HPSG, and PATR-II appear [13], andsome systems attempt to semi-automaticallyconstruct domain knowledge.
MASQUE/SQL[1] uses a semi-automatic domain editor, andLOQUI [3], a commercial system, adopts GPSGgrammar.
Meanwhile, Demers introduces alexicalist approach for natural language to SQLtranslation [6], and as the CoBase project ofUCLA, Meng and Chu combine informationretrieval and a natural language interface [14].The major problems of the previous systems areas follows.
First, they do not effectively reflectthe vocabulary used in the description of databaseattributes into linguistic processing.
Second, theyrequire users to pose natural language queries atone time using a single sentence rather than givethe flexibility by dialog-based query processing.The discordance between attribute vocabularyand linguistic processing vocabulary causes theportability problem of domain knowledge fromknowledge acquisition bottleneck; the systemsneed extensive efforts by some experts who arehighly experienced in linguistics as well as in thedomain and the task.Androutsopoulos [1] [2], which are mainlyreferenced for this section, classifies NLIDBapproaches into the following four majorcategories.Pattern matching systems: Some of the earlysystems exclude linguistic processing.
They areeasy to implement, but have many criticallimitations caused by linguistic shallowness [17].Syntax-based systems: They syntacticallyanalyze user questions, and use grammars thattransform parsed trees to SQL queries [23].However, the mapping rules are difficult andtedious to devise, which drops the portability oflanguages and domains.Semantic grammar systems: The systems adopttechniques interleaving syntactic and semanticprocessing, and generate SQL queries from theresult [19] [21].
They are useful to rapidlydevelop parsers in limited domains, but are notported well to new domains due to hard-wiredand domain-dependent semantic information[18].Intermediate representation languagesystems: Most current systems place anintermediate logical query between NL questionand SQL [5].
The processes before theintermediate query are defined as the linguisticfront-end (LFE), and the other processes as thedatabase back-end (DBE).
This architecture hasthe merits that LFE is DBMS-independent and aninference module can be placed between LFE andDBE.
However, the limitation of parsing andsemantic analysis requires semanticpost-processing.
Nevertheless, it is difficult toachieve high quality analysis for databaseapplications.On the contrary, we apply linguistic processingbased on lexico-semantic patterns (LSP), aprominent method verified in text-based questionanswering [10] [12], into NLIDB, and proposemulti-level grammars to represent querystructures and to translate into SQL queries.
Oursystem is a hybridization of the pattern matchingsystem and the intermediate representationlanguage system.
However, our LSP-basedpattern covers lexical to semantic matching, andthe multi-level grammars for intermediaterepresentation evidently separate the databaseback-end from the linguistic front-end.
Thus, ourmethod has the ability to divide LFE and DBE,but promises greater adaptability due to thehybrid linguistic analysis and thepattern-matching characteristics.The LSP-based linguistic processing does notrequire deep analysis that sacrifices robustnessand flexibility, but handles delicate NL questions.To maximize portability of languages, domains,and DBMSs, we drive the various dependentparts into two tight corners, i.e., thelanguage-dependent part into front linguisticanalysis, and the domain-dependent anddatabase-dependent parts into backend SQLquery generation.
In our LSP description,attribute vocabularies are also represented assemantic classes that represent semantic meaningof words.
Thus, the domain-dependent attributesand values are automatically extracted fromdatabases, and get registered in a semanticcategory dictionary.1 LSP-based Linguistic Processing andMulti-level GrammarsA lexico-semantic pattern (LSP) is the structurewhere linguistic entries and semantic types canbe used in combinations to abstract certainsequences of words in a text [12] [15].
Linguisticentries consist of words, phrases andpart-of-speech tags, such as ?television,?
?3DSurround,?
and ?NP2.?
Semantic types consist ofattribute names, semantic tags (categories) 3 anduser-defined semantic classes 4 , such as?@model,?
?@person,?
and ?%each.
?LSP-based language processing simplifies thenatural language interface due to the followingcharacteristics: First, linguistic elements fromlexicons to semantic categories offer flexibility inrepresenting natural language.
Second, simpleLSP matching without fragile high-level analysesassures a robust linguistic model.
Third, the useof common semantic types among differentlanguages reduces the burden of cross-linguisticportability, i.e., enhances multilingual expansion.Finally, separation between dictionary and ruleseasily enriches domain knowledge byminimizing the conflict to describe the rules.Multi-level grammars are designed to constructintermediate representation as the source of SQLquery generation.
The grammars interpretlexico-semantic patterns obtained from thelinguistic front-end, i.e., morphological analysis,and build attribute-value trees for databaseback-end.
We introduce three-level grammarsthat include lexico-semantic patterns to describetheir rules: a QT5 grammar to determine questiontypes, an AV 6 -TYPE grammar to constructattribute-value nodes (see section 2.1), and anAV-OP grammar to find the relations betweenthe nodes (see section 2.2).
Using the QTgrammar, query-to-LSP transfer makes alexico-semantic pattern from a given question [9].The lexico-semantic patterns enhanceinformation abstraction through many-to-onemapping between questions and alexico-semantic pattern.2 System ConfigurationTo handle the two major problems of previousNLIDB systems, i.e., 1) the discordance betweenattribute vocabulary and linguistic processing2 Part-of-speech tag for a proper noun3 ?@?
is the start symbol for the semantic tags.4  ?%?
is the start symbol for the user-defined semanticclasses.5 Question type6 Attribute and valuevocabulary, which causes laborious lowportability in multiple environments, and 2) theabsence of query refinement supportingsession-based dialog, our system effectivelydevelops LSP-based linguistic processing,multi-level grammars, and SQL query refinement.To maximize portability of multipleenvironments, such as languages, domains, andDBMSs, each environment-dependent module isclearly defined and confined.Our system consists of four phases (figure 2.1):morphological analysis, QT/AV Processing,AV-tree construction, and SQL query generation.The QT/AV processing determines the questiontypes for a given question, and constructsattribute-value nodes from the question.
Thisphase includes linguistic front-end processes,such as morphological analysis and named entityrecognition.
The AV-tree construction phasefinds the relation between the nodes obtainedfrom the previous phase, and produces anattribute-value tree that is independent ofDBMSs.
The last phase, SQL query generation,translates the attribute-value tree into aDBMS-dependent SQL query.
[Figure 2.1] System Architecture2.1 Morphological Analysis and QT/AVProcessingWe separate all processes and resources using alinguistic dependency approach.
Morphologicalanalysis and all the resources, includinggrammars and dictionaries, are all languagedependent.
Morphological analysis for eachlanguage produces a sequence of (word, lemma,POS) pairs.
After the analysis, system shares allprocesses independent of the source language;this increases linguistic portability by pushing thelanguage-dependent processes to the earlierstage.To acquire the named entities for target databases,the system looks up the category dictionarywhich includes main semantic information.
Thecategory dictionary consists of four components:semantic tags, user-defined semantic classes,part-of-speech (POS) tags, and lexical forms.
Thestructure of semantic tags is a flat form.
In alexico-semantic pattern, each semantic tagfollows a ?@?
symbol.
For example, a semantictag ?
@item 7 ?
includes the words, such as????,?
????,?
and ??????
in Korean,and ?VCR?
and ?video?
in English.
User-definedsemantic classes are the tags for syntactically orsemantically similar lexical groups.
For example,a user-defined semantic class ?%each?
includesthe words, such as ??,?
????,?
???,?
and???
in Korean, and ?each?
and ?every?
inEnglish.
The category dictionary has the highestpriority to construct the lexico-semantic patternfor a sentence.
In the absence of an entry, thepart-of-speech tag of the current morphemebecomes the component of the LSP.A question type indicates ordering clauses,including ?ASC?
and ?DESC,?
or columnfunctions such as ?SUM(),?
?AVG(),?
and?MIN().?
By applying a QT grammar, a questiontype and a target attribute, i.e., the argument ofthe question type, are obtained.
The followingshows the process from user query to SQLtemplate.
[User query]?How much is the cheapest among 34 inches??
[LSP pattern]%how %much %be %dt %most-cheap %amongnum @unit_length sent[QT grammar]?
?^8%how%much%bedt%most-cheapqo_min|qt_price@corpin%ascqo_aso|qt_corp7 ?item?
attribute for ?audio-video?
product database8 Symbol designating the beginning position of a regularexpression%corp%make@type%and@type%togetherqo_intersect|qt_corp??
[Question type]MIN(price)[SQL template]SELECT MIN(price) FROM ?
WHERE ?AV-TYPE grammar finds all the pairs ofattributes and values by applying lexico-semanticpatterns.
Like QT grammar, LSP-based conditionand action exist.
The action consists of anattribute and a value operator.
In SQL, the twocomponents are represented like ([attribute][value operator] [value]) in WHERE clauses, forexample, (price > 300,000).
The pairs of attributeand value become the nodes of the AV-tree,which is the source to generate the SQL query.The following examples demonstrate the methodto obtain pairs using the AV-TYPE grammar.
[User query]?Choose only Samsung?s among 25 inches, 21inches, and 29 inches products.?
[LSP pattern]?
@corp ?
num @unit_length ?
num@unit_length ?
num @unit_length ?
[AV-TYPE grammar]??engj%start@model|vo_beginnum@unit_length@size|vo_like%betweennum%andnum@price|vo_between%each%price@price|vo_group@corp@corp|vo_like@price%elower@vop_mod9|vo_elower??
[Pairs of attribute and value](corp like ?%Samsung%?
)(size like ?25inch?
)(size like ?21inch?
)(size like ?29inch?
)9 Action to modify the current value operation2.2 AV-tree ConstructionBinary operators (AND, OR, NOR, NAND ?
)connect the pairs of attributes and values that arethe nodes of the AV-tree.
AV-OP grammardescribes the relations using lexico-semanticpatterns like other grammars.
The condition partof the grammar consists of attributes andconjunctions (see examples below), whereas theaction part consists of binary operators and theattributes?
index in postfix notation.
[Pairs of attribute and value from section 2.1](corp like ?%Samsung%?
)(size like ?25inch?
)(size like ?21inch?
)(size like ?29inch?
)[AV-OP grammar]??@corp@size@size%and@size1|2|3|5|bo_or|bo_or|bo_and@model%and@model@type1|3|bo_or|4|bo_and@type@model@pname1|2|bo_and|3|bo_and??
[Prefix notation and AV-tree]To handle negative expressions, we follow thetwo steps: First, we determine each negation?sscope from the input sentence.
Second, we inserta ?NOT?
unary operator into the maximal AVsubtree that the negation?s scope covers.
Forexample, the input sentence ?0 no 1 LG 2Electronics 3 and 4 Philips 5?
has a negation with[0, 5] scope, and three subtrees: [1, 5] for ?LGElectronics and Philips,?
[1, 3] for ?LGElectronics,?
and [4, 5] for ?Philips.?
Since thenegation?s scope covers all the subtrees, ?NOT?operator is put onto the subtree with [1, 5].Therefore, (NOT ((corp like ?%LGElectronics%?)
OR (corp like ?%Philips%?
)))becomes the constraint of the ?WHERE?
clause.A query expansion dictionary defines theconceptual sets of values, where the set candefinitely determine its values in a given DB,such as ?imported product?
and ?Japanesecompanies.?
The conceptual sets are differentfrom user-defined terms in that the meaning ofuser-defined terms varies with users, such as?large size of TV?
and ?high-priced audio.?
Forthe user-defined terms, we maintain the user?sprofile for each user, and for the conceptual sets,maintain a query expansion dictionary for thesystem.2.3 SQL Query GenerationDomains and DBMSs affect the generation ofSQL queries.
For multiple domains, our systemautomatically determines the domain that theuser requests; first, find the domains to whicheach attribute-value node belongs.
Second, selectone or more domains using the combination ofdomains from the first step.
When two or moredomains are chosen, the domains get combinedwith attributes in the SQL query to be generated,such as ?
(saa.size >= ?29inch?)?
and ?
(bb.corplike ?%SONY%?).?
Where the attribute ofquestion type is ambiguous, the selected domainsalso help to fix the attribute.
We generate an SQLquery in the order of question types (SELECT ?FROM), tables (FROM ?
WHERE), constraints(WHERE ?
), sub-query, and connection withtwo SQLs.For supporting session-based dialog, we preservethe SQL query created from the previousquestions, and re-generate new SQL query for thecurrent successive question.
First, the systemchecks whether the current question has the samedomain as the previous question or not.
When thetwo domains are equal, the previous generatedSQL query becomes a constraint part of thecurrent SQL query, for example, ??
FROM(SELECT ?)
WHERE ?
.?
Otherwise, a defaultSQL query10 will be generated.10 ?SELECT * FROM table-name WHERE 1 (or id>=0),?where id is the primary key.3 Portability of Languages, Domains, andDBMSsNatural language interfaces to databases shouldconsider the portability of languages, domains,and DBMSs.
Previous systems are short of one ormore portability factors; systems with heavylinguistic components have trouble in expandinginto other languages, and systems with simplepattern matching are insufficient to deal withmultiple domains and DBMSs.
On the other hand,our system adopts robust LSP-based languageprocessing and multi-level grammars tostructurally analyze the user?s query.Portability of languages: In our system, onlyboth morphological analysis and the resourcesincluding dictionaries and grammars arelanguage-dependent.
Because the resourcesinclude lexico-semantic patterns that representlinguistic characteristics, both the linguisticfront-end and the database back-end can beclearly divided.
Where the languages to handleare similar to each other, as in word order andlinguistic structure, many rules of grammars canbe shared without consideration of the specificlanguages.
Like English and Korean11, however,if the two languages are quite different, then theshared portion naturally decreases.
We separateout the language-dependent morphologicalanalysis and the subsequent processes as soon aspossible to easily expand to other languages.
Toadd another language, only new morphologicalanalysis and linguistic resources need to beappended to the existing system.
Heavy linguisticprocesses like syntactic and semantic analysisused by the previous systems inevitably delay thepoint of linguistic separation.Portability of domains: A new domain with thenew DB schema affects both the linguisticfront-end and the database back-end.
To reducethe influence, our system deals with thedomain-related information only in resources andSQL query generation.
The other processes, suchas morphological analysis, QT/AV processing,and AV-tree construction are alldomain-independent.
Domain categorydictionary and grammars localize the attribute11 Korean and Japanese are very similar in that the two areagglutinative languages and have SOV structures, whereas,English and some of the European languages are inflectiveand have SVO structures.names, but the general category dictionary isindependent of domains because it is designed tohandle common named entities.
In order tomanage the multiple domains, SQL querygeneration should consider domain information.However, a single domain reduces the burden ofdomain portability because the processing has norelation with the SQL query.Portability of DBMSs: The format and thedescriptive power of SQL queries vary fromDBMSs, such as in attribute names, sub-queryoperation, types of operations, case sensitivity,and constraint syntax.
In our system, anylinguistic processes and resources do not involveSQL query generation, which eventuallyincreases DBMS portability.
SQL querygeneration has alternatives to produceDBMS-dependent SQL only in some sub-parts,such as sub-query generation and combinationwith SQL queries.
Until an SQL query begins tobe generated, current DBMS does not influenceany processes and resources.4 Experiment ResultsPursuing high portability in languages, domains,and DBMSs, we implemented a multi-lingualquestion answering system on relationaldatabases.
The target languages are English andKorean, which are completely different inlinguistic structures.
Our system dealt with twodomains for Korean: first, an audio-video productdatabase with 418 entries automaticallypopulated from an information extraction system[11], and second, a price comparison databasewith 1964 entries and multiple schemas from aBestBuyer 12  comparison shopping mall.
Formultiple languages, we manually translated allthe Korean entries into English.
Oracle 8.0.5 andMySQL 3.23.22 were used as two differentDBMSs.Our system processes the user question from aWeb browser, and produces an SQL query.
Next,CGI (Common Gateway Interface) sends thequery to DBMSs.
For the result retrieved fromdatabases, the user can ask a new question ormake a context-based refinement of the question.12 http://www.bestbuyer.co.kr/mainbbr/index.php3For training, five graduate students prepare 192questions for each language (see appendix A).The questions include negation, quantifiers,multiple conjunctions, multiple question types,various lexicography, user-defined terms,synonyms, and many value operators.
Table 4.1shows the current linguistic resourcesconstructed from the training set for bothlanguages.Resources English KoreanDomain categorydictionary132,612entries2,847entriesGeneral categorydictionary1463,121entries67,280entriesQT grammar 56 entries 14 entriesAV-TYPEgrammar96 entries 70 entriesAV-OP grammar 94 entries 93 entries[Table 4.1] Resources for the training setFor the test, we gather 779 unique queries (355for English and 424 for Korean) and 111refinement queries (19 for English and 92 forKorean) from the system log for about fourmonths (see appendix A and B).
Our system doesnot fail for the questions because of theLSP-based robustness15, but some SQL querieswith wrong constraints (2.25% for English) arecaused by undefined terms, such as ?wide TV?and ?voice multiplex,?
and by an illegal unit suchas ?cm?
and ?mm.?
16  In Korean, the rate ofwrong constraints rises to 5.67% that are mainlycaused by the irregular transiterations of theforeign words, for example, ????,??????,?
?????,?
????,??????,?
?????,?
????,?
and ???
?for ?TV.?
However, all the above errors can beeasily corrected by adding new terms.
Thisphenomenon is also true for multi-levelgrammars.
For a new linguistic expression, wesimply decompose it and disperse thecomponents throughout the grammars.13 Most of the entries are automatically extracted from targetdatabases.14 Reuse the existing dictionaries used for open-domain textquestion answering15 When the system does not find any proper constraint, itproduces a default SQL query with null constraint.16 Our databases use only ?inch?
for the size, thus a unitconverter needs to cover the errors.ConclusionWe developed a multilingual question answeringsystem on relational databases and demonstratedhigh performance and high portability inlanguages, domains, and DBMSs.
LSP-basedlinguistic processing and multi-level grammarspreserve robustness and adaptability withoutlosing the precise interpretation of user queries.In order to overcome previous problems,including the discordance between attributevocabulary and linguistic processing vocabulary,and the absence of query refinement supportingsession-based dialog, we introduced automaticlinguistic dictionary construction from databaseattribute terms, LSP-based linguistic processing,multi-level grammars, and SQL queryrefinement.By using lexico-semantic patterns, we separatelanguage-dependent processes from the others atthe earliest stage, and use the multi-levelgrammars to produce sophisticatedattribute-value tree structures to connect theattribute vocabulary and the linguistic processingvocabulary.
To treat the multiple domains andDBMSs, only SQL query generation and relatedresources are involved.
This minimization of theenvironment-dependent parts enables our systemto be widely ported on multiple environments.Future works include expansion to otherlanguages, including Japanese and Chinese.References[1] I. Androutsopoulos, G. Ritchie and P.Thanisch, ?MASQUE/SQL ?
An Efficient andPortable Natural Language Query Interface forRelational Databases,?
Proc.
of the 6thInternational Conference on Industrial &Engineering Applications of ArtificialIntelligence and Expert Systems, 1993.
[2] I. Androutsopoulos, G. Ritchie, and P.Thanisch, ?Natural Language Interfaces toDatabases ?
An Introduction,?
NaturalLanguage Engineering, Vol.
1, No.
1, 1995.
[3] J. Binot, L. Debille, D. Sedlock, and B.Vandecapelle, ?Natural Language Interfaces:A New Philosophy,?
SunExpert Magazine,January, 1991.
[4] P. Cohen, The Role of Natural Language in aMultimodal Interface, Technical Note 514,Computer Dialogue Laboratory, SRIInternational, 1991.
[5] R. Dale, H. Moisl, and H. Somers (Eds.
), ?AHandbook of Natural Language Processing,?Marcel Dekker Inc., 2000.
[6] P. Demers, A Lexical Approach to NaturalLanguage Front-end Database,http://www.cs.stu.ca/research/groups/NLL,1999.
[7] S. Harabagiu, D. Moldovan, M. Pasca, R.Mihalcea, M. Surdeanu, R. Bunescu, R. Girju,V.
Rus, and P. Morarescu, ?The Role ofLexico-Semantic Feedback in Open-DomainTextual Question-Answering,?
Proc.
of the 39thAnnual Meeting and 10th Conference of theEuropean Chapter, 2001.
[8] G. Hendrix, ?Natural Language Interface(Panel),?
Computational Linguistics, Vol.
8,No.
2, 1982.
[9] H. Jung, G. Lee, W. Choi, K. Min and J. Seo,?A Multi-lingual Question answering Systemon Relational Databases,?
Proc.
of the 13thConference on Hangeul and KoreanInformation Processing (Korean), 2001.
[10] H. Kim, K. Kim, G. Lee, and J. Seo,?MAYA: A Fast Question-answering SystemBased on a Predictive Answer Indexer,?
Proc.of the Workshop Open-Domain QuestionAnswering, the 39th Annual Meeting of ACL,2001.
[11] D. Kim, J. Cha and G. Lee, LearningInformation Extraction Patterns for the WebData Mining, Proc.
of the 13th Conference onHangeul and Korean Information Processing(Korean), 2001.
[12] G. Lee, J. Seo, S. Lee, H. Jung, B. Cho, C.Lee, B. Kwak, J. Cha, D. Kim, J. Ahn, H. Kimand K. Kim, ?SiteQ: Engineering HighPerformance QA System UsingLexico-Semantic Pattern Matching andShallow NLP,?
Proc.
of the 10th Text REtrievalConference, 2001.
[13] P. McFetridge, F. Popowich and D. Fass,?An Analysis of Compounds in HPSG(Head-driven Phrase Structure Grammar) forDatabase Queries,?
Data & KnowledgeEngineering, Vol.
20, 1996.
[14] F. Meng and W. Chu, Database QueryFormation from Natural Language usingSemantic Modeling and Statistical KeywordMeaning Disambiguation, CSD-TR 990003,University of California, 1999.
[15] A. Mikheev and S. Finch, ?Towards aWorkbench for Acquisition of DomainKnowledge from Natural Language,?
Proc.
ofthe 7th Conference of the European Chapter ofthe Association for Computational Linguistics,1995.
[16] C. Senturk, Natural Language Interfaces toDatabases, In the course of Digital Libraries,E6998-003, 1997.
[17] A. Shankar and W. Yung, gNarLI: Apractical Approach to Natural LanguageInterfaces to Databases, Term Report, HarvardUniversity, 2000.
[18] D. Silberberg and R. Semmel, ?Role-BasedSemantics for Conceptual-Level Queries,?Proc.
of the 5th KRDB Workshop, 1998.
[19] M. Templeton and J. Burger, ?Problems inNatural Language Interface to DBMS withExamples from EUFID,?
Proc.
of the 1stConference on Applied Natural LanguageProcessing, 1983.
[20] B. Thompson and F. Thompson, ?ASK isTransportable in Half a Dozen Ways,?
ACMTransactions on Office Information Systems,Vol.
3, No.
2, 1985.
[21] D. Waltz, ?An English Language QuestionAnswering System for a Large RelationalDatabase,?
Communications of the ACM, Vol.21, No.
7, 1978.
[22] D. Warren and F. Pereira, ?An EfficientEasily Adaptable System for InterpretingNatural Language Queries,?
ComputationalLinguistics, Vol.
8, 1982.
[23] W. Woods, R. Kaplan, and B. Webber, TheLunar Sciences Natural Language InformationSystem: Final Report, BBN Report 2378, BoltBeranek and Newman Inc., Cambridge,Massachusetts, 1972.
