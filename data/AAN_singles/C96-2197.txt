An Educat ion and Research Tool for Computat iona l  SemanticsKarsten Konrad 1, Holger Maier 1, David Milward 2 and Manfred PinkaP(t) Coinputer l ingu is t ik ,Un ivers i tg t  des Saar landes66041 Saarbr i i cken,  Germanykonrad ,  m aier, p inka l@col i .un i -sb .de(2) SRI  Internal ; ional ,Su i te  23, Mi l lers YardCambr idge ,  CI \]2 1RQ,  GBmi lward~cam.sr i .
comAbstractThis paper describes an interactivegraphical environment for computationalsemantics.
The system provides a teach-ing tool, a stand alone extendible gra-pher, and a library of algorithms to-gether with test suites.
The teachingtool allows users to work step by stepthrough derivations of semantic repre-sentations, and to compare the proper-ties of various semantic formalisms uchas Intensional Logic, DRT, and SituationSemantics.
The system is freely availableon the Internet.1 IntroductionThe CT,EARS tool (Computational Linguistics Ed-ucation and Research Tool in Semantics) was de-veloped as part of the FraCaS project 1 whichaimed to encourage convergence between differentsemantic formalisms.
Although formalisms uchas Intensional Logic, DR?l', and Situation Seman-tics look different on first sight, they share manycommon assumptions, and provide similar treat-meats of many phenomena.
The CLEARS tool al-lows exploration and comparison of these differentformalisms, enabling the user to get an idea of therange of possibilities of semantic onstruction.
Itis intended to be used as both a research tool anda tutoriM tool.The first part of the paper shows the poten-tial of the system for investigating the propertiesof different seinantic formMisms, and for teach-ing students formal semantics.
The next sectionoutlines the library contents and the system archi-tecture, which was designed to reflect convergencebetween theories.
The result is a highly modularand, we beliew~, a highly flexible system which1A lh'amework tor Computational Semantics, F,u-ropean Community LRE 62-051.sapp(1,2)np vpid idI Ipn v\] la!ghs annaXA.~?A (B) )~C, laughs(C)Figure 1: Initial ffepresentation of anna laughswith Aq)l{l'allows user prograrns to be integrated at variouslevels.
The final part of the paper describes thegrapher which was designed as a stand alone toolwhich can be used by various applications.2 A Tutor ia l  Sys tem forComputat ional  SemanticsAs a tutorial tool, CI, PArtS allows students to in-vestigate certain tbrmalisms and their relation-ship.
It also provides the possibility for theteacher to provide interactive demonstrations amito produce example slides and handouts.In this section we show how a user can inter-actively explore the step-by-step construction of asemantic representation ut of a syntax tree.
Fig-ures 1 and 2 show a possible initial display for thesentence "Anna laughs" in a compositional ver-sion of I)RT (Bos et al, 1994) and in 'MontagueGrammar' (Dowty et al, 198:1).The user controls the semantic constructionprocess by moving to particular nodes in thederivation tree, and performing operations by us-ing mouse double-clicks, or by selecting froln apop-up menu.
For example, clicking on app(2 ,1)1098sapp(2,1)np vpid idpn vf Ianna laughsanna XA.laughs(A)Cman(C)JIoves(C,J)woman ( J )VC.
(man(C) ~ 3J.
(Ioves(C,J) ^ woman(J)))Figure 4: 'I'ranslating I)I{T to Predicate Logicli'igure 2: Initial Representation of Anna laughswith 'Montague Grammar'slaughs(anna)I .. app(2,1) /Nnp vpI irA.laughs (A))n vnna i a!qhsanna kA.laughs (A)-Figure 3: Final Representation f Anna laughs in' Montague-Grammar'in the tree shown in l?igure 2 has the effect of ap-plying the lambda-ext)ression lA .
laughs(A)  toanna.
The resulting display is given in t,'igure 3.The poI)-up menu allows a user to per-tbrm single derivation steps.
For example,the user can first form an application termAA.hmghs(A) (anna)  and then reduce this atthe next step.
Menu options include the possibil-ity of cancelling intensional operators, performinglmnbda reduction, applying meaning postulates,and \[)RS merging.
The glenn also allows a userto choose whether or not to perform quantifierstorage or discharge, and thereby pick a particn-lar reading for a sentence.
Alterxlatively the usercan choose to fully process a node, in which caseall readings are simultaneously displayed.3 Compar ing  Theor iesA major use of the tool is for comparison of dif-ferent semantic theories and methods of seman-tic construction.
To akl comparison of theories,there are translation routines between some se-mantic tbrmalisms.
For example, \],'igure 4 showsa translation from a D|{S to a formula in Predi-cate Logic.The user can try out various options for seman-tic construction by using a menu to set variousparameters.
An illustrative subset of the parame-ters and their possible va.lues is given below:semant ic  fornta l isml,ogic of Generalized Quantitiers,lntensional Logic,Compositional 1)RT (Muskens, 1993),Aq)R'F (Bos et al, 1994),'lbp-l)own-Dl{T (Kamp and Reyle, \[993),Situation Semantics.gran l lnarsimple PSG, PSG with features,Categorial Grammar with features.parsertop-down, incremental (for CG only).lexiconsimple lexicon, lexicon with features.syntax-semant ics  mai )p lngrule-to-.rule, syntactic template.syntax-semantlcs ('onstruetlonserial, parallel.sub jec t  app l ied  to  verb  phraseyes, no.quant i f ie r  s torage me(:hanismCooper Storage (Cooper, 1983),Nested Cooper Storage (Keller, 1988)f l - reduct ionunification based, substitution based.10994 The  L ib raryBecause a tutorial system of this kind has to bebased largely on standard routines and algorithmsthat are fundamental for the area of computa-tional semantics, a secondary aim of the projectwas to provide a set of well documented programswhich could form the nucleus of a larger libraryof reusable code for this field.
Most of the librarycontents correspond irectly to particular valuesof parameter settings.
However there are some ex-tra library routines, for example a very generalisedform of flmction composition.
The library is be-ing expanded with routines for semantic onstruc-tion driven by semantic types.
It is also intendedto integrate a wider range of grammars, parsingstrategies and pronoun resolution strategies.
Forprogram documentation we largely have followedthe approach taken in LEDA (Ngher, 1993)).Apart from the routines concerned irectly withcomputational semantics, there are also routinesdesigned to aid application developers who wantto provide a graphical output tbr semantic repre-sentations.
These routines are mainly concernedwith translating from Prolog syntax into the de-scription string syntax used by the CLiG grapher.Currently they rely on the Tc l /Tk library packageprovided by Sicstus 3.4.1 Modularlsatlon PrinciplesA standard approach to modularisation is to splita problem into independent black boxes, e.g.
agrammar, a parser etc.
This top-down modulari-sation is then followed by some bottom-up mod-ularisation in the sense of supplying general utili-ties which each of the larger modules can use.
Forthis application, such an approach ad obvious in-adequacies.
For example, there are subtle differ-ences in some steps of quantifier storage accordingto the formalism being used, similarly, differenceseven in lambda reduction (for intensional logic itis natural to interleave the step of operator can-eellation between/?-reductions).
Even the parsingstage cannot be totally independent unless we gen-eralise to the worst case (the Situation Semanticsfragment requires an utterance node as well as asentence node).One of the aims in building the tool was toshow where semantic formalisms converge.
Thusthere was theoretical motivation to ensure compo-nents of the system were shared wherever possible.There was also practical motivation, since there ismore chance of finding errors in shared code.
Thesolution adopted was to use parameterised modu-larisation.
This allows differences to be located inas small pieces of code as possible (e.g.
single linesI parameterised no e formation 1I semantic construction II parameterised extraction from nodes 1- - -Figure 5: Architecture of a pm't ofthe Syntax-Semantics lnt, erfaceof tile quantifier storage routine), with the param-eters picking up the correct; piece of code at runtime.
There are some small costs due to indirec-tion (instead of calling e.g.
a /?-reducer directly,a program first calls a routine which chooses the/?-reducer according to the parameters).
But withthese parameterisation layers we provide naturalpoints where the system can be extended or modi-fied by the user.
The approach also gets rid of theneed to create large data structures which includeinformation which would be relevant for one choiceof parameters, but not the current choice.
For ex-ample, in parsing, a parameterised level chooseshow to annotate nodes so that the syntax treesonly have the relevant inibrmation for the chosensyntax-semantics strategy.
The architecture is il-lustrated in Figure 5.The result of the parameterised approach is asystem which provides several thousand possiblevalid combinations of semantic tbrmalism, gram-mar, reducer etc.
using a small amount of code.5 The Graphical  InterfaceA major part of our work on the educationaltool was the development of a general graph-ical browser or grapher for the graphical no-tations used in computational linguistics, espe-ciMly those in computational semantics uch astrees, Attribute-Value-Matrices, EKN (Barwiseand Cooper, 1993) and 1)RSs.
The grapher wasI i00written in Tcl/Tk, a programming system tbrdeveloping raphical user interfaces (Ousterhout,1994).
Two attrilmtes of Tel /Tk which were im-portant lbr this applieattion were the l)rowision oftranslation routines from graphic canvasses intoPostscript (allowing generation of diagrams uchas Figures 1 to d), and the ease of providing scal-ing routines for zooming.The grapher was designed to be extendible forfuture al)plications.
Graphical structures are de-scribed using a (les(:ril)tion stritlg, a. plain text hi--erarchical description of the object to be drawnwithout any exact positioning information, l,'orexample, the following tree:SAis created by the description string:{tree {plain-text "S"}{plain-text "NP"}{plain-text "VP"}}CLIG Call display hale,active graphical slA'llcl;llreswhich aJlow tim user to perform actions by click-ing on mouse-sensitive regions ill the display are;~.The grapher and an underlying application there-fore can behaw.'
in a way that the grapher is notonly a way to visual*st he data of t;he application,but also providc.s a real interface I)etween user andaf)plication.6 Availability of the SystemThe system ('urrently requires Sicstus 3 plus'\['cl version 7.d and 'l'k w;rsion 4.0 (or laterversions), lit, is awfilablc at the' ftp address:f tp .co l i .un i - sb .de : /pub/ f racas  or on theWWW at the UI/J,:http ://coli.
uni-sb, de/~ clears/clears, htmll;urther (toeumentation f the' system is given in(l,'raCaS, 1996a) and (FraC, aS, 1996b), which areavailable from:http://www, cogsci .ed, ac.uk/~fracas/7 ConclusionInitial reactions to demonstrations of the educa-tional tool suggest that it has the potential tobecome a widely used educatioual aid.
We alsobelieve that the programs iml~lemented and docu-mented it* this work provide the nucleus of a largerlibrary of rensab\[e programs for computational se-mantics.
Our current plans a.re to test t;\[l(', systemwith a wide (:lass of users to discover areas requir-ing extension or modification.
A longer term aimis to integrate the system with existing grammardevelol)ment environments.Acknowledgements'l'his work would not have been I)ossible withoutthe encouragement and support of the other men>hers of the l"ra(~aS Project.
We.
would especiallylike to thank Ih)bin (,'ooper, Mass*me Poe.sio andSteven lhdman for eontril)utions to the code.References.J.
Barwise and R. Cooper.
1993.
Extended l(anq~notation.
In Y. I(atagiri P. A(:zel, 1).
Israel andS.
Peters, editors, Situation 7'heorg and its Ap-plication Vol.
3, chapter 2, t)ages 29 54.
CSIA,Stanford.J.
Bos, E. Mastenbroek, S. McClashan, S. Mil-lies, and M. l'inkal.
1994.
A compositionall)i{S-based \['orm~dism for nip applic;~tions.
InProceedings of the International Workshopon Computational ,5'cmanlics, pages 21 3 ,Tilbucg.11.
(JOOl)er.
1983.
Q'uanlificalion and 5'gnlactwTttcory.
SI,AI'.
l{eidel, 1)ordrecht.I).
l)owty, R. Wall, and 8.
Peters.
1981.
Intro-duction I.o Monla(lUC ,%:man*its.
SI,A I'.
t/x~ide\[,I)ord vecht.FraCaS.
1996a.
Ih,il(ling the framework, l"racasI)eliver~d)lc l)J 5.l"ra(:aS.
1996b.
I.Jsing tim framework.
FracasDeliverable 1)16.1l.
l(amp and 11. lt.(:yle.
1993. l')zmt I)iscours(' toLogic.
Kluwer, l)ordrecht.W.
Keller.
11988.
Nested cooper storag< InU.
Reyle and C. Rohrer, editors, Natural Lan-(tltag('~ Parsing and Ling.uistic Theories, pages432 447. i/,eidel, 1)ordreeht.If.
Muskens.
1993.
A compositional discoul:serepresentation theory.
In P. l)ekker andM.
Stokhof, editors, I'rocecdings of the 9th A'mosterdam Colloquium, pages 467 48(5.
IIAX\], Uni-.versity of Amsterdam.S.
Niher.
1993.
Le(la manuM version 3.11.
'Ib.chni-eel l~eport MP1-I-93-109, IHa.x-Planck-lnstitutfiir Infornmtik, S~.~arbriicken, I"ebru~ry.a.
Ousterhout.
1994.
"Fcl and the 7'k 7'oolkii.
Pro--fessional Computing.
Addison-Wesley, I{eading,Massachusetts.i i01
