Proceedings of the IJCNLP-08 Workshop on NLP for Less Privileged Languages, pages 65?72,Hyderabad, India, January 2008. c?2008 Asian Federation of Natural Language ProcessingDesign of a Rule-based Stemmer for Natural Language Text in BengaliSandipan SarkarIBM Indiasandipan.sarkar@in.ibm.com,sandipansarkar@gmail.comSivaji BandyopadhyayComputer Science and Engineering DepartmentJadavpur University, Kolkatasbandyopadhyay@cse.jdvu.ac.inAbstractThis paper presents a rule-based approachfor finding out the stems from text in Ben-gali, a resource-poor language.
It starts byintroducing the concept of orthographicsyllable, the basic orthographic unit ofBengali.
Then it discusses the morphologi-cal structure of the tokens for differentparts of speech, formalizes the inflectionrule constructs and formulates a quantita-tive ranking measure for potential candi-date stems of a token.
These concepts areapplied in the design and implementationof an extensible architecture of a stemmersystem for Bengali text.
The accuracy ofthe system is calculated to be ~89% andabove.1 IntroductionWhile stemming systems and algorithms are beingstudied for European, Middle Eastern and FarEastern languages for sometime, such studies inIndic scripts are quite limited.
Ramanathan andRao (2003) reported a lightweight rule-basedstemmer in Hindi.
Garain et.
al.
(2005) proposed aclustering-based approach to identify stem fromBengali image documents.
Majumdar et.
al.
(2006)accepted the absence of rule-based stemmer inBengali and proposed a statistical clustering-basedapproach to discover equivalence classes of rootwords from electronic texts in different languagesincluding Bengali.
We could not find any publica-tion on Bengali stemmer following rule-based ap-proach.Our approach in this work is to identify andformalize rules in Bengali to build a stemming sys-tem with acceptable accuracy.
This paper dealswith design of such a system to stem Bengaliwords tokens tagged with their respective parts ofspeech (POS).2 Orthographic SyllableUnlike English or other Western-European lan-guages, where the basic orthographic unit is acharacter, Bengali uses syllable.
A syllable is typi-cally a vowel core, which is preceded by zero ormore consonants and followed by an optional dia-critic mark.However, the syllable we discuss here is ortho-graphic and not phonological, which can be differ-ent.
As for example, the phonological syllables ofword ????
?
[kartaa] are ?r [kar_] and ??
[taa].Whereas, the orthographic syllables will be ?
[ka]and ???
?
[rtaa] respectively.
Since the term 'syllable'is more used in phonological context, we use 'o-syllable' to refer orthographic syllables, which willbe a useful tool in this discussion.Formally, using regular expression syntax, an o-syllable can be represented as where Cis a consonant, V is a vowel and D is a diacriticmark or halant.
If one or more consonants are pre-sent, the vowel becomes a dependent vowel sign[maatraa].
* ?
?C V DWe represent the o-syllables as a triple (C, V, D)where C is a string of consonant characters, V is avowel character and D is a diacritic mark.
All ofthese elements are optional and their absence willbe denoted by ?.
V will be always represented inindependent form.We define o-syllabic length |?| of token (?)
asthe number of o-syllables in ?.Few examples are provided below:Token (?)
O-syllable Form |?|??
[maa] (?,?,?)
1????
[chaa`nd] (?,?,??)(?,a,?)
2a?s??
[agastya] (?,a,?)(?,a,?)(???,a,?)
365Token (?)
O-syllable Form |?|?????
[aaT_kaa] (?,?,?)
(?,?,??)
(?,?,?)
3Table 1: O-syllable Form Examples3 Morphological Impact of InflectionsLike English, the inflections in Bengali work as asuffix to the stem.
It typically takes the followingform:<token> ::= <stem><inflections><inflections> ::= <inflection> |<inflection><inflections>Typically Bengali word token are formed withzero or single inflection.
Example: ?????
[maayer]< ??
[maa] (stem) + ???
[yer] (inflection)However, examples are not rare where the tokenis formed by appending multiple inflections to thestem: ???
?o [karaleo] < ?r [kar_] (stem) + ??
[le](inflection) + o [o] (inflection), ??i????
?i [bhaaid-erakei] < ?
?i [bhaai] (stem) + ???
[der] (inflec-tion) + ??
[ke] (inflection) + i [i] (inflection).3.1 VerbVerb is the most complex POS in terms of in-flected word formation.
It involves most number ofinflections and complex formation rules.Like most other languages, verbs can be finiteand non-finite in Bengali.
While inflections fornon-finite verbs are not dependent on tense or per-son; finite verbs are inflected based on person (first,second and third), tense (past, present and future),aspect (simple, perfect, habitual and progressive),honour (intimate, familiar and formal), style (tradi-tional [saadhu], standard colloquial [chalit] etc.
)mood (imperative etc.)
and emphasis.
Bengali verbstems can yield more than 100 different inflectedtokens.Some examples are: ??????
[karaatis] < ???
[karaa] (stem) + ???
[tis] (inflection representingsecond person, past tense, habitual aspect, intimatehonour and colloquial style), ??i?
[khaaiba] < ??
[khaa] (stem) +i?
[iba] (inflection representingfirst person, future tense, simple aspect and tradi-tional style) etc.A verb token does not contain more than two in-flections at a time.
Second inflection representseither emphasis or negation.Example: ??
?i [aasabai] < ?s [aas_] (stem) + ?
[ba] (inflection representing first person, futuretense, simple aspect and colloquial style) + i [i](inflection representing emphasis).While appended, the inflections may affect theverb stem in four different ways:1.
Inflections can act as simple suffix and do notmake any change in the verb stem.
Examples: ???
(stem) + ?c [chchhi] (inflection) > ???
?c [karaach-chhi], ??
(stem) + ?
(inflection) > ???
[khaaba] etc.2.
Inflections can change the vowel of the firsto-syllable of the stem.
Example (the affected vow-els are in bold and underlined style): ????
??
[shudh_raa] (stem) + ?
[sa] (inflection) > (?,u,?)(?,?,??)
(?,?,?)
+ ?
> (?,o,?)
(?,?,??)
(?,?,?)
+ ?
>?????
??
[shodh_raa] + ?
> ?????
???
[shodh_raasa].3.
Inflections can change the vowel of the last o-syllable of the stem.
Example: ???
??
[aaT_kaa](stem) + ??
[chhi] (inflection) > (?,?,?)
(?,?,??)(?,?,?)
+ ??
> (?,?,?)
(?,?,??)
(?,e,?)
+ ??
> ?????
[aaT_ke] + ??
> ???????
[aaT_kechhi].4.
Inflections can change the vowel of both firstand last o-syllable of the stem.
Example: ??
?k ??
[Thok_raa] (stem) + o [o] (inflection) > (?,o,?)(?,?,??)
(?,?,?)
+ o > (?,u,?)
(?,?,??)
(?,i,?
)+ o > ??k??
[Thuk_ri] + o > ??k?
?o [Thuk_rio].3.2 NounNoun is simpler in terms of inflected token forma-tion.
Zero or more inflections are applied to nounstem to form the token.
Nouns are inflected basedon number (singular, plural), article and case [k?-raka] (nominative, accusative, instrumental, dative,ablative, genitive, locative and vocative).
Unlikeverbs, stems are not affected when inflections areapplied.
The inflections applicable to noun is a dif-ferent set than verb and the number of such inflec-tions also less in count than that of verb.Example: ??????
?i [baarhiTaarai] < ????
[baarhi](stem) + ??
[Taa] (inflection representing article) +?
[ra] (inflection representing genitive case) + i [i](inflection representing emphasis), ????????????
[maanushhaguloke] < ?????
[maanushha] (stem) +?????
[gulo] (inflection representing plural number) +??
[ke] (inflection representing accusative case) etc.3.3 PronounPronoun is almost similar to noun.
However, thereare some pronoun specific inflections, which arenot applicable to noun.
These inflections representlocation, time, amount, similarity etc.66Example: ????
[sethaa] < ??
[se] (stem) + ??
[thaa](inflection representing location).
This inflection isnot applicable to nouns.Moreover, unlike noun, a pronoun stem mayhave one or more post-inflection forms.Example: stem ???
[aami] becomes ???
[aamaa](?????
< ???
+ ??)
or ???
[mo] (??????
< ???
+ ???)
onceinflected.3.4 Other Parts of SpeechesOther POSs in Bengali behave like noun in theirinflected forms albeit the number of applicableinflections is much less comparing to that of noun.Example: ?????
[shreshhThatama] < ???
[shreshhTha] (adjective stem) + ??
[tama] (inflec-tion representing superlative degree), ?????
[madhye]< ????
[madhya] (post-position stem) + ??
[e](inflection) etc.4 Design4.1 ContextAs we identified in the previous section, the impactof inflections on stem are different for differentPOSs.
Also the applicable list of inflections variesa lot among the POSs.
Hence, if the system is POSaware, it will be able to generate more accurateresult.
This can be achieved by sending POStagged text to the stemmer system, which will ap-ply POS specific rules to discover stems.
Thisproposition is quite viable as statistical POS tag-gers like TnT (Brants, 2000) are available.The context of the proposed system is providedbelow:Figure 1: Context of Proposed Stemmer4.2 Inflection Rule ObservationsTo discover the rules, we took the help of theseminal work by Chatterji (1939).
For this workwe limited our study within traditional and stan-dard colloquial styles (dialects) of Bengali.
Foreach of the POSs, we prepared the list of applica-ble inflections considering these dialects only.
Westudied these inflections and inflected tokens andframed the rules inspired by the work of Porter(1981).
We had following observations:1.
To find out the stem, we need to replace theinflection with empty string in the word token.Hence all rules will take the following form:<inflection> ?
""2.
For rules related to verbs, the conditionals arepresent but they are dependent on the o-syllablesinstead of 'm' measure, as defined and described inPorter (1981).3.
For pronouns the inflection may change theform of the stems.
The change does not follow anyrule.
However, the number of such changes issmall enough to handle on individual basis insteadof formalizing it through rules.4.
A set of verb stems, which are called incom-plete verbs, take a completely different form thanthe stem.
Such verbs are very limited in number.Examples: ??
[Jaa] (?????
[gelaam] etc.
are validtokens for this verb), ?s (e???
[elaam] etc.
arevalid tokens), ???
[aachh_] (??????
[thaakalaam],???
[chhila] etc.
are valid tokens)5.
For non-verb POSs, there is no conditional.6.
Multiple inflections can be applied to a token.7.
The inflections may suggest mutually contra-dictory results.
As for example token ????
[kheli]can be derived by applying two legitimate inflec-tions ??
[li] and ??
[i] on two different stems ??
[khaa] and ?
?l [khel_] respectively.
Finding out thecorrect stem can be tricky.8.
Because of contradictory rules and morpho-logical similarities in different stems there will beambiguities.TaggedTextPlain Text Stemmed TextPOS Tagger Stemmer4.3 Analysis and Design DecisionsBased on the observations above we further ana-lyzed and crafted a few design decisions, which aredocumented below:POS Group Specific Inflection Sets: It is ob-served that multiple POSs behave similarly whileforming inflected word tokens.
We decided togroup them together and keep a set of inflectionsfor each such group.
By separating out inflectionsets, we are minimizing the ambiguity.We identified following inflection sets based onthe tagset developed by IIIT Hyderabad for Indiclanguages.
The tags not mentioned in the table be-low do not have any inflected forms.
Size indicatesthe number of inflections found for that set.67Set Comment SizeIN  The inflection set for noun group.
Itcovers NN, NNP, NVB, NNC andNNPC tags.40IP The inflection set for pronoun group.It covers PRP and QW tags.
This is asuperset of IN.54IV The inflection set for verb group.
Itcovers VFM, VAUX, VJJ, VRB andVNN tags.184IJ The inflection set for adjectivegroup.
It covers JJ, JVB, QF andQFNUM tags.14IR The inflection set for adverb, post-position, conjunction and noun-location POSs.
It covers RB, RBVB,PREP, NLOC and CC tags.6Table 2: POS GroupsPronoun ?
Post-inflection vs. Actual StemMap: For pronoun we decided to keep a map ofpost-inflection stems and actual stems.
After in-flection stripping, this map will be consulted todiscover the stem.
Since number of pronouns inBengali is limited in number, this approach willprovide the most effective and performancefriendly mechanism.Verb ?
Morphological Rules: Based on obser-vation 2, we further studied the verb POS and iden-tified four classes of stems that exhibits own char-acteristics of morphological changes when inflec-tions are applied.
These classes can be identifiedfor a stem ?
based on the following two meas-ures:n = |?| and2njjc?==?where cj is the number of consonants in j-th o-syllable of the stem.Class Identification CharacteristicsI If n = 1.
Example: ??
[khaa], ??
[de] etc.II If n > 1 and the n-th o-syllable has halantas diacritic mark.
Only this class of verbstems can have halant at the last o-syllable.
Example: ?r, ????
[shikh_] etc.III If n > 1, ?
= 1 and vowel of the n-th o-syllable is '?'.
Example: ??
?, ????
[shik-haa], ?????
[dourhaa] etc.IV If n > 1, ?
> 1 and vowel of the n-th o-Class Identification Characteristicssyllable is '?'.
Example: ????
?, ?m??
[dham_kaa] etc.Table 3: Verb Stem ClassesSince the verb inflections may affect the stemsby changing the vowels of first and last o-syllable,a rule related to verb inflection is presented as a 5-tuple:(L1, R1, Ln, Rn, i)where?
L1 is the vowel of the first o-syllable of post-inflection stem?
R1 is the vowel of the first o-syllable of ac-tual stem?
Ln is the vowel of the last (n-th) o-syllable ofpost-inflection stem?
Rn is the vowel of the last (n-th) o-syllable ofactual stem?
i  is the inflectionThe vowels are always presented in their inde-pendent form instead of maatraa.
This is because,we are going to apply these rules in the context ofo-syllables, which can deterministically identify,which form a vowel should take.
However, for in-flection, we decided to differentiate between de-pendent and independent forms of vowel to mini-mize the ambiguity.As for example, for the token ?
?k ?
?o, inflection iso, post-inflection stem is ?
?k ?
?, and the actual stemis ??
?k ??.
Hence the rule for this class IV verb willbe (u, o, i, ?, o).Absence of an element of the 5-tuple rule is rep-resented by '?'.
Example: for token ????
[kheye],which is derived from stem ?
?, a class I verb stem;the rule will be (e, ?, ?, ?, ??
).After completion of analysis, we captured 731such rules.
The distribution was 261, 103, 345 and22 for class I, II, III & IV combined and IV respec-tively.Map for Incomplete Verbs: For incompleteverbs, we decided to maintain a map.
This datastructure will relate the tokens to an imaginary to-ken, which can be generated from the stem using a5-tuple rule.
Taking the example of token ????
?,which is an inflected form of stem ?
?, will bemapped to ?????
[Jelaam], which can be generatedby applying rule (e, ?, ?, ?, ???).
The systemwill consult this map for each input verb token.
If68it is found, it will imply that the token is an incom-plete verb.
The corresponding imaginary token willbe retrieved to be processed by rules.Recursive Stem Discovery Process: Since mul-tiple inflections can be applied to a token, we de-cided to use a stack and a recursive process to dis-cover the inflections and the possible stems for atoken.
However, we do special processing for verbtokens, which cannot have more than two inflec-tions attached at a time and require extra morpho-logical rule processing.Ranking: Since there will be ambiguity, we de-cided to capture all candidate stems discovered andrank them.
The client of the system will be ex-pected to pick up the highest ranked stem.Our observation was ?
stems discovered bystripping a lengthier inflection are more likely tobe correct.
We decided to include the o-syllabiclength of the inflection as a contributing factor inrank calculation.Additionally, for verb stems, the nature of the 5-tuple rule will play a role.
There is a degree ofstrictness associated with these rules.
The strict-ness is defined by the number of non-?
elementsin the 5-tuple.
The stricter the rule, chances aremore that the derived stem is accurate.Taking an example ?
token ????
[kheye] can bederived from two rules: ??
[khaa] + ??
[ye] is de-rived from (e, ?, ?, ?, ??)
and ???
[khaay_]+ ??
[e]is derived from (?, ?, ?, ?, ??).
Since rule (e, ?,?, ?, ??)
is stricter, ??
should be the correct stem,and that matches with our knowledge also.Let ?
be a token and ?
is one of the candidatestem derived from inflection ?.For non-verb cases the rank of ?
will be:R?
?=For verb, the strictness of the rule that generated?
has to be considered.
Let that rule be1 1( , , , , )n nL R L R i?
=The strictness can be measured as the number ofnon-?
elements in the 5-tuple.
Element i alwaysdemands an exact match.
Moreover, (L1, R1) and(Ln, Rn) always come in pair.
Hence the strictnessS?
of rule ?
can be calculated as1 n1 n1 n1 n1,  if L  L2,  if L   L2,  if L =   L3,  if L   LandSandand?
?Hence for verb stems the rank of ?
will be:R S?
?
?= +Overchanged Verb Stems and Compensation:Because of the rule strictness ranking some verbstems might be overchanged.
As for example, to-ken ???????
[bhejaalaam] is an inflected form ofstem ????
[bhejaa].
This is a class III stem.
Thereare two relevant rules ?1 = (?, ?, ?, ?, ???)
and ?2= (e, i, ?, ?, ???)
which identifies the candidatestems ????
and ????
[bhijaa] respectively.
Since the?2 has higher strictness, ????
will rank better, whichis wrong.This type of situation only happens if the ap-plied rule satisfies following condition:(L1, R1) ?
((i, e), (e, i), (u, o), (o, u)).This effect comes because the verbs with firstvowel of these pairs at first o-syllable exhibitsmorphologically similar behaviour with such verbsfor the last vowel of the pair once inflected.????
and ????
are example of such behaviour.With inflection ??
?, both of them produce similarmorphological structure (???????
[shekhaalaam] and???????)
even though their morphology is differentat their actual stem.To compensate that, we decided to include astem to the result set without changing the first o-syllable, with same calculated rank, once such ruleis encountered.
Going back to example of ??????
?,even though we identified ????
as the stem withhighest rank, since ?2 satisfies the above condition,????
will be included with same rank as compensa-tion.Dictionary: To reduce ambiguity further, wedecided to introduce a stem dictionary, which willbe compared with potential stems.
If a matchfound, the rank of that stem will be increased witha higher degree, so that they can take precedence.Bengali word can have more than one correctspelling.
As for example, ?n?
[jan_ma] and ?n[janma] are both correct.
Similarly, ????
?
[garjaa]and ?r ??
[gar_jaa], ?r??
[bar_shhaa] and ?????
[bar-shhaa] etc.To take care of the above problem, instead ofexact match in the dictionary, we decided to intro-duce a quantitative match measure, so that sometolerance threshold can be adopted during thesearch in the dictionary.?
??
??
?= =??
?
=?= ?
???
?
?
?Edit-distance measure (Levenshtein, 1966) wasa natural choice for this.
However direct usage of69this algorithm may not be useful because of thefollowing.
For any edit operation the cost is alwayscalculated 1 in edit-distance algorithm.
This maymislead while calculating the edit-distance of apair of Bengali tokens.
As for example: The edit-distance for (????
?, ?r ??)
and (????
?, ?????
[barshaa])pairs are same, which is 1.
However, intuitively weknow that ?r ??
should be closer to ?????
than ????
?.To address the above problem we propose thatthe edit cost for diacritic marks, halant and de-pendent vowel marks should be less than that ofconsonants or independent vowels.
Similarly, editcost for diacritic marks and halant should be lessthan that of dependent vowel marks.Formally, let VO, CO, VS and DC be the set ofvowels, consonants, dependent vowel signs anddiacritic marks (including halant) in Bengali al-phabet.We define the insertion cost Ci and deletion costCd of character ?
as:1, if ( ) or ( )0.5, if ( )( ) ( )0.25, if ( )0, otherwisei dCO VOVSC CDC?
???
?
??
???
?
?= = ?
???
?We also define the substitution cost Cs of char-acter ?1 by character ?2 as:1 21 21 20, if ( )( , )( ( ), ( )), otherwises i iCMin C C?
??
?
?
?=?= ?
?We refer this modified distance measure asweighted edit-distance (WED) hereafter.Going back to the previous example, the WEDbetween ?????
and ?????
is 1 and between ?????
and ?r ?
?is 0.25.
This result matches our expectation.We proposed that the discovered stems will becompared against the dictionary items.
If the WEDis below the threshold value ?, we enhance theprevious rank value of that stem.Let D = (w1, w2, ... wM) be the dictionary of sizeM.
Let us define ??
for stem ?
as below:1( , ( ( , )))MkkMin Min WED w??
?
?==The modified rank of ?
is:100( ), if  is verb100( ),  otherwiseSR?????
??
??
??
???
+ +?
?= ?
??
+?
?The match score is raised by a factor of 100 toemphasise the dictionary match and dampen theprevious contributing ranking factors, which aretypically in the range between 0 - 20.5 System ArchitectureThe proposed system structure is provided belowusing Architecture Description Standard notation(Youngs et.
al., 1999):?system?POS TaggerStemmingEngineOrthosyllableHandler?stack?InflectionTracker?set?InflectionSets?map?PostinflectionPronouns?map?IncompleteVerbs?set?LexiconStemmer system boundary?table?VerbRulesFigure 2: Stemmer ArchitectureThe components of the system are briefly de-scribed below:StemmingEngine: It receives a tagged tokenand produces a set of candidate stems with theirassigned ranks and associated inflection.OrthosyllableHandler: This component is re-sponsible for converting a token into o-syllablesand vice-versa.
It also allows calculating the WEDbetween two Bengali tokens.InflectionTracker: While discovering the in-flections recursively, this stack will help theStemming Engine to keep track of the inflectionsdiscovered till now.InflectionSets: Contains the POS group specificinflection sets (IN, IP, IV, IJ and IR).PostinflectionPronouns: A map of post-inflection pronoun stems against their correspond-ing actual stem form.VerbRules: A table of 5-tuple verb rules alongwith their verb stem class association.
?IncompleteVerbs: A map of incomplete verbtokens against their formal imaginary forms.Lexicon: The dictionary where a discoveredstem will be searched for rank enhancement.As presented, the above design is heavily de-pendent on persisted rules, rather than hard-coded70logic.
This will bring in configurability andadaptability to the system for easily accommodat-ing other dialects to be considered in future.The high level algorithm to be used by the Stem-mingEngine is provided below:global stems;Stem(token, pos) {Search(token, pos);return stems;}Search(token, pos) {if (pos is verb and token ?
IncompleteVerbs)token ?
IncompleteVerbs[token];for (i = 1; i < token.length; i++) {candidate ?
first i characters of token;inflection ?
remaining characters of token;if (inflection ?
InflectionSets)continue;if (pos is verb) {if (inflection is representing emphasis or negation) {InflectionTracker.push(inflection);Search(candidate, pos);InflectionTracker.pop(inflection);}class ?
verb stem class of candidate;for each matching rule R in VerbRules forcandidate and class {modify candidate by applying R;a ?
inflection + inflections in InflectionTracker;r ?
rank of the candidate based on |inflection|,strictness of R and match in Lexicon;Add candidate, a and r to stems;if (R is an overchanging rule)Modify candidate by compensation logic;Add candidate, a and r to stems;} // for each} // if pos is verbelse {a ?
inflection + inflections in InflectionTracker;if (pos is pronoun andcandidate ?
Postinflection Pronouns) {candidate ?
PostinflectionPronouns[candidate];}r ?
rank of the candidate based on |inflection|and match in Lexicon;Add candidate, a and r  to stems;if (inflection != "") {InflectionTracker.push(inflection);Search(candidate, pos);InflectionTracker.pop(inflection);}} // else} // for}6 EvaluationBased on the above mentioned approach and de-sign, we developed a system using C#, XMLand .NET Framework 2.0.
We conducted the fol-lowing experiment on it.The goal of our experiment was to calculate thelevel of accuracy the proposed stemmer system canachieve.
Since the system can suggest more thanone stems, we sorted the suggested stems based onranking in descending order and picked up the first(s'i) and the next (s''i) stems.
We compared thesestems against truthed data and calculated the accu-racy measures A' and A'' as below:Let T = (t1, t2, ... tN) be the set of tokens in a cor-pus of size N, S = (?1, ?2, ... ?N) be the set oftruthed stems for those tokens.
Let s'i and s''i be thebest and second-best stems suggested by the pro-posed stemmer system for token ti.
Then we define1'( )'Nif iAN==?, where  i i1, if  = s''( )0, otherwisef i?
?= ?
?and1''( )''Nif iAN==?, where  i i1, if   (s' , s'' )''( )0, otherwisef i?
??=?
?iA' and A'' will be closer to 1 as the system accu-racy increases.Initially we ran it for three classic short storiesby Rabindranath Tagore1.
Since the proposed sys-tem accuracy will also depend upon the accuracyof the POS tagger and the dictionary coverage, torule these factors out we manually identified thePOS of the test corpus to emulate a 100% accuratePOS tagger and used an empty dictionary.
Apartfrom calculating the individual accuracies, we alsocalculated overall accuracy by considering thethree stories as a single corpus:1 i??????
????
[i`ndurer bhoj], ??????o??
[denaapaaonaa],and ???????i???
???????d??
[raamakaanaaiyer nirbuddhitaa]respectively71Corpus N A' A''RT1 519 0.888 0.988RT2 1865 0.904 0.987RT3 1416 0.903 0.999Overall 3800 0.902 0.992Table 4: Accuracies for Short Stories by TagoreAs shown above, while A'' is very good, A' isalso quite satisfactory.
We could not compare thisresult with other similar Bengali stemmer systemsdue to unavailability.
The closest stemmer systemwe found is the Hindi stemmer by Ramanathan et.al.
(2003).
It did not use a POS tagger and was runon a different corpus.
The recorded accuracy ofthat stemmer was 0.815.To check whether we can further improve on A',we introduced lexicon of 352 verb stems, ran it onthe above three pieces with ?
= 0.6 to tolerateonly the changes in maatraa and diacritic mark.We calculated A' for verbs tokens only with andwithout lexicon scenarios.
We received the follow-ing result:0.9690.9970.9550.9730.9570.9070.9900.9910.8600.8800.9000.9200.9400.9600.9801.000RT1 (Verb) RT2 (Verb) RT3 (Verb) OverallAccuracyA' (w/o Lexicon) A' (w/ Lexicon)Figure 3: Comparison of Accuracies with andwithout Verb LexiconAbove graph suggests that a lexicon can im-prove the accuracy significantly.7 ConclusionThis paper proposed a system and algorithm forstripping inflection suffixes from Bengali wordtokens based on a rule-based approach.
The con-ducted experiments produced encouraging results.Currently, our work is limited to the traditionaland standard colloquial dialects of Bengali.
Futureworks can be carried out to include other dialectsby including more inflections in the respective datastructure of this system.The system suggests a set of ranked stems for aword token.
The client of this system is expected tochoose the highest ranked stem.
This can be mis-leading for some of the cases where tokens derivedfrom different stems share low or zero edit-distance among each other.
As for example, whenthe verb token ????
can be derived from both ??
and?
?l, the system will suggest ??
over ?
?l.This problem can be addressed by taking hintsfrom word sense disambiguation (WSD) compo-nent as an input.
Further studies can be devotedtowards this idea.
Moreover, a blend of rule-basedand statistical approaches may be explored in fu-ture to improve the resultant accuracy of the stem-mer.While input from POS tagger helped to achievea good performance of this system, it is yet to bestudied how the system will perform without aPOS tagger.ReferencesS.
Chatterji.
1939.
Bhasha-prakash Bangla Vyakaran.Rupa & Co. New Delhi, IndiaM.
F. Porter.
1980.
An algorithm for suffix stripping.Program 14(3):130-137.U.
Garain and A. K. Datta.
2005.
An Approach forStemming in Symbolically Compressed Indian Lan-guage Imaged Documents.
Proceedings of the 2005Eight International Conference on Document Analy-sis and Recognition (ICDAR?05).
IEEE ComputerSocietyP.
Majumder, M. Mitra, S. Parui, G. Kole, P. Mitra, andK.
Datta.
2006.
YASS: Yet Another Suffix Stripper.ACM Transactions on Information Systems.T.
Brants .
2000.
TnT: a statistical part-of-speech tag-ger.
Proceedings of the sixth conference on Appliednatural language processing: 224-231.
Morgan Kauf-mann Publishers Inc.   San Francisco, CA, USAV.
I. Levenshtein.
1966.
Binary codes capable of cor-recting deletion, insertions and reversals.
Cybernet-ics and Control Theory, 10:707-710.R.
Youngs, D. Redmond-Pyle, P. Spaas, and E. Kahan.1999.
A standard for architecture description.
IBMSystem Journal 38(1).A.
Ramanathan and D. D. Rao.
2003.
A lightweightstemmer for hindi.
In Proc.
Workshop of Computa-tional Linguistics for South Asian Languages -Expanding Synergies with Europe, EACL-2003: 42?48.
Budapest, Hungary.72
