MARTIN KAYMORPHOLOGICAL  ANALYSISA computer program that is intended to carry out nontrivial oper-ations on texts in an ordinary language must start by recognizing thewords that the text is made up of.
This is the procedure I call morpholo-gical analysis.
It is necessary because the linguistically interesting prop-erties of words cannot be discovered by examining the words them-selves but are associated with them in an essentially arbitrary manner.Therefore, there must be a list - what we call a dictionary - to define themapping of words into linguistically interesting properties and a pro-cess to look words up in this dictionary.Many computer programs have been written in which morpholo-gical analysis consists of nothing more than accepting any unbrokenstring of letters encountered in a text as a word and referring it to adictionary.
This means that, in addition to what is usually found there,the dictionary must contain plural forms of norms, all the forms ofevery verb, regular or irregular, all adverbs, and so forth.
A machinedictionary of English constructed on these principles would containfour to six times as many entries as a standard ictionary but some ofthese ntries could presumably consist of little more than a reference tothe standard form of the word - the singular of the noun, the infinitiveof the verb, or whatever.
A modern computer could easily accommodatea dictionary of English enlarged in this way and it is an attractive thingto do if only because it reduces the problem of morphological nalysisalmost o triviality.
The increase in the size of the dictionary is morealarming in the case of a highly inflected language.
There are, however,many languages for which this solution is unthinkable and many forwhich it is clearly undesirable.
In ancient Greek, Latin, and Sanskrit,for example, it was not customary to leave spaces between words sothatGalliaestomnesdivisainpartestres206 MARTIN KAYwould have been a reasonable way for Caesar to write what would beprinted asGallia est omnes divisa in partes tresin a modern edition.
Many languages, like German, admit compotmdingas a productive part of the grammar so that words likeLebensversicherungsgeselschaftsangesteltermeaning "employee of a life insurance society " can be freely invented.Under these circumstances, the policy of referring unbroken strings ofletters to the dictionary will clearly be inadequate.In general, therefore, it is necessary to recognize lexical items in atext otherwise than by the simple fact that they are bounded by spacesor other non-alphabetic characters.
The possibility of words beingjuxtaposed without any explicit boundary must be admitted and it mayeven be desirable to divest the space of its special status as a separatoraltogether and treat it like any other member of the alphabet.
This opensthe possibility of treating many kinds of idioms and fixed phrases asordinary words that happen to contain spaces or other non-alphabeticcharacters.But there is more to morphological nalysis than recognizing lexicalitems in a connected text in the absence of explicit boundary markers.In general, when lexical items are conjoined, they undergo some changeof form.
In English, for example, the plural of nouns is regularly formedadding an s. But, if the noun ends in j, s, x, z, sh, or ch, an e is intro-duced before the s. If the singular form ends in y, then this is replacedby ies in the plural.
These changes are specified in a chapter of the gram-mar called morphographemics which is much more copious in some lan-guages than in English.
In Sanskrit, for example, morphographemicrules are applied when one word is written after another and not onlywhen grammatical ffixes are appended.
Thus, for example,rajendrais written instead ofraja indrabecause of a grammatical rule requiring a + i  to be replaced by ewherever it occurs.
Notice that rules of this kind make the use of spa-ces to delimit words almost impossible because, in a case like this, thereis no non-arbitrary way of assigning the e to the first or the second word.MORPHOLOGICAl.
ANALYSIS 207I have been treating grammatical items like inflexional affixes on alevel with other lexical items.
This seems reasonable, at least for theimmediate purpose which is simply to decompose a text into items thatare small enough to constitute a finite list in the description of the lan-guage and which are composed into larger items by productive pro-cesses.
The trouble is that texts consist of more than a concatenation flexical items occasionally modified by the action of morphographemicrules.
Words undergo productive processes formally different from,though functionally identical to, the adjunction of other lexical items.The plural that is represented in English by adding an s appears in otherlanguages by the repetition of a syllable or part of a syllable with orwithout some change in the vowel of that syllable.
In addition to pre-fixing and su~xing, some languages admit infixing, a process by whichthe string of characters representing one lexical item is interrupted bya second item.
In fact, the complete variety of the morphological pro-cesses used in the languages of the world has never been surveyed.In the remainder of this paper, I shall outline a procedure for morpho-logical analysis of which it is not too unreasonable to hope that it willaccommodate most of the languages of the world while, at the same time,being efficient enough to be considered for inclusion in practical com-puter systems in competition with more specialized methods that havebeen proposed.
The procedure I shall outline has the additional advan-tage that it can be made to blend in an interesting way with syntacticprocesses that can be expected to follow.Morphographemic rules are made available to the procedure in theform of a set of string-rewriting rules whose job is to reduce the lex-ical items in a text to canonical forms which can then be referred toa dictionary.For example, a rule approximately of the formled  --> y+edwould transform the word tried into try + ed.
The "+"  represents aboundary between a pair of lexical items; operationally, it will be alexical item in its own right and will occur as part of no other lexicalitem.Consider the stringHe tried the fusesThe morphographemic rewriting component of the system proposesthree forms for the word tried and two for the word fuses so that a to-208 MARTIN KAYtal of six strings are delivered to the next component of the system.Only one of these, namelyHe try+ed the fuseq-sis correct.
If more rewriting rules had been applied, a great many morestrings would have resulted.
In fact, if each of the words in a longersentence were given two forms by the rewriting rules, then 1024 dif-ferent strings would be generated.Clearly, what is required is the ability to work with expressions withsomething like the following form:He tr(i/y+)ed the fus(es/-~-s)in which the parentheses include alternative substrings eparated byslashes.
This should be more than just a notational convention butshould reflect the inner workings of a system in which the amountof material generated and the amount of processing to be done onit is more nearly proportional to the sum than the product of the am-biguities.Let the string to be analyzed be represented in a diagram of thefollowing kind:This kind of diagram is what I call a chart.
Each letter labels an edge.There is an initial and a final vertex and the remaining vertices corre-spond to the points in the string at which a pair of letters meet.
Whenthe rewriting process is complete, the chart will look like this:o- - -o - -o - -o  i -  - d - - - & - - ~ - - ~ - ~ o - - - o - - o - - ~ o .
- - ~H E sp T R ~ s  I) T H E sp F U S E SI 12-~-E DEach of the six strings that the morphological rewriting componentmust produce for this example is represented by a path from left toright through the chart.
Instead of rewriting in the strict sense, the ruleshave caused new edges and vertices to be added to the chart.
A rulelikei ed  -~ y+edMORPHOLOGICAL ANALYSIS 209is interpreted as an instruction to look for instances of the string iedand to introduce a new path from the vertex before i to the vertexfollowing d with the labels y, +, e, and d.There are many simple ways of representing the same logical struc-ture that a chart diagram represents inside a computer.
One is to rep-resent each edge by a quadruple (label, character, alternate, successor).Each edge has a unique label which, in the computer, can be the indexof the edge in a set of three parallel arrays in which the other compo-nents are stored.
The second component is the letter or other characterrepresented by the edge.
The alternate is the label of another edge inci-dent from the same vertex.
A vertex, in this representation, is simplythe set of edges incident from it.
The index of the first of these to beput in the chart serves also as the index of the vertex.
The remainingedges are found by taking the alternate of the first edge as the secondedge, the alternate of the second as the third, and so on until an edgeis encountered that has no alternate.
The chart displayed above, in whichthree rewriting rules have been applied to the string He tried the fusesis represented asfollows:Labd Character Alternate Successor1 H 0 22 E 0 33 sp 0 44 T 0 55 R 0 66 I 19 77 E 0 88 D 0 99 sp 0 1010 T 0 1111 H 0 1212 E 0 1313 sp 0 1414 F 0 1515 U 0 1616 S 0 1717 E 28 1818 S 0 019 Y 23 2020 + 0 2121 E 0 2214210 MARTIN KAY22 D 0 923 I 0 2424 E 0 2525 + 0 2626 E 0 2727 D 0 928 q- 0 2929 S 0 0The first 18 entries represent the characters of the original string.
Theonly changes that have been made to these are in the "alternate" col-umn for entries 6 and 17.
These correspond to the first characters ofsubstrings to which rules have applied.
Entry 6, for example, has 19 asits alternate and entries 19 through 22 represent the string y+ed.
Thesuccessor of entry 22 is 9 indicating that y+ed is a replacement for theled in entries 6, 7, and 8, the last of which also has 9 as its successor.The string led was, in fact, rewritten by two different rules so that entry19 also has an alternate and entries 23 through 27 represent the outputof the second rule.
Entry 6 is the head of an alternate chain that also con-tains 19 and 23, and these are indeed three edges that are all incidentfrom the same vertex, a vertex that we can think of as represented bythe number 6.The chart comes close to achieving the economy desired of the re-writing component of the system.
Notice, however, that there are stillthree separate dges labeled d preceding the second space.
In order tosee why this must be so, consider the following more abstract example:1) 1Lewrite a as d when it precedes b2) Rewrite b as c when it follows aIf the initial string is ab, then the rewriting process must deliver threestrings, namely ab, ac and db.
The set does not include dc.
Now look atthe diagrammatic representation.
I terpreting the rules in the moststraightforward way, one might expect to getCdMORPHOLOGICAL ANALYSIS 211But this does include a path representing the string de.
If phrases likewhen it precedes .... and when it follows .... are excluded from the rules, sothat we must say:la) Rewrite ab as ac2a) Rewrite ab as dbwe not only stress the mutual incompatibility of the two rules, but alsoproduce a situation in which the most natural interpretation of therules gives the correct result.
We now getIt is possible for rules to operate on characters resulting from theapplication of previous rules.
A compact statement of the rules of San-skrit morphology would capitalize on this possibility to a large extent.In English, it might never be used in a realistic system, but it is notdifficult to manufacture xamples that are not hopelessly implausibleeven in English.
Consider a word like cruddily.
One rule might rewritethis as cruddy+ly and a second rule might then rewrite this as crud+y+ly.Part of the input to the second rule is the final y of cruddy which thefirst rule introduced.
In the chart, this would appear as follows:~_c_c o R o__F__u o__D_.D oD__~_oxZ_o L__oYY__ o+ Y + LWhat this means is that, when substrings are being considered as candi-dates for rewriting, every path through the chart must be considered,including those that arise as a result of previous rewriting.
This bringsup the basic problem of syntactic analysis, namely, how can one guar-antee that every possibility will be explored once, but no more thanonce.
A full discussion of this problem is beyond the scope of this paper212 MARTIN KAYand I shall therefore limit the discussion to one simple but very generaltechnique which can be modified in innumerable ways in the interestsof efficiency.Let us consider just four rewriting rules taken from the morpholo-gical section of a hypothetical English recognition grammar:i es  ~ y+sied~ y+edi l y~y+lyddy~d+ yA considerable amount of space and, as we shall see, work, can be sav-ed by representing the rules also in diagrammatic form.
Althoughit is, in many ways similar to a chart, I shall use the term transition net-work, or simply network to refer to this diagram so that it will be easyto refer to both in the same context.
For the same reason, I shall referto the lines in a transition etwork as arcs rather than edges.
A networkrepresenting these four rules would be as follows:y+sS~ / , ~ ~ ~ d  Y q_ e dd+)/In this representation, if several rules begin in the same way, the similarparts are only represented once and if the similar initial parts of a setof rules are matched against a set of edges, this will be a partial test ofall the rules in the set.
In the computer, this can be represented asfol-lows:MORPHOLOGICAL ANALYSIS 213Label Character Alternate Successor Replacement1 I 7 22 E 5 33 S 4 0 - ->Y+S4 D 0 0 - -+Y+ED5 L 0 66 Y 0 0 -+Y-{ -LY7 D 0 88 D 0 99 Y 0 0 -+D+YAll parts of the network can be reached from arc number 1.
The setof alternates of arc number 1 correspond to sets of rules that differ intheir very first character.We are now ready to consider how a transition network can beapplied to a chart in such a way as to allow all applicable rules to beidentified and carried out exactly once.
Like almost all non-determin-istic procedures, this involves the use of a list of tasks that still remainto be done at any given moment during the execution of the procedure.This list is sometimes referred to as a stack because it is usual to maintainthe policy of never removing from it any but the last entry made sothat the last task remembered will always be the first to be carried out,and the word "stack"  is reserved for lists that are used in this way.I shall use another term, namely task list, because I do not wish to sug-gest any such discipline.
Indeed, it is a feature of this procedure that thetasks on the list can be carried out in any order whatsoever withoutaltering the eventual result.An entry on the task list is a triple (arc, edge, vertex).
When thetask is carried out, an attempt will be made to match the arc to the edge.If this completes the matching of tlae left-hand side of a rule with a sub-string in the chart, then some new material will be introduced intothe chart beginning at the vertex named in the triple and eliding at thevertex which is the successor of the named edge.In greater detail, the task specified by the triple <a, e, v) is carriedout as follows:1.
Let b be the alternate of a.
If b is not zero, create a new task < b,e, v ) and put it on the task list.2.
Consider the edge e and any other edges that there may be on itsalternate chain in turn.
Let d be the current edge.
Carry out the process de-214 MARTIN KAYscribed below for each new edge d. In other words, first let d = e,  then setd to the alternate of d on each occasion unless d has an alternate of O, in whichcase, stop.If the characters of the arc a and the edge d are not the same, do nothing.If they are the same and the arc has a replacement, then introduce a newsequence of edges into the chart to represent the replacement s arting atvertex v and ending at the vertex which is the successor of d. Whether ornot there is a replacement, if the arc has a successor s and the edge has a suc-cessor t, then create anew task ( s, t, v ) and put it on the task list.It will be clear from this that a task can create any number of new tasksand this is why it is necessary to keep a list of them.The entire process is set in motion by putting on the task list a task(I, w, w) for each vertex w in the chart.
Recall that, for such purposesas this, a vertex is represented by the label of its first edge and, initially,there will be exactly one edge incident from each vertex.
I might,therefore, just as well have said that a task is created for each edge inthe chart.
Tasks are now removed from the list and carried out untilnone remain.The procedure, as described so far, will result in the rules being ap-plied to the characters of the initial string and all possible results obtain-able in this way being added to the chart.
However, there is no provi-sion for applying rules to substrings that arise, in whole or in part, fromthe application of other rules.
Part of the problem can be solved by ad-ding a newtask (I, n, n) for each new vertex n that is added to the listas a result of  applying a rule.
In fact, the initial task list and these lateradditions would all be Covered by a general requirement that a task(I, n, n) is created for every vertex n added to the chart, initially orlater.
But there remains the problem of ensuring that, when new edgesare introduced incident from existing vertices, all processes that shouldapply to that edge do in fact apply.
The difficulty is that at least sometasks will already have been applied to the edges incident from thatvertex and will, by now, have disappeared without trace.
A simpleexample will show how this can arise.Suppose that the initial chart is as follows:O---.-------- O ~  Oa bMORPHOLOGICAL ANALYSIS 215and that the rules are as in the following network:CbdThe initial task list is as follows:Arc Edge Vertex1 1 11 2 2The first task is removed from the list and carried out.
Since arc number1 has an alternate, a new task is put on the list.
Since we are assumingthat the order of the task list is immaterial, et us add the new task atthe head of the list so that we now have:Arc Edge Vertex2 1 11 2 2The current edge has no alternates so that it is the only one to be con-sidered in this task.
The/abel on the edge is a and the label on the arcis b.
These do not match and the task therefore comes to an end.
Thenext task is (2, 1, 1).
Arc 2 has no alternate so that no new task has tobe created for it.
There is only one edge to be considered and arc 2does, in fact, have the same symbol as edge 1.
There is no replacementbut both arc and edge have successors.
A new task is therefore created,and we place it, as before, at the head of the list, which is now as fol-lows:Arc Edge Vertex3 2 11 2 2This new task is now immediately removed from the list to be carriedout.
Once again, there is only one edge to consider and its character is216 MART~N XA"?b.
This does not match the c on the arc and the task therefore terminates.Notice that there are now no tasks on the list with vertex number 1 sothat there is no longer any possibility of adding new edges at that vertex.The one task remaining will cause a new edge to be added at vertex 2which could have been successfully used by the task just completed.But it is now too late.
To complete the story, task (1, 2, 2) is now started,leaving the task list empty.
The arc and edge match and a replacementis made giving the following as the final chart:O?,lid - -  OThis problem can be solved in a variety of ways.
Most of them con-sist in carefully controlling the order in which items are removed fromthe task list.
For reasons that will emerge later, I shall here propose analternative solution.
With each vertex in the chart, there will be asso-ciated a wait list which will simply be a list of things to be done to anynew edge added at that vertex.
An entry on a wait list will be a couple(arc, vertex).
Whenever a new edge is added at the given vertex, anew task will be created for each item on the wait list, the required tri-ple being formed by adding the new edge to the couple on the wait list.It remains only to describe how new entries are made on a wait list.This is done in a third step which we now add to the description ofhow tasks are carried out.3.
Add the couple (a,  v ) to the wait list of the vertex to which ebelongs ~ it is not already there.In the example just considered, this will cause, among other things, acouple (3, 15 to be placed on the wait list for vertex 2.
When the newedge representing the character c is appended to this vertex, a new taskwill automatically be created, namely (3, 3, 15, where 3 is taken to bethe label of the new edge.
When this task is carried out, it will leadimmediately to the addition of a new edge at vertex 1 and the finalchart will have the desired final form, namely:dMORPHOLOGICAL ANALYSIS 217The principal problems that arise in dictionary consultation concern(1) what to look up, and (2) how to store and gain access to the diction-ary.
The problem of what to look up is the problem of deciding whichof the substrings that the chart contains at the end of the rewriting pro-cess should be referred to the dictionary.
We shall see that the approachwe take to the second of these problems is strongly conditioned by thesolution we adopt to the first.One of the earliest solutions to the problem of what to look up wasthe following: start at the beginning of the string and find the longestword in the dictionary that can be matched beginning at that point.Then repeat the process starting with the first unmatched character.This so-called longest-match procedure is easy to fault.
In a word likeunderivable, it will surely recognize under as the longest initial compo-nent and go on to forage for something in the dictionary to matchivable.
Furthermore, the scheme would doubtless have to be modifiedbefore it could be applied to data presented in the form of a chart be-cause there could be more than one longest matching initial substringif they lay on different paths.
Almost any process applied to a chartwill necessarily have to be nondeterministic.
But it is easy to see thatthe process of dictionary consultation must, in any case, be nondeter-ministic because there are many cases of morphological mbiguity.
InEnglish, there are a few words like elipses that are derivable from morethan one stem; in this case elipse and elipsis.
In other languages, uchexamples are much easier to find.
The word conti in Italian is the pluralof both conto and conte and there are many other words like it.It seems, then, that nothing less than a procedure that exhausts thecoverings of all the strings in the chart will have the generality we re-quire.
By a covering of a string I mean a segmentation f the string intonon-overlapping substrings each of which is an entry in the dictionary.The English word interminable has only one correct segmentation thatwould be deemed correct in most texts, but it has at least two coveringsby the English lexicon, for it is not only in q- terminate + able, but alsointer + mine + able.
The second analysis might possibly be consider-ed correct in a text on mining containing a sentence like These strataare not interminable with presently available machinery.Logically, there is little to distinguish dictionary consultation fromthe application of rewriting rules.
In one case strings of characters arerewritten by other strings of characters whereas, in the other, they arerewritten by strings of items of a fundamentally different kind, namelywords or the lexical descriptions of words.
The principal difference is218 MARTIN KAYthat dictionary consultation is a process that does not apply to its ownresults; the input always consists of characters and the output of words.But there are practical considerations that are usually adduced to distin-guish dictionary consultation as a special process.Dictionaries are very large relative to many of the other bodies ofdata that a linguistic omputer program must treat and it has thereforeusually been impossible to accommodate hem in the rapid-accessstore of a computer.
Reference to external files is notoriously slow andtherefore xpensive and special techniques are often necessary to makeit practical.
Now, machines are getting larger and they are frequentlydesigned so that the rapid-access store appears to be much larger thanit actually is.
But, leaving these facts aside, we nevertheless find thatthe format I suggested for the rewriting rules can readily be generalizedto accommodate a dictionary, and in ways that yield practical and effi-cient systems.The heart of the idea is to conflate the initial parts of strings whenthey are the same so that the whole set of strings is stored in the formof a tree.
The only disadvantage that this has as a storage scheme fordictionaries i that, especially near the root of the tree, an arc can havean inordinate number of alternatives so that an appreciable amount oftime would have to be expended in searching through them.
In English,for example, there are words beginning with each of the 26 letters ofthe alphabet so that it would take an average of 13 trials to find the ini-tial letter of a word.
There is a variety of ways to overcome this prob-lem.
The following is a somewhat simplified version of one that hasproved efficient, both in time and storage.
The method combines therepresentation in the form of a tree with the well known technique ofbinary search.Sort the dictionary into alphabetical order and choose a word fromsomewhere near the center of the resulting list.
This word - the wholeword and not just its first letter - will occupy the root of the tree.
Sup-pose the word is man.
Divide the dictionary in two at this point andchoose a second word from near the center of the list of words thatpreceded man.
This will occupy a node connected to the root by a linelabeled with a zero.
Suppose the word is fortune.
Now consider only thewords that precede fortune in the list, pick a word from near the middle,and connect i to the node for fortune with a line also labeled with a zero.Proceed in this manner until the first word in the dictionary isappendedto the end of the chain.
What we have now is a diagram of the fol-lowing kind:MORPHOLOGICAL ANALYSIS 219o/able 0aardvarkThe remainder of the dictionary now consists of five lists: the wordsfollowing man, the words between fortune and man and so on.
Considerfirst the words that follow man in alphabetical order.
Divide this intofour sublists according to the length of the initial substrings that thewords share with man.
Thus, there will be a sublist of words beginningwith the letters man, a sublist beginning with ma but not having an nin the third place, a sublist beginning with m but without an a in posi-tion 2, and a sublist of words that follow man in the dictionary but whichshare no initial substring with it.
Now remove the shared initial sub-strings from the beginnings of the members of these lists - three lettersfrom the members of the first list, two from the second, and so forth.The fourth list remains unchanged.
Observe that he alphabetical orderingof the lists is preserved because the same initial substring is removedfrom the beginning of all the words in a given sublist.
Now choose a(truncated) word from near the center of each sublist and connect i  tothe node for man by a link labeled with a number one greater than thenumber of letters in the initial substringjust removed from it.
For exam-ple, if matter is chosen from the third list, it is first trtmcated to atterand is then used to label a node connected to the root of the tree by alink labeled with a 3.
Repeat this process for each of the five lists, addingnew nodes below each of the existing ones.
The result will look some-thing like this:220 MARTIN KAYtJla1~er/,/erEach word in the tree (except aardvark) is connected by a link labeled" 0"  to a subtree of  words all of which precede it in alphabetical order.All other links lead from a word to a subtree of words that follow it inthe alphabet.
A link labeled n connects a word to alphabetically aterwords that differ from it in the nth position, but not before.Each of the words so far accommodated in the tree was chosen fromthe center of some sublist.
These sublists are now installed below thecorresponding words in exactly the same way.It is an entirely straightforward matter to look words up in a dic-tionary stored in this way.
The algorithm is as follows:1.
Let w be the word to be looked up and v be, initially, the root ofthe tree.2.
If w occupies node v, then announce success; otherwise continue.3.
If w precedes the word at note v in alphabetical order, then letn = 0 and skip to step 6.4.
Let n equal the first position, counting from left to right, at whichw differs from the word at node v.5.
Remove the first n-1 characters from w.6.
If there is a link labeled n below v, let v be the node at the end ofMORPHOLOGICAL ANALYSIS 22lthat link and return to step 2; otherwise announce that the word is not in thedictionary.The method is readily recognizable as a variant of the familiar techniqueknown as binary search.
The principal difference lies in the treatmentof words that share initial characters.
This modification makes possibleconsiderable conomies in storage space because common initial sub-strings are only stored in one place.
However, the variation also leadsto interesting economies in the work that must be done to identify wordsin character strings stored in the form of a chart.Suppose the rewriting procedure is changed to allow for two kindsof task, the original rewriting tasks and what I shall call dictionary tasks.A dictionary task will be represented oll the task list by a quadruple(node, edge, vertex, position) in which the edge and vertex fill thesame roles as in the rewriting task but, instead of an arc representingpart of a rewriting rule, there is a dictionary node.
Position is a numbergiving the number of characters of the substring that labels the diction-ary node which have already been matched.
A dictionary task (n,e, v, p) is carried out as follows:Is the character at "\[edge e equal to the \]character at position Ipo fnoden?
.1S ~J If the char.
\[/ at edge e is I i1?
less than the17 Let x = p I char.
at pos.p of node n,let x = 0, elselet x = 1.,/I If there is alink numberedX to a node  IlI~then create task<m, d, v, 1>.Ye~Is the last character at \]node n in position p?\]ls there aSUCCeSSOr tto edge d?create task< 11~ t~ V,p+l ) ."
Le td=t  i I f t land p = p + 1 1YesIConstruct anedge fromvertex v toSLICCCSSOr Ofedge d.Create task< r,f, f, 1).there is alink numberedp+l  toanodem and a successort of  edge d,then create task<m, t, v, 1) .222 MARTIN KAYWhenever adictionary task is carried out, a character in the diction-ary is compared with the characters associated with each of the edgesincident from a given vertex.
Paths in the chart may diverge, but theprocess of looking up substrings in the dictionary is one process up tothe point of divergence.The principal advantage of this data structure for a dictionary isthat it minimizes the cost of referring different possible analyses ofthe same word to the dictionary in cases where the differences occurmainly at the end.
The algorithm for looking words up also combineswith the string-rewriting strategy I have proposed in a happy manner.The organization also allows new words to be added to the dictionaryin a straightforward manner without disturbing the existing structure- nothing more than a new link and a single new node at the bottomof the tree is ever required.
A simple recursive strategy will restore thedictionary to the form of a simple alphabetical list.
The method of con-structing a tree of this kind from an alphabetical list that I have describ-ed was designed to make the structure clear and not as an algorithmfor incorporation in a computer program.
However, algorithms doexist, which are beyond the scope of this paper, for performing thisoperation simply and efficiently.
But the principal advantages ofdoing morphological nalysis in this way have still to be stated.The use of wait lists makes it possible, as I have already remarked,to relax any restrictions there might otherwise have been on the orderin which tasks awaiting execution are selected.
If processing is allowedto continue, the same results are guaranteed to emerge.
What thismeans is that there can be complete freedom in designing strategies thatwill increase the probability of reaching a satisfactory solution earlyin which case the option of abandoning the remaining tasks is open.For example, dictionary tasks might always be given priority over mor-phographemic rewriting tasks on the principle that a lexical item iden-tified in the text in its standard ictionary form is likely to have beencorrectly identified, especially if it occurs between on-alphabetic char-acters.
Tasks operating on parts of the chart further to the right mightbe given priority over those further to the left simply because they arenearer to reaching a conclusion.
It would even be possible to augmentthe grammar in such a way as to allow individual rules to give an expli-cit priority to the tasks they create.
I do not want to urge any one ofthese policies here, but merely to stress that the basic algorithm leavesthe field entirely open.Perhaps more important is the fact that other tasks, unconnectedMORPHOLOGICAL ANALYSIS 223with morphological nalysis can be interleaved freely between those thathave been mentioned.
The chart was originally designed for use in syn-tactic analysis 1and recent work suggests hat syntactic analysis can prof-itably be performed as a set of independent, self-synchronizing tasksas suggested here.
If these tasks are intermixed with those required formorphological nalysis, the range of possibilities for driving towardsa likely solution while foreclosing none of the possibilities allowed bythe grammar is greatly extended.
What I am proposing is, in the large,obvious: do first what is likely to lead earliest o a successful conclusionand put off other things until later.
The particular organization I havesuggested isattractive because it seems likely to lead to this goal withoutany attendant increase in programming complexity.
Indeed, these prin-ciples are likely to make for greater perspicuity of the resulting pro-gram.1 M. KAy, Experiments with a powe~fl parser, RM-5452-Ptk, Santa Monica (Cali-fornia), 1947.
