Proceedings of the ACL 2010 System Demonstrations, pages 66?71,Uppsala, Sweden, 13 July 2010. c?2010 Association for Computational LinguisticsTools for Multilingual Grammar-Based Translation on the WebAarne Ranta and Krasimir Angelov and Thomas HallgrenDepartment of Computer Science and EngineeringChalmers University of Technology and University of Gothenburgaarne@chalmers.se, krasimir@chalmers.se, hallgren@chalmers.seAbstractThis is a system demo for a set of tools fortranslating texts between multiple languagesin real time with high quality.
The translationworks on restricted languages, and is based onsemantic interlinguas.
The underlying modelis GF (Grammatical Framework), which is anopen-source toolkit for multilingual grammarimplementations.
The demo will cover up to20 parallel languages.Two related sets of tools are presented: gram-marian?s tools helping to build translators fornew domains and languages, and translator?stools helping to translate documents.
Thegrammarian?s tools are designed to make iteasy to port the technique to new applications.The translator?s tools are essential in the re-stricted language context, enabling the authorto remain in the fragments recognized by thesystem.The tools that are demonstrated will be ap-plied and developed further in the Europeanproject MOLTO (Multilingual On-Line Trans-lation) which has started in March 2010 andruns for three years.1 Translation Needs for the WebThe best-known translation tools on the web areGoogle translate1 and Systran2.
They are targeted toconsumers of web documents: users who want to findout what a given document is about.
For this purpose,browsing quality is sufficient, since the user has in-telligence and good will, and understands that she usesthe translation at her own risk.Since Google and Systran translations can be gram-matically and semantically flawed, they don?t reachpublication quality, and cannot hence be used bythe producers of web documents.
For instance, theprovider of an e-commerce site cannot take the risk thatthe product descriptions or selling conditions have er-rors that change the original intentions.There are very few automatic translation systems ac-tually in use for producers of information.
As already1www.google.com/translate2www.systransoft.comnoted by Bar-Hillel (1964), machine translation is oneof those AI-complete tasks that involves a trade-off be-tween coverage and precision, and the current main-stream systems opt for coverage.
This is also what webusers expect: they want to be able to throw just any-thing at the translation system and get something usefulback.
Precision-oriented approaches, the prime exam-ple of which is METEO (Chandioux 1977), have notbeen popular in recent years.However, from the producer?s point of view, largecoverage is not essential: unlike the consumer?s tools,their input is predictable, and can be restricted to veryspecific domains, and to content that the producersthemselves are creating in the first place.
But even insuch tasks, two severe problems remain:?
The development cost problem: a large amountof work is needed for building translators for newdomains and new languages.?
The authoring problem: since the method doesnot work for all input, the author of the source textof translation may need special training to write ina way that can be translated at all.These two problems have probably been the mainobstacles to making high-quality restricted languagetranslation more wide-spread in tasks where it wouldotherwise be applicable.
We address these problems byproviding tools that help developers of translation sys-tems on the one hand, and authors and translators?i.e.the users of the systems?on the other.In the MOLTO project (Multilingual On-Line Trans-lation)3, we have the goal to improve both the devel-opment and use of restricted language translation by anorder of magnitude, as compared with the state of theart.
As for development costs, this means that a sys-tem for many languages and with adequate quality canbe built in a matter of days rather than months.
Asfor authoring, this means that content production doesnot require the use of manuals or involve trial and er-ror, both of which can easily make the work ten timesslower than normal writing.In the proposed system demo, we will show howsome of the building blocks for MOLTO can alreadynow be used in web-based translators, although on a3 www.molto-project.eu66Figure 1: A multilingual GF grammar with reversiblemappings from a common abstract syntax to the 15 lan-guages currently available in the GF Resource Gram-mar Library.smaller scale as regards languages and application do-mains.
A running demo system is available at http://grammaticalframework.org:41296.2 Multilingual GrammarsThe translation tools are based on GF, Grammati-cal Framework4 (Ranta 2004).
GF is a grammarformalism?that is, a mathematical model of naturallanguage, equipped with a formal notation for writ-ing grammars and a computer program implementingparsing and generation which are declaratively definedby grammars.
Thus GF is comparable with formalismsuch as HPSG (Pollard and Sag 1994), LFG (Bresnan1982) or TAG (Joshi 1985).
The novel feature of GF isthe notion of multilingual grammars, which describeseveral languages simultaneously by using a commonrepresentation called abstract syntax; see Figure 1.In a multilingual GF grammar, meaning-preservingtranslation is provided as a composition of parsing andgeneration via the abstract syntax, which works as aninterlingua.
This model of translation is different fromapproaches based on other comparable grammar for-malisms, such as synchronous TAGs (Shieber and Sch-abes 1990), Pargram (Butt & al.
2002, based on LFG),LINGO Matrix (Bender and Flickinger 2005, basedon HPSG), and CLE (Core Language Engine, Alshawi1992).
These approaches use transfer rules betweenindividual languages, separate for each pair of lan-guages.Being interlingua-based, GF translation scales uplinearly to new languages without the quadratic blow-up of transfer-based systems.
In transfer-based sys-4www.grammaticalframework.orgtems, as many as n(n?
1) components (transfer func-tions) are needed to cover all language pairs in both di-rections.
In an interlingua-based system, 2n + 1 com-ponents are enough: the interlingua itself, plus trans-lations in both directions between each language andthe interlingua.
However, in GF, n + 1 componentsare sufficient, because the mappings from the abstractsyntax to each language (the concrete syntaxes) arereversible, i.e.
usable for both generation and parsing.Multilingual GF grammars can be seen as an imple-mentation of Curry?s distinction between tectogram-matical and phenogrammatical structure (Curry1961).
In GF, the tectogrammatical structure is calledabstract syntax, following standard computer scienceterminology.
It is defined by using a logical frame-work (Harper & al.
1993), whose mathematical basisis in the type theory of Martin-Lo?f (1984).
Two thingscan be noted about this architecture, both showing im-provements over state-of-the-art grammar-based trans-lation methods.First, the translation interlingua (the abstract syntax)is a powerful logical formalism, able to express se-mantical structures such as context-dependencies andanaphora (Ranta 1994).
In particular, dependent typesmake it more expressive than the type theory used inMontague grammar (Montague 1974) and employed inthe Rosetta translation project (Rosetta 1998).Second, GF uses a framework for interlinguas,rather than one universal interlingua.
This makes theinterlingual approach more light-weight and feasiblethan in systems assuming one universal interlingua,such as Rosetta and UNL, Universal Networking Lan-guage5.
It also gives more precision to special-purposetranslation: the interlingua of a GF translation system(i.e.
the abstract syntax of a multilingual grammar) canencode precisely those structures and distinctions thatare relevant for the task at hand.
Thus an interlinguafor mathematical proofs (Hallgren and Ranta 2000) isdifferent from one for commands for operating an MP3player (Perera and Ranta 2007).
The expressive powerof the logical framework is sufficient for both kinds oftasks.One important source of inspiration for GF was theWYSIWYM system (Power and Scott 1998), whichused domain-specific interlinguas and produced excel-lent quality in multilingual generation.
But the gener-ation components were hard-coded in the program, in-stead of being defined declaratively as in GF, and theywere not usable in the direction of parsing.3 Grammars and OntologiesParallel to the first development efforts of GF in thelate 1990?s, another framework idea was emerging inweb technology: XML, Extensible Mark-up Language,which unlike HTML is not a single mark-up languagebut a framework for creating custom mark-up lan-5www.undl.org67guages.
The analogy between GF and XML was seenfrom the beginning, and GF was designed as a for-malism for multilingual rendering of semantic content(Dymetman and al.
2000).
XML originated as a formatfor structuring documents and structured data serializa-tion, but a couple of its descendants, RDF(S) and OWL,developed its potential to formally express the seman-tics of data and content, serving as the fundaments ofthe emerging Semantic Web.Practically any meaning representation format canbe converted into GF?s abstract syntax, which can thenbe mapped to different target languages.
In particularthe OWL language can be seen as a syntactic sugar fora subset of Martin-Lo?f?s type theory so it is trivial toembed it in GF?s abstract syntax.The translation problem defined in terms of an on-tology is radically different from the problem of trans-lating plain text from one language to another.
Manyof the projects in which GF has been used involve pre-cisely this: a meaning representation formalized as GFabstract syntax.
Some projects build on previously ex-isting meaning representation and address mathemati-cal proofs (Hallgren and Ranta 2000), software speci-fications (Beckert & al.
2007), and mathematical exer-cises (the European project WebALT6).
Other projectsstart with semantic modelling work to build meaningrepresentations from scratch, most notably ones for di-alogue systems (Perera and Ranta 2007) in the Euro-pean project TALK7.
Yet another project, and one clos-est to web translation, is the multilingual Wiki sys-tem presented in (Meza Moreno and Bringert 2008).In this system, users can add and modify reviews ofrestaurants in three languages (English, Spanish, andSwedish).
Any change made in any of the languagesgets automatically translated to the other languages.To take an example, the OWL-to-GF mapping trans-lates OWL?s classes to GF?s categories and OWL?sproperties to GF?s functions that return propositions.As a running example in this and the next sec-tion, we will use the class of integers and thetwo-place property of being divisible (?x is divis-ible by y?).
The correspondences are as follows:Class(pp:integer ...)mcat integerObjectProperty(pp:divdomain(pp:integer)range(pp:integer))mfun div :integer -> integer -> prop4 Grammar Engineer?s ToolsIn the GF setting, building a multilingual translationsystem is equivalent to building a multilingual GF6EDC-22253, webalt.math.helsinki.fi7IST-507802, 2004?2006, www.talk-project.orggrammar, which in turn consists of two kinds of com-ponents:?
a language-independent abstract syntax, givingthe semantic model via which translation is per-formed;?
for each language, a concrete syntax mapping ab-stract syntax trees to strings in that language.While abstract syntax construction is an extra task com-pared to many other kinds of translation methods, it istechnically relatively simple, and its cost is moreoveramortized as the system is extended to new languages.Concrete syntax construction can be much more de-manding in terms of programming skills and linguis-tic knowledge, due to the complexity of natural lan-guages.
This task is where GF claims perhaps the high-est advantage over other approaches to special-purposegrammars.
The two main assets are:?
Programming language support: GF is a modernfunctional programming language, with a pow-erful type system and module system supportingmodular and collaborative programming and reuseof code.?
RGL, the GF Resource Grammar Library, im-plementing the basic linguistic details of lan-guages: inflectional morphology and syntacticcombination functions.The RGL covers fifteen languages at the moment,shown in Figure 1; see also Khegai 2006, El Dada andRanta 2007, Angelov 2008, Ranta 2009a,b, and Enacheet al 2010.
To give an example of what the libraryprovides, let us first consider the inflectional morphol-ogy.
It is presented as a set of lexicon-building func-tions such as, in English,mkV : Str -> Vi.e.
function mkV, which takes a string (Str) as its ar-gument and returns a verb (V) as its value.
The verbis, internally, an inflection table containing all formsof a verb.
The function mkV derives all these formsfrom its argument string, which is the infinitive form.
Itpredicts all regular variations: (mkV "walk") yieldsthe purely agglutinative forms walk-walks-walked-walked-walking whereas (mkV "cry") gives cry-cries-cried-cried-crying, and so on.
For irregular En-glish verbs, RGL gives a three-argument function tak-ing forms such as sing,sang,sung, but it also has a fairlycomplete lexicon of irregular verbs, so that the nor-mal application programmer who builds a lexicon onlyneeds the regular mkV function.Extending a lexicon with domain-specific vocabu-lary is typically the main part of the work of a con-crete syntax author.
Considerable work has been putinto RGL?s inflection functions to make them as ?in-telligent?
as possible and thereby ease the work of the68users of the library, who don?t know the linguistic de-tails of morphology.
For instance, even Finnish, whoseverbs have hundreds of forms and are conjugated inaccordance with around 50 conjugations, has a one-argument function mkV that yields the correct inflectiontable for 90% of Finnish verbs.As an example of a syntactic combination functionof RGL, consider a function for predication with two-place adjectives.
This function takes three arguments: atwo-place adjective, a subject noun phrase, and a com-plement noun phrase.
It returns a sentence as value:pred : A2 -> NP -> NP -> SThis function is available in all languages of RGL, eventhough the details of sentence formation are vastly dif-ferent in them.
Thus, to give the concrete syntax of theabstract (semantical) predicate div x y (?x is divisi-ble by y?
), the English grammarian can writediv x y = pred(mkA2 "divisible" "by") x yThe German grammarian can writediv x y = pred(mkA2 "teilbar" durch_Prep) x ywhich, even though superficially using different formsfrom English, generates a much more complex struc-ture: the complement preposition durch Prep takescare of rendering the argument y in the accusative case,and the sentence produced has three forms, as neededin grammatically different positions (x ist teilbar durchy in main clauses, ist x teilbar durch y after adverbs,and x durch y teilbar ist in subordinate clauses).The syntactic combinations of the RGL have theirown abstract syntax, but this abstract syntax is not theinterlingua of translation: it is only used as a library forimplementing the semantic interlingua, which is basedon an ontology and abstracts away from syntactic struc-ture.
Thus the translation equivalents in a multilingualgrammar need not use the same syntactic combinationsin different languages.
Assume, for the sake of argu-ment, that x is divisible by y is expressed in Swedishby the transitive verb construction y delar x (literally,?y divides x?).
This can be expressed easily by usingthe transitive verb predication function of the RGL andswitching the subject and object,div x y = pred (mkV2 "dela") y xThus, even though GF translation is interlingua-based,there is a component of transfer between English andSwedish.
But this transfer is performed at compiletime.
In general, the use of the large-coverage RGL as alibrary for restricted grammars is called grammar spe-cialization.
The way GF performs grammar specializa-tion is based on techniques for optimizing functionalprogramming languages, in particular partial evalua-tion (Ranta 2004, 2007).
GF also gives a possibility torun-time transfer via semantic actions on abstract syn-tax trees, but this option has rarely been needed in pre-vious applications, which helps to keep translation sys-tems simple and efficient.Figure 2: French word prediction in GF parser, sug-gesting feminine adjectives that agree with the subjectla femme.As shown in Figure 1, the RGL is currently avail-able for 15 languages, of which 12 are official lan-guages of the European Union.
A similar number ofnew languages are under construction in this collabo-rative open-source project.
Implementing a new lan-guage is an effort of 3?6 person months.5 Translator?s ToolsFor the translator?s tools, there are three different usecases:?
restricted source?
production of source in the first place?
modifying source produced earlier?
unrestricted sourceWorking with restricted source language recognizableby a GF grammar is straightforward for the translatingtool to cope with, except when there is ambiguity in thetext.
The real challenge is to help the author to keep in-side the restricted language.
This help is provided bypredictive parsing, a technique recently developed forGF (Angelov 2009)8.
Incremental parsing yields wordpredictions, which guide the author in a way similarto the T9 method9 in mobile phones.
The differencefrom T9 is that GF?s word prediction is sensitive to thegrammatical context.
Thus it does not suggest all exist-ing words, but only those words that are grammaticallycorrect in the context.
Figure 2 shows an example ofthe parser at work.
The author has started a sentence asla femme qui remplit le formulaire est co (?the womanwho fills the form is co?
), and a menu shows a list ofwords beginning with co that are given in the Frenchgrammar and possible in the context at hand; all thesewords are adjectives in the feminine form.
Notice thatthe very example shown in Figure 2 is one that is diffi-cult for n-gram-based statistical translators: the adjec-tive is so far from the subject with which it agrees thatit cannot easily be related to it.Predictive parsing is a good way to help users pro-duce translatable content in the first place.
When mod-ifying the content later, e.g.
in a wiki, it may not beoptimal, in particular if the text is long.
The text can8 Parsing in GF is polynomial with an arbitrary exponentin the worst case, but, as shown in Angelov 2009, linear inpractice with realistic grammars.9www.t9.com69Pred known A (Rel woman N (Complfill V2 form N))the woman who fills the form is knownla femme qui remplit le formulaire est connue?
?Pred known A (Rel man N (Compl fill V2form N))the man who fills the form is knownl?
homme qui remplit le formulaire est connuFigure 3: Change in one word (boldface) propagated toother words depending on it (italics).contain parts that depend on each other but are locatedfar apart.
For instance, if the word femme (?woman?)
inthe previous example is changed to homme, the preced-ing article la has to be changed to l?, and the adjectivehas to be changed to the masculine form: thus con-nue (?known?)
would become connu, and so on.
Suchchanges are notoriously difficult even for human au-thors and translators, and can easily leave a documentin an inconsistent state.
This is where another utilityof the abstract syntax comes in: in the abstract syntaxtree, all that is changed is the noun, and the regener-ated concrete syntax string automatically obeys all theagreement rules.
The process is shown in Figure 3.
Theone-word change generating the new set of documentscan be performed by editing any of the three represen-tations: the tree, the English version, or the French ver-sion.
This functionality is implemented in the GF syn-tax editor (Khegai & al.
2003).Restricted languages in the sense of GF are close tocontrolled languages, such as Attempto (Fuchs & al.2008); the examples shown in this section are actuallytaken from a GF implementation that generalizes At-tempto Controlled English to five languages (Angelovand Ranta 2009).
However, unlike typical controlledlanguages, GF does not require the absence of ambigu-ity.
In fact, when a controlled language is generalizedto new languages, lexical ambiguities in particular arehard to avoid.The predictive parser of GF does not try to resolveambiguities, but simply returns all alternatives in theparse chart.
If the target language has exactly the sameambiguity, it remains hidden in the translation.
But ifthe ambiguity does make a difference in translation, ithas to be resolved, and the system has to provide a pos-sibility of manual disambiguation by the user to guar-antee high quality.The translation tool snapshot in Figure 2 is froman actual web-based prototype.
It shows a slot in anHTML page, built by using JavaScript via the GoogleWeb Toolkit (Bringert & al.
2009).
The translationis performed using GF in a server, which is called viaHTTP.
Also client-side translators, with similar user in-terfaces, can be built by converting the whole GF gram-mar to JavaScript (Meza Moreno and Bringert 2008).6 The DemoIn the demo, we will show?
how a simple translation system is built and com-piled by using the GF grammar compiler and theresource grammar library?
how the translator is integrated in a web page?
how the translator is used in a web browser bymeans of an integrated incremental parserA preliminary demo can be seen in http://grammaticalframework.org:41296.
All thedemonstrated tools are available as open-source soft-ware from http://grammaticalframework.org.The work reported here is supported by MOLTO(Multilingual On-Line Translation.
FP7-ICT-247914).ReferencesAlshawi, H. (1992).
The Core Language Engine.
Cam-bridge, Ma: MIT Press.Angelov, K. (2008).
Type-Theoretical BulgarianGrammar.
In B. Nordstro?m and A. Ranta (Eds.
),Advances in Natural Language Processing (Go-TAL 2008), Volume 5221 of LNCS/LNAI, pp.
52?64.
URL http://www.springerlink.com/content/978-3-540-85286-5/.Angelov, K. (2009).
Incremental Parsing with ParallelMultiple Context-Free Grammars.
In Proceedings ofEACL?09, Athens.Angelov, K. and A. Ranta (2009).
Implementing Con-trolled Languages in GF.
In Proceedings of CNL-2009, Marettimo, LNCS.
to appear.Bar-Hillel, Y.
(1964).
Language and Information.Reading, MA: Addison-Wesley.Beckert, B., R. Ha?hnle, and P. H. Schmitt (Eds.)
(2007).Verification of Object-Oriented Software: The KeYApproach.
LNCS 4334.
Springer-Verlag.Bender, E. M. and D. Flickinger (2005).
Rapidprototyping of scalable grammars: Towards mod-ularity in extensions to a language-independentcore.
In Proceedings of the 2nd InternationalJoint Conference on Natural Language Process-ing IJCNLP-05 (Posters/Demos), Jeju Island, Ko-rea.
URL http://faculty.washington.edu/ebender/papers/modules05.pdf.Bresnan, J.
(Ed.)
(1982).
The Mental Representation ofGrammatical Relations.
MIT Press.Bringert, B., K. Angelov, and A. Ranta (2009).
Gram-matical Framework Web Service.
In Proceedings ofEACL?09, Athens.70Butt, M., H. Dyvik, T. H. King, H. Masuichi,and C. Rohrer (2002).
The Parallel GrammarProject.
In COLING 2002, Workshop on Gram-mar Engineering and Evaluation, pp.
1?7.
URLhttp://www2.parc.com/isl/groups/nltt/pargram/buttetal-coling02.pdf.Chandioux, J.
(1976).
ME?TE?O: un syste`meope?rationnel pour la traduction automatique des bul-letins me?te?reologiques destine?s au grand public.META 21, 127?133.Curry, H. B.
(1961).
Some logical aspects of gram-matical structure.
In R. Jakobson (Ed.
), Structure ofLanguage and its Mathematical Aspects: Proceed-ings of the Twelfth Symposium in Applied Mathemat-ics, pp.
56?68.
American Mathematical Society.Dada, A. E. and A. Ranta (2007).
Implementing anOpen Source Arabic Resource Grammar in GF.
InM.
Mughazy (Ed.
), Perspectives on Arabic Linguis-tics XX, pp.
209?232.
John Benjamin?s.Dean, M. and G. Schreiber (2004).
OWL Web On-tology Language Reference.
URL http://www.w3.org/TR/owl-ref/.Dymetman, M., V. Lux, and A. Ranta (2000).XML and multilingual document author-ing: Convergent trends.
In COLING,Saarbru?cken, Germany, pp.
243?249.
URLhttp://www.cs.chalmers.se/?aarne/articles/coling2000.ps.gz.Enache, R., A. Ranta, and K. Angelov (2010).
AnOpen-Source Computational Grammar for Roma-nian.
In A. Gelbukh (Ed.
), Intelligent Text Process-ing and Computational Linguistics (CICLing-2010),Iasi, Romania, March 2010, LNCS, to appear.Fuchs, N. E., K. Kaljurand, and T. Kuhn (2008).Attempto Controlled English for Knowledge Rep-resentation.
In C. Baroglio, P. A. Bonatti,J.
Ma?uszyn?ski, M. Marchiori, A. Polleres, andS.
Schaffert (Eds.
), Reasoning Web, Fourth Inter-national Summer School 2008, Number 5224 inLecture Notes in Computer Science, pp.
104?124.Springer.Hallgren, T. and A. Ranta (2000).
An exten-sible proof text editor.
In M. Parigot andA.
Voronkov (Eds.
), LPAR-2000, Volume 1955of LNCS/LNAI, pp.
70?84.
Springer.
URLhttp://www.cs.chalmers.se/?aarne/articles/lpar2000.ps.gz.Harper, R., F. Honsell, and G. Plotkin (1993).
AFramework for Defining Logics.
JACM 40(1), 143?184.Joshi, A.
(1985).
Tree-adjoining grammars: Howmuch context-sensitivity is required to provide rea-sonable structural descriptions.
In D. Dowty,L.
Karttunen, and A. Zwicky (Eds.
), Natural Lan-guage Parsing, pp.
206?250.
Cambridge UniversityPress.Khegai, J.
(2006).
GF Parallel Resource Grammars andRussian.
In Coling/ACL 2006, pp.
475?482.Khegai, J., B. Nordstro?m, and A. Ranta (2003).Multilingual Syntax Editing in GF.
In A. Gel-bukh (Ed.
), Intelligent Text Processing andComputational Linguistics (CICLing-2003),Mexico City, February 2003, Volume 2588 ofLNCS, pp.
453?464.
Springer-Verlag.
URLhttp://www.cs.chalmers.se/?aarne/articles/mexico.ps.gz.Martin-Lo?f, P. (1984).
Intuitionistic Type Theory.Napoli: Bibliopolis.Meza Moreno, M. S. and B. Bringert (2008).
Inter-active Multilingual Web Applications with Gram-marical Framework.
In B. Nordstro?m and A.
Ranta(Eds.
), Advances in Natural Language Processing(GoTAL 2008), Volume 5221 of LNCS/LNAI, pp.336?347.
URL http://www.springerlink.com/content/978-3-540-85286-5/.Montague, R. (1974).
Formal Philosophy.
NewHaven: Yale University Press.
Collected papersedited by Richmond Thomason.Perera, N. and A. Ranta (2007).
Dialogue SystemLocalization with the GF Resource GrammarLibrary.
In SPEECHGRAM 2007: ACL Workshopon Grammar-Based Approaches to Spoken Lan-guage Processing, June 29, 2007, Prague.
URLhttp://www.cs.chalmers.se/?aarne/articles/perera-ranta.pdf.Pollard, C. and I.
Sag (1994).
Head-Driven PhraseStructure Grammar.
University of Chicago Press.Power, R. and D. Scott (1998).
Multilingual authoringusing feedback texts.
In COLING-ACL.Ranta, A.
(1994).
Type Theoretical Grammar.
OxfordUniversity Press.Ranta, A.
(2004).
Grammatical Framework: AType-Theoretical Grammar Formalism.
The Jour-nal of Functional Programming 14(2), 145?189.
URL http://www.cs.chalmers.se/?aarne/articles/gf-jfp.ps.gz.Ranta, A.
(2009a).
Grammars as Software Li-braries.
In Y. Bertot, G. Huet, J.-J.
Le?vy, andG.
Plotkin (Eds.
), From Semantics to ComputerScience.
Cambridge University Press.
URLhttp://www.cs.chalmers.se/?aarne/articles/libraries-kahn.pdf.Ranta, A.
(2009b).
The GF Resource Gram-mar Library.
In Linguistic Issues in Lan-guage Technology, Vol.
2.
URL http://elanguage.net/journals/index.php/lilt/article/viewFile/214/158.Rosetta, M. T. (1994).
Compositional Translation.Dordrecht: Kluwer.Shieber, S. M. and Y. Schabes (1990).
Synchronoustree-adjoining grammars.
In COLING, pp.
253?258.71
