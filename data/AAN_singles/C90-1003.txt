Semantic Abstraction and AnaphoraMark JohnsonBrown UniversityMartin KayXerox Pale Alto Research Center and Stanford UniversityAbstractThis paper describes a way of expressing syn-tactic rules that ~kssociate semantic formulaewith strings, but in a manner thai is inde-pendent of the syntactic details of these for-mulac.
In particular we show how the samerules construct predicate argument formulaein the style of Montague grammar\[131, rap_resentations reminiscent of situation seman-tics(Barwise and Perry 121) and of the eventlogic of Davidson \[5\], or representations in-spired by the discourse representations pro-posed by Kamp \[191.
The idea is that seman-tic representations are specilied indirectly us-ing semantic onstruction operators, which en-force an abstraction barrier between the gram-mar and the semantic representations them-selves.
First we present a simple grammarwhich is compatible with the three differentsets of constructors for the three formalisms.We then extend the grammar to provide onetreatment that accounts for quantilier aising inthe three different semantic formalismsIntroductionGrammars pecifying the relationship betweenstrings and semantic representations often havedetails of these representations embedded inthem.
We show how grammar rules can bewrilten in a form which, by abstracting awayfrom details of tim semantic representation, ac-quires greater modularity and hence theoreticalperspicuity and practical robustness.
In partic-ular, we believe that the approach elps clarifythe relationship between apparently disparatetheories of semantic representation.
1.
The basisof our proposal is that each grammatical ruleshould contain, or be paired with, an expres-sion written in terms el' sem~mtic onstructionoperators.
Different operations can be associ-ated with these operators and, depending onthe set in force at a given time, the effect ofinterpreting the expression will be to constructa representation i  one semantic formalism oranother.
The set of operators contains me,n-bets corresponding to such notions as compo-sitzon, conjttlwtion, etc.
The set is small and in-dependent of the semantic formalism.
The op-erations are associated with the operators inde-pendently of the grammar and they determinethe form of the semantic representation.We present three different sets of seman-tic constructors here, which we have dubbedthe predicate-logic, the sets-of-infons and thediscourse-representatio,z c nstructors.
We be-gin by introducing the constructors used in thispaper: no claims are made for their generalsufficiency.
Not all of the constructors are rel-evant to all semantic theories and those notneeded for a particular one are given degen-crate delinitions.
The simplest kind of con-struction operator is the identity function whichmaps every input i onto just one output, namelyi.The operators are the following:1 The kind of separmion between the granmar and the details ofthe semanlic representation proposed here also aplxmrs in the examplesof Pcreira and Shiebcr\[12\] and in I.cxicaI-Functional Grammar (see\[6\]).
Our use of different scls of semantic onstructors with a singlegrammar  is IR)VCI, aS fa\[ aS We are awarg.1 17emterr~aI(S, EF)  relates a semantic represen-tation S and an external form EF,  e.g.
arepresentation that constitutes the parscr'soutput.
The internal and cxtemal forms aredistinguished because the (internal) repre-sentation o c will, in general, contain infor-mation that plays a role in the process of an-alyzing a sentence (e.g.
for anaphora track-ing) but that is not part of the logical form(EF) of the sentence as a whole.atom( S, I'rop) specifies that the content ofthe (internal) semantic representation, S isthe atomic proposition l)rop.
This is usedto construct he semantic values for lexicalentries, for example.co~jo~:~z(S1, $2, $12) relates three semanticrepresentations.
It specifies that the contentof 5'12 is constructed by conjoining 5'1 and5'2.
This operator occurs crucially in thesemantics of indefinite determiners.7~etv_iT~de,~(S, i)  specifics that the content of5" is I, a referential index for a non-anaphoricNP.
The form of a referential index is de-fined by the particular semantic theory.accessible_iTzdez(S, I) specifies that the con-tent of o e is a referential index i of somenoun phrase that is a potential antecedent ofan anaphor.
Constraints on accessible in-dices are defined by the particular semantictheory.While the primitives discussed in this paperhave relatively simple definitions, in othermore elaborate theories they may involve non-trivial computation.
For example, the com-pose primitive might impose certain discourse-consistency requirements arising from a morerestrictive theory of discourse structure thanthose described here.A key insight of the Discourse Repre-sentation and Situation Semantics accounts,but originating with Karttunen\[10\], is thatanaphoric and quantificational domains coin-cide.
Thus, in (1), it can be co-indexed with adonkey only if a donkey is interpreted as hav-ing wide-scope.
(1) Every man kicked a donkey.
Itdeveloped blue bumps.The relationship between these sentences i oneof (semantic) precedence, and we call the op-erator that relates the corresponding semanticrepresentations compose:corr~pose(S1, $2,5'12) specifies that the infor-mation in the representation $12 is the in-formation in $1 followed by the informa-tion in $2.
Compose defines an ordering ofsemantic operations that particular semantictheories may or may not be sensitive to.
(Inthis paper, the Montague constructors are notsensitive to this ordering, while the other twotypes of semantic representations are).When a donkey is interpreted as having nar-row scope with respect o every man in (1),the reference marker introduced by a donkeyis located in a context subordinate to the sen-tence as a whole, and hence not accessible toanaphors in the following discourse.
To pro-vide for this, we introduce the following op-erator:sttbordiTzate( S, ,5'ztb ?f an~e, S ztb ) specifies thatS contains an anaphorically and quantili-cationally subordinate representation Sub,which has the "name"  Sz~bName.
TheS~LbName would be distinguished fromSub in non-extensional theories of meaning,where a meaning is distinguished from itspropositional content (say), as in the sets-of-infons representation described below.We turn now to the grammar withoutquantifier-raising.
We formulate bolh thegrammar and the semantic onstructors in pureProlog (exploiting the syntactic sugar of Def-inite Clause Grammar (Pereira and Shieber\[121, pp.
70-79)) because it is expressiveenough for our purposes and is widely usedin work of this kind(sec, inter alia Colmerauer\[31, Abramson and Dahl \[ll and \[11\]).A Grammar using SemanticConstructorsThe grammar generates imple transitiveclauses and subject-relative clauses that do not18 2involve long-distance dependencies, it is basedon the Montague-style grammars presented inChapter 4 of Pereira and Shieber\[12\], andthe treatments of agreement, Wh-dependencies,etc., presented there could also be incorporatedwithout difficulty.
* Operators :  ** for  lambda abst rac ts ,  ** = > fo r  imp l J caL ion .
**************************************?
op (950,  x fy ,  ^) .
:- op(300 ,  xfx, :::>).parse(StL r \ ]  ng ,Ext ;Sem)  '-cx t .e rna \ ]  ( In tSem,  ExtSem)  ,s ( \ ]n tSem,  S t r Jng ,  \[\]) .
* The grammar  *s (S)  - ->  np(VP^S) ,  vp(VP)  .np(NP)  - ->  det  (N I^NP) ,  n l (N \ ] )  .n l (N)  - ->  rl(N) .n\] (X~S)  - ->  n(X^S\ ] ) ,  r c{X~S2) ,{con jo in  (S I ,S2 ,S )  } .vp( ' (^S)  - ->  v (X^VP) ,  np(VP^S)  .r c  (VP) - ->  \ [ that \ ]  , vp  (VP) .v (X"Y^S)  - ->  \ [Verb \ ] ,{verb  (Verb ,  X^Y^Pred)  ,a tom(Pred ,  S) } .n (X"S)  - ->  \ [Noun\ ] ,{noun (Noun,X^Pred)  ,new index(X ,  S I )  ,a tom(Pred ,  $2)  ,compose(S \ ] .
,S2 ,  S) } .det  ( (X^Res)  ^ (X^Scope)  ~S) - > \[\])et\] ,{determJnor (1 )e t ,  Res~Scope^S)  } .np( (X^SI )^S)  - ->  \ [P ronoun\ ] ,{pronoun ( I ?
ronoun)  ,access ib le  index  (X, S2)  ,compose  (S\] , S2,  S) }.
* The  lex icon  *pronoun(he)  .p ronoun(she)  .p ronoun (h im)  .p ronoun (her )  .p ronoun( i t )  .verb( l i kes ,  X^Y- l i kes  (X ,Y ) )  .verb  (saw,  X^Y^see(X ,Y ) )  .verb(beats ,  X^Y^beat (X ,Y ) )  .verb(owns ,  X^Y^own(X ,Y )  .noun (woman, X^woman(X) )  .noun  (man, X^man (X)) .noun  (donkey,  X^donkey(X)  ) .determiner  (a, Res^Scope^S ) :-con jo in (Res ,  Scope ,  S) .determiner  (every ,Res0^Scope~S ) :-compose(S \ ] ,  $2,  S) ,subord inate(Res ,  ResName,  S l )  ,compose(Res0 ,  Res l ,  Res)  ,subord inate  (Scope ,  ScopeName,  Res l )  ,atom(ResName > ScopeName,  $2) .Most of the grammar should be familiar, evenif it is somewhat more pedantically expressedthan is usual.
Following Pereira and Shieber(who were in turn inspired by Montague), VPand N incomings are represented by terms ofthe form x ^ S, where X represents a referentialindex and S represents an S meaning.
NPmeanings are represented by terms of the formvp^S (or equivalently, (x^s0)^S) ,  wherevp represents a VP meaning, x a referentialindex, and S and S0 represent S meanings.All manipulation of semantic values is per-tbrmed by constructor primitives, rather thanby explicit conslruction of terms.
For exam-ple, the N1 production that introduces relative-clauses invokes con  jo in  explicitly to conjointhe semantic values of the N and the relativeclause to yield the semantic value of the N I.The sharing of the referential index x bctweenthe N and the VP is performed in the gram-mar alone, since it is a syntactic rather thansemantic property of the construction.The semantic component of the productionthat introduces lexical nouns has two parts.
SOrepresents the atomic predicate Pced  associ-ated with the Icxical meaning of the noun.
$2represents the fact that x is a (possibly new)referential index.
The component S of the se-mantic value associated with the noun containsall of the information in SO and S2.The production introducing (lexical) pro-nouns requires that the referential index x ofthe pronoun be accessible in S0, and speci-fies that the S component is the compositionof S0 and the S0 component of the VP mean-ing.
(Recall that the semantic representationsof pronouns, like all NP's, are terms of the3 19form VP^S, so the SO is a component of themeaning of the VP or V phrase that this pro-noun is an argument of).Undoubtedly the most complex componentof the grammar is the lexical entry for every.Because the structure of the lexical entries forall anaphoric scope-inducing quantifiers will besimilar to the entry for every, wE explain it insome detail.The quantification induced by the deter-miner every is described in terms of the de-ternaincr's restriction, which defines the enti-ties that the quantification ranges over, and itsscope, the component of the expression quart-tiffed over.
(2) indicates the components of theutterance corresponding to the restriction andthe scope of the quantifier every in the absenceof quantilier-raising.
(2) Every man that saw a donkey kicked it.Restrictor ScopeThe grammars presented here identify the re-stricter and the scope of a determiner in thesyntax; e.g.
quantifier-raising arises from thegrammar permitting multiple a.ssignmcnts ofcomponents of the utterance to the restrictionsand scopes of the determiners of that utterance.The semantic value associated with lex-ical entry for a determiner in the gram-mars presented here is a term of the formRes~Scol)e~Sentence, where lees is the seman-tic value associated with the restrictor andScope is the semantic value associated withthe scope.
A grammar directly constructingpredicate-logic style semantic representationswould assign the lexical entry in (3) to the de-terminer every, where '==>' is interpreted astire implication operator in semantic represen-tations (see Pcreira and Shieber \[1211).
(3) determiner(every,R es ^ Scope 7R es=: >Scope)).Tiffs 1cxical entry does not suffice for our pur-poses, since it provides no information aboutthe relative anaphoric scope relationships be-tween the restrictor, the scope, and that portionof the utterance xternal to the quantificationalexpression as a whole.Anaphors in opaque quantificational expres-sions can refer to entities superordinate tothe quantificational expression, but in generalanaphors outside of an opaque quantificationalexpression cannot refer to entities introduced ineither the restriction or scope of the quantili-cational expression 2.
Anaphors in the scope ofan opaque quantificational expression can referto entities introduced in the restriction of thatexpression (e.g.
as in (3) above), but anaphorsin the restriction cannot refer to entities intro-duced in the scope.The compose and subord inate  predi-cates in the lexical entry for every in the gram-mar presented above express ubordination re-lationships that describe the behavior of opaquedeterminers.
The semantic representation S isthe composition of S1 and $2, where S2 isthe semantic atom ResName =-> Scope-Name.
Re s is subordinate to S1, and is itselfthe composition of ResO and Resl, whereRes0 is the semantic representation f the re-stricter.
Scope  is subordinate to Res l ,  andis the semantic representation of the scope.The diagram on the following page sketchesthe relationship between the various semanticentities mentioned in the lexical entry for ev-ery.
Subordination relationships are depictedby vertical lines (the name of the subordinatespace is written alongside the line), and compo-sition relationships are indicated by V-shapeddiagonals.The  Predicate-Logic Const ructorsThese constructors build a predicate-logictype of semantic reprcscntation i  a fairlytransparent fashion.
Pronouns are treated asfree variables, there are no constraints ontheir distribution, and anaphoric binding is not9" There are exceptions to this: for example, anaphors can referto proper names inlJoduced in the restrictor or scoix~ of opaque de-tetvniners.
Within the framework described below, this curl be trealedby adding a new semantic construction operator add  top  leve l ,which adds a referential irxtex to the most superordinatc level20 4ScopeScopeNameRes0 ReslResResName ==> ScopeName$1 $2Streated.
Thus the definitions of the constructorsnew index, access ib le  index, com-pose  and subord inate  have degeneratedefinitions.A property is identical with the term repro-senting it:atom(Prop ,  P rop) .The conjunction of P and Q is represented bythe term P &Q.conjo in  (p, P,PSQ) .There are no constraints on new indices.new index(  , ) .Th(-re are no constraints on accessible indices.access ib le  index  ( , ) .Sequencing is unimportant.compose  (P ,  P ,  P)  .A Subordinate space can be introduced freely.subord inate(  ,Sub ,  Sub)  .Inlemal and external forms are identical.externa l  (P ,  P)  .The grammar described abovepredicate-logic constructors yieldsuch as the following:2-  p ( \ [a ,man,  owns ,a ,donkey\ ] ,S )  .S =: man (X) &donkey  (Y) Sown (X, Y)and theanalyses2-  p ( \ [every ,man, that ,owns ,a ,donkey ,beats , i t \ ] ,S )  .S =: (man(X)&donkey(Y)&own(X ,Y ) )==>beat  (X ,Z)Roughly this latter form might be interpretedas: if X is a m~m and Y is a donkey and Xowns Y, then there is a Z such that X beats Z.The Sets-of-In fens ConstructorsThe constructors for the sets-of-infons andthe discourse-representation both constrainanaphora by requiring that the referential in-dices provided by the access ib le  indexconstructor be indices that were introducedby new index  in some earlier representation(where precedence is defined by the composeconstmclor).
This entails that tile internal formof these semantic representations encode infor-mation about preceding representations.
Bothconstructors thread this information using thedifference-list technique described in \[8\].The primitive element of tile sets-of-infonsrepresentation is inspired by the infons of Situ-ation Semantics \[21.
We represent an infon asa term of the form S i t  : P, which means thatp is true in the situation S i t .
For example,Kim's sleeping in situation sO is representedby s0 :s leep  (k im) .
For simplicity arbitrar-ily named constants (like the gensyms of Lisp)are used as the names of situations in this rep-resentation: this has the disadvantage that thedefinitions o1 the external and subordinate con-strutters are not declaratively specified.
3The internal form of a sets of i@)ns rep-resentation has three components.
We repre-sent them in Prolog with a term of the form@(s i t s ,  In fonstn ,  In fonsOut ) .
Thefirst is a stack whose top element is the situa-tion currently being defined, and whose otherelements are the situations uperordinate o thisone (as defined by the subord inate  con-structor).
The second component is the setof all infons introduced in representations pre-ceding this one.
The infons in this list as-sociated with the current or a superordinatesituation provide the information needed forthe access ib le  index  constructor.
Thethird component of the representation is the set3 All lhat is required is that there is an infinite stock of situationnames, so e.g.
integers could have Ixren used as situation ames at tileexpense of a slight complication of lhe represenlation's data structures.5 21of inRms introduced in preceding representa-tions with the addition any infons added to therepresentation by the semantic representationconstructor.
In describing the term @ (S i t s ,I n fon In ,  In fonsOut ) ,  we use the namesTnfons In  and In fonsOut  to stress the factthat they constitute a difference list.?
- op ( 900, x fx ,  : ) .a tom( \ ]  ), @( \ [S i t I _ \ ] , I s ,  \ [ (S i t :P ) I I s \ ] ) ) .compose(@ (Ss, I0s , I l s )  ,@ (Ss, I ls ,  I2s)  ,@ (Ss, I0s,  I2s)  ) .con jo in ( I I ,  I2, I12) "-compose( I i ,  I2, I12) .subord inate  (@ ( \ [S i t  IS i ts \ ]  , 10s , I l s )  ,S i t ,  @ (Sits,  I0s,  I ls)  ) :-gensym (Sit)  .new index  ( Index,  S) ?
-a tom( i ( Index) ,S )  .access ib le  index  ( Index ,@ (Ss, Is, Is))  :-member  (S i t  : i ( Index)  , Is ) ,member  (S i t ,Ss )  .ex terna l (@( \ [S i t \ ] ,  \[\], Is) ,  S i t : I s )  :-gensym(S i t )  .The atom constructor introduces a newatomic proposition p as an infon S i t :P ,where S i t  is the situation currently beingconstructed.
Notice that In fonsOut  is thesame as In fons In  but for the addition of(Sit:P).The compose constructor threads the dif-ference list of infons through both of the rep-resentations, o the composed representationcontains all of the infons added to the sets ofinfons composed.
The con jo in  constructoris equivalent to the compose  constructor.The subord inate  constructor introducesa new subordinate representation by pushing anew situation ame Sit on to the list of (nowsuperordinate) situations.
The difference listof infons is threaded through the subordinaterepresentation so that any infons added to itwill appear in the superordinate r presentationas well.The new index  constructor adds an atomof the form i ( Index)  to the representationS: no constraints are placed on Index .The access ib le  index  4 constructor is,1 rl'he predicate member  used here, and elsewhere in this paper,Ires its standard logical definition: viz: member  (X, \[X I \] ) ?member (X ,  { , L \ ] )  : -  member (X ,  L ) .
\]f this definkion issatisfied for a referential index Index  ifIndex  was introduced by new index  toIa preceding non-subordinate representation,i.e.
if the context contains an infonS i t : i  ( Index) ,  where S i t  is the current ora superordinate situation ame.The external  (Internal, Exter-nal) predicate initializes In terna l  to haveno superordinate situations and no precedingcontext, and returns the list of infons associatedwith this Internal representation as its externalform.When these constnmtors are used with thegrammar defined above, the following analysesare obtained:2- p ( \[a, man,  owns ,  a, donkey\ ]  , S) .S = sO: \ [S0 :own(X ,Y ) , s0 : i (Y ) ,sO :donkey(Y) ,S0 : i (X )  , sO :man(X)  \]This can be paraphrased as: Situation S0 con-tains individuals X and Y; in .sO X is a man,Y is a donkey and X owns Y.2- p(  \ [every ,  man,  owns ,a ,donkey\ ] ,S )  .S = s0: \ [S0 :s l==>s2,S2:own(X ,Y )  ,s2 : i (Y )  , s2 :donkey(Y) ,s l : i (X )  ,S l :man(X)  \]This can be paraphrased as: Situation .sO con-tains the fact that all situations of type s l arealso situations of type s2.
A situation is of typesl  if it contains individuals X and Y, and Xis a man and Y is a donkey.
A situation is oftype s2 if X owns Y.?- p(  \ [every,  man,  that ,  owns ,a ,donkey ,beats ,  it\] ,S) .S = s0: \ [ s0 :s l==>s2,  s2 :beat  (X,Y) ,sl :own (X, Y) , s l : i  (Y) , s l :donkey(Y) ,s l : i (X ) , s l :man(X) \ ]This can be paraphrased as: Situation s0contains the fact that all situations of type ,slare also situations of type s2.
A situation is oftype sl if it contains individuals X and Y, Xused with the grammars and constructors given in this paper, the SLDselect.ion rule of Prolog may lead to hen-termination.
It is in generalnecessary to delay the evaluation of the member  predicate uotil itssecond argument is instantiated, which can tx: done using the f reezeprimitive of Prolog I\[.22 6is a man,  Y is a donkey  and X owns Y.s i tuat ion is of  type a2 i f  X beats y .5The Discourse-RepresentationConstructorsAThe representations built by these construc-tors are inspired by the "box representations"of Kamp's (1981) Discourse RepresentationTheory \[9\].
A discourse representation "box"is represented by the list of items that con-stitute its contents.
A representation is adifference-pair of the lists of the representa-tions of the currently open boxes (i.e.
the cur-rent box and all superordinate boxes), as inJohnson and Klein \[81.
In Prolog, we use thebinary ' - '  operator to separate the two mem-bers os the pair.atom(P,  \ [B IBs \ ] - \ [ \ [P IB \ ]  lBs\]).cornpose(B0s -B ls ,  B I s -B2s ,  B0s -B2s)  .con jo in (P l ,  P2, P) "-compose(P l ,  P2, P) .subord inate( \ [ \ [ \ ]  B0s \ ] - \ [B IB Is \ ] ,B, B0s -B ls )  .new index( Index  C) "-a tom( i ( Index)  ,C) .access ib le  index( Index ,  Bs  Bs)  "-member  (B ,Bs )  , member  (i ( Index)  ,B) .ex terna l (  \[ \[\] \ ] - IS \ ] ,  S) .The atom constructor  introduces a nowatomic  propos i t ion  p,by  adding it to the cur-rent box, i.e.
the first element of the list ofot)en boxes.The compose  constructor threads the dif-ference list representing the open boxes throughboth compose representations of the items be-ing composed in the same way that the com-pose constructor of the sets-of-infons repre-senlations does.
The con jo in  constructor isequivalent o the compose  constructor.The subord inate  constructor introducesan empty subordinate box onto the list of' cur-5 The grammar and file sels of infons constructors also gene.ralcan additional reading in which tile man that owns the donkey beatshimself; i.e.
it is taken as anaphorically dependent on every  mareSimple extensions to tim grammar (e.g.
requiring tile index of apronoun to differ from the index of all c-commanding NPs) or Ihesemantics (e.g.
requiring the gender of tile pronoun to agree with itsantecedent's gender) would ride out this spurious analysis.rently open boxes.
The "name"  B of the sub-ordinate box is the list of atoms it contains.The new index  constructor adds an atomof the form 2 ( Index)  to the semantic repre-sentation: no constraints are placed on Index(as in the sets-of-infons representation).The access ib le  index  constructor issatisfied by a referential index Index  ifIndex  is introduced by new index  in apreceding non-subordinate r presentation, i.e.if one of the superordinate boxes containsi ( Index) .The externa l  ( In terna l ,  Ex terna l )predicate initializes I n te rna l  tO have ex-actly one open box (empty), and returns thecontents of that box as its external form.With these constructors, the parser yieldsthe following semantic values for the test sen-tences.2- p( \ [a ,man,owns ,a ,donkey \ ] ,  S) .S = \[own(X,Y) ,donkey(Y)  , i (Y ,man(X)  , i (X )  \]This representat ion  is tree just  m case thereare two individuals X aid }i, X is a man andY is a donkey, and X owns }I.?- p ( \ [every ,man,owns ,a ,donkey \ ] ,S )  .S = \[ \ [man (X) , i (X )  \] ==> \ [own (X, Y) ,donkey(Y)  , i (Y )  \] \]This representat ion  is true just  in case for allindividuals X such that X is a man there is anindividual Y such that Y is a donkey and Xowns Y.2-  p ( \ [every ,  man, that ,  owns,  a, donkey ,beats ,  i t \ ] ,S )  .S = \[ \[own (X, Y) , donkey  (Y) , i (Y) , man (X) ,i (X) \] ==> \ [beat  (X, Y) \] \]This representation is true just in case for allindividuals X and Y such that X is a man andY a donkey and X owns Y, it is also true thatX beats Y.Extend ing  the Grammar  to hand leQuantifier-RaisingIn this section we sketch a syntactic ac-count of quantifier-raising inspired by the im-plementation of Cooper-storage (Cooper \[41)7 23presented in Pereira and Shieber \[12\], to whichwe refer the reader for details.
Each syntacticconstituent is associated with a list of quanti-tiers that are "in storage" (this corresponds inan LF-movement account of quantifier-scope tobeing raised out of this constituent).
Quantiti-cational determiners add items to the quantifierstore, and at S nodes, quantifiers are removedfrom the store and applied to the semanticrepresentation.
The quantitier-store of nodesat which quantifiers are neither added nor re-moved is the shuffle of the quantifier-stores ofits children.
6.
The grammar presented belowis simply the grammar presented above withthe addition of quantifier-storage.
The lexicalentries for this grammar are the same as theabove, and so are not listed here.q(St r ing ,  Ana lys i s )  "-ex terna l (S ,  Ana lys i s ) ,s(S, \[\], St r ing,  \[\]) .s (S,Qs)  - -> np(VP 'S I ,Qnp) ,  vp(VP ,Qvp) ,( shuf f le (Qnp,Qvp,Q ls )  ,app ly_some (Qls, Sl, Qs, S) }.np(NP ,Qnp)  - -> det (N l 'NP ,Qdet ) ,nl (NI ,Qnl) ,{append(Qdet ,Qn l ,Qnp)  } .n l (N ,Qn)  - -> n(N,Qn)  .nl (X^S,Qnl)  - -> n(X 'S l ,Qn)  ,r c (X^Sl ,Qrc ) ,( con jo in  (Sl, $2, S) ,shu f f le (Qn,  Qrc ,Qn l )  } .vp(X 'S ,Qvp)  - -> v (X*VP ,Qv)  ,np (vP ^S, Qnp) ,{shuf f le (Qv ,Qnp,Qvp)  } .r c (X^Sl ,Qrc )  - -> \[that\], vp(X^Si ,Qvp) ,{app ly_some(Qvp,  S i ,Qrc ,S2)  } .np( (X^Sl )  ^S, \[\]) - -> \ [Pronoun\] ,{pronoun (Pronoun) ,access ib le  index(X,  Sl),compose(S l ,  Sl ,S) } .v (X 'Y^S,  \[\]) - -> \[Verb\],\ [verb (Verb ,X^Y^Pred)  ,a tom(Pred ,  S) }.n(X^S, \[\]) - -> \[Noun\],{ noun (Noun, X^Pred)  ,6 Treating the quantifier-store as asyntactic feature can expressmany properties of LF-movement accounts, such as quantificationalislandhood, etc., without the explicit construction f additional repre-sentationscompose(S l ,  Sl,S) ,a tom (Pred, SI) ,new index(X ,S l )  } .det  ((X^Res) ^ (X'Scope) "Scope,\[Quant\]) - -> \[Det\] ,{determiner  (Det, Res^Quant )  } .The proposition shuf f le  (L I ,  L I ,  L3 )is true just in case L3 is a list that can be seenas having been constructed in a sequence ofsteps in each of which the next available itemis taken from either L1 or L2 and added to theend.
So long as items remain on both L1 andL2, it is immaterial which of them supplies thenext member of L3.
What is important is thatthe members of L1 and L2 should all be on L3,and in their original order.
This relationship isassured by the following Prolog clauses:shuf f le ( t \ ] ,  \[\], \[\] ) .shu f f le ( \ [Q IQ ls \ ] ,Q2s ,  \[QIQ3s\])  "-shuf f le (Q ls ,Q ls ,Q3s)  .shuf f le (Q ls ,  \[QIQ2s\],  \ [QIQ3s\])  "-shuf f le (Q ls ,Q ls ,Q3s)  .The first clause asserts that the propositionis true of three empty lists, and serves to ter-minate the recursion implicit in the other two.The second clause says that, if Q2s and Q3sam suffixes of a pair of lists to be shuftled, andthat shuffling them gives Q ls ,  then the itemthat precedes Q1 s in the final result carl comefrom the first list, that is, it can be the itempreceding Ols .
The third clause says that, al-ternatively, the item preceding Q ls  can comefrom the second list.The grammar also makes use of the predicateapp ly_some (Quant  s, O ldSemant  i c -Va lue ,  Unapp l iedQuant  s, NewSe-mant icVa lue  )which is true if applying zero or more quanti-tiers fi'om the beginning of the list Quants to agiven OldSemanticValue yi lds NewSemantic-Value and leaves a suffix of that list of quanti-tiers, namely UnappliedQuants still unapplied.It can be defined with the following pair ofclauses, the first of which terminates the se-quence of applications and the second of whichapplies the next quantifier in sequence.24 8app ly_some(Qs ,P ,Qs ,P )  .app ly_some( \ [P^QpIQs \ ] ,P ,Q Is ,P I )  :-app ly  some(Qs ,Qp,Q ls ,  Pl) .
'\]'he new grammar can be used with thethree different semantic onstructors presentedabove.
Using the Predicate-Logic constructors,it yields results like the following:2-  q ( \ [a ,man,  owns ,a ,donkey \ ] ,S )  .S : donkey  (Y) &man (X) Sown (X, Y) ;S =: man (X) &donkey  (Y) Sown (X ,Y )This example has two (semantically-equiva-lenl) representations corresponding to the twoscope possibilities for the two existentiallyquantified NPs.2- q ( \ [every ,  man,  owns, a, donkey\ ]  , S) .S :: donkey(Y)  & man (X) ==>own (X, Y) ;S =: man (X) ==> (donkey  (Y) &own (X, Y) )In this example the two non-equivalent rep-resentations correspond to the two differentscope possibilities for the quantified NPs.These readings paraphrase as: There is a don-key Y and for each man X, X owns Y andFor each man X there is a donkey I / and Xowns  V" .2- q ( \ [every ,  man,  that ,  owns ,a ,donkey ,beats , i t \ ] ,S )  .S =: donkey  (Y) & (man (X) &own (X, Y) ):=>beat  (X,Z) ;S =: (man(X)  &donkey(Y)  &own(X ,Y )  ):=>beat  (X, Z) ;In this example the two non-equivalentrepresentations correspond to the two differ-enl scope possibilities for the quanti/ied NPs.These readings paraphrase as: There is a don-key Y and for each man X such that X ownsY it is the case that X beats Y, and "For eachman X and donkey Y such that X owns Y, itis the case that X beats Y.Using the sets-of-infons constructors, we getthe following results:2-  q ( \ [every ,  man,owns ,a ,donkey \ ] ,S )  .S :-: sO:  \ [ s0 :s l==>s2,s2 :own(X ,Y ) ,sl  : i  (X), sl:man (X), S0 : 2 (Y),sO :donkey(Y)\] ;S = sO: \ [s0:s l==>s2,s2:own(X,Y) ,s2 : i (Y ) , s2 :donkey(Y) , s l : i (X ) ,sl:man(X)\]The scope possibilities are indicated here bythe situation in which the noun phrases areinterpreted.
The first reading displayed cor-responds to the quantilier-raised interpretation,which paraphrases as: Situation s0 contains theindividual Y, the fact that Y is a donkey, andthe fact that for all ways of making sl  tale, s2is also true, where sl  contains the individualX and the fact that X is a man, and s2 con-rains the fact that X owns Y.
Since Y is in s(),under this reading it is a potential matecedentfor ~maphors in for following sentences.The second reading differs from the firstin that the NP a donkey is interpreted in thesubordinate situation s l  instead el" S0.
As wellas causing a donkey to be quantilicationallysubordinate to every man, this also makes adonkey unavailable as a potential antecedentfor anaphors in following sentences.We can therefore account for the fact thatunder normal intonation a donkey is interpretedas having wide scope over every man in thefollowing discourse fiagmcnt (3).
(3) Every man saw a donkey.
It had abushy tailWe now consider one of the famous "don-key" sentences:?
-  q ( \ [every ,  man, that ,owns ,a ,donkey ,beats ,  i t \ ] ,S )  .S - sO:  \ [ sO:s l==>s2,s2 :beat (X ,Y ) ,s l :own(X ,Y ) , s l : i (X ) , s l :man(X)sO: i (Y )  , sO:donkey(Y)  \] ;S = sO: \ [ sO:s l==>s2,s2 :beat (X ,Y ) ,s l :own(X ,Y )  , s l : i (Y )  , s l :donkey  Y) ,s l : i  (X) , s l :man(X)  \]The first reading displayed again correspondsto the quantifier-raiscd interpretation, whichparaphrases as: Situation s0 contains an indi-vidual Y, and the facts that Y is a donkey andthat every way of making S1 true also makes$2 tree, where S1 contains the individual Xand the facts that X is a man and X owns Y,and $2 contains the fact that X beats Y.9 25Finally, the discourse-representation c -structors yield the following:2- q ( \ [every ,man,owns ,a ,donkey \ ] ,S )  .S = \[ \[i (X) , man (X) \] :=> \ [own (X, Y) \] , i (Y) ,donkey(Y) \ ]  S = \ [ \ [ i (X ) ,man(X) \ ]==> \ [own (X, Y) , i (Y) , donkey  (Y) \] \]These representations are direct notationalvariants of the two set-of-infons representa-tions of this sentence given above.
The truthconditions of the first reading correspond to thewide-scope interpretation of a donkey, and canbe paraphrased as: There is a donkey Y, andfor every man X, X owns !/.
?- q ( \ [every ,  man, that ,owns ,a ,donkey ,beats ,  it \]  ,S) .S = \[ \ [own (X, Y) , i (X) ,man(X)  \]= :>\ [beat  (X,Y)  \] , i (Y )  ,donkey(Y)  \] ;S = \ [ \ [own(X ,Y ) , i (Y ) ,donkey(Y) , i (X ) ,man (X) \] ==> \ [beat  (X, Y) \] \]Again, these representations are direct nota-tional variants of the two sets-of-infons repre-sentations of this sentence given above.
Thetruth conditions of the first reading correspondto the wide-scope interpretation of a donkey,and can be paraphrased as: There is a donkeyY,  and for every man X such that X owns Y,X beats I/.The same correlation between quantifica-tional scope and anaphoric scope holds withthese constructors, as expected.ConclusionWe have worked out a scheme lot comput-ing the logical lorms of sentences incremen-tally in the course of parsing them which webelieve achieves an unprecedented level of ab-straction of the semantic from the syntacticparts of the grammar.
The very incrementalityof the scheme might be used to argue against it.Given the prevalence of scope ambiguities, theinterests of computational efficiency may bebest served by a scheme that delays all seman-tic computation until the parsing is completeso as not to work unnecessarily on phrases thatturn out not to be capable of incorporation i acomplete analysis of the sentence.
Hobbs andSheiber \[7\] adopt such a scheme apparently onthe grounds of greater perspicuity.
In any case,the modifications that need to be made to ourscheme are entirely trivial, requiring only theintroduction of a modest amount of symboliccomputation.
Basically, the idea is to use oper-ations which, instead of returning pieces of thefinal logical form incrementally and nondeter-ministically, return expression that will exhibitthis nondeterministic behavior when evaluatedlater.
The later evaluation will, of course, be asspecified be the detinitions we have given.
Inshort, we believe that the abstractions we havecreated effectively isolate the syntactk" rulesboth from the corresponding semantic formal-ism and from the architecture of the system bywhich both of them will be interpreted.Bibliography\[1\] Abramson, H., and Dahl, V. Logic Gram-mars.
Springer Verlag, New York, 1989.1211 Barwise, J., and Perry, J.
Situations and At-titudes.
Bradford Books/MIT Press, Cam-bridge, Massachusetts, 1983.\[3\] Colmerauer, A.
An interesting subset ofnatural anguage.
In Logic Programming,K.
L. Clark and S.-A.
Tarnlund, Eds.Academic Press, New York, 1982.\[4\] Cooper, R. Quantification and SyntacticTheory, vol.
21 of Synthese LanguageLibrary.
D. Reidd, Dordrecht, 1983.\[5\] Davidson, D. The logical form of ac-tion sentences.
In The Logic of Decisionand Action, N. Rescher, Ed.
University ofPittsburgh Press, Pittsburgh.
Pennsylvania,1967.\[16\] Fenstad, J. E., et al Situations, Languageand Logic.
Reidel, Dordrecht, 1987.\[7\] Hobbs, J. R., and Shieber, S. M. An al-gorithm for generating quantifier scopings.Computational Linguistics 13, 1-2, 47-63.\[8\] Johnson, M., and Klein, E. Discourse,anaphora nd parsing.
In Coling 88 (Bonn,West Germany, 1986).26 i0\[9\] Kamp, H. A theory of truth and semanticrepresentation.
I  Formal Methods in theStudy of Language, J.
A. G. Groenendijk,T.
M. V. Janssen, and M. B. J.
Stokhof,Eds., vol.
136.
Mathematical Centre Tracts,Amsterdam, 1981, pp.
277-322.\[10\]Karttunen, L. Discourse referents.
In Syn-tax and Semantics, 7, J. McCawley, Ed.Academic Press, New York, 1976, pp.
363-385.\[ll\]McCord, M. C. Focalizers, the scopingproblem, and semantic interpretation rulesin logic grammars.
In Logic Programmingand Its At)plications.
Ablex, New Jersey,1986.\[12\]Pereira, F. C. N., and Shieber, S. M. Prologand Natural Language Analysis, vol.
10of C.S.L.I.
Lecture Notes Series.
ChicagoUniversity Press, Chicago, 1987.\[13\]Thomason, R. Formal Philosophy.
Se-lected Papers of Richard Montague.
YaleUniversity Press, New Haven, Connecti-cut, 1974.ii 27
