An Extensible Framework for Efficient Document Management UsingRDF and OWLErica MeenaLaboratory LORIAVandoeuvre-les-NancyFrancemeena@loria.frAshwani KumarM.I.TCambridge, MAUSAashwani@mit.eduLaurent RomaryLaboratory LORIAVandoeuvre-les-NancyFranceromary@loria.frAbstractIn this paper, we describe an integrated approach to-wards dealing with various semantic and structural is-sues associated with document management.
Weprovide motivations for using XML, RDF and OWL inbuilding a seamless architecture to serve not only as adocument exchange service but also to enable higherlevel services such as annotations, metadata access andquerying.
The key idea is to manifest differential treat-ments for the actual document structure, semantic con-tent of the document and ontological documentorganization.
The deployment of this architecture in thePROTEUS project1provides an industrial setting forevaluation and further specification.1.
IntroductionDigital documents are ubiquitously used to encode, pre-serve as well as exchange useful information in order toaccomplish information sharing across the community.As the growth in volumes of digital data is exponential,it is necessary to adopt a principled way of managingthese documents.
Besides, due to the distributed natureof information, it is also imperative to take into accountthe geographical and enterprise-level barriers for uni-form data access and retrieval.The ITEA (Information Technology for European Ad-vancement) project, Proteus2has similar objectives.Proteus is a collaborative initiative of French, Germanand Belgium companies, universities and research in-stitutes aimed at developing a European generic soft-ware platform usable for implementation of web-basede-maintenance centers.
It implements a generic archi-tecture for integrated document management using ena-1This material is based upon work supported by the ITEA (Information Tech-nology for European Advancement) programme under Grant 01011 (2002).2http://www.proteus-iteaproject.com/bling technologies such as XML, RDF and OWL.
Mostof the existing document management systems ([1], [2])limit themselves in the scope of application or documentformats or simply neglect any structure-based analysis.However, considering our requirements, it is obviousthat only a multi-layered functional architecture cancover various issues related to distributed documentmanagement such as localized vs global structural con-straints, conceptual definition of documents, reasoning-based discovery etc.Indeed, evolving technologies such as XML (eXtensibleMarkup Language), RDF (Resource DescriptionFramework) and OWL (Web Ontology Language) pro-vide us with rich set of application frameworks that ifapplied intelligently, can help a great deal in solvingthese problems.
XML ([3]) is primarily designed forlow-level structural descriptions.
It provides a tree ofstructured nodes, which can be efficiently used to de-scribe documents and check their models using DTDs(Document Type Definitions) or XML Schemas.
Be-sides, XML enables easy human readability as well asefficient machine interpretability.
However, there areissues if we only deal with the structural aspect.
If onewants to pick some semantic information from a docu-ment, there is no straightforward way other than to con-strain it by an schema or make an application hand-programmed to recognize certain document-specificsemantics.
Furthermore, if the schema changes overtime, it could typically introduce new intermediate ele-ments.
This might have the consequences of invalidat-ing certain queries and creating incoherencies in thesemantic data-model of the document.RDF (Resource Description Framework) and OWL(Web Ontology Language) build upon the XML syntaxto describe the actual semantics of a document and pro-vide useful reasoning and inference mechanisms.
RDF([4]) specifies graphs of nodes, which are connected bydirected arcs representing relational predicates such asURIs (Uniform Resource Identifiers) and encode theconceptual model of the real world.
Unlike XML, anRDF schema is a simple vocabulary language.
Theparse of the semantic graph results in a set of triples,which mimic predicate-argument conceptual structures.OWL can be used on top of these semantic structures todo logical reasoning and discover relations that are notexplicit and obvious.In the following sections we discuss how we use thesetechnologies to enable a generic document managementsystem.
Firstly, in Section 2 we describe the documentmanagement and the Proteus architecture followed bydiscussion on Annotations in Section 3.
Section 4 pro-vides brief account of the model theoretic accessmechanisms enabled by OWL followed by descriptionof data categories in Section 5.2.
Document Management ArchitectureWithout differentiating at the level of content, layoutand formats, we treat documents as information re-sources.
These information resources can potentially bedistributed across various document repositories callede-Doc servers.
Figure 2.1 demonstrates a simplifieddistributed document management system.
The archi-tecture shows how three different document repositoriescould co-exist functionally along with the Annotea en-abled annotation framework ([5]).
These servers imple-ment procedural mechanisms for query access andretrieval of documents.
Besides, these documents can beannotated and the annotations reside on an independentserver known as the annotation server, which alsoserves as a document server.
Principally, annotationscan be viewed as information resources, which are de-scribed in RDF.Server 1Server 2 Server 3Annotea RDFTEI/XML DocTEI/XML DocTEI/XML DocHeaderBodyHeaderBodyHeaderBodyFigure 2.1: Simplified view of the distributed documentserver architectureThe e-Doc server consists of several functional layersthat inter-communicate and holistically, serve the cu-mulative purpose of document management.
These lay-ers though distinct at the level of data flow andindividual processing of information, afford function-alities that are exploited by the e-Doc server.Figure 2.2 shows various such layers of the e-Docserver.
On the foundation level, it is assumed that everydocument on the e-Doc server adheres to a single syntaxi.e.
XML, which represents the top most layer in thearchitecture.
The second layer depicts the access pointsthat are broadly categorized along various dimensionssuch as metadata, conceptual/ontology system and ter-minology.
A detailed description of the access pointswill be carried out in the Section 4.
The e-Doc server isassumed to be flexible enough to handle all possibleontology formats/standards whether it is a native XMLdocument or a text or a picture/video data coming fromsome streaming applications.
This forms the third im-portant layer of the e-Doc server.
The bottom layer rep-resents Annotations [6], which adheres to the RDF [4]syntax.
This layer forms an integral part of the e-Docserver as it enables annotation capability and RDF-describable semantics to the actively retrieved documentor existing documents in the server [7].
Besides, RDFalso provides the opportunity to utilize annotations asaccess points for the documents.XML SyntaxMeta-data(1 doc)Native XMLdocumentConceptualsystem(n ontologies)Misc.
textualformatPicture/VideosApplicationData (XML)TerminologyDocumentserverAccesspointsDocumentsRDFViewCommentQueryRetrieveUserAnnotationsFigure 2.2: General Organization of the e-Doc ServerAs can be seen from the Figure 2.2, a user interacts withthe server through a client interface by launching hisqueries.
The architecture provides the user ample flexi-bility in utilizing different levels of descriptions for re-trieving documents by providing variety of accesspoints.
In the following sections, we describe each ofthese access layers in more detail.3.
Annotations: Specified as RDF ModelAnnotations form the most abstract layer within the e-Doc architecture.
They can be broadly defined as com-ments, notes, explanations, or other types of externalremarks that can be attached to either a document or asub portion of a document.
As annotations are consid-ered external, it is possible to annotate a document as awhole or in part without actually editing its content orstructure.
Conceptually, annotations can be consideredas metadata, as they give additional information aboutan existing piece of data.
Annotations can have manydistinguishing properties, which can be broadly classi-fied as:-?
Physical location:- An annotation can be storedlocally or on one or more annotation servers;?
Scope:- An annotation can be associated with adocument as a whole or to a sub-portion of adocument.?
Annotation type:- Annotations can have vari-ous functional types such as, ?Comment?,?Remark?, ?Query?
e.t.c.
?Due to this abstract nature and multiplicity of functionaltypes, a formal treatment of annotations is often un-wieldy.
Therefore, it is desired to have a semanticallydriven structural representation for annotations, whichwe describe below.Annotation SemanticsAnnotations are stored in one or multiple annotationservers.
These servers endorse exchange protocols asspecified by Annotea [5].
Essentially, the AnnotationServer can be regarded as a general purpose RDF store,with additional mechanisms for optimized queries andaccess.
This RDF store is built on top of a general SQLstore.
Annotations are stored in a generic RDF databaseaccessible through an Apache HTTP server (see Figure3.1).
All communication between a client and an anno-tation server uses the standard HTTP methods such asPOST or GET.RDFdatabaseSQL storeQueryinterfaceClient Annotation ServerhttpPOSThttp GETFigure 3.1: Access to the Annotation serverAnnotations have metadata associated with them, whichis modeled according to an RDF schema and encodeinformation such as date of creation of the annotation,name of the author, the annotation type (e.g.
comment,query, correction) the URI [8] of the annotated docu-ment, and an Xpointer [9] that specifies what part of thedocument was annotated, and the URI to the body of theannotation which is assumed to be an XHTML [10]document (Figure 3.2).<rdf:RDFxmlns:NS0='http://www.w3.org/2000/10/annotation-ns#'?><dc:creator>Ashwani</dc:creator><rdf:typerdf:resource='http://www.w3.org/2000/10/annotation-ns#Annotation'/><NS1:origin rdf:nodeID='A0'/><NS0:created>2004-05-24T01:11Z</NS0:created><NS0:annotatesrdf:resource='http://docB4.teiSpec.org'/>    <rdf:typerdf:resource='http://www.w3.org/2000/10/annotationType#Comment'/><NS0:body rdf:resource='Please re-view this document.
'/><dc:title>review</dc:title><dc:date>2004-05-24T01:11Z</dc:date></rdf:Description>  <rdf:Descriptionrdf:nodeID='A1'>?.</rdf:Description></rdf:RDF>Figure 3.2: An abridged Annotation in RDFXpointers are used to point to the Annotated portionswithin the document, while Xlinks [11] are used tosetup a link between the Document and it's annotation.Annotation OperationsThe user makes a selection of the text to be annotatedand provides the annotation along with other detailssuch as author name, date of creation, type of annota-tion, URI of the annotated document etc.
The annota-tions are published using standard HTTP POST method.To do this the client generates an RDF description of theannotation that includes the metadata and the body andsends it to the server.
The annotation server receives thedata and assigns a URI to the annotation i.e.
the body,while metadata is identified by the URI of the Docu-ment.For annotation retrieval, the client queries the annota-tion server via the HTTP GET method, requesting theannotation metadata by means of the document's URI.The annotation server replies with an RDF-specified listof the annotation metadata.
For each list of annotationsthat the client receives, it parses the metadata of eachannotation, resolves the Xpointer of the annotation, andif successful, highlights the annotated text.
If the userclicks on the highlighted text, the browser uses anHTTP GET method to fetch the body of the annotationfrom the URI specified in the metadata.The following are the broad categories of the annotationfunctions implemented by the annotation server:?
Annotate a document as a whole.?
Annotate a portion of a document.?
Query to access all the annotations for a par-ticular document.?
Query to access type specific or any of themetadata property specific annotations, whichserve as query parameters for all the annotateddocuments.4.
Model Based Access: Using OWLAs described in the previous section, the RDF layerprovides an enhanced mechanism for querying and ac-cessing a document.
However, to enable full-fledgedmanagement of documents, it is imperative to incorpo-rate some reasoning-based abstract semantics such asOWL (Web Ontology Language) over a cluster ofdocuments.
OWL provides formal mechanisms for de-scribing ontology of documents.
By doing so, the ar-chitecture can provide flexible access points as well aslogical inference mechanisms, which are necessarywhile performing metadata queries.Access points play an important role by providing flexi-bility and intuitiveness in access mechanisms to theuser.
Figure 4.1 depicts a very basic characterization ofthe access points.
As it is illustrated in the figure, a spe-cific access point is needed to direct a query to attaincertain desired result set.
Within the Proteus framework,the e-doc architecture provides a model driven specifi-cation of access points such as metadata-based, onto-logical, or terminological model.
The model drivenapproach has strong significance in the sense that everyaccess point is associated by certain abstract informa-tion structure so that it provides transparency to the que-ries, which remain independent from actualimplementation and data formats (e.g.
XML DTD).Even though these models are independent, they areflexible enough to interact among themselves.
For ex-ample, results of queries on one model can act as a ref-erence for another model.
The references may betransformed into document excerpts by requests madesynchronously at the query stage or asynchronouslywhen the user wants to visualize the information.Data SourceAccess pointResultsetData server1Data serveriData servernSearch primitives??
Ontologicalreferencesordata excerptsQueryFigure 4.1 Characterization of Access PointsTerminological Access:Terminology can be defined as the description of spe-cialized vocabulary of an application domain.
As itcontains a nomenclature of technical terms, it is capableof providing a conceptual view of the domain.
Termi-nology can be either monolingual or multilingual bynature.
Monolinguality specifies a one to one relationbetween a term and a concept or a term to its equiva-lences or a term to the related documents, while mul-tilinguality specifies relation between term to certaintarget terms or term to certain target documents.The Following is a simplified Proteus terminology ex-ample:<struct type=?TE?>[TerminologicalEntry]<feat type=?definition?xml:lang=?fr?> Dispositifpermettant d'imprimer und?placement lin?aire ou angulaire ?un ?l?ment mobile.
</feat><struct type=?LS?>[Language Section]<feat type=?language?>fr</feat><struct type=?TS?>[Term Section]<feat type=?term?>v?rin</feat><struct type=?TCS?>[Term ComponentSection]<feat type=?partOfSpeech?>noun</feat>?..</struct>Description of terminological modelA general terminological model contains a Termino-logical entry section, a Language section and a Termsection.Term SectionLanguage SectionTerminological Entry/Entryidentifier//Subject field//Definition//Explanation//Example//Note//Language//Note//Term//Termstatus/Figure 4.2 Simplified terminological modelFigure 4.2 describes a simplified terminology model -the terminological section contains entries such as iden-tifier, subject field, definition, and explanations etc.,where as the other sections such as the language and theterm sections contain details regarding the languageused and the term status respectively.
This can also beseen within the sample Proteus terminology describedabove.Terminological access is significant in cases where theuser is aware of the specific term and needs to make asearch within the related domain to access certaindocuments of his interest.
For example, an operator of afirm might be willing to retrieve all the maintenancedocuments related to the term ?Pump?.
Thanks to theterminological access point, the operator needs nothingbut just the term to launch his query and retrieve thedesired document.
The above-mentioned scenario isdepicted in Figure 4.3Terminological systemE-docOperatorPumpList of available maintenance docsFigure 4.3: A Sample Terminological AccessTerminological access plays a dual role.
On one hand itacts as a data source providing support for finding monoor multilingual equivalences or linguistic descriptions.On the other hand, it provides access for on-line docu-ments.
When seen as a data source, it can also provideindexing support for manual indexing and can performsemi-automated indexing:?
Graphic files (drawings, pictures, video,scanned texts etc): manual indexing?
Text files: semi-automatic indexing; suggestionof descriptors to be confirmed by a human ex-pert?
Data, e.g.
from monitoring: automatic indexingwith metadata.Terminological model serves as a gateway to the Ontol-ogy-based Conceptual model of the domain (Figure4.4).
Use of a technical term as a query parameter re-lates to set of relevant concepts, which can further beused to retrieve the desired set of documents.Conceptual systemTerminological systemTurbineE-docUserSuggestions(concepts!
)Links(hasDoc)Figure 4.4 interaction of terminological model withother modelsMeta-Data AccessMetadata can be loosely defined as ?data about data?..Specifically, metadata encodes certain attributive infor-mation about the data, in our case documents, which canbe used to access data.
Within this platform the meta-model can be seen as a meta-tree of nodes in whichevery node refers to certain precise set of informationdescriptors.
For example, Dublin Core descriptors suchas title, author, date, publisher, etc can potentially berepresented as nodes in the description trees.Meta-model DescriptionThis Meta-model is discussed keeping the specificDublin Core [12] model in mind.
Meta model consistsof three basic components, a Resource, an Element, andits value.?
Resource ?
the object being described.?
Element ?
a characteristic or property of theResource.?
Value ?
the literal value corresponding to theElement.Figure 4.
5 shows a simplified view of the Dublin corereference model, within which the Element Qualifiersare nothing but additional attributes that further specifythe relationship of the element to the resource.
On theother hand, the value qualifiers can be described as ad-ditional attributes that further specify the relationship ofthe value to the element.Figure 4.5: Simplified view of the Dublin Core refer-ence model.For Example:Element  = CreatorComponent  = Firstname Value   =  AshwaniComponent  = Lastname Value   =  KumarComponent  = Email Value   =  ashwani@kumar.comElement = ContributorValue = fn:Erica Meena; org:DSTCType  = IllustratorEncoding = vCardResource = http://www.loria.fr/projets/proteus/RDU/NOTE-PIR 20040304.htmlAccess of documents by means of metadata is a veryimportant as well as a practical usage, as the user candirectly retrieve a well defined piece of information,under the condition that he knows a small number of?facts?
about the information: e.g.
the authors name, thedate, the reference number or the date of a previousmaintenance.
This corresponds to a typical situationwithin the Proteus framework (see Figure 4.6).
Meta-data access, in other way, can be seen as an advancedindex functionality, which can update itself and growautomatically in the same form as the amount of storedinformation grows.For example:While sorting documents by date or type, the date, time,source or author information can always be automati-cally collected.
However, in case of a new maintenancedocument, advanced metadata can be collected by ask-ing a human to enter it into the system.E-docOperatorDublin CoreTitle: name of the clientCreator: name of the method agentSubject: Equipment IDDescription: type of equipmentPublisher: CEF CIGMA divisionContributor: division out of CIGMADate: date of the draw-upType: procedure, FMECA, ...Format: .doc, .ppt, .
xls (not useful)Identifier: name of the site (location)Source: former versionLanguage: French, English, GermanRelation: related FMECA, procedure,video, pictures, ...Coverage: equipment locationRights: public, confidential12345678910112131415List of available maintenance docsFigure 4.6:  Document access via metadataMetadata model can be seen as an enhanced searchmechanism.
A sequence of access points i.e.
terminol-ogy followed by metadata, when launched can help inrefining the search along an attribute dimension.Ontology AccessOntology is a hierarchy of concepts or in other way aplatform for describing the concepts used within a spe-cific domain, maintenance in our case.
Its independencewith regard to specific model or format makes it inter-operable.
For example, one can have an ontology repre-sented in a UML [13] class diagram whereas the sameontology can be represented in an XML schema.
Asalready discussed, Ontology is complementary to termi-nology in terms of attribution of concepts to terms.Conceptually, it serves as an abstract structure, whichcan be populated by the interested parties and thus, canserve as a very important access point.
An abridgedexample of an abstract Proteus OWL [14] ontology ver-sion can be seen in the figure 4.7<?xml version="1.0"?><rdf:RDFxmlns:owl="http://www.w3.org/2002/07/owl#"xmlns:gmoloc="http://www.proteus.com/GMO/locations#"><owl:Ontology rdf:about=""><rdf:comment>The Engineering compo-nent of the PIR</rdf:comment></owl:Ontology><owl:Class rdf:ID="Contract"><rdfs:subClassOf><owl:Class rdf:ID="Document"/></rdfs:subClassOf></owl:Class><owl:Class rdf:ID="Manager"><rdfs:subClassOf><owl:Class rdf:ID="Actor"/></rdfs:subClassOf></owl:Class>?
?</rdf:RDF>Figure 4.7: An example of Proteus ontologyOntology model descriptionAs per the requirements of the Proteus project, an ontol-ogy model comprises of a three-tiered structure.
Thethree layers consist of General concepts (GeneralMaintenance Ontology), Application Profiles, and theindustrial contexts respectively.
These layers are builtup keeping in mind the interoperability with other ex-ternal applications.
As can be seen from the Figure 4.8below, the general concept layer has the highestinteroperability as it contains basic level concepts suchas Actors, Documents, Location, Equipments etc.
Thesecond layer (Application Profiles) consists of concepts,which are specific to a certain application, for instancepertinent to a train manufacturing company, or an avia-tion company.
All the layers are bound to inherit con-cepts, but not necessarily all from the first layer (generalconcept), which in turn forms the parent layer of allother layers.
The third layer (Industrial contexts) con-tains concepts very specific to an industry for instance,car manufacturing companies such as Ford, GM etc.Instances can be derived only from the last layer i.e.
theIndustrial contexts layer.The model is open for external sources i.e.
ontologyfrom external sources can be merged within each layer,for example, SUMO [15], which is a higher-level ontol-ogy.
It contains very general concepts, which can beused directly within our ontology.General concepts(GMO)Application profilesIndustrial contextsHigh interoperabilityLow interoperabilityExternalsourcesActors, Location, Documents,EquipmentCar manufacturing companyFORDExampleInstancesFord TechReportFigure 4.8: Proteus Ontology modelOWL-DL is used for specifying the ontological modelas it provides the following advantages:?
Basic support for describing classification hier-archies and simple constraint features.
e.g.
mi-gration path for thesauri and other taxonomies;?
Rich expressiveness;?
Computational completeness and decidability;?
Allows imports of OWL Lite simple descrip-tion;?
Allows consistency checks across descriptionlevels;?
Existence of optimized inference platforms.E.g.
Racer [16].In a way, ontology access is a complementary approachto the terminology access, as terminology structure de-scribes the global concept behind a thematic domain,but does not deliver a functional description of the do-main.
The ontology access exactly provides this func-tional description (as is usually needed in themaintenance domain).
The concept remains global whenreferring to a generic class of entities and gets specificwhen describing a particular entity type.
Apart from thenormal functionality of this access point, it can be veryimportant when combined with retrieval by natural lan-guage and by visual elements (hierarchy structured setsof pictures).
In a way we can see ontology as an emptystructure with user-defined class relationships, whichcan be filled with visual elements (photos, drawing,scheme) and then the referring terms.For example Figure 4.9 depicts visual search of docu-ments via ontology.
In order to avoid complexity, onlyrecommended terms are used to name the objects repre-sented by the visual elements.
Other terms can be leftapart pointing to plain concepts (without visual con-cepts).
The index of the metadata tool could be virtuallyintegrated into the index administrated by the terminol-ogy tool.
This enables a two-step-search, beginning witha word and then finding the actually searched item notby selecting a more specific term from the terminologytool, but by looking for a picture of the searched item inthe functional concept.
This index could also be virtu-ally integrated into the index of the functional concept.Thus the user could situate the search results providedby the metadata tool within the functional structure ofthe maintained equipment (instead of getting designa-tion, ID-Number, description and meta data only).CeConceptual systemE-DocOperatordedicated to one single siteMaintenance doc(includingneeded tools),Parameterssetting,User manual ofthisList of availablemaintenance docs,parameters setting,user manualportalFigure 4.9: Visual search of documents via ontology5.
Data Category SpecificationThe various models (terminology, annotations, etc.)
andfunctionalities (access primitives to an e-doc server)have to be defined in such a way that a similar piece ofinformation (e.g.
author, subject field, term, etc.)
meansthe same thing from one place to another.
Such a se-mantic definition of data categories (in the terminologyof ISO committee TC 37) acts in complementary to anontology such as the one we define in the Proteus sys-tem since it is intended to be a general purpose layer ofdescriptors that may be used in other environments thanthat of a specific project.
Therefore, we adopted a simi-lar methodology as that of the efforts within the ISO TC37 committee to deploy a data category registry of alldescriptors used in the project as reference semanticunits described in accordance to ISO standard 11179(metadata registries).
Such a registry plays a doublerole:?
It provides unique entry point (of formal publicidentifier) for any model that refers to it;?
It gives a precise description of the data cate-gory by means of a definition and associateddocumentation (examples, application notes,etc.).6.
ConclusionsWe have provided a brief account of how documentstructure and inherent semantics can be captured andprocessed efficiently by the emerging technologies suchas XML, RDF and OWL.
By doing so, we have broughtinnovations in correlating different levels of documentmanagement with respect to various services affordedby these technologies.
The differential treatment ofstructure, content and organization provides ampleflexibility and extensibility, which are the primary re-quirements for such a system.References[1]Lagoze C, Dienst - An Architecture for DistributedDocument Libraries, Communications of the ACM,Vol.
38, No 4, April 1995.
12[2]Satoshi Wakayama, Yasuki Ito, Toshihiko Fukudaand Kanji Kato, Distributed Object-Based Applica-tions for Document Management, Hitachi ReviewVol.
47 (1998), No.6[3]Tim Bray, Jean Paoli, C. M. Sperberg-McQueen,Extensible Markup Language (XML) 1.0., eds.W3CRecommendation 10-February-1998.
[4]Swick Lassila, Resource Description Framework(RDF) Model and Syntax Specification., World WideWeb Consortium Recommendation, 1999.http://www.w3.org/TR/REC-rdf-syntax/.[5]Jos?
Kahan, Marja-Riitta Koivunen, Eric Prud'Hom-meaux, and Ralph R. Swick, Annotea: An Open RDFInfrastructure for shared Web Annotations, in Proc.of the WWW10 International Conference, HongKong, May 2001.
[6]The W3C Collaborative Web Annotation Project ...or how to have fun while building an RDF infra-structure.
http://www.w3.org/2000/Talks/www9-annotations/Overview.html.[7]N.
F. Noy, M. Sintek, S. Decker, M. Crubezy, R. W.Fergerson, & M. A. Musen.
Creating Semantic WebContents with Protege-2000.
IEEE Intelligent Sys-tems 16(2):60-71, 2001.[8]T.
Berners-Lee, R. Fielding, and L. Masinter, Uni-form Resource Identifiers (URI): Generic Syntax,IETF Draft Standard August 1998 (RFC 2396).
[9]XML Pointer Language.
http://www.w3.orgwtr/xptr/[10]The Extensible HyperText Markup Language.http://www.w3.org/TR/xhtml1/[11]XML Linking Language.http://www.w3.org/TR/xlink/[12]Dublin Core Metadata Initiative.
OCLC, DublinOhio.
http://purl.org/dc/ .
[13]Unified Modeling Language Home Page.http://uml.org/ .
[14]Deborah L. McGuinness and Frank van Harmelen,OWL Web Ontology Language Overview, W3CProposed Recommendation, 15 December 2003.http://www.w3.org/TR/owl-features/.
[15]Niles, I., and Pease, A.
2001.
Towards a StandardUpper Ontology.
In Proceedings of the 2nd Interna-tional Conference on Formal Ontology in Informa-tion Systems (FOIS-2001), Chris Welty and BarrySmith, eds, Ogunquit, Maine, October 17-19, 2001.
[16]V.Haarslev and R. Moller.
Description of theRACER system and its applications.
In DL2001Workshop on Description Logics, Stanford, CA,2001.
