KASSYS:  A DEF IN IT ION ACQUIS IT ION SYSTEM IN  NATURALLANGUAGEPatr icc  Herner tL .
I .F .O.
,  R. L. de V inc i ,  B.P.
6759,  45067 Or ldans  Ccdex  2, F ranceE -mai l :  herner t  @chambord .un iv -or leans .
frAbst rac t :  This paper is an introdnction to KASSYS,a system that has been designed to extract informationfrom detining statements in natural language.
Only hy-peronymous detinitions are dealt with here, for whichsystematic processing has been devised and itnl)lenmntedin tlte initial version of the system.
The paper describeshow KASSYS buiMs a taxinomie hierarchy by extractingthe hyperonyms from these definitions.
It also explainsthe way in which the system can answer closed questions(yes/no), thus enabling the user to check very quickly thata definition has been assimilated correctly.
The under-lying forrnalism is that of conceptual graphs, with whichthe reader is assumed to be familiar.Keywords: Conceptual graphs, hyperm~ymous defini-tion, knowledge acquisition, question (yes/no).I - INTRODUCTIONThe mm of KASSYS, the system described here, is toacquire lexicographical definitions expressed inFrench, toextract from these definitions a carefully chosen concep-tual structure, to save this structure in a tile, and to then beable to use it, where appropriate, for the semantic analysisof a text or during the search for an artswer to a questionput by the user.
+ The formalistn which has been adoptedfor the representation f the detinitions is that o1' concep-tual graphs, 2 that the reader is assumed to understand.All the examples will be given in the feral of statementsin natural anguage, and the operations actually pcrfofmed by the system on the conceptual stnmtut'es xtractedfrom these statements will not be described.
This paper islimited to hyperonymous delinitions.
It ;list) shows, verybrietly, how KASSYS can answer cet+tain types of ques-tion.2.
KNOWLIgl )GE EXTRACTION2.1 - Some points concerning hyperonynmus detinl-lionsI lyperonymy/hyponymy can be delined its follows:term A is said to be a hyperonym of term B, or alter-natively that term B is a hyponym of term A, if the set ofinstances o f  term B is inc luded in the set of  instances ofterm A.
This  g ives  the fo l low ing  corol lary:  the set of se-mant ic  features that make ttp the elements of A is includedin the set of sem,'mtic featnres that make up the elementsof B; the elelnents of B are saM to inherit the sem,'mticfeatures that are common to the elements of A. llere wcb For a complete descriplion ofthe initM version of KASS YS, pleaserefer to (llernert 93).2Cf.
(Sowa 84).have tile notion of inheritance of semantic features that isfundanmntal to tile theory of semantic netwm'ks.Ilyperonymy is thus defined by the gencral relation:(1) (A is a hyperonym of B) ~ (V x, B(x) D A(x))The equiwflcnt in natural hmguage of (1) is:(2) (A is a hyperonyna of B) ~ (All P, is A)For example, lhe definition of the concept bee:(3) bee: a social insect which produces wax andhoney.I;rom this delinition it is possible to extr'tct he I'ol-lowing statement, in which insect is: the hyperonym ofbee:(4) All bees are insects.In formal terms a hyl)eronynu)us definition can be writ-ten its in (5), in which the delining statement is split intotwo fundamental components: the hyperonym, followedby a conjunction of semantic features which distinguishtile defined fl'om this hyperonym; this conjunction of se-mantic featnrcs is called spectJic diffi'rence.
(s) v:,..,R(~,) ~ (A(:,) A PI(:,:) A P2(:,:) A ...
A:,,,(:,.
))The implication contained in (5) is that KASSYS per-ceives definitions its statements of conditions that are ne-cessary but not sufticient.
It is assnmed that concept F; asdelined in (5) may possess enmntic features that have notbeen specified but the knowledge of which may turn outto be indispensable if it were necessary to differentiate itfrom an individual beh)nging to a very simihn class.2.2 - l low to extract he hyperonymIt is usually fairly easy to extract Ihc hypcronyna fr(mla hypcronymous definition.
In nearly all cases the hyper-onym of the (letined is the lirst word of the definition, inKASSYS the lk)llowing heuristics have been implemen-ted:For the delinition of a verb the hyperonyn~ is the litstword o1' the deliniti,.m; if this word is not a verb the searchfails, l'or nouns, start by checking whether or not thedefinition begins with a defining prefix, i.e.
art expressionsuch as action oJ~Jhct oJ~ etc.
; in sonte cases the delinitionmay not be hyperonymous; otherwise, if tim first wordof the deliniti(m is a noun it is the hyperonym; if thelit'st N words are adjectives, possibly separated by theconjunction and or by a comma, and if the (N+l)th word263is a noun, then this noun is the hyperonym.These two heuristics are commonly used by systemsto search for hyperonyms in detinitions, sometimes withimprovements o take into account he special cases tbrwbich these heuristics are not suitable.
32.3 - How to build the taxinomie hierarchyThe hyperonym is obviously a fundamental etmnent ofa hyperonymous definition.
Taken alone, a concept andits hyperonym 4 are sufficient o build an elementary se-mantic netwo;rk in which all the nodes are connected bythe same link IS-A.
Tbe semantic network is limited to asimple taxonomic hierarchy which can be built and nmin-rained far more easily than a complete setnantic network.KASSYS carries out a certain number of checks on theproposed hyperonym.
If, for example, it is too general,tim user is "tsked to choose another; if it has already beenused as a hyperonym, the system suggests that maybe oneof its hyponyms could be a better candidate.
Let us nowlook in more detail at what KASSYS does when the userdefines tile same concept more than once.
Let us take thefollowing definition patterns:(6) V x, A (x )  D (B(x) A C(x))(7) V x, A(x) :) 0 r (x )  ^  C'(x))In (6) and (7), concept A has been deIined by the hypcr-onyms B and B' respectively and the specific differet~cesC and C'.
There are four different cases:1.
If B=B' and C=C', the definitions are klentieal andthe second one is therefore redundant.2.
If B=B' and C<>C', the second definition can beconsidered as additional information which shouldbe merged with the definition that has already beenmemorised.3.
If B<>B' and C=C', the definitions are identical butfor one hyperonym; the system will therefore ask theuser to choose between (6) and (7); note that, if Bhas been defined with B' as its hyperonynl (respecti-vely B' with B), the system will suggest keeping (6)(respectively (7)).4.
If B<>B' and C<>C', the user will have to chooseone of these two definitions.Note tlmt, if the second efinition (7) does not mentionthe hyperonym of A, the system will find this hyperonymthanks to the first hyperonymons definition that has beenentered, which necessarily contains tile structure (6).2.4 - Tbe circularity of definitions3For example.
(Byrd 87) identifies several hypemnym~ in tile ~;alnedefinition, separated bya conjunction; i  (V&onis 89) there is a heuristicwhich, in certain cases, allows the hyperonym of a noun delined by thepretix action t~'to he extracted.4Right from the beginning it has been assumed that no conceptpossesses more than one immediate hyperonyrn; fi'om this point of viewthis immediate hyperonym coincides with the genus in the Arisloleliansense of the term.264Whether definitions come flom a French dictionary orhave been produced by a user who is not a lexicographer,they usually contain characteristics that are consideredto make them totally useless.
Definitions are too oftenfound to be repetitive or inconsistent; however, once theseproblems have been klentified they can almost always becorrected.
But this is not true of circular definitions which,today, are accepted as being inevitable, sAs far as KASSYS is concerned, the presence of cyclesin definitions would have the nnfortun'lte r sult of leadingthe program into infinite loops.
In order to awfid this,an algorithm has been implemented which searches eachnew hyperonymousdefinition for words th:tt will lead to acircular definition.
Let us exauaine tile folk)wing example:(8) swarm: group of bees that leaves an overcrow-ded hive to settle elsewhere.
(9) bee: social insect of tile Hymenoptera group,called honeyJty that lives in swarms and pro-duces wax and honey.
(Ill) hive: shelter designed for a swarm of bees.If tile definitions arc submitted to tile system in thisorder, tile circularity due to the presence of swarm in thedefinition ot' tim concept bee is detected -ts soon as thisdelinition is entered.
The user is therefore asked to modifyat least one of the two definitions (8) and (9).
One possiblesolution would be to replace (9) by (1 I):(11) bee: social insect of tile l lymenoptera group,called honeyfiy that lives in colonies and pro-duces wax anti honey,Now (8) and (\[ 1) are accepted without any difficulty.But there is still a problem with (10) since the definition ofhive contains the noun swarm.
This circul;trity can be gotrid of by removing hive from tile definition of swarm orswarm from the delinition of hive.
The first solution leadsto seriously truncating the definition of the noun sworm:(12) swarm: group of bees.The second leads to a somcwlmt unnatural deliuition:(13) hive: shelter designed for a group c,f bees.This example shows that it is sometimes ahnost inevi-table to have reconrse to a circular detinition and it isfor this reason that KASSYS can be conligured to acceptsuch delinitions, llowever, the danger is that, when theknowledge base is consulted, certain algorithms whichare used in this consultation and which, at the presenttime, are tmable to check their own evolution, may leadto inIinite loops with a consequent loss o f inlbmmtion thathas not previously been menmrised.3.
QUERYING TI lE KNOWl JgDGE BASE3.1 - ~qhnple questionsKASSYS is able to answer yes/no type questions, i.e.it can compnte the truth of certain statements.
This paperdoes not deal with elementary queries of tile type Is an A5Cf, for example, (Weinreich 70).
page 81.a B?, which tile system b'mdles without any prot~letn.Let us suppose that tile following detinitions have beenst, bmitted to the system, which then analyses and memo-rises them:(14)  revolver: small-arm with a rew/lving cylinderthat can contain six cartridges.
(15) pistol: small-arm with a removable cartridgeclip in which the cartridges are loaded.
(16) small-arm: short, portable tirearm.
(17) tirearm: arm that tires shots through tile deto-nation of an explosive mixture.I ,et  us begin with the simplest questions, i .e.
those it ispossible to answer by consulting just one delinition.
Forexample:(18) Does a rewllver have a cylinder?Using definition (14), this question can he answeredin the aflirmative.
This is exactly what KASSYS does,by simply projecting tile conceptual graph assf~ciated totile question onto tile conceptual graph of the definingstatement a revolver is a small-arm with etc..
Note thatKASSYS knows that i rA is sltid to be with P,, then A hasB.It may happen that a query is projected onto the bodyof a definition but not onto tile detining statement thathas been obtained from tile delined and tile definition.
Forexample:(19) Does a cylinder contain e:trtridges?The graph of this query is not projected oiito that ofa revolver i.v a small-arm with etc.
btlt onto that of tiledetinition properly speaking of tevolver, which containsthe pattern a cylinder contains cartridges.
The systemcleverly deduces that there exist cylinders which containcartridges and so, in answer to question (19), replies So+metimes.3.2  - An  algor i thm using type  expansionThis section deals with the case of questions that cannotbe answered by consulting just one hyperonymous deli-nition.
It is assumed that these questions contain neithermodal verbs nor negations.The following algorithm has been implemented so asto be able to answer these questions: aSearch in the assertion to be veritied for the conceptsto which a type definition has been associated; for eachconcept C that is found:1.
Search for tile definition of C.2.
For this detinition, perform all possible type expan-sions (the strategy that has been implemented is abreadth lit'st search); for each definition that is ob-tained, try to project the graph of the query onto the'This algorithm requires an operalion which has not been delinell:type #xpansion; this consists ill replacing a give.
word in Ihe graph ol nstatement by its type detinition.graph of this delinition; if a projection succeeds, theanswer is Yes; go to 5; if no projection succeeds,Cotltimle.g.
For each of the hyponyn~s of C, return to \[; i\[' aprojection succeeds, the answer is Sometitne,v; go to5; if no projection succeeds, continue.4.
No pro.iection has succeeded; the system ix unable toanswer.5.
If an answer has been found, display it; otherwisedisplay I don't know; stop.t+et us take tile query:(21}) Does a pistol fire shots?Starling froth tire cm/cept pistol, then performhlg typeexpansion on its hyperonym small-arm, followed by asecond type expansion on tile conceptf i rear,  t, KASSYSbuihls the graph of the following detinition:(21) A pistol is a short portable arm which Ih'esshots,  etc.We are back to the case of the previous paragraph,where just one hypermlymous delhfition is enough to beable to answer tile question.
It is easy to see that the graphof tile query (20) is projected onto that of tile detinition(21).
This is what KASSYS does, and so it replies in theaffirmative to question (20).It should be noted that this algorithm can be very timeconsuming, it" tile assertion to be verified contains morethan one concept that has been delined in the knc~wledgebase.
One possible sohttion would be to look lk~r the ans-wet starting from a prio,ity concept hat we shall call tireJoc ,s  of tile que,y and that is de/ined as being tire conceptto which tile questioning applies.
It is a somewhat wtguenotion and is rather difficult to explain clearly.
"1~ beginwith, it was necessary to detine a naive, focus extractim/heuristic.
Although far flollr perfect, this heuristic is neverdangerous ince tile previous algorithm guarantees thatall tile concepts will be tried.
1 \[owever, where tile heuris-tic COtllptlteS a focus leading to a successful conclusion,tile time saved is inolmrtional to tire ,mmber of conceptscmll:lined in tile assertion and on which type expansioncan be performed.
In tire example uf question (2t)), thefocus determined by the heuristic is pislol, which leadsto a successful conclusion.
The ltnlotlrlt Of time is savedhere is nil but wouht be considerable if tile definition oftile concept shot, for exatnple, were to be inserted in theknowledge base.3.3  - Queries that contain a negation(\]enerally speaking, the handling of negation is a tri-cky affair for the essential reason that negation in naturallanguage cannot be confused with logical negation, l:{~rinstance, it is easy to lind a statement with a truth valuethat is identical to that of its negation.
7 l lowever, in ahuge number of elementary cases, especially where the:Let us lake the eXalllI)le of Ihe sla|elllenl/~,1y drrl,goll likes bakhtva,265negation concerns tim main verb of a chmse, it is reaso-nable to accept hat the trnth value of the chtuse is theopposite of that of the assertion which is obtained by re-moving the negation from the clause.
This is a heuristicwllich has proved to be extremely efficient in KASSYSbut which woukl have to be re-exantined if certain sin>plifying hypotheses were to be abandoned.Let p be a statement containing just one verb, and leg(p)the negation of this statement, obtained by adding a ne-gation to the verb contained in p. The answer given forleg(p) is a function of that which has been l'ound for p: sTRUE FALSE I SOME \] UNI)EF 1 Pneg(p) FALSE TaUI~ 1~---~-- - - - - -~FALSE \[--O-lqDE\[+ INegation in queriesThis table must be read from top to bottom only.
Don'tforget hat it gives the truth value of the statetnent leg(p),which contains one and only one negation, in function ofthat of p, which contains no negation.
Note that the aim ofthis table is not to define the truth wtlue ofneg(neg(p)).
Inthe case where leg(p) isn't valid, ignoring this restrictionleads to attributing two truth values to leg(leg(p)).Let us take as an examl)le tile following queried state-ment, which is the negative answer to (19):(22) A cylinder does not contain cartrklges.KASSYS answers that statement (22) isn't valid sincecylinders exist which contain cartrklges, as is consistentwith the hypothesis that queried statements are prefixed bya universal quantifier.
Statement (22) is interpreted as Notall cylinders contain cartridges, and not as There existcylinders which do not contain cartridges, hi tile hittercase it is obviously impossible to answer, for the sintplereason that nowhere is it said that there exist cylindersother than those which are parts of revolvers.
However,in the hypothesis o f t  closed world, 9 objects whose exis-tence has not been asserted are assumed not to exist inthis world.
Given this one proviso, tile answer to (22)is negative, whatever its interpretation.
On tile contrary,a queried statenrent such as It is not true tlzat a o'lin-der does not contain cartridges, which is the negation of(22), is rejected by the system for tile simple reason thatit contains two negations.
The previous heuristic is notsuitable for use in this statement, for which the wduesTRUE and SOME are possible.4.
A SESSION WITH KASSYSThe following session, given in French, is a faithfulillustration of the messages given by tile system.1.
KASSYS: Bonjonr, j 'attends lOS instructions...2.
USER: Un adronef est un appareil d' aviation.3.
K: OK, j '  ai assimil6 le concept <adronef>.taken from (1 \[irst 91); this statement is false because we have no drag(m;it~ negation is equally false, for the stone reason.8UNI)EF for zmdefined; SOME tbr Sometimes: some occurrencesexist for which the queried statenlenl is true.9This hypothesis has not been adopted here.4.
U: Qn'est-ce qu'un adronef ?5.
K: Un adroncf est un app.
'n'eil d'aviation.6.
U: Une fusde est un appareil qui sort a envoyer unecharge dans l'espace.7.
K: Le concept <appareil> a pour hyponyme <adronef>;celui-ci est-il un hyperonyme phls proche de <fusde> ?8.
U: Oui.9.
K: Je ddduis done qu'une ftxs6e est un adronef qui sert~l envoyer une charge darts l'espace.
Etes-vous d'accordavec celte ddfinition ?10.
U: Oui.11.
K: J'ai mdnlorisd la ddlinition de <fusde>.12.
U: Une fusde est propulsde par tin ntoteur a rdaction.13.
K: S'agibil d'une question ou d'une affirmation ?14.
U: C'est une affirmatitm.15.
K: Je sais d6j'l qn'une \['LISEe st un adronef qui serth eavuycr une charge dans I'espace.
l)ois-je intdgrer lanouvelle ?lonn6e ~l cette ddfinition ?16.
U: Oui.17.
K: Bien, j 'ai compris votre ddfinition de <rustic>.18.
U: Qu'est-ce qu'nne fusde ?19.
I<2: Une I'tlsde est un adronef propulsd par till motenr ,tr6action, qui selt ~l envoyer nne charge dans l'espacc.20.
U: Un adronef est tln apparcil qui petit voler.2l.
K: Ok, j 'ai assimil6 la ddfinition de <a6ronef>.22.
U: Un phmeur est un appareil semblable a l'avion maisddmuni de motenr.23.
K: Le concept <appareil> a pour hyponyme <adro-nef>; celui-ci est41 un hyperonyme phns proche de <pla-neur> ?24.
U: Oui.25.
K: Je ddduis donc qu'un phnleur est tilt adronef sem-blable h l'avion nlais ddmuni de moteur.
Etes-vous d'ac-cord avec cette ddfinition ?26.
U: Oni.J'ai ntdnlorisd la ddfinition de <planeur>.Un adronef peut cnvoyer une charge dans l'espace27.
K:28.
U:?29.
K: Oui.3(1.
U: l~ourquoi ?3 I. K: Parce qu'une fnsde est till adronel' prol~ulsd partill nlotcur ~1 rdaction, qui sort ~l envoyer nnc charge dans1' espace.32.
U: Pourquoi ?33.
K: C'est tons qui me I'avez dit.34.
U: Est-cc que les appareils volent ?35.
K: Quelquefois.36.
U: Un planeur peut voler ?37.
K: Oui.38.
U: Est-ce qu'un planenr possb.dc till motenr ?39.
K: Ncm.40.
U: On at'r~te lb.41.
K: Ma mdnloirc n'est pas vide.
Dois-je faire nne sau-vegarde ?42.
U: Non.7 I. K: Comtne vous voudrez.
Merci et :~l bient6t.5.
CONCLUSION266This paper is a sketchy panorama of KASSYS.
In par-ticular, only the handling of byperonylnous definitionshas been discussed.
You have seen how the taxinomichierarchy and the knowledge base are built.
You havealso been told how, broadly speaking, the query/answermodule currently running in the system works.The interest of this work is to show that conceptualgraph theory offers an elegant framework in which hy-peronymous definitions fit naturally.
Careful and judicioususe of this framework and the operations defined withinit (type expansion, projection) enable information searchalgorithms to be implemented asily.6.
REFERENCES(Byrd 87)R.J. Byrd, N. Galzolari, M.S.
Chodorow, J.L.
Klawms,M.S.
Neff, O.A.
Pdzky, Tools and methods for COmlm-tational texicology, Computational Linguistics, Vol.
13,Nb.
3-4, 1987, pp.
219-240.
(IIernert 93)P. tlernert, Un systb.me d'acquisition de ddfinitions basdsur le module des graphes conceptuels, Thbse de Doctorat,Universitd Paris XIII, Villetaneuse, juin 1993.
(Hirst 91)G. Hirst, Existence assumptions in knowledge represen-tation, Artificial Intelligence, Vol.
49, No.
1-3, l!lsevier,Amsterdam, 1991, pp.
199-242.
(Sowa 84)J. Sowa, Conceptual structures - Information processingin mind and machine, Addison Wesley Publishing Com-pany, Reading, Mass., 1984.
(Vfironis 89)J. Vdronis, N.M. Ide, N. Wurbel, Extraction d'informa-tions sdmantiques darts les dictionnaires courants, Actesdu 7?zme Congrt~s Reconnaissances des Formes ct Intelli-gence Artificielle, A.EC.E.T., Paris, ddcembre 1989, pp.1381-1395.
(Weinreieh 70)U. Weinreich, I,a ddiinition lexicographique clans la sd-mantique descriptive, Langages, Didier-l.arousse, Paris,1970, pp.
69-86.267
