Proceedings of BioNLP Shared Task 2011 Workshop, pages 149?150,Portland, Oregon, USA, 24 June, 2011. c?2011 Association for Computational LinguisticsA Pattern Approach for Biomedical Event AnnotationQuang Le MinhFaculty of InformationTechnologyUniversity of ScienceHo Chi Minh City, Vietnamleem-inhquang@gmail.comSon Nguyen TruongFaculty of InformationTechnologyUniversity of ScienceHo Chi Minh City, Vietnamntson@fit.hcmus.edu.vnQuoc Ho BaoFaculty of InformationTechnologyUniversity of ScienceHo Chi Minh City, Vietnamhbquoc@fit.hcmus.edu.vnAbstractWe describe our approach for the GENIAEvent Extraction in the Main Task of BioNLPShared Task 2011.
There are two importantparts in our method: Event Trigger Annotationand Event Extraction.
We use rules and dic-tionary to annotate event triggers.
Event ex-traction is based on patterns created fromdependent graphs.
We apply UIMA Frame-work to support all stages in our system.1 IntroductionBioNLP Shared Task 2011 has been the latestevent following the first attracted event in 2009-2010.
We enrolled and submitted the results of En-tity Relations Supporting Task and GENIA EventExtraction.
In brief, the GENIA task requires therecognition of 9 biological events on genes or geneproducts described in the biomedical literature.Participants are required to extract and classify 9kinds of event with appropriate arguments.First time joining biomedical domain, we aimto learn current problems and approaches in bio-medical research.
Therefore, we have chosen sim-ple approaches such as rule-based and pattern-based.
In the following section, we will explain ourwork on GENIA Event Extraction Task (GENIA)in details.
Finally, we will analyze and discuss re-sults.2 Our approachThe project uses UIMA Framework 1 , an opensource framework for analyzing unstructured in-formation, to develop all analysis components.Events bounded in a sentence are 94.4% in training1 Available at http://uima.apache.org/corpus.
Consequently, sentences are processed insuccession at each step.
We divide the whole sys-tem into 3 parts: Preprocessing, Event Trigger an-notation and Event annotation.2.1 PreprocessingAt this step, the input documents are convertedinto objects of the framework.
All analysis compo-nents will process objects and put results intothem.
Then we go through natural language pro-cesses that include sentence splitting, tokenizingand POS tagging by OpenNLP library.
Lastly, thegiven Protein concepts are annotated.2.2 Event Trigger annotationAccording to our statistics in the training corpus,the percentage of single token trigger is 91.8%.
Tosimplify it, we focus on triggers which span on onetoken.
At this stage, rule-based and dictionary-based approaches are combined.We choose tokens which are near a protein andhave appropriate POS tags.
Heuristic rules extract-ed from training corpus are used to identify candi-date triggers.
Those rules are, for instance,NN/NNS + of + PROTEIN, VBN + PROTEIN andso on.Event triggers are diverse in lexical and ambig-uous in classification (Bj?rne et al (2009) andBuyko et al (2009)).
Candidate triggers are classi-fied by a dictionary.
The dictionary containingwords of triggers with their corresponding classesis built from training corpus.
For ambiguous trig-ger classes, the class that has the highest rate ofappearance is chosen.2.3 Event annotationBasing on the number of arguments and type ofarguments, we categorize 9 event classes into 3groups.
The first group including Gene expression,149Transcription and Protein catabolism has only oneProtein as the argument.
The second group con-tains events with Protein and Entity as argument.Phosphorylation, Localization and Binding belongto that group.
The third group has the most com-plex types, i.e.
Regulation, Positive regulation andNegative regulation.
These events can have otherevents as their argument.Our method of event detection is using depend-ency graph as results of deep syntactic parsing.
Weprune parse tree and assign concept to nodes.
Next,sub-trees which contains only conceptual node aspatterns are extracted and represented as stringform.
We travel breadth-first and write conceptuallabels to the string pattern.
The pattern list is builtfrom training data.Firstly, for each sentence contains at least onetrigger, we get the parse tree of the sentence.
Weprune nodes which contain only one child and thatchild node has zero or one descendant.
It reducesthe complexity and retains important and generalparts of the parse tree.Secondly, candidate arguments of events areidentified by combining Protein, Entity and EventTrigger in that sentence.
The number of combina-tion can be huge, so we restrict it by the followingconditions.
Each combination has at least oneEvent Trigger with one Protein or Event.
Thenumber of argument depends on types of eventsand is usually less than 5.
In addition, the differ-ence of depth on tree between arguments has to beunder a threshold.Thirdly, concepts of arguments in each combi-nation are assigned to parse tree nodes.
The as-signment bases on the span of argument andcontent of nodes.
The pattern is extracted from theparse tree and examined whether it belongs to thepattern list.
In order to increase the precision, wediscard patterns having the depth of the tree greaterthan a threshold.
The threshold is chosen by count-ing on the training corpus.Finally, we classify events and determine roleof arguments for each event.
The type of the eventis chosen by the type of the trigger of that event.We still simply assign roles of arguments in a fixedorder of arguments.3 Results and conclusionsOur fully official result in GENIA main task is de-scribed in Table 1.
The F-score is only 14,75% andwe were ranked 13th among 14 participants.
It re-flects many shortcomings in our system.
We obtaina lot of experience.In general, the patterns which we built are stillgeneric.
Besides, the OpenNLP library still en-countered errors when processing documents, thusaffected our result.
For example, there are somesentences that OpenNLP parsed or tokenizedwrongly and raised errors.
In the step of EventTrigger annotation, there are a few rules to covercases.
The result of Regulation, Positive regulationand Negative regulation has the lowest result be-cause we only process recursion with simpleevents.Approach recall precision f-scoreGene expression 26.45 39.73 31.76Transcription 16.09 14.58 15.30Protein catabolism 33.33 50.00 40.00Phosphorylation 32.43 47.62 38.59Localization 16.23 27.68 20.46Binding 4.68 12.92 6.88Regulation 0.26 1.35 0.44Positive regulation 2.08 13.04 3.59Negative regulation 1.40 11.27 2.49All Total 10.12 27.17 14.75Table 1: Our final result in GENIA BioNLP?11 SharedTask with approximately span and recursive matchingFor future work, we intend to apply hybrid ap-proach.
We combine other methods such as ma-chine learning in Event Trigger and Eventannotation parts.
We consider other NLP library toimprove the performance of all steps relating toNLP processing.
Rules from domain professionswill be added to existent heuristic rules.
We willtry to add more features to improve the patterns.ReferencesEkaterina Buyko, Erik Faessler, Joachim Wermter andUdo Hahn, "Event Extraction from TrimmedDependency Graphs," in Proceedings of theWorkshop on BioNLP: Shared Task, 2009, pp.
19-27.Jari Bjorne, Juho Heimonen, Filip Ginter, Antti Airola,Tapio Pahikkala and Tapio Salakoski, "ExtractingComplex Biological Events with Rich Graph-BasedFeature Sets," in Proceedings of the Workshop onBioNLP: Shared Task, 2009, pp.
10-18.150
