Proceedings of the 5th Workshop on South and Southeast Asian NLP, 25th International Conference on Computational Linguistics, pages 102?111,Dublin, Ireland, August 23-29 2014.A rule based approach for automatic clause boundary detection andclassification in HindiRahul Sharma, Soma PaulLanguage Technology Research Centre, IIIT-Hyderabad, Indiarahul.sharma@research.iiit.ac.in, soma@iiit.ac.inAbstractA complex sentence, divided into clauses, can be analyzed more easily than the complex sentenceitself.
We present here, the task of identification and classification of clauses in Hindi text.
Tothe best of our knowledge, not much work has been done on clause boundary identification forHindi, which makes this task more important.
We have built a rule based system using linguisticcues such as coordinating conjunct, subordinating conjunct etc.
Our system gives 91.53% and80.63% F1-scores for identification and classification for finite clauses respectively, and 60.57%accuracy for non-finite clauses.1 IntroductionA Clause is the minimal grammatical unit which can express a proposition.
It is a sequential group ofwords, containing a verb or a verb group(verb and its auxiliary), and its arguments which can be explicitor implicit in nature (Ram and Devi, 2008).
This makes a clause an important unit in language grammarsand emphasis the need to identify and classify them as part of linguistic studies.Analysis and processing of complex sentences is a far more challenging task as compared to a simplesentence.
NLP applications often perform poorly as the complexity of the sentence increases.
?It is im-possible, to process a complex sentence if its clauses are not properly identified and classified accordingto their syntactic function in the sentence?
(Leffa, 1998).
The performance of many NLP systems likeMachine Translation, Parallel corpora alignment, Information Extraction, Syntactic parsing, automaticsummarization and speech applications etc improves by introducing clause boundaries in a sentence (e.g.,Ejerhed, 1988; Abney, 1990; Leffa, 1998; Papageorgiou, 1997; Gadde et al., 2010).We present a rule based method to automatically determine ?clause?
boundaries (beginnings and ends) incomplex or compound sentences, and further categorize the identified clauses according to their types.Thus our system is made up of two parts, the first determines the boundaries of the clauses (clause iden-tification) and the second part determines the type of the clause (Clause Classification).
Rules for thesystem were framed by thoroughly analyzing the Hindi-Urdu treebank (Palmer et al., 2009).
This pro-vides significant insights for the task as clause boundaries can be inferred from the dependency relationsmarked in dependency trees.
The rules devised for our system have minimum dependency on linguisticresources, only part of speech (POS) and chunk information of lexical items is used with a fair perfor-mance of the system.
As far as we know, not much work has been done on clause boundary identificationfor Hindi and this makes this task more significant.This paper is structured as follows: In Section 2, we talk about clause and its types.
In Section 3, wediscuss the related works that has been done earlier on clause identification and classification.
Section 4describes the data flow of our system and rules for identifying and classification of a clause.
Section 5outlines the system performance.
In section 6, some issues related clause identification are discussed.
InSection 7, we conclude and talk about future works in this area.This work is licensed under a Creative Commons Attribution 4.0 International Licence.
Page numbers and proceedings footerare added by the organisers.
Licence details: http://creativecommons.org/licenses/by/4.0/1022 Clause and its TypesAs defined in introduction, a clause is a group of words consisting of a verb (or a verb group) and itsarguments(explicit and implicit ), and forms part of a sentence.
Depending on the type of the verb,a clause is classified as a finite clause that contains a finite verb and non-finite clause that contains anon-finite verb.
For example:(1) raamRamkhaanaafoodkhaakarhaving+eatensoyaasleep+past?Having eaten food, Ram slept.
?In example (1), ?raam soyaa?
is a finite clause; contains ?soyaa?
finite verb, and ?khaanaa khaakar?
is anon-finite clause; contains ?khaakar?
non-finite verb.We come across two types of clauses in a complex sentence:1.
Main clause, which is an independent clause, is also called Superordinate clause.
It is always afinite clause in a sentence.2.
Subordinate clause, which is dependent on the main clause.
It can be both finite and non-finite in asentence.For our task we have divided subordinate clause into five different types, which are complement clause,adverbial clause, relative clause, coordinate clause and non-finite clause (discussed shortly).
Subordinateclauses can be nested or non-nested depending on a sentence.
Nested here means one clause is embeddedin another clause.
For example,(2) raamRamjowhokhelaplay+past,,ghar gayaahome go+past?Ram who played , went home.
?In example (2) the two clauses are: 1) raam ghar gayaa 2) jo khela.
The second clause is embedded in?raam ghar gayaa?.Various kinds of subordinate clauses are discussed below:(a) Complement Clause: These clauses are introduced by the subordinator ?ki?
(that) and generallyfollow the verb of main clause (Koul, 2009) and occur as a finite clause in a sentence.
For example:(3) yahaItsachtruehaiiskithatmohanMohanbimaarasickhaiis?It is true that Mohan is sick?
?ki mohan bimaar hai?
is a Complement Clause and ?ki?
is a complementizer in example (3).
It mustbe noted that ?complement clause?
is also an argument of the main clause verb.
So, in example (3),the main clause is ?yaha sach hai ki mohan bimaara hai?, which contains the complement clause?ki mohan bimaara hai?, in it.
This is considered to be a special case where a clause comes as anargument of a verb and becomes a part of that verb clause.
We have handled this type of constructionseparately (discussed in section 4).
(b) Relative Clause: Relative clauses which are also finite in nature occur as a modifier of verb?s argu-ment and contain a relative pronoun (Koul, 2009).
Such clause can be either nested or non-nested.
(4) vahathatladkaaboyjowhokhel rahaa thaaplay+past+conti.gharhomegayaago+past?That boy who was playing went home?In example (4), the nested relative clause is ?jo khel rahaa thaa?
(who was playing ) with ?jo?
as arelative marker.
?jo?
modifies ?vo?, the argument of the verb ?gayaa?.Another example of this, is:(5) raamRamgharhomegayaago+pastjowhokhel rahaa thaaplay+past+conti?Raam who was playing went home?103In example (5) relative clause ?jo khel rahaa thaa?
is a non-nested one.
(c) Adverbial Clause: These clauses are determined based on their adverbial markers/function in asentence (Koul, 2009).
Manner, purpose, cause, condition etc.
form the types of adverbial clauses.We take this type of clauses as the modifier of the verb?s modifier.
These clauses are present as afinite clause in sentence.
For example:(6) jaisethe wayvahahejaaegaago+fut.waisethat waymainIjaaungaago+fut?I will go the way he will go?In example (6) ?jaise vaha jaaegaa?
is an Adverbial Clause with ?jaise?
as the (manner) AdverbialMarker.
Here ?waise?
is the modifier of the verb ?jaaungaa?
and ?jaise vaha jaaegaa?
modifies it.It may be noted that we consider clauses that are modifiers of verb?s modifiers as adverbial clausesand clauses that are modify arguments of verbs as relative clauses.
(d) Coordinate Clause: It is one of the independent finite clauses in a sentence that has the same statusas the other clauses, and is introduced by a coordinating conjunction (Koul, 2009).
For example:(7) mainIgharhomejaaungaago+fut.aur raamand Ram delhidilliigo+futjaayegaa?I will go home and Raam will go to Delhi?
?mai ghar jaaungaa?
and ?raam dillii jaayegaa?
are two independent clauses with the same status inexample (7).
And for our work we consider both clause as coordinate clauses, and the coordinatingconjunct is not taken to be part of any of the two clauses.
There is thus no hierarchy in these clauses.When there are more than one coordinating conjunct in a sentence, clause boundary identificationbecomes more complex because of nesting of the coordinate clause.
This is illustrated using example(8).
(8) raam neRam+ergkaamworkkiyaado+pastaurandkhaanaafoodkhaayaaeat+pastlekinbutsiitaaSitakheliiplay+past?Ram did the work and ate food but Sita played?In such examples there is more than one way to mark the coordinate clauses:- ( (raam ne kaam kiyaa ) aur (khaanaa khaayaa) ) lekin (siitaa khelii )- (raam ne kaam kiyaa ) aur ( (khaanaa khaayaa) lekin (siitaa khelii ) )- ( (raam ne kaam kiyaa ) aur (khaanaa khaayaa) lekin (siitaa khelii ) )?(?
and ?)?
are symbols to denote the start and end of the clause.
As we can see there is more thanone output possible for the given example.
Our system only marks the linear boundary of the clausein a sentence.
Nesting in more than two coordinate clauses is not handled by it.
So for the example(8), our output is: (raam ne kaam kiyaa ) aur (khaanaa khaayaa) lekin (siitaa khelii )- -It must be noted that we do not take coordinating conjuncts as part of any of the clauses, it isconjoining.
However subordinate marker are taken to be part of clause.
(e) Non-finite Clause: These clauses are dependent clause in a sentence which contain non-finite verb.
(9) raamRamkhaanaafoodkhaakareataurandpaaniwaterpeekardrinkgharhomegayaaago+past?Raam after eating food and drinking water, went home?In above example (9), two clauses, ?khaanaa khaakar?
and ?paani peekar?
are non-finite as theycontain non-finite verbs.- -In Hindi, We come across some complex cases where one type of clause is embedded in another typeclause.
For example:(10) raamRamjisnewhokhaanaafoodkhaayaaeat+pastaurandpaaniwaterpiyaa,drink+pastgharhomegayaaago+past?Raam who ate food and drank water, went home?104In example (10) relative clause and coordinate clause overlap with each other.
The coordinate clausesare: (jisne khaanaa khaayaa) and ( paani piyaa ), and relative clause is : (jisne khaanaa khaayaa aur paanipiyaa).
So our system will mark the clause boundaries as: ( raam ( ( jisne khaanaa khaayaa ) aur ( paanipiyaa ) ) ghar gayaaa ).3 Related worksStudies in identifying clauses date back to (Ejerhed, 1988) work, where they showed how automaticclause boundary identification in discourse can benefit a parser?s performance.
However her experimentscould detect only basic clauses.
Later (Abney, 1990) used clause filter as part of his CASS parser.
Papa-georgiou (1997) used hand crafted rules to identify clause boundaries in a text.
(Leffa, 1998) is anotherrule based method which was implemented in an English-Portuguese MT system.Some more recent works in this area are: (Puscasu, 2004), in which she proposed a multilingual methodof combining language independent ML techniques with language specific rules to detect clause bound-aries in unrestricted texts.
The rules identify the finite verbs and clause boundaries not included in learn-ing process.
Ram and Devi (2008) proposed a hybrid based approach for detecting clause boundaries ina sentence.
They have used a CRF based system which uses different linguistic cues.
After identifyingthe clause boundaries they run an error analyzer module to find false boundary markings, which are thencorrected by the rule based system, built using linguistic clues.
(Ghosh et al., 2010) is another rule basedsystem for clause boundary identification for Bengali, where they use machine learning approach forclause classification and dependency relations between verb and its argument to find clause boundaries.Dhivya et al.
(2012) use dependency trees from maltparser and the dependency tag-set with 11 tags toidentify clause boundaries.
Similar to (Dhivya et al., 2012), Sharma et al.
(2013) showed how implicitclause information present in dependency trees can be used to extract clauses in sentences.
Their systemhave reported 94.44% accuracy for Hindi.Gadde et al.
(2010) reported improvement in parser perfor-mance by introducing automatic clause information in a sentence for Hindi in ?Improving data drivendependency parsing using clausal information?.
However their approach for identifying clause informa-tion has not been discussed.
Thus a comparison is not possible here.Our work is similar to that of (Leffa, 1998) in that both first mark clause boundaries and then classifythe clauses into various types.
Both use linguistic cues such as coordinating conjuncts, subordinatingconjunction, surrounding context, however , while (Leffa, 1998) use POS information and valency of theverbs , we use POS tags and chunks as the only linguistic information.4 MethodologyWe propose a rule based system which first identifies the clause(s) in the input sentence and marks the?clause start position?
(CSP) and ?clause end position?
(CEP) with brackets and then it classifies theidentified clauses into one of the proposed types mentioned in section 2.
Hindi usually follows the SOVword order, so ends of the clauses can be found by just using verb information, in most of the cases.The language also has explicit relative pronouns, subordinating conjuncts, coordinate conjunctions etc.which serve as cues that help to identify clause boundaries and the type of the clauses.
Thus our systemuses lists of coordinate conjunctions, relative markers and adverbial clause markers (see Appendix Aand Appendix B for the lists).
These lists were created using (Kachru, 2006).
Further, the rules for oursystem have been framed based on our in depth analysis of a section of the Hindi treebank (Palmer etal., 2009).
Apart from the lexical cues we have also used POS tag and chunk information to frame theserules.4.1 AlgorithmOur system consists of two parts, the first part determines the boundaries of the clauses (clauseidentification) and the second part determines the type of the clause (clause classification).
Identificationof clause boundaries is further divided into two tasks, i.e.
to find the beginnings and the ends of clauses.Then, the sentences with the clause boundaries marked are processed by the clause classificationcomponent, and are assigned to one of the clause types--main clause, complement clause, adverbial105clause, relative clause, coordinate clause and non-finite clause.
Figures 1 shows the data flow of oursystem, components of which have been discussed in detail, further in this section.InputSentencepreprocessingCEP IdentificationCSP Identificationis Eequal toS?SanityChecker?ki?
subordinating handlerCoordination handlerClause ClassificationOutputnoyesIn this Data flow of our system, E represents number of?clause end position?
and S represents number of ?clausestart position?
marked by our system.Figure 1: Data Flow4.1.1 PreprocessingIn this module, input sentences are processed and each lexical item is assigned a POS tag, and chunkinformation .
For example:Input sentence:(11) raamRamsoyaa.sleep+past?Ram slept.
?Output:1 (( NP1.1 raam NNP))2 (( VGF2.1 soyaa VM2.2 .
SYM))- -Here ?NP?
and ?VGF?
are the chunk tags, and POS tags ?NNP?
and ?VM?
stand for Noun and Verbrespectively (Bharati et al., 2007; Bharati et al., 2009) .4.1.2 CEP IdentificationThe unmarked word order of Hindi mainly being SOV, the verb is taken to be the end of the clause.
Incases where a sentence does not end with a verb , the end of sentence is taken as end of the clause.
Thishelps to handle instances of scrambling and ellipses.
For example:(12) siitaaSitagharhomejaa rahii haigo+present+contaurandgiitaaGitabhii.also?Sita is going home and so does Gita.
?In example (12), there is an ellipses of the verb ?jaa rahii hai?
in the second clause ?giitaa bhii?.
Incases like this, our system marks the verb as end of the first clause and sentence end as end of the second106clause.
The marked boundaries in the sentence after this module will be: ?siitaa ghar jaa rahii hai ) aurgitaa bhi )?.4.1.3 CSP IdentificationWe have made two modules to find the start of the clauses; one identifies the start of finite clauses andthe other identifies the start of non-finite clauses.
As we have mentioned a clause is a finite or non-finite,depending on the verb in that clause.
So we have used chunk information which gives the verb type(finite or non-finite).
Both these modules are independent of each other, so running them parallel willnot affect the system, and this helps to speed up the system processing.4.1.3.1 CSP for finite clauseThis module uses linguistic cues such as relative markers (jo ?that/who?, jisane ?who?
), coordinatingconjuncts (aur ?and?, lekin ?but?)
and so on, to identify the start of clauses.
It may be noted that theimmediate context of cues is also taken into account at times.
For instance, a coordinating conjunct?aur?
(and) in a sentence marks the start of the clause only if it is preceded by a verb, whereas thesubordinating conjunct ?ki?
(that) always marks the start of a clause.
After the start/s of clause/s in asentence are identified, the module checks whether the beginning of the sentence is marked as a clausestart, and marks it as clause beginning if it is not already marked.
For example:(13) raamRamjowhokhel rahaa thaplay+past+conti.nahiinotaayaa.come+present?Ram who was playing did not come.
?In example (13), first our module identifies ?jo?
relative marker and marks it as a start of the clause ?jokhel rahaa tha?, and then, marks the beginning of the sentence as the start of the other clause ?raam nahiiaayaa?.
After this, the boundaries marked in example (12) will be : ( raam ( jo khel rahaa tha ) nahiiaayaa.
)It needs a mention here that the boundaries marked in the previous module are also included in the currentmodule?s output.4.1.3.2 CSP for non-finite clauseNon-finite verbs do not have Tense-Aspect-Mood(TAM) information, they take optional argumentswhich are not specific in number.
In Hindi, we don?t find any cues to detect where a non-finite clausestarts.
So to identify the start of a non-finite clause, we have built templates/regular expressions onchunks in a sentence, and whenever a pattern in a sentence matches the template, we mark that as a startof the clause.
Following example shows the working of this module:(14) raamRamghar parahomejaakartokhaanaaafter goingkhaayega.food eat+future?After going to home, Ram will eat food.
?In the example (14), ?ghar para?
and ?raam?
are two separate chunks that precede the non-finite verb?jaakar?.
As per the template, if a ?para?
marked NP chunk follows the nominative NP and immediatelyprecedes the ?jaakar?
type non-finite verb, the NP chunk marks the start of the ?jaakar?
non-finite clause.4.1.4 Sanity CheckerIn case the number of CSPs is not equal to the number of CEPs in a sentence, the Sanity Checker modulecomes into play.
It iterates through the CSP identifier?s output for the sentence and marks the omittedCSPs.
For example:(15) raamRamgharhomegayaa,go+past,shyaamShyamnahiinotgayaa.go+past.
?Ram went home, Shyam did not go.
?The absence of a coordinator between the two clauses ?raam ghar gayaa?
and ?shyaam nahii gayaa?,in Example (15) can lead to potential error of ommision of the CSP for the second clause ?shyaam nahiigayaa?.
The output of such a sentence would be:?
(raam ghar gayaa) shyaam nahii gayaa.
)?As we can see here, the CSP for the clause ?shyaam nahii gayaa?
is omitted.
On detecting such an error,the sanity checker would iterate the sentence and mark the omitted CSP, and the output would then be:?
(raam ghar gayaa) (shyaam nahii gayaa.
)?1074.1.5 ?ki?
complementizer handlerAs mentioned earlier, ?ki?
complement clause is an argument of the main verb and part of its main verbclause.
Thus this modules executes, and identifies ?ki?
complementizer and its clause in the sentence,and modifies the CEP of its parent clause.
Example (16) explains this further.
(16) raam neram+ergkahaasay+pastkithattumyougharhomejaaogo?Ram said that you go home.
?The input for the sentence ?raam ne kahaa ki tum ghar jaao?
that this module receives would be:?
(raam ne kahaa) (ki tum ghar jaao)?The ?ki?
complementizer module iterates this input and identifies the ?ki?
complement clause and its CEP.It then modifies this input by moving the CEP, immediate before ?ki?
complementizer to the positionimmediate after the CEP of ?ki?
complement clause.
The modified sentence will be:?
(raam ne kahaa (ki tum ghar jaao) )?4.1.6 Coordination handlerThis module handles embedded coordinated clauses in complex sentence where they fall within the scopeof a complementizer, a relative marker or an adverbial marker.
It makes a new CSP for these clausesimmediately before the complementizer, relative marker or adverbial marker and a new CEP after theCEP of the last embedded coordinate clause.
For example:(17) raamRamjisnewho+rel.khaanaafoodkhaayaaeat+pastaurandkhelgamekhelaaplay+pastgharhomegayaago+past?Ram who ate food and played a game, went home.
?Given the output for the example (17), this module identifies the ?jisne?
the relative marker and insertsa new CSP immediately before it.
It also inserts the CEP for their coordinate clauses after the CEP of thelast embedded coordinate clause ?khel khelaa?.
The output would be:(raam ( (jisne khaanaa khaayaa) aur (khel khelaa) ) ghar gayaa.
)4.1.7 Clause ClassificationOnce the clause boundaries are identified, the output is passed on to the clause classifier where it assignthem to one of the clause classes--main clause, complement clause, adverbial clause, relative clause,coordinate clause and non-finite clause.
If a sentence has only one clause, it is classified as the mainclause.
However given more than one clause in a sentence, it iterates the sentence and assign classes tothe clauses based on cues such as relative markers, coordinating conjuncts etc.
Verb type also helps todeduce whether a clause is non-finite or not.
It then checks for potential omission and marks the omittedclauses as main clause, since they fail to fall under any of the other five classes.In example (17) ,conjunction ?aur?
helps to mark the two adjacent clauses--?jisne khaanaa khaayaa?
and?khel khelaa?
as coordinate clauses.
Relative marker ?jisne?
helps to identify ?jisne khaanaa khaayaa aurkhel khelaa?
as a relative clause and the clause that remained ?raam ghar gayaa?
is taken as main clause.5 Evaluation and ResultsAs mentioned earlier identification of clause boundary for finite and non-finite clauses are independent,we have evaluated them separately.
Finite clause mainly have 5 types; Main clause, Complement Clause,Adverbial Clause, Relative Clause and Coordinate clause and evaluation has been done on them.5.1 Results for Finite ClauseA fresh set of 100 sentences average length of 16 words is randomly selected from a section of the Hinditreebank.
This section is different from the section from which the sentences were chosen for analysis.The selected sentences have 217 clauses.
An analysis of the category of these clauses is presented inTable 1.
This evaluation set was annotated manually at the level of clause boundary and their type, toevaluate performance of the system.
As mentioned earlier, five types of tags ; Main clause, ComplementClause, Adverbial Clause, Relative Clause and Coordinate clause, were used to annotate them.108Clause Type %Main Clause 33.79Coordinate Clause 31.48Complement Cl ause 24.07Relative Clause 9.72Adverbial Clause 0.9Table 1: Clause distribution table.5.1.1 Results of Clause Boundary IdentificationFor the evaluation of Clause Boundary identification, a clause is taken to be marked correctly iff itsCSP and CEP are marked correctly.
A sentence with more than one clause may have correctly markedclauses as well as incorrectly marked clauses.
We evaluate the task at clause level, not at sentence level.The precision and Recall for clause boundary identification are 91.30% and 91.78% respectively.5.1.2 Results of Clause ClassificationFor the evaluation of Clause Classification, we take a clause to be correctly classified if its boundaries aswell as type is marked correctly.
So, clauses with incorrectly marked boundaries are considered wronglyclassified.
The precision and Recall for clause classification are 80.28% and 81.04% respectively.
Table(2) shows the results for different clause categories.Clause Type Precision% Recall% F1 score%Main Clause 77.90 91.78 84.27Coordiante Clasue 80.00 70.58 74.99Complement Clause 92.30 92.30 92.30Relative Clause 93.33 66.66 77.77Adverbial Clause 100 50 66.66Table 2: Results of Clause Classification5.2 Results for Non-finite ClauseA set of 96 sentences containing 104 non-finite clauses was taken for the evaluation.
It was found that endof all non-finite clause were identified but there were 63 clauses whose start boundary were identified.The accuracy of the system in identifying non-finite clauses is 60.57%.6 Error Analysis and DiscussionWhile evaluating our system, we come across some constructions which were not handled by it.
whichare:1.
Ellipses of verb: when a verb is omitted in a sentence then it is not possible for our system to markboundaries correctly.
For example:(18) raam neRam+ergkitaabbook<V><read+past>aurandmaineI+ergkavitaapoempadhiiread+past?Ram read a book and I read a poem?In example (18), there is an ellipses of the verb ?padhi?
in the clause ?raam ne kitaab?.
Thus, thoughthe sentence has two clauses?
?raam ne kitaab?
and ?maine kavitaa padhii?, our system incorrectlyidentifies the whole sentence as one clause due to the ellipses of the verb (denoted by <V>).2.
Scrambling in the usual word order, which is SOV in Hindi, is likely to induce incorrect identifica-tion of the clauses in our system.
For Example:(19) gharhomegayaago+pastraam,Ram,vahahebolaa.say+past?He said Ram went home?109In example (19), Our system is unable to identify the clause boundaries correctly for any of the twoclauses, ?ghar gayaa raam?
and ?ghar gayaa raam,vaha bolaa?, due to scrambling in the word order.Its output for the sentence is ?
(ghar) (gayaa raam, vaha bolaa)?, though the output should be ?
( (ghar(gayaa raam,) vaha bolaa)?.3.
Missing subordinate conjunction ?ki?
in a sentence also leads to incorrect identification of clauseboundaries by our system.
For example:(20) raam neRam+ergkahaasay+pasttumyougharhomejaaogo?Ram said you go home?The missing subordinate conjunction ?ki?
in example (20) leads to incorrect marking of the clauseboundaries as: ?
(raam ne kahaa ) ( tum ghar jaao)?.
The correct clause boundaries for the sentenceare ?
(raam ne kahaa ( tum ghar jaao) )?.4.
Templates used for identification of non-finite clauses are not much efficient.
They are more specificand need to be more general.7 Conclusion and Future WorkWe have discussed our work on clause boundary identification and classification in Hindi and the issuespertaining to them, in the course of this paper.
Clausal information in a sentence is known to improvethe performance of many NLP systems, thus the need for this task.
While a larger section of the Hindidependency treebank from the HUTB project was analyzed to formulate the rules for the task.
Thesystem, showing a satisfactory performance for finite clauses in terms of F1 scores of 91.53% for clauseboundary identification and 80.63% for clause Classification, while giving inadequate results for non-finite clauses with 60.57% accuracy.
We would like to mention that at present our system doesn?t handleclassification of different instances of ?to?
(else, then, or etc.)
and of coordination where a punctuationserves as a coordinator.
In the future we intend to incorporate this in our system.
Further, since this taskis a promising resource for NLP systems such as Machine Translation, Text-to-Speech and so on, andcan contribute to their better performance, adopting an ML approach for this task seems quite a favorableprospect as a future work.
(Gadde et al., 2010) report that even minimal clause boundary identificationinformation leverages the performance of their system.
We would like to test the performance of oursystem in terms of leveraging the performance of other NLP systems.ReferencesSteven Abney.
1990.
Rapid incremental parsing with repair.
pages 1?9.Akshar Bharati, Rajeev Sangal, and Dipti M Sharma.
2007.
Ssf: Shakti standard format guide.
pages 1?25.Akshara Bharati, Dipti Misra Sharma, Samar Husain, Lakshmi Bai, Rafiya Begam, and Rajeev Sangal.
2009.Anncorra: Treebanks for indian languages, guidelines for annotating hindi treebank.R Dhivya, V Dhanalakshmi, M Anand Kumar, and KP Soman.
2012.
Clause boundary identification for tamillanguage using dependency parsing.
pages 195?197.
Springer.Eva I Ejerhed.
1988.
Finding clauses in unrestricted text by finitary and stochastic methods.
pages 219?227.Association for Computational Linguistics.Phani Gadde, Karan Jindal, Samar Husain, Dipti Misra Sharma, and Rajeev Sangal.
2010.
Improving data drivendependency parsing using clausal information.
pages 657?660.
Association for Computational Linguistics.Aniruddha Ghosh, Amitava Das, and Sivaji Bandyopadhyay.
2010.
Clause identification and classification inbengali.
In 23rd International Conference on Computational Linguistics, page 17.Yamuna Kachru.
2006.
Hindi, volume 12.
John Benjamins Publishing Company.110Omkar Nath Koul.
2009.
Modern Hindi Grammar.
Indian Institute of Language Studies.Vilson J Leffa.
1998.
Clause processing in complex sentences.
volume 1, pages 937?943.Martha Palmer, Rajesh Bhatt, Bhuvana Narasimhan, Owen Rambow, Dipti Misra Sharma, and Fei Xia.
2009.Hindi syntax: Annotating dependency, lexical predicate-argument structure, and phrase structure.
pages 14?17.Harris V Papageorgiou.
1997.
Clause recognition in the framework of alignment.
pages 417?426.Georgiana Puscasu.
2004.
A multilingual method for clause splitting.R Vijay Sundar Ram and Sobha Lalitha Devi.
2008.
Clause boundary identification using conditional randomfields.
In Computational Linguistics and Intelligent Text Processing, pages 140?150.
Springer.Rahul Sharma, Soma Paul, Riyaz Ahmad Bhat, and Sambhav Jain.
2013.
Automatic clause boundary annotationin the hindi treebank.Appendix A : Conjuction Listaur ?and?
athwaa ?or?
yaa ?or?
evam ?and?
para ?but?
magar ?but?lekin ?but?
kintu ?but?
parantu ?but?
tathaa ?and?
jabki ?eventhough?
va ?and?isalie ?therfore?
kyunki ?because?Appendix B : List of Relative ( and Coorelative) Markersjo ?who?
jiskaa ?whose?
jiske ?whose?
jiski ?whose?
jisko ?whose?jisse ?from which?
jise ?who?
jinse ?from whom?
jinhen ?to whom?
jinhone ?who?jinmen ?where?
jaba ?when?
jisse ?from which?
jise ?who?111
