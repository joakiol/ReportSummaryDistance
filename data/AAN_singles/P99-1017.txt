Using aggregation for selecting contentwhen generating referring expressionsJ ohn  A. BatemanSprach- und LiteraturwissenschaftenUniversity of BremenBremen, Germanye-mail: bateman0un?-bremen,  dAbst rac tPrevious algorithms for the generation of re-ferring expressions have been developed specif-ically for this purpose.
Here we introduce analternative approach based on a fully generic ag-gregation method also motivated for other gen-eration tasks.
We argue that the alternativecontributes to a more integrated and uniformapproach to content determination i the con-text of complete noun phrase generation.1 In t roduct ionWhen generating referring expressions (RE), itis generally considered necessary to provide suf-ficient information so that the reader/hearer isable to identify the intended referent.
A num-ber of broadly related referring expression al-gorithms have been developed over the pastdecade based on the natural metaphor of 'rulingout distractors' (Reiter, 1990; Dale and Had-dock, 1991; Dale, 1992; Dale and Reiter, 1995;Horacek, 1995).
These special purpose algo-rithms constitute the 'standard' approach todetermining content for RE-generation at thistime; they have been developed solely for thispurpose and have evolved to meet some spe-cialized problems.
In particular, it was foundearly on that the most ambitious RE goal--that of always providing the maximally concisereferring expression ecessary for the context('full brevity')--is NP-haxd; subsequent workon  RE-generation has therefore attempted tosteer a course between computational tractabil-ity and coverage.
One common feature of thefavored algorithmic simplifications i their in-crementality: potential descriptions are succes-sively refined (usually non-destructively) to pro-duce the final RE, which therefore may or maynot be minimal.
This is also often motivated ongrounds of psychological p ausibility.In this paper, we introduce a completelydifferent metaphor for determining RE-contentthat may be considered in contrast to, or incombination with, previous approaches.
Themain difference lies in an orientation to theorganization of a data set as a whole ratherthan to individual components as revealed ur-ing incremental search.
Certain opportunitiesfor concise expression that may otherwise bemissed are then effectively isolated.
The ap-proach applies results from the previously unre-lated generation task of 'aggregation', which isconcerned with the grouping together of struc-turally related information.2 The  aggregat ion -based  metaphorAggregation in generation has hitherto gener-ally consisted of lists of more or less ad hoc, orcase-specific rules that group together paxticu-lax pre-specified configurations (cf.
Dalianis andHovy (1996) and Shaw (1998)); however Bate-man et al (1998) provide a more rigorous andgeneric foundation for aggregation by applyingresults from data-summarization originally de-veloped for multimedia information presenta-tion (Kamps, 1997).
Bateman et al set outa general purpose method for constructing ag-gregat ion  latt ices which succinctly representall possible structural aggregations for any givendata set.
1 The application of the aggregation-based metaphor to RE-content determinationis motivated by the observation that if some-thing is a 'potential distractor' for some in-tended referent, then it is equally, under ap-propriate conditions, a candidate for aggrega-tion together with the intended referent.
That1'Structural' aggregation refers to opportunities forgrouping inherent in the structure of the data and ignor-ing additional opportunities for grouping that might befound by modifying the data inferentially.127is, what makes something a distractor is pre-cisely the same as that which makes it a poten-tial co-member of some single grouping createdby structural aggregation.
To see this, considerthe following simple example discussed by Daleand Reiter (1995) consisting of three objectswith various properties (re-represented here ina simple association list format): 2(ol ( type dog) (s ize  small)  (co lor(02 (type dog) (s ize  large)  (co lor(03 (type cat)  (s ize  small)  (co lorTo successfully refer to the first object ol, suf-ficient information must be given so as to 'ruleout' the possible distractors: therefore, typealone is not sufficient, since this fails to rule outo2, nor is any combination of size or color suffi-cient, since these fail to rule out 03.
SuccessfulRE's are 'the small dog' or 'the black dog' andnot 'the small one', 'the dog', or 'the black one'.Considering the data set from the aggrega-tion perspective, we ask instead how to refermost succinctly to all of the objects ol, o2, o3.There are two basic alternatives, indicated bybracketing in the following: 31.
(A (small black and a large white) dog) and(a small black cat).2.
(A small black (dog and cat)) and (a largewhite dog).The former groups together ol and o2 on thebasis of their shared type, while the lattergroups together ol and o3 on the basis of theirshared size and color properties.
Significantly,these are just the possible sources of distractionthat Dale and Reiter discuss.The set of possible aggregations can be deter-mined from an aggregation lattice correspond-ing to the data set.
We construct the lattice us-ing methods developed in Formal Concept Anal-ysis (FCA) (Wille, 1982).
For the example athand, the aggregation lattice is built up as fol-lows.
The set of objects is considered as a rela-tion table where the columns represent the ob-ject attributes and their values, and the rows2This style of presentation is not particularly perspic-uous but space precludes providing intelligible graphics,especially for the more complex situations used as exam-ples below.
In case of difficulties, we recommend quicklysketching the portrayed situation as a memory aid.3The exact rendering of these variants in English orany other language is not at issue here.black))white))black))represent the individual objects.
Since the at-tributes (e.g., 'color', 'size', etc.)
can take mul-tiple values (e.g., 'large', 'small'), this represen-tation of the data is called a mul t iva lued  con-text.
This is then converted into a one-va luedcontext  by comparing all rows of the table pair-wise and, for each attribute (i.e., each columnin the table) entering one distinguished value(e.g., T or 1) if the corresponding values of theattributes compared are identical, and anotherdistinguished value (nil or 0) if they are not.The one-valued context for the objects o l -o3 isthus:object pairs type size colorol -o2 1 0 0o l -o3 0 1 1o2-o3 0 0 0This indicates that objects ol and o2 haveequal values for their type attribute but other-wise not, while ol and 03 have equal values forboth their size and color attributes but not fortheir type attributes.
The one-valued contextreadily supports the derivation of fo rmal  con-cepts.
A formal concept is defined in FCA asan extension-intension pair (A,B), where theextension is a subset A of the set of objectsand the intension is a subset B of the set ofattributes.
For any given concept, each elementof the extension must accept all attributes of theintension.
Visually, this corresponds to permut-ing any rows and columns of the one-valued con-text and noting all the maximally 'filled' (i.e.,containing l's or T's) rectangles.
A 'subcon-cept' relation, '<FCA', is defined over the set offormal concepts thus:(A, B) <FCA (A*, B*) iff A C A* ~=~ B* C BThe main theorem of FCA then shows that<FCA induces a complete lattice structure overthe set of formal concepts.
The resulting latticefor the present example is shown in Figure 1.Each node is shown labeled with two pieces ofinformation: the intension and the extension.The intensions consist simply of the sets of prop-erties involved.
The representations of the ex-tensions emphasize the function of the nodes inthe lattice--i.e., that the indicated objects (e.g.,ol  and o2 for the leftmost node) are equal withrespect o all the attributes contained in the in-tension (e.g., type for the leftmost node).128{TYPE}m(ol )=m(o2) C> {COLOR, SIZE} m(ol )=m(o3)Figure 1: Simple aggregation latticeThis lattice may be construed as an aggre-gation lattice because the functional redun-dancies that are captured are precisely thoseredundances that indicate opportunities forstructurally-induced aggregation.
The leftmostnode shows that the attribute type may be ag-gregated if we describe ol together with o2, andthe right-most node shows that {color, size}may be aggregated when describing ol and o3.Now, given the equivalence between aggrega-tion possibilities and 'distractors', we can alsouse the lattice to drive RE-content determina-tion.
Assume again that we wish to refer to ob-ject ol.
In essence, a combination of attributesmust be selected that is not subject to aggre-gation; any combination susceptible to aggre-gation will necessarily 'confuse' the objects forwhich the aggregation holds when only one ofthe objects, or co-aggregates, is mentioned.For example, the rightmost node shows that anRE with the content s ize&color(o l ) ,  e.g., 'thesmall black thing', confuses ol and o3.
To se-lect attributes that are appropriate, we first ex-amine the minimal nodes of the lattice to seeif any of these do not 'impinge' (i.e., have noaggregation consequences: we make this moreprecise below) on the intended referent.
In thiscase, however, all these nodes do mention oland so no strong preference for the RE-contentis delivered by the data set itself.
This appearsto us to be the correct characterization f thereference situation: precisely which attributesare selected should now be determined by fac-tors not attributable to 'distraction' but rather?
by more general communicative goals involvingdiscourse and the requirements of the particularlanguage.
The resulting attribute combinationsare then checked against the aggregation lat-tice for their referential effectiveness in a man-ner reminiscent of the incremental pproach ofprevious algorithms.
Selection of type is notsufficient but the addition of either color  orsize is (type~zcolor = ?
and type~size=l).The reference situation is quite different whenwe wish to refer to either o2 or o3.
Forboth of these cases there exists a non-impingingnode (the right and leftmost nodes respec-tively).
This establishes immediate attributepreferences based on the organizational proper-ties of the data.
Content-determination for o2should include at least size or color ('the whitething', 'the large thing') and for o3 at least type('the cat').
These RE's are minimal.3 Examples  of  aggregat ion -dr ivenRE-content  determinat ionIn this section, we briefly summarize some moresignificant examples of RE-content determina-tion using aggregation.
Length limitations willrequire some shortcuts to be taken in the dis-cussion and we will not follow up all of the al-ternative RE's that can be motivated.3.1 Min imal  descr ipt ionsDale and Reiter (1995) consider a number ofvariant algorithms that deviate from full brevityin order to achieve more attractive computa-tional behavior.
The first variant hey considerrelies on a 'Greedy Heuristic' (Dale, 1989; John-son, 1974); they illustrate that this algorithmsacrifices minimality by constructing an RE forobject ol in the context of the following prop-erties concerning a set of seven cups of varyingsize (large, small), color (red, green, blue) andmaterial (paper, plastic):(oi (size large)(color red)(material plastic))(02 (size small)(color red)(material plastic))(03 (size small)(color red)(material paper))(04 (size medium)(color red)(material paper))(05 (size large)(color green)(material paper))(06 (size large)(color blue)(material paper))(07 (size large)(color blue)(material plastic))The greedy algorithm produces 'the large redplastic cup' although the true minimum descrip-tion is 'the large red cup'.The aggregation-based approach to the samedata set provides an interesting contrast in re-sult.
The aggregation lattice for the data isgiven in Figure 2.
The lattice is constructedas before: first by converting the multivaluedcontext of the original data set to a one-valuedcontext and then by imposing the subconcept129{COLOR} = 4~m(ol)=m(o2)=m(o3)=rn(o4)m(ol)=m(o2) rn(o3)=m(o4} "-....... m(o6)~m(o7!
.-'"{SIZE} m(ol)=m(o5)= m(o6)=m(o7)rn(ol)=m(o7} rn(o5)=m(o6)Figure 2: Aggregation lattice for the 'sevencups' examplerelation over the complete set of formal con-cepts.
The nodes of the lattice are also labeledas before, although we rely here on the formalproperties of the lattice to avoid redundant la-beling.
For example, the two sets of attributeequalities given for node 1 (one relating o2 ando3, the other relating o6 and o7) apply to bothcolor  (inherited from node 2) and s ize (inher-ited from node 4); we do not, therefore, repeatthe labeling of properties for node 1.
Similarly,and due to the bidirectionality inherent in thesubconcept definition, the attribute equalitiesof node 1 are also 'inherited' upwards both tonode 2 and to node 4.
The attribute qualitiesof node 4 therefore include contributions fromboth node 1 and node 6.
We will generally in-dicate in the labeling only the additional infor-mation arising from the structure of the lattice,and even then only when it is relevant o thediscussion.
So for node 4 we indicate that ol,o5, o6 and o7 now form a single attribute qual-ity set made up of three contributions: one fromnode 1 (o6 and o7) and two from node 6.
Theircombination in a single set is only possible atnode 4 because node 4 is a superconcept of bothnode 1 and node 6.
The other attribute qualityset for node 1 (o2 and o3) does not add furtherinformation at node 4 and so is left implicit innode 4's labeling.
The labeling or non-labelingof redundant information has of course no for-mal consequences forthe information containedin the lattice.To determine RE-content appropriate for re-ferring to object ol, we again look for minimal(i.e., nearest he bottom) concepts, or aggrega-tion sets, that do not 'impinge' on ol.
The onlynode satisfying this requirement is node 1.
Thistells us that the set of possible co-aggregatesfor ol with respect o the properties {size &color} is empty, which is equivalent to statingthat there are no objects in the data set whichmight be confused with ol if s i ze&color (o l )forms the RE-content.
Thus, 'the large red cuP'may be directly selected, and this is preciselythe true minimal RE for this data set.3.2 Relat ional  descript ions: rest r ic t ingrecurs ionOne early extension of the  original RE-algorithms was the treatment of data sets in-volving relations (Dale and Haddock, 1991).Subsequently, Horacek (1995) has argued thatthe extension proposed possesses several deficitsinvolving both the extent of coverage and its be-havior.
In particular, Horacek notes that "it isnot always necessary that each entity directlyor indirectly related to the intended referentand included in the description be identifieduniquely" (p49).
Partially to handle such sit-uations, Horacek provides a further related al-gorithm that is intended to improve on the orig-inal and which he illustrates in action with ref-erence to a rather more complex situation in-volving two tables with a variety of cups andbottles on them.
One table (tl) has two bottlesand a cup on it, another (t2) has only a cup.
In-formation is also given concerning the relativepositions of the cups and bottles.The situation that Horacek identifies as prob-lematic occurs when the reference task is to re-fer to the table tl and the the RE-algorithmhas decided to include the bottles that are onthis table as part of its description.
This is anappropriate decision since the presence of thesebottles is the one distinguishing feature of theselected table.
But it is sufficient for the identi-fication of tl for bottles to be mentioned at all:there is no need for either or both of the bot-tles to be distinguished more specifically.
AnRE-algorithm should therefore avoid attempt-ing this additional, unnecessary eference task.To form an aggregation lattice for this factset, we extend our data representation to dealwith relations as well as attributes.
This islimited to 'reifying' the relations and label-ing them with 'instance variables' as commonlydone in input expressions for generation sys-tems (Kasper, 1989).
For convenience, we alsoat this point fold in the type information di-130(g7 (pred on)(argl bl)(argltype bottle)(arg2 tl)(arg2type table))(g8 (pred on)(argl b2)(argltype bottle)(arg2 tl)(arg2type table))(g9 (pred on)(argl cl)(argltype cup)(arg2 tl)(arg2type table))(g10 (pred on)(argl c2)(argltype cup)(arg2 t2)(arg2type table))(gli (pred left-of)(argl bl)(argltype bottle)(arg2 cl)(arg2type cup))(g12 (pred left-of)(argl cl)(argltype cup)(arg2 b2)(arg2type bottle)){ARG2TYPE} ?m(g7)=m(g8)=m(glO) II{ARC2} IIm(g7)=m(g8)=m(g9)'m(g9)=m(glO)m(g7)=m(g8) .
.
.
.
.
.
.
.
.
.
.
.
{ARGITYPE}m(g8)=m(gl 1)m(g10)=m(g12){ARGI}m(g7)=m(gl 1)m(g9)=m(g12)Figure 3: Aggregation lattice for example from Horacek (1995)rectly as would be normal for a typed semanticrepresentation.
This gives the set of facts g7-g12 shown at the top of Figure 3.
4 Once thedata set is in this form, aggregation lattice con-struction may proceed as described above; theresult is also shown in Figure 3.
This lattice re-flects the more complex reference situation rep-resented by the data set and its possible ag-gregations: for example, node 7 shows that thefacts {g7, g8, gg, gl0} may be aggregated withrespect o both arg2type ('table': node 5) andpred ('on': node 6).
Node 3, in contrast, showsthat the two distinct sets {g9, gl0} and {g7,g8} (again inherited upwards from node 2) mayboth individually (but not collectively) also beaggregated with pred, arg2type, and addition-ally with arg l type  ('cup': node 4).We first consider the reference task describedby Horacek, i.e., identifying the object t l .
Nowthat we are dealing with relations, the ob-?
jects to be referred to generally occur as valuesof 'attr ibutes'--that is, as entries in the datatable--rather than as entire rows.
In order toconstruct an appropriate RE we need to find re-lations that describe the intended referent andwhich do not allow aggregation with other rela-4Note that this is then isomorphic to a set ofSPL specifications of the form (g7 / on :arg l  (bl /bot t le )  :arg2 ( t l  / tab le ) ) ,  etc.tions describing other conflicting referents.
Wealso need to indicate explicitly that the RE-content should not avail itself of the literal in-stance variables: these are to remain internalto the lattice and to RE-construction so thatindividuals remain distinct.
We therefore dis-tinguish been 'public' and 'private' attributes:public attributes are available for driving lin-guistic expression, private attributes are not.
Ifwe were not to impose this distinction, then re-ferring expressions such as 'the table t l '  wouldbe seen as appropriate and probably minimaldescriptions!
5 An aggregation set that does hotinvolve a private attribute will be called a pub-lic concept .The first step in constructing an RE is nowto identify the relations/events in which the in-tended referent is involved--here {g7, g8, gg}--and to specify the positions (both private andpublic) that the referent holds in these.
Wecall the set of potentially relevant relations,the reference in fo rmat ion  source set (ares).In the present case, the same argument po-sition is held by the intended referent l forall RISS-members, i.e., privately arg2 and pub-licly arg2type: Next, we proceed as before to5Note that this might well be appropriate behaviorin some context-- in which case the variables would bedeclared public.131find a non-impinging, minimal aggregate set.However, we can now define 'non-impinging'more accurately.
A non-impinging node is onefor which there is at least one public supercon-cept fulfilling the following condition: the re-quired superconcept may not bring any RISS-non-member together as co-aggregate with anyRISS-member drawn from the originating aggre-gation set with respect o the specified public at-tribute of the intended referent.By these definitions both the minimal nodesof the lattice are non-impinging.
However, node2 is more supportive of minimal RE's and wewill only follow this path here; formal indica-tions of minimality are given by the depth andnumber of paths leading from the node used foraggregation to the top of the aggregation lattice(since any resulting description then combinesdiscriminatory power from each of its chains ofsuperconcepts) and the number of additionalfacts that are taken over and above the originalRISS-members.
Node 2 is therefore the 'default'choice simply given a requirement of brevity, al-though the generation process is free to ignorethis if other communicative goals so decide.There are two public superconcepts for node2: both of nodes 7 and 3 inherit arg2type fromnode 5 but do not themselves contain a pri-vate attribute.
Of these only node 7 bringsone of the originating RIss-members (i.e., g7and g8 from node 2) into an aggregation setwith a RISS non-member (gl0).
Node 2 is there-fore non-impinging via node 3.
The attributesthat may be aggregated at node 2 are arg2(node 2 <EVA 8), arg2type (2 <FCA 5), pred(2 <FCA 6) and arg l type  (2 <:FCA 4).
Sincethis includes arg2, the private position of the in-tended referent, we know that the data set doesnot support aggregation for g7 and g8 with re-spect to any other distracting value for arg2,and so g7 and g8, both collectively and individ-ually, are appropriate and sufficient RE's for t l .?
Rendering these in English would give us:g7 or g8 'the table with a bottle on it'g?
plus g8 'the table with some bottles on it'The precise rendering of the bottles dependson other generator decisions; important here isonly the fact that it is known that we do notneed to uniquely identify which bottles are inquestion.
More identifying information for arg l(g8' (pred on) (argl b2) (argltype bott le)(arg2 t2)(arg2type table))(g12' (pred left-of) (argl c2) (argltype cup)(arg2 b2)(arg2type bottle))PRED ~ ARGITYPEm(gS')=m(gl 1 ) m(gl 1 )=m(gl 2') m(g9)=m(gl 2')ARG2TYPE m(gS,)=nn(g9) EA  3 J 2,, ~ ARG1 m(gT)=m(gl 1 )m(g7)=m(gl~// ~ .
.,,,.
m(glO)=m(gl 2')ARG2 ,"m(gO)=m(gl ) " - .
.
"-J'n(g7)=m(g9),".
.
.
.
-_@,Figure 4: Aggregation lattice for modified ex-ample situation from Horacek(the bottles b l  and b2) would be necessary onlyif an aggregation with other arg2's (e.g., othertables) were possible, but it is not, and so thetype information is already sufficient to producean RE with no unwanted aggregation possibili-ties.
The aggregation-based approach will not,therefore, go on to consider further facts unlessthere is an explicit communicative intention todo so.3.3 Relational descriptions: whenfurther information is necessaryIn this final example we show that the behav-ior above does not preclude information beingadded when it is in fact necessary.
We show thisby adapting Horacek's set of facts slightly tocreate a different aggregation lattice; we moveone of the bottles (b2) over to the other table t2,placing it to the right of the cup.
We show themodified facts and the new aggregation latticein Figure 4.
Here a few concepts have movedin response to the revised reference situation:for example, arg2type (node 3) is now a directsubconcept of pred indicating that in the re-vised data set there is a functional relationshipbetween the two attributes: all co-aggregateswith respect o arg2type are necessarily alsoco-aggregates with respect o pred.
In the pre-vious example this did not hold because therewere also facts with shared pred and non-sharedarg2type (facts g l l  and g12: node 6).132We will again attempt o refer to the table t 1to compare the results with those of the previ-ous subsection.
To begin, we have a RISS of {gT,gg} with the intended referent in arg2 (private)and arg2type (public) as before.
We then lookfor non-impinging, most-specific nodes.
Here,nodes 4 and 5 are both impinging.
Node 4 isimpinging in its own right since it sanctions ag-gregation of both the RIss-members it mentionswith non-members with respect to arg2type(node 3) and arg l type  (node 6); this deficitis then inherited upwards.
Node 5 is impingingby virtue of its first and only available publicsuperconcept, node 3, which sanctions as co-aggregates {gT, g8 ~, gg, gl0} with respect oarg2type.
Neither node 4 nor node 5 can there-fore support appropriate RE's.
Only node 2 isnon-impinging, since it does not sanction aggre-gation involving arg2type or arg2, and is theonly available basis for an effective RE with therevised data set.To construct the RE we take the RISS-memberof node 2 (i.e., gT) and consider it and the aggre-gations it sanctions as candidate material.
Node2 indicates that g7 may be aggregated with g l lwith respect o arg l type;  such an aggregationis guaranteed not to invoke a false referent forarg l  because it is non-impinging.
Moreover, wecan infer that g?
alone is insufficient since nodes3 and 4 indicate that g7 is a co-aggregate withfacts with non-equal a rg l  values (e.g., gSr), andso aggregation is in fact necessary.
The RE thencombines:(g7 (pred on)(argl bl)(argltype bottle)(arg2 tl)(arg2type table))(g11 (pred left-of)(argl bl)(argltype bottle)(arg2 cl)(arg2type cup))to produce 'the table on which a bottle is to theleft of a cup'.
This is the only RE that will iden-tify the required table in this highly symmetri-?
cal context.
No further information is soughtbecause there are no further aggregations pos-sible with respect o arg2 and so the referenceis unique; it is also minimal.4 D iscuss ion  and  Conc lus ionOne important feature of the proposed ap-proach is its open-nature with respect to therest of the generation process.
The mechanismsdescribed attempt only to factor out one recur-rent problem of generation, namely organizinginstantial data to reveal the patterns of con-trast and similarity.
In this way, RE-generationis re-assimilated and seen in a somewhat moregeneral light than previously.In terms of the implementation a d complex-ity of the approach, it is clear that it cutsthe cake rather differently from previous algo-rithms/approaches.
Some cases of efficient ref-erence may be read-off directly from the lat-tice; others may require explicit constructionand trial of RE-content more reminiscent of theprevious algorithms.
In fact, the aggregationlattice may in such cases be usefully consideredin combination with those algorithms, providingan alternative method for checking the consis-tency of intermediate steps.
Here one impor-tant difference between the current approachand previous attempts at maintaining consis-tency is the re-orientation from an incrementalprocedure to a more static 'overview' of the re-lationships present, thus providing a promisingavenue for the exploration of referring strategieswith a wider 'domain of locality'.This re-orientation is also reflected in thediffering computational complexity of the ap-proaches: the run-time behavior of the previ-ous algorithms is highly dependent on the fi-nal result (number of properties known true ofthe referent, number of attributes mentionedin the RE), whereas the run-time of the cur-rent approach is more closely tied to the dataset as a whole, particularly to the number offacts (rid) and the number of attributes (ha).Test runs involving lattice construction for ran-dom data sets ranging from 10 to 120 objects,with a number of attributes ranging from 5 to15 (each with 5-7 possible values) showed thata simple experimental algorithm constructedfor uncovering the formal concepts constitut-ing the aggregation lattices had a typical run-time approximately proportional to nan2d .
Al-though worst-case behavior for both this andthe lattice construction component is substan-tially slower, there are now efficient standardalgorithms and implementations available thatmitigate the problem even when manipulat ingquite sizeable data sets.
6 For the sizes of data6A useful summary and collection of pointers to com-plexity results and efficient algorithms is given by Vogt133sets that occur when considering a RE, time-complexity is not likely to present a problem.Nevertheless, for larger data sets the ap-proach given here is undoubtedly considerablyslower than the simplified algorithms reportedboth by Dale and Reiter and by Horacek.
How-ever, in contrast to those approaches, it re-lies only on generic, non-RE specific methods.The approach also, as suggested above, appearsunder certain conditions to effectively delivermaximally concise RE's; just what these con-ditions are and whether they can be systemat-ically exploited remain for future research.
Fi-nally, since the use of aggregation lattices hasbeen argued for other generation tasks (Bate-man et al, 1998), some of the 'cost' of deploy-ment may in fact turn out to be shared, makinga direct comparison solely with the RE-task inany case inappropriate.
Other generation con-straints might then also naturally contribute torestricting the overall size of the data sets to beconsidered--perhaps even to within acceptablepractical limits.AcknowledgementsThis paper was improved by the anonymouscomments of reviewers for both the ACL andthe European Natural Language GenerationWorkshop (1999).
Remaining errors and obscu-rities are my own.ReferencesJohn Bateman, Thomas Kamps, JSrg Kleinz,and Klaus Reichenberger.
1998.
Commu-nicative goal-driven NL generation and data-driven graphics generation: an architecturalsynthesis for multimedia page generation.
InProceedings of the 1998 International Work-shop on Natural Language Generation, pages8-17.
Niagara-on-the-Lake, Canada.Robert Dale and Nicholas Haddock.
1991.
Gen-erating referring expressions involving rela-tions.
In Proceedings of the 1991 Meetingof the European Chapter of the Associationfor Computational Linguistics, pages 161-166, Berlin.Robert Dale and Ehud Reiter.
1995.
Compu-tational interpretations of the Gricean max-(1996).
Formal techniques for minimizing the size of thedata set that is used for further processing are also given.ims in the generation of referring expressions.Cognitive Science, 19:233-263.Robert Dale.
1989.
Cooking up referring ex-pressions.
In Proceedings of the Twenty-Seventh Annual Meeting of the Associationfor Computational Linguistics, Vancouver,British Columbia.Robert Dale.
1992.
Generating referring ex-pressions: constructing descriptions in adomain of objects and processes.
Brad-ford Books, MIT Press, Cambridge, Mas-sachusetts.Hercules Dalianis and Eduard Hovy.
1996.
Ag-gregation in natural anguage generation.
InGiovanni Adorni and Michael Zock, editors,Trends in natural anguage generation: an ar-tificial intelligence perspective, pages 88-105.Springer-Verlag.Helmut Horacek.
1995.
More on generatingreferring expressions.
In Proceedings of theFifth European Workshop on Natural Lan-guage Generation, pages 43-58, Leiden, TheNetherlands.D.
Johnson.
1974.
Approximate algorithmsfor combinatorial problems.
Journal of Com-puter and Systems Sciences, 9.Thomas Kamps.
1997.
A constructive theoryfor diagram design and its algorithmic imple-mentation.
Ph.D. thesis, Darmstadt Univer-sity of Technology, Germany.Robert T. Kasper.
1989.
A flexible interfacefor linking applications to PENMAN'S sentencegenerator.
In Proceedings of the DARPAWorkshop on Speech and Natural Language.Ehud Reiter.
1990.
Generating descriptionsthat exploit a user's domain knowledge.
InR.
Dale, C. Mellish, and M. Zock, editors,Current Research in Natural Language Gen-eration.
Academic Press, London.James Shaw.
1998.
Clause aggregation us-ing linguistic knowledge.
In Proceedings ofthe 1998 International Workshop on Nat-ural Language Generation, pages 138-147.Niagara-on-the-Lake, Canada.Frank Vogt.
1996.
Formale Begriffsanalysemit C++.
Datenstrukturen u d Algorithmen.Springer-Verlag.R.
Wille.
1982.
Restructuring lattice theory: anapproach based on hierarchies of concept.
InI.
Rival, editor, Ordered Sets, pages 445-470.Reidel, Dordecht/Boston.134
