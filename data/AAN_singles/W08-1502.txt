Coling 2008: Proceedings of the workshop on Speech Processing for Safety Critical Translation and Pervasive Applications, pages 5?8Manchester, August 2008Speech Translation with Grammatical FrameworkBj?orn BringertDepartment of Computer Science and EngineeringChalmers University of Technology and University of Gothenburgbringert@chalmers.seAbstractGrammatical Framework (GF) is a gram-mar formalism which supports interlingua-based translation, library-based grammarengineering, and compilation to speechrecognition grammars.
We show how thesefeatures can be used in the constructionof portable high-precision domain-specificspeech translators.1 IntroductionSpeech translators for safety-critical applicationssuch as medicine need to offer high-precisiontranslation.
One way to achieve high precisionis to limit the coverage of the translator to a spe-cific domain.
The development of such high-precision domain-specific translators can be re-source intensive, and require rare combinations ofdeveloper skills.
For example, consider developinga Russian?Swahili speech translator for the ortho-pedic domain using direct translation between thetwo languages.
Developing such a system couldrequire an orthopedist programmer and linguistwho speaks Russian and Swahili.
Such people maybe hard to find.
Furthermore, developing transla-tors for all pairs of N languages requires O(N2)systems, developed by an equal number of bilin-gual domain experts.The language pair explosion and the need forthe same person to possess knowledge about thesource and target languages can be avoided byusing an interlingua-based approach.
The re-quirement that developers be both domain ex-perts and linguists can be addressed by the use ofc?
2008.
Licensed under the Creative CommonsAttribution-Noncommercial-Share Alike 3.0 Unported li-cense (http://creativecommons.org/licenses/by-nc-sa/3.0/).Some rights reserved.grammar libraries which implement the domain-independent linguistic details of each language.Grammatical Framework (GF) (Ranta, 2004)is a type-theoretic grammar formalism whichis well suited to high-precision domain-specificinterlingua-based translation (Khegai, 2006), andlibrary-based grammar engineering (Ranta, 2008).GF divides grammars into abstract syntax and con-crete syntax.
The abstract syntax defines what canbe said in the grammar, and the concrete syntax de-fines how it is said in a particular language.
If oneabstract syntax syntax is given multiple concretesyntaxes, the abstract syntax can be used as an in-terlingua.
Given an abstract and a concrete syn-tax, GF allows both parsing (text to abstract syn-tax) and linearization (abstract syntax to text).
Thismeans that interlingua-based translation is just amatter of parsing in one language and linearizingto another.The GF resource grammar library (Ranta, 2008)implements the domain-independent morphologi-cal and syntactic details of eleven languages.
Agrammar writer can use functions from a resourcegrammar when defining the concrete syntax of anapplication grammar.
This is made possible byGF?s support for grammar composition, and freesthe grammar writer from having to implement lin-guistic details such as agreement, word order etc.In addition to parsing and linearization, thedeclarative nature of GF grammars allows them tobe compiled to other grammar formats.
The GFspeech recognition grammar compiler (Bringert,2007) can produce context-free grammars or finite-state models which can be used to guide speechrecognizers.These components, interlingua-based transla-tion, grammar libraries, and speech recognitiongrammar compilation, can be used to develop5domain-specific speech translators based on GFgrammars.
Figure 1 shows an overview of a min-imal unidirectional speech translator which usesthese components.
This is a proof-of-concept sys-tem that demonstrates how GF components canbe used for speech translation, and as such it canhardly be compared to a more complete and maturesystem such as MedSLT (Bouillon et al, 2005).However, the system has some promising featurescompared to systems based on unification gram-mars: the expressive power of GF?s concrete syn-tax allows us to use an application-specific inter-lingua without any transfer rules, and the wide lan-guage support of the GF Resource Grammar li-brary makes it possible to quickly port applicationsto new languages.In Section 2 we show a small example grammarfor a medical speech translator.
Section 3 brieflydiscusses how a speech translator can be imple-mented.
Section 5 describes some possible ex-tensions to the proof-of-concept system, and Sec-tion 6 offers some conclusions.2 Example GrammarWe will show a fragment of a grammar for a med-ical speech translator.
The example comes fromKhegai?s (2006) work on domain-specific transla-tion with GF, and has been updated to use the cur-rent version of the GF resource library API.The small abstract syntax (interlingua) shownin Figure 2 has three categories (cat): the startcategory Prop for complete utterances, Patientfor identifying patients, and Medicine for iden-tifying medicines.
Each category contains asingle function (fun).
There are the nullaryfunctions ShePatient and PainKiller, and the bi-nary NeedMedicine, which takes a Patient and aMedicine as arguments, and produces a Prop.
Thissimple abstract syntax only allows us to constructthe term NeedMedicine ShePatient PainKiller.A larger version could for example include cat-egories for body parts, symptoms and illnesses,and more functions in each category.
An exampleof a term in such an extended grammar could beAnd (Injured TheyPatient Foot) (NeedMedicineHePatient Laxative).For this abstract syntax we can use the En-glish resource grammar to write an English con-crete syntax, as shown in Figure 3.
The resourcegrammar category NP is used as the linearizationtype (lincat) of the application grammar categoriesabstract Health = {flags startcat = Prop;cat Patient;Medicine;Prop;funShePatient : Patient;PainKiller : Medicine;NeedMedicine : Patient ?
Medicine ?
Prop;}Figure 2: Example abstract syntax.Patient and Medicine, and S is used for Prop.
Thelinearizations (lin) of each abstract syntax functionuse overloaded functions from the resource gram-mar, such as mkCl and mkN which create clausesand nouns, respectively.concrete HealthEng of Health =open SyntaxEng,ParadigmsEng in {lincat Patient,Medicine = NP;Prop = S;linShePatient = mkNP she Pron;PainKiller =mkNP indefSgDet (mkN ?painkiller?
);NeedMedicine p m =mkS (mkCl p (mkV2 (mkV ?need?))
m);}Figure 3: English concrete syntax.Figure 4 shows a Swedish concrete syntax cre-ated in the same way.
Note that PainKiller inSwedish uses a mass noun construction rather thanthe indefinite article.concrete HealthSwe of Health =open SyntaxSwe,ParadigmsSwe in {lincat Patient,Medicine = NP;Prop = S;linShePatient = mkNP she Pron;PainKiller =mkNP massQuant(mkN ?sm?artstillande?
);NeedMed p m =mkS (mkCl p(mkV2 (mkV ?beh?over?))
m);}Figure 4: Swedish concrete syntax.6Grammar developmentResource grammar libraryApplication grammarSpeech translatorPGF interpreterSpeechrecognizer(L1)Speechsynthesizer(L2)Parser(L1)Linearizer(L2)Speech(L1)Text(L2)Text(L1)Speech recognitiongrammar (L1)Speech recognitiongrammar compilerGrammarcompilerPGFSpeech(L2)User(L1)User(L2)Abstractsyntax termPGFAbstract syntaxConcrete syntax(L1)Concrete syntax(L2)Resource grammar(L1)Resource grammar(L2)Figure 1: Overview of a GF-based speech translator.
The developer writes a multilingual applicationgrammar using the resource grammar library.
This is compiled to a PGF (Portable Grammar Format)grammar used for parsing and linearization, and a speech recognition grammar.
Off-the-shelf speechrecognizers and speech synthesizers are used together with a PGF interpreter in the running system.3 Speech Translator ImplementationThe GF grammar compiler takes grammars inthe GF source language used by programmers,and produces grammars in a low-level language(Portable Grammar Format, PGF (Angelov etal., 2008)) for which interpreters can be eas-ily and efficiently implemented.
There are cur-rently PGF implementations in Haskell, Java andJavaScript.
The GF speech recognition gram-mar compiler (Bringert, 2007) targets many differ-ent formats, including Nuance GSL, SRGS, JSGFand HTK SLF.
This means that speech transla-tors based on GF can easily be implemented onalmost any platform for which there is a speechrecognizer and speech synthesizer.
We have runJava-based versions under Windows using NuanceRecognizer and RealSpeak or FreeTTS, Haskell-based versions under Linux using Nuance Recog-nizer and RealSpeak, and JavaScript-based proto-types in the Opera XHTML+Voice-enabled webbrowser on Zaurus PDAs and Windows desktops.The speech translation system itself is domain-independent.
All that is required to use it in a newdomain is an application grammar for that domain.4 EvaluationSince we have presented a proof-of-concept sys-tem that demonstrates the use of GF for speechtranslation, rather than a complete system for anyparticular domain, quantitative translation perfor-mance evaluation would be out of place.
Rather,we have evaluated the portability and speed of pro-totyping.
Our basic speech translators written inJava and Haskell, using existing speech compo-nents and PGF interpreters, require less than 100lines of code each.
Developing a small domain forthe translator can be done in under 10 minutes.5 Extensions5.1 Interactive DisambiguationThe concrete syntax for the source language maybe ambiguous, i.e.
there may be sentences forwhich parsing produces multiple abstract syntax7terms.
The ambiguity can sometimes be preservedin the target language, if all the abstract syntaxterms linearize to the same sentence.In cases where the ambiguity cannot be pre-served, or if we want to force disambiguation forsafety reasons, we can use a disambiguation gram-mar to allow the user to choose an interpretation.This is a second concrete syntax which is com-pletely unambiguous.
When the user inputs anambiguous sentence, the system linearizes each ofthe abstract syntax terms with the disambiguationgrammar, and prompts the user to select the sen-tence with the intended meaning.
If only someof the ambiguity can be preserved, the numberof choices can be reduced by grouping the ab-stract syntax terms into equivalence classes basedon whether they produce the same sentences in thetarget language.
Since all terms in a class producethe same output, the user only needs to select thecorrect class of unambiguous sentences.Another source of ambiguity is that two abstractsyntax terms can have distinct linearizations in thesource language, but identical target language lin-earizations.
In this case, the output sentence willbe ambiguous, even though the input was unam-biguous.
This could be addressed by using unam-biguous linearizations for system output, thoughthis may lead to the use of unnatural constructions.5.2 Bidirectional TranslationSince GF uses the same grammar for parsing andlinearization, the grammar for a translator from L1to L2can also be used in a translator from L2toL1, provided that the appropriate speech compo-nents are available.
Two unidirectional translatorscan be used as a bidirectional translator, somethingwhich is straightforwardly achieved using twocomputers.
While PGF interpreters can already beused for bidirectional translation, a single-devicebidirectional speech translator requires multiplex-ing or duplicating the sound hardware.5.3 Larger Input CoverageGF?s variants feature allows an abstract syntaxfunction to have multiple representations in a givenconcrete syntax.
This permits some variation inthe input, while producing the same interlinguaterm.
For example, the linearization of PainKillerin the English concrete syntax in Figure 3 could bechanged to:mkNP indefSgDet (variants{mkN ?painkiller?
;mkN ?analgesic?
});6 ConclusionsBecause it uses a domain-specific interlingua, aGF-based speech translator can achieve high pre-cision translation and scale to support a large num-ber of languages.The GF resource grammar library reduces thedevelopment effort needed to implement a speechtranslator for a new domain, and the need for thedeveloper to have detailed linguistic knowledge.Systems created with GF are highly portable tonew platforms, because of the wide speech recog-nition grammar format support, and the availabilityof PGF interpreters for many platforms.With additional work, GF could be used to im-plement a full-scale speech translator.
The ex-isting GF components for grammar development,speech recognition grammar compilation, parsing,and linearization could also be used as parts oflarger systems.ReferencesAngelov, Krasimir, Bj?orn Bringert, and AarneRanta.
2008.
PGF: A Portable Run-TimeFormat for Type-Theoretical Grammars.Manuscript, http://www.cs.chalmers.se/?bringert/publ/pgf/pgf.pdf.Bouillon, P., M. Rayner, N. Chatzichrisafis, B. A.Hockey, M. Santaholma, M. Starlander, H. Isahara,K.
Kanzaki, and Y. Nakao.
2005.
A generic Multi-Lingual Open Source Platform for Limited-DomainMedical Speech Translation.
pages 5?58, May.Bringert, Bj?orn.
2007.
Speech Recognition GrammarCompilation in Grammatical Framework.
In Pro-ceedings of the Workshop on Grammar-Based Ap-proaches to Spoken Language Processing, pages 1?8, Prague, Czech Republic.Khegai, Janna.
2006.
Grammatical Framework (GF)for MT in sublanguage domains.
In Proceedingsof EAMT-2006, 11th Annual conference of the Eu-ropean Association for Machine Translation, Oslo,Norway, pages 95?104, June.Ranta, Aarne.
2004.
Grammatical Framework: AType-Theoretical Grammar Formalism.
Journal ofFunctional Programming, 14(2):145?189, March.Ranta, Aarne.
2008.
Grammars as software libraries.In Bertot, Yves, G?erard Huet, Jean-Jacques L?evy,and Gordon Plotkin, editors, From semantics to com-puter science: essays in honor of Gilles Kahn.
Cam-bridge University Press.8
