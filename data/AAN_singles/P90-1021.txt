DEFAULTS IN  UNIF ICAT ION GRAMMARGosse BoumaResearch Institute for Knowledge SystemsPostbus 463, 6200 AL Maa.qtrlcht.
The Netherlandse-mall : gosse@riksnl.uucpABSTRACTI ncorporat ion  of  defau l ts  in g rammarformal isms is impor tant  for reasons ofl ingu is t i c  adequacy  and  grammarorganization.
In this paper we present analgorithm for handling default information inunification grammar.
The algorithm specifiesa logical operat ion on feature structures,merging with the non-default structure onlythose parts of the default feature structurewhich are not constrained by the non-defaults t ructure.
We present  var ious l inguisticapplications of default unification.L INTRODUCTIONMOTIVATION.
There a two, not quite unrelated,reasons  for  incorporat ing  de fau l tsmechanisms into a linguistic formalism.
First,l inguists have often argued that  certainphenomena re described most naturally withthe use of rules or other formal devices thatmake use of a notion of default (see, forinstance, Gazdar 1987).
The second reason isthat  the use of defaults  simplif ies thedevelopment of large and complex grammars,in particular, the development of lexicons forsuch grammars (Evans & Gazdar 1988).
Thelatter suggests that the use of defaults Is ofpart icu lar  relevance for those brands  ofUnification Grammar (UG) that are lexicalist,that is, in which the lexicon is the main sourceof  g rammat ica l  in fo rmat ion  (such asCategorial Unif ication Grammar  (Uskorelt1986, Calder et al 1988) and Head-drivenPhrase Structure Grammar  (Pollard & Sag1987)).We propose a method for incorporat ingdefaults Into UG, in such a way that It bothextends the linguistic adequacy of UG andsupports the formulation of rules, templatesand lexical entries for many unification-basedtheories.
In the next section, we define defaultunification, a logical operation on featurestructures.
It is defined for a language.
FM/, ~,which is in many respects identical to thelanguage FML as defined in Kasper & Rounds(1986).
Next, we come to l inguist icapplications of default unification.
A linguisticnotation is introduced, which can be used todescribe a number of linguistically interestingphenomena,  such as feature percolation.coordination, and many aspects of inflectionalmorphology.
Furthermore.
it can be used in thesense of Fllcglnger et al (1985) to defineexcept ions  to ru les ,  non-monoton icspecialization of templates or irregular lexlcalentries.BACKGROUND.
There are several proposalswhich hint at the possibility of adding defaultmechanisms to the linguistic formalisms andtheories Just mentioned.
The fact that GPSG(Gazdar et al, 1985) makes heavy use ofdefaults, has led to some research concerningthe compatibil ity of GPSG with a formalismsuch PATR-II (Shieber 1986a) and concerningthe logical nature of the mechanisms used inGPSG (Evans 1987).
Shieber (1986a) proposesan operation .
r id conservatively, which addsinformation of a feature s t ructure  A to afeature s t ructure  B, in as far as thisinformation is not in conflict with informationIn B.
Suggestions for similar operations can befound in Shivber (1986b:59-61) (the overwriteoption of PATR-II) and Kaplan (1987) (priorityunion).
Fllckinger et al (1985) argue for theincorporat ion  of  de fau l t  inher i tancemechanisms In UG as an alternative for thetemplate system of PATR-II.A major problem with attempts to define anoperat ion such as default unif icat ion forcomplex feature structures.
Is that there are atleast two ways to think about this operation.
Itcan be defined as an operation which Is likeordinary unification, with the exception that Incase of a unification failure, the value of thenon-defau l t  feature  s t ructure  takesprecedence (Kaplan 1987, Shieber 1986a).Another option Is not to rely on unificationfailure, but to remove default informationabout  a feature f already if the non-defaultfeature structure constrains the contents o f fin some way.
This view underlies most of thedefault  mechan isms used in GPSG 1 .
The1 Actually, in GPSG both notions ofdefault unif ication are used.
In Shleber's(1986a) formulation of the of the Foot FeaturePrinciple, for example, the operation addconservatively (which normal ly relies onunification failure) is restricted to featuresthat are f ree (i.e.
un instant la ted  and notcovarying with some other feature).165dist inct ion between the two approaches  isespecia l ly  re levant  for reent rant  featurevalues.The definition presented in the next section isdefined as an operation on arbitrary featurestructures, and thus it is more general than theoperations odd conservatively or overwrite, inwhich only one sentence at a time (say, <X 0head> = <X 1 head> or <subject case> =nominative\] is added to a feature description.An obvious advantage of our approach is thatoverwriting a structure F with 1 ~ is equivalentto adding F as default information to F'.
Defaultunif ication, as defined below, follows theapproach  in which default  information isremoved if it is constrained in the non-defaultstructure.
This decision is to a certain extentl inguistically motivated (see section 3), butperhaps more important  is the fact that  wewanted to avoid the following problem.
Forarb i t rary  feature st ructures ,  there is notalways a unique way to resolve a unificationconflict, nor is it necessarily the case that onesolution subsumes  other solutions.
Considerfor instance the examples in (I).
(1) default non-defaulta <f>ffia <f> = <g><g> = bb.
<f> = <g> <f>fa<g> ffi bTo resolve the conflict, in Ca), either one of theequations could be removed.
In (b), either thefact that <g> = b or the reentrancy could beremoved (in both cases, this would remove theinpllcit fact that  <f> = b).
An approach whichonly tr ies to remove the sources  of  aunification conflict, will thus be forced to makearbitrary decisions about  the outcome of thedefault unification procedure.
At least for thepurposes of g rammar  development, this seemsto be an undesirable situation 1.2.
DESCRIPTION OF THE ALGORITHMTHE LANGUAGE FML*.
Default  unif icat ion isdefined in terms of a formal language forfeature structures, based on Kasper & Rounds'(1986) language FML.
FML* does not containd is junct ion ,  however ,  and fu r thermore ,equat ions  of the form / : f (where  ?~ is anarbitrary formula) are replaced by equations1 However, in Evans'  (1987) version ofFeature Specification Defaults, it is s implyallowed that a category description has morethan one 'stable expansion'.of the form <p> : ?x (where a is atomic or NIL orTOP).
(2) ~ ~ FML*NILTOPa a ?
A (the set of atoms)<p> : a p e L* (L the set of labels)and a ?
A u {TOP,NIL}\[<pl>,..,<pn>\] each P ie  L*?
^ ?
?,?
?
FML*We assume that feature structures arerepresented as directed acycllc graphs (dags).The denotat ion D(?)
of a formula ?
is theminimal e lement w,r.t, subsumpt ion  2 in theset of dags that satisfy it.
The conditions underwhich a dag D satisf ies a formula of FML*(where D/<p> is the dag that  is found if wefollow the path p through the dag D) are asfollows :(3) S~-WmTZCS Or FML ?a D ~ NIL alwaysb.
D ~ TOP neverc D ~ a i fD fad D ~ <p>: a i fD/<p> is defined 3 andD/<p> ~ a,e.
D J=?^X ffD ~b and DR?
D ~ \[<pl>,..,<pn>\] if the values of allPl ( I  _< I < n) are equivalent.NORMAL FORM REQUIREMENTS.
Defau l tunif ication should be a semant ica l ly  well-behaved operation, that  is, the result  of thisoperat ion  shou ld  depend only  on thedenotat ion of the formula's  involved.
Sincedefaul t  un i f icat ion is a non-monoton icoperation, however, in which par ts  of thedefault information may disappear,  and sincethere are in general many  formulae denotingthe same dag, es tab l i sh ing  th is  is notcompletely trivial.
In particular, we must  makesure that  the formula  which provides thedefault information is in the following normalform:2 A dag D subsumes a dag D' if the set offormulae satisfying D' conta ins the set offormulae satisfying D (Eisele & DSrre.
1988:287}.3 D/<l> is defined iff I e Dom(D).D/<Ip> is defined iff D/,<l> and D' /<p> aredefined, where D'= D/<I>.166(4) FML" Normal  FormA formula Sis in FML* NFiff:a VE /nS ,<P lP2>:a  inS:<p l>e E "->VP3EE :<P3P2>:u in  Sl~ ~EI ,  E2 in S:<plP2 > E E2, <pl > E E 1 -->~P3 6 E1 : <p3P2 > E E 2c.
V E in S, there is no <p> e E,such that <pl> is re~ll,ed in S.d V E in S, there is no <p> e E such that<p> : a (a e A) is in S.(5) BA path  <pl> is realized in S lff <pr> isdefined in D(@ (l,r E L) (cf.
Elsele & D0n-e,1988 : 288).For every formula S in FML*, there is a formulaS' in FML* NF.
which is equivalent o it w.r.tunification, that  is, for which the followingholds:(6) ~/7.
e FML*: S ^  7.
~ TOP ?~ S' ^  7.
~ TOPNote that  this does not imply that  S and S'have the same denotation.
The two formulaebelow, for example,  are equivalent w.r.t.unification, yet denote different dags :(7) a.
<:f> : a ^  \[<f>,<g>\]b.
<f>:a^ <g>:aFor conditions (4a,b), it is easy to see that (6)holds (it follows, for instance,  f rom theequivalence laws (21} and (22) in Kasper &Rounds, 1986: 261).
Condition (4c} can be metby  rep lac ing  every  occurence  of  anequivalence class \[<pl>,..,<pn>\] in a formula Sby  a con junct ion  of  equ iva lences\[<p11>,..,<pnl>\] for every <pi/> (1 < i < n} realizedin D(S}.
For example, if L = {f,g), (Sb} is the NF of(Sa).
{8) a \[<f>,<g>\]^ <ff>:NiLb.
\[<ff>,<gf>\] ^ [<fg>,<gg>\] ^ ~ : NILCondit ion (4d} can be met  by el iminatingequivalence classes of paths  leading to anatomic value.
Thus, (To) is the NF of (7a).
Notethat  the effect of (4c,d) is that the value ofevery path  which is member  of someequivalence class is NIL.A default formula has to be in FML" NF for tworeasons.
First,  all in format ion which isimplicit in a formula, should be representedexplicitly, so we can check easily which partsof a formula need to  be removed to avoidpotential unif ication conflicts with the non-default formula.
.
This Is guaranteed by (4a,b).Second, all reentrant paths should have NIL asvalue.
This is guaranteed by (4c,d) and makesit possible to replace an equivalence class bya weaker set of equat/ons, in which arbitrarylong extensions of the old pathnames  mayoccur (if some path would have a value otherthan NIL, certain extensions could lead toinconsistent results}.LAWS FOR DEFAULT UNIFICATION.
Defau l tunification is an operation which takes twoformulas as arguments,  representing defaultand non-default informat/on respectively.
Thedag denoted by the resu l tant  formula  issubsumed by  that  of  the non-defau l targument,  but  not necessari ly by that of thedefault argument.The laws for default unif ication (defined asDefault ~ Non-default = Result, where Defaultis in FMLS-NF\] are listed below.
(9) D~AULTUNa~C.ATSOm :a Se NIL =SSeTOP =TOPNIL (B S =~bTOP ~B S =Sb.
a~S =SS ~a =ac.
<p>:a~S =S, ffD(S)I=<P'> :a,p' a preflxofp, a e A.= ~, ifD(S} I = <pp'> :a.=~, ff 3p 'EE:D(O)  I =Eandp 'is a prefix of p.= <p>: a ^ S, otherwise.cL E G) S = F~E//~where E ' is  {<p>~ E I D(S)~E'and p'e E'}u { <p>e E I D(S) ~ <p'> : a} (p' a prefix ofp, a e A) and Z is {<p'> l D(S) l = <pp'> :a.and p ~ E}.e.
(?A~)(B~= $, f fyA~=TOP,= (W (B ?)
A (X ~B ?
}, otherwise.167This definition of default unification removesall default information which might lead to aun i f icat ion  confl ict.
Fur thermore ,  it isdesigned in such a way that the order in whichinformation is removed is irrelevant (note thatotherwise the second case in (9e) would beinvalid).
The first two cases of (9c) are neededto remove all sentences <p> : a, which refer toa path  which is blocked or which cannotreceive an atomic value in ?.
The third case in(9c) is needed for situations uch as (I0).
(I0) (<fg> : a ^ <h g> : b) (9 \[<f>, <h>\]In (9d), we first remove from an equivalenceclass all paths  which have a prefix that  isalready in an equivalence class or which hasan atomic value.
The result of this step is E-E'.Next, we modify the equivalence class, so thatit allows exceptions (i.e.
the posslbtlity of non-unif iable values) for all paths  which areextensions of paths in E-E' and are defined in?.
We can th ink of modif ied equivalencec lasses  as abbrev ia t ions  for a set  of(unmodified) equivalence classes:(11) \[<pl > .... <pn>\ ] / /Z  = ?
,where  ~ is theconjunct ion of all equivalence classes\ [<plpl> .... <pnpl>\].
such that pl is notdefined in Z, but  pr is in z, for some l,r eLAn example should make this clearer:(12) \[<f>,<g>,<h>l (9 (<g>:aA<fg>:b)=l<f>,<h> l//{<g>} A (<f> : a ^ <fg> : b).The result of default unification in this case isthat one element ( <g> } is removed from thede fau l t  equ iva lence  c lass  s ince it isconstrained in by the non-default information.Furthermore,  the equivalence is modified, sothat it allows for exceptions for the paths <fg>and <h g>.
Applying the rule in (I I), andassuming that L = {f,g,h}, we conclude that(13) \[<f>,<h> \]//{<g>} =\[<ff>, <hf>\] A \[<fh>, <h h> \].Note that  the rep lacement  of modif iedequivalence classes by ordinary equivalenceclasses is always possible, and thus the resultof (9el) is equivalent to a formula in FML*.Finally.
(ge) says that.
given a cons istentdefault formula, the order in which defaultin format ion is added to the non-defau l tformula is unimportant.
1 (This does not holdfor inconsistent default  formulae, however,since default unification with the individualconJuncts might filter out enough informationto make the resultant formula a consistentextension of the non-defauR formula, whereasTOPO?
= ?
}.The monotonlclty properties of defaultunification are listed below {where < issubsumption}:(14} a ,~X^,(but not X~X^* )b. X-<X ' ~ (X ^@ ~ 0C'^~)(butnot  ?
s? '
~ (g ^?)
<_ (X^?'
)  )(14a) says that default unification is montonlcaddit ion of information to the non-defaul tinformation.
(14b) says that the function as awhole is monotonic only w.r.t, the defaultargument:  adding more default informationleads to extensions of the result.
Adding non-de fau l t  in fo rmat ion  is non-monoton ic .however, as this might  cause more of thedefau l t  in fo rmat ion  to get removed oroverwritten.The laws in (9) prove that formulae containingthe (9-operator can always be reduced tostandard formulae of FML*.
This implies thatformulae using the (9-operator can still beinterpreted as denoting dags.
Furthermore, itfollows that addition of default unification to aunif icat ion-based formal ism should be seenonly as a way to increase the expressivepower of tools used in defining the grammar(and thus.
according to D6rre et al (1990)default  unif icat ion would be an 'off l ine'extension of the formalism, that is, its effectscan be computed at compile time).A NOTE ON IMPLEMENTATION.
We haveimplemented default  unif ication in Prolog.Feature st ructures  are represented by openended lists (containing elements of the formlabel=Value ), atoms and var iab les  torepresent complex feature structures,  atomicva lues and reentranc ies  respect ively (seeGazdar & Mellish, 1989).
This implementationhas the advantage that it is corresponds toFML* NF.1 This should not be confused with the(invalid) statement that ?
(9 (X (9 ~ } = X (9 (V(9?
).168(15) a. I f=X, gfXl Y\]b.
\ [ f=a,g=a I _Y\]c. \[f=\[h=a I X l  \ ] ,g=\[hfa I X I  \] I_Y\]d \[f=\[h=a I Xl,g=\[h=._Z IX1\] I Y \ ]If we unify (15a) with \[\[=al_Yl\].
we get (15b), inwhich the value of g has been updated as wellThus, the requirements of (4a,b) are alwaysmet, and furthermore, the reentrancy as suchbetween fand  g is no longer visible (condition4c).
If we unify (I 5a) with U'=\[h=a IX2)  I Y3\],we get (15c), in which the variable Xhas  beenreplaced by X1, which can be interpreted asranging over all paths that are realized but notdefined underf(condlt lon (4d)).
Note also thatthis representation has the advantage that wecan define a reentrancy for all realizedfeatures, without having to specify the set ofpossible features or expanding the value o f finto a list containing all these features.
If wedefaul t  un i fy  (15a) w i th  \[f=\[hffial_X2II_X,3\] asnon-default  information, for instance, theresu l t  is representab le  as (15d).
Thereentrancy for all undefined features under f isrepresented by X1.
The constant NIL of FML*is represented as a Prolog variable ( _Z in thiscase).
Thus, the seemingly space consumingprocedure of bringing a formula into FML* NFand transforming the output of (9d) into FML*is avoided completely.
The actual  defaultunification procedure is a modified version ofthe merge operation defined in D6rre & Elsele(1986).3.
L INGUIST IC  APPL ICAT IONSDefault unification can be used to extend thes tandard  PATR-II (Shieber et al.
1983)methods for defining feature structures.
In theexamples, we freely combine default and non-default information (prefixed by I') in templatedefinitions.
(16) a. DET:( l<cat arg> ffi Nt<cat val> ffi NP<cat dir> = r ight<cat arg> = <cat val><cat val num> = sg<cat val case> = nom ).b.
NP: ( <cat> =noun<bar> ffi2 ).c.
N : ( <cat> =noun<bar> =1 ).
(16) descr ibes a f ragment of CategorlalUnification Grammar (Uszkorelt.
1986, Calderet al 1988.
Bouma.
1988).
The correspondingfeature structure for a definition such as (16a)169is determined as follows: first, all defaultinformation and all non-default information isunif ied separately,  which resul ts  in twofeature-structures (17a,b).
The resulting twofeature structures are merged by means ofdefault unification (I 7c).
(\]7) \] \] case  = noraa.
|d i r  = r ightt -a rg  = <1>b.
El t?"
'II vaJ = bar  = cat = \ [cat=: \ ]Larg  bar  =c.mlcat ffim r?., = \] l bar  = 2va l  ffi {1} /nu  mLcased i r  ffi r ightr,,,,, = 2r,,\] I bar  arg ffi {1} /nu  m- Leasemm mIn (17c) the equivalence <cat val> = <cat an3>had to be replaced by a weaker  set ofequivalences, which holds for all featuresunder  val or arg.
except cat and bar.
Werepresent his by using \[\]-bracketed indices,instead of <> and by marking the attr ibuteswhich are exceptions in ix)/(\[ i ta l ic .
.TWo things are worth noticing.
First of all, theunificaUon of non-default information prior tomerging it with the non-default information,guarantees that all default information mustbe unifiable, and thus  it e l iminates thepossibi l ity of inher i tance confl icts insidetemplate definitions.
Second, the distinctionbetween default and non-default informationis relevant only in definitions, not in thecorresponding feature structures.
This makesthe use of the T-operator completely local: if adefinlUon contains a template, we can replacethis template by the corresponding featurestructure and we do not need to worry aboutthe fact that this template might contain theT-operator.The notation Just introduced increases theexpressive power of standard methods for thedescription of feature structures and can beused for an elegant t reatment  of severallinguisUc phenomena.NON-MONOTONIC INHERITANCE OF INFORMATION INTEMPLATES.
The use of default unif icationenables us to use templates even in thosecases where not all the information in thetemplate Is compatible with the informationalready present in the definition.German transitive verbs normally take anaccusative NP as argument  but there are someverbs which take a dative or genitive NP asargument.
This Is easily accounted for bydefining the case of the argument of theseverbs and lnherittng all other Informationfrom the template ~r.
(\]8) a.
"IV: ( <cat val> =VP<cat arg> ffi NP<cat arg case> =acc ).b.
he\]fen (Whelp) :( TVI <cat arg case> ffi dat ).gedenken (to c~nmem~ate)( TV!
<cat arg case> = gen ).SPECIALIZATION OF REENTRANCIES.
An  importantfunction of default unification is that It allowsus to define exceptions to the fact that tworeentrant feature structures always have todenote exactly the same feature structures.There Is a wide c lass of  l inguist icconstruct ions which seems to require suchmechanisms.Specifiers in CUG can be defined as functorswhich take a const i tuent of category C asargument, and return a constituent of categoryC, with the exception that one or more specificfeature values are changed (see Bach, \]983,Bouma, \]988).
Examples of such categoriesare determiners (see (\]6a)), complementizersand auxiliaries.
(\]9) a. that :(  <cat yah  = <cat arg><cat arg> = S<cat arg vform> = fin1<cat arg comp> = nonel<cat val comp> = that ).b.
will : ( <cat val> = <cat arg><cat rag> = VP<cat val> =VP1<cat arg vform> ffi bsel<cat val vform> ffi fin ).Note that the equation <cat val> = <cat arg>will cause all addit ional features on theargument which are not explicitly mentionedIn the non-default  part of the definition topercolate up to the value.Next, consider coordination of NPs.
(20) X0 --> X\] X2Xo<X2 cat> ffi conJ?X0> ffi <XI>?Y,O> ffi ~<g0 cat> = np<X 2 wform> ffi andkX0 num> ffi pluI<X 1 num> =NIL!
<X2 num> ffi NIL).
{20) could be used as a rule for conjunction ofNPs in UG.
It requires identity between themother and the two coordinated elements.However, requiring that  the three nodes beunifiable would be to strict.
The number  of aconjoined NP Is always plural and does notdepend on the number of the coordinated NPs.Furthermore, the number of two coordinatedelements need not be identical.
The non-default information in (20) takes care of this.The effect of this statement Is that adding thedefault informaUon <X0> = <XI> and <gO > ffi<X3> will result in a feature structure in whichXO, X1 and X3 are unified, except for theirvalues for <num>.
We are not interested in theruan-values of the conJuncts, so they are set toN/L {which should be interpreted as in section2).
The hum -value of the result is always p/u.INFLECTIONAL MORPHOLOGY.
When seen from aCUG perspective, the categories of inflectionalaffixes are comparable to those of specifiers.The plural suffix -s for forming plural nounscan, for instance, be encoded as a functionfrom (regular) singular nouns into Identical,but plural, nouns.
Thus.
we get the followingcategorization:(21) - s  : ( <cat val> = <cat arg><cat arg cat> ffi noun<cat arg class> = regularl<cat arg num> ffi sgl<cat val Hum> = plu ).Again, all additional information present onthe argument which Is not mentioned in thenon-defau l t  part  of  the definit ion, Ispercolated up to the value automatically.I, EXICAL DEFAULTS.
The lexical featurespecification defaults of GPSG can also beincorporated.
Certain information holds formost lexlcal items of a certain category, butnot for phrases  of th ls  category.
Auniflclatlon-based grammar that includes amorphological component (see, for instance,Calder, 1989 and Evans & Gazdar, 1989), wouldprobably list only (regular) root forms aslexlcal items.
For regular nouns, for instance,170only the singular form would be listed in thelexicon.
Such information can be added tolexicon definit ions by means of a lexlcaldefault rule:{22) v. N ==> ( 3SG <class> = regular}b.
(x~v ffi N.sheep = ( N<mum> =NIL<class> = irregular}.The interpretation of A ==> B is as follows: Ifthe definition D of a lexical item is unifiablewith A, than extend D to B(B D. Thus, thelexlcal entry cow would be extended with allthe information in the default rule above,whereas the lexical entry for sheep would onlybe extended with the informat ion that<person> = 3.
Note that adding the defaultinformation to the template for N directly, andthen overwriting it in the irregular cases is nota feasible alternative, as this would force us todistinguish between the template N if used todescribe nouns and the template N if used incomplex categories uch as NP/N or N/N (i.e.for determiners or adjectives it is not typicallythe case that they combine only with regularand singular nouns).& CONCLUSIONSWe have presented a general definition fordefault unification.
The fact that It does notfocus one the resolution of feature conflictsalone, makes it possible to define defaultuni f icat ion as an operat ion on featurestructures, rather than as an operation addingone equation at a tlme to a given featuredescription.
This general ization makes itpossible to give a uniform treatment of suchthings as adding default Information to atemplate, overwriting of feature values andlexical default rules.
We believe that theexamples in section 3 demonstrate hat this isa useful extension of UG, as it supports thedefinition of exceptions, the formulation moreadequate theories of feature percolation, andthe extension of UG with a morphologicalcomponent.REFERENCESBach, Emmon 1983 Generalized CategorialGrammars and the English Auxiliary.
InF.Heny and B.R/chards (eds.)
LinguisticCateyor/es, Vol II, Dordrecht, Reidel.Bouma, Gosse 1988 Modifiers and Specifiersin Categor la l  Unif icat ion Grammar ,Lingu/st/cs, vo126, 21-46.Calder,  Jonathan  1989 Parad igmat icMorphology.
Proceedings of the fourthConference of the European Chapter ofthe ACL, Univers i ty of Manchester ,Institute of Science and Technology, 58-65.Calder, Jo; Klein, Ewan & Zeevat, Henk 1988Unif icat ion Categor ia l  Grammar :  aconcise, extendable grammar for naturallanguage processing.
Proceedings ofCollng 1988, Hungar ian  Academy ofSciences, Budapest, 83-86.DOrre, Jochen; Eisele, Andreas; Wedekind,Jflrgen; Calder, Jo; Reape, Mike 1990 ASurvey of  Lingustfcally Motivatedextens ions to Unlf icatlon-BasedFormalisms.
ESPRIT Basic ResearchAction 3175, Deliverable R3.I.A.Eisele, Andreas & D6rre, Jochen1986 ALexlcal-Functlonal Grammar  System inProlog.
Proceedings of COLING 86,Institut fQr angewandte KommunikaUons-und Sprachforschung, Bonn, 551-553.Eisele, Andreas & D6rre, Jochen 1988Uni f icat ion of D is junct ive  FeatureDescr ipt ions.
Proceedings of the 26thAnnual Meeting of the Association forComputat ional  L inguist ics,  StateUniversity of New York, Buffalo, NY, 286-294.Evans,  Roger 1987 Towards a Formalspecification of Defaults in GPSG.
In E.Klein & J.  van Benthem (eds.
), Categories,Polymorphlsm and Unification.
Universityof Edinburgh, Ed inburgh/  University ofAmsterdam, Amsterdam, 73-93.Evans, Roger & Gazdar, Gerald 1989 Inferencein DATR.
Proceedings of the fourthConference of the European Chpater ofthe ACL, Univers i ty of Manchester ,Institute of Science and Technology, 66-71.Fllckinger, Daniel; Pollard, Carl & Wasow,Thomas 1985 Structure-Sharlng In I.exicalRepresentation.
Proceedings of the 23rdAnnual Meeting of the Association for171Computational Linguistics, University ofChicago, Chicago, Illinois, 262-267.Gazdar, Gerald 1987 Linguistic Applications ofDefault Inheritance Mechanisms.
In P.Whitelock, H. Somers, P. Bennett, R,Johnson, and M. McGee Wood (eds.
),Linguistic Theory and ComputerApplicatfons.
Academic Press, London,37-68.Gazdar, Gerald; Klein, Ewan: Pullum, Geoffry;Sag, Ivan 1985 Generalized PhraseStructure Grammar.
Blackwell, London.Oazdar, Gerald & Mellish, Chris 1989 NaturalLanguage Processing in Prolog.
Anintroduct ion to Computat ionalLinguistics.
Addison-Wesley, Reading, M/LKaplan, Ronald 1987 Three seductions ofComputational Psycholinguistics.
In P.Whitelock, H. Somers, P. Bennett, R,Johnson, and M. McGee Wood (eds.
),Linguistic theory and ComputerApplications.
Academic Press, London,149-188.Kasper, Robert & Rounds, William1986 ALogical Semantics for Feature Structures.Proceedings of the 26th Annual Meeting ofthe Association for ComputationalLinguistics, Columbia University, NewYork, NY, 257-266.Pollard, Carl & Sag, Ivan 1987 Information-Based Syntax and Semantics, vol I :Fundamentals, CSLI Lecture Notes 13,University of Chicago Press.
Chicago.Shieber, Stuart; Uszkorelt, Hans; Perelra,Fernando; Robinson, Jane; & Tyson,Mabry 1983 The Formal ism andImplementation f PATR-II.
In B. Grosz &M. SUckel (eds.)
Research on InteractiveAcquisition and Use of Knowledge, SRIInternational, Menlo Park, Ca.Shieber ,  S tuar t  1986a A SimpleReconstruction of GPSG.
Proceedings ofCOL/NG 1986.
Instltut f(Ir angewandteKommunikations- und Spraehforschung,Bonn, 211-215.Shieber, Stuart 1986b An Introduction toUnlf lcatlon-based Approaches toGrammar .
CSLI Lecture Notes 4,University of Chicago Press, Chicago.Uszkoreit, Hans 1986 Categorlal UnificationGrammars.
Proceedings of COIINO 1986.I ns t l tu t  fQr angewandteKommunikations- und Sprachforschung,Bonn, 187-194.172
