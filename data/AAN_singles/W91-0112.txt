A GENERAL COMPUTATIONAL METHOD FOR GRAMMAR INVERSIONTomek StrzalkowskiCourant Institute of Mathematical SciencesNew York University715 Broadway, rm.
704New York, NY 10003tomek@cs.nyu.eduABSTRACTA reversible grammar is usually understood as acomputational or linguistic system that can be usedboth for analysis ~nd generation of the language itdefines.
For example, a directivepars_gen (Sent,For~n) would assign, depending uponthe binding status Of its arguments, the representationin (Toronto,chased (Fido,John )) to the sentence Fidochased John in To~onto, or it would produce one ofthe several possib!e paraphrases of this sentencegiven its represen~tion.
Building such bi-directionalsystems has long been considered critical for variousnatural language processing tasks, especially inmachine translation.
This paper presents a generalcomputational method for automated inversion of aunification-based p~ser for natural anguage into anefficient generator.
It clarifies and expands theresults of earlier work on reversible grammars by thisauthor and the others.
A more powerful version ofthe grammar inversion algorithm is developed with aspecial emphasis being placed on the proper treat-ment of recursive ~rules.
The grammar inversionalgorithm described here is at the core of theJapanese-English :machine translation projectcurrently under development a  NYU.REVERSIBLE  GRAMMARSA reversible grammar is usually understood asa computational or linguistic system that can be usedboth for analysis ~d generation of the language itdefines.
For : example, a directivepars_gen (Sent,Form) would assign, depending uponthe binding status of its arguments, the representationin (Toronto, chased (Fido,John)) to the sentence Fidochased John in Toronto, or it would produce one ofthe several possibly paraphrases of this sentencegiven its representation.
In the last several years,there have been a growing amount of researchactivity in reversibi?
grammars for natural anguage,particularly in condecfion with machine translationwork, and in natural anguage generation.
Develop-ment of reversible 'grammar systems is considereddesirable for variet), of reasons that include theirimmediate use in both parsing and generation, areduction in the development and maintenance effort,soundness and completeness of linguistic coverage,as well as the match between their analysis and syn-thesis capabilities.
These properties are important inany linguistic system, especially in machine transla-tion, and in various interactive natural language sys-tems where the direction of communication fre-quently changes.
In this paper we are primarilyinterested in the computational aspects I of reversibil-ity that include bi-directional evaluation and dualcompilation of computer grammars, inversion ofparsers into efficient generators, and derivation of"generating-versions" of existing parsing algorithms.Some of the recent resea~h in this area is reported in(Calder et al, 1989; Dymetman and Isabelle, 1988;Dymetman et al, 1990; Estival, 1990; Hasida andIsizaki, 1987; Ishizaki, 1990; Shieber, 1988; Shieberet al, 1990; Strzalkowski, 1990a-c; Strzalkowski andPeng, 1990; van Noord, 1990; and Wedekind, 1988).Dymetman and Isabelle (1988) describe a top-downinterpreter for definite clause grammars that staticallyreorders clause literals according to a hand-eodedspecification, and further allows for dynamic selec-tion of AND goals 2during execution, using the tech-nique known as the goal freezing (Colmerauer, 1982;Naish, 1986).
Shieber et al (1990) propose a mixedtop-down/bottom-up interpretation, i  which certaingoals, namely those whose expansion is defined bythe so-called "chain rules", 3are not expanded uringthe top-down phase of the interpreter, but insteadthey are passed over until a nearest non-chain rule isreached.
In the bottom-up hase the missing parts ofthe goal-expansion tree will be filled in by applyingi For linguistic aspects of reversible grammars, see (Kay,1984; Landsbergen, 1987; Neuman, 1990; Steedman, 1987).2 Literals on the fight-hand side of a clause create ANDgoals; literals with the same predicate names on the left-hand sidesof different clauses create OR goals.3 A chain rule is one where the main binding.carrying ar u-ment (the "head") ispassed unchanged from the left-hand side tothe fight.
For example, assert(P) -->subj(Pl),verb(P2),obj(PI,P2,P), is a chain rule with respect to theargument P. assuming that P is the 'head' argument.91the chain rules in a backward manner.
This tech-nique, known as 'head-driven' evaluation, can beapplied quite profitably to various grammar compila-tion tasks, including the inverse computation, but itrequires that the underlying rammar is given in aform where the information about he semantic headsin nonterminals i  made explicit.
In addition, the pro-cedure, as described in (Shieber et al 1990), makesno attempt to impose a proper ordering of the "non-chain" goals, which may have an adverse ffect onthe generator efficiency.
4The grammar inversion method described inthis paper transforms one set of PROLOG clauses(representing a parser, eg.)
into another set ofclauses (representing a generator) using an off-linecompilation process.
The generator is thus justanother PROLOG program that has the property ofbeing an inverse of the parser program, that is, it per-forms inverse computation.
5 A unification grammaris normally compiled into PROLOG tO obta in  an exe-cutable program (usually a parser).
Subsequently, theinversion process takes place at the PROLOG codelevel, and is therefore independent of any specificgrammar formalism used.
The obtained inverted pro-gram has been demonstrated to be quite efficient, andwe noted that the same technique can be applied toparser/generator optimization.
Our method is alsoshown to deal adequately with recursive clauses thatcreated problems in purely top-down compilation.
6The inter-clausal inversion procedure discussed hereeffects global changes in goal ordering by movingselected goals between clauses and even creatingnew clauses.
The net effect is similar to that achievedin the head-driven evaluation, except hat no explicitconcept of 'head' or 'chain-rule' is used.
The algo-rithm has been tested on a substantial coverage PRO-LOG grammar for English derived form the PRO-TEUS Parser Grammar (Grishman, 1986), and theLinguistic String Grammar for English (Sager,1981).
7* Some concern has also been voiced (Gardent and Plain-fosse, 1990) about he termination conditions of this algorithm.5 Some programs may in fact be multi-directional, nd there-fore may have several 'inverses' or 'modes'.6 Shieber et al (1990) have shown that some recursiveclauses c.annot be executed using top.down evaluation thusmotivating the use of a mixed top-down/bouom-up evaluation oftheir 'head.driven' compilation.At present the grammar consists of 400+ productions.IN AND OUT ARGUMENTS IN LITERALSLiterals in the grammar clauses can be markedfor the "modes" in which they are used.
When aliteral is submitted to execution then those of its argu-ments which are bound at that time are called the "in"arguments.
After the computation is complete, someof the previously unbound arguments may becomebound; these are called the "out" arguments.
Forexample, in concat(\[a,b\],\[c,d\],Z), which is used forlist concatenation, the first two arguments are "in",while the third is "out".
The roles are reversed whenconcat is used for decomposition, as inconcat(X,Y,\[a,b,c,d\]).
In the literalsubject(A1,A2,NUM,P), taken from an English gram-mar, AI and A2 are input and output strings of words,NUM is the number of the subject phrase, and P isthe final translation.
When the grammar is used forparsing, the "in" argument isA1; the "out" argumentsare A2, NUM and P; when it is used for generation,the "in" argument is P; the "out" arguments are A1and NUM.
In generation, A2 is neither "in" nor "out".
"In" and "out" status of arguments in a PROLOGprogram can be computed statically at compile time.The general algorithm has been described in (StrTal-kowski, 1990c; Strzalkowski and Peng, 1990).ESSENTIAL ARGUMENTS: AN EXTENSIONThe notion of an essential argument in a PRO-LOG literal has been first introduced in (Strzalkowski,1989), and subsequently extended in (Strzalkowski,1990bc; Sttzalkowski and Peng, 1990).
In short, X isan essential argument in a literal p (" .- X ?
-- ) if X isrequired to be "in" for a successful evaluation of thisliteral.
By a successful evaluation of a literal wemean here the execution that is guaranteed to stop,and moreover, that will proceed along an optimalpath.
For instance, an evaluation of the goalmere (a,L), with an intention to find a list L of whicha is a member, leads to a non-terminating executionunless L's value is known.
Likewise, a request ogenerate a main verb in a sentence when the onlyinformation we have is its root form (or "logicalform") may lead to repeated access to the lexiconuntil the "correct" surface form is chosen.
Therefore,for a lexicon access goal, sayacclex (Word,Feats,Root), it is reasonable to requirethat both Feats and Root are the essential arguments,in other words, that the set {Feat,Root} is a minimalset of essential arguments, or a MSEA, for acclex.The following procedure computes the set of active92iMSEA's in a clause head literal, sPROCEDURE MSEAS(MS,MSEA,VP,i,OUT)\[computing active MSEAs\]Given a clause p(X1, . "
,X,) :- r1(Xl, | ."
.Xl.kt),? "
,  rs(X,.l ""Xs.~,), where i_>1, we compute theset of active MSEAs in the head predicate p as fol-lows: 9(1) Start with MSEA = (~,VP = VAR({Xi , ' ' '  ,X,}), i=1, andOUT = OUT0 = 0.
The set of active MSEA's forp is returned in MS.(2) For i= l , ' " , s ,  let MR i be the set of activeMSEA's of r i, and let MRUi = {ml.j I j= l  .
.
.
ri}be obtained from MR i by replacing all variablesby their corresponding actual arguments of ri.
(3) Compute the set MPi = {I.q.j I j= l  - - .
ri}l , whereIXi.j = (VAR (mi.j) - OUTi-l.k), where OUTi_t.6 isthe set of all :'out" arguments in literals r~ tor i - l .
(4) For each l.tij in MPi where l~ .s  do the follow-ing:(a) if l.tid = O then:(i) compuie set OUTj of "out" arguments ofri;(ii) compute OUTij := OUTj u OUTi-l.t;(iii) callMSEAS (MSi.
j,|.\[i_l .k, VP,i + 1, OUTi.j);(b) otherwise, if ~i.j ~ (~ then find all distinctminimal size sets vt c VP such that when-ever the arguments in vt are "in", then thearguments ida I.ti,j are "out".
If such vt's exist,then for eve W vt do:(i) assumeiv, is "in" in p;(ii) compute the set OUTi.h of "out" argu-ments in all literals from r I to ri;(iii) callMSEAS,(MSi.h ,I.ti_1.t .A,,, VP,i + l,OUTi.h );(c) otherwise, if no such v, exist, MSij := ?~.
(5) Compute MS :=: t,...) MSij;j=l..r' Active MSEA's are those existing with a given definitionof a predicate.
Other, non-active MSEA's can be activated when?
he  clauses making up thi~ definition are altered in some way.
Theprocedure can be straightforwardly augmented to compute allMSEAs (Strzalkowski, 1990c).9 For i=l the sets of essential arguments are selected so as tominimize the number of possible solutions to 1.
(6) For MSEAS (MS,MSEA,VP,s+I,OUT), i.e., fori=s+l ,doMS := {MSEA}.As a simple example consider the following clause:sent(P) :- vp(N,P),np(N).Assuming that MSEA'S for vp and np are {P} and{N}, respectively, and that N is "out" in vp, we caneasily compute that {P} is the MSEA in sent.
To see it,we note that MRU1 for vp is { {P} } and, therefore,that I.q.l = {P}.
Next, we note that MRU2 for np is{ {N}}, and since OUTi.1 from vp is {N}, we obtainthat l.t2.1 = ~,  and subsequently that {P} is the onlyMSEA in sent.The procedure presented above is sufficient inmany cases, but it cannot properly handle certaintypes of recursive definitions.
Consider, for example,the problem of assigning the set of MSEA's tomem(Elem,List), where mem (list membership) isdefined as follows:mem (Elem, \[First IList \]) :-mere (Elem,List).mem (Elem, \[Elem IList \]).The MSEAS procedure assigns MS=\[ {Elem},{List} },we note however, that the first argument of mem can-not alone control the recursion in the first clausesince the right-hand side (rhs) literal would repeat-edly unify with the clause head, thus causing infiniterecursion.
This consideration excludes {Elem} fromthe list of possible MSEAs for mere.
In (Strzalkowski,1989) we introduced the directed relation alwaysunifiable among terms, which was informally charac-terized as follows.
A term X is always unifiable withterm Y if they unify regardless of any bindings thatmay occur in X, providing that variables in X and Yare standardized apart, and that Y remains unchanged.According to this definition any term is alwaysunifiable with a variable, while the opposite is notnecessarily Irue.
For example, the variable X is notalways unifiable with the functional term f(Y)because binding X with g(Z) will make these twoterms non-unifiable.
This relation can be formallycharacterized asfollows: given two terms X and Y wesay that Y is always unifiable with X (and write X_<Y)iff the unification of X and Y yields Y, where the vari-ables occurring in X and Y have been standardizedapart.
1?
Since _< describes a partial order amongterms, we can talk of its transitive closure _<*.
Nowwe can augment the MSEAS procedure with the fol-lowing two steps (to be placed between steps (2) and,0 So defined, the relation always uni~ble becomes an in-verse of another elation: less instantiat~d, hence the particulardirection of S sign.93(3)) that would exclude certain MSEAs from re.cur-sive clauses.
(2A)If r i = p then for every mi, u E MRUi if for everyargument Yt ~ mi.,,, where Yt is the l-th argumentin ri, and Xi is the l-th argument in p, we havethat Xt_<* Yi then remove mi, u from MRU i.
(2B)For every set mi, uj = mi.
u u { Zi.
j }, where Zi,j isthe j-th argument in r~ such that it is not alreadyin mi.u and it is not the case that YiS'Zid, whereYj is a j-th argument in p, if mi.ui ts not a super-set of any other mi, t remaining in MRUi, thenadd mi, ui to MRU1.In order for the MSEAS procedure to retain its practi-cal significance we need to restrict he closure of <_ tobe defined only on certain special sets of terms thatwe call ordered series.
H It turns out that this res-tricted relation is entirely sufficient in the task ofgrammar inversion, if we assume that the originalgrammar is itself well-defined.DEFINITION 1 (argument series)Let p ( .
?
?
Yo " ?
? )
: -  r l ,  ?
?
?
,rn be a clause, andril, " " ?
,rid be an ordered subset of the literals on theright-hand side of this clause.
Let ri~,t be either aliteral to the right of rlk or the head literal p. Theordered set of terms <Yo,X i ,Y l ,  " ' "  ,Xk,Yk,Xk+l > isan argument series iff the following conditions aremet:(1) Xk+~ is an argument in ri~+~;(2) for every i=1 " .
-k ,  Xi is different from any Xjfor j <i;(3) for every j= l  ".-  k, X i and Yi are arguments to%, that is, r l j ( .
.
.X i ,Y j .
.
.
), such that if Xj is"in" then Yj is "out" 12; and(4) for every j=0.
.
-k ,  either Xj+i=Y j orX j+ 1 =f  (Yj) or Yj=f (X j+l), where f (X) denotes aterm containing a subterm X.Note that this definition already ensures thatthe argument series obtained between X0 and Xk+t isthe shortest one.
As an example, consider the follow-ing clauses:u A similar concept of gu ide-s t ructure  is introduced in(Dymetman et al, 1990), however the ordered series is less restric-tive and covers a larger class of recursive programs.12 yj may be partially "out"; see (Strzalkowski, 1990c) forthe definition of delayed "out" status.vp(X) :- np(X,Y),vp(Y).np f f  (x),x).Assuming that the argument X in the literal vp (X) onthe left-hand side (lhs) of the first clause is "in", wecan easily check that <X,X,Y,Y> constitutes an argu-ment series between arguments of vp in the firstclause.DEFINITION 2 (weakly ordered series) 13An argument series <Yo,X1 ,Y1 , .
.
.
,Xk,YkX~+i> inthe clause P: - r l  .
.
.
r ,  is weakly ordered iffYo_<*Xk+l \[or Xk+l_<'Y0\], where _<* is a closure of <_defined as follows:(1) for every i=1 .
- .
k, such that r i j ( " "  X j ,Y i " "  )there exists a clauser i j ( " "  ,X,Y, .
- " ) : - s l ,  ? ""
,s, ,  where X and Yunify with X; and Y./, respectively, such thatX_<*Y \[or Y_<*:(\];(2) for every i=O.. "k, Xi+l=Yi or Xi+l=f(Yi) \[orri=f (Xi+l)\].Looking back at the definition of mem (Elem,List) wenote that the first (recursive) clause contains twoordered series.
The first series, <Elem,Elem >, is notordered (or we may say it is ordered weakly in bothdirections), and therefore Elem on the left-hand sideof the clause will always unify with Elem on theright, thus causing non-terminating recursion.
Theother series, <\[First IList\],List>, is ordered in sucha way that \[First IList\] will not be always unifiablewith List, and thus the recursion is guaranteed to ter-minate.
This leaves {List} as the only acceptableMSEA for  mem.Consider now the following new example:vp(X) :-  np(X,Y) ,vp(Y) .vp(X) :- v(X).np (x,f (x)).Note that the series <X,X,Y,Y> in the first clause isordered so that X_<*Y.
In other words, Y in vp on therhs is always unifiable with X on the lhs.
This meansthat a non-terminating recursion will result if weattempt to execute the first clause top-down.
On theother hand, it may be noted that since the series isordered in one direction only, that is, we don't haveY_<*X, we could invert it so as to obtain Y_<*X, but notX_<*Y.
To accomplish this, it is enough to swap thearguments in the clause defining np, thus redirectingthe recursion.
The revised program is guaranteed to,3 A series can also be strongly ordered in a given direction,if it is weakly ordered in that direction and it is not weakly orderedin the opposite direction.94Fterminate, providing that vp's argument is bound,which may be achieved by further reordering ofgoals.t4 !The ordered Series relation is crucial in detect-ing and removing!of non-terminating left-recursiverules of the grammar.
The first of the following twoalgorithms finds if an argument series is ordered in aspecified directio n, without performing a partialevaluation of goals~ The second algorithm shows howa directed series can be inverted.ALGORITHM l (finding if Yo_<'Xk+~ (weakly))Given an: argument series<Y0,Xl ,Y1, "'" ,X~,YkX~+1 > do the following:(1) Find if for every i=0.
.
,  k, either Xi+l=Yi orXi+l=f(Yi); if the answer is negative, return NOand quit.
(2) For every i=1 ?
?
?
k, find a clauseri~(" " .
X ,Y .  "
' : ) : - s l ,  "" ,s in such that Xj andYj unify with X and Y, respectively, and there is aleading series ~.X ?
?
?
Y> such that X_<*Y. ReturnNO if no such clause is found, and quit.
(3) In the special i case when k=0, i.e., p has noright-hand side, Yo_<?X~ if either Yo=X~ orXl=f(Yo).
If this is not the ease return NO, andquit.
(4) Otherwise, return YES.When ALGoRrrHM i returns a YES, it has generatedan ordered path (i.e,, the series with all the necessarysubseries) between X 0 and Xk+l to prove it.
If thispath is ordered in one direction only, that is, thereexists at least one pair of adjacent elements Xi and Yjwithin this path such that either Xi=f(Yj) orYj=f(Xi), but not Xi=Yj, then we say that the path isproperly ordered.
:In addition, if we force ALGO-RITHM I tO generate all the paths for a given series,and they all turn out to be properly ordered, then wewill say that the series itself is properly ordered.
Wecan attempt to invert a properly ordered path, but notthe one which is only improperly ordered, i.e., inboth directions.
Therefore, for a series to be inverti-ble all its paths must be properly ordered, though notnecessarily in the sahae direction) sALGORITHM 2 (inverting properly ordered series)Given a clause p !
- r l , - .
.
, r , ,  and an argument14 Reordering of goals may be required to make sure that ap-propnate essenual rguments are bound.ts Recursion defi~ed with respect to improperly orderedseries is oonsidered ill-formed.series <Yo,X1,Y1,' ' ' ,Xk,YkX,+i> such that it isproperly (weakly) ordered as X0_<'Xk+l \[orXk+l_<'X0\], invert it as follows:(1) For each %(-- .
,Xj ,Yj ,  " ' )  appearing on therhs of the clause, find all clausesrlj(.
.
.
,X,Y, .
.
.  )
:- sl, "'" ,sin such that X andY unify with X/and Yj, respectively, and there isa proper ordering X_<*Y \[or Y_<*X\].
(2) Recursively invert the series <X .. ?
Y>; for thespecial case where m =0, that is, rij clause has norhs, exchange places of X and Y.
(3) For every pair of Yi and Xi+t (i=O.." k), if eitherYi=f(Xi+l) or Xi+l=f(Yi), where f is fullyinstantiated, exchange Yi with Xi+l, and do noth-ing otherwise.We now return to the MSEAS procedure and add anew step (2C), that will follow the two steps (2A)and (2B) discussed earlier.
The option in (2C) is usedwhen the expansion of a MSEA rejected in step (2A)has failed in (2B).
In an earlier formulation of thisprocedure an empty MSEA was returned, indicatingan non-executable clause.
In step (2C) we attempt torescue those clauses in which the recursion is basedon invertible weakly ordered series.
(2C)Find an argument Y~ ~ mi.u, a t-th argument of r i,such that Xt_<" Yt, where Xt is the t-th argument inthe head literal p and the series <Xt "'" Yt> isproperly ordered.
If no such Yt is found, augmentmi,u with additional arguments; quit if no furtherprogress is possible) 6 Invert the series withALGORITHM 2, obtaining a strong.ly ordered series<X ' t " "  Y't> such that Y't_< X't.
Replace Yiwith Y't in rni,u and add the resulting set toMRU~.At this point we may consider a specific linguisticexample involving a generalized left-recursive pro-duction based on a properly ordered series) 7\[1\] sent (V1, V 3,Sem ) :-np(V1,V2,Ssem),vp (V2, V3,\[Ssem \],Sem).\[2\] vp (V1, V3,Args, Vsem) :-vp (V1, V2, \[Csem I Args \], Vsera),np( V2, V3, Csem).Is As in step (2B) we have to maintain the minimality ofm~...i~ This example is loosely based on the grammar describedin (Shieber t al., 1990).95\[3\] vp (V1, V2,Args, Vsem) :-v (VI, V2,Args, Vsem).\[41 v (V1, V2, \[Obj, Subj \],chased (Subj, Obj)) :-chased (VI, V2).\[5\] chased (\[chased IX \],X).\[6\] np (\[john I X \],X,john ).\[71 np (\[fido IX \],X,fido ).We concentrate here on the clause \[2\], and note thatthere are three argument series between the vpliterals: <V1,VI>, <Args, \[Csem IArgs\]>, and<Vsem,Vsem >, of which only the second one isinvertible.
We also note that in clause \[3\], the collec-tion of MSEAs for vp include {V1} and {Vsem},where V1 represents he surface suing, and Vsem its"semantics".
When we use this grammar for genera-tion, {V1} is eliminated in step (2A) of the MSEASprocedure, while {Vsem}, is rescued in step (2C),where it is augmented with Args which belongs to theinvertible series.
We obtain a new set {Args',Vsem},which, if we decide to use it, will also alter the clause\[2\] as shown below, is\[2a\] vp(V1,V3,\[Csem IArgs\],Vsem) :-vp (V1, V2,Args, Vsem),np (V2, V3, Csem).This altered clause can be used in the generator code,but we still have to solve the problem of having the\[Csem IArgs\] bound, in addition to Vsem.
19 It mustbe noted that we can no longer meaningfully use theformer "in" status (if there was one) of this argumentposition, once the series it heads has been inverted.We shall return to this problem shortly.INTRA-CLAUSAL INVERSIONThe following general rule is adopted for aneffective xecution of logic programs: never expanda goal before at least one of its active MSFEAs is "in".This simple principle can be easily violated when aprogram written to perform in a given direction isused to run "backwards", or for that matter, in anyother direction.
In particular, a parser frequently can-not be used as a generator without violating theMSEA-binding rule.
This problem is particularlyacute within a fixed-order evaluation strategy, suchas that of PROLOG.
The most unpleasant consequenceof disregarding the above rule is that the programmay go into an infinite loop and have to be aborted,which happens urprisingly often for non-trivial sizeIs In our inversion algorithm we would not alter the clauseuntil we find that he MSEA needs to be used.19 Vsem isexpected to be "in" during eneration, since it car-ties the "semantics" of vp, that is, provides the input o the genera-tor.programs.
Even if this does not happen, the programperformance can be seriously hampered by excessiveguessing and backtracking.
Therefore, in order torun a parser in the reverse, we must rearrange theorder in which its goals are expanded.
This can beachieved in the following three steps:PROCEDURE INVERSE(1) Compute "in" and "out" status of arguments forthe reversed computation.
If the top-level goalparse (String,Sem) is used to invoke a generator,then Sere is initially "in", while String isexpected to have "out" status.
(2) Compute sets of all (active and non-active)MSEAs for predicates used in the program.
(3) For each goal, if none of its MSEAs is "in" thenmove this goal to a new position with respect oother goals in such a way that at least one of itsMSEAs is "in".
If this "in" MSEA is not an activeone, recursively invert clauses defining thegoal's predicate so as to make the MSEA becomeactive.In a basic formulation of the inversion algorithm themovement of goals in step (3) is confined to bewithin the fight-hand sides of program clauses, thatis, goals cannot be moved between clauses.
Theinversion process proceeds top-down, starting withthe top-level clause, for example parse (String,Sere)?
- sent(String,\[\],Sere).
The restricted movementinversion algorithm INVERSE has been documented indetail in (Strzalkowski, 1990ac).
It is demonstratedhere on the following clause taken from a parser pro-gram, and which recognizes yes-no questions:yesnoq (A1,A4,P) :-verb (A1,A2,Num,P2),subject (A2,A3,Num,P1),object (A3,A4,P I,P2,P).When rewriting this clause for generation, we wouldplace object first (it has P "in", and A3, P1, P2 "out"),then subject (it has the essential PI "in", and A2 andNum "out"), and finally verb (its MSEA is either{A1} or {Num,P2}, the latter being completely "in"now).
The net effect is the following generatorclause: 2oyesnoq (A1,A4,P) :-object (A3,A4,P I,P2,P),subject (A2,A3,Num,P1),verb (A1,A2,Num,P2).INVERSE works satisfactorily for most grammars, butit cannot properly handle certain types of clauses20 Note that he surface linguistic string is not generatedfrom the left to the tight.96where no definite ordering of goals can be achievedeven after redefinition of goal predicates.
This canhappen when two or more literals wait for oneanother to have bindings delivered to some of theiressential argument.
The extended MSEAS procedureis used to define a general inversion procedure INTER-CLAUSAL tO be discussed next.INTER-CLAUSA'L INVERSIONConsider again the example given at the end ofthe section on essential arguments.
After applyingMSEAS procedure we find that the only way to saveMSEA {Args, Vsera} is to invert the series~.Args,\[Csem IArgs\]> between vp literals.
Thisalters the affected, clause \[2\] as shown below (weshow also other clauses that will be affected at a laterstage): 2\]\[1\] sent(Sen) :-np (Ssem), W (\[Ssem \],Sem).\[2\] vp(\[Csem IArg: \],Vsem) :-vp (Args, VSem ),np (Csem ).\[3\] vp (Args, Vsem)':-v (Args, Vs(m).In order to use the second clause for generation, wenow require \[CsemlArgs\] to be "in" at the head literalvp.
This, however, is not the case since the only inputwe receive for generation is the binding to Sera inclause \[1\], and subsequently, Vsem in \[2\], for exam-ple, ?-sent (chased (Fido,John)).
Therefore the codestill cannot be executed.
Moreover, we note thatclause \[1\] is now deadlocked, since neither vp nor npcan be executed first.
22 At this point the only remain-ing option is to usel interclausal ordering in an effortto inverse \[1\].
We move v from the rhs of \[3\] to \[1\],while np travels from \[1\] to \[3\].
The following newcode is obtained (the second argument in the new vp"can be dropped, and the new MSEA for vp" is{Args} ):2a7aZ The string variables VI, V2, etc.
are dropped for clarity.22 Them are situations when a clause would not appeardeadlocked but still require expansion, for example if we replace\[11 by sent(Sem,Ssern) :-Ivp(Ssern,Sem), with Ssem bound in sent.This clause is equivalent to sent(Sera,Ssem) :-.
.
.
Vsem=Ssern,vp(Vsem,Sem), but since the series m 121 has been in-verted we can no longerlmeaningfull y evaluate the ths fiterals inthe given order.
In fact we need to evaluate vp first which cannot bedone until Vsem is bound.An alternative is:to leave Ill intact (except for goal order-ing) and add an "interface" clause that would relate the old vp tothe new vp'.
In such case the procedure would generate an addi-tional argument for vp t ih order to remm the final value of Ar&swhich needs to be passed to np.\[1'1 sent(Sere) :-v (Args, Sera),vp'(Args).\[2'\] vp"(\[Csem IArgs \]) :-vp'(Args),np (Csem).\[3'\] vp'(\[Ssem \]):-np ( Ssem ).This code is executable provided that Sere is bound insent.
Since Args is "out" in v, the recursion in \[2'\] iswell defined at last.
The effect of the interclausalordering is achieved by adopting the tNTERCLAUSALprocedure described below.
The procedure isinvoked when a deadlocked clause has beenidentified by INVERSE, that is, a clause in which theright-hand side literals cannot be completely ordered.PROCEDURE INTERCLAUSAL(DLC)\[Inter-clausal inversion\](1) Convert the deadlocked clause into a specialcanonical form in which the clause consistsexclusively of two types of literals: theunification goals in the form X=Y where X is avariable and Y is a term, and the remainingliterals whose arguments are only variables (i.e.,no constants or functional terms are allowed).Any unification goals derived from the headliteral are placed at the front of the rhs.
In addi-tion, if p ( .
.
.
X .
- .  )
is a recursive goal on therhs of the clause, such that X is an "in" variableunifiable with the head of an inverted series inthe definition of p, then replace X by a new vari-able X1 and insert a unification goal XI=X.
Theclause in \[1\] above is transformed into the fol-lowing form:\[1\] sent(Sem) :-np ( Ssem ),A rgs = \[Ssem \],vp (Args, Sem ).
(2) Select one or more non-unification goals, startingwith the "semantic-head" goal (if any), for staticexpansion.
The "semantic-head" goal is the onethat shares an essential argument with the literalat the head of the clause.
Recursive clauses inthe definitions of goal predicates should never beused for expansion.
In the example at hand, vpcan be expanded with \[3\].
(3) Convert he clauses to be used for goal expan-sion into the canonical form.
In our example \[3\]needs no conversion.
(4) Expand deadlocked goals by replacing them withappropriately aliased fight-hand sides of theclauses elected for expansion.
In effect we per-form a partial evaluation of these goals.
Expand-ing vp in \[1\] with \[3\] yields the following new97clause:\[la\] sent (Sere):-np ( Ssem ),Args =\[Ssem \],v (Args,Sem).
(5) Find an executable order of the goals in theexpanded clause.
If not possible, expand moregoals by recursively invoking INTFERCLAUSAL,until the clause can he ordered or no furtherexpansion is possible.
In our example \[la\] canbe ordered as follows:\[lb\] sent (Sem ) :-v(Args,Sem),Args=\[Ssem \],np (Ssem).
(6) Break the expanded clause back into two (ormore) "original" clauses in such a way that: (a)the resulting clauses are executable, and (b) theclause which has been expanded is made as gen-eral as possible by moving as many unificationgoals as possible out to the clause(s) used inexpansion.
In our example v(Args, Sem) has toremain in \[lb\], but the remainer of the rhs can bemoved to the new vp" clause.
We obtain the fol-lowing clauses (note that clause \[2\] has thus farremained unchanged throughout this process):lib\] sent (Sem) :-v (Args,Sem),vp'(Args,_).\[2b\] vp'(\[Csem IArgs\],Sem) :-vp'(Args,Sem),np ( Csem ).\[3b\] vp'(Args,_) :-Args =\[Ssem \],np ( S sem ).
(7) Finally, simplify the clauses and return to thestandard form by removing unification goals.Remove superfluous arguments in literals.
Theresult are the clauses \[1'\] to \[3'\] above.CONCLUSIONSWe described a general method for inversionof logic grammars that transforms a parser into anefficient generator using an off-line compilation pro-cess that manipulates parser's clauses.
The resulting"inverted-parser" generator behaves as if it was"parsing" a structured representation translating itinto a well-formed linguistic string.
The augmentedgrammar compilation procedure presented here isalready quite general: it appears to subsume both thestatic compilation procedure of Strzalkowski (1990c),and the head-driven grammar evaluation technique ofShieber et al (1990).The process of grammar inversion is logicallydivided into two stages: (a) computing the collectionsof minimal sets of essential arguments (MSEAs) inpredicates, and (b) rearranging the order of goals inthe grammar so that at least one active MSEA is "in"in every literal when its expansion is attempted.
Thefirst stage also includes computing the "in" and "out"arguments.
In the second stage, the goal inversionprocess is initialized by the procedure INVERSE,which recursively reorders goals on the right-handsides of clauses to meet the MSEA-binding require-ment.
Deadlocked clauses which cannot be orderedwith INVERSE are passed for the interclausal orderingwith the procedure I/qTERCLAUSAL.
Special treatmentis provided for recursive goals defined with respect oproperly ordered series of arguments.
Whenevernecessary, the direction of recursion is invertedallowing for "backward" computation of these goals.This provision eliminates an additional step of gram-mar normalization.In this paper we described the main principlesof grammar inversion and discussed some of the cen-tral procedures, but we have mostly abstracted fromimplementation level considerations.
A substantialpart of the grammar inversion procedure has beenimplemented, including the computation of minimalsets of essential arguments, and is used in aJapanese-English machine translation system.
24ACKNOWLEDGEMENTSThis paper is based upon work supported bythe Defense Advanced Research Project Agencyunder Contract N00014-90-J-1851 from the Office ofNaval Research, and by the National Science Foun-dation under Grant IRI-89-02304.
Thanks to MarcDymetman, Patrick Saint-Dizier, and Gertjan vanNoord for their comments on an earlier version ofthis paper.REFERENCESCalder, Jonathan, Mike Reape and HenkZeevat.
1989.
"An Algorithm for Generation inUnification Categorial Grammar."
Proc.
4th Conf.of the European Chapter of the ACL, Manchester,England, April 1989. pp.
233-240.Colmerauer, Alain.
1982.
PROLOG II:Manuel de reference t modele theorique.
Groupe24 Further details can be found in (Peng and Strzalkowski,1990; Strzalkowski and Peng, 1990; and Peng, forthcoming).98d'Intelligence Artificielle, Faculte de Sciences deLuminy, Marseille.Dymetrnan, Marc and Pierre Isabelle.
1988.
"Reversible Logic' Grammars for Machine Transla-tion."
Proc.
2nd Int.
Conf.
on Machine Translation,Carnegie-Mellon Univ.Dymetman, Marc, Pierre Isabelle and FrancoisPerrault.
1990.
"A Symmetrical Approach to Pars-ing and Generation."
COLING-90, Helsinki, Fin-land, August 1990.!
Vol.
3, pp.
90-96.Estival, Dominique.
1990.
"GeneratingFrench with a Reversible Unification Grammar.
"COLING-90, Helsinki, Finland, August 1990.
Vol.
2,pp.
106-111.Gardent, Claire and Agnes Plainfosse.
1990"Generating from; Deep Structure."
COLING-90,Helsinki, Finland, August 1990.
Vol 2, pp.
127-132.Grishman, Ralph.
1986.
Proteus Parser Refer-ence Manual.
Proteus Project Memorandum #4,Courant Institute Of Mathematical Sciences, NewYork University.Hasida, Koiti, Syun Isizaki.
1987.
"Depen-dency Propagation i A Unified Theory of SentenceComprehension a d Generation."
IJCAI-87, Milano,Italy, August 1987.!pp.
664-670.Ishizaki, Masato.
1990.
"A Bottom-up Gen-eration for Principle-based Grammars Using Con-straint Propagation."
COLING-90, Helsinki, Fin-land, August 1990.
Voi 2, pp.
188-193.Kay, Martin.
1984.
"Functional UnificationGrammar: A Formalism for Machine Translation.
"COLING-84, Stanftrd, CA, July 1984, pp.
75-78.Landsbergen, Jan. 1987.
"Montague Gram-mar and Machine Translation."
Eindhoven, Holland:Philips Research M,S.
14.026.Naish, Lee.
1986.
Negation and Control inPROLOG.
Lecture Notes in Computer Science, 238,Springer.Newman, P. !990.
"Towards Convenient Bi-Directional Grammar Formalisms."
COLING-90,Helsinki, Finland, August 1990.
Vol.
2, pp.
294-298.Peng, Ping.
forthcoming.
"A Japanese/EnglishReversible Machine Translation System With Sub-language Approach."
Courant Institute ofMathematical Sciences, New York University.Peng, Ping and Tomek Strzalkowski.
1990.
"An Implementation f a Reversible Grammar."Proc.
8th Canadiad Conf.
on Artificial Intelligence,Ottawa, Canada, Jude 1990. pp.
121-127.Sager, Naomi~ 1981.
Natural Language Infor-mation Processing.
Addison-Wesley.Shieber, Smart, M. 1988.
"A uniform archi-tecture for parsing and generation."
COLING-88,Budapest, Hungary, August 1988, pp.
614-619.Shieber, Stuart, M., Gertjan van Noord, RobertC.
Moore, Fernando C. N. Pereira.
1990.
"ASemantic-Head-Driven Generation."
ComputationalLinguistics, 160), pp.
30--42.
MIT Press.Steedman, Mark.
1987.
"Combinatory Gram-mars and Parasitic Gaps."
Natural Language andLinguistic Theory, 5, pp.
403-.439.Strzalkowski, Tomek.
1989.
Automated Inver-sion of a Unification Parser into a Unification Gen-erator.
Technical Report 465, Department of Com-puter Science, Courant Institute of Mathematical Sci-ences, New York University.Strzalkowski, Tomek.
1990a.
"An algorithmfor inverting a unification grammar into an efficientunification generator."
Applied Mathematics Letters,3(1), pp.
93-96.
Pergamon Press.Strzalkowski, Tomek.
1990b.
"How to Inverta Parser into an Efficient Generator.
an algorithm forlogic grammars."
COLING-90, Helsinki, Finland,August 1990, Vol.
2, pp.
347-352.Strzalkowski, Tomek.
1990c.
"Reversiblelogic grammars for natural language parsing and gen-eration."
Computational Intelligence, 6(3), pp.
145-171.
NRC Canada.Strzalkowski, Tomek and Ping Peng.
1990.
"Automated Inversion of Logic Grammars for Gen-eration."
Proc.
of 28th ACL, Pittsburgh, PA, June1990.
pp.
212-219.van Noord, Gertjan.
1990.
"ReversibleUnification Based Machine Translation."
COLING-90, Helsinki, Finland, August 1990.
VO1.
2, pp.
299-304.Wedekind, Jurgen.
1988.
"Generation asstructure driven derivation."
COLING-88, Budapest,Hungary, August 1988, pp.
732-737.99
