AUTOMATICALLY  GENERATING NATURAL LANGUAGE REPORTSIN  AN OFF ICE  ENVIRONMENTJugal Kal i ta and Sunil ShendeDepartment  of Computer  and Information SciencesUniversity of Pennsylvania,  Philadelphia, PA 19104ABSTRACTIn this paper, we describe a system which modelsa set of concurrent processes that are encountered ina typical office environment, using a body of explic-itly sequenced production rules.
The system employsan interval-based temporal network for storing histor-ical information.
A text planning module traversesthis network to search for events which need to bementioned in a coherent report describing the currentstatus of the system.
In addition, the planner alsocombines similar information for succinct presentationwhenever applicable.
Finally, we elaborate on how weadapt an available generation module to produce well-structured textual report for our chosen domain.1.
INTRODUCTIONThis paper describes the implementation f a text gen-erating system which produces natural anguage re-ports on the status of a system of inter-related pro-cesses at various stages of progress.
The motivationsbehind this project were to model a system of concur-rent processes and to successfully generate well-formedtext about their temporal behavior.
We view a processas an ordered sequence of events over time where anevent refers to an atomic action by one of the partic-ipating agents.
In many AI applications, monitoringthe state of a system of processes i deemed essential.The ability of a system in such an environment to de-scribe its actions in natural language will be certainlyvery useful.As our sample domain, we chose a scenario wherethe system is used to assist the secretary for an aca-demic journal by keeping track of a paper submittedfor publication.
The process being modeled is that ofpaper-submission with the usual participating agentsbeing the author of the paper, the journal editor, thereviewers assigned to evaluate the paper and the jour-nal secretary.In the rest of the paper we present methods to rep-resent he knowledge of the chosen domain, to modelhistorical knowledge base of events and processes, toappropriately order the contents of the historical in-formation store for presentation based on temporal re-lationships and other relevant factors, and to producecoherent English text describing the events in the do-main.
The system as described herein has been fullyimplemented, and currently avenues for further im-provement are actively being pursued.Section 2 of this paper gives a brief description ofthe domain being modeled along with an overview ofthe system components.
Section 3 describes the rep-resentation of the processes in terms of a network ofrules.
Section 4 elaborates the nature of the historicalinformation store.
Section 5 deals with text planningwhich is crucial for selecting information to be pre-sented in a coherent manner.
Section 6 details theactual process of text generation.
Finally, we con-clude with a discussion about enhancements to theexisting system which can contribute towards a moregeneral implementation with the added power of ex-pected future inference and and the ability to reasonabout viewpoints of agents external to the system.Further details about the system's design and imple-mentation, and other relevant discussions can be foundin \[Kalita 86\].2.
OVERVIEW OF THE SYSTEMThe system consists of three main modules as shownin figure 1.
They are?
an augmented production system for domainknowledge representation,?
a text planner module (strategic omponent),?
a text generation module (tactical component).The system of processes is modeled in terms ofa production system with an" explicit control struc-178~erCommands(inpot)F~ts (injxJt)SystemFigure 1: Overview of the systemture for rule sequencing; this representation is due to\[Zisman 78\].
The execution of these rules builds a his-tory network of events and processes.
This network ismodeled loosely on the notion of intervals proposed in\[Allen 83,Allen 84\].The creation of a report in natural language ntailsthat the actual description be easy to understand.
Thereport must omit inessential information, be cogent,and give the user a sense of temporal structure.
To-wards this end, planning at the representational levelis required of the system.
Processes can be looked atas being composed of sub-processes; clearly the de-scription of the history must be able to account forthis compositional structure.The text generator used in this project is MUMBLE\[McDonald 83\], \[McDonald 85\], which is a collection ofmorphology and grammar modules driven by user cre-ated objects cMled realization specifications containinginformation about the high-level specifics of the text.3.
REPRESENTATION OF DOMAINKNOWLEDGEThe domain described above has been modeled us-ing a production system whose rules are sequenced byimposing a Petri net structure on them.
The decisionto employ a production system has been influenced bythe event-driven nature of the processes in the domainallowing declarative encoding of relevant knowledge.In the domain under consideration, there are sev-eral concurrent, independent processes.
All activitiesin the domain can be viewed as constituting a singleprocess - -  the overall process of journal editing.
Theoverall process comprises a collection of time-orderedatomic actions and/or subprocesses.
In addition toseveral atomic actions, the journal editing process con-taJns three subprocesses: referee review processes - -one for each referee designated by the editor.
Inturn, each referee review process contains a numberof atomic actions.
Communication and coordinationis required among these processes.
Additionally, com-munication is also necessary among the atomic actionsconstituting these processes for achieving proper tem-poral ordering.In our implementation, the system of actions andprocesses i  represented as a set of production rules.Since in a pure production system, it is difficult toachieve substantial interrule communication, a moreacceptable control structure can be devised where thecurrent state of the system in conjunction with thehistory of prior rule execution determines what needsto be done next.
Such a control structure, first pro-posed in the context of an augmented Petri net modelin \[Zisman 78\], has been adopted in our system.
In ourimplementation, a state in the Petri net represents astate of the journal secretary (since our representationis from the viewpoint of the secretary).
A transitionbetween two states denotes an interaction between anexternal agent (such as the author, the editor or oneof the referees) and the secretary.
Each interaction isrepresented by a production rule which resides on atransition in the augmented Petri net.The Petri net structure of the rules is implementedby maintaining a list of active rules as suggested in\[Zisman 78\].
States in the Petri net structure are notexplicitly represented in the implementation.
The setof active rules (in other words, the set of enabled tran-sitions) at a given point in time determines the currentstate of the system.
When a transition is enabled, itsfiring is determined by the rule residing at the transi-tion.
All rules at all enabled transitions constitute theactive rule set.
In summary, the production systemmodels individual actions, whereas the execution ofthe Petri net models the dynamic relationships amongthe various processes.In the augmented Petri net representation f our do-main, the system (representing the editor's ecretary)can exist in several states uch as,?
waiting for the paper to arrive;?
waiting for the editor to designate referees;?
waiting for a referee to respond;?
waiting for a referee to submit his report;?
waiting for the editor to make a a decision.Several interactions can take place between the secre-tary and the various external agents.
These are illus-trated in figures 2 and 3 which show the augmentedPetri net representation f our domain from the pointof view of the secretary.
There are two networks - -179I END Ino response in two weeks .m>send letter to ~ send reminderreferee requesting / Is e r v i c e s ~f wait for ~A alternate f w s!t for ~referee to J -  name recoived~ oo l lo r  .
/referee returns card, can't reviewM> request editor for alternateroferee namereferee returns c4ud, c4tn review miweir one month for reportno report in one month.~=D send reminder\] report received .
->se~l thank you letterefereeFigure 2: Petri  net corresponding to the journaledit ing processFigure 3: Petri net corresponding to a referee re-view processone corresponding to the overall journal editing pro-cess and the other corresponding to a generic refereereview process.
Some of the rules in the productionsystem are shown in figure 4.4.
THE NETWORK OF INTERVALS:  HIS-TORICAL  KNOWLEDGEThe production system described in the previous ec-tion models the domain knowledge.
In order to gen-erate a report about a particular paper, the produc-tion system must build an historical record of eventinstances as they take place over time.
The represen-tation must adequately capture temporal relationshipsamong events, and also minimize the amount of com-putation ecessary in order to achieve reasonable velsof efficiency.Most generally accepted approaches to modelingtime such as the state space approach \[Fikes 71\] andsituation calculus \[McCarthy 69\] are inadequate forthe representation f concurrency, and are based onthe notion of time points with accompanying seman-tic difficulties.
\[Allen 83,Allen 84\] propose a model oftime based on intervals.
The model allows for repre-senting the relationships between temporal intervals ina hierarchical manner using a constraint propagationtechnique.
It also facilitates tructuring knowledge ina way convenient for typical reasoning tasks, and alsois intuitively more appealing due to the observationthat notwithstanding the instantaneous appearance of?
Ru le - l :  If a paper is received,?
acknowledge the author of its receipt, and?
request he editor to designate names of referees.?
Rule-5: If the author withdraws the paper, instanti-ate termination procedure.?
Rule-6: If the editor does not respond within twoweeks, send him a reminder letter.Figure 4: Examples of production rulesmany real-world events, they can be decomposed re-cursively for closer examination, if desired.Intervals in our system axe of two types - -  simpleintervals (designated henceforth as intervals) and ref-erence intervals.
Intuitively, an interval corresponds tothe time between two successive interactions betweenagents in the system.
In contrast, a reference intervalcorresponds to the time during which a whole series ofinteractions take place (i.e the temporal duration of aprocess or sub-process).
Reference intervals, based onthe suggestion i  \[Allen 83\], allow us to convenientlygroup together clusters of simple intervals.
Each in-terval is identified further by a description of some ofthe events which occurred uring the two interactionswhereas each reference interval is identified by the in-tervals which comprise it.180An interval (or reference interval) is said to be in-stantiated if it becomes part of the history network.
Inparticular, every instantiated interval has slots whichcontain its starting event, its ending event and a linkto its predecessor interval in the history network.
Inaddition to the starting and ending events, an intervalmay also contain side events that neither start nor endthe interval but which occur in the domain process asa matter of course between the starting and endingevents and do not have any further consequences.An interval is, designated open f l i t  has been startedby some event but which is yet to be completed by an-other event.
A completed interval is called a closedinterval.
Since the representation is from the jour-nal secretary's point of view, it can be seen that in-teractions are almost always initiated by agents otherthan the secretary but are terminated by some actiontaken by the secretary.
Thus, in our representation,an instantiated open interval has as its starting event,an action performed by the secretary, whereas inputfrom the external agents determines the ending eventof some hitherto open interval.In effect, the relationships among intervals aremaintained in the network where nodes represent in-dividual intervals, and each art's label indicates thepossible relationships between the two intervals repre-sented by its end nodes.
Since the network built byour production system is historic in nature, there is notemporal uncertainty, and therefore, each arc has onlyone label which indicates trict temporal precedenceamong the intervals.Although our system is basically input-driven at theuser-system interface, there are many situations wherethe script of the domain process demands ome tem-poral deadlines or monitors.
For instance, in the eventthat the editor fails to respond (by way of input) tothe request for names of reviewers, the system has togenerate, perforce, another equest as a reminder.
Toenable the system to faithfully retrieve such timeoutactivity from the network, we employ demons to ex-plicitly monitor open intervals pending response.
Ontimeout, the system simply creates another open in-terval with the same starting event as the previous onetimed out by its associated emon.It is often the case that processes (sub-processes) aregeneric in nature; i.e.
they can be repeatedly instan-tiated for different agents.
For example, our domaincalls for a certain sequence of interactions between thesecretary and a referee.
This sequence defines a genericprocess and our system needs to keep track of threesuch processes, one for each referee assigned to reviewa paper.
The second type of interval in our system, thereference interval which corresponds to processes andsub-processes, help the text planner combine multiplePaperPublicationIntervalInterval - .RefereeingIntervalI I ref l - interval  ref3-1ntervalFigure 5: The network configuration (partial)instances of events into succinct specifications withouthaving to repeat descriptions for each individual in-stance.
It is also desirable in an application like oursto annotate the text describing a process with sum-maries or paraphrases of key sub-processes that occurnaturally in the domain.
Since it is clear that an openreference interval captures our intuitions about an on-going process, the planner can generate appropriatetemporal cues from the interval representation to de-termine text parameters like tense and aspect for apapraphrase.An instance of the network configuration built up bythe production system is shown in figure 5.
However,not all details are shown in the figure.5.
TEXT  PLANNINGOur computational goal, as stated earlier, was to de-scribe or report on a set of processes in a compactmanner, without disturbing the temporal nature ofthe process description.
The text planning modulethus needs to ensure that the text plan is ordered intime and that multiple event instances in processes beencapsulated, if possible, into concise descriptions.The former requirement entails that the events weset out to describe be ordered in time.
From the de-scription of the system network in the previous ection,we notice that most of the sequencing is avoided bysimply working one's way backward along the prede-cessor links in an interval data structure.
However,the conciseness requirement forces the planner, at181some points, to combine information which is commonto more than one interaction sequence (sub-process)without ruining the nature of the then current plan.Our representation f reference intervals associatedwith ordinary intervals gives the extra informationnecessary to guide the planner in such cases.Briefly, the planner goes through three phases: itdetermines the content of the overall plan by way ofa controlled search over the network of intervals andthen produces a sequence of specifications for the ac-tual text generator in the order in which they are tobe realized into text along with information regardingdiscourse focus.
Since our intention is to provide as in-formed a description (report) of the system's activityas possible, we have chosen to restrict he content of areport to the interactions occurring from the time theprevious request was issued to the time of the currentrequest.
In this respect, the interval data structureprovides us with some useful information pertainingto what happened just before the previous report wasrequested and what is ezpected to occur just after thecurrent one.
This information is contained in the openintervals at the time of the previous request, and at thepresent moment respectively.
The current version ofthe system does not utilize the expectation i forma-tion contained in the intervals - the report could beextended appropriately to reflect it in future.
In fact,the same information could be used to detect and re-port the occurrence of unexpected events occurring inthe system.The first phase, then, combines a search over therequired part of the interval network starting fromthe intervals that are currently open with an order-ing over the events which occurred in the intervalsin the search space.
Since reports can be generatedat any pont in time during the life of a paper, andone can ask for repeated reports at later times, onlyevents that have not been reported in an earlier reportneed to be included in it.
However, to ensure that thecurrent report establishes a relationship with the im-mediately preceding report, one or more events thathave been reported earlier may be included.
This willbe clear from the example presented later.
The order-ing ra~aks events tagged with their associated intervals(called "situations") temporally, while simultaneouslyensuring that similar events corresponding to differentinstances of the same generic process axe clubbed to-gether.
It should be noted that during this phase whensimilar events with one or more different participantsare combined together for the purposes of generation,the system's decision eed not be totally based on tem-poral sequentiality.
Combinations may be performedfor similar events although they occurred widely sep-arated on a linear time scale.
For example, supposea referee sends his review quite early (say, at a timetl), whereas a second referee does so with considerableamount of delay (at a time t2), and several other thingshappen during the interval (tl,t2).
While reporting,the system will combine the two reviewing events intoa single sentence such as The two referees A and Bsent their ret6ews by date tl, and report the eventsthat took place in the interval (tl, t2) either before thissentence or after it depending on other considerations.The second phase processes this stream of rankedsituations to create the appropriate specifications forthe text generator.
This includes information aboutthe sentence content (derived directly from the eventin the situation) along with various features of thesentence like tense and indications to conjoin nounphrases etc.
For the present, our tense assignment israther naive and only relies on the network to pro-vide temporal indicators based on the relationshipof the time at which an event occurred in the con-text of the overall time interval covered by the plan.Thus we only assign present, present perfect, pastand past perfect tenses to sentences.
A more sophis-ticated tense assignment, perhaps along the lines of\[Matthiesen 84\], would be necessary for future exten-sions of this project.Thus, during the first two phases, temporal relation-ships and event similarities are used to order the eventsinto an appropriate sequence for presentation.
How-ever, in order to determine how exactly each sentenceis going to be constructed, uring the third phase, theplanner annotates the text specifications with informa-tion regarding discourse focus.
Generating the actualtext involves several decisions uch as choice of sen-tence structure, and sentential subject, etc.
Assum-ing, each sentence is of the svo 1 form, focus considera-tions can be used to choose between active and passivevoices, and to decide which case slot's (e.g., direct-object, indirect-object, source, destination, etc.)
fillerto be used to fill the position of the sententiai subject.Choice of subjects for generated sentences canbe done considering the movement of focus of dis-course from sentence to sentence as in the TEXTsystem \[McKeown 85\] following the analysis of Sidner\[Sidner 83\].
Focus information also facilitates pronom-inalization decisions.
There are two types of loci:global and immediate.
Global focus is constant, butthe immediate focus may vary from sentence to sen-tence.
It is updated using techniques similar to thoseused by McKeown.
To track immediate focus, we keeptrack of three variables as done by McKeown: CF - -current focus, PFL - -  potential focus list, and FS-past immediate focus or focus stack.
CF is that fo-cus of the current sentence whose initial value is theglobal focus.
PFL consists of the items referred to inthe current sentence.
FS is updated each time the fo-cus changes.
When the text changes to a member of1That is, it has a subject, a verb and an object phrasewith optional following prepositional phrases182the PFL, the old focus is pushed onto the stack.
Whenconversation returns to an item previously discussed,the stack is popped to yield that item.
The focus rulesused are as follows (in order): shift focus to a memberof previous PFL, i.e.
CF(new sentence) E PFL(lastsentence), maintain the same focus, i.e., CF(new sen-tence) --- CF(last sentence), and return to a previousfocus, i.e., CF(new sentence) E FS.In summary, the text planner traverses, orders andtranslates the intervals desired to be reported into astream of specifications which can be realized directlyby the text generator.6.
THE TACT ICAL  COMPONENTThe tactical component used by the system to generateactual text is MUMBLE \[McDonald 83,McDonald 85\].The decision to employ MUMBLE was primar-ily influenced by its success in generating alarge variety of grammatical constructs in sev-eral text generation applications as reported in\[Kaxlin 85\],\[McDonald 83\],\[McDonald 85\],\[Rubinoff 86\],the flexibility in the design of its input as well a~its ready availability.
Its design is based on the as-sumption that division between planning the contentof speech and its verbalization is unambiguously de-fined.
This partitioning of the generative decisionsinto levels marks one aspect of difference betweenMUMBLE and Appelt's generation system \[Appelt 83\]which emphasizes the homogeneity of various deci-sional procedures.
2The input to MUMBLE consists of realization spec-ifications (r-specs) representing the system's commu-nicative goal, and produced by the planner (or thestrategic omponent).
Given the input r-spec, MUM-BLE assigns (or, attaches) it to an appropriate posi-tion in an incipient surface structure tree.
A depth-first traversal of the tree accompanied by recursivephrasal realization of unprocessed embedded elementsresults in the production of well-defined English text.It must be stressed at this point that the tacti-cal component plays a strong supporting role to thestrategic omponent in the pursuit of coherence in thegenerated text.
One method for enhancing coherenceis by appropriate l xical substitution for referring ex-pressions allowing previously generated sentences toexert influence on the realization of the current sen-tence.
The system keeps track of the objects whichhave been referred to so far and how this reference has2It is relevant o note at this point that Hovy, in hisproposed approach to generation \[Hovy 85\], assumes a well-defined boundary between planning and actual generation,but allows the generational component toseek advice fromthe planner at limited decision points.been made.
This along with focus information enablesthe system to refer to objects by incomplete descrip-tions and to introduce pronominalization.
This avoidsunnecessary epetition leading to succinctness in thetext.
More importantly, it enables the hearer to distin-guish new information from old so that comprehensionis not hampered.
Otherwise, it may lead to misunder-standing on the part of the hearer; examples of thisphenomenon can be seen in \[Granville 84\].Incomplete description of referring noun phrases inour system include usage of phrases uch as "the au-thor" or "the paper" in subsequent references insteadof the complete phrases "the author D.D.
McDon-ald" or "the paper entitled 'Generation Using MUM-BLE'" which are used for introduction.
Additionally,when a person introduced earlier by name is referredto subsequently at a point where pronominalizationis deemed inappropriate, the person is referred to byhis/her name.
Similarly a group of people may beintroduced by a phrase such as "the three referees,viz., B.L.
Webber, A.K.
Joshi and T. Finin".
Subse-quently, the first time one of these persons is referredto alone, we refer to him/her by name.
If the same per-son is referred to again, only then pronominalizationis resorted to provided it does not lead to ambiguity.Incomplete description also enables us to use phrasessuch as "on the same day", "yesterday", and "today"instead of always producing the complete phrase suchas "on January 18, 1986" at all times.
Also note that,the first time the system specifies a date, it specifiesthe year.
However, in subsequent specifications, theyear is not mentioned unless it is different from thatof the immediately preceding date mentioned.Adapting MUMBLE to our system required sub-stantial additional extensions for handling of cardinalnumbers, proper names, various tenses, etc.
A numberof new structures had to be added to support he de-sired features in the final text.
Some of these are sim-ple, others complex.
Some are general while others aredomain specific.
At this point, we feel that it is per-tinent to corroborate the observations in \[Karlin 85\]that it is difficult to create new structures that cap-ture language generalizations due to the total absenceof constraints on their nature.Finally, we conclude this section by presenting ex-amples of text produced by the system (assuming thatthe secretary is producing the report).
The whole sys-tem has been designed such that we can perform sim-ulation of events uch as arrival of the paper, arrivalof the reviews by the secretary.
At any point duringthis simulation, the system may be asked to generatea report.
Below, we reproduce two such reports - -  thefirst one was produced at an arbitray point during thelife of the paper.
The second one was produced for thesame paper after the paper was processed completely.183I received the paper entitled "GenerationUsing MUMBLE" from the author D.M.McDonald on January 1, 1986.
He wasinformed of the receipt of the paper onthe same day.
I requested the names ofthree referees for the paper from the editorA.K.
Joshi on the same day.
He sent thenames, viz., T. Finin, N. Badler and B.Webber a week later.
I have sent a post.card inquiring availability to review thepaper to each of them today.Assuming we continue the simulation performed tothe end and ask the system to produce a report again,the system generates the following text.I had sent a postcard inquiring availabil-ity to review the paper entitled "Genera-tion Using MUMBLE" to each of the re\]-crees, T. Finin, N. Badler, and B. Web-ber on January 15, 1986.
Each sent aletter expressing ability to review the pa-per to me by January 30.
I sent a copyof the paper to each of them.
Each senta review of the paper to me by February15.
I requested the editor to make a deci-sion regarding publication of the paper onthe same day.
He sent a positive decisionregarding publication of the paper to meyesterday.
I informed the author of thedecision yesterday.7.
CONCLUSIONSOur goal here was to generate a natural languagetext report on a set of concurrent processes.
A full-fledged activity report should comprise three distinctsegments.
The preamble of the report should contain asuccinct description of events which had occurred priorto the point in time when the last report was gener-ated (in cases where multiple reports are requested).This should be followed by the main body of the re-port stating the events which have occurred betweenthe time of the last report and the current time.
Fi-nally, there should be a brief mention of events whichare expected to occur in the immediate future.Although attempts have been made in the currentproject to provide information about the past, theapproach taken is simplistic.
Improving this sectionof the report will involve reasoning about saliency ofevents in order to select events from past history forreporting.
In addition, investigation regarding the for-mulation of the actual text for summarization mustalso be carried out.We believe that representation f status should al-low the system, in principle, to draw inferences aboutexpected future events.
Our implementation does notaddress the issue of expectation, but can be a startingpoint toward the goal of including inferred knowledgeabout the immediate future with the description of thesystem's history.Another direction in which we intend to pursue fur-ther research is regarding presentation of unexpectedevents.
This will necessitate incorporation of the abil-ity to make inferences about what is expected andwhat is not.
Additionally, appropriate text to reportsuch events has to generated.Currently, in our system, no explicit textual inksare established between the contents of a sentence andthat of its predecessor(s).
This seems satisfactory dueto the general characteristics of narrative text wheretemporal succession as well as simultaneity is indicatedimplicitly by simple sequencing of sentences.
How-ever, further improvement in the naturalness of thetext can be achieved by inclusion of appropriate cluewords which function as explicit inter-sentential links.The PROTEUS sentence planner in \[Ritchie 84\] maybe able to provide helpful insights in this attempt.Furthermore, the quality of text produced can be im-proved substantially by incorporating a selection ofcommonly used temporal expressions in English.
Arich compendium of such expressions is available in\[Smith 78\].Finally, we want to investigate the issues involvedin generating reports from the points of view of var-ious participants.
This will involve selecting eventsrelevant o the person for whom the report is beingprepared, and generating text in appropriate English.Choice of events will be dictated by various factorssuch as direct or indirect involvement of the repor-tee, his/her goals and responsibilities, and limitationsregarding what he/she is allowed to know.
Appro-priate textual generation, i.e., choices of voice, sen-tence and clause structures, subjects and objects forthe sentences as well as those of words will be gov-erned by the nature of the listener's involvement withthe events being described among other factors to beinvestigated.
This will involve making a distinctionbetween real events as stored in the historic knowl-edge base and virtual events characterizing how realevents are reported from various perspectives.ACKNOWLEDGEMENTSThe second author was partially supported by NSFgrants MCS-8219116-CER, MCS-82-07294 and DCR-18484-10413 during the course of his work on this project.We would llke to thank Dr. Bonnie Webber for herpainstaking reviewing of several drafts of the techni-cal report on which this paper is based.
We also thankRobin Karlin and Michael Niv for going through ear-lier drafts of this paper and making useful comments.References\[Appelt 83\] Appelt, D.E., Planning Natural LanguageUtterances, Proceedings of the Eighth Interna.tional Joint Conference on Artificial Intelligence,1983, pp.
59-62.\[Allen 83\] Allen, J.E., Maintaining Knowledge aboutTemporal Intervals, Communications of ACM,Volume 26, November 1983, pp.
832-843.\[Alien 84\] Allen, J.E., Towards a General Theory ofAction and Time, Artificial Intelligence, Volume23, 1984, pp.
123-154.\[Fikes 71\] Fikes, R.E., and Nilsson, N.J., STRIPS: ANew Approach to the Application of TheoremProving to Problem Solving, Artificial Intelli-gence, Volume 2, 1971, pp.
189-205.\[Granville 84\] Granville, R., Controlling Lexical Sub-stitution in Text Generation, Proceedings of theAnnual Conference on Computational Linguis-tics, 1984, pp.
381-384.\[Hovy 85\] Hovy, E.H., Integrating Text Planning andproduction in Generation, Proceeding of theNinth International Joint Conference in Artifi-cial Intelligence, Volume 2, 1985, pp.
848-851.\[Karlin 85\] Karlin, R.F., ROMPER Mumbles, Techni-cal Report MS-CIS-85-41, Department of Com-puter and Information Sciences, University ofPennsylvania, Philadelphia, 1985.\[Kalita 86\] Kalita, J.K., and S. Shende, Generation ofNatural Language Text Describing a System ofAsynchronous, Concurrent Processes, TechnicalReport MS-CIS-86-66, Department ofComputerand Information Science, University of Pennsyl-vania, Philadelphia, PA, 1986.\[Matthiesen 84\] Matthiesen, C., Choosing Tense inEnglish , ISI Research Report ISI/RR-84-143,University of Southern California, November,1984.\[McCarthy 69\] McCarthy, J., and Hayes, P.J., SomePhilosophical Problems from the Standpoint ofArtificial Intelligence, Machine Intelligence, Vol-ume 4, Edinburgh University Press, 1969.\[McDonald 83\] McDonald, D.D., Description Di-rected Control: Its Implications for Natural Lan-guage Generation, Computer and Mathematicswith Applications, Volume 9, No.
1, 1983, pp.111-129.\[McDonald 85\] McDonald D.D., and Pustejovsky,J.D., Description Directed Natural LanguageGeneration, Proceedings of Ninth InternationalJoint Conference on Artificial Intelligence, Vol-ume 2, 1985, pp.
799-805.\[McKeown 85\] McKeown, K., Text Generation: Us-ing Discourse Strategies and Focus Constraintsto Generate Natural Language Text, CambridgeUniversity Press, 1985.\[Ritchie 84\] Ritchie, G., A Rational Reconstruction fthe PROTEUS Sentence Planner, Proceedings ofthe Annual Conference on Computational Lin-guistics, 1984, pp.327-329.\[Rubinoff 86\] Rubinoff, R., Adapting Mumble: Expe-rience with Natural Language Generation, Pro-ceedings of AAAI, 1986.\[Sidner 83\] Sidner, C., Focusing in the Comprehen-sion of Definite Anaphora, in ComputationalModels of Discourse, ed.
Brady, M., MIT Press,1983, pp.
209-265.\[Smith 78\] Smith, C.S., The Syntax and Interpreta-tion of Temporal Expressions in English, Lin-guistics and Philosophy, Volume 2, No.
1, 1978,pp.
43-100.\[Zisman 78\] Zisman, M.D., Use of Production Sys-tems for Modeling Asynchronous, ConcurrentProcesses, in Pattern-Directed Inference Sys-tems, ed.
Waterman, D.A., and Hayes-Roth, F.,Academic Press, 1978, pp.
53-68.185
