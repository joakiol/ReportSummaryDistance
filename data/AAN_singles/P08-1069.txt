Proceedings of ACL-08: HLT, pages 604?612,Columbus, Ohio, USA, June 2008. c?2008 Association for Computational LinguisticsOptimal k-arization of Synchronous Tree-Adjoining GrammarRebecca NessonSchool of Engineeringand Applied SciencesHarvard UniversityCambridge, MA 02138nesson@seas.harvard.eduGiorgio SattaDepartment ofInformation EngineeringUniversity of PaduaI-35131 Padova, Italysatta@dei.unipd.itStuart M. ShieberSchool of Engineeringand Applied SciencesHarvard UniversityCambridge, MA 02138shieber@seas.harvard.eduAbstractSynchronous Tree-Adjoining Grammar(STAG) is a promising formalism for syntax-aware machine translation and simultaneouscomputation of natural-language syntax andsemantics.
Current research in both of theseareas is actively pursuing its incorporation.However, STAG parsing is known to beNP-hard due to the potential for intertwinedcorrespondences between the linked nonter-minal symbols in the elementary structures.Given a particular grammar, the polynomialdegree of efficient STAG parsing algorithmsdepends directly on the rank of the grammar:the maximum number of correspondences thatappear within a single elementary structure.In this paper we present a compile-timealgorithm for transforming a STAG into astrongly-equivalent STAG that optimallyminimizes the rank, k, across the grammar.The algorithm performs inO(|G|+ |Y | ?
L3G)time where LGis the maximum number oflinks in any single synchronous tree pair inthe grammar and Y is the set of synchronoustree pairs of G.1 IntroductionTree-adjoining grammar is a widely used formal-ism in natural-language processing due to its mildly-context-sensitive expressivity, its ability to naturallycapture natural-language argument substitution (viaits substitution operation) and optional modifica-tion (via its adjunction operation), and the existenceof efficient algorithms for processing it.
Recently,the desire to incorporate syntax-awareness into ma-chine translation systems has generated interest inthe application of synchronous tree-adjoining gram-mar (STAG) to this problem (Nesson, Shieber, andRush, 2006; Chiang and Rambow, 2006).
In a par-allel development, interest in incorporating seman-tic computation into the TAG framework has ledto the use of STAG for this purpose (Nesson andShieber, 2007; Han, 2006b; Han, 2006a; Nessonand Shieber, 2006).
Although STAG does not in-crease the expressivity of the underlying formalisms(Shieber, 1994), STAG parsing is known to be NP-hard due to the potential for intertwined correspon-dences between the linked nonterminal symbols inthe elementary structures (Satta, 1992; Weir, 1988).Without efficient algorithms for processing it, its po-tential for use in machine translation and TAG se-mantics systems is limited.Given a particular grammar, the polynomial de-gree of efficient STAG parsing algorithms dependsdirectly on the rank of the grammar: the maximumnumber of correspondences that appear within a sin-gle elementary structure.
This is illustrated by thetree pairs given in Figure 1 in which no two num-bered links may be isolated.
(By ?isolated?, wemean that the links can be contained in a fragmentof the tree that contains no other links and domi-nates only one branch not contained in the fragment.A precise definition is given in section 3.
)An analogous problem has long been knownto exist for synchronous context-free grammars(SCFG) (Aho and Ullman, 1969).
The task ofproducing efficient parsers for SCFG has recentlybeen addressed by binarization or k-arization ofSCFG grammars that produce equivalent grammarsin which the rank, k, has been minimized (Zhang604ABCDwABCDE F G1234AB CD E F GAB CD23141 2 3 4 2 4 31w ?w w ?x x ?
y ?y z z ?AB CD 1w3 4E 2x5 AB CD13 4E25w ?
x ?
?1 : ?2 : ?3 :Figure 1: Example of intertwined links that cannot be binarized.
No two links can be isolated in both trees in a treepair.
Note that in tree pair ?1, any set of three links may be isolated while in tree pair ?2, no group of fewer than fourlinks may be isolated.
In ?3no group of links smaller than four may be isolated.SV PVlikesred candiesaimeles b o n b o n srougesDetN P?SV PV N P?N PNN PNN ?NA d j N ?NA d jSN P V PJ o h n VlikesJ eanaimeSN P V PVlesDetN PN PredNA d jcandiesNb o n b o n sNrougesNA d j2121 J eanN PN PJ o h nN P?
1 N P?
1likesJ o h n candiesred1 21( a ) ( b ) ( c )Figure 2: An example STAG derivation of the English/French sentence pair ?John likes red candies?/?Jean aime lesbonbons rouges?.
The figure is divided as follows: (a) the STAG grammar, (b) the derivation tree for the sentencepair, and (c) the derived tree pair for the sentences.and Gildea, 2007; Zhang et al, 2006; Gildea, Satta,and Zhang, 2006).
The methods for k-arizationof SCFG cannot be directly applied to STAG be-cause of the additional complexity introduced bythe expressivity-increasing adjunction operation ofTAG.
In SCFG, where substitution is the only avail-able operation and the depth of elementary struc-tures is limited to one, the k-arization problem re-duces to analysis of permutations of strings of non-terminal symbols.
In STAG, however, the arbitrarydepth of the elementary structures and the lack ofrestriction to contiguous strings of nonterminals in-troduced by adjunction substantially complicate thetask.In this paper we offer the first algorithm address-ing this problem for the STAG case.
We presenta compile-time algorithm for transforming a STAGinto a strongly-equivalent STAG that optimally min-imizes k across the grammar.
This is a critical mini-mization because k is the feature of the grammar thatappears in the exponent of the complexity of parsingalgorithms for STAG.
Following the method of Sekiet al (1991), an STAG parser can be implementedwith complexity O(n4?
(k+1) ?
|G|).
By minimizingk, the worst-case complexity of a parser instanti-ated for a particular grammar is optimized.
The k-arization algorithm performs in O(|G|+ |Y | ?
L3G)time where LG is the maximum number of links inany single synchronous tree pair in the grammar andY is the set of synchronous tree pairs of G. By com-parison, a baseline algorithm performing exhaustivesearch requires O(|G|+ |Y | ?
L6G) time.1The remainder of the paper proceeds as follows.In section 2 we provide a brief introduction to theSTAG formalism.
We present the k-arization algo-rithm in section 3 and an analysis of its complexityin section 4.
We prove the correctness of the algo-rithm in section 5.1In a synchronous tree pair with L links, there are O(L4)pairs of valid fragments.
It takes O(L) time to check if the twocomponents in a pair have the same set of links.
Once the syn-chronous fragment with the smallest number of links is excised,this process iterates at most L times, resulting in time O(L6G).605DE FABC123 4y z5HI J2 31NM 4w ?
x ?5Ly ?K?
:xGz ?n 1 :n 2 :n 3 :n 4 :n 5 :Figure 3: A synchronous tree pair containing frag-ments ?L= ?L(n1, n2) and ?R= ?R(n3).
Sincelinks(n1, n2) = links(n3) = { 2 , 4 , 5}, we can de-fine synchronous fragment ?
= ?
?L, ?R?.
Note alsothat node n3is a maximal node and node n5is not.?
(n1) = 2 5 5 3 3 2 4 4 ; ?
(n3) = 2 5 5 4 4 2 .2 Synchronous Tree-Adjoining GrammarA tree-adjoining grammar (TAG) consists of a set ofelementary tree structures of arbitrary depth, whichare combined by substitution, familiar from context-free grammars, or an operation of adjunction that isparticular to the TAG formalism.
Auxiliary treesare elementary trees in which the root and a frontiernode, called the foot node and distinguished by thediacritic ?, are labeled with the same nonterminalA.The adjunction operation involves splicing an auxil-iary tree in at an internal node in an elementary treealso labeled with nonterminal A.
Trees without afoot node, which serve as a base for derivations, arecalled initial trees.
For further background, refer tothe survey by Joshi and Schabes (1997).We depart from the traditional definition in nota-tion only by specifying adjunction and substitutionsites explicitly with numbered links.
Each link maybe used only once in a derivation.
Operations mayonly occur at nodes marked with a link.
For sim-plicity of presentation we provisionally assume thatonly one link is permitted at a node.
We later dropthis assumption.In a synchronous TAG (STAG) the elementarystructures are ordered pairs of TAG trees, with alinking relation specified over pairs of nonterminalnodes.
Each link has two locations, one in the lefttree in a pair and the other in the right tree.
An ex-ample of an STAG derivation including both substi-tution and adjunction is given in Figure 2.
For fur-ther background, refer to the work of Shieber andSchabes (1990) and Shieber (1994).3 k-arization AlgorithmFor a synchronous tree pair ?
= ?
?L, ?R?, a frag-ment of ?L (or ?R) is a complete subtree rooted atsome node n of ?L, written ?L(n), or else a subtreerooted at n with a gap at node n?, written ?L(n, n?
);see Figure 3 for an example.
We write links(n) andlinks(n, n?)
to denote the set of links of ?L(n) and?L(n, n?
), respectively.
When we do not know theroot or gap nodes of some fragment ?L, we alsowrite links(?L).We say that a set of links ?
from ?
can be iso-lated if there exist fragments ?L and ?R of ?Land ?R, respectively, both with links ?.
If this isthe case, we can construct a synchronous fragment?
= ?
?L, ?R?.
The goal of our algorithm is to de-compose ?
into synchronous fragments such that themaximum number of links of a synchronous frag-ment is kept to a minimum, and ?
can be obtainedfrom the synchronous fragments by means of theusual substitution and adjunction operations.
In or-der to simplify the presentation of our algorithm weassume, without any loss of generality, that all ele-mentary trees of the source STAG have nodes withat most two children.3.1 Maximal NodesA node n of ?L (or ?R) is called maximal if(i) links(n) 6= ?, and (ii) it is either the root nodeof ?L or, for its parent node n?, we have links(n?)
6=links(n).
Note that for every node n?
of ?L suchthat links(n?)
6= ?
there is always a unique maxi-mal node n such that links(n?)
= links(n).
Thus,for the purpose of our algorithm, we need only lookat maximal nodes as places for excising tree frag-ments.
We can show that the number of maxi-mal nodes Mn in a subtree ?L(n) always satisfies|links(n)| ?Mn ?
2?
|links(n)| ?
1.Let n be some node of ?L, and let l(n) be the(unique) link impinging on n if such a link exists,and l(n) = ?
otherwise.
We associate n with astring ?
(n), defined by a pre- and post-order traver-sal of fragment ?L(n).
The symbols of ?
(n) are thelinks in links(n), viewed as atomic symbols.
Givena node n with p children n1, .
.
.
, np, 0 ?
p ?
2,we define ?
(n) = l(n)?
(n1) ?
?
??
(np) l(n).
Seeagain Figure 3 for an example.
Note that |?
(n)| =2?
|links(n)|.606311112222X X X XRRRRRRGGGGGGX?X?X?
?X?X?excise adjoin transform?L:n1:n2:Figure 4: A diagram of the tree transformation performedwhen fragment ?L(n1, n2) is removed.
In this and thediagrams that follow, patterned or shaded triangles rep-resent segments of the tree that contain multiple nodesand at least one link.
Where the pattern or shading corre-sponds across trees in a tree pair, the set of links containedwithin those triangles are equivalent.3.2 Excision of Synchronous FragmentsAlthough it would be possible to excise synchronousfragments without creating new nonterminal nodes,for clarity we present a simple tree transforma-tion when a fragment is excised that leaves exist-ing nodes intact.
A schematic depiction is given inFigure 4.
In the figure, we demonstrate the exci-sion process on one half of a synchronous fragment:?L(n1, n2) is excised to form two new trees.
Theexcised tree is not processed further.
In the exci-sion process the root and gap nodes of the originaltree are not altered.
The material between them isreplaced with a single new node with a fresh non-terminal symbol and a fresh link number.
This non-terminal node and link form the adjunction or sub-stitution site for the excised tree.
Note that any linkimpinging on the root node of the excised fragmentis by our convention included in the fragment andany link impinging on the gap node is not.To regenerate the original tree, the excised frag-ment can be adjoined or substituted back into thetree from which it was excised.
The new nodes thatwere generated in the excision may be removed andthe original root and gap nodes may be merged backtogether retaining any impinging links, respectively.Note that if there was a link on either the root or gapnode in the original tree, it is not lost or duplicated1 1 0 0 0 0 0 0 0 0 12 0 1 0 0 0 0 1 0 1 05 0 0 1 1 0 0 0 0 0 05 0 0 1 1 0 0 0 0 0 03 0 0 0 0 0 0 0 1 1 03 0 0 0 0 0 0 0 1 1 02 0 1 0 0 0 0 1 0 0 04 0 0 0 0 1 1 0 0 0 04 0 0 0 0 1 1 0 0 0 01 1 0 0 0 0 0 0 0 0 11 2 5 5 4 4 2 3 3 10Figure 5: Table pi with synchronous fragment?
?L(n1, n2), ?R(n3)?
from Figure 3 highlighted.in the process.3.3 MethodLet nL and nR be the root nodes of trees ?L and ?R,respectively.
We know that links(nL) = links(nR),and |?
(nL)| = |?
(nR)|, the second string being arearrangement of the occurrences of symbols in thefirst one.
The main data structure of our algorithm isa Boolean matrix pi of size |?(nL)|?|?
(nL)|, whoserows are addressed by the occurrences of symbols in?
(nL), in the given order, and whose columns aresimilarly addressed by ?(nR).
For occurrences oflinks x1 , x2 , the element of pi at a row addressed byx1 and a column addressed by x2 is 1 if x1 = x2,and 0 otherwise.
Thus, each row and column of pihas exactly two non-zero entries.
See Figure 5 foran example.For a maximal node n1 of ?L, we let pi(n1) de-note the stripe of adjacent rows of pi addressed bysubstring ?
(n1) of ?(nL).
If n1 dominates n2 in ?L,we let pi(n1, n2) denote the rows of pi addressed by?
(n1) but not by ?(n2).
This forms a pair of hori-zontal stripes in pi.
For nodes n3, n4 of ?R, we sim-ilarly define pi(n3) and pi(n3, n4) as vertical stripesof adjacent columns.
See again Figure 5.Our algorithm is reported in Figure 6.
For eachsynchronous tree pair ?
= ?
?L, ?R?
from the in-put grammar, we maintain an agenda B with allcandidate fragments ?L from ?L having at leasttwo links.
These fragments are processed greed-ily in order of increasing number of links.
Thefunction ISOLATE(), described in more detail be-6071: Function KARIZE(G) {G a binary STAG}2: G?
?
STAG with empty set of synch trees;3: for all ?
= ?
?L, ?R?
in G do4: init pi and B;5: while B 6= ?
do6: ?L ?
next fragment from B;7: ?R ?
ISOLATE(?L, pi, ?R);8: if ?R 6= null then9: add ?
?L, ?R?
to G?
;10: ?
?
excise ?
?L, ?R?
from ?
;11: update pi and B;12: add ?
to G?
;13: return G?Figure 6: Main algorithm.low, looks for a right fragment ?R with the samelinks as ?L.
Upon success, the synchronous frag-ment ?
= ?
?L, ?R?
is added to the output grammar.Furthermore, we excise ?
from ?
and update datastructures pi and B.
The above process is iterateduntil B becomes empty.
We show in section 5 thatthis greedy strategy is sound and complete.The function ISOLATE() is specified in Figure 7.We take as input a left fragment ?L, which is asso-ciated with one or two horizontal stripes in pi, de-pending on whether ?L has a gap node or not.
Theleft boundary of ?L in pi is the index x1 of the col-umn containing the leftmost occurrence of a 1 in thehorizontal stripes associated with ?L.
Similarly, theright boundary of ?L in pi is the index x2 of the col-umn containing the rightmost occurrence of a 1 inthese stripes.
We retrieve the shortest substring ?
(n)of ?
(nR) that spans over indices x1 and x2.
Thismeans that n is the lowest node from ?R such thatthe links of ?L are a subset of the links of ?R(n).If the condition at line 3 is satisfied, all of the ma-trix entries of value 1 that are found from columnx1 to column x2 fall within the horizontal stripesassociated with ?L.
In this case we can report theright fragment ?R = ?R(n).
Otherwise, we checkwhether the entries of value 1 that fall outside ofthe two horizontal stripes in between columns x1and x2 occur within adjacent columns, say from col-umn x3 ?
x1 to column x4 ?
x2.
In this case,we check whether there exists some node n?
suchthat the substring of ?
(n) from position x3 to x4 is1: Function ISOLATE(?L, pi, ?R)2: select n ?
?R such that ?
(n) is the shorteststring within ?
(nR) including left/right bound-aries of ?L in pi;3: if |?
(n)| = 2?
|links(?L)| then4: return ?R(n);5: select n?
?
?R such that ?(n?)
is the gap stringwithin ?
(n) for which links(n) ?
links(n?)
=links(?L);6: if n?
is not defined then7: return null; {more than one gap}8: return ?R(n, n?
);Figure 7: Find synchronous fragment.an occurrence of string ?(n?).
This means that n?is the gap node, and we report the right fragment?L = ?R(n, n?).
See again Figure 5.We now drop the assumption that only one linkmay impinge on a node.
When multiple links im-pinge on a single node n, l(n) is an arbitrary orderover those links.
In the execution of the algorithm,any stripe that contains one link in l(n) it must in-clude every link in l(n).
This prevents the excisionof a proper subset of the links at any node.
This pre-serves correctness because excising any proper sub-set would impose an order over the links at n thatis not enforced in the input grammar.
Because thelinks at a node are treated as a unit, the complexityof the algorithm is not affected.4 ComplexityWe discuss here an implementation of the algo-rithm of section 3 resulting in time complexityO(|G|+ |Y | ?
L3G), where Y is the set of syn-chronous tree pairs of G and LG is the maximumnumber of links in a synchronous tree pair in Y .Consider a synchronous tree pair ?
= ?
?L, ?R?with L links.
If M is the number of maximal nodesin ?L or ?R, we have M = ?
(L) (Section 3.1).
Weimplement the sparse table pi inO(L) space, record-ing for each row and column the indices of its twonon-zero entries.
We also assume that we can goback and forth between maximal nodes n and strings?
(n) in constant time.
Here each ?
(n) is representedby its boundary positions within ?
(nL) or ?
(nR),nL and nR the root nodes of ?L and ?R, respectively.608At line 2 of the function ISOLATE() (Figure 7) weretrieve the left and right boundaries by scanning therows of pi associated with input fragment ?L.
Wethen retrieve node n by visiting all maximal nodesof ?L spanning these boundaries.
Under the aboveassumptions, this can be done in time O(L).
In asimilar way we can implement line 5, resulting inoverall run time O(L) for function ISOLATE().In the function KARIZE() (Figure 6) we use buck-ets Bi, 1 ?
i ?
L, where each Bi stores the candi-date fragments ?L with |links(?L)| = i.
To populatethese buckets, we first process fragments ?L(n) byvisiting bottom up the maximal nodes of ?L.
Thequantity |links(n)| is computed from the quantities|links(ni)|, where ni are the highest maximal nodesdominated by n. (There are at most two such nodes.
)Fragments ?L(n, n?)
can then be processed usingthe relation |links(n, n?
)| = |links(n)| ?
|links(n?
)|.In this way each fragment is processed in constanttime, and population of all the buckets takes O(L2)time.We now consider the while loop at lines 5 to 11 infunction KARIZE().
For a synchronous tree pair ?,the loop iterates once for each candidate fragment?L in some bucket.
We have a total of O(L2) it-erations, since the initial number of candidates inthe buckets is O(L2), and the possible updating ofthe buckets after a synchronous fragment is removeddoes not increase the total size of all the buckets.
Ifthe links in ?L cannot be isolated, one iteration takestime O(L) (the call to function ISOLATE()).
If thelinks in ?L can be isolated, then we need to restruc-ture pi and to repopulate the buckets.
The formercan be done in time O(L) and the latter takes timeO(L2), as already discussed.
Crucially, the updat-ing of pi and the buckets takes place no more thanL ?
1 times.
This is because each time we excisea synchronous fragment, the number of links in ?
isreduced by at least one.We conclude that function KARIZE() takes timeO(L3) for each synchronous tree ?, and the totalrunning time is O(|G|+ |Y | ?
L3G), where Y is theset of synchronous tree pairs of G. The term |G| ac-counts for the reading of the input, and dominatesthe complexity of the algorithm only in case thereare very few links in each synchronous tree pair.AB CD 1w3 4E 2x5BD 1w36n 1 :n 2 :n 3 :n 4 :?
: ??
:A?AFigure 8: In ?
links 3 and 5 cannot be isolated becausethe fragment would have to contain two gaps.
However,after the removal of fragment ?
(n1, n2), an analogousfragment ??
(n3, n4) may be removed.5 Proof of CorrectnessThe algorithm presented in the previous sectionsproduces an optimal k-arization for the input gram-mar.
In this section we sketch a proof of correctnessof the strategy employed by the algorithm.2The k-arization strategy presented above isgreedy in that it always chooses the excisable frag-ment with the smallest number of links at each stepand does not perform any backtracking.
We musttherefore show that this process cannot result in anon-optimal solution.
If fragments could not overlapeach other, this would be trivial to show because theexcision process would be confluent.
If all overlap-ping fragments were cases of complete containmentof one fragment within another, the proof would alsobe trivial because the smallest-to-largest excision or-der would guarantee optimality.
However, it is pos-sible for fragments to partially overlap each other,meaning that the intersection of the set of links con-tained in the two fragments is non-empty and the dif-ference between the set of links in one fragment andthe other is also non-empty.
Overlapping fragmentconfigurations are given in Figure 9 and discussed indetail below.The existence of partially overlapping fragmentscomplicates the proof of optimality for two reasons.First, the excision of a fragment ?
that is partiallyoverlapped with another fragment ?
necessarily pre-cludes the excision of ?
at a later stage in the ex-2Note that the soundness of the algorithm can be easily veri-fied from the fact that the removal of fragments can be reversedby performing standard STAG adjunction and substitution oper-ations until a single STAG tree pair is produced.
This tree pairis trivially homomorphic to the original tree pair and can easilybe mapped to the original tree pair.609(1, 1?
)[ [ABCDn 1 :n 2 :n 3 :n 4 :AB Cn 5 :n 6 : n 7 :ABC Dn 8 :n 9 :n 10 : n 11 :(2) (3 )Figure 9: The four possible configurations of overlappedfragments within a single tree.
For type 1, let ?
=?
(n1, n3) and ?
= ?
(n2, n4).
The roots and gaps of thefragments are interleaved.
For type 1?, let ?
= ?
(n1, n3)and ?
= ?(n2).
The root of ?
dominates the gap of ?.For type 2, let ?
= ?
(n5, n6) and ?
= ?
(n5, n7).
Thefragments share a root and have gap nodes that do notdominate each other.
For type 3 let ?
= ?
(n8, n10) and?
= ?
(n9, n11).
The root of ?
dominates the root of ?,both roots dominate both gaps, but neither gap dominatesthe other.cision process.
Second, the removal of a fragmentmay cause a previously non-isolatable set of links tobecome isolatable, effectively creating a new frag-ment that may be advantageous to remove.
This isdemonstrated in Figure 8.
These possibilities raisethe question of whether the choice between remov-ing fragments ?
and ?
may have consequences at alater stage in the excision process.
We demonstratethat this choice cannot affect the k found for a givengrammar.We begin by sketching the proof of a lemma thatshows that removal of a fragment ?
that partiallyoverlaps another fragment ?
always leaves an anal-ogous fragment that may be removed.5.1 Validity PreservationConsider a STAG tree pair ?
containing the set oflinks ?
and two synchronous fragments ?
and ?with ?
containing links links(?)
and ?
containinglinks(?)
(links(?
), links(?)
( ?
).If ?
and ?
do not overlap, the removal of ?
isdefined as validity preserving with respect to ?.If ?
and ?
overlap, removal of ?
from ?
is valid-ity preserving with respect to ?
if after the removalthere exists a valid synchronous fragment (contain-ing at most one gap on each side) that contains alland only the links (links(?)?
links(?))?
{x}wherex is the new link added to ?.remove ?remove ?ABCDEF Gn 1 :n 2 :n 3 :n 4 :n 5 :n 6 : n 7 :An 1 : En 5 :Cn 3 :x xDn 4 :Fn 6 :H IAn 1 :Bn 2 :J xDn 4 :En 5 :K xDn 4 :Figure 10: Removal from a tree pair ?
containing type 1?type 2 fragment overlap.
The fragment ?
is representedby the horizonal-lined pieces of the tree pair.
The frag-ment ?
is represented by the vertical-lined pieces of thetree pair.
Cross-hatching indicates the overlapping por-tion of the two fragments.We prove a lemma that removal of any syn-chronous fragment from an STAG tree pair is va-lidity preserving with respect to all of the other syn-chronous fragments in the tree pair.It suffices to show that for two arbitrary syn-chronous fragments ?
and ?, the removal of ?
isvalidity preserving with respect to ?.
We show thisby examination of the possible configurations of ?and ?.Consider the case in which ?
is fully containedwithin ?.
In this case links(?)
( links(?).
The re-moval of ?
leaves the root and gap of ?
intact in bothtrees in the pair, so it remains a valid fragment.
Thenew link is added at the new node inserted where?
was removed.
Since ?
is fully contained within?, this node is below the root of ?
but not belowits gap.
Thus, the removal process leaves ?
with thelinks (links(?)?links(?))?
{x}, where x is the linkadded in the removal process; the removal is validitypreserving.Synchronous fragments may partially overlap inseveral different ways.
There are four possible con-figurations for an overlapped fragment within a sin-gle tree, depicted in Figure 9.
These different single-tree overlap types can be combined in any way toform valid synchronous fragments.
Due to spaceconstraints, we consider two illustrative cases andleave the remainder as an exercise to the reader.An example of removing fragments froma tree set containing type 1?type 2 over-lapped fragments is given in Figure 10.Let ?
= ?
?L(n1, n3), ?R(n5, n6)?.
Let610?
= ?
?L(n2, n4), ?R(n5, n7)?.
If ?
is re-moved, the validity preserving fragment for ?
is??
?L(n1, n4), ??R(n5)?.
It contains the links in thevertical-lined part of the tree and the new link x .This forms a valid fragment because both sides con-tain at most one gap and both contain the same setof links.
In addition, it is validity preserving for ?because it contains exactly the set of links that werein links(?)
and not in links(?)
plus the new linkx .
If we instead choose to remove ?, the validitypreserving fragment for ?
is ??
?L(n1, n4), ?
?R(n5)?.The links in each side of this fragment are the same,each side contains at most one gap, and the set oflinks is exactly the set left over from links(?)
oncelinks(?)
is removed plus the newly generated link x .An example of removing fragments from a treeset containing type 1?
?type 3 (reversed) overlappedfragments is given in Figure 11.
If ?
is re-moved, the validity preserving fragment for ?
is??
?L(n1), ??R(n4)?.
If ?
is removed, the validity pre-serving fragment for ?
is ??
?L(n1, n8), ?
?R(n4)?.Similar reasoning follows for all remaining typesof overlapped fragments.5.2 Proof SketchWe show that smallest-first removal of fragments isoptimal.
Consider a decision point at which a choiceis made about which fragment to remove.
Call thesize of the smallest fragments at this pointm, and letthe set of fragments of size m be X with ?, ?
?
X .There are two cases to consider.
First, considertwo partially overlapped fragments ?
?
X and?
/?
X .
Note that |links(?
)| < |links(?)|.
Valid-ity preservation of ?
with respect to ?
guaranteesthat ?
or its validity preserving analog will still beavailable for excision after ?
is removed.
Excising?
increases k more than excising ?
or any fragmentthat removal of ?
will lead to before ?
is considered.Thus, removal of ?
cannot result in a smaller valuefor k if it is removed before ?
rather than after ?.Second, consider two partially overlapped frag-ments ?, ?
?
X .
Due to the validity preservationlemma, we may choose arbitrarily between the frag-ments in X without jeopardizing our ability to laterremove other fragments (or their validity preservinganalogs) in that set.
Removal of fragment ?
cannotincrease the size of any remaining fragment.Removal of ?
or ?
may generate new fragmentsremove ?remove ?ABCn 1 :n 2 :n 3 :EF Gn 5 :n 6 : n 7 :Dn 4 : An 1 :Cn 3 :xH En 5 :xFn 6 :IDn 4 : An 1 :Bn 2 :xJ ?Dn 4 :K xGn 7 :n 8 :Figure 11: Removal from a tree pair ?
containing a type1?
?type 3 (reversed) fragment overlap.
The fragment ?
isrepresented by the horizontal lined pieces of the tree pair.The fragment ?
is represented by the vertical-lined piecesof the tree pair.
Cross-hatching indicates the overlappingportion of the two fragments.that were not previously valid and may reduce thesize of existing fragments that it overlaps.
In addi-tion, removal of ?may lead to availability of smallerfragments at the next removal step than removal of ?
(and vice versa).
However, since removal of either ?or ?
produces a k of size at leastm, the later removalof fragments of size less than m cannot affect the kfound by the algorithm.
Due to validity preservation,removal of any of these smaller fragments will stillpermit removal of all currently existing fragments ortheir analogs at a later step in the removal process.If the removal of ?
generates a new fragment ?
ofsize larger thanm all remaining fragments inX (andall others smaller than ?)
will be removed before ?is considered.
Therefore, if removal of ?
generates anew fragment smaller than ?, the smallest-first strat-egy will properly guarantee its removal before ?.6 ConclusionIn order for STAG to be used in machine translationand other natural-language processing tasks it mustbe possible to process it efficiently.
The difficulty inparsing STAG stems directly from the factor k thatindicates the degree to which the correspondencesare intertwined within the elementary structures ofthe grammar.
The algorithm presented in this pa-per is the first method available for k-arizing a syn-chronous TAG grammar into an equivalent grammarwith an optimal value for k. The algorithm operatesoffline and requires only O(|G|+ |Y | ?
L3G) time.Both the derivation trees and derived trees producedare trivially homomorphic to those that are producedby the original grammar.611ReferencesAho, Alfred V. and Jeffrey D. Ullman.
1969.
Syntax di-rected translations and the pushdown assembler.
Jour-nal of Computer and System Sciences, 3(1):37?56.Chiang, David and Owen Rambow.
2006.
The hid-den TAG model: synchronous grammars for parsingresource-poor languages.
In Proceedings of the 8thInternational Workshop on Tree Adjoining Grammarsand Related Formalisms (TAG+ 8), pages 1?8.Gildea, Daniel, Giorgio Satta, and Hao Zhang.
2006.Factoring synchronous grammars by sorting.
In Pro-ceedings of the International Conference on Compu-tational Linguistics and the Association for Computa-tional Linguistics (COLING/ACL-06), July.Han, Chung-Hye.
2006a.
Pied-piping in relative clauses:Syntax and compositional semantics based on syn-chronous tree adjoining grammar.
In Proceedingsof the 8th International Workshop on Tree AdjoiningGrammars and Related Formalisms (TAG+ 8), pages41?48, Sydney, Australia.Han, Chung-Hye.
2006b.
A tree adjoining grammaranalysis of the syntax and semantics of it-clefts.
InProceedings of the 8th International Workshop on TreeAdjoining Grammars and Related Formalisms (TAG+8), pages 33?40, Sydney, Australia.Joshi, Aravind K. and Yves Schabes.
1997.
Tree-adjoining grammars.
In G. Rozenberg and A. Sa-lomaa, editors, Handbook of Formal Languages.Springer, pages 69?124.Nesson, Rebecca and Stuart M. Shieber.
2006.
Sim-pler TAG semantics through synchronization.
In Pro-ceedings of the 11th Conference on Formal Grammar,Malaga, Spain, 29?30 July.Nesson, Rebecca and Stuart M. Shieber.
2007.
Extrac-tion phenomena in synchronous TAG syntax and se-mantics.
In Proceedings of Syntax and Structure inStatistical Translation (SSST), Rochester, NY, April.Nesson, Rebecca, Stuart M. Shieber, and AlexanderRush.
2006.
Induction of probabilistic synchronoustree-insertion grammars for machine translation.
InProceedings of the 7th Conference of the Associa-tion for Machine Translation in the Americas (AMTA2006), Boston, Massachusetts, 8-12 August.Satta, Giorgio.
1992.
Recognition of linear context-freerewriting systems.
In Proceedings of the 10th Meet-ing of the Association for Computational Linguistics(ACL92), pages 89?95, Newark, Delaware.Seki, H., T. Matsumura, M. Fujii, and T. Kasami.
1991.On multiple context-free grammars.
Theoretical Com-puter Science, 88:191?229.Shieber, Stuart M. 1994.
Restricting the weak-generativecapacity of synchronous tree-adjoining grammars.Computational Intelligence, 10(4):371?385, Novem-ber.Shieber, Stuart M. and Yves Schabes.
1990.
Syn-chronous tree adjoining grammars.
In Proceedings ofthe 13th International Conference on ComputationalLinguistics (COLING ?90), Helsinki, August.Weir, David.
1988.
Characterizing mildly context-sensitive grammar formalisms.
PhD Thesis, Depart-ment of Computer and Information Science, Univer-sity of Pennsylvania.Zhang, Hao and Daniel Gildea.
2007.
Factorization ofsynchronous context-free grammars in linear time.
InNAACL Workshop on Syntax and Structure in Statisti-cal Translation (SSST), April.Zhang, Hao, Liang Huang, Daniel Gildea, and KevinKnight.
2006.
Synchronous binarization for ma-chine translation.
In Proceedings of the Human Lan-guage Technology Conference/North American Chap-ter of the Association for Computational Linguistics(HLT/NAACL).612
