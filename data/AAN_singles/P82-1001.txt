TRANSLAT ING ENGLISH INTO LOGICAL  FORM'Stanley J. RosenscbeinStuart M, ShieberABSTRACTA scheme for syntax-directed translation that mirrors com-positional model-theoretic semantics i discussed.
The scheme is thebasis for an English translation system called PArR and was used tospecify a semantically interesting fragment of English, including suchconstructs as tense, aspect, modals, and various iexically controlled verbcomplement s ructures.
PATR was embedded in a question-answeringsystem that replied appropriately to questions requiring the computa-tion of logical entailments.I INTRODUCTIONWhen contemporary linguists and philosophers speakof "semantics," they usually mean m0del-theoretic semantics--mathematical devices for associating truth conditions with Sentences.Computational linguists, on the other hand, often use the term"semantics" to denote a phase of processing in which a data structure(e.g., a formula or network) is constructed to represent the meaningof a sentence and serve as input to later phases of processing.
{A bet-ter name for this process might be "translation" or "traneduction.
")Whether one takes "semantics" tobe about model theory or translation,the fact remains that natural languages are marked by a wealth of com-plex constructions--such as tense, aspect, moods, plurals, modality, ad-verbials, degree terms, and sententiai complemonts--that make seman-tic specification a complex and challenging endeavor.Computer scientists faced with the problem of managingsoftware complexity have developed strict design disciplines in theirprogramming methodologies.
One might speculate that a similar re-quirement for manageability has led linguists (since Montague, at least)to follow a discipline of strict compositiouality in semantic specification,even though model*theoretic semantics per me does not demand it.Compositionaiity requires that the meaning of a pbrase be a functionof the meanings of its immediate constituents, a property that allowsthe grammar writer to correlate syntax and semantics on a rule-by-rulebasis and keep the specification modular.
Clearly, the natural analogueto compositionality in the case of translation is syntax-directed trans-lation; it is this analogy that we seek to exploit.We describe a syntax-directed translation scheme that bearsa close resemblance to model-theoretic approaches and achieves a levelof perspicuity suitable for the development of large and complex gram-mars by using a declarative format for specifying rammar rules.
In ourformalism, translation types are associated with the phrasal categoriesof English in much the way that logical-denotation types are associatedArtificial Intelligence CenterSRI International333 Raveoswood AvenueMenlo Park, CA 94025with phrasal categories in model-theoretic semantics.
The translation'types are classes of data objects rather than abstract denotations, yetthey play much the same role in the translation process that denotationtypes play in formal semantics.In addition to this parallel between logical types and trans-lation types, we have intentionally designed the language in whichtranslation rules are stated to emphasize parallels between the syntax-directed translation and corresponding model-theoretic interpretationrules found in, say, the GPSG literature \[Gazdar, forthcoming\].
Inthe GPSG approach, each syntax rule has an associated semantic rule(typically involving functional application) that specifies how to com-pose the meaning of a phrase from the meanings of its constituents.In an analogous fashion, we provide for the translation of a phraseto be synthesized from the translations of its immediate constituentsaccording to a local rule, typically involving symbol/c application and~-conversiou.It should be noted in passing that doing translation ratherthan model theoretic interpretation ffers the temptation to abuse theformalism by having the "meaning" (translation) of a phrase dependon syntactic properties of the translations of its constituents--for in-stance, on the order of conjuncts in a logical expression.
There areseveral points to be made in this regard.
First, without severe a priorirestrictions on what kinds of objects can be translations (coupled withthe associated strong theoretical claims that such restrictions wouldembody) it seems impossible to prevent such abuses.
Second, as in thecase of programming languages, it is reasonable to mmume that therewould emerge a set of stylistic practices that would govern the actualform of grammars for reasons of manageability and esthetics.
Third, itis still an open question whether the model*theoretic program of strongcompositiouality will actually succeed.
Indeed, whether it succeeds ornot is of little concern to the computational linguist, whose systems, inany event, have no direct way of using the sort of abstract model beingproposed and whose systems must, iu general, be based on deduction(and hence translation).The rest of the paper discusses our work in more detail.Section II presents the grammar formalism and describes PATR, animplemented parsing and translation system that can accept a gram-mar in our formalism and uses it to process entences.
Examples ofthe system's operation, including its application in a simple deductivequestion-answering system, are found in Section HI.
Finally, SectionIV describes further extensions of the formalism and the parsing sys-tem.
Three appendices are included: the first contains ample gram-mar rules; the second contains meaning postulates (axioms) used bythe question-answering system; the third presents a sample dialoguesession.
"This research wns supported by the Defense Advanced Research Projects Agencyunder Contract N000SO-SO-C.-0575 with the Naval Electronic Systems Conunand.The views and conclusions contained in this document are those of the authors andshould not be interpreted nsrepresentative of the ol~cial policies, either expres~.dor implied, of the Defense Ad~eanced Research Projects Agency or the United StatesGovernment.i l  A GRAMMAR FORMALISMA General CharacterizationOur grammar formalism is beet characterized asn specializedtype of augmented context-free grammar?
That is, we take a grammarto be a set of context-fres rules that define a language and associatestructural descriptions (parse trees) for each sentence in that languagein the usual way.
Nodes in the parse tree are assumed to have a set offeatures which may assume binary values (True or False), and there isa distinguished attribute--the "translation'--whoee values range overa potentially infinite set of objects, i.e., the translations of Englishphrases.Viewed more abstractly, we regard translation as a binaryrelation between word sequences and logical formulas.
The use ofa relation is intended to incorporate the fact that many word se-quences have several logical forms, while some have none at all.Furthermore, we view this relation as being composed (in the mathe-matical sense) of four simpler elations corresponding to the conceptualphases of analysis: (1) LEX (lexical analysis), (2) PARSE (parsing), (3)ANNOTATE (assignment of attribute values, syntactic filtering), and(4) TRANSLATE (translation proper, i.e., synthesis of logical form).The domains and ranges of these relations are as follows:Word Sequences -LEX-*Morpheme Sequences -PARSE-*Phrase Structure Trees -ANNOTATE-*Annotated Trees -TRANSLATE-*Logical FormThe relational composition of these four relations is the full translationrelation associating word sequences with logical forms.
The subphasestoo are viewed as relations to reflect the inherent nondeterminism ofeach stage of the process.
For example, the sentence =a hat by everydesigner sent from Paris was felt" is easily seen to be nondeterminis-tic in LEX ('felt'), PARSE (poetnominal modifier attachment), andTRANSLATE (quantifier scoping).It should be emphasized that the correspondence b tweenprocessing phases and these conceptual phases is loose.
The goal ofthe separation is to make specification of the process perspicous and toallow simple, clean implementations.
An actual system could achievethe net effect of the various stages in many ways, and numerous op-timizatious could be envisioned that would have the effect of foldingback later phases to increase fficiency.B The Relations LEX, PARSE, and ANNOTATEWe now describe a characteristic form of specification ap-RULES:constant corn,' - (~ e (X Q CX x CP CQ x)))))S--* NPVPTruss: VP' \[NP'\]VP -* T~qSEVAano: \[-~Transitivo(V) \]Tr,=,: { couP' \ [~ ' \ ]  t~'\] }lEXICON:I f  -* JohnAano: \[Proper(W) \]Truss: { John }TENSE -* &putTrash: { (X x CpastX)) }V-*goAnon: \[ -~Trasnitivn(V) \]Trnn: { C~ x Can x)) }Figure 1: Sample specification of augmented phrase structuregrammarpropriate to each phase and illustrate how the word sequence "Johnwent" is analyzed by stages as standing in tbe translation relationto "(past (go john))" according to the (trivial) grammar presented inFigure 1.Lexieal analysis is specified by giving a kernel relation betweenindividual words and morpheme sequences I (or equivalently, a mappingfrom words to sets of morpheme sequences), for example:John -* (john) :vent -* (kput  go) :persuaded -+ (kput persuade) o(kppl persuadn) :The kernel relation is extended in a standard fashion to thefull LEX relation.
For example, "went" is mapped onto the singlemorpheme sequence (&past go), and "John" is mapped to (john).
Thus,by extension, "John went" is transformed to (John &post go) by thelexical analysis phase.Parsing is specified in the usual manner by a context-freegrammar.
Utilizing the eontext,-free rules presented in the samplesystem specification shown in Figure 1, (John 8cpast go) is transformedinto the parse tree(S (NP john)C~ (r~rsE tput)Cvso)))Every node in the parse tree has a set of associated features.The purpo6e of ANNOTATE is to relate the bate parse tree to onethat has been enhanced with attribute values, filtering out three thatdo not satisfy stated syntactic restrictions.
These restrictions are givenas Boolean expressions associated with the context-free rules; a tree isproperly annotated only if all the Boolean expressions correspondingto the rules used in the analysis are simultaneously true.
Again, usingthe rules of Figure 1,lof course, more sophisticated spprotehe~ to morpholoslesl sualysls would seekto analyze the LEX relgtion more fully.
See, for example, ~Kartunnen, lgS2J gad\[Ksplan, 19811.
(s (SP john)(W ( ~  aput)(V go)) )is transformed into(S (NP: Properjohn)(W : "~ Trandlive( ~  ~aet)(V: -Transitivego)))C The Relation TRANSLATELogical-form synthesis rules are specified as augments to thecontext-free grammar.
There is a language whose expressions denotetranslations ( yntactic formulas); an expression from this language isattached to each context-free rule and serves to define the compositetranslation at a node in terms of the translations of its immediateconstituents.
In the sample sentence, TENSE' and V' {the translationsof TENSE and V respectively) would denote the ),-expressions specifiedin their respective translation rules.
VP' {the translation of the VP)is defined to be the value of (SAP (SAP COMP' TENSE') V'), whereCOMF' is a constant k-expression and SAP is the symbolic-applicationoperator.
This works out to be (k X \[past (go X))).
Finally, the symbolicapplication of VP' to N'P' yields (past (go John)).
(For convenience weshall henceforth use square brackets for SAP and designate (SAP a ~)by a\[~\].
)Before describing the symbolic-application perator in moredetail, it is necessary to explain the exact nature of the data objectsserving as translations.
At one level, it is convenient to think ofthe translations as X-expressions, ince X-expressions are a convenientnotation for specifying how fragments of a translation are substitutedinto their appropriate operator-operand positions in the formula beingassembled-especially when the composition rules follow the syntacticstructure as encoded in the parse tree.
There are several phenomena,however, that require the storage of more information at a node thancan be represented in a bare k-expression.
Two of the most conspicuousphenonema of this type are quantifier scoping and unbounded epen-dencies ("gaps").Our approach to quantifier scoping has been to take a versionof Cooper's storage technique, originally proposed in the context ofmodel-tbeoretic semantics, \[Cooper, forthcoming\[ and adapt it to theneeds of translation.
For the time being, let us take translations tobe ordered pairs whose first component (the head) is an expressionin the target language, characteristically a k-expression.
The secondcomponent of the pair is an object called storage, astructured collectionof sentential operators that can be applied to a sentence matrix in such away as to introduce a quantifier and "capture" a free variable occurringin that sentence matrix.
2For example, the translation of "a happy man" might be <m , (X S (some m (and (man m)(happy m)) S)) >.s Here the head is m(simply a free variable), and storage consists of the X-expression (k S2in the sample grammar presented in Appendix A, the storage.formlng operationis notated mk.mbd.3Followlng \[Moore, lO80~, aquantified expression is of the form (quauti6er, variable,restriction, body)...).
If the verb phrase "sleeps ~were to receive the translation < (X X(sleep X)), ~ > (i.e., a unary predicate as head and no storage), thenthe symbolic application of the verb phrase translation to the nounphrase translation would compose the heads in the usual way and takethe "uniou" of the storage yielding < (sleep m), (k S (some m (and(man m)(happy m)) S)) >.We define an operation called ~pull.s," which has the effectof "pulling" the sentence operator out of storage and applying it tothe head.
There is another pull operation, pull.v, which operates onheads representing unary predicates rather than sentence matrices.When pull.s is applied in our example, it yields < (some m (and (manm)(happy m)) (sleep m)), ~b >, corresponding to the translation of theclause ~a happy man sleeps."
Note that in the process the free vari-able m has been "captured."
In model-theoretic semantics this cap-ture would ordinarily be meaningless, although one can complicate themathematical machinery to achieve the same effect.
Since translationis fundamentally a syntactic process, however, this operation is well-defined and quite natural.To handle gaps, we enriched the translations with a third com-ponent: a variable corresponding to the gapped position.
For example,the translation of the relative clause ".,.\[that\] he man saw" would bea triple: < (past (see X Y)), Y, (k S (the X (man X) $))>, wherethe second component, Y tracks the free variable corresponding to thegap.
At the node at which the gap was to be discharged, X-abstractionwould occur (as specified in the grammar by the operation "uugap')producing the unary predicate (X Y (past (see X Y))), which wouldultimately be applied to the variable corresponding to the head of thenoun phrase.It turns out that triples consisting of (head,  var, storage)are adequate to serve as translations of a large class of phrases, butthat the application operator needs to distinguish two subcases (whichwe call type A and type B objects).
Until now we have been discussingtype A objects, whose application rule is given (roughly) as< hal,vat,san>l< hal',vat',san'>\[-~ <(hd hd'),var LI var', sto i3 sto'>where one of vat or vat' must be null.
In the ease of type B objects,which are assigned primarily as translations of determiners, the rule is< h d,var ,san > \[< hd',var',sto' >\]= <var, var', hd(hd') U sto U sto'>For example, if the meaning of "every" isevery' ~- <(k P (X S (every X (P X) S))), X, ~b>and the meaning of ~man" isman' ---- < man, ~, ~ >then the meaning of "every man" isevery'\[man'\] = ( X , ?, (X S (man X) S)> ,as expected.Nondeterminism enters in two ways.
First, since pull opera,tions can be invoked nondeterministically t various nodes in the parsetree (as specified by the grammar), there exists the possibility of com-puting multiple scopings for a single context-free parse tree.
(SeeSection III.B for an example of this phenomenon.)
In addition, thegrammar writer can specify explicit nondeterminism by associatingseveral distinct ranslation rules with a single context-free production.In this case, he can control the application of a translation schema byspecifying for each schema guard, a Boolean combination of featuresthat the nodes analyzed by the production must satisfy in order for thetranslation schema to be applicable.D Imp lementat ion  of  a T rans la t ion  SystemThe techniques presented in Sections H.B and II.C were imple-mented in a parsing and translation system called PATR which wasused as a component in a dialogue system discussed in Section III.B.The input to the system is a sentence, which is preprocessed by alexical analyzer.
Parsing is performed by a simple recursive descentparser, augmented to add annotations to the nodes of the parse tree.Translation is then done in a separate pass over the annotated parsetree.
Thus the four conceptual phases are implemented as three actualprocessing phases.
This folding of two phases into one was done purelyfor reasons of efficiency and has no effect on the actual results obtainedby the system.
Functions to perform the storage manipulation, gaphandling, and the other features of translation presented earlier haveall been realized in the translation component of the running system.The next section describes an actual grammar that has been used inconjunction with this translation system.III EXPERIMENTS IN PRODUCING AND US INGLOGICAL  FORMA A Work ing  GrammarTo illustrate the ease with which diverse semantic featurescould be handled, a grammar was written that defines a semanticallyinteresting fragment of English along with its translation into logicalform \[Moore, 1981\].
The grammar for the fragment illustrated in thisdialogue is compact occupying only a few pages, yet it gives both syntaxand semantics for modais, tense, aspect, passives, and lexically control-led infinitival complements.
(A portion of the grammar is includedas Appendix A.)
4 The full test grammar, Io,~ely based on DIAGRAM\[Robinson, 1982\] but restricted and modified to reflect changes in a~proach, was the grammar used to specify the translations of the sen-tences in the sample dialogue of Appendix C.B An  Example  of  the  System's  Operat ionThe grammar presented in Appendix A encodes a relationbetween sentences and expressions in logical form.
We now present asample of this relation, as well as its derivation, with a sample sentence:"Every man persuaded a woman to go.
"Lexical analysis relates the sample sentence to two morphemestreams:every man &ppi persuade a woman to go4Since this is just a small portion of the actual grammar selected for expositorypurposes, many of the phrasal categories and annotations will seem unmotivatedand needlessly complex.
These categories and annotations m'e utilized elsewherein the test grammar.
*, every man ,~past persuade a woman to go.The first is immediately eliminated because there is no context-freeparse for it in the grammar.
The second, however, is parsed as\[S (SDEC (NP (DETP (DDET (VET every)))C~u CN0m~V (SOUN Cs re,a)))))(Pn~ICar~ (*u~ (TE~E kpaat))(VPP (V?
CV?T (Vpersuado)))(~ (DET?
CA a))(~u (Nnm~ (~vtm CN womm)))))(INFINITIVE (TO to)CV~ Cv?
CWT CV go\]While parsing is being done, annotations are added to eachnode of the parse tree.
For instance, the NP -* DETP NOM ruleincludes the annotation rule AGREE( NP, DETP, Definite ).
AGREEis one of a set of macros defined for the convenience of the grammarwriter.
This particular macro invocation is equivalent to the Booleanexpression Definite(NP) ~ Definite(DETP).
Since the DETP node itselfhas the annotation Definite as a result of the preceding annotationprocess, the NP node now gets the annotation Definite as wello Atthe bottom level, the Definite annotation was derived from the lexicalentry for the word "evesy'.
s The whole parse tree receives the followingannotation:\[S Cb'~O (lqP: Delinite(DETP: DeBniteCDDET: DeBnite(DET: DeBuiteeve1"y) ) )CNOU (stump CNO~ CSm~)))))CPR~ICATE CAU~ CTENSE ~put))(VPP CVP: Active(VPT: Active, Ttansitlve, Takesln?
(V: Active, Transitive, Takesfn\[porsuade) )0~' (DET?
CA a) )CNOU C~la'~ C~ml C~ ,,on~)))))CDr~ISZTZ'W (TO to)(vPP (w: Active(VPT: ActiveCv: ActivesolFinally, the entire annotated parse tree is traversed to assigntranslations to the nodes through adirect implementation f the processdescribed in Section II.C.
(Type A and B objects in the followingexamples are marked with a prefix 'A:' or 'B:'.)
For instance, theVP node covering (persuade a woman to go), has the translation ruleVPT'\[N'P'\]\[INFINITIVE'\].
When this is applied to the translations ofthe node's constituents, we haveCA: CA X CA P (~ T (persuade ?
X (P X)))~\[,CA: X2.
~,.
C~ S (some X2 Cwomu X2) S))~\]\[cA: (~x C~x))~\]which, after the appropriate applications are performed, yieldsCA: CAP (~Y (persuade YX2 CPX2)))).
~,(A S (some X2 (~-  X2) S))~5Note that, although the annotation phase was described and is implemented pro-cedurally, the process actually used guarantees that the resulting annotation isex" "t|y the one specified eclaratlve~y by the annotation rules.\[o,: (A x (gox))>\]= CA: ()/?
(persuadeTX2 (goX2))).
~b,CA S (some X2 (roman X2) S))~After the past operator has been applied, we have<A: CA T (pant (persumde YX2 (goX2)))).
~b,CA S (some X2 (~znu X2) S)))At this point, the pull operator (pull.v) can be used to bring thequantifier out of storage, yielding 6<A: CA Y (some ~2 (womb \]\[2) (pant (peramado T~ (go Yg))))).This will ultimately result in "a woman" getting narrow scope.
Theother alternative is for the quantifier to remain in storage, to be pulledonly at the full sentence l vel, resulting in the other scoping.
In Figure2, we have added the translations to all the nodes of the parse tree.Nodes with the same translations as their parents were left unmarked.From examination of the S node translations, the original sentence isgiven the fully-scoped translations(every X2 (man \](2)(some Xi (woman Xi) (paSt (persuade %,9 X!
(go Xl) ) ) ) )and(some XI (vo~ Xl)(every X~2 (nan X2) (pant (persuade X2 Xl (go Xl) ))) )C A Simple Question-Answering SystemAs mentioned in Section I, we were able to demonstrate hesemantic apabilities of our language system by assembling a smallquestion-answering system.
Our strategy was to first translate Englishinto logical formulas of the type discussed in \[Moore, 1981\], whichwere then postprocessed into a form suitable for a first-order deduc-tion system.
7 (Another possible approach would have been to translatedirectly into first-order logic, or to develop direct proof procedures forthe non-first-order language.)
Thus, we were able to integrate all thecomponents into a question-answering system by providing a simplecontrol structure that accepted an input, translated it into logical form,reduced the translation to first-order logic, and then either asserted thetranslation i the case of declarative s ntences orattempted toprove itin the case of interrogatives.
(Only yes/no questions have been imple-mented.
)The main point of interest is that our question-answeringsystem was able to handle complex semantic entailments involvingtense, modality, and so on--that, moreover, it was not restricted toextensional evMuation in a data base, as with conventional question-answering systems.
For example, our system was able to handle theentailments of sentences likeJohn could not have been persuaded to go.
(The transcript of a sample dialogue is included as Appendix C.)6For convenience, when a final constituent o1'a translation is ~ it is often notwritten.
Thus we could have written <A: (k Y (some ...) ...)> in this cue.7We used a connection graph theorem prover written by Mark Stickel \[Stlckel,forthcoming\].
(S: <A: (pant (persuade XI X2 (go ~))).
~.
(A S (every X1 (nan X1) S))()~ S (some ~ (veto \]\[2) S))>,<A: (some \]\[2 (~man X2) (past Cpersua4e X1 Y,2 (go Yo)))) 0 ~.
(~ 8 (every Zl (man \]\[I) S))><A: (everyX2 CnanX2)(some XI (woman X1) (pant (persuade X2 Xl (go Y~)) )))>cA: (sou Xl (wuan X1)(every \]\[2 (man X2) (pant (p0rsuade X2 l i  (go \]\[2))  ) >(SV~(NP: <A: Xl.
~.
(A S (everyXl (muXl)S)))CDKTP: ?~: CA P (~ S (every X (PI) S))).X~(DDET (DET every)))(NDU: cA: CA X (man X)))(None (Nmm (x m~n)))))(PREDICATE: <A: (AX (past (persuade YX2 (goX2)))).
~b.CA S (some X2 (woma X2) S))),<X: CA X (son X2 (woeanX2)(pant (persuade YX2 (goX2))))).
(AU~P: o,: CA P CA X (pant (P x))))>C'X '~ a~,,.t))(VPP: <A: (A ?
(persuade ?
\]\[2 (go \]\[2))).
~b.CA S (some X2 (wn--X2) S))~(VP (VPT: cA: (XXCA P()~ Y (persuade ?X (P ?
))))(V persuade)))(~: cA: X2.
~, CA S (someX2 (wona Z2) S))~(DETP: <S: (kP (AS (SoNX (PX) S))).X~CA n))(~li: (A: (XX (wommX))>(N0~ (N0uw (w ,mm~)))))(INFINITIVE (TO: noneto)(VPP: ca: (>,X (goX))>(w (vPT (v so\]Figure 2:.
Node-by-node translation of a sample sentenceThe reduction of logical form to first-order logic (FOL) wasparameterized by a set of recursive xpansions for the syntactic ele-ments of logical form in a manner similar to Moore's use of ansxiomatization of a modal anguage of belief.
\[Moore, 1980\] For ex-ample, (past P) is expanded, with respect to a possible world w, as(some w2 (and (past w2 w) <P,w2>))where "<P,w2>" denotes the recursive FOL reduction of P relativeto the world w2.
The logical form that was derived for the samplesentence "John went ~ therefore reduces to the first-order sentence(some w (and (past w REALWORLD)(go w John))).More complicated illustrations of the results of translation and reduc-tion are shown in Figure 3.
Note, for example, the use of restrictedquantification i LF and ordinary quantification i  FOL.To compute the correct semantic entailments, the deductionsystem was preloaded with a set of meaning postulates (axioms) givinginferential substance tothe predicates a sociated with lexical items (seeIMrffT: every ntanus~ be happyiF: (everyX (m X)(tacosnry (tad (happy X)(thlngX))))FOL: (every x0172(implies (mtuREALWORLDxOI72)(overywO173(implies (posnBEALgORLD~173)(tad (happy~O175zOt72)(~h i~Ot73z0172) ) ) ) ) )II~UT: b i l l  persuaded john to goiF: (ptat (porsutde b i l l  john (go john)))FOL: (some s0175(ud  (pant w0175 RF..AL|QP.LD)(sou wOrTS(Imd (permaade w0175 bill John wOlT?
)(go wOlTe John)))))Figure 3: Translation to LF and Reduction to FOLAppendix B).IV FURTHER EXTENSIONSWe are continuing to refine the grammar formalism and im-prove the implementation.
Some of the refinements are intended tomake the annotations and translations easier to write.
Examples in-clude:Allowing nonbinary features, including sets of values, in theannotations and guards (extending the language to includeequality and set operations).Generalizing the language used to specify synthesis of logi-cal forms and developing a more uniform treatment oftranslation types.Generalizing the "gap* variable feature to handle ar-bitrary collections of designated variables by using an"environment" mechanism.
This is useful in achieving auniform treatment of free word order in verb complementsand modifiers.In addition, we are working on extensions of the syntacticmachinery, including phrase-linking grammars to handle displacementphenomena \[Peters, 1981\], and methods for generating the augmentedphrase structure grammar through a metarule formalism similar tothat of \[Konolige, 1980\].
We have also experimented with alternativeparsing algorithms, including a chart parser \[Bear, 197g\] adapted tocarry out annotation and translation in the manner described in thispaper.REFERENCESBear, John, and Lanri Karttunen.
PSG: A Simple Phrase StructureParser.
Texas Linguistic Forum, vol.
14.
1979.Cooper, Robin.
Quantification and Syntactic Theory.
Forthcoming.Reidel, Dordrecht.Gazdar, Gerald.
Phrase Structure Grammar.
To appear in Jacobsen,O.
and G. K. Pullum (eds.)
On the Nature of SyntacticRepresentation.Kaplan, R. M., and Martin Kay.
Personal communication.
1981.Karttunen, Lauri, Rebecca Root, and Hans Uszkoreit.
Morphologicalanalysis of Finnish by computer.
Paper presented at the ACLsession of the 1981 LSA Annual Meeting, New York, December1981.Konolige, Karl.
Capturing linguistic generalizations with metarules inan annotat.d phrase-structure grammar.
Proceedings of the 18thAnnual Meeting of the Association for Computational Linguistics,University of Pennsylvania, Philadelphia, June 1980.Moore, Robert C. Problems in Logical Form.
Proceedings of the 19thAnnual Meeting of the Association for Computational Linguistics,Stanford University, Pale Alto, June, 1981.Moore, Robert C. Reasoning About Knowledge and Action.
SRIInternational, Technical Note 191.
October, 1980.Peters, Stanley, and Robert W. Ritchie.
Phrase Linking Grammars.December 1981.
Unpublished manuscript.Robinson, Jane.
DIAGRAM: A Grammar for Dialogues?Communications of the ACM, ~5:1 (January, 1982) 27--47.Stickel, Mark.
A Non-Clausal Connection Graph Resolution TheoremProving Program.
Forthcoming.APPENDIX  A.
Sample  Grammar  RulesThe following is a portion of a test grammar for the PATREnglish translation system.
Only those portions of the grammar uti-lized in analyzing the sample sentences in the text were included.The full grammar handles the following constructs: medals, adjec-rivals, tense, predicative and nonpredicative copulatives, adverbials,quantified noun phrases, aspect, NP, PP, and infinitival complements,relative clauses, yes/no questions, restricted wh-questions, noun-nouncompounds, passives, and prepositional phrases as predicates and ad*jectivals.a~smf f iamumam GrlmlN, r h les  ?.m~ .
.
.
.
~mssmtmCone~mt EQ' ?
curry (X,,AIIBDA (X ?)
(equal X ?
))Coast&at PASS' 8<A: (LA~DA P (LAIEDA X ((P X) T))).
NIL,(IIX.IIBD (QUOTE (LAIIBDA S (some T (thing Y) S)))) >Constant PhSSIIF' ?<A: (LAM~)A P (LAMBDA I (~& x (((P x) I) ?))))
.
NIL,(MI(.MBD (QUOTE (IAMBDA S Csome ?
(thing ?)
S)))) >AUXP-> TENSE;Trtaslation:TENSE'DDET -> DET:Annotation:\[ Defiaite(DDET) \]Trtaslation:DET'DETP -> A;Annotation:\[ ~Definite(DETP) \]Translation:A'DETP -> DDET;Annotation:\[ AGREE(DET?.
DDET, Definite) \]Translation:DDET'II~INITIV~ -~ TO VPP;Annotation:\[ AGREECINFINITIVE.
VPP, G*ppy.
|h) \]Translation:pull.v(VPP')NON -> NO~qD;Annotation:\[ AOREE(NOM.
NOMHD.
O~ppy) \]Translation:NON~ID'NOMHD -) NOUN;Translation:NOUN'NOUN -> N;Translation:N'NP -) DE?P ~M;Annotation:\[ AOP~CNP.
NOM.
Gappy) \]\[ Predicative(NP) %/ ~Predicative(NP) \]\[AGREE(N~.
DETP, Definite) \]Translation:~Predica~ive(~): DET~'\[NOM'\]Definite(NP) A Predicative(NP): E~'\[DETP'\[NQM'\]\]~Definite(NP) ?
Predicative(NP): NON'PREDICATE -> AU\]~ ~;Annotation:\[ AORE~(PREDICATE.
VPP.
Active.
0appy.
~h) \]Translation :pull.v(A~' \[VPP'\])S -) SDEC;Annotation:\[ ~Oappy(.~'~EC) \]\[ ~(~EC)  \]Translation :SDEC'&DEC -) NP PREDICATE;Annotation:\[ 0appy(NP) V Gappy(I~DICATE) ?-) G~ppy(S)EC) \]\[ ~Predicative(NP) \]\[ |h(N~) ~/ |b(PREDICATE) <=> Wb(SDEC) \]\[ - (Onppy (NP) a Onppy (PKEDICATE)) \]Trus lat ion:pull.s(PR~DICATE'\[NP'\])VP - ,  VPT;Annotation:\[ ~TrLnsitive(VPT) \]\[-TLkeelnZCV~T) \]\[ Active(VPT) \]\[ ActiveCVP) \]Translation:VPT'VP -> VPT NP I~FINITIVE;Annotation:\[ Takeslnf(VPT) \]\[ Transitive(VPT) \]\[ ~P~,dicativ,(~) \]\[ AOP~:~(~.
VPT.
Active) \]\[ Wh(NP) %/ Wh(INFmITIW) ~-* Wh(VP) \]\[ IY(lctive(VPT).
((O&ppy(~) ~/ Oappy(~INITIVE)) ,=) Sappy(%~D)),(~Oappy(~T) k Oappy(NP))) \]Truslation:Active(%?
): pulI.v(%~OT?\[NP '\] \[I~INITI~'\])~Active(VP): pul l .v(P~Sl~'~T'\]  \[INFINITIVE'\])V~ -~ VP;Annotation:\[ a~(v l~.
VP, Gappy.
|h)  \]\[ Active(VP) \]Translation:VP'VPT -> V;Annotation:\[ AOREE(VPT.
V. Active.
Transitive.
T~kenInf) \]Trsnslatlon:V'N -> nan:Translation:?a: mum, NIL, NIL )Translation :?A: ~man.
NIL, NIL )DET -) every:Annotation:\[ Definite(DET) \]Translation:(B: (LAI~A P (LAMBDA S (every X (P X) S))).
X. NIL ?A -~ &;Translation:~B: (IA~mDA P (~DA S (some X (P X) S))).
X, NIL ?V -~ persuade;Annotat ion:\[ Trans i t ive(V)  \]\[ Active(V) ~/ ~Active(V) \]\[ TLkeslnf(V) \]T rans la t ion :curry (LAIfBDA (X P Y) (persuade Y l (P X)))V -> go;Annotat ion:\[ ~Tranei t ive(V)  \]\[ -TskesZ~CV) \]\[ ActiveCV) \]T rans la t ion :<A: go, NIL.
NILTENSE -> &past;T rans la t ion :curry (LAI~A (P X) (past  ~ X)))APPENDIX B.
Meaning Postulates(every ?
(every u ( i f f  (pant ?
u)( .o r  (put  u ?\](eTery ?
(some u (put  ?
U)))\[every ?
(every ?
(every y (every z ( impl ies  (promise ?
?
y z)(put  ?
z\]\[every ?
(every ?
(every y (every z ( impl ies  (persuade ?
?
y z)(pant ?
z\](every ?
(every ?
( th ing ?
x) ) )\[every ?
(every x (every z ( impl ies  (want ?
s z)(put  ?
z\](every ?
(pose ?
v))\[every v (every u ( impl ies  (pant ?
u)(pose ?
u)\[every ?
(every u (every v ( impl ies  (and (pant l  ?
u)(pantl u v))(pant2 ?
v\]\[every ?
(every z ( impl ies  (past2 ?
z)(pant ?
z\]\[every v (every z ( i f !
(past  ?
z)(put l ?
z\]~ is john a happy manYes.?
> no man could have hidden a bookOK.>) did john hide a bookNo.>~ bill hid a bookOK.?
~ is b i l l  a manNo.~> ww john a sumI don't know.>> every ?an ?
i l l  be a nanOK.>) ?
i l l  j oh ?be  ?
nanYes.~, b i l l  persuaded john to goOK.?
> could john have been persuaded to pYes.>> ?
i l l  john be persuaded to goI don ' t  knee.APPENDIX C. Transcript of Sample Dialo~ue?
~ john is happyOK.~ i s  john happyYes.>> is  john a happy mnnI don ' t  kno?.>> john is  a mannK.
