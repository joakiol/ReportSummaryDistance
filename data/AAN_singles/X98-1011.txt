EXTRACTING AND NORMALIZING TEMPORAL EXPRESSIONSLois C. Childs, David CasselLockheed Martin CorporationP.O.
Box 8048Philadelphia, PA 19101lois.childs @ lmco.com(610) 354-58161.
INTRODUCTIONAs part of our TIPSTER III research program,we have enhanced the NLToolset's ~capability toextract temporal expressions from free text andconvert them into canonical form for accuratecomparison, sorting, and retrieval within a databasemanagement system.The date or time that an event occurs is often acritical piece of information.
Unfortunately, naturallanguage xpressions that contain this information areso numerous and varied that the interpretation oftemporal expressions within free text becomes achallenging task for automatic text processingsystems.This paper will look at the nature of theproblem, the extraction and computation tasks, theuse of a learning program, and the normalizationstrategy.
The concluding section will discuss possiblefuture endeavors related to time extraction.The NLToolsetThe NLToolset is a framework of tools,techniques, and resources designed for building textprocessing applications.
It is a pattern based systemwhich uses world knowledge resident in a lexicon, alocation gazetteer, and lists of universal terms, suchas first names and the Fortune 500 companies.
Thisknowledge base is extensible with generic, as well asdomain-specific, information.
It applies lexico-semantic pattern matching in the form of basicstructural patterns (possible-title firstname middle-J The NLToolset is a proprietary text processingproduct, owned by Lockheed Martin Corporation.initial lastname), as well as contextual knowledge(possible-name, who is X years old).
The NLToolsethas been applied to routing, indexing, name spotting,information extraction, and document management.It is an object-oriented system, implemented in C++and ODBC to make it portable to both Unix and NTplatforms, as well as multiple databases.2.
PROBLEM DESCRIPTIONThe task of automatically extracting temporalinformation can be divided into four parts:1) Recognize the temporal expression.The event happened Saturday.2) Extract its features.Saturday is a day name and a relativeexpression.3) Compute its interval representation.Based on the reference date of thedocument and the features of theexpression, determine whichcalendar day is meant.
Representthis as an interval: 2 08291998 -08291998.4) Normalize the interval for databaseuse.Store each part of the intervalexpression, i.e., day, month, yearfor start and end points, into an2 For the purpose of this paper, the interval will notaddress maller units of time than days, i.e.
hours,minutes, and seconds.
An interval for a day will haveidentical endpoints.51NLToolset structure.
Finaloutput format varies accordingto application requirements.Feature ComplexityThe greatest difficulty in building an automaticsystem for interpreting time expressions is theseemingly infinite variety of ways in which humanbeings express time.The term "feature" in this context refers to acategory of information that can be used to interpretthe expression.
For example, the feature "unit oftime" refers to the terms month, day, year, century;"interval endpoint" refers to an explicit reference to atleast one end of a time interval, such as before the endof or from June to September.Each of the following numbered examplesrepresents a different kind of time expression, basedon the features available for its interpretation.1.
before the end of the year2.
next April3.
March 1, 19924. from June to September5.
in the 90's6.
in two weeks7.
the firstyear8.
beginning July 19. last Summer10.
next month11.
in the first quarter of fiscal 199212. the turn of the century13.
Saturday14.
yesterday15.
the previous AprilTable 1 illustrates the relationship between a setof features and the temporal expressions in whichthey appear.
This is often a many-to-manyrelationship, which makes the manual construction ofa decision tree a formidable task.Feature Available Example Nmuberunit of time 1, 6, 7, 10interval endpoint 1, 4, 5, 7, 8relative to dateline 1, 2, 4, 6, 8, 9, 10, 13, 14month name 2, 3, 4, 8, 15relative direction 2, 9, 10, 15day number 3, 8year 3decade number 5ordinal 7relative to event date 7season ame 9fiscal year 11fiscal year unit 11idiom 12relative to context 5, 12day name 13relative day term 4Table 1: Feature/Expression RelationshipsEach expression will require a uniquecomputation function, based on the features presentand their interaction.
For example, the secondexpression, ext April, is different from April of nextyear only if the reference date is within the intervalbetween January 1 and March 31.There are many possible combinations offeatures.
Additionally, there are many idiomatictemporal expressions, uch as the turn of the century.These possibilities must be captured within theNLToolset's rule packages o that the expression canbe recognized.Relative ExpressionsSome time expressions are specific, e.g.
March1, 1992; others are relative expressions, either of acontiguous or non-contiguous nature.
For example,expressions like yesterday or next month are non-contiguous because they are relative to the dateline ofthe message.
But, expressions like the previous Aprilor the following day usually refer to the immediatelypreceding time expression, and thus are thought of ascontiguous.The CEO announced his retirement on March 5.
The followinqd~,  the company's stock price rose.52In this example, on March 5 is a non-contiguousexpression and is calculated from the documentreference date, while the following day is contiguousand is calculated using the previous temporalexpression, March 5, as the reference date.Also to be factored in as a consideration inrelative xpressions i the tense of the verb.The ship sailed on Saturdav.The ship will sail on Saturdav.Computation of the correct interval depends onwhether the date is meant o indicate past or future.AmbiguitySome expressions are simply meant to beambiguous, indicating a general vicinity of time, butnot meant to be exact.
When the expression, nextweek, is used, does that mean the seven daysbeginning on Sunday, or does it mean the five days ofthe business week?
There definitely is informationcontained within the expression, but the problem iscapturing the information without overstating theaccuracy of its representation.
The followingexample further illustrates this point.Basebafl season begins next week.In this case, what is meant is that the season willbegin at some point during the interval that is nextweek; however, the exact ime is ambiguous.The NLToolset's current implementation willarbitrarily decide what the interval of next week is.
Itwill make no attempt to resolve the ambiguity, nor tonote that such ambiguity exists.
This is an area forfuture research.Specialized CalendarsInformation extraction systems are oftendeveloped for specialized omains.
The followingexamples illustrate the problem of specializedcalendars.
The first example is from a businessdomain from which the system must extractinformation about joint ventures.Profits durino the first year reached $5 million.In this example, the reference point is the datethat the joint venture began operations.
This is usedto calculate the interval represented by thefirst year.The second example is from the automotivedomain.Since the 1990 model year began on October 1, Buick saleshave plunged.Introduction of world knowledge to the systemwould be necessary to have it understand that the startof the model year was in 1989.The third example might appear in anagricultural domain.During the current crop year, Brazil will produce 7 million tons ofsugar.This time period would depend on the cropgrown and the growing location.3.
EXTRACTION AND COMPUTATIONThe NLToolset has a rule package that canrecognize common temporal expressions, bothabsolute and relative; its accuracy has been measuredat above 90%.
An important feature of the NLToolsetis the ability it affords the developer to add variablesto the rule patterns.
In the case of temporalexpressions, the pattern variables capture the features,such as month, day, or year, that make up theexpressions.
These values are used in thecomputation of the interval representation.Computing the IntervalThe computation stage involves determining thereference point and using it, plus the featureinformation and the information from the expression'scontext o compute the interval.
For example, if theexpression is next year, the system would find thereference year and then add one; the interval wouldextend from January 1 until December 31 of that year.If the expression is Saturday, the system mustdecide whether it refers to next Saturday or lastSaturday, based on the sentence tense.
It must thenascertain the weekday name of the reference date andadd or subtract he appropriate number of days toreach the proper calendar date.Arithmetic of calendar days across months canbe problematic.
To avoid this problem, theNLToolset converts each calendar day into a Julianday number form.
3 This number is the count of days,3 The Julian day number was introduced in 1581 bythe French scholar Joseph Justus Scaliger to define anumber from which all time could be reckoned.
As astarting point, Scaliger chose the last year that thefollowing cycles began simultaneously: the 28 year-long Sun cycle in which the calendar dates repeat onthe same weekdays, the 19 year-long Metonic cycle inwhich the phases of the Moon repeat on almost hesame calendar dates, and the 15 year-long cycle fortax collection and census that was used in the Roman53starting with the day 0 on the 1st of January, 4713BC.
After the calculation is completed, theNLToolset converts the Julian day back to its originaltime scale.For the majority of cases, it is a simple matter towrite a computation for a specific pattern that takesinto consideration all of the relevant features and thendetermines the interval; however, the many-to-manyrelationship between features and expressions,coupled with a context dependency, complicates theoverall process.Algorithm ComplexityThe simplest approach would be to write apackage of rules, each of whose left hand sidematches a certain time expression and whose righthand side is the relevant computation function.
Thismethod, while simple to implement, would bog downour pattern matcher by giving it too many possiblepaths to check.
The following example illustrates thispoint.Straightforward mapping of patterns to functions< monthname > >> Function-1< monthname day > >> Function-2< monthname day year > >> Function -3< monthname year > >> Function-4In this example, if the pattern matcher finds amonthname, it must check each of these patterns tosee which one is applicable.
If, instead, we constructone non-deterministic pattern, we can eliminate thisproblem.
The curly brackets indicate optionalelements.Collapse of four pattems into one< monthname { day } { year } > >> Call-correct-functionIn this case, the complexity migrates to the rightside of the rule.
The Call-correct-function functionnow must compute the interval based on the featuresthat have matched.
The difficult part, with a varietyof candidate features, is constructing a decision treethat is efficient, and then, when new cases are added,reconstructing the decision tree, while maintaining itsefficiency.Identifying the Interval TypeBecause the NLToolset represents dates asintervals, the NLToolset must decide how to fill thestart and end points of each interval.
A starting orempire.
This starting year for the Julian day was4713 BC.ending point could be unknown, a part of the date thatis being interpreted, or the dateline (or other referencedate).
The decision as to what will fill each point ofthe interval is based partly on the prepositions andcontext, and partly on the date being interpreted.
Forinstance, next week will have a start date at thebeginning of the week following the dateline, and anend date at the end of that week.
However, by nextweek will use the dateline as the start date.There are, by our reckoning, twelve ways to fillin the Start and end dates.
By examining the contextin which the date appears, we can select one of theseways rather than trying to work with the contextualinformation directly as we fill in the interval.
Table 2enumerates the possibilities.START END EXAMPLEbeg before last weekunk end through last weekunk dl until todaybeg unk as of this weekbeg end (during) next weekbeg dl beginning last weekend unk after next weekend dl since last weekdl unk after todaydl beg until next weekdl end through next weekdl dl todayKEY:unk = unknownbeg = beginning of the interpreted dateend = end of the interpreted datedl = dateline ( or other reference date )Table 2: Interval Type Algorithm4.
LEARNING THE DECIS ION TREEWe decided to try using machine learning tohelp generate the Call-correct-function code.
Wechose Quinlan's C4.5 software because it has beensuccessfully applied to many problems requiringdecision trees.
C4.5 uses training examples to build aclassification system, which, in this case, willcomprise a decision tree which lays outs a feature-based path to each correct computation.
As new cases54are added to the rule package, the tree can be quicklyregenerated byadding more training examples.Using C4.5We will describe our experiment with C4.5.
Fora complete description of C4.5, see Quinlan's ownpublication.
4To use C4.5, the developer specifies: 1) theclasses of interest; these will become the leaves of thedecision tree and 2) the features and their possiblevalues; these are the nodes of the tree.
A set oftraining examples is provided and, when the tree hasbeen generated, each path can be considered a rule.The C4.5 specification builds a description spacewhose dimensions correspond to the number offeatures describing the problem.
Each trainingexample is a point within the space.
The decision treeis a classifier that divides the description space intoregions, each one labelled with classification type.C4.5 decides which feature is the best one to use as afirst discriminator, and then starts to divide the regionbased on that feature.
This is a key element of C4.5.It provides the most efficient ree that it can discover.It also includes heuristics for simplifying the tree.
Ingeneral, C4.5 generates a decision tree by orderingthe testing of features according to how muchinformation each feature will provide.
Each decisionsplits the region into smaller pieces, until finally theclassification is reached.According to Quinlan's guidelines, the bestclassifier will have few classes, few regions per class,many training cases relative to the volume of theregions, and no misclassification f the training cases.Failed AttemptOur first attempt at describing the problem inC4.5 syntax resulted in something like the followingmodel.Classes: one class for eachcomputation functionFeatures and Values:Month ( Jan, Feb, Mar, Apr, May,Jun, Jul, Aug, Sep, Oct, Nov,Dec )Day (1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12, 13, 14, 15, 16, 17, 18, 19, 20,4 Quinlan, J. Ross.
C4.5: Programs for MachineLearning, Morgan Kaufmann Publishers, 1993.21, 22, 23, 24, 25, 26, 27, 28, 29,30,31 )Year ( continuous values )This approach failed because it does not abideby Quinlan's guidelines.
We are trying to classifyinto many categories, one for each computationfunction.
Our preliminary working set consists offifteen classes.
We also have many features withmany possible values, and not all of the features arerelevant in every case.
In fact, in all cases, only asubset of the features is relevant.
As a result, C4.5 hasdifficulty in generating a good decision tree, evenwith several hundred training examples.Different ApproachTo remedy this situation, we transformed thedescription space by converting the feature values toboolean -- Y or N -- because the value of the featuredoes not matter as much to the decision as whetherthe feature is present.Classes: one class for eachcomputation functionFeatures and Values:Month ( Y, N )Day (Y ,N)Year (Y ,N)This change, although it maintains the largenumber of classes, allows us to reduce the volume ofthe regions and avoid the fragmentation of theprevious model.
Additionally, this model produces abinary tree, which is a simple if-then-else algorithm toimplement.
In fact, we can automatically convert hegenerated ecision tree to C++ code, using a Perlscript.This is an unusual use of C4.5 in that it does notfollow Quinlan's guidelines for developing a goodclassifier; however, it does work for our purposes.
Ithas alleviated the tedious and time-consumingproblem of generating and re-generating an efficientdecision tree in C++ code.5.
NORMALIZAT IONThe NLToolset gives a temporal expression aninterval representation.
The temporal intervalcurrently abides by the time standard of the originaltemporal expression; however, in future, the temporalinterval will be normalized into CoordinatedUniversal Time (UTC), which is considered themodern implementation of Greenwich Mean Time.55This time standard is used worldwide and will allowfor greater interactivity between databases and withinvisualization tools.The interval representation is stored within anNLToolset structure in its component parts; that is,the year, month, day, hour, minute, and second for thebeginning and endpoint of each interval are storedseparately.
The original values of the text are alsostored.
This affords flexibility as the NLToolset isapplied to various domains.
The applicationrequirements can dictate which parts of the timerepresentation will be stored and displayed.6.
CONCLUSIONS AND FUTUREWORKThis paper has examined the task of extractingand normalizing temporal expressions, and hasdescribed the NLToolset's approach to accomplishingthis task.
It has also described the use of a learningprogram to deal with the complexity of developingsuch a system, as well as the methodology fornormalizing temporal information for database use.As the time extraction process is exercisedacross applications, it will be expanded to cover moreand more cases.Future research work may address the issue ofambiguous temporal expressions.
Statistical meansmay be appropriate for representing the uncertainty ofan interval representation.
Comparisons acrosslanguages may also prove enlightening.
In the nearfuture, an existing prototype application will betranslated into the Spanish language.56
