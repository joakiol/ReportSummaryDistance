An Extension of Earley's Algorithm forS-Attributed GrammarsNelson CorreaDepartment of  Electrical EngineeringUniversidad e los AndesApartado A6reo 4976, Bogotti, D.E., Colombiabitnet : NCORREA at ANDESCOLAbstractAttribute grammars are an elegant formalization of theaugmented context-free grammars characteristic ofmostcurrent natural anguage systems.
This paper presentsan extension of Earley's algorithm to Knuth's attributegrammars, considering the case of S-attributedgrammars.
For this case, we study the conditions onthe underlying base grammar under which the extendedalgorithm may be guaranteed to terminate.
Finitepartitioning of attribute domains is proposed toguarantee the termination of the algorithm, without heneed for any restrictions on the context-free base.1.
IntroductionEarley's (1970) algorithm is a general algorithm forcontext-free languages, widely used in natural languageprocessing (King, 1983; Shieber, 1985) and syntacticpattern recognition (Fu, 1982), where the full generativepower of context-free grammar is required.
The originalalgorithm and its common implementations, however,assume the atomic symbols of context-free grammars,thus limiting its applicability to systems with attributedsymbols, or attribute grammars (Knuth, 1968).Attribute grammar is an elegant formalization of theaugmented context-free grammars characteristic ofmostcurrent NLP systems.
It is more general than membersof the family of unification-based grammar formalisms(Kay, 1985; Shieber, 1986), mainly in that it allowsand encourages the use of simpler attribution functionsthan unification for the definition of attribute values,and hence can lead to computationally efficientgrammatical definitions, while maintaining theadvantages of a well-understood declarative formalism.Attribute grammar has been used in the past by theauthor to define computational models of Chomsky'sGovernment-binding theory, from which practicalparsing programs were developed (Correa, 1987a).Many systems based on Earley's algorithm have a cleardivision between the phases of syntactic and semanticanalysis.
Yellin (1988), for instance, uses a syntacticanalysis phase in which Earley's algorithm builds afactored parse tree (FPT) for the given input, which isthen followed by up to two phases of semantic analysis,during which the FPT is attributed and evaluated.
Watt(1980) and Jones and Madsen (1980) propose a closeinteraction between syntactic and semantic analysis inthe form of "attribute-directed" parsing.
However, theirparticular ealization of the technique is severelyrestricted for NLP applications, since it uses adeterministic one-path (LR) algorithm, applicable onlyto semantically unambiguous grammars.Pereira and Warren (1983) and Shieber (1985) presentv6rsions of Earley's algorithm for unification grammars,in which unification is the sole operation responsiblefor attribute valuation.
However, given the highcomputational cost of unification, important differencesbetween attribute and unification grammars in theirrespective attribution domains and functions (Correa,forthcoming), and the more general nature of attributegrammars in this regard, it is of interest to investigatethe extension of Earley's algorithm directly to the mainsubclasses of attribute grammar.The paper is organized as follows: Section 2 presentspieliminary elements, including a definition of attributegrammar and Earley's algorithm.
Section 3 presents theextension of the algorithm for S-attributed grammars.In Section 4, we consider the conditions on theunderlying rammar under which the extended algorithmmay be guaranteed toterminate for each input.
For theS-attributed case we show that the algorithm terminatesif the grammar has no cycles or, equivalently, if it isfinitely ambiguous.
However, finite partitioning ofattribute domains may be used to guarantee thetermination of the algorithm, without the need forrestrictions on the context-free base.
Finally, aconclusion and note on implementation are given.2.
Notation and PreliminariesWe follow the usual notation and terminology forgrammars and languages.
A language is a set of stringso~,er a finite set T of symbols.
A grammar is a formaldevice for specifying which strings are in the set.
Inparticular, a context-free grammar is a cuadruple- 299 -(N, T, P, S), where N is a finite set of stringcategories; T a finite set of terminal symbols; P a finiteset of productions or rewriting rules of the form X--~t~,Xe N, ae  (NUT)*; and S a distinguished symbol of N.A binary relation ~ of derivation between strings overthe vocalulary NuT  of the grammar is defined such thataXl~ ~ ctol3 iff Xo  o is a production of P; now, ~*may be defined as the reflexive and transitive closure of~.
The language generated by the grammar, notedL(G), is the set of strings toe T*, such that S ~*  to.An attribute grammar is defined upon a context-freegrammar G=(N, T, P, S), by associating each symbolXe NuT with a finite set A(X) of attributes, and a typeor domain dom(a) for each attribute a thus defined(Knuth, 1968).
Each attribute a of X, noted X.a, takesvalues over its domain and represents a specific,possibly context-sensitive property of the symbol.Attribute values are defined by attribution rules of theform X i .a~f (X j .b  .
.
.
.
.
Xk.c), associated with eachproduction p=Xo-~Xt...Xn in the grammar, 0<i,j,k<n.Here, f is an applicative xpression (function) whosevalue depends on the values of attribute occurrencesassociated with symbols in the production.
Each time papplies in a derivation, the attribution rule defines thevalue of the attribute occurrence X.a as a function ofthe occurrences Xj.b .
.
.
.
.
Xk.c, associated with othersymbols in p .
We let R(p) denote the packet ofattribution rules associated with p .
The grammar mayalso define attribute conditions of the formB(Xi.a .
.
.
.
.
Xk.b ), 0 < i, k < n, where B is a Booleanpredicate on the values of attribute ocurrences in p .This condition must be satisfied in any derivationrequiring the application of p ,  and thus contributes tothe notion of grammaticality in the language generatedby the grammar.
We let B(p) denote the packet ofattribute conditions associated with p .The above remarks are summarized as follows: Anattribute grmmnar is a cuadruple AG=(G,A,R,B), wherei.
G = (N, T, P, S) is a context-free grammar;ii.
A = L3Xe NuT A(X) is a finite set of attributes;iii.
R= k..Jpe pR(p) is a finite set of attribution rules,as above; andiv.
B=L3pe p B(p) is a finite set of attribute conditions,as above.The base grammar G assigns a derivation tree x to eachsentence in L(G).
The tree is annotated at each nodelabelled X with the set A(X) of attributes associatedwith X; each attribute ae A(X) defines an attributeoccurrence X.a at node X.
If the grammar is welldefined (Knuth, 1968), it is possible to evaluate achattribute occur renc~ on the tree, and we say that ?
iscorrectly attributed iff all attribute conditions yield'true.'
The language generated by the attributegrammar, L(AG), is now the subset of L(G) whosemembers have at least one correctly attributed tree.It is possible to classify the attributes in AG accordingto the manner in which their values are defined.
We sayan attribute X.a is synthesized if its value depends onlyon attributes of daughters of X; it is inherited if itsvalue depends on attributes associated with the parent orsisters of X.
We say the grammar is S-attributed if itcontains only synthesized attributes.
A more generaland practically important class of L-attributed grammarsis obtained if we allow attributes of both kinds, butsuch that each inherited attribute depends only oninherited attributes of the parent, or attributes of thesisters to its left (Bochmann, 1976).Earley's algorithm is a recognizer for CFGs which usestop-down prediction in combination with bottom-upparsing actions.
Given an input string Xl .
.
.
.
.
Xn itbuilds a state set Si at each position i of the string,0< i < n+l.
Each state in Si is of the form<A--~a.l~, f ~5>, where A---~a.~ is a dotted-production,fan index to the position in the input string where thisinstance of the production began to be recognized (0 < f< i), and 8 a string of k symbols of Iookahead (k >0).To begin, all state sets are initialized to empty and theinitial state <?~.S  _1_, 0, _l_k> is put into SO; here_1_ is the end-of-input marker.
States are processed inorder according to the position of their "dot" followingthree actions, Predictor, Completer, and Scanner, whilemaintaining the following invariant:State < A---~a-13, f ~5> is in Si iff the followingderivations are valid:S ~*  GA~ ; a ~*  x .
.
.xf;  and ot ~*  Xf+l...xi.Since the number of possible states is finite thealgorithm terminates.
The input string is accepted ifSn+I={<~---~S _1_., 0, .l_k>}.
The correctness of thisacceptance ondition is a consequence of the invariant.3.
Extension to S-attributed GrammarsThe chief element of the extension of the algorithm is achange in the representation f the states in Earley'soriginal algorithm to attributed representations.
Now,each dotted production A~a*l~ in a state consists ofsymbols attributed according to the grammar.
For eachcategory symbol A in the base grammar, we define theattributed symbol A\[A.al .
.
.
.
.
A.an\], where A is thecategory and A.ai, l<i<n, an attribute occurrence of A.The extended algorithm, in addition to syntacticallyrecognizing the input string, evaluates the attributionassociated with each of its possible derivations.
Inparticular, for each derivation of the attributed final state- 300 -<?-->S\[ S.al ..... S.an\] _1_., 0, ?k>, where S is the startsymbol of the grammar and S.al ..... S.a n the attributeoccurrences of S associated with that state, thealgorithm evaluates the corresponding attributeoccurrences.
For an S-attributed grammar, this isachieved by the following modification of Earley'salgorithm, in its Completer step:SO := { < ?---)'SIS.al .....
S.anl?, O, ?k> };for i:= 1 rondobeginFor each state s in Si, repeat until no morestates may be added to Si or Si+lbegin1.
PredictorIf s = < A--->~-X\[I, f 8>(i.e., s is not final and X non-terminal)Si := Si t..) { <x- -~,o ,  i, B> IX-->c in P and It in FIRSTk(~8)}2.
CompleterIf s = < A- )a .
,  f, 8> (i,e., s is final)and 8 = Xi+l ... Xi+ka.
Ae := eval s(A, ct, A->a)b. Si := Si w { < X--->aAe.13, k, It>l<X-->a.AI3, k, It> in Sf }3.
ScannerIf s = < A-->a.Xi+ll3, f, 8>(i.e., s not final and Xi+l the next input symbol)Si+l := Si+l t..) { < X--->aXi+l.~, f 8> }end;If Si+l is empty, reject and terminateend;If <?~S\[S.al  .....
S.an\]_l_., 0, ?k> in Sn+l, accept.Extension of Earley's Algorithm forS-attr ibuted GrammarsThe states in the algorithm are attributed as indicatedabove.
For example, the symbol A in the state<A--gao, f, 8> input to the Completer could be shownmore explicitly as A=A\[A.al .
.
.
.
.
A.an\].
As the stateenters the completer, the attribute occurrences A.ai of Aare unevaluated; however, since the grammar isS-attributed it is easy to show that the attributeoccurrences on the right-hand side a of the productionhave already been evaluated.
Hence, evaluation of theattribute occurrences of A reduces to application of theattribution associated with the production A ->a,according to the attribute values in a .
This is done bythe function eval_s(A, ct, A---~ot), which returns theattributed symbol Ae, identical to A, except that itsattribute occurrences have been evaluated, as required.The last state set generated by the algorithm containsfinal states of the form <?-->S\[ ...\] .1_., 0, -l-k>, inwhich the attributed start symbol S\[ ...\] is alreadyevaluated.
Here the extended algorithm differs formEarley's; whereas the original algorithm generates atmost one final state, regardless of the ambiguity of theunderlying grammar, the extended algorithm maygenerate several instances of this state, if the grammar isambiguous.
Each instance of the final state correspondsto a different derivation of the initial symbol, leading toa different evaluation of the symbors attributes.4.
F in i te Par t i t ion ing  o f  A t t r ibute  DomainsThe last remark in the extension of section 3 shows adefect of the Extended Algorithm: It may not terminatein the general case.
For the S-attributed case, however,this may happen only if the underlying rammar is~nfinitely ambiguous or, equivalently, if it has cyclesOr derivations of the form A~+A,  for some A~ N.Consider, for example, the following grammar, which,measures" the length of each derivation of the solestring 'a' it generates:S--cA S.v <--- A.vA--~A A0.ve-- A 1.v +1A-->a A.ve-  1Given the input string 'a', the algorithm defines threeattributted slate sets:SO = {<?~-->.S\[v\]_L, 0, _l_k>, <S\[v\]-->-A\[ v\], 0, .l_k>,<A\[v\]-->.a, 0, ?k>, <A\[ v\]-->.A\[v\], 0, d-k> }S 1 = {<A-->a., 0, ?k>,<S\[v\]--~A\[ 1\]., 0, ?k>, <A\[v\]-->A\[1 \].,0, _l_k>.<~->S\[ 1\]-?, O, ?k><S\[v\]-->A.\[2\], 0, j k>, <A\[vl-->A\[2\]-, 0, j.k>,ad infinitum ... }$2 = {<?-->S\[ I ]_L., 0, _Lk>,<?-->S\[2\].L-, 0, ?k>,ad infinitum ...}Since S1 is infinite, the algorithm does not terminate.Cyclic grammars play an important role in most recentlinguistic theories, including Government-binding (GB),LexicaI-Functional Grammar (LFG) and GPSG (cf.Bcrwick, 1988; Con'ca, 1987b; Kornai and Pullum,1990).
These have in common that they have shiftedfrom rule-based escriptions of language, to declarativeorprinciple-based escriptions, in which the role ofphrase structure rules or principles is relatively minor.Thus, to make the extension of the algorithm useful fornatural anguage applications it becomes necessary toensure its termination, in spite of cyclic bases.- 301  -The termination of the Extended Algorithm may beguaranteed while maintaining its full generality, througha finite partition on the attribute domains associatedwith each cyclic symbol in the grammar.
For each suchdomain dom (a), the partition defines a finite collectionof equivalence classes on attribute values.
Now, beforeadding a new state <A--~a'l~, f ~i> to a state set Si, wetest for equivalence (according to the defined partitions)rather than equality to some previously added state; ifthe new state is equivalent to some other, it is notadded.
It is easy to show that the number of attributeddotted items in the grammar, and hence the size of thestate sets, is now finite.
This number is in factidentical to that of Earley's algorithm, except for aconstant multiplicative factor, dependent on thegrammar and the size of the partitions elected forattribute domains.
Since the size of the state setspossible with finite partitioning is now finite, thealgorithm always terminates.After establishing a correspondence b tween attributeand unification grammar (UG), we may see that thetechnique of "restriction" used by Shieber (1985) in hisextended algorithm is related to finite partitioning onattribute domains, in fact a particular case which takesadvantage of the more structured attribute domains ofUG.
For attribute grammar, given that the domainsinvolved are more general (e.g., the integers), finitepartitioning is the required evice.5.
Conclusions and Implementalion StatusThis paper presented and extension of Earley's algorithmto S-attributed grammars.
Combining on-line semanticevaluation with the execution of syntactic actions, thealgorithm is an effective realization of attribute-directedparsing, as proposed by Watt (1980) and Jones andMadsen (1980).
Although the algorithm is a recognizer,it computes the semantic values associated with eachderivation of the input string, and hence need not beextended to compute tree representations.
In attributegrammars with conditions on productions, the values ofattributes already evaluated unay be used to guide theparsing process, reducing the number of states!
that maybe generated by the algorithm.The extension of the algorithm has been written in "C",using an efficient "C" implementation f Earley'soriginal algorithm (Chamorro and Correa, 1990), and iscurrently being tested on small grammars.
The extendedalgorithm will be the kernel of ANDES-l, aprogramming environment for attribute grammars,intended for natural language applications.ReferencesBerwick, Robert.
1988.
"Principlerbased Parsing".
MITA.I.
Memo 972, revised.
MIT, Cambridge, MA.Bochmann, Gregor.
1976.
"Semantic Evaluation fromLeft to Right."
Communications of the ACM , Vol.19, No.
2, p. 55-62.Chamorro, Miriam, and N. Correa.
1990.
"An Efficient'C' Implementation f Earley's Algorithm" - in Spanish.CIFI, Universidad e los Andes, Bogot,5, Colombia.Correa, Nelson.
1987a.
"An Attribute GrammarImplementation of Government-binding Theory.
"Proceedings of the 25th Annual Meeting of the ACL,Stanford University, Stanford, CA.Correa, Nelson.
1987b.
"Empty Categories, ChainBinding, and Parsing."
Parsing Seminar; MIT WorkingPapers of the Lexicon Project, MIT, Cambridge, MA.Correa, Nelson.
Forthcoming.
Attribute andUnification Grammar: A Review of Formalisms andComparision.
CIFI, Universidad e los Andes.Earley, Jay.
1970.
"An Efficient Context-free ParsingAlgorithm."
Communications of the ACM , VoL 13,No.
2, p. 94-102.Fu, K.S.
1982.
Syntactic Pattern Recognition.Academic Press, New York.Jones, Neii D., and M. Madsen.
1980.
"AttributeInfluenced LR Parsing."
In N. D. Jones, ed.,Semantics-directed Compiler Generation , LNCS 94.Springer-Verlag, New York.Kay, Martin.
1985.
Parsing in Functional UnificationGrammar.
In D. Dowty, L. Karttunen, and A.
Zwicky,eds., Natural Language Parsing, Cambridge UniversityPress, Cambridge, England.King, Margaret, ed.
1983.
Natural Language Parsing.Academic Press, New York.
:Knuth, Donald.
1968.
"Semantics of Context-freeLanguages."
Mathematical Systems Theory, Vol.
2,No.
2, p. 127-145.Kornai, Andras, and G. Puilum, 1990.
"The X-barTheory of Phrase Structure."
Language, Vol.
66.Pereira, Fernando, and D. H. Warren.
1983.
"Parsingas Deduction."
Proceedings of the 21st Annual Meetingof the ACL , MIT, Cambridge, MA.Shieber, Stuart.
1985.
"Using Restriction to ExtendParsing Algorithms for Complex-Feature-BasedFormalisms."
Proceedings of the 23rd Annual Meetingof the ACL, University of Chicago, Chicago, IL.Shieber, Stuart.
1986.
An Introduction to UnificationBased Approaches to Grammar.
CSLI Lecture NotesNo.
4, Stanford, CA.Watt, David.
1980.
"Rule Splitting and AttributeDirected Parsing."
In N.D.Jones, ed., Semantics-directedCompiler Generation, LNCS 94.
Springer-Verlag, NY.Yellin, Daniel.
1988.
"Generalized Attributed Parsing.
"Manuscript; IBM Research, Yorktown Heights, NY.- 302 -
