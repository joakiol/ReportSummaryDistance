CONTROLLED ACT IVE  PROCEDURES AS  A TOOL FOR L INGUIST IC  ENGINEERINGHeinz-Dirk LuckhardtManfred ThielSonderforschungsbereich i00"Elektronische Spraohforschung"Universitat des SaarlandesD-6600 Saarbr~cken iiBundesrepublik DeutschlandAbst ractCont ro l led  act ive procedures  are productionsthat are grouped under and activated by units called'scouts'.
Scouts are controlled by units called'missions', which also select relevant sections fromthe data structure for rule application.
Followingthe problem reduction method, the parsing problem issubdivided into ever smaller subproblems, each oneof which is represented by a mission.
The elementaryproblems are represented by scouts.
The CAP grammarformalism is based on experience gained with naturallanguage (NL) analysis and translation by computerin the Sonderforschungsbereich I00 at the Universityof Saarbrdcken over the past twelve years and dic-tated by the wish to develop an efficient parser forrandom NL texts on a sound theoretical basis.
Theidea has ripened in discussions with colleagues fromthe EUROTRA-project and is based on what Heinz-Die-ter Maas has developed in the framework of the SUSY-II system.In the present paper, CAP is introduced as ameans of linguistic engineering (cf.
Simmons 1985),which covers aspects like rule writing, parsingstrategies, syntactic and semantic representation ofmeaning, representation of lexical knowledge etc.Survey of  some ideas behind CAPThe data structure used in CAP is a type of chartcalled S-graph (see Maas 1985).
Charts are used inparsing quite frequently (cf.
Kay 1977, Varile1983).
The S-graph is an acyclic directed graph withexactly one start node and one end node.
Each arccarries non-structural information and may carrystructural information that is also represented asan S-graph.
The non-structural information is a setof property/value-pairs called 'decoration'.
It in-cludesa) a morDhosvntactic t_vpe (MS), i.e.
the terminalor  non-terminal categoryb) a surface-syntactic function (SF)c) a~\]9_e~nt~ctic function (DSF)d) a semantic relation (SR)e) a W~i.C~f) information specific to an MSThe structure of the complex NP 'trouble withMax' is visible to the user as Fig.
i.trouble NPwith MaxFig.
1NPnl o ................ o n2\[!
N NPO ....... O ... .
.
.
Otrouble !\[ PRP No ..... o ...... oFig.
2 with MaxIf we interpret the nodes as arcs, we receive theS-graph representation (Fig.
2).
Hence, we shall use'node' and 'arc' as synonyms.
The ambiguity of'trouble with Max' is represented by a sequence oftwo NP-arcs that also goes from nl to n2.Much like most modern grammar theories (LFG, GPSGetc.
), the CAP-concept is based on context-freerules.
CAP differs from these theories in the waywell-known problems of cf-grammars are dealt with.Where GPSG employs meta-rules, derived categories,and the ID/LP-formalism, LFG uses different struc-tural concepts (C- and F-structures) and - above all- lexical knowledge.
LFG and GPSG are augmented PS-grammars.
With CAP PS-grammar has been abandoned.This is due to the fact that PS-grammars implystrict word order, and non-standard word order canonly be handled by means of transformations (TG) orderived categories/new formalisms (GPSG).In principle, in CAP constituents are acceptedwhere they are found in natural language utterances.It is assumed more natural to accept and representthe constituents 'wen' (whom) and 'du' (you) in 'Wenliebst du?'
(Who(m) do you love?)
in their respec-tive positions as accusative and nominative objectthan to mark the gaps in the representation wherethose constituents 'ought' to appear or to move themto their standard position and to leave a trace inthe original \[.,lace.LFG and GPSG do not use transformations.
In CAPtransformations are possible, but they serve otherpurposes than in TG.
They are not employed to ac-count for structures that are not covered bystandard PS-rules (the ID/LP-formalism was inventedfor that reason).
On the one hand, transformationsserve to 'normalise' certain surface structures, inorder to make rule writing easier (cf.
Luckhardt1986).
On the other hand, they produce the deepstructure necessary for the disambiguation of lex-emes and for other purposes of machine translation,e.g.
by re-introducing deleted complements.Unlike the government-and-binding theory, CAPmoves constituents only in those cases, where thismovement can be achieved without damage to represen-tation without leaving a trace.
E.g.
in '... lastetdem Angeklagten das Verbreohen an.'
(... charges thedefendant with the crime.)
the verbal prefix 'an' ismoved to the left of 'lastet', so that the correctframe (i.e.
the frame of 'anlasten' which requires anew dictionary look-up) can be used for assigningsyntactic functions to the complements.
TG-typicaltransformations like passive transformations are notemployed, as the equivalent can be achieved by sim-ple feature assignment.In all, the CAP-parser for German (CAP-G) that iscurrently being developed may be regarded as astrictly controlled production system, where rule464application is controlled in two respects:a) 'missions' have to fulfil certain linguistictasks.
They are organised hierarchically, sothat the higher missions may be said to be de-composed into partial (simpler) tasks (cf.
Fig.3).
Thus the parsing strategy can be formulatedquite explicitly.
For every mission ~i 'expecta-tion' maybe formulated that allows it to selectparts of the database that look 'promising' forthe application of certain rules.
The mode ofapplication (see below) can be determined by thelinguist.Fig.
3 NP-MISSIONSIMPLE-NP COMPLEX-NPAP-MISSION N=>NPAI~NP=>NPA%TRIB~I~S COORDINATIONb) If a linguistic task cannot be subdivided anyfurther, a 'scout', that represents such an ele-mentary task, selects a path from the datastructure offered, i.e.
an unambiguous sequenceof arcs, and tries to apply a rule or set ofrules to this path.
The grouping of rules intolarger units has also been pro~msed by Carter-/Freiling 1984 and others.This way of organising rules safeguards that t1~rule writer is relieved of looking at parallelstructures.
Rules can be simple, since featureagreement m6~ be checked in missions and scouts sothat rules may be kept general enough to be used indifferent places, i.e.
in different scouts.
Thelinguist can be quite sure his rules are applied theway he wants t1~m to and to the structures intended.In fact, certain rules would be quite harmful, ifthey were al lowed to operate on arbitrary struc-tures.
Rules ought to be perspicuous, but we thinkthey cannot always be as simple as theoreticallinguists would like them to be.The application of cf-rules such as NP+PRED=>PREDmay be subject to a number of restrictions.
Earlierexperience with SUSY has shown that X ~(cf.
below) is a good basis for such a strategy,e.g.
:PRED + NP1 => PRED (NPI) / condition:NPI may fill a slotin the valency frame of PREDAfter the application of such rules the corre-sponding valency is deleted; these rules are appliedin parallel and by iteration.
They are based on whatDowty (cf.
Dowty 1982) calls the 'grammatical rela-tions principle'.CAP rules are augmented, i.e.
they are not juststructure-building rules like the ones above, butcontain also conditions for their application, for-mulated for the left-hand side, and assignments tothe symbols on the right-hand side (see below).
Thisapproach, of course, is not new and has been takenin METAL, PATR-II, LIFER, DIAGRAM, and many othersystems.
The way conditions and assignments are for-mulated is described below.CAP possesses strong lexical and morphologicalcomponents.
'?hese stem from its predecessor and arebelieved to be a prereouisite for efficient parsingrather than a part of the parsing J ~Dependency grammar offers a secure foundation forthe arknlysis of free-word-order languages like Ger-man or Russian and by no means impedes the analysisof languages like English or French, as has alreadybeen demonstrated with the SUSY MT system in the70's (cf.
Luckhardt/Maa~:~Thiel 1984)o Moreover, forthe sake of easier rule writing, it is helpful torepresent all arguments of a predicate as sisternodes of each other and as sister nodes of the pred-icate's governor.
This approach supports frame-oriented linguistic procedures (e.g.
for the anal-ysis of complements and complement clauses, trans-lation of valency-bound constituents etc.)
in adirect way, whereas the representation of such phe-nomena is not so natural in a phrase structure nota-tion.Rules, scouts, and missionsCAP rules, scouts, and missions are written in afunctional metalanguage (FUSL, cf.
Bauer et al1986).
There are five types of rules according tothe effect they have:blending rule: A + B => Cstart rule: A => X (A)right ex~insion: A (X) + B => A (X + B)left expansion: A + B (X) => B (A + X)concatenati~\]: A + B => X (A + B)A blending rule may be employed where a constit-uent structure does not have to be preserved, as in:AUX+PTC => FIV for: 'was' + 'treated' =>treat (TENSE=PAS~; MS=FINITE VERB, VOICE=PASS)AUX 4- INP => FIV for: 'will' + 'treat' =>treat (~NSE=FUT etc.
)C!
!!
!!
!O .
.
.
.
.
O .
.
.
.
.
.
O => O .
.
.
.
.
.
.
O .
.
.
.
.
.
.
OA B A B Fig.
5The assignment part of such rules, of course, hasto furnish the new arc on the right-hand side withthe respectiw~ property/value pairs (cf.
brackets)?The effect of A + B => C is demonstrated in l!qg.
5.The arcs A and B remain intact and may be used byother rules.
Thus a quasi-parallel processing isguaranteed.
In cases of non-aii~oiguous structures, Aand B may be deleted explicitly in the scout thatinvokes the rule.!
!
X !
: o .
.
.
.
o ,!
A '  !0 .
.
.
.
.
.
.
.
0 => 0 .
.
.
.
.
.
.
.
.
.
.
.
0A A Fig.
6A start rule is employed where a non-terminal arcis constructed from a terminal.
A => X ( A ) meansthat a new arc X is produced with A as its substruc-ture which spans the same part of the data structureas does A, cf.
Fig.
6.465An expansion rule adds an arc as a sister arc tothe substructure X of another arc.
A (X) + B =>A (X + B) has as a result the structure representedin Fig.
7.Fig.
7O .
.
.
.
.
.
.
.
O .
.
.
.
.
.
.
.
O!
A B!O .
.
.
.
.
.
.
.
.
OX=>!
!
A !!
!
!
: o -  .
.
.
.
o .
.
.
.
.
.
o !!
X B io .......... o ....... o!
A B!O .
.
.
.
.
.
.
.
OXA + B (Z) => B (A + X) is employed analogously.Concatenation rules are used to express coordina-tion:NP + COMMA + NP = NEWNP (NP + COMMA + NP)N%~ + CONJ + NP = NEWNP (NP + CONJ + NP)These ru\].es produce deep structures.
For 'Peter,Mary and John' the structure in Fig.
8 is generated.Fig.
8NEWNPNP COMMA NEWNP'Peter' NP CONJ NPI I'Mary' 'John'CAP rules have the architecture given in Fig.
9.r~\]le RULENAMElhs <left-hand side>conditions <restrictions on lhs>rhs <right-hand side>assigrm~ents <assignments to rhs>end Fig.
9The conditions part may be empty.
It allows navi-gation in the processed subchart and a variety ofrestrictions by means of logical expressions.
Thisis also true for the assignments part, which, how-ever, must be Don-empty.
An example is given inFig.
9a.rule PREO+SUBJ Fig.
9alhs X + Yconditions eq (MS of X, PRED)eq (MS of Y, NP)notempty (int (FRAME of X,SCASE of Y,<NO~>)note.ioty (int (PERNUM of X,PERNUM of Y))rhs Z ( subX + Y )assignments copydec (Z, X)assign (SF of Y', SUBJECT)assign (FRAME of X,rain (FRAME of X, <NOM>)assign (SCASE of Y, <NOM>)endTwo neighbouring arcs X and Y are expected, Xbeing a PRED, Y an NP.
The FRAME of X is to includeNOMinative, which also has to be one of the cases ofY.
The PERNUM feature structures for person and num-ber have to agree.
The newly created arc Z that466covers the substructure of X plus the nounphrase Yinherits all property/value-pairs from X.
The (sur-face-)syntactic function SUBJECT is assigned to thenew arc Y' which is a copy of Y.
The NOMinative-slotis deleted from the FRAME of X. Y is given the unam-biguous surface case NOMinative.The system of missions and scouts guarantees thatPRED+SUBJ  is invoked, when the chart consists ofPREDs and NPs, i.e.
when the S IMPLE-STRUCTURES-mis-sion has turned terminal elements into simple non-terminal ones (e.g.
FIV=>PRED, DET+N=>NP etc.)?
Byiteration, the output of PRED+SUBJ  is used to attachthe rest of the complements (by rules like PRED+DAT,PRED+PRPOBJ,AKK+PREDetc.
).Rules are grouped under and activated by what wecall 'scouts'.
A scout selects those paths (= unam-biguous sequences of arcs) from the S-graph to whichthe rules of the scout may be applied.
The modes ofapplication are:parallel: all rules are applied to the same structurestratificational: one rule is applied after the other(stop after failurepreferential: stop after successiterat\]ve: repeat after successThe architecture of scouts is given in Fig.
i0.scout SCOUTNAMEconditions< path with conditions on arcs >use ru\]e RULE1use rule RULEnparams <mode of application>options <further options>end Fig.
i0<path> is a sequence of normally not more thanfour arcs each of which is described in the <condi-tions on arcs> part (cf.
Fig.
10a).conditions Fig.
10aarc 1 (X , mender (MS of X ,<ART-DEF,ART-INDEF,DEM, POSP, IND>))arc 2 (Y , equal (MS of Y , N))Here two neighbouring arcs X and Y are described,'x' and 'Y' being names used only by this scout.
Themorphosyntactic category (MS) of X must be a men~oerof the set in angled brackets, the MS of Y mustequal N. The scout selects all sequences ART-DEF +N, ART- INDEF + N etc.
one after the other from thedatabase offered by a mission (see below) and triesto apply its rules to them.
The angled bracketsenclose the set of determiner types that are thoughtto be relevant here (def.
art., indef, art., dem.pronoun, poss.
pronoun, indef, pronoun) and that maybe combined with a noun to form an NP.
Other scoutsselect paths like PREP + N, PREP + AP + N etc.
Theyall have to be dealt with in different scouts, asthe conditions for unifying them into an NP and thevalues the NP's inherit are quite different.Scouts are controlled by 'missions'.
The systemof rules, scouts, and missions presents the controlstructure of the parser (cf.
example in Fig.
12).The elementary tasks of the parsing mission are or-ganised as scouts that activate those (sets of)rules that are to be applied to fulfil the intendedtask.
The linguists are free to choose the strategythey like according to the field they intend to cov-er.
The modes of application are the same as above.The architecture of missions is given in Fig.
ii.mission MISSIONNAME Fig.
iiexpectations left-contextscope <active area>right-contextsubproblems solve (subproblem i)solve (...)solve (subproblem n)parametersgoal <goal structure>endmission PARSE-GERMAN Fig.
12mission S IMPLE-STR~Sscout N=>NPrule N=>NPscout DET+ADJ+N=>NPrule ARTD+ADJ+Nrule ARTI+ADJ+Nrule POSP+AIXT+Nmission COMPLEX~UCIIFRESn~ssion COMPLEX_NPSmission ATTRIBUTEsmission G EN I T IVE_ATI~R IB L~I~E.
.
.. , .endA mission consists of a list of submissions orscouts that are applied in the mode <mode>, if cer-tain 'expectations' (=preconditions) are fulfilled.The expectations part may be empty, so that thescouts may operate on the complete database.
A well-defined structure may be formulated as the 'goal' ofthe mission.
The expectations part describes asection of the S-graph where the scouts of that mis-sion may be successful, i.e.
this section with allits ambiguities (= parallel arcs) is taken from thedatabase and handed over to the scouts.
An exampleis given in Fig.
13.expectations Fig.
13scope first (X , equal (MS of X , FIV))mid (Y , member (MS of Y , <NP, AP>))last (Z , equal (MS of Z , VERBPREFIX))right-context (R , member (MS of R ,<SEN, COMMA, NKO, SEM>) )The part of the database between the nodes nl andn2 (cf.
Fig.
14) is selected with all parallelstructures, 'das Rauchen' being analysed as 'defi-nite article + noun' (in one NP) and as 'personalpronoun + noun' (in two NP's).
The expectation is tobe read as follows: The first arc must be marked'finite verb', the last one 'detached verbal pre-fix'.
Between them one or more NP's and/or AP's (ad-jective phrases) in arbitrary distribution are ex-pected.
A full stop, comma, coordinating conjunc-tion, or se./colon must be the right neighbour of Z,i.e.
the arc left of n2.
If these expectations arefulfilled, the partial S-graph that begins with Xand ends with Z including all parallel arcs is acti-vated for the scouts of that mission.
These expec-tations are so explicit, because in this way struc-tures may ~.~ disambiguated quite safely.
In German,most verbal prefixes may also he prepositions, cf.
(i) and (2).
(i) Er gibt das Raucl~n ~.
(He giw~s up smoking.
)(2) Er gibt ein Konzert ~IL\[ der Gitarre.
(He gives a concert on the guitar.
)The expectations described exactly fit for (I),but not for (2), and the mission activates the data-base accordingly.I !
NP  !\[ o----o ......... O !!
ART N \[nl o ....... o ...... o ............. o ....... o n2gibt !
das !
Rauchen !
auf!
!
!.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
!NP  !
NP!
!o .... o o .......... oFig.
14 PRDN NThe scouts used for the analysis of detachedverbal prefixes are the fol\]ow~\]g:solve RIGHT-EXPANSIONsolve PRE\[~VZ SThe first scout increments the predicate in thepartial database between nl and n2 until all NP'sbetween the predicate and the verbal prefix are inthe predicate's substructure, and the second scoutconcatenates verb and verbal prefix.
The completemission will look like Fig.
15.A different approach to this problem is 'normal-!sat!on' mentioned above, where the verbal prefix ismoved to the finite verb in the first place.mission P~J~SE-VERBAL-PREFIXES: Fig.
15expectationsscope first (X, equal (MS of X, FIV)mid (Y, member (MS of Y, <NP,AP>)last (Z, equal (MS of Z, VERBPREFIX)right--context (R, n~mber (MS of R,<SEN, COMMA, CONJ, SEM>) )subproblen~ solve (RIGHT-EXPANSION)solve (PRED+VZ S)goal (G, equal (MS of G, PRED))endFeature  propagat ionWhen building syntactic structures, a parsertransports features between nodes.
In many moderngrammar theories and formalisms this transport isachieved by unification (cf?
Shieber 1985, Karttunen1984, Kay 1984).
For a nulnber of reasons unificationhas no place in the CAP-concept (cf.
Luckhardt1986a).
Unification was introduced as a simple in-strument, which in fact has to achieve a very com-plex task.
Feature propagation is too complex to beachieved by simple unification, and if the effect ofunification is differentiated, it looses its ele-gance.In a rule like 'DET+ADJ+N=>NP' it has to bestated which features are inherited by the NP, i.e.ADJ and N may have a feature FRAME, but only that of467the N may be propagated.
The same seems to be truefor the semantic class.A difference has to be made between selective(FRAME) and inherent features (CASE).
Karttunen(1984) gives an example where by unifying 'I(CASE=NOM)' and 'do' the feature CASE=NOM is inher-ited by the new predicate 'I do (CASE=NOM)' which isnot really desirable.
There are more cases whereunification leads to undesirable feature propaga-tion.Especially in coordination features have to bematched explicitly which, perhaps, is not so obviousfor English.
The structures in Fig.
16 (out of thehouse and across the street) have to be unifiedwithout PCASE and CASE having to match.
In Fig.
\]7(from the conduct of Eva and her husband), however,the CASE-values have to match, in order to preventthe coordination of 'aus dem Verhalten' and 'ihresMarules', and PCASE=AUS is inherited by the new NP.aus dem Haus und fiber die Strag.e Fig.
16o ............... o ...... o ................... oPCASE=AUS PCASE=UBERCASE=DAT CASE=AKKaus dem Verhalten und ihres Mannes Fig.
170 .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
0 .
.
.
.
.
0 .
.
.
.
.
.
.
.
.
.
.
.
.
.
0!
PCASE=AUS CASE=GEN!
CASE=DAT!
ErasO .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
OC~E=GENSF=GEN-ATI~Only those features can be unified that are car-tied by at least one of the constituents, so that itis not easy to introduce features during the parsingmission, which is desirable in certain cases (cf.Luckbardt 1986a).
On the other hand, it seems impos-sible to get rid of features that are no longerused, like the INFL-feature (after the agreementbetween the elements of an NP has been checked).In CAP, the effect of unification is achieved byan operation that consists of a test and an actionusing FUSL-functions likeeq (NUMBER of X, ~ER of Y)int (FRAME of X, SCASE of Y)n~mber (MS of X, <ARTD,ARTI,POSP,DEM, IND>assign (SF of Y, SUBJECT)Thus explicit comparison, creation, deletion, andpropagation of features is possible.C o n c l u s i o nCAP has to be seen in the context of automaticanalysis and translation of natural language.
Itcommands a formalism that makes it suitable for thedevelopment of efficient parsers by allowing for ex-tensive means to represent linguistic knowledgestrategies for its use.
The way these aspects inter-act is currently being formalised by Thiel in hisNLPT (Natural Language Processing Theory, cf.
Thiel1985).The underlying data structure is the S-graph,which allows the management of all kinds of ambigui-468ties; moreover, the software system makes it unnec-essary for the linguist/user explicitly to takecare of ambiguities.
Thus he/she may write ruleswithout worrying about parallel structures, as his-/her view of the data structure is a simple tree orsequence of trees.
There are methods, however, forindicating preference to certain structures overothers.Underlying linguistic features such as rule aug-mentation, feature propagation, lexicalisation etc.that are known from GPSG, FUG, LFG etc.
have beenextended to cover more phenomena, espec~ally thoseencountered when parsing German.
They are used in away that allows the analysis of random samples oftext in comparably short time.Some special applications of CAP are-normalisation: removal of idiosyncrasies andtreatment of constructions that are notorious forthe problems they present (discontinous verb formsparentheses, etc.
)- formalisation of the complex agreement conditionson Gern~n NP's, treatment of free word order- coping with complex forms of coordination- controlled inheritance of features- giving t|~ linguist the opportunity of determiningthe grade of featurisation and the depth of re-presentationReferencesBauer, M., Licher, V., Luckhardt, H.-D., Sch~fer,Th., Schworm, C., Thiel, M. (1985).
FUSL - einefunkticnale Sprache zur Repr~sentation lingui-stischen Winsens und l~t i sc l~er  Strateg~m.Linguistische Arbeiten des SFB i00 Neue Folge,Heft \]6.
Saarbr0cken: Universit~t des SaarlandesCarter, A.W., Freiling, M.J. (1984).
SimplifyingDeterministic Parsing.
In: Proceedings ofColing 1984, 239-242Dowty, D. (1982).
Grammatical Relations and MontagueGrammar.
In: P. Jacobson, G.K. Pullum (eds.
).The Nature of Syntactic Representatio~ Dord-recht: ReidelKarttunen, L. (1984).
Features and Values.
In: Pro-ceedings of Coling 1984Kay, M. (1977).
Morphological and syntact i c  analy-sis.
In: A. Zampolli (ed., 1977).
LinguisticStructures Processing.
Amsterdam: North-Holland- (1984).
Functional Unification Grammar: a Forma-lism for Machine TranslatiorL In: Proceedings ofColing 1984Luckhardt, H.-D. (1985).
Parsing with ControlledActive Procedures.
CL-Report No.
2.
Saarbr?1cken:Universit~t des Saarlandes: SFB 100- (1985a).
Valenz ~d Tiefenkasus in der Maschinel-len Ubersetzung.
CL-Report No.
4.
Saarbr0cken:Universit6t des Saarlandes: SFB 100- (1985b).
Kontrollierte M~chti~eit: Regeln in CAP.CL-Report No.
8.
Saarbr0cken: Universit6t desSaarlandes: SFB 100- (1986).
Normalisierung deutscher Oberflachenstruk-taren \[nit controlled active procedures.
CL-Re-port I0.
Saarbr0cken: Universit~t des Saarlan-des: SFB 100- (1986a).
Vererbung yon Merkmalen mit controlledactive prooedures.
CL-Report No ii.
Saarbr~cken:UniversitAt des Saarlandes: SFB I00Luckhardt, H.-D., Maas, H.-D., Thiel, M. (1984).
TheSUSY-E Machine Translation System.
Working Pa-per.
Saarbr\[,cken: Universit~t des Saarlandes:SFB I00/A2Maas, H.-D. (1984).
Struktur und Steuerung der lin-guistischen Prozesse in SUSY-II.
In: U.
Klenk(ed., 1985).
Kontextfreie Syntaxen und verwandteSysteme.
Linguistische Arbeiten.
Tdbingen: Nie-meyer-(1985).
SUSY-II-Handbuch.
Linguistische Arbeitendes SFB 100 Neue Folge, Heft 14.
SaarbrQcken:Universit6t des SaarlandesShieber, St. M. (1985).
An Introduction to Unifica-tion-Based Approaches to Grammar.
Presented as aTutorial Session at the 23rd Am.
Meeting of theAss.
f. Comp.
Ling., July 1985Simmons, R.F.
(1985).
Technologies for MachineTranslation.
In: Proceedings of the Int.
Sympo-sium on MT, Tokyo, 14th Oct 1985Thiel, M. (1985).
Eine konzeptionelle Basis ffir na-tfirlic|k~prachliche Systeme.
Paper for the GLDV-Jahrestagung \]985, Hannover.
Working Paper,Saarbr0cken: Universit~t des Saarlandes- (1985a, forthcoming).
Weighted Parsing.
In: L.Bolc (ed.).
Natural Language Parsing Systems.Varile, N. (1983).
Charts: A Data Structure forParsing.
In: M. King (ed.).
Parsing NaturalLanguage.
London: AcademicWinograd, T. (1983).
Language as a Cognitive Pro-cess.
Reading, Mass.
: Addison-Wesley P.C.469
