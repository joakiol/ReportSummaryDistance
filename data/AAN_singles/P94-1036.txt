Mul t i se t -Va lued  Linear Index  Grammars :Impos ing  Dominance  Const ra ints  on Der ivat ionsAbst ractThis paper defines multiset-valued linear index gram-mar and unordered vector grammar with dominancelinks.
The former models certain uses of multiset-valued feature structures in unification-based for-malisms, while the latter is motivated by word ordervariation and by "quasi-trees", a generalization of trees.The two formalisms are weakly equivalent, and an im-portant subset is at most context-sensitive and polyno-mially parsable.In t roduct ionEarly attempts to use context-free grammars (CFGs) asa mathematical model for natural anguage syntax havelargely been abandoned; it has been shown that (un-der standard assumptions concerning the recursive na-ture of clausal embedding) the cross-serial dependenciesfound in Swiss German cannot be generated by a CFG(Shieber, 1985).
Several mathematical models havebeen proposed which extend the formal power of CFGs,while still maintaining the formal properties that makeCFGs attractive formalisms for formal and computa-tional linguists, in particular, polynomial parsabilityand restricted weak generative capacity.
These mathe-matical models include tree adjoining grammar (TAG)(Joshi et al, 1975; Joshi, 1985), head grammar (Pollard,1984), combinatory categorial grammar (CCG) (Steed-man, 1985), and linear index grammar (LIG) (Gaz-dar, 1988).
These formalisms have been shown to beweakly equivalent to each other (Vijay-Shanker et al,1987; Vijay-Shanker and Weir, 1994); we will refer tothem as "LIG-equivalent formalisms".
LIG is a vari-ant of index grammar (IG) (Aho, 1968).
Like CFG, IGis a context-free string rewriting system, except thatthe nonterminal symbols in a CFG are augmented withstacks of index symbols.
The rewrite rules push or popindices from the index stack.
In an IG, the index stackis copied to all nonterminal symbols on the right-handside of a rule.
In a LIG, the stack is copied to exactlyone right-hand side nonterminal.
11Note that a LIG is not an IG that is linear (i.e., whoseproductions have at most one nonterminal on the right-handOwen RambowUnivesit@ Par is  7UFR L ingu is t ique,  TALANACase 7003, 2, P lace  Juss ieuF-75251 Par is  Cedex  05, F rancerambow?linguist, j ussieu, frWhile LIG-equivalent formalisms have been shown toprovide adequate formal power for a wide range of lin-guistic phenomena (including the aforementioned SwissGerman construction), the need for other mathemati-cal formalisms has arisen in several unrelated areas.
Inthis paper, we discuss three such cases.
First, captur-ing several semantic and syntactic issues in unification-based formalisms leads to the use of multiset-valuedfeature structures.
Second, word order facts from lan-guages uch as German, Russian, or Turkish cannot bederived by LIG-equivalent formalisms.
Third, a gener-alization of trees to "quasi-trees" (Vijay-Shanker, 1992)in the spirit of D-Theory (Marcus et al, 1983) leadsto the definition of a new formal system.
In this pa-per, we introduce two new equivalent mathematical for-malisms which provide adequate descriptions for thesethree phenomena.The paper is structured as follows.
First, we presentthe three phenomena in more detail.
We then introducemultiset-valued LIG and present some formal proper-ties.
Thereafter, we introduce a second rewriting sys-tem and show that it is weakly equivalent to the LIGvariant.
We then briefly mention some related for-malisms.
We conclude with a brief summary.Three  Prob lems fo r  L IG-Equ iva lentFormal i smsThe three problems we present are of a rather differ-ent nature.
The first arises from the way a linguis-tic problem is treated in a specific type of framework(unification-based formalisms).
The second problemderives directly from linguistic data.
The third prob-lem is a formalism which has been motivated on in-dependent, methodological grounds, but whose formalproperties are unknown.Mult iset-Valued Feature StructuresHPSG (Pollard and Sag, 1987; Pollard and Sag, 1994)uses typed feature structures as its formal basis, whichare Turing-equivalent.
However, it is not necessarilyside), but rather, it is a context-free grammar with linearindices (i.e., the indices are never copied).263the case that the full power of the system is used inthe linguistic analyses that are expressed in it.
HPSGanalyses include information about constituent struc-ture which can be represented as a context-free phrase-structure tree.
In addition, various mechanisms havebeen proposed to handle certain linguistic phenomenathat relate two nodes within this tree.
One of theseis a multiset-valued feature that is passed along thephrase-structure tree from daughter node to mothernode.
Multiset-valued features have been proposed forthe SLASH feature which handles wh-dependencies (Pol-lard and Sag, 1994, Chapter 4), and for certain semanticpurposes, including the representation of stored quan-tifiers in a mechanism similar to Cooper-storage.
An-other use may be the representation f anti-coreferenceconstraints arising from Principle C of Binding Theory(be it that of (Chomsky, 1981) or of Pollard and Sag(1992)).It is desirable to be able to assess the formal powerof such a system, for both theoretical and practicalreasons.
Theoretically, it would be interesting if itturned out that the linguistic principles formulated inHPSG naturally lead to certain restricted uses of theunification-based formalism.
Clearly this would repre-sent an important insight into the nature of grammat-ical competence.
On the practical side, formal equiv-alences can guide the building of applications uch asparsers for existing HPSG grammars.
For example, ithas been proposed that HPSG grammars can be "com-piled" into TAGs in order to obtain a computationallymore tractable system (Kasper, 1992), thus sidestep-ping the issue of building parsers for HPSG directly.However, LIG-equivalent formalisms cannot serve astargets for compilations in cases in which HPSG usesmultiset-valued feature structures.Word  Order  Var ia t ionBecket et al (1991) discuss scrambling, which is thepermutation of verbal arguments in languages uch asGerman, Korean, Japanese, Hindi, Russian, and Turk-ish.
If there are embedded clauses, scrambling in manylanguages can affect arguments of more than one verb("long-distance" scrambling).
(1) .
.
.
dab \[den Kiihlschrank\]i bisher noch.
.
.
that the refrigeratorAcc so far yetniemand \[ti zu reparieren\] versprochen hatno-onesoM to repair promised has.
.
.
that so far, no-one has promised to repair the re-frigeratorScrambling in German is "doubly unbounded" in thesense that there is no bound on the number of clauseboundaries over which an element can scramble, andan element scrambled (long-distance or not) from oneclause does not preclude the scrambling of an elementfrom another clause:(2) .
.
.
dab \[dem Kunden\]i \[den Kfihlschrank\]j. .
.
that the clientDAW the refrigeratorAccbisher noch niemand ti \[\[tj ZU reparieren\]so far yet no-oneNoM to repairzu versuchen\] versprochen hatto try promised has.
.
.
that so-far, no-one yet has promised the client torepair the refrigeratorSimilar data has been observed in the literature forother languages, for example for Finnish by Karttunen(1989).
Becker et al (1991) argue that a simple TAG(and the other LIG-equivalent formalisms) cannot de-rive the full range of scrambled sentences.
Rambow andSatta (1994) propose the use of unordered vector gram-mar (UVG) to model the data.
In UVG (Cremers andMayer, 1973), several context-free string rewriting rulesare grouped into vectors, as for verspricht 'promises':(3) ((S --+ NPnom VP), (VP -4 NPdat VP),(VP --~ Sinf V), (V ~ verspricht) )During a derivation, rules from a vector can be ap-plied in any order, and rules from different vectors callbe interleaved, but at the end, all rules from an instanceof a vector must have been used in the derivation.
Byvarying the order in which rules from different vectorsare applied, we can derive different word orders.
Ob-serve that the vector in (3) contains exactly one ter-minal symbol (the verb); grammars in which every el-ementary structure (vector in UVG, tree in TAG, rulein CFG) contains at least one terminal symbol we willcall lexicalized.Languages generated by UVG are known to becontext-sensitive and semilinear (Cremers and Mayer,1974) and polynomially parsable (Satta, 1993).
How-ever, they are not adequate for modeling natural lan-guage syntax.
In the following example, (4a) is out sincethere is no analysis in which the moved NP c-commandsits governing verb, as is the case in (4b).
(4) a.
* .
.
.
dab niemand \[dem Kundeu\] \[ti.
.
.
that no-onesoM the clientDATZU versuchen\] \[den Kiihlschrank\]j versprochento try the refrigeratorAcc promisedhat \[tj zu reparieren\]ihas to repairb.
?
.
.
.
daft niemand \[dem Kunden\] \[denKiihlschrank\]j \[ti zu versuchen\] versprochen hat\[tjzu reparieren\]iWhat is needed is an additional mechanism that en-forces a dominance relation between the sister node ofan argument and its governing verb.Quas i -T reesVijay-Shanker (1992) introduces "quasi-trees" as a gen-eralization of trees.
He starts from the observationthat the traditional definition of tree adjoining gram-264mar (TAG) is incompatible with a unification-based ap-proach because the trees of a TAG start out as fullyspecified objects, which are later modified; in particu-lar, immediate dominance relations in a tree need nothold after another tree is adjoined into it.
In order to ar-rive at a definition that is compatible with a unification-based approach, he makes three minimal assumptionsabout the nature of the objects used for the representa-tion of natural language syntax.
The first assumption(left implicit) is that these objects represent phrase-structure.
The second assumption is that they "givea sufficiently enlarged domain of locality that allowslocalization of dependencies such as subcategorization,and filler-gap" (Vijay-Shanker, 1992, p.486).
The thirdassumption is that dominance relations can be statedbetween different parts of the representation.
Theseassumptions lead Vijay-Shanker to define quasi-trees,which are partial descriptions of trees in which "quasi-nodes" (partial descriptions of nodes) are related bydominance constraints.
Each node in a traditional tree(as used in TAG) corresponds to two quasi-nodes, a topand a bottom version, such that the top dominates thebottom.There are two ways of interpreting quasi-trees: ei-ther quasi-trees can be seen as data structures in theirown right; or quasi-trees can be seen as descriptionsof trees whose denotations are sets of (regular) trees.If quasi-trees are defined as data structures, we candefine operations uch as adjunction and substitutionand notions such as "derived structure".
More pre-cisely, we define quasi-trees to be structures consistingof pairs of nodes, called quasi-nodes, such that one isthe "top" quasi-node and the other is the "bottom"quasi-node.
The top and bottom quasi-node of a pairare linked by a dominance constraint.
Bottom quasi-nodes immediately dominate top quasi-nodes of otherquasi-node pairs, and each top quasi-node is immedi-ately dominated by exactly one bottom quasi-node.
Forsimplicity, we will assume that there is only a bottomroot quasi-node (i.e., no top root quasi-node), and thatbottom frontier quasi-nodes are omitted (i.e., frontiernodes just consist of top quasi-nodes).
Furthermore,we will assume that each quasi-node has a label, andis equipped with a finite feature structure.
A samplequasi-tree is shown in Figure 1 (quasi-tree a5 of Vijay-Shanker (1992, p.488)).We follow Vijay-Shanker (1992, Section 2.5) in defin-ing substitution as the operation of forming a quasi-nodepair from a frontier node of one tree (which becomes thetop node) and the root node of another tree (which be-comes the bottom node).
As always, a dominance linkrelates the two quasi-nodes of the newly formed pair.Adjunction is not defined separately: it suffices to saythat a pair of quasi-nodes i "broken up", thus formingtwo quasi-trees.
We then perform two substitutions.Observe that nothing keeps us from breaking up morethan one pair of quasi-nodes in either of two quasi-trees,and then performing more than two substitutions (as$NP SIsNP VP1IvPV eFigure 1: Sample quasi-treelong as dominance constraints are respected); there areno operations in regular TAG that correspond to suchoperations.
We will say that a quasi-tree is derived if inall quasi-node pairs, the two quasi-nodes are equated,meaning that they have the same label and the twofeature structures are unified, and furthermore, if allfrontier quasi-nodes have terminal abels.
The stringassociated with this quasi-tree is defined in the usualway.We have now fully defined a formalism (if informally):its data structures (quasi-trees), its combination oper-ation (substitution), and the notion of derived struc-ture.
We will call this formalism Quasi-Tree Substitu-tion Grammar (QTSG).
It can easily be seen that allexamples discussed by Vijay-Shanker (1992) are deriva-tions in QTSG.
The question arises as to the formal andcomputational properties of QTSG.Mu l t i se t -Va lued  L IGIn order to find a mathematical model for certain usesof multiset-valued feature structures, discussed above,we now introduce a multiset-valued variant of LIG.
Wedenote by .A4(A) the set of multisets over the elementsof A, and we use the standard set notation to refer tothe corresponding multiset operations.Def in i t ion 1 A mul t l se t -va lued  L inear  IndexGrammar  ({}-LIG) is a 5-tuple (tiN, VT, ~,  P, S),where VN, VT, and VI are disjoint sets of terminals,non-terminals, and indices, respectively; S E VN is thestart symbol; and P is a set of productions of the fol-lowing form:p : As ) voBls lv l  .
.
.
v~- lB ,  snvnfor some n > O, A, B1 , .
.
.
,Bn  E VN, s, s l , .
.
.
, sn  mul-tisets of members of VI, and vo, .
.
., vn E V~.The derivation relation ~ for a {}-LIG is definedas follows.
Let ~,7 ?
(VN-A4(~) U VT)*, t , t l , .
.
.
, tnmultisets of members of VI, and p ?
P of the formgiven above.
Then we have~At7 ~ ~voBlt lvx ?
.. vn - lB ,  t~v~7such that t = U~=l(ti \ si)Us.
I f  G is a {}-LIG, L(G) ={w IS=Z=~c w,w ?
v4}.265Suppose we want to apply rule p to an instance ofnonterminal A with an index multiset in a sententialform.
First, we remove the indices in s from t, then werewrite the nonterminal, then we distribute the remain-ing indices freely among the newly introduced nonter-minals B1, .
.
.
,  Bn, creating new multisets, and finallywe add si to the new multiset for each Bi, creating thenew ti.The reader will have noticed, and hopefully excused,the abuse of notation in this definition, which resultsfrom mixing set-notation and string-notation.
We canalso define {}-LIG as a pure string-rewriting systemwhich does not require the definition of additional datastructures (the multisets) for the notion of "derivation"(see (Rambow, 1994)).
However, the definition pro-vided here (using an explicit representation of multi-sets) has the advantage of corresponding more directlyto the intuition underlying {}-LIG and is much easierto understand and use in proofs.
The issue is purelynotational.We now introduce a restriction on derivations, whichwill be useful later.Def in i t ion  2 A l inear ly - res t r l c ted  erivation in a{}-LIG is a derivation 0 : S ~ w with w E V~.
suchthat:I.
The number of index symbols added (and hence re-moved) during the derivation is linearly bounded byIwl.2.
The number ore-productions used during the deriva-tion is linearly bounded by Iwl.We let LR(G) = {w I there is aderivation e :S ~ w such that 0 is linearly-restricted}, and we let?R({}-LIG) = {LMG ) \[ G a {}-LIG}.
If G is a {}-LIGsuch that LR(G) = L(G), we say that G is linearlyrestricted.
Many of the results that we will show ap-ply only to linearly restricted {}-LIGs.
However, as wewill see, all linguistic applications will make use of thisrestricted version.EXAMPLE 1The following grammar derives the languageCOUNT-5, where COUNT-5 = {anbncndne  In > 0}.Let G1 = (VN, VT, VI, P, S) with:VN = {S ,A ,B ,C ,D ,E}V T = {a,b,c,d,e}?
= {s~,Sb, S~,Sd,S~}P = {PI :S  > S{Sa,Sb, Sc,Sd, S~}P2 : S ~ ABCDEP3 : A{s~} ~ Aa, P4 : A - -~ Ep5 : B{Sb } > Bb, P6 : B -----+ EpT : C{s~} ----r Cc, ps : C ~ ep9 : D{sd} > Dd, Plo : D >P l l  : E{se} ) Ee, Pl~ : E > e }A sample derivation is shown in Figure 2.This example shows that Z:({}-LIG) is not containedin/:(LIG),  since the latter cannot derive COUNT-5.
Wenow define two normal forms which will be used later.We omit the proofs and refer to (Rambow, 1994) fordetails.Def in i t ion 3 A {}-LIG G = (VN, VT, VI, P, S) is inrest r ic ted i ndex  normal  fo rm or R INF  if all pro-ductions in P are of one of the following forms 'whereA, B E VN, f E VI and a E (VTU VN)*):1.
A )ag.
A )B f3.
A I  ~BTheorem 1 For any {}-LIG, there is an equivalent{}-LIG in RINF.Def in i t ion  4 A {}-LIG G = (VN, VT, V~, P, S) is inExtended Two Form (ETF)  if every production inP has the form As --+ BlSlB~S2, As --* Bs' ,  orA -* a, where A, Bx,B2 E VN, s, sl ,s2, s' E VI*, anda E VT U {e}.Theorem 2 For any {}-LIG, there is an equivalent{}-LIG in ETF.We now discuss some formal properties of {}-LIG.For reasons of space limitation, we only sketch theproofs; full versions can be found in (Rainbow, 1994).We start with the weak generative power.
We have al-ready seen that {}-LIG can generate languages not in?
(LIG) (and hence not in ?(TAG)).
We will now showthat linearly restricted {}-LIGs are at most context-sensitive.Theorem 3 ?R({}-LIG) _C ?
(CSG).Outline of the proof.
We simulate a derivation in alinear bounded automaton.
The space needed for this isbounded linearly in the length of the input word, sincethe number of the symbols that are erased, the indexsymbols and nonterminals that rewrite to ?, is linearlybounded.
?What sort of languages could a {}-LIG possibly notgenerate?
Consider the copy language L = {ww \]w E{a, b}*}, and let us suppose that it is generated by G, a{}-LIG.
This language cannot be generated by a CFG.We therefore know that for any integer M, there are in-finitely many strings in L whose derivation in G is suchthat at some point, an index multiset in the sententialform contains more than M index symbols (since anyfinite use of index symbols can be simulated by a pureCFG).
It must be the case that this unbounded multisetis crucial in restricting the second half of the generatedstring in such a way that it copies the first half (again,since a pure CFG cannot derive such strings).
However,it is impossible for a data structure like a (multi-)set(over a finite index alphabet) to record the required se-quential information.
Therefore, the second half of thestring cannot be adequately constrained, and G cannotexist.
This argument nmtivates the following conjec-ture.Con jecture  4 {wwlw E {a,b}*} is not in ?
:({}-LIG).266S S{Sa, 8b, Se, 8d, Be}S{8a, Sb, 8e, Sd, Se, Sa, 8b, Se, Sd, Se, Sa, Sb, Se, Sd, Se }A{sa, sa, sa}B{sb, Sb, sb}C{sc, sc, sc}D{sd, Sd, sd}E{so, se, se}A{s., s., s.}B{sb, Sb, sb}C{so, so}eD{Sd, Sd, Sd}E{s , s.,aaaB{Sb, 8b, 8b}C{ o,  o}eD{ d, sd}E{80, s.}aaabbbcccdddeeeFigure 2: Sample derivation in {}-LIG G1We now turn to closure properties.Theorem 5 L:({}-LIG) is a substitution-closed full ab-stract family of languages (AFL).Outline of the proof.
Since ?
({}-LIG) contains allcontext-free languages, it contains all regular languages,and therefore it is sufficient o show that L:({}-LIG) isclosed under intersection with regular languages andsubstitution.
These results are shown by adapting thetechniques used to show the corresponding results forCFGs.
?Finally, we turn to the recognition and parsing prob-lem.
Again, we will restrict our attention to the linearlyrestricted version of {}-LIG.Theorem 6 Each language in/~R({}-LIG) can be rec-ognized in polynomial deterministic time.Outline of the proof.
We extend the CKY parser forCFG.
Let G be a {}-LIG in ETF.
Since G may containe-productions, the algorithm is adapted by letting theindices of the matrix refer to positions between sym-bols in the input string, not the symbols themselves.In order to account for the index multiset, we let theentries in the recognition matrix be pairs consisting ofa nonterminal symbol and a \[Y}l-tuple of integers:(A, (n l , .
.
.
,  nlv, I))The IVil-tuple of integers represents a multiset, witheach integer designating the number of copies of a givenindex symbol that the set contains.
In an entry ofthe matrix, each pair represents a partial derivationof a substring of the input string.
More precisely, ifthe input word is al .
- .an, and if ~ = {i l , .
.
.
, i lv ,  I},then we have (A, (n l , .
.
.
,n lvd) )  in entry ti,j of therecognition matrix if and only if there is a derivationAs ::=?.
ai+l .
.
.a j ,  where multiset s contains nk copiesof index symbol it,, 1 < k < I vii.
Clearly, thereis a derivation in the grammar if and only if entryt0,n contains the pair (S, (0 , .
.
.
,0) ) .
Now since thegrammar is linearly restricted, each nk is bounded byn, and hence the number of different pairs is linearlybounded by IVNIn W'I.
Thus each entry in the matrixcan be computed in O(n l+21vd) steps, and since thereare O(n 2) entries, we get an overall time complexity ofO(n3+21v, I).
?UVG wi th  Dominance  LinksWe now formally define UVG with dominance links(UVG-DL), which serves as a formal model for the sec-ond and third phenomena introduced above, word ordervariation and quasi-trees.
The definition differs fromthat of UVG only in that vectors are equipped withdominance relations which impose an additional condi-tion on derivations.
Note that the definition refers tothe notion of derivation tree of a UVG, which is definedas for CFG.Def in i t ion 5 An Unordered  Vector  Grammarw i th  Dominance  Links (UVG-DL) is a 4-tuple(VN, VT, V, S), where VN and VT are sets of nonter-minals and terminals, respectively, S is the start sym-bol, and V is a set of vectors of context-free produc-tions equipped with dominance links.
For a given vec-tor v E V, the dominance links form a binary relationdomv over the set of occurrences of non-terminals inthe productions of v such that if domv(A, B), then A(an instance of a symbol) occurs in the right-hand sideof some production in v, and B is the left-hand symbol(instance) of some production in v.I fG is a UVG-DL, L(G) consists of all words w E VYtwhich have a derivation p of the formsuch that ~ meets the following two conditions:1. piP2 ?
?
.Pr is a permutation of a member of V*.2.
The dominance relations of V, when interpreted asthe standard dominance relation defined on trees,hold in the derivation tree of ~.The second condition can be formulated as follows:if v in V contributes instances of productions Pl andP2 (and perhaps others), and the kth daughter in theright-hand side of Pl dominates the left-hand nonter-minal of P2, then in the context-free derivation tree as-sociated with # (the unique node associated with) thekth daughter node of pl dominates (the unique nodeassociated with) P2.
We now give an example.
(Thesuperscripts distinguish instances of symbols and arenot part of the nonterminal alphabet.
)EXAMPLE 2Let G2 ---- (VN, VT, V, S t) with:267v1: {(S' ~ daft VP)} with dome, = I~v2: {(VP (1) ~ NPnom VP(2)), (VP (3)dom~ = {(VP(2), Vp(S)), (VP(4), VP(S)), (VP(~),VP(S))}vz: {(VP (1) ----+ VP(D Vp(2)), (Vp(3) ----+ zu versuchen)} with domvsv4: {(Vp(D ----+ NFacc VP(2)), (VP (3) > zu reparieren)} with dome,vh: {(NPnom -'-+ der Meister)} with domvs =v6: {(NPdat ~ niemandem)} with dome.
= 0vr: {(NPacc ~ den K~hlschrank)} with dome, = 0) NPdat Vp(4)), (VP (5) ---+ VP (6) VP(r)), (VP (s) > verspricht)} with.= {(VP(2), Vp(3))}= {(VP(~), Vp(3))}Figure 3: Definition of V for UVG-DL G2NP?~) "...vP(p41)' ? '
?o*  =oO.Oo..der Meister NP(Pn) "'"'.. ._.~.. (~l) ..... "..den Kuehlschrank VP(_Pz2) : ""... VP(IP42)~ .
.
.
.
.
".
!
* % ?
NP(i61) " VP(P23) "'.oi zu reparierenniemandem VPIP~2) VPIP24)zu versuchen versprichtFigure 4: Sample UVG-DL derivationVN = {S', VP, NPnom, NPdat, NPaec}VT = {daft, verspricht, zu versuchen, zu reparieren,der Meister, niemandem, den Kiihlschrank} 2V = {vx, v2, v3, v4, vh, vr, VT}where the vi are as defined in Figure 3.A sample derivation is shown in Figure 4, where thedominance relations are shown by dotted lines.
Ob-serve that the example grammar is lexicalized.
We willdenote the class of lexicalized UVG-DL by UVG-DLLex.It is clear that the dominance links of UVG-DL arethe additional constraints that we argued above are nec-essary to adequately restrict the structural relation be-tween arguments and their verbs.
Furthermore, UVG-DL is a notational variant of QTSG: every vector rep-resents a quasi-tree, and identifying quasi-nodes cor-responds to rewriting.
The condition on a successfulderivation in QTSG - that all nonterminal nodes beidentified - corresponds to the definition of a derivationin UVG-DL.
We have therefore found a mathematicalmodel for the second and third phenomenon mentioned~Gloss (in order): that, promises, to try, to repair, themaster, no-one, the refrigerator.in Section 2.We now turn to the formal properties of UVG-DL.Our main result is that UVG-DL is weakly equivalenl~to {}-LIG.
The sets of a {}-LIG implement the domi-nance links and make sure that all members from oneset of rules are used during a derivation.
We first in-troduce some more terminology with which to describethe derivations of UVG-DLs.
If two productions P~,1and Pv,2 from vector v are linked by a dominance linkfrom a right-hand side nonterminal of p~,l to the left.-hand nonterminal Pv,2, then we will denote this link byl,,1,~.
We will say that p~.l (or the right-hand side non-terminal in question) has a passive dominance require-ment of Iv,l,2, and that Pv,2 has an active dominancerequirement of Iv,l,2.
If Pv,1 or Pv,2 is used in a partialderivation such that the other production is not usedin the derivation, the dominance requirement (passiveor active) will be called unfulfilled.
Let ~0 be a (partial)derivation.
We associate with # a multi-set which rep-resent all the unfulfilled active dominance requirementsof ~0, written T(L0).Theorem 7 ~(UVG-DL) = L:({}-LIG)268Outline of the proof.
The theorem is proved in twoparts (one for each inclusion).
We first show the inclu-sion Z(UVG-DL) C_ L:({}-LIG).
Let G = (VN, Vw, V, S)be a UVG-DL, where V = {Vl, .
.
.
,  vK} with vi =(pi,1,...,pi,k,), kl = Ivil, 1 < i < K.  We constructa {}-LIG G' = (VN, VT, Yi, P, S).
Let Yi = {li,j,k I 1 <i < K, 1 < j, k < ki }.
Define P as follows.Let v in V, and let p in v be the production A )WoBlWl .
.
.B~w,  be in yr.
In the following, we willdenote by T(p) the multiset of active dominance re-quirements of p, and by .l-i(p) the multiset of passivedominance requirements of Bi, 1 < i < n. Add to Pthe following production:A T(p) ~ woBI.J- I(p)wl'" "Bn-l-n(p)wnP contains no other productions.
We show by induc-tion that for A in VN, and w in V.~, we have A =~a wiff A =~=:'c' w. Specifically, we show that for all integerskk, 0 : A =:~c w, w E V~, with unfulfilled active domi-nance requirements T(0), implies that there is a deriva-tion AT(0) =~:?
'G' w, and, conversely, we show that fori all integers k, At ==~G, a, A E VN, t a multiset of ele-ments of l/i, and a E V~, implies that there is a deriva-tion 0 : A =~G a such that T(0 ) = t.For the inclusion/:({}-LIG) C L:(UVG-DL), we takea slightly different approach to avoid notational com-plexity.
Let G = (VN, VT, Vx,P,S) be a {}-LIG inRINF.
We construct a UVG-DL G' = (VN, VT, V,S) ,where V is defined as follows:1.
I fp E P is a {}-LIG production of RINF type 1, then((p), 0) E V.2.
If p E P is a {}-LIG production of R INF  type 2,with p = A ----+ B f  for A, B E VN, f E I,~, then forall q E P such that q = Cf  ~ D, v = ((AB,C  .
~ D) ,domv(B ,C) )  is in V.Let A be in tiN, and w in V~.
We show by inductionthat S =~:~a w iff S =~:~a' w. Specifically, we first showthat for all integers k, for all {}-LIGs G and the corre-sponding UVG-DL G' as constructed above, if there isa derivation t~ : S {} ~::~e w with k instances of ap-plications of rules of type 2, then there is a deriva-tion 0 ' : S :~::~a' w such that 0 and O ~ are identicalexcept for the index symbols in the sentential formsof 0.
For the converse inclusion, we show that for allintegers k, for all {}-LIGs G and the correspond UVG-DL G ~ as constructed above, if there is a derivationO' : S {} ~a,  w with k instances of applications ofrules from vectors with two elements, then there is aderivation O : S ::~=~a w such that g and 0 ~ are identicalexcept for the index symbols in the sentential forms of0.
?This equivalence l ts us transfer esults from {}-LIGto UVG-DL.
It can easily be seen from the constructionemployed in the proof of Theorem 7 that a lexicalizedUVG-DL maps to a linearly restricted {}-LIG.
For lin-guistic purposes we are only interested in lexicalizedgrammars, and therefore the linear restriction is quitenatural.
We obtain the following corollaries thanks toTheorem 7.Corollary 8 L:(UVG-DLLex) C_ LI(CSG).Coro l la ry  9 L:(UVG-DL) is a substitution-closed fullAFL.Coro l la ry  10 Each language in /:(UVG-DLLex) canbe recognized in polynomial deterministic time.Related FormalismsBased on word-order facts from Turkish, Hoffman(1992) proposes an extension to CCG called {}-CCG, inwhich arguments of functors form sets, rather than be-ing represented in a curried notation.
Under functioncomposition, these sets are unioned.
Thus the movefrom CCG to {}-CCG corresponds very much to themove from LIG to {}-LIG.
We conjecture that (a ver-sion of) {}-CCG is weakly equivalent to {}-LIG.Staudacher (1993) defines a related system called dis-tributed index grammar or DIG.
DIG is like LIG, exceptthat the stack of index symbols can be split into chunksand distributed among the daughter nodes.
However,the formalism is not convincingly motivated by the lin-guistic data given (which can also be handled by a sim-ple LIG) or by other considerations.Several extensions to {}-LIG and UVG-DL are de-fined in (Rambow, 1994).
First, we can introduce the"integrity" constraint suggested by Becker et al (1991)which restricts long-distance relations through nodes.This is necessary to implement the linguistic notion of"barrier" or "island".
Second, we can define the tree-rewriting version of UVG-DL, called V-TAG.
This ismotivated by Conjecture 4, which (if true) means thatUVG-DL cannot derive Swiss German.
Under either ex-tension, the weak generative power is extended, but theformal and computational results obtained for {}-LIGand UVG-DL still hold.ConclusionThis paper has presented two equivalent formalisms,{}-LIG and UVG-DL, which provide formal models forthe three different phenomena that we identified in thebeginning of the paper.
We have shown that both for-malisms, under certain restrictions that are compati-ble with the motivating phenomena, are restricted illtheir generative capacity and polynomially parsable,thus making them attractive candidates for modelingnatural language.
Furthermore, the formalisms aresubstitution-closed AFLs, suggesting that the defini-tions we have given are "natural" from the point ofview of formal language theory.AcknowledgmentsI would like to thank Bob Kasper, Gai~lle Recourcd,Giorgio Satta, Ed Stabler, two anonymous reviewers,269and especially K. Vijay-Shanker for useful commentsand discussions.
The research reported in this paperwas conducted while the author was with the Com-puter and Information Science Department of the Uni-versity of Pennsylvania.
The research was sponsoredby the following grants: ARO DAAL 03-89-C-0031;DARPA N00014-90-J-1863; NSF IRI 90-16592; and BenFranklin 91S.3078C-1.BibliographyAho, A. V. (1968).
Indexed grammars - an extensionto context free grammars.
J ACM, 15:647-671.Becker, Tilman; Joshi, Aravind; and Rambow, Owen(1991).
Long distance scrambling and tree adjoin-ing grammars.
In Fifth Conference of the EuropeanChapter of the Association for Computational Lin-guistics (EACL'91), pages 21-26.
ACL.Chomsky, Noam (1981).
Lectures in Government andBinding.
Studies in generative grammar 9.
Foris,Dordrecht.Cremers, A.
B. and Mayer, O.
(1973).
On matrix lan-guages.
Information and Control, 23:86-96.Cremers, A.
B. and Mayer, O.
(1974).
On vector lan-guages.
J. Comput.
Syst.
Sei., 8:158-166.Gazdar, G. (1988).
Applicability of indexed grammarsto natural languages.
In Reyle, U. and Rohrer, C.,editors, Natural Language Parsing and LinguisticTheories.
D. Reidel, Dordrecht.Hoffman, Beryl (1992).
A CCG approach to free wordorder languages.
In 30th Meeting of the Associa-tion for Computational Linguistics (ACL'92).Joshi, Aravind; Levy, Leon; and Takahashi, M (1975).Tree adjunct grammars.
J. Comput.
Syst.
Sci.,10:136-163.Joshi, Aravind K. (1985).
How much context-sensitivity is necessary for characterizing struc-tural descriptions - -  Tree Adjoining Grammars.In Dowty, D.; Karttunen, L.; and Zwicky, A., ed-itors, Natural Language Processing -- Theoreti-cal, Computational nd Psychological Perspective,pages 206-250.
Cambridge University Press, NewYork, NY.
Originally presented in 1983.Karttunen, Lauri (1989).
Radical exicalism.
In Baltin,Mark and Kroch, Anthony S., editors, Alternativeconceptions of phrase structure, pages 43-65.
Uni-versity of Chicago Press, Chicago.Kasper, Robert (1992).
Compiling head-driven phrasestructure grammar into lexicalized tree adjoininggrammar.
Presented at the TAG+ Workshop, Uni-versity of Pennsylvania.Marcus, Mitchell; Hindle, Donald; and Fleck, Margaret(1983).
D-theory: Talking about talking abouttrees.
In Proceedings of the 21st Annual Meetingof the Association f or Computational Linguistics,Cambridge, MA.Pollard, Carl (1984).
Generalized phrase structuregrammars, head grammars and natural language.PhD thesis, Stanford University, Stanford, CA.Pollard, Carl and Sag, Ivan (1987).
Information-Based Syntax and Semantics.
Vol 1: Fundamen-tals.
CSLI.Pollard, Carl and Sag, Ivan (1992).
Anaphors in En-glish and the scope of binding theory.
LinguisticInquiry, 23(2):261-303.Pollard, Carl and Sag, Ivan (1994).
Head-DrivenPhrase Structure Grammar.
University of ChicagoPress, Chicago.
Draft distributed at the Third Eu-ropean Summer School in Language, Logic and In-formation, Saarbriicken, 1991.Rambow, Owen (1994).
Formal and ComputationalModels for Natural Language Syntax.
PhD thesis,Department ofComputer and Information Science,University of Pennsylvania, Philadelphia.Rambow, Owen and Satta, Giorgio (1994).
A rewritingsystem for free word order syntax that is non-localand mildly context sensitive.
In Martfn-Vide, Car-los, editor, Current Issues in Mathematical Lin-guistics, North-Holland Linguistic series, Volume56.
Elsevier-North Holland, Amsterdam.Satta, Giorgio (1993).
Recognition of vector languages.Unpublished manuscript, Universith di Venezia.Shieber, Stuart B.
(1985).
Evidence against thecontext-freeness of natural language.
Linguisticsand Philosophy, 8:333-343.Staudacher, Peter (1993).
New frontiers beyondcontext-freeness: DI-grammars and DI-automata.In Sixth Conference of the European Chapterof the Association for Computational Linguistics(EA CL '93).Steedman, Mark (1985).
Dependency and coordinationin the grammar of Dutch and English.
Language,61.Vijay-Shanker, K. (1992).
Using descriptions of trees ina Tree Adjoining Grammar.
Compvtational Lin-guistics, 18(4) :481-518.Vijay-Shanker, K. and Weir, David (1994).
The equiva-lence of four extensions of context-free grammars.Math.
Syst.
Theory.
Also available as TechnicalReport CSRP 236 from the University of Sussex,School of Cognitive and Computing Sciences.Vijay-Shanker, K.; Weir, D.J.
; and Joshi, A.K.
(1987).Characterizing structural descriptions produced byvarious grammatical formalisms.
In 25th Meetingof the Association for Computational Lingvistics(ACL '87}, Stanford, CA.270
