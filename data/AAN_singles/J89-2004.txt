Technical Correspondence On the Logic of Category DefinitionsON THE LOGIC OF CATEGORY DEFINITIONSIn their paper on category structures, Gazdar et al(1988) define a constraint language L c for categories anda logic A c of admissible category structures.
~ Theintuitive idea is that for a constraint $ expressed in L c,~b is a nontrivial constraint if and only if A c 14 th; and itis a satisfiable constraint if and only if Ac 14 -nth.
From apractical point of view it is therefore important to knowwhether A c is decidable and even better that the deci-sion can be given in a time bounded by a recursivefunction on the length of ~b.
However, the remarks madein their paper only suffice to show that the modalfragment of Ac 2 contains S4.Grz = K(l-lp --> p, C\]p --*DDp, \[~(D(p --* Dp) --* p) --~ p), which does not showthat this fragment is decidable.
In this note, I willestablish both that the modal fragment of A c and A citself are decidable, and I will prove it in that order.
Asa result, I will also axiomatize Ac.
Thus I show first thatthe modal reduct of Ac, which I call AM, is decidable.This paper will be rather hardgoing for anyone notacquainted with modal logic.
We advise the reader tohave Gazdar et al (1988) at hand while reading thispaper, or better still, to read it once through before-hand.
For the modal logics we refer the reader to Boolos(1979), Harel (1984), and Segerberg (1971), but in prin-ciple any introduction to modal logic will provideenough background to be able to understand the gist ofthe arguments.Without going into too many details of the construc-tion, I will show that there is an easy way to give a proofthat in fact shows that A M = S4.Grz using the structureof the models those logics admit.
Intuitively, categoriescorrespond to Kripke models.
For let a be a category.Then a defines a set of categories W, which is obtainedby successively applying type 13 features to a. Anaccessibility relation <1 is defined via ot <1/3 ifff la) =/3for some type 1 feature f. This accessibility relation isirreflexive, intransitive, finite, and defines a tree-struc-ture on W. Most importantly, it is cycle free.
Thus, if welook at the reflexive and transitive closure <\]+ of <1, it isagain finite and has no non-trivial cycles.
It therefore isan S4.Grz structure (see, e.g., Boolos 1979).
Con-versely, an S4.Grz structure <W, <\]+> which is a treecan be represented as a category.
If we then take amodel <W, <1 +, val> based on that frame, whereval: X--~ 2 w maps a finite set of propositional variablesinto 2 w, we can code this model by adding a type 0featurefp for each p ~ X that takes values Y or ?.
Thusthe resulting category t~ not only codes the successorfunction by means of type I features, but also thevaluation val.
W is in one-to-one correspondence ~b withthe set F of categories generated by a.
We then makethe following definitions:Let/3 be in F:i./3 ~ fp : T i f f  ~/3) E val(p) iff ~/3) ~ pii.
\[3 ~ fp : ?
iff qb(/3) ~ val(p) iff ~/3) ~ -pIt is easy to see that for any modal formula P withvariables in X, the corresponding translation ~" inducedby p *-~ fp : T satisfies/3 ~ "t(P) iff q~(/3) ~ P. The logicof <W,<\]+> therefore coincides with the logic of allcategories that differ from ot only in the assignment oftype 0 features.
To conclude, the logic of categories asdefined in Gazdar et al (1988) coincides with the logicof all finite, reflexive, transitive trees.
It is easily seenthat the finite, reflexive, transitive trees generate theclass of finite models for S4.Grz.
Thus the logic ofcategories is the logic of the finite models of S4.Grzwhich, since S4.Grz has the finite model property, isidentical to S4.Grz (end ofproojO.A few remarks are in order:I. I used a purely semantical argument, which in thiscase is the most direct way, because it is fairlyeasy to see why we get just the models we get,though there is some footwork to be done.2.
Alternatively I could have built a canonical modelout of a category structure X, whose worlds arethe categories that X admits and whose accessibil-ity relation is as defined above for categories.
Theproof is essentially the same.3.
The idea of encoding frames and valuations into asingle structure has also been explored in Fagin(1985).4.
In Rautenberg (1983) a simple tableau calculus forS4.Grz is given which shows that S4.Grz consis-tency is effectively decidable, and that the deci-sion procedure is primitive recursive.
Further-more, the size of a tableau is bounded by afunction of the number o~P) of subformulas of P,or, more precisely, the theoremhood of P can bedecided with a tableau of length -< 27+60(P).
Giventhe proof, the same holds for A M , since thetranslation procedure reduces the size of a for-mula.
So we have the same bound for A c.5.
In Gazdar et al (1988) another logic is mentionedwhich arises from restricting the number of type 1features to 1.
The resulting logic is equal toS4.3.Grz = S4.Grz(<>p/X ~q.
~ .~(p/X Oq) X/O(q/X O p) X/ O(p /X q)), the logic of all finitelinear orders, as can be seen in the same way.Since finitely generated S4.3.Grz models are fi-nite, this logic is decidable as well.I will now proceed to the full case.
Before I embark onthe proof, let me remark on a few things.
First, althougheach particular category structure contains only a finitenumber of features and values, L c contains infinitelymany of them.
As regards the type 0 features, thiscauses no problem, since we t reat f  : a as a propositionand we allow ourselves infinitely many of those.
How-ever, type 1 features will create some problems that arenot very serious but have to be dealt with carefully.Second, as we defined a translation of L c into modallogic, we will now define a translation of L c intoelementary propositional dynamic logic (EPDL) so thatevery type 1 feature has a program associated with itComputational Linguistics, Volume 15, Number 2, June 1989 0362-613X/89/010111-113-$03.00 111Technical Correspondence On the Logic of Category Definitionswhose interpretation is an accessibility relation betweencategories.
This translation is harmless and allows us toforget about type 0 features altogether.i.
, ( f  : a) = P<f:a> where f i s  of type 0ii.
"t~,.
: ~b) = <7,.> ~b where f; is of type 1iii.
\ [~b = \[a\]~ba is a program that by definition contains all otherprograms; that is, if two categories are related by 3"~,they are also related by a.
However, although theintuition is that a is the reflexive and transitive closureof all the y;'s, this fact is not expressible in EPDL nor inL c because it requires a formula of infinite length.
But,as it turns out, this is a harmless deficiency of ourlanguage.
The translation of A c into EPDL will becalled _.I will now give a full axiomatization of '_ =.
As we sawearlier, the axioms governing the behaviour of \[a\] areexactly the axioms for S4.Grz, since \[a\] is the old 71.Similar reasoning will reveal that the \[3'~\] behave alike,and the corresponding logic is the logic otherwiseknown as K.AIt~, which stands for "only one alterna-tive".
The accessibility relation for K.AI h allows aworld to have at most one successor.
Although it hasmore models, K.AIh is the logic of all irreflexive, linearand finite frames, which shows that it is the logic we arelooking for.
If we take all this together with the obser-vation that a includes 3"i, we get the following axiomsfor -=:Grz~ -= F\[a\](\[a\](~b ~ \[a\]~b)~ ~b)~ ~bAlto.
v -= \[-<3,i > (~b /~ ~1) ~ (<3,/>(\])./\.<3,/>1\]t), i ~ toMix -= F<3,/> tk ~ <a> thNote that -= is not finitely axiomatizable and so A c isn'teither.
Note also that if it weren't for the axiom(s) calledMix, life would be very easy for us now.
Since theaxioms for the various programs are independent, hefinite model property for each of those programs indi-vidually would yield the finite model property for thewhole logic by simple induction on the number ofprograms.
Thus let us call the logic without Mix ,-e.Also, since we have a tableau calculus for S4.Grz and atableau calculus for K.AIh, we have a calculus for -=eas well, simply by putting all tableau rules together.
Thetableau rule for 3'; would look as follows: from F; <yi >4~ step to F?
; ~b, where F ?
:= {q~ I <3';> ~0 ~ F or \[3'~\]~0F}.
I shall spare the reader an exact specification ofthe tableau rules and refer him to Rautenberg (1983)again.
Note that the length of the tableaus for K.AIh isbounded by the size of ~b so that the actual size of thetableau is at most 2 ~?~'), where n is the length of ~b ando(th) the number of subformulas of ~b.
This bound couldbe sharpened somewhat but we ignore this point.
WhatI want to show is how the fact that -=e can be shown tohave all those properties can be made to explain why -=must have those properties, too.
What the reader shouldunderstand at this point is that tableaus are a way ofsystematically constructing a model for a formula (if it isconsistent) and showing inconsistency by exhausting allpossible choices, of which there are only finitely many.What I do now is boost up a model constructionprocedure for =e  to a model construction procedure for-=.
This is done as follows: Suppose we want to con-struct a E-model for $.
Since we do not know how to dothis we construct a -=e-model instead.
However, thismodel might be deficient by not respecting Mix.
There-fore we add a finite set ~b # of instances of Mix which willensure that Mix is respected for subformulas of ~b.
The=e model can then safely be turned into an -= model.Let me therefore define the modal degree d of aformula.d(~b) = 0, if & is a propositional variable or constantd(-n&) = d(~b)d(ck /X ~) = max(d(qa),d($))d(\[a\]&) = d(~b) + 1d(\[ 3'i\] q~) = d(~b) + 1Furthermore, let sf(&) be the set of subformulas of ~b.Then define~" = U  3"i \[ 7i occurs in 4, > UaC +~ = ~';.C(~# = {\[?
(~b)\](<3'i> ,)(-"~ <O~> X) I X ~ SAt\]))}Then we say that an _= tableau for & is simply an =etableau for ~b;$ #.
Let us see how &# makes everythingright for us.
The failure of -=e is to allow models for<7i  > 1\]1 /~ \[t~\]--'l~/.
For suppose we build a simple =etableau tbr 4, and we encounter a line F; <3";> q,A \[a\]-n4,.In the next step we get F; <7;> q,;\[a\]TqJ and then F?
;qJ.But if we added ~b #, then F would necessarily contain aformula yielding <3,;> qJ---~ <a> qJ, which would closethis branch of the tableau.
Thus an =e tableau for ~b;~b #results in a model <W, <3, val> in which, though a is anindependent program, for every subformula qJ of ~b, ifs,val ~<3,;> ~0, then also s,val ~<a> q~.
Thus it iseasy to see that if we now reinterpret the a relation "~as the reflexive, transitive closure of a and the 3'g, we getan -= model < W, <3, val> for ~b, which obviously is ofthe same size.
Thus, if _e  has the finite model property,-= has the finite model property, and if the decisionprocedure for _e  is bounded a priori by a function onthe length of ~b, the same holds for _=.
Obviously, thebound is much higher than for -=o because of the 4, #,but this is the price we have to pay (end ofproojO.Given the above proof we can now change thetableau calculus for -= by redefining the rule for 3"i to thefollowing: from F; <7/> ~b infer F?
; FD;~b where F ?
:={qJ \[ <y~> qJ E F or \[3';\]q, E F} and F D := {\[a\]~ \[ \[a\]~F} O {~0 \[ \[a\]qJ ~ F}.
The proof method I used forproving decidability for -= (Ac) from the decidability of=e  is explained in full detail in Kracht (1988).
The samemethod applies to the case when we only allow a singletype I feature, since it only requires the base logic--in112 Computational Linguistics, Volume 15, Number 2, June 1989Technical Correspondence On the Logic of Category Definitionsthis case S4.3.Grzuto have the finite model property.The resulting logic -=.3 can be (finitely) axiomatized asfollows:Grz~ -=.3 F \[a\](\[a\](4>--, \[a\]4>)--~ 4>)~ 4>.3,~ ,=.3 F (<a> 4>.A.<a>O)--~<a>( 4>A <a> O)V <a>( OA <a> 4>>V <a> (4> A ~)AItLv ,=.3 F <y~> 4>A <y~> @ ~ <y~> (4> A ~)Mix -=.3 F <y l> 4>---~ <a> 4>The model construction requires ome care since we donot have an unlimited resort of extra features, but it canbe done in the same spirit.
This shows decidability for,=.3 and hence for the corresponding logic mentioned inthe paper.
An alternative formulation of -=.3 could begiven with the help of propositional dynamic logic usingthe star operator *.
We would then simply have anaxiom <y~'> 4> ~ <a> 4> that says nothing else, butthat a is the reflexive and transitive closure of TI.
Thistrick would also work if we restrict _ to any finitenumber of features.
But the star does not gain us muchfor -= itself since we still could not express the fact thata is the reflexive and transitive closure of the yi'sbecause we have infinitely many of them.Marcus Kracht HMathemat isches  Inst itutFU  Berl in1000 Berl in 33, GermanyACKNOWLEDGMENTSThis paper was written while I was at the Centre for Cognitive Sciencein Edinburgh.
I wish to thank Jaap van der Does for encouraging meto write this proof down and for proofreading it.
I also wish to thankG.
Gazdar for remarks on an earlier version of the paper and ananonymous referee for further suggestions.REFERENCESBoolos, G. 1979 The Unprovability of Consistency.
Cambridge Uni-versity Press, Cambridge, England.Fagin, R. and Vardi, M. 1985 An Internal Semantics for ModalLogics: Preliminary Report, CSLI-Report No.
85-25.Gazdar, G.; Pullum, G.; Carpenter, R.; Klein, E.H.; Hukari, T.E.
;and Levine, R.D.
1988 Category Structures, Computational Lin-guistics 14.1: 1-19.Harel, D. 1984 Dynamic Logic.
in Gabbay, D. and Guenthner, F.(eds.)
Handbook of Philosophical Logic.
Reidel, Dordecht, Hol-land.Kracht, M. 1988 Splittings and the Finite Model Property (forth-coming).Rautenberg, W. 1983 Modal Tableau Calculi and Interpolation, inJournal of Philosophical Logic 12: 403-423.Segerberg, K. 1971 An Essay in Classical Modal Logic.
Uppsala.NOTES1.
Unfortunately, they do not distinguish between the language Lcand the logic, which defines a subset of that language, namely theset of its theorems.
We make this distinction here by calling thelogic as well as the set of theorems it defines A c.2.
We define a logic as a set of rules, which are pairs A&b, where Ais the set of premises of that rule and ~b its consequence.
ModusPonens thus takes the form ~b,~b ~ ~/~.
Rules are closed undersubstitution.
Axioms are rules because we can take A = 0.
Themodal fragment of A c is then simply the subpart of rules that onlyinvolve modal formulas, i.e.
no type 1 features.3.
Remember that type 1 features take propositions as values,whereas type 0 features only take atoms.Computational Linguistics, Volume 15, Number 2, June 1989m113
