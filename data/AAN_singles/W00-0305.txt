new york to washington national4 BOB: TEN A.M.5 SYSTEM: i see a few flights from newyork to washington national which departabout ten A M on january twenty seventh.do you prefer to depart from newark, J FK, or la guardia.6 BOB: LA GUARDIA7 SYSTEM: there are several flights fromla guardia, you can fly on deltadeparting at nine thirty A M or tenthirty A M, or on U S air at ten A M.please specify an airline or time.8 BOB: U.$= AIR9 SYSTEM: U S-a i r  f l i ght  63 57 departs laguardia at ten A M on Thursday, januarytwenty seventh and arrives in washingtonnational at eleven seventeen A M. Isthis flight okay?i0 BOB: YESExcerpt 2: The second excerpt regards a flight~om New York to Melbourne, Australia.
The ex-cerpt is the system response after the user has re-stricted his New York departure to La Guardia ai~port, similarly to (Excerpt 1, Line 6):SYSTEM: i see a couple of flightsfrom la guardia, both of them are onamerican and make connections in chicagoo'hare and los angeles, the firstflight departs at nine thirty A M andarrives at eight twenty five A M. thesecond flight departs at nine thirty A Mand arrives at eight twenty five A M.Note: The two flights differ only in the second ofthree segments of the trip, Mthough the user wouldonly discover this rather unusual coincidence uponasking for detMls about the individual flights.
Thedifficulty in this case arises because the mechanismfor generation for a very short list of flights hasnot yet been subsumed as part of the aggregationmechanism (described below) which would have au-tomaticMly determined that the two flights shouldbe grouped.Excerpt 3:i SYSTEM: I will book this leg.
Do youwant to continue with another leg?Please say yes or no.2 JANE: YES I NEED TO CONTINUE BUT I NEEDTO HAVE FLIGHT COMING BACK3 SYSTEM: Okay, continuing with leg two.flying from phoenix to newark on whatdate?4 JANE: 0KAY THAT WOULD BE FINE JUNE THIRD5 SYSTEM: what time would you like toleave on june third?6 JANE: OF THE TWO O'CLOCK IN THEAFTERNOON7 SYSTEM: america west flight 7 74departs phoenix at one thirty six PM on Saturday, june third and arrivesin las vegas at two thirty eight P M,connecting to continental flight 1282 departing at three fifteen P M andarriving in newark at ten forty one P M.Is this flight okay?8 JANE: NO IS THERE A DIRECT FLIGHTFROM PHOENIX TO NEWARK I ON JUNE THIRDANYTIME TO THIRD9 SYSTEM: pardon me, what time would youlike to leave?I0 JANE: TIME TEN O'CLOCK IN THE MORNING11 SYSTEM: i can't find any nonstop flightsfrom phoenix to newark on america westwhich depart about ten A M on junethird, you may want to try changing thedeparture time to seven twenty five A M,eight fifty nine A M, twelve seventeen PM, or three oh five P M.4 Deep GenerationIn this section we will focus on some tasks han-dled by our deep generation module, emphasiz-ing the role of constraint functions as a unifyingtheme.
Although the notion can be developed morebroadly in various ways, we will consider a con-straint function here to be a function on a singledata record consisting of information about a par-ticular flight from one location to another, possiblymaking connections.
Examples of a constraint func-tion are: t lmeDepVal,  giving the departure timeof the flight; t |meArrClass,  giving the class of thearrival time (before six A.M., between six A.M. andnoon, etc); and connVal giving the list of connec-tion cities.
A constraint on a data record is thecondition that some given constraint function hasa given value.In a typical turn a user may modify the list ofConstraints imposed on the flights under discussion 2.How the system interprets the user input, searchesfor flights satisfying the constraints, and decideswhat to say about them are all affected by theshared conversational context between system and2For brevity, we focus in this section on system response touser input whose content consists solely of constraints modi-fications.
Processing of other kinds of input such as questions(e.g.
"when does the nine A.M. flight arrive?")
is handledsimilarly.22user.
Specifically, we have found the following mostuseful to keep track of:1. the constraints the user has imposed on theflights;2. what information about the user input con-straints the system has repeated back to theuser;3. the flights the system has conveyed informationabout to the user; and4.
the constraints on flights that the system hasdiscovered and whether those constraints havebeen conveyed to the user or can be deduced bythe user.In this section we focus on two particular casesthat need to be handled by any dialog system inwhich the user and system negotiate to find a suit-able record from a source of data: the under-constrained case and the over-constrained case.4.1 Group ing  of  In fo rmat ionIn this section we discuss how the system decideswhat to say in the under-constrained case when thereare many flights satisfying the user request.
Exam-ples of the system response in this case can be foundin (Excerpt 1, Turn 5), (Excerpt 1, Turn 7), andExcerpt 2.
The following example occurred when auser requested a departure after 10:00 A.M., afterhaving previously imposed the constraints of flyingfrom Chicago to Miami on March third.
The systemresponded as follows:(I) there are several flights which departafter ten A M.(2) all of them leave from chicago o'hareand arrive in the afternoon.
(3) do you prefer to fly on american orunited.Part (i) of the system response summarizes themost salient constraints of the user input using thesummary script of section 5 s. Part (2) is a specifi-cation of the significant information common to allflights.
In part (3), the system has decided whichunder-specified constraint is most likely relevant othe user, grouped the flights according to the valuesof the constraints, and prompted the user by speci-fying the possible values of the constraint.The significant common information in part (2)and the most relevant grouping in part (3) are com-B Some readers may have noticed that, in (Excerpt 1, Turn5), the system unnecessarily reviewed constraints that haverecently been reviewed.
This is because the generation mech-anism used before enough constraints have been satisfied toquery the data base has not yet been fully unified with themechanism discussed in this paper.239.simple node ~1) ORD... 1230 ... american 1) ORD ... 1310 ... united2) ORD... 1420 ... american 2) ORD ... 1520 .. uniteddepArp timeArr air dephrp timeArr airFigure 1: Example of an Aggregationputed by what we call the aggregation algorithm 4.The principal domain dependent data needed bythe algorithm consists of utility functions for eachconstraint elling how high a priority it is to gointo detail about that constraint.
The output is atree structure which represents the hierarchy of con-straint information that is deemed most useful toconvey to the user.More specifically, the inputs to the aggregationalgorithm consist of a flat list of data records (e.g.a table of flights) together with a list of aggrega-tion specifications.
An aggregation specification isa triple consisting of: (1) a constraint function bywhich data may be grouped, (2) a sort functionwhich orders the groups according to their constraintvalue, and (3) a utility function to determine howuseful this grouping is (which may depend both onconversational context as well as when in the algo-rithm the grouping is attempted).
The utility func-tions also have the ability to return codes that con-trol the search for the best tree.
For example, autility function can declare itself to be the high-est priority, thus pruning the search.
The outputis a tree with non-terminal nodes labeled by lists ofconstraint functions, edges labeled by values takenby the constraint functions labeling the node above,and terminal vertices labeled by a list of the datarecords atisfying the constraints specified by the la-belings of all its ancestor nodes and edges.For the example discussed above, the output ofthe aggregation algorithm is depicted in Figure 1.The top node and the edge below it indicate thatall the flights leave from Chicago O'Hare in the af-ternoon (i.e.
the constraint depArpVa l  takes on4The term "aggregation" is sometimes used within the gen-eration community referring to a process of combining groupsof linguistically similar phrases.
One might say the aggrega-tion here is occurring on a semantic level, i.e.
the internalrepresentations of the flights are being grouped.the SABRE code "0RD" for Chicago O'Hare andthe constraint imeArrClass takes on the value"morning").
We call this node a simple node be-cause there is only one edge emanating from it.
Bycontrast, the node below is a complex node sincethe constraint function at that node airVal cantake on more than one value (either "american" or"united").
The box on the lower left contains thoseinput flights which are on American Airlines and de-part from Chicago O'Hare in the morning, and sim-ilarly for the box on the lower right.For our application we have found it best to usethe same kind of utility function for all constraints.When only this type of utility function is used thebehavior of the aggregation algorithm isquite simpleand always l:~od~uces a tree similar to the one inFigure 1, namely~rm with two nodes: a simple oneabove a complex one.
Corresponding tothe notion ofsimple node and complex node, we call a constraintfunction (chosen from the aggregation specification)simple if it yields the same value when applied toall of the data records and complex otherwise.
Thesimplified aggregation algorithm effectively proceedsas follows:(1) For each simple constraint function (whosevalue is not known to the user based on theconversational history) apply a significance t st.Place those constraints functions that pass thetest (if there are any) in the top node of thetree.
(2) Pick the complex constraint function of maxi-mum positive utility and place that in the nodebelow the top.
If all utilities are negative, thenode remains empty.As an example, when depArpVal is a simple con-straint it is deemed significant if it is not the onlyairport serving the departure location the user re-quested.
In our example, since Chicago is servedby both O'Hare and Midway airports, the fact thatall flights land in O'Hare is deemed significant otell the user.
As our airline travel system developswe expect o have available more expert knowledgeabout the airline travel domain.
For example, thesignificance test for depArpVal may be modifiedin the future if the system has a way of knowingthat Chicago O'Hare is the airport the user would.naturally expect in many circumstances.4.2 Relaxat ionIn this section, we consider the over-constrained casein which no suitable flights can be found that sat-isfy the user request.
One example of the systemresponse in such a case occurs in (Excerpt 3, line11).
Another example is the following:(i) there don't seem to be any nonstopflights from san francisco to newarknew jersey on united which servebreakfast and depart after nine A Mon february tenth.
(2) you may want to try changing yourchoice of meal, the airline toContinental, or the departure timeto seven oh five A M or eight twenty AM.In part (I), the system first reviews detailed in-formation about what it believes the current userrequest is.
This is particularly useful to help alertthe user to any previous conversational error.
Inpart (2), the system suggests possible relaxationsthat may be of interest o the user.
A relaxationhere is just a change of a single constraint in theuser request which would allow flights to be found.For example, the system response (2) above indi-cates that there ar~ flights on united which satisfyall of the other user constraints listed in (1) above.5 Sur face  Generat ionThere are many approaches to generating text froman underlying semantic representation.
Simple tem-plates are adequate for many purposes, but resultin a combinatorial explosion in the number of tem-plates required to produce output for all possiblecircumstances.
There are also several powerful gen-eration packages available.
One package in partic-ular that we found it insightful to experiment withwas FUF(Elhadad, 1989), which is short for "Func-tional Unification Framework"(Elhadad and Robin,1992).
FUF comes available with a reusable gram-mar of English(Elhadad and Robin, 1996).
Al-though we found the sophisticated linguistic frame-work of FUF/SURGE difficult o adapt o our needs,we have found it helpful to include analogues of someelements of that framework in the approach we nowdescribe.After our initial experiments, we decided to"evolve" a surface generation module starting withthe straight forward model of template filling andprocedure calls provided by the programming lan-guage tel.
To overcome the problem of combina-torial explosion in program size, our surface gen-eration makes use of an exception catching mecha-nism which allows sub-phrases within a complicatedphrase to be "turned on" if the semantic input re-quired for them is present.
This can be done re-cursively.
This approach as a side benefit of beingvery robust because detailed error catching is builtin.
Even if the script writer makes an unintentionalerror in part of a script (and no alternatives for gen-erating the information in the erroneous part areavailable) only that part will fail to be generated.Our system makes available to the developer sev-eral useful domain independent constructs.
In addi-tion to these basic constructs, our surface generation24\[opt-s {\[DoStops Sstops\]}\] [opt-s {$rtow}\] \[Noun f l ights\[opt-s {from \[DoArp $1ocFr\]} \] \[opt-s {to \[DoArp $1ocTo\]} \]\[opt-s {on \[DoAir Sair\]} \]\[opt-s { which\[NonEmptyConjunct ion \[I ist\[opt-s {\[Verb cost\] \[DoPriceRange Sprice\]}\]\[opt-s {\[Verb have\] flight number SfltNum}\]\[opt-s {\[Verb serve\] Smeal}\]\[opt-s {\[subst $::Script(VPDep)\]} \]\[opt-s {\[subst $: :Script(VPConnect)\]} \]\[opt-s {\[subst $::Script(VPArr)\]} \] \]\] } \]Figure 2: Fragment from summarization script (generating text after vertical bar in examples in Table 1).has a morphology module (giving the correct form ofa word based on number, tense, etc.)
and a libraryof routines for generating simple phrases.
To givethe reader a flavor of our approach, we discuss theexample of the script which generates phrases uchas those in Table 1.1.
There are I several flights.2.
I can't find any I roundtrip flights from NewYork to Chicago.3.
There don't seem to be any I nonstop flightswhich serve breakfast and make a connection iDallas.4.
There is only one I flight on American which de-parts between six p m and nine p m on Februarysecond and arrives in the morning on Februarythird.5.
I see quite a few \] flights which cost less than$1000 and arrive in the morning.Table 1: Sample output from summarization script.
(The vertical bar has been added to demarcate theseparation between parts generated by separate sub-scripts.
)Phrases uch as the ones above are generated bysurface generation when it is asked by deep genera-tion to summarize some of the constraints on whatkind of flight the user is looking for and the approx-imate number of flights found.
The script fragmentin Figure 2 generates phrases like the ones after thevertical bar in the above examples.
Variables uch aslocFr, dateDep, and air correspond to user spec-ified constraints on departure location, departuredate, airline, and so on.
Only those variables willbe set which deep generation has decided should besummarized.
Since there are thirteen variables re-ferred to in the short script below and the (evenshorter) subscripts it refers to, they are capable ofgenerating 213 different kinds of phrases expressingthe desired content.
It is perhaps a fortunate prop-erty of the airline travel domain we are restricting tothat this approach allows fairly simple scripts to beused in circumstances where an inordinate numberof templates would h~ve been required.We offer a few words of explanation ofthe script inFigure 2.
First, the "morphology" procedure Verbprovides the appropriate morphological form of averb (depending on the current setting of number,tense, etc.).
The procedure subst is used for ex-panding the subscripts referred to.
The proceduresDoAir, DoArp DoPrlceRange, and DoStopsare from the "phrase library".
They generate ap-propriate phrases associated with an airline, an air-port, a price range, or whether or not a flight isnonstop.
One may think of these as rules for con-verting the semantic information, previously deter-mined by deep generation and stored in variablessuch as air and price, into a surface realization.
Forexample, "\[DoAir Sair\]" returns "American" and"\[DoPrice SPrite\]" returns " less than $1000".The construct opt-s (short for op__t)onalsubstitution) includes the text generated byexpanding its argument if that expansion is suc-cessful, or else catches and ignores any errors ifthe expansion was not successful.
The constructNonEmptyCon junet ion  is used to adjoin a listof phrases.
(The separators between phrases areoptional arguments.)
If the input list is empty,however, an error is generated.
In such a case (e.g.examples 1 and 2 above), the error is caught bythe enclosing opt-s, so the entire "which" clause isomitted.Another example of a construct isSayOnce.
Thisis used when generating a list of phrases, so thata particular script fragment will only be expandedand included the first time it is encountered.
Forexample, SayOnce has been used to omit the sec-ond occurrence of the word "departing" in (Excerpt1, Turn 7).
Similarly, in the following response toa user query about the arrival times of the flightsunder discussion, the second occurrence of the word"flights" has been omitted by a simple application2@of SayOnce:i see at leas t  3 f l ights  which arr ivebetween two P M and six P M, and 4which arr ive between six P M and ten P6 Conc lus ionIn developing our deep and surface generation mod-ules we have followed a strategy of starting with asimple approach and adding basic building blocks asthey are warranted, for example the generation con-structs described in section 5 and the utility func-tions of sections 4.1.
This strategy has helped usdevelop generation modules which are flexible, ro-bust, and interact well with the other componentsof our system.
Also, the tools presented here tendto reduce the growth in code size with complexity (asmeasured by the number of possible constraints).We are optimistic that these methods can be ap-plied to other domains, although certainly additionalfeatures would have to be added.
For instance, inExcerpt 2, we gave an example of a shortcomingof our system that arose when we summarized e-tails about a very short list of flights.
This problemcould be fixed either by subsuming the case of avery short list of flights into the general aggregationmechanism or by adding an additional mechanismto handle this separate case better.
Since the prob-lem seemed insignificant enough in the airline traveldomain we have not yet resolved it, but we expectthat experience with other domains will dictate thebest approach.We consider it to be an advantage of this ap-proach that it is not tied to a particular linguis-tic framework and affords rather straight forwarddevelopment.
This certainly seems appropriate forour application so far, where the summary script ofFigure 2 represents the typical level of complexityof the scripts we have had to develop.
It is pos-sible that this could become a limiting factor asthe complexity, scope, and variety of domains in-creases.
However, we expect other limitations to be-come more pressing.
For example, we plan to inves-tigate additional building blocks which will be usefulas we begin to delve into issues such as improvingour help messages or adding emphasis to particularparts of the information we want to convey, eithervia prosody or more finely crafted text.Re ferencesK.
Biatov, E. Bocchieri, G. Di Frabbrizio, C. Kahm,E.
Levin, S. Narayanan, A. Pokrovsky, P. Ruscitti,M.
Rahim, and L. Walker.
2000.
Spoken dialogsystems: Some case studies from AT~T.
In Pre-sentation at DARPA Communicator Workshop,Charleston, SC, Jan. 2000.
See http://www.dsic-web.net :8501/pub/comra_2000jan/ATT-Narayanan.pdf for presentation andhttp://www.dsic-web.net/ito/mectings/communicator_jan00/agenda.html for conferenceagenda.Michael Elhadad and Jacques Robin.
1992.
Control-ling content realization with functional unificationgrammars.
In Aspects of Automated Natural Lan-guage Generation, Lecture Notes in Artificial In-telligence, 587, pages 89-104.
Springer, Berlin.Michael Elhadad and Jacques Robin.
1996.
Anoverview of SUKGE: A re-usable comprehensivesyntactic realization component.
In Proceedings ofthe 8th International Workshop on Natural Lan-guage Generation, Beer Sheva, Israel.Michael Elhadad.
1989.
FUF: The universal uni-fier user manual.
Technical report, Departmentof Computer Science, Columbia University.
URL= http://www.cs.bgu.ac.il/surge/index.htm:K. A. Papineni, S. Roukos, and R. T. Ward.
1999.Free-flow dialog management using forms.
In Pro-ceedings of Eurospeech-99, pages 1411-1414, Sept.1999.A.I.
Rudnicky, E. Thayer, P. Constantinides,C.
Tchou, R. Shern, K. Lenzo, W. Xu, and A. Oh.1999.
Creating natural dialogs in the CarnegieMellon Communicator system.
In Proceedings ofEurospeech-1999, pages 931-934, Budapest, Hun-gary, Sept. 1999.S.
Seneff, E. Hurley, R. Lau, C. Pao, P. Schmid, andV.
Zue.
1998.
Galaxy-II: A reference architecturefor conversational system development.
In Pi'o-ceedings of ICSLP-1998, pages 1153-1156, Syd-ney, Australia, Nov. 30-Dec. 4, 1998.Wayne Ward and Bryan Pellom.
1999.
The CUCommunicator system.
In 1999 IEEE Work-shop on Automatic Speech Recognition and Un-derstanding, Keystone Colorado, Dec. 1999.AcknowledgementsThe author would like to thank Mark Epstein,Adwait Ratnaparhki, Salim Roukos, Kishore Paly-ineni, and Todd Ward for helpful discussions.
Thiswork was supported in part by DARPA contractMDA972-97-C-0012.26
