A Modern Computational Linguistics Course Using DutchGosse BoumaGroningen UniversityPO Box 716NL 9700 AS Groningengosse@let, rug .
nlAbstractThis paper describes material for acourse in computational linguisticswhich concentrates on building (partsof) realistic language technology ap-plications for Dutch.
We present anoverview of the reasons for develop-ing new material, rather than usingexisting text-books.
Next we presentan overview of the course in the formof six exercises, covering advanceduse of finite state methods, grammardevelopment, and natural languageinterfaces.
The exercises emphasise thebenefits of special-purpose developmenttools, the importance of testing onrealistic data-sets, and the possibilitiesfor web-applications based on naturallanguage processing.1 In t roduct ionThis paper describes a set of exercises in compu-tational linguistics.
The material was primarilydeveloped for two courses: an general introduc-tion to computational linguistics, and a more ad-vanced course focusing on natural anguage inter-faces.
Students who enter the first course havea background in either humanities computing orcognitive science.
This implies that they possesssome general programming skills and that theyhave at least some knowledge of general inguis-tics.
Furthermore, all students entering the courseare familiar with logic programming and Prolog.The native language of practically all students isDutch.The aim of the introductory course is to providea overview of language technology applications, ofthe concepts and techniques used to develop suchapplications, and to let students gain practical ex-perience in developing (components) of these ap-plications.
The second course focuses on compu-tational semantics and the construction of natu-ral language interfaces using computational gram-mars.Course material for computational linguisticsexists primarily in the form of text books, suchas Allen (1987), Gazdar and Mellish (1989) andCovington (1994).
They focus primarily on ba-sic concepts and techniques (finite state automata,definite clause grammar, parsing algorithms, con-struction of semantic representations, etc.)
andthe implementation f toy systems for experiment-ing with these techniques.
If course-ware is pro-vided, it consists of the code and grammar frag-ments discussed in the text-material.
The lan-guage used for illustration is primarily English.While attention for basic concepts and tech-niques is indispensable for any course in thisfield, one may wonder whether implementationissues need to be so prominent as they are inthe text-books of, say, Gazdar and Mellish (1989)and Covington (1994).
Developing natural lan-guage applications from scratch may lead to max-imal control and understanding, but is also time-consuming, requires good programming skillsrather than insight in natural language phenom-ena, and, in tutorial settings, is restricted to toy-systems.
These are disadvantages for an intro-ductory course in particular.
In such a course, anattractive alternative is to skip most of the imple-mentation issues, and focus instead on what canbe achieved if one has the right tools and dataavailable.
The advantage is that the emphasis willshift naturally to a situation where students mustconcentrate primarily on developing accounts forlinguistic data, on exploring data available in theform of corpora or word-lists, and on using realhigh-level tools.
Consequently, it becomes fea-sible to consider not only toy-systems and toy-fragments, but to develop more or less realisticcomponents of natural anguage applications.
Asthe target language of the course is Dutch, thisalso implies that at least some attention has tobe paid to specific properties of Dutch grammar,and to (electronic) linguistic resources for Dutch.Since students nowadays have access to powerfulhardware and both tools and data can be dis-tributed easily over the internet, there are no realpractical obstacles.Text-books which are concerned primarily withcomputational semantics and natural anguage in-terfaces, such as Pereira and Shieber (1987) andBlackburn and Bos (1998), tend to introduce atoy-domain, such as a geography database or anexcerpt of a movie-script, as application area.
Intrying to develop exercises which are closer to realapplications, we have explored the possibilities ofusing web-accessible databases as back-end for anatural anguage interface program.More in particular, we hope to achieve the fol-lowing:?
Students learn to use high-level tools.
Thedevelopment of a component for morphologi-cal analysis requires far more than what canbe achieved by specifying and implementingthe underlying finite state automata directly.Rather, abstract descriptions of morpholog-ical rules should be possible, and softwareshould be provided to support developmentand debugging.
Similarly, while a program-ming language such as Prolog offers possi-bilities for relatively high-level descriptionsof natural language grammars, the advan-t, ages of specialised languages for implement-ing unification-based grammars and accom-panying tools are obvious.
Furthermore, theavailability of graphical interfaces and visual-isation in tutorial situations is a bonus whichshould not be underestimated.?
Students learn to work with real data.
Indeveloping practical, robust, wide-coverage,language technology applications, researchershave found that the use of corpora and elec-tronic dictionaries is absolutely indispens-able.
Students should gain at least somefamiliarity with such sources, learn how tosearch large datasets, and how to deal withexceptions, errors, or unclear cases in realdata.?
Students become familiar with quantitativeevaluation methods.
One advantage of de-veloping components using real data is thatone can use the evaluation metrics domi-nant in most current computational linguis-tics research.
That is, an implementation ofhyphenatiOn-rule or a grammar for temporalexpressions can be tested by measuring its ac-curacy on a list of unseen words or utterances.This provides insight in the difficulty of solv-ing similar problems in a robust fashion forunrestricted text.Students develop language technology compo-nents for Dutch.
In teaching computationallinguistics to students whose native languageis not English, it is common practice to fb-cus primarily on the question how the (En-glish) examples in the text book can be car-ried over to a grammar for one's own lan-guage.
As this may take considerable timeand effort, more advanced topics are usuallyskipped.
In a course which aims primarily atDutch, and which also contains material de-scribing some of the peculiarities of this lan-guage (hyphenation rules, spelling rules rele-vant to morphology, word order in main andsubordinate clauses, verb clusters), there isroom for developing more elaborate and ex-tended components.Students develop realistic applications.
Theuse of tools and real data makes it easierto develop components which are robust andwhich have relatively good coverage.
Appli-cations in the area of computational seman-tics can be made more interesting by exploit-ing the possibilities offered by the internet.The growing amount of information availableon the internet provides opportunities for ac-cessing much larger databases (such as publictransport ime-tables or library catalogues),and therefore, for developing more realisticapplications.The sections below are primarily concerned with anumber of exercises we have developed to achievethe goals mentioned above.
A accompanying textis under development.
12 F in i te  State  MethodsA typical course in computational linguisticsstarts with finite state methods.
Finite state tech-niques can provide computationally efficient solu-tions to a wide range of tasks in natural anguageprocessing.
Therefore, students hould be familiarwith the basic concepts of automata (states andtransitions, recognizers and transducers, proper-ties of automata) and should know how to solvet See www.
let.
rug.
nl/~gosse/tt for a preliminaryversion of the text and links to the exercises describedhere.File Settings Operations Produce Hs!pregex : ~l\[?"
-\[?
*'v.+.t#11,\[?
".v:r,+.t#\]) ~ IString: IX_J-zlEdge Angle: \[6\]i5 : X -d is tance:  1120' "\[' DisPiay Sigma I D isp lay  Fa ~ount F~Figure h FSA.
The regular expression and transducer are an approximation of the rule for realizing afinal -v in abstract stems as - f  if followed by the suffix - t  (i.e.
leev+t ~ lee f t ) .
\[A,B\] denotes ttbllowed by B, {A,B} denotes t or B, '?'
denotes any single character, and t - B denotes the stringdefined by t minus those defined by B.
A.
'B is the transduction of t into B.
'+' is a morpheme boundary,and the hash-sign is the end of word symbol.toy natural language processing problems usingautomata .However, when solving 'real' problems most re-searchers use software supporting high-level de-scriptions of automata, automatic compilationand optimisation, and debugging facilities, pack-ages for two-level morphology, such as PC-KIMMO(Antworth, 1990), are well-known examples.
Asdemonstrated in Karttunen etal .
(1997), an evenmore flexible use of finite state technology can beobtained by using a calculus of regular expres-sions.
A high-level description language suited forlanguage ngineering purposes can be obtained byproviding, next to the standard regular expressionoperators, a range of operators intended to facili-tate the translation of linguistic analyses into reg-ular expressions.
Complex problems can be solvedby composing automata defined by simple regularexpressions.We have developed a number of exercises inwhich regular expression calculus is used to solvemore or less 'realistic' problems in language tech-nology.
Students use the FSA-utilities package 2(van Noord, 1997), which provides a powerful an-guage for regular expressions and possibilities foradding user-defined operators and macros, compi-lation into (optimised) automata, and a graphicaluser-interface.
Automata can be displayed graph-ically, which makes it easy to learn the meaningof various regular expression operators (see figure1).Exercise I: Dutch Syllable StructureHyphenation for Dutch (Vosse, 1994) requires thatcomplex words are split into morphemes, and mor-2www.
let.
rug.
nl/~vannoord/f sa/!
........ ?
.....macro(syll, \[ onset-, nucleus, coda ^ \] ).macro(onset, { \[b, {i ,r} ^\] , \[c ,h- ,{l,r}-\] }) .macro(nucleus, { \[a,{\[a,{i,u}^\],u}^\],\[e,{\[e,u ^\] ,i,o,u}-\] }).macro(coda, {\[b, {s,t}^\], \[d,s^,t-\]}).Figure 2: First approximation of a regular expres-sion defining Dutch syllables, t ^  means that t isoptional.phemes are split into syllables.
Each morphemeor syllable boundary is a potential insertion spotfor a hyphen.
Whereas one would normally de-fine the notion "syllable' in terms of phonemes, itshould be defined in terms of character strings forthis particular iask.
The syllable can easily bedefined in terms of a regular expression.
For in-stance, using the regular expression syntax of FSA,a first approximation is given in figure 2.
Thedefinition in 2 allows such syllables as \[b, a ,d \ ] ,\[b,1 ,a,d\]  , \ [b~r ,e ,e  ,d ,s , t \ ] ,  etc.Students can provide a definition of the Dutchsyllable covering all perceived cases in abouttwenty lines of code.
The quality of the solu-tions could be tested in two ways.
First, stu-dents could test which words of a list of over5000 words of ~he form \[C*,V+,C*\] (where C andV are macros for consonants and vowels, respec-tively) are accepted and rejected by the syllableregular expression.
A restrictive definition will re-ject words which are bisyllabic (ge i jk t )  and for-eign words such as crash, s f inx,  and jazz.
Sec-ond, students could test how accurate the defi-nition is in predicting possible hyphenation posi-tions in a list of morphophonemic words.
To thisend, a list of 12000 morphophonemic words andtheir hyphenation properties was extracted fromthe CELEX lexical database (Baayen et al, 1993).
3Tile best solutions for this task resulted in a 5%error rate (i.e.
percentage of words in which awrongly placed hyphenation point occurs).Exercise I h  Verbal  InflectionA second exercise concentrated on finite statetransducers.
Regular expressions had to be con-aThe hyphenation task itself was defined as a finitestate transducer:macro(hyph,  rep lace( \ [ \ ]  : - , sy l l ,  sy l l ) )The operator replace (Target, LeftContext,RightContext) implements 'leftmost' ( and 'longestmatch') replacement (Karttunen, 1995).
This ensuresthat in the cases where a consonant could be eitherfinal in a coda or initial in tile next onset, it is in factadded to the onset.Under ly ing  Surface Glossa.
werk+en werken work\[mF\]b. bak+en bakken bak@NF\]c. raakSen raken hit\[INF\]d. verwen+en verwennenpamper\[INF\]e. teken+en tekenen draw\[lNF\]f. aanpik+en aanpikken catch up\[INF\]g. zanik+en zaniken wine\[INF\]h. leev+en leven liV@NF\]i. leev leef live\[paEs, 1, sa.\]j. leev+t leeft live(s)\[paEs, 2/3, SG.\]k. doe+en doen do\[INe\]h ga+t gaat go(es)\[PRES, 2/3, SO.\]m. zit+t zit sit(s)\[PRES, 2/3, S(~.\]n. werk+Te werkte worked\[PAST, sa\]o. hoor+Te hoorde heard\[PAST, SG\]p. blaf+Te blafte barked\[pAsT, SG\]q. leev+Te leefde lived\[PAST, SG\]Figure 3: Dutch verbal inflectionstructed for computing the surface form of ab-stract verbal stem forms and combinations of astem and a verbal inflection suffix (see figure 3).Several spelling rules need to be captured.
Ex-amples (b) and (c) show that single consonantsfollowing a short vowel are doubled when followedby the '+en'  suffix, while long vowels (normallyrepresented by two identical characters) are writ-ten as a single character when followed by a singleconsonant and ' +en' Examples (d-g) illustratethat the rule which requires doubling of a conso-nant after a short vowel is not applied if the pre-ceding vowel is a schwa.
Note that a single ' e '(sometimes ' i ' )  can be either a stressed vowel ora schwa.
This makes the rule hard to apply on thebasis of the written form of a word.
Examples (h-j) illustrate the effect of devoicing on spelling.
Ex-amples (i-l) illustrate several other irregularities inpresent ense and infinitive forms that need to becaptured.
Examples (n-q), finally, illustrate pasttense formation of weak verbal stems.
Past tensesare formed with either a '+te '  or '+de' ending(' +ten ' / '  +den' for plural past tenses).
The formof the past tense is predictable on the basis of thepreceding stem, and this a single underlying suffix'+Te' is used.
Stems ending with one of the con-sonants ' c , f ,h ,k ,p ,s , t '  and 'x '  form a pasttense with '+te ' ,  while all other stems receive a'+de' ending.
Note that the spelling rule for de-voicing applies to past tenses as well (p-q).
Inthe exercise, only past tenses of weak stems wereconsidered.The implementation of spelling rules as trans-ducers is based on the replace-operator (Kart-macro(verbal_ inf lect ion,shorten o double o past_tense).macro (shorten,rep lace( \ [a ,a \ ] :a  , \[ \] , \ [cons,+,e,n\])) .macro (double,replace (b : \[b, b\] ,\[cons,vowel\] , \[+,e,n\] )).macro (past _tense,te_suf f ix  o past default).macro (te_suf f ix,replace( \[T\] : \[t\] ,\ [{c , f ,h ,k , s ,p , t ,x} ,+\ ] ,  \ [ \ ] ) ) .macro (past_defau l t ,rep lace( IT \ ]  : \ [d\] ,  \ [ \ ] ,  \ [ \ ] ) ) .Figure 4: Spelling rules for Dutch verbal inflec-tion.
A o B is the composition of transducers hand B.tunen, 1995).
A phonological or spelling ruleU-+S/L_Rcan be implemented in FSA as:rep lace(Under ly ing :Sur face ,  Lef t ,  R ight )An  example  illustrating the rule format for trans-ducers is given in figure 4.
Most  solutions to theexercise consisted of a collection of approximately30 replace-rules wh ich  were composed to forma single finite state transducer.
The  size of thistransducer varied between 4.000 and  over 16.000states, indicating that the complexity of the taskis well beyond reach of text-book approaches.For testing and  evaluation, a list of almost50.000 pairs of underlying and  surface forms wasextracted f rom Celex.
4 i0 % of the data was  givento the students as training material.
A lmost  all so-lutions achieved a high level of accuracy, even forthe 'verwennen/ tekenen '  cases, wh ich  can onlybe dealt with using heuristics.
The  best solutions}lad less than 0 ,5% error-rate when tested on theunseen data.4 Reliable extraction of this information from Celexturned out to be non-trivial.
Inflected forms are givenin the database, and linked to their (abstract) stem bymeans  of an index.
However, the distinction betweenweak and strong past tenses is not marked explicitly inthe database and thus we had to use the heuristic thatweak past tense singular forms always end in 'te' or'de', while strong past tense forms do not.
Anotherproblem is the fact that different spellings of a wordare linked to the same index.
Thus, 'scalperen' (toscalp) is linked to the stem 'skalpeer'.
For the pur-poses of this exercise, such variation was largely elim-inated by several ad-hoe filters.3 Grammar DevelopmentNatural language applications which perform syn-tactic analysis can be based on crude methods,such as key-word spotting and pattern match-ing, more advanced but computationally effi-cient methods, such as finite-state syntactic anal-ysis, or linguistically motivated methods, suchas unification-based grammars.
At the low-endof the scale are systems which perform partialsyntactic analysis of unrestricted text (chunk-ing), for instance for recognition of names ortemporal expressions, or NP-constituents in gen-eral.
At the high-end of the scale are wide-coverage (unification-based) grammars which per-form full syntactic analysis, sometimes for unre-stricted text.
In the exercises below, students de-velop a simple grammar on the basis of real dataand students learn to work with tools for develop-ing sophisticated, linguistically motivated, gram-mars.3.1 Exercise III: Recognizing temporalexpressionsA relatively straightforward exercise in grammardevelopment is to encode the grammar of Dutchtemporal expressions in the form of a context-freegrammar .In this particular case, the grammar  is actuallyimp lemented  as a Prolog definite clause grammar .Whi le  the top-down,  backtracking, search strat-egy of Prolog has certain drawbacks  (most  no-tably the fact that it will fail to terminate on left-recursive rules), using DCG has the advantage thatits relationship to context-free grammar  is rela-tively transparent, it is easy to use, and  it providessome of the concepts also used in more  advancedunification-based frameworks.
The  fact that thenon-terminal symbols  of the grammar  are Pro logterms also provides a natural means  for adding an-notation in the form of parse-trees or semantics.The  task of this exercise was  to develop agrammar  for Dutch  tempora l  expressions wh ichcovers all instances of such expressions found inspoken language.
The  more  trivial part of thelexicon was  given and  a precise format  was  de-fined for semantics.
The  format  of the grammarto be developed is illustrated in figure 5.
Thetop rule rewrites a temp_expr  as a weekday,  fol-lowed by a date, followed by an hour.
An  hourrewrites as the ad-hoc category approx imate ly(containing several words  wh ich  are not cru-cial for semantics but wh ich  frequently occurin spontaneous utterances), and  an hour l  cat-egory, wh ich  in turn can rewrite as a categoryhour_ lex  followed by the word  uur, followed!temp_expr(date(Da,Mo,Ye),day(We),hour(Ho,Mi)) ..... >weekday(We), date(Da,Mo,Ye),hour(Ho,Mi).weekday( l )  - -> \[zondag\] .date(Date,Month)  - ->date_ lex(Date) ,  month lex(Month).hour(Hour,Min) -->approximately, hourl(Hour,Min).approximately -->\[ongeveer\] ; \[ore\] ;\[omstreeks\] ; \[\].\[rond\] ;hourl(Ho,Mi) -->hour_lex(Ho), \[uur\], min_lex(Mi).hourl(Ho,Mi) -->min_lex(Mi), \[over\], hour_lex(Ho).Figure 5: DCG for temporal expressions.by a min_lex.
Assuming suitable definitionsfor the lexical (we-terminal) categories, this willgenerate such strings as zondag v i j f  j anuar iomstreeks  t ien  uur v i j f t ien  (Sunday, Jan-uary the fifth, at ten fifteen).
A more or less com-plete grammar of temporal expressions of this sorttypically contains between 20 and 40 rules.A test-corpus was constructed by extract-ing 2.500 utterances containing at least onelexical item signalling a temporal expression(such as a weekday, a month, or wordssuch as uur, minuut, week, morgen, kwart,omstreeks,  etc.)
from a corpus of dialogues col-lected from a railway timetable information ser-vice.
A subset of 200 utterances was annotated.The annotation indicates which part of the utter-ance is the temporal expression, and its semantics.An example is given below.sentence (42, \[j a, ik,wil ,reizen, op,zesent wint ig, j anuari, s_morgens, om,tien,uur,vertrekken\], \[op,zesentwintig, j anuari, s_morgens, om,tien,uur\], temp(date(_,l,26),day( .... 2) ,hour (I0,_))) .The raw utterances and 100 annotated utteranceswere made available to students.
A grammar cannow be tested by evaluating how well it managesto spot temporal phrases within an utterance andassign the correct semantics to it.
To this end, aparsing scheme was used which returned the (left-head_complement_struct(Mthr,Hd,Comp) "-head_feature_principle(Mthr,Hd),Hd:comp <=> Comp.rule(np_pp,vp/VP,\[np/NP,pp/PP,v/V\]) :-head_complement_struct(VP,V,np_pp),case(NP,acc),PP:head:pform <=> aan.Figure 6: A fragment of the grammar for Dutchmost) maximal sub-phrase of an utterance thatcould be parsed as a temporal expression.
This re-sult was compared with the annotation, thus pro-viding a measure for 'word accuracy' and 'seman-tic accuracy' of the grammar.
The best solutionsachieved over 95 70 word and semantic accuracy.Exerc ise IV: Uni f icat ion grammarLinguistically motivated grammars are almostwithout exception based on some variant of uni-fication grammar (Shieber, 1986).
Head-drivenphrase structure grammar (HPSG) (Pollard andSag, 1994) is often taken as the theoretical ba-sis for such grammars.
Although a complete in-troduction into the linguistic reasoning underly-ing such a framework is beyond the scope of thiscourse, as part of a computational linguistics classstudents hould at least gain familiarity with thecore concepts of unification grammar and someof the techniques frequently used to implementspecific linguistic analyses (underspecification, i -heritance, gap-threading, unary-rules, empty ele-ments, etc.
).To this end, we developed a core grammarof Dutch, demonstrating how subject-verb agree-ment, number and gender agreement within NP's ,and subcategorization can be accounted for.
Fur-thermore, it illustrates how a simplified form ofgap-threading can be used to deal with unboundeddependencies, how the movement account for theposition of the finite verb in main and subordi-nate clauses can be mimicked using an 'emptyverb' and some feature passing, and how auxiliary-participle combinations can be described using a'verbal complex'.
The design of the grammar issimilar to the ovIs-grammar (van Noord et al,1999), in that it uses rules with a relatively specificcontext-free backbone.
Inheritance of rules frommore general 'schemata' and 'principles' is usedto add feature constraints to these rules withoutredundancy.
The schemata nd principles, as wellas many details of the analysis, are based on HPSG.Figure 6 illustrates the general format of phrasestructure schemata nd feature constraints.Halt Grammar Reconsult, D_ebugXH@I I __mt smmImmm / \I I@@EimI-,lJ/Top \ ]i?
": ..2, : .
. '
?
:  f-,iii /Figure 7: Screenshot of HdrugThe grammar fragment is implemented usingthe HDRUG development system 5 (van Noord andBouma, 1997).
HDRUG provides a description lan-guage for feature constraints, allows rules, lexicalentries, and 'schemata' or 'principles' to be visu-alised in the form of feature matrices, and providesan environment for processing example sentenceswhich supports the display of derivation trees andpartial parse results (chart items).
A screen-shotof HDRUG is given in figure 7.As an exercise, students had to extend thecore fragment with rules and lexical entries foradditional phrasal categories (PP'S), verbal sub-categorization types (verbs selecting for a PP-complement), NP constructions (determiner-lessNP's), verb-clusters (modal+infinitive combina-tions), and WH-words (wie, wat, welke, wiens, ho-eveel, ... (who, what, which, whose, how many,?
..).
To test the resulting fragment, students werealso given a suite of example sentences which hadto be accepted, as well as a suite of ungrammaticalsentences.
Both test suites were small (consisting5www.let.rug.nl/-vannoord/hdrug/of less than 20 sentences each) and constructed byhand.
This reflects the fact that this exercise isprimarily concerned with the implementation of asophisticated linguistic analysis?4 Natura l  Language Inter facesPractical courses in natural language interfacesor computational semantics (Pereira and Shieber,1987; Blackburn and Bos, 1998) have used atoy database, such as geographical database oran excerpt of a movie script, as application do-main.
The growing amount of information avail-able on the internet provides opportunities foraccessing much larger databases (such as publictransport ime-tables or library catalogues), andtherefore, for developing more realistic applica-tions.
In addition, many web-sites provide in-formation which is essentially dynamic (weatherforecasts, stock-market information, etc.
), whichmeans that applications can be developed whichgo beyond querying or summarising pre-definedsets of data.
In this section, we describe two ex-ercises in which a natural language interface forweb-accessible information is developed.
In bothcases we used the PILLOW package 6 (Cabeza et al,1996) to access data on the web and tfhfislate the "resulting HTML-code into Prolog facts.4.1 Exercise V: Natural LanguageGenerationReiter and Dale (1997) argue that the generationof natural language reports from a database withnumerical data can often be based on low-techprocessing language engineering techniques uchas pattern matching and template filling.
Siteswhich provide access to numerical data which issubject to change over time, such as weather fore-casts or stock quotes, provide an excellent appli-cation domain for a simple exercise in languagegeneration.For instanc% in one exercise, students wereasked to develop a weather forecast generator,which takes the long-term (5 day) forecast of theDutch meteorological institute, KNMI, and pro-duces a short text describing the weather of thecoming days.
Students were given a set of pre-collected numerical data as well as the text of thecorresponding weather forecasts as produced bythe KNMI.
These texts served as a 'target cor-pus', i.e.
as an informal definition of what theautomatic generation component should be ableto produce.To produce a report generator involved theimplementation of 'domain knowledge' (a 70%chance of rain means that it is 'rainy', if max-imum and minimum temperatures do not varymore than 2 degrees, the temperature mains thesame, else there is a change in temperature thatneeds to be reported, etc.)
and rules which applythe domain knowledge to produce a coherent re-port.
The latter rules could be any combinationof' format or write instructions and more advancedtechniques based on, say, definite clause grammar.The completed system can not only be tested onpre-collected material, but also on the informationtaken from the current KNMI web-page by usingthe Prolog-HTTP interface.A similar exercise was developed for the AEX(stock market) application described below.
Inthis case, students we asked to write a report gen-erator which reports the current state of affairs attile Dutch stock market AEX, using numerical dataprovided by the web-interface to the Dutch newsservice 'NOS teietext' and using similar reports onteletext itself as 'target-corpus'.Ohttp://www,clip.dia.fi.upm.es/miscdocs/pillow/pillow.html4.2 Exercise VI: Question answeringMost natural anguage dialogue systems are inter-faces to a database.
In such situations, the maintask of the dialogue system is to answer questionsformulated by the user.The construction of a question-answering sys-tem using linguistically-motivated t chniques, re-quires (minimally) a domain-specific grammarwhich performs semantic analysis and a com-ponent which evaluates the semantic representa-tions output by the grammar with respect o thedatabase.
Once these basic components are work-ing, one can try to extend and refine the sys-tem by adding (domain-specific or general) disam-biguation, contextual-interpretation (of pronouns,elliptic expressions, etc), linguistically-motivatedmethods for formulating answers in natural lan-guage, and scripts for longer dialogues.In the past, we have used information aboutrailway time-tables as application domain.
Re-cently, a rich application domain was created byconstructing a stock-market game, in which par-ticipants (the students taking the class and someothers) were given an initial sum of money, whichcould be invested in shares.
Participants couldbuy and sell shares at wish.
Stock quotes were ob-tained on-line from the news service 'NOS teletext'.Stock-quotes and transactions were collected in adatabase, which, after a few weeks, contained over3000 facts.The unification-based grammar introduced pre-viously (in exercise IV) was adapted for the cur-rent domain.
This involved adding semanticsand adding appropriate lexical entries.
Further-more, a simple question-answering module wasprovided, which takes the semantic representationfor a question assigned by the grammar (a formulain predicate-logic), transforms this into a clausewhich can be evaluated as a Prolog-query, callsthis query, and returns the answer.The exercise for the students was to extend thegrammar with rules (syntax and semantics) todeal with adjectives, with measure phrases (vijfeuro/procent (five euro/percent), with date ex-pressions (op vijf januari (on January, 5)), andconstructions uch as aandelen Philips (Philipsshares), and koers van VNU (price of VNU) whichwere assigned a non-standard semantics Next, thequestion system had to be extended so as to han-dle a wider range of questions.
This involvedmainly the addition of domain-specific translationrules.
Upon completion of the exercise, question-answer pairs of the sort illustrated in 8 were pos-sible.Q: wat is de koers van ABN AMR0what is the price of ABN AMR0A: 17,75Q: is het aandeel KPN gisteren gestegenhave the KPN shares gone up yesterdayA: jayesQ: heeft Rob enige aandelen Baan verkochthas Rob sold some Baan sharesA: neenoQ: welke spelers bezitten aandelen BaanWhich players possess Baan sharesA: gb, woutr, pieter, smbQ: hoeveel procent zijn de aandelen kpnHow many percent have the KPN sharesgestegengone upA: 5Figure 8: Question-answer pairs in the AEX dia-logue system.5 Conc lud ing  remarksDeveloping realistic and challenging exercises incomputational linguistics requires upport in theibrm of development tools and resources.
Power-ful tools are available for experimenting with finitestate technology and unification-based grammars,resources can be made available asily using in-ternet, and current hardware allows students towork comibrtably using these tools and resources.The introduction of such tools in introductorycourses has the advantage that it provides a re-alistic overview of language technology researchand development.
Interesting application area'sfor natural anguage dialogue systems can be ob-tained by exploiting the fact that the internet pro-vides access to many on-line databases.
The re-sulting applications give access to large amountsof actual and dynamic information.
For educa-tional purposes, this has the advantage that itgives a feel for the complexity and amount of workrequired to develop 'real' applications.The most important problem encountered in de-veloping the course is the relative lack of suit-able electronic resources.
For Dutch, the CELEXdatabase provides a rich source of lexical infor-mation, which can be used to develop interest-ing exercises in computational morphology.
De-velopment of similar, data-oriented, exercises inthe area of computational syntax and semanticsis hindered, however, by the fact that resources,such as electronic dictionaries proving valence andconcept information, and corpora nnotated withpart of speech, syntactic structure, and semanticinformation, are missing to a large extent.
Thedevelopment of such resources would be most wel-come, not only for the development of languagetechnology for Dutch, but also for educationalpurposes.AcknowledgementsI would like to thank Gertjan van Noord for hisassistance in the development of some of the ma-terials and Rob Koeling for teaching the courseon natural anguage interfaces with me.
The ma-terial presented here is being developed as partof the module natuurlijke taalinterfaccs of the(Kwaliteit & Studeerbaarheids-) project brede on-derwijsinuovatie k nnissystemen (BOK), which de-velops (electronic) resources for courses in thearea of knowledge based systems.
The project iscarried out by several Dutch universities and isfunded by the Dutch ministry for Education, Cul-ture, and Sciences.Re ferencesJames F. Allen.
1987.
Natural Language Un-derstanding.
Benjamin Cummings, Menlo ParkCA.Evan L. Antworth.
1990.
PC-KIMMO : a two-level processor for morphological nalysis.
Sum-mer Institute of Linguistics, Dallas, Tex.R.
H. Baayen, R. Piepenbrock, and H. van Rijn.1993.
The CELEX Lexical Database (CD-ROM).
Linguistic Data Consortium, Universityof Pennsylvania, Philadelphia, PA.Patrick Blackburn and Johan Bos.
1998.
B.ep-resentation and inference for natural anguage:A first course in computational semantics.
Ms.,Department of Computational Linguistics, Uni-versity of Saarland, Saarbrficken.D.
Cabeza, M. Hermenegildo, and S. Varma.1996.
The pillow/ciao library for internet/wwwprogramming using computational logic sys-tems.
In Proceedings of the 1st Workshop onLogic Programming Tools for INTERNET Ap-plications, JICSLP"96, Bonn, September.Michael A. Covington.
1994.
Natural LanguageProcessing for Prolog Programmers.
PrenticeHall, Englewood Cliffs, New Jersey.Gerald Gazdar and Christopher S. Mellish.
1989.Natural Language Processing in Prolog; an In-troduction to Computational Linguistics.
Addi-son Wesley.L.
Karttunen, J.P. Chanod, G. Grefenstette, andA.
Schiller.
1997.
Regular expressions for lan-guage engineering.
Natural Lanuage Engineer-ing, pages 1-24.Lauri Karttunen.
1995.
The replace opera-tor.
In 33th Annual Meeting o/ the Associa-tion for Computational Linguistics, pages 16-23, Boston, Massachusetts.Fernando C.N.
Pereira and Stuart M. Shieber.1987.
Prolog and Natural Language Analysis.Center for the Study of Language and Informa-tion Stanford.Carl Pollard and Ivan Sag.
1994.
Head-drivenPhrase StruCture Grammar.
Center for theStudy of Language and Information Stanford.Ehud Reiter and Robert Dale.
1997.
Building ap-plied natural language generation systems.
Nat-ural Language Engineering, 3(1):57-87.Stuart M. Shieber.
1986.
Introduction toUnification-Based Approaches to Grammar.Center for the Study of Language and Infor-mation Stanford.Gertjan van Noord and Gosse Bouma.
1997.Hdrug.
a flexible and extendable environmentfor natural anguage processing.
In DominiqueEstival, Alberto Lavelli, and Klaus Netter, ed-itors, Computational Environments for Gram-mar Development and Linguistic Engineering,pages 91-98, Somerset, NJ.
Association forComputational Linguistics.Gertjan van N0ord, Gosse Bouma, Rob Koeling,and Mark-Jan Nederhof.
1999.
Robust gram-matical analysis for spoken dialogue systems.,lournal of Natural Language Engineering.
Toappear.Gertjan van Noord.
1997.
FSA Utilities: A tool-box to manipulate finite-state automata.
InDarrell Raymond, Derick Wood, and Sheng Yu,editors, Automata Implementation.
SpringerVerlag.
Lecture Notes in Computer Science1260.Theo Vosse.
1994.
The Word Connection.
Ph.D.thesis, Rijksuniversiteit Leiden.
