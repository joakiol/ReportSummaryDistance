WordFreak: An Open Tool for Linguistic AnnotationThomas Morton and Jeremy LaCivitaDepartment of Computer and Information ScienceUniversity of PennsylvaniaPhiladelphia, PA 19104{tsmorton,lacivita}@cis.upenn.eduAbstractWordFreak is a natural language annotationtool that has been designed to be easy toextend to new domains and tasks.
Specifically,a plug-in architecture has been developedwhich allows components to be added toWordFreak for customized visualization,annotation specification, and automatic an-notation, without re-compilation.
The APIsfor these plug-ins provide mechanisms toallow automatic annotators or taggers toguide future annotation to supports activelearning.
At present WordFreak can be usedto annotate a number of different types ofannotation in English, Chinese, and Arabicincluding: constituent parse structure anddependent annotations, and ACE named-entityand coreference annotation.
The Java sourcecode for WordFreak is distributed under theMozilla Public License 1.1 via SourceForge at:http://wordfreak.sourceforge.net.This site also provides screenshots, and a webdeployable version of WordFreak.1 IntroductionThe adoption of statistical methods in natural languageprocessing (NLP) has also created a need for rapid anno-tation of new data.
While statistical techniques for a va-riety of NLP processing tasks exist, applying these tech-niques to slightly different tasks, or even adapting an ex-isting statistical model to a different domain requires theannotation of new text.
Often the amount of data neededis minimal but setting up an interface which makes thisannotation easy can be a time consuming task.
This isespecially the case when trying to use active learning toguide the annotation.
Out of this set of needs, we be-gan developing an annotation tool which eventually wasnamed WordFreak.
These needs led us to focus on mak-ing the software easily extensible and reusable, includedthe integration of automatic annotators, and developedthe tools entirely in Java to facilitate multi-language andmulti-platform support.2 ComponentsWordFreak has a number of different types of compo-nents.
These include two types of data visualization com-ponents, annotation scheme components which define thetype of annotation which is taking place, and automaticannotators or taggers.
Each of these components im-plements a common interface so that adding additionalcomponents only requires implementing the same inter-face.
Additionally, WordFreak examine the environmentin which it is run and gathers up any components whichimplement one of these interfaces.
This allows compo-nents to be added to it without re-compilation of the orig-inal source code.2.1 VisualizationThe visualization components are called Viewers andChoosers.
Prototypically the Viewer is where the userlooks to perform the annotation.
WordFreak currentlycontains four such Viewers which display text, trees, aconcordance, and tables respectively.
While particularviewers are better suited to certain tasks, multiple view-ers can be used simultaneously.
The viewer are displayedin a tabbed-pane for easy access but can also be removedif the user wishes to see multiple views of the data simul-taneously.The second type of visualization components arecalled Choosers.
These are typically used to display thechoices that an annotator needs to make in a particular an-notation scheme.
Choosers are specific to an annotationscheme but are constructed via a set of re-usable choosercomponents.
For example, a typical chooser consist ofa navigation component which allows the user to moveEdmonton, May-June 2003Demonstrations , pp.
17-18Proceedings of HLT-NAACL 2003through annotations, a buttons component parameterizedto contain names of the relationships your annotating, anda comment component which allows a user to make afree-form comments about a particular annotation.
Cur-rently there are chooser components for the above de-scribed tasks as well as tree representations which havebeen used to display annotation choices for tasks such ascoreference and word sense disambiguation.2.2 Task DefinitionsAdapting WordFreak to new annotation tasks is a com-mon task.
This has led us to try and minimizes theamount of new code that needs to be written for new taskdefinitions.
We have used a two tiered approach to newtask definitions.The first employs the inheritance mechanisms avail-able in Java.
To define a new task or annotationscheme one can simply sub-classes an existing Annota-tionScheme class, initialize what types of annotations thenew task will be based on, define the names of the set ofrelationships you will be positing over these annotations,and specify what chooser components you want to use todisplay this set of names.
While many options can be cus-tomized such as keyboard short-cuts, color assignment toparticular relationships, and constraints on valid annota-tion, the default assignments use the most likely settingsso a typical annotation scheme requires under 100 linesof well delimited code.
Annotation schemes which in-volve more complicated interactions such as coreferenceand word sense disambiguation have taken approximately300 lines of code specific to that task.The second mechanism, which is currently being de-veloped, allows a task to be parameterized with anxml file.
This can be applied if an existing annotationscheme similar to your task has already been developed.At present we have used this mechanism to customizenamed-entity and coreference task which are similar totheir corresponding MUC or ACE tasks.
Likewise thismechanism can be used to customize the tag sets used fordifferent types of tree-banking tasks.2.3 Automatic AnnotatorsWe have integrated a number of automatic annotators towork with WordFreak.
These include sentence detectors,POS taggers, parsers, and coreference revolvers.
TheAPIs these annotators implement allow them to option-ally determine the order that annotation choices are dis-played to the user as well as provide a confidence mea-sure with each annotation they determine automatically.The first mechanism is quite useful for tasks which have alarge number of potential choices such as POS tagging orcoreference resolution in that the most likely choices canbe displayed first.
The confidence measure can be usedfor active learning or just to assist in the correction of theautomatic annotator.
We are currently in the process ofadapting open source taggers to be used and distributedas plug-ins to WordFreak.3 Source CodeWordFreak?s source code is entirely written in Java.
Thishas allowed us to deploy it on a number of platforms in-cluding Windows, Mac OS X, Solaris, and Linux.
Java?sbuilt-in language support and use of Unicode as theunderlying representation of strings has made allowingWordFreak to annotate non-English text relatively sim-ple.
Currently we have successfully developed annota-tion schemes for Chinese and Arabic.
Finally we haverecently released the source code on SourceForge underthe Mozilla Public License 1.1.
This should allow Word-Freak to be extended by others as well as provide a mech-anism for wider contribution to this tool.4 Future WorkWe are currently planning on developing an I/O plug-ininterface so that WordFreak can be easily extended tosupport additional file formats.
We also have plans todevelop a viewer which would render HTML while al-lowing annotations to reference the underlying text.5 ConclusionsWe have developed an open linguistic annotation toolwhich can be easily extended via a large number of re-usable components.
It supports automatic annotation andactive learning for rapid annotation of new text.
WordF-reak is written entirely in Java and can be used with mul-tiple languages and platforms.
