c?
2002 Association for Computational LinguisticsSquibs and DiscussionsA Note on Typing Feature StructuresShuly Wintner?
Anoop Sarkar?University of Haifa University of PennsylvaniaFeature structures are used to convey linguistic information in a variety of linguistic formalisms.Various definitions of feature structures exist; one dimension of variation is typing: unlike untypedfeature structures, typed ones associate a type with every structure and impose appropriatenessconstraints on the occurrences of features and on the values that they take.
This work demon-strates the benefits that typing can carry even for linguistic formalisms that use untyped featurestructures.
We present a method for validating the consistency of (untyped) feature structurespecifications by imposing a type discipline.
This method facilitates a great number of compile-time checks: many possible errors can be detected before the grammar is used for parsing.
We haveconstructed a type signature for an existing broad-coverage grammar of English and implementeda type inference algorithm that operates on the feature structure specifications in the grammarand reports incompatibilities with the signature.
We have detected a large number of errors in thegrammar, some of which are described in the article.1.
IntroductionFeature structures are used by a variety of linguistic formalisms as a means for rep-resenting different levels of linguistic information.
They are usually associated withmore elementary structures (such as phrase structure rules or trees) to provide an addi-tional dimension for stating linguistic generalizations.
A variant of feature structures,typed feature structures, provide yet another dimension for such generalizations.
Itis sometimes assumed that typed feature structures have linguistic advantages overuntyped ones and that they are, in general, more efficient to process.
In this articlewe show how typing can be useful also for systems that manipulate untyped featurestructures.We present a method for validating the consistency of feature structure specifica-tions by imposing a type discipline.
This method facilitates a great number of compile-time checks: many possible errors can be detected before the grammar is used for pars-ing.
Typed systems are used in one linguistic theory, Head-Driven Phrase StructureGrammar (HPSG) (Pollard and Sag 1994), and we present here a different applicationof them for theories that employ untyped feature structures.
We constructed a typesignature for the XTAG English grammar (XTAG Research Group 2001), an existingbroad-coverage grammar of English.
Then, we implemented a type inference algorithmthat operates on the feature structure specifications in the grammar.
The algorithm re-ports occurrences of incompatibility with the type signature.
We have detected a largenumber of errors in the grammar; four types of errors are described in the article.The technique we propose was incorporated into the XTAG grammar developmentsystem, which is based on the tree-adjoining grammar (TAG) formalism (Joshi, Levy,?
Department of Computer Science, University of Haifa, Mount Carmel, 31905 Haifa, Israel.
E-mail:shuly@cs.haifa.ac.il?
IRCS, University of Pennsylvania, 3401 Walnut Street, Philadelphia, PA-19104.
E-mail: anoop@linc.cis.upenn.edu390Computational Linguistics Volume 28, Number 3and Takahashi 1975), lexicalized (Schabes, Abeille?, and Joshi 1988) and augmentedby unification-based feature structures (Vijay-Shanker and Joshi 1991).
Tree-adjoininglanguages fall into the class of mildly context-sensitive languages and as such are morepowerful than context-free languages.
The TAG formalism in general, and lexicalizedTAGs in particular, are well-suited for linguistic applications.
As first shown by Joshi(1985) and Kroch and Joshi (1987), the properties of TAGs permit one to encapsulatediverse syntactic phenomena in a very natural way.The XTAG grammar development system makes limited use of feature structuresthat can be attached to nodes in the trees that make up a grammar.
Typically, featurestructures in XTAG are flat: nesting of structures is very limited.
Furthermore, all fea-ture structures in XTAG are finitely bounded: the maximum size of a feature structurecan be statically determined.
During parsing, feature structures undergo unification asthe trees they are associated with are combined.
But unification in XTAG is actuallyhighly limited: since all feature structures are bounded, unification can be viewed asan atomic operation.
Although the method we propose was tested on an XTAG gram-mar, it is applicable in principle to any linguistic formalism that uses untyped featurestructures, in particular, to lexical-functional grammar (Kaplan and Bresnan 1982).2.
The ProblemXTAG is organized such that feature structures are specified in three different com-ponents of the grammar: a Tree database defines feature structures attached to treefamilies; a Syn database defines feature structures attached to lexically anchored trees;and a Morph database defines feature structures attached to (possibly inflected) lexicalentries.As an example, consider the verb seems.
This verb can anchor several trees, amongwhich are trees of auxiliary verbs, such as the tree ?Vvx , depicted in Figure 1.
Thistree, which is common to all auxiliary verbs, is associated with the feature structuredescriptions listed in Figure 1 (independently of the word that happens to anchor it).1When the tree ?Vvx is anchored by seems, the lexicon specifies additional constraintson the feature structures in this tree:seem betaVvx VP.b:<mode> = inf/nom,V.b:<mainv> = +Finally, since ?seems?
is an inflected form, the morphological database specifies moreconstraints on the node that this word instantiates, as shown in Figure 2.The actual feature structures that are associated with the lexicalized tree anchoredby ?seems?
are the combination of the three sets of path equations.
This organizationleaves room for several kinds of errors, inconsistencies, and typos in feature structuremanipulation.
Nothing in the system can eliminate the following possible errors:Undefined features: Every grammar makes use of a finite set of features in thefeature structure specification.
As the features do not have to be declared,however, certain bogus features can be introduced unintentionally, eitherthrough typos or because of poor maintenance.
In a grammar that hasan assign-case feature, the following statement is probably erroneous:V.b:<asign-case> = acc.1 We use ?handles?
such as V.b or NP.t to refer to the feature structures being specified.
Each node in atree is associated with two feature structures, ?top?
(.t) and ?bottom?
(.b) (Vijay-Shanker and Joshi1991; XTAG Research Group 2001).
Angular brackets delimit feature paths, and slashes denotedisjunctive (atomic) values.391Wintner and Sarkar A Note on Typing Feature StructuresV.t:<agr> = VP_r.b:<agr>V.t:<assign-case> = VP_r.b:<assign-case>V.t:<assign-comp> = VP_r.b:<assign-comp>V.t:<displ-const set1> = VP_r.b:<displ-const set1>V.t:<mainv> = VP_r.b:<mainv>V.t:<mode> = VP_r.b:<mode>V.t:<neg> = VP_r.b:<neg>V.t:<tense> = VP_r.b:<tense>VP.t:<assign-comp> = ecmVP.t:<compar> = -VP.t:<displ-const set1> = -VP_r.b:<compar> = -VP_r.b:<conditional> = VP.t:<conditional>VP_r.b:<perfect> = VP.t:<perfect>VP_r.b:<progressive> = VP.t:<progressive>Figure 1An example tree and its associated feature structure descriptions.seems seem V <agr pers> = 3,<agr num> = sing,<agr 3rdsing> = +,<mode> = ind,<tense> = pres,<assign-comp> = ind_nil/that/rel/if/whether,<assign-case> = nomFigure 2The morphological database entry for seems.Undefined values: The same problem can be manifested in values, rather thanfeatures.
In a grammar where nom is a valid value for the assign-case fea-ture, the following statement is probably erroneous: V.b:<assign-case> =non.Incompatible feature equations: The grammar designer has a notion of whatpaths can be equated, but this notion is not formally defined.
Thus, it ispossible to find erroneous path equations such as VP.b:<assign-case> =V.t:<tense>.Such cases go undetected by XTAG and result in parsing errors.
For example, thestatement V.b:<asign-case> = acc was presumably supposed to constrain the gram-matical derivations to those in which the assign-case feature had the value acc.
Withthe typo, this statement never causes unification to fail (assuming that the featureasign-case occurs nowhere else in the grammar); the result is overgeneration.On the other hand, if the statement V.b:<assign-case> = non is part of the lexicalentry of some verb, and some derivations require that certain verbs have nom as theirvalue of assign-case, then that verb would never be a grammatical candidate forthose derivations.
The result here is undergeneration.392Computational Linguistics Volume 28, Number 3Note that nothing in the above description hinges on the particular linguisticformalism or its implementation.
The same problems are likely to occur in everysystem that manipulates untyped feature structures.23.
Introducing TypingThe problems discussed above are reminiscent of similar problems in programminglanguages; in that domain, the solution lies in typing: a stricter type discipline providesmeans for more compile-time checks to be performed, thus tracking potential errorsas soon as possible.
Fortunately, such a solution is perfectly applicable to the case offeature structures, as typed feature structures (TFSs) are well understood (Carpenter1992).
We briefly survey this concept below.TFSs are defined over a signature consisting of a set of of types (Types) and a setof features (Feats).
Types are partially ordered by subsumption (denoted ??).
Theleast upper bound with respect to subsumption of t1 and t2 is denoted t1 unionsq t2.
Each typeis associated with a set of appropriate features through a function Approp: Types ?Feats ?
Types.
The appropriate values of a feature F in a type t have to be ofspecified (appropriate) types.
Features are inherited by subtypes: whenever F is ap-propriate for a type t, it is also appropriate for all the types t?
such that t  t ?.
Eachfeature F has to be introduced by some most general type Intro(F) (and be appropriatefor all its subtypes).Figure 3 graphically depicts a type signature in which greater (more specific)types are presented higher and the appropriateness specification is displayed abovethe types.
For example, for every feature structure of type verb, the feature assign-case is appropriate, with values that are at least of type cases: Approp(verb, assign-case) = cases .A formal introduction to the theory of TFSs is given by Carpenter (1992).
In-formally, a TFS over a signature ?Types,, Feats, Approp?
differs from an untypedfeature structure in two aspects: a TFS has a type; and the value of each feature is aTFS?there is no need for atoms in a typed system.
A TFS A whose type is t is well-typed iff every feature F in A is such that Approp(t , F) is defined; every feature F inA has value of type t ?
such that Approp(t , F)  t ?
; and all the substructures of A arewell-typed.
It is totally well-typed if, in addition, every feature F such that Approp(t ,F) is defined occurs in A.
In other words, a TFS is totally well-typed if it has all andonly the features that are appropriate for its type, with appropriate values, and thesame holds for all its substructures.Totally well-typed TFSs are informative and efficient to process.
It might be prac-tically difficult, however, for the writer of a grammar to specify the full informationsuch a structure encodes.
To overcome this problem, type inference algorithms havebeen devised that enable a system to infer a totally well-typed TFS automatically froma partial description.
Partial descriptions can specify?
the type of a TFS: V.t:verb?
a variable, referring to a TFS: VP.b:assign-case:X?
a path equation: VP.b:assign-case = NP.t:case2 Some systems could have elaborate mechanisms implemented to deal with each kind of errormentioned here.
But typing provides a single mechanism that handles several different kinds of errorssimultaneously.393Wintner and Sarkar A Note on Typing Feature StructuresFigure 3A simple type signature.?
a feature-value pair: NP.b:case:acc?
a conjunction of descriptions: V.t:(sign,assign-case:none)The inferred feature structure is the most general TFS that is consistent with thepartial description.
The inference fails iff the description is inconsistent (i.e., describesno feature structure).
See Figure 4 for some examples of partial descriptions and theTFSs they induce, based on the signature of Figure 3.4.
ImplementationTo validate feature structure specifications in XTAG we have implemented the type in-ference algorithm suggested by Carpenter (1992, chapter 6).
We manually constructeda type signature suitable for the current use of feature structures in the XTAG gram-mar of English (XTAG Research Group 2001).
Then, we applied the type inferencealgorithm to all the feature structure specifications of the grammar, such that eachfeature structure was expanded with respect to the signature.Type inference is applied off-line, before the grammar is used for parsing.
As is thecase with other off-line applications, efficiency is not a critical issue.
It is worth noting,however, that for the grammar we checked (in which, admittedly, feature structures areflat and relatively small), the validation procedure is highly efficient.
As a benchmark,we checked the consistency of 1,000 trees, each consisting of two to fourteen nodes.The input file, whose size approached 1MB, contained over 33,000 path equations.Validating the consistency of the benchmark trees took less than 33 seconds (morethan a thousand path equations per second).4.1 The SignatureThe signature for the XTAG grammar was constructed manually, by observing theuse of feature equations in the grammar and consulting its documentation.
As notedabove, most feature structures used in the grammar are flat, but the number of featuresin the top level is relatively high.
The signature consists of 58 types and 56 features,and its construction took a few hours.
In principle, it should be possible to constructsignatures for untyped feature structures automatically, but such signatures will ofcourse be less readable than manually constructed ones.4.2 ResultsApplying the type inference algorithm to the XTAG English grammar, we have vali-dated the consistency of all feature structures specified in the grammar.
We have beenable to detect a great number of errors, which we discuss in this section.
The errors394Computational Linguistics Volume 28, Number 3Figure 4Inferred TFSs.can be classified into four different types: ambiguous names, typos, undocumentedfeatures, and plain errors.4.2.1 Ambiguous Names.
Ambiguous names are an obvious error, but one that is noteasy to track without the typing mechanism that we discuss in this article.
As theXTAG grammar has been developed by as many as a dozen developers, over a periodof more than a decade, such errors are probably unavoidable.
Specifically, a singlename is used for two different features or values, with completely different intentionsin mind.3 We have found several such errors in the grammar.The feature gen was used for two purposes: in nouns, it referred to the gender,and took values such as masc, fem, or neuter; in pronouns, it was a boolean featuredenoting genitive case.
We even found a few cases in which the values of these in-compatible features were equated.
As another example, the value nom was used todenote both nominative case, where it was an appropriate value for the case feature,and to denote a nominal predicate, where it was the appropriate value of the modefeature.
Of course, these two features have nothing to do with each other and shouldnever be equated (hence, should never have the same value).
Finally, values such asnil or none were used abundantly for a variety of purposes.3 Recall that by the feature introduction condition, each feature must be introduced by some mostgeneral type (and be appropriate for all its subtypes).395Wintner and Sarkar A Note on Typing Feature Structures4.2.2 Typos.
Another type of error that is very difficult to track otherwise are plaintypos.
The best example is probably a feature that occurred about 80% of the time asrelpron and the rest of the time as rel-pron:S_r.t:<relpron> = NP_w.t:<rel-pron>4.2.3 Undocumented Features.
We have found a great number of features and valuesthat are not mentioned in the technical report documenting the grammar.
Some ofthem turned out to be remnants of old analyses that were obsolete; others indicateda need for better documentation.
Of course, the fewer features the grammar is using,the more efficient unification (and, hence, parsing) becomes.Other cases necessitated updates of the grammar documentation.
For example, thefeature displ-const was documented as taking boolean values but turned out to bea complex feature, with a substructure under the feature set1.
The feature gen (in itsgender use) was defined at the top level of nouns, whereas it should have been underthe agr feature.4.2.4 Other Errors.
Finally, some errors are plain mistakes of the grammar designer.For example, the specification S_r.t:<assign-case> = NP_w.t:<assign-case> im-plies that assign-case is appropriate for nouns, which is of course wrong; the spec-ification S_r.t:<case> = nom implies that sentences have cases; and the specifica-tion V.t:<refl> = V_r.b:<refl> implies that verbs can be reflexive.
Another ex-ample is the specification D_r.b:<punct bal> = Punct_1.t:<punct>, which handlesthe balancing of punctuation marks such as parentheses.
This should have been eitherD_r.b:<punct> = Punct_1.t:<punct> or D_r.b:<punct bal> = Punct_1.t:<punctbal>.4.3 Additional AdvantagesSince the feature structure validation procedure practically expands path equations to(most general) totally well-typed feature structures, we have implemented a mode inwhich the system outputs the expanded TFSs.
Users can thus have a better idea ofwhat feature structures are associated with tree nodes, both because all the featuresare present, and because typing adds information that was unavailable in the untypedspecification.
As an example, consider the following specification:PP.b:<wh> = NP.b:<wh>PP.b:<assign-case> = nomPP.b:<assign-case> = N.t:<case>NP.b:<agr> = N.t:<agr>NP.b:<case> = N.t:<case>N.t:<case> = nom/accWhen it is expanded by the system, the TFS that is output for PP.b is depicted inFigure 5 (left).
Note that the type of this TFS was set to p or v or comp, indicatingthat there is not sufficient information for the type inference procedure to distinguishamong these three types.
Many features that are not explicitly mentioned are addedby the inference procedure, with their ?default?
(most general) values.The node N.t is associated with a TFS, parts of which are depicted in Figure 5(right).
It is worth noting that the type of this TFS was correctly inferred to be noun,and that the case feature is reentrant with the assign-case feature of the PP.b node(through the reentrancy tag [304]), thus restricting it to nom, although the specificationlisted a disjunctive value, nom/acc.396Computational Linguistics Volume 28, Number 3PP.b[52]p_or_v_or_comp(wh:[184]bool,assign-comp:[54]comps,rel-pron:[55]rel-prons,trace:[56]bot,equiv:[57]bool,compar:[58]bool,super:[59]bool,neg:[60]bool,assign-case:[304]nom)N.t[289]noun(wh:[290]bool,agr:[298]agrs(num:[118]nums,pers:[119]persons),conj:[299]conjs,control:[300]bot,displ-const:[302]constituents(set1:[153]bool),case:[304]nom,definite:[305]bool,const:[306]bool,rel-clause:[307]bool,pron:[308]bool,quan:[309]bool,gerund:[312]bool,refl:[313]bool,gen:[314]gens,compl:[316]bool)Figure 5Expanded TFSs.5.
Further ResearchWe have described in this article a method for validating the consistency of featurestructure specifications in grammars that incorporate untyped feature structures.
Al-though the use of feature structures in XTAG is very limited, especially since all fea-ture structures are finitely bounded, the method we describe is applicable to featurestructure?based grammatical formalisms in general; in particular, it will be interestingto test it on broad-coverage grammars that are based on unbounded feature structures,such as lexical functional grammars.We have applied type inference only statically; feature structures that are createdat parse time are not validated.
By modifying the unification algorithm currently usedin XTAG, however, it is possible to use TFSs in the grammar and apply type inferenceat run time.
This will enable detection of more errors at run time and provide forbetter representation of feature structures and possibly for more efficient unifications.In a new implementation of XTAG (Sarkar 2000), feature structure specifications arenot evaluated as structures are being constructed; rather, they are deferred to the finalstage of processing, when only valid trees remain.
We plan to apply type inference tothe resulting feature structures in this implementation, so that run-time errors can bedetected as well.AcknowledgmentsThis work was supported by an IRCSfellowship and NSF grant SBR 8920230.
Thework of the first author was supported bythe Israel Science Foundation (grant number136/01-1).ReferencesCarpenter, Bob.
1992.
The Logic of TypedFeature Structures.
Cambridge Tracts inTheoretical Computer Science.
CambridgeUniversity Press, Cambridge, England.Joshi, Aravind K. 1985.
?Tree adjoininggrammars: How much context sensitivityis required to provide a reasonablestructural description.?
In D. Dowty,I.
Karttunen, and A. Zwicky, editors,Natural Language Parsing.
CambridgeUniversity Press, Cambridge, England,pages 206?250.397Wintner and Sarkar A Note on Typing Feature StructuresJoshi, Aravind K., L. Levy, andM.
Takahashi.
1975.
Tree adjunctgrammars.
Journal of Computer and SystemSciences 10(1):136?163.Kaplan, Ronald and Joan Bresnan.
1982.?Lexical functional grammar: A formalsystem for grammatical representation.
?In J. Bresnan, editor, The MentalRepresentation of Grammatical Relations.
MITPress, Cambridge, Massachusetts,pages 173?281.Kroch, Anthony S. and Aravind K. Joshi.1987.
?Analyzing extraposition in a treeadjoining grammar.?
In G. Huck andA.
Ojeda, editors, DiscontinuousConstituents, Syntax and Semantics,volume 20.
Academic Press,pages 107?149.Pollard, Carl and Ivan A.
Sag.
1994.Head-Driven Phrase Structure Grammar.University of Chicago Press and CSLIPublications, Chicago, Illinois, andStanford, California.Sarkar, Anoop.
2000.
?Practical experimentsin parsing using tree adjoininggrammars.?
In Proceedings of the FifthWorkshop on Tree Adjoining Grammars,TAG+ 5, Paris, France, May 25?27.Schabes, Yves, Anne Abeille?, andAravind K. Joshi.
1988.
?Parsing strategieswith ?lexicalized?
grammars: Applicationto tree adjoining grammars.?
InProceedings of the 12th InternationalConference on Computational Linguistics(COLING?88), volume 2, pages 579?583,Budapest, Hungary, August.Vijay-Shanker, K. and Aravind K. Joshi.1991.
?Unification based tree adjoininggrammars.?
In J. Wedekind, editor,Unification-Based Grammars.
MIT Press,Cambridge, Massachusetts.XTAG Research Group.
2001.
?A lexicalizedtree adjoining grammar for English.
?Technical report IRCS-01-03, Institute forResearch in Cognitive Science, Universityof Pennsylvania, Philadelphia.
