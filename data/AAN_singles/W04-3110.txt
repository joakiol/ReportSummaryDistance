A Large Scale Terminology Resource for Biomedical Text ProcessingHenk Harkema, Robert Gaizauskas, Mark Hepple, Angus Roberts,Ian Roberts, Neil Davis, Yikun GuoDepartment of Computer Science, University of Sheffield, UKbiomed@dcs.shef.ac.ukAbstractIn this paper we discuss the design, implemen-tation, and use of Termino, a large scale termi-nological resource for text processing.
Dealingwith terminology is a difficult but unavoidabletask for language processing applications, suchas Information Extraction in technical domains.Complex, heterogeneous information must bestored about large numbers of terms.
At thesame time term recognition must be performedin realistic times.
Termino attempts to recon-cile this tension by maintaining a flexible, ex-tensible relational database for storing termino-logical information and compiling finite statemachines from this database to do term look-up.
While Termino has been developed forbiomedical applications, its general design al-lows it to be used for term processing in anydomain.1 IntroductionIt has been widely recognized that the biomedical litera-ture is now so large, and growing so quickly, that it is be-coming increasingly difficult for researchers to access thepublished results that are relevant to their research.
Con-sequently, any technology that can facilitate this accessshould help to increase research productivity.
This hasled to an increased interest in the application of naturallanguage processing techniques for the automatic captureof biomedical content from journal abstracts, completepapers, and other textual documents (Gaizauskas et al,2003; Hahn et al, 2002; Pustejovsky et al, 2002; Rind-flesch et al, 2000).An essential processing step in these applications isthe identification and semantic classification of techni-cal terms in text, since these terms often point to enti-ties about which information should be extracted.
Propersemantic classification of terms also helps in resolvinganaphora and extracting relations whose arguments arerestricted semantically.1.1 ChallengeAny technical domain generates very large numbers ofterms ?
single or multiword expressions that have somespecialised use or meaning in that domain.
For exam-ple, the UMLS Metathesaurus (Humphreys et al, 1998),which provides a semantic classification of terms from awide range of vocabularies in the clinical and biomedicaldomain, currently contains well over 2 million distinctEnglish terms.For a variety of reasons, recognizing these terms intext is not a trivial task.
First of all, terms are oftenlong multi-token sequences, e.g.
3-methyladenine-DNAglycosylase I.
Moreover, since terms are referred to re-peatedly in discourses there is a benefit in their beingshort and unambiguous, so they are frequently abbre-viated and acronymized, e.g.
CvL for chromobacteriumviscosum lipase.
However, abbreviations may not al-ways occur together with their full forms in a text, themethod of abbreviation is not predictable in all cases, andmany three letter abbreviations are highly overloaded.Terms are also subject to a high degree of orthographicvariation as a result of the representation of non-Latincharacters, e.g.
a-helix vs. alpha-helix, capitalization,e.g.
DNA vs. dna, hyphenation, e.g.
anti-histamine vs. an-tihistamine, and British and American spelling variants,e.g.
tumour vs. tumor.
Furthermore, biomedical scienceis a dynamic field: new terms are constantly being in-troduced while old ones fall into disuse.
Finally, certainclasses of biomedical terms exhibit metonomy, e.g.
whena protein is referred to by the gene that expresses it.To begin to address these issues in term recognition, weare building a large-scale resource for storing and recog-nizing technical terminology, called Termino.
This re-source must store complex, heterogeneous informationabout large numbers of terms.
At the same time termrecognition must be performed in realistic times.
Ter-mino attempts to reconcile this tension by maintaining aAssociation for Computational Linguistics.Linking Biological Literature, Ontologies and Databases, pp.
53-60.HLT-NAACL 2004 Workshop: Biolink 2004,flexible, extensible relational database for storing termi-nological information and compiling finite state machinesfrom this database to do term look-up.1.2 ContextTermino is being developed in the context of two ongoingprojects: CLEF, for Clinical E-Science Framework (Rec-tor et al, 2003) and myGrid (Goble et al, 2003).
Boththese projects involve an Information Extraction compo-nent.
Information Extraction is the activity of identifyingpre-defined classes of entities and relationships in naturallanguage texts and storing this information in a structuredformat enabling rapid and effective access to the informa-tion, e.g.
Gaizauskas and Wilks (1998), Grishman (1997).The goal of the CLEF project is to extract informationfrom patient records regarding the treatment of cancer.The treatment of cancer patients may extend over severalyears and the resulting clinical record may include manydocuments, such as clinic letters, case notes, lab reports,discharge summaries, etc.
These documents are gener-ally full of medical terms naming entities such as bodyparts, drugs, problems (i.e.
symptoms and diseases), in-vestigations and interventions.
Some of these terms areparticular to the hospital from which the document origi-nates.
We aim to identify these classes of entities, as wellas relationships between such entities, e.g.
that an investi-gation has indicated a particular problem, which, in turn,has been treated with a particular intervention.
The infor-mation extracted from the patient records is potentially ofvalue for immediate patient care, but can also be used tosupport longitudinal and epidemiological medical stud-ies, and to assist policy makers and health care managersin regard to planning and clinical governance.The myGrid project aims to present research biolo-gists with a unified workbench through which componentbioinformatic services can be accessed using a workflowmodel.
These services may be remotely located from theuser and will be exploited via grid or web-service chan-nels.
A text extraction service will form one of these ser-vices and will facilitate access to information in the sci-entific literature.
This text service comprises an off-lineand an on-line component.
The off-line component in-volves pre-processing a large biological sciences corpus,in this case the contents of Medline, in order to identifyvarious biological entities such as genes, enzymes, andproteins, and relationships between them such as struc-tural and locative relations.
These entities and relation-ships are referred to in Medline abstracts by a very largenumber of technical terms and expressions, which con-tributes to the complexity of processing these texts.
Theon-line component supports access to the extracted infor-mation, as well as to the raw texts, via a SOAP interfaceto an SQL database.Despite the different objectives for text extractionwithin the CLEF and myGrid projects, many of the tech-nical challenges they face are the same, such as theneed for extensive capabilities to recognize and classifybiomedical entities as described using complex techni-cal terminology in text.
As a consequence we are con-structing a general framework for the extraction of infor-mation from biomedical text: AMBIT, a system for ac-quiring medical and biological information from text.
Anoverview of the AMBIT logical architecture is shown infigure 1.The AMBIT system contains several engines, of whichTermino is one.
The Information Extraction Engine pullsselected information out of natural language text andpushes this information into a set of pre-defined tem-plates.
These are structured objects which consists of oneor more slots for holding the extracted entities and rela-tions.
The Query Engine allows users to access informa-tion through traditional free text search and search basedon the structured information produced by the Informa-tion Extraction Engine, so that queries may refer to spe-cific entities and classes of entities, and specific kinds ofrelations that are recognised to hold between them.
TheText Indexing Engine is used to index text and extracted,structured information for the purposes of information re-trieval.
The AMBIT system contains two further compo-nents: an interface layer, which provides a web or gridchannel to allow user and program access to the system;and a database which holds free text and structured infor-mation that can be searched through the Query Engine.Termino interacts with the Query Engine and the TextIndexing Engine to provide terminological support forquery formulation and text indexation.
It also providesknowledge for the Information Extraction Engine to usein identifying and classifying biomedical entities in text.The Terminology Engine can furthermore be called byusers and remote programs to access information fromthe various lexical resources that are integrated in the ter-minological database.2 Related WorkSince identification and classification of technical termsin biomedical text is an essential step in informationextraction and other natural language processing tasks,most natural language processing systems contain aterminological resource of some sort.
Some systemsmake use of existing terminological resources, notablythe UMLS Metathesaurus, e.g.
Rindflesch et al (2000),Pustejovski et al (2002); other systems rely on re-sources that have been specifically built for the applica-tion, e.g.
Humphreys et al (2000), Thomas et al (2000).The UMLS Metathesaurus provides a semantic classi-fication of terms drawn from a wide range of vocabulariesin the clinical and biomedical domain (Humphreys et al,1998).
It does so by grouping strings from the source vo-from Hospital 1Clinical RecordsJournalsOn?lineAbstractsMedlineLiteratureBiomedicalEngineIndexingTextEngineExtraction...(Termino)EngineTerminologyAmbitfrom Hospital 2Clinical RecordsWeb GRIDInterface layerRaw text(entities / relations)Structured InfoFree textsearchEngineQueryInformationSOAP /HTTP& AnnotationsStructured InfoFigure 1: AMBIT Architecturecabularies that are judged to have the same meaning intoconcepts, and mapping these concepts onto nodes or se-mantic types in a semantic network.
Although the UMLSMetathesaurus is used in a number of biomedical naturallanguage processing applications, we have decided not toadopt the UMLS Metathesaurus as the primary terminol-ogy resource in AMBIT for a variety of reasons.One of the reasons for this decision is that the Metathe-saurus is a closed system: strings are classified in termsof the concepts and the semantic types that are presentin the Metathesaurus and the semantic network, whereaswe would like to be able to link our terms into multi-ple ontologies, including in-house ontologies that do notfigure in any of the Metathesaurus?
source vocabulariesand hence are not available through the Metathesaurus.Moreover, we would also like to be able to have access toadditional terminological information that is not presentin the Metathesaurus, such as, for example, the annota-tions in the Gene Ontology (The Gene Ontology Con-sortium, 2001) assigned to a given human protein term.While the terms making up the the tripartite Gene On-tology are present in the UMLS Metathesaurus, assign-ments of these terms to gene products are not recordedin the Metathesaurus.
Furthermore, as new terms appearconstantly in the biomedical field we would like to beable to instantly add these to our terminological resourceand not have to wait until they have been included in theUMLS Metathesaurus.
Additionally, some medical termsappearing in patient notes are hospital-specific and areunlikely to be included in the Metathesaurus at all.With regard to systems that do not use the UMLSMetathesaurus, but rather depend on terminological re-sources that have been specifically built for an applica-tion, we note that these terminological resources tend tobe limited in the following two respects.
First, the struc-ture of these resources is often fixed and in some casesamounts to simple gazetteer lists.
Secondly, because oftheir fixed structure, these resources are usually popu-lated with content from just a few sources, leaving outmany other potentially interesting sources of terminolog-ical information.Instead, we intend for Termino to be an exten-sible resource that can hold diverse kinds of termi-nological information.
The information in Terminois either imported from existing, outside knowledgesources, e.g.
the Enzyme Nomenclature (http://www.chem.qmw.ac.uk/iubmb/enzyme/), the Structural Classi-fication of Proteins database (Murzin et al, 1995), andthe UMLS Metathesaurus, or it is induced from on-lineraw text resources, e.g.
Medline abstracts.
Termino thusprovides uniform access to terminological informationaggregated across many sources.
Using Termino re-moves the need for multiple, source-specific terminolog-ical components within text processing systems that em-ploy multiple terminological resources.3 ArchitectureTermino consists of two components: a database holdingterminological information and a compiler for generatingterm recognizers from the contents of the database.
Thesetwo components will be discussed in the following twosections.STRINGSstring str id.
.
.
.
.
.neurofibromin str728abdomen str056mammectomy str176mastectomy str183.
.
.
.
.
.TERMOID STRINGStrm id str id.
.
.
.
.
.trm023 str056trm656 str056trm924 str728trm369 str728trm278 str176trm627 str183.
.
.
.
.
.PART OF SPEECHtrm id pos.
.
.
.
.
.trm023 N. .
.
.
.
.SYNONYMYsyn id trm id scl id.
.
.
.
.
.
.
.
.syn866 trm278 syn006syn435 trm627 syn006.
.
.
.
.
.
.
.
.GO ANNOTATIONStrm id annotation version.
.
.
.
.
.
.
.
.trm924 GO:0004857 9/2003trm369 GO:0008285 9/2003.
.
.
.
.
.
.
.
.UMLStrm id cui lui sui version.
.
.
.
.
.
.
.
.
.
.
.
.
.
.trm278 C0024881 L0024669 S0059711 2003ACtrm656 C0000726 L0000726 S0414154 2003AC.
.
.
.
.
.
.
.
.
.
.
.
.
.
.Figure 2: Structure of the terminological database3.1 Terminological DatabaseThe terminological database is designed to meet three re-quirements.
First of all, it must be capable of storing largenumbers of terms.
As we have seen, the UMLS Metathe-saurus contains over 2 million distinct terms.
However,as UMLS is just one of many resources whose terms mayneed to be stored, many millions of terms may need tobe stored in total.
Secondly, Termino?s database mustalso be flexible enough to hold a variety of informationabout terms, including information of a morpho-syntacticnature, such as part of speech and morphological class;information of a semantic nature, such as quasi-logicalform and links to concepts in ontologies; and provenanceinformation, such as the sources of the information in thedatabase.
The database will also contain links to connectsynonyms and morphological and orthographic variantsto one another and to connect abbreviations and acronymsto their full forms.
Finally, the database must be orga-nized in such a way that it allows for fast and efficientrecognition of terms in text.As mentioned above, the information in Termino?sdatabase is either imported from existing, outside knowl-edge sources or induced from text corpora.
Since thesesources are heterogeneous in both information contentand format, Termino?s database is ?extensional?
: it storesstrings and information about strings.
Higher-order con-cepts such as ?term?
emerge as the result of interconnec-tions between strings and information in the database.The database is organized as a set of relational tables,each storing one of the types of information mentionedabove.
In this way, new information can easily be in-cluded in the database without any global changes to thestructure of the database.Terminological information about any given string isusually gathered from multiple sources.
As informationabout a string accumulates in the database, we must makesure that co-dependencies between various pieces of in-formation about the string are preserved.
This considera-tion leads to the fundamental element of the terminologi-cal database, a termoid.
A termoid consists of a string to-gether with associated information of various kinds aboutthe string.
Information in one termoid holds conjunc-tively for the termoid?s string, while multiple termoidsfor the same string express disjunctive alternatives.For instance, taking an example from UMLS, we maylearn from one source that the string cold as an adjectiverefers to a temperature, whereas another source may tellus that cold as a noun refers to a disease.
This informa-tion is stored in the database as two termoids: abstractly,?cold, adjective, temperature?
and ?cold, noun, disease?.A single termoid ?cold, adjective, noun, temperature, dis-ease?
would not capture the co-dependency between thepart of speech and the ?meaning?
of cold.1 This exampleillustrates that a string can be in more than one termoid.1Note that the UMLS Metathesaurus has no mechanism forstoring this co-dependency between grammatical and semanticinformation.Each termoid, however, has one and only one string.Figure 2 provides a detailed example of part of thestructure of the terminological database.
In the tableSTRINGS every unique string is assigned a string iden-tifier (str id).
In the table TERMOID STRINGS each stringidentifier is associated with one or more termoid iden-tifiers (trm id).
These termoid identifiers then serve askeys into the tables holding terminological information.Thus, in this particular example, the database includesthe information that in the Gene Ontology the stringneurofibromin has been assigned the terms with identi-fiers GO:0004857 and GO:0008285.
Furthermore, in theUMLS Metathesaurus version 2003AC, the string mam-mectomy has been assigned the concept-unique identifierC0024881 (CUI), the lemma-unique identifier L0024669(LUI), and the string-unique identifier S0059711 (SUI).Connections between termoids such as those arisingfrom synonymy and orthographic variation are recordedin another set of tables.
For example, the table SYN-ONYMY in figure 2 indicates that termoids 278 and627 are synonymous, since they have the same syn-onymy class identifier (scl id).2 The synonymy identifier(syn id) identifies the assignment of a termoid to a partic-ular synonymy class.
This identifier is used to record thesource on which the assignment is based.
This can be areference to a knowledge source from which synonymyinformation has been imported into Termino, or a refer-ence to both an algorithm by which and a corpus fromwhich synonyms have been extracted.
Similarly there aretables containing provenance information for strings, in-dexed by str id, and termoids, indexed by trm id.
Thesetables are not shown in he example.With regard to the first requirement for the design ofthe terminological database mentioned at the beginningof this section ?
scalability ?, an implementation of Ter-mino in MySQL has been loaded with 427,000 termoidsfor 363,000 strings (see section 4 for more details).
In itthe largest table, STRINGS, measures just 16MB, which isnowhere near the default limit of 4GB that MySQL im-poses on the size of tables.
Hence, storing a large num-ber of terms in Termino is not a problem size-wise.
Thesecond requirement, flexibility of the database, is met bydistributing terminological information over a set of rela-tively small tables and linking the contents of these tablesto strings via termoid identifiers.
In this way we avoid thestrictures of any one fixed representational scheme, thusmaking it possible for the database to hold informationfrom disparate sources.
The third requirement on the de-sign of the database, efficient recognition of terms, will2The function of synonymy class identifiers in Termino issimilar to the function of CUIs in the UMLS Metathesaurus.However, since we are not bound to a classification into UMLSCUIs, we can assert synonymy between terms coming from ar-bitrary sources.be addressed in the next section.3.2 Term RecognitionTo ensure fast term recognition with Termino?s vast ter-minological database, the system comes equipped witha compiler for generating finite state machines from thestrings in the terminological database discussed in theprevious section.
Direct look-up of strings in the databaseis not an option, because it is unknown in advance atwhich positions in a text terms will start and end.
In orderto be complete, one would have to look up all sequencesof words or tokens in the text, which is very inefficient.Compilation of a finite state recognizer proceeds inthe following way.
First, each string in the database isbroken into tokens, where a token is either a contigu-ous sequence of alpha-numeric characters or a punctu-ation symbol.
Next, starting from a single initial state, apath through the machine is constructed, using the tokensof the string to label transitions.
For example, for thestring Graves?
disease the machine will include a pathwith transitions on Graves, ?, and disease.
New states areonly created when necessary.
The state reached on the fi-nal token of a string will be labeled final and is associatedwith the identifiers of the termoids for that string.To recognize terms in text, the text is tokenized and thefinite state machine is run over the text, starting from theinitial state at each token in the text.
For each sequenceof tokens leading to a final state, the termoid identifiersassociated with that state are returned.
These identifiersare then used to access the terminological database andretrieve the information contained in the termoids.
Whereappropriate the machine will produce multiple termoididentifiers for strings.
It will also recognize overlappingand embedded strings.Figure 3 shows a small terminological database and afinite state recognizer derived from it.
Running this rec-ognizer over the phrase .
.
.
thyroid dysfunction, such asGraves?
disease .
.
.
produces four annotations: thyroidis assigned the termoid identifiers trm1 and trm2; thyroiddysfunction, trm3; and Graves?
disease, trm4.It should be emphasised at this point that term recog-nition as performed by Termino is in fact term look-upand not the end point of term processing.
Term look-upmight return multiple possible terms for a given string,or for overlapping strings, and subsequent processes mayapply to filter these alternatives down to the single optionthat seems most likely to be correct in the given context.Furthermore, more flexible processes of term recognitionmight apply over the results of look-up.
For example, aterm grammar might be provided for a given domain, al-lowing longer terms to be built from shorter terms thathave been identified by term look-up.The compiler can be parameterized to produce finitestate machines that match exact strings only, or that ab-STRINGSstring str idthyroid str12thyroid disfunction str15Graves?
disease str25TERMOID STRINGStrm id str idtrm1 str12trm2 str12trm3 str15trm4 str25?
trm4diseasethyroidGravestrm3trm2trm1disfunctionFigure 3: Sample terminological database and finite state term recognizerstract away from morphological and orthographical vari-ation.
At the moment, morphological information aboutstrings is supplied by a component outside Termino.
Inour current term recognition system, this component ap-plies to a text before the recognition process and asso-ciates all verbs and nouns with their base form.
Similarly,the morphological component applies to the strings in theterminological database before the compilation process.The set-up in which term recognizers are compiledfrom the contents of the terminological database turnsTermino into a general terminological resource which isnot restricted to any single domain or application.
Thedatabase can be loaded with terms from multiple domainsand compilation can be restricted to particular subsets ofstrings by selecting termoids from the database based ontheir source, for example.
In this way one can produceterm recognizers that are tailored towards specific do-mains or specific applications within domains.4 Implementation & PerformanceA first version of Termino has been implemented.
It usesa database implemented in MySQL and currently con-tains over 427,000 termoids for around 363,000 strings.Content has been imported from various sources bymeans of source-specific scripts for extracting relevantinformation from sources and a general script for load-ing this extracted information into Termino.
More specif-ically, to support information extraction from patientrecords, we have included in Termino strings from theUMLS Metathesaurus falling under the following seman-tic types: pharmacologic substances, anatomical struc-tures, therapeutic procedure, diagnostic procedure, andseveral others.
We have also loaded a list of hu-man proteins and their assignments to the Gene Ontol-ogy as produced by the European Bioinformatics Insti-tute (http://www.ebi.ac.uk/GOA/) into Termino.
Further-more, we have included several gazetteer lists containingterms in the fields of molecular biology and pharmacol-ogy that were assembled for previous information extrac-tion projects in our NLP group.
A web services (SOAP)API to the database is under development.
We plan tomake the resource available to researchers as a web ser-vice or in downloadable form.3The compiler to construct finite state recognizers fromthe database is fully implemented, tested, and integratedinto AMBIT.
The compiled recognizer for the 363,000strings of Termino has 1.2 million states and an on-disksize of around 80MB.
Loading the matcher from diskinto memory requires about 70 seconds (on an UltraSparc900MHz), but once loaded recognition is a very fast pro-cess.
We have been able to annotate a corpus of 114,200documents, drawn from electronic patient records fromthe Royal Marsden NHS Trust in London and each ap-proximately 1kB of text, in approximately 44 hours ?
anaverage rate of 1.4 seconds per document, or 42 docu-ments per minute.
On average, about 30 terms falling un-der the UMLS ?clinical?
semantic types mentioned abovewere recognized in each document.
We are currently an-notating a bench-mark corpus in order to obtain precisionand recall figures.
We are also planning to compile rec-ognizers for differently sized subsets of the terminologi-cal database and measure their recognition speed over agiven collection of texts.
This will provide some indica-tion as to the scalability of the system.Since Termino currently contains many terms importedfrom the UMLS Metathesaurus, it is interesting to com-pare its term recognition performance against the per-formance of MetaMap.
MetaMap is a program avail-able from at the National Library of Medicine ?
the de-velopers of UMLS ?
specifically designed to discoverUMLS Metathesaurus concepts referred to in text (Aron-son, 2001).
An impressionistic comparison of the per-formance of Termino and MetaMap on the CLEF patientrecords shows that the results differ in two ways.
First,MetaMap recognizes more terms than Termino.
Thisis simply because MetaMap draws on a comprehensiveversion of UMLS, whereas Termino just contains a se-lected subset of the strings in the Metathesaurus.
Sec-ondly, MetaMap is able to recognize variants of terms,e.g.
it will map the verb to treat and its inflectional formsonto the term treatment, whereas Termino currently doesnot do this.
To recognize term variants MetaMap re-lies on UMLS?s SPECIALIST lexicon, which provides3Users may have to sign license agreements with third par-ties in order to be able to use restricted resources that have beenintegrated into Termino.syntactic, morphological, and orthographic informationfor many of the terms occurring in the Metathesaurus.While the performance of both systems differs in favorof MetaMap, it is important to note that the source ofthese differences is unrelated to the actual design of Ter-mino?s terminological database or Termino?s use of fi-nite state machines to do term recognition.
Rather, thedivergence in performance follows from a difference inbreadth of content of both systems at the moment.
Withregard to practical matters, the comparison showed thatterm recognition with Termino is much faster than withMetaMap.
Also, compiling a finite state recognizer fromthe terminological database in Termino is a matter of min-utes, whereas setting up MetaMap can take several hours.However, since MetaMap?s processing is more involvedthan Termino?s, e.g.
MetaMap parses the input first, andhence requires more resources, these remarks should bebacked up with a more rigorous comparison between Ter-mino and MetaMap, which is currently underway.The advantage of term recognition with Termino overMetaMap and UMLS or any other recognizer with a sin-gle source, is that it provides immediate entry pointsinto a variety of outside ontologies and other knowledgesources, making the information in these sources avail-able to processing steps subsequent to term recognition.For example, for a gene or protein name recognized in atext, Termino will return the database identifiers of thisterm in the HUGO Nomenclature database (Wain et al,2002) and the OMIM database (Online Mendelian Inher-itance in Man, OMIM (TM), 2000).
These identifiersgive access to the information stored in these databasesabout the gene or protein, including alternative names,gene map locus, related disorders, and references to rele-vant papers.5 Conclusions & Future WorkDealing with terminology is an essential step in naturallanguage processing in technical domains.
In this paperwe have described the design, implementation, and use ofTermino, a large scale terminology resource for biomedi-cal language processing.Termino includes a relational database which is de-signed to store a large number of terms together withcomplex, heterogeneous information about these terms,such as morpho-syntactic information, links to conceptsin ontologies, and other kinds of annotations.
Thedatabase is also designed to be extensible: it is easy toinclude terms and information about terms found in out-side biological databases and ontologies.
Term look-upin text is done via finite state machines that are compiledfrom the contents of the database.
This approach allowsthe database to be very rich without sacrificing speed atlook-up time.
These three features make Termino a flexi-ble tool for inclusion in a biomedical text processing sys-tem.As noted in section 3.2, Termino has not been designedto be used as a stand-alone term recognition system butrather as the first component, the lexical look-up com-ponent, in a multi-component term processing system.Since Termino may return multiple terms for a givenstring, or for overlapping strings, some post-filtering ofthese alternatives is necessary.
Secondly, it is likely thatbetter term recognition performance will be obtained bysupplementing Termino look-up with a term parser whichuses a grammar to give a term recognizer the generativecapacity to recognize previously unseen terms.
For ex-ample, many terms for chemical compounds conform togrammars that allow complex terms to be built out of sim-pler terms prefixed or suffixed with numerals separatedfrom the simpler term with hyphens.
It does not makesense to attempt to store in Termino all of these variants.Termino provides a firm basis on which to build large-scale biomedical text processing applications.
However,there are a number of directions where further work canbe done.
First, as noted in 3.2, morphological informa-tion is currently not held in Termino, but rather residesin an external morphological analyzer.
We are workingto extend the Termino data model to enable informationabout morphological variation to be stored in Termino,so that Termino serves as a single source of informationfor the terms it contains.
Secondly, we are working tobuild term induction modules to allow Termino contentto be automatically acquired from corpora, in additionto deriving it from manually created resources such asUMLS.
Finally, while we have already incorporated Ter-mino into the AMBIT system where it collaborates witha term parser to perform more complete term recogni-tion, more work can be done to with respect to such anintegration.
For example, probabilities could be incorpo-rated into Termino to assist with probabilistic parsing ofterms; or, issues of trade-off between what should be inthe term lexicon versus the term grammar could be fur-ther explored by looking to see which compound termsin the lexicon contain other terms as substrings and at-tempt to abstract away from these to grammar rules.
Forexample, in the example thyroid disfunction above, boththyroid and disfunction are terms, the first of class ?bodypart?, the second of class ?problem?.
Their combinationthyroid disfunction is a term of class ?problem?, suggest-ing a rule of the form ?problem?
  ?body part?
?problem?.ReferencesA.R.
Aronson.
2001.
Effective mapping of biomedicaltext to the UMLS Metathesaurus: the MetaMap pro-gram.
In Proceedings of the American Medical Infor-matics Association Symposium, pages 17?21.R.
Gaizauskas and Y. Wilks.
1998.
Information extrac-tion: Beyond document retrieval.
Journal of Docu-mentation, 54(1):70?105.R.
Gaizauskas, G. Demetriou, P. Artymiuk, and P. Wil-lett.
2003.
Protein structures and information extrac-tion from biological texts: The PASTA system.
Jour-nal of Bioinformatics, 19(1):135?143.C.A.
Goble, C.J.
Wroe, R. Stevens, and the my-Grid consortium.
2003.
The myGrid project:Services, architecture and demonstrator.
InS.
Cox, editor, Proceedings of UK e-ScienceAll Hands Meeting 2003, Nottingham, UK.http://www.nesc.ac.uk/events/ahm2003/AHMCD/.R.
Grishman.
1997.
Information extraction: Techniquesand challenges.
In Maria Teresa Pazienza, editor, In-formation Extraction, pages 10?27.
Springer Verlag.U.
Hahn, M. Romacker, and S. Schulz.
2002.
Creatingknowledge repositories from biomedical reports: themedSynDiKATe text mining system.
In Proceedingsof the Pacific Symposium on Biocomputing, pages 338?349.L.
Humphreys, D.A.B.
Lindberg, H.M. Schoolman, andG.O.
Barnett.
1998.
The Unified Medical LanguageSystem: An informatics research collaboration.
Jour-nal of the American Medical Informatics Association,1(5):1?13.K.
Humphreys, G. Demetriou, and R. Gaizauskas.
2000.Two applications of information extraction to biolog-ical science journal articles: Enzyme interactions andprotein structures.
In Proceedings of the Pacific Sym-posium on Biocomputing, pages 505?516.A.G.
Murzin, S.E.
Brenner, T. Hubbard, and C. Chothia.1995.
SCOP: A structural classification of proteinsdatabase for the investigation of sequences and struc-tures.
Journal of Molecular Biology, (247):536?540.
(http://scop.mrc-lmb.cam.ac.uk/scop/).Online Mendelian Inheritance in Man, OMIM (TM).2000.
McKusick-Nathans Institute for GeneticMedicine, Johns Hopkins University (Baltimore, MD)and National Center for Biotechnology Informa-tion, National Library of Medicine (Bethesda, MD).http://www.ncbi.nlm.nih.gov/omim/.J.
Pustejovsky, J. Castan?o, R.
Saur?
?, A. Rumshisky,J.
Zhang, and W. Luo.
2002.
Medstract: Creat-ing large-scale information servers for biomedical li-braries.
In Proceedings of the Workshop on NaturalLanguage Processing in the Biomedical Domain, As-sociation for Computational Linguistics 40th Anniver-sary Meeting (ACL-02), pages 85?92.A.
Rector, J. Rogers, A. Taweel, D. Ingram, D. Kalra,J.
Milan, R. Gaizauskas, M. Hepple, D. Scott,and R. Power.
2003.
Joining up health carewith clinical and post-genomic research.
InS.
Cox, editor, Proceedings of UK e-ScienceAll Hands Meeting 2003, Nottingham, UK.http://www.nesc.ac.uk/events/ahm2003/AHMCD/.C.T.
Rindflesch, J.V.
Rajan, and L. Hunter.
2000.
Ex-tracting molecular binding relationships from biomed-ical text.
In Proceedings of the 6th Applied Natu-ral Language Processing conference / North Americanchapter of the Association for Computational Linguis-tics annual meeting, pages 188?915.The Gene Ontology Consortium.
2001.
Creating thegene ontology resource: design and implementation.Genome Research, 11(8):1425?1433.J.
Thomas, D. Milward, C. Ouzounis, and S. Pulman.2000.
Automatic extraction of protein interactionsfrom scientific abstracts.
In Proceedings of the PacificSymposium on Biocomputing, pages 538?549.H.M.
Wain, M. Lush, F. Ducluzeau, and S. Povey.2002.
Genew: The human nomenclaturedatabase.
Nucleic Acids Research, 30(1):169?171.
(http://www.gene.ucl.ac.uk/nomenclature/).
