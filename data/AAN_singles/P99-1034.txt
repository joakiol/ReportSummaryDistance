A Unification-based Approach to Morpho-syntactic Parsing ofAgglutinative and Other (Highly) Inflectional LanguagesG~ibor Pr6sz6kyproszeky@morphologic.huMorphoLog icK6smdrki u.
8.Budapest, Hungary, H-1118http://www.morphologic.huBal~tzs Kiskis@morphologic.huAbstractThis paper introduces a new approach tomorpho-syntactic analysis through Humor 99(High-speed Unification Mo.rphology), a re-versible and unification-based morphologicalanalyzer which has already been integratedwith a variety of industrial applications.
Hu-mor 99 successfully copes with problems ofagglutinative ( .g.
Hungarian, Turkish, Esto-nian) and other (highly) inflectional lan-guages (e.g.
Polish, Czech, German) very ef-fectively.
The authors conclude the paper byarguing that the approach used in Humor 99is general enough to be well suitable for awide range of languages, and can serve asbasis for higher-level linguistic operationssuch as shallow parsing.IntroductionThere are several inguistic phenomena that arepossible to process by means of morphologicaltools for agglutinative and other highly inflec-tional languages, while processing the same fea-tures requires yntactic parsers in case of otherlanguages such as English.
This paper provides abrief description of Humor 99 first presenting ageneral theoretical background of the system.This is followed by examples of the most recentapplications (in addition to those listed earlier)where the authors argue that the approach used inHumor 99 is general enough to be well suitablefor a wide range of languages, and can serve asbasis for higher-level linguistic operations uchas shallow or even full parsing.1 Affix arrays rather than affixesSegmentation of a word-form in Humor 99 isbased on surface patterns, that is, typical sequen-ces of separate suffix morphemes are analyzed asa whole.
For example, the English nominal end-ing string ers' (NtoV+PL+POSS) is a complexaffix handled as an atomic string in Humor 991 .The string ers' is generated from er+s+ 's in anearlier development phase by a dedicated utility.The generator is able to make a finite set of affixsequences from an (even recursive) description 2.Running this utility can be considered the learn-ing phase of the algorithm.
The resulting suffixcombinations are stored in a compressed internallexicon structure that guarantees very fastsearching) The entire algorithm shows featuressimilar to the hypothesis according to which mostsegments of word-forms in agglutinative lan-We use mainly English examples in spite of the fact hatEnglish morphology is simpler than the morphologies ofagglutinative and highly inflectional l nguages.2 Depth of the recursive process can be given as aparameter.
The method issimilar to the one of Goldberg& K=ilm=in (1992) used in the BUG system: thedescription is theoretically infinite, hut there is a finiteperformance limit when running.3 The idea has something in common with the PC-Kimmobased analyzer of the University of Pennsylvania (Karpet al 1992).
Our compression ratio is around 20%.261guages are handled as "Gestalts" by nativespeakers, instead of parsing them on-line.
4This idea is not new in the literature: according toBybee, "a psycholinguistic argument for treating(some) ending sequences as wholes comes fromthe observation that children acquiring inflec-tional languages eldom make errors involvingthe order of morphemes in a word."
(Bybee1985) Another source is Karlsson: "The endingsand entries are often listed as wholes, especiallyin close-knit combinations.
5 Such combinationsare often subject o bi-directional dependenciesthat are hard to capture otherwise" (Karlsson1986).2 Allomorphs rather than baseformsKarlsson (1986) shows several ways in whichlexical forms of words may be constructed: fulllisting, minimal listing, methods with uniquelexical forms and methods with phonologicallydistinct stem variants.
Full listing does not needrules at all, but it is implausible for agglutinativelanguages.
Minimal listings need a quite largerule system in case of highly inflectional an-guages, although their lexicons are relativelysmall.
In methods based on unique lexical formsallowing diacritics and morpho-phonemes (Ko-skenniemi 1983, Abondolo 1988) paradigms arerepresented bya single base form 6.
Our approachis close to the minimal isting methods, but lessrules are needed.
Finally, the representation pre-sented here regards phonologically distinct boundvariants of a base form as separate stems.
7 There4 Psycholinguists are interested in testing this hypothesiswith native speakers (Pl~h, pers.
comm.
)5 A good example is the linguistic tradition handlingnumber and person combinations of Hungarian definiteconjugation.6 That is why it is very difficult to add new entries to thelexicons automatically in real NLP environments.7 Actual two-level (and some other) descriptions applysimilar methods in order to cope with morphotacticproblems that cannot be treated phonologically in anelegant way.are two known important variants of this method:one using technical stems - -  that is, strings thatlinguists do not consider stem variants - -  andanother using real allomorphs.
The former wasapplied in the TEXFIN system of Karttunen(1981), the latter was used by Karlsson (1986).This is the method we have chosen for the Hu-mor 99 system.Humor 99 lexicons contain stem allomorphs(generated by the learning phase mentionedabove) instead of single stems.
Relations amongallomorphs of the same base form (e.g.
wolf,wolv) are, however, important for syntax, seman-tics, and the end-user.
An online morphologicalparser needs not be directly concerned with thederivation of allomorphs from their base forms,for example, it does not matter how happi is de-rived from happy before -ly.
This phenomenon -a consequence of the orthographical system - ishandled by the off-line linguistic process of Hu-mor 99, which makes the analysis much faster.This method is close to the lexicon compilationused in finite-state models.3 Paradigm groups andparadigmsConcatenation of stem allomorphs and suffix al-lomorphs is licensed with the help of the follow-ing two factors: continuation classes s defined byparadigm descriptions, and classes of surface al-lomorphs.
The latter is a cross-classification fthe paradigms according to phonological andgraphemic properties of the surface forms.
Bothverbal and nominal stem allomorphs can be char-acterized by sets of suffix allomorphs that canfollow them.
When describing the behavior ofstems, all suffix combinations beginning with thesame morpheme are considered equivalent be-cause the only relevant pieces of informationcome from the suffix that immediately followsthe stem.
E.g.
from the point of view of the pre-ceding stem (humid) morpheme combinations8 Similar to the two-level descriptions' continuationclasses (Koskenniemi 1983).262Example IExample 2Word'forml humidityhumidi~ ' shumiditieshumidities'Humor's real-time Humor's outputsegmentation .
.
.
.
segmentationhumid + ity humid + ityhumid + ity's humid + it)/+ 'shumid + ities humid + iti + eshumid + ities' humid + iti + es'~esFeatures=?/- ValuesNbr=PlDeriv=AdvDeriv=Abstr\[ Deg=CompDeg=Super, Mo~hmeSHesserestSubcat=-Nf ish house+Stems !0Ca~NomSubeat=-Adjgreen happy++ ++ ++ +Subcat=Advlike ity+SG, ity+PL, ity+SG+GEN, ity+PL+GENbehave as ity itself (Example 1).
Therefore, everyaffix array is represented by its starting affix 9.Each equivalence class and each paradigm isgiven an abstract name, that is, each existing setof equivalence classes can have its own abstractname.
Example 2 shows a simplified defaultparadigm of adjectives.
For instance, the stemgreen belongs to the paradigm that can be de-scribed by the set {Deriv=Abstr, Deg=Comp,Deg=Super}, er is a suffix belonging to{Deg=Comp}, thus the word-form greener ismorphotactically licensed by the unifiability ofthe two structures: the feature 'Deg' occurs inboth with the same value.
It is possible to con-struct a net - a partial ordering of paradigm sets -according to the degree and sort of defectivity.The Subsumption hierarchy is useful in aggluti-native languages where allomorph paradigms ofvarious stem classes might behave the same wayalthough they have been derived by differentmorphonological processes.9 There is an equivalence relation on the set of affixarrays.l0 Nom means nominal, N, Adj and Adv as usual.
Someremarks to the sample words: greens does exist, but as alexical noun.
Some affixed forms, like happily, happier,The scheme shown in Example 2 would bettersuit languages like Hungarian, but here we try todemonstrate constructing morphological classeswithout naming them.
The (partial) paradigm netbased on Example 2 can be the following:CLASShappy > CLASS green >CLASS far >> CLASS~shCLASShou~ > CLASS ~shThis classsification might be used by traditionallinguists for creating definitions (or rather nam-ing conventions) of morpheme classes that aremore precise than usual.4 Unifiability without unificationFeatures used for checking appropriate propertiesof stems and suffixes are relevant attributes ofmorpho-graphemic behavior.
Checking 'appro-priateness' is based on unification, or, strictlyspeaking, checking unifiability of the adequatefeatures of stems and suffixes.
A phonologicallyand ortographically motivated allomorph-basedvariant of Example 3 is shown by Example 4.happiest, farther, farthest, are influenced also byphonological nd/or orthographical processes.263Example 3Features=?
+/- ValuesLex=BaseNbr=PI s~esDeg=Compi?
Deg=SuperDeriv=Adv lyDeriv=Abstr nesseres tSubcat=NStem AtlomorphsCat=NomSubcat=-Adjf i sh  house+ +- +green  happy  happ i+ +- ++ + .+ .
++ .
+Subcat=Advfa r  fa r th+Features (morpho-phonological properties) areused to characterize both stem and suffix allo-morphs.
A list of Feature=Value pairs shows themorphological structure of the morphemes greenand er:green.
"\[Cat=-Nom, Lex=Base, Subcat=-Adj, Deriv=Abstr, Deg={Comp, Super} \]er:\[Cat=Nom, Subcat={Adj,Adv}, Deg=Comp\]They are unifiable, thus the word-form greener is also morpho-phonologically icensed 11:INPUT: greenerOUTPUT: green\[A\] + er\[CMP\]The most important advantage of this feature-based method is that possible paradigms andmorpho-phonological types need not be definedpreviously, only the classification criteria have tobe clarified.
Since the number of these criteria isaround a few dozens (in case of a language withrather complicated morphology), the number oftheoretically possible paradigm classes is severalmillions or more.
According to our practice lin-11 Unifiability inHumor 99 is defined as follows:An f feature of the D description can have ither asinglevalue or a set of values.An f feature of the D description has compatible valuesin the E description iffone of the values of f can befound among the values of f in the E description.D and E are unifiable iffevery f feature of the Edescription has compatible values in the D description.guists choose about 10-20 orthogonal propertieswhich produce 21?-22o possible classes, but, infact, most of these hypothetical c asses are emptyin the language chosen.The implemented morphological analyzerprovides the user with more detailed categoryinformation (lexical, morpho-syntactic, semantic,etc.)
according to the case illustrated by Example4 (see next page).Allomorphs happy and ly cannot be unified be-cause of contradicting values of Allom, but happiand ly can.
If the unifiability check is successful,the base form is reconstructed (according to theBase information: happi ~ happy) and the outputinformation (that is, Category code in our case)is returned:INPUT: happylyOUTPUT: *happylyINPUT: happilyOUTPUT: happy\[A\]=happi+ly \[A2ADV\]As we have seen, lexical information has a cen-tral role in Humor, because only a single rule -unifiability-checking - is to be applied.5 Controlling morphemesequence recognitionHumor 99 is capable of much more than sketchedabove.
For instance, there can be more than oneconcatenation points in a single word form.Therefore ffective analysis requires an elegant264Example 4?
IAllomorph Feature=Valuehappy Cat=NomSubcat=AdjDeriv=AbstrAllom=yLex=Basehappi Cat=NomSubcat=AdjDeriv=AdvDeg=CompDerSuperAllom=iLex=NonBasely Cat=-NomSubcat=AdjDeriv=AdvAllom=iLex=NonBaseBase0i ->__.ycate~or~\[ADJ\]\[ADH\[ADV\]way of handling compounding and adequate han-dling of derivational ffixes.Recent implementations of Humor 99 define theset of possible morpheme sequences by means ofthe so-called meta-dictionary (in fact, it's a fi-nite-state automaton).
This structure transformsHumor 99 into a representation where three inde-pendent types of conditions can be set (on differ-ent levels) to control which morphemes (and inwhat way) may be following each other.
All ofthem were mentioned earlier; the list below isonly a summary:1.
Morpheme sequence recognition is achievedthrough the meta-dictionary.2.
A continuation class matrix provides concate-nation licensing based on paradigm descriptions.3.
A feature structure controls concatenation li-censing based on surface allomorph classificationby means of unifiability checking.Earlier implementations of Humor used the fol-lowing hard-coded scheme to control morphemeorder where all parts except STEM1 were optional(Example 5).Example 5(INFL.
AFF.
)265Example 6 shows how a meta-dictionary can bedrawn up to handle the above structure.
12Example 6\[% indicates the starting state; $ indicates ending (or ac-cepting) states\]START : %PREF IX  -> STEM REQUIREDSTEM1 -> STEM~ PASSEDSTEM_REQUIRED :STEM1 -> STEM1 PASSEDSTEMI_PASSED : $STEM2 -> AFF IXES POSSIBLEDERIV  AFF  -> INFL  AFF  POSSIBLEINFL  AFF  -> END -- --AFF IXES_POSSIBLE  : $DERIV  AFF  -> INFL  AFF  POSSIBLEINFL  AFF  -> END -- --INFL  AFF  POSSIBLE:$INFL  AFF  -> ENDEND : $Here is an example how Humor's analyzer eactsto a typical construction of an agglutinative lan-guage (Hungarian): elsz6mlt6gdpezgethettem.
("Icould use a computer to make fun for a while"):INPUT:elsz~tmit6g~pezgethettemINTERNAL SEGMENTATION:el\[PREFIX\]+sz~mit6\[STEM 1 \]+g~p\[STEM2\]++ezgethet\[DERIV.AFF.\]+tem\[INFL.AFF\]OUTPUT:eI\[VPREF\]+s~it6\[ADJ\]+g~p\[N\]+ez\[N2V\]++get\[FREQ\]+het\[OPT\]+tem\[PAST-SG- 1 \]6 Comparison with other methodsThere are only a few general, reversible mor-phological systems that are suitable for more thana single language.
In addition to the well-knowntwo-level morphology (Koskenniemi 1983) andits modifications (Karttunen 1993) it is worthmentioning the Nabu system (Slocum 1988).There are some morphological description sys-tems showing some features in common withHumor 99 - like paradigmatic morphology (Cal-der 1989), or the Paradigm Description Language(Anick & Artemieff 1992) - but they don't have12 The meta-dictionary shown in the example compileswith Humor's lexicon compiler without any changes.large-scale implementations.
Two-level mor-phology is a reversible, orthography-based sys-tem that has several advantages from a linguist'spoint o f  view.
Namely, the morpho-phone-mic/graphemic rules can be formalized in a gen-eral and very elegant way.
It also has computa-tional advantages, but the lexicons must containentries with extra symbols and other sophisti-cated elements in order to produce the necessarysurface forms.
Non-linguist users need an easy-to-extend ictionary into which words can be in-serted (almost) automatically.
The lexical basisof Humor 99 contains urface characters only -no transformations are applied -, while the meta-dictionary mechanism retains many advantagesof the two-level systems.
It means in the practicethat users can add entries to the running systemwithout re-compiling it.The compilation time of a Humor 99 dictionary isusually 1-2 minutes (for 100,000 basic entries)on an average PC, which is another advantage (atleast, for the linguist) when comparing it withother two-level systems.
The result of the com-pilation is a compressed structure that can beused by any Humor 99 applications.
The com-pression ratio is less than 20% in terms of lexiconsize compared to the source material.
The size ofthe dictionary has very little affect on the speedof the run-time system because the tree-basedsearching algorithm is enhanced with a specialpaging mechanism developed exclusively for thispurpose.7 Recent applications of the Humor99 systemThere are several applications of  Humor 99 -most of  them are fully implemented, some othersare still in a planning phase.
For the time being,our research focuses on two applications, bothserving one larger goal: the improvement oftranslation support of morphologically complexlanguages.
This paper does not cover industrialapplications uch as spelling checkers, hyphen-ators, thesauri etc., since these modules have266been on the market for several years.
The fol-lowing sections briefly describe (1) linguisticstemming for searching purposes, (2) an en-hancement to the Humor 99 morphological ana-lyzer that can act as a shallow or full parser intranslation support systems.Linguistic stemming may be considered as anormalizer function which 'normalizes' wordforms into canonic lexical forms, thus enablingsearching systems to find any form of a specificword in an information base regardless of theword form entered in the search expression.
Inlanguages where a single lexical item can takethousands of possible forms, it is essential tohave this normalization i  electronic dictionariesused for translation support.
However, it is theselanguages where linguistic stemming is impossi-ble without morphological analysis - otherwiseseveral billions of word forms would have to beincluded in a single database.
Thus stemming is acombination of the morphological nalysis and apost-processing phase where the actual stems(lexical forms) are extracted from the analysis re-suits.
Both the analysis and the extraction phasehave to be very precise, otherwise false stemsmay be returned, and, in case of an electronicdictionary, wrong articles may be retrieved.
Inlanguages where words consist of several parts(i.e.
productive compounding and/or sequencesof derivative suffixes are possible), there mightbe a lot of possible stems of a single word form -the degree of disambiguity within a single wordform can be much higher than in languages hav-ing less complex morphologies.Extraction is based on the results of morphologi-cal analysis where the original word form is seg-mented into morphemes, with each morphemehaving a category label and a lexical form.
Fromthe segmented results, this phase selects mor-phemes with stem categories (adjective, noun,verb etc.).
Example 7 shows a typical stemmingproblem where the computer is not entitled tochoose between the different possible stems.
Inthese cases, all stems must be returned.
Choice isa task of either the end-user or a disambiguatormodule that is based on the context of the word.Example 7There are two possible segmentations ofthe Hungarian word 'szemetek':szemetek =szem\[N\] + etek\[Poss-P3 \]in English: 'your eyes' ('you' in plural)szemetek =szemdt\[N\]=szemet + ek\[Pl\]in English: 'pieces of  rubbish'The two possible stems are: 'szem' (eye)and 'szemdt' (rubbish).8 An enhancement: shallow andfull parsing with HumorESKHumorESK (Humor Enhanced with SyntacticKnowledge) is a twofold application of Humor99 that is used for shallow and full parsing.
13 Thefirst point of using the morphological nalyzer inthe parser is to get as much linguistic informationabout a single word form as possible.
The secondpoint is using the basic principles of the mor-phological analyzer to implement the parser it-self.
This means that we either collect or generatephrase patterns on different linguistic levels(noun phrases, prepositional phrases, verbalphrases etc.
), and compile a Humor-like lexiconof them.
On a specific linguistic level eachatomic element of a pattern actually correspondsto a (more) complex structure on a lower linguis-tic level.
Example 8 shows how a noun phrasepattern can be constructed from the result of themorphological nalysis.Example 8Surface string:the big bad wolvesMorphological analysis:the\[Det\] big\[Adj\] bad\[Adj\]wolf\[N\]=wolve+s\[PL\]Noun phrase pattern:\[Det\] \[Adj\] [Adj\] [N\] [PL\]13 In our environment, shallow parsing of noun phra-ses - noun phrase xtraction - is already implemented.267The example is quite simplified, and does notshow an important aspect of the parser, namely, itretains the unification-based approach introducedin the morphological analyzer.
This means thatall atomic elements in a phrase pattern have threefeature structures; two for the concatenation oftwo adjacent symbols, and one that describes theglobal ('phrase-wide') behavior of the symbol inquestion.
After recognizing a phrase pattern(where recognition includes surface order li-censing based on unifiability checking), anotherlicensing step is performed, based on the globalfeatures of each phrase element.
This step (1)may reflect the internal hierarchy of symbolswithin the phrase, (2) sometimes includes actualunification of feature structures.
Thus a singlehigher-level symbol can be generated from thephrase pattern that inherits features from thelower levels.
The parser is still in development,although there is an implementation that is beingtested together with the dictionary system.ReferencesAbondolo, D. M. Hungarian Inflectional Mor-phology.
Akad6miai, Budapest.
(1988)Anick, Peter & Susan Artemieff A High-levelMorphological Description Language Exploit-ing Inflectional Paradigms.
Proceedings ofCOLING-92, Nantes: 67-73.
(1992)Beesley, K. R. Constraining Separated Morpho-tactic Dependencies In Finite State Grammars.Proceedings of the International Workshop onFinite State Methods in Natural LanguageProcessing: 41-49 (1998)Bybee, J. L. Morphology.
A Study of the Relationbetween Meaning and Form.
Benjamins, Am-sterdam.
(1985)Calder, J. Paradigmatic Morphology.
Proceed-ings of 4th Conference of EACL 89:58-65(1989)Carter, D. Rapid Development of MorphologicalDescriptions for Full Language ProcessingSystems.
Proceedings of EACL 95:202-209(1995)Goldberg, J.
& K~ilm~in, L. The First BUG Re-port.
Proceedings of COLING-92: 945-949(1992)J~ippinen, H. and Ylilammi, M. AssociativeModel of Morphological Analysis: An Em-pirical Inquiry.
Computational Linguistics12(4): 257-252 (1986)Karlsson, F. A Paradigm-based MorphologicalAnalyzer.
Papers from the Fifth ScandinavianConference of Computational Linguistics,Helsinki: 95-112 (1986)Karp, D. & Schabes, Y.
A Wide Coverage PublicDomain Morphological Analyzer for English.Proceedings ofCOLING-92: 950-95 (1992)Karttunen, L., Root, R. and Uszkoreit, H. Mor-phological Analysis of Finnish by Computer.Proceedings of the 71st Annual Meeting of theSASS.
Albuquerque, New Mexico.
(1981)Karttunen, L.Finite-State Lexicon Compiler.Technical Report.
ISTL-NLTT-1993-04-02.Xerox PARC, Palo Alto, California (1993)Koskenniemi, K. Two-level Morphology: A Gen-eral Computational Model for Word-formRecognition and Production.
Univ.
of Hel-sinki, Dept.
of Gen.
Ling., PublicationsNo.11.
(1983)Oflazer, K. Two-Level Description of TurkishMorphology.
Proceedings of EACL-93.
(1993)Slocum, J. Morphological Processing in the NabuSystem.
Proceedings of the 2nd Applied Natu-ral Language Processing: 228-234 (1988)Voutilainen, A.
Does Tagging Help Parsing?
ACase Study on Finite State Parsing.
Proceed-ings of the International Workshop on FiniteState Methods in Natural Language Process-ing."
25-36 (1998)Zajac, R. Feature Structures, Unification and Fi-nite-State Transducers.
Proceedings of theInternational Workshop on Finite State Meth-ods in Natural Language Processing."
101-109 (1998)268
