Proceedings of NAACL HLT 2009: Demonstrations, pages 5?8,Boulder, Colorado, June 2009. c?2009 Association for Computational LinguisticsBuilding Conversational Agents with BasilicaRohit Kumar Carolyn P. Ros?Language Technologies InstituteCarnegie Mellon UniversityPittsburgh, PA 15213, USArohitk@cs.cmu.edu cprose@cs.cmu.eduAbstractBasilica is an event-driven software architec-ture for creating conversational agents as acollection of reusable components.
Softwareengineers and computer scientists can use thisgeneral architecture to create increasingly so-phisticated conversational agents.
We havedeveloped agents based on Basilica that havebeen used in various application scenarios andforesee that agents build on Basilica can caterto a wider variety of interactive situations aswe continue to add functionality to our archi-tecture.1 IntroductionConversational Interfaces apply the metaphor ofagent to an interface which allows the user to con-versationally interact with the machine using natu-ral language through speech or text.
The currentstate of the art in the area of conversational inter-faces is largely dominated by spoken dialog sys-tems (SDS).
These SDS are most often used forthe purpose of accessing information from a data-base over the telephone.
Other common applica-tions of conversational agents include computeraided instruction (CAI) and human-robot interac-tion (HRI).Conversational Agents in most of today?s SDS,CAI and HRI are designed to work within thescope of specific task domains which allows thescientists and engineers working on such systemsto ensure satisfactory and relevant interaction withthe user most of the time.
Within the task domain,such agents can display intelligent interactive be-havior like helping the user use the interface, ask-ing remedial questions (Bohus and Rudnicky,2005), shaping the user behavior (Tomko and Ro-senfeld, 2004) by using alternative phrasing of ut-terances, responding to user affect (D?Mello et al,2008) through text, voice and gesture, engaging theuser through the display of presence via backchan-nels (Ward, 1996) and embodiment (Cassell et al,1999).As more and more of these intelligent interac-tive agents get built for many task domains (Rauxet al, 2005; Bohus et al, 2007; Gockley et al,2005; Amtrak Julie; ?)
that surround our every-day life, we observe a gradual transition in the useof the conversational agent technology to be a formof situated interaction.
One of the characteristicrequirements of this transition towards ubiquity ofsuch interactive agents is the capability to senseand trigger behavior in a context sensitive way.In most conversational interfaces today, the on-ly trigger used by the agents is that of initiation ofconversation usually by sensing user presencethrough a telephone call, proximity detection oruser login into a virtual environment.
The initiationevent is followed by a scripted task-oriented con-versation with the agent.
These scripts could befairly complex depending on the representationalformalism underlying the script.
Most of the com-mon software architectures/platforms used tocreate conversational agents like TellMe Studio,Voxeo Prophecy, Olympus (Bohus et al, 2007),DIPPER (Bos and Oka, 2003), etc.
use one or moreof these presence sensing techniques and one of themany existing scripting languages includingVoiceXML, SALT, TuTalk (Jordan et al, 2007)and Ravenclaw (Bohus and Rudnicky, 2003) taskspecification language among others.However, in our recent work on building con-versational agents situated in collaborative learning5environments, we have discovered the need for asoftware architecture for creating agents that pers-ist in an interactive environment in which humanusers interact with these agents as well as witheach other.
In this situation, the agents need to beable to sense many kinds of triggers at many pointsof time and choose to respond to some of thosetriggers through a variety of modalities includingconversation.
This observation was the motivationfor creating Basilica which is our architecture forbuilding conversational agents.
In section 2, wetalk more about the intricacies of Basilica andagents built on this architecture.
Section 3 de-scribes some of application scenarios in which weare using Conversational Agents based on Basilica.2 Basilica ArchitectureIn order to meet the need for an architecture thatenables development of Conversational Agents asa collection of behavioral components that cansense triggers and respond to those appropriately,we created the Basilica architecture.In this architecture, we model sensing and res-ponding as two types of components that make upconversational agents.
The sensing componentsreferred to as Filters observe stimuli from variouskinds of input sources and other components.
Theycan also generate stimuli for other components.
Onthe other hand, Actor components generate respon-sive behavior that may be observed the user(s) andother components.
Basilica provides the softwareelements required to tie Filters and Actors togetherthrough Connections that carry Events over them.We think that many of the state of the art intelli-gent behaviors listed in section 1 can be imple-mented as dyads of filter and actor components.The minimal set of behavioral componentclasses listed above can easily be extended.
Forexample, certain agent designs may need memorycomponents and coordination components whichbridge across multiple actors or filters that do notnecessarily share events with each others.
Timercomponents may be used to generate regulatedstimuli.
Besides belonging to one of these classesof components, certain components may act aswrappers to external systems.
For example, we usewrapper components to integrate TuTalk dialogmanagement system (Jordan et al, 2007) for someof the instructive behavior exhibited by our agents.Also, certain components act as wrappers to theenvironment in which the agent is present.
Thesewrappers help in easily integrating the same agentwith multiple environments without having tochange any underlying components except thewrappers to the environment.We believe that fairly intelligent conversationalagents can be built for situated interaction applica-tions by incrementally building a large number ofbehavioral components.
Each of these componentsrepresent a decomposition of the agent?s perceptiveand cognitive capabilities.
Among the agents wehave built using Basilica, we observe that some ofthese capabilities are common across agents.Hence the corresponding behavioral componentsget re-used in many cases.
Some instances of com-ponent re-use are mentioned in Section 3.Note that recently there has been other work onmodeling conversational agents as a decompositionof components.
Jaspis (Turunen and Hakulinen,2003) models the agent as a collection of manag-ers, agents and evaluators which synchronize witheach other through transactions.
RIME (Nakano etal., 2008) distributes cognitive capabilities across acollection of experts of two types.
However, eva-luators and agents are configured as a pile of com-ponents whereas our filters and actors areconfigured as a network.
Hence, designing conver-sational agents with Basilica gives the flexibility tochange the network topology.
Also, while Jaspisagents are stateless, actors in our architecture neednot be stateless.
In other work on event-based mul-ti-layered architectures (Raux and Eskenazi, 2007),events are used for communication between layersas a mean to provide higher reactive compared topipeline architectures.
While we share this motiva-tion, definition of events is extended here as eventsare used for all kinds of communication, coordina-tion and control in Basilica.3 Current Application ScenariosIn 2008, we built three conversational agents tosupport learners in collaborative learning environ-ments.
Also, we are currently using Basilica to de-velop a cross-lingual assistive agent to supportnon-Spanish speaking 911 dispatchers in thesouthern states of the US.
In this section, we willdiscuss these four conversational agents briefly.CycleTalk is an intelligent tutoring system thathelps college sophomores studying Thermodynam-ics learn about principles of designing Steam6cycles.
In our recent experiments, we have studiedthe effectiveness of conversational agents in thisintelligent tutoring system (Kumar et al, 2007;Chaudhuri et al, 2008).
Student use the systemboth individually and in pairs.
The conversationalagent monitors student interaction in a chat roomas the students work on solving a design problem.The tutor provides the students with hints to helptouch upon all the underlying concepts while thestudents work on the design exercise.
Also theagent brings up reflective dialogs when it detects arelevant topic in the students conversation.
One ofthe problems we observed over the years with theuse of instructional dialogs in collaborative envi-ronments is that the students tend to ignore the tu-toring agent if it interrupts the students when theyare talking to each other.
Basilica helped us in re-solving this problem by implementing a compo-nent that tells that student that help is available onthe topic they are talking about and they can askfor the dialog support when they are ready.
Basili-ca gives the flexibility to change the interventionstrategy used by the agent when it is speaking withmore than one student.In another version of this system, the tutoringagent prompted the students with some motiva-tional prompts occasionally as we observed thatmany of the students found the design exercisevery demanding to complete in the time permittedfor this lab exercise.
We found that the use of mo-tivational prompts improved the student?s attitudetowards the automated agent.We developed another agent to help collegelevel mathematics students working on problemsolving.
This agent operates in a collaborative en-vironment which includes a whiteboard.
As in thecase with the CycleTalk agent, the agent used herealso helps the students with hints and dialogs.
Thecomponent required for those behaviors were re-used as-is with modifications only their configura-tion files.
Besides these behaviors, the agent coor-dinates the problem solving sessions for the teamby presenting the team with problems as imagesplaced on the whiteboard and helping the studentsstay on track by answering questions about theamount of time left in the problem solving session.Recently, we modified the environment wrap-per components of our CycleTalk agent and inte-grated them with a SecondLife application(Weusijana et al, 2008).
This integration helpsdevelopers of conversational agents create interac-tive agents in the SecondLife virtual environment.Finally, in a currently ongoing project, we arebuilding an agent that would interpret Spanish ut-terances from a distressed 9-1-1 caller and workwith a human dispatcher who does not know Span-ish to attend to the call.
We model the agent in thisscenario after a human translator who does not justtranslate the caller?s input to English and vice ver-sa.
Instead the translator partners with the dis-patcher to provide service to the caller.
Partneringconversational agents with a human user to helpanother human user in a different role is a novelapplication of interactive agents.4 Building Agents using BasilicaFigure 1.
Components of the CycleTalk AgentBuilding conversational agents using Basilica in-volves the process of representing the desiredagent as a decomposition of components.
Figure 1above shows the components that make up theCycleTalk conversational agent we mentioned inSection 3.
The rectangles represent Filters and theparallelograms represent Actors.
Connections areshown as solid lines.
In a detailed design, theselines are annotated with the events they carry.Once an agent is designed, the agents and filtersrequired for the implementation of the agent can beeither re-used from the pre-existing components ofBasilica or implemented as Java objects that ex-tend the corresponding component class.
Often theprogramming task is limited to implementing han-dlers and generators for the events received andsent out by the component.
Theoretically, the va-lidity of a component can be verified if it can han-dle and generate all the events as specified in thedesign diagram.As we continue to develop more conversationalagents on this architecture, we intend to create de-velopment tools which would easily translate a7design like Figure 1 to the implementation and fa-cilitate validation and debugging of the agent.5 Demonstration OutlineThe demonstration of our architecture will give theaudience an opportunity to interact with the agentswe have described in section 3 and discuss how wecan design such agents using Basilica.
We willhave a poster to aid the discussion along with abili-ty to probe into the code underlying the design ofthese agents.
Attendees will be able to understandthe process involved in building agents with Basi-lica and assess the effort required.
Additionally, ifwe have any specialized development tools to au-tomatically map agent design as described in Sec-tion 4 to Java code, we will demonstrate thosetools.
Up to date information about Basilica can befound at http://basilica.rohitkumar.net/wiki/AcknowledgementsThis work is supported by NSF REESE/REC grantnumber 0723580.ReferencesDan Bohus and Alex Rudnicky, 2005.
Error Handlingin the RavenClaw dialog management architecture,HLT-EMNLP-2005, VancouverStefanie Tomko and Roni Rosenfeld, 2004.
ShapingSpoken Input in User-Initiative Systems.
Interspeech2004, Jeju, KoreaAntoine Raux, Brian Langner, Dan Bohus, Alan Black,and Maxine Eskenazi, 2005.
Let's Go Public!
Takinga Spoken Dialog System to the Real World, Inters-peech 2005, Lisbon, PortugalDan Bohus, Sergio Grau, David Huggins-Daines, Ven-katesh Keri, Gopala Krishna A., Rohit Kumar, An-toine Raux, and Stefanie Tomko, 2007.
Conquest -an Open-Source Dialog System for Conferences,HLT-NAACL 2007, Rochester, NYAmtrack Julie, http://www.networkworld.com/news/2003/0619julie.htmlJustin Cassell, Timothy Bickmore, Billinghurst, M.,Campbell, L., Chang, K., Vilhj?lmsson, H. and Yan,H., 1999.
Embodiment in Conversational Interfaces:Rea, CHI'99, Pittsburgh, PANigel Ward, 1996.
Using Prosodic Clues to decidewhen to produce Back-channel Utterances, ICSLP 96Sidney D' Mello, Tanner Jackson, Scotty Craig, BrentMorgan, Patrick Chipman, Holly White, Natalie Per-son, Barry Kort, Rana el Kaliouby, Rosalid W. Pi-card and Arthur Graesser, 2008, AutoTutor Detectsand Responds to Learners Affective and CognitiveStates, Workshop on Emotional and Cognitive Is-sues, ITS 2008, MontrealRachel Gockley, Allison Bruce, Jodi Forlizzi, MarekMichalowski, Anne Mundell, Stephanie Rosenthal,Brennan Sellner, Reid Simmons, Kevin Snipes, AlanC.
Schultz and Jue Wang, 2005.
Designing Robotsfor Long-Term Social Interaction, IROS 2005Dan Bohus, Antoine Raux, Thomas Harris, MaxineEskenazi and Alex Rudnicky, 2007.
Olympus: anopen-source framework for conversational spokenlanguage interface research HLT-NAACL 2007Workshop on Bridging the Gap: Academic and In-dustrial Research in Dialog Technology, Rochester,NYJohan Bos and Tetsushi Oka, 2003.
Building SpokenDialogue Systems for Believable Characters, 7thworkshop on the semantics & pragmatics of dialogueTellMe, https://studio.tellme.com/Voxeo Prophecy, http://www.voxeo.com/products/Pamela Jordan, Brian Hall, Michael Ringenberg, YueCui, Carolyn P.
Ros?, 2007.
Tools for Authoring aDialogue Agent that Participates in Learning Stu-dies, AIED 2007Dan Bohus and Alex Rudnicky, 2003.
RavenClaw: Di-alog Management Using Hierarchical Task Decom-position and an Expectation Agenda, Eurospeech2003, Geneva, SwitzerlandMarkku Turunen, Jaakko Hakulinen, 2003.
Jaspis - AnArchitecture for Supporting Distributed Spoken Di-alogues, Eurospeech?
2003, Geneva, SwitzerlandMikio Nakano, Kotaro Funakoshi, Yuji Hasegawa, Hi-roshi Tsujino, 2008.
A Framework for Building Con-versational Agents Based on a Multi-Expert Model,9th SigDial Workshop on Discourse and Dialog, Co-lumbus, OhioAntoine Raux and Maxine Eskenazi, 2007.
A Multi-Layer Architecture for Semi-Synchronous Event-Driven Dialogue Management, ASRU 2007, KyotoRohit Kumar, Carolyn Rose, Mahesh Joshi, Yi-ChiaWang, Yue Cui, Allen Robinson, Tutorial Dialogueas Adaptive Collaborative Learning Support, 13thAIED 2007, Los Angeles, CaliforniaSourish Chaudhuri, Rohit Kumar, Carolyn P. Rose,2008.
It?s not easy being green - Supporting Colla-borative Green Design Learning, ITS 2008, MontrealBaba Kofi A. Weusijana, Rohit Kumar, Carolyn P.Rose, 2008.
MultiTalker: Building ConversationalAgents in Second Life using Basilica, Second LifeEducation Community Convention, Purple Strand:Educational Tools and Products, 2008, Tampa, FL8
