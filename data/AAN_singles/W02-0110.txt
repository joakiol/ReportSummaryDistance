Formal Language Theory for Natural Language ProcessingShuly WintnerComputer Science DepartmentUniversity of HaifaHaifa 31905, Israelshuly@cs.haifa.ac.ilAbstractThis paper reports on a course whose aimis to introduce Formal Language Theoryto students with little formal background(mostly linguistics students).
The coursewas first taught at the European Sum-mer School for Logic, Language and In-formation to a mixed audience of stu-dents, undergraduate, graduate and post-graduate, with various backgrounds.
Thechallenges of teaching such a course in-clude preparation of highly formal, math-ematical material for students with rela-tively little formal background; attractingthe attention of students of different back-grounds; preparing examples that will em-phasize the practical importance of ma-terial which is basically theoretical; andevaluation of students?
achievements.1 OverviewComputational linguistics students typically comefrom two different disciplines: Linguistics orComputer Science.
As these are very differentparadigms, it is usually necessary to set up a com-mon background for the two groups of students.One way to achieve this goal is by introducing thecore topics of one paradigm to students whose back-ground is in the other.
This paper reports on suchan experiment: teaching Formal Language Theory,a core computer science subject, to students withno background in computer science or mathemat-ics.
The course was first taught at the 13th EuropeanSummer School in Logic, Language and Informa-tion (Helsinki, Finland) in the summer of 2001.While formal language theory is not a core com-putational linguistics topic, it is an essential prereq-uisite for a variety of courses.
For example, regularexpressions and finite-state technology are instru-mental for many NLP applications, including mor-phological analyzers and generators, part-of-speechtaggers, shallow parsers, intelligent search enginesetc.
The mathematical foundations of context-freegrammars are necessary for a thorough understand-ing of natural language grammars, and a discussionof the Chomsky hierarchy is mandatory for studentswho want to investigate more expressive linguisticformalisms such as unification grammars.The motivation for teaching such a course to stu-dents with no background in formal methods, es-pecially linguists, stems from the observation thatmany students with background in linguistics are in-terested in computational linguistics but are over-whelmed by the requirements of computational lin-guistics courses that are designed mainly for com-puter science graduates.
Furthermore, in order to es-tablish a reasonable level of instruction even in intro-ductory computational linguistics courses, I found itessential to assume a firm knowledge of basic for-mal language theory.
This assumption does not holdfor many non-CS gradutes, and the course describedhere is aimed at such students exactly.The challenges of teaching such a course aremany.
Teaching at the European Summer School isalways a challenge, as this institution attracts stu-dents from a variety of disciplines, and one neverknows what background students in one?s class willhave.
In this particular case, the course was adver-tised as a foundational computation course.
Founda-tional courses presuppose absolutely no backgroundknowledge, and should especially be accessible toJuly 2002, pp.
71-76.
Association for Computational Linguistics.Natural Language Processing and Computational Linguistics, Philadelphia,Proceedings of the Workshop on Effective Tools and Methodologies for Teachingpeople from other disciplines.
The material had tobe prepared in a way that would make it accessibleto students of linguistics, for example, who mightpossess no knowledge of mathematics beyond high-school level.Another characteristic of the European SummerSchools is that the students?
education levels varygreatly.
It is not uncommon to have, in one class,undergraduate, graduate and post-graduate students.This implies that the level of addressing the class hasto be very delicately determined: it is very easy tobore most students or to speak over their heads.
Anadditional difficulty stems from the fact that whilethe language of instruction at the Summer Schoolis English, most participants (students and lecturersalike) are not native speakers of English.Undoubtedly the greatest challenge was to pre-pare the course in a way that will attract the atten-tion of the class.
Formal language theory is a highlytheoretical, mostly mathematical subject.
Standardtextbooks (Hopcroft and Ullman, 1979; Harrison,1978) present the material in a way that will appealto mathematicians: very formal, with one subjectbuilt on top of its predecessor, and with very formal(if detailed) examples.
Even textbooks that aim atintroducing it to non-mathematicians (Partee et al,1990) use mostly examples of formal (as opposed tonatural) languages.
In order to motivate the students,I decided to teach the course in a way that empha-sizes natural language processing applications, andin particular, to use only examples of natural lan-guages.While this paper focuses on a particular course,taught at a particular environment, I believe that thelessons learned while developing and teaching it aremore generally applicable.
A very similar coursecan be taught as an introduction to NLP classes ininstitutions whose majority of students come fromcomputer science, but who would like to attract lin-guistics (and other non-CS) graduates and providethem with the necessary background.
I hope that theexamples given in the paper will prove useful for de-velopers of such courses.
More generally, the paperdemonstrates a gentle approach to formal, mathe-matical material that builds on terminology familiarto its audience, rather than use the standard math-ematical paradigm in teaching.
I believe that thisapproach can be useful for other courses as well.2 Structure of the courseCourses at the Summer School are taught in sessionsof 90 minutes, on a daily basis, either five or tendays.
This course was taught for five days, totaling450 minutes (the equivalent of ten academic hours,approximately one third of the duration of a stan-dard course).
However, the daily meetings eliminatethe need to recapitulate material, and the pace of in-struction can be enhanced.I decided to cover a substantial subset of a stan-dard Formal Language Theory course, starting withthe very basics (e.g., set theory, strings, relationsetc.
), focusing on regular languages and their com-putational counterpart, namely finite-state automata,and culminating in context-free grammars (withouttheir computational device, push-down automata).
Isketch the structure of the course below.The course starts with a brief overview of essen-tial set theory: the basic notions, such as sets, rela-tions, strings and languages, are defined.
All exam-ples are drawn from natural languages.
For exam-ple, sets are demonstrated using the vowels of theEnglish alphabet, or the articles in German.
Set op-erations such as union or intersection, and set rela-tions such as inclusion, are demonstrated again us-ing subsets of the English alphabet (such as vow-els and consonants).
Cartesian product is demon-strated in a similar way (example 1) whereas rela-tions, too, are exemplified in an intuitive manner(example 2).
Of course, it is fairly easy to definestrings, languages and operations on strings and lan-guages ?
such as concatenation, reversal, exponen-tiation, Kleene-closure etc.
?
using natural languageexamples.The second (and major) part of the course dis-cusses regular languages.
The definitions of regularexpressions and their denotations are accompaniedby the standard kind of examples (example 3).
Aftera brief discussion of the mathematical properties ofregular languages (in particular, some closure prop-erties), finite-state automata are gently introduced.Following the practice of the entire course, no math-ematical definitions are given, but a rigorous tex-tual description of the concept which is accompa-nied by several examples serves as a substitute toa standard definition.
Very simple automata, espe-cially extreme cases (such as the automata accept-Example 1 Cartesian productLet be the set of all the vowels in somelanguage and  the set of all consonants.For the sake of simplicity, take to bea, e, i, o, u  and  to beb, d, f, k, l, m, n, p, s, t  .The Cartesian product   is the setof all possible consonant?vowel pairs:							ff	fi	ffifl	!
"	ffifl	#$	&%&%&% ,etc.
Notice that the Cartesian product ' isdifferent: it is the set of all vowel?consonant pairs,which is a completely different entity (albeit withthe same number of elements).
The Cartesianproduct () is the set of all possible consonant?consonant pairs, whereas  is the set of allpossible diphthongs.Example 2 RelationLet be the set of all articles in German and the set of all German nouns.
The Cartesian product * is the set of all article?noun pairs.
Any subsetof this set of pairs is a relation from to  .
In par-ticular, the set +-,ffi.ff	/102.43 and/53 and.and/agree on number, gender and case  is a rela-tion.
Informally, + holds for all pairs of article?nounwhich form a grammatical noun phrase in German:such a pair is in the relation if and only if the articleand the noun agree.ing the empty language, or 687 ), are explicitly de-picted.
Epsilon-moves are introduced, followed bya brief discussion of minimization and determiniza-tion, which is culminated with examples such as 4.Example 3 Regular expressionsGiven the alphabet of all English letters, 6 ,9	!	:;	&%&%&%;	/9	< , the language 6 7 is denoted by theregular expression 687 (recall our convention of us-ing 6 as a shorthand notation).
The set of all stringswhich contain a vowel is denoted by 6 7=>@?A ?B?C?B#ED=687 .
The set of all strings that begin in ?un?
isdenoted by >#FGD67 .
The set of strings that end in ei-ther ?tion?
or ?sion?
is denoted by 6H7 =>I?JflD=K>LFGD.Note that all these languages are infinite.To demonstrate the usefulness of finite-state au-tomata in natural language applications, some op-erations on automata are directly defined, includ-Example 4 Equivalent automataThe following three finite-state automata are equiv-alent: they all accept the setgo, gone, going  . NMF OO  F QPO  F OO  FO 1RO   F OFSSSNote that Mis deterministic: for any state and al-phabet symbol there is at most one possible transi-tion. Pis not deterministic: the initial state hasthree outgoing arcs all labeled by O .
The third au-tomaton, 1R, hasS-arcs and hence is not determinis-tic.
While QPmight be the most readable, Mis themost compact as it has the fewest nodes.ing concatenation and union.
Finally, automata areshown to be a natural representation for dictionariesand lexicons (example 5).This part of the course ends with a presentation ofregular relations and finite-state transducers.
Theformer are shown to be extremely common in natu-ral language processing (example 6).
The latter areintroduced as a simple extension of finite-state au-tomata.
Operations on regular relations, and in par-ticular composition, conclude this part (example 7).The third part of the course deals with context-freegrammars, which are motivated by the inability ofregular expressions to account for (and assign struc-ture to) several phenomena in natural languages.
Ex-ample 8 is the running example used throughout thispart.Basic notions, such as derivation and derivationExample 5 Dictionaries as finite-state automataMany NLP applications require the use of lexiconsor dictionaries, sometimes storing hundreds of thou-sands of entries.
Finite-state automata provide anefficient means for storing dictionaries, accessingthem and modifying their contents.
To understandthe basic organization of a dictionary as a finite-statemachine, assume that an alphabet is fixed (we willuse 6(,a, b,%&%&%, z  in the following discussion)and consider how a single word, say go, can be rep-resented.
As we have seen above, a na?
?ve represen-tation would be to construct an automaton with a sin-gle path whose arcs are labeled by the letters of theword go:O To represent more than one word, we can simply addpaths to our ?lexicon?, one path for each additionalword.
Thus, after adding the words gone and going,we might have:OFOO FOThis automaton can then be determinized and mini-mized:FOO FWith such a representation, a lexical lookup oper-ation amounts to checking whether a word T is amember in the language generated by the automa-ton, which can be done by ?walking?
the automatonalong the path indicated by T .
This is an extremelyefficient operation: it takes exactly one ?step?
foreach letter of T .
We say that the time required forthis operation is linear in the length of T .trees are presented gently, with plenty of examples.To motivate the discussion, questions of ambiguityare raised.
Context-free grammars are shown to besufficient for assigning structure to several naturalExample 6 Relations over languagesConsider a simple part-of-speech tagger: an applica-tion which associates with every word in some nat-ural language a tag, drawn from a finite set of tags.In terms of formal languages, such an applicationimplements a relation over two languages.
For sim-plicity, assume that the natural language is definedover 6M,9	!&%&%&%	< and that the set of tags is6P,PRON, V, DET, ADJ, N, P  .
Then the part-of-speech relation might contain the following pairs,depicted here vertically (that is, a string over 6 M isdepicted over an element of 6P ):I know some new tricksPRON V DET ADJ Nsaid the Cat in the HatV DET N P DET NAs another example, assume that 6Mis as above, and6Pis a set of part-of-speech and morphological tags,including-PRON, -V, -DET, -ADJ, -N, -P, -1, -2, -3,-sg, -pl, -pres, -past, -def, -indef  .
A morpholog-ical analyzer is basically an application defining arelation between a language over 6Mand a languageover 6P.
Some of the pairs in such a relation are(vertically):I knowI-PRON-1-sg know-V-pressome new trickssome-DET-indef new-ADJ trick-N-plsaid the Catsay-V-past the-DET-def cat-N-sgFinally, consider the relation that maps every En-glish noun in singular to its plural form.
While therelation is highly regular (namely, adding ?
I ?
to thesingular form), some nouns are irregular.
Some in-stances of this relation are:cat hat ox child mouse sheepcats hats oxen children mice sheeplanguage phenomena, including subject-verb agree-ment, verb subcategorization, etc.
Finally, somemathematical properties of context-free languagesare discussed.The last part of the course deals with questionsof expressivity, and in particular strong and weakExample 7 Composition of finite-state transducersLet +Mbe the following relation, mapping some En-glish words to their German counterparts:+M,tomato:Tomate, cucumber:Gurke,grapefruit:Grapefruit, grapefruit:pampelmuse,pineapple:Ananas, coconut:Koko,coconut:Kokusnu?
Let +Pbe a similar relation, mapping French wordsto their English translations:+P,tomate:tomato, ananas:pineapple,pampelmousse:grapefruit, concombre:cucumber,cornichon:cucumber, noix-de-coco:coconut Then +P$U+Mis a relation mapping French words totheir German translations (the English translationsare used to compute the mapping, but are not part ofthe final relation):+PVU+M,tomate:Tomate, ananas:Ananas,pampelmousse:Grapefruit,pampelmousse:Pampelmuse, concombre:Gurke,cornichon:Gurke, noix-de-coco:Koko,noix-de-coco:Kokusnu?e Example 8 RulesAssume that the set of terminals isthe, cat, in, hat and the set of non-terminals isD, N, P, NP, PP  .Then possible rules over these two sets include:D W the NP W D NN W cat PP W P NPN W hat NP W NP PPP W inNote that the terminal symbols correspond to wordsof English, and not to letters as was the case in theprevious chapter.generative capacity of linguistic formalism.
TheChomsky hierarchy of languages is defined and ex-plained, and substantial focus is placed on deter-mining the location of natural languages in thehierarchy.
By this time, students will have ob-tained a sense of the expressiveness of each of theformalisms discussed in class, so they are morelikely to understand many of the issues discussedin Pullum and Gazdar (1982), on which this part ofthe course is based.
The course ends with hintsto more expressive formalisms, in particular Tree-Adjoining Grammars and various unification-basedformalisms.3 Enrollment dataWhile the Summer School does not conduct teach-ing evaluations, I felt that it would be useful to re-ceive feedback from participants of the course.
Tothis end, I designed a standard teaching evaluationform and asked students to fill it in on the last class.The data in this section are drawn from the students?responses.The number of students who submitted the ques-tionnaire was 52.
Nationality was varied, with themajority from Finland, Poland, Italy, Germany, theUnited Kingdom and the United States, but alsofrom Canada, the Netherlands, Spain, Greece, Ro-mania, France, Estonia, Korea, Iran, the Ukraine,Belgium, Japan, Sweden, Russia and Denmark.Thirty six defined themselves as graduate students,thirteen as undergraduates and three as post-PhD.The most interesting item was background.
Par-ticipants had to describe their backgrounds bychoosing from Linguistics, Mathematics, ComputerScience, Logic or Other.
Only 32% described theirbackground as Linguistics; 29% chose ComputerScience; 21% chose Mathematics; and 15% ?Logic.
Other backgrounds included mostly Philos-ophy but also Biology and Physics.
Why studentsof Computer Science, and in particular graduate stu-dents, should take Formal Language Theory in suchan interdisciplinary Summer School is unclear tome.Students were asked to grade their impression ofthe course, on a scale of 1?5, along the followingdimensions:X The course is interestingX The course covers important and useful mate-rialX The course progresses at the right paceX The course is funThe average grade was 4.53 for the interest question;4.47 for the usefulness question; 3.67 for the pacequestion; and 4.13 for fun.
These results show thatparticipants felt that the course was interesting anduseful, and even fun.
However, many of them feltthat it did not progress in the right pace.
This mightbe partially attributed to the high rate of computerscience and mathematics students in the audience:many of them must have seen the material earlier,and felt that progress was too slow for them.4 ConclusionsThis paper demonstrates that it is possible to teachformal, mathematical material to students with littleor no formal background by introducing the materialgently, albeit rigorously.
By the end of the course,students with background in linguistics or philos-ophy are able to understand the computer sciencetheoretical foundations underlying many aspects ofnatural language processing, in particular finite-statetechnology and formal grammars.
This sets up acommon background for more advanced classes incomputational linguistics.The course was taught once at an international,interdisciplinary summer school.
I intend to teach itagain this summer in a similar, albeit smaller event;I also intend to teach it to graduate Humanities stu-dents who express interest in computational linguis-tics, in order to introduce them to some founda-tional theoretical aspects of computer science essen-tial for working on natural language processing ap-plications.
The positive reaction of most studentsto the course is an encouraging incentive to developmore courses along the same lines.AcknowledgmentsI wish to extend my gratitude to my students atESSLLI-2001, who made teaching this course suchan enjoyable experience for me.
I am grateful to thereviewers for their useful comments.
This work wassupported by the Israeli Science Foundation (grantno.
136/1).ReferencesMichael A. Harrison.
1978.
Introduction to formal lan-guage theory.
Addison-Wesley, Reading, MA.John E. Hopcroft and Jeffrey D. Ullman.
1979.
In-troduction to automata theory, languages and com-putation.
Addison-Wesley Series in Computer Sci-ence.
Addison-Wesley Publishing Company, Reading,Mass.Brabara H. Partee, Alice ter Meulen, and Robert E.Wall.
1990.
Mathematical Methods in Linguistics,volume 30 of Studies in Linguistics and Philosophy.Kluwer Academic Publishers, Dordrecht.Geoffrey K. Pullum and Gerald Gazdar.
1982.
Naturallanguages and context-free languages.
Linguistics andPhilosophy, 4:471?504.
