Proceedings of the ACL Interactive Poster and Demonstration Sessions,pages 13?16, Ann Arbor, June 2005. c?2005 Association for Computational LinguisticsCL Research?s Knowledge Management SystemKenneth C. LitkowskiCL Research9208 Gue RoadDamascus, MD 20872ken@clres.comhttp://www.clres.comAbstractCL Research began experimenting withmassive XML tagging of texts to answerquestions in TREC 2002.
In DUC 2003, theexperiments were extended into textsummarization.
Based on these experiments,The Knowledge Management System (KMS)was developed to combine these twocapabilities and to serve as a unified basis forother types of document exploration.
KMS hasbeen extended to include web questionanswering, both general and topic-basedsummarization, information extraction, anddocument exploration.
The documentexploration functionality includes identificationof semantically similar concepts and dynamicontology creation.
As development of KMS hascontinued, user modeling has become a keyresearch issue: how will different users want touse the information they identify.1 IntroductionIn participating the TREC question-answering track,CL Research began by parsing full documents anddeveloping databases consisting of semantic relationtriples (Litkowski, 1999).
The database approachproved to be quite confining, with time requirementsexpanding exponentially trying to maintain larger setsof documents and increasingly complex procedures toanswer questions.
A suggestion was made to tag textwith the type of questions they could answer (e.g.,tagging time phrases as answering when questionsand person names as answering who questions).
Thisled to the general approach of analyzing parse trees toconstruct an XML representation of texts (i.e.,attaching metadata to the text) and examining theserepresentations with XPath expressions to answerquestions.Litkowski (2003a) demonstrated the viability ofthis approach by showing that XPath expressionscould be used to answer questions at a level above thehighest performing team.
Many issues and problemswere identified: (1) The necessary level of analysis tomeet the needs of particular applications; (2) taggingalternatives; and (3) the viability of the using theXML representation for text summarization,information extraction, novelty detection, and textmining.
Subsequent efforts showed that XMLrepresentations could be effectively used insummarization (Litkowski, 2003b) and noveltydetection (Litkowski, 2005).Initially, CL Research developed an interface forexamining question-answering performance.
Thisinterface has since evolved into a KnowledgeManagement System (KMS) that provides a singleplatform for examining English documents (e.g.,newswire and research papers) and for generatingdifferent types of output (e.g., answers to questions,summaries, and document ontologies), also in XMLrepresentations.
In this demonstration, CL Researchwill describe many parts of KMS, particularly theapproaches used for analyzing texts.1Thedemonstration will particularly focus on the value ofXML in providing a flexible and extensiblemechanism for implementing the various NLPfunctionalities.
In addition, the demonstration willidentify the emerging issue of user modeling todetermine exactly how knowledge will be used, since1Screen shots of KMS in performing thefunctions as described below are can be seen athttp://www.clres.com/kmsscreen.html.13the primary purpose of KMS is to serve as a tool thatwill enable users (such as scientists and intelligenceanalysts) to accumulate and manage knowledge(including facts, such as described in Fiszman et al,2003) about topics of interest.22 Parsing and Creation of XML TaggingKMS and each of its application areas is based onparsing text and then transforming parse trees into anXML representation.
CL Research uses the ProximityParser, developed by an inventor of top-down syntax-directed parsing (Irons, 1961).3The parser outputconsists of bracketed parse trees, with leaf nodesdescribing the part of speech and lexical entry foreach sentence word.
Annotations, such as number andtense information, may be included at any node.
(Litkowski (2002) and references therein providemore details on the parser.
)After each sentence is parsed, its parse tree istraversed in a depth-first recursive function.
Duringthis traversal, each non-terminal and terminal node isanalyzed to identify discourse segments (sentencesand clauses), noun phrases, verbs, adjectives, andprepositional phrases.
These items are maintained inlists; the growing lists constitute a document?sdiscourse structure and are used, e.g., in resolvinganaphora and establishing coreferents (implementingtechniques inspired by Marcu (2000) and Tetreault(2001)).
As these items are identified, they aresubjected to a considerable amount of analysis tocharacterize them syntactically and semantically.
Theanalysis includes word-sense disambiguation ofnouns, verbs (including subcategorizationidentification), and adjectives and semantic analysisof prepositions to establish their semantic roles (suchas described in Gildea & Jurafsky, 2002).When all sentences of a document have beenparsed and components identified and analyzed, thevarious lists are used to generate the XMLrepresentation.
Most of the properties of thecomponents are used as the basis for establishingXML attributes and values in the final representation.
(Litkowski 2003a provides further details on thisprocess.)
This representation then becomes the basisfor question answering, summarization, informationextraction, and document exploration.The utility of the XML representation does notstem from an ability to use XML manipulationtechnologies, such as XSLT and XQuery.
In fact,these technologies seem to involve too muchoverhead.
Instead, the utility arises within aWindows-based C++ development environment witha set of XML functions that facilitate working withnode sets from a document?s XML tree.3 Question AnsweringAs indicated above, the initial implementation of thequestion-answering component of KMS was designedprimarily to determine if suitable XPath expressionscould be created for answering questions.
CLResearch?s XML Analyzer was developed for thispurpose.4XML Analyzer is constructed in a C++Windows development environment to which acapability for examining XML nodes has been added.With this capability, a document can be loaded withone instruction and an XPath expression can beapplied against this document in one more instructionto obtain a set of nodes which can be examined inmore detail.
Crucially, this enables low-level controlover subsequent analysis steps (e.g., examining thetext of a node with Perl regular expressions).XML Analyzer first loads an XML file (whichcan include many documents, such as the ?top 50?used in TREC).
The user then presents an XPathexpression and discourse components (typically, nounphrases) satisfying that expression are returned.
XMLAnalyzer includes the document number, the sentencenumber, and the full sentence for each noun phrase.Several other features were added to XML Analyzerto examine characteristics of the documents andsentences (particularly to identify why an answer2The overall design of KMS is based onrequirements enunciated by intelligence analysts andquestion-answering researchers  in a workshop onScenario-Based Question Answering sponsored by theAdvanced Research and Development Agency in 2003.3An online demonstration of the parser isavailable at http://www.zzcad.com/parse.htm.
A demoversion of the parser is available for download athttp://www.clres.com/demos.html.4A demo version of XML Analyzer is availablefor download at http://www.clres.com/demos.html.14wasn?t retrieved by an XPath expression).XML Analyzer does not include the automaticcreation of an XPath expression.
KMS was createdfor TREC 2003 as the initial implementation of acomplete question-answering system.
In KMS, thequestion itself is parsed and transformed into anXML representation (using the same underlyingfunctionality for processing documents) and then usedto construct an XPath expression.An XPath expression consists of two parts.
Thefirst part is a ?passage retrieval?
component, designedto retrieve sentences likely to contain the answer.
Thisbasic XPath is then extended for each question typewith additional specifications, e.g., to ask for nounphrases that have time, location, or other semanticattributes.
Experiments have shown that there is atradeoff involved in these specifications.
If they arevery exacting, few possible answers are returned.Backoff strategies are used to return a larger set ofpotential answers and to analyze the context of thesepotential answers in more detail.
The development ofroutines for automatic creation of XPath expressionsis an ongoing process, but has begun to yield moreconsistent results (Litkowski, 2005).In preparation for TREC 2004, KMS was furtherextended to incorporate a web-based component.With a check box to indicate whether the web or adocument repository should be used, additionalfunctionality was used to pose questions to Google.
Inweb mode, an XML representation of a question isstill developed, but then it is analyzed to present anoptimal query to Google, typically, a pattern that willprovide an answer.
This involves the use of anintegrated dictionary, particularly for creatingappropriate inflected forms in the search query.
KMSonly uses the first page of Google results, withoutgoing into the source documents, extracting sentencesfrom the Google results and using these as thedocuments.
(A user can create a new ?documentrepository?
consisting of the documents from whichanswers have been obtained.)
Many additionalpossibilities have emerged from initial explorations inusing web-based question answering.4 SummarizationLitkowski (2003a) indicated the possibility that theXML representation of documents could be used forsummarization.
To investigate this possibility, XMLAnalyzer was extended to include summarizationcapabilities for both general and topic-basedsummaries, including headline and keywordgeneration.
Summarization techniques crucially takeinto account anaphora, coreferent, and definite nounphrase resolutions.
As intimated in the analysis of theparse output, the XML representation for a referringexpression is tagged with antecedent information,including both an identifying number and the full textof the antecedent.
As a result, in examining asentence, it is possible to consider the import of all itsantecedents, instead of simply the surface form.At the present time, only extractivesummarization is performed in KMS.
The basis foridentifying important sentences is simply a frequencycount of its words, but using antecedents instead ofreferring expressions.
Stopwords and some otheritems are eliminated from this count.In KMS, the user has the option for creatingseveral kinds of summaries.
The user specifies thetype of summary (general, topic-based, headline, orkeyword), which documents to summarize (one ormany), and the length.
Topic-based summariesrequire the user to enter search terms.
The searchterms can be as simple as a person?s name or a fewkeywords or can be several sentences in length.Topic-based summaries use the search terms to giveextra weight to sentences containing the search terms.Sentences are also evaluated for their novelty, withredundancy and overlap measures based onexamining their noun phrases.
KMS summarizationprocedures are described in more detail in Litkowski(2003b); novelty techniques are described inLitkowski (2005).In KMS, summaries are saved in XML files assets of sentences, each characterized by its source andsentence number.
Each summary uses XMLattributes containing the user?s specifications and thedocuments included in the search.
generated quicklybut in whole form.5 Document ExplorationKMS includes two major components forexploring the contents of a document.
The first isbased on the semantic types attached to nouns andverbs.
The second is based on analyzing noun phrasesto construct a document hierarchy or ontology.As noted above, each noun phrase and each verb15is tagged with its semantic class, based on WordNet.A user can explore one or more documents in threestages.
First, a semantic category is specified.Second, the user pushes a button to obtain all theinstances in the documents in that category.
Thephraseology in the documents is examined so thatsimilar words (e.g., plurals and singulars and/orsynonyms) are grouped together and then presented ina drop-down box by frequency.
Finally, the user canselect any term set and obtain all the sentences in thedocuments containing any of the terms.KMS provides the capability for viewing a?dynamic?
noun ontology of a document set.
All nounphrases are analyzed into groups in a tree structurethat portrays the ontology that is instantiated by thesephrases.
Noun phrases are reduced to their baseforms (in cases of plurals) and grouped together firston the basis of their heads.
Synonym sets are thengenerated and a further grouping is made.
Algorithmsfrom Navigli & Velardi (2004) are being modifiedand implemented in KMS.
The user can then select anode in the ontology hierarchy and create a summarybased on sentences containing any of its terms orchildren.6 Dictionaries and Thesauruses in KMSKMS makes extensive use of integrated dictionariesand thesauruses, in addition to a comprehensivedictionary used in parsing (which makes use of about30 subcategorization patterns for verbs).
Thisdictionary is supplemented with other dictionaries thatare first used in dynamically extending the parser?sdictionary for parsing, but then more extensively insemantic analysis.
WordNet is used for manyfunctions, as is a Roget-style thesaurus.
KMS alsouses a full machine-readable dictionary, dictionariesand semantic networks from the Unified MedicalLanguage System, and a specially constructeddictionary of prepositions for semantic role analysis.7 SummaryThe preceding sections have focused on particularprominent functionalities (question-answering,summarization, and document exploration) in KMS.Each of these components is part of the whole, inwhich the main objective is to allow a user to exploredocuments in a variety of ways to identify salientportions of one or more documents.
KMS is designedto identify relevant documents, to build a repositoryof these documents, to explore the documents, and toextract relevant pieces of information.ReferencesFiszman, M., Rindflesch, T., & Kilicoglu, H. (2003).Integrating a Hypernymic Proposition Interpreterinto a Semantic Processor for Biomedical Texts.Proceedings of the AMIA Annual Symposium onMedical Informatics.Gildea, Daniel, and Daniel Jurafsky.
(2002) AutomaticLabeling of Semantic Roles.
ComputationalLinguistics, 28 (3), 245-288.Irons, E. T. (1961) A Syntax Directed Compiler forALGOL-60.
Communications of the ACM, 4, 51-55.Litkowski, K. C. (1999).
Question Answering UsingSemantic Relation Triples.
In E. M. Voorhees &D. K. Harman (eds.
), The Eighth Text RetrievalConference (TREC-8).
NIST Special Publication500-246.
Gaithersburg, MD., 349-56.Litkowski, K. C. (2002).
CL Research Experiments inTREC-10 Question-Answering.
In E. M. Voorhees& D. K. Harman (eds.
), The Tenth Text RetrievalConference (TREC 2001).
NIST SpecialPublication 500-250.
Gaithersburg, MD., 122-131.Litkowski, K. C. (2003a).
Question Answering UsingXML-Tagged Documents.
In E. M. Voorhees & L.P. Buckland (eds.
), The Eleventh Text RetrievalConference (TREC 2002).
NIST SpecialPublication 500-251.
Gaithersburg, MD., 122-131.Litkowski, K. C. (2003b).
Text Summarization UsingXML-Tagged Documents.
Available:http://nlpir.nist.gov/projects/duc/pubs.html.Litkowski, K. C. (2005).
Evolving XML and DictionaryStrategies for Question Answering and NoveltyTasks.
Available:http://trec.nist.gov/pubs/trec13/t13_proceedings.html.Marcu, Daniel.
(2000) The Rhetorical Parsing ofUnrestricted Texts: A Surface-based Approach.Computational Linguistics, 26 (3), 395-448.Navigli, R. & P. Velardi (2004) Learning DomainOntologies from Document Warehouses andDedicated Web Sites.
Computational Linguistics30, 151-180.Tetreault, Joel.
(2001) A Corpus-Based Evaluation ofCentering and Pronoun Resolution.
ComputationalLinguistics, 27 (4), 507-520.16
