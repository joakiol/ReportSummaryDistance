A FLEX IBLE  SHALLOW APPROACHTO TEXT GENERATIONStephan Busemann and Helmut HoracekDFKI GmbHStuhlsatzenhausweg 3, 66123 Saarbrficken , Germany{busem~n~, horacek}?dfki.de IAbstractIn order to support he efficient development of NL generation systems, two orthogonal?
methods are currently pursued with emphasis: (i) reusable, general, and linguistically ?motivatedsurface realization components, and (2) Simple, task-oriented template-based techniques.
Inthis paper we argue that, from an application-oriented p rspective, the benefits of both are stilllimited, lax order to improve this situation, we suggest and evaluate shallow generation methodsassociated with increased flexibility.
We advise a close connection between domain-motivatedand linguistic ontologies that Supports the quick adaptation to new tasks and domains, ratherthan the reuse of general resources.
Our method is especially designed for ?generating reportswith limited linguistic variations.1 Introduct ionin order to Support the efficient development of NL generation systems, two orthogonal methodsare currently pursued with emphasis: (1) reusable, general, and linguistically motivated surface re-alization components, and (2) simple, task-oriented template-based techniques.
Surface realizationcomponents impose a layer of intermediate r presentations that has become fairly standard, suchas the Sentence Plan Language (SPL)\[Kasper and Whitney, 1989\].
This layer allows for the use ofexisting software with well-defined interfaces, often reducing the development effort for surface re-alization considerably.
Template-based ?techniques recently had some sort of revival through severalapplication-oriented projects such as IDAS \[Reiter et al; 1995\], that combine pre-defined surfaceexpressions with freely generated text in one or another way.
However, the benefits of both surfacerealization components and template-based techniques are still limited from an application-orientedperspective.
Surface realization components are difficult to use because of the differences betweendomain-oriented and linguistically ?motivated ontologies (as in SPL), and existing template-based?
techniques are too inflexible.In this paper we Suggest and evaluate flexible shallow methods for report generation applica-tions requiring limited linguistic resources that are adaptable with little effort.
We advise a closeconnection between domain-motivated and linguistic ontologies, and we suggest a layer of inter-mediate representation that is oriented towards the domain and the given task.
This layer maycontain representations of different granularity, some highly implicit, others very elaborate.
Weshow how this is used by the processing components in a beneficial way.1This work has beensupported by a grant for theproject TEMSIS from the European Union (Telematics Appli-cations Programme, Sector C9, contract no.
2945).IiI1,II,\[II238The approach suggested oes not only change the modularization generally assumed for NLGsystems drastically, it also renders the system much more application-dependent.
At first glance,however, such an approach seems to abandon generality and reusability completely, but, as we willdemonstrate, this is not necessarily the case.The rest of this paper is organized as follows: Section?2 identifies deficits with current approachesto surface realization that may occur for particular applications.
In Section 3 we propose alternativemethods implemented into our sample application, the generation ofair-quali?ty reports from currentenvironmental data.
In Section 4 we discuss the pros and cons of our approach, and we summarizethe conditions for successful use.2 In-Depth and Shallow Generation2.1 Sha l low generat ionRecently, the distinction between in-depth and Shallow approaches to language processing hasemerged from the need to build sensible applications.
In language understanding deep analysisattempts to "understand" every part of the input, while shallow analysis tries to identify only partsof interest for a particular application.
Shallow analysis is a key concept for information extractionfrom huge text bases and many other real-world application types.In language generation a corresponding distinction which we term in-depth vs. shallow genera.tion 2 is becoming prominent.
While in-depth generation is inherently knowledge-based and the-oretically motivated, shallow generation quite opportunistically models only the parts of interestfor the application in hand.
Often such models will turn out to be extremely shallow and simple,but in other cases much more detail is required.
Thus, developing techniques for varying model-ing granularity according to the requirements posed by the application is a prerequisite for morecustom-tailored systems.According to Reiter and Mellish, shallow techniques (which they call "intermediate") are ap-propriate as long as corresponding in-depth approaches are poorly understood, less efficient, ormore costly to develop \[Reiter and Mellish, 1993\]\] While our motivation for shallow techniquesis in essence based on the cost factor,?
our assessment is even more pronounced than Reiter's andMellish's in that we claim that shallow approaches combining different granularity in a flexible wayare better suited for small applications.
We are convinced that shallow generation systems willhave a similar impact on the development of feasible applications as shallow analyzers.2.2 Potent ia l  shor tcomings  of  approaches  to  sur face rea l i za t ionCurrent approaches to surface realization are mostly in-depth, based on general, linguistically moti-vated, and widely reusable realization components, uch as Penman \[Penman, 1989\], KPML \[Bate-man, 1997\], and SURGE \[Elhadad and Robin, 1996\].
These components are domain-independent?
and based on Sound linguistic principles.
KPML and SURGE also exhibit a broad coverage ofEnglish, while sevhral other language models are also available or under development.
Despitetheir being reusable in general, the fact that the modularization of grammatical knowledge followslinguistic criteria rather than the needs of different ypes of applications may cause a number ofproblems for an efficient development of concrete applications:2"vVe thus avoid confusion with the common distinction between deep and surface generation.239?
The substantial differences between domain- and linguistically motivated ontologies may ren-der the mapping between them difficult; for instance, the use of case relations uch as "agent"or "objective" requires compatible models of deep case semantics.?
The need to encapsulate grammar knowledge within the surface realizer may require de-tails in the intermediate r presentation to be spelled out that are irrelevant to the intendedapplication, even for rather Small systems.?
The fixed granularity of grammatical modeling requires a realizer to cover many more lan-guages, language fragments, or stylistic variations than would be needed for one particularapplication, which can lead to a considerable inefficiency of the realizer.In addition, there may be linguistic onstructs needed for some applications that are still outsidethe scope of the general tool.
Their inclusion may require the intermediate r presentation layer?
tobemodif ied.2 .3  Potent ia l  shor tcomings  o f  sha l low generat ion  methodsA prominent example for an early shallow generation system is Ana \[Kukich, 1983\], which reportsabout stock market developments.
While the kind of texts it produces can still be consideredvaluable today, Ana is implemented as a Widely unstructured rule-based system, which does notseem to be easily ?extendable and portable.
Since then, various shallow methods including cannedtext parts and some template-based techniques have been utilized, e.g.
in CogentHelp \[White andCaldwell, 1997\], in the system described in \[Cawsey et al, 1995\], and in IDAS \[Reiter et al, 1995\].They feature simplicity where the intended application does not require fine-grained istinctions,such as the following techniques used in IDAS:?
canned text with embedded KB references ("Carefully slide \[x\] out along its guide"),?
case frames with textual slot fillers, ("gently" in (manner : "gent ly") ) .Although these techniques seem to be able to provide the necessary distinctions for many practicalapplications in a much simpler way than in-depth surface realization components can do, a seriouslimitation lies in their inflexibility.
The first example above requires the realization of Ix\] to agreein number with the canned part; as this is not explicitly ?treated, the system seems to implicitly"know" that only singular descriptions will be inserted.
Moreover, canned texts as case role fillersmay bear contextual influence, too, such as pronominals, or word order phenomena.
Thus, theflexibility of shallow generation techniques should be increased significantly.3 Shal low Generat ion in TEMSISI n  order to tailor-the design of a generation system towards an application, we must account fordifferent levels of granularity.
We need a formalism capable of adapting to the expressivity of thedomain-oriented information.
Parts of  the texts to be generated may be canned, some requiretemplates, others require a more elaborate grammatical model.In this section we first introduce an instance of the kind of applications we have in mind.
Wethen ?proceed by discussing aspects of different granularity from the point of view of the intermediate240representation (IR) layer and the components it interfaces.
These include text organization andtext realization.
The text organizer is also responsible for content selection.
It retrieves the relevantdata from the TEMSIS database.
It combines fixed text blocks with the results of the realizer in alanguage-neutral way.
IR expressions are consumed by the text realizer, which is a version of theproduction system TG/2 described in \[Busemann, 1996\].3.1 The  TEMSIS  app l i ca t ionWith TEMSIS a Transnational Environmental Management Support and Information Systemwas created as part of a transnational cooperation between the communities in the French-Germanurban agglomeration, Moselle Est and Stadtverband SaarbriJcken.
Networked information kiosksare being installed in a number of communities to provide public and expert environmental infor-mation.
The timely availability of relevant environmental information will improve the planningand reactive capabilities of the administration considerably.
Current measurement data are madeavailable on the TEMSIS web server.
The data include the pollutant, the measurement values,the location and the time the measurements were taken, and a variety of thresholds.
Besides uchdata, the server provides metadata that allow for descriptions of the measuring locations, of thepollutants measured and of regulations or laws according to which a comparison between measure-ments and thresholds can be performed.
This information can be accessed via the internet througha hyperlink navigation interface (http ://www-temsi .d fk i .
uni -sb,  de/) .The verbalization of NL air quality information in German and French is an additional servicereducing the need to look up multiple heterogeneous data.
The generated texts can be comple-mented with diagrams of time series.
The material can be edited andlfurther ?processed by theadministrations to fit additional needs.In order to request a report, a user specifies his demand by choosing from a hierarchy of optionspresented to him within the hyperlink navigation interface.
He selects a report type by indicat-ing whether he is interested in average values, maximum values, or situations where thresholdsare exceeded.
Further choices include the language, the country the environmental legislation ofwhich should apply, the measurement location, the pollutant, the period of time for which mea-surements should be retrieved, and in some cases comparison parameters.
In addition, descriptionsof pollutants and measurement stations can be requested.
They are stored as canned texts in theTEMSIS database: Not all choices are needed in every case, and the TEMSIS navigator?restrictsthe combination of choices to the meaningful ones.Let us assume that the user wants a French text comparing thresholds for sulfur dioxide withmeasurements taken in the winter period of 1996/97 at VSlklingen City, and the applicable legis-lation should be from Germany.
He also wants a confirmation of some of his choices.
The user?
receives the following text on his browser 3 (translated into English for the reader's convenience):You would like information about the concentration of sulfur dioxide in the air during-the?
winter season 1996/97.
At the measurement station of VSlklinge n City, the early warningthreshold for sulfur dioxide at an exposition of three hours (600 /zg/m 3 according to theGerman decree "Smogverordnung") was not exceeded, in winter 1995/96, the early warningthreshold was not exceeded either.3A demo version of the system isavailable at http://wnT.dfki.de/service/nlg-demo/.241 ?Reports are organized into one or several paragraphs.
Their length may range from a few linesto a page.\[(COOP THRESHOLD-EXCEEDING)(LANGUAGE.
FRENCH)(TIME \[(PILED SEASON) (NAME \[(SEASON WINTER) (YEAR 1996)\])\])(THRESHOLD-VALUE \[(AMOUNT 600) (UNIT MEG-M3)\])(POLLUTANT SULFUR-DIOXIDE)(SITE "V~o llklingen-City") ..(SOURCE \[(LAW-NAME SMOGVERORDNUNG) (THRESHOLD-TYPE VORWARNSTUFE)\] )(DURATION \[(HOUR 3)\])(EXCEEDS \[(STATUS NO) (TIMES 0)\])\].En hive r 1996/97 ~ la station de mesure de V6lklingen-City , le seuil d'avertissement pour le dioxidede soufre pour une exposition de trois heures (600.0 #g/m 3 selon le decret alemand "Smogverord-nung") n'a pas dt~ dgpassde.Figure h A sample intermediate r Presentation for a report statement and its realization.3.2 The  in termed ia te  representat ionThe main purpose of the IR layer for the report generation system consists in ensuring that allfacets of the domain with ?their different degrees of specificity can be verbally expressed, and inkeeping the realization task simple when no or little variety in language is needed.
While SPL andsimilar languages interfacing to in-depth surface realization are either linguistic in nature or largelyconstrain the surface form of an utterance, the IR specifies domain information to be conveyed tothe user and logical predicates about it.
Abstracting away from language-specific information inthe IR like this has the additional advantage that multi-lingual aspects can be kept internal to therealizer.
They depend on the LANGUAGE feature in an IR expression.The IR in Figure 1 roUghly corresponds to the key statement of the sample report in the pre-vious section (the second sentence), which also appears at the end of each report as a summary.It constitutes a threshold comparison, as stated bythe  value of the C001 ~4 slot.
There is only littleindication as to how IR exlSressions should be expressed linguistically.
Many semantic relations be-tween the elements of an IR expression are left implicit.
For instance, the value of DURATION relatesto the time of exposure according to the threshold's definition and not to the period of time the useris interested in (TIME).
Another example is the relation between EXCEEDS and THRESHOLD-VALUE,.
which leads to the message that the early warning threshold was not exceeded at all.
Wordingsare not prescribed.
For instance, our sample IR does not contain a basis for the  generation of"exposure" or "measurement station".IR  expressions, contain specifications a t  different degrees of granularity.
For coarse-grainedspecifications, it is up to the text realizer to make missing or underspecified parts explicit on thesurface so that, in a sense, shallow text realization determines parts of the contents.
For morefine-grained specifications , uch as time expressions, text realization behaves like a general surface4The C00P value can correspond to the report ype, as in the example, to confirmations ofuser choices, or to metacomments such as an introductory statement toa diagram, generated by a dedicated component.242generator with a fully-detailed interface.
Ensuring an appropriate textual realization from IRexpressions i left to the language template design within the realizer.The syntax of IR expressions i defined by a standard Backus-Naur form.
All syntacticallycorrect expressions have a compositional semantic interpretation and can be realized as a surfacetext provided corresponding realization rules are defined.?
Sharing the IR definitions between thetext organization and the realization component thus avoids problems of realizability described in\[Meteer, 1992\].3.3 Text  o rgan izat ionThe goal of text organization in our context is to retrieve and express, in terms suitable for thedefinition of the IR, (1) report specifications provided by the user, (2) the relevant domain dataaccessed from the database according to these specifications, including e.g.
explicit comparisonsbetween measurements and threshold values, and (3) implicitly associated meta-information fromthe database, such as the duration of exposure, the decree and the value of the threshold.
This taskis accomplished by a staged process that is application-oriented rather than based on linguisticallymotivated principles.The process tarts with building some sort of a representation sketch, by instantiating a reportskeleton that consists of a sequence of assertion statement specifications.
Assertion statementsconsist of a top level predicate that represents the assertion's type (e.g.
threshold-exceeding) andencapsulates the entire meaning of the associated assertion, except to attached specifications anddomain data, to make local parameters and data dependencies xplicit.In order to transform this initial representation to meet the application-oriented requirementsof the IR, it is necessary to recast he information, which comprises augmenting, restructuring, andaggregating its components~Augmenting statement specifications means making information implicitly contained or availableelsewhere explicitly at the place it is needed.
This concerns reestablishing report-wide information,as well as making locally entailed information accessible.
An example for the former is the number ofdiagrams copied?
into the introductory statement to these diagrams.
This treatment is much simplerthan using a reference generation algorithm, but it relies on knowing the number of diagrams inadvance.
An example for the latter is the unit in which the value of a measurement is expressed.Restructuring information imposes some manipulations on the specifications obtained so farto rearrange the pieces of information contained so that they meet the definition of the IR.
Theassociated operations include reifying an attribute as a structured value and raising an embeddedpartial description.
These operations are realized by mapping schemata similar to those elaboratedfor linguistically motivated lexicalization \[H0racek, 1996\].
However, ?some of our schemata repurely application-oriented and tailored to the domain, which manifests itse!f in the larger size ofthe structures covered.Aggregation, the last part of information recasting, comprises removing partial descriptions oradding simple structures.
These operations are driven by a small set of declaratively representedrules that access a discourse memory.
Most of the rules aim at avoiding repetitions of optionalconstituents (e.g., temporal and locative information) over adjacent statements.
For example, theTIME specification is elided in the second sentence of our sample text, since the time specificationin the first sentence still applies.
An example for adding a simple structure to an IR expressionis the insertion of a marker indicating a strong correspondence b tween adjacent assertions, which243(defproduction threshold-exceeding "WUOI"( : PRECOND ( : CAT DECL:TEST ((coop-eq 'threshold-exceeding) (threshold-value-p))):ACTIONS (:TEMPLATE (:OPTRULE PPtime (get-param 'time))(: OPTRULE SITEV (get-param ' site) )(:RULE THTYPE (self))" (:0PTRULE POLL (get-param 'pollutant))(:0PTRULE DUR (get-param 'duration))"(" (:RULE VAL (get-param 'thresh01d-value))(:OPTRULE LAW (get-param 'law-name)) ") "(:RULE EXCEEDS (get-param 'exceeds)) ".
": CONSTRAINTS (: GENDER (THTYPE EXCEEDS) : EQ))))Figure 2: A TGL rule defining a sentence template for threshold exceeding statements.gives rise to inserting "either" in the sample text, Altogether, the underlying rules are formulatedto meet application particularities, uch as impacts of certain combinations of a value, a status,and a threshold comparison outcome, rather than to caPture linguistic principles.3.4 Text  rea l i za t ion  w i th  TG/2TG/2  is a flexible and reusable application-oriented text realization system that can be smoothlycombined with deep generation processes.
It ?integrates canned text, templates, and context-freerules into a single production-rule formalism and is thus extremely well suited for coping with IRsubexpressions of different granularity.TG/2  is based on production system techniques \[Davis and King, 1977\] that preserve the mod-ularity of processing and linguistic knowledge.
Productions are applied through the familiar three-step processing cycle: (i) identify the applicable rules, (ii) select a rule on the basis of some conflictresolution mechanism, and (iii) apply that rule.
Productions are used to encode grammar ulesin the language TGL \[Busemann, 199611 A rule is applicable if its preconditions are met.
TheTGL rule in Figure 2 is applicable to input material as shown in Figure 1, because the COOP-slot matches, and there is information about the THRESHOLD-VALUE available (otherwise a differentsentence pattern, and hence a different rule, would be required).TGL rules contain categories as in a context-free grammar, which are used for rule selection(see below).
The rule's actions are carried out in a top-down, depth-first and left.to-right manner.They include the activation of other rules (: RULE, : 0PTRULE), the execution of a function, or thereturn of an ASCII string as a (partial) result.
When selecting other rules by virtue of a category,the relevant portion of the input structure for which a candidate rule must pass its associatedtests must be identified.
The function get:parma in Figure 2 yields the substructure of the current ??
input depicted by the argument.
The  first action selects all rules with category PPtime; the relevantsubstructure is the TIME slot of an IR.TGL ?rules are defined according to the IR syntax definitions.
This includes optional IR elements,many of which can simply be omitted without disturbing fluency.
In these cases, optional rules(0PTRULE) are defined in TGL.
Optional actions are ignored if the input structure does not containrelevant information.
In certain cases, the omission of an IR element would suggest a differentII,11IIlIiIIiI,ll244Ii!il!Ii|,!i!sentence structure, which is accounted ?
for by defining alternative TGL rules with appropriate testsfor the presence of some IR element.
Agreement relations are encoded into TGL by virtue ofa PATRstyle feature percolation mechanism \[Shieber et al, 1983\].
The rules can be annotated by equationsthat either assert equality of a feature's value at two or more ?constituents, or introduce a featurevalue at a constituent.
The constraint in Figure 2 requires the categories THTYPE and EXCEEDS toagree in gender, thus implementing a subject-participle agreement relation in French.
This generalmechanism provides a considerable amount of flexibility and goes beyond simple template fillingtechniques.A TGL rule is successfully applied if all actions are carried out.
The rule returns the concate-nation of the substrings produced by the "template" actions.
If an action fails, backtracking canbe invoked flexibly and efficiently using memoization techniques ( ee \[Busemann, 1996\]).4 Costs and BenefitsAs Reiter and Mellish note, the use of shallow techniques needs to be justified through a cost-benefitanalysis \[Reiter and Mellish, 1993\].
We specify the range of possible applications our approach is?
useful for, exemplified by the report generator developed for the TEMSIS project.This application took an effort of about eight person months, part of which were spent imple-menting interfaces to the TEMSIS server and to the database, and for making ourselves acquaintedwith details of the domain.
The remaining time was spent on (1) the elicitation of user requirementsand the definition of a small text corpus, (2) the design of IR according to the domain distinctionsrequired for the corpus texts, and (3) text organization, adaptation of TG/2 and grammar devel-opment.The grammars comprise 105 rules for the German and 122 for the French version.
There areabout twenty test predicates and IR access functions, most of which are needed for both languages.The French version was designed on the basis of the German one and took little more than a weekto implement.
The system covers a total of 384 different report structures that differ in at leastone linguistic aspect.4.1 Benef i t sAltogether, the development effort was very low.
We believe that reusing an in-depth surfacegenerator for this task would not have scored better.
Our method has a number of advantages:(1) Partial reusability.
Despite its domain-dependence, parts of the system are reusable.
TheTG/2 interpreter has been adopted without modifications.
Moreover, a sub-grammar for timeexpressions in the domain of appointment scheduling was reused with only minor extensions.
(2) Modeling flexibility.
Realization techniques of different granularity (canned text, templates,context-free grammars) allow the grammar writer to model general, linguistic knowledge as well asmore specific task and domain-oriented wordings.
(3) Processing "speed.
Shallow processing is fast.
In our system, the average generation time ofless than a second can almost be neglected (the overall run-time is longer due to database access).
(4) Multi-lingual extensions.
Additional languages can be included with little effort because theIR is neutral towards particular languages.
(5) Variations in wording.
Alternative formulations are easily integrated by defining conflictingrules in TGL.
These are ordered according to a set of criteria that cause the system to prefer certain245formulations to others (cf.
\[Busemann, 1996\]): Grammar ules leading to preferred formulationsare selected first from a conflict set of concurring rules~ The preference mechanisms will be used ina future version to tailor the texts for administrative and public uses.4.2 CostsAs argued above, the orientation towards the application task and domain yields some importantbenefits.
On the other hand, there are limitations in reusability and flexibility:(1) IR cannot be reused for other applications.
The consequences for the modules interfacedby IR, the text organizer and the text realizer, are a loss in generality.
Since both modules keepa generic interpreter apart from partly domain-specific knowledge, the effort of transporting thecomponents o new applications i , however, restricted to modifying the knowledge sources.
(2) By associating canned text with domain acts ' TG/2 behaves in a domain and task specificway.
This keeps the flexibility in the wording, which can only partly be influenced by the textorganizer, inherently lower than with in-depth approaches.4.3 When does it pay  off?We take it for granted that the TEMSIS generation application stands for a class of comparabletasks that can be characterized asfollows.
The generated texts are information-conveying reportsin a technical domain.
The subIanguage allows for a rather straight-forward mapping onto IRexpressions, and IR expressions can be realized in a context-independent way.
For these kinds ofapplications, our methods provide sufficient flexibility by omitting unnecessary or known informa-tion from both the schemes and its IR expressions, and by including particles to increase coherency.The reports could be generated in multiple languages.
We recommend the opportunistic us e of shal-low techniques for this type of application.Our approach is not suitable for tasks involving deliberate sentence planning, the careful choiceof lexemes, or a sophisticated distribution of information onto linguistic units.
Such tasks would notbe compatible with the loose couPling of our components via IR.
In addition, they would requirecomplex tests to be formulated in TGL rules, rendering the grammar : ather obscure.
Finally, if theintended coverage of content is to be kept extensibl e or is not known precisely enough at an earlyphase Of development, the eventual redesign of the intermediate structure and associated mappingrules for text organization may severely limit the usefulness Of our approachl5 ConclusionWe have suggested shallow approaches to NL generation that are suited for small applications re-quiring limited linguistic resources.
While these approaches ignore many theoretical insights gainedthrough years of NLG research and instead revive old techniques once criticized for their lack of?
flexibility, they neyertheless allow for the quick development of running systems.
By integratingtechniques of different granularity into one formalism, we have shown that lack of flexibility is notan inherent property of shallow approaches.
Within the air quality report generation i  TEMSIS,a non-trivial application was described.
We also gave a qualitative valuation of the domain char-acteristics to be met for our approach to work successfully.
Further experience will show whethershallow techniques transpose to more complex tasks.246it*\]We consider it a scientific challenge to combine shallow and in-depth approaches to analysisand generation in such a way that more theoretically motivated research finds its way into realapplications.References\[Bateman, 1997\] John Bateman.
KPML delvelopment environment: multilingual linguistic resource devel-opment and sentence generation.
Report, German National Center for Information Technology (GMD),Institute for integrated publication and information systems (IPSI), Darmstadt, Germany, January 1997.Release 1.1.\[Busemann, 1996\] Stephan Busemann.
Best-first surface realization.
In Donia Scott, editor, EighthInternational Natural Language Generation Workshop.
Proceedings, pages 101-110, Herstmonceux,Univ.
of Brighton, England, 1996.
Also available at the Computation and Language Archive athttp://xxx, lanl.
gov/abs/cmp-lg/9605010.\[Cawsey et al, 1995\] Alison Cawsey, Kim Binsted, and Ray Jones.
Personalised explanations for patienteducation.
In Fifth European Workshop on Natural Language Generation.
Proceedings, pages 59-74,Leiden, The Netherlands, 1995.\[Davis and King, 1977\] Randall Davis and Jonathan King.
An overview of production systems.
In E. W.Elcock and D. Michie, editors, Machine Intelligence 8, pages 300-332.
Ellis Horwood, Chichester, 1977.\[Elhadad and Robin, 1996\] Michael Elhadad and Jacques Robin.
An overview of SURGE: a reusable com-prehensive syntactic realiZation component.
In Donia Scott, editor, Eighth International Natural LanguageGeneration Workshop.
Demonstrations and Posters, pages 1-4, Herstmonceux, Univ.
of Brighton, Eng-land, 1996.\[Horacek, 1996\] Helmut Horacek.
Lexical choice in expressing metonymic relations in multiple languages.Machine Translation, 11:109-158, 1996.\[Kasper and Whitney, 1989\] Robert Kasper and Richard Whitney.
SPL: A sentence plan language for textgeneration.
Technical report, USC/Information Sciences Institute, Marina del Rey, CA., 1989.\[Kukich, 1983\] Karen Kukich.
Design and implementation f a knowledge-based r port generator.
In Pro-ceedings of the 21st Annual Meeting of the Association for Computational Linguistics, pages 145-150,Cambridge, MA, 1983.\[Meteer, 1992\] M. Meteer.
Expressibility and the Problem of Efficient Text Planning.
Frances Pinter, 1992.\[Penman, 1989\] Project Penman.
PENMAN documentation: the primer, the user guide, the reference manual,and the Nigel manual.
Technical report, USC/Information Sciences Institute, Marina del Rey, CA, 1989.\[Reiter and Mellish, 1993\] Ehud Reiter and Chris Mellish.
Optimizing the costs and benefits of naturallanguage generation.
In Proc.
13th International Joint Conference on Artificial Intelligence, pages 1164-1169, Cha.mbery, France, 1993.\[Reiter et al, 1995\] Ehud Reiter, Chris Mellish, and John Levine.
Automatic generation of technical docu-mentation.
Applied Artificial Intelligence , 9, 1995.\[Shieber et al, 1983\] Stuart Shieber, Hans Uszkoreit, Fernando Pereira, Jane Robinson, and Mabry Tyson.The formalism and implementation f PATR-II.
In Barbara J. Grosz and Mark E. Stickel, editors, Researchon Interactive Acquisition and Use of Knowledge, pages 39-79.
AI Center, SRI International, Menlo Park,CA., 1983.\[White and Caldwell, 1997\] Michael White and David E. Caldwell.
CogentHelp: NLG meets SE in a toolfor authoring dynamically generated on-line help.
In Proc.
5th Conference on Applied Natural LanguageProcessing, pages 257-264, Washington, DC., 1997.247
