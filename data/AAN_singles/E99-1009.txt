Proceedings of EACL '99Geometry of Lexico-Syntactic InteractionGlyn MorrillDepartament de Llenguatges i Sistemes InformhticsUniversitat Polit~cnica de CatalunyaJordi Girona Salgado, 1-3E-08034, Barcelonamorrill @lsi.upc.esAbstractInteraction of lexical and derivationalsemantics---for example substitutionand lambda conversion--- is typicallya part of the on-line interpretationprocess.
Proof-nets are to categorialgrammar what phrase markers are tophrase structure grammar: uniquegraphical structures underlyingequivalence classes of sequentialsyntactic derivations; but the role ofproof-nets is deeper since theyintegrate also semantics.
In this paperwe show how interaction of lexicaland derivational semantics at thelexico-syntactic interface can beprecomputed as a process of off-linelexical compilation comprising Cutelimination in partial proof-nets.IntroductionConsider theparaphrase:following examples of(1) a.b.C.Frodo lives in Bag End.Frodo inhabits Bag End.
((in b) (live\]))(2) a.b.C.John tries to find Mary.John seeks Mary.
((try (find rn ) ) j)Typically, for at least (lb) and (2b) thenormalised semantic forms result from aprocess of substitution and lambdaconversion subsequent to or simultaneouswith syntactic derivation.
We show howsuch interaction of lexical andderivational semantics at the lexico-syntactic interface can be precomputed asa process of off-line lexical compilationcomprising Cut elimination in partialproof-nets.For accessibility, we devote in theinitial sections a considerable proportionof space to an introduction to categorialgrammar oriented towards proof-nets; seealso Morrill (1994), Moortgat (1996) andCarpenter (1997).1 Categorial grammarWe consider categorial grammar withcategory formulas F (categories) definedby the following grammar:(3) a.b.F : :=A IFV r l F /F IF -F..4 ::= S I N I CN I PP I ...The categories in A are referred to asatomic and correspond to the kinds ofexpressions which are considered to be"complete".
Fairly uncontroversially,this class may be taken to include at leastsentences S and names N; what the class isexactly is not fixed by the formalism.Left division categories A~B ('A underB') are those of expressions (functors)which concatenate with (arguments) in Aon the left to yield Bs.
Right divisioncategories B/A ('B over A') are those ofexpressions (functors) which concatenatewith (arguments) in A on the rightyielding Bs.
Product categories A.B arethose of expressions which are the resultof concatenating an A with a B; productsdo not play a dominant role here.More precisely, let L be the set ofstrings (including the empty string e) overa finite vocabulary V and let + be theoperation of concatenation (i.e.
(L, +, ~) isthe free monoid generated by V) 1 .
Eachcategory formula A is interpreted as asubset \[\[A\]\] of L. When the interpretationof atomic categories has been fixed, thatof complex categories i defined by (4).
(4) \[\[AkB\]\] = {sl Vs'~ \[\[A\]\], s'+s~ \[\[B\]\] }\[\[B/A\]\] = {sl Vs'~ \[\[A\]\], s+s'~ \[\[B\]\] }\[\[A.B\]\] = {Sl+S21Sle \[\[,4\]\] & s2~ \[\[B\]\] }1 In fact Lambek (1958) excluded the emptystring ---and hence empty antecedents in thecalculus of (5)--- but it is convenient to includeit here.61Proceedings of EACL '99In general, given some type assignmentsothers may be inferred.
Such reasoning isprecisely formulated in the Lambekcalculus L.2 Lambek sequent calculusIn the sequent calculus of Lambek (1958)a sequent F ~ A consists of a sequence Fof 'input' category formulas (theantecedent) and an 'output' categoryformula A (the succedent).
A sequentstates that the ordered concatenation ofexpressions in the categories F yields anexpression of the category A.
The validsequents are the theorems derivable fromthe following axiom and rule schemata)(5) a.idA~AF~A A1,A,  A2~CA1,F,  A2~Cb.A,F  :=~ B kRF ~ A\BCutF~A A I ,B ,  A2~ CA1, F, AkB, A2 ~ CC.F ,A~B /RF ~ B/AF~A A1,B,  A2 ~ C /LA1, B/A, F, A2 ~ Cd.F1 ~A F2~BoRF1, F2 ~ AoBF1,A ,B ,  F2~CF1,AoB, F2 ~ C. LZThe completeness of the calculus with respectto the intended interpretation was proved inPentus (1994).62F(n) and A(n) range over contextsequences of category formulas; A, B, andA*B are referred to as the activeformulas.
The calculus L lacks the usualstructural rules of permutation,contraction and weakening.
Addingpermutation collapses the two divisionsinto a single non-directional implicationand yields the multiplicative fragment ofintuitionistic linear logic, known as theLambek-van Benthem calculus LP.
3The validity of the id axiom and theCut rule follows from the reflexivity andthe transitivity respectively of setcontainment.
The calculus enjoys theproperty of Cut elimination wherebyevery proof has a Cut-free equivalent(indeed, one in which only atomic idaxioms are used: what we shall call \[3rl-long sequent proofs).
4 Thus, processingcan be performed using just the left (L)and right (R) rules.
These rules alldecompose active formulas A*B in theleft or the right of the conclusions intosubformulas A and B in the premises, andhave exactly one connective occurrenceless in the premises than in theconclusion; therefore one can compute allthe (Cut-free) proofs of any sequent bytraversing the finite space of proof searchwithout Cut.By way of illustration of the sequentcalculus, the following is a proof of atheorem of lifting, or (subject) typeraising:(6)N~N S~SkLN, N\S ~ S /RN ~ S/(N\S)Where a labels the antecedent, he codingof this proof as a lambda term ---what we3Adding also contraction and weakening weobtain the implicational and conjunctivefragment of intuitionistic logic.
Thus everyLambek proof can be read as an intuitionisticproof and has a constructive content which canbe identified with its intuitionistic normal formnatural deduction proof (Prawitz 1965) or, whatis the same thing under the Curry-Howardcorrespondence, its normal form as a typedlambda term.4By 'equivalent' we mean a proof of the sametheorem with the same constructive content (fn.3).Proceedings of EACL '99shall call the derivational semantics--- isXx(x a).
The converse of lifting, lowering,in (7) is not derivable.
A proof of atheorem of composition (it has as itssemantics functional composition) isgiven in (8).
(7) S/(N~S) ~ N(8)B~B C~CA~A B, B iC~C kLA, A~,  BiC ~ C iRA~,  BiC ~ AiCkLA grammar contains a set of lexicalassignments ?x: A.
An expressionwl+...+Wm is of category A just in casewl +...+win is the concatenationoq+...+CCn of lexical expressions suchthat ai: Ai, l<i<n, and A1 .
.
.
.
.
An ~ A isvalid.
For instance, assuming the expectedlexical type assignments o proper namesand intransitive and transitive verbs, thereare the following derivations:(9)N~N S~SkLN,N~S ~ Sjohn+runs: S(10)N~NN~N S~S~N, NiS ~ S /LN, (NiS)/N, N ~ Sjohn+finds+mary: SUngrammaticality occurs when there isno validity of the sequents arising bylexical insertion, as in the following:(11)NiS, N ~ Sruns+john: S3 Ambiguity and spuriousambiguityThe sentence (12) is structurallyambiguous.
(12) Sometimes it rains surprisingly.There is a reading "it is surprising thatsometimes it rains" and another"sometimes the manner in which it rainsis surprising".
As would be expectedthere are in such a case distinctderivations corresponding to alternativescopings of the adverbials:(13) a.S/S, S, SiS ~ Ssometimes+it+rains+surprisingly:Sb.S~S S~S~S~S S /S ,S~S ~S/S, S, SiS ~ SC.S~SS~S S~SkLS, SiS ~ S /LS/S, S, SiS ~ SHowever, sometimes a non-ambiguousexpression also has more than onesequent proof (even excluding Cut); thusthe sequent in (14a) has the proofs (14b)and (14c).
(14) a.N/CN, CN, NiS ~ Sthe+man+runs: Sb.CN ~ CNN~N S~SkLN, NiS ~ S /LN/CN, CN, NiS ~ SC.CN ~ CN N ~ N/LN/CN, CN ~ N S~S?LN/CN, CN, NiS ~ SAs the reader may check, N/CN, cNS/(N~S) has three Cut-free proofs; ingeneral the combinatorial possibilitiesmultiply exponentially.
This feature issometimes referred to as the problem ofspurious ambiguity or derivationalequivalence.
It is regarded as problematiccomputationally because itmeans that inan exhaustive traversal of the proof searchspace one  must either repeat63Proceedings of EACL '99subcomputations, or else perform book-keeping to avoid so doing.The problem is that different \[3rl-longsequent derivations do not necessarilyrepresent different readings, and this isthe case because the sequent calculusforces us to choose between asequentialisation of inferences ---in thecase of (14)/L and kL--- when in fact theyare not ordered by dependency and canbe performed in parallel.The problem can be resolved bydefining stricter normalised proofs whichimpose a unique ordering whenalternatives would otherwise be available(K6nig 1990, Hepple 1990, Hendriks1993).
However, while this removesspurious ambiguity as a problem arisingfrom independence of inferences, itsignally fails to exploit the fact that suchinferences can be parallelised.
Thus weprefer the term 'derivational equivalence'to 'spurious ambiguity' and interpret hephenomenon not as a problem forsequentialisation, but as an opportunityfor parallelism.
This opportumty isgrasped in pro@nets.b.B+ A-N i /A\B+A+ B-\ ii /AkB-A- B+\ i /B/A+B- A+\ ii /B/A-B+ A+\ ii /A.B+A- B-\ i /A.B-i- and ii-tinks:two premises,one conclusion4 Lambek proo f -netsProof-nets for L were developed byRoorda (1991), adapting their originalintroduction for linear logic in Girard(1987).
In proof-nets, the opposition offormulas arising from their location ineither the antecedent or the succedent ofsequents is replaced by assignment ofpolarity: input (negative) for antecedentand output (positive) for succedent.
A In the id and Cut links X and -Xproof-net is a kind of graph of polar schematise over occurrences of the sameformulas, category with opposite polarity.
Note thatthe nodes of links are also markedFirst we define a more general concept (implicitly) as being either conclusionsof proof structure.
These are graphs (looking down) or premises (looking up).assembled out of the following links: In the i- and ii-links the middle nodes arethe conclusions and the outer nodes the(15) a. premises.
The i-links correspond to unaryI I sequent rules and the ii-links to binaryI I sequent rules.
Observe that in the output,but not in the input, unfoldings the orderX -X of subformulas is switched betweenid link: premises and conclusion; this is essentialzero premises, to the characterization of ordering bytwo conclusions graph planarity.X -Xt 1Cut link:two premises,zero conclusionsProof structures are assembled byidentifying nodes of the same polarcategory which are the premises andconclusions of d i f ferentcomponents ;premises and conclusions not fused in thisway are the premises and conclusions of64Proceedings ofEACL '99the proof structure as a whole.
Forexample, in (16a) four links areassembled into a proof structure (16b)with no premises and two conclusions, N-and S/(N~S)+:(16) a.I IN+ S-N_N+ S-\ ii /NkS- S+N\S- S+\ i /S/(N~S)+b.N_IN+\IS-ii /N\S- S+\ i /S/(N\S)+Proof-nets are proof structures whicharise, essentially, by forgetting thecontexts of the sequent rules and keepingonly the active formulas, but not all proofstructures are well-formed as proofs.There must exist a global synchronizationof the partitioning of contexts by rules(the long trip condition of Girard 1987).Eschewing the (somewhat involved)details (Danos and Regnier 1990; Bellinand Scott 1994) it suffices here to statethat a proof structure is well-formed, amodule (partial proof-net), iff every cyclecrosses both edges of some i-link.
Amodule is a proof-net iff it contains nopremises.
The structure (16b) is a proof-net, in fact it is the proof-net for ourinstance (6) of lifting since its conclusionsare the polar categories for this sequent:(17)N- S/(N\S)+N ~ S/(N\S)The structure in (18) is not a modulebecause it contains the circularityindicated: it corresponds to the lowering(7), which is invalid.
(18)S+N\S+\ ii /S/(N\S)-mN-/N+s/ (~s)  ~ SThe structure of figure 1 is a module withtwo premises and three conclusions; thelatter are the polar categories of ourcomposition theorem (8).
Adding theremaining id axiom link makes it a proof-net for composition.For L, proof-nets must be planar, i.e.with no crossing edges.
This correspondsto the non-commutativity of L. In LP,linear logic, which is commutative, there isno such requirement.Like the sequent calculus, proof-netsenjoy the Cut elimination propertywhereby every proof has a Cut-freeequivalent.
The evaluation of a net to itsCut-free normal form is a process ofgraph reduction.
The reductions are asshown in figure 2.5 Language processingAs is the case for the sequent calculus,with proof-nets every proof has a Cut-freeequivalent in which only atomic id axiomlinks are used: what we shall call \[3q-longproof-nets.
However, whereas some ~r I-long sequent proofs are equivalent,leading to spurious ambiguity/derivationalequivalence, distinct \[3q-long proof-netsalways have distinct readings.The analysis of an expression as searchfor \[3rl-long proof-nets can be construedin three phases, 1) selection of lexicalcategories for elements in the expression,2) unfolding of these categories into a.fi'ame of trees of i- and ii-links withatomic leaves (literals), and 3) addition of(planar) id axiom links to form proof-nets.
For example, 'John walks' has thefollowing analysis:65Proceedings of EACL '99(19)IN+\N-iiNiS-IS-/S+N, N~S ~ Sjohn+walks :SThe ungrammaticality of 'walks John' isattested by the non-planarity of the proofstructure (20).
(20)N+\ ii /N\S -IS-N- S+N~S,N ~Swalks+john:SAs expected, where there is structuralambiguity there are multiple derivations;see figure 3.
But now also, when there isno structural ambiguity there is only onederivation, as in figure 4.
This property isentirely general: the problem of spuriousambiguity is resolved.6 Proof -net  semant ic  extract ionUntil now we have not been explicit abouthow a proof determines a semanticreading.
We shall show here how toextract from a proof-net a functional termrepresenting the semantics (see de Grooteand Retor6 1996, who referenceLamarche 1995).
This is done bytravelling through a proof-net andconstructing a lambcla term followingdeterministic instructions.
(The proof-netsare the proof structures m whichfollowing these instructions visits eachnode exactly once.
)First one assigns a distinct variableindex to each i-link; then one startstravelling upwards through the uniquepositive conclusion.
Thereafter thefunction L mapping proof-nets to lambdaterms is as follows (for brevity we excludeproduct):(21) a .Going up through the conclusionof a i-link, make a functionalabstraction for the correspondingvariable and continue upwards throughthe positive premise:L( ) = )~xnL (L( = )b.Going up through one id conclusion,go down through the other:L( ) = L( )) = L(C,Going down through one premiseof Cut, go up through the other:d.Going down through one premiseof a \i-link, make a functionalapplication and continue goingdown through the conclusion(function) and going up throughthe other (argument):,4,- > L( ) = (L( ) L( ~ ))ii iiL( ) = ( L ( ~ ) L ( ~ ) )66Proceedings of EACL '99e.Going down through the premiseof a i-link, put the correspondingvariable:?
;.L(k ,~)  = xnL ( ~ )  = Xnf .Going down through a terminalnode, substitute the associatedlexical semantics:TL(~)  =qoLet us observe that the followinglexical type assignments capture theparaphrasing of (la) and (lb); a-?
:= Asignifies the assignment to category A ofexpression a with lexical semantics ?.
(22)frodo f:= Nlives live:= N~Sin in:= (S\S)/Nbag+end b:= Ninhabits )vx)vy( ( in x) (live y) ):= (N~S)/NThen (la) has the analysis given in figure5, with semantic extraction (23), where *marks the point at construction andRoman numerals indicate the argumenttraversals, performed after the functiontraversals, triggered by entry into ii-links.
(23) (* I)((* II) I)((in *) I)((in b) *)((in b) (* III))((in b) (live *))((in b) (lived'))Example (lb) has the analysis given infigure 6, for which the semanticextraction is (24).
(24) (* I)((* II) I)(()vx)vy((in x) (live y)) *) I)(()vx)vy((in x) (live y)) b) *)(()Vx)vy((in x) (live y)) b)f)67This is not the same semantic term as thatin (23) but it reduces to the same by 13-conversion, showing that the semanticcontent in the two cases is identical, that is,that there is paraphrase:(25) (()vx)vy((in x) (live y)) b) f) =)vy((in b) (live y)) f) =((in b) (live\]))Although such lambda conversion onlycalculates what the grammar defines andis not part of the grammar itself,computationally it is an on-line process.The following section shows how this canbe rendered, in virtue of proof-nets, anoff-line process of lexical compilation.7 Off-line semantic evaluationIn the processing as presented so farsemantic evaluation is, as is usual,normalisation of the result of substitutinglexical semantics into derivationalsemantics.
Logically speaking, thissubstitution at the lexico-syntacticinterface is a Cut, and the normalisation isa process of Cut elimination.
Currentlythe substitution and Cut elimination isexecuted after the proof search.
However,if lexical semantics is represented as aproof-net, one can calculate off-line themodule resulting from connecting thelexical semantics with a Cut to the moduleresulting from the unfolding of thelexical " categories.Lexical semantics expressed as a linear(=single bind) tambda term is unfoldedinto an (unordered) proof-net by thealgorithm (26):(26) a?Start with the )v-term go at a + node: q~+.b.To unfold Kxnq)+, make it theconclusion of a i-link with index nand unfold ?p+ at the positive premise:,+in 4kxn?+5 Lecomte and Retor6 (1995) propose to use theexpressivity of modules in general to classifywords rather than just category formulas(=modules without id or Cut links).
Our methodprovides emantic motivation for modules at themachine level but we propose to maintain theless unwieldy categories at the user level.Proceedings of EACL '99C,To unfold Xxncp-, make it a Cutpremise and unfold )~Xn(P+ at theother premise:Xxn?- Lxn?+d.To unfold (q0 ~)-, make it thepremise of a ii-link and unfold q0-at the conclusion and gt+ at theother premise:?
ii ,!?
'e.To unfold (~0 gt)+ make it theconclusion of an id link and unfold(q0 ~)- at the other conclusion:(?t?
)+ (?V)-f .At a constant k- unfolding stops;to unfold a constant k+ make it an idpremise first:I *k+ k-g .To unfold a bound variable xn- makeit the other premise of the i-link withindex n:X/'/-?
in.to unfold xn+ make it an id premise first:xrl -  xrl  +?
inFor example, the lexical semantics of'inhabits' can be unfolded as shown infigure 7.
The result of such unfolding oflexical semantics can be substituted intothe unfolded lexical category by a Cut,and the resulting module normalised byCut elimination in a precompilation.
Thisis illustrated for the 'inhabits' example infigure 8.In this way, rather than starting theproof search with a frame comprising justthe unfolding of lexical categories, onestarts with a frame comprising the pre-evaluated modules resulting from lexicalsubstitution.
Let us consider again ( lb)from this point of view.
First note, as wellas figure 8, the precompilation of aproper name lexical assignment as infigure 9.
The proof frame prior to proofsearch is that in figure 10.
Adding axiomlinks yields the same net, and thus thesame semantics, as that obtained for (1 a)in figure 5.A slightly more involved illustration ofthe same point is provided by thefollowing lexical assignments for theparaphrases (2a) and (2b).
(27)john - j:= Ntries - try:= (N~S)/(N~S)to - Xxx:=  (N~S)/(N~S)find - f ind:= (N~S)/Nmary  - m:= Nseeks - )~x( try (x f ind)  ):=These assign semantics (2c) to both (2a)and (2b) and, as the reader may check, bypartially evaluating lexical modules in aprecompilation, ormal form semantics isobtained directly in both cases.Conc lus ionIn both the example worked outexplicitly and the one left to the reader,we deal with words which are synonymsof continuous expressions: 'inhabits' ='lives in' and 'seeks' = 'tries to f ind'.This enables us to represent he evaluatedlexical modules as planar.
However itshould be noted that in general lexicalsubstitution involves linking syntacticmodules which are ordered with lexicalsemantic modules which are not ordered,and which could be multiple-binding, andCut elimination has to be performed in ahybrid architecture which must preservethe linear precedence of syntactic literals.It is therefore of importance to the futuregeneralization of the method we proposeto investigate the precise nature of suchhybrid architectures.68Proceedings ofEACL '99AcknowledgementsMy thanks to Josep Mafia Merenciano fordiscussions relating to this work.ReferencesBellin G. and Scott P. J.
(1994) On the re-Calculus and Linear Logic.
TheoreticalComputer Science, 135, pp.
11--65.Carpenter B.
(1998) Type-Logical Semantics.MIT Press, Cambridge, Massachusetts.Danos R. and Regnier L. (1990) The structureof muhiplicatives.
Archive for MathematicalLogic 28, pp.
181--203.de Groote Ph.
and Retor~ C. (1996) On theSemantic Readings of Proof-Nets.
In"Proceedings of Formal Grammar 1996", G.J.Kruijff, G. Morrill & D. Oehrle, ed., Prague,pp.
57--70.Girard J.-Y.
(1987) Linear Logic.
TheoreticalComputer Science, 50, pp.
1--102.Hendriks H. (1993) Studied Flexibility:Categories and Types in Syntax a"dSemantics.
Ph.D. thesis, Universiteit vanAmsterdam.Hepple M. (1990) Normal form theoremproving for the Lambek calculus.
Proceedingsof COLING 1990, Stockholm.K6nig E. (1989) Parsing as natural deduction.Proceedings of the 27th Annual Meeting ofthe Association for ComputationalLinguistics, Vancouver.Lamarche F. (1995) Games emantics for fullpropositional linear logic.
In "Ninth AnnualIEEE Symposium on Logic in ComputerScience", IEEE Press.Lambek J.
(1958) The mathematics of sentencestructure.
American Mathematical Monthly,65, pp.
154--170.Lecomte A. and Retor6 C. (1995) Pomset logicas an alternative categorial grammar.
In"Proceedings ofFormal Grammar 1995", G.Morrill & D. Oehrle, ed., Barcelona, pp.
181--196.Morrill G. (1994) Type Logical Grammar:Categorial Logic of Signs.
Kluwer AcademicPublishers, Dordrecht.Moortgat M. (1996) Categorial type logics.
In"Handbook of Logic and Language", J. vanBenthem & A. ter Meulen, ed., Elsevier,Amsterdam, pp.
93--177.Pentus M. (1994) Language completeness ofthe Lambek calculus.
Proceedings of theEight Annual IEEE Symposium on Logic inComputer Science.Roorda D. (1991) Resource Logics: Proof-theoretical Investigations.
Ph.D. thesis,Universiteit van Amsterdam.oo~N/\/\/\/\NIt'q$/\~t7 /+,~ =:\/+\+,>69S-\ ilS/S-S+ S+ S-/ \ " /S- S- S+S/S.
S. SLS ~ Ssometimes+it+rains+surprisingly: SS- S+ | S+ S-N ii / | \ .i /S/S- S- S- S+{ I { lS- S+ S+ S-\ fi / \ " /S/S- S- S- S+Figure 3: MultiplicRy of structural mbigullyI , I ,\]N- CN+ N+ S-\ ii / \ , /N/CN- CN- N~- S+NICN, CN, N~ ~ Sthe+man+hillS: $Figure 4: Non-existence of spurious ambiguityProceedings of EACL '99i,N-/IN+\ iiN~-liveS?\S-/S-ii / IS~'S - N+\ 5 /(S~S)/N- N-in bS+N, N~S, (S~S)/N.
N : Sfrodo+lives+in+bag+cnd: SFigure 5: Proof-net for 'Frodo lives m Bag End"I IN* S-\ ii / \[NLS- N+\ ii /N- (NLS)/N- N- S+f ~.x3..K(in x) (live y)) bN.
(N'LS)/N.
N =:.
Sfrodo-t-inhabits+bag+end: SFigure 6: Proof-net for 'Frodo inhabits Bag End'e e ~g?
+ ~we x2)+ ((i~,tl)(livex2))-((iaxl)llivex2)) x2-~.
i i~  d a~ i2 ~ r""-~ gx2+ (livex2).
(inxl)- xi+x'l- ).x2((inxl)(livex2))+~.
i i  ~d d~ ii ?
~ il 4 'alive- in- ~,.,xl),x2((in xl) (live x2))+Figure 7: Unfolding of texical semantics of 'inhabits' into a proof-net, V==l i N " /b\ /  \ / ic,/ \ ,~/-d.r,eN*1 I - N+ S-I " ' ~  N~ S-LIN?N+LN+J~=lX i  i /S -- N+ ~'\,,/ \ , , /Figure 8: Partial evaluation of \[mica\[ substitution for 'inhabits'I i N Nb- b+ N- \[~ bI 1Figure 9: Parhal evaluation of \[exlcal subslltullon for 'Bag Fnd'N+ N+ \ , , /  \ .
/N- N- S+i hve In hN.
(N',S)/N.
N ~ Sfrodo+inhabits+bag+cnd: SF~gure IO: Proof frame for 'Frodo mhabit~ Bag End' following lex~cat pre?ompdalmn70
