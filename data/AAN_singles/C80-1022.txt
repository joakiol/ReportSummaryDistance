THE KNOWLEDGE REPRESENTAT ION FORA STORY UNDERSTANDING AND S IMULAT ION SYSTEMHITOSHI  OGAWA*,  JUNICHIRO N ISHI**  AND KOKICHI  TANAKA** FACULTY  OF ENGINEERING SCIENCE,  OSAKA UNIVERSITYTOYONAKA,  OSAKA 560, JAPAN** MATSUSHITA ELECTRIC  INDUSTRIAL  CO. ,LTD.KADOMA,  OSAKA 571, JAPANAbstruct There exist many difficultproblems to understand a situation and an eventdescribed in sentences or a story.
One of themis to treat with more than one subject and theirrelations.
Another is the comprehension ofmovement of the subjects and their effects tothe others.
In this pater, micro-actor is usedas the knowledge representation in which suchthe problems mentioned above are solved.
Themicro-actor is an artificial intelligence modulefor knowledge representation, which is realizedHewitt's actor concept.A large problem is often solved by a group ofspecialists.
Each specialist has his ownknowledge and technique.
A specialist canaccomplish independently a small workcommunicating with the others.
The specialistis implemented in the form of micro-actor on acomputer.
The micro-actor is independent of theothers, and communicating with the others usingone kind of action: sending message to anothermicro-actor.We discuss the following four problems tounderstand stories and the approaches to them:(i) depth of understanding sentences tocomprehend a story, (2) a method to deal with anevent which happens on the specific condition,(3) synchronization of the events which occur atsame time and (4) treatment of the event whichinvolves more than one object.i.
IntroductionThe common issues of the various themes inartificial intelligence are the knowledgerepresentation, and the mechanism ofunderstanding and inference.
The reason is thatthe problems in each theme is solved well usingthe knowledge known by human in a computer.
Wewill discuss a story understanding toinvestigate how the knowledge is affected by thechange of a world state with the passing oftime.For right understanding of a story, it isnecessary to check the world knowledge obtainedfrom input sentences using common sense.
Thispaper describes the system which simulates theactions of objects in a story for understandingan event and forecasting the results of thestory.
For the simulation, the system must dealwith the action of individual object and therelation amang them.
A micro-actor is adoped asthe knowledge representation in which theproblems mentioned above are solved.
It isindepenent of the others, and communicating withthe others using one kind of action: sendingmessage to another one.Chapter 2 describes about the micro-actor andits features.
In chapter 3~ four of theproblems in story understanding are discussed.Chapter 4 shows the constructon of thesimulation system and its example.2.
Micro-actorA micro-actor was proposed as the implementationof some of abilities of Actor (Hewitt, C. 1973)in 1977 \[7\].
The micro-actor described in thispaper is more powerful as it is supplementedsome strong faculties.
This chapter discuss theconcept of the micro-actor, then explains thestructure and the feature of it.2.1 Concept of micro-actorIn a large system, it is difficult to add a newfaculty to it, delete one from it, and modifyit.
A solution of such a crucial issue is that alarge system is divided into many specialists.Each specialist has his own knowledge andtechnique to accomplish a small workindependently.
Only message passing is theinteraction method between the specialists.
Alarge problem is solved as follows: It isdivided into the subproblems.
If there does notexist a specialist which can solve a subproblem,the subproblem is further divided into thesubproblems.
When a specialist solves a problem,it communicates with the others to get hisnecessary information, to send the result ofinference, and to check the consistency ofsolution.
Finally, the large problem can besolved.A specialist is implemented in the form ofmicro-actor on computers.
A proper definitionof each micro-actor leads to a good execution ofa system composed of the micro-actor.
Theconcept of actor can be applied in variousregions by means of assigning a suitable role tothe micro-actor.
For example, if a computer isregarded as a micro-actor, a powerful methodwill be supplied for the implementation of theparallel process or the distributed processusing more than one computer.
This paperdescribes that the micro-actors are implementeJ--15I - -on a computer for problem solving and kno~?ledgerepresentation.2.2 Construction of Micro-ActorA micro-actor is composed of a "script" and an"acquaintance" (Fig.
i).
The script describesthe behavior which the micro-actor should takewhen it receives a message.
That is, it showsthe procedural knowledge to use the data in theacquaintance.
The acquaintance stores the datathat the micro-actor knows; for example, itsnative values, its attributes, the name of theother micro-actors it directly knows about, andthe relation with them.
That is, it shows thedeclarative knowledge.
(i) ScriptThe script is specified with a set of pairs ofmessage patterns and rules as follows:((message patter,nl rule,ll ... rule,lm)(message patter,n2 rule,21 ... rule,2n)(message patter,np rule,pl ...
rule,pq)).
(ii) Message PatternThere are two types for pattern:(i) (MES: ?%N content TO: ?CONT).
(2) (RE: ?%N content).
?%N is only matched with the massage number %n,where n is a positive integer.
A message numberis assigned to an input sentence or a messagefor distinguishing it from the others as a tag.The message n~nber is also used to distinguish adatLim from the others stored in the samemicro-actor.
The atoms prefixed by "?"
(e.g.
?CONT) are the variables for pattern matchingThe prefix "!"
is used instead of the prefix "?
"to refer to the pattern matching variables fortheir values ; for example, !CONT.
"MES" means amessage and "RE" means a reply.
"TO:" meansthat the continuation is sent a reply.
Assign"NO-0NE" to !CONT in the case that the answer isnot required.
Assign "ME" to fCONT when thereply is demanded.
This is equal to thesubroutine control.
(iii) RuleA rule is a set of programs, which carries out ajob.
The rule consists of three parts asfollows:((P-C: program,pl ... program,pq)(N-C: program,nl ... program,nr)(C-E: program,cl ...
program,cs)).
"P-C" is an abbreviation for pre-condition.
"N-C:" means next-condition which is an option.
"C-E:" is an abbreviation for caused-events inwhich the messages are sent to the othermicro-actors when both the pre-condition and thenext-condition are satisfied.
The form of therule is given by Dr. Yonezawa\[12\], and it issuggested that the form of the rule is useful todeal carried out in order of the appearance ofthem in the pre-condition and thethe name of a micro-actorscriptthe procedural knowledgeacquaintancethe declarative knowledgeFig.
i Construction of micro-actor.
(Frame Name(Si (Fli (Dill Clil)(S 2 (F21 (D211 C21 I)(S 3 (F31 (D311 C31 I)(F32 (D321 C32 I).
.
.
.
.. .
.
.
.
(S s (Fsl (Dsl I Csl I)?
.. (Dii h Cllh)))?
.. (D21 i C21i)))?
.. (D31 j C31j))?
.- (D32 k C32k)))?
.. (Dsl m Cslm))))Fig.
2 Frame representation forthe acquaintance.next-condition.
On the other hand, the programsin the caused-events can be executedconcurrently.
(iv) ProgramA program is written in the restricted LISPnotation.
The user can freely use the LISPfunctions which do not have influence upon thepointers to lists and atoms; e.g., MEMBERS,ASSOC and so on.
The variables are restrictedto the form !m or !In (Both m and n are positiveintegers) for the LISP functions which haveinfluences upon the pointers; e.g., SETQ and soon.
This restriction prevents the behavior of amicro-actor from giving unitentional effect toother micro-actors.
The variable !m is used aswell as PROG variable.
The user can operate thebasic function (FGET, FPUT and FREMOVE) to dealwith the acquitance.
The function FGET is usedto obtain the data from the acquaintance.
Thefunctions FPUT and FREMOVE may put the data toit and remove the data from it, restrictively.The user uses the basic function (FGET, FPUT andFREMOVE) to deal with the acquaintance.
Thesefunctions differ from those of PRL\[9,10\] inpoint of the necessity of the frame name.
Thefunctions in this paper deals with only itsacquaintance.
Therefore, the execution of thebasic function does not affect the othermicro-actors.
A specification for messagepassing is as follows: (=> the name of ar~cro-actor a message).152(v) AcquaintanceThe frame is employed to represent theacquaintance as shown in Fig.
2.
The respectivesubstructures of a frame are named; Slot, FacetsDatum and Comment.
A slot shows which propertythe data in it are connected with.
A facetshows kinds of the data; e.g., values,constraints, procedures and so on.
A datum iselementary information associated with thefacet, and a comment is additional informationfor the datum.
More than one facet can beincluded in a slot.2.3 Behavior of Micro-ActorThe micro-actor becomes active and tries to playits role when it receives a message Mi.
If themessage pattern Pi is found, a rule Ri issearched for, which is one of rules making apair with the pattern Pi, and whosepre-condition should be satisfied.
When thereis the next-condition in Ri, all programs in thenext-condition should be evaluated.
If thenext-condition is satisfied, the easued-eventsare executed.
If there is no rule whosepre-condition is satisfied concerning thepattern Pi, the micro-actor tries to findanother message pattern which is matched withMi.Since the system holds the COMMON-SCRIPT whichis necessary for all micro-actor, the users mayspecify the micro-actor by the peculiar script.The COMMON-SCRIPT has the message pattern (MES:?%N ?X TO: ?CONT) and acts as follows:(a) If the variable IX (corresponding to ?X)indicates one of the basic functions (FGET, FPUTand FREMOVE), then it is put into practice.
(b) If !X shows one of the extension functions(i.e., there exists a micro-actor correspondingto it), the rules are obtained from themicro-actor corresponding to the extensionfunction, and they are performed.
The variables!In (n = i, ..., 5) are corresponed to thearguments; for example, !
!l means the firstargument.
(c) If IX indicates a set of rules, then !X isaccomplished.2.4 Demon for Micro-actorA demon function is newly added to themicro-actor to build a story understandingsystem.
Micro-actors correspond with men,animals and objects which appear in a story.Each action is described in the script.
Theacquaintances show peculiar values and therelation to the others.
It is, however,difficult to get a result of the simulation ofthe world situation obtained from a story.
Forexample, assume that there is a micro-actor Taro(names of micro-actors are underlined) whichcorresponds to a man named Taro.
Consider themethod that Taro sends a message to a certainmicro-actor when he arrives at place X.
In thiscase, Taro must see if his place is place Xwhenever Taro changes his place.
To do thiswell, the demon function is necessary, whichalways checks if there exists the specificsituation or not, and behaves an appropriateaction: In this exampled once the demon functioncomes to know that Taro is at place X, it sendsa message to a certain micro-actor.We can use demon functions using is the framerepresentaion like FRL, and two kind methods ofthe demon functions mentioned below.
Two of newdemon functions are made in consideration of theactivation method of micro-actors: Themicro-actors are activated when then receivemessages.
0nly a post-action method is adoptedin the present system.Pre-action A pre-action demon is describedin the form of rules in a pre-action slot in theacquaintance.
When a micro-actor receives amessage, rules in the pre-action slot areevaluated before the micro-actor begins toexecute its role according to the script.Post-action A post-action demon isdescribed in the form of rules in a post-actionslot in the acquaintance.
After the micro-actorfinished to execute its role according to thescript, the rules in the post-action slot areevaluated.2.5 Features of Micro-actorThe knowledge representation using themicro-actors can establishes both its modularityand easibility of interaction.
This sectionstates the features of a micro-actor usingexamples.The declarative knowledge and theprocedural one The knowledge is represented ineither the declarative form or the proceduralone.
The following example shows how torepresent the knowledge in the micro-actor.Assume micro-actor Human which shows theknowledge about a human being.
Though we have agreat deal of knowledge about a human being, twosimple examples will be shown.
One isrepresented as the declarative knowledge: "Ahuman is a kind of animal."
The representationof this knowledge is to put value ANIMAL to Akoslot in the acquaintance of mlcro-actor Human.The other is represented as the proceduralknowledge: "When there exists an obstacle (e.g.,tree, wall, etc.)
in his way, he jumps over itif it is low, otherwise, he go a long wayaround."
This knowledge is shown in the form ofrule, and the rules are put to either thescript, or Pre-condition slot or Post-actionslot in the acquaintance of micro-actor Human.Modularity It is essential to be able torepresent a great deal of knowledge by a groupof small modules.
As mentioned in 2.1, themicro-actor can independently accomplish a small--153--work, and only message passing is theinteraction method between one and another.
Themessages received by a micro-actor describeswhat the micro-actor must do.
The messages sentfrom a micro-actor shows what the micro-actorneeds.
We can understand the action of amicro-actor from only the messages sent from orreceived by the micro-actor.
Therefore, we mayonly check the messages sent or received tochange the micro-actor.
Furthermore, we caneasily understand the micro-actor systeminspecting the messages.The modurality brings the construction in whicha classification and a hierarchical structure ofknowledge is easily represented.
The followingshows the example about the representation ofknowledge in a hierarchical structure.The obstacles to the human (e.g., John and Tom)are generally trees, fire, wall, and so on.Dogs are, however, obstacles to Tom if hedislikes them.
In the micro-actor system, theseobstacles are specified in a hierarchicalstructure as shown in Fig.
3.
In Fig.
3, thenames and the acquaintances are shown in boxes.Pseudo parallel processing can be easilyimplemented.
This secton will show the exampleof that John and Tom play at a tug of war (Twoperson draw a rope in the opposite direction.
).John and Tom are assigned to micro-actor Johnand micro-actor Tom, respectively.
To simulatethe tug of war, it is necessary that John andTom are activated simultaneously.
This is,however, impossible of implementation using ourfacilities.
Therefore, the example is simulatedwith pseudo parallel processing.We also use micro-actor SIMTW which has theknowledge about a tug of war.
Fig.
4 shows therelation of the micro-actors.Human(Obstacle (:value (tree))(:value (fire))(:value (wall)))liITom(Ako , (:value (human))\](Obstacle (:value (dog)))i(Ako (:valueFig.
3 An example of a hierarchical structure.SIMTW cannot be active until it receive themessages from both Tom and John.
If it receivestwo messages, then it check the situation of thetug of war: e.g., if Tom and John draw a rope inopposite directions with the same might, thenthe tug is continued.
If one of them is morepowerful than the other, then he becomes awinner.
When one of them falls down, there isno power to draw a rope.
Then he is loser .
.
.
.Parallel processing is possible if Tom and Johnare independently implemented using twomicro-computers.
In our system, we use onecomputer to implement the micro-actor system.Therefore, necessary is the micro-actor forsynchronization of the action of Tom and ofJohn.
The detail will be described in chapter4.3.
Problems in Story UnderstandingThere exist many difficult problem tounderstand a story.
In this chapter, we discussfour main problem in them, and approaches tothem.
(1) How deeply should a sentence be understandto comprehend a story?A consistent meaning should be obtained from asentence neither in too detail nor in too roughin order to comprehend a story.
The level ofdetail at which a sentence is understood dependsupon the context and one's interest.
Theexample will be given to us using the followingsentence: "John was walking."
One may think thatthe sentence means that John advances.
Thisinterpretation leads the reason enough tounderstand "John arrived at a town."
However, itis not the reason enough to understand "John wastired."
One must infer as follows: Action"walking" consists of the relaxation of musclesand the tension of them.
One of reasons for hisfatigue may be the repetition of the tension andthe relaxation of muscles.
We, therefore, inferTomDraw a ropeJohnDraw a rope~message /messageSIMTWCompare the message from Tom and onefrom John when they are received.Fig.
4 Construction of the micro-actorsfor a tug of war.- -154- -that his fatigue is caused by the long distancewalking until we find another reason for it.To implement te above inference, we adopted aframe representation to be easy to representknowledge in a hierarchical structure, anddeveloped the convenient method to deal withsuch knowledge.
(2) How to deal with an event which happens onthe specific condition.To answer the questions about a story, it isnecessary to refer to the knowledge base and toforecast the event which will happen in thefuture.
One of methods for a forecast is thesimulation of the story.
In the simulation,there exests an event which happens only on thespecial condition.
The simulation is performedto investigate at where Tom will arrive usingthe information obtained from the story, whenthe system receives the question "Can Tom arr iveat a town?"
If there is obstacles on his way, wecannot predict Tom's behavior.
Therefore,whenever he changes his position, the systemshould see if he is in the town.
The demonfunction is useful to check this rather thanprogramming his behavior in the script.
In thispaper, the rules are in the post-action slot,which send a messge to micro-actor Answer if Tomis in the town.
These rules are activated afterbeing applied some rules in the script of Tom.
(3) How to describe the knowledge changedfrequently.When there exist some subjects which move at thesame time, the simulation system must changesimultaneously their position.
However, it isimpossible to implement the parallel processingby using a CPU machine.
For example, assume thescene that Tom and a dog are walking oppositely.The simulation system changes their positions inorder: first Tom moves then the dog moves, or inthe opposite order.
The different results arebrought in the different ordering when there isthe restriction that they must not come across.To settle the above issue, we use the time-flagin order to represent the situations of them.The method is a little unconvenient fordescribing the situation per time.
It, however,needs neither the specific faculty to rememberits careers, nor the memory space to hold newsituations for the micro-actors because they arechanged at the same time.Fig.
5 shows the list of the acquaintance ofmicro-actor Tom.
Sn is the abbreviation ofStepn(Suffix n is a positive integer.).
Siindicates the time when the system is theinitial state.
Suffix n is increased one by oneas a certain time passes.
Place slot indicatesthe present  place of Tom, and Fig?
5 says thathe was in Pi6 (Place 16) at Si and in Pi7 at $2.In ACT slot, the action of Tom is described.According to Fig.
5, Tom is going to P20.
(A~O (:VALUE (HUMAN)))(MIGHTY (:VALUE (5)))(LIVING (:VALUE (ANIMAL)))(HEIGHT (:VALUE (LITTLE)))(PLACE (Sl (:VALUE (PI6)))(s2 (:VALUE (PIT))))(ACT (Sl (:V (MOVE)) (:O (P20)))($2 (:V (MOVE)) (:O (P20))))Fig.
5 The acquaintace ofmicro-actor Tom.
(4) How to deal with the event which involvesmore than one subject.There may be more than one subject in an eventstated in a story.
When they are related withone another, we must skillfully deal with therelations of them.
There are two kinds ofrelations between the subjects in a story.
Oneis cooperation (e.g., Tom and John push a boxtogether), and the other is opposition (e.g.,Tom and John play at a tug of war).There are many ambiguous sentences dealing withcooperation.
In the case of sentence "Tom andJohn made a shed for dog in cooperation," thereare some interpretation as follows:(i) They divided the labor: e.g., One of thembought materials and the other constructed theshed.
(2) They worked together for all Jobs.
(3) One of them worked according to the other'sdirection.The above example says that we can consider manycomplicated relation for cooperation in a simplesentence.
In this paper, we use the secondinterpretation for simplicity.Both cooperation and opposi?ion is dealt in thesimilar way in this simulation system.
Exampleswill be given using the following sentences:(i) Tom and John play at a tug of war.
(2) Tom and John push a box together.In order to deal with sentence (i), we makemicro-actor SIMTW which stores the knowledgeabout a tug of war: e.g.
"A winner is a personwho is more powerful than the other."
"Awinner's opponent is a loser."
and so on.
WhenSIMTW receives both a message from Tom and onefrom John, it compares the power of Tom with oneof John, and Judges a winner.
A Coop (whichmeans cooperation) slots are added to theacquaintances of To__m_and'John to store the nameof his opponent.The treatment of sentence (2) is similar to oneof sentence  (i).
We make micro-actor SIMPUSHwhich compares the sum of power of Tom and Johnwith the weight of the box, when it receivesboth a message from Tom and one from John.SIMPUSH sends micro-actor BOX a message to getits weight.
If the sum of power of two person--155--is larger than the weight of the box, SIMPUSHsends messages to To____m, John and Box to changetheir position.4.
Simulation SystemIn the last chapter, we discussed the mainproblems in story understanding and the methodsusing micro-actors to settle them.
In order toconfirm the validity of these methods, wesimulate how the world described in a story willchange with the passing of time.
The simulationis shown as an animation.
In this chapter, westate the simulation system consisting ofmicro-actors and its executive examples.4.1 PlanningIt is necessary for simulating to specificattribute, location, action etc.
of the objectsin a story.
In this system, micro-actors aremade corresponding to objects in a story, andthe necessary is stored in them.There are the micro-actors which have generalknowledge about the objects (e.g.
person, dog,tree and so on) in this system.
Thesemicro-actors give the micro-actors correspondingto the objects the default values of generalaction and property.
The simulation is based onthe information given to the micro-actorscorresponding to the objects.
For example,micro-actor John is made according to sentence"John is a human".
John is obtain theproperties of a human: e.g.
he is little sizefor a kind of mammal, he can move freely, heplays games, and so on.
Of eource, they aremodified easily when new information is given.If a sentence describes what is concerning withthe micro-actor made already~ a information inthe sentence is given to the micro-actor.
Theinformation is represent either in the script orin the acquaintance.Information about action is described in thescript.
For example, micro-actor Walk sendsmicro-actor John the rules for walk, accordingto "John walks to P20".
(P20 indicate a placewhose discriminative number is 20.)
The rulesrepresent the necessary actions to move towardthe goal and~ if necessary, call the otherrules: e.g.
to jump an obstacle, to pass asideit, and so on.Information indirectly relating to action isrepresented in the form of demon.
In the casethat "John dislikes a dog", the post-action slotstores the rules that John goes away from a dogwhen the dog comes near him.
When John i swalking, his action does not change until hemeets with a dog.
He, however, avoids it andwalks to his goal if he comes across a dog.There is the issue whether John comes across thedog or not.
This system divides a world into15(=5?3) places.
This reason is just theconvenience for the indication of animation.
Weuse these place to check if two objects meettogether or not.
Two objects "meet together" ifthey are in the same place.
They "come near" iftheir places are neighboring.
Otherwise, they"are kept apart".4.2 SimulationThe last section describes a method of planningthe action of each micro-actor.
The activationof micro-actors must be planed well, becausemicro-actors should act in a pseudo parallel forthe simulation.
This system adopts amicro-actor Sinchronizer for a pseudo parallelprocessing of micro-actors.
Sinchronizersynchronously sends a message to a micro-actorcorresponding to an animate object.
Namely, itsends each of the micro-actors only one messageto activate it for every frame of the animation.The actions of the planned micro-actors simulatethe change of the world given from a story.
Amean processing part is necessary for us to knowthe results of the simulation and the meanindicated by world state obtained in thesimulation.
For example, in the case that twoperson play at a tug of war, the change of theworld is indicated as the content that strongperson A can draw near a rope (with weak one B).Such world state, however, means that A has wonand B has lost the game.
The mean processingpart is also implemented using micro-actors.The interaction form the simulation part to themean processing part is a message passing from amicro-actor in the simulation part to amicro-actor in the mean processing one.
In theexample of a tug of war, a demon is adopted tosend a message when one player can draw a rope(with the other player), and a micro-actor inthe mean processing part is prepared to receivedthe message and to judge the winner of the game.This organization, furthemore, makes it possibleto explain some actions (For example, that Johndislikes a dog is the reason why he released therope and moved to another place.).
Fig.
6 showsthe construction of the two parts.The two parts are implemented on PANAFACOMU-1500.
We constructed the animation indicationsystem to monitor the simulation.
This sysemconsists of two parts: picture Display System(PDS) and Picture Instruction Generator (PIG).The PIG generates the instructions to displaythe objects in the simulation in the animationstyle.
As the PIG receives messages includingonly essential information (name and action:e.g.
((A John) (V walk)), the PIG acquirs thedetail information (e.g.
type, size, etc.)
todisplay the animation from knowledge base.
Thenthe PIG makes the instructions and sends them tothe PDS.
The PDS displays the animationaccording to the instructions.
The PIG and thePDS are implemented on PANAFACOM U-1500 and NEC- 156-I A tug of war I I Dislike I4'7,<.> /me anprocessingsimulationFig.
6 The relation of mean processingpart and simulation part.Pii Pi2 Pi3 Pi4 Pi5Pi6 Pi7 Pi8 Pi9 P20P21 P22 P23 P24 P25Fig.
8 Names of places in thedisplay unit.PC-8001, rspectively.
The details of theanimation display system will be presented atanother chance.4.3 ExampleAn input story is shown in Fig.
7.
Places Pi6,Pi8 and P20 in Fig.
7 indicate the places an thedisplay unit as shown in Fig.
8.
After thesentences indicated in Fig.
7 are understood,the simulation begins when the followingquestion is input:"Can Tom become a winner of the game?"
(9)Since we do not have the analyzer of naturallanguage (Japanese), sentences are given to thesystem in terms of Case grammer as shown in Fig.9.
The numbers in Fig.
9 correspond to thesentences in Fig.
7 and the question.
Letter V,A, O, L, I and G indicate verb, subject, object,location, instrument and goal, respectively.List (M (?
G)) means that the sentence is aquestion one.John and Tom are human.
(i)Ropel is a rope.
(2)Spot is a dog.
(3)John, Tom and Ropel  are at place P i8 .
(4)Spot is at place P20.
(5)John dislikes a dog.
(6)John and Tom play at a tug of war.
(7)Spot walks toward place Pi6.
(8)Fig.
7 Input sentences in a story.i.
((V IS-A) (A (TOM JOHN)) (O HUMAN))2.
((V IS-A) (A (ROPEI)) (O ROPE))3.
((V IS-A) (A (SPOT)) (0 DOG))4.
((V IS-AT) (A (TOM JOHN ROPEI)) (L PiS))5.
((V IS-AT) (A (SPOT)) (L P20))6.
((V DISLIKE) (A (JOHN)) (O DOG))7.
((V PLAY-AT-A-TUG-OF-WAR)(A (TOM JOHN)) (I ROPEi))8.
((V MALK) (A (SPOT)) (G P16))9.
((M (?
G)) (A (TOM))(V PLAY-AT-A-TUG-OF-WAR) (G WINNER))Fig.
9 The input sentences and thequestion in the form ofCase grammer.Photo.
i and Photo.
2 show two frames of theanimation made from the sentences in Fig.
9.Photo.
i indicates the state that John and Tombegin to play at a tug of war, and Spot iswalking toward place Pi6.
In Photo.
2, John ranaway since Spot came near him.
Therefore, Tomhas won the game and is delighted.5.
ConclusionThere are two types for the representation ofknowledge: the declarative one and theprocedural one.
The difference between them iswhich we attach importance to modularity orconvenience of interaction.
The micro-actor hasbeen proposed as the method in which themodularity is established without sacrificingthe possiblities for interaction.This paper has treated of four problems tounderstand a story: (i) depth of understanding asentence to comprehend a story, (2) a method todeal with an event which happens on the specificcondition, (3) synchronization of the eventswhich occur at the same time and (4) treatmentof the event which involves more than oneobject.
We have tried to solve these problemsusing micro-actors.
The most difficult problemis the last one in the above.
When the systemdeals with the last problem, it must haveability of the simulation in which the objectschange their states in parallel.
The convenientway for this is that a object affects onlyrelevant objects.
Since message passing is onlythe interaction method between nmicro-actors,--157--Photo.
I The state that Spot comes nearTom and John who play at a tugof war.Photo.
2 The state that John ran awayand Tom has won.this method is very available for the parallelprocessing or the psudo parallel processing.Furthermore, not only the declarative knowledgebut procedural one can be embedded in themicro-actors and the problems mentioned abovehave been solved with relative ease.This paper has described the knowledgerepresentation for a story understanding and asimulation system for it.
In another paper, wehave presented a tracing technique, usingmicro-actors, of blood vessels instereorado-graphic images of a cerebrum-vascularsystem.
Futhermore, some other systems havebeen constructed usig micro-actors with success\[8\].The autors appreciate many helpful conversationswith members of Prof. Tanak's Laboratory ofOsaka University.
Especially, they thank H.Karasawa and T. Takahashi.
The micro-actor hasbeen implemented in LISP 1.7 which was developedby S. Doshita et al in Kyoto University.References.\[i\] Hewitt, C., Bishop, P. and Steiger, T.: "AUNIVERSAL MOSULAR ACTOR FORMALISM FOR ARTIFICIALINTELLIGENCE", Proc.
of IJCAI-75, pp.235--245(1973).\[2\] Hewitt, C., and Baker, H.: "TOWARDS APROGRAMMING APPRENTECE", IEEE Trans.
on SoftwareEngineering (1975).\[3\] Kahn, K. M.: "AN ACTOR-BASED COMPUTERANIMATION LANGUAGE", AI WORKING PAPER 120(1976).\[4\] Kahn, K. M.: "DIRECTOR GUIDE", AI MEMO 482(1978).\[5\] Lehnert, W.: "IIUMAN AND COMPUTATIONALQUESTION ANSWERING", Cognitive Science, Vol.
i,No.
i, pp.47--73 (1977).\[6\] Minsky, M.: "FRAME SYSTEM"," in Winstom(ed.)
Visual Information Processing (1975).\[7\] Ogawa, H. and Tanaka, K.: "A STRUCTURE FORTHE REPRESENTATION OF KNOWLEDGE --A PROPOSAL FORA MICR0-ACTOR--", Proc.
of IJCAI-77, pp.248--249(1977) .\[8\] 0gawa, H., Nanba, H. and Tanaka, K.: "ACTIVEFRAMES FOR THE KNOWLEDGE REPRESENTAION", Proc.of IJCAI-79, PP.668--675 (1979).\[9\] Roberts, R. and Goldstein, I.: "THE FRLMANUAL", AI-MEMO 409, MIT (1977).\[I0\] Roberts, R. and Goldstein, I.: "THE FRLPRIMER", AI-MEMO 408, MIT (1977).\[ii\] Wilensky, R.: "WHY JOHN MARRIED MARY:UNDERSTANDING STORIES INVOLVING RECURRINGGOALS", Cognitive Science, Vol.
2, pp.235--266(1978).\[12\] Yonezawa, A.: "A SPECIFICATION TECHNIQUEFOR ABSTRUCT DATA TYPES WITH PARALLELISM",Research Reports on Information Sciences inTokyo Institute of Technology, No.
C-17 (1978).158
