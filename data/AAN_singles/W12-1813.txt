NAACL-HLT 2012 Workshop on Future directions and needs in the Spoken Dialog Community: Tools and Data, pages 25?28,Montre?al, Canada, June 7, 2012. c?2012 Association for Computational LinguisticsFramework for the Development of Spoken Dialogue Systembased on Collaboratively Constructed Semantic ResourcesMasahiro Araki       Daisuke TakegoshiDepartment of Information ScienceKyoto Institute of TechnologyMatsugasaki Sakyo-ku Kyoto 6068585 Japanaraki@kit.ac.jpAbstractWe herein introduce our project of realizing aframework for the development of a spokendialogue system based on collaboratively con-structed semantic resources.
We demonstratethat a semantic Web-oriented approach basedon collaboratively constructed semantic re-sources significantly reduces troublesome ruledescriptions and complex configurations,which are caused by the previous relationaldatabase-based approach, in the developmentprocess of spoken dialogue systems.
In addi-tion, we show that the proposed frameworkenables multilingual spoken dialogue systemdevelopment due to clear separation of model,view and controller components.1 IntroductionIn recent years, some large scale repositories ofcollaboratively constructed semantic resources(CSRs), such as Freebase1 , are available online.Those semantically structured data enable moreprecise search than simple text matching (e.g.
"Find a dental clinic near Kyoto station opens atSaturday night.")
and more complex search thansimple query to relational database (RDB) (e.g.
aquery "Find machine learning books written by aresearcher of NLP."
needs cross search on a book1 http://www.freebase.com/DB and a researcher DB).
Since search conditionsof such queries to the structured data become com-plex, natural language, especially speech, for smartphone and tablet PC, is a promising method of que-ry input.There are some previous researches on convert-ing natural language input to the query of struc-tured data (Lopez et al, 2006) (Tablan et al, 2008).These researches basically concentrated on the in-put sentence analysis and the query construction.
Ifthe developer want to apply existing natural lan-guage understanding methods to spoken dialoguesystem (SDS) for structured data search, there re-mains fair amount of components that need to beimplemented, such as speech input component,dialogue flow management, backend interface, etc.In order to realize a development environmentof SDS for structured data search, we designed adata model driven framework for rapid prototypingof SDS based on CSRs.
The proposed frameworkcan be regarded as an extension of existing Railsframework of Web application to (1) enablingspeech interaction and (2) utilizing a benefit ofCSRs.
By using CSRs and the extended Railsframework, the troublesome definitions of rulesand templates for SDS prototyping can be reducedsignificantly compared with the ordinary RDB-based approach.As this data model driven approach is independ-ent of language for interaction, the proposedframework has a capability of easily implementingmultilingual SDS.25The remainder of the present paper is organizedas follows.
Section 2 describes the proposed ap-proach to a data modeling driven developmentprocess for SDS based on CSRs and explains theautomatic construction of the spoken query under-standing component.
Section 3 demonstrates themultilingual capability of the proposed framework.In Section 4, the present paper is concluded, and adiscussion of future research is presented.2 Data modeling driven approach basedon CSRs2.1 Object-oriented SDS developmentframeworkWe previously proposed a data modeling drivenframework for rapid prototyping of SDS (Araki2011).
We designed a class library that is based onclass hierarchy and attribute definitions of an exist-ing semantic Web ontology, i.e., Schema.org2.
Thisclass library is used as a base class of an applica-tion-specific class definition.
An example of classdefinition is shown in Figure 1.Figure 1: Example of class definition.In this example, the "MyBook" class inherits allof the attributes of the "Book" class of Schema.orgin the same manner as object-oriented program-ming languages.
The developer can limit the at-tributes that are used in the target application bylisting them in the constraints section of the classdefinition.
On the other hand, the developer canadd additional attributes (ranking attributes as thetype of Integer, which is not defined in original"Book" class) in the definition of the class.The task type and dialogue initiative type are in-dicated as annotations at the beginning of the class2 http://schama.org/definition.
In this example, the task type is DBsearch and the initiative type is user initiative.
Thisinformation is used in generating the controllercode (state transition code, which is equivalent toFigure 2) and view codes of the target SDS.InputqueryDisplayresultHelpsubmithelpmodifyqueryexitHomeFigure 2: Control flow of the DB search task.Using Grails3, which is a Rails Web applicationframework, the proposed framework generates thedialogue controller code of the indicated task typeand the view codes, which have speech interactioncapability on the HTML5 code from this class def-inition.
The overall concept of the data modelingdriven framework is shown in Figure 3.Data modeldefinitionMix-in oftraitsembedapplicationlogicStatedefinitiongenerateconvertGrailsData modeldefinitionGroovygenerateHTML5codeModelControllerViewFigure 3: Overview of the data modeling drivenSDS development framework.2.2 Using CSRsThe disadvantage of our previous framework, de-scribed in the previous subsection, is the high de-pendence on the dictation performance of thespeech recognition component.
The automaticallygenerated HTML5 code invokes dictation API,irrespective of the state of the dialogue and initia-tive type.
In order to improve speech recognitionaccuracy, grammar rules (in system initiative dia-logue) and/or the use of a task/domain-dependentlanguage model (in mixed/user initiative dialogue)3 http://grails.org/@DBSearch@SystemInitiativeclass MyBook extends Book {Integer rankingstatic constraints = {name(onsearch:"like")author(onsearch:"like")publisher()ranking(number:true)}}26are key factors.
In our previous framework, thedeveloper had to prepare these ASR-related com-ponents using language resources, which are be-yond the proposed data-driven framework.In order to overcome this defect, we add theFreebase class library, which is based on large-scale CSRs, because Freebase already includes thecontents of the data.
These contents and a large-scale Web corpus facilitate the construction ofgrammar rules and a language model that is specif-ic to the target task/domain.For example, the Film class of Freebase hasmore than 191 thousand entries (as of May 2012),most of which have information about directors,cast members, genres, etc.
These real data can beused as resources to improve ASR accuracy.In system initiative type dialogue, the contentsof each attribute of the target class can constructword entries of the grammar rule for each attributeslot.
For example, the grammar rule for the user'sresponse to "Which genre of movie are you search-ing for?"
can be constructed from the contents ofthe genres attribute of the Film class.
We imple-mented a generator of the set of content wordsspecified in the data model definition from the dataof Freebase.
The generator is embedded as onecomponent of the proposed framework.In the mixed/user initiative type tasks, sincecontent words and functional words make up theuser's utterance, we need a language model forspeech recognition and a semantic frame extractorfor the construction of query to semantic data.
Wedesigned and implemented a language model gen-erator and a semantic frame extractor using a func-tional expression dictionary that corresponds to theattributes of Freebase (Araki submitted).
The flowof the language model generation is shown in Fig-ure 4.FreebasedataWebcorpusData modelinitioncontentwordsin-domainentriesdomaindependentLMexamplesentencesFigure 4: Construction process of LM.2.3 Helper application for data definitionIn order to facilitate the data-model definition pro-cess, we implemented a helper application calledMrailsBuilder.
A screenshot of one phase of thedefinition process is shown in Figure 5, whichshows the necessary slots for data definition in theGUI and a list of properties once the developerselects the parent class of the target class.Figure 5: Screenshot of MrailsBuilder.3 Multilingual extension of the frameworkWith the internationalization capability of theGrails base framework and multilingual data re-sources provided as CSRs, we can generate a mul-tilingual SDS from the data model definition.
Allof the language-dependent information is stored inseparated property files and is called at the time ofthe dynamic view code generation process in theinteraction, as shown in Figure 6.Please inputsearchcondit ns.B ok of AI.Below items arefound.Figure 6: Example of realized interaction.27We also implemented a contents extractor fromFreebase data.
In Freebase, each class (called"type") belongs to one domain.
For example, the"Dish" type belongs to the "Food & Drink" domain(see Figure 7).
Although it assigned to a two-levelhierarchy, each type has no inherited properties.Therefore, it is easy for Freebase data to representa set of property values as a string instead of a uni-form resource identifier (URI).
Each instance hasthe name property and its value is written in Eng-lish.
For some instances, it also has the name de-scription in another language with the languagecode.
Therefore, we can extract the name of theinstance in various languages.?
Books?
Business?
Film?
Food&Drink?
...Domain?
Ingredient?
Restaurant?
Dish?
...Type?
2,421 Instances?
PropertiesDishProperty Expected TypeType of dish /food/type_of_dishCuisine /dining/cuisineTypical ingredients /food/ingredientRecipes /food/recipeFigure 7: Domain and type of Freebase.The input of the contents extractor is the modeldefinition code as in Figure 1 and the languagecode (e.g., "ja" for Japanese).
As an example, the"MyDish" class is defined as shown in Figure 8.Figure 8: Model definition of the "MyDish" class.The contents extractor outputs the instance rec-ords of the given language code and this instancecan be used for LM generator explained in section2.2.
For example, the extracted words in the caseof "de" (German) is shown in Figures 9.Figure 9: German contents of the "MyDish" class.4 Conclusions and future researchWe have proposed a framework for developmentof a SDS on CSRs and have explained rapid con-struction method of spoken query understandingcomponent and showed its multilingual capability.In future research, we plan to evaluate the quan-titative productivity of the proposed framework.AcknowledgmentsThe present research was supported in part by theMinistry of Education, Science, Sports, and Cul-ture through a Grant-in-Aid for Scientific Research(C), 22500153, 2010.ReferencesMasahiro Araki and Yuko Mizukami.
2011.
Develop-ment of a Data-driven Framework for Multimodal In-teractive Systems.
In Proc.
of IWSDS 2011, 91-101.Masahiro Araki and Daisuke Takegoshi.
accepted.
ARapid Development Framework for MultilingualSpoken Dialogue Systems.
In Proc.
of IEEECOMPSAC 2012.Masahiro Araki.
submitted.
An Automatic ConstructionMethod of Spoken Query Understanding Componentfrom Data Model Definition.Vanessa Lopez, Enrico Motta, and Victoria S. Uren.2006, AquaLog: An ontology-driven Question An-swering System to interface the Semantic Web.
InProc.
of HLT-NAACL 2006, 269-272.Valentin Tablan, Danica Damljanovic, and KalinaBontcheva.
2008, A natural language query interfaceto structured information.
In Proc.
of the 5h Europe-an Semantic Web Conference (ESWC 2008).
@DBSearch@UserInitiativeclass MyDish extends Dish {static constraints = {name()type_of_dish1(nullable:true)cuisine(nullable:true)ingredients(nullable:true)recipes(nullable:true)}}28
