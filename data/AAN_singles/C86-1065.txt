A MORPHOLOGICAL RECOGNIZER WITH SYNTACTIC ANDPHONOLOGICAL RULESJohn BearArtificial Intell igence CenterSRI Internat ional333 Ravenswood AveMenlo Park, CA 94025U.S.A.AbstractThis paper describes a morphological nalyzer which, when pars-ing a word, uses two sets of rules: rnles describing the syntax ofwords, and rules describing facts about orthography.1 Introduction tIn many natural language processing systems currently in use,the morphological phenomena re handled by programs whichdo not interpret any sort of rules, but rather contain referencesto specific morphemes, graphemes, and grammatical categories.Recently Kaplan, Kay, Koskennicmi, and Karttunen have shownhow to construct morphological analyzers in which the descrip-tions of the orthographic and syntactic phenomena are separablefrom the code.
This paper describes a system that builds ontheir work in the area of phonology/orthography and also hasa well defined syntactic omponent which applies to the area ofcomputational morphology for the first time some of the toolsthat have bccn used in syntactic analysis for quite a while.This paper has two main parts.
The first deals with the or-thographic aspects of morphological analysis, the second withits syntactic aspects.
The orthographic phenomena constitutea blend of phonology and orthography.
The orthographic rulesgiven in this paper closely resemble phoImlogical rules, both inform and fimctlon, but because their purpose is the description oforthographic facts, the words orthography and orthographic willbe used in preference to phonology and phonological.The overall goal of the work described herein is the devel-opment of a flexible, usable morphological analyzer in which therules for both syntax and spelling arc (1) separate from the code,and (2) descriptively powerful enough to handle the phenomenaencountered when working with texts of written language.2 OrthographyThe researchers mentioned above use finite-state transducers forstipulating correspondences between surface segments, and un-derlying segments.
In contrast, the system described in this pa-ll am indebted to Lauri Karttunen and Fernando Pereir~ for all theirhelp.
Laurl supplied the initial English automat~ on which the orthographicgrammar was based, while Fernando furnished some of the Prolog code.
Bothprovided many helpful suggestion~ and explanations as well.
I would also liketo thank Kimmo Koskennlemi for his comments on an earlier draft of thispaper.This research was supported by the following grants: Naval ElectronicsSystems Command N00039-84-K-0078; Navelex N00039-84-C-0524 P00003;Office of Naval Research N00014-85-C-0013.per does not use finite state machines.
Instead, orthographicrules are interpreted irectly, as constraints on pairings of sur-face strings with lexieal strings.Tile rule notation employed, including conventions for express-ing abbreviations, is based on that described in Koskenniemi\[1983,1984\].
Tile rules actually used in this system are based ontile account of English in Karttunen and Wittenburg \[1983\].2.1 RulesWhat follows is an inductive introduction to the types of rulesneeded.
Some pertinent data will be presented, then some po-tential rules for handling these data.
We shall also discuss thereasons for needing a weaker form of rule and indicate what itmight look like.Let us first consider some data regarding English /s /  mor-phemes:ALWAYS -ESbox+s ~--~ boxesclass+s ~ classesfizz+s ~ fizzesspy+s *----* spiesash+s ~ ashesehureh+s ~---o churchesALWAYS -Sslam+s ~ slamshit+s ~ hitst ip+s *---* tipsSOMETIMES -ES,SOMETIMES -Spiano+s ~ pianossolo+s ~ solosdo+s ~ doespotato+s ~ potatoesbanjo+s ~ banjoes or banjoscargo+s ~ cargoes or cargosBelow are presented two possible orthographic rules for de-scribing the foregoing data:tu )  + - - - ,  c {x I z I y / i  I s (h) I c h} _ sp~2) + - - -*  e {x I z I y / i  I s (h) I e h I o} _ sThe first of these rules will be shown to be too weak; the second,in contrast, will be shown to be too strong.
This fact will serveas an argument for introducing a second kind of rule.272Before describing how the rules should be read, it is necessaryto define two technical terms.
In phonology, one speaks of under-lying segments and surface segments; in orthography, charactersmaking up the words in the lexicon contrast with characters inword forms that occur in texts.
The term lezical character willbe used here to refer to a character in a word or morpheme intile lexicon, i.e., the analog of a phonological underlying segment.Tile term sat\[ace character will be used to mean a character in aword that could appear in text.
For example, \[1 o v e + e d\] is astring of lexieal characters, while \[I o v e d\] is a string of surfacecharacters.We may now describe how the rules should be read.
The firstrule should be read roughly as, "a morpheme boundary \[+\] at thelexical level corresponds to an \[el at the surface level wheneverit is between an \[x\] and an \[s\], or between a \[z\] and an \[s\], orbetween a lcxical \[y\] corresponding to a surface \[i\] and an \[s\], orbetween an \[ s h\] and an \[s\] or between a\[e h\] and an \[s\]."
Thismeans, for instance, that the string of lexical characters \[c h u re h + s\] corresponds to the string of surface characters \[c h u r ch e s\] (forgetting for the moment about the possibility that otherrules might also obtain).
The second rule is identical to the firstexcept for an added \[o\] in tile left context.When we say \[+\] corresponds to \[el between an lxl and an N,we mean between a Icxical I x\] corresponding to a surface lxl anda lexical Is\] corrcsponding to a surface \[s\].
If we wantcd to saythat it does not matter what the lexieal \[x\] corresponds to on thesurface, we would use \[x/=\] instead of just ix\].The rules given above get tile facts right for the words thatdo not end in \[o\].
For those that do, however, Rule 1 misseson \[do+s\] ~-~ \[docs\], \[potato+s\[ ?=~ \[potatoes\]; Rule 2 misseson \[piano+s\] ~ \[pianos\], \[solo+s\] ~:~ \[solos\[.
Furthermore,neither ule allows for the possibility of more than one acceptableform, as in \[banjo+s\] ~ (\[banjoes\] or \[banjos\]), \[cargo+s\](\[cargoes\] or \[cargos\]).The words ending in \[o\] can be divided into two classes: thosethat take an \[es\] in their plural and third-person singular forms,and those that just take an \[s\].
Most of the facts could be de-scribed correctly by adopting one of the two rules, e.g., the onestating that words ending in \[o\] take an \[es\] ending.
In additionto adopting this rule, one wouhl need to list all the words takingan \[s\] crating as being irregular.
This approach has two prob-lems.
First, no matter which rule is chosen, a very large numberof words wouht have to bc listed in the lexicon; second, this ap-proach does not account for the cocxlstcnce of two alternativeforms for some words, e.g., \[banjoes\] or \[banjos\].The data and arguments just given suggest he need for a sec-ond type of rule.
It would stipulate that such and such a corre-spondence is allowed but not required.
An example of such a ruleis given below:R3) +/c  allowed in context o _ s.Rule 3 says that a morpheme boundary may correspond to an\[el between an \[o\] and an \[s\].
It also has the effect of saying thatif a morphcme boundary ever corresponds to an \[c\], it must bein a context hat is explicitly allowed by some rule.If we now have the two rules R1 and R3,R1) 4- ~e/  {x lz  \ [y / \ [ I s (h )  \ [eh}  - sR3) +\]e allowed in context o _ s,we can generate all the correct forms for the data given.
Further-more, for the words that have two acceptable forms for plural orthird person sing-ular, we get both, just as we would like.
Theproblem is that we generate both forms whether we want themor not.
Clearly some sort of restriction on the rules, or "finetuning," is in order; for the time being, however, the problem ofderiving both forms is not so serious that it cannot be tolerated.So far we have two kinds of rules, those stating that a cor-respondence always obtains in a certain environment, and thosestating that a correspondence is allowed to obtain in some en-vironment.
The data below argue for one more type of rule,namely, a rule stipulating that a certain correspondence n verobtains in a certain environment.DATA FOR CONSONANT DOUBLINGDOUBLING:bar+ed ~ barredbig+est ~ biggestrefer+ed +---~ referredNO DOUBLING:question+ing ,---4 questioninghear+ing ~ hearinghack+ing ~ hackingBOTH POSSIBILITIES:travel+ed ~ (travelled or traveled) both are allowedIn English, final consonants are doubled if they, "follow a single\[orthographic\] vowel and the vowel is stressed."
\[from l{arttunenand Wittenbnrg 1983\].
So for instance, in \[hear+ing\], thc final \[r Iis preceded by two vowels, so there is no doubling.
In \[haek+ing\],the final \[k\] is not preceded by a vowel, so there is no doubling.In \[question+lug\], the last syllable is not stressed so again thereis no doubling.In Karttunen and Wittenlmrg \[1983\] there is a single rule listedto describe the data.
llowever, the rule makes use of a diacritic(') for showing stress, and words in the lexicon must contain thisdiacritic in order for the rule to work.
The same thing couldbe done in the system being described here, but it was deemedundesirable to allow words in the lexicon to contain diacritics en-coding information such as stress.
Instead, the following rules areused.
Ultimately, the goal is to have some sort of general mech-anism, perhaps negative rule features, for dealing with this sortof thing, but for now no such mechanism has been implemented.RULES FOR CONSONANT DOUBLING"Allowed-type" rules'+ ' /b  allowed in context vV b _ vV z'+ ' / c  allowed in context vV c _ vV'+ ' /d  allowed in contexl vV d vV'+ ' / f  allowed in context vV f _ vV'+ ' /g  allowed in context vV g _ vV'+' / I  allowed in context vV I vV'+ ' /m allowed in context vV m _ vV'+ ' /n  allowed in context vV n _ vV'+ ' /p  allowed in context vV p _ vV'+ ' / r  allowed in context vV r _ vV'+ ' / s  allowed in context vV s _ vV'+'It allowed in context vV t _ vV'+ ' / z  allowed in context vV z _ vV"Disallowed-type" rules'+ ' /b  disallowed in context vV vV h _ vV'+ ' /c  disallowed in context vV vV c _ vV'+ ' /d  disallowed in context vV vV d _ vV2In these rules, the symbol vV stands for any element of the following setof orthographic vowels: {a,e,i,o,u}.273'+ ' / f  disallowed in context vV vV f _ vV'+ ' /g  disallowed in context vV vV g _ vV'+'/1 disallowed in context vV vV l vV'+ ' /m disallowed in context vV vV m _ vV'+'In disallowed in context vV vV n _ vV'+'/p disallowed in context vV vV p vV'+ ' / r  disallowed in context vV vV r _ vV'+ ' / s  disallowed in context vV vV s _ vV'+ ' / t  disallowed in context vV vV t _ vV'+'/z disallowed in context vV vV z _ vVThe allowed-type rules in tile top set are those that licenseconsonant doubling.
The disallowed-type rules in the second setconstrain the doubling so it does not occur in words like \[eat+ing\]?
:==> \[eating\] and \[hear+ing\] ?====~ \[hearing I.
The disallowed-typerulcs say that a morpheme boundary \[+\] may not ever correspondto a consonant when tile \[+\] is followed by a vowel and precededby that same consonant and then two more vowels.The rules given above suffer from the same problem as theprevious rules, namely, over generation.
Although they produceall the right answers and allow nmltiple forms for words like\[travel+er\] ~ (\[traveller\] or \[traveler\]), which is certainly apositive result, they also allow multiple forms for words which donot allow them.
For instance they generate both \[referred\] and\[refered\].
As mentioned earlier, this problem will be tolerated forthe time being.2.2 Compar i son  w i th  Koskenn iemi ' s  RulesKoskenniemi \[1983, 1984\] describes three types of rules, as exem-plified below:R4) a > b :=:*- c/d c / f -  g/h i/jRS) a > b ~= old e/f- g/h i/jR6) a > b ~ e/d e l l -  g/h i/j.Rule R4 says that if a lexical \[a\] eorresponds to a surface \[b\],then it must be within tile context given, i.e., it must be precededby \[c/d eft\] and followed by \[g/h i/j|.
This corresponds exactlyto tile rule given below:RV) a/b allowed in context old e/ f_  g/h i/j.The rule introduced as R5 and repeated below says that if alexieal \[a\] occurs following \[c/d e/f|  and preceding \[g/h i/j|, thenit must correspond to a surface \[b\]:RS) a > b e-= e/d e/ f_  g/h i/j.
'rhe corresponding rule in the formalism being proposed herewould look approximately ike this:R10) a/sS disallowed in context e/d c / f -  g/h i/j,where sS is some set of characters to which\[a\]can correspond that does not include \[b\].A comparison of each system's third type of rule involves com-post|on of rules and is the subject of the next section.2.3  Ru le  Compos i t ion  and  Decompos i t ionIn Koskennlemi's systems, rule composition is fairly straightfor-ward.
Samples of the three types of rules are repeated here:R4) a>b=:~e/de / f  g /h i / jR5) a > b ?=== e/d e/ f_  g/h i/jR6) a > b ~ e/d e / f _  g/h i/jIf a grammar contains the two rules, R4 and RS, they can bereplaced by tile single rule R6.In contrast, the composition of rules in the system proposedhere is slightly more complicated.
We need the notion of a defaultcorrespondence.
The default correspondence for any alphabeticcharacter is itself.
In other words, in the absence of any rules,an alphabetic haracter will correspond to itself.
There may alsobe characters that are not alphabetic, e.g., the \[+\] representing amorpheme boundary, currently the only non-alphabetic charac-ter in this system.
Other conceivable non-alphabetic characterswould be an accent mark for representing stress, or say, a hashmark for word boundarics.
The default for these characters isthat they correspond to 0 (zero).
Zero is ttle name for the nullcharacter used ill this system.Now it is easy to say how rules are composed in this system.If a grammar contains both Rl l  and RI 2 bclow, {qlen RI3 maybe substituted for them with the same effect:Rl l )  a/b allowed it, context e/d e/f g/h i/jR12) a /"a 's  default" disallowed in context e/d e/f g/h~/jR13) a~b/c /de / f  g /h i / jIn fact, when a file of rules is read into the system, oCCUl'rence:~ ofrules like RI3 are internalized as if the grammar eally containeda rule like Rl l  and another like R12.2.4  Us ing  the  Ru le~Again consider for an example tile rule R1 repeated below.R1) +- -~ e /  {x I z lY / i  \[s (h) \ [oh} _sWhen this rule is read in, it is expanded into a set of ruleswhose contexts do not contain disjunction or optionality.
RulesR14 through R19 are the result of the expansion:R14) '+ '  - -~ e / x sR15) '+ '  ~e  / z_sR16) '+'  - -~ e / y / i _  sR17) '+'  - - *  e \] s si2.18)'+' ~e/sh  sR19) '+ '  ~e/eh  _s.R14 through R19 arc in turn expanded automatically into R20through R31 below:R20) '+ ' /0  disallowed in context x _ sR21) %' /0  disallowed in context z _ sR22) '+ ' /0  disallowed in context y/i .. sR23) '+ ' /0  disallowed ill context s - sR24) '+ ' /0  disallowed in context s h : sR25) '+ ' /0  disallowed in context c h _ sR26) '+ ' /e  allowed ill context x _ sR27) '+ ' /e  allowed in context z _ sR28) '+ ' /e  allowed in context y/ i  - sR29) '+ ' /e  allowed in context s _ sR30) '+ ' /e  allowed in context s h - sR31) '+ ' /e  allowed in context e h _ s.274The disallowed-type rules given here stipulate that a mor-pheme boundary, lexieal \[+\], may never be paired with a millsurface character, \[0\], in the environments indicated.
Anotherway to de.scribe what disallowed-type rules do, in general, is tosay that they expressly rule out certain sequences of pairs ofletters.
For example, R20R20) +/0  disallowed in cantext x _ sstates that the sequence.
, ,X  '-}" 8 .
, .I I I. .
.X0S .
.
.is never permitted to be a part of a mapping of a surface stringto a lexical string.The allowed-type rules behave sfightly differently than theirdisallowed-type counterparts.
A rule such asR26) '+'/e allowed in context x _ s,says that lexieal \[+\] is not normally allowed to correspond to sur-face Ie\].
It also affirms that lexical \[q-\] may appear between asIx| and a~t Is|.
Other rules starting with tbe same pair say, in ef-fect, "here is another cnvirmuncnt where this pair is acceptable.
"The way these rules are to be interpreted is that a rule's maincorrespondence, i.e., the character pair that corresponds to theunderscore in tile context, is forbidden except in contexts whereit is expressly permitted by some rnle.Once the rules are broken into the more primitive allowed-typeand disallowed-type rules, there are several ways in which onecould try to match them against a string of surface charactersin tile recognition process.
One way wonld be to wait until apair of characters was encountered that was the main pair for arule, and tficn look backwards to see if the left context of therule matches the current analysis path.
If it does, put the rightcontext on hold to see whether it will ultimately be matched.Another posslblility would be to continually keel) track of theleft contexts of rnles that are matching the characters at hand,so that when tbe main character of a rule is encountered, theprogram already knows that the left context has been matched.The right context still needs to be pnt on hold and dealt withthe same way as in the other scheme.The second of the two strategies i the one actually employedin this system, though it may very well turn out that the firstone is more efficient for the current grammar of English.2.5  Poss ib le  CorrespondencesThe rules act as filters to weed out seqnenees of character pairs,but before a particular mapping can bc weeded out, somcthlngneeds to propose it ~s being possible.
There is a list called alist of l)ossible correspondences, or sometimes, a list of feasiblepairs - that tells which characters may correspond to whichothers.
Using this list, the ri:cognizer generates l)ossible Icxica\]forms to correspond to tile input surface form.
These can then bcchecked against he rules and against he lexicon.
If tim rules (1onot weed it out, and it is also in the lexicon, we have successfullyrecognized a morpheme.3 SyntaxThe goal of the work being deserlbcd was an analyzer that wouldbe easy to use.
In the area of syntax, this entails two subgoal.s.First, it should be easy to specify which morphemes may com-bine with which, and second, when tile recognition tlas been com-pleted, the result shnuld be something that can easily be used bya parser or some other program.Karttunen \[1983\] and Karttlmen and Wittenburg \[1983\] havesome suggestions for what a proper syntactic component fora morphological analyzer might contain.
They mention usingcontext-free rules and some sort of feature-handling system aspossible extensions of both their and Koskenniemi's systems.
Inshort, it has been acknowledged that any such system reallyought to have some of the tools that have been used in syntaxproper.The first course of action that was followed in building thisanalyzer was to implement a unification system for (lags (directedacyclie graphs), and then to have the analyzer unify the dags ofall tile morphemes encountered in a single analysis.
That schemeturned out to be too weak to be practical.
The next step was toimplement a PATR rule interpreter \[Shieber, et al 1983\] so thatselected paths of dags could bc unified.
Finally, when that turnedout to be still less flexible than one would like, tile capability ofhandling disjunction in the dags was added to the unificationpackage, and the PATR rule interpreter \[Karttnncn i984\].The rules look like PA'I'R rules with tile context free skeleton.The first two lines of a rule are just a comment, however, andare not used in doing the analysis.
The recognizer starts withthe (lag \[cat: empty\].
The rnle below states that the "empty"dag may be combined with the (lag from a verb stem to producea dag for a verb.% verb ~ emllty + verb stem% 1 2 3<2 cat> = empty<3 cat> = verb_stem<3 type> = regular<1 type> = <3 type><l  cat> = verb<1 word> = <3 lex><l  form> = {inftense: prespers: {1 ~} 1}.The resulting dag will he a.mbigatous between an infinitive verh,and a l)rcsent tense verb that is in clther the first or secondperson.
(The braces in tim rule arc the indicators of disjunction.
)The verb stem's value for the feature Icx will be whatever spellingtile stem has.
This value will then I)e the value for the fl~at~u'eword in the new (lag.The analyzer applies these rules in a w~ry simple wrff.
It al-ways carries along a (lag representing the results found t, hns far.Initially this dag is \[cat: empty\].
When a morpheme is fonnd, tileanalyzer tries to combine it, via a rule, with the (lag it has beencarrying along.
If tile rule succeeds, a new (lag is produced andbecomes the (lag carried along by the analyzer.
In this way tileinformation about which morpbentes have been fonnd is propa-gated.If an ling| is encountered after a verb has been found, thefollowing rule builds the new (lag.
It first makes sure that theverb is infinitive (form: inf) so that tile suffix cannot be addedonto the end of a past participle, for instance, and then makesthe  tense of the new dag be pres part for present participle.
Thecategory of the new dag is verb, and the value for word is thesame as it was in the original verb's dag.
The form of the inputverb is a disjunction of inf (infinitive) with \[tcnsc: prcs, pets: {12}\], so the unification succeeds.275% verb ~ verb + ing% 1 ~.
3<2 cat> = verb<3 lex> =ing<2 form> = inf<1 eat> = verb<1 word> = <2 word><1 form> = \[tense: pres-part\] .The system also has a rule for combining an infinitive verb withthe nominalizing \[er\] morpheme, .g., swim : swimmer.
This rule,given below, also checks the form of the input verb to verify thatit is infinitive, it makes the resnlting dag have category: noun,number: singular, and so on.% noun - -~ verb + er% 1 2 3<2 cat> = verb<3 lex> -- er<2 form> = inf<1 cat> --- noun<1 word> = <2 word><1 nbr> = sg<1 pers> = :3 .The noun thus formed behaves just the same as other nouns.In particular, a pluralizing Is\] may be added, or a possessive \['s\],or any other affix that can be appended to a noun.There are other rules in the grammar for handling adjectiveendings, more verb endings, etc.
Irregular forms are handled ina fairly reasonable way.
The irregular nouns are listed in thelexicon with form: irregular.
Other rules than the ones shownhere refer to that feature; they prevent tile addition of pluralmorphemes to words that are already plural.
Irregular verbsare listed in the lexicon with an appropriate value for tense (notunifiable with inf) so that the test for infinitivcness will fail whenit should.
Irregular adjectives, e.g.
good, better, best are dealtwith in an analogous manner.4 Fur ther  WorkThere are still some things that are not as straightforward asonewould like.
In particular, consider the following example.
Letus suppose as a first approximation that one wanted to analyzethe \[un\] prefix in English as combining with adjectives to yieldnew ones, e.g., unfair, unclear, unsafe.
Suppose also that onewanted to be able to build past participles of transitive verbs(passives) into adjectives, so that they could combine with \[tin\],a.~ in uncovered, unbuilt, unseen.What we would need, would be a rule to combine an "empty"with an \[un\] to make an \[un\] and then a rule to combine an \[un\]with a verb stem to form a thingl, and finally a rule to combine athingl with a past participle marker to form a negative adjective.More rules would be needed for the case where \[un\] combines withan adjective stem like \[fair\].
In addition, rules would be neededfor irregular passives, etc.In short, without a more sophisticated control strategy, thegrammar would contain a fair amount of redundancy if one reallyattempted to handle English morphology in its entirety.
How-ever, on a more positive note, the rules do allow one to dealeffectively and elegantly with a sufficient range of phenomena tomake it quite acceptable as, for instance, an interface between aparser and its lexicon.5 Conc lus ionA morphological analyzer has been presented that is capable ofinterpreting both orthographic and syntactic rules.
This rep-resents a substantial improvement over the method of incorpo-rating morphological facts directly into the code of an analyzer.The use of these rules leads to a powerful, flexible morphologicalanalyzer.References\[1\] Karttunen, L. (1983) "Kimmo: A General Morphologi-cal Processor," in Tezas Linguistic Forum #22, Dalrympleet al, eds., Linguistics Department, University of Texas,Austin, Texas.\[2\] Karttunen, L. (1984) "Features and Values," in COLING84.\[3\] Karttunen, L. and K. Wittenburg (1983) "A Two-level Mor-phological Analysis Of English," in Texas Linguistic Forum#22, Dalrymple et al, eds., Linguistics Department, Uni-versity of Texas, Austin, Texas.\[4\] Kay, M. (1983) "When Meta-rules are not Meta-rules," inK.
Sparcke-Jones, and Y. Wilkes, eds.
Automatic NaturalLanguage Processing, Jotm Wiley and Sons, New York.\[5\] Koskenniemi, K. (1983) "Two-level Model for MorphologicalAnalysis," IJCAI 83, pp.
'683-685.\[6\] Koskennlemi, K. (1984) "h General Computatlona\] Modelfor Word-form Recognition and Production, ~ COLING 84,pp.
178-181.\[7\] Selkirk, E. (1982) The Syntaz of Words, MIT Press.\[8\] Shieber, S., It.
Uszkoreit, F. Percira, J. Robinson, andM Tyson (1983) "The Formalism and hnplementation ofPATR-II," in B. Grosz, and M. Stiekcl (1983) Research onInteractive Acquisition and use of Knowledge, SRI Final Re-port 1894, SRI International, Menlo Park, California.276
