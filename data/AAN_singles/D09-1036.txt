Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing, pages 343?351,Singapore, 6-7 August 2009.c?2009 ACL and AFNLPRecognizing Implicit Discourse Relations in the Penn Discourse TreebankZiheng Lin, Min-Yen Kan and Hwee Tou NgDepartment of Computer ScienceNational University of Singapore13 Computing DriveSingapore 117417{linzihen,kanmy,nght}@comp.nus.edu.sgAbstractWe present an implicit discourse relationclassifier in the Penn Discourse Treebank(PDTB).
Our classifier considers the con-text of the two arguments, word pair infor-mation, as well as the arguments?
internalconstituent and dependency parses.
Ourresults on the PDTB yields a significant14.1% improvement over the baseline.
Inour error analysis, we discuss four chal-lenges in recognizing implicit relations inthe PDTB.1 IntroductionIn the field of discourse modeling, it is widelyagreed that text is not understood in isolation, butin relation to its context.
One focus in the studyof discourse is to identify and label the relationsbetween textual units (clauses, sentences, or para-graphs).
Such research can enable downstreamnatural language processing (NLP) such as sum-marization, question answering, and textual entail-ment.
For example, recognizing causal relationscan assist in answering why questions.
Detect-ing contrast and restatements is useful for para-phrasing and summarization systems.
While dif-ferent discourse frameworks have been proposedfrom different perspectives (Mann and Thompson,1988; Hobbs, 1990; Lascarides and Asher, 1993;Knott and Sanders, 1998; Webber, 2004), most ad-mit these basic types of discourse relationships be-tween textual units.When there is a discourse connective (e.g., be-cause) between two text spans, it is often easy torecognize the relation between the spans, as mostconnectives are unambiguous (Miltsakaki et al,2005; Pitler et al, 2008).
On the other hand, it isdifficult to recognize the discourse relations whenthere are no explicit textual cues.
We term thesecases explicit and implicit relations, respectively.While the recognition of discourse structure hasbeen studied in the context of explicit relations(Marcu, 1998) in the past, little published workhas yet attempted to recognize implicit discourserelations between text spans.Detecting implicit relations is a critical stepin forming a discourse understanding of text, asmany text spans do not mark their discourse re-lations with explicit cues.
Recently, the Penn Dis-course Treebank (PDTB) has been released, whichfeatures discourse level annotation on both explicitand implicit relations.
It provides a valuable lin-guistic resource towards understanding discourserelations and a common platform for researchersto develop discourse-centric systems.
With therecent release of the second version of this cor-pus (Prasad et al, 2008), which provides a cleanerand more thorough implicit relation annotation,there is an opportunity to address this area of work.In this paper, we provide classification of im-plicit discourse relations on the second version ofthe PDTB.
The features we used include contex-tual modeling of relation dependencies, featuresextracted from constituent parse trees and depen-dency parse trees, and word pair features.
Weshow an accuracy of 40.2%, which is a significantimprovement of 14.1% over the majority baseline.After reviewing related work, we first give anoverview of the Penn Discourse Treebank.
Wethen describe our classification methodology, fol-lowed by experimental results.
We give a detaileddiscussion on the difficulties of implicit relationclassification in the PDTB, and then conclude thepaper.2 Related WorkOne of the first works that use statistical meth-ods to detect implicit discourse relations is thatof Marcu and Echihabi (2002).
They showed thatword pairs extracted from two text spans provideclues for detecting the discourse relation between343the text spans.
They used a set of textual patternsto automatically construct a large corpus of textspan pairs from the web.
These text spans wereassumed to be instances of specific discourse re-lations.
They removed the discourse connectivesfrom the pairs to form an implicit relation corpus.From this corpus, they collected word pair statis-tics, which were used in a Na?
?ve Bayes frameworkto classify discourse relations.Saito et al (2006) extended this theme, to showthat phrasal patterns extracted from a text spanpair provide useful evidence in the relation clas-sification.
For example, the pattern ?...
shouldhave done ...?
usually signals a contrast.
The au-thors combined word pairs with phrasal patterns,and conducted experiments with these two featureclasses to recognize implicit relations between ad-jacent sentences in a Japanese corpus.Both of these previous works have the short-coming of downgrading explicit relations to im-plicit ones by removing the explicit discourse con-nectives.
While this is a good approach to auto-matically create large corpora, natively implicit re-lations may be signaled in different ways.
The factthat explicit relations are explicitly signaled indi-cates that such relations need a cue to be unam-biguous to human readers.
Thus, such an artificialimplicit relation corpus may exhibit marked dif-ferences from a natively implicit one.
We validatethis claim later in this work.Wellner et al (2006) used multiple knowledgesources to produce syntactic and lexico-semanticfeatures, which were then used to automaticallyidentify and classify explicit and implicit dis-course relations in the Discourse Graphbank (Wolfand Gibson, 2005).
Their experiments show thatdiscourse connectives and the distance betweenthe two text spans have the most impact, andevent-based features also contribute to the perfor-mance.
However, their system may not work wellfor implicit relations alone, as the two most promi-nent features only apply to explicit relations: im-plicit relations do not have discourse connectivesand the two text spans of an implicit relation areusually adjacent to each other.The work that is most related to ours is theforthcoming paper of Pitler et al (2009) on im-plicit relation classification on the second ver-sion of the PDTB.
They performed classificationof implicit discourse relations using several lin-guistically informed features, such as word polar-ity, verb classes, and word pairs, showing perfor-mance increases over a random classification base-line.3 Overview of the Penn DiscourseTreebankThe Penn Discourse Treebank (PDTB) is a dis-course level annotation (Prasad et al, 2008) overthe one million word Wall Street Journal corpus.The PDTB adopts the predicate-argument view ofdiscourse relations, where a discourse connective(e.g., because) is treated as a predicate that takestwo text spans as its arguments.
The argumentthat the discourse connective structurally attachesto is called Arg2, and the other argument is calledArg1.
The PDTB provides annotations for explicitand implicit discourse relations.
By definition, anexplicit relation contains an explicit discourse con-nective.
In the PDTB, 100 explicit connectives areannotated.
Example 1 shows an explicit Contrastrelation signaled by the discourse connective but.The last line shows the relation type and the file inthe PDTB from which the example is drawn.
(1) Arg1: In any case, the brokerage firms areclearly moving faster to create new ads thanthey did in the fall of 1987.Arg2: But it remains to be seen whethertheir ads will be any more effective.
(Contrast - wsj 2201)In the PDTB, implicit relations are constrainedby adjacency: only pairs of adjacent sentenceswithin paragraphs are examined for the existenceof implicit relations.
When an implicit relationwas inferred by an annotator, he/she inserted animplicit connective that best reflects the relation.Example 2 shows an implicit relation, where theannotator inferred a Cause relation and inserted animplicit connective so (i.e., the original text doesnot include so).
The text in the box (he says)shows the attribution, i.e., the agent that expressesthe arguments.
The PDTB provides annotation forthe attributions and supplements of the arguments.
(2) Arg1: ?A lot of investor confidence comesfrom the fact that they can speak to us,?he says .Arg2: [so] ?To maintain that dialogue isabsolutely crucial.?
(Cause - wsj 2201)344The PDTB provides a three level hierarchy ofrelation tags for its annotation.
The first levelconsists of four major relation classes: Temporal,Contingency, Comparison, and Expansion.
Foreach class, a second level of types is defined to pro-vide finer semantic distinctions.
A third level ofsubtypes is defined for only some types to specifythe semantic contribution of each argument.
Rela-tion classes and types in the PDTB are reproducedin the first two columns of Table 1.We focus on implicit relation classification ofthe Level 2 types in the PDTB, as we feel thatLevel 1 classes are too general and coarse-grainedfor downstream applications, while Level 3 sub-types are too fine-grained and are only providedfor some types.
Table 1 shows the distribution ofthe 16 Level 2 relation types of the implicit rela-tions from the training sections, i.e., Sections 2?
21.
As there are too few training instances forCondition, Pragmatic Condition, Pragmatic Con-trast, Pragmatic Concession, and Exception, weremoved these five types from further considera-tion.
We thus use the remaining 11 Level 2 typesin our work.
The initial distribution and adjusteddistribution are shown in the last two columns ofthe table.
We see that the three predominant typesare Cause (25.63%), Conjunction (22.25%), andRestatement (19.23%).Level 1 Class Level 2 Type Training % Adjusted %instancesTemporal Asynchronous 583 4.36 4.36Synchrony 213 1.59 1.59Contingency Cause 3426 25.61 25.63Pragmatic 69 0.52 0.52CauseCondition 1 0.01 ?Pragmatic 1 0.01 ?ConditionComparison Contrast 1656 12.38 12.39Pragmatic 4 0.03 ?ContrastConcession 196 1.47 1.47Pragmatic 1 0.01 ?ConcessionExpansion Conjunction 2974 22.24 22.25Instantiation 1176 8.79 8.80Restatement 2570 19.21 19.23Alternative 158 1.18 1.18Exception 2 0.01 ?List 345 2.58 2.58Total 13375Adjusted total 13366Table 1: Distribution of Level 2 relation types ofimplicit relations from the training sections (Sec.2 ?
21).
The last two columns show the initialdistribution and the distribution after removing thefive types that have only a few training instances.4 MethodologyOur implicit relation classifier is built using super-vised learning on a maximum entropy classifier.As such, our approach processes the annotated ar-gument pairs into binary feature vectors suitablefor use in training a classifier.
Attributions andsupplements are ignored from the relations, as oursystem does not make use of them.
We chose thefollowing four classes of features as they representa wide range of information ?
contextual, syntac-tic, and lexical ?
that have been shown to be help-ful in previous works and tasks.
We now discussthe four categories of features used in our frame-work.X'XM X'XMX'XM X'XMX'XM X'XM X'XMX XXXX'XMFigure 1: Two types of discourse dependencystructures.
Top: fully embedded argument, bot-tom: shared argument.Contextual Features.
Lee et al (2006) showedthat there are a variety of possible dependenciesbetween pairs of discourse relations: independent,fully embedded argument, shared argument, prop-erly contained argument, pure crossing, and par-tially overlapping argument.
They argued that thelast three cases ?
properly contained argument,pure crossing, and partially overlapping argument?
can be factored out by appealing to discourse no-tions such as anaphora and attribution.
Moreover,we also observed from the PDTB corpus that fullyembedded argument and shared argument are themost common patterns, which are shown in Fig-ure 1.
The top portion of Figure 1 shows a casewhere relation r1is fully embedded in Arg1 of re-lation r2, and the bottom portion shows r1and r2sharing an argument.
We model these two patternsas contextual features.
We believe that these dis-course dependency patterns between a pair of ad-jacent relations are useful in identifying the rela-tions.
For example, if we have three items in a list,according to the PDTB binary predicate-argumentdefinitions, there will be a List relation between345the first item and the second item, and another Listrelation between the previous List relation and thethird item, where the previous List relation is fullyembedded in Arg1 of the current List relation.
Aswe are using the gold standard argument segmen-tation from the PDTB, we can extract and leveragethese dependency patterns.
For each relation curr,we use the previous relation prev and the next re-lation next as evidence to fire six binary features,as defined in Table 2.Note that while curr is an implicit relation tobe classified, both prev and next can be implicit orexplicit relations.
Pitler et al (2008) showed thatthe type of a relation sometimes correlates to thetype of its adjacent relation.
When the adjacentrelation is explicit, its type may be suggested byits discourse connective.
Thus we include anothertwo groups of contextual features representing theconnectives of prev and next when they are explicitrelations.Fully embedded argument:prev embedded in curr.Arg1next embedded in curr.Arg2curr embedded in prev.Arg2curr embedded in next.Arg1Shared argument:prev.Arg2 = curr.Arg1curr.Arg2 = next.Arg1Table 2: Six contextual features derived from twodiscourse dependency patterns.
curr is the relationwe want to classify.Constituent Parse Features.
Research workfrom other NLP areas, such as semantic role la-beling, has shown that features derived from syn-tactic trees are useful in semantic understanding.Such features include syntactic paths (Jiang andNg, 2006) and tree fragments (Moschitti, 2004).From our observation of the PDTB relations, syn-tactic structure within one argument may constrainthe relation type and the syntactic structure ofthe other argument.
For example, the constituentparse structure in Figure 2(a) usually signals anAsynchronous relation when it appears in Arg2,as shown in Example 3, while the structure in Fig-ure 2(b) usually acts as a clue for a Cause relationwhen it appears in Arg1, as shown in Example 4.In both examples, the lexicalized parts of the parsestructure are bolded.
(3) Arg1: But the RTC also requires ?working?capital to maintain the bad assets of thriftsthat are soldArg2: [subsequently] That debt would bepaid off as the assets are sold(Asynchronous - wsj 2200)(4) Arg1: It would have been too late to thinkabout on Friday.Arg2: [so] We had to think about it ahead oftime.
(Cause - wsj 2201)(a)SBARINasS.
.
.
(b)VPMD VPVBhaveVPVBNbeenADJP PPFigure 2: (a) constituent parse in Arg2 of Example3, (b) constituent parse in Arg1 of Example 4.S-TPC-1NP-SBJPRPWeVPVBDhadNPNPDTnoNNoperatingNNSproblemsADVPINatDTallFigure 3: A gold standard subtree for Arg1 of animplicit discourse relation from wsj 2224.For Arg1 and Arg2 of each relation, we extractthe corresponding gold standard syntactic parsetrees from the corpus.
As an argument can be asingle sentence, a clause, or multiple sentences,this results in a whole parse tree, parts of a parsetree, or multiple parse trees.
From these parses,we extract all possible production rules.
Althoughthe structures shown in Figure 2 are tree frag-ments, tree fragments are not extracted as produc-tion rules act as generalization of tree fragments.As an example, Figure 3 shows the parse tree forArg1 of an implicit discourse relation from the textwsj 2224.
As Arg1 is a clause, the extracted tree346is a subtree.
We then collect all production rulesfrom this subtree, with function tags (e.g., SBJ)removed from internal nodes.
POS tag to wordproduction rules are collected as well.
The result-ing production rules include ones such as: S ?NP VP, NP?
PRP, PRP?
?We?, etc.
Each pro-duction rule is represented as three binary featuresto check whether this rule appears in Arg1, Arg2,and both arguments.Dependency Parse Features.
We also experi-mented with features extracted from dependencytrees of the arguments.
We used the Stanford de-pendency parser (de Marneffe et al, 2006), whichtakes in a constituent parse tree and produces a de-pendency tree.
Again, for an argument, we maycollect a whole dependency tree, parts of a tree,or multiple trees, depending on the span of the ar-gument.
The reason for using dependency treesis that they encode additional information at theword level that is not explicitly present in the con-stituent trees.
From each tree, we collect all wordswith the dependency types from their dependents.Figure 4 shows the dependency subtree for thesame example in Figure 3, from which we col-lect three dependency rules: ?had??
nsubj dobj,?problems??
det nn advmod, ?at??
dep.Note that unlike the constituent parse featureswhich are guaranteed to be accurate (as they areextracted from the gold parses of the corpus), thedependency parses occasionally contain errors.
Aswith the constituent parse features, each depen-dency rule is represented as three binary featuresto check whether it appears in Arg1, Arg2, andboth arguments.Wehadnsubjproblemsdobjno operatingdet nn atadvmodalldepFigure 4: A dependency subtree for Arg1 of animplicit discourse relation from wsj 2224.Lexical Features.
Marcu and Echihabi (2002)demonstrated that word pairs extracted from therespective text spans are a good signal of thediscourse relation between arguments.
Thus wealso consider word pairs as a feature class.
Westemmed and collected all word pairs from Arg1and Arg2, i.e., all (wi, wj) where wiis a wordfrom Arg1 and wja word from Arg2.
Unlike theirstudy, we limit the collection of word pair statis-tics to occurrences only in the PDTB corpus.4.1 Feature SelectionFor the collection of production rules, dependencyrules, and word pairs, we used a frequency cutoffof 5 to remove infrequent features.
From the im-plicit relation dataset of the training sections (i.e.,Sec.
2 ?
21), we extracted 11,113 production rules,5,031 dependency rules, and 105,783 word pairsin total.
We applied mutual information (MI) tothese three classes of features separately, resultingin three ranked lists.
A feature f has 11 MI valueswith all 11 types (for example,MI(f, Cause) andMI(f,Restatement)), and we used the MI withthe highest value for a feature to select features.
Inour experiments, the top features from the lists areused in the training and test phases.5 ExperimentsWe experimented with a maximum entropy clas-sifier from the OpenNLP MaxEnt package usingvarious combinations of features to assess their ef-ficacy.
We used PDTB Sections 2 ?
21 as our train-ing set and Section 23 as the test set, and only usedthe implicit discourse relations.In the PDTB, about 2.2% of the implicit rela-tions are annotated with two types, as shown inExample 7 in Section 6.
During training, a relationthat is annotated with two types is considered astwo training instances, each with one of the types.During testing, such a relation is considered onetest instance, and if the classifier assigns either ofthe two types, we consider it as correct.
Thus, thetest accuracy is calculated as the number of cor-rectly classified test instances divided by the totalnumber of test instances.In our work, we use the majority class asthe baseline, where all instances are classified asCause.
This yields an accuracy of 26.1% on thetest set.
A random baseline yields an even loweraccuracy of 9.1% on the test set.5.1 Results and AnalysisTo check the efficacy of the different featureclasses, we trained individual classifiers on all fea-tures within a single feature class (Rows 1 to 4in Table 3) as well as a single classifier trained347with all features from all feature classes (Row 5).Among the four individual feature classes, produc-tion rules and word pairs yield significantly betterperformance over the baseline with p < 0.01 andp < 0.05 respectively, while context features per-form slightly better than the baseline.# Production # Dependency # Word Context Acc.rules rules pairsR1 11,113 ?
?
No 36.7%R2 ?
5,031 ?
No 26.0%R3 ?
?
105,783 No 30.3%R4 ?
?
?
Yes 28.5%R5 11,113 5,031 105,783 Yes 35.0%Table 3: Classification accuracy with all featuresfrom each feature class.
Rows 1 to 4: individualfeature class; Row 5: all feature classes.Interestingly, we noted that the performancewith all dependency rules is slightly lower thanthe baseline (Row 2), and applying all featureclasses does not yield the highest accuracy (Row5), which we suspected were due to noise.
To con-firm this, we employed MI to select the top 100production rules and dependency rules, and the top500 word pairs (as word pairs are more sparse).We then repeated the same set of experiments, asshown in Table 4 (Row 4 of this table is repeatedfrom Table 3 for consistency).
With only the topfeatures, production rules, dependency rules, andword pairs all gave significant improvement overthe baseline with p < 0.01.
When we used allfeature classes, as in the last row, we obtained thehighest accuracy of 40.2%.# Production # Dependency # Word Context Acc.rules rules pairsR1 100 ?
?
No 38.4%R2 ?
100 ?
No 32.4%R3 ?
?
500 No 32.9%R4 ?
?
?
Yes 28.5%R5 100 100 500 Yes 40.2%Table 4: Classification accuracy with toprules/word pairs for each feature class.
Rows 1to 4: individual feature class; Row 5: all featureclasses.Table 4 also validates the pattern of predictive-ness of the feature classes: production rules con-tribute the most to the performance individually,followed by word pairs, dependency rules, and fi-nally, context features.
A natural question to ask iswhether any of these feature classes can be omit-ted to achieve the same level of performance asthe combined classifier.
To answer this question,we conducted a final set of experiments, in whichwe gradually added in feature classes in the or-der of their predictiveness (i.e., production rulesword pairs  dependency rules  context fea-tures), with results shown in Table 5.
These resultsconfirm that each additional feature class indeedcontributes a marginal performance improvement,(although it is not significant) and that all featureclasses are needed for optimal performance.# Production # Dependency # Word Context Acc.rules rules pairsR1 100 ?
?
No 38.4%R2 100 ?
500 No 38.9%R3 100 100 500 No 39.0%R4 100 100 500 Yes 40.2%Table 5: Accuracy with feature classes graduallyadded in the order of their predictiveness.Note that Row 3 of Table 3 corresponds toMarcu and Echihabi (2002)?s system which ap-plies only word pair features.
The difference isthat they used a Na?
?ve Bayes classifier while weused a maximum entropy classifier.
As we didnot implement their Na?
?ve Bayes classifier, wecompare their method?s performance using the re-sult from Table 3 Row 3 with ours from Table 5Row 4, which shows that our system significantly(p < 0.01) outperforms theirs.Level 2 Type Precision Recall F1Count intest setAsynchronous 0.50 0.08 0.13 13Synchrony ?
?
?
5Cause 0.39 0.76 0.51 200Pragmatic Cause ?
?
?
5Contrast 0.61 0.09 0.15 127Concession ?
?
?
5Conjunction 0.30 0.51 0.38 118Instantiation 0.67 0.39 0.49 72Restatement 0.48 0.27 0.35 190Alternative ?
?
?
15List 0.80 0.13 0.23 30All (Micro Avg.)
0.40 0.40 0.40 780Table 6: Recall, precision, F1, and counts for 11Level 2 relation types.
???
indicates 0.00.Table 6 shows the recall, precision, and F1mea-sure for the 11 individual Level 2 relation typesin the final experiment set up (Row 4 from Ta-ble 5).
A point worth noting is that the classi-fier labels no instances of the Synchrony, Prag-matic Cause, Concession, and Alternative relationtypes.
The reason is that the percentages for thesefour types are so small that the classifier is highlyskewed towards the other types.
From the distribu-tion shown in Table 1, there are just 4.76% trainingdata for these four types, but 95.24% for the re-maining seven types.
In fact, only 30 test instancesare labeled with these four types, as shown in thelast column of Table 6.
As Cause is the most pre-348dominant type in the training data, the classifiertends to label uncertain relations as Cause, thusgiving Cause high recall but low precision.
We seethat the F measures correlate well with the train-ing data frequency, thus we hypothesize that ac-curacy may improve if more training data for lowfrequency relations can be provided.Our work differs from that of (Pitler et al, 2009)in that our system performs classification at themore fine-grained Level 2 types, instead of thecoarse-grained Level 1 classes.
Their system ap-plies a Na?
?ve Bayes classifier whereas our systemuses a maximum entropy classifier, and the sets offeatures used are also different.
In addition, thedata set of (Pitler et al, 2009) includes EntReland AltLex, which are relations in which an im-plicit connective cannot be inserted between ad-jacent sentences, whereas ours excludes EntReland AltLex.6 Discussion: Why are implicit discourserelations difficult to recognize?In the above experiments, we have shown that byusing the four feature classes, we are able to in-crease the classification accuracy from 26.1% ofthe majority baseline to 40.2%.
Although we feela 14.1 absolute percentage improvement is a solidresult, an accuracy of 40% does not allow down-stream NLP applications to trust the output of sucha classification system.To understand the difficulties of the task moredeeply, we analyzed individual training and val-idation data pairs, from which we were able togeneralize four challenges to automated implicitdiscourse relation recognition.
We hope that thisdiscussion may motivate future work on implicitdiscourse relation recognition.Ambiguity.
There is ambiguity among the rela-tions.
For example, we notice that a lot of Contrastrelations are mistakenly classified as Conjunction.When we analyzed these relations, we observedthat Contrast and Conjunction in the PDTB anno-tation are very similar to each other in terms ofwords, syntax, and semantics, as Examples 5 and6 show.
In both examples, the same antonymousverb pair is used (fell and rose), different subjectsare mentioned in Arg1 and Arg2 (net and revenuein the first example, and net and sales in the sec-ond), and these subjects are all compared to likeitems from the previous year.
Moreover, the im-plicit discourse connective given by the annotatorsis while in both cases, which is an ambiguous con-nective as shown in (Miltsakaki et al, 2005).
(5) Arg1: In the third quarter, AMR said, netfell to $137 million, or $2.16 a share, from$150.3 million, or $2.50 a share.Arg2: [while] Revenue rose 17% to $2.73billion from $2.33 billion a year earlier.
(Contrast - wsj 1812)(6) Arg1: Dow?s third-quarter net fell to $589million, or $3.29 a share, from $632 million,or $3.36 a share, a year ago.Arg2: [while] Sales in the latest quarter rose2% to $4.25 billion from $4.15 billion a yearearlier.
(Conjunction - wsj 1926)Relation ambiguity may be ameliorated if an in-stance is analyzed in context.
However, accordingto the PDTB annotation guidelines, if the annota-tors could not disambiguate between two relationtypes, or if they felt both equally reflect their un-derstanding of the relation between the arguments,they could annotate two types to the relation.
Inthe whole PDTB corpus, about 5.4% of the ex-plicit relations and 2.2% of the implicit relationsare annotated with two relation types.
Example 7is such a case where the implicit connective mean-while may be interpreted as expressing a Conjunc-tion or Contrast relation.
(7) Arg1: Sales surged 40% to 250.17 billionyen from 178.61 billion.Arg2: [meanwhile] Net income rose 11% to29.62 billion yen from 26.68 billion.
(Conjunction; Contrast - wsj 2242)Inference.
Sometimes inference and a knowl-edge base are required to resolve the relation type.In Example 8, to understand that Arg2 is a re-statement of Arg1, we need a semantic mechanismto show that either the semantics of Arg1 infersthat of Arg2 or the other way around.
In the be-low example, I had calls all night long infers Iwas woken up every hour semantically, as shownin: receive call(I) ?
duration(all night) ?woken up(I) ?
duration(every hour).
(8) Arg1: ?I had calls all night long from theStates,?
he said.Arg2: ?
[in fact] I was woken up every hour?
1:30, 2:30, 3:30, 4:30.?
(Restatement - wsj 2205)349In fact, most relation types can be representedusing formal semantics (PDTB-Group, 2007), asshown in Table 7, where |Arg1| and |Arg2| repre-sent the semantics extracted from Arg1 and Arg2,respectively.
This kind of formal semantic reason-ing requires a robust knowledge base, which is stillbeyond our current technology.Relation type Semantic representationCause |Arg1| ?
|Arg2| ?
|Arg2| ?
|Arg1|Concession A ?
C ?
B ?
?Cwhere A ?
|Arg1|, B ?
|Arg2|Instantiation exemplify(|Arg2|, ?x.x ?
E)where E = extract(|Arg1|)Restatement |Arg1| ?
|Arg2| ?
|Arg1| ?
|Arg2|Alternative |Arg1| ?
|Arg2| ?
|Arg1| ?
|Arg2|Table 7: Some examples of relation types withtheir semantic representations, as taken from(PDTB-Group, 2007).Context.
PDTB annotators adopted the Mini-mality Principle in argument selection, accordingto which they only included in the argument theminimal span of text that is sufficient for the in-terpretation of the relation.
While the context isnot necessary to interpret the relation, it is usuallynecessary to understand the meaning of the argu-ments.
Without an analysis of the context, Arg1and Arg2 may seem unconnected, as the follow-ing example shows, where the meaning of Arg1 ismostly derived from its previous context (i.e., WestGerman ... technical reactions).
(9) Prev.
Context: West German EconomicsMinister Helmut Haussmann said, ?In myview, the stock market will stabilizerelatively quickly.
There may be one or otherpsychological or technical reactions,Arg1: but they aren?t based onfundamentals.Arg2: [in short] The economy of WestGermany and the EC European Communityis highly stable.?
(Conjunction - wsj 2210)Sometimes the range of the context may eas-ily extend to the whole text, which would requirea system to possess a robust context modelingmechanism.
In Example 10, in order to realizethe causal relation between Arg2 and Arg1, wepossibly need to read the whole article and under-stand what was happening: the machinist unionwas having a strike and the strike prevented mostof its union members from working.
(10) Arg1: And at the company?s Wichita, Kan.,plant, about 2,400 of the 11,700 machinistsstill are working, Boeing said.Arg2: [because] Under Kansasright-to-work laws, contracts cannot requireworkers to be union members.
(Cause - wsj 2208)World Knowledge.
Sometimes even contextmodeling is not enough.
We may also need worldknowledge to understand the arguments and henceto interpret the relation.
In the following example,from the previous sentence of Arg1, it is reportedthat ?the Senate voted to send a delegation of con-gressional staffers to Poland to assist its legisla-ture?, and this delegation is viewed as a ?gift?
inArg1.
It is suggested in Arg2 that the Poles mightview the delegation as a ?Trojan Horse?.
Here weneed world knowledge to understand that ?TrojanHorse?
is usually applied as a metaphor for a per-son or thing that appears innocent but has harm-ful intent, and hence understand that Arg2 poses acontrasting view of the delegation as Arg1 does.
(11) Arg1: Senator Pete Domenici calls thiseffort ?the first gift of democracy?.Arg2: [but] The Poles might do better toview it as a Trojan Horse.
(Contrast - wsj 2237)These four classes of difficulties ?
ambiguitybetween relations, inference, contextual modeling,and world knowledge ?
show that implicit dis-course relation classification needs deeper seman-tic representations, more robust system design,and access to more external knowledge.
These ob-stacles may not be restricted to recognizing im-plicit relations, but are also applicable to other re-lated discourse-centric tasks.7 ConclusionWe implemented an implicit discourse relationclassifier and showed initial results on the recentlyreleased Penn Discourse Treebank.
The featureswe used include the modeling of the context of re-lations, features extracted from constituent parsetrees and dependency parse trees, and word pairfeatures.
Our classifier achieves an accuracy of40.2%, a 14.1% absolute improvement over thebaseline.
We also conducted a data analysis anddiscussed four challenges that need to be ad-dressed in future to overcome the difficulties ofimplicit relation classification in the PDTB.350ReferencesMarie-Catherine de Marneffe, Bill MacCartney, andChristopher D. Manning.
2006.
Generating typeddependency parses from phrase structure parses.In Proceedings of the Fifth International Confer-ence on Language Resources and Evaluation (LREC2006), pages 449?454.Jerry R. Hobbs.
1990.
Literature and cognition.
InCSLI Lecture Notes Number 21.
CSLI Publications.Zheng Ping Jiang and Hwee Tou Ng.
2006.
Semanticrole labeling of NomBank: A maximum entropy ap-proach.
In Proceedings of the 2006 Conference onEmpirical Methods in Natural Language Processing(EMNLP 2006), pages 138?145, Sydney, Australia.Alistair Knott and Ted Sanders.
1998.
The classifica-tion of coherence relations and their linguistic mark-ers: An exploration of two languages.
Journal ofPragmatics, 30(2):135?175.Alex Lascarides and Nicholas Asher.
1993.
Temporalinterpretation, discourse relations and commonsenseentailment.
Linguistics and Philosophy, 16(5):437?493.Alan Lee, Rashmi Prasad, Aravind Joshi, Nikhil Di-nesh, and Bonnie Webber.
2006.
Complexity ofdependencies in discourse: Are dependencies in dis-course more complex than in syntax?
In Proceed-ings of the 5th International Workshop on Treebanksand Linguistic Theories, Prague, Czech Republic,December.William C. Mann and Sandra A. Thompson.
1988.Rhetorical Structure Theory: Toward a functionaltheory of text organization.
Text, 8(3):243?281.Daniel Marcu and Abdessamad Echihabi.
2002.
Anunsupervised approach to recognizing discourse re-lations.
In Proceedings of the 40th Annual Meet-ing of the Association for Computational Linguistics(ACL 2002), pages 368?375, Morristown, NJ, USA.Daniel Marcu.
1998.
A surface-based approach toidentifying discourse markers and elementary tex-tual units in unrestricted texts.
In Proceedings of theCOLING-ACL 1998 Workshop on Discourse Rela-tions and Discourse Markers, pages 1?7, Montreal,Canada, August.Eleni Miltsakaki, Nikhil Dinesh, Rashmi Prasad, Ar-avind Joshi, and Bonnie Webber.
2005.
Experi-ments on sense annotations and sense disambigua-tion of discourse connectives.
In Proceedings of theFourth Workshop on Treebanks and Linguistic The-ories (TLT2005), Barcelona, Spain, December.Alessandro Moschitti.
2004.
A study on convolu-tion kernels for shallow semantic parsing.
In Pro-ceedings of the 42nd Annual Meeting of the Asso-ciation for Computational Linguistics (ACL 2004),Barcelona, Spain.PDTB-Group, 2007.
The Penn Discourse Treebank 2.0Annotation Manual.
The PDTB Research Group,December.Emily Pitler, Mridhula Raghupathy, Hena Mehta, AniNenkova, Alan Lee, and Aravind Joshi.
2008.
Eas-ily identifiable discourse relations.
In Proceedingsof the 22nd International Conference on Compu-tational Linguistics (COLING 2008), Manchester,UK, August.Emily Pitler, Annie Louis, and Ani Nenkova.
2009.Automatic sense prediction for implicit discourserelations in text.
To appear in Proceedings of theJoint Conference of the 47th Annual Meeting of theAssociation for Computational Linguistics and the4th International Joint Conference on Natural Lan-guage Processing of the Asian Federation of NaturalLanguage Processing (ACL-IJCNLP 2009).Rashmi Prasad, Nikhil Dinesh, Alan Lee, Eleni Milt-sakaki, Livio Robaldo, Aravind Joshi, and Bon-nie Webber.
2008.
The Penn Discourse Treebank2.0.
In Proceedings of the 6th International Confer-ence on Language Resources and Evaluation (LREC2008).Manami Saito, Kazuhide Yamamoto, and SatoshiSekine.
2006.
Using phrasal patterns to iden-tify discourse relations.
In Proceedings of the Hu-man Language Technology Conference of the NorthAmerican Chapter of the Association for Computa-tional Linguistics (HLT-NAACL 2006), pages 133?136, New York, USA, June.Bonnie Webber.
2004.
D-LTAG: Extending lex-icalized TAG to discourse.
Cognitive Science,28(5):751?779, September.Ben Wellner, James Pustejovsky, Catherine Havasi,Anna Rumshisky, and Roser Sauri.
2006.
Clas-sification of discourse coherence relations: An ex-ploratory study using multiple knowledge sources.In Proceedings of the 7th SIGdial Workshop on Dis-course and Dialogue, Sydney, Australia, July.Florian Wolf and Edward Gibson.
2005.
Representingdiscourse coherence: a corpus-based analysis.
InProceedings of the 20th International Conference onComputational Linguistics (COLING 2004), pages134?140, Morristown, NJ, USA.351
