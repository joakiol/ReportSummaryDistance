CONTEXT-FRKFNESS OF THE LANGUAGE ACCEPTEDBY MARCUS' PARSERR.
Nozohoor.-FarshJSchool of Computing Sdence.
Simon Fraser Unlversit3"Buruaby.
British Columbia, Canada VSA 156ABSTRACTIn this paper, we prove that the set of sentences parsedby M~cus' parser constitutes a context-free language.
Theproof is carried out by construing a deterministic pushdownautomaton that recognizes those smngs of terminals that areparsed successfully by the Marcus pa~er.1.
In~u~onWhile Marcus \[4\] does not use phrase mucture rules asbase grammar in his parser, he points out some correspondencebetween the use of a base rule and the way packets areacuvated to parse a constmcu Chamlak \[2\] has also assumedsome phrase structure base ~ in implementing a Marcusstyle parser that handles ungrammatical situations.
Howeverneither has suggested a type for such a grammar or thelanguage accepted by the parser.
Berwick \[1\] relates Marcus'parser to IX(k.0 context-free grammars.
Similarly, in \[5\] and\[6\] we have related this parser to LRRL(k) grammars.Inevitably.
these raise the question of whether the s~s=g setparsed by Marcus' parser is a context-free language.In this paper, we provide the answer for the aboveque'.~/on by showing formally that the set of sentences acceptedby Marcus' parser constitutes a context-free language.
Ourproof is based on simulating a simplified version of the parserby a pushdown automaton.
Then some modificauons of thePDA are suggested in order to ascertain that Marcus' parser.regardless of the s~a~mres it puts on the input sentences,accepts a context-free set of sentences.
Furthermore.
since theresulung PDA is a deterministic one.
it conRrms thedeterrmnism of the language parsed by this parser.
Such aproof also provides a justification for a.~uming a context-freeunderlying grammar in automatic generation of Marcus typeparsers as discussed in \[5\] and \[6\].2.
Assumption of a finite size bufferMarcus' parser employs two data su'ucmres: a pushdownstack which holds the constructs yet to be completed, and afinite size buffer which holds the lookaheads.
The iookaheadsare completed constructs as well as bare terminals.
Variousoperations are used to manipulate these data struaures.
An"attentiun shift" operation moves a window of size k-3 to agiven position on the buffer.
This occurs in pazsing someconstructs, e.g., some NP's, in par-dcul~ when a buffer nodeother than the first indicates start of an NP.
"Restore buffer"restores the window to its previous position before the last"attention shift'.
Marcus suggests that the movements of thewindow can be achieved by employing a stack of displacementsfrom the beginning of the buffer, and in general he suggeststhat the buffer could be unbounded on the fight.
But inpractice, he notes that he has not found a need for more thanfive ceils, and PARSIFAL does not use a stack to implementthe window or virtual buffer.A comment regar~ng an infinite buffer is in place here.An unbounded buffer would yield a passer with two stacks.Generally.
such parsers characterize context-sensitive languagesand are equivalent to linear bounded automa~ They have alsobeen used for pa.mng some context-free languages.
In this rolethey may hide the non-determinism of a context-free languageby storing an unbounded number of lonkaheads.
For example.LR-regular \[3\], BCP(m,n), LR(k.-) and FSPA(k) parsers \[8\] aresuch parsers.
Furthermore, basing parsing decisions on thewhole left contexts and k Iookaheads in them has often resultedin defining classes of context-free (context-sensitive) grammarswith undecidable membership.
LR-reguh~.
IX(L=) andFSPA(k) are such classes.
The class of GLRRL(k)  grammarswith unbounded buffer (defined in \[5\]) seems to be the knownexception in this category that has decidable membership.Waiters \[9\] considers context--sensitive grammars withdeterministic two--stack parsers and shows the undeddabiliD' ofthe membership problem for the class of such grammars.In this paper we assume that the.
buffer in a Marcusstyle parser can only be of a finite size b (e.g.. b=5 in Marcus'parser).
The limitation on the size of the buffer has twoimportant consequences.
First.
it allows a proof for thecontext-freeness of the language to be given in terms of aPDA.
Second, it facilitates the design of an effecuve algorithmfor automatic generation of a parser.
(However.
we should addthat: 1- some Marcus style parsers that use an unboundedbuffer in a consu'ained way.
e.g., by resuming the window tothe kr i shtmost  elements of the buffer, are equivalent topushdown automata.
2- Marcus style parsers with unboundedbuffer, similar to GLRRL parsers, can still be constructed forthose languages which ale known to be context-free.)1173.
Simplified parserA few reswictions on Marcus' parser will prove to beconvenient in outli-i- 5 a proof for the context-freene~ of thelanguage accepted by it.
(i) Prohibition of features:Marcus allows syntactic nodes to have features containing thegrammatical properties of the constituents that they represenLFor implementation purposes, the type of a node is alsoconsidered as a feature.
However, here a distinction will bemade between this feature and others.
We consider the type ofa node and the node itself to convey the same concept (ke., anon-terminal symbol).
Any other feature is disailowecL InMarcus' parser, the binding of traces is also implementedthrough the use of features.
A trace is a null derivingnon-termimJ (e.g., an NP) that has a feature pointing toanother node, Le., the binding of the trace.
We should mess atthe outset that Marcus' parser outputs the annotated surfacesu'ucture of an utterance and traces are intended to be used bythe semantic component to recover the underlyingpredicate/argument structure of the utterance.
Therefore onecould put aside the issue of trace registers without affe~ng anyargument that deals with the strings accepted by the parser, i.e.,frontiers of surface su'ucmre~ We will reintroduce the featuresin the generalized form of PDA for the completeness of thesimulation.fib Non-acfessibilit~' of the oar~?
tree;Although most of the information about the left context iscaptured through the use of the packeting mechanism inMarcus' parser, he nevertheless allows limited access to thenodes of the partial parse tree (besides the current active node)in the ac6on parts of the grammar ules.
In some rules, afterthe initial pattern roaches, conditional clauses test for someproperty of the parse tree.
These tests are limited to the leftdaughters, of the current active node and the last cyclic node(NP or S) on the stuck and its descendants.
It is plausible toeliminate tree accessibility entirely through adding new packetsand/or simple flags.
In the simplified parser, access to thepartial parse tree is disallowed.
However.
by modifying thestack symbols of the.
PDA we will later show that the proof ofcontext-freeness carries over to the general parser (that testslimited nodes of parse tree).
(iii) Atomic actions:Action segments in Marcus' grammar ules may contain a seriesof basic operations.
To simplify the mnulation, we assume thatin the simplified parser actions are atomic.
Breakdown of acompound action into atomic actions can be achieved bykeeping the first operation in the original rule and inuoduclngnew singleton packets containing a default pattern and aremaining operation in the a~on parx These packets willsuccessively dea~vate themselves and activate the next packetmuch like "run <rule> next"s in PIDGIN.
The last packet willactivate the first if the original rule leaves the packet stillactive.
Therefore in the simplified parser action segments are ofthe following forms:(1) Activate packetsl; \[deactivate packets2\].
(2) Deactivate packets1; \[a~vate packets2\].
(3) Attach ith; \[deactivate packetsl\]: \[activate packets2\].
(4) \[Deactivate packetsl\]: create node; activate packets2.
(5) \[Deactivate packets1\]; cattach node: activate packets2.
~(6) Drop; \[deactivate packets\].\]; \[activate packets2\].
(7) Drop into buffer; \[deactivate packetsl\];\[activate packets2\].
(8) Attention shift (to ith cell); \[deactivate packetsl\];\[a~vate packe~\].
(9) Restore buffer; \[deactivate packetsl\]; \[activate packets2\].Note that "forward attention shift has no explicit command inMarcus' rules.
An "AS" prefix in the name of a rule impliesthe operation.
Backward window move has an explicit command"restore buffer'.
The square brackets in the above formsindicate optional parrs.
Feature assignment operations areignored for the obvious reason.4.
Simulation of the simplified parserIn this s~'fion we construct a PDA equivalent to thesimplified parser.
This PDA recognizes the same string set thatis accepted by the parser.
Roughly, the states of the PDA aresymbolized by the contents of the parser's buffer, and its stacksymbols are ordered pairs consisting of a non-terminai symbol(Le.. a stack symbol of the parser) and a set of packetsassociated with that symbolLet N be the set of non-terminal symbols, and Y" bethe set of terminal symbols of the pazser.
We assume the topS node, i.e., the root of a parse tree, is denoted by So, adistinct element of N. We also assume that a f'L"~I packet isadded to the PIIX3IN 8ranm~ar.
When the parsing of asentence is completed, the activation of this packet will causethe root node So to be dropped into the buffer, rather thanbeing left on the stack.
Furthermore, let P denote the set ofall packets of rules, and 2/' the powerset of P, and letP.P~,P2.- be elements of 2/'.
When a set of packets P is active,the pattern segments of the rules in these packets are comparedwith the current active node and contents of the viruml buffer(the window).
Then the action segment of a rule with highestpriority that matches is executed.
In effect the operation of theparser can be characterized by a partial function M from a~vepackets, current active node and contents of the window intoatondc actions, ke.M: 2~N(1)~fV (k) "* ACTIONS*Cauach" is used as a short notation for "create andattach'.118where V = N U ~, V(k)= V0+VI+_+Vk and AC"I'IONS is theset of atomic actions (1) - (9) discussed in the previous section.Now we can  consu-act the equivalent PDAA=(Q2.r,r,6,qo,Ze,f) in the following way.Z = the set of input symbols of A, is the set of terminalsymbols in the simplified parser.r = the set of stack symbols \[X.P\], where XeN is anon-terminal symbol of the parser and P is a set of packets.Q = the set of states of the PDA, each of the form<P~,P,,buffer>, where P~ and P~ are sets of packem.
In generalPt and P: are erupt3" sets except for those states that representdropping of a current a~ve node in the parser.
Pt is the setof packets to be activated explicitly after the drop operation,and P~ is the set of those packets that are deactivated.
"buffer"a suing in (\](1)v)(m)\[v(k),  where 0~r~b-k The lastvertical bar in "buffer" denotes the position of the currentwindow in the parser and those on the left indicate formerwindow positions.qo = the initial state = ?~,~X>, where X denotes the nullsuing.f = the final state = <~.e~S,>.
This state corresponds to theoutcome of an activation of the final packet in the parser.
Inthis way, i.e., by dropping the So node into the buffer, we canshow the acceptance of a sentence simultaneously by emptystack and by final state.Z, = the start symbol - \[S~,P~, where P, is the set of initialpackets, e.~, {SS-Start, C-Pool} in Marcus' parser.6 = the move function of the PDA, deemed in the followingway:Let P denote a set of active packets, X an active nodeand WIW2...W n, n < k, the content of a window.
Leto\[WIW2...WnS be a suing (representing the buffer) Such that:~ e (\[(1) V)(b-k) and " fleV where Length(o WlW2_WnB)~b.and a' is the suing a in which vertical bar's are erased.~on-),-move~; The non-X-moves of the PDA A correspond tobringing the input tokens into the buffer for examination bythe parser.
In Marcus' parser input tokens come to theattention of parser as they are needed.
Therefore.
we canassume that when a rule tests the contents of n cells of thewindow and there are fewer tokens in the buffer, terminalsymbols will be brought into the buffer.
More specifically, ifM(P,X,W!...W n) has a defined value (i.e., P contains a packetwith a rule that has pattern segment \[X\]\[W:t\]_\[Wn\]), then(<e ,o ~lwz _w~ >,w3.
~.\[ X.P\] ) =(<o.O.a\[WI-WjW3?I>.\[X.P\]) for all a. and for j = 0, _, n--1and Wj?l  eI'~.
),-moves: By 7,-moves, the PDA mimics the actions of theparser on successful matches.
Thus the ~-function on ), inputcorresponding to each individual atomic action is determinedaccording to one of the following cases,C~?
(I) and (2):If M(P,X,W!W2...W n) = "activate PI; deactivate P2" (or"deactivate P2; activate P\].
'), then6 (<~ ,~ ~\[ w I w 2.
.w n B >A.\[x.P\]) =(<?,?,o\[WIW2...Wn~>,\[X,(P U PI)--P2\]) for all a md B.Case (3):If M(P,X,WIW2_W:L-W n) = "attach ith (normally i is I);deactivate \])1; activate P2", then(<~ .0 ," I w1- .wt  .-.Wn B >A .\[x~'\] ) -(<?,?,alW1...W?_iW?+1..WnB>.
\[X,(P 11 P2)-PI\]) for allCases (4) and ($):If M(P,X,WI_Wn)= "deactivate P1; create/cattach Y; activateP2" then6 (<e .o a 1%..-.Wn B >A,\[ x,P\] ) =(<~, , ,~lwz.
.wna>.
\[x,P-P1\]\[Y~'2\]) for ~u o and B.Case (6):If M(P.X,W1...W n) = "drop; deactivate P1; activate P2", then6(<o,e,olW!_Wna>),,\[X.P\]) = (<P2,PlaIWI..WnS>,7`) for allo and B, and fm'thermore6 (<P2'PI'a\[ W1 -Wn B >,7`.\[Y,P'~ ) "(<~,~.
alWI..WnB>, \[Y.
(P' U P2)-PI\]) for all a and 8, andFe2  P. YeN.The latter move corresponds to the deactivation of the packetsPI and activation of the packets P2 that follow the dropping ofa curt'erie active node.Case (7):If M(P,X,WI-W n) = "drop into buffer; deactivate PI; activateP2", (where n < k), then6(<, .
, .
, Iw l .
.Wna>.x.
\ [xy\ ] )  - (<P2,PI,aIXWI..WnB>A) forall a and a, and furthermore6 (~2 a'x ~1 xwz.
-Wn a >A,\[ Y~q ) -(<o,e,~IXW~..Wna>, \[Y.
(P' U P2)-P:\].\]) for all a and B. andfor all P 'eY  and YeN.Case (8):If M(P.X.Wl..Wi...W n) = "shift attention to ith cell; deactivatePX; activate P2", then6 (<o ,~ ~l  w l - .w~ _w n a >A .ix.P\] ) =(<,.e,alwl.
.
.~w?_WnB>.
\[x,(P v P2)-P1\]) for all o and B.Case (9):If M(P,X,Wi...Wn)= "restore buffer; deactivate PI; a~vate P2",then6 (<o .o ,a ,I o ,\[ WX---Wn a >.X.\[ X.P\] ) =(<e,e,a,\[a,Wl...Wna>.
\[X (P U P2)-P1\]) for all a,,,,, and Ssuch that ?~ contains no vertical bar.Now from the construction of the PDA, it is obviousthat A accepts those strings of terminals that are parsedsuccessfully by the simplified parser.
The reader may note thatthe value of 6 is undefined for the "cases in whichM(X,P,Wt_Wn) has multiple values.
This accounts for the factthat Marcos' parser behaves in a deterministic way.Furthermore.
many of the states of A are unreachable.
This isdue to the way we constructed the PDA, in which weconsidered activation of every subset of P with any active node119and any Iookahead window.5.
Simulation of the general parserIt is possible to lift the resu'ictions on the simpLifiedparser by modifying the PDA.
Here.
we describe how Marcus'parser can be simulated by a generalized form of the PDA.fi) Non-atomic actions;The behaviour of the parser with non-atomic actions can bedescribed in terms of M'eM*.
a sequence of compositions ofM.
which in turn can be specified by a sequence 6' in 6".
(ii) Accef~ibilirv 9f desefndants of current 8ctive node.
andcurrent cyclic node:What parts of the partial parse tree are accessible in Marcus'parser seems to be a moot point Marcus \[4\] states"the parser can modify or directly examine exactly twonodes in the active node stack.., the current active nodeaad S or NP node closest to the bottom of gacl?...called the dominming cy?lic node.., or... current cyclicnode...
The parser ia aLso free to exanune thedescendants of these two nodex .... although the parsercannot modify them.
It does this by specif)~ng theexact path to the descendant i wishes to examine.
"The problem is that whether by descendants of thesetwo nodes, one means the immediate daughters, or descendantsat arbiu'ary levels.
It seems plausible that accessibility ofimmediate descendants i  sufficient.
To explore this idea, weneed to examine the reason behind pardal tree accesses inMarcus' parser.
It could be argued that tree accessibility servestwo purposes:(I) Examinin~ what daughters are attached to the current activenode considerably reduces the number of packet rules oneneeds to write.
(2) Examining the current cyclic node and its daughters servesthe purpose of binding traces.
Since transformations are appliedin each transformat/onal cycle to a single cyclic node, it seemsurmecessary to examine descendants of a cyclic node atarbitrarily lower levels.If Marcus' parser indeed accesses only the immediatedaughters (a brief examination of the sample grammar \[4\] doesnot seem to conwadict this): then the accessible part of the aparse tree can represented by a pair of nodes and theirdaughters.
Moreover, the set of such pairs of height--one treesare finite in a grammar.
Furthermore, if we extend the accessto the descendants of these two nodes down to a finite fixeddepth (which, in fact seems to have a supporting evidence fromX theory and C-command), we will still be able to representthe accessible pans of parse trees with a finite set of f'mitesequences of fixed height trees,A second interpretation of Marcus' statement is thatdescendants of the current cyclic node and current active nodeat arbium-ily lower levels are accessible to the parser.
However,in the presence of non--cyclic recussive constructs, the notion ofgiving an exact path to a descendant of the current a~ve orcurrent cyclic node would be inconceivable; in fact one canargue that in such a situation parsing cannot be achievedthrough a i'mite number of rifle packets.
The reader isreminded here that P IDGIN (unlike most programminglanguages) does not have iterative or re, cursive constructs to testthe conditions that are needed under the latter interpretation.Thus, a meaningful assumption in the second case is toconsider every recursive node to be cycl/c, and to Limitaccessibility to the sobtree dominated by the current cyclic nodein which branches are pruned at the lower cyclic nodes.
Ingeneral, we may also include cyclic nodes at fixed recursiondepths, but again branches of a cyclic node beyond that mustbe pruned, in this manner, we end up with a finite number offinite sequences (hereafmr called forests) of finite treesrepresenung the accessible segments of partial parse uee~Our conclusion is that at each stage of parsing theaccessible segment of a parse tree.
regar~ess of how weinterpret Marcus' statement, can be represented by a forest oftrees that belong to a finite set Tlc,h.
Tlc,h denotes the set ofall trees with non-termirml roots and of a maximum height h.In the general case, th/s information is in the form of a forest.rather than a pair of trees, because we also need to account forthe unattached subtrees that reside in the buffer and maybecome an accessible paxt of an active node in the future.Obviously, these subtrees will be pruned to a maximum heighth-1.
Hence, the operation of the parser can be characterized bythe partial function M from active packets, subtrees rooted atcurrent acdve and cyclic nodes, and contents of the window intocompound actions, i.e..M: Y'X(T,, h u \[_x.
})xCrc, h u ,Xl)XCr+t,h.~.
u zY k)"* ACTIONSwhere TC, h is the subset of "IN, h consisting of the trees withcyclic roo~In the PDA simulating the general parser, the set ofstack symbols F would be the set of u'iples \[T?,Tx,P\], whereT?
and T x are the subtrees rooted at current cyclic node Yand current ac~ve node X, and P is the set of packetsassociated with X.
The states of this PDA will be of the form<X.P~.P2,huffer>.
The last three elements are the same asbefore, except that the buffer may now contain subtreesbelonging to TlC,h.
1.
(Note that in the simple case.
when h=l.TIC,hol=N).
The first entry is usually ), except that when thecurrent active node X is dropped, this element is changed toT' x.
The subu'ee "I x is the tree dominated by X.
i.e., T X.pruned to the height h-1.Definition of the move function for this PDA is verysimilar to the simplified case.
For example, under the120assumption that the pair of height-one trees rooted at currentcyclic node and current active node is accessible to the parser,the det'mition of 6 fun~on would include the followingstatement among others:If M(P,Tx,T?,W!_Wn) - "drop; deactivate PZ; activate P2"(where T x and T?
represent the height--one trees rooted at thecurrent active and cyclic nodes X and Y), then8(<X,e,~.=\[W3.-W1B>.
k.\[Ty.Tx,P\]) =(<X,P2,PI,alWz_WIa>,X) for all a and 8.
Furthermore,_6(<XJ'2,Pz~lwz..wla>.
X,\[Ty.TzJ"\]) -(<x??.o~Wz..wza>.
\[Ty.Tz,(r u P2)-Pz\]) for all (TzY) inTN,IX2~ such that T z has X as its rightmmt leaf.In the more general case (i.e., when h > 1).
as we noted hathe above, the first entry in the representation f the state willbe T' x, rather than its root node X.
In that case, we willreplace the righonost leaf node of T Z, i.e., the nonterrmnal X,with the subtree T' x.
This mechanism of using the first ent23.
"in the representation f a state allows us to relate attachments.Also, in the simple case (h=l) the mechanism could be used toconvey feature information to the higher level when the currentactive node is dropped.
More specifically, there would be abundle of features associated with each symbol.
When the nodeX is dropped, its associated features would be copied to the Xsymbol appea.tinll in the state of the PDA (via first _8-move).The second _8-move allows m to copy the features from the Xsymbol in the state to the X node dominated by the node 7_(iii) Accommodation of fC2tur~$;The features used in Marcus' parser are syntactic in nature andhave f'mite domains.
Therefore the set of" attributed symbols inthat parser constitute a finite set.
Hence syntactic features canbe accommodated in the construction of the PDA by allowingcomplex non-terminal symbols, i.e., at-a'ibuted symbols instead ofsimple ones.Feature assitmments can be simulated by .replacing thetop stack symbol in the PDA.
For example, under our previousassumption that two height-one trees rooted at current activenode and current cyclic node are accessible to the parser, thedefinition of _8 function will include the following statement:If M(P,Tx:A,T?
:B,Wl...Wn) = "assign features A' to curt'erieactive node; assign features B' to current cyciic node; deactivatePl; activate P2" (where A,A',B and B' axe sets of features).then_6(<x~.o l wz...w z B >~, \[% ...T x :A~'\]) =(<k'~'~'~lWl"Wla>' \[TY:e U B"Tx:A It A ',(P U P2)-Pz\]) forall ?
and 8.Now, by lifting all three resuictions introduced on thesimplified parser, it is possible to conclude that Marcus' parsercan be simulated by a pushdown automaton, and thus accepts acontext-free set of suing.s.
Moreover, as one of the reviewershas suggested to us.
we could make our result more general ifwe incorporate a finite number of semantic tests (via a finiteor?de set) into the parser.
We could still simulate the parserby a PDA.Farthermore, the pushdown automaton which we haveconstructed here is a deterministic one.
Thus, it confirms thede-- in+sin of the language which is parsed by Marcus'mechanism.
We should also point out that our notion of acontext-free language being deterministic differs from thedeterministic behavour of the parser as described by Marcus.However, since every deterministic language can be parsed by adeterministic parser, our result adds more evidence to believethat Marcus' paner does not hide non-determinism in anyform.It is easy to obtain (through a standard procedure) anLR(1) grammar describing the language accepted by thegeneralized PDA.
Although this grammar will be equivalent oMarcus' PIDGIN grammar (minus any semantic considerations).and it will be a right cover for any undetl.ving surface grammarwhich may be assumed in consu'ucting the Marcus parser, itwill suffer from being an unnatural description of the language.Not only may the resulting structures be hardly usable by anyreasonable sernantic/pragmatics component, but also parsingwould be inefficient because of the huge number ofnon-teminals and productions.In automatic generation of Marcus-style parsers, one canassume either a context-free or a context-sensitive grammar (asa base grammar) which one feels is naturally suitable fordescribing surface structures.
However, if one chooses acontext--sensitive grammar then one needs to make sure that itonly generates a context-free language (which is unsolvable ingeneral).
In \[5\] and \[0"J, we have proposed a context-free basegrammar which is augmented with syntactic features (e.g.,person, tense, etc.)
much like amibuted grammars in compilerwriting systems.
An additional advantage with this scheme isthat semantic features can also be added to the nodes withoutan extra effort.
In this way one is also able to capture thecontext-sensitivity of a language.6.
ConclusionsWe have shown that the information examined ormodified during Marcus parsing (i.e., segments of partial parsetrees, contents of the buffer and active packets) for a PIDGINgrmm'nar is a finite set.
By encoding this information in thestack symbols and the states of a deterministic pushdownautomaton, we have shown that the resniting PDA is equivalentto the Marcus parser.
In this way we have proved that the setof surface sentences accepted by this parser is a context-freeset.An important factor in this simulation has been theassumption that the buffer in a Marcus style parser is bounded.It is unlikely that all parsers with unbounded buffers written in121this Style can be simulated by determiuistic pushdown automata.Parsers with unbounded buffers (i.e., two--stuck pa~rs) are usedeither for recognition of context--sensitive ignguages, or if theyparse context-free bmguases, possibly W hide thenon-determinism of a language by storing an ~ted  numberof lookabeads in the buffer.
However, ~ does not mean thatsome Marc~-type parsers that use an unbounded buffer in aconswained way are not equivalent to pushdown automata.Shipman and Marcus \[7\] consider a model of Marcus' parser inwhich the active node s~ack and buffer are combined w give asingle data suuctme that holds both complete and incompletesub~ees.
The original stack nodes and their lcokaheadsaJtemately re~de on ~ s'u'ucum~.
Letting an n,limited numberof completed conswacts and bare terrnlr'21~ reside on the newsu~cmre is equivalem to having an unbounded buffer in theoriginal model Given the resmcuon that auadunents and dropsare always limited to the k+l riLzhUno~ nodes of this datastructure, it is possible to now that a parser in this model withan unbounded buffer s~ can be simulated with an orrllns~.pushdown autotoaton.
(The equivalent condition in the originaJmodel is to res~a the window to the k rightmost elemmts ofthe hurler.
However simuiation of the singte structm'e ptner ismuch more su-aightforw'ard.)ACKNOWI.
?DGEM~"rsThe author is indebted to Dr. Lcn Schubert for posingthe question and ~.J'ully reviewing an eazly dr~ of Thispaper, and to the referees for their helpful comments.
Theresecrch reported here was supported by the Nann'zl Scioncesand Engineerinl~ Research Council of Canada operating \[m~nr, sA8818 and 69203 at the universities of Alberta and SimonFraser.REFt~t'~ICES\[1\] R.C Berw/ck.
The Aequistion of S.vlm~?
Kmwle~.
MITPress.
1985.\[2\] E Charniak.
A paxser with something for everyone_Parsing natural Iongua~.
ed.
M. King.
PP.
11"/-149.
AcademicPress, London.
1983.\[3\] IC Cuiik H and P,.
Cohen.
I.R-regular grJmrnar~: anextension of LR(k) gr~mm*,s. Join'hal of Compmer sad S.ntmSciem~, voL 7, pp.
66-96.
1973.\[4\] M.P.
Marcu~ A Theory.
of Syatactic Rece~itioe forNatural Langnal~ MIT Press, Cambridge, MA.
1980.\[5\] P,- NozohonPFwJ~L LRRL~) ~ ?
left m tiSh~pa.,~g uchn/que with n~duced look~ead~ Ph.D. thed.~ Deptof Compmin~ Science, Umverdv/of Alberta.
1986`\[6\] R. Nozohoor"Ftrdl/.
On form~ll,ltions of Mau?l~' ~ .COL/NC-86` 1986.\[7\] D.W. Shipman and M.P.
Maxcm.
Towards minimal damfor demTnln~'nc ~ IJCAI-~.
1979.\[8\] T.G.
Szymamk/ and LH.
Wali,,,,~ N ~ex~m/uns of bouom-up parting techniques.
SIAM Jmnal ofComputing.
voL 5.
~ Z PP.
231-'..50.
June 1976.\[9\] D.A.
Walte~ Dem~/nistic conwxPsem/tive languages.Information and Control.
voL 17. pp.
14-61.
1970.122
