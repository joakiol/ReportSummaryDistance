1.0 INTRODUCTIONAutomatic text generation is the generation of natural language textsby computer.
It has applications in automatic documentationsystems, automatic letter writing, automatic report generation andHELP subsystems for tlme-sharlng systems.
This section introducesthe subject and describes the contents of this paper.The second section describes a basic approach to automatic textgeneration which makes it possible to generate a relevant ext inresponse to a compact text specification.
The structure of the database (over-lapping tree structures, roughly) from which the text isconstructed makes it possible to do this in a non-ad-hoc way becausethe relationships between the elements of the data base imply sentencesand relationships between sentences and groups of sentences.In the third section, a number of extensions to the basic approach arediscussed.
These include among others: (a) paragraphing, (b) naturallanguage queries, (c) "flattening" of structures, and (d) eliminationof redundancy.The fourth section of this paper discusses the application of thisapproach to HELP subsystems for tlme-sharing systems and on-llnedocumentation systems.2.02.1A BASIC APPROACHThis section describes a basic approach to the generation of naturallanguage texts.
Three subjects are discussed:text specifications, i .e., a means for specifyingthe structure of a text that is to be generated,- the structure of the data base, i .e.,  the way inwhich the data base is organized to facilitatethe generation of natural language texts, andthe text generation algorithm which generatesa text given a text specification and a data base.This approach represents the basic insight presented in this paper.
It issimple and generatively very powerful, but a number of improvementsare possible.
Some of these possible improvements are discussed inSection 3.Text SpecificationA text specification is a compact description of the outline of a text.The form of a text specification is as follows:.
.
.
.
.
.
.
.
.
O0  ~te?t specl flcatlon~::=~subspeclflcatlon~t;~su bspeclflcah or~} o~ubspecificatior~.-:=~object name~(~R~ t, <R~ ~)I<:object name~::=one or more contiguous characters~relation ame~:-=one to three contiguous alphabeticcharacters.-2-The metalinguistlc symbols have the following significance:'may be rewritten as Iencloses a class name?
.
.
occurs between a & b timesObject names are key words or phrases.
They represent objects ofinterest within a data base, for example, names of commands in aprogramming language, people on a project or pieces of equipmentin a system configuration.A relation is a connection or association between one object and afragment of text (i .e.,  a part of a sentence or one or more closelyrelated sentences) and zero or more other objects.
The following aretyplcal relation names: NT (narrower term); PT (part); FUN (function);SYN (syntax); EG (example).The significance of text specifications and of object names and relationnames in text specifications is develope d further in the examples thatfol low.
The significance of objects and relations in the data base isdescribed in section 2.2.
The algorithm for generating a text~ given adata base and a text specification, is described in section 2.3.First ExampleConsider th e following request:Please create a text that explains the function and thesyntax of the narrower terms of command.
Examples ofeach command should be included.
Each command shouldbe discussed separately - -  function, first, then syntax,and last an example.--3-This request can be stated briefly by the following text specification:COMMAND (NT(FUN, SYN, EG))The corresponding text that would be generated would have an outlinein the following form:First CommandFunction of First CommandSyntax of First CommandExample of First CommandSecond CammandFunction of Second CommandSyntax of Second CommandExample of Second Commandetc.The output for one command in the outline might be:The function of the Set Command is to set a specifiedcontrol parameter to a specified integer value.
Theformat of the Set Command is:<name > = <integer>An example of the Set Command is:SL:OU = 100In the example, the maximum number of on-lineusers (SL:OU) is set to 100.-4-2.22.2.1Second ExampleSuppose that in addition to the text of the first example, an intoductionis desired in which a list of all the commands is given.
The appropriatetext specification would be:COMMAND (NT); COMMAND (NT(FUN, SYN, EG))Third ExampleSuppose that instead of grouping information by cammand, it is desiredthat all the functions should be grouped together, etc.
Then, theappropriate text specification would be:COMMAND (NT(FUN), NT(SYN), NT(EG))Data BaseA data base for a particular subject consists of two parts:(a) a thesaurus that relates objects to each other andto frac~nents of text, and(b) fragments of text.ThesaurusA thesaurus contains an entry for each object.An entry for a single object consists of any number of relationships.
Eachrelationship relates the object to a fragment of text and, in same cases,to one or more other objects in addition.-5-2.2.2An object that is being focused on ( i .e .
,  as the object in a textspecification or as the obiect that an entry is for) is referred toas a ~ .An object should be included under a relation in a particular entryif it occurs in the fragment for that relation and its meaning is notself-evident in that context.The following is an example of an entry in a thesaurus for SETCOMMAND :SET COMMANDFUN: 10CONTROL PARAMETERSYN: 11NAMEI :  IINTEGEREG: 12FUN, SYN and EG are relations.
The function of the SET COMMANDis stated in fragment \]0, the syntax in fragment 11 and an example ofthe SET COMMAND is given in fragment 12.
The object CONTROLPARAMETER occurs in fragment 10 and its significance is not self-evidentin that context.Text FragmentsIThe data base includes a text fragment for each relationship in eachentry.
These fragments can be arranged (in the data base) into one ormore unified texts, perhaps with some fragments left over.-6 -2.33.0Fragments 10, 11 and 12 referred to above might read as follows:10: The function of the Set Command is to set ospecified control parameter to a specifiedinteger value.11: The format of the Set Command is:<name> : <integer>12: An example of the Set Command is:SL:OU = 100In the example, the maximum number ofon-line users (SL:OU) is set to 100.Text Generation AlgorithmA flow chart of the text generation algorithm for handling subspeci-fications is given in Figure 2.3a.
The algorithm as described does notinclude any error checking.EXTENSIONSThis section suggests c~ne of the ways that the basic approach could bemodified to advantage.
Like the previous section, it is divided intothree subsections which discuss text specifications, the structure of thedata base and the text generation algorithm.
But instead of discussingone basic approach, it discusses many possible extensions of that basicapproach.
The extensions discussed often effect more than one of thesethree areas.
They wil l  be discussed wherever they can be presented inthe most illuminating way.-7-l Put Symbols into SYMBOLJ Push (SYMBOL (1),3) into SUBLISTJ Pull (CSUBJECT, IS) from SUBLISTFigure 2.3aIIPull all of TEMPLIST j~and push into SUBLIST J-No More / f -  ~'~ IPrint fragmentpointed toby CSUB.IECTPAREN = 0 j= PAREN- 1 ~ ~  ~_ ~ ~ ,, PAREN- V -~r-" .
.
.
.
.
.L.
_ ~ i~  under this re-l /  SYMBOL I ~ ~ - ~ _  vy !lation forL a relation name \] ~ - a p p e n d  - ~ /N ~ (OBJECT, is+2)i  P'e "a' ntno 0> I e for this relationname for CSUBJECTto TEMPLIST-8 -FIGURE 2.3bNotes for Flow ChartSYMBOLSUBLISTCSUBJECTISPARENTEMPLISTa list containing the symbols of the text specificationin the order of their occurrence.a list of items each of which is either (a) a fragmentnumber or (b) a pair that consists of a subject andan index to the first symbol in SYMBOL to beprocessed for that subject.the current subject being processed.an index to the symbol in SYMBOL that is beingprocessed.a counter for keeping track of parentheses.temporary list for collecting items to be pushedinto SUBLIST for one CSUBJECT.-9 -3.13.1.1Text Specification~odD wol ~ ~oI ~etoklParagraph BoundariesWith texts of any size paragraphing is desirable.
A new symbol (PARG)sider the followlr~oe~msl:d~Qfi~lwtdhgtighbi~er,~sed:3.1.2bnr~ tog}due o to etei~noo to:it ~ioq o (d) to ~edm,~nParoglra~lf~gJ~c~i~ I e~i~rel~ef~re,.~b~ic~cussion of each of thenarrower terms of COMMAi~..toH~ ~,o/bg,~.eg3olc~Section numb?b~ anodoheadi.nas co~l~ be handled in a similar manner.. ez q ~/"11:5"~ {ogicU~.  "
lngl lb~o 9r j t  \]'.~..fl l.SU~.
;)~b,qr,  b~;~R !
F~l:qg~eEts Ln,the Outp.vt.
.
.
.
.
.
.
.
.
~."
:~ '~n~ ~,: .
_ t  x~bn~ noConsider the text speciflcatlon: ,bee~goo~q81T~UgcCl~lt to l~lda~bl~e~ta~z61 ~mec~t/moture: TSIJClM\]T. T33LSU~D ~no ~o~ TSIJSU?
otniCOMMANDNTFUN SYN EGiIn the basic approach only the fragments of the lowest level relations areprinted.
The fragment hat lists the NTs of COMMAND is not printed.It would probably be more reasonable to interpret text specifications~ Xrbl~eir~ e~l 4. to rhqeb erh szoqqu~ tud ,btuow (((TVI)Tkt)T/,4)AIf i t  was desired that fragments at a level be suppress .e~erX  ~ ldbe marked by a special symbol, say a minus sign?ioi~)~le o e~u oi ed bluow meldolq ai(tt slbnad at Xow tnelnsvnoo A, ~et~,~i~bni ?~ e~i~n i  o~ ~mon noitolo~ D ~eflo ( ' l '  aqod~q) Iodn~ ?
z .,~ n0erorcmes o ta  ~emnon.belia~b ei no~tolel 9~tt o gnit~nThere are many relations that naturally form hierorchies~ e .g .
,narrower term of, part of, works for and subroutine of.
Considerz~i~nebn.
9qeCI.
gn~:hito8a data base with a hierarchy of NTs.
The un er,ne e ~"~oiuoif~,.~a ~.~o~ (~o I~ ~, -~lu~it~q o rit~,, b~loi~o~o tnemgmt A represent SUDlects or enrr~es.
".~oHois~ i.~r{'~ ,c aloe\[do grit to ~,noHonolqx~ no tnebneqg bai  toejdua~oitn~.~c, ,~ri!
~o~.
air~emgo~'~,riT ~,o at~,~anoa ~:,~ido }o noitono~qx~ nA?
Ioi'~ns~.e ~i t.~)rkv ~ui~ .
'~ejdo .ed~ :~o ~noitoie~NT:Ibi~ow ~i.~i~o ~ ('PlU~) ~e, oiionu~BiOrit ~idr~n:~r~e~ zm.~s.~ i ;~ohq ,~~.msea i~i~nea~"on bno Jni-~nee~e ~ ~ot~ 10 r:oil0o~}i~zotoio tgg tluoi~5 ~ evori ~t ~e'Hgd ed ~H~n~ l .bi~i~ xti~o~eaen~bNT:2 NT~.-3ebivo~q o~!o bno i'1,U ~} (at b~im~i ~o) ~ibu~oni anoltole~ Joilneaa.,~:?n ~ou~ tngmo?otz o X~le;- tiuo\]eb cirJt ebhlevoFoj xti l idoqoo oo ~o1 \]eilneeae be~ebiznoo el~l~Odl anoitole~ ~boeteni ~o noltibbo n|.ezod otob ~flt nl rlou~ ~o bs~hom ed bluoo toejdu~ ~oJuoit~c~qNT:4e~t ~i I.tU:I to~ ~bebutoni e~o ~ne~gml evel ~erlgifl torlt gnlmu~.~,,zeione~bnecleb refit etooibq; zte~lomd todt bno noitolm Ioitnez~e XI~O:noitooilio~q~ txet B~iwolJo~le~li ~eblznoo ~bei1~ito~ e~l oi e~o{~(~JY~)TIt) aHAMM03\]-?
\ [ -3.1.4What text specification would cause all four fragments to be printed?A(NT(NT(NT))) would, but suppose the depth of the hierarchy isnot known.A convenient way to handle this problem would be to use a specialsymbol (pethaps ' !')
after a relation name to indicate that indefinitenesting of the relation is desired.
!L  ~Satisfying DependenciesA fragment as~,ociated with a particular relation for a particularsubject is dependent on explanations of the objects of that relation.An explanation of objects consists of the fragments for the essentialrelatiom of the object.
But what is essential?A_Apriori t seams reasonable that functions (FUN) of objects wouldbe essential and examples (EG) not.
But to insist on a particularclassification of relations as essential and non-essential seemsunnecessarily rigid.
It might be better to hove a defauit set ofessential mlotlons including (or limited to) FUN and also providea capability to override this default set by a statament such as:ESSENTIAL = FUN, NT1~ addition or instead, relations that are considered essential for aI~rticulm subject could be marked as such in the data base.Assuming that higher level fmgmnnts are included, that FUN is theonly essential relation and that brackets i/ldicote that dependencies~omto be satisfied, consider the following text specification:-12-3.1.5The fragments giving the narroweL" terms of COMMAND and thosegiving the syntax of all the narrower terms of COMMAND would beincluded in the resulting text.
In additlon~ the functions of COMMAND~of the narrower terms of COMMAND, and of any objects of the SYNrelations would be included.
Further~ the functions of any objects ofthese FUN relations would be included~ etc.Natural Language QueriesThe approach in dealing with natural language queries is to convertthem into text specifications.
In order to make the conversion, thefollowing types of words would have to be isolated in the query:relations (e.g., function, syntax, example)~objects (e.g., ADD COMMAND)andconnectors of objects with relations or relationswith relations (e.g., of).In the following example, the words that would need to be isolatedare underlined:Please create a text that explains the functionand the syntax of all of the commands in thedata base.Next it would have to be determined which objects and relations wereconnected in the query and how.
What we have is FUN and SYN ofNT of COMMAND.This must finally be translated into:COMMAND (NT(FUN, SYN))-13-3.23.2.1Data BaseReferences across Subject AreasThe approach described here depends on a text specification beingprocessed for a particular data base.
The data base should be highlycontrolled and relatively free from ambiguities.Although each specification must be directed at a particular data base,not all (or even any) of the fragments in the resuJtlng text wouldnecessarily be from that data base.Consider the following data bases:A slash indicates that the name of the data base for that object follows:OVERVIEW DATA BASEASSEMBLER- NT:IOMETA SYMBOL/METASYMBOLMATHEMATICAL COMPILERSNT:20/BASIC/BASICFORTrAN/FORTRAN ~x%~.
FORTRAN DATA BASE __~ BASIC DATA BASEI :BAsic FORTRANFUN: 17 j j  FUN: 30' 11-14 -3.2.2The text specification MATHEMATICAL COMPILERS (NT(FUN))would result in a text consisting of fragfi~ent 10 from the BASICdata base and fragment 30 of the FORTRAN data base.Higher-Level ConnectivesA higher-level connective is a connective that connects a sentenceor a group of sentences with a sentence or a group of sentences.This is in contrast to the relations discussed so far which relate asubject to an object or to s~nething else.The following are examples of such connectives:similarly (SIM),in contrast,thus,otherwise andfor example (EG).These connectives can be incorporated into the data base by expandingthe reference to fragments.
Consider the following reference to afragment:FUN: I0, EG:20, SIM: X(FUN)This reference says that the function of the subject of the entry inwhich it  occurs is stated in fragment 10.
It says further that anexample of the function is given in fragment 20 and that the subject Xhas a similar function.-15-3.33.3.13.3.2Text Generation AlgorithmGeneration of FragmentsThe implementation of the text generation algorithm is simpler iffragment numbers and corresponding fragments are included in thedata bases for all relationships; but for some relations (e.g., PTand NT) the fragment can be generated from the thesaurus entryitself.
In other cases (e.g., FUN) part of the fragment canbe generated.For example, a relationship with the following format:<su bj ectPT:<Obj ect<Object~implies a fragment of the form:<subject> has the following parts: <object>, <object>...Lexical information for the subjects and objects would be necessaryto include the correct articles and endings.Eliminating RedundanciesIn the context of a reference manual for a programming language,syntax would probably be considered an essential relation.
Therelations between syntactic objects is (roughly) hierarchical, butthe overall structure of syntactic objects is generally not quite a-16-tree structure because of the fact that more than one object isoften dependent on a single object.Consider a data base that contains the following objects and relations:ASSIGNMENT STATEMENTSYN: 1sVARIABLEARITHMETIC EXPRESSIONVARIABLESYN: 2SUBSCRIPTED VARIABLES SIMPLE VARIABLESUBSCRIPTED VARIABLESYN: 3ARRAY IDENTIFIERSUBSCRIPTED LIST /SUBSCRIPTED LISTSYN: 4ARITHMETIC EXPRESSION \ARITHMETIC EXPRESSIONSYN: 5TERM.
e e  .
.
o-17-3.3.3The text specification:ASSIGNMENT STATEMENT(SYN !
)would result in the syntax of ARITHMETIC EXPRESSION being describedtwice in exactly the same words.
Probably this is not desirable, and itwould be even less desirable if TERM and/or OPERATOR required furtherobjects to explain them.How can such redundancy be identified and how is it to be handled?One way would be to construct a graph for the relationships to beincluded in a text plus references to all the occurrences of each objectin the graph.
For any object that occurred more than once a checkwould be made to determine if the subgraph going down from it in oneoccurrence was the same as in some other occurrence.
Al l  but onesuch subgraph would be deleted.
The one that was to generate textearliest would be retained.Flattening of StructuresStructures that go beyond a certain depth are often confusing if they arenot broken up or flattened.
Thus, in describing a programming languagethe basic symbols (such as arithmetic expressions) are often discussed be-fore the discussion of individual commands.
This means that in dis-cussing an individual command (such as an assignment statement), it isnot necessary to explain arithmetic expressions (or variables) in alltheir complexity.Given the capacity for eliminating redundancies, it is possible to flattenstructures.
As an example, consider the f?llowing text specification.ARITHMETIC EXPRESSION(SYN I); ASSIGNMENT STATEMENT(SYN I)-18-4.04.1First, the fragment for the syntax of arithmetic expressions would beprinted along with the fragments for the objects it depends on, etc.Second, the fragment for the syntax of the assignment statement wouldbe printed along with the fragments for the objects it depends on0 etc.,except that the fragments for arithmetic expressions and the fragmentsfor objects it depends on, etc.
would not be printed because theyare redundant.APPLICATIONSThe approaches to text generation described in the previous twosections have applications in many areas including the following:HELP subsystems for time-sharing systems,Automatic Documentation Systems,Vocabulary Control,Automatic Letter Writing andAutomatic Report Generation.The first two of these applications are discussed below.HELPA HELP subsystem is a part of a time-sharing system that helps the userto understand the system and the various parts of the system.
Two maintypes of help may be provided:--abil ity to answer questions about the system(without reference to the current state ofthe system) and--abil lty to answer questions about the current-19-state of the user's job.The techniques described in this paper are oriented more towardsthe former capabil ity.The user of a HELP subsystem is typical ly in the middle of a task whenhe needs help.
He wants what he has done so far to be intact whenhe returns to his original task.
Moreover, he does not want to have tomake a special effort to achieve this because (a) he might forget and(b) it takes time and he is in a hurry.
Often these goals can be achievedby incorporating the HELP capab!lity into the terminal executiveof the system.It is especially important hat a HELP subsystem help the user tounderstand how it should be used.
For example, if the user typesin an il legal text specification, the HELP subsystem might offer todisplay some material concerning the proper format of a textspeciflcation.Abi l i ty to handle simple natural language queries is very desirable,at least the first time a user uses a HELP capabil ity.
It means thathe can use it without having already learned to use text specifications.ExamplA user of a time-sharing system is entering the statements of a BASICprogram on-l ine when a syntax error occurs on an assignment statement.But the error message does not make clear to him how he can correctthe error.
So, he exits to the terminal executive.
Then he asks aiseries of questions about the syntax of an assignment statement in BASIC,finds the information that makes clear how to correct the error, andreturns control to the  on-l ine BASIC compiler with the same environment-20-t~4.2(including the partly entered program) as when he left.
Then, hecan reenter the statement hat was in error and continue as ifnothing had happened.On-Line Documentation SystemsAn automated ocumentation system consists of capabilities formaintaining a data base and for producing formal documents uch asreports or documents for individual use.
The approach discussed inthis paper has primarily to do with the generative capabilities.
Thedocuments generated would be natural language texts.Some of the advantages of an on-llne system are: (a) the system canbe accessed when the information is needed; (b) the information thatis received may suggest further queries and (c) syntactic or semanticerrors in the text specification can be corrected at once.A system using the approach described has the advantage of suggestinggaps in the documentation.
For example, one might discover thata particular object never occurs as a subject or that a relevant relationis missing from an entry.As a fall-out of the approach, one has a thesaurus (or glossary)for vocabulary control.A couple of examples of the use of such a system may be helpful incommunicating its significance.First ExampleA new person has been assigned to an implementation project.
HeWould like up-to-date documentation of parts of the system relevant to-21-the work he wi l l  be doing.
In different areas he wants differenttypes of information.
The structure of the texts generated for himcan be tai lored to his needs by use of appropriate text specifications.If he needs more information in some areas, he can use the systeminteract ively.Second ExampleThe information in a particular area changes frequently and a numberof people need to receive up to date information periodical ly.
A textspecification can be created to generate the appropriate information, and(assuming the structure of the data base doesn't change significantly)the same specification can be used to generate a text with the samestructure (10ut different information) as after1 as is desired.-22-BIBLIOGRAPHY1.2.3.Lauriault (Loriot), JamesShipibo Paragraph Structureunpublished paper, Summer Institute of Linguistics, August, 1957.Jacobson, S.N.
"A Modifiable Routine for Connecting Related Sentences ofEnglish Text.
"in Computation in Linguistics (edited by Paul L. Garvin andBernard Spolsky), Indiana University Press, Bloomlngton~indiana, 1966.Woolley, George H.Syntax Analysis beyond the Sentence(presented at the Fourth Annual Meeting of the Association forMachine Translation and Computational Linguistics), ComputerAssociates Inc. document no.
CA-6607-2121, July~ 1966.-23-
