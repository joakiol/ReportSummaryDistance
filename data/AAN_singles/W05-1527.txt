Proceedings of the Ninth International Workshop on Parsing Technologies (IWPT), pages 200?201,Vancouver, October 2005. c?2005 Association for Computational LinguisticsSUPPLE: A Practical Parser for Natural Language EngineeringApplicationsRobert Gaizauskas, Mark Hepple, Horacio Saggion,Mark A. Greenwood and Kevin Humphreys?Department of Computer ScienceUniversity of Sheffield, Sheffield, UK{robertg|hepple|saggion|m.greenwood|-}@dcs.shef.ac.ukAbstractWe describe SUPPLE, a freely-available,open source natural language parsing sys-tem, implemented in Prolog, and designedfor practical use in language engineering(LE) applications.
SUPPLE can be run asa stand-alone application, or as a compo-nent within the GATE General Architec-ture for Text Engineering.
SUPPLE is dis-tributed with an example grammar that hasbeen developed over a number of yearsacross several LE projects.
This paper de-scribes the key characteristics of the parserand the distributed grammar.1 IntroductionIn this paper we describe SUPPLE1 ?
the SheffieldUniversity Prolog Parser for Language Engineering?
a general purpose parser that produces both syn-tactic and semantic representations for input sen-tences, which is well-suited for a range of LE ap-plications.
SUPPLE is freely available, and is dis-tributed with an example grammar for English thatwas developed across a number of LE projects.
Wewill describe key characteristics of the parser and thegrammar in turn.2 The SUPPLE ParserSUPPLE is a general purpose bottom-up chart parserfor feature-based context free phrase structure gram-?At Microsoft Corporation since 2000 (Speech and NaturalLanguage Group).
Email: kevinhum@microsoft.com.1In previous published materials and in the current GATErelease the parser is referred to as buChart.
This is name is nowdeprecated.mars (CF-PSGs), written in Prolog, that has a num-ber of characteristics making it well-suited for usein LE applications.
It is available both as a languageprocessing resource within the GATE General Ar-chitecture for Text Engineering (Cunningham et al,2002) and as a standalone program requiring vari-ous preprocessing steps to be applied to the input.We will here list some of its key characteristics.Firstly, the parser allows multiword units identi-fied by earlier processing components, e.g.
namedentity recognisers (NERs), gazetteers, etc, to betreated as non-decomposable units for syntactic pro-cessing.
This is important as the identification ofsuch items is an essential part of analyzing real textin many domains.The parser allows a layered parsing process, witha number of separate grammars being applied in se-ries, one on top of the other, with a ?best parse?
se-lection process between stages so that only a sub-set of the constituents constructed at each stage ispassed forward to the next.
While this may makethe parsing process incomplete with respect to thetotal set of analyses licensed by the grammar rules,it makes the parsing process much more efficient andallows a modular development of sub-grammars.Facilities are provided to simplify handlingfeature-based grammars.
The grammar representa-tion uses flat, i.e.
non-embedded, feature represen-tations which are combined used Prolog term uni-fication for efficiency.
Features are predefined andsource grammars compiled into a full form repre-sentation, allowing grammar writers to include onlyrelevant features in any rule, and to ignore feature or-dering.
The formalism also permits disjunctive andoptional right-hand-side constituents.The chart parsing algorithm is simple but very200efficient, exploiting the characteristics of Prolog toavoid the need for active edges or an agenda.
In in-formal testing, this approach was roughly ten timesfaster than a related Prolog implementation of stan-dard bottom-up active chart parsing.The parser does not fail if full sentential parsescannot be found, but instead outputs partial anal-yses as syntactic and semantic fragments for user-selectable syntactic categories.
This makes theparser robust in applications which deal with largevolumes of real text.3 The Sample GrammarThe sample grammar distributed with SUPPLE hasbeen developed over several years, across a numberLE projects.
We here list some key characteristics.The morpho-syntactic and semantic informationrequired for individual lexical items is minimal ?inflectional root and word class only, where the wordclass inventory is basically the PTB tagset.A conservative philosophy is adopted regardingidentification of verbal arguments and attachment ofnominal and verbal post-modifiers, such as preposi-tional phrases and relative clauses.
Rather than pro-ducing all possible analyses or using probabilities togenerate the most likely analysis, the preference is tooffer a single analysis that spans the input sentenceonly if it can be relied on to be correct, so that inmany cases only partial analyses are produced.
Thephilosophy is that it is more useful to produce par-tial analyses that are correct than full analyses whichmay well be wrong or highly disjunctive.
Outputfrom the parser can be passed to further processingcomponents which may bring additional informationto bear in resolving attachments.An analysis of verb phrases is adopted in whicha core verb cluster consisting of verbal head plusauxiliaries and adverbials is identified before any at-tempt to attach any post-verbal arguments.
This con-trasts with analyses where complements are attachedto the verbal head at a lower level than auxiliariesand adverbials, e.g.
as in the Penn TreeBank.
Thisdecision is again motivated by practical concerns: itis relatively easy to recognise verbal clusters, muchharder to correctly attach complements.A semantic analysis, or simplified quasi-logicalform (SQLF), is produced for each phrasal con-stituent, in which tensed verbs are interpreted as re-ferring to unique events, and noun phrases as refer-ring to unique objects.
Where relations between syn-tactic constituents are identified in parsing, semanticrelations between associated objects and events areasserted in the SQLF.While linguistically richer grammatical theoriescould be implemented in the grammar formalismof SUPPLE, the emphasis in our work has been onbuilding robust wide-coverage tools ?
hence the re-quirement for only minimal lexical morphosyntac-tic and semantic information.
As a consequence thecombination of parser and grammars developed todate results in a tool that, although capable of return-ing full sentence analyses, more commonly returnsresults that include chunks of analysis with some,but not all, attachment relations determined.4 Downloading SUPPLE ResourcesSUPPLE resources, including source code and thesample grammar, and also a longer paper providinga more detailed account of both the parser and gram-mar, are available from the supple homepage at:http://nlp.shef.ac.uk/research/supple5 ConclusionThe SUPPLE parser has served as a component innumerous LE research projects, and is currently inuse in a Question Answering system which partic-ipated in recent TREC/QA evaluations.
We hopeits availability as a GATE component will facilitateits broader use by NLP researchers, and by othersbuilding applications exploiting NL technology.AcknowledgementsThe authors would like to acknowledge the sup-port of the UK EPSRC under grants R91465 andK25267, and also the contributions of Chris Huyckand Sam Scott to the parser code and grammars.ReferencesH.
Cunningham, D. Maynard, K. Bontcheva, andV.
Tablan.
GATE: A framework and graphical devel-opment environment for robust NLP tools and applica-tions.
Proceedings of the 40th Anniversary Meeting ofthe Association for Computational Linguistics, 2002.201
