RUG: Regular Unification, GrammarLauri CARLSONUniversity of HelsinkiResearch Unit tbrComputational LinguisticsHallituskatu 11SF-00100 HelsinkiFinlandAbstractThe paper describes a new unification based grammarformalism called Regular Unification Grammar (RUG).The formalism is under development a  the Research Unitof Computational Linguistics, University of Helsinki, Inoutline, RUG can be described as a combination of anextended graph unification formalism with a fixedminimal finite state syntax.Section I of the paper outlines the RUG formalism.
SectionII describes ome aspects of its current implementation.Section III describes an experimental RUG grammar forFinnish.I.
The RUG formalismRUG constitutes a unification based grammar formalism/Shieber86/.
In outline, RUG can be described as acombination of an extended graph unification formalismwith a fixed minimal finite state syntax.
It shares withcategorial unification grammar (a) the use of graphunification as the basic descriptive mechanism and (b)association of combinatorial properties of words withlexical entries.
It differs from categorial grammar inrestricting string combinatorics to left associativeconcatenation.11, Combinator ial  syntaxThe combinatorial syntax of RUG consists of the followingthree rules2:(S Words)(I)) rd (((:PARSE) (I initial next we ))I(I1 final) @ FinaIstate)next) (I final current))final preceding) (I current)))(Words Words WI( 0) (z))  (2) OlnternalState) (2 preceding) (1 current)) (I next) (2 current)) ((1 initial)(2 init ia l)))(Words Wo 1)) I/,/ ,ntornal tate)((1 in i t ia l )  @InitialState)((1 preceding) (1 in i t ia l  current))((1 in i t ia l  next) (1 current)))In brief, a grammatical string consists of words and wordsconsist of one or more words.
Each word has a stateassociated to it, i.e.
a feature structure which can be usedto store information about the word and the state of theparse up to that word.
In addition, the syntax providesdummy initial and a final states which can be used to stateconstraints common to all strings.
Each state has a pointerto its own current contents and to the contents of thepreceding and next states.
Using unification, features ofneighboring words can be accessed irectly and features ofmore remote states through sharing.2.
Feature structureA characteristic of the RUG unification ~bnnalism is theuse of cyclic feature structures, in general, the graphassociated to a sentence in a RUG grammar is not a treenor a dag, but a connected graph.
Dependency relations areshown over the list of words in a sentence bottom up, eachword pointing to its head.
In addition, a head can constrainits subcategorized complements through appropriateattributes.
This reflects predictability: a head selects itscomplements (constrains their number), while adjuncts arenot subject o selection and hence cannot be identified onthe basis of the head.3The graph unification tbrmalism used in RUG containsfacilities tbr expressing indeterminate functionaldependencies among words using regular path expressions.An example of an indeterminate functional dependence isthe dependence of a preposed quesLion or relative word onsome verb complement to its right.
The class of possibleheads of the word can be defined in terms of a regularexpression over attribute names, say (re rb mai n VC0MP*)for "some verb complement of the main verb of theclause".4RUG allows disjunctions and negations of atomic t~aturevalues.
(ANYOF A B) unifies only with A and B and(NONEOF A B) with any atom except A and B.Nonmonotonic extensions ofunification are available forcompleteness checking.
ANY values/Shieber 1.986/allowtesting for the presence of obligatory constituent a the endof a parse.
Analogous tests for feature instantiation aftereach successful nification are available.5RUG allows specifying default values through the reservedattribute name DEFAULT.
DEFAULT features are unifiedlike any other features.
During parse final completion, a dgis overwritten over the value of its own DEFAULT and theresult replaces the original dg.3.
Tools for grammatical  bstract ionThe RUG grammar formalism starts out with lower levelprimitives than other unification based grammarformalisms.
In particular, the notion of a phrase(constituent) built in to context free grammar must bereconstructed in terms of unification.
On the other hand,the absence (or optionality) of the requirement of propernesting can be a help in dealing with free word order.The development of the grammar formalism involvesdefining suitable abstractions in terms of the primitives ofthe unification formalism which can be used in actualgrammar writing.
The template abbreviation facility of'PATR/Shieber et al 1983/with a few extensions is used i~RUG for this purpose.102One extension of the template formalism is the ability todefine disjunctive t mplates u ing the reserved word OR.
Aspecification of form (OR speckist speckist ... specList) is-compiled inhl a list ofdgs one for each disjunct.
This helpskeeping the lexicon simple as different uses of the sameword can be listed under one template name.Another extension is parametrized templates which allowdefining abstract operations on paths, values, or othertemplates.
A specification of form (@ Name argl ... argn) iscompiled in'a) whatever Name would compile to after arg~... argn replace corresponding placeholders in the definitionof Name.Using the template facility, higher level gramnmticalabstractions can be defined, for instance word orconstruction types such as subordinating connective,premodifier, etc.
As all syntactic information is stored intemplates, the property inheritance scheme implicit in thelexical template formalism can be used to expresssyntactic generalizations (say, to define a set of relatedclause types).II.
ImplemeatationRUG is currently implemented in REGDPATR, anextension of the D-PATR gl'ammar developmentenvironment/Karttunen 1986/.Regular path expressions are implemented by allowing dgsin attribute position of other dgs.
Such an attribute dg(attrDg) is in terpreted as the (possibly infinite) disjunctionof the paths contained in it.
For instance, the R attribute ofthe following attrDg is equivalent o the regular pathexpression (VCOMP*) :(1)/ l abe l - -AnyVComp@---- count ..... T~"  paths - -~ l imi t  .
.
.
.
3",_~ /F INAL- - -TAn attrDg can be defined and named in a templatedefinition like any dg.
Once defined, the name can be usedin a path specification preceded by an @ sign.
It is decodedand compiled into the corresponding attrDg.
For instance,(1) can be defined in the lexicon as(2) (AnyVComp ((VCOMP) NIL) (FINALT))We shall call dgs containing attrDgs regular dgs (regDgs).When a regl)g is displayed, its attrDgs are labeled withtheir template names:(3)/OBJ .
.
.
.
.
.
CASE .
.
.
.
NOM~ -VCOMP---NONE\AnyVComp .
.
.
.
.
OBJ .
.
.
.
.
CASE ---.GENRegDgs are not guaranteed consistency by unificationalone.
The regDg in (3), for instance, is inconsistent, withthe attrDg AnyVComp as shown in (1).To supplement unification, another operation of unit pathresolution is provided.
Unit path resolution is very muchlike unit resolution in propositional logic.
Recall thatattrDgs are interpreted as disjunctions of paths.
Likewise,we can inte:cpret a simple dg as a conjunction of paths withgiven values.
A regDg like (3) can thus be interpreted as aconjunction of disjunctions of paths, some of which (thoseconsisting of atomic attributes) constitute unitdisjunction'~ This sets the stage for resolution.In unit path resolution, paths contained in each attrDg arematched with unit paths in the conjunctive "part" of theregDg looking for inconsistencies in the values at the endof identical paths.
When an inconsistency is found, thecorresponding path is removed from the attrDg.
If all of thepaths in the attrDg are thus removed, the regDg wasinconsistent o start with.
Otherwise, we obtain aconsistent regDg with fever alternative paths left in it.This operation is undoable just as unification itself.Path resolution can be incorporated as a stage in theunification of regDgs.
Alternatively, it can be performedafter each successful match or only after a parse isconcluded.
Unit path resolution is not complete, so allinconsistencies are not guaranteed tobe detected by it.I I I. FREl)9: A RUG grammar  for Finnish1.
Examples(4)rACC-- -~~,NIMATE--F:ASE--PRTCAT--NCOUNT--F,DEF--F,HEAD--On\]- IND--F~NUMBER--SG\PRT--Tqef t - -~%x- - - luntaread ing----SameClause--\[\]right----NON Estem--lumi-NEXT---~COMP---NONEkHEAD---NONEioB,-qI VFORM--FIN comb1 --NONEl l ex - - sa taa  reading----SameClause--\[\] right---NONE stem--sata-FUNCTION---ADVH EAD--~left---NONElex - -a inareading----SameClause-- \[\]right---~stem--aina-\].03FRED9 can be seen as an attempt o cast some of thegranunatical ideas implicit in the procedural parserFPARSE of/Karlsson 1986/into adeclarative form.The structural descriptions produced by FRED9 resemblegraphs used in traditional grammar.
(4) describes thesentence aina satan lunta "it always snows" (lit.
'alwaysrains snow') .
(4) is produced by unifying appropriateentries of the participant words one after another asdirected by the syntax.
(5) is the feature representation fthe appropriate r ading for lunta 'snow (prt)'.The regular path expressions GrmFn and DomainAnyVComp characterize the ranges of possible functionsand heads of lunta respectively.
GrmFn and Domain havethe definitions shown in (6).2o PrebiernsProperties to account for in syntactic parsing include wordorder, dependency, consistence, completeness, andambiguity.
Word order and dependency togethercharacterize what is commonly understood as syntacticsurface structure.
Notions of completeness and consistencedescribe two complementary constraints ongrammaticality: consistence r quires that a grammaticalstring must not contain too much information (too many orincompatible words), while completeness requires that agrammatical string must not contain too little information(missing or insufficiently specific words).
The descriptionof FRED9 below is organized around these five headings.
(5)cat .... Wlex .... l untareadi ng-~--\[~-~-~SameClause--- \[\]state ..../noun- - -~/ cur rent - -~ANIMATE--FCASE--PRTCAT--N:OUNT--F,DEF--F/cAT--VHEAD---~Iex--ANY"Grm Fh ---\[-~~IND--F~NUMBER--SG\PRT--Tqeft-- -~\],lex--luntaireading--~~right--~Lstern--lumi.Domai n----AnyVCom p---~lrlext .
.
.
.
word - -  ---I eft ---\[4\]_/~rb~preceding -- 7 -~ j~ /NEXT-~w?rd--<-.right_ ~previous--~\]stem---lumi-1.
Word orderFree word order presents no inherent difficulty in RUG, asthere is no built in connection between phrase structureand linear order like the proper nesting condition ofcontext free grammar.
For instance, Finnish allowsscrambling dependents ofa VCO M P chain anywhere iqsidethe chain.
This is described in FRED9 by !theindeterminate h ad specification AnyYComp.
For instance,in(7) Aina voi luntajoku alkaa luodaalways can snow someone begin shoveling"Someone can always begin shoveling snow"joku is the subject of voi and lunta is the object o?
luoda.What they have in common is that they depend on someverb on the VCOMP chain of the main verb voi.2.
DependencyThe converse side of the coin is that properly nested phrasestructure does not come for free.
Phrase structure has to bereconstructed using unification.
One way to proceed is touse features acting as pointers to phrase heads, shared bythe members of a phrase and linked to one another to forma phrase level projection of the string.
Such projectionsform domains within which words can look for appropriateheads.Center embedding can be managed with stack valuedfeatures.
Proper nesting can also be enforced by a separatetemplate Nested which requires that a word must not lookfor heads beyond its adjacent words' heads :6(6)/ labe(~GrmFn@-- /~ .
j count~2" -paths~ <'-Ii mit ~ 2R /compl  ~\[ \ ]~-comp2~\[ \ ]/ label - -Domain@--~C.,.
~count - -T~paths - -~.
l im i t~ T. iTt,,, -'FINAL~T\ ~ jFINAL--T" r ight - - r ight__  ~lot,(8) (Nested ((HEAD) (@Adjacent word @AnyHead))In view oi' the difficulty of speakers to manage propernesting deeper than one level or two, RUG seems to getinto diffico lties in the right direction.3.
ConsistenceMaintainiug consistence is in general easy givenunification.
For instance, the functional uniquenessprinciple (grammatical functions are unique per clause) ispractically built in.
For another example, a verb can haveat most two grammatical case complements in Finnish.
Onthe other hand, each grammatical case can have a numberof function~ (SUB J, OBJ, PREDCOMP, OBL) depending on theverb.
These constraints are maintained in FRED9 byallowing verbs two grammatical complement slots compl,comp2 and specifying the function GrmFn of grammaticalcases as the alternation ofthese slots.
Further matching ofverbs with cases is associated to the verbs.
The two-waytransfer of information through cyclic pointers betweenhead and complement allows us to attach each constrainton the more informative member of the pair.4.
Complet~;nessConversely, completeness is in general more difficult toensure.
Completeness cannot be expressed in terms ofunification.
Syntax can perform completeness checking byimposing suitable constraints on strings of category S. Inparticular, certain features can act as flags or stacks whosevalues at the final state are checked in the S rule.
Moredirectly, the nonmonotonic devices described in Section 1.2allow expression of obligatoriness or default values.
As ageneral point, RUG grammars need not he restricted toparsing complete sentences oreven constituents.
A stringof words L'; incomplete in some sense if the functions ofsome words in it remain unresolved.
The string can stillobtain a .,~tructural description specifying that fact inaddition to whatever definite information can be gleanedfrom it.5.
AmbiguitySince syntactic ambiguity is coded on lexical entries,multiplication of lexical entries for a given word is to heexpected.
In FRED9, the following policies are followedwith regards to constraining lexical ambiguity.
First, theuse of unification makes it possible to replace some casesof ambigui'i;y with underspecification.Second, readings which are in complementary distributioncan sometimes be coded into one entry which is accesseddifferently by the different contexts.
FRED9 has just oneentry tbr the uses of the copula on as an auxiliary and as ama in  verb in both predicative and existentialconstructions.Third, ambiguities whose resolution has no effect onsurrounding context can be localized into regular pathexpression.
'~.Fourth, art ambiguity which is resolved by immediatecontext can be left as a lexical ambiguity.
The mainconsideration is that ambiguities do not begin to multiplyduring the parse.Footnote~1/Hausser \]986/imposes a similar estriction on categorialgrammar.2The formst is that of D-PATR/Karttunen 1986/.
:Lists ofform ((...)(-.))
represent path equations and atoms of form@... refer t~, grammar specific template definitions.3This is why in categorial gTammar, adjuncts areconstrued as functors.
Complements usually come out asargument's.
Cf.however Karttunen/1986/.4Cf.
/Kaplan and Zaenen 1986/.
REGDPATR allowsexpressing alternation and iteration of paths.Complcmentation s ot implemented.5Such checks can sometimes do the job of features actingas flags.6Cf.
the adjacency principle in/Itudson 1984/.ReferencesHausser, R. (1986) NEWCAT: Parsing Natural LanguageUsing Left-Associative Grammar.
Springer Verlag,Berlin/Heidelberg/New York, 1986.Hudson, R. Word Grammar.
(1984) Basil Blackwell,Oxford.Kaplan, R. and Zaenen, A.
(1986) Long-DistanceDependencies a a case of Functional Uncertainty.
InBaltin (ed.
), Alternative conceptions of PhraseStructure, New York.Karlsson, F. (1986) Process grammar, in DaM (ed.)
Papersfrom the iX Scand.
Conf.
of Linguistics, Stockholm.Karttunen, L. (1986a) D-PATR: a developmentenvironment for unification-based grammars.Proceedings of COL\[NG-86, Bonn, pp.
74-80.Karttunen, L. (1986b) Radical lexicalism, in Baltin (ed.
),Alternative Conceptions of Phrase Structure, NewYork.Shieber, S. (1986) An Introduction to Unification-BasedApproaches to Grammar.
CSLI Lecture Notes Series,No.
4 (distributed by the University of Chicago Press,Chicago, Illinois).Shieber, S.M., It.
Uszkoreit, F.C.N.
Pereira, J.J. Robinson,and M. Tyson (1933).
The Formalism andimplementation of PATR-II.
In Research oninteractive Acquisition and Use of Knowledge.Artificial Intelligence Center, SKI International:Menlo Park, California.105
