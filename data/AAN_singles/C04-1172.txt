Emdros ?
a text database engine for analyzed or annotated textUlrik PetersenDepartment of CommunicationUniversity of AalborgKroghstr?de 3DK ?
9220 Aalborg EastDenmarkulrikp@hum.aau.dkAbstractEmdros is a text database engine for linguisticanalysis or annotation of text.
It is applicca-ble especially in corpus linguistics for storingand retrieving linguistic analyses of text, at anylinguistic level.
Emdros implements the EMdFtext database model and the MQL query lan-guage.
In this paper, I present both, and give anexample of how Emdros can be useful in com-putational linguistics.1 IntroductionAs (Abeille?, 2003) points out, ?corpus-based lin-guistics has been largely limited to phenomena thatcan be accessed via searches on particular words.Inquiries about subject inversion or agentless pas-sives are impossible to perform on commonly avail-able corpora?
(p. xiii).Emdros is a text database engine which attemptsto remedy this situation in some measure.
Emdros?query language is very powerful, allowing the kindof searches which Abeille?
mentions to be formu-lated quickly and intuitively.
Of course, this pre-supposes a database which is tagged with the datanecessary for answering the query.Work has been done on supporting complexqueries, e.g., (Bird et al, 2000; Cassidy and Bird,2000; Mengel, 1999; Clarke et al, 1995).
Em-dros complements these pieces of work, providinga working implementation of many of the featureswhich these systems support.In this paper, I present the EMdF text databasemodel on which Emdros rests, and the MQL querylanguage which it implements.
In addition, I give anexample of how Emdros can be useful in answeringquestions in computational linguistics.2 History of EmdrosEmdros springs out of a reformulation and imple-mentation of the work done by Crist-Jan Doedens inhis 1994 PhD thesis (Doedens, 1994).
Doedens de-fined the MdF (Monads-dot-Features) text databasemodel, and the QL query language.
Doedens gave adenotational semantics for QL and loaded QL withfeatures, thus making it very difficult to implement.The present author later took Doedens?
QL, scaledit down, and gave it an operational semantics, hencemaking it easier to implement, resulting in the MQLquery language.
I also took the MdF model andextended it slightly, resulting in the EMdF model.Later, I implemented both, resulting in the Emdrostext database engine, which has been available asOpen Source software since October 2001.
Thewebsite1 has full sourcecode and documentation.Emdros is a general-purpose engine, not a spe-cific application.
This means that Emdros must beincorporated into a specific software application be-fore it can be made useful.3 The EMdF modelThe EMdF model is an extension of the MdF modeldeveloped in (Doedens, 1994).
The EMdF (Ex-tended MdF) model is based on four concepts:Monad, object, object type, and feature.
I describeeach of these in turn, and give a small example ofan EMdF database.3.1 MonadA monad is simply an integer.
The sequence of theintegers (1,2,3, etc.)
dictates the sequence of thetext.
The monads do not impose a reading-direction(e.g., left-to-right, right-to-left), but merely a logicaltext-order.3.2 ObjectAn object is simply a set of monads with an asso-ciated object type.
The set is arbitrary in the sensethat there are no restrictions on the set.
E.g., {1},{2}, {1,2}, {1,2,6,7} are all valid objects.
This al-lows for objects with gaps, or discontiguous objects(e.g., discontiguous clauses).
In addition, an objectalways has a unique integer id, separate from the theobject?s monad set.Objects are the building blocks of the text it-self, as well as the annotations or analyses in the1http://emdros.org/database.
To see how, we must introduce objecttypes.3.3 Object typeAn object type groups a set of objects into suchclasses as ?Word?, ?Phrase?, ?Clause?, ?Sentence?,?Paragraph?, ?Chapter?, ?Book?, ?Quotation?, ?Re-port?, etc.
Generally, when designing an Em-dros database, one chooses a monad-granularitywhich dictates the smallest object in the databasewhich corresponds to one monad.
This smallestobject is often ?Word?, but could be ?Morpheme?,?Phoneme?
or even ?Grapheme?.
Thus, for exam-ple, Word number 1 might consist of the object set{1}, and Word number 2 might consist of the ob-ject set {2}, whereas the first Phrase in the databasemight consist of the set {1,2}.3.4 FeatureAn object type can have any number of features.
Afeature is an attribute of an object, and always has atype.
The type can be a string, an integer, an enu-meration, or an object id.
The latter allows for com-plex interrelationships among objects, with objectspointing to each other, e.g., a dependent pointing toa head.An enumeration is a set of labels with values.
Forexample, one might define an enumeration ?psp?
(part of speech) with labels such as ?noun?, ?verb?,?adjective?, etc.
Emdros supports arbitrary defini-tion of enumeration label sets.3.5 ExampleConsider Figure 1.
It shows an EMdF database cor-responding to one possible analysis of the sentence?The door was blue.?
There are three object types:Word, Phrase, and Clause.
The Clause object typehas no features.
The Phrase object type has the fea-ture ?phr_type?
(phrase type).
The Word objecttype has the features ?surface?
and ?psp?.The monad-granularity is ?Word?, i.e., eachmonad corresponds to one monad.
Thus the wordwith id 10001 consists of the monad set {1}.
Thephrase with id 10005 consists of the monad set{1,2}.
The single clause object consists of themonad set {1,2,3,4}.The text is encoded by the ?surface?
featureon Word object type.
One could add features suchas ?lemma?, ?number?, ?gender?, or any otherfeature relevant to the database under construction.The Phrase object type could be given featuressuch as ?function?, ?apposition_head?,?relative_head?, etc.
The Clause object typecould be given features distinguishing such things as?VSO order?, ?tense of verbal form?, ?illocutionaryforce?, ?nominal clause/verbless clause?, etc.
It alldepends on the theory used to describe the database,as well as the research goals.1 2 3 4wordw: 10001surface: Thepsp: articlew: 10002surface: doorpsp: nounw: 10003surface: waspsp: verbw: 10004surface: blue.psp: adjectivephrasep: 10005phr_type: NPp: 10006phr_type: VPp: 10007phr_type: APclause c: 10008Figure 1: A small EMdF database4 The MQL query languageMQL is based on two properties of text which areuniversal: sequence and embedding.
All texts havesequence, dictated by the constraints of time and thelimitation of our human vocal tract to produce onlyone sequence of words at any given time.
In ad-dition, all texts have, when analyzed linguistically,some element of embedding, as embodied in the no-tions of phrase, clause, sentence, paragraph, etc.MQL directly supports searching for sequenceand embedding by means of the notion of topo-graphicity.
Originally invented in (Doedens, 1994),a (formal) language is topographic if and only ifthere is an isomorphism between the structure of anexpression in the language and the objects which theexpression denotes.MQL?s basic building block is the object block.An object block searches for objects in the databaseof a given type, e.g., Word, Phrase or Clause.
If twoobject blocks are adjacent, then the objects whichthey find must also be adjacent in the database.
Ifan object block is embedded inside another objectblock, then the inner object must be embedded inthe outer object in the database.Consider Figure 2.
It shows two adjacent objectblocks, with feature constraints.
This would findtwo Phrase objects in the database where the first isan NP and the second is a VP.
The objects must beadjacent in the database because the object blocksare adjacent.
[Phrase phrase_type = NP][Phrase phrase_type = VP]Figure 2: Two adjacent object blocksNow consider Figure 3.
This query would finda clause, with the restriction that embedded insidethe clause must be two phrases, a subject NP anda predicate VP, in that order.
The ?..?
operatormeans that space is allowed between the NP and theVP, but the space must be inside the limits of thesurrounding clause.
All of this presupposes an ap-propriately tagged database, of course.
[Clause[Phrase phrase_type = NPand function = Subj]..[Phrase phrase_type = VPand function = Pred]]Figure 3: Examples of embeddingThe restrictions of type?phrase_type = NP?
refer to features (orattributes) of the objects in the database.
The re-striction expressions can be any Boolean expression(and/or/not/parentheses), allowing very complexrestrictions at the object-level.Consider Figure 4.
It shows how one can lookfor objects inside ?gaps?
in other objects.
In somelinguistic theories, the sentence ?The door, whichopened towards the East, was blue?
would consist ofone discontiguous clause (?The door .
.
.
was blue?
)with an intervening nonrestrictive relative clause,not part of the surrounding clause.
For a sustainedargument in favor of this interpretation, see (Mc-Cawley, 1982).
The query in Figure 4 searches forstructures of this kind.
The surrounding context isa Sentence.
Inside of this sentence, one must find aClause.
The first object in this clause must be a sub-ject NP.
Directly adjacent to this subject NP must bea gap in the surrounding context (the Clause).
In-side of this gap must be a Clause whose clause typeis ?nonrestr_rel?.
Directly after the close ofthe gap, one must find a VP whose function is pred-icate.
Mapping this structure to the example sen-tence is left as an exercise for the reader.
[Sentence[Clause[Phrase FIRST phrase_type = NPand function = Subj][gap[Clause cl_type = nonrestr_rel]][Phrase phrase_type = VPand function = Pred]]]Figure 4: An example with a gapLastly, objects can refer to each other in thequery.
This is useful for specifying such things asagreement and heads/dependents.
In Figure 5, the?AS?
keyword gives a name (?w1?)
to the noun in-side the NP, and this name can then be used insidethe adjective in the AdjP to specify agreement.
[Phrase phrase_type = NP[Word AS w1 psp = noun]][Phrase phrase_type = AdjP[Word psp = adjectiveand number = w1.numberand gender = w1.gender]]Figure 5: Example with agreementMQL provides a number of features not coveredin this paper.
For full documentation, see the web-site.The real power of MQL lies in its ability to ex-press complex search restrictions both at the levelof structure (sequence and embedding) and at theobject-level.5 ApplicationOne prominent example of an Emdros database inuse is the Werkgroep Informatica (WI) database ofthe Hebrew Bible developed under Prof. Dr. EepTalstra at the Free University of Amsterdam.
TheWI database is a large text database comprising asyntactic analysis of the Hebrew Bible (also calledthe Old Testament in Hebrew and Aramaic).
This isa 420,000 word corpus with about 1.4 million syn-tactic objects.
The database has been analyzed upto clause level all the way through, and has beenanalyzed up to sentence level for large portions ofthe material.
A complete description of the databaseand the underlying linguistic model can be found in(Talstra and Sikkel, 2000).In the book of Judges chapter 5 verse 1, we aretold that ?Deborah and Barak sang?
a song.
Debo-rah and Barak are clearly a plural entity, yet in He-brew the verb is feminine singular.
Was this an in-stance of bad grammar?
Did only Deborah sing?Why is the verb not plural?In Hebrew, the rule seems to be that the verbagrees in number and gender with the first item in acompound subject, when the verb precedes the sub-ject.
This has been known at least since the 19thcentury, as evidenced by the Gesenius-Kautzschgrammar of Hebrew, paragraph 146g.With Emdros and the WI database, we can val-idate the rule above.
The query in Figure 6 finds234 instances, showing that the pattern was not un-common, and inspection of the results show that theverb most often agrees with the first member of thecompound subject.
The 234 ?hits?
are the bare re-sults returned from the query engine.
It is up to theresearcher to actually look at the data and verify orfalsify their hypothesis.
Also, one would have tolook for counterexamples with another query.
[Clause[Phrase function = Pred[Word AS w1 psp = verband number = singular]]..[Phrase function = Subj[Word (psp = nounor psp = proper_nounor psp = demonstrative_pronounor psp = interrogative_pronounor psp = personal_pronoun)and number = singularand gender = w1.gender]..[Word psp = conjunction]]]Figure 6: Hebrew exampleThe query finds clauses within which there aretwo phrases, the first being a predicate and the sec-ond being a subject.
The phrases need not be adja-cent.
The predicate must contain a verb in the sin-gular.
The subject must first contain a noun, propernoun, or pronoun which agrees with the verb innumber and gender.
Then a conjunction must followthe noun, still inside the subject, but not necessarilyadjacent to the noun.The WI database is the primary example of anEmdros database.
Other databases stored in Em-dros include the morphologically encoded HebrewBible produced at the Westminster Hebrew Institutein Philadelphia, Pennsylvania, and a corpus of 67million words in use at the University of Illinois atUrbana-Champaign.6 ConclusionIn this paper, I have presented the EMdF modeland the MQL query language as implemented inthe Emdros text database engine.
I have shown howMQL supports the formulation of complex linguis-tic queries on tagged corpora.
I have also given anexample of a specific problem in Hebrew linguis-tics which is nicely answered by an Emdros query.Thus Emdros provides a solid platform on whichto build applications in corpus linguistics, capableof answering linguistic questions of a complexityhigher than what most systems can offer today.AcknowledgementsMy thanks go to Constantijn Sikkel of the Werk-groep Informatica for coming up with the problemfor the Hebrew query example.ReferencesAnne Abeille?.
2003.
Introduction.
In AnneAbeille?, editor, Treebanks ?
Building and UsingParsed Corpora, volume 20 of Text, Speech andLanguage Technology, pages xiii?xxvi.
KluwerAcademic Publishers, Dordrecht, Boston, Lon-don.Steven Bird, Peter Buneman, and Wang-ChiewTan.
2000.
Towards a query language for an-notation graphs.
In Proceedings of the Sec-ond International Conference on Language Re-sources and Evaluation, pages 807?814.
Eu-ropean Language Resources Association, Paris.http://arxiv.org/abs/cs/0007023.Steve Cassidy and Steven Bird.
2000.
Query-ing databases of annotated speech.
In Databasetechnologies: Proceedings of the Eleventh Aus-tralasian Database Conference, pages 12?20.IEEE Computer Society.Charles L. A. Clarke, G. V. Cormack, and F. J.Burkowski.
1995.
An algebra for structured textsearch and a framework for its implementation.The Computer Journal, 38(1):43?56.Christianus Franciscus Joannes Doedens.
1994.Text Databases: One Database Model and Sev-eral Retrieval Languages.
Number 14 in Lan-guage and Computers.
Editions Rodopi Amster-dam, Amsterdam and Atlanta, GA.James D. McCawley.
1982.
Parentheticals and dis-continuous constituent structure.
Linguistic In-quiry, 13(1):91?106.Andreas Mengel.
1999.
MATE deliverable D3.1?
specification of coding workbench: 3.8improved query language (Q4M).
Technicalreport, Institut fu?r Maschinelle Sprachverar-beitung, Stuttgart, 18 Nov. http://www.ims.uni-stuttgart.de/projekte/mate/q4m/.Eep Talstra and Constantijn Sikkel.
2000.Genese und Kategorienentwicklung der WIVU-Datenbank.
In Christof Hardmeier, Wolf-DieterSyring, Jochen D. Range, and Eep Talstra,editors, Ad Fontes!
Quellen erfassen - lesen -deuten.
Was ist Computerphilologie?, volume 15of APPLICATIO, pages 33?68, Amsterdam.
VUUniversity Press.
