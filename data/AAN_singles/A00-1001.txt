BusTUC - A natura l  l anguage bus  route  o rac leTore AmbleDept.
of computer and information scienceUniversity of TrondheimNorway, N-7491amble@idi, ntnu.
noAbstractThe paper describes a natural anguage based expertsystem route advisor for the public bus transportin Trondheim, Norway.
The system is available onthe Internet,and has been intstalled at the bus com-pany's web server since the beginning of 1999.
Thesystem is bilingual, relying on an internal anguageindependent logic representation.1 Introduct ionA natural anguage interface to a computer databaseprovides users with the capability of obtaining in-formation stored in the database by querying thesystem in a natural language (NL).
With a naturallanguage as a means of communication with a com-puter system, the users can make a question or astatement in the way they normally think about theinformation being discussed, freeing them from hav-ing to know how the computer stores or processesthe information.The present implementation represents a a majoreffort in bringing natural anguage into practical use.A system is developed that can answer queries aboutbus routes, stated as natural language texts, andmade public through the Internet World Wide Web( http : //www.
idi.
ntnu.
no/bustuc/).Trondheim is a small city with a university and140000 inhabitants.
Its central bus systems has 42bus lines, serving 590 stations, with 1900 depar-tures per day (in average).
That gives approximately60000 scheduled bus station passings per day, whichis somehow represented in the route data base.The starting point is to automate the function ofa route information agent.
The following exampleof a system response is using an actual request overtelephone to the local route information company:Hi, I live in Nidarvoll and tonight imust reach a train to Oslo at 6 oclock.and a typical answer would follow quickly:Bus number 54 passes by Nidarvoll skoleat 1710 and arrives at Trondheim RailwayStation at 1725.In between the question and the answer is a pro-cess of lexical analysis, syntax analysis, semanticanalysis, pragmatic reasoning and database queryprocessing.One could argue that the information contentcould be solved by an interrogation, whereby thecustomer is asked to produce 4 items: s ta t ionof departure, station of arrival, earliestdeparture timeand/or latest arrival time.
Itis a myth that natural language is a better way ofcommunication because it is "natural language".The challenge is to prove by demonstration thatan NL system can be made that will be preferredto the interrogative mode.
To do that, the systemhas to be correct, user friendly and almost completewithin the actual domain.2 Previous Efforts, CHAT-80,PRAT-89 and HSQLThe system, called BusTUC is built upon the clas-sical system CHAT-80 (Warren and Pereira, 1982).CHAT-80 was a state of the art natural anguage sys-tem that was impressive on its own merits, but alsoestablished Prolog as a viable and competitive lan-guage for Artificial Intelligence in general.
The sys-tem was a brilliant masterpiece of software, efficientand sophisticated.
The natural anguage system wasconnected to a small query system for internationalgeography.
The following query could be analysedand answered in a split second:Which country bordering the Mediterraneanborders a country that is bordered by acountry whose population exceeds thepopulation of India?
(The answer 'Turkey' has become incorrect astime has passed.
The irony is that Geography waschosen as a domain without time.
)The abi!ity to answer ridiculously long queries isof course not the main goal.
The main lesson is thatcomplex sentences are analysed with a proper under-standing without sacrificing efficiency.
Any superfi-cial pattern matching technique would prove futilesooner or later.2.1 Making a Norwegian CHAT-80,PRAT-89At the University of Trondheim (NTNU), two stu-dents made a Norwegian version of CHAT-80,calledPRAT-89 (Teigen and Vetland, 1988),(Teigen andVetland, 1989).
(Also, a similar Swedish projectSNACK-85 was reported).The dictionary was changed from English to Nor-wegian together with new rules for morphologicalanalysis.
The change of grammar from English toNorwegian proved to be amazingly easy.
It showedthat the langauges were more similar than one wouldbelieve, given that the languages are incomprehen-sible to each other's communities.After changing the dictionary and graramar, thefollowing Norwegian query about the same domaincould be answered correctly in a few seconds.Hvilke afrikanske land som hat enbefolkning stoerre enn 3 millionerog mindre enn 50 millioner og er nordfor Botswana og oest for Libya hat enhovedstad som hat en befolkning stoerreenn 100 tusen.
( A translation is beside the point o.f being a longquery in Norwegian.
)2.2 HSQL - Help System for SQLA Nordic project HSQL (Help System for SQL) wasaccomplished in 1988-89 to make a joint Nordic ef-fort interfaces to databases.The HSQL project was led by the Swedish StateBureau (Statskontoret), with participants from Swe-den, Denmark, Finland and Norway (Amble et al,1990).
The aim of HSQL was to build a naturallanguage interface to SQL databases for the Scandi-navian languages Swedish, Danish and Norwegian.These languages are very similar, and the Norwe-gian version of CHAT-80 was easily extended to theother Scandinavian languages.
Instead of Geogra-phy, a more typical application area was chosen tobe a query system for hospital administration.
Wedecided to target an SQL database of a hospital ad-ministration which had been developed already.The next step was then to change the domainof discourse from Geography to hospital adminis-tration, using the same knowledge representationtechniques used in CHAT-80.
A semantic model ofthis domain was made, and then implemented in theCHAT-80 framework.The modelling technique that proved adequatewas to use an extended Entity Relationship (ER)model with a class (type) hierarchy, attributes be-longing to each class, single inheritance ofattributesand relationships.Coupling the system to an SQL database.After the remodelling, the system could answerqueries in "Scandinavian" to an internal hospitaldatabase as well as CHAT-80 could answer Geog-raphy questions.
HSQL produced a Prolog-like codeFOL (First Order Logic) for execution.
A mappingfrom FOL to the data base Schema was defined, anda translator from FOL to SQL was implemented.The exampleHvilke menn ligger i en kvinnes seng?
(Which men lie in a woman's bed?
)would be translated ryly into the SQL query:SELECT DISTINCTT3.name,Tl.sex,T2.reg_no,T3.sex,T4.reg_no,T4.bed_no,T5.hosp_no,T5.ward_noFROM PATIENT TI,OCCUPANCY T2,PATIENT T3,OCCUPANCY T4,WARD T5WHERE(Tl.sex='f') AND(T2.reg_no=Tl.reg_no) AND(T3.sex='m') AND(T4.reg_no=T3.reg_no) AND(T4.bed_no=T2.bed_no) AND(T5.hosp_no=T4.hosp_no) AND(T5.ward_no=T4.ward_no)2.3 The The Understanding ComputerThe HSQL was a valuable xperience in the effortto make transportable natural anguage interfaces.However, the underlying system CHAT-80 restrictedthe further development.After the HSQL Project was finished, an inter-nal reseach project TUC (the Understanding Com-puter) was initiated at NTNU to carry on the resultsfrom HSQL.
The project goals differed from those ofHSQL in a number of ways, and would not be con-cerned with multimedia interfaces .
On the otherhand, portability and versatility were made centralissues concerning the generality of the language andits applications.
The research goals could be sum-marised as to?
Give computers an operational understandingof natural language.?
Build intelligent systems with natural languagecapabilities.?
Study common sense reasoning in natural an-guage.A test criterion for the understanding capacity isthat after a set of definitions in a Naturally Read-able Logic, NRL, the system's answer to queries inNRL should conform to the answers of an idealisedrational agent.Every man that lives loves Mary.John is a man.
John lives.Who loves Mary?==> JohnNRL is defined in a closed context.
Thus in-terfaces to other systems are in principle definedthrough simulating the environment as a dialoguepartner.TUC is a prototypical natural language proces-sor for English written in Prolog.
It is designed tobe a general purpose easily adaptable natural lan-guage processor.
It consists of a general grammarfor a subset of English, a semantic knowledge base,and modules for interfaces to other interfaces likeUNIX, SQL-databases and general textual informa-tion sources.2.4 The  TABOR ProjectIt so happened that a Universtity Project was start-eded in 1996, called TABOR ( " Speech based userinterfaces and reasoning systems "), with the aim ofbuilding an automatic public transport route oracle,available over the public telephone.
At the onset ofthe project, the World Wide Web was fresh, and notas widespread as today, and the telephone was stillregarded as the main source of information for thepublic.Since then, the Internet became the dominantmedium, and it is as likeley to find a computer withInternet connection, as to find a local busroute table.
( The consequtive wide spreading of cellular phoneschanged the picture in favour of the telephone, butthat is another story).It was decided that a text based information sys-tem should be built, regardless of the status of thespeech rocgnition and speech synthesis effort, whichproved to lag behind after a while.The BusTUC systemThe resulting system BusTUC grew out as a naturalapplication of TUC, and an English prototype couldbe built within a few months (Bratseth, 1997).Since the summer 1996, the prototype was putonto the Internet, and been developed and testedmore or less continually until today.
The most im-portant extension was that the system was madebilingual (Norwegian and English) during the fall1996.In spring 1999, the BusTUC was finally adoptedby the local bus company in Trondheim ( A/STrondheim Trafikkselskap), which set up a server (a 300 MHz PC with Linux).Until today, over 150.000 questions have been an-swered, and BusTUC seems to stabilize and growincreasingly popular.33 Anatomy o f  the  bus  route  orac leThe main components of the bus route informationsystems are:?
A parser system, consisting of a dictionary, alexical processor, a grammar and a parser.?
A knowledge base (KB), divided into a semanticKB and an application KB?
A query processor, contalng a routing logic sys-tem, and a route data base.The system is bilingual and contains a double setof dictionary, morphology and grammar.
Actually, itdetects which language is most probable by count-ing the number of unknown words related to eachlanguage, and acts accordingly.
The grammars aresurprisingly similar, but no effort is made to coa-lesce them.
The Norwegian grammar is slightly big-ger than the English grammar, mostly because it ismore elaborated but also because Norwegian allowsa freer word order.3.1 Features  of  BusTUCFor the Norwegian systems, the figures give an in-dication of the size of the domain: 420 nouns, 150verbs, 165 adjectives, 60 prepositions, etc.There are 1300 grammar ules ( 810 for English)although alf of the rules are very low level.The semantic net described below contains about4000 entries.A big name table of 3050 names in addition tothe official station names, is required to capture thevariety of naming.
A simple spell correction is a partof the system ( essentially 1 character errors).The pragmatic reasoning is needed to translate theoutput from the parser to a route database querylanguage .
This is done by a production systemcalled Pragma, which acts like an advanced rewrit-ing system with 580 rules.In addition, there is another ule base for actuallygenerating the natural anguage answers (120 rules).The system is mainly written in Prolog (SicstusProlog 3.7), with some Perl programs for the com-munication and CGI-scripts.At the moment, there are about 35000 lines ofprogrammed Prolog code (in addition to route tableswhich are also in Prolog).Average response time is usually less than 2 sec-onds, but there are queries that demand up to 10seconds.The error rate for single, correct, complete andrelevant questions is about 2 percent.3.2 The Parser SystemThe Grammar SystemThe grammar is based on a simple grammar forstatements, while questions and commands are de-rived by the use of movements.
The grammarformalism which is called Consensical Grammar,(CONtext SENSitive CompositionAL Grammar) isan easy to use variant of Extraposition Grammar(Pereira and Warren, 1980), which is a generalisa-tion of Definite Clause Grammars.
Compositionalgrammar means that the semantics of a a phrase iscomposed of the semantics of the subphrases; the ba-sic constituents being a form of verb complements.As for Extraposition grammars, a grammar is trans-lated to Definite Clause Grammars, and executed assuch.A characteristic syntactic expression in Consen-sical Grammar  may define an incomplete constructin terms of a "difference " between complete con-structs.
When possible, the parser will use the sub-tracted part in stead of reading from the input, aftera gap if necessary.
The effect is the same as for Ex-traposition grammars, but the this format is moreintuitive.Examples of grammar rules.which is analysed asfor which X is it true thatthe (X) person has a dog that barked?where the last line is analysed as a statement.Movement is easily handled in Consensical Gram-mar without making special phrase rules for eachkind of movement.
The following example showshow TUC manages a variety of analyses using move-ments:Max said Bill thoughtJoe believed Fido Barked.Who said Bill thoughtJoe believed Fido barked?
==> MaxWho did Max say thoughtJoe believed Fido barked?
==> Billstatement(P) --->noun_phrase(X,VP,P),verb_phrase(X,VP).statement(Q) --->verb_complementsO(VC),ZZ initial optional verb complementsstatement(Q) -...verb_complementsO(VC).ZZ may be inserted after a gapwhoseq(P) ---> Z whose dog barked?\[whose\],hOlm(N),whoq(P) - ~ without gap(\[who\],\[has\],\[a\],noun(N),\[that\]).whoq(P) --->\[who\],whichq(P) - (\[which\],\[person\]).whichq(which(X)::P) --->\[which\],statement(P) - the(X).Example:Whose dog barked?is analysed as if the sentence had beenWho has a dog that  barked?which is analysed asWhich person has a dog that  barked?Who did Max say Bill thoughtbelieved Fido barked?
==> JoeThe parserThe experiences with Consensical grammars are abit mixed however.
The main problem is the parsingmethod itself, which is top down with backtracking.Many principles that would prove elegant for smalldomains turned out to be too costly for larger do-mains, due to the wide variety of modes of expres-sions, incredible ambiguities and the sheer size of thecovered language.The disambiguation is a major problem for smallgrammars and large languages, and was solved bythe following guidelines:?
a semantic type checking was integrated into theparser, and would help to discard sematica/lywrong parses from the start.?
a heuristics was followed that proved almost ir-reproachable: The longest possible phrase of acategory that is semantically correct is in mostcases the preferred interpretation.?
due to the perplexity of the language, somecommitted choices (cuts) had to be inserted intothe grammar at strategic places.
As one couldfear however, this implied that wrong choicesbeing made at some point in the parsing couldnot be recovered by backtracking.These problems also made it imperative to intro-duce a timeout on the parsing process of embarass-ing 10 seconds.
Although most sentences, would beparsed within a second, some legal sentences ofmod-erate size actually need this time.43.3 The semantic knowledge baseAdaptability means that the system does not needto be reprogrammed foreach new application.The design principle of TUC is that most of thechanges are made in a tabular semantic knowledgebase, while there is one general grammar and dictio-nary.
In general, the logic is generated automaticallyfrom the semantic knowledge base.The nouns play a key role in the understandingpart as they constitute the class or type hierarchy.Nouns are defined in an a-kind-of hierarchy.
Thehierarchy is tree-structured with single inheritance.The top level also constitute the top level ontologyof TUC's world.In fact, a type check of the compliances of verbs,nouns adjectives and prepositions i  not only neces-sary for the semantic processing but is essential forthe syntax analysis for the disambiguation aswell.In TUC, the legal combinations are carefully assem-bled in the semantic network, which then serves adual purpose.These semantic definitions are necessary to allowfor instance the following sentencesThe dog saw a man with a telescope.The man saw a dog with a telescope.to be treated differently because with telescopemay modify the noun man but not the noun dog,while with telescope modifies the verb see, re-stricted to person.3.4 The Query ProcessorEvent CalculusThe semantics of the phrases are built up by a kindof verb complements, where the event play a centralrole.The text is translated from Natural anguage intoa form called TQL (Temporal Query Language/TUC Query Language) which is a first order eventcalculus expression, a self contained expression con-taining the literal meaning of an utterance.A formalism TQL that was defined, inspired bythe Event Calculus by Kowalski and Sergot (Kowal-ski and Sergot, 1986).The TQL expressions consist of predicates, func-tions, constants and variables.
The textual wordsof nouns and verbs are translated to generic predi-cates using the selected interpretation.
The follow-ing questionDo you know whether the bus goesto Nidar on Saturday ?would give the TQL expression below.
Typically,the Norwegian equivalentVet du om bussen gaartil Nidar paa soendag ?5gives exactly the same code.test:: %isa(real,program,tuc), %isa(real,bus,A), %isa(real,saturday,B), %isa(real,place,nidar), %event(real,D), %Type of questiontuc is a programA is a real busB isa saturdayNidar is a placeD is an eventknow(whether,tuc,C,D), Y.
C was known at Devent (C , E) , Y. E is an event in Caction(go,E), Y. the action of E is Goactor(A,E), Y. the actor of E is Asrel(to,place,nidar,E),Y. E is to nidarsrel(on,time,B,E), y, E is on the saturday BThe event parameter plays an important role inthe semantics.
It is used for various purposes.
Themost salient role is to identify a subset of time andspace in which an action or event occured.
Both theactual time and space coordinates are connected tothe actions through the event parameter.Pragmatic reasoningThe TQL is translated to a route database querylanguage (BusLOG) which is actually a Prolog pro-gram.
This is done by a production system calledPragma, which acts like an advanced rewriting sys-tem with 580 rules.In addition, there is another rule base for actuallygenerating the natural language answers (120 rules).4 Conc lus ionsThe TUC approach as as its goal to automate thecreation of new natural language interfaces for a welldefined subset of the language and with a minimumof explicit programming.The implemented system has proved its worth,and is interesting if for no other reason.
There isalso an increasing interest from other bus compa-nies and route information companies alike to get asimilar system for their customers.Further work remains to make the parser reallyefficient, and much work remains to make the lan-guage coverage complete within reasonable imits.It is an open question whether the system of thiskind will be a preferred way of offering informationto the public.If it is, it is a fair amount of work to make it aportable system that can be implemented lsewhere,also connecting various travelling agencies.If not, it will remain a curiosity.
But anyway, asystem like this will be a contribution to the devel-opment of intelligent systems.Re ferencesTore Amble, Erik Knudsen, Aarno Lehtola, JanLjungberg, and Ole Ravnholt.
1990.
NaturligSpr~k och Grafik - nya vSgar inn i databaser.Statskontoret.
Rapport om HSQL, ett kunskaps-baseret hj~lpsystem fSr SQL.Jon S. Bratseth.
1997.
BusTUC - A Natural Lan-guage Bus Traffic Informations System.
Master'sthesis, The Norwegian University of Science andTechnology.R.
Kowalski and M. Sergot.
1986.
A logic basedcalculus of events.
New Generation Computing,8(0):67-95.F.C.N.
Pereira and D.H.D.
Warren.
1980.
Definiteclause grammar for language analysis.
ArtificialIntelligence, 0(3).J.
Teigen and V. Vetland.
1988.
Syntax analysis ofnorwegian language.
Technical report, The Nor-wegian Institute of Technology.J.
Teigen and V. Vetland.
1989.
Handling reason-able questions beyondthe linguistic and conceptual coverage ofnatural anguage interfaces.
Master's thesis, TheNorwegian Institute of Technology.D.H.D Warren and F.C.N.
Pereira.
1982.
An effi-cient and easily adaptable system for interpretingnatural language queries.
Computational Linguis-tics, 8(3-4).6
