LAMBEK THEOREM PROVING ANDFEATURE UNIFICATIONErik-Jan van der Linden*Institute for Language Technology and Artificial IntelligenceTilburg UniversityPO Box 90153, 5000 LE Tilburg, The Netherlands1 ABSTRACTFeature Unification can be integrated with Lam-bek Theorem Proving in a simple and straightfor-ward way.
Two principles determine all distribu-tion of features in LTP.
It is not necessary to stip-ulate other principles or include category-valuedfeatures where other theories do.
The structure ofcategories i discussed with respect o the notionof category structure of Gazdar et al (1988).2 INTRODUCTIONA tendency in current linguistic theory is to shiftthe 'explanatory burden' from the syntactic om-ponent o the lexicon.
Within Categorial Gram-mar (CG), this so-cailed lexicalist principle is im-plemented in a radical fashion: syntactic infor-mation is projected entirely from category struc-ture assigned to lexical items (Moortgat, 1988).A small set of rules like (1) constitutes the gram-mar.
The rules reduce sequences of categories toone category.
(1) X:a X\Y:b => Y:b(a)CG implements the Compositionality Principleby stipulating a correspondence b tween syntac-tic operations and semantic operations (Van Ben-them 1986).An approach to the analysis of natural anguagein CG is to view the categorial reduction system,the set of reduction rules, as a calculus, whereparsing of a syntagm is an attempt to prove that* Part of the research described in this paper was carriedout within the 'Categorial Parser Project' at ITI-TNO.
Iwish to thank the people whom I had the pleasure to coop-erate with within this project: Brigit van Berkel, MichaelMoortgat and Adriaan van Paassen.
Gosse Bourns, HarryBunt, Bart Geurts, Elias Thijsse, Ton van der Wouden,and three anonymous ACL reviewers made stlmu18tingcomments on earlier versions of this paper.
MichaelMoortgat generously supplied a copy of the interpreterdescribed in his 1988 dissertstionit follows as a theorem from a set of axioms andinference rules.
Especially by the work of VanBenthem (1986) and Moortgat (1988) this view,which we will name with Moortgat (1987a) Lam-bek Theorem Proving (LTP; Lambek, 1958), hasbecome popular among a number of linguists.The descriptive power of LTP can be extended ifunification (Shieber, 1986) is added.
Several the-ories have been developed that combine catego-rial formalisms and unification based formalisms.Within Unification Categorial Grammar (UCG,Calder et al, 1988, Zeevat et al, 1986) unification"is the only operation over grammatical objects"(Calder et al 1988, p. 83), and this includessyntactic and semantic operations.
Within Cat-egorial Unification Grammar (Uszkoreit, 1986;Bouma, 1988a), reduction rules are the main op-eration over grammatical objects, but semanticoperations are reformulated within the unificationformalism, as properties oflexemes (Bouma et al,1988).
These formalisms thus lexicalize semanticoperations.The addition of unification to the LTP formalismdescribed in this paper maintains the rules of thesyntactic and semantic alculus as primary opera-tions, and adds unification to deal with syntacticfeatures only.
We will refer to this addition asFeature Unification (FU), and we will call the re-suiting theory LTP-FU.In this paper firstly the building blocks of thetheory, categories and inference rules, will be de-scribed.
Then two principles will be introducedthat determine the distribution of features, notonly for the rules of the calculus, but also forreduction rules that can be derived within thecalculus.
From the discussion of an example itis concluded that it is not necessary to stipulateother principles or include category-valued fea-tures where other theories do.190 -3 CATEGORIESIn LTP categories and a set of inference rulesconstitute the calculus.
The addition of FU ne-cessitates the extension of these with respect toLTP without FU.
Categories are for a start de-fined in the framework introduced by Gazdar etal.
(1988).
Gazdar et al define category struc-ture on a metatheoretical level as a pair < ~., 6">.E is a quadruple<F, A, % p> where F is a fi-nite set of features; A is a set of atoms; r is afunction that divides the set of features into twosets, those that take atomic values (Type 0 fea-tures), and those that take categories as values(Type 1).
p is a function that assigns a range ofatomic values to each Type 0 feature.
C is a setof constraints expressed in a language Lc.
Thereader is referred to Gazdar et al (1988) for aprecise definition of this language: we will merelyuse it here.
For LTP-FU, the category structurein (2) and the constraints in (3) apply.
(2)F : { DOMAIN, RANGE, FIRST, LAST, CON-NECTIVE, LABEL} (3 FEAT_NAMESFEAT_NAMES = {PERSON, .... , TENSE}A : BASCAT U CONNECTIVES UFEAT_VALUESBASCAT : { N, V,...}CONNECTIVES : { / , \ , .
}FEAT_VALUES : {1,2,3, ..... }r = { <DOMAIN, I>, <RANGE, 1>, <FIRST,I>, <LAST, I>, <CONNECTIVE,0>,...}p = { <CONNECTIVE, CONNECTIVES>,<LABEL, BASCAT>, <PERSON, {1,2,3,}>,...}(3)(a) \[3(CONNECTIVE ~-, -1 LABEL)(b) n(DOMAIN ~ RANGE)(c) O(DOMAIN ~ CONNECTIVE:( / V \) )(d) rT(FIRST *-* CONNECTIVE:*)(e) n(F IRST ~ LAST)(f) n(RANGE:f- - -  f/~ FEAT_NAMES)The fact that ~category' is a central notionin CG justifies the division between featuresthat express syntactic combinatorial possibili-ties ({DOMAIN,..., LABEL}) and other features(FEAT_NAMES) in (2) 1In what follows we will use 'feature structure' todenote a set of feature-value combinations with*This view can for instance be found in the followingcitation from Calder et al (1986): "(..) these \[categories\]can carry additionol feature specifications" (Calder et al,1986, p. 7; my emphasis).features from FEAT_NAMES.
We will use 'cate-gory' in the sense common in categorial linguis-tics.
For a category with feature structure, wewill use the term 'category specification'.Constraint (3)(a) ensures that a category is ei-ther complex or basic.
Functor categories, thosewith the connective \ or / are specified by (3)(b),(3)(c); other complex categories are specified by(3)(d) and (e); (3)(f) describes the distributionof features from FEAT.NAMES.
Here we followBouma (1988a) in the addition of features to com-plex categories.
Firstly features are added tothe argument (DOMAIN) in a complex category.This is "to express all kinds of subcategoriza-tion properties which an argument has to meetas it functions as the complement of the functor"(Bouma, 1988a, p. 27).
Secondly, the category asa whole, rather than the RANGE carries features.
"This has the advantage that complex categoriescan be directly characterized asfinite, verbal etc.
"(Bouma, 1988a, p. 27; of.
Bach, 1983).4 INFERENCE-RULESA sequent in the calculus is denoted with P :>  T,where P, called the antecedent, and T, the sucee-dent, are finite sequences of category specifica-tions: P : K1 ... K,, and T : L. In LTP Pand T are required to be non-empty; notice thatthe suceedent contains one and only one categoryspecification.
The axioms and inference rules ofthe calculus define the theorems of the categorialcalculus.
Recursive application of the inferencerules on a sequent may result in the derivation ofa sequent as a theorem of the calculus.In what follows, X, Y and Z are categories;A,B,C,D and E are feature structures; K,L,M,Nare category specifications; P, T, Q, U, V aresequences of category specifications, where P, Tand Q are non-empty.
We use the notation cate-gory;feature structure:seraa~tics.Axioms are sequents of the form X;A:a => X;A:a.Note that identical etters for categories and se-mantic formulas denote identical categories andidentical semantic formulas; identical etters forfeature structures mean unified feature struc-tures; and identical etters for category specifi-cations mean category specifications with iden-tical categories and unified features structures.From the form of the axiom it may follow thatfeature structures in antecedent and succedentshould unify.
This principle is the Axiom Fea-ture Convention (AFC).In (4) the inference rules of LTP-FU are pre-- 191  -sented 2.
\[\ _ el denotes a rule that eliminatesa \-connective.
i denotes introduction.
The 'ac-tive type' in a sequent is the category from whichthe connective is removed.
(4)\ [ / -e l  U , (X /Y ; t ) ;B :b ,T ,V  => Zif T => Y;A:aand U ,X ;B :b(a ) ,V  => Z\ [ \ -e l  U ,T , (Y ; t \X ) ;B :b ,V  => Zi f  T => Y;A:aand U,X;B:b(a) ,V  => Z\ [ * -e l  U, K:a*L:b,V => Mi f  U ,K :a ,L :b ,V  => M\ [ / - i \ ]  T => (X /Y ;A) ;B : 'v .bi f  T,Y;A:v => X;B:b\ [ \ - i \ ]  T => (Y ; t \X ) ;B ; 'v .bi f  Y;A :v ,  T => X;B:b\ [ * - i \ ]  P :a ,Q:b  => K*L:c*di f  P :a  => K:?and Q:b => L:dCertain feature structures are required to unifyin inference rules.
We formulate the so-called Ac-tive Functor Feature Convention (AFFC) to con-trol the distribution of features.
This conventionis comparable to Head Feature Convention (Gas-dar et al, 1985) and Functor Feature Convention(Bouma, 1988a).
The AFFC states that the fea-ture structure of an active functor type must beunified with the feature structure on the RANGEof the functor in the subsequent.5 AN EXAMPLEThis paragraph limits itself to some observationsconcerning reflexives because this sheds light ona remaining question: are there principles otherthan AFFC and AFC necessary to account for' FOOT '  phenomena?There are two properties of reflexive pronounsthat have to be accounted for in the theory.~To envisage the rules without FU, just leave out allfeature structuresFirstly, the reflexive pronoun has to agree in num-ber, person, and gender with some antecedent inthe sentence (Chierchia, 1988), mostly the sub-ject.
Secondly, the reflexive pronoun is not nec-essarily the head of a constituent (Gazdar et al,1985).The HFC in GPSG (Gazdar et al, 1985) cannotinstantiate the antecedent information of a reflex-ive pronoun on a mothernode in cases where thereflexive is not the head of a constituent.
There-fore in GPSG the so-called FOOT Feature Princi-ple (FFP) is formulated.
Together with the Con-trol Agreement Principle (CAP) and the HFC,the FFP ensures that agreement between the de-manded antecedent and the reflexive pronoun isobtained.
Inclusion of a principle similar to FFP,and the use of category-valued features could be asolution for CUG.
However, a solution that makesuse of means supplied by categorial theory wouldkeep us from 'stipulating axioms and principled',and as we will see, has as a consequence that wecan avoid the use of category-valued features.For an account of reflexives in LTP-FU we willmake use of reduction laws, other than the in-ference rules in (4).
These reduction laws (like1) normally have to be stipulated within cate-gorial theory, but in LTP they can be derivedas theorems within the calculus presented in (4)(Moortgat, 1987b).
Feature distribution for theselaws in LTP-FU can also be derived within thecalculus with the application of AFFC and AFCand thus feature unification within these reduc-tion laws also falls out as ' theorem' of the calcu-lus: it is not necessary to include other principlesthan AFFC and AFC.
In (5) a derivation for thereduction law composition is given (cf.
Moortgat,1987, p.
6).
(5)\[coMP3(X/Y;A) ;D (Y/Z;B) ; t  => (X/Z;B);D\ [ / - i \ ]i~  (X/Y;A) ;D (Y /Z ;B) ;A  Z;B => X;D\ [ / -e \ ]i f  Z;B => Z;Band (X/Y;A);D Y;& => X;D\ [ / -e \ ]i f  Y;A =>Y;Aand X;D =>X;D(6)\[CUT\]U T V => Li f  T => K:aand U K:a V=> L- 192  -(a)Jan houdt van z ichze l f .John loves of h imsel f .
(b)z ichze l f :  ( ( (np;SS\s) /np;C);A \ (np;3S\s)) ;A(c )houdt van((np;3S\s) /pp;A);B (pp/np;C);D( (np;3S\s) /np;C);B\ [co .P \ ](d)Jan houdt van zichzelfnp;3S ((np;3S\s) /pp;A);B (pp/np;C);D ( ( (np;SS\s) /np;C) ;A\ (np;3S\s) ) ;A  => s;E\[CUT\]np;SS ((np;3S\s)/np;C);B ( ( (np;3S\s ) /np;C) ; t \ (np;3S\s ) ) ; t  => s;E_ \ [ \ -e\ ]i f  ( (np;3S\s) /np;C);B => ( (np ;SS \s ) /np ;C) ; tand np (np;SS\s);A => s;E\[\-e\]i f  np;3S => np;3Sand s => s;E(e)"x'yHOUDT(x)(y) "z.VAN(z)\[coMP\]"z'yHOUDT(VAN(z))(y)( f )Jan houdt van zichzel~JAN "x'yHOUDT(x)(y) "z.VAN(z) *h '~h( f ) ( f )JAB "z'yHOUDT(VAN(z))(y) "h ' lh ( f ) ( f )"f.HOUDT(VAN(f))(f).
.
.
.
.
\ [ \ -e lHOUDT(VAN(JAN))(JAN)\ [ \ -e l\[cuT\]- 193 -The cut rule (6) is not an inference rule, buta structural rule that is used to include proofsfrom a 'data base' into other proofs, for in-stance to include the results of the applicationof composition to part of a sequent.
The cutrule is added to the inference rules of the cal-culus s. In (7(d)) the cut rule is used once toinclude a partial proof derived with the compo-sition rule.
The lexical category we assume thereflexive to have (see 7(b)) takes a verb with twoarguments as its argument, and results in a verbwith one argument.
The verb requires, in theexample, its subject to carry two feature-valuepairs: \[num#sing,pers#3\].
(In (7(d)), all featurestructures containing these features are abbrevi-ated with the notation 3S.)
These features areinstantiated for the subject of the resulting one-argument verb.
(7) gives a derivation where thereflexive is embedded in a prepositional phrase.In the example only relevant feature structureshave been given actual feature-value pairs.
(7(b))presents the category of the reflexive.
(c) presentsone reduction using the composition rule and (d)presents the reduction of the whole sequent.
Thederivation of the semantic structure is presentedseperately (e-f) from the syntactic derivation toimprove readability.The refiexive's emantics imposes equality uponthe arguments of the verb (Szabolcsi, 1987; butsee also Chierchia (1988) and Popowich (1987)for other proposals).
Note that in all cases, thereflexive should combine with the verb before thesubject comes into play: the refiexive's eman-tics can only deal with A-bound variables as ar-guments.6 IMPLEMENTATIONIn this section a Prolog implementation f LTP-FU is described.
The implementation makes useof the interpreter described in Moortgat (1988).Categoriai calculi, described in the proper format,can be offered to this interpreter.
The interpreterthen uses the axioms, inference rules and reduc-tion rules as data and applies them to an inputsequent recursively, in order to see whether theinput sequent is a theorem in the calculus.
Inorder to 'implement' a calculus, firstly it has tobe described in a proper format.
--~ and ~-- aredefined as Prolog operators and denote respec-tively derivability in the calculus and inferenceduring theorem proving.
So, for instance withrespect to the axiom, we may say that we haveshown that X;A reduces to X;B if feat_des_unifyaFor consequences of the addition of this rule, seeMoortgat (1988)between A and B holds and true holds.
The listnotation is equal to the usual Prolog list nota-tion, and is used to find the proper number ofarguments while unifying an actual sequent witha rule.
For instance \[T\[R\] cannot be instantiatedas an empty list, whereas U can be instantiatedas one.
The LTP-FU calculus is presented in (8)(semantics i left out for readability).
(8)I'ax'iom\] I'X;A\] => \['X;B'\] <-( feat_des_uni fy(A,B) )  kt rue .\ [ / -o l  (u, \[(x/Y;A) ;e l ,  \[TIR\] ,V) => \[Z\]<-\[TIR\] => \[Y;A\] k(U, EX;e\] ,V) => \[Z\].\ [ \ -e l  (U , \ [T le \ ] , \ [ (Y ;A \X) ;B \ ] ,V )  => \ [Z \ ]<-\[T\[R\] => \[Y;A\] k(U, \[X;B\] ,V) => \[z\] .\[*-el (u, \[K*L\],V) => \[M\] <-(U, \[K,L\] ,V) => \[M\].I ' / - i \ ]  \[TIR\] => I'(X/Y;A);B\] <-\ [T IM, \ [Y ;A \ ]  => \[X;B\] .\[\-: i.\] I'TIR\] => \[ (Y;A\X)  ;B\] <-Y;A, \[Tilt\] => \[X;B'I.C.
- i l  (CPIR\],CQIR1) => CK*L\] <-\[PIR\] => fK\] ,~CQIRI"\] => CL\].Note that feature unification is added explicitely:identity statements are interpreted "as instruc-tions to replace the substructures with their uni-fications" (Shieber, 1986, p. 23).
Prolog, how-ever, does not allow this so-called estructive uni-fication and therefore unification is reformulated.The necessity for destructive unification becomesclear from (9), where it is necessary to let featurespercolate to the "mother node" of a constituent.Note that in (9) reentrance for the modifier herand the specifier kleine is necessary (cf.
Bouma,1988a) to let the feature-value pair sex#fern per-colate to the np.
Reentrance is denoted with anumber followed by a hook.
It is representeduJithin lexical items; it is therefore not necessaryto stipulate principles to account for percolationthrough reentrance.- 194  -(9)her kleine meisj ethe little girl(np/n;l>C) ;I>D (n/n;9->A) ;2>B n; \[sex#fem\]Within the ITI-TNO parser project (see foot-note on first page), an attempt is made to de-velop a parser based on the mechanisms describedhere, using standard software development meth-ods and techniques.
During the so-called infor-mation analysis and the design stage (Van Berkelet al, 1988), several prototypes ofa Lambek The-orem Prover have been developed (Van Paassen,1988).
Implementation in C is currently under-taken, including semantic representation.
Addi-tion of Feature unification to this parser is sched-uled for 1989.
Lexical software for this purpose(in C) is available (Van der Linden, 1988b).7 CONCLUDINGREMARKSFeature unification can be added to LTP in asimple and straightforward way.
Because reduc-tion laws that fall out (including feature unifi-cation) as theorems in LTP-FU can account forFOOT phenomena, it is not necessary to 'stipu-late' category-valued FOOT features and mecha-nisms to account for their percolation.
Not onlyreflexives, but also unbounded ependencies canbe described without the use of category-valuedfeatures.
Bouma (1987) shows that the additionof Type 0 features GAP with BASCAT as itsvalue and ISL with ~+,-} as its value are the fea-tures used in an account of unbounded dependen-cies 4.LTP-FU can do without category-valued f aturesin FEAT_NAMES, and this obviously reducescomplexity of the unification process.
We can addto this that it is possible to develop efficient algo-rithms and computerprograms for LTP (Moort-gat, 1987a; Van der Wouden and Heylen, 1988;Van Paassen, 1988; Bouma, 1989).
ThereforeLTP-FU is attractive for computational linguis-tics.A problem remains with respect to the seman-tics of reflexives we assume here.
A reflexive aszichzelf in (7) can only take a verb as an argu-ment, and not for instance a combination of asubject and a verb (S/NP): the reflexive only op-erates on a functor with two different A-bound ar-guments.
This implies that it is hard for this kindiVan der Linden (1988a) discusses S-V agreement.of category to participate in a Left-to-Right anal-ysis (Ades and Steedman, 1982).
A solution couldbe to describe reflexives yntactically as functorsof type (X/NP)\X, that impose reentrance (andnot equality) upon the NP argument and someother NP.
This implies however that we shouldnot only construct a semantic representation, butalso a representation f the syntactic derivation,in order to be able to refer to NP's that have al-ready served as arguments to some functor.
Fu-ture research will be carried out with respect othis constructive categorial grammar.A final remark concerns the notion of categorystructure taken from Gazdar et al (1988) and ap-plied here.
For an account of modifiers and speci-fiers, it is necessary to include reentrant features.Therefore the definition of category structure inLTP-FU, but also that in CUG and UCG wherereentrance is used as well, necessitates xtendedversions of the notion Gazdar et al supply.8 L ITERATUREAdes, A.; and Steedman, M. 1982 On the orderof words.
Linguistics and Philosophy, 4, pp.
517-558.Bach, E. 1983 On the relationship between word-grammar and phrase-grammar.
Natural Lan-guage and Linguistic Theory 1, 65-89.van Benthem, J.
1986 Categorial Grammar.Chapter 7 in Van Benthem, J., Essays in Logi-cal Semantics.
Reidel, Dordrecht.van Berkel, B.; van der Linden, H.; and vanPaassen, A.
1988 Parser Project, analysis and de-sign.
Internal report 88 ITI B 24, ITI-TNO, Delft(Dutch).Bouma, G. 1987 A unification-based analysis ofunbounded ependencies in categorial grammar.In: Groenend~jk et ai.
1987. pp.
1-19.Bouma, G. 1988a Modifiers and specifiers in cat-egorial unification grammar.
Linguistics 26, 21-46.Bouma, G. 1989 Efficient processing of flexiblecategorial grammar.
This volume.Bouma, G.; K6nig, E.; Usskoreit, H. 1988 A flex-ible graph-unification formalism and its applica-tion to natural-language processing.
IBM Jour-nal of Research and Development, 32, pp 170-184.Calder, J.; Klein, E.; and Zeevat, J.
1988 Unifi-cation categorial grammar: a consise, extendablegrammar for natural language processing.
In Pro-ceedings of COLING '88, Budapest.Chierchia, G. 1988.
Aspects ofa categorial theoryof binding.
In Oehrle et al 1988. pp.
125-151.Gazdar, G.; Klein, E.; Pullum, G.; and Sag,I.
1985 Generalized Phrase Structure Grammar.- 195 -Basil Blackwell, Oxford.Gasdar, O.; Pullum, G.; Carpenter, R.; Klein, E.;Hukari, T.; and Levine, D. 1988 Category Struc-ture.
Computational Linguistics 14, 1-19.Groenendijk, J.; Stokhof, M.; and Veltman, F.,Eds.
1987 Proceedings of the sizth AmsterdamColloquium.
April 13-16 1987.
University of Am-sterdam: ITLI.Lambek, J.
1958 The mathematics of sentencestructure.
Am.
Math.
Monthly 65, 154-169.Klein, E.; and Van Benthem, J., Eds.
1988.
Cat-egories, Polymorphism and Unification.
Edin-burgh.van der Linden, H. 1988a GUACAMOLE, Gram-matical Unification-based Analysis in a CAtego-rial paradigm with MOrphological and LExicalsupport.
Internal report 88 ITI B 37, ITI-TNO,Delft (Dutch).van der Linden, H. 1988b User-documentation f rSIMPLEX.
Internal report 88 ITI B 34, ITI-TNO,Delft (Dutch).Moottgat, M. 1987a Lambek Theorem Proving.In Klein; and van Benthem 1988, pp.
169-200.Moortgat, M. 1987b Generalized CategorialGrammar.
To appear in Droste, F., Ed., Main-streams in Linguistics.
Benjamins, Amsterdam.Moortgat, M. 1988 Categorial Investigations.Logical and linguistic aspects of the Lambek cal-culus.
Dissertation, University of Amsterdam.Oehrle, R.; Bach, E.; and Wheeler, D.
Eds., 1981Categorial grammar and natural anguage struc-ture.
Reidel, Dordreeht.Van Paassen, A.
1988 Reduction of thesearchspace in Lambek Theorem Proving.
Inter-nal report 88 ITI B 23, ITI-TNO, Delft (Dutch).Popowich, F. 1988, A Unification-Based Frame-work for Anaphora in Klein and van Benthem1988.
pp.
277-305.Shieber, S. 1986 An introduction to Unification-Based Approaches to Grammar.
University ofChicago Press, Chicago.Szabolcsi, A.
1987 Bound variables in syntax (arethere any?).
In Groenendijk et al 1987, pp.
331-351.Uszkoreit, H. 1986 Categorial Unification Gram-mars.
In Proceedings of COLING lg86, Bonn.van der Wouden, T.; and Heylen, D. 1988 MassiveDisambiguation f large text corpora with flexibleeategorial grammar.
In Proceedings of COLING1988, Budapest.geevat, H.; Klein, E.; and Calder, J.
1986 Unifi-cation Categorial Grammar.
Paper, University ofEdinburgh.- 196 -
