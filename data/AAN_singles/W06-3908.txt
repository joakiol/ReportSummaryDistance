Using Answer Set Programming in an Inference-Based approach to NaturalLanguage SemanticsFarid NouiouaLIPN UMR 7030 du C.N.R.S.Institut Galil?e ?
Univ.
Paris-Nord93430 Villetaneuse ?
FRANCEnouiouaf@lipn.univ-paris13.frPascal NicolasLERIAUniversity of Angers2, bd Lavoisier F-49045 Angers cedexpascal.nicolas@univ-angers.fr1.
MotivationThe traditional tri-partition syntax/semantics/pragmatics is commonly used in most of the computersystems that aim at the simulation of the human understanding of Natural Language (NL).
Thisconception does not reflect the flexible and creative manner that humans use in reality to interprettexts.
Generally speaking, formal  NL semantics is referential i.e.
it assumes that it is possible tocreate a static discourse universe and to equate the objects of this universe to the (static) meaningsof  words.
The  meaning  of  a  sentence  is  then  built  from  the  meanings  of  the  words  in  acompositional  process  and  the  semantic  interpretation  of  a  sentence  is  reduced  to  its  logicalinterpretation based on the truth conditions.
The very difficult task of adapting the meaning of asentence to its context is often left  to the pragmatic level,  and this task requires to use a hugeamount of common sense knowledge about the domain.
This approach is seriously challenged (seefor  example  [4][14]).
It  has  been  showed that  the  above tri-partition  is  very  artificial  becauselinguistic as well as extra-linguistic knowledge interact in the same global process to provide thenecessary elements for understanding.
Linguistic phenomena such as polysemy, plurals, metaphorsand  shifts  in  meaning  create  real  difficulties  to  the  referential  approach  of  the  NL semanticsdiscussed above.
As an alternative solution to these problems, [4] proposes an inferential approachto the NL semantics in which words trigger inferences depending on the context of their apparition.In  the same spirit  we claim that  understanding a  NL text  is  a  reasoning process based on ourknowledge about  the norms1 of  its  domain i.e.
what  we generally  expect  to  happen in  normalsituations.
But what kind of reasoning is needed for natural language semantics?The answer to this question is based on the remark that texts seldom provide normal details that areassumed to be known to the reader.
Instead, they focus on abnormal situations or at least on eventsthat cannot be inferred by default from the text by an ordinary reader.
A central issue in the humanunderstanding  of  NL is  the  ability  to  infer  systematically  and  easily  an  amount  of  implicitinformation necessary to answer indirect questions about the text.
The consequences resulting fromtruth-based entailments are logically valid but they are poor and quite limited.
Those obtained by anorm-based approach are defeasible: they are admitted as long as the text does not mention explicitelements  that  contradict  them.
However  they  provide  richer  information  and  enable  a  deeperunderstanding  of  the  text.
That  is  why  the  norm-based  reasoning  must  be  non-monotonic.
Inaddition to this central question, the representation language must take into account a number ofmodalities (including the temporal aspect) that are very useful to answer different questions on NLtexts.The  next  section  gives  a  general  logical  framework  to  represent  in  a  first  order  language  thenecessary knowledge about a domain and allows non-monotonic reasoning.
Section 3 shows how toimplement our representation language fragment in the formalism of Answer Set Programming bytransforming them into extended logic programs.
In section 4, we discuss the use of our language in1 In A.I, the word norm is commonly used in the ?
normative ?
sens.
Here, it is rather used in the ?
normal ?
sens.the car crash domain to find automatically the cause of an accident from its textual description.
Thekind of inference rules required in this application is showed through a detailed presentation of theanalysis of a text from the corpus we are using.
Finally, we conclude and give some perspectives forfuture work in section 5.2.
Knowledge representation languageThe explicit information evoked in a given text provides the starting point for the reasoning processthat  aims  to  understand  it.
Thus,  the  first  task  to  do  is  to  extract  from  the  text  this  explicitinformation  and  to  represent  it  in  an  adequate  language.
The  richness  and  flexibility  of  NLconstrains the representation language to take into account a number of aspects whose necessity andimportance  may  vary  from  an  application  to  another.
In  what  follows,  we  describe  a  logicallanguage which enhances within the first order framework some aspects that we believe to be usefulin  an  inferential  approach  to  NL semantics.
Namely,  the  proposed  language  allows  therepresentation of time, modalities and non-monotonic inferences (see [7] for more details).2.1 ReificationThe first idea that comes to mind when representing knowledge about NL statements is to use firstorder predicates to express properties of objects, agents ?etc.
However we need often to treatfurther aspects.
For example, we need to represent modalities on the considered properties and toreason about  them i.e.
to use the predicate  names themselves as variables over which one canquantify in order to avoid the use of ad hoc inference rules, i.e.
to factorise the rules at an adequatelevel of abstraction.
To solve this problem within the framework of first order logic, we use thereification technique, commonly used in Artificial Intelligence (AI).
Instead of writing  P(X, Y) toexpress the fact that property P applies to arguments X and Y, we write Holds(P, X, Y).
The propertyname  P becomes then an argument  in  the new predicate  Holds.
i.e.
P  will  be a  variable  overproperties and it can be quantified in inference rules.The use of the reification technique yields to two main drawbacks: first, it forces a fixed arity forthe predicate Holds whereas properties in general may have a different number of arguments.
Thesecond  problem  is  the  necessity  to  redefine  ad  hoc  axioms  about  the  properties  (negation,conjunction, disjunction?
of properties).
One possible solution to the first problem is to consider aspecial  binary  function  combine which  constructs  a  new ?complex?
argument  from two  otherarguments.
For example, as the predicate Holds has three arguments then, the predicate Q(X, Y, Z)can be reified as :  Holds(combine(Q,  X),  Y,  Z)2.
In  general,  this  corresponds well  to linguisticpractice: for example the application of a transitive verb to its complement can be considered as aunique ?complex?
property comparable to an intransitive verb.
Concerning the second problem, itturns out that in practice we often do not need all the axioms but only some particular ones.
So wehave to represent only those axioms that we really need in the application considered.2.2 Representing timeGenerally, narrative texts describe events that take place in a time perceived as continuous.
Thetemporal aspect is crucial in their understanding.
Two representation approaches are possible fortime: either we represent the continuous time which reflects the physical reality and use the elegantmathematical tools developed for mechanics, or we represent the discrete time which reflects thetext structure and which corresponds rather to a naive physics.
We chose the second approach,because generally, texts are written by persons who ignore the mathematical details of motion, andthey can be understood without having such knowledge.
Two approaches are still possible for adiscrete model of time.
Either we use a linear model in which only the events that happened inreality  are  represented,  or  we take  into  account  the  unrealized  futures  as  part  of  the  temporalinformation.
In this case, we use a branching time model [5][10].
This last model is richer than the2 As a concrete example, the ternary predicate bump(A, B, T) (vehicle A bumps vehicle B at time T) is written afterreification and by using the  combine function as  :  Holds(combine(bump,  B),  A,  T).
The term combine(bump,  B)expresses then the complex property of ?
bumping the vehicle B ?.former and can be very useful in some cases.
In this paper we are interested only on the linearmodel.
What is important for us in time modelling is to establish an order between the eventsevoked in the text.
Of course, this choice limits the use of our language to applications which do notneed  deeper  structure  of  time  but  it  remains  useful  in  practice  (see  section  4  for  a  possibleapplication).
Indeed, the unrealized futures are not completely excluded in our model, as they canbe represented implicitly by modalities (see the modality able in section 4.2.2 ).The semantics used for time in our model is situated somehow between an interval-based and apoint-based semantics: the scene of the accident described in the text is decomposed as a successionof ordered time elements.
Each time element is denoted by an integer representing its order number.This integer is used as an argument in the predicates.
The meaning of the element depends on thenature of the property.
If  it  is a persistent property, the time parameter denotes the entire timeinterval during which this property remains true (interval based semantics).
If the property is notpersistent (corresponds to an action or a punctual event) then the temporal argument denotes thestarting point of the interval on which the property occurs and causes at least one persistent propertyto change its truth value.2.3 ModalitiesModalities express properties of the predicates other than their truth value, which can be consideredas a null modality.
Different types of modal logics have been developed to formalize the reasoningabout modalities.
Even though the reasoning we want to apply on texts makes use of modalities, itcan be carried out without developing new modal logics with ?complete?
axiomatizations.
What wereally need is to represent the modalities as first order predicates using the reification techniquediscussed in section 2.1.,  and to define only useful axioms as inference rules.
For example,  torepresent the fact that the modality Mod is applied to the predicate P having X1, ?, Xn as argumentswe write : Mod(P, X1, ?, Xn) instead of the classical notation : Mod P(X1, ?, Xn).2.4 Non-monotonicityNon-monotonicity is an essential characteristic of the nature of the  reasoning used by humans  tounderstand texts.
Among the different approaches proposed in the literature to formalise this variantof commonsense reasoning, we have used Reiter?s default  logic [11] to represent our inferencerules.
The  fixed  point  semantics  used  to  compute  the  default  theories  extensions  seems  to  beadequate to the nature of the NL understanding process.
Indeed, as discussed in section 1, the NLunderstanding process cannot be decomposed in a sequence of separate steps but it consists in thesimultaneous satisfaction of several linguistic as well extra-linguistic constraints in a manner thatcan be approached by the search of some fixed point of the meaning of the given text.Two  kinds  of  inference  rules  are  considered:  the  strict  inferences  represented  by  materialimplications  and  the  defeasible  ones  represented  by  Reiter?s  defaults.
To  facilitate  theimplementation of our rules on the answer set programming paradigm (see section 3) we limit theirforms as follows:Let A1,?, An, B, C1, ?, Ck be first order literals.The Expression (1) is a material implication.
It means that  B is inferred whenever  A1, ?, An areverified.
Two kinds of default rules are considered.
The first form (2) corresponds to a ?normal?default.
It means that if we have A1, ?, An then, we can infer B as long as this is consistent.
Thesecond one (3) corresponds to a semi-normal default and its meaning is that in general, when wehave  A1, ?, An then, we can infer  B as long as this is consistent and none of        ?Ci (i=1..k)belongs to the extension3.
Semi normal defaults are particularly useful to establish a priority orderbetween inference rules which can not be done using only normal defaults[12].A1 ?
??
An ?
B                                        (1)A1 ?
??
An : B                                          (2)A1 ?
??
An : B[C1, ?, Ck]                       (3)3 We use a notation in which A : B stands for A : B and A : B[C] stands for A : B, CB                                                B3.
Implementation by Answer Set Programming3.1.
Theoretical backgroundsAnswer Set Programming (ASP) is a recent paradigm covering different kinds of logic programs,and  associated  semantics.
It  allows  representing  and  solving  various  problems  in  ArtificialIntelligence.
On one hand, we can cite combinatorial problems as k-coloring graph, path finding,timetabling,  ...  On  another  hand,  ASP is  also  concerned  by  problems  arising  when  availableinformation is incomplete as non-monotonic reasoning, planning, diagnosis, ...
The non familiarreader will  find additional information about  ASP on the web site of the working group  WASP(http://wasp.unime.it/).In  the  present  work  we  are  particularly  interested  in  using ASP as  a  framework  for  defaultreasoning.
For this we use Extended Logic Programs (ELP) to represent knowledge by means ofrules containing positive information and strong or default negative information and we interpretthem by answer set semantics [3].
Formally, an ELP is a set of rules of the formc ?
a1, ..., an, not b1, ..., not bm.
n ?
?0 and m ?
?0where c, ai and bj are literals.For a given rule r, we denotehead(r) = c body+(r)={a1, ..., an} body-(r)={b1, ..., bm} r+=c ?
?a1, ..., anDefinitionLet R be a set of rules without default negation (?
r ?
R, body-(r) = ?
), R is called a Definite LogicProgram.
A literal set X is closed wrt R when ?
r ?
R, body+(r) ?
X ?
?head(r) ?
X.The set of consequences of R is Cn(R) the minimal literal set that is closed wrt R consistent or equalto the whole set of literals of the languageFor a given literal set A and an ELP P, the reduct of P by A is the definite Logic ProgramPA={r+ | r ?
P and body-(r) ?
A = ?
?DefinitionLet P be an ELP and A a literal set.
A is an answer set of P if and only if A=Cn(PA)ExamplesP1={a ?
not b., b ?
not a., ?c ??b.}
has two answer sets {a} and {b, ?c}P2={a ?
not a.}
has no answer set at all.We have recalled the basic notions of answer set semantics only in the case of propositional rules.But, obviously, for a more flexible knowledge representation, rules may contain variables.
In thiscase, a rule is considered as a global schema for the set of fully instanciated rules that can beobtained by replacing every variable by every constant in the language.ExampleP={bird(1)., bird(2)., penguin(2)., fly(X)  ?
bird(X), not penguin(X).,  ?fly(X)  ?
penguin(X).}
isequivalent to the programP'={bird(1)., bird(2)., penguin(2)., fly(1) ?
bird(1), not penguin(1)., ?fly(1) ?
penguin(1)., fly(2)?
bird(2), not penguin(2)., ?fly(2) :?
penguin(2).
}Then, P (formally P') has one answer set {bird(1), bird(2), penguin(2), fly(1), ?fly(2)}.Let us mention an important point for our work that is answer set semantics for ELP can be viewedas a subcase of default logic [2][3].
By translating every rule r = c ?
a1, ..., an, not b1, ..., not bm.into the default rule : T(r) = a1 ?
...
?
?an : c [?b1, ..., ?bm ]By this way :If S is an answer set of an ELP P, then Th(S) is an extension of the default theory (??T(P))every?extension?of?(?
?T(P))?is?the?deductive?closure?of?one?answer?set?of?P.Obviously, in whole generality every default theory cannot be translated into an ELP.
But as weexplain it later, it is possible to encode some?restricted?default theories in an ELP.
By this way it ispossible to envisage realistic applications of default reasoning since several software packages forASP are available today, e.g.
the following ones:DLV[8]?http://www.dbai.tuwien.ac.at/proj/dlv?Smodels?[13]?http://www.tcs.hut.fi/Software/smodels?Cmodels?[9]?http://www.cs.utexas.edu/users/tag/cmodels.html?Nomore++[1]?http://www.cs.uni?potsdam.de/wv/nom?
?ore?
?++?
?3.2.
From Default Logic to ASPHere,?we?explain?how?we?have?encoded?our?knowledge?base?that?is?originally?a?default?theory,?into?an?extended?logic?program.?A?very?important?point?to?note?is?that?our?original?knowledge?base?does?not?contain?disjunctions.?
?Since?a?default?theory?is?a?pair?consisting?in?a?set?of?classical?formulas?and?a?set?of?default?rules,?we?distinguish?two?major?translations.classical formulas ELPone fact : a one rule with an empty body : a.a conjunction of n facts : a1 ?
...
?
?an n rules with empty bodies: a1.
... an.a material implication a1 ?
...
?
?an ?
b one direct rule b ?
a1, ... ,?an.and n contrapositive rules :?a1 ?
?b, a2, ... ,?an....?an ??b?
a1?
... ,?an-1.default rules ELPA1, ?, An : BA1, ?, An : B[C1, ?, Ck]b ?
a1, ..., an, not ?b.b ?
a1, ..., an, not ?b, not ?c1,..., not ?cm.We have preferred to encode firstly our rules in default logic instead using directly ASP becausedefault logic is more compact than ASP, which needs more rules, especially for contrapositives.
Thetranslation of default logic into ASP can be easily auomated.4.
From the description of an accident to its cause4.1.
The corpusWe are working on a sample of 60 representative texts of a larger corpus.
These texts are shortdescriptions of car accident circumstances.
They are written (in French) by persons implied in theaccidents to be sent to their insurance company4.
The length of our texts varies between 9 and 167words.
They contain 129 sentences whose length varies between 4 and 55 words; the longest reporthas 7 sentences and there are 24 reports that contain only one sentence.
The total number of wordoccurrences is 2256.
But there are only 500 distinct words corresponding to 391 dictionary entries.4 We are grateful to the MAIF insurance company for having given us access to the reports that constitute our corpus.4.2.
Our task4.2.1.
Finding the cause of the accidentThe objective of the system we are developing is to find automatically the cause of an accident fromits textual description.
Because of the very controversial nature of causality we must define moreprecisely our objective.
We are interested in our study by the interventionist conception of causalityin which voluntary actions are privileged as potential causes of events.
This is in correspondencewith the practical use of causality in  AI.
Moreover, we claim that the most plausible causes forabnormal  situations  like  accidents  are  those  that  reflect  violation  of  norms (anomalies)[6].
Weconsider that the system has understood a text if it finds the same cause as the one given by anordinary human reader.
We have then determined manually the cause of each text and we have usedthis information to validate the results of the system.Two essential  steps are considered in the overall  architecture of the system.
The first one ?thelinguistic step?
applies a tagger and syntactical analyser to extract a set of surface relations betweenwords.
These relations are then progressively transformed by an adequate ?
linguistic reasoning?into the so-called ?semantic predicates?
which express the explicit information provided by the text.The semantic predicates are represented in a ?semantic language?
as the one discussed in section 2.This part of the system, which is under construction, tries to adapt existing methods to deal with theproblems of anaphora resolution and time ordering of the events described in a text.
We will notdiscuss the details of the linguistic step in this paper.
The second step: ?the semantic step?
applies aset of strict and default inference rules based on norms of the road domain to enrich the semanticpredicates  initially  extracted  from  the  text  by  further  semantic  predicates  enhancing  implicitinformation.
The inference rules are designed manually and reflect rudimentary reasoning that anyreader of the text makes systematically.
This semantic reasoning process stops as soon as the systeminfers the necessary information that characterizes an anomaly.
Section 5 gives further details aboutthe semantic reasoning through an example taken from the corpus.4.2.2.
Some specificitiesThe majority of the semantic predicates used in our system have the form: Holds(P, A, T) where Pis  a  simple  or  a  complex  property  (expressed  by  the  binary  function  combine),  A is  an  agent(generally a vehicle involved in the accident) and T is the order number of a  time interval duringwhich (or at the beginning of which) the property P holds (to simplify, we will say henceforth thatproperty P holds at time T).
For example Holds(stop, ag, 3) means that the agent ?ag?
is stopped attime 3 and Holds(combine(follows, ag1), ag2, 2) means that at time 2, agent ?ag2?
follows agent ?ag1?
(in a file of vehicles).
When needed a function neg is applied to a property to have its negation.
Weintroduce the rule (4)Holds(neg(P), A, T) ?
?Holds(P, A, T)                          (4)The main modalities that we use in our system cope respectively with duties and capacities :must(P, A, T) means that at time T, agent A has the duty to achieve the property P.able(P, A, T) means that at time T, agent A is able to achieve the property P. In terms of branchingtime, this means that there is some possible future in which P holds.The semantic reasoning is designed so that it converges to a ?kernel?
containing a limited numberof semantic predicates5 in terms of which all possible anomalies can be expressed.
In a given text, itis possible that several anomalies coexist.
In this case, the system distinguishes between the primaryanomaly  which  can  be  considered  as  the  most  plausible  cause  of  the  accident  and  the  otheranomalies called ?derived anomalies?.
A primary anomaly has two forms: either an agent A has theduty and the capacity to achieve a property P at a time T and at time T+1 a property P' incompatible5 The predicates of the kernel are : Holds(control, A, T) [A has the control of his/her vehicle], Holds(moves_back, A, T) [A movesback], Holds(starts, A, T) [A moves off], Holds(drives_slowly, A, T) [ A drives fairly slowly], Holds(stops, A, T) [A is stopped],Holds(comb(disruptive_factor, X), A, T)  [X is a disruptive factor for A]with P holds (5) or some disruptive and inevitable factor occurs and causes the accident  (6).
Theform of a derived anomaly (7) differs from that of a primary one only on the agent's capacity.primary_an(P, A, T) ?
property(P), vehicle(A), time(T), must(P, A, T), able(P, A, T),?holds(P', A, T+1), incompatible(P, P')               (5)primary_an(combine(disruptive_factor, X), A, T) ?
object(X), vehicle(A), time(T),holds(combine(disruptive_factor, X), A, T)        (6)????
?derived_an(P, A, T)  ?
property(P), vehicle(A), time(T), must(P, A, T), ?
able(P, A, T), holds(P',A, T+1), incompatible(P, P')           (7)4.3.
An exampleTo illustrate  our  methodology,  let  us consider  the following text  of  the corpus (translated intoenglish) and explain the inference rules involved in its analysis :?
Whereas vehicle B was overtaking me, the driver lost the control of its vehicle.
It bumped on thecentral guardrail , and crossed the ways.
It then cut my way.
My vehicle A initially bumped onvehicle B on its right side, before being crushed on the guardrail.
?The set of the semantic predicates extracted from the text are :holds(overtake, veh_b, 1), ?
holds(control, veh_b, 2),holds(combine(bump, guardrail), veh_b, 3), ?
holds(stop, veh_b, 4),holds(combine(bump, veh_b),veh_a, 5), holds(combine(bump, guardrail), veh_a, 6)vehicle(veh_a), vehicle(veh_b), object(veh_a), object(veh_b), object(guardrail).In what follows, we show how the application of inference rules leads to the determination of theprimary and the derived anomalies:Rule(8) states that ?at the starting state 0, each vehicle has the control?.holds(control, A, 0) ?
agent(A), vehicle(A)                 (8)It allows to infer :    holds(control, veh_a, 0), holds(control, veh_b, 0)Rule(9) states that ?if B is a vehicle that bumps on A at time T, then B is not stopped at this time?.?
holds(stop, A, T) ?
vehicle(A), object(B), time(T), holds(combine(bump, B), A, T)  (9)It allows to infer:   ?
holds(stop, veh_b, 3), ?
holds(stop, veh_a, 5), ?
holds(stop, veh_a, 6)Rules(10) and (11) state that ?if A is a vehicle that bumps on B at time T, then there is at this time ashock (symmetric) between A and B?.holds(combine(shock, B), A, T) ?
vehicle(A), object(B), time(T), holds(combine(bump, B), A, T) (10)holds(combine(shock, A), B, T) ?
object(A), object(B), time(T), holds(combine(shock, B), A, T)   (11)The set of predicates inferred by these rules are :holds(combine(shock, guardrail), veh_b, 3), holds(combine(shock, veh_b), guardrail, 3),holds(combine(shock, veh_b), veh_a, T), holds(combine(shock, veh_a), veh_b, T),holds(combine(shock, veh_a), guardrail, T), holds(combine(shock, guardrail), veh_a, T)Rule(12) states that ?if A is implied in two successive shocks at times T and T+1, then we deducethat it lost the control after the first shock (during the time interval T)?.?
holds(control, A, T) ?
agent(A), object(B), object(C), time(T),  holds(combine(shock, A), B, T),holds(combine(shock, A), C, T+1)       (12)It allows to infer:      ?
holds(control, veh_a, 5)The remainder of information about the control of vehicles  A and  B during the other time intervals arededuced using appropriate rules that handle the persistence of some particular properties.
The complete set ofconclusions concerning control is as follows :holds(control, veh_b, T) (for 0?
T ?
1), ?
holds(control, veh_b, T) (for 2?
T ?
6),holds(control, veh_a, T) (for 0?
T ?
4), ?
holds(control, veh_a, T) (for 5?
T ?
6)Rule(13) states that ?in general if there is a collision between a vehicle A and an object B at time T,then B represents an obstacle for A at time T-1?.holds(combine(obstacle, A), B, T-1) ?
object(A), vehicle(B), time(T),holds(combine(shock, A), B, T), not ?
holds(combine(obstacle, A), B, T-1)                (13)We obtain from this rule :holds(combine(obstacle, guardrail), veh_b, 1), holds(combine(obstacle, veh_a), veh_b, 4),holds(combine(obstacle, veh_b), veh_a, 4), holds(combine(obstacle, guardrail), veh_a, 5)Rules (14) and (15) allows to infer that some obstacles are not predictable.
The rule (14) states that?if a vehicle B not controlled represents at time T an obstacle to vehicle A, then this obstacle is notpredictable for A at this time T?.
Whereas rule (15) states that ?in general, if a vehicle B bumps avehicle A at time T, then B is considered as an umpredictable obstacle for A at time T?.?
predictable(combine(obstacle, B), A, T) ?
vehicle(B), vehicle(A), time(T),holds(combine(obstacle, B), A, T), ?
holds(control, B, T)      (14)?
predictable(combine(obstacle, B), A, T) ?
vehicle(A), vehicle(B), instant(T),vrai(combine(bump, A), B, T), not predictable(combine(obstacle, B), A, T)          (15)By these two rules we can infer : ?
predictable(combine(obstacle, veh_a),veh_b, 4),?
predictable(combine(obstacle, veh_b), veh_a, 4)Rule(16) states that ?in general, one must keep the control of one's vehicle ?must(control,A,T) ?
vehicle(A), time(T), not ?
must(control,A,T),not ?
holds(control,A,T)                (16)This rule infers : must(control, veh_b, 1), must(control, veh_a, 4)The meaning of rule(17) is that ?one must avoid any obstacle?.must(combine(avoid, X), A, T) ??
vehicle(A), object(X), time(T),holds(combine(obstacle, X), A, T)              (17)This rule infers : must(combine(avoid, guardrail), veh_b, 1), must(combine(avoid, veh_a), veh_b, 4)must(combine(avoid, veh_b), veh_a, 4), must(combine(avoid, guardrail), veh_a, 5)Rule(18) states that  ?in general the duty to avoid an obstacle turns out to the duty to stop (thisdefault is inhibited by a number of situations illustrated in the rule)?must(stop, A, T) ??
vehicle(A), object(B), time(T), must(combine(avoid, B), A, T),holds(combine(shock, B), A, T+1), not ?
must(stop, A, T), not must(drive_slowly, A, T),not holds(stop, A, T), not holds(combine(follow, A), B, T), not must(not(backwards), A, T-1),not must(not(move_off), A, T-1), not ?
predictable(combine(obstacle, B), A, T)       (18)We can infer from this rule : must(stop, veh_b, 1), must(stop, veh_a, 5)Rules (19) and (20) are the main rules that allow to infer agent's capacities :able(P, A, T) ?
vehicle(A), object(B), time(T), action(Act), property(P), pcb(Act, P),available(Act, P, A, T)              (19)?able(P, A, T) ?
vehicle(A), object(B), time(T), action(Act), property(P), pcb(Act, P),?available(Act, P, A, T)              (20)they mean that ?vehicle A is able to reach property P at time Tn if and only if there is some actionAct which is a ?potential  cause?
for P and which is  available for A to reach P at  time T (thecontrapositives are omitted)?.The  occurrences  of  the  relation  pcb  (which  abreviates:  potentially  caused  by)  are  staticallydetermined  and  stored  in  a  static  database.
In  our  case  we  have  :  pcb(brake,  stop),pcb(combine(keep_state, control)6, control).By default,  actions are  available  for  agents to  reach the corresponding properties.
This  defaultinference is inhibited by a number of strict rules.
In our case, we obtain :available(combine(keep_state, control), control, veh_b, 1) (the default is applied)?available(combine(keep_state, control), control, veh_a, 4)7?available(brake, stop, veh_a, 5)8From these results it follows :able(control, veh_b, 1), ?
able(stop, veh_a, 4), ?
able(stop, veh_a, 5).The application of rules (5) and (7) we can detect the primary and the derived anomalies :primary_an(control, veh_b, 1), derived_an(control, veh_a, 4), derived_an(stop, veh_a, 5)Finally, the cause of the accident is expressed by: "the loss of control of vehicle B at time 1"5.
Conclusion and perspectivesThis paper defends the idea that inferences are at the heart of the problematic of NL semantics.
Wehave  showed that  the  inferences  we  need  to  understand  natural  language  are  based  on  ourknowledge about the norms of the domain and are non-monotonic since the conclusions of this kindof reasoning are in general defeasible.
We proposed a general representation language which takesinto account within a first order framework modalities, time and non-monotonicity that are essentialaspects in an inferential approach of NL understanding.
We presented also how to transform ourinference rules into extended logic programs.
To illustrate our approach in a practical domain wehave used a corpus of 60 short texts describing the circumstances of road accidents.
We have usedSmodels to implement our reasoning system.
With about 200 inference rules, the system succeeds tofind for each text only one stable model containing the necessary literals which express the primaryand the derived anomalies.
We have determined manually for each text the answer that we hope toobtain.
Thus, the validation criterion is that the system gives for each text the same answer as thepredetermined one.
The running time varies from a text to another but it does not exceed 30 secondswhich is rather encouraging.
Many other perspectives of future work are open, among them:?
Analyzing more texts of the same domain in order to verify :- The validity of our hypotheses, especially those concerning the relationshipbetween norms and causes and the sufficiency of a linear model of time;- that the inference rules have a sufficient degree of generality to be adaptedeasily to new situations by giving the expected answers for new reports.- the adequacy of the proposed representation language to deal with new texts.?
Generalizing the approach to other domains6 we consider as action the fact of keeping holded some persistent property.7 the lost of control because of a shock at time T makes unavailable the action of keeping the control at time T-1.8 if a vehicle is not under control, then, any action is unavailable for its driver.Acknowledgment.
The authors are indebted to Daniel Kayser for very helpful remarks on previousversions of this text.References[1] C. Anger, M. Gebser, T. Linke, A. Neumann and T. Schaub.
The nomore++ system.
In C. Baral,G.
Greco, N. Leone, and G. Terracina, editors,  8th International Conference on Logic Programmingand Nonmonotonic Reasoning (LPNMR'05), 3662 : 422-426.
LNAI, Springer-Verlag, Diamante,Cosenza, Italy.
2005.
[2] N. Bidoit and C. Froidevaux.
General logical databases and programs: Default logic, semanticsand stratification.
Information and Computation, 91(1):1554.
1991.
[3] M. Gelfond and V. Lifschitz.
Classical negation in logic programs and disjunctive databases.New Generation Computing, 9(3-4):363385.
1991.
[4] D. Kayser.
Abstraction and natural language semantics.
Philosophical Transactions.
R. Soc.Lond.
B 358 : 1261-1268.
2003.
[5]  D.  Kayser,  A. Mokhtari.
Time  in  a  Causal  Theory.
Annals  of  Mathematics  and  ArtificialIntelligence.
22(1-2): 117-138.
1998.
[6] D. Kayser, F. Nouioua.
About Norms and Causes.
International Journal on Artificial IntelligenceTools.
Special Issue on FLAIRS 2004, 14(1-2): 7-23.
2005.
[7]  D.  Kayser,  F.  Nouioua.
Representing  Knowledge  about  Norms.
Proc  of  the  16th EuropeanConference on Artificial Intelligence (ECAI'04), pp.
363-367, Valencia, Spain.
2004.
[8] N.Leone, G. Pfeifer , W. Faber, T. Eiter, G. Gottlob, S. Perri, and F. Scarcello.
The dlv systemfor  knowledge  representation  and  reasoning.
ACM Transactions  on  Computational  Logic,  (toappear).
2006.
[9]  Y. Lierler  and M. Maratea.
Cmodels-2: Sat-based answer set  solver enhanced to  non-tightprograms.
7th International  Conference  on  Logic  Programming  and  NonMonotonic  Reasoning(LPNMR'04), 2923: 346-350.
LNCS, Springer-Verlag, Florida, USA.
2004.
[10] D.V.
McDermott.
A Temporal  Logic for Reasoning about Processes and Plans.
CognitiveScience 6: 101-155.
1982.
[11]  R.  Reiter.
A  Logic  for  Default  Reasoning, Artificial  Intelligence,  Special  Issue  onNonmonotonic Logic, 13(1-2): 81-132.
1980.
[12] ?
R. ?
Reiter, ?
G. ?
Criscuolo ?
: ?On ?
Interacting ?
Defaults.
?
Proc.
?
of ?
the ?
7th?
International ?
Joint?Conference?on?Artificial?Intelligence.?pp.?270?276,?Vancouver,?Canada.
?1981[13] T. Syrj?nen and I.Niemel?.
The Smodels systems.
Proc.
of the 6th International Conference onLogic  Programming and NonMonotonic  Reasoning  (LPNMR'01),  pp  434-438,  Springer-Verlag,Vienna, Austria.
2001.
[14] t.a.l .
Special issue ?Compositionnalit??.
Traiteent automatique des langues 39(1).
1998.
