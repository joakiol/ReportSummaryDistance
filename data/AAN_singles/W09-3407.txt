Proceedings of the 7th Workshop on Asian Language Resources, ACL-IJCNLP 2009, pages 48?54,Suntec, Singapore, 6-7 August 2009. c?2009 ACL and AFNLPAutomated Mining Of Names Using Parallel Hindi-English CorpusR.
Mahesh K. SinhaIndian Institute of Technology, Kanpur, Indiarmk@iitk.ac.inAbstractMachine transliteration has a number of ap-plications in a variety of natural languageprocessing related tasks such as machinetranslation, information retrieval and ques-tion-answering.
For automated learning ofmachine transliteration, a large parallel cor-pus of names in two scripts is required.
Inthis paper we present a simple yet powerfulmethod for automatic mining of Hindi-English names from a parallel corpus.
Anaverage 93% precision and 85% recall isachieved in mining of proper names.
Themethod works even with a small corpus.
Wecompare our results with Giza++ wordalignment tool that yields 30% precision and63% recall on the same corpora.
We alsodemonstrate that this very method of namemining works for other Indian languages aswell.1 IntroductionTransliteration of names from onescript/language to another has a number of appli-cations in a variety of natural languageprocessing tasks.
These include machine transla-tion, information retrieval, question-answering,multilingual directories, reservation charts, namelists etc.Machine transliteration has been studied by anumber of researchers (Knight et al, 1998; Al-Onaizan et al, 2002; Goto et al, 2003; Huang etal., 2003; Feng et al, 2004; Asif et al, 2006;Kuo et al 2006); Knight and Graehl(1998) usea modular approach in which five probabilitydistributions are obtained for various phases ofthe transliteration - generation and pronunciationof English word sequences, conversion of Eng-lish sounds to Japanese and then Japanese soundsto Katakana writing.
Al-Onaizan and Knight(2002) present work on transliteration from Eng-lish to Arabic.
It relies on an existing named enti-ty recognition system, which identifies possiblenamed entities in English.
A predefined phonememapping is used to generate all possible translite-rations.
The validity of transliterations is ex-amined by rating it based on web counts, and co-references by querying for the candidate transli-teration on popular search engines such asGoogle.
Huang et al (2003) have worked on ex-tracting Hindi-English named entity pairsthrough alignment of a parallel corpus.
Chinese-English pairs are first extracted using a dynamicprogramming string matching.
This Chinese-English model is then adapted to Hindi-Englishiteratively, by using already extracted Hindi-English named entity pairs to bootstrap the mod-el.
The precision achieved by this model is91.8%.
Feng et al (2004) have used a maximumentropy model, in which an alignment probabilityfor target/source named entities is defined over 4features - translation score, transliteration score,co-occurrence score and distortion score.
Theextraction of each feature is involved, but themaximum entropy model over these features isstraightforward.
Kuo et al (2006) uses a syllablealignment algorithm for cross-language syllable-phoneme conversion.
Asif et al (2006) have con-sidered Bengali to English transliteration.
Theypresent a model which upon supervised trainingprovides direct orthographical mapping.
Theyreport an accuracy of 69-89%.
The success of allof these works depends upon the volume andnature of name corpora used.In this paper, we present a simple yet power-ful method for mining of Hindi-English namesfrom a parallel text corpus.
In Hindi, the wordsare written as they are spoken i.e.
it is phonetic innature.
On the other hand, English is non-phonetic in the sense that there is a specifiedusage of a spelling for every word.
Hindi nameswhen written in English have a similar problemthat the users have developed their own spellingsfor names that are commonly accepted.
Thoughthese English spellings do retain the phoneticstructure of Hindi to a large extent, there are var-iations that cannot be easily captured throughrules.
In table 1 a few illustrative examples aregiven.
It is evident that the Hindi vowel modifi-ers (called ?matra?)
do not have unique mappingsto English vowel combinations.
It is difficult toderive simple mapping rules for these.
The map-48ping of semivowels ?y?
and ?v?
and ?schwa?
dele-tions are highly contextual.
However, for theconsonants, the mappings are straightforwardbarring a few exceptions.Our strategy for automatic mining of Hindi-English proper names from parallel corpus ex-ploits this near-invariance in consonant mapping.We compare our results with Giza++ wordalignment.
In the following section, we presentour design methodology followed by experimen-tal results and conclusions.Hindi word inDevanagariHindi word inIITK-Roman(Appendix-A)Corresponding commonly usedEnglish (Roman) transliterationUnacceptable English(Roman) transliterationsObservations????
harISa Harish Hareesh / Hariesh / Hare-ishi.
long vowel map-pingii.
?schwa?
deletioniii.
consonant clustermapping?????
saMjIva Sanjeev or Sanjiv Sanjiiv / Sanjiev /Sanjeiv i. variation in longvowel mappingii.
?schwa?
deletion???????
PAlgunI Phalguni Falguni i. long vowel map-pingii.
consonant map-ping????
mUnA Moona Muna / Muuna / Moonaa preferred long vo-wel mapping????
sUraja Suraj Sooraj / Suuraj / Suraz/Suragi.
long vowel map-pingii.
?schwa?
deletioniii.
consonant map-ping??????
somanAWa Somenath or Somnath Somanath / Somanaath i. long vowel map-pingii.
?schwa?
deletioniii.
peculiar vowelmapping to ?e???????
saksenA Saxena Saksena i. long vowel map-pingii.
preferred conso-nant mapping?????
xIkSiwa Dixit or Dikshit Deexit / Dikchhit etc.
i. long vowel map-pingii.
?schwa?
deletioniii.
preferred conso-nant mapping????
moxI Modi Modee / Modii / Modyetc.preferred long vo-wel mapping??????
soniyA Sonia Soniya preferred semivowelmapping????????
?rAmaxevaxevaRamdeoDevaRamdev /Ramadev / Ra-madeoDeo / Devpreferred semivowelmappingTable 1: An Illustration of Hindi to English Name Transliteration Variations2 Hindi-English Name Corpus CreationWe use an aligned parallel Hindi-English textcorpus for creation of Hindi-English name cor-pus.
The size of the corpus is immaterial and itcould be as small as a few lines.
The sentencealignment also need not be perfect as long as thealigned set of sentences contain the translatedsentences.
Our methodology is even capable ofcapturing to some extent mapping between oldcity names with new city names such as Bombayand Mumbai.
Figure 1 depicts the process ofname mining diagrammatically.The Hindi text written in Devanagari is firstconverted to IITK-Roman form (appendix-A).IITK-Roman has become a de-facto standardused by a large number of researchers in India.The conversion to IITK-Roman form isstraightforward and is a direct representation ofUTF-8 or ISSCII-8 coding schemes without any49loss of constituent information in terms of pho-nemes or constituent symbols.
The usage ofIITK-Roman form is more for entry and pro-gramming convenience.As outlined earlier, in order to simplify thelearning process, the trivial consonant (C) andconsonant cluster (C+) mappings are providedseparately in the form of rules.
The main conso-nant mappings from IITK-Roman to English areshown in figure 2.k(?
)?k/c/ck; K(?
)?kh; g(?
)?g; G(?)?gh;f(?)?n;c(?
)?ch; C(?
)?chh; j(?
)?j/z; J(?
)?jh; F(?)?n;t(?
)?t; T(?
)?th; d(?
)?d; D(?
)?dh; N(?)?n;w(?
)?t; W(?
)?th; x(?
)?d; X(?
)?dh; n(?)?n;p(?
)?p; P(?
)?ph/f; b(?
)?b; B(?
)?bh; m(?)?m;y(?
)?y; r(?
)?r; l(?
)?l; v(?)?v/w;s(?
)?s; S(?
)?sh; R(?
)?sh; h(?)?h;kR(?
)?x; jF(?)?
gy; dZ(?)
?r;q (?)?
?r/k;  M(?)?
?n; H(??)?h;ks(??
)?x; kZ (?
)?q; jZ (?
)?z; PZ (?
)?fFigure 2: IITK-Roman to English consonant mappingA (??)?
a;  i (??)?
i; I (??)?
i;   u (??)?u;U(??
)?u;   e(?)?
?e;  E(??
)?ai;   o (??)?o;O(??
)?ou;Figure 3: IITK-Roman to English vowel mappingThe consonant mappings are exploited in hy-pothesizing plausible name transliterations.
Fol-lowing steps explain the process of mining ofHindi-English name pairs:i.
For each aligned line, collect all the wordsin the English sentence that have first letter inupper case.
These are potential English propernames excepting the first word that may or maynot be a proper name.ii.
For each word, apply consonant clustermap-ping from English to Hindi (using the map-ping as given in figure 2 in reverse fashion).
Inabsence of a defined mapping, the consonant isignored.
This yields one or more plausible Hindinames as there are one to many reverse map-pings.
The following three mappings are veryrare and so are ignored for efficiency: f?n;F?n; H?h.
Further, the semivowel ?y?
is nottreated as a consonant if it is the last character ofthe word.
It is treated as a consonant if it is pre-ceded or followed by a vowel.iii.
Collapse each of the above word into be-ing part of the plausible Hindi name by deletingall vowels in it.iv.
Each collapsed plausible Hindi name, asde-rived in the preceding step, is string-matchedwith the Hindi words in the correspondingaligned Hindi line.
The process of matchinglooks for maximal ordered string match omittingthe Hindi vowels.?
In case no match is found, it is ig-nored.?
In case of multiple matches, mi-nimal word length distance is tak-en as the criterion for selection.Aligned Parallel Text CorpusConvert to IITK-Roman formCollect all English words starting with upper caseFor each word, apply consonant cluster map-ping using mapping of fig.
2 in reverse fashionCollapse each of the above word bydeleting all intervening vowelsEach collapsed word is string matchedwith the Indian language words inthe corresponding aligned Indian language line.Select the maximal ordered match word.In case of a tie, match the interveningvowels using mapping of figure 3Perform Smoothening & Filtering on the datacollected from the entire corpus (see text)Figure 1: Schematic flow diagram of thename mining process50?
In order to avoid false matching,length must be greater than 1 andat least 30% of characters mustmatch.?
Further, a constraint that the firstcharacter of the mapped wordsmust both be either a consonant orboth be a vowel, is imposed.v.
In case two or more matches have samemaximal length match, then the maximal matchwith the plausible un-collapsed (i.e.
including theintervening vowels with their mapping using fig-ure 3) Hindi name is matched and the orderedmaximal length match is selected.
Usually such asituation is encountered when two or more simi-lar names are encountered in the aligned lines.An example of this would be say the two names?Hindi?
and ?Hindu?
occur in the same sentence.These will get matched to the same degree bystep (iv) above.
The way to resolve this is to alsotake intervening vowels into account.
The IITKRoman vowel mapping to English used here isgiven in figure 3.
It may be noted that only onevowel mapping out of the many possibilities, hasbeen taken.
This is the most frequent mappingand is taken as the baseline vowel mapping.vi.
The final stage is that of filtering andsmoothening.?
For every English name, the corres-ponding Hindi name mapping(s) withtheir frequency of occurrence is rec-orded for the entire corpus.?
In case of multiple mappings, eachmapping is examined.
The suffix thatrepresent the post-position markerssuch as ne (ne ??
), ka(kA ??
), ko (ko??
), ki(kI ??
), ke(ke ??
), se(se ??
),men(meM ??
), par(para ??
), vala (vA-lA ????)
etc.
in Hindi  are stemmed.Further, other morphological co-joiners (?sandhi?)
for other Indianscripts are also stemmed.?
After stemming, the frequency is re-computed.?
The mapping with the highest fre-quency is selected.Although these post-position markers in Hindiare separate words and are usually written with apreceding blank, many a time it is not properlyobserved and appears as a suffix.Given below is an illustrative example:English sentence:It goes daily from Delhi to Mumbai, Bangalore,Varanasi and Lucknow.Aligned Hindi Sentence:??
??????
?????
??
????
?, ?????
?, ?????????
????
????
??
?
(Converted to IITK-Roman)yaha rojAnA xillI se mumbaI, bEMgaluru,vArANasI Ora laKanaU jAwI hE.Probable English Proper Nouns:It Delhi Mumbai Bangalore Varanasi LucknowPlausible Hindi Names after reverse consonantsubstitutions:{it iw} {delhi xelhi} {mumbai}{bangalore baMgalore} {varanasi varaNasi va-raMasi}{luknov lukNov lukMov}Collapsed plausible corresponding Hindi Names:{t w} {dlh xlh} {mmb} {bnglr bMglr}{vrns vrNs vrMs} {lknv lkNv lkMv}Hypothesized Hindi Names after matching:Delhi?
xillI ?????
;Mumbai ?mumbaI ?????
;Bangalore ?bEMgaluru ??????
;Varanasi ?
vArANasI ???????
;Lucknow ?laKanaU ???
?.In the above example, the first word ?It?
does notget matched to any of the Hindi words because ofthe constraint that the matching length has to begreater than 1 and a minimum of 30% of lengthmust match.It is interesting to note the method outlinedcaptures even those names that differ in theirforms or spelling such as Delhi & ?????
(xillI),Bangalore & ??????
(bEMgaluru) and Lucknow& ????
(laKanaU) based on maximal match.For transliteration, these have to made table dri-ven.Given below is an illustration of step (v) ofthe procedure:English sentence:Mr. Handa speaks Hindi and he is a Hindu.Aligned Hindi Sentence:??
?????
?????
?????
??
??
??
??
????
???
?
(Converted to IITK-Roman)SrI hAMdA hinxI bolawe hEM Ora vaha eka hin-xU hEM.51Probable English Proper Nouns:Mr Handa Hindi Hindu.Plausible Hindi Names after reverse consonantsubstitutions:{mr mq} {haNda handa haMda haNxa hanxahaMxa} {hiNdi hindi hiMdi hiNxi hinxi hiMxi}{hiNdu hindu hiMdu hiNxu hinxu hiMxu}Collapsed plausible corresponding Hindi Names:{mr mq} {hNd hnd hMd hNx hnx hMx} {hNd hndhMd hNx hnx hMx} {hNd hnd hMd hNx hnxhMx}Hypothesized Hindi Names after matching:Handa?
hAMdA ?????
; hinxI ?????
; hinxU ????
;?Hindi ?
hAMdA ?????
; hinxI ?????
; hinxU ????
;?Hindu ?
hAMdA ?????
; hinxI ?????
; hinxU ????
;?Now since these are equiprobable multiplematches, step (v) will get invoked.
For eachmatching target word, the vowel mapping of fig-ure 3 is applied.
This yields the following:hAMdA ??????
haMda;hinxI ?????
?hinxi;hinxU ?????
?hinxu;Now the English source word is matched andminimal distance word is selected.
This finallyyields the desired result as follows:Handa?
hAMdA ?????
;Hindi ?
hinxI ?????
;Hindu ?
hinxU ????
;?Given below is an illustration of step (vi) ofthe procedure:Suppose in the entire corpus the city name?Agra?
yields the following matches:i. Agra ?AgarA ????
; count=20;ii.
Agra ?Agare ????
; count=12;iii.
Agra ?AgarAse ??????
; count=5;iv.
Agra ?AgarAmeM ??????
; count=4;v. Agra ?AgarAkA ??????
; count=2;Now the process of smoothening will convertAgarAse ??????
to AgarA ????
by deletingpost-position suffix ?se???
; AgarAmeM ?????
?to AgarA ????
by deleting post-position suffix?meM???
; and AgarAkA ??????
to AgarA ???
?by deleting post-position suffix ?kA???.
Thiswill yield the final table as follows:i. Agra ?AgarA ????
; count=31;ii.
Agra ?Agare ????
; count=12;The filtering process will select the mappingof Agra ?AgarA ???
?.It may be noted that the word Agare ????
isthe oblique form of the name AgarA ????
andsuch usage is very common in Indian languages.A morphological processing is required to makethe conversion and this has not been imple-mented in the current implementation.3 Experimentation and ResultsFor experimentation, we took a text that con-tained a lot of names.
Two sentence aligned fileswere created from a Indian freedom fighters?story.
This story contains a lot of names of indi-viduals and places in the text.
The results of ourname mining methodology are summarized intable 2.
We also used Giza++ word alignmenttool (Och and Ney, 2003) on the same files andcollected figures pertaining to the alignment ofproper names in Hindi and English.
In case ofmultiple mappings for a proper name in whichone of them is a correct mapping, it is consideredas ?false positive?.
These results are also shownin table 2 for comparison.File1 File2Name?map?ping?Giza++?
Name?mapping?Giza++Total?no.
?of?words?2439 2439?
4909 4909Total?no.
?of?Names(N)?192 192?
343 343Correct?map?ping?
(TP)?155 57?
262 74Incorrect??mapping?
(FP)?13 117?
35 200Not?captured?
(FN)?24 18?
46 69Accuracy?
(TP/N)?0.8073 0.2969?
0.7638 0.2157Precision?(TP/(TP+FP))?0.9226???
0.3276?
?0.9495 0.2701Recall?
(TP/(TP+FN))?0.8659 0.7600?
?0.8506 0.5175F?measure?
(2PR/(P+R))?0.8934 0.4578?
?0.8968 0.3549Table 2.
Result for name mining andword-alignment algorithms.52Our experimentation reveals that our namemining methodology yields a precision of 92 to95% and a recall of 85 to 86% resulting in F-measure of 0.89.
On the other hand, the Giza++word alignment tool yields a precision of 27 to33% and a recall of 52 to 76% resulting in F-measure of 0.35 to 0.46.
The results are a cleardemonstration of effectiveness our approach ofmining proper names from the parallel Hindi-English corpora.
Most of the errors using ourapproach have been found to be due to shortnames, words not properly delineated in the tar-get text, morphological changes in the target text,the first word in English not being a proper nounor different forms of names that are used denot-ing the same place.
It should be noted that ourapproach works even for a corpus of a few linesas it is primarily a rule-based method.The method as outlined above is equally appli-cable to other Indian languages.
In order to dem-onstrate this, we conducted a limited experimentwith Punjabi and Bengali languages.
A corpus ofabout 200 sentences was taken.
The same pro-gram as was used for Hindi with no change in themapping tables was used for the experimentation.The results obtained were remarkable and a per-formance of about 90% and 70% of correct min-ing of proper names for Punjabi and Bengalirespectively is yielded.
The poorer performancein case of Bengali is primarily due to morpholog-ical changes that take place in the proper namesbased on their role in the sentence.
Unlike inHindi where the post-positions are written sepa-rately or simply suffixed, for most of the otherIndian languages, these post-position markers areco-joined (?Sandhi?)
with the preceding wordleading to a morphological change.
This is lessfrequent in Punjabi.
Further, Bengali has no con-sonant for ?va?
?
and this is mapped to ?ba?
?.So some consonant mapping changes are re-quired to yield better results for another Indianlanguage but the methodology remains the same.Here are some example mappings:Bengali:i. Cath hasn't phoned since she went to Berlin.bArline yAoyZA Weke kyAWa Pona kareni????????
??o??
????
????
????
??????ii.
Jo was the next oldest after Martin.mArtinera parei badZa Cila jo?????
???
??
?i ??
???
???
?Names extracted:Cath ?
kyAWa ????
;Berlin ?
bArline ??????
?Here the correct mapping is ?bArlina ???????
butthe name has got morphologically transformed to?bArline ????????
(to Berlin) based on co-joiningof post-position marker.Martin ?
mArtinera ????
??
?Here the correct mapping is ?mArtina ????
?
?but the name has got morphologically trans-formed to ?mArtinera ????
????
(after Martin) )based on co-joining of post-position marker.Punjabi:i. Sam Sand Dunes is one of the best nature's giftto the human beings.sEma sEzda diUnasa manuYKa xe laI prakira-wI xe saraba SreSata wohaPZiAz viYcoz iYkahE.???
???
?????
?????
??
??
???????
??
????????
???????
?????
???
???ii.
Bikaner is located to the north of Rajasthanpopularly known as a camel country.bIkAnera rAjasaWAna xe uYwara viYca sa-Wiwa hE awe saXAraNa wOra we UTa-praxeSaxe rUpa viYca jANiA jAzxA hE.??????
?
???????
??
???
????
????
??
??
??????
???
??
??-?????
??
???
????
?????
?????
?Names extracted:Sam ?
sEma ???
;Sand ?
sEzda ???
;Dunes ?
diUnasa ?????
;Bikaner ?
bIkAnera ??????
?
;Rajasthan  ?
rAjasaWAna ??????
?4 ConclusionsIn this paper, we have presented a simple yetpowerful method for mining of Hindi-Englishproper name corpus with a success of miningbeing 93% precision.
In contrast, GIZA+ wordalignment tool on same sized corpus yielded 29%precision.
The proposed method works even for asingle line text.
Moreover, there is no strict re-quirement of sentence alignment as it worksequally well for one to many and many to manysentence alignment as long as the target group ofsentences contain the corresponding translation.53Thus it works under noisy environments wheresentence boundaries are not correctly identified.Our approach also yields a table of similar oldcity names with new city names that is very fre-quently encountered in Indian context.The methodology outlined in this paper for au-tomatic mining of proper names are equally ap-plicable to all Indian languages as all Indianscripts are phonetic in nature in the same way asDevanagari (used for Hindi).
We have also dem-onstrated that this very method of name miningwithout making any changes in the program orthe mapping table as used for Hindi, works forother Indian languages.
Our limited experimenta-tion for Punjabi and Bengali and have yieldedperformance of 90% and 70% respectively ofcorrect mining of proper names.There are several other advantages of our ap-proach.
Since the proper name mining is cap-tured with a high accuracy over a rough or noisyaligned corpus, it is possible to use these as anc-hors (the same way as numerals) for improve-ment of the alignment results.
These anchors willalso be useful in word alignment programs forspeedy convergence.
Accurate word alignment iscrucial to the success of any statistical machinetranslation system.
Another byproduct of ourapproach is that it also yields the table of old citynames with new city names.
In India, a largenumber of city names that were used during Brit-ish time, have undergone a change and most ofthese changes are phonetic variations of the oldnames.AcknowledgementsAuthor is thankful to Saleem Siddiqui and AbhaySingh for experimentation and testing.ReferencesAl-Onaizan Y. and Knight K.2002.
TranslatingNamed Entities Using Monolingual and BilingualResources.
Proceedings of  ACL 2002, 400-408.Ekbal Asif, Sudip Kumar Naskar and Sivaji Bandyo-padhyay.
2006.
A Modified Joint Source-ChannelModel for Transliteration, Proceedings of  ACL2006.Feng Dong-Hui, Ya-Juan Lv, and Ming Zhou.
2004.ANew Approach for English-Chinese Named EntityAlignment.
Proceedings of  ACL 2004.Goto I., N. Kato, N. Uratani, and T. Ehara.
2003.Transliteration considering Context Informationbased on the Maximum Entropy Method.
Proceed-ing of the MT-Summit IX, New Orleans, USA, 125-132.Huang Fei, Stephan Vogel, and Alex Waibel.
2003.Extracting Named Entity Translingual Equivalencewith Limited Resources.
ACM Transactions onAsian Language Information Processing (TALIP),2(2):124?129.Knight K. and J. Graehl.
1998.
Machine Translitera-tion, Computational Linguistics, 24(4): 599-612.Kuo Jin-Shea , Haizhou Li and Ying-Kuei Yang.2006.
Learning Transliteration Lexicons from theWeb, The 44th Annual Meeting of Association forComputational Linguistics (COLING-ACL2006),Sydney, Australia, 1129 ?
1136.Och Franz Josef and Hermann Ney.
2003.
A Syste-matic Comparison of Various Statistical AlignmentModels, Computational Linguistics, 29( 1):19-51.
(http://www.fjoch.com/GIZA++.html)Mansur Arbabi, Scott M. Fischthal, Vincent C.Cheng, and Elizabeth Bar.
1994.
Algorithms forArabic name transliteration.
IBM Journal of Re-search and Development, 38(2): 183-193.Paola Virga and Sanjeev Khudanpur.
2003.
Translite-ration of Proper Names in Crosslingual Informa-tion Retrieval.
Proceedings of the ACL 2003Workshop on Multilingual and MixedlanguageNamed Entity Recognition, Sapporo, Japan, 57-60.Appendix-A: IITK-Roman code for Hindi(Devanagari)?
?
?
?
?
?
?
?
?
?
???
??
??
?
??
?
?
??
??
???
??
?
???
?
??
??
?a    A   i     I     u   U  q   e  E   o   O  M  H   V  z   Z?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?k   K   g  G  f    c   C   j  J   F   t   T  d   D  N  w W  x  Xn?
?
?
?
?
?
?
?
?
?
?
?
?p  P  b  B   m   y  r   l   v   s   S  R  h54
