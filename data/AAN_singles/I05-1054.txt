R. Dale et al (Eds.
): IJCNLP 2005, LNAI 3651, pp.
612 ?
623, 2005.?
Springer-Verlag Berlin Heidelberg 2005Machine Translation Based on Constraint-BasedSynchronous GrammarFai Wong1, Dong-Cheng Hu1, Yu-Hang Mao1,Ming-Chui Dong2, and Yi-Ping Li21Speech and Language Processing Research Center,Department of Automation, Tsinghua University, 100084 Beijinghuangh01@mails.tsinghua.edu.cn{hudc, myh-dau}@mail.tsinghua.edu.cn2Faculty of Science and Technology of University of Macao,Av.
Padre Tom?s Pereira S.J., Taipa, Macao{dmc, ypli}@umac.moAbstract.
This paper proposes a variation of synchronous grammar based onthe formalism of context-free grammar by generalizing the first component ofproductions that models the source text, named Constraint-based SynchronousGrammar (CSG).
Unlike other synchronous grammars, CSG allows multipletarget productions to be associated to a single source production rule, which canbe used to guide a parser to infer different possible translational equivalencesfor a recognized input string according to the feature constraints of symbols inthe pattern.
Furthermore, CSG is augmented with independent rewriting that al-lows expressing discontinuous constituents in the inference rules.
It turns outthat such grammar is more expressive to model the translational equivalences ofparallel texts for machine translation, and in this paper, we propose the use ofCSG as a basis for building a machine translation (MT) system for Portugueseto Chinese translation.1   IntroductionIn machine translation, to analyze the structure deviations of languages pair hence tocarry out the transformation from one language into another as the target translation isthe kernel part in a translation system, and this requires a large amount of structuraltransformations in both grammatical and concept level.
The problems of syntactic com-plexity and word sense ambiguity have been the major obstacles to produce promisingquality of translation.
In order to overcome the obstacles and hence to improve the qual-ity of translation systems, several alternative approaches have been proposed.As stated in [1], much of the theoretical linguistics can be formulated in a verynatural manner as stating correspondences between layers of representations.
In simi-lar, many problems in natural language processing, in particular language translationand grammar rewriting systems, can be expressed as transduction through the use ofsynchronous formalisms [2,3,4,5,6].
Recently, synchronous grammars are becomingmore and more popular for the formal description of parallel texts representing trans-lations for the same document.
The underlying idea of such formalisms is to combinetwo generative devices through a pairing of their productions in such a way that rightMachine Translation Based on Constraint-Based Synchronous Grammar 613hand side non-terminal symbols in the paired productions are linked.
However, suchformalisms are less expressive and unable to express mutual translations that havedifferent lengths and crossing dependencies.
Moreover, synchronous formalisms donot deal with unification and feature structures, as in unification-based formalisms,that give patterns additional power for describing constraints on features.
For exam-ples, Multiple Context-Free Grammar [4], where functions are engaged to the non-terminal symbols in the productions to further interpreting the symbols in target gen-eration.
In [7], Inversion Transduction Grammar (ITG) has been proposed for simul-taneously bracketing parallel corpora as a variant of Syntax Directed translationschema [8].
But these formalisms are lacked of expressive to describe discontinuousconstituents in linguistic expression.
Generalized Multitext Grammar (GMTG) pro-posed by [5,9] is constructed by maintaining two sets of productions as components,one for each language, for modeling parallel texts.
Although GMTG is more expres-sive and can be used to express as independent rewriting, the lack of flexibility in theway to describe constraints on the features associated with a non-terminal makes itdifficult to the development of practical MT system.In this paper, a variation of synchronous grammar, Constraint-Based SynchronousGrammar (CSG), is proposed based on the formalism of context-free grammar.Through the use of feature structures as that in unification-based grammar, the firstcomponent of productions in CSG, that describes the sentential patterns for sourcetext, is generalized while the corresponding target rewriting rules for each productionare grouped in a vector representing the possible translation patterns for source pro-duction.
The choice of rule for target generation is based on the constraints on fea-tures of non-terminal symbols in pattern.
Our motivation is three-fold.
First, synchro-nous formalisms have been proposed for modeling of parallel text, and such algo-rithms can infer the synchronous structures of texts for two different languagesthrough the grammar representation of their syntactic deviations.
That is quite suitablefor use in the analysis of languages pair in the development of MT system.
Secondly,by augmented the synchronous models with feature structures can enhance the patternwith additional power in describing gender, number, agreement, etc.
Since the de-scriptive power of unification-based grammars is considerably greater than that ofclassical CFG [10,11].
Finally, by retaining the notational and intuitive simplicity ofCFG, we can enjoy both a grammar formalism with better descriptive power thanCFG and more efficient parsing and generation algorithm controlled by the featureconstraints of symbols hence to achieve the purposes of word sense and syntax dis-ambiguation.2   Constraint-Based Synchronous GrammarsConstraint-Based Synchronous Grammars (CSG) is defined by means of the syntax ofcontext-free grammar (CFG) to the case of synchronous.
The formalism consists of aset of generative productions and each production is constructed by a pair of CFGrules with zero and more syntactic head and link constraints for the non-terminalsymbols in patterns.
In a similar way, the first component (in right hand side of pro-ductions) represents the sentential patterns of source language, while the second com-ponent represents the translation patterns in target language, called source and targetcomponent respectively in CSG.
Unlike other synchronous formalisms, the target614 F. Wong et alcomponent of production consists of one or more generative rules associated withzero or more controlled conditions based on the features of non-terminal symbols ofsource rule for describing the possible generation correspondences in target transla-tion.
In such a way, the source components in CSG are generalized by leaving the taskof handling constraints on features in target component, so this also helps to reducethe grammar size.
For example, following is one of the productions used in the MTsystem for Portuguese to Chinese translation:S ?
NP1 VP* NP2 PP NP3 {[NP1 VP1 NP3 VP2 NP2;VPcate=vb1,VPs:sem = NP1sem, VPio:sem=NP2sem,VPo:sem=NP3sem],[NP1 VP NP3 NP2 ;VP =vb0,VPs:sem =NP1sem,VPio:sem=NP2sem]}(1)The production has two components beside the reduced syntactic symbol on lefthand side, the first modeling Portuguese and the second Chinese.
The target compo-nent in this production consists of two generative rules maintained in vector, and eachof which is engaged with control conditions based on the features of symbols from thesource component, and this is used as the selectional preferences in parsing.
Theseconstraints, in the parsing/generation algorithm, are used for inferring, not only, thestructure of input to dedicate what structures are possible or probable, but also thestructure of output text for target translation.
For example, the condition expression:VPcate=vb1, VPs:sem=NP1sem, VPio:sem=NP2sem, VPo:sem=NP3sem, specifies if the senses ofthe first, second and the third nouns (NPs) in the input strings matched to that of thesubject, direct and indirect objects governed by the verb, VP, with the category typeof vb1.
Once the condition gets satisfied, the source structure is successfully recog-nized and the corresponding structure of target language, NP1 VP1 NP3 VP2 NP2, isdetermined also.Non-terminal symbols in source and target rules are linked if they are given thesame index ?subscripts?
for case of multiple occurrences, such as NPs in the produc-tion: S ?
NP1 VP NP2 PP NP3 [NP1 VP* NP3 NP2], otherwise symbols that appearonly once in both the source and target rules, such as VPs, are implicitly linked togive the synchronous rewriting.
Linked non-terminal must be derived from a se-quence of synchronized pairs.
Consider the production: S ?
NP1 VP NP2 PP NP3[NP1 VP* NP3 NP2], the second NP (NP2) in the source rule corresponds to the thirdNP (NP2) in the target rule, the third NP (NP3) in source rule corresponds to the sec-ond NP (NP3) in target pattern, while the first NP (NP1) and VP correspond to eachother in both source and target rules.
The symbol marked by an ?*?
is designated ashead element in pattern, this allows the features of designated head symbol propagateto the reduced non-terminal symbol in the left hand side of production rule, hence toachieve the property of features inheritance in CSG formalism.
The use of featuresstructures associated to non-terminal symbols will be discussed in the later section inthis paper.In modeling of natural language, in particular for the process of languages-pair, thetreatment for non-standard linguistic phenomena, i.e.
crossing dependencies, discon-tinuous constituents, etc., is very important due to the structure deviations of twodifferent languages, in particular for languages from different families such as Portu-guese and Chinese [12,13].
Linguistic expressions can vanish and appear in transla-tion.
For example, the preposition (PP) in the source rule does not show up in any ofMachine Translation Based on Constraint-Based Synchronous Grammar 615the target rules in Production (1).
In contrast, Production (2) allows the Chinese char-acters of ???
and ???
to appear in the target rules for purpose to modify the noun(NP) together with the quantifier (num) as the proper translation for the source text.This explicitly relaxes the synchronization constraint, so that the two components canbe rewritten independently.NP ?
num NP* {[num ?
NP; NPsem=SEM_book],[num ?
NP; NPsem=SEM_automobile]} (2)A remarkable strength of CSG is its expressive power to the description of discon-tinuous constituents.
In Chinese, the use of combination words that discontinuouslydistributed in a sentence is very common.
For example, take the sentences pair [?Elevendeu-me todas as uvas.
(He sell me all the grapes.
)?, ????????????
?
].The Chinese preposition ???
and the verb ?????
should be paired with the Portu-guese verb ?vendeu?, and this causes a fan-out1 and discontinuous constituent in theChinese component.
The following fragment of CSG productions represents suchrelationships.S ?
NP1 VP* NP2 NP3 {[NP1 VP1 NP3 VP2 NP2 ; VPcate=vb0,?],..
}VP ?
vendeu* {[?, ???
;?
]}(3)(4)In Production (3), the corresponding discontinuous constituents of VP (from sourcerule) are represented by VP1 and VP2 respectively in the target rule, where the ?super-scripts?
are added to indicate the pairing of the VP in target component.
The corre-sponding translation constituents in the lexicalized production are separated by com-mas representing the discontinuity between constituents ???
and ?????
in targettranslation.
During the rewriting phase, the corresponding constituents will be used toreplace the syntactic symbols in pattern rule.3   DefinitionsLet L be a context-free language defined over terminal symbol VT and generated by acontext-free grammar G using non-terminal symbol VN disjointed with VT, startingsymbol S, and productions of the form A ?
w where A is in VN and w in (VN?VT)*.Let Z as a set of integers, each non-terminal symbol in VN is assigned with an integer,?
(VN) = {W?
| W ?
VN, ?
?
Z}.
The elements of ?
(VN) are indexed non-terminal sym-bols.
Now, we extend to include the set of terminal symbols VT?
as the translation intarget language, disjoint from VT, (VT VT?=?).
Let R = {r1, ?, rn | ri?
(?(VN)?VT?
), 1 ?i ?
n} be a finite set of rules, and C = {c1, ?, cm} be a finite set of constraints over theassociated features of (?
(VN)?VT), where the features of non-terminal ?
(VN), the syn-tactic symbols, are inherited from the designated head element during rule reduction.A target rule is defined as pair [r?R*, c?C*] in ?, where ?
= R*?C* in form of [r, c].Now, we define ?
(?i) to denote the number of conjunct features being considered in1 We use this term for describing a word where its translation is paired of discontinuous wordsin target language, e.g.
?vendeu[-pro] [NP]?
in Portuguese gives similar English translation as?sell [NP] to [pro]?, so ?vendeu?, in this case, is corresponding to ?sell?
and ?to?.616 F. Wong et althe associated constraint, hence to determine the degree of generalization for a con-straint.
Therefore, the rules, ?i and ?j, are orderable, ?i p  ?j, if ?
(?i) ?
?
(?j) (or ?i f  ?j,if ?
(?i) < ?(?j)).
For ?i p  ?j (?
(?i) ?
?
(?j)), we say, the constraint of the rule, ?i, ismore specific, while the constraint of ?j is more general.
In what follows, we considera set of related target rules working over the symbols, w?, on the RHS of production A?
w?, the source rule, where w?
?
?(VN)?VT.
All of these non-terminals are co-indexed as link.Definition 1: A target component is defined as a ordered vector of target rules in ?having the form ?
= {?1, ?, ?
q}, where 1 ?
i ?
q to denote the i-th tuple of ?.
Therules are being arranged in the order of ?1 p ?2p  ?p ?q.In rule reduction, the association conditions of the target rules are used for investi-gating the features of corresponding symbols in source rules, similar to that of featureunification, to determine if the active reduction successes or not.
At the mean while,this helps in determining the proper structure as the target correspondence.Definition 2: A Constraint-Based Synchronous Grammar (CSG) is defined to be5-tuple G = (VN, VT, P, CT, S) which satisfies the following conditions:?
VN is a finite set of non-terminal symbols;?
VT is a finite set of terminal symbols which is disjoint with VN;?
CT is a finite set of target components;?
P is a finite set of productions of the form A ?
?
?, where ?
?
(?
(VN)?VT)*and, ?
?
CT, the non-terminal symbols that occur from both the source and targetrules are linked under the index given by ?(VN)2.?
S ?
VN is the initial symbol.For example, the following CSG productions can generate both of the parallel texts[?Ele deu um livro ao Jos?.
(He gave a book to Jos?
)?, ??????????]
and [?Elecomprou um livro ao Jos?.
(He bought a book from Jos?
)?, ???????????
]:S ?
NP1 VP* NP2 PP NP3 {[NP1 VP1 NP3 VP2 NP2;VPcate=vb1,VPs:sem = NP1sem, Pio:sem=NP2sem,VPo:sem=NP3sem],[NP1 VP NP3 NP2 ;VP =vb0,VPs:sem =NP1sem,VPio:sem=NP2sem]}(5)VP ?
v3 {[v ; ?]}
(6)NP ?
det NP* {[NP ; ?]}
(7)NP ?
num NP* {[num ?NP; NPsem=SEM_book]} (8)2Link constraints are dedicated by the symbols indices, which is trivially for connecting thecorresponding symbols between the source and target rules.
Hence, we assume, without lossof generality, that index is only given to the non-terminal symbols that have multiple occur-rences in the production rules.
It is assumed that ?S ?
NP1 VP2 PP3 NP4 {NP1 VP21 NP4VP22}?
implies ?S ?
NP1 VP PP NP2 {NP1 VP1 NP2 VP2}?.3Similar for the designation of head element in productions, the only symbol from the RHS ofproduction will inherently be the head element.
Thus, no head mark ?*?
is given for suchrules, and we assume that ?VP ?
v*?
implies ?VP ?
v?.Machine Translation Based on Constraint-Based Synchronous Grammar 617NP ?
n {[n ; ?]}
(9)NP ?
pro {[pro ; ?]}
(10)PP ?
p {[p ; ?]}
(11)n ?
Jos?
{[??
; ?
]}| livro {[?
; ?]}
(12)pro ?
ele {[?
; ?]}
(13)v ?
deu{[??
; ?]}
| comprou {[?, ??
;?]}
(14)num ?
um {[?
; ?]}
(15)p ?
a {?}
(16)det ?
o {?}
(17)A set P of productions is said to accept an input string s iff there is a derivation se-quence Q for s using source rules of P, and any of the constraint associated with everytarget component in Q is satisfied4.
Similarly, P is said to translate s iff there is asynchronized derivation sequence Q for s such that P accepts s, and the link con-straints of associated target rules in Q is satisfied.
The derivation Q then produces atranslation t as the resulting sequence of terminal symbols included in the determinedtarget rules in Q.
The translation of an input string s essentially consists of three steps.First, the input string is parsed by using the source rules of productions.
Secondly, thelink constraints are propagated from source rule to target component to determine andbuild a target derivation sequence.
Finally, translation of input string is generatedfrom the target derivation sequence.3.1   Feature RepresentationIn CSG, linguistic entities are modeled as feature structures which give patterns addi-tional power for describing gender, number, semantic, attributes and number of thearguments required by a verb, and so on.
These information are encoded in the com-monly used attribute value matrices (AVMs), attached to each of the lexical and syn-tactic symbols in CSG.
This allows us to specify such as syntactic dependencies asagreement and sub-categorization in patterns.
Unlike other unification-based gram-mars [11,14], we do not carry out the unification in full, only interested conditionsthat are explicitly expressed in the rule constraints are tested and unified.
Such unifi-cation process can perform in constant time.
The use of feature constraints has to berestricted to maintain the efficiency of parsing and generating algorithms, especiallyto the prevention from generating a large number of ambiguous structure candidates.The word selection in the target language can also be achieved by checking features.In the parsing and generating algorithm, the features information are propagated to thereduced symbol from the designated head element in pattern, hence to realize themechanism of features inheritance.
Features can either be put in lexical dictionaryisolated from the formalism to make the work simpler to the construction of analyticalgrammar, or explicitly encoded in the pre-terminal rules as:4If there is no any constraint associated to a target rule, during the parsing phase, the reductionof the source rule is assumed to be valid all the time.618 F. Wong et alPro ?
Jos?
:[CAT:pro;NUM:sg;GEN:masc,SEM:hum] {[??
; ?]}
(18)n ?
livro:[CAT:n;NUM:sg;GEN:masc;SEM:artifact+book] {[?
; ?]}
(19)Where the features set is being bracketed, and separated by a semi-colon, the nameand the value of a feature are delimited by a colon to represent the feature pair.
An-other way to enhance the CSG formalism is to apply the soft preferences other thanhard constraints in the process of features unification.
Our consideration is two-fold:first, we found that more than one combination of feature values engaged to a singlelexical item is very common in the process of natural language, i.e.
one word mayhave several translations according to the different senses and the pragmatic uses ofthe word, and this has been the problem of word senses disambiguation [15].
Sec-ondly, the conventional feature unification method can only tell us if the process suc-cesses or not.
In case of a minor part of conditions get failed during the unification, allthe related candidates are rejected without any flexibility to choosing the next prefer-able or probable candidate.
In order to resolve these problems, each feature structureis associates with a weight.
It is then possible to rank the matching features accordingto the linear ordering of the weights rather than the order of lexical items expressed ingrammars or dictionary.
In our prototyping system, each symbol has its originalweight, and according to preference measurement at the time in checking the featureconstraints, a penalty is used to reduce from the weight to give the effective weight ofassociated features in a particular context.
Features with the largest weight are to bechosen as the most preferable content.4   Application to Portuguese-Chinese MTCSG formalism can be parsed by any known CFG parsing algorithm including theEarley [16] and generalized LR algorithms [17] augmented by taking into account thefeatures constraints and the inference of target structure.
In the prototyping system,the parsing algorithm for our formalism is based on the generalized LR algorithm thatwe have development for MT system, since the method uses a parse table, it achievesa considerable efficiency over the Earley?s non-complied method which has to com-pute a set of LR items at each stage of parsing [17].
Generalized LR algorithm wasfirst introduced by Tomita for parsing the augmented Context-Free grammar that caningeniously handle non-determinism and ambiguity through the use of graph-structured stack while retaining much of the advantages of standard LR parsing5.
Ittakes a shift-reduce approach using an extended LR parse table to guide its actions byallowing the multiple actions entries such as shift/reduce and reduce/reduce hence tohandle the nondeterministic parse with pseudo-parallelism.
In order to adapt to ourformalism, we further extend the parse table by engaging with the features constraintsand the target rules into the actions table.
Our strategy is thus to parse the source rulesof CSG productions through the normal shift actions proposed by the parsing table,while at the time reduce action to be fired, the associated conditions are checked todetermine if the active reduction is a valid action or not depending on if the workingsymbols of patterns fulfill the constraints on features.5Especially when the grammar is close to the LR grammars.Machine Translation Based on Constraint-Based Synchronous Grammar 6194.1   The CSG Parse TableFig.
1 shows an extended LR(1) parsing table for Productions (5)-(17)6 as constructedusing the LR table construction method described in [18] extended to consider therule components of productions by associating the corresponding target rules withconstraints, which are explicitly expressed in table.
The parsing table consists of twoparts: a compact ACTION-GOTO table 7  and CSONTRAINT-RULE table.
TheACTION-GOTO table s indexed by a state symbol s (row) and a symbols x ?VN?VT,including the end marker ???.
The entry ACTION[s, x] can be one of the following: sn, r m, acc or blank.
s n denotes a shift action representing GOTO[s, x]=n, definingthe next state the parser should go to; r m means a reduction by the mth productionlocated in the entry of CONSTRAINT-RULE in state s, and acc denotes the acceptaction and blank indicates a parsing error.
The CONSTRAINT-RULE table is in-dexed by state symbol s (row) and the number of productions m that may be appliedfor reduction in state s. The entry CONSTRAINT-RULE[s, m] consists of a set ofinvolved productions together with the target rules and features constraints that areused for validating if the active parsing node can be reduced or not, then try to iden-tify the corresponding target generative rule for reduced production.4.2   The CSG ParserIn the parsing process, the algorithm operates by maintaining a number of parsingprocesses in parallel, each of which represents an individual parsed result, hence tohandle the case of non-deterministic.
In general, there are two major components inthe process, shift(i) and reduce(i), which are called at each position i=0, 1, ?, n inan input string I = x1x2?xn.
The shift(i) process with top of stack vertex v shifts on xifrom its current state s to some successor state s?
by creating a new leaf v?
; estab-lishing edge from v?
to the top of stack v; and making v?
as the new top ofstack vertex.The reduce(i) executes a reduce action on a production p by following the chainofparent links down from the top of stack vertex v to the ancestor vertex from whichthe process began scanning for p earlier, then popping intervening vertices off thestack.
Now, for every reduction action in reduce(i), there exists a set C of orderedconstraints, c1p ?p cm, with the production, each of which is associated with a targetrule that may be the probable corresponding target structure for the production, de-pending on whether the paired constraint gets satisfied or not according to the featuresof the parsed string p. Before reduction takes place, the constraints cj (1 ?
j ?
m) aretested in order started from the most specific one, the evaluation process stops once apositive result is obtained from evaluation.
The corresponding target rule for theparsed string is determined and attached to the reduced syntactic symbol, which willbe used for rewriting the target translation in phase of generation.
At the mean while,the features information will be inherited from the designated head element of pro-duction.
The parsing algorithm for CSG formalism is given in Fig.
2.6For simplicity, the productions used for building the parse table are deterministic, so no con-flict actions such as shift/reduce and reduce/reduce appear in the parse table in Fig.1.7Original version introduced in [17] maintains two tables, ACTION and GOTO.620 F. Wong et alACTIONs/GOTOsStep ronumnv  d etp NPVPPPS ?
o a umeleJos?livrodeucomprouReduced RulesConstraints/TargetRules0 s8 s9 s10  s11  s7   s6  s5  s2 s1 s4 s31               r1     (1) pro ?
ele   {[?
; ?
]}2              r1      (1) num ?
um3                 r1   (1) n ?
livro   {[?
; ?
]}4                r1    (1) n ?
Jos?
{[??
; ?
]}5            r1        (1) det ?
o6           acc7    s14    s15          s12 s138 r1                   (1) NP ?
pro9 s8 s9 s10  s11  s16     s5  s2 s1 s4 s310   r1                 (1) NP ?
n11 s8 s9 s10  s11  s17     s5  s2 s1 s4 s312                  r1  (1) v ?
deu   {[??
; ?
]}13                   r1 (1) v ?
comprou {[?, ??
;?
]}14    r1                (1) VP ?
v15 s8 s9 s10  s11  s18     s5  s2 s1 s4 s316       r1             (1) NP ?
num NP* {[num ?
NP; NPsem=SEM_book]}17       r1             (1) NP ?
det NP*   {[NP ; ?
]}18      s21   s20    s1919             r1       (1) p ?
a20 s8 s9 s10  s11  s22     s5  s2 s1 s4 s321      r1              (1) PP ?
p22          r1          (1) S ?
NP1 VP* NP2 PP NP3 {[...]}Fig.
1.
Extended LR(1) parse tablePARSE(grammar,x1 ?
xn)xn+1?
?Ui??
(0 ?
i ?
n)U0?v0for each terminal symbol xi (1 ?
i ?
n)P?
?for each node v ?
Ui-1P?P?vif ACTION[STATE(v),xi] = ?shift s?
?, SHIFT(v,s?
)for each ?reduce p?
?ACTION[STATE(v),xi], REDUCE(v,p)if ?acc?
?ACTION[STATE(v),xi], acceptif Ui=?, rejectSHIFT(v,s)if v?
?Ui s.t.
STATE(v?
)=s and ANCESTOR(v?,1)=v and statetransition ?
(v,x)=v?do nothingMachine Translation Based on Constraint-Based Synchronous Grammar 621elsecreate a new node v?s.t.
STATE(v?
)=s and ANCESTOR(v?,1)=v and state tran-sition ?
(v,x)=v?Ui?Ui?v?REDUCE(v,p)for each possible reduced parent v1?
?ANCESTOR(v,RHS(p))if UNIFY(v,p)=?success?s?
?
GOTO(v1?,LHS(p))if node v?
?Ui-1 s.t.
STATE(v?
)=s?if ?
(v1?, LHS(p))=v?do nothingelseif node v2?
?ANCESTOR(v?,1)let vc?
s.t.
ANCESTOR(vc?,1)=v1?
and STATE(vc?
)=s?for each ?reduce p?
?
ACTION[STATE(vc?
),xi]REDUCE(vc?,p)elseif v?
?Plet vc?
st. ANCESTOR(vc?,1)=v1?
and STATE(vc?
)=s?for each ?reduce p?
?
ACTION[STATE(vc?
),xi]REDUCE(vc?,p)elsecreate a new node vns.t.
STATE(vn)=s?
and ANCESTOR(vn,1)=v1?
andstate transition ?
(vn,x)=v1?Ui-1?Ui-1?vnelse current reduction failedUNIFY(v,p)for ?constraint cj?
?
CONSTRAINT(STATE(v)) (1 ?
j ?
m,c1p ?p cm)if ?(cj,p)=?true?
(?(?,p)=?true?
)TARGET(v)?jreturn ?success?Fig.
2.
Modified generalized LR Parsing algorithmThe parser is a function of two arguments PARSE(grammar, x1 ?
xn), where thegrammar is provided in form of parsing table.
It calls upon the functions SHIFT(v, s)and REDUCE(v, p) to process the shifting and rule reduction as described.
TheUNIFY(v, p) function is called for every possible reduction in REDUCE(v, p) to ver-ify the legal reduction and select the target rule for the source structure for synchroni-zation.
The function TARGET(v) after unification passed is to dedicate the jth targetrule as correspondence.622 F. Wong et al4.3   Translation as ParsingOur Portuguese-to-Chinese translation (PCT) system is a transfer-based translationsystem by using the formalism of Constraint-Based Synchronous Grammar (CSG) as itsanalytical grammar.
Unlike other transfer-based MT systems that the major compo-nents: analysis, transfer and generation are carried out individually in pipeline by usingdifferent sets of representation rules to achieve the tasks of structure analysis and trans-formation [19], in PCT, only a single set of CS grammar is used to dominate the transla-tion task.
Since the structures of parallel languages are synchronized in formalism, aswell as the deviations of their structures are also captured and described by the gram-mar.
Hence, to the translation of an input text, it essentially consists of three steps.
First,for an input sentence s, the structure of string is analyzed by using the rules of sourcecomponents from the CSG productions; by using the augmented generalized LR parsingalgorithm as described.
Secondly, the link constraints that are determined during the rulereduction process are propagated to the corresponding target rules R (as selection oftarget rules) to construct a target derivation sequence Q.
And finally, based on the deri-vation sequence Q, translation of the input sentence s is generated by referencing the setof generative rules R that attached to the corresponding constituent nodes in the parsedtree, hence to realize the translation in target language.5   ConclusionIn this paper, we have proposed a variation of synchronous grammar based on thesyntax of context-free grammar, called Constraint-based Synchronous Grammar(CSG).
The source components of CSG are being generalized for representing thecommon structure of language.
Different from other synchronous grammars, eachsource rule is associated with a set of target productions, where each of the targetrules is connected with a constraint over the features of source patterns.
The set oftarget rules are grouped and maintained in a vector ordered by the specificity of con-straints.
The objective of this formalism is to allow parsing and generating algorithmsto inference different possible translation equivalences for an input sentence beinganalyzed according to the linguistic features.
We have presented a modified general-ized LR parsing algorithm that has been adapted to the parsing our formalism that wehave developed for analyzing the syntactic structure of Portuguese in the machinetranslation system.References1.
Rambow, O., Satta, G.: Synchronous Models of Language.
In Proceedings of 34th AnnualMeeting of the Association for Computational Linguistics, University of California, SantaCruz, California, USA, Morgan Kaufmann (1996) 116-123.2.
Lewis, P.M., Stearns, R.E.
: Syntax-directed transduction.
Journal of the Association forComputing Machinery, 15(3), (1968) 465-488.3.
Shieber, S.M., Schabes, Y.: Synchronous Tree Adjoining Grammar.
Proceedings of the13th International Conference on Computational Linguistic, Helsinki (1990)4.
Seki, H., Matsumura, T., Fujii, M., Kasami, T.: On multiple context-free grammars.
Theo-retical Computer Science, 88(2) (1991) 191-229Machine Translation Based on Constraint-Based Synchronous Grammar 6235.
Melamed, I.D.
: Multitext Grammars and Synchronous Parsers.
In Proceedings ofNAACL/HLT 2003, Edmonton, (2003) 79-866.
Wong, F., Hu, D.C., Mao, Y.H., Dong, M.C.
A Flexible Example Annotation Schema:Translation Corresponding Tree Representation.
In Proceedings of the 20th InternationalConference on Computational Linguistics, Switzerland, Geneva (2004) 1079-10857.
Wu, D.: Grammarless extraction of phrasal translation examples from parallel texts.
InProceedings of TMI-95, Sixth International Conference on Theoretical and Methodologi-cal Issues in Machine Translation, v2, Leuven Belgium (1995) 354-3728.
Aho, A.V., Ullman, J.D.
: Syntax Directed Translations and the Pushdown Assembler.Journal of Computer and System Sciences, 3, (1969) 37-569.
Melamed, I.D., Satta.
G., Wellington, B.: Generalized Multitext Grammars.
In Proceed-ings of 42th Annual Meeting of the Association for Computational Linguistics, Barcelona,Spain (2004) 661-66810.
Kaplan, R.M., Bresnan, J.: Lexical-Functional Grammar: A Formal System for Grammati-cal Representation.
In Joan Bresnan, The Mental Representation of Grammatical Rela-tions, Cambridge, Mass, MIT Press, (1982) 173-28111.
Kaplan, R.M.
: The Formal Architecture of Lexical-Functional Grammar.
Information Sci-ence and Engineering, 5, (1989) 30-32212.
Wong, F., Mao, Y.H.
: Framework of Electronic Dictionary System for Chinese and Ro-mance Languages.
Automatique des Langues (TAL), 44(2), (2003) 225-24513.
Wong, F., Mao, Y.H., Dong, Q.F., Qi, Y.H.
: Automatic Translation: Overcome the Barri-ers between European and Chinese Languages.
In Proceedings (CD Version) of First In-ternational UNL Open Conference, SuZhou China (2001)14.
Pollard, C., Sag, I.: Head-Driven Phrase Structure Grammar.
University of Chicago Press,(1994)15.
Ide, N., Veronis, J.: Word Sense Disambiguation: The State of the Art.
ComputationalLinguistics, 24, (1), (1998) 1-4116.
Earley, J.: An Efficient Context-Free Parsing Algorithm.
CACM, 13(2), (1970) 94-10217.
Tomita, M.: Computational Linguistics, 13(1-2), (1987) 31-4618.
Aho, A.V., Sethi, R., Ullman, J.D.
: Compiler: Principles, Techniques and Tools.
Addison-Wesley, (1986)19.
Hutchins, W.J., Somers, H.L.
: An Introduction to Machine Translation.
AcademicPress, (1992)
