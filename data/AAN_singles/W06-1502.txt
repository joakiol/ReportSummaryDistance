Proceedings of the 8th International Workshop on Tree Adjoining Grammar and Related Formalisms, pages 9?16,Sydney, July 2006. c?2006 Association for Computational LinguisticsA constraint driven metagrammarJoseph Le RouxLORIAInstitut NationalPolytechnique de Lorraine615, Rue du Jardin Botanique54 600 Villers-Le`s-NancyFranceleroux@loria.frBeno?
?t Crabbe?HCRC / ICCSUniversity of Edinburgh2 Buccleuch PlaceEH8 9LW,Edinburgh, Scotlandbcrabbe@inf.ed.ac.ukYannick ParmentierINRIA / LORIAUniversite?
Henri Poincare?615, Rue du Jardin Botanique54 600 Villers-Le`s-NancyFranceparmenti@loria.frAbstractWe present an operational framework al-lowing to express a large scale Tree Ad-joining Grammar (TAG) by using higherlevel operational constraints on tree de-scriptions.
These constraints first meantto guarantee the well formedness of thegrammatical units may also be viewed asa way to put model theoretic syntax atwork through an efficient offline grammat-ical compilation process.
Our strategy pre-serves TAG formal properties, hence en-sures a reasonable processing efficiency.1 IntroductionThis paper is concerned with the semi-automaticgrammar development of real-scale grammars.For natural language syntax, lexicalised TAGs aremade of thousands of trees, carrying an extremestructural redundancy.
Their development andtheir maintenance is known to be cumbersome asthe size of the grammar raises significantly.To counter the lack of generalisations inher-ent to strong lexicalisation, various proposals forsemi-automatic grammar development have beencarried out: lexical rules or meta-rules (Becker,2000) and metagrammars: (Candito, 1999; Gaiffeet al, 2002; Xia, 2001).
The aim of these frame-works is twofold: expressing general facts aboutthe grammar of a language and factorising the in-formation to avoid redundancy.The metagrammar path adopts a different per-spective from the lexical rule based grammar de-velopment: instead of describing how a derivedtree is different from a canonical one, grammati-cal description mainly consists of combining frag-mentary tree descriptions or building blocks.The paper is structured as follows.
We startin section 2 by providing motivations and back-ground information on the framework we are us-ing.
Section 3 shows that the metagrammar frame-work may be viewed as an offline system allowingto express high level well-formedness constraintson elementary grammatical structures while pre-serving TAG computational and formal proper-ties.
Section 4 shows how to implement effi-ciently this constraint-based approach with logicprogramming techniques and finally section 5 pro-vides an idea of the performance of the imple-mented system.2 eXtensible MetaGrammar (XMG)By opposition to other metagrammatical frame-works, XMG (Duchier et al, 2004) uses an expres-sive though simple language, enabling a mono-tonic description of a real scale grammar.
Mono-tonicity is important because it means that the or-der of application of the different operations doesnot matter.
This is the major drawback of lexical-rule systems.
Moreover, (Crabb e?, 2005b) showsthat it is sufficiently expressive to implement con-veniently a core TAG for French.XMG allows the grammar writer to manipulatetree descriptions through a control language.
Theintuition behind is that a metagrammatical lan-guage needs to provide means to describe syn-tactic information along two methodological axis(Crabb e?, 2005b): structure sharing and alterna-tives.
Structure sharing is the axis dedicated toexpress factorisation in the grammar, whereas al-ternatives allow to express regular alternation re-lationships such as alternatives between the rep-resentation of a canonical nominal subject and itsinterrogative representation, or between an active9and a passive verb form1.Building on this intuition the XMG language al-lows the user to name partial tree descriptionswithin classes.
The name of the class can be ma-nipulated afterwards.
For instance the followingtree descriptions on the right of the arrow are as-sociated with the names stated on the left of thearrow2:(1) a. CanonicalSubject ?SN?
Vb.
RelativisedSubject ?NN* SN?
Vc.
VerbalForm ?SVNaming is the main device that allows the gram-mar writer to express and to take advantage of thestructure sharing axis mentioned above.
Indeedclass names can be reused in other descriptions.Thus names can also be used to describe alterna-tives.
To express, in our simplified example, that aSubject is an abstract way to name a Relativised-Subject or a CanonicalSubject, we use a choice op-erator (?)
as illustrated below:(2) Subject ?
CanonicalSubject?
RelativisedSubjectDisjunction (non-deterministic choice) is the de-vice provided by the language to express themethodological axis of alternatives.Finally, names can be given to class combina-tions.
To express the composition of two tree de-scriptions in the language, we use the ?
operator.1The passive is a semi-regular alternation, many transi-tive verbs do not passivise.
Our system presupposes a classi-cal architecture for the computational representation of TreeAdjoining Grammars such as XTAG, where means to ex-press such exceptions during the anchoring process are well-known.
In what follows, we therefore consider only tree tem-plates (or tree schematas) as our working units.
Finally thetrees depicted in this paper take their inspiration from thegrammar described by (Abeill e?, 2002).2To represent the tree descriptions mentioned in this pa-per, we use a graphical notation.
Immediate dominance is de-picted with a straight line and precedence follows the graphi-cal order.
Note that nodes are decorated with their labels only,ignoring the names of the variables denoting them.
Note alsothat we use only the reflexive transitive closure of precedencebetween sibling nodes and it is explicitly stated with the sym-bol ?
?.Thus we can say that an IntransitiveVerb is madeby the composition of a Subject and a VerbalFormas follows:(3) IntransitiveVerb ?
Subject ?
VerbalFormGiven these 3 primitives, the control languageis naturally interpreted as a context free grammarwhose terminals are tree descriptions and whereour composition plays the role of concatenation.This abstract grammar or metagrammar is furtherrestricted to be non recursive in order to ensurethat the generated TAG is finite.Provided the axiom IntransitiveVerb, an inter-preter for this language generates non determinis-tically all the sentences of the grammar3 underly-ing a grammatical description.
Thus in our currentexample the two sentences generated are those de-picted on the left hand side of the arrows in Figure1.
On the right hand side of the arrow is depictedthe result of the composition of the tree descrip-tions.It remains to make clear what is actually thiscomposition.
The grammatical classes may con-tain information on tree descriptions and/or ex-press composition of descriptions stated in otherclasses.
Tree descriptions take their inspirationfrom the logic described in (Rogers and Vijay-Shanker, 1994).
Its syntax is the following:Description ::= x ?
y | x ??
y |x ?
y | x ??
y |x[f :E]where x, y are node variables, ?
the dominancerelation, ?
the precedence relation, ?
denoting thereflexive transitive closure of a relation.
The lastline associates x with a feature f whose value isthe result of evaluating expression E.Tree descriptions are interpreted as finite linearordered trees being the minimal models of the de-scription.Using tree descriptions, the above mentionedoperation of tree ?composition?
breaks down to aconjunction of formulas where variables of eachconjunct are in first approximation renamed toavoid name collisions.
Renaming is a crucial dif-ference with previous approaches to metagrammar(Candito, 1999; Xia, 2001) where the user had tomanage explicitly a ?global namespace?.
Here aspecific attention is given to namespace manage-ment, because this was a bottleneck for real scale3Understood as compositions of tree fragments.10SN?
VLe garc?on.
.
.The boy.
.
.?SVdortsleeps?SN?
VLe garc?on dortThe boy who sleepsNN* SN?
V(Le garc?on) qui.
.
.
(The boy) who.
.
.
?SVdortsleeps?NN* SN?
VLe garc?on qui dortThe boy who sleepsFigure 1: Interpretation of a grammatical descriptiongrammar design.
More precisely each class hasits own namespace of identifiers and namespacemerging can be triggered when a class combina-tion occurs.
This merging relies on a fine-grainedimport/export mechanism.In addition to conjunction and disjunction, XMGis augmented with syntactic sugar to offer someof the features other metagrammatical formalismspropose.
For instance, inheritance of classes is notbuilt-in in the core language but is realised throughconjunction and namespace import.
Of course,this restricts users to monotonic inheritance (spe-cialisation) but it seems to be sufficient for mostlinguists.3 Constraining admissible structuresXMG has been tested against the development of alarge scale French Grammar (Crabb e?, 2005a).
Toease practical grammatical development we haveadded several augmentations to the common treedescription language presented so far in order tofurther restrict the class of admissible structuresgenerated by the metagrammar.Further constraining the structures generated bya grammar is a common practice in computationallinguistics.
For instance a Lexical FunctionalGrammar (Bresnan and Kaplan, 1982) further re-stricts the structures generated by the grammar bymeans of a functional uniqueness and a functionalcompleteness principles.
These constraints furtherrestricts the class of admissible structures gener-ated by an LFG grammar to verify valency condi-tions.For TAG and in a theoretical context, (Frank,2002) states a set of such well formedness prin-ciples that contribute to formulate a TAG theorywithin a minimalist framework.
In what remainswe describe operational constraints of this kindthat further restrict the admissibility of the struc-ture generated by the metagrammar.
By contrastwith the principles stated by (Frank, 2002), wedo not make any theoretical claim, instead weare stating operational constraints that have beenfound useful in practical grammar development.However as already noted by (Frank, 2002) andby opposition to an LFG framework where con-straints apply to the syntactic structure of a sen-tence as a whole, we formulate here constraints onthe well-formedness of TAG elementary trees.
Inother words these constraints apply to units thatdefine themselves their own global domain of lo-cality.
In this case, it means that we can safelyignore locality issues while formulating our con-straints.
This is theoretically weaker than formu-lating constraints on the whole sentential structurebut this framework allows us to generate commonTAG units, preserving the formal and computa-tional properties of TAG.We formulate this constraint driven frameworkby specifying conditions on model admissibility.Methodologically the constraints used in the de-velopment of the French TAG can be classifiedin four categories: formal constraints, operationalconstraints, language dependent constraints andtheoretical principles.First the formal constraints are those constrain-ing the trees generated by the model builder tobe regular TAG trees.
These constraints requirethe trees to be linear ordered trees with appropri-ate decorations : each node has a category label,leaf nodes are either terminal, foot or substitution,there is at most one foot node, the category of thefoot note is identical to that of the root node, eachtree has at least one leaf node which is an anchor.11It is worth noting here that using a different setof formal constraints may change the target for-malism.
Indeed XMG provides a different set offormal constraints (not detailed here) that allow togenerate elementary units for another formalism,namely Interaction Grammars.The second kind of constraint is a single op-erational constraint dubbed the colouration con-straint.
We found it convenient in the courseof grammar development.
It consists of associ-ating colour-based polarities to the nodes to en-sure a proper combination of the fragmentarytree descriptions stated within classes.
Since inour framework descriptions stated in two differentclasses are renamed before being conjoined, givena formula being the conjunction of the two follow-ing tree descriptions :(4)XW ZXZ Yboth the following trees are valid models of thatformula:(5) (a)XW Z Y (b)XW Z Z YIn the context of grammar development, however,only (a) is regarded as a desired model.
To rule out(b) (Candito, 1999; Xia, 2001) use a naming con-vention that can be viewed as follows4: they assigna name to every node of the tree description.
Bothfurther constrain model admissibility by enforcingthe identity of the interpretation of two variablesassociated to the same name.
Thus the descriptionstated in their systems can be exemplified as fol-lows:(6)XaWb ZcXaZc YdThough solving the initial formal problem, this de-sign choice creates two additional complications:(1) it constrains the grammar writer to manuallymanage a global naming, entailing obvious prob-lems as the size of the grammatical descriptiongrows and (2) it prevents the user to reuse sev-eral times the same class in a composition.
Thiscase is a real issue in the context of grammati-cal development since a grammar writer willingto describe a ditransitive context with two prepo-sitional phrases cannot reuse two times a fragment4They actually use a different formal representation thatdoes not affect the present discussion.describing such a PP since the naming constraintwill identify them.To solve these problems we use a colourationconstraint.
This constraint associates unary prop-erties, colours, to every node of the descriptions.A colour is taken among the set red(?R), black(?B ),white (?W).
A valid model is a model in which ev-ery node is coloured either in red or black.
Twovariables in the description interpreted by the samenode have their colours merged following the tablegiven in Figure 2.?B ?R ?W ?
?B ?
?
?B ?
?R ?
?
?
?
?W ?B ?
?W ??
?
?
?
?Figure 2: Colour identification rules.The table indicates the resulting colour aftera merge.
The ?
symbol indicates that this twocolours cannot be merged and hence two nodes la-belled with these colours cannot be merged.
Notethat the table is designed to ensure that merging isnot a procedural operation.The idea behind colouration is that of saturat-ing the tree description.
The colour white repre-sents the non saturation or the need of a node tobe combined with a resource, represented by thecolour black.
Black nodes need not necessarilybe combined with other nodes.
Red is the colourused to label nodes that cannot be merged withany other node.
A sample tree description withcoloured node is as follows:(7)X?BW?R Z?BX?WZ?W Y?RColours contribute to rule out the (b) case and re-move the grammar writer the burden of managingmanually a ?global namespace?.The third category of constraints are languagedependent constraints.
In the case of French, suchconstraints are clitic ordering, islands constraints,etc.
We illustrate these constraints with clitic or-dering in French.
In French clitics are non tonicparticles with two specific properties already iden-tified by (Perlmutter, 1970): first they appear infront of the verb in a fixed order according to theirrank (8a-8b) and second two different clitics infront of the verb cannot have the same rank (8c).For instance the clitics le, la have the rank 3 andlui the rank 4.12SN?
V?
?+ ?V?Cl?3 V?+ ?V?Cl?4 V?+ ?SV?V ?SN?
V?Cl?3 Cl?4 VSN?
V?Cl?4 Cl?3 VFigure 3: Clitic ordering(8) a. Jean le3 lui4 donneJohn gives it to himb.
*Jean lui4 le3 donne*John gives to him itc.
*Jean le3 la3 donne*John gives it itIn the French grammar of (Crabb e?, 2005a) treeswith clitics are generated with the fragments illus-trated on the left of the arrow in Figure 35.
Asillustrated on the right of the arrow, the composi-tion may generate ill-formed trees.
To rule themout we formulate a clitic ordering constraint.
Eachvariable labelled with a clitic category is also la-belled with a property, an integer representing itsrank.
The constraint stipulates that sibling nodeslabelled with a rank have to be linearly ordered ac-cording to the order defined over integers.Overall language dependent constraints handlecases where the information independently spec-ified in different fragments may interact.
Theseinteractions are a counterpart in a metagrammar tothe interactions between independently describedlexical rules in a lexical rule based system.
As-suming independent lexical rules moving canoni-cal arguments (NP or PP) to their clitic position,lexical rules fall short for capturing the relative or-dering among clitics6 .A fourth category of constraints, not imple-mented in our system so far are obviously the lan-guage independent principles defining the theoryunderlying the grammar.
Such constraints couldinvolve for instance a Principle of Predicate Argu-ment Coocurrency (PPAC) or even the set of min-imalist principles described by (Frank, 2002).4 Efficient implementationWe describe now the implementation of our meta-grammatical framework.
In particular, we will fo-5Colours are omitted.6This observation was already made by (Perlmutter, 1970)in a generative grammar framework where clitics where as-sumed to be moved by transformations.cus on the implementation of the constraints dis-cussed above within XMG.As mentioned above, a metagrammar corre-sponds to a reduced description of the grammar.In our case, this description consists of tree frag-ments combined either conjunctively or disjunc-tively.
These combinations are expressed usinga language close to the Definite Clause Grammarformalism (Pereira and Warren, 1980), except thatpartial tree descriptions are used as terminal sym-bols.
In this context, a metagrammar can be re-duced to a logic program whose execution willlead to the computation of the trees of the gram-mar.To perform this execution, a compiler for ourmetagrammatical language has been implemented.This compilation is a 3-step process as shown inFigure 4.First, the metagrammar is compiled into in-structions for a specific virtual machine inspiredby the Warren?s Abstract Machine (Ait-Kaci,1991).
These instructions correspond to the un-folding of the relations7 contained in the tree de-scriptions of the metagrammar.Then, the virtual machine performs unificationsof structures meant to refer to corresponding in-formation within fragments (e.g.
two nodes, twofeature structures ...).
Note that the XMG?s virtualmachine uses the structure sharing technique formemory management, i.e.
data are represented bya pair pattern ?
environment in which to interpretit.
The consequences are that (a) we save mem-ory when compiling the metagrammar, and (b) wehave to perform pointer dereferencing during uni-fication.
Even if the latter is time-consuming, itremains more efficient than structure copying aswe have to possibly deal with a certain amount oftree descriptions.Eventually, as a result of this instruction pro-cessing by the virtual machine, we obtain poten-7These relations are either dominance or precedence be-tween node variables, or their reflexive transitive closure, orthe labelling of node variable with feature structures.13STEP1(translation of concrete syntax)INTO INSTRUCTIONSCONCRETE SYNTAXMETAGRAMMATICALCOMPILATION OFTREE DESCRIPTION SOLVINGSTEP3(unification of data structures)STEP2A SPECIFIC VIRTUAL MACHINEINSTRUCTIONS BYEXECUTION OF THEINPUT: MetaGrammarTotal tree descriptions OUTPUT: TAGCompiled partial tree descriptionsFigure 4: Metagrammar compilation.tially total tree descriptions, that have to be solvedin order to produce the expected TAG.Now, we will introduce XMG?s tree descriptionsolver and show that it is naturally designed to pro-cess efficiently the higher level constraints men-tioned above.
In particular, we will see that thedescription solver has been designed to be easilyextended with additional parametric admissibilityconstraints.4.1 Tree descriptions solvingTo find the minimal models corresponding to thetotal tree descriptions obtained by accumulatingfragmentary tree descriptions, we use a tree de-scription solver.
This solver has been developed inthe Constraint Programming paradigm using theconstraint satisfaction approach of (Duchier andNiehren, 2000).
The idea is to translate relationsbetween node variables into constraints over setsof integers.Basically, we refer to a node of the input de-scription in terms of the nodes being equals,above, below, or on its side (see Figure 5).
Moreprecisely, we associate each node of the descrip-tion with an integer, then our reference to a nodecorresponds to a tuple containing sets of nodes (i.e.sets of integers).As a first approximation, let us imagine that werefer to a node x in a model by means of a 5-tupleN ix = (Eq, Up, Down, Left, Right) where i is an in-teger associated with x and Eq (respectively Up,Down, Left, Right) denotes the set of nodes8 in thedescription which are equal, (respectively above,below, left, and right) of x.Then we can convert the relations betweennodes of our description language into constraintson sets of integer.8I.e.
integers.EqUpDownLeftRightFigure 5: Node representation.For instance, if we consider 2 nodes x and y ofthe description.
Assuming we associate x with theinteger i and y with j, we can translate the domi-nance relation x ?
y the following way9:N ix?
N jy?
[N ix.EqUp ?
N jy.Up?N ix.Down ?
N jy.EqDown?N ix.Left ?
N jy.Left?N ix.Right ?
Njy.Right]This means that if the node10 x strictly dominatesy in the input description, then (i) the set of nodesthat are above or equal x in a valid model is in-cluded in the set of those that are strictly above yand (ii) the dual holds for the nodes that are aboveand (iii) the set of nodes that are on the left of y isincluded in the set of those that are on the left of xand (iv) similarly for the right part.Once the constraints framework is settled, wecan search for the solutions to our problem, i.e.the variable assignments for each of the sets of in-tegers used to refer to the nodes of the input de-scription.
This search is performed by associatingwith each pair of nodes (x, y) of the input descrip-tion a choice variable denoting the mutually ex-clusive relations11 between these two nodes.
Then9N ix.EqUp corresponds to the disjoint union of N ix.Eq andN ix.Up, similarly for N jx.EqDown with Nix.Eq and N ix.Down.10One should read the node denoted by the variable x.11Either x equals y, x dominates y, y dominates x, x pre-cedes y or y precedes x.14we use a search strategy to explore the consistentassignments to these choices variables (and the as-sociated assignments for sets of integers referringto nodes)12 .
Note that the strategy used in XMGis a first-fail strategy which leads to very good re-sults (see section 5 below).
The implementationof this solver has been done using the constraintprogramming support of the Mozart ProgrammingSystem (The Oz-Mozart Board, 2005).4.2 Extension to higher-level constraintssolvingAn important feature of our approach is that thissystem of constraints over integer sets can beextended so that we not only ensure tree well-formedness of the outputted trees, but also the re-spect of linguistic properties such as the unique-ness of clitics in French, etc.The idea is that if we extend adequately ournode representation, we can find additional con-straints that reflects the syntactic constraints wewant to express.Clitic uniqueness For instance, let us considerthe clitic uniqueness constraint introduced above.We want to express the fact that in a valid model?, there is only one node having a given propertyp (i.e.
a parameter of the constraint, here the cat-egory clitic13).
This can be done by introducing,for each node x of the description, a boolean vari-able px indicating whether the node denoting x inthe model has this property or not.
Then, if we callV?p the set of integers referring to nodes having theproperty p in a model, we have:px ?
(N ix.Eq ?
V?p ) 6= ?Finally, if we represent the true value with the in-teger 1 and false with 0, we can sum the px foreach x in the model.
When this sum gets greaterthan 1, we can consider that we are not building avalid model.Colouration constraint Another example of theconstraints introduced in section 3 is coloura-tion.
Colouration represents operational con-straints whose effect is to control tree fragmentcombination.
The idea is to label nodes with acolour between red, black and white.
Then, during12More information about the use of such choice variablesis given in (Duchier, 1999)13In fact, the uniqueness concerns the rank of the clitics,see (Crabb e?, 2005b), ?9.6.3.description solving, nodes are identified accordingto the rules given previously (see Figure 2).That is, red nodes are not identified with anyother node, white nodes can be identified with ablack one.
Black nodes are not identified witheach other.
A valid model in this context is a satu-rated tree, i.e.
where nodes are either black (possi-bly resulting from identifications) or red.
In otherwords, for every node in the model, there is at mostone red or black node with which it has been iden-tified.
The implementation of such a constraintis done the following way.
First, the tuples rep-resenting nodes are extended by adding a integerfield RB referring to the red or black node withwhich the node has been identified.
Then, con-sidering the following sets of integers: VR, VB,VW respectively containing the integers referringto red, black and white nodes in the input descrip-tion, the following constraints hold:x ?
VR ?
N ix.RB = i ?
N ix.Eq = {i} (a)x ?
VB ?
N ix.RB = i (b)x ?
VW ?
N ix.RB ?
V?B (c)where V?B represents the black nodes in a model,i.e.
V?B = V?
?
VB.
(a) expresses the fact that forred nodes, N ix.RB is the integer i associated withx itself, and N ix.Eq is a set only containing i.
(b)means that for black nodes, we have that N ix.RB isalso the integer i denoting x itself, but we cannotsay anything about N ix.Eq.
Eventually (c) meansthat whites nodes have to be identified with a blackone.Thus, we have seen that Constraint Program-ming offers an efficient and relatively natural wayof representing syntactic constraints, as ?all?
thathas to be done is to find an adequate node repre-sentation in terms of sets of nodes, then declare theconstraints associated with these sets, and finallyuse a search strategy to compute the solutions.5 Some featuresThere are two points worth considering here: (i)the usability of the formalism to describe a realscale grammar with a high factorisation, and (ii)the efficiency of the implementation in terms oftime and memory use.Concerning the first point, XMG has been usedsuccessfully to compute a TAG having more than6,000 trees from a description containing 29315classes14 .
Moreover, this description has been de-signed relatively quickly as the description lan-guage is intuitive as advocated in (Crabb e?, 2005a).Concerning the efficiency of the system, thecompilation of this TAG with more than 6,000 treestakes about 15 min with a P4 processor 2.6 GHzand 1 GB RAM.
Note that compared with thecompilation time of previous approaches (Candito,1999; Gaiffe et al, 2002) (with the latter, a TAG of3,000 trees was compiled in about an hour), theseresults are quite encouraging.Eventually, XMG is released under the terms ofthe GPL-like CeCILL license15 and can be freelydownloaded at http://sourcesup.cru.fr/xmg.6 ConclusionUnlike previous approaches, the description lan-guage implemented by XMG is fully declara-tive, hence allowing to reuse efficient techniquesborrowed to Logic Programming.
The systemhas been used successfully to produce core TAG(Crabb e?, 2005b) and Interaction Grammar (Per-rier, 2003) for French along with a core FrenchTAG augmented with semantics (Gardent, 2006).This paper shows that the metagrammar can beused to put model theoretic syntax at work whilepreserving reasonably efficient processing proper-ties.
The strategy used here builds on constrainingoffline a TAG whose units are elementary trees Theother option is to formulate constraints appliedon-line, in the course of parsing, applying on thewhole syntactic structure.
In a dependency frame-work, XDG followed this path (Debusmann et al,2004), however it remains unknown to us whetherthis approach remains computationally tractablefor parsing with real scale grammars.ReferencesA.
Abeill e?.
2002.
Une grammaire e?lectronique du franais.CNRS Editions, Paris.H.
Ait-Kaci.
1991.
Warren?s abstract machine: A tuto-rial reconstruction.
In K. Furukawa, editor, Proc.
of theEighth International Conference of Logic Programming.MIT Press, Cambridge, MA.T.
Becker.
2000.
Patterns in metarules.
In A. Abeille andO.
Rambow, editors, Tree Adjoining Grammars: formal,computational and linguistic aspects.
CSLI publications,Stanford.14I.e.
tree fragments or conjunction / disjunction of frag-ments15More information about this license at http://www.cecill.info/index.en.html.Joan Bresnan and Ronal M. Kaplan.
1982.
The Mental Rep-resentation of Grammatical Relations.
The MIT Press,Cambridge MA.M.H.
Candito.
1999.
Repre?sentation modulaire etparame?trable de grammaires e?lectroniques lexicalise?es :application au franc?
ais et a` l?italien.
Ph.D. thesis, Uni-versit e?
Paris 7.B.
Crabb e?.
2005a.
Grammatical development with XMG.Proceedings of the Fifth International Conference on Log-ical Aspects of Computational Linguistics (LACL05).B.
Crabb e?.
2005b.
Repre?sentation informatique de gram-maires fortement lexicalise?es : Application a` la gram-maire d?arbres adjoints.
Ph.D. thesis, Universit e?
Nancy2.R.
Debusmann, D. Duchier, and G.-J.
M. Kruijff.
2004.
Ex-tensible dependency grammar: A new methodology.
InProceedings of the COLING 2004 Workshop on RecentAdvances in Dependency Grammar, Geneva/SUI.D.
Duchier and J. Niehren.
2000.
Dominance constraintswith set operators.
In Proceedings of CL2000, volume1861 of Lecture Notes in Computer Science, pages 326?341.
Springer.D.
Duchier, J.
Le Roux, and Y. Parmentier.
2004.
The Meta-grammar Compiler: An NLP Application with a Multi-paradigm Architecture.
In 2nd International Mozart/OzConference (MOZ?2004), Charleroi.D.
Duchier.
1999.
Set constraints in computational linguis-tics - solving tree descriptions.
In Workshop on Declara-tive Programming with Sets (DPS?99), Paris, pp.
91 - 98.Robert Frank.
2002.
Phrase Structure Composition and Syn-tactic Dependencies.
MIT Press, Boston.B.
Gaiffe, B. Crabb e?, and A. Roussanaly.
2002.
A new meta-grammar compiler.
In Proceedings of TAG+6, Venice.C.
Gardent.
2006.
Int e?gration d?une dimension s e?mantiquedans les grammaires d?arbres adjoints.
In Actes de La13e`me e?dition de la confe?rence sur le TALN (TALN 2006).F.
Pereira and D. Warren.
1980.
Definite clause grammarsfor language analysis ?a survey of the formalism and acomparison to augmented transition networks.
ArtificialIntelligence, 13:231?278.David Perlmutter.
1970.
Surface structure constraints in syn-tax.
Linguistic Inquiry, 1:187?255.Guy Perrier.
2003.
Les grammaires d?interaction.
HDR eninformatique, Universit e?
Nancy 2.J.
Rogers and K. Vijay-Shanker.
1994.
Obtaining trees fromtheir descriptions: An application to tree-adjoining gram-mars.
Computational Intelligence, 10:401?421.The Oz-Mozart Board.
2005.
The Oz-Mozart ProgrammingSystem.
http://www.mozart-oz.org.Fei Xia.
2001.
Automatic Grammar Generation from twoDifferent Perspectives.
Ph.D. thesis, University of Penn-sylvania.16
