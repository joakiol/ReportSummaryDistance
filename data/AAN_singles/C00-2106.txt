Parsing Schemata for Grammars withVariable Number  and Order of Const i tuentsKar l -M ichae l  Schne iderDepart inent  of General LinguisticsUniversity of PassauImlstr.
40, 94032 Passau, Germanyschneide(@l)hil.uni-t)assau.deAbst ractWe define state transition grammars (STG) asan intermediate tbrmalism between grammarsand parsing algorithms which is intended toseparate the description of a parsing strategyfrom the grammar tbrmalism.
This allows to de-fine more general parsing algorithms for largerclasses of grammars, including gramnmrs wherethe nunfl)er and order of subconstituents de-tined by a production may not be tlxed.
Variousgrammar formalisms are characterized in termsof prol)erties of STG's.
We define an Earleyparsing schema tbr S'rC's and characterize thewflid l)arse items.
We also discuss the usabil-ity of STG's tbr head-(:orner parsing and direct1)arsing of sets of tree constraints.1 I n t roduct ionThis t)aper addresses the qllestion of how l;o de-fine (talmlar) parsing algorithms on a greaterlevel of al)straction, in order to apply themto larger (:lasses of grammars (as comparedto parsing algorithms tbr context-Dee gram-lllars).
SllCtl an abstraction is useflll beCallSeit; allows to study l)rot)erties of parsing algo-rithms, and to compare different parsing algo-rithms, independently of tile prot)erties of anmtderlying rammar formalism.
While previ-ous atteml)ts to define more general parsershave only aimed at expanding the domain ofthe nontenninal symbols of a grammar (Pereiraand Warren, 1983), this paper aims at a gen-eralization of parsing in a difl'erent dimension,namely to include grammars with a flexible con-stituent sI;ructure, i.e., where tile sequence ofsubconstituents specified by a grammar produc-tion is not fixed.
We consider two grammartbrmalisms: Extended context-ii'ee grammars(ECFG) and ID/LP granllllars.ECFG's (sometimes called r(~.q'ular righ, t partgrammars) are a generalization of context-freegrammars (CFG) in which a grammar produc-tion specifies a regular set of sequences of sub-constituents of its left-haM side instead of afixed sequence of subconstituents.
The right-hand side of a production can 1)e representedas a regular set, or a regular expression, or afinite automaton, which are all equivalent con-cepts (Hopcroft and Ulhnan, 1979).
ECFG'sare often used by linguistic and programminglanguage grammar writers to represent a (pos-sibly infinite) set of context-free productions asa single production rule (Kaplan and Bresnan,1982; Woods, 1973).
Parsing of ECFG's hasbeen studied t br example ill Purdom, Jr. andBrown (1981)and l;~','r,nakers (1989).
'rab,ll~rparsing teclmiques tbr CFG's can be generalized1;o ECFG's in a natural way by using the con>putations of the tinite automata in the grammarproductions to guide the recognition of new sub-constituents.ID/LP grammars are a variant of CFG's thatwere introduced into linguistic tbrmalisms to en-code word order generalizations (Gazdar et al,1985).
Her(',, the number of snbconstituents ofthe left-hand side of a production is fixed, buttheir order can w~ry.
ID rules (immediate dom-inance rules) speci(y the subconstituents of aconstituent but leave their order unspeeitied.The adnfissible order|rigs of subeonstituents arespecified separate, ly by a set of LP constraints(linear precedence constraints).A simple approach to ID/LP parsing (calledindirect parsing) is to tully expand a gram-mar into a CFG, but this increases the nmnberof productions ignificantly.
Therefore, direct;parsing algorithms for ID/LP grammars wereproposed (Shieber, 1984).
It is also possible toencode an ID/LP grammar as an ECFG by in-terleaving the ID rules with LP checking with-733out increasing the number of productions.
How-ever, tbr unification ID/LP grammars, expan-sion into a CFG or encoding as an ECFG isruled out because the information contained inthe ID rules is only partial and has to be instan-tiated, which can result in an infinite numberof productions.
Moreover, Seiffert (1991) hasobserved that, during the recognition of sub-constituents, a subconstituent recognized in onestep can instantiate t~atures on another subcon-stituent recognized in a previous step.
There-tbre, all recognized subconstituents must remainaccessible fbr LP checking (Morawietz, 1995).We define an intermediate tbrmalism be-tween grammars and parsers (called state tran-sition 9rammars, STG) in which different gram-mar fbrmalisms, including CFG's, ECFG's, andID/LP grammars can be tel)resented.
More-over, admissible sequences of subconstituentsare defined in a way that allows a parser toaccess subconstituents that were recognized inprevious parsing steps.
Next, we describe anEarley algorithm tbr STG's, using the parsingschemata ibrmalism of Sikkel (1993).
This givesus a very high level description of Earley's algo-rithm, in which the definition of parsing stepsis separated from the properties of the grammartbrmalism.
An Earley algorithm for a grammarmay be obtained tiom this description by rep-resenting the grammar as an STG.The paper is organized as tbllows.
In Sec-tion 2, we define STG's and give a characteri-zation of various grammar tbrmalisms in termsof properties of STG's.
In Section 3 we presentan Earley parsing schema for STG's and give acharacterization f the wflid parse items.
In Sec-tion 4, we introduce a variant; of STG's tbr head-corner parsing.
In Section 5, we discuss the us-ability of STG's to define parsers for grammarsthat define constituent structures by means oflocal tree constraints, i.e., formulae of a (re-stricted) logical language.
Section 6 presentsfinal conclusions.2 State  Trans i t ion  GrammarsWc denote nonterminal symbols with A, B, ter-minal symbols with a, terminal and nonterminalsymbols with X, states with F, strings of sym-bols with/3, % and the empty string with c. AnSTG is defined as tbllows:Def in i t ion  1 (ST( \ ] ) .
Art STG G is a tuple( N, E, A~, AJ l;', He, P, S) where?
N is a finite set of nonterminal symbols,?
E is a finite set of terminal symbols,?
A/I is a finite set of states,,, A.4\];, c_ .A4 is a set of final states,,, Ha c (.A4 x V) 2 is a binary relation of theform (r,/3) ~-a (F',/3X), where V = NUE,?
P C_ N ?
AJ \ .A41,~ is a set of productionswritten as A -+ F, and?
S E N is a start symbol.Note thai; we do not allow final states in theright-hand side of a production.
A pair (F,/3) iscalled a configuration.
If F is a fnal  state then(P,/3) is called a final configuration.
The reflex-ive and transitive closure of \[-c, is denoted withH~.
The state projection of Hc is the binaryrelation(Ho) = {(r, r')l  /3x: (p,/3) (p',/3x)}.Ha is called context:free iff a transition from(P,/3) does not del)end on fl, tbrmally: for all/3, fl', r ,  r ' ,  x :  (r,/3) Ha (r',  fiX) iff (r,/3') He;(F',/3'X).
The set of terminal states of G is thesetw(C) = {PlVP' : (1 ~, P') ~ ~(Ha)}.The language defined by a state P is the setof strings in the final configurations reachablet'rom (r, e):L(r) = {/313 r' My :  (r, (r',/3)}.Note that if A --> F is a production then eL(P) (i.e., there are no ~-productions).
Thederivation relation is defined by 7A5 ==> 7fl5itf for some production A ~ P: /3 C L(P).
Thelanguage defined by G is the set of strings in E*that are derivable fi'om the start symbol.We denote a CFG as a tuple (N ,E ,P ,S )where N, E, S are as betbre and P C_ N x V + isa finite set of productions A -+/~.
We assumethat there are no e-productions.An ECFO can be represented asan extensionof a CFO with productions of the tbrm A -+ A,where .A = (V, Q, qo, 5, Of) is a nondeterministicfinite automaton (NFA) without e-transitions,73454ECFG QD/LP {MI A+M'cP: MC_M'}{c}QfF = XF'(r ,  X, r ' )  ~r = r 'u  {x} , /~x  < LPTnble 1: Encoding of grmnmars in STG's.with input alphalmt V, state set Q, initial stateq0, final (or accepting) states Q f, m~(t r~msi-tion relation 5 C_ Q x V x Q (I{opcroft and Ull-man, 1979).
A accepts ~ string fl ill tbr somefinal st;;~l;e q C Q f, (qo,/'-\], q) ~ 5".
Furl;hermore,we assume that q0 ~ Q f, i.e., ..4 does nol; ac-(:ept the emi)l;y word.
We can assmne wit;hourloss of generalizal;ion thai, the mfl;omal;a in theright- lmnd sides of a grammar are nll disjoint.Then we cml rel)resent ml ECFG as a tul)le(N, E, Q, Q f, 5,1 ), S) where N, E, Q, Q f, 5, S m'eas befbre and P C N x (2 is ~t finite set of produc-tions A -> q0 (q0 is ml initial st~te.).
For rely pro-duct ion p = A ~ q0 let A p = (17, Q, q0, (t, Oj.
)l)e the NFA with initiM state q0.
The, deriwd;ionrelation is detined by 7A5 ~ 7/35 itf fbr some1)roduction p = A ---> q0, A p accet)ts fl.An ID /LP  grnmm~tr is represented as a l;u-pie (N~ E, \] , LP, S) whoa'e.
N, E, S are as beforennd P is a finite set of productions (ID rules)A --+ M,  where.
A C N ;uid ~4 is ~ multisetover V, and LP is a set ()f line~r l)re(:edenceconstraints.
We are not concerned with de.tailsof the LP constra.ints here.
We write fl ~ LPto denote that the sl;ring fi s~d;isties all the con-straints in l,P.
The derivation r(;l~|;ion is de-fined by 7A5 ~ 7\[3d i1\[ fl = X~.
.
.X~ anda > {X~, .
.
.
,Xk}  ~ 1" mM fl ~ LI'.CFG's,  ECFG's  and ID /LP  grmnlnars (:;mt)e chara(:l;erized by al)t)rol)ri~te restrictions onthe transit ion relation and the fired st;~l;es of anSTG: ~?
CFG: \]-o is context-free and deterministic,cy(t-6,) is acyelic, 2~4F = T(G).?
ECFG: t-a is context-free.?
ID /LP :  or(t-(;) is aeyclic: J~41,' = T(G),  forall F: iffl, 7 C L(F) then 7 is ~t permutal,ioltThese conditions define normal-forms ofSTG's; thatis, for STG's that do not, satist~y the conditions for sometype there can nevertheless lmstrongly equivalent gram-mars of that; t;ype.
These STG's are regarded as degen-erate mM are not fllrther considered.of ft.For instance, if G is an STG that satisfies theconditions tbr CFG's, then a CFG G / can beconstructed as follows: l,br every product ionA -~ q0 in G, let A -~ fl be a product ion inG' whe.re L(qo) = {/3}.
Then the deriw~tion re-lations of G mid G' coincide.
Similarly tbr theother grammar tyl)es.
Conversely, if ~t grammaris of a given type, l;hen it (:ml be rel)resented asml STG satist~ying the conditions tbr that  type,by spe(:it~ying the states and transit ion relation,as shown in Table 1 (tO denotes nmltiset lnlion).3 Ear ley  Pars ingParsing schemat~ were proposed by Sikkel(1.993) as a framework for the specific~tion0rod comparison) of tabular parsing algorithms.Parsing schemata provide n well-detined level ofabstra(:l;ion by al)stra(:ting fi'om (:ontrol struc-tures (i.e., or(lering of operations) and (laterstructures.
A parsing schem;t cmJ \])e imple-mented as n tabulm: parsing ;flgorithm in ~em~onical w;~y (Sikkel, 1998).A \])re:sing schema for n gr;tllllll;~r cla,ss is &function that assigns ('.~mh grmnmar and eachinput string a deduction system, called a parsingsy.ste.m.
A parsing schema is usmdly defined bypre.senting a parsing system.
A parsing systemconsists of ~ finite set Z of pars(; items, a finiteset "H of hyt)otheses , whi(:h ell(:()(\](; the inputstring, mxd ~ finite set 29 of deduction stel)s ofthe fbrm x~, .
.
.
, x ,  t- a: where xi C 2; U ~ andx E Z.
The hypotheses can be represented asdeduction steps with empty prenfises, so we canassume that, all xi m'e it;eros, and represent aparsing system as a pair (Z, 29).Correctness of a l)~rsing system is definedwith respect to some item senmntics.
Everyitem denotes a particub~r deriw~tion of somesubstring of the input string.
A parsing sys-te.m is correct if an item is deducible precisely ifit denotes an admissible deriw~tion.
Items thatdenote admissible derivations are called coffee/,.735Z={\ [A~/3 .F , i , j \ ] IAEN,  f lEV* ,  ?EM,  1/31 <.,, O<i<j<n}D Init =- S - -~ P E P\[S ~ .r, 0,0\]Dpredi~t = \[A --+ ft. P, i, j\]T)Comp I =_\[B --+ .P0, j , j \ ]\[A + fl.P,i , j \]\[A -+ \[3aj+l.
F', i, j + 1\]r':  (r,/3) No (r',/~B), B -~ ro e p(r,/5) \[-G (r',/3aj+l)\[A ~ /3.
r , i , j \ ]\[B ~ ,>r:, j, k\]\[A -+ fiB.
?
', i, t~\] r: E M, ,  (r,/3) >a (r',/3~)Figure 1: The Earley parsing schema for an STG G and input string w = al .
.
.
an.STG's constitute a level of abstraction be-tween grammars and parsing schemata becausethey can be used to encode various classes ofgrammars, whereas the mechanism for recog-nizing admissible sequences of subconstituentsby a parsing algorithm is built into the gram-mar.
Thereibre, STG's allow to define the pars-ing steps separately f iom the mechanism in agrmnmar that specifies admissible sequences ofsubconstituents.A generalization of Earley's algorithm ibrCFG's (Earley, 1970) to STG's is described bythe parsing schema shown in Fig.
1.
An item\[A -~/3.P, i, j\] denotes an A-constituent that ispartially recognized fi'om position i through jin tile input string, where/3 is the sequence ofrecognized subconstituents of A, and a sequenceof transitions that recognizes ~ can lead to stateF.
Note that the length of/5 can be restrictedto the length of the int)ut string because thereare no g-productions.In order to give a precise definition of the se-mantics of the items, we define a derivation re-lation which is capable of describing the partialrecognition of constituents.
This relation is de-fined on pairs (7, A) where 7 E V* and A is afinite sequence of states (a pair (% A) could becalled a super configuration).
7 represents thefi'ont (or yield) of a partial derivation, while Acontains one state for every partially recognizedconstituent.Def in i t ion  2.
The Earley derivation relationis defined by th, e clauses:?
(TA, A) ~ (7/5, FA) iff 3A --+ P' E P:(r', e) e5 (r,/3).?
(TAa, A) p (7/3a, A) /ff 7Aa ~ 798.The first clause describes the I)artial recog-nition of an A-constituent, where/3 is the rec-ognized part and tile state P is reached when/3 is recognized.
The second clause describes~he complete recognition of an A-constituent;in this case, the final state is discarded.
Eachstep ill the derivation of a super configuration(% A) corresponds to a sequence of deductionsteps in the parsing schema.
As a consequenceof the second clause we have that w E L(G) iff(S, c) ~* (w, c).
Note that ~-, is too weak to de--scribe the recognition of the next subconstituentof a partially recognized constituent, but it issufficient o define the semantics of the items inFig.
1.
The fbllowing theorem is a generaliza-tion of the definition of the semantics of Earleyitems for CFG's (Sikkel, 1993) (a l .
.
.
an is theinput string):Theorem 1 (Cor rectness ) .F* \[A --+/3.F, i,j\] iff the conditions are satisfied:?
for some A, (S, c) \]'--,* (al .
.
.
aiA, A).?
(A, e) b" (/3, F).?
/3 ::==>* a i+ 1 .
.
.
a j .The first and third condition are sometimescalled top-down and bottom-up condition, re-spectively.
The second condition refers to thepartial recognition of the A-constituent.736\[~ -~.
~,, 0, 0\] (re, ~) >* (r,, ~), (E, ~) \[~ (~, q~)IT -~ .q3,0,0\] (m~) ~ (T,<~), (T,~) p (~, ?~)(m ~) ~ (T, ~)\[F -+ .q,~, 0, 0\] (E,E) t..,(T,q,jI--,(F, q4q2), (F,~) ~ (E, qs)(Z, ~) \[- (T, q2) b (F, ~t2)(z, ~) > (T, ~) b (F, <s4)(z, ~) b (m, ~) b (F, ~)\[F --> a.qu, 0, 1\] (E,e) b(T,q,jb(F,q,lq,2), (F,e)~,,(a, qo)(m ~) b (T, w) b (r, w)(m ~) P (T, ~) b (r, q4)(E, ~) b (T, ~) b (F, ~)\[T -+ S~.~s4,O,q (E,~)b(T,  q2), (T,~)p(S<,s4), F~*a(E, ~) b (T, ~)\[\]'~ --+ a. q6, 2, 3\] (E,m) b(T, q2) b(17*F, qaq2) b(a*F, q4q2), (/P, ?)
b (a, q6)(m ~) b (T, q~) b (~ * s< v',) b (o,.
F, w)(z, ~) \[~ (T, ~) \[~ (F ?
F, q4) \[~ (o,.
~, w)(m ~) I--.
(T, ~) I--' (F ?
sV, ~) t-' (<, * S< ~)\[E--+T*T.q,2,0,3\] (E,g) V*(E,e), (E,g)~,,(T*T, q2), T*T==>*a*a~ihble 2: Valid parse items and derbable super configurations for a * a.Example  1.
Consider the following STG:G = ({z, T, r}, to,, +, .
}, {m,.. .
,  <~6},{q~, q4, q~}, FG, P, E),P = {E  --> q~, T --> qa, F -+ q,~}with the following transitions (for all fi):(m, l~) i-(~ (<s~, I~T), (,s~, i~) i-c~ (m, i~+),(qa, i3) t-c (q4,/~S~), (<S4, h ~) i-c; (<S:~, iJ*),(q,~, f~) i-c (<so,/Ja).Table 2 shows soule valid parse items fbr therecognition of the string a * a, together with theconditions according to Theorem 1.4 Bid i rec t iona l  Pars ingSTG's describe the recognition of admissi-ble sequences of subconstituents in unidirec-tional parsing algorithms, like Earley's algo-rithm.
Bidirectional parsing strategies, e.g.,head-conic< strategies, start the recognition ofa sequence of subconstituents at sonic positionin the middle of the sequence and proceed toboth sides.
We can define appropriate STG'sfor 1)idirectional parsing strategies as follows.Def in i t ion  3.
A h, eaded, bidirectional STG Gis like an STG excq~t hat P is a finite set ofproductions of the form A --+ (P,X, A), 'whereA c N and X E V and F, A c .M.The two states in a production accOullt for thebidirectional expansion of a constituent.
Thederivation relation for a headed, bidirectionalSTG is defined by 7A6 ~ 7fllXfl"6 if\[ for someproduction A -+ (P, X, A): (fit)-* c L(P) andfi' C L(A) ((S) -1 denotes the inversion of fit).Note that P defines the left part of an adnfissiblesequence Doul right to left,.A t)ottom-up head-conmr parsing schemauses items of the tbrm \[A -+ F. fl.
A, i, j\] (Schnei-der, 2000).
The semantics of these items is givenby the tbllowing clauses:?
tbr some production A ~ (P0, X, A0),some fll,fl,.
: fl = flZXflr and (P0,e) t-G(r, (/~)-~) dud (A0,~)~o (a,/~").,, /3 ~*  a i+ l .
.
,  aj.5 Loca l  T ree  Const ra in tsIn this section we discuss the usability of STG'sfor the design of direct parsing algorithms forgrammars that use a set of well-fonnednessconditions, or constraints, expressed in a logi-cal language, to define the admissible syntac-tic structures (i.e., trees), in contrast o gram-mars that are based on a derivation mechanism737(i.e., production rules).
Declarative characteri-zations of syntactic structures provide a nlealiSto tbrmalize grammatical frameworks, and thusto compare theories expressed in different for-malisms.
There are also applications in the-oretical explorations of the complexity of lin-guistic theories, based on results which relatelanguage classes to definability of structures incertain logical languages (Rogers, 2000).From a model-theoretic point of view, sucha grammar is an axiomatization of a class ofstructures, and a well-formed syntactic struc-ture is a model of the grammar (Blackt)urn etal., 1993).
The connection between models andstrings is established via a yield function, whichassigns each syntactic structure a string of ter-minal symbols.
The parsing problem can thenbe stated as the problem: Given a string w anda grammar G, find the models .A4 with A.4 ~ Gand yieId(./V4) = w.In many cases, there are eft~ctive methods totranslate logical fornmlae into equivalent reeautomata (Rogers, 2000) or rule-based gram-mars (Pahn, 1997).
Thus, a possible way toapproach the parsing problem is to translate aset of tree constraints into a grammar and usestandard parsing methods.
However, dependingon the expressive power of the logical language,the complexity of the translation often limitsthis approach in practice.In this section, we consider the possibility toapply tabular parsing methods directly to gram-mars that consist of sets of tree constraints.
Theidea is to interleave the translation of tbrmu-lae into production rules with the recognitionof subconstituents.
It should be noted that thisapproach suffers from the same complexity lim-itations as the pure translation.In Schneider (1999), we used a fragment ofa propositional bimodal anguage to express lo-cal constraints on syntactic structures.
The twomodal operators ($} and (-~) refer to the left-most child and the right sibling, respectively, ofa node in a tree.
Furthermore, the nesting of($) is limited to depth one.
A so-called modalgrammar consists of a formula that representsthe conjunction of a set of constraints that mustbe satisfied at every node of a tree.
In addition,a second formula represents a condition tbr theroot of a tree.In Schneider (1999), we have also shownhow an extension of a standard nlethod tbrautomatic proof search in modal logic (so-called analytic labelled tableauz) in conjmm-tion with dynamic progrmnming techniques canbe employed to parse input strings accordingto a modal grammar.
Basically, a labelledtableau procedure is used to construct a la-belled tableau, i.e., a tree labelled with tbrmn-lae, by breaking tbrmulae up into subtbrmulae;this tableau may then be used to construct amodel tbr the original formula.
The extendedtableau procedure constructs an infinite tableauthat allows to obtain all admissible trees (i.e.,models of the grammar).The approach can be described as tbllows: AnSTG is defined by using certain formulae thatappear on the tableau as states, and by definingthe transition relation in terms of the tableaurules (i.e., the operations that are used to con-struct a tableau).
The states are formulae ofthe formx A A<,>o A AI.
\]o' A A A\[q 'where X is a propositional variable and \[$\], \[-->\]are the dnal operators to (.\[), (~) .
X is usedas a node \]abe\] in a tree model.
The t rans i t ionrelation can be regarded as a silnnlation of theapplication of tableau rules to fbrmulae, and atabular parser tbr this STG can be viewed as atabulation of the (infinite) tal)leau construction.In particular, it should be noted that this con-struction makes no reference to any particularparsing strategy.6 Conc lus ionWe have defined state transition grammars(STG) as an intermediate formalism betweengrammars and parsing algorithnls.
They com-plement the parsing schemata formalism ofSikkel (1993).
A parsing schema abstractsfrom unimportant algorithmic details and thus,like STG's, represents a well-defined level ofabstraction between grammars and parsers.STG's add another abstraction to parsingschemata, namely on the grammar side.
There-fore, we argued, a t)arsing schenla defined over aSTG represents a very high level description ofa tabular parsing algorithm that can be appliedto various gralnlnar tbrmalisms.
In this paperwe concentrated on grammar formalisms witha flexible constituent structure, i.e., where the738mmfl)er and order of subconstituents st)e(:ifiedby a grammar i)roduction may not \[)e fixed.
Inparticular, we have discussed extended context-free grammars (ECFG), I I ) /LP grammars, andgrammars in which admissible trees are delinedby means of local tree ('onstraints cxI)resscd ina simple logical language.ReferencesPatrick Blackl)urn, Clair(,' Gar(t(mt, and Wil-fi'ied Meyer-Viol.
1993.
Talking about trees.In P~ve.
5th Con:fcrenee of th.c EuropeanChapter of the Association for ComputationalLinguistics (EA CL'93), pages 21 29..lay Earley.
1970.
An efli(:icnt context-free pars-ing algorithm.
Communication.~' of the A CM,13:2:94--102.Gerald Gazdar, Ewm H. Klein, Geoffrey K. Pul-turn, and Iwm A. S~g.
1985.
GeneralizedPh, rase Structure Gramntar.
Bla(:kwell, Ox-\[brd.John E. IIot)croft and Jetfrcy D. Ulhmm.
1979.lnbvduetion to Automata Theory, Languagesand Computation: Addison-Wesley, Amster-daIIl.Ronald M. Kaplan and Joan Bresnan.
1982.Lexical-flmctiollal grammar: A ibrmal sys-I;em tbr gramlnatical rel)r(;sentation.
In Joan13resnan, editor, The Mental l~.eprcsentationof Grammatical H, clation.~, (:hal)t(;r 4:, t)ages175 281.
MIT Press, Calnbridge, MA.Rend Leermakers.
1989.
How to cover a gram-mar.
In P~wc, 27th Annual Meetin9 of theAssociation for Computational Linguistics(ACL '89), pages 1.35 -142.Frank Morawietz.
1995.
A ratification-based ID/LP parsing s('h(',ma.
In 1)roe..4th Int.
Workshop on Parsing Technologies(IWP T'95), Prague.Adi PMm.
1997.
Tran.~:fo'rming Tree Con-straints into Formal Grammar.
Infix, SanktAugustin.Fernando C. N. Pereira and David It.
D. War-ren.
1983.
Parsing as deduction.
In Prec.21st Annual Meeting of the Association forComputational Linguistics (14CL'83), pages137-144.Paul Walton Purdom, Jr. and Cynthia A.Brown.
1981.
Parsing extended LR(k) gram-mars.
Acta IKformatica, 15:115-127.James Rogers.
2000. wMSO theories asgrammar fi)rmalisms.
In Pwc.
of 16thTwentc Workshop on Language Technology:Al.qcbraic Methods in Language PTvccssing(TWLT I6/AMiL1 ~ 2000), pages 201.
222,Iowa City, Iowa.Karl-Michael Sclmeider.
1999.
An ~pplicationof lab(filed tableaux to parsing.
In Neil Mur-ray, editor, Automa, tic Reasoning with An-alytic "l},blcaux and Related Methods, pages117-131.
~lbch.
Report 99-1, SUNY, N.Y.Karl-Michael Schneider.
2000.
Alget)raic con-struction of t)arsing schemata.
In Pwc.6th Int.
Workshop on Parsin9 ~chnologics(IWPT 2000), pages 242-253, Trent().l/,oland Seiflb, rt.
1.991.
Unification-ID/LPgrammars: Formalization and I)arsing.
In Ot-thein Herzog and Clmls-Rainer Rollinger, ed-itors, Text Understanding in LILOG, LNAI546, pages 63 7a.
Springer, Berlin.Stuart M. Shiebcr.
1984.
Direct parsing ofID/LI ) grammars.
Linguistics and Ph, iloso-phy, 7(2):135 154.Klaas Sikkel.
1993.
Parsing Schemata.
Proe5schrift, Universiteit Twente, CIP-GegevensKoninklijke Bibliotheek, Den Haag.Klaas Sikkel.
1998.
Parsing schemata nd (:or-rectness of parsing algorithms.
'l'heoreticalComputer Science, 199(1--2):87 -103.William A.
Woods.
1973.
An exi)(;rimenta,1parsing system tbr transition n(',l;work gram-mars.
In Randall t/,ustin, (,'(titor~ Nat'm'al Lau-g'aagc 1)~vcessing, pages 111- 154.
Algorith-mic Press, New York.739
