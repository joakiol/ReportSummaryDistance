Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 157?162,Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational LinguisticsPropminer: A Workflow for Interactive Information Extraction andExploration using Dependency TreesAlan Akbik, Oresti Konomi and Michail MelnikovTechnische Univerista?t BerlinDatabases and Information Systems GroupEinsteinufer 17, 10587 Berlin, Germanyfirstname.lastname@tu-berlin.deAbstractThe use of deep syntactic information suchas typed dependencies has been shownto be very effective in Information Ex-traction.
Despite this potential, the pro-cess of manually creating rule-based in-formation extractors that operate on de-pendency trees is not intuitive for personswithout an extensive NLP background.
Inthis system demonstration, we present atool and a workflow designed to enableinitiate users to interactively explore theeffect and expressivity of creating Infor-mation Extraction rules over dependencytrees.
We introduce the proposed five stepworkflow for creating information extrac-tors, the graph query based rule language,as well as the core features of the PROP-MINER tool.1 IntroductionInformation Extraction (IE) is the task of gener-ating structured information, often in the form ofsubject-predicate-object relation triples, from un-structured information such as natural languagetext.
Although there are well-established methodsfor automatically training extractors from anno-tated data (Mintz et al 2009), recent years haveseen a renewed interest in manually created andmaintained rule-based IE systems (Doan et al2009; Chiticariu et al 2010).
Advantages of suchsystems include a better transparency and explain-ability of extraction rules, and the resulting main-tainability and customizability of rule sets.Another trend in IE is to make increasinguse of deep syntactic information in extrac-tors (Bunescu and Mooney, 2005), as dependencyparsers become faster and more robust on irregulartext (Bohnet, 2010).Bringing both trends together are recent worksin the field of Open Information Extraction (OIE).The systems KRAKEN (Akbik and Lo?ser, 2012)and CLAUSIE (Del Corro and Gemulla, ) usea set of hand crafted rules on dependency treesto outperform previous classification based ap-proaches.
The latter system outperforms even OL-LIE (Mausam et al 2012), the machine learningbased state-of-the art OIE system on dependencyparses.
Not only does CLAUSIE report significantprecision gains over OLLIE, but also finds 2.5 to3.5 times more relations.These results indicate a strong potential formanually creating rule-based Information Extrac-tion systems using dependency trees.
The higherlevel syntactic representation, we argue, may evenfacilitate rule writing, as - unlike in shallow lexico-syntactic rules - much linguistic variation suchas inserted clauses and expressions must not bespecifically addressed.
This enables the creationof more succinct IE rules, leading to better ex-plainability and easier maintenance.However, despite these advantages, experiencehas shown that deep syntactic information is diffi-cult to read and understand for non NLP-experts.In this system demonstration, we propose aworkflow designed to tap into this potential, andpresent the PROPMINER tool that allows users toexecute this workflow.
It is specifically designedto help persons familiarize themselves with de-pendency trees and enable exploration and extrac-tion of relations from parsed document collec-tions.
Core features of PROPMINER are:Rule generation and modification.
Initiateusers are guided by a workflow in which they firstenter and annotate an archetypical sentence withthe desired relation.
A rule generation processthen pre-generates an overspecified rule that usersmodify along lines suggested by the tool.
Our pre-liminary experiments show that this workflow ofgenerating and modifying rules eases the learn-ing curve for non NLP-experts to concepts suchas part-of-speech tags and typed dependencies.157Figure 1: Sentence view of PROPMINER, where steps one and two of the workflow are executed.
Usersenter (or select) a sentence in the top input field and annotate subject, predicate and object for the desiredrelation.
A rule is generated and displayed in the upper right panel.
The lower right panel is the repositoryof already created rules.
The parse of the input sentence is displayed in the center panel.Interactivity and feedback.
Each modifica-tion of a rule is immediately queried against alarge collection of parsed sentences stored in a dis-tributed graph database.
The extraction results ofthe current state of the rule are presented at alltimes to the user, thereby explaining the rule byshowing its effect.Intuitive query language.
Extraction rules areformulated as queries against a graph database.Our query language allows users to formulate sub-tree queries as path expressions, a concept bor-rowed from the SerQL query language (Broekstraand Kampman, 2003) because of its intuitive prop-erties.
We show a visualization of the parse tree ofthe current sentence next to the generated rule toease users into understanding the query language(see Figure 1).Guided workflow.
All structured informationgenerated by the user, such as extraction rules,sentence annotations and evaluation results, arestored to build up a repository of structured infor-mation.
This information is used to suggest appro-priate actions to the user.A preliminary study shows that users with-out any NLP background are quickly able touse PROPMINER to create Information Extractionrules.
We noted that users at first stay true to theworkflow and limit manual effort to generalizingrules, but tend to more directly modify extractionrules as they grow more experienced.
Further-more, PROPMINER?s interactive nature eases theprocess of understanding typed dependencies andenables the interactive exploration of parsed doc-ument collections.2 Workflow and Query LanguagePROPMINER implements a workflow that con-sists of five steps (Annotate, Generate, General-ize, Evaluate and Store).
It is designed to allowusers that are unfamiliar with syntactic annotationto create rule-based extractors.
In the followingsubsections, we explain the five steps in detail.
Asa running example, we use the task of creating anextractor for the PERSONBIRTHPLACE relation.2.1 AnnotateUsers begin the process by constructing anarchetypical sentence for the desired informationtype.
This sentence constitutes an example thatexpresses the desired relation.
For instance, auser interested in the PERSONBIRTHPLACE rela-tion can choose a sentence such as ?Albert Ein-stein was born in Germany.
?.In this sentence, the user annotates the words158belonging to the relation triple, assigning the rolesof subject, predicate and object.
Subject and ob-ject are the entities in the example between whichthe relation holds.
The predicate are the wordsin the sentence that express the relationship.
Ac-cordingly, the user marks ?Albert Einstein?
and?Germany?
as subject and object, and ?born in?as predicate in the example sentence.Figure 1 shows the sentence view of PROP-MINER, with the example sentence entered and an-notated in the top input fields, and the parsed sen-tence shown in the center panel.2.2 GeneratePROPMINER generates a rule from the annotatedsentence by determining the minimal subtree inthe sentence?s dependency tree that connects allwords labeled as subject, predicate and object.The rule consists of this minimal subtree, as wellas constraints in the part-of-speech (POS) tags andlexical values of all involved words.Rules are formulated as queries against adatabase in which parsed sentences are stored asgraphs: Nodes represent words and edges repre-sent typed dependencies.
At each node, the POStag and the lexical value of the word are stored asattributes.A PROPMINER rule (or query) consists mainlyof three parts: A SELECT clause, a FROM clauseand a WHERE clause.
The generated rule for therunning example is displayed in Figure 1.
Its indi-vidual parts are discussed in the following subsec-tions.2.2.1 SELECT and FROMThe SELECT clause determines the fields of tu-ple to be returned by the query.
Typically, thisconsists of a subject-predicate-object triple, butqueries with fewer or more fields are possible.The FROM clause is a path expression thatspecifies the subgraph in the dependency tree therule must match, and defines which nodes in thesubgraph correspond to the fields in the SELECTclause.
A path expression is a set of node-edge-node triples.
Each of these triples defines one edge(typed dependency) that must hold between twonodes (words).
The nodes are denoted in curlybrackets, where the text inside curly brackets as-signs a variable name to the node.Consider the SELECT and FROM clauses forthe rule generated for the running example, illus-trated in the following:SELECT subject, predicate, objectFROM {_7_}  nsubj {subject}{_7_}  cop {predicate}{_7_}  amod {object}SELECT subject, predicate, objectFROM      {predicate.3}   nsubjpass {subject},{predicate.3}   prep {predicate.4},      {predicate.4}   pobj {object}WHEREAND subject POS ?NNS?AND predicate.3 POS?VBN?AND predicate.4 POS ?IN?AND object POS ?NNP?AND subject TEXT ?A.
Einstein?AND predicate.3 TEXT ?born?AND predicate.4 TEXT ?in?AND object TEXT ?Ulm?AND subject FULL_ENTITYHere, the SELECT statement defines the de-sired result of this query, namely a tuple with a?subject?, ?object?
and a ?predicate?
field: Thepath expression in this example is specified in thethree lines in the FROM statement.
It defines asubtree that consists of four nodes connected bythree typed dependencies.The nodes are assigned the variable names?subject?, ?object?, ?predicate.3?
and ?predi-cate.4?.
The node ?subject?
is defined to be apassive subject (typed dependency ?nsubjpass?)
ofthe node ?predicate.3?.
The node ?predicate.3?
isalso connected via the dependency ?prep?
to thenode ?predicate.4?, which in turn is connected to?object?
with the dependency ?pobj?.If this rule matches, the lexical values of thematching nodes are returned.
Because the predi-cate in this example consists of two words (?born?and ?in?
), two nodes are assigned the ?predicate?value, subtyped per convention with a dot and anumber (?predicate.3?
and ?predicate.4?
).2.2.2 WHEREIn the WHERE-clause, the attributes of wordsin the subtree can be further restricted.
Auto-generated rules are maximally restricted.
The rulefor the running example is initially restricted asfollows:SELECT subject, predicate, objectFROM {_7_}  nsubj {subject}{_7_}  cop {predicate}{_7_}  amod {object}WHERE.34 subject AND P33AO.34 predicateS?
AND P?V3O.34 predicateSBAND PI3O.34 object AND P33AO.34 subject TEXT PEinsteinO.34 predicateS?
TEXT PbornO.34 predicateSBTEXT PinO.34 object TEXT PUermanlO.34 subject FLYY_E3TIT?Word attributes are restricted by naming thevariable followed either by ?POS?
or ?TEXT?
andthe restricting value.
Here, for instance, the POStag of the ?object?
node is restricted to ?NNP?
(aproper noun), and its lexical value is restricted to?Germany?.159a) Generated rule b) Generalize subject text c) Generalize subject and objectSELECT subject, predicate, objectFROM {_7_}  nsubj {subject}{_7_}  cop {predicate}{_7_}  amod {object}SELECT subject, predicate, objectFROM { collapsed }WHEREsubject POS ?NNP?AND predicate.3 POS ?VBZ?AND predicate.4 POS ?IN?AND object POS ?NNP?AND subject TEXT ?Einstein?AND predicate.3 TEXT ?born?AND predicate.4 TEXT ?in?AND object TEXT ?Germany?AND subject ALLCHILDRENSubject Predicate ObjectA.
Einstein born in Germany Subject Predicate ObjectA.
Einstein born in GermanyC.
F. Gauss born in GermanyA.
Humboldt born in Germany... ... ...Subject Predicate ObjectA.
Einstein born in GermanyJ.
Lagrange born in ItalyI.
Newton born in England... ...
...SELECT subject, predicate, objectFROM { collapsed }WHEREsubject POS ?NNP?AND predicate.3 POS ?VBZ?AND predicate.4 POS ?IN?AND object POS ?NNP?AND subject TEXT ?Einstein?AND predicate.3 TEXT ?born?AND predicate.4 TEXT ?in?AND object TEXT ?Germany?AND subject ALLCHILDRENSELECT subject, predicate, objectFROM { collapsed }WHEREsubject POS ?NNP?AND predicate.3 POS ?VBZ?AND predicate.4 POS ?IN?AND object POS ?NNP?AND subject TEXT ?Einstein?AND predicate.3 TEXT ?born?AND predicate.4 TEXT ?in?AND object TEXT ?Germany?AND subject ALLCHILDRENFigure 2: Conceptual example of rule modification through generalization.
Below are example relationtriples found for each rule.
Rule a) is generated from the annotated sentence in the running example,and finds only one triple.
Rule b) is the same rule without the restriction in the subject text.
The rulenow finds a number of relation triples in the document collection, representing different entities born inGermany.
In Rule c) both subject and object text restrictions are removed.
This yields a rule that findsdifferent entities born in any entity.Additionally, a number of subtree gatheringmechanisms can be specified in the WHEREclause.
For example, the keyword FULL ENTITYcauses the variable binding for the subject to ex-pand to all children nodes expected to be part of anamed entity.2.3 GeneralizeThe rule generated in step two of the workflow isstrongly overspecified to the annotated sentence;all features, including the shallow syntactic andlexical values of all words in the subtree, are con-strained.
The resulting rule only finds exact in-stances of the relations as seen in the archetypicalsentence.
Refer to Figure 2 a) for an example.In step three of the workflow, the user general-izes the auto-generated rule with the help of sug-gestions.
Common lines of generalizing rules fo-cus on the WHERE clause; here, users can removeor modify constraints on the attributes of words.For example, by removing the restriction on thelexical value of the subject, the rule is generalizedto finding all entities that were born in ?Germany?,instead of only entities with the lexical value ?Ein-stein?.
This example is illustrated in Figure 2 b).The rule can then be further generalized by re-moving the lexical constraint on the object, yield-ing the (desired) rule that finds all entities thatwere born in any location with an entity name.Figure 2 c) shows an example of this rule, as wellas example results.Further options of generalization include re-moving the lexical constraints in one or both of thepredicate words, or modifying the POS tag con-straints.
At each modification, extraction resultsfor the current state of the rule are displayed to as-sist the user.
When the results match the desiredrelation, the user can proceed to the next step inthe workflow.2.4 EvaluateEach rule created by the user is evaluated in thecorpus view of PROPMINER, displayed in Fig-ure 3.
This view shows a sample of extractionresults of the rule in a table.
The user can scrollthrough the table and in each row see the extractedinformation as well as the sentence the informa-tion was extracted from.
If the extracted informa-tion matches the statement in the sentence, the usercan mark this fact as correct.2.5 StoreIf the user is satisfied with the extraction rule, hecan assign it to a relation and store it in the rulerepository.
He can repeat the process with anothersentence to find more patterns for the desired rela-tion.
As the workflow is repeated, the rule reposi-tory will build up, along with a repository of evalu-160Figure 3: Corpus view of PROPMINER, where extraction rules are modified and evaluated.
The centerpanel is a table that holds the extraction results for the current rule.
Users can inspect each extractedtriple by clicking on the row.
This will display the sentence in which the triple was found.ation results.
This enables additional functionalityin subsequent executions of the workflow:Sentence suggestions.
Evaluation results areused to assist the user in finding new sentencesthat might be relevant to the relation.
For exam-ple, a user might mark a triple with the subject ?C.F.
Gauss?
and object ?Germany?
as a correct in-stance of the PERSONBIRTHPLACE relation dur-ing evaluation.
PROPMINER uses this informa-tion to retrieve all sentences that contain these twoentities from its database.
These sentences aretreated as probable candidates for containing thePERSONBIRTHPLACE relation, because they con-tain two entities known to be in this relationship.Accordingly, they are suggested to the user uponrequest.Conflict resolution.
In order to prevent con-flicts with existing rules, the entire rule set in therepository is applied to each sentence the work-flow is started with.
If any existing informationextraction rule can be applied, the results of theextraction are presented to the user as annotationsin the sentence.
If this extraction result is alreadycomplete from the point of view of the user, hecan proceed to a new sentence.
If not, the user canproceed to generate a new rule, or modify existingones.3 Previous WorkPrevious work on improving the rule creation pro-cess for IE systems has mainly focused on assist-ing users with machine learning techniques, suchas pre-generation of regular expressions (Brauer etal., 2011) or pattern suggestions (Li et al 2011).To improve usability, (Li et al 2012) present atool with a wizard-like environment to guide ex-tractor development.
While previous work focuseson shallow patterns, the focus of PROPMINER is tohelp create rules over dependency trees and aid inthe exploration of parsed document collections.4 Evaluation and OutlookWe conducted a preliminary study in which weasked 5 computer scientists unfamiliar with com-putational linguistics to use the tool to cre-ate extractors for the relations PERSONBIRTH-PLACE, PERSONMARRIEDTOPERSON and PER-SONWONPRIZE.
The participants were given atwo hour introduction explaining information ex-traction and subject-predicate-object triples.
Weintroduced them to the five step workflow usingthe PERSONBIRTHPLACE example also used asrunning example in this paper, as well as other,more complex examples.
The participants weregiven one hour for each relation and asked to cre-161ate a rule set for each relation.
After the con-clusion we interviewed the participants and askedthem to rate the usability both for information ex-traction, as well as for the exploration of depen-dency tree information.In the latter category, participants generallygave positive feedback.
Participants stated that theinteractive nature of the tool helped understandingextraction rules and facilitated exploring informa-tion stated in the document collection.
4 out of5 participants deviated from the suggested work-flow and more directly edited rules as they be-came more comfortable with the tool.
All par-ticipants consulted information on POS tags andtyped dependencies during the process, in order tobetter understand the rules and query results.
Par-ticipants suggested adding an explanation functionfor individual syntactic elements to the tool.While all users were generally able to createrule sets for each of the relations, two main prob-lems were cited for the creation of extraction rules.The first is a problem in conflict resolution; insome cases, users were not able to discern whya rule gave imperfect extraction results.
We re-viewed some rules and found that many of thesecases stem from faulty dependency parses, whichnon NLP-experts cannot recognize.
At present, weare searching for ways to address this problem.A second problem were limitations of the rulelanguage: Participants expressed the need fornamed entity types such as PERSON and LOCA-TION, which in the prototype were not included atthe time of evaluation.
However, because of thedesign of the query language and the underlyinggraph database, such additional operators can beincorporated easily.Consequently, current work focuses on extend-ing the range of user studies to gather more sug-gestions for the query language and the feature set,and integrating additional operators into the sys-tem.5 DemonstrationIn this demonstration we show how PROPMINERcan be used for creating extractors or exploringthe parsed document collection.
The hands-ondemonstration allows initiate users to execute theworkflow presented in this paper, but also enablespersons more familiar with syntactic annotation tomore directly query the graph database using ourquery language and feature set.AcknowledgementsWe would like to thank the anonymous reviewers for theirhelpful comments.
Alan Akbik received funding from the Eu-ropean Union?s Seventh Framework Programme (FP7/2007-2013) under grant agreement no ICT-2009-4-1 270137 ?Scal-able Preservation Environments?
(SCAPE).ReferencesAlan Akbik and Alexander Lo?ser.
2012.
Kraken: N-ary factsin open information extraction.
In AKBC-WEKEX, pages52?56.
Association for Computational Linguistics.Bernd Bohnet.
2010.
Very high accuracy and fast depen-dency parsing is not a contradiction.
In COLING, pages89?97.
Association for Computational Linguistics.Falk Brauer, Robert Rieger, Adrian Mocan, and Wojciech MBarczynski.
2011.
Enabling information extraction byinference of regular expressions from sample entities.
InCIKM, pages 1285?1294.
ACM.Jeen Broekstra and Arjohn Kampman.
2003.
Serql: a secondgeneration rdf query language.
In Proc.
SWAD-EuropeWorkshop on Semantic Web Storage and Retrieval, pages13?14.Razvan C Bunescu and Raymond J Mooney.
2005.
A short-est path dependency kernel for relation extraction.
InEMNLP, pages 724?731.
Association for ComputationalLinguistics.Laura Chiticariu, Rajasekar Krishnamurthy, Yunyao Li,Sriram Raghavan, Frederick R Reiss, and ShivakumarVaithyanathan.
2010.
Systemt: an algebraic approach todeclarative information extraction.
In ACL, pages 128?137.
Association for Computational Linguistics.Luciano Del Corro and Rainer Gemulla.
Clausie: Clause-based open information extraction.
In WWW (to appearin 2013).AnHai Doan, Jeffrey F Naughton, Raghu Ramakrishnan,Akanksha Baid, Xiaoyong Chai, Fei Chen, Ting Chen,Eric Chu, Pedro DeRose, Byron Gao, et al2009.
In-formation extraction challenges in managing unstructureddata.
ACM SIGMOD Record, 37(4):14?20.Yunyao Li, Vivian Chu, Sebastian Blohm, Huaiyu Zhu, andHoward Ho.
2011.
Facilitating pattern discovery for rela-tion extraction with semantic-signature-based clustering.In CIKM, pages 1415?1424.
ACM.Yunyao Li, Laura Chiticariu, Huahai Yang, Frederick RReiss, and Arnaldo Carreno-fuentes.
2012.
Wizie: a bestpractices guided development environment for informa-tion extraction.
In Proceedings of the ACL 2012 SystemDemonstrations, pages 109?114.
Association for Compu-tational Linguistics.Mausam, Michael Schmitz, Stephen Soderland, Robert Bart,and Oren Etzioni.
2012.
Open language learning for in-formation extraction.
In EMNLP-CoNLL, pages 523?534.Mike Mintz, Steven Bills, Rion Snow, and Dan Jurafsky.2009.
Distant supervision for relation extraction withoutlabeled data.
In ACL/IJCNLP.
Volume 2-Volume 2, pages1003?1011.
Association for Computational Linguistics.162
