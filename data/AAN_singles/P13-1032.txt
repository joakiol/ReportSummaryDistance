Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 322?332,Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational LinguisticsAdvancements in Reordering Models for Statistical Machine TranslationMinwei Feng and Jan-Thorsten Peter and Hermann NeyHuman Language Technology and Pattern RecognitionComputer Science Department, RWTH Aachen University, Aachen, Germany<surname>@cs.rwth-aachen.deAbstractIn this paper, we propose a novel re-ordering model based on sequence label-ing techniques.
Our model converts thereordering problem into a sequence label-ing problem, i.e.
a tagging task.
Resultson five Chinese-English NIST tasks showthat our model improves the baseline sys-tem by 1.32 BLEU and 1.53 TER on av-erage.
Results of comparative study withother seven widely used reordering mod-els will also be reported.1 IntroductionThe systematic word order difference between twolanguages poses a challenge for current statisticalmachine translation (SMT) systems.
The systemhas to decide in which order to translate the givensource words.
This problem is known as the re-ordering problem.
As shown in (Knight, 1999), ifarbitrary reordering is allowed, the search problemis NP-hard.Many ideas have been proposed to addressthe reordering problem.
Within the phrase-basedSMT framework there are mainly three stageswhere improved reordering could be integrated:In the preprocessing: the source sentence is re-ordered by heuristics, so that the word order ofsource and target sentences is similar.
(Wang etal., 2007) use manually designed rules to reorderparse trees of the source sentences.
Based on shal-low syntax, (Zhang et al, 2007) use rules to re-order the source sentences on the chunk level andprovide a source-reordering lattice instead of a sin-gle reordered source sentence as input to the SMTsystem.
Designing rules to reorder the source sen-tence is conceptually clear and usually easy to im-plement.
In this way, syntax information can be in-corporated into phrase-based SMT systems.
How-ever, one disadvantage is that the reliability of therules is often language pair dependent.In the decoder: we can add constraints or mod-els into the decoder to reward good reordering op-tions or penalize bad ones.
For reordering con-straints, early work includes ITG constraints (Wu,1995) and IBM constraints (Berger et al, 1996).
(Zens and Ney, 2003) did comparative study overdifferent reordering constraints.
This paper fo-cuses on reordering models.
For reordering mod-els, we can further roughly divide the existingmethods into three genres:?
The reordering is a classification problem.The classifier will make decision on nextphrase?s relative position with current phrase.The classifier can be trained with maximumlikelihood like Moses lexicalized reordering(Koehn et al, 2007) and hierarchical lexical-ized reordering model (Galley and Manning,2008) or be trained under maximum entropyframework (Zens and Ney, 2006).?
The reordering is a decoding order problem.
(Marin?o et al, 2006) present a translationmodel that constitutes a language model ofa sort of bilanguage composed of bilingualunits.
From the reordering point of view, theidea is that the correct reordering is a suit-able order of translation units.
(Feng et al,2010) present a simpler version of (Marin?o etal., 2006)?s model which utilize only sourcewords to model the decoding order.?
The reordering can be solved by outsideheuristics.
We can put human knowledge intothe decoder.
For example, the simple jumpmodel using linear distance tells the decoderthat usually the long range reordering shouldbe avoided.
(Cherry, 2008) uses informationfrom dependency trees to make the decod-ing process keep syntactic cohesion.
(Fenget al, 2012) present a method that utilizespredicate-argument structures from semanticrole labeling results as soft constraints.In the reranking framework: in principle, all322the models in previous category can be used inthe reranking framework, because in the rerank-ing we have all the information (source and tar-get words/phrases, alignment) about the transla-tion process.
(Och et al, 2004) describe the use ofsyntactic features in the rescoring step.
However,they report the syntactic features contribute verysmall gains.
One disadvantage of carrying out re-ordering in reranking is the representativeness ofthe N-best list is often a question mark.In this paper, we propose a novel tagging stylereordering model which is under the category?The reordering is a decoding order problem?.Our model converts the decoding order probleminto a sequence labeling problem, i.e.
a taggingtask.
The remainder of this paper is organizedas follows: Section 2 introduces the basementof this research: the principle of statistical ma-chine translation.
Section 3 describes the proposedmodel.
Section 4 briefly describes several reorder-ing models with which we compare our method.Section 5 provides the experimental configurationand results.
Conclusion will be given in Section 6.2 Translation System OverviewIn statistical machine translation, we are given asource language sentence fJ1 = f1 .
.
.
fj .
.
.
fJ .The objective is to translate the source into a tar-get language sentence eI1 = e1 .
.
.
ei .
.
.
eI .
Thestrategy is to choose the target sentence with thehighest probability among all others:e?I?i = argmaxI,eI1{Pr(eI1|fJ1 )} (1)We model Pr(eI1|fJ1 ) directly using a log-linearcombination of several models (Och and Ney,2002):Pr(eI1|fJ1 ) =exp( M?m=1?mhm(eI1, fJ1 ))?I?
,e?
I?1exp( M?m=1?mhm(e?I?1 , fJ1 ))(2)The denominator is to make the Pr(eI1|fJ1 ) to be aprobability distribution and it depends only on thesource sentence fJ1 .
For search, the decision ruleis simply:e?I?i = argmaxI,eI1{ M?m=1?mhm(eI1, fJ1 )}(3)The model scaling factors ?M1 are trained withMinimum Error Rate Training (MERT).
In this pa-per, the phrase-based machine translation systemis utilized (Och et al, 1999; Zens et al, 2002;Koehn et al, 2003).3 Tagging-style Reordering ModelIn this section, we describe the proposed novelmodel.
First we will describe the training process.Then we explain how to use the model in the de-coder.3.1 ModelingFigure 1 shows the modeling steps.
The first stepis word alignment training.
Figure 1(a) is an ex-ample after GIZA++ training.
If we regard thisalignment as a translation result, i.e.
given thesource sentence f71 , the system translates it intothe target sentence e71, then the alignment link set{a1 = 3, a3 = 2, a4 = 4, a4 = 5, a5 = 7, a6 =6, a7 = 6} reveals the decoding process, i.e.
thealignment implies the order in which the sourcewords should be translated, e.g.
the first generatedtarget word e1 has no alignment, we can regard itas a translation from a NULL source word; thenthe second generated target word e2 is translatedfrom f3.
We reorder the source side of the align-ment to get Figure 1(b).
Figure 1(b) implies thesource sentence decoding sequence information,which is depicted in Figure 1(c).
Using this ex-ample we describe the strategies we used for spe-cial cases in the transformation from Figure 1(b)to Figure 1(c):?
ignore the unaligned target word, e.g.
e1?
the unaligned source word should follow itspreceding word, the unaligned feature is keptwith a ?
symbol, e.g.
f?2 is after f1?
when one source word is aligned to multi-ple target words, only keep the alignment thatlinks the source word to the first target word,e.g.
f4 is linked to e5 and e6, only f4 ?
e5is kept.
In other words, we use this strategyto guarantee that every source word appearsonly once in the source decoding sequence.?
when multiple source words are aligned toone target word, put together the sourcewords according to their original relative po-sitions, e.g.
e6 is linked to f6 and f7.
So inthe decoding sequence, f6 is before f7.Now Figure 1(c) shows the original source sen-tence and its decoding sequence.
By using thestrategies above, it is guaranteed that the sourcesentence and its decoding sequence have the ex-323f1 f2 f3 f4 f5 f6 f7e1 e2 e3 e4 e5 e6 e7(a)f3 f1 f2 f4 f6 f7 f5e1 e2 e3 e4 e5 e6 e7(b)f1 f?2 f3 f4 f5 f6 f7f3 f1 f2 f4 f6 f7 f5(c)f1 f?2 f3 f4 f5 f6 f7+1 +1 ?2 0 +2 ?1 ?1(d)BEGIN-Rmono Unalign Lreorder-Rmono Lmono-Rmono Lmono-Rreorder Lreorder-Rmono END-Lmonof1 f?2 f3 f4 f5 f6 f7(e)Figure 1: modeling process illustration.actly same length.
Hence the relation can be mod-eled by a function F (f) which assigns a value foreach source word f .
Figure 1(d) manifests thisfunction.
The positive function values mean thatcompared to the original position in the sourcesentence, its position in the decoding sequenceshould move rightwards.
If the function value is0, the word?s position in original source sentenceand its decoding sequence is same.
For example,f1 is the first word in the source sentence but it isthe second word in the decoding sequence.
So itsfunction value is +1 (move rightwards one posi-tion).Now Figure 1(d) converts the reordering prob-lem into a sequence labeling or tagging problem.To make the computational cost to a reasonablelevel, we do a final step simplification in Figure1(e).
Suppose the longest sentence length is 100,then according to Figure 1(d), there are 200 tags(from -99 to +99 plus the unalign tag).
As we willsee later, this number is too large for our task.
Weinstead design nine tags.
For a source word fj inone source sentence fJ1 , the tag of fj will be oneof the following:Unalign fj is an unaligned source wordBEGIN-Rmono j = 1 and fj+1 is translated af-ter fj (Rmono for right monotonic)BEGIN-Rreorder j = 1 and fj+1 is translatedbefore fj (Rreorder for right reordered)END-Lmono j = J and fj?1 translated beforefj (Lmono for left monotonic)END-Lreorder j = J and fj?1 translated afterfj (Lreorder for left reordered)Lmono-Rmono 1 < j < J and fj?1 translatedbefore fj and fj translated before fj+1Lreorder-Rmono 1 < j < J and fj?1 translatedafter fj and fj translated before fj+1Lmono-Rreorder 1 < j < J and fj?1 translatedbefore fj and fj translated after fj+1Lreorder-Rreorder 1 < j < J and fj?1 trans-lated after fj and fj translated after fj+1Up to this point, we have converted the reorder-ing problem into a tagging problem with nine tags.The transformation in Figure 1 is conducted forall the sentence pairs in the bilingual training cor-pus.
After that, we have built an ?annotated?
cor-pus for the training.
For this supervised learningtask, we choose the approach conditional randomfields (CRFs) (Lafferty et al, 2001; Sutton andMccallum, 2006; Lavergne et al, 2010) and recur-rent neural network (RNN) (Elman, 1990; Jordan,1990; Lang et al, 1990).For the first method, we adopt the linear-chainCRFs.
However, even for the simple linear-chainCRFs, the complexity of learning and inferencegrows quadratically with respect to the number ofoutput labels and the amount of structural featureswhich are with regard to adjacent pairs of labels.Hence, to make the computational cost as low aspossible, two measures have been taken.
Firstly,as described above we reduce the number of tagsto nine.
Secondly, we add source sentence part-of-speech (POS) tags to the input.
For features withwindow size one to three, both source words andits POS tags are used.
For features with windowsize four and five, only POS tags are used.As the second method, we use recurrent neu-ral network (RNN).
RNN is closely related withMultilayer Perceptrons (MLP) (Rumelhart et al,1986), but the output of one ore more hidden lay-ers is reused as additional inputs for the network inthe next time step.
This structure allows the RNNto learn whole sequences without restricting itselfto a fixed input window.
A plain RNN has only ac-cess to the previous events in the input sequence.Hence we adopt the bidirectional RNN (BRNN)(Schuster and Paliwal, 1997) which reads the inputsequence from both directions before making theprediction.
The long short-term memory (LSTM)(Hochreiter and Schmidhuber, 1997) is applied to324counter the effects that long distance dependen-cies are hard to learn with gradient descent.
Thisis often referred to as vanishing gradient problem(Bengio et al, 1994).3.2 DecodingOnce the model training is finished, we make in-ference on develop and test corpora which meansthat we get the labels of the source sentences thatneed to be translated.
In the decoder, we adda new model which checks the labeling consis-tency when scoring an extended state.
Duringthe search, a sentence pair (fJ1 , eI1) will be for-mally splitted into a segmentation SK1 which con-sists of K phrase pairs.
Each sk = (ik; bk, jk)is a triple consisting of the last position ik ofthe kth target phrase e?k.
The start and end po-sition of the kth source phrase f?k are bk and jk.Suppose the search state is now extended with anew phrase pair (f?k, e?k): f?k := fbk .
.
.
fjk ande?k := eik?1+1 .
.
.
eik .
We have access to theold coverage vector, from which we know if thenew phrase?s left neighboring source word fbk?1and right neighboring source word fjk+1 havebeen translated.
We also have the word alignmentwithin the new phrase pair, which is stored dur-ing the phrase extraction process.
Based on theold coverage vector and alignment, we can repeatthe transformation in Figure 1 to calculate the la-bels for the new phrase.
The added model willthen check the consistence between the calculatedlabels and the labels predicted by the reorderingmodel.
The number of source words that have in-consistent labels is the penalty and is then addedinto the log-linear framework as a new feature.4 Comparative StudyThe second part of this paper is comparative studyon reordering models.
Here we briefly describethose models which will be compared to later.4.1 Moses lexicalized reordering modelA BFigure 2: lexicalized reordering model illustration.Moses (Koehn et al, 2007) contains a word-based orientation model, which has three types ofreordering: (m) monotone order, (s) switch withprevious phrase and (d) discontinuous.
Figure 2is an example.
The definitions of reordering typesare as follows:monotone for current phrase, if a word alignmentto the bottom left (point A) exists and there is noword alignment point at the bottom right position(point B) .swap for current phrase, if a word alignment tothe bottom right (point B) exists and there is noword alignment point at the bottom left position(point A) .discontinuous all other casesOur implementation is same with the defaultbehavior of Moses lexicalized reordering model.We count how often each extracted phrase pair isfound with each of the three reordering types.
Theadd-0.5 smoothing is then applied.
Finally, theprobability is estimated with maximum likelihoodprinciple.4.2 Maximum entropy reordering modelFigure 3 is an illustration of (Zens and Ney, 2006) .j is the source word position which is aligned tothe last target word of the current phrase.
j?
isthe last source word position of the current phrase.j??
is the source word position which is aligned tothe first target word position of the next phrase.
(Zens and Ney, 2006) proposed a maximum en-tropy classifier to predict the orientation of thenext phrase given the current phrase.
The orien-tation class cj,j?
,j??
is defined as:cj,j?
,j??=??
?left, if j?
?<jright, if j?
?>j and j??
?
j?>1monotone, if j?
?>j and j??
?
j?=1(4)The orientation probability is modeled in a log-linear framework using a set of N feature func-tions hn(fJ1 , eI1, i, j, cj,j?
,j??
), n = 1, .
.
.
, N .
Thewhole model is:p?N1 (cj,j?
,j??
|fJ1 , eI1, i, j)=exp(N?n=1?nhn(fJ1 ,eI1,i,j,cj,j?
,j??
))?c?exp(N?n=1?nhn(fJ1 ,eI1,i,j,c?
))(5)Different features can be used, we use the sourceand target word features to train the model.325Figure 3: phrase orientation: left, right and monotone.
j is the source word position aligned to the last target word of currentphrase.
j?
is the last source word position of current phrase.
j??
is the source word position aligned to the first target wordposition of the next phrase.f1 f2 f3 f4 f5 f6 f7e1 e2 e3 e4 e5 e6 e7Figure 4: bilingual LM illustration.
The bilingual sequenceis e1 , e2 f3 , e3 f1 , e4 f4 , e5 f4 , e6 f6 f7 , e7 f5 .4.3 Bilingual LMThe previous two models belong to ?The reorder-ing is a classification problem?.
Now we turnto ?The reordering is a decoding order problem?.
(Marin?o et al, 2006) implement a translationmodel using n-grams.
In this way, the translationsystem can take full advantage of the smoothingand consistency provided by standard back-off n-gram models.
Figure 4 is an example.
The in-terpretation is that given the sentence pair (f71 , e71)and its alignment, the correct translation order ise1 , e2 f3 , e3 f1 , e4 f4 , e5 f4 , e6 f6 f7 , e7 f5 .Notice the bilingual units have been ordered ac-cording to the target side, as the decoder writesthe translation in a left-to-right way.
Using the ex-ample we describe the strategies used for specialcases:?
keep the unaligned target word, e.g.
e1?
remove the unaligned source word, e.g.
f2?
when one source word aligned to multipletarget words, duplicate the source word foreach target word, e.g.
e4 f4 , e5 f4?
when multiple source words aligned to onetarget word, put together the source words forthat target word, e.g.
e6 f6 f7After the operation in Figure 4 was done forall bilingual sentence pairs, we get a decodingsequence corpus.
We build a 9-gram LM us-ing SRILM toolkit (Stolcke, 2002) with modifiedKneser-Ney smoothing.The model is added as an additional feature inEquation (2).
To use the bilingual LM, the searchstate must be augmented to keep the bilingual unitdecoding sequence.
In search, the bilingual LMis applied similar to the standard target side LM.The bilingual sequence of phrase pairs will be ex-tracted using the same strategy in Figure 4 .
Sup-pose the search state is now extended with a newphrase pair (f?
, e?).
F?
is the bilingual sequence forthe new phrase pair (f?
, e?)
and F?
i is the ith unitwithin F?
.
F?
?
is the bilingual sequence historyfor current state.
We compute the feature scorehbilm(F?
, F??)
of the extended state as follows:hbilm(F?
, F??)=?
?|F?
|?i=1log p(F?
i|F?
?
, F?
1, ?
?
?
, F?
i?1)(6)?
is the scaling factor for this model.
|F?
| is thelength of the bilingual decoding sequence.4.4 Source decoding sequence LM(Feng et al, 2010) present an simpler version ofthe above bilingual LM where they use only thesource side to model the decoding order.
Thesource word decoding sequence in Figure 4 is thenf3 , f1 , f2 , f4 , f6 , f7 , f5 .
We also build a 9-gramLM based on the source word decoding sequences.The usage of the model is same as bilingual LM.4.5 Syntactic cohesion modelThe previous two models belong to ?The reorder-ing is a decoding order problem?.
Now we turn to?The reordering can be solved by outside heuris-tics?.
(Cherry, 2008) proposed a syntactic cohe-sion model.
The core idea is that the syntacticstructure of the source sentence should be pre-served during translation.
This structure is repre-sented by a source sentence dependency tree.
Thealgorithm is as follows: given the source sentenceand its dependency tree, during the translation pro-cess, once a hypothesis is extended, check if thesource dependency tree contains a subtree T suchthat:326?
Its translation is already started (at least onenode is covered)?
It is interrupted by the new added phrase (atleast one word in the new source phrase is notin T )?
It is not finished (after the new phrase isadded, there is still at least one free node inT )If so, we say this hypothesis violates the subtreeT , and the model returns the number of subtreesthat this hypothesis violates.4.6 Semantic cohesion model(Feng et al, 2012) propose two structure featuresfrom semantic role labeling (SRL) results.
Simi-lar to the previous model, the SRL information isused as soft constraints.
During decoding process,the first feature will report how many event layersthat one search state violates and the second fea-ture will report the amount of semantic roles thatone search state violates.
In this paper, the twofeatures have been used together.
So when the se-mantic cohesion model is used, both features willbe triggered.4.7 Tree-based jump model(Wang et al, 2007) present a pre-reorderingmethod for Chinese-English translation task.
InSection 3.6 of (Zhang, 2013), instead of doinghard reordering decision, the author uses the rulesas soft constraints in the decoder.
In this paper,we use the similar method as described in (Zhang,2013).
Our strategy is: firstly, we parse the sourcesentences to get constituency trees.
Then we ma-nipulate the trees using heuristics described by(Wang et al, 2007) .
The leaf nodes in the revisedtree constitute the reordered source sentence.
Fi-nally, in the log-linear framework (Equation 2) anew jump model is added which uses the reorderedsource sentence to calculate the cost.
For example,the original sentence f1f2f3f4f5 is now convertedby rules into the new sentence f1f5f3f2f4 .
Fordecoding, we still use the original sentence.
Sup-pose previously translated source phrase is f1 andthe current phrase is f5 .
Then the standard jumpmodel gives cost qDist = 4 and the new tree-basedjump model will return a cost qDist new = 1 .5 ExperimentsIn this section, we describe the baseline setup, theCRFs training results, the RNN training resultsand translation experimental results.5.1 Experimental SetupOur baseline is a phrase-based decoder, which in-cludes the following models: an n-gram target-side language model (LM), a phrase translationmodel and a word-based lexicon model.
The lattertwo models are used for both directions: p(f |e)and p(e|f).
Additionally we use phrase countfeatures, word and phrase penalty.
The reorder-ing model for the baseline system is the distance-based jump model which uses linear distance.This model does not have hard limit.
We list theimportant information regarding the experimentalsetup below.
All those conditions have been keptsame in this work.?
lowercased training data from the GALE task(Table 1, UN corpus not included)alignment trained with GIZA++?
tuning corpus: NIST06test corpora: NIST02 03 04 05 and 08?
5-gram LM (1 694 412 027 running words)trained by SRILM toolkit (Stolcke, 2002)with modified Kneser-Ney smoothingtraining data: target side of bilingual data.?
BLEU (Papineni et al, 2001) and TER(Snover et al, 2005) reportedall scores calculated in lowercase way.?
Wapiti toolkit (Lavergne et al, 2010) used forCRFs; RNN is built by the RNNLIB toolkit.Chinese EnglishSentences 5 384 856Running Words 115 172 748 129 820 318Vocabulary 1 125 437 739 251Table 1: translation model and LM training data statisticsTable 1 contains the data statistics used fortranslation model and LM.
For the reorderingmodel, we take two further filtering steps.
Firstly,we delete the sentence pairs if the source sentencelength is one.
When the source sentence has onlyone word, the translation will be always mono-tonic and the reordering model does not need tolearn this.
Secondly, we delete the sentence pairs ifthe source sentence contains more than three con-tiguous unaligned words.
When this happens, thesentence pair is usually low quality hence not suit-able for learning.
The main purpose of the twofiltering steps is to further lay down the computa-tional burden.
The label distribution is depicted inFigure 5.
We can see that most words are mono-tonic.
We then divide the corpus to three parts:3270 0.5 1 1.5 2 2.5 3 3.5 4 4.5 5?107BEGIN-RmonoBEGIN-RreorderEND-LmonoEND-LreorderLmono-RmonoLmono-RreorderLreorder-RmonoLreorder-RreorderUNALIGNAmount of TagsFigure 5: Tags distribution illustration.train, validation and test.
The source side datastatistics for the reordering model training is givenin Table 2 (target side has only nine labels).train validation testSentences 2 973 519 400 000 400 000Running Words 62 263 295 8 370 361 8 382 086Vocabulary 454 951 149686 150 007Table 2: tagging-style model training data statistics5.2 CRFs Training ResultsThe toolkit Wapiti (Lavergne et al, 2010) is usedin this paper.
We choose the classical optimizationalgorithm limited memory BFGS (L-BFGS) (Liuand Nocedal, 1989).
For regularization, Wapitiuses both the `1 and `2 penalty terms, yielding theelastic-net penalty of the form?1?
?
?
?1 +?22 ?
?
?
?22 (7)In this work, we use as many features as pos-sible because `1 penalty ?1 ?
?
?1 is able toyield sparse parameter vectors, i.e.
using a `1penalty term implicitly performs the feature selec-tion.
The computational costs are given here: ona cluster with two AMD Opteron(tm) Processor6176 (total 24 cores), the training time is about 16hours, peak memory is around 120G.
Several ex-periments have been done to find the suitable hy-perparameter ?1 and ?2, we choose the model withlowest error rate on validation corpus for trans-lation experiments.
The error rate of the chosenmodel on test corpus (the test corpus in Table 2)is 25.75% for token error rate and 69.39% for se-quence error rate.
Table 3 is the feature templatewe set initially which generates 722 999 637 fea-tures.
Some examples are given in Table 4.
Aftertraining 36 902 363 features are kept.5.3 RNN Training ResultsWe also applied RNN to the task as an alternativeapproach to CRFs.
The here used RNN implemen-tation is RNNLIB which has support for long shortterm memory (LSTM) (Graves, 2008).
We useda one of k encoding for the input word and alsofor the labels.
After testing several configurationsover the validation corpus we used a network withFeature Templates1-gram source word featuresx[-4,0], x[-3,0], x[-2,0], x[-1,0]x[0,0], x[1,0], x[2,0], x[3,0], x[4,0]1-gram source POS featuresx[-4,1], x[-3,1], x[-2,1], x[-1,1]x[0,1], x[1,1], x[2,1], x[3,1], x[4,1]2-gram source word featuresx[-1,0]/x[0,0], x[ 0,0]/x[1,0]x[-1,1]/x[0,1], x[0,1]/x[1,1]3-gram source word featuresx[-1,0]/x[0,0]/x[1,0]x[-2,0]/x[-1,0]/x[0,0]x[0,0]/x[1,0]/x[2,0]3-gram source POS featuresx[0,1]/x[1,1]/x[2,1]x[-2,1]/x[-1,1]/x[0,1]x[-1,1]/x[0,1]/x[1,1]4-gram source POS featuresx[0,1]/x[1,1]/x[2,1]/x[3,1]x[0,1]/x[-1,1]/x[-2,1]/x[-3,1]x[-1,1]/x[0,1]/x[1,1]/x[2,1]x[-2,1]/x[-1,1]/x[0,1]/x[1,1]5-gram source POS featuresx[0,1]/x[1,1]/x[2,1]/x[3,1]/x[4,1]x[-4,1]/x[-3,1]/x[-2,1]/x[-1,1]/x[0,1]x[-2,1]/x[-1,1]/x[0,1]/x[1,1]/x[2,1]bigram output label featurex[-1,2]/x[0,2]Table 3: feature templates for CRFs trainingWords POS Label??
P BEGIN-Rmono?
DT Lmono-Rmono?
M Lmono-Rmono??
NN Lmono-Rmono, PU Lmono-Rmono??
PN Lmono-Rmono?
VC UNALIGN  Current label??
VV Lmono-Rmono???
NN Lmono-Rmono?
DEC UNALIGN?
PU END-LmonoTable 4: feature examples.
x[row,col] specifies a token in theinput data.
row specfies the relative position from the cur-rent label and col specifies the absolute position of the col-umn.
So for the current lable in this table, x[?1, 2]/x[0, 2]is Lmono-Rmono/UNALIGN and x[?1, 1]/x[0, 1]/x[1, 1] isPN/VC/VV.LSTM 200 nodes in the hidden layer.
The RNNhas a token error rate of 27.31% and a sentenceerror rate of 77.00% over the test corpus in Ta-ble 2.
The RNN is trained on a similar computeras above.
RNNLIB utilizes only one thread.
Thetraining time is about three and a half days andpeak memory consumption is 1G .5.4 Comparison of CRFs and RNN errorsCRFs performs better than RNN (token error rate25.75% vs 27.31%).
Both error rate values aremuch higher than what we usually see in part-of-speech tagging task.
The main reason is that the?annotated?
corpus is converted from word align-ment which contains lots of error.
However, as we328hhhhhhhhhhReferencePrediction Unalign BEGIN-Rm BEGIN-Rr END-Lm END-Lr Lm-Rm Lr-Rm Lm-Rr Lr-RrUnalign 687724 15084 850 7347 716 493984 107364 43457 9194BEGIN-Rmono 3537 338315 6209 0 0 0 0 0 0BEGIN-Rreorder 419 12557 17054 0 0 0 0 0 0END-Lmono 1799 0 0 365635 3196 0 0 0 0END-Lreorder 510 0 0 5239 7913 0 0 0 0Lmomo-Rmono 188627 0 0 0 0 4032738 176682 150952 13114Lreorder-Rmono 88177 0 0 0 0 369232 433027 27162 15275Lmomo-Rreorder 32342 0 0 0 0 268570 24558 296033 10645Lreorder-Rreorder 9865 0 0 0 0 34746 20382 16514 45342Recall 50.36% 97.20% 56.79% 98.65% 57.92% 88.40% 46.42% 46.83% 35.74%Precision 67.89% 92.45% 70.73% 96.67% 66.92% 77.56% 56.83% 55.42% 48.46%Table 5: CRF Confusion Matrix.
Abbreviations: Lmono(Lm) Lreorder(Lr) Rmono(Rm) Rreorder(Rr)hhhhhhhhhhReferencePrediction Unalign BEGIN-Rm BEGIN-Rr END-Lm END-Lr Lm-Rm Lr-Rm Lm-Rr Lr-RrUnalign 589100 17299 901 7870 1000 639555 82413 24277 3305BEGIN-Rmono 1978 339686 6397 0 0 0 0 0 0BEGIN-Rreorder 186 13812 16032 0 0 0 0 0 0END-Lmono 2258 0 0 364121 4251 0 0 0 0END-Lreorde 699 0 0 4693 8269 1 0 0 0Lmomo-Rmono 142777 1 0 0 0 4232113 105266 78692 3264Lreorder-Rmono 96278 0 1 0 0 491989 323272 14635 6698Lmomo-Rreorder 31118 0 0 0 0 380483 18144 198068 4335Lreorder-Rreorder 12366 0 1 0 0 50121 25196 17008 22157Recall 43.13% 97.59% 53.39% 98.24% 60.53% 92.77% 34.65% 31.33% 17.47%Precision 67.19% 91.61% 68.71% 96.66% 61.16% 73.04% 58.32% 59.54% 55.73%Table 6: RNN Confusion Matrix.
Abbreviations: Lmono(Lm) Lreorder(Lr) Rmono(Rm) Rreorder(Rr)will show later, the model trained with both CRFsand RNN help to improve the translation quality.Table 5 and Table 6 demonstrate the confusionmatrix of the CRFs and RNN errors over the testcorpus.
The rows represent the correct tag that theclassifier should have predicted and the columnsare the actually predicted tags.
E.g.
the number687724 in first row and first column of Table 5tells that there are 687724 correctly labeled Un-align tags.
The number 15084 in first row andsecond column of Table 5 represents that there are15084 Unalign tags labeled incorrectly to Begin-Rmono.
Therefore, numbers on the diagonal fromthe upper left to the lower right corner representthe amount of correctly classified tags and all othernumbers show the amount of false labels.
Themany zeros show that both classifier rarely makemistake for the label ?BEGIN-??
which only oc-cur at the beginning of a sentence.
The same istrue for the ?END-??
labels.5.5 Translation ResultsResults are summarized in Table 7.
Please readthe caption for the meaning of abbreviations.
AnIndex column is added for score reference conve-nience (B for BLEU; T for TER).
For the proposedmodel, significance testing results on both BLEUand TER are reported (B2 and B3 compared to B1,T2 and T3 compared to T1).
We perform bootstrapresampling with bounds estimation as describedin (Koehn, 2004).
The 95% confidence threshold(denoted by ?
in the table) is used to draw signifi-cance conclusions.
We add a column avg.
to showthe average improvements.From Table 7 we see that the proposed reorder-ing model using CRFs improves the baseline by0.98 BLEU and 1.21 TER on average, while theproposed reordering model using RNN improvesthe baseline by 1.32 BLEU and 1.53 TER on av-erage.
For line B2 B3 and T2 T3, most scoresare better than their corresponding baseline valueswith more than 95% confidence.
The results showthat our proposed idea improves the baseline sys-tem and RNN trained model performs better thanCRFs trained model, in terms of both automaticmeasure and significance test.
To investigate whyRNN has lower performance for the tagging taskbut achieves better BLEU, we build a 3-gram LMon the source side of the training corpus in Table2 and perplexity values are listed in Table 8.
Theperplexity of the test corpus for reordering modelcomparison is much lower than those NIST cor-pora for translation experiments.
In other words,there exists mismatch of the data for reorderingmodel training and actual MT data.
This couldexplain why CRFs is superior to RNN for labelingproblem while RNN is better for MT tasks.For the comparative study, the best method isthe tree-based jump model (JUMPTREE).
Ourproposed model ranks the second position.
Thedifference is tiny: on average only 0.08 BLEU (B3and B10) and 0.15 TER (T3 and T10).
Even with329Systems NIST02 NIST03 NIST04 NIST05 NIST08 avg.
IndexBLEU scoresbaseline 33.60 34.29 35.73 32.15 26.34 - B1baseline+CRFs 34.53 35.19 36.56?
33.30?
27.41?
0.98 B2baseline+RNN 35.30?
35.34?
37.03?
33.80?
27.23?
1.32 B3baseline+LRM 34.87 34.90 36.40 33.43 27.45 0.99 B4baseline+MERO 34.91 34.83 36.29 33.69 26.66 0.85 B5baseline+BILM 35.21 35.00 36.83 33.64 27.39 1.19 B6baseline+SRCLM 34.55 34.52 36.18 32.84 27.03 0.50 B7baseline+SRL 35.05 34.93 36.71 33.22 26.89 0.93 B8baseline+SC 34.96 34.52 36.37 33.35 26.90 0.79 B9baseline+JUMPTREE 35.10 35.53 37.12 34.18 27.19 1.40 B10baseline+LRM+MERO+BILM+SRCLM+SRL+SC+JUMPTREE 36.77 36.16 38.10 35.67 28.52 2.62 B11baseline+LRM+MERO+BILM+SRCLM+SRL+SC+JUMPTREE+RNN 36.99 37.00 38.79 35.86 28.99 3.10 B12TER scoresbaseline 61.36 60.48 59.12 60.94 65.17 - T1baseline+CRFs 60.14?
58.91?
57.91?
59.77?
64.30?
1.21 T2baseline+RNN 59.38?
58.87?
57.60?
59.56?
63.99?
1.53 T3baseline+LRM 60.07 59.08 58.42 59.74 64.50 1.05 T4baseline+MERO 60.19 59.58 58.51 59.49 64.68 0.92 T5baseline+BILM 60.23 59.93 58.59 60.09 64.72 0.70 T6baseline+SRCLM 60.27 59.55 58.40 60.16 64.61 0.82 T7baseline+SRL 60.05 59.55 58.14 59.69 64.74 0.98 T8baseline+SC 59.90 59.37 58.27 59.69 64.44 1.08 T9baseline+JUMPTREE 59.53 58.54 57.67 58.90 64.04 1.68 T10baseline+LRM+MERO+BILM+SRCLM+SRL+SC+JUMPTREE 59.16 57.84 56.83 58.03 63.20 2.40 T11baseline+LRM+MERO+BILM+SRCLM+SRL+SC+JUMPTREE+RNN 58.67 57.67 56.27 58.00 63.09 2.67 T12Table 7: Experimental results.
CRFs and RNN mean the tagging-style model trained with CRFs or RNN; LRM for lexicalizedreordering model (Koehn et al, 2007) ; MERO for maximum entropy reordering model (Zens and Ney, 2006) ; BILM forbilingual language model (Marin?o et al, 2006) and SRCLM for its simpler version source decoding sequence model (Feng etal., 2010) ; SC for syntactic cohesion model (Cherry, 2008) ; SRL for semantic cohesion model (Feng et al, 2012); JUMPTREEfor our tree-based jump model based on (Wang et al, 2007).Running Words OOV PerplexityTest in Table 2 8 382 086 33854 74.364NIST02 22 749 195 176.806NIST03 24 180 290 274.679NIST04 49 612 320 170.507NIST05 29 966 228 279.402NIST08 32 502 511 408.067Table 8: perplexitya strong system (B11 and T11), our model is stillable to provide improvements (B12 and T12).6 ConclusionIn this paper, a novel tagging style reorderingmodel has been proposed.
By our method, the re-ordering problem is converted into a sequence la-beling problem so that the whole source sentenceis taken into consideration for reordering decision.By adding an unaligned word tag, the unalignedword phenomenon is automatically implanted inthe proposed model.
The model is utilized as softconstraints in the decoder.
In practice, we do notexperience decoding memory increase nor speedslow down.We choose CRFs and RNN to accomplish thesequence labeling task.
The CRFs achieves lowererror rate on the tagging task but RNN trainedmodel is better for the translation task.
Experi-mental results show that our model is stable andimproves the baseline system by 0.98 BLEU and1.21 TER (trained by CRFs) and 1.32 BLEU and1.53 TER (trained by RNN).
Most of the scoresare better than their corresponding baseline valueswith more than 95% confidence.
We also compareour method with several other popular reorder-ing models.
Our model ranks the second positionwhich is slightly worse than the tree-based jumpmodel.
However, the tree-based jump model re-lies on manually designed reordering rules whichdoes not exist for many language pairs while ourmodel can be easily adapted to other translationtasks.
We also show that the proposed model isable to improve a very strong baseline system.The main contributions of the paper are: pro-pose the tagging-style reordering model and im-prove the translation quality; compare two se-quence labeling techniques CRFs and RNN; com-pare our method with seven other reordering mod-els.
To our best knowledge, it is the first time thatthe above two comparisons have been reported .AcknowledgmentsThis work was partly realized as part of theQuaero Programme, funded by OSEO, FrenchState agency for innovation, and also partly basedupon work supported by the Defense AdvancedResearch Projects Agency (DARPA) under Con-tract No.
HR0011-12-C-0015.
Any opinions,findings and conclusions or recommendations ex-pressed in this material are those of the authors anddo not necessarily reflect the views of the DefenseAdvanced Research Projects Agency (DARPA).330ReferencesYoshua Bengio, Patrice Simard, and Paolo Frasconi.1994.
Learning long-term dependencies with gradi-ent descent is difficult.
IEEE Transactions on Neu-ral Networks, 5(2):157?166, March.Adam Berger, Peter F. Brown, Stephen A. Pietra, Vin-cent J. Pietra, Andrew S. Kehler, and Robert L.Mercer.
1996.
Language translation apparatus andmethod of using Context-Based translation models.United States Patent, No.
5,510,981.Colin Cherry.
2008.
Cohesive phrase-based decodingfor statistical machine translation.
In Proceedingsof Annual Meeting of the Association for Computa-tional Linguistics: Human Language Technologies(ACL: HLT), pages 72?80, Columbus, Ohio, USA,June.
Association for Computational Linguistics.Jeffrey L. Elman.
1990.
Finding structure in time.Cognitive Science, 14(2):179?211.Minwei Feng, Arne Mauser, and Hermann Ney.
2010.A source-side decoding sequence model for statisti-cal machine translation.
In Proceedings of the As-sociation for Machine Translation in the Americas(AMTA), Denver, CO, USA, October.Minwei Feng, Weiwei Sun, and Hermann Ney.
2012.Semantic cohesion model for phrase-based SMT.In Proceedings of the International Conference onComputational Linguistics (COLING), pages 867?878, Mumbai, India, December.
The COLING 2012Organizing Committee.Michel Galley and Christopher D. Manning.
2008.A simple and effective hierarchical phrase reorder-ing model.
In Proceedings of the Conference onEmpirical Methods in Natural Language Processing(EMNLP), pages 848?856, Stroudsburg, PA, USA.Association for Computational Linguistics.Alex Graves.
2008.
Supervised Sequence Labellingwith Recurrent Neural Networks.
Ph.D. thesis,Technical University of Munich, July.Sepp Hochreiter and Ju?rgen Schmidhuber.
1997.Long short-term memory.
Neural Computation,9(8):1735?1780, November.Michael I. Jordan.
1990.
Attractor dynamics andparallelism in a connectionist sequential machine.IEEE Computer Society Neural Networks Technol-ogy Series, pages 112?127.Kevin Knight.
1999.
Decoding complexity in word-replacement translation models.
ComputationalLinguistics, 25(4):607?615.Philipp Koehn, Franz J. Och, and Daniel Marcu.
2003.Statistical phrase-based translation.
In Proceedingsof the Conference of the North American Chapterof the Association for Computational Linguistics onHuman Language Technology (NAACL) - Volume 1,pages 48?54, Stroudsburg, PA, USA.
Associationfor Computational Linguistics.Philipp Koehn, Hieu Hoang, Alexandra Birch, ChrisCallison-Burch, Marcello Federico, Nicola Bertoldi,Brooke Cowan, Wade Shen, Christine Moran,Richard Zens, Chris Dyer, Ondrej Bojar, AlexandraConstantin, and Evan Herbst.
2007.
Moses: Opensource toolkit for statistical machine translation.
InProceedings of the Annual Meeting of the Associ-ation for Computational Linguistics (ACL), demon-stration session, pages 177?180, Prague, Czech Re-public, June.Philipp Koehn.
2004.
Statistical significance testsfor machine translation evaluation.
In Proceedingsof the Conference on Empirical Methods in Natu-ral Language Processing (EMNLP), pages 388?395,Barcelona, Spain, July.
Association for Computa-tional Linguistics.John D. Lafferty, Andrew McCallum, and FernandoC.
N. Pereira.
2001.
Conditional random fields:Probabilistic models for segmenting and labeling se-quence data.
In Proceedings of the Eighteenth Inter-national Conference on Machine Learning (ICML),pages 282?289, San Francisco, CA, USA.
MorganKaufmann Publishers Inc.Kevin J. Lang, Alex H. Waibel, and Geoffrey E. Hin-ton.
1990.
A time-delay neural network architec-ture for isolated word recognition.
Neural networks,3(1):23?43, January.Thomas Lavergne, Olivier Cappe?, and Franc?ois Yvon.2010.
Practical very large scale CRFs.
In Proceed-ings the 48th Annual Meeting of the Association forComputational Linguistics (ACL), pages 504?513.Association for Computational Linguistics, July.Dong C. Liu and Jorge Nocedal.
1989.
On the lim-ited memory bfgs method for large scale optimiza-tion.
Mathematical Programming, 45(3):503?528,December.Jose?
B. Marin?o, Rafael E. Banchs, Josep Maria Crego,Adria` de Gispert, Patrik Lambert, Jose?
A. R. Fonol-losa, and Marta R. Costa-Jussa`.
2006.
N-gram-based machine translation.
Computational Linguis-tics, 32(4):527?549, December.Franz J. Och and Hermann Ney.
2002.
Discriminativetraining and maximum entropy models for statisti-cal machine translation.
In Proceedings of AnnualMeeting of the Association for Computational Lin-guistics (ACL), pages 295?302, Philadelphia, Penn-sylvania, USA, July.Franz J. Och, Christoph Tillmann, and Hermann Ney.1999.
Improved alignment models for statisticalmachine translation.
In Proceedings of the JointSIGDAT Conference on Empirical Methods in Nat-ural Language Processing and Very Large Cor-pora (EMNLP), pages 20?28, University of Mary-land, College Park, MD, USA, June.
Association forComputational Linguistics.331Franz J. Och, Daniel Gildea, Sanjeev Khudanpur,Anoop Sarkar, Kenji Yamada, Alex Fraser, ShankarKumar, Libin Shen, David Smith, Katherine Eng,Viren Jain, Zhen Jin, and Dragomir Radev.
2004.A smorgasbord of features for statistical machinetranslation.
In Proceedings of the Conferenceon Statistical Machine Translation at the NorthAmerican Chapter of the Association for Compu-tational Linguistics on Human Language Technol-ogy (NAACL-HLT), pages 161?168, Boston, Mas-sachusetts, USA, May.
Association for Computa-tional Linguistics.Kishore Papineni, Salim Roukos, Todd Ward, and Wei-Jing Zhu.
2001.
Bleu: a method for automatic eval-uation of machine translation.
IBM Research Re-port, RC22176 (W0109-022), September.David.
E. Rumelhart, Geoffrey E. Hinton, andRonald J. Williams.
1986.
Learning internal repre-sentations by error propagation.
In David E. Rumel-hart and James L. McClelland, editors, Parallel dis-tributed processing: explorations in the microstruc-ture of cognition, vol.
1, pages 318?362.
MIT Press,Cambridge, MA, USA.Mike Schuster and Kuldip K. Paliwal.
1997.
Bidirec-tional recurrent neural networks.
IEEE Transactionson Signal Processing, 45(11):2673?2681, Novem-ber.Matthew Snover, Bonnie Dorr, Richard Schwartz, JohnMakhoul, Linnea Micciulla, and Ralph Weischedel.2005.
A study of translation error rate with targetedhuman annotation.
Technical Report LAMP-TR-126, CS-TR-4755, UMIACS-TR-2005-58, Univer-sity of Maryland, College Park, MD.Andreas Stolcke.
2002.
Srilm - an extensible lan-guage modeling toolkit.
In Proceedings of Interna-tional Conference on Spoken Language Processing(ICSLP), pages 901?904, Denver, Colorado, USA,September.
ISCA.Charles Sutton and Andrew Mccallum, 2006.
In-troduction to Conditional Random Fields for Rela-tional Learning, pages 93?128.
MIT Press.Chao Wang, Michael Collins, and Philipp Koehn.2007.
Chinese syntactic reordering for statis-tical machine translation.
In Proceedings ofthe Conference on Empirical Methods in NaturalLanguage Processing (EMNLP), pages 737?745,Prague, Czech Republic, June.
Association for Com-putational Linguistics.Dekai Wu.
1995.
Stochastic inversion transductiongrammars with application to segmentation, brack-eting, and alignment of parallel corpora.
In Pro-ceedings of the 14th international joint conferenceon Artificial intelligence (IJCAI) - Volume 2, pages1328?1335, San Francisco, CA, USA, August.
Mor-gan Kaufmann Publishers Inc.Richard Zens and Hermann Ney.
2003.
A compara-tive study on reordering constraints in statistical ma-chine translation.
In Proceedings of the 41st AnnualMeeting on Association for Computational Linguis-tics (ACL) - Volume 1, pages 144?151, Stroudsburg,PA, USA.
Association for Computational Linguis-tics.Richard Zens and Hermann Ney.
2006.
Discrimina-tive reordering models for statistical machine trans-lation.
In Proceedings of the Workshop on StatisticalMachine Translation at the North American Chapterof the Association for Computational Linguistics onHuman Language Technology (NAACL-HLT), pages55?63, New York City, NY, June.
Association forComputational Linguistics.Richard Zens, Franz J. Och, and Hermann Ney.
2002.Phrase-based statistical machine translation.
In Ger-man Conference on Artificial Intelligence, pages 18?32.
Springer Verlag, September.Yuqi Zhang, Richard Zens, and Hermann Ney.
2007.Chunk-level reordering of source language sen-tences with automatically learned rules for statisticalmachine translation.
In Proceedings of the Work-shop on Syntax and Structure in Statistical Transla-tion at the North American Chapter of the Associa-tion for Computational Linguistics on Human Lan-guage Technology (NAACL-HLT)/Association forMachine Translation in the Americas (AMTA), pages1?8, Morristown, NJ, USA, April.
Association forComputational Linguistics.Yuqi Zhang.
2013.
The Application of Source Lan-guage Information in Chinese-English StatisticalMachine Translation.
Ph.D. thesis, Computer Sci-ence Department, RWTH Aachen University, May.332
