Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics, pages 279?289,Berlin, Germany, August 7-12, 2016.c?2016 Association for Computational LinguisticsUsing Sentence-Level LSTM Language Models for Script InferenceKarl PichottaDepartment of Computer ScienceThe University of Texas at Austinpichotta@cs.utexas.eduRaymond J. MooneyDepartment of Computer ScienceThe University of Texas at Austinmooney@cs.utexas.eduAbstractThere is a small but growing body ofresearch on statistical scripts, models ofevent sequences that allow probabilisticinference of implicit events from docu-ments.
These systems operate on struc-tured verb-argument events produced byan NLP pipeline.
We compare these sys-tems with recent Recurrent Neural Netmodels that directly operate on raw tokensto predict sentences, finding the latter to beroughly comparable to the former in termsof predicting missing events in documents.1 IntroductionStatistical scripts are probabilistic models of eventsequences (Chambers and Jurafsky, 2008).
Alearned script model is capable of processing adocument and inferring events that are probablebut not explicitly stated.
These models operate onautomatically extracted structured events (for ex-ample, verbs with entity arguments), which are de-rived from standard NLP tools such as dependencyparsers and coreference resolution engines.Recent work has demonstrated that standard se-quence models applied to such extracted eventsequences, e.g.
discriminative language models(Rudinger et al, 2015) and Long Short TermMemory (LSTM) recurrent neural nets (Pichottaand Mooney, 2016), are able to infer held-outevents more accurately than previous approaches.These results call into question the extent to whichstatistical event inference systems require linguis-tic preprocessing and syntactic structure.
In an at-tempt to shed light on this issue, we compare ex-isting script models to LSTMs trained as sentence-level language models which try to predict thesequence of words in the next sentence from alearned representation of the previous sentencesusing no linguistic preprocessing.Some prior statistical script learning systemsare focused on knowledge induction.
These sys-tems are primarily designed to induce collectionsof co-occurring event types involving the same en-tities, and their ability to infer held-out events isnot their primary intended purpose (Chambers andJurafsky, 2008; Ferraro and Van Durme, 2016, in-ter alia).
In the present work, we instead investi-gate the behavior of systems trained to directly op-timize performance on the task of predicting sub-sequent events; in other words, we are investigat-ing statistical models of events in discourse.Much prior research on statistical script learn-ing has also evaluated on inferring missing eventsfrom documents.
However, the exact form thatthis task takes depends on the adopted definitionof what constitutes an event: in previous work,events are defined in different ways, with differ-ing degrees of structure.
We consider simply us-ing raw text, which requires no explicit syntacticannotation, as our mediating representation, andevaluate how raw text models compare to modelsof more structured events.Kiros et al (2015) introduced skip-thought vec-tor models, in which an RNN is trained to en-code a sentence within a document into a low-dimensional vector that supports predicting theneighboring sentences in the document.
Thoughthe objective function used to train networks max-imizes performance on the task of predicting sen-tences from their neighbors, Kiros et al (2015)do not evaluate directly on the ability of networksto predict text; they instead demonstrate that theintermediate low-dimensional vector embeddingsare useful for other tasks.
We directly evaluate thetext predictions produced by such sentence-levelRNN encoder-decoder models, and measure theirutility for the task of predicting subsequent events.279We find that, on the task of predicting the text ofheld-out sentences, the systems we train to operateon the level of raw text generally outperform thesystems we train to predict text mediated by auto-matically extracted event structures.
On the otherhand, if we run an NLP pipeline on the automat-ically generated text and extract structured eventsfrom these predictions, we achieve prediction per-formance roughly comparable to that of systemstrained to predict events directly.
The differencebetween word-level and event-level models on thetask of event prediction is marginal, indicating thatthe task of predicting the next event, particularlyin an encoder-decoder setup, may not necessarilyneed to be mediated by explicit event structures.To our knowledge, this is the first effort to evalu-ate sentence-level RNN language models directlyon the task of predicting document text.
Our re-sults show that such models are useful for pre-dicting missing information in text; and the factthat they require no linguistic preprocessing makesthem more applicable to languages where qualityparsing and co-reference tools are not available.2 Background2.1 Statistical Script LearningScripts, structured models of stereotypical se-quences of events, date back to AI research fromthe 1970s, in particular the seminal work ofSchank and Abelson (1977).
In this concep-tion, scripts are modeled as temporally orderedsequences of symbolic structured events.
Thesemodels are nonprobabilistic and brittle, and poseserious problems for automated learning.In recent years, there has been a growing bodyof research into statistical script learning sys-tems, which enable statistical inference of im-plicit events from text.
Chambers and Jurafsky(2008; 2009) describe a number of simple eventco-occurrence based systems which infer (verb,dependency) pairs related to a particular discourseentity.
For example, given the text:Andrew Wiles won the 2016 Abel prizefor proving Fermat?s last theorem,such a system will ideally be able to infer novelfacts like (accept, subject) or (publish, subject) forthe entity Andrew Wiles, and facts like (accept, ob-ject) for the entity Abel prize.
A number of othersystems inferring the same types of pair eventshave been shown to provide superior performancein modeling events in documents (Jans et al, 2012;Rudinger et al, 2015).Pichotta and Mooney (2014) give a co-occurrence based script system that models andinfers more complex multi-argument events fromtext.
For example, in the above example, theirmodel would ideally be able to infer a single eventlike accept(Wiles, prize), as opposed to the twosimpler pairs from which it is composed.
Theyprovide evidence that modeling and inferring morecomplex multi-argument events also yields supe-rior performance on the task of inferring simpler(verb, dependency) pair events.
These events areconstructed using only coreference information;that is, the learned event co-occurrence models donot directly incorporate noun information.More recently, Pichotta and Mooney (2016)presented an LSTM-based script inference modelwhich models and infers multi-argument events,improving on previous systems on the task of in-ferring verbs with arguments.
This system can in-corporate both noun and coreference informationabout event arguments.
We will use this multi-argument event formulation (formalized below)and compare LSTM models using this event for-mulation to LSTM models using raw text.2.2 Recurrent Neural NetworksRecurrent Neural Networks (RNNs) are neu-ral nets whose computation graphs have cycles.In particular, RNN sequence models are RNNswhich map a sequence of inputs x1, .
.
.
, xTto asequence of outputs y1, .
.
.
, yTvia a learned la-tent vector whose value at timestep t is a functionof its value at the previous timestep t?
1.The most basic RNN sequence models, so-called ?vanilla RNNs?
(Elman, 1990), are de-scribed by the following equations:zt= f(Wi,zxt+Wz,zzt?1)ot= g(Wz,ozt)where xtis the vector describing the input at timet; ztis the vector giving the hidden state at timet; otis the vector giving the predicted output attime t; f and g are element-wise nonlinear func-tions (typically sigmoids, hyperbolic tangent, orrectified linear units); and Wi,z, Wz,z, and Wz,oare learned matrices describing linear transforma-tions.
The recurrency in the computation grapharises from the fact that ztis a function of zt?1.The more complex Long Short-Term Mem-ory (LSTM) RNNs (Hochreiter and Schmidhuber,280ztotftitgtzt-1xtmtFigure 1: Long Short-Term Memory unit attimestep t. The four nonlinearity nodes (it, gt, ft,and ot) all have, as inputs, xtand zt?1.
Small cir-cles with dots are elementwise vector multiplica-tions.1997) have been shown to perform well on a widevariety of NLP tasks (Sutskever et al, 2014; Her-mann et al, 2015; Vinyals et al, 2015, inter alia).The LSTM we use is described by:it= ?
(Wx,ixt+Wz,izt?1+ bi)ft= ?
(Wx,fxt+Wz,fzt?1+ bf)ot= ?
(Wx,oxt+Wh,izt?1+ bo)gt= tanh (Wx,mxt+Wz,mzt?1+ bg)mt= ft?mt?1+ it?
gtzt= ot?
tanhmt.The model is depicted graphically in Figure 1.
Thememory vector mtis a function of both its previ-ous value mt?1and the input xt; the vector ztisoutput both to any layers above the unit (which aretrained to predict the output values yt), and is addi-tionally given as input to the LSTM unit at the nexttimestep t + 1.
The W?,?matrices and b?vectorsare learned model parameters, and u ?
v signifieselement-wise multiplication.2.3 Sentence-Level RNN Language ModelsRNN sequence models have recently been shownto be extremely effective for word-level andcharacter-level language models (Mikolov et al,2011; Jozefowicz et al, 2016).
At each timestep,these models take a word or character as input,update a hidden state vector, and predict the nexttimestep?s word or character.
There is also agrowing body of work on training RNN encoder-decoder models for NLP problems.
These systemsfirst encode the entire input into the network?s hid-den state vector and then, in a second step, decodethe entire output from this vector (Sutskever et al,2014; Vinyals et al, 2015; Serban et al, 2016).Sentence-level RNN language models, for ex-ample the skip-thought vector system of Kiroset al (2015), conceptually bridge these two ap-proaches.
Whereas standard language models aretrained to predict the next token in the sequence oftokens, these systems are explicitly trained to pre-dict the next sentence in the sequence of sentences.Kiros et al (2015) train an encoder-decoder modelto encode a sentence into a fixed-length vectorand subsequently decode both the following andpreceding sentence, using Gated Recurrent Units(Chung et al, 2014).
In the present work, we trainan LSTM model to predict a sentence?s succes-sor, which is essentially the forward componentof the skip-thought system.
Kiros et al (2015)use the skip-thought system as a means of project-ing sentences into low-dimensional vector embed-dings, demonstrating the utility of these embed-dings on a number of other tasks; in contrast, wewill use our trained sentence-level RNN languagemodel directly on the task its objective functionoptimizes: predicting a sentence?s successor.3 Methodology3.1 Narrative Cloze EvaluationThe evaluation of inference-focused statisticalscript systems is not straightforward.
Cham-bers and Jurafsky (2008) introduced the NarrativeCloze evaluation, in which a single event is heldout from a document and systems are judged bythe ability to infer this held-out event given theremaining events.
This evaluation has been usedby a number of published script systems (Cham-bers and Jurafsky, 2009; Jans et al, 2012; Pichottaand Mooney, 2014; Rudinger et al, 2015).
Thisautomated evaluation measures systems?
ability tomodel and predict events as they co-occur in text.The exact definition of the Narrative Clozeevaluation depends on the formulation of eventsused in a script system.
For example, Cham-bers and Jurafsky (2008), Jans et al (2012), andRudinger et al (2015) evaluate inference of held-out (verb, dependency) pairs from documents; Pi-chotta and Mooney (2014) evaluate inference of281verbs with coreference information about multi-ple arguments; and Pichotta and Mooney (2016)evaluate inference of verbs with noun informa-tion about multiple arguments.
In order to gatherhuman judgments of inference quality, the latteralso learn an encoder-decoder LSTM network fortransforming verbs and noun arguments into En-glish text to present to annotators for evaluation.We evaluate instead on the task of directly in-ferring sequences of words.
That is, instead ofdefining the Narrative Cloze to be the evaluationof predictions of held-out events, we define thetask to be the evaluation of predictions of held-outtext; in this setup, predictions need not be medi-ated by noisy, automatically-extracted events.
Toevaluate inferred text against gold standard text,we argue that the BLEU metric (Papineni et al,2002), commonly used to evaluate Statistical Ma-chine Translation systems, is a natural evaluationmetric.
It is an n-gram-level analog to the event-level Narrative Cloze evaluation: whereas the Nar-rative Cloze evaluates a system on its ability to re-construct events as they occur in documents, BLEUevaluates a system on how well it reconstructs then-grams.This evaluation takes some inspiration from theevaluation of neural encoder-decoder translationmodels (Sutskever et al, 2014; Bahdanau et al,2015), which use similar architectures for the taskof Machine Translation.
That is, the task wepresent can be thought of as ?translating?
a sen-tence into its successor.
While we do not claimthat BLEU is necessarily the optimal way of eval-uating text-level inferences, but we do claim thatit is a natural ngram-level analog to the NarrativeCloze task on events.If a model infers text, we may also evaluate it onthe task of inferring events by automatically ex-tracting structured events from its output text (inthe same way as events are extracted from naturaltext).
This allows us to compare directly to previ-ous event-based models on the task they are opti-mized for, namely, predicting structured events.3.2 ModelsStatistical script systems take a sequence of eventsfrom a document and infer additional events thatare statistically probable.
Exactly what constitutesan event varies: it may be a (verb, dependency)pair inferred as relating to a particular discourseentity (Chambers and Jurafsky, 2008; Rudinger etal., 2015), a simplex verb (Chambers and Juraf-sky, 2009; Orr et al, 2014), or a verb with multi-ple arguments (Pichotta and Mooney, 2014).
Inthe present work, we adopt a representation ofevents as verbs with multiple arguments (Balasub-ramanian et al, 2013; Pichotta and Mooney, 2014;Modi and Titov, 2014).
Formally, we define anevent to be a variadic tuple (v, s, o, p?
), where vis a verb, s is a noun standing in subject relationto v, o is a noun standing as a direct object to v,and p?denotes an arbitrary number of (pobj, prep)pairs, with prep a preposition and pobj a noun re-lated to the verb v via the preposition prep.1Anyargument except v may be null, indicating no nounfills that slot.
For example, the textNapoleon sent the letter to Josephinewould be represented by the event (sent,Napoleon, letter, (Josephine, to)).
We rep-resent arguments by their grammatical headwords.We evaluate on a number of different neuralmodels which differ in their input and output.
Allmodels are LSTM-based encoder-decoder models.These models encode a sentence (either its eventsor text) into a learned hidden vector state and then,subsequently, decode that vector into its successorsentence (either its events or its text).Our general system architecture is as follows.At each timestep t, the input token is repre-sented as a learned 100-dimensional embeddingvector (learned jointly with the other parametersof the model), such that predictively similar wordsshould get similar embeddings.
This embedding isfed as input to the LSTM unit (that is, it will be thevector xtin Section 2.2, the input to the LSTM).The output of the LSTM unit (called ztin Section2.2) is then fed to a softmax layer via a learnedlinear transformation.During the encoding phase the network is nottrained to produce any output.
During the decod-ing phase the output is a one-hot representationof the subsequent timestep?s input token (that is,with a V -word vocabulary, the output will be aV -dimensional vector with one 1 and V ?
1 ze-ros).
In this way, the network is trained to con-sume an entire input sequence and, as a secondstep, iteratively output the subsequent timestep?s1This is essentially the event representation of Pichottaand Mooney (2016), but whereas they limited events to hav-ing a single prepositional phrase, we allow an arbitrary num-ber, and we do not lemmatize words.282Hello?</S>?<S>?LSTM<GEN><S><S>GoodbyeGoodbye</S></S>?InputHidden (zt)Output (yt)Encoding DecodingLSTM LSTM LSTM LSTM LSTM LSTMEmbedding (xt)Figure 2: Encoder-Decoder setup predicting the text ?Goodbye?
from ?Hello?input, which allows the prediction of full outputsequences.
This setup is pictured diagrammati-cally in Figure 2, which gives an example of in-put and output sequence for a token-level encoder-decoder model, encoding the sentence ?Hello .
?and decoding the successor sentence ?Goodbye.?
Note that we add beginning-of-sequence andend-of-sequence pseudo-tokens to sentences.
Thisformulation allows a system to be trained whichcan encode a sentence and then infer a successorsentence by iteratively outputting next-input pre-dictions until the </S> end-of-sentence pseudo-token is predicted.
We use different LSTMs forencoding and decoding, as the dynamics of the twostages need not be identical.We notate the different systems as follows.
Lets1be the input sentence and s2its successor sen-tence.
Let t1denote the sequence of raw tokens ins1, and t2the tokens of s2.
Further, let e1and e2be the sequence of structured events occurring ins1and s2, respectively (described in more detail inSection 4.1), and let e2[0] denote the first event ofe2.
The different systems we compare are namedsystematically as follows:?
The system t1 t2is trained to encode asentence?s tokens and decode its successor?stokens.?
The system e1 e2is trained to encode asentence?s events and decode its successor?sevents.?
The system e1 e2 t2is trained to en-code a sentence?s events, decode its succes-sor?s events, and then encode the latter andsubsequently decode the successor?s text.We will not explicitly enumerate all systems, butother systems are defined analogously, with theschema X  Y describing a system which istrained to encode X and subsequently decode Y ,and X  Y  Z indicating a system which istrained to encode X , decode Y , and subsequentlyencode Y and decode Z.
Note that in a systemX  Y  Z, only X is provided as input.We also present results for systems of the formXa Y , which signifies that the system is trainedto decode Y from X with the addition of an atten-tion mechanism.
We use the attention mechanismof Vinyals et al (2015).
In short, these modelshave additional parameters which can learn softalignments between positions of encoded inputsand positions in decoded outputs.
Attention mech-anisms have recently been shown to be quite em-pirically valuable in many complex sequence pre-diction tasks.
For more details on the model, seeVinyals et al (2015).Figure 3 gives a diagrammatic representationof the different system setups.
Text systems in-fer successor text and, optionally, parse that textand extract events from it; event sequences infersuccessor events and, optionally, expand inferredevents into text.Note that the system t1 t2, in which boththe encoding and decoding steps operate on rawtext, is essentially a one-directional version of theskip-thought system of Kiros et al (2015).2Fur-ther, the system e1 e2 t2, which is trained totake a sentence?s event sequence as input, predictits successor?s events, and then predict its succes-sor?s words, is comparable to the event inferencesystem of Pichotta and Mooney (2016).
They usean LSTM sequence model of events in sequence2The system of Kiros et al (2015), in addition to beingtrained to predict the next sentence, also contains a backward-directional RNN trained to predict a sentence?s predecessor;we condition only on previous text.
Kiros et al (2015) alsouse Gated Recurrent Units instead of LSTM.283tenFRdedeFRde?TKedogcKDVedWKecDW?
?TKecDWUDnDZDy?
UDnBDZDycDWtepDUVeeenFRdedeFRdeetenFRdedeFRdecKDVeddogcDW UDnBDZDycDW ?TKecDWUDnDZDy?7ext UepUeVentDtiRnEYent UepUeVentDtiRnFigure 3: Different system setups for modeling the two-sentence sequence ?The dog chased the cat.
?followed by ?The cat ran away.?
The gray components inside dotted boxes are only present in somesystems.for event inference, and optionally transform in-ferred events to text using another LSTM; we, onthe other hand, use an encoder/decoder setup toinfer text directly.4 Evaluation4.1 Experimental DetailsWe train a number of LSTM encoder-decoder net-works which vary in their input and output.
Mod-els are trained on English Language Wikipedia,with 1% of the documents held out as a validationset.
Our test set consists of 10,000 unseen sen-tences (from articles in neither the training nor val-idation set).
We train models with batch stochas-tic gradient descent with momentum, minimizingthe cross-entropy error of output predictions.
Allmodels are implemented in TensorFlow (Abadi etal., 2015).
We use a vocabulary of the 50,000most frequent tokens, replacing all other tokenswith an out-of-vocabulary pseudo-token.
Learnedword embeddings are 100-dimensional, and the la-tent LSTM vector is 500-dimensional.
To extractevents from text, we use the Stanford DependencyParser (De Marneffe et al, 2006; Socher et al,2013).
We use the Moses toolkit (Koehn et al,2007) to calculate BLEU.3We evaluate the task of predicting held-out textwith three metrics.
The first metric is BLEU, whichis standard BLEU (the geometric mean of modified1-, 2-, 3-, and 4-gram precision against a gold stan-dard, multiplied by a brevity penalty which pe-nalizes short candidates).
The second metric wepresent, BLEU-BP, is BLEU without the brevity3Via the script multi-bleu.pl.penalty: in the task of predicting successor sen-tences, depending on predictions?
end use, on-topic brevity is not necessarily undesirable.
Eval-uations are over top system inferences (that is, de-coding is done by taking the argmax).
Finally, wealso present values for unigram precision (1G P),one of the components of BLEU.We also evaluate on the task of predicting held-out verb-argument events, either directly or via in-ferred text.
We use two evaluation metrics for thistask.
First, the Accuracy metric measures the per-centage of a system?s most confident guesses thatare totally correct.
That is, for each held-out event,a system makes its single most confident guess forthat event, and we calculate the total percentage ofsuch guesses which are totally correct.
Some au-thors (e.g.
Jans et al (2012), Pichotta and Mooney(2016)) present results on the ?Recall at k?
met-ric, judging gold-standard recall against a list oftop k event inferences; this metric is equivalent to?Recall at 1.?
This is quite a stringent metric, as aninference is only counted correct if the verb and allarguments are correct.
To relax this requirement,we also present results on what we call the PartialCredit metric, which is the percentage of held-outevent components identical to the respective com-ponents in a system?s top inference.44.2 Experimental EvaluationTable 1 gives the results of evaluating predictedsuccessor sentence text against the gold standardusing BLEU.
The baseline system t1 t1sim-4This metric was used in Pichotta and Mooney (2014),but there it was called Accuracy.
In the present work, we use?accuracy?
only to mean Recall at 1.284System BLEU BLEU-BP 1G Pt1 t11.88 1.88 22.6e1 e2 t20.34 0.66 19.9e1a e2 t20.30 0.39 15.8t1 t25.20 7.84 30.9t1a t24.68 8.09 32.2Table 1: Successor text predictions evaluated withBLEU.ply reproduces the input sentence as its own suc-cessor.5Below this are systems which makepredictions from event information, with systemswhich make predictions from raw text under-neath.
Transformations writtenXa Y are, recall,encoder-decoder LSTMs with attention.Note, first, that the text-level models outperformother models on BLEU.
In particular, the two-stepmodel e1 e2 t2(and comparable model withattention) which first predicts successor events andthen, as a separate step, expands these events intotext, performs quite poorly.
This is perhaps due tothe fact that the translation from text to events islossy, so reconstructing raw sentence tokens is notstraightforward.The BLEU-BP scores, which are BLEU withoutthe brevity penalty, are noticeably higher in thetext-level models than the raw BLEU scores.
Thisis in part because these models seem to produceshorter sentences, as illustrated below in section4.4.The attention mechanism does not obviouslybenefit either text or event level predictionencoder-decoder models.
This could be becausethere is not an obvious alignment structure be-tween contiguous spans of raw text (or events) innatural documents.These results provide evidence that, if the Nar-rative Cloze task is defined to evaluate predictionof held-out text from a document, then sentence-level RNN language models provide superior per-formance to RNN models operating at the eventlevel.
In other words, linguistic pre-processingdoes not obviously benefit encoder-decoder mod-els trained to predict succeeding text.Table 2 gives results on the task of predictingthe next verb with its nominal arguments; that is,whereas Table 1 gave results on a text analog to theNarrative Cloze evaluation (BLEU), Table 2 gives5?t1 t1?
is minor abuse of notation, as the system is notan encoder/decoder but a simple identity function.System Accuracy Partial CreditMost common 0.2 26.5e1 e2[0] 2.3 26.7e1a e2[0] 2.2 25.6t1 t2 e2[0] 2.0 30.3t1a t2 e2[0] 2.0 27.7Table 2: Next event prediction accuracy (numbersare percentages: maximum value is 100).results on the verb-with-arguments prediction ver-sion.
In the t1 t2 e2[0] system (and thecomparable system with attention), events are ex-tracted from automatically generated text by pars-ing output text and applying the same event ex-tractor to this parse used to extract events fromraw text.6The row labeled Most common in Ta-ble 2 gives performance for the baseline systemwhich always guesses the most common event inthe training set.The LSTM models trained to directly predictevents are roughly comparable to systems whichoperate on raw text, performing slightly worse onaccuracy and slightly better when taking partialcredit into account.
As with the previous com-parisons with BLEU, the attention mechanism doesnot provide an obvious improvement when decod-ing inferences, perhaps, again, because the eventinference problem lacks a clear alignment struc-ture.These systems infer their most probable guessesof e2[0], the first event in the succeeding sentence.In order for a system prediction to be counted ascorrect, it must have the correct strings for gram-matical head words of all components of the cor-rect event.
Note also that we judge only against asystem?s single most confident prediction (as op-posed to some prior work (Jans et al, 2012; Pi-chotta and Mooney, 2014) which takes the topk predictions?the numbers presented here aretherefore noticeably lower).
We do this mainlyfor computational reasons: namely, a beam searchover a full sentence?s text would be quite compu-tationally expensive.4.3 Adding Additional ContextThe results given above are for systems which en-code information about one sentence and decode6This is also a minor abuse of notation, as the secondtransformation uses a statistical parser rather than an en-coder/decoder.285information about its successor.
This is withinthe spirit of the skip-gram system of Kiros et al(2015), but we may wish to condition on moreof the document.
To investigate this, we per-form an experiment varying the number of previ-ous sentences input during the encoding step oft1 t2text-level models without attention.
Wetrain three different models, which take either one,three, or five sentences as input, respectively, andare trained to output the successor sentence.Num Prev Sents BLEU BLEU-BP 1G P1 5.80 8.59 29.43 5.82 9.35 31.25 6.83 6.83 21.4Table 3: Varying the amount of context in text-level models.
?Num Prev Sents?
is the number ofprevious sentences supplied during encoding.Table 3 gives the results of running these mod-els on 10,000 sentences from the validation set.
Ascan be seen, in the training setup we investigate,more additional context sentences have a mixedeffect, depending on the metric.
This is perhapsdue in part to the fact that we kept hyperparam-eters fixed between experiments, and a differenthyperparameter regime would benefit predictionsfrom longer input sequences.
More investigationcould prove fruitful.4.4 Qualitative AnalysisFigure 4 gives some example automatic next-sentence text predictions, along with the input sen-tence and the gold-standard next sentence.
Notethat gold-standard successor sentences frequentlyintroduce new details not obviously inferrablefrom previous text.
Top system predictions, onthe other hand, are frequently fairly short.
Thisis likely due part to the fact that the cross-entropyloss does not directly penalize short sentences andpart to the fact that many details in gold-standardsuccessor text are inherently difficult to predict.4.5 DiscussionThe general low magnitude of the BLEU scorespresented in Table 1, especially in comparison tothe scores typically reported in Machine Trans-lation results, indicates the difficulty of the task.In open-domain text, a sentence is typically notstraightforwardly predictable from preceding text;if it were, it would likely not be stated.On the task of verb-argument prediction in Ta-ble 2, the difference between t1 t2and e1e2[0] is fairly marginal.
This raises the generalquestion of how much explicit syntactic analysisis required for the task of event inference, partic-ularly in the encoder/decoder setup.
These resultsprovide evidence that a sentence-level RNN lan-guage model which operates on raw tokens canpredict what comes next in a document as well ornearly as well as an event-mediated script model.5 Future WorkThere are a number of further extensions to thiswork.
First, in this work (and, more generally,Neural Machine Translation research), thoughgenerated text is evaluated using BLEU, systemsare optimized for per-token cross-entropy error,which is a different objective (Luong et al (2016)give an example of a system which improvescross-entropy error but reduces BLEU score in theNeural Machine Translation context).
Finding dif-ferentiable objective functions that more directlytarget more complex evaluation metrics like BLEUis an interesting future research direction.Relatedly, though we argue that BLEU is anatural token-sequence-level analog to the verb-argument formulation of the Narrative Cloze task,it is not obviously the best metric for evaluat-ing inferences of text, and comparing these auto-mated metrics with human judgments is an im-portant direction of future work.
Pichotta andMooney (2016) present results on crowdsourcedhuman evaluation of script inferences that couldbe repeated for our RNN models.Though we focus here on forward-directionmodels predicting successor sentences, bidirec-tional encoder-decoder models, which predict sen-tences from both previous and subsequent text, areanother interesting future research direction.6 Related WorkThe use of scripts in AI dates back to the 1970s(Minsky, 1974; Schank and Abelson, 1977); inthis conception, scripts were composed of com-plex events with no probabilistic semantics, whichwere difficult to learn automatically.
In recentyears, a growing body of research has investigatedlearning probabilistic co-occurrence models withsimpler events.
Chambers and Jurafsky (2008)propose a model of co-occurrence of (verb, de-pendency) pairs, which can be used to infer such286Input: As of October 1 , 2008 , ?OOV?
changed its company name to Panasonic Corporation.Gold: ?OOV?
products that were branded ?National?
in Japan are currently marketed under the ?Pana-sonic?
brand.Predicted: The company?s name is now ?OOV?.Input: White died two days after Curly Bill shot him.Gold: Before dying, White testified that he thought the pistol had accidentally discharged and that hedid not believe that Curly Bill shot him on purpose.Predicted: He was buried at ?OOV?
Cemetery.Input: The foundation stone was laid in 1867.Gold: The members of the predominantly Irish working class parish managed to save ?700 towardsconstruction, a large sum at the time.Predicted: The ?OOV?
was founded in the early 20th century.Input: Soldiers arrive to tell him that ?OOV?
has been seen in camp and they call for his capture anddeath.Gold: ?OOV?
agrees .Predicted: ?OOV?
is killed by the ?OOV?.Figure 4: Sample next-sentence text predictions.
?OOV?
is the out-of-vocabulary pseudo-token, whichfrequently replaces proper names.pairs from documents; Jans et al (2012) give asuperior model in the same general framework.Chambers and Jurafsky (2009) give a method ofgeneralizing from single sequences of pair eventsto collections of such sequences.
Rudinger et al(2015) apply a discriminative language model tothe (verb, dependency) sequence modeling task,raising the question of to what extent event in-ference can be performed with standard languagemodels applied to event sequences.
Pichotta andMooney (2014) describe a method of learning aco-occurrence based model of verbs with multiplecoreference-based entity arguments.There is a body of related work focused onlearning models of co-occurring events to au-tomatically induce templates of complex eventscomprising multiple verbs and arguments, aimedultimately at maximizing coherency of templates(Chambers, 2013; Cheung et al, 2013; Balasub-ramanian et al, 2013).
Ferraro and Van Durme(2016) give a model integrating various levels ofevent information of increasing abstraction, evalu-ating both on coherence of induced templates andlog-likelihood of predictions of held-out events.McIntyre and Lapata (2010) describe a system thatlearns a model of co-occurring events and uses thismodel to automatically generate stories via a Ge-netic Algorithm.There have been a number of recent publishedneural models for various event- and discourse-related tasks.
Pichotta and Mooney (2016) showthat an LSTM event sequence model outper-forms previous co-occurrence methods for pre-dicting verbs with arguments.
Granroth-Wildingand Clark (2016) describe a feedforward neu-ral network which composes verbs and argu-ments into low-dimensional vectors, evaluating ona multiple-choice version of the Narrative Clozetask.
Modi and Titov (2014) describe a feedfor-ward network which is trained to predict event or-derings.
Kiros et al (2015) give a method of em-bedding sentences in low-dimensional space suchthat embeddings are predictive of neighboring sen-tences.
Li et al (2014) and Ji and Eisenstein(2015), use RNNs for discourse parsing; Liu etal.
(2016) use a Convolutional Neural Network forimplicit discourse relation classification.7 ConclusionWe have given what we believe to be the firstsystematic evaluation of sentence-level RNN lan-guage models on the task of predicting held-outdocument text.
We have found that models oper-ating on raw text perform roughly comparably toidentical models operating on predicate-argumentevent structures when predicting the latter, and thattext models provide superior predictions of rawtext.
This provides evidence that, for the task ofheld-out event prediction, encoder/decoder mod-els mediated by automatically extracted eventsmay not be learning appreciably more structurethan systems trained on raw tokens alone.AcknowledgmentsThanks to Stephen Roller, Amelia Harrison, andthe UT NLP group for their help and feedback.Thanks also to the anonymous reviewers for theirvery helpful suggestions.
This research was sup-ported in part by the DARPA DEFT program un-der AFRL grant FA8750-13-2-0026.287ReferencesMart?
?n Abadi, Ashish Agarwal, Paul Barham, EugeneBrevdo, Zhifeng Chen, Craig Citro, Greg S. Cor-rado, Andy Davis, Jeffrey Dean, Matthieu Devin,Sanjay Ghemawat, Ian Goodfellow, Andrew Harp,Geoffrey Irving, Michael Isard, Yangqing Jia, RafalJozefowicz, Lukasz Kaiser, Manjunath Kudlur, JoshLevenberg, Dan Man?e, Rajat Monga, Sherry Moore,Derek Murray, Chris Olah, Mike Schuster, JonathonShlens, Benoit Steiner, Ilya Sutskever, Kunal Tal-war, Paul Tucker, Vincent Vanhoucke, Vijay Vasude-van, Fernanda Vi?egas, Oriol Vinyals, Pete Warden,Martin Wattenberg, Martin Wicke, Yuan Yu, and Xi-aoqiang Zheng.
2015.
TensorFlow: Large-scalemachine learning on heterogeneous systems.
Soft-ware available from tensorflow.org.Dzmitry Bahdanau, KyungHyun Cho, and YoshuaBengio.
2015.
Neural machine translation byjointly learning to align and translate.
In Proceed-ings of the 2015 International Conference on Learn-ing Representations (ICLR 2015).Niranjan Balasubramanian, Stephen Soderland,Mausam, and Oren Etzioni.
2013.
Generatingcoherent event schemas at scale.
In Proceedingsof the 2013 Conference on Empirical Methods inNatural Language Processing (EMNLP-2013).Nathanael Chambers and Daniel Jurafsky.
2008.
Un-supervised learning of narrative event chains.
InProceedings of the 46th Annual Meeting of the As-sociation for Computational Linguistics (ACL-08),pages 789?797.Nathanael Chambers and Dan Jurafsky.
2009.
Unsu-pervised learning of narrative schemas and their par-ticipants.
In Proceedings of the 47th Annual Meet-ing of the Association for Computational Linguistics(ACL-09), pages 602?610.Nathanael Chambers.
2013.
Event schema induc-tion with a probabilistic entity-driven model.
InProceedings of the 2013 Conference on EmpiricalMethods in Natural Language Processing (EMNLP-2013).Jackie Chi Kit Cheung, Hoifung Poon, and Lucy Van-derwende.
2013.
Probabilistic frame induction.
InProceedings of the 2013 Conference of the NorthAmerican Chapter of the Association for Computa-tional Linguistics: Human Language Technologies(NAACL-13).Junyoung Chung, Caglar Gulcehre, KyungHyun Cho,and Yoshua Bengio.
2014.
Empirical evaluation ofgated recurrent neural networks on sequence model-ing.
In NIPS Deep Learning Workshop.Marie-Catherine De Marneffe, Bill MacCartney, andChristopher D. Manning.
2006.
Generating typeddependency parses from phrase structure parses.
InProceedings of the 5th International Conference onLanguage Resources & Evaluation (LREC-2006),volume 6, pages 449?454.Jeffrey L. Elman.
1990.
Finding structure in time.Cognitive Science, 14:179?211.Francis Ferraro and Benjamin Van Durme.
2016.
Aunified Bayesian model of scripts, frames and lan-guage.
In Proceedings of the 30th AAAI Conferenceon Artificial Intelligence (AAAI-16).Mark Granroth-Wilding and Stephen Clark.
2016.What happens next?
Event prediction using a com-positional neural network model.
In Proceedings ofthe 30th AAAI Conference on Artificial Intelligence(AAAI-16).Karl Moritz Hermann, Tom?a?s Ko?cisk`y, EdwardGrefenstette, Lasse Espeholt, Will Kay, Mustafa Su-leyman, and Phil Blunsom.
2015.
Teaching ma-chines to read and comprehend.
In Proceedings ofthe 29th Annual Conference on Neural InformationProcessing Systems (NIPS-15).Sepp Hochreiter and J?urgen Schmidhuber.
1997.Long short-term memory.
Neural Computation,9(8):1735?1780.Bram Jans, Steven Bethard, Ivan Vuli?c, andMarie Francine Moens.
2012.
Skip n-gramsand ranking functions for predicting script events.In Proceedings of the 13th Conference of the Euro-pean Chapter of the Association for ComputationalLinguistics (EACL-12), pages 336?344.Yangfeng Ji and Jacob Eisenstein.
2015.
One vectoris not enough: Entity-augmented distributional se-mantics for discourse relations.
Transactions of theAssociation for Computational Linguistics (TACL).Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, NoamShazeer, and Yonghui Wu.
2016.
Exploringthe limits of language modeling.
arXiv preprintarXiv:1602.02410.Ryan Kiros, Yukun Zhu, Ruslan Salakhutdinov,Richard S. Zemel, Antonio Torralba, Raquel Urta-sun, and Sanja Fidler.
2015.
Skip-thought vectors.In Proceedings of the 29th Annual Conference onNeural Information Processing Systems (NIPS-15).Philipp Koehn, Hieu Hoang, Alexandra Birch, ChrisCallison-Burch, Marcello Federico, Nicola Bertoldi,Brooke Cowan, Wade Shen, Christine Moran,Richard Zens, Chris Dyer, Ondrej Bojar, AlexandraConstantin, and Evan Herbst.
2007.
Moses: Opensource toolkit for statistical machine translation.
InProceedings of the 45th Annual Meeting of the As-sociation for Computational Linguistics (ACL-07)Companion Volume: Proceedings of the Demo andPoster Sessions, pages 177?180, Prague, Czech Re-public.Jiwei Li, Rumeng Li, and Eduard Hovy.
2014.
Recur-sive deep models for discourse parsing.
In Proceed-ings of the 2014 Conference on Empirical Methodsin Natural Language Processing (EMNLP), pages2061?2069, October.288Yang Liu, Sujian Li, Xiaodong Zhang, and ZhifangSui.
2016.
Implicit discourse relation classificationvia multi-task neural networks.
In Proceedings ofthe 30th AAAI Conference on Artificial Intelligence(AAAI-16).Minh-Thang Luong, Quoc V. Le, Ilya Sutskever, OriolVinyals, and Lukasz Kaiser.
2016.
Multi-task se-quence to sequence learning.
In Proceedings of the4th International Conference on Learning Represen-tations (ICLR-16).Neil McIntyre and Mirella Lapata.
2010.
Plot induc-tion and evolutionary search for story generation.
InProceedings of the 48th Annual Meeting of the As-sociation for Computational Linguistics (ACL-10),pages 1562?1572.Tomas Mikolov, Anoop Deoras, Stefan Kombrink,Lukas Burget, and Jan Cernock`y.
2011.
Empir-ical evaluation and combination of advanced lan-guage modeling techniques.
In Proceedings of the12th Annual Conference of the International SpeechCommunication Association 2011 (INTERSPEECH2011), pages 605?608.Marvin Minsky.
1974.
A framework for representingknowledge.
Technical report, MIT-AI Laboratory.Ashutosh Modi and Ivan Titov.
2014.
Inducing neu-ral models of script knowledge.
In Proceedings ofthe Eighteenth Conference on Computational Nat-ural Language Learning (CoNLL-2014), Baltimore,MD, USA.J Walker Orr, Prasad Tadepalli, Janardhan Rao Doppa,Xiaoli Fern, and Thomas G Dietterich.
2014.Learning scripts as Hidden Markov Models.
In Pro-ceedings of the 28th AAAI Conference on ArtificialIntelligence (AAAI-14).Kishore Papineni, Salim Roukos, Todd Ward, and Wei-Jing Zhu.
2002.
BLEU: a method for automaticevaluation of machine translation.
In Proceedings ofthe 40th Annual Meeting of the Association for Com-putational Linguistics (ACL-02), pages 311?318.Karl Pichotta and Raymond J. Mooney.
2014.
Statis-tical script learning with multi-argument events.
InProceedings of the 14th Conference of the EuropeanChapter of the Association for Computational Lin-guistics (EACL 2014), pages 220?229.Karl Pichotta and Raymond J. Mooney.
2016.
Learn-ing statistical scripts with LSTM recurrent neuralnetworks.
In Proceedings of the 30th AAAI Con-ference on Artificial Intelligence (AAAI-16).Rachel Rudinger, Pushpendre Rastogi, Francis Ferraro,and Benjamin Van Durme.
2015.
Script inductionas language modeling.
In Proceedings of the 2015Conference on Empirical Methods in Natural Lan-guage Processing (EMNLP-15).Roger C. Schank and Robert P. Abelson.
1977.
Scripts,Plans, Goals and Understanding: An Inquiry intoHuman Knowledge Structures.
Lawrence Erlbaumand Associates.Iulian V. Serban, Alessandro Sordoni, Yoshua Bengio,Aaron Courville, and Joelle Pineau.
2016.
Buildingend-to-end dialogue systems using generative hier-archical neural network models.
In Proceedings ofthe 30th AAAI Conference on Artificial Intelligence(AAAI-16).Richard Socher, John Bauer, Christopher D. Manning,and Andrew Y. Ng.
2013.
Parsing with compo-sitional vector grammars.
In Proceedings of the51st Annual Meeting of the Association for Compu-tational Linguistics (ACL-13).Ilya Sutskever, Oriol Vinyals, and Quoc V. Le.
2014.Sequence to sequence learning with neural net-works.
In Proceedings of the 28th Annual Con-ference on Neural Information Processing Systems(NIPS-14), pages 3104?3112.Oriol Vinyals, ?ukasz Kaiser, Terry Koo, Slav Petrov,Ilya Sutskever, and Geoffrey Hinton.
2015.
Gram-mar as a foreign language.
In Proceedings of the29th Annual Conference on Neural Information Pro-cessing Systems (NIPS-15), pages 2755?2763.A Supplemental MaterialOur Wikipedia dump from which the training, de-velopment, and test sets are constructed is fromJan 2, 2014.
We parse text using version 3.3.1 ofthe Stanford CoreNLP system.
We use a vocabconsisting of the 50,000 most common tokens, re-placing all others with an Out-of-vocabulary pseu-dotoken.
We train using batch stochastic gradi-ent descent with momentum with a batch size of10 sequences, using an initial learning rate of 0.1,damping the learning rate by 0.99 any time theprevious hundred updates?
average test error isgreater than any of the average losses in the previ-ous ten groups of hundred updates.
Our momen-tum parameter is 0.95.
Our embedding vectors are100-dimensional, and our LSTM hidden state is500-dimensional.
We train all models for 300kbatch updates (with the exception of the modelscompared in ?4.3, all of which we train for 150kbatch updates, as training is appreciably slowerwith longer input sequences).
Training takes ap-proximately 36 hours on an NVIDIA Titan BlackGPU.289
