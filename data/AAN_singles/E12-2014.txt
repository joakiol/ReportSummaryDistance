Proceedings of the 13th Conference of the European Chapter of the Association for Computational Linguistics, pages 69?72,Avignon, France, April 23 - 27 2012. c?2012 Association for Computational LinguisticsA Support Platform for Event Detection using Social IntelligenceTimothy Baldwin, Paul Cook, Bo Han, Aaron Harwood,Shanika Karunasekera and Masud MoshtaghiDepartment of Computing and Information SystemsThe University of MelbourneVictoria 3010, AustraliaAbstractThis paper describes a system designedto support event detection over Twitter.The system operates by querying the datastream with a user-specified set of key-words, filtering out non-English messages,and probabilistically geolocating each mes-sage.
The user can dynamically set a proba-bility threshold over the geolocation predic-tions, and also the time interval to presentdata for.1 IntroductionSocial media and micro-blogs have entered themainstream of society as a means for individu-als to stay in touch with friends, for companiesto market products and services, and for agen-cies to make official announcements.
The attrac-tions of social media include their reach (eithertargeted within a social network or broadly acrossa large user base), ability to selectively pub-lish/filter information (selecting to publish cer-tain information publicly or privately to certaingroups, and selecting which users to follow),and real-time nature (information ?push?
happensimmediately at a scale unachievable with, e.g.,email).
The serendipitous takeoff in mobile de-vices and widespread support for social mediaacross a range of devices, have been significantcontributors to the popularity and utility of socialmedia.While much of the content on micro-blogs de-scribes personal trivialities, there is also a vein ofhigh-value content ripe for mining.
As such, or-ganisations are increasingly targeting micro-blogsfor monitoring purposes, whether it is to gaugeproduct acceptance, detect events such as trafficjams, or track complex unfolding events such asnatural disasters.In this work, we present a system intendedto support real-time analysis and geolocation ofevents based on Twitter.
Our system consists ofthe following steps: (1) user selection of key-words for querying Twitter; (2) preprocessing ofthe returned queries to rapidly filter out messagesnot in a pre-selected set of languages, and option-ally normalise language content; (3) probabilisticgeolocation of messages; and (4) rendering of thedata on a zoomable map via a purpose-built webinterface, with facility for rich user interaction.Our starting in the development of this systemwas the Ushahidi platform,1 which has high up-take for social media surveillance and informationdissemination purposes across a range of organ-isations.
The reason for us choosing to imple-ment our own platform was: (a) ease of integra-tion of back-end processing modules; (b) extensi-bility, e.g.
to visualise probabilities of geolocationpredictions, and allow for dynamic thresholding;(c) code maintainability; and (d) greater loggingfacility, to better capture user interactions.2 Example System UsageA typical user session begins with the user spec-ifying a disjunctive set of keywords, which areused as the basis for a query to the TwitterStreaming API.2 Messages which match the queryare dynamically rendered on an OpenStreetMapmash-up, indexed based on (grid cell-based) loca-tion.
When the user clicks on a location marker,they are presented with a pop-up list of messagesmatching the location.
The user can manipulate atime slider to alter the time period over which topresent results (e.g.
in the last 10 minutes, or over1http://ushahidi.com/2https://dev.twitter.com/docs/streaming-api69Figure 1: A screenshot of the system, with a pop-up presentation of the messages at the indicated location.the last hour), to gain a better sense of report re-cency.
The user can further adjust the threshold ofthe prediction accuracy for the probabilistic mes-sage locations to view a smaller number of mes-sages with higher-confidence locations, or moremessages that have lower-confidence locations.A screenshot of the system for the followingquery is presented in Figure 1:study studying exam ?end of semester?examination test tests school exams uni-versity pass fail ?end of term?
snowsnowy snowdrift storm blizzard flurryflurries ice icy cold chilly freeze freez-ing frigid winter3 System DetailsThe system is composed of a front-end, whichprovides a GUI interface for query parameter in-put, and a back-end, which computes a result foreach query.
The front-end submits the query pa-rameters to the back-end via a servlet.
Sincethe result for the query is time-dependent, theback-end regularly re-evaluates the query, gener-ating an up-to-date result at regular intervals.
Thefront-end regularly polls the back-end, via anotherservlet, for the latest results that match its submit-ted query.
In this way, the front-end and back-endare loosely coupled and asynchronous.Below, we describe details of the various mod-ules of the system.3.1 Twitter QueryingWhen the user inputs a set of keywords, this is is-sued as a disjunctive query to the Twitter Stream-ing API, which returns a streamed set of resultsin JSON format.
The results are parsed, andpiped through to the language filtering, lexicalnormalisation, and geolocation modules, and fi-nally stored in a flat file, which the GUI interactswith.3.2 Language FilteringFor language identification, we use langid.py,a language identification toolkit developed atThe University of Melbourne (Lui and Baldwin,2011).3 langid.py combines a naive Bayesclassifier with cross-domain feature selection toprovide domain-independent language identifica-tion.
It is available under a FOSS license asa stand-alone module pre-trained over 97 lan-guages.
langid.py has been developed specif-ically to be able to keep pace with the speedof messages through the Twitter ?garden hose?feed on a single-CPU machine, making it par-ticularly attractive for this project.
Additionally,in an in-house evaluation over three separate cor-pora of Twitter data, we have found langid.pyto be overall more accurate than other state-of-the-art language identification systems such as3http://www.csse.unimelb.edu.au/research/lt/resources/langid70lang-detect4 and the Compact Language De-tector (CLD) from the Chrome browser.5langid.py returns a monolingual predictionof the language content of a given message, and isused to filter out all non-English tweets.3.3 Lexical NormalisationThe prevalence of noisy tokens in microblogs(e.g.
yr ?your?
and soooo ?so?)
potentially hin-ders the readability of messages.
Approachesto lexical normalisation?i.e., replacing noisy to-kens by their standard forms in messages (e.g.replacing yr with your)?could potentially over-come this problem.
At present, lexical normali-sation is an optional plug-in for post-processingmessages.A further issue related to noisy tokens is thatit is possible that a relevant tweet might containa variant of a query term, but not that query termitself.
In future versions of the system we there-fore aim to use query expansion to generate noisyversions of query terms to retrieve additional rel-evant tweets.
We subsequently intend to performlexical normalisation to evaluate the precision ofthe returned data.The present lexical normalisation used by oursystem is the dictionary lookup method of Hanand Baldwin (2011) which normalises noisy to-kens only when the normalised form is knownwith high confidence (e.g.
you for u).
Ultimately,however, we are interested in performing context-sensitive lexical normalisation, based on a reim-plementation of the method of Han and Baldwin(2011).
This method will allow us to target awider variety of noisy tokens such as typos (e.g.earthquak ?earthquake?
), abbreviations (e.g.
lv?love?
), phonetic substitutions (e.g.
b4 ?before?
)and vowel lengthening (e.g.
goooood ?good?
).3.4 GeolocationA vital component of event detection is the de-termination of where the event is happening, e.g.to make sense of reports of traffic jams or floods.While Twitter supports device-based geotaggingof messages, less than 1% of messages have geo-tags (Cheng et al 2010).
One alternative is to re-turn the user-level registered location as the event4http://code.google.com/p/language-detection/5http://code.google.com/p/chromium-compact-language-detector/location, based on the assumption that most usersreport on events in their local domicile.
However,only about one quarter of users have registered lo-cations (Cheng et al 2010), and even when thereis a registered location, there?s no guarantee ofits quality.
A better solution would appear to bethe automatic prediction of the geolocation of themessage, along with a probabilistic indication ofthe prediction quality.6Geolocation prediction is based on the termsused in a given message, based on the assumptionthat it will contain explicit mentions of local placenames (e.g.
London) or use locally-identifiablelanguage (e.g.
jawn, which is characteristic of thePhiladelphia area).
By including a probabilitywith the prediction, we can give the system usercontrol over what level of noise they are preparedto see in the predictions, and hopefully filter outmessages where there is insufficient or conflictinggeolocating evidence.We formulate the geolocation prediction prob-lem as a multinomial naive Bayes classificationproblem, based on its speed and accuracy over thetask.
Given a message m, the task is to output themost probable location locmax ?
{loci}n1 for m.User-level classification can be performed basedon a similar formulation, by combining the totalset of messages from a given user into a singlecombined message.Given a message m, the task is to findargmaxi P (loci|m) where each loci is a grid cellon the map.
Based on Bayes?
theorem and stan-dard assumptions in the naive Bayes formulation,this is transformed into:argmaxiP (loci)v?jP (wj |loci)To avoid zero probabilities, we only consider to-kens that occur at least twice in the training data,and ignore unseen words.
A probability is calcu-lated for the most-probable location by normalis-ing over the scores for each loci.We employ the method of Ritter et al(2011) totokenise messages, and use token unigrams as fea-tures, including any hashtags, but ignoring twittermentions, URLs and purely numeric tokens.
We6Alternatively, we could consider a hybrid approach ofuser- and message-level geolocation prediction, especiallyfor users where we have sufficient training data, which weplan to incorporate into a future version of the system.71lllllll l ll l l10000 20000 30000 400000.150.200.250.300.350.40Feature NumberPredictionAccuracyFigure 2: Accuracy of geolocation prediction, forvarying numbers of features based on information gainalso experimented with included the named en-tity predictions of the Ritter et al(2011) methodinto our system, but found that it had no impacton predictive accuracy.
Finally, we apply featureselection to the data, based on information gain(Yang and Pedersen, 1997).To evaluate the geolocation prediction mod-ule, we use the user-level geolocation datasetof Cheng et al(2010), based on the lower 48states of the USA.
The user-level accuracy of ourmethod over this dataset, for varying numbers offeatures based on information gain, can be seenin Figure 2.
Based on these results, we select thetop 36,000 features in the deployed version of thesystem.In the deployed system, the geolocation pre-diction model is trained over one million geo-tagged messages collected over a 4 month pe-riod from July 2011, resolved to 0.1-degree lat-itude/longitude grid cells (covering the wholeglobe, excepting grid locations where there wereless than 8 messages).
For any geotagged mes-sages in the test data, we preserve the geotag andsimply set the probability of the prediction to 1.0.3.5 System InterfaceThe final output of the various pre-processingmodules is a list of tweets that match the query,in the form of an 8-tuple as follows:?
the Twitter user ID?
the Twitter message ID?
the geo-coordinates of the message (eitherprovided with the message, or automaticallypredicted)?
the probability of the predicated geolocation?
the text of the tweetIn addition to specifying a set of keywords fora given session, system users can dynamically se-lect regions on the map, either via the manualspecification of a bounding box, or zooming themap in and out.
They can additionally changethe time scale to display messages over, specifythe refresh interval and also adjust the thresholdon the geolocation predictions, to not render anymessages which have a predictive probability be-low the threshold.
The size of each place markeron the map is rendered proportional to the num-ber of messages at that location, and a square issuperimposed over the box to represent the max-imum predictive probability for a single messageat that location (to provide user feedback on boththe volume of predictions and the relative confi-dence of the system at a given location).ReferencesZhiyuan Cheng, James Caverlee, and Kyumin Lee.2010.
You are where you tweet: a content-based ap-proach to geo-locating twitter users.
In Proceedingsof the 19th ACM international conference on In-formation and knowledge management, CIKM ?10,pages 759?768, Toronto, ON, Canada.
ACM.Bo Han and Timothy Baldwin.
2011.
Lexical normal-isation of short text messages: Makn sens a #twit-ter.
In Proceedings of the 49th Annual Meetingof the Association for Computational Linguistics:Human Language Technologies (ACL HLT 2011),pages 368?378, Portland, USA.Marco Lui and Timothy Baldwin.
2011.
Cross-domain feature selection for language identification.In Proceedings of the 5th International Joint Con-ference on Natural Language Processing (IJCNLP2011), pages 553?561, Chiang Mai, Thailand.Alan Ritter, Sam Clark, Mausam, and Oren Etzioni.2011.
Named entity recognition in tweets: Anexperimental study.
In Proceedings of the 2011Conference on Empirical Methods in Natural Lan-guage Processing, pages 1524?1534, Edinburgh,Scotland, UK., July.
Association for ComputationalLinguistics.Yiming Yang and Jan O. Pedersen.
1997.
A compar-ative study on feature selection in text categoriza-tion.
In Proceedings of the Fourteenth InternationalConference on Machine Learning, ICML ?97, pages412?420, San Francisco, CA, USA.
Morgan Kauf-mann Publishers Inc.72
