Reasoning with Descriptions of Trees *J ames  RogersDept .
of  Comp.
& Info.
Sc ienceUn ivers i ty  of De lawareNewark ,  DE  19716, USAK.
V i jay -ShankerDept .
of Comp.
& Info.
Sc ienceUn ivers i ty  of De lawareNewark ,  DE  19716, USAABSTRACTIn this paper we introduce a logic for describingtrees which allows us to reason about both the par-ent and domination relationships.
The use of dom-ination has found a number of applications, uch asin deterministic parsers based on Description the-ory (Marcus, Hindle & Fleck, 1983), in a com-pact organization of the basic structures of Tree-Adjoining Grammars (Vijay-Shanker & Schabes,1992), and in a new characterization of the ad-joining operation that allows a clean integration ofTAGs into the unification-based framework (Vijay-Shanker, 1992) Our logic serves to formalize thereasoning on which these applications are based.1 Mot ivat ionMarcus, Hindle, and Fleck (1983) have intro-duced Description Theory (D-theory) which consid-ers the structure of trees in terms of the dominationrelation rather than the parent relation.
This formsthe basis of a class of deterministic parsers whichbuild partial descriptions of trees rather than thetrees themselves.
As noted in (Marcus, Hindle &Fleck, 1983; Marcus, 1987), this approach is capa-ble of maintaining Marcus' deterministic hypothe-sis (Marcus, 1980) in a number of cases where theoriginal deterministic parsers fail.A motivating example is the sentence: I drovemy aunt from Peoria's car.
The difficulty is that adeterministic parser must attach the NP "my aunt"to the tree it is constructing before evaluating thePP.
If this can only be done in terms of the par-ent relation, the NP will be attached to the VP asits object.
It is not until the genitive marker on"Peoria's" is detected that the correct attachmentis clear.
The D-theory parser avoids the trap bymaking only the judgment hat the VP dominatesthe NP by a path of length at least one.
Subsequentrefinement can either add intervening componentsor not.
Thus in this case, when "my aunt" ends upas part of the determiner of the object rather thanthe object itself, it is not inconsistent with its origi-nal placement.
It is still dominated by the VP, justnot immediately.
When the analysis is complete, atree, the standard referent, can be extracted fromthe description by taking immediate domination asthe parent relation.
*Tlfis work is supported by NSF grant IRI-901659172In other examples given in (Marcus, Hindle &;Fleck, 1983) the left-of (linear precedence) rela-tion is partially specified during parsing, with in-dividuals related by "left-of or equals" or "left-ofor dominates".
The important point is that oncea relationship is asserted, it is never subsequentlyrescinded.
The D-theory parser builds structureswhich are always a partial description of its finalproduct.
These structures are made more specific,as parsing proceeds, by adding additional relation-ships.Our understanding of the difficulty ordinary de-terministic parsers have with these constructions ithat they are required to build a structure cover-ing an initial segment of the input at a time whenthere are multiple distinct trees that are consistentwith that segment.
The D-theory parsers succeedby building structures that contain only those re-lationships that are common to all the consistenttrees.
Thus the choice between alternatives for therelationships on which the trees differ is deferreduntil they are distinguished by the input, possiblyafter semantic analysis.A similar situation occurs when Tree-AdjoiningGrammars are integrated into the unification-basedframework.
In TAGs, syntactic structures are builtup from sets of elementary trees by the adjunctionoperation, where one tree is inserted into anothertree in place of one of its nodes.
Here the difficultyis that adjunction is non-monotonic n the sensethat there are relationships that hold in the treesbeing combined that do not hold in the resultingtree.
In (Vijay-Shanker, i992), building on some ofthe ideas from D-theory, a version of TAG is intro-duced which resolves this by manipulating partialdescriptions of trees, termed quasi-trees.
Thus anelementary structure for a transitive verb might bethe quasi-tree a'  rather than the tree a (Figure I).In a ~ the separation represented by the dotted l inebetween odes referred to by vpl and vp2 denotes apath of length greater than or equal to zero.
Thusa' captures just those relationships which are truein a and in all trees derived from a by adjunc-tion at VP.
In this setting trees are extracted fromquasi-trees by taking what is termed a circumscrip-live reading, where each pair of nodes in which onedominates the other by a path that is possibly zerois identified.This mechanism can be interpreted in a mannersimilar to our interpretation of the use of partialS /kNP VPv NP(3t s :Figure 1.
Quasi-treess/7NP VP '~xVp,~S vP2descriptions in D-theory parsers.
We view a treein which adjunction is permitted as the set of alltrees which can be derived from it by adjunction.That  set is represented by the quasi-tree as the setof all relationships that are common to all of itsmembers.The connection between partial descriptions oftrees and the sets of trees they describe is madeexplicit in (Vijay-Shanker & Schabes, 1992).
Herequasi-trees are used in developing a compact rep-resentation of a Lexicalized TAG grammar.
Thelexicon is organized hierarchically.
Each class ofthe hierarchy is associated with that set of relation-ships between individuals which are common to alltrees associated with the lexical items in the classbut not (necessarily) common to all trees associatedwith items in any super-class.
Thus the set of treesassociated with items in a class is characterized bythe conjunction of the relationships associated withthe class and those inherited from its super-classes.In the case of transitive verbs, figure 2, the rela-tionships in al  can be inherited from the class ofall verbs, while the relationships in a2 are associ-ated only with the class of transitive verbs and itssub-classes.The structure a '  of figure 1 can be derived bycombining a2 with a l  along with the assertion thatv2 and Vl name the same object.
In any treedescribed by these relationships either the nodenamed vpl must dominate vp~ or vice versa.
Nowin a l ,  the relationship "vpl dominates vl" does notitself preclude vpx and vl from naming the same ob-ject.
We can infer, however, from the fact that theyare labeled incompatibly that this is not the case.Thus the path between them is at least one.
Froma2 we have that the path between vp2 and v2 isprecisely one.
Thus in all cases vpl must dominatevp2 by a path of length greater than or equal tozero.
Hence the dashed line in a '.The common element in these three applicationsis the need to manipulate structures that partiallydescribe trees.
In each case, we can understandthis as a need to manipulate sets of trees.
Thestructures, which we can take to be quasi-trees ineach case, represent these sets of trees by capturing73the set of relationships that are common to all treesin the set.
Thus we are interested in quasi-trees notjust as partial descriptions of individual trees, butas a mechanism for manipulating sets of trees.Reasoning, as in the LTAG example, about thestructures described by combinations of quasi-treesrequires some mechanism for manipulating thequasi-trees formally.
Such a mechanism requires,in turn, a definition of quasi-trees as formal struc-tures.
While quasi-trees were introduced in (Vijay-Shanker, 1992), they have not been given a precisedefinition.
The focus of the work described here isa formal definition of quasi-trees and the develop-ment of a mechanism for manipulating them.In the next section we develop an intuitive un-derstanding of the structure of quasi-trees basedon the applications we have discussed.
Followingthat, we define the syntax of a language capableof expressing descriptions of trees as formulae andintroduce quasi-trees as formal structures that de-fine the semantics of that language.
In section 4we establish the correspondence between these for-mal models and our intuitive idea of quasi-trees.We then turn to a proof system, based on semantictableau, which serves not only as a mechanism forreasoning about tree structures and checking theconsistency of their descriptions, but also serves toproduce models of a given consistent description.Finally, in section 7 we consider mechanisms for de-riving a representative tree from a quasi-tree.
Wedevelop one such mechanism, for which we showthat the tree produced is the circumscriptive read-ing in the context of TAG, and the standard refer-ent in the context of D-theory.
Due to space limi-tations we can only sketch many of our proofs andhave omitted some details.
The omitted materialcan be found in (Rogers & Vijay-Shanker, 1992).2 Quas i -T reesIn this section, we use the term relationship to in-formally refer to any positive relationship betweenindividuals which can occur in a tree, "a is the par-ent of b" for example.
We will say that a tree satis-fies a relationship if that relationship is true of theindividuals it names in that tree.Ot x :NP VP ~%v 1 'x~, vO~ 2 : vP  vP2'~v  NPFigure 2.
Structure Sharing in a Representation of Elementary StructuresI t 's  clear, from our discussion of their applica-tions, that quasi-trees have a dual nature - -  as aset of trees and as a set of relationships.
In for-malizing them, our fundamental idea is to identifythose natures.
We will say that a tree is (partially)described by a set of relationships if every relation-ship in the set is true in the tree.
A set of trees isthen described by a set of relationships if each treein the set is described by the set of relationships.On the other hand, a set of trees is characterized bya set of relationships if it is described by that setand if every relationship that is common to all ofthe trees is included in the set of relationships.
Thisis the identity we seek; the quasi-tree viewed as aset of relationships characterizes the same quasi-tree when viewed as a set of trees.Clearly we cannot easily characterize arbitrarysets of trees.
As an example, our sets of trees willbe upward-closed in the sense that, it will containevery tree that extends ome tree in the set, ie: thatcontains one of the trees as an initial sub-tree.
Sim-ilarly quasi-trees viewed as sets of relationships arenot arbitrary either.
Since the sets they character-ize consist of trees, some of the structural propertiesof trees will be reflected in the quasi-trees.
For in-stance, if the quasi-tree contains both the relation-ships '% dominates b" and "b dominates c" thenevery tree it describes will satisfy "a dominates c"and therefore it must contain that relationship aswell.
Thus many inferences that can be made onthe basis of the structure of trees will carry over toquasi-trees.
On the other hand, we cannot makeall of these inferences and maintain any distinctionbetween quasi-trees and trees.
Further, for someinferences we will have the choice of making theinference or not.
The choices we make in definingthe structure of the quasi-trees as a set of relation-ships will determine the structure of the sets of treeswe can characterize with a single quasi-tree.
Thusthese choices will be driven by how much expressivepower the application eeds in describing these sets.Our guiding principle is to make the quasi-trees astree-like as possible consistent with the needs of ourapplications.
We discuss these considerations morefully in (Rogers &5 Vijay-Shanker, 1992).One inference we will not make is as follows: from"a dominates b" infer either "a equals b" or, for74some a' and b', "a dominates a', a' is the parent ofb', and b' dominates b".
In structures that enforcethis condition path lengths cannot be left partiallyspecified.
As a result, the set of quasi-trees requiredto characterize s '  viewed as a set of trees, for in-stance, would be infinite.Similarly, we will not make the inference: for alla, b, either "a is left-of b", "b is left-of a", "a dom-inates b", or "b dominates a".
In these structuresthe left-of relation is no longer partial, ie: for allpairs a, b either every tree described by the quasi-tree satisfies "a is left-of b" or none of them do.
Thisis not acceptable for D-theory, where both the anal-yses of "pseudo-passives" and coordinate structuresrequire single structures describing sets includingboth trees in which some a is left-of b and othersin which the same a is either equal to or properlydominates that same b (Marcus, Hindle & Fleck,1983).Finally, we consider the issue of negation.
If atree does not satisfy some relationship then it sat-isfies the negation of that relationship, and viceversa.
For quasi-trees the situation is more subtle.Viewing the quasi-tree as a set of trees, if every treein that set fails to satisfy some relationship, thenthey all satisfy the negation of that relationship.Hence the quasi-tree must satisfy the negated rela-tionship as well.
On the other hand, viewing thequasi-tree as a set of relationships, if a particularrelationship is not included in the quasi-tree it doesnot imply that none of the trees it describes atis-fies that relationship, only that some of those treesdo not.
Thus it may be the case that a quasi-treeneither satisfies a relationship nor satisfies its nega-tion.Since trees are completed objects, when a treesatisfies the negation of a relationship it will alwaysbe the case that the tree satisfies ome (positive) re-lationship that is incompatible with the first.
Forexample, in a tree "a does not dominate b" iff "ais left-of b", "b is left-of a", or "b properly dom-inates a".
Thus there are inferences that can bedrawn from negated relationships in trees that maybe incorporated into the structure of quasi-trees.
Inmaking these inferences, we dispense with the needto include negative relationships explicitly in thequasi-trees.
They can be defined in terms of thepositive relationships.
The price we pay is that tocharacterize the set of all trees in which "a doesnot dominate b", for instance, we will need threequasi-trees, one characterizing each of the sets inwhich "a is left-of b", "b is left-of a", and % prop-erly dominates a".3 LanguageOur language is built up from the symbols:K - -  non-empty countable set of names, 1r - -  a distinguished element of K, the root<1, ~+,  ,~*, --<- -  two place predicates, parent,proper domination, domination,and left-of respectively,- -  equality predicate,A,  V,  -~ - -  usual logical connectives(,), \[, \] - -  usual grouping symbolsOur atomic formulae are t ,~ u, t ?+ u, t <* u, t -<u, and t ~ u, where t, u ?
K are terms.
Literals areatomic formulae or their negations.
Well-formed-formulae are generated from atoms and the logicalconnectives in the usual fashion.We use t, u, v to denote terms and ?, ?
to denotewffs.
R denotes any of the five predicates.3 .1  Mode lsQuasi-trees as formal structures are in a sense areduced form of the quasi-trees viewed as sets ofrelationships.
They incorporate a canonical sub-set of those relationships from which the remainingrelationships can be deduced.Def in i t ion  1 A model is a tuple (H, I ,  7),79,.A,?
),where:H is a non-empty universe,iT.
is a partial function from K to Lt(specifying the node referred to by each name),7 9, .4, 79, and ?
are binary relations over It(assigned to % ,a +, ,a*, and -4 respectively).Let T( denote 27(r).Def in i t ion  2 A quasi-tree is a model satisfying theconditions Cq :For all w, x, y, z ?
11,c~ (~,~) ?79,c= (z, =) ?
79,ca  (=, y), (y, ~) ?
79 ~ (=, ~) ?
79,c4  (~, ~), (y, ~) ?
79(=, y) ?
79 or (y, =) ?
79,c5  (=, y) ?
,4 ~ (=, y) ?
79,ca  (x,y) ?
.4  and (w,x),  (y, z) ?
79 ::~(w, ~) ?
A,c~ (=, y) ?
19 ~ (z, y) ?
Ac8 (z, z) ?
791 We use names ra ther  than  constants to clarify the linkto descr ipt ion theory.75(z, y) ?
z: or (y, z) ?
z:or (y, =) ?
v or (z, y) ?
79,v0  (=, y) ?
z and (=, w), (y, z) ?
79(w, z) ?
?,C lo  (x,y) ?
z and (w,x) ?79(w, y) ?
z or (~, ~), (~, y) ?
A,C~1 (~, y) ?
Z and (~o, y) ?
79(~, w) ?
C or (w, =), (w, y) ?
.4,c~2 (~, y) ?
z and (y, z) ?
C ~ (~, z) ?
C,And meeting the additional condition: for everyx ,z  ?
U the set B=z = {Y I (x,Y),(Y,Z) ?
79}is finite, ie: the length of path from any node toany other is finite.
2A quasi-tree is consistent iffCC~ (x,y) ?
A ~ (y,x) ?
79,CC2 (z, y) ?
?
=:,(=, y) ?
79, (y, =) ?
79, and (y, =) ?
z:.It is normal iffRCx  for all x # y ?
H, either(~, y) ?
79) or (y, ~) ?
7).At least one normal, consistent quasi-tree (thatconsisting of only a root node) satisfies all of theseconditions imultaneously.
Thus they are consis-tent.
It is not hard to exhibit a model for eachcondition in which that condition fails while all ofthe others hold.
Thus the conditions are indepen-dent of each other.Trees are distinguished from (ordinary) quasi-trees by the fact that 79 is the reflexive, transi-tive closure of P,  and the fact that the relations79, 79, ,4, ?
are maximal in the sense that they can-not be consistently extended.Def in i t ion  3 A consistent, normal quasi-tree Mis a tree iffTe l  79M = (7~M)*,TC2 for all pairs (x, y) ?
U M X l~ M,exactly one of the following is true:(=, y), (y,z) ?
79M; (z,y) ?
.AM;(y, =) ?
A M; (=, y) ?
z:M; or (y, =) ?
1: M.Note that TC1 implies that .A M -- (79M)+ as well.It is easy to verify that a quasi-tree meets these con-ditions iff (H M, 79M) is the graph of a tree as com-monly defined (Aho, Hopcroft & Ullman, 1974).3 .2  Sat i s fac t ionThe semantics of the language in terms of themodels is defined by the satisfaction relation be-tween models and formulae.Def in i t ion  4 A model M satisfies a formula ?
(M ~ ?)
as follows:2 The  addit ional  condit ion excludes "non-s tandard"  mod-els which include components  not  connected  to the  root  bya finite sequence of immedia te  dominat ion  l inks.M ~ t,~* u i f fM~t<*  u iffM ~ t ,~ u i f fM ~ t C~ u i ffM ~ t ,~+ u iffM ~t ,~+u iffM~t<u iffM ~ t -.< u i f fM ~ ~t ~ u iffM ~",~ff  iffM ~?A?
iffM ~-~(?A?)
i f fM ktV?
iff(zM(t),Z~(~)) e VM;(ZM(t), Z~(U)) ~ L ' ,(ZM(~),ZM(t)) ?
C ~,or (z~(~),zM(t)) ?
.4";(z ' ( t ) ,z ' (~))  ?
v "a.d (ZM(u),Z~(t)) ?
VM;(ZM(t), ZM(,,)) ?
.4 M,(ZM(u),ZM(t)) ?
,4 M,(Z'(t), Z'(,.,)) ?
c ' ,or (z'(~),zM(t)) ?
c M(zu(t),ZM(u)) ?
AM;(ZM(,,),Z~(t)) ?
V M,(ZM(t),ZM(~)) ?
z~ ~,or (ZM(~),ZM(t)) ?
CM;(ZM(t),ZM(~)) ?
vM;(zM(u),z~(t)) ?
v ~,(z~(t),Z~(u)) ?
z: ~,(ZM(u), :z:M(t)) ?
z: ~, or(z~(t), =), (=,z~(u)) ?
A ~,for some x ?
l~M ;(z ' ( t ) ,z~(~))  ?
c;(z~(~),z~(t)) ?
~,(IM(t),:~M(u)) ?
V,or (z~(~),z~(t))  ?
v;U~?
;M ~?
andM ~?
;M ~?
orM~- - l?
;M~?orM~?
;M ~-~(?V?)
i f fM~-~?
andM~'~?.In addition we require that ZM(k) be defined for allk occurring in the formula.It is easy to verify that for all quasi-trees M(3t, u, R)\[M ~ t R u,-~t R u\] ==~ M inconsistent.If 2: M is surjective then the converse holds as well.It is also not hard to see that if T is a tree4 Character i za t ionWe now show that this formalization is completein the sense that a consistent quasi-tree as definedcharacterizes the set of trees it describes.
Recallthat the quasi-tree describes the set of all treeswhich satisfy every literal formula which is satis-fied by the quasi-tree.
It characterizes that set ifevery literal formula which is satisfied by every treein the set is also satisfied by the quasi-tree.
Theproperty of satisfying every formula which is satis-fied by the quasi-tree is captured formally by thenotion of subsumption, which we define initially asa relationship between quasi-trees.Definit ion 5 Subsumption.Suppose M = (l~M,~ M 7)M,'DM,.AM,f-.M) andt M ~ M j M ~ M ~ M I M ~ M = (14 ,Z ,7 ) ,7) ,,4 ,? )
are consis-tent quasi-trees, then M subsumes M z (M ~ M I)iff there is a function h : lA M ~ 14 M' such that:76zM'(t) = h(7:M(t)),(x, y) e 7)M =V (h(x), h(y)) e 7)M'(x, y) e V M ~ (h(z), h(y)) E 7 )M',(x, y) E .A M =v (h(x), h(y)) e .A M',(x, y) e ?M ~ (h(x),h(y)) e ?M'.We now claim that any quasi-tree Q is subsumedby a quasi-tree M iff it is described by M.Lemma 1 If M and Q are normal, consistentquasi-trees and 3 M is surjective, then M E Q ifffor all formulae ?, M ~ ?
~ Q ~ ?.The proof in the forward direction is an easy in-duction on the structure of ?
and does not dependeither on normality or surjectiveness of I M. Theopposite direction follows from the fact that, sinceZ M is surjective, there is a model M' in which/~M'is the set of equivalence classes wrt ~ in the domainof Z M, such that M E M~ E Q-The next lemma allows us, in many cases, to as-sume that a given quasi-tree is normal.Lemma 2 For every consistent quasi-tree M,there is a normal, consistent quasi-tree M ~ suchthat M E M~, and for all normal, consistent quasi-tree M ' ,  M E M"  ::?.
M ~ E M ' .The lemma is witnessed by the quotient of M withrespect o S M, where sM = { (x, y) I (x, y), (y, x) evM}.We can now state the central claim of this sec-tion, that every consistent quasi-tree characterizesthe set of trees which it subsumes.Proposition 1 Suppose M is a consistent quasi-tree.
For all literals ?M ~ ?
?~ (VT, tree)\[M E T ::~ T ~ ?\]The proof ollows from two lemmas.
The first estab-lishes that the set of quasi-trees subsumed by somequasi-tree M is in fact characterized by it.
The sec-ond extends the result to trees.
Their proofs are in(Rogers & Vijay-Shanker, 1992).Lemma 3 If M is a consistent quasi-tree and ?
aliteral then(3Q, consistent quasi-tree)\[M E_ Q and Q ~ -~?\]Lemma 4 I f  M is a consistent quasi-tree, thenthere exists a tree T such that M E T.Proof(of  proposition 1)(VT) \[M _ T :=~ T b ?\]?=~ -~(3T)\[M _ T and T ~ -~?\](:=~ by consistency, ?== by completeness of trees)?V -~(3Q, consistent q-t)\[M E Q and Q ~ -~?\](==~ by lemma 4, ?= since T is a quasi-tree)(::~ by lemma 3, ?=: by lemma 1) O5 Semant ic  Tab leauSemantic tableau as introduced by Beth (Beth,1959; Fitting, 1990) are used to prove validity bymeans of refutation.
We are interested in satisfi-ability rather than validity.
Given E we wish tobuild a model of E if one exists.
Thus we are in-terested in the cases where the tableau succeeds inconstructing a model.The distinction between these uses of semantictableau is important, since our mechanism is notsuitable for refutational proofs.
In particular, itcannot express "some model fails to satisfy ?"
ex-cept as "some model satisfies -?"
.
Since our logic isnon-classical the first is a strictly weaker conditionthan the second.Def in i t ion  6 Semantic Tableau:A branch is a set, S, of formulae.A configuration is a collection, {S1, .
.
.
,S~},  ofbranches.A tableau is a sequence, (C1, .
.
.
,  Cnl, of configura-tions where each Ci+~ is a result of the applicationof an inference rule to Ci.I f  s is an inference rule, (C i \{S})  U{sl,..., s',} is the result of applying the rule to Giff z eG.A tableau for ~, where E is a set of formulae, is atableau in which C1 = {E}.A branch is closed iff (9?)\[{?,--,?}
C 5'\].
A con-figuration is closed iff each of its branches is closed,and a tableau is closed iff it contains some closedconfiguration.
A branch~ configuration, or tableauthat is not closed is open.5.1 Inference RulesOur inference rules fall into three groups.
Thefirst two, figures 3 and 4, are standard rulesfor propositional semantic tableau extended withequality (Fitting, 1990).
The third group, figure 5,embody the properties of quasi-trees.The --,,~ rule requires the introduction of a newname into the tableau.
To simplify this, tableau arecarried out in a language augmented with a count-ably infinite set of new names from which these aredrawn in a systematic way.The following two lemmas establish the correct-ness of the inference rules in the sense that no ruleincreases the set of models of any branch nor elim-inates all of the models of a satisfiable branch.Lemma 5 Suppose S' is derived from S in sometableau by some sequence of rule applications.
Sup-pose M is a model, then:M~S' : :~M~S.This follows nearly directly from the fact that all ofour rules are non-strict, ie: the branch to which aninference rule is applied is a subset of every branchintroduced by its application.Lemma 6 I f  S is a branch of some configurationof a tableau and ,S' is the set of branches resultingfrom applying some rule to S, then if there is a77consistent quasi-tree M such that M ~ S, then forsome 5;~ E S '  there is a consistent quasi-tree M 'such that M '  ~ S~.We sketch the proof.
Suppose M ~ S. For allbut --,,a it is straightforward to verify M also sat-isfies at least one of the S~.
For ~,~, suppose Mfails to satisfy either u ,~* t or -,t ,~* u.
Then weclaim some quasi-tree satisfies the third branch ofthe conclusion.
This must map the new constant kto the witness for the rule.
M has no such require-ment, but since k does not occur in S, the value of2: M(k) does not affect satisfaction of S. Thus weget an appropriate M'  by modifying z M' to map kcorrectly.Coro l la ry  1 I f  there is a closed tableau for ?
thenno consistent quasi-tree satisfies ?.No consistent quasi-tree satisfies a closed set of for-mulae.
The result then follows by induction on thelength of the tableau.6 Constructing ModelsWe now turn to the conditions for a branch to besufficiently complete to fully specify a quasi-tree.In essence these just require that all formulae havebeen expanded to atoms, that all substitutions havebeen made and that the conditions in the definitionof quasi-trees are met.6 .1  Saturated  BranchesDef in i t ion  7 A set of sentences S is downwardsaturated iff for all formulae ?, ?, and terms t, u, v:1-Is CVCES=v.
?ES orCES1-13 -',(?
V ?)
E S =?, ",?
E S and ",?
E SI-I 4 C A C E S =~ ff E S and C E S1-I6 t ,~ t E S for all terms t occurring in S117 tl ~ ul,t2 ~, uz E S =~tl ,~* t2 E S ~ ul ,~* u2 E S,tl ,~+ t2 E S =?, ul ,~+ u2 E S,t l  ~ t2 E S ==~ u 1 <l u 2 ~ S,t l  -< t2 E S =?.
Ul -.4 u2 E S,tl ~ t2 E S ~ ua ,~ u2 E S.t118 r ,~* t E S for all terms t occurring in SH9  t~uES~t ,~*  uES111,o t ~ u E S =C, -,t ,~* u E S or ~u ,~* t E S11,, t,~* u,u~* tES~t~uESI - I , z  t ,~" u, u ,~* v E S ~ t ,~* v E SH*3  t ,~* v, u ,~* v E S ~t ,~* u E S or u ,~* t E SH,  4 -.t ,~* u E St-< uES  oru -<t  GS oru ,?
t ESH ,  5 t ,~+ u E S ~ t ,~* u, ~u ,~* t E SH,6  t ,~+ u,s,~* t,u,~* vES  ~ s,~+ v~SH*7  ~t ,~+ u E S ~ --t ,~* u E S or u .~* t E SH,8  t ,~ u E S ::C, t ,~+ u E SS,.?
v?s ,?v?
,?
I s ,?v?
,?S,?A?A S,?
A?
,?
,?S, "m "~ ~S,-~-~?, ?Vs,-X?
v ?)s,-X?
v ?),-~?,-~?~VS,-~(?
A ?)S,-~(?
A ?
), "-~?
I s , -4?
A ?
),-'~?-~AFigure 3.
Elementary Rules1-1, 9 t ,a v E S :----~ u -4 v E S or v -4 u E Sor u ,~* t E S or v ,~* u E SH2o  ",t ,~ u E S ::~ u ,~* t E S or-~t ,~* u E Sor t ,~+ w, w ,~+ u E S, fo r  some term wH2x  t -4 u E S ~ -~t ,~* u, -~u ,~* t, --,u -4 t E SI-I2~* t -4 u, t ,~* s ,u  ,~* v E S ~ s -4 v E SH23 t -4 u, v ,~* t E Sv -4 u E S or v ,~ + t, v ,~ + u E S1-124 t -4 u, v ,l* u E S =~t -4 v E S or v ,~ + t, v ,~ + u E SH25 t -4u ,  u -4vES~t -4vESH26 ~t-4 uE  S=?,u -4 t E S or t ,~* u E S or u ,~* t E S.The next lemma (essentially Hintikka's lemma)establishes the correspondence b tween saturatedbranches and quasi-trees.Lemma 7 For every consistent downward satu-rated set of  formulae S there is a consistent quasi-tree M such that M ~ S. For every f inite consis-tent downward saturated set of  formulae, there is asuch a quasi-tree which is f inite.Again, we sketch the proof.
Consider the set T(S)of terms occurring in a downward saturated set S.I-I6 and I-/7 assure that ~ is reflexive and substi-tutive.
Sincet ~u,u~v E S=~t  ~v E S, andu~u,u ,~vE S~v~ u E Sby  substitution ofv for (the first occurrence of) u, it is transitive andsymmetric as well.
Thus ~ partitions T(S)  intoequivalence classes.Define the model H as follows:u n = 7" (s ) /~ ,z~(k)  = \[k\]~,:pH = {(\[t\]~., \[u\]~) It '~ u ~ S},:p .
= {(\[t\]~., \[u\]~.)
It "~* u E S},.A H = {(\[t\]~,\[u\]~) I t, + uE  S},c"  = {(\[t\]~, \[u\]~) I t -4 ~ ~ s}.Since each of the conditions C1 through Cx2 corre-sponds directly to one of the saturation conditions,it is easy to verify that H satisfies Cq.
It is equallyeasy to confirm that H is both consistent and nor-mal.78We claim that ?
E S =?- H ~ ?.
As is usual forversions of Hintikka's lemma, this is established byan induction on the structure of ?.
Space preventsus from giving the details here.For the second part of the lemma, if the set offormulae is finite, then the set of terms (and hencethe set of equivalence classes) is finite.6.2  Saturated  Tab leauSince all of our inference rules are non-strict, if arule once applies to a branch it will always apply toa branch.
Without some restriction on the applica-tion of rules, tableau for satisfiable sets of formulaewill never terminate.
What is required is a controlstrategy that guarantees that no rule applies to anytableau more than finitely often, but that will al-ways find a rule to apply to any open branch thatis not downward saturated.Def in i t ion  8 Let EQs be the reflexive, symmetr ic ,transitive closure of { (t, u) l t ~ u e S} .An inference rule, I ,  applies to some branch Sof a configuration C i f f?
S is open?
S  {Si I Si results f rom application of  I to S}?
i f  I introduces a new constant a occurring informulae Cj(a) E Si, there is no term t andpairs (ul ,  va), (u2, v2), .
.
.
E EQs such that foreach of the Cj, ?
{t/a, ul/Vl,~2/v2,...} E S.(Where ?
{t /a ,  Ul/Vl, U2/V2,...} denotes the re-sult of uniformly substituting t fo r  a, ul  for  vl ,etc., in ?
.
)The last condition in effect requires all equalityrules to be applied before any new constant is in-troduced.
It prevents the introduction of a formulainvolving a new constant if an equivalent formulaalready exists or if it is possible to derive one usingonly the equality rules.We now argue that this definition of applies doesnot terminate any branch too soon.Lemma 8 I f  no inference rule applies to an openbranch S of a configuration, then S is downwardsaturated.This follows directly from the fact that for each ofH1  through H26,  if the implication is false thereis a corresponding inference rule which applies.5:,5', t ,~ tany term toccurring in 5:~ (reflexivity of ,~)5:, t u, ?
(t)s,t u, +(t), ?(?
)~s (substitution)?
( i )  denotes the result of substituting u for any or all occurrences o f t  in ?.Figure 4.
Equality Rules5:5:, r <1" tt any term occurring in So r t=r<1" (r  min imum wrt <1")5:, t ~ u (reflexivity of <1")S, t ~ u, t .~* u, u ,~* t <1r5:,t <1" U, u <1" t5:,t<1" u, u ,~* t, t ~, u* (ant i -symmetry) <1aS, t  ~ U <1"5:,t ~ u , - .
t  <1* u \[ 5:,t # u , -~u <1* t r'.S, t <1" u, u <1" v * (transit ivity)5:~ t <1" U~ U <1" V~ t <1" V <it5:, t .~* V~ U <1" V5:, t <1" v, u .~* v, t ,~* u \[ 5:, t ,~* v, u .~* v, u <1" t <1~ (branches linearly ordered)5:~ --,t <1" u---1<1"5:, -~t <1* u, t -4 u \[ 5:,-~t<1" u ,u -4t  \[ S, "-,t <1* u, u <1 +t5:, t <1 + u 5:, t ,~+ u, s <1" t, u <1" v5:,t<1 + u, t <1* u, --,u <1* t <1+1 5:,t<1 + u, s <1* t, u <1* v, s <1 + v ~1+ 25:, - , t  <1 + u 5:t t <1 u-1<1 + <115:, -~t <1 + u, -~t 4* u I 5:,-.t<1 + u, u <1* t 5:, t <1u, t <1 + u5:, t <1v<125:,t<1v, u -4v  \[ 5: , t<1v,  v -4u  I 5: , t<1v,  u<1*t  \[ 5: , t<1v,  v<1* uany term u occurring in 5:.S~ ~t  <J u "n<1S, - .
t  <1u, u <1* t \[ S , - .
t  ~ u , -~t  <1* u \[ 5:, ".t <1 u, t <1 + k, k <1 + uk new name5:, t -4 U S,  t -4 U, t <1* 8, U <1" V-<a "425:,t  -4 u,  ~t  <1" u, ~u <1" t, ~U -4 t 5:~t -4 u , t  <1" s~u <1" V ,s  -4 V5:, t -4 u, v <1* t -<a5:, t -4 u, v ,~* t, v -4 u \[ 5:, t -4 u, v ,~* t, v <1+ t, v <1+ u5:, t -4 u,  v <1* u5:~ t -4 U, v'~* u,  t -4 v \[5: , t -4 U , U -4 V-<t5:~ t -4 U~ V "~* U~ V <1 + t~ V <1+ U5:, "~t -4 uS , t .-4 u , u -4 v , t -4 v"44,5 ' , - - t -~u,u -~t  \[ S , - - , t -4u,  t<1*u \[ S , - - , t -4u,  u<1*tFigure 5.
Tree Rules-,-<79Proposition 2 (Termination) All tableau for fi-nite sets of formulae can be extended to tableau inwhich no rule applies to the final configuration.This follows from the fact that the size of anytableau for finite sets of formulae has a finite upperbound.
The proof is in (Rogers & Vijay-Shanker,1992).Proposition 3 (Soundness and Completeness)A saturated tableau for a finite set of formulaeexists iff there is a consistent quasi-tree which sat-isfies E.Proof: The forward implication (soundness)follows from lemma 7.
Completeness follows fromthe fact that if E is satisfiable there is no closedtableau for E (corollary 1), and thus, by propo-sition 2 and lemma 8, there must be a saturatedtableau for E. \[\]7 Ext rac t ing  Trees  f rom Quas i - t reesHaving derived some quasi-tree satisfying a setof relationships, we would like to produce a "mini-mal" representative of the trees it characterizes.
Insection 3.1 we define the conditions under which aquasi-tree is a tree.
Working from those conditionswe can determine in which ways a quasi-tree Mmay fail to be a tree, namely:, (~oM)* is a proper subset of:D M,?
L M and/or 7) M may be partial, ie: for somet,u, U ~: (t -~ uV-~t -~ u) or U ~ (t ,~*u V -~t ,~* u).The case of partial L: M is problematic in that,while it is possible to choose a unique representa-tive, its choice must be arbitrary.
For our applica-tions this is not significant since currently in TAGsleft-of is fully specified and in parsing it is alwaysresolved by the input.
Thus we make the assump-tion that in every quasi-tree M from which we needto extract a tree, left-of will be complete.
That is,for all terms t,u: M ~ t -~ uV-~t -~ u. ThusM ~ t ~* u V-~t ~* u ::v M ~ u ~* t.Suppose M ~ u ,~* t and M ~: (t 4" u V-~t ,~* u),and that zM(u) = x and zM(t) = y.
In D-theory,this case never arises, since proper domination,rather than domination, is primitive.
It is clear thatthe TAG applications require that x and y be iden-tified, ie: (y, x) should be added to / )m.  Thus wechoose to complete 7) M by extending it.
Under theassumption that /: is complete this simply means:if M ~ -~t ,~* u, 7) M should be extended such thatM ~ t ,~* u.
That M can be extended in this wayconsistently follows from lemma 3.
That the re-sult of completing ~)M in this way is unique followsfrom the fact that, under these conditions, extend-ing "D M does not extend either ,A M or ~M.
Thedetails can be found in (Rogers & Vijay-Shanker,1992).In the resulting quasi-tree domination has beenresolved into equality or proper domination.
Toarrive at a tree we need only to expand pM suchthat (,pM)* .
: ~)M. In the proof of lemma 4 weshow that this will be the case in any quasi-tree Tclosed under:(x, z) E A T and (Yy)\[(z, y) fL A T or (y, z) ft A T\](z, z) ?
pT(x, y)  ?w and (y, x) ~ ?T U .A Tu) ?
v r.The second of these conditions is our mechanismfor completing/)M. The first amounts to takingimmediate domination as the parent relation - -precisely the mechanism for finding the standardreferent.
Thus the tree we extract is both the cir-cumscriptive r ading of (Vijay-Shanker, 1992) andthe standard referent of (Marcus, Hindle & Fleck,1983).ReferencesAho, A. V., Hopcroft, J. E., & Ullman, J. D. (1974).The Design and Analysis of Computer Algo-rithms.
Reading, MA: Addison-Wesley.Beth, E. W. (1959).
The Foundations of Mathe-matics.
Amsterdam: North-Holland.Fitting, M. (1990).
First-order Logic and Auto-mated Theorem Proving.
New York: Springer-Verlag.Marcus, M. P. (1980).
A Theory of Syntactic Recog-nition for Natural Language.
MIT Press.Marcus, M. P. (1987).
Deterministic parsing anddescription theory.
In P. Whitelock, M. M.Wood, H. L. Somers, R. Johnson, & P. Ben-nett (Eds.
), Linguistic Theory and ComputerApplications.
Academic Press.Marcus, M. P., Hindle, D., & Fleck, M. M. (1983).D-theory: Talking about talking about trees.In Proceedings of the 21st AnnuaiMeeting ofthe Association for Computational Linguistics,Cambridge, MA.Rogers, J.
& Vijay-Shanker, K. (1992).
A formal-ization of partial descriptions of trees.
Techni-cal Report TR92-23, Dept.
of Comp.
and Info.Sci., University of Delaware, Newark, DE.Vijay-Shanker, K. (1992).
Using descriptions oftrees in a tree-adjoining grammar.
Computa-tional Linguistics.
To appear.Vijay-Shanker, K. & Schabes, Y.
(1992).
Structuresharing in lexicalized tree-adjoining grammars.In Proceedings of the 16th International Con-ference on Computational Linguistics (COL-ING'92), Nantes.80
