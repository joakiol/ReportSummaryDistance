Power fu l  ideas  in computat iona l  l inqu is t i csImp l i ca t ions  for  p rob lem ,solvinq, and educat ionAbst rac tGerhard Fischer, Inst itut fuer InformatikUniversitaet Stuttgart, West-GermanyIt is our firm belief that solving problems inthe domain  of computat iona l  l inguistics (CL)can prov ide  a set of metaphors  or powerfulideas which are of great impor tance  to manyf ie lds .
We have taught severa l  exper imenta lc lasses  to s tudents  from high schoo ls  andun ivers i t ies  and s major part of our work wascentered around problems dealing with language.We have set up an exper imenta l  LanguageLaboratory  in which  the students  can exploreexisting computer programs, modify them, designnew ones and implement them.
The goal was thatthe student should gain a deeper understandingof language itself and that he/she should learngenera l  and t rans ferab le  prob lem solvingskills.exerc i se  in pat tern  match ing  and symbolman ipu la t ion ,  where certain keywords trigger afew prestored answers.
I t  may also serve as anexample  for how l itt le machinery is necessaryto create the i l lusion of understanding.\[n our in terd isc ip l inary  research  pro jec t(KLING eL el, 1977) we have tried to overcomethese prob lems by providing opportunit ies forthe s tudent  to exp lore  powerfu l  ideas in thecontext  of non-trivial problems and by showingthat the computer  p rescence  can do much morefor educat ion than improve the delivery systemfor curricula establ ished independently of it.I .
IntroductionProb lem so lv ing with the computer  for thenon-computer  expert is slowly recognized as animpor tant  act iv i ty  in our educational system.It is done best in a project-or iented course inwhich  the student  learns to solve problems ind i f fe rent  domains .
In the past, act ivit ies ofthis sort have been centered around numericalp rob lems,  phys ics  prob lems and the s tandardcomputer  sc ience  prob lems (eg like writ ing asorting procedure).2.
The s ta te  o f  the  ar tThe relevance of problems from l inguistics hasbeen ignored.
The reasons  for this fact areeasy to explain:I) the  educat iona l  communi ty  in  thelanguage-oriented f ie lds  has very l i t t leknowledge about  us ing a computer  to wr i tein teres t ing  programs to gain a deeperunderstanding of the problems in their domain2) the computer  exper ts  were  not fami l ia rwith l inguistics3) the most commonly used programmingl snguegee end eyetemo ere inadequate to  dea lwith the data s t ruc tures  and dia logrequ i rements  which are relevant for languageprocessing4) new f ie lds  l ike art i f icial  intelligence,cogn i t ive  sc ience  end computat iona lllnguletlee were not widely knownThe level of ignorance  can best be seen byus ing  ELIZA as an example: many people thoughtthat it was a program which would "understand"the contents of a dialog.
It was not evident tothem that ELIZA represents nothing more than an~.
Coqn i t ive  Sc ience  and Proqrammin~In recent  years the view has emerged that thelanguage of computat ion  is the proper dialectto  descr ibe  bas ic  i ssues in psycho logy ,l ingu is t i cs  and educat ion .
Research  inCogn i t ive  Sc ience  has demonst ra ted  that thephenomena sur round ing  computers  are deep andobscure ,  requ i r ing  much exper imentat ion .Cogn i t ive  Sc ience  theor ies  about problemso lv ing,  representat ion of knowledge and othercogn i t ive  ab i l i t i esprov ide  the foundation forour understanding of programming.We be l ieve  that the whole  enterpr i se  ofp rogramming can be much better explained withconcepts  from CL than with those frommathemat ics .
P rob lems in CL are o f teni l l -de f ined ,  a lgor i thms are seldom given andprogramming is more a design task than it is scod ing of a known a lgor i thm.
The prob lemformulat ion  phase is more  re levant  than theexecut ion  of a Program and systems are neededto support  this phase of the problem solvingprocess .
Success ive  fo rmulat ion  of programsserve aa s tepp ing  s tones  towards the goal ofdefining the specif icat ion of a problem.Humane have a good intuitive understanding ofthe prob lems in CL and they can do the things( l ike communicate  in natura l  language,  dealwith vast amounts  of knowledge,  infer newknowledge from exit ing one) - even if they donot know how they do it.
P rogramming can beunders tood  as an e f fo r t  to make our ownknowledge exp l i c i t  and can prov ide  us withadequate  metaphors  to describe our own mentalfunctions.1114.
Oes iqn  of a Lanquaqe LaboratoryThe des ign  of learn ing  env i ronments  is animportant goal for the educational  theorist andthe teacher .
The computer as a new technologyhas c reated  a lmost  unl imited poss ib i l i t ies  toc reate  new and cha l leng ing  environments.
TheTur t le  wor ld  (PAPERT 1979) and the s imulat ionwor ld  of Sms l l t s lk  (KAY 1977) p rov ide  goodmodels of what can be done.In our p ro jec t  we have set up an exper imenta lLanguage Laboratory  in which the students canexplore  ex is t ing programs, modify them, dealgnnew ones and implement them.
We took great carein our design (by fo l low ing  the t rad i t ion  ofthe  LOGO pro je ts  as opposed to  CAI approaches)that  the students could work in an act ive  modeend deve lop  ideas  in  8 persona l  way (notl im i ted  by the  teachers  approach) .
Our teach ings ty le  was not to p rov ide  answers  but thel earners  were  encouraged to  use  the i r  ownlanguage knowledge to f ind  e so lut ion.
The i rwork had to rely on self mot ivat ion which seemsa more reasonable goal in CL where the products(eg  poems,  horoscopes ,  quest ion /answer ingsys tems etc )  can be more i n te res t ing  andaesthet i ca l ly  p leas ing  then  a set  o f  numbersappearing as s resul t  in numerical mathematics.With our Language Laboratory  we wanted  tocreate  an env i ronment  in  wh ich  the  s tudent ' stask  i s  not  to  learn  a set  o f  fo rmal  ru les  (egabout the syntax of a programming language) ,but to g ive  them s wor ld  in which they  coulddeve lop  su f f i c ient  ins ide  into the  way theyused language to a l low the t ranspos i t ion  ofthis self-knowledge into programs.The s tudents  were  exposed  to d i f fe rentfo rmal i sms  (pr imar i l y  to LOGO, but a lso toL ISP ,  ATNs, semant ic  networks ,  MICRO-PLANNER)and cou ld  exp lore  the  range  o f  poss ib le  mode lswh ich  cou ld  be imp lemented  in  a cogn i t ive lye f f i c ient  way w i th  these  fo rmal i sms .
We t r iedto engage them in problems of moderatecomplex i ty  ( the  s tudents  ware no researchernworking fu l l - t ime in a project) and we crestedmicro-vers lons of programs by ommltlng feotureawh ich  were not essent ia l  for a conceptua lunderstanding.5.~ P pw~rful ~deesThere is  l i t t le  doubt  that  we w i l l  be unab le  toso lve  the  prob lems o f  coverage  in  our  schoo land un ivers i ty  sub jec ts  and o f  p red ic t ing  whetspec i f i c  knowledge  our  s tudents  w i l l  need inth i r ty  or fo r ty  years.
Despite the fact  that wewould  l i ke  to  have more empi r i ca l  ev idence  thatp rob lem so lv ing  sk i l l s  can be taught ,  we havel i t t le  cho ice ,  because  we don't have any rea la l te rnat ive  ( fo r  a deta i led  d i scuss ion  o f  th i si ssue ,  Bee SIMON 1978) .Cogn i t ive  Sc ience  and Art i f ic ia l  Inte l l igencehave cont r ibuted  to our unders tand ing  ofprob lem so lv ing  processes  and we be l ieve  thatgenera l  p rob lem so lv ing  sk i l l s ,  c rys ta l l i zed  aspower fu l  ideas ,  can be taught  exp l i c i t l y  in  thecontext  o f  a r i ch  env i ronment  o f  problems.
Themain  goa l  o f  th i s  paper  i s  to  show that  CLprovides this r ich context (which i f  i t  is notsuper io r  than  mathemat ics ,  s t  leas t  complementsmathemat ics ) .Power fu l  ideas  are  nuggets  o f  knowledge ,  wh ichere  un iversa l ly  use fu l ,  wh ich  appear  over  andover  in  d i f fe rent  d i sc ip l ines  and wh ich  can beconnected  In  ?
natura l  and i l l uminat ing  waywith a large complex  o f  o ther  ideas.One example  o f  e power fu l  ides  i s  theheur i s t i c :  "d iv ide  and conquer" .
I t  appears  tobe an a lmost  un iversa l  t ru th ,  but  how i t  i adone  in  the  context  o f  a concrete  prob lems i tuat ion  is fa r  f rom being t r iv ia l .
Many ofthe typ ica l  problems ( l i ke  wr i t ing  a program tocompute  Factor ia l ,  to  sor t  ?
se t  o f  ob jec ts  orto  so lve  e t r iv ia l  puzz le )  a re  too  s imp le ,  sothere ia l l t t le  need to use th i s  heur i s t i c .Furthermore many t rad i t iona l  programmingsystems are  not  bu i ld  fo r  (o r  do not  evensuppor t )  th i s  p rob lem so lv ing  approach ,  whereasin  our  work  the  heur i s t i c  took  on a concretemean ing  and was the  on ly  success fu l  way toso lve  a prob lem.In  the  fo l low ing  par ts  o r  th i s  sect ion  webr ie f ly  descr ibe  a sa t  o r  power fu l  ideas  wh ichcan be exp lored  in  the  context  o f  rea l i s t i cp rob lems and research  areas  in  CL ( the  pro jec tsa re  fu l l y  descr ibed  in  BOECKER/FISCHER, 1978) :11 d i f fe rence  between syntax  end semant ic  (egin  the  context  o f  wr i t ing  a program to  generatepoet ry ,  in  so lv ing  word prob lems in  a lgebra)2)  ru le  sys tems (s sor t  o f  p roduct ion  sys tems;they  ere  use fu l  fo r  the  organ iss t ion  o fp rograms to  der ive  the  p lu ra l  fo rm o f  anEng l i sh  noun g iven  the  s ingu lar ,  to  con jugateF rench  verbs ,  to  character i ze  the  ru les  andheur i s t i cs  in  a game or  to  imp lement  theeva luat ion  procedure  o f  L ISP)31 des ign  and Imp lementat ion  o f  s min i - language( th i s  s i l o .as  us to  descr ibe  s p rob lem in  termswh ich  ere  character i s t i c  fo r  the  prob lemins tead  o f  be ing  fo rced  to  use e g iven  genera lpurpose  programming language;  examples  e re :p roduct ion  sys tems,  pat tern  matcher ,  e tc ) ;  inprogramming, i t  is a natura l  task to designyour  own representat iona l  sys tem whereas  inmathemat ics  peop le  most ly  use therepresentat iona l  sys tem g iven  to  them4) exper imentat ion  w i th  a w ide  var ie ty  ofd i f fe rent  grsmmewa (eg to  generate  and ana lysea lgebra ic  express ions ;  to  t rans form arab ic112numera ls  into roman ones and vice versa; toexp lo re  t rans i t ion  networks  and augmentedt rans i t ion  networks  in dea l ing  with naturallanguage)5) knowledge  representat ion :  eg to der iveimpl ic i t  knowledge  and to study the impact ofp rocess ing  at read-time (antecendent theorems)versus quest ion-t ime (consequent theorems) in asystem which dealt with fami ly re la t ions  (asystem of this sort can be cont ras ted  withEL IZA or a program to cast horoscopes) ;  thefo l low ing  d iagram i l lus t ra tes  how ?
implicitre la t ionsh ips  (---) can be der ived  from 3explicit ones within a family of four persons:', ~ /  ~,~ " \  |1 ",\ , \~,  "~-~ "-- l I"o '6) exp lo ra t ion  of s ta t i s t i ca l  p roper t ies  oflanguages  in the context of s wide variety ofdifferent language games (eg like designing thed i s t r ibut ion  of a Scrabb le  game, informationcontent of vowels in different languages etc)7) genera l  computat iona l  ideas (eg likebackt rack ing ,  which is encounterd  in parsingnon-determin is tc  g rammars  and which could beappl ied  to pattern matching and tree like datas t ructures )6.
Pattern Match inq-  an example  fo r  the.deslqn9nd implementation of s minir lsnquaqeA match ing capabil ity can be a key element formany prob lem so lv ing  tasks invo lv ing  thecomputer  to make otherwise large, complicatedefforts reachable.
The following powerful ideascan be invest igated  in the context  of thispro jec t :I) inc rementa l  des ign:  we can start with spat te rn  marcher  wh ich  is bas ic ly  en EQUALpred icate .
The next steps could be: amembership predicate, s pattern with slots offixed size, s pattern with slots of arbitrarysize (which c reates  the need for back-up),the possib i l ty  for simultanous assignment ofmatched  e lements  to pat te rn  variables, theres t r i c t ion  of matching by using predicatesetcZ) the prob lem is i l l -de f ineds  thespec i f i ca t ion  of the pattern marcher shouldbe der ived from the needs of us ing it tos impl i fy  p rob lem so lv ing  tasks.
A par t ia limplementation can be an important help for afur ther  spec i f i ca t ion  or for a revision ofa l ready ex is t ing  parts ,  ie the prob lemformula t ion  is an impor tant  part of theproblem solving process3) de f in i t ion  of a new language layer: thepattern matcher can be used as a new languagelayer between the problem and the programminglanguage and it can help to reduce  thedistance between the two.4) g lass -box  approach:  in many situations, weare primarily interested in using the patternmarcher .
But by mak ing  use of an a lreadyex is t ing  program the student is not confinedto a b lack box ( l ike it wou ld  be in CAIenv i ronment ) ;  at any t ime he/she can lookins ide the program, open it up, change it toh i s /her  own needs etc.
A prerequis i te for ap rogram to be a g lass -box  is that it isimp lemented  in a fo rmal i sm the s tudent  isfamiliar with.5) recurs ive  cont ro l  s t ruc ture ,  a pat ternmarcher  i s  a good  example  fo r  the  power  o frecurs ive  definit ions and control structureswhich can be used in many other situationsA pat tern  marcher  can be used in all projectswhere symbolic structures have to be dissectedand ident i f ied ,  eg for the t rans la t ion  frominf ix to pref ix ,  for pars ing  and translatingprocesses ,  for morpho log ica l  ana lys i s ,  fors imple  I/0 rout ines  (eg the identi f icat ion ofkeywords) ,  for EL IZA l ike programs and forsymbolic manipulat ion of algebraic expressions.We do not have the space to document  theprob lem so lv ing  processes  ( including all theincomplete  vers ions)  wh ich  "occured in thecontext  of imp lement ing  the pat tern  marcher(see BOECKER/FISCHER 1978) but we want to giveexamples  of its use.
The s impl i f icat ion withthe help of a pat te rn  marcher  can bedemonst ra ted  by a program for infix to prefixt rans la t ion  (written in LOGO!
the program alson ice ly  shows the power of recurs ivedefinit ions):~0 PRM"ZX : IIIVIX10 LOCAL "A "B20 IF (EQUAL COUNT :INFIX I) TH\]~ 0UTFJT :INFIX3o zF ~ \[?A + ?B\] :inFiXOVrIK~ (s~?l~c~ "SUM I~ IX  :A PREFIX :B)OUTPUT (S~NT~CE "DI~I~/~CE PREFIX :A PREFIX :S)50 zF MA~ \[?A * ?B\] :n~zx~ (S~TI'~CE "PRODUCT ~IX  :A PREFIX :B)60 ~ ~m \[?A I ?S\] :zm~zxOU'I'I~ (S~I'I'~OE "QUOTIENT PREFIX :A PREFIX :B)70 == \ [~Om S~AX\]The fo l low ing  test runs  show how the programworks :su~u v113A ~l~E~ ~o~r  ~ ~ o ~  c AThis vers ion  of the program can be extendedeas i ly  to inc lude  other operators  l ike ">" or"<" :~ (S~'I~C@ "~ ' l "~ ~ :~ R~I~ :~)CIJTRE (S~TE~CE " I~  I~ IX  :a PREFIX :~)I t  i e  an instance in the class of rule systemswhich we mentioned ear l ie r .
The ordering of  theru les  takes  care  fo r  the  precedence  convent ionso f  in f ix  nota t ion .
We have  chosen  th i sapp l i ca t ion  spec i f i ca l l y  to  support our claimthat  many prob lems cons idered  to  bemathemat ica l  can be more c lear ly  unders tood  byl ook ing  s t  them f rom ?
l i ngu is t i c  v iewpoint(and the  APL exper ience  shows that  chang ing  theprecedence  ru les  fo r  the  eva luat ion  o far i thmet ic  expressions poses a non- t r iv ia lproblem).Another  app l i ca t ion  o f  the  pat tern  marcherwou ld  be to  parse  sentences  in  a language wherethe  grammar is g iven .
For th i s  purpose  weassume that  the  pat tern  may conta in  pred icates(wh ich  ere  marked by "<" and ">"):TRUEThe fo l low ing  grammer  may serve  ss an example( i t  descr ibes  the  language o f  s t  leas t  one "O"fo l lowed by at  leas t  one "1" ) :<$8~1~ --> <SO> <$1><SB> --> 0 I 0<$1><51> --> 11 1<51>SENT, SO and S I  can be imp lemented  w i th  thepat tern  mstcher  aa lo l lowed:Io 0OTI~ ~TCHP \[<SO> <sl>\] : I~t~~OSO :D~er10 ~Y ~tITC\]~ 0 :\]\];POT ~ ~ "~2o 0mg~ ~nc~ \[o <so>\] :n~oT~0 $I :I\]l@~10 :IY ~t~TC\]~ I :D~t~  Otfigb5 "T I~20 OU'lg~ ~ \[:1 <St>\] : ~A few tes t runs  show the working of the parser :?ALSEI~II~ ~ \[0 0 0 1\] PIlINT SI~T \[0 t O 1\]TRUE FALSE7.
Imo l i ce t~ons  fo r  p rob lem eo lv~nq andeducat ionPower fu l  ideas have the potent ial  to lead to abreakdown of the tradit ional  boundar ies  betweenes tab l i shed  sc ient i f i c  d isc ip l ines and reducethe d iv i s ion  of school knowledge in tod is Junct ive  compartments.
~By working on some ofthe  pro Jec ts  descr ibed  above  our  s tudents  foundthat  the knowledge which they acquired ord iscovered  was not only useful in the contextof a spec i f i c  task but cou ld  be successfu l lyused  to  unders tand  end so lve  prob lems in  o therdomalns  as wel l ,  wh ich  shou ld  be i l lustratedthrough the fo l lowing two speci f ic  examples:1) the  s tudents  became aware  that  theeva luat ion  of ar i thmet ic  express ions  (as  i ti s  commonly used in mathematics) is notsomething determined by God but that i t  isonly s convention and that the laws behind i tcan be eas i l y  exp la ined  by the use of agrammar .2) s s tudent  d i scovered  why mathemat ic iansta lk  about  one- to -one  mapp ings  (wh lch  nevermade any sense  to  him in mathematics) byt ry ing  to design secret codes in some of thelanguage games (eg Pig Lat in and other ones)Another  impor tant  feature  of our  approach  weethat  the students extended the range of the i r"sub jec t ive ly  computab le"  p rob lems,  wh ichhe lped  them to  rep lace  the i r  v iew o f  thecomputer being a giant adding machine with themore  adequate  v iew of being s genera li n fo rmat ion  process ing  dev ice .
We chal lengedthe i r  views th ink ing  about the computer .Despite the fac t  that computation is s t i l l  ini t s  infancy there are many strong be l ie fs  whetcomputers  a re ,  whet  they  can do and what  theycan not  do .By being exposed to the complex problemsmentioned above the students got fami l ia r  withgeneral  problem so lv ing  ideas aboutrepresentat ions ,  p lanning and debugging.
Thein tu i t i ve  understanding which a person hasabout h i s /her  own language provided the basisthat  debugging incomplete and incor rec tprograms becomes  an easy - to -grasp  ac t iv i ty ,because  bugs in language programs have a highv is ib i l i ty  ( ie  we can  d i scover  them byi nspect ion  and not only by extens iveca lcu la t ions  l i ke  i t  i s  the  case  in  numer ica lcomputations).Problems in CL prov ide good prototypes  tounderstand the theoret i ca l  re levance ofdebugging.
Opposed to the dominant view in114computer sc ience,  where many people regard bugsas an awkward  obstac le  (or as an ind icat ionthat  the programmer  is unable to think c lear lyand care fu l ly  enough)  we cons ider  bugs  aspotent ia l l y  in fo rmat ive  f r iends  and as as tar t ing  po in t  to f ind  out  about  thed i sc repanc ies  between 'a  spec i f i ca t ion  (a model,e theory) and an imp lementat ion  (s program).
InCL, most  peop le  are  aware  that if a conf l ic ta r i ses  we can not  a lways  conc lude  that thespec i f i ca t .
ions  are  cor rect  and theimp lementat ion  is wrong (as in Ga l i leo 's  case,where  the theory  was wrong and his data werecor rec t ) .Work ing  on the pro jec ts  descr ibed  above, thes tudents  can do work  wh ich  is c lose  to theresearch  f ront  ( i f  they would have done theirwork ten years ear l ier  they could have earned ePhO degree  w i th  it).
Th is  makes  this subjectmater ia l  once again more in terest ing  than muchof mathemat ics  where the students  have to thinkabout  what  is not even  c lose  to the currentresearch front.9.
\ [mpi r ice l  f ind inqeMost  of the hypotheses  and asser t ions  of theprev ious  sect ions  ere  suppor ted  by theempir ica l  work in our project .
We have not madean e f fo r t  to do any kind of formal eva luat ion,but  we have  car r ied  out  a la rge  number  ofin fo rmal  invest igat ions  to unders tand  theimpact  of our  approach .
S tudents  f i l l ed  outquest iona i res ,  par t i c ipated  in th ink -a loudprotoco ls  for many problem solv ing s i tuat ionsend we t r ied  to unders tand  their programs andthe bugs they produced dur ing the so lut ion  of acomplex problem.
There is no space here to talkabout  th is  in deta i l ;  the in fo rmat ion  isdocumented  in KL ING et al(1977) end F ISCHER(1978 end 1979).We be l ieve  that  our approach turned out to bevery  success fu l .
The students  en joyed work ingin our laboratory  and they learned a lot aboutlanguage as wel l  as general  prob lem so lv ing sndprogramming sk i l l s .
Espec ia l l y  s tudents  withl i t t le  in teres t  in mathemat ica l  prob lems weremot ivated  by language-or iented  appl icat ions .They cou ld  work  in an ac t ive  mode andinvest igate  arb i t ra ry  fo rmal i sms andcon jec tures .
They cou ld  see that  ideas  froml ingu is t i cs  cou ld  he lp  them to unders tandprob lems in o ther  domains,  which supports  ourhypothes is  that  p rob lems from CL can serve asan entry point and as a t rans ient  object  to thewor ld  of p rob lem so lv ing ,  p rogramming endmathemat ics .AcknowledqementsI would  l ike to thank H.-D. Boecker ,  A. Fauser,3.
Laubsch  end O. Roesner  for many c r i t i ca lcomments  about ear l ier  drafts  of this paper.ReferencesBoecker,H.-O.
and G. Fischer (1978): " In terakt ivesProblemloesen mit Computerhilfe: Problemaufgaben zurL ingu is t ik ,  Informetik und Kuenstlichen In te l l igenz" ,Forschungsg~CUU, DarmstadtFischer, G. (1978).
"Probleme und Erfehrungen bei decProgrammiersuabildung im Informatik-Unterricht" in W. Arlt(ed) ; "EDV-Einsatz in Schule und Ausbildung", OldenburgVerlaq, Huenchen, pp ?0-75Fischer, G. (1979).
"Fehlerdiegnose - Grundbauatein fuer einVerstehen yon Lehr- und Lernprozessen", in Beitreege zumMethematikunterricht, Soh~oedel VerlegKey, A.
(1977): "Microelectronics and the personal computer",Scientific America 1977, pp 2}I-2~w~Kling, U., Boecker H.-D., Fischer, G., Freiburg, D.,Schneider, B. end Schroeder, 3.
(1977): "Projekt PROKOP",Forschongscjruppe CUU, DarmstadtPapert, S. (1979): "The LOGO Book", unpublished raft, MIT AILabSimon, H. (1978): "problem Solving and Education", CIP WorkingPaper No.
}91, Carnegie Mellon University115
