XMLTrans :  a Java-based XML Trans format ion  Language forS t ructured  DataDerek Walker and Dominique Petitpierre and Susan Armstrong{Derek.
Walker, Dominique.
Pet it:pierre, Susan.
Armsl;rong}@?
ssco.
unige, chISSCO, University of Genew40 blvd.
du Pont d 'ArveCH-1211 Genev~ 4SwitzerlandAbst ractThe recently completed MLIS DieoPro projectaddressed the need tbr a uniform, platform-independent interface for: accessing multiple dic-tionaries and other lexical resources via the In-ternet/intranets.
Lexical data supplied by dic-tionary publishers for the project was in a vari-ety of SGML forn\]ats.
In order to transforrn thisdata to a convenient standard format (IJTML),a high level transformation language was devel-oped.
This language is simple to use, yet power-ful enough to perlbrm complex transformationsnot possible with similar transformation tools.XMLTrans provides rooted/recursive transduc-tions, simila.r to tr,~nsducers used for na.tura.llanguage translation.
The tool is written instandard .lava and is available to the generalpublic.l IntroductionThe MMS l)icoPro project 1, which ran fromApril 11998 to Sept 1999, addressed the need fora uniIbrm, plattbrm-indel)endent i erface foraccessing multiple dictionaries and other lexi-cal resources via the lnternet/intranets.
Oneproject deliverable was a client-server tool en-abling trm~slators and other language profes-sionals connected to an intranet o consult dic-tionaries and related lexica.1 data from multiplesources .Dictionary data was supplied by participat-ing dictionary publishers in a variety of propri-etary formats 2.
One important DicoPro mod-ule wa.s a transformation language capable of1DicoPro was a project funded within the MullAlin-gum hfformation Society programme (MLIS), an EU ini-t iative launched by the European Commission's DG XIlIand the Swiss Federal OIrtce of Education and Science.2Project participants were: IlarperCollins, HachetteLivre, Oxford Unlversit~y Press.standardizing tile variety of lexical data.
Tilelanguage needed to be straightforward enoughtbr ~ non-programnmr to master, yet powerfulenough to perform all tile transfbrmations ec-essary to achieve tile desired output.
The re-sult of our efforts, XMLTrans, takes as inputa well-lbrmed XML file and a file containing aset of transformation rules and gives as outputthe.application of the rules to the input file.The transducer was designed tbr the processingof large XML files, keeping only the minimumnecessary part of the document in memory atall times.
This tool should be of use for: anyonewishing to tr~msform large amounts of (particu-larly lexical) data from one XML representationto another.At; the time XM1;l?rans was being developed(mid 11998), XML was only an emerging stan-dard.
As a. consequence, we first looked to moreesta.blished SGMI~ resources to find a. suitabletrans\[brmation tool.
Initial experimentation be-gan with I)SSSL (Binghaln, :1996) as a possiblesolution.
Some time was invested in develop-ing a user-friendly "front-end" to the I)SSSLengine .jade developed by James Clark (Clark,1998).
This turned out to be extremely cumber-some to implement, and was ~ba.ndoned.
Therewere a number of commercial products suchas Omnimark Light (Ominimark Corp; :1998),TXL (Legasys Corp; 1.998) and PatMI, (IBMCorp; 1998) which looked promising but couldnot be used since we wanted our transducer tobe ill tile 1)ublic domain.We subsequently began to examine avail-able XML transduction resources.
XSL (Clark,Deach, 11998) was still not mature nough to relyon as a core tbr tile language.
In addition, XSLdkl not (at the time) provide for rooted, recur-sive transductions needed to convert the com-plex data structures found in l)icoPro's lexica.11136d a.ta.F, din1)llrgh's La.ngua.ge 'lhchnology Groupha,d l)roduced a. nun~l)er of usefi,1 SGM\]ffXMI,ma.nipulaCion tools (I;.I'G, 11999).
Un\['ortunatelynone of these ma.tched our specific needs.
\]~brinstance, ~.qmltrans does not permit matchingof com l)lex expressions invoh, ing elements, text,and a?tributes.
A nether I/FG tool, ~.qu)g is morepowerful, 1)ut its control files have (in our opin-ion) a. non-intuitive and COml)lex syntax 3.Since a, large number of standardized XMLAPIs had been developed tbr the Java.
program-ruing language this appeared to be a. prondsingdirection.
Ill addition, Java's portal)fifty was a.strong dra.wing point.
The API model whichbest suited our needs was 1;he "Document Oh:ject Model" (DOM) with an underlying "SimpleA Pl for XMI2' (SA X) I>arser.The event-based SAX parser reads into lneln-ory only the elements in the input documentreleva.nt o the tra.nsfornl alien.
In efti.
'(;t, X MI,-Tra.ns is intended 1;o 1)recess lexicaJ entrieswhich a.re indel)en(lent of ca.cA other and tha.tha.ve a. few basic formats.
Since only one entryis ever in memory at a.ny given point in time,extremely la.rge files can be I)rocessed wil;h lownmmory overhea.d.The \])OM AI)I is used in the tra.nsforma.tionl)rocess to access the the element which is cur-rently in menlory.
The element is tra.nsformeda.ccording to rules sl)ecilied in a. rule tile.
Theserules a.re interpreted by XMl/l'rans as opera-lions to l>erfbrnl on the data through I;llo I)OMA.PI.We begin with a s\]ml)le examl>le to illus-tra.te the kinds of transformations l>erlbrmed byXMLTrans.
Then we introduce the languageconcepts a.nd structure of XMLTrans rules andrule files.
A comparison of XMLT,:a.ns withXSLT will help situate our work with respecl;to the state-of-the-art in XML data processing.2 An  example  t rans format ionA typical dictiona, ry entry might ha.ve a. surpris-ingly complex structure.
The various compo-nents of the entry: headword, pa.rt-ofst)eech ,pronunciation, definitions, translations, nla.ythemselves contain complex substructures.
For\])icoPro, these structures were interl)reted in o faThe UI'G have since developed another interestingt, ransformation tool called XMIA)erl.der 1;o construct I ITML output for tyl)ographi-cal rendition and also to extract indexing inibr-marion.A fictitious source entry might be of tile form:<entry><hw>my word</hw><defs><def num="l">first def.</def><def num="2">second def.</def></defs></entry>\'Ve would like to convert this entry to HTML,extra.cling tile headword fbr indexing pnrl)oses.Apl)lying the rules which are shown in sectiond, XML\]'rans generates the following outl)uC:<HTNL><!-- INDEX="my word .... ><HEAD><TITLE>my word</TITLE></HEAD><BODY><Hi>my word</Hl><OL><LI VhLUE="l">first def.</Ll><LI VhLUE="2">second def.</LI></OL></BODY></HTNL>If" this were an actual dictionary, the XMI/l'rans1,ransducer would itera.te over all the entries inthe dictiona.ry, converting ea.
(:h in turn to theOUtl)Ut format above.3 Aspects  of  the  XMLTransl anguageEach XMLTrans rule file contains a number ofrule sets as described in tile next sections.
'l.
'hetransducer attempts to match each rule in tileset sequentially until either a rule m~tches orthere are no more rules.The document I)TD is not used to check thevalidity of the input document.
Consequenl;ly,input documents need not be valid XMI,, butmust still be well-formed to be accel)ted by theparser.The rule syntax borrows heavily from tha.t ofregular expressions and in so doing it allows forvery concise and compact rule specifica.tion.
Aswill be seen shortly, many simple rules can beexpressed in a single short line.11373.1  Ru le  SetsAt tile top of an XMLTrans rule file at leastone "trigger" is required to associate an XMLelement(e.g, an element containing a dictionaryentry) with a collection of rules, called a "ruleset ~"The syntax for a "trigger" is as follows:element_name : ~ ru le_set_nameMultiple triggers can be used to allow differentkinds of rules to process different kinds of ele-ments.
For example:ENTRY : 0 normalEntryRulesCOMPOUNDENTRY : @ compoundEntryRulesThe rule set itself is declared with the followingsyntax:?
\[rule set name\]For examl)le4:normalEntryRules; the rules for this set fo l low; the declarat ion.
.
.The rule set: is terminated either by the end ofthe file oi: with the declaration of another ruleset.3.2  Var iab lesIn XMLTrans rule syntax, variables (prefacedwith "$") m:e implicitly declared with their firstuse.
There are two types of variables:?
Element varial)les: created by an assign-ment of a pattern of elements to a. vari-M)le...For example: $a = LI, where <LI>is an element.
Element variables can con-tain one or more elements.
If a given vari-able $a contains a list of elements { A, B,C, .
.
.}
,  transforming $a will apply thetransformation i sequence to <A>,  <13>,<C> and so on.?
Attr ibute variables: created by an assign-ment of a pattern of attributes to a vari-able.
For Example: LI \[ $a=TYPE \], whereTYPE is a standard XML attribute.While variables are not strongly typed (i.e.
alist of elements is not distinguished from an in-dividual element), attribute variables cannot beused in the place of element variables and viceversa.4XML~l}'ans comments are preceded by a semicolon.3.3  Ru lesThe basic control structure of XMLTrans is therule, consisting of a left-hand side (LHS) anda right-hand side (RHS) separated by an arrow( " -  >").
The LHS is a pattern of XML ele-ment(s) to match while the RHS is a specitica-tion for a transfbrmation on those elements.a.a.1 The  Le f t -hand SideThe basic building block of the M tS is the ele-ment pattern involving a single element, its at-tributes and children.XMLTrans allows for complex regular expres-sions of elements on the t i t s  to match over thechildren of the element being examined.
Thefollowing rule will match an element <Z> whichhas exactly two children, <X> and <Y> (in theexamples that \[Bllow "..." indicates any comple-tion of the rule):z{ x Y } -> .
.
.
;XMH?rans supports the notion of a logical NOTover an element expression.
This is representedby the standard "\[" symbol.
Support for gen-eral regular expressions is built into the lan-guage grammar: "Y*" will match 0 or moreoccurences of the element <Y>, "Y+" one ormore occurences, and "g?"
0 o1" l occurences.In order to create rules of greater generality,elements and attributes in the LHS of a. rulecan be assigned to variables.
Per instance, wemight want to transform a given element <X>in a certain way without specifying its children.The following rule would be used in such a case:; Match X with zero or more unspeci f ied; children.X{$a*}  -> .
.
.
;In tile rule above, the variable $a will be ei-ther empty (if <X> has no children), a singleelement (if <X> has one child), or a list of el-ements (if <X> has a series of children.
Sinl-ilarly, the pattern X{$a} matches an dement<X> with exactly one child.If an expression contains complex patterns,it is often useful to assign specific parts to dif-ferent variables.
This allows child nodes to beprocessed in groul)s on the billS, perhaps beingre-used several times or reordered.
Consider thefollowing rule:Z{ $a = (X Y)* $b = Q} -> ... ;1138in this case $a contains a (possibly e,npty) listo\[' {<X>, <Y>} element l)airs.
The variable Sbwill contain exactly one <Q>.
If' this pal;terncannot be matched the rule will fail.Attribul;es may a,lso 1)e assigned to variables.
'l"he following three rules demonstrate some l>OS-sibilities:; Match any X which has an att r ibute ATTX\[ Satt = ATT \] -> ...;; Match any X which has an at t r ibute; ATT with the value "VALUE".X\[ Satt = ATT == "VALUE"\] -> ...;; Match any X with an attribute; which is NOT equal to "VALUE"X\[ Satt = ATT != "VALUE"\] -> ...;The last tyl>e of exl)ressions used <)u the IAISa.re string expressions.
Strings are consideredto l)e elements in their own right, but; they ~l,reenclosed in (luotes and cannot have atl;ributepatterns like regular e,h'ments (:an.
A specialsyntax , / .
* / ,  is used to mean a, ny element whichis a string.
The following are some sample stringmatching rules:; Match any string/ .
, /  -> .
.
.
;; Match text "suppress" & newline.
"suppress\n"-> .
.
.
;3 .3 .2  The  R ight -hand S ideThe R, II,q SUl)l)lies a COllStruction pa.ttern R)r tiletra, nsformed 1;tee node.A simple rule might be used to tel)lace a,ndemenI, and its contents wit\]l some text:X -> "Hello world"l"or the input <X>Text</X>,  this rule, yieklsthe oul;l)ut string Hello wor ld .
A more usefulrule might strip off the enclosing element usinga variable refhrence on the \]J IS :$X{$a*} -> $aFor the input <X>Text</X>,  this rule gener-ates glle oul;l)lll; Text.
Elements lnay also be re-nnmed while dmir contents remain unmodified.The tbllowing rule demonstrates this facility:$X{$a*} -> Y{$a}\]ibr the input <X>Text</X>,  the rule yieldsthe outl)ut <Y>Text</Y>.
Note that any chil-dren o\[' <X> will be reproduced, regardless ofwhether ghey are text elements or not.Attribute varialJes may also be ,sed in XML-Trans rules.
The rule below shows how this isaecomplished:X \[$a=ATT\] {$b*} -> Y \[OLDATT=$a\] {$b}Given the input <X ATT="VAL">Text</X>,the r.le yields the output <YOLDATT="VAL" >Text  </Y  >.l{ecursion is a fundamenta,\[ concept usedill writing XMLTrans rules.
The exl>ression@set_name(var iab lemame)  tells the XML-Trans transformer to continue processing on theelements contained ill tile indica.l;ed variable.l'br instance, @setl($a) indicates that the el--ements contained in the va.l'ial)le $a shoukl beprocessed by the rules in the set setl.
A spe:cial notation ?
(var iab le~ame)  is used to tellt;he trausi'ormer to contin,e processing with thecurrent rule set.
Thus, if dm current rule setis set2, the expression @($a) indicates that\[)recessing sho,l<l coudnue on tile elelnent,s inSa using the rule set set2 .
the following rule(lemonstra,tes how 1;r~llSOFlllalJOllS ca,n \])e ap-plied recusively to an element:X{$a*} -> Y{e($a)}"Text" -> "txeT"For the input element <\>Text</ \>,  the rulegenerai;es the output <Y>txeT</Y>.
\])ifl'erentrule sets Call 1)e accessed as ill the following rulefile segment:X : setl@ setlX{$a*} -> Y{?set2($a)}"Text" -> "txeT"@ set2"Text" -> "Nothing"Initially, set1 is invoked to process the el<;=merit <X>,  but then the rule set set2 is in-yoked to 1)recess its children.
Consequently,for the input <\>Text</ \>,  the outing; is<Y>Nothing</Y>.11394 Rules for the examplet rans for lnat ionThe transformation of the example ill section2 can be achieved with a few XMLTrans rules.The main rule treats the <entry> element, cre-ating a HTML document fl'om it, and copyingthe headword to several places.
The subsequentrules generate the HTML output from section 2:entry : ?
entrySet@ entrySetentry{$a=hw Sb=defs*}-> HTML?
"<!-- INDEX=" Sa .... >"HEAD{TITLE{$a} BODY{HI{$a}?
($b)}}defs?$a=def*} -> 0L{@($a)}def \[$att=NUM\] ?$a*}->LI \[VALUE=$att\] {$a}5 Colnparison with XSLTThe advent of stable versions of XSLT (Clark,2000) has dramatically changed the landscapeof XML transformations, so it is interesting tocompare XMLTrans with recent developmentswith XSLT.lit is evident that the set of transformationsdescribed by the XMLTrans transformation lan-guage is a subset of those described by XSLT.
Inaddition, XSLT is integrated with XSL allowingthe style sheet author to access to the renderingaspects of XSL such as \[brmatting objects.Untbrtunately, it takes some time to learnthe syntax of XSL and the various aspects ofXSLT, such as XPath specifications.
This taskmay be particularly difficult for those with noprior experience with SGML/XML documents.In contrast, one needs only have a knowledge ofregular expressions to begin writing rules withXMLTrans.6 Conc lus ionThe XMLTrans transducer was used to success-fully convert all the lexical data for the l)icoProproject.
There were 3 bilingual dictionairies andone monoligual dictionary totalling 140 Mb intotal( average size of 20 MB), each requiring itsown rule file (and sometimes a rule file for eachlanguage pair direction).
Original SGML fileswere preprocessed to provide XMLTrans withpure, well-formed XML input.
Inputs were ina variety of XML formats, and the output wasHTMI,  Rule files had an average of 178 rules,and processing time per dictionary was aI)proxi-lnately I hour (including pre- and postprocesss-ing steps).This paper has presented the XMI,Transtra.nsduction language.
The code is portableand should be executable on any platform forwhich a .\]aw~ runtime environment exists.
Afree version of XMLTrans can be downloadedfromS: h t tp  :/ /?ssco-www.
unige, ch/proj  ects/d i copro_publ i c/XMLTrans /ReferencesBingham, 11.:1996 q)SSSL Syntax ,.qunlnlal'y In-dex', a.t http://www.tiac.net/uscrs/bingham/dssslsyn/indcx, htmClark, J.:1998 'Jade - James' \])SSSL Engine',at http://www.jclark.com/iadc/Clark, J.
Ed.
:2000 'XSL Transformations(XSLT) Version 1.0: W3C Recommendation16 November 1999,' athttp://www, w3.
ow/TR /1999/l~l'~'C-a:slt-19991116Clark, J. and Deach, S.
eds.
:1998 'ExtensibleStylesheet Language (XSL) Version 1.0 W3CWorking Draft 16-December-1998' ath~p://w,~w, a.o,~j/Tl~/i OgS/WD-.,.sl-19981210Glazman, D.:\]998 'Siml)le Tree 'l'ransformationSheets 3', at htlp://www, w3.
org/77~,/NO I'1~'-,~7"/S'3IBM Corp.:1999 qBM/Alphawork's l)atML ', ath ttp :///www.
alph, aWorks.
ibm.
com /tech /patmlLanguage Technology Group:1999 q,T XMLversion 1.1' athttp://www.
Itg.
cd.
ac.
uk/softwarc/xml/indcx, htmILegasys Corp.:1998 'The TXL Source Transfor-mat;ion System', athttp://www.qucis.quccnsu.ca/ Icg sys/TXL_lnJ'o findcx, h t mlOmnimark Corp.:1998 'Omnima.rk CorporationHome Page', athttp ://www.
omnimark, corn~5Users will also need Sun's SAX and DOM Javalibraries (Java Project X) available from:http : / / j  ava.
sun.
com/product s/ j  avapro j ectx/index, html:1140
