Slot GrammarsMichae l  C. McCordComputer  Science Depar tmentUniversity of KentuckyLexington, Kentucky 40506This paper presents an approach to natural language grammars and parsing inwhich slots and rules for filling them play a major role.
The system described providesa natural way of handling a wide variety of grammatical phenomena, such as WH-movement, verb dependencies, and agreement.1.
IntroductionThis paper presents a formalism for natural lan-guage grammars, with accompanying parser.
Thegrammars are called slot grammars because they areorganized around slots (grammatical relations) andrules for filling them.
The parser works bottom-upand maintains, for each phrase being built up, a listcalled the available slots list, ASLOTS.
A phrasecan grow by having one of the slots in its ASLOTSlist filled by a suitable adjoining phrase.As a phrase grows, its ASLOTS list generallyshrinks, because slots are ordinarily removed fromASLOTS as they get filled.
However,  a slot can bemarked as multiple and then receive more than onefiller.
A more interesting exception to the shrinkingof ASLOTS is that the procedure for filling a slotmay operate on ASLOTS itself and add new slots toit.
The operation of raising builds such new slots as"copies" of slots in the ASLOTS list of a fillerphrase.
Certain standard grammatical constructions,such as WH-movement ,  can be handled with thisraising operation.The parser processes the words of a sentencefrom left to right, at each stage working out all theslot-fillings that develop when the new word isthrown in with the phrases that have already beenbuilt up.
However,  a given phrase grows middle-out.Its history begins with a word which is its head, andits slot-fillers may be adjoined on the left or theright.
A left-adjunction, if appropriate, is madeimmediately, because the filler already exists; but ar ight-adjunction waits till more words have beenprocessed.
Middle-out construction allows moredata-directed control.
For instance, the initial valueof the ASLOTS list of a phrase is determined par-tially by the lexical entry for its head word.In computational linguistic background, the sys-tem is most closely related to the augmented phrasestructure grammars (APSG's)  of George Heidorn(1972,1975).
In APSG's,  syntactic and semanticslots (relation attributes) are heavily used, thoughnot as systematically as in slot grammars, becausethe APSG system does not maintain an ASLOTSlist.
The APSG parsing algorithms are bottom-up;and in the sample grammars, phrases are usuallybuilt up in a middle-out fashion, starting with a headword and adjoining items on the left or the right.Although slot grammars are organized mainlyaround slots, they also make use of states, and thushave a relationship to the augmented transition net-works (ATN's)  of Woods (1970,1973).
But the useof states in slot grammars is much more constrainedthan in ATN's,  and, in general, slot grammars arecontrasted with ATN's  in the paper.On the linguistic side, the theory proposed ismost closely related to work in the systemic gram-mar tradition (Hudson, 1971,1976; McCord, 1975,1977), especially to Hudson's  theory of daughter-dependency grammar (Hudson, 1976).
1 The work ofKac (1978) is also related; and there are some con-nections to the tradition of Kenneth Pike andCharles Fries (Cook, 1969), at least in the basicnotion of slot and filler.The paper is intended as a contribution to naturallanguage syntax and parsing.
Very little is saidabout semantics.
However, the system could readily1 I wish to thank Richard Hudson for many usefuldiscussions pertinent to the present work.Copyright 1980 by the Association for Computational Linguistics.
Permission to copy without fee all or part of this material isgranted provided that the copies are not made for direct commercial advantage and the Journal reference and this copyrightnotice are included on the first page.
To copy otherwise, or to republish, requires a fee and/or specific permission.0362-613X/80/010031-13  $01.00American Journal of Computational Linguistics, Volume 6, Number 1, January-March 1980 31Michael C. McCord Slot Grammarsbe augmented with procedures that build up seman-tic interpretations along with syntactic analyses.
Insuch a "complete"  system, semantic and pragmaticknowledge would be applied concurrently with syn-tactic knowledge; but syntax would still play a guid-ing role in the processing.Section 2 of the paper, The centrality of slots,argues for the advantages of an ASLOTS list, mainlyin connection with verb dependencies, unboundedmovement rules, and conjunctions.
Section 3, Statesand slots, explains how states are used and basicallyhow slot-filling takes place.
A simple diagrammaticnotation for slot grammars is introduced.
Section 4,Formal representation of syntax, describes the formof the input of syntax to the program (which is writ-ten in LISP).
Section 5, Representation of frames bythe system, gives details of the data structures usedby the system.
Section 6, The lexicon, describes theformal representation of the lexicon, and argues forsome of the advantages of data-directed control.Section 7 is an Outline of the parsing algorithm.
Sec-tion 8 gives A sample grammar and discusses someof the linguistic choices made in it.
Section 9 is aSummary of the characteristics of the system.2.
The centrality of slotsIn natural language parsing, common controldevices are the use of states (as in transition net-works) and the examination of individual slots andflags.
These devices are used in slot grammars, butin a restrained way.
The most central control deviceis the maintenance of the available slots list,ASLOTS.
The claim of this section is that this islinguistically and computationaUy natural, especiallyin conjunction with bottom-up parsing and middle-out construction of phrases.The ideas will be illustrated with the formation ofverb phrases (VP's).
Following Heidorn (1972,1975), I use this term to include a verb with any ofits sisters, even the subject.
The data structure usedby the slot grammar system for analyzing a VP, dur-ing parsing, is called the VP frame.
This is an asso-ciation list of registers and their values, much as isused in ATN parsing (Woods, 1973).
The values ofregisters can be procedures as well as "declarative"structures.
There is some parallel of characteristicsof these frames with the frames of Minsky (1975)and Winograd (1975).
Complete details will begiven in Section 5.The main register of concern now is ASLOTS.The initial ASLOTS register for a VP frame mightcontain the list (SUBJ IOBJ OBJ ADVL).
If theSUBJ slot can be filled, then the system forms anew VP frame showing SUBJ filled and having itsASLOTS reduced to (IOBJ OBJ ADVL).
Someslots, such as ADVL (adverbial), may be marked asmultiple slots in the grammar, and these are not re-moved from ASLOTS when they are filled.
Themembers of ASLOTS are in general optionally filled.Any checking for obligatory slots must be done ex-plicitly in the grammar.
Although ASLOTS is storedas a list, it is treated as an unordered set; the posi-tion of a slot in ASLOTS has no effect on whetherit can be filled.One advantage of this approach is that one canexpress verb-dependencies n an immediate and sim-ple way.
Instead of classifying verbs by featureslike transitive, one can just initialize the ASLOTSregister of the VP frame so that it contains the slotOBJ.
The initialization information that is special toa given verb is stored in the lexical entry for theverb, in a list of slots called the sister-dependency listof the verb.
(These slots correspond roughly tosister-dependency rules in the theory of Hudson,1976.)
For example, the sister-dependency liststored with the verb give might be (IOBJ OBJ).When a VP frame is formed with give as its head, itsinitial ASLOTS will include (IOBJ OBJ).
Certainother slots, such as SUB J, AUXL (auxiliary), andADVL,  are common to all verbs, so it would beredundant o list them in the lexicon.
These aredefault slots and are listed in the general syntax ofthe VP.
(These slots correspond roughly todaughter-dependency rules in Hudson, 1976.)
In set-ting up the initial value of ASLOTS, the parser au-tomatically combines the default slots with thesister-dependency slots of the particular verb, sothat the initial VP frame for give would haveASLOTS = (SUBJ AUXL ADVL IOBJ OBJ).This treatment of verb-dependencies is moredirect than the use of transitivity features or encod-ing in transition network states, because this initialASLOTS list expresses more directly what the verb"needs" to be the head of the VP.
The semanticinterpretation of the VP should be built (partially)from these slots and their fillers, and the syntax ofthe VP is guided by the filling of these particularslots.
Furthermore, this method ties in nicely withthe middle-out construction of the VP; search pro-ceeds outward from the item that sets the goals.Not only does the slot grammar system initializeASLOTS appropriately, but it also updates ASLOTSas parsing proceeds.
At any point, ASLOTS pro-vides a natural expression of what remains to beadjoined to the VP.
Most parsers (e.g.
ATN andAPSG parsers) keep track of what slots have beenfilled, but it seems reasonable also to keep track ofwhat slots may yet be filled, and use these in thecontrol mechanism.
Then rules that might be ap-plied to fill a slot like OBJ never become activatedif OBJ is not available.For instance, Heidorn (1972) has a rule roughlylike the following:32 Amer ican Journal  of Computat iona l  Linguistics, Vo lume 6, Number  1, January-March  1980Michael C. McCord Slot GrammarsVP(TRANS,-~OBJ) NP - -> VP(OBJ=NP) .This says that when a transitive VP with OBJ slotunfilled is fol lowed by an NP, then a new VP isformed with OBJ filled by the NP.
The rule will betested every time a VP is formed, and this will befruitless if the verb is not transitive (cannot take anOBJ) or if it already has an OBJ.
Notice that OBJis (implicitly) mentioned three times (counting theTRANS) in the rule, whereas one feels somehowthat OBJ should be mentioned only once, since therule is about filling the OBJ slot.
Furthermore, ifone had a slot that could be filled by more than onekind of filler (not just an NP) then this sort of rulewould have to be duplicated for each type of filler.The appropriateness of basing search on anavailable-slots list seems especially clear in a lan-guage like Japanese with a rather free order of VPconstituents.
Suppose a grammar is to be writtenwhich captures the simple idea that the verb comesat the end of the VP, and the preceding NP's havecase markings and can come in any order.
In a slotgrammar, the verb can activate a VP frame whichhas an ASLOTS list appropriate for that verb.
Thenthe VP frame "looks to the left", filling slots in AS-LOTS, and removing non-multiple slots from AS-LOTS as it goes.
In a situation that starts with, say,four slots and removes all but one, only this one slotwill be relevant for further expectations in lookingto the left, and rules will not be attempted needless-ly.Still another reason for basing expectations onASLOTS has to do with the way raising construc-tions can be treated in bottom-up, middle-out analy-sis.
Many languages allow unbounded raising ofitems, as in(1) Which chair does Mary believe John saidhe was sitting in?Here the question arises as to what syntactic rolethe initial NP which chair fills.
Two VP levels and aPP down, there is a slot OBJ which is the object ofthe preposition in.
Does which chair fill OBJ direct-ly?
If we try to write rules which accomplish this,we have to make them search down VP chains ofarbitrary length and be aware of possible branchingdue to conjunctions, as in(2) Which chair does Mary believe that AI boughtand John was sitting in?It seems that the rule for filling the object of thepreposition should not have to "know about" thesecomplications.
The complications are created by VPcomplementation of verbs like believe and by con-junctions like and.
The constructions that create thecomplications hould take responsibility and shouldsmooth the way for the placing of which chair.In slot grammars this is handled by the operationof raising slots.
Every slot has a procedure attachedto it called its slot-rule, which can test for the sortsof fillers the slot might have and can perform ac-tions.
RAISE is a possible action, and is illustratedas follows.
Consider a sentence like(3) Which chair does Mary believe that AI bought?The VP frame for believe has a slot COMP (verb-complement) which can be filled by another VP.
Tothe right of believe is a VP that AI  bought.
This VPis " incomplete" in the sense that its ASLOTS regis-ter still contains a slot OBJ.
In the slot-rule forCOMP there is an instruction to RAISE all membersof the filler's ASLOTS that belong to a specifiedlist.
(Some slots, such as verb auxiliaries, are notraised by COMP.)
Raising a slot means creating anew member of the matrix VP's ASLOTS which is asort of " image" of the lower slot.
It has the sameslot-rule and it is marked as being associated withthe lower slot.
A slot may be raised through severallevels, but a path showing its origin is maintainedfor the purpose of semantic interpretation.In sentence (3) when the COMP slot for believeraises the lower OBJ to a new slot OBJ1, this isavailable to be filled by which chair at a certainstage when the top VP is looking to the left.The WH-movement  hat appears in sentences(1),(2), and (3) is a special kind of unbounded leftmovement (the left-dislocated item can be moved outof an unbounded number of embedded VP's).
An-other kind is topicalization, as in(4) This chair, she said you could put in the room.Raising applies to unbounded left movement in gen-eral, and in fact the same RAISE operation invokedby the VP COMP slot is used for handling both (3)and (4).In ATN grammars, unbounded left movement ishandled by the HOLD facility (Woods, 1970, 1973).The ATN puts the left-dislocated item (like thischair in (4)) on a special stack by the HOLD action,and then at a later opportune time removes it fromthe stack while traversing a virtual arc --- in the caseof (4), an arc parallel to the verb-object-NP arc ---so that this chair becomes the object of put.The HOLD method does not mix well withbottom-up parsing, however, because it depends onusing the complete left context at each point.
(Theitem retrieved on a virtual arc could have been heldanywhere from the beginning of the sentence.)
Sincebottom-up,  middle-out analysis appears to be bestfor natural language (as this paper attempts toshow), and since RAISE is a viable alternative toHOLD,  we have an argument against HOLD.Furthermore, raising appears to be more general-ly applicable than HOLD.
As hinted at in the dis-cussion of (2) above, conjunction constructionsshould also involve raising.
In that sentence, theAmerican Journal of Computational Linguistics, Volume 6, Number 1, January-March 1980 33Michael C. McCord Slot Grammarsand frame should be responsible for creating theconjoined VP frame spanning that AI bought andJohn was sitting in, whose ASLOTS contains a slotOBJ1 which is related to both the object of boughtand the object of id, by raising.
This OBJ1 is fur-ther raised by the COMP slot of believe to a slotwhich is finally filled by which chair.The details for raising by conjunctions have notbeen completely worked out, but the general situa-tion seems tO be roughly as follows.
When a con-junction frame sees two frames of the same categoryon either side (the two conjuncts), it should con-struct raised slots corresponding to the intersectionof the ASLOTS lists of the conjuncts.
(In calculat-ing the intersection, two slots that are already raisedare considered equal if they originated from thesame slot.)
For example, in the sentence(5) John ate and slept.we could consider the ate frame to have ASLOTS =(SUBJ AUXL ADVL OBJ), but the slept framewould have ASLOTS = (SUBJ AUXL ADVL).The intersection would be (SUBJ AUXL ADVL),and these slots would be raised to slots (SUBJ1AUXL1 ADVL1) in the conjoined VP ate and slept.Then John fills SUBJ1, to form the complete VP(5).
There is no object slot available in the con-joined VP.
On the other hand, the conjoined VPcooked and ate would have both a subject and anobject slot available, and we could get(6) John cooked and ate the pizza.In Woods (1973) conjunctions were handled by asystem facility designed specially for conjunctions ---meaning that the rules for conjunctions are not inputby the grammar writer.
The bottom-up, middle-outanalysis with raising outlined above seems morestraightforward and more controllable by the gram-mar writer.
Consider a raising treatment possiblefor the following example discussed in Woods(1973):(7) John drove his car through andcompletely demolished a plate glass window.The and frame has on its left the VP drove his carthrough with ASLOTS = (SUBJ AUXL ADVLOBJ1), where OBJ1 is raised from the OBJ slot inthe incomplete PP by ADVL.
To the right is theVP completely demolished having ASLOTS = (SUBJAUXL ADVL OBJ).
The and frame creates theconjoined VP drove his car through and completelydemolished, having raised ASLOTS = (SUBJ1AUXL1 ADVL10BJ2)  corresponding to the essen-tially identical ASLOTS lists of the two conjuncts.Then SUBJ1 is filled by John and OBJ2 is filled bya plate glass window, for the analysis of the completesentence.3.
States and slotsIf all phrases had their heads at the beginning orend, and  their other slots could be filled in any or-der, then all searching could be controlled by theunordered set ASLOTS.
Many languages (includingEnglish) have an intricate combination of free place-ment of some slot-fillers with ordering restrictionson others.
One conceivable method of controllingorder would be to include tests in slot-rules for theposition of the filler relative to other slot-fillers; butthis seems to result in an unreasonable amount oftesting, especially in languages in which there is agood deal of fixed order.
It appears to be advisableto use some notion of "state" or "stage" in buildingphrases.
In middle-out construction, another easonfor using states is to control the direction in whichthe construction is proceeding; adjunctions might bemade on the left, then the right, then switch direc-tions again.In a slot grammar, each phrase frame has a regis-ter STATE, which contains an atom somewhat likean ATN state.
Each state has a direction, LEFT orRIGHT, associated (permanently) with it, the ideabeing roughly that if a phrase is in state S, then it islooking for fillers in the direction associated with S.A restriction placed on states in slot grammarswhich makes their use much more constrained thanin ATN's is that the set of states for a given phrasetype (like VP) is linearly ordered.
As a phrase getsbuilt up, it can move ahead, but can never moveback, in this ordering of states.
Because of the line-ar order, the term stage might be more suggestivethan state.In the grammar, slots are related to states in thefollowing way.
Each slot is specified to be attachedto one or more states.
To fill a given slot with aproposed filler, one must be able to advance (or notmove back) from the current state of the matrixphrase (along the linear order of states) to a state towhich the slot is attached, with the direction of thestate corresponding to the direction of the proposedfiller.The following diagram for a small VP grammarillustrates the use of states and slot attachment.
(8) 67\] (TqAUXL > AUXL  OBJSUBJ  >ADVLThe states are $1, $2, and $3.
Here, and in futureexamples, the integers in the state names indicatetheir linear order.
States $1 and $2 have directionLEFT  and $3 has RIGHT.
Slots are written underthe states to which they are attached.
Note thatAUXL is attached to both $1 and $2.
The sign >34 Amer ican Journal  of Computational Linguistics, Volume 6.
Number 1.
January-March 1980Michael  C. McCord Slot Grammarsafter a slot indicates that it is attached as a state-advancer.
This means that if the slot is filled whilethe frame is in the given state, then the frame willadvance to the next state (otherwise it stays in thegiven state).
AUXL  is attached to $2 as a state-advancer, but to S1 as a non-state-advancer.
SlotsADVL and AUXL are multiple slots, although thatis not shown in the diagram.Here is an example of VP construction using VPgrammar (8).
The successive VP's constructed areunderlined, and to the side of each underline isshown the slot just filled and the state the VP is inafter the slot-filling.Could A1 have already left the bus?
(9)HEAD, S IADVL, S IAUXL, S ISUBJ, S 2AUXL, S 3OBJ, $3When SUBJ is filled at S1, the frame is advanced to$2, where it may get an AUXL  in a question sen-tence.
Several AUXL 's  may appear in state S1, butonce the SUBJ has been filled, there is a chance foronly one more AUXL,  because an AUXL  at $2 willadvance the frame to $3.
Also note that there is nochance for an ADVL between the SUBJ and thepreposed question AUXL,  as in(10) *Could a lready kl have left the bus?Consider another example:( 11 ) A1 has left the bus.HEAD, S IAUXL, S ISUBJ, $2OBJ, $3This illustrates, in the filling of OBJ, that a slot canbe filled even when the frame is not yet in a state towhich the slot is attached; it just has to be possibleto advance to such a state S (only the first such isused).
After the filling, if the slot is attached to Sas a state-advancer, then the frame will be advancedto the next state after S; otherwise it stays in stateS.The use of states in slot grammars can be consid-ered a generalization of some techniques used byHeidorn in APSG's.
In the grammar of Heidorn(1972), a VP first works to the right getting allpostmodifiers of the main verb, then works to theleft getting, all premodifiers.
To control this, Hei-dorn used a register PRM (standing for"premodif ied") as follows.
PRM is preset to off.Every rule that picks up a postmodifier checks thatPRM is still off, and every rule that picks up a pre-modifier sets PRM to on.
The slot grammar egisterSTATE can be considered a generalization of PRM,in that its values are atoms that control direction ofsearch.In a recent APSG grammar for NP's, Heidorn 2uses a technique which is even closer to our use ofstates.
3 He uses a register ML (standing for"modif icat ion' level")  which takes on integer values,and the numerical ordering is used in controlling thestages of building up an NP, allowing multiple direc-tion changes.
The left-hand sides of productionrules often check that ML is less than or equal to acertain value, and the right-hand sides set ML to acertain value.
This is similar to our requirement foradvancing states in slot filling.Now let us extend the VP grammar (8) to onewhich accepts a wider range of constructions.
(12)6q FbF3OBJ AUXL > AUXL IOBJ OBJADVL SUBJ > COMPADVL ADVLNote that there are two direction switches in thisgrammar.
First S1 and $2 go left; then there is aswitch to the right with $3 and $4, and then aswitch back to the left with $5.
Reasons for thiscomplication will be given below.
The additionalslots in this diagram are IOBJ and COMP.
IOBJ(indirect object) accepts only NP's; the semanticallyequivalent to- form is accepted by ADVL at $4.
(ADVL accepts, say, adverbs and PP's.)
COMP(complement) has VP fillers.This VP grammar is intended to capture the fol-lowing intuitive description of a way of building upa VP.
Starting at the head verb, we work left get-ting possible auxiliaries and adverbials.
At somepoint, we may get a subject.
If so, then there is achance for one more auxiliary (in the case of a ques-tion sentence).
Then we work to the right and maypick up an indirect object (with no other items in-tervening between it and the head verb).
Then, stillto the right, we pick up OBJ, COMP, or any num-ber of ADVL's ,  in any order.
Then, back to theleft, we might find an OBJ or any number ofADVL's .
Of course if OBJ has already been filledat $4, it will have been removed from ASLOTS andwill not be available at $5.
An example in whichOBJ is filled at $5 is(13) Which chair  did John buy ?OBJ AUXL SUBJ HEAD2 Private communication to the author.3 These two techniques were developed independentlyof each other.American Journal of Computat ional  Linguistics, Volume 6, Number 1, January-March 1980 35Michael C. McCord Slot GrammarsWhy are there two direction switches?
Acceptingfor the moment he reasonableness of starting to theleft with S1 and $2, why not continue left and make$5 the third state?
The answer involves raising.
Insentences like (1), (2), and (3), which chair fills anobject slot raised from a VP found by COMP at $4.So' $4 has to be visited before $5.It still might seem that one could make only onedirection switch by starting immediately to the rightafter the head verb, as was done in Heidorn (1972).One reason for going left initially has to do againwith raising.
The relative clause slot in the subjectNP can be raised to the right of the head verb, asin:(14) The man is here that I was telling you about.Even if this right extraposition were not handled bythe precise mechanism of raising, it seems reasona-ble that the subject should already be present in theVP before "placing" the extraposed modifier cor-rectly.Also, it seems plausible psychologically to go leftfirst, because the auxiliaries and the subject are soclosely related to the verb and their position usuallyidentifies their role.
But the role of a fronted itemlike which chair in sentences (1), (2), and (3) can-not be identified until a good deal of the rest of thesentence has been processed.4.
Formal representation of syntaxThe interpreter-parser is written in LISP 1.6 run-ning on a DEC-10.
There are two functions, SYN-TAX and LEX ICON,  which accept the grammarand preprocess it.
They are both FEXPR functions(receiving their arguments unevaluated).
The formof a call to SYNTAX will be described in this sec-tion.SYNTAX is called for each phrase-type, such asVP, NP, and PP.
The top-level form of a call is(SYNTAX phrase-typeSTATES:state-specification ...SLOTS:slot-specification ...DEFAULTS:slot ... )Before going into more details, let us look at anexample, the formal specification of the grammarshown earlier in diagram (8).
( SYNTAX VPSTATES :(Sl L) (S2 L) ($3 R)SLOTS :SUBJ(FLR NP) ($I >)AUXL(FLR AUX) (SI S2 >)ADVL *(OR (FLR ADV) (FLR PP)) ($I)OBJ(FLR NP) ($3)DEFAULTS :SUBJ AUXL ADVL )The general rules are as follows.
The state-specifications are given in the order to be assignedto the states.
The form of a state-specification is alist:(name direction \[test-action ... \])where the square brackets are metasymbols indicat-ing optionality.
The name is the name of the stateand can be any LISP atom.
The direction is L or R.A test-action, if given, is a LISP form which will beevaluated, and must give a non-NIL  result, for aslot-filling to succeed, whenever the frame is ad-vanced to the given state by the slot-filling.
Forexample, suppose given the state-specification($5 L (IS SUBJ))in a VP syntax.
If an attempted slot-filling advancesthe frame to state $5, then the test (IS SUB J) willhave to succeed (meaning that the SUBJ slot is al-ready filled) in order for the slot-filling to succeed.The general form of a slot-specif ication is asfollows:name \[*\] slot-rule state-attachmentsThe optional star indicates that the slot is multi-pie.
During parsing, the system takes care of re-moving non-multiple slots from ASLOTS as they getfilled,The slot-rule is a L ISP  form which can test forthe sorts of fillers the slot can have, and performactions.
In the sample grammar above, the slot-rules use the test (FLR cat), which requires that thefiller be of the category cat.
No actions are shownin this grammar; but possible actions are calls to theRAISE function and the setting of registers, andthese are exhibited in the grammar of Section 8,The last part of the slot-specification is the state-attachments.
The required form is( {state-name \[>\]} ... )In other words, one writes a list of state names,each optionally followed by the sign >.
If the sign> does follow the state, then the slot is attached asan advancing slot, otherwise as a non-advancingslot.
The meaning of this for state transitions wasdiscussed in the preceding section.The last part of the call to SYNTAX is the se-quence of default slots.
These are collected bySYNTAX into a list and stored on the property listof the phrase-type, to be used as described in Sec-tion 2.36 Amer ican Journal  of Computat iona l  Linguistics, Vo lume 6, Number  1, January-March  1980Michael C. McCord Slot GrammarsThere are a few "primitive" functions (like FLRand RAISE) supplied for writing slot-rules and statetest-actions.
These will be described as they appearin examples below.5.
Representat ion of frames by the systemAs mentioned earlier in Section 2, frames arestored as association lists:( {register value} ... )Because of the non-determinism in the processing, Ifollow Woods (1973) in setting registers by justtacking on the new register/value pair onto thefront of the frame.There are several special registers known to thesystem.
Two that have already been discussed ex-tensively are ASLOTS and STATE.
The others areas follows.
CAT contains the atom which is thephrase-type, such as VP, or, in the case of words,the basic part of speech, such as V or N. WORD,in the case of lexical frames, contains the actual(inflected) word, and ROOT contains the root form.FEATURES contains the list of atoms treated asfeatures.
For example, a VP might have FEA-TURES = (QUESTION PROGRESSIVE) .LB and RB contain, respectively, the left bound-ary and right boundary of the phrase or word.
Aboundary is an atom representing the space betweentwo words in the input sentence, or the start or end.
(A phrase always represents an analysis of a con-nected segment of words in the sentence --- all thewords between its left and right boundaries.
)FTEST stands for filler-test and contains a formwhich is evaluated (as a test-action) by the parserwhen the frame is tried as a filler.
More details onthis will be given in the next two sections.The final system register is FSLOTS, which isused to hold the results of already filled slots.
Thevalue of FSLOTS is another association list, of theform( {slot filler} ... )where each filler is of course another frame.
Theslot/fi l ler pairs in FSLOTS are placed in accordancethe actual positions of the fillers in the sentence.For instance, in the VPProbably John left yesterdayFSLOTS would be of the form(ADVL x SUB.I x HEAD x ADVL x).Notice that in this sort of association list, the sameregister can occur more than once, and an earlieroccurrence does not "hide" a later one.
There is asystem function(SLOTSET slot filler direction)which takes care of updating FSLOTS during slot-filling, putting the new pair on the correct side ofFSLOTS.
Maintaining FSLOTS as a reflection ofsurface order is useful for outputting parse trees,and it is also probably important for semantic inter-pretation.Notice that the terms register and slot are beingused in distinct ways.
Register is the general termfor one of the variables in our association lists.Slots are specific to the linguistic theory.
Besidesthe special slot HEAD,  they must be mentioned asslots in calls to SYNTAX; and any slot relevant toa given phrase frame will appear somewhere in itsASLOTS or FSLOTS.Although slot/fi l ler associations are all stored inthe register FSLOTS, each slot is also used as a reg-ister in the phrase frame.
As a register, a slot con-tains its slot-rule.
SYNTAX stores the slot-rule of aslot on the property list of the slot (under the prop-erty RULE) .
But this is basically a default rule, andthe system allows the lexicon to make exceptions, byinformation in the sister-dependency list for thehead item.
Thus, the slot-rule for COMP in theinitial VP frame for a verb like help can be specialto that verb.
To allow this flexibility, the slot-rulefor COMP is stored in the register COMP.
Further-more, it appears that the slot-rule for a given slot ina given phrase frame should actually be allowed tochange while the phrase is being built up.
Reasonsfor this will be given in the next section, c6.
The lexiconThe lexicon is accepted and preprocessed by theLISP function LEX ICON.
Each member of theargument list is a lexical entry, of the form:(word category \[feature\] ... \[form\] ... )Examples are(JOHN N SG PROPER)(GIVE V (VM GIVES GIVING GAVE GIVEN)(SD (IOBJ) (OB J ) ) )Here VM and SD stand for "verb morphology" and"sister-dependencies", and are actually LISP func-tions.What LEX ICON accomplishes for each lexicalentry is to produce frames associated with the wordsinvolved in the entry, and put them on the propertylists of the words under the property LEX.
Theseare frames for the word as filler, as well as initialframes for phrases in which the word is HEAD.
Forinstance, the LEX list for HAS in the trial grammarsconsists of a word frame which might become a fil-ler for the AUXL  slot in some VP, as well as a VPframe in which HAS is the main verb.The forms that appear at the end of a lexicalentry (such as the VM and SD forms above) areevaluated by LEX ICON and can add to the collec-tion of frames being constructed.
If no forms areAmerican Journal of Computational Linguistics, Volume 6, Number 1, January-March 1980 37Michael C. McCord Slot Grammarsgiven, LEXICON will only construct a single wordframe (for the word at the beginning of the entry).Forms like VM add inflected words to the rootword at the head-of  the entry, so that frames getconstructed for all these words.
I have not goneinto spelling rules for regular inflections, but thesecould easily be added.The SD form implements the ideas on sister-dependency slot lists discussed in Section 2.
A callto SD has the form:(SD {(slot \[slot-rule\])} ... )An example is(SD (OBJ) (COMP (FLR ADJ))).The slots listed are of course the sister-dependencyslots for the verb.
The optional slot-rule after a slotwill replace the slot-rule given for that slot in syn-tax; thus the latter should be considered a defaultslot-rule.
The function SD constructs the initializedphrase frame in which the verb is HEAD.
The(initial) ASLOTS list consists of the default slotsfrom the VP syntax plus the slots specified in SD.Also, any test-actions associated with the first stateof the VP are evaluated --- as if the HEAD ad-vances the frame to the first state.It was argued in Hudson (1977) that subject-verb agreement rules belong to morphology and notto syntax.
The main point of the argument is thatsome verbs make more distinctions than others.Considering the standard six combinations of personand number, one notes that nearly all English verbsmake a distinction only between the third personsingular and the other combinations --- and this isonly in the present tense.
The exceptions are thatthe modals make no distinctions (in present or past),and the verb be makes three distinctions in the pres-ent and two in the past.If we put subject-verb agreement in English syn-tax, we would presumably have to carry alongenough distinctions of person and number tO satisfythe fastidious verb be.
On the other hand, if thefinite verb is gave or can, there is no need forsubject-verb agreement to come up at all.
Anotherexample is that some determiners require numberagreement with the head noun in English, but forthe most common one of all, the, there is no needfor number agreement to enter the picture.As with sister-dependency slots, this is a casewhere data-driven processing is called for, and allagreement rules are put in the lexicon.
It was men-tioned in the preceding section that the systemknows about a frame register FTEST containing atest which must be satisfied when the frame is usedas a filler.
This is where we place the agreementcheck, and the lexicon can adapt it uniquely to theparticular type of verb involved.The FTEST employed for agreement uses a(FEXPR) function CHECK,  which is called as fol-lows:(CHECK slot test)For example, the filler frame for the verb has has inthe FTEST register:(CHECK SUBJ (NEGF IT PL))Here the NEGF test requires that the subject doesnot have the feature PL (plural).
It seems better toexpress it negatively, instead of requiring the SUBJto have the feature SG (singular), so that for VPsubjects as inThe boys' being there causes troublewe will not have to say that the VP subject is SG.When the finite verb is tried as a filler (either ofAUXL or the VP HEAD) and (CHECK SUBJ test)gets evaluated, what happens?
A problem is thatthe SUBJ may or may not have already been filledat this point, depending on whether we have certainquestion sentences or not.
I f  SUBJ is already pres-ent, CHECK applies the test to the SUBJ filler onthe spot.
Otherwise, it adds the test to the slot-ruleof SUBJ, by making a new SUBJ slot-rule of(COND (test original-SUB J-slot-rule)).Being able to change slot-rules in this way is anoth-er reason for storing slot-rules in the slot as register,as was discussed at the end of the preceding section.The lexical function VM actually takes responsi-bility for creating these CHECK's  as necessary forall verbs besides be and the modals.
For instance,VM will create a CHECK for GIVES, but none forGAVE.Another example of data-driven processing whichhas been put into the lexicon is the set of require-ments that English auxiliaries have on other auxiliar-ies and the main verb.
In the VP syntax, there issimply a multiple slot AUXL,  with no distinctionbetween kinds of auxiliaries, their ordering, or theirinflectional requirements.
But there is the well-known sequence:modal perfect-have prog-be passive-be main-verbwith the inflectional requirement that each auxiliaryhas on whatever verb follows it.One alternative would be to have four slotsMODAL PERF, PROG, and PASS.
But a problemis that this clutters up ASLOTS quite a bit, so that alot of slots would keep getting tried uselessly.
Itseems better to go more bottom-up and proceedfrom whatever verbs actually appear.
The AUXLfiller be, i f  it appears, can check whether the nextverb to its right is an ing-form or en-form, and candeclare that the VP is progressive or passive accord-ingly.
This test-action is put into the lexical entry38 Amer ican Journal  of Computational Linguistics, Volume 6, Number 1.
January-March 1980Michael C. McCord Slot Grammarsfor BE, and LEX ICON makes it part of the FTESTfor the be filler-frames.One thing that is done in syntax to facilitate thistesting is to keep a VP frame register VERB1 set tothe current left-most verb.
Each auxiliary has tocheck the features of VERB1.
This will appear inthe sample syntax given in Section 8.The ordering of the auxiliaries is strict, andchecks on this are also made in their filler-tests.Perhaps it is not even computationally necessary orpsychologically real to do this in parsing; perhapsone could leave it to generation.The multiple slot AUXL  collects what could bethought of as premodifiers of the main verb.
Ananalog in NP's is the multiple slot ADJC which col-lects premodifiers of the head noun, filled by certaintypes of adjectives, adjective phrases, and NP's.Here too, there are ordering restrictions as in big redhouse vs. *red big house, although it would seemfoolish to enshrine this in syntax by making lots ofslots for different types of noun premodifiers.
Anexample that makes AUXL look a little more free isthat in some American dialects, more than one mo-dal can be used, as in might ought to do that, or evenmight should do that.7.
Outl ine of the parsing algorithmThe parsing algorithm takes advantage of somepreprocessing done by the function SYNTAX.
Theinput to SYNTAX shows a linear order on the statesand shows each slot attached to certain states.
Re-call ( from Section 3) the conditions necessary forfilling a slot SL when the matrix frame is in stateST, and the proposed filler is on, say, the left.There must be a state s_> ST such that SL is attachedto s and the direction of s is LEFT.
Suppose suchan s exists.
Let ST1 be the first such.
If  SL is atta-ched to ST1 as a state-advancer, let STRANS be thesuccessor state of ST1; otherwise let STRANS =ST1.
If no s exists, let STRANS be NIL.
Let uscall STRANS the left-transform of state ST by slotSL.
The right-transform is defined similarly.
Thesestate transforms are precalculated by SYNTAX, andstored on the property lists of the slots, thus savingon search time.The heart of the parsing algorithm is a function(MODIFY IT MATRIX  DIR)It constructs all frames which result when the frameIT modifies (fills a slot in) the frame MATRIX  fromthe direction DIR.
(D IR=LEFT  means that IT ison the immediate left of MATRIX.
)MODIFY  proceeds as follows.
Let us assumethat DIR = LEFT  (the case DIR = R IGHT is en-tirely symmetric).
Let ST be the current state ofMATRIX.
Then for each slot SL in the ASLOTSlist of MATRIX,  MODIFY  determines whether ITcan fill SL by making the following five tests, in theorder given:(a) The left-transform STRANS of ST by SLmust be non-NIL.
(b) The slot-rule of SL is evaluated, and the re-sult must be non-NIL.
This result is called AC-T ION and is saved for use in test (d).
(c) The filler-test (the value of the FTEST regis-ter in IT) must evaluate to non-NIL.
(d) The ACT ION must evaluate to non-NIL.
(The reasons for this double evaluation of the slot-rule will be given below.
)(e) If STRANS is not equal to ST, then the test-action associated with STRANS is evaluated andmust give a non-NIL result.If these five tests are satisfied, then the frameMATRIX  is updated as follows.
SL is set to ITusing SLOTSET, as in Section 5.
ASLOTS is modi-fied by the deletion of SL if SL is non-multiple.STATE is set to the left-transform STRANS.
Final-ly, the left boundary of MATRIX  is set to the leftboundary of IT.
The presence of this new versionof MATRIX  is recorded by a function INSERT,described below.
Of course the old version of MA-TRIX  stays around, for possible use in other modifi-cations.Note that tests (b) and (d) perform a doubleevaluation of the slot-rule: The value obtained in(b) should be another LISP form (ACTION),  andthis is further evaluated in (d).
The reason for thisis that the action performed by a slot-rule may dis-turb registers that must be examined by the filler-test, used in (c).
This situation does not come up inthe sample grammar of the preceding section, but itwill be illustrated in the next section.
(In the gram-mar of the preceding section, all slot-rules just eval-uate to T if they do not give NIL,  so the action, T,is trivial, and (d) will be satisfied if (b) is.
)The top level function, PARSE, of the parsertakes a sentence, and processes its words left toright as follows.
It creates boundary markers forthe words (as it goes), and, for each boundarymarker B, it stores on the property list of B, underthe indicator RESULTS, the list of all frames prod-uced so far whose right boundary is B.For each new word W, PARSE looks on theLEX list of frames associated with W (produced bythe lexicon).
If this list is empty, W is not in thelexicon and parsing is halted with an error message.Otherwise, PARSE calls the function INSERT oneach frame in the LEX list.The goal of the function INSERT, when it isgiven a frame FR, is to work out all ways that FRcan modify, or be modified by, the frames that al-American Journal of Computational Linguistics, Volume 6, Number 1, January-March 1980 39Michael C. McCord Slot Grammarsready exist, as well as to record the existence of FRfor future modifications (after more words havebeen processed).
For the latter purpose, INSERTsimply puts FR on the RESULTS list of its rightboundary.
For the former purpose, INSERT doesthe following.
For each frame FR1 in the RE-SULTS list of the left boundary of FR, INSERTcalls(MODIFY FR FR1 'R IGHT)and(MODIFY FR1 FR 'LEFT) .Note the recursion that exists because INSERTcalls MODIFY  and MODIFY  can call INSERT.The recursion stops because MODIFY  does not callINSERT if no modifications are possible.When PARSE has processed the last word, itlooks for those VP frames that span the whole sen-tence, and it prints these out in an indented treeformat, as will be described and illustrated in thenext section.8.
A sample grammarThe syntax diagrams are shown in Figure 1, andthe input to LISP is shown in Figures 2 and 3.
Aportion of the lexicon is given later.Let us first look at the NP syntax.
An NP framebegins with the head noun in state N1.
The test-actions associated with this first state involveRAISEF,  which raises features from the most recentfiller (in this case, the head noun) to the matrixframe.
The result is that the number of the headnoun is made a feature of the NP itself.
From thehead noun, one can work left getting any number ofadjectives (ADJC is multiple).
If a determiner isselected (filling DETR)  then the NP is advanced tostate N2, so that no more premodifying adjectivescan be picked up.
Then one is ready for postmodifi-ers (in this case, PP's),  filling the multiple slot REL.But the frame can get into state N2 and receiveREL  fillers, as in tea with cream, without being ad-vanced there by DETR, just because of the fact thatN2 follows N1.The PP syntax is trivial, just having a prepositionas head, followed by an NP.The VP syntax is an extension of the grammarshown earlier in diagram (12).
The current gram-mar has a fairly complete treatment of the verb sys-tem.
As outlined in the section on the lexicon, therequirements of the verb auxiliaries are managed bykeeping a VP register VERB1 set to the currentlyleft-most verb.
This is initialized by the state test-action attached to state S1 (see Figure 2).
This isexecuted as soon as the HEAD verb is filled in(actually in the lexicon), setting the register VERB1to the value of the slot HEAD (i.e., to the frame forthe head verb).Updating of VERB1 is handled by the slot-rulefor AUXL:(==> (FLR V AUX) (= VERB1 IT ) )This rule is involved in a non-trivial application ofthe double evaluation scheme for slot-rules de-scribed in the preceding section.
When(==> test action)is evaluated, the test will first be evaluated.
In theabove example, this asks whether the filler is a verbwith the feature AUX.
If  the test gives NIL,  thenthe function = = > returns NIL, Otherwise, = = >returns the action, unevaluated.
The parser savesthis form and evaluates the filler-test for the currentfiller auxiliary, which needs to examine VERB1 be-fore it gets changed.
If this test succeeds, then theparser evaluates the action, (= VERB1 IT), whichupdates VERB1 to the new filler auxiliary.One addition appearing in the VP syntax above isthe B INDER slot attached to state $8.
This getssubjunctions like that, although, if, and whether atthe front of the VP.The other additions of states have to do with theauxiliaries and the subject in question sentences.State $3 has no slots attached, but is just there tohold the test-action (ADDF QUESTION) ,  as shownin Figure 2, which is executed for preposed auxiliar-ies.
This adds the feature QUEST ION to the matrixVP.
Note that the state test-action is placed on thestate that the preposed auxiliary advances the frameto, in accordance with the rules described in Section4.
And the preposed AUXL  is attached to $2 as astate-advancer so that no more AUXL 's  can appearto its left.
The extra state $3 does not "get in theway" of other state transitions because of the pre-processing done by SYNTAX (described in Section7).State $4 is added in order to handle questionsentences in which the head verb is the only verband is an auxiliary, as inIs John Happy?
May I?
Does he?This is reflected in the state test-actions for $4shown in Figure 2.
The function (IS slot) tests thatthat slot is filled; (ISF frame feature) tests whetherthe given frame has the given feature; ($ register)gets the value of the register.In our grammar, the head of a VP is just the lastverb in the verb group, and in elliptical VP's will betreated like a main verb.
In an elliptical sentencelike Could he be?
the verb be is the HEAD of theVP and is just a verb which happens to be markedwith the feature AUX.
We leave it for other (non-syntactic) rules to decide whether this VP is ellipti-cal for something like Could he be happy there?
orCould he be going there?40 Amer ican Journal  of Computat iona l  Linguistics, Vo lume 6, Number  1, January-March 1980Michael C. McCord Slot GrammarsVP6qBINDER6qOBJADVLO7\]AUXL >O7\]AUXLSUBJ >ADVLJ%SUBJ\[7OIOBJ50OBJCOMPADVLNP PP<77ADJCDETR >50RELF3OBJFigure 1.
Syntax diagrams.
( SYNTAX VPSTATES :($I L (= VERBI (SL$ HEAD)))(s2 L)($3 L (ADDF QUESTION))SZ~ R(NOT (IS AUXL))(ISF ($ VERBI) AUX)(ADDF QUESTION ) )S5 R)S6 R)($7 L (IS SUBJ) (CLOSE))(S8 L)SLOTS :BINDER( FLR SUBJUNCTION) ( $8 )SUBJ(FLR NP) ($I > $4)AUXL(==> (FLR V AUX) (= VERBI IT))($I $2 >)IOBJ(FLR NP) ($5)OBJ(FLR NP) ($6 $7)COMP(==>(FLR VP) (RAISE (OBJ ADVL) $7))($6)ADVL(OR (FLR ADV) (ELm PP))(SI $6 $7)DEFAULTS :B INDER SUBJ AUXL ADVL )Figure 2.
VP syntax.
( SYNTAX NPSTATES :(N IL  (RAISEF SG) (RAISEF PL))(N2 R)SLOTS :DETR(FLR DET) (NI >)ADJC *(FLR ADJ) (NIREL(FLR PP) (N2DEFAULTS :ADJC DETR REL( SYNTAX PPSTATES :(Pl R)SLOTS :OBJ(FLR PP) (PlDEFAULTS :OBJ )Figure 3.
NP and PP syntax.The slot-rule for COMP in Figure 2 contains acall to the RAISE function:(RAISE (OBJ ADVL) $7).The first argument to RAISE is the list of  slot typesto be raised.
Any slot in the filler's ASLOTS willbe raised if it is actually OBJ or ADVL  or  if it origi-nally came from one of these slots (by previous rais-ings).
Each raised slot is given a new and uniquename, but a record is kept of where it came from.It is given the same slot-rule and multiple propertyas the slot it was just raised from.
The remainingarguments to RAISE form a state-attachments list,showing where the raised slots are to be attached.American Journal of Computational Linguistics, Volume 6, Number 1, January-March 1980 41Michael C. McCord Slot GrammarsThe state $7 to which slots of type OBJ andADVL (raised or not) are attached is the positionfor fronted items.
As an example, the parser givestwo analyses forWhen did Mary say John had left?according as when modifies say or left.
In the firstcase, when just fills the ADVL slot in the top VP.In the second, it fills a raised slot in the top VPwhich was raised by COMP from the ADVL in theembedded VP.We do not want to raise out of just any VP.
Itappears that we should not raise out of VP's withfronting.
CompareWhat do you think that those cost in France?
*What do you think that in France those cost?This is prevented in the grammar of Figure 2 by thestate action (CLOSE) attached to state $7 (the pos-ition for fronted items), which sets a flag thatRAISE recognizes.
When RAISE sees a CLOSEdfiller frame, it just returns T and does not raise any-thing.
This would happen in the second exampleabove, where in France fills ADVL at $7 in the em-bedded VP and closes it.
VP's with fronting can beaccepted as fillers, as inI think that in France those cost quite a bit.I think that this vacation we'll enjoy a lot.However,  it is probably not right to block raisingsolely by internal properties of the filler VP.
In arelative clause like whom John saw, raising wouldcertainly be  blocked, as above, by the fronting.
Butin the relative clause who saw John, who just fills theSUBJ slot, so that no closing is done.
Even moreclearly, in the relative clause John saw in Fred is theman John saw, there is not even a relative pronoun.The simple answer here is that some slots callRAISE and others do not.
Our slot COMP callsRAISE;  but REL,  the noun postmodif ier (whichwould get relative clauses in an extended grammar),just does not call RAISE.The nature of the lexicon for the sample gram-mar should be fairly clear from the discussions inSection 6 and the present section.
Figure 4 showspart of the trial lexicon, with a sample for each partof speech.
Enough samples are included to coverthe types of words appearing in an example parsegiven below.The function NM ("noun morphology")  is similarto VM.
The function TEST causes its argument obe the filler-test in all the word frames constructedfor the lexical entry.
Note that the word A has sucha test (for number agreement in the NP), but THEdoes not.
The verbs THINK,  GIVE,  and SEEMillustrate different SD lists.
The SD form for SEEMcauses the default slot-rule for COMP to be re-( LEXICONJOHN N SG (SD))HE N PRON SG (SD))CHAIR N (NM CHAIRS )WHAT N WH (SD))LARGE ADJ )THE DET )A DET (TEST (NEGF FRAME PL)))WHICH DET WH)THAT DET (TEST (NEGF FRAME PL)))THAT SUBJUNCTION )IN PREP (SD))( ALMOST ADV )(THINK V (VM THINKS THINKING THOUGHT(SD (COMB)) )GIVE V (VM GIVES GIVING GAVE GIVEN(SD (IOBJ) (OB J ) ) )( SEEM V (VM SEEMS SEEMING SEEMED)(SD (COMB (FLR ADJ)))  )(HAVE V AUX (VM HAS HAVING HAD)(SD (OBJ))( TEST ( AND(ISF ($ VERBI ) EN)(NEGF FRAME DO-AUX MODAL )(ADDF PERF) )) )(DO V AUX (VM DOES DOING DID DONE)(SD (OBJ))( TEST ( AND(NEGF ($ VERB I) SG ING EN ED)(NEGF FRAME MODAL PERF PROG PASS(ADDF DO-AUX) )) ) )Figure 4.
Sample from the lexicon.placed with (FLR ADJ), so that sentences like Johnseems happy are accepted.The most complicated entries are for verbs thatcan be auxiliaries.
Examples for HAVE and DO areshown.
These entries include the main verb use aswell as the auxiliary verb use.
The SD form is perti-nent for the former, and the TEST for the latter.For example, the filler-test for the auxiliary HAVErequires that the next verb to the right (VERB 1) bea past participle.Figure 5 shows a sample parse tree, for the sen-tence Which chair did Mary think John said he al-most bought?
In the tree, subordination is shown byindentation.
The root node for each frame is la-beled by i t s  category and features.
For  lexicalframes, the one daughter of that node is the worditself.
For phrase frames, the daughters are basical-ly of the formslotfillerand these are given in order of actual occurrence inthe sentence.
If a slot is a raised slot, for examplethe first slot G0019 for which chair, then its42 American Journal of Computational Linguistics.
Volume 6, Number 1, January-March 1980Michael C. McCord Slot GrammarsVP DO-AUX QUEST IONG0019 (OBJ COMP COMP)NP SGDETRDET WHWHICHHEADN SGCHAIRAUXLV AUX EDDIDSUBJNP SGHEADN SGMARYHEADVTHINKCOMPVPSUBJNP SGHEADN SGJOHNHEADV EDENSAIDCOMPVPSUBJNP SGHEADN PRON SGHEADVLADVALMOSTHEADV EDENBOUGHTFigure 5.
Parse tree for the sentence, "Which chair didMary think John said he almost bought?
""origin" is shown beside it.
The origin (OBJ COMPCOMP) means that the original slot from which itcame was OBJ, and the path to it is through twoCOMP's.
This means that the slot G0019 camefrom the third-level embedded VP he almost bought,so which chair is the object of bought.Six additional examples, of varying complexity,are given in the Appendix to this paper which isincluded in the microfiche supplement.9.
SummaryWe have offered a grammatical system and par-ser organized around slots and slot-filling, with aconstrained use of states.
The parser is driven bythe maintenance of the available slots list, ASLOTS,consisting of those slots that may yet be filled.
Twoadvantages of this were emphasized.
One is thatASLOTS permits the expression of dependency rela-tions in a natural and direct way.
The other is thatASLOTS serves as the vehicle for the raising opera-tion, which appears to be applicable to several gram-matical constructions, such as WH-movement.The parser is bottom-up and phrases are con-structed middle-out from their head words.
Thisscheme is instrumental for both of the above advan-tages of ASLOTS.
First, the dependency informa-tion associated with head words in the lexicon helpsinitialize ASLOTS appropriately.
Second, middle-out construction is appropriate because raised slotsmight be filled on the left or the right.The system seems to represent a good combina-tion of data-directed and goal-directed processing.The actual lexical data in the sentence not only in-fluence the initialization of ASLOTS lists, but alsocontrol whatever agreement checks may be neces-sary (such as subject-verb agreement and morpho-logical requirements of auxiliaries).
Once the AS-LOTS list of a phrase frame is determined, it formsa direct and central expression of goals for fillingout the frame.ReferencesCook, W. A.
(1969).
Introduction to Tagmemic Analysis.Holt, Rinehart and Winston, New York.Heidorn, G. E. (1972).
Natural Language Inputs to a Simula-tion Programming System.
Technical Report NPS-55HD72101A, Naval Postgraduate School, Monterey,California.Heidorn, G. E. (1975).
Augmented phrase structure gram-mars.
In Theoretical Issues in Natural Language Processing,B.
L. Nash-Webber and R. C. Schank (Eds.
), pp.
2-5,Association for Computational Linguistics.Hudson, R. A.
(1971).
English Complex Sentences.
North-Holland, Amsterdam.Hudson, R. A.
(1976).
Arguments for a Non-transformationalGrammar.
University of Chicago Press, Chicago.Hudson, R. A.
(1977).
The power of morphological rules.Lingua, 42, 73-89.Kac, M. B.
(1978).
Corepresentation f Grammatical Structure.University of Minnesota Press, Minneapolis.McCord, M. C. (1975).
On the form of a systemic grammar.Journal of Linguistics, 11, 195-212.McCord, M. C. (1977).
Procedural systemic grammars.International Journal of  Man-Machine Studies, 9, 255-286.Minsky, M. (1975).
A framework for representing knowl-edge.
In The Psychology of Computer Vision, P. H. Win-ston (Ed.
), pp.
211-277.
McGraw-Hill ,  New York.Winograd,  T. (1975).
Frame representations and thedeclarative/procedural controversy.
In Representation a dUnderstanding, D. G. Bobrow and A. Collins (Eds.
), pp.185-210, Academic Press, New York.Woods, W. A.
(1970).
Transition network grammars fornatural language analysis.
CACM, 13, 591-606.Woods, W. A.
(1973).
An experimental parsing system fortransition networks.
In Natural Language Processing, R.Rustin (Ed.
), pp.
111-154, Algorithmics Press, New York.American Journal of Computational Linguistics.
Volume 6, Number 1, January-March 1980 43
