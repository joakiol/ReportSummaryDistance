Automatic English-Chinese name transliteration for develop-ment of multilingual resourcesStephen Wan and Cornelia Maria VerspoorMicrosoft Research InstituteMacquarie UniversitySydney NSW 2109, Australia{ swan, kversp } @mri.mq.edu.auAbst ractIn this paper, we describe issues in the translationof proper names from English to Chinese whichwe have faced in constructing a system for multi-lingual text generation supporting both languages.We introduce an algorithm for mapping fromEnglish names to Chinese characters based on (1)heuristics about relationships between Englishspelling and pronunciation, and (2) consistent re-lationships between English phonemes and Chi-nese characters.1 IntroductionIn the context of multilingual natural languageprocessing systems which aim for coverage ofboth languages using a roman alphabet and lan-guages using other alphabets, the development oflexical resources must include mechanisms forhandling words which do not have standardtranslations.
Words falling into this category arewords which do not have any obvious semanticcontent, e.g.
most indo-european personal andplace names, and which can therefore not simplybe mapped to translation equivalents.In this paper, we examine the problem ofgenerating Chinese characters which correspondto English personal and place names.
Section 2introduces the basic principles of English-Chinese transliteration, Section 3 identifies issuesspecific to the domain of name transliteration,and Section 4 introduces a rule-based algorithmfor automatically performing the name translit-eration.
In Section 5 we present an example ofthe application of the algorithm, and in Section 6we discuss extensions to improve the robustnessof the algorithm.Our need for automatic transliterationmechanisms stems from a multilingual text gen-eration system which we are currently construct-ing, on the basis of an English-language databasecontaining descriptive information about museumobjects (the POWER system; Verspoor et al1998).
That database includes fields such asmanufacturer, with values of personal and placenames.
Place names and personal names do notfall into a well-defined set, nor do they have se-mantic content which can be expressed in otherlanguages through words equivalent in meaning.As more objects are added to our database (aswill happen as a museum acquires new objects),new names will be introduced, and these mustalso be added to the lexica for each language inthe system.
We require an automatic procedurefor achieving this, and concentrate here on tech-niques for the creation of a Chinese lexicon.2 Engl ish-Chinese Trans l i te rat ionWe use the term transliteration to refer generallyto the problem of the identification of a specifictextual form in an output language (in our caseChinese characters) which corresponds to aspecific textual form in an input language (anEnglish word or phrase).
For words withsemantic content, this process is essentiallyequivalent to the translation of individual words.So, the English word "black" is associated with aconcept which is expressed as "~"  (\[h~i\]) inChinese.
In th i scase ,  a dictionary searchestablishes the input-output correspondence.For words with little or no semantic ontent,such as personal and place names, dictionarylookup may suffice where standard translationsexist, but in general it cannot be assumed thatnames will be included in the bilingualdictionary.
In multilingual systems designed onlyfor languages haring the roman alphabet, suchnames pose no problem as they can simply beincluded unaltered in output texts in any of thelanguages.
They cannot, however, be included ina Chinese text, as the roman characters cannotstandardly be realized in the Han character set.3 Name Trans l i te rat ionEnglish-Chinese name transliteration occurs onthe basis of pronunciation.
That is, the writtenEnglish word is mapped to the written Chinesecharacter(s) via the spoken form associated withthe word.
The idealized process consists of:13521. mapping an English word (grapheme) to a pho-nemic representation2.
mapping each phoneme composing the word to acorresponding Chinese characterIn practice, this process is not entirelystraightforward.
We outline several issues com-plicating the automation of this process below.The written form of English is less thannormalized.
A particular English grapheme (letteror letter group) does not always correspond to asingle phoneme (e.g.
ea is pronounced differentlyin eat, threat, heart, etc.
), and many Englishmulti-letter combinations are realised as a singlephoneme in pronunciation (so f, if, ph, and ghcan all map to /f/) (van den Bosch 1997).
Animportant step in grapheme-phoneme conversionis the segmentation of words into syllables.However, this process is dependent on factorssuch as morphology.
The syllabification of"hothead" divides the letter combination th,while the same combination corresponds to asingle phoneme in "bother".
Automaticidentification of the phonemes in a word istherefore a difficult problem.Many approaches exist in the literature tosolving the grapheme-phoneme conversionproblem.
Divay and Vitale (1997) review severalof these, and introduce a rule-based approach(with 1,500 rules for English) which achieved94.9% accuracy on one corpus and 64.37% onanother.
Van den Bosch (1997) evaluatesinstance-based learning algorithms and a decisiontree algorithm, finding that the best of thesealgorithms can achieve 96.9% accuracy.Even when a reliable grapheme-to-phonemeconversion module can be constructed, theEnglish-Chinese transliteration process is facedwith the task of mapping phonemes in the sourcelanguage to counterparts in the target language,difficult due to phonemic divergence between thetwo languages.
English permits initial and finalconsonant clusters in syllables.
MandarinChinese, in contrast, primarily has a consonant-vowel or consonant-vowel-\[nasal consonant (/n/or /0/)\] syllable structure.
English consonantclusters, when pronounced within the Chinesephonemic system, must either be reduced to asingle phoneme or converted to a consonant-vowel-consonant-vowel structure by inserting avowel between the consonants in the cluster.
Inaddition to these phonotactic onstraints, therange of Chinese phonemes is not fullycompatible with those of English.
For instance,Mandarin does not use the phoneme Iv/ and sothat phoneme in English words is realized aseither/w/or/f / in the Chinese counterpart.We focus on the specific problem of countryname transliteration from English into Chinese.The algorithm does not aim to specify generalgrapheme-phoneme conversion for English, butonly for the subset of English words relevant oplace name transliteration.
This limited domainrarely exhibits complex morphology and thus arobust morphological module is not included.
Inaddition, foreign language morphemes are treatedsuperficially.
Thus, the algorithm transliteratesthe "-istan" (a morpheme having meaning inPersian) of "Afghanistan" in spite of a standardtransliteration which omits this morpheme.The transliteration process is intended to bebased purely on phonetic equivalency.
Onoccasion, country names will have someadditional meaning in English apart from thereferential function, as in "The United States".Such names are often translated semanticallyrather than phonetically in Chinese.
However,this in not uniformly true, for example "'Virgin"in "British Virgin Islands" is transliterated.
Wetherefore introduce a dictionary lookup step priorto commencing transliteration, to identify caseswhich have a standard translation.The transliteration algorithm results in astring of Han characters, the ideographic scriptused for Chinese.
While the dialects of Chineseshare the same orthography, they do not share thesame pronunciation.
This algorithm is based onthe Mandarin dialect.Because automation of this algorithm is ourprimary goal, the transliteration starts with awritten source and it is assumed that theorthography represents an assimilatedpronunciation, even though English has borrowedmany country names.
This is permitted onlybecause the mapping from English phonemes toChinese phonemes loses a large degree ofvariance: English vowel monothongs areflattened into a fewer number Chinesemonothongs.
However, Chinese has a larger setof diphthongs and triphthongs.
This results inapproximating a prototypical vowel by theclosest match within the set of Chinese vowels.4 An Algorithm for Auto TransliterationThe algorithm begins with a proper noun phrase(PNP) and returns a transliteration i Chinesecharacters.
The process involves five mainstages: Semantic Abstraction, Syllabification,Sub-syllable Divisions, Mapping to Pinyin, andMapping to Han Characters.4.1 Semant ic  AbstractionThe PNP may consist of one or more words.
If itis longer than a single word, it is likely that somepart of it may have an existing semantictranslation.
"The" and "of' are omitted by1353convention.
To ensure that such words as"Unitear" are translated and not transliterated ~, wepass the entire PNP into a dictionary in search ofa standard translation.
If a match is notimmediately successful, we break the PNP intowords and pass each word into the dictionary tocheck for a semantic translation 2.
This portion ofthe algorithm controls which words in the PNPare translated and which are transliterated.Search for PNP in dictionaryIf exact match exists thenreturn corresponding characterselseremove article 'The' and preposition 'of'For each (remaining) word in PNPsearch for word in dictionaryIf exact match existsadd matching characters to output string 3else if the word is not already a chinese wordtransliterate the word and add to output string4.2 Transliteration 1: SyllabificationBecause Chinese characters are monosyllabic,each word to be transliterated must first bedivided into syllables.
The outcome is a list ofsyllables, each with at least one vowel part.We distinguish between a consonant groupand a consonant cluster, where a group is anarbitrary collection of consonant phonemes and acluster is a known collection of consonants.
LikeDivay and Vitale (1997), we identify syllableboundaries on the basis of consonant clusters andvowels (ignoring morphological considerations).Any consonant group is divided into two parts,by identifying the final consonant cluster or loneconsonant in that group and grouping thatconsonant (cluster) with the following vowel.The sub-syllabification algorithm then furtherdivides each identified syllable.
While thisprocedure may not always strictly divide a wordinto standard syllables, it produces yllables ofthe form consonant-vowel, the commonpronunciation of most Chinese characters.4.2.1 NormalizationPrior to the syllabification process, the inputstring must be normalized, so that consonantI The historical interactions of some European and Asian nationshas lead to names that include some special meaning.
Interactionwith the dialects of the South may have produced transliterationsbased on regional pronunciations which are accepted as standard.2 There is some discrepency among speakers about the balancebetween translation and transliteration.
For instance, the word'New' is translated by some and transliterated by others.3 Identification of syntactic onstraints i work-in-progress.
Knownnouns such as 'island' are moved to the end of the phrase whilemodifers (remaining words) maintain their relative order.clusters are reduced to a single phonemerepresented by a single ASCII character (e.g.
ffand ph are both reduced to f).
Instances of 'y' asa vowel are also replaced by the vowel 'i'.For each pair of identical consonants in the input stringReduce the pair to a singular instance of the consonantFor each substring in the input string listed in Appendix AReplace substring with the corresponding phoneme (App.
A)For all instances where 'y' is not followed by a vowel or 'y' follows aconsonantReplace this instance of 'y' with the vowel 'i'When 'e' is followed by a consonant and an 'ia#';; (where # is the end of string marker)Replace the the preceding 'e' with 'i4.2.2 SyllabificationIf string begins with a consonantThen read/store consonants until next vowel and call thissubstring initial_consonant_group (or icg)Read/store vowels until next consonant and call this substringvowels (or v)If more characters, read/store consonants until next vowel and callthis final_consonant_cluster (or fcc)If length of fcc = 1 and fcc followed by substrings 'e#'final_vowel (or fv) = 'e'syllable = icg + v +fcc +fvelse if the last two letters of fcc form a substring in Appendix Bthen this string has a double consonant clusternext_syllable (or ns) = the last two letters of fccreset fcc to be fcc with ns removedelsenext_syllable (or ns) = the last letter of fccreset fcc to be fcc with ns removedsyllable = icg + v + fccStore syllable in a listCall syllabification procedure on substring \[ns .. #\]4.3 Transliteration 2: Sub-syllable DivisionsThe algorithm then proceeds to find patternswithin each syllable of the list.
The patternmatching consists of splitting those consonantclusters that cannot be pronounced within theChinese phonemic set.
These separatedconsonants are generally pronounced by insertinga context-dependent vowel.
The Pinyinromanization consists of elements that can bedescribed as consonants (including threeconsonant clusters "zh", "ch" and "sh") andvowels which consist of monothongs, diphthongsand vowels followed by a nasal In/ or /rj/.Consonants that follow a set of vowels areexamined to determine if they "modify" thevowel.
Such consonants include the alveolarapproximant /r/, the pharyngeal fricative /h/ orthe above mentioned nasal consonants.
These arethen joined to the vowel to form the "vowelpart".
The "vowel part" may be divided so as tomap onto a Pinyin syllable.
Any remainingconsonants are then split by inserting a vowel.1354For each syllable s identified aboveInitialize subsyllable_list (or s/) to the empty stringIdentify initial_consonant_group s~gWhile s~g is non-nullIf the first two letters of s~g appear in Appendix Cthen consonant_pair (or cp) = those two lettersappend cp to slreset S~g to be the remainder of S~cgelse add the first letter of S~=gtO slreset S~g to be the remainder of S~=gIdentify vowels (v) in sappend v to last element of slidentify final_consonant_cluster (fcc) of sif sfcc is non-nullif Sfcc is equal to 'n', 'm', 'ng', 'h' or 'r'identify final vowels of s (Sly)If s~ exists and Sfcc = 'n' or 'm'append Sfc= to last element of slelse if s~ exists and Sfcc not = 'n' or 'm'append Sfc?+ sty to last element of slelse if Sly exists and sfc?= 'h' or 'r'discard sfc?+ s~elsewhile sfcc is non nullIf the first two letters of sfc?
appear in Appendix Cthencp = those two lettersappend cp to slreset S~cctO be the remainder of sfc?elseadd the first letter of SfcctO slreset stc?
to be the remainder of Sfc=For each element of slIf element does not include a vowelInsert context dependent vowelThis procedure will subdivide the syllable intopronounceable sections for mapping to theChinese phoneme set.
Thus each subsectionshould be of the form <cv>, <v> or <vc,>, where"c" is a single consonant, "v" is a monothong ordiphthong and "c," is a nasal consonant.4.4 Transl i terat ion 3: Mapping to PinyinThe subsyllables are then mapped to the Pinyinromanization standard equivalents by means of atable (Appendix D).
This table is indexed on thecolumns on the consonants of the subsyllable,and on the rows on the vowel part of thesubsyllable.
When an exact match cannot befound we prioritize aspects of the subsyllable.Often the highest priority is the initial consonant.Of next priority are nasal consonants.
This maydemand an alternate vowel choice if no suchcombination of phonemes exists in the table.4.5 Transliteration 4: Mapping to HanOnce the Pinyin of a word is established, the Hancharacters are simply extracted from a table of1355specifying the Pinyin <cv> Han charactercorrespondence (Appendix E).
In some cases,multiple characters might be possible but thetable includes only the most common.5 An ExampleThe transliteration of the place name "FaeroeIslands" according to the algorithm will proceedas follows:1.
No match for "Faeroe" in the dictionary, so must betransliterated :2.
Divide Faeroe into two syllables by recognizing the syllabicbreak falls before the "?'
in the middle consonant group.3.
Map/fae/and/roe/onto their Chinese equivalents.
Since novowel form/ae/exists in Chinese, this is mapped to/ei/.
TheIrl of the second syllable is mapped to /1/ and /oe/ iscorrespondingly mapped to luol.4.
Since each syllable is of the form <cv>, no subsyllabicprocessing is required.5.
The transliterated phrase "fei luo" is the mapped to the Hancharacters: "-:lie ~'"6.
"Islands" is searched for and found in the dictionary : "1~'%"(qOn d~o)7.
The characters of the translated "Islands" are placed after thetransliteration of "Faeroe" : "tlz ~' ~ ,%" (f~i/0o qOn d~o)6 Conclusions and Future ExtensionsThe algorithm we have outlined is beingimplemented asa tool for the creation of Chineselexical resources within a multilingual textgeneration project from an English-languagesource database.
We focused on the requirementsof the domain of English place names.
Thealgorithm is currently being extended to includepersonal name transliteration as well, whichrequires a different set of characters.
A personalname transliteration standard has been developedand is in use in China (Chanzhong Wu, p.c.).
Bymapping the Pinyin transliterations arrived by ouralgorithm to this different set of characters, wecan extend the domain to include personal names.In its present form, the algorithm will notalways generate transliterations matching thosewhich might be produced by a humantransliterator due to the influence of historicalfactors or individual differences.
However, theaim of the algorithm is to produce atransliteration understandable by readers of aChinese text.
While the algorithm mimics theintuitive superimposition of phonemic andphonotactic systems, the ultimate goals of thealgorithm are generality and reliability.
Indeed,the result from the example above corresponds toa standard transliteration.
Thus the algorithmproduces results which are recognisable.
Thedegree to which the transliteration is recognisedby the human speaker is dependent in part on thelength of the original name.
Longer names withmany syllables are less recognisable than shorternames.
The introduced phonemic conversionrules are merely those most common and furtherwork will strengthen the generality of the tool.Further research will include a more formalanalysis of the correspondences between Englishand Chinese phonemes.
Furthermore, thealgorithm is far from robust due to its currentlimited focus, and errors made in earlier stagesare propagated and possibly magnified as thealgorithm continues.
Since place names andpeople's names originate from many cultures,this algorithm will not produce desirable resultsunless the written form exhibits someassimilation to English spelling.
We are currentlyinvestigating the application of lazy learningtechniques (as described by van den Bosch 1997)to learning the English naming word-phonemecorrespondences from a corpus of names.
Such amodule could eventually replace our simplisticrule-based procedure, and could feed into thephoneme-Pinyin mapping module, ultimatelyresulting in greater accuracy.The applications of such an algorithm arecountless.
Currently, the process of finding a lesscommon country, city, or county name is anarduous procedure.
Because transliteration usesno semantic content, it is a obvious task forautomation.
This algorithm could also be appliedin the character entry on a Chinese wordprocessor or to index Chinese electronic atlases.When attached to a robust grapheme-to-phonememodule, the transliteration into Chinesecharacters is ultimately a mapping to Chinese-specific IPA phonetics, raising the possibility ofspeech synthesis of English names in Chinese,gwen that Pinyin is a phonemically normalizedorthography.AcknowledgementsOur thanks go to Canzhong Wu for help withidentifying Chinese mappings, and the membersof Dynamic Document Delivery project at theMicrosoft Research Institute (the POWER team).ReferencesDivay M. and Vitale A.J.
(1997) Algorithms forGrapheme-Phoneme Translation for English andFrench: Applications.
Computational Linguistics,23/4, pp.
495--524.Verspoor, C., Dale, R., Green, S., Milosavljevic,M., Pads, C., and Williams, S. (1998) IntelligentAgents for Information Presentation: Dynamic De-scription of Knowledge Base Objects.
In the proceed-ings of the International Workshop on IntelligentAgents on the Internet and Web, Mexico City, Mex-ico, 16-20 March 1998, pp.
75-86.van den Bosch A.
(1997) Learning to pronouncewritten words: A study in inductive language learning.PhD thesis, University of Maastricht, UitgeverijPhidippides, Cadier en Keer, the Netherlands, 229p.Appendices A.
B. and C. English-Chinese uni-tary consonant correspondences, consonantmirs, and double consonant correspondencesbh =>b cqu =>kngh => ngh sc =>cgh => gh dj => jI ph =>f ts =>cIth =>t lk =>k!ck =>k we=>wr + cons.
=> cons.tr blsh clch flcz  klsp plst slSWcz => ch sp => xi b-st =>shid-  sw =>ru-ch => ch sh => shAppendix D. Portion of English phoneme -Chinese Pinyin Mapping Tablef- n- p- r- va fa na ba la waae fei nei bei lei weiai fei nei bei lei weiai fai nai bai lai waiai fa yi na yi ba yi la yi wa yiao nao bao laoar# nuo luo wuoau nuo luo wuoay fei nei bei lei weio fo bo woo# nuo# luo# wuo#oa bo ya wo yaoe nuo luo wuooi #on lunor# nuo# luo# wuo#ou nuo luo wuoAppendix E. Pinyin-Han table (portion)a;l~" di;~ hong;~'J~ lun;~ qi;~l~ai;~ dian;.~l~: jiJ'Lai;~ dian;~i~ ji;~.an;~ du;/~ ji;i~an;~ du;glI j i ;~ang;~ dun;\]ll~ ji;}':~:ao;'~ duo;~ jia;~flba;Fq e;~ jian;~bai;-I~ e;~ jie;~j~ban;t'~ er;~ jin;ff~bao;~ er;~l~ jing;~bao;t~ fa;~ ju;~bei;:ll~ fei;~ ka;"~,bei;~ fei;~ ka;l~ben;:~ fei;~l~ kai;-~bi;l~ fen;:~: ke;P-~bing;,~ fo;~ ke;~-\[.bing;~ fu;~ ken;'l~"bo;~fl fu;'~ la;~'~bo;tl~ fu;~ la;~tbo;jl~ gan;-~ lai;~bo;J~ gang;~ lan; -~"bo;~ gang;~lJ lang;l~ I\]bu;~l ~ gang;~ lao;:~bu;~ ge;-~\]- le;l~bu;~ ge;t~ li;~lchao;~ ge;~l' li;~Jwang;\[luo;~ qiu;~ wang;jluo;~ ri;Et wei;~luu;'J~ rui;~ wei;~ma;-~ rui;~ wei;~mai;~ sa;~ wei;,~mai;~ sa i ; i  wei;.~man;J sang;~ wen;~mao;~ se;~.
wu;-~mei ;~ sen;~ wuo;~,men;f" sha;~ xi;~meng;~ shao;.~ xi;i~imeng;\] she;~ xian;~meng;\] shi;-&" xiang;~mi ;~ shi ;~ xiang;~mi;~2, shi;llr\]" xin;~mi;;~: shi;J~ xiong;!mian;~ si;ll/~ xu;~mo;IJ ' song;Jl~ ya;,'ll7mo;~ su;~ ya;~mo;~ suo;~ ye;~mu:t~ suo;~ yi;I,2na;lt!
: ta;~ yi ;~na;~ ta;t~: yi;.~na;~JIl tai;~ yin;l~llnan;\]~ tai;~ yue;~Jnao;t~l tai;~ yue;/~1356
