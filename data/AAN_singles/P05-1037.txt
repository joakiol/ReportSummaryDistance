Proceedings of the 43rd Annual Meeting of the ACL, pages 298?305,Ann Arbor, June 2005. c?2005 Association for Computational LinguisticsDigesting Virtual ?Geek?
Culture:The Summarization of Technical Internet Relay ChatsLiang Zhou and Eduard HovyUniversity of Southern CaliforniaInformation Sciences Institute4676 Admiralty WayMarina del Rey, CA 90292-6695{liangz, hovy} @isi.eduAbstractThis paper describes a summarizationsystem for technical chats and emails onthe Linux kernel.
To reflect the complex-ity and sophistication of the discussions,they are clustered according to subtopicstructure on the sub-message level, andimmediate responding pairs are identifiedthrough machine learning methods.
A re-sulting summary consists of one or moremini-summaries, each on a subtopic fromthe discussion.1 IntroductionThe availability of many chat forums reflects theformation of globally dispersed virtual communi-ties.
From them we select the very active andgrowing movement of Open Source Software(OSS) development.
Working together in a virtualcommunity in non-collocated environments, OSSdevelopers communicate and collaborate using awide range of web-based tools including InternetRelay Chat (IRC), electronic mailing lists, andmore (Elliott and Scacchi, 2004).
In contrast toconventional instant message chats, IRCs conveyengaging and focused discussions on collaborativesoftware development.
Even though all OSS par-ticipants are technically savvy individually, sum-maries of IRC content are necessary within avirtual organization both as a resource and an or-ganizational memory of activities (Ackerman andHalverson, 2000).
They are regularly producedmanually by volunteers.
These summaries can beused for analyzing the impact of virtual social in-teractions and virtual organizational culture onsoftware/product development.The emergence of email thread discussions andchat logs as a major information source hasprompted increased interest in thread summariza-tion within the Natural Language Processing(NLP) community.
One might assume a smoothtransition from text-based summarization to emailand chat-based summarizations.
However, chatfalls in the genre of correspondence, which re-quires dialogue and conversation analysis.
Thisproperty makes summarization in this area evenmore difficult than traditional summarization.
Inparticular, topic ?drift?
occurs more radically thanin written genres, and interpersonal and pragmaticcontent appears more frequently.
Questions aboutthe content and overall organization of the sum-mary must be addressed in a more thorough wayfor chat and other dialogue summarization sys-tems.In this paper we present a new system that clus-ters sub-message segments from correspondencesaccording to topic, identifies the sub-messagesegment containing the leading issue within thetopic, finds immediate responses from other par-ticipants, and consequently produces a summaryfor the entire IRC.
Other constructions are possi-ble.
One of the two baseline systems described inthis paper uses the timeline and dialogue structureto select summary content, and is quite effective.We use the term chat loosely in this paper.
InputIRCs for our system is a mixture of chats and298emails that are indistinguishable in format ob-served from the downloaded corpus (Section 3).In the following sections, we summarize previ-ous work, describe the email/chat data, intra-message clustering and summary extraction proc-ess, and discuss the results and future work.2 Previous and Related WorkThere are at least two ways of organizing dialoguesummaries: by dialogue structure and by topic.Newman and Blitzer (2002) describe methodsfor summarizing archived newsgroup conversa-tions by clustering messages into subtopic groupsand extracting top-ranked sentences per subtopicgroup based on the intrinsic scores of position inthe cluster and lexical centrality.
Due to the techni-cal nature of our working corpus, we had to handleintra-message topic shifts, in which the author of amessage raises or responds to multiple issues in thesame message.
This requires that our clusteringcomponent be not message-based but sub-message-based.Lam et al (2002) employ an existing summar-izer for single documents using preprocessed emailmessages and context information from previousemails in the thread.Rambow et al (2004) show that sentence ex-traction techniques are applicable to summarizingemail threads, but only with added email-specificfeatures.
Wan and McKeown (2004) introduce asystem that creates overview summaries for ongo-ing decision-making email exchanges by first de-tecting the issue being discussed and thenextracting the response to the issue.
Both systemsuse a corpus that, on average, contains 190 wordsand 3.25 messages per thread, much shorter thanthe ones in our collection.Galley et al (2004) describe a system that iden-tifies agreement and disagreement occurring inhuman-to-human multi-party conversations.
Theyutilize an important concept from conversationalanalysis, adjacent pairs (AP), which consists ofinitiating and responding utterances from differentspeakers.
Identifying APs is also required by ourresearch to find correspondences from differentchat participants.In automatic summarization of spoken dia-logues, Zechner (2001) presents an approach toobtain extractive summaries for multi-party dia-logues in unrestricted domains by addressing in-trinsic issues specific to speech transcripts.
Auto-matic question detection is also deemed importantin this work.
A decision-tree classifier was trainedon question-triggering words to detect questionsamong speech acts (sentences).
A search heuristicprocedure then finds the corresponding answers.Ries (2001) shows how to use keyword repetition,speaker initiative and speaking style to achievetopical segmentation of spontaneous dialogues.3    Technical Internet Relay ChatsGNUe, a meta-project of the GNU project1?one ofthe most famous free/open source software pro-jects?is the case study used in (Elliott and Scacchi,2004) in support of the claim that, even in virtualorganizations, there is still the need for successfulconflict management in order to maintain orderand stability.The GNUe IRC archive is uniquely suited forour experimental purpose because each IRC chatlog has a companion summary digest written byproject participants as part of their contribution tothe community.
This manual summary constitutesgold-standard data for evaluation.3.1 Kernel Traffic2Kernel Traffic is a collection of summary digestsof discussions on GNUe development.
Each digestsummarizes IRC logs and/or email messages (laterreferred to as chat logs) for a period of up to twoweeks.
A nice feature is that direct quotes andhyperlinks are part of the summary.
Each digest isan extractive overview of facts, plus the author?sdramatic and humorous interpretations.3.2 Corpus DownloadThe complete Linux Kernel Archive (LKA) con-sists of two separate downloads.
The Kernel Traf-fic (summary digests) are in XML format and weredownloaded by crawling the Kernel Traffic site.The Linux Kernel Archives (individual IRC chatlogs) are downloaded from the archive site.
Wematched the summaries with their respective chatlogs based on subject line and publication dates.3.3 Observation on Chat Logs1http://www.gnu.org2http://kt.hoser.ca/kernel-traffic/index.html299Upon initial examination of the chat logs, wefound that many conventional assumptions aboutchats in general do not apply.
For example, in mostinstant-message chats, each exchange usually con-sists of a small number of words in several sen-tences.
Due to the technical nature of GNUe, halfof the chat logs contain in-depth discussions withlengthy messages.
One message might ask and an-swer several questions, discuss many topics in de-tail, and make further comments.
This property,which we call subtopic structure, is an importantdifference from informal chat/interpersonal banter.Figure 1 shows the subtopic structure and relationof the first 4 messages from a chat log, producedmanually.
Each message is represented horizon-tally; the vertical arrows show where participantsresponded to each other.
Visual inspection revealsin this example there are three distinctive clusters(a more complex cluster and two smaller satelliteclusters) of discussions between participants atsub-message level.3.4 Observation on Summary DigestsTo measure the goodness of system-producedsummaries, gold standards are used as references.Human-written summaries usually make up thegold standards.
The Kernel Traffic (summary di-gests) are written by Linux experts who activelycontribute to the production and discussion of theopen source projects.
However, participant-produced digests cannot be used as referencesummaries verbatim.
Due to the complex structureof the dialogue, the summary itself exhibits somediscourse structure, necessitating such reader guid-ance phrases such as ?for the ?
question,?
?on the?
subject,?
?regarding ?,?
?later in the samethread,?
etc., to direct and refocus the reader?s at-tention.
Therefore, further manual editing and par-titioning is needed to transform a multi-topic digestinto several smaller subtopic-based gold-standardreference summaries (see Section 6.1 for the trans-formation).4 Fine-grained ClusteringTo model the subtopic structure of each chat mes-sage, we apply clustering at the sub-message level.4.1 Message SegmentationFirst, we look at each message and assume thateach participant responds to an ongoing discussionby stating his/her opinion on several topics or is-sues that have been discussed in the current chatlog, but not necessarily in the order they were dis-cussed.
Thus, topic shifts can occur sequentiallywithin a message.
Messages are partitioned intomulti-paragraph segments using TextTiling, whichreportedly has an overall precision of 83% and re-call of 78% (Hearst, 1994).4.2 ClusteringAfter distinguishing a set of message segments, wecluster them.
When choosing an appropriate clus-tering method, because the number of subtopicsunder discussion is unknown, we cannot make anassumption about the total number of resultingclusters.
Thus, nonhierarchical partitioning meth-ods cannot be used, and we must use a hierarchicalmethod.
These methods can be either agglomera-tive, which begin with an unclustered data set andperform N ?
1 pairwise joins, or divisive, whichadd all objects to a single cluster, and then performN ?
1 divisions to create a hierarchy of smallerclusters, where N is the total number of items to beclustered (Frakes and Baeza-Yates, 1992).Ward?s MethodHierarchical agglomerative clustering methods arecommonly used and we employ Ward?s method(Ward and Hook, 1963), in which the text segmentpair merged at each stage is the one that minimizesthe increase in total within-cluster variance.Each cluster is represented by an L-dimensionalvector (xi1, xi2, ?, xiL) where each xikis the word?stf ?
idf score.
If miis the number of objects in thecluster, the squared Euclidean distance betweentwo segments i and j is:?dij2= (xikK=1L??
xjk)2Figure 1.
An example of chat subtopic structureand relation between correspondences.300When two segments are joined, the increase invariance Iijis expressed as:?Iij=mimjmi+ mjdij2Number of ClustersThe process of joining clusters continues until thecombination of any two clusters would destabilizethe entire array of currently existing clusters pro-duced from previous stages.
At each stage, the twoclusters xikand xjkare chosen whose combinationwould cause the minimum increase in variance Iij,expressed as a percentage of the variance changefrom the last round.
If this percentage reaches apreset threshold, it means that the nearest twoclusters are much further from each other com-pared to the previous round; therefore, joining ofthe two represents a destabilizing change, andshould not take place.Sub-message segments from resulting clustersare arranged according to the sequence the originalmessages were posted and the resulting subtopicstructures are similar to the one shown in Figure 1.5 Summary ExtractionHaving obtained clusters of message segments fo-cused on subtopics, we adopt the typical summari-zation paradigm to extract informative sentencesand segments from each cluster to produce sub-topic-based summaries.
If a chat log has n clusters,then the corresponding summary will contain nmini-summaries.All message segments in a cluster are related tothe central topic, but to various degrees.
Some areanswers to questions asked previously, plus furtherelaborative explanations; some make suggestionsand give advice where they are requested, etc.From careful analysis of the LKA data, we cansafely assume that for this type of conversationalinteraction, the goal of the participants is to seekhelp or advice and advance their current knowl-edge on various technical subjects.
This kind ofinteraction can be modeled as one problem-initiating segment and one or more correspondingproblem-solving segments.
We envisage that iden-tifying corresponding message segment pairs willproduce adequate summaries.
This analysis followsthe structural organization of summaries from Ker-nel Traffic.
Other types of discussions, at least inpart, require different discourse/summary organi-zation.These corresponding pairs are formally intro-duced below, and the methods we experimentedwith for identifying them are described.5.1 Adjacent Response PairsAn important conversational analysis concept, ad-jacent pairs (AP), is applied in our system to iden-tify initiating and responding correspondencesfrom different participants in one chat log.
Adja-cent pairs are considered fundamental units ofconversational organization (Schegloff and Sacks,1973).
An adjacent pair is said to consist of twoparts that are ordered, adjacent, and produced bydifferent speakers (Galley et al, 2004).
In ouremail/chat (LKA) corpus a physically adjacentmessage, following the timeline, may not directlyrespond to its immediate predecessor.
Discussionparticipants read the current live thread and decidewhat he/she would like to correspond to, not nec-essarily in a serial fashion.
With the added compli-cation of subtopic structure (see Figure 1) thedefinition of adjacency is further violated.
Due toits problematic nature, a relaxation on the adja-cency requirement is used in extensive research inconversational analysis (Levinson, 1983).
This re-laxed requirement is adopted in our research.Information produced by adjacent correspon-dences can be used to produce the subtopic-basedsummary of the chat log.
As described in Section4, each chat log is partitioned, at sub-messagelevel, into several subtopic clusters.
We take themessage segment that appears first chronologicallyin the cluster as the topic-initiating segment in anadjacent pair.
Given the initiating segment, weneed to identify one or more segments from thesame cluster that are the most direct and relevantresponses.
This process can be viewed equivalentlyas the informative sentence extraction process inconventional text-based summarization.5.2 AP Corpus and BaselineWe manually tagged 100 chat logs for adjacentpairs.
There are, on average, 11 messages per chatlog and 3 segments per message (This is consid-erably larger than threads used in previous re-search).
Each chat log has been clustered into oneor more bags of message segments.
The messagesegment that appears earliest in time in a cluster301was marked as the initiating segment.
The annota-tors were provided with this segment and one othersegment at a time, and were asked to decidewhether the current message segment is a directanswer to the question asked, the suggestion thatwas requested, etc.
in the initiating segment.
Thereare 1521 adjacent response pairs; 1000 were usedfor training and 521 for testing.Our baseline system selects the message seg-ment (from a different author) immediately fol-lowing the initiating segment.
It is quite effective,with an accuracy of 64.67%.
This is reasonablebecause not all adjacent responses are interruptedby messages responding to different earlier initiat-ing messages.In the following sections, we describe two ma-chine learning methods that were used to identifythe second element in an adjacent response pairand the features used for training.
We view theproblem as a binary classification problem, distin-guishing less relevant responses from direct re-sponses.
Our approach is to assign a candidatemessage segment c an appropriate response class r.5.3 FeaturesStructural and durational features have been dem-onstrated to improve performance significantly inconversational text analysis tasks.
Using them,Galley et al (2004) report an 8% increase inspeaker identification.
Zechner (2001) reports ex-cellent results (F > .94) for inter-turn sentenceboundary detection when recording the length ofpause between utterances.
In our corpus, dura-tional information is nonexistent because chats andemails were mixed and no exact time recordingsbeside dates were reported.
So we rely solely onstructural and lexical features.For structural features, we count the number ofmessages between the initiating message segmentand the responding message segment.
Lexical fea-tures are listed in Table 1.
The tech words are thewords that are uncommon in conventional litera-ture and unique to Linux discussions.5.4 Maximum EntropyMaximum entropy has been proven to be an ef-fective method in various natural language proc-essing applications (Berger et al, 1996).
Fortraining and testing, we used YASMET3.
To est i-mate P(r | c) in the exponential form, we have:?P?
(r | c) = 1Z?
(c)  exp( ?i,ri?fi,r(c,r))where Z?
(c) is a normalizing constant and the fea-ture function for feature fiand response class r isdefined as:?fi,r(c,?r ) =1, if fi> 0 and?r = r0, otherwise???.
?i,ris the feature-weight parameter for feature fiandresponse class r. Then, to determine the best class rfor the candidate message segment c, we have:?r*= arg maxrP(r | c)   .5.5 Support Vector MachineSupport vector machines (SVMs) have been shownto outperform other existing methods (na?ve Bayes,k-NN, and decision trees) in text categorization(Joachims, 1998).
Their advantages are robustnessand the elimination of the need for feature selec-tion and parameter tuning.
SVMs find the hyper-plane that separates the positive and negativetraining examples with maximum margin.
Findingthis hyperplane can be translated into an optimiza-tion problem of finding a set of coefficients ?i*ofthe weight vector?rw for document diof class yi?
{+1 , ?1}:?rw = ?i*i?yirdi,    ?i> 0     .Testing data are classified depending on the sideof the hyperplane they fall on.
We used theLIBSVM4package for training and testing.3http://www.fjoch.com/YASMET.html4http://www.csie.ntu.edu.tw/~cjlin/libsvm/Feature sets baseline MaxEnt SVM64.67%Structural 61.22% 71.79%Lexical 62.24% 72.22%Structural + Lexical 72.61% 72.79%?
number of overlapping words?
number of overlapping content words?
ratio of overlapping words?
ratio of overlapping content words?
number of overlapping tech wordsTable 1.
Lexical features.Table 2.
Accuracy on identifying APs.3025.6 ResultsEntries in Table 2 show the accuracies achievedusing machine learning models and feature sets.5.7 Summary GenerationAfter responding message segments are identified,we couple them with their respective initiatingsegment to form a mini-summary based on theirsubtopic.
Each initializing segment has zero ormore responding segments.
We also observed zeroresponse in human-written summaries where par-ticipants initiated some question or concern, butothers failed to follow up on the discussion.
TheAP process is repeated for each cluster createdpreviously.
One or more subtopic-based mini-summaries make up one final summary for eachchat log.
Figure 2 shows an example.
For longerchat logs, the length of the final summary is arbi-trarily averaged at 35% of the original.6 Summary EvaluationTo evaluate the goodness of the system-producedsummaries, a set of reference summaries is usedfor comparison.
In this section, we describe themanual procedure used to produce the referencesummaries, and the performances of our systemand two baseline systems.6.1 Reference SummariesKernel Traffic digests are participant-writtensummaries of the chat logs.
Each digest mixes thesummary writer?s own narrative comments withdirect quotes (citing the authors) from the chat log.As observed in Section 3.4, subtopics are inter-mingled in each digest.
Authors use key phrases tolink the contents of each subtopic throughout texts.In Figure 3, we show an example of such a digest.Discussion participants?
names are in italics andsubtopics are in bold.
In this example, the conver-sation was started by Benjamin Reed with twoquestions: 1) asking for conventions for writing/proc drivers, and 2) asking about the status ofsysctl.
The summary writer indicated that LinusTorvalds replied to both questions and used thephrase ?for the ?
question, he added??
to high-light the answer to the second question.
As the di-Subtopic 1:Benjamin Reed: I wrote a wireless ethernet driver awhile ago... Are driver writers recommended to usethat over extending /proc or is it deprecated?Linus Torvalds: Syscyl is deprecated.
It?s useful in oneway only ...Subtopic 2:Benjamin Reed: I am a bit uncomfortable ... wonderingfor a while if there are guidelines on ?Linus Torvalds: The thing to do is to create ...Subtopic 3:Marcin Dalecki: Are you just blind to the never-endingformat/ compatibility/ ?
problems the whole ideabehind /proc induces inherently?Figure 2.
A system-produced summary.Benjamin Reed wrote a wireless Ethernet driver thatused /proc as its interface.
But he was a little uncom-fortable ?
asked if there were any conventions heshould follow.
He added, ?and finally, what?s up withsysctl?
?
?Linus Torvalds replied with: ?the thing to do is to cre-ate a ?
[program code].
The /proc/drivers/ directory isalready there, so you?d basically do something like ?
[program code].?
For the sysctl question, he added?sysctl is deprecated.
...?Marcin Dalecki flamed Linus: ?Are you just blind tothe never-ending format/compatibility/?
problems thewhole idea behind /proc  induces inherently??
[example]?Figure 3.
An original Kernel Traffic digest.Mini 1:Benjamin Reed wrote a wireless Ethernet driver thatused /proc as its interface.
But he was a little uncom-fortable ?
and asked if there were any conventions heshould follow.Linus Torvalds replied with: the thing to do is to createa ?
[program code].
The /proc/drivers/ directory isalready there, so you?d basically do something like ?
[program code].Marcin Dalecki flamed Linus: Are you just blind to thenever-ending format/ compatibility/ ?
problems thewhole idea behind /proc  induces inherently??
[example]Mini 2:Benjamin Reed: and finally, what?s up with sysctl?
...Linus Torvalds replied: sysctl is deprecated.
...Figure 4.
A reference summary reproducedfrom a summary digest.303gest goes on, Marcin Dalecki only responded to thefirst question with his excited commentary.Since our system-produced summaries are sub-topic-based and partitioned accordingly, if we useunprocessed Kernel Traffic as references, the com-parison would be rather complicated and wouldincrease the level of inconsistency in future as-sessments.
We manually reorganized each sum-mary digest into one or more mini-summaries bysubtopic (see Figure 4.)
Examples (usually kernelstats) and programs are reduced to ?
[example]?and ?
[program code].?
Quotes (originally in sepa-rate messages but merged by the summary writer)that contain multiple topics are segmented and theparticipant?s name is inserted for each segment.We follow clues like ?to answer ?
question?
topair up the main topics and their responses.6.2 Summarization ResultsWe evaluated 10 chat logs.
On average, each con-tains approximately 50 multi-paragraph tiles (par-titioned by TextTile) and 5 subtopics (clustered bythe method from Section 4).A simple baseline system takes the first sentencefrom each email in the sequence that they wereposted, based on the assumption that people tend toput important information in the beginning of texts(Position Hypothesis).A second baseline system was built based onconstructing and analyzing the dialogue structureof each chat log.
Participants often quote portionsof previously posted messages in their responses.These quotes link most of the messages from achat log.
The message segment that immediatelyfollows the quote is automatically paired with thequote itself and added to the summary and sortedaccording to the timeline.
Segments that are notquoted in later messages are labeled as less rele-vant and discarded.
A resulting baseline summaryis an inter-connected structure of segments thatquoted and responded to one another.
Figure 5 is ashortened summary produced by this baseline forthe ongoing example.The summary digests from Kernel Trafficmostly consist of direct snippets from originalmessages, thus making the reference summariesextractive even after rewriting.
This makes it pos-sible to conduct an automatic evaluation.
A com-puterized procedure calculates the overlap betweenreference and system-produced summary units.Since each system-produced summary is a set ofmini-summaries based on subtopics, we also com-pared the subtopics against those appearing in ref-erence summaries (precision = 77.00%, recall =74.33 %, F = 0.7566).Recall Precision F-measureBaseline130.79% 16.81% .2175Baseline263.14% 36.54% .4629Summary52.57% 52.14% .5235SystemTopic-summ52.57% 63.66% .5758Table 3 shows the recall, precision, and F -measure from the evaluation.
From manual analy-sis on the results, we notice that the original digestwriters often leave large portions of the discussionout and focus on a few topics.
We think this is be-cause among the participants, some are Linux vet-erans and others are novice programmers.
Digestwriters recognize this difference and reflect it intheir writings, whereas our system does not.
Theentry ?Topic-summ?
in the table shows system-produced summaries being compared only againstthe topics discussed in the reference summaries.6.3 DiscussionA recall of 30.79% from the simple baseline reas-sures us the Position Hypothesis still applies inconversational discussions.
The second baselineperforms extremely well on recall, 63.14%.
Itshows that quoted message segments, and therebyderived dialogue structure, are quite indicative ofwhere the important information resides.
Systemsbuilt on these properties are good summarizationsystems and hard-to-beat baselines.
The systemdescribed in this paper (Summary) shows an F-measure of .5235, an improvement from .4629 ofthe smart baseline.
It gains from a high precisionbecause less relevant message segments are identi-fied and excluded from the adjacent response pairs,[0|0] Benjamin Reed:  ?I wrote an ?
driver ?
/proc??
[0|1] Benjamin Reed: ??
/proc/ guideline ??
[0|2] Benjamin Reed: ??
syscyl ??
[1|0] Linus Torvalds responds to [0|0, 0|1, 0|2]: ?thething to do is ??
?sysctl is deprecated ?
?Figure 5.
A short example from Baseline 2.Table 3.
Summary of results.304leaving mostly topic-oriented segments in summa-ries.
There is a slight improvement when assessingagainst only those subtopics appeared in the refer-ence summaries (Topic-summ).
This shows that weonly identified clusters on their information con-tent, not on their respective writers?
experience andreliability of knowledge.In the original summary digests, interactions andreactions between participants are sometimes de-scribed.
Digest writers insert terms like ?flamed?,?surprised?, ?felt sorry?, ?excited?, etc.
To analyzesocial and organizational culture in a virtual envi-ronment, we need not only information extracts(implemented so far) but also passages that revealthe personal aspect of the communications.
Weplan to incorporate opinion identification into thecurrent system in the future.7 Conclusion and Future WorkIn this paper we have described a system that per-forms intra-message topic-based summarization byclustering message segments and classifying topic-initiating and responding pairs.
Our approach is aninitial step in developing a framework that caneventually reflect the human interactions in virtualenvironments.
In future work, we need to prioritizeinformation according to the perceived knowl-edgeability of each participant in the discussion, inaddition to identifying informative content andrecognizing dialogue structure.
While the approachto the detection of initiating-responding pairs isquite effective, differentiating important and non-important topic clusters is still unresolved andmust be explored.ReferencesM.
S. Ackerman and C. Halverson.
2000.
Reexamingorganizational memory.
Communications of theACM, 43(1), 59?64.A.
Berger, S. Della Pietra, and V. Della Pietra.
1996.
Amaximum entropy approach to natural languageprocessing.
Computational Linguistics, 22(1):39?71.M.
Elliott and W. Scacchi.
2004.
Free software devel-opment: cooperation and conflict in a virtual organi-zational culture.
S. Koch (ed.
), Free/Open SourceSoftware Development, IDEA publishing, 2004.W.
B. Frakes and R. Baeza-Yates.
1992.
Informationretrieval: data structures & algorithms.
Prentice Hall.M.
Galley, K. McKeown, J. Hirschberg, and E.Shriberg.
2004.
Identifying agreement and disagree-ment in conversational speech: use of Bayesian net-works to model pragmatic dependencies.
In theProceedings of ACL-04.M.
A. Hearst.
1994.
Multi-paragraph segmentation ofexpository text.
In the Proceedings of ACL 1994.T.
Joachims.
1998.
Text categorization with supportvector machines: Learning with many relevant fea-tures.
In Proceedings of the ECML, pages 137?142.D.
Lam and S. L. Rohall.
2002.
Exploiting e-mailstructure to improve summarization.
Technical Paperat IBM Watson Research Center #20?02.S.
Levinson.
1983.
Pragmatics.
Cambridge UniversityPress.P.
Newman and J. Blitzer.
2002.
Summarizing archiveddiscussions: a beginning.
In Proceedings of Intelli-gent User Interfaces.O.
Rambow, L. Shrestha, J. Chen and C. Laurdisen.2004.
Summarizing email threads.
In Proceedings ofHLT-NAACL 2004: Short Papers.K.
Ries.
2001.
Segmenting conversations by topic, ini-tiative, and style.
In Proceedings of SIGIR Work-shop: Information Retrieval Techniques for SpeechApplications 2001: 51?66.E.
A. Schegloff and H. Sacks.
1973.
Opening up clos-ings.
Semiotica, 7-4:289?327.S.
Wan and K. McKeown.
2004.
Generating overviewsummaries of ongoing email thread discussions.
InProceedings of COLING 2004.J.
H. Ward Jr. and M. E. Hook.
1963.
Application of anhierarchical grouping procedure to a problem ofgrouping profiles.
Educational and PsychologicalMeasurement, 23, 69?81.K.
Zechner.
2001.
Automatic generation of concisesummaries of spoken dialogues in unrestricted do-mains.
In Proceedings of SIGIR 2001.305
