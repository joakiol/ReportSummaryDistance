The CommandTalk Spoken Dialogue System*Amanda Stent ,  John  DowdingJean  Mark  Gawron ,  E l i zabeth  Owen Brat t ,  and  Rober t  MooreSRI International333 Ravenswood AvenueMenlo Park, CA 94025{stent,dowding,gawron,owen,bmoore}@ai.sri.com1 Int roduct ionCommandTalk (Moore et al, 1997) is a spoken-language interface to the ModSAF battlefieldsimulator that allows simulation operators togenerate and execute military exercises by cre-ating forces and control measures, assigningmissions to forces, and controlling the display(Ceranowicz, 1994).
CommandTalk consistsof independent, cooperating agents interactingthrough SRI's Open Agent Architecture (OAA)(Martin et al, 1998).
This architecture allowscomponents obe developed independently, andthen flexibly and dynamically combined to sup-port distributed computation.
Most of theagents that compose CommandTalk have beendescribed elsewhere !for more detail, see (Mooreet al, 1997)).
This paper describes extensionsto CommandTalk to support spoken dialogue.While we make no theoretical claims about thenature and structure of dialogue, we are influ-enced by the theoretical work of (Grosz andSidner, 1986) and will use terminology fromthat tradition when appropriate.
We also follow(Chu-Carroll and Brown, 1997) in distinguish-ing task initiative and dialogue initiative.Section 2 demonstrates the dialogue capabil-ities of CommandTalk by way of an extendedexample.
Section 3 describes how languagein CommandTalk is modeled for understandingand generation.
Section 4 describes the archi-tecture of the dialogue manager in detail.
Sec-tion 5 compares CommandTalk with other spo-* This research was supported by the Defense AdvancedResearch Projects Agency under Contract N66001-94-C-6046 with the Space and Naval Warfare Systems Cen-ter.
The views and conclusions contained in this doc-ument are those of the authors and should not be in-terpreted as necessarily representing the official policies,either express or implied, of the Defense Advanced Re-search Projects Agency of the U.S. Government.ken dialogue systems.2 Example  D ia loguesThe following examples constitute a single ex-tended dialogue illustrating the capabilities ofthe dialogue manager with regard to structureddialogue, clarification and correction, changes ininitiative, integration of speech and gesture, andsensitivity to events occurring in the underlyingsimulated world.
1Ex .
1-"U 1S 2U 3S 4U 5S 6ConfirmationCreate a point named Checkpoint1 at 64 53?Create a CEV at Checkpoint 1?Create a CEV here < click>?
I will create CEV at FQ 643 576Utterances 1 and 3 illustrate typical success-ful interactions between an operator and thesystem.
When no exceptional event occurs,CommandTalk does not respond verbally.
How-ever, it does provide an audible tone to indicatethat it has completed processing.
For a suc-cessful command, it produces a rising tone, il-lustrated by the ?
symbol in utterances 2 and4.
For an unsuccessful command it produces afalling tone, illustrated by the ?
symbol in ut-terances 12 and 14.
21U indicates a user utterance as recognized by thesystem, and S indicates a system utterance.
Bracketeditems in italics are gestures.2The rising and falling tones come from the predia-logue version of the system.
They were added becausewe observed that users did not always notice when thesystem had not understood them correctly, and a tex-tual error message alone did not always get the user'sattention.
These tones also perform basic grounding be-havior.183Utterance 6 demonstrates a case where, al-though the system successfully completed thecommand, it chose to provide an explicit con-firmation.
Explicit confirmations can be givenat any time.
In this case, the system choseto give the confirmation because it performeda nontrivial reference, resolving "here" to themap coordinates given by the gesture, FQ 643576.
Similar situations in which the systemgives an explicit confirmation are the resolutionof pronouns and elided, definite or plural nounphrases.Ex.
2: CorrectionU 7 Put Objective Golf here <click>S 8 ?
I will locate Objective Golf at FQ658 583U 9 I meant Objective AlphaS 10 ?
I will locate Objective Alpha atFQ 658 583Example 2contains acorrection sub-dialogue.Utterance 9 is a correction of utterance 7, andis interpreted as though the operator had said"Put Objective Alpha here".
This illustratestwo points.
First, since utterance 7 was suc-cessful, the system undoes its effects (that is,deletes Objective Golf) before creating Objec-tive Alpha.
Second, although the edited utter-ance contains the word "here", the gesture thatwas used to resolve that is no longer available.The system keeps track of gestural informationalong with linguistic information in its repre-sentation of context in order to interpret cor-rections.Ex.
3: Structured Sub-dialogueU 11 CEV advance to Objective GolfS 12 ?
There are 2 CEVs.
Do you mean100All or 100A127U 13 100AllS 14 @ There is no point named Ob-jective Golf.
Which point should100All proceed to?U 15 I said Objective AlphaS 16 ?
100All will proceed to ObjectiveAlphaExample 3 illustrates a structured iscoursesegment containing two subsegments.
Utter-ance 11 is uninterpretable for two reasons: thereference to "CEV" is ambiguous, and Objec-tive Golf does not exist.
The first difficultyis resolved in discourse segment 12-13, and thesecond in discourse segment 14-16.
Notice thatthe operator is not required to answer the ques-tion posed by the system in utterance 14, butis free to correct he system's misunderstandingof utterance 11 even though it is not the im-mediately prior utterance.
This is true becauseutterance 13 (the most recent utterance) is in-terpreted as if the operator had said "100Alladvance to Objective Golf".Ex.
4: Required ArgumentU 17 A12 conduct crater breach facingnorthS 18 ?
Which point should 100A12 con-duct crater breach oriented northat?U 19 <click>S 20 ?
100A12 will conduct craterbreach oriented north at FQ 542595Example 4 demonstrates a case where, al-though there are no errors in the operator's ut-terance, the system requires additional informa-tion before it can execute the command.
Alsonote that the question asked by the system inutterance 18 is answered with an isolated ges-ture.Ex.
5: Delayed ResponseU 21 A13 continue to Checkpoint 1 in acolumn formation.S 22 ?
There is no A13.
Which unitshould proceed in a column forma-tion to Checkpoint 17U 23 What units are there?S 24 ?
There are 2 units: 100All and100A12.U 25 A l l  proceed to Checkpoint 1.S 26 ?
100All will proceed in a columnformation to Checkpoint 1.In example 5, the system asks a question butthe operator needs to perform some other ac-tivity before answering it.
The question askedby the system in utterance 22 is answered bythe operator in utterance 25.
Due to the in-tervening material, the most natural way to an-swer the question posed in utterance 22 is with a154complete sentence, rather than an isolated nounphrase.Ex.
6: Changes  in the  S imula ted  Wor ldU 27 A12 advance to Objective Bravo.S 28 ?
There is no Objective Bravo.What point should 100A12 ad-vance to?U 29 Create it at 635 545.S 30 ?S 31 Should 100A12 proceed to Objec-tive Bravo?U 32 Yes.S 33 ?
100A12 will proceed to ObjectiveBravo.Example 6 demonstrates the use of a guard,or test to see if a situation holds.
In utterance27, a presupposition failure occurs, leading tothe open proposition expressed in utterance 28.A guard, associated with the open proposition,tests to see if the system can successfully resolve"Objective Bravo".
Rather  than answering thequestion in utterance 28, the operator choosesto create Objective Bravo.
The system thentests the guard, which succeeds because Objec-tive Bravo now exists.
The system thereforetakes dialogue initiative by asking the operatorin utterance 31 if that operator would like tocarry out the original command.
Although, inthis case, the simulated world changed in directresponse to a linguistic act, in general the worldcan change for a variety of reasons, including theoperator's activities on the GUI or the activitiesof other operators.3 Language In terpreta t ion  andGenerat ionThe language used in CommandTalk is derivedfrom a single grammar using Gemini (Dowdinget al, 1993), a unification-based grammar for-malism.
This grammar is used to provide all thelanguage modeling capabilities of the system,including the language model used in the speechrecognizer, the syntactic and semantic interpre-tation of user utterances (Dowding et al, 1994),and the generation of system responses (Shieberet al, 1990).For speech recognition, Gemini uses the Nu-ance speech recognizer.
Nuance accepts lan-guage models written in a Grammar Speci-fication Language (GSL) format that allowscontext-free, as well as the more commonly usedfinite-state, models.
3 Using a technique de-scribed in (Moore, 1999), we compile a context-free covering grammar into GSL format fromthe main Gemini grammar.This approach of using a single grammarsource for both sides of the dialogue has sev-eral advantages.
First, although there are differ-ences between the language used by the systemand that used by the speaker, there is a large de-gree of overlap, and encoding the grammar onceis efficient.
Second, anecdotal evidence suggeststhat the language used by the system influencesthe kind of language that speakers use in re-sponse.
This gives rise to a consistency problemif the language models used for interpretationand generation are developed independently.The grammar used in CommandTalk containsfeatures that allow it to be partitioned intoa set of independent top-level grammars.
Forinstance, CommandTalk contains related, butdistinct, grammars for each of the four armedservices (Army, Navy, Air Force, and MarineCorps).
The top-level grammar currently in useby the speech recognizer can be changed dy-namically.
This feature is used in the dialoguemanager to change the top-level grammar, de-pending on the state of the dialogue.
Currentlyin CommandTalk, for each service there are twomain grammars, one in which the user is free togive any top-level command, and another thatcontains everything in the first grammar, plusisolated noun phrases of the semantic types thatcan be used as answers to wh-questions, as wellas answers to yes/no questions.3.1 P rosodyA separate Prosody agent annotates the sys-tem's utterances to provide cues to the speechsynthesizer about how they should be produced.It takes as input an utterance to be spoken,along with its parse tree and logical form.
Theoutput is an expression in the Spoken TextMarkup Language 4 (STML) that annotates thelocations and lengths of pauses and the loca-tions of pitch changes.3GSL grammars  that  are context-free cannot  containindirect left-recursion.4See ht tp  ://www.
cs t r .
ed.
ac.
uk /pro j  ec t  s / ssml .html  for details.1853.2 Speech SynthesisSpeech synthesis i performed by another agentthat encapsulates the Festival speech synthe-sizer.
Festival 5 was developed by the Centrefor Speech Technology Research (CSTR) at theUniversity of Edinburgh.
Festival was selectedbecause it accepts STML commands, is avail-able for research, educational, and individualuse without charge, and is open-source.4 D ia logue  ManagerThe role of the dialogue manager in Com-mandTalk is to manage the representation flinguistic context, interpret user utteranceswithin that context, plan system responses,and set the speech recognition system's lan-guage model.
The system supports natural,structured mixed-initiative dialogue and multi-modal interactions.When interpreting a new utterance from theuser, the dialogue manager considers these pos-sibilities in order:1. Corrections: The utterance is a correctionof a prior utterance.2.
Transitions/Responses: The utterance is acontinuation of the current discourse seg-ment.3.
New Commands/Questions: The utteranceis initiating a new discourse segment.The following sections will describe the datastructures maintained by the dialogue manager,and show how they are affected as the dialoguemanager processes each of these three types ofuser utterances.4.1 Dialogue StackCommandTalk uses a dialogue stack to keeptrack of the current discourse context.
Thedialogue stack attempts to keep track of theopen discourse segments at each point in thedialogue.
Each stack frame corresponds to oneuser-system discourse pair, and contains at leastthe following elements:?
an atomic dialogue state identifier (see Sec-tion 4.2)5See ht tp : / /~w,  cs t r .
ed.
ac.
u .k /pro jec ts /fes t iva l  .htral  for full in format ion on Festival.?
a semantic representation f the user's ut-terance(s)?
a semantic representation f the system'sresponse, if any?
a representation f the background (i.e.,open proposition) for the anticipated userresponse.?
focus spaces containing semantic represen-tations of the items referred to in each sys-tem and user utterancea gesture space containing the gesturesused in the interpretation of each user ut-terance?
an optional guardThe semantic representation f the system re-sponse is related to the background, but thereare cases where the background may containmore information than the response.
For ex-ample, in utterance 28 the system could havesimply said "There is no Objective Bravo", andomitted the explicit follow-up question.
In thiscase, the background may still contain the openproposition.Unlike in dialogue analyses carried out oncompleted ialogues (Grosz and Sidner, 1986),the dialogue manager needs to maintain a stackof all open discourse segments at each point inan on-going dialogue.
When a system allowscorrections, it can be difficult o determine whena user has completed a discourse segment.Ex.
7: Consecut ive Correct ionsU 34S 35U 36S 37U 38S 39Center on Objective Charlie?
There is no point named Objec-tive Charlie.
What point should Icenter on?95 65?
I will center on FQ 950 650I said 55 65?
I will center on FQ 550 650In example 7, for instance, when the user an-swers the question in utterance 36, the systemwill pop the frame corresponding to utterances34-35 off the stack.
However, the information ithat frame is necessary to properly interpret thecorrection in utterance 38.
Without some othermechanism it would be unsafe to ever pop a186frame from the stack, and the stack would growindefinitely.
Since the dialogue stack representsour best guess as to the set of currently open dis-course segments, we want to allow the system topop frames from the stack when it believes dis-course segments have been closed.
We make useof another epresentation, the dialogue trail, tolet us to recover from these moves if they proveto be incorrect.The dialogue trail acts as a history of all di-alogue stack operations performed.
Using thetrail, we record enough information to be ableto restore the dialogue stack to any previousconfiguration (each trail entry records one op-eration taken, the top of the dialog stack beforethe operation, and the top of the dialog stackafter).
Unlike the stack, the dialogue trail rep-resents the entire history of the dialogue, notjust the set of currently open propositions.
Thefact that the dialogue trail can grow arbitrarilylong has not proven to be a problem in practicesince the system typically does not look past thetop item in the trail.4.2 F in i te  State  Mach inesEach stack frame in the dialogue manager con-tains a unique dialogue state identifier.
Thesestates form a collection of finite-state machines(FSMs), where each FSM describes the turnscomprising a particular discourse segment.
Thedialogue stack is reminiscent of a recursive tran-sition network, in that the stack records the sys-tem's progress through a series of FSMs in par-allel.
However, in this case, the stack operationsare not dictated explicitly by the labels on theFSMs, but stack push operations correspond tothe onset of a discourse segment, and stack popoperations correspond to the conclusion of a dis-course segment.Most of the FSMs currently used in Com-mandTalk coordinate dialogue initiative.
TheseFSMs have a very simple structure of at mosttwo states.
For instance, there are FSMs rep-resenting discourse segments for clarificationquestions (utterances 23-24), reference failures(utterances 27-28), corrections (utterances 9-10), and guards becoming true (utterances 31-33).
CommandTalk currently uses 22 such smallFSMs.
Although they each have a very simplestructure, they compose naturally to supportmore complex dialogues.
In these sub-dialoguesthe user retains the task initiative, but the sys-tem may temporarily take the dialogue initia-tive.
This set of FSMs comprises the core dia-logue competence of the system.In a similar way, more complex FSMs canbe designed to support more structured ia-logues, in which the system may take more ofthe task initiative.
The additional structure im-posed varies from short 2-3 turn interactions tolonger "form-filling" dialogues.
We currentlyhave three such FSMs in CommandTalk:The Embark/Debark command has four re-quired parameters; a user may have diffi-culty expressing them all in a single utter-ance.
CommandTalk will query the user formissing parameters to fill in the structureof the command.The Infantry Attack command has a num-ber of required parameters, a potentiallyunbounded number of optional parameters,and some constraints between optional ar-guments (e.g., two parameters are each op-tional, but if one is specified then the othermust be also).The Nine Line Brief is a strMght-forwardform-filling command with nine parametersthat should be provided in a specified or-der.When the system interprets a new user ut-terance that is not a correction, the next alter-native is that it is a continuation of the currentdiscourse segment.
Simple examples of this kindof transition occur when the user is answering aquestion posed by the system, or when the userhas provided the next entry in a form-filling di-alogue.
Once the transition is recognized, thecurrent frame on top of the stack is popped.
Ifthe next state is not a final state, then a newframe is pushed corresponding to the next state.If it is a final state, then a new frame is notcreated, indicating the end of the discourse seg-ment.The last alternative for a new user utteranceis that it is the onset of a new discourse segment.During the course of interpretation of the ut-terance, the conditions for entering one or morenew FSMs may be satisfied by the utterance.These conditions may be linguistic, such as pre-supposition failures, or can arise from eventsthat occur in the simulation, as when a guard187is tested in example 6.
Each potential FSMhas a corresponding priority (error, warning, orgood).
An FSM of the highest priority will bechosen to dictate the system's response.One last decision that must be made iswhether the new discourse segment is a subseg-ment of the current segment, or if it should bea sibling of that segment.
The heuristic that-we use is to consider the new segment a subseg-ment if the discourse frame on top of the stackcontains an open proposition (as in utterance23).
In this case, we push the new frame on thestack.
Otherwise, we consider the previous eg-ment to now be closed (as in utterance 3), andwe pop the frame corresponding to it prior topushing on the new frame.4.3 Mechan isms for ReferenceCommandTalk employs two mechanisms formaintaining local context and performing refer-ence: a list of salient objects in the simulation,and focus spaces of linguistic items used in thedialogue.Since CommandTalk is controlling a dis-tr ibuted simulation, events can occur asyn-chronously with the operator's linguistic acts,and objects may become available for referenceindependently of the on-going dialogue.
For in-stance, if an enemy unit suddenly appears onthe operator's display, that unit is available forimmediate reference, even if no prior linguisticreference to it has been made.
The ModSAFagent notifies the dialogue manager wheneveran object is created, modified, or destroyed, andthese objects are stored in a salience list in or-der of recency.
The salience list can also be up-dated when simulation objects are referred tousing language.The salience list is not part of the dialoguestack.
It does not reflect attentional state;rather, it captures recency and "known" infor-mation.While the salience list contains only entitiesthat directly correspond to objects in the sim-ulation, focus spaces contain representations ofentities realized in linguistic acts, including ob-jects not directly represented in the simulation.This includes objects that do not exist (yet),as in "Objective Bravo" in utterance 28, whichis referred to with a pronoun in utterance 29,and sets of objects introduced by plural nounphrases.
All items referred to in an utteranceare stored in a focus space associated with thatutterance in the stack frame.
There is one focusspace per utterance.Focus spaces can be used during the genera-tion of pronouns and definite noun phrases.
Al-though at present CommandTalk does not gen-erate pronouns (we choose to err on the side ofverbosity, to avoid potential confusion due tomisrecognitions), focus spaces could be used tomake intelligent decisions about when to use apronoun or a definite reference.
In particular,while it might be dangerous to generate a pro-noun referring to a noun phrase that the userhas used, it would be appropriate to use a pro-noun to refer to a noun phrase that the systemhas used.Focus spaces are also used during the inter-pretation of responses and corrections.
In thesecases the salience list reflects what is knownnow, not what was known at the time the ut-terance being corrected or clarified was made.The focus spaces reflect what was known andin focus at that earlier time; they track atten-tional state.
For instance, imagine example 6had instead been:Ex.
6b:U 4OS 41U 42FocusingA14 advance there.?
There is no A14.
Which unitshould advance to Checkpoint 1?Create CEV at 635 545 and nameit A14.At the end of utterance 42 the system willreinterpret utterance 40, but the most recentlocation in the salience list is FQ 635 545 ratherthan Checkpoint 1.
The system uses the focusspace to determine the referent for "there" atthe  time utterance 40 was originally made.In conclusion, CommandTalk's dialogue man-ager uses a dialogue stack and trail, refer-ence mechanisms, and finite state machines tohandle a wide range of different kinds of di-alogue, including form-filling dialogues, free-flowing mixed-initiative dialogues, and dia-logues involving multi-modality.5 Re la ted  WorkCommandTalk differs from other recent spokenlanguage systems in that it is a command andcontrol application.
It provides a particularly188interesting environment in which to design spo-ken dialogue systems in that it supports dis-tributed stochastic simulations, in which oneoperator controls a certain collection of forceswhile other operators simultaneously controlother allied and/or opposing forces, and unex-pected events can occur that require responsesin real time.
Other applications (Litman et al,1998; Walker et al, 1998) have been in domainsthat were sufficiently limited (e.g., queries abouttrain schedules, or reading email) that the sys-tem could presume much about the user's goals,and make significant contributions to task ini-tiative.
However, the high number of possiblecommands available in CommandTalk, and themore abstract nature of the user's high-levelgoals (to carry out a simulation of a complexmilitary engagement) preclude the system fromtaking significant ask initiative in most cases.The system most closely related to Com-mandTalk in terms of dialogue use is TRIPS(Ferguson and Allen, 1998), although there areseveral important differences.
In contrast toTRIPS, in CommandTalk gestures are fully in-corporated into the dialogue state.
Also, Com-mandTalk provides the same language capabil-ities for user and system utterances.Unlike other simulation systems, such asQuickSet (Cohen et al, 1997), CommandTalkhas extensive dialogue capabilities.
In Quick-Set, the user is required to confirm each spokenutterance before it is processed by the system(McGee et al, 1998).Our earlier work on spoken dialogue in the airtravel planning domain (Bratt et al, 1995) (andrelated systems) interpreted speaker utterancesin context, but did not support structured ia-logues.
The technique of using dialogue contextto control the speech recognition state is similarto one used in (Andry, 1992).6 Future  WorkWe have discussed some aspects of Com-mandTalk that make it especially suited to han-dle different kinds of interactions.
We havelooked at the use of a dialogue stack, salienceinformation, and focus spaces to assist inter-pretation and generation.
We have seen thatstructured ialogues can be represented by com-posing finite-state models.
We have briefly dis-cussed the advantages of using the same gram-mar for all linguistic aspects of the system.
It isour belief that most of the items discussed couldeasily be transferred to a different domain.The most significant difficulty with this workis that it has been impossible to perform a for-mal evaluation of the system.
This is due tothe difficulty of collecting data in this domain,which requires speakers who are both knowl-edgeable about the domain and familiar withModSAF.
CommandTalk has been used in sim-ulations of real military exercises, but those ex-ercises have always taken place in classified en-vironments where data collection is not permit-ted.To facilitate such an evaluation, we are cur-rently porting the CommandTalk dialogue man-ager to the domain of air travel planning.
Thereis a large body of existing data in that domain(MADCOW, 1992), and speakers familiar withthe domain are easily available.The internal representation of actions inCommandTalk is derived from ModSAF.
Wewould like to port that to a domain-independentrepresentation such as frames or explicit repre-sentations of plans.Finally, there are interesting options regard-ing the finite state model.
We are investigatingother representations for the semantic ontentsof a discourse segment, such as frames or activetemplates.7 AcknowledgmentsWe would like to thank Andrew Kehler, DavidIsrael, Jerry Hobbs, and Sharon Goldwater forcomments on an earlier version of this paper,and we have benefited from the very helpfulcomments from several anonymous reviewers.Re ferencesF.
Andry.
1992.
Static and Dynamic Predic-tions: A Method to Improve Speech Under-standing in Cooperative Dialogues.
In Pro-ceedings of the International Conference onSpoken Language Processing, Banff, Canada.H.
Bratt, J.Dowding, and K. Hunicke-Smith.1995.
The SRI Telephone ATIS System.In Proceedings of the Spoken Language Sys-terns Technology Workshop, pages 218-220,Austin, Texas.A.
Ceranowicz.
1994.
Modular Semi-Automated Forces.
In J.D.
Tew et al,189editor, Proceedings of the Winter SimulationConference, pages 755-761.J.
Chu-Carroll and M. Brown.
1997.
TrackingInitiative in Collaborative Dialogue Interac-tions.
In Proceedings of the Thirty-Fifth An-nual Meeting of the A CL and 8th Conferenceof the European Chapter of the ACL, Madrid,Spain.P.
Cohen, M. Johnston, D. McGee, S. Oviatt,J.
Pittman, I. Smith, L. Chen, and J. Clow.1997.
QuickSet: Multimodal Interaction forDistributed Applications.
In Proceedings ofthe Fifth Annual International MultimodalConference, Seattle, WA.J.
Dowding, J. Gawron, D. Appelt, L. Cherny,R.
Moore, and D. Moran.
1993.
Gemini: ANatural Language System for Spoken Lan-guage Understanding.
In Proceedings of theThirty-First Annual Meeting of the ACL,Columbus, OH.
Association for Computa-tional Linguistics.J.
Dowding, R. Moore, F. Andry, and D. Moran.1994.
Interleaving Syntax and Semantics inan Efficient Bottom-Up Parser.
In Proceed-ings of the Thirty-Second Annual Meeting ofthe A CL, Las Cruces, New Mexico.
Associa-tion for Computational Linguistics.G.
Ferguson and J. Allen.
1998.
TRIPS: AnIntelligent Integrated Problem-Solving Assis-tant.
In Proceedings of the Fifteenth NationalConference on Artificial Intelligence (AAAI-98), Madison, WI.B.
Grosz and C. Sidner.
1986.
Attention, Inten-tions, and the Structure of Discourse.
Com-putational Linguistics, 12(3):175-204.D.
Litman, S. Pan, and M. Walker.
1998.
Eval-uating Response Strategies in a Web-BasedSpoken Dialogue Agent.
In Proceedings ofthe 38th Annual Meeting of the Associationfor Computational Linguistics, pages 780-786, Montreal, Canada.MADCOW.
1992.
Multi-Site Data Collectionfor a Spoken Language Corpus.
In Proceed-ings of the DARPA Speech and Natural Lan-guage Workshop, pages 200-203, Harriman,New York.D.
Martin, A. Cheyer, and D. Moran.
1998.Building Distributed Software Systems withthe Open Agent Architecture.
In Proceed-ings of the Third International Conference onthe Practical Application of Intelligent Agentsand Multi-Agent Technology, Blackpool, Lan-cashire, UK.
The Practical Application Com-pany Ltd.D.
McGee, P. Cohen, and S. Oviatt.
1998.
Con-firmation in Multimodal Systems.
In Proceed-ings of the 38th Annual Meeting of the Asso-ciation for Computational Linguistics, pages823-829, Montreal, Canada.R.
Moore, J. Dowding, H. Bratt, J. Gawron,Y.
Gorfu, and A. Cheyer.
1997.
Com-mandTalk: A Spoken-Language Interface forBattlefield Simulations.
In Proceedings of theFifth Conference on Applied Natural Lan-guage Processing, pages 1-7, Washington,DC.
Association for Computational Linguis-tics.R.
Moore.
1999.
Using Natural LanguageKnowledge Sources in Speech Recognition.
InKeith Ponting, editor, Speech Pattern Pro-cessing.
Springer-Verlag.S.
M. Shieber, G. van Noord, R. Moore,and F. Pereira.
1990.
A Semantic Head-Driven Generation Algorithm for Unification-Based Formalisms.
Computational Linguis-tics, 16(1), March.M.
Walker, J. Fromer, and S. Narayanan.1998.
Learning Optimal Dialogue Strategies:A Case Study of a Spoken Dialogue Agentfor Email.
In Proceedings of the 38th An-nual Meeting of the Association for Compu-tational Linguistics, pages 1345-1351, Mon-treal, Canada.190
