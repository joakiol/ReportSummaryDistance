Dialogue complexity with portability?Research directions for the Information State approachCarl Burke, Christy Doran, Abigail Gertner,Andy Gregorowicz, Lisa Harper, Joel Korb, Dan LoehrThe MITRE Corporation202 Burlington Road, Bedford, MA 01730{cburke,doran,gertner,andrewg,lisah,jkorb,loehr}@mitre.orgAbstractWe review existing types of dialogue manag-ers (DMs), and propose that the InformationState (IS) approach may allow both complex-ity of dialogue and ease of portability.
Wediscuss implementational drawbacks of theonly existing IS DM, and describe our workunderway to develop a new DM resolvingthose drawbacks.1 IntroductionSpoken dialogue systems have shown steady improve-ments in recent years.
To continue advancing the stateof the field, we must direct research towards reducing atradeoff between complexity and portability.
Otherwise,we will continue to have systems which can handlecomplex interactions, or systems which can be easilymodified for new domains, but not both.The simplest existing dialogue managers (DMs), fi-nite-state systems, are suitable for simple, well-structured system-initiated dialogue tasks.
They alsomake it easy for novice developers to create new dia-logue systems.
Yet this type of DM does not scale wellto mixed-initiative dialogues or complicated tasks witha wide variety of possible input.
The most well-knownsuch DM is VoiceXML.
Similar systems include Ore-gon Graduate Institute?s Rapid Application Developer(CSLU 2002), Unisys' Dialog Design Assistant (Unisys1998), Nuance?s Speech Objects, the Swedish GULAN(yellow pages) system (Gustafson et al1998), and sev-eral commercial systems by SpeechWorks.More sophisticated, mixed-initiative, frame-basedDMs often make use of semantic ?frames?
containingmultiple ?slots?
or ?keys?, each of which can hold avalue.
Either conversational partner can volunteer orrequest information about any slots in the frame, at anytime, in any order.
When enough slots are filled to thesatisfaction of both parties, the task and conversationare complete.
This type of DM supports a more flexible,arbitrary flow-of-control, often controlled by scripts ofrules firing upon certain conditions.
Examples of thesetypes of DMs include Philips?
SpeechMania (Aust andSchroer 1998), the Dialogue Design Language Tool inthe Danish Generic Dialogue System (Bernsen et al1998), and several of the DMs developed (by e.g.
MITand the University of Colorado) for the DARPA Com-municator infrastructure.Even more complex plan-based DMs reason about?plans?
and communicative ?goals?, and try to move theconversation along towards achieving these goals.
Byrepresenting the relationships between goals, subgoals,and primitive actions in a domain, these systems cansupport dialogues with a broader scope than the frame-based DMs can.
Notably, they are intended to detecttopic shifts as well as support dynamic re-planningwhen misunderstandings occur.
These systems typicallymodel communicative goals in terms of speech actswhere speech acts affect goals, beliefs, intent and/orobligations of the participants.
These DMs can also becomplex to develop, and correspondingly difficult toport to new applications.
Examples of this type areCOLLAGEN (COLLaborative AGENts), by MitsubishiElectric Research Lab (Rich et.
al.
2001), and the Uni-versity of Rochester?s TRAINS and TRIPS systems(CISD 2000).The approach we find most promising, however, isthe Information State (IS) approach, which simplifiesdevelopment by providing a rule-based language forspecifying dialogue systems while allowing the flexible,complex interactions characteristic of plan-based dia-logues.
An IS theory of dialogue proposed by Cooperand Larson (1998) models dialogue states (i.e.
struc-tured semantic objects) as dependent record types.
Dia-logue moves (roughly equivalent to speaker turns) arecharacterized as transitions between information statesin a manner that is neutral with regard to semantic the-ory.
This approach to dialogue modeling enables devel-opers to model the system information state in such away that arbitrary linguistic theories of dialogue may beformalized, implemented, and compared.
ISs may beused to model relations between various kinds of infor-mation such as utterances, background knowledge, non-verbal events and visual scenes.
This is crucial to mul-timodal dialogue processing.
Another important featureof the IS approach is that developers have the flexibilityto define levels of dialogue as well as model goals, in-tent, beliefs and obligations.
Thus the IS approach mayalso be used to model more complex dialogues usingconcepts derived from plan-based theories of dialogue -perhaps, inheriting some of the same challenges.
How-ever, the same framework may be used to also modelsimpler finite-state dialogues.TRINDIKit (TRINDI 2002) is an IS-based opensource Prolog toolkit.
TRINDIKit itself provides thebasic infrastructure of a dialogue manager.
It providesstructured data types and the means to define an Infor-mation State from those types, a language for definingthe modules of a Dialogue Move Engine (DME), and alanguage for controlling the application of individualmodules to dialogue management.We have built two dialogue systems using TRIN-DIKit (Burke et al2002).
We first developed a multi-modal information kiosk by adapting GoDiS(Gothenburg Dialogue System) (Larsson et al2000),which implements the Questions Under Discussionmodel in TRINDIKit.
Adapting this existing TRIN-DIKit DM to a new question-answer domain requiredvery little effort (less than two staff-weeks from initialdownloading of TRINDIKit to an operational systemopen to the public).
We then modified the DM to sup-port control of a search-and-rescue robot using aspeech-and-sketch interface on a PDA, again with rela-tively little effort.
Based on our experience, we feel thatthe IS approach to dialogue management as espoused byTRINDI is a strong candidate for supporting both com-plexity and portability.
In the remainder of this paper,we discuss some implementational drawbacks ofTRINDIKit, and our work underway to develop a newtoolkit, inspired by TRINDIKit but re-engineered toeliminate its drawbacks.23Implementational DrawbacksData consistency.
TRINDIKit does not exercise goodcontrols over asynchronous modifications to the IS.
Atone point we had to build artificial delays into our sys-tem to work around these limitations.
The DM we builtwas based on GoDiS, which requires very structuredturn-taking.
In several cases, however, the interactionswith the user flowed better if these responses wereautomatic.
Processing was sufficiently slow that ourGUI?s automatic acknowledgement often arrived andwas processed before TRINDIKit was finished cleaningup from the previous utterance.
As a result, it was pos-sible to change the IS twice before the DME could re-spond to one change, and the system lost track of thedialogue state.
Consistency of data needs to be assuredthroughout the design of the system.Inconsistent semantics.
We encountered situationswhere constructs of the GoDiS plan language were in-terpreted differently depending on the depth of the plan.With the proliferation of small languages implementedby different sets of macros, it was difficult to trackdown bugs in the rules and conversation scripts.
Thiswas made more difficult by the nature of Prolog.Clauses that fail do not normally generate any errormessages, because failure is a normal aspect of programexecution.
Unfortunately, database bugs and misspellednames often caused unexpected failures, causing thesystem to generate either no response or a response thatlooked reasonable but was in fact incorrect.
We feel it?snecessary to provide explicit notification of certainkinds of failure, such as failure to find a named variable,failure to find a matching value in a table, and so on.Multimodal processing.
Neither TRINDIKit norGoDiS provides any direct support for multimodalprocessing.
The primary interface driving the develop-ment of these systems was language; there is no separa-tion of events by source, no temporal tagging of inputevents, and no provision for assessing temporal relation-ships between different inputs.Proposed SolutionsFrom our experience with TRINDIKit, we are con-vinced of the advantages of a kit-based approach.
Wefeel that TRINDIKit was a good first cut at it, and hopethat our efforts will lead to a second, somewhat betteriteration.
We are therefore moving ahead with a newDM kit, tentatively called MIDIKI (MITRE DIalogueKIt), with the following features.Distributed information state.
We have chosen tomodel all of our module interactions as if they wereasynchronous.
This provides the cleanest separation ofmodules, and the cleanest conceptual integration withthe asynchronous requirements of robot control.
Ourapproach to solving this problem is to define an explicitinterface definition language, which will be used to de-fine every module?s interface with the outside world.We explicitly include the information state structure inthis interface definition, perhaps as a module in itself.Since TRINDIKit does not include a separate languagefor specifying module interfaces, we are designing ourown.
This language is analogous to CORBA InterfaceDefinition Language, but with less concern for thephysical implementation.Controlled extensibility.
Our interface specificationswill need to be translated into specific computer lan-guages before they can be executed.
The translation willvary depending on the underlying protocol used tocommunicate between modules.
While we want to sup-port the widest possible audience, we don?t want to getbogged down in the construction of translators for everypossible set of implementation language and protocol.Our approach is to exploit an existing standard set oftranslation software, namely XML and XSLT proces-sors such as Xalan.
We are specifying a dialect of XMLfor modules interface definitions, and a small set oftemplates for realizing interfaces with specific combina-tions of programming language and protocol.
Additionaltemplates can be written to extend the kit to other lan-guages and protocols without requiring modification ofthe kit itself.Rule engine.
The DME rules in TRINDIKit havestrong similarities to rules in expert systems.
We plan toimplement these rules in both a sequential form, equiva-lent to the current TRINDIKit, and in an expert systemform which may be more efficient.
We expect that therewill be differences in operating characteristics betweenthose two styles, and we want to identify and quantifythose differences.Control and synchronization.
Our primary focus ismultimodal communication, potentially multiparty aswell.
We are extending TRINDIKit?s triggers to includesupport for consideration of temporal relationships be-tween events, both within and across modes.Integrated environment.
An ideal toolkit wouldhave an integrated set of tools for designing, testing, anddebugging dialogues.
We would like to support staticand dynamic analysis of dialogues, recording and play-back of dialogues, graphical dialogue design tools, a?validation suite?
of tests to support extension of thetoolkit to new programming languages and agent proto-cols, and above all, the ability to plug-in as-yet-undefined capabilities.4 Future WorkSignificant effort has been devoted to defining our mu-table language capability.
This capability provides botha transition path from TRINDIKit scripts and a meansfor specifying module interfaces and information statestructure using a common XML representation.Our intent is to provide support for several differenttransport mechanisms to explore the limitations of ourapproach.
To date, we have completed an initial inter-face definition specification and have developed tem-plates to realize those interfaces with the OAA.DARPA's Galaxy Communicator is the second transportmechanism we will be considering.We have devoted considerable time to up-front con-sideration of scripting languages, portable code genera-tion, and module communications, and are nowbeginning the task of implementing our versions of theTRINDIKit scripting languages.
Our target realizationfor these scripts is a combination of Java code and ex-pert systems that can be executed within a Java pro-gram.We plan to port and formally evaluate our dialoguetoolkit within three domains (question-answering,automated tutoring, and multimodal robot control).
Ourdialogue toolkit will be openly available, as well assample implementations for each of these domains.ReferencesAust, H. and Schroer, O.
(1998) An overview of thePhilips dialog system.
DARPA Broadcast NewsTranscription and Understanding Workshop, Lans-downe, VA.Bernsen, N. O., Dybkj?r, H. and Dybkj?r, L. (1998)Designing interactive speech systems.
From firstideas to user testing.
Springer Verlag.Burke, C., Harper, L., and Loehr, D. (2002) A FlexibleArchitecture for a Multimodal Robot Control Inter-face.
Intelligent Situation-Aware Media and Presen-tations Workshop, AAAI '02.CISD (Conversational Interaction and Spoken DialogueResearch Group) (2000) ?TRIPS: The Rochester In-teractive Planning System?, URL (Mar 2003):http://www.cs.rochester.edu/research/trips.Cooper, R., and Larsson S. (1998) Dialogue Moves andInformation States, Third International Workshop onComputational Semantics.CSLU (Center for Spoken Language Understanding)(2002) ?CSLU Toolkit?, URL (Mar 2003):http://cslu.cse.ogi.edu/toolkit.Gustafson, J., Elmberg, P., Carlson,R., and J?nsson, A.
(1998) An educational dialogue system with a usercontrollable dialogue manager.
ICSLP?
98.Larsson, Staffan, Robin Cooper, Stina Ericsson (2000)System Description of GoDis.
Third Workshop inHuman-Computer Conversation, Bellagio, Italy.Rich, C., Lesh, N. and Sidner, C. (2001) COLLAGEN:Applying Collaborative Discourse Theory.
AIMagazine, Special Issue on Intelligent User Inter-faces.TRINDI (2002) ?TRINDIKit?, URL (Mar 2003):http://www.ling.gu.se/projekt/trindi/trindikit.Unisys (1998) ?Unisys Corporation: Natural languagespeech assistant (NLSA): capabilities overview?.Malvern, PA.
