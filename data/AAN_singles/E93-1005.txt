Decidability and Undecidabilityin stand-alone Feature LogicsPatrick BlackburnDepartment of Philosophy, University of UtrechtHeidelberglaan 8, 3584 CS Utrecht, The NetherlandsEmail: patrick@phil.ruu.nlEdith SpaanDepartment of Computer Science, SUNY at Buffalo226 Bell Hall, Buffalo, NY 14260, United States of AmericaEmaih spaan@cs.buffalo.EDUAbstractThis paper investigates the complexity ofthe satisfiability problem for feature logicsstrong enough to code entire grammars un-aided.
We show that feature logics capableof both enforcing re-entrancy and statinglinguistic generalisations will have undecid-able satisfiability problems even when mostBoolean expressivity has been discarded.We exhibit a decidable fragment, but therestrictions imposed to ensure decidabilityrender it unfit for stand-alone use.
The im-port of these results is discussed, and weconclude that there is a need for feature log-ics that are less homogeneous in their treat-ment of linguistic structure.1 Introduct ionThis paper investigates decidability and undecidabil-ity in stand-alone f ature logics, that is, feature logicsstrong enough to express entire grammars withoutthe assistance of a phrase-structure backbone.
Ourresults are predominately negative and seem appli-cable to most existing stand-alone formalisms.
Westrengthen a result of \[Blackburn and Spaan 1991,1992\] to show that the ability to express re-entraneyand the ability to express generalisations about fea-ture structures interact in ways that lead to unde-cidability even if most Boolean expressivity has beendropped from the logic.
Even our positive resultshave a negative flavour.
We exhibit a decidable frag-ment, but the restrictions imposed to attain decid-ability render it incapable of encoding interestinggrammars unaided.But what is the import of such results?
This isthe question we turn to in the last section of thepaper.
Basically, we regard such results as a signthat existing feature logics treat linguistic structuretoo homogeneously.
What is needed are feature log-ics which are more sensitive to the fine structure oflinguistic theorising.The paper is relatively self contained, nonethelessthe reader may find it helpful to have \[Kasper andRounds 1986, 1990\] and \[Blackburn and Spaan 1991,1992\] to hand.2 Prel iminariesFeature logics are abstractions from the unifica-tion based formalisms of computational linguistics.Originally feature logics embodied just one compo-nent of unification based formalisms.
Early unifica-tion formalisms uch as GPSG \[Gazdar et al 1985\]and LFG \[Kaplan and Bresnan 1982\] have impor-tant phrase structure components in addition to theirfeature passing mechanisms, and the study of featurelogic was originally intended to throw light only onthe latter.
These early unification formMisms arethus highly heterogeneous: they are architectureswith roots in both formal anguage theory and logic.In recent years this picture has changed.
For ex-ample, in HPSG \[Pollard and Sag 1987\] the featuremachinery has largely displaced the phrase struc-ture component.
Indeed in HPSG the residue of thephrase structure component is coded up as part ofthe feature system.
Logic has swallowed formal lan-guage theory, and in effect the entire HPSG formal-30ism is a powerful feature logic, a stand-alone formal-ism, capable of encoding complex grammars withoutthe help of any other component.
1In this paper we are going to investigate the com-putational complexity of the satisfiability problemfor such stand-alone f ature logics.
This is an impor-tant problem to investigate.
Natural anguage gram-mars are expressed as logical theories in stand-aloneformalisms, and sentences are represented as wffs.This means that the problem of deciding whether ornot a sentence is grammatical reduces to the problemof building a model of the sentence's logical represen-tation that conforms to all the constraints imposedby the logical encoding of the grammar.
In short,the complexity of the satisfiability problem is essen-tially the worst case complexity of the recognitionproblem for grammars expressed in the stand-aloneformalism.We will tackle this issue by investigating the com-plexity of the satisfiability problem for one partic-ular stand-alone formalism, namely L KRo .
This isthe language of Kasper Rounds logic augmented withthe strict implication operator.
L KRm possesses twoof the most fundamental properties of stand-aloneformalisms: the ability to express re-entrancy, andthe ability to express generalisations about featurestructures.
It is important o note that L KR~ isactually a fairly minimal language with these prop-erties; many feature logics can express a lot morebesides (for example, set values), thus the negativeresults for L KR=~ we present are rather strong: theyextend straightforwardly to richer formalisms.So let's begin by defining L KR~.
By a signature(?, S) is meant a pair of non-empty sets L: and S, theset of arc labels and the set of sorts respectively.
Syn-tactically, the language L KR=~ (of signature (?
:, S))contains the following items: an S indexed collec-tion of propositional symbols (or sort symbols); allthe standard Boolean operators; 2 an ?
indexed col-lection of distinct unary modalities (that is, features);a binary modality ==~; and two special symbols 0 and,~.
We use ~., to make path equations: given any non-empty sequences A and B consisting of only unarymodalities and O, then A ~ B is a path equation.1 See \[Johnson 1992\] for further discussion of the distinctionbetween stand-alone formalisms and formalisms with a phrasestructure backbone.2That is, we have the symbols True (constant true), False(constant false), ~ (negation), v (disjunction), A (conjunc-tion), --* (material implication) and 4--* (material equivalence).For the purposes of the present paper it is sensible to assumethat all these operators are primitives, as in general we will beworking with various subsets of the full language and it wouldbe tedious to have to pay attention to trivial issues involvingthe interdefinability of the Boolean operators in these weakerfragments.Intuitively A ~ B says that making the sequence offeature transitions encoded by A leads to the samenode as making the transition sequence coded by B.The symbol 0 is a name for the null transition.
Thestrict implication operator =~ will enable us to ex-press generalisations about feature structures.We make the wffs of L KR~ as follows.
First, allpropositional symbols, all path equations and Trueand False are wffs.
Second, if ?
and ?
are wits thenso are all Boolean combinations of ?
and ?~ so is(1)?
(for a l l l  E ?)
and so is ?
=~ ?.
Third, noth-ing else is a wff.
If a wff of L KR:* does not containany occurrences of ==~ then we say it is an L KR wff.Apart from trivial notational changes, the negationfree fragment of L KR is the language defined andstudied by Kasper and Rounds.
3 That is, the L KRwffs are essentially a way of writing the familiar At-tribute Value Matrices (AVMs) in linear format.
Forexample, the following L KR wff:<NUMBER)pluralA (CASE)(nom V gen V acc)is essentially the following AVM:CASE nora or gen or accTo interpret L KRo  we use feature structures Mof signature (/~,S).
A feature structure is a triple(W, {Rt}tez:, V), where W is a non-empty set (theset of nodes); each Rz is a binary relation on Wthat is also a partial function; and V (the valua-tion) is a function which assigns each propositionalsymbol p E S a subset of W. Note that as we havedefned them features tructures are merely multi-modal Kripke models, 4 and we often refer to featurestructures as models in what follows.Now for the satisfaction definition.
As the sym-bol 0 is to act as a name for the null transition, inwhat follows we shall assume without loss of gener-ality that 0 ?
?, and we will denote the identity re-lation on any set of nodes W by R0.
This conventionsomewhat simplifies the statement of the satisfaction3Computer scientists may have met L KR in another guise.The language of Kasper Rounds logic is a fragment of (de-terministic) Propositional Dynamic Logic (PDL) with intel~section (see \[Harel 1984\]).
An L lea path equation A ,~ B iswritten as (An  B) True in PDL with intersection.4 For further discussion of the modal perspective ol* featurelogic, see \[Blackburn and Spaan 1991, 1992\].31definition:M ~ pa\[w\] iff w e V(pa)M ~ (ll)-..(lk) iff Bw'(wRt,...Rz~w'(l l).
.
.
(l-)\[~\] ~ ~R~ ... R~-~')M ~ --?\[w\] iff M ~ ?\[w\]M ~ eVe\[w\] iff M ~ ?\[w\] orM ~ ?\[w\]M ~ (l)?\[w\] iff qw'(wRtw' andM ~ ?\[w'\])M ~ ?
=v ?\[w\] iff Vw'(M ~ ?\[w'\]implies M ~ ?\[w'\])The satisfaction clauses for True, False, A, --.
and*-* have been omitted; these symbols receive theirstandard Boolean interpretations.
If M ~ ?\[w\] thenwe say that M satisfies ?
at w, or ?
is true in M atw (where w E W).The key things to note about this language is thatit has both the ability to express re-entrancy (theKasper Rounds path equality ~ achieves this) andthe ability to express generalisations about featurestructures (note that ?
::~ ?
means that at everynode where ?
is true, ~b must also be true).
ThusL KR~ can certainly express many of the conditionswe might want to impose on feature structures.
Forinstance, we might want to impose a sort hierarchy.As a simple example, given sorts list and nelist (non-empty list) we might wish to insist that every nodeof sort nelist is also of sort list.
The wffnelist ~ listforces this.
As a second example, we might wantto insist that any node from which it is possible tomake a CONSTITUENT-STRUCTURE transition mustbe of sort phrasal.
That is, if a node has constituentstructure, it is a phrasal node.
The wff(CONST ITUENT-STRUCTURE)  True ~ phrasalforces this.
Indeed quite complex demands can beimposed using L KR.
For example the following wffembodies the essence of the constraint known as thehead feature convention in HPSG:phrasal ~ (HEAD) ~,~ (HEAD-DTR)(HEAD).This wff says that at any node of sort phrasal ina feature structure, it is possible to make a ilEAl)transition and it is also possible to make a HEAD-DTR transition followed by a HEAD transition, andfurthermore both transition sequences lead to thesame node.
In view of such examples it doesn't seemWholly unrealistic to claim that L KR has the kind ofexpressive power a stand-alone feature logic needs.However L TM has crossed a significant com-plexity boundary: it has an undecidable satisfiabil-ity problem.
This was proved in \[Blackburn andSpaan 1991, 1992\] using a tiling argument, s Now,the result for the full L t':n=~ language is not partic-ularly surprising (undecidability results for relatedfeature logics, can be found in the literature; see\[Carpenter 1992\] for discussion) but it does lead toan important question: what can be salvaged?
Toput it another way, are there decidable fragments ofL KR that are capable of functioning as stand-alonefeature logics?
The pages that follow explore thisquestion and yield a largely negative response.3 DecidabilityTo begin our search for decidable fragments we willtake our cue from Kasper and Rounds' original work.Kasper and Rounds' system was negation free, so thefirst question to ask is: what happens if we simplyremove negation from L KR:~?
Of course, if this isall we do we trivialise the satisfiability problem: it isimmediate by induction on the structure of negationfree wffs ?, that every negation free L KR~ wff is sat-isfied in the following model: M = ({w}, {Rt}tec, V)where Rz = {(w,w)} for a l l /E /~,  and Y(p) = {w}for all propositional variables p. So we have regaineddecidability, but in a very uninteresting way.Now, what made the results of Kasper and Roundsinteresting was that not only did they consider thenegation free fragment (of LKR), they also imposedcertain semantic restrictions.
Only extensional mod-els without constant-constant or constant-compoundclashes were considered.
6 Will imposing any (or all)of these restrictions make it easier to find decidablefragments of L KR~ ?
In fact demanding extensional-ity (that is, working only with models in which eachatomic symbol is true at at most one node), doesmake it easy to find a decidable fragment.The fragment is the following.
We consider wffs ofthe following form:Here ?
is a metavariable over L Kn wffs (that is, ?contains no occurrences of =?,); the ai (1 < i < n)SThese papers take the universal  modal i ty  \[\] as pr imit iverather  that  =?,, as it is somewhat  easier to work with unarymodal i t ies.
In the presence of full Boolean expressivity I:3 and:=~ axe interdefmable: Elf is True :=~ ?, and ::~ is 1:3(?
--.
~b).However in what  follows we will work with f ragments  withoutenough Boolean expressivity to interdefine these operators.
As:?, is the operator  we are really interested in we have chosenit as our  pr imit ive here.SAs Kasper  and Rounds  showed, int roducing this l imitedform of negat ion failure results  in an  NP complete satisfiabil ityproblem.32are metavariables over combinations of sort symbolscontaining only V and A as logical operators; and theai (1 < i < n) are metavariable over L KR wits.Note the general form of the wffs of this fragment.We have an L KR wff ?
conjoined with n general con-straints o~i :2z tq.
7 The ?
can be thought of as theAVM associated with some particular natural lan-guage sentence, while the wffs of the form c~i ::~ ~ican be thought of as encoding the generalisationsembodied in our grammatical theory.
Looking for asatisfying model for a wff from this fragment is thuslike asking whether the analysis of some particularstring of symbols is compatible with a grammar.The proof that this fragment has a decidable sat-isfiability problem is straightforward.
We're going toshow that given any wff@ belonging to this fragment,there is an upper bound on the size of the models thatneed to be inspected to determine whether or not (I)is satisfiable.
The fact that such an upper boundexists is a direct consequence of three lemmas whichwe will now prove.The first lemma we need is extremely obvious, butwill play a vital role.Lemma 3.1 Let a be any wff containing no logicalconnectives apart from V and A.
Then in any ex-tensional model, c~ is satisfied at at most m nodes,where m is the number of distinct sort symbols in a.Proof :  By induction on the construction of a.
\[\]The importance of this lemma is that it gives usan upper bound on the number of nodes at whichthe antecedents ai of the constraints permitted inour fragment can be satisfied.Next we need a similar result for the L KR wffs ofthe fragment; that is, for the ?
and the consequents~i of the constraints.
As the next two lemmas es-tablish, given any L KR wff C which is satisfiable ata node w in some model M, we can always manu-facture a very small model MInodes(C , w) which alsosatisfies 4.
How we go about defining MInodes(C, w)is suggested by the following observation: when eval-uating a formula in some model, only certain of themodel's nodes are relevant o the truth or falsity ofthe wff; all the irrelevant nodes can be thrown away.What the following two lemmas essentially tell us isthat we can manufacture the small models we needby discarding nodes.The nodes that are relevant when evaluating anL KR wff C at a node w in a model M are the nodesselected by the function nodes : WFF x W ,Pow(W) that satisfies the following conditions:;'In what follows we refer to the cq as the antecedents ofthe constraints, and the ai as the consequents.nodes(p ,w)  = {w}nodes(",C,w) = nodes(C,w)nodes(C V O, w) = nodes(C, w) U nodes(O, w)nodes((i)?, ) = {w} u nodes(C,One aspect of the definition of nodes may be both-ering the reader: there is no clause for the path equa-tions.
In fact to give such a clause is rather messy,and it seems better to proceed as follows.
Given a wffC of L Ks we define C* to be the result of replacingevery subformula of the forminCby( l l ) - .
.
(Ik) ( l l ) - .
.
q ' )(l,) .
.-(tk) ( t l ) .
.
.
(i',)^ (ll)...(lk)Tr e^ (tl) ?
?
?
(i',) Tr e.Clearly ?
is satisfiable at any node in any model iff4" is (all we've done is make the node existence de-mands encoded in the path equalities explicit).
Theusefulness of this transformation is simply that thetwo new conjuncts make available to the simple ver-sion of nodes defined above all the information hid-den in the path equations.
From now on we'll assumethat all the L KR wffs we work with have been trans-formed in this fashion.With these preliminaries out of the way we areready to proceed.
Given a model M, an L KR wff ?and a node w we form Mlnodes(C , w) in the obviousway: the nodes of the model are nodes(C, w), and therelations and valuation are the restriction of those ofM to this subset.
As the following simple lemmashows, nodes indeed picks out the correct nodes:Lemma 3.2 (Se lect ion  Lemma)  For all modelsM, all nodes w of M and all L h'R~ wffs g'.M ~ C\[w\] iff Mlnodes(?, w) ~ ?\[u,\].Proof :  By induction on the structure of ?,.
(Notethat it follows from the definition of nodes that w Enodes(C,w).
Once this is observed the induction isstraightforward.)
DThe selection lemma is a completely general factabout modal languages.
It doesn't depend on anyspecial assumptions made in this paper, and in par-ticular it doesn't make any use of the fact that we areonly working with models in which each of the Rt isa partial function.
Once this additional fact is takeninto account, however, we see that M\[nodes(~,, w)ispleasingly small: there can only be one more node inM\[nodes(?, w) than there are occurrences of modal-ities in ?.
That is, we have:33Lemma 3.3 (Size Lemma)  Let W be an L KR wff,and let mod(W) be the number of occurrences ofmodalities in W. Then for all models M and all nodesw in M we have that Inodes(W,w)\{w}l < ,nod(W).Proof: By induction on the structure of ~b.
ClWe now have all the pieces we need to establish thedecidability result.
Using these lemmas we can showthat given any wff (I) of our fragment it is possibleto place an upper bound on the size of models thatneed to be checked to determine whether or not (I) issatisfiable.
So, suppose (b is a wff of the form^ (41 ~ ~1) ^ .
.
.
^  ( - .
~ ~n)that is satisfiable.
That is, there is a model M anda node w in M such that M ~ ~\[w\].
Now, simplyforming M\[nodes(q~,w) is not a process guaranteedto make a smaller model satisfying (I).
The problemis that while this model certainly satisfies ~, in thecourse of selecting all the needed nodes we may beforced to select a node that verifies an antecedentai of one of the general constraints, but we have noguarantee that we have selected all the nodes neededto make the matching consequent t?i true.But this is easy to fix.
We must not only formMlnodes(e~, w), but in addition, for all i (1 < i < n)we must form Mlnodes(cq ^ ai, s), where s rangesover all the nodes in M that satisfy c~i.
More pre-cisely, we define a new model M'  by taking as nodesall the nodes in all these models (that is, we take theunion of all the nodes in all these models) and wedefine the M'  relations and valuation to be the re-striction of the relations and valuation in M to thissubset.The new model M'  has two nice properties.Firstly, it is clear that it makes ~ true at w and more-over, whenever it makes one of the ai true it makesthe corresponding ~itrue also.
(This follows becauseof our choice of the nodes of M'; essentially we'remaking multiple use of the selection lemma here.
)Secondly, it is clear that M'  is finite, for its nodeswere obtained as a finite union of finite sets.
Indeedby making use of lemma 3.1 and the size lemma wecan give an upper bound on the size of M'  in termsof the number of symbols in (I).
(This is just a mat-ter of counting the number of general constraints in(I), the number of distinct propositional variables inthe c~i, and the number of modal operators in theand tzi; we leave the details to the reader.)
Thus thedecidability result follows: given a wff if) of our frag-ment, bounded search through finite models sufficesto determine whether or not (I) is satisfiable.Alas, this is not a very powerful result.
The frag-ment simply is not expressive nough to function asa stand-alone formalism.
Its Achilles heel lies in thestrong condition imposed on the ai.
There are twoproblems.
First, because the ai cannot contain oc-currences of features or path equations, many impor-tant constraints that stand-alone feature might haveto impose cannot be expressed.
Second, it is far fromclear that the restriction to extensional models is re-alistic for stand alone formalisms.
Certainly if wewere trying to capture the leading ideas of HPSG itwould not be; the freedom to decorate different nodeswith the same sortal information plays an importantrole in HPSG.Can some of the restrictions on the ai be dropped?As the proof of the result shows, there is no obviousway to achieve this: as soon as we allow featuresor path equations in the (~i, the assumption of ex-tensionality no longer helps us find an upper boundon the number of satisfying nodes, and the proof nolonger goes through.
Essentially what is needed isa way of strengthening lemma 3.1, but it is hard tofind a useful way of doing this.
Even imposing anacyclicity assumption on our models doesn't seem tohelp.
As the results of the next section show, this isno accident.
The combination of ~ and =* is intrin-sically dangerous.4 Undec idab i l i tyThe starting point for this section is the undecidabil-ity result for the full L KR=~ language (see \[Blackburnand Spaan 1991, 1992\]) which was proved using re-duction from a certain undecidable tiling problem.We're going to strengthen this undecidability result,and we're going to do so by using further tiling ar-guments.
As the use of tiling arguments seem to besomething of a novelty in the computational linguis-tics literature, we include a little background iscus-sion of the method.Tiling arguments are a well known proof tech-nique in computer science for establishing com-putability and complexity results.
(In fact, tilingarguments are used to introduce the basic conceptsof complexity, decidability and undecidability in\[Lewis and Papadimitriou 1981\], one of the standardintroductions to theoretical computer science.)
Theyare also a popular method for analysing the complex-ity of logics; both \[Harel 1983\] and \[Hard 1986\] areexcellent guides to the versatility of the method forthis application.One of the most attractive aspects of tiling prob-lems is that they are extremely simple to visualise.A tile T is just a 1 ?
1 square, fixed in orientation,that has coloured edges right(T), left(T), up(T), anddown(T) taken from some denumerable s t. A tilingproblem takes the following form: given a finite set 7".-I 34of tile types, can we cover a certain part of Z ?
Z (Zdenotes the integers) using only tiles of this type, insuch a way that adjacent iles have the same colouron the common edge, and such that the tiling obeyscertain constraints?
For example, consider the fol-lowing problem.
Suppose 7- consists of the followingfour types of tile:Can an 8 by 4 rectangle be tiled with the fourthtype of tile placed in the left hand corner?
The an-swer is 'yes' - -  but we'll leave it to the reader to workout how to do it.There exist complete tiling problems for manycomplexity classes.
In the proof that follows we makeuse of a certain II ?
complete tiling problem, namelythe problem of tiling the entire positive quadrant ofthe plane, that is, the problem of tiling N ?
N whereN is the set of natural numbers.We begin with the following remark: by inspectionof the undecidability proof for L KR~ in \[Blackburnand Spaan 1991, 1992\], it is immediate that we stillhave undecidability if we restrict he language to for-mulas that consist of a conjunction of formulas of theform ?1 ::~ ~b2, where ?1 and ?2 are L KR formulaswith negations applied to atoms only, and ?2 is sat-isfiable.
(The stipulation that ?2 must be satisfiableprevents it from playing the role of False and thussmuggling in illicit negations.)
Call this languageL - .
Let's see if we can strengthen this result fur-ther.So, suppose we look at L -  formulas with V as theonly binary boolean connective in ?1 and ?2.
In thiscase, we show that the corresponding satisfiabilityproblem is still undecidable by constructing anotherreduction from N ?
N tiling.Let 7- = {7"1,...,Tk} be a set of tiles.
We con-struct a formula ?
such that:7" tiles N x N iff ?
is satisfiable.First of all we will ensure that, if ?
is satisfiablein a model M, then M contains a gridlike structure.The nodes of M (henceforth W), play the role ofpoints in a grid, R, is the right successor elation,and Ru is the upward successor relation.
Define:?9ri d = (TrUe ~ (,)(U) ~,~ (u)(r)).Clearly ?arid forces gridlike models.Next we must tile the model.
To do this we usepropositional variables t l , .
- .
,  tk, such that ti is trueat some node w, iff tile Ti is placed at w. To force aproper tiling, we need to satisfy the following threerequirements:1.
There is exactly one tile placed at each node.k~l=(True=~ Vti)  A A (ti=~-~tj)i=1 l<i<j<_k2.
If T/ is the tile at w, and 7) is a tile such thatright(Ti)  lefl(Tj), then tj should not be trueat any Rr successor of w:?2 = A it, ( r ) - t j )righ~TO# lef-l(Tj)3.
Similarly for up successors:= A ( ' ,up(Ti)# down(T DLet ?
be earid A ?1 A ?2 A ?3.
It is not too difficult toprove that ?
is satisfiable iff T tiles N x N, which im-plies that the satisfiability problem for our fragmentof L -  is undecidable.Are there weaker undecidable fragments?
Yes: wecan remove True from ?.
We do this by using anew propositional variable PT which plays the role ofTrue.
Insisting thatPT ^  (Pr \[r\]pr) ^(pr Mpr)ensures that PT behaves like True.Are even weaker fragments undecidable?
Yes: wecan ensure that V occurs at most once in each clause.In fact we only have to rewrite part of ?1 (namely,k True =~ Vi=l ti), for this is the only place in ?
whereV occurs.
We use new variables b2 .
.
.
.
.
bk-1 for thispurpose and we ensure that bi is true iff \[j is true forsome j _< i.
We do this as follows:(b2 =~ t~ vt2)  A(ba v ta) AA (bk-1 ::~ bk-2 V lk-2)(True =~ bk-1 V tk)Clearly this has the desired effect.5 D iscuss ionThe results of this investigation are easy to sum-marise: the ability to express both re-entrancy and35generalisations about feature structures lead to algo-rithmically unsolvable satisfiability problems even ifmost Boolean expressivity is dropped.
What are theimplications of these results?Stand-alone feature formalisms offer (elegant) ex-pressive power in a way that is compatible withthe lexically driven nature of much current linguis-tic theorising.
One of their disadvantages (at leastin their current incarnations) is that they tend tohide computationally useful information.
For exam-ple, as \[Johnson 1992\] points out, it is difficult evento formulate such demands as offiine parsability forexisting stand-alone formalisms; the configurationalinformation required is difficult to isolate.
The prob-lem is that stand-alone formalisms tend to be toohomogeneous.
It is certainly elegant o treat infor-mation concerning complex categories and configu-rational information simply as 'features'; but unlessthis is done sensitively it runs the risk of 'reducing'a computationally easy problem to an uncomputableone.Now, much current work on feature logic can beseen as attempts to overcome the computationalbluntness of stand-alone formalisms by making vis-ible computationally useful structure.
For exam-ple, recent work on typed feature structures (see\[Carpenter 1992\]) explicitly introduces the type in-heritance structure into the semantics; whereas in\[Blackburn et al 1993\] composite ntities consistingof trees fibered across feature structures are con-strained using two distinct 'layers' of modal lan-guage.
What is common to both these examples isthe recognition that linguistic theories typically havesubtle internal architectures.
Only when feature log-ics become far more sensitive to the fine grain of lin-guistic architectures will it become realistic to hopefor general decidability results.Acknowledgements We would like to thank theanonymous referees for their comments on the ab-stract.
Patrick Blackburn would like to acknowl-edge the financial support of the Netherlands Or-ganization for the Advancement ofResearch (projectNF 102/62-356 'Structural and Semantic Parallels inNatural Languages and Programming Languages').Re ferences\[Blackburn and Spaan 1991\] Blackburn, P. andSpaan, E.: 1991, On the Complexity of At-tribute Value Logics.
Proceedings of the EighthAmsterdam Colloquium, edited by P. Dekkerand M. Stokhof, Philosophy Department, Ams-terdam University, The Netherlands.\[Blackburn and Spaan 1992\] Blackburn, P. andSpaan, E.: 1992, A Modal Perspective on tileComputational Complexity of Attribute ValueGrammar.
To appear in Journal of Logic, Lan-guage and Information.\[Blackburn et al 1993\] Blackburn, P., Gardent, C.,and Meyer-Viol, W.: 1993, Talking about Trees.This volume.\[Carpenter 1992\] Carpenter, B.: 1992, The Logic ofTyped Feature Structures, Cambridge UniversityPress.\[Gazdar et al 1985\] Gazdar, G.: Klein, E., Pullum,G., and Sag, S.: 1985, Generalised Phrase Struc-ture Grammar.
Basil Blackwell.\[Harel 1983\] Harel, D.: 1983, Recurring dominoes:making the highly undecidable highly under-standable, in Proc.
of the Conference on Foun-dations of Computing Theory, Springer LectureNotes in Computer Science 158, 177-194.\[Hard 1984\] Hard, D.: 1984, Propositional Dy-namic Logic, in Handbook of PhilosophicalLogic, 2, edited by D. Gabbay and F. Guen-thner, Reidel.\[Itarel 1986\] Hard, D.: 1986, Effective transforma-tions on infinite trees, with applications to highundeeidability, dominoes, and fairness, Journalof the A CM, 33(1), 224-248.\[Johnson 1992\] Johnson, M.: 1992, Computing withfeatures as formulas, manuscript, Cognitive andLinguistic Sciences Department, Brown Univer-sity.\[Kasper and Rounds 1986\] Kasper, R. and Rounds,W.
: 1986, A logical semantics for feature struc-tures, in Proceedings of the g4th Annual Meetingof the Association for Computational Linguis-tics, Columbia University, New York, 257-266.\[Kasper and Rounds 1990\] Kasper, R. and Rounds,W.
: 1990, The Logic of Unification in Grammar,Linguistics and Philosophy 13, 33-58.\[Kaplan and Bresnan 1982\] Kaplan, K. and Bres-nan, J.: 1982, Lexical functional grammar: Aformal system for grammatical representation,in The Mental Representation of GrammaticalRelations, edited by Joan Bresnan, MIT Press,173-281.\[Lewis and Papadimitriou 1981\] Lewis, H. and Pa-padimitriou, C.: 1981, Elements of the Theoryof Computation, Prentice-Hall.\[Pollard and Sag 1987\] Pollard, C. and Sag, I.:Information-Based Syntax and Semantics: Vol-ume 1 - Fundamentals.
CSLI Lecture Notes, 13,Stanford.36
