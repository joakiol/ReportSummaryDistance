Proceedings of the 21st International Conference on Computational Linguistics and 44th Annual Meeting of the ACL, pages 409?416,Sydney, July 2006. c?2006 Association for Computational LinguisticsAn Improved Redundancy Elimination Algorithmfor Underspecified RepresentationsAlexander Koller and Stefan ThaterDept.
of Computational LinguisticsUniversit?t des Saarlandes, Saarbr?cken, Germany{koller,stth}@coli.uni-sb.deAbstractWe present an efficient algorithm for theredundancy elimination problem: Givenan underspecified semantic representation(USR) of a scope ambiguity, compute anUSR with fewer mutually equivalent read-ings.
The algorithm operates on underspec-ified chart representations which are de-rived from dominance graphs; it can be ap-plied to the USRs computed by large-scalegrammars.
We evaluate the algorithm ona corpus, and show that it reduces the de-gree of ambiguity significantly while tak-ing negligible runtime.1 IntroductionUnderspecification is nowadays the standard ap-proach to dealing with scope ambiguities in com-putational semantics (van Deemter and Peters,1996; Copestake et al, 2004; Egg et al, 2001;Blackburn and Bos, 2005).
The basic idea be-hind it is to not enumerate all possible semanticrepresentations for each syntactic analysis, but toderive a single compact underspecified represen-tation (USR).
This simplifies semantics construc-tion, and current algorithms support the efficientenumeration of the individual semantic representa-tions from an USR (Koller and Thater, 2005b).A major promise of underspecification is that itmakes it possible, in principle, to rule out entiresubsets of readings that we are not interested inwholesale, without even enumerating them.
For in-stance, real-world sentences with scope ambigui-ties often have many readings that are semanticallyequivalent.
Subsequent modules (e.g.
for doing in-ference) will typically only be interested in onereading from each equivalence class, and all oth-ers could be deleted.
This situation is illustratedby the following two (out of many) sentences fromthe Rondane treebank, which is distributed withthe English Resource Grammar (ERG; Flickinger(2002)), a large-scale HPSG grammar of English.
(1) For travellers going to Finnmark there is abus service from Oslo to Alta through Swe-den.
(Rondane 1262)(2) We quickly put up the tents in the lee of asmall hillside and cook for the first time inthe open.
(Rondane 892)For the annotated syntactic analysis of (1), theERG derives an USR with eight scope bearing op-erators, which results in a total of 3960 readings.These readings are all semantically equivalent toeach other.
On the other hand, the USR for (2) has480 readings, which fall into two classes of mutu-ally equivalent readings, characterised by the rela-tive scope of ?the lee of?
and ?a small hillside.
?In this paper, we present an algorithm for theredundancy elimination problem: Given an USR,compute an USR which has fewer readings, butstill describes at least one representative of eachequivalence class ?
without enumerating any read-ings.
This algorithm makes it possible to computethe one or two representatives of the semanticequivalence classes in the examples, so subsequentmodules don?t have to deal with all the other equiv-alent readings.
It also closes the gap between thelarge number of readings predicted by the gram-mar and the intuitively perceived much lower de-gree of ambiguity of these sentences.
Finally, itcan be helpful for a grammar designer because itis much more feasible to check whether two read-ings are linguistically reasonable than 480.
Our al-gorithm is applicable to arbitrary USRs (not justthose computed by the ERG).
While its effect isparticularly significant on the ERG, which uni-formly treats all kinds of noun phrases, includingproper names and pronouns, as generalised quanti-fiers, it will generally help deal with spurious ambi-guities (such as scope ambiguities between indef-409inites), which have been a ubiquitous problem inmost theories of scope since Montague Grammar.We model equivalence in terms of rewrite rulesthat permute quantifiers without changing the se-mantics of the readings.
The particular USRs wework with are underspecified chart representations,which can be computed from dominance graphs(or USRs in some other underspecification for-malisms) efficiently (Koller and Thater, 2005b).We evaluate the performance of the algorithm onthe Rondane treebank and show that it reduces themedian number of readings from 56 to 4, by upto a factor of 666.240 for individual USRs, whilerunning in negligible time.To our knowledge, our algorithm and its lesspowerful predecessor (Koller and Thater, 2006)are the first redundancy elimination algorithms inthe literature that operate on the level of USRs.There has been previous research on enumeratingonly some representatives of each equivalenceclass (Vestre, 1991; Chaves, 2003), but theseapproaches don?t maintain underspecification:After running their algorithms, they are left witha set of readings rather than an underspecifiedrepresentation, i.e.
we could no longer run otheralgorithms on an USR.The paper is structured as follows.
We will first de-fine dominance graphs and review the necessarybackground theory in Section 2.
We will then intro-duce our notion of equivalence in Section 3, andpresent the redundancy elimination algorithm inSection 4.
In Section 5, we describe the evaluationof the algorithm on the Rondane corpus.
Finally,Section 6 concludes and points to further work.2 Dominance graphsThe basic underspecification formalism we as-sume here is that of (labelled) dominance graphs(Althaus et al, 2003).
Dominance graphs areequivalent to leaf-labelled normal dominance con-straints (Egg et al, 2001), which have been dis-cussed extensively in previous literature.Definition 1.
A (compact) dominance graph is adirected graph (V,E unionmultiD) with two kinds of edges,tree edges E and dominance edges D, such that:1.
The graph (V,E) defines a collection of nodedisjoint trees of height 0 or 1.
We call thetrees in (V,E) the fragments of the graph.2.
If (v,v?)
is a dominance edge in D, then v isa hole and v?
is a root.
A node v is a root if vdoes not have incoming tree edges; otherwise,v is a hole.A labelled dominance graph over a ranked sig-nature ?
is a triple G = (V,E unionmultiD,L) such that(V,E unionmultiD) is a dominance graph and L : V  ?is a partial labelling function which assigns a nodev a label with arity n iff v is a root with n outgoingtree edges.
Nodes without labels (i.e.
holes) musthave outgoing dominance edges.We will write R(F) for the root of the fragmentF , and we will typically just say ?graph?
insteadof ?labelled dominance graph?.An example of a labelled dominance graph isshown to the left of Fig.
1.
Tree edges are drawnas solid lines, and dominance edges as dotted lines,directed from top to bottom.
This graph can serveas an USR for the sentence ?a representative ofa company saw a sample?
if we demand that theholes are ?plugged?
by roots while realising thedominance edges as dominance, as in the two con-figurations (of five) shown to the right.
These con-figurations are trees that encode semantic represen-tations of the sentence.
We will freely read config-urations as ground terms over the signature ?.2.1 Hypernormally connected graphsThroughout this paper, we will only consider hy-pernormally connected (hnc) dominance graphs.Hnc graphs are equivalent to chain-connecteddominance constraints (Koller et al, 2003), andare closely related to dominance nets (Niehren andThater, 2003).
Fuchss et al (2004) have presenteda corpus study that strongly suggests that all dom-inance graphs that are generated by current large-scale grammars are (or should be) hnc.Technically, a graph G is hypernormally con-nected iff each pair of nodes is connected by a sim-ple hypernormal path in G. A hypernormal path(Althaus et al, 2003) in G is a path in the undi-rected version Gu of G that does not use two dom-inance edges that are incident to the same hole.Hnc graphs have a number of very useful struc-tural properties on which this paper rests.
Onewhich is particularly relevant here is that we canpredict in which way different fragments can dom-inate each other.Definition 2.
Let G be a hnc dominance graph.
Afragment F1 in G is called a possible dominatorof another fragment F2 in G iff it has exactly onehole h which is connected to R(F2) by a simple hy-410aysampleyseex,yaxrepr-ofx,zazcompz1 2 34 5 67ayaxaz123sampleyseex,yrepr-ofx,zcompzayaxsampleyseex,yrepr-ofx,zazcompz123Figure 1: A dominance graph that represents the five readings of the sentence ?a representative of acompany saw a sample?
(left) and two of its five configurations.
{1,2,3,4,5,6,7} :?1,h1 7?
{4},h2 7?
{2,3,5,6,7}?
?2,h3 7?
{1,4,5},h4 7?
{3,6,7}?
?3,h5 7?
{5},h6 7?
{1,2,4,5,7}?
{2,3,5,6,7} :?2,h3 7?
{5},h4 7?
{3,6,7}?
?3,h5 7?
{6},h6 7?
{2,5,7}?
{3,6,7} :?3,h5 7?
{6},h6 7?
{7}?
{2,5,7} :?2,h3 7?
{5},h4 7?
{7}?
{1,4,5} :?1,h1 7?
{4},h2 7?
{5}?
{1,2,4,5,7} :?1,h1 7?
{4},h2 7?
{2,5,7}?
?2,h3 7?
{1,4,5},h4 7?
{7}?Figure 2: The chart for the graph in Fig.
1.pernormal path which doesn?t use R(F1).
We writech(F1,F2) for this unique h.Lemma 1 (Koller and Thater (2006)).
Let F1, F2be fragments in a hnc dominance graph G. If thereis a configurationC ofG in which R(F1) dominatesR(F2), then F1 is a possible dominator of F2, andin particular ch(F1,F2) dominates R(F2) inC.By applying this rather abstract result, we canderive a number of interesting facts about the ex-ample graph in Fig.
1.
The fragments 1, 2, and 3are possible dominators of all other fragments (andof each other), while the fragments 4 through 7aren?t possible dominators of anything (they haveno holes); so 4 through 7 must be leaves in any con-figuration of the graph.
In addition, if fragment 2dominates fragment 3 in any configuration, then inparticular the right hole of 2 will dominate the rootof 3; and so on.2.2 Dominance chartsBelow we will not work with dominance graphsdirectly.
Rather, we will use dominance charts(Koller and Thater, 2005b) as our USRs: they aremore explicit USRs, which support a more fine-grained deletion of reading sets than graphs.A dominance chart for the graph G is a mappingof weakly connected subgraphs of G to sets ofsplits (see Fig.
2), which describe possible waysof constructing configurations of the subgraph.A subgraph G?
is assigned one split for eachfragment F in G?
which can be at the root of aconfiguration of G?.
If the graph is hnc, removingF from the graph splits G?
into a set of weaklyconnected components (wccs), each of which isconnected to exactly one hole of F .
We also recordthe wccs, and the hole to which each wcc belongs,in the split.
In order to compute all configurationsrepresented by a split, we can first computerecursively the configurations of each component;then we plug each combination of these sub-configurations into the appropriate holes of theroot fragment.
We define the configurations asso-ciated with a subgraph as the union over its splits,and those of the entire chart as the configurationsassociated with the complete graph.Fig.
2 shows the dominance chart correspond-ing to the graph in Fig.
1.
The chart representsexactly the configuration set of the graph, and isminimal in the sense that every subgraph and ev-ery split in the chart can be used in constructingsome configuration.
Such charts can be computedefficiently (Koller and Thater, 2005b) from a dom-inance graph, and can also be used to compute theconfigurations of a graph efficiently.The example chart expresses that three frag-ments can be at the root of a configuration of thecomplete graph: 1, 2, and 3.
The entry for the splitwith root fragment 2 tells us that removing 2 splitsthe graph into the subgraphs {1,4,5} and {3,6,7}(see Fig.
3).
If we configure these two subgraphsrecursively, we obtain the configurations shown inthe third column of Fig.
3; we can then plug thesesub-configurations into the appropriate holes of 2and obtain a configuration for the entire graph.Notice that charts can be exponentially largerthan the original graph, but they are still expo-nentially smaller than the entire set of readingsbecause common subgraphs (such as the graph{2,5,7} in the example) are represented only once,4111 2 34 5 6 7h2h1h4h3h6h51 34 5 6 7h2h1h6h5?
?1 34 5 6 721 34 5 6 7?Figure 3: Extracting a configuration from a chart.and are small in practice (see (Koller and Thater,2005b) for an analysis).
Thus the chart can stillserve as an underspecified representation.3 EquivalenceNow let?s define equivalence of readings moreprecisely.
Equivalence of semantic representationsis traditionally defined as the relation betweenformulas (say, of first-order logic) which havethe same interpretation.
However, even first-orderequivalence is an undecidable problem, and broad-coverage semantic representations such as thosecomputed by the ERG usually have no well-defined model-theoretic semantics and thereforeno concept of semantic equivalence.On the other hand, we do not need to solvethe full semantic equivalence problem, as we onlywant to compare formulas that are readings of thesame sentence, i.e.
different configurations of thesame USR.
Such formulas only differ in the waythat the fragments are combined.
We can thereforeapproximate equivalence by using a rewrite systemthat permutes fragments and defining equivalenceof configurations as mutual rewritability as usual.By way of example, consider again the two con-figurations shown in Fig.
1.
We can obtain the sec-ond configuration from the (semantically equiva-lent) first one by applying the following rewriterule, which rotates the fragments 1 and 2:ax(az(P,Q),R)?
az(P,ax(Q,R)) (3)Thus we take these two configurations to beequivalent with respect to the rewrite rule.
(Wecould also have argued that the second configura-tion can be rewritten into the first by using the in-verted rule.
)We formalise this rewriting-based notion ofequivalence as follows.
The definition uses the ab-breviation x[1,k) for the sequence x1, .
.
.
,xk?1, andx(k,n] for xk+1, .
.
.
,xn.Definition 3.
A permutation system R is a systemof rewrite rules over the signature ?
of the follow-ing form:f1(x[1,i), f2(y[1,k),z,y(k,m]),x(i,n])?f2(y[1,k), f1(x[1,i),z,x(i,n]),y(k,m])The permutability relation P(R) is the binary rela-tion P(R) ?
(?
?N)2 which contains exactly thetuples (( f1, i),( f2,k)) and (( f2,k),( f1, i)) for eachsuch rewrite rule.
Two terms are equivalent with re-spect to R, s?R t, iff there is a sequence of rewritesteps and inverse rewrite steps that rewrite s into t.If G is a graph over ?
and R a permutation sys-tem, then we write SCR(G) for the set of equiva-lence classes Conf(G)/?R, where Conf(G) is theset of configurations of G.The rewrite rule (3) above is an instance of thisschema, as are the other three permutations of ex-istential quantifiers.
These rules approximate clas-sical semantic equivalence of first-order logic, asthey rewrite formulas into classically equivalentones.
Indeed, all five configurations of the graphin Fig.
1 are rewriting-equivalent to each other.In the case of the semantic representations gen-erated by the ERG, we don?t have access to anunderlying interpretation.
But we can capture lin-guistic intuitions about the equivalence of readingsin permutation rules.
For instance, proper namesand pronouns (which the ERG analyses as scope-bearers, although they can be reduced to constantswithout scope) can be permuted with anything.
In-definites and definites permute with each other ifthey occur in each other?s scope, but not if theyoccur in each other?s restriction; and so on.4 Redundancy eliminationGiven a permutation system, we can now try to getrid of readings that are equivalent to other readings.One way to formalise this is to enumerate exactlyone representative of each equivalence class.
How-ever, after such a step we would be left with a col-lection of semantic representations rather than anUSR, and could not use the USR for ruling outfurther readings.
Besides, a naive algorithm which412first enumerates all configurations would be pro-hibitively slow.We will instead tackle the following underspec-ified redundancy elimination problem: Given anUSR G, compute an USR G?
with Conf(G?)
?Conf(G) and SCR(G) = SCR(G?).
We wantConf(G?)
to be as small as possible.
Ideally, itwould contain no two equivalent readings, but inpractice we won?t always achieve this kind of com-pleteness.
Our redundancy elimination algorithmwill operate on a dominance chart and successivelydelete splits and subgraphs from the chart.4.1 Permutable fragmentsBecause the algorithm must operate on USRsrather than configurations, it needs a way to pre-dict from the USR alone which fragments can bepermuted in configurations.
This is not generallypossible in unrestricted graphs, but for hnc graphsit is captured by the following criterion.Definition 4.
Let R be a permutation system.
Twofragments F1 and F2 with root labels f1 and f2in a hnc graph G are called R-permutable iffthey are possible dominators of each other and(( f1,ch(F1,F2)),( f2,ch(F2,F1))) ?
P(R).For example, in Fig.
1, the fragments 1 and 2are permutable, and indeed they can be permutedin any configuration in which one is the parent ofthe other.
This is true more generally:Lemma 2 (Koller and Thater (2006)).
Let G be ahnc graph, F1 and F2 be R-permutable fragmentswith root labels f1 and f2, and C1 any config-uration of G of the form C( f1(.
.
.
, f2(.
.
.
), .
.
.
))(where C is the context of the subterm).
ThenC1 can be R-rewritten into a tree C2 of the formC( f2(.
.
.
, f1(.
.
.
), .
.
.))
which is also a configura-tion of G.The proof uses the hn connectedness ofG in twoways: in order to ensure that C2 is still a configu-ration of G, and to make sure that F2 is pluggedinto the correct hole of F1 for a rule application(cf.
Lemma 1).
Note thatC2 ?R C1 by definition.4.2 The redundancy elimination algorithmNow we can use permutability of fragments todefine eliminable splits.
Intuitively, a split of asubgraph G is eliminable if each of its configura-tions is equivalent to a configuration of some othersplit of G. Removing such a split from the chartwill rule out some configurations; but it does notchange the set of equivalence classes.Definition 5.
Let R be a permutation system.
Asplit S= (F, .
.
.
,hi 7?Gi, .
.
.)
of a graph G is calledeliminable in a chartCh if some Gi contains a frag-ment F ?
such that (a) Ch contains a split S?
of Gwith root fragment F ?, and (b) F ?
is R-permutablewith F and all possible dominators of F ?
in Gi.In Fig.
1, each of the three splits is eliminable.For example, the split with root fragment 1 is elim-inable because the fragment 3 permutes both with2 (which is the only possible dominator of 3 in thesame wcc) and with 1 itself.Proposition 3.
Let Ch be a dominance chart, andlet S be an eliminable split of a hnc subgraph.
ThenSC(Ch) = SC(Ch?S).Proof.
Let C be an arbitrary configuration of S =(F,h1 7?
G1, .
.
.
,hn 7?
Gn), and let F ?
?
Gi be theroot fragment of the assumed second split S?.Let F1, .
.
.
,Fn be those fragments in C that areproperly dominated by F and properly dominateF ?.
All of these fragments must be possible domi-nators of F ?, and all of them must be in Gi as well,so F ?
is permutable with each of them.
F ?
mustalso be permutable with F .
This means that we canapply Lemma 2 repeatedly to move F ?
to the rootof the configuration, obtaining a configuration ofS?
which is equivalent toC.Notice that we didn?t require that Ch must bethe complete chart of a dominance graph.
Thismeans we can remove eliminable splits from achart repeatedly, i.e.
we can apply the followingredundancy elimination algorithm:REDUNDANCY-ELIMINATION(Ch,R)1 for each split S inCh2 do if S is eliminable with respect to R3 then remove S fromChProp.
3 shows that the algorithm is a correctalgorithm for the underspecified redundancyelimination problem.
The particular order inwhich eliminable splits are removed doesn?taffect the correctness of the algorithm, but it maychange the number of remaining configurations.The algorithm generalises an earlier eliminationalgorithm (Koller and Thater, 2006) in that theearlier algorithm required the existence of a singlesplit which could be used to establish eliminabilityof all other splits of the same subgraph.We can further optimise this algorithm by keep-ing track of how often each subgraph is referenced413everyzDx,y,zayax1 2 3AxByCz4 5 67Figure 4: A graph for which the algorithm is notcomplete.by the splits in the chart.
Once a reference countdrops to zero, we can remove the entry for thissubgraph and all of its splits from the chart.
Thisdoesn?t change the set of configurations of thechart, but may further reduce the chart size.
Theoverall runtime for the algorithm is O(n2S), whereS is the number of splits in Ch and n is the num-ber of nodes in the graph.
This is asymptoticallynot much slower than the runtime O((n+m)S) ittakes to compute the chart in the first place (wherem is the number of edges in the graph).4.3 Examples and discussionLet?s look at a run of the algorithm on the chartin Fig.
2.
The algorithm can first delete the elim-inable split with root 1 for the entire graphG.
Afterthis deletion, the splits for G with root fragments2 and 3 are still eliminable; so we can e.g.
deletethe split for 3.
At this point, only one split is leftfor G. The last split for a subgraph can never beeliminable, so we are finished with the splits forG.
This reduces the reference count of some sub-graphs (e.g.
{2,3,5,6,7}) to 0, so we can removethese subgraphs too.
The output of the algorithm isthe chart shown below, which represents a singleconfiguration (the one shown in Fig.
3).
{1,2,3,4,5,6,7} :?2,h2 7?
{1,4},h4 7?
{3,6,7}?
{1,4} :?1,h1 7?
{4}?
{3,6,7} :?3,h5 7?
{6},h6 7?
{7}?In this case, the algorithm achieves complete re-duction, in the sense that the final chart has no twoequivalent configurations.
It remains complete forall variations of the graph in Fig.
1 in which someor all existential quantifiers are replaces by univer-sal quantifiers.
This is an improvement over ourearlier algorithm (Koller and Thater, 2006), whichcomputed a chart with four configurations for thegraph in which 1 and 2 are existential and 3 is uni-versal, as opposed to the three equivalence classesof this graph?s configurations.However, the present algorithm still doesn?tachieve complete reduction for all USRs.
One ex-ample is shown in Fig.
4.
This graph has six config-urations in four equivalence classes, but no split ofthe whole graph is eliminable.
The algorithm willdelete a split for the subgraph {1,2,4,5,7}, but thefinal chart will still have five, rather than four, con-figurations.
A complete algorithm would have torecognise that {1,3,4,6,7} and {2,3,5,6,7} havesplits (for 1 and 2, respectively) that lead to equiv-alent configurations and delete one of them.
Butit is far from obvious how such a non-local deci-sion could be made efficiently, and we leave thisfor future work.5 EvaluationIn this final section, we evaluate the the effective-ness and efficiency of the elimination algorithm:We run it on USRs from a treebank and measurehow many readings are redundant, to what extentthe algorithm eliminates this redundancy, and howmuch time it takes to do this.Resources.
The experiments are based on theRondane corpus, a Redwoods (Oepen et al, 2002)style corpus which is distributed with the EnglishResource Grammar (Flickinger, 2002).
The cor-pus contains analyses for 1076 sentences from thetourism domain, which are associated with USRsbased upon Minimal Recursion Semantics (MRS).The MRS representations are translated into dom-inance graphs using the open-source utool tool(Koller and Thater, 2005a), which is restricted toMRS representations whose translations are hnc.By restricting ourselves to such MRSs, we end upwith a data set of 999 dominance graphs.
The aver-age number of scope bearing operators in the dataset is 6.5, and the median number of readings is 56.We then defined a (rather conservative) rewritesystem RERG for capturing the permutability rela-tion of the quantifiers in the ERG.
This amountedto 34 rule schemata, which are automatically ex-panded to 494 rewrite rules.Experiment: Reduction.
We first analysed theextent to which our algorithm eliminated the re-dundancy of the USRs in the corpus.
We com-puted dominance charts for all USRs, ran the al-gorithm on them, and counted the number of con-figurations of the reduced charts.
We then com-pared these numbers against a baseline and an up-per bound.
The upper bound is the true number of4141101001000100001000000 1 2 3 4 5 6 7 8 9 10 11 12 13log(#configurations)FactorAlgorithm Baseline ClassesFigure 5: Mean reduction factor on Rondane.equivalence classes with respect to RERG; for effi-ciency reasons we could only compute this num-ber for USRs with up to 500.000 configurations(95% of the data set).
The baseline is given bythe number of readings that remain if we replaceproper names and pronouns by constants and vari-ables, respectively.
This simple heuristic is easy tocompute, and still achieves nontrivial redundancyelimination because proper names and pronounsare quite frequent (28% of the noun phrase occur-rences in the data set).
It also shows the degree ofnon-trivial scope ambiguity in the corpus.For each measurement, we sorted the USRs ac-cording to the number N of configurations, andgrouped USRs according to the natural logarithmof N (rounded down) to obtain a logarithmic scale.First, we measured the mean reduction factorfor each log(N) class, i.e.
the ratio of the num-ber of all configurations to the number of remain-ing configurations after redundancy elimination(Fig.
5).
The upper-bound line in the figure showsthat there is a great deal of redundancy in the USRsin the data set.
The average performance of ouralgorithm is close to the upper bound and much0%20%40%60%80%100%0 1 2 3 4 5 6 7 8 9 10 11 12 13log(#configurations)Algorithm BaselineFigure 6: Percentage of USRs for which the algo-rithm and the baseline achieve complete reduction.01101001000100000 1 2 3 4 5 6 7 8 9 10 11 12 13log(#configurations)time(ms)Full Chart Reduced Chart EnumerationFigure 7: Mean runtimes.better than the baseline.
For USRs with fewer thane8 = 2980 configurations (83% of the data set), themean reduction factor of our algorithm is above86% of the upper bound.
The median numberof configurations for the USRs in the whole dataset is 56, and the median number of equivalenceclasses is 3; again, the median number of config-urations of the reduced charts is very close to theupper bound, at 4 (baseline: 8).
The highest reduc-tion factor for an individual USR is 666.240.We also measured the ratio of USRs for whichthe algorithm achieves complete reduction (Fig.
6):The algorithm is complete for 56% of the USRsin the data set.
It is complete for 78% of the USRswith fewer than e5 = 148 configurations (64% ofthe data set), and still complete for 66% of theUSRs with fewer than e8 configurations.Experiment: Efficiency.
Finally, we measuredthe runtime of the elimination algorithm.
The run-time of the elimination algorithm is generally com-parable to the runtime for computing the chart inthe first place.
However, in our experiments weused an optimised version of the elimination algo-rithm, which computes the reduced chart directlyfrom a dominance graph by checking each splitfor eliminability before it is added to the chart.We compare the performance of this algorithm tothe baseline of computing the complete chart.
Forcomparison, we have also added the time it takesto enumerate all configurations of the graph, as alower bound for any algorithm that computes theequivalence classes based on the full set of config-urations.
Fig.
7 shows the mean runtimes for eachlog(N) class, on the USRs with less than one mil-lion configurations (958 USRs).As the figure shows, the asymptotic runtimesfor computing the complete chart and the reducedchart are about the same, whereas the time for415enumerating all configurations grows much faster.
(Note that the runtime is reported on a logarithmicscale.)
For USRs with many configurations, com-puting the reduced chart actually takes less timeon average than computing the complete chartbecause the chart-filling algorithm is called onfewer subgraphs.
While the reduced-chart algo-rithm seems to be slower than the complete-chartone for USRs with less than e5 configurations,these runtimes remain below 20 milliseconds onaverage, and the measurements are thus quite un-reliable.
In summary, we can say that there is nooverhead for redundancy elimination in practice.6 ConclusionWe presented an algorithm for redundancy elimina-tion on underspecified chart representations.
Thisalgorithm successively deletes eliminable splitsfrom the chart, which reduces the set of describedreadings while making sure that at least one rep-resentative of each original equivalence class re-mains.
Equivalence is defined with respect to a cer-tain class of rewriting systems; this definition ap-proximates semantic equivalence of the describedformulas and fits well with the underspecificationsetting.
The algorithm runs in polynomial time inthe size of the chart.We then evaluated the algorithm on the Ron-dane corpus and showed that it is useful in practice:the median number of readings drops from 56 to4, and the maximum individual reduction factor is666.240.
The algorithm achieves complete reduc-tion for 56% of all sentences.
It does this in neg-ligible runtime; even the most difficult sentencesin the corpus are reduced in a matter of seconds,whereas the enumeration of all readings wouldtake about a year.
This is the first corpus evalua-tion of a redundancy elimination in the literature.The algorithm improves upon previous work(Koller and Thater, 2006) in that it eliminates moresplits from the chart.
It is an improvement over ear-lier algorithms for enumerating irredundant read-ings (Vestre, 1991; Chaves, 2003) in that it main-tains underspecifiedness; note that these earlier pa-pers never made any claims with respect to, or eval-uated, completeness.There are a number of directions in which thepresent algorithm could be improved.
We are cur-rently pursuing some ideas on how to improve thecompleteness of the algorithm further.
It wouldalso be worthwhile to explore heuristics for the or-der in which splits of the same subgraph are elim-inated.
The present work could be extended to al-low equivalence with respect to arbitrary rewritesystems.
Most generally, we hope that the methodsdeveloped here will be useful for defining otherelimination algorithms, which take e.g.
full worldknowledge into account.ReferencesE.
Althaus, D. Duchier, A. Koller, K. Mehlhorn, J. Niehren,and S. Thiel.
2003.
An efficient graph algorithm for dom-inance constraints.
Journal of Algorithms, 48:194?219.P.
Blackburn and J. Bos.
2005.
Representation and Inferencefor Natural Language.
A First Course in ComputationalSemantics.
CSLI Publications.R.
P. Chaves.
2003.
Non-redundant scope disambiguationin underspecified semantics.
In Proc.
8th ESSLLI StudentSession.A.
Copestake, D. Flickinger, C. Pollard, and I.
Sag.
2004.Minimal recursion semantics: An introduction.
Journal ofLanguage and Computation.
To appear.M.
Egg, A. Koller, and J. Niehren.
2001.
The ConstraintLanguage for Lambda Structures.
Logic, Language, andInformation, 10.D.
Flickinger.
2002.
On building a more efficient grammarby exploiting types.
In J. Tsujii S. Oepen, D. Flickingerand H. Uszkoreit, editors, Collaborative Language Engi-neering.
CSLI Publications, Stanford.R.
Fuchss, A. Koller, J. Niehren, and S. Thater.
2004.
Mini-mal recursion semantics as dominance constraints: Trans-lation, evaluation, and analysis.
In Proc.
of the 42nd ACL.A.
Koller and S. Thater.
2005a.
Efficient solving and ex-ploration of scope ambiguities.
In ACL-05 DemonstrationNotes, Ann Arbor.A.
Koller and S. Thater.
2005b.
The evolution of dominanceconstraint solvers.
In Proceedings of the ACL-05 Work-shop on Software, Ann Arbor.A.
Koller and S. Thater.
2006.
Towards a redundancy elimi-nation algorithm for underspecified descriptions.
In Proc.5th Intl.
Workshop on Inference in Computational Seman-tics (ICoS-5).A.
Koller, J. Niehren, and S. Thater.
2003.
Bridging the gapbetween underspecification formalisms: Hole semantics asdominance constraints.
In Proc.
10th EACL.J.
Niehren and S. Thater.
2003.
Bridging the gap betweenunderspecification formalisms: Minimal recursion seman-tics as dominance constraints.
In Proc.
of the 41st ACL.S.
Oepen, K. Toutanova, S. Shieber, C. Manning,D.
Flickinger, and T. Brants.
2002.
The LinGO Red-woods treebank: Motivation and preliminary applications.In Proceedings of COLING?02.K.
van Deemter and S. Peters.
1996.
Semantic Ambiguityand Underspecification.
CSLI, Stanford.E.
Vestre.
1991.
An algorithm for generating non-redundantquantifier scopings.
In Proc.
of the Fifth EACL, Berlin.416
