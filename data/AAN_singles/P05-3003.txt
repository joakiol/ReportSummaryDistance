Proceedings of the ACL Interactive Poster and Demonstration Sessions,pages 9?12, Ann Arbor, June 2005. c?2005 Association for Computational LinguisticsEfficient solving and exploration of scope ambiguitiesAlexander Koller and Stefan ThaterDepartment of Computational LinguisticsSaarland University, Saarbr?cken, Germany{koller,stth}@coli.uni-sb.deAbstractWe present the currently most efficientsolver for scope underspecification; it alsoconverts between different underspecifica-tion formalisms and counts readings.
Ourtool makes the practical use of large-scalegrammars with (underspecified) semanticoutput more feasible, and can be used ingrammar debugging.1 IntroductionOne of the most exciting recent developments incomputational linguistics is that large-scale gram-mars which compute semantic representations arebecoming available.
Examples for such grammarsare the HPSG English Resource Grammar (ERG)(Copestake and Flickinger, 2000) and the LFG Par-Gram grammars (Butt et al, 2002); a similar re-source is being developed for the XTAG grammar(Kallmeyer and Romero, 2004).But with the advent of such grammars, a phe-nomenon that is sometimes considered a some-what artificial toy problem of theoretical semanti-cists becomes a very practical challenge: the pres-ence of scope ambiguities.
Because grammars of-ten uniformly treat noun phrases as quantifiers, evenharmless-looking sentences can have surprisinglymany readings.
The median number of scope read-ings for the sentences in the Rondane Treebank (dis-tributed with the ERG) is 55, but the treebank alsocontains extreme cases such as (1) below, which ac-cording to the ERG has about 2.4 trillion (1012) read-ings:(1) Myrdal is the mountain terminus of the Fl?mrail line (or Fl?msbana) which makes its waydown the lovely Fl?m Valley (Fl?msdalen) toits sea-level terminus at Fl?m.
(Rondane 650)In order to control such an explosion of readings(and also to simplify the grammar design process),the developers of large-scale grammars typically usemethods of packing or underspecification to spec-ify the syntax-semantics interface.
The general ideais that the parser doesn?t compute all the individualscope readings, but only a compact underspecifieddescription, from which the individual readings canthen be extracted at a later stage of processing ?
butthe underspecified description could also be used asa platform for the integration of lexical and contextinformation, so as to restrict the set of possible read-ings without enumerating the wrong ones.Such an approach is only feasible if we have ac-cess to efficient tools that support the most impor-tant operations on underspecified descriptions.
Wepresent utool, the Swiss Army Knife of Underspec-ification, which sets out to do exactly this.
It sup-ports the following operations:1. enumerate all scope readings represented by anunderspecified description;2. check whether a description has any readings,and compute how many readings it has withoutexplicitly enumerating them;3. convert underspecified descriptions betweendifferent underspecification formalisms (at thispoint, Minimal Recursion Semantics (Copes-take et al, 2003), Hole Semantics (Bos, 1996),and dominance constraints/graphs (Egg et al,2001; Althaus et al, 2003)).9Our system is the fastest solver for underspecifi-cied description available today; that is, it is fastestat solving Task 1 above (about 100.000 readings persecond on a modern PC).
It achieves this by im-plementing an efficient algorithm for solving dom-inance graphs (Bodirsky et al, 2004) and cachingintermediate results in a chart data structure.
To ourknowledge, it is the only system that can do Tasks2 and 3.
It is only because utool can compute thenumber of readings without enumerating them thatwe even know that (1) has trillions of readings; evenutool would take about a year to enumerate andcount the readings individually.utool is implemented in C++, efficient andportable, open source, and freely downloadable fromhttp://utool.sourceforge.net.2 Technical Description2.1 Solving dominance graphsAt the core of utool is a solver for dominancegraphs (Bodirsky et al, 2004) ?
graph represen-tations of weakly normal dominance constraints,which constitute one of the main formalisms usedin scope underspecification (Egg et al, 2001; Al-thaus et al, 2003).
Dominance graphs are directedgraphs with two kinds of edges, tree edges and dom-inance edges.
They can be used to describe the setof all trees into which their tree edges can be embed-ded, in such a way that every dominance edge in thegraph is realised as reachability in the tree.
Domi-nance graphs are used as underspecified descriptionsby describing sets of trees that are encodings of theformulas of some language of semantic representa-tions, such as predicate logic.Fig.
1 shows an example of a constraint graph forthe sentence ?every student reads a book.?
It con-sists of five tree fragments ?
sets of nodes that areconnected by (solid) tree edges ?
which are con-nected by dominance edges (dotted lines).
Two ofthe fragments have two holes each, into which otherfragments can be ?plugged?.
The graph can be em-bedded into the two trees shown in the middle ofFig.
1, which correspond to the two readings of thesentence.
By contrast, the graph cannot be embed-ded into the tree shown on the right: a dominanceedge stipulates that ?readx,y?
must be reachable from?somey?, but it is not reachable from ?somey?
in thetree.
We call the two trees into which the graph canbe embedded its solutions.The Bodirsky et al algorithm enumerates the so-lutions of a dominance graph (technically, its solvedforms) by computing the set of its free fragments,which are the fragments that can occur at the root ofsome solution.
Then it picks one of these fragmentsas the root and removes it from the graph.
This splitsthe graph into several connected subgraphs, whichare then solved recursively.This algorithm can call itself for the same sub-graph several times, which can waste a lot of timebecause the set of all solutions was already com-puted for the subgraph on the first recursive call.For this reason, our implementation caches interme-diate results in a chart-like data structure.
This datastructure maps each subgraph G to a set of splits,each of which records which fragment of G shouldbe placed at the root of the solution, what the sub-graphs after removal of this fragment are, and howtheir solutions should be plugged into the holes ofthe fragment.
In the worst case, the chart can haveexponential size; but in practice, it is much smallerthan the set of all solutions.
For example, the chartfor (1) contains 74.960 splits, which is a tiny num-ber compared to the 2.4 trillion readings, and can becomputed in a few seconds.Now solving becomes a two-phase process.
In thefirst phase, the chart data structure is filled by a runof the algorithm.
In the second phase, the completesolutions are extracted from the chart.
Although thefirst phase is conceptually much more complex thanthe second one because it involves interesting graphalgorithms whose correctness isn?t trivial to prove,it takes only a small fraction of the entire runtime inpractice.Instead of enumerating all readings from thechart, we can also compute the number of solutionsrepresented by the chart.
For each split, we computethe numbers of solutions of the fragment sets in thesplit.
Then we multiply these numbers (choices forthe children can be combined freely).
Finally, weobtain the number of solutions for a subgraph byadding the numbers of solutions of all its splits.
Thiscomputation takes linear time in the size of the chart.10everyxsomeybookystudentxreadx,yeveryxsomeybookystudentxreadx,yeveryxsomeybookystudentxreadx,yeveryxsomeybookystudentxreadx,y?
?
?Figure 1: A dominance graph (left), two solutions (middle) and a non-solution (right).2.2 Translating between formalismsOne of the most significant obstacles in the develop-ment of tools and resources for scope underspecifi-cation is that different resources (such as grammarsand solvers) are built for different underspecificationformalisms.
To help alleviate this problem, utoolcan read and write underspecified descriptions andwrite out solutions in a variety of different formats:?
dominance graphs;?
descriptions of Minimal Recursion Semantics;?
descriptions of Hole Semantics.The input and output functionality is providedby codecs, which translate between descriptions inone of these formalisms and the internal dominancegraph format.
The codecs for MRS and Hole Se-mantics are based on the (non-trivial) translationsin (Koller et al, 2003; Niehren and Thater, 2003)and are only defined on nets, i.e.
constraints whosegraphs satisfy certain structural restrictions.
This isnot a very limiting restriction in practice (Flickingeret al, 2005).
utool also allows the user to test effi-ciently whether a description is a net.In practice, utool can be used to convert de-scriptions between the three underspecification for-malisms.
Because the codecs work with concretesyntaxes that are used in existing systems, utoolcan be used as a drop-in replacement e.g.
in theLKB grammar development system (Copestake andFlickinger, 2000).2.3 Runtime comparisonTo illustrate utool?s performance, we compare itsruntimes for the enumeration task with the (alreadyquite efficient) MRS constraint solver of the LKBsystem (Copestake and Flickinger, 2000).
Our dataset consists of the 850 MRS-nets extracted from the0102030405060700  5  10  15  20  25  30  35  40"utool""MRS"Figure 2: Distribution of constraints in Rondane overdifferent sizes.
The solid line shows the constraintsin the data set, and the dashed line shows the con-straints that the LKB solver could solve.Rondane treebank which have less than one millionsolutions (see Fig.
2).
Fig.
3 displays the runtimesfor enumerating all solutions, divided by the num-ber of solutions, for both solvers.
The horizontal axisshows the description sizes (number of tree frag-ments), and the (logarithmic!)
vertical axis showsthe average runtime per solution for descriptions ofthis size.Due to memory limitations, the LKB solver couldonly solve descriptions with up to 21 tree fragments,which account for 80% of the test data.
utool solvedall descriptions in the test set.
The evaluation wasdone using a 1.2 GHz PC with 2 GB of memory.The figure shows that utool is generally fasterthan the LKB solver, up to a factor of approx.
1000.We should note that the LKB solver displays a dra-matically higher variation in runtimes for constraintsof the same size.
Note that for small constraints, theruntimes tend to be too small to measure them accu-rately.110.010.111010010000  5  10  15  20  25  30  35  40"utool""MRS"Figure 3: Runtimes per solution (in ms) for the MRSnets in the Rondane treebank for LKB and utool.3 ConclusionWe have presented utool, a tool that supports a va-riety of operations related to scope underspecifica-tion.
It is the most efficient solver for underspecifi-cation available today, and provides functionality forcounting readings, testing whether a description is anet, and converting between different underspecifi-cation formalisms.
It collects the results of severalyears of formal and computational research on dom-inance graphs into one convenient system.The most obvious use of utool is the enumerationof readings of underspecified descriptions producedby large-scale grammars.
This means that a user canrealistically map the semantic output of these gram-mars into actual semantic representations.
However,the tool is also useful for developers of such gram-mars.
It can be used to count and explore the read-ings of the underspecified descriptions the grammarcomputes, and has already been used in the debug-ging of the syntax-semantics interface of the ERG(Flickinger et al, 2005).From a more general perspective, the real ap-peal of underspecification is that it could allow usto eliminate readings that contradict the context orour world knowledge, without having to enumeratethese readings first.
Such inferences could alreadytake place on the level of the underspecified descrip-tion (Koller and Niehren, 2000).
But the new chartdata structure that utool computes is a more explicitpacked representation of the possible readings, andstill relatively small in practice.
Thus it could openup avenues for more theoretical future research aswell.ReferencesErnst Althaus, Denys Duchier, Alexander Koller, KurtMehlhorn, Joachim Niehren, and Sven Thiel.
2003.An efficient graph algorithm for dominance con-straints.
Journal of Algorithms, 48:194?219.Manuel Bodirsky, Denys Duchier, Joachim Niehren, andSebastian Miele.
2004.
An efficient algorithm forweakly normal dominance constraints.
In ACM-SIAMSymposium on Discrete Algorithms.
The ACM Press.Johan Bos.
1996.
Predicate logic unplugged.
In Pro-ceedings of the Tenth Amsterdam Colloquium, pages133?143.Miriam Butt, Helge Dyvik, Tracey Holloway King, Hi-roshi Masuichi, and Christian Rohrer.
2002.
The par-allel grammar project.
In Proceedings of the COLING2002 Workshop on Grammar engeneering and evalua-tion.Ann Copestake and Dan Flickinger.
2000.
An open-source grammar development environment and broad-coverage English grammar using HPSG.
In Confer-ence on Language Resources and Evaluation.Ann Copestake, Dan Flickinger, Carl Pollard, and IvanSag.
2003.
Minimal recursion semantics: An in-troduction.
Available at http://lingo.stanford.edu/sag/papers/copestake.pdf.Markus Egg, Alexander Koller, and Joachim Niehren.2001.
The Constraint Language for Lambda Struc-tures.
Logic, Language, and Information, 10:457?485.Dan Flickinger, Alexander Koller, and Stefan Thater.2005.
A new well-formedness criterion for semanticsdebugging.
In Proceedings of the 12th HPSG Confer-ence, Lisbon.Laura Kallmeyer and Maribel Romero.
2004.
LTAG se-mantics with semantic unification.
In Proceedings ofthe TAG+7 Workshop, Vancouver.Alexander Koller and Joachim Niehren.
2000.
On un-derspecified processing of dynamic semantics.
In Pro-ceedings of COLING-2000, Saarbr?cken.Alexander Koller, Joachim Niehren, and Stefan Thater.2003.
Bridging the gap between underspecificationformalisms: Hole semantics as dominance constraints.In Proceedings of the 10th EACL, Budapest.Joachim Niehren and Stefan Thater.
2003.
Bridging thegap between underspecification formalisms: Minimalrecursion semantics as dominance constraints.
In Pro-ceedings of the 41st Annual Meeting of the Associationfor Computational Linguistics.12
