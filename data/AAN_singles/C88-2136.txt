16a~\].gG_&\]~ ?
?.
Na;i;ttra.i La.,./gi~.
;.~.ge Ana lys i s  c, ~ ,ys temTOK(\]N.A GA '/)ake~obu, IWAYAMA M~d~o~% TAN AK k i:fozu~tfi\])ep~trtment o1!Computer  ,?qelence'\]bkyo h~sgit~e <K '\]2hc}mdogyI(AMIWA KI 3%dashi\[iif,~whl \]h'sem:ch I,M>or~.tm:ytlit~mhi I,M..Ab~;tza<:~t'.Fhi.q p}~pm presmds ~s \]~a.tu~a.l l atg~atge ~ma\]ysis system~',~..:~gL.A?/~ based o~t _~:~0'~.-X(:.~ which parses with at I,r~i.t, om-~p ~d delr',h-.-fi~s~, trategy a:ttd hms atbili~,y t,o h~nd\]e l gext_~;\].positio:,to We halve atl\]xm+dy developed a gtammatr for-.mall|sin ')',X~};:;, which ix a. snpeJcset of I)CGo Wi~.h X.K.~{{, legex{\]:atposii;io:~ phenome.,ta, is nattrt\]:~/ly expressed i,~ g\]:a.mmat~:F, les= We h.:tve atb;o ptim.ized.
\]:~tl~X<} cl.~,~,se,;.
l,',:~pe>|merits aho'a.ed thatt h: i:ompatr\]so~ to the el:it|rod }~U}*...XG} system~ the anMysis aped up 10 times in the interp~:eter~node ~,td 4 times in the compiled mode?
The '.PNX\]!~ s~;r~c..ttlred dictioaatry ixl.
La,tgLAJC~ req~fires less rnentory, p\]:o-rides Ikstm: dictim-~ary ):eD.renee {~nd also hat~td\[es cma.p\]i-c~ted idioms with versa~tJlity.
Conseq~e\]dly~ the itti\]iz~4hmel ~,a_~.tg\];.Ag for pra,:tical purposes ha.s become feasfble.So t'a,r, seve~at!
gratmmar forma./imn based <m logic progratm.-mi\]tg par;~d:,g\]n ~iIlCh atS Met~nno~:phosis Gramm~,.r \[~\] aatd\])CC.
\[9\] ha.~.e been p~:eseatedo In Meta.
:,~:mrphosis Gr~llt~ta,r,each graanmax rule is tratnslatted i,.t~o at I\[or~t Clatuse, and thePro/og hd, erpreter pa~:ses the inp*tt sentmtee with these llo,:rtClause uai~tl; at top-,dew, a,xtd ep~h.d'aa~~ strattegy.
O\]tlilm inthe past where pa,sers had to be eo\]\]strlmted for synt~mt\]eanalysis, i~t ;;his method, we do not Mwe to i)ecrtuse the Pro-log iute~preter itself works a_.~ o,m.
Metatmorplhosis Gratmma:catlso provides ~ '~tatturatl b nguage processing method whichintedeatves t;y~tta.etie ~aatlysls and sere.antic attalysis.
'i'hisis at deal,able feattu~e from.
the pot,4 of view of cognitivescience?1.,"ollowing Met~u~torphusis Gra.mlaar~ Yereka e~ ~1o devel~oped a gra,mmar formalism called lJe.ihfiie Cla.ase Gratm-ma.\]:(D,,~.
: 0 at,~d lgxt):atposii, imt (,ratmma~.r0=G) \[8\].
Thegratmraat* r~!es writtmt i~t I)CG at~:e also tr~nslatted irate a~Prolog progratm, a.nd the Prolog in.terpreter works as at top?
(iowx~ a)~d dopth-4i~st pa~ser i~tterleatving syntax axtrdysis.
~ndsex**a~tie aaalysis.
XG is the exte~tded ver.qioa of DCG ca,-pa.ble of haa,.dli,tg left ext~a~poaition,){oweve.~:~ top--(low~ patrse~ have ;a. ta'oblem tMt the p:m-gra.m :5~lls i~to the infinite loop whe_*.t at leg ~ec,rsive rulea~pzpea\]~rs i?t the gra.mma.~: rtfles.
Thls problem (:a~.\]t be solvedby either t\]:~mlatti~tg gra.mmar r~tles with left rem~rsive ruledi~4.o {met; wiZhollt le*t ~:eeursive r~ales or by 'ashlg at botto~n.-ap p~.~:sing st~tegy.
Si~tee the lbnner solallen ~aty give~m~,~,g~tral ?2s.~:shtg ~:esults; the latter is prefe~:atb\]e.Ma.tsn~ao~o of l,~leetrotee/ndeal :!~,t~bora{;ory developed ~.sys*em in width the g~:atnlnla~ * *les w*ittea i~t :I)CG atret,a~tslated ittto \]\[o~:xt clauses c;dled BOP cb~uses ~atd Pro-log h~erpre~;e* wo:,:ks a~: a bo~om-up and depthdlrst p~.,sm:" il,4,,,i,G ......2 q I7i?Z ZZZZ,  ZL~21:2_2.Smllm~o~ I Tf l l F .
~Iruetutod \] I?
?
t ~ dlotlonar I \ [ JUP- ,~{3 (}l itt lsO~;Prolo~ SystemI .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
l .
.
.
.
.
.
.
.
.
.
.
.
.
.V liOtAJliFigm:e 1: Stun:lute of LangLkltfin: these rules \[1@ Ma,tsun~lotoh; system is called the BUPsystem.
'i!
?he BUP system ca,n ha,ndle Iv:It recn\],sive r des~n(i, t~:eat~ gl:ammatr rule~; a,nd ~he dictio~atry sepat:rattely,Komto of '.lbkyo Institute of Technology extended theB0P system Lo BUP-X(4 system \[5\] wMch ca,n h~:ndle theleft ex?,\]:atpositio~t phenonm\]tat elegantly.
BUP-X(:I systemintn:oduced the g~atmmatr description form ea,lled XGS (F,x-tr:,,~posit.io~t Grammatr with Slash Category).This paper presents a mttnral \]atnguage a.mdysis ysge:mLa,ngf,AB based o~ KoItno's BUP--XG system.
\],'igul:e 1shows the structure of the LatngLAB system, Users shouldp~ep~re gr~mmar ules written in XGS and a dietionatrywritten in I)CG.
Both gramma.r rules atnd ~t dictionatry a\]:et,atltalatted i~tto BUP-XG clauses and 3.
'lf.IE stratetltred die-ti?mary respectively by tra.nslatm's.
3)ranslated results arec0nsMted by the Prolog system and the Prolog interp~:eterworks as ~ parset.In chapter 2, we briet\[y explatin the filndatmentals ofthe BUP system and the gra,mmar description tbrm XGSadopted itt LangLAB.
We will a.lso describe BUP.
XG treats-is.to.,: which translates the g~:atmma.r w itten i~l 7XGS intoBUP.--XG cl~tllse altd its optimizatimts, l*t chatpter 3, wewill to4ch on the '.FRIE st\]mctn*ed dictionary adopted i~iLatngLAB.
'i?\]{,IE struetrlred ietio\]tary ~eqnires less mem-ory atnd provides' faster dicfio\]n~ry eference a,n.d provides~texible idiom lta~tdlil~g.
In chapter: 4, we shall p\]:esent re-suits of experiments re:drying the effect of the optimiza.*,io~des,.
:~:Jbed in the.pier 2.
Experiments showed theft the a.md--ysis sped ap 10 times in the interpretive mode uatd 4 timesin the compiled mode.
The authol:s believe l, ha.t L~\]lg\],A\]lpe~fi>rms well cnoug\]t to be of pratctiea,l use.65!is --> rip, vp.
(d-l)np ~-.> pron.
(d~2)pron -o-> \[you\].
(d-3)vp --> \[walk\].
(d~4)Figure 2: Sample grammar written in DCGnp (G) --> {link (np,G) }, (b--l)goal (vp) ,s(G).pron(G) --> np(G).
(b--2)d ie t  (pron) ---> \[you\].
(b-3)d ie t  (vp) --> \[walk\] .
(b--4)Figure 3: BUP clauses translated fzom figure 22 XGS and  BUP-XGhi this chapter, we shall explain the grammar descriptionform XGS adopted in LangLAB and the BUP-XG trans-lator which translates grammar ules written in XGS intothe BUP-XG clauses.
Before explaining BUP--XG, we willbriefly explain the mechanism of the BUP system, the pre-decessor of BUP-XG.
Basic parsing mechanism of BUP isleft-corner parsing with top-down prediction.2.1 BUP sys tem\]in BUP system, grammar ifles written in DCG (Figure 2)are translated into the rules called BUP clauses which arealso of DCG format and some Prolog program (link clausesand termination clauses : explained .later).Figure 3 shows results of the translation.
These BUPclauses are then translated into a Prolog program (Figure 4)by the DCG translator wl,ich is embedded in the Prologsystem.
Two more arguments are added to each predicatewhich denotes nontenninal symbol in figure 4.
These argu-ments constitutes a difference list which represents he inputstring.
With the special predicate goal which is necessaryfor bottom up parsing, this Prolog program can parse theinput string with a bottom-up and depth-first strategy.
Fig-ure 5 shows the definition of the predicate goal.Now, we shall give a step by step explanation of the pars-ing algorithm of the BUP system.
We will use the gram-mar shown in figure 4 and input sentence "you walk" as anexample.
Calling the predicate goal activates the parsingprocess:?- goa l (s ,  \[you,walk\] , [ \ ] ) .np(G,X,Z) :~' link(rip,G), (p--l)goal  (vp ,X ,Y),s(G,Y,Z).pron(~,X,Y) :- np(G,X,Y).
(p-2)diet (pron, \[youlX\] ,X) .
(p-S)dict (vp, \[wa\].k IX\] ,X) o (p-4)Figure ~: Prolog progn~.ms translated from figure 3goal(G,X,Y) :-~ (g- l )(wf_goal(G,X,_)fa i l _goa l (G ,X) ,  !
, fa i l) , !
,wf_goal(G,X,Y).goal(G,X,Y) :- (g-2)diet (C,X,Y),link(C,G) ,P =.. \[c,G,Y,Z\],ca l l  (P),asser tz  (wf_goal (P)) .goal(G,X,Y) : -  (g-3)assertz(fail_goal(G,X)) , !,fail.Figure 5: Definition of the goal clauseThis calling checks to see if :A parse tree the root of which is the category %',can be constructed from the input string denotedby the difference between the list \[you, walk\] andthe list \[ \] (\[you, walk\] in this example).The first call of goal invokes the clause (g- l )  in the figure 5.The clause (g- l )  checks to see if the same analysis have beenmade before, to avoid recomputation using the informationpreviously asserted as wf_goal and fail_goal.As the execution of the clause (g - l )  fails in this case, thesystem chooses the next clause (g-2).
In the body of theclause (g-2), the system consults the dictionary by calling"d iet  (C, \[you, walk\],  Y) ".
This predicate call picks (p-3)in figure 4 and the system matches "pron" with variable Cand "\[walk\]" with variable Y.In the second line of (g-2), the system calls the predicatel ink to see if the category which is obtained by the previousdictionary consultation ("pron" in this example) can be left-corner of the current goal ('%" in this example).
The l lnkclauses are calculated by the BUP translator.
Suppose thistest succeeds, the system calls the predicate "pron" :P =.. \[pron,s,\[walk\],\[\]\],call(P).Calling "pron(s, \[walk\] , \[\] )" invokes (p-2).
Then, thesystem executes its body that is, "up (s,  \[walk\] , \[\] )'~.Calling "np(s, \[walk\],  \[\] )" invokes the clause (p- l ) .
Af-ter calling the predicate l lnk to check a teachability from"np" to "s", the system invokes "goal (vp, \[walk\], \[\] ) ".
Atthis point, the system has analyzed the string "you" as "up"and is predicting that the trailing string "walk" should bebundled up to the category "vp".In the same manner, a bottomoup analysis with a top-down prediction proceeds until the execution of goal withthe termination clauses ucceeds.
See \[14\] for the detail ofthe termination clauses.R,esults once succeeded or failed in an analysis are assertedas wf_goal in the end of (g-2) and fail_goal in the clause(g-'S) respectively.
This information is used in (g- l )  asdescribed.np =.-> pron?
(x-2)~tp --=> del;~ ~tomt, s_x'el.?/np.
(x-3)vp .... > vt~ x~p.
(x-4)~.~:el ?
'o> :cel~p:coa, ~o (x-5)Figure 6: Sample graramar written in XGS2.2 ~IO' I~=XG systen lThe embedded sentence which appears in relative clauses inEnglish can be viewed as a strncture ilt which a noun phraseis missing f\[om declarative sentence.
A gap is formed as aresult of moving the antecedent from within the declarativesentence to the left of the relative clause.
Linguists call suchphenomena "Left extraposition'.
By considering the gap leftby the nloved constituents a a "trace", and incorporating amechanism tha:t looks h)~ such a "trace" automatically, thenumber of gx ammar ules can be decreased and the grammar~ules become asie~ to read.
Moreover incorporating suchmechanism contributes to making analysis peed faster.~*bp=down parsers hke ATNG \[131, \[12\] and XG \[8\] incofporate such ?
mechanism?
The top-down parser can predictwhat catego:ey the trailing input string may be bundled up~o.
Efficient trace searching is possible as the system as-sumes the e:dstence of traces only when a particular cate-go,y is predicted as a goal.A pu~e boa;tom-up parser is not capable of such predictionsand inefficiency results because of the necessity to assumethe existence; of a trace between every two words.
However,since the BI\[P system incorporates top-down prediction inthe bottom-up arsing strategy described in 2.1, it is pos-sible to implement the mechanism to look for the tracesefficiently.
Konno developed a BUP--XG system which in-corporated such a mechanism \[5\].The XGS adopted in LangLAB p~ovides grammar writersthe facility ~?ith which left extraposition tan be naturMlyexpressed in grammar rules.
Figure 6 shows a small Englishgrammar w\]dch is written in XGS.The notation ".
o/" (called "slash") in the rule (x=3) is in-troduced in XGS.
This rule means that there exists the syn-tactic category "up" which dominates the "trace" under thesyptactic a~egory "s=xel" (%.xel" means relative sentence).This idea is influenced by the %lash category" in GPSG \[3\].We call the category after " .
.
/ "  ~c slash category".
Rule(x-3) also shows that the category '~np '~ consists of the cat-egories "det", ~'noun" and %.xel" and that the trace leftbehind by the left extraposition of the norm phrase consist-ing of "det" a~td "norm" is dominated by "s~rel".
During an~nalysi% when the system finds the trace under "s_~el", assl~own tit figure 7, its associates the trace in the enlbeddedsentence with the moved phrase ("the man").XGS also provides a notation to represent "Ross's Comoplex NP constraint" \[10\].
Following is an example of thisnotation.
This notation is called "open (<)" and ~'close(:>)" following Pex'ei~a \[8\].a ~-o> b9 c~ <d>.'\[.
'his rule ~Yu!a.
:as that category "a" consists of categories C~b',"C ~ and ~'d ~.
Open-close notation defines the scope of extra-npnp s reldet neunthe manrel_joren snp vpwho \[trace\] loves herFigure 7: Matching between slash category and its traceposition.
This example says that the movement fi:om under"b" or "c" to the outside of "a" is permissible, but the move=ment from under "d" to the outside of "a" is not.
Sentencesviolating "Ross~s Complex Np constraint" are rejected bymodifying (x-3) to become (x-3')np --> dot, noun, <s_re l .
.
/np>.
(x-.3')With (x-3 ' ), the trace which is dominated by slash category"up" under "s_rel" can only correspond to the noun phrasewhich consists of "det" and "noun".In addition, XGS also provides a double arrow notation(==>) and the notation to describe X lists (explained later)explicitly.
With these notation, "coordinate structure" canbe represented in a natural way (see \[5\]).2.3 BUP-XG t rans la torJust like the BUP system, the grammar ules written inXGS are translated into BUP-XG clauses, link clauses atLdtermination clauses by the BUP-XG translator.
The BUP-XG translator in the LangLAB system has been improved soas to generate BUP--XG clauses more optimized than thatin the original BUP-XG system.
Furthermore, it is alsoequipped with a new function which inserts parse tree in.-formation automatically.
The translator takes about threeseconds to translate a grammar of about 200 rules.
Thefollowing subsection explains these inlprovements.2.3.1 Representat ion o f l lnk  clausesAs the number of grammar rules increases, more l ink clausesare generated by the translator.
For example, from about200 grammar ules of English which we have developed,the BUP-XG translator generates about 700 l lnk clauses.Shortening the search time of l lnk clauses wonld contributeto an efficient analysis.Link clauses are called in the body of BUP-XG clausesand in the predicate goal.
Since both the alguments ofl inkare atoms in the both cases, a l lnkl ink  (a ,  b).which denotes th.e reachablity from the category %t" to "b"can be change to the forma(b) : -  !.This form of representation reduces the search space of thereachablity test.
The BUP-XG translator in LangLAB geuoerates link information of this form.5572.3.2 Indexes for ditFerenee \]:~stAs described in subsection 2.1 input string are representedby ~, difference list and intermediate analysis results are as--served with the predicate wfgoa l  a:ud fidl.goal.
Since dmh~st wo arguments of" the wf_goal constitutes a diffbrencelist of the input string, the longer the input string becomes,~he more memory wKgoe!
consumes.
By indexing differ..once lisfs, the amonnt of memory ~:eqnired is reduced, amtfaster re\[create o intermediate r sults is possible.
}'or example, when the system gets the input string '!youwalk", the predicates text arc a.sse~ted asfollows :tex~(sO, \[\]).text (r~:l:, \[~alk\]) .te:~:t(s2, \[you, ~al.k\])?
'l'he dictionary reference program gets a difference list bycalling text with indexes (s\],s2,...) as the key, before con-suiting the dietiom~ry.2.
:L3 Representat ion of intermediate r sultsGenerally, a long input string gives rise to more wftgoalsand faiLgoals which results in longer search time for inter-mediate analysis results.
Wf_goals and fail_goals have astheir arguments, the index to the difference list denoting thepartial input string, and its anMysis.
As described in 2.1;goal first consults wf  goads and fail_geMs with the indexesof input string as the key.
In LangLAB system, the predi-(:ate names of intennedlate analysis result are the indexes tothe ditference list insteaA of "wLgoa.\]" or "fail_goal'.
Thismodification reduces the search space oil the intermedi~ttcanalysis results and speeds up the analysis processo2.3?4 Insert ion of parse tree informationUsers sometimes reqaire the results of syntactic analysis tobe expressed as pa.rse trees, and in both the BUP system andthe originM B(Y\])--XG system, users are required to insert anargument in each category to accommodate parse tree lure>marion.
Itoweve~, it is not a difficult task to make the trans-lator insert this information automatically, ht the BUP-XGtranslator of LangLAB, this information is inserted auto-maritally unless instructed otherwise.
This Nnction is simi-lar to ~he one in the McCord's MLG(Modular Logic Gram-mar) \[7\].
However, unlike MLG, all the nonterminal symbolscan be a node of parse trees.2.3.5 Example of t ranslat ionFigure 8 shows the BUP--XG clauses translated t~om thegrammar in figure 6.
The wriables beginning with "X" inthe figme.8 axe introduced to handle left extraposmon.
Tinsvariable is called X list (extraposition list) which were intro-duced in XG \[8\].
Information pertaining to slash categoriesis pushed into the X llst and is then transfe:rred from eate.~gory to category during the analysis process.
The predicategoal_x is an extended version of the predicate gord in theBUP system, which pops up the slash category from the X\]is~ when the t,.
'ace is \[bun& Note that variables for parsetree in~brmation, the names of which begin with "T", areautomatically inserted and that the representation f linkinformation (in braces) is also modified.np (Goal, \[TJ\], Xnfo,XO~Xl,XR) .... >geal_x (vp~ \[T2\] ,Xl ,X2),s ((~oal, \[ \[s ,'fl ,'r2\] \ ] ,  Info ,X0, X2 ,XR) opron (Goal, \[TI\], Info ,X0 ,Xl ,XR) ..... >{ up(Goal) },np(Goal~ \[\[np,'f l \] \] ,Info~X0 ~)\[I,XR).dot (Goal, \[T1\] ~ In're ,X0 ,Xi ~XI~) ...... >{ up(Goal) },goa\].~x (noml, \[T2\] , Xl ~ X2),goal...x (~.rel, \[Y3\] ,x(np, \[np (t)\] ~X2) ,X3) ,~np (Goal, \[ tap, T1 ,T2 ,T3\] \ ] ,  Info ~X0 ,X3 ,Xlt),?
et (G o al, \[TI \], -tat o, XO, X i, XR) ~-.
>{ vp(Goa\].)
},goal_x (nil, \[T2\] ,X!,X2)vp (Goal, \[ \[vp,T~.,T2\] \], lure, XO,X2, Xlt)~'el_p:~o:~,.
(Goal, \[T1\] , Info ,X0 ,Xl ,XR.)
"~'>{ s_rel(Goal) \]',goal..x (s ~ IT2\] ,Xi ,X2)s_rel (Goal, \[ \[s_rel, T:\[, T2j \] ~ Inf o ~ XO ~ X2 ~ X~{) .Figure 8: BUP-XG clo~nses t):~mslated from figm'e 6v( in fo(get ) )  ~-> \[get\] .v (ref (get, \[ \[vf Ied\] \] )) .... > \[got\] ?v ( re f (get , \ [ \ [v~len \ ] \ ] ) )  --> \[gotten\] .v(in:ro(get_up)) -~-> \[get, Up\]ov( info(gct_on))  ---> \[get, on\].Figure 9: Sample dictionary including idioms3 TR, IE  st, ruc tured  d ic t ionaryThis chapter explMns the TRIE stnletnred ictionary, a>other extension to the BUP-XG system and the BUP sys-.tern.
The TR\]IE sh'nctured dictionary requires less memory,provides Nster dictionary ~eference aitd flexible idiom han-dling.3?1 T i t le  s t ruc tureThe name "T/~ll?," is taken fl'om "reTlllllJval" \[1\] and itmeans a kind of tree structure.
A dictionary written inI)CG is translated into a TRIE structured ictionary by theTll.IE dictionary translator.
The TPJE structure is u tupplewhich has three elements, that is "word", "information forword(s)" and '~its child TRIE strncture'.
}'or example, the dictionary written in DCG shown in fig-.are 9 would be translated to the TP~IE structured ictionaryshown in figm:e \]0.To look up a TRIE .,~t~uctuzed dictionary, the dicliona~yreference program searches through the tree matching thei~tput string with the first element of the TKIE structureand, information for the string of input is retrieved onlyafter the last word of the input string is matched.
Actnally~the translatm: blmdles up ~he dictional:y entries which hasthe s~Lme ill'st word into ?
clause (sue how the entries '~gct',"get on" ,%nd "get up" are translated in tlgnre 10).
By md~gthis struchlre for the dictionary, the system can avoid the658d:L r;~,a (gei ; ,\[ \ [v ,  \[i:i ~+:~ o (gei;),I i!
J\[ t~(,.It,i\] D,, l{_t:u:t o (l :>ri ; .mO \] 7!
7i ,I11.1 t ,\[{ r+<~) - , i : : \ [ l \ [~  0 ( ~j <!
~:.
fl:~.~) ) 71 \[l .
"t ,d i  Ci:i~ ( re  ~; ~i7 Iv ,  E+:La:~I (g,;i;., \[ \[:v:~: !
~.d\] ~i ) J  \] \ ] ,H )..(12 t: i; ~+ (\[-;o i;g eL*!
i"J, b_'e:,: (ge~, i~ \[v:~ i e~d \] ) \] 11 !
,J\] )o\]'~i\[;,.-'i:e I0: 'J)\]{l)'; s~;i:~c~,,+re t~:a~,',tsls.ted from fig.x:e 9ba,ckt:ca,cki.
!~ a,+, (:lwl~.a~ level h~ dJ.c{imia~y reJhJ:eace, a,,d ~+,i,I,t it{are ), ~he ~r!~n:u)cn~ of i:he head is the intb):m~ic.t  ofbk', <;~t t,~:y+ ' t'hc >,q~nmen ~, ":i,',+,~ o (+:+) ":'utean<~ the ht h)rma, iAo.el; {he elitr F %,'-'~', 'J'}lC ~ argllntevtt of tile entry +eI~Otn a,!td{(\[~,Ot{()\]+ +) \ ] ;  a!
,~{,rl.lCttLre {e\]iJe;i}D WIIJcl!
dem>{e,:.
: a~, !>()Jilter tothe entry denoted by the iir<?~ argmne-nt of %',+,i7" (ht  {hi~case, a, \])oinl, e~ to tlm entry ~<get~ ).
\ ] ) ict iona)y et)trie,~ i;h(~ilttb::'+aa:ho~l of whic}t only differs Dora each other  l:)~+rt\]aJly~e+g+ the \]:oo{ :ibrnt ~utd the co l@gated  Nrm of a+n i,:regld;<c"/e)b, ca, u 1+~: wri~,i;tm i,,.
~hJs ma.nne:,:++JP\])e secoli_d gi:gtD.
),en\[ or the s\[rl letltre c{:~:.~;;12~) is {\]to dil:.J~erential it.
ti>ima.tion bet,>e(;e~ {his ent ry  (:+f4ot ~ (Jr "!~(>~t()*i >)and the enhy  poht ted  to by the tit'.s+, arg/!
i l te l t t  e-J' " ; /e l  ".
\]}(ti;hi<<i e/a'.,~qp\]{e, .
i} !a t t l re  <<~,J7 ~ lrl.
(;it.\]lts :%erb !
}iron" a.nd its v~Jae~<od."
a.nd %.m" men, Its "pa.s{" acttd <<\].
;itst puxticip\],?
~ ,:e,~,pe,(>l,ive!y, "V\"i~h ..;tlch ~',+ (/emvxipgi()tl, users do ltot have tO W\]'ite~Mdi~.iomd :diem m)LJ.es whleh i~mlude the eo,~sgated lbYulof i>:eguh~a verbs.
In the cas:; of reg~dar vet:b% since co,f,.\]ug, a\[cd \[brms acre pr:)ee,<iqed b2 the :utoqdiologieal aliMysisp:,:ograJ.m l)a_i\[~ .
;a i, he die{ionaa:y reihren(:e pc'oBram , idie,mc<nt~:ies wtii,:lt i:.qclade the conjugated Jbrm au:e not ~tecessary+{got exam.
)~t% t~sers do :~)ot, hams to w~:ite g}te idionl mit*y<<kicked the bltdeet'~ i\[ life (;ntry '<k\[c\]e {l~e bucket" is writ:tea.f i o~,ary'il,'\])e '\]/R\[}'\] strnctl~eed ic~io.a~ry ea.
:u htehtde P~:olog pro.g~a.ms to check ,,;ome cons{,a,htts a,itd sy\]~ta,etic ea:lego;iesi,t its ++wo:ed" po.,dtimt (tb:st element e l  im.pl)ie).
'.flit,<.
; >at  iu'emakes Jt p 3ssible ~;o }t~,:(td~e ~;l')e idio'_,rta i,iclm{ing ,ion-.fmze3,.c\]e,umt% aaeh as %!.
(:,t t);aly .... but  a,ls.)
, ?  )
J~+ ;,he BU i '~+ystem :mad !
;l)e BU\]?--XC:a.
system, the sys~<;m regards so.chi<\]io~!<~ as ~:, two-:el,eme~, wo:rd, tlta~ is g prefix i, ermia~)l par tand a ~bll.owing ?,to;~te~:~F\].na,l \]>ar~;.
3.
'he Ib,:n~e,: part  iS \]It=ch, ded h, i;he dicf imtary and the I.at{e.t pa:rg L<; inc luded inthe gx:~mt\], a t ,~!es.
l:a Lang\],AilJ, the 'J.'l.
{.i\]g s{v~c*Yt~'..~d dic=i, io~u~,ry is abk; to h~.ndle all snch idle:ms w.; the dicth)_aa,ryceAries.
'?he idi(}~t eni~:ies which i~tch;de ,),(nt.d'toze:t~ eleme).
)g',.i such~u; sh ow~+.
~ ao +, only ,,, bu * ~+l'do ,,," cau b e writ {(hi as ilg,are 71 ,+>_dj ( \ [ \ ] ,  \[~1 ) ...... > I}1.o~; ~ oltil~y\] , ad j  ( .
.
.
.
.  )
,llt)~').~, a: t :m\]  , ad j  ( .
.
.
.
.  )
.
:up(lSp, i \ ] )  "+ +;> Lx,-og ~m(l_y\] ,,tp (i~p*, .)
+1)mi; ~ a ls  o\] ~ np (i~lI)2 , ~+) ,-\[j o:ht ( l~pi ,  ~p:>, ~ l~p) } ..i!
'igt~.~o 1;i ; Sample dict ios~ry With ~o,i terminal  symbola ar, d\['~\]x)/~):a,:,~ts i!l tlt+~ r!de bodyd:i,ct>aOurl;, \[\] + !
;i; t>0-:i .
.
.
.
.
.
.
;I ,, i l  ~ E\[bt~,t, \ [ \ ] ,  EI ;al::o, \ [ ; \ ] ,  f\[ \ [vd j  ........ 1,12 i .d  j ,  \[ I;;l + I;71 ;t \] \ ] ,  Ei\] 71 \] \] 1 \] \] ,,L i.
}?, tq>J.
~.
:,\] ~ 1?71, \[Ehrri; ~ l;\] o ifaJ_.'
.
), \ [ \ ] ,  i\[ \[:~tp, gp2 , , .
J ,  \ [ \ ]  ,, \[il ( j  o:i.n 0~lp;t ,gp2 ,  ~'~p) ) ,1: \ [np ,  \[;l~p ~ H 71 ;1 \ ] ,  \[\] \] \] \] :l ;I \] \] \] \] \] ~1 \] ) ,,\]'~igare i2:'.L'IMI\];3 ,<;tr~lc%~l,:e {~ansla+ted from fig.
:ce !
;1And figm:e 12 is the resnlt of the t rans lat ion.IN tim case of DCG,  as the idiom ent~_:y such as figure 1 \] iscsnal iy handled as a g~ammar ule, the number  of gramma~rules blcrea~)os a,~.t inefl\]cieney oll analysis process results.
1~i,<.~ preDralAe to ha,,tdle g~aanmar cnles and dict ionary entriessepa~:a.tely..A:; sttowll Jxt f ignre 12, the txansla3,or converts the Prologprogra,ms i~t the dietiona.ry entry e{ jo in (gp l  ,l~fp2,fgp)}"h, to {he :thrill (~(oo:hl(igpJ.
+t~p2,}~p))'.
The dict ionary ~e:~e,mtce l)mg*am calls tim prog~:ant enclosed by pa, renthesiswhel t  i t  enco / in ters  <(~nc.h i~ refilL.
I l l  the same way, the syn-htci ie ca?,egory i~t Ore dict ionary enLries such as "rip (~/pi, =)"au:e c(mverted into the \]is{ the tits{ eleme:at of which is a,category rot, me a~,d ?\]te rest of which a, re arguments  of ?hecategoi'y ( \ [np,~ap;t , : \ ] ) .
The  dict ionary reference l>rog~:amcalls the predicatte goa l  (goa l (np+ I)~p1 ,._\] ,X ~Y)) tot snch.a, \ ]bf I t t ,'.rite T\]tl;E st ,uctu~ed dict ionary enables the \],angL AB,(;ys~em to ttaild.le idioms with.versat i l i ty  \[4\].We condrtcted exper iments to verify the eflec~ of optimiza--{ion of \]Y0P-,XC claaises.
We mea,sa~ed the t ime fo~ syntau:tic a:aa\]ysis of ten sample sentences.
The  experimen~ envJ-.~:onraeitt Js a,s follows:~, J~a,chine : S IDa/260 Worksta+tion~ P,:olog : @f in t~tsPmlog  Release 1.6o (',.raommar : 1($3 l:nles in XGSIn {lie, expezim.elit, we measm:ed f,he t ime leq0i~ed to oh=ta,h~ a}i pa,se tree be\[ore and aJi{er tile optimiz~tio~t Ibm: each659......... T@P_-.L: A nAysi~No.
I' Number Numl}erof Words of Trees11 14 921 4 \]231 3 741 1 105J 3 1161 4 1871 9 21 i81 2 1991 4 1710 I 1 25. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
I .
.
.
.
.
.
.
.
.
.
.
.
.
.
.time using interpretive codeAnalysis Time \[msec\] l%~tio I(1) DUB-X(\]  (2) LangLAB _(1)/(2_~) !80,415 8,55218,868 2,70046,700 4,98330,900 3,60039,634 4,05095,933 9,550323,167 26,18387,550 9,349180,300 15,816116,284 12,083average9.4016.99 I9.37 I8.58 I9.79110.05 I12.34 I9.36 I11.40 I9.62 I9.691.
.
.
.
'_\]?-~!,!e_.2: AnaJ_ysis time using compiled codeNo.
Number Number Iof Words of Trees I1 14 912 4 1213 3 714 l 1015 3 11 I6 4 1817 9 2118 2 1919 4 17110 1 251Analysis Time \[m~ee\] B.atio(1) BUP--XG (2) LangLAB20,485 4,1342,467 1,2994,783 2,2842,884 1,5664,383 1,91718,768 4,500127,400 14,00013,450 4,45059,468 8,21623,650 5,801average(1)/(~)4.961.902.091.842.294.179.103.027.244.084.07sample sentence.
'\['his analysis does not include morphc~logical a~tulysis.
Table \] is the result of the experiment inthe interpretive mode and table 2 is'the one in the compiledmode.
The fourth and the fifth column of the table is thetime to analyze the sentence in the original BUP-XG systemand in the LangLAB system respectively.
Time is shown inmillisecond.Results showed that in comparison to the original BUP-XG system, the analysis ped up 10 times in the interpretivemode and 4 times in the compiled mode.
The optimizationis less effective in the compiled mode than in the interpretivemode.
I\[owever, this optimization is practical because de-bugging is usually done in the interpretive mode.
We believethat LangLAB has the capacity for practical use.
'\]'here is a related work SAX \[6\] by Matsumoto.
SAX isalso a parsing system based on logic programming, but itsparsing strategy is bottom-up and breadth-first.
Okunishiof ICOT reports that LangLAB is 6 ~ d0 times faster thanSAX in the intm'pretive mode.
However, in the compiledmode, SAX is 6 ~- 16 times faster than LangLAB \[11\].
SAXhas still yet to be modified to handle idioms.
If this modi-fication is introduced, debugging can be done on LangLABin the interpretive mode and the debugged grammar can beexecuted on SAX in the compiled mode.5 C " oonch lmonWe have made the following modification to the originalBUI)-XG :660?
Optimized and enhanced translated code?
Adopted TItIE structured ictionaryWith these modifications, the analysis ped up in compari-son to the original BUP-XG system and fiexible idiom han-dling became possible.
We believe that LangLAB has be-come a more powerful and practical tool for natural an-guage processing.
We plan to develop a natural anguageprocessing system which includes emantic analysis, basedon LangLAB.References\[1\] A. V. Aho, J. E. Hopcroft, and J. D. Ulhnan.
DataStructures and Algorithms.
Addison-Wesley, i983.\[2\] A. Colmerauer Metamorphosis grammar, in NaturalLanguage Communication with Computers, pages 133-190, Springer-Veflag, 1978.\[3\] G. Gazdar and A. F. Pullum.
Generalized PhraseStructure Grammar:A Theoretical Synopsis.
IndianaUniversity Linguistics Club, 1982.\[4\] M. Gross.
Lexicon-grammar: the representation ofcompound words.
In COLING '86, pages 1-6, 1986.\[5\] S. Konno and H. Tanaka.
Processing left-extrapositionin bottom up parsing system.
Computer Software,3(2):115-125, 1986.
(in Japanese).\[6\] Y. Matsumoto and It.
Sugimura.
A parsing systembased on logic programming.
In IJCA\[ '87, pages 671-674, 1987.\[7\] M. McCord.
Natural anguage processing m prolog.
InAdrian Walker, editor, Knowledge Systems and Prolog,chapter 5, pages 291-402, Addison-Wesley, 1987.\[8\] F. Pereira.
Extraposition grammar.
American Journalo\] Computational Linguistics, 7(4):243-256, 1981.\[9\] F. Pereira and D. Warren.
Definite clause grammar forlanguage analysis- asurvey of the formalism and a com-parison with augmented transition etworks.
ArtificialIntelligence, 13(3):231-278, 1980.\[10\] J.it.
Ross.
Constraints on variables in syntax.
In OnNoam Chomsky: Critical Essays, Anchor Books, 1974.\[11\] T. Oknuishi, et.al.
Comparison of logic programmingbased natural anguage parsing systems.
In ~nd Inter.national Workshop on Natural Language nderstandingand Logic Programming, pages 90-102, 1987.\[!2\] T. Winograd.
Language as a Cognitive Process.
VoLume 1:Syntax, Addison-Wesley, 1983.\[13\] W.A.
Woods.
Experimental parsing system for transl.tion network grammar.
In Natural Language Process?ing, Algorithmic Press, 1971.\[14\] Y. Matsumoto, et.al.
Bup:a bottom-up arser embed-ded in I~olog.
New Generation Computing, 1(2):145-158, 1983.
