COLING 82, J. Horeek~ (ed.
JNorth-Holland Publishing Company?
AcMemta, 1982MACHINE TRANSLATION BASED ON LOGICALLYISOMORPHIC MONTAGUE GRAMMARSJan LandsbergenPhilips Research LaboratoriesEindhoven - The NetherlandsThe paper describes a new approach to machine translation,based on Montague grammar, and an experimental translationsystem, Rosetta, designed according to this approach.
It isa multi- l ingual system which uses 'logical derivation trees'as intermediate expressions.i.
INTRODUCTIONUsually two approaches to machine translation are distinguished: the inter-lingual approach and the transfer approach (cf.
Hutchins \[i\]).
In the interlingualapproach translation is a two-stage process: from source language to interlinguaand from interl ingua to target language.
In the transfer approach there are threestages: source language analysiS, transfer and target language generation.
Theapproach advanced in this paper is a variant of the interlingual one.
It requiresthat 'logically isomorphic grammars' are written for the languagesunder  considera-tion.
The syntactic rules of these grammars must correspond with logical opera-tions, in accordance w i th the  compositionality principle of Mentague grammar.Moreover, the grammars must be attuned to each other as follows: if one grammarcontains a rule corresponding with a particular logical operation, the othergrammars must contain rules corresponding with the same operation.
Syntactically,these rules may differ considerably.
If the grammars are attuned to each other inthis way, 'logical derivation trees', representations of both the syntactical andthe logical structure of sentences, can be used as intermediate expressions.The paper is organized as follows.
In section 2 the relevant concepts ofMontague grammar and the notion 'logically isomorphic grammars' are introduced.
Insection 3 a version of Montague grammar is described, called M-grammar, which ismore suitable for computational use than Montague's original proposals.
Theproperty of logical isomorphy is then defined for M-grammars.
In section 4 thedesign of the Rosetta translation system, based on this approach, is outlined,followed by a brief discussion in section 5.2.
LOGICALLY ISOMORPHIC MONTAGUE GRAMMARSI will first introduce a few concepts of Montague grammar (cf.
\[2\], \[3\]), inan informal way.A Montague grammar defines a language by specifying (i) a set of basic ex-pressions and their syntactic categories, (ii) a set of syntactic rules.
Each rulespecifies the categories of the expressions to which it is applicable, prescribeshow these expressions must be combined to form a new expression and specifies thecategory of this expression.
An expression is 'generated' by a Montague grammar ifit can be derived by applying syntactic rules, starting from basic expressions.Exam Ip~_~.
Assume that grammar G 1 defines a fragment of English.kmong Gl's basic expressions are 'Italian', of category ADJ, and 'girl', ofcategory NOUN.~mong Gl'S syntactic rules are:175176 J. LANDSBERGENR4: if expression ~ is of category ADJ and ~ is of category NOUN, then ~is of category NOM.R7: if o< is of category NO~, then 'the'=< is of category NP.One of the phrases G 1 generates is the NP 'the Italian girl'.
It can bederived by applying R 4 to basic expressions 'Italian' and 'girl'~ and then applyingR 7 to the result.The way in which an expression is derived from basic expressions by applica-tion of rules can be represented by a tree, called derivation tree, with basicexpressions labelling the terminal nodes and names of applied rules labelling thenon-terminal nodes.
For example, Figure 1 is the derivation tree of 'the ItalianItalian girlFigure 1girl' according to grammar G I.A Montague grammar must obey the composi-tionality principle, which reads: 'The meaningof a compound expression is composed from themeanings of its parts'.
This is achieved bychoosing the basic expressions and the rulesin such a way that the meaning of a phrase canbe defined by a syntax-directed translation ina logical language.
For each basic expressiona corresponding expression of the logicallanguage is specified: the representation ofits meaning.
For each syntactic rule a logicalcomposition rule is given, which shows how the meaning representation of thephrase constructed by the syntactic rule is derived from the meaning representa-tions of the constituent phrases.
The exact nature of the (intensional) logic thatMontague uses, is not relevant here.
For the present discussion it is importantthat a derivation tree displays not only the syntactic structure of a phrase, butits logical structure as well.Example 2.
Suppose grammar G 2 defines a fragment of Italian.Among G2's basic expressions are 'italiano', of category ADJ, and 'ragazza', ofcategory NOUN.Among G2's syntactic rules are:R~: if expression ~ is of category ADJ and ~ is of category NOUN, then /3 ~'is of category NOM, where ~' is the adjective ~ adjusted to the number andgender of the noun ~.R~: if ~ is of category NOM, then ~ ~ is of category NP, where ~ is a definitearticle in accordance with the number and gender of ~ .G 2 generates the phrase 'la ragazza italiana', with the derivation tree ofitaliano " ~  ragaggaFigure 2Figure 2.A comparison between the example grammarsG1 and G 2 shows that there is a correspondencebetween the basic expressions and rules of G 1and those of G 2.
'Italian' and 'italiano'have the same meaning (in at least one of theirreadings) and the same holds for 'girl' and'ragazza'.
Rule R 4 and rule R~ correspond withthe same logical composition rule, the sameholds for R7 and R~.
However, syntacticallythe rules differ considerably.It may be possible to write grammars forlarge fragments of English and Italian andother languages in such a way that this semantic correspondence between basicexpressions and rules of one language and those of the other languages is main-tained.
Dowty \[4\] has also pointed out this possibility (referring to similarobservations by Curry and Dahl) ~nd has given examples of correspondencesbetween English, Japanese, Breton and Latin.
I will call grammars that correspondwith each other in this way logically isomorphic grammars.
In the next sectionthis notion will be defined precisely.MACHINE TRANSLATION BASED ON MONTAGUE GRAMMARS 1773.
M-GRAMMARSIn Montague's original proposals \[2\] the syntactic rules operate on strings.From a linguistic point of view it is desirable to have rules operating onsyntactic trees (cf.
Partee \[5\]).
From a computational point of view it isnecessary to impose restrictions on the grammars in order to make effectiveparsing procedures possible.
In an earlier paper \[6\] I developed a version ofMontague grammar, called M-grammar, with the desired properties.
I will brieflyrecapitulate the relevant definitions here.
First, I wil l  describe the kind ofsyntactic tree, called S-tree, on which the rules of an M-grammar operate.An S-tree is a labelled ordered tree.
The labels of the nodes may be com-pound entities of the kind more often met in computational linguistics, consistingof a syntactic category and a number of attribute-value pairs.
The labels of theterminal nodes of an S-tree correspond with words i.
The branches may be labelledwith the names of syntactic relations (subject, head, modifier, etc.).
Thesyntactic trees defined by a context-free grammar are a special, simple, kind ofS-tree 2.
Each S-tree defines a phrase s, the sequence of terminal labels of t,called LEAVES(t).An M-grammar defines a set of S-trees by specifying a set of basic S-trees(not necessarily terminal S-trees) and a set of rules, called M-rules.An M-rule R i defines a function F i from tuples of S-trees to sets of S-trees.So application of R i to tuple tl,...,t n results in a set Fi(tl,...,tn).
If thisset is empty, the rule is said to be not applicable.
In order to make effectiveanalysis procedures possible, M-rules must obey the following conditions.Reversibil ity condition.
Each rule R i defines not only the compositionalfunction Fi, but also an 'analytical' function F~, from S-trees to sets oftuples of S-trees, in such a way that:t ~ Fi(t I ..... tn) ~====> <t l  ..... t n> E F~(t)I wil l  call F~ the reverse of F i.Measure condition.
There is a measure funct ion~,  from S-trees to naturalnumbers, such that for each rule R i the following holds:if t ~ Fi(tl,...,tn) then j~( t>>/~g( t j )  for each tj.So application of the analytical function F~ results in a tople of smaller'S-trees.Analogously to section 2, we can define derivation trees, to be calledD-trees here, which show the way in which an S-tree is derived from basic S-treesby application of M-rules.For a given M-grammar two functions can be defined:(i) M-GENERATOR, a function from D-trees to sets of S-trees.
For each D-tree dM-GENERATOR(d) is the set of S-trees generated by applying the rules in d.M-GENERATOR is defined in terms of the compositional functions F i.
(ii) M-PARSER, a function from S-trees to sets of D-trees.
For each S-tree tM-PARSER(t) is the set of D-trees that generate t. M-PARSER is defined in termsof the analytical functions F~.For both functions effective procedures can be written, thanks to the reversibil i-ty condition and the measure condition.
It can be proved that for each D-tree dand S-tree t holds:t e "M-GENERATOR(d) <===> d ~ MrPARSER(t) 3M-grammars must also obey the following condition.Surface grammar condition.
There must be a surface grammar GS, such that theset of S-trees defined by the M-grammar is a subset of the set of S-trees definedby G S. A surface grammar defines a set of S-trees, like an M~grammar, but withrules, called surface rules, which are simpler and less powerful than M-rules.If a surface rule is applied to a tuple of S-trees tl,...,t n it creates an S-treewith a new top and with tl,...,t n as immediate subtrees.
A context-free grammaris a special case of a surface grammar.For a surface grammar a parser can be defined: an effective function proce-dure, to be called S-PARSER, which assigns to any phrase s the set of grammatical178 J. LANDSBERGENS-trees t such that LEAVES(t) = s.Thanks to the surface grammar condition, M-PARSER can be extended to a func-tion from sentences to D-trees.
First the function S-PARSER, defined by thesurface grammar, is applied to the sentence and then M-PARSER is applied to eachof its results.
M-GENERATOR can be extended to a function from D-trees to senten-ces by applying the function LEAVES to each S-tree in M-GENERATOR(d).The basic expressions and the rules of an M-grammar must be chosen inaccordance with the compositionality principle.
For each basic expression b i aset of logical expressions L.3 must be specified, representing the meanings of b i.For each M-rule R i a logical composit ion rule Sj must be specified (severalM-rules may share the same Sj).Let us now define a logical D-tree as a D-tree with names of logical compo-sit ion rules Sj at the non-termlnal nodes and names of 'basic' logical expressionsat the terminal nodes.
For each M-grammar a function LOG from (syntactical)i 3Figure 3D-trees to sets of logical D-trees can bedefined, as well as the reverse function LOG'.If the example grammars G 1 and G 2 were to bereformulated as M-grammars, Figure 3 might be alogical D-tree for the D-tree of Figure i, andalso for the D-tree of Figure 2.A logical D-tree defines exactly onelogical expression and is in fact a redundantintermediate step between syntactical D-treeand logical expression.
However, as we wil l  seein the next section~ it is logical D-trees andnot logical expressions which act as the pivotof the translation process in the Rosettasystem.We are now able to define for each M-grarmnar the function ANALYSIS, whichmaps sentences to sets of logical derivation trees and the reverse functionGENERATION.ANALYSIS(s) =def 4e  I ~t ,  ~d: t ~ S-PARSER(s) ~ d E M-PARSER(t) ~ e ~ LOG(d)}GENERATION(e) =defiSl ~t ,~d:  daLOG' (e )  ~ t&M-GENERATOR(d)  ~ seLEAVES( t )  }(s ranges over sentences, t over S-trees, d over D-trees, e over logical D-trees)The following theorem can be proved easily.Reversibi l ity Theorem.~/s, ~/e : e e ANALYSIS(s) ~ s ~ GENERATION(e)The given definitions enable the notion of logical isomorphy to be definedprecisely.
Let us assume as given two M-grammars G i and Gj with generationfunctions GENERATION i and GENERATIONj.Gi t~,~ Gj (G i logically isomorphic with Gj) iff\ 'e  : \[ 3s  : s ~ GENERATIONi(e) ~ 3 s' : s' ~ GENERATIONj(e) \](for each logical D-tree assigned to a sentence s by Gi, there is a sentence s'to which Gj assigns the same logical D-tree, and vlce-versa)Proving that two grarmmars are logically isomorphic may be complicated.
Itis simple for grammars of which the rules are complete (i.e.
applicable to allexpressions of the required categories), if there is a one-to-one correspondencebetween the syntactic categories, the basic expressions and the rules of the twogrammars.Because the relation ~ is an equivalence relation, it makes sense tospeak of a set of logically isomorphic grammars, as I wi l l  do in the next section.MACHINE TRANSLATION BASED ON MONTAGUE GRAMMARS 1794.
THE ROSETTA SYSTEMSuppose we have logically isomorphic M-grammars GI, G 2 .... for languagesLI, L2,...
In section 3 we have seen that each grammar G i defines a functionANALYSIS i and a function GENERATION i.
These functions determine a translationfunction for each pair of languages Li, Lj-TRANSiJ (s) =def {s'\[ ~e  : e ~ ANALYSISi(s) ~ s' 6" GENERATIONj(e)~(s and s' are sentences, e is a logical D-tree)An experimental translation system, Rosetta, has been designed, which trans-lates isolated sentences of a source language into sets of sentences of a targetlanguage, according to the definition of TRANSIj.
Given isomorphic grammars for aset of languages the source language and the target language can be freely chosenfrom this set.
The definition of logical isomorphy and the Reversibility Theoremguarantee that - given correct grammars - each sentence of any source languagewill be correctly translated into any target language, for each meaning of thatsentence.In Figure 4 the various stages of the translation process in Rosetta areshown.
The example expressions are simplified, e.g.
the attribute-values havebeen omitted in the S-trees.
MORFH and MORPH' are the components that performdictionary look-up and morphological rules during analysis and generation.the Italian g i r l - - -~  _ .
~.~..la ragazza italianah"'" I IM?RP"!
IART + ADJ + NOUN, .
.~  ~.-..ART + NOUN + ADJI:.
?i 1Figure 4It should be noted that LOG and LOG' may perform more complex operations thanFigure 4's example suggests.
Basic expressions may be larger units than words.Furthermore an adjective of the source language may be translated into a preposi-tional phrase or a relative clause of the target language, because these catego-ries correspond with the same logical type as the category adjective.
Rule S 2is not only translated into R~, but also into rules that combine a noun with aprepositional phrase or a relative clause.
Which of the combinations of theselocal ambiguities is correct is decided in M-GENERATOR.The first version of Rosetta was designed and implemented in 1981, for verysmall fragments of Dutch, English and Italian.
The system operates in a breadth-first manner: at each level it generates all results, in the case of ambiguities,and ultimately it gives all possible translations.
The program was written inPASCAL and runs under UNIX on a VAX 11/780.There are relatively few applications for a system delivering all syntacti-cally possible translations.
As is well-known, in order to choose the 'best' outof the possible translations, knowledge about the world and the context is needed.A future version of Rosetta will presumably be provided with interactive facili-ties that enable the user to contribute this kind of knowledge, as in ITS \[7\].180 J. LANDSBERGEN5.
DISCUSSIONThere is a more obvious way to base a multi- l ingual translation system onMontague grammar, or on logic in general, than the one described here: use thelogic itself as the interlingua.
The K -X -context - f ree  language of the SALATsystem \[8\] is an example of this.
Friedman \[9\] reports on work by Godden, whouses Montague's Intensional Logic.
4 The success of the Rosetta approach dependson the correctness of the hypothesis that logically isomorphic grammars can bewritten for interesting fragments of languages.
At first sight it may seem thatwe can avoid the necessity to attune the grammars to each other if we do not uselogical derivation trees but the logical expressions themselves as intermediateexpressions.
However, the important distinction is not between using logicalderivation trees and using logical expressions, but between making use of theform of logical expressions and not doing so.
In a powerful logical language eachmeaning can be represented by an infinite variety of logical forms.
If a genera-tion component has to be able to generate a sentence not only from a particularlogical form, but also from all logically equivalent forms (which might be theresult of the analysis component of some other language), this wil l  cause decida-bil ity problems.
These are in practice avoided by ~everely l imiting the possibleforms that analysis components may produce and ensuring that the generationcomponents can handle these forms (The same holds for systems that use syntacticdeep qtructures as intermediate expressions).
The point I want to make here isthat this is just another - less explicit - way to attune the grammars of thelanguages to each other.The reversibil ity of the M-grammars used in Rosetta has the advantage thatthe same grammar can be used for analysis and generation.
5 Futhermore it makestesting of the system easier: if the analysis component and the generation com-ponent of the same language are coupled, each sentence must be one of its ownpossible translations.
Ultimately, for most applications it wil l  be necessaryto give up this nice symmetry, to make the analysis more tolerant and the genera-tion more restrictive.
But such modifications should be the result of consciousdecisions and not be mixed up too soon with the incapabil ity to write correct andcomplete grammars.NOTESi) The relation between the words and the complex labels of the terminal nodes hasto be defined by a dictionary in combination with morphological rules.
This com-ponent is not discussed here.2) In \[6\] the restricted - context-free - definit ion of S-tree is used.3) For grammars with syntactic variables, the symmetry between M-GENERATOR andM-PARSER holds only for 'canonical' D-trees, in which the indices of syntacticvariables are chosen in a restricted way.
This can be done without loss ofgenerality.
Cf.
\[6\].4) Another translation system based on Montague grammar is described by Nishidaet al\[i0\].
But here the logic is not used as an inter\]ingua, but as the levelwh@re the transfer, from English to Japanese, takes place.5) In the current implementation of Rosetta the rules are not automaticallycompiled or interpreted from the original notation.
The analytical and generativeversions of the rules are 'hand-compiled' into PASCAL.ACKNOWLEDGEMENTThe Rosetta system was designed and implemented in cooperation with JoepRous.MACHINE TRANSLATION BASED ON MONTAGUE GRAMMARS 181REFERENCES\[i\] Hutchins, W.J., Machine translation and machine-aided translation.
Journalof Documentation, Vol.
34, No.
2 (1978) 119-159.\[2\] Thomason, R.H.
(ed.
), Formal Philosophy, Selected papers of Richard Montague(Yale University Press, New Haven, 1974).\[3\] Dowty, D.R., Introduction to Montague semantics (Reidel, Dordrecht, 1981).\[4\] Dowty, D.R., Grammatical relations and Montague grammar, to appear in:Pullum,G.
and Jakobson, P.
(eds.
), On the Nature of Syntactic Representation.\[5\] Partee, B.H., Some transformational extensions of Montague grammar, in:Partee, B.H.
(ed.
), Montague Grammar (Academic Press, New York,1976).\[6\] Landsbergen, J?, Adaptation of Montague grammar to the requirements ofparsing, in: Groenendijk, J.A.G., Janssen, T.M.V.
and Stokhof, M.B.J.,Formal Methods in the Study of Language Part 2 (MC Tract 136, MathematicalCentre, Amsterdam, 1981).\[7\] Melby, A.K., Smith, M.R.
and Peterson, J., ITS: Interactive TranslationSystem (Proceedings COLING 80, Tokyo, 1980).\[8\] Friedman, J., Expressing logical formulas in natural language, in~ Groenen-dijk, J.A.G., Janssen, T.M.V.
and Stokhof, M.B.J., Formal Methods in theStudy of Language Part 1 (MC Tract 135, Mathematical Centre, Amsterdam, 1981).\[9\] Hauenschild, C., Huckert, E. and Maier, R., SALAT: machine translation viasemantic representation, in: B~uerle, R., Egli, U. and Stechow, A. von (eds.
),Semantics from Different Points of View (Springer Verlag, Berlin, 1979).\[i0\] Nishida, T., Kiyono, M. and Doshita, S., An English-Japanese machine trans-lation system based on formalsema~ics of natural languages (Technical Report,Tokyo Univ., 1981).
