An Overv iew of SURGE:  a Reusab leComprehens ive  Syntact ic  Rea l i zat ionComponentMichae l  E lhadadelhadad?cs, bgu.
ac.
ilMathematics and Computer Science Dept.Ben Gurion University in the NegevBeer Sheva, 84105 IsraelJacques Rob inj r~di.
ufpe.
brDepartamento de InformgticaUniversidade Federal de PernambucoRecife.
PE 50740-540 Brazil1 Introduct ionThis paper describes a short demo provid-ing an overview of SURGE (Systemic Unifi-cation Realization Grammar of English) asyntactic realization front-end for naturallanguage generation systems.
Developedover the last seven years 1 it embeds oneof the most comprehensive computationalgrammar of English for generation avail-able to date.
It has been successfully re-used in eight generators, that have little incommon in terms of architecture.
It hasalso been used for teaching natural lan-guage generation at several academic in-stitutions.We first define the task of a stand-alonesyntactic realization component withinthe overall generation process.
We thenbriefly survey the computational formal-ism underlying the implementation ofSURGg as well as the syntactic theoriesthat it integrates.
We then describe thestructure of the grammar.1The research presented in this paper startedout while the authors were doing their PhD.
at.Columbia University, New York.
We are bothindebted to Kathleen McKeown for her guidanceand support during those years.2 Reusable Real izat ionComponent  for NLGNatural language generation has been tra-ditionally divided into three successivetasks: (1) content determination, (2) con-tent organization, and (3) linguistic real-ization.
The goal of a re-usable realizationcomponent is to encapsulate the domain-independent part of this third task.
Theinput to such component should thus beas high-level as possible without hinderingportability.
Independent efforts to definesuch an input have crystalized around askeletal, partially lexicMized thematic treespecifying the semantic roles, open-classlexical items and top-level syntactic cat-egory of each constituents.
An exampleSURGE input with the corresponding sen-tence is given in Fig.
1.The task of the realization componentis to map such skeletal tree onto a naturallanguage sentence.
It involves the follow-ing sub-tasks:(1) Map thematic structure onto syntac-tic roles: e.g., agent;p rocess ,  possessed  and pcssessor  ontosubjec' t ,  verb-group,  d i rec ' t -ob jec ' tand ind i rec t -ob jec t  (respectively) in$1.
(2) Control syntactic paraphrasing and al-Input Specification (I1):catprocesspartzcclausetyperelationlexagentaffectedpossessorpossessedcomposite \]possessive"hand"\[ cat pers_pro \]gender feminine m\[ \] let "editor"Nlex "draft"Output Sentence ($1): "She hands the draft to theeditor"Figure 1: An {;xample St!RGE I/Oternations \[6\]: e.g., adding tile(dat ive-move yes)  feature to 11 wouldresult in the generation of the paraphrase($2): "She hands the editor the draft".
(3) Prevent over-generation: e.g., failwhen adding the same (dat ive-moveyes)  feature to an input similar to I1except that the possessed  role is filledby ( (cat  pers -pro ) )  (for personal pro-noun) to avoid the generation of ($8) *"She hands the editor it".
(4) Provide defaults for syntactic features:e.g.. definite for the NPs of $1.
(5) Propagate agreement features, provid-ing enough input to the morphology mod-ule: e.g.. after the agent and processthematic roles have been mapped to thesub jec t  and verb -group syntactic roles.propagate the default (person th i rd )feature added to the sub jec t  filler to theverb-group filler; without such a propa-gation the morphology module would notbe able to inflect the verb "to hand" as?
'hands" in $1.
(6) Select closed-class words: e.g., "'she","'the" and "'to" in $1.
(7) Provide linear precedence constraintsamong syntactic con-stituents: e.g., sub jec t  > verb-group >ind i rec t -ob jec t  > d i rec t -ob jec t  oncethe default active voice has been chosenfor $1.
(8) Inflect open-class words (morphologi-cal processilLg): e.g., the verb "to hand"as "'hands" in $1.
(9) Linearize the syntactic tree into astring of inflected words following the lin-ear precedence constraints.3 The FUF/SURGE packageSURGE is implemented in the special-purpose programming language PuP \[1\]and it is distributed as a package witha PuP interpreter.
This interpreter hastwo components: (1) the functional unifierthat fleshes Out the input skeletal tree withsyntactic features from the grammar, and(2) the linearizer that inflects each wordat the bottom of the fleshed out tree andprint them out following the linear prece-dence constraints indicated in the tree.~u F is an extension of the original func-tional unification formalism put forwardbv Kay \[5\].
It is based on two powerfulconcepts: encoding knowledge in recursivesets of attr ibute value pairs called Func-tional Descriptions (FD) and uniformlymanipulating these FDs through the op-eration of unification.Both the input and the output of a FUFprogram are FDs, while the program itselfis a meta-FD called a Functional Gram-mar (FG).
An FG is an FD with disjunc-tions and control annotations.
Control an-notations are used in Fur for two distinctpurposes: (1) to control recursion on lin-guistic constituents: the tree of the in-put FD is fleshed out in top-down fashionby re-unifying each of its sub-constituentwith the FG.
and (2) to reduce backtrack-ing when processing disjunctions.SURGE represents our own synthesis,within a single working system and com-putational framework, of the descriptivework of several (non-computational) lin-guists.
We took inspiration principallyfrom \[4\] for the overall organization of thegrammar and the core of the clause ,rodnominal sub-grammars; \[3\] for the seman-tic aspects of the clause; \[7\] for the treat-ment of long-distance dependencies: and\[8\] for the many linguistic phenomena notmentioned in other works, yet encounteredin many generation application domains.Since many of these sources belong tothe systemic linguistic school, SURGE iSmostly a functional unification implemen-tation of systemic grammar.
In particu-lar, the type of FD that it accepts as inputspecifies a "process" in the systemic sense:it can be an event: or a relation.
The hier-archy of general process types defining thethematic structure of a clause (and the as-sociated semantic class of its main verb)in the current implementation is compactand able to cover many clause structures.Yet, the argument structure and/or se-mantics of many English verbs do not fitneatly in any element of this hierarchy \[6\].To overcome this difficulty.
SURGE also in-cludes lexical processes inspired bv lexieal-ist grammars such as the Meaning-TextTheory and HPSG \[7\].A lexical process is a shallower and lesssemantic form of input, where the sub-categorization constraints and the map-ping from the thematic roles to the obliqueroles \[7\] are already specified (insteadof being automatically computed by thegrammar as is the case for general pro-cess types).
The use of specific lexicalprocesses to complement general processtypes is an example of the type of theorvintegration that we were forced to carryout during the development of SURGE.
Inthe current state of linguistic research,such an heterogeneous approach is thebest practical strategy to provide broadcoverage.4 Organizat ion and Cover-ageAt the top-level, SURGE is organized intosub-grammars, one for each syntactic at-egory.
Each sub-grammar encapsulatesthe relevant part of the grammar to ac-cess when recursively unifying an inputsub-constituent of the corresponding cat-egory.
For example, generating the sen-tence ".lames buys the book" involves suc-cessively accessing the sub-grammars forthe clause, the verb group, the nomi-nal group (twice) and the determiner se-quence.
Each sub-grammar is then di-vided into a set of systems (in the systemicsense), each one encapsulating an orthog-onal set of decisions, constraints and fea-tures.
The main top-level syntactic cate-gories used in SURGE are: clause, nominalgroup (or NP), determiner sequence, verbgroup, adjectival phrase and PP.Following \[4\], the thematic roles ac-cepted by SURGE in input clause specifica-tions first divide into: nuclear and satelliteroles.
Nuclear roles, answer the questions"who/what was involved?"
about the sit-uation described by the clause.
They in-clude the process itself, generally surfac-ing as the verb and its associated partici-pants surfacing as verb arguments.
Satel-lite roles (also called adverbials) answerthe questions "when/where/why/how didit happen?"
and surfa.ce as the remainingclause complements.Following this sub-division of thematicroles, the clause sub-grammar is dividedinto four orthogonal systems:(1) Transitivity, which handles mappingof nuclear thematic roles onto a defaultcore syntactic structure for main assertiveclauses.
(2) Voice, which handles departures fromthe default core syntactic structure trig-gered by the use of syntactic alternations(e.g., passive or dative moves).
(3) Mood, which handles departures fromthe default core syntactic structure trig-gered by variations in terms speech acts(e.g., interrogative or imperative clause)and syntactic functions (e.g.. matrix vs.subordinate clause).
(4) Adverbial, which handles mapping ofsatellite roles onto the peripheral svntacticstructure.Nominals are an extremely versatilesyntactic category, and except for limitedcases, no linguistic semantic classificationof nominals has been provided.
Conse-quently, while for clauses input can be pro-vided in thematic form.
for nominals itmust be provided directly in terms of svn-tactic roles.
The task of mapping domain-specific thematic relations to the syntacticslots in an NP is therefore left to the clientprogram.The verb group grammar decompo~esin three major systems: tense, polarityand modality.
SUR.GE implements the full36 English tenses identified in \[4\] pp.19S-207 It provides an interface to the clientprogram is in terms Allen's temporal re-lations (e.g., to describe a past event.the client provides the feature ( tpat l :ern( :e t  :be fore  :sc) ) ,speci fy ing that theevent time (et) precedes the speech time(st)).5 Cur rent  WorkThe development of SURGE itself contin-ues.
as prompted by the needs of newapplications, and by our better under-standing of the respective tasks of syntac-tic realization and lexical choice \[2\].
Weare specifically working on (1) integrat-ing a more systematic implementation ofLevin's Mternations within the grammar.
(2) extending composite processes to in-clude mental and verbal ones.
(3) modify-ing the nominal grammar to support nom-inalizations and some forms of syntacticalternations and (4) improving the treat-ment of obligatory pronominalization andbinding.
As it stands, SURGE provides acomprehensive syntactic realization com-ponent, easy to integrate within a widerange of architectures tbr complete genera-tion systems.
It is available on the WWWat http ://www.
cs .bgu.
ac.
il/surge/.References\[1\] M. Elhadad.
Using argumentatior~ tocontrol lezical choice: a unification-based implementation.
PhD the-sis, Computer Science Department.Columbia University, 1993.\[2\] M. Elhadad, K. McKeown.
and?
l. Robin.
Floatings constraints in lexi-cal choice.
Computational Linguistics.1996.
To appear.\[3\] R. Fawcett.
The semantics of clauseand verb for relational processes in en-glish.
In M. Halliday and R. Fawcett,editors.
New developments in systemiclinguistics.
Frances Pinter, Londonand New York, 1987.\[4\] M. Halliday.
An introduction to func-tional grammar.
Edward Arnold.
Lon-don.
1994.
2nd Edition.\[5\] M. Kay.
Functional grammar.
In Pro-ceedings of the 5th Annual Meeting ofthe Berkeley Linguistic Society, 1979.\[6\] B. Levin.
English verb classes andalternations: a preliminary investiga-tion.
University of Chicago Press.1.993.\[7\] C. Pollard and \[.
A.
Sag.
Head DrivenPhrase Structure Grammar.
Universityof Chicago Press, Chicago, 1994.\[8\] R. Quirk, S. Greenbaum, G. Leech.and J. Svartvik.
A comprehen-sive grammar of the English language.Longman, 1985.4
