Languages Generated by Two-LevelMorphological Rules-Graeme RitchietUniversity of EdinburghThe two-level model .of morphology and phonology arose from work on finite-state machine de-scriptions of phonological phenomena.
However, the two-level rule notation can be given a precisedeclarative semantics in terms of the segmentation fsequences ofpairs of symbols, quite inde-pendently of any computational representation assets of finite-state transducers.
Thus defined,the two-level model can be shown to be less powerful, in terms of weak generative capacity, thanparallel intersections of arbitrary finite-state transducers without empty transitions (the usualcomputational representation).
However, ifa special boundary symbol is permitted, the full familyof regular languages can be generated.
Two-level morphological grammars may, without loss ofgenerality, be written in a simplified normal form.
The set of two-level generated languages canbe shown to be closed under intersection, but not under union or complementation.1.
BackgroundKoskenniemi (1983a, 1983b, 1984) proposed arule-system for describing morphologicalregularities in a language, depending centrally on the idea of matching two sequencesof symbols--a lexical string (made up of the lexical forms of morphemes) and asurface string (the sequence of characters in the normal, inflected, form of the word).
(In general, symbols could be orthographic or phonological; here we shall abstractfrom this linguistic issue, and merely consider strings of atomic symbols, which couldbe phonemes, typewritten characters, or any other separate ntities).Koskenniemi (1983a) originally described the rules in two alternative forms--high-level rules and finite-state transducers.
The high-level rules were given only aninformal interpretation, and were used as an expository device to state the linguisticregularities more perspicuously.
The formalism that was actually used to write and im-plement two-level morphological grammars was parallel combinations of finite-statetransducers.
Koskenniemi's own implementation was an interpreter for parallel trans-ducers, which were directly written by the linguist as rules in their own right.
Also,various linguistic analyses presented in Dalrymple t al.
(1983) follow this approach,expressing rules as transition tables for transducers, and Antworth (1990) describesa recent implementation based wholly on transducers being written directly.
Never-theless, Koskenniemi conjectured that an automatic ompilation procedure could be* An earlier version of part of this work was presented at the Fourth Conference of the EuropeanChapter of the Association for Computational Linguistics, Manchester, April 1989.J Department of Artificial Intelligence, 80South Bridge, Edinburgh EH1 1HN, Scotland,g.d.ritchie@ed.ac.uk(~) 1992 Association for Computational LinguisticsComputational Linguistics Volume 18, Number 1devised to transform the more readable high-level form into the more directly im-plementable parallel transducer form.
Koskenniemi (,1985) refined the notation andsketched a compilation method, although he still did not provide a detailed declar-ative definition of the meaning of the high-level rules.
Various implementations thatcompile variants of the notation into arrangements of transducers have been devel-oped (e.g.
Karttunen et al 1987; Ritchie et al 1991).The general view of this earlier work was that the rule notation was a mere"syntactic sugar" for parallel combinations of arbitrary transducers, and that therewas no difference in meaning or power between the two formalisms.This paper establishes the following:(i)(ii)(iii)(iv)(v)an alternative (declarative) statement of the meaning of the high-levelrule notation is possible, without recourse to compilation into finite-statetransducers;the usual two-level morphological mechanism is more limited thanarbitrary transducers in its ability to define relationships between strings;the use of a special boundary symbol slightly increases the generativepower of the model;for any two-level morphological grammar, there is an equivalent one in asimpler normal form;the family of languages generated by two-level rules is not closed underunion or complementation, but is closed under intersection.2.
The Two-Level Notat ionThe original notation proposed in Koskenniemi (1983a) included some rather complexnotational conventions that have not survived into later versions.
The formalizationgiven here will deal only with the core ideas, as embodied in Koskenniemi (1985) (andother implementations such as Karttunen et al 1987; Ritchie et al 1991),To understand how two-level rules operate, it is useful to consider four separatelevels, as depicted in Figure 1.
The topmost level contains lexical forms, which arestrings of symbols in some suitable lexical alphabet:.
Each string can be thought ofas the abstract representation f the phonology or orthography of an individual mor-pheme or lexeme.
The second level consists of a notional automaton "tape" madeup of any concatenation of strings from the first level (the lexicon), with special nullsymbols inserted anywhere between the symbols of the lexical alphabet (optionally).Hence a finite set of lexical strings characterizes an infinite set of possible "lexicaltapes," produced by concatenation and insertion of nulls.
The third level is a similar"surface tape" consisting of symbols in a surface alphabet, with the null symbol alsoappearing at arbitrary positions.
The fourth level, at the bottom in Figure 1, representsthe word as spelt (or phonetically represented) in the surface alphabet; the relation-ship between the surface tape and the surface form is that the latter can be producedfrom the former by removing all occurrences of the special null symbol.
The ordinary42Graeme RitchieLEXICAL FORMS:Languages Generated by Two-Level Morphological Rulesmove +edLEXICAL TAPE:SURFACE TAPE:- Io lv  e e di o o lv  o o le ldSURFACE FORM:Figure 1Lexical and surface tapes and forms.movedsurface form (such as moved) is related to a sequence of lexical forms (such as moveand +ed) if a surface tape and a lexical tape exist such that:1. the lexical tape is the concatenation f the lexical forms in question,possibly with the addition of nulls;2. the surface tape contains the symbols of the surface form, possibly withthe addition of nulls;3. the two tapes have the same number of symbols, counting nulls;4. the contents of the tapes are related by the two-level rules.That is, the two-level rules define possible pairs of equal-length sequences (the two"tapes"), and the actual surface form and lexical forms are then related by generalconventions acting on these sequences.
The formalism as a whole can be used todescribe phenomena involving a surface string of a different length from the lexicalforms, via the conventions regarding null symbols, but the rules themselves are writtenas statements about symbol-strings of equal length.
Hence, the rules can be viewedas statements about sequences of symbol-pairs, where each symbol-pair consists of onesymbol from the lexical tape and its counterpart from the surface tape.
Conventionally,symbol-pairs are written with an infix colon, rather than as a pair within parentheses.The rules specify which sequences of symbol-pairs are or are not valid, by supplyingcontexts (sequences of symbol-pairs) within which a particular symbol-pair may ormust occur.
For example, the rather trivial rulee:O => v :v  ___  +:0would specify that the pair e:0 could occur only if it were surrounded by v:v onthe left and +:0 on the right, which is a rough approximation to the phenomenonillustrated by Figure 1.There are three types of rule, but they all have the same overall form--a singlesymbol-pair whose behaviour is being specified, followed by an operator (=>, <--- or<--->), a left context, a punctuation ("___" in this paper) to indicate where the symbolpair appears relative to the context, and a right context.43Computational Linguistics Volume 18, Number 1The three types of rule are as follows:Context Restriction (operator =>): states that the given symbol-pair can occur only inthe given contexts, as in the simple example given above.Surface Coercion (operator <=): states that if the contexts occur, and the lexical symbolis as given, then the surface symbol must be as specified.
For examplee:l <= l:i +:0indicates that where a lexical Z corresponds toa surface ?, there is a pairing of lexical +with a surface null symbol one place further to the right, and the intervening symbol-pair has a lexical e, then the surface symbol in that pair must be 1.
This might be oneof the rules describing the relationship between poss ib le+i ty  and possibi l ity.Composite (operator <=>): a rule of this sort is merely an abbreviation of two separaterules (a context restriction rule and a surface coercion rule) made up of exactly thesame symbol-pair, left context and right context.
For examplei:y <=> -:-  ___ e:O +:0 i:istates that lexical ?
and surface y are paired only in the context of anything on the left(if we assume that the "=" symbol means "any symbol") and a sequence of pairingson the right as given.
This describes the association of lexical t ie+ing with surfacetying.
The precise meaning of a composite rule is given by re-writing it as a contextrestriction rule and a surface coercion rule; composite rules will be ignored in theformalization below, as they add nothing to the abstract mechanism.Fuller examples of the use of two-level rules can be found in Koskenniemi (1983a)and Ritchie et al (1987, 1991).The interpretation f a set of rules is as follows.
For a sequence of symbol-pairs tobe acceptable, if any symbol-pair n it was the subject of one or more context restrictionrules, then at least one of these rules must apply to the surrounding sequence (i.e.
thecontexts must match).
Also, if the surrounding contexts of any symbol-pair matchedthe context parts of any surface coercion rule, then the symbol-pair must obey thatrule.
That is, in a rule-set (a two-level morphological grammar), all the context re-striction rules that have the same symbol-pair on the left-hand side of the ~ operatorwere deemed to be a disjunction of constraints for that symbol-pair, and the surfacecoercion rules were a conjunction of constraints (regardless of which symbol-pair theyconstrained).In specifying symbol-pairs in rules (whether in the central pair or within thecontexts) various convenient abbreviations were available.
Symbols denoting sets ofcharacters could be used instead of individual characters, thereby making it easier tostate rules that referred to "all vowels" or other classes.
Variables were also availablefor conflating rules that were very similar.In specifying contexts (left and right), it was possible to supply more complexexpressions than just sequences of symbol-pairs.
Essentially, regular expressions ofsymbol-pairs were allowed (regular pair expressions as Koskenniemi called them),since notation was available to state alternation (disjunction), optionality, and the oc-currence of zero or more instances (Kleene star).
Also, a single rule could containseveral pairs of contexts, written as a disjunction of possibilities.44Graeme Ritchie Languages Generated by Two-Level Morphological RulesIn the following illustrative xample of a two-level morphological rule (taken fromRitchie et al 1987), angle brackets indicate sequences of pairs and braces indicatealternatives; also, C, V, C2, and = represent subsets of the relevant symbol alphabetsand + is an abstract symbol occurring in certain lexical forms.e:0 <=> =:C2 ___ < +:0 V: = >or < C:C V:V> ___ <+:0  e :e>or {g :g  c :c} ___ <+:0  {e:e  i : i}  >or i:0 ___ +:0or c:c ___  <+:0  a:0  t : t>This rule describes the various contexts in which a lexical e is elided on the surface(as in larger, continuing, raced, poss ib ly ,  or reduction).The formalism here will not include symbolic mnemonics  for sets of symbols, norvariables ranging over sets of symbols.
The semantics of both these notations can bestated in terms of equivalent sets of rules without such abbreviatory conventions, soall that is required is a definition of the interpretation of rules containing only actualcharacter symbols.
We shall also (in some of our formalization) abstract away fromthe stipulation that the context-expressions must denote regular sets, since none of theproofs depend on that characteristic.
(This is a slight generalization of the presentationin Ritchie 1989.
)One of the more peripheral aspects of two-level morphology is the role of therules in segmenting surface input strings into lexical forms (i.e.
the interface betweena rule interpreter and a lexicon of morphemes).
We shall ignore this issue here (butsee Ritchie 1989 and Ritchie et al 1991 for a formal statement of two possible lexicalinterfaces).
Our formalization will deal solely with the way in which the two equal-length "tapes" are related, as this is the stage of the surface-to-lexicon mapping thatis explicitly mediated by the rules.3.
Regular RelationsThe two-level rule compiler of Karttunen et al (1987) was based on sophisticatedmanipulation of regular expressions in order to define very precisely and rigorouslythe set of transducers produced by the compiler.
Kaplan (1988) generalized someof this work further, by formalizing the algebraic manipulations of regular sets ofsequences of pairs of symbols, which he called regular elations.
1 These relations bearthe same relationship to finite-state transducers that regular languages bear to finite-state machines, and his formal definition is exactly analogous to that of a regularlanguage:the empty set is a regular relation;the set consisting of the empty string is a regular elation;the set consisting of a single ordered pair of symbols, either of which may bethe empty string, is a regular relation;if R1 and R2 are regular relations, so are R1 U R2, R1R2, and R~ (i.e.
the unionof the two sets, the set consisting of concatenations of elements from the two1 The material in this section is based solely on Kaplan (1988).
For the results reported, there are noformally publ ished details that I am aware of.45Computational Linguistics Volume 18, Number 1sets, and the set consisting of zero or more concatenations of elements froma set).Regular relations can then be described using regular expressions over symbol-pairs in the obvious way.
Kaplan observed that every regular relation is acceptedby some finite-state transducer, and that every finite-state transducer accepts omeregular relation.
One important subtlety is the use of the empty string as an elementof a symbol-pair, with the consequence that a "regular elation" can associate stringsof unequal lengths together, assuming the obvious equivalence between a sequenceof symbol-pairs and a pair of symbol-strings ( ee Section 2 above).
In the associatedtransducer form, the empty symbol corresponds to no symbol being scanned or nosymbol being output (i.e.
one of transducer's "heads" may advance while the otherdoes not).Kaplan stated various results about regular elations, regular languages, and theircombinations, including the following.
If R1, R2, are regular relations, and L1, L2 areregular languages, then the following are regular relations:R1 o R2 (the composition of the relations);L1 ?
L2 (the direct product of the sets);Id(L1) (the relation in which each element is paired with itself);R~ -1 (the inverse relation).Also:Dom(R1) (the set of sequences of first elements of pairs in R1) is a regularlanguage.Kaplan pointed out that intersection and complementation f regular relations do notin general yield regular relations if empty symbols are involved, but will do whereall the symbols are nonempty.
Since intersection of regular relations corresponds to aparallel combination of finite-state transducers, this means that there are combinationsof transducers that will map a regular language into a nonregular language.
This lastpoint is illustrated by considering the two regular relations defined as(a: b)*(e :c)*(e: b)*(a: c)*where e denotes the empty string.
In transducer terms, the first of these scans anynumber of a symbols on one tape, with the same number of b symbols on the othertape; one tape then stays stationary (empty transitions) while the other is scanningany number of c symbols.
The second expression describes a situation where the firsthead remains tationary, while the second head scans some number of b symbols; thenan equal number of a and c symbols are scanned on the two tapes.
The intersection ofthese will have n occurrences of a on the first tape, but the second tape must containexactly bnc n. Hence a regular language is being associated with a known nonregular(context-free) language.
There is no single finite-state transducer that will define thismapping.It is important o note that here e is a genuine empty string, interpreted by atransducer as a lack of transition; this is different from two-level morphology's "null"46Graeme Ritchie Languages Generated by Two-Level Morphological Rulessymbol 0, which acts as an ordinary symbol for the transducers (or for rule-matching),but is treated specially when relating the "tapes" to other linguistic levels (see Section 2above).Kaplan also developed more subtle results about combinations of regular rela-tions and languages, including the result that the following operator IF combines tworegular relations to form a regular relation:IF(R1,R2) =eef {xy I i fy  C R2, then x E R1}With these algebraic devices, he expressed the meaning of Koskenniemi's rule-notation as regular expressions.
Two important points must be noted here---the contextexpressions in Koskenniemi's rules denoted regular sets (the rules formed a regulartwo-level morphological grammar, in the terminology of Section 5 below); also, thebasic rule-mechanism operates on equal-length sequences of symbols, as outlined inSection 2 above, with no genuine empty or null symbols.
A context restriction rule ofthe forma:b  => LC ___  RCdefines a regular relation that can be expressed as:IF(zc*LC, a :bzr*) M IF((zr*a : b)', (RCzr*)')where 7r is the set of all possible symbol-pairs, and the prime denotes complementationwith respect o 7r*.Similarly, a surface coercion rulea:b <= LC RCdefines the relation:(~*LC(Id(Dom(a: b)) o 7r* ~ {a: b})RCzr*)'where ",-J' denotes et-difference.
Kaplan did not explicitly define the language thatwould be generated by a set of two-level rules (a full grammar), but it would becharacterized by an intersection of all the regular relations defined by the individualrules.
2He also showed that the uniform deletion/insertion f a particular symbol (suchas the special null symbol used in two-level rules) at arbitrary points in a string couldbe expressed as a regular relation, so the entire lexicon-to-surface mapping sketchedin Section 2 earlier could be stated as a regular relation.The overall result of Kaplan's theoretical work is that the compilation from regulartwo-level rules to parallel transducers i vindicated as theoretically sound, and any-thing expressible in the two-level formalism (limited to regular context expressions) isexpressible in the transducer (regular elation) formalism; that is, the latter is at leastas powerful as the regular two-level formalism itself.
The question of whether the twoformalisms were equivalent (as had always been assumed) was left open.2 Strictly, this would require the two-level grammar to be in the normal form defined in Section 10 below.47Computational Linguistics Volume 18, Number 14.
Basic DefinitionsHaving established the basis for discussion, we can now formulate a precise set-theoretic definition of two-level rules, so as to go on to investigate their formal prop-erties.Given any two finite symbolic alphabets, A and A', a symbol-pair from A and A'is a pair (a, a') where a c A and a' c A t. Such symbol-pairs will normally be written as"a:a".
A symbol-pair sequence from A and A' is simply a sequence (possibly empty)of symbol-pairs from A and A', and a symbol-pair language over A and A' is a setof symbol-pair sequences (i.e.
a subset of (A x A')*).Given two alphabets A and A t, and a symbol-pair sequence G from A and A', asequence (P1,..Pn) of symbol-pair sequences from A and A' is said to be a partition ofiffG = P1P2....Pn(i.e.
G is made up of the concatenation f the Pi).Given two alphabets A and A', a two-level morphological rule over A and A'consists of a pair (P, C) where P is a symbol-pair from A and A', and C is a nonemptyset of pairs (LC,RC) where LC and RC are sets of symbol-pair sequences from A andA'; each such set of symbol-pair sequences is called a context set.
The reason forhaving C be a set of pairs of context sets, is that we must cater, in the general case,for there being a disjunction of pairs of context sets, as in the illustrative rule givenin Section 2 earlier.
In the case where the set is a singleton, this reduces to the simple(nondisjunctive) case.
Only one of the formal proofs that follow depends upon C beinga finite set, but if infinite sets of context-pairs were required, some suitable notationwould have to be devised for expressing such infinite sets.
There seems to be nolinguistic motivation to go beyon d finite sets of pairs of context sets.
Each individualcontext set (i.e.
LC or RC in the above notation) can be an infinite set, and often is.The above definition is the generalization beyond regular context expressions men-tioned in the previous ection.
To specialize it to the traditional two-level case, we needa further definition:A two-level morphological rule is said to be regular if all the context sets in it areregular sets.
(Notice that even here we have abstracted from the actual notation usedto represent regular sets).A set 0 is said to match at the right-end a symbol-pair sequence G iff there is apartition (P1, P2) of ~ such that P2 E 0.A set 0 is said to match at the left-end a symbol-pair sequence G iff there is apartition (P1, P2) of ~ such that P1 c 0.A set R of two-level morphological rules contextually allows a symbol-pair se-quence ~ iff, for every partition (P1, a:a t, P2) of ~, either there is no rule of the form(a:a', C) c R, or there is at least one rule (a:a', C) c R such that C contains a pair (LC,RC) such that LC matches P1 at the right end and RC matches P2 at the left end.A two-level morphological rule ((a,a'), C) coercively allows a symbol-pair se-quence G iff for every possible partition (P1, b:b t, P2) of ~ and every element (LC, RC)E C such that LC matches P1 at the right end, and RC matches P2 at the left end, if b= a, then b' = a'.An alternative but equally useful variation on the last definition would be that atwo-level morphological rule ((a,at), C) coercively disallows a symbol-pair sequenceiff there is a possible partition (P1, b:b', P2) of ~ and an element (LC, RC) E C suchthat LC matches P1 at the right end, RC matches P2 at the left end, b = a and b t # a'.48Graerne Ritchie Languages Generated by Two-Level Morphological Rules5.
Feasible PairsReal implementations of two-level morphology have to consider the issue of whatcounts as a feasible pair within a two-level grammar.
Roughly speaking, the set offeasible pairs is the set of symbol-pairs that have to be considered as potential elementsof symbol-pair sequences.
The normal approach isnot to allow the whole cross-productA x A' as possible symbol pairs, but to define a subset of this as being the effectivealphabet under consideration.
This is normally done in three ways:?
Any symbol a that appears in both the lexical alphabet and the surfacealphabet gives rise to a feasible pair a'a.?
Any symbol-pair that is explicitly mentioned in a context-expressionanywhere in a rule is feasible.?
Any symbol-pair that is explicitly declared to be feasible (in a listsupplied along with the rules) is feasible.The set of feasible pairs is then used in two ways--any variables or sets occurring inthe statement of rules are deemed to range only over feasible pairs, not over arbitrarysymbol-pairs; also, any feasible pair may occur freely in a symbol-pair sequence if nototherwise constrained by the rules of the grammar.It can be seen that these definitions and conventions are to some extent bound upwith the concrete textual representation f rules, and the way of stating symbolicallythe contents of the grammar.
At the set-theoretic level of abstraction here, a slightlydifferent (but compatible) set of definitions is necessary.
We are assuming that novariables or symbol-set-mnemonics appear in our rules, so the question of using thefeasible pair set to expand or give meaning to such abbreviations i  irrelevant, butthere is still the question of freedom of occurrence.The notion of implicit definition of feasibility can be altered so that instead ofreferring to occurrence within a context-expression, it refers to occurrence with a set(for regular sets specified using disjunction, concatenation a d indefinite iteration, thetwo are equivalent).
Explicit listing of additional feasible pairs can be represented byincluding context restriction rules of the form{ ({ },{where c denotes the empty sequence.
A trivial rule like this allows the symbol-pairto occur freely, since any adjacent material will match the empty string.
(The exactdefinition of matching is important here---matching the empty string or sequencemeans that there is some partition of the surrounding string in which the portionof the partition ext to the symbol-pair of interest is the empty sequence; it does notmean that there are no adjacent symbol-pairs).That is, no extra mechanism is needed for adding feasible pairs--what would ap-pear in a practical implementation as a declaration ofan enumerated list can be viewedas a convention for defining rather degenerate context restriction rules.
The point isthat the original textually-based definitions of feasibility are merely a notational con-venience for conveying (to the human reader or a software interpreter/compiler) aset of symbol-pairs that includes at least the pairs from the contexts (and the identitypairs), and we shall abstractly regard that set as being part of the definition of thegrammar, egardless of the notation used to make it manifest.49Computational Linguistics Volume 18, Number 1A symbol-pair a:a' is said to be a string-constituent in a set 0 of symbol-pairsequences if there is at least one element s C 0 such that a:a ~ is an element of thesequence s.A symbol-pair a:a ~ is said to occur in a rule (b:b p, C) iff either a:a' = b:b' or for atleast one element (LC, RC) of C, a:a' is a string-constituent i  at least one of LC andRC.Given two alphabets A and N,  a two-level morphological grammar based onA and A' consists of a pair (CR, SC) where CR and SC are finite sets of two-levelmorphological rules over A and N .
(The two sets of rules are the context restriction andsurface coercion rules respectively).
Given such a two-level morphological grammarR = (CR, SC), the set of feasible pairs in R is the set of symbol-pairs:{a : a' \] a : a' occurs in some element of CR U SC} U {a : a I a C A n A'}A two-level morphological grammar is said to be regular if all the rules in it areregular.6.
Languages GeneratedGiven a two-level morphological grammar R = (CR, SC), a symbol-pair sequence E isgenerated by R iff all the following hold:1. all the symbol-pairs in ~ are feasible pairs in R;2. each rule in SC coercively allows E;3. the set CR of rules contextually allows E.As mentioned earlier, the two classes of rules are treated slightly differentlymsurface coercion rules are conjoined, forming a set of constraints all of which must bemet, and the context restriction rules for a given symbol pair are disjoined, giving aset of possible licensing contexts.
If no rules apply to a particular symbol-pair, it isacceptable if and only if it is feasible.With the above definitions, it is now possible to ask what sorts of symbol-pairlanguages can be characterized using a two-level morphological grammar.Lemma 1Let CR be a set of two-level morphological rules.
Let E1 and E2 be symbol-pair se-quences uch that CR contextually allows El, and CR contextually allows E2.
Then CRcontextually allows the concatenation EIE2.ProofLet a:a ~ be a symbol-pair occurring in EIE2, such that (P1, a:a',P2) is a partition ofE1E2.
Assume, without loss of generality, that a:a t occurs in El.
That is, P1 is a properinitial subsequence of E1 and/32 = $2E2 for some sequence $2.
Since CR contextuallyallows El, for the partition (P1, a:a', $2) of E1 there is at least one rule C in CR thatcontains at least one context-pair (LC, RC) such that LC matches P1 at the right endand RC matches $2 at the left end.
If RC matches $2 at the left end, then RC will alsomatch $2E2 = P2 at the left end.
Hence, for the partition (P1, a:a', P2) of E1E2 there isat least one rule C in CR that contains at least one context-pair (LC, RC) such that LCmatches P1 at the right end and RC matches P2 at the left end.
A similar argumentcan be given for the occurrence of a:a' being in E2.
Since this will be true for any sucha:a ~ in EIE2, CR contextually allows E1E2.
?50Graerne Ritchie Languages Generated by Two-Level Morphological RulesCorollaryIf a two-level grammar is of the form (CR, 0) (i.e.
it contains no surface coercion rules),then the concatenation of any two strings in its language is also in its language.Lemma 2Let R = (a:a', C) be a two-level morphological rule.
Let E~, E2, E3 be symbol-pairsequences such that E1E2E3 is coercively allowed by R. Then E2 is coercively allowedby R.ProofIf E2 were not coercively allowed by R, it would mean that there is a partition ($1, a:b,$2) of E2 such that for some (LC, RC) in C, LC matches $1 at the right end, RC matches$2 at the left end, and b~ a'.
If this were the case, there would be a correspondingpartition (E1S1, a:b, $2E3) of E1E2E3, with LC matching E1S1 at the right end, andRC matching $2E3 at the left end.
This would (by definition) mean that R does notcoercively allow E1E2E3, which is not the case by hypothesis.
?Corollary (a)Let C be a set of two-level morphological rules, all of which coercively allow a symbol-pair sequence E. Then all of the rules in C coercively allow any subsequence of E.Corollary (b)If all the context restriction rules in a two-level morphological grammar are trivial, inthe sense of having vacuous contexts (see Section 5 above), then any substring of anelement of its language is also in the language.Lemma 3 (The Concatenation Property)Let G be a two-level morphological grammar (CR, SC), and let L(G) be the set ofsymbol-pair sequences generated by G. Suppose that there are sequences El, E2, E3,E4 such that E2 E L(G), E3 E L(G), and E1E2EBE4 c L(G).
Then E2E3 ~ L(G).Proof(i)(ii)Since E1E2E3E4 C L(G), all the symbol-pairs in it are feasible with respectto G, hence all the symbol-pairs in E2E3 are feasible.Since E2 and E3 c L(G), it follows that CR contextually allows E2 and E3(by definition).
By Lemma 1 above, this means that CR contextuallyallows E2E3.
(iii) Since E1E2E3E4 E L(G), it follows (by definition) that all of the rules inSC coercively allow E1E2E3E4.
Hence, by Corollary (a) to Lemma 2above, all of the rules in SC coercively allow E2E3.This establishes the three defining conditions for E2E3 c L(G).
?7.
Comparison with TransducersAs mentioned in the introduction, two-level grammars have historically been writtenin two different ways--as rules as defined here, and as sets of finite-state transduc-ers.
In the latter case, each transducer deals with some linguistic phenomenon, and a51Computational Linguistics Volume 18, Number 1sequence of symbol-pairs i generated by the grammar if every transducer in the gram-mar accepts it.
That is, the symbol-pair sequence must be in the intersection f the lan-guages accepted by the transducers (viewed as acceptors); in procedural terms, this isoften referred to as "having the transducers executed in parallel."
Hence, when work-ing with the transducer formalism the linguist has to devise independent transducerswhose intersection is the required language.
These transducers, like the two-level rules,define a mapping between equal-length symbol sequences, as described earlier; thereare no "empty transitions."
Under these conditions, since the intersection of a set ofregular languages is also a regular language, it follows that these parallel finite-stateacceptors define exactly the regular sets of symbol-pair sequences.As observed earlier, Kaplan's work on regular relations shows that the "paralleltransducer" model is at least as powerful as the two-level grammar model definedearlier.
The obvious question is whether there is a difference in power; in fact, thereis:Theorem 1There are regular sets of symbol-pair sequences (i.e.
symbol-pair languages character-ized by regular expressions of symbol-pairs) that cannot be generated by any two-levelmorphological grammar.ProofThis follows directly from Lemma 3 above.
Any language L generated by a two-levelmorphological grammar must have the property that if E2, E3, and EIE2E3E4 C L, thenE2E3 E L. There are regular symbol-pair languages that do not have this property, suchas the language defined by the regular expressionb:bV (a:a b:b)*which contains b : b and a: a b : b but not b : b a: a b : b, even though that sequence isa subsequence of other' elements of the language.
?It was already clear that there are some regular relations that cannot be generatedby a two-level grammar, since a regular relation can put into correspondence symbol-sequences of different lengths; what the above result shows is that there are someequal-length regular elations that cannot be generated by any two-level grammar.
Thatis, we have the following proper inclusions:languages generated by regular two-level morphological grammarsc regular sets of symbol-pair sequencesc regular relationsThere is another, rather trivial, difference between the power of two-level morpholog-ical rules and arbitrary regular expressions.
According to the definitions given here,the empty sequence of symbol-pairs is in every language generated by a two-levelmorphological grammar, since it conforms to the definition regardless of the contentof the rules.
The definitions could be altered to exclude the empty sequence from ev-ery language, but it is hard to see how the rule mechanism could be used to allow theempty sequence in some languages but not others.52Graeme Ritchie Languages Generated by Two-Level Morphological Rules8.
Another Type of RuleKarttunen et al (1987) allow a further ule operator/<= in their rules.
A rule of theforma:b /<= LC - - -  RCmeans, informally, that the pair a:b must not occur if the contexts LC and RC arepresent.
It would be straightforward to extend the definition of a two-level morpho-logical grammar to cover this symbol.
What would be needed would be to allow agrammar to be a triple (CR, SC, CE) in which CR and SC are as before, but CE is aset of context exclusion rules of this new sort.
The applicability of such rules couldbe defined thus:A symbol-pair sequence E is contextually excluded by a rule (a:b, C)if there is a partition ($1, a:b, $2) of ~ and some context-pair (LC, RC)E C such that LC matches $1 at the right end and RC matches $2 atthe left end.The definition of generation of a sequence E by a grammar (CR, SC, CE) would haveto be amended to include the additional stipulation (see Section 6 above):4. no rule in CE contextually excludes ~.Inclusion of this type of context exclusion rule does not affect he proof of Lemmas1 and 2, or their corollaries, and the Concatenation Property (Lemma 3) can still beproven since the following lemma can be proven by a very simple modification to theproof for Lemma 2 :Lemma 4Let R = (a:a', C) be a two-level morphological rule.
Let El, E2, E3 be symbol-pair se-quences uch that E1E2E3 is not contextually excluded by R. Then E2 is not contextuallyexcluded by R.Hence, the use of context exclusion rules does not affect any of the results aboutgenerative power given earlier, or the lack of closure demonstrated in Section 11 below.David Weir (personal communication) has pointed out that the use of context ex-clusion rules makes urface coercion rules technically redundant, since any stipulationof surface coercion can be restated as a set of context exclusion rules.9.
Boundary MarkersThe two-level formalism, as defined above (and as originally defined by Koskenniemi)has no word-boundary s mbol to mark the end of a sequence of symbols.
Althoughthe linguist is free to introduce any symbols that seem empirically useful, none of thesesymbols has any specially defined status beyond what the linguist chooses to state inthe actual twoqevel morphological grammar, and the apparatus does not stipulatethat a particular symbol occurs only at the start or end of a complete string.
The53Computational Linguistics Volume 18, Number 1PC-KIMMO implementation f two-level morphology (Antworth 1990) has a specialboundary marker "#" with the following properties:1.
# can appear in both the lexical and the surface component of asymbol-pair.2.
# can be paired only with itself, not with any other symbol.3.
The pair #:# occurs at the extreme nds of every string.4.
The pair #:# never occurs at any internal position of a string.5.
Any two-level rule may refer to the pair #:#, thereby makingphenomena it describes relative to the end of the sequence.6.
The symbol-pair #:# is not regarded as part of the sequence generated;that is, the rules characterize an extended string with #:# at each end,but the generated sequence is defined to be the sequence withoutboundary markers.It would be possible, with careful design of the two-level rules, to enforce points 1-5without resorting to special treatment for #:#, but point 6 steps outside the two-levelmechanism; a grammar that merely enforced 1-5 using its rules would, according tothe basic definitions of generation, have in its language strings that contained #:# (atthe ends).
Karttunen et al (1987) also allow a lexical boundary marker #, such thatthe symbol-pair #: 0 meets points 3, 4, and 5 above (which can be achieved by writingsuitable two-level rules without any need for special treatment).
However, they do notneed to rely on the additional stipulation given in 6, since the use of a surface nullwill give the desired effect when considering the entire mapping from lexical formsto surface form, with explicit null symbols being removed in the manner outlined inSection 2 above (see Ritchie 1989 for a formal definition of this phase).We can show that the inclusion of a specially treated boundary symbol slightlyalters the generative power of the formalism, since this allows any set that can beincluded as a context set to constitute the entire language, as follows.Given two sets A and N, a symbol rx E A, a symbol fl c N,  and a two-levelmorphological grammar G based on alphabets A and A ~, then a symbol-pair sequenceE (A x A~) * is said to be generated by G with boundary a:fl iff1.
~:fl does not occur anywhere in2.
~:fl G a:fl is generated by G.Notice that under this definition, a sequence ~ may well be "generated by G withboundary c~:fl" even though G itself is not generated by G.Theorem 2Let A and A ~ be sets of symbols, let ~ be some symbol not in A, fl some symbol notin A ~ and let L be some set of symbol-pair sequences from A x AE Then there is atwo-level morphological grammar G based on A U { (~ } and A' U { fl } such thatL -- {G I G generates G with boundary rx : fl}54Graeme Ritchie Languages Generated by Two-Level Morphological RulesProofConsider the two-level grammar (written in the usual textual notation):(~ : fl =~ - - -  Ca : f lo rs : t iC  - - -where C is some expression denoting the set L (in the usual notation based on regularsets, C would be a regular expression).
More formally, this grammar G (= (CR, SC))could be written set-theoretically as({(~: fl,{({e},L1)(L2,(e})})},O)where L1 is the set consisting of all possible concatenations of elements of L with a:fl,and L2 is the set consisting of all possible concatenations of c~:fl with elements of L.It is straightforward to verify that this grammar generates all and only strings ofthe form o~:flGc~:fl for ~ E L. ?This theorem may sound rather odd, since it implies that any set whatsoever canbe generated in this manner (in contrast to the earlier esult that there are some regularlanguages of symbol-pairs that cannot be generated by two-level rules).
However, it isimportant to note that this theorem not only uses a special boundary symbol, it relieson the generalization of the usual regular-set based two-level rules to rules that allowany set as a context set.
Essentially it says that, with the augmentation of a specialboundary symbol, the generative power is limited only by the limits placed on theclass of sets that can appear as contexts.
A more useful and natural specialization ofthis theorem is as follows:CorollaryFor any regular set L of symbol-pair sequences, there is a regular two-level morpho-logical grammar that generates L with boundary ~:fl, for some symbols c~, fl that arenot in the alphabets used for L.10.
Normal FormWe define a two-level morphological grammar as being in normal form if there is nosymbol-pair that is the subject of more than one context restriction rule or more thanone surface coercion rule.
More formally, a grammar (CR, SC) is said to be in normalform iff whenever (a:b, C) c CR and (a:b, C ~) E CR, C = C', and whenever (a:b, C) cSC and (a:b, C') E SC, C --- C'.Theorem 3For any two-level morphological grammar G, there is a corresponding two-level mor-phological grammar G' in normal form that generates the same symbol-pair language.ProofSuppose G = (CR, SC) is not in normal form.
Create the grammar G' = (CR', SC') asfollows.
If there is exactly one rule (a:b, C) in CR for the symbol-pair a:b, include thatrule in CRL For any set of two or more rules in CR with the same symbol-pair a : b(a : b, C1), .
.
.
.
,  (a  : b, G)55Computational Linguistics Volume 18, Number 1include in CR' a rule:(a : b, C1 U C2... Cn).Create SC from SC in exactly the same way.
It should be clear from this that (a) anysymbol-pair a:b occurs in the rules in G iff it occurs in the rules in G'; (b) any pair ofcontext sets (LC, RC) appears in a rule in CR iff it appears in a rule in CR' with thesame symbol-pair; (c) any pair of context sets (LC, RC) appears in a rule in SC iff itappears in a rule in SC' with the same symbol-pair.It is straightforward to prove the equivalence for G and G' of the three definingcriteria for language membership.
?11.
Closure PropertiesMost classes of formal anguages (e.g.
regular languages, context-free languages) areclosed under at least some of the simple set-theoretic operations such as union andintersection.
Certain results can be proved for two-level morphological languages con-cerning their closure (or lack of it).Theorem 4The set of languages generated by two-level morphological grammars i  not closedunder union.ProofThe proof follows from the "concatenation property" of Lemma 3 above, which allowsa simple counterexample to be constructed.
Consider the grammar G1 which wouldconventionally be written asb:b =>(if we follow the normal practice of omitting textually any context set containing onlythe empty sequence).
This generates the language (b : b)*; that is,{ ?, b:b, b:b b:b, ...}The grammar G2 given by the rulesb:b => a:aa:a  => b:b(again, omitting mention of contexts that are trivially satisfiable) generates the lan-guage (a:a b:b)*:e, a:a b:b, a:a b:b a:a b:b, ...The union of these languages contains the sequencesb:b  a :a  b :b  a :a  b :b  a :a  b :b56Graeme Ritchie Languages Generated by Two-Level Morphological Rulesbut does not contain the sequenceb:b a:a  b:band hence, by Lemma 3, cannot be a language generated by a two-level language.
?The following result and construction are due to David Weir (personal communi-cation).Theorem 5The set of languages generated by two-level morphological grammars is closed underintersection.ProofLet L1 and L2 be two-level morphological languages, generated by the grammarsGI=(CR1, SC1) and G2=(CR2, SC2) respectively.
It is possible to construct a two-levelgrammar for the intersection L = L1 N L2.
Without loss of generality, assume (merelyto simplify the construction):1.
For every rule in CR1 or CR2 of the form (P,C) let the set C contain justone pair of the form (LC,RC).
This assumes that the set of context-pairsin a rule is never an infinite set--see Section 4 above.
There can beseveral such rules for any given symbol-pair P (i.e.
we have to allow thegrammar to be not in the "normal form" defined in Section 10 above).Note that we do not need to make this assumption for the rules in SC1and SC2.2.
For every pair a : b that is a feasible pair in both G1 and G2 there is atleast one rule in CR1 and CR2 for the symbol pair a : b.
In the absence ofany other rule include (a : b, ({~}, {~})).Suppose that ?
is the set of symbol-pairs that are feasible in both G1 and G2, sothat ~* is the set of sequences of such symbol-pairs.To create the context restriction rules for the intersection grammar G, takeCR = CR' U CR"where CR' is defined to be:((p, {((I)*LC1 N c~*LC2, RClC~ *f"l RC2(I)*)}) I(p~ {(LCI~RC1)}) E CRI~ and (p~ {(LC2~RC2)}) E ca2}and CR" is defined as:{(a : b, {({a' : a'}, c)} \[ a : b is feasible in exactly one of G1 and G2}where a' is a new symbol that is not in a feasible pair in either G1 or G2.The set SC' defined below has the effect of making the context a' : a' unobtainable.Hence, the above rule makes each a : b that is not feasible in both grammars behaveas if it were not feasible in the new grammar.
There will be no symbol-pair that isthe subject of a rule in CR' and in CR", since the first of these sets covers the jointlyfeasible pairs and the latter handles others.57Computational Linguistics Volume 18, Number 1To construct the surface coercion rules for the intersection grammar G useSC = SC1 U SC2 U SC'where SC ~ is defined as follows:SC' : {(a': a', (({c}, {e})})~ (a': a, (({~}, (?
})})}where a' is as above and a is an arbitrary symbol other than a'.There is then a fairly straightforward proof that this grammar characterizes asymbol-pair sequence if and only if that sequence is in L(G1) rl L(G2).
The only slightlycomplicated step involves the proof that if an occurrence of a symbol-pair matches arule in CR1, and also matches a rules in CR2, it must match a rule in CR (in CR', infact).
The argument goes as follows.
If a partition (S, a: b, S r) is contextually allowedby original rules (a : b, {(LC1,RC1)}) and (a : b, {(LC2~RC2)}), then it follows from thedefinitions in Section 4 above that there is a P1 at the right end of S that is in LC1,and a P2 at the right end of S that is in LC2.
Hence S ~-- ~*LC1, and S E ~*LC2.
Hencethere is a string (namely S) that is at the right end of S and is in ~*LCI N c~*LC2 (andsimilarly for the right contexts).
?Corollary (a)The set of regular two-level morphological languages is closed under intersection.ProofThe above construction uses combinations that yield regular sets from regular sets.Hence if G1 and G2 are regular two-level morphological grammars, so is G. ?Corollary (b)The set of two-level morphological languages i  not closed under complementation.ProofFollows directly from Theorem 4 and Theorem 5, sinceA UB = (A' riB')'(a direct counter-example can also be constructed using Lemma 3).
?12.
The Next Stage--Compilation and ComplexityThe above results define more clearly the family of two-level anguages, but theysay nothing about mechanisms for recognizing strings of symbol-pairs, nor how suchrecognition can be integrated with a lexicon of symbol-strings.
There are at least twomethods of compilation and subsequent interpretation for regular two-level grammars(i.e.
those whose context sets can be written as regular expressions, which is the nor-mal practice), both of which rely heavily on finite-state transducers in their compiledform.
Karttunen et al (1987) produce an intersecting set of traditional transducers,and the recognition process is then a straightforward interpretation of the equivalentcombined automaton.
Ritchie et al (1991) compile rules into a slightly peculiar form oftransducer, in which states are marked to indicate different processing requirements;a nonstandard interpreter then scans the resulting annotated automaton.
There are no58Graeme Ritchie Languages Generated by Two-Level Morphological Rulespublished proofs of correctness of either mechanism, but Karttunen et al's exposi-tion relies heavily on Kaplan's work on regular elations (see Section 3 above), whichappears to justify its procedures.The usual assumed interface to a lexicon (e.g.
Koskenniemi 1983a, 1983b; Karttunen1983) is via sublexicons for different lexeme classes, with cross-pointers indicating al-lowable sequences of lexemes (a formal definition of this can be found in Ritchie 1989).Another possibility is to impose a wholly separate rule-driven layer of morphotacticdescription upon the lexical forms; this approach is coupled with a two-level systemin Ritchie et al (1991).The complexity of the problem of recognizing a string of symbols using the paralleltransducer formulation of two-level morphology with a single (or cross-linked) lexiconhas been shown to be NP-complete by Barton et al (1987), and Ritchie et al (1991)suggest hat the proof of NP-hardness could be modified to cover the recognitionproblem for the definition of two-level rules given here (and a single lexicon), butexact complexity or decidability results for the compilation/interpretation pr cedureof Ritchie et al (1991) have not been produced, nor is there any characterization f thecomplexity of determining whether asequence of symbol-pairs belongs to the languagegenerated by a two-level language (without regard for the lexical segmentation issue).All these issues lie outside the scope of this paper, but it would be desirable forthem to be settled.AcknowledgmentsI would like to thank Alan Black, RonKaplan, and David Weir for usefuldiscussions of this material.ReferencesAntworth, Evan L. (1990).
PC-KIMMO : ATwo-Level Processor for MorphologicalAnalysis.
Occasional Publications inAcademic Computing No.
16, SummerInstitute of Linguistics, Dallas, TX.Barton, G. Edward; Berwick, Robert C.; andRistad, Eric Sven (1987).
ComputationalComplexity and Natural Language.Cambridge: The MIT Press.Dalrymple, Mary; Doron, Edit; Goggin,John; Goodman, Beverley; and McCarthy,John (eds.)
(1983).
Texas Linguistic Forum22, Department ofLinguistics, Universityof Texas at Austin.Kaplan, Ronald M. (1988).
"Regular modelsof phonological rule systems."
Talk onfinite-state ransducers given at the AlveyWorkshop on Parsing and PatternRecognition, Oxford.Karttunen, Lauri (1983).
"KIMMO: Ageneral morphological nalyser."
In TexasLinguistic Forum 22, edited byM.
Dalrymple, E. Doran, J. Goggin,B.
Goodman, and J. McCarthy: 165-186.Karttunen, Lauri; Koskenniemi, Kimmo;and Kaplan, Ronald M. (1987).
"Acompiler for two-level phonologicalrules."
Unpublished manuscript.Koskenniemi, Kimmo (1983a).
Two-levelMorphology: a General Computational modelfor Word-Form Recognition and Production.Publication No.
11, University of Helsinki,Finland.Koskenniemi, Kimmo (1983b).
"Two-levelmodel for morphological nalysis."
InProceedings, Eighth International JointConference on Artificial Intelligence,Karlsruhe: 683-685.Koskenniemi, Kimmo (1984).
"A generalcomputational model for word-formrecognition and production."
InProceedings, lOth International Conference onComputational Linguistics/22nd AnnualMeeting of the ACL, Stanford, CA: 178-181.Koskenniemi, Kimmo (1985).
"Compilationof automata from morphologicaltwo-level rules."
Papers from the FifthScandinavian Conference ofComputationalLinguistics, Helsinki, Finland: 143-149.Ritchie, Graeme (1989).
"On the generativepower of two-level morphological rules.
"In Proceedings, Fourth Conference oftheEuropean Chapter of the Association forComputational Linguistics, Manchester:51-57.Ritchie, Graeme D.; Pulman, Stephen G.;Black, Alan W.; and Russell, Graham J.(1987).
"A computational framework forlexical description."
ComputationalLinguistics 13 (3-4):290-307.Ritchie, Graeme D.; Russell, Graham J.;Black, Alan W.; and Pulman, Stephen G.(1991).
Computational Morphology.Cambridge: The MIT Press.59
