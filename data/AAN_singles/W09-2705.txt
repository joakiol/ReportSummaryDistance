Proceedings of the 2009 Workshop on Knowledge and Reasoning for Answering Questions, ACL-IJCNLP 2009, pages 19?23,Suntec, Singapore, 6 August 2009.c?2009 ACL and AFNLPAddressing How-to Questions using a Spoken Dialogue System:a Viable Approach?Silvia QuarteroniUniversity of Trento38050 Povo (Trento), Italysilviaq@disi.unitn.itPatrick Saint-DizierIRITToulouse, Francestdizier@irit.frAbstractIn this document, we illustrate how com-plex questions such as procedural (how-to)ones can be addressed in an interactive for-mat by means of a spoken dialogue sys-tem.
The advantages of interactivity andin particular of spoken dialogue with re-spect to standard Question Answering set-tings are numerous.
First, addressing userneeds that do not necessarily arise in frontof a computer; moreover, a spoken or mul-timodal answer format can often be bet-ter suited to the user?s need.
Finally, theprocedural nature of the information itselfmakes iterative question formulation andanswer production particularly appealing.1 IntroductionQuestion answering (QA) is nowadays an estab-lished technology, advancing information retrievalto the point of allowing queries to be formulatedin natural language and to return actual answers(in the form of sentences/phrases).While the first QA systems (Simmons, 1965)mainly dealt with factoid questions, i.e.
ques-tions about names, dates and all that can be re-duced to a fact, a number of systems in the lastdecade have appeared with the aim of addressingnon-factoid questions (Voorhees, 2003).
In par-ticular, the problem of addressing definition ques-tions has received great attention from the researchcommunity (Chen et al, 2006; Moschitti et al,2007), while less research has been conducted sofar on other types of non-factoid QA, such as why-questions (Verberne et al, 2007; Pechsiri et al,2008) and procedural (also called how-to) ques-tions (Yin, 2006; Delpech and Saint-Dizier, 2008).Another recent trend in QA is interactivity, i.e.the use of a dialogue interface to better supportthe user, e.g.
by resolving anaphoric and ellipticexpressions in his/her queries (Webb and Strza-lkowski, 2006).
Indeed, the dialogue communityhas been addressing the problem of informationseeking for decades, often with very satisfyingcommercial products able to interact not only intext but especially via spoken interfaces (Gupta etal., 2006; Traum, 1996).
However, also in thisfield the information retrieval task has mainly fo-cused on a limited domain (travel planning, tele-com rates) and on returning database values ratherthan cooperatively solving problems or providingcomplex information.In this paper, we focus on handling proceduralquestions, not as commonly researched as defini-tional QA but for which a number of resourcesare available on the Web.
Indeed, although por-tals dedicated to how-to questions exist (eHow.com), where stereotyped questions are presentedtogether with a few responses, QA would allow abroader approach to intelligently respond to how-to questions.Our main claim is that joining the existing QAtechnology for complex procedural questions withthe potentials of spoken conversation would pro-vide an excellent testbed for the integration ofthese two technologies.
Indeed, understanding andanswering procedural questions requires a highlevel of cooperation between the user and the sys-tem: a procedure is a complex answer to returnand would better be provided and received step bystep than ?dumped?
in a text-to-speech generatoror a text file.In the rest of this document, we outline the mainfeatures of procedural QA and the approach wepropose to address it via dialogue.
We illustratethe potentials of our approach with two use casesof different complexity.2 Procedural Question AnsweringProcedural text contains not only step-by-step in-structions, but also additional content such as19warnings, recommendations and advice.
Due tothe argumentative nature of such text, proceduralQA is a complex task.
Indeed, the main challegesoffered by procedural QA can be summarized as:1.
Acquiring procedural data:?
(automatically) obtaining the data, filter-ing out text with little procedural con-tent;?
tagging relevant structures in procedures(such as warnings, advice, step-wise in-structions);?
efficiently indexing texts based on theirtitle and content;2.
Answering procedural questions:?
recognizing and interpreting procedu-ral questions (question classification andanalysis);?
pinpointing answer passages (answer re-trieval);?
generating answers to procedural ques-tions and supporting interaction span-ning over more than one Q/A pair, suchas step-by-step procedural descriptions.To our knowledge, little extensive work existsin this field; an example is the TextCoop project(Delpech and Saint-Dizier, 2008) that produced aprocedural tagger able to recognize and segmentthe main units found in French procedural text (ti-tles, instructions, prerequisites, warnings and ad-vice) via an ad hoc markup convention (see Table1).
In addition, QA technology was used for theresolution of elliptic titles and their indexing foranswer matching (titles often express goals).Although automatic procedure tagging andanalysis appears as a necessary step towards an ef-ficient treatment of procedural questions, we arguethat an accurate choice of the format and modalityin which their answers are returned would be a vi-tal advantage.
In particular, we propose to returnthe response to a procedural QA under the formof oral instructions rather than text to read.
In-deed, besides the advantages of oral communica-tion in terms of expressiveness, the latter solutionmay be inappropriate in some situations such aswhen walking around or driving.In Section 3, we discuss our dialogue-based ap-proach to procedural QA.3 Dialogue-based Procedural QAWe believe that the integration of QA researchwith a Spoken Dialogue System (SDS) is apromising approach to procedural Question An-swering.
Indeed, work on procedural QA so faraccounts for the textual structures of written docu-ments; since procedural texts are in general highlyinteractive, it is clear that the pairing with a spo-ken dialogue system is of much interest.
In addi-tion, a spoken interface enables to go far beyond amere enumeration of instructions (as found in Webpages), achieving cooperation between the serviceprovider (SDS) and the user.A first step towards this is the (automatic orsemi-automatic) annotation of procedural texts viaan ad hoc markup in order to distinguish sub-texts that can yield to dialogues, such as conditions(texts containing ?if you are under 20 .
.
.
?, ?if youare aged between .
.
.
?
may be translated in thequestion: ?how old are you??).
Similarly, in warn-ings, terms bearing the illocutionary force (?Re-member?, ?Caution?, ?Notice?)
can be marked inorder to be stressed.During system execution, instructions can be ut-tered one after the other, waiting for an acknowl-edgement from the user, but the system can alsoprovide more information about the task at handupon request.
Moreover, the system can providealternative solutions when users have trouble car-rying out an instruction (?I cannot pay by creditcard?
), or make an instruction more explicit bysplitting it into simpler ones (automatically gen-erating another how-to question for the subgoal athand).Finally, in addition to speech and dialogue, mul-timodal aspects of interactivity can be consid-ered, such as displaying a map when providing anitinerary, or a 3D picture related to an instruction.Translating a procedural text into speech is achallenge that requires intensive NLP processing,a strong and accurate domain model and an abilityfor reasoning.
In order to address this challenge,we propose the following approach:1.
Obtain domain-related data from the Web;2.
Represent domain knowledge and reasoning.While most of the factual knowledge of a do-main can be captured by means of an en-riched ontology, other types of knowledge(know-how, domain constraints, etc.)
and20reasoning procedures need to be defined onother grounds, optionally manually;3.
Devise a Dialogue Manager able to interactabout procedural information using markupin the procedural data representation;4.
Define how the procedural data representa-tion can be rendered by a Natural LanguageGenerator;5.
Use existing technology for AutomaticSpeech Recognition and Text-To-Speech.Evidently, the difficulty of answering procedu-ral questions via dialogue varies depending on theavailability and format of answers.
We distinguishbetween two types of questions:Type 1: a procedural text corresponding to thequestion is already available on the Web; inthis case, the user?s query can be answeredby tagging such text using a tagger such asTextCoop and enriching it with dialogic andprosodic markers to be rendered by an off-the-shelf TTS module;Type 2: there is no direct answer to the user?squery on the Web; for instance, the answermay be dependent on information which theuser has not yet provided.
In this case, thequery must first be formulated, and procedu-ral tagging/TTS intervene later.In Sections 4 and 5, we report two case stud-ies reflecting type 1 and type 2 situations, respec-tively: the first relates to the University helpdeskdomain, the second to the tourist advice domain.4 Text-to-Speech from a Web pageTo illustrate type 1 questions, we study a well-known domain, universities, where helpdesksmust provide various kinds of procedural informa-tion (dealing with e.g.
paperwork, student life andinfrastructure).Let us consider the question: ?Howto get a student card in Wolverhampton??.
In Fig.1, we report an extract of the top Web page ob-tained by typing such question into a search en-gine.
It can be noted that in this case, the topsearch engine result contains the procedural an-swer sought by the question, hence procedural tag-ging can be performed on the text.A possible procedural annotation has been(manually) applied to the same text in Figure 2,Figure 1: Extract from the top Web hit for: ?Howto get a student card in Wolverhampton??
(source:wlv.ac.uk)following the conventions used in the TexCooptagger (see Tab.
1) to denote the abilities of a pro-cedural tagger.
While some of the HTML objectsin the Webpage, such as title, headers and enumer-ations, are directly converted in their equivalenttags (item, subtitle), additional markup ap-pears, such as warnings and prerequisites.Table 1: TextCoop procedural markup (extract)Label Exampletitle ?Get your student ID card?subtitle ?What you?ll need?cond ?if you are a UK student?objective ?in order to get your ID?instr ?Head to the Uni info service.
?prerequisite ?You?ll need 3 passport photos?warning ?Format MUST be passport!
?aim ?to get good photos?advice ?try the photobooth next to .
.
.
?At this point, using a dialogue system to sim-ply ?read out?
the above passage (even if splitinto their main components) would result in inef-fective, close-to intonation free speech.
Indeed,in order to provide instructions to the NaturalLanguage Generator and Text-to-Speech modulesof a dialogue system for verbalizing such text,dialogue-level markup must be added to the aboveprocedural annotation.In some cases, direct mapping rules can be de-vised to directly translate procedural markup intodialogue patterns.
For instance, step-by-step in-structions (item) contained in the itemize en-vironment can be rendered as a sequence of inform21<subtitle> Applying for an ID card </subtitle><inst-compound>When you receive a firm offer from the University,you can upload your photofor your student ID card, <warning> and you should do this as soon asyou can.
</warning></inst-compound><prerequisite> What you?ll need<itemize><item:1>Your student number, a seven-digit number which will be on youroffer letter < /item:1><item:2> A digital photo that meets the requirements outlined below< /item:2><item:3> Access to a computer with Internet access to send yourphoto to the University using the Photo Upload facility.< /item:3></itemize></prerequisite><inst-compound><cond> If you don?t have a digital photo or a com-puter with internet access, </cond> .
.
.Figure 2: Procedural annotation of a Web pagedialogue acts, expecting acknowledgments (ack)from the user.
In addition, conditions can be ren-dered as yes-no questions (?If you don?t have adigital photo?
becomes ask(digital photo));In other cases, such as verbalizing warnings andadvice, specific salient words should be markedwith prosodic information as to how to pronouncethem.
Specific lexical patters can be matched byrules to provide such annotations, such as ?Re-member?
or ?as soon as possible?.
Finally, part ofthe procedural annotation could be excluded fromthe dialog when redundant or implicit.
For in-stance, titles (title) could be skipped or men-tioned separately by the dialogue system (e.g.
?Would you like to hear about how to Get yourstudent ID card??
).Figure 3 illustrates the dialog act and prosodicannotation enriching the procedural one of Figure2.
Such generic markup can then me convertedin a specific commercial voice markup languages,e.g.
VXML or SALT, via simple rules.5 Integrating Scenarios and QABesides improving access to procedures via directinteractions by spoken dialogue, it is often neces-sary to interact with the user to get more preciseinformation about his query, so that the responsecan be accurate enough.
Furthermore, a numberof procedural questions do not get any direct re-sponse via Web queries.
This is the case of type2 questions, as introduced in Section 3.
There areseveral reasons to this situation.
First, a numberof these questions are both complex and very spe-cific.
Next, most of them involve various formsof reasoning and of elaboration.
Other questionsrequire the integration of several simpler proce-dures, e.g.
via concatenation.
Finally, others re-<subtitle> Applying for an ID card </subtitle><inst-compound> When you receive a firm offer from the University,you can upload your photo for your student ID card, <warning> andyou should do this < /prosody:emphasize> as soon as you can.< /prosody:emphasize></warning></inst-compound><prerequisite> What you?ll need<itemize><item:1> <dialog:inform-ack> Your student number, a seven-digit number which will be on your offer letter< /dialog:inform-ack>< /item:1><item:2> <dialog:inform-ack> A digital photo that meets the re-quirements outlined below < /dialog:inform-ack>< /item:2><item:3> <dialog:inform-ack> Access to a computer with Inter-net access to send your photo to the University using the Photo Upload facility.< /dialog:inform-ack>< /item:3></itemize></prerequisite><inst-compound><dialog:ask><cond> If you don?t have a dig-ital photo or a computer with internet access,</cond>< /dialog:ask>.
.
.Figure 3: Dialog act and prosodic annotation of aWeb pagequire a substantial adaptation of existing proce-dures: adaptation to a different context, general-izations (e.g.
knowing how to register in a uni-versity may lead to a generalization so that it isglobally acceptable for other universities).This is in particular the case for non-trivialitineraries.
For example, looking on the Web forways to go from Toulouse to Trento does not leadto any solution.
Search engines return partial andoften local information, e.g.
description of Veronaairport, train schedules going via Trento, etc.
Weneed in this case to define a very generic scenario,which is a procedure, of type ?travel?
and, for agiven trip, to construct the details from simplerprocedures or factual data available on the Web.To overcome these limitations and to be able tooffer a real QA service, we propose the followingapproach:?
Creating a general scenario, in our case foritinerary construction, involving dialogue toget necessary (departure/arrival location anddates, etc.)
and optional (budget, comfort,etc.)
information from the user.?
Including reasoning procedures and prefer-ences related to transportation: e.g.
it ispreferable to fly above a certain distance or ifthere are obstacles (sea, mountains), or elab-orate compromise between cost and trans-portation length.
Itinerary construction alsoinvolves a planner, that operates over anykind of transportation means, paired with anoptimizer.
The planner should be flexible sothat it can propose alternatives (e.g.
train or22renting a car, stops at different places) whilethe optimizer should take user preferencesinto account.?
Submitting queries to a search engine to getdetailed information on precise points: flightschedules, airport transportation, bus routes,etc.
Such queries are triggered by the differ-ent functions of the scenario to fill in infor-mation slots.
From search engine results, itis necessary to process the text segments sothat the correct information is found.
This in-cludes either getting precise data or selectinga text portion (e.g.
that describes services,schedules, etc.).?
Summarizing the information and generat-ing a response in natural language under theform of a procedure, possibly with schemas,maps, etc.
and then producing a vocal output.As shown above, parts of this scenario maybe vocal or multimedia.
As in most naturallanguage generation systems, this involves aplanner that operates of various types of inputdata (text, words, structured sequences of thescenarion) and a language generation compo-nent which, in this type of application, canbe based on predefined word sequences andgaps to be filled in for the query at stake.This approach has its roots in the frames andscripts of cognitive science and AI in the 70s(Schank and Abelson, 1977).
However, in ourcase we include a QA component to get informa-tion and a planner to construct the itinerary basedon the results of the queries which also outputsa procedure in natural language.
In addition, theproposed approach supports cooperative dialoguesand provides explanations to the user when thereis no direct answer to his request.6 PerspectivesWe have proposed a model of procedural QA sys-tem conducting cooperative spoken dialogue withthe user.
Indeed, we argue that the advantages ofspoken communication channel to address proce-dural QA are mainly twofold.
On the one hand,procedural information can be returned to the userin a more efficient way compared to the textualformat.
On the other hand, cooperative dialogueallows the system to understand and refine theuser?s information needs and to account for thecases when information is not directly available onthe Web.Our proposed approach has currently only beenvalidated through case studies and a long processis required in order to achieve spoken proceduralQA.
However, we believe that using existing re-sources to address procedural information, such asprocedural taggers, as well as state-of-the art QAand spoken dialogue technology, fulfilling our ob-jectives is a feasible task.ReferencesY.
Chen, M. Zhou, and S. Wang.
2006.
Reranking an-swers from definitional QA using language models.In Proc.
ACL.E.
Delpech and P. Saint-Dizier.
2008.
Investigating thestructure of procedural texts for answering how-toquestions.
In Proc.
LREC.N.
Gupta, G. Tur, D. Hakkani-tur, G. Riccardi, S. Ban-galore, M. Rahim, and M Gilbert.
2006.
The AT&Tspoken language understanding system.
IEEE trans-actions on speech and audio, 14:213?222.A.
Moschitti, S. Quarteroni, R. Basili, and S. Man-andhar.
2007.
Exploiting syntactic and shallow se-mantic kernels for question/answer classification.
InProc.
ACL.C.
Pechsiri, P. Sroison, and U. Janviriyasopa.
2008.Know-why extraction from textual data.
In Proc.KRAQ.R.
C. Schank and R. P. Abelson.
1977.
Scripts, plans,goals, and understanding: An inquiry into humanknowledge structures.
Erlbaum.R.
F. Simmons.
1965.
Answering english questions bycomputer: a survey.
Comm.
ACM, 8(1):53?70.D.
Traum.
1996.
Dialogue management in conversa-tional agency: The TRAINS-93 dialogue manager.In Proc.
TWLT, pages 1?11.S.
Verberne, L. Boves, N. Oostdijk, and P. Coppen.2007.
Evaluating discourse-based answer extractionfor why-question answering.
In Proc.
SIGIR, pages735?737.E.
M. Voorhees.
2003.
Overview of TREC 2003.
InProc.
TREC.N.
Webb and T. Strzalkowski, editors.
2006.
Proc.HLT-NAACL Workshop on Interactive Question An-swering.L.
Yin.
2006.
A two-stage approach to retrieving an-swers for how-to questions.
In Proc.
EACL (StudentSession).23
