An At t r ibut ive  Logic of  Set  Descr ip t ionsSet  Operat ionsSuresh  ManandharHCRC Language Technology GroupThe University of Edinburgh2 Buccleuch P laceEd inburgh  EH8 9LW, UKInternet:  Suresh .
Manandhar@ed.
ac .
ukandAbst ractThis paper provides amodel theoretic semantics to fea-ture terms augmented with set descriptions.
We pro-vide constraints o specify HPSG style set descriptions,fixed cardinality set descriptions, et-membership con-straints, restricted universal role quantifications, etunion, intersection, subset and disjointness.
A sound,complete and terminating consistency checking proce-dure is provided to determine the consistency of anygiven term in the logic.
It is shown that determiningconsistency of terms is a NP-complete problem.Subject  Areas: feature logic, constraint-based gram-mars, HPSG1 I n t roduct ionGrammatical formalisms such as HPSG\[Pollard and Sag, 1987\] \[Pollard and Sag, 1992\] andLFG \[Kaplan and Bresnan, 1982\] employ feature de-scriptions \[Kasper and Rounds, 1986\] \[Smolka, 1992\]as the primary means for stating linguistic theories.However the descriptive machinery employed by theseformalisms easily exceed the descriptive machineryavailable in feature logic \[Smolka, 1992\].
Furthermorethe descriptive machinery employed by both HPSGand LFG is difficult (if not impossible) to state in fea-ture based formalisms uch as ALE \[Carpenter, 1993\],TFS \[Zajac, 1992\] and CUF \[D6rre and Dorna, 1993\]which augment feature logic with a type system.One such expressive device employed both withinLFG \[Kaplan and Bresnan, 1982\] and HPSG but isunavailable in feature logic is that of set descriptions.Although various researchers have studied set de-scriptions (with different semantics) \[Rounds, 1988\]\[Pollard and Moshier, 1990\] two issues remain unad-dressed.
Firstly there has not been any work on consi-stency checking techniques for feature terms augmen-ted with set descriptions.
Secondly, for applicationswithin grammatical theories uch as the HPSG forma-lism, set descriptions alone are not enough since de-scriptions involving set union are also needed.
Thusto adequately address the knowledge representationneeds of current linguistic theories one needs to provideset descriptions as well as mechanisms to manipulatethese.In the HPSG grammar forma-lism \[Pollard and Sag, 1987\], set descriptions are em-ployed for the modelling of so called semantic indices(\[Pollard and Sag, 1987\] pp.
104).
The attribute INDSin the example in (1) is a multi-valued attribute whosevalue models a set consisting of (at most) 2 objects.However multi-valued attributes cannot be descri-bed within feature logic \[Kasper and Rounds, 1986\]\[Smolka, 1992\].
(1)Io DREL --4 ?~TIs~R\[\] /Ls'~E~ w J\[NDS IRESTINAME ~andy \]\['IRESTINAME kim I I  ?L L N*M" D JIL L JJJA further complication arises since to be able to dealwith anaphoric dependencies we think that set mem-berships will be needed to resolve pronoun dependen-cies.
Equally, set unions may be called for to incremen-tally construct discourse referents.
Thus set-valuedextension to feature logic is insufficient on its own.Similarly, set valued subcategorisation frames (see (2))has been considered as a possibility within the HPSGformalism.
(2)be l ieves= IYNILOCISUBCAT~\[\[SYN~LOOIHEADICAT v\]But once set valued subeategorisation frames are em-ployed, a set valued analog of the HPSG subcategorisa-tion principle too is needed.
In section 2 we show thatthe set valued analog of the subcategorisation principlecan be adequately described by employing a disjointunion operation over set descriptions as available wit-hin the logic described in this paper.2 The  log ic  o f  Set  descr ip t ionsIn this section we provide the semantics of featureterms augmented with set descriptions and variousconstraints over set descriptions.
We assume an al-phabet consisting of x, y, z , .
.
.
6 )2 the set of variables;f ,g, .
.
.
E Y: the set of relation symbols; el, c2,... E Cthe set of constant symbols; A,B ,C , .
.
.
6 7 ) the setof primitive concept symbols and a,b, .
.
.
6 .At theset of atomic symbols.
Furthermore, we require that/ ,T  E T'.255The syntax of our term language defined by the follo-wing BNF definition:P > x I a t c I C \[ -~x I -~a \[ -~c \[ -~CS,T -  >Pf : T feature termSf  : T existential role quantificationVf : P universal role quantificationf :  {T1, .
.
.
,Tn} set descriptionf {T1 , .
.
,  Tn}= fixed cardinality set descriptionf : g(x) U h(y) unionf :  g(x) rq h(y) intersectionf :~ g(x) subsetf(x) # g(y) disjointnessS Iq T conjunctionwhere S, T, T1,.
.
.
,  Tn are terms; a is an atom; c is aconstant; C is a primitive concept and f is a relationsymbol.The interpretation of relation symbols and atoms isprovided by an interpretation Z =</4 I  I > where/41is an arbitrary non-empty set and I is an interpretationfunction that maps :1. every relation symbol f ?
~" to a binary relationf l  C_/4I x/4I2.
every atom a ?
.At to an element aI ?
bl xNotat ion :?
Let i f (e) denote the set {e'\[ (e,e') ?
i f}?
Let fI(e) T mean f l(e) = 0Z is required to satisfy the following properties :1. if al ~ a2 then all # hi2 (distinctness)2. for any atom a ?
At and for any relation f ?
~" thereexists no e ?
U 1 such that (a, e) ?
f l  (atomicity)For a given interpretation Z an Z-ass ignment  a is afunction that maps :1. every variable x ?
\]2 to an element a(x) ?
1412. every constant c ?
C to an element a(c) ?
/41 suchthat for distinct constants Cl, c2 : a(cl) # a(c2)3. every primitive concept C ?
7 ) to a subset a(C) C/41 such that:?
~(_L) = 0?
a(T) =/41The interpretation ofterms is provided by a denotationfunction \[\[.\]\]z,a that given an interpretation Z and anZ-assignment a maps terms to subsets of/41.The function \[.\]\]z,a is defined as follows :~x~z," = {,~(x)}\[\[a\]\]Z, ~ = {a I}\[cK'" = {a(e)}Iv\]  z,~ = ~(c)I f :  T\] z'" ={e ?/411 he' ?/4i: fZ(e ) = {e'} A e' ?
~T\] z 'e}\[3f : T~ :r'a ={e ?
/4  l lqe ' ?
/4 ( l : (e ,e ' )  ?
f !
A e' ?
IT\] z'"}IV f :  T\]\] z'~ ={e ?
W' lye' ?
/41:  (e, e') ?
f1 =~ e' ?
IfT\] z '"}U:  {T , , .
.
.
,T~}K,"  ={e E U I \[ 9e l , .
.
.
,ge~ e U I :f1(e) = {el,...,e,}^el e IT1\] z'a A .
.
.
A e,~ ?
\[T,~\] z'~}I f :  {T1,.
.
.
,  Tn}=\] z'a ={e ?
/4 I  I 9el , .
.
.
,ge~ ?
/ 4 I  :I f l (e )  l = n A fI(e) = {el , .
.
.
,en}Ael ?
\[Tx\]Z'a A .
.
.
A e~ ?
\[T,\] z'"}I f :  g(x) U h(y)\]\] z'a ={e ?
LI I I f l(e) = gl(a(x)) U hI(a(y))}I f :  g(x) N h(y)\] z'a ={e ?/41 \[ f i  (e ) = gi (c~(x) ) rq hl (c~(y) ) }I f  :~_ g(x) lz,  ~' ={e ?
u ~ I f (e )  ~ g1(~(x))}i f (x  ) # g(y)\]\]z,c~ =?
0 if f l (a(x)) n gl(a(y)) # O?
U I if f1(a(x)) A g1(a(y)) = 0IS rl T\]\] z,a = \[\[S\]\] z,a N \[T\]\] z,a\[-~T~ ," = U'  - \[T~ z,"The above definitions fix the syntax and semantics ofevery term.It follows from the above definitions that:I : T  - / :{T}  - I :{T}=Figure 1Although disjoint union is not a primitive in the logicit can easily be defined by employing set disjointnessand set union operations:f :  g(x) eJ h(y) =de/ g(x) # h(y) ~q f :  g(x) U h(y)Thus disjoint set union is exactly like set union exceptthat it additionally requires the sets denoted by g(x)and h(y) to be disjoint.The set-valued description of the subcategorisationprinciple can now be stated as given in example (3).
(3) Subcategor i sa t ion  Pr inc ip leSYN,LOC Y \]\]TRS X n \[HL-DTR\[SYN\[LOC\[SUBCAT c-dtrs(X) ~ subcat(Y)The description i  (3) simply states that the subcatvalue of the H-DTR is the disjoint union of the subcatvalue of the mother and the values of C-DTRS.
Notethat he disjoint union operation is the right operationto be specified to split the set into two disjoint subsets.Employing just union operation would not work since256Decompos i t ion  ru lesx=F:TAC~(DFeat)  x=F:yAy=TACsif y is new and T is not a variable and F ranges over Sf, fx = Vf : ~ A C~(DForal l)  x=Vf :yAy=~ACsif y is new and ~ ranges over a, c.(DSet )  x = f :  {T i , .
.
.
,T~} A C~x = I :  {x l , .
.
.
, x~}^xl  =T1  ^ .
.
.
i x~ =T~ACsif x i , .
.
.
,  xn are new and at least one of Ti : 1 < i < n is not a variablex= f : {T i , .
.
.
, T ,}=A Cs(DSetF)  x = f : {X l , .
.
.
, xn} A X = f :  {X l , .
.
.
, Xn}= A X 1 = T 1 ^.
.
.
i x n = T n i C sif x i , .
.
.
,  x~ are new and at least one of Ti : 1 < i < n is not a variablex=SNTAC,~(DConj )  x = S i x = T A gsFigure 2: Decomposition rulesit would permit repetition between members of theSUBCAT attribute and C-DTRS attribute.Alternatively, we can assume that N is the only multi-valued relation symbol while both SUBCAT and C-DTRSare single-valued and then employ the intuitively ap-pealing subcategorisation principle given in (4).
(4) Subcategor i sa t ion  Pr inc ip leTRS \[H-DTRISYNILOCISUBCATIN N(X) ~ N(Y)C-DTRS XWith the availability of set operations, multi-valuedstructures can be incrementally built.
For instance, byemploying union operations, semantic indices can beincrementally constructed and by employing members-hip constraints on the set of semantic indices pronounresolution may be carried out.The set difference operation f : g(y) - h(z) is not avai-lable from the constructs described so far.
However,assume that we are given the term x R f : g(y) - h(z)and it is known that hZ(~(z)) C_ gZ(a(y)) for every in-terpretation 27, (~ such that \[x R f : g(y) -  h(z)~ z,~ ?
0.Then the term x N f : g(y) - h(z) (assuming the ob-vious interpretation for the set difference operation) isconsistent iff the term y \[\] g : f (x)  t~ h(z) is consistent.This is so since for setsG, F ,H :G-F=HAFCGi\]:f G = F W H. See figure 1 for verification.3 Cons is tency  check ingTo employ a term language for knowledge representa-tion tasks or in constraint programming languages theminimal operation that needs to be supported is thatof consistency checking of terms.A term T is cons is tent  if there exists an interpreta-tion 2: and an/:-assignment (~ such that \[T\] z'a ~ 0.In order to develop constraint solving algorithms forconsistency testing of terms we follow the approachesin \[Smolka, 1992\] \[Hollunder and Nutt, 1990\].A conta inment  const ra int  is a constraint of theform x = T where x is a variable and T is an term.Const ra in t  s imp l i f i ca t ion  ru les  - Ix=yACs(SEquals) x = y A \[x/y\]Csif x ~ y and x occurs in Cs(SConst)  x=~Ay=~ACsx=yAx=~ACswhere ~ ranges over a, c.(SFeat) x= f :yAx= F :zZACsx=/ :yAy= ACswhere F ranges over f, 3f, Vf(SExists) x=gf :yAx=Vf :zAC~x= f :yAy=zACs(SFora l lE )  x = V__\] : C A x = 9 f  : y A C~_x =V/ :  CAx = 3 / :  yAy  = CAC~if C ranges over C, -~C, -~a, --c, -~z andCs Vy  =C.Figure 3: Constraint simplification rules - IIn addition, for the purposes of consistency checkingwe need to introduce d is junct ive const ra in ts  whichare of the form x -- Xl U ...  U x,~.We say that an interpretation Z and an/-ass ignmenta satisfies a constraint K written 27, a ~ K if.?
Z ,a~x=Tv=~a(x)  E\[T~ z'a?
Z ,a~x=xlU .
.
.Uxn .
:  ~ .a (x )=a(x i ) fo rsomex i : l  < i<n.A const ra int  sys tem Cs is a conjunction of con-straints.We say that an interpretation 27and an Z-assignmenta sat isfy a constraint system Cs iffZ, a satisfies everyconstraint in Cs.The following lemma demonstrates the usefulness ofconstraint systems for the purposes of consistencychecking.Lemma 1 An term T is consistent iff there exists avariable x, an interpretation Z and an Z-assignment asuch that Z, a satisfies the constraint system x = T.Now we are ready to turn our attention to constraintsolving rules that will allow us to determine the con-sistency of a given constraint system.257Const ra in t  s imp l i f i ca t ion  ru les  - I I(SSetF)  x=F:yAx=f :{X l , .
.
.
, xn}AC8x= f :yAy=x lA .
.
.Ay=xnACswhere F ranges over f ,  Vf(SSet) x = f :  {y} A C8x= f :yAC8(SDup)  x=f :{X l , .
.
.
, x i , .
.
.
, x j , .
.
.
, x ,~}AC8x = f : {Z l , .
.
.
, x , .
.
.
, .
.
.
, x ,}  ^ C8if xi -- x i(SForaU) x = Vf : CA x = f : {x l , .
.
.
, xn}  A C8x =f :  =-C^C8if C ranges over C, -~C, -~a, -~c, -~z andthere exists xi : 1 < i < n such that Cs ~1 xi = C.x = Bf  : yAx  = f : {Xl,...,x,~} A C8(SSetE)  x=f :{X l , .
.
.
, x ,~}Ay=xlU .
.
.UxnAC8(SSetSet)  X=f :{X l , .
.
.
,Xn}AX=f :{y l , .
.
.
, ym}AC8x = I :Xl = Yl I I .
.
.
II Ym ^  ?
.
.
^ Xn = Yl I I .
.
.
II ymAYl ---- xz \[J .. ?
II xn A .
.
.
A Ym = Xl I I .
.
.
II xn A 68where n _< mx= x I I I .
.
.Uxn  ACs(SD is )  x = Xl  M .
.
.
IJ x~ A x = x i  A C8i f l  < i<nandthere is no x j ,  1 < j < n such that C8 F x = x:Figure 4: ConstraintWe say that a constraint system C8 is basic if none ofthe decomposition rules (see figure 2) are applicable toc8.The purpose of the decomposition rules is to breakdown a complex constraint into possibly a number ofsimpler constraints upon which the constraint simpli-fication rules (see figures 3, 4 and 5 ) can apply bypossibly introducing new variables.The first phase of consistency checking of a term Tconsists of exhaustively applying the decompositionrules to an initial constraint of the form x = T (wherex does not occur in T) until no rules are applicable.This transforms any given constraint system into basicform.The constraint simplification rules (see figures 3, 4 and5 ) either eliminate variable equalities of the form x =y or generate them from existing constraints.
However,they do not introduce new variables.The constraint simplification rules given in figure 3 arethe analog of the feature simplification rules providedin \[Smolka, 1991\].
The main difference being that oursimplification rules have been modified to deal withrelation symbols as opposed to just feature symbols.The constraint simplification rules given in figure 4simplify constraints involving set descriptions whenthey interact with other constraints uch as featureconstraints - rule (SSetF),  singleton sets - rule (SSet),duplicate lements in a set - rule (SDup),  universallyquantified constraint - rule (SForall), another set de-scription - rule (SSetSet) .
Rule (SDis) on the otherhand simplifies disjunctive constraints.
Amongst allsimplification rules - IIthe constraint simplification rules in figures 3 and 4only rule (SDis) is non-deterministic and creates a n-ary choice point.Rules (SSet) and (SDup) are redundant as comple-teness (see section below) is not affected by these rules.However these rules result in a simpler normal form.The following syntactic notion of entailment is em-ployed to render a slightly compact presentation of theconstraint solving rules for dealing with set operationsgiven in figure 5.A constraint system Cs syntactically entails the (con-junction of) constraint(s) ?
if Cs F ?
is derivable fromthe following deduction rules:1.
?AC8 F?2.
C~Fx=x3.
CsFx=y >CsFy=x4.
CsFx=yACsFy=z >CsFx=z5.
Cs F x = -~y > C~ F y = -~x6.
CsFx=f :y  >CsFx=3f :y7.
CsFx=f :y  >CsFx=Vf :y8.
CsFx=I :{ .
.
.
, x i , .
.
.}
>C~Fz=3I :z iNote that the above definitions are an incomplete listof deduction rules.
However C~ I- ?
implies C~ ~ ?where ~ is the semantic entailment relation defined asfor predicate logic.We write C8 t /?
if it is not the case that C~ I- ?.The constraint simplification rules given in figure 5deal with constraints involving set operations.
Rule(C_) propagates g-values of y into I-values of x inthe presence of the constraint x = f :_D g(y).
Rule258Extended(c_) x =if:(ULeft)  x=if CsConst ra in t  s imp l i f i ca t ion  ru lesx = f :D g(y) A C~f :D g(y) A z = 3 f  : Yi A CsF/x = 3 f  : yi andF y = 3g : yix = I :  g(y) u h(z) Af :  g(y) W h(z) A x = f :D g(y) A Cs~/ x = f :D g(y)(URight) x = f :  g(y) U h(z) A Csx = f :  g(y) U h(z) A x = f :D h(z) A Csif Cs V z = f :__D h(z)(UDown)x = f :  g(y) U h(z) A Csx = f : g(y) U h(z) A y = 3g : xi I z = 3h : xi A Csif:?
C~/y=3g:x iand?
Cst /z=3h:x iand?
C~l -x=3f :x i( nDown )= f :  g(y) n h(z) Ax = f : g(y) n h(z) A y = 3g : xi A z = 3h : xi A Cif:?
(Cs \ [ /y=3g:x io rCsVz=3h:x i )  and?
C~Fx=3f :x~x = f :  g(y) n h(z) A Cs(nUp)  x = f : g(y) n h(z) A x = 3 f  : xi A Csif:?
Cs ~x=3f :x i  and?
CsFy=3g:x iand?
C~Fz=3h:x iFigure 5: Constra int  solving with set operat ions(ULeft) (correspondingly Rule (URight)) adds theconstraint  x = f :_D g(y) (correspondingly x = f :Dh(z)) in the presence of the constraint  x = f : g(y) Uh(z).
Also in the presence of x = f : g(y) U h(z) rule(UDown) non-determinist ica l ly  propagates an I -va lueof x to either an g-value of y or an h-value of z (ifneither a l ready holds).
The notat ion y = 3g : xi \] z =3h : xi denotes a non-determinist ic  choice betweeny = 3g : x~ and z = 3h : xi.
Rule (nDown) propaga-tes an f -va lue of x both as a g-value of y and h-value ofz in the presence of the constraint  x = f : g(y) n h(z).Finally, rule (nUp)  propagates a common g-value of yand h-value of z as an f -va lue of x in the presence ofthe constra int  x = f : g(y) n h(z).4 Invar iance ,  Completeness  andTerminat ionIn this section we establ ish the main results of thispaper  - namely that  our consistency checking proce-dure for set descr ipt ions and set operat ions is invari-ant, complete and terminat ing.
In other words, wehave a decision procedure for determining the consi-stency of terms in our extended feature logic.For the purpose of showing invariance of our ru-les we dist inguish between deterministic and non-deterministic rules.
Amongst  all our rules only rule(SDis)  given in figure 4 and rule (UDown) are non-determinist ic  while all the other rules are determini -stic.Theorem 2 ( Invar iance)  1.
I f  a decomposition ruletransforms Cs to C~s then Cs is consistent iff C~ isconsistent.2.
Let Z ,a  be any interpretation, assignment pair andlet Cs be any constraint system.?
I f  a deterministic simplification rule transformsCs to C' s then:iff p c"?
I f  a non-deterministic simplification rule appliesto Cs then there is at least one non-deterministicchoice which transforms Cs to C' s such that:z ,a  p iffz, apc ;A constraint  system Cs is in normal  fo rm if no rulesare appl icable to Cs.Let succ(x, f )  denote the set:succ(x, f )  = {y I c8 x = 3 f  : y}A constraint  system Cs in normal  form contains ac lash  if there exists a variable x in C8 such that  anyof the following condit ions are satisf ied :1.
C~Fx=al  andC~Fx=a2suchthata l  ~a22.
Cs F x = cl and Cs F x = c2 such thatc l  ~c23.
Cs F x = S and Cs F x = - ,Swhere S ranges over x, a, c, C.4.
CsFx=3f :yandCsFx=a5.
C~ F f (x )  ?
g(y) and succ(x, f )  n succ(y, g) 7~6.
C~ F x = f :  {xz , .
.
.
, xn}= and Isucc(x, f )  I < nIf Cs does not contain a clash then C~ is called c lash-f ree.The constraint  solving process can terminate  as soonas a clash-free constraint  system in normal  form is fo-und or a l ternat ively  all the choice points are exhau-sted.The purpose of the clash definit ion is highl ighted inthe completeness theorem given below.For a constraint  system Cs in normal  form an equiva-lence relation ~_ on variables occurr ing in Cs is definedas follows:x -~ y i fC~ F x = yFor a variable x we represent its equivalence class byTheorem 3 (Completeness)  A constraint systemCs in normal form is consistent iff Cs is clash-free.Proof Sketch: For the first part ,  let C~ be a constra intsystem containing a clash then it is clear from the de-finition of clash that  there is no interpretat ion  Z andZ-assignment a which satisfies Cs.Let C~ be a clash-free constra int  system in normalform.We shall construct  an interpretat ion 7~ =< L/R, .R >259and a variable assignment a such that T~, a ~ Cs.Let U R = V U ,4t UC.The assignment function a is defined as follows:1.
For every variable x in )2(a) if C8 }- x = a then ~(x) = a(b) if the previous condition does not apply then~(x) = choose(Ix\]) where choose(\[x\]) denotes aunique representative (chosen arbitrarily) fromthe equivalence class \[x\].2.
For every constant c in C:(a) if Cs F x = c then a(c) = (~(x)(b) if c is a constant such that the previous conditiondoes not apply then (~(c) -- c3.
For every primitive concept C in P:= I C8 x =The interpretation function .n is defined as follows:?
fR(x) = succ( , f)?
aR=aIt can be shown by a case by case analysis that forevery constraint K in C~:7~,a~ K.Hence we have the theorem.Theorem 4 (Terminat ion)The consistency checking procedure terminates in a fi-nite number of steps.Proof Sketch: Termination is obvious if we observe thefollowing properties:1.
Since decomposition rules breakdown terms intosmaller ones these rules must terminate.2.
None of the simplification rules introduce new va-riables and hence there is an upper bound on thenumber of variables.3.
Every simplification rule does either of the following:(a) reduces the 'effective' number of variables.A variable x is considered to be ineffective if itoccurs only once in Cs within the constraint x =y such that rule (SEquals)  does not apply.
Avariable that is not ineffective is considered to beeffective.
(b) adds a constraint of the form x = C where Cranges over y, a, c, C, -~y, -~a, -~c, -~C which meansthere is an upper bound on the number of con-straints of the form x = C that the simplificationrules can add.
This is so since the number of va-riables, atoms, constants and primitive conceptsare bounded for every constraint system in basicform.
(c) increases the size of succ(x,f).
But the size ofsucc(x, f) is bounded by the number of variablesin Cs which remains constant during the applica-tion of the simplification rules.
Hence our con-straint solving rules cannot indefinitely increasethe size of succ(x, f).5 NP-completenessIn this section, we show that consistency checkingof terms within the logic described in this paper isNP-complete.
This result holds even if the termsinvolving set operations are excluded.
We provethis result by providing a polynomial time transla-tion of the well-known NP-complete problem of de-termining the satisfiability of propositional formulas\[Garey and Johnson, 1979\].Theorem 5 (NP-Completeness )  Determiningconsistency of terms is NP-Complete.Proof: Let ?
be any given propositional formula forwhich consistency is to be determined.
We split ourtranslation into two intuitive parts : truth assignmentdenoted by A(?)
and evaluation denoted by r(?
).Let a, b, .
.
.
be the set of propositional variables occur-ring in ?.
We translate very propositional variable aby a variable xa in our logic.
Let f be some relationsymbol.
Let true, false be two atoms.Furthermore, let xl, x2, .
.
,  be a finite set of variablesdistinct from the ones introduced above.We define the translation function A(?)
by:A(?)
= f :  {true, false}n3f  :xa nSf  : xbn .
.
.n3f  : xl n 3f : x2 n ...The above description forces each of the variableXa,Xb,... and each of the variables xl ,x2, .
.
,  to beeither equivalent to true or false.We define the evaluation function T(?)
by:= xoT(S&T) = T(S) n r(T)T(SVT)  = xi n 3f : ( \ ] :  {~(S),r (T)} n 3f: xi)where xi 6 {x l ,x2, .
.
.}
is a new variabler(~S) = xi n 3f : (r(S) n ~z~)where xi 6 {xl,x2,.
.
.}
is a new variableIntuitively speaking T can be understood as follows.Evaluation of a propositional variable is just its value;evaluating a conjunction amounts to evaluating eachof the conjuncts; evaluating a disjunction amounts toevaluating either of the disjuncts and finally evaluatinga negation involves choosing something other than thevalue of the term.Determining satisfiability of ?
then amounts to deter-mining the consistency of the following term:3 f  : A(?)
n 3f :  (true n r(?
))Note that the term truenT(?)
forces the value of T(?
)to be true.
This translation demonstrates that deter-mining consistency of terms is NP-hard.On the other hand, every deterministic completion ofour constraint solving rules terminate in polynomialtime since they do not generate new variables and thenumber of new constraints are polynomially bounded.This means determining consistency of terms is NP-easy.
Hence, we conclude that determining consistencyof terms is NP-complete.6 T rans la t ion  to  Sch6nf inke l -Bernaysc lassThe Schhnfinkel-Bernays class (see \[Lewis, 1980\]) con-sists of function-free first-order formulae which have260the form:3xt .
.
.
xnVyl ?
.. ym6In this section we show that the attributive logicdeveloped in this paper can be encoded within theSchSnfinkel-Bernays subclass of first-order formulae byextending the approach developed in \[Johnson, 1991\].However formulae such as V f : (3 f : (Vf : T)) whichinvolve an embedded existential quantification cannotbe translated into the SchSnfinkel-Bernays class.
Thismeans that an unrestricted variant of our logic whichdoes not restrict he universal role quantification can-not be expressed within the SchSnfinkel-Bernays class.In order to put things more concretely, we providea translation of every construct in our logic into theSchSnfinkel-Bernays class.Let T be any extended feature term.
Let x be a va-riable free in T. Then T is consistent iff the formula(x = T) 6 is consistent where 6 is a translation functionfrom our extended feature logic into the SchSnfinkel-Bernays class.
Here we provide only the essential de-finitions of 6:??
=x#a?
(x = f : T) ~ =f (x ,  y) & (y = T) ~ ~ Vy' ( f (x ,  y') -+ y = y')where y is a new variable?
( x=qf :T )  ~=f (x ,y )  & (y=T)  '~where y is a new variable?
(x = V f :  a) ~ = Vy( f (x ,y )  --+ y = a)?
(x = V f :  ~a) ~ = Vy( f (x ,y )  .-+ y # a)?
(x = f :  {T1, .
.
.
,Tn})  ~ --f (X,  Xl) & .
.
.
~ f(X,  Xn),~Vy( f (x ,y )  --~ y = Xl V .
.
.
V y = xn)&(x l  = T1) & .
.
.
& (z l  =where Xl , .
.
.
,  Xn are new variables?
(x = f :  g(y) U h(z)) ~ =Vxi(f(x, xi) -'+ g(y, xi) V h(z, xi)) ~:Vy,(g(y, Yi) -4 f (x ,  Yi)) &Vzi(h(z, zi) -+ f (x ,  zi))?
(x = f :  (y) # g(z))  ~ =Vyiz j ( f (y ,  yi) & g(z, zi) --+ Yi # zi)?
( x=S lqT)  '~=(x=S)  ~ & (x=T)  ~These translation rules essentially mimic the decom-position rules given in figure 2.Furthermore for every atom a and every feature f inT we need the following axiom:?
Vax(-~f(a, x))For every distinct atoms a, b in T we need the axiom:?
a#bTaking into account the NP-completeness resultestablished earlier this translation identifies a NP-complete subclass of formulae within the SchSnfinkel-Bernays class which is suited for NL applications.7 Re la ted  WorkFeature logics and concept languages suchasKL-ONE are closely related family of languages\[Nebel and Smolka, 1991\].
The principal differencebeing that feature logics interpret attributive labelsas functional binary relations while concept langua-ges interpret hem as just binary relations.
Howeverthe integration of concept languages with feature lo-gics has been problematic due to the fact the whilepath equations do not lead to increased computatio-nal complexity in feature logic the addition of role-value-maps (which are the relational analog of pathequations) in concept languages causes undecidabi-lity \[Schmidt-Schant3, 1989\].
This blocks a straight-forward integration of a variable-free concept languagesuch as ALC \[Schmidt-SchanB and Smolka, 1991\] witha variable-free f ature logic \[Smolka, 1991\].In \[Manandhax, 1993\] the addition of variables, fea-ture symbols and set descriptions to ALC is investi-gated providing an alternative method for integratingconcept languages and feature logics.
It is shown thatset descriptions can be translated into the so called"number estrictions" available within concept langu-ages such as BACK \[yon Luck et al, 1987\].
However,the propositionally complete languages ALV and ALSinvestigated in \[Manandhar, 1993\] are PSPACE-hardlanguages which do not support set operations.The work described in this paper describes yet anotherunexplored imension for concept languages - that ofa restricted concept language with variables, featuresymbols, set descriptions and set operations for whichthe consistency checking problem is within the com-plexity class NP.8 Summary  and  Conc lus ionsIn this paper we have provided an extended feature lo-gic (excluding disjunctions and negations) with a rangeof constraints involving set descriptions.
These con-straints are set descriptions, fixed cardinality "set de-scriptions, set-membership constraints, restricted uni-versal role quantifications, et union, set intersection,subset and disjointness.
We have given a model theo-retic semantics to our extended logic which shows thata simple and elegant formalisation of set descriptionsis possible if we add relational attributes to our logicas opposed to just functional attributes available infeature logic.For realistic implementation of the logic described inthis paper, further investigation is needed to developconcrete algorithms that are reasonably efficient in theaverage case.
The consistency checking procedure de-scribed in this paper abstracts away from algorithmicconsiderations and clearly modest improvements to thebasic algorithm suggested in this paper are feasible.However, a report on such improvements i  beyondthe scope of this paper.For applications within constraint based grammarformalisms such as HPSG, minimally a type sy-stem \[Carpenter, 1992\] and/or a Horn-like extension\[HShfeld and Smolka, 1988\] will be necessary.We believe that the logic described in this paper pro-vides both a better picture of the formal aspects of261current constraint based grammar formalisms whichemploy set descriptions and at the same time givesa basis for building knowledge representation tools inorder to support grammar development within theseformalisms.9 AcknowledgmentsThe work described here has been carried out as partof the EC-funded project LRE-61-061 RGR (Reusa-bility of Grammatical  Resources).
A longer versionof the paper is available in \[Erbach et al, 1993\].
Thework described is a further development of the aut-hor's PhD thesis carried out at the Department of Ar-tificial Intelligence, University of Edinburgh.
I thankmy supervisors Chris Mellish and Alan Smaill for theirguidance.
I have also benefited from comments by ananonymous reviewer and discussions with Chris Brew,Bob Carpenter, Jochen DSrre and Herbert Ruessink.The Human Communication Research Centre (HCRC)is supported by the Economic and Social ResearchCouncil (UK).Re ferences\[Carpenter, 1992\] Bob Carpenter.
The Logic of Typed Fea-ture Structures.
Cambridge University Press, 1992.\[Carpenter, 1993\] Bob Carpenter.
ALE:Attribute LogicEngine Users Guide, Version/~.
Technical report, Car-negie Mellon University, Pittsburgh, PA 15213, 1993.\[DSrre and Dorna, 1993\] Jochen DSrre and MichaelDorna.
CUF: A Formalism for Linguistic KnowledgeRepresentation.
Dyana-2 deliverable, IMS, Stuttgart,Germany, August 1993.\[Erbach et al, 1993\] Gregor Erbach, Mark van der Kraan,Suresh Manandhar, M. Andrew Moshier, Herbert Rues-sink, and Craig Thiersch.
Specification of Datatypes.In Deliverable D.B of LRE-61-061 "The Reusability ofGrammatical Resources".
1993.\[Garey and Johnson, 1979\] M. R. Garey and D. S. John-son.
Computers and Intractability : A Guide to theTheory of NP-Completeness.
Freeman, San Francisco,1979.\[HShfeld and Smolka, 1988\] Markus HShfeld and GertSmolka.
Definite relations over constraint languages.
LI-LOG Report 53, IBM Deutschland, Stuttgart, Germany,October 1988.\[Hollunder and Nutt, 1990\] B. Hollunder and W. Nutt.Subsumption Algorithms for Concept Languages.
Rese-arch Report RR-90-04, German Research Center for Ar-tificial Intelligence (DFKI), Stuhlsatzenhausweg 3, 6600Saarbr/icken 11, Germany, 1990.\[Johnson, 1991\] Mark Johnson.
Features and Formulae.Computational Linguistics, 17(2):131-151, June 1991.\[Kaplan and Bresnan, 1982\] Ronald M. Kaplan and JoanBresnan.
Lexical-Functional Grammar: A formal systemfor grammatical representation.
I  Joan Bresnan, editor,The Mental Representation of Grammatical Relations,pages 173 - 281.
MIT Press, Cambridge, Massachussets,1982.\[Kasper and Rounds, 1986\] Robert Kasper and WilliamRounds.
A logical semantics for feature structures.
In24th Annual Meeting of the Association for Computatio-nal Linguistics, Columbia University, New York, pages257-265, 1986.\[Lewis, 1980\] Harry R. Lewis.
Complexity Results forClasses of Quantificational Formulae.
Journal of Com-puter and System Sciences, 21:317-353, 1980.\[Manandhar, 1993\] Suresh Manandhar.
Relational Exten-sions to Feature Logic: Applications to Constraint BasedGrammars.
PhD thesis, Department of Artificial Intel-ligence, University of Edinburgh, 1993.\[Nebel and Smolka, 1991\] Bernhard Nebel andGert Smolka.
Attributive description formalisms andthe rest of the world.
Research Report RR-91-15, Ger-man Research Center for Artificial Intelligence (DFKI),Saarbr/icken, Germany, May 1991.\[Pollard and Moshier, 1990\] Carl J. Pollard and M. DrewMoshier.
Unifying partial descriptions of sets.
In Phi-lip P. Hanson, editor, Information, Language and Cogni-tion.
University of British Columbia Press, Vancouver,Canada, 1990.
Vancouver Studies in Cognitive Science,no.
1.\[Pollard and Sag, 1987\] Carl Pollard and Ivan AndrewSag.
Information-Based Syntax and Semantics: Volume1 Fundamentals, volume 13 of Lecture Notes.
Center forthe Study of Language and Information, Stanford, CA,1987.\[Pollard and Sag, 1992\] Carl Pollard and Ivan AndrewSag.
Head-driven Phrase Structure Grammar: Volume2.
MIT Press, 1992.
Forthcoming.\[Rounds, 1988\] William C. Rounds.
Set values forunification-based grammar formalisms and logic pro-gramming.
Technical report, Center for the Study ofLanguage and Information, Stanford, CA, 1988.\[Schmidt-SchauB and Smolka, 1991\] ManfredSchmidt-Schaufl and Gert Smolka.
Attributive ConceptDescriptions with Unions and Complements.
ArtificialIntelligence, 48:1-26, 1991.
Also available as IWBS Re-port 68, IBM Germany, Scientific Center, IWBS, Stutt-gart, Germary, June 1989.\[Schmidt-Schaufl, 1989\] Manfred Schmidt-Schaufl.
Sub-sumption in KL-ONE is undecidable.
In First Interna-tional Conference on Principles of Knowledge Represen-tation and Reasoning, KR'  89, Toronto, Canada, pages421-431, May 1989.\[Smolka, 1991\] Gert Smolka.
A feature logic with subsorts.In Jfirgen Wedekind and C. Rohrer (eds.
), editors, Uni-fication in Grammar.
MIT Press, 1991.
Also appearedas LILOG Report no.
33, IWBS, IBM Deutschland.\[Smolka, 1992\] Gert Smolka.
Feature constraint logics forunification grammars.
Journal of Logic Programming,12:51-87, 1992.\[von Luck et al, 1987\] K. von Luck, B. Nebel, C. Pelta-son, and A. Schmiedel.
The Anatomy of the BACK Sy-stem.
KIT Report 41, Department ofComputer Science,Technische Universit~t Berlin, Berlin, Germany, 1987.\[Zajac, 1992\] R~mi Zajac.
Inheritance and Constraint-Based Grammar Formalisms.
Computational Lingui-stics, 18(2):159-182, 1992.262
