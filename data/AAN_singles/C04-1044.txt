Polarization and abstraction of grammatical formalisms asmethods for lexical disambiguationGuillaume Bonfante and Bruno Guillaume and Guy PerrierLORIA - UMR 7503,Campus Scientifique, B.P.
239,F-54506 Vand?uvre le`s Nancy CEDEX{Guillaume.Bonfante, Bruno.Guillaume, Guy.Perrier}@loria.frAbstractIn the context of lexicalized grammars, wepropose general methods for lexical disam-biguation based on polarization and ab-straction of grammatical formalisms.
Polar-ization makes their resource sensitivity ex-plicit and abstraction aims at keeping essen-tially the mechanism of neutralization be-tween polarities.
Parsing with the simpli-fied grammar in the abstract formalism canbe used efficiently for filtering lexical selec-tions.IntroductionThere is a complexity issue if one consider ex-act parsing with large scale lexicalized gram-mars.
Indeed, the number of way of associatingto each word of a sentence a corresponding ele-mentary structure?a tagging of the sentence?is the product of the number of lexical entries foreach word.
The procedure may have an expo-nential complexity in the length of the sentence.In order to filter taggings, we can use proba-bilistic methods (Joshi and Srinivas, 1994) andkeep only the most probable ones; but if wewant to keep all successful taggings, we mustuse exact methods.
Among these, one consistsin abstracting information that is relevant forthe filtering process, from the formalism F usedfor representing the concerned grammar G. Inthis way, we obtain a new formalism Fabs whichis a simplification of F and the grammar G istranslated into a grammar abs(G) in the ab-stract framework Fabs.
From this, disambiguat-ing with G consists in parsing with abs(G).
Theabstraction is relevant if parsing eliminates amaximum of bad taggings at a minimal cost.
(Boullier, 2003) uses such a method for Lexical-ized Tree Adjoining Grammars (LTAG) by ab-stracting a tree adjoining grammar into a con-text free grammar and further abstracting thatone into a regular grammar.
We also proposeto apply abstraction but after a preprocessingpolarization step.The notion of polarity comes from CategorialGrammars (Moortgat, 1996) which ground syn-tactic composition on the resource sensitivity ofnatural languages and it is highlighted in Inter-action Grammars (Perrier, 2003), which resultfrom refining and making Categorial Grammarsmore flexible.Polarization of a grammatical formalism Fconsists in adding polarities to its syntacticstructures to obtain a polarized formalism Fpolin which neutralization of polarities is used forcontrolling syntactic composition.
In this way,the resource sensitivity of syntactic compositionis made explicit.
(Kahane, 2004) shows thatmany grammatical formalisms can be polarizedby generalizing the system of polarities used inInteraction Grammars.To abstract a grammatical formalism, it is in-teresting to polarize it before because polaritiesallow original methods of abstraction.The validity of our method is based on a con-cept of morphism (two instances of which beingpolarization and abstraction) which character-izes how one should transport a formalism intoanother.In sections 1 and 2, we present the conceptualtools of grammatical formalism and morphismwhich are used in the following.In section 3, we define the operation of polar-izing grammatical formalisms and in section 4,we describe how polarization is used then forabstracting these formalisms.In section 5, we show how abstraction ofgrammatical formalisms grounds methods oflexical disambiguation, which reduce to pars-ing in simplified formalisms.
We illustrate ourpurpose with an incremental and a bottom-upmethod.In section 6, we present some experimentalresults which illustrate the flexibility of the ap-proach.1 Characterization of a grammaticalformalismTaking a slightly modified characterization ofpolarized unification grammars introduced by(Kahane, 2004) we define a grammatical formal-ism F (not necessarily polarized) as a quadruple?StructF ,SatF ,PhonF ,RulesF ?:1.
StructF is a set of syntactic structureswhich are graphs1 in which each edgeand vertex may be associated with a la-bel representing morpho-syntactic informa-tion; we assume that the set of labels asso-ciated with F is equipped with subsump-tion, a partial order denoted v, and withunification, an operation denoted unionsq, suchthat, for any labels l and l?, either l unionsq l?
isnot defined, which is denoted l unionsq l?
= ?, orl unionsq l?
is the least upper bound of l and l?2;2.
SatF is a subset of StructF , which repre-sents the saturated syntactic structures ofgrammatical sentences;3.
PhonF is a function that projects everyelement of SatF in the sentence that hasthis element as its syntactic structure.4.
RulesF is a set of composition rules be-tween syntactic structures.
Every elementof RulesF is a specific method for super-posing parts of syntactic structures; thismethod defines the characteristics of theparts to be superposed and the unificationoperation between their labels.
Notice thatwe do not ask rules to be deterministic.The composition rules of syntactic structures,viewed as superposition rules, have the funda-mental property of monotonicity: they add in-formation without removing it.
Hence, the defi-nition above applies only to formalisms that canbe expressed as constraint systems in oppositionto transformational systems.Let us give some examples of grammatical for-malisms that comply with the definition aboveby examining how they do it.?
In LTAG, StructLTAG represents the setof derived trees, SatLTAG the set of de-rived trees with a root in the categorysentence and without non terminal leaves.1Usually trees or directed acyclic graphs.2The least upper bound of l and l?
can exist and, atthe same time, l unionsq l?
be not defined; if the operation ofunification is defined everywhere, the set of labels is asemi-lattice.The projection PhonLTAG is the canoni-cal projection of a locally ordered tree onits leaves.
Finally, RulesLTAG is madeup of two rules: substitution and adjunc-tion.
To view adjunction as a superpositionrule, we resort to the monotone presenta-tion of LTAG with quasi-trees introducedby (Vijay-Shanker, 1992).?
In Lambek Grammars (LG), StructLGis the set of partial proofs and theseproofs can be represented in the formof incomplete Lambek proof nets labelledwith phonological terms (de Groote, 1999).SatLG represents the set of complete proofnets with the category sentence as theirconclusion and with syntactic categorieslabelled with words as their hypotheses.The projection PhonLG returns the labelof the conclusion of complete proof nets.RulesLG is made up of two rules: a binaryrule that consists in identifying two dualatomic formulas of two partial proof netsby means of an axiom link and a unary rulethat consists in the same operation but in-side the same partial proof net.Now, inside a formalism defined as above, wecan consider particular grammars:A grammar G of a formalism F is asubset G ?
StructF of its elementarysyntactic structures.A grammar is lexicalized if every element of Gis anchored by a word in a lexicon.
In LTAG, Gis constituted of its initial and auxiliary trees.In LG, G is constituted of the syntactic trees ofthe formulas representing syntactic categories ofwords as hypotheses plus a partial proof net an-chored by the period and including a conclusionin the category sentence.From a grammar G defined in a formalismF , we build the set D(G) of its derived syntac-tic structures by applying the rules of RulesFrecursively from the elements of G. The lan-guage generated by the grammar is the projec-tion L(G) = PhonF (SatF ?
D(G)).2 Morphisms between grammaticalformalismsPolarization and abstraction can be definedfrom a more general notion of morphism be-tween grammatical formalisms.
A morphismfrom a grammatical formalism C to a grammat-ical formalism A is a function f from StructCto StructA with the following properties3:(i) f(SatC) ?
SatA;(ii) ?S ?
SatC ,PhonA(f(S)) = PhonC(S);(iii) if S1, .
.
.
, Sn are composed into a struc-ture S in C by means of rules of RulesC ,then f(S1), .
.
.
, f(Sn) can be composedinto the structure f(S) by means of rulesof RulesA.Given such a morphism f and a grammar Gin C, the image of G by f denoted f(G) isthe grammar?in A?induced by the morphism.The three properties of morphism guaranteethat the language generated by any grammarG of C is a subset of the language generated byf(G).
In other words, L(G) ?
L(f(G)).We propose to use the notion of morphism intwo ways:?
for polarizing grammatical formalisms andin this case, morphisms are isomorphisms;grammars are transposed from a formalismto another formalism with the same gener-ative power; in other words, with the pre-vious notations: L(G) = L(f(G));?
for abstracting grammatical formalismsand this case, the transposition of gram-mars by morphisms entails simplification ofgrammars and extension of the generatedlanguages; we have only: L(G) ?
L(f(G)).An example of the use of abstraction for lex-ical disambiguation may be found in (Boul-lier, 2003)4.
We propose to link polarizationwith abstraction because polarities allow origi-nal methods of abstraction.
Polarization is usedas a preprocessing step before the application ofthese methods.3 Polarization of grammaticalformalismsThe goal of polarizing a grammatical formal-ism is to make explicit the resource sensitiv-ity that is hidden in syntactic composition, byadding polarities to the labels of its structures.When morpho-syntactic labels become polar-ized in syntactic structures, they get the status3An elegant definition of morphism could be givenin a category-theoretical framework but we have chosenhere a more elementary definition.4Our definition of morphism must be slightly ex-tended for embedding the proposal of (Boullier, 2003).of consumable resources: a label that is asso-ciated with the polarity + becomes an avail-able resource whereas a label that is associatedwith the polarity ?
becomes an expected re-source; both combine for producing a saturatedresource associated with the polarity $; labelsassociated with the polarity = are neutral inthis process.
In a polarized formalism, the sat-urated structures are those that have all labelsassociated with the polarity = or $.
We callthem neutral structures.
The composition ofstructures is guided by a principle of neutraliza-tion: every positive (negative) label must unifywith a negative (positive) label.The polarization of a formalism must pre-serve its generative power: the language thatis generated by a polarized grammar must bethe same as that generated by the initial non-polarized grammar.
This property of (weak andeven strong) equivalence is guaranteed if thepolarized formalism is isomorphic to the non-polarized formalism from which it stems.
For-mally, given a grammatical formalism F , anyformalism Fpol with a morphism pol : F ?
Fpolis a polarization of F if:(i) For any structure S ?
StructF , pol(S)results from associating each label of Swith one of the polarities: +, ?, =, $;in others words, labels of Fpol are pairs(p, l) with p a polarity and l a label ofF .
The set of polarities {+, ?, =, $} isequipped with the operation of unificationand the subsumption order defined byFigure 1.
The operations of subsumptionand unification on pairs are the pointwiseoperations.
That is, for any pairs (p, l)and (p?, l?
),(p, l)v(p?, l?)
iff pvp?
and lvl?
(p, l)unionsq(p?, l?)
= (punionsqp?, lunionsql?
)(ii) SatFpol is constituted of the neutral struc-tures of StructFpol .
(iii) pol is an isomorphism whose inverse mor-phism is the function that ignores polar-ities and keeps invariant the rest of thestructure.Let us illustrate our purpose by taking againour two examples of formalisms.?
For LTAG (see figure 2), pol consists inlabelling the root of elementary syntactictrees with the polarity + and their non ter-minal leaves (substitution and foot nodes)?
+ = $?
$ ?+ $ += ?
+ = $$ $=?
?+ ??
?$Figure 1: unification and subsumption betweenpolaritiespol destrNN*AdjredN?N+N+Adj N?redN+, N+, N?, N?red , AdjFigure 2: Syntactic structures associatedwith the adjective red in LTAG, LTAGpol,(LTAGpol)destrwith the polarity ?.
In every pair of quasi-nodes, the top quasi-node is labelled withthe polarity ?
and the bottom quasi-nodeis labelled with the polarity +.
With re-spect to the classical presentation of LTAG,initial trees must be completed by an axiomwith two nodes of the type sentence: a rootwith the polarity = and its unique daugh-ter with the polarity ?.
In this way, polestablishes a perfect bijection between thesaturated structures of LTAG and the neu-tral structures of LTAGpol.
The rules of ad-junction and substitution of RulesLTAGpolmimic the corresponding rules in LTAG,taking into account polarities.
We add athird composition rule, a unary rule whichidentifies the two quasi-nodes of a samepair.
It is routine to check that pol is apolarisation.?
In LG(see figure 3), polarization is alreadypresent explicitly in the formalism: nega-tive formulas and sub-formulas are inputformulas, hypotheses whereas positive for-mulas and sub-formulas are output formu-las, conclusions.4 Abstraction of polarizedgrammatical formalismsThe originality of abstracting polarized for-malisms is to keep a mechanism of neutraliza-tion between opposite polarities at the heart ofthe abstract formalism.
Furthermore, we canchoose different levels of abstraction by keepingmore or less information from the initial formal-S+ NP?eatsNP?
(NP \ S ) / NPeatspol S+, NP?, NP?eatsdestrFigure 3: Syntactic structures associatedwith the transitive verb eats in LG, LGpol,(LGpol)destrism.As an example, we propose a high degree ab-straction, destructuring.
Destructuring a polar-ized formalism consists in ignoring the struc-ture from the initial syntactic objects to keepmerely the multisets of polarized labels.
For-mally, given a polarized formalism P , we definethe formalism Pdestr as follows:?
Any element M of StructPdestr is a multi-set of labels.
All elements of M are labelsof P , except one exactly, the anchor, whichis a neutral string.?
SatPdestr is made up of multisets containingonly neutral and saturated labels;?
The projection PhonPdestr returns the la-bel of the anchor.?
RulesPdestr has two neutralization rules.
Abinary rule takes two multisets M1 and M2from StructPdestr as inputs; two unifiablelabels +l1 ?
M1(M2) and ?l2 ?
M2(M1)are selected.
The rule returns the union ofM1 and M2 in which +l1 and ?l2 are uni-fied and the two anchors are concatenated.The only change with the unary rule is thatthis operates inside the same multiset.A morphism destr is associated to Pdestr (seefigure 2 and 3): it takes any structure S fromStructP as input and returns the multiset of itslabels with an additionnal anchor.
This anchoris the neutral string PhonP (S) if this one isdefined.An important property of Pdestr is that it isnot sensitive to word order: if a sentence is gen-erated by a particular grammar of Pdestr, bypermuting the words of the sentence, we ob-tain another sentence generated by the gram-mar.
Destructuring is an abstraction that ap-plies to any polarized formalism but we can de-sign abstractions with lower degree which arespecific to particular formalisms (see Section 6).5 Application to lexicaldisambiguationAbstraction is the basis for a general methodof lexical disambiguation.
Given a lexicalizedgrammar G in a concrete formalism C, we con-sider a sentence w1 .
.
.
wn.
For each 1 ?
i ?
n,let the word wi have the following entries in thelexicon of G: Si,1, Si,2 .
.
.
Si,mi .
A tagging ofthe sentence is a sequence S1,k1 , S2,k2 .
.
.
Sn,kn .We suppose now that we have given an abstrac-tion morphism abs : C ?
Cabs.
As L(G) ?L(abs(G)), any tagging in abs(G) which has nosolutions comes from a bad tagging in G. Asa consequence, the methods we develop try toeliminate such bad taggings by parsing the sen-tence w1w2 .
.
.
wn within the grammar abs(G).We propose two procedures for parsing in theabstract formalism:?
an incremental procedure which is specificto the destructuring abstraction,?
a bottom-up procedure which can apply tovarious formalisms and abstractions.5.1 Incremental procedureWe choose polarization followed by destructur-ing as abstraction.
In other words: abs =destr ?pol.
Let us start with the particular casewhere unification of labels in C reduces to iden-tity.
In this case, parsing inside the formalismCabs is greatly simplified because compositionrules reduce to the neutralization of two labels+l and ?l.
As a consequence, parsing reducesto a counting of positive and negative polaritiespresent in the selected tagging for every labell: every positive label counts for +1 and ev-ery negative label for ?1, the sum must be 0;since this counting must be done for every pos-sible tagging and for every possible label, it iscrucial to factorize counting.
For this, we useautomata, which drastically decrease the space(and also the time) complexity.For every label l of C that appears with apolarity + or ?
in the possible taggings of thesentence w1w2 .
.
.
wn, we build the automatonAl as follows.
The set of states of Al is [0..n]?Z.For any state (i, c), i represents the position atthe beginning of the word wi+1 in the sentenceand c represents a positive or negative count oflabels l. The initial state is (0, 0), and the finalstate is (n, 0).
Transitions are labeled by lexiconentries Si,j .
Given any Si,j , there is a transition(i?
1, x)Si,j??
(i, y) if y is the sum of x and thecount of labels l in the multi-set destr(Si,j).Reaching state (i, c) from the initial state(0, 0) means that(a) the path taken is of the formS1,j1 , S2,j2 , .
.
.
, Si,ji , that is a taggingof the first i words,(b) c is the count of labels l presentin the union of the multi-setsabs(S1,j1), abs(S2,j2), .
.
.
, abs(Si,ji).As a consequence, any path that leads to the fi-nal state corresponds to a neutral choice of tag-ging for this label l.The algorithm is now simply to construct foreach label l the automaton Al and to make theintersection A =?l?LabelsAl of all these au-tomata.
The result of the disambiguation isthe set of paths from the initial state to the fi-nal state described by this intersection automa-ton.
Notice that at each step of the constructionof the intersection, one should prune automatafrom their blind states to ensure the efficiencyof the procedure.Now, in the general case, unification of labelsin F does not reduce to identification, which in-troduces nondeterminism in the application ofthe neutralization rule.
Parsing continues to re-duce to counting polarities but now the countingof different labels is nondeterministic and inter-dependent.
For instance, consider the multiset{+a, +b, ?aunionsq+b} of three different elements.If we count the number of a, we find 0 if weconsider that +a is neutralized by ?aunionsqb and+1 otherwise; in the first case, we find +1 forthe count of b and in the second case, we find 0.Interdependency between the counts of differentlabels is very costly to be taken into account andin the following we ignore this property; there-fore, in the previous exemple, we consider thatthe count of a is 0 or +1 and the count of b isalso 0 or +1 independently from the first one.For expressing this, given a label l of F and apositive or negative label l?
of Fpol, we definePl(l?)
as a segment of integers, which representsthe possible counts of l found in l?, as follows:?
if l?
is positive, then Pl(l?)
=??
?J1, 1K if lvl?J0, 0K if lunionsql?
= ?J0, 1K otherwise?
if l?
is negative, then Pl(l?)
=??
?J?1,?1K if lvl?J0, 0K if lunionsql?
= ?J?1, 0K otherwiseWe generalize the function Pl to count the num-ber ol labels l present in a multi-set abs(S):Pl(S) = Jinf, supKwith:inf =?l?
?abs(S) min(Pl(l?
))sup =?l?
?abs(S) max(Pl(l?
))The method of disambiguation using au-tomata presented above is still valid in the gen-eral case with the following change in the defini-tion of a transition in the automaton Al: givenany Si,j , there is a transition (i?1, x)Si,j??
(i, y)if y is the sum of x and some element of Pl(Si,j).With this change, the automaton Al becomesnondeterministic.The interest of the incremental procedure isthat it is global to the sentence and that it ig-nores word order.
This feature is interesting forgeneration where the question of disambigua-tion is crucial.
This advantage is at the sametime its drawback when we need to take wordorder and locality into account.
Under this an-gle, the bottom-up procedure, which will be pre-sented below, is a good complement to the in-cremental procedure.5.2 Bottom-up procedureWe propose here another procedure adapted toa formalism C with the property of projectiv-ity.
Because of this property, it is possible touse a CKY-like algorithm in the abstract for-malism Cabs.
To parse a sentence w1w2 ?
?
?wn,we construct items of the form (i, j, S) with San element of StructCabs and i and j such thatwi+1 .
.
.
wj represents the phonological form ofS.
We assume that Rules(Cabs) has only unaryand binary rules.
Then, three rules are used forfilling the chart:initialization: the chart is initialized withitems in the form (i, i+ 1, abs(Si+1,k));reduction: if the chart contains an item(i, j, S), we add the item (i, j, S?)
such thatS?
is obtained by application of a unarycomposition rule to S;concatenation: if the chart contains two item(i, j, S) and (j, k, S?
), we add the item(i, k, S??)
such that S??
is obtained by ap-plication of a binary composition rule to Sand S?.Parsing succeeds if the chart contains an itemin the form (0, n, S0) such that S0 is an elementof SatCabs .
From such an item, we can recoverall taggings that are at its source if, for everyapplication of a rule, we keep a pointer from theconclusion to the corresponding premisses.
Theother taggings are eliminated.6 ExperimentsIn order to validate our methodology, we havewritten two toy English grammars for the LGand the LTAG formalisms.
The point of thetests we have done is to observe the performanceof the lexical disambiguation on highly ambigu-ous sentences.
Hence, we have chosen the threefollowing sentences which have exactly one cor-rect reading:(a) the saw cut the butter.
(b) the butter that the present saw cutcooked well.
(c) the present saw that the man thinks thatthe butter was cut with cut well.For each test below, we give the executiontime in ms (obtained with a PC Pentium III,600Mhz) and the performance (number of se-lected taggings / number of possible taggings).6.1 Incremental procedureThe incremental procedure (IP) results aregiven in Figure 4:LG LTAGms perf.
ms perf.
(a) 1 3/36 3 3/96(b) 42 126/12 960 40 126/48 384(c) 318 761/248 832 133 104/1 548 288Figure 4: IP with destr ?
polOne may notice that the number of selectedtaggings/total taggings decrease with the lengthof the sentence.
This is a general phenomenonexplained in (Bonfante et al, 2003).6.2 Bottom-up procedureThe execution time for the bottom-up proce-dure (BUP) grows quickly with the ambiguityof the sentence.
So this procedure is not veryrelevant if it is used alone.
But, if it is used asa second step after the incremental procedure,it gives interesting results.
In Figure 5, we givethe results obtained with the destr abstraction.Some other experiments show that we can im-LG LTAGms perf.
ms perf.
(a) 2 3/36 9 3/96(b) 154 104/12 960 339 82/48 384(c) 2 260 266/248 832 1 821 58/1 548 288Figure 5: IP + BUP with destr ?
polprove performance or execution time with spe-cific methods for each formalism which are lessabstract than destr.6.2.1 Tailor-made abstraction for LGFor the formalism LG, instead of complete de-structuring, we keep some partial structural in-formation to the polarized label.
As the for-malism is projective, we record some constraintsabout the continuous segment associated with apolarity.
In this way, some neutralizations pos-sible in the destr abstraction are not possibleanymore if the two polarities have incompatibleconstraints (i.e.
lie in different segments).
Thisnew morphism is called proj.
The executiontime is problematic but it might be controlledwith a bound on the number of polarities in ev-ery multiset5 (see Figure 6)LGsentence Time(ms) Perf.
(a) 2 1/36(b) 168 5/12 960(c) with bound 6 2 364 3/248 832Figure 6: IP + BUP with proj ?
polWithout bound for sentence (c), the runningtime is over 1 min.6.2.2 Tailor-made abstraction for LTAGFor LTAG: a possible weaker abstraction (calledltag) consists in keeping, with each polarity,some information of the LTAG tree it comesfrom.
Rather than bags where all polarized la-bels are brought together, we have four kindof polarized pieces: (1) a positive label comingfrom the root of an initial tree, (2) a negativelabel coming from a substitution node, (3) acouple of dual label coming from the root andthe foot of an auxiliary tree or (4) a couple ofdual label coming from the two parts of a quasi-node.
Rules in this formalism reflect the twooperations of LTAG; they do not mix polaritiesrelative to adjunction with polarities relative tosubstitution.
Figure 7 shows that the executiontime is improved (wrt.
Figure 5).ConclusionThe examples we have presented above shouldnot be used for a definitive evaluation of partic-ular methods, but more as a presentation of theflexibility of our program: polarizing grammati-cal formalisms for abstracting them and parsing5This bound expresses the maximum number of syn-tactic dependencies between a constituent and the othersin a sentence.LTAGms perf.
(a) 6 3/96(b) 89 58/48 384(c) 272 54/1 548 288Figure 7: IP + BUP with ltag ?
polin the resulting abstract frameworks for disam-biguating lexical selections.
We have presentedone general tool (the destructuring abstraction)that may apply to various grammatical frame-work.
But we think that abstractions should beconsidered for specific frameworks to be reallyefficient.
One of our purpose is now to try thevarious tools we have developped to some largecovering lexicons.So far, we have not taken into account the tra-ditional techniques based on probabilities.
Ourpoint is that these should be seen as an otherway of abstracting grammars.
Our hope is thatour program is a good way to mix differentmethods, probabilistic or exact.ReferencesG.
Bonfante, B. Guillaume, and G Perrier.2003.
Analyse syntaxique e?lectrostatique.Traitement Automatique des Langues.
To ap-pear.P.
Boullier.
2003.
Supertagging: a Non-Statistical Parsing-Based Approach.
In 8thInternational Workshop on Parsing Tech-nologies (IWPT?03), Nancy, France, 2003,pages 55?66.P.
de Groote.
1999.
An algebraic correct-ness criterion for intuitionistic multiplica-tive proofnets.
Theoretical Computer Sci-ence, 224:115?134.A.
Joshi and B. Srinivas.
1994.
Disambiguationof super parts of speech (or supertags) : Al-most parsing.
In COLING?94, Kyoto.S.
Kahane.
2004.
Grammaires d?unification po-larise?es.
In TALN?2004, Fe`s, Maroc.M.
Moortgat.
1996.
Categorial Type Logics.
InJ.
van Benthem and A. ter Meulen, editors,Handbook of Logic and Language, chapter 2.Elsevier.G.
Perrier.
2003.
Les grammaires d?interaction.Habilitation a` diriger des recherches, Univer-site?
Nancy2.K.
Vijay-Shanker.
1992.
Using description oftrees in a tree adjoining grammar.
Computa-tional Linguistics, 18(4):481?517.
