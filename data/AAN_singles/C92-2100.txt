A Three-level Revision Model for ImprovingJapanese Bad-styled ExpressionsYoshihiko HAYASHINTT Network Information Systems Laboratories1-2356, Take, Yokosuka, Kanagawa, 238-03, JapanE-mail : hayashi@nttnlz.ntt.jpAbstractThis paper proposes a three-level revision model forimproving badly-styled Japanese xpressions, especiallyin the field of technical communication.
The model is amixture of the regeneration-based model and tilerewriting-based model.
The first level divides tongsentences, while the second level improves severalbadly-styled expressions with iterative partial rewritingoperations.
The last level performs regeneration, inwhich word ordering and punctuation to reduce tilereading ambiguity are currently involvod.
Expelimentalresults show that our model is effective in realizingpractical revision support systems.1 IntroductionIt is well known that "revision is a lmge part of thewriting process "\[ 1 \].
To provide computational aids forrevision, several style-checkers and revision supportsystems have been developed\[2\],131, ltowever, fewsystems trove the capability of providing alternativesfor the expression determined to be badly styledl41.
Inaddition, these systems imply show the alternativeexpressions, the user nlust rewrite the original senteucewhile referring to the suggested expressions.We have developed a prototype of our sentence-level Japanese revision support system callexl REVISE-SI5\].
In the system, the user can improve his/hersentences by simply selecting the most appropriatealternative from the candidates that the systemgenerates.This paper proposes athree-level revision modelfor improving badly-styled Japanese xpressions.
Wefocus on the field of technical communication.
Allarchitecture of the revision support system based on themodel is presented.
Experimental results are shown thatprove the effectiveness of the prototype system and tbevalidity of tile proposed model.2 Computational Aids to Revision2.1 Targets of the Computational AidsMisldmal6\] has summarized the key conditions forefficient echnical communication via texts as follows:(1) The reader must be able to easily understand thetext (Easy-understanding).
(2) The readers must be able to correctly understaodthe text (Correct-understanding).
(3) The contents of tile text nmst meet tile ieader'spurposes.Front this viewpomt+ the task of revision is textrewriting or regenerating to make the original textsatisfy these conditions.
The last condition is too hardto support computatiooatly; however, the first twoconditions are promising because we can apply naturallanguage processing technologies.
Therefore, weconcentrate on tile first two conditions in designing thecolnputer~assisted revision systen/.2.2 Revising as Regeneration or RewritingIs there just one computational revision model which issuitable for use?.
Two models illustrated in Fig.l arethe two extrenles and will give the basis forconstructing u practical model: one is tile Regenerationbased model (a) and the other is the Rewriting-basedmodel (b)./6'resml,tiv~ ' - -~Ik (((;?
:tleratio,I (}rltllll\]l~u'Fig.1 Two Basic Revision Models.The regeneration-based model is a strong model;namely, if all of its components are perfectlyconstructed, the output ext will be understandable andcontain no badly-styled expressions.
IIowever, if somecomponent is incomplete, there is a possibility ofsome inpet text being fatally flawed.
Therefore, forthis model to be practical, as a minimum, thefollowing two major problems olust be overcome:(1) The Analyzer must correctly capture theintermediate r presentation f the input text at acertain processing level.ACl'ES DE COLING-92, NANTEs, 23-28 nor\]r 1992 6 6 5 PUOC.
OV COLING-92, NANTES, AUG. 23-28, 1992(2) The Generator must be equipped with thecomplete set of prescriptive generation grammar.The first problem is serious, especially in revisionsupport systems, and hard to be overcome.
This isbecause input text may contain badly-styled expressionsthat prevent correct computational analyses.
Moreover,a solution to the second problem is also problematic,because no perfect sets of prescriptive generationgrammar have been developed to date.
Furthermore,even if such a set could be developed, single-passgeneration has been pointed out to have manydrawbacks in producing optimal texts/1 \].
In spite ofthese problems, the regeneration-based model is crucialfor offsetting the weaknesses of the rewriting-basedmodel.In the rewriting-based model, on the other hand,the original text is iteratively rewritten to improve achbadly-styled expression that has been detected; onlydetected expressions are revised.
This means that therewriting-based model is a weak but practical model.Even if the set of revision rules is incomplete, therevision process will not destroy the original textentirely; the worst case is that the revision will beinsufficient.
Moreover, if the set of revision rulessuccessfully cover numerous badly-styled expressions,it is expected that the system can achieve goodperformance.
Thus, if most of the considered styleimprovements can be handled with this model, weshould combine it with the regeneration-based model.3 C lass i f i ca t ion  o f  Japanese  Bad ly -s ty led  Express ionsIt is obvious front the previous discussion that theeffectiveness of the rewriting-based model depends onhow many style improvements can be described asindividual revision rules.
Thus we must investigatewhat patterns of expressions should be considered to bebadly-sty led,  especial ly  in the  technicalcommunications field, and determine how many ofthem can be improved by revision rules.Table.1 Classificalion of Typical Japanese Bad-styled Expressions.Correct-Item Understanding (C) LinguisticLevel(Example) , Easy- (Scope) Jnderstanding (E)Too Long Complex Sentences C = E SentenceUnclear Inter-clause Connective Expressions~y b '~) .L ,  ~k#~,~T~o C<E TwoClausesOperation Directing Expressions with Rever~ StepPartial Prohibitory ExpressionsC < E Two ClausesImproper Voices (lrans./intrans, passive/active)7" t~ y" ~ ~, ~ l~@'c" ~ ~" ~,,o C < E ClausesDouble Negatives~f f '~  ~' ?,?
~,' ~ ~ a:~ ~,o C < E Two ClausesAmbiguous Negatives with Comparing ExpressionC < E ClausesAmbiguous Negatives with Quantifier~'~69 7 7 4 )l~7~\[J~J'~ - Ca: ~,~  ~ 1;~, -- -- -- C < E ClausesConditional Expressions with Negated Antecedent audNegated Consequence C < E Two ClausesViolated Concord Expressions ( Adjective and Predicate )b~ L ~ fi't~ ~:- It ~ j  L ~ -?
o C = E ClausesViolated Concord Expressions ( Subject and Predicate )Light Verb ExpressionsAmbiguous Modification StructuresC<EC<ESentenceClausesC>E SentencesGeneral (G)/ ImprovableTechnical with RevisionWriting (T) RuleG NTTTGTT YTTGTTG NA~ DE COLING-92, NANTES.
23-28 AoL'r 1992 6 6 6 PROC.
OF COLING-92, Nx~rrEs, AUG. 23-28.
1992To investigate these issues, we have classifiedtypical sentence-level Japanese badly-styledexpressions.
The classification was mainly usedexamples fiom several books on technicalwritingl6\],lT\] as well as general writingl81.
Textualdata from published manuals on computer systems wasalso investigated.
The result is briefly outlined inTable.1.
The viewpoints for classification are:(1) Whether the item affects easy-understanding orcorrect-utlderstanding?
(2) In which linguistic structure does tbe item occur?
(3) Is the item general or peculiar to technicalwriting?
(4) Can the item be improved with an individualrevision rule?The investigation showed that itelns peculiar totechnical writing mainly affect easy-understanding,while general items principally affect correct-understanding.
In addition, most of the items peculiarto technical writing can be improved by the applicationof discrete revision rules.
Fig.2 exemplifies a revisionrule for a typical badly-styled expression pectdiar totechnical writing; the expression directs the user'sactions, but the actions ,are described in reverse order.We can identify most badly-styled expressions peculiarto technical writing by referring to particular partialsyntactic structure patterns.
As shown irt Fig.2, suchpatterns allow bad-styles to be detected and rewritten.Therefore, it is valid to adopt he rewriting-based modelas the center component of our model.Type of the expression: Directing the user's operationensiun verb/ i ~ Z ' ~ ) )Fig.2 A Partial Rewriting Operation asStructural Conversion withLexical Operations.4 The Three-level Revision Model andthe Prototype System4.1 The ModelThe previous section has shown that tile rewriting-based model is applicable for most of the styleimprovements peculiar to technical writing.
Table.l,however, shows that there are a couple of items whichare poorly handled by the model.
311ey are:(a) excessively long complex sentences, and(b) ambiguous modification structures.These items cannot be detected and corrected by theparticular evision rules, because they do not haveunique syntactic patterns.
These errors cannot becharacterized by particular words aud/or particularlinguistic attributes such as, tnodality, tense, etc.. Thusthese badly-styled xpressions cannot be easily correctedwith the particular structural conversion operations.We are proposing a three-level revision modelwhich combines the rewriting-based and regeneration-based models.
The first level is for dividing excessivelylong complex sentences and is based on theregeneration-based model at the morphological level.Tile second level is for improving several badly-styledexpressions and is based on tile rewriting-based model.Tbe third level is lor syntactic/semantic levelregeneration, i  which word ordering and punctuating toreduce tile uumber of structural ambiguities areinvolved.Our model is a three-level sequential model.ltere, the order of the components has the followingcomputational significance:(1) As shown in 5.1, excessively long complexsentences can be identified and divided withmorphological level informationl9 I.
(2) If long sentences arc divided at the early stage ofthe total process, processing loads for the remainingoperations are significantly reduced.
(3) The style improving process hould precede thesyntactic/semantic level regeneration process,because tile regeneration process hould stmt with awell-formed synlactic/sentantic s ructure.4.2 Issues in Improving StyleMost style improvements can be realized by sequentialapplication of the revision rules, However, there aretwo major design issues.
One is how to feedback theresult of each rewriting operation to the initiallyproduced analysis results.
The other is the handling ofstructural ambiguity.
That is.
if the ambiguity is notelinrinated, combinatorial explosion is inevitable inmany aspects of the system.
On tile other hand, overallstructural disambiguation is compotationally expeusivedue to processes such as selrlanlic analysis and contextanalysis.
Moreover, uniform application of theseprocesses violates one of the basic requirements of anywriting aid; that is, it is unacceptable to incur highcomputational costs by processing ood expressionsthat require no revision.We have three approaches to deal with theseissues:(1) First, we detect all of the potential bad styles whileaccepting structural ambiguity.
Each bad style isconnected to an associated partial rewriting operationspecified by its pattern.
These operations are defined illa rule-base, so that the detection process is theactivation of these rules.
(2) We then try to apply activated rules under anexpectation-driven co trol strategy.
That is, file systemschedules tile order of rule applications using a prioritythat reflects how important tile rewriting operation is inimproving the sentence.
The scheduled application of arule initiates the structural disambiguation of theapplicable expression.
(3) During the revision process, internal data, such asthat generated by morphological or syntactic analysesand by the bad-style detection pnv.
:ess, varies as a resultof the p~u-tial rewriting operations.
To avoid duplicativeACRES DE COLING-92, NANTES, 23-28 AO~' 1992 6 6 7 PROC.
OF COLING-92, NANTES.
AUG. 23-28, 1992analysis and detection, we accurately know what hasbeen revised, and ensure the consistency of the internaldata with respect o the revision.
This scheme solvesthe feedback problem mentioned before.4.3 The Architecture of the PrototypeSystemFigure.3 shows the architecture of the prototype systemREVISE-S based on the three-level revision model andthe above design principles.I Morphological 1Analyzer II Se~ic l  Diy!d"r. -~-  ( \ [e~: :  nee Dividing )Dia~gnoser Ilt.'""
(R:!~o: i?n Rules~- ~  Revision Process Controller \[i."
I ~  /iDa a Co s ste Ic~li I R?
"d'?r I-~ '~'Ir-'--# t~anager1The Morphological Analyzer divides thesentence string into word sequences.
At this time, basicoperational units (called 'Bunsetsu') are recognized.
Thesentence dividing algorithm in the Sentence Dividorutilizes the result of the morphological nalysis, and isoutlined in 5.1.
The sentence dividing process isrecursively invoked until each divided sentence satisfiessome predefined condition that prevents furtherdivision.Next, the Syntactic Analyzer finds all possiblebinary relations between modifier Bunsetsu andmodified Bunsetsu.
The result is represented in anetwork called a Kakari-Uke network which representsall possible syntactic structure intensionally.The Diagnoser, which utilizes the detectioncounterpart of the revision rule, finds all possiblebadly-styled expressions.
The result semi-fires theconversion counterpart of the associated revision ruleand constructs he agenda which lists the semi-fired ruleinstances.
The Revision Process Controller sequencesthe successive execution of partial rewriting operations,and the Data Consistency Manager maintainsconsistency between the current sentence string and theinternal data during the dynamic rewriting process.Finally, the regeneration process is invoked togenerate a sentence with less reading ambiguity.5 Generat ing  A l te rnat ive  Express ionsEach component in our revision model generatesalternative expressions for the user.
This section givesa brief outline of the generation of alternativeexpressions in each level component.5.1 Dividing Long SentencesBefore dividing a long complex sentences, first thecomponent must decide whether the sentence should bedivided or not.
If the sentence is so determined, then,the component must identify the division point.
Thetop level clause boundary indicates the division point.Finally the divided sentences must be generated.
Theseprocesses can be conducted with morphological levelinformation; that is, they do not require full syntacticparsing or any semantic interpretation.In the first step, the decision is made with adiscriminate function that computes the weighted sumof the number of characters, the number of Bunsetsusand the number of predicates (verbs and adjectives), etc..Weighting coefficients and the threshold value fordecision were determined through experiments.t~f~ b?~"6 t. -~ '~-~c  b7"~o (a)Top Level Clause Boundary(b-l)The process advances while saving the result.Thus the result remains, even if error occurs.
(b-2)The result remains, even if error occurs.Because the process advances while saving the result.Fig.4 An Example of the Sentence Division.The second step roughly analyzes the iutra-sentence connective structurel9l and produces ashallowlevel intermediate representation as illustrated inFig.4(a).
The key to this process is the inter-predicatesdependency relation analysis which utilizes a set ofdependency rules.
These rules are based on theclassification fpredicate expressions (including modal,tense, aspectual suffixes) in terms of the strength informing connective structures.
One significant point inthe process is that the connective structure must not betully disambiguated, because the main purpose of theanalysis is identification of the division point; namely,there are cases where the division point can be uniquelyidentified, nevertheless the connective structure isambiguous.AcI'~ DE COLING-92, NA~,  23-28 AOt~ 1992 6 6 g FROC.
OF COLING-92, NANTES, AUG. 23-28, 1992The final step generates tile divided sentencesstring by applying eneration rules to tile intemmdiaterepresentation.
Fig.4(b) gives tbe generated alternatives((b-1),(b-2)) for the example in Fig.4(a).
In the process,ordering of the divided sentences aml choice of theconjunctive expression which provide cohesion betweendivided sentences are major considerations.
In Fig.4(a),two tOll level clauses are connected with a causalrelation.
Thus associated conjunctive expressions(underlined in Fig.4(b)) are generated according to tileaheruatives in sentence ordering.
To determine which isbetter, contexual processing is required; howevei thedetermination is currently left to the user's election.5.2 Rewriting through Part ial  Structura lConvers ionsMain stream of the algorithm in style improvementcomponent is smnmarized in Fig.5.
Tile rest of thissubsection briefly introduces topics in each step (detailsare given in \[5\]).Detect all Possible Bad-styled Expression ;Construct the Agenda andthe Revision Process Manager ;while (1") doSelect an unmarked rule instance with the highestpdodty from the agenda ;if there is no such rule instance thenbreak ;Test its presupposition ;if the presupposition holds then {Apply the associated partial rewriting operation ;if the operation succeeds thenAnalyze the difference andmaintain data consistency ;}Mark the instance as "done" ;end while ;Fig.5 Main Stream of the Algorithm inStyle Improvement Component.Detection of Badl_v-stvled Ext~ressionsThe Diagnoser detects badly-styled expressions liom theKakari-Uke network which contains all detectablesyntactic structures.
The process is the semi-firing ofthe partial rewriting rules, because ach detected badly-styled expression is associated with a rewriting rulespecified by the type of the bad-style pattern.
'Semi-firing' means that some of the focused rules aredeactivated later in response to on-demand structuraldisambiguation or partial rewriting.
From thecomputational viewpoint, the detection process houldbe regarded as a sort of feature xtraction process.
Thisallows the diagnosis process to be realized as aninterpretation of the data-flow network; namely, theterminal node finally activated indicate which associatedbadly-st~,led expression has been detected and node owndata provides justification.~onstructing A enda nd Revisit~tl process ManaeerThe rules semi-fired through the process described inthe previous section are instantiated based on theirjustifications.
The instances are then placed on theagenda, These justifications specify tile partial syntacticstructures concerned with the detection patterns.Therefore, these are presuppusitions to tile applicationof tile associated rewriting operations.A justification is represented asa conjunction ofpredicales for ulodification relations between twoBunsetsus (called tile Kakari-Uke condition) andpredicate on the Bunsetsu properties (called theBuosctsu property condition).
For instance, theconjunctive formula stated below is thc justification ofthe detection pattern shown in Fig.2.+iTlt~ll~;i(irl _ve'rb(X) A Ib0f0~0 NP(Y) A~dxrecL ive  (?,) A moc\]i ~y (X, Y) A lllodi \[y (Y~ Z)Tlle literal of lhe formula is called a primitivecondition.
Litcrals nlust be neated as a sort ofassumption, because all of tbenl have the possibility ofbecoming unsatisfied ue to structural disambiguationand/or partial rewriting operations.The Revision F'rocess Manager lot managing thepresuppositions is constructed at the sanle tinle as theagenda.
It bolds a list of Bunsetsu property conditionsand a list of the Kakari-Uke conditions.
The datastructure is suitable for nlanaging all presuppositionssystematically because rule instances lhat sllare thesame primilive condition are inlnlediately foundthrough a data slot wtfich is indexed by the primitiveconditions, and contains pointers to the rule instances.EXp?
?tation-Driverl Control and Ot t -d?~DisambiguationThe priorities preassigned 1o the instances on tbeagenda sequence the successive application of partialrewriting operations witbin the revision process.
\]'hatis, important rewriting operations arc assigned highpriority values, and are scheduled to for earlierapplication, even if their presuppositions are notconfirmed prior to their application.
To actually apply ascheduled rewriting operation, its presupposition istested first, At this tinle, the Disambiguator whichinvolves tile application el heuristic disambiguationrules and/or user-interactions is inw~ked, aod tileminimum range of structural ambiguities i resolved inexpectation of applying the scheduled rewritingoperation.Partial Rewr i t ing~If the presupposition is confirmed to be satisfied, theassociated partial rewriting operation is applied.
Beforecommencing any partial rewriting operation, a sub-network concerned with scope of the rewriting is firstextracted fi'om the Kakari-Uke network according to thegiven scope name such as 'simple sentence' and 'nounphrase', etc.. Secood, the extracted sub-network isconverted into a sel of dependency trees, wberein eachelement is an explicitly represented possible syntacticstructure.
Third, tile partial rewriting ride defined by thestructural conversion with the lexical operations isapplied to lhe trees.
Alternative expressions aregenerated from rule application.
A partial rewritingoperation is completed by user selection or rejection ofthe generated expressions.
The partial dependency treesgiving tbe selected partial expression are then convenedto the sub-network agaiu, and restored in the Kakari-ACRES DE COLJNG-92, NANTES, 23-28 ho~r 1992 6 6 9 P~.oc.
OF COLING-92.
NANTES, AUG. 23-28.
1992Uke network.
This process is iterated until the agendahas no more applicable rule instances.Maintenance of Data Consistencv with Cmtstrainter_erouagali~Because the structural disambiguation a d the partialrewriting operations affect internal data, the systemmust maintain the consistency of internal datawhenever these operations are invoked, Brand-newinformation may be obtained as a result of the invokedoperations, i.e., the acceptance/rejection of somemodification or the change of some Bunsetsu structure.The new information can be considered as newly addedconstraints o that data consistency can be maiutainedby propagating these constraints to the dependentintemal data.For instance, if the Revision Process Manager isnotified by the Difference Analyzer that a particularBunsetsu no longer has a certain property according to aparticular partial rewriting operation, the rule instanceswhich share the condition are immediately deactivated.Another typical example of the constraint propagationis created by structural disambiguation.
If some Kakari-Uke relation is confirmed by the Disambiguator,exclusive Kakari-Uke relations are rejected at this time.This causes the deactivation of the rule instances whichhave these rejected Kakari-Uke relations as theirprimitive conditions,5.3 Word Ordering and Punctuating asRegenerationAppropriate word ordering and punctuating help reducethe ambiguity in reading.
Furthermore, it increasesreadability.
In Japanese, however, word order isrelatively free at the sentence constituent level and thereare no strict grammatical restrictions on punctuation.Thus optimal word order and punctuation can not bedecided only with syntactic information; reading andwriting preferences must be considered.Our regeneration algorithm takes the syntacticstructure (dependency tree structure) as its input andregenerates a new syntactic structure with less readingambiguities.
The algorithm employs the followingheuristics based on the preferences in word ordering\[ 10J:(1) Constituents which include the thematic marker(post position 'ha') are put at the head of thesentence, and punctuation marks are put after them.
(2) Punctuation marks are placed on clauseboundaries.
(3) Heavier constituents (containing moreBunsetsus) are made to precede light constituents onthe same syntactic level.The algorithm first determines the constituent whichincludes the thematic marker.
The constituent ispositioned at the head of the sentence and a punctuationmarker (Japanese comma) follows it.
Next, thepunctuating mark is added to the Bunsetsu whichindicates the top level clause boundary.
Then, at eachsyntactic level, constituents are sorted by their weight.Of course, the initially located constituents hat includethematic markers are not moved by this constituentsorting operation.
Finally, if the regenerated sentencestring differs from the original, it is submitted for userconfirmation.Figure.6 gives an example.
In this example, B2is the Bunsetsu that contains the thematic marker andB5 indicates the top-level clause boundary.
Accordingto tile regeneration algorithm, the segment (B1-B2) isplaced at the head of the sentence and the Japanesecomma is added.
The segment (B4-B5) precedessegment (B3) because of its weight (two Bunsetsus) andanolher comma is added,B1 B2 B3 B4 B5 B6This device will work manually, if the automatic-mode hasbeen canceled.Fig.6 An Example of the Regeneration.6 Evaluat ionAn evaluation experiment toshow the effectiveness ofthe prototype system and the validity of the proposedrevision model was made by using 113 sentences takenfrom published manuals and constructed examples.
Thepoints for evaluation were how much the the systemcontributes to easy-understanding and correct-understanding.6.1 ReadabilityThere is no established way to evaluateunderstandability of texts.
In this paper, we treatedunderstandability as roughly equivalent to readability,because readabil i ty is encompassed byunderstandability.The readability measure used in the experimentwas proposed by Tateishi,et.al\[ 11\] for Japanese texts.The method computes the readability with thefollowing formula which utilizes surface levelinformation.
The term RS' indicates the readability;higher values indicate the text is more readable.
Thecoefficients were determined through statistical analysesto normalize the mean value to 50 and the standarddeviation to 10.RS' = -0.12 x Is - 1.37 x la + 7.4 x Ih - 23.18 x Ic- 5.4 x lk -4.67 x cp + 115.79These terms are, Is: length of tile sentences,la:mean length of alphabetical characters run, lh:mean length of Hiragana characters un, lc: meanlength of Kanji character runs, Ik: mean length ofKatakana character runs, cp: mean number ofcommas per sentence,The system increased the RS' value by 42.5 to49.0.
This means that the readability was increased bythe system.
Sentence division and punctuation were themain contributors to this improvement.6.2 Structural AmbiguityIt is also difficult to quantitatively estimate correct-understanding.
In this paper, we estimate the level ofcorrect-understanding from the structural ambiguity,because structurally ambiguous sentences/expressionsAcrEs DE COLING-92, NAmXS, 23-28 not~ 1992 6 7 0 PROC.
OF COLING-92, NANTEs, AU6.23-28, 1992obviously degrade correct-understaoding, ltowever,measuring systematic\[121 or reading ambiguity witt~algorithms is still a difficult problem.
Thus we usecomputational mbiguity to approximate systematicambiguity.
The Japanese dependency structure analyzerdeveloped by Shirai\[13\] was used tot this purpose.The original texts led to 18.4 analyses persentence on average.
After the texts were corrected bythe prototype system, only 7.9 analyses were produced.This means that the system successfully reduced tbeamount of structural mbiguity.
'FILe major contributorsto this improvement were sentence division and wordordering.
Style improvements leading tn drastic hangesin the syntactic structure also contributed to tbisimprovement.Incidentally, after revision, only 4.9 possiblesyntactic structures remained per sentence on averagewithin the internal data of the system.
This is a fair bitless than the result from the reanalysis of the revisedtext.
Thus where tile revised text is processed further(for instance, translation, summarization), the use ofthe internal data will help to reduce the effect ofdisambiguations on the remaining processes.6.3 Validity of the ModelThe validity of the proposed revision model was notdirectly evaluated in the experiments, itowever, thevalidity of the component order is evident, becausestructural mbiguity is continuously reduced with eachprocessitlg step.
If the style improvement componentpreceded the sentence division component, the structuralconversion processes to improve the badly-styledexpressions would handle numerous fruitless yntacticstructures and generate too many inappropriatealternative expressions.
Moreover, if thesyntactic/semantic regeneration component l)receded thestyle improvement component, each structuralconversion rule would be constructed as to preserve theword order and punctuation marks; this would afli~ct thewritability of the rules.7 Concluding RemarksThis paper has proposed a three-level revision model forimproving badly-styled Japanese expressions aodintroduced a prototype revision support system basedon the model, Experimental results show that thesystem successfully improves the readability of textsand reduces tire contained structural ambiguities.
Thethree-level model effectively realizes apractical revisionsupport system.However, a remaining requirement from the realtechnical writing field is that expert knowledge fromtechnical writers hould be accumulated to cover a widervariety of badly-styled expressions.
In addition,contextual information must be handled, both forproviding contextually adequate alternative expressionsand lbr improving contextually-poor expressions andrhetorical structures.The proposed model and the prototype system ~sits embodiment, will give a powerful foundation tosome other applications, including intellectual tutoringsystems and pre-editing systems for machine-translation.AcknowledgmentsThe author wishes to exteod his gratitude to Gen-ichiroKikui, who developed the rewriting rule applicationmechanism and to Eiji Takeishi, for his contributionsin developing the sentence division module.
Thanks arealso due to the members of the Message ProcessingSystems l,aboratory Ibr their helpful discussions,ReferencesI l l  Vaughan,MM.
and McDooald.D.D.
(19881 AModel of Revision in Natural l,anguage GenerationSystem, t'roc, t~f the 26th Annual Meeting of theAssociation for Computational Linguistics, 90-96.121 Thurmair,G.
(1990) Parsing for Grammar and StyleChecking, Proc.
of the 13th International ConJ~renceon Computational I,inguistics, 365-370.131 Richardson,S.D.
and Borden-Harder, L.C.
(19881"File Experience of Developing a l,arge-scale NaturalLanguage Text Processing System: CRITIQUE, Proc.of the 2nd Conference on Applied Natural LanguageProcessing.
195-202.141 Hakomori,S.
et at.
(19881 A Correction System forJapanese Text (in Japanese).
IPS, I SIG-NL,65-7,\[ 5 \[ l layashi,Y.
(1991 ) Improving Bad Japanese WritingStyles through Partial Rewriting Operations, Proc.ofthe Natural Language Processing PaciJic RimSymposium, 30-37.\[6\] Mishimu,l I.
(I 99(/) Technical Writingjor Engineersand Students (in Japanese), Kynuritsu-Shuppan, Tokyo.\[7J Technical Communication Associates (FAs.)
(1988)An Exciting Stylebook j?
)r Ducumentation (inJapmLese), NIKKEI-BP, Tokyo.18\] lwafuchi,E.
(Eds.)
(19881 Bad styles tile 3rd FAition(in Japanese), Nihon-llyouronsya, Tokyo.\[9\] Takeishi,E.
and llayasbi,Y.
(19901 A Method toDecide Division Points of Japanese Complex Sentences(in Japanese), Proc.
of the 4th Annual ConJe.renee ofJSAI, 9-6,\[10l Saeki,T.
(1975) Word Order in Modern Japanese(in Japanese), Kasama-syoin, Tokyo.\[11 \] Tatcishi,K.
et al (1988) Derivation of Readabilityl.
'ormula of Japanese Texts (in Japanese).
IPSJ SIG-DPHI, 18-4.\[121 Hindle,D.
and Rooth.M.
(1991) StructuralAmbiguity and Lcxical Relations, Proc.
of the 29thAnnual Meeting of the ACL, 229-236.I 131 Shirai,S.
(19871 Table-driven Japanese PhraseDependency Analysis in Japanese-to-EnglushTranslation System ALT-J/E (in Japanese), 7'he 34thAnmtal Convension IPS Japan, 5W~5.Acids DE COLlNG-92, NAN'rF.S, 23-28 AOl~r 1992 6 7 1 PROC.
OF COLING-92, NANTES, AUO.
23-28, 1992
