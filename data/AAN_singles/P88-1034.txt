COMBINATORY CATEGORIAL  GRAMMARS:  GENERATIVE  POWER ANDRELAT IONSHIP  TO L INEAR CONTEXT-FREE REWRIT ING SYSTEMS"Dav id  J. Weir  Arav ind K. JoshiDepar tment  o f  Computer  and Informat ion ScienceUnivers i ty o f  PennsylvaniaPhi ladelphia, PA 19104-6389Abst rac tRecent results have established that there is a family oflanguages that is exactly the class of languages generatedby three independently developed grammar formalisms:Tree Adjoining Grammm~, Head Grammars, and LinearIndexed Grammars.
In this paper we show that Combina-tory Categorial Grammars also generates the same classof languages.
We discuss the slruclm'al descriptions pro-duced by Combinawry Categorial Grammars and com-pare them to those of grammar formalisms in the class ofLinear Context-Free Rewriting Systems.
We also discusscertain extensions of CombinaWry Categorial Grammarsand their effect on the weak generative capacity.1 IntroductionThere have been a number of results concerning the rela-tionship between the weak generative capacity (family ofstring languages) associated with different grammar for-malisms; for example, the thecxem of Oaifman, et al \[3\]that Classical Categorial Grammars are weakly equivalentto Context-Free Grammars (CFG's).
Mote recently it hasbeen found that there is a class of languages slightly largerthan the class of Context-Free languages that is generatedby several different formalisms.
In pardodar, Tree Ad-joining Grammars (TAG's) and Head Grammars (HG's)have been shown to be weakly equivalent \[15\], and theseformalism are also equivalent to a reslriction of IndexedGrammars considered by Gazdar \[6\] called Linear In-dexed Grammars (LIG's) \[13\].In this paper, we examine Combinatory CategorialGrammars (CCG's), an extension of Classical Catego-rial Grammars developed by Steedman and his collab-orators \[1,12,9,10,11\].
The main result in this paper is*This work was partially mpported by NSF gnmts MCS-82-19116-CER.
MCS-82-07294, DCR-84-10413, ARO grant DAA29-84-9-0027.and DARPA gnmt N0014-85-K0018.
We are very grateful to MarkSteedmm, \]C Vijay-Shanker and Remo Pare~:hi for helpful disctmiem.that CCG's are weakly equivalent to TAG's, HG's, andLIG's.
We prove this by showing in Section 3 that Com-binatory Categorlal Languages (CCL's) are included inLinear Indexed Languages (LIL's), and that Tree Adjoin-ing Languages (TAL's) are included in CCL's.After considering their weak generative capacity, weinvestigate he relationship between the struclzwal descrip-tions produced by CCG's and those of other grammar for-malisms.
In \[14\] a number of grammar formalisms werecompared and it was suggested that an important aspectof their descriptive capacity was reflected by the deriva-tion structures that they produced.
Several formalismsthat had previously been descn2~d as mildly context-sensitive were found to share a number of properties.
Inparticular, the derivations of a grammar could be repre-senled with trees that always formed the tree set of acontext-free grammar.
Formalisms that share these prop-erties were called Linear Context-Free Rewriting Systems('LCFRS's) \[14\].On the basis of their weak generative capacity, it ap-pears that CCG's should be classified as mildly context-sensitive.
In Section 4 we consider whether CCG's shouldbe included in the class of LCFRS's.
The derivation treesets traditionally associated with CCG's have Context-freepath sets, and are similar to those of LIG's, and thereforediffer from those of LCFRS's.
This does not, however,nile out the possibility that there may be alternative waysof representing the derivation of CCG's that will allowfor their classification as LCP'RS's.Extensions to CCG's have been considered that enablethem to compare two unbounded sU'uctures (for example,in \[12\]).
It has been argued that this may be needed inthe analysis of certain coordination phenomena in Dutch.In Section 5 we discuss how these additional featuresincrease the power of the formalism.
In so doing, wealso give an example demonstrating that the Parenthesis-free Categorial Grammar formalism \[5,4\] is moze pow-erful that CCG's as defined here.
Extensions to TAG's(Multicomponent TAG) have been considered for similar278reasons.
However, in this paper, we will not investigatethe relationship between the extension of CCG's and Mul-ticomponent TAG.2 Descr ip t ion  o f  Formal i smsIn this section we describe Combinatory Categorial Gram-mars, Tree Adjoining Grammars, and Linear IndexedGrammars.2.1 Combinatory  Categor ia i  GrammarsCombinatory Categorial Grammar (CCG), as defined here,is the most recent version of a system that has evolved ina number of papers \[1,12,9,10,11\].A CCG, G, is denoted by (VT, VN, S, f ,  R) whereVT is a finite set of terminals (lexical items),VN is a finite set of nonterminals (atomic categories),S is a distinguished member of VN,f is a function that maps elements of VT U {e} tofinite subsets of C(VN), the set of categories*, whereV N g C(VN) andif CI, C 2 e C(VN) then(el/c2) E C(VN) and (c1\c2) E C(VN).R is a finite set of combinatory rules, described below.We now give the combinatory rules, where z, y, z arevariables over categories, and each Ii denotes either \ or/ .1. forward application:2. backward application:u (z\u) - .
z3.
generaliT~d forward composition for some n _> 1:(...
I.z.)
- .4. generalized backward composition for some n E 1:(...(yll~x)12... I-=-) (~\~) --'(--.
(~11=x)12...
I~z.
)z Note that f can assign categoric8 to the empty suing, ~, though,to our knowledge, this feature has not been employed in the linguisticapplications ?~ C'CG.Restrictions can be associated with the use of the com-binatory rule in R. These restrictions take the form ofconswaints on the instantiations of variables in the rules.These can be constrained in two ways.1.
The initial nonterminal of the category to which z isinstantiated can be restricted.2.
The entire category to which y is instantiated can beresuicted.Derivations in a CCG involve the use of the combi-natory rules in R. Let the derives relation be defined asfollows.~c~ F ~clc2~if R contains a combinawry rule that has czc2 --* c asan instance, and a and ~ are (possibly empty) strings ofcategories.
The string languages, L(G), generated by aCCG, G', is defined as follows.
{a l .
.
.c, ~ f(aO, a, ~ VT U {~}, 1_< i _< .
}Although there is no type-raising rule, its effect can beachieved to a limited extent since f can assign type-raisedcategories to lexical items, which is the scheme mployedin Steedman's recent work.2.2 Linear Indexed GrammarsLinear Indexed Grammars (LIG's) were introduced byGazdar \[6\], and are a restriction of Indexed Grammarsintroduced by Aho \[2\].
LIG's can be seen as an exten-sion of CFG's in which each nonterrninal is associatedwith a stack.An LIG, G, is denoted by G = ( Vjv , VT , Vs , S, P) whereVN iS a finite set of nontenninals,VT is a finite set of terminals,Vs is a finite set of stack symbols,S E VN is the start symbol, andP is a finite set of productions, having the formA\[\] -A\[..1\] -* A I \ [ \ ] .
.
.A i \ [ " \ ] .
.
.A .
\ [ \ ]A\[..\]--a~\[\]...Ad..t\]...A.\[\]where At .
.
.
.
A.  E VN, l E Vs, and a E VT O {~}.The notation for stacks uses \[.
?/\] to denote an arbi-Wary stack whose top symbol is I.
This system is calledL/near Indexed Grammars because it can be viewed as a279restriction of Indexed Grammars in which only one of thenon-terminals on the right-hand-side of a production caninherit he stack from the left-hand-side.The derives relation is defined as follows.~A\[Z,, ... ht\]~ ~ ~A,\[\] ... A,\[Z,,... t~\].., a, \ [ \ ]~if A\[.. l\] - .
~,\[\] .
.
.A,\[ .
.
\] .
.
.A,\[\]  ~ PotA\[lm.., l l \]~ o =~ aA l \ [ \ ] .
.
.
Ai\[lm... i l l \ ] .
.
.
An\[\]/~if A\[..\] --.
A , \ [ \ ] .
.
.A , \ [ - .
Z\]...A,,\[\] ~ P: c,a\[ \]a ~ ,maif A \ [ \ ] - - .a~PThe language, L(G), generated by G is2.3 Tree Adjo in ing GrammarsA TAG \[8,7\] is denoted G = (VN, VT, S, I, A) whereVN is a finite set of nontennlnals,VT is a finite set of terminals,S is a distinguished nonterminal,I is a finite set of initial trees andA is a finite set of auxiliary trees.Initial trees are rooted in S with w E V~ on their fron-tier.
Each internal node is labeled by a member ofVN.Auxiliary trees have tOlAW2 E V'~VNV~ oll their fron-tier.
The node on the frontier labeled A is calledthe foot node, and the root is also labeled A. Eachinternal node is labeled by a member of VN.Trees are composed by tree adjunction.
When a tree7' is adjoined at a node ~/in a tree .y the tree that results,7,', is obtained by excising the subtree under t/fromand inserting 7' in its place.
The excised subtree is thensubstituted for the foot node of 3 / .
This operation isillustrated in the following figure.~': $r'."
xY": sEach node in an auxiliary tree labeled by a nonterminalis associated with adjoining constraints.
These constraintsspecify a set of auxiliary trees that can be adjoined atthat node, and may specify that the node has obligatoryadjunction (OA).
When no tree can be adjoined at a nodethat node has a null adjoining (NA) constraint.The siring language L(G) generated by a TAG, G, isthe set of all strings lYing on the frontier of some tree thatcan be derived from an initial trees with a finite numberof adjunctions, where that tree has no OA constraints.3 Weak  Generat ive  Capac i tyIn this section we show that CCO's are weakly equivalentto TAG's, HG's, and LIO's.
We do this by showing theInclusion of CCL's in L1L's, and the inclusion of TAL's inCCL's.
It is know that TAG and LIG are equivalent \[13\],and that TAG and HG are equivalent \[15\].
Thus, the twoinclusions hown here imply the weak equivalence of allfour systems.
We have not included complete details ofthe proofs which can be found in \[16\].3.1 CCL's  C LIL'sWe describe how to construct a LIG, G', from an arbi-trary CCG, G such that G and G' are equivalent.
Letus assume that categories m-e written without parentheses,tmless they are needed to override the left associativity ofthe slashes.A category c is minimally parenthesized if andonly if one of the following holds.c= A for A E VNc = (*oll*xl2... I,,c,,), fo r ,  >_ 1,where Co E VN and each c~ is mini-mally parenthesize~It will be useful to be able to refer to the components ofa category, c. We first define the immediate componentsof c.280when c = A the immediate component is A,when c = (col:xh...I.c.)
the immediatecomponents are co, cl,.
?
?
,  e.,,.The components of a category c are its immediate com-ponents, as well as the components of its immediate com-ponents.Although in CCG's there is no bound on the numberof categories that are derivable during a derivation (cate-gories resulting from the use of a combinatory ule), thereis a bound on the number of components hat derivablecategories may have.
This would no longer hold if unre-stricted type-raising were allowed during a derivation.Let the set Dc(G) he defined as follows.c E De(G) if c is a component of d wherec' E f (a)  for some a E VT U {e}.Clearly for any CCG, G, Dc(G) is a finite set.
Dc(G)contains the set of all derivable components because forevery category e that can appear in a sentential form ofa derivation in some CCG, G, each component of c is inDc(G).
This can be shown, since, for each combinatoryrule, ff it holds of the categories on the left of the rulethen it will hold of the category on the right.Each of the combinatory rules in a CCG can be viewedas a statement about how a pair of categories can be com-bined.
For the sake of this discussion, let us name themembers of the pair according to their role in the rule.The first of the pair in forward rules and the second ofthe pair in backward rules will be named the primary cate-gory.
The second of the parr in forward rules and the firstof the pair in backward rules will be named the secondarycategory.As a resuit of the form that combinatory rules can takein a CCG, they have the following property.
When acombinatory ule is used, there is a bound on the numberof immediate components that he secondary categories ofthat rule may have.
Thus, because immediate constituentsmust belong to De(G) (a finite set), there is a bound onthe number of categories that can fill the role of secondarycategories in the use of a combinatory ule.
Thus, theae isa bound on the number of instantiations of the variables yand zi in the combinatory ules in Section 2.1.
The onlyvariable that can be instantiated to an unbounded numberof categories i  z.
Thus, by enumerating each of the finitenumber of variable bindings for y and each z~, the numberof combinatory ules in R can be increased in such a waythat only x is needed.
Notice that z will appears onlyonce on each side of the rules (Le, they are linear).We are now in a position m describe how to representeach of the combinatory ules by a production i  the LIG,G'.
In the combinatory ules, categories can be viewedas stacks since symbols need only be added and removedfrom the right.
The secondary category of each rule willbe a ground category: either A, or (AIlcl\[2... \[ncn), forsome n >__ I.
These can be represented in a LIG as A\[\]or A\[hCl\[2... InCh\], respectively.
The primary categoryin a combinatory ule will be unspecified except for theidentity of its left and rightmost immediate components.Its leftmost component is a nonterminal, A, and its right-most component is a member of De(G) ,  c. This can berepresented in a LIG by A\[.. el.In addition to mapping combinatory ules onto produc-tions we must include productions in G' for the mappingsfrom lexical items.If c E f ( a ) where a E VT U {e} thenif e = A then A\[\] ...* a E Pif c - ' (ahc l l2 .
.
.
I ,c , )  thenA\[llC112.." \]nOn \] .-o, a e PWe are assuming an extension of the notation for produc-tions that is given in Section 2.2.
Rather than adding orremoving a single symbol from the stack, a fixed numberof symbols can be removed and added in one produc-tion.
Furthermore, any of the nonterminals on the rightof productions can be given stacks of some fixed size.3.2 TAL 's  C CCL 'sWe briefly describe the construction of a CCG, G' froma TAG, G, such that G and G' are equivalent.For each nonterminal, A of G there will be two nonter-minals A ?
and A c in G'.
The nonterminal of G' will alsoinclude a nonterminal Ai for each terminal ai of the TAG.The terminal alphabets will be the same.
The combinatoryrules of G' are as follows.Forward  and  backward  app l i ca t ion  are  restr icted tocases where the secondary category is some X ~, andthe left immediate component of the primary cate-gory is some Y?.Forward and backward composition are restricted tocases where the secondary category has the form((XChcl)\[2c2), and the left immediate componentof the primary category is some Y%An effect of the restrictions on the use of combinatoryrules is that only categories that can fill the secondary oleduring composition are categories assigned to terminals byf.
Notice that the combinatory ules of G' depend only281on the terminal and nonterminal phabet of the TAG, andare independent of the elementary trees.f is defined on the basis of the auxiliary trees in G.Without loss of generality we assume that the TAG, G,has trees of the following form.I contains one initial tree:$ OAIThus, in considering the language derived by G, weneed only be concerned with trees derived from auxiliarytrees whose root and foot are labeled by S.There are 5 kinds of auxiliary trees in A.1.
For each tree of the following form includeA"/Ca/B ~ ~ f(e) and A?/C*/B + ~ f(OA NAB OA C OAI IAI~ e2.
For each tree of the fonowing form includeAa\Ba/C ?
E f(e) and A?\Ba/C ?
E f(e)A NABOA C OAI IA NA3.
For each tree of the following formAa/B?/C e.E f(e) and Ae/Be/C ?
E f(e)ANAIB OAICOAIA NAinclude4.
For each tree of the following form include A?\AI Ef(e), A*\AI E f(e) and A, E f(a,)ANAal A NA5.
For each tree of the following form include A ?/Ai Ef(e), AC/Ai E f(e) and Ai E f(al)ANAA NA a iThe CCG, G', in deriving astring, can be understood asmimicking a derivation in G of that suing in which treesare adjoined in a particular order, that we now describe.We define this order by describing the set, 2~(G), of alltrees produced in i or fewer steps, for i >_ 0.To(G) is the set of auxiliary trees of G.TI(G) is the union of T~_x(G) with the set of all trees 7produced in one of the following two ways.1.2.Let 3 / and 7" be trees in T~-I(G) such thatthere is a unique lowest OA node, I?, in 7' thatdoes not dominate the foot node, and 3/' has noOA nodes.
7 is produced by adjoining 7" atin 7'.Let 7' be trees in T~-I(G) such that there isOA node, 7, in 7' that dominates the foot nodeand has no lower OA nodes.
7 is pmduceA byadjoining an auxiliary tree ~ at 17 in 7'-Each tree 7 E 2~(G) with frontier w iAw2 has tbe prop-erty that it has a single spine from the root to a node thatdominates the entire string wlAw2.
All of the OA nodesremaining in the tree fall on this spine, or hang immedi-ately to its right or left.
For each such tree 7 there willbe a derivation tree in a ' ,  whose root is labeled by aca~gory  c and  w i th  f ront ie r  to 1W2, wher~ c encodes theremaining obligatory adjunctions on this spine in 7.Each OA nodes on the spine is encoded in c by a slashand nonterminal symbol in the appropriate position.
Sup-pose the OA node is labeled by some A.
When the OAnode falls on the spine c will contain /.4 ?
(in this casethe direction of the slash was arbiwarfly chosen to be for-ward).
When the OA node faUs to the left of the spine cwill contain \A% and when the OA node fall~ to the rightof the spine c will contain/A ?.
For example, the follow-ing tree is encoded by the category A\A~/AI/A~\A ~282AiA I OA A2OA/\Wl w2We now give an example of a TAG for the language{ a"bn I n >_ 0} with crossing dependencies.
We thengive the CCG that would be produced according to thisconstruction.S NAS 10A S2OAI I?
SNAS2NAIS OAI$30AI$2 NAS I NA $3 NAa SINA S3NA bNA?
SNAs'\s~/s~ ~ f(O s'\sf/s~ ~ f(OS~\A ~ f(O S~\A ~ f(OA e f(~) B ~ f(b)Sa\S, 6 f(?)
S?\S, 6 f(?
)S, E f(6)4 Derivations TreesVijay-Shanker, Weir and Joshi \[14\] described severalproperties that were common to various conswainedgrammatical systems, and defined a class of suchsystems called Linear Context-Free Rewriting Systems(LCFRS's).
LCFRS's are constrained to have linear non-erasing composition operations and derivation trees thatare structurally identical to those of context-free gram-mars.
The intuition behind the latter restriction is thatthe rewriting (whether it be of strings, trees or graphs)be performed in a context-free way; i.e., choices abouthow to rewrite a structure should not be dependent onan unbounded amount of the previous or future contextof the derivation.
Several wen-known formalisms fallinto this class including Context-Free Grammars, Gener-alized Phrase Structure Grammars (GPSG), Head Gram-mars, Tree Adjoining Grammars, and MulticomponentTree Adjoining Grammars.
In \[14\] it is shown that eachformalism in the class generates scmilinear languages thatcan be recognized in polynomial time.In this section, we examine derivation trees of CCG'sand compare them with respect to those of formalisms thatare known to be LCFRS's.
In order to compare CCG'swith other systems we must choose a suitable method forthe representation fderivations in a CCG.
In the case ofCFG, TAG, HG, for example, it is fairly clear what theelementary structures and composition operations houldbe, and as a result, in the case of these formalisms, it isapparent how to represent derivations.The traditional way in which derivations of a CCGhave been represented has involved a binary tree whosenodes are labeled by categories with annotations indicat-ing which combinatory ule was used at each stage.
Thesederivation trees are different from those systems in theclass of LCFRS's in two ways.
They have context-freepath sets, and the set of categories labeling nodes maybe infinite.
A property that they share with LCFRS's isthat there is no dependence b tween unbounded paths.
Infact, the derivation trees sets produced by CCG's havethe same properties as those produced by LIG's (this isapparent from the construction i Section 3A).Although the derivation trees that are traditionally as-sociated with CCG's differ from those of LCFRS's, thisdoes not preclude the possibility that there may be an al-ternative way of representing derivations.
What appearsto be needed is some characterization f CCG's that iden-tities a finite set of elementary structures and a finite setof composition operations.The equivalence ofTAG's and CCG's suggests one wayof doing this.
The construction that we gave from TAG'sto CCG's produced CCG's having a specific form whichcan be thought of as a normal form for CCG's.
We canrepresent the derivations of grammars in this form withthe same tree sets as the derivation tree sets of the TAGfrom which they were constructed.
Hence CCG's in thisnormal form can be classified as LCFRS's.283TAG derivation trees encode the adjanction of specifiedelementary trees at specified nodes of other elementarytrees.
Thus, the nodes of the derivation trees are labeledby the names of elementary trees and tree addresses.
Inthe construction used in Section 3.2, each auxiliary treeproduces assignments of elementary categories to lexicaiitems.
CCG derivations can be represented .with treeswhose nodes identify elementary categories and specifywhich combinatory rule was used to combine it.For grammars in this normal form, a unique derivationcan be recovered from these trees, but this is not trueof arbitrary CCG's where different orders of combinationof the elementary categories can result in derivations thatmust be distinguished.
In this normal form, the combina-tory rules are so restrictive that there is only one order inwhich elementary categories can be combined.
Withoutsuch restrictions, this style of derivation tree must encodethe order of derivation.5 Addit ions to CCG'sCCG's have not always been defined in the same way.Although TAG's, HG's, and CCG's, can produce thecrossing dependencies appearing in Dutch, two additionsto CCG's have been considered by Steedman in \[12\]to describe certain coordination phenomena occurring inDutch.
For each addition, we discuss its effect on thepower of the system.5.1 Unbounded Dependent  S t ructuresA characteristic feature of LCFRS's is that they are un-able to produce two structures exhibiting an unboundeddependence.
It has been suggested that this capabilitymay be needed in the analysis of coordination in Dutch,and an extension of CCG's has been proposed by Steed-man \[12\] in which this is possible.
The following schemais included.X* COnj x ~ xwhere, in the analysis given of Dutch, z is allowed tomatch categories of arbitrary size.
Two arbitrarily largestructures can be encoded with two arbitrarily large cat-egories.
This schema has the effect of checking that theencodings are identical The addition of rules such asthis increases the generative power of CCG's, e.g., thefollowing language can be generated.
{(wc)" I w e {a,b} ?
}In giving analysis of coordination in languages other thanDutch, only a finite number of instances of this schemaare required since only bounded categories are involved.This form of coordination does not cause problems forLCFRS's.5.2 Generalized CompositionSteedman \[12\] considers a CCG in which there are aninf~te number of composition rules for each n _> 1 ofthe form(~lv) (...(vhz~)l~...I.z.)
-(- .
.
(~ l :d ln -  ..
I , z , )( .
.
.
(V l lZ l ) l , .
.
.
I , z , )  (~\y) -"( .
.
.
(~1:012 .
.
.
I , z , )This form of composition is permitted in Parenthesis-freeCategorial Grammars which have been studied in \[5,4\],and the results of this section als0 apply to this system.With this addition, the generative power of CCG's in-creases.
We show this by giving a grammar for a languagethat is known not to be a Tree Adjoining language.
Con-sider the following CCG.
We allow um~stricted use ofarbitrarily many combinatory rules for forward or back-wards generalized composition and application.f(e) = {s}/(al) = {At}.~(a2) = {A2}f(Cl) = {S\AI/D1/S\BI}f(c2) - -  {S\A21D21S\B2}f(bx) = {Bx}f(b2)'-{B2}f(dl) = {DI}f(d2)= {D2}When the language, L, generated by this grammar is in-tersected with the regular languagewe get the following language.n l  ~3 ~1 f t l  ft2 ft 3 2 1 {a I G 2 b I C 1 b 2 C 2 d~2 d~l I n l ,n  2  0}The pumping lemma for Tree Adjoining Grammars \[13\]can be used to show that this is not a Tree AdjoiningLanguage.
Since Tree Adjoining Languages are closedunder intersection with Regular Languages, L can not bea Tree Adjoining Language ither.6 Conclus ionsIn this paper we have considered the string languagesand derivation trees produced by CCL's.
We have shownthat CCG's generate the same class of string languages284as TAG's, HG's, and LIG's.
The derivation tree sets nor-mally associated with CCG's are found to be the sameas those of LIG's.
They have context-free path sets, andnodes labeled by an unbounded alphaboL A consequenceof the proof of equivalence with TAG is the existence ofa normal form for CCG's having the property that deriva-tion trees can be given for grammars in this normal formthat are structurally the same as the derivation trees ofCFG's.
The question of whether there is a method ofrepresenting the derivations of arbitrary CCG's with treesets similar to those of CFG's remains open.
Thus, it isunclear, whether, despite their restricted weak generativepower, CCG's can be classified as LCFRS's.References\[1\] A. E. Ades and M. J. Steedman.
On the order ofwords.
Ling.
a.nd Philosophy, 3:517-558, 1982.\[2\] A. V. Aho.
Indexed grammars - -  An extension tocontext free grammars.
J. ACM, 15:647--671, 1968.\[3\] Y. Bar-Hillel, C. Gaifman, and E. Shamir.
On cate-gorial and phrase structure grammars.
In Languageand Information, Addison-Wesley, Reading, MA,1964.\[4\] J. Friedman, D. Dai, and W. Wang.
The weak gen-erative capacity of parenthesis-free categorial gram-mars.
In 11 th Intern.
Conf.
on Comput.
Ling., 1986.\[5\] J. Friedman and R. Venkatesan.
Categorial and Non-Categorial languages.
In 24 Ch meeting Assoc.
Corn-put.
Ling., 1986.\[6\] G. Gazdar.
Applicability of Indexed Grammars toNatural Languages.
Technical Report CSLI-85-34, Center for Study of Language and Information,1985.\[7\] A. tL Joshi.
How much context-sensitivity is nee-essary for characterizing su'ucm.,~ descriptionsTree Adjoining Grammars.
In D. Dowry, L. Kart-tunen, and A. Zwieky, editors, Natural LanguageProcessing ~ Theoretical, Computational and Psy-chological Perspective, Cambridge University Press,New York, NY, 1985.
Originally presented in 1983.\[8\] A. K. Joshi, L. S. Levy, and M. Takahashi.
Tree ad-junct grammars.
J. Comput.
Syst.
Sci., 10(1), 1975.\[9\] M. Steedman.
Combinators and grammars.
In R.Oehrle, E. Bach, and D. Wheeler, editors, CategorialGrammars and Natural Language Structures, Foris,Dordrecht, 1986.\[1o\]\[11\]\[12\]\[13\]\[14\]\[15\]\[16\]M. Steedman.
Combinatory grammars and para-sitic gaps.
Natural Language and Linguistic Theory,1987.M.
Steedman.
Gapping as constituent coordination.1987.
m.s.
University of Edinburgh.M.
J. Steexlman.
Dependency and coordination i thegrammar of Dutch and English.
Language, 61:523-568, 1985.K.
Vijay-Shanker.
A Study of Tree Adjoining Gram-mars.
PhD thesis, University of Pennsylvania,Philadelphia, Pa, 1987.K.
Vijay-Shankcr, D. L Weir, and A. K. Joshi.
Char-acterizing structural descriptions produced by vari-ons grammatical formalisms.
In 25 th meeting Assoc.Comput.
Ling., 1987.K.
Vijay-Shanker, D. J. Weir, and A. K. Joshi.
Treeadjoining and head wrapping.
In 11 th InternationalConference on Comput.
Ling., 1986.D.
J. Weir.
Characterizing Mildly Context-SensitiveGrammar Formalisms.
PhD thesis, University ofPennsylvania, Philadelphia, Pa, in prep.285
