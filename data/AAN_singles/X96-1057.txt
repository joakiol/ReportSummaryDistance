NTT DATA:  DESCRIPT ION OF THE ER IE  SYSTEMUSED FOR MUC-6Yoshio Eriguchi and Tsuyoshi KitaniNTT Data  Communicat ions Systems Corporat ionKowa Kawasaki  Nishi-guchi Bldg., 66-2 Horikawa-cho, Saiwai-ku, Kawasaki-shi,Kanagawa 210 JapanE-mail: {eriguchi, tkitani} @lit .
rd.nttdata.
jpPhone: +81-44-548-46061 INTRODUCTIONErie is a name recognition system developedfor the Multilingual Entity Task (MET) in MUC-6.The pattern matching engine recognizes organiza-tion, person, and place names along with time andnumeric expressions in Japanese text.
Althoughour previous information extraction system Tex-tract performed well in MUC-5, the pattern match-ing engine, which was written in AWK language,was slow\[2\].
System maintenance was also difficult,since the patterns were defined in both the match-ing engine and the pattern files.
Erie solves theseproblems by generating a pattern matching enginein C language directly from the defined patterns.2 SYSTEM DESCRIPT IONFigure 1 shows Erie's system architecture, whichincludes the following functions:s ~ Comptle I * .
?
Pre-processlng , ~  IGeneratorofl  ?
Pattern ~,  .I a ~  I I Pattern | = I Matching | I stageIRecoonitionf-I Matching r -T ' ' \ ]  Program / ;  .Pat erns  I Engine I  CSourc Cod :Figure 1 Erie system architecture(1) Majesty is used to segment the Japanese textinto primitive words and tags the parts ofspeech\[l\].
(2) Task-specific patterns are defined to modifythe Majesty segmentation and to augmentthe parts of speech.
(3) Name recognition patterns can be defined ina form similar to regular expressions.
(4) An engine generator converts the defined pat-terns into a pattern matching program gen-erated in C language.
(5) Abbreviations in the text are identified by anabbreviation recognizer.3 PATTERNSThis section describes three types of patternsintroduced in the previous ection.3.1 Dic t ionary  pat ternsMajesty tags a part of speech, such as a nounor noun-suffix, as the major category of the word.Then the dictionary pattern is used to add a sub-category to the word.
The sub-category, for ex-ample that it is an organization, is defined on theleft side of the pattern.
Words to which the sub-category is added are listed on the right side of thepattern.
Figure 2 shows an example of a dictio-nary pattern.
The words "~J:" (a corporation) and"~" (a government ministry) are tagged as noun-suffixes (SUFFIX) by Majesty, while the dictionarypattern augments it by adding ORGANIZATIONas its sub-category.DICT IONARY -\[SUFF IX -ORGANIZAT ION = {~_~I -~\]"Figure 2 Example of a dictionary pattern3.2 Segmentat ion  l Ja t te rnsThe segmentation pattern is used to furthersegment a word whose word boundary is given byMajesty.
The word to be segmented is written onthe left side of the pattern.
Newly-segmented wordsand their parts of speech are defined in the rightside of the pattern.
The pattern matching con-ditions of the matched word can be described inparenthesis.
These conditions can be the part ofspeech of the word, the word preceding or follow-ing the word, or the word length.
The character469'_' is a wild card that can match any number ofcharacters within the word.Figure 3 shows an example of the segmentationpatterns.
The first pattern divides a word "1~:~?
"(Japan and the U.S.) into "H" (Japan) and ")1?
"(the U.S.), and gives each word a NOUN-PLACEtag as the part of speech.
The second pattern di-vides a word whose last character is "~tt" (a govern-ment minister) into "~11" and the rest of the word,if the word consists of more than three characters.SEGMENTATION {~ = ~ :NOUN-PLACE ~:NOUN-PLACE{};_ ~ = _:NOUN-ORGANIZATION: SUFFIX-POSITION{LEN >= 3}; }F igure  3 Example of segmentation patterns3 .3  Name recogn i t ion  pat ternsThe name recognition patterns recognize propernames, times, and numeric expressions that appearin the text.
A pattern name is written on the leftside of the pattern, and the word sequence to besearched for is defined on the right side.
The de-fined pattern can be referred to from other patternsby using the character '$' followed by the patternname.
A pattern can be any combination of words,their parts of speech, character type, and the pat-tern name.
Regular expressions such as '*' and '+'can also be used in the pattern.
Two angle brack-ets on the right side of the pattern specify the firstand last of the words that comprise the identifiedname or expression.
Figure 4 shows an example of aname recognition pattern that identifies a person'sname.PATTERN {SPERSON = < (NOUN I UNKNOWN)+ >SUFFIX-PERSON; }Figure 4 Example of a name recognition patternErie's pattern matching engine processes thepatterns in the order of definition.
The first patternthat matches is chosen for the string currently be-ing processed.
Thus, pattern developers must payspecial attention to the order of the patterns.4 PATTERNS DEF INED IN  ER IEThere are 54 dictionary patterns, 86 segmenta-tion patterns, and 162 name recognition patternsdefined in Erie.
The pattern set was developed byusing a hundred newspaper articles annotated andprovided to the MET participants by DARPA.During its official run on a Sun SparcStation10, Erie processed each article in an average of 1.5seconds.
This is several times faster than Textract.But, entity names, especially person names, werenot identified well, although time and numeric ex-pressions were identified with a high level of recalland precision.
This was probably because the pat-terns for entity names were not well enough de-fined.
Since names can be expressed in many ways,a hundred newspaper articles used for the patterndevelopment were insufficient.5 OBSERVATIONSErie achieved a high processing accuracy in theJapanese MET task.
In the course of this project,most of our time was spent on the development ofthe engine generator.
Considering that the patterndevelopment was done in only two weeks, our scoresare quite satisfactory.
This was achieved by sepa-rating the patterns and pattern matching engine,which has made the pattern development faster andeasier.
The pattern definition in Erie was power-ful enough to identify the names and expressionsrequired in the MET task.The pattern development was mainly done byhand, which is very time-consuming.
To developsystems more rapidly, tools are needed that willhelp pattern developers find and define patterns,then check the results.
We will continue to worktowards this goal and plan to improve our pat-tern matching engine to deal with more compli-cated patterns that Erie cannot currently handle.Re ferences\[1\] Kitani, T., Eriguchi, Y. and Hara, M. "Pat-tern Matching and Discourse Processing Infor-mation Extraction from Japanese Text."
Jour-nal of Artificial Intelligence Research, Vol.
2,pp.
89-110, 1994.\[2\] Kitani, T. and Mitamura, T. "An AccurateMorphological Analysis and Proper Name Iden-tification for Japanese Text Processing."
Jour-nal of Information Processing Society of J apart,35(3), pp.
404-413, 1994.470
