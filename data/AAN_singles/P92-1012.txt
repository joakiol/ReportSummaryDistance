RECOGNITION OFLINEAR CONTEXT-FREE REWRITING SYSTEMS*Giorgio Sat taInst i tute  for Research in Cognit ive ScienceUniversity of  Pennsy lvaniaPhi ladelphia,  PA 19104-6228, USAgsatta@l inc.c is .upenn.eduABSTRACTThe class of linear context-free rewriting sys-tems has been introduced as a generalization ofa class of grammar formalisms known as mildlycontext-sensitive.
The recognition problem for lin-ear context-free rewriting languages is studied atlength here, presenting evidence that, even in somerestricted cases, it cannot be solved efficiently.
Thisentails the existence of a gap between, for exam-ple, tree adjoining languages and the subclass of lin-ear context-free r writing languages that generalizesthe former class; such a gap is attributed to "cross-ing configurations".
A few other interesting conse-quences of the main result are discussed, that con-cern the recognition problem for linear context-freerewriting languages.1 INTRODUCTIONBeginning with the late 70's, there has been a consid-erable interest within the computational linguisticsfield for rewriting systems that enlarge the gener-ative power of context-free grammars (CFG) bothfrom the weak and the strong perspective, still re-maining far below the power of the class of context-sensitive grammars (CSG).
The denomination ofmildly context-sensitive (MCS) has been proposedfor the class of the studied systems (see \[Joshi etal., 1991\] for discussion).
The rather surprising factthat many of these systems have been shown to beweakly equivalent has led researchers to generalize*I am indebted to Anuj Dawax, Shyam Kaput and OwenRainbow for technical discussion on this work.
I am alsograteful to Aravind Joshi for his support in this research.None of these people is responsible for any error in this work.This research was partially funded by the following grants:ARO grant DAAL 03-89-C-0031, DARPA grant N00014-90-J-1863, NSF grant IRI 90-16592 and Ben Franklin grant91S.3078C-1.89the elementary operations involved in only appar-ently different formalisms, with the aim of captur-ing the underlying similarities.
The most remark-able attempts in such a direction are found in \[Vijay-Shanker et al, 1987\] and \[Weir, 1988\] with the in-troduction of linear context-free rewriting systems(LCFRS) and in \[Kasami et al, 1987\] and \[Seki eta/., 1989\] with the definition of multiple context-freegrammars (MCFG); both these classes have been in-spired by the much more powerful class of gener-alized context-free grammars (GCFG; see \[Pollard,1984\]).
In the definition of these classes, the gener-alization goal has been combined with few theoret-ically motivated constraints, among which the re-quirement of efficient parsability; this paper is con-cerned with such a requirement.
We show that fromthe perpective of efficient parsability, a gap is stillfound between MCS and some subclasses of LCFRS.More precisely, the class of LCFRS is carefullystudied along two interesting dimensions, to be pre-cisely defined in the following: a) the fan-out ofthe grammar and b) the production length.
Fromprevious work (see \[Vijay-Shanker t al., 1987\]) weknow that the recognition problem for LCFRS is in Pwhen both dimensions are bounded.
1 We completethe picture by observing NP-hardness for all thethree remaining cases.
If P~NP, our result revealsan undesired issimilarity between well known for-malisms like TAG, HG, LIG and others for which therecognition problem is known to be in P (see \[Vijay-Shanker, 1987\] and \[Vijay-Shanker and Weir, 1992\])and the subclass of LCFRS that is intended to gener-alize these formalisms.
We investigate the source ofthe suspected additional complexity and derive someother practical consequences from the obtained re-suits.1 p is the class of all languages decidable in deterministicpolynomial time; NP is the class of all languages decidable innondeterministic polynomial time.2 TECHNICAL  RESULTSThis section presents two technical results that are.
the most important in this paper.
A full discussionof some interesting implications for recognition andparsing is deferred to Section 3.
Due to the scopeof the paper, proofs of Theorems 1 and 2 below arenot carried out in all their details: we only presentformal specifications for the studied reductions anddiscuss the intuitive ideas behind them.2.1 PREL IMINARIESDifferent formalisms in which rewriting is appliedindependently of the context have been proposed incomputational linguistics for the treatment of Nat-ural Language, where the definition of elementaryrewriting operation varies from system to system.The class of linear context-free rewriting systems(LCFRS) has been defined in \[Vijay-Shanker t al.,1987\] with the intention of capturing through a gen-eralization common properties that are shared by allthese formalisms.The basic idea underlying the definition of LCFRSis to impose two major restrictions on rewriting.First of all, rewriting operations are applied in thederivation of a string in a way that is independent ofthe context.
As a second restriction, rewriting op-erations are generalized by means of abstract com-position operations that are linear and nonerasing.In a LCFR system, both restrictions are realized bydefining an underlying context-free grammar whereeach production is associated with a function thatencodes a composition operation having the aboveproperties.
The following definition is essentially thesame as the one proposed in \[Vijay-Shanker t al.,1987\].Definit ion 1 A rewriting system G = (VN, VT,P, S) is a linear context-free rewriting system if:?
( i )  VN is a finite set of nonterminal symbols, VT isa finite set of terminal symbols, S E VN is thes tar t  symbol; every symbol A E VN is associatedwith an integer ~o(A) > O, called the fan-out ofA;(it) P is afinite set of productions of the form A --+f(B1, B2, .
.
.
,Br) ,  r >_ O, A, Bi E VN, 1 < i <r, with the following restrictions:(a) f is a function in C ?
,  where D = (V~.)
?,?
is the sum of the fan-out of all Bi's andc =(b) f (x l , l , .
.
.
,  Zl,~(B,),..., xr,~(B.
))= (Yz,...,Y~(a)) is defined by somegrouping into ~(A) sequences of alland only the elements in the sequencezx,1, ... ,Zr,~o(v,),ax, .
.
.
,ao, a >__ O, wherea iEVT,  l < i<a.The languages generated by LCFR systems arecalled LCFR languages.
We assume that the start-ing symbol has unitary fan-out.
Every LCFR sys-tem G is naturally associated with an underlyingcontext-free grammar Gu.
The usual context-freederivation relation, written =?
'a, will be used inthe following to denote underlying derivations in G.We will also use the reflexive and transitive closureof such a relation, written :=~a, ?
As a convention,whenever the evaluation of all functions involved inan underlying derivation starting with A results ina ~(A)-tuple w of terminal strings, we will say that*A derives w and write A =~a w. Given a nonter-minal A E VN, the language L(A) is the set of all~(A)-tuples to such that A =~a w. The languagegenerated by G, L(G), is the set L(S).
Finally, wewill call LCFRS(k) the class of all LCFRS's withfan-out bounded by k, k > 0 and r-LCFRS the classof all LCFRS's whose productions have right-handside length bounded by r, r > 0.2.2 HARDNESS FOR NPThe membership roblem for the class of linearcontext-free rewriting systems is represented bymeans of a formal language LRM as follows.
LetG be a grammar in LCFRS and w be a string inV.~, for some alphabet V~; the pair (G, w) belongsto LRM if and only if w E L(G).
Set LRM naturallyrepresents he problem of the recognition of a linearcontext-free rewriting language when we take intoaccount both the grammar and the string as inputvariables.
In the following we will also study the de-cision problems LRM(k) and r-LRM, defined in theobvious way.
The next statement is a characteriza-tion of r-LRM.Theorem 1 3SAT _<p I-LRM.Outline of the proof.
Let (U, C) be an arbitrary in-stance ofthe 3SAT problem, where U = {Ul,.. .
,  up}is a set of variables and C = {Cl,.
.
.c,} is a setof clauses; each clause in C is represented by astring of length three over the alphabet of all lit-erals, Lu = {uz,~l,.
.
.
,up,~p}.
The main idea inthe following reduction is to use the derivations ofthe grammar to guess truth assignments for U and to90use the fan-out of the nonterminal symbols to workout the dependencies among different clauses in C.For every 1 < k < p_ let .Ak = {c i \[ uk is asubstring of ci} and let .Ak = {c i \[ ~k is a substringof cj}; let alo w = clc2 .
.
.ca.
We define a linearcontext-free r writing system G = (tiN, C, P, S) suchthat VN = {~/i, Fi \[ 1 < i < p + 1} U {S}, everynonterminal (but S) has fan-out n and P containsthe following productions (fz denotes the identityfunction on (C*)a):(i) S --* f0(T~),s f0(Fd,where fo (x l , .
.
.
,  xn) = za .
.
.
Xn;(ii) for every 1 < k < p and for every cj E .At:n -Tt -"* f l (Tk+l) ,Tk h(Fk+x),where = (=1, .
.
.
,=.
);(iii) for every 1 < k < p and for every c i E Ak:Fk --* ~(kD (Fk),Fk --.
h(Tk+l),--.
h(fk+x),where 7(k'i)(xx, .
.
.
.
z , )  = (Z l , .
.
.
, x i c i , .
.
.
, z , ) ;(iv) Tp+l --*/p+10,A+10,where fp+10 = (~," ' ,  C).From the definition of G it directly follows that w EL(G) implies the existence of a truth-assignmentthat satisfies C. The converse fact can he shownstarting from a truth assignment that satisfies C andconstructing a derivation for w using (finite) induc-tion on the size of U.
The fact that (G, w) can heconstructed in polynomial deterministic time is alsostraightforward (note that each function fO) or 7~ j)in G can he specified by an integer j, 1 _~ j _~ n).DThe next result is a characterization of LRM(k)for every k ~ 2.Theorem 2 3SAT _<e LRM(2).Outline of the proof.
Let (U,C) be a generic in-stance of the 3SAT problem, U = {u l , .
.
.
,up} andC = {Cl , .
.
.
,Cn} being defined as in the proof ofTheorem 1.
The idea in the studied reduction isthe following.
We define a rather complex stringw(X)w(2).., w(P)we, where we is a representation ofthe set C and w (1) controls the truth assignment forthe variable ui, 1 < i < p. Then we construct agrammar G such that w(i) can be derived by G onlyin two possible ways and only by using the first stringcomponents of a set of nonterminals N(0 of fan-outtwo.
In this way the derivation of the substringw(X)w(2) ... w(p) by nonterminals N(1), .
.
.
,  N (p) cor-responds to a guess of a truth assignment for U.Most important, the right string components ofnon-terminals in N (i) derive the symbols within we thatare compatible with the truth-assignment chosen forui.
In the following we specify the instance (G, w)of LRM(2) that is associated to (U, C) by our reduc-tion.For every 1 _< i _< p, let .Ai = {cj \[ ui is in-cluded in cj} and ~i  = {cj \[ ~i is included in cj};let alo ml = \[.Ai\[ + IAil.
Let Q = {ai,bi \[ 1 <_i _< p} be an alphabet of not already used sym-bols; for every 1 <_ i <_ p, let w(O denote a se-quence of mi + 1 alternating symbols ai and bi, i.e.w(O E (aibl) + U (albi)*ai.
Let G -- (VN, QUC,  P, S);we define VN ---- {S} U {a~ i) I 1 <_ i <_ p, 1 <_j <_ mi} and w = w(t)w(=).. .w(P)cxc2...ea.
Inorder to specify the productions in P, we need tointroduce further notation.
We define a functiona such that, for every 1 _< i _< p, the clausesCa(i,1),Ca(i,2),'"Ca(i,lAd) are all the clauses in .Aiand the clauses ea(i,l.a,l+l),...ca(i,m0 are all theclauses in ~i.
For every 1 < i < p, let 7( i ,  1) = albiand let 7(i, h) = ai (resp.
bl) if h is even (resp.
odd),2 < h < mi; let alo T(i, h) = ai (resp.
bi) i fh is odd(resp.
even), 1 < h < mi - 1, and let ~(i, mi) = albi(resp.
biai) if mi is odd (resp.
even).
Finally, letP z = ~"~i=1 mi.
The following productions define setP (the example in Figure 1 shows the two possibleways of deriving by means of P the substring w(0and the corresponding part of Cl ...
ca).
(i) for every 1 < i < p:(a) for 1 < h < \[~4,\[:Ai') .-+ (7(i,h),cc,(i,h)),A(i) ~ (7(i, h), e),(b) for JA i l+ 1 < h < mi:h),A (i) ~ ('~(i, h), c,(i,h)),A (0 --~ (~(i, h), e);(ii) S--* f (A i l ) , .
.
.
,A~!
, .
.
.
,  A~) ,91i Iw =.
.
.
ai bi al bi ai CjlA ~  CJl , $.
l l  ,.
.
.
c i:z .
.
.
c j3 .
.
.
cs4 .
.
.E c~,E EFigure 1: Let .Ai = {ej2,ej,} and ~ i  = {cja,cjs}.
String w (i) can be derived in only two possible ways in G,corresponding to the choice ui = trne/false.
This forces the grammar to guess a subset of the clauses contained in,Ai/.Ai, in such a way that all of the clauses in C are derived only once if and only if there exists a truth-assignmentthat satisfies C.where f is a function of 2z string variables de-fined asf ( z~ l ) ,y~l ) , ,  g(1)  ?
(1) Z(p) ?
(p) l?
.
,  ~ l , Y ~ l , .
.
.
1  f l~p ly rnp j  "-"z (1)z (1 )  z 0 )  .
z~yay2.
.y .
1 2 " ' "  ml - .and for every 1 _ j _< n, yj is any sequence ofall variables y(i) such that ~(i, h) = j.It is easy to see that \[GI and I wl are polynomi-ally related to I UI and I C l- From a derivation ofw G L(G), we can exhibit a truth assignment thatsatisfies C simply by reading the derivation of theprefix string w(X)w(2)...w (p).
Conversely, startingfrom a truth assignment that satisfies C we can provew E L(G) by means of (finite) induction on IU l: thispart requires a careful inspection of all items in thedefinition of G. ra2 .3  COMPLETENESS FOR NPThe previous results entail NP-hardness for the de-cision problem represented by language LRM; herewe are concerned with the issue of NP-completeness.Although in the general case membership of LRMin NP remains an open question, we discuss in thefollowing a normal form for the class LCFRS thatenforces completeness for NP (i.e.
the proposed nor-mal form does not affect the hardness result dis-cussed above).
The result entails NP-completenessfor problems r-LRM (r > 1) and LRM(k) (k > 2).We start with some definitions.
In a lin-ear context-free rewriting system G, a derivationA =~G w such that w is a tuple of null strings iscalled a null derivation.
A cyclic derivation has theunderlying form A ::~a.
aAfl, where both ~ andderive tuples of empty strings and the overall ef-fect of the evaluation of the functions involved inthe derivation is a bare permutation of the stringcomponents of tuples in L(A) (no recombination ofcomponents i  admitted).
A cyclic derivation is min-imal if it is not composed of other cyclic deriva-tions.
Because of null derivations in G, a deriva-tion A :~a w can have length not bounded by anypolynomial in \[G I; this peculiarity is inherited fromcontext-free languages (see for example \[Sippu andSoisalon-Soininen, 1988\]).
The same effect on thelength of a derivation can be caused by the use ofcyclic subderivations: in fact there exist permuta-tions of k elements whose period is not bounded byany polynomial in k. Let A f and C be the set of allnonterminals that can start a null or a cyclic deriva-tion respectively; it can be shown that both thesesets can be constructed in deterministic polynomialtime by using standard algorithms for the computa-tion of graph closure.For every A E C, let C(A) be the set of all permu-tations associated with minimal cyclic productionsstarting with A.
We define a normal form for theclass LCFRS by imposing some bound on the lengthof minimal cyclic derivations: this does not alter theweak generative power of the formalism, the onlyconsequence being the one of imposing some canon-ical base for (underlying) cyclic derivations.
On thebasis of such a restriction, representations for setsC(A) can be constructed in deterministic polynomialtime, again by graph closure computation.Under the above assumption, we outline here aproof of LRMENP.
Given an instance (G, w) of theLRM problem, a nondeterministic Turing machine92M can decide whether w E L(G) in time polynomialin I(G, w) l as follows.
M guesses a "compressed"representation p for a derivation S ~c  w such that:(i) null subderivations within p' are represented byjust one step in p, and(ii) cyclic derivations within p' are represented inp by just one step that is associated with aguessed permutation of the string componentsof the involved tuple.We can show that p is size bounded by a polynomialin I (G, w)\[.
Furthermore, we can verify in determin-istic polynomial time whether p is a valid derivationof w in G. The not obvious part is verifying thepermutation guessed in (ii) above.
This requires atest for membership in the group generated by per-mutations in C(A): such a problem can be solvedin deterministic polynomial time (see \[Furst et ai.,19801).3 IMPL ICAT IONSIn the previous section we have presented generalresults regarding the membership roblem for twosubclasses of the class LCFRS.
Here we want todiscuss the interesting status of "crossing depen-dencies" within formal languages, on the base ofthe above results.
Furthermore, we will also derivesome observations concerning the existence of highlyefficient algorithms for the recognition of fan-outand production-length bounded LCFR languages, aproblem which is already known to be in the classP.3.1 CROSSINGCONFIGURATIONSAs seen in Section 2, LCFRS(2) is the class of allLCFRS of fan-out bounded by two, and the mem-bership problem for the corresponding class of lan-guages is NP-complete.
Since LCFRS(1) = CFGand the membership problem for context-free lan-guages is in P, we want to know what is added tothe definition of LCFRS(2) that accounts for the dif-ference (assuming that a difference exists between Pand NP).
We show in the following how a binaryrelation on (sub)strings derived by a grammar inLCFRS(2) is defined in a natural way and, by dis-cussing the previous result, we will argue that theadditional complexity that is perhaps found withinLCFRS(2) is due to the lack of constraints on theway pairs of strings in the defined relation can becomposed within these systems.Let G E LCFRS(2); in the general case, any non-terminal in G having fan-out two derives a set ofpair of strings; these sets define a binary relationthat is called here co-occurrence.
Given two pairs(Wl, w'l) and (w~, w'~) of strings in the co-occurrencerelation, there are basically two ways of composingtheir string components within a rule of G: eitherby nesting (wrapping) one pair within the other,e.g.
wlw2w~w~l, or by creating a crossing configu-ration, e.g.
wlw2w'lw~; note how in a crossing con-figuration the co-occurrence dependencies betweenthe substrings are "crossed".
A close inspectionof the construction exhibited by Theorem 2 showsthat grammars containing an unbounded number ofcrossing configurations can be computationally com-plex if no restriction is provided on the way theseconfigurations are mutually composed.
An intuitiveidea of why such a lack of restriction can lead to thedefinition of complex systems is given in the follow-ing.In \[Seki et al, 1989\] a tabular method has beenpresented for the recognition of general LCFR lan-guages as a generalization of the well known CYKalgorithm for the recognition of CFG's (see for in-stance \[Younger, 1967\] and \[Aho and Ullman, 1972\]).In the following we will apply such a general methodto the recognition of LCFRS(2), with the aim of hav-ing an intuitive understanding ofwhy it might be dif-ficult to parse unrestricted crossing configurations.Let w be an input string of length n. In Figure 2,the case of a production Pl : A --* f ( B1, B2, .
.
.
, Br )is depicted in which a number r of crossing con-figurations are composed in a way that is easy torecognize; in fact the right-hand side of Pl can berecognized step by step.
For a symbol X, assumeB2I I I I I I I I I iFigure 2: Adjacent crossing configurations defininga production Pl : A ~ f (B1 ,  B2 , .
.
.
,  Br)  where eachof the right-hand side nonterminals has fan-out two.that the sequence X, (il, i2),..., (iq-1, iq) means Xderives the substrings of w that matches the po-sitions (i1,i2),..., (iq-l,iq) within w; assume alsothat A\[t\] denotes the result of the t-th step in therecognition of pl's right-hand side, 1 < t < r. Theneach elementary step in the recognition of Pl can93be schematically represented as an inference rule asfollows:A\[t\], (ia, i,+a), (S',, J,+*)?
B,+a, (it+a, it+s), (jr+a, Jr+2)Air + 1\], (ia, it+s), (jl, Jr+2)O)The computation i  (1) involves ix indices rangingover {1..n}; therefore in the recognition process uchstep will be computed no more than O(n 6) times.B2 B3 .
.
.i ~  ?
"I I I I I I I I I I I I I I IFigure 3: Sparse crossing configurations defining aproduction P2 : A ~ f(B1, Bs, .
.
.
,  Br); every non-terminal Bi has fan-out two.On the contrary, Figure 3 presents a production P2defined in such a way that its recognition is consider-ably more complex.
Note that the co-occurrence ofthe two strings derived by Ba is crossed once, the co-occurrence of the two strings derived by B2 is crossedtwice, and so on; in fact crossing dependencies in P2are sparse in the sense that the adjacency propertyfound in production Pl is lost.
This forces a tabularmethod as the one discussed above to keep track ofthe distribution of the co-occurrences recognized sofar, by using an unbounded number of index pairs.Few among the first steps in the recognition of ps'sright-hand side are as follows:A\[2\], (i1, i4), (i5, i6)Bz, li4,i51, lis,iglAt3\], (it, i6), (is, i9)A\[3\], (il, i6), (is, i9)B4,(i6, ir),{il,,im}A\[4\], (il, i7), (is, i9), (iai, i12)A\[4\], (it, i7), (is, i9), (ixl, i\]2)/35, (i7, is), (ilz, i14) (2)a\[51, (it, i9), (/ix, it2), (ilz, i14)From Figure 3 we can see that a different order inthe recognition of A by means of production P2 willnot improve the computation.Our argument about crossing configurationsshows why it might be that recognition/parsing ofLCFRS(2) cannot be done efficiently.
If this is true,we have a gap between LCFR systems and wellknown mildly context-sensitive formalisms whosemembership roblem is known to have polynomialsolutions.
We conclude that, in the general case, theaddition of restrictions on crossing configurationsshould be seriously considered for the class LCFRS.As a final remark, we derive from Theorem 2 aweak generative result.
An open question aboutLCFRS(k) is the existence of a canonical bilinearform: up to our knowledge no construction is knownthat, given a grammar G E LCFRS(k) returnsa weakly equivalent grammar G ~ E 2-LCFRS(k).Since we know that the membership roblem for2-LCFRS(k) is in P, Theorem 2 entails that theconstruction under investigation cannot take poly-nomial time, unless P=NP.
The reader can easilywork out the details.3.2 RECOGNIT ION OF r-LCFRS(k)Recall from Section 2 that the class r-LCFRS(k) isdefined by the simultaneous imposition to the classLCFRS of bounds k and r on the fan-out and on thelength of production's right-hand side respectively.These classes have been discussed in \[Vijay-Shankeret al, 1987\], where the membership problem for thecorresponding languages has been shown to be inP, for every fixed k and p. By introducing the no-tion of degree of a grammar in LCFRS, actual poly-nomial upper-bounds have been derived in \[Seki etal., 1989\]: this work entails the existence of an inte-ger function u(r, k) such that the membership rob-lem for r-LCFRS(k) can be solved in (deterministic)time O(IGIIwlU(r'k)).
Since we know that the mem-bership problems for r-LCFRS and LCFRS(k) areNP-hard, the fact that u(r, k) is a (strictly increas-ing) non-asymptotic function is quite expected.With the aim of finding efficient parsing al-gorithms, in the following we want to know towhich extent the polynomial upper-bounds men-tioned above can be improved.
Let us consider forthe moment he class 2-LCFRS(k); if we restrict our-selves to the normal form discussed in Section 2.3,we know that the recognition problem for this classis NP-complete.
Assume that we have found an op-timal recognizer for this class that runs in worst casetime I(G, w, k); therefore function I determines thebest lower-bound for our problem.
Two cases thenarises.
In a first case we have that !
is not boundedby any polynomial p in \]G I and Iwl: we can eas-ily derive that PcNP.
In fact if the converse is true,then there exists a Turing machine M that is able torecognize 2-LCFRS in deterministic time I(G, w)I q,for some q.
For every k > 0, construct a Turingmachine M (k) in the following way.
Given (G, w) asinput, M (~) tests whether G E2-LCFRS(k) (which94-is trivial); if the test fails, M(t) rejects, otherwiseit simulates M on input (G, w).
We see that M (k)is a recognizer for the class 2-LCFRS(k) that runsin deterministic time I(G, w)I q.
Now select k suchthat, for a worst case input w E ~* and G E 2-LCFRS(k), we have l(G, w,k) > I(G, w)Iq: we havea contradiction, because M (k) will be a recognizerfor 2-LCFRS(k) that runs in less than the lower-bound claimed for this class.
In the second case, onthe other hand, we have that l is bounded by somepolynomial p in \[G \[ and I w I; a similar argumentapplies, exhibiting a proof that P=NP.From the previous argument we see that findingthe '"oest" recognizer for 2-LCFRS(k) is as difficultas solving the P vs. NP question, an extremely dif-ficult problem.
The argument applies as well to r-LCFRS(k) in general; we have then evidence thatconsiderable improvement of the known recognitiontechniques for r-LCFRS(k) can be a very difficulttask.4 CONCLUSIONSWe have studied the class LCFRS along two dimen-sions: the fan-out and the max imum right-hand sidelength.
The recognition (membership) problem forLCFRS has been investigated, showing NP-hardnessin all three cases in which at least one of the two di-mensions above is unbounded.
Some consequencesof the main result have been discussed, among whichthe interesting relation between crossing configura-tions and parsing efficiency: it has been suggestedthat the addition of restrictions on these configu-rations should be seriously considered for the classLCFRS.
Finally, the issue of the existence of effi-cient algorithms for the class r-LCFRS(k) has beenaddressed.References\[Aho and Ullman, 1972\] A. V. Aho and J. D. Ull-man.
The Theory of Parsing, Translation andCompiling, volume 1.
Prentice-Hall, EnglewoodCliffs, N J, 1972.\[Furst et al, 1980\] M. Furst, J. Hopcroft, andE.
Luks.
Polynomial-time algorithms for permu-tation groups.
In Proceedings of the 21 th IEEEAnnual Symposium on the Foundations of Com-puter Science, 1980.\[Joshi et aL, 1991\] A. Joshi, K. Vijay-Shanker, andD.
Weir.
The convergence of mildly context-95sensitive grammatical formalisms.
In P. Sells,S.
Shieber, and T. Wasow, editors, FoundationalIssues in Natual Language Processing.
MIT Press,Cambridge MA, 1991.\[Kasami et al, 1987\] T. Kasami, H. Seki, andM.
Fujii.
Generalized context-free grammars, mul-tiple context-free grammars and head grammars.Technical report, Osaka University, 1987.\[Pollard, 1984\] C. Pollard.
Generalized PhraseStructure Grammars, Head Grammars and Nat-ural Language.
PhD thesis, Stanford University,1984.\[Seki et al, 1989\] H. Seki, T. Matsumura, M. Fujii,and T. Kasami.
On multiple context-free gram-mars.
Draft, 1989.\[Sippu and Soisalon-Soininen, 1988\] S. Sippu andE.
Soisalon-Soininen.
Parsing Theory: Languagesand Parsing, volume 1.
Springer-Verlag, Berlin,Germany, 1988.\[Vijay-Shanker and Weir, 1992\]K. Vijay-Shanker and D. J. Weir.
Parsing con-strained grammar formalisms, 1992.
To appear inComputational Linguistics.\[Vijay-Shanker et al, 1987\] K. Vijay-Shanker, D. J.Weir, and A. K. Joshi.
Characterizing structuraldescriptions produced by various grammatical for-malisms.
In 25 th Meeting of the Association forComputational Linguistics (ACL '87), 1987.\[Vijay-Shanker, 1987\] K. Vijay-Shanker.
A Study ofTree Adjoining Grammars.
PhD thesis, Depart-ment of Computer and Information Science, Uni-versity of Pennsylvania, 1987.\[Weir, 1988\] D. J. Weir.
Characterizing MildlyContext-Sensitive Grammar Formalisms.
PhDthesis, Department of Computer and InformationScience, University of Pennsylvania, 1988.\[Younger, 1967\] D. H. Younger.
Recognition andparsing of context-free languages in time n 3.
In-formation and Control, 10:189-208, 1967.
