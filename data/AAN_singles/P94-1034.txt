An Automat ic  Treebank Conversion Algorithm forCorpus SharingJong-Nae WangBehav ior  Design Corporat ionNo.
28, 2F,  R&D Road IISc ience-Based  Indust r ia l  ParkHs inchu,  Ta iwan 30077, R .O .C .wj n@bdc, com.
twJ ing -Sh in  Chang and  Keh-Y ih  SuDept .
of  E lect r ica l  Eng ineer ingNat iona l  Ts ing-Hua Un ivers i tyHs inchu,  Ta iwan 30043, R .O .C .sh?n~hera, ee.
nthu.
edu.
twkysu~bdc, com.
twAbst ractAn automatic treebank conversion method is pro-posed in this paper to convert a treebank into an-other treebank.
A new treebank associated witha different grammar can be generated automati-cally from the old one such that the informationin the original treebank can be transformed to thenew one and be shared among different researchcommunities.
The simple algorithm achieves con-version accuracy of 96.4% when tested on 8,867sentences between two major grammar evisionsof a large MT system.Mot ivat ionCorpus-based research is now a major branchfor language processing.
One major resource forcorpus-based research is the treebanks available inmany research organizations \[Marcus et al1993\],which carry skeletal syntactic structures or 'brack-ets' that have been manually verified.
Unfortu-nately, such resources may be based on differenttag sets and grammar systems of the respectiveresearch organizations.
As a result, reusability ofsuch resources across research laboratories i poor,and cross-checking among different grammar sys-tems and algorithms based on the same corporacan not be conducted effectively.
In fact, even forthe same research organization, a major revisionof the original grammar system may result in are-construction of the system corpora due to thevariations between the revisions.
As a side effect,the evolution of a system is often blocked or dis-couraged by the unavailability of the correspond-ing corpora that were previously constructed.
Un-der such circumstances, much energy and costmay have to be devoted to the re-tagging or re-construction of those previously available corpora.It is therefore highly desirable to automaticallyconvert an existing treebank, either from a previ-ous revision of the current system or from anotherresearch organization, into another that is com-patible with the current grammar system.248SeverM problems may prevent a treebank con-version algorithm from effective conversion of thetreebanks.
Firstly, the tag sets, including ter-minal symbols (parts of speech) and nonterminalsymbols (syntactic ategories) may not be identi-cM in the two systems; the number of such sym-bols may be drastically different and the map-ping may not be one-to-one.
Furthermore, thehierarchical structures, i.e., the underlying phrasestructure grammars, of two grammar systems maynot be easily and uniquely mapped.
In fact, thenumber of mapping units and mapping rules be-tween two systems may become untolerably largeif no systematic approach is available to extractthe atomic mapping units and the mapping op-erations \[Chang and Su 1993\].
In addition, someconstructs in one system may not be representablein terms of the grammar of another system; com-patibility of two grammar systems thus furthercomplicates the conversion problems.In many cases, a publicly available corpus maycontain only the simplest annotations, like brack-ets (skeletal structure representations) for somemajor syntactic ategories \[Marcus et a1.1993\].
Inparticular, a research organization may not wantto contribute its corpora in full detail for freeto the public since it may reveal the underlyingknowledge, such as the grammar ules, used in theproprietary system.
Therefore, the primitive an-notations, like brackets, are very likely to be thesole information available to the public in the nearfuture.
And corpus exchange is very likely to belimited to such primitive annotations.
Such re-sources may not be directly usable by a systemwhich needs much more information than anno-tated.
In such cases, it is, however, desirable tobe able to use the large amount of simply taggedcorpus to help construct or bootstrap a large corpuswhich contains more detailed annotation.We thus try to address uch problems by us-ing a simple and automatic approach for treebankconversion.
Since the bracket information from alarge treebank is the major external informationrequired, the proposed algorithm is expected to bevery useful and cost-effective for bootstrapping thecorpus, in terms of corpus size and annotated in-formation, of a system by using publicly availabletreebanks or home-made treebanks, which are lesscostly than fully annotated corpora.In the following sections, the treebank conver-sion task is modeled as a transfer problem, com-monly encountered in an MT system, between tworepresentations of the same language.
A matchingmetric for selecting the best conversion among allcandidates i then proposed, followed by the tree-bank conversion algorithm.
Finally, experimentresults are reported, which show a very promisingconversion accuracy with the proposed approach.In the current task, we will assume that thenew treebank will be compatible with an underly-ing target grammar of any appropriate form anda target tag set (including terminal and nontermi-hal symbols) associated with that grammar; since,otherwise, we could simply use the the originaltreebank directly without doing any conversion.This assumption is reasonable since most naturallanguage research laboratories who deal with syn-tactic level processing and those who need a tree-bank is supposed to have an underlying phrasestructure grammars or rules for identifying appro-priate constituents in the input text.Task  Def in i t ion  fo r  T reebankConvers ionFormally, the task for a treebank conversion al-gorithm is to map a source tree (generated froma source grammar or bracketed by hand) into itscorresponding target tree that would be gener-ated from a second grammar (hereinafter, the tar-get grammar) without changing, vaguely speaking,its structures or semantics.
The conversion musttherefore satisfies everal criteria so that the targettree could be reused in the target system.
First ofall, the target tree must be compatible with thesecond grammar.
This means that the target treemust also be generatable from the second gram-mar.
Secondary, the source tree and target treemust be 'similar' in a sense that their~correspond -ing terminal symbols (parts of speech), nontermi-nal symbols (syntactic ategories) and structures(production rules) preserve ssentially similar cat-egorial or structural information.A simple model for such a conversion problemis shown in Figure 1, where S is a sentence in thetreebank, G1 and G2 are the grammars for theoriginal treebank and the target system, respec-tively, T~ is the manually proved tree for S in thetreebank, T/t are all the possible ambiguous yn-tax trees for S as generated by the target grammarSG2 (ambiguity)~ , \ [  II 7t  i=l ,N =Parser I I MappingParser I ~-~ T~ ~_~Algorithrn----~T~1 I ('l~eebank) t t sc/1 human Score(T i \[Td)disambiguationFigure 1: A S imple Mode l  for  T reebank  Con-vers ionG2, and T~ is the best target ree selected from T/tbased on a mapping score Score(T/\]T~) definedon the treebank tree and the ambiguous construc-tions.
The "conversion" from T~ to T~ is actuallydone by a matching algorithm.To ensure compatibility of the target treeswith the target grammar, the sentences fromwhich the source treebank was constructed areparsed by a parser (Parser II) using the targetgrammar.
(It is also possible to enumerate all pos-sible constructs via other apparatus.
The parserhere is just a characterization f such an appara-tus.)
All the possible target constructs for a sen-tence are then matched against the source tree,and the one that best matches the source tree isselected as the preferred conversion.
In the abovemodel, it is, of course, possible to incorporate anykind of preference mechanism in the parsing mech-anism of Parser II to prevent he converter fromenumerating all possible syntactic structures al-lowed by the target grammar.
In fact, the orig-inal design of the conversion model is to hook amatching module to the end of any existing pars-ing mechanism, so that the ambiguous tructuresare matched against manually verified structureinformation in the source treebank and pick upthe correct parse without human inspection.To use the proposed model, a mapping met-ric is required for measuring the mapping pref-erence between the source tree and the candi-date target trees.
Several frameworks for find-ing translation equivalents or translation units inmachine translation, such as \[Chang and Su 1993,Isabelle et al1993\] and other example-based MTapproaches, might be used to select the pre-ferred mapping.
A general corpus-based statistics-oriented model for statistical transfer in machinetranslation in \[Chang and Su 1993\] is especiallysuitable for such a task.
One can, in fact, modelthe treebank conversion problem as a (statistical)transfer problem in machine translation becauseboth problems deal with the mapping between twostructure representations of the same sentence.The difference is: the transfer problem deals with249sentences that are in two different languages whilethe treebank conversion problem deals with onlyone language.
The mechanism used to find thetransfer units and transfer ules together with thetransfer score used in the above frameworks canthus be used for treebank conversion with littlemodification.Match ing  Met r i c  fo r  T reebankConvers ionThe matching metric or matching score for tree-bank conversion is much simpler than the trans-fer score for the transfer task between two syntaxtrees for two languages.
The intuition is to assumethat: it is very likely that the tree representationfor a sentence in a particular language will haveessentially the same bracket representation, whichmay possibly be associated with different (termi-nal or nonterminal) symbols, when expressed inanother grammar.
We thus use the number ofmatching constituents in the source and targettrees as the matching score for converting fromone source tree to a target tree.~ 3,4,5)~(1 ,2 )  ~ ,4 ,5 )3,4 ,5 ))Figure 2: An  Example  for  the  Tree  Match ingMet r i cTake Figure 2 as an example.
Node '9' in thesource (left) tree contains Nodes '3', '4', '5' as itschildren; Node 'h' in the target (right) tree also hasNodes '3', '4', '5' as its children.
We therefore adda constant score of 1 to the matching score for thistree pair.
The same is true for Node '10' and Node'i'.
Since Node '7' in the source tree and Node ' f '  inthe target ree do not have any corresponding nodeas their counterparts, they contribute nothing tothe matching preference.
When there are singleproductions, like the construct for Node '8' andits sole child Node '6', such constituents will beregarded as the same entity.
Therefore, the matchbetween Node '8' (or Node '6') and Node 'g' will beassigned only one constant score of 1.
This stepcorresponds to reducing such 'single production'rules into only one bracket.
(For instance, XY ~ a b c will have the bracket representationof \[a b c\], instead of \[\[a b c\]\].)
As a result, thematching score for the example tree pair is 3.To facilitate such matching operations andmatching score evaluation, the word indices of thesentence for the source/target tree pair is perco-lated upward (and recursively) to the tree nodesby associating each nonterminal node with thelist of word indices, called an index list, acquiredby concatenating the word indices of its children.
(The index lists are shown near the nodes in Fig-ure 2.)
Two nonterminal nodes which have thesame index list form an aligned node pair; thesubtrees rooted at such aligned nonterminal nodesand terminated with aligned nodes then consti-tute the mapping units between the two trees.The number of such matches thus represents asimple matching score for the tree pair.
The in-dex lists can be easily established by a depth-firsttraversal of the tree.
Furthermore, the existence ofone constituent which consists of terminal nodes(l,l + 1,...,m) can be saved in a chart (a lowertriangular matrix), where chart(l, m) records thenumber of nodes whose terminal children are num-bered from l to m. By using a chart for a tree, allnodes in a chain of single productions will cor-respond to the same count for a particular chartentry.
A match in a source/target node pair willcorrespond to a pair of nonzero cells in the charts;the matching score then reduces to the numberof such pairs.
We therefore have the followingtreebank conversion algorithm based on the simplematching metric described here.The  Base l ine  Treebank  Convers ionA lgor i thmWith the highly simplified mapping model, we canconvert a tree in a treebank into another whichis compatible with the target grammar with thefollowing steps:* 1.
Parse the sentence of the source tree with aparser of the target system based on the targetgrammar.?
2.
For each ambiguous target tree producedin step 1 and the source tree in the originaltreebank, associate ach terminal word with itsword index and associate ach nonterminal nodewith the concatenation of the word indices of itschildren nodes.
This can be done with a depth-first traversal of the tree nodes.?
3.
For the trees of step 2, associate ach treewith a Chart (a lower triangular matrix), whichis initially set to zero in each matrix cell.
Makea traversal of all the tree nodes, say in thedepth-first order, and increment he number inChart(l, m) by one each time a node with theindices (l,...,m) is encountered.250,, 4.
For each chart of the candidate target trees,compare it with the chart of the source tree andassociate a mapping score to the target tree byscanning the two charts.
For each index range(l, m), increment the score for the target ree byone if both the Chart(l, m) entries for the sourcetree and the target tree are non-zero.?
5.
Select the target tree with the highest scoreas the converted target tree for the source tree.When there are ties, the first one encounteredis selected.In spite of its simplicity, the proposed algo-rithm achieves a very promising conversion accu-racy as will be shown in the next section.
Notethat the parser and the grammar system of the tar-get.
system is not restricted in any way; therefore,the annotated information to the target treebankcan be anything inherent from the target system;the bracket information of the original treebankthus provides useful information for bootstrappingthe corpus size and information contents of thetarget treebank.Note also that we do not use any informa-tion other than the index lists (or equivalently thehracket information) in evaluating the matchingmetric.
The algorithm is therefore surprisinglysimple.
Further generalization of the proposedconversion model, which uses more informationsuch as the mapping preference for a source/targettag pair or mapping unit pair, can be formulatedby following the general corpus-based statistics-oriented transfer model for machine translationin \[Chang and Su 1993\].
In \[Chang and Su 1993\],the transfer preference between two trees is mea-sured in terms of a transfer score: p(Tt\[T~) =~'=1 P(t~,j\[t~j) where T~ and T/t are the sourcetree and the i th possible target ree, which can bedecomposed into pairs of transfer (i.e., mapping)units (t~ j, t~ j ) (local subtrees).
The transfer pairscan be f()un~ by aligning the terminal and nonter-minal nodes with the assistance of the index listsas described previously \[Chang and Su 1993\].In fact, the current algorithm can be regardedas a highly simplified model of the above citedframework, in which the terminal words for thesource tree and the target tree are identical andare implicitly aligned exactly 1-to-l; the mappingunits are modeled by the pairs of aligned nodes;and the probabilistic mapping information is re-placed with binary constant scores.
Such assign-ment of constant scores eliminate the requirementfor estimating the probabilities and the require-ment of treebank corpora for training the mappingscores.The following examples show a correctlymatched instance and an erroneouly matched one.INPUT: Depend ing  on the type  of controlused , it may  or may not  respond quicklyenough to protect  against  spikes and  faults?
(Correct answer and selected output are #3.)1.
\[\[\[Depending-on \[\[the type\] \[of \[control used\]\]\]\],\] it \[may-or-may-not respond \[quickly \[enough to\[protect \[against \[spikes and faults\]\]\]\]\]\]\] .2.
\[\[\[Depending-on \[\[the type\] \[of \[control used\]\]\]\],\] it \[may-or-may-not respond \[quickly \[enough to\[protect \[against \[spikes and faults\]\]\]\]\]\]\] .3.
\[\[\[Depending-on \[\[the type\] \[of \[control used\]\]\]\],\] it \[may-or-may-not respond \[\[quickly enough\] [to\[protect \[against \[spikes and faults\]\]\]\]\]\]\] .4.
\[\[\[Depending-on \[\[the type\] \[of \[control used\]\]\]\],\] it \[may-or-may-not respond \[\[quickly enough\] [to\[protect \[against \[spikes and faults\]\]\]\]\]\]\] .INPFr: The PC 's  power supply is capableof absorbing most  noise , spikes , and faults(The correct answer is #3 while the selectedoutput is #2).1.
\[\[\[The PC's\] power-supply\] \[is \[capable \[of \[ab-sorbing \[\[\[\[most noise\] ,\] spikes ,\] and faults\]\]\]\]\]\] .2.
\[\[The PC's\] power-supply\] \[is \[capable \[of \[ab-sorbing \[\[\[most noise\], spikes ,\] and faults\]\]\]\]\]\] .3.
\[\[\[The PC's\] power-supply\] \[is \[capable \[of \[ab-sorbing \[most \[\[\[noise ,\] spikes ,\] and faults\]\]\]\]\]\]\] .4.
\[\[\[The PC's\] power-supply\] \[is \[capable \[of \[\[ab-sorbing most\] \[\[\[noise ,\] spikes ,\] and faults\]\]\]\]\]\] .5.
\[\[\[The PC's\] power-supply\] [is \[capable \[of\[\[\[\[\[absorbing most\] noise\] ,\] spikes ,\] and faults\]\]\]\]\]6.
\[\[\[The PC's\] power-supply\] \[is \[capable \[of \[\[\[\[ab-sorbing most\] noise\] , spikes ,\] and faults\]\]\]\]\] .Exper iment  Resu l t sThe performance of the proposed approach isevaluated on a treebank consisting of 8,867 En-glish sentences (about 140,634 words in total)from the statistical database of the BehaviorTran(formerly the ArchTran \[Su and Chang 1990,Chen el a!.1991\]) MT system.
The English sen-tences are acquired from technical manuals forcomputers and electronic instruments.
Two ver-sions of the grammar used in this MT systemare used in the experiment.
The basic parame-ters for these two grammars are shown in Table1, where G1 and G2 are the source and targetgrammars, #P  is the number of production rules(i.e., context-free phrase structure rules), #E  isthe number of terminal symbols, #A/" is the num-ber of nonterminal symbols and #.,4 is the numberof semantic onstraints or actions associated withthe phrase structure rules.251I G1 I a~ I#:P )rbduction) 1,088 1,101#E terminal) 37 30#Af  J (nonterminal) 107 141#A (constraints) 144 138Table 1: Bas ic  Parameters  o f  the  Two Gram-mars  under  TestingThe target grammar shown here is an improvedversion of the source grammar.
It has a widercoverage, a little more ambiguous tructures, andshorter processing time than the old one.
The ma-jor changes are the representations of some con-structs in addition to the changes in the parts ofspeech and nonterminal syntactic categories.
Forinstance, the hierarchy is revised in the new revi-sion to better handle the 'gaps' in relative clauses,and the tag set is modified to better characterizethe classification of the various words.
Such modi-fications are likely to occur between any two gram-mar systems, which adopt different tag sets, syn-tactic structures and semantic onstraints.
There-fore, it, in some sense, characterizes the typical op-erations which may be applied across two differentsystems.Each sentence produces about 16.9 ambiguoustrees on the average under the new grammar G~.The source trees contain brackets correspondingto the fully parsed structures of the input sen-tences; however, multiple brackets which corre-spond to "single productions" are eliminated toonly one bracket.
For instance, a structure likeX ---* Y ~ Z --~ ab will reduces to the equiv-alent bracket structure of \[ a b\].
This reductionprocess is implied in the proposed algorithm sincewe increment the matching score by one wheneverthe two charts have the same word index rangewhich contains non-zero counts; we do not carehow large the counts are.
This also implies thatthe target tree brackets are also reduced by thesame process.
The reduced brackets, on which thematching is based, in the source and target treesare thus less detailed than their fully parsed treesstructures.After feeding the 8,867 sentences into theparser and selecting the closest match among thetarget trees against the source trees in the tree-bank, it is found that a total of 115 sentences donot produce any legal syntactic structures underthe new grammar, 158 sentences produce no cor-rect structure in terms of the new grammar (in-cluding 12 sentences which produce unique yet er-roneous parses), and 1,546 sentences produce, un-ambiguously, one correct analysis.
The former twocases, which is mostly attributed to the coverage ofthe target grammar, indicate the degree of incom-patibility between the two grammars.
The lattercase will not indicate any difference between anytree conversion algorithms.
Therefore, they arenot considered in evaluating the performance ofthe conversion procedure.For the remaining 7,048 sentences, 6,799source trees axe correctly mapped to their coun-terpart in the new grammar; only 249 trees areincorrectly mapped; therefore, excluding unam-biguously parsed sentences, a conversion accuracyof 96.46% (6,799/7,048) is obtained.
The resultsappear to be very promising with this simple algo-rithm.
It also shows that the bracket informationand the mapping metric do provide very useful in-formation for treebank conversion.Eru~oa TYPE I Percentage (%) ITag Error 19.6Conjunction Error 51.4Attachment Error 23.6Drastic Structural Error 5.4Table 2: E r ror  Type AnalysisA sampling of 146 trees from the 249 incor-rectly mapped trees reveals the error types of mis-match as tabulated in Table 2.
The error in-troduced by inappropriate tags is about 19.6%.Structural error, on the other hand, is about80.4%, which can be further divided into errorsdue to: incorrect mapping of conjunct elementsand/or appositions (51.4%), incorrect attachmentpatterns between heads and modifiers (23.6%) anddrastic structure variation (5.4%).
Note that tag-ging error is far less than structural error; further-more, two trees with drastically different struc-tures are rarely matched.
A closer look shows that2.72% (185/6799) of the correctly mapped treesand 31.73% (79/249) of the incorrectly mappedtrees have the same scores ms the other competingtrees; they are selected because they are the firstcandidate.
The current solution to tie, therefore,tends to introduce incorrectly mapped trees.
Abetter way may be required to avoid the chanceof tie.
For instance, we may increment differentscores for different types of matches or differentsyntactic ategories.The above experiment results confirm our pre-vious assumption that even the simplest skeletalstructure information, like brackets, provides sig-nificant information for selecting the most likelystructure in another grammar system.
This factpartially explains why the simple conversion algo-rithm achieves a satisfactory conversion accuracy.Note that a mapping metric against he sourcetree may introduce systematic bias that prefers the252source structures rather than the target grammar.This phenomenon could prevent he improvementof the new grammar from being reflected in theconverted corpus if the new grammar is a revi-sion of the old one.
Attachment and conjunctionscopes, which may vary from system to system, aremore likely to suffer from such a bias as shown inthe above experiment results.
A wise way to incor-porate preference form the target grammar may benecessary if such bias introduces a significant frac-tion of errors.
Such preference information mayinclude mapping preference acquired from otherextra information or by using other more compli-cated models.From the low error rate of the overall perfor-mance, however, it seems that we need not be toopessimistic with such a bias since most major con-stituents, like noun phrases and verb phrases, rec-ognized by different persons are in agreement toa large extent.
It is probably also true even'forpersons across different laboratories,Since the conversion rate is probably highenough, it.
is possible simply to regard errors inthe converted treebank as noise in probabilisticframeworks, which use the converted treebank forparameter training.
In these cases, further man-ual inspection is not essential and the conversion isbasically automatic.
This situation is particularlytrue if the original source treebank had been man-ually verified, since we can at least make sure thatthe target trees are legal, even though not pre-ferred.
If serious work is necessary to avoid erroraccumulation i the treebank, say in the grammarrevision process, it is suggested only to check afew high-score candidates to save checking time.If, in addition, the major differences of the twogrammars are known, the checking time could befurther educed by only applying detailed checkingto the trees that have relevant structure changes.Of course, there are many factors which mayaffect the performance of the proposed approachamong different grammar systems.
In particu-lar, we did not use the information between themapping of the parts of speech (terminal sym-bols) and the syntactic categories (nonterminalsymbols), which may be useful in the cases wherethe mapping is applied to two trees with the samebracket representation.
In our future research, wewill try to convert large treebanks, such as thePenn Treebank, available in the community intoour grammar system, and make use of more infor-mation on the parts of speech and syntactic at-egories so that a robust conversion algorithm canbe developed.Conc lud ing  RemarksIt is important to be able to share treebanksamong different research organizations.
The sig-nificance for developing a treebank conversiontechnique includes at least: (1) corpus sharingamong different grammar systems and research or-ganizations; (2) automatic system corpus updat-ing between two major revisions; (3) corpus boot-strapping with a large and cheaply tagged tree-bank; (4) avoidance of duplicated investment inthe construction and maintenance of proprietarycorpora; (5) promoting continuous evolution of anold grammar system for a corpus-based system.In this paper, we therefore proposed a simpleapproach for converting one treebank into anotheracross two different grammar systems using a sim-ple conversion metric based one the bracket infor-mation of the original treebank.
The simple met-ric, which evaluates the number of bracket match-ing, turns out to be effective in preserving thestructures across two different grammars.
The ex-periment results show that, excluding unambigu-ous sentences, the conversion accuracy, in terms ofthe number of correctly converted trees, achievesas high as 96.4%.References\[Chang and Su 1993\] Jing-Shin Chang and Keh-Yih Su, 1993.
"A Corpus-Based Statistics-Oriented Transfer and Generation Model forMachine Translation," In Proceedings of TMI-93, pp.
3-14, 5th Int.
Conf.
on Theoretical andMethodological Issues in Machine Translation,Kyoto, Japan, July 14-16, 1993.\[Chen et al 1991\] Shu-Chuan Chen, Jing-ShinChang, Jong-Nae Wang and Keh-Yih Su, 1991.
"ArchTran: A Corpus-based Statistics-orientedEnglish-Chinese Machine Translation System,"In Proceedings of Machine Translation SummitIII, pp.
33-40, Washington, D.C., USA, July 1-4, 1991.\[Isabelle t al.
1993\] Pierre Isabelle, Marc Dymet-man, George Forster, Jean-Marc Jutras, ElliottMachkovitch, Franqois, Perrault, Xiaobo Renand Michel Simard, 1993.
"Translation Anal-ysis and Translation Automation," Proceedingsof TMI-93, pp.
201-217, 5th Int.
Conf.
on The-oretical and Methodological Issues in MachineTranslation, Kyoto, Japan, July 14-16, 1993.\[Marcus et al 1993\] Mitchell P. Marcus, BeatriceSantorini, and Mary Ann Marcinkiewicz, 1993.
"Building a Large Annotated Corpus of English:The Penn Treebank," Computational Linguis-tics, vol.
19, no.
2, pp.
313-330, June 1993.\[Su and Chang 1990\] Keh-Yih Su and Jing-ShinChang, 1990.
"Some Key Issues in Designing253MT Systems," Machine Translation, vol.
5, no.4, pp.
265-300, 1990.254
