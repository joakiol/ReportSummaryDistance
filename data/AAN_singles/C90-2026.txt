GPSG Parsing, Bidirectional Charts, antiConnection GraphsLaurent DEVOS 1,2 Michel GILLOUX 1i Centre National d'~'tudes des T~l&'ommunicationsLAA/SLC/AIARoute de Trdgastel, BP 4022301 Lannion Cedex, France2 l~cole Nationale SupHieure de Sciences Appliqudes et de Technologies,6, rue de Kerampont, BP 44722305 Lannion Cedex, FranceAbstract: Ttfs paper describes a tractable method forparsing GPSG grmnmars without ,altering the modu-larity and expressiveness of this tbnnalism.
The pro-posed method is based on a constraint propagationmech,'ufism which reduces the number of unnecessarystructures built at parse thne through the early detec-tion of inadmissible local trees.
The propagation ofconstraints is rendered efficient by indexing con-straints and categories in a connection graph m~d byusing a bidirectional chat1 pm~er together with a bot-lore-up strategy centered around head constituents.
;\[o IntroductionAmong currant syntactic theories, Generalizedl'hrase Structure Grammars (GPSG) \[4\] provide an ap-pealing solution for describing natural languageswith their modular system of composite categories,rules, constraints and feature propagation principles.As other highly modular systems, GPSG is plaguedby the difficulty of desigtfing an efficient algorithmlor combining its various components into an execut-able program.
Recent attempts to solve this problemhave followed different lines of research.One solution \[9\] rests on die almost equiva-lence between GPSG and Context-Free Grmnmars(CF).
In this framework, GPSG rifles, met~mdes andconstraints on weU-fonned categories and local treesam transforumd before any parsing took place into anequivalent set of CF produclions for which variousefficient pro'sing methods already exist.
In theory,lhis method has the advantage of preserving the hiceexpressive properties of GPSG while leading to a par-sable grammar.
Though, the method is clearly hn-practical in the case of real grammars due to the enor-mous nmnber of categories and local trees whichmust be considered prior to the filtering by the othermodules.A related yet more realistic method \[9\] fol-lows the same strategy of compiling GPSG into an-other grammar description language for which thereexist parsing algorithms.
In this case, the target lan-guage \[6\] has a CF skeleton but is augmented throughfeature descriptions which provide a natural mappingfrom GPSG categories.
Here the difficulty lies forthe linguist in tile expression of the grammar in thetarget language since there exist no algorithm tocompile automatically the GPSG grammar.Another set of approaches \[1,7,8\] attempt obuild fronl scratch a parsing strategy wlfich is suitedto GPSG or rather to a modified version of it.
Themodifications are (sometimes) motivated by linguis..tic arguments, e.g.
enhancing the expressive power,but first to render GPSG computationaly tractable atthe expense of some of its distinctive features.The last class of methods \[2,12\] try to takeGPSG as it is and to design a parsing algorithinwtfich is not only sound but 'also complete with re-.spect to the theory.
Then the difficulty lies in the ef-ficiency of the parser.
The method described in thispaper belongs to tiffs category.
Several principles con-tribute to its efficiency.
First, it is based on a bidi-rectional chart parser, Which, together with the ad..vantages of conventional chart parsing, is well suitedto both the ID/LP decomposition and the palficuhu:role devoted to head constituants.
Second, the vari-ous constraints used in GPSG (linear precedence, headfeature convention, foot teature principle) are viewedas a set of constr,'dnts which are applied as soon aspossible, when necessary, to shorten the developmentof unproductive hypotheses.
Third, the constraintsare precompiled into a connection graph which mini~mizes the computation of category subsumption doneat run time.
And, fourth, the rule invocation strate-gy is bottom-up ,and head-driven in that the only ele-1 151.mentmry active edges created bottom-up in the chartare those corresponding to head constituants.
Thisstrategy allows the FFP and the HFC to be broughtinto use at the time active edges am created and, con-sequently, by instantiating very soon a maximum ofthe foot anti head features of dominating categories,to detect violations of constraints long before con-stituents are completed.2.
Bidirectional chart parsingConventional chart parsing techniques \[5\]avoid redoing identical parses tot grammars having acontext free basis.
In the case of GPSG, these ted>tuques could be straightforwardly customized to ac-commodate ID rules.
This would result in a strategywhere an active edge would be created for each cate-gory in a rule extending a given inactive edge, be it ahead daughter or not.When one considers the go~ of having uninter-esting patzes fail as soon as possible, it becomes imoportant to Make head daughters come into play first.
"Iqais is because they activate a maximum of con-straints on their mother categories by the percolationof features through the t~TC and FI-q:'.
In order tobuild local ID trees around their head daughters, thestrategy should not force the first constituent at-tached to an edge to be its lefiruost one.
We use bidi-rectional chart parsing \[11\] because it relaxes Otisconstraint.
This technique has been first proposed inthe context of speech recognition where isl~md pars-ing is made advantageous because lexical interpreta..tions are weighed by plausibility factors.
Its propo-nents remarked that it could also be well suited tolinguistic theories sharing the notion of head constit-uent, like GPSG.
This intuition was confimaed bythe comparison we made on several chm~ parsingstrategies ( ee section 6 "hnplementation").In order to fit the ID/LP decomposition, eachedge of the bidirectional chart must have the follow-ing structure :Star t  :End  :Ru le  :Match  :Category  :Daughters  :the leftmost position of the edge;the rightmost position;a pointer to the associated ID ale;a bit vector indicating thosemembers in the LHS of Rule withan extension attached to the edge;the category of the edge;the list of daughter categories.Thus an edge is active just in case all bits ofMatch are set to 1.New edges are created in two mtmners.
Someare formed when an inactive edge is an extension of ahead category in an ID rule (rule 1).
They have onlyone daughter category and we call them elementaryedges.
The others stem from the extension (in thechart sense) of an active edge (rule 2).
An active edgeA is extended on its right (resp, on its left) anytime an inactive edge adjacent on the right (resp, onthe left) has a category wtfich is an extension of acategory in the Rule of A whose bit in Match  is notset to 0.
To be validated the new edge should not vio~late any FCR, LP, I-Pb'C or F~ constraint (see beolow).3.
'\]lle connection graphThe categories of edges result (1) from the ap-plication of feature instantiation principles to ,an ac-live edge or (2) from the creation of an elementaryedge.Thus the category of a new edge is always anextension of the category of an already existing edge(I) or of the category in the left-hand side (LHS) ofan ID a le  (2).
Since the whole process is initializedby extending lexical inactive edges, the only catego-ries possible for non-lexical edges are extensions ofa le  LHSs.
In addition, LP mid FCR constraints onlyconcern categories being al extension of respeclivelyboth categories in a LP statement or the ~efl calego..ry in a FCR constraint.
It is then possible to remarkthat the constraints that should be verified on a cate~gory A are inherited fi'om the constraints to be veri-tied on the category B category A stems t}om.
Thisis because for A to be an extension of a category C itis necessary that B may be unified with C.In the sane way, inactive edges of category Amay only become daughters in local trees whose asso-ciated ID rule features a category B in their LHSsuch that A is an extension of B.
Thus determiningthe ID a les by which elemeutary edges cnuld be creoated under the application of rule 1 to an inactiveedge may be seen as inheriting these ID rules fromthe categories of edges leading to it by the recursiveapplication of rule 2 (extension).
These Iwo process-es, inheriting constraints and ID ales,  should be re-lated to the inheritance of colmections in a connec-lion graph theorem prover \[10\].In a commction graph theorem prover (CGTP),resolvents may be only resolved in turn with axiomsconnected to one of their parents, just like in GPSGcategories may be constrained only by constraintsconcerning ttmir mother category, that is the catego-ry they am an extension of.
Importing the techniqueof connection graphs in GPSG allows to reduce the152  2amount of computation eeded to verify constraints.Just like in CGTP, a preprocessing phase, done oncefor all and independently of any phrase to be parsed,connects every categories in rule right-hand sides(RHS), LPs, FCRs and FSDs to the relevant ele-ments of rule LHSs.Thus each LP C 1 < C 2 (resp.
FCR t C 1 ~ C 2)is connected to all categories C such as C unifieswith C 1 or C unifies with C 2 (resp.
such as C uni-fies with C1).
In the case of FCR, categories C suchas C does not unify with C 2 are never created sincethey violtate the FCR.In the same way, FSDs are connected to catego-ries to help determine where they should apply.For example, if we consider the ID rule N 1---> H, PIP and the LP constraint \[+N\] <PP plus treesN 1 \[SUBCAT 30\] PP\[+POS\]paper of Gazdarwe see that the LP must be checked on this pair oftrees because the following connections between theinvolved categories exist:unifies unifiesN 1 -< - \[+N\] < PP ~ PPextends I /nn i f ies  un i f ies~ extendsf (inherited) (inherited) -"N I\[SUBCAT 30\] PP\[+POS\]On this diagram, two connections have been in-herited from former ones.In order to distinguish the types of con-straints connected to categories, several arcs arepresent in the graph.
For exmnple, FCR-Left typearcs connect a category C with a FCR C 1 ~ C 2 suchas C unifies with C 1.Inheritance of constraints in the connectiongraph and creation of bidirectional edges in the chartthus make the bulk of the parsing method.
The meth-od is then completely defined through the ways of :?
applying ID rules, constraints and feature in-stantiation principles to create new edges andcategories;t We assume all FCRs to be in the canonical formC l :~ C 2 since the other formats (e.g.
C 1 = C a)may be decomposed into a set of canonical forms(e.g.
{C 1 ~ C 2, C 2 ~ C l }).?
inheriting connections to ID rules and con-straints for each new edge and category;?
computing the initial connection graph.4.
Applying ID rules, constraints, and featureinstantiation principlesWe assume that, in a first step, ,all metaruleshave been applied when possible to base ID roles togenerate an extended set of ID rules t?.
Thus we areleft we a set of ID nlles, LP and FCR constraints,and feature instantiation principles, included FSDs.4.1.
Immediate Dominance RulesAs remarked in section 3 above, a daughter cat-egory in an edge of the chart must be either the cate-gory of a lexical item or an extension of an ID ruleLHS.
Thus, provided that the connection graph wassuitably initialized, it is sufficient to consider onlythose members in ID role RHSs connected to a lexi-cal item or to an inactive edge in order to create newedges through rules 1 and 2.4.2.
Linear Precedence ConstraintsLP statements ,are checked each time an edge isconsidered for extension through rule 2.
These checksonly occur when a new edge A results from B beingextended on its left (resp.
right) by category C.Then, only those LP, C 1 < C a such as C is connectedto C 2 (resp.
CI) and C 1 (resp.
Ca) is connected tosome daughter of B are considered.
For the selectedLPs, the parser has then to compare C 1 and C 2 on onehand and C and daughters of B on the other handwith respect o the partial order relation is-an-exten-sion-of.4.3.
Feature Co-occurrence RestrictionsIt is not necessary to wait for an edge to be-come inactive before checking FCRs.
In fact, it is farbetter to consider them each time a new edge is creat-ed.
A being the category of the new edge, tiffs re-quires to check each FCR C!
~ C 2 cotmected to tileedge in tile graph through the extension and unifica-tion relations.4.4.
Feature lnstantiation PrinciplesIn order to be able to check LP ,and FCR con-tt  A better method for applying metarules houldtrigger them only when needed by the sentenceto be parsed.
The indexing of constraints in aconnection graph could serve this purpose.3 153straints as soon as possible on new edges, the trans?mission of features though general instantiation prin-ciples (HFC and FFP) is done each time rule 2 isapplied.
Head and foot features of the extending edgeA are compared to those of the extended edge B.There are two cases :o m least one of these features gets inconsis-tent values on rite daughter A and its poten-tied father B; in this situation, edge A is notvalid and the chart is not modified;o all foot and head features get consistent val-re;s; then those which were unspecified or un-derspecified are set to the suitable valuefl~rough unification; the category of the newedge is added to the comiection graph whereit inherits the relevant ID rules, LP, FCRand FSD,4.5.
Feature Specification DefaultsSince feature specification defaults only affectfeatures not set by the feature instantiation pfinci~ples they only apply to inactive edges.
Thus their useconsists in applying otfly those FSD connected in thegraph to the catego~7 of a new inactive dge.5o hfitiMizing the Connection Graphqhe connection graph is initialized in twophases.
A first phase may took place only once forevery grammar since it is independent from the par-ticular phrase to be parsed.
In this phase, all possibleconnections between ID rules categories, LPs, FCI~sand FSDs are computed.
For example, each connecolion between a rule LHS A and a rule RHS elementB such that A ratifies with B are memoriz~ed,The second phase depends on the lexical inter-pretations of the phrase to be parsed and it adds newconnections to the graph.
"lhese co~mections are thosethat hold between a lexical interpretation A and acategory B in the RHS of a rule such that A is ,'u~ ex-tension of B.6.
hnplementation"Ille method has been implemented as a Comomon Lisp program on a pVAX-II.
A core GPSGgrannnar of French was developed using this parser.In order to assess the interest of the bidirectionalchart and its head-driven bottom-up strategy wemade a series of tests consisting in parsing a smallset of French sentences under three different strate-gies : strategy I was left-to-right and top-down,strategy 1I was left-to-right and bottom-up, andstrategy Iii, the chosen one, is bidirectional, bottom-up ,and head-driven.
Table 1 gives the observed perfor-mances of the three strategies measured by the totalnumber of edges created and the total CPU timeneeded to parse all sentences t.StrategyNumber ofedgesCPU time(in seconds)I II III381 189 35238.3 25.1 12,4Table 1 : A comparison of different strate#es7.
ConclusionThe method we propose makes it possible toparse efficiently GPSG grammars but unlike other apoproaches \[1,3,7,8\] it allows the grammar to be ex..pressed in the exact formalism described by Gazdararid his colleagues in \[4\] and does not require an in-tractable preprocessing ptiase like would do e..g. thccompilation of the grmnmar into an equivalent set ofcontext-free productions.Although we did not study in detail the suit-.ability of the method when the control agreementprinciple is taken into account, we do not see any ma-jor incompatibility with the use of a connectiongraph to index the various modules of a GPSG gram~Knar8.
References\[1\] Briscoe, T., Grovel C., Boguraev, B., CaroU,J., "A Formalism and Enviromnent for theDevelopment of a Large Grammar of En-glish', 10th International Joint Conf.
on Ar-tificial Intelligence, pp.
703-708, 1987.\[2\] Busemann, S., Hauenschild, C., "A Consll~c~tire View of GPSG or How to Make ItWork", Proc.
of COLING, pp.
77-.82, 1988.\[3\] Fisher, A. J., "Practical Parsing of General?ized Phrase Structure Grammars", Computa-tional Linguistics, vol.
15, no.
3, pp.
139o148, 1989.\[4\] Gazdar, G., Klein, E., Pullum, S., Sag, 1.,"Generalized Phrase SU'ucmre Grammar",Blackwell Publishing, 1985.?
t CPU time is only an indication of the efficiencyof the method since it measures also our imple-mentation.
No particular effort was spend on tun-ing the implementation.154 4\[5\] Kay, M., "Algorithm Schemata and DataStructures in Syntactic Processing", in Read-ings in Natural Language Processing, B. J.Grosz et al eds, pp.
35-70, 1986.\[6\] Kartunen, L., "D-PATR: A Development En-vironment for Unification Based Grammars",l lth International Conference on Computa-tional Linguistics, p.. 74-80, 1986.\[1\] Kilbury, J., "Category Cooccurrence Restric-tions and the Elimination of Metarules",Proc.
of COLING, p.. 50-55, 1986.\[8\] Kilbnry, J., "Parsing with Category Cooccur-rence Restrictions", Proc.
of COLING, pp.324-327, 1988.\[9\] Shieber, S. M., "A Simple Reconstruction ofGPSG", Proc.
of the l lth International Con-ference on Computational Linguistics, pp.
145-152, 1985.\[10\] Stickel, M. E, "A Nonclausal Connection-Graph Resolution Theorem-Proving Pro-gram", Proc.
of AAAI-82, 229-233, 1982.\[11\] Stock, O., Falcone, R., Insinnamo, P., "IslandParsing ,and Bidirectional Charts", Proc.
ofCOLING, p.. 636-641, 1988.\[112\] Weisweber, W., "Using Constraints in a Con-structive Version of GPSG", Proc.
of COL-ING, pp.
738-743, 1988.5 155
