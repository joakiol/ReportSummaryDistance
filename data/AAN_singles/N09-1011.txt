Human Language Technologies: The 2009 Annual Conference of the North American Chapter of the ACL, pages 92?100,Boulder, Colorado, June 2009. c?2009 Association for Computational LinguisticsEfficiently Parsable Extensions to Tree-Local Multicomponent TAGRebecca NessonSchool of Engineeringand Applied SciencesHarvard UniversityCambridge, MAnesson@seas.harvard.eduStuart M. ShieberSchool of Engineeringand Applied SciencesHarvard UniversityCambridge, MAshieber@seas.harvard.eduAbstractRecent applications of Tree-Adjoining Gram-mar (TAG) to the domain of semantics as wellas new attention to syntactic phenomena havegiven rise to increased interested in more ex-pressive and complex multicomponent TAGformalisms (MCTAG).
Although many con-structions can be modeled using tree-localMCTAG (TL-MCTAG), certain applicationsrequire even more flexibility.
In this pa-per we suggest a shift in focus from con-straining locality and complexity through tree-and set-locality to constraining locality andcomplexity through restrictions on the deriva-tional distance between trees in the same treeset in a valid derivation.
We examine threeformalisms, restricted NS-MCTAG, restrictedVector-TAG and delayed TL-MCTAG, thatuse notions of derivational distance to con-strain locality and demonstrate how theypermit additional expressivity beyond TL-MCTAG without increasing complexity to thelevel of set local MCTAG.1 IntroductionTree-Adjoining Grammar (TAG) has long been pop-ular for natural language applications because of itsability to naturally capture syntactic relationshipswhile also remaining efficient to process.
More re-cent applications of TAG to the domain of seman-tics as well as new attention to syntactic phenomenasuch as scrambling have given rise to increased in-terested in multicomponent TAG formalisms (MC-TAG), which extend the flexibility, and in somecases generative capacity of the formalism but alsohave substantial costs in terms of efficient process-ing.
Much work in TAG semantics makes use oftree-local MCTAG (TL-MCTAG) to model phenom-ena such as quantifier scoping, Wh-question forma-tion, and many other constructions (Kallmeyer andRomero, 2004; Romero et al, 2004).
Certain ap-plications, however, appear to require even moreflexibility than is provided by TL-MCTAG.
Scram-bling is one well-known example (Rambow, 1994).In addition, in the semantics domain, the use of anew TAG operation, flexible composition, is used toperform certain semantic operations that seeminglycannot be modeled with TL-MCTAG alone (Chiangand Scheffler, 2008) and in work in synchronousTAG semantics, constructions such as nested quanti-fiers require a set-local MCTAG (SL-MCTAG) anal-ysis (Nesson and Shieber, 2006).In this paper we suggest a shift in focus fromconstraining locality and complexity through restric-tions that all trees in a tree set must adjoin withina single tree or tree set to constraining locality andcomplexity through restrictions on the derivationaldistance between trees in the same tree set in avalid derivation.
We examine three formalisms, twoof them introduced in this work for the first time,that use derivational distance to constrain localityand demonstrate by construction of parsers their re-lationship to TL-MCTAG in both expressivity andcomplexity.
In Section 2 we give a very brief in-troduction to TAG.
In Section 3 we elaborate fur-ther the distinction between these two types of lo-cality restrictions using TAG derivation trees.
Sec-tion 4 briefly addresses the simultaneity requirementpresent in MCTAG formalisms but not in Vector-92SXaX?YbSXaYbSXaYbY?cYZSXa Yb cYZ?
?Figure 1: An example of the TAG operations substitu-tion and adjunction.TAG formalisms and argues for dropping the re-quirement.
In Sections 5 and 6 we introduce twonovel formalisms, restricted non-simultaneous MC-TAG and restricted Vector-TAG, respectively, anddefine CKY-style parsers for them.
In Section 7we recall the delayed TL-MCTAG formalism intro-duced by Chiang and Scheffler (2008) and define aCKY-style parser for it as well.
In Section 8 weexplore the complexity of all three parsers and therelationship between the formalisms.
In Section 9we discuss the linguistic applications of these for-malisms and show that they permit analyses of someof the hard cases that have led researchers to lookbeyond TL-MCTAG.2 BackgroundA tree-adjoining grammar consists of a set of el-ementary tree structures of arbitrary depth, whichare combined by operations of adjunction and sub-stitution.
Auxiliary trees are elementary trees inwhich the root and a frontier node, called the footnode and distinguished by the diacritic ?, are labeledwith the same nonterminalA.
The adjunction opera-tion entails splicing an auxiliary tree in at an internalnode in an elementary tree also labeled with nonter-minal A.
Trees without a foot node, which serve asa base for derivations and may combine with othertrees by substitution, are called initial trees.
Exam-ples of the adjunction and substitution operations aregiven in Figure 1.
For further background, refer tothe survey by (Joshi and Schabes, 1997).Shieber et al (1995) and Vijay-Shanker (1987)apply the Cocke-Kasami-Younger (CKY) algorithmfirst introduced for use with context-free grammarsin Chomsky normal form (Kasami, 1965; Younger,1967) to the TAG parsing problem to generateparsers with a time complexity of O(n6|G|2).
Inorder to clarify the presentation of our extended TL-MCTAG parsers below, we briefly review the algo-rithm of Shieber et al (1995) using the inferencerule notation from that paper.
As shown in Figure 2,items in CKY-style TAG parsing consist of a nodein an elementary tree and the indices that mark theedges of the span dominated by that node.
Nodes,notated ?
@a?, are specified by three pieces of infor-mation: the identifier ?
of the elementary tree thenode is in, the Gorn address a of the node in thattree1, and a diacritic, ?, indicating that an adjunc-tion or substitution is still available at that node or ?,indicating that one has already taken place.Each item has four indices, indicating the left andright edges of the span covered by the node as wellas any gap in the node that may be the result of afoot node dominated by the node.
Nodes that donot dominate a foot node will have no gap in them,which we indicate by the use of underscores in placeof the indices for the gap.
To limit the number of in-ference rules needed, we define the following func-tion i ?
j for combining indices:i ?
j =????????
?i j =j i =i i = jundefined otherwiseThe side conditions Init(?)
and Aux(?)
hold if ?is an initial tree or an auxiliary tree, respectively.Label(?
@a) specifies the label of the node in tree?
at address a.
Ft(?)
specifies the address of thefoot node of tree ?.
Adj(?
@a, ?)
holds if tree ?may adjoin into tree ?
at address a.
Subst(?
@a, ?
)holds if tree ?
may substitute into tree ?
at addressa.
These conditions fail if the adjunction or substitu-tion is prevented by constraints such as mismatchednode labels.Multi-component TAG (MCTAG) generalizesTAG by allowing the elementary items to be setsof trees rather than single trees (Joshi and Schabes,1997).
The basic operations are the same but alltrees in a set must adjoin (or substitute) into anothertree or tree set in a single step in the derivation.An MCTAG is tree-local if tree sets are requiredto adjoin within a single elementary tree (Weir,1A Gorn address uniquely identifies a node within a tree.The Gorn address of the root node is ?.
The jth child of thenode with address i has address i ?
j.93Goal Item: ??@?
?, 0, , , n?
Init(?)Label(?@?)
= STerminal Axiom: ??
@a?, i?
1, , , i?
Label(?
@a) = wiEmpty Axiom: ??
@a?, i, , , i?
Label(?
@a) = ?Foot Axiom: ??@Ft(?
)?, p, p, q, q?
Aux(?
)Unary Complete: ??
@(a ?
1)?, i, j, k, l?
?
@(a ?
2) undefined??
@a?, i, j, k, l?Binary Complete: ??
@(a ?
1)?, i, j, k, l?, ??
@(a ?
2)?, l, j?, k?,m???
@a?, i, j ?
j?, k ?
k?,m?Adjoin: ??@?
?, i, p, q, l?, ??
@a?, p, j, k, q?
Adj(?
@a, ?)??
@a?, i, j, k, l?No Adjoin: ??
@a?, i, j, k, l???
@a?, i, j, k, l?Substitute: ??@?
?, i, , , l?
Subst(?
@a, ?)??
@a?, i, , , l?Figure 2: The CKY algorithm for TAG1988).
Although tree-local MCTAG (TL-MCTAG)has the same generative capacity as TAG (Weir,1988), the conversion to TAG is exponential andthe TL-MCTAG formalism is NP-hard to recognize(S?gaard et al, 2007).
An MCTAG is set-localif tree sets required to adjoin within a single ele-mentary tree set (Weir, 1988).
Set-local MCTAG(SL-MCTAG) has equivalent expressivity to linearcontext-free rewriting systems and recognition isprovably PSPACE complete (Nesson et al, 2008).3 Domains of Locality and DerivationTreesThe domains of locality of TL-MCTAG and SL-MCTAG (and trivially, TAG) can be thought of aslexically defined.
That is, all locations at which theadjunction of one tree set into another may occurmust be present within a single lexical item.
How-ever, we can also think of locality derivationally.
Ina derivationally local system the constraint is on therelationships allowed between members of the sametree set in the derivation tree.TAG derivation trees provide the informationabout how the elementary structures of the grammarcombine that is necessary to construct the derivedtree.
Nodes in a TAG derivation tree are labeled withidentifiers of elementary structures.
One elementarystructure is the child of another in the derivation treeif it adjoins or substitutes into it in the derivation.Arcs in the derivation tree are labeled with the ad-dress in the target elementary structure at which theoperation takes place.In MCTAG the derivation trees are often drawnwith identifiers of entire tree sets as the nodes ofthe tree because the lexical locality constraints re-quire that each elementary tree set be the deriva-tional child of only one other tree set.
However, ifwe elaborate the derivation tree to include a node foreach tree in the grammar rather than only for eachtree set we can see a stark contrast in the derivational94SA B?
?A?B?ab{ }AaBA?B?A Bb{ }1:2:3:12a 2b3a 3b3a 3b2a 2b?????
?Figure 3: An example SL-MCTAG grammar that gener-ates the language ww and associated derivation tree thatdemonstrating an arbitrarily long derivational distancebetween the trees of a given tree set and their nearest com-mon ancestor.
Note that if this grammar is interpreted asa TL-MCTAG grammar only two derivations are possible(for the strings aa and bb).locality of these two formalisms.
In TL-MCTAGall trees in a set must adjoin to the same tree.
Thismeans that they must all be siblings in the derivationtree.
In SL-MCTAG, on the other hand, it is possi-ble to generate derivations with arbitrarily long dis-tances before the nearest common ancestor of twotrees from the same elementary tree set is reached.An example SL-MCTAG grammar that can producean arbitrarily long derivational distance to the near-est common ancestor of the trees in a given tree setis given in Figure 3.Chiang and Scheffler (2008) recently introducedone variant of MCTAG, delayed Tree-Local MC-TAG (delayed TL-MCTAG) that uses a derivationalnotion of locality.
In this paper we introduce two ad-ditional derivationally local TAG-based formalisms,restricted non-simultaneous MCTAG (restricted NS-MCTAG) and restricted Vector TAG (restricted V-TAG) and demonstrate by construction of parsershow each gives rise to a hierarchy of derivation-ally local formalisms with a well-defined efficiencypenalty for each step of derivational distance permit-ted.4 The Simultaneity RequirementIn addition to lexical locality constraints the defini-tion of MCTAG requires that all trees from a set ad-join simultaneously.
In terms of well-formed deriva-tion trees, this amounts to disallowing derivationsin which a tree from a given set is the ancestor ofa tree from the same tree set.
For most linguisticapplications of TAG, this requirement seems natu-ral and is strictly obeyed.
There are a few appli-cations, including flexible composition and scram-bling in free-word order languages that benefit fromTAG-based grammars that drop the simultaneity re-quirement (Chiang and Scheffler, 2008; Rambow,1994).
From a complexity perspective, however,checking the simultaneity requirement is expensive(Kallmeyer, 2007).
As a result, it can be advan-tageous to select a base formalism that does notrequire simultaneity even if the grammars imple-mented with it do not make use of that additionalfreedom.5 Restricted Non-simultaneous MCTAGThe simplest version of a derivationally local TAG-based formalism is most similar to non-local MC-TAG.
There is no lexical locality requirement at all.In addition, we drop the simultaneity requirement.Thus the only constraint on elementary tree sets isthe limit, d, on the derivational distance betweenthe trees in a given set and their nearest commonancestor.
We call this formalism restricted non-simultaneous MCTAG.
Note that if we constrain d tobe one, this happens to enforce both the derivationaldelay limit and the lexical locality requirement ofTL-MCTAG.A CKY-style parser for restricted NS-MCTAGwith a restriction of d is given in Figure 4.
The itemsof this parser contain d lists, ?1, .
.
.
,?d, called his-tories that record the identities of the trees that havealready adjoined in the derivation in order to enforcethe locality constraints.
The identities of the trees ina tree set that have adjoined in a given derivation aremaintained in the histories until all the trees fromthat set have adjoined.
Once the locality constraintis checked for a tree set, the Filter side conditionexpunges those trees from the histories.
A tree isrecorded in this history list with superscript i, wherei is the derivational distance between the locationwhere the recorded tree adjoined and the location ofthe current item.
The locality constraint is enforcedat the point of adjunction or substitution where the95Goal Item Init(?1)??0@?
?, 0, , , n, ?, .
.
.
, ??
Label(?0@?)
= S|?| = 1Terminal Axiom?
?x@a?, i?
1, , , i, ?, .
.
.
, ??
Label(?x@a) = wiEmpty Axiom?
?x@a?, i, , , i, ?, .
.
.
, ??
Label(?x@a) = ?Foot Axiom?
?x@Ft(?x)?, p, p, q, q, ?, .
.
.
, ??
Aux(?x)Unary Complete?
?x@(a ?
1)?, i, j, k, l,?1, .
.
.
,?d?
?x@(a ?
2) undefined?
?x@a?, i, j, k, l,?1, .
.
.
,?d?Binary Complete Filter(?11 ?
?12, .
.
.
,?
?x@(a ?
1)?, i, j, k, l,?11, .
.
.
,?d1??
?x@(a ?
2)?, l, j?, k?,m,?12, .
.
.
,?d2?
?d1 ?
?d2) =?
?x@a?, i, j ?
j?, k ?
k?,m,?1, .
.
.
,?d?
?1, .
.
.
,?dAdjoin: Adj(?x@a, ?y)??y@?
?, i, p, q, l,?11, .
.
.
,?d?11 , ???
?x@a?, p, j, k, q,?12, .
.
.
,?d2?
Filter(?12 ?
{?y},?22 ?
?11,?
?x@a?, i, j, k, l,?1, .
.
.
,?d?
.
.
.
,?d2 ?
?d?11 ) =?1, .
.
.
,?dSubstitute:??y@?
?, i, , , l,?11, .
.
.
,?d?11 , ??
Subst(?x@a, ?y)?
?x@a?, i, , , l,?1, .
.
.
,?d?
Filter({?y},?11, .
.
.
,?d?11 )= ?1, .
.
.
,?dNo Adjoin:?
?x@a?, i, j, k, l,?1, .
.
.
,?d??
?x@a?, i, j, k, l,?1, .
.
.
,?d?Figure 4: Axioms and inference rules for the CKY algorithm for restricted NS-MCTAG with a restriction of d.history at the limit of the permissible delay must beempty for the operation to succeed.6 Restricted V-TAGA Vector-TAG (V-TAG) (Rambow, 1994) is similarto an MCTAG in that the elementary structures aresets (or vectors) of TAG trees.
A derivation in a V-TAG is defined as in TAG.
There is no locality re-quirement or other restriction on adjunction exceptthat if one tree from a vector is used in a derivation,all trees from that vector must be used in the deriva-tion.
The trees in a vector may be connected bydominance links between the foot nodes of auxiliarytrees and any node in other trees in the vector.
Alladjunctions must respect the dominance relations inthat a node ?1 that dominates a node ?2 must appearon the path from ?2 to the root of the derived tree.The definition of V-TAG is very similar to that ofnon-local MCTAG as defined by Weir (1988) exceptthat in non-local MCTAG all trees from a tree set arerequired to adjoin simultaneously.Restricted V-TAG constrains V-TAG in severalways.
First, the dominance chain in each elementarytree vector is required to define a total order overthe trees in the vector.
This means there is a sin-gle base tree in each vector.
Note also that all treesother than the base tree must be auxiliary trees in or-der to dominate other trees in the vector.
The basetree may be either an initial tree or an auxiliary tree.Second, a restricted V-TAG has a restriction level,d, that determines the largest derivational distancethat may exists between the base tree and the high-est tree in a tree vector in a derivation.
RestrictedV-TAG differs from restricted NS-MCTAG in oneimportant respect: the dominance requirements ofrestricted V-TAG require that trees from the same96set must appear along a single path in the derivedtree, whereas in restricted NS-MCTAG trees fromthe same set need not adhere to any dominance rela-tionship in the derived tree.A CKY-style parser for restricted V-TAG with re-striction level d is given in Figure 5.
Parsing is sim-ilar to delayed TL-MCTAG in that we have a setof histories for each restriction level.
However, be-cause of the total order over trees in a vector, theparser only needs to maintain the identity of thehighest tree from a vector that has been used in thederivation along with its distance from the base treefrom that vector.
The Filter side condition accord-ingly expunges trees that are the top tree in the dom-inance chain of their tree vector.
The side conditionsfor the Adjoin non-base rule enforce that the domi-nance constraints are satisfied and that the deriva-tional distance from the base of a tree vector to itscurrently highest adjoined tree is maintained accu-rately.
We note that in order to allow a non-total or-dering of the trees in a vector we would simply haveto record all trees in a tree vector in the histories asis done in the delayed TL-MCTAG parser.7 Delayed TL-MCTAGChiang and Scheffler (2008) introduce the de-layed TL-MCTAG formalism which makes use ofa derivational distance restriction in a somewhat dif-ferent way.
Rather than restricting the absolute dis-tance between the trees of a set and their nearestcommon ancestor, given a node ?
in a derivationtree, delayed TL-MCTAG restricts the number oftree sets that are not fully dominated by ?.
Bor-rowing directly from Chiang and Scheffler (2008),Figure 7 gives two examples.Parsing for delayed TL-MCTAG is not discussedby Chiang and Scheffler (2008) but can be accom-plished using a similar CKY-style strategy as in thetwo parsers above.
We present a parser in Fig-ure 6.
Rather than keeping histories that recordderivational distance, we keep an active delay listfor each item that records the delays that are active(by recording the identities of the trees that have ad-joined) for the tree of which the current node is apart.
At the root of each tree the active delay list isfiltered using the Filter side condition to remove alltree sets that are fully dominated and the resultingFigure 7: Examples of 1-delay (top) and 2-delay (bottom)taken from Chiang and Scheffler (2008).
The delays aremarked with dashed boxes on the derivation trees.list is checked using the Size to ensure that it con-tains no more than d distinct tree sets where d is thespecified delay for the grammar.
The active delaysfor a given tree are passed to its derivational parentwhen it adjoins or substitutes.Delayed TL-MCTAG differs from both of the pre-vious formalisms in that it places no constraint onthe length of a delay.
On the other hand whilethe previous formalisms allow unlimited short de-lays to be pending at the same time, in delayed TL-MCTAG, only a restricted number of delays may beactive at once.
Similar to restricted V-TAG, thereis no simultaneity requirement, so a tree may haveanother tree from the same set as an ancestor.8 ComplexityThe complexity of the restricted NS-MCTAG andrestricted V-TAG parsers presented above dependson the number of possible histories that may appearin an item.
For each step of derivational distancepermitted between trees of the same set, the corre-sponding history permits many more entries.
His-tory ?1 may contain trees that have adjoined intothe same tree as the node of the current item.
Thenumber of entries is therefore limited by the num-ber of adjunction sites in that tree, which is in turnlimited by the number of nodes in that tree.
We willcall the maximum number of nodes in a tree in thegrammar t. Theoretically, any tree in the grammarcould adjoin at any of these adjunction sites, mean-ing that the number of possible values for each entryin the history is bounded by the size of the grammar|G|.
Thus the size of ?1 is O(|G|t).
For ?2 the en-97Unary Complete?
?x@(a ?
1)?, i, j, k, l,?1, .
.
.
,?d?
?x@(a ?
2) undefined?
?x@a?, i, j, k, l,?1, .
.
.
,?d?Binary Complete?
?x@(a ?
1)?, i, j, k, l,?11, .
.
.
,?d1??
?x@(a ?
2)?, l, j?, k?,m,?12, .
.
.
,?d2??
?x@a?, i, j ?
j?, k ?
k?,m,?11 ?
?12, .
.
.
,?d1 ?
?d2?Adjoin base: Adj(?x@a, ?1)??1@?
?, i, p, q, l,?11, .
.
.
,?d?11 , ???
?x@a?, p, j, k, q,?12, .
.
.
,?d2?
Filter(?12 ?
{?1},?22 ?
?11,?
?x@a?, i, j, k, l,?1, .
.
.
,?d?
.
.
.
,?d2 ?
?d?11 ) =?1, .
.
.
,?dAdjoin non-base:??y@?
?, i, p, q, l,?11, .
.
.
,?d?11 , ???
?x@a?, p, j, k, q,?12, .
.
.
,?d2?
Adj(?x@a, ?y)?
?x@a?, i, j, k, l,?1, .
.
.
,?d?
Filter(?12?
,?22?
?
?11, .
.
.
,for unique ?i2 s.t.
?y?1 ?
?i2,?i2?
= (?i2 ?
?i?11 ?
{?y})?
{?y?1} ?d2?
?
?d?11 ) =for ?i2 s.t.
?y?1 /?
?i2,?i2?
= ?i2 ?
?i?11 ?1, .
.
.
,?dSubstitute:??1@?
?, i, , , l,?11, .
.
.
,?d?11 , ??
Subst(?x@a, ?1)?
?x@a?, i, , , l,?1, .
.
.
,?d?
Filter({?1},?11, .
.
.
,?d?11 )= ?1, .
.
.
,?dNo Adjoin:?
?x@a?, i, j, k, l,?1, .
.
.
,?d??
?x@a?, i, j, k, l,?1, .
.
.
,?d?Figure 5: Inference rules for the CKY algorithm for restricted V-TAG with a restriction of d. Item form, goal item andaxioms are omitted because they are identical to those in restricted NS-MCTAG parser.tries correspond to tree that have adjoined into a treethat has adjoined into the tree of the current item.Thus, for each of the t trees that may have adjoinedat a derivational distance of one, there are t moretrees that may have adjoined at a derivational dis-tance of two.
The size of ?2 is therefore |G|t2 .
Thecombined size of the histories for a grammar with adelay or restriction of d is therefore O(|G|?di=1 td).Replacing the sum with its closed form solution, wehave O(|G| td+1?1t?1 ?1) histories.Using the reasoning about the size of the historiesgiven above, the restricted NS-MCTAG parser pre-sented here has a complexity of O(n6 |G|1+ td+1?1t?1 ),where t is as defined above and d is the limit on de-lay of adjunction.
For a tree-local MCTAG, the com-plexity reduces to O(n6 |G|2+t).
For the linguis-tic applications that motivate this chapter no delaygreater than two is needed, resulting in a complexityof O(n6 |G|2+t+t2).The same complexity analysis applies for re-stricted V-TAG.
However, we can provide a some-what tighter bound by noting that the rank, r, ofthe grammar?how many tree sets adjoin in a sin-gle tree?and the fan out, f of the grammar?howmany trees may be in a single tree set?are limitedby t. That is, a complete derivation containing |D|tree sets can contain no more than t |D| individualtrees and also no more than rf |D| individual trees.In the restricted V-TAG algorithm we maintain onlyone tree from a tree set in the history at a time, sorather than maintaining O(t) entries in each history,we only need to maintain the smaller O(r) entries.The complexity of the delayed TL-MCTAGparser depends on the number of possible active de-lay lists.
As above, each delay list may have a maxi-mum of t entries for trees that adjoin directly into it.The restriction on the number of active delays meansthat the active delay lists passed up from these childnodes at the point of adjunction or substitution canhave size no more than d. This results in an addi-tional td(f ?
1) possible entries in the active de-98Goal Item: Init(?1)??0@?
?, 0, , , n, ?, .
.
.
, ??
Label(?0@?)
= S|?| = 1Terminal Axiom?
?x@a?, i?
1, , , i, ?, .
.
.
, {?x}?
Label(?x@a) = wiEmpty Axiom?
?x@a?, i, , , i, ?, .
.
.
, {?x}?
Label(?x@a) = ?Foot Axiom?
?x@Ft(?x)?, p, p, q, q, ?, .
.
.
, {?x}?
Aux(?x)Unary Complete?
?x@(a ?
1)?, i, j, k, l,??
?x@(a ?
2) undefined?
?x@a?, i, j, k, l,?
?Binary Complete?
?x@(a ?
1)?, i, j, k, l,?1??
?x@(a ?
2)?, l, j?, k?,m,?2??
?x@a?, i, j ?
j?, k ?
k?,m,?1 ?
?2?Adjoin:??y@?
?, i, p, q, l,????
?x@a?, p, j, k, q,???
Adj(?x@a, ?y)?
?x@a?, i, j, k, l,???
?
???
Filter(??,???)Size(???)
?
dSubstitute:??y@?
?, i, , , l,???
Subst(?x@a, ?y)?
?x@a?, i, , , l,???
?
{?x}?
Filter(??,???)Size(???)
?
dNo Adjoin:?
?x@a?, i, j, k, l,???
?x@a?, i, j, k, l,?
?Figure 6: Axioms and inference rules for the CKY algorithm for delayed TL-MCTAG with a delay of d.lay list, giving a total number of active delay listsof O(|G|t(1+d(f?1))).
Thus the complexity of theparser is O(n6 |G|2+t(1+d(f?1))).9 ConclusionEach of the formalisms presented above extends theflexibility of MCTAG beyond that of TL-MCTAGwhile maintaining, as we have shown herein, com-plexity much less than that of SL-MCTAG.
All threeformalisms permit modeling of flexible composi-tion (because they permit one member of a tree setto be a derivational ancestor of another tree in thesame set), at least restricted NS-MCTAG and re-stricted V-TAG permit analyses of scrambling, andall three permit analyses of the various challeng-ing semantic constructions mentioned in the intro-duction.
We conclude that extending locality byconstraining derivational distance may be an effec-tive way to add flexibility to MCTAG without losingcomputational tractability.AcknowledgmentsThis material is based upon work supported by theNational Science Foundation under Grant No.
BCS-0827979.ReferencesDavid Chiang and Tatjana Scheffler.
2008.
Flexible com-position and delayed tree-locality.
In The Ninth Inter-national Workshop on Tree Adjoining Grammars andRelated Formalisms (TAG+9).Aravind K. Joshi and Yves Schabes.
1997.
Tree-adjoining grammars.
In G. Rozenberg and A. Salo-maa, editors, Handbook of Formal Languages, pages69?124.
Springer.99Laura Kallmeyer and Maribel Romero.
2004.
LTAGsemantics with semantic unification.
In Proceedingsof the 7th International Workshop on Tree-AdjoiningGrammars and Related Formalisms (TAG+7), pages155?162, Vancouver, May.Laura Kallmeyer.
2007.
A declarative characterizationof different types of multicomponent tree adjoininggrammars.
In Andreas Witt Georg Rehm and LotharLemnitzer, editors, Datenstrukturen fu?r linguistischeRessourcen und ihre Anwendungen, pages 111?120.T.
Kasami.
1965.
An efficient recognition and syntaxalgorithm for context-free languages.
Technical Re-port AF-CRL-65-758, Air Force Cambridge ResearchLaboratory, Bedford, MA.Rebecca Nesson and Stuart M. Shieber.
2006.
Sim-pler TAG semantics through synchronization.
In Pro-ceedings of the 11th Conference on Formal Grammar,Malaga, Spain, 29?30 July.Rebecca Nesson, Giorgio Satta, and Stuart M. Shieber.2008.
Complexity, parsing, and factorization of tree-local multi-component tree-adjoining grammar.
Tech-nical report, Harvard University.Owen Rambow.
1994.
Formal and computational as-pects of natural language syntax.
Ph.D. thesis, Uni-versity of Pennsylvania, Philadelphia, PA.Maribel Romero, Laura Kallmeyer, and Olga Babko-Malaya.
2004.
LTAG semantics for questions.
InProceedings of the 7th International Workshop onTree-Adjoining Grammars and Related Formalisms(TAG+7), pages 186?193, Vancouver, May.Stuart M. Shieber, Yves Schabes, and Fernando C. N.Pereira.
1995.
Principles and implementation ofdeductive parsing.
Journal of Logic Programming,24(1?2):3?36, July?August.
Also available as cmp-lg/9404008.Anders S?gaard, Timm Lichte, and Wolfgang Maier.2007.
On the complexity of linguistically motivatedextensions of tree-adjoining grammar.
In Recent Ad-vances in Natural Language Processing 2007.K.
Vijay-Shanker.
1987.
A study of tree-adjoining gram-mars.
PhD Thesis, Department of Computer and In-formation Science, University of Pennsylvania.David Weir.
1988.
Characterizing mildly context-sensitive grammar formalisms.
PhD Thesis, Depart-ment of Computer and Information Science, Univer-sity of Pennsylvania.D.H.
Younger.
1967.
Recognition and parsing ofcontext-free languages in time n3.
Information andControl, 10(2):189?208.100
