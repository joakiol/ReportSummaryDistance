Word Manager.
A Sys tem for the  Def in i t ion ,  Access  andMa intenance  o f  Lexica l  DatabasesMarc DOMENIGInstitut ffir InformatikUniversitt~t Zfirich-IrchelCH-8057 ZfirichSwi~er landAbstractThis paper describes Word Manager, a system whichis currently the object of a research project at theUniversity of Zfirich Computer Science Department.Word Manager supports the definition, access andmaintenance  of lexical databases.
It comprises aformal  language for the imp lemenat ion  ofmorphological knowledge.
This formal language isintegrated in a graphics-oriented, high-level userInterface and is language independent.
The project isnow in the prototyping phase where parts of thesoftware are pretty far advanced (the user interface)and  .others are sti l l  rud imentary  (the rulecompi lcr /runt ime system).
The design of the systemwas strongly inf luenced by Koskenniemi's two-levelmodel /Koskenniemi  1983/,  its successors /Bear1986/,  /B lack  1986/,  /Bor in 1986/,  /Darymple1987/, the ANSI-SPARC 3-Schema Concept /ANSI-X3-SPARC 1975/ and visual programming techniques/Bocker 1986/,  /Myers 1986/: We will focus thediscussion on one aspect: the user interfacing for theconstruction of the lexlcal data base.I.
IntroductionAs i have argued elsewhere /Domenig 1986, 1987a,1987b/, a dedicated system yields many advantagesfor the implementat ion,  use and maintenance  oflexical databases.
The funct ional i ty  of genera lpurpose database management systems - e.g.relational ones - ls too limited for lexlcal databasesbecause they are not tuned to the task at hand; Inparticular, they do not provide for a formalism whichis suited to describe linguistic knowledge.
Thereason wily we would like to have such a formalism isthat it allows us to take advantage of a computer'sprocessing abilities, i.e.
we may construct a lexiealdatabase which is not  only a collection of purely'static' information - a set of entr ies - but  has'dynamic ~ capabilities.
For instance, the latter mightbe that  it can analyse and generate inflected orcomposed word forms.
"What would be the advantageof that?"
one might ask.
"It is no problem to add onthese capabil it ies to a purely 'static' set of entriesstored within a commercial ly available databasemanagement system by writing programs in the hostlanguage to this systemI"The answer is: there are a lot of advantages andI hope to clarify some of them in this paper.
Adedicated system supports the construction, use andmaintenance of lexical databases much more directlythan a general purpose database management systemin con junct ion  with a convent ional  programming154language interface.
Word Manager was designed assuch a system, whereas Word Manager does notnecessari ly manage all the information stored in alexical database.
At this stage of the project, itmanages only morphological knowledge, i.e.
it wouldbe quite feasible to use it as a front-end to a databasemanaged by a general purpose system.2.
Overview of the user interfacingWord Manager d is t inguishes two quite differentInterfaces for the construct ion and maintenance oflexical databases: one for the specification of what Iterm conceptual knowledge (linguist interface) andone for the specif icat ion of what I call non-conceptual knowledge (lexicographer interface).
Theformer is the place where the kind of morphologicalknowledge is defined which can be typically found Ingrammars, the latter is a dialogue-oriented interfacefor the entering of the bulk of the data.The relationship between the two Interfaces isone of a strong dependency, i.e.
the lexicographerinterface depends very much on the specifications Inthe l ingu is t  interface.
Much of the mach ine-lexicographer dialogue can be inferred automaticallyfrom these specifications.
The formalism employedin the l inguist interface was designed to be powerfulenough to implement  morphological knowledge ofseveral natura l  languages on the one hand,  yetdedicated enough to be easy to handle for l inguists.Moreover, it provides the opportunity to experimentwith different conceptua l  approaches wi th in  acertain framework.
The following section will ouflineit.3.
The specification of morphological knowledge inthe linguist interfaceThe l inguist  interface is conceived as a highlycontrolled environment which takes advantage of thelatest hard- and software technology.
This means thatthe user  does not communicate with the computeron the level of its operating system except for whenthe appl icat ion is started.
On the level of theoperat ing system, each morphological knowledgespecification is represented by a so-called document/con (the two rightmost icons in Fig.
1 are documenticons).
By mousing such an icon, the user may startthe application and load the specification stored inthe document.
Alternatively, he could start it bymousing the application Icon (the leftmost icon InFig.
I is the application icon).
Within the applicationenv i ronment ,  each document  (morpholog ica lknowledge specification) is represented by a so-@ Fi|e CompileFig.
I: The level of the operating systemFig.
2: The top level of the l in~is t  interface applicationcalled tool-window which contains eight labelledcheck-bones (see Fig.
2).
Each of these check-boxesrepresents  a window, the name and purpose ofwhich is indicated by the labehThe window surface character set provides forthe definition of the character set out of which so-called surface strings are built.
Surfhce strings areused for the surface representat ion of word forms.The window is graphics-or iented, i.e.
most of thedef in i t ions are done with mouse-  and menucommands (see Fig.
3).The window lexlcal character set provides forthe definition of the character set out of which so~called lexical stzlngs are built.
Lexical strings areused to define linguistically motivated abstractions ofsurface strings.
The set is usual ly defined to includecharacters  denoting morpheme boundar ies  and/ormorphophonemes.
The window is ve~ T similar to thesurface character set window.The window feature domains provides for thedomain specif ications of the attrlbute-value pairswhich are used in the rule-  and const i tuentspecif icat ions (see below).
The window is a text-oriented editor.
An examp~.e specification is shown inv~g.
4.Cat; (N V A \]?
Q)Case (NCH G%IN DAT ACC)Genciar (M F N)hbn (S~ PL)~lg.
4: Example definit ion in windowjkature domainsThe window feature dependencies providesfor the definition of dependencies between features./~m example specification is stiown in Fig.
5.
(Cat N) demands G~nderFig.
5: F~ample deflui?ion in window featuredependencies155-0  .
.
.
.
.
,'< ,i,',.
'iGorman:surface character set0 i 2 8 4 5 8 7 8P p ti""A O a qB R b rC S c sD T d tE U e uF D f vG Wg wH X h xI Y i yJ IZ j z i~K kL IM mN n0 oC D E F 9 A BiI I II \]r I.~ii Ii?i ol, r ,  o o o :.
?
.
.
j k , ?l",Ix c v b .
m .I I I~II ........
I l i l lspecie/characterscharacter sort order,___I~A.A a ~ B b C c O d IEo\[~>{~\[\]I?\[  ,ligature sort orderAE  A ae ~ -----OE 0 oessBUE 0 ue 0Ol I0~comment@The German surface ,,, --Fig.
3: The window surface character  setThe window two-level rules provides for thedefinit ion of morphophonemic rules which realizethe mapping funct ion between the surface- andlexical strings.
The rules specified here are similar tothose in DKIMMO/TWOL /Darymple 1987/.
Thewindow is a text--oriented editor.
An examplespecification is shown in Fig.
6 (the two rules handlenoun genitive \[e\]s: the first one replaces "+" by "e" asin Strausses,  Reflexes, Reizes, the second onedupl icates "s" as in VerhtHtnisses, Verht~ngnisses,Erschwernisses).The window funct ions  provides for thedet in i t ion  of ru les  for the k ind of s t r ing-manipulat ions which should not be realized with two-level rules (because their power would be excessiveor they would imply the introduction of linguisticallyunmot ivated morphophonemes).
The window is atext-or iented editor.
An example specif ication isshown in Fig.
7 (ReCap recapitalizes prefixed nouns).ReCap" (.*)A(.
*)/\la\2" value" (.
*) B (.
*)/\Ib\2" value.
.
o" (.
*) Z (.
*)/\iz\2" value"^a(.
*)/A\I" value"^b (.
*)/B\I" value"^z (.
*)/Z\I" valueFig.
7: Example definition in windowfunct/ons"o* \[SXZ\] " (ICat N-ROC~f) '"' (ICat N-ENDING)".
*" {ICat N-ROOT) "nis/niss" (ICat N-~qgING)"+s/es" (Case GEN)"+s/es" (Case (~lq)156Fig.
6: Example definition in window two-level rulesGerman: inf lect ion I I q|I(c.t N)i (Cat u) \]l(cot A) lI!
\]\]( IRuie UMLAUT) I('""__'e \]i ( ICat  N-SUFFIX)~(IRule ?\[EIS/+E)L~ .
.
.
.
.
.
,Fig.
8: The window i~IjIeetionThe: window inflection provides for thedefinition of word classes with their inflectional rulesand paradigms.
This window is a graphical treeeditor which allows the interactive construct ion ofan n-ary tree.
This tree is used to structure the rulesand const ituents which define the word classes.
Thes t ructur ing  criteria are features (attribute valuepairs) and the structure has the following semantics:the rule:; specified in a subtree operate on theconstitueats specified within the same subtree.
Fig.
8shows a subt ree  which conta ins  ru les  andconstituents for German noun Inflection (only the topbranch (IRule UMLAUT) ls expanded down to theterminal  nodes).
The terminal  nodes of the treecontain either rules or const i tuents.
By mousingthem, the user  may open text-or iented editorwindows.
An example of a rule is shown in Fig.
9: itconsists of matching constraints (realized by featuresets) on the constituents and specifies a set of lemmaforms and a set of word forms.
In the example, theset of lemma forms - specified below the kcyword'lemma' - is a single word form (nominative singular;i\[, .............. German: inf lecUon:(Cat N)(IRule UMLAUT.+\[E\]S/+E) '"::P\]-i@ l l l l l l k(IC~ UklLAUT.II-HOO1}\[Num SG)plrldigm{l(:ll Ukf.AUT.N-I~OOTj{Num SG)(IC~t UhiLAUT.N-ROOT)(Num PL)ixulple~1:AslI, Sch~iluch( ICel UMLAUT.N-END INGl(flum SG)( IC~: UMLAUT.N-lEND INGI(Num SG)(ICIt UMLAUT.N-ENDING)(Hum PL)(iCaJt H-SUFFIX)\[Num $G)( ICalt SG+\[ElS)(C:sse NOM}{ICat N-~SUFFIX)(Num SG)( ICat SG-~E\]S)(ICat N-,SUFFIX)(Num PL)(ICM PL~E)IPlg.
~.
Ezmnple ~Uon~ rule wiudow157the pattern of feature sets identifies exactly one formwhich is put together by the concatenation of threeconst i tuents) .
The set of word forms - specifiedbelow the keyword 'paradigm' - consists of eightelements (the case paradigm; the two patterns offeature sets identify exactly eight forms, each ofwhich is put together by the concatenation of threeconst i tuents) .
The const i tuent  windows specifyeither so-cal led hard-coded const i tuents  orconstituent ypes.
The former are feature sets whichare associated with 'hard-coded' lexical strings (seeFig.
10); they are typically used to specify inflectionaleO~ German:inflection:(Cat N)(ICot N-SUFFIX.SG+\[EIS)(Num SG) ~ilJl~%?
(Case NOM)=+\[e\]s = (Case GEN)'?
~?\[e\]" (Case DAT)=. "
(Case ACC Iconst ituents arc structured by features which qualifythem.
The rules in the terminal nodes (see Fig.
12)define new potential word entries by specifying howconst i tuents of existing entries are combined withIO~ German:compo$1tion:(CRuie T0-N.N-I'0-N,PREFIII) L im~Source ~II (CCa\[ PREFIX)(IRulo ?x) I !2 (ICat H-ROO D (Num SG) I I3 (ICat N-ENDING) (Hum SG) \[ I4 (lest N-ROOT) (Num PL) \] \]S (ICat N-ENDING) (Hum PL) I 1I I ~rget i t(m.le ?x) I I(ReCap (~ I 2)) (ICat N=ROOT) (~um SG) I I3 (ICat N-ENDING) (Hum SG) | :(ReCap (+ 1 4)) (ICat N-ROOT) (Hum PL) |5 (Ieat N-ENDING) (N.m PL) \]examples \[Liliputl-o~raat, MinisendeL Riesewischlauch \ [ _ _Fig.
I0: Example window with hard-codedconst ituentsaffixes.
The latter  are feature sets where theassociated strings are represented by place holders,i.e.
the str ings are not specified yet but  will beentered later, either via the lexicographer interfaceor by the firing of compositional rules (see Fig.
1 1).~0- German:inflectlon:(Cat N)(ICat N-STEM.UMLAUT)-~(ICat N-ROOT) (Num SG)(ICat N-ENDING) (Num SG)(ICat N-ROOT) (Num PL)(ICat N-ENDING) (Num PL)1 entered2 entered3 (Umlaut 1)4 (Copy 2)examplesAst, SchiauchFig.
I I: Ex~ple  window wlth congtituent y~e~They are typically used to specify word roots.
Fromwhat has been said so far, we may infer how an entryinto the database is made and what it will generate:the spec i f i cat ion  of an ent ry  requ i res  theident i f icat ion of an  inf lect ional  rule and thespeci f icat ion of the lexical st r ings which arerepresented as place holders in the const i tuentsmatched by the rule.
Usually, this means that one ortwo strings have to be entered.
From this, the systemmay generate the entire inflectional paradigm of theword.
Notice that the user of the l inguist interfacedefines with his specification what a word is (viz, aset of lemma forms and a set of word forms).Moreover, Word Manager imposes the convent ionthat only entire words - and no isolated word forms -may be entered into the database.The window composit ion provides for thedefinit ion of composit ional rules and const i tuents(affixes).
This window is a graphical  tree editorsimilar to the window inflection where the rules andeach other and with const i tuents  defined in thewindow composit ion (dertvatlonal affixes).
Theserules are usua l ly  not applied generat ively butanalytically, because a generative application is likelyto overgenerate (theoretically, the user may specifyan arb i t rary number  of features which restr ictexcessive generat ion,  but  I believe that this isunpractical in most cases, because it implles that thelexicographer has to specify a host of features foreach entry)~ The purpose of the rules is that allderived and compound words may be entered Intothe database via the triggering of such l~les.
This hasthe advantage thai: the system (automatically) keepstrack of the derivational history and therefore themorphological s~_xucturing of each entry.40 The lexicographer interfaceGiven a compiled specification of the conceptualmorphological knowledge defined within the l inguistinterface, Word Manager may generate a dialoguewhich guides the lex icographer  towards theIdentification of the inf lectional/composit ional rulesthat must  be triggered in order to add an entry tothe database.
In the case of non-composed words, forexample, Word Mm\]ager may simply navigate in thetree which structures the Inflectional rules (specifiedin the window inf lect ion),  pos ing  quest ionsaccording to the structuring criteria.In the case of composed words, Word Managermay apply the compositional rules in analytical mode,provided that the 'initial' infbrmation consists of aword string, Such an analytical application of therules is usual ly not very overgeneratlng - In contrastto a generative application-, i.e.
the system will beable to present  a reasonably  l imited number  ofselection choices.50 Conc l~ ionThe advantages of a dedicated system like WordManager for the mmlagement of lexical databases aremanifold.
In this paper, we have restr icted thed iscuss ion to the advantages yielded dur ing theconstruction of the database.
These are by no meansthe only ones: the dedication also Implies that theoverhead of non-dedicated systems (e.g.
generalpurpose DBMS in conjunct ion with convent ionalprogramming languagesL Le.
the featt~res which are\].58superf luons for lexical databases, is avoided.
On theothex' hanc;i, Word l~Aanager provides features which ageneral pltrpose system will never have, viz.
thespecial  t 'ormal is~ to implement  morphologicalknowledge, "~his is not only beneficial from the pointof view of the interfacing to the database but  alsofrom the point of view of the software design: in thededicated :~ystem, the morphological knowledge is apart of ttL~ conceptual database .~chem~ (in theterminoloKy of database theory) and thus belongs tothe kernel of the sysi~cm, as: it were.
When a generalpurpose database management system in conjunctionwith a conventional programming language is used toimplement the same kind of knowledge, it has to behnplemented within the external schemata to thedatabase and thus repeatedly fox' each of them.
Thesoocalted code factoring is i:hcretbre much better ina dedica lcd system: the knowledge is morecentralizecz, and Implemented with a min imum ofx'eduncancy./ANSI-X3.~Pt~RC t975/  ANSI/X3/SPARC StudyG~'oup on Data Base Management Systems:"lntcrh~J.
l tepoit  75-02-08," I,'DT (Bull, ofthe ACIvl 31GMOD) 7.
1975./B~.a~ ?
198~3/ Bear  J .
: "A Morpho log ica lReeogi.dzer with Syntaciic and PhonologicalRules."
in: Proceedings of the 1 itttbtternational Conj~:rence on ComputationalLinguistic.~, Bonn, August 25-29~ 1986./Black 19116/ Black A.W~, et al: "A Dictionmy andMorpl-mlogical Analyser for English."
in:Proceedings oj the i l th Intet~nationalConference on Co~wutationul Li~tyui.~:ttc~J,I~onn, August 25-29, 19t~tl./B0cker i\[986/ Bocker  H. \] )., et al : "TheEnhancement  of Understand ing ThroughVisual Representations."
in: Human Factors(n Computing Systems, CI-II'86 ConferencePcoceedinga (Special issue of tbc SIGCHIBulletin), Bosi:on, April 13-17, 1986./Borin 19116/ Borin L,: "What is a Lexicall~epresentation?"
in: Papers for the FifthScandinavian Con\]e~nce qf ComputationalLinguistics, Helsinki,  December 1 1-12,1985.
University of Helsinki, Department ofGeneral IAnguistics, Publ icat ions No.
15,i\[986./DarympI(,.
1987/ Dah 'ymple  M., et al :DKIMMO/TWOL:  A Deve lopmentEnvironment .\['or Morphological .Analysis, inKaplan R., Kar t tunen L.: "ComputationalIVtorphol0gy."
Course Script LI283, 1987Llngulst lc Inst i tute,  Stanford University,J~Lme 29oAuguat 7.
I,?~7./Domenlg 1986/ Domenig M., Shann P.:'"t'owards a Dedicated Database ManagementSystem for Dictionaries."
in: Proceedings ofthe l l th International Conference onComputational Linguistics, Bonn, August25-29, 1986./Domenig 1987a/ Domenig M.: Entwurf einesdedizierten Datenbanksystems f~r Lexika.Problemanalyse und Sof tware-Entwmfanhand eine~.
; Projektes Jhr maschinelleSprach~bersetzung.
Niemeyer Verlag,Ttibingen, Retbe "Spraehe tu~d Inlbrmatlon"lid.
17, 1987./Domenlg 19871)/ Domenlg  M. : "On theFormallsatlon of Dictionaries."
in: Spracheund Datenverarbeitung, 1/1987./Koskenniemi 1983/ Koskenniemi K.: Two-LevelMorphology: A General ComputationalModel ,for Word-Form Recognition andProduction.
Dissertation at the University ofHe ls ink i ,  Depar tment  of Genera lLinguistics, Publications No.
11, 1983./Myers 1986/ Myers B.A.
: "Visual Programming,Programming by Example, and ProgramVisual ization, a Taxonomy."
in: HumanFactors In Computing Systems, CHI'86Conference Proceedings (Special Issue ofthe SIGCHI Bulletin), Boston, April 13-17.1986.\[59
