Inference in DATRRoger Evans & Gerald GazdarSchool of Cognit ive and Computing SciencesUniversity of Sussex, BRIGHTON BN1 9QNAbstractDATR is a declarative language for representing arestricted class of inheritance networks, permit-ting both multiple and default inheritance.
Theprincipal intended area of application is therepresentation of lexical entries for naturallanguage processing, and we use examples fromthis domain throughout.
In this paper wepresent the syntax and inference mechanisms forthe language.
The goal of the DATR enterprise isthe design of a simple language that (i) has thenecessary expressive power to encode the lexicalentries presupposed by contemporary work inthe unification grammar tradition, (ii) canexpress all the evident generalizations aboutsuch entries, (iii) has an explicit heory of infer-ence, (iv) is computationally tractable, and (v)has an explicit declarative semantics.
Thepresent paper is primarily concerned with (iii),though the examples used may hint at our stra-tegy in respect of (i) and (ii).1 IntroductionInheritance networks ("semantic nets") providean intuitively appealing way of thinking aboutthe representation of various kinds ofknowledge.
This fact has not gone unnoticed bya number of researchers working on lexicalknowledge representation, e.g.
de Smedt (1984),Flickinger et al (1985), Calder & te Linden(1987), Daelemans (1987a,1987b), Gazdar(1987) and Calder (1989).
However, many suchnetworks have been realized in the context ofprogramming systems or programminglanguages that leave their precise meaningunclear.
In the light of Brachman (1985), Ether-ington (1988) and much other ecent work, it hasbecome apparent that the formal properties ofnotations intended to represent inheritance arehighly problematic.
Although not discussedhere, DATR has a formal semantics (Evans &Gazdar 1989) for which some completeness andsoundness results have been derived.
Theseresults, and others (on complexity, for example)will be provided in a subsequent paper.
Thereate several prototype computational implementa-tions of the language, and non-trivial exiconfragments for English, German and Latin havebeen developed and tested.2 SyntaxThe syntax of DATR, especially the use of value-terminated attribute trees to encode information,derives from OATR (Shieber 1986).
The languageconsists of strings of symbols drawn from the setSYM - {:, ",., -, - - ,  <, >, (,)} and the setsATOM and NODE, all of which are disjoint.A string is in OATR, (with respect to given setsATOM of \[atom\]s and NODE of \[node\]s) iff it is a\[sentence\] as defined by the following set ofrules:\[sentence\] ::= Inode\]:\[path\] ==\[lvalue\].
{ \[nodel:\[path\] = \[value\].\[lvaluel ::= \[latoml I ( \[lseq\] )\[gvalue\] ::= \[gatom\] \]l ( \[gseql )\[value\] ::= \[atoml ( \[seql )\[latom\] ::= \[desc\] I \[gatom\]\[gatom\] ::= "\[desc\]" I \[atom\]- 66  -\[desc\] ::= ~node\] I \[lpath\]/ \[node\]:\[lpath\]Bseq\] ::= \[gseq\], I \[lseq\] [desc\] tlseq\]\[gseq\] ::= \[seal, \] I \[gseq\] "\[desc\]" [gseq\]\[seq\] ::= e l  \[value\] \[seq\]\[lpath\] ::-- < \[laseq\] >\[path\] ::= < \[aseq\] >\[laseq\] ::= e l  \[latom\] \[laseq\]\[aseq\] ::= e l  \[atom\] \[aseq\]There are two kinds of sentence, those contain-ing '==' and those containing '='.
Both kindshave on their left-hand side a node:pathspecification, where a path is a sequence ofatoms enclosed in <...>.
Pragmatically, the'==' sentences are intended for defining the net-work, whilst the '=' statements express thevalues at individual nodes.
Put another way, theformer provide the database definition languagewhilst the latter provide the query language: theuseful premises will standardly all be '---' state-ments, whilst the interesting theorems will stan-dardly all be '=' statements (though the languageitself also allows the former to be derived astheorems and the latter to be used as premises).In view of this distinction, we shall sometimesrefer to '---' sentences as definitional and '='sentences as extensional.
Throughout the exam-pies in this paper, we shall use bold for nodesand roman for atoms.
Bold  italic and italic willbe used for corresponding meta-notational vari-ables.
Variables such as N, P, L, G and V willbe assumed to be typed (as nodes, paths, lvalues,gvalues and values respectively).
We shallsometimes refer to atoms occurring in paths asatt r ibutes .The right-hand sides of extensional sentences arevalues, that is, simple atoms or lists ofatoms/nested lists enclosed in (...).
Lists areprovided to allow the components of complexvalues to be specified independently (inheritedfrom different places, for example).
As anexample, the following sentences might bederivable from a lexical entry for English 'be':Be:<pres tense sing one> = am.Be:<pres participle> = (concat be ing).Likewise, the following for German 'Buch':Bach: <sing> = Buch.Bach: <plat> = (concat (umlaut Buch) er).Values are the principal 'results' of a I)ATRdescription: the most typical operation is todetermine the value associated (by an exten-sional sentence) with some node/path pair.The right-hand sides of definitional sentences arelvalues, which can be simple atoms, inheritancedescriptors (quoted or unquoted), or lists oflvalues.
An atom is primitive, an inheritancedescriptor specifies where the required value canbe inherited from, and lists allow arbitrary struc-tures to be built as values.
Inheritance descrip-tors come in several forms with two dimensionsof variation.
The unquoted/quoted distinctionspecifies whether the inheritance context is local(the most recent context employed) or global(the initial context employed).
Once the contextis established, the descriptor specifies a newnode, a new lpath, or both to be used to deter-mine the inherited value.
For example, the fol-lowing sentences might be found in a descriptionof a lexicon for English:EN MOR: < > == VERB.mEN MOR:<past participle> == (concat "<root>" en).Take: < > == EN MOR.Take: <root> ~ take.Finally an lpath is a path made up of lvalues,that is, elements which themselves may needevaluation, as in this example:Adjective:<form> --= <"<gen>" "<num>" "<case>">.We adopt the following abbreviation conventionfor sets of sentences about a single node:N: P1 == L1P2 == L2Pn --= Ln.abbreviates:N: P1 == L1.N: P2 =--- L2.N: Pn == Ln.- 67  -andN: P1 = V1P2 = V2, .
.Pn = Vn.abbreviates:N: P I  = V1.N: P2 = V2., .
.N: Pn = Vn.Thus the 'take' example given above couldappear, in abbreviated form, as follows:EN MOR:< > == VERB<past  part ic ip le> == (coneat  "<root>" en).Take :< > == EN MOR.<root> ~ ~ake.3 Rule-based inferenceDATR has seven syntactic rules of inference fal-ling into three groups.
The first rule just pro-vides us with a trivial route from definitional toextensional sentences:(I) N:P ~ V.N:P = V.For example, from:VERB:  <past> ~--- ed.one can infer:VERB:  <past> = ed.Note that V must be a value (not an lvalue) here,otherwise the consequent would not be well-formed.The next three rules implement local inheritanceof values, and use the following additionalmeta-notational device: the expressionEO{E2/E1} is well-formed iff EO, E1 and E2 areIvalues and E1 occurs as a subexpression f EO.In that case, the expression denotes the result ofsubstituting E2 for all occurrences ofE1 in EO.
(u)(III)(IV)N2:P2 == G.NI:P1 == L.NI:P1 == L{G/N2:P2}.N2:P1 == G.NI:P1 == L.NI:P1 == L{G/N2}.NI :P2 == G.NI:P1 == L.NI:P1 == L{G/P2}.Rule II says that if we have a theorem NI:P1 ==L.
where L contains N2:P2 as a subexpression,and we also have a theorem N2:P2 == G., thenwe can derive a theorem in which alloccurrences ofN2:P2 in L are replaced by G. Inthe simplest case, this means that we can inter-pret a sentence of the formNI:P1 ~ N2:P2.as an inheritance specification meaning "thevalue of P1 at N1 is inherited from P2 at N2".So for example, from:NOUN: <sing en> ~--- s.PRON: <sing en> == NOUN:<sing en>.one can infer:PRON: <sing en> ~ s.Rules III and IV are similar, but specify only anew node or path (not both) to inherit from.
Theother component (path or node) is unchanged,that is, it is the same as the corresponding com-ponent on the left-hand-side of the rule specify-ing the inheritance.
In fact, the following twosentence schemas are entirely equivalent:NI:P1 ~ N2.NI:P1 ~ N2:P1.as are these two:NI:P1 ~ P2.NI:P1 == NI:P2.Rules II, III, and IV implement a local notion ofinheritance in the sense that the new node orpath specifications are interpreted in the currentlocal context.
The three remaining inferencerules implement a non-local notion of inheri-tance: quoted descriptors pecify values to be- 68  -interpreted in the context in which the originalquery was made (the global context), rather thanthe current context.
(V) N2:P2 = V.NI:P1 == G.NI:P1 = G{V/"N2:P2"}.
(VI) N2:P1 = V.NI:P1 == G.N1 :P1 = G { V/"N2"}.
(VII) NI:P2 = V.NI:P1 == G.NI:P1 = G{V/"P2"}.To see how the operation of these rules differsfrom the earlier unquoted cases, consider the fol-lowing theory:CAT: <sing> == <plur>.V: <sing> == CAT<plur> ~ er.AI: <sing> == CAT<plur> ~ ern.A2: <sing> == en<plur> == A1.The intention here is that the CAT nodeexpresses the generalisation that by defaultplural is the same as singular, v and A1 inheritthis, but A2, while inheriting its plural form fromA1, has an exceptional singular form, overridinginheritance from CAT (via A1).
Now from thistheory we can derive all the following theoremsconcerning plural:V: <plur> = er.AI: <plur> = ern.A2: <plur> = ern.and the following theorem concerning singular:A2: <sing> = en.But we cannot derive a theorem for V:<sing>,for example.
This is because v:<sing> inheritsfrom CAT:<sing>, which inherits (locally) fromCAT:<plur>, which is not defined.
What wewanted was for CAT:<sing> to inherit fromv:<plur>, that is, from the global initial context.To achieve this we change the CAT definition tobe:CAT: <sing> == "<plur>".Now we find that we can still derive the sameplural theorems, but now in addition we get althese theorems conceming singular:V: <sing> = er.AI: <sing> =ern.A2: <sing> = en.For example, the derivation for the first of theseis as follows:(1) V: <sing> == CAT.
(given)(2) CAT: <sing> == "<phtr>".
(given)(3) V: <sing> == "<plur>".
(III on 1 and 2)(4) V: <plur> ~ er.
(given)(5) V: <plur> = er.
(I on 4)(6) V: <sing> --er.
(VII on 3 and 5)Finally, given a set of sentences "/', we define therule-closure of '/', rcl('/ ') to be the closure of 'Tunder finite application of the above inferencerules in the conventional fashion.4 Default inferenceIn addition to the conventional inference definedabove, I~AI'I?
has a nonmonotonic notion of infer-ence by default: each definitional sentence aboutsome node/path combination implicitly deter-mines additional sentences about all the exten-sions to the path at that node for which no morespecific definitional sentence exists in the theory.Our overall approach follows Moore (1983,1985), whose treatment of inferences from setsof beliefs can be viewed more generally as atechnique for providing a semantics for adeclarative notion of inference by default (cf.Touretzky 1986, p34; Evans 1987).
We beginwith some auxiliary definitions.The expression P^Q, where P and Q are paths,denotes the path formed by concatenating com-ponents of P and Q.
A path P2 is an extensionof a path P1 iff there is a path Q such that P2 =PI^Q.
P2 is a strict extension iff Q is non-empty.
We also use the ^  operator to denoteextension of all the paths in a DArR sentence, asin the following examples:- 69 -S:S^<c d>:S:S^<c d>:S:S^<c d>:N:<a> ~--- v.N:<a c d> ~ v.Nl :<a> == N2:<x y>.Nl :<a c d> == N2:<x y c d>.Nl :<a> == "N2:< >".Nl :<a c d> == "N2:<c d>".Given a sentence S, we define the root of 5 tobe the \[node\]:\[path\] expression appearing to theleft of the equality ('==' or '=') in S (for exam-ple the root of 'N:P - -  V.' is 'N:P)'.
The rootdoes not correspond to any syntactic ategorydefined above: it is simply a substring of thesentence.Given a set of sentences in DATR, T, a node Nand a path P, we say N:P is specified in T i f f  Tcontains a definitional sentence S whose root isN:P.Let NI:P1, NI:P2 be such that NI:P1 isspecified in T. We say NI:P2 is connected toNI:P1 (relative to T) iff:i) P2 is an extension of P1, andii) there is no strict extension P3 of P1 of which P2is an extension such thatNl:P3 is specified in T.So NI:P2 is connected to NI:P1 if P1 is themaximal subpath of P2 that is specified (withN1) in T.Now given a set of sentences T, define the pathclosure pcl(T) of T to  be:pc l (T )  = {S:S is an extensional sentence in T }w {S^Q: S is a definitional sentence in T,with root N:P, and N:P^Q isconnected toN:P}It is clear from these definitions that any N:P isconnected to itself and thus that T is always asubset of pal(T).
The path closure contains allthose theorems which can be inferred by defaultfrom T.To illustrate path closure, consider the followingexample theory:VERB:<past> ~ ed<past participle> == en.We can infer by default he following theoremsfor VERB:VERB:<past> ~--- ed<past tense> ~--- ed<past participle> == en<past tense singular> == ed<past participle plural> ~ en<past tense singular third> == ed.The situation is slightly more complicated withsentences that have paths on their right-handsides.
Such paths are also extended by the sub-path used to extend the left-hand side.
So thesentence:A2:<sing> ~ "Al:<phtr>".might give rise Coy default) to sentences such as:A2:<sing fern nom> == "Al:<plur fern nom>".Using default inference, the example theory weused to illustrate global inference can be phrasedmore succinctly:CAT: <sing> == "<plur>".V: < > == CAT<plur> ~ er.AI: < > == CAT<plur> ~ ern.A2: <sing> == en< > == A1.In this version, we state that anything notspecifically mentioned for v is inherited Coydefault) from CAT, whereas before we had to listcases (only 'sing' in the example) explicitly.Similarly A1 inherits by default from CAT, andA2 from A1.
The operation of path closure isnon-monoton ic :  if we add more sentences toour original theory, some of our derived sen-tences may cease to be true.The two forms of inference in DATR are com-bined by taking the path closure of a theory first,and then applying the inference rules to theresult.
In other words, given a theory T, and asentence S, S is provable from T i f f  Srcl(pcl(T)).- 70  -AcknowledgementsEvans's work was supported by a grant from theSERC.
Oazdar's work was supported by grantsfrom the ESRC and SERC.
We are grateful toour referees and to Jon Cunningham, WalterDaelemans, David Israel, Bill Keller, Tom Kha-baza, Ewan Klein, Bob Moore, FemandoPereira, Allan Ramsay and Chris Thornton forclarifying our thinking about aspects of DATR.ReferencesBrachman, R. (1985) "I lied about he trees", ordefaults and definitions in knowledgerepresentation.
A/Magazine 6.3, 80-93.Calder, J.
(1989) Paradigmatic morphology.Proceedings of the Fourth Conference ofthe European Chapter of the Associationfor Computational Linguistics, UMIST,April 1989.
Morfistown, NJ: ACL.Calder, J.
& E. te Lindert (1987) Theprotolexicon: towards ahigh-level languagefor lexical description.
In Ewan Klein &Johan van Benthem, eds.
Categories,Polymorphism and UnificationEdinburgh/Amsterdam: CCS/ILLI, 356-370.Daelemans, W.M.P.
(1987a) A tool for theautomatic creation, extension and updatingof lexical knowledge bases.
ACLProceedings, Third European Conference,70-74Daelemans, W.M.P.
(1987b) Studies inlanguage technology: an object-orientedcomputer model of morphonologicalaspects of Dutch.
Doctoral dissertation,Catholic University of Leuven.de Smedt, K. (1984) Using object-orientedknowledge-representation techniques inmorphology and syntax programming.
In T.O'Shea (ed.)
ECAI-84 : Proceedings of theSixth European Conference on ArtificialIntelligence Amsterdam: Elsevier, 181-184.Etherington, D.W. (1988) Reasoning withIncomplete Information.
Los Altos:Morgan Ka-ufmann.Evans, R. (1987) Towards a formal specificationfor defaults in GPSG.
In Ewan Klein &Johan van Benthem, eds.
Categories,Polymorphism and Unification.Edinburgh/Amsterdam: CCS/ILLI, 73-93.Evans, R. & Gazdar, G. (1989) The semantics ofDATR.
In A. Cohn (ed.)
AISB-89,Proceeedings of the Seventh Conference ofthe Society for the Study of Art~cialIntelligence and Simulation of Behaviour.London: Pitman.Flickinger, D., Pollard, C.J.
& Wasow, T. (1985)Structure sharing in lexical representation.Proceedings of the 23rd Annual Meeting ofthe Association for ComputationalLinguistics (Chicago), 262-267.Gazdar, G. (1987) Linguistic applications ofdefault inheritance mechanisms.
In Peter J.Whitelock et al, eds.
Linguistic Theoryand Computer Applications.
London:Academic Press, 37-67.Moore, R.C.
(1983) Semantical considerationson nonmonotonic logic.
Technical Note284, SRI Intemational, Menlo Park.Revised and expanded version of a paperthat appeared inIJCAI-83, 272-279.Moore, R.C.
(1985) Possible-worlds semanticsfor autoepistemic logic.
Report No.
CSLI-85-41, Center for the Study of Languageand Information, Stanford.
Also publishedin the Proceedings of the AAAI Non-Monotonic Reasoning Workshop, 344-354.Shieber, S.M.
(1986) An Introduction toUnification Approaches to Grammar.Stanford: CSLI/Chicago University Press.Touretzky, D.F.
(1986) The Mathematics ofInheritance Systems.
Los Altos: MorganKaufmann.- 71 -
