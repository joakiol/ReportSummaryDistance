Vaakkriti: Sanskrit TokenizerAasish Pappu and Ratna SanyalIndian Institute of Information Technology, Allahabad (U.P.
), India{ akpappu b03, rsanyal}@iiita.ac.inAbstractMachine Translation has evolved tremen-dously in the recent time and stood as centerof research interest for many computerscientists.
Developing a Machine Transla-tion system for ancient languages is muchmore fascinating and challenging task.
Adetailed study of Sanskrit language revealsthat its well-structured and finely orga-nized grammar has affinity for automatedtranslation systems.
This paper providesnecessary analysis of Sanskrit Grammar inthe perspective of Machine Translation andalso provides one of the possible solution forSamaas Vigraha(Compound Dissolution).Keywords: Machine Translation, Sanskrit,Natural Language Parser, Samaas Vigraha,Tokenization1 IntroductionSanskrit language and its grammar had exterted anemphatic impact on Computer Science and relatedresearch areas.
It has resulted to put in extensive ef-forts in the field ofMachine Translation(hereafter re-ferred as MT).
MT of Sanskrit is never an easy task,because of structural vastness of its Grammar.
Be-sides, its strutural vastness Sanskrit Grammar is wellorganized and least ambigious compared to othernatural languages, illustrated by the fact of increas-ing fascination for this ancient Aryan language.
Itsgrammar possesses well organized rules and metarules to infer those rules, thus proving to be a pow-erful analogy to context free grammar of a computerlanguage.Subsequently, it supports the idea of developing aparser for Sanskrit language, that would be helpfulin developing a full-fledged MT system.
As a part ofdevelopment of parser, there are other important as-pects to be taken care off.
A morphological analyserand a tokenizer are two of the important componentsthat play a vital role in the parser.
A morpholog-ical analyser is used for identification of the basewords from their morphonemes, further to under-stand the semantics of the original text.
A tokenizeralso plays its significant part in a parser, by identi-fying the group or collection of words, existing as asingle and complex word in a sentence.
Later on, itbreaks up the complex word into its constituents intheir appropriate forms.
In Sanskrit, mainly we havetwo categories of complex words.
They are?
Sandhi?
Samaas1.1 Sandhi and SamaasSandhi: When two words combine to produce a newword whose point of combination is result of anni-hilation of case-end of former word and case-beginof latter.
In short, the resulted new character thathas been created at the point of combination is ex-actly equivalent to the sound produced when thosetwo words are uttered without a pause.
The inverseprocedure to Sandhi-formation is known as SandhiWicched.On the other hand, when two or more words arecombined, based on their semantics then the result-ing word is known as Samaas or Compound.
Unlike577Sandhi, the point of combination in Samaas may ormay not be a deformed in the resulting word.
The in-verse procedure of break-up of a Samaas is known asSamaas Vigraha.
Considering the complexity of thisproblem, we restricted our focus to Samaas Vigrahaor Compound Dissolution(hereafter Compound Dis-solution is referred as CD for convenience).1.2 Organization of the PaperInitially, we would discuss about the problem of fo-cus and the main objective of this paper in detail.Further, a little overview about the Sanskrit grammarand Knowledge Representation, that are required tounderstand the underlying concepts of the system.Then, we would brief about the existing systems inthis areas and the related areas of interest.
Later on,we would give a detailed description of the architec-ture of Vaakkriti.
We would give a detailed analysisof the results of our system and finally, throw somelight over our contribution to this research area.Weshall conclude with some of drawbacks of our sys-tem and the challenges we have faced.2 The ProblemSemantics being the prime focus, we need to learnthe factors that effect the formation of a compoundfrom the set of atomic words.
The basic problemis identification of factors, by thorough analysis oflanguage structure or with the help of a linguist.
Es-pecially various examples of Samaas must be exten-sively observed.
After identification of factors, weneed to find out the appropriate form of KnowledgeRepresentation for the rule-base.
Here, knowledgebeing the rules, based on which a particular com-pound is formed.
The importance of CD can beclearly understood, during the process of tokeniza-tion.
A well-defined set of rules in Sanskrit canbe found in ?Ashtadyayi?, authored by 3rd centurygrammarian and linguist Panini.
Ashtadyayi con-tains rules of Grammar in a concise form, distributedover eight chapters.
Our rule-base system would bebased on the work of Kale et.
al, that has detaileddescription of Paninian Grammar.3 Sanskrit GrammarAs we have already mentioned that, it is necessaryto know some of the basic concepts of the Sanskritgrammar.
First, we would give some important def-initions of terms that are frequently used in this pa-per.3.1 Important Definitions3.1.1 Vibhakti(Declension)Sanskrit is a highly inflected language with threegrammatical genders (masculine, feminine, neuter)and three numbers (singular, plural, dual).
It haseight cases: nominative, vocative, accusative, instru-mental, dative, ablative, genitive, and locative.3.1.2 Dhatupata(Verbal Conjugation)The verbs tenses (a very inexact application of theword, since more distinctions than simply tense areexpressed) are organized into four ?systems?
(as wellas gerunds and infinitives, and such creatures as in-tensives or frequentatives, desideratives, causatives,and benedictives derived from more basic forms)based on the different stem forms (derived from ver-bal roots) used in conjugation.
There are four tensesystems:?
Present (Present, Imperfect, Imperative, Opta-tive)?
Perfect?
Aorist?
Future (Future, Conditional)3.2 Factors that effectThe list of factors that are involved in a rule are?
Part of Speech(hereafter referred as POS)?
List of Words(a token must be among a set ofwords to satisfy a rule)?
Case-End?
Case-Begin?
Declension?
Sense(a token with a particular sense is onlyqualified)?
Meaning?
Affix578?
Affix Type(Taddita and Kriti)?
Number(sng, two, mny)(hereafter we refernumber as num)?
Gender(mas, fem, neu)The list of actions that act as functions in the con-sequent of a rule are:-?
setDecl(set the declension case for a specifiedtoken)?
addBefore(add a string before a specified to-ken)?
addAfter(add a string after a specified token)?
setNumber(set the number of a to-ken(sng,two,mny))?
replace(replace a token with a string related toit)3.3 CompoundsNominal compounds occur with various structures,however morphologically speaking they are essen-tially the same.
Each noun (or adjective) is in its(weak) stem form, with only the final element re-ceiving case inflection.
Some examples of nominalcompounds include:ItaretaraExample: rAml#mZBrtf/`?A,(RAmaLakshmaNaBaratAH)to rAm, c l#mZ, c Brt, c f/`?,(RAma ca, LakshmaNaca, Barata ca)Rule: ?token POS(token,noun) ?
setDecl(token,nom)?addAfter(token,c)SamahaaraExample: pAZFpAdO(pANIpAdau)topAZF c pAddm^ c(pANI ca pADam)Rule: ?token,?sense POS(token,noun) ?SenseOf(token, sense) ?
setDecl(token,nom)?addAfter(token,c)Dvitiya(Accusative) TatpurushaExample: d`,?AtFt,(dukhatItaH)tod`,?m^ atFt,(dukham atItaH)Rule: POS(token1,noun) ?
WordList(token2,E?t ,atFt , pEtt , gt , a(y-t , ?A?
, aAp?
, gmF , b`B`"`)?setDecl(token1,acc)Trutiya(Instrumental) TatpurushaExample: d`,?AtFt,tod`,?m^ atFt,Rule: POS(token1,noun) ?
(POS(token2,verb) ?WordList(token2,p?v?
,sd?
`f ,Un))?
setDecl(token1,ins)Chaturthi(Dative) TatpurushaExample: y?pdAz(yupadaru)to y?py dAz(yupaya daru)Rule: POS(token1,noun) ?
(Sense(token2,?material?)?
WordList(token2,aT?
,bEl , Eht , s`?
,rE"t))?setDecl(token1,dat)Panchami(Ablative) TatpurushaExample: cOrBym^(cOrabayam)to cOrAd^ Bym^(cOraadbayam)Rule: POS(token1,noun) ?
(WordList(token2,By ,BFt ,BFEt ,BF, ,ap?t ,apoY , m`?
,pEtt ,apv-t))?setDecl(token1,abl)Shashti(Genitive) TatpurushaExample: rAjp`zq,(rAjapurushaH)to rAj?p`zq,(rAjangya PurushaH)Rule: POS(token1,noun) ?
(POS(token2,noun)??POS(token2,verb)??
NumeralType(token2,ordinal)??SenseOf(token2,?quality?))?
setDecl(token1,gen)Saptami(Locative) TatpurushaExample: ngrkAk,(nagarAkAkaH)to ngr?
kAk,iv(nagare kAkaH iva)Rule: POS(token1,noun)?
(MeaningOf(token2,?crow?)?SenseOf(token2,?contempt?))?
setDecl(token1,loc)?addAfter(token2, iv)4 Knowledge RepresentationWe have already learnt that the process of CD is sup-ported by a rule-base system.
A production systemis a good illustration to understand a rule-base sys-tem.
To represent a complex rule, it would be bet-ter to use First Order Predicate Logic(FOPL).
Un-der FOPL a rule can be written as of the form P (a)?Q(a)?Q(b)?R(c) ?
Action1(a)?Action2(b)?Action1(c)where P,Q and R are predicatesa, b and c are constant symbolsAction is a function symbolThe rule-base system of Vaakkriti is de-veloped considering the factors as pred-icates and the tokens as constant sym-bols.
A sample rule would look like this579POS(tok1, noun) ?
(POS(tok2, verb) decl(tok2, acc)) ?setDecl(token1, acc).5 Related WorkIn the recent times many efforts have been made todevelop various utilities for Sanskrit.
The tools de-veloped includes Sanskrit to other Indian Languagetransliteration tools, simple and primitive transla-tion tools, many grammar analysing tools and manymore learning tools.
Some of the important worksincludes Anusaraka, a primitive machine translationtool developed by Akshar et.
al.
Anusaraka triesto take advantage of the relative strengths of thecomputer and the human reader, where the com-puter takes the language load and leaves the worldknowledge load on the reader.
Besides, these tools,there are some beautiful theory-based research workwas also done.
The concept of Indian Network Lan-guage(INL) is one of such concepts that was pro-posed by Anupam et.
al.
It gives a hypothesis toconsider Sanskrit as INL because of its importantproperties like free word order and inherent seman-tic net structure.
There are few other interesting re-search concepts that have been analysed in the con-text of Sanskrit language.
Rick Braggs et.
al haveshown in his article how Knowledge Representationin the language of Sanskrit is one of those wonderfulconcept to show that Semantic Nets.
Semantic Netsare concept respresenting structures, that show howa concept is related to other concepts semantically, asemantic net would like in the figure below.
Anotherbeautiful research work was comparison of PaninianGrammar and Computer language Grammar.
Bhateet al has analysed to show that how well organizedand structured is Sanskrit Grammar and its forgot-ten valuable contributions to the field of ComputerScience.6 ArchitectureAn Itrans standard formatted devanagiri text is givenas input to the system and the output of the systemis the set of tokens produced after CD.
The list ofcomponents in the system are listed below:?
Input Processor?
Symbol Table?
Knowledge Base?
Inference Engine?
Database?
Rule-Base EditorThe architecture of Vaakkriti can be seen in the fig-ureFigure 1: Architecture of VaakritiThe algorithm of Vakkriti is given below:- A de-Algorithm 1 Algorithm of Vaakkriti1: input?
Itrans-Devanagiri Text2: input?
?
breakUp(input)3: tokenList?
tentativeTokenize(input?
)4: tokenInfoList?
tokenList5: for tokeni in tokenInfoList do6: token(i)?
extractInfo(tokeni7: update token(i) in tokenInfoList8: end for9: for each rule(r) in Knowledge-Base(KB) do10: result?
infer(r,tokenInfoList)11: if result is true thenreturn r12: end if13: end fortailed description of each component is as follows.5806.1 Input ProcessorThe unstemmed compound taken as input to the sys-tem is a string in itrans format.
First, Input Processorbreaks the itrans string into chunks of characters onthe basis of Devanagiri Character set.
The heuristicfor break up procedure is given below:-The reason behind the breakup procedure is toease the process of breaking the string into wordsin their tentative forms.
If a string is considered asit is without breakup into devanagiri characters, thenthere is a high chance of ambiguity while lookup inthe dictionary.
For example:-Without breakup of input stringajaajagaraH-- Found this wordWith breakup of string into character sequencesa,jaa,ja,ga,raHLater on the chunks of characters are processed asin the procedure below:-The words lying in input string are tentativelyguessed by maintaining a stack of character se-quences, thus checking with the dictionary for theright word.
But, in most of the cases, the word inthe input string do not have an exact match in thedictionary.
This is because of the matra appended toCase-End of a word.
Therefore, we have generatedtokens for each matra and tried to find it in the dic-tionary.
If the word is found, then the word alongwith its meaning is stored in the Symbol Table.6.2 Symbol TableNow, we shall discuss more about how a SymbolTable fetches those subtle information of a token.Symbol table extracts token information in the fol-lowing manner:-6.2.1 Part of SpeechPart of Speech is identified with the help of stan-dard Monier Williams Dictionary, List of Adverbs,List of Prepositions, List of Numerals.6.2.2 Sense and MeaningFirst, meaning of the token is known from the dic-tionary and the sense of the token is fetched througha special kind of procedure.
The technique has fol-lowing steps:-1.
Identify the nouns in the meaning phrase.2.
Find sense for each noun with the help of En-glish Wordnet.3.
Find a list of ?common?
senses for all thenouns.4.
That list of senses is assumed to the sense of atoken.6.2.3 Gender and NumberThese are fetched from the XML database.6.3 Knowledge BaseThe Knowledge Base(KB) contains facts and rulesthat supports the system, for identifying a given in-put.
The KB has been classified well, according tothe Rule Sets.
A Rule Set is a set of rules that aremeant for a particular type of compound.
Infact, anew rule set can be created whenever there is a newpart of speech to be dealt with.
It has been assumedthat, a rule has clauses(both unit and definite) on an-tescendent side, whose number is equal to tentativenumber of tokens in the input parsed string.
On theother hand, the consequent or conclusion containsthe list of actions that has to be operated over the to-kens(in the input string) by the system.
More aboutthe rule structure in the next section.The KB is well integrated with the Rule Base Ed-itor(RBE) and the Inference Engine.
Currently, itcontains limited number of rules this makes the KBnon-monotonic, yet it can be made monotonic, byaddition of new rules.6.4 DatabaseThere is a large database that supports the whole sys-tem of Vaakriti.
The database is contained in theform of XML files.
There are following tables in thedatabase:-?
Nouns, Adjectives, Numerals Declensions.?
Adverbs, Conjunctions and Prepositions.?
Dictionary Database.?
Preverbs database.?
Other Morphonemes.5816.5 Inference EngineWhenever premises of a particular are satisified bythe input parse string, then it is said that a rule isfired.
A fired rule applies its consequent part overthe parsed string to result in actual goal.
This proce-dure is known as Rule Inference.6.6 Rule Base EditorThe sole motive of Rule-Base Editor is to free theKnowledge Engineer free from rule entry.
A Lin-guist with little training to operate the GUI can beprovided, would suffice this task.7 ResultsThe system has been tested with many examples thathave been taken from the book written by Kale et alThe set of examples have been chosen from differ-ent set of Compounds.
In most of the cases systemhas given correct results with a precision of 90%,but in some of the cases that involve sense, it be-came quite difficult to produce the result.
Lack oflinguistic tools like Wordnet for Sanskrit languageimposes limitations on word sense disambiguation.We have developed a sense list for a limited set ofwords by observing some of the important sanskrittexts, based on the knowledge we have acquired.8 Our ContributionWe have proposed a utility called Rule-Base Editor,besides our actual work on CD.
The motive behindRule-Base Editor is to induce the property of flexi-bility into the system.
It always avails a linguist toenter new rules with the help of Rule-Base Editorwithout any support from knowledge engineer.We have already learnt that Samaas Vigraha(CD)is the most important aspect of the tokenizationphase in a parser.
Implicitly, the acquisition of fac-tors and rules also gather equal importance.
Signify-ing this fact, we have done rigorous survey over thegrammar to identify these factors.
Hence, we assertthat our system will be a significant contribution inthis area of research.9 Future Scope and ConclusionWe assert that Vaakkriti would be a preliminary con-tribution to the realm of NLP.
Adding to the majorworks that have been done already, Vaakkriti is anattempt to enhance the existing works.
We wouldextend the current system and develop a full-fledgedparser that will suffice most of the requirements ofMTsystem.Although, it looks the way that the problem hasbeen solved, but the actual problems arouses whena Sanskrit poem is given as input to a MT system.Usually, a sanskrit poem conveys more than onemeaning and sometimes figure of speech is used,that adds fuel to the fire.
This becomes a herculeantask for a MT system and it will remain as a mythforever.AcknowledgementsThe authors would like to specially thank GerardHuet for providing linguistic database of declensionsand verbal roots, that was quite helpful in makingour system fine and complete.
The authors grate-fully acknowledge financial support from the Uni-versal Digital Library project, funded by the Min-istry of Communication and Information Technol-ogy (MCIT) India and also Indian Institute of Infor-mation Technology, Allahabad.ReferencesHigher Sanskrit Grammar, M. R. Kale, Motilal Banarasi-Dass Publishers.
?Paninis Grammar and Computer Science?, Saroja Bhateand Subhash Kak, Annals of the Bhandarkar OrientalResearch Institute, vol.
72, 1993, pp.
79-94.?Knowledge Representation in Sanskrit and Artificial In-telligence?, Rick Briggs?Artificial Intelligence?, Elain Rich and Kevin Knight,2nd Edition, Tata McGrawHill, 1991.?Artificial Intelligence, AModern Approach?
Stuart Rus-sell and Peter Norvig, 2nd Edition, Pearson Education,2003.
?Sanskrit as Indian Networking Language: A SanskritParser?, Anupam, 2004.?Natural Language Processing, A Paninian Perspective?,Akshar Bharti, Vineet Chaitanya and Rajeev Sangal,Pearson Education.
?Natural Language Processing using PROLOG?
by M.Gerald, M Chris, Addison and Wisley, 1989.?Cognitive Science Learning Resource?,http://www.comp.leeds.ac.uk/ugadmit/cogsci/knowled582
