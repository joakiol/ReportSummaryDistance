Proceedings of the Demonstrations at the 14th Conference of the European Chapter of the Association for Computational Linguistics, pages 85?88,Gothenburg, Sweden, April 26-30 2014.c?2014 Association for Computational LinguisticsDesigning Language Technology Applications:A Wizard of Oz Driven Prototyping FrameworkS.
Schl?oglMCI Management Center InnsbruckManagement, Communication & ITInnsbruck, AUSTRIAschlogl@mci.eduP.
Milhorat?, G.
Chollet?, J. Boudy?Institut Mines-T?el?ecom?T?el?ecom ParisTech &?T?el?ecom SudParisParis, FRANCEmilhorat@telecom-paristech.frAbstractWizard of Oz (WOZ) prototyping employsa human wizard to simulate anticipatedfunctions of a future system.
In NaturalLanguage Processing this method is usu-ally used to obtain early feedback on di-alogue designs, to collect language cor-pora, or to explore interaction strategies.Yet, existing tools often require complexclient-server configurations and setup rou-tines, or suffer from compatibility prob-lems with different platforms.
Integratedsolutions, which may also be used by de-signers and researchers without technicalbackground, are missing.
In this paperwe present a framework for multi-lingualdialog research, which combines speechrecognition and synthesis with WOZ.
Allcomponents are open source and adaptableto different application scenarios.1 IntroductionIn recent years Language Technologies (LT) suchas Automatic Speech Recognition (ASR), Ma-chine Translation (MT) and Text-to-Speech Syn-thesis (TTS) have found their way into an increas-ing number of products and services.
Technolog-ical advances in the field have created new possi-bilities, and ubiquitous access to modern technol-ogy (i.e.
smartphones, tablet computers, etc.)
hasinspired novel solutions in multiple application ar-eas.
Still, the technology at hand is not perfect andtypically substantial engineering effort (gatheringof corpora, training, tuning) is needed before pro-totypes involving such technologies can deliver auser experience robust enough to allow for poten-tial applications to be evaluated with real users.For graphical interfaces, well-known prototypingmethods like sketching and wire-framing allow forobtaining early impressions and initial user feed-back.
These low-fidelity prototyping techniquesdo not, however, work well with speech and nat-ural language.
The Wizard of Oz (WOZ) methodcan be employed to address this shortcoming.
Byusing a human ?wizard?
to mimic the functional-ity of a system, either completely or in part, WOZsupports the evaluation of potential user experi-ences and interaction strategies without the needfor building a fully functional product first (Gouldet al., 1983).
It furthermore supports the collectionof domain specific language corpora and the easyexploration of varying dialog designs (Wir?en et al.,2007).
WOZ tools, however, are often applicationdependent and built for very specific experimentalsetups.
Rarely, are they re-used or adapted to otherapplication scenarios.
Also, when used in combi-nation with existing technology components suchas ASR or TTS, they usually require complex soft-ware installations and server-client configurations.Thus, we see a need for an easy ?out-of-the-box?type solution.
A tool that does not require greattechnical experience and therefore may be used byresearchers and designers outside the typical NLPresearch and development community.
This demois the result of our recent efforts aimed at buildingsuch an integrated prototyping tool.We present a fully installed and configuredserver image that offers multi-lingual (i.e.
English,German, French, Italian) ASR and TTS integratedwith a web-based WOZ platform.
All componentsare open-source (i.e.
adaptable and extendable)and connected via a messaging server and a num-ber of Java programs.
When started the frameworkrequires only one single script to be executed (i.e.there is a separate script for each language so thatthe components are started using the right param-eters) in order to launch a WOZ driven system en-vironment.
With such a pre-configured setup webelieve that also non-NLP experts are able to suc-cessfully conduct extended user studies for lan-guage technologies applications.852 Existing Comparable ToolsFollowing the literature, existing tools and frame-works that support prototyping of language tech-nology applications can be separated into two cat-egories.
The first category consists of so-calledDialogue Management (DM) tools, which focuson the evaluation of Language Technologies (LTs)and whose primary application lies in the areas ofNLP and machine learning.
Two well-known ex-amples are the CSLU toolkit (Sutton et al., 1998)and the Olympus dialogue framework (Bohus etal., 2007).
Others include the Jaspis dialogue man-agement system (Turunen and Hakulinen, 2000)and the EPFL dialogue platform (Cenek et al.,2005).
DM tools explore the language-based inter-action between a human and a machine and aim atimproving this dialogue.
They usually provide anapplication development interface that integratesdifferent LTs such as ASR and TTS, which is thenused by an experimenter to specify a pre-defineddialogue flow.
Once the dialogue is designed, itcan be tested with human participants.
The mainfocus of these tools lies on testing and improvingthe quality of the employed technology compo-nents and their interplay.
Unlike DM tools, rep-resentatives from the second category, herein af-ter referred to as WOZ tools, tend to rely entirelyon human simulation.
This makes them more in-teresting for early feedback, as they better sup-port the aspects of low-fidelity prototyping.
Whilethese applications often offer more flexibility, theyrarely integrate actual working LTs.
Instead, a hu-man mimics the functions of the machine, whichallows for a less restrictive dialogue design andfacilitates the testing of user experiences that arenot yet supported by existing technologies.
MostWOZ tools, however, should be categorized asthrowaway applications i.e.
they are built for onescenario and only rarely re-used in other settings.Two examples that allow for a more generic ap-plication are SUEDE (Klemmer et al., 2000) andRichard Breuer?s WOZ tool1.While both DM and WOZ tools incorporateuseful features, neither type provides a full rangeof support for low-fidelity prototyping of LT ap-plications.
DM tools lack the flexibility of ex-ploring aspects that are currently not supported bytechnology, and pure WOZ applications often de-pend too much on the actions of the wizard, whichcan lead to unrealistic human-like behaviour and1http://www.softdoc.de/woz/index.htmlinconsistencies with its possible bias on evalua-tion results.
A combination of both types of toolscan outweigh their deficiencies and furthermoreallow for supporting different stages of prototyp-ing.
That is, a wizard might complement exist-ing technology on a continuum by first taking onthe role of a ?controller?
who simulates technol-ogy.
Then, in a second stage one could act as a?monitor?
who approves technology output, beforefinally moving on to being a ?supervisor?
who onlyoverrides output in cases where it is needed (Dowet al., 2005).
However, to allow for such variationan architecture is required that on the one handsupports a flexible use of technology componentsand on the other hand offers an interface for real-time human intervention.3 Integrated Prototyping FrameworkIn order to offer a flexible and easy to use pro-totyping framework for language technology ap-plications we have integrated a number of exist-ing technology components using an Apache AC-TIVEMQ messaging server2and several Java pro-grams.
Our framework consists of the JULIUSLarge Vocabulary Continuous Speech Recogni-tion engine3, an implementation of the GOOGLESPEECH API4, the WEBWOZ Wizard of OzPrototyping Platform5and the MARY Text-to-Speech Synthesis Platform6.
All components arefully installed and connected running on a VIR-TUAL BOX server image7(i.e.
Ubuntu 12.04 LTSLinux Server).
Using this configuration we offera platform that supports real-time speech recogni-tion as well as speech synthesis in English, French,German and Italian.
Natural Language Under-standing (NLU), Dialog Management (DM), andNatural Language Generation (NLG) is currentlyperformed by the human ?wizard?.
Respectivetechnology components may, however, be inte-grated in future versions of the framework.
Thefollowing sections describe the different compo-nents in some more detail and elaborate on howthey are connected.2http://activemq.apache.org/3http://julius.sourceforge.jp/en index.php4http://www.google.com/intl/en/chrome/demos/speech.html5https://github.com/stephanschloegl/WebWOZ6http://mary.dfki.de/7https://www.virtualbox.org/863.1 Automatic Speech RecognitionThe JULIUS open-source Large Vocabulary Con-tinuous Speech Recognition engine (LVCSR) usesn-grams and context-dependent Hidden MarkovModels (HMM) to transform acoustic input intotext output (Lee et al., 2008).
Its recognitionperformance depends on the availability of lan-guage dependent resources i.e.
acoustic models,language models, and language dictionaries.
Ourframework includes basic language resources forEnglish, German, Italian and French.
As thoseresources are still very limited we have also in-tegrated online speech recognition for these fourlanguages using the Google Speech API.
This al-lows for conducting experiments with users whileat the same time collecting the necessary data foraugmenting and filling in JULIUS language re-sources.3.2 Text-to-Speech SynthesisMARY TTS is a state-of-the-art, open sourcespeech synthesis platform supporting a varietyof different languages and accents (Schr?oder andTrouvain, 2003).
For the here presented multi-lingual prototyping framework we have installedsynthesized voices for US English (cmu-slt-hsmm), Italian (istc-lucia-hsmm), German (dfki-pavoque-neutral) as well as French (enst-dennys-hsmm).
Additional voices can be downloaded andadded through the MARY component installer.3.3 Wizard of OzWebWOZ is a web-based prototyping platform forWOZ experiments that allows for a flexible inte-gration of existing LTs (Schl?ogl et al., 2010).
Itwas implemented using modern web technologies(i.e.
Java, HTML, CSS) and therefore runs in anycurrent web browser.
It usually uses web servicesto integrate a set of pre-configured LT components(i.e.
ASR, MT, TTS).
For the presented prototyp-ing framework, however, we have integrated Web-WOZ with our ASR solution (i.e.
the combinedGoogle/JULIUS engine) and MARY TTS.
Conse-quently ASR output is displayed in the top areaof the wizard interface.
A wizard is then able toselect an appropriate response from a set of pre-viously defined utterances or use a free-text fieldto compose a response on the fly.
In both casesthe utterance is sent to the MARY TTS server andspoken out by the system.3.4 Messaging Server and Gluing ProgramsIn order to achieve the above presented integrationof ASR, WOZ and TTS we use an Apache AC-TIVEMQ messaging server and a number of Javaprograms.
One of these programs takes the outputfrom our ASR component and inserts it into theWebWOZ input stream.
In addition it publishesthis output to a specific ASR ActiveMQ queue sothat other components (e.g.
potentially an NLUcomponent) may also be able to process it.
Oncean ASR result is available within WebWOZ, it isup to the human wizard to respond.
WebWOZwas slightly modified so that wizard responses arenot only sent to the internal WebWOZ log, butalso to a WIZARD ActiveMQ queue.
A secondJava program then takes the wizard responses fromthe WIZARD queue and pushes them to a sepa-rate MARY queue.
While it may seem unneces-sary to first take responses from one queue just topublish them to another queue, it allows for theeasy integration of additional components.
Forexample, we have also experimented with a dis-tinct NLG component.
Putting this componentbetween the WIZARD and the MARY queue wewere able to conduct experiments where a wiz-ard instead of sending entire text utterance wouldrather send text-based semantic frames (i.e.
a se-mantically unified representation of a user?s in-put).
Such shows the flexibility of using the de-scribed queue architecture.
Finally we use a thirdJava program to take text published to the MARYqueue (i.e.
either directly coming from the wiz-ard or produced by an NLG component as withone of our experimental settings) and send it to theMARY TTS server.
Figure 1 illustrates the differ-ent framework components and how they are con-nected to each other.4 Demo SetupThe optimal setup for the demo uses two computerstations, one for a wizard and one for a test user.The stations need to be connected via a LAN con-nection.
The test user station runs the prototypingframework, which is a fully installed and config-ured Virtual Box software image (Note: any com-puter capable of running Virtual Box can serve as atest user station).
The wizard station only requiresa modern web browser to interact with the test userstation.
A big screen size (e.g.
17 inch) for thewizard is recommended as such eases his/her task.Both stations will be provided by the authors.87Figure 1: Prototyping Framework Components.5 Summary and Future WorkThis demo presents an integrated prototypingframework for running WOZ driven languagetechnology application scenarios.
Gluing togetherexisting tools for ASR, WOZ and TTS we havecreated an easy to use environment for spoken di-alog design and research.
Future work will focuson adding additional language technology compo-nents (e.g.
NLU, DM, NLG) and on improving thecurrently limited ASR language resources.AcknowledgmentsThe presented research is conducted as part of thevAssist project (AAL-2010-3-106), which is par-tially funded by the European Ambient AssistedLiving Joint Programme and the National FundingAgencies from Austria, France and Italy.ReferencesD.
Bohus, A. Raux, T. K. Harris, M. Eskenazi, and A. I.Rudnicky.
2007.
Olympus: An open-source frame-work for conversational spoken language interfaceresearch.
In Proc.
of NAACL-HLT, pages 32?39.P.
Cenek, M. Melichar, and M. Rajman.
2005.
Aframework for rapid multimodal application design.In Proceedings of TSD, pages 393?403.S.
Dow, B. Macintyre, J. Lee, C. Oezbek, J. D. Bolter,and M. Gandy.
2005.
Wizard of oz support through-out an iterative design process.
IEEE PervasiveComputing, 4(4):18?26.J.
D. Gould, J. Conti, and T. Hovanyecz.
1983.
Com-posing letters with a simulated listening typewriter.Communications of the ACM, 26(4):295?308.S.
R. Klemmer, A. K. Sinha, J. Chen, J.
A. Landay,N.
Aboobaker, and A. Wang.
2000.
SUEDE: A wiz-ard of oz prototyping tool for speech user interfaces.In Proc.
of UIST, pages 1?10.C.
Lee, S. Jung, and G. G. Lee.
2008.
Robust dia-log management with n-best hypotheses using di-alog examples and agenda.
In Proc.
of ACL-HLT,pages 630?637.S.
Schl?ogl, G. Doherty, N. Karamanis, and S Luz.2010.
WebWOZ: a wizard of oz prototyping frame-work.
In Proc.
of the ACM EICS Symposium on En-gineering Interactive Systems, pages 109?114.M.
Schr?oder and J. Trouvain.
2003.
The Germantext-to-speech synthesis system MARY: A tool forresearch, development and teaching.
InternationalJournal of Speech Technology.S.
Sutton, R. Cole, J. de Vielliers, J. Schalkwyk, P. Ver-meulen, M. Macon, Y. Yan, E. Kaiser, B. Rundle,K.
Shobaki, P. Hosom, A. Kain, J. Wouters, D. Mas-saro, and M. Cohen.
1998.
Universal speech tools:The CSLU toolkit.M.
Turunen and J. Hakulinen.
2000.
Jaspis- a frame-work for multilingual adaptive speech applications.In Proc.
of ICSLP, pages 719?722.M.
Wir?en, R. Eklund, F. Engberg, and J. Westermark.2007.
Experiences of an In-Service Wizard-of-Oz Data Collection for the Deployment of a Call-Routing Application.
In Proc.
of NAACL-HLT,pages 56?63.88
