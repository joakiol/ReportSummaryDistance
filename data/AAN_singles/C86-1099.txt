BetaText: An Event Driven Text P~oessir~\] ~ Text ~lyz in~\]  SystemlBenny BroddaDepartment of LinguisticsUniversity of StockholmS-I06 91 Stockholm, $%~edenAbstract.
BetaText  can be descr ibed  as an eventdriven pr(xluction system, in which (c~mbinations of)text events lead to cer ta in  actions, such as theprinting of sentences that exh ib i t  certain, say,syntactic phenomena.
%~\]e ana lys is  mechan ism usedallows for arbitrarily complex parsing, but is par-ticularly suitable for finite state i~arsing.
A care-ful invest igat ion  of what  is actua l ly  needed inlinguistically relevant text processing resulted ina rather sn%all but carefully chosen set of "elemen-tary actions" to be implemented.1.
Introdnction.
The field of c~mputa'tior~\]\[ linguis-tics seems, roughly speaking, to o~IiprJ.se two ratherdisjoint subf ie lds ,  one  J.n wh ich  the  typ ica lresearcher predominantly occupies himself  witJl pro-blems such as "concordance generation", "backwardsorting", "word frequencies" and so on, whereas  theprototypic researd\]er in tJ~e otJler field has thingslike "pars ing strategies", "semant ic  representa-tions" on top of h is  mind.qhis division into almost disjoint subfields isto be regretted, because we al l  are (or should be)students of one and the same thing - language as itis.
%~e responsibility for this sad state of affairscan probably be divided equal by the researchers inthese two  subfields: the "concordance makers"  .~-cause they seem so entirely ha~)py with rather unso-phisticated cx)raputational tools de~eloped a\].reac~ inthe sixties (and which al low the researcher to lookat words  or word  fo rms only, and their  d is t r ibu-tion), and the theoret i c ians  ~yecause they seem soobsessed with the idea of developing their fantasticir~dels of \]xln(}lage in greater and greater detail, amode\], that at a closer scrutiny is found to c~Dmprisea lex icon of, at best, a couple  of hundred  words,and cvavering, at best, a couple of hundred sentencesor so.
No wonder  that the researchers  in these twocanlos thirJ< so little of each other.One way  of c los ing the gap can be to deve lopniDre soph is t i ca ted  tools  for the invest igat ion  ofactual texts; there is a need for die theoreticiansto test  to what  extent  the i r  mode ls  actua l ly  coveractual language (and to get  impu lses  f rom actuallanguage), and there is a need for the "pract ic ion-ers" to have s imp le  tools for invest igat ing  snorecomplex st\[llctures in texts than mere words and word:totals.
BetaText  is an a t tempt  to prov ide tools forboth those needs.2.
Text events and text oiyerations.
BetaText  is asystem intended both for sc ient i f i c  invest igat ions(or analyses) of texts, and text  p rocess ing  in ai~ore technical sense, such as reformattlng, washingspurious characters  away, and so on.
Due to theinternal o rgan isat ion  of the system, even largetexts can \[se run at a reasonab le  cost  (of.
Brodda-Karlsson ?98i).
In this section we give some generaldefinitions, and show thei r  consequences  for Beta-Te xt.i~i e lementary  (text) event  cons is ts  of the obser -vation of one specif ied,  concrete  str ing in thetext.
The systera records sudl an observation throughthe in t roduct ion  of a spec i f ic  internal  state (ozthrough a spec i f i c  change of the interna l  state),the internal  state be ing an interna l  var iab le  thatcan take arbitrary, positive integral values./Lrbitrarily chosen states (sets of states, infact.)
can be t ied to spec i f i c  act iv i t ies  (or processes), and each t ime such a state is intro duced(i.e.
the interna l  state becomes  equal  to thatstate) the corresponding process is aeti vated.
Suchstates are called action states.A complex event (or just event, even elementaryevents can be.
cor~lalex in the sense used here) is thec~3mbined resul t  of a sequence of in terconnectedelementary events, poss ib ly  resu l t ing  in an act ionstate.In BetaText all this is coi~pletely controlled bya set of prEx~uction rules (cf.
Smullyan 196\].)
of thetype~(<striug>, <set of states>) ->( <slew string>, <move>, <new state>, <action(s) >)where <string> is the string that is to be observed,<set of states> a cond i t ion  for app ly ing  the rule,viz.
that the current inter\]lal state belongs to thisset; it is via such cond i t ions  that the cha in ing ofseveral elementary events into one con~91ex event isachieved.
<new str ing> is a str ing that is subst i -tuted for the observed  s t r ing  (the defaul t  is thatthe original string is retained), <move> is a direc-tive to Che sys tem w'here (in the text) it shal lcontinue the analysis; the default is immediately to421the right of the observed string.
<new state> is thestate that the appl ication of the rule results in.<action(s)>, finally, is the set of actions that areinvoked through the appl ication of the rule; theaction part of a rule is only indirectly present, asthe actions are invoked if the  resulting state ofthe rule belongs to the corresponding action sets.The actual rule format also al lows for contextconditions (and not only state condit ions as isindicated above), h/t it is the way state conditionsare evaluated that makes the Beta formal ism asstrong as it is; cf.
Brodda-Karlsson 81 and Brodda86.3.
internal organiT~tion.
The text corpus to be ana-lyzed is assumed to adhere to a format that ,~re orless has become the international standard, whereeach line of the running text is assumed to bepreceded by a fixed length line head, usually con-taining some k~id of line identifier.
(Typically adoct~nerrt identif ier + a running line enumeration.
)~ne running text is presented to the user (well, theprogram) as if consisting of one immensely longstring (without the line heads) and in which theoriginnl line divisions are represented by numbersigns (or some other unique symbol not appearingotherwise in the text).
%~e original line heads arealso lined up in an internal queue, and the corre-spondence between lines and line heads is retainedvia pointers.
(This is completely hidden for theuser.
)%~e system has (or can be thought to have) acn/rsor that is moved to and fro inside the text.
Atstart up, the cursor is placed at the beginning ofthe text, and the internal state is init iated to l~from there on, the user has complete control (viathe appl icat ion of rules) of the cursor and theinternal state.
(The the cursor is, however, auto-i~tically moved r ightwards in the text as long asthere is no rule applicable.
)Output is again organized in the line head, textline format, but now the line head may be given aninternal structure, viz.
as<-kwoc-fie Id-> <-id-field-> <-enum- field->where the id-f ield corresponds to the line head ofthe input text, the kwoc-f ie ld may be fil led withmaterial from the text itself (e.g.
words if one ismaking a word concordance of the KWOC-type), and theent~n(eration)-field, if defined, contains a runningentuneration.
These fields - if defined - must beexplicitly fil led wi th  cor respond ing  mater ia l ,through the appl icat ion of action rules, which wedescribe in the next section.4.
Actions.
The actions that can be invoked throughthe appl icat ions of rules can be divided into fourdifferent groups~ i) analysis actions, actions that422control in detail  how the analysis proceedes in-ternally; ii) block and line head actions, actionsthrough which one can move material  from the textinto the line head (and vice versa); iii) outl~It (orprint) actions, actions which result in some kindof output, and, finally, iv)count actions.q%le analysis actions control how the analysis isto proceed internally.
In an accumulat ing rule theresulting state is added to (or subtracted from) thecurrent internal state, rather than assigned to it(which is the default case).
In stack rules someimportant internal parameters (internal state andthe present posit ions of the cursor and the flag;cf.
below) are pushed onto or popped from an in-ternal stack.
%~rough the use of stack actions ATN-like grammars can ~ writtern very conveniently inthe Beta formalism (cf.
Brodda 86.
)Block and line head actions: A flag settingaction impl ies that an internal pointer is set tothe present posit ion of the cursor.
The flag canlater be the target of move directives (i.e.
thecursor can be moved back to the flag).
The area fromthe flag to the current posit ion of the cursor canalso be moved out into the kwoc-f ie ld as one blockin a kwoc action.In output actions the output can be forn~tted inn~ny convenient ways.
in kwic-format, for instance,always exactly one line at a time is output, and insuch a way that the cursor is posit ioned in a fixedco itu~In.BetaText has not in itself any advanced sta-tistical apparatus, but one can at least countthings, and perhaps in a little bit more advancedway than is usually the case.
Arbitrary sets ofstates can be assigned specific registers (up to \]28such sets can present ly be defined), and ~heneverany of these states is introduced, the correslxgndingregister is raised by one.
The content of the reg-isters are then presented in a log file that ac-conloanies all sessions with Beta'l~xt.Several examples of actual analyses wil l  k~shown at the conference.RE ~7~h~N C~I~ :Brodda, B.
& Karlsson, i.'.
"An Exper iment withAuton~tic Morphological  Analysis of Fin-nish", Del~rt~f~ent of Linguistics, Universi-ty of Helsinki, Helsinki 1981.Brodda B.
"~ Experiment with Heuristic Parsing ofSwedish" in Papers from the Seventh Sc6~idi-navian Conference of Linguistics, Publica-tions No.
10, Department of Linguistics,University of Helsinki, Helsinki 1983.Brodda, B.
"Beta%%xt: 7~i event Driven Text Proces-sing System and Text Analyzing System", toappear in Papers ~om the ~Ehglish Languageand Literature department, University ofStockholm, Stockholm 1986.Sn~llyan, R.M.
"Theory of Formal  Systems", Annalsof Math.
Studies, New York 1961.
