Representing and Querying Multi-dimensional Markupfor Question AnsweringWouter Alink, Valentin Jijkoun, David Ahn, Maarten de RijkeISLA, University of Amsterdamalink,jijkoun,ahn,mdr@science.uva.nlPeter Boncz, Arjen de VriesCWI, Amsterdam, The Netherlandsboncz,arjen@cwi.nlAbstractThis paper describes our approach to rep-resenting and querying multi-dimensional,possibly overlapping text annotations, asused in our question answering (QA) sys-tem.
We use a system extending XQuery,the W3C-standard XML query language,with new axes that allow one to jump eas-ily between different annotations of thesame data.
The new axes are formulated interms of (partial) overlap and containment.All annotations are made using stand-offXML in a single document, which can beefficiently queried using the XQuery ex-tension.
The system is scalable to giga-bytes of XML annotations.
We show ex-amples of the system in QA scenarios.1 IntroductionCorpus-based question answering is a complextask that draws from information retrieval, infor-mation extraction and computational linguistics topinpoint information users are interested in.
Theflexibility of natural language means that poten-tial answers to questions may be phrased in differ-ent ways?lexical and syntactic variation, ambi-guity, polysemy, and anaphoricity all contribute toa gap between questions and answers.
Typically,QA systems rely on a range of linguistic analyses,provided by a variety of different tools, to bridgethis gap from questions to possible answers.In our work, we focus on how we can integratethe analyses provided by completely independentlinguistic processing components into a uniformQA framework.
On the one hand, we would liketo be able, as much as possible, to make use ofoff-the-shelf NLP tools from various sources with-out having to worry about whether the output ofthe tools are compatible, either in a strong senseof forming a single hierarchy or even in a weakersense of simply sharing common tokenization.
Onthe other hand, we would like to be able to issuesimple and clear queries that jointly draw upon an-notations provided by different tools.To this end, we store annotated data as stand-off XML and query it using an extension ofXQuery with our new StandOff axes, inspired by(Burkowski, 1992).
Key to our approach is the useof stand-off annotation at every stage of the anno-tation process.
The source text, or character data,is stored in a Binary Large OBject (BLOB), and allannotations, in a single XML document.
To gen-erate and manage the annotations we have adoptedXIRAF (Alink, 2005), a framework for integratingannotation tools which has already been success-fully used in digital forensic investigations.Before performing any linguistic analysis, thesource documents, which may contain XMLmeta-data, are split into a BLOB and an XML docu-ment, and the XML document is used as the ini-tial annotation.
Various linguistic analysis toolsare run over the data, such as a named-entity tag-ger, a temporal expression (timex) tagger, and syn-tactic phrase structure and dependency parsers.The XML document will grow during this analy-sis phase as new annotations are added by the NLPtools, while the BLOB remains intact.
In the end,the result is a fully annotated stand-off document,and this annotated document is the basis for ourQA system, which uses XQuery extended with thenew axes to access the annotations.The remainder of the paper is organized as fol-lows.
In Section 2 we briefly discuss related work.Section 3 is devoted to the issue of querying multi-dimensional markup.
Then we describe how wecoordinate the process of text annotation, in Sec-3tion 4, before describing the application of ourmulti-dimensional approach to linguistic annota-tion to question answering in Section 5.
We con-clude in Section 6.2 Related WorkXML is a tree structured language and providesvery limited capabilities for representing severalannotations of the same data simultaneously, evenwhen each of the annotations is tree-like.
In par-ticular, in the case of inline markup, multiple an-notation trees can be put together in a single XMLdocument only if elements from different annota-tions do not cross each other?s boundaries.Several proposals have tried to circumvent thisproblem in various ways.
Some approaches arebased on splitting overlapping elements into frag-ments.
Some use SGML with the CONCUR fea-ture or even entirely different markup schemes(such as LMNL, the Layered Markup and An-notation Language (Piez, 2004), or GODDAGs,generalized ordered-descendant directed acyclicgraphs (Sperberg-McQueen and Huitfeldt, 2000))that allow arbitrary intersections of elements fromdifferent hierarchies.
Some approaches use emptyXML elements (milestones) to mark beginningsand ends of problematic elements.
We refer to(DeRose, 2004) for an in-depth overview.Although many approaches solve the problemof representing possibly overlapping annotations,they often do not address the issue of accessingor querying the resulting representations.
Thisis a serious disadvantage, since standard querylanguages, such as XPath and XQuery, and stan-dard query evaluation engines cannot be used withthese representations directly.The approach of (Sperberg-McQueen and Huit-feldt, 2000) uses GODDAGs as a conceptualmodel of multiple tree-like annotations of thesame data.
Operationalizing this approach,(Dekhtyar and Iacob, 2005) describes a systemthat uses multiple inline XML annotations of thesame text to build a GODDAG structure, whichcan be queried using EXPath, an extension ofXPath with new axis steps.Our approach differs from that of Dekhtyar andIacob in several ways.
First of all, we do not usemultiple separate documents; instead, all annota-tion layers are woven into a single XML docu-ment.
Secondly, we use stand-off rather than in-line annotation; each character in the original doc-ument is referred to by a unique offset, whichmeans that specific regions in a document can bedenoted unambiguously with only a start and anend offset.
On the query side, our extended XPathaxes are similar to the axes of Dekhtyar and Iacob,but less specific: e.g., we do not distinguish be-tween left-overlapping and right-overlapping char-acter regions.In the setting of question answering thereare a few examples of querying and retrievingsemistructured data.
Litowski (Litkowksi, 2003;Litkowksi, 2004) has been advocating the use ofan XML-based infrastructure for question answer-ing, with XPath-based querying at the back-end,for a number of years.
Ogilvie (2004) outlines thepossibility of using multi-dimensional markup forquestion answering, with no system or experimen-tal results yet.
Jijkoun et al (2005) describe initialexperiments with XQuesta, a question answeringsystem based on multi-dimensional markup.3 Querying Multi-dimensional MarkupOur approach to markup is based on stand-offXML.
Stand-off XML is already widely used, al-though it is often not recognized as such.
It canbe found in many present-day applications, es-pecially where annotations of audio or video areconcerned.
Furthermore, many existing multi-dimensional-markup languages, such as LMNL,can be translated into stand-off XML.We split annotated data into two parts: theBLOB (Binary Large OBject) and the XML anno-tations that refer to specific regions of the BLOB.A BLOB may be an arbitrary byte string (e.g., thecontents of a hard drive (Alink, 2005)), and theannotations may refer to regions using positionssuch as byte offsets, word offsets, points in timeor frame numbers (e.g., for audio or video appli-cations).
In text-based applications, such as de-scribed in this paper, we use character offsets.
Theadvantage of such character-based references overword- or token-based ones is that it allows us toreconcile possibly different tokenizations by dif-ferent text analysis tools (cf.
Section 4).In short, a multi-dimensional document consistsof a BLOB and a set of stand-off XML annota-tions of the BLOB.
Our approach to querying suchdocuments extends the common XML query lan-guages XPath and XQuery by defining 4 new axesthat allow one to move from one XML tree to an-other.
Until recently, there have been very few4ABCEDXML tree 1XML tree 2BLOB(text characters)Figure 1: Two annotations of the same data.approaches to querying stand-off documents.
Wetake the approach of (Alink, 2005), which allowsthe user to relate different annotations using con-tainment and overlap conditions.
This is done us-ing the new StandOff XPath axis steps that we addto the XQuery language.
This approach seems tobe quite general: in (Alink, 2005) it is shown thatmany of the query scenarios given in (Iacob et al,2004) can be easily handled by using these Stand-Off axis steps.Let us explain the axis steps by means of anexample.
Figure 1 shows two annotations of thesame character string (BLOB), where the firstXML annotation is<A start="10" end="50"><B start="30" end="50"/></A>and the second is<E start="20" end="60"><C start="20" end="40"/><D start="55" end="60"></E>While each annotation forms a valid XML tree andcan be queried using standard XML query lan-guages, together they make up a more complexstructure.StandOff axis steps, inspired by (Burkowski,1992), allow for querying overlap and contain-ment of regions, but otherwise behave like reg-ular XPath steps, such as child (the step be-tween A and B in Figure 1) or sibling (the stepbetween C and D).
The new StandOff axes, de-noted with select-narrow, select-wide,reject-narrow, and reject-wide selectcontained, overlapping, non-contained and non-overlapping region elements, respectively, frompossibly distinct layers of XML annotation of thedata.
Table 1 lists some examples for the annota-tions of our example document.In XPath, the new axis steps are used in exactlythe same way as the standard ones.
For example,Context Axis Result nodesA select-narrow B CA select-wide B C EA reject-narrow E DA reject-wide DTable 1: Example annotations.the XPath query://B/select-wide::*returns all nodes that overlap with the span of aB node: in our case the nodes A, B, C and E. Thequery://*[./select-narrow::B]returns nodes that contain the span of B: in ourcase, the nodes A and E.In implementing the new steps, one of our de-sign decisions was to put all stand-off annotationsin a single document.
For this, an XML processoris needed that is capable of handling large amountsof XML.
We have decided to use MonetDB/X-Query, an XQuery implementation that consists ofthe Pathfinder compiler, which translates XQuerystatements into a relational algebra, and the re-lational database MonetDB (Grust, 2002; Boncz,2002).The implementation of the new axis steps inMonetDB/XQuery is quite efficient.
When theXMark benchmark documents (XMark, 2006)are represented using stand-off notation, query-ing with the StandOff axis steps is interactive fordocument size up to 1GB.
Even millions of re-gions are handled efficiently.
The reason for thespeed of the StandOff axis steps is twofold.
First,they are accelerated by keeping a database in-dex on the region attributes, which allows fastmerge-algorithms to be used in their evaluation.Such merge-algorithms make a single linear scanthrough the index to compute each StandOffstep.
The second technical innovation is ?loop-lifting.?
This is a general principle inMonetDB/X-Query(Boncz et al, 2005) for the efficient execu-tion of XPath steps that occur nested in XQueryiterations (i.e., inside for-loops).
A naive strategywould invoke the StandOff algorithm for each it-eration, leading to repeated (potentially many) se-quential scans.
Loop-lifted versions of the Stand-Off algorithms, in contrast, handle all iterations to-gether in one sequential scan, keeping the averagecomplexity of the StandOff steps linear.5The StandOff axis steps are part of release0.10 of the open-source MonetDB/XQuery prod-uct, which can be downloaded from http://www.monetdb.nl/XQuery.In addition to the StandOff axis steps, a key-word search function has been added to theXQuery system to allow queries asking for re-gions containing specific words.
This functionis called so-contains($node, $needle)which will return a boolean specifying whether$needle occurs in the given region representedby the element $node.4 Combining AnnotationsIn our QA application of multi-dimensionalmarkup, we work with corpora of newspaper arti-cles, each of which comes with some basic anno-tation, such as title, body, keywords, timestamp,topic, etc.
We take this initial annotation structureand split it into raw data, which comprises all tex-tual content, and the XML markup.
The raw datais the BLOB, and the XML annotations are con-verted to stand-off format.
To each XML elementoriginally containing textual data (now stored inthe BLOB), we add a start and end attributedenoting its position in the BLOB.We use a separate system, XIRAF, to coordi-nate the process of automatically annotating thetext.
XIRAF (Figure 2) combines multiple textprocessing tools, each having an input descriptorand a tool-specific wrapper that converts the tooloutput into stand-off XML annotation.
Figure 3shows the interaction of XIRAF with an automaticannotation tool using a wrapper.The input descriptor associated with a tool isused to select regions in the data that are candi-dates for processing by that tool.
The descrip-tor may select regions on the basis of the originalmetadata or annotations added by other tools.
Forexample, both our sentence splitter and our tempo-ral expression tagger use original document meta-data to select their input: both select documenttext, with //TEXT.
Other tools, such as syntac-tic parsers and named-entity taggers, require sep-arated sentences as input and thus use the outputannotations of the sentence splitter, with the inputdescriptor //sentence.
In general, there maybe arbitrary dependencies between text-processingtools, which XIRAF takes into account.In order to add the new annotations generatedby a tool to the original document, the output ofthe tool must be represented using stand-off XMLannotation of the input data.
Many text process-ing tools (e.g., parsers or part-of-speech taggers)do not produce XML annotation per se, but theiroutput can be easily converted to stand-off XMLannotation.
More problematically, text process-ing tools may actually modify the input text in thecourse of adding annotations, so that the offsetsreferenced in the new annotations do not corre-spond to the original BLOB.
Tools make a vari-ety of modifications to their input text: some per-form their own tokenization (i.e., inserting whites-paces or other word separators), silently skip partsof the input (e.g., syntactic parsers, when the pars-ing fails), or replace special symbols (e.g., paren-theses with -LRB- and -RRB-).
For many of theavailable text processing tools, such possible mod-ifications are not fully documented.XIRAF, then, must map the output of a process-ing tool back to the original BLOB before addingthe new annotations to the original document.
Thisre-alignment of the output of the processing toolswith the original BLOB is one of the major hur-dles in the development of our system.
We ap-proach the problems systematically.
We comparethe text data in the output of a given tool with thedata that was given to it as input and re-align in-put and output offsets of markup elements usingan edit-distance algorithm with heuristically cho-sen weights of character edits.
After re-aligningthe output with the original BLOB and adjustingthe offsets accordingly, the actual data returned bythe tool is discarded and only the stand-off markupis added to the existing document annotations.5 Question AnsweringXQuesta, our corpus-based question-answeringsystem for English and Dutch, makes use of themulti-dimensional approach to linguistic annota-tion embodied in XIRAF.
The system analyzes anincoming question to determine the required an-swer type and keyword queries for retrieving rel-evant snippets from the corpus.
From these snip-pets, candidate answers are extracted, ranked, andreturned.The system consults Dutch and English news-paper corpora.
Using XIRAF, we annotate thecorpora with named entities (including type infor-mation), temporal expressions (normalized to ISOvalues), syntactic chunks, and syntactic parses(dependency parses for Dutch and phrase structure6;4XHVWD ;,5$))HDWXUH([WUDFWLRQ)UDPHZRUN;4XHU\6\VWHP    	 fffiffiflff	  !ffi  "	 #$%'&'(!)$!
* ,+- ".
/  0 /1	 23!4 ,+- "5)6 78	9*:; ;<=>?
@*A*ACBDffi>E	A	?
*F6ACG H 	IJ  	I/! 	IffK>76MLG >N=6G7	O6F A8K*G7	P>Q-ACGMRSUTL>?6 7TL>?6F A8<87B H?
*F ?Figure 2: XIRAF Architecture   	 	ff	flfiffi! 	flfi"#!$ 	fi  %!&'() *+ff,.-0/	   !,.-0/,-ffi/ *fl+ff,.-0/ff	   !,-ffi/1/23 1.!+4 	flfi5,-ffi/Figure 3: Tool Wrapping Exampleparses for English).XQuesta?s question analysis module maps ques-tions to both a keyword query for retrieval of rele-vant passages and a query for extracting candidateanswers.
For example, for the question How manyseats does a Boeing 747 have?, the keyword queryis Boeing 747 seats, while the extraction query isthe pure XPath expression://phrase[@type="NP"][.//WORD[@pos="CD"]][so-contains(.,"seat")]This query can be glossed: find phrase elementsof type NP that dominate a word element taggedas a cardinal determiner and that also contain thestring ?seat?.
Note that phrase and word ele-ments are annotations generated by a single tool(the phrase-structure parser) and thus in the sameannotation layer, which is why standard XPath canbe used to express this query.For the question When was Kennedy assassi-nated?, on the other hand, the extraction query isan XPath expression that uses a StandOff axis://phrase[@type="S" and headword="assassinated" and so-contains(.,"Kennedy")]/select-narrow::timexThis query can be glossed: find temporal expres-sions whose textual extent is contained inside asentence (or clause) that is headed by assassi-nated and contains the string ?Kennedy?.
Notethat phrase and timex elements are gener-ated by different tools (the phrase-structure parserand the temporal expression tagger, respectively),and therefore belong to different annotation lay-ers.
Thus, the select-narrow:: axis stepmust be used in place of the standard child::or descendant:: steps.As another example of the use of the Stand-Off axes, consider the question Who killed John7F.
Kennedy?.
Here, the keyword query is kill JohnKennedy, and the extraction query is the following(extended) XPath expression://phrase[@type="S" and headword="killed" and so-contains(.,"Kennedy")]/phrase[@type="NP"]/select-wide::ne[@type="per"]This query can be glossed: find person named-entities whose textual extent overlaps the textualextent of an NP phrase that is the subject of a sen-tence phrase that is headed by killed and containsthe string ?Kennedy?.
Again, phrase elementsand ne elements are generated by different tools(the phrase-structure parser and named-entity tag-ger, respectively), and therefore belong to differ-ent annotation layers.
In this case, we further donot want to make the unwarranted assumption thatthe subject NP found by the parser properly con-tains the named-entity found by the named-entitytagger.
Therefore, we use the select-wide::axis to indicate that the named-entity which willserve as our candidate answer need only overlapwith the sentential subject.How do we map from questions to queries likethis?
For now, we use hand-crafted patterns, butwe are currently working on using machine learn-ing methods to automatically acquire question-query mappings.
For the purposes of demonstrat-ing the utility of XIRAF to QA, however, it is im-material how the mapping happens.
What is im-portant to note is that queries utilizing the Stand-Off axes arise naturally in the mapping of ques-tions to queries against corpus data that has severallayers of linguistic annotation.6 ConclusionWe have described a scalable and flexible systemfor processing documents with multi-dimensionalmarkup.
We use stand-off XML annotation to rep-resent markup, which allows us to combine multi-ple, possibly overlapping annotations in one XMLfile.
XIRAF, our framework for managing theannotations, invokes text processing tools, eachaccompanied with an input descriptor specifyingwhat data the tool needs as input, and a wrapperthat converts the tool?s output to stand-off XML.To access the annotations, we use an efficientXPath/XQuery engine extended with new Stand-Off axes that allow references to different annota-tion layers in one query.
We have presented exam-ples of such concurrent extended XPath queries inthe context of our corpus-based Question Answer-ing system.AcknowledgmentsThis research was supported by the Nether-lands Organization for Scientific Research (NWO)under project numbers 017.001.190, 220-80-001, 264-70-050, 612-13-001, 612.000.106,612.000.207, 612.066.302, 612.069.006, 640.-001.501, and 640.002.501.ReferencesW.
Alink.
2005.
XIRAF ?
an XML information re-trieval approach to digital forensics.
Master?s thesis,University of Twente, Enschede, The Netherlands,October.P.A.
Boncz, T. Grust, S. Manegold, J. Rittinger, andJ.
Teubner.
2005.
Pathfinder: Relational XQueryOver Multi-Gigabyte XML Inputs In InteractiveTime.
In Proceedings of the 31st VLDB Conference,Trondheim, Norway.P.A.
Boncz.
2002.
Monet: A Next-Generation DBMSKernel For Query-Intensive Applications.
Ph.d. the-sis, Universiteit van Amsterdam, Amsterdam, TheNetherlands, May.F.J.
Burkowski.
1992.
Retrieval Activities in aDatabase Consisting of Heterogeneous Collectionsof Structured Text.
In Proceedings of the 1992 SI-GIR Conference, pages 112?125.A.
Dekhtyar and I.E.
Iacob.
2005.
A frameworkfor management of concurrent xml markup.
DataKnowl.
Eng., 52(2):185?208.S.
DeRose.
2004.
Markup Overlap: A Review and aHorse.
In Extreme Markup Languages 2004.T.
Grust.
2002.
Accelerating XPath Location Steps.In Proceedings of the 21st ACM SIGMOD Interna-tional Conference on Management of Data, pages109?120.I.E.
Iacob, A. Dekhtyar, and W. Zhao.
2004.
XPathExtension for Querying Concurrent XML Markup.Technical report, University of Kentucky, February.V.
Jijkoun, E. Tjong Kim Sang, D. Ahn, K. Mu?ller, andM.
de Rijke.
2005.
The University of Amsterdam atQA@CLEF 2005.
In Working Notes for the CLEF2005 Workshop.K.C.
Litkowksi.
2003.
Question answering usingXML-tagged documents.
In Proceedings of theEleventh Text REtrieval Conference (TREC-11).K.C.
Litkowksi.
2004.
Use of metadata for questionanswering and novelty tasks.
In Proceedings of theTwelfth Text REtrieval Conference (TREC 2003).8P.
Ogilvie.
2004.
Retrieval Using Structure for Ques-tion Answering.
In The First Twente Data Manage-ment Workshop (TDM?04), pages 15?23.W.
Piez.
2004.
Half-steps toward LMNL.
In Pro-ceedings of the fifth Conference on Extreme MarkupLanguages.C.M.
Sperberg-McQueen and C. Huitfeldt.
2000.GODDAG: A Data Structure for Overlapping Hier-archies.
In Proc.
of DDEP/PODDP 2000, volume2023 of Lecture Notes in Computer Science, pages139?160, January.XMark.
2006.
XMark ?
An XML Benchmark Project.http://monetdb.cwi.nl/xml/.910
