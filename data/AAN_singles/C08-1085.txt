Proceedings of the 22nd International Conference on Computational Linguistics (Coling 2008), pages 673?680Manchester, August 2008Recent Advances in a Feature-rich Framework for Treebank AnnotationPetr PajasCharles Univ.
in Prague, MFF?UFALMalostransk?e n?am.
25118 00 Prague 1 ?
Czech Rep.pajas@ufal.ms.mff.cuni.czJan?St?ep?anekCharles Univ.
in Prague, MFF?UFALMalostransk?e n?am.
25118 00 Prague 1 ?
Czech Rep.stepanek@ufal.ms.mff.cuni.czAbstractThis paper presents recent advances inan established treebank annotation frame-work comprising of an abstract XML-based data format, fully customizable ed-itor of tree-based annotations, a toolkitfor all kinds of automated data process-ing with support for cluster computing, anda work-in-progress database-driven searchengine with a graphical user interface builtinto the tree editor.1 IntroductionConstructing a treebank is a complicated process.Among other things it requires a good choice oftools, varying from elementary data conversionscripts over annotation tools and tools for consis-tency checking, to tools used for semi-automatictreebank building (POS taggers, syntactic parsers).If no existing tool fits the needs, a new one has tobe developed (or some existing tool adapted or ex-tended, which, however, seldom happens in prac-tice).
The variety of tools that exist and emergedfrom various treebanking projects shows that thereis no simple solution that would fit all.
It is some-times a small missing feature or an incompati-ble data format that disqualifies certain otherwisewell-established tools in the eyes of those who de-cide which tools to use for their annotation project.This paper presents an annotation frameworkthat was from its very beginning designed to beextensible and independent of any particular anno-tation schema.
While reflecting the feedback fromseveral treebanking projects, it evolved into a setc?
2008.
Licensed under the Creative CommonsAttribution-Noncommercial-Share Alike 3.0 Unported li-cense (http://creativecommons.org/licenses/by-nc-sa/3.0/).Some rights reserved.of generic tools that is open to all kinds of anno-tations that involve tree structures.
By this paperwe would like not only to promote this framework,but also show that due to its open nature, it maybe easily extended to fit new requirements.
Thefirst three sections describe base components ofthe framework, an abstract data format, a versatileannotation tool for tree-oriented annotations, anda framework for automatic annotation processing;some of these components have been mentionedin earlier publications, but the framework has nei-ther been published in its integrity nor describedin much detail.
The last section describes a queryengine that is a newest addition to the framework,first presented by this paper.2 Data formatThe base data format selected for the present an-notation framework, both for data exchange andas a memory-model reference, is PML (Pajas and?St?ep?anek, 2006).
PML is an abstract XML-basedformat intended to be generally applicable to alltypes of annotation purposes, and especially suit-able for multi-layered treebank annotations fol-lowing the stand-of principles.
A notable fea-ture that distinguishes PML from other encodingschemes, like Tiger-XML (Mengel and Lezius,2000), XCES (Ide and Romary, 2003), or maybeeven SynAF by ISO TC37/SC4 (Declerck, 2006),is its generic and open nature.
Rather than beingtargeted to one particular annotation schema or be-ing a set of specifically targeted encoding conven-tions, PML is an open system, where a new typeof annotation can be introduced easily by creatinga simple XML file called PML schema, which de-scribes the annotation by means of declaring therelevant data types and possibly assigning certainroles to these data types.
The roles in the con-673text of PML are just labels from a pre-defined setthat can be used to mark the declarations accord-ing to their purpose.
For instance, the roles indi-cate which data structures represent the nodes ofthe trees, how the node data structures are nestedto form a tree, which field in a data structure car-ries its unique ID (if any), or which field carriesa link to the annotated data or other layers of an-notation, and so on.
PML schema can define allkinds of annotations varying from linear annota-tions through constituency or dependency trees, tocomplex graph-oriented annotation systems.
ThePML schema provides information for validatingthe annotation data as well as for creating a rel-evant data model for their in-memory representa-tion.To give an example, the annotation of the PragueDependency Treebank 2.0 (PDT) (Haji?c and oth-ers, 2006), which was published in the PML for-mat, consists of four annotation layers, each de-fined by its own PML schema: a lowest word-formlayer consisting of tokenized text segmented justinto documents and paragraphs; a morphologicallayer segmenting the token stream of the previ-ous layer to sentences and attaching morphologicalform, lemma, and tag to each token; an analyticallayer building a morpho-syntactic dependency treefrom the words of each sentence (morphologicallyanalyzed on the previous layer); and a tectogram-matical layer consisting of deep-syntactic depen-dency trees interlinked in a N :M manner with theanalytical layer and a valency lexicon and carryingfurther relational annotation, such as coreferenceand quotation sets.
All these features are formallydescribed by the respective PML schemas.The fundamental toolkit for PML comprises ofa validator (based on compiling PML schemas toRelaxNG grammars accompanied by Schematronrules), and API, consisting of a Perl library (ba-sic interfaces for Java and C++ are planned).
Theinput/output functions of the library are modularand can work with local files as well as with re-mote resources accessible via HTTP, FTP or SSHprotocols (with pluggable support for other pro-tocols).
Additionally, the library supports on-the-fly XSLT-based format conversions that canbe easily plugged in via a simple configurationfile.
Consequently, the API can transparentlyhandle even non-PML data formats.
Currentlythere are about a dozen input/output conversion fil-ters available, covering various existing data for-mats including the TigerXML format, the for-mats of the Penn Treebank (Marcus et al, 1994),the CoNLL-X shared task format (Buchholz andMarsi, 2006), and the formats of the Latin Depen-dency (Bamman and Crane, 2006), Sinica (Chu-Ren et al, 2000), Slovene Dependency (D?zeroskiet al, 2006) (SDT), and Alpino (van der Beek etal., 2002) treebanks.
Support for XCES formatsis planned as soon as a final release of XCES isavailable.This basic toolkit is further supplemented byvarious auxiliary tools, such as pmlcopy whichallows one to copy, move, rename, or GZip setsof interconnected PML data files without breakingthe internal URL-based references.3 Tree EditorThe heart of the annotation framework is a multi-platform graphical tree editor called TrEd, (Haji?cet al, 2001).TrEd was from the beginning designed to beannotation-schema independent, extensible andconfigurable.
TrEd can work with any PML dataformat whose PML schema correctly defines (viaroles) at least one sequence of trees.
Beside PMLformat, TrEd can work with many other data for-mats, either by means of the modular input/outputinterface of the PML library or using its own in-put/output backends.The basic editing capabilities of TrEd allow theuser to easily modify the tree structure with drag-and-drop operations and to easily edit the asso-ciated data.
Although this is sufficient for mostannotation tasks, the annotation process can begreatly accelerated by a set of custom extensionfunctions, called macros, written in Perl.
Macrosare usually created to simplify the most commontasks done by the annotators.
They can be calledeither from menu or by keyboard shortcuts.Although TrEd ensures that the result of the an-notation is in accord with the related PML schema,there is still a chance that an annotator errs in someother aspect of the annotation.
For this reasonTrEd offers the possibility to write macros that in-corporate custom consistency tests into the built-inediting commands of TrEd.
Such tests can preventthe user from making accidental mistakes (like as-signing a case to a verb or subordinating a Subjectto a particle).
Macros can also completely disablesome dangerous editing commands (for example,the PDT annotation modes in TrEd disable the pos-674sibility to add or delete tokens or trees).While macros provide means to extend, accel-erate and control the annotation capabilities ofTrEd, the concept of style-sheets gives users con-trol over the visual presentation of the annotateddata.
Style-sheets, among other, offer the possi-bility to: visually differentiate nodes and edges bycolor, shape, size or line style according to arbi-trary criteria; assemble the data associated withnodes and edges to node and edge labels; alternode positioning and padding; visualize additionaledges and cross-structure relations by means ofarrows or other types of connections; control thecontent and styling of the text (usually the an-notated sentence) displayed in a box above thetree.
TrEd can also balance trees, visualize dis-connected groups of nodes, zoom the tree view ar-bitrarily, and display trees in a vertical mode, seeFig.
1.Figure 1: The same tree displayed using horizontaland vertical display mode in TrEdDue to model/view separation, TrEd providesmeans for controlling which nodes are actually dis-played (it is thus possible to write modes that col-lapse subtrees, hide auxiliary nodes, completelyskip some levels of the tree, display multiple treesat once (Fig.
2), or even display additional ?vir-tual?
nodes and edges that are not actually presentin the underlying data structures).So far, TrEd has been selected as annotationtool for PDT and several similarly structured tree-banking projects like Slovene (D?zeroski et al,2006), Croatian (Tadi?c, 2007), or Greek Depen-dency Treebanks (Prokopidis et al, 2005), but alsofor Penn-style Alpino Treebank (van der Beek etal., 2002), the semantic annotation in the DutchFigure 2: The main window visualizing node-to-node alignment of trees in the TectoMT project(?Zabokrtsk?y et al, 2008); side-bar shows data as-sociated with the selected node.language Corpus Initiative project (Trapman andMonachesi, 2006), as well as for annotation ofmorphology using so-called MorphoTrees (Smr?zand Pajas, 2004) in the Prague Arabic Depen-dency Treebank (where it was also used for anno-tation of the dependency trees in the PDT style).While most other projects use off-line conversionFigure 3: One possible way of displaying PennTreebank data in TrEdto some format directly supported by TrEd, forAlpino Treebank a better approach has been se-lected: the PML library has been configured toconvert between Alpino XML format and PMLtransparently on-the-fly using two simple XSLTstylesheets created for this purpose.Like some other annotation tools, for exampleDepAnn (Kakkonen, 2006), TrEd provides meansfor comparing two (or more) annotations and vi-675sually marking the differences.
This functionalityis currently provided by macros tailored especiallyfor the PDT annotations.
Modifying these macrosfor specific needs of other tree-based annotationsshould be easy.4 Automated processingThe same code-base that runs TrEd (except for theGUI) is used in a command-line tool for automatedprocessing of the annotated data called BTrEd.This tool allows one to search, transform or mod-ify the data by means of small programs written inPerl known from TrEd as macros.
Given a list offiles, the tool opens the files one after another andapplies a given macro on each of them (or, if onechooses, to each tree or each node).
With the pow-erful API of TrEd and the expressiveness of thePerl programming language at hand, one can veryeasy prepare scripts that gather information, createreports, or automate some parts of the annotationprocess; in some cases the script can be as short tofit on the command-line.It is often the case that one has to process alarge amount of data repeatedly with one or morescripts.
To avoid the need of reading the datainto memory upon each execution, BTrEd is aug-mented by a client-server interface and a clienttool called NTrEd.
NTrEd, given a list of com-puter hostnames or IP addresses and a list of files,starts remotely on each of the computers a server-mode instance of BTrEd and distributes the sup-plied data among these servers (either equally oraccording to CPU load).
Since only file-names aretransferred in the communication, some form ofshared data storage is assumed.
The BTrEd serversread their respective share of the treebank, keep itin their RAM and await client connections.
Oncethe servers are started in this way, one can pass ascript to NTrEd as one would do with BTrEd; thetool forwards the script to the servers and collect-ing the results, outputs them in the same way asa stand-alone BTrEd would.
If the script modifiesthe data, the user can send a request to the serversto either save the changed files or reload them, dis-carding all modifications.
Security of NTrEd isachieved by means of SHA-based authentication(completely transparent to the user) and, option-ally, by SSH tunneling.Since one machine can run multiple instances ofBTrEd server, each user of a computer cluster canrun its own set of BTrEd servers without interfer-ing with other users.
Concurrent work of severalusers on the same data is supported by TrEd andBTrEd by a simple system of file locks, similar tothat of GNU Emacs.This kind of processing was exploited heav-ily during the post-annotation checking phases ofPDT 2.0 production (?St?ep?anek, 2006).
Employinga cluster consisting from about ten computers, atypical consistency-checking script processed thewhole amount of PDT 2.0 (1.5 million analyticalnodes and 700 thousand tectogrammatical nodes)in just a few seconds.
This was particularly help-ful for rapid prototyping or testing hypotheses andit accelerated the whole process enormously.The NTrEd system, keeping the data in RAM ofthe servers, is sufficient for small to medium-sizedcorpora.
For huge corpora in scale of terabytes itmay not be the case.
For processing such hugeamounts of data, another tool called JTrEd was re-cently added to the framework.
JTrEd is a wrapperscript that simplifies distribution of BTrEd tasksover a computer cluster controlled by the Sun GridEngine (SGE).The BTrEd machinery is not intended just forsmall scripts.
A project building a full MT en-gine on top of this framework is in progress(?Zabokrtsk?y et al, 2008).5 Data-base driven query engineOne of the reasons for which tree-banks are cre-ated is that they cover and capture a representa-tive number of syntactic constructions of the par-ticular language.
However, to be able to identifythem effectively, one has to employ some query-ing system, consisting of a sufficiently expressivequery language and an engine that can search thetreebank and present the user with all occurrencesmatching the constraints of the query.While for complex queries the tools describedin the previous section serve well to users withbasic programming skills,?every-day?
querying bylinguistic public requires a more accessible user-interface.
In this section we describe a workingprototype of a new query engine and its user inter-face, based on the data representation and tools de-scribed in the preceding sections.
First, however,we briefly review some existing solutions.For searching over PDT a tool called Net-Graph (M?
?rovsk?y, 2006) is traditionally used.
Thistool?s graphical interface allows the users to for-mulate their queries in a very natural way, namely676as trees whose structures correspond to the struc-tures of the desired search results (although onemay specify, for example, that an edge in the querytree should actually match a path in the result tree).Each node in the query tree can carry a set of at-tributes that match or otherwise constrain the at-tributes of the corresponding node in the resulttree.
The query can further put some cardinalityconstraints on the matching nodes; these are for-mulated using a special set of labels on the querytree.
A great advantage of NetGraph is its web-enabled user interface (Java applet).
The under-lying query engine is written in C, and althoughrelatively simplistic (i.e.
no indexing or planningtechniques are used), for PDT-sized corpus it of-fers reasonable speed for the interactive use.
Cer-tain disadvantages of the NetGraph system in ourview are: lack of support for querying relationsbetween two or more trees; no support for multi-layered annotations; limited means of expressingattribute constraints and their boolean combina-tions; restriction to a limited legacy data format.Probably the best-known query languages fortree structures nowadays are XPath and XQuery,promoted by (and in case of the latter bound to)the XML technology.
The advantage of thesequery languages is that there are several implemen-tations to choose from.
Beside searching, sometools (e.g.
XSH2 (Pajas, 2005)) provide means forXPath-based data modification.
For these reasons,XPath searches over XML-encoded treebank dataare promoted (Bouma and Kloosterman, 2002).The disadvantage is, however, that being restrictedto the XML data model, users of such tools haveto query over a particular XML encoding of thedata which often in some way or other obscuresthe actual annotation schema and relations the an-notation represents.
Besides, it can be argued thatXPath alone does not provide sufficient expres-siveness for typical linguistic queries.As a remedy for the last deficiency, Steven Birdet al (Bird et al, 2006) proposed a concise querylanguage named LPath, which, while extendingcore XPath, was designed with the needs of lin-guistic queries in mind.
Their query system ispowered by a relational database in which thequeries are translated from LPath to SQL.
To en-able efficient evaluation of constraints on horizon-tal and vertical relationships between two nodesof a tree by the relational database, the databaserepresentation of the trees uses a simple labelingscheme which labels each node with several inte-gers so that the relationship constraints translate inSQL to simple comparisons of the respective inte-ger labels.It has been shown (Lai and Bird, 2005) that fur-ther extension to the LPath language, known asLPath+, is already 1st-order complete.
It should,however, be noted that 1st-order completeness haslittle to do with the practical expressiveness of thelanguage; certain queries, easily expressed in 1st-order logic, only translate to LPath+ at the cost ofcombinatorial explosion in the size of the query.For example, like XPath, the only way LPath+ of-fers to match two non-identical sibling nodes isto reach one by the child axis and the other us-ing the following-sibling or preceding-sibling axesfrom the first one; thus for a query with n siblingnodes whose constraints do not necessarily implyinequality and which can appear in the tree in ar-bitrary order, the LPath+ query must, in general,enumerate a disjunction of all the n!
possible per-mutations.
This may not be a problem when query-ing over English treebanks, but is a serious handi-cap for querying over treebanks for languages withfree word-order.There are several other tools for querying overtreebanks, we are aware at least of TIGERSearch(Lezius, 2002) for annotations in the TigerXMLformat, and TGrep2 (Rohde, 2001) for Penn Tree-bank and similar, which we shall not describe herein detail as they are well known.For the PML-based annotation system presentedin this paper, we have developed a prototype of anew querying system, referred to, just for the pur-poses of this paper, as PML Tree Query (PML-TQ).
The new system attempts to equal the qual-ities of the above mentioned systems and addition-ally provide?
a query language with sufficient expressive-ness yet without complex formalisms?
unified treatment of structural and non-structural, inter- and cross-layer relationships?
basic reporting capabilities (computing num-ber or distribution of occurrences, etc.)?
a graphical query editor built into TrEd?
a scriptable and extensible interfaceAt the current stage, PML-TQ provides a proto-type query language supporting arbitrary logical677conditions on attributes of nodes and their inter-and cross-layer relations, optional nodes, and ba-sic cardinality constraints.
A result of an evalua-tion of a PML-TQ can be either a set of matches,each match being a set of nodes in the treebankcorresponding to the nodes in the query, or a re-port with some information computed from thesenode sets.
The reporting capabilities of PML-TQallow one to perform various aggregations on theresult node sets and compute statistics over theaggregated groups.
Thus, one may easily formu-late queries such as ?what is the maximum, mini-mum, and average depth of a tree in the treebank?,?what preposition forms correspond on the surfacelayer to tectogrammatical nodes with the functorDIR3 and what is their distribution?, ?what is themost common functor for a child node of a nodewith functor PRED?, ?what is the joint distributionof functors for nodes in the parent-child relation?,etc.In the graphical representation of PML-TQ, re-lations between nodes are represented by arrows.Each PML-TQ query forms a tree or forest whoseedges represent basic relations between nodes andpossibly nesting of subqueries and whose nodescan be interconnected by additional arrows repre-senting further relations.a-layer t-layer?
?xx??ffa-layer t-layerObj?
?a/lex.rfooAuxP??a/lex.rfyya/aux.rfooObj?Figure 4: Examples of cross-layer queries in PML-TQ.
Query on the left finds dependency that gotreversed on the PDT tectogrammatical layer com-pared to the analytical layer; the query on the rightfinds tectogrammatical nodes corresponding to ananalytical object governing a prepositional object.Apart from the graphical representation, PML-TQ queries can be formulated in a textual formwith syntax resembling XPath (but substantiallymore expressive).
A query is parsed from this syn-tax into a syntactic tree encoded in PML; in thisrepresentation the queries can be stored, visual-ized, and graphically manipulated in TrEd.There are presently two engines that can eval-uate PML-TQ queries.
To utilize the modernRDBMS technology for performance and scalabil-ity, we have created a translator of PML-TQ toSQL.
One can thus query over a static treebankstored in a database (for encoding tree-structuresinto database tables, we have adopted a label-ing system similar to that described in (Bird etal., 2006)).
For querying over data that change(e.g.
a file currently open in TrEd or a bunch offiles with annotation in progress), we have imple-mented a simple, yet still relatively fast, evaluatorin Perl with a basic planner that can perform PML-TQ searches over PML data sequentially in eitherTrEd, BTrEd, NTrEd, or JTrEd.Having two engines behind our query interfacein TrEd has several benefits.
The annotators willbe able to perform identical queries over a cor-pus stored in a remote SQL database as well as tosearch in their own locally stored data.
The devel-opers of scripts for BTrEd will be able to formulateparts of their scripts briefly as PML-TQ querieswhose correctness they will be able to verify in-dependently on a treebank using the SQL backendusing an interactive environment.The SQL-based execution system has currentlytwo database backends for feature and perfor-mance comparison: Oracle Express 10g and Post-gres SQL.
We use Perl DBI modules to intercon-nect these backends with the TrEd toolkit.Figure 5: PML-TQ interface in TrEd.
Top: thequery as text, bottom left the query tree, bottomright a matching tree from PDT 2.0.The search results can be presented in TrEd inone of several ways.
Results of queries that makeuse of the report-generating facilities of PML-TQare displayed simply as tables in a text window.Most PML-TQ queries, however, return matchingnodes or trees.
To display them, TrEd retrieves678corresponding URLs and node positions from thedatabase and reads the actual data from the PMLfiles that must currently be accessible locally or re-motely via HTTP, FTP or SSH.
Since there are sit-uations when the original data cannot be accessedin this way, we are working on a solution thatwould allow TrEd to fetch and reconstruct the treesdirectly from the database.For populating the database system with tree-banks, we have developed a tool that can transferarbitrary PML-encoded data into a set of databasetables suitable for PML-TQ querying.
The in-formation about available inter-layer and cross-layer relations is automatically extracted from thePML schema and can be further adjusted by a fewcommand-line parameters.We have evaluated our database search engineusing queries obtained by several means.
We hadthe luck that the developer of NetGraph kindly pro-vided us with all queries collected from real Net-Graph users over the past few years in the serverlogs.
We thus obtained almost 9000 queries forthe analytical layer and about 5000 queries for thetectogrammatical layer of PDT 2.0.
By translat-ing them to PML-TQ with a simple Perl script,we obtained a large collection for testing the ba-sic functionality and performance of our system.To that we added a set of queries that test moreadvanced PML-TQ features and, for comparison,several queries analogous to the LPath query ex-amples given in (Bird et al, 2006).When we first run our complete query collec-tion on the Oracle database with 1.5 million nodesand about 88 thousand trees from the analyticallayer of PDT, we were surprised to see that outof 8188 queries, 8102 computes in a fraction ofsecond, further 33 in less then 2 seconds, further36 in less than 10 seconds, 14 in less than 20 sec-onds and only 5 in more than one minute.
Fourof these, however, took extremely long time tocompute (from hours to days).
We observed thatall these time-consuming queries were rather simi-lar: they imposed either no or too week constraintson the nodes and sometimes the query tree hada rather large number of auto-morphisms (therewas a query consisting of a node with six iden-tical child-nodes none of which carried any con-straints).
We then found a tree in our data setthat contained a node with 85 children.
This givesroughly 1012solutions to the query with six sib-lings on this tree alone.In some cases the queries can be rewritten us-ing cardinality constraints (?find all nodes with atleast 6 children?
), which avoids the combinatorialexplosion.
Since we felt this may not always bepossible, we also tried to remove from our dataset al trees with more than 20 siblings (44 treesfrom 70K) that turned out to be mostly TV listingsanyway.
After that, the performance for the fourof the problematic queries improved dramatically:first 100 matches were found in a few seconds andfist 106matches in less than 10 minutes.Although we have modified the query compilerto suggest cardinality constraints were it seemsappropriate and to automatically eliminate sometypes of automorphisms on the query tree by im-posing a strict ordering on the permutable querynodes, we think it is neither possible to completelysecure the query system against time-exhaustivequeries nor to reliably detect such queries auto-matically.
The querying interface therefore givesthe users the option to select a reasonable maxi-mum number of results and allows them to cancelthe query evaluation at any time.6 ConclusionOver last few years our annotation frameworkmade a considerable leap, from a simple annota-tion tool to a feature-rich system with several inter-operating components.
The complete frameworkis publicly available, either under the General Pub-lic License License (GPL), the Perl Artistic Li-cense or other GPL-compatible free license.
Apublic release of the tree query interface describedin the previous section is scheduled for mid to endof 2008.7 AcknowledgmentThis paper as well as the development of theframework is supported by the grant Informa-tion Society of GA AV?CR under contract1ET101120503.ReferencesBamman, David and Gregory Crane.
2006.
The designand use of a Latin dependency treebank.
In Proceed-ings of the Fifth International Workshop on Tree-banks and Linguistic Theories (TLT 2006), pages67?78, Prague.Bird, Steven, Yi Chen, Susan B. Davidson, HaejoongLee, and Yifeng Zheng.
2006.
Designing and eval-uating an XPath dialect for linguistic queries.
In679ICDE ?06: Proceedings of the 22nd InternationalConference on Data Engineering, page 52, Washing-ton, DC, USA.
IEEE Computer Society.Bouma, Gosse and Geert Kloosterman.
2002.
Query-ing dependency treebanks in XML.
In Proceedingsof the Third international conference on LanguageResources and Evaluation (LREC), Gran Canaria.Buchholz, Sabine and Erwin Marsi.
2006.
CoNLL-Xshared task on multilingual dependency parsing.
InProceedings CoNLL-X.Chu-Ren, Huang, Keh-Jiann Chen, Feng-Yi Chen, Keh-Jiann Chen, Zhao-Ming Gao, and Kuang-Yu Chen.2000.
Sinica treebank: Design criteria, annotationguidelines, and on-line interface.
In Proceedings of2nd Chinese Language Processing Workshop (Heldin conjunction with ACL-2000), pages 29?37, HongKong, October 7.Declerck, Thierry.
2006.
Synaf: Towards a stan-dard for syntactic annotation.
In Proceedings ofthe 5th International Conference on Language Re-sources and Evaluation (LREC 2006), pages 209?232.D?zeroski, Sa?so, Toma?z Erjavec, Nina Ledinek, Petr Pa-jas, Zden?ek?Zabokrtsk?y, and Andreja?Zele.
2006.Towards a slovene dependency treebank.
In Pro-ceedings of the 5th International Conference onLanguage Resources and Evaluation (LREC 2006),pages 1388?1391.Haji?c, Jan, Barbora Vidov?a-Hladk?a, and Petr Pajas.2001.
The Prague Dependency Treebank: Anno-tation Structure and Support.
In Proceedings ofthe IRCS Workshop on Linguistic Databases, pages105?114, Philadelphia, USA.
University of Pennsyl-vania.Haji?c, Jan et al 2006.
The Prague Dependency Tree-bank 2.0.
CD-ROM.
CAT: LDC2006T01.Ide, Nancy and R. Romary.
2003.
Encoding syntacticannotation.
In Abill?e, A., editor, Building and UsingParsed Corpora.
Kluwer, Dordrecht.Kakkonen, Tuomo.
2006.
Depann - an annotation toolfor dependency treebanks.
In Proceedings of the11th ESSLLI Student Session at the 18th EuropeanSummer School in Logic, Language and Information,pages 214?225, Malaga, Spain.Lai, Catherine and Steven Bird.
2005.
LPath+: A first-order complete language for linguistic tree query.
InProceedings of the 19th Pacific Asia Conference onLanguage (PACLIC), Information and Computation,pages 1?12, Taipei, Taiwan.
Academia Sinica.Lezius, Wolfgang.
2002.
Ein Suchwerkzeug f?ur syn-taktisch annotierte Textkorpora.
Ph.D. thesis, IMS,University of Stuttgart, December.
Arbeitspapieredes Instituts f?ur Maschinelle Sprachverarbeitung(AIMS), volume 8, number 4.Marcus, Mitchell P., Grace Kim, Mary AnnMarcinkiewicz, Robert MacIntyre, Ann Bies,Mark Ferguson, Karen Katz, and Britta Schasberger.1994.
The penn treebank: Annotating predicateargument structure.
In HLT.
Morgan Kaufmann.Mengel, A. and W. Lezius.
2000.
An XML-based rep-resentation format for syntactically annotated cor-pora.M?
?rovsk?y, Ji?r??.
2006.
Netgraph: A tool for search-ing in prague dependency treebank 2.0.
In Haji?c,Jan and Joakim Nivre, editors, Proceedings of theFifth Workshop on Treebanks and Linguistic Theo-ries (TLT), pages 211?222, Prague, Czech Republic.Pajas, Petr and Jan?St?ep?anek.
2006.
XML-based repre-sentation of multi-layered annotation in the PDT 2.0.In Proceedings of the LREC Workshop on Mergingand Layering Linguistic Information (LREC 2006),pages 40?47.Pajas, Petr.
2005.
XSH - XML Editing Shell (an intro-duction).
In Proceedings of XMLPrague conferenceon XML 2005, pages 69?78, Prague.Prokopidis, P, E Desypri, M Koutsombogera, H Papa-georgiou, and S Piperidis.
2005.
Theoretical andpractical issues in the construction of a greek depen-dency treebank.
In In Proc.
of the 4th Workshop onTreebanks and Linguistic Theories (TLT, pages 149?160.Rohde, D. 2001.
TGrep2 the next-generation searchengine for parse trees.
http://tedlab.mit.edu/ dr/-Tgrep2/.Smr?z, Otakar and Petr Pajas.
2004.
MorphoTreesof Arabic and Their Annotation in the TrEd Envi-ronment.
In Nikkhou, Mahtab, editor, Proceedingsof the NEMLAR International Conference on Ara-bic Language Resources and Tools, pages 38?41,Cairo.
ELDA.
?St?ep?anek, Jan. 2006.
Post-annotation checking ofprague dependency treebank 2.0 data.
In Proceed-ings of the 9th International Conference, TSD 2006,number 4188 in Lecture Notes In Computer Science,pages 277?284.
Springer-Verlag Berlin Heidelberg.Tadi?c, Marko.
2007.
Building the croatian dependencytreebank: the initial stages.
In Contemporary Lin-guistics, volume 63, pages 85?92.Trapman, Jantine and Paola Monachesi.
2006.
Manualfor the.
annotation of semantic roles in D-Coi.
Tech-nical report, University of Utrecht.van der Beek, Leonoor, Gosse Bouma, Robert Malouf,and Gertjan van Noord.
2002.
The alpino depen-dency treebank.
In Computational Linguistics in theNetherlands CLIN 2001, Rodopi.
?Zabokrtsk?y, Zden?ek, Jan Pt?a?cek, and Petr Pajas.
2008.TectoMT: Highly modular hybrid MT system withtectogramatics used as transfer layer.
(To appear).680
