Proceedings of the Third Workshop on Statistical Machine Translation, pages 111?114,Columbus, Ohio, USA, June 2008. c?2008 Association for Computational LinguisticsThe MetaMorpho translation systemAttila Nov?k, L?szl?
Tihanyi and G?bor Pr?sz?kyMorphoLogicOrb?nhegyi ?t 5, Budapest 1126, Hungary{novak,tihanyi,proszeky}@morphologic.huAbstractIn this article, we present MetaMorpho, a rulebased machine translation system that wasused to create MorphoLogic?s submission tothe WMT08 shared Hungarian to Englishtranslation task.
The architecture of Meta-Morpho does not fit easily into traditionalcategories of rule based systems: the buildingblocks of its grammar are pairs of rules thatdescribe source and target language structuresin a parallel fashion and translated structuresare created while parsing the input.1 IntroductionThree rule-based approaches to MT are tradition-ally distinguished: direct, interlingua and transfer.The direct method uses a primitive one-stage proc-ess in which words in the source language are re-placed with words in the target language and thensome rearrangement is done.
The main idea behindthe interlingua method is that the analysis of anysource language should result in a language-independent representation.
The target language isthen generated from that language-neutral repre-sentation.
The transfer method first parses the sen-tence of the source language.
It then applies rulesthat map the lexical and grammatical segments ofthe source sentence to a representation in the targetlanguage.The MetaMorpho machine translation system de-veloped at MorphoLogic (Pr?sz?ky and Tihanyi,2002), cannot be directly classified in either of theabove categories, although it has the most in com-mon with the transfer type architecture.2 Translation via immediate transferIn the MetaMorpho system, both productiverules of grammar and lexical entries are stored inthe form of patterns, which are like context-freerules enriched with features.
Patterns may containmore-or-less underspecified slots, ranging fromgeneral productive rules of grammar through more-or-less idiomatic phrases to fully lexicalized items.The majority of the patterns (a couple of hundredsof thousands in the case of our English grammar)represent partially lexicalized items.The grammar operates with pairs of patternsthat consist of one source pattern used during bot-tom-up parsing and one or more target patterns thatare applied during top-down generation of thetranslation.
While traditional transfer and interlin-gua based systems consist of separate parsing andgenerating rules, in a MetaMorpho grammar, eachparsing rule has its associated generating counter-part.
The translation of the parsed structures is al-ready determined during parsing the sourcelanguage input.
The actual generation of the targetlanguage representations does not involve any ad-ditional transfer operations: target language struc-tures corresponding to substructures of the sourcelanguage parse tree are combined and the leaves ofthe resulting tree are interpreted by a morphologi-cal generator.
We call this solution ?immediatetransfer?
as it uses no separate transfer steps ortarget transformations.The idea behind this architecture has much incommon with the way semantic compositionalitywas formalized by Bach (1976) in the from of hisrule-to-rule hypothesis, stating that to every rule ofsyntax that combines constituents into a phrasepertains a corresponding rule of semantics that111combines the meanings of the constituents.
In thecase of phrases with compositional meaning, thepair of rules of syntax and semantics are of a gen-eral nature, while in the case of idioms, the pair ofrules is specific and arbitrary.
The architecture im-plemented in the MetaMorpho system is based onessentially the same idea, except that the represen-tation built during analysis of the input sentence isnot expressed in a formal language of some seman-tic representation but directly in the human targetlanguage of the translation system.3 System architectureThe analysis of the input is performed in threestages.
First the text to be translated is segmentedinto sentences, and each sentence is broken up intoa sequence of tokens.
This token sequence is theactual input of the parser.
Morphosyntactic annota-tion of the input word forms is performed by amorphological analyzer: it assigns morphosyntacticattribute vectors to word forms.
We use the Humormorphological system (Pr?sz?ky and Kis, 1999;Pr?sz?ky and Nov?k, 2005) that performs an item-and-arrangement style morphological analysis.Morphological synthesis of the target languageword forms is performed by the same morphologi-cal engine.The system also accepts unknown elements:they are treated as strings to be inflected at the tar-get side.
The (potentially ambiguous) output of themorphological analyzer is fed into the syntacticparser called Moose (Pr?sz?ky, Tihanyi and Ugray,2004), which analyzes this input sequence usingthe source language patterns and if it is recognizedas a correct sentence, comes up with one or moreroot symbols on the source side.Every terminal and non-terminal symbol in thesyntactic tree under construction has a set of fea-tures.
The number of features is normally up to afew dozen, depending on the category.
These fea-tures can either take their values from a finite set ofsymbolic items (e.g., values of case can be INS,ACC, DAT, etc.
), or represent a string (e.g.,lex="approach", the lexical form of a token).The formalism does not contain embedded featurestructures.
It is important to note that no structuralor semantic information is amassed in the featuresof symbols: the interpretation of the input is con-tained in the syntactic tree itself, and not in the fea-tures of the node on the topmost level.
Features areused to express constraints on the applicability ofpatterns and to store morphosyntactic valence andlexical information concerning the parsed input.More specific patterns (e.g.
approach to) canoverride more general ones (e.g.
approach), in thatcase subtrees containing symbols that were createdby the general pattern are deleted.
Every symbolthat is created and is not eliminated by an overrid-ing pattern is retained even if it does not form partof a correct sentence's syntactic tree.
Each patterncan explicitly override other rules: if the overridingrule covers a specific range of the input, it blocksthe overridden ones over the same range.
Thismethod can be used to eliminate spurious ambigui-ties early during analysis.When the whole input is processed and no ap-plicable patterns remain, translation is generated ina top-down fashion by combining the target struc-tures corresponding to the source patterns consti-tuting the source language parse tree.A source language pattern may have more thanone associated target pattern.
The selection of thetarget structure to apply relies on constraints on theactual values of features in the source pattern: thefirst target pattern whose conditions are satisfied isused for target structure generation.
To handlecomplicated word-order changes, the target struc-ture may need rearrangement of its elements withinthe scope of a single node and its children.
There isanother technique that can be used to handle wordorder differences between the source and the targetlanguage.
A pointer to a subtree can be stored in afeature when applying a rule at parse time, andbecause this feature?s value can percolate up theparse-tree and down the target tree, just like anyother feature, a phrase swallowed somewhere inthe source side can be expanded at a different loca-tion in the target tree.
This technique can be usedto handle both systematic word order differences(such as the different but fixed order of constitu-ents in possessive constructions: possession of pos-sessor in English versus possessor possession +possessive suffix in Hungarian) and accidental ones(such as the fixed order of subject verb and objectin English, versus the ?free?
order of these con-stituents in Hungarian1).Unlike in classical transfer-based systems,however, these rearrangement operations are al-1 In fact the order is determined by various factors other thangrammatical function.112ready determined during parsing the source lan-guage input.
During generation, the already deter-mined rearranged structures are simply spelled out.The morphosyntactic feature vectors on the termi-nal level of the generated tree are interpreted bythe morphological generator that synthesizes thecorresponding target language word forms.The morphological generator is not a simple in-verse of the corresponding analyzer.
It acceptsmany alternative equivalent morphological de-scriptions of each word form it can generate besidethe one that the corresponding analyzer outputs.4 The rule databaseThe rules used by the parser explicitly containall the features of the daughter nodes to check, allthe features to percolate to the mother node, all thefeatures to set in the corresponding target struc-tures and those to be checked on the source lan-guage structure to decide on the applicability of atarget structure.
The fact that all this redundantinformation is present in the run-time rule databasemakes the operation of the parser efficient in termsof speed.
However, it would be very difficult forhumans to create and maintain the rule database inthis redundant format.There is a high level version of the language:although it is not really different in terms of itssyntax from the low-level one, it does not requiredefault values and default correspondences to beexplicitly listed.
The rule database is maintainedusing this high level formalism.
There is a ruleconverter for each language pair that extends thehigh-level rules with default information and mayalso create transformed rules (such as the passiveversion of verbal subcategorization frames) creat-ing the rule database used by the parser.Rule conversion is also necessary because inorder to be able to parse a free word order lan-guage like Hungarian with a parser that uses con-text free rules, you need to use run time rules thatessentially differ in the way they operate fromwhat would be suggested by the rules they are de-rived from in the high level database.
In Hungar-ian, arguments of a predicate may appear in manydifferent orders in actual sentences and they alsofreely mix with sentence level adjuncts.
Thismeans that a verbal argument structure of the highlevel rule database with its normal context free ruleinterpretation would only cover a fraction of itsreal world realizations.
Rule conversion effectivelyhandles this problem by converting rules describ-ing lexical items with argument structures ex-pressed using a context free rule formalism intorun time rules that do not actually combine con-stituents, but only check the saturation of valencyframes.
Constituents are combined by other moregeneric rules that take care of saturating the argu-ment slots.
This means that while the high leveland the run time rules have a similar syntax, thesemantics of some high level rules may be verydifferent from similar rules in the low level ruledatabase.5 Handling sentences with no full parseThe system must not break down if the inputsentence happens not to have a full parse (this in-evitably happens in the case of real life texts).
Inthat case, it reverts to using a heuristic process thatconstructs an output by combining the output of aselected set of partial structures covering the wholesentence stored during parsing the input.
In theMetaMorpho terminology, this is called a ?mosaictranslation?.
Mosaic translations are usually subop-timal, because in the absence of a full parse somestructural information such as agreement is usuallylost.
There is much to improve on the current algo-rithm used to create mosaic translations: e.g.
itdoes not currently utilize a statistical model of thetarget language, which has a negative effect on thefluency of the output.
Augmenting the system withsuch a component would probably improve its per-formance considerably.6 Motivation for the MetaMorpho archi-tectureAn obvious drawback of the architecture de-scribed above compared to the interlingua andtransfer based systems is that the grammar compo-nents of the system cannot be simply reused tobuild translation systems to new target languageswithout a major revision of the grammar.
While ina classical transfer based system, the source lan-guage grammar may cover phenomena that thetransfer component does not cover, in the Meta-Morpho architecture, this is not possible.
In atransfer based system, there is a relatively cheaperway to handle coverage issues partially by aug-menting only the source grammar (and postponing113creation of the corresponding transfer rules).
Thisis not an option in the MetaMorpho architecture.The main motivation for this system architec-ture was that it makes it possible to integrate ma-chine translation and translation memories in anatural way and to make the system easily extensi-ble by the user.
There is a grammar writer?s work-bench component of MetaMorpho called RuleBuilder.
This makes it possible for users to addnew, lexical or even syntactic patterns to thegrammar in a controlled manner without the needto recompile the rest, using an SQL database foruser added entries.
The technology used in Rule-Builder can also be applied to create a specialcombination of the MetaMorpho machine transla-tion tool and translation memories (Hod?sz,Gr?bler and Kis 2004).Moreover, existing bilingual lexical databases(dictionaries of idioms and collocations) are rela-tively easy to convert to the high level rule formatof the system.
The bulk of the grammar of the sys-tem was created based on such resources.
Anotherrationale for developing language pair specificgrammars directly is that this way distinctions inthe grammar of the source language not relevantfor the translation to the target language at handneed not be addressed.7 Performance in the translation taskDuring development of the system and its grammarcomponents, regression testing has been performedusing a test set unknown to the developers measur-ing case insensitive BLEU with three human refer-ence translations.
Our usual test set for the systemtranslating from Hungarian to English contains 274sentences of newswire text.
We had never usedsingle reference BLEU before, because, althoughcreating multiple translations is expensive, singlereference BLEU is quite unreliable usually produc-ing very low scores especially if the target lan-guage is morphologically rich, like Hungarian.The current version of the MetaMorpho systemtranslating from Hungarian to English has a BLEUscore of 22.14 on our usual newswire test set withthree references.
Obtaining a BLEU score of 7.8 onthe WMT08 shared Hungarian to English transla-tion task test set was rather surprising, so wechecked single reference BLEU on our usual testset: the scores are 13.02, 14.15 and 16.83 with thethree reference translations respectively.In the end, we decided to submit our results to theWMT08 shared translation task in spite of the lowscore.
But we think, that these figures cast doubtson the quality of the texts and reference transla-tions in the test set, especially in cases where boththe English and the Hungarian text were translatedfrom a third language, so we think that the scoreson the WMT08 test set should be evaluated onlyrelative to other systems?
performance on the samedata and the same language pair.ReferencesEmmon Bach.
1976.
An extension of classical transfor-mational grammar.
In Saenz (ed.)
Problems of Lin-guistic Metatheory: Proceedings of the 1976Conference, 183?224.
East Lansing, MI: MichiganState University.G?bor Hod?sz, Tam?s Gr?bler and Bal?zs Kis.
2004.Translation memory as a robust example-based trans-lation system.
In Hutchins (ed.
), 82?89.John Hutchins (ed.)
Broadening horizons of machinetranslation and its applications.
Proceedings of the9th EAMT Workshop, 26?27 April 2004.
La Val-letta: Foundation for International Studies.G?bor Pr?sz?ky and Bal?zs Kis.
1999.
Agglutinativeand other (highly) inflectional languages.
In RobertDale & Kenneth W. Church (eds.)
Proceedings of the37th Annual Meeting of the Association for Computa-tional Linguistics, 261?268.
Morristown, NJ: Asso-ciation for Computational Linguistics.G?bor Pr?sz?ky and Attila Nov?k.
2005.
ComputationalMorphologies for Small Uralic Languages.
In: A.Arppe, L. Carlson, K. Lind?n, J. Piitulainen, M.Suominen, M. Vainio, H. Westerlund, A.
Yli-Jyr?(eds.
): Inquiries into Words, Constraints and Con-texts Festschrift in the Honour of Kimmo Kosken-niemi on his 60th Birthday, 116?125.
GummerusPrinting, Saarij?rvi/CSLI Publications, Stanford.G?bor Pr?sz?ky and L?szl?
Tihanyi.
2002 MetaMor-pho: A Pattern-Based Machine Translation System.In: Proceedings of the 24th 'Translating and theComputer' Conference, 19?24.
ASLIB, London,United Kingdom.G?bor Pr?sz?ky, L?szl?
Tihanyi and G?bor Ugray.2004.
Moose: A robust high-performance parser andgenerator.
In Hutchins (ed.
), 138?142.114
