I. IntroductionA study of formal properties of different styles of formalgrammars is of great interest because each style (i.e., formal char-acter of rules) is well suited for characterizing certain aspects ofnatural language structure and is awkward for characterizing certainother aspects.
The awkwardness can be due to either an inherentdifficulty in characterizing a certain aspect (e.g., the characteriza-tion of the notion of the 'head' of a constituent in a PSG) or anunnecessary complexity in characterizing a certain aspect (e.g., thestatements concerning the relational aspects in a PSG) or actually acounterintuitive characterization (e.g., this often happens in a PSG,especiai\].7 in the context of transformational gra~nnars, because aPSG allows an 'uncontrolled' introduction of new 'nonterminals' ).This naturally suggests a study of formal gramnars of mixed types inorder to take advantage of different styles.
* Thus we try to see howfar we can succeed in setting up a class of granmmrs which has nomore power than necessary and which also can characterize differentaspects of natural language structure in a natural way.The class of grammars studied here and in Joshi (1969) have beenmotivated by the type of granmmr proposed by Harris (1962, 1968).These gra,~ars also arose out of an attempt to formalize certain aspectsof the type of grammar considered by Joshi (1966) where it was usedfor defining structures for the purpose of defining transformationsand ultimately for constructing a transformational decomposition pro-cedttre.First, in Section 2, we will introduce a new style of ?formalgrammars called String Adjunct Grammars (AG).
The only purpose ofSection 2 is to state some of the basic concepts and results concerningAG's (including a brief discussion of their linguistic relevance) whichare needed for the presentation of the material in Section 3 (for adetailed treatment of AG's, see Joshi, Kosaraju, Yamada (1968)).In Section 3, we will introduce a class of grammars called Mixed StringAdjunct Gra,~ars (~G) which use two different types of rules - adjunc-tion rules and a special type of rewrite rules.
After studying someproperties of ~AG's we introduce Generation Schemes G s = (G, A).
A GS maps strings in the language, L(G), corresponding to an MAG, G, intostrings in the language, L(G'), corresponding to another MAG, G'.
* See also Robinson (1968) for a similarly motivated work.- i -Strings in L(G) and ~(G') are both 'well-formed'.
In Section 3.~we discuss briefly the linguistic relevance of the material in theearlier sections.
A detailed development of the various ideas intro-duced here will be reported in Joshi (1969).Fig.
A. at the end summarizes the hierarchy of some subclassesof AL's and MAL's in relation to the phrase structure hierarchy.-2 -2.
String Adjunct Granmmrs (AG)Briefly an AG consists of a finite alphabet, a finite set ofstrings on this alphabet and a finite set of adJunction rules whichstate how certain adjunct strings are adjoined to certain hoststrings.
The corresponding language called a String Adjunct Language(AL) is then defined as the set of all strings derived from a cer-tain specified subset of the given set of finite strings.
The rulesin an AG have a considerably different formal character as comparedto the 'rewrite rule' in a general phrase structure grmmmar (PSG).The language hierarchies of AG's and PSG's cut across in manyinteresting ways.2 .I Local String Ad,iunct GrammarWe will define a local string adjunct grammar (LAG) as follows.Let A = ~al, a2, ..., am) be a finite alphabet.
Let Z be a finiteset of finite strings on A and let E c C E be a distinguished set ofstrings on A.
We will call Z the set of basic strings and F e theset of basic center strings.
We will define a local left ad,~unctionrule, ~i~k as a 3-tuple (ai, ~ ,  ?k) where a i e Z, a i ?
E and ~k is ap -~t  0f~ad,iunction in a i. WeUwill call a i as the (~esic) host of~iJk and aj as the (basic) ~ of ~ijk" The point of ad-j~ctionof Ai~k'k refers to the point of adjunction which is to the left oft~ekth ~ymbol of the host a i where we associate with each stringai ?
~, ~i = ail ai2 ... ani ~ aij e A, and J = i~ 2, ...~ ni~ 2n ipoints of adjunction, one to the left and one to the right of eacha i..
Note that a i # 8 ~ the null string.
A local right adjunctionrule ri~k is similarly defined as a 3-tuple ~i ,  oJ, rk), ~i e ~,~d ?
~ ~ rk is the point of adjunction of rij~o and.
refers to thep6int of adjunction to the right of the kth symbol in the host ~i.In general, (~i, ~ ~k ) will denote a local ad,iunctio~rule , uij k-If ui.ik is a local~left ad~unction rule then ~k = ~k and if Uijk~isa loc~l right adjunction rule then ~k = rk" Finally, we have thef on~ngDefinition 2.1.1 A local string adjunct grammar (LAG), G is a 6-tuple, G = (A, ~, ~c' ~ '  ~a' J) where A is the alphabet, ~ is theset of basic strings, L~ is the set of basic center strings, ~h isthe set of basic host sErings, ~ is the sat of basic adjunct strings,and J is a finite set of local adjunction rules.
~ = ~uil(ui, uj,~k ) ?
J\]' ~a = ~ajl(~i' ~j' ~k ) e J}, and ~ = ~cU~4J~a .
FurtherZ c may contain ~ but ~ ~ Z h.-S -//Given J, S h and ~ are completely specified and S = ZcUSh~re.
Further the alphabet need not be explicitly stated.
Hence,unless otherwise necessary we will write G as a pair (Sc, J)instead of a 6-tuple as in the definitic~ above.Example 2.1.1 Let ~ = (~c, J) where ~c -- rabcl, andJ = {u I = (abc, pq, rl) , u 2 =.
(pq, pq, ~2)}" \[We will write uij kas Just u.
The indexing of u's in J is arbitrary and is merely forconvenience.\] Here Z c = rabc\], Z h = ~abe, pq}, re = fpq\], E ={abe, pq\].
Note that abe is a basic center string but pq is not.u 1 is a local right adjunction rule and t~ 2 is a local left adjunc-t~on rule.
Here A = ~a, b, c, p, q}.2.2 Local String Adjunct Language (LAL)The meaning of an adjunction rule, say, u = (ui, a i, ~k) isthat fr~n u i we can derive a new string by adjoining u~Vto the leftof the kth symbol in u i.
Thus, for example if u = (abe, t, ~2) wecan derive a string atbc.
However, in order to define the languageL(G) corresponding to a given LAG, Gjwe must first define how therules of adjunction are extended to derived (i.e.
non-basic) hoststrings and adjunct strings.
Here we will give an example toillustrate the main idea and c~it the precise definition (see Joshi,~)saraju, Yamada (1968)).Example 2.2.1 Consider the LAG, G,in Example 2.1.1.
P = ~abc,pq), Z c = {abe\], J = \[u 1 = (abe, pq, rl) , u 2 = (pq, pq, ~p)\].
Fromabe  by one application of u I we obtain apqbe.
We regard~he pointsof adjunction of apqbc to be the same as abc, i.e., the positions tothe left and right of the symbols a, b and c. This apqbc is a de-rived host and we can apply u I again, obtaining apqpqbc where thenewly adjoined pq is i,,,ediately to the right of a.Again, starting with pq, by one application of u 2 we obtain ppqq.Since pq is both a basic host and a basic adjunct (in the same rule,in this example), ppqq is a derived host as well as a derived adjunctand hence it can be used as a host or as an adjunct or both in therule u 2 .
This allows us to derive strings pppqqq, ppqpqq, ppqppqqq,etc.
Since all of these are derived fr~n pq they can be used asadjuncts in Ul, allowing us to derive apppqqqbc, appqpqqbc,appqppqqqbc, etc.
If we use apqbc as a host in Ul, we can also de-rive apppqqqpqbc, appqpqqpqbc, etc.
Thus we can derive, for example,f romthe  string abc ?
r c the strings apppqqqbc, appqpqqbc,apppqqqpqbc, apqpqbc, apqpqpppqqqbc, etc.
All these strings will beincluded in the language L(G) corresponding to G.Example 2.2.2 Let G = (E c, J), F~ = \[ab\],'J = ~u I = (ab, ab, rl) \].This gra~nar generates the language L(G) = ~ w / w is a string onA; "the number of a's in w" = "the number of b's in w" and for any-4 -\.initial proper substring of w, the number of a's is greater than thenumber of b's).
This language is context-free and is known to benon-linear (Schatzenberger (1961)).Remarks 2.2.1i.
In the generation of a string in L(G) we observe that oncea string is adjoined to a host then the adjunct string cannot receiveany further adjuncts.
In other words a string which is to become anadjunct string must acquire all its adjuncts prior to its being usedas an adjunct string.2.
Let w be a string in L(G) derived from some string ui ~ ~c"The generation of w does not begin, however, with the basic centerstring unless, of course, w is just a basic center string itself ora center string with adjuncts which themselves do not receive anyother adjuncts.
We have to start from the "innermost" adjunct(adjuncts) and work our way "inside out" and finally use the basicstring which is to become the center string of w.3.
During the generation if a host string receives two (or more)adjuncts then we have the two following situations.
If the two ad-juncts are adjoined at distinct points of adjunction of the host, thenclearly those adjuncts can be adjoined in any order.
However, if thetwo adjuncts are adjoined at the same point of adjunction of  the hostthe order is significant.
Let u I = (ai, oj, ~k ) and u 2 = (ci, am, ~k )be two rules.
Let ~k -- ~i for example.
If u I is used before u 2 thenwe obtain OjamOi; but if u~ is used before ul-then we obtain amajO i.In other words, the adjunct adjoined later in the derivation iscloser to the point of adjunction in the host (~6~which it was adjoined)than the adjunct adjoined earlier in the derivation.2.3 'Tree representation for a derivation in LAGLet G = (~c, J) be an LAG.
Let the rules in J be arbitrarilynumbered u_, u_, ...,u ?
The generation tree is constructed asfollows, l l )~ I f  u~ =n(oi3 oj, ~k ) is used in the derivation thenwe represent this as in Fig.
2.3.1a.
Here we have two labeled nodesaj and ?i and a directed branch from oj to ?i with the label u~: ~k"2~ Let a host oi receive more than one adjunct, say, ajl , oJ2''"'ejmat points of adjunction gk I'~ gk o'~ "''' gkm' i.e., we use rulesui~ = (oi' aj2, ~k ) ?
J, ~ = l, 2, ..., m. We represent this asin Fig.
2.3.1b.
Now, in view of Remark 2.2.1-3 we impose a right toleft ordering on the points of adjunction of a host and thus in effectdefine an equivalence relation on the set of derivations of a string-5 -f ,c,.
2.3 .1  ~.bq Pq(,I)(9):i I :  rz~:~ X~.
: r~t~t~) a-i>c ,~4 ,',, Ex~,~,,b, le.
3... 3. i .-6 -~ler';vo, 4;i'or~ o:in L(G).
The tree representation of a derivation with the aboveconventions will be called a ri6ht to left (r-~) tree representation.Note that the tree representation of a derivation of a string inL(G) is a rooted tree and the string labeling the root is in Ec"2 .
.1  Example = labc, Let G = (E c, J) be an LAG where Zc -- \[abc~, andj = KUl pq, r2) , u 2 = (abc, rs, r2) , u S = (pq, pq, rl) ,u~ =(abc, t, ~l ), ~ = (pq, t, ~)3.
The following is a string inL(G).
w = ttabrsppqptqqrspqcFig.
2.3.2 show an r-~ tree representation of a derivation of w.We have numbered the nodes for convenience.
Nodes l, 3, 5, 6, 7,8, and 9 are terminal nodes.
Node lO is the root node.The derived strings corresponding to the nodes of the tree inFig.
2.3.2 are as follows: 1. t; 2. ptq; 3.
Pq; 4. ppqptqq; 5.
Pq;6. rs; 7. rs; 8. t; 9. t; 10. w = ttabrsppqptqqrspqc.2.4Theorem 2.~.i Every LAL is a CFL (context free language).class of LAL's is properly contained in the class of CFL's.
(L = ~anbn I n ~ i\] is not an LAL.The2.5 Distributed Strin~ Adjunct Granmmr (DAG) and Lan6ua~e (DAL)We will generalize the local adjunction rule as follows.Definition 2 .~ A distributed ad~unction rule, dij k is a 3-tuple, (ai, (aj), ~k ) where a i ?
E; aj ?
E; (aj) denotes a specifiedsegmentation of aj; {k is an adjunction 'vector', ~kl, %, .
.
.
,  ~kn;Ek i's are the points of adjunction of ai," and ~k i = ~ki or rki ,1 ~ k i ~ m, k i ~ ki+l, sad if k i = ki+ 1 then ~ki = ~k i sad ~ki+ l- rki+l.The meaning of ~i-'k is that from the host oistring, say, ap, by adjoining the segments of aj,ajn at the points of adjunction ~kl, ~ ,  ..., ~knly.
That is, we 'distribute' the specified segments of a~ over a iat the points of adjunction ~,  ~,  ..., and ~k ; the j~h segmentnis adjoined at ~kj" The Condition on ~k prevents permutation ofthe segments.we can derive aJ2 " ' Jlof ai, respective--7 -The language L(G) corresponding to a given DAG, G, can bedefined by generalizing the definition in Section 2.2.
The mainidea is that when a derived string is segmented each segment containsall the adjuncts (and adjuncts of adjuncts etc.)
of all the symbolsin that segment.
The tree representation in Section 2.3 can also hegeneralized to DAG ' s.Example 3.1.1 Let G = (Z n, J) he a BAG where Z~ = \[abc}, and= {u l = Cabc, (p) (qr), r l~3) , u 2 = (pqr, (p) Cq~ (r), ~i~2~3) \].Here Z = \[abc, pqr}, andA = \[a, b, c, p, q, r}.
Note that in t hin u 1 and u 2 is not the same.
Thenn n~(G) - \ [ap  b 5 r ~ .
.
.q  r ?In i~0,for i = i, 2, ..., m; m ~ i}.Example 3.1.~ Some other DAL's are: LI = \[a~omln ~ 11,L, 2 = \[anbncnln ~ i}, L 3 = \[x xRI x ?
AA*, "~Rx = reversal of x},% = \[XXlX C AA*\], etc.Theorem 2.~.1" The class of LAL's is properly contained in theclass of DAL's.
Every DAL is a CSL (context sensitive laaguage).The clas~ of DAL's is properly contained in the class of CSL's.
(L = \[a n In ~ l} is a CSL but not a DAL).Theorem 2.~.i There are languages which are inherently ambiguousin the class of CFL's but which are unambiguous in the class of DAL's.
(Ex,=;le: ~.
-~ {a%Jckl i ,  j ,  k :.
i; i : j or j : k)2.6 String Adjunct Grammars with Null Symbols (AGN) andLanguageWe will now introduce a somewhat modified form of AG's (IAG'sor DAG's) called string adjuncts grammars with null symbols (AGN).The modification consists of allowing in the alphabet a very specialtype of "non terminal" symbols called "nul___!l symbols".
The main ideais to use the null symbols to tag the strings in Z.
The null sym-* It is possible to generalize the local adjunction rule in the fol-lowing manner also.
This generalization permits one to adjoin to thehost a set of local adjuncts simultaneously, i.e.
(ai, ajl , ~J2' "'"ajn , ~k ) where a i c Z, k = l, 2, ..., n, and ~k is the adjunction'vector' as before.
We will call these IAG's with simultaneous(Continued on Page 9).-8 -bols have no points of adjunction associated with them and they donot receive any adjuncts.
The null symbols are ulitmately erased(i.e., rewritten as a null string E ).Definition 2.6.1 An IAGN (or DAGN), G, is a 7-tuple (A, N, ~,Zc, Dn, Ea, J) where A is a finite alphabet, N is a finite set (pos-sibly empty) of null symbols, ~ is a finite set of basic strings,Zc c Z is the set of basic center strings, ~h is the set of basichost strings and ~a is the set of basic adjunct strings,E = Z c U E h U E a and J is a finite set of adjunction rules.
Furthera.
A~N =~;  b.
If ~ ?
Zthen  s c (A~N)  (AUN)* ;  c. There isno rule in J which adjoins adjuncts to the left or right of a nullsymbol, i.e., null symbols have no points of adjunction.
Thus fora oi c Z the adjunction 'vectors' are the same as those that can bedefined for the same o i without the null symbols, i.e., as far asadjunctions are concerned we ignore the null symbols.
We will useGreek symbols for the null symbols, and unless otherwise necessary,we will write an LAGN (or DAGN), G, as just the pair (Ec, J).Theorem 2.6.1 The class of LAL's C the class of LALN's and theclass of DAL's c the class of DALN'a.
(We conjecture, however, thatwe have  ' " '  ~ .ns~ead o f  " _C " ) .2.7An adjunction rule u, if applicable, can be applied arbitra-rily many times.
In this sense it is repeatable.
We can alsoconsider nonrepeatable rules, (nr-rule)~ in the sense that if a ruleu = (ui, aj, ~k) is nonrep~atable then for each occurence of thehost o i in a derivation, u can be applied no more than once.
Letnr-AG and nr-AL be the correspondin~ grammars (i.e.
AG's which haveat least one nr-rule) and languages.
The class of LAL's the classof LAI/Y'S (L = \[anbnln ~ I\] is an nr-LAL but not anIAL).
~2.8We say that a local a~junction rule is uniform if in a rule uthe adjunct aj adjoins to the left (or right) of some symbol ag ~ Ain the host of u, then a~ adjoins to the left (or right) Of agwherever ag occurs in 8n~ string in ~.
An LAG, G, is uniform if allits rules are uniform.
(,Continued fremPage 8.
)ad.iunction rules (LsAG).
It can be shown that the class of LAL'sC the class of LsAL's C the class of DAL's.
This observation isdue to Leon Levy.-9 -2.9AG's with the condition ~ = ~_ are of special interest.
Stringsin  ean be considered as ele ot ry sentences (or sentence fo )in L~G)-- If ?
= ~c then every string in L(G) Can be decomposed intoa set of elementary sentences (or sentence forms).
Note also thatif ~ = ~c then in the r-~ tree representation of the derivation ofstring in L(G) every node is either a sentence or a derived sentence.2 .iOIn an LAG (or DAG) we do not have nontermlnals in the sense ofthe nonterminal alphabet of a PHG.
We have, however, auxiliarysymbols used implicitly such as the ~k's corresponding to the pointsof adjunctions.
But these auxiliary symbols are used purely asposition markers and do not have the same interpretation as thenonterminals in a PSG (i.e., the auxiliary symbols ~k's do not cor-respond to phrase types) ?
If we consider the marking symbol, A ,used in making precise the definition in Section 2.2, (see Joshi,Kosaraju, yamada (1968)), also as an auxiliary symbol then one canposslbly consider a i (a i e A) as a nonterminal which can be inter-preted as a phrase ^type but with the added interpretation that arhrase type a i has a i as the 'heed' (or 'center') of the phrase.Each sentence in L(G) has also a 'center' namely the center stringof W.In an IAGN (or DAGN) the null symbols are, however, like thenonterminals in the PSG although highly restricted.
The null symbolsare used to tag basic strings and therefore they are not used asposition markers; in fact, they have no positional interpretation.The null symbols as nontcrmlnals are highly restricted because theyare never 'rewritten' (in the sense of a PSG) into any other stringexcept the null string, i.e., the only 'rewrite rule' associatedwith a null symbol, say~, is ~ ~ ?.IAGN (or DAGN) can be considered as gra~nars of a mixed styleas we use rules of two different styles - adjunction rules and'rewrite rules' of a special type.
This is a very simple example ofa mixed ~rammar.
In Section 3 we will be considering some moreinteresting classes of mixed grammars.2.11In the linguistic context the alphabet A in an AG, G, willconsist of symbols which denote major dictionary classes (lexicalclasses) such as N (nouns), t (tense, auxiliaries), % (adjectives),V (verbs), P (prepositions), wh (who, which, whom), R (pronouns),D (adverbs), Q (quantifiers), etc.
N, t, A, V, etc.
are thus- i0 -preterminal symbols.
The basic center strings thus correspond tobasic (elementary) sentence forms, e.g., N t V (John came), N t V N( J ipb~ht  books), N t V P N (people rely on John) , etc.
(Asubcategorization of V's is implied here and is not explicitlyshown).
Basic adjunct strings are basic adjunct forms, e.g., P N(from Philadelphia), A (old), wh N t V (whom John saw), wh t V N(who saw Jim), D (~- -~,  etc.
Each de-~Ive'~-r~-~ in L(G) isthus a derived sentence form, e.g., (assuming suitable adjunctionrules), N P N t V N (a man from Philadelphia bought books), A N t V(an 61d man came), N wh ~ t V t V D (the man whom Bill saw ran~ ) ,  N wh N wh t V ~ t V t V D (~he books (which) the man whomet Jim boushtwil l  arrive soon) , etc.
(ignoring articles forsimplicity).In an AG, lexleal insertion takes place as each basic stringis brot~ht into the generation of a sentence.
Let a i = a i la l2  .
.
.
.
aim 'a i e A be a basic string.
As o i is brought into the generation ofJ , , a sentence, each aij can be rewritten as s set, say, ~ ,  of syn-tactic features and-dictionary items can be inserted immediately.The verification of selectional restrictions that hold within thedomain of a basic string can be inmediately carried out as any pairof adjacent symbols of ~i are contiguous at this stage.
If thebasic strings are properly chosen then most selectional restrictionsare brought to bear within the domain of some basic string, and in-deed it turns out that basic strings (with reasonable linguisticinterpretations) can be set up in this way.There are some restrictions which hold between a host and anadjtmct string; e.g., in N wh N t V t V (the man whom John metarrived), wh N t V is an adjunct of N t V and the N in N t V isreally the 'object' of V in wh N t V. Some other examples are:Zeroing in conjoined sentences, e.g., everyday, he runs and swims;he plsyed tennis hut she didn't, etc.
Restrictions between suc-cessive adjuncts at ih6 same p0int of adjunction of the host(ordering restrictions) as in I sm lqokin~ for a book with a greeneoverwhish was lying here somewhere.
Restrictions between a ~ostand two or more adjuncts at different points of edjunctlon of thehost as in boMs who ca w swim distrust boys who 9an't.
All these canbe easily veriffed.?
AG's are well suited for formulating the 'endocentric' proper-ties in the sense that this aspect of a constituent can be explicitlybrought out in the structural description.
There are, however,constituents which are not 'endocentrlc'.
These are 'exocentric'in the sense that we cannot replace them by any word of a character-iziug category contained in them such that the constituents can beconsidered as constituent expansionsof the characterizing category;e.g., who willrepresent us at the meetin ~ in who will represent us- I i -at the meetln~ is unclear, etc.
AG's are not well suited forformulating the exocentric properties.
These properties are bettercharacterized bythe  use of a 'nonterminal' and 'rewrite rules' inthe sense of a PSG (see Section 3)-Sentence adjuncts (e.g., in general, today) can be handled wellin an AG; in particular, that these adjuncts can occupy varioussentence positions can be easily characterized in an AG.
This isawkward to characterize in a PSG.
However, the property that theseadjuncts ere adjuncts of a sentence is better characterized by theuse of a nonterminal.Distributed adJunction rules are required to handle eases suchas two and three are even and odd numbers respectively which is acase of an intercalated structure.
Such structures are not too?
frequent.
However, if one tries to construct AG type gran~ars asbase for transformational grammars then the need for intercalatedstructures is not so marginal.
This is primarily because one triesto relate each adjunct to an elementary sentence (i.e., one triesto constitute the adjunct and host strings in such a way that theunderlying elementary sentence (s) could be reconstructed frcan them).Some examples are: the man who came ... (double underline indicatesthe distributed adjunct); John's proof of the theorem, etc.
(seeHi~ and Joshi (1967), Joshi (1906, 1969), for further details).The kinds of intercalated structures possible in a DAG apparentlyare adequate for this purpose.If E = ~c then each string w c L(G) has a representation interms of basic 'sentences' (or basic center strings).
In general,adjuncts are not strings in ?~ and hence ~ $ E c. But what seemsto be true of a natural language is that one can 'almost' constructan AG, G, (actually, a mixed AG, see Section 3) for which ~ = ~cand define a set of operations (these consist of permutations,deletions, and additions of constants; these operations can berelated to transformations in a given language) for each ~ c Eand for strings derived from ~ such that we can construct a new AG,G', with basic strings E', ~c' where E' $ ~c' and strings in E'are transformationally derived from strings in ~.
Strings in L(G')except for morphophonemic operations are the strings (sentences)in the language.
In transformational analysis we go in the reversedirection, i.e., from G' to G and reconstruct the set of basic'sentences' (together with the derivation in G) underlying a givensentence generated by G'.
(See Joshi  (1969) for further resultsand details.
)t-12 -3- Mixed Grammars3.1In AGN's (i.e., AG's with null symbols) in Section 2.6 we usea very special type of null symbols which are ultimately erased.
*The only rewrite rule associated with a null symbol is ~ -where ~ is a null symbol and ~ is the null string.
The AGN's arethus a class of mixed grammars as rules of more than one style areused.
It is, huwever, a rather simple class of mixed granmmrs.3.2 Mixed Strin~ Adjunct Granmmr (M~G)We will now consider a more interesting class of mixed grammars.The main idea is to allow a single 'nonterminal' (in the sense ofa PSG) in an AG and a special type of 'rewrite rules' associatedwith this nonterminal.
We will, however, call them 'replacementrules'.
The reason for adopting this new terminology will becomeclear later.
More specifically, we will define a Mixed Strin~ Adjunctr ~  (with replacement rules) (MAG), G, as follows.First, in addition to the 'terminal' alphabet A we will havea 'nonterminal' S. The set of basic strings, E, and the set ofbasic center strings, Zc, will now be strings on (A U \[S}).
Thusa string a i c ~ may now contain one or more S's in it.
A oi cwhich does not contain S will be called an elementary basic stringand a ui ?
E which contains one or more S's will be called abasic string.
The adjunction rules (local or distributed) aredefined as before and we adopt the same convention as in the caseof the null symbols, i.e., in an adjunction rule if the host is acomplex basic string we disregard the S symbols in it as far aspoints of adjunction are concerned.
Thus the points of adjtu%ctionof a string, say, a i = aS bS are the points of adjunction which areto the left and right of a and b.
Further, the S symbols have nopoints of adjunction.
Of course, ~f an adjunct string, say, ~ isa complex basic string and has a specified segmentation, then ~achsymbol S in oj must be included in some segment of aj.
* Actually, it is possible to define the recursive extension ofthe adjunction rules such that the null symbol associated with anybasic string is erased at the time the string is ad.ioined to somehost string.
The null symbol associated with the center stringis then erased at the end.- 13  -We now define a replacement a rule Pij (often written Justas p) as a pair < ai, oj >where  a i c ~, a i is a complex basicstring, and a S ?
~c" The w~aning of a replacement rule p =< ai, aj > is that ~r~ a i one can derive a new string by replacingsome occurenee of S in a i by a..
Thus we have the followingSDefinition ~.2.1 An MAG, G, is a 9-tuple, G = (A, S, E, E c, ~ ,?
Ea' E~' J' R) where A is the alphabet (terminal), S is a 'nonterminal's~m~ol (S ~ A), Z is the set of basic strings, ~c is the set of basiccenter strings, E h is the set of basic host strings, E a is the setof basic adjunct strings, Z r is the set of basic replacer strings,J is a finite set of adjunction rules (local or distributed), andR is a finite set of replacement rules.
~ = \[oi!
(ai, aj, ~k ) ?
J)u (%1 < 5,  aj > ~ RL z a = {ojl(oi, ~j, ~k) ~ J}, andZ r =\ [a j I<  ai,  aj > ?
R\].
Z = ~e U Z h U Z a U Z r .
Z c may contain 8h~ ~Given J and R, Zb, Za, and ~r are completely specified and= ~c U Z b U ~a U Z r .
A need not be exp l ic i t ly  stated.
Since Sis the only 'nonterminal' i t  need not be exp l ic i t ly  stated also.
}~nce, we wil l  write an MAG, G, as a triple (Ec, J, R) instead ofa 9-tuple as in the definition above.Example ~.2.1 Let G = (~c' J' R) be an MAG where Ec = \[abc,pq,  ahSc}, J = {u I = (abSc, (a)(b)(c) ,  ~1~2~3), ~ = (abe, (a)(b)(c) ,~I~2~3)\], and R = {Pl = < ahSc, abSc >, P2 = <abSc, pq ~\].Example ~.2.2 Let G = (7~c, J, R) be an MAG where ~c = lash, C\],J = {u I = (aSh, (a) (Sb), r l r2 ) \ ] ,  and R = \[Pl = <aSb, aSh >,P2 = < ash, c >}.3-3 Mixed String Adjunct Language (MAL)We now have two different styles of rules in G, namely, theadjunction rules J and the replacement rules R. If R is empty thenwe have an AG and we know how the generation proceeds in this case.In particular, we note the 'inside out' characteristic of thegeneration.
If R is not empty then we have replacement rulesassociated with the symbol S. The generation still proceeds in an'inside out' manner.
In order to define the language correspondingto an FAG, we must state how the rules in J and R are extended toderived strings.
Rather than giving a precise definition, we willillustrate the main idea by the following example.Example 3.3.i Consider the MAG, G, in Example 3.2.1.
Startingwith the complex basic string abSc and using it as a host in u Iand the string abc as an adjunct in Ul, we obtain aabbScc.
Usxngthis as a derived host in the replacement rule p~, we obtainaabbpqcc.
But this is a string derived from abS~ and thereforeit can be used as a replacer string in p~.
Thus we can obtainaabbaabbpqcccc (see Fig.
3.3.1).
The language L(G) = L I isAs fa r  as  ru les  in  J a re  concerned  we requ i re  ' ins ide  out 'generat ion .
In  o rder  to  de f ine  cons is tent ly  the  recurs ive  exten-s ion  of rules in J and R together it is necessary that once areplacer string replaces an S no further adjunctions or replacementscan be made on it.
Thus before a replacer string is used it mustbe completely built up (i.e., it must have received all its adjunctsand adjuncts of adjuncts etc., and all occurences of S must havereceived their replacements).
* This was the reason for callingthe rules in R as replacement rules rather than rewrite rules.Thus the generation begins from either (a) the 'innermost'host - adjunct pair(s) or (b) the 'innermost' complex basic host -replacer pair(s) where the replacer is an elementary basic centerstring, or (e) both (a) and (b).The reader may amuse himself by working out the language (1%)corresponding to the MAG in Example 3.2.2.
It is rather complicBtedto write it down in a parametric form.
* It is assumed that for every complex basic string, say, ~i' eitherthere is a rule < ~i, a.S > where ~j is an elementary basic stringor there is a sequence 6f rules < Oil , ajl >, < si2 , ~J2 >' "'''< gin' ~Jn >where  = = ?
k = l, 2, ... n-l, and si I ~i, SJk ~Ik+l'~Jn is an elementary basic string.
Otherwise, ~i can be removedfrom G without affecting L(G).- 19  -Both L I and L 2 are CSL's (Context sensitive languages).
Theyare both DA~'s also.
This can be shown by constructing the equi-valent'DAG's.
Let G I = (~c' J) be a DAGwhere ~c = {abpqc, pq\],and J = {u I = (abpqc, (ab)(c), r2rg) , u 2 = (abpqc, (a)(b)(e),~i~2~5) \].
Then L(GI) = L I.
Similarly let G 2 = (Ec, J) be a DAGwhere Z c = {acb, c\], and J = \[u 1 = (acb, (a)(cb), rlr3) ,~2 = (acb, (a)(b), rlr3) , u 3 = (acb, (a)(b), ~2~3) , u~ = (ab,(a)(b), rlr2), u~ = (ab, (a)(cb), rlr2) }.
It can be shown thatL(G2) = L 2.
In fact, we have the followingTheorem ~.~.I For every NAG, G, there is an equivalent DAG, G',(i.e., L~G) = L(G')) which can be effectively found.We will omit the proof here as it is rather long.
An examina-tion of MAG's in Examples 3.2.1 and 3.2.2 and their correspondingDAG's, G I and G 2 above will give the reader some indication of hewthe proof can be constructed.
This is an interesting result becauseit shows that as far as weak generative power is concerned, we caneliminate S, the only 'nonterminal' we have used.
It can also beshown (this is easily seen from G I and G 2 above) that if the NAG,G, satisfies the condition that E = ~c, then the equivalent DAG, G~wil l  not necessarily satisfy the corresponding condition E' = Z 'In fact, for some NAG there will be no equivalent DAG satisfyin~this condition (see Section 3.9.6 for linguistic relevance).Remarks 3.3.1i.
In an MAG, G, not every basic string is a string on A (e.g.,the complex basic strings).
However, in the tree representation ofderivation of a string in L(G), the derived strings at each nodeare strings on A, just as in the case of an AG.
In fact, if thiscondition is not satisfied the tree will not correspond to a treefor some string in L(G).2.
The symbol(s) S in a complex string, say, ~i' will be referredto as a contained S. ~.
will also be called a container strin~ andthe repla--c-~s-t~-~ng(s) ~or S will be called contained string(s~.Let?~i = abSc, ~j = dSe, a k = gSh, and ~ = pq.
Let u I = (abSc,dSe, rl) be an adjunction rule and Pl = <abSc,  gSh >, P2 = <abSc,Pq >' P3 = < dSe, pq >, and P4 = < gSh, pq > be some replacementrules.
Consider the following tree representation of a derivation(Fig.
3.3.2: the superscripts on ~ are used to distinguish the twoi is contained distinct occurences of the string pq).
Note that a~-16 -o.k, c~cC (~) c~b g~(4)a.bc-6-Ae ?mode$"~ 3~4-s~.. 0.bez.
F9q.
~c,5, o_o,%b<xo, bb ~Iccc~FI&.
3.
3, I.W= ~.bloo.~bh~%cccc ='~n MAGr G~ E~"~'~ ~.2.
"f.= aSe,l 2.o .~Sc  = o-,:-17 -F iG  "~.%.
2..Ain uj and aj is adjoined to o., and u~ is contained in andUk ?
k'depth' 2) with respect to ~i and this is so both in the sense ofa PSG and an MAG.
Now ul is two levels down where the first levelis due to an adjunction ~ud the second due to containment, butis two levels down where both levels are due to containment.Thus in an MAG the depth of embedding of string can be characterizednot only by the number of levels involved but also by stating foreach level whether it is due to adjunction or containment.
Thereis also the possibility of characterizing an arbitrary depth ofembedding in terms recurrent patterns of adJunction and/or con-tainment levels.3.4 Deformations and Generation SchemeIn this section we will be concerned with the constructionof an MAG, G, with ~ = ~c for an MAG, G', (for which ?2 ~ ~c',in general) such that G is related to G' by means of certainoperations (see Section 2.11 - last paragraph).Let A = Ill' 12' " ' "  ~n \] be a finite set of deformations(to be defined later).Definition 3.4.1 A Generation Scheme, G~ is a pair (G, A)where G is an NAG, G = (~c, J, R), A is a f~nite set of deformations,and with each rule u e J and each rule p ?
R, we associate uniquesubsets of A, say, ~u and ~ respectively.Let C be a finite set of constants.
We say that a string s'is a deformed a if every symbol of ~' is either a constant (i.e.,is in C^) or is a symbol of a or both, That is, a' is obtainedfrom a Ey one or more of the operations of permuting, deleting,or repeating symbols of a or adding one or more symbols from C .0Definition ~.4.2 Let u = (~i, a~, ~k ) c J and let d u be the? '
v assoclated subset of deformations.
Then a Ji ?
Au maps the ruleu = (ai, aj, ~k) into a 3-tuple (ui', aj', ~k') where a i' = ai,aj' is a deformed aj (the specific choice of operations of permuting,deleting, or repeating symbols Of a j or adding constants is deter-mined by ori ) , and ~k' is an adjunction 'vector' of ui not necessarily- 18  -Lthe same as ~k" We write this as Ji(u) = u' where u' = (ai' ,uj', ~k').
* Similarly, a l i?
Ap, P = < a i, aj >, maps p intoa pair < oi' , oj' >where a i' = oi and aj' is a deformed aj( h i determines the specific deformation as before).
We writethis as li(p) = p', where p' = < ai' , oj' >.Note that li deforms uj and also specifies a new adjonction'vector'.
Note also that u and p are rules in the MAG, G. u'and p' are not rules in G. However, they will be later interpretedas rules in another MAG, G'.Each oci can then be extended to the derived hosts and derivedadjuncts in u, and to derived hosts and derived replacers in p inthe obvious way (i.e., if a symbol of ~ is permuted it carrieswith it its adjuncts, and their adjunct~ etc.~ if a symbol of G~is deleted then we delete its adjuncts, and their adjuncts etc.,addition of constants is not affected).
More complicated extensionshave to defined however for the more complicated li's.
(See Section3-5-5, and for further details, Joshi (1969).For a given Generation Scheme, G s = (G, 4), we will define thel a~ngu~e__ ~c?r respond i~ _to Gs ,~L  G~,  as follows.
We will give her--~only an informal definition.
We carry out the generation in theMAG, G, as described in Section 3.3, with the following modification.If during the generation we plan to use a rule u then instead ofi~n ~ ~ a~ .
Similarly,p weif using u we use the rule u' = ~ (u) where ~ewe plan to use a replacement ~e p then s of using usethe rule p' = ~m(P) where 6 m c ~p.
The choice of or~ from ~u and~m from ~ is nondeterministic.
* This definition is not quite precise as stated.
First, note that~k' is an adJunetion 'vector' and hence its components must satis-fy certain conditions (see Section 2.5).
Secondly, if ~k' hasmore than one component then 6 i must also specify the appropriatesegmentation of ~j '.
This definition is also weaker than required.More c~nplicated ~.
's can be defined and are required (see Section3-5-9) - i- 19  -Note that here we use the word 'language' in the usual sense,i.e., a set of strings on A.
Ultimately, however, we are inter-ested in the corresponding strings of lexical items.
The lexicalinsertion proceeds in G in the same general manner as in Section2.11 (paragraph 2), (see also Section 3.~).
In thls case thechoice of a J~ from ~ and of Jm from ~ may depend on thelexical entries for a i and a. which are, of course, availableat this point in the generation.The 'language' derived in this way is L(Gs).
The derivationsare not in G but in G s. We could, of course, allow the generationin G to proceed independently but concurrently with the generationin G .
In this case, we would derive a pair of 'corresponding'str ips, say w and w s where w c L(G) and w S ~ L(Gs).
Note thatG S is not an MAG; however, we have the followingTheorem ~.4.1 For every Generation Scheme, G S = (G, 4) thereis an equivalent MAG, G', (i.e.
L(G') = L(Gs)) , and G' can heeffectively found.The proof is rather involved and we will omit it.
At leastfor the 6's in Definition 3.~.2 one can state the main idea asfollows.
* Let G = (~ , J, R) and G' = (~ ', J', R').
Theni.
~c' = ~c ?
2. j'Cobviously contains ~ll the u' = 6i(u), u ~ J,as adjunction rules.
But J' also contains some additional ruleswhich are needed for the following reason.
Let a~be an adjunctstring in G and let some ~deform aS into aj'.
N~w, if a.j is alsoa host string in some adjunction rule, say, u in J then we mustadd a new adjunction rule(s) in G' which in e~fect allows oneto adjoin the adjunct in u (actually, its deformations under allpossibleS's) to a~', withrthe adjunction 'vector(s)' appropriatelyspecified.
3.
R'Uconsists of all the p' = ~i(p), p ?
R, asreplacement rules.
R' also contains some addltional rules whichare needed for the same reason as in 2 above.We can impose the condition ~ = ~c on the MAG, G. But thenG' (equivalent to G S = (G, 4)) need not satisfy a similar condition,i.e., ~' need not be equal to ~ ' .
This is because ~' contains,besides strings in ~c' (= ~c )' the deformed adjuncts and deformedreplacer strings.I* The proof extends to s~ne of the more complicated J's (seeSection 3.~-~)-- 20  -From Theorems 3.~.i and 3.3.1we then haveCorollary~.~.% For every G s = (G, A) there is an equivalentDAG, G", (i.e., L(Gs) = L(G")) which can be effectively found.3.9 Linguistic RelevanceIn this section, we will briefly discuss the various resultsin Sections 3.1 - 3.4 in the linguistic context and provide someJustifications and interpretations for these.3.9.1As is evident from the discussion in Section 2.11, the mainmotivation for considering FAG's is to provide suitable representa-tions for certain structures (e.g., that he went home surprisedme, I told him to 5o home, t.hat John will come is Certain, I triedto read the book, etc.).
The purpose for considering MAG's with= ~c is the same as in Section 2.11 (last paragraph).3.5.2In Section 2.11 we have seen that many restrictions have astheir domain a basic string or a basic string and its adjuncts;and these can be easily stated and, at the time of adjunction,easily verified.
These remarks obviously hold for an FAG as faras adj~netions are concerned.
However, in addition to these, inan FAG there are many restrictions which have as their domain acomplex string and its replacer(s) string (i.e~., a container stringand the contained string(s)).
These also can be easily stated and,at the time of replacement, easily verified.
Apart from selectionalrestrictions, some of these restrictions are: (a) Identity of oneof the N's in the container string and one of the N's in the con-tained string (identity of the 'subject' or 'object' noun in thecontainer string and the 'subject' or 'object' noun of the con-tained string), e.g., I told.
John to go home, I promised Bill topurchase books, John deserves promotion, He suffered defeat, Iforced him to s~rim, He is uninspirin 5 as a teache__~r, I saw the bo~bein~ beaten by the policeman, etc.
Actually, since we areconsidering derivations in an MAG with ~ = ~c, we should havewritten these somewhat as follows: I told John" (John" should* 5ohome), I' promised Bill (l'would purchase books ), John'dese'rvesNV~-~should* pror~ote John'l, He '~ suffered (N defeated hin0, He ~ isunlinspiring (He'1% teac h N to N), etc.
( , marks the e leme-~ with thesame reference; %: untensed (or tenseless) 6).
(b) Certainconditions on replacing a noun by a pronoun, e.g., Joh~ hoped (he"perhaps %.- 21  -/Jwill wln~ but not Heehoped (John'will win), etc.
(c) Possiblecorrelations between tenses in the container and contained strings(see examples in (a) above).Later, in the context of generation in G s = (G, A) we willdiscuss some additional restrictions.
These do not affect the'well-formedness' (with respect to the satisfaction of restrictions)in G. Thus the strings of lexical items corresponding to stringsin L(G) are also 'well-formed'.3.5-3We now consider the derivations in G s = (G, A).
Obviously,the  purpose of 6's is to obtain the corresponding strings inG s (i.e., also in G'), e.g., L to ld  John to gq home --I told Jo_~~ d  go h ?m-e), etc.
Note that for each rule u or p in G,the 6's are selected from A u or ~ respectively.
Some examplesof restrictions on ~'s are: (a) The choice of a ~ from A u (or Ap)may be affected by the lexical entries for the container andcontained strings, mostly by the verb (including is___~A and is___NN)of the container string, e.g., I tried to drive a car, I trieddrivin~ a .car, but ~nly I stopped drivin~ a car; That he answeredthe .letters is true, His answering the letters is strange, butnot His answerin5 the letters is true, etc.
(b) Choice of aparticular preposition in a deformation may depend on the lexicalentries for the container and contained (?)
strings, e.g., Iknow of John's coming, I believe in (my) leaving early, etc.
(see Section 3.~.5 and Joshi (1969) for further details).3.9.4 A Simple Example of G, G s and G'Let G = (Ze, J, R) be an NAG (with Z = Z c) where A = \[N, t,V,A\];Ze=Z=\[~i=NtV, a 2=~tvN,o3=~tvS,o4=N t VN S, a9 = S t VN , a6 = S t VA ,  c 7 = S t V S}*;J = \[(al, aj, rl\] U ~(o 2, ~j, r I) O \[(a 2, oj, r~?)}
O ~(o 3, oj, rl) 3U {(a\]?, oj, rl)~} U {(ab, o~i' rl~ \] U \[(aS, (~j, r3)}, J = I, 2, 3, b~)* A subcategorization of N's, V's, and A's is implicit here andis not shown explicitly in the notation.- 22  -R= {<al, aj >I i=3 ,  ~, 9, 6, 7; J =I, z, ..., 7}.Let G s = (G, A)be a Generation Scheme where A = \[ or i} isa set of deformations ~d the ~'s are defined as follows.
(Set of Constants, Cq = \[wh, __that, ~t?'
__,'sing\])~l: (ai' aj, ~k) ~ (ai, aSl , ~k) where i = i, 2, 3, ~, 9; J = i,i =wh t V, I z, 3,~; (a i, aj, ~k) c J; and% ~2 =whtv~'aS =wht  V S, a =wht  VN S.*2 62 :  (ai, aj, ~k ) --~ (ai, aj, ~k ) where i = 1, 2, 3, ~, 5;2 =whN t V, j = z, ~, 5; ("i' aj, %) c J; and a z2 =wh S t V. =whNt  V S, o 9 S :  < ai'S=~ : < a i,< a i ,< al, aj S > where i = S, ~, 5, 6, 7; a S > ..@i, 2, ..., 7; < a i, aj > c R; and aSS = that aj.4aS > ~< ai, a S >where i = S, ~; J = i, 2, 3, 4;a S > ~ R; and af' =to  V, a2~ = toVN,  a34 = toV  S,toVN S.~9: < ai' ~J > ~ < ~i' ~j9 >where i = 3, 5, 6, 7; J = I, 2, S, 4;< ai, aj > e R; a19 = (N's) V ing, a25 -- (N's) Ving N,a35 = (N's) Ving S, ~45 = (N's) Ving N S.We have not shown explicitly the various subsets of Aassociated with the rules in J and R in G. But, these can beworked out fr~n the specification of the o~'s above.\\Actually, we should use here a distributed adjunction rule toaccount for the definite article to the left of N in the host.We leave this out in order not to complicate the example.- 23  -/An NAG, G', equivalent to G s =(G, A) can now be easilyconstructed (see the discussion under Theorem 3~4.1).
We willnot write G' here as it is too long.
It is easily seen that wecan derive in G s =(G, A) and therefore in G' sentences such as,John wants to ~o home, I prefer walking, The man who came orderedJim to shut the door, !
promised Bill to tell John that he shouldvisit Fred, Bill's forcin 6 John to resign annoyed him,the doors blue was the custom, My asking him towrite a papercaused his leavin 6 the job, etc.3.~.~ Some Complex Deformations*Some examples of deformations more complicated than those inDefinition 3.4.2 ~re as follows:a.
A J may be defined such that it requires the adjunct string, aj,~n the rule u = (~i' ~j' ~k ) to be a derived string.
~ then refersto not only ~ but string(s) which maybe at most a fixed finitedepth (counted in terms of adjunction and containment levels) rela-tive to o.. Mostly depth i (and occasionally depth 2) is adequate,e.g., The man who had the keys finally came ~The man finall~came who had the keys: The man who finall~ came who had the keys ...b.
A J may be defined as above but with the possibility of--o r referring to not only o. but a string which is at an arbitrarydepth relative to ~.
where ~he arbitrariness of the depth is soconstrained that itScanbe specified in terms certain recurrentpatterns of adjunction and containment levels, e.g., The meetin 6(which) I selected John to represent us at ..., The people we hopethat John told to water the plants ..., etc.
\[Although slightlyout of place, it might be worth mentioning here that the distinctionbetween adjunetion and containment levels also helps in statingcertain pronouning restrictions to some extent, e.g., the pronounis in the contained string and not in the container string: John"thou6ht he'will win but not He'thou6ht John?willwin; but i f -~have an adjunction level then we have both: People who know Bill"like him~ and People who knowhim~like Bill~ if we have an adjunctionlevel and a containment level, we again have both: People who knowBil~ want to help him?and People who knowhim~want to help Bill~and if we have two successive containment levels, we have John'askedBill to tell Mary to see h i 'but  not He" asked Bill to tell Mary tosee John5 etc.
S* For further details see Joshi (1969).- 24  -!///Cc_.
A ~ may be defined such that it not only deforms the adjunctstring aj but also deforms ~he host string a i.
Since the host a ican also-be deformed by such a or, the precise definition of  howgeneration proceeds in the Generation Scheme, Gs, becomes complicated.Such ~ 's can be used to obtain from the same* container string--contained string pair~two related sentences such as, e.g., Ths__ tthe came surprised me and it surprised me that he came, etc.d_.
Sets of related l's to cover certain zeroings which have astheir d~nain the container and the contained strings, e.g., Ipromised him to come ~ I promised him that I would come, etc.
Onemay also include here zeroing of 'appropriate' verbs, Vamp, e.g.,I expect him ~ I expect him to Vap p where Vap p = ~_ ,  ~rrive, etc.\];perhaps also I shall ~o ~ I promise you that I shall ~o (Harris (1968).3.9.6From Theorem 3.3.1 we know that for every NAG there is anequivalent DAG which can be effectively found.
This means that wecan eliminate the nonterminal S as far as weak generative capacityis concerned.
Of course, we don't choose to eliminate S, but it isinteresing to see the implications of this theorem.
If one examinesthe proof of this theorem, we notice that in effect for every complexbasic string, say, a i = abSc and for every elementary basic string,say, pq, which is a replacer for ai~,@we set up an 8djunction rule(in this case a distributed rule) such as (pq, (ab)(c), ~ir2 ).
Thuswe will have to consider I know that in I know that John went h~neas an adjunct of John went home.
Now (in the spirit of the discus-sion in Section 3.4) adjuncts are obtained by deforming a string inFe; also adjuncts have a certain degree of mobility within the host.This is perhaps the reason why in some cases we come close to reali-zing this, e.g., (i) I hope that John will win: we can obtain asentence and a semi-sentence, John will win} I hope so or a sentenceand sentence adjunct, John, I hope, will win, (2) That John passedthe examination sur2rised me: John passed the examination} it sur-~rised me, John passed the examination t to mY surprise, etc.
* This avoids having two distinct strings in G generating stringswhich are  paraphrases of each other.
If, however, we allow thispossibility the structure of G s can be considerably simplified.
Wedo not follow this approach but the nature of these simplificationsis discussed in Joshi (1969).
In a different context and in adifferent framework, Keenan (1969) has made a similar comment.- 25  -d3.9.7In section 3.~, in G S = (G, A) we imposed on G the conditionthat ~ = ~.
Then in G' (equivalent to Gs) every adjunct stringis obtained by deforming some string in Ec(= E) in G. However,adjuncts such as, e.g., quite in quite forgot, ~ry  in very long,sc~e quantifiers (all, sc~e, etc.
), sc~e occurences of articles,sc~e time and manner adverbials, etc.
pose a problem here.
Thereare a couple of ways around this problem.One solution is to consider these adjuncts as primitivelyadjoined in G (i.e., regard them as a sort of primitive adjunctsin G)*.
G, of course, will no longer quite satisfy the conditionE=E .
cAnother more attractive solution (certainly, motivated by somecurrent trends in transformational theory) whichwil l  maintain thecondition that every basic string is also a basic center string isto construct (i) another NAG, G", by retaining all strings in ~ein G, excluding the primitive adjuncts in G, but adding new complexbasic center strings (these will now more and more become infra-~entence forms), and also adding new adjunction and replacementrules, and (2) a new Generation Scheme Gs" = (G", A"), where A"is a new deformation set, and G" satisfies the condition ~" = Zc" ,such that Gs" is equivalent to G. (At this point, we may alsoremove the tenses, auxiliaries, and prepositions.
Basic stringsin G" will then be strings of N's, V's (including i sA  and isN)and S's).
Thus we have the alternating sequence of MAG's andGeneration Schemes**.G .
.
.
.
.
.
G s = (G", ~") ~G:  Gs(G , ~) ~G'andT,(G") : L (%")  = L(G) : LCGs) = T,(G')* Note that there are very strong restrictions on the repeatabilityof these primitive adjuncts.~* In principle, we could consider arbitrarily many intermediatestages, between the first and the last MAG's.
However, there wouldnot be much point in considering such sequences, unless each inter- .
.
L ?
mediate stage has some reasonable llnguistlc interpretatlon.- 26  -where G" underlies G and G underlies G'.
Further developmentof these ideas in so~e detail will be reported in Joshi (1969).Ap~ndix: Fig.
A, su~narizes the hierarchy of certain subclassesof AL's and MAL's in relation to the phrase structure hierarchy.
(The replacement rule in an NAG can be generalized in such a waythat all occurences of S in a complex basic string are simultaneouslyreplaced by a specified set of replacer strings.
We call such agrammar an MAG with simultaneot~ replaceme~rul_ess, MsAG , and thecorresponding language, MsAL.
It can be shown that MAL ~ MsALCSL.
An MsAL has the property that the lengths of the stringsin it (assuming an ordering in terms of increasing lengths) growno faster than an exponential.
The whole class of MsAG's as suchdoes not appear to be linguistically relevant.
)~ -  - 27  -/rCSLCFU% ~nr- L P,~-/ /  LsI~L ALA I~/.
e n9  ~.e.Dg~.
)I,c|,~;.,, w~/, Co,dec'~",e'~ ET'~'lc*..yF,~.
/~.- 28  -Referencesi .
N. Chcmsky (1963) , Formal Properties of Grammars , Handbook ofMathematical Psychology, John Wiley (1963), Ch.
12.2 .
N. Chc~sky, M. P. Sch{\]tzenberger, (1963), Algebraic Theory ofContextfree Languages, Computer Prograu~ing and Formal Systems,North Holland, Amsterdam.3.
N. Chomsky (1965) , Aspects of Theory of Syntax, M.I.T.
Press.4 .
S. Ginsburg (1966), Mathematical Theory of Context-freeLanguages, McGraw-Hill.5.
Z. S.  Harris (1962), String Analysis of Language Structure, Mouton,The Hague.6.
Z. S. Harris (196~), Elementary Transformations, Transformationsand Discourse Analysis Papers, No.
54, University of Pennsylvania.7- Z. S. Harris (1965), Transformational Theory, Language, Vol.
41.8.
Z. S. Harris (1968), Mathematical Structures of Language,Interscience Publishers.9.
H. Hiz (1967) , Computable and Uncomputabl~lemants of Syntax,Logic, Methodology and Philosophy of Science III, Nort h Holland,Amsterdam.iO.
D. Hi~, A. K. Joshi (1967), Transformational Decomposition,Proc.
IFIP Int.
Conf.
on Computational Linguistics, Grenoble.Ii.
A. K. Joshi (1966), String Representation of Transformations,Transformations and Discourse Analysis Papers, No.
~8,University of Pennsylvania.12.
A. K. Joshi (1968), Transformational Analysis by Computer, Proc.NIH Seminar on Computational Linguistics, Bethesda (1966),Published in 1968, U.S. Dept.
H.E.W.13.
A. K. Joshi, S. Kosaraju, H. Yamada (1968), String AdjunctGrammars, Transformations and Discourse Analysis Papers, No.
75.
(revised February 1969)14.~.
K. Joshi (1969) , String Adjunct Gran~ars and TransformationalGra-~ars, Transformations and Discourse Analysis Papers, No.
75112University of Pennsylvania (under preparation).- 29  -15.16.18.19.E.
L. Keenan (1969), A Logical Base for a TransformationalGrammar of English, Ph.D. dissertation, University ofPennsylvania.J.
J. Robinson (1968), Dependency Structures and Transfor-mational Rules, IBM Watson Research Center~ Research Report,July (196~).J.
R. Ross (1967), Constraints on Variables in Syntax, Ph.D.dissertation, M.I.T.N.
Sager (1967) , Syntactic Analysis of Natural Language,Advances in Computers, Academic Press, Vol.
8.M.
P. Sch~tzenberger (1961), Some remarks on Ch~nsky's Context-free Languages, M.I.T.
Quarterly Progress Report, October 1961."
30-
