A Unification Method for Disjunctive Feature DescriptionsRobert T. KasperUSC/Information Sciences Institute4676 Admiralty Way, Suite 1001Marina del Rey, CA 90292andElectrical Engineering and Computer Science DepartmentUniversity of MichiganAbst rac tAlthough disjunction has been used in several unification-based grammar formalisms, existing methods of unificationhave been unsatisfactory for descriptions containing largequantities of disjunction, because they require exponentialtime.
This paper describes a method of unification by succes-sive approximation, resulting in better average performance.1 In t roduct ionDisjunction has been used in severM unlfication-based gram-mar formalisms to represent alternative structures in descrip-tions of constituents.
Disjunction is an essential componentof grammatical descriptions in Kay's Functional UnificationGrammar  \[6\], and it has been proposed by Karttunen as aLinguistically motivated extension to PATR-II \[2\].In previous work two methods have been used to handledisjunctive descriptions in parsing and other computationalapplications.The first method requires expanding descriptions to dis-\]unctl've normal form (DNF) so that the entire descriptioncan be interpreted as a set of structures, each of which con-tains no disjunction.
This method is exemplified by DefiniteClause Grammar  \[8\], which eliminates disjunctive terms byexpanding each rule containing disjunction into alternativerules.
It is also the method used by Kay \[7\] in parsing FUG.This method works reasonably well for small grammars, butit is clearly unsatisfactory for descriptions containing morethan a small number of disjunctions, because the DNF ex-pansion requires an amount of space which is exponential inthe number of disjunctions.The second method, developed by Karttunen \[2\], uses con-straints on dlsjuncts which must be checked whenever a die-junct is modified.
Karttunen's method is only applicable tovalue disjunctions (i.e.
those disjunctions used to specify thevalue of a single feature), and it becomes complicated and in-efficient when disjuncts contain non-local dependencies (i.e.values specified by path expressions denoting another fea-ture).In previous research \[4,5\] we have shown how descriptionsof feature structures can be represented by a certain typeof logical formula, and that the consistency problem for dis-junctive descriptions is NP-complete.
This result indicates,according to the widely accepted mathematical assumptionthat P ~ NP, that any complete unification algorithm fordisjunctive descriptions wiU require exponential time in theworst case.
However, this result does not preclude algorithmswith better average performance, such as the method de-scribed in the remainder of this paper.
This method over-comes the shortcomings of previously existing methods, andhas the following desirable properties:1.
It appUes to descriptions containing general disjunctionand non-local path expressions;2.
It delays expansion to DNF;3.
It can take advantage of fast unification algorithms fornon-disjunctive directed graph structures.2 Data  S t ructuresThe most common unification methods for non-disjunctivefeature structures use a directed graph (DG) representation,in which arcs are labeled by names of features, and nodescorrespond to values of features.
For an introduction to thesemethods, the reader is referred to Shieber's survey \[11 I. Inthe remainder of this section we will define a data structurefor disjunctive descriptions, using DG structures as a basiccomponent.In the following exposition, we will carefully observe thedistinction between feature structures and their descriptions,as explained in \[4\].
Feature structures will be representedby DGs, and descriptions of feature structures will be repre-sented by logical formulas of the type described in \[4 I. The235NILTOP~< Px >, .
.
.
,<  P,~ >!~^?,/, V ?,denoting no information;denoting inco~istent information;where a E A, to describe atomic values;where l E L and ~ E FDL,  to describe structuresin which the feature labeled by I has a value described by ~;where each pC E L ?, to describe an equivalence classof paths sharing a common value in a feature structure;where @, ?
E FDL;where @, ?
E FDL.Figure I: Syntax of FDL Formulas.syntax for formulas of this feature description logic (hereaftercalled FDL)  is given in Figure 1.
INote, in particular, that disjunction is used in descriptionsof feature structures, but not in the structures themselves.As we have shown (see \[9\]) that there is a unique minimalsatisfying DG structure for any nondisjunctive FDL  formula,we can represent the parts of a formula which do not containany disjunction by DGs.
DGs  are a more compact way ofrepresenting the same information that is contained in a FDLformula, provided the formula contains no disjunction.Let us define an unconditional conjunct o be a conjunctof a formula which contains no occurrences of disjunction.After path expansion any formula can be put into the form:uco~j ^  disj~ A .
.
.
A disy,,,where uconj contains no occurrences of disjunction, and eachdisj?, for 1 ~ i ~ m, is a disjunction of two or more alter-natives.
The ,~conj part of the formula is formed by usingthe commutative law to bring all unconditional conjuncts ofthe formula together at the front.
Of course, there may beno unconditional conjuncts in a formula, in which case ucoajwould be the formula NIL.Each disjunct may be any type of formula, so disjuncts canalso be put into a similar form, with aLl unconditional con-juncts grouped together before all disjunctive components.Thus the disjunctions of a formula can be put into the form(~conj~ ^disA ~ ^ .
.
.^disA,)  v .
.
.
v (uconj,, ^ disj,, ~ ^ .
.
.^ dlsj,, ).The embedding of conjuncts within disjuncts is preserved,but the order of conjuncts may be changed.The unconditional conjuncts of a formula contain informa-tion that is more definite than the information contained indisjunctions.
Thus a formula can be regarded as having adefinite part, containing only unconditional conjuncts, andan indefinite part, containing a set of disjunctions.
The def-inite part contains no disjunction , and therefore it may berepresented by a DG structure.
To encode these parts of aformula, let us define a feature-description as a type of datastructure, having two components:ILet A and L be sets of symbols which are used to denoteatomic values and feature labels, respectively.Figure 2: AND/OR graph representat ion of a featuredescription.defl,n|te: a DG structure;indef in i te:  a SET of disjunctions, where each disjunctionis a SET of feature.descriptlon.s.It is poesibh to convert any FDL formula into a feature-description structure by a simple automatic procedure, a.sdescribed in \[5\].
This conversion does not add or subtract anyinformation from a formula, nor increase its size in any sig-nificant way.
It simply identifies components of the formulawhich may be converted into a more el~cient representationas DG structures.A feature-descriptlon is conceptually equivalent to a spe-cial kind of AND/OR graph, in which the terminal nodes arerepresented by DG structures.
For example, an AND/ORgraph equivalent to the formula,4,0 ^  (?1 v ,/,2) ^  (~,3 v ?4 v (Ca ^  (?o v ?7)))is shown in Figure 2.
In the AND/OR graph representa-tlon, each AND-node represents a feature-description.
Thefirst outgoing arc from an AND-node represents the definitecomponent of a feature-description, a d the remaining outgo-Lug arcs represent the indefinite component, Each OR-noderepresents a disjunction.236Function I /N \ ]FY -DESC (f, g) Returns feature.description:where f and g are feature-descriptions.I.
Unify definite components.Let new-def = UNIFY-DGS (f.definite, g.definite).If new-def = TOP, then return (failure).Let desc = a feature-description with:desc.definite = new-def,desc.indefinite = f.indefinite td g.indefinite.If desc.indefinite = $,Then return (desc);Else begin;2.
Check compatibility of indefinite components with new-def.Let new-desc = CHECK- INDEF (desc, new-def).If new-desc = failure, then return (failure);3.
Complete ezhat~tiv?
consistency checking, if necessary.Else if new-desc.indefinite = $OR if complete checking is not required,Then return (new-desc);Else begin;Let n = 1.Repeat while n < cardinallty of new-desc.indefinite:new-desc := NWISE-CONSISTENCY (new-desc, n).n:=n+l .return (new-desc).end.end.Figure 3: Unif ication algorithm for feature-descriptions.3 The Algorithm: Unificationby Successive ApproximationIn this section we will give a complete algorithm for unify-ing two feature.descriptions, where one or both may containdisjunction.
This algorithm is designed so that it can be usedas a relatively efficient approximation method, with an op-tional step to perform complete consistency checking whennecessary.Given two feature-descriptions, thestrategy of the unifi-cation algorithm is to unify the definite components of thedescriptions first, and examine the compatibility of indefi-nite components later.
Disjuncts are eliminated from thedescription when they are inconsistent with definite informa-tion.
This strategy avoids exploring dlsjuncts more than oncewhen they are inconsistent with definite information.The exact algorithm is described in Figure 3.
It has threemajor steps.In the first step, the definite components of the two de-scriptions are unified together, producing a DG structure,new-def, which represents he definite information of the re-sult.
This step can be performed by existing unification al-gorithms for DGs.In the second step, the indefinite components of both de-scriptions are checked for compatibility with new-def, usingthe function CHECK-INDEF, which is defined in Figure 4.CHECK- IN \ ]DEF  uses the function CHECK-DIS J, defined inFigure 5, to check the compatibility of each disjunction withthe DG structure given by the parameter con&The compatibility oftwo DGs can be checked by almost hesame procedure as unification, but the two structures beingchecked are not actually merged as they are in unification.In the third major step, if any disjunctions remain, and itis necessary to do so, disjuncts of different disjunctions areconsidered in groups, to check whether they are compatibletogether.
This step is performed by the function NWISE-CONSISTENCY, defined in Figure 6.When the parameter r~ to NWISE,-CONSISTENCY hasthe value 1, then one disjunct is checked for compatibilitywith all other disjunctions of the description in a pairwisemanner.
The pairwise manner of checking compatibility canbe generalized to groups of any size by increasing the valueof the parameter n.While this third step of the algorithm is necessary in or-der to insure consistency of disjunctive descriptions, it is notnecessary to use it every time a description is built during aparse.
In practice, we find that the performance of the algo-rithm can be tuned by using this step only at strategic pointsduring a parse, since it is the most inefficient step of the al-237Function CHECK-INDEF (desc, cond) Returns feature-description:where deac is a feature-description,and cond is a DG.Let indef = desc.indeflnite (a set of disjunctions).Let new-def = desc.deflnite (a DG).Let unchecked-parts ~ true.While unchecked-parts, begin;unchecked-parts := false.Let new-indef = ~.For each disjunetiort in indef.
"Let compatible-disjuncts = CHECK-DISJ (disjunction, cond).If cardinality of compatible-disjuncts is:0 : Return (failure);1 : Let disjunct ---- single element of compatible-disjuncts.new-def :--- UNIFY-DGS (new-def, disjunct.deflnite).newoindef := new-indef tJ disjunct.indeflnite.unchecked-parts := true;otherwise : new-indef :ffi newoindef U {compatible-disjuncta}.Prepare to check remaining disjunctions for compatibility with new-def.cond := new-def.indef :~ new-indef.end (while loop).Let newodesc ~= make feature-description with:new-desc.deflnite ---- new-def,new.desc.indeflnite ---- new-indef.Return (new-desc).Figure 4: Algor i thm to check compatibility of indefinite parts of feature-descriptions with respect to a condition DG.Function CHECK-DIS J  (disj, cord) Return8 disjunction:where disj is a disjunction of feature-descriptions,and cond is a DG.Let new-disj = 0 (a set of feature-descriptions).For each disjunct in disj:If DGS-COMPATIBLE?
(cond, disjunct.definite),Then if disjunct.indeflnite = $,Then new-disj := new-disj t9 {disjunct};Else begin;Let new-disjunct : CHECK- INDEF  (disjunct, cond).If new-disjunct ~ failure, then begin;new-disj := new-disj t9 {new-dlsjunct}.end.end.Return (new-disj).F igure  5: A lgor i thm to check compat ib i l i ty  of d i s junct ions  w i th  respect  to a cond i t ion  DG.238Funetlon NWISE-CONSISTENCY (desc, n) Returns feature-description:where desc is a feature-description.If number  of disjunctions in desc.indefinite _< n,Then Return  (desc) .Let  def  = desc .de f in i te .Let  indef  = desc .
indef in i te .Let  new- indef  = ~.Whi le  d i s iunct ions  remain  in indef :Let  d i s iunct ion  ---- remove one  d is junct ion  f rom indef .Let  new-d is j  = ~.For each  dlsjuTtct in d i s junct ion :Let  d i s junct -de f  ---- UNIFY -DGS (def, d i s iunct .de f in i te ) .Let  d i s junct - indef  ---- d i s junet .
indef in i te  U indef  U new- indef .Let  hyp-desc  = make feature -descr ip t ion  wi th :hyp-desc .de f in i te  = d is junct -de f ,hyp-desc .
indef in i te  ---- d i s iunet - indef .If n = 1,Then let new-desc  = CHECK- INDEF (hyp-desc ,  d i s junct -de f ) .Else let new-desc = NWISE-CONSISTENCY (hyp-desc, n-l).If new-desc ~ failure,Then new-disj := new-disj tJ (new-desc}.If card ina l i ty  of new-d is j  is:O: Return  ( fa i lure) ;1: Let  new-desc  = s ingle e lement  of new-d is j .def  :=  new-desc .de f in i te .indef  :=  new-dese .
indef in i te .new- indef  :=  ?
;o therwise :  (keep th is  d i s junct ion  in resu l t )new- indef  := new- indef  U {new-d is j} .Let  resu l t -desc  = make feature -descr ip t ion  wi th :resu l t -desc .de f in i te  = def,result-desc.indefinite = new- indef .Return  ( resu l t -desc) .Figure 6: A lgor i thm to check compat ib i l i ty  of dis junct ions of a descr ipt ion by checking groups of n disjunctions.gorithm.
In our application, using the Earley chart parsingmethod, it has proved best to use NWISE-CONSISTENCYonly when building descriptions for complete dges, but notwhen building descriptions for active edges.Note that two feature-descriptions do not become perma-nently linked when they are unified, unlike unification forDG stuctures.
The result of unifying two descriptions i anew description, which is satisfied by the intersection of thesets of structures that satisfy the two given descriptions.
Thenew descriptlon contains all the information that is containedin either of the given descriptions, ubtracting any disjunctswhich are no longer compatible.4 An exampleIn order to illustrate the effect of each step of the algo-rithm, let us consider an example of unifying the descrip-tion of a known constituent with the description of a por-tion of a grammar.
This exemplifies the predominant type ofstructure building operation eeded in a parsing program forFunctional Unification Grammar.
The example given here isdeliberately simple, in order to illustrate how the algorithmworks with a minimum amount of detail.
It is not intendedas an example of a linguistically motivated grammar.Let us trace what happens when the two descriptions ofFigure 7 are given as inputs to the function UNIFY-DESC.Figure 8 shows the feature-description which results afterstep 1 of the algorithm.
The definite components of the twodescriptions have been unified, and their indefinite compo-nents have been conjoined together.In step 2 of the algorithm each of the disjunctsof DESC.INDEFINITE is checked for compatibil ity withDESC.DEFINITE, using the function CHECK-IN'DEF.
Inthis case, all disjuncts are compatible with the definite infor-mation, except for one; the disjunct of the third disjunctionwhich contains the feature Number  : Sing.
This disjunct iseliminated, and the only remaining disjunct in the disjunc-tion (i.e., the disjunct containing Number  : PI)  is unifiedwith DESC.DEFINITE.
The result after this step is shownin Figure 9.
The four disjuncts that remain are numbered forconvenience.In step 3, NWISE-CONSISTENCY is used with 1 as thevalue of the parameter n. A new description is hypothesizedby unifying disjunct (1) with the definite component of thedescription (i.e., NEW-DESC.DEFINITE).
Then disjuncts(3) and (4) are checked for compatibil ity with this hypothe-sized structure: (3) is not compatible, because the values ofthe Trans i t iv i ty  features do not unify.
Disjunct (4) is alsoincompatible, because it has Goal : Person : 3, and the hy-239GRAMMAR:DEFINITE = \[ Rank : Clause \]Sub\] : Caes : NoraINDEFINITE = ( \[ Yo4ca : Paa~dus Transitivity : Trana~< Sub\] >, < Goal >\]Traneitlvity : Intran$Actor  : Person  : 3Number : SingSub\] : Number : SingV%V'IVo~cs : Actiu,, |~< Sub\] >, < Actor >!
JGoa l  : Pereon  : 3Number  : P l  \]S~\] : Number  : PlSUBJECT CONSTITUENT:Lez : y'all \]DEFINITE = Sub\] : Person : 2Number : PlINDEFINITE = NILFigure 7: Two descriptions to be unified.pothesized escription has ~< Sub\] >, < Goal >l, along withSub\] : Person : 2.
Therefore, since there is no compatibledlsjunct among (3) and (4), the hypothesis that (1) is com-patible with the rest of the description has been shown to beinvalid, and (1) can be eliminated.
It follows that disjunct(2) should be unified with the definite part of the descrip-tion.
Now disjuncts (3) and (4) are checked for compatibil itywith the definite component of the new description: (3) is nolonger compatible, but (4) is compatible.
Therefore, (3) lseliminated, and (4) is unified with the definite information.No disjunctions remain in the result, as shown in Figure 10.5 Complexity of the AlgorithmReferring to Figure 3, note that the function LrNIF?-DESCmay terminate after any of the three major steps.
After eachstep it may detect inconsistency between the two descriptionsand terminate, returning failure, or it may terminate becauseno disjunctions remain in the descrlption.
Therefore, it isuseful to examine the complexity of each of the three stepsindependently.Let n represent the total number of symbols in the com-bined description f ^ g, and d represent he total numberof disjuncts (in both top-level and embedded isjunctions)contained in f A g.Step I.
This step performs the unification of two DG struc-tures.
Ait-Kaci \[11 has shown how this operation can be per-formed in almost linear time by the UNION/F IND algorithm.Its time complexity has an upper bound of O(n log n).
Sincean unknown amount of a description may be contained in thedefinite component, this step of the algorithm also requiresO(n log n) time.Slop ~.
For this step we examine the complexity of thefunction CHECK- INDEF .
There are two nested loops inCHECK-INDEF, each of which may be executed at most oncefor each disjunct in the description.
The inner loop checks thecompatibil ity of two DG structures, which requires no moretime than unification.
Thus, in the worst case, CHECK-INDEF requires O(d2n log n) time.Step 8.
NWISE-CONSISTENCY requires at most 0(2 ~/~)time.
In this step, NWISE-CONSISTENCY is called at most(d/2) - 1 times.
Therefore, the overall complexity of step 30(2"/2).Discussion.
While the worst case complexity of the entirealgorithm i, 0(2~), an exponential, it is significant hat itoften terminates before step 3, even when a large numberof dlsjunctlons are present in one of the descriptions.
Thus,in many practical cases the actual cost of the algorithm isbounded by a polynomial that is at most d2n log n. Sincemust be less than n, this complexity function is almost cubic.Even when step 3 must be used, the number of remainingdisjunctions is often much fewer than d/2, so the exponenti, usually a small number.
The algorithm performs well inmost cases, because the three steps are ordered in increasingcomplexity, and the number of disjunctions can only decreaseduring unification.6 Implementat ionThe algorithm presented in the previous sections has been im-plemented and tested as part of a general parsing method forSystemic Functional Grammar,  which is described in 13\].
Thealgorithm was integrated with the structure building moduleof the PATR-I I  system \[10\], written in the Zetalisp program-ming language.While the feature-description corresponding to a grammarmay have hundreds of disjunctions, the descriptions that re-sult from parsing a sentence usually have only a small numberof disjunctions, if any at all.
Most disjunctions in a systemicgrammar represent possible alternative values that some par-ticular feature may have (along with the grammatical conse-quences entailed by choosing particular values for the fea-ture).
In the analysis of a particular sentence most featureshave a unique value, and some features are not present at all.When disjunction remains in the description of a sentenceafter parsing, it usually represents ambiguity or an under-specified part of the grammar.With this implementation of the algorithm, sentences ofup to I0 words have been parsed correctly, using a grammarwhich contains over 300 disjunctions.
The time required formost sentences is in the range of 10 to 300 seconds, runningon lisp machine hardware.The fact that sentences can be parsed at all with a gram-mar containing this many disjunctions indicates that the al-gorithm is performing much better than its theoretical worstcase time of O(2d).
2 The timings, shown in Table 1, obtainedfrom the experimental parser for systemic grammar also in-dicate that a dramatic increase in the number of disjunctionsin the grammar does not result in an exponential increasein parse time.
Gos is a grammar containing 98 disjunctions,2Consider, 2300 ~ 2 s?, and 2 s?
is taken to be a rough estimateof the number of particles in the universe.240DESC.DEF IN ITE  =Rank  : ClauseCase : NoraLee : y'allSub\] : Person : 2Number  : P lDESC.
INDEF IN I .TE  =Voice : Pass iveTrans i t iv i ty  : T rans\[< Sub\] >, < Goal >\]Trans i t iv i ty  : In t ransActor : Person : 3Number  : S ingSub\] : Number  : S ingvE 1) \[< Sub\ ]  >, < Actor >\]\ [T rans i t iv i ty :T rans  t )V Goal : Person : 3\[ Number :P l  \]?
Sub\] : Number  : PlFigure 8: UNIFY-DESC: After step 1 (UNIFY-DGS).NEW-DESC.DEF IN ITE  =Rank  : ClauseCase : NoraLee  : y' allSub\ ] :  Person:2Number  : PINumber  : P INEW-DESC.INDEFINITE =Voice : Pass ive(1) Trans i t iv i ty  : T rans\[< Sub\] >, < Goal >\]Trans i t iv i ty  : In t rans(3) Actor : Person : 3Voice :Active \] )v(2) ~<Suby>,<Actor>\]V (4) Goal : Person : 3Figure 9: UNIFY-DESC: After step 2 (CHECK-INDEF).Rank  : ClauseCase : NoraLee : y' allSub\] : Person : 2NEW-DESC.DEFINITE = Number  : P lNumber  : PlVoice  : Active\[< Subj  >, < Actor >\]Trans i t iv i ty  : T ransGoal : Person : 3NEW-DESC.INDEFINITE = NILFigure 10: UNIFY-DESC: After step 3 (NWISE-CONSISTENCY).241Sentence Gos G44oNigel has been speaking English.
22.9 144".3Nigel has been speaking English to me.
28.6 203.5Table i: Timings obtained from a systemic parser.and G,,o is a grammar containing 440 disjunctions.
The totaltime used to parse each sentence is given in seconds.7 Conclus ionsThe unification method presented here represents a generalsolution to a seemingly intractable problem.
This method hasbeen used successfully in an experimental parser for a gram-mar containing several hundred disjunctions in its descrip-tion.
Therefore, we expect hat it can be used as the basisfor language processing systems requiring large grammaticaldescriptions that contain disjunctive information, and refinedas necessary and appropriate for specific applications.While the range of speed achieved by a straightfQrwardimplementation f this algorithm is acceptable for grammartesting, even greater efficiency would be desirable (and neces-sary for applications demanding fast real-time performance).Therefore, we suggest wo types of refinement to this algo-rithm as topics for future research: using heuristics to deter-mine an opportune ordering of the dlsjuncts within a descrip-tion, and using parallel hardware to implement the compat-ibility tests for different disjunctions.AcknowledgementsI would like to thank Bill Rounds, my advisor during gradu-ate studies at the University of Michigan, for hie helpful crit-icism of earlier versions of the algorithm which is presentedhere.
I would also like to thank Bill Mann for suggestionsduring its implementation at USC/ISI, and Stuart Shieberfor providing help in the use of the PATR-II system.This research was sponsored in part by the United StatesAir Force Office of Scientific Research contracts FQ8671-84-01007 and F49620-87-C.-0005, and in part by the UnitedStates Defense Advanced Research Projects Agency undercontract MDA903-81-C-0335; the opinions expressed here aresolely those of the author.\[3\] Kasper, R. Systemic Grammar and Functional Unifica-tion Grammar.
In J. Benson and W. Greaves, editors,Systemic Functional Perspectives on Discourse: SelectedPapers from the 12 t~ International Systemics Wor~hop,Norwood, New Jersey: Ablex (forthcoming).\[4\] Keeper, R. and W. Rounds.
A Logical Semantics forFeature Structures.
In Proceedings of the 24 eh AnnualMeeting of the Association for Computational Linguistics,Columbia University, New York, N'Y, June 10-13, 1986.\[5\] Keeper, R. Feature Structures: A Logical Theory ~ith Ap-plication to Language Analysis.
PhD dissertation, Uni-versity of Michigan, 1987.\[6\] Kay, M. Functional Grammar.
In Proceedings of theFifth Annual Meeting of the Berkeley Linguistics Soci-ety, Berkeley Linguistics Society, Berkeley, California,February 17-19, 1979.\[7\] Kay, M. Parsing in Functional Unification Grammar.
InD.
Dowty, L. Karttunen, and A. Zwicky, editors, Natu-ral Language Parsing.
Cambridge University Press, Cam-bridge, England, 1985.\[8\] Perelra, F. C. N. and D. H. D. Warren.
Definite clausegrammars for language analysis - a survey of the formal-ism and a comparison with augmented transition net-works.
Artificial Intelligence, 13:231-278, 1980.\[9\] Rounds, W. C. and R. Keeper.
A Complete LogicalCalculus for Record Structures Representing LinguisticInformation.
Symposium on Logic in Computer Science.IEEE Computer Society, June 16-18, 1986.\[101 Shieber, S. M. The design of a computer language forlinguistic information.
In Proceedings of the Tenth Inter-national Conference on Computational Linguistics: COL-ING 84, Stanford University, Stanford, California, July2-7, 1984.\[11\] Shieber, S. M. An Introduction to Unification-based Ap-proaches to Grammar.
Chicago: University of ChicagoPress, CSLI Lecture Notes Series, 1986.References\[1\] Ait-Kaci, H. A New Model of Computation Based on aCalculus of Type Subsumption.
PhD thesis, University ofPennsylvania, 1984.\[2l Karttunen, L. Features and Values.
In Proceedings of theTenth International Conference on Computational Lin-guistics: COLING 8~, Stanford University, Stanford,California, July 2-7, 1984.242
