Book ReviewsComputational Semantics with Functional Programming?
2012 Association for Computational LinguisticsJan van Eijck?
and Christina Unger?
(?CWI, Amsterdam and Utrecht University; ?University of Bielefeld)Cambridge: Cambridge University Press, 2010, xv+405 pp; hardbound,ISBN 978-0-521-76030-0, $99.00; paperbound, ISBN 978-0-521-75760-7, $40.00Reviewed byRobin CooperUniversity of GothenburgThere has been a recent intensification of interest in ?semantics?
in computationallinguistics.
I write the word in scare quotes because there are very different views ofwhat computational semantics is.
Broadly, it divides into the view that word meaningcan be modeled in distributional terms and the view that meaning is to be viewed interms of model theory of the kind employed in formal semantics deriving from theseminal work of Richard Montague (1974).
This book is firmly placed in the latter logic-based semantics camp.If you want to learn about the logical approach to computational semantics thereare three basic texts you can go to: Blackburn and Bos (2005), which uses Prolog; Bird,Klein, and Loper (2009, chapter 10), which covers the essential aspects of Blackburnand Bos using Python within the popular Natural Language Toolkit (NLTK); and thepresent book, which uses the functional programming language Haskell.
All three ofthese references will teach you both semantics and the required programming skills atthe same time.
So how do you choose between them?One relevant issue is the choice of programming language.
Prolog, a logic program-ming language, seems like a natural choice for logic-based semantics and, indeed, asBlackburn and Bos show, it provides support for writing concise and transparent codewhich is close to the kind of formalism used in theoretical logic-based semantics.
It is notwithout its problems, however.
Prolog variables are associated with unification-basedbinding, which is not the same as the kind of binding by quantifiers and operators thatis used in logic.
A second problem is that Prolog is a relation-based language and doesnot have a direct implementation of functions that return a value.
Formal semanticsbuilding on Montague?s work makes heavy use of the ?-calculus with ?-expressionsdenoting functions, and semantic composition is largely defined in terms of function-argument application.
Blackburn and Bos implement a version of the ?-calculus inProlog but this leads to a third problem: Formal semantics uses a typed version ofthe ?-calculus, yet standard Prolog is not a typed language (apart from making basicdistinctions between integers, lists, etc.).
Python, being object-oriented, allows a partialsolution to the typing problem and it also has functions.
It is a very flexible languageand allows transparent coding of semantic formalisms by its powerful string processing.But coding semantic formalisms in terms of strings, although providing a great deal offlexibility, does not give you the feeling that the language is providing support for orinsight into the logical operations that are being performed.Van Eijck and Unger?s book enters into this discussion with Haskell, a languagebased on the ?-calculus, with a strict typing system that requires the programmerto declare the types of all objects that are to be used in a program.
As a functionalComputational Linguistics Volume 38, Number 2programming language (in the sense of being based on functions that take argumentsand return values) it comes with a proper logical notion of variable binding rather thanthe unification variety.
Furthermore, it has static typing, which means that it checksyour program for type errors at compile time.
This means that if you have made anerror you do not have to wait until it shows up in some particular example at run time(perhaps after you have delivered your system to your client).
The core of this languagethen provides exactly the tools that the logical semanticist needs.
Here the semanticistis getting real support from the language, not just the flexibility to implement what sheneeds.
A few words of caution are appropriate, however.
If the type system that youwant to implement does not exactly match the type system of the programming lan-guage, you may well be better off doing your implementation in a non-typed languageso that the two type systems do not interfere with each other, though how you feel aboutthis issue depends very much on your programming background and preferences.Van Eijck and Unger show, in my view magnificently, that Haskell?s type system doesmatch the type system used in the classical approach to formal semantics.
Some mightfeel that there is a slight cost, in that direct implementation in Haskell involves usingHaskell?s syntax, which is a bit different from the kind of notation used in classicalformal semantics.
Haskell?s syntax is extremely slick and concise.
For example, it seemsto follow the philosophy: ?Don?t put any kind of brackets around expressions, whenyou could simply write them next to each other and the context will determine whatthat means.?
This can be initially unnerving to linguists used to more florid notationswith an element of redundancy.One of the great contributions that Blackburn and Bos made was showing howlogic-based computational semantics can be connected to off-the-shelf first-order the-orem provers and model builders such as Prover9 and Mace and showing how thisconnection can be exploited in semantics and discourse processing.
This work has alsobeen incorporated into the NLTK version of semantics.
Although you will find discus-sion of inference in van Eijck and Unger?s book, you will not find accounts of how toconnect to external theorem provers.
This is probably a principled decision.
If you learnsemantics from the Blackburn and Bos or NLTK texts you might be forgiven for comingto the conclusion that the main aim of using the ?-calculus in linguistic semantics is toget a compositional treatment that will always allow you to reduce a first-order formulathat can be sent off to a fast first-order theorem prover or model builder and you mayjust miss their occasional references to the fact that not all natural language sentencescorrespond to first-order formulae.
This means that you will not be able to adequatelytreat sentences containing certain generalized quantifiers such as most in most customersprefer this product or intensional verbs such as want in I want to go to Chicago.
VanEijck and Unger, on the other hand, have a fairly detailed discussion of generalizedquantifiers in Chapter 7 and devote the whole of Chapter 8 to intensionality.
Althoughit would, of course, be a challenge to cover all the major results of formal semanticswithin a single introductory textbook on computational semantics, at the end of thisbook one has the impression that we have the tools we need to go further, whereas withthe other introductions we have the impression that computational semantics deals withexpressions of natural language whose interpretations can be represented in first-orderlogic.In general, van Eijck and Unger place semantics in a broader philosophical andlogical setting.
Chapter 1 deals with the formal, logical approach to natural language,and Chapter 2 with the tools used in functional programming.
Chapter 3 provides apractical introduction to the parts of the programming language Haskell that you needto know in order to be able to follow the book.
Chapters 4 and 5 deal, respectively, with448Book Reviewssyntax and semantics for fragments.
The intention here was, I imagine, to introducethings gently by starting with the syntax of games rather than of languages.
I wasnot sure that this was the most useful way to introduce things for linguists.
It was notentirely clear to me what the syntax of a game was meant to represent (the game itself?,the language you use when playing the game or when describing the game?)
and thiswas not helped by having the semantics coming in the next chapter after discussing thesyntax of a fragment of English, propositional logic, predicate logic, and an extensionof predicate logic with function symbols.
Chapter 6 deals with model checking withpredicate logic, and finally with Chapter 7 we get down to some serious compositionalsemantics for natural language.
The remaining chapters build on this and deal withmore advanced topics: intensionality in Chapter 8, parsing in Chapter 9, quantifierscope in Chapter 10, continuation semantics in Chapter 11, discourse representationin Chapter 12, and communication and information in Chapter 13.
If you make it to theend, the Afterword tells you to treat yourself to a beer as a reward.As stated in the Preface, the book is directed to linguists, logicians, and functionalprogrammers and provides basically all you need to know if you are coming from oneof these areas and do not know about the other two.
This is a major achievement andpractically everything you need is there, clearly and concisely expressed.
The learningcurve is steep, however, and there is a great deal of complex material to digest.
If youare on your own without a sympathetic teacher, you might feel that you have earnedsomething stronger than a beer by the time you get to the end.This book was developed over a period of about ten years and, besides being anintroductory textbook to computational semantics that every serious student of thefield should study, it represents a mature major research contribution demonstrat-ing the close relationship between classical formal semantics and modern functionalprogramming.ReferencesBird, Steven, Ewan Klein, and EdwardLoper.
2009.
Natural LanguageProcessing with Python: AnalyzingText with the Natural LanguageToolkit.
O?Reilly Media,Sebastopol, CA.Blackburn, Patrick and Johan Bos.2005.
Representation and Inferencefor Natural Language: A First Course inComputational Semantics.
CSLI Studiesin Computational Linguistics.
CSLIPublications, Stanford, CA.Montague, Richard.
1974.
Formal Philosophy:Selected Papers of Richard Montague.
Editedand with an introduction by Richmond H.Thomason.
Yale University Press,New Haven, CT.Robin Cooper is Professor of Computational Linguistics at the University of Gothenburg and direc-tor of the Swedish National Graduate School of Language Technology.
His address is Departmentof Philosophy, Linguistics and Theory of Science, University of Gothenburg, Box 200, S-405 30Go?teborg, Sweden; e-mail: cooper@ling.gu.se.449
