RECOVERING IMPLICIT INFORMATIONMartha S. Palmer, I)eborah A. Dahl, Rebecca.
J. Schiffman, Lynette Hirschlnan,Marcia Linebarger, and John DowdingResearch and Development DivisionSDC -- A Burroughs CompanyP.O Box 517Paoli, PA 19301 USAABSTRACTThis paper describes the SDC PUNDIT, (PrologUNDerstands Integrated Text), system for processingnatural language messages.
1 PUNDIT, written inProlog, is a highly modular system consisting of dis-tinct syntactic, semantic and pragmatics com-ponents.
Each component draws on one or more setsof data, including a lexicon, a broad-coverage ram-mar of EngLish, semantic verb decompositions, rulesmapping between syntactic and semantic consti-tuents, and a domain model.This paper discusses the communication betweenthe syntactic, semantic and pragmatic modules thatis necessary for making implicit linguistic informationexplicit.
The key is letting syntax and semanticsrecognize missing linguistic entities as implicit enti-ties, so that they can be labelled as such, and refer-enee resolution can be directed to find specificreferents for the entities.
In this way the task ofmaking implicit linguistic information explicitbecomes a subset of the tasks performed by referenceresolution.
The success of this approach is depen-dent on marking missing syntactic constituents aselided and missing semantic roles as ESSENTIAL sothat reference resolution can know when to look forreferents.1.
In t roduct ionThis paper describes the SDC PUNDIT 2 systemfor processing natural language messages.
PUNDIT,written in Prolog, is a highly modular system consist-ing of distinct syntactic, semantic and pragmaticscomponents.
Each component draws on one or moresets of data, including a lexicon, a broad-coveragegrammar of English, semantic verb decompositions,rules mapping between syntactic and semantic on-stituents, and a donlain model.
PUNDIT has beendeveloped cooperatively with the NYU PROTEUSsystem (Prototype Text Understanding System),These systems are funded by DARPA as part of theI This work is supported in part by DARPA under contract N00014-85-C-0012, administered by the Office of Naval Research.
APPROVED FOR PUB-LIC RELEASE, DISTRIBUTION UNLIMITED.2 Prolog UNDderstands Integrated Textwork in natural language understanding for theStrategic Computing Battle Management Program.The PROTEUS/PUNDIT system will map NavyCASREP's (equipment casualty reports) into a data-base, which is accessed by an expert system to deter-mine overall fleet readiness.
PUNDIT has also beenapplied to the domain of computer maintenancereports, which is discussed here.The paper focuses on the interaction betweenthe syntactic, semantic and pragmatic modules thatis required for the task of making implicit informa-tion explicit.
We have isolated two types of implicitentities: syntactic entities which are missing syntac-tic constituents, and semantic entities which areunfilled semantic roles.
Some missing entities areoptional, and can be ignored.
Syntax and semanticshave to recognize the OBLIGATORY missing entitiesand then mark them so that reference resolutionknows to find specific referents for those entities,thus making the implicit information explicit.
Refer-ence resolution uses two different methods for fillingthe different ypes of entities which are also used forgeneral noun phrase reference problems.
Implicitsyntactic entities, ELIDED CONSTITUENTS, are treatedlike pronouns, and implicit semantic entities, ESSEN-TIAL ROLES are treated like definite noun phrases.The pragmatic module as currently implemented con-sists mainly of a reference resolution component,which is sptflcient for the pragmatic issues describedin this paper.
We are in the process of adding a timemodule to handle time issues that have arisen duringthe analysis of the Navy CASREPS.2.
The  Syntact i c  ComponentThe syntactic component has three parts: thegrammar, a parsing mechanism to execute the gram-mar, and a lexicon.
The grammar consists ofcontext-free BNF definitions (currently nulnberingapproximately 80) and associated restrictions(approximately 35).
The restrictions enforce context-sensitive welt-formedness constraints and, in somecases, apply optimization strategies to preventunnecessary structure-building.
Each of these threeparts is described further below.102.1.
Grammar  CoverageThe grammar covers declarative sentences, ques-tions, and sentence fragments.
The rules for frag-ments enable the grammar to parse the 'telegraphic"style characteristic of message traffic, such as diskdrive down, and has select lock.
The present gram-mar parses sentence adjuncts, conjunction, relativeclauses, complex complement structures, and a widevariety of nominal structures, including compoundnouns, nominalized verbs and embedded clauses.The syntax produces a detailed surface structureparse of each sentence (where '~entence" is under-stood to mean the string of words occurring betweentwo periods, whether a full sentence or a fragment).This surface structure is converted into an 'qnter-mediate representation" which regularizes the syntac-tic parse.
That is, it eliminates urface structuredetail not required for the semantic tasks of enforc-ing selectional restrictions and developing the finalrepresentation f the information content of the sen-tence.
An important part of regularization i volvesmapping fragment structures onto canonical verb-subject-object patterns, with missing elementsflagged.
For example, the tvo  fragment consists of atensed  verb  + ob jec t  as in Replaced spindlemotor.
Regularization of this fragment, for example,maps the tvo  sYntactic structure into averb+ subject+ object structure:verb(replace),subject(X),object(Y)As shown here, verb  becomes instantiated with thesurface verb, e.g., replace while the arguments of thesub jec t  and ob jec t  terms are variables.
Thesemantic information derived from the noun phraseobject spindle motor becomes associated with Y.The absence of a surface subject constituent resultsin a lack of semantic information pertaining to X.This lack causes the semantic and pragmatic om-ponents to provide a semantic filler for the missingsubject using general pragmatic principles andspecific domain knowledge.2.2.
Pars ingThe grammar uses the Restriction Grammarparsing framework \[Hirschman1982, Hirschman1985\],which is a logic grammar with facilities for writingand maintaining large grammars.
Restrict:on Gram-mar is a descendent of Sager's string grammar\[Sager1981\].
It uses a top-down left-to-right parsingstrategy, augmented by dynamic rule pru, ing forefficient parsing \[Dowding1986\].
In addition, it Llses ameta:grammatical approach to generate definitionsfor a full range of co-ordlnate conjunction structures\[Hirschman1986\].2.3.
Lex ica l  P rocess ingThe lexicon contains several ~housand entriesrelated to the particular subdomain of equipmentmaintenance.
It is a modified version of the LSP lexi-con with words classified as to part of speech andsubcategorized in limited ways (e.g., verbs are sub-categorized for their complement types).
It also han-dles multi-word idioms, dates, times and partnumbers.
The lexicon can be expanded by means ofan interactive l xical entry program.The lexical processor reduces morphological vari-ants to a single root form which is stored with eachentry.
For example, the form has is transformed tothe root form have in Has select lack.
In addition,this facility is useful in handling abbreviations: theterm awp is regularized to the multi-word expressionwaiting ~for ^ part.
This expression in turn is regular-ized to the root form wait ' for 'part  which takes as adirect object a particular part or part number, as inis awp 2155-6147.Multi-word expressions, which are typical of jar-gon in specialized omains, are handled as single lexi-col items.
This includes expressions uch as diskdrive or select lock, whose meaning within a partic-ular domain is often not readily computed from itscomponent parts.
Handling such frozen expressionsas '~dioms" reduces parse times and number of ambi-guities.Another feature of the lexical processing is theease with which special forms (such as part numbersor dates) can be handled.
A special '$orms grammar",written as a definite clause grammar\[Pereira1980\]can parse part numbers, as in awaiting part 2155-6147, or complex date and time expressions, as indisk drive up at 11/17-1286.
During parsing, theforms grammar performs a well-formedness check onthese expressions and assigns them their appropriatelexical category.3.
Semant icsThere are two separate components that per-form semantic analysis, NOUN PHRASE SEMANTICSand CLAUSE SEMANTICS.
They are each called afterparsing the relevant syntactic structure to testsemantic well-formedness while producing partialsemantic representations.
Clause semantics is basedon Inference Driven Semantic Analysis \[P~tlmer1985\]which decomposes verbs into component meaningsand fills their semantic roles with syntactic consti-tuents.
A KNOWLEDGE BASE, the formalization ofeach domain into logical terms, SEMANTIC PREDI-CATES, is essential for the effective application ofInference Driven Semantic Analysis, and for the finalproduction of a text representation.
The result of thesemantic analysis is a set of PARTIALLY instantiatedl lSemantic predicates which is similar to a framerepresentation.
To produce this representation, thesemantic components hare access to a knowledgebase, the DOMAIN MODEL, that contains genericdescriptions of the domain elements corresponding tothe \]exical entries.
The model includes a detailedrepresentation f the types of assemblies that theseelements can occur in.
The semantic omponents aredesigned to work independently of the particularmodel, and rely on an interface to ensure a well-defined interaction with the domain model.
Thedomain model, noun phrase semantics and clausesemantics are all explained in more detail in the fol-lowing three subsections.3.1.
Domain ModelThe domain currently being modelled by SDC isthe Maintenance Report domain.
The texts beinganalyzed are actual maintenance r ports as they arecalled into the Burroughs Telephone Tracking Sys-tem by the field engineers and typed in by the tele-phone operator.
These reports give informationabout the customer who has the problem, specificsymptoms of the problem, any actions take by thefield engineer to try and correct the problem, andsuccess or failure of such actions.
The goal of thetext analysis is to automatically generate a database of maintenance information that can be used tocorrelate customers to problems, problem types tomachines, and so on.The first step in building a domain model formaintenance r ports is to build a semantic net-likerepresentation f the type of machine involved.
Themachine in the example text given below is theB4700.
The possible parts of a B4700 and the associ-ated properties of these parts can be represented byan isa hierarchy and a haspart hierarchy.
Thesehierarchies are built using four basic predicates:system,lsa,hasprop, haspart.
For example thesystem itself is indicated by system(b4700).
Theisa predicate associates TYPES with components,such as i sa (sp lnd le^motor~motor ) .
Propertiesare associated with components using the hasproprelationship, are are inherited by anything of thesame type.
The main components of the system:cpu, power_supply, disk, printer,peripherals, etc., are indicated by haspar t  rela-tions, such as haspart(b4700,cpu),haspar t (b4700,power_supp ly ) ,haspart(b4700,dlsk),,etc.
These parts are them-selves divided into subparts which are also indicatedby haspar t  relations, such ashaspart(power_supply, converter).This method of representation results in a gen-eral description of a computer system.
Specificmachines represent INSTANCES of this generalrepresentation.
When a particular report is beingprocessed, id relations are created by noun phrasesemantics to associate the specific computer partsbeing mentioned with the part descriptions from thegeneral machine representation.
So a particularB4700 would be indicated by predicates such asthese: id(b4700,systeml), id(cpu,cpul),id(power_supply,power supply1), etc.3.2.
Noun phrase semanticsNoun phrase semantics is called by the parserduring the parse of a sentence, after each nounphrase has been parsed.
It relies hea~iiy on th-domain model for both determining semantic wel lformedness and building partial semantic representa-tions of the noun phrases.
For example, in the ,~cn-tence, field engineer replaced disk drive at11/2/0800, the phrase disk drive at 11/2/0800 isa syntactically acceptable noun phrase, (as inparticipants at the meeting).
However, it is notsemantically acceptable in that at 11/20/800 isintended to designate the time of the replacement,not a property of the disk drive.
Noun phrasesemantics will inform the parser that the nounphrase is not semantically acceptable, and theparser can then look for another parse, In order forthis capability to be fully utilized, however, an exten-sive set of domaln-speclfic rules about semanticacceptability is required.
At present we have only theminimal set used for the development: of the basicmechanism.
For example, in the case described here,at 11/2/0800 is excluded as a modifier for diskdrive by a rule that permits only the name of a loca-tion as the object of at in a prepositional phrasemodifying a noun phrase.Tile second function of noun phrase semanticsis to create a semantic representation f the nounphrase, which will later be operated on by referenceresolution.
For example, the semantics for lhe baddisk drive would be represented by the followingProlog clauses.lid(disk ^ drive,X),bad(X),del'(X), that is, X was referred to with a full,definite noun phrase,full_np (X)\] rather than a pronoun or indefinitenoun phrase.128.3.
Clause semanticsIn order to produce the correct predicates andthe correct instantiations, the verb is first decom-posed into a semantic predicate representationappropriate for the domain.
The arguments to thepredicates constitute the SEMANTIC ROLES of theverb, which are similar to cases.
There are domainspecific criteria for selecting a range of semanticroles.
In this domain the semantic roles include:agent, lnstrument,theme, object l ,object2,symptom and mod.
Semantic roles can be filledeither by a syntactic onstituent supplied by a map-ping rule or by reference resolution, requiring closecooperation between semantics and reference resolu-tion.
Certain semantic roles are categorized asESSENTIAL, so that pragmatics knows that they needto be filled if there is no syntactic onstituent avail-able.
The default categorization is NON-ESSENTIAL,which does not require that the role be filled.
Othersemantic roles are categorized as NON-SPECIFIC orSPECIFIC depending on whether or not the verbrequires a specific referent for that semantic role (seeSection 4).
The example given in Section 5 illus-trates the use of both a non-specific semantic roleand an essential semantic role.
This section explainsthe decompositions of the verbs relevant to theexample, and identifies the important semantic roles.The decomposition of have is very domainspecific.have(time(Per)) <-symptom(object 1(O 1),symptom(S),time(Per))It indicates that a particular symptom is associ-ated with a particular ob jec t ,  as in 'the disk drivehas select lock."
The ob jec t1  semantic role wouldbe filled by the disk drive, the subject of the clause,and the symptom semantic role would be filled byselect lock, the object of the clause.
Thet lme(Per) is always passed around, and is occasion-ally filled by a time adjunct, as in the disk drivehad select lock at 0800.In addition to the mapping rules that are usedto associate syntactic constituents with semanticroles, there are selection restrictions associated witheach semantic role.
The selection restrictions forhave test whether or not the filler of the object lrole is allowed to have the type of symptom that fillsthe symptom role.
For example, only disk driveshave select locks.Mapping RulesThe decomposition of replace, is also a verydomain specific decomposition that indicates that anagent can use an instrument to exchange twoobjects.replace(tinm(Per)) <-cause(agent(A),use(instrument(Z),exchange(object 1(O1),obj ect2(O2),time(Per)~The following mapping rule specifies that the agentcan be indicated by the subject of the clause.agent(A) <-subject(A) / XThe mapping rules make use of intuitionsabout syntactic cues for indicating semantic rolesfirst embodied in the notion of case\[Fillmore1968,Palmer1981\].
Some of these cues arequite general, while other cues are very verb-specific.The mapping rules can take advantage of generali-ties like 'SUBJECT to AGENT" syntactic ues whilestill preserving context sensitivities.
This isaccomplished by making the application of the map-ping rules 'hituation-specific" through the use ofPREDICATE ENVIRONMENTS.
The previous rule isquite general and can be applied to every agentsemantic role in this domain.
This is ~ndicated bythe X on the right hand side of the "/" which refersto the predicate nvironment of the agent ,  i.e., any-thing.
Other rules, such as %VITH-PP to OBJECT2,"are much less general, and can  only apply under aset of specific circumstances.
The predicate nviron-ments for an ob jec t l  and ob jec t2  arespecified more explicitly.
An ob jec t l  can be theobject of the sentence if it is contained in thesemantic decomposition of a verb that includes anagent and belongs to the repair class of verbs.
Anobject2 can be indicated by a with prepositionalphrase if it is contained in the semantic decomposi-tion of a replace verb:objectl(Part l)  <- ob j (ear t l ) /  cause(agent(A),Repaobject2(Part2) <-pp(with,Part2) /cause(agent(A),use(I,exchange(object 1 (O 1),obj e?Select ion Restr iet lonsThe selection restriction on an agent  is that itmust be a field engineer, and an instrument mustbe a tool.
The selection restrictions on the twoobjects are more complicated, since they must bemachine parts, have the same type, and yet alo bedistinct objects.
In addition, the first object mustalready be associated with something else in ahaspart relationship, in other words i t  must alreadybe included in an existing assembly.
:The oppositemust be true of the second object: it must notalready be included in an assembly, so it must not beassociated with anything else in a haspar t  relation-ship.13There is also a pragmatic restriction associatedwith both objects that has not been associated withany of the semantic roles mentioned previously.Both object1 and object2 are essential semanticroles.
Whether or not they are mentioned explicitlyin the sentence, they must be filled, preferably b:?
anan entity that has already been mentioned, but if notthat, then entities will be created to fill them \[Pal-mer1983\].
This is accomplished by making an expli-cit cull to reference resolution to find referents foressential semantic roles, in the same way that refer-ence resolution is called to find the referent of a nounphrase.
This is not done for non-essential roles, suchas the agent  and the ins t rument  in the same verbdecomposition.
If they are not mentioned they aresimply left unfilled.
The ins t rument  is rarely men-tioned, and the agent  could easily be left out, as inThe disk drive was replaced at 0800.
3 In otherdomains, the agent  might be classified as obligatory,and then it wold have to be filled in.There is another semantic role that has animportant pragmatic restriction on it in this example,the object2 semantic role in wait ' for  Apart (awp).idiomVerb(wait ^ for ^  part,time(Per)) <-ordered(object 1(O 1),obj ect2(O2),time(Per))The semantics of wait "for "part indicates that a par-ticular type of part has been ordered, and isexpected to arrive.
But it is not a specific entitythat might have already been mentioned.
It is amore abstract object, which is indicated by restrict-ing it to being non-specific.
This tells reference reso-lution that although a syntactic onstituent, prefer-ably the object, can and should fill this semanticrole, and must be of type machine-part ,  thatreference resolution should not try to find a specificreferent for it (see Section 4).The last verb representation that is needed forthe example is the representation f be.be(time(Per)) <-attribute(theme(T),mod(M),time(Per))In this domain be is used to associate predicateadjectives or nominals with an object, as in diskdrive is up or spindle motor is bad.
Therepresentation merely indicates that a modifier isassociated with an theme in an attribute relation-ship.
Noun phrase semantics will eventually producethe same representation for the bad spindle motor,although it does not yet.3Note that  an elided subject is handled quite differently, as in replacedtliBk tlri=e.
Then the missing subject is assumed to fill the agent  role, and anappropriate referent is found by reference resolution4.
Reference Reso lu t ionReference resolution is the component whichkeeps track of references to entities in the discourse.It creates labels for entities when they are firstdirectly referred to, or when their existence is impliedby the text, and recognizes ubsequent references tothem.
Reference resolution is called from clausesemantics when clause semantics is ready to instan-tiate a semantic role.
It is also called from pragmaticrestrictions when they specify a referent whoseexistence is entailed by the meaning of a verb.The system currently covers many cases ofsingular and plural noun phrases, pronouns, one-anaphora, nominalizations, and non-specific nounphrases; reference resolution also handles adjec-tives, prepositional phrases and possessive pro-nouns modifying noun phrases.
Noun phrases withand without determiners are accepted.
Dates, partnumbers, and proper names are handled as specialcases.
Not yet handled are compound nouns,quantified noun phrases, conjoined noun phrases,relative clauses, and possessive nouns.The general reference resolution mechanism isdescribed in detail in \[Dahl1986\].
In this paper thefocus will be on the interaction between referenceresolution and clause semantics.
The next two sec-tions will discuss how reference resolution is affectedby the different ypes of semantic roles.4.1.
Ob l igatory  Const i tuents  and Essent ia lSemant ic  RolesA slot for a syntactically obligatory constituentsuch as the subject appears in the intermediaterepresentation whether or not a subject is overtlypresent in the sentence.
It is possible to have such aslot because the absence of a subject is a syntacticfact, and is recognized by the parser.
Clause seman-tics calls reference resolution for such an implicitconstituent in the same way that it calls referenceresolution for explicit cqnstituents.
Reference resolu-tion treats elided noun phrases exactly as it treatspronouns, that is by instantiating them to the firstmember of a list of potential pronominal referents,the FocusL ist .
The general treatment of pronounsresembles that of\[Sidnerl979\], although there aresome important differences, which are discussed indetail in \[Dahl1986\].
The hypothesis that elidednoun phrases can be treated in much the same wayas pronouns is consistent with previous claims by\[Gunde11980\], and \[Kameyama1985\], that inlanguages which regularly allow zero-np's, the zerocorresponds to the focus.
If these claims are correct,it is not surprising that in a sublanguage that allowszero-np's, the zero should also correspond to thefOCUS.14After control returns to clause semantics fromreference resolution, semantics checks the selectionalrestrictions for that referent in that semantic role ofthat verb.
If the selectional restrictions fail, back-tracking into reference resolution occurs, and thenext candidate on the FocusList is instantiated asthe referent.
This procedure continues until areferent satisfying the selectional restrictions isfound.
For example, in Disk drive is down.
Hasselect lock, the system instantiates the disk drive,which at this point is the first member of theFocusList, as the object l  of have:\[event39\]have(t ime(t lmel) )symptom(object l ( \ [dr ive l0\ ] ) ,symptom( \ [ lock lT \ ] ) ,t ime(t lmel) )Essential roles might also not be expressed inthe sentence, but their absence cannot be recognizedby the parser, since they can be expressed bysyntactically optional constituents.
For example, inthe field engineer replaced the motor., the newreplacement motor is not mentioned, although in thisdomain it is classified as semantically essential.
Withverbs like replace, the type of the replacement,motor, in this case, is known because it has to be thesame type as the replaced object.
Reference resolu-tion for these roles is called by pragmatic rules whichapply when there is no overt syntactic onstituent tofill a semantic role.
Reference resolution treats thesereferents as if they were full noun phrases withoutdeterminers.
That is, it searches through the contextfor a previously mentioned entity of the appropriatetype, and if it doesn't  find one, it creates a newdiscourse ntity.
The motivation for treating these asfull noun phrases is simply that there is no reason toexpect them to be in focus, as there is for elidednoun phrases.4.2.
Noun Phrases in Non-Speclf ie Con-textsIndefinite noun phrases in contexts like the fieldengineer ordered a disk drive are generally associ-ated with two readings.
In the specific reading thedisk drive ordered is a particular disk drive, say, theone sitting on a certain shelf in the warehouse.
In thenon-specific reading, which is more likely in this sen-tence, no particular disk drive is meant; any diskdrive of the appropriate type will do.
Handling nounphrases in these contexts requires careful integrationof the interaction between semantics and referenceresolution, because semantics knows about the verbsthat create non-specific ontexts, and reference reso-lution knows what to do with noun phrases in thesecontexts.
For these verbs a constraint is associatedwith the semantics rule for the semantic roleobject2 which states that the filler for the object2must be non-specific.
4 This constraint is passed toreference resolution, which represents a non-specificnoun phrase as having a variable in the place of thepointer, for example, id(motor~X).Non-specific semantic roles can be illustratedusing the object2 semantic role in wait~for^part(awp).
The part that is being awaited is non-specific, i.e., can be any part of the appropriate type.This tells reference resolution not to find a specificreferent, so the referent argument of the id relation-ship is left as an uninstantiated variable.
Theanalysis of fe is awp spindle motor would fill theobject l  semantic role with te l  from id ( fe , fe l ) ,and the object2 semantic role with X fromid(spindle ~ motor,X),  as inordered(object l ( fe l ) ,ob ject2(X)) .
If the spin-dle motor is referred to later on in a relationshipwhere it must become specific, then reference resolu-tion can instantiate the variable with an appropriatereferent such as spindle^motor3 (See Section 5.6).5.
Sample Text: A sentence-by-sentenceanalysisThe sample text given below is a slightlyemended version of a maintenance report.
Theparenthetical phrases have been inserted.
The fol-lowing summary of an interactive session with PUN-DIT illustrates the mechanisms by which the syntac-tic, semantic and pragmatic omponents interact toproduce a representation f the text.1.
disk drive (was) down (at) 11/16-2305.2.
(has) select lock.3.
spindle motor is bad.4.
(is) awp spindle motor.5.
(disk drive was) up (at) 11/17-1236.6.
replaced spindle motor.5.1.
Sentence 1: Disk drive was down at11/16-230G.As explained in Section 3.2 above, the nounphrase disk drive leads to the creation of an id a\]"the form: id(dlsk~drlve,\[drlvel\])  Because'datesand names generally refer to unique entities ratherthan to exemplars of a general type, their ids do notcontain a type argument: date( \ [ l l /16 -1100\]),name(\[paon\]).4 The specific reading is not avai lable at present, since it is considered tobe unlikely to occur in this domain.15The interpretation of the first sentence of thereport depends on the semantic rules for the predi-cate be.
The rules for this predicate specify threesemantic roles, an theme to whom or which is attri-buted a modi f ie r ,  and the time.
After a mappingrule in the semantic omponent of the system instan-tiates the theme semantic role with the sentencesubject, disk drive, the reference resolution com-ponent attempts to identify this referent.
Becausedisk drive is in the first sentence of the discourse, noprior references to this entity can be found.
Further,this entity is not presupposed by any prior linguist, icexpressions.
However, in the maintenance domain,when a disk drive is referred to it can be assumed tobe part of a B3700 computer system.
As the systemtries to resolve the reference of the noun phrase diskdrive by looking for previously mentioned isk drives,it finds that the mention of a disk drive presupposesthe existence of a system.
Since no system has beenreferred to, a pointer to a system is created at thesame time that a pointer to the disk drive is created.Both entities are now available for future refer-ence.
In like fashion, the propositional content of acomplete sentence is also made available for futurereference.
The entities corresponding to propositionsare given event labels; thus event l  is the pointer tothe first proposition.
The newly created disk drive,system and event entities now appear in thediscourse information in the form of a llst along withthe date.id(event,\[eventl\])id(dlsk ^  d r ive ,  \ [d r ive l \ ] )date(\[11/le-2305\])id(system, \[system1\])Note however, that only those entities which havebeen explicitly mentioned appear in the FocusList:FocusList: \[\[event1\], \[drlvel\], \[11/16-2305\]\]The propositional entity appears at the head of thefocus list followed by the entities mentioned in fullnoun phrases.fiIn addition to the representation of the newevent, the pragmatic information about the develop-ing discourse now includes information about pa'rt-whole relationships, namely that d r ive l  is a partwhich is contained in systeml.Part-Whole Relationships:haspart(\[systeml\],\[drivel\])The complete representation of eventl, appearingin the event list in the form shown below, indicatesthat at the time given in the prepositional phrase at11/16-2505 there is a state of affairs denoted aseventl  in which a particular disk drive, i.e.,drivel, can be described as down.\ [event l \ ]be( t ime( \ [ l l /1B-2305\ ] ) )attrlbute(theme(\[drivel\] },mod(down) , t ime( \ [ l l /16 -230G\ ] ) )5.2.
Sentence 2: Has select lock.The second sentence of the input text is a sen-tence fragment and is recognized as such by theparser.
Currently, the only type of fragment whichcan be parsed can have a missing subject but musthave a complete verb phrase.
Before semanticanalysis, the output of the parse contains, amongother things, the following constituent list:\ [subj ( \ [X\ ] ) ,ob j ( \ [Y \ ] ) \ ] .
That is, the syntactic com-ponent represents the arguments of the verb as vari-ables.
The fact that there was no overt subject canbe recognized by the absence of semantic informationassociated with X, as discussed in Section 3.2.
Thesemantics for the maintenance domain sublanguagespecilCles that the thematic role instantiated by thedirect object of the verb to have must be a symptomof the entity referred to by the subject.
Referenceresolution treats an empty subject much like a pro-nominal reference, that is, it proposes the firstelement in the FoeusL is t  as a possible referent.The first proposed referent, event l  is rejected bythe semantic selectional constraints associated withthe verb have, which, for this domain, require therole mapped onto the subject to be classified as amachine part and the role mapped onto the directobject to be classified as a symptom.
Sincethe nextitem in the FocusList, drivel, is a machine part,it passes the selectional constraint and becomesmatched with the empty subject of has select lock.Since no select lock has been mentioned previously,the system creates one.
For the sentence as a wholethen, two entities are newly created: the select lock( \ [ loekl \ ] )  and the new propositional event(\[event2\]): id(event, \[event2\]),i d (se lec t^ lock , \ [ loek l \ ] ) .
The following represen-tation is added to the event list, and the FoeusListand Ids are updated appropriately.
6\[event2\]have(tlme(tlmel))symptom(objectl(\[drivel\]),symptom( \[ lock 1 \ ] ) , t ime ( t lme l ) )s The order in which full noun phrase mentions are added to I, neFocusL is t  depends on their syntactic function and linear order, For fullnoun phrases, direct object mentions precede subject mentions followed by allother mentions given in the order in which they occur in the sentence.
See\[Dahl1986\], for details.6 This version only deals with explicit mentions of time, so for this sen-tence tile time argument is filled in with a gensym that standg for an unknownt ime period, The current version of FUNDlT  uses verb tense and verb seman-tics to derive implicit time arguments.165.3.
Sentence  3: Motor  is bad.In the third sentence of the sample text, a newentity is mentioned, motor.
Like disk drive fromsentence 1, motor is a dependent entity.
However,the entity it presupposes i not a computer system,but rather, a disk drive.
The newly mentioned motorbecomes associated with the previously mentioneddisk drive.After processing this sentence, the new entitymotor3  is added to the FocusL is t  along with thenew proposition event3.
Now the discourse infor-mation about part-whole relationships contains infor-mation about both dependent entities, namely thatmotor l  is a part of dr ive l  and that d r ive l  is apart of systeml .haspar t ( \ [d r ive l \ ] ,  [motor 1\])haspar t ( \ [ sys teml \ ] ,  \ [dr ivel \ ] )5.4.
Sentence  4: is awp spindle motor .Awp is an abbreviation for an idiom specific tothis domain, awaiting part.
It has two semanticroles, one of which maps to the sentence subject.The second maps to the direct object, which in thiscase is the non-specific spindle motor as explained inSection 4.2.
The selectlonal restriction that the firstsemantic role of awp be an engineer causes the refer-ence resolution component o create a new engineerentity because no engineer has been mentioned previ-ously.
After processing this sentence, the list ofavailable entities has been incremented by three:id (event ,  \ [event4\])i d (par t , \ [  2317\])id(f ield  ^  engineer ,  \ [englneer 1\])The new event is represented as follows:\[event4\]i d iomVerb(wa i t  ^  for  ^  par t , t ime( t ime2) )wa i t (ob jec t l ( \ [eng ineer l \ ] ) ,ob ject  2 ( \ [_2317\] ) , t ime(t lme2))5.5.
Sentence  5: disk dr ive was up at11/17-0800 In the emended version of sentence 5the disk drive is presumed to be the same drivereferred to previously, that is, d r ive l .
The seman-tic analysis of sentence 5 is very similar to that ofsentence 1.
As shown in the following event represen-tation, the predicate xpressed by the modifier up isattributed to the theme dr ive l  at the specifiedtime.\[eventS\]be(t lme( \ [11/17-12361)  )a t t r ibute( theme( \ [dr ive l \ ] ) ,mod(up) , t lme(  \[11/17-123@\] ))5.6.
Sentence  @: Replaced motor .The sixth sentence is another fragment consist-ing of a verb phrase with no subject.
As before,reference resolution tries to find a referent in thecurrent FocusL is t  which is a semantically accept-able subject given the thematic structure of the verband the domain-specific selectional restrictions asso-ciated with them.
The thematic structure of theverb replace includes an agent  role to be mappedonto the sentence subject.
The only agent  in themaintenance domain is a field engineer.
Referenceresolution finds the previously mentioned engineercreated for awp spindle motor, \ [englneer l \ ] .
Itdoes not find an ins t rument ,  and since this is notan essential role, this is not a problem.
It simply fillsit in with another gensym that stands for an unk-nown filler, unknownl .When looking for the referent of a spindle motorto fill the ob jec t l  role, it first finds the non-specificspindle motor also mentioned in the awp spindlemotor sentence, and a specific referent is found forit.
However, this fails the selection restrictions, sincealthough it is a machine part, it is not already asso-ciated with an assembly, so backtracking occurs andthe referent instantiation is undone.
The next spin-dle motor on the FocusL is t  is the one from spindlemotor is bad, ( \ [motor l \ ] ) .
This does pass the selec-tion restrictions ince it participates in a haspartrelationship.The last semantic role to be filled is theobject2  role.
Now there is a restriction saying thisrole must be filled by a machine part of the sametype as ob jec t l ,  which is not already included in anassembly, viz., the non-specific spindle motor.
Refer-ence resolution finds a new referent for it, whichautomatically instantiates the variable in the idterm as well.
The representation can be decomposedfurther into the two semantic predicates miss ingand inc luded,  which indicate the current status ofthe parts with respect to any existing assemblies.The haspar t  relationships are updated, with the oldhaspar t  relationship for \ [motor l \ ]  being removed,and a new haspart  relationship for \[motor3\] beingadded.
The final representation of the text will bepassed through a filter so that it can be suitablymodified for inclusion in a database.17\[event6\]replace(tlme(tlme3))cause(agent(\[englneerl\]),use(instrument(unknownl),exchange(ohjectl(\[motorl\]),objeet2(\[motor2\]),tlme(tlme3))))included(object 2(\[motor2\]),tlme(tlme3missing(ohj eetl(\[motor 1\]),time(tlme3)Part-Whole Relationships:haspar t(\[drlvel\], [motora\])haspart(\[systeml\], \ [d r lve l \ ] )6.
ConclusionThis paper has discussed the communication betweensyntactic, semantic and pragmatic modules that isnecessary for making implicit linguistic informationexplicit.
The key is letting syntax and semanticsrecognize missing linguistic entities as implicit enti-ties, so that they can be marked as such, and refer-ence resolution can be directed to find specificreferents for the entities.
Implicit entities may beeither empty syntactic constituents in sentence frag-ments or unfilled semantic roles associated withdomain-specific verb decompo~'Jitions, in this way thetask of making implicit information explicit becomesa subset of the tasks performed by reference resolu-tion.
The success of this approach is dependent onthe use of syntactic .and semantic categorizationssuch as ELLIDED and ESSENTIAL which are meaning-ful to reference resolution, and which can guide refer-ence resolution's decision making process.ACKNOWLED GEMENTSWe would like to thank Bonnie Webb,er for her veryhelpful suggestions on exemplifyingsemantics/pragmatics cooperation.REFERENCES\[Dahl1986\]Deborah A. Dahl, Focusing and ReferenceResolution in PUNDIT, submitted for publi-cation, 1986.\[Dowdlng1986\]John Dowding and Lynette Hirschman,Dynamic Translation for Rule Pruning inRestriction Grammar, submitted to AAAI-86, Philadelphia, 1986.\[Fillmore1968\]C. J. Fillmore, The Case for Case.
InUniversals in Linguistic Theory, E. Bachand R. T. Harms (ed.
), Holt, Rinehart, andWinston, New York, 1968.\[Gundel1980\]Jeanette K. Gundel, Zero-NP Anaphora inRussian.
Chicago Linguistic SocietyParasession on Pronouns and Anaphora,1980.\[Hirschman1982\]L. Hirschman and K. Puder, RestrictionGrammar in Prolog.
In Proc.
of the FirstInternational Logic Programming Confer-ence, M. Van Caneghem (ed.
), Associationpour la Diffusion et le Developpement deProlog, Marseilles, 1982, pp.
85-90.\[Hirschman1985\]L. Hirschman and K. Puder, RestrictionGrammar: A Prolog Implementation.
In Log-ic Programming and its Applications,D.H.D.
Warren and M. VanCaneghem (ed.),1985.\[Hirschman1986\]L.
Hirschman, Conjunction in Meta-Restriction Grammar.
J. of Logic Program-ruing, 1986.\[Kameyama1985\]Megumi Kameyama, Zero Anaphora: TheCase of Japanese, Ph.D. thesis, StanfordUniversity, 1985.\[Pahner1983\]M. Palmer, Inference Driven SemanticAnalysis.
In Proceedings of the NationalConference on Artificial Intelligence(AAAI-88), Washington, D.C., 1983.\[Palmer1981\]Martha S. Palmer, A Case for Rule DrivenSemantic Processing.
Proc.
of the 19thACL Conference, June, 1981.18\[Palmer1985\]Martha S. Palmer, Driving Semantics for aLimited Domain, Ph.D. thesis, University ofEdinburgh, 1985.\[Pereira1980\]F. C. N. Pereira and D. H. D. Warren,Definite Clause Grammars for LanguageAnalysis -- A Survey of the Formalism and aComparison with Augmented TransitionNetworks.
Artificial Intelligence,13, 1980,pp.
231-278.\[Sager1981\]N. Sager, Natural Language InformationProcessing: A Computer Grammar o\] En-glish and Its Applications.
Addison-Wesley,Reading, Mass., 1981.\[Sidner1979\]Candace Lee Sidner, Towards a Computa-tional Theory of Definite AnaphoraComprehension i English Discourse, MIT-AI TR-537, Cambridge, M_A, 1979.19
