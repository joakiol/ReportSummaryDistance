EFFICIENT PARSING FOR FRENCH*Claire GardentUniversity Blaise Pascal - Clermont II and University of Edinburgh, Centre for Cognitive Science,2 Buccleuch Place, Edinburgh EH89LW, SCOTLAND, LrKGabriel G. B~s, Pierre-Franqois Jude and Karine Baschung,Universit~ Blaise Pascal - Clermont II, Formation Doctorale Linguistique t Informatique,34, Ave, Carnot, 63037 Clermont-Ferrand Cedex, FRANCEABSTRACTParsing with categorial grammars often leads toproblems such as proliferating lexical ambiguity, spu-rious parses and overgeneration.
This paper presents aparser for French developed on an unification basedcategorial grammar (FG) which avoids these pro-blem s. This parser is a bottom-up c hart parser augmen-ted with a heuristic eliminating spurious parses.
Theunicity and completeness of parsing are proved.INTRODUCTIONOur aim is twofold.
First to provide a linguistical-ly well motivated categorial grammar for French(henceforth, FG) which accounts for word order varia-tions without overgenerating and without unnecessarylexical ambiguities.
Second, to enhance parsing effi-ciency by eliminating spurious parses, i.e.
parses with?
different derivation trees but equivalent semantics.The two goals are related in that the parsing strategyrelies on properties of the grammar which are indepen-dently motivated by the linguistic data.
Nevertheless,the knowledge embodied inthe grammar iskept inde-pendent from the processing phase.1.
LINGUISTIC THEORIES ANDWORD ORDERWord order remains a pervasive issue for mostlinguistic analyses.
Among the theories most closelyrelated to FG, Unification Categorial Grammar(UCG : Zeevat et al 1987), Combinatory CategorialGrammar (CCG : Steedman 1985, Steedman 1988),Categorial Unification Grammar (CUG : Karttunen1986) and Head-driven Phrase Structure Grammar(I-IPSG: Pollard & Sag 1988) all present inconvenien-ces in their way of dealing with word order as regardsparsing efficiency and/or linguistic data.
* The workreported here was carried outin the ESPR/T Project 393ACORD, ,,The Construction a d Interrogation f KnowledgeBases using Natural Language T xt and Graphics~.280In UCG and in CCG, the verb typically encodes thenotion of a canonical ordering of the verb arguments.Word order variations are then handled by resorting tolexical ambiguity and jump rules ~ (UCG) or to newcombinators (CCG).
As a result, the number of lexicaland/or phrasal edges increases rapidly thus affectingparsing efficiency.
Moreover, empirical evidence doesnot support the notion of a canonical order for French(cf.
B~s & Gardent 1989).In contrast, CUG, GPSG (Gazdar et al 1985) andHPSG do not assume any canonical order and subcate-gorisation information is dissociated from surfaceword order.
Constraints on word order are enforced byfeatures and graph unification (CUG) or by Linear Pre-cedence (LP) statements (HPSG, GPSG).
The pro-blems with CUG are that on the computational side,graph-unification is costly and less efficient in a Prologenvironment than term unification while from thelinguistic point of view (a) NP's must be assumedunambiguous with respect to case which is not true for- at least - French and (b) clitic doubling cannot be ac-counted for as a result of using graph unificationbetween the argument feature structure and the functorsyntax value-set.
In HPSG and GPSG (cf.
also Uszko-reit 1987), the problem is that somehow, LP statementsmust be made to interact with the corresponding ruleschemas.
That is, either ule schemas and LP state-ments are precompiled before parsing and the numberof rules increases rapidly or LP statements are checkedon the fly during parsing thus slowing down proces-sing.2.
THE GRAMMARThe formal characteristics of FG underlying theparsing heuristic are presented in ?4.
The characteris-tics of FG necessary tounderstand the grammar are re-sumed here (see (B~s & Gardent 89) for a more detailedpresentation).t Ajumpmle of the form X/Y, YfZ ---~ X/Z where X/Yis atype raisedNP and Y/Z is a verb.FG accounts for French linearity phenomena, em-bedded sentences and unbounded dependencies.
It isderived from UCG and conserves most of the basiccharacteristics of the model : monostratality, lexica-lism, unification-based formalism and binary combi-natory rules restricted to adjacent signs.
Furthermore,FG, as UCG, analyses NP's as type-raised categories.FG departs from UCG in that (i) linguistic entitiessuch as verbs and nouns, sub-categorize for a set- rather than a l ist-of valencies ; (ii) a feature systemis introduced which embodies the interaction of thedifferent elements conditioning word order ; (iii) FGsemantics, though derived irectly from InL ~, leave thescope of seeping operators undefined.The FG sign presents four types of information re-levant to the discussion of this paper :(a) Category, Co)Valency set ; (c) Features ; (d) Semantics.
Only twocombinatory rules-forward and backward concatena-tion - are used, together with a deletion rule.A Category can be basic or complex.
A basic ca-tegory is of the form Head, where Head is an atomicsymbol (n(oun), np or s(entence)).
Complex categoriesare of the form C/Sign, where C is either atomic orcomplex, and Sign is a sign called the active sign.With regard to the Category information, the FGtypology of signs is reduced to the following.
(1)Type Category Linguistic entitiesf0 Head verb, nounfl Head/f0 NP, PP, adjective, adverb,auxiliary, negative paniclesf2 (fl)/signi(a) sign i = f0Co) sign i = flDeterminer, complementi-zer, relative pronounPrepositionThus, the result of the concatenation f a NP (fl)with a verb (f0) is a verbal sign (f0).
Wrt the concate-nation rules, f0 signs are arguments; fl signs are eitherfunctors of f0 signs, or arguments off2 signs.
Signs oftype 1"2 are leaves and fanctors.Valencies in the Valency Set are signs which ex-press ub-categorisation.
Thesemantics ofa fO sign isa predicate with an argumental list.
Variables hared bythe semantics ofeach valency and by the predicate list,relate the semantics of the valency with the semanticsof the predicate.
Nouns and verbs sub-categorize notonly for "normal" valencies uch as nom(inative),dat(ive), etc, but also for a mod(ifier) valency, which isconsumed and recursively reintroduced by modifiers(adjectives, laP's and adverbs).
Thus, in FG the com-: In/.
(Indexed language) isthe semantics incorporated toUCG ; itderives from Kamp's DRT.
From hereafter werefer to FG semanticsas InL'.281plete combinatorial potential of a predicate isincorpo-rated into its valency set and a unified treatment ofnominal and verbal modifiers is proposed.
The activesign of a fl functor indicates the valency - ff any -which the functor consumes.No order value (or directional s ash) is associatedwith valencies.
Instead, Features express adjacent andnon-adjacent constraints on constituent ordering,which are enforced by the unification-based combina-tory rules.
Constraints can be stated not only betweenthe active sign of a functor and its argument, but alsobetween a valency, of a sign., the sign.
and the active J J .
Jsign of the fl functor consuming valency~ while con-catenating with sign~ As a result, the valency of a verbor era noun imposes constraints not only on the functorwhich consumes it, but also on subsequent concatena-tions.
The feature percolation system underlies thepartial associativity property of the grammar (cf.
?4).As mentioned above, the Semanticspart of he signcontains an InL' formula.
In FG different derivations ofa string may yield sentence signs whose InL' formulaeare formally different, inthat he order of their sub-for-mulae are different, but the set of their sub-formulaeare equal.
Furthermore, sub-formulae re so built thatformulae differing in the ordering of their sub-formu-lae can in principle be translated toa semantically equi-valent representation in a first order predicate logic.This is because : (i) in InL', the scope of seepingoperators i left undefined ; (ii) shared variables ex-press the relation between determiner and restrictor,and between seeping operators and their semanticarguments ; (iii) the grammar places constants (i.e.proper names) in the specified place of the argumentallist of the predicate.
For instance, FG associates to(2)the InL' formulae in (3a) and (3b) :(2) Un garcon pr~sente Marie ~ une fille(3) (a) \[15\] \[indCX) & garcon(X) & ind(Y) & fiRe(Y) &presenter (E,X,marie,Y)\]Co) \[E\] \[indCO & fille(Y) & ind(X) & gar~on(X) &presenter (E,X,marie,Y)\]While a seeping operator of a sentence constituentis related to its argument by the index of a noun (as inthe above (3)), the relation between the argument of aseeping operator and the verbal unit is expressed by theindex of the verb.
For instance, the negative version of(2) will incorporate he sub-formula neg (E).In InL' formulae, determiners (which are leavesand f2 signs, el.
above), immediately precede their es-trictors.
In formally different InL' formulae, only theordering of seeping operators sub-formulae can differ,but this can be shown to be irrelevant with regard to thesemantics.
InFrench, scope ambiguity isthe same formembers of each of the following pairs, while theordering of their corresponding semantic sub-formu-lae, thanks to concatenation f adjacent signs, is ines-capably different.
(4) (a) Jacques avait donn6 un livre (a) ~ tousles dtu-diants (b ).
(a) Jacques avait donn6 d tousles dtudiants(b) unlivre (a).
(b) Un livre a 6t~ command6 par chaque ~tudiant(a) dune librairie (b).Co') Un livre a6t6 command6d une librairie (b)parchaque dtudiant (a).At the grammatical level (i.e.
leaving aside prag-matic onsiderations),the translation of an InL' formu-la to a scoped logical formula can be determined by thespecific scoping operator involved (indicated in thesub-formula) nd by its relation to its semantic argu-ment (indicated by shared variables).
This translationmust introduce the adequate quantifiers, determinetheir scope and interpret the'&' separator as either ^ or-->, as well as introduce .1. in negative forms.
For ins-tahoe, the InL' formulae in (Y) translate ~ to :(5) 3E, 3X, 3Y (garqon(X)^ fille(Y) ^ pr6senter(E,X~narie,Y)).We assume here the possibility of this translationwithout saying any more on it.
Since this translationprocedure cannot be defined on the basis of the order ofthe sub-formulae corresponding to the scoping opera-tors, InL' formulae which differ only wrt the order oftheir sub-formulae re said to be semantically equiva-lent.3.
THE PARSERBecause the subcategorisation nformation is re-presented as a set rather than as a list, there is noconstraint on the order in which each valency isconsumed.
This raises a problem with respect to par-sing which is that for any triplet X,Y,Z where Y is averb and X and Z are arguments othis verb, there willoften be two possible derivations i.e., (XY)Z andxo'z).The problem of spurious parses is a well-knownone in extensions of pure categorial grammar.
It deri-ves either from using other ules or combinators for de-rivation than just functional pplication (Pareschi andSteedman 1987, Wittenburg 1987, Moortgat 1987,Morrill 1988) or from having anordered set valencies(Karttunen 1986), the latter case being that of FG.Various olutions have been proposed inrelation tothis problem.
Karttunen's solution is to check that forany potential edge, no equivalent analysis is alreadyIn (5) 3E can be paraphrased as "There xists an event".282stored in the chart for the same string of words.
Howe-ver as explained above, two semantically equivalentformulae of InL' need not be syntactically identical.Reducing two formulae to a normal form to check theirequivalence oralternatively reducing one to the othermight require 2* permutations with n the number ofpredicates occaring in the formulae.
Given that he testmust occur each time that two edges tretch over thesame region and given that itrequires exponential time,this solution was disguarded as computationaUy inef-ficient.Pareschi's lazy parsing algorithm (Pareschi, 1987)has been shown (I-Iepple, 1987) to be incomplete.Wittenburg's predictive combinators avoid the parsingproblem by advocating grammar compilation which isnot our concern here.
Morilrs proposal of definingequivalence lasses on derivations cannot be transpo-sed to FG since the equivalence lass that would be ofrelevance to our problem i.e., ((X,Z)Y, X(ZY)) is notan equivalence lass due to our analysis of modifiers.Finally, Moortgat's olution is not possible since itrelies on the fact that he grammar isstructurally com-plete ~ which FG is not.The solution we offer is to augment a shift-reduceparser with a heuristic whose essential content is thatno same functor may consume twice the same valency.This ensures that for all semantically unambiguoussentences, only one parse is output.
To ensure that aparse is always output whenever there is one, that is toensure that the parser is complete, the heuristic onlyapplies to a restricted set of edge pairs and the chart isorganized as aqueue.
Coupled with the parlial-associa-tivity of FG, this strategy guarantees that the parser iscomplete (of.
?4).3.1 THE HEURIST ICThe heuristic onstrains the combination of edgesin the following way 2.Let el be an edge stretching from $1 to E1 labelledwith the typefl~, a predicate identifier pl and a signSign1, let e2 be an edge stretching from E1 to $2labelled with type f l  and a sign Sign,?, then e2 willreduce with el by consuming the valency Val of pl ife2 has not already reduced with an edge el 'by consu-ming the valency Valofpl where l 'stretches from $1"to E1 and $1' ~ $1.In the rest of this section, examples illustrate howA structurally complete grammar is one such that :If a sequence of categories X I.. Xn reduces toY, there isa red u~onto Y for any bracketing of Xl .. Ym into constituents (Moortgat,19S7).2 A mote complete difinition is given in the description ftheparsing algorithm below.this heuristic eliminates purious parses, while allo-wing for real ambiguities.Avoiding spurious parsesConsider the derivation in (6)(6) Jean aime Marie0-Ed l  - I - Ed2-2  - F.A3- 30 .
.
.
.
.
.
Ed4 .
.
.
.
.
.
2 Ed4 ffi Ed l (Ed2,p l ,subj )0 .
.
.
.
.
.
Ed5 .
.
.
.
.
.
2 *Ed5 = Edl (Ed2,p l ,  obj)I .
.
.
.
.
.
Ed6 .
.
.
.
.
.
.
3 Ed6 = Ed3(Ed2,pLobj)l .
.
.
.
.
.
.
Ed7 .
.
.
.
.
.
.
3 Ed7 ffi EcL3(Ed2,pLsubj)0 .
.
.
.
.
.
Ed8 .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
3 Ed8 = Edl (Ed6,p l ,  subj)0 .
.
.
.
Ed9 .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
3 *Ed9 = FA3(Ed4,pl,obj)0 .
.
.
.
.
.
Ed l0  .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
3 *Ed l0= Edl(EdT,pl ,obj)where Ed4 = Edl(Ed2,pl,subj) indicates that the edgeEd 1 reduces with Ed2 by consuming the subject valen-cy of the edge Ed2 with predicate pl.Ed5 and EdlO are ruled out by the grammar sincein French no lexical (as opposed to clirics and wh-NP)object NP may appear to the left of the verb.
Ed9 isruled out by the heuristic since Ed3 has already consu-med the object valency of the predicate pl thus yiel-ding Ed6.
Note also that Edl may consume twice thesubject valency ofpl  thus yielding Ed4 and Ed8 sincethe heuristic does not apply to pairs of edges labelledwith signs Of type fl and f0 respectively.Producing as many parses as there are readingsThe proviso that a functor edge cannot combinewith two different edges by consuming twice the samevalency on the same predicate nsures that PP attach-ment ambiguities are preserved.
Consider (7) for ins-tance  1.
(7) Regarde le chien darts la rue0 --Edl --- 1 ---Ed2 - 2 - Ed3 .... 3 --- Ed4 ....... 4I ..... Ed5 ........... 30 ................... Ed6 ........... 32 .............. Ed7 .......... 41 ...... Ed8 .............................. 40 ................... Ed9 .............................. 40 ................... Edl0 ............................. 4with Ed7 = Ed4(Ed3,p2,mod)Ed8 = Ed2(Ed7)Ed9 = Ed8(Edl,pl,obj)EdlO = Ed4(Ed6,p l,mod)where pl and p2 are the predicate identifiers labellingthe edges Edl and Ed3 respectively.The above heuristic allows a functor to concatenatetwice by consuming two different valencies.
This caset For the sake of  clarity, all i re levant edges have been omitted.
Th ispract ice  wil l  hold throughout the sequel.283of real ambiguity is illustrated in (8).
(8) Quel homme pr6sente Marie ~t Rose ?0 .... Edl .
.
.
.
1 - - -Ed2--2- -Ed3-- -3- -  Ed4--- 41 .......... Ed4 ........ 31 .......... Ed5 ........ 30 ................ Ed6 ..... .
.
.
.
.
.
.
.
.
.
.
.
.
.
30 ................ Ed7 ................... 3where Ed4 = (Ed3,pl,nom)and Ed5 = (Ed3,pl,obj)Thus, only edges of the same length correspond totwo different readings.
This is the reason why theheuristic allows a functor to consume twice the samevalency on the same predicate iff it combines with twoedges E andE' thatstretch over the same region.
A casein point is illustrated in (9)(9) Quel homme pr6sente Marie ~ Rose ?0 .... Edl .
.
.
.
1 - - -Ed2--2- -Ed3-- -3- -  Ed4--- 41 .......... Ed5 ........ 31 .......... Ed6 ........ 31 .
.
.
.
.
.
.
.
.
Ed7 ...................... 41 .
.
.
.
.
.
.
.
.
Ed8 .......... .
.
.
.
.
.
.
.
.
.
.
.
40 .... Ed9 ..... .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
40 .... Edl0 .... .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
4where a Rose concatenates twice by consuming twicethe same - dative - valency of the same predicate.3.2 THE PARSING ALGORITHMThe parser is a shift-reduce parser integrating achart and augmented with the heuristic.An edge in the chart contains the following infor-marion :edge \[Name, Type, Heur, S,E, Sign\]where Name is the name of the edge, S and E identifiesthe startingand the ending vertex and Sign is the signlabelling the edge.
Type and Heur contain the info'r-marion used by the heuristic.
Type is either f0, fl andt2 while the content of Heur depends on the type of theedge and on whether or not the edge has alreadycombined with some other edge(s).Heurf0 pX where X is an integer.pX identifies the predicate associated with anyedge.type fOfl before combination : Vatwhere Var is the anonymous variable.
This indica-tes that here is as yet no information available thatcould violate the heuristic.after combination : Heur-Listwhere Heur-List is a list of triplets of the form\[Edge,pX.Val\] and Edge indicates an argumentedge with which the functor edge has combined byconsuming valency Val of the predicate pX label-ling Edge.f2 nilThe basic parsing algorithm is that of a normalshift-reduce parser integrating a chart rather than astack i.e.,1.
Starting from the beginning of the sentence, foreach word W either shift or reduce,2.
Stop when there is no more word to shift and nomore reduce to perfomi,3.
Accept or reject.Shifting a word W consists in adding to the chart asmany lexical edges as there are lexical entries associa-ted with W in the lexicon.
Reducing an edge E consistsin trying to reduce E with any adjacent edge E' alreadystored in the chart.
The operation applies recursively inthat whenever a new edge E" is created it is immedia-tely added to the chart and tried for reduction.
Theorder in which edges tried for reduction are retrievedfrom the chart corresponds toorganising the chart as aqueue i.e., f'n'st-in- ftrst-out.
Step 3 consists in checkingthe chart for an edge stretching from the beginning tothe end of the chart and labelled with a sign of categorys(entence).
If there is such an edge, the string isaccepted - else it is rejected.The heuristic is integrated inthe reduce procedurewhich can be defined as follows.Two edges Edge 1 and Edge2 will reduce to a newedge Edge3 iff -Either (a)1.
Edgel = \[el,Typel,H1,E2,Signl\] and2.
Edge2 = \[e2,Type2,H2,E2,Sign2\] a d<Typel,Type2> # <f0,fl> and3.
apply(Sign 1,Sign2,Sign3) and4.
Edge3 = \[e3,Type3,H3,E3,Sign3\] a d<$3,E3> =<S I,E2>or (b)1.
Edgel = \[el,f0,pl,S1,E1,Signl\] and2.
Edge2 = \[e2,fl,I-I2,S2,E2,Sign2\] andE1 = $2 and3.
bapply(Signl,Sign2,Sign3) by consuming thevalency Val and4.
H2 does not contain a triplet of the form\[el',pl,Val\] where Edge 1' = \[el',f0,pl,S'l,S2\]and S'I"-S15.
Edge3 = \[e3,f0,pl,S1,E2,Sign3\]6.
The heuristic information H2 in Edge2 is upda-ted to \[e 1,p 1,Val\]+I-I2where '+ 'indicates list concatenation a d under theproviso that the triplet does not already belong to H2.Where apply(Sign1 ,Sign2,Sign3) means that Sign 1can combine with Sign2 to yield Sign3 by one of thetwo combinatory ules of FG and bapply indicates thebackward combinatory ule.284This algorithm is best illustrated by a short exam-ple.
Consider for instance, the parsing of the sentencePierre aime Marie.
Stepl shifts Pierre thus addingEdgel to the chart.
Because the grammar is designedto avoid spurious lexical ambiguity, only one edge iscreated.Edgel = \[el,fl,_,0,1,Signl\]Since there is no adjacent edge with which Edgelcould be reduced, the next word is shifted i.e., aimethus yielding Edge2 that is also added to the chart.Edge2 = \[e2,f0,p 1,1,2,S ign2\]Edge2 can reduce with Edgel since Signl cancombine with Sign2 to yield Sign3 by consuming thesubject valency of the predicate pl.
The resulting edgeEdge3 is added to the chart while the heuristic infor-mation of the functor edge Edgel is updated :Edge3 = \[e3,f0,p 1,0,2,Sign3 \]Edgel = \[el,fl ,\[\[e3,pl,subj\]\],0,1 ,Sign \]No more reduction can occur so that the last wordMarie is shifted thus adding Edge4 to the chart.Edge,4 = \[e4,fl,_,2,3,Sig4\]Edg4 first reduces with Edeg2 by consuming the sub-ject valency ofpl  thus creating Edge5.
It also reduceswith Edge2 by consuming the object valency ofpl  toyield Edge6.Edge5 = \[e5,f0,pl,l,3,Sign5\]Edge6 - \[e6,f0,p 1,1,3,S ign6\]Edge4 is updated as follows.Edge4 = \[e4,fl,\[\[e2,pl,subj\],\[e2,pl,obj\]\],2,3,Sign4\]At this stage, the chart contains the following edges.Pierre aime Marie0 - -e l  ~ 1 ~e2- -2~e4- -30 e3 ~ 31 e5~31 e6~3Now Edge1 can reduce with Edge6 by consumingthe subject valency of pl thus yielding Edge7.
Howe-ver, the heuristic forbids Edge4 to consume the objectvalency of pl on Edge3 since Edge4 has alreadyconsumed the object valency of pl when combiningwith Edge2.
In this way, the spurious parse Edge8 isavoided.The final chart is as follows.Pierre aime Marie0 - -e lw  l - -e2  ..... 2we4- -  30 e3 31 e5 - -  31 e6~ 30 e7 3*0 - - - - - -  e8 3withEdge7 = \[e7,f0,pl,0,3,Sign7\]Edge4 = \[e4 ,fl, \[ \[e2 ,p 1 ,s ubj\], \[e2 ,p 1, obj\] \,2,3 ,S ign4\]"Edge 1 = \[e 1, fl,\[ \[e2,p I ,sub j\] \] ,0,1 ,Sign 1 \]4.
UNICITY AND COMPLETNESSOF THE PARSINGDEFINITIONS1.
An indexed lexical f0 is a pair <X,i> where X is alexical sign of f0 type (c.f.
2) and i is an integer.2.
PARSE denotes the free algebra recursively definedby the following conditions.2.1 Every lexical sign of type fl or f2, and everyindexed lexical f0 is a member of PARSE.2.2 If P and Q are elements of PARSE, i is an integer,and k is a name of a valency then (P+aQ) is amember of PARSE.2.3 If P and Q are elements of PARSE, (P+imQ) is amember of PARSE, where I~ is a new symbol}3.
For each member, P, of PARSE, the string of theleaves of P is defined recursively as usual :3.1 If P is a lexical functor or a lexical indexed argu-ment, L(P) is the string reduced to P.3.2 L(P+~tQ) is the string obtained by concatenation fL(P) and L(Q).4.
A member P of PARSE, is called a well indexedparse (WP) if two indexed leaves which have differentranges in L(P), have different indicies.5.
The partial function, SO:'), from the set of WP to theset of signs, is defined recursively by the followingconditions :5.1 I fP is a leave S(P) = P5.2 S(F+ikA) = Z \[resp.
S(A+ikF) = Z\] (km )If S (F) is a functor of type fl, S(A) is an argument andZ is the result sign by the FC rule \[resp.
BC rule\]when S(F) consumes the valency named k in theleave of S(A) indexed by i.5.3 S(P+ilnA ) = Z \[res.
S(A+i~-" ) = Z\] if S(F) is a functorof type fl or f2, S(A) is an argument sign and Z isthe result sign by the FC rule \[resp.
BC rule\].6.
For each pair of signs X and Y we denote X.=.
Y if Xand Y are such that heir non semantic parts are formal-ly equal and their semantic part is semantically equiva-lent.I In 2.3 the index i is just introduced for notational convenience andwill not be used ;k,l.., will denote avalency name or the symbol m.2857.
IfP and Q are WPP =Qi f f7.1 S(P) and S(Q) are defined7.2 S(P) = S(Q) and7.3 L(P) = L(Q)8.
A WP is called acceptedif it is accepted by the parseraugmented with the heuristic described in ?3.THEOREM1.
(Unicity) IfP and Q are accepted WP's and ifP = Q,then P and Q are formally equal.2.
(Completeness) IfP is a WP which is accepted by thegrammar, and S(P) is a sign corresponding to a gram-matical sentence, then there xists a WP Q such that :a) Q is accepted, andb)P =Q.NOTATIONAL CONVENTIONF, F'...(resp.
A,A',...) will denote WP's such that S(F),S(F')...are functors of type fl (resp.
S(A), S(A') .... arearguments of type f0).The proof of the theorem isbased on the followingproperties 1 to 3 of the grammar.
Property 1 followsdirectly from the grammar itself (cf.
?2) ; the other twoare strong conjectures which we expect o prove in anear future.PROPERTY 1 If S(K) is defined and L(K) is not alexical eaf, then :a) If K is of type f0, there xist i,k,F and A such that :K = F+ikA or K = A+ikFb) If K is of type fl, there xist Fu of type f2 and Ar oftype f0 or of type fl such that :K = Fu+imArc) K is not of type f2.PROPERTY 2 (Decomposition u icity) :For every i and kif F+i~A = F+ixA', or A+i~F -- A'+i~t.Fthen i= i', k = k', A--A' and F = F'PROPERTY 3 (Partial associativity) :For every F,A,F' such that L(F) L(A) L(F') is a sub-string of a string oflexical entries which is accepted bythe grammar as a grammatical sentence,a) If S\[F+i~(A+aF)\] and S\[(F+ikA)+u F'\] are defined,then F+ii(A+ilF' ) = (F+~A)+IIFb) If S\[A+nF \] and S\[(F+ikA)+aF \] are defined,then S\[F+ik(A+nF)\] is also defined.LEMMA 1If F+ikA = A'+jtF'then A'+j~F' is not accepted.Proof  : L(F) is a proper substring of L(A), so thereexists A" such that :a) S(A"+jlF) is defined, andb) L(A") is a substfing of L(A)But A' begins by F and F is not contained inA", so A"is an edge shorter than A'.
Thus A'+F' is not accepted.LEMMA 2If S\[(A+tkF)+uF'\] is defined andA+ikF is accepted, then(A+tkF)+uF is also accepted.Proof  : Suppose, a contrario, that (A+ikF)+nF is notaccepted.
Then there must exist an edgeA' = A"+i~F such that :a) S(A'+nF) is defined, andb) A' is shorter than A+ikFThis implies that A" is shorter than A.Therefore A+ikF would not be accepted.PROOF OF THE PART 1 OF THE THEOREMTile proof is by induction on the lengh, lg(P), ofL(P).
So we suppose a) and b) :a) (induction hypothesis).
For every P' and Q' such thatP' and Q' are accepted, if P' =_ Q', andlg(P') < n, then P' =Q'b) P and Q are accepted, P = Q andlg(P) = nand we have to prove thatC) P= Q.First  cas : if lg(P) = 1, then we haveP = L(P) = L(Q) = Q.Second cas : if lg(P) > 1, then we havelg(Q) > 1 since L(P) = L(Q).
Thus there exist P't, P'2,Q't, Q'2, i, k, j, 1, such thatP = P'~+u P'2 and Q = Q't+~Q'2By the Lemma 1 P't and Q't must be both functorsor both arguments.
And ifP'~ and Q'~ are functors (res.arguments) then P'2 and Q'2 are arguments (resp.
func-tors).
So by Property 2, we have :i = i', k = k', P'l -- Q't, and P'2 =- Q' 2 .Then the induction hypothesis implies that P't = Q't andthat P'2 = Q'2" Thus we have proved that P = Q.PROOF OF THE PART 2 OF THE THEOREMLet P be a WP such that S(P) is define and cortes-286ponds to a grammatical sentence.
We will prove, byinduction on the lengh of L(K), that for all the subtreesK of P, there exists K' such that :a) K' is accepted, andb) K_=_K'.We consider the following cases (Property 1)1.
I fK is  a leaf then K' = K2.
If K = F+tkA, then by the induction hypothesisthere exist F' and A' such that :(i) F' and A' are accepted, and(ii) F_=_ F', A = A'.Then F'+A' is also accepted.
So that K' can be choosedas F'+A'.3.
If K = A+ikF, we define F, A' as in (2) and weconsider the following subcases :3.1 If A' is a leaf or if A' = FI+jlA1 where S(AI+~ F')is not def'med, then A'+~F is accepted, and we cantake it as K.3.2 If A' = Al+ilF1, then by the Lemma 2 A'+~kF' isaccepted.
Thus we can define K' as A'+u F'.3.3 IfA' = FI+nA1 and S(AI+~ F) is defined.Let A2 = Al+ikF.By the Property 3 S(FI+jlA2) is definedand K = A'+tkF = FI+jlA2.Thus this case reduces to case 2.4.
If K = Fu+~Ar, where Fu is of type f2 and Ar is oftype f0 or fl, then by induction hypothesis there existsAt' such that Ar ~_ Ar' and At' is accepted.
Then K canbe defined as Fu+i?Ar'.5.
IMPLEMENTATION AND COVE-RAGEFG is implemented in PIMPLE, a PROLOG termunification implementation f PATR II (cf.
Calder1987) developed at Edinburgh University (Centre forCognitive Studies).
Modifications to the parsing algo-rithm have been introduced at the "Universit6 BlaisePascal", Clermont-Ferrand.
The system runs on a SUNM 3/50 and is being extensively tested.
It covers atpresent : declarative, interrogative and negative sen-tences in all moods, with simple and complex verbforms.
This includes yes/no questions, constituentquestions, negative sentences, linearity phenomenaintroduced by interrogative inversions, emi free cons-tituent order, clitics (including reflexives), agreementphenomena (including ender and number agreementbetween obj NP to the left of the verb and participles),passives, embedded sentences and unbounded depen-dencies.REFERENCESB~s, G.G.
and C. Gardent (1989) French Order withoutOrder.
To appear in the Proceedings of the FourthEuropean ACL Conference (UMIST, Manchester,10-12 April 1989), 249-255.Calder, J.
(1987) PIMPLE ; A PROLOG Implementa-tion of the PATR-H Linguistic Environment.
Edin-burgh, Centre for Cognitive Science.Gazdar, G., Klein, E., Pullum, G., and Sag., I.
(1985)Generalized Phrase Structure Grammar.
London:Basil Blackwell.Kamp, H. (1981) A Theory of Truth and SemanticRepresentation.
I  Groenendijk, J.
A. G., Janssen,T.
M. V. and Stokhof, M. B. J.
(eds.)
FormalMethods in the Study of Language, Volume 136,277-322.
Amsterdam : Mathematical CentreTracts.Karttunen, L. (1986) Radical Lexicalism.
Report No.CSLI-86-68, Center for the Study of Language andInformation, Paper presented at the Conference onAlternative Conceptions of Phrase Structure, July1986, New York.Morrill, G. (1988) Extraction and Coordination inPhrase Structure Grammar and Categorial Gram-mar.
PhD Thesis, Centre for Cognitive Science,University of Edinburgh.Pareschi, R. (1987) Combinatory Grammar, LogicProgramming, and Natural Language.
In Haddock,N.
J., Klein, E. and Morill, G.
(eds.)
EdinburghWorking Papers in Cognitive Science, Volume I ;Categorial Grammar, Unification Grammar andParsing.Pareschi, R. and Steedman, M. J.
(1987) A Lazy Wayto Chart-Parse with Extended Categorial Gram-mars.
In Proceedings ofthe 25 th Annual Meeting ofthe Association for Computational Linguistics,Stanford University, Stanford, Ca., 6-9 July, 1987.Pollard, C. J.
(1984) Generalized Phrase StructureGrammars, Head Grammars, and Natural Lan-guages.
PhD Thesis, Stanford University.Pollard, C. J. and Sag, I.
(1988) An Information-BasedApproach to Syntax and Semantics : Volume 1Fundamentals.
Stanford, Ca.
: Center for the Studyof Language and Information.S teedman, M. (1985) Dependency and Coordination ithe Grammar of Dutch and English.
Language, 61,523 -568.Steedman, M. (1988) Combinators and Grammars.
InOehrle, R., Bach, E. and Wheeler, D.
(eds.)
Catego -rial Grammars and Natural Language Structures,Dordrecht, 1988.Uszkoreit, H. (1987) Word Order and ConstituentStructure in German.
Stanford, CSLI.Wittenburg, K. (1987) Predictive Combinators : aMethod for Efficient Processing of CombinatoryCategorial Grammar.
In Proceedings of the 25thAnnual Meeting of the Association for C omputatio-nalLinguistics, Stanford University, Stanford, Ca.,6-9 July, 1987.Zeevat, H. (1986) A Specification of InL.
InternalACORD Report.
Edinburgh, Centre for CognitiveScience.Zeevat, H. (1988) Combining Categorial Grammarand Unification.
In Reyle, U. and Rohrer, C.
(eds.
)Natural Language Parsing and Linguistic Theo-ries, 202-229.
Dordrecht : D. Reidel.Zeevat, H., Klein, E. and Calder, J.
(1987) An Inlroduc-tion to Unification Categorial Grammar.
In Had-dock, N. J., Klein, E. and Morrill, G.
(eds.)
Edin-burgh Working Papers in Cognitive Science, Vo-lume 1 : Categorial Grammar, Unification Gram-mar and Parsing287
