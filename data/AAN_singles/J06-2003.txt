Building and Usinga Lexical Knowledge Baseof Near-Synonym DifferencesDiana Inkpen?University of OttawaGraeme Hirst?University of TorontoChoosing the wrong word in a machine translation or natural language generation system canconvey unwanted connotations, implications, or attitudes.
The choice between near-synonymssuch as error, mistake, slip, and blunder?words that share the same core meaning, but differin their nuances?can be made only if knowledge about their differences is available.We present a method to automatically acquire a new type of lexical resource: a knowledgebase of near-synonym differences.
We develop an unsupervised decision-list algorithm that learnsextraction patterns from a special dictionary of synonym differences.
The patterns are then usedto extract knowledge from the text of the dictionary.The initial knowledge base is later enriched with information from other machine-readabledictionaries.
Information about the collocational behavior of the near-synonyms is acquired fromfree text.
The knowledge base is used by Xenon, a natural language generation system that showshow the new lexical resource can be used to choose the best near-synonym in specific situations.1.
Near-SynonymsNear-synonyms are words that are almost synonyms, but not quite.
They are not fullyintersubstitutable, but vary in their shades of denotation or connotation, or in the com-ponents of meaning they emphasize; they may also vary in grammatical or collocationalconstraints.
For example, the word foe emphasizes active warfare more than enemy does(Gove 1984); the distinction between forest and woods is a complex combination of size,proximity to civilization, and wildness (as determined by the type of animals and plantstherein) (Room 1981); among the differences between task and job is their collocationalbehavior with the word daunting: daunting task is a better collocation than daunting job.More examples are given in Table 1 (Hirst 1995).There are very few absolute synonyms, if they exist at all.
So-called dictionariesof synonyms actually contain near-synonyms.
This is made clear by dictionaries suchas Webster?s New Dictionary of Synonyms (Gove 1984) and Choose the Right Word (here-after CTRW) (Hayakawa 1994), which list clusters of similar words and explicate thedifferences between the words in each cluster.
An excerpt from CTRW is presented inFigure 1.
These dictionaries are in effect dictionaries of near-synonym discrimination.?
School of Information Technology and Engineering, Ottawa, ON, Canada, K1N 6N5;diana@site.uottawa.ca.?
Department of Computer Science, Toronto, ON, Canada, M5S 3G4; gh@cs.toronto.edu.Submission received: 5 October 2004; revised submission received: 15 June 2005; accepted for publication:4 November 2005.?
2006 Association for Computational LinguisticsComputational Linguistics Volume 32, Number 2Table 1Examples of near-synonym variations.Type of variation ExampleStylistic, formality pissed : drunk : inebriatedStylistic, force ruin : annihilateExpressed attitude skinny : thin : slimEmotive daddy : dad : fatherContinuousness seep : dripEmphasis on different aspects of meaning enemy : foeFuzzy boundary woods : forestCollocational task : job (in the context of daunting)Writers often turn to such resources when confronted with a choice between near-synonyms, because choosing the wrong word can be imprecise or awkward or conveyunwanted implications.
These dictionaries are made for human use, and they are avail-able only on paper, not in electronic format.Understanding the differences between near-synonyms is important for fine-grained distinctions in machine translation.
For example, when translating the Frenchword erreur to English, one of the near-synonyms mistake, blooper, blunder, boner, con-tretemps, error, faux pas, goof, slip, solecism could be chosen, depending on the context andon the nuances that need to be conveyed.
More generally, knowledge of near-synonymsis vital in natural language generation systems that take a nonlinguistic input (semanticrepresentation) and generate text.
When more than one word can be used, the choiceshould be based on some explicit preferences.
Another application is an intelligentthesaurus, which would assist writers not only with lists of possible synonyms but alsowith the nuances they carry (Edmonds 1999).1.1 Distinctions among Near-SynonymsNear-synonyms can vary in many ways.
DiMarco, Hirst, and Stede (1993) analyzedthe types of differences adduced in dictionaries of near-synonym discrimination.
Theyfound that there was no principled limitation on the types, but a small number of typesoccurred frequently.
A detailed analysis of the types of variation is given by Edmonds(1999).
Some of the most relevant types of distinctions, with examples from CTRW, arepresented below.Denotational distinctions Near-synonyms can differ in the frequency with whichthey express a component of their meaning (e.g., Occasionally, invasion suggests a large-scale but unplanned incursion), in the latency (or indirectness) of the expression of thecomponent (e.g., Test strongly implies an actual application of these means), and in fine-grained variations of the idea itself (e.g., Paternalistic may suggest either benevolentrule or a style of government determined to keep the governed helpless and dependent).
Thefrequency is signaled in the explanations in CTRW by words such as always, usually,sometimes, seldom, never.
The latency is signaled by many words, including the obviouswords suggests, denotes, implies, and connotes.
The strength of a distinction is signaled bywords such as strongly and weakly.Attitudinal distinctions Near-synonyms can convey different attitudes of thespeaker toward an entity in the situation.
Attitudes can be pejorative, neutral, or favor-able.
Examples of sentences in CTRW expressing attitudes, in addition to denotationaldistinctions, are these: Blurb is also used pejoratively to denote the extravagant and insincere224Inkpen and Hirst A Lexical Knowledge Base of Near-Synonym DifferencesFigure 1An excerpt from Choose the Right Word (CTRW) by S. I. Hayakawa.
Copyright ?1987.
Reprintedby arrangement with HarperCollins Publishers, Inc.praise common in such writing.
Placid may have an unfavorable connotation in suggesting anunimaginative, bovine dullness of personality.Stylistic distinctions Stylistic variations of near-synonyms concern their level offormality, concreteness, force, floridity, and familiarity (Hovy 1990).
Only the firstthree of these occur in CTRW.
A sentence in CTRW expressing stylistic distinctionsis this: Assistant and helper are nearly identical except for the latter?s greater informality.Words that signal the degree of formality include formal, informal, formality, and slang.The degree of concreteness is signaled by words such as abstract, concrete, and concretely.Force can be signaled by words such as emphatic and intensification.1.1.1 The Class Hierarchy of Distinctions.
Following the analysis of the distinctionsamong near-synonyms of Edmonds and Hirst (2002), we derived the class hierarchy of225Computational Linguistics Volume 32, Number 2distinctions presented in Figure 2.
The top-level class DISTINCTIONS consists of DENO-TATIONAL DISTINCTIONS, ATTITUDE, and STYLE.
The last two are grouped together ina class ATTITUDE-STYLE DISTINCTIONS because they are expressed by similar syntacticconstructions in the text of CTRW.
Therefore the algorithm to be described in Section 2.2will treat them together.The leaf classes of DENOTATIONAL DISTINCTIONS are SUGGESTION, IMPLICATION,and DENOTATION; those of ATTITUDE are FAVORABLE, NEUTRAL, and PEJORATIVE;those of STYLE are FORMALITY, CONCRETENESS, and FORCE.
All these leaf nodes havethe attribute STRENGTH, which takes the values low, medium, and high.
All the leaf nodesexcept those in the class STYLE have the attribute FREQUENCY, which takes the valuesalways, usually, sometimes, seldom, and never.
The DENOTATIONAL DISTINCTIONShave an additional attribute: the peripheral concept that is suggested, implied, ordenoted.1.2 The Clustered Model of Lexical KnowledgeHirst (1995) and Edmonds and Hirst (2002) show that current models of lexicalknowledge used in computational systems cannot account well for the properties ofnear-synonyms.The conventional view is that the denotation of a lexical item is represented asa concept or a structure of concepts (i.e., a word sense is linked to the concept itlexicalizes), which are themselves organized into an ontology.
The ontology is oftenlanguage independent, or at least language neutral, so that it can be used in multilin-gual applications.
Words that are nearly synonymous have to be linked to their ownslightly different concepts.
Hirst (1995) showed that such a model entails an awkwardtaxonomic proliferation of language-specific concepts at the fringes, thereby defeatingthe purpose of a language-independent ontology.
Because this model defines wordsFigure 2The class hierarchy of distinctions: rectangles represent classes, ovals represent attributes that aclass and its descendants have.226Inkpen and Hirst A Lexical Knowledge Base of Near-Synonym Differencesin terms of necessary and sufficient truth conditions, it cannot account for indirectexpressions of meaning or for fuzzy differences between near-synonyms.Edmonds and Hirst (2002) modified this model to account for near-synonymy.
Themeaning of each word arises out of a context-dependent combination of a context-independent denotation and a set of explicit differences from its near-synonyms, muchas in dictionaries of near-synonyms.
Thus the meaning of a word consists both ofnecessary and sufficient conditions that allow the word to be selected by a lexical choiceprocess and a set of nuances of indirect meaning that may be conveyed with differentstrengths.
In this model, a conventional ontology is cut off at a coarse grain and thenear-synonyms are clustered under a shared concept, rather than linking each word toa separate concept.
The result is a clustered model of lexical knowledge.
Thus, each clusterhas a core denotation that represents the essential shared denotational meaning of itsnear-synonyms.
The internal structure of a cluster is complex, representing semantic(or denotational), stylistic, and expressive (or attitudinal) differences between the near-synonyms.
The differences or lexical nuances are expressed by means of peripheralconcepts (for denotational nuances) or attributes (for nuances of style and attitude).The clustered model has the advantage that it keeps the ontology language neutralby representing language-specific distinctions inside the cluster of near-synonyms.
Thenear-synonyms of a core denotation in each language do not need to be in separateclusters; they can be part of one larger cross-linguistic cluster.However, building such representations by hand is difficult and time-consuming,and Edmonds and Hirst (2002) completed only nine of them.
Our goal in the presentwork is to build a knowledge base of these representations automatically by extractingthe content of all the entries in a dictionary of near-synonym discrimination.
Un-like lexical resources such as WordNet (Miller 1995), in which the words in synsetsare considered ?absolute?
synonyms, ignoring any differences between them, andthesauri such as Roget?s (Roget 1852) and Macquarie (Bernard 1987), which containhierarchical groups of similar words, the knowledge base will include, in additionto the words that are near-synonyms, explicit explanations of differences betweenthese words.2.
Building a Lexical Knowledge Base of Near-Synonym DifferencesAs we saw in Section 1, each entry in a dictionary of near-synonym discriminationlists a set of near-synonyms and describes the differences among them.
We will usethe term cluster in a broad sense to denote both the near-synonyms from an entry andtheir differences.
Our aim is not only to automatically extract knowledge from one suchdictionary in order to create a lexical knowledge base of near-synonyms (LKB of NS),but also to develop a general method that could be applied to any such dictionarywith minimal adaptation.
We rely on the hypothesis that the language of the entriescontains enough regularity to allow automatic extraction of knowledge from them.Earlier versions of our method were described by Inkpen and Hirst (2001).The task can be divided into two phases, treated by two consecutive modules, asshown in Figure 3.
The first module, the extraction module, will be described in thissection.
The generic clusters produced by this module contain the concepts that near-synonyms may involve (the peripheral concepts) as simple strings.
This generic LKBof NS can be adapted for use in any Natural Language Processing (NLP) application.The second module customizes the LKB of NS so that it satisfies the requirements ofthe particular system that is to employ it.
This customization module transforms the227Computational Linguistics Volume 32, Number 2Figure 3The two modules of the task.strings from the generic clusters into concepts in the particular ontology.
An example ofa customization module will be described in Section 6.The dictionary that we use is Choose the Right Word (Hayakawa 1994) (CTRW),1which was introduced in Section 1.
CTRW contains 909 clusters, which group 5,452near-synonyms (more precisely, near-synonym senses, because a word can be in morethan one cluster) with a total of 14,138 sentences (excluding examples of usage), fromwhich we derive the lexical knowledge base.
An example of the results of this phase,corresponding to the second, third, and fourth sentence for the absorb cluster in Figure 1,is presented in Figure 4.This section describes the extraction module, whose architecture is presented inFigure 5.
It has two main parts.
First, it learns extraction patterns; then it applies thepatterns to extract differences between near-synonyms.2.1 Preprocessing the DictionaryAfter OCR scanning of CTRW and error correction, we used XML markup to segmentthe text of the dictionary into cluster name, cluster identifier, members (the near-synonyms in the cluster), entry (the textual description of the meaning of the near-synonyms and of the differences among them), cluster?s part of speech, cross-referencesto other clusters, and antonyms list.
Sentence boundaries were detected by usinggeneral heuristics, plus heuristics specific for this particular dictionary; for example,examples appear in square brackets and after a colon.2.2 The Decision-List Learning AlgorithmBefore the system can extract differences between near-synonyms, it needs to learnextraction patterns.
For each leaf class in the hierarchy (Figure 2) the goal is to learna set of words and expressions from CTRW?that is, extraction patterns?that charac-terizes descriptions of the class.
Then, during the extraction phase, for each sentence (orfragment of a sentence) in CTRW the program will decide which leaf class is expressed,with what strength, and what frequency.
We use a decision-list algorithm to learn setsof words and extraction patterns for the classes DENOTATIONAL DISTINCTIONS andATTITUDE-STYLE DISTINCTIONS.
These are split further for each leaf class, as explainedin Section 2.3.The algorithm we implemented is inspired by the work of Yarowsky (1995) on wordsense disambiguation.
He classified the senses of a word on the basis of other wordsthat the given word co-occurs with.
Collins and Singer (1999) classified proper names1 We are grateful to HarperCollins Publishers, Inc. for permission to use CTRW in this project.228Inkpen and Hirst A Lexical Knowledge Base of Near-Synonym DifferencesFigure 4Example of distinctions extracted from CTRW.as PERSON, ORGANIZATION, or LOCATION using contextual rules (that rely on otherwords appearing in the context of the proper names) and spelling rules (that rely onwords in the proper names).
Starting with a few spelling rules (using some proper-namefeatures) in the decision list, their algorithm learns new contextual rules; using theserules, it then learns more spelling rules, and so on, in a process of mutual bootstrapping.Riloff and Jones (1999) learned domain-specific lexicons and extraction patterns (suchas shot in ?x?
for the terrorism domain).
They used a mutual bootstrapping technique toalternately select the best extraction pattern for a category and add its extractions to thesemantic lexicon; the newly added entries in the lexicon help in the selection of the nextbest extraction pattern.Our decision-list (DL) algorithm (Figure 6) is tailored for extraction from CTRW.Like the algorithm of Collins and Singer (1999), it learns two different types of rules:Main rules are for words that are significant for distinction classes; auxiliary rules arefor frequency words, strength words, and comparison words.
Mutual bootstrapping inthe algorithm alternates between the two types.
The idea behind the algorithm is thatstarting with a few main rules (seed words), the program selects examples containingthem and learns a few auxiliary rules.
Using these, it selects more examples and learnsnew main rules.
It keeps iterating until no more new rules are learned.The rules that the program learns are of the form x ?
h(x), meaning that wordx is significant for the given class with confidence h(x).
All the rules for that classform a decision list that allows us to compute the confidence with which new patternsFigure 5The architecture of the extraction module.229Computational Linguistics Volume 32, Number 2Figure 6The decision-list learning algorithm.are significant for the class.
The confidence h(x) for a word x is computed with theformula:h(x) =count(x, E?)
+ ?count(x, E) + k?
(1)where E?
is the set of patterns selected for the class, and E is the set of all input data.So, we count how many times x is in the patterns selected for the class versus the totalnumber of occurrences in the training data.
Following Collins and Singer (1999), k =2, because there are two partitions (relevant and irrelevant for the class).
?
= 0.1 is asmoothing parameter.In order to obtain input data, we replace all the near-synonyms in the text of the dic-tionary with the term near syn; then we chunk the text with Abney?s chunker (Abney1996).
The training set E is composed of all the verb phrases, noun phrases, adjectivalphrases, and adverbial phrases (denoted vx, nx, ax, rx, respectively) that occur more230Inkpen and Hirst A Lexical Knowledge Base of Near-Synonym Differencesthan t times in the text of the dictionary (where t = 3 in our experiments).
Phrasesthat occur very few times are not likely to be significant patterns and eliminating themmakes the process faster (fewer iterations are needed).We apply the DL algorithm for each of the classes DENOTATIONAL DISTINCTIONSand ATTITUDE-STYLE DISTINCTIONS.
The input to the algorithm is as follows: the setE of all chunks, the main seed words, and the restrictions on the part of speech ofthe words in main and auxiliary rules.
For the class DENOTATIONAL DISTINCTIONSthe main seed words are suggest, imply, denote, mean, designate, connote; the words inmain rules are verbs and nouns, and the words in auxiliary rules are adverbs andmodals.
For the class ATTITUDE-STYLE DISTINCTIONS the main seed words are formal,informal, pejorative, disapproval, favorable, abstract, concrete; the words in main rules areadjectives and nouns, and the words in auxiliary rules are adverbs.
For example, for theclass DENOTATIONAL DISTINCTIONS, starting with the rule suggest ?
0.99, the programselects examples such as these (where the numbers give the frequency in the trainingdata):[vx [md can] [vb suggest]]--150[vx [rb sometimes] [vb suggest]]--12Auxiliary rules are learned for the words sometimes and can, and using these rules, theprogram selects more examples such as these:[vx [md can] [vb refer]]--268[vx [md may] [rb sometimes] [vb imply]]--3From these, new main rules are learned for the words refer and imply.
With these rules,more auxiliary rules are selected?for the word may and so on.The ATTITUDE and STYLE classes had to be considered together because both ofthem use adjectival comparisons.
Examples of ATTITUDE-STYLE DISTINCTIONS class arethese:[ax [rbs most] [jj formal]]--54[ax [rb much] [more more] [jj formal]]--9[ax [rbs most] [jj concrete]]--52.3 Classification and ExtractionAfter we run the DL algorithm for the class DENOTATIONAL DISTINCTIONS, we splitthe words in the list of main rules into its three sub-classes, as shown in Figure 2.
Thissub-classification is manual for lack of a better procedure.
Furthermore, some words canbe insignificant for any class (e.g., the word also) or for the given class; during the sub-classification we mark them as OTHER.
We repeat the same procedure for frequenciesand strengths with the words in the auxiliary rules.
The words marked as OTHER andthe patterns that do not contain any word from the main rules are ignored in the nextprocessing steps.
Similarly, after we run the algorithm for the class ATTITUDE-STYLEDISTINCTIONS, we split the words in the list of main rules into its sub-classes andsub-sub-classes (Figure 2).
Frequencies are computed from the auxiliary rule list, andstrengths are computed by a module that resolves comparisons.Once we had obtained the words and patterns for all the classes, we implementedan automatic knowledge-extraction program that takes each sentence in CTRW and231Computational Linguistics Volume 32, Number 2tries to extract one or more pieces of knowledge from it.
Examples of results after thisstage are presented in Figure 4.
The information extracted for denotational distinctionsis the near-synonym itself, the class, frequency, and strength of the distinction, andthe peripheral concept.
At this stage, the peripheral concept is a string extracted fromthe sentence.
Strength takes the value low, medium, or high; frequency takes the valuealways, usually, sometimes, seldom, or never.
Default values (usually and medium)are used when the strength or the frequency are not specified in the sentence.
Theinformation extracted for attitudinal and stylistic distinctions is analogous.The extraction program considers what near-synonyms each sentence fragment isabout (most often expressed as the subject of the sentence), what the expressed distinc-tion is, and with what frequency and relative strength.
If it is a denotational distinction,then the peripheral concept involved has to be extracted too (from the object position inthe sentence).
Therefore, our program looks at the subject of the sentence (the first nounphrase before the main verb) and the object of the sentence (the first noun phrase afterthe main verb).
This heuristic works for sentences that present one piece of information.There are many sentences that present two or more pieces of information.
In such cases,the program splits a sentence into coordinated clauses (or coordinated verb phrases) byusing a parser (Collins 1996) to distinguish when a coordinating conjunction (and, but,whereas) is conjoining two main clauses or two parts of a complex verb phrase.
From 60randomly selected sentences, 52 were correctly dealt with (41 needed no split, 11 werecorrectly split).
Therefore, the accuracy was 86.6%.
The eight mistakes included threesentences that were split but should not have been, and five that needed splitting butwere not.
The mistakes were mainly due to wrong parse trees.When no information is extracted in this way, a few general patterns are matchedwith the sentence in order to extract the near-synonyms; an example of such patternis: To NS1 is to NS2 ....
There are also heuristics to retrieve compound subjects ofthe form near-syn and near-syn and near-syn, near-syn, and near-syn.
Once the class isdetermined to be either DENOTATIONAL DISTINCTIONS or ATTITUDE-STYLE DISTINC-TIONS, the target class (one of the leaves in the class hierarchy in Figure 2) is deter-mined by using the manual partitions of the rules in the main decision list of the twoclasses.Sometimes the subject of a sentence refers to a group of near-synonyms.
For ex-ample, if the subject is the remaining words, our program needs to assert informationabout all the near-synonyms from the same cluster that were not yet mentioned in thetext.
In order to implement coreference resolution, we applied the same DL algorithmto retrieve expressions used in CTRW to refer to near-synonyms or groups of near-synonyms.Sometimes CTRW describes stylistic and attitudinal distinctions relative to othernear-synonyms in the cluster.
Such comparisons are resolved in a simple way by consid-ering only three absolute values: low, medium, high.
We explicitly tell the system whichwords represent what absolute values of the corresponding distinction (e.g., abstract isat the low end of Concreteness) and how the comparison terms increase or decreasethe absolute value (e.g., less abstract could mean a medium value of Concreteness).2.4 EvaluationOur program was able to extract 12,365 distinctions from 7,450 of the 14,138 sentences ofCTRW.
(The rest of the sentences usually do not contain directly expressed distinctions;for example: A terror-stricken person who is drowning may in panic resist the efforts ofsomeone who is trying to save him.
)232Inkpen and Hirst A Lexical Knowledge Base of Near-Synonym DifferencesIn order to evaluate the final results, we randomly selected 25 clusters as a de-velopment set, and another 25 clusters as a test set.
The development set was usedto tune the program by adding new patterns if they helped improve the results.
Thetest set was used exclusively for testing.
We built by hand a standard solution foreach set.
The baseline algorithm is to choose the default values whenever possible.There are no defaults for the near-synonyms the sentence is about or for peripheralconcepts; therefore, for these, the baseline algorithm assigns the sentence subject andobject, respectively, using only tuples extracted by the chunker.The measures that we used for evaluating each piece of information extracted froma sentence fragment were precision and recall.
The results to be evaluated have four com-ponents for ATTITUDE-STYLE DISTINCTIONS and five components for DENOTATIONALDISTINCTIONS.
There could be missing components (except strength and frequency,which take default values).
Precision is the total number of correct components found(summed over all the sentences in the test set) divided by the total number of com-ponents found.
Recall is the total number of correct components found divided by thenumber of components in the standard solution.For example, for the sentence Sometimes, however, profit can refer to gains outside thecontext of moneymaking, the program obtains ?profit, usually, medium, Denotation,gains outside the context of moneymaking?, whereas the solution is ?profit, some-times, medium, Denotation, gains outside the context of money-making?.
The pre-cision is .80 (four correct out of five found), and the recall is also .80 (four correct out offive in the standard solution).Table 2 presents the results of the evaluation.2 The first row of the table presentsthe results as a whole (all the components of the extracted lexical knowledge base).
Oursystem increases precision by 36 percentage points and recall by 46 percentage pointsover baseline on the development set.3 Recall and precision are both slightly higher stillon the test set; this shows that the patterns added during the development stage weregeneral.The second row of the table gives the evaluation results for extracting only theclass of the distinction expressed, ignoring the strengths, frequencies, and peripheralconcepts.
This allows for a more direct evaluation of the acquired extraction patterns.The baseline algorithm attained higher precision than in the case when all the com-ponents are considered because the default class Denotation is the most frequent inCTRW.
Our algorithm attained slightly higher precision and recall on the developmentset than it did in the complete evaluation, probably due to a few cases in which thefrequency and strength were incorrectly extracted, and slightly lower on the test set,probably due to some cases in which the frequency and strength were easy to extractcorrectly.2.5 ConclusionThe result of this stage is a generic lexical knowledge base of near-synonym differences.In subsequent sections, it will be enriched with knowledge from other sources; informa-tion about the collocational behavior of the near-synonyms is added in Section 3, and2 The improvement over the baseline is statistically significant (at p = 0.005 level or better) for all the resultspresented in this article, except in one place to be noted later.
Statistical significance tests were done withthe paired t test, as described by Manning and Schu?tze (1999, pages 208?209).3 These values are improved over those of earlier systems presented by Inkpen and Hirst (2001).233Computational Linguistics Volume 32, Number 2Table 2Precision and recall of the baseline and of our algorithm (for all the components and for thedistinction class only; boldface indicates best results).Baseline algorithm Our system (dev.
set) Our system (test set)Precision Recall Precision Recall Precision RecallAll .40 .23 .76 .69 .83 .73Class only .49 .28 .79 .70 .82 .71more distinctions acquired from machine-readable dictionaries are added in Section 4.To be used in a particular NLP system, the generic LKB of NS needs to be customized(Section 6).
Section 7 shows how the customized LKB of NS can actually be used inNatural Language Generation (NLG).The method for acquiring extraction patterns can be applied to other dictionariesof synonym differences.
The extraction patterns that we used to build our LKB of NSare general enough to work on other dictionaries of English synonyms.
To verify this,we applied the extraction programs presented in Section 2.3, without modification, tothe usage notes in the Merriam-Webster Online Dictionary.4 The distinctions expressed inthese usage notes are similar to the explanations from CTRW, but the text of these notesis shorter and simpler.
In a sample of 100 usage notes, we achieved a precision of 90%and a recall of 82%.3.
Adding Collocational Knowledge from Free TextIn this section, the lexical knowledge base of near-synonym differences will be enrichedwith knowledge about the collocational behavior of the near-synonyms.
We take col-locations here to be pairs of words that appear together, consecutively or separated byonly a few non-content words, much more often than by chance.
Our definition is purelystatistical, and we make no claim that the collocations that we find have any element ofidiomaticity; rather, we are simply determining the preferences of our near-synonymsfor combining, or avoiding combining, with other words.
For example daunting task is apreferred combination (a collocation, in our terms), whereas daunting job is less preferred(it should not be used in lexical choice unless there is no better alternative), and dauntingduty is an anti-collocation (Pearce 2001) that sounds quite odd and must not be used inlexical choice.There are three main steps in acquiring this knowledge, which are shown in Fig-ure 7.
The first two look in free text?first the British National Corpus, then the WorldWide Web?for collocates of all near-synonyms in CTRW, removing any closed-classwords (function words).
For example, the phrase defeat the enemy will be treated as defeatenemy; we will refer to such pairs as bigrams, even if there were intervening words.
Thethird step uses the t-test (Church et al 1991) to classify less frequent or unobservedbigrams as less preferred collocations or anti-collocations.
We outline the three stepsbelow; a more-detailed discussion is presented by Inkpen and Hirst (2002).4 http://www.m-w.com/cgi-bin/dictionary234Inkpen and Hirst A Lexical Knowledge Base of Near-Synonym DifferencesFigure 7The three steps in acquiring collocational knowledge for near-synonyms.3.1 Extracting Collocations from the British National CorpusIn step 1 of our procedure, our data was the 100-million-word part-of-speech-taggedBritish National Corpus (BNC).5 Only 2.61% of the near-synonyms are absent from theBNC; and only 2.63% occur between one and five times.
We first preprocessed the BNCby removing all words tagged as closed-class and all the proper names, and then usedthe Ngram Statistics Package6 (Pedersen and Banerjee 2003), which counts bigram (orn-gram) frequencies in a corpus and computes various statistics to measure the degreeof association between two words: pointwise mutual information (MI), Dice, chi-square(?2), log-likelihood (LL), and Fisher?s exact test.
(See Manning and Schu?tze [1999] for areview of statistical methods that can be used to identify collocations.
)Because these five measures rank potential collocations in different ways and havedifferent advantages and drawbacks, we decided to combine them by choosing as acollocation any bigram that was ranked by at least two of the measures as one ofthat measure?s T most-highly ranked bigrams; the threshold T may differ for eachmeasure.
Lower values for T increase the precision (reduce the chance of acceptingnoncollocations) but may not get many collocations for some of the near-synonyms;higher values increase the recall at the expense of lower precision.
Because there isno principled way of choosing these values, we opted for higher recall, with step 2of the process (Section 3.2) filtering out many noncollocations in order to increasethe precision.
We took the first 200,000 bigrams selected by each measure, except forFisher?s measure for which we took all 435,000 that were ranked equal top.
From theselists, we retained only those bigrams in which one of the words is a near-synonymin CTRW.75 http://www.hcu.ox.ac.uk/BNC/6 http://www.d.umn.edu/?tpederse/nsp.html.
We used version 0.4, known at the time as the BigramStatistics Package (BSP).7 Collocations of a near-synonym with the wrong part of speech were not considered (the collocations aretagged), but when a near-synonym has more than one major sense, collocations for senses other than theone required in the cluster could be retrieved.
For example, for the cluster job, task, duty, and so on, thecollocation import duty is likely to be for a different sense of duty (the tariff sense).
Thereforedisambiguation is required (assuming one sense per collocation).
We experimented with a simpleLesk-style method (Lesk 1986).
For each collocation, instances from the corpus were retrieved, and thecontent words surrounding the collocations were collected.
This set of words was then intersected withthe entry for the near-synonym in CTRW.
A non-empty intersection suggests that the collocation and theentry use the near-synonym in the same sense.
If the intersection was empty, the collocation was notretained.
However, we ran the disambiguation algorithm only for a subset of CTRW, and then abandonedit, because hand-annotated data are needed to evaluate how well it works and because it was verytime-consuming (due to the need to retrieve corpus instances for each collocation).
Moreover, skippingdisambiguation is relatively harmless because including these wrong senses in the final lexicalknowledge base of near-synonym collocations will not hurt.
For example, if the collocation import duty isassociated with the cluster job, duty, etc., it simply will not be used in practice because the concepts ofimport and this sense of duty are unlikely to occur together in coherent interlingual input.235Computational Linguistics Volume 32, Number 23.2 Filtering with Mutual Information from Web DataIn the previous step we emphasized recall at the expense of precision: Because ofthe relatively small size of the BNC, it is possible that the classification of a bigramas a collocation in the BNC was due to chance.
However, the World Wide Web (theportion indexed by search engines) is big enough that a result is more reliable.
So wecan use frequency on the Web to filter out the more dubious collocations found in theprevious step.8 We did this for each putative collocation by counting its occurrence onthe Web, the occurrence of each component word, and computing the pointwise mutualinformation (PMI) between the words.
Only those whose pointwise mutual informationexceeded a threshold Tpmi were retained.More specifically, if w is a word that collocates with one of the near-synonyms x ina cluster, a proxy PMIprox for the pointwise mutual information between the words canbe given by the ratioP(w, x)P(x)=nwxnxwhere nwx and nx are the number of occurrences of wx and x, respectively.
The for-mula does not include P(w) because it is the same for various x.
We used an inter-face to the AltaVista search engine to do the counts, using the number of hits (i.e.,matching documents) as a proxy for the actual number of bigrams.9 The thresholdTpmi for PMIprox was determined empirically by finding the value that optimized re-sults on a standard solution, constructed as follows.
We selected three clusters fromCTRW, with a total of 24 near-synonyms.
For these, we obtained 916 candidate collo-cations from the BNC.
Two human judges (computational linguistics students, nativespeakers of English) were asked to mark the true collocations (what they consideredto be good usage in English).
The candidate pairs were presented to the judges inrandom order, and each was presented twice.10 A bigram was considered to be atrue collocation only if both judges considered it so.
We used this standard solutionto choose the value of Tpmi that maximizes the accuracy of the filtering program.Accuracy on the test set was 68.3% (compared to approximately 50% for randomchoice).3.3 Finding Less Preferred Collocations and Anti-CollocationsIn seeking knowledge of less preferred collocations and anti-collocations, we are look-ing for bigrams that occur infrequently or not at all.
The low frequency or absence of a8 Why not just use the Web and skip the BNC completely?
Because we would then have to count Weboccurrences of every near-synonym in CTRW combined with every content word in English.
Using theBNC as a first-pass filter vastly reduces the search space.9 The collocations were initially acquired from the BNC with the right part of speech for the near-synonymbecause the BNC is part-of-speech-tagged, but on the Web there are no part-of-speech tags; therefore afew inappropriate instances may be included in the counts.10 One judge was consistent (judged a collocation in the same way both times it appeared) in 90.4% of thecases and the other in 88% of the cases.
The agreement between the two judges was 78% (computed in astrict way; i.e., we considered agreement only when the two judges had the same opinion including thecases when they were not consistent), yielding ?
= .51 with a 95% confidence interval of 0.47 to 0.55.
(Thenotion of confidence intervals for ?
is defined, e.g., by Sim and Wright [2005].
The computations weredone with the PEPI statistical package [http://sagebrushpress.com/pepibook.html].)
These figures showthat the task is not easy for humans.236Inkpen and Hirst A Lexical Knowledge Base of Near-Synonym Differencesbigram in the BNC may be due to chance.
However, the World Wide Web is big enoughthat a negative result is more reliable.
So we can again use frequency on the Web?thistime to determine whether a bigram that was infrequent or unseen in the BNC is trulya less preferred collocation or anti-collocation.The bigrams of interest now are those in which collocates for a near-synonym thatwere found in step 1 and filtered in step 2 are combined with another member of thesame near-synonym cluster.
For example, if the collocation daunting task was found,we now look on the Web for the apparent noncollocations daunting job, daunting duty,and other combinations of daunting with near-synonyms of task.
A low number ofco-occurrences indicates a less preferred collocation or anti-collocation.
We employ thet-test, following Manning and Schu?tze (1999, pages 166?168), to look for differences.The collocations of each near-synonym with a given collocate are grouped in threeclasses, depending on the t values of pairwise collocations.
A t value comparing eachcollocation and the collocation with maximum frequency is computed, and so is thet value between each collocation and the collocation with minimum frequency.
Table 3presents an example.After the t-test scores were computed, a set of thresholds was determined to classifythe collocations in the three groups: preferred collocations, less preferred collocations,and anti-collocations.
Again, we used a standard solution in the procedure.
Two judgesmanually classified a sample of 2,838 potential collocations obtained for the same threeclusters of near-synonyms from 401 collocations that remained after filtering.
Theywere instructed to mark as preferred collocations all the potential collocations thatthey considered good idiomatic use of language, as anti-collocations the ones that theywould not normally use, and as less preferred collocations the ones that they were notcomfortable classifying in either of the other two classes.
When the judges agreed, theclass was clear.
When they did not agree, we used simple rules, such as these: Whenone judge chose the class-preferred collocation, and the other chose the class anti-collocation, the class in the solution was less preferred collocation (because such casesseemed to be difficult and controversial); when one chose preferred collocation, and theother chose less preferred collocation, the class in the solution was preferred collocation;when one chose anti-collocation, and the other chose less preferred collocation, the classin the solution was anti-collocation.
The agreement between judges was 84%, ?
= 0.66(with a 95% confidence interval of 0.63 to 0.68).Table 3Example of counts, mutual information scores, and t-test scores for the collocate daunting withnear-synonyms of task.
The second column shows the number of hits for the collocation dauntingx, where x is the near-synonym in the first column.
The third column shows PMIprox (scaled by105 for readability), the fourth column, the t values between the collocation with maximumfrequency (daunting task) and daunting x, and the last column, the t-test between daunting x andthe collocations with minimum frequency (daunting stint and daunting hitch).x Hits PMIprox t max t mintask 63,573 0.011662 ?
252.07job 485 0.000022 249.19 22.02assignment 297 0.000120 250.30 17.23chore 96 0.151899 251.50 9.80duty 23 0.000022 251.93 4.80stint 0 0 252.07 ?hitch 0 0 252.07 ?237Computational Linguistics Volume 32, Number 2Table 4Example of results of our program for collocations of near-synonyms in the task cluster.
?markspreferred collocations, ?
marks less preferred collocations, and ?
marks anti-collocations.
Thecombined opinion of the judges about the same pairs of words is shown in parentheses.CollocatesNear-synonyms daunting particular toughtask?(?)?(?)?(?
)job ?
(?)?(?)?(?
)assignment ?
(?)
?
(?)
?
(?
)chore ?
( ?)
?
(?)
?
( ?
)duty ?
( ?)
?
(?)
?
( ?
)stint ?
( ?)
?
( ?)
?
( ?
)hitch ?
( ?)
?
( ?)
?
( ?
)We used this standard solution as training data to C4.511 to learn a decision treefor the three-way classifier.
The features in the decision tree are the t-test betweeneach collocation and the collocation from the same group that has maximum frequencyon the Web, and the t-test between the current collocation and the collocation thathas minimum frequency (as presented in Table 3).
We did 10-fold cross-validation toestimate the accuracy on unseen data.
The average accuracy was 84.1%, with a standarderror of 0.5%; the baseline of always choosing the most frequent class, anti-collocations,yields 71.4%.
We also experimented with including PMIprox as a feature in the decisiontree, and with manually choosing thresholds (without a decision tree) for the three-way classification, but the results were poorer.
The three-way classifier can fix someof the mistakes of the PMI filter: If a wrong collocation remains after the PMI filter,the classifier can classify it in the anti-collocations class.
We conclude that the acquiredcollocational knowledge has acceptable quality.3.4 ResultsWe obtained 1,350,398 distinct bigrams that occurred at least four times.
We selected col-locations for all 909 clusters in CTRW (5,452 near-synonyms in total).
Table 4 presents anexample of results for collocational classification of bigrams, where?marks preferredcollocations, ?
marks less preferred collocations, and ?
marks anti-collocations.
Thisgave us a lexical knowledge base of near-synonym collocational behavior.
An exampleof collocations extracted for the near-synonym task is presented in Table 5, where thecolumns are, in order, the name of the measure, the rank given by the measure, and thevalue of the measure.4.
Adding Knowledge from Machine-Readable DictionariesInformation about near-synonym differences can be found in other types of dictionariesbesides those explicitly on near-synonyms.
Although conventional dictionaries, unlikeCTRW, treat each word in isolation, they may nonetheless contain useful information11 http://www.cse.unsw.edu.au/?quinlan238Inkpen and Hirst A Lexical Knowledge Base of Near-Synonym DifferencesTable 5Example of collocations extracted for the near-synonym task.
The first collocation was selected(ranked in the set of first T collocations) by four measures; the second collocation was selectedby two measures.Collocation Measure Rank Scoredaunting/A task/N MI 24,887 10.85LL 5,998 907.96?2 16,341 122,196.82Dice 2,766 0.02repetitive/A task/N MI 64,110 6.77?2 330,563 430.40about near-synonyms because some definitions express a distinction relative to anothernear-synonym.
From the SGML-marked-up text of the Macquarie Dictionary12 (Delbridgeet al 1987), we extracted the definitions of the near-synonyms in CTRW for the expectedpart of speech that contained another near-synonym from the same cluster.
For example,for the CTRW cluster burlesque, caricature, mimicry, parody, takeoff, travesty, one definitionextracted for the near-synonym burlesque was any ludicrous take-off or debasing caricaturebecause it contains caricature from the same cluster.
A series of patterns was usedto extract the difference between the two near-synonyms wherever possible.
For theburlesque example, the extracted information was?burlesque, usually, medium, Denotation, ludicrous?,?burlesque, usually, medium, Denotation, debasing?.The number of new denotational distinctions acquired by this method was 5,731.We also obtained additional information from the General Inquirer13 (Stone et al1966), a computational lexicon that classifies each word in it according to an extendablenumber of categories, such as pleasure, pain, virtue, and vice; overstatement and un-derstatement; and places and locations.
The category of interest here is Positiv/Negativ.There are 1,915 words marked as Positiv (not including words for yes, which is a separatecategory of 20 entries), and 2,291 words marked as Negativ (not including the separatecategory of no in the sense of refusal).
For each near-synonym in CTRW, we usedthis information to add a favorable or unfavorable attitudinal distinction accordingly.If there was more than one entry (several senses) for the same word, the attitudewas asserted only if the majority of the senses had the same marker.
The numberof attitudinal distinctions acquired by this method was 5,358.
(An attempt to use theoccasional markers for formality in WordNet in a similar manner resulted in only 11new distinctions.
)As the knowledge from each source is merged with the LKB, it must be checked forconsistency in order to detect conflicts and resolve them.
The algorithm for resolvingconflicts is a voting scheme based on the intuition that neutral votes should have lessweight than votes for the two extremes.
The algorithm outputs a list of the conflictsand a proposed solution.
This list can be easily inspected by a human, who can change12 http://www.macquariedictionary.com.au/13 http://www.wjh.harvard.edu/?inquirer/239Computational Linguistics Volume 32, Number 2Figure 8Fragment of the representation of the error cluster (prior to customization).the solution of the conflict in the final LKB of NS, if desired.
The consistency-checkingprogram found 302 conflicts for the merged LKB of 23,469 distinctions.
After conflictresolution, 22,932 distinctions remained.
Figure 8 shows a fragment of the knowledgeextracted for the near-synonyms of error after merging and conflict resolution.5.
Related Work5.1 Building Lexical ResourcesLexical resources for natural language processing have also been derived from otherdictionaries and knowledge sources.
The ACQUILEX14 Project explored the utility ofconstructing a multilingual lexical knowledge base (LKB) from machine-readable ver-sions of conventional dictionaries.
Ide and Ve?ronis (1994) argue that it is not possible tobuild a lexical knowledge base from a machine-readable dictionary (MRD) because theinformation it contains may be incomplete, or it may contain circularities.
It is possibleto combine information from multiple MRDs or to enhance an existing LKB, they say,although human supervision may be needed.Automatically extracting world knowledge from MRDs was attempted by projectssuch as MindNet at Microsoft Research (Richardson, Dolan, and Vanderwende 1998),and Barrie`rre and Popowich?s (1996) project, which learns from children?s dictionaries.IS-A hierarchies have been learned automatically from MRDs (Hearst 1992) and fromcorpora (Caraballo [1999] among others).14 http://www.cl.cam.ac.uk/Research/NL/acquilex/acqhome.html240Inkpen and Hirst A Lexical Knowledge Base of Near-Synonym DifferencesResearch on merging information from various lexical resources is related to thepresent work in the sense that the consistency issues to be resolved are similar.
Oneexample is the construction of Unified Medical Language System (UMLS)15 (Lindberg,Humphreys, and McCray 1993), in the medical domain.
UMLS takes a wide range oflexical and ontological resources and brings them together as a single resource.
Most ofthis work is done manually at the moment.5.2 Acquiring Collocational KnowledgeThere has been much research on extracting collocations for different applications.
LikeChurch et al (1991), we use the t-test and mutual information (MI), but unlike themwe use the Web as a corpus for this task (and a modified form of mutual information),and we distinguish three types of collocations.
Pearce (2001) improved the quality ofretrieved collocations by using synonyms from WordNet (Pearce 2001); a pair of wordswas considered a collocation if one of the words significantly prefers only one (orseveral) of the synonyms of the other word.
For example, emotional baggage is a goodcollocation because baggage and luggage are in the same synset and ?emotional luggageis not a collocation.
Unlike Pearce, we use a combination of t-test and MI, not justfrequency counts, to classify collocations.There are two typical approaches to collocations in previous NLG systems: theuse of phrasal templates in the form of canned phrases, and the use of automaticallyextracted collocations for unification-based generation (McKeown and Radev 2000).Statistical NLG systems (such as Nitrogen [Langkilde and Knight 1998]) make gooduse of the most frequent words and their collocations, but such systems cannot choosea less-frequent synonym that may be more appropriate for conveying desired nuancesof meaning if the synonym is not a frequent word.Turney (2001) used mutual information to choose the best answer to questions aboutnear-synonyms in the Test of English as a Foreign Language (TOEFL) and English asa Second Language (ESL).
Given a problem word (with or without context) and fouralternative words, the question is to choose the alternative most similar in meaningto the problem word (the problem here is to detect similarities, whereas in our workdifferences are detected).
His work is based on the assumption that two synonyms arelikely to occur in the same document (on the Web).
This can be true if the author needsto avoid repeating the same word, but not true when the synonym is of secondaryimportance in a text.
The alternative that has the highest pointwise mutual informationfor information retrieval (PMI-IR) with the problem word is selected as the answer.
Weused the same measure in Section 3.3?the mutual information between a collocationand a collocate that has the potential to discriminate between near-synonyms.
Bothworks use the Web as a corpus, and a search engine to estimate the mutual informationscores.5.3 Near-SynonymsAs noted in the introduction, our work is based on that of Edmonds and Hirst (2002) andHirst (1995), in particular the model for representing the meaning of the near-synonymspresented in Section 1.2 and the preference satisfaction mechanism used in Section 7.15 http://www.nml.nih.gov/research/umls/241Computational Linguistics Volume 32, Number 2Other related research involving differences between near-synonyms has a lin-guistic or lexicographic, rather than computational, flavor.
Apresjan built a bilin-gual dictionary of synonyms, more specifically a dictionary of English synonymsexplained in Russian (Apresjan et al 1980).
It contains 400 entries selected fromthe approximately 2,500 entries from Webster?s New Dictionary of Synonyms, but re-organized by splitting or merging clusters of synonyms, guided by lexicographicprinciples described by Apresjan (2000).
An entry includes the following types ofdifferences: semantic, evaluative, associative and connotational, and differences inemphasis or logical stress.
These differences are similar to the ones used in ourwork.Gao (2001) studied the distinctions between near-synonym verbs, more specificallyChinese physical action verbs such as verbs of cutting, putting, throwing, touching,and lying.
Her dissertation presents an analysis of the types of semantic distinctionsrelevant to these verbs, and how they can be arranged into hierarchies on the basis oftheir semantic closeness.Ploux and Ji (2003) investigated the question of which words should be considerednear-synonyms, without interest in their nuances of meaning.
They merged clusters ofnear-synonyms from several dictionaries in English and French and represented themin a geometric space.
In our work, the words that are considered near-synonyms aretaken from CTRW; a different dictionary of synonyms may present slightly differentviews.
For example, a cluster may contain some extra words, some missing words, orsometimes the clustering could be done in a different way.
A different approach is toautomatically acquire near-synonyms from free text.
Lin et al (2003) acquire words thatare related by contextual similarity and then filter out the antonyms by using a smallset of manually determined patterns (such as ?either X or Y?)
to construct Web queriesfor pairs of candidate words.
The problem of this approach is that it still includes wordsthat are in relations other than near-synonymy.6.
Customizing the Lexical Knowledge Base of Near-Synonym DifferencesThe initial LKB of NS built in Sections 2 to 4 is a general one, and it could, in principle, beused in any (English) NLP system.
For example, it could be used in the lexical-analysisor lexical-choice phase of machine translation.
Figure 9 shows that during the analysisphase, a lexical knowledge base of near-synonym differences in the source languageis used, together with the context, to determine the set of nuances that are expressedin the source-language text (in the figure, the source language is French and the targetlanguage is English).
In the generation phase, these nuances become preferences for thelexical-choice process.
Not only must the target-language text express the same meaningas the source-language text (necessary condition), but the choice of words should satisfythe preferences as much as possible.In order to be integrated with the other components of the NLP system, the LKB willprobably need some adaptation?in particular, the core denotations and the peripheralconcepts will need to be mapped to the ontology that the system employs.
This mightbe a general-purpose ontology, such as Cyc (Lenat 1995) and WordNet, or an ontologybuilt specially for the system (such as Mikrokosmos (Mahesh and Nirenburg 1995) ordomain-specific ontologies).
In this section, we focus on the generation phase of an in-terlingual machine translation system, specifically the lexical-choice process, and showhow the LKB was adapted for Xenon, a natural language generation system.
Xenonis a general-purpose NLG system that exploits our LKB of NS.
To implement Xenon,242Inkpen and Hirst A Lexical Knowledge Base of Near-Synonym DifferencesFigure 9Lexical analysis and choice in machine translation; adapted from Edmonds and Hirst (2002).
Thesolid lines show the flow of data: input, intermediate representations, and output; the dashedlines show the flow of knowledge from the knowledge sources to the analysis and the generationmodule.
The rectangles denote the main processing modules; the rest of the boxes denote data orknowledge sources.we modified the lexical-choice component of a preexisting NLG system, HALogen(Langkilde 2000; Langkilde and Knight 1998), to handle knowledge about the near-synonym differences.
(Xenon will be described in detail in Section 7.)
This requiredcustomization of the LKB to the Sensus ontology (Knight and Luk 1994) that HALogenuses as its representation.Customization of the core denotations for Xenon was straightforward.
The coredenotation of a cluster is a metaconcept representing the disjunction of all the Sensusconcepts that could correspond to the near-synonyms in a cluster.
The names of meta-concepts, which must be distinct, are formed by the prefix generic, followed by thename of the first near-synonym in the cluster and the part of speech.
For example, if thecluster is lie, falsehood, fib, prevarication, rationalization, untruth, the name of the cluster isgeneric lie n.Customizing the peripheral concepts, which are initially expressed as strings, couldinclude parsing the strings and mapping the resulting syntactic representation into asemantic representation.
For Xenon, however, we implemented a set of 22 simple rulesthat extract the actual peripheral concepts from the initial peripheral strings.
A trans-formation rule takes a string of words part-of-speech tagged and extracts a main word,several roles, and fillers for the roles.
The fillers can be words or recursive structures.
InXenon, the words used in these representations are not sense-disambiguated.
Here aretwo examples of input strings and extracted peripheral concepts:"an embarrassing breach of etiquette"=> (C / breach :GPI etiquette :MOD embarrassing)"to an embarrassing or awkward occurrence"=> (C / occurrence :MOD (OR embarrassing awkward))The roles used in these examples are MOD (modifier) and GPI (generalized possessioninverse).
The rules that were used for these two examples are these:Adj Noun1 of Noun2 => (C / Noun1 :GPI Noun2 :MOD Adj)Adj1 or Adj2 Noun => (C / Noun :MOD (OR Adj1 Adj2))243Computational Linguistics Volume 32, Number 2We evaluated our customization of the LKB on a hand-built standard solutionfor a set of peripheral strings: 139 strings to be used as a test set and 97 strings tobe used as a development set.
The rules achieved a coverage of 75% on the test setwith an accuracy of 55%.16 In contrast, a baseline algorithm of taking the first wordin each string as the peripheral concept covers 100% of the strings, but with only 16%accuracy.Figure 10 shows the full customized representation for the near-synonyms of error,derived from the initial representation that was shown earlier in Figure 8.
(See Inkpen[2003] for more examples of customized clusters.)
The peripheral concepts are factoredout, and the list of distinctions contains pointers to them.
This allows peripheral con-cepts to be shared by two or more near-synonyms.7.
Xenon: An NLG System that Uses Knowledge of Near-Synonym DifferencesThis section presents Xenon, a large-scale NLG system that uses the lexical knowledge-base of near-synonyms customized in Section 6.
Xenon integrates a new near-synonymchoice module with the sentence realization system HALogen17 (Langkilde 2000;Langkilde and Knight 1998).
HALogen is a broad-coverage general-purpose naturallanguage sentence generation system that combines symbolic rules with linguisticinformation gathered statistically from large text corpora.
The internal architectureof HALogen is presented in Figure 11.
A forest of all possible sentences (combi-nations of words) for the input is built, and the sentences are then ranked ac-cording to an n-gram language model in order to choose the most likely one asoutput.Figure 12 presents the architecture of Xenon.
The input is a semantic representationand a set of preferences to be satisfied.
The final output is a set of sentences andtheir scores.
A concrete example of input and output is shown in Figure 13.
Notethat HALogen may generate some ungrammatical constructs, but they are (usually)assigned lower scores.
The first sentence (the highest ranked) is considered to be thesolution.7.1 MetaconceptsThe semantic representation input to Xenon is represented, like the input to HAL-ogen, in an interlingua developed at University of Southern California/InformationSciences Institute (USC/ISI).18 As described by Langkilde-Geary (2002b), this lan-guage contains a specified set of 40 roles, whose fillers can be either words, con-cepts from Sensus (Knight and Luk 1994), or complex interlingual representations.The interlingual representations may be underspecified: If some information neededby HALogen is not present, it will use its corpus-derived statistical information to16 We found that sometimes a rule would extract only a fragment of the expected configuration of conceptsbut still provided useful knowledge; however, such cases were not considered to be correct in thisevaluation, which did not allow credit for partial correctness.
For example, if the near-synonym commanddenotes the/TD stated/VB demand/NN of/IN a/TD superior/JJ, the expected peripheral concept is(C1 / demand :GPI superior :MOD stated).
If the program extracted only (C1 / demand :GPIsuperior), the result was not considered correct, but the information might still help in an NLP system.17 http://www.isi.edu/licensed-sw/halogen/18 http://www.isi.edu/licensed-sw/halogen/interlingua.html244Inkpen and Hirst A Lexical Knowledge Base of Near-Synonym DifferencesFigure 10The final representation of the error cluster.make choices.
Xenon extends this representation language by adding metaconceptsthat correspond to the core denotation of the clusters of near-synonyms.
For example,in Figure 13, the metaconcept is generic lie n. As explained in Section 6, metacon-cepts may be seen as a disjunction of all the senses of the near-synonyms of thecluster.7.2 Near-Synonym ChoiceThe near-synonym choice module has to choose the most appropriate near-synonymfrom the cluster specified in the input.
It computes a satisfaction score that becomesa weight (to be explained in section 7.3) for each near-synonym in the cluster.
HAL-ogen makes the final choice by adding these weights to n-gram probabilities from itslanguage model (more precisely, the negative logarithms of these values) and choosing245Computational Linguistics Volume 32, Number 2Figure 11The architecture of the sentence realizer HALogen.the highest-ranked sentence.
For example, the expanded representation of the inputin Figure 13 is presented in Figure 14.
The near-synonym choice module gives higherweight to fib because it satisfies the preferences better than the other near-synonyms inthe cluster, lie, falsehood, fib, prevarication, rationalization, and untruth.7.3 Preferences and Similarity of DistinctionsThe preferences that are input to Xenon could be given by the user, or they could comefrom an analysis module if Xenon is used in a machine translation system (correspond-ing to nuances of near-synonyms in a different language, see Figure 9).
The preferences,like the distinctions expressed in the LKB of NS, are of three types: attitudinal, stylistic,and denotational.
Examples of each:(low formality)(disfavour :agent)(imply (C / assessment :MOD ( M / (*OR* ignorant uninformed)).The formalism for expressing preferences is from I-Saurus (Edmonds 1999).
Thepreferences are transformed internally into pseudodistinctions that have the same formas the corresponding type of distinctions so that they can be directly compared with thedistinctions.
The pseudodistinctions corresponding to the previous examples are these:(-?
low Formality)(- always high Pejorative :agent)(- always medium Implication(C/assessment :MOD (M/(OR ignorant uninformed)).Figure 12The architecture of the natural language generation system Xenon.246Inkpen and Hirst A Lexical Knowledge Base of Near-Synonym DifferencesFigure 13Example of input and output of Xenon.Figure 14The interlingual representation of the input in Figure 13 after expansion by the near-synonymchoice module.For each near-synonym NS in a cluster, a weight is computed by summing thedegree to which the near-synonym satisfies each preference from the set P of inputpreferences:Weight(NS, P) =?p?PSat(p, NS).
(2)The weights are transformed through an exponential function so that numbers arecomparable with the differences of probabilities from HALogen?s language model:f (x) = exke ?
1 .
(3)We set k = 15 as a result of experiments with a development set.For a given preference p ?
P, the degree to which it is satisfied by NS is reduced tocomputing the similarity between each of NS?s distinctions and a pseudodistinction d(p)generated from p. The maximum value over i is taken (where di(w) is the ith distinctionof NS):Sat(p, NS) = maxiSim(d(p), di(NS)).
(4)247Computational Linguistics Volume 32, Number 2where the similarity of two distinctions, or of a distinction and a preference (trans-formed into a distinction), is computed with the three types of similarity measures thatwere used by Edmonds and Hirst (2002) in I-Saurus:Sim(d1, d2) =??????
?Simden(d1, d2) if d1 and d2 are denotational distinctionsSimatt(d1, d2) if d1 and d2 are attitudinal distinctionsSimsty(d1, d2) if d1 and d2 are stylistic distinctions0 otherwise(5)Distinctions are formed out of several components, represented as symbolic valueson certain dimensions, such as frequency (seldom, sometimes, etc.)
and strength (low,medium, high).
In order to compute a numeric score, each symbolic value is mappedinto a numeric one.
The numeric values are not as important as their relative difference.If the two distinctions are not of the same type, they are incommensurate and theirsimilarity is zero.
The formulas for Simatt and Simsty involve relatively straightforwardmatching.
However, Simden requires the matching of complex interlingual structures.This boils down to computing the similarity between the main concepts of the twointerlingual representations, and then recursively mapping the shared semantic roles(and compensating for the roles that appear in only one).
When atomic concepts orwords are reached, we use a simple measure of word/concept similarity based onthe hierarchy of Sensus.
All the details of these formulas, along with examples, arepresented by Inkpen and Hirst (2003).7.4 Integrating the Knowledge of Collocational BehaviorKnowledge of collocational behavior is not usually present in NLG systems.
Adding itwill increase the quality of the generated text, making it more idiomatic: The systemwill give priority to a near-synonym that produces a preferred collocation and will notchoose one that causes an anti-collocation to appear in the generated sentence.Unlike most other NLG systems, HALogen already incorporates some collocationalknowledge implicitly encoded in its language model (bigrams or trigrams), but this ismainly knowledge of collocations between content words and function words.
There-fore, in its integration into Xenon, the collocational knowledge acquired in Section 3will be useful, as it includes collocations between near-synonyms and other nearbycontent words.
Also, it is important whether the near-synonym occurs before or afterthe collocate; if both positions are possible, both collocations are in the knowledgebase.The architecture of Xenon extended with the near-synonym collocation moduleis presented in Figure 15.
The near-synonym collocation module intercepts the foreststructure, modifies its weights as necessary, and then forwards it to the statisticalranking module.
If a potential anti-collocation is seen in the forest structure, the weightof the near-synonym is discounted by Wanti colloc; if a less preferred collocation is seen,the weight of the near-synonym is discounted by Wless pref colloc.
For preferred collo-cations, the weight is unchanged.
If the collocate is not the only alternative, the otheralternatives should be discounted, unless they also form a preferred collocation.
Sec-tion 7.5.2 explains how the discount weights were chosen.248Inkpen and Hirst A Lexical Knowledge Base of Near-Synonym DifferencesFigure 15The architecture of Xenon extended with the near-synonym collocation module.
In this figure,the knowledge sources are not shown.7.5 Evaluation of XenonThe components of Xenon to be evaluated here are the near-synonym choice moduleand the near-synonym collocation module.
We evaluate each module in interaction withthe sentence-realization module HALogen,19 first individually and then both workingtogether.20An evaluation of HALogen itself was presented by Langkilde-Geary (2002a) usinga section of the Penn Treebank as test set.
HALogen was able to produce output for80% of a set of 2,400 inputs (automatically derived from the test sentences by an inputconstruction tool).
The output was 94% correct when the input representation wasfully specified, and between 94% and 55% for various other experimental settings.
Theaccuracy was measured using the BLEU score (Papineni et al 2001) and the stringedit distance by comparing the generated sentences with the original sentences.
Thisevaluation method can be considered as English-to-English translation via meaningrepresentation.7.5.1 Evaluation of the Near-Synonym Choice Module.
For the evaluation of the near-synonym choice module, we conducted two experiments.
(The collocation module wasdisabled for these experiments.)
Experiment 1 involved simple monolingual generation.Xenon was given a suite of inputs: Each was an interlingual representation of a sentenceand the set of nuances that correspond to a near-synonym in the sentence (see Figure 16).The sentence generated by Xenon was considered correct if the expected near-synonym,whose nuances were used as input preferences, is chosen.
The sentences used in thisfirst experiment were very simple; therefore, the interlingual representations were easilybuilt by hand.
In the interlingual representation, the near-synonym was replaced withthe corresponding metaconcept.
There was only one near-synonym in each sentence.Two data sets were used in Experiment 1: a development set of 32 near-synonyms ofthe five clusters presented in Figure 17 in order to set the exponent k of the scalingfunction in equation (3), and a test set of 43 near-synonyms selected from six clusters,namely, the set of English near-synonyms shown in Figure 18.19 All the evaluation experiments presented in this section used HALogen?s trigram language model.
Theexperiments were repeated with the bigram model, and the results were almost identical.20 Preliminary evaluation experiments of only the near-synonym choice module were presented by Inkpenand Hirst (2003).249Computational Linguistics Volume 32, Number 2Figure 16The architecture of Experiment 1.Figure 17Development data set used in Experiment 1.Some of Xenon?s choices could be correct solely because the expected near-synonymhappens to be the default one (the one with the highest probability in the languagemodel).
So as a baseline (the performance that can be achieved without using the LKBof NS), we ran Xenon on all the test cases, but without input preferences.The results of Experiment 1 are presented in Table 6.
For each data set, the secondcolumn shows the number of test cases.
The column labeled ?Total correct?
shows thenumber of answers considered correct (when the expected near-synonym was chosen).The column labeled ?Ties?
shows the number of cases when the expected near-synonymhad weight 1.0, but there were other near-synonyms that also had weight 1.0 becausethey happen to have identical nuances in the LKB of NS.
The same column shows inparentheses how many of these ties caused an incorrect near-synonym choice.
In suchcases, Xenon cannot be expected to make the correct choice, or, more precisely, the otherchoices are equally correct, at least as far as Xenon?s LKB is concerned.
Therefore, theFigure 18Test data set used in Experiment 1 (English only) and Experiment 2 (English and French).250Inkpen and Hirst A Lexical Knowledge Base of Near-Synonym DifferencesTable 6Results of Experiment 1 (boldface indicates best results).No.
Correct Base- Accuracyof Total by line (no ties) AccuracyData set cases correct default Ties % % %Development 32 27 5 5 (4) 15.6 84.3 96.4Test 43 35 6 10 (5) 13.9 81.3 92.1accuracies computed without considering these cases (the seventh column) are under-estimates of the real accuracy of Xenon.
The last column presents accuracies taking theties into account, defined as the number of correct answers divided by the differencebetween the total number of cases and the number of incorrectly resolved ties.Experiment 2 is based on machine translation.
These experiments measure howsuccessful the translation of near-synonyms is, both from French into English andfrom English into English.
The experiments used pairs of French and English sen-tences that are translations of one another (and that contain near-synonyms of interest),extracted from sentence-aligned parallel text, the bilingual Canadian Hansard.
Ex-amples are shown in Figure 19.21 For each French sentence, Xenon should generatean English sentence that contains an English near-synonym that best matches the nu-ances of the French original.
If Xenon chooses exactly the English near-synonym usedin the parallel text, then Xenon?s behavior is correct.
This is a conservative evaluationmeasure because there are cases in which more than one of the possibilities would beacceptable.As illustrated earlier in Figure 9, an analysis module is needed.
For the evalua-tion experiments, a simplified analysis module is sufficient.
Because the French andEnglish sentences are translations of each other, we can assume that their interlingualrepresentation is essentially the same.
So for the purpose of these experiments, wecan use the interlingual representation of the English sentence to approximate theinterlingual representation of the French sentence and simply add the nuances of theFrench near-synonym to the representation.
This is a simplification because there maybe some sentences for which the interlingual representation of the French sentence isdifferent because of translation divergences between languages (Dorr 1993).
For thesentences in our test data, a quick manual inspection shows that this happens veryrarely or not at all.
This simplification eliminates the need to parse the French sen-tence and the need to build a tool to extract its semantics.
As depicted in Figure 20,the interlingual representation is produced with a preexisting input construction toolthat was previously used by Langkilde-Geary (2002a) in her HALogen evaluationexperiments.
In order to use this tool, we parsed the English sentences with Charniak?sparser (Charniak 2000).22 The tool was designed to work on parse trees from the PennTreeBank, which have some extra annotations; it worked on parse trees producedby Charniak?s parser, but it failed on some parse trees probably more often than it21 The sentences were obtained from USC/ISI (http://www.isi.edu/natural-language/download/hansard/)(approximately one million pairs of sentences).
Other sources of parallel text, such as parallel translationsof the Bible (http://benjamin.umd.edu/parallel/) (Resnik 1999) and a collection of Web pages (Resnik,Olsen, and Diab 1999), happened to contain very few occurrences of the near-synonyms of interest.22 ftp://ftp.cs.brown.edu/pub/nlparser/251Computational Linguistics Volume 32, Number 2Figure 19Examples of parallel sentences used in Experiment 2.Figure 20The architecture of Experiment 2 (French to English).did in HALogen?s evaluation experiments.
We replaced each near-synonym with themetaconcept that is the core meaning of its cluster.
The interlingual representation forthe English sentence is semantically shallow; it does not reflect the meaning of theFrench sentence perfectly, but in these experiments we are interested only in the near-synonyms from the test set; therefore, the other words in the French sentence are notimportant.The analyzer of French nuances of Figure 20 needs to extract nuances from anLKB of French synonyms.
We created by hand an LKB for six clusters of French near-synonyms (those from Figure 18) from two paper dictionaries of French synonyms,Be?nac (1956) and Bailly (1973).
For each peripheral string, in French, an equivalentconcept is found in Sensus by looking for English translations of the words and thenfinding Sensus concepts for the appropriate senses of the English words.
Figure 21presents a fragment of a cluster of French near-synonyms.
For example, if we aretold that erreur denotes fausse opinion, the equivalent peripheral concept is (P8 (c8 /|view<belief| :mod |false>untrue|)).
If we are told that gaffe denotes be?vuegrossiere, then the equivalent peripheral concept is (P7 (c7 / |glaring,gross|)).A similar experiment, translating not from French into English but from Englishinto English, is useful for evaluation purposes.
An English sentence containing a near-synonym is processed to obtain its semantic representation (where the near-synonym isreplaced with a metaconcept), and the lexical nuances of the near-synonym are input aspreferences to Xenon.
Ideally, the same near-synonym as in the original sentence wouldbe chosen by Xenon (we consider it to be the correct choice).
The percentage of timesthis happens is an evaluation measure.
The architecture of this experiment is presentedin Figure 22.It happens that not all the near-synonyms in the test data set were found in Han-sard?in fact, only 13 distinct pairs occur as translations of each other.
Some of thesepairs are very frequent, and some are rare.
In order to evaluate the system for all thesenear-synonyms, both with and without regard to their frequency, we prepared two252Inkpen and Hirst A Lexical Knowledge Base of Near-Synonym DifferencesFigure 21Fragment of a cluster of French near-synonyms.Figure 22The architecture of Experiment 2 (English to English).data sets by sampling Hansard in two different ways.
Sentence data set 1 contains,for each French and English near-synonym pair in the test data set, two pairs ofsentences in which the English word appears as a translation of the French.
Thesentences selected for each pair were the first two for which the input constructiontool produced a valid interlingual representation.
Sentence data set 2 is similar toset 1, but instead of having two sentences for a near-synonym pair, it contains all thesentence pairs in a large fragment of Hansard in which the near-synonyms of interestoccurred.
Therefore, this data set has the advantage of a natural frequency distribution.It has the disadvantage that the results for the less-frequent near-synonyms, whichtend to be the ?harder?
and more-interesting cases (see below), may be swamped bythe more-frequent, relatively ?easy?
cases.
Initially there were 564 pairs of sentences,but the input construction tool worked successfully only on 298 English sentences.
Theinterlingual representations that it produced are quite complex, typically several pageslong.The results of Experiment 2 are presented in Table 7;23 the interpretation of thecolumns is the same as for Table 6.
For each set of sentences, the baseline is the same23 The improvement over baseline is statistically significant for all the results in Table 7, except the third line.253Computational Linguistics Volume 32, Number 2Table 7Results of Experiment 2 (boldface indicates best results).Data set No.
Correct Base- Accuracyand of Total by line (no ties) Accuracycondition cases correct default Ties % % %Sentence set 1 26 13 10 5 (3) 38.4 50.0 56.5French to EnglishSentence set 1 26 26 10 2 (0) 38.4 100 100English to EnglishSentence set 2 298 217 214 7 (1) 71.8 72.8 73.0French to EnglishSentence set 2 298 296 214 2 (0) 71.8 99.3 99.3English to Englishfor the French-to-English and English-to-English experiments because no nuances wereused as input for the baseline experiments.
The baseline for data set 2 is quite high(71.8%), because it contains sentences with frequent near-synonyms, which happento be the ones that Xenon chooses by default in the absence of input preferences.Xenon?s performance is well above baseline, with the exception of the French-to-Englishcondition on sentence data set 2.In the English-to-English experiments, there are two reasons to expect Xenon?saccuracy to be less than 100% even if the input nuances are the nuances of a particularEnglish near-synonym.
The first reason is that there are cases in which two or morenear-synonyms get an equal, maximal score because they do not have nuances thatdifferentiate them (either they are perfectly interchangeable, or the LKB of NS does notcontain enough knowledge) and the one chosen is not the expected one.
The secondreason is that sometimes Xenon does not choose the expected near-synonym even if it isthe only one with maximal weight.
This may happen because HALogen makes the finalchoice by combining the weight received from the near-synonym choice module withthe probabilities from the language model that is part of HALogen.
Frequent words mayhave high probabilities in the language model.
If the expected near-synonym is veryrare, or maybe was not seen at all by the language model, its probability is very low;yet it is exactly those cases where a writer chooses a rare near-synonym over a more-frequent alternative that the choice is the most telling.
When combining the weightswith the probabilities, a frequent near-synonym may win even if it has a lower weightassigned by the near-synonym choice module.
In such cases, the default near-synonym(the most frequent of the cluster) wins.
Sometimes such behavior is justified becausethere may be other constraints that influence HALogen?s choice.In the French-to-English experiments, the performance of Xenon is lower than in theEnglish-to-English experiments.
There are two explanations.
First, there is some overlapbetween the nuances of the French and the English near-synonyms, but less than onewould expect.
For example, the English adjective alcoholic is close in nuances to theFrench adjective alcoolique, but they have no nuance in common in Xenon?s knowledgebases simply because of the incompleteness of the explanations given by lexicographersin the dictionary entries.The second explanation is related to what is considered the ?correct?
choice of near-synonym.
Sometimes more than one translation of a French near-synonym could be254Inkpen and Hirst A Lexical Knowledge Base of Near-Synonym Differencescorrect, but in this conservative evaluation, the solution is the near-synonym that wasused in the equivalent English sentence.
Therefore, test cases that would be consideredcorrect by a human judge are harshly penalized.
Moreover, the near-synonym choicemodule always chooses the same translation for a near-synonym, even if the near-synonym is translated in Hansard in more than one way, because Xenon does notconsider the context of the near-synonym in the sentence.
(The context is taken intoaccount only when the collocation module is enabled and a preferred collocation isdetected in the sentences.)
For example, the French noun erreur is translated in Hansardsometimes as error, sometimes as mistake.
Both have nuances in common with erreur,but mistake happened to have higher overlap with erreur than error; as a result, the near-synonym choice module always chooses mistake (except when the collocation moduleis enabled and finds a preferred collocation such as administrative error).
All the casesin which error was used as translation of erreur in Hansard are penalized as incorrectin the evaluation of the near-synonym choice module.
A few of these cases could beindeed incorrect, but probably many of them would be considered correct by a humanjudge.Another way to look at the performance of Xenon is to measure how many times itmakes appropriate choices that cannot be made by HALogen?that is, cases that makegood use of the nuances from the LKB of NS.
This excludes the test cases with defaultnear-synonyms?those in which Xenon makes the right choice simply because of itslanguage model?and cases of ties in which Xenon cannot make the expected choice.Accuracies for nondefault cases vary from 84.3% to 100%.7.5.2 Evaluation of the Near-Synonym Collocation Module.
For the evaluation of thenear-synonym collocation module, we collected sentences from the BNC that containpreferred collocations from the knowledge base of near-synonym collocational behav-ior.
The BNC was preferred over Hansard for these evaluation experiments because itis a balanced corpus and contains the collocations of interest, whereas Hansard doesnot contain some of the collocations and near-synonyms of interest.
The sentences werecollected from the first half of the BNC (50 million words).
Sentence data sets 3 and 4contain collocations for the development set of near-synonyms in Figure 17; sentencedata sets 5 and 6 contain collocations for the English near-synonyms in Figure 18.Sets 3 and 5 include at most two sentences per collocation (the first two sentences fromthe corpus, except in cases when the input construction tool failed to produce validinterlingual representations); sets 4 and 6 include all the sentences with collocationsas they occurred in the fragment of the corpus (except the sentences for which theinput construction tool failed).
For example, for set 4 there were initially 527 sentences,and the input construction tool succeeded on 297 of them.
Set 3 was used for develop-ment?to choose the discount weights (see below)?and the others only for testing.
Thearchitecture of this experiment is the same as that of the English-to-English experiments(Figure 22), except that in this case it was the near-synonym choice module that wasdisabled.We observe that the sentence data sets may contain collocations for the wrongsenses of some near-synonyms because, as explained in Section 3.4, the near-synonymcollocations knowledge base may contain, for a cluster, collocations for a different sense.For example, the collocation trains run appears in the cluster flow, gush, pour, run, spout,spurt, squirt, stream, when it should appear only in another cluster.
In this case the near-synonym run should not be replaced with the metaconcept generic flow v becauseit corresponds to a different metaconcept.
These sentences should be eliminated from255Computational Linguistics Volume 32, Number 2Table 8The results of the evaluation of Xenon?s collocations module (boldface indicates best results).HALogen only (baseline) HALogen + collocationsSentence No.
of Correct Pref.
Anti- Correct Pref.
Anti-data set cases NS choice collocs collocs NS choice collocs collocsSet 3 105 62% 88% 12% 70% 100% 0%Set 4 297 83% 91% 9% 87% 99% 1%Set 5 44 59% 80% 20% 75% 100% 0%Set 6 185 58% 68% 32% 86% 99% 1%the data sets, but this would involve disambiguation or manual elimination.
However,they do not affect the evaluation results because they are unlikely to produce anti-collocations.
This is because trains run is a frequent bigram, whereas trains flow is not;Xenon will make the correct choice by default.Sentence data set 3 was used to choose the best values of the discount weightsWanti colloc and Wless pref colloc.
In fact, the latter could be approximated by the former,treating less preferred collocations as anti-collocations, because the number of lesspreferred collocations is very small in the knowledge base.
As the value of the dis-count weight Wanti colloc increased (from 0.0 and 1.0), the number of anti-collocationsgenerated decreased; there were no anti-collocations left for Wanti colloc = 0.995.Table 8 presents the results of the evaluation experiments.
These results refer tothe evaluation of Xenon with the near-synonym collocations module enabled and thenear-synonym choice module disabled (lexical nuances are ignored in this experiment).The baseline used for comparison is obtained by running HALogen only, without anyextension modules (no knowledge of collocations).
For each test, the first four columnscontain the number of test cases, the number of near-synonyms correctly chosen bythe baseline system, the number of preferred collocations, and the number of anti-collocations produced by the baseline system.
The remainder of the columns presentresults obtained by running Xenon with only the near-synonym collocations moduleenabled (i.e., HALogen and the collocations module): the number of near-synonymscorrectly chosen, the number of preferred collocations produced, and the number ofanti-collocations produced.
The number of anti-collocations was successfully reducedto zero, except for sentence sets 4 and 6 where 1% of the anti-collocations remained.
Thesixth column (correct choices or accuracy) differs from the seventh column (preferredcollocations) in the following way: The correct choice is the near-synonym used in theoriginal BNC sentence; sometimes the generated sentence can choose a different near-synonym that is not the expected one but which participates in a preferred collocation(this happens when more than one near-synonym from the same cluster collocateswell with the collocate word).
For example, both serious mistake and serious blunder arepreferred collocations, while only one of mistake and blunder is the correct choice in anyparticular context.
The number of correct choices is relevant in this experiment only toshow that the collocations module does not have a negative effect on correctness; it evenincreases the accuracy.2424 The accuracy without ties was used here; therefore the numbers are conservative.256Inkpen and Hirst A Lexical Knowledge Base of Near-Synonym Differences7.5.3 Evaluation of the Two Modules in Interaction.
The interaction between the near-synonym choice module and the collocations module increases Xenon?s performance.To prove this, we repeated the experiments of the previous section, but this time withinput preferences (the nuances of the near-synonym from the original sentence).
Thearchitecture of this test is the same as that of the English-to-English experiments inSection 7.5.1, depicted in Figure 22.
Table 9 shows the number of correct near-synonymchoices (and the percent accuracy) for the baseline case (no nuances, no collocationmodule; i.e., HALogen by itself), for the collocations module alone (i.e., HALogen andthe collocations module only; this column is also part of Table 8), for the near-synonymchoice module alone (i.e., HALogen and the nuances module only), and for Xenon withboth modules enabled.
When both modules are enabled there is a slight increase inaccuracy on sentence data sets 4, 5, and 6; the accuracy on set 3 is the same as using thenear-synonyms module only.7.6 SummaryThis section presented Xenon, an NLG system capable of choosing the near-synonymthat best satisfies a set of input preferences (lexical nuances).
The input preferencescould come from an analysis module for a different language; in this case the translationinto English would preserve not only the meaning but also nuances of meaning.
Theevaluation of Xenon?s two new modules shows that they behave well, both indepen-dently and in interaction.The evaluation showed that we were successful in dealing with lexical nuances ingeneral.
One weak point of the evaluation was the relatively small overlap in coverageof the French and English knowledge bases.
Another bottle-neck was the need for alanguage-neutral ontology.8.
ConclusionWe have presented a method for extracting knowledge from dictionaries of near-synonym discrimination.
The method can potentially be applied to any dictionaryTable 9Correct near-synonym choices for the baseline system (HALogen only), for HALogen with eachmodule of Xenon separately, and for HALogen with both modules of Xenon (boldface indicatesbest results).HALogen(baseline) XenonCorrect NS Correct NS Correct NSSentence Number collocations nuances nuances +data set of cases Correct NS module module collocationsSet 3 105 62% 70% 93% 93%Set 4 297 83% 87% 95% 95%Set 5 44 59% 75% 93% 95%Set 6 185 58% 86% 91% 95%257Computational Linguistics Volume 32, Number 2of near-synonym discrimination for any language for which preprocessing tools,such as part-of-speech taggers and parsers, are available.
We built a new lexical re-source, a lexical knowledge base of differences among English near-synonyms, byapplying the extraction method to Choose the Right Word.
The precision and recallof the extracted knowledge was estimated to be in the range of 70?80%.
If higherprecision and recall are needed for particular applications, a human could vali-date each extraction step.
We enriched the initial lexical knowledge base of near-synonyms with distinctions extracted from machine-readable dictionaries.We have presented Xenon, a natural language generation system that uses theLKB of NS to choose the near-synonym that best matches a set of input preferences.Xenon extends a previous NLG system with two new modules: a module that choosesnear-synonyms on the basis of their lexical nuances, and a module that chooses near-synonyms on the basis of their collocations.
To evaluate Xenon, we manually builta small LKB of French near-synonyms.
The test set consisted of English and Frenchsentences that are mutual translations.
An interlingual representation (with the near-synonym replaced by the core denotation of its cluster) was input to Xenon, togetherwith the nuances of the near-synonym from the French sentence.
The generated sen-tence was considered correct if the chosen English near-synonym was the one from theoriginal English sentence.
We also evaluated the near-synonym collocation module andthe interaction of the two modules.Short-term future work includes overcoming some limitations and extending thecurrent work, such as extending the near-synonym representation with other typesof distinctions such as information about more general and more specific words, andinformation about special meanings that some words have in particular contexts ordomains (e.g., in a legal context).Longer-term future work directions include the following:Analysis of lexical nuances A full-fledged analysis module could be developed.Sense disambiguation would be required when a near-synonym is a member of morethan one cluster.
It is more difficult to model the influence of the context and thecomplex interaction of the lexical nuances.
Such an analysis module could be usedin an Machine Translation (MT) system that preserves lexical nuances.
It could alsobe used to determine nuances of text for different purposes.
For example, a systemcould decide if a text is positive, neutral, or negative in its semantic orientation.
ThenXenon could be used to generate a new text that has the same meaning as the origi-nal text but a different semantic orientation.
This could be useful, for example, in anapplication that sends letters to customers: If the initial draft of the text is found to betoo negative, it could be transformed into a more positive text before it is sent to thecustomer.Lexical and conceptual associations The method presented in Section 3 couldbe extended to acquire lexical associations (i.e., longer-distance collocations) of near-synonyms.
Words that strongly associate with the near-synonyms can be useful,especially those that associate with only one of the near-synonyms in the cluster.These strong associations could provide additional knowledge about nuances of near-synonyms.An experiment similar to that presented in Section 3 could look for words that co-occur in a window of size K > 2 to acquire lexical associations, which would includethe collocations extracted in Section 3.2.
Church et al (1991) presented associations forthe near-synonyms ship and boat; they suggest that a lexicographer looking at theseassociations can infer that boats are generally smaller than ships because they are foundin rivers and lakes and are used for small jobs (e.g., fishing, police, pleasure), whereas258Inkpen and Hirst A Lexical Knowledge Base of Near-Synonym Differencesships are found in seas and are used for serious business (e.g., cargo, war).
It could bepossible to automatically infer this kind of knowledge or to validate already acquiredknowledge.Words that do not associate with a near-synonym but associate with all the othernear-synonyms in a cluster can tell us something about its nuances of meaning.
Forexample, terrible slip is an anti-association, whereas terrible associates with mistake,blunder, error.
This is an indication that slip is a minor error.
By further generalization,the associations could become conceptual associations.
This may allow the automaticlearning of denotational distinctions between near-synonyms from free text.
The con-cepts that are common to all the near-synonyms in a cluster could be part of the coredenotation, whereas those that associate only with one near-synonym could be part ofa distinction.Cross-lingual lexical nuances The method presented in Section 2 could be used toautomatically build a lexical knowledge base of near-synonym differences for other lan-guages, such as French, for which dictionaries of synonym discriminations are available(in paper form) along with other resources, such as part-of-speech taggers and parsers.In order to use the French and the English knowledge bases in the same system, a studyof the cross-lingual lexical nuances will be needed.Analysis of types of peripheral nuances Linguists and lexicographers have lookedat differences between particular types of near-synonyms.
For example, Gao (2001)studied the semantic distinctions between Chinese physical action verbs; one type ofdistinctive peripheral nuance is the manner in which the movement is made for eachverb.
This kind of study could help to develop a list of the main types of peripheralnuances (peripheral concepts).
In our work, the form that the peripheral nuances cantake is not restricted, because the list of peripheral nuances is open-ended.
However,it may be possible to keep the form unrestricted but add restrictions for the mostimportant types of peripheral nuances.Intelligent thesaurus The acquired lexical knowledge base of near-synonym differ-ences could be used to develop an intelligent thesaurus that assists a writer not onlywith a list of words that are similar to a given word but also with explanations aboutthe differences in nuances of meaning between the possible choices.
The intelligentthesaurus could order the choices to suit a particular writing context.
The knowledgeabout the collocational behavior of near-synonyms can be used in determining theorder: Near-synonyms that produce anti-collocations would be ranked lower than near-synonyms that produce preferred collocations.Automatic acquisition of near-synonyms This work considered only the near-synonyms and distinctions that were listed by the lexicographers of CTRW.
Otherdictionaries of synonym discrimination may have slightly different views.
Mergingclusters from different dictionaries is possible.
Also, near-synonym clusters could beacquired from free text.
This would distinguish near-synonyms from the pool of re-lated words.
As mentioned in Section 5.3, Lin et al (2003) acquired words that arerelated by contextual similarity, and then filtered out the antonyms.
Words that arerelated by relations other than near-synonymy could also be filtered out.
One way todo this could be to collect signatures for each potential near-synonym?words that as-sociate with it in many contexts.
For two candidate words, if one signature is containedin the other, the words are probably in an IS-A relation; if the signatures overlap totally,it is a true near-synonymy relation; if the signatures overlap partially, it is a differentkind of relation.
The acquisition of more near-synonyms, followed by the acquisition ofmore distinctions, is needed to increase the coverage of our lexical knowledge base ofnear-synonym differences.259Computational Linguistics Volume 32, Number 2AcknowledgmentsWe thank Irene Langkilde-Geary for makingthe input construction tool available and forher advice on how to connect our preferencesatisfaction mechanism to HALogen.
Wethank Phil Edmonds for making availablethe source code of I-Saurus.
We thankSuzanne Stevenson, Gerald Penn, TedPedersen, and anonymous reviewers fortheir feedback on various stages of this work.We thank Ol?ga Feiguina for being anenthusiastic research assistant and forimplementing the programs from Section 4.Our work is financially supported by theNatural Sciences and Engineering ResearchCouncil of Canada, the University ofToronto, and the University of Ottawa.ReferencesAbney, Steven.
1996.
Partial parsing viafinite-state cascades.
In Proceedings of the8th European Summer School in Logic,Language and Information (ESS-LLI?96),Robust Parsing Workshop, pages 124?131,Prague, Czech Republic.Apresjan, J. D., V. V. Botiakova, T. E.Latiskeva, M. A. Mosiagina, I. V. Polik, V. I.Rakitina, A.
A. Rozenman, and E. E.Sretenskaia.
1980.
Anglo-RusskiiSinonimicheskii Slovar.
Izdatelstvo RusskiiJazik.Apresjan, Juri.
2000.
Systematic Lexicography.Translation, Oxford University Press.Bailly, Rene?, editor.
1973.
Dictionnaire desSynonymes de la Langue Franc?aise.
Larousse,Paris.Barrie`re, Caroline and Fred Popowich.
1996.Concept clustering and knowledgeintegration from a children?s dictionary.
InProceedings of the 18th InternationalConference on Computational Linguistics(COLING?96), pages 65?70, Copenhagen,Denmark.Be?nac, Henri, editor.
1956.
Dictionnaire desSynonymes.
Librarie Hachette, Paris.Bernard, J. R. L., editor.
1986.
The MacquarieThesaurus?Companion to The MacquarieDictionary.
Macquarie Library, Sydney,Australia.Caraballo, Sharon.
1999.
Automaticacquisition of a hypernym-labeled nounhierarchy from text.
In Proceedings of the37th Annual Meeting of the Association forComputational Linguistics, pages 120?126,College Park, MD.Charniak, Eugene.
2000.
A maximum-entropy-inspired parser.
In Proceedings ofthe 1st Conference of the North AmericanChapter of the Association for ComputationalLinguistics and the 6th Conference on AppliedNatural Language Processing (NAACL-ANLP2000), pages 132?139, Seattle, WA.Church, Kenneth, William Gale, PatrickHanks, and Donald Hindle.
1991.
Usingstatistics in lexical analysis.
In Uri Zernik,editor, Lexical Acquisition: Using On-lineResources to Build a Lexicon, pages 115?164.Lawrence Erlbaum.Collins, Michael.
1996.
A new statisticalparser based on bigram lexicaldependencies.
In Proceedings of the 34thAnnual Meeting of the Association forComputational Linguistics, pages 184?191,Santa Cruz.Collins, Michael and Yoram Singer.
1999.Unsupervised models for named entityclassification.
In Proceedings of theConference on Empirical Methods in NaturalLanguage Processing and Very Large Corpora(EMNLP/VLC-99), pages 100?110,College Park, MD.Delbridge, A., J. R. L. Bernard, D. Blair, W. S.Ramson, and Susan Butler, editors.
1987.The Macquarie Dictionary.
MacquarieLibrary, Sydney, Australia.DiMarco, Chrysanne, Graeme Hirst, andManfred Stede.
1993.
The semantic andstylistic differentiation of synonyms andnear-synonyms.
In Proceedings of AAAISpring Symposium on Building Lexicons forMachine Translation, pages 114?121,Stanford, CA.Dorr, Bonnie J.
1993.
The Use of LexicalSemantics in Interlingual MachineTranslation.
The MIT Press, Cambridge,MA.Edmonds, Philip.
1999.
Semanticrepresentations of near-synonyms forautomatic lexical choice.
Ph.D. thesis,University of Toronto.Edmonds, Philip and Graeme Hirst.
2002.Near-synonymy and lexical choice.Computational Linguistics, 28(2):105?145.Gao, Hong.
2001.
The Physical Foundation ofthe Patterning of Physical Action Verbs.
Ph.D.thesis, Lund University.Gove, Philip B., editor.
1984.
Webster?s NewDictionary of Synonyms.
G.&C.
Merriam Co.Hayakawa, S. I., editor.
1994.
Choose theRight Word.
Second Edition, revisedby Eugene Ehrlich.
HarperCollinsPublishers.Hearst, Marti.
1992.
Automatic acquisitionof hyponyms from large corpora.
InProceedings of the 14th InternationalConference on Computational Linguistics(COLING?92), pages 538?545, Nantes,France.260Inkpen and Hirst A Lexical Knowledge Base of Near-Synonym DifferencesHirst, Graeme.
1995.
Near-synonymy and thestructure of lexical knowledge.
In WorkingNotes, AAAI Symposium on Representationand Acquisition of Lexical Knowledge:Polysemy, Ambiguity, and Generativity,pages 51?56, Stanford University.Hovy, Eduard.
1990.
Pragmatics andlanguage generation.
Artificial Intelligence,43:153?197.Ide, Nancy and Jean Ve?ronis.
1994.Knowledge extraction frommachine-readable dictionaries: Anevaluation.
In P. Steffens, editor, MachineTranslation and the Lexicon, pages 19?34,Springer-Verlag.Inkpen, Diana.
2003.
Building a LexicalKnowledge Base of Near-Synonym Differences.Ph.D.
thesis, University of Toronto.Inkpen, Diana Zaiu and Graeme Hirst.
2001.Building a lexical knowledge base ofnear-synonym differences.
In Proceedings ofthe Workshop on WordNet and Other LexicalResources, Second Meeting of the NorthAmerican Chapter of the Association forComputational Linguistics (NAACL 2001),pages 47?52, Pittsburgh, PA.Inkpen, Diana Zaiu and Graeme Hirst.
2002.Acquiring collocations for lexical choicebetween near-synonyms.
In Proceedings ofthe Workshop on Unsupervised LexicalAcquisition, 40th Annual Meeting of theAssociation for Computational Linguistics(ACL 2002), pages 67?76, Philadelphia, PA.Inkpen, Diana Zaiu and Graeme Hirst.
2003.Near-synonym choice in natural languagegeneration.
In Proceedings of theInternational Conference RANLP-2003(Recent Advances in Natural LanguageProcessing), pages 204?211, Borovets,Bulgaria.Knight, Kevin and Steve Luk.
1994.
Buildinga large knowledge base for machinetranslation.
In Proceedings of the 12thNational Conference on Artificial Intelligence(AAAI-94), pages 773?778, Seattle, WA.Langkilde, Irene.
2000.
Forest-basedstatistical sentence generation.
InProceedings of the 1st Conference of the NorthAmerican Chapter of the Association forComputational Linguistics and the 6thConference on Applied Natural LanguageProcessing (NAACL-ANLP 2000),pages 170?177, Seattle, WA.Langkilde, Irene and Kevin Knight.
1998.
Thepractical value of N-grams in generation.In Proceedings of the 9th InternationalNatural Language Generation Workshop,pages 248?255, Niagara-on-the-Lake,Canada.Langkilde-Geary, Irene.
2002a.
An empiricalverification of coverage and correctness fora general-purpose sentence generator.
InProceedings of the 12th International NaturalLanguage Generation Workshop, pages 17?24,New York, NY.Langkilde-Geary, Irene.
2002b.
A Foundationfor a General-Purpose Natural LanguageGeneration: Sentence Realization UsingProbabilistic Models of Language.
Ph.D.thesis, University of Southern California.Lenat, Doug.
1995.
Cyc: A large-scaleinvestment in knowledge infrastructure.Communications of the ACM, 38(11):33?38.Lesk, Michael.
1986.
Automatic sensedisambiguation using machine readabledictionaries: How to tell a pine cone froman ice cream cone.
In Proceedings ofSIGDOC Conference, pages 24?26, Toronto,Canada.Lin, Dekang, Shaojun Zhao, Lijuan Qin, andMing Zhou.
2003.
Identifying synonymsamong distributionally similar words.
InProceedings of the Eighteenth JointInternational Conference on ArtificialIntelligence (IJCAI-03), pages 1492?1493,Acapulco, Mexico.Lindberg, Donald A.
B., Betsy L. Humphreys,and Alexa T. McCray.
1993.
The unifiedmedical language system.
Methods ofInformation in Medicine, 32(4):281?289.Mahesh, Kavi and Sergei Nirenburg.
1995.
Asituated ontology for practical NLP.
InProceedings of Workshop on Basic OntologicalIssues in Knowledge Sharing, InternationalJoint Conference on Artificial Intelligence(IJCAI-95), Montreal, Canada.Manning, Christopher and Hinrich Schu?tze.1999.
Foundations of Statistical NaturalLanguage Processing.
The MIT Press,Cambridge, MA.McKeown, Kathleen and Dragomir Radev.2000.
Collocations.
In Robert Dale,Hermann Moisl, and Harold Somers,editors, Handbook of Natural LanguageProcessing, pages 507?524.
Marcel Dekker.Miller, George A.
1995.
WordNet: A lexicaldatabase for English.
Communications of theACM, 38(11):39?41.Papineni, Kishore, Salim Roukos, ToddWard, and Wei-Jing Zhu.
2001.
BLEU: Amethod for automatic evaluation ofmachine translation.
Technical reportRC22176, IBM Research Division, ThomasJ.
Watson Research Center.Pearce, Darren.
2001.
Synonymy incollocation extraction.
In Proceedings of theWorkshop on WordNet and Other LexicalResources, Second meeting of the North261Computational Linguistics Volume 32, Number 2American Chapter of the Association forComputational Linguistics, pages 41?46,Pittsburgh, PA.Pedersen, Ted and Satanjeev Banerjee.
2003.The design, implementation, and use ofthe ngram statistical package.
InProceedings of the 4th InternationalConference on Intelligent Text Processing andComputational Linguistics (CICLing 2003),pages 370?381, Mexico City, Mexico.Ploux, Sabine and Hyungsuk Ji.
2003.
Amodel for matching semantic mapsbetween languages (French/English,English/French).
Computational Linguistics,29(2):155?178.Resnik, Philip.
1999.
Mining the web forbilingual text.
In Proceedings of the 37thAnnual Meeting of the Association forComputational Linguistics, pages 527?534,College Park, MD.Resnik, Philip, Mari Broman Olsen, andMona Diab.
1999.
The bible as a parallelcorpus: Annotating the ?Book of 2000Tongues?.
Computers and the Humanities,33(1?2):129?153.Richardson, Stephen, William Dolan, andLucy Vanderwende.
1998.
MindNet:Acquiring and structuring semanticinformation from text.
In Proceedings of the36th Annual Meeting of the Association forComputational Linguistics joint with 17thInternational Conference on ComputationalLinguistics (ACL-COLING?98),pages 1098?1102, Montreal, Quebec,Canada.Riloff, Ellen and Rosie Jones.
1999.
Learningdictionaries for information extraction bymulti-level bootstrapping.
In Proceedings ofthe 16th National Conference on ArtificialIntelligence (AAAI-99), pages 474?479,Orlando, FL.Roget, Peter Mark, editor.
1852.
Roget?sThesaurus of English Words and Phrases.Longman Group Ltd., Harlow, Essex,England.Room, Adrian, editor.
1981.
Room?s Dictionaryof Distinguishables.
Routhledge & KeganPaul, Boston.Sim, Julius and Chris C. Wright.
2005.
Thekappa statistic in reliability studies: Use,interpretation, and sample sizerequirements.
Physical Therapy,85(3):257?268.Stone, Philip J., Dexter C. Dunphy,Marshall S. Smith, Daniel M. Ogilvie, andassociates.
1966.
The General Inquirer: AComputer Approach to Content Analysis.
TheMIT Press, Cambridge, MA.Turney, Peter.
2001.
Mining the web forsynonyms: PMI-IR versus LSA onTOEFL.
In Proceedings of the TwelfthEuropean Conference on Machine Learning(ECML 2001), pages 491?502, Freiburg,Germany.Yarowsky, David.
1995.
Unsupervised wordsense disambiguation rivaling supervisedmethods.
In Proceedings of the 33rd AnnualMeeting of the Association for ComputationalLinguistics, pages 189?196, Cambridge,MA.262
