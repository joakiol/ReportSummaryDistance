Semantic Rule Based Text GenerationMichael L. MauldinDepartment of Computer ScienceCarnegie-Mellon UniversityPittsburgh, Pennsylvania 15213 USAABSTRACTThis paper presents a semantically oriented, rule basedmethod for single sentence text generation and discussesits implementation i the Kafka generator.
This generator ispart of the XCALIBUR natural language interface developedat CMU to provide natural language facilities for a widerange of expert systems and data bases.
Kafka takes asinput the knowledge representation used in XCALIBURsystem and incrementally transforms it first into conceptualdependency graphs and then into English?1.
IntroductionTransformational text generators have traditionallyemphasized syntactic processing.
One example is BatesILIAD system which is based on Chomsky's theory oftransformational generative grammar \[1\].
Another is Mann'sNigel program, based on the systemic grammar of Halliday\[4\].
In contrast, other text generators have emphasizedsemantic processing of text, most notably those systemsbased on case grammar such as Goldman's BABELgenerator\[7\] and Swanout's GIST\[9\].
Kafka combinesetements of both paradigms in the generation of Englishtext.Kafka is a rule based English sentence generator used inthe XCALIBUR natural language interface.
Kafka uses atransformational rule interpreter written in Franz Lisp.These transformations are used to convert the XCALIBURknowledge representation to conceptual dependencygraphs and then into English text.
Kafka includesconfirmational information in the generated text, providingsufficient redundancy for the user to ascertain whether hisquery/command was correctly understood.The goal of this work has been to simplify the textgeneration process by providing a single computationalformalism of sufficient power to implement both semanticand syntactic processing.
A prototype system has beenwritten which demonstrates the feasibility of this approachto single sentence text generation.1This research is part of the XCALIBUR project at CMU.
DigitalEquipment Corporation has funOed this project as part of its artificialintelligence program.
XCALIrrJuR was initially based on softwaredeveloped at CMU.
Members of the XCALISUR team include: JaimeCarbonelL Mark Boggs, Micl~ael Mauldin, Peter Anick, Robert Frederking,Ira Mon~'~rch.
Steve rt,~o, ris~ on and Scott Sailer2.
The XCALIBUR Natural Language InterfaceXCALIBUR is a natural language interface to expertsystems.
It is primarily a front-end for the XCON/XSELexpert systems developed by John McDermott \[5\].XCALIBUR supports mixed-initiative dialogs which allow theuser to issue commands, request data, and answer systemqueries in any desired order.
XCALIBUR correctlyunderstands some forms of ellipsis, and incorporatesexpectation directed spelling correction as error recoverysteps to allow the processing of non-grammatical user input.Figure 2.1 shows the gross structure of the XCALIBURinterface.
Figure 2-2 shows some typical user queries andthe corresponding responses from the generator z. Moredetails about XCALIBUR can be found in \[2\].XCALIBUR EXPERTSdialog dypar H ,~.
.
.
.Figure 2.1: The XCALIBUR Natural Language Interface3.
Declarative Knowledge RepresentationThe XCALIBUR system uses a case-frame basedinter/ingua for communication between the components.
Toprovide as nearly canonical a representation as possible,the semantic information in each case-frame is used todetermine the major structure of the tree, and any syntacticinformation is stored at the leaves of the semantic tree.
The "resulting case-frame can be converted into a canonicalrepresentation by merely deleting the leaves of the tree.The canonical representation is very useful for handlingellipsis, since phrases such as "dual port disk" and "diskwith two ports" are represented identically.
Figure3-1 shows a sample query and its representation with purelysyntactic information removed.2These responses include confirmational text to assure the user thathie query has been understood.
Without his requirement, hesesentences would have been rendered using anaphora, resulting in It costs38000 do~late, or even just 38000 dollars, See section 5.3.376+ What is the largest 11780 fixed disk under$40,0O0?The rpO7.aa is a 516 MB fixed pack disk thatcosts 38000 dollars.?
Tell me about the Ixy l  1.The Ixyl 1 is a 240 I/m line printer with plottingcapabilities.Tell me all about the largest dual port diskwith removable pack.The rmO5-ba is a 39140 dollar 256 MB dual portdisk with removable pack, 1200 KB peaktransfer rate and 38 ms access time.+ What is the price of the largest single portdisk?The 176 MB single port rpO6-aa costs 34000dollars.Figure 2-2: Sample Queries and Responses?
What is the price of the two largest single port disks?
(*clause(head (*factual-query))(destination (*default))(object(*nominal(head (price))(of(*nomlnal(head (disk))(ports (value {1)))(size (value (*descending))(range-high (1))(range-low (2))(range-origin(*absolute)))(determiner (*def))))(determiner (.der))))(level (*main))(verb(?conjugation(root (be))(mode (*interrogative))(tense (*present))(number (*singular)))))Figure 3-1 : A Sample Case-frame4.
The Kafka GeneratorKafka is used to build replies to user queries, toparaphrase the user's input for clarificational dialogs, and togenerate the system's queries for the user.
Figure4-1 shows the major components and data flow of the Kafkagenerator.
Either one or two inputs are provided: (1) a caseframe in the XCALIBUR format, and (2) a set of tuples fromthe information broker (such as might be returned from arelational database).
Either of these may be omitted.
Fourof the seven major components of Kafka use thetransformational formalism, and are shown in bold outlines.queryI 1H-  IH?
?i--n"EnglishFigure 4-1 : Data flow in the Kafka Generator4.1.
Relation to Other SystemsKafka is a direct descendant of an earlier naturallanguage generator described in \[2\], which in turn had manycomponents either derived from or inspired by Goldman'sBABEL generator \[7\].
The case frame knowledgerepresentation used in XCALIBUR has much in commonwith Schank's Conceptual Dependency graphs i8\].
Theearlier XCALIBUR generator was very much ad hoc, andKafka is an effort to formalize the processes used in thatgenerator.
The main similarity between Kafka and BABEL isin the verb selection process (described in section 5).The embedded transformational language used by Kafkawas inspired by the OPS5 programming languagedeveloped by Forgy at CMU \[3\].
o rs5  was in fact an earlycandidate for the implementation of Kafka, but OPS,5supports only flat data structures.
Since the case frameknowledge representation used in XCALIBUR is highlyrecursive, an embedded language supporting case framematches was developed.
The kafka programming languagecan be viewed as a production system with only a singleworking memory element and a case frame match ratherthan the flat match used in ors,5.4.2.
Transformational RulesSome of the transformation rules in Kafka were derivedfrom the verb selection method of BABEL, and others werederived taken from TGG rules given in \[10\].
Although Kafkahas been based mainly on the generative grammar theory ofChomsky, the rule syntax allows much more powerful rules377than tl~ose allowed in either the standard or extendedstandard theory.
We have tried to provide a sufficientlypowerful formalism to encode more than one grammaticaltradition, and have not restricted our rules to any particularlinguistic convention.
Our goal has not been to validate anylinguistic theory but rather to demonstrate the feasibility ofusing a single computational mechanism for textgeneration.The basic unit of knowledge in XCALIBUR is the caselrame.
Kafka repeatedly transforms case frames into othercase frames until either an error is found, no patternmatches, or a surface level case frame is generated.
Thesurface case frame is converted into English by render,which traverses the case frame according to the sentenceplan, printing out lexical items.
A transformation is definedby an ordered set of rules.Each rule has up to four parts:=A pattern, which is matched against thecurrent node.
This match, if successful, usuallybinds several local variables to the sub-expressions matched.?
A result, which is another case frame withvariables at some leaves.
These variables arereplaced with the values found during thematch.
This process is called instantiation.= An optional var iable check, the name of a lispfunction which takes a binding list as input andreturns either nil which causes the rule to fail,or a new binding list to be used in theinstantiation phase.
This feature allowsrepresentation of functional constraints.?
An optional f inal flag, indicating that the outputfrom this rule should be returned as the value ofthe rule set's transformation.A transformation is applied to a case frame by firstrecursively matching and instantiating the sub-cases of theexpression and then transforming the parent node.Variables match either a single s-expression or a list ofthem.
For example = HEAD would match either an atom or alist, = "REST would match zero or more s-expressions, and= +OTHER would match one or more s-expressions.
If avariable occurs more than once in a pattern, the first binds avalue to that variable, and the second and subsequentoccurrences must match that binding exactly.This organization is very similar to that of the ILIADprogram developed by Bates at BBN \[1\].
The pattern, aresult, and variable check correspond to the structuraldescription, structural change, and condition of Bates'transformational rules, with only a minor variation in thesemantics of each operation.
The ILIAD system, though, isvery highly syntax oriented (since the application is teachingEnglish grammar to deaf children) and uses semanticinformation only in lexical insertion.
The rules in Kafkaperform both semantic and syntactic operations.4.3.
A Sample RuleFigure 4-2 sample rule from the Kafka grammar for theXCALIBUR domain.
The rule takes a structure of the formThe price ot X is FO0 and converts it to X costs FO0.
Moresophisticated rules for verb selection check for semanticagreement between various slot fillers, but this rule merelyencodes knowledge about the relationship between thePRICE attribute and the COST verb.
Figure 4-3 shows an inputstructure that this rule would match; Figure 4-4 shows thestructure which would be returned.
(R query-to-declare active-voice-cost(cd (primitive (be))(actor (*nominal(head: (price))(or =x)='other))(object =y)=*be-rest) =>(cd (primitive (cost))(actor =x)(object =y)=be-rest))Figure 4-2: Rule 'active-voice-cost'(cd (primitive (be))(actor(*nominal (head: (price))(of (*nominal (ports (1))(size(*descending(range-low: (1))(range-high: (2))(range-origin:(*absolute))))(heed: (disk))(determiner: (*def))))(determiner: (*def))))(object (*unknown (head: (pr ice))))(destination (*default))(\]evel: (*main))(tense: (*present))(number: (*singular)))Figure 4-3: Input Case Frame(cd (primitive (cost))(actor(*nominal(ports (1))(size(*descending(range-low: (1))(range-high: (2))(range-origin:(*absolute))))(head: (disk))(determiner: (*def))))(object (*unknown (head: (pr ice))))(destination ( 'default ) )(level: ('main))(tense: (*present))(number: (*singular)))Figure 4-4: Output Case Frame5.
The Generat ion  ProcessThe first step in the generation process is preprocessing,which removes a lot of unnecessary fields from each caseframe.
These are mostly syntactic information left by theparser which are not used during the semantic processingof the query.
Some complex input forms are converted intosimpler forms.
This step provides a high degree ofinsulation between the XCALIBUR system and the textgenerator, since changes in the XCALIBUR representation378can be caught and converted here before any of Kafka'sinternal rules are affected.In the second phase (not used when paraphrasing userinput) the case frame is converted from a query into adeclarative response by filling some slots with ("UNKNOWN)place-holders.
Next the re~at module replaces these place-holders with information from the back-end (usually datafrom the XCON static database).
The result is a CD graphrepresenting a reply for each item in the user's query, withall the available data filled in.In the third phase of operation, the verb transform selectsan English verb for each underlying CD primitive.
Verbselection is very similar to that used by Goldman in hisBABEL generator \[7\], except that BABEL uses hand-codeddiscrimination ets to select verbs, while Kafka keeps therules separate.
A rule compiler is being written which buildsthese discrimination nets automatically.
The D-nets areused to weed out rules which cannot possibly apply to thecurrent structure.
Since the compiler in not yet installed,Kafka uses an interpreter which tries each rule in turn.After verb selection, the np-instantiation transformprovides texical items for each of the adjectives and nounspresent in each CD graph.
Finally the order modulelinearizes the parse tree by choosing an order for the casesand deciding whether they need case markers.
The finalsentence is produced by the render module, whichtraverses the parse tree according to the sentence planproduced by order, printing the lexical items from each leafnode.5.1.
A Sample RunThe following is a transcript of an actual generation runwhich required 30 seconds of CPU time on a VAX 11/780running under Franz Lisp.
Most of the system's time iswasted by attempting futile matches during the first part ofthe match/instantiate loop.
The variable parse1 has beenset by the parser to the case frame shown in Figure 3-1.
Thevariable data1 is the response from the information brokerto the user's query.
This transcript shows the Kafka systemcombining these two inputs to produce a reply for the userincluding (1) the answer to his direct query and (2) theinformation used by the information broker to determine thatanswer.-> (orint data1)((name class number-of-megabytes ports price)((rp07-aa disk 510 1 38000)))-> (render-resul~ Rprsel datal~Applying rules for preparso...Rule ' input-string-deletion' applied...Rule ' input-string-deletion' applied.,.Rule 'position-deletion' applied...Rule 'property-fronting1' applied...Rule ' input-string-deletion' applied...Rule 'position-deletion' applied...Rule 'property-fronting1' applied...Rule ' input-string-deletion' applied...Rule 'modifiers-breakout' applied...Rule 'modifiers-breakout' applied...Rule 'modifiers-deletion' applied...Rule ' input-string-de\]etion' applied...Rule 'project' applied...Rule 'Input-string-deletion' applied...Rule 'cases-breakout' applied...Rule 'cases-breakout' applied...Rule 'cases-deletion' applied...Applying rules for query-to-declare...Rule 'fact-to*cd' applied...Rule 'active-voice-cost' applied...Applylng rules for verb-select...Rule 'cd-cost' applied...Applying rules for np-instanttate...Rule 'k-largest' applied...Rule 'size-deletion' applied...Rule 'prenominal-megabytes' applied,..Rule 'prenominal-single-port' applied...Rule 'nominal-price' applied...(cr (verb (cost))(agent(*nominal(head: (disk))(prenominal: (516 M8) (single port))(determiner: (*def))(name (rp07-aa))))(object(*nominal(head: (dol lar))(determiner: (*generic))(count (38000)777(destination (*default))(level: (*main))(mode: (declarative))(voice: (active))(tense: (*present))(number: (singular))(person: (third))(subject: (agent))(plan: ((unmarked agent) *verb (unmarked object)))(verb-conj: (costs)))And the resulting surface string is:The 516 MB single port rpO7-aa costs 38000 dollars.5.2.
Generating AnaphoraKafka has minimal capability to generate anaphora.
Adiscourse history is kept by the dialog manager which mapseach nominal case frame to a surface noun phrase.Anaphoric references are generated by choosing theshortest noun phrase representing the nominal not alreadybound to another nominal.
Thus the pronoun it could onlyrefer to a single item.
Each noun phrase is generated in theoutput order, so the discourse history can be used to makedecisions about anaphoric reference based on what theuser has read p to that point.
This technique is similar to butless sophisticated than that used by McDonald\[6\].Generation of anaphora is inhibited when new informationmust be displayed to the user, or when confirmational text isto be included.5.3.
Confirmational InformationSpeakers in a conversation use redundancy to ensurethat all parties understand one another.
This redundancycan be incorporated into natural language interfaces by"echoing," or including additional information such asparaphrases in the generated text to confirm that thecomputer has chosen the correct meaning of the user'sinput, For example, of the user asks:+ What is the price of the largest single port disk?379The following reply, while strictly correct, is likely to beunhelpful, and does not reassure the user that the meaningof the query has been properly understood:34000 dollars.The XCALIBUR system would answer with the followingsentence which not only answers the user's question, butincludes evidence that the system has correctly determinedthe user's request:The 176 MB single port rpO6-aa costs 34000 dollars.XCALIBUR uses focus information to provide echoing.
Aseach part of the user's query is processed, all the attributesof the object in question which are needed to answer thequeryare recorded.
Then the generator assures that thevalue of each of these attributes is presented in the finaloutput.6.
Summary and Future WorkThe current prototype of the Kafka generator is runningand generating text for both paraphrases and responses forthe XCALIBUR system.
This system demonstrates thefeasibility of the semantic transformational method of textgeneration.
The transformational rule formalism allowsmuch simpler specification of diverse syntactic andsemantic computations than the hard-coded lisp used in theprevious version of the XCALIBUR generator.Current work on Kafka is focused on three goals: first,more grammar rules are necessary to increase coverage.Now that the basic method has been validated, the grammarwill be extended to cover the entire XCALIBUR domain.
Thesecond goal is making Kafka more efficient.
Most of thesystem's time is spent trying matches that are doomed tofail.
The discrimination etwork now being added to thesystem will avoid these pointless matches, providing thespeed required in an interactive system like XCALIBUR.
Thethird goal is formalizing the remaining ad hoc phases of thegenerator.
Four of seven major components now usetransformations; two of these seem amenable to thetransformational method.
The case ordering can easily bedone by transformations.
Converting the semanticprocessing done by the relat module will be more difficult,since the rule interpreter will have to be expanded to allowmultiple inputs.7.
AcknowledgmentsMany thanks to Karen Kukich for her encouragement andfor access to her wealth of literature on text generation.
Iwould also like to thank Jaime Carbonell for his criticismand suggestions which were most helpful in revising earlierdrafts of this paper.References1.
Bates, M. and Wilson, K., "Final Report, ILIAD,Interactive Language Instruction Assistance for theDeaf," Tech.
report, Bolt Berank and Newman, 1981,No.
4771.2.
Carbonell, J.G., Boggs, W.M., Mauldin, M.L.
andAnick, P.G., "The XCALIBUR Project, A NaturalLanguage Interface to Expert Systems," Proceedingsof the Eighth International Joint Conference onArtificial Intelligence, 1983.3.
Forgy, C.L., "OPS5 User's Manual," Tech.
report,Dept.
of Computer Science, Carnegie-MellonUniversity, 1981, CMU-CS-81-135.4.
Mann, W.C., "An Overview of the Nigel TextGeneration Grammar," Proceedings of the 21stMeeting of the Association for ComputationalLinguistics, 1983, pp.
79-84.5.
McDermott, J., "RI: A Rule-Baeed Configurer ofComputer Systems," Tech.
report, Dept.
of ComputerScience, Carnegie-Mellon University, 1980.6.
McDonald, D.D., "Subsequent Reference: Syntacticand Rhetorical Constraints," Theoretical Issues inNatural Language Processing-2, 1978, pp.
64-72.7.
Schank, R.C., Conceptual Information Processing,Amsterdam: North-Holland, 1975.8.
Schank, R.C.
and Riesbeck, C.K., Inside ComputerUnderstanding, Hillside, NJ: Lawrence Erlbaum, 1981.9.
Swartout, B., "GIST English Generator," Tech.
report,USC/Information Sciences Institute, 1982.10.
Wardhaugh, R., Introduction to Linguistics, McGrawHill, 1977.380
