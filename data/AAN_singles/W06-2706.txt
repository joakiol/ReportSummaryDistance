Querying XML documents with multi-dimensional markupPeter Siniakovsiniakov@inf.fu-berlin.deDatabase and Information Systems Group, Freie Universita?t BerlinTakustr.
9, 14195 Berlin, GermanyAbstractXML documents annotated by differ-ent NLP tools accommodate multi-dimensional markup in a single hier-archy.
To query such documents onehas to account for different possiblenesting structures of the annotationsand the original markup of a docu-ment.
We propose an expressive pat-tern language with extended seman-tics of the sequence pattern, support-ing negation, permutation and regu-lar patterns that is especially appropri-ate for querying XML annotated docu-ments with multi-dimensional markup.The concept of fuzzy matching allowsmatching of sequences that contain tex-tual fragments and known XML ele-ments independently of how concurrentannotations and original markup aremerged.
We extend the usual notion ofsequence as a sequence of siblings al-lowing matching of sequence elementson the different levels of nesting andabstract so from the hierarchy of theXML document.
Extended sequencesemantics in combination with otherlanguage patterns allows more power-ful and expressive queries than queriesbased on regular patterns.1 IntroductionXML is widely used by NLP tools for anno-tating texts.
Different NLP tools can produceoverlapping annotations of text fragments.While a common way to cope with concur-rent markup is using stand-off markup (Witt,2004) with XPointer references to the anno-tated regions in the source document, anothersolution is to consolidate the annotations in asingle document for easier processing.
In thatcase concurrent markup has to be merged andaccommodated in a single hierarchy.
There aremany ways to merge the overlapping markupso that different nesting structures are pos-sible.
Besides, the annotations have to bemerged with the original markup of the doc-ument (e.g.
in case of a HTML document).The problem of merging overlapping markuphas been treated in (Siefkes, 2004) and we donot consider it here.
Instead we focus on theproblem of finding a universal querying mech-anism for documents with multi-dimensionalmarkup.
The query language should abstractfrom the concrete merging algorithm for con-current markup, that is to identify desiredelements and sequences of elements indepen-dently from the concrete nesting structure.The development of the query language wasmotivated by an application in text mining.In some text mining systems the linguisticpatterns that comprise text and XML anno-tations (such as syntactic annotations, POStags) made by linguistic tools are matchedwith semistructured texts to find desired infor-mation.
These texts can be HTML documentsthat are enriched with linguistic informationby NLP tools and therefore contain multi-dimensional markup.
The linguistic annota-tions are specified by XML elements that con-tain the annotated text fragment as CDATA.Due to the deliberate structure of the HTMLdocument the annotations can be nested in ar-bitrary depth and vice versa ?
the linguisticXML element can contain some HTML ele-ments with nested text it refers to.
To finda linguistic pattern we have to abstract fromthe concrete DTD and actual structure of theXML document ignoring irrelevant markup,which leads to some kind of ?fuzzy?
match-ing.
Hence it is sufficient to specify a sequence43of text fragments and known XML elements(e.g.
linguistic tags) without knowing by whatelements they are nested.
During the match-ing process the nesting markup will be omittedeven if the sequence elements are on differentnesting levels.We propose an expressive pattern languagewith the extended semantics of the sequencepattern, permutation, negation and regularpatterns that is especially appropriate forquerying XML annotated documents.
Thelanguage provides a rich tool set for specify-ing complex sequences of XML elements andtextual fragments.
We ignore some importantaspects of a fully-fledged XML query languagesuch as construction of result sets, aggregatefunctions or support of all XML Schema struc-tures focusing instead on the semantics of thelanguage.Some modern XML query languages imposea relational view of data contained in the XMLdocument aiming at retrieval of sets of ele-ments with certain properties.
While these ap-proaches are adequate for database-like XMLdocuments, they are less appropriate for doc-uments in that XML is used rather for anno-tation than for representation of data.
Tak-ing the rather textual view of a XML doc-ument its querying can be regarded as find-ing patterns that comprise XML elements andtextual content.
One of the main differenceswhen querying annotated texts is that thequery typically captures parts of the docu-ment that go beyond the boundaries of a sin-gle element disrupting the XML tree structurewhile querying a database-like document re-turns its subtrees remaining within a scope ofan element.
Castagna (Castagna, 2005) dis-tinguishes path expressions that rather corre-spond to the database view and regular ex-pression patterns as complementary ?extrac-tion primitives?
for XML data.
Our approachenhances the concept of regular expressionpatterns making them mutually recursive andmatching across the element boundaries.2 Related WorkAfter publishing the XML 1.0 recommenda-tion the early proposals for XML query lan-guages focused primarily on the representa-tion of hierarchical dependencies between el-ements and the expression of properties of asingle element.
Typically, hierarchical rela-tions are defined along parent/child and an-cestor/descendant axis as done in XQL andXPath.
XQL (Robie, 1998) supports posi-tional relations between the elements in a sib-ling list.
Sequences of elements can be queriedby ?immediately precedes?
and ?precedes?
op-erators restricted on the siblings.
Negation,conjunction and disjunction are defined as fil-tering functions specifying an element.
XPath1.0 (Clark and DeRose, 1999) is closely re-lated addressing primarily the structural prop-erties of an XML document by path expres-sions.
Similarly to XQL sequences are de-fined on sibling lists.
Working Draft for Xpath2.0 (Berglund et al, September 2005) providessupport for more data types than its precur-sor, especially for sequence types defining setoperations on them.XML QL (Deutsch et al, 1999) follows therelational paradigm for XML queries, intro-duces variable binding to multiple nodes andregular expressions describing element paths.The queries are resolved using an XML graphas the data model, which allows both orderedand unordered node representation.
XQuery(Boag et al, 2003) shares with XML QL theconcept of variable bindings and the abilityto define recursive functions.
XQuery fea-tures more powerful iteration over elementsby FLWR expression borrowed from Quilt(Chamberlin et al, 2001), string operations,?if else?
case differentiation and aggregatefunctions.
The demand for stronger supportof querying annotated texts led to the integra-tion of the full-text search in the language (Re-quirements, 2003) enabling full-text queriesacross the element boundaries.Hosoya and Pierce propose integration ofXML queries in a programming language(Hosoya and Pierce, 2001) based on regularpatterns Kleene?s closure and union with the?first-match?
semantics.
Pattern variables canbe declared and bound to the correspond-ing XML nodes during the matching process.A static type inference system for pattern vari-ables is incorporated in XDuce (Hosoya andPierce, 2003) ?
a functional language for XMLprocessing.
CDuce (Benzaken et al, 2003)extends XDuce by an efficient matching al-44gorithm for regular patterns and first classfunctions.
A query language CQL based onregular patterns of CDuce uses CDuce as aquery processor and allows efficient processingof XQuery expressions (Benzaken et al, 2005).The concept of fuzzy matching has been inro-duced in query languages for IR (Carmel etal., 2003) relaxing the notion of context of anXML fragment.3 Querying by pattern matchingThe general purpose of querying XML doc-uments is to identify and process their frag-ments that satisfy certain criteria.
We re-duce the problem of querying XML to pat-tern matching.
The patterns specify the querystatement describing the desired properties ofXML fragments while the matching fragmentsconstitute the result of the query.
Thereforethe pattern language serves as the query lan-guage and its expressiveness is crucial for thecapabilities of the queries.
The scope for thequery execution can be a collection of XMLdocuments, a single document or analogouslyto XPath a subtree within a document withthe current context node as its root.
Since inthe scope of the query there may be severalXML fragments matching the pattern, multi-ple matches are treated according to the ?all-match?
policy, i.e.
all matching fragments areincluded in the result set.
The pattern lan-guage does not currently support construc-tion of new XML elements (however, it can beextended adding corresponding syntactic con-structs).
The result of the query is therefore aset of sequences of XML nodes from the doc-ument.
Single sequences represent the XMLfragments that match the query pattern.
If noXML fragments in the query scope match thepattern, an empty result set is returned.In the following sections the semantics, maincomponents and features of the pattern lan-guage are introduced and illustrated by exam-ples.
The complete EBNF specification of thelanguage can be found onhttp://page.mi.fu-berlin.de/~siniakov/patlan.3.1 Extended sequence semanticsQuery languages based on path expressionsusually return sets (or sequences) of elementsthat are conform with the original hierarchicalstructure of the document.
In not uniformlystructured XML documents, though, the hi-erarchical structure of the queried documentsis unknown.
The elements we may want toretrieve or their sequences can be arbitrarilynested.
When retrieving the specified elementsthe nesting elements can be omitted disrupt-ing the original hierarchical structure.
Thusa sequence of elements does no longer have tobe restricted to the sibling level and may beextended to a sequence of elements followingeach other on different levels of XML tree.Figure 1: Selecting the sequence (NE ADVV) from a chunk-parsed POS-tagged sentence.XML nodes are labeled with preorder num-bered OID|right bound (maximum descen-dant OID)To illustrate the semantics and features ofthe language we will use the mentioned textmining scenario.
In this particular text miningtask some information in HTML documentswith textual data should be found.
The doc-uments contain linguistic annotations insertedby POS tagger and syntactic chunk parser asXML elements that include the annotated textfragment as a text node.
The XML outputof the NLP tools is merged with the HTMLmarkup so that various nestings are possible.A common technique to identify the relevantinformation is to match linguistic patterns de-scribing it with the documents.
The fragmentsof the documents that match are likely to con-tain relevant information.
Hence the problemis to identify the fragments that match our lin-guistic patterns, that is, to answer the querywhere the queried fragments are described bylinguistic patterns.
Linguistic patterns com-prise sequences of text fragments and XML el-ements added by NLP tools and are specifiedin our pattern language.
When looking for lin-guistic patterns in an annotated HTML docu-45ment, it cannot be predicted how the linguisticelements are nested because nesting dependson syntactic structure of a sentence, HTMLlayout and the way both markups are merged.Basically, the problem of unpredictable nest-ing occurs in any document with a hetero-geneous structure.
Let us assume we wouldsearch for a sequence of POS tags: NE ADV Vin a subtree of a HTML document depictedin fig.
1.
Some POS tags are chunked innoun (NP), verb (VP) or prepositional phrases(PP).
Named entity ?Nanosoft?
is emphasizedin boldface and therefore nested by the HTMLelement <b>.
Due to the syntactic structureand the HTML markup the elements NE, ADVand V are on different nesting levels and notchildren of the same element.
According tothe extended sequence semantics we can ig-nore the nesting elements we are not inter-ested in (NPOID2 and bOID3 when matchingNE, VPOID8 when matching V) so that the se-quence (NEOID4, ADVOID6, VOID9) matchesthe sequence pattern NE ADV V, in short formNE ADV V ?= (NE4, ADV6, V9).By the previous example we introducedthe matching relation ?= as a binary relation?= ?
P ?
F where P is the set of patternsand F a set of XML fragments.
An XML frag-ment f is a sequence of XML nodes n1 .
.
.
nnthat belong to the subtree of the context node(i.e.
the node whose subtree is queried, e.g.document root).
Each XML node in the sub-tree is labeled by the pair OID|right bound.OID is obtained assigning natural numbersto the nodes during the preorder traversal.Right bound is the maximum OID of a de-scendant of the node ?
the OID of the right-most leaf in the rightmost subtree.
To matcha sequence pattern an XML fragment has tofulfil four important requirements.1.
Consecutiveness: All elements of the se-quence pattern have to match the consec-utive parts of the XML fragment2.
Order maintenance: Its elements must bein the ?tree order?, i.e., the OIDs of thenodes according to the preorder number-ing schema must be in ascending order.3.
Absence of overlaps: No node in the se-quence can be the predecessor of anyother node in the sequence on the way tothe root.
E.g.
NP PP NP 6?= (NP11, PP18,NP21) because PP18 is a predecessor ofNP21 and therefore subsumes it in its sub-tree.
The semantics of the sequence im-plies that a sequence element cannot besubsumed by the previous one but hasto follow it in another subtree.
To de-termine whether a node m is a predeces-sor of the node n the OIDs of the nodesare compared.
The predecessor must havea smaller OID according to the preordernumbering scheme, however any node inleft subtrees of n has a smaller OID too.Therefore the right bounds of the nodescan be compared since the right bound ofa predecessor will be greater or equal tothe right bound of n while the right boundof any element in the left subtree will besmaller:pred(m,n) =OID(m)<OID(n) ?
rightBound(m)?rightBound(n)4.
Completeness: XML fragment must notcontain any gaps, i.e.
there should not bea node that is not in the XML fragment,not predecessor of one of the nodes, whoseOID however lies between the OIDs ofthe fragment nodes.
Since such a nodeis not a predecessor, it must be an el-ement of the sequence; otherwise it isomitted and the sequence is not complete.Hence, the pattern V NP NP 6?= (V9, NP11,NP21) because the node PR19 lying be-tween NP11 and NP21 is not a predeces-sor of any of the fragment nodes and notan element of the fragment.
If the nodeslying between NP11 and NP21 cannot beexactly specified, we can use wildcard pat-tern (see sec.
3.3) to enable matching:V NP * NP ?= (V9, NP11, PR19, NP21):Using these requirements we can formallyspecify the semantics of the sequence:Let s = s1 .
.
.
sk be a sequence pattern andf = n1 .
.
.
nn the matching XML fragment.s ?= f ?
(I) s1?=(n1...ni), s2?=(ni+1...nj),...,sk?=(nl...nn)(II) ?
1?i<n OID(ni)<OID(ni+1)(III) 6?
1?i<n pred(ni,ni+1)(IV ) ?
1?i<n 6?
m OID(ni)<OID(m)<OID(ni+1)??
?pred(m,ni+1)46The fourth requirement stresses the impor-tant aspect of ?exhaustive?
sequence: we areinterested in a certain sequence of known ele-ments that can be arbitrarily nested and cap-tured by some elements that are irrelevantfor our sequence (e.g.
html layout elementswhen searching for a sequence of linguistic el-ements).
We call such a sequence an exhaus-tive non-sibling sequence (ENSS ).
It is exhaus-tive because all predecessors omitted duringthe matching are covered at some level by thematching descendants so that there is no pathto a leaf of the predecessor subtree that leadsthrough an unmatched node.
If such a pathexisted, the fourth requirement would not bemet.
If the sequence does not begin at the left-most branch or does not end at the rightmostbranch of an omitted predecessor, the subtreeof the respective predecessor is not fully cov-ered.
In ADJ NN PR ?= (ADJ14, NN16, PR19)the omitted predecessors NP11 and PP18 arenot completely a part of the sequence becausethey have descendants outside the sequenceborders.
Nevertheless the sequence is exhaus-tive since there is no path to a leaf through anunmatched node within its borders.Another important aspect of ENSS is that itcan match XML fragments across the elementborders.
XPath imposes a query context byspecifying the path expression that usually ad-dresses a certain element, XQuery restricts itindirect by iterating over and binding variablesto certain nodes.
Matching ENSS there is noadditional restriction of the query scope, thatis, the sequence can begin and end at any nodeprovided that the ENSS requirements are met.The dashed line in the fig.
1 points up the re-gion covered by the sample sequence.According to the specification of the se-quence pattern in the pattern language (cf.appendix ??
):Pattern ::= Pattern?
??
Patternany pattern can be the element of the se-quence.
Therefore the sequence can alsocontain textual elements, which is especiallyimportant when processing annotated texts.Textual nodes represent leaves in an XML treeand are treated as other XML nodes so thatarbitrary combinations of XML elements andtext are possible: "released" NP "of" NE ?=(?released?10, NP11, ?of?20, NE22)Exhaustive sequence allows a much greaterabstraction from the DTD of a document thanthe usually used sequence of siblings.
The ex-pressiveness of the language significantly bene-fits from the combination of backtracking pat-terns (cf.
sec.
3.3) with exhaustive sequence.3.2 Specification of XML nodesPatterns matching single XML nodes are theprimitives that the more complex patterns arecomposed from.
The pattern language sup-ports matching for document, element, at-tribute, text and CDATA nodes while someDOM node types such as entities and process-ing instructions are not supported.
Some ba-sic patterns matching element and text nodeshave been already used as sequence elementsin the previous section.
Besides the simple ad-dressing of an element by its name it is pos-sible to specify the structure of its subtree:Pattern ::=?
\?XML-Tag(?[?Pattern?]?
)?A pattern specifying an element node willmatch if the element has the name correspond-ing to the XML-Tag and the pattern in thesquare brackets matches the XML fragmentcontaining the sequence of its children.
E.g.\PP[ PR NE] ?= (PP18) because the name ofthe element is identical and PR NE ?= (PR19,NE22).
As this example shows, the extendedsequence semantics applies also when the se-quence is used as the inner pattern of anotherpattern.
Therefore the specification of ele-ments can benefit from the ENSS because weagain do not have to know the exact structureof their subtrees, e.g.
their children, but canspecify the nodes we expect to occur in a cer-tain order.Attribute nodes can be accessed by ele-ment pattern specifying the attribute valuesas a constraint: \V {@normal="release"} ?=(V9), assumed that the element V9 has theattribute ?normal?
that stores the principalform of its textual content.
Besides equalitytests, numeric comparisons and boolean func-tions on string attribute values can be used asconstraints.Patterns specifying textual nodes comprisequoted strings:Pattern ::= QuotedStringand match a textual node of an XML elementif it has the same textual content as the quotedstring.
Textual patterns can be used as ele-47ments of any other patterns as already demon-strated in the previous section.
An elementmay be, for instance, described by a complexsequence of text nodes combined with otherpatterns: \sentence[NE * \V{@normal=release}\NP[* "new" "version"] "of" NE *] ?= (sentence1)The pattern above can already be used as alinguistic pattern identifying the release of anew product version.3.3 Backtracking patterns andvariablesIn contrast to the database-like XML docu-ments featuring very rigid and repetitive struc-tures annotated texts are distinguished by avery big structural variety.
To handle this va-riety one needs patterns that can cover severaldifferent cases ?at once?.
So called backtrack-ing patterns have this property and constitutetherefore a substantial part of the pattern lan-guage.
Their name comes from the fact thatduring the matching process backtracking isnecessary to find a match.The pattern language features complex andprimitive patterns.
Complex patterns consistof at least one inner element that is a patternitself.
Primitive patterns are textual patternsor XML attribute and element specificationsif the specification of the inner structure ofthe element is omitted, e.g.
"released", NP.If at least one of the inner patterns does notmatch, the matching of the complex patternfails.
Backtracking patterns except for wild-card pattern are complex patterns.Let us assume, we look for a sequence"released" NE and do not care what is be-tween the two sequence elements.
In the sub-tree depicted in fig.
1 no XML fragmentwill match because there are several nodes be-tween ?released?10 and NE22 and the com-pleteness requirement is not met.
If we in-clude the wildcard pattern in the sequence,"released" * NE ?= (?released?10 NP11 PR19NE22), the wildcard pattern matches thenodes lying between V9 and NE22.
Thus, ev-ery time we do not know what nodes can oc-cur in a sequence or we are not interested inthe nodes in some parts of the sequence, wecan use wildcard pattern to specify the se-quence without losing its completeness.
Wild-card pattern matches parts of the sequencethat are in turn sequences themselves.
There-fore it matches only those XML fragments thatfulfil the ENSS requirements II-IV.
Since thereare often multiple possibilities to match a se-quence on different levels, wildcard matchesnodes that are at the highest possible levelsuch as NP11 in the previous example.If one does not know whether an XML frag-ment occurs, but wants to account for bothcases the option pattern should be used:Pattern ::=?
(?Pattern?)?
?Pattern ::=?
(?Pattern?)?
?Kleene closure differs from the option by theinfinite number of repetitions.
It matches a se-quence of any number of times repeated XMLfragments that match the inner pattern of theKleene closure pattern.
Since Kleene closurematches sequences, the ENSS requirementshave to be met by matching XML fragments.Let O = (p)?
be an option, K = (p)?
a Kleeneclosure pattern, f ?
F an XML fragment:O ?= f ?
p ?= f ?
{} ?= fK ?= f ?
{} ?= f ?
p ?= f ?
p p ?= f ?
.
.
.where f fulfils ENSS requirements I-IV.The option pattern matches either an emptyXML fragment or its inner pattern.An alternative occurrence of two XMLfragments is covered by the union pattern:Pattern ::=?
(?Pattern(?|?Pattern)+?
)?Different order of nodes in the sequence canbe captured in the permutation pattern:Pattern ::=?
(?Pattern Pattern+?
)%?Let U = (p1|p2) be a union pattern,P = (p1, .
.
.
, pn)% a permutation patternU ?= f ?
p1 ?= f ?
p2 ?= fP ?= f ?
p1 p2...pn ?= f ?
p1 p2...pn pn?1 ?= f ????????
p1 pn...p2?=f ?
????
pn pn?1...p2 p1?=fPermutation can not be expressed by regularconstructs and is therefore not a regular ex-pression itself.The backtracking patterns can be arbitrar-ily combined to match complex XML frag-ments.
E.g.
the pattern ((PP | PR)?
NP)%matches three XML fragments: (NP2), (NP11,PP18) and (PR19, NP21).
Using the backtrack-ing patterns recursively enlarges the expres-sivity of the patterns a lot allowing to specifyvery complex and variable structures withoutsignificant syntactic effort.48Variables can be assigned to any patternPattern ::= Pattern?
=:?
Stringaccomplishing two functions.
Whenever avariable is referenced within a pattern by thereference pattern Pattern ::=?
$?String?$?it evaluates to the pattern itwas assigned to.
The pattern(NP)?=:noun_phrase * $noun_phrase$?= (NP2, ADV6, VP8, NP11) so that thereferenced pattern matches NP11.
A patternreferencing the variable v matches XMLfragments that match the pattern that hasbeen assigned to v. To make the matchingresults more persistent and enable furtherprocessing variables can be bound to theXML fragment that matched the pattern thevariable is assigned to.
After matching thepattern \sentence[NE=:company *\V{@normal=release} \NP[* "new" "version"]"of" NE=:product *] ?= (sentence1)the variable company refers to NE4(Nanosoft)and product is bound to NE22(NanoOS).The relevant parts of XML fragment canbe accessed by variables after a matchhas been found.
Assigning variable to thewildcard pattern can be used to extracta subsequence between two known nodes:"released" * =:direct_object "of" ?=(?released?10 NP11 ?of?20) with the variabledirect_object bound to NP11.Let A = p =: v be an assignment pattern:A ?= f ?
p ?= fMatching backtracking patterns can involvemultiple matching variants of the same XMLfragment, which usually leads to differentvariable bindings for each matching variant.As opposed to multiple matchings whendifferent fragments match the same patterndiscussed above, the first-match policy is ap-plied when the pattern ambiguously matchesa XML fragment.
For instance,two differentmatching variants are possible for the pattern(NP)?
:=noun_phrase (NP |PR)?
:=noun_prep?= (NP11, PR19).
In the first case(NP)?
:=noun_phrase ?= (NP11) so thatnoun_phrase is bound to NP11 andnoun_prep to PR19.
In the secondcase (NP)?
:=noun_phrase ?= {} and(NP | PR)?
:=noun_prep ?= (NP11, PR19)so that noun_phrase is bound to {} andnoun_prep to (NP11, PR19).
In such casesthe first found match is returned as the finalresult.
The order of processing of singlepatterns is determined by a convention.3.4 NegationWhen querying an XML document it is oftenuseful not only to specify what is expected butalso to specify what should not occur.
Thisis an efficient way to exclude some unwantedXML fragments from the query result becausesometimes it is easier to characterize an XMLfragment by not wanted rather than desirableproperties.
Regular languages (according toChomsky?s classification) are not capable ofrepresenting that something should not appearstating only what may or has to appear.
In thepattern language the absence of some XMLfragment can be specified by negation .As opposed to most XML query languagesnegation is a pattern and not a unary booleanoperator.
Therefore it has no boolean value,but matches the empty XML fragment.Since the negation pattern specifies whatshould not occur, it does not ?consume?
anyXML nodes during the matching process sothat we call it ?non-substantial?
negation.The negation pattern !
(p) matches theempty XML fragment if its inner patternp does not occur in the current contextnode.
To underline the difference to logicalnegation, consider the double negation.
Thedouble negation !(!
(p)) is not equivalentto p, but matches an empty XML elementif !
(p) matches the current context node,which is only true if the current contextnode is empty.
Since the negation patternonly specifies what should not occur, thestandalone usage of negation is not reason-able.
It should be used as an inner pattern ofother complex patterns.
Specifying a sequenceVP *=:wildcard_1 !
(PR) *=:wildcard_2 NPwe want to identify sequences starting withVP and ending with NP where PR is notwithin a sequence.
Trying to find a matchfor the sequence starting in VP8 and endingin NP21 there are multiple matching variantsfor wildcard patterns.
Some of them enablethe matching of the negation pattern bindingPR to one of the wildcards, e.g.
wildcard_1is bound to (NP11, PR19), !
(PR) ?= {},wildcard_2 is bound to {}.
However, there49is a matching variant when the negatedpattern is matched with PR19 (wildcard_1is bound to NP11, wildcard_2 is boundto {}).
We would certainly not want thesequence (VP8, NP11, PR19, NP21) to matchour pattern because the occurrence of PR inthe sequence should be avoided.
Therefore wedefine the semantics of the negation so thatthere is no matching variant that enables theoccurrence of negated pattern:Let P1 !
(p) P2 be a complex pattern compris-ing negation as inner pattern.
P1 and P2 arethe left and right syntactic parts of the pat-tern and may be not valid patterns themselves(e.g.
because of unmatched parentheses).
Thepattern obtained from the concatenation ofboth parts P1 P2 is a valid pattern because itis equivalent to the replacing of the negationby an empty pattern.P1 !
(p) P2 ?= f ?P1 p P2 6?= f ?
P1 P2 ?= fRequiring P1 p P2 6?= f guarantees that nomatching variant exists in that the negatedpattern p occurs.
Since !
(p) matches an emptyfragment, the pattern P1P2 has to match com-plete f .
It is noteworthy that the negation isthe only pattern that influences the semanticsof a complex pattern as its inner pattern.
In-dependent of its complexity any pattern canbe negated allowing very fine-grained specifi-cation of undesirable XML fragments.4 ConclusionXML documents with multi-dimensionalmarkup feature a heterogeneous structurethat depends on the algorithm for mergingof concurrent markup.
We present a patternlanguage that allows to abstract from theconcrete structure of a document and formu-late powerful queries.
The extended sequencesemantics allows matching of sequences acrosselement borders and on different levels of theXML tree ignoring nesting levels irrelevantfor the query.
The formal specification ofthe sequence semantics guarantees that theproperties of ?classic?
sibling sequence suchas ordering, absence of gaps and overlapsbetween the neighbors are maintained.
Thecombination of fully recursive backtrackingpatterns with the ENSS semantics allowscomplex queries reflecting the complicatedpositional and hierarchical dependenciesof XML nodes within a multi-dimensionalmarkup.
Negation enhances the expressivityof the queries specifying an absence of apattern in a certain context.ReferencesV.
Benzaken, G. Castagna, and A. Frisch.
2003.CDuce: an XML-centric general-purpose language.In In ICFP ?03, 8th ACM International Conferenceon Functional Programming, pages 51?63.V.
Benzaken, G. Castagna, and C. Miachon.
2005.A full pattern-based paradigm for XML query pro-cessing.
In Proceedings of the 7th Int.
Symposium onPractical Aspects of Decl.
Languages, number 3350.A.
Berglund, S. Boag, D. Chamberlin, M. Fernndez,M.
Kay, J. Robie, and J. Simon.
September 2005.XML Path Language (XPath) 2.0. http://www.w3.org/TR/2005/WD-xpath20-20050915/.S.
Boag, D. Chamberlin, M. Fernandez, D. Florescu,J.
Robie, J. Simon, and M. Stefanescu.
2003.XQuery 1.0: An XML Query Language.
http://www.w3c.org/TR/xquery.David Carmel, Yoelle S. Maarek, Matan Mandelbrod,Yosi Mass, and Aya Soffer.
2003.
Searching XMLdocuments via XML fragments.
In SIGIR ?03: Pro-ceedings of the 26th annual int.
ACM SIGIR confer-ence, pages 151?158, New York,USA.
ACM Press.G.
Castagna.
2005.
Patterns and types for queryingXML.
In DBPL - XSYM 2005 joint keynote talk.Don Chamberlin, Jonathan Robie, and Daniela Flo-rescu.
2001.
Quilt: An XML query language forheterogeneous data sources.
LNCS, 1997:1?11.J.
Clark and S. DeRose.
1999.
XML Path Language(XPath).
http://www.w3.org/TR/Xpath.Alin Deutsch, Mary F. Fernandez, D. Florescu, A.Y.Levy, and D. Suciu.
1999.
A query language forXML.
Computer Networks, 31(11-16):1155?1169.H.
Hosoya and P.C.
Pierce.
2001.
Regular expressionpatern matching for XML.
In In POPL ?01, 25thSymposium on Principles of Prog.
Languages.Haruo Hosoya and Benjamin C. Pierce.
2003.
XDuce:A statically typed XML processing language.
ACMTrans.
Inter.
Tech., 3(2):117?148.XQuery and XPath Full-Text Require-ments.
2003. http://www.w3.org/TR/2003/WD-xquery-full-text-requirements-20030502/.Jonathan Robie.
1998.
The design of XQL.
http://www.ibiblio.org/xql/xql-design.html.C.
Siefkes.
2004.
A shallow algorithm for correctingnesting errors and other well-formedness violationsin XML-like input.
In Extreme Markup Languages.A.
Witt.
2004.
Multiple hierarchies: new aspects of anold solution.
In Extreme Markup Languages 2004.50
