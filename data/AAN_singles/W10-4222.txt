Grouping axioms for more coherent ontology descriptionsSandra WilliamsThe Open UniversityMilton Keynes, United Kingdoms.h.williams@open.ac.ukRichard PowerThe Open UniversityMilton Keynes, United Kingdomr.power@open.ac.ukAbstractOntologies and datasets for the SemanticWeb are encoded in OWL formalisms thatare not easily comprehended by people.To make ontologies accessible to humandomain experts, several research groupshave developed ontology verbalisers usingNatural Language Generation.
In practiceontologies are usually composed of simpleaxioms, so that realising them separatelyis relatively easy; there remains howeverthe problem of producing texts that are co-herent and efficient.
We describe in thispaper some methods for producing sen-tences that aggregate over sets of axiomsthat share the same logical structure.
Be-cause these methods are based on logicalstructure rather than domain-specific con-cepts or language-specific syntax, they aregeneric both as regards domain and lan-guage.1 IntroductionWhen the Semantic Web becomes established,people will want to build their own knowledgebases (i.e., ontologies, or TBox axioms, and data,or ABox axioms1).
Building these requires a highlevel of expertise and is time-consuming, evenwith the help of graphical interface tools such asProte?ge?
(Knublauch et al, 2004).
Fortunately, nat-ural language engineers have provided a solutionto at least part of the problem: verbalisers, e.g.,the OWL ACE verbaliser (Kaljurand and Fuchs,2007).Ontology verbalisers are NLG systems that gen-erate controlled natural language from Semantic1Description Logic (DL) underlies the Web OntologyLanguage OWL.
DL distinguishes statements about classes(TBox) from those about individuals (ABox).
OWL cov-ers both kinds of statements, which in OWL terminology arecalled ?axioms?.Web languages, see Smart (2008).
Typically theygenerate one sentence per axiom: for example,from the axiom2 Cat v Animal the OWL ACEverbaliser (Kaljurand and Fuchs, 2007) generates?Every cat is an animal?.
The result is not a co-herent text, however, but a disorganised list, oftenincluding inefficient repetitions such as:Every cat is an animal.Every dog is an animal.Every horse is an animal.Every rabbit is an animal.An obvious first step towards improved efficiencyand coherence would be to replace such lists witha single aggregated sentence:The following are kinds of animals: cats, dogs,horses and rabbits.In this paper, we show how all axiom patternsin EL++, a DL commonly used in the SemanticWeb, can be aggregated without further domainknowledge, and describe a prototype system thatperforms such aggregations.
Our method aggre-gates axioms while they are still in logical form,i.e., as part of sentence planning but before con-verting to a linguistic representation and realisingas English sentences.
This approach is somewhatdifferent from that proposed by other researcherswho convert ontology axioms to linguistic struc-tures before aggregating (Hielkema, 2009; Galaniset al, 2009; Dongilli, 2008).
We present resultsfrom testing our algorithm on over fifty ontologiesfrom the Tones repository3.2 Analysis of axiom groupingsIn this section we analyse which kinds of axiomsmight be grouped together.
Power (2010) anal-2For brevity we use logic notation rather than e.g., OWLFunctional Syntax: subClassOf(class(ns:cat)class(ns:animal)) where ns is any valid namespace.The operatorv denotes the subclass relation, u denotes classintersection, and ?P.C the class of individuals bearing therelation P to one or more members of class C.3http://owl.cs.manchester.ac.uk/No.
Logic OWL %1 A v B subClassOf(A B) 512 A v ?P.B subClassOf(AsomeValuesFrom(P B)) 333 [a, b] ?
P propertyAssertion(P a b) 84 a ?
A classAssertion(A a) 4Table 1: The four most common axiom patterns.ysed axiom patterns present in the same fifty on-tologies.
In spite of the richness of OWL, the sur-prising result was that only four relatively simplepatterns dominated, accounting for 96% of all pat-terns found in more than 35,000 axioms.
Overallthere were few unique patterns, typically only 10to 20, and up to 34 in an unusually complex ontol-ogy.
Table 1 lists the common patterns in logic no-tation and OWL Functional Syntax, and also givesthe frequencies across the fifty knowledge bases.Examples of English paraphrases for them are:1.
Every Siamese is a cat.2.
Every cat has as body part a tail.3.
Mary owns Kitty.4.
Kitty is a Siamese.When two or more axioms conform to a pattern:A v BA v CB v CC v Dthere are two techniques with which to aggregatethem: merging and chaining.
If the right-handsides are identical we can merge the left-handsides, and vice versa:4[A,B] v CA v [B,C]Alternatively, where the right-hand side of an ax-iom is identical to the left-hand side of another ax-iom, we can ?chain?
them:A v B v C v DMerging compresses the information into a moreefficient text, as shown in the introduction, whilechaining orders the information to facilitate infer-ence ?
for example, ?Every A is a B and everyB is a C?
makes it easier for readers to draw theinference that every A is a C.4We regard expressions like A v [B,C] and A v B v Cas shorthand forms allowing us to compress several axiomsinto one formula.
For merges one could also refactor the setof axioms into a new axiom: thus for example A v [B,C]could be expressed as A v (B u C), or [A,B] v C as(A unionsq B) v C. This formulation would have the advantageof staying within the normal notation and semantics of DL;however, it is applicable only to merges, not to chains.1.
2.
3.
4.1.
L,R,C ?,R?,?
?,?,?
L?,?,C2.
L,R,?
?,?,?
?,?,C3.
L,R,?
?,R?,?4.
L,R,?Table 2: Aggregating common axioms: 1.
A v B,2.
A v ?P.B, 3.
[a, b] ?
P , 4. a ?
ATable 2 summarises our conclusions on whethereach pair of the four common patterns can bemerged or chained.
Each cell contains three en-tries, indicating the possibility of left-hand-sidemerge (L), right-hand-side merge (R), and chain-ing (C).
As can be seen, some merges or chainsare possible across different patterns, but the safestaggregations are those grouping axioms with thesame pattern (down the diagonal), and it is theseon which we focus here.3 Merging similar patternsFunction Merge Patternsf1(A) f1([A1, A2, A3, .
.
.
])f2(A,B) f2([A1, A2, A3, .
.
.
], B)f2(A, [B1, B2, B3, .
.
.
])f3(A,B,C) f3([A1, A2, A3, .
.
.
], B,C)f3(A, [B1, B2, B3, .
.
.
], C)f3(A,B, [C1, C2, C3, .
.
.
])Table 3: Generic merging rules.If we represent ABox and TBox axioms asProlog terms (or equivalently in OWL Func-tional Syntax), they take the form of functionswith a number of arguments ?
for examplesubClassOf(A,B), where subClassOf is the func-tor, A is the first argument and B is the second argu-ment.
We can then formulate generic aggregationrules for merging one-, two- and three-argumentaxioms, as shown in table 3.In general, we combine axioms for which thefunctor is the same and only one argument differs.We do not aggregate axiom functions with morethan three arguments.
The merged constituentsmust be different expressions with the same log-ical form.4 ImplementionThis section describes a Prolog application whichperforms a simple verbalisation including aggre-gation.
It combines a generic grammar for real-ising logical forms with a domain-specific lexiconderived from identifiers and labels within the inputontology.Input to the application is an OWL/XML file.5Axioms that conform to EL++ DL are selectedand converted into Prolog format.
A draft lex-icon is then built automatically from the iden-tifier names and labels, on the assumption thatclasses are lexicalised by noun groups, propertiesby verb groups with valency two, and individualsby proper nouns.Our aggregation rules are applied to axiomswith the same logical form.
The first step picksout all the logical patterns present in the inputontology by abstracting from atomic terms.
Thenext step searches for all axioms matching eachof the patterns present.
Then within each pattern-set, the algorithm searches for axioms that differby only one argument, grouping axioms togetherin the ways suggested in table 3.
It exhaustivelylists every possible grouping and builds a new, ag-gregated axiom placing the values for the mergedargument in a list, e.g., consider the axioms:subClassOf(class(cat), class(feline)).subClassOf(class(cat), class(mammal)).subClassOf(class(dog), class(mammal)).subClassOf(class(mouse), class(mammal)).Identical first arguments =?subClassOf(class(cat),[class(feline),class(mammal)]).
?Every cat is a feline and a mammal.
?Identical second arguments =?subClassOf([class(cat), class(dog),class(mouse)], class(mammal)).
?The following are kinds of mammal:cats, dogs and mice.
?For all axioms with an identical first argu-ment, class(cat), the algorithm places thesecond arguments in a list, [class(feline),class(mammal)], and builds a new axiom with thefirst argument and the merged second argument.From this, our realiser generates the sentence ?Ev-ery cat is a feline and a mammal.?
A similar pro-cess is performed on first arguments when the sec-ond arguments are identical.To construct the grammar, we first formulatedrules for realising single axioms, and then addedrules for the aggregated patterns, incorporatingaggregation cues such as ?both?
and ?the follow-ing:?
(Dalianis and Hovy, 1996).
For the word-ing of single axioms we relied mainly on proposals5We convert OWL to OWL/XML withthe Manchester OWL Syntax Converterhttp://owl.cs.manchester.ac.uk/converter/from the OWL Controlled Natural Language taskforce (Schwitter et al, 2008), so obtaining rea-sonably natural sentences for common axiom pat-terns, even though some less common axioms suchas those describing attributes of properties (e.g.,domain, range, functionality, reflexivity, transitiv-ity) are hard to express without falling back ontechnical concepts from the logic of relations; forthese we have (for now) allowed short technicalformulations (e.g., ?The property ?has as part?is transitive?).
With these limitations, the gram-mar currently realises any single axiom conform-ing to EL++, or any aggregation of EL++ axiomsthrough the merge rules described above.
Table 4lists example aggregated axiom patterns and En-glish realisations generated with our grammar.5 Testing the ?merging?
algorithmUnit Original Aggregated ReductionSentences 35,542 11,948 66%Words 320,603 264,461 18%Table 5: Reduction achieved by aggregatingWe have tested our generic merging rules on ax-ioms conforming to EL++ in a sample of around50 ontologies.
Table 5 shows the reduction in thenumber of generated sentence after aggregation.Remember that previously, the system generatedone sentence for every axiom (35,542 sentences),but with aggregation this is reduced to 11,948 sen-tences, an overall reduction of 66%.
However, ag-gregation increases sentence length so the savingin words is only 18%.The effect of merging is to replace a large num-ber of short sentences with a smaller number oflonger ones.
Sometimes the aggregated sentenceswere very long indeed, e.g., when a travel ontol-ogy cited 800 instances of the class island ?perhaps such cases would be expressed better bya table than by prose6.The algorithm computes all possible merges, sowe get, for instance, Fred described as a personin both ?The following are people: Fred, .
.
.
?
and?Fred is all of the following: a person, .
.
.
?.
Thismeans that the greater efficiency achieved throughaggregation may be counterbalanced by the extratext required when the same axiom participates inseveral merges ?
for a few of our ontologies, in6In a summary one might instead simply give a count andan example: ?There are 800 islands, e.g., The Isle of Skye?.Aggregated Axiom Pattern Example of Generated TextsubClassOf([C1,C2,.
.
.
], C3).
The following are kinds of vehicles: a bicycle, a car, a truck and a van.subClassOf(C1, [C2,C3,.
.
.
]).
Every old lady is all of the following: a cat owner, an elderly and a woman.subClassOf([C1,C2,.
.
.
], The following are kinds of something that has as topping a tomato: a fungi,objectSomeValuesFrom(P1, C3)).
a fiorella and a margherita.subClassOf(C1, [ objectSomeValuesFrom(P1, C2) Every fiorella is something that has as topping a mozzarella and isobjectSomeValuesFrom(P2, C3)]).
something that has as topping an olive.classAssertion(C1, [I1, I2, .
.
.
]).
The following are people: Fred, Joe, Kevin and Walt.classAssertion([C1,C2,.
.
.
], I).
Fred is all of the following: an animal, a cat owner and a person.objectPropertyAssertion(P1, [I1, I2, I3], I4).
The following are pet of Walt: Dewey, Huey and Louie.objectPropertyAssertion(P1, I4, [I1, I2, I3]).
Walt has as pet Dewey, Huey and Louie.disjointClasses([C1,C2,.
.
.
], C3).
None of the following are mad cows: an adult, .
.
.
a lorry or a lorry driver.disjointClasses(C1, [C2,C3,.
.
.
]).
No grownup is any of the following: a kid, a mad cow, a plant, or a tree.dataPropertyDomain([P1, P2, .
.
.
], C1).
If any of the following relationships hold between X and Y then Xmust be a contact: ?has as city?, ?has as street?
and ?has as zip code?.dataPropertyRange([P1, P2, .
.
.
], C1).
If any of the following relationships hold between X and Y then Ymust be a string: ?has as city?, ?has as e mail?
and ?has as street?.differentIndividuals(I1, [I2, I3, .
.
.
]).
The One Star Rating is a different individual from any of the following:differentIndividuals([I1, I2, .
.
.
], I3).
the Three Star Rating or the Two Star Rating.equivalentDataProperties(P1, [P2,P3,.
.
.
]).
The following properties are equivalent to the property ?has as zip code?:equivalentDataProperties([P1,P2,.
.
.
], P3).
?has as post code?, ?has as zip?
and ?has as postcode?.equivalentObjectProperties([P1,P2,.
.
.
], P3).
The following properties are equivalent to the property ?has as father?
: .
.
.
.negativeobjectPropertyAssertion(P1, [I1, I2, .
.
.
], I3).
None of the following are pet of Walt: Fluffy, Mog or Rex.negativeobjectPropertyAssertion(P1, I1, [I2, I3, .
.
.
]).
It is not true that Walt has as pet Fluffy or Rex.Table 4: Example realisations of common aggregated EL++ axiom patterns.fact, the word count for the aggregated version wasgreater.
This is an interesting problem that wehave not seen treated elsewhere.
Merely pursu-ing brevity, one might argue that an axiom alreadyincluded in a merge should be removed from anyother merges in which it participates; on the otherhand, the arbitrary exclusion of an axiom from alist might be regarded as misleading.
For now wehave allowed repetition, leaving the problem to fu-ture work.6 Related workReape and Mellish?s (1999) survey of aggrega-tion in NLG proposed a continuum of definitionsranging from narrow to wide.
Our technique fitsinto the narrow definition, i.e., it is language-independent, operating on non-linguistic concep-tual representations with the aim of minimising re-dundancy and repetition.
It implements the subjectand predicate grouping rules and aggregation cuessuggested by Dalianis and Hovy (1996).Recent NLG systems that aggregate data fromontologies (Hielkema, 2009; Galanis and An-droutsopoulos, 2007; Dongilli, 2008) do not per-form aggregation directly on axioms, but only af-ter converting them to linguistic representations.Moreover, their systems generate only from ABoxaxioms in restricted domains while ours generatesEnglish for both ABox and TBox in any domain.The approach most similar to ours is thatof Bontcheva and Wilks (2004), who aggre-gate a subset of RDF triples after domain-dependent discourse structuring ?
a task equiv-alent to merging axioms that conform to theobjectPropertyAssertion pattern in table 4.7 ConclusionWe have demonstrated that for the EL++ DL thatunderlies many Semantic Web ontologies we candefine generic aggregation rules based on logicalstructure, each linked to a syntactic rule for ex-pressing the aggregated axioms in English.
Thework described here is a first step in tackling apotentially complex area, and relies at present onseveral intuitive assumptions that need to be con-firmed empirically.
First, from an examinationof all combinations of the four commonest axiompatterns, we concluded that axioms sharing thesame pattern could be combined more effectivelythan axioms with different patterns, and there-fore focussed first on same-pattern merges withvariations in only one constituent.
Secondly, af-ter systematically enumerating all such merges forEL++, we have implemented a grammar that ex-presses each aggregated pattern in English, relyingon an intuitive choice of the best form of words: ata later stage we need to confirm that the resultingsentences are clearly understood, and to considerwhether different formulations might be better.AcknowledgmentsThis work is supported by the UK Engineeringand Physical Sciences Research Council (EPSRC)grant EP/G033579/1 (SWAT: Semantic Web Au-thoring Tool).
We thank our colleagues and theanonymous reviewers.ReferencesK.
Bontcheva and Y. Wilks.
2004.
Automatic re-port generation from ontologies: the MIAKT ap-proach.
In Nineth International Conference on Ap-plications of Natural Language to Information Sys-tems (NLDB?2004), pages 214?225, Manchester,UK.Hercules Dalianis and Eduard H. Hovy.
1996.
Aggre-gation in natural language generation.
In EWNLG?93: Selected papers from the Fourth EuropeanWorkshop on Trends in Natural Language Gener-ation, An Artificial Intelligence Perspective, pages88?105, London, UK.
Springer-Verlag.Paolo Dongilli.
2008.
Natural language rendering ofa conjunctive query.
Technical Report KnowledgeRepresentation Meets Databases (KRDB) ResearchCentre Technical Report: KRDB08-3, Free Univer-sity of Bozen-Bolzano.Dimitrios Galanis and Ion Androutsopoulos.
2007.Generating multilingual descriptions from linguisti-cally annotated OWL ontologies: the NaturalOWLsystem.
In Proceedings of the 11th European Work-shop on Natural Language Generation, pages 143?146, Morristown, NJ, USA.
Association for Compu-tational Linguistics.Dimitrios Galanis, George Karakatsiotis, GerasimosLampouras, and Ion Androutsopoulos.
2009.
Anopen-source natural language generator for OWLontologies and its use in prote?ge?, and second life.In Proceedings of the 12th Conference of the Euro-pean Chapter of the Association for ComputationalLinguistics: Demonstrations Session, pages 17?20,Morristown, NJ, USA.
Association for Computa-tional Linguistics.Feikje Hielkema.
2009.
Using Natural Language Gen-eration to Provide Access to Semantic Metadata.Ph.D.
thesis, University of Aberdeen.Kaarel Kaljurand and Norbert Fuchs.
2007.
Ver-balizing OWL in Attempto Controlled English.
InProceedings of the Third International Workshop onOWL: Experiences and Directions OWLED 2007.Holger Knublauch, Ray W. Fergerson, Natalya Frid-man Noy, and Mark A. Musen.
2004.
The Prote?ge?OWL Plugin: An Open Development Environmentfor Semantic Web Applications.
In International Se-mantic Web Conference, pages 229?243.Richard Power.
2010.
Complexity assumptions in on-tology verbalisation.
In 48th Annual Meeting of theAssociation for Computational Linguistics.Michael Reape and Chris Mellish.
1999.
Just what isaggregation anyway?
In Proceedings of the 7th Eu-ropean Workshop on Natural Language Generation,pages 20?29, Toulouse, France.Rolf Schwitter, Kaarel Kaljur, Anne Cregan, Cather-ine Dolbear, and Glen Hart.
2008.
A comparisonof three controlled natural languages for owl 1.1.In 4th OWL Experiences and Directions Workshop(OWLED 2008).Paul Smart.
2008.
Controlled Natural Languagesand the Semantic Web.
Technical Report TechnicalReport ITA/P12/SemWebCNL, School of Electron-ics and Computer Science, University of Southamp-ton),.
