Proceedings of Human Language Technology Conference and Conference on Empirical Methods in Natural LanguageProcessing (HLT/EMNLP), pages 636?643, Vancouver, October 2005. c?2005 Association for Computational LinguisticsA Self-Learning Context-Aware Lemmatizer for GermanPraharshana Perera and Rene?
WitteInstitute for Program Structures and Data Organization (IPD)Universita?t Karlsruhe, Germanyperera|witte@ipd.uka.deAbstractAccurate lemmatization of German nounsmandates the use of a lexicon.
Compre-hensive lexicons, however, are expensiveto build and maintain.
We present a self-learning lemmatizer capable of automati-cally creating a full-form lexicon by pro-cessing German documents.1 IntroductionLemmatization is the process of deriving the baseform, or lemma, of a word from one of its inflectedforms.
For morphologically complex languages likeGerman this is not a simple task that can be solvedsolely through a rule-based algorithm: Performingan accurate lemmatization for German requires alexicon.
This can be either a lexicon containing allinflected forms of a word together with its base form(full-form lexicon), or just the lemma together witha set of rules for creating its inflected forms (base-form lexicon) (Hausser, 2000).Creating such a lexicon by hand, however, is ex-pensive and time-consuming.
Perhaps because ofthis there are currently no freely available lexicalresources for German that include full case and in-flection information.1 Moreover, even a full-scalecommercial lexicon can fail when encountering spe-cialized terminology.As a consequence, most systems processing Ger-man texts currently perform the much simpler taskof stemming, which often generates stem forms ofwords that might not actually exist in the language(so-called overstemming).
Stemming is frequentlyused for information retrieval (IR) tasks, an examplebeing the German stemmer contained in the full-text1The free online dictionary Wiktionary (http://de.wiktionary.org/) had at the time of writing (May 2005) lessthan 5000 entries for German.search engine Lucene,2 which is based on the algo-rithm described in (Caumanns, 1999).
While over-stemming is a feasible approach for text retrieval,a text mining system often needs to obtain a moreprecise lemma, for example, in order to perform agazetteer lookup to identify named entities or for de-scription logic (DL) queries within an ontology.The goal of our work, therefore, is to allow thesemi-automatic generation of a lexicon by miningfull-text documents.
Since there are currently nofree lemmatization systems for German available,3all components have been developed for release asfree, open-source software.2 Lemmatization AlgorithmOur lemmatization system has two main compo-nents, an algorithm and a lexicon.
The algorithmlemmatizes German nouns depending on morpho-logical classes.
The lexicon, which is described inSection 3, is generated from the nouns that havebeen processed by this algorithm, with some addi-tional capabilities for self-correction.The lemmatization algorithm considers the con-text and grammatical features of the language tolemmatize German words.
It requires an additionalPOS tagger and an NP chunker, which are used asresources to extract the features of words and theirsurrounding context.
It has been developed primar-ily for nouns but can also be extended to lemmatizeadjectives and verbs.2.1 Inflection of German NounsIn German there are seven declensional suffixes fornouns: -s, -es, -e, -n, -er, and -ern (Caumanns,1999).
These suffixes are due to the morphological2http://lucene.apache.org/3The Morphy system (Lezius et al, 1998) is described as?freely available,?
but in fact is closed-source, binary-only, non-changeable software.
It is also no longer being maintained.636Class Features Remove SuffixI {Sg}?
?
{Gen}?
{Masc?Fem?Neut} noneII {Sg}?{Gen}?
{Masc?Neut} -es or -sIII {Pl}?
?
{Dat}?
{Masc?Fem?Neut} -e, -n, -en, -er, or -sIV {Pl}?{Dat}?
{Masc?Fem?Neut} -n, -en, -ern, or -sTable 1: Lemmatization of German nouns based onmorphological classesfeatures such as gender, number, and case (Vilares etal., 2004).
A basic lemmatization algorithm wouldreduce the suffixes by analyzing these morpholog-ical features.
The existence of these suffixes iscaused by the following: (1) genitive form of the sin-gular, masculine, or neuter nouns have the declen-sional suffixes -es, -en, or -s, e.g., Kind ?
Kindes;(2) plural nouns have the declensional suffixes -en,-ern, -n, or -s, e.g., Frau ?
Frauen; and (3) dativeforms of plural nouns have the declensional suffixes-s, -n, -en, or -ern, like in Kind ?
Kindern.A simple lemmatization algorithm has been de-veloped to cutoff these suffixes taking the morpho-logical features such as number, gender, and caseinto consideration.
The values of these features of-ten cannot be uniquely determined from the wordform (Evert, 2004).
Therefore, we developed an al-gorithm to classify the nouns into four different mor-phological classes, as shown in Table 1.
Lemmatiza-tion can then be performed based on these morpho-logical classes (Table 1, right column).We now discuss the first step, finding the properclass for each noun.2.2 Lemmatization ClassesThe currently available POS taggers for German donot capture more complex morphological featureslike number or case.
Thus, in order to lemma-tize German nouns it is necessary to first categorizethem into the classes defined above.
Our algorithmachieves this by analyzing the grammatical featuresof a noun, based on the German grammar (Duden,1995).
Additionally, a stochastic case tagger hasbeen developed as an additional resource to supportthe algorithm in the classification of nouns.2.2.1 Nouns with a DeterminerTable 2 shows statistics for German noun phrasesfor different corpora (the size of each corpus can beCorpus Det Mod Det+Mod NoneOnly OnlyNegra 25% 13% 9% 53%Die Welt 26% 14% 9% 51%AvFIS 22% 16% 8% 53%Wikipedia 28% 15% 9% 48%Table 2: Distribution of German noun phrasesfound in Section 5).
The percentage of nouns thathave a determiner is around 34% (25% determineronly + 9% determiner and modifier).
The morpho-logical information that can be extracted from a de-terminer preceding a noun is very ambiguous.
Forexample, the determiner die can be either singular orplural in number, nominative or accusative in case,and masculine, feminine, or neuter in gender.
Butsome determiners can be used to classify nouns intomorphological classes.Table 3 describes our algorithm for nouns thathave a determiner.
In the first step, we consider de-terminers that are singular and non-genitive.
There-fore, they belong to class I and do not need to belemmatized.
Examples are das Haus ?
Haus, demMann ?
Mann, eine Frau ?
Frau.Determiners in the second step are singular andgenitive and the gender can be masculine or neuter.These nouns belong to class II and to find the lemma,the suffix -s or -es must be removed.
Examples aredes Hauses ?
Haus, des Vaters ?
Vater.Determiners in the third step can be either singu-lar or plural.
The only possible way to differentiatethis is when the noun has both a determiner and amodifier.
The plurals have modifiers ending with -enand singulars with -e.In the other steps, nouns cannot be directly classi-fied.
In the fourth step we apply additional heuristicsand in the last step the statistical case tagger (de-scribed in Section 2.4) is being used.In German, genitive is mostly used as the caseof nominal modifiers and complement of preposi-tions (Hinrichs and Trushkina, 1996), which is usedas a heuristic to find the singular determiners in thefourth step and in the same way another heuristic hasbeen applied which finds singular determiners whenthey are followed by dative prepositions.The determiner den in German can be either ac-cusative or dative.
In the dative case it is plural andin the accusative case it is singular and masculinein gender.
Examples are den Kindern (dative plural)637Step Determiner Class1 das, dem, Class Iein, einem,.
.
., ihr, ihrem2 des, eines, Class IImeines, deines,.
.
., ihres3 die, meine, If modifier has the suffix -edeine, ?
Class I. .
., ihre If modifier has the suffix -en?
Class III4 der, meiner, If determiner is not followeddeiner, by a genitive preposition.
.
., ihrer or a noun phrase ?
Class IIf determiner is followed by adative preposition ?
Class I5 den, meinen, If case tagged by case taggerdeinen, is accusative ?
Class I. .
., ihren If case is dative ?
Class IVTable 3: Lemmatizing German nouns that appearwith a determinerand den Salat (accusative singular).
The fifth stephas determiners that have this ambiguity, which isresolved using information given by the case tagger.2.2.2 Nouns with a Modifier onlyThe morphological features of a noun that can beextracted from a modifier are less than those basedon a determiner.
According to the statistics in Table2, around 14% of noun phrases come with a modifieronly.
However, it is sometimes possible to lemma-tize nouns by looking at the modifiers?
suffixes andthe case information as given by the case tagger.
Ta-ble 4 describes our algorithm for nouns that comesolely with a modifier.In German, when a noun exists without a deter-miner but with a modifier, the ending of the modi-fier changes according to the morphological featuresof the noun.
For example, the noun phrase demkleinen Kind without determiner becomes kleinemKind.
The suffix -em appears only for singularnouns, which do not need to be lemmatized.A modifier with the suffix -es can be genitive, ac-cusative, or nominative.
A good example for thisfeature is kleines Kind and kleines Kindes.
In thefirst case it is nominative or accusative and in thesecond case genitive.
Here, we use the case infor-mation given by the case tagger to classify the noun.Modifiers with the suffix -en are similar to the stepwith the determiner den.
A modifier with suffix -encan be either singular or plural.
In singular caseit is accusative and in plural case dative; examplesStep Modifier ActionSuffix1 -em Class I2 -es If case is not genitive ?
Class IIf case is genitive ?
Class II3 -en If case is accusative ?
Class IIf case is dative ?
Class IV4 -er If case is dative or nominative?
Class ITable 4: Lemmatizing German nouns with a modi-fier but without a determinerfor these cases are guten Mann (accusative, singu-lar) and guten Ma?nnern (dative, plural).Modifiers that have the suffix -er can be both gen-itive or non-genitive.
In the non-genitive case theyare singular and need not to be lemmatized.
Ex-amples for this are kleiner Katze (dative, singular),kleiner Katze (genitive, singular), and kleiner Katzen(genitive, plural).2.2.3 Nouns without Modifier or DeterminerNouns without modifier or determiner account for51% of all NPs (Table 2).
Most of these nouns can-not be directly lemmatized using methods as theyhave been applied above.
The main reason for thisis the unavailability of a tagger providing numberand gender information for such nouns.
Using onlythe case tagger it is not possible to classify all thenouns in this set.
However, it is possible to capturesome nouns in this set by applying a heuristic:If a noun follows the preposition zum, zur, am,im, ins, or ans ??
Class I.The main idea behind this heuristic is a grammat-ical feature of the German language.
In German,there exists a set of prepositions that are connectedwith a determiner, for example, zum Bahnhof, zurParty, and ins Bett.
The main feature of nouns fol-lowing such a preposition is that they are singularand thus do not need to be lemmatized.2.2.4 POS-based LemmatizationTo maximize the number of nouns that can belemmatized a heuristic has been added to capturenominative nouns, using the POS tagger TreeTagger(Schmid, 1995).
The main idea behind this heuristicis to find the subject and main verb of a sentence.In German, the subject is always nominative and bylooking at the suffix of the main verb, it is possibleto determine the number of the subject.638This heuristic first finds the subject of the sen-tence based on the case tagger information.
Then,based on the information from the POS tags the mainverb is identified and checked whether it is a pluralverb.
The corresponding plural nouns are then lem-matized, whereas singular nouns remain unchanged.2.3 OptimizationsTo avoid some errors in the lemmatization algorithmand to increase the accuracy of lemmatization addi-tional optimizations are needed.
In German, manyplural forms are built by changing a vowel to anUmlaut (Caumanns, 1999), like in das Land and dieLa?nder.
But this is not a static rule because there aresome cases where the noun already has an Umlaut,like in die Affa?re and die Affa?ren.
Here, it wouldnot be correct to lemmatize Affa?ren to *Affare.
As asolution, several possible lemma candidates are gen-erated, for example, La?nder ?
*La?nd and Land.Another feature of German are nouns that aremade up from adjectives.
These nouns have differ-ent suffixes when they appear with definite or indefi-nite determiners and without determiners.
An exam-ple is the noun Abgeordnete; in singular form it canappear in two ways, der Abgeordnete and ein Abge-ordneter.
It is also tricky in the dative singular case,where it has three forms, Abgeordnetem, Abgeord-neter and dem/der/einem/einer Abgeordneten.
Ouralgorithm thus generates the possible lemma candi-dates: Abgeordneter ?
Abgeordneter, Abgeordnete.The main reason to generate lemma candidates forthese nouns above is to store them in the lexicon.The correct lemma can then later be identified andthe lexicon updated when the noun appears again ina different context.2.4 The Case TaggerAs an additional resource to the lemmatizer we de-veloped a stochastic case tagger.
It has been builtusing the POS tags as features to train the model inorder to predict the case of nouns.
From the stan-dard STTS tagset for German (Schiller et al, 1995),which has 54 POS tags, 38 tags4 have been identifiedto train the model, based on an analysis of the gram-matical structure of German sentences as defined inthe German grammar (Duden, 1995).4These POS tags define the structure of the grammatical casein German sentences, for example, verbs and prepositions.2.4.1 ModelWe apply a standard Hidden Markov Model(HMM), designed for the structure of the Germanlanguage.
A German sentence can be represented asa set of variable states, which can be nominative, ac-cusative, dative, or genitive and a set of fixed stateslike finite verbs and conjunctions.
For example, inthe sentence Die Mutter gibt den kleinen Kindernden Salat, the phrases Die Mutter (nominative), denkleinen Kindern (dative) and den Salat (accusative)are the variable states and the finite verb gibt is afixed state.
In this manner, the whole sentence canbe represented with the state sequence nominativeVVFIN (finite verb) dative accusative.
From the 38tags that have been chosen for training, 10 tags5 havebeen integrated with the nouns as variable states.2.4.2 Tagging AlgorithmAs an HMM tagger, our case tagger chooses thebest sequence of tags for a given sequence of states(Jurafsky and Martin, 2000).
In this model this canbe expressed as choosing the best sequence of tagsfor the variable states in the sequence.
The first stageof the algorithm selects the set of tags from the POStags that are used for calculation and then it ordersthese tags into fixed and non-fixed states with re-spect to the grammatical case.
The second stage ofthe algorithm calculates the most probable tag se-quence using the Viterbi algorithm.
The model issmoothed to avoid zero probabilities.
In the worstcase the complexity of this algorithm is O(N3) buthere N = 4, the four grammatical cases.3 Lexicon GenerationAs discussed above, the lemmatization algorithmcannot be used alone to lemmatize all Germannouns, as it cannot capture every noun in a text.However, a noun that could not be lemmatizedwithin one text may well have enough context infor-mation for a precise lemmatization within another.Thus, our main idea here is to create a self-learninglexicon that evolves with the nouns processed by thealgorithm, continuously learning the correct valuesfor each lexical entry.5Like for nouns, grammatical case is a morphological fea-ture of these POS tags, for example, pronouns and adjectives.6393.1 Lexicon EntriesThe lexicon stores the full form of a word with itsbase form and possible morphological features likenumber, gender, and case.
This is different from alexicon as it has been used for lemmatization, whichonly stores the base form for each word togetherwith its inflection class (Lezius et al, 1998).For example, the lexicon entries for the noun Kindare represented as:Noun Number Gender Case LemmaKind Sg Neut Nom.Akk KindKindes Sg Neut Gen KindKinder Pl Neut Nom.Akk KindKindern Pl Neut Dat Kind3.2 Lexicon GenerationThe lexicon grows by updating itself from the nounsthat have been processed by the lemmatization al-gorithm.
Additional functionality has been imple-mented in the lexicon, to allow it to evolve by as-signing the correct lemma to the words that are in-flected from the same lemma and correcting someerrors that have been generated by the algorithm.3.2.1 Evolving the LexiconIf a word is scheduled for addition to the lexicon,it first checks whether it already exists.
If this is thecase, it compares each feature of the new word withthe one already in the lexicon.
If there is any differ-ence, for example, if the word in the lexicon showsthe number Sg and the new word has the number Pl,it adds both features to the lexicon entry.
If a newword does not already exist in the lexicon it will justbe added as a new entry.
The following example il-lustrates this process:Current state of the lexiconMenschen Sg Masc Akk MenschMensch Sg Masc Nom MenschNew EntryMenschen Pl Masc Nom Mensche.MenschState of the lexicon after updateMenschen Sg.Pl Masc Akk.Nom MenschMensch Sg Masc Nom MenschThe assignment of the correct lemma Mensch isdone by a procedure that will be discussed next.3.2.2 Updating LemmasIf a new word lemmatized by the algorithm thathas more than one lemma candidate is to be added,the lexicon tries to assign the correct lemma for thisnew word by looking at the lemmas that are alreadyin the lexicon.
If one of the lemma candidates inthe new word matches with a lemma stored in thelexicon, the lemma of the new word will be updatedwith the new information.
This process is illustratedin the following example:Current state of the lexicon (lemma only)Land LandLandes LandNew EntryLa?nder La?nde.La?nd.Lande.LandState of the lexicon after updateLand LandLandes LandLa?nder LandIn the same way, if a new word that has been cor-rectly lemmatized is to be entered to the lexicon, thelexicon tries to update the words in the lexicon thathave more than one lemma using the lemma of thenew word.
If one of the lemma candidates of a wordin the lexicon matches with the lemma of the newword, then the lemma of the word in the lexicon willbe updated with the lemma of the new word:Current state of the lexicon (lemma only)La?nder La?nde.La?nd.Lande.LandLa?ndern La?nder.La?nde.La?nd.Lander.Lande.LandNew EntryLandes LandState of the lexicon after updateLandes LandLa?nder LandLa?ndern Land3.2.3 Automatic Error CorrectionThe lemmatization algorithm may produce errors,for example, a plural noun wrongly tagged as singu-lar may not be lemmatized, resulting in a wrong en-try.
While the lexicon evolves, such errors producedby the algorithm are corrected automatically.As shown in the example below, the lexicon canhave wrong entries and entering a word with morethan one lemma, which is an inflectional form of aword that has a wrong entry, will not be assignedwith the correct lemma because the procedure thatupdates the lemma will assign possible lemma can-didates to this word.
If a word that has a wrong entryin the lexicon will be entered again with the correctlemma, the word itself and all its inflectional formswill be updated with the correct lemma:640Current state of the lexicon (lemma only)Jahr JahrJahre Jahre (wrong)New EntryJahren Jahre.JahrState of the lexicon after updateJahr JahrJahre Jahre (wrong)Jahren Jahre.Jahr (two possibilities)New EntryJahre Jahr (correct lemmatization)State of the lexicon after updateJahr JahrJahre JahrJahren Jahr4 ImplementationThe lemmatization algorithm and the lexicon havebeen implemented based on the GATE architecture(Cunningham et al, 2002).
GATE provides an in-frastructure for developing and deploying softwarecomponents that process human language.
For theGerman POS tagger we currently use the TreeTag-ger (Schmid, 1995).
The other main resource is amulti-lingual base NP chunker implemented withinthe JAPE language.The Negra corpus version 2 (Skut et al, 1998)based on approximately 70 000 tokens tagged withmorphological features has been used to train thecase tagger.
This corpus has been split into 50 000training tokens and 20 000 tokens used for testing.5 EvaluationEvaluation was performed over four collections oftexts: (1) a set of 350 articles from ?Die Welt?
news-paper containing 190 868 tokens (40 104 nouns);(2) the electronic version of the book ?AvFIS?6 con-taining 120 212 tokens (22 039 nouns); (3) six man-ually for lemma, case, and number annotated articlesfrom the German Wikipedia containing 6580 tokens(1536 nouns); (4) 20 000 tokens (5023 nouns) fromthe Negra corpus version 2 (Skut et al, 1998), whichcontains morphological tags for case and number.The lemmatization of German texts has been eval-uated using both the algorithm and the lexicon sep-arately and combined.
Since the first two collec-tions of texts are not annotated with lemmatizationinformation, we evaluated the lemma produced by6Rene?
Witte, Architektur von Fuzzy-Informationssystemen,BoD, 2002, http://rene-witte.netCorpus Nouns Algorithm Only Lexicon OnlyLemm.
Acc.
Lemm.
Acc.Die Welt 35531 49% 0.88 67% 0.96AvFIS 19394 40% 0.88 70% 0.97Wikipedia 1536 49% 0.87 54% 0.97Table 5: Lemmatization results, algorithm and lexi-con tested in isolationour algorithm or lexicon by comparing it with theone produced by the TreeTagger, which is based onan internal dictionary.
Since the TreeTagger cannotproduce the lemma for all nouns, we evaluated onlythat percentage of nouns for which the TreeTaggerwas able to produced a lemma, which is 88% forboth ?Die Welt?
and the ?AvFIS?
book.
In order toalso evaluate our lemmatization independently fromthe lemma produced by the TreeTagger, we com-pared its results to a manually annotated set of ar-ticles from the Wikipedia.Finally, the case and number taggers have alsobeen evaluated separately using the manually anno-tated articles from the Wikipedia and the Negra cor-pus.
For this evaluation, the lemmatization accuracyhas been calculated by accuracy = n(correct)n(lemmatized) .5.1 Algorithm EvaluationTable 5 shows the results of lemmatization usingonly the lemmatization algorithm (i.e., no lexicon).The number of nouns that our algorithm can lem-matize is just below 50%.
This is mainly due to thelarge number of nouns, as shown in Table 2, thatappear without a determiner or modifier, as well assome ambiguous cases where NPs with determinersand modifiers cannot be lemmatized directly.7The accuracy of lemmatization based on this ap-proach shows the irregular morphological featuresof the German language.
75% of the errors are dueto irregular morphological variations in German.The algorithm does not change the vowels with Um-lauts, therefore, all nouns which have a vowel withan Umlaut in plural are not lemmatized correctly.For example, the noun La?ndern is lemmatized by thealgorithm to *La?nd but the correct lemma is Land.Another peculiarity that causes errors in lemmatiza-tion are nouns that have been formed by adjectives.For example, a noun with a determiner like ein Ab-7E.g., in the sentence Ich sehe die Kinder der Frau the twonouns Kinder and Frau cannot be lemmatized by the algorithmbecause in this context these nouns could be singular or plural.641020004000600080001000012000140000  10000  20000  30000  40000  50000  60000  70000  80000  90000  100000Number of lexiconentriesNumber of processed nounslexicon growthFigure 1: Lexicon growthgeordneter would not be lemmatized by the algo-rithm because it is singular and non-genitive.
How-ever, the correct lemma of this word is Abgeordnete.German also has nouns where the plural and the sin-gular forms are equal.
This is a situation in whichthe algorithm fails to generate the correct lemma.For example, the noun Arbeiter has the same singu-lar der Arbeiter and plural die Arbeiter form.
The al-gorithm lemmatizes die Arbeiter to *Arbeit whereasthe correct lemma is Arbeiter.The remaining errors are due to mis-tagging,mainly by the case tagger, which can result in an er-ror in lemmatization.
For example, den Kindern hasbeen tagged by the case tagger as *Akk (correct Dat),so the lemmatization algorithm does not lemmatizethis noun to Kind because the case is accusative andhence assumed to be singular.5.2 Lexicon EvaluationThe lexicon was initially generated by applying thelemmatization algorithm on the ?Die Welt?
collec-tion of texts.
We then evaluated lemmatization basedsolely on the lexicon (not applying the algorithm) forthese documents.
Table 5 also shows the results forthis collection of texts.
The growth of the lexicon isshown in Figure 1; when we performed the evalua-tion it contained 12 858 entries for 10 251 lemmas.The next test for lexicon evaluation has been donein two stages.
First, the electronic book ?AvFIS?
(2) has been lemmatized using only the lexicon.
Af-terwards, we applied the lemmatization algorithmon the same book, generating new entries, and thenevaluated the extended lexicon again on this book.Before processing the book, the lexicon was ableCorpus Contribution ResultsLex.
Alg.
Both Lemm.
Acc.Die Welt 27% 10% 39% 76% 0.94AvFIS 33% 3% 37% 73% 0.96Wikipedia 24% 19% 30% 73% 0.93Table 6: Results using both algorithm and lexiconto lemmatize 40% of all nouns with an accuracy of0.98, whereas afterwards the lemmatization cover-age increased to 70% with the accuracy droppingslightly to 0.97.Both tests above have been done against thelemma generated by the TreeTagger.
Additionally,we evaluated the lexicon on our manually annotatedset of articles from the Wikipedia, which is alsoshown in Table 5.As can be seen, in all tests the accuracy of lemma-tization based on the lexicon is higher than thatof the algorithm.
The reason for this is the self-correcting feature of the lexicon discussed above:While the lexicon evolves it increasingly assigns thecorrect lemma for each noun.Although the lexicon performs with a high accu-racy, the remaining errors are due to various formsof the construction of words in German.
For exam-ple, consider the two nouns Sieger (lemma Sieger)and Sieg (lemma Sieg).
As the lexicon evolves, itassigns Sieger the lemma *Sieg because it alreadyexists as a lemma in the lexicon whereas the correctlemma is Sieger.
Some remaining incorrect entriesin the lexicon also result in errors.
Such cases willneed to be corrected manually.The percentage of lemmatization is obviouslyhigh for texts which have been used to generatethe lexicon.
The difference can be clearly seen inthe book example, where the number of nouns thatcould be lemmatized increased significantly afterenhancing the lexicon from the same set of nouns.5.3 Lexicon and Algorithm EvaluationWe evaluated lemmatization using both algorithmand lexicon combined on the same set of texts (Ta-ble 6, right side).
The number of lemmatized nounshas clearly increased in the combined method.
Here,a lemma produced by the lexicon takes precedenceover the algorithms?
one, if both were able to pro-duce a lemma.
Table 6 also shows the contributionof each method for lemmatization in the combinedmethod (left side).
The number of nouns lemmatized642by the lexicon is relatively higher than the algorithmon the first two texts because these texts were usedto initially generate the lexicon.When both algorithm and lexicon were able toproduce a lemma, it agrees in 92% of all cases withan accuracy of 0.98.One special case both fail to lemmatize correctlyare foreign (e.g., Latin) words that do not fol-low German morphological rules (e.g., Lexika ?Lexikon).
These require manual correction or the de-velopment of specialized heuristics.Finally, we evaluated the performance of the caseand number taggers.
While a detailed discussion ofthese results cannot be presented in this paper, thecase tagger reaches an accuracy of 0.92 on the train-ing data, 0.8 on the testing data, and 0.79 on theWikipedia, while the number tagger has an accuracyof 0.93 on the training data, 0.9 on the testing data,and 0.91 on the Wikipedia corpus.6 Conclusions and Future WorkIn this paper we demonstrated a new algorithm forthe lemmatization of German nouns.
An importantfeature is the automatic construction of a lexiconfrom the processed documents, allowing it to contin-uously improve in both coverage and accuracy.
Thelemmatization system as well as a lexicon will bemade available as free, open-source software, whichwill fill an important gap for the development ofNLP systems dealing with German.8The automatic generation and self-correction of alexicon is a huge time-saver.
Compared to the Ger-man Wiktionary, whose users needed a year to man-ually curate less than 5000 entries, we were able tocompile the same amount of nouns within a mat-ter of days.9 Human intervention can be limitedto the inspection and correction of wrong entries,which will allow the creation of specialized lexiconseven for groups with limited resources.
To increasethe coverage of our lexicon, we currently employa web crawler, which daily scans several German8Dictionaries that are only accessible online, like Canoo.net(http://www.canoo.net) or Wortschatz Lexikon (http://wortschatz.uni-leipzig.de) we do not consider freelyavailable, as the underlying databases and tools cannot be down-loaded, modified, or integrated into NLP systems.9The Wiktionary does have more information for each entry,however, some of these could also be automatically created in asimilar fashion.news sources for texts, which are then processed forlexical entries.In the future, we plan to enhance the system toalso deal with verbs, adjectives, and adverbs, as wellas compound nouns.Acknowledgments.
This work is funded throughthe DFG project ?Entstehungswissen.
?ReferencesJo?rg Caumanns.
1999.
A Fast and Simple Stemming Al-gorithm for German Words.
Technical report, Centerfu?r Digitale Systeme, Freie Universita?t Berlin.H.
Cunningham, D. Maynard, K. Bontcheva, andV.
Tablan.
2002.
GATE: A framework and graphi-cal development environment for robust NLP tools andapplications.
In Proc.
of the 40th Anniversary Meetingof the ACL.
http://gate.ac.uk.Duden.
1995.
Grammatik der deutschen Gegenwarts-sprache.
Dudenverlag, Mannheim, 5th edition.Stefan Evert.
2004.
The Statistical Analysis of Mor-phosyntactic Distributions.
In Proceedings of the 4thInternational Conference on Language Resources andEvaluation (LREC 2004), Lisbon, Portugal.Roland Hausser.
2000.
Grundlagen der Computerlin-guistik.
Springer Verlag.E.
Hinrichs and J. Trushkina.
1996.
Forging agreement:Morphological disambiguation of noun phrases.
InProceedings of the First Workshop on Treebanks andLinguistic Theory.Daniel Jurafsky and James H. Martin.
2000.
Speech andLanguage Processing.
Prentice Hall PTR.Wolfgang Lezius, Reinhard Rapp, and Manfred Wettler.1998.
A Freely Available Morphological Analyzer,Disambiguator and Context Sensitive Lemmatizer forGerman.
In Proc.
COLING-ACL, pages 743?748.A.
Schiller, S. Teufel, and C. Thielen.
1995.
Guide-lines fu?r das Tagging deutscher Textkorpora mit STTS.Technical report, Universita?t Stuttgart and Tu?bingen.H.
Schmid.
1995.
Improvements in part-of-speech tag-ging with an application to German.
In Proceedings ofthe ACL SIGDAT-Workshop.Wojciech Skut, Thorsten Brants, Brigitte Krenn, andHans Uszkoreit.
1998.
A Linguistically InterpretedCorpus of German Newspaper Text.
In Proceedings ofthe ESS-LLI Workshop on Recent Advances in CorpusAnnotation.
Saarbru?cken, Germany.Jesu?s Vilares, Miguel A. Alonso, and Manuel Vilares.2004.
Morphological and Syntactic Processing forText Retrieval.
In DEXA 2004, Springer LNCS 3180.643
