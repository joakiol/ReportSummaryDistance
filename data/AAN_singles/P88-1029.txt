Conditional Descriptions inFunctional Unification GrammarRobert T. KasperUSC/Information Sciences Institute4676 Admiralty Way, Suite 1001Marina del Rey, CA 90292 U.S.A.Abst rac tA grammatical description often applies to a linguistic objectonly when that object has certain features.
Such conditionaldescriptions can be indirectly modeled in Kay's FunctionalUnification Grammar (FUG) using functional descriptionsthat are embedded within disjunctive alternatives.
An ex-tension to FUG is proposed that allows for a direct represen-tation of conditional descriptions.
This extension has beenused to model the input conditions on the systems of systemicgrammar.
Conditional descriptions are formally defined interms of logical implication and negation.
This formal defi-nition enables the use of conditional descriptions as a generalnotational extension to any of the unification-based gram?mar representation systems currently used in computationallinguistics.1 In t roduct ionFunctional Unification Grammar \[Kay79\] (FUG) and othergrammatical formalisms that use feature structures and uni-fication provide a general basis for the declarative r presenta-tion of natural language grammars.
In order to utilize someof the computational tools available with unification gram-mars, we have developed a mapping from sVstelnic ?ram-mars \[Hall76\] into FUG notation.
This mapping has beenused as the first step in creating a general parsing methodfor systemic grammars \[Kas87a\].
The experience of trans-lating systemic grammars into FUG has shown several waysin which the notational resources of FUG may be improved.In particular, FUG has limited notational resources for ex-pressing conditional information.
In this paper we describehow FUG has been enhanced by the addition of conditionaldescriptions, building on research that has already been re-ported \[Kas87a,Kas86,Kas87b\].Conditional information is stated explicitly in systemicgrammars by the input conditions of systems that specifywhen a system must be used.
Consider, for example, the twosystems (MoodType and Indicatlve'l~ype) x shown in Figure 1.The input condition for the MoodType system is the featureIThis example is extracted from Nigel \[Mann83\], a large sys-temic grammar of English that has been developed in text gener-ation research at USC/ISI.C/auae, and the input condition for the IndicatlveType sys-tem ls the feature Indicative.
Because the features of a sys-temic grammar are normally introduced by a unique system,these input conditions actually express a bidirectional typeof logical implication:I.
If a constituent has the feature(s) specified by a sys-tem's input condition, then exactly one of the alterna-tives described by that system must also be yard forthe constituent;2.
If a constituent has one of the feature alternatives de-scribed by a system, then it must also have the fea-ture(s) specified by that system's input condition.Thus the input condition of the Irtd/cative~pe system ex-presses the following implications:1.
If a clause ha~s the feature Indic,~tive, then it must alsohave exactly one of the alternatives from the Zndica-tive23,/pe system (either Declarative or Interrogative).2.
If a clause has one of the feature alternatives describedby the Indicativs~3ype system (either Declarative or/n-terrooaties), then it must also have the feature Indiea-ties.While it is theoretically correct o regard the two directions ofimplication as exact converses of each other, there is a subtledifference between them.
The consequent of the first type ofimplication is the description of the entire system, includingsystemic features and their realizations.
2 The antecedent ofthe second type of implication can be safely abbreviated bythe systemic features without heir realizations, because thepresence of a systemic feature implies that its realizationsalso hold.
We will return to this distinction when we providea formal definition of conditional descriptions in Section 2.For simple input conditions, the first type of implicationcan be expressed in FUG, as it was originally formulated byKay \[Kay79\], by embedding the description of one system in-side the description of another.
For example, we can capturethis implication for the IndicativeType system by embeddingit within the description of the Indicative alternative of the2A realization is a statement of structural properties that arerequired by a feature, such as the statement that SUBJECT pre-cedes FINITE for the feature declarative.233RANK~ -Clause MOOD TYPE~ Imperative NONFINITIVE!StemLIn INDICATIVEdlcatlve TYPESUBJECT:NominativeDseclarativeUBJECT ^ FINITELlnterrogatlveFigure 1: The MoodType and IndicativeType SystemsRank = ClauseMoodType = ImperativeNONFI~ITIVE---- \[ Form = Stem \] JMoodType -- Indicative \]SUBJECT ----" \[ Case = Nominative \] L f F IndicatlveType = Declarative 1 ~ pattern = (.
.
.
SUBJECT F IN ITE .
.
. )
j J L ~ IndicativeType ----- Interrogative \].
3 IndicatlveType ~ \[ MoodType -- Indicative \] "Figure 2: The MoodType and IndlcativeType Systems in FUGMoodType system, as shown in Figure 2.
Note that the sec-ond type of implication expressed by systemic input condi-tions has not been expressed by embedding one functionaldescription i side another.
To express the second type of lm-plicatlon, we have used a different notational device, called afeature xistence condition; it will be defined in Section 2.4.Not all systems have simple input conditions consistingof single features.
Those input conditious which are com-plex boolea~u expressions over features cannot be expresseddirectly by embedding.
Consider the BenefactiveVolce s sys-tem shown in Figure 3 as an example.
Its input condition isthe conjunction of two features, Agentive and Benefactive.One way to express a system with a complex input con-dition in FUG is to use a disjunction with two alternatives,as shown in Figure 4.
The first alternative corresponds towhat happens when the Benef~ctiveVoice system is entered;the second alternative corresponds towhat happens when theBenefactlveVoice system is not entered.
The first alternativealso includes the features of the input condition.
The secondalternative includes the features of the negated input condi-tion.
Notice that the input condition and its negation mustboth be stated explicltly, unlike in systemic notation.
If thenegation of the input condition was not included in the sec-ond alternative, it would be possible to use this alternative3The BenefactivcVoice system iJ also extracted from the Nigelgrammar \[Mann83\].
It describes the active and passive voice op-tions that are possible in clauses that have both an agent anda beneficiary.
The active/passive distinction is not primitive insystemic grammars ofEnglish.
Instead, it is decomposed into sev-eral cases depending on which participant roles are present in theclause.
In this case the subject of a passive clause may be conflatedwith either beneficiary or medium.even when the input condition for the system holds.
Thusthe description of the system would not always be used whenit should be.
Note that this method of encoding systemic in-put conditions presupposes an adequate treatment ofnegatedfeatures."
A formal definition of negation will be developedin Section 2.3.While it is formally possible to encode complex input con-ditione by disjunction and ne~tion,  such encoding IS not al-together satisfactory: It should not be necessary to state thenegated input condition explicitly, since it can always be de-rived automatically from the unne&-~ted condition.
It is alsorather inefficient to mix the features of the input conditionwith the other features of the system.
The features of the in-put condition contain exactly the information that is neededto choose between the two alternatives of the disjunction (Le.,to choose whether the system is entered or not).
It would bemore efficient and less verbose to have a notation in whichthe features of the input condition are distlnguished fromthe other features of the system, and in which the negationof the input condition does not need to be stated explicitly.Therefore, we have developed an extension to FUG that usesa conditional operator (-~), as illustrated by the encoding ofthe BenefactiveVoice system shown in Figure 5.
A descrip-tion corresponding to the input condition appears to the leftof the --~ symbol, and the description to be included whenthe input condition is satisfied appears to its right.
A formaldefinition of what it means for a description to be satisfiedwill be given in Section 2.1.4Some negations ofatomic features can be replaced by a finitedisjunction ofother pouible values for that feature, but this tech-nique only works effectively when the set of possible values is smalland can be enumerated.234Agentive -Benefactive -BENEFACTIVEVOICE  f'Benefact\]veActiveAGENT / SUBJECTlv\[EDIUM / DIRECTCOMPIvfedloPazslveMEDIUM / SUBJECT-BenePsssiveBENEFICIARY / SUBJECTMEDIUM / DIRECTCOMPFigure'3: The BenefactiveVoice System.Rank = ClauseAgentivity = AgentiveBenefaction = Benefacitve' BenefactiveVoice = BenefactiveActive \]AGENT = <SUBJECT> |MEDIUM = <DIRECTCOIqP> \]BenefactlveVoice = MedioPassive \], MEDIUM = <SUBJECT>BenefactlveVolce = BenePassive |BENEF IC IARY = <SUBJECT> |, MEDIUM = <DIRECTCOMP> J'Agentivity = NOT AEentive \] ~ \] 'Benefaction = NOT Benefactive \] S /BenefactlveVolce = NONE JFigure 4: BenefactiveVoice system in FUG, using disjunction and negation.Rank = ClauseAgentivity = Agentlve \] BenefactiveVoice = lvfedioPasslve ---kBenefaction = Benefactive MEDIUM = <SUBJECT>BenefactlveVoice = BenePessiveBENEFICIARY = <SUBJECT>MEDIUM = <DIRECTCOIVIP>3 BenefactiveVolce - - ,  \[ Agentivity = Agentlve \]Benefaction = BenefactlveBenefactiveVolce = BenefactiveActive \]\] AGENT = <SUBJECT> MEDIUM = <DIRECTCOMP>Figure 5: BenefactiveVoice system in extended FUG, using two conditional descriptions.Note: In systemic notation curly braces represent conjunction and square braces represent disjunction, while in FUG curlybraces represent disjunction and square braces represent conjunction.235Note: A and L areNILl :~~<p~ > .....  <p.
>\]~ ^ ~ or \ [~.
.
.
~.\]~bz V~b~ or {~bz...~b.
}denoting no information;where a E A, to describe atomic values;where l E L and ~b E FDL, to describe structuresin which the feature labeled by I has a value described by ~;where each p; E L ' ,  to describe an equivalence lassof paths sharing a common value in a feature structure;where ~i E FDL, denoting conjunction;where ~; E FDL, denoting disjunction.sets of symbols which are used to denote atomic values and feature labels, respectively.Figure 6: Syntax of FDL Formulas.2 Def in i t ionsThe feature description logic (FDL) of Kasper andRounds \[Kas86\] provides a coherent framework to give a pre-cise interpretation for conditional descriptions.
As in previ-ous work, we carefully observe the distinction between fea-ture structures and their descriptions.
Feature structures arerepresented by directed graphs (DGs), and descriptions offeature structures are represented by logical formulas.
Thesyntax for formulas of FDL is given in Figure 6.
We defineseveral new types of formulas for conditional descriptions andnegations, but the domain of feature structures remains DGs,as before.2.1 Sat i s fac t ion  and  Compat ib i l i tyIn order to understand how conditional descriptions are used,it is important to recognize two relations that may hold be-tween a particular feature structure and a description: satis-faction and compatibility.
Satisfaction implies compatibility,so there are three possible states that a particular structuremay have with respect o a description: the structure mayfully 8ati~/X/the description, the structure may be i.eompat.isle with the description, or the structure may be ?ompatiMewith (but not satisfy) the description.
To define these termsmore precisely, consider the state of an arbitra~ 7 structure,/~, with respect o an atomic feature description, f : e:satisfies f : e if f occurs in A with value e;is incompat ib le  w i th  f : e if j' occurs in g with valuez, for some z ~ ~;/~ is (merely) compat ib le  w i th  f : e if f does not occurinA.Because feature structures are used to represent partialinformation, it is possible for a structure that is merely com-patible wlth a description to be extended (i.e., by adding avalue for some previously nonexistent feature) so that it ei-ther satisfies or becomes incompatible with the description.Consider, for example, the structure (~z) shown in Figure 7,and the three descriptions:aubj : (perao.
: 3 A .umber  : ai.g) (I)subj : (perao.
: 1 A .umber : .
i .g )  (2)8=by: (case : .ore  ^  .t,,nbe.
: si .g)  (3)subj~ n d e rstag neutFigure 7: Example feature structure (AZ)-Description (I) is satisfied by Az, because z is fully iustan-tiated with all the required feature values.
Description (2) isi,eompatible with Az, because Az has a different value for thefeature aubj : person.
Description (3) is merely compatiblewith Az (but not satisfied by Az), because Az has no valuefor the feature aubj : e~se.In the following definitions, the notation A ~ ~5 means thatthe structure A satisfies the description ~, and the notationA ~ ~ means that the structure A is compatible toith thedescription ~.Logical combinations of feature descriptions are evaluatedwith their usual semantics to determine whether they aresatisfied by a structure.
Thus, a conjunction is satisfied onlywhen every conjunct is satisfied, and a disjunction is satls-fied if any disjunct is satisfied.
The formal semantics of thesatisfaction relation has been specified in our previous workdescribing FDL \[Kas86\].
The semantics of the compatibilityrelation is given by the following conditions:I.
~ -- N IL  always;2.
A .~ ?
?=?.
/~ is the atomic structure ~;3.
A ~ \[< Pz >,-.- ,< P. >\] ~=~ all DGs  in theset {~q/ < Pz > ..... 4/ < p. >} can be unified (anymember of this set may be undefined; such membersare equivalent to null DGs);4.
/~ ~ I : ~ ?=~ /~/!
is undefined or ~/1 ~ ~;5.
A~~V~ ?=~ ~~~or~~~0;6.
~ N ~bA~, ?ffiffi~ .~ ,  canonical form of~bA~.Unlike satisfaction, the semantics of compatibility cannot bedefined by simple induction over conjunctive formulas, be-cause of a subtle interaction between path equivalences and236nonexistent features.
For example, consider whether A,,shown LU Figure 7, is compatible with the description:nurnber: pl A |< ~*~mber >, < aubj number >\].A, is compatible with r~urnber : pl, and d, k also compat-ible with ~< nurnber >,< subj n~mber >l, but #~, is notcompatible with the conjunction of these two descriptions,because it requires aub\] : r~mber : pl and ,~, has si~,g as thevalue of that feature.Thus, in order to determine whether astructure iscompat-ible wlth a conjunctive description, it is generally necessaryto unify all conjuncts, putting the description i to the canon-ical form described in \[Kas87c\].
This canonical form (i.e.
thefeature.description data structure) contains definite and in-definite components.
The definite component contains nodisjunction, and is represented by a DG structure that satis-fies all non-disjunctive parts of a description.
The indefinitecomponent is a list of disjunctions.
A structure iscompatiblewith a description i  canonical form if and only if it is unifi-able with the definite component and it is compa!
;ible wltheach disjunction of the indefinite component.2.2 Cond i t iona l  Descr ip t ionWe augment FDL with a new type of formula to representconditional descriptions, using the notation, n - .
~, and thestandard interpretation given for material implication:AI  = ~ -~ p ~ AI  =~av#.
C4)This Luterpretatlon f conditionals presupposes an interpre-tation of negation over feature descriptions, which is givenbelow.
To simpLify the interpretation f negations, we ex-clude formulas contaiuing path equivalences and path valuesfrom the antecedents of conditlonak.2.3 Negat ionWe use the classical interpretation of negation, where/~ ~ -~b ?=~ /~ ~: #.
Negated descriptions are defined forthe following types of formulas:1.
A~-~ ?=~ A is not the atom ~;2.
A ~ -~(l : ~) ~ Jl ~= l : "-~ or .~/!
is not defined;3. ,~ ~ -~(~ v ,/,) ~ :~ A ~ -,~ ^  -,,p;4. ,~ M -,(~ ^  ,p) ~ ,~ M -,~ v -,,p.Note that we have not defined negation for formulas contain-ing path equivalences or path values.
Thls restriction makesit possible to reduce all occurrences of negation to a booleancombLuatlon of a fiuite number of negative constraints onatomic values.
While the classical interpretation f negationis not strictly monotonic with respect o the normal sub-sumptlon ordering on feature structures, the restricted typeof negation proposed here does not suffer from the ineffi-ciencies and order-dependent uuificaticn properties of gen-eral negation or intuiticnistic negation \[Mosh87,Per87\].
Thereason for this is that we have restricted negation so thatall negative information can be specified as local constraLutson single atomic feature values.
Thus, these constraints onlycome into play when specific atomic values are proposed fora feature, and they can be checked as efficiently as positiveatomic value constraints.2.4 Feature  Ex is tence  Cond i t ionsA special type of conditional description k needed when theantecedent of a conditional is an existence predicate for aparticular feature, and not a regular feature description.
Wecall this type of conditional  \[eature zistence condition, anduse the notation:B/ -+ ~, where A ~ 3\ [  4==~ A/ \ [  is defined.Thk use of B/ is  essentially equivalent to the use of f = ANYin Kay's FUG, where ANY lsa place-holder for any substan-tive (i.e., non-NIL) value.The primary effect of a feature xistence condition, such as3f  --, ~, is that the consequent is asserted whenever a sub-stantive value is introduced for a feature labeled by f.  Thetreatment offeature xistence conditions differs slightly fromother conditional descriptions inthe way that an uusatisfiableconsequent is handled.
In order to negate the antecedent of3f  --~ #, we need to state that f may never have any sub-stantive value.
This is accomplished by unifying a specialatomic value, such as NONE, with the value of f.  This spe-cial atomic value is incompatible with any other real valuethat might be proposed as a value for f.Feature xistence conditions are needed to model the sec-ond type of implication expressed by systemic input condi-tions - namely, when a constituent has one of the featurealternatives described by a system, it must also have the fea-ture(s) specified by that system's input condition.
Generally,a system named f with input condition a and alternativesdescribed by/~, can be represented by two conditional de-scriptlons:1. a .--.
p;2.
B f  -* a.For example, recall the BenfactiveVoice system, which is rep-resented by the two conditionals shown in Figure 5.It is important to note that feature existence conditionsare used for systems with simple input conditions as well asfor those with complex input conditions.
The use of featureexistence conditions i  essential in both cases to encode thebidirectional dependency between systems that is implicit ina systemic network.3 Un i f i ca t ion  w i th  Cond i t iona lDescr ip t ionsThe unification operation, which is commonly used to corn-blue feature structures (i.e., non-disjunctive, non-conditionalDGs), can be generalised todefine an operation for combLuLugthe information of two feature descriptions (i.e., formulas ofFDL).
In FDL, the unification of two descriptions i  equiva-lent to their logical conjunction, as discussed in \[Kas87b\].
We237have shown in previous work \[Kas87c\] how unification can beaccomplished for disjunctive descriptions without expandingto disjunctive normal form.This unification method factors descriptions into a canon-ical form conslstlng of definite and indefinite components.The definite component contains no dlsjunctlon, and is rep-resented by a DG structure that satisfies all non-disjunctiveparts of a description.
The indefinite component of a de-scription k a list of disjunctions.
When two descriptionsare unified, the first step is to unlfy their definite compo-nents.
Then the indefinite components of each descriptionare checked for compatlbility with the resulting definite com-ponent.
Dlsjuncts are eliminated from the description whenthey are inconsistent with deflnlte information.
When onlyone alternative of a disjunction remains, it is unified with thedefinite component of the description.This section details how thls unification method can beextended to handle conditional descriptions.
Conditionalsmay be regarded as another type of indefinite information ithe description of a feature structure.
They are indefinite \]nthe sense that they impose constraints hat can be satisfiedby several alternatives, depending on the values of featuresalready present in a structure.3.1 How to Satisfy a ConditionalDescriptionThe constraints imposed on a feature structure by a condi-tional description can usually be determined most emclentlyby first examining the antecedent of the conditional, becauseit generally cont~nl a smaller amount of information thanthe consequent.
F, xamining the antecedent k often sufficientto determine whether the consequent is to be included ordiscarded.Given a conditional description, C ---- ~ -+ ~, we candefine the coustralnts that it imposes on a feature structure(A) as follows.
When:~ ct, then A ~ ~;6~ or, then ?
imposes no further constraint on A, and cantherefore be elhnJnated;A ~, c~, then check whether ~ ls compatible wlth A.If compatible, then C must be retained in the descrip-tion of ~.If incompatible, then ~ ~ -~a (and ?
can be elimionated).These constraints follow directly from the interpretation (4)that we have given for conditional descriptions.
These con-straiuts are logically equivalent to those that would be im-posed on A by the disjunction -~ V ~, as required.
However,the constraints of the conditional can often be imposed moreef~ciently than those of the equivalent dJsjunctlon, becauseexamlnlng the antecedent of the conditional carries the samecost as examining only one of the dkjuncts.
When the con-straints of a disjunction are imposed, both of the disjunctsmust be examined in all cases.6Read this constraint as: Umake sure that .4 satisfies ~.t3.2 Extending the UnificationAlgorithmThe unification algorithm for dlsjunctlve feature descrip-tions \[Kas87c\] can be extended to handle conditionals byrecognizing two types of indefinite ~uformatlon i a descrip-tion: disjunctions and conditionals.
The extended feature-descriptlon data structure has the components:definite: a DG structure;d is junct ions:  a llst of disjunctions;condit ionals,  a list of conditional descriptions.The part of the unification algorithm that checks the compat-ibility of indefinite components of a description with its def-inite component is defined by the function CHECK-INDEF,shown in Figure 8.
Thk algorithm checks the disjunctions ofa description before conditionals, but an equally correct ver-sion of thk algorithm ight check conditionals before disjunc-tions.
In our application of parsing with a systemic grammarit is generally more et~cient to check disjunctions first, but?
other applications might be made more efBclent by varylngthis order.4 Potent ia l  Re f inementsSeveral topics merit further investlgatlon regarding condi-tional descrlptions.
The implementation wedescribe has theconstraints ofconditionals and dkjunctions imposed in an ar-bitrary order.
Chang|ng the order has no effect on the finalresult, but it is likely that the el~clency of unification couldbe improved by ordering the conditionals of a grammar ina deliberate way.
Another way to improve the efficiency ofunification with condltiona~ would involve indexing them bythe features that they contain.
Then a conditional wouldnot need to be checked against a structure until some featurevalue of the structure might determine the manner in whichit k eat|s fled.
The amount of efficiency gained by such tech-niques clearly depends largely on the nature of the particulargrammar being used in an appllcatlon.A slightly different ype of conditional might be used as away to speed up unification with binary disjunctive descrip-tions.
If it k known that the values of a relatively smallnumber of features can be used to discrimlnate between twoalternative descriptions, then those features can be factoredinto a separate condition in a description such asIF cor, ditioa THEN alt~ ELSE air2.When the condition is satisfied by a structure, then altl isselected.
When the condition is incompatible with a struc-ture, then air2 is selected.
Otherwise both alternatives mustremain under consideration.
As it often requires a consider-able amount of time to check which alternatives of a dkjunc-tion are applicable, this technlque might offer a significantimprovement in an application where large dlsjunctlve de-scriptions are used.Remember that we have restricted conditionals by requir-ing that their antecedents do not contain path equivalences.238Function CHECK-INDEF (desc) Returns feature-description:where desc is a featur~description.Let P = desc.deflnite (a DG).Let disjunctions = desc.disjunctions.Let conditionals = desc.conditionals.Let unchecked-parts ---- true.While unchecked-parts, do:unchecked-parts := false.Cheek eomp~h'~/ty oj' d/~nct/onm ~ P (omited, see \[Kas87c\]).O~ek eomp~'t~U of ?o~o~b ~ P:Let new-conditionals ---- ~.For each ~, --./9 in conditionals:test whether D satisfies or is compatible wi th  , - :SATISFIES: 9 := UNIFY-DGS (9, ~.deflnite),disjunctions := disjunctions U ~.dlsjunctions,unchecked-parts := true;COMPATIBLE: If ~) is compatible with ~,then new-conditionals := new-conditionals U {a --, ~},else let neg-ante = -~e.D := UNIFY-DGS (P, neg-ante.deflnite),disjunctions :---- disjunctions u neg-ante.disjunctions,unchecked-parts :=true;INCOMPATIBLE: t~  eoad~/on,d imposem no \]urO~ee coaa~v~/nt.end (for loop).conditionals :---- new-conditionals.end (while loop).Let nd ---- make feature-description with:nd.deflnite -~ P, nd.disjunctions = disjunctions, nd.conditionals ---- conditionals.Return (nd).F igure 8: CHECK- INDEF:  A lgor i thm for checking compat ib i l i ty  of indefinite parts  of a feature-descr ipt ion wi th  itsdefinite component .This restriction has been acceptable in our use of condi-tional descriptions to model systemic grammars.
It k unclearwhether a treatment of conditional descriptions without thlsrestriction will be needed in other applications.
If this restric-tion is lifted, then further work will be necessary to define thebehavior of negation over path equivalences, and to handlesuch negations in a reasonably e~cient manner.5 SummaryWe have shown how the notational resources of FUG can beextended to include descriptions of conditional informationabout feature structures.
Conditional descriptions have beengiven a precise logical definition in terms of the feature de-scription logic of Kasper and Rounds, and we have shownhow a unification method for feature descriptions can be ex-tended to use conditional descriptions.
We have implementedthis unification method and tested it in a parser for systemicgrammars, using several hundred conditional descriptions.The definition of conditional descriptions and the unifica-tion method should be generaily applicable as an extensionto other unificatlon-based grammar frameworks, as well as toFUG and the modeling of systemic grammars.
In fact, theimplementation described has been carried out by extendingPATI~I I  \[Shie84\], a general representational framework forunificatlon-based grammars.While it is theoretically possible to represent the informa-tion of conditional descriptions indirectly using notationaldevices already present in Kay's FUG,  there are practicaladvantages to representing conditional descriptions directly.The indirect encoding of conditional descriptions by dlsjunc-tions and negations entails approximately doubling the size ofa description, adding many explicit nonexistence constraintson features (NONE values), and slowing the unification pro-cess.
In our experiments, unification wlth conditional de-scriptions requires approximately 50~ of the time requiredby unification with an indirect encoding of the same descrip-tions.
By adding conditional descriptions as a notationalresource to FUG,  we have not changed the theoretical limitsof what FUG can do, but we have developed a representationthat is more perspicuous, less verbose, and computationailymore e/~clent.AcknowledgementsI would like to thank Bill Rounds for suggesting that it mightbe worthwhile to clarify ideas about conditional descriptions239that were only partially formulated in my dissertation at the /Per87\]University of Michigan.
Helpful comments on earlier versionsof this paper were provided by Bill Mann, Ed Hovy and JohnBateman.This research was sponsored by the United States Air \[Shie84\]Force Office of Scientific Research under contract F49620-87-C-0005; the opinions expressed here are solely those ofthe author.References/Hall76\] Gunther R. Kress, editor.
IIallidap: System andFunction in Language.
Oxford University Press,London, England, 1976.\[Kas87a I Robert T. Kasper.
Systemic Grammar and Func-tional Unification Grammar.
In J. Benson and W.Greaves, editors, SVstemic Functional Approachesto Discourse, Norwood, New Jersey: Ablex (inpress).
Also available as USC/information Sci-ences Institute, Technical Report RS-87-179, May1987.\[Kas86\] Robert.T.
Kasper and William C. Rounds.
A Log-ical Semantics for Feature Structures.
In Proceed-ings of the 24 ta Annual Meeting of the Associationfor Computational Linguistics, Columbia Unlver-slty, New York, 1~/', June 10-13, 1986.\[Kas87b\] Robert T. Kasper.
Feature Structures: A Lo~cal7'heorv ~dth Application to Language Analpds.
Phi)dlssertation, University of Mlchlgan, 1987.\[Kas87c\] Robert T. Kasper.
A Unification Method for DIS-junctive Feature Descriptions.
In Proceed/ng8 o/the25 ta Annual Meeting of the Association for Compu-tational Linguistica, Stanford University, Stanford,CA, July 6-9, 1987./Kay79\] Martin Kay.
Functional Grammar.
In Proceeding8o/the Fifth Annual Meeting of the Bsrkclsp Lingui~-tica Societp, Berkeley Linguistics Society, Berkeley,Ca2ifornia, February 17-19, 1979.\[Mmm83\] Wi\]fiam C. Mann and Christian Matthiemen.Nigel: A Systemic Grammar for Text Generation.USC / Information Sciences Institute, RR-83-105.Also appears in R. Benson and J. Greaves, editors,Spatemie Perapectivs~ on Diacourss: Selected Pa-per, Paper8 from the Ninth International SpstsmicsWorkJhop, Ablex, London, England, 1985.\[Mosh87\] ~ Drew Moshier and William C. Rounds.
A Logicfor Partially Specified Data Structures.
In Proceed-ing8 of the ACM Spmposium on PrinciplcJ of Pro-graraming Languages, 1987.Fernando C.N.
Perelra.
Grammars and Logics ofPartial Information.
In Proceedings of the Inter-national Conference on Logic Programming, Mel-bourne, AustraLia, May 1987.Stuart M. Shieber.
The design of a computer lan-guage for lingu\]stic information.
In Proceedings ofthe Tenth International Conference on Computa-tional Linguistics: COLING 84, Stanford Unlver-sity, Stanford, California, July 2-7, 1984.240
