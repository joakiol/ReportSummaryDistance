A web application using RDF/RDFS for metadata navigationXi S. Guo, Mark Chaudhary, Christopher DozierYogi Arumainayagam, Venkatesan SubramanianResearch & DevelopmentThomson Legal & Regulatory610 Opperman DriveEagan, MN 55123, USAxi.guo@thomson.comAbstractThis paper describes using RDF/RDFS/XML to cre-ate and navigate a metadata model of relationshipsamong entities in text.
The metadata we createis roughly an order of magnitude smaller than thecontent being modeled, it provides the end-userwith context sensitive information about the hyper-linked entities in focus.
These entities at the coreof the model are originally found and resolved us-ing a combination of information extraction andrecord linkage techniques.
The RDF/RDFS meta-data model is then used to ?look ahead?
and navi-gate to related information.
An RDF aware front-end web application streamlines the presentation ofinformation to the end user.1 IntroductionAs an information provider, Thomson West storesvast quantities of documents that are served up inresponse to user queries.
Determining the relation-ships between entities of interest in these documentscan be a complex and time consuming part of end-user research.
Nor is this sort of information alwaysexplicitly presented in the documents retrieved bysearches.
Automating the process of discovery iscomplicated by the need to uniquely identify andresolve ambiguities and co-references between en-tities.Our system relies on various NLP techniques andname/entity taggers to identify attorney and judgenames in news articles on WestlawTM .
Thesenames are then tagged with unique reference iden-tifiers that link them to their records in our legal di-rectory.
The relationships between these individualsand other entities like their firm (or court name forjudges), and title of the document in which they arefound are stored as RDF metadata.A simple representation of relationships amongthese entities is shown in Figure 1.
Documentsmake references to attorneys.
Using NLP tech-niques, each occurrence is resolved to a unique ref-erence identification.
The metadata then allows usFigure 1: Relationships between entitiesto expose meaningful relationships among entitiesin text.
Storing this information as metadata inthe UI allows us to look ahead.
Hovering over aname, the end user is able to see which firms theyare affiliated with.
The user is also able to lookahead to see all the other documents that the per-son occurs in.
In addition, we also know whichfirm each attorney works for and this relationshipallows us to see all the other attorneys who work forthe same firm.
This information is not present inany of the documents retrieved but is inferred fromour RDF/RDFS (Lassila, 2000), (Klyne and Carroll,2004), (W3C, 1999), (W3C, 2004) metadata model.The RDF/RDFS metadata model helps to dynami-cally resolve relationship among entities during thetime of front end rendering.
This system could beextended to incorporate additional relationships be-tween other kinds of data.2 ArchitectureContent in our architecture consists of plain textnews documents and RDF metadata.
Both arestored in an XML content repository.
In additionwe also store Thomson West?s legal database of at-torney profiles in the same repository as well.
Withthe content stored, we use a name/entity taggerin combination with methods described in (Dozierand Haschart, 2000) to link occurrences of attorneyFigure 2: High Level Architecturenames within the plain text news documents to theirdatabase profile record.There are several reasons that motivate us to buildthis web application using RDF/RDFS.
Firstly, ourexisting data model put metadata and content in thesame data repository, the relationships or links areembedded inside content.
This makes it very diffi-cult to build new business products since developershave to write programs to look at content first, ex-tract information out of it and then put this extractedinformation somewhere to enable front-end render-ing.
The disadvantage of this approach is being ableto dynamically maintain the integrity of both datarepository and relationship repository in a rapidlychanging environment.
Both of these repositoriesneed to be updated whenever any relationships getupdated.
The use of RDF/RDFS separates relation-ships from content so manipulation of metadata iseasier and less expensive.RDF/RDFS?s ability to provide a data infrastruc-ture for entities, relationships extracted from NLPapplications is the second reason for choosing it asour data model.
In our domain, we have differentkinds of entities embedded in news articles, law re-views, legal cases etc.
These entities include attor-ney name, judge name, and law firm names.
Weare interested in not only identifying them in con-tent but also finding their relationships and linkingthem together.
RDF/RDFS allows us to accomplishthis.Architecture for this application uses MVC(Model View Controller) design pattern for separat-ing graphical interface of one application from itsbackend artifacts such as code and data.
This classicarchitectural design pattern provided the flexibilityto maintain multiple views of backend data.2.1 RDF/RDFS/XML Data ModelUsing the MVC design pattern, our data model rep-resents data used by the application and the rulesfor accessing this data.
A RDF/RDFS/XML modelis created to represent the data and a set of APIs isprovided for data accessing purpose.Our prototype contains 911274 legal profession-als?
profiles from West?s Legal Directory and 2000news documents.
The news documents are pre-processed using our name entity tagger.
The taggingprocess is able to generate a list of people templatesthat are then fed into an entity reference resolutionprogram.
This allows us to resolve each extractedname template to its specific record from West?s Le-gal Directory.Our data model environment contains separatemetadata and content repositories, the XML contentrepository and the RDF metadata repository.
Weconvert the news articles to XML and load them toXML content repository.
Our search API features ofthis repository allow us to perform full text search-ing inside content.
Each news article takes the formof one XML document identified by a unique refer-ence number.
Names found inside these documentsby the name tagger are identified with xml elements.Besides 2000 news articles, WLD legal profession-als?
profiles are also loaded to this content reposi-tory with each profile also associated with a uniqueidentifying number.Our RDF metadata repository employs onRDF/RDFS model.
A simple RDF schema formallyspecifies groups of related resources and the rela-tionships between these resources.
Figure 3 demon-strates three major RDF resources; Document, Peo-ple and Organization.
The Attorney and Judge re-sources are subclasses of the People resource.
Eachinstance of these resources has a URI associatedwith it.
Resource related properties are also de-fined in this schema.
The ranges of some propertiesof resources are themselves resources from otherdomains.
For example, resource Document has aproperty PeopleInDocument.
This property has itsdomain in Document but its range is in the Peopledomain.
The schema allows us to specify the datamodel so our metadata navigation application couldfollow relationship links specified in it.
More de-tails about this schema can be found in AppendixA.Based on this schema, the RDF metadata repos-itory is built to represent the relationships amongFigure 3: RDF schema of the applicationnews articles, attorneys, judges, courts and lawfirms.
The metadata building process involves sev-eral steps that are entity and relation extraction fromthe tagged XML content repository, RDF metadatageneration, and RDF metadata loading.
The endresult is an RDF metadata repository with full textsearch capability.
Figure 4 shows samples of a por-tion of the metadata model depicting the occurrenceof two attorneys in a Wall Street Journal document.During the time the metadata repository wasbuilt, our schema was only used for data validationpurpose.
Currently we are exploring one approachthat leverages the expressive power of logic pro-gramming tool such as Prolog to navigate the RDFschema graph; this schema navigation should beable to enable automatic metadata collection aboutparticular concepts and then build correspondedRDF metadata based upon.Note that in this application, URIs (unique ref-erence identification) are used extensively.
Eachdocument in both content and metadata reposito-ries has a unique number associated with it.
Thisunique number works as a unique resource link andis utilized by the RDF documents in the metadatarepository.
With this unique number, the RDF docu-ment can then be linked to any xml or rdf document,and even to elements inside these documents usingFigure 4: Sample RDF metadataXPATH.In the sample of the RDF data presented in Table1, the WSJ document with URI ?WSJ210572229?entitled ?Market on a High Wire?
contains ref-erences to two attorneys; Froehlich and Madden.Figure 5: Small RDF Graph of one metadata sampleFroehlich has URI ?WLD0293087701?
and Mad-den has URI ?WLD0293086676?.
The metadataalso contains the XPATH of the attorney names in-side this WSJ document as well as the XPATH toother properties of the document such as news titleand news content.Figure 5 shows a small RDF graph gener-ated from samples in Table 1.
In this graph,?WSJ210572229?
and ?WLD0293087701?
are twomajor resources from two different domains.
TheRDF properties of both resources point to each otherthrough predicates.
These pointing edges representrelationships among multiple entities and they formthe infrastructure for our navigational map that willeventually be presented to end-user.Besides metadata and content storage, the datamodel in MVC also provides a set of APIs for ac-cessing both metadata and content.
In XML contentrepository, APIs exist for single XML document re-trieval by URI and full text search by user queries.In the RDF metadata repository, APIs exist for sin-gle RDF document retrieval by URI, RDF resourcelink retrieval using ARP, an RDF parser from HPand RDF metadata full text search.2.2 Application ControllerThe Controller in our MVC patterned applicationcontains our metadata navigation logic.
The pur-pose of this layer is to capture all requests from thefront view and to interact with the data model toprovide the data wanted by the end user.The general scenario of our application starts outwith a user typing in queries.
These queries are thenpassed to the XML content repository which re-turns matched search results with navigation meta-data embedded inside.
All of this metadata is gener-ated through the controller layer that interacts withboth RDF and XML repository.
The results then arepresented to the user who can click on entities of in-terest (which are RDF resources) and thus navigatethrough our metadata repository.2.3 Front ViewAll information rendering happens in the front viewlayer.
This layer interacts with end users and speci-fies how final data can be represented.
Since back-end data is either RDF or XML, we use XSLT toconvert this to HTML/JSP pages that work in thefront end browser.Appendix B shows a snapshot of our applicationdepicting a single Wall Street Journal article con-taining attorney names.
The end user can roll overthis name link and using the pop-up menu, navigateto other corresponding entities such as other newsdocuments that mention the same name, or law firmthis attorney is working in.
This metadata-basednavigation is described in detail in next section.3 Metadata based NavigationBy tagging entity information and resolving crossdocument co-references for attorneys and judges,we were able to identify all the documents a partic-ular attorney or judge appeared in.
The RDF meta-data model goes a step further weaving togetherthe relationships between attorneys, judges, firms,courts and the documents that reference them.With the metadata model it now becomes easierfor the user to see all related information from anyparticular node.
The combination of informationextracted from documents with information fromauthority files, gives us a dynamic view of rela-tionships in the content that can answer questionssuch as ?What other attorneys were mentioned inthe same article??
and ?Who else works at the samefirm as this attorney??
These relationships facilitatenavigation between related entities.
Figure 6 showshow the metadata model allows the user to navigatefrom one related node to the next.
Not only are weable to tell the firm an attorney belongs to even ifthat wasn?t specifically mentioned in the text of thedocument, but we can also use the metadata modelto shift our focus onto the firm node and immedi-ately see a list of other attorneys related to that firm.Switching to any one of those nodes (attorneys) im-mediately shows us articles related to the next attor-ney.
In a similar fashion we can move from judgesto courts and articles and back.4 ConclusionThis application utilizes RDF/RDFS to build a datamodel that allows for easy maintenance of referencelinks embedded in content.
This data model also fa-cilitates development of metadata navigation.
Byjust looking through metadata repository, the appli-cation can decide the best way to utilize rich infor-mation buried inside content repository.We feel that this application can be extended toprovide inferencing capability.
The hard wiring ofthe logic inside the metadata repository does notcurrently provide any formalism to infer hidden re-lationships from the facts.
Implementing this infer-encing mechanism would bring us closer to our se-mantic web goal.ReferencesChristopher Dozier and Robert Haschart.
2000.Automatic extraction and linking of personnames in legal text.
Proceedings of RIAO-2000:Recherche d?Informations Assiste par Ordina-teur.Graham Klyne and Jeremy J. Carroll.2004.
Resource description frameworkFigure 6: Navigation between related metadata(rdf): Concepts and abstract syntax.http://www.w3.org/TR/2004/REC-rdf-concepts-20040210/.Ora Lassila.
2000.
The resource description frame-work.
IEEE Intelligent Systems, 15(6):67?69.W3C.
1999.
Resource descriptionframework (rdf) model and syntax.http://www.w3.org/TR/1999/REC-rdf-syntax-19990222/.W3C.
2004.
Rdf vocabulary descrip-tion language 1.0: Rdf schema.http://www.w3.org/TR/2004/REC-rdf-schema-20040210/.AppendixA A RDF Schema for data model of our application<?xml version=?1.0?
encoding=?ISO-8859-1?
?><!DOCTYPE rdf:RDF [ <!ENTITY rdf ?http://www.w3.org/1999/02/22-rdf-syntax-ns#?><!ENTITY PeopleCite ?http://www.thomson.com/PeopleCite#?><!ENTITY rdfs ?http://www.w3.org/TR/1999/PR-rdf-schema-19990303#?>]><rdf:RDF xmlns:rdf=?&rdf;?
xmlns:PeopleCite=?&PeopleCite;?
xmlns:rdfs=?&rdfs;?><rdfs:Class rdf:about=?&PeopleCite;Document?><rdfs:subClassOf rdf:resource=?&rdfs;Resource?/></rdfs:Class><rdf:Property rdf:about=?&PeopleCite;ContentOfDocument?><rdfs:domain rdf:resource=?&PeopleCite;Document?/><rdfs:range rdf:resource=?&rdfs;Resource?/></rdf:Property><rdf:Property rdf:about=?&PeopleCite;DocumentURI?><rdfs:comment> The Unique Identication Number of each document </rdfs:comment><rdfs:domain rdf:resource=?&PeopleCite;Document?/><rdfs:range rdf:resource=?&rdfs;Literal?/></rdf:Property><rdfs:Class rdf:about=?&PeopleCite;WSJ?><rdfs:comment xml:space=?preserve?><!
[CDATA[<<Wall Street Journal>>News Data Repository]]></rdfs:comment><rdfs:subClassOf rdf:resource=?&PeopleCite;Document?/></rdfs:Class><rdf:Property rdf:about=?&PeopleCite;PersonInDocument?><rdfs:domain rdf:resource=?&PeopleCite;Document?/><rdfs:range rdf:resource=?&PeopleCite;Person?/></rdf:Property><rdfs:Class rdf:about=?&PeopleCite;Person?><rdfs:subClassOf rdf:resource=?&rdfs;Resource?/></rdfs:Class><rdfs:Class rdf:about=?&PeopleCite;Attorney?><rdfs:subClassOf rdf:resource=?&PeopleCite;Person?/></rdfs:Class><rdfs:Class rdf:about=?&PeopleCite;Judge?><rdfs:subClassOf rdf:resource=?&PeopleCite;Person?/></rdfs:Class><rdf:Property rdf:about=?&PeopleCite;PersonURI?><rdfs:domain rdf:resource=?&PeopleCite;Person?/><rdfs:range rdf:resource=?&rdfs;Literal?/></rdf:Property><rdf:Property rdf:about=?&PeopleCite;LastNameOfPerson?><rdfs:domain rdf:resource=?&PeopleCite;Person?/><rdfs:range rdf:resource=?&rdfs;Resource?/></rdf:Property><rdf:Property rdf:about=?&PeopleCite;FirstNameOfPerson?><rdfs:domain rdf:resource=?&PeopleCite;Person?/><rdfs:range rdf:resource=?&rdfs;Resource?/></rdf:Property><rdf:Property rdf:about=?&PeopleCite;MiddleNameOfPerson?><rdfs:domain rdf:resource=?&PeopleCite;Person?/><rdfs:range rdf:resource=?&rdfs;Resource?/></rdf:Property><rdf:Property rdf:about=?&PeopleCite;AflicationOfPerson?><rdfs:domain rdf:resource=?&PeopleCite;Person?/><rdfs:range rdf:resource=?&PeopleCite;Organization?/></rdf:Property><rdf:Property rdf:about=?&PeopleCite;AddressOfPerson?><rdfs:domain rdf:resource=?&PeopleCite;Person?/><rdfs:range rdf:resource=?&rdfs;Resource?/></rdf:Property><rdf:Property rdf:about=?&PeopleCite;CitingDocumentOfPerson?><rdfs:domain rdf:resource=?&PeopleCite;Person?/><rdfs:range rdf:resource=?&PeopleCite;Document?/></rdf:Property><rdfs:Class rdf:about=?&PeopleCite;Organization?><rdfs:subClassOf rdf:resource=?&rdfs;Resource?/></rdfs:Class><rdf:Property rdf:about=?&PeopleCite;OrganizationURI?><rdfs:domain rdf:resource=?&PeopleCite;Organization?/><rdfs:range rdf:resource=?&rdfs;Literal?/></rdf:Property><rdf:Property rdf:about=?&PeopleCite;NameOfOrganization?><rdfs:domain rdf:resource=?&PeopleCite;Organization?/><rdfs:range rdf:resource=?&rdfs;Resource?/></rdf:Property><rdf:Property rdf:about=?&PeopleCite;AddressOfOrganization?><rdfs:domain rdf:resource=?&PeopleCite;Organization?/><rdfs:range rdf:resource=?&rdfs;Resource?/></rdf:Property></rdf:RDF>B One snapshot of our metadata web application
