A Standoff Annotation Interface between DELPH-IN ComponentsBenjamin Waldron and Ann CopestakeUniversity of Cambridge Computer LaboratoryJJ Thomson AvenueCambridge CB3 0FD, UK{bmw20,aac10}@cl.cam.ac.ukAbstractWe present a standoff annotation frame-work for the integration of NLP compo-nents, currently implemented in the con-text of the DELPH-IN tools1.
This pro-vides a flexible standoff pointer schemesuitable for various types of data, a lat-tice encodes structural ambiguity, intra-annotation relationships are encoded, andannotations are decorated with structuredcontent.
We provide an XML serializationfor intercomponent communication.1 BackgroundAn NLP system aims to map linguistic data toa description at some suitable level of represen-tation.
To achieve this various component pro-cesses must perform complex tasks.
Increasinglythese individual processes are performed by dis-tinct software components in cooperation.
Theexpressiveness of communication between suchcomponents hence becomes an issue.
For exam-ple: we may wish to preserve a linkage from afinal semantic analysis to the raw data input; wemay wish to pass ambiguity to some later stagewhere it is more appropriately resolved; we maywish to represent the dependence of certain analy-ses on other analyses; and we require sufficient ex-pressiveness for the content of individual analyses(henceforth ?annotations?).
This work addressesthese issues.Annotations are often associated with a doc-ument inline.
This provides a convenient andstraightforward method of annotating many doc-uments, but suffers from well-known drawbacks.We adopt standoff annotation as an alternative.1http://wiki.delph-in.netHere annotations live in a separate standoff anno-tation document, and are anchored in the raw datavia standoff pointers.2 The DELPH-IN collaborationDELPH-IN is a loose international collaborationof researchers developing open-source softwarecomponents for language processing.
These com-ponents include deep parsers, deep grammars forvarious natural languages, and tools for shallowerprocessing.
The HOG system (Callmeier et al,2004) for the integration of shallow and deep lin-guistic processors (using a pipeline making use ofXML plus XSLT transformations to pass data be-tween processors) was developed during the DeepThought project, as was a standard for the inte-gration of semantic analyses produced by diversecomponents: RMRS (Copestake, 2003) allows un-derspecification of semantic analyses in such away that the analysis produced by a shallow com-ponent may be considered an underspecification ofa fuller semantic analysis produced by a deepercomponent.
Other work (Waldron et al, 2006) hasprovided a representation of partial analyses at thelevel of tokenization/morphology ?
using a mod-ification of MAF (Clement and de la Clergerie,2005).
Current work within the SciBorg project2is investigating more fine-grained integration ofshallow and deep processors.3 Standoff Annotation Framework(SAF)Our standoff annotation framework borrows heav-ily from the MAF proposal.
The key componentsof our framework are (i) grounding in primary lin-guistic data via flexible standoff pointers, (ii) dec-2http://www.sciborg.org.uk/97<?xml version=?1.0?
encoding=?UTF8?
?><!DOCTYPE saf SYSTEM ?saf.dtd?><saf addressing=?char?><olac:olac xmlns:olac=?http://www.language-archives.org/OLAC/1.0/?
xmlns=?http://purl.org/dc/elements/1.1/?
xmlns:xsi=?http://www.w3.org/2001/XMLSchema-instance?
xsi:schemaLocation=?http://www.language-archives.org/OLAC/1.0/ http://www.language-archives.org/OLAC/1.0/olac.xsd?><creator>LKB x-preprocessor</creator><created>18:11:31 1/31/2006 (UTC)</created></olac:olac><fsm init=?v0?
final=?v9?><state id=?v0?/>...<state id=?v9?/><annot type=?token?
id=?t1?
from=?0?
to=?6?
value=?Gutten?
source=?v0?
target=?v1?/>...<annot type=?token?
id=?t11?
from=?30?
to=?31?
value=?.?
source=?v8?
target=?v9?/></fsm></saf>Figure 1: SAF XML (containing token lattice)Figure 2: Parse tree (LKB)oration of individual annotations with structuredcontent, (iii) representation of structural ambigu-ity via a lattice of annotations and (iv) a structureof intra-annotation dependencies.
In each case wehave generalized heavily in order to apply the SAFframework to a wide domain.
The basic unit of theSAF framework is the annotation.
An annotationpossesses properties as outlined below.Each annotation describes a given span in theraw linguistic data.
This span is specified by fromand to standoff pointers.
In order to cope with dif-ferent possible data formats (e.g.
audio files, XML<saf document=?/home/bmw20/b110865b.xml?
addressing=?xpoint?><annot type=?sentence?
id=?s93?
from=?/1/3/54.3?
to=?/1/3/58.89?
value=?The results of this study aredepicted in Table 2&lt;p/&gt;?/></saf>Figure 3: A ?sentence?
annotationtext, pdf files) we make the pointer scheme a prop-erty of each individual SAF object.
So annotationswith respect to an audio file may use frame off-sets, whilst for an XML text file we may use char-acter (or more sophisticated xpoint-based) point-ers.
When processing XML text files, we havefound it easiest to work with a hybrid approach tothe standoff pointer scheme.
Existing non-XML-aware processing components can often be easilyadapted to produce (Unicode) character pointers;for XML-aware components it is easier to workwith XML-aware pointing schemes ?
here we usean extension of the xpoint scheme described in theXPath specification3 .
A mapping between thesetwo sets of points provides interconversion suffi-cient for our needs.3For example: /1/3.2 specifies the second point in the thirdelement of the first element of the root node, and an extensionallows text nodes in non-elements to be referenced also.98<fs type="ne-organisation"><f name="OrgName">National Aeronautics and Space Administration</f><f name="OrgType">institution</f></fs>Figure 4: Named entity FSR contentEach annotation possesses a content, provid-ing a (structured) description of the linguistic datacovered by the annotation.
E.g.
the content of anannotation describing a token may be the text ofthe token itself (see fig.
1); the content of an anno-tation describing a named entity may be a featurestructure describing properties of the entity (seefig.
4); the content of an annotation describing thesemantics of a sentence may be an RMRS descrip-tion (see fig.
6).
In most cases we describe thiscontent via a simple text string, or a feature struc-ture following the TEI/ISO specification4 .
But insome cases other representations are more appro-priate (such cases are signalled by the type prop-erty on annotations).
The content will generallycontain meta-information in addition to the purecontent itself.
The precise specification for thecontent of different annotation types is a currentthrust of development.Each annotation lives in a global lattice.
Use ofa lattice (consisting of a set of nodes ?
includinga special start node and end node ?
and a set ofedges each with a source node and a target node)allows us to handle the ambiguity seen in linguisticanalyses of natural languages.
E.g.
an automaticspeech recognition system may output a word lat-tice, and a lattice representation can be very usefulin other contexts where we do not wish to collapsethe space of alternative hypotheses too early.Fig.
2 shows a Norwegian sentence5 for whichthe token lattice is very useful.
Here the posses-sive s clitic may attach to any word, but unlike inEnglish no apostrophe is used.
Hence it not fea-sible for the tokenizer to resolve this ambiguityin tokenisation.
The token lattice (produced by aregex-based SAF-aware preprocessor) provides anelegant solution to this problem: between nodes 2and 4 (and nodes 4 and 6) the lattice provides alter-native paths.6 The parser is able to resolve the am-4http://www.tei-c.org/release/doc/tei-p5-doc/html/FS.html5Translation: The boy who is sitting?s house is yellow.6The sentence also exhibits the same phenomena for thefinal period ?
it could form part of an abbreviation.0-1 [1] Gutten <0 c 6>1-2 [2] som <7 c 10>2-3 [3] sitter <11 c 17>2-4 [5] sitters <11 c 18>3-4 [4] s <16 c 18>4-5 [6] hu <19 c 21>4-6 [8] hus <19 c 22>5-6 [7] s <20 c 22>6-7 [9] er <23 c 25>7-8 [10] gult <26 c 30>7-9 [12] gult.
<26 c 31>8-9 [11] .
<30 c 31>Figure 5: Token lattice with character-point stand-off pointersbiguity with lexical and syntactic knowledge un-available to the preprocessor component.
See fig.5 for a simple representation of the token lattice,and fig.
1 for the equivalent SAF XML.Each annotation also lives in a hierarchy of an-notation dependencies built over the lattice.
E.g.sentence splitting may be the lowest level; thenfrom each sentence we obtain a set (lattice) of to-kens; for individual tokens (or each set of tokenson a partial path through the lattice) we may ob-tain an analysis from a named-entity component.A parser may build on top of this, producing per-haps a semantic analysis for certain paths in thelattice.
Each such level consists of a set of annota-tions each of which may be said to build on a setof lower annotations.
This is encoded by means ofa depends on property on each annotation.
The an-notation in fig.
6 exhibits the use of the depends onproperty to mark its dependency on the annotationshown in fig.
3.A number of well-formedness constrains applyto SAF objects.
For example, the ordering ofstandoff pointers must be consistent with the or-dering of annotation elements through all paths inthe lattice.
Sets of annotations related (directly orindirectly) via the depends on property must lie ona single path through the lattice.4 XML SerializationOur SAF XML serialization is provided both forinter-component communication and for persis-tent storage.
XML provides a clean standards-based framework in which to serialize our SAFobjects.
Our serialization was heavily influencedby the MAF XML serialization.99<annot type=?rmrs?
deps=?s93?><label vid=?1?/><ep cfrom=?18476?
cto=?18526?><gpred>prpstn_m_rel</gpred><label vid=?1?/><var sort=?e?
vid=?2?tense=?present?/></ep>...<rarg><rargname>MARG</rargname><label vid=?1?/><var sort=?h?
vid=?3?/></rarg></annot>Figure 6: An annotation with RMRS contentThe SAF XML serialization is contained withinthe top saf XML element.
Here the pointer ad-dressing scheme used (e.g.
char for charac-ter point offsets, xpoint for our xpoint-basedscheme), and the location of the primary data arespecified as attributes.
This element may containan optional olac element7 to specify metadata(e.g.
creator) and a single fsm element holds therest of the object (as shorthand we also allow a se-quence of the annot elements defined below inplace of the fsm).
The fsm element consists ofa number of state elements (with attribute id)declaring the available lattice nodes, followed byannot annotation definitions.Each annotation (annot) element possessesthe following attributes: from and to give stand-off pointers into the primary data, encoded accord-ing to the scheme specified by the saf element?saddressing attribute; source and targeteach give a state id (absent if the annotationsare listed sequentially outside of an fsr element);deps is a set of idrefs; value is shorthand fora string-valued content; type is shorthand for aparticular type of annotation content.
The annota-tion content, if not a value string, is representedusing the TEI/ISO FSR XML format or the appro-priate XML format corresponding to the annota-tion type.5 SummaryWe are in the process of SAF-enabling a num-ber of the DELPH-IN processing components.7http://www.language-archives.org/OLAC/metadata.htmlA SAF-aware sentence splitter produces SAFXML describing the span of each sentence, fromwhich a SAF-aware (and XML-aware) preproces-sor/tokeniser maps raw sentence text into a SAFXML token lattice (with some additional annota-tion to describe tokens such as digit sequences).External preprocessor components (such as a mor-phological analyser for Japanese) may also be ma-nipulated in order to provide SAF input to theparser.
SAF is integrated into the parser of theLKB grammar development environment (Copes-take, 2002) and can also be used with the PET run-time parser (Callmeier, 2000).
The MAF XMLformat (compatible with SAF) is also integratedinto the HOG system, and we hope to generalizethis to the full SAF framework.6 AcknowledgementsThe authors wish to thank Bernd Kiefer, Ul-rich Schaefer, Dan Flickinger, Stephan Oepen andother colleagues within the DELPH-IN collabo-ration for many informative discussions.
Thiswork was partly funded by a grant from Boeingto Cambridge University, partly by the NorSourceGrammar Project8 at NTNU, and partly by EPSRCproject EP/C010035/1.ReferencesUlrich Callmeier, Andreas Eisele, Ulrich Schaefer, andMelanie Siegel.
2004.
The DeepThought Core Ar-chitecture Framework.
In Proceedings of the 4th In-ternational Conference on Language Resources andEvaluation, LREC?04, Lisbon, Portugal.Ulrich Callmeier.
2000.
PET.
A Platform for Exper-imentation with Efficient HPSG Processing Tech-niques.
Journal of Natural Language Engineering,6(1):99?108.Lionel Clement and Eric Villemonte de la Clergerie.2005.
MAF: a morphosyntactic annotation frame-work.
In Proceedings of the 2nd Language andTechnology Conference, Poznan, Poland.Ann Copestake.
2002.
Implementing Typed FeatureStructure Grammars.
CSLI Publications, Stanford.Ann Copestake.
2003.
Report on the Design of RMRS.Technical Report D1.1a, University of Cambridge,UK.Benjamin Waldron, Ann Copestake, Ulrich Schaefer,and Bernd Kiefer.
2006.
Preprocessing and Tokeni-sation Standards in DELPH-IN Tools.
In Proceed-ings of the 5th International Conference On Lan-guage Resources and Evaluation, LREC?06, Genoa,Italy.8http://www.ling.hf.ntnu.no/forskning/norsource/100
