Towards a Dedicated Database Management System for I)ictionariesMarc Domenig, Patrick Shannlnstitut Dalle Molle pour les EtudesSemantiques t Cognitives (ISSCO)Route des Acacias 541227 GENEVA, SwitzerlandAbstractThis paper argues that a lexical database should beimplemented with a special kind of databasemanagement system (DBMS) and outlines the design ofsuch a system.
The major difference between thisproposal and a general purpose DBMS is that its datadefinition language (DDL) allows the specification ofthe entire morphology, which turns the lexical databasefrom a mere collection of 'static' data into a real-timeword-analyser.
Moreover, the dedication of the systemconduces to the feasibility of user interfaces with verycomfortable monitor- and manipulation functions.1.
IntroductionAs the means of natural language processing axegradually reaching a stage where the realisation oflarge-scale projects like EUROTRA becomes more andmore feasible, the demand for lexical databasesincreases.
Unfortunately, this is not a demand which iseasy to meet, because lexical databases are exceedinglyexpensive.
~\[he two main reasons for this are thefollowing:?
The mmmal labour involved with the coding ofentries is time-consuming.?
The possibilities to take over or to cumulate xistingmachine-readable dictionaries are rather limitedbecause xisting dictionaries usually contain only apart of the information eeded fox" a certain project.Severe consistency problems and the need formanual post-editing are the result of this (->\[Hess,et.
al.
1983\]).As long as there is no general agreement on the kindof information which should be stored in a dictionaryand therefore no universally applicable lexical database,we will have to live with these problems.
The importantquestion for the time being is, whether we can alleviatethem.
This paper ,argues that the best way to do that is toconstruct a dedicated database management system(DBMS).
It presents a prototype proposal which hasbeen conceived in a doctoral thesis \[Domenig 1986\] andwhich is the basis for a project hat ISSCO 1 has recentlystarted in conjunction with the Swiss National Fnnd.Because of the limited space at disposal we will mainlyexplain the most uncommon feature of the system, itsmorphological capabilities.
We will not go into all ofthe monitor- and manipulation flmctions which alleviatethe task of lexicography.
The reader may infer thepotential for them, however, if he remembers thefollowing fact: as both the 'static' and 'dynamic'informations about entries (features and morphologicalprocesses, respectively) are coded within the system,they can both be accessed and controlled quite easily.2.
Tile requirements for a lexical databaseAccording to our opinion, a lexical database shouldnot be a mere collection of 'static' data, i.e.
a set ofmorphemes with associated features.
It should comprisemorphological processes which enable it to serve as areal-time word-analyser used in a message-switchingenvironment (e..g. a local area network).
Moreover, theDBMS should control the consistency of the data as faras possible so that only plausible combinations offeatures and morphological processes can be associatedwith entries.
This differs very much from tile'traditional' concept of lexical databases, where theentries consist of strings with associated features and themorphological interpretation is done outside of thedatabase in a program.
Naturally, the control overconsistency is much more efficient and also easier tomaintain if both 'static' and 'dynamic' information arecoded within the database.1.
ISSCO stands for 'Institut dalle Molle pour des EtudesSemantiques t Cognitives'.91database rfianager.
.
.
.
.
ilinguistinterfaceIIDDL- Jcompilerinternal schemaLDBinterfacedefinitionenl iDML-compilerIIlexicographerinterfaceiIIIIIv-- processinterfacerI user, \ [ \ ]k_ .
.
.
.
.
.
Jr "  .
.
.
.
.
"~I user II: IIi \ [ \ ]  iI._ .
.
.
.
.
_1Fig.
1: The DBS according to the ANSI/SPARC 3-Schema-Model3.
The inadequacy of general purpose DBMSGeneral purpose DBMS - be they relational orwhatever - do not live up to the formulated requirementsfor a real-time dictionary database.
On the one hand,they are in many areas much too powerful for the task athand, i.e.
they can be adapted to a wealth of problemswhich have nothing to do with dictionaries.
This flexi-bility ensues both a relatively low level of abstractionand a massive overhead.
On the other hand, generalpurpose DBMS are not powerful enough; for example, arelational data definition language (DDL) provides notransparent means to express morphological processes.4.
The design of the dedicated DBMSThe design of the dedicated DBMS put forward in\[Domenig 1986\] follows the ANSI/SPARC 3-Schema-Model.
As shown in Fig.
1, it assumes that threedifferent interfaces are needed:?
A linguist interface with which the conceptualschema is defined, i.e.
the structure and the consis-tency rules of the database.92?
A lexicographer interface for the editing of entries.?
A process interface for the real-time question-answering service in the message-switchingenvironment.From the point of view of the software-design, the mostcomplex part of this conception is the linguist interfacewith the DDL and its compiler.
All the other parts of thesystem depend very much on it because of its far-reaching dedication.
We will therefore concentrate onthe linguist interface and the DDL in this paper.
Theprincipal guidelines for their definition have been thefollowing:?
The syntax of the DDL should be intelligible forlinguists.?
The linguist interface should be interactive and givesome leeway for experiments in order to testdifferent morphological strategies.The proposed solution foresees the implementation fthe system on a high-performance workstation.
Itincludes multiple window technology with pop-upmenus for monitor- and manipulation functions as wellas incremental compilation.
Some brief examples: q-hetop-level window of the interface looks as follows (if weassume that we have seven dictionaries):schemaDani,~hDutchEnglishFrenchGermanGreekItalianend ~hemaIf the linguist wants to define the conceptual schemaof the Danish dictionary he selects - with a mouse - theaccording string on the screen, whereupon a secondwindow is pasted on top of the existing one:schema ~\]Danishalphabettypegrammarrootend Danishend schemaIdentically to the top-level window, this window isunalterable, i.e.
all the dictionary schemas consist offour different definition parts, an alphabet-, a type-, agrammar- and a structure-definition (the structure-definition is represented by the keyword root).
If thelinguist wants to edit one of the definition parts, heagain selects the according string:schemaendDanishalphabetendend alphabetIn contrast to the two top-levels, this window can beedited.
We will not go into the function or the syntax ofthe alphabet-definition as both are quite trivial.
Asmight be inferred from the name, this is the place wherecharacter sets and the like are defined (because thesystem discerns a lexical and a surface level, somemetacharacters denoting morphological c asses etc., thecharacter set is not quite as trivial as might be imaginedat first glance).
If something is entered into this window,the according string in the window above appearshenceforth with an icon (1:3) behind it:schemaDanishalphabet \[\]typegrammarrootend Danishend schemaIn a similar fashion the other three definition parts ofthe conceptual schema can be defined: The typedefinition comprises name- and domain-specificationsof all but the string-typed features allowed in the data-base.
We will not go into its syntax here either.The grammar definition contains morphonologicalrules which mediate between the lexical and the surfacelevel.
We have adapted their concept from Koskenniemi(\[Koskenniemi 1983, 1984\]), whose formalism has beenwidely acknowledged by now, especially in the US (atSRI \[Shieber 1984\], University of Texas\[Karttunen 1983\], by M. Kay of Xerox etc.).
A fewexamples:example 1: epenthesisrule SY'ilsexample 2: consonant-doublingrule: +/<CI><- ->\ [ ' I# \ ]C*V<CI> Vwhere <CI> = {b, d,f, g, l, m, n, p, r, s, t}example 3: surface-'i' for lexieai 'y'rule: y/i<--> C +/=^\[il a\]93example 4: elisionrule: elO <--> <C2> _ +10 V,AVV +/Oe,where <C2> = {CP; CP in AV & CP in A{c, g} }example 5: surfaee.
'y'  for lexieal 'i'rule: ily <--> _ elO +/0 iThe structure definition is at least syntactically themost complex part of the conceptual schema.
It containsan arbitrary number of hierarchical levels which define acollection of so called lexical  unit c lasses (luclasses) onthe one hand, i r regular  entr ies (luentries) on the other.The fundamental ideas behind it are:?
Entries which obey the same morphological rulesshould be grouped into classes so that those ruleshave to be specified only once.?
Entries which are too i rregular  to fit into such aclass should be defined as i r regular.
The  boundarybetween regularity/irregularity should be defined bythe database manager (linguist) and hence beunalterable by lexicographers.
Irregular entries aretherefore defined in the conceptual schema (theinteractivity of the interface, the powerful editingfunctions and the incremental compilation providefor the feasibility of this approach).The consequence of this approach is that the structuredefinition consists of a set of luc lass-def in i t ions on theone hand, a set of luentry-def in i t ions on the other.
Inorder to facilitate the management of the members ofthese sets, they are organized in a hierarchical structure,whereas the criteria for the hierarchy are some o f  thefeatures  wh ich  qual i fy the sets.
Syntactically, this lookse.g.
as follows:rootdcl \[\]gcase \[\]dcase\[{Cat:N, node 13} I{Cat:V, node 13} I{Cat:ADJ, node 13}{Cat:ADV, node 13}{Cat:AUX, node }{Cat:DET, node }{Cat:PRO, node U}{Cat:PRE, node \[\]) I{Cat:CON, node } I{Cat:INT, node \[\]}\]end dcaseend rootThis window defines one hierarchical level (the top)of the organization of the luclasses and luentriesrespectively.
The meaning of it should be quite obviousif we leave out del \[\] and gease \[\] and concentrate on thecase-distinction enclosed in the square brackets: Thefeatures Cat:N, Cat:V,.. are defined to be distinctive forcertain subsets out of the collection of luclasses andluentries.
Note that the names of the attributes andvalues are entirely arbitrary (they must be defined in thetype-definition, of course).
Subordinate levels of thedefinition are again abstracted by icons (node U), i.e.they are defined and viewed in separate windows:rootdcl \[\]gcase \[\]dcase\[{Cat:N,{Cat:V,{Cat:ADJ,{Cat:ADV,{Cat:AUX,{Cat:DET,{Cat:PRO,{Cat:PRE,{Cat:CON,node t3} Inodedcl \[\]gcase \[\]dcase\[{VCat:REG, node } \[{VCat:IRREG, node \[\]}\]end dcaseend node{Cat:INT, node D}\]end dcaseend rootIn the leaves of this tree the keyword node isreplaced by either luclass or luentry.
Their syntax isalmost identical, so let us just give an example of anluelass-definition:94luc|a,,~;trans LIgeese I~Jli~e~ltltea ' +\[ {Case:NON1, Number:SG} I{Cnse:NOM, Number:PL} I{Ca.~e:DAT, Number:SG} \[{Case:GEN, Number:PL} I{Case:AKK, Number:SG} \[{Case:AKK, Nmnber:lq~}+a + {Cuse:GFN, NUMBER:SG}+~l + {Case:DAT, NUMBEII:PL}end luclassApart from the strings transL7 and gcaseC?, themeaning of it should again be quite obvious.
In prosewe might summarize it as follows: All entries of thisclass m'e nouns of a certain subclass - the featuresCat:N .... denoting this qualification are specified on thepath from the root to this leaf - and within this subclassa zero-morpheme attached to the stem is interpreted asone of the following alternatives of feature sets:\[ {Ca~:NOM, Number:SG}l{Case:NOM, Number:PL} \[{Ca~:DAT, Number:SG} I{Ca~:GEN, Number:PL} \[{Case:AKK, Number:SG} I{Cas~:AKK, Number:\]PL} \]An 's'-morpheme attached to the stem is interpretedas {Case:GEN, NUMBER:SG}, an 'n'..morpheme as{Case:AKK, Nl,mber:PL}.
The string Fenster acts in tiffsdefinition mainly as an illustrative xample, i.e.
it has noconceptual function and may be replaced by all noun-stems belonging to this class.
Conceptually speaking,the definition therefore specifies all the inflectionalfmxns of this noun class.
The consequence of this is thatlexicographers have to enter only the stems of words,the inflections are defined in the system.
Together withsome additional language constructs, the regularitics ofmorphology can thus be quite thoroughly grasped.
Theadditional constructs are:o a fommlism with approximately the power of acontext-free grammm' for compounding andderiwltion which allows the combination of differentluclasses and luentries.o a formalism for the specification of stem-alterations(e.g.
German Umlaut).50 CoilclusiohThe impml:ant difference of this approach comparedto other systems is the definition of morphologicalphenomena in the conceptual schema of the DBMSitself.
This conceptual schema can be easily compiledinto a redundancy-optimized internal schema.
This inturn provides for two things: first for an efficient real-time access to the lexical units etc., second for verycomfortable monitor- and manipulation-functions forthe linguist interface.
For example, it is trivial toimplement functions which generate all forms which areassociated with certain features or combinations thereof.It is equally easy to test the impact of complex rules, bethey grammar-rules of the Koskenniemi-style ordifficult to handle compounding roles (implemented bythe fommlism which is similar to a context4reegrammar), q%e most intriguing quality of the internalschema, however, is probably that it enables thedatabase manager (linguist) to alter the morphologicalstrategies dynamically, i.e.
to experiment with them.This is possible, because the system always knowswhich syntactico-semantic features and which morpho-logical rules have to be associated with the differentclasses of entries; whenever those associations -- youcould also call them consistency rules - are altered, thesystem can determine whether the entries belonging tothe according classes lose or gain information, whetherthe alteration is legal etc.. We do not want to go furtherinto those consistency problems as we haw; not reallyexplained them in this summary.
We would like tostress, however, that we consider their integration in theDBMS a major' advantage and necessity as they autono-mize the whole system.
Apart from the possibilities forexperiments they facilitate tim integration of existingmachine-readable dictionaries, again, because thesystem always knows which kind of inRmnation isdistinctive and which is mandatory for which class ofentries.Summarising we could say that the kind ofmorphology supported by the DBMS is rather atraditional one, i.e.
the biggest eftort has been spent ontruly regular phenomena like inflection.
For compoun-ding and derivation the offered choice is either a fullimplementation (-->redundancy) or the rather dangerous?
- potentially overgenerating -.
formalism resembling acontext-free grammar.
It has to be stressed that weconceive this system as a prototype which will probablybe subject to some alterations in tim ft, ture.
q heproposed software-design is accordingly tuned, i.e.
itrelies on the availability of powerful software tools(EMACS, LEX, YACC, LISP etc.)
nmning in a UNIX-environment.956.
ReferencesAmsler R.A.: "Machine-Readable Dictionaries.
"Annual Review of Information Science andTechnology (ARIST), Vol.
19, 1984, 161-209.ANSI/X3/SPARC Study Group on Data BaseManagement Systems: "Interim Report 75-02-08.
"FDT (Bull.
of the ACM SIGMOD) 7, 1975.Cignoni L., et al eds: Survey of Lexicographic Projects.Istituto di Linguistica Computazionale, Pisa,Italy, 1983.Domenig M.: Entwurf eines dedizierten Datenbank-systems fiir Lexika.Doctoral thesis at the University of Zfirich.
inprint.Hess K., Brustkern J., Lenders W.: Maschinenlesbaredeutsche W6rterbiicher.Niemeyer, Tfibingen, 1983.Jaspaert L.: Matters of Morphology.
EUROTRAMorphology Legislation, Second Draft.Internal EUROTRA paper, Nov. 1984.Karttunen L.: "KIMMO: A Two Level MorphologicalAnalyzer.
"Texas Linguistic Forum 22, 1983, 165-186.Koskenniemi K.: Two-Level Morphology: A GeneralComputational Model for Word-FormRecognition and Production.Doctoral thesis at the University of Helsinki,Department of General Linguistics, PublicationsNo.
11, 1983.Koskenniemi K.: "A General Model for Word-FormRecognition and Production."
inProceedings: lOth International Conference onComputational Linguistics, Stanford Univ.,Calif., July 2-6, 1984.96
