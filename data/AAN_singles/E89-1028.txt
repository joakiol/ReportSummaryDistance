COMPUTATIONAL SEMANTICS  OF  MASS TERMSJan Tore l..?nningDepartment ofMathematicsUniversity of OsloP.O.
Box 1053, Blindern0316 Oslo 3, NorwayABSTRACTAlthough the formalisms normally used for describ-ing the semantics of natural languages are far fromcomputationally tractable, it is possible to isolateparticular semantic phenomena and interpret themwithin simpler formal systems.
Quantified massnoun phrases is one such part.
We describe asimpleformal system suitable for the interpretation ofquantified mass noun phrases.
The main issue ofthis paper is to develop an algorithm for deciding thevalidity of sentences in the formal system and hencefor deciding the validity of natural language infer-ences where all the involved noun phrases arequantified mass noun phrases.
The decision proce-dure is based on a tableau calculus.INTRODUCTIONA formal semantics for a part of a natural languageattempts to describe the truth conditions for sen-tences, or propositions expressed by sentences, inmodel theoretic terms, and thereby also the relationof valid inferences between sentences.
From thepoint of view of computational linguistics and natu-ral language understanding, it is important whetherthis relation of entailment can be made computa-tional.
In general, the question must be answered inthe negative.
All proposed formal semantics of, say,English are at least as complex as first order logicand hence at best semi-decidable, which means that ifa sentence 13 is a logical consequence ofa set of sen-tences Y., then there exists a proof for \[3 from ~, butno effective way to find such a proof.
Several pro-posals use even more complex logics, like thehigher order intensional logic used in Montaguegrammar, which has no deductive theory at all.We will not oppose to the view that English in-corporates at least he power of first order logic andthat even more complex formalisms may be neededto represent the meaning of all aspects of English.But we believe there are two different possiblestrategies when one is to study one particular se-mantic phenomenon i  natural languages.
The firstone is to try to interpret the particular phenomenoninto a system that attempts to capture all semanticaspects of the natural language.
The other slrategyis to try to isolate the particular semantic phe-nomenon one wants to study and to build a semanticinterpretation suited for this particular phenomenon.By following the latter strategy it might be possibleto find systems impler than even first order logicthat reflect interesting semantic phenomena, nd inparticular to come up with systems that are compu-tationally tractable.Quantified mass noun phrases is one such phe-nomenon that can be easily isolated.
The propertiesparticular for the semantics of quantified mass termshave been difficult o capture in extensions of sys-tems already developed for count erms, like first or-der logic.
However, if one isolate the mass termsand tries to interpret only them, it is possible tobuild a model where their typical properties fall outnaturally.
We have earlier proposed such a systemand shown it to have a decidable logic (L0nning,1987).
We repeat the key points in the two follow-ing sections.
The main point of this paper is a de-scription of an algorithm for deciding validity ofsentences and inferences involving quantified massterms.The strategy of isolating parts of a natural lan-guage and giving it a semantics that can becomputational is of course the strategy underlyingall computational uses of semantics.
For example,in queries towards data bases one disregards all trulyquantified sentences, and use only atomic sentencesand pseudo quantified sentences where e.g.
for allmeans for all individuals represented in the data base.The system we present here contains genuinequantifiers like all water and much water, but containother estrictions compared to full first order logic.In particular the mass quantifiers behave simplerwith respect to scope phenomena than count quanti-fiers.REPRESENTING QUANTIF IEDMASS NOUNSWe will make use of a very simple formal anguagefor representing sentences containing quantified massnouns, called LM (Lcnning, 1987).
We refer to theoriginal paper for motivation of the particular chosenformat and more examples and repeat only the keypoints here.1.
A particular LM language consists of a (non-empty) set of basic terms, say: water, gold,- 205 -blue, hot, boil, disappear .... and a (possiblyempty) set of non-logical determiners, ay"much, little, less..than two kilos_of..2.
Common to all LM languages are the unaryoperator: -, the binary operator:., the logicaldeterminers: : all, some, and the propositionalconnectives: : --1, ^ , v, --~.3.
A term is either basic or of one of the twoforms (t.s) and (--t) if t and s are terms.4.
An atomic formula has the form D(t)(s) whereD is a determiner and t and s are terms.5.
More complex formulas are built by thepropositional connectives in the usual way.A model for the particular language is a pair con-sisting of a Boolean algebra A = <A, +, *, -, 0, 1>and an interpretation function \[ \], such that1.
\[t\] is a member of A for all basic terms t,2.
\[/9\] is a set of pairs of members of A for alldeterminers D.The interpretation f more complex expressionsis then defined as an extension of \[ \]:1.
\[-t\]= -\[t\], the Boolean complement of \[t\],\[t.s\]=\[t\]*\[s\], the Boolean product (or meet) ofIt\] and Is\].2.
\[D(t)(s)\] is true provided (\[t\],\[s\])~ [D\], in par-ticular \[All(t)(s)\] is true provided \[t\]_<\[s\], and\[Some(t)(s)\] is true provided \[t\]*\[s\] ~ 0.3.
The propositional part is classical.To get an intuition of how the semantics workone can think of \[water\] as the totality of water inthe world or in the more limited situation one con-siders, of \[blue\] as the totality of stuff that is blueand of \[disappear\] as the totality of stuff that dis-appeared.
However, one shall not take this picturetoo literally since the model works as well for ab-stract as for concrete mass nouns.In the formalism, a sentence like (la) is repre-sented as (lb) and (2a) is represented as(2b) if thenegation is read with narrow scope and as (2c) if thenegation is read with wide scope.
(1) (a) All hot water is water.
(b) All(hot, water)(water)(2) (a) Much of the water that disappeared wasnot polluted.Co) Much(water.disappeared)(-polluted)(c) ~ Much(water,disappeared)(polluted)Formula (lb) is a valid LM formula.
In general, thevalid English inferences that become valid if a massterm like water is interpreted as quantities of waterand all water is read as all quantities of water are alsovalid under the LM interpretation.In addition, this approach can explain severalphenomena that are not easily explained on otherapproaches.
Roeper (1983) pointed out thatparaphrasing water as quantities of water was prob-lematic when propositional connectives wereconsidered.
If some water disappeared and some didnot disappear, there will be many quantities thatpartly disappeared and partly did not disappear.
Ifdisappear denotes the set of all quantities that whollydisappeared and did not disappear denotes the com-plement set of this set, then all quantities that partlydisappeared will be members of the denotation of didnot disappear.
The sum of quantities that are mem-bers of the denotation ofd/d not disappear will equalall the water there is.
Roeper solved this problemby letting the quantities be members of a Booleanalgebra nd used a non-standard interpretation f thenegation.
In LM it naturally comes out by theBoolean complement as in (2b) and water that didnot disappear is represented by(water.
(--disappear)).A main feature of the current proposal is that itintroduces non-logical quantitiers co-occurring withmass nouns, like much, little, most .... in astraightforward way.
A sentence like much waterwas blue does not say anything about he number ofquantities of blue water, but says something aboutthe totality of blue water, which is the way it is in-terpreted inLM.It might seem a little like cheating that the sys-tem only introduces interpretations of mass quanti-tiers with minimal scope with respect to other quan-riflers, that it is not possible to interpret one quanti-tier with scope over another quantifier.
In particular,since this is a main reason to why the logic in thesequel becomes imple.
However, it is characteristicfor mass quantifiers that they get narrow scope.
(3) (a) A boy ate many pizzas.
(b) A girl drank much water.While it might be possible to get a reading of (3a)which involves more than one boy, i.e., one boy foreach pizza, it is not possible to get a reading of (3b)involving more than one girl.The only determiners that get a fixed, or logicalinterpretation i LM are : all and some.
For theother determiners we can add various sorts of con-straints on the interpretations that will make more ofthe inferences we make in English valid in the logic.For example, it has been claimed that all naturallanguage determiners are conservative (or "liveon" their fast argumen0, i.e: (a,b)?
\[D\] if and onlyif (a,b*a)~ \[/9\] (Barwise and Cooper, 1981).Several determiners are monotone ,  eitherincreasing or decreasing, in one or both argu-ments, e.g., much is monotone increasing in its- 206  -second argument: if (a,b) ~ \[much\] and b < c then(a,c) e \[much\], and less than_two_kilos_of ismonotone decreasing in-its second argument.Whether an inference likeMuch water evaporated.All that evaporated disappeared.? "
Hence much water disappeared,becomes valid in the logic, will depend on whetherthe denotation of much is constrained to be mono-tone increasing in its second argument or not.LOGICAL  PROPERT IESWe will repeat shortly several of the properties ofthe logic LM shown in (LCnning, 1987) as a back-ground for the decision algorithm for validity.A Hilbert style axiomatization was given and itwas shown that any set of LM sentences consistentin the logic has a model: the logic is complete andcompact.It was implicitly shown, but not stated, that anymodel for LM must be a Boolean algebra: let amodel be any set A with one unary operation \[-\],one binary operation \[-\], and a binary relation JAil\]then the model is a Boolean algebra with \[-\] theBoolean complement, \[.\] the Boolean product (meet)operation and JAil\] the ordering < on A.It was also shown that the logic was completeand compact with respect to the smaller model class:the atomic Boolean algebras, i.e.
any consistent setof sentences has a model which is an atomic algebra,and in fact a finite such.From this, it was shown that LM with no non-logical determiners, let us call it LA, is equivalent toa subset of monadic first-order logic, hence it isdecidable.
It was also shown that the full LM isdecidable.
The argument isbased on the fact that thenumber of possible models for a sentence is finiteand decidable.
This number grows rapidly, however.Already a sentence inLA with n different basic termshave 2(2n) different models, so the argument doesnot establish a good procedure for checking validityin practice.
We will establish procedures that arebetter (in most cases) in the next section.Several natural restrictions on determiners, likeconservativity and monotonicity can be expressedcompletely in LM.
It is not surprising that this canbe done for a fixed LM language given the finitenessof its nature.
The more important point is that theproperties can be expressed in a uniform way inde-pendently of the atomic terms of the language,which in next section will give rise to uniform in-ference rules.A DECIS ION PROCEDUREWe shall establish aprocedure for deciding the valid-ity of LM sentences.
The procedure is a combina-tion of a normal form procedure and a tableau proce-dure (see e.g.
Smullyan, 1968).We start with an LM formula 9 for which wewant to decide whether it is valid, ~.
9.
This isequivalent to deciding whether ~tp is satisfiable.One can think of the process as an attempt on build-ing a model for ~9.
If we succeed, we have shownthat tp is not valid and we have found an explicitcounterexample; if we fail, we have shown that tp isvalid.
We assume all propositional connectives in 9to be basic: 9 ,  ^ , v.1.
First we introduce a new unary quantifier Nullsuch that Null(t) is a formula when t is a term.
Themeaning is that \[Null(t)\] is true ff and only if \[t\]=0.Then substituteNull(t.(-s)) for All(t)(s)Null(t.s) for ~ Some(t)(s)~Null(t.s) for Some(t)(s)This step is not necessary, but it gives a more con-venient notation to work with and fewer instances toconsider in the sequel.
The substitutions correspondto the fact that Some and Every can be taken to beunary and the one can be defined from the other, asin the case with count nouns.2.
Then transform $ to conjunctive normal form,that is, a conjunction of disjunctions of literals,where a literal is an atomic or negated atomic for-mula.3.
Observe that (i) and (ii) are equivalent.
(i) P ~ l^V2^.
.
.^~n(ii) N~I, NV2...andNVn,Hence we can proceed with each conjunct separately.4.
We shall now check P ~lVXlt2v...VVn, whereeach Vi has the form Null(t), --Wull(t), D(t)(s) or-d)(t)(s).
Observe that the following two formulasare equivalent, where t+s is shorthand for-((-t).(-s)).
(i) ~ Null(t) v ~ Null(s)(ii) ~ Null(t+s)(This corresponds to the equivalence between 3xtp v3xV and 3x(9 v ~) in first order logic.)
Hencecontract all the literals of the form --Wull(t) to one.5.
We are then left with a formula of the form-.-aVull(t)vNull(sl)v... vNull(srOvaF l V... VVm,where each ~Fi has the form D(u)(v) or --4)(u)(v), forsome non-logical D. First assume that there are no~i's.
Then observe that (i) and (ii) are equivalent.- 207  -(i) 1= ~ Null(t) v Null(sl) v .
.
.v  Null(slO(ii) h ---3lull(t) v Null(sl) or... orh ~ Null(t) v Null(sn).
(If there are no si's proceed with h ~ Null(t).)
Thisequivalence might need some argument.
That (ii)entails (i) is propositional logic.
For the other wayaround, there are two possibilites.
Either h--31ull(t),which yields the equivalence.
Otherwise, there ex-ists a model A for the language of d~ where \[t\]=0and for all other terms s in the language: Is\]=0 ifand only if All(s)(t) is a valid formula.
Let V be theformula ~Nul l ( t )  v Nul l (s l )  v ... v Null(sn).Then ~ is valid if and only if ~ is true in A. Toshow this, it is sufficient o show that if there is amodel B in which q/is not true then W is not true inA.
If B is a model in which W is not true, thenIt\]=0 and each \[si\]~0 in B.
Hence All(sO(t) cannotbe valid and \[si\]*:O in A for each si.
Since \[t\]=0 inA, ~ cannot be true in A.
The same type of argu-ment yields that --,Vull(t) v Null(sO is valid if andonly if it is true in A.
If we write A h 11 for ~1 istrue in A, the following equivalence is propositionallogic and yields the equivalence above.
(i) A h ~ Null(t) v Null(sl) v .
.
.v  Null(sn)(ii) A h --1 Null(t) v Null(sl) or.
.
.
orA h --, Null(t) v Null(sn).6. a.
We shall describe two different ways forchecking h ---dVull(t) v Null(sO.
The first one pro-ceeds by a transformation to normal form and maybe the easiest one to understand if one is not accus-tomed to tableau calculus.
The second one whichuses a tableau approach is more efficient.
First ob-serve that (i) and (ii) are equivalent.
(i) h ~ Null(t) v Null(sOOi) h Null((-t),si), (i.e.
h All(sO(t)).The last claim entails the first one sinceNull((-t)*si) ~ -3lull(t)vNull(si)is a valid LM-formula.
To see that (ii) entails (i)observe that if --dVull(t)vNull(si) s valid, it will inparticular be true in the model A described in step 5,hence h All(sO(t).To check hNull ((-t).si) rewrite the term (-t)?si indisjunctive normal form: allow the symbol + andwrite the term on the form Sl+...+Sm where each sihas the form Ul?..
.
.Uk and each uj is either anatomic term or on the form -v for an atomic term v.Then h Null(sl+...+Sm) if and only if h Null(sl)and ... and hNull(sm), and hNull(ul.....Uk) if andonly if there is a v such that one uj equals v and an-other uj equals -v.b.
The checking of h ~Null(t)vNull(si) will befaster using a tableau procedure instead of rewritingto normal form.
Note that the following are equiva-lent:h --1 Null(t) v Null(sOh NuU((-t).sO '~h --i Null(t+(-si))There is a close connection between propositionallogic and Boolean algebras.
To each term in LM,  t,there corresponds a formula Pt in pure propositionallogic such that --~Vull(t) is valid in LM if and only ifthe corresponding formula Pt is a tautology: shifteach basic LM term t with a corresponding proposi-tional constant Pt, and exchange - with --i, * with ^,and + with v. In particular, the following areequivalent:h --~lull(t+(-si)) (in LM)h (Pt v(-~Psi)) (in propositional logic)(By the earlier mentioned connection between LMand first order logic this corresponds tothe fact that afirst order formula 3xq~ is valid if and only if ?p is atautology whenever q~ is quantifier f ee.
)Step (6a) above is equivalent to checking thislatter formula for validity by transformation to anormal form.
Instead it can be checked by a standardtableau procedure (see e.g.
Smullyan 1968).We give a short description of the tableau ap-proach to propositional logic.
In order to verify aformula V, we try to build a model that falsifies it.To ease the description we assume that V is onnegation ormal form, that is, built up from literalsby ^ ,  v. The attempt to build a model is done bybuilding a tree for V. We start with a root node de-picted by V and use the following two rules:1.
For each node a depicted by a formula of theform y v TI attach to each leaf below a in thetree constructed so far one successor node b de-picted by y and one successor node c to b de-picted by rl.2.
For each node a depicted by a formula of theform T ^  rl attach to each leaf below a in thetree constructed so far two new leaf nodes onedepicted by T and another one depicted by rl.The tree is complete when all formulas of theforms y v 11 and "/^ 11 are reduced according to therules above.
A branch in a tree is called closed ifthere is a formula T such that one node along thebranch is depicted by T and another node along thebranch is depicted by --,7.
A branch in a completetree for V which is not closed describes a valuationthat falsifies V. Conversely, if all branches in acomplete tree for V are closed, W is valid.
We illus-trate with an example:- 208  -~pv (-~ qA (p V -'1 r ) )v  (r A q~I~qA (pv~ 1")( r /q )~q pv- - , r/ \  I r q pI I # #The sign # indicates that a branch is closed.
Wehave not completed the rightmost branch since it isalready closed.
Since there is one open branch in thetree, the formula is not valid.
The literals along theopen branch: ~p, ~q, r shows that any valuation Vsuch that V(p) = T, V(q) = T, V(r) = .L, falsifies V.The strategy in step (6a) above with transforma-tion to normal form corresponds to construction ofseparate copies for each branch, hence duplicatingparts of the tree, while the tableau procedure xploitsthe possibility of structure sharing.Returning to our main point, we can observe oneadditional gain by using the tableau approach.
Ourgoal is to check whether t" --Wull(t)vNull(sl) or .
.
.
.or P- ---~ull(t)vNull(sn), which is equivalent to checkwhether (tv(~sl)) or .... or (tv(~sn)) is a tautology.The part of the tableau tree that corresponds to t canbe constructed (and if possible reduced by removingclosed branches) once and for all, and then be reusedwith all the different si's.7.
We now return to step 5 and consider the casewhere one or more disjuncts have the form D(u)(v)or ---~(u)(v), for some non-logical D. Then thefollowing are equivalent.
(i) b --~Null(t)vNull(sl)v...vNull(sn)WlV...V~m(ii)~- -Wull(t)vNull(si) for some si, 1 < i _< n, or--~Vull(t)VVkWj for some k andj between 1and m, where Vk lias the form D(a)(b) and Vjhas the form ---D(u)(v) for the same determin6rD.That (ii) entails (i) is immediate.
For the other wayaround, suppose that (ii) does not hold.
We shallthen construct a model which falsifies the originalformula in (i).
Let A be the model where onlyterms provably less than t denote 0 and where a pair(\[d\],\[e\]) is a member of \[/9\] if and only if --~D(d)(e)is one of the disjuncts Vi's.
By the construction, Awill falsify --,Null(t) and each disjunct of the form---~(d)(e).
As in step 5 above, A will falsify eachNull(si).
It remains to show that A falsifies eachdisjunct of the form D(a)(b).
Let ~/be one such dis-junct, let rlj, 1 < j < s, be all the disjuncts of theform --dg(d)(e) with the same determiner D as in ~/and let ej be ---aVull(t)v'l, vTIj" Since (ii) does nothold, theie exists a model B\] where ej is false, foreach e" Then there also exists a model A" which J" .
.Jequals A except possibly for the interpretaUon fD,and where D gets the same interpretation as in Bj.Hence ej is false in A'j.
Since there, exists such anAj for each ej, ~/cannot be true m A.8.
Whether b -WuU(t)vD(a)(b)v--43(u)(v) holds,depends on which restrictions are put on D. With norestrictions, any possible counterexample is onewhere \[t\]=0, (\[u\],\[v\])~ [D\] while (\[a\],\[b\])~ [D\] .The only reason we should not be able to constructsuch a model is that \[a\] =\[u\] and\[b\] =Iv\] wheneverIt\] --0.
We can hence proceed to checkI ~ --,Nutl(0 v(Nult((-a.u)+(a.-u) ) A Nult((--b'v)+(b'-v) )),according to the same procedures as in step 6 above.If we have the additional constraint that the de-terminer in question is conservative, the last rule ischanged such that the last conjunct, which abovestated that the symmetric difference between b and vwas zero, now instead states that the symmetric dif-ference between a.b and u.v is zero..--~ull(t) v (Null((--a.u)+(a.-u)) ANutt( -(a.b).v)+( (a.b).-v)  )Similarly, if we know that the determiner is up-wards monotone in its second argumentD(a)(b)v---D(u)(v) has to be true in any model where\[al=\[u\] and \[v\]__,\[b\], so the last conjunct will beNull((-b.v)) instead of Null((-b.v)+(b.-v)).
If thedeterminer is restricted to be both conservative andmonotone, the last conjunct shall beNull((-(a.b).u.v)).
Similar modifications of the rulecan be done for determiners with other forms ofmonotone behaviour.GENERAL IZED QUANTIF IERSOne main feature of the decision procedure is that itincorporates generalized quantifiers (step 7 and 8).The rules for generalized quantifiers correspond toaxioms one will use in an axiomatization of LM.For example, the rule for quantifiers with no addi-tional constraints correspond to the extensionalityschemata:For all terms a, b, u, v:(All(a)(u) ^  All(u)(a)) ~ (D(a)(b) ~ D(u)(b))(All(b)(v) ^  All(v)(b)) --~ (O(a)(b) ~ O(a)(v))One should remember that we do not try to develop alogic for the strong logical interpretation of deter-miners like most, but a logic for some minimalconstraints that interpretations of the determinersshould at least satisfy.- 209 -Just like there is a meaning preserving translationfrom LA into first order logic, LM can be translatedinto first order logic extended with generalized quan-tiflers.
A proof procedure for first order logic, like atableau or a sequent calculus, can be extended withrules for generalized quantifiers similar to the rulesintroduced here.
If Q is a binary quantifier with noadditional constraints on its interpretation then thefollowing are equivalent.O) b Qx(A(x),B(x)) v ~Qx(C(x),D(x))(ii) ~.
Vx(A(x) ~ C(x)) ^  Vxf~(x) ~ D(x))So to show that (i) is valid one has to show that (ii)is valid.
This can be incorporated into a tableau orsequent calculus for In'st order logic.
If the first or-der logic is monadlc, as the logic we get after trans-lating LM into first order logic is, one can use asimilar procedure as the one described here.
If theextended first order logic is not monadie, the proce-dure one gets when rules corresponding to the reduc-tion from (i) to (ii) are included, becomes morecomplex.EFF IC IENCYWe chose to transform the formula being tested tonormal form early in the procedure (step 2).Alternatively to the described algorithm one couldthink of using a tableau procedure all the way, andnot first transform to conjunctive normal form instep 2.
In general, transformation to normal form isslower than using a tableau procedure (el.
step 6above).
The reason we made the transformation tonormal form was that this was necessary to split theformula in step 5 and step 7.
In the procedure onegets by translating LM into first order logic (withgeneralized quantifiers) and using a tableau procedurefrom the start, it is not possible to split the treesimilarly.
If we for simplicity considers a formulawith no generalized quantifiers, the pure tableau cal-culus will not lead to a separate tree for each si to-gether with t but to one big tree containing all thesi's and roughly one copy of t for each si.
This cor-responds to the quantifier rules in a tableau calculusfor first order logic: (i) for each formula of the formVxqb introduce one new formula dd(a) where a issome new term, (ii) for each formula 3xw introduceone new formula V(a) for each term a introduced inthe tree at a branch to which 3x~ belongs.
Thesuccessful separation i the described algorithm herewill also be possible in a proof procedure formonadic first order logic.The two different procedures will be of the sametime complexity in worst cases.
In the practical ap-plications we have in mind, the procedure describedhere will be faster.
Typically we want to checkwhether a formula 13 follows from a l  ..... a n. Thisis the same as deciding whether ~t lV.
.
.V~nVl3 isvalid or not.
The transformation to normal formwill produce one additional copy for each v withinan ai and each ^  within 13.
If each ai and \[3 are LMformulas that represent English sentences, they caneach be expected to be relatively short and inparticular not contain many v's, so the number ofcopies made will be relatively small.
On the otherhand, the number of ai 's may be large if they repre-sent the dialogue so far or the agent's knowledge.
Itis therefore important that each disjunct can be splitup as much as possible.IMPLEMENTATIONThe inference algorithm has been implemented inPROLOG.
To test it out we have built a small (toy)natural language question-answering-system aroundit.
The program reads in simple sentences and ques-tions from the terminal and answers the questions.It can handle simple statements, like If some of thehot coffee that did not disappear was black thenmuch gold is valuable (the fragment in Lenning1987) and yes/no questions like Did much waterevaporate?
and Was the old gold that disappearedvaluable?
We have written the grammar and transla-tion to LM in the built in DCG rules (Pereira andWarren, 1980).Statements yped on the terminal are interpretedas facts about the world and stored as simple sen-tences ~bl ..... qb n. When a question like Did muchwater evaporate?
is asked, it is parsed and turned intoa formula like V: Much(water)(evaporate).
Then theprogram proceeds to check the validity of(Ol^...^On) --) V- If it is valid, the program an-swers yes, otherwise it checks (ddl^...^0n) ---) ~V.If this is valid, the answer is no, otherwise the pro-gram answers that it does not know.
When a state-ment is made the program checks whether it is con-sistent with what the program already knows beforeit is added to the knowledgebase.The system is mainly made to test the inferencealgorithm and is not meant as an application by it-self.
But it illustrates ome general points.
It is asystem where natural language inferences are madefrom natural language sentences and not from a fixeddatabase.
The system contains acomplete treatmentof propositional logic and illustrates a sound treat-ment of negation where failure is treated as does notknow instead of negation.
On the other hand, thereis also a price to pay for incorporating full proposi-tional logic.
The system can only handle examplesof a limited size in reasonable time.CONCLUSIONWe have here presented a computational approach tothe semantics of quantified mass noun phrases.
Wethink the semantics ascribed to quantified mass- 210-nouns through a translation i to LM is the one thatmost adequately reflects their particular semanticproperties.
In addition this semantics can be madecomputational in a way not possible for other ap-proaches to the semantics of mass terms, like Bum's(1985) which extends axiomatic set theory, orLink's approach (1983) based on Montague's higher-order intensional logic.We have modified and adapted a tableau calculusto be used with mass terms and extended it withgeneralized quantifiers.
Although the imple-mentation we have made is of limited applicability,we hope that the algorithm can be used to incorpo-rate quantified mass noun phrases into larger systemstreating count terms.
In particular, it should bepossible to combine the algorithm with other ap-proaches based on a tableau calculus, like the onedescribed by Guenthner, Lehmann and SchOnfeld(1986).REFERENCESBarwise, J. and R. Cooper: 1981, 'GeneralizedQuantifiers and Natural Language", Linguis-tics and Philosophy, 4, 159-219.Bunt, H.: 1985, Mass terms and model-theoreticsemantics, Cambridge University Press,Cambridge.Guenthner, F., H. Lehmann and W. SchOnfeld:1986,'A theory for the representation fknowledge', IBM J. Res.
Develop.
30, 39-56.Link, G.: 1983,'The Logical Analysis of Plurals andMass terms: A Lattice-Theoretical Approach',in Bauerle t al.
(eds.
), Meaning, Use, and In-terpretation of Language, Walter de Gruyter,Berlin.LCnning, J.T.
:1987,'Mass Terms and Quantifica-tion', Linguistics and Philosophy, 10, 1-52.Pereim, F.C.N.
and D.H.D.
Warren: 1980, 'DefiniteClause Grammars for Language Analysis w ASurvey of the Formalism and a Comparisonwith Augmented Transition Networks',Artificial Intelligence 13, 231-278.Roeper, R.:1983,'Semantics for Mass terms withQuantifiers', Nor.s, 17, 251-265.Smullyan, R.M.
: 1968, First-Order Logic, Springer,New York.- 211  -
