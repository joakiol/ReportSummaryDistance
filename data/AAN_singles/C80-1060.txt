AUTOMATIC TRANSLATION WITH ATTRIBUTE GRAMMARSWerner DilgerUniversity of KaiserslauternComputer Science DepartmentD-6750 KaiserslauternFederal Republic of GermanySummaryStarting from an ATN-grammar and translationrules assigning expressions of a predicate cal-culus language to the symbols of the grammar onecan produce an attribute grammar for the trans-lation of natural language sentences (here Ger-man) into expressions of the predicate calculuslanguage.
The paper il lustrates that this can bedone in a straightforward way and outlines fur-ther improvements of the resulting attributegrammar.IntroductionAn important component of the natural languageinformation system PLIDIS, developped by my col-leagues and myself at the Institut fuer deutscheSprache in Mannheim (cf.
\[BW 78\], \[KL 79\]), isthe translation algorithm, which transduces na-tural language sentences into expressions of anaugmented first order predicate calculus, calledKS (cf.
\[DZ 78\],\[Zi 77\]).
Special features of KSgoing beyond ordinary predicate calculus aremany-sorted domain of objects, l-abstraction,and complex term-building facilities.
The examp-les contained in this paper will i l lustratethese features.
Input for the translation algo-rithm are the parsed sentence and a set oftranslation rules (in the following: TR-rules)(cf.
\[Wu 79\]), which are defined for labels ofthe parse tree nodes, mainly for the labels ofthe terminal nodes, i. e. for the words of theinput sentence.
Working bottom up the parse treethe translation algorithm assigns a translationto each of the nodes of the tree by interpretingthe TR-rules defined for the labels of thenodes.
If a translation has been successfullyassigned to the root of the tree, which is la-belled by S, this translation is the translationof the whole sentence.The advantage of the translation algorithm, themost important part of which is the interpreta-tion of the TR-rules, is its rather simplestructure, which facilitated implementation.
Butit also has several disadvantages.
First of allthe algorithm is not very efficient since itruns separately from parsing, i. e. it does notstart before parsing has finished.
The TR-rulesmust take care of the structure of the parsetree, that means, during their interpretation wemust check which steps were made in parsing somerelevant part of the tree.
Next, the TR-rule forthe label of a node must be completely evalua-ted, though it depends on the position of thenode in the tree, which parts of the rule applyto the node or whether the rule applies as awhole.
Finally it is diff icult to detect circu-larities in the translation process on the basisof the TR-rules.To avoid these disadvantages we can use attri-bute grammars for the translation.
The contentof the TR-rules must then be represented byattributes and semantic functions.
But for thispurpose we need a context free grammar as a ba-sis of the parsing.
In PLIDIS, however, we haveno such grammar, parsing is done by means of anATN-grammar (cf.
\[Wo 70\] , \[Wo 73\], \[Ba 78\], \[EL79\]), adapted for German.
Though the networks ofthe ATN-grammar are not context free produc-tions, we can produce such productions out ofthem.
At first glance, by doing so, the context-sensitivity of the networks - which is theirmain advantage - is lost.
But we can regain itby providing the productions with appropriateattributes and semantic functions.
If we take asimpler version of the ATN-grammar, namely theRTN-grammar ("recursive transition networks")(cf.
\[Wo 70\]), then an ATN-grammar is nothingelse but an attributed RTN-grammar; so we couldread the letters "ATN" as "attributed transitionnetworks" instead of "augmented transition net-works".
In the remainder of the paper we omitthe attributes needed to express context condi-tions, we only deal with those needed for trans-lation.To summarize, we have to show how to obtain con-text free productions from the networks andattributes and semantic functions from the TR-rules.
We will demonstrate by examples that themethod is straightforward, and we will outlinehow the resulting attribute grammar can be im-proved.ATN-grammars and TR-rulesWe want to parse the following questions askingfor facts of the PLIDIS mini-world, i .
e .
thecontrol of water pollution:Enthielt eine Probe im Jahr 1979 in Stutt-gart Arsen?Did a sample in 1979 in Stuttgart containarsenic?Welche Betriebe in Stuttgart hat Zimpel imJahr 1979 geprOft?which plants in Stuttgart Zimpel has in-spected in 1979?Welche Betriebe hat Zimpel im Jahr 1979 inStuttgart gepr~ft?which plants Zimpel has inspected in 1979in Stuttgart?--397--Welche Betriebe der Firma Lauxmann inStuttgart hat Zimpel gepr~ft?Which plants of the firm Lauxmann inStuttgart Zimpel has inspected?Welcher Probenehmer hat bei der Firma Laux-mann im Jahr 1979 Proben gezogen?Which sampler has taken a sample from thefirm Lauxmann in 1979?We will give a small section of the ATN-grammarused within PLIDIS, reduced to an RTN-gr~mnar,which allows the parsing of these questions.
Thenetworks and word classes of fig.
i are neededfor this purpose.NG PNG NG PNG_ w oq_/2Q/2DET NAUXH: {hob}haveDET = (der, die, das, ein, eine}the, aN = (Probe, Probenehmer, Jahr, Betrieb, Firma, Arsen}sample, sampler, year, plant, firm, arsenicNPR = {Stuttgart, Zimpet, Lauxmann}PRAEP = {in, bei}in, atVERB = {enthalt, pr~f, zieh}contain, inspect, takeWDET= {welch}whichFigure 1We obtain by means of this grammar for thequestionWelche Betriebe in Stuttgart hat Zimpel imJahr 1979 gepr0ft?Which plants in Stuttgart Zimpel has in-spected in 1979?the parse tree of fig.
2.We will now give TR-rules for the labels of someof the nodes occurring in fig.
2, using small0~_ cgz _~-bf "N~ Q: ?
"~2 mo ~ z X ~: ?
* lEE- ?
,,= ._~- .
-  cm2=: u ,~e4u_diagrams which represent sections of possibleparse trees.
The triangles in these diagrams de-note arbitrary (perhaps empty) subtrees.
Becausethe TR-rules are defined for single symbols ofthe grammar regardless of their occurrences inparse trees, all possible natural language oc-currences of the symbols must be described anddealt with in the TR-rules.
Therefore in thefollowing TR-rules not all conditions will beimmediately clear.
But that doesn't matter sincewe are not interested in the details of the TR-rules, rather we will show below how the TR-rules can be transformed into expressions con-taining attributes and semantic functions.398 -Betrieh (plant):i f  ~ an d sort(translat(Y)) =iBetriebi i f  ?#ont \ ] .~ .
a then i 'w '~ '~ and sort(tr nslat/&Betriebthen translat(Betrieb) = \[LAMBDA X.BETR\[BETRIEB translat(Y) translat(PNG)X.BETR\]\]else translat(Betrieb) = \[LAMBDA X.BETR~ \[BETRIEB translat(Y) X.ORT X.BETR\]\]else i f ~ p N  an ~ sort(translat(PNG)) = ORT~Betriebthen translat(Betrieb) = \[LAMBDA X.BETR\[BETRIEB X.INDUSTRIE translat(PNG)X.BETR\]\]else translat(Betrieb) = \[LAMBDA X.BETR\[BETRIEB X.INDUSTRIE X.ORT X.BETR\]\]in: i..._,.f.. N~,pRNAGEp?
inand N ~ y N G  an dY6 {N,NPR} and sort(translat(Y ) )  = ORTthen translat(in) = \[LAMBDA X.ORT\[IN translat(Y) X.ORT\] \]else if N ~ p  and N A y  NO andin sort(translat(Y)) _~ INTthen translat (in) = \[LAMBDA X. INT\[INTEMPtranslat(Y) X.INT\]\]else if ~ andso ranslat (NG)) ~INT&inthen translat(in) = \[LAMBDA X.INT\[INTEMP translat(NG) X.INT\]\]else translat(in) = 0oStuttgart:translat(Stuttgart) = STUTTGARTM:if ~ and Z' 6 {NG,PNG} and~ Z ~ '  ~ N G((z6 {Monat,Jahr} and cat(translat(Y)) = KONSTand sort(translat(Y)) = INT)o r(YE {N,NPR} and cat(translat(Y)) = TERM andcat(translat(Z)) = LTERM andsort(translat(Y)) = sort(translat(Z))))then translat(N) =The else-part here is assumed to be substitutedby the general rule prescribing that whenever aTR-rule does not apply, the translation of thenode will be the translation of one of itsdaughter nodes, e.g.
here we could write:else translat(N) = translat(Z)From the TR-rule for PNG we will only give somepart:PNG :i_~ ~ N G  and cat (translat (N))KONSTthen if ~PNG an d Y6 {DET,QDET,WDET,NEG-PET, ZAHL }and cat (translat (Y)) = QUANTo?then if cat(translat(PRAEP)) = LTERMthen translat(PNG) =\[translat(Y) translat(PRAEP) \]else translat(PNG) =- -  \[translat(Y) translat(N) \]else if cat(translat(?RAEP)) = LTERMthen translat(PNG) =\[\[QUANT EIN\] translat(PRAEP) \]else translat(PNG) =- -  \[\[QUANT EIN\] translat(N)\]As with the rule for N the else-part is omittedhere too.Applying these TR-rules to the section of theparse tree of fig.
2 represented in fig.
3, weget as translation of this section:\[LAMBDA X.BETR\[BETRIEB X.INDUSTRIE\[~AMBDA X.ORT\[IN STUTTGART X.ORT\]\]x. BETR \] \]--399--SBetriebe m Stuttgartplants in StuttgartFigure 3Transformation of the networks into context free_pro duc tiOnsThe first step is to produce sets of productionsby means of the inscriptions of the nodes andedges, the right hand sides of which consist ofat most two symbols.s ?
VERB S/VK I S/VKS /VK?NG S/VK PNG S/VK AUXH S /~ \] ?
S/SS/AA + NG S/AA PNG S/AA HSVK S/VERBS/VERB ?
?
S/SS/S ?PNG + PRAEP NGNG ?
DET NG/DET \[ NDET NG/DET \[ NG/DETDATUMSZAHL NG/NGNG/DET ?
N NG/NG \[ NPR NG/NGNG/NG ?HSVK ?
VERB HSVK/VK \] HSVK/VKHSVK/VK ?
?In the next step the sets of productions arecombined for each network to a single productionthe right hand side of which consists of a regu-lar expression.
The set for PNG is duplicated,omitting PRAEP, to get a separate production forNG.S ?
(VERBle) (NG\]PNG) @(AUxH(NG\[PNG) eHSVK ?
\[ ?
)PNG ?
PRAEP((DET\]WDET\]?)
(N\]NPR) \]DATUMSZAHL)NG ?
(DET\[WDET\[ ?)
(NINPR) I DATUMSZAHLHSVK ?
VERBI ?NOW these productions are transformed step bystep into "disjunctive normal form", where se-quencing (represented by Juxtaposition) corres-ponds to the logical "and", \[ corresponds to thelogical "or".S ?
(VERB\[E) (NGePNG e) e(AUXH(NGePNG e) eHSVK ?
\[ ?
)e e % m eS ?
(VERB e)(NG PNGe) eAUXH(NG PNG ) HSVK ?
I(VERB ?
)(NG PNG ) ?S ?
VERB(NGePNG~)wAUXH(NGePNGe)eHSVK ?
I(NGWPNGe)~AUXH(NGePNGe)eHSVK ?
\]VERB(NG~PNG~)%?
I(NGePNGe)e?PNG ?
P~EP (DET I WDET I ~ ) (N I NPR) IPRAEP DATUMSZAHLPNG ?
PRAEP DET N I PRAEP WDET N I PRAEP N IPRAEP DET NPR \[ Pm~EP WDET NPR IPRAEP NPR \[ PRAEP DATUMSZAHLNG ?
DET N I WDET N I N I BET NPR I WDET NPR INPR I DATUMSZAHLFinally those parts provided with e are removedintroducing new symbols and productions.S ?
VERB NG/PNG AUXH NG/PNG HSVK ?
ING/PNG AUXH NG/PNG HSVK ?
IVERB NG/PNG ?
I NG/PNG ?NG/PNG ?
NG NG/PNG \[ PNG NG/PNGI NGI  PNGI  cIf we form sets of productions out of the wordclasses, we get alogether:S ?
VERB NG/PNG AUXH NG/PNG HSVK ?
ING/PNG AUXH NG/PNG HSVK ?
IVERB NG/PNG ?
\] NG/PNG ?NG/PNG ?
NG NG/PNG \[ PNG NG/PNG \[ NG \[ PNG\[PNG ?
P~EP DET N I P~EP ~ET N I P~EP N \]PRAEP DET NPR \[ P~BP MET NPR IPRAEP NPR I PRAEP DATUMSZAHLNG ?
DET N I WDET N I N I DET NPR I WDET NPR 1NPR \] DATUMSZAHLHSVK + VERB I eAUXH ?
habDET ?
der die I des \[ sin Ie ineN ?
Probe Probenehmer I Jahr I Betrieb IFirma ArsenNPR ?
Stuttgart \[ Zimpel I LauxmannPRAEP ?
in I beiVERB + enthalt I prfif I ziehWDET + welchThe parsing of our question example by means ofthese productions yields the parse tree of fig.4.
The section of this tree corresponding tothat of fig.
3 is represented in fig.
5.Providing the productions with attributesWe will now give a list of attributes and se-mantic functions for the productions and augmentthe productions by them such that the evaluationof the semantic functions yields the translationof the sentence.
We will do this only for thoseproductions needed for the section of fig.
5.--400--welche Betriebewhich plontshathasIPRZimpelZimpelStuttgart in d;s JahrStuttgart in the yearFigure 4NG T NG/PNG/in Stuttgartin StuttgartFigure 5VERB' Ipr~finspect, NG79DATUMSZAHLname+val+tree+tree%posnamecatsortsymbnthvalu~delclasssynthe-sizedsynthe-sizedin-heritedin-heritedAttributesdomainn-tuple of KS-expressions (trans-lations), in general n = 1sets of triples, consisting ofthe position of a symbol in theparse tree, the symbol itself,and the value of the symbolsame as with +treefinite sequences of positive in-tegers, separated by dotsmnemo-technbcate~gorysortsymboln-th(=lastelemenvaluedeleteSemantic functionsargumenttransla-tion ttransla-tion tpositionPpositionPpositionPpositionPuseyields the KS-syntacticcategory of tyields the sort of tyields from %tree thesymbol of the node withposition py ie lds  the last integerof pyields from +tree thevalue of the node withposit ion preplaces in +tree thevalue of the node withposition p by+val is the most important attribute, for itcontains the translation of a node.
The otherattributes are auxil iary attributes.
+tree con-tains in each node a relevant section of theparse tree with all necessary informations aboutthe nodes of that section, namely their labelsand their values.
Already Knuth (\[Kn 68\]) hasgiven a technique for representing the attributevalues of all other nodes at each node of thetree.
We adopt this technique here in a slightlymodif ied way since it offers an elegant way torewrite the conditions of the TR-rules as ex-pressions containing semantic functions andattributes for appropriate productions.
We willi l lustrate how this technique works, using thestructure of fig.
5.
The only information we areinterested in for this example are the labels ofthe nodes.
LetX ?
+ X I X 2 ... X n (n ~ O)be a production, where the X.
(i = l,...,n) areterminal or nonterminal symbols.
If n=O, X isterminal.
Then: o--401--+pos(X i+tree(X ) =-1) = {+p,oS(Xo)'i,.
if X i f  X ?
=# SSo+tree(X ), if X # S o +tree(X.
), i f  X ?
= S1 o\[(+pos (x o),x o)}n+tree (X)  =oU U +tree(Xi), if X ?
# Si=lnU+tree(X ' ) '  if X = S l o i=lWe can easi ly obtain the +pos-value for eachnode of fig.
5 beginning with the NG/PNG-nodewhich is dominated by the S-node and for whichwe assume: +pos(NG/PNG) = k. The +pos-values aregiven in fig.
6.
Using these values, we obtaine.g.+tree(PNG) = ~k.2 .1 ,PNG) ,  (k.2.1.1,PRAEP),(k.2.1.1.l, in), (k.2.1.2,NPR),(k.2.1.2.
l ,Stuttgart)}The +tree-value for NG/PNG (and thus for allother nodes) is+tree(NG/PNG) = {(k,NG/PNG) , (k.i,NG) , (k.l.l,N) ,(k. l .
l .
l ,Betriebe), (k.2,NG/PNG),(k.2.1,PNG), (k.2.1.1,PRAEP),(k.2.1.1.l,in) , (k.2.1.2,NPR),(k-2.1 ?
2. i, Stuttgart)}In order to obta in the values of attr ibutes de-f ined for the product ions it is often necessaryto determine a new posi t ion start ing from agiven one.
For this purpose some of the integersat the end of the posi t ion must be omitted orothers must  be appended.
If the last integer ofthe pos i t ion belonging to symbol X shall beomitted we write="NG ~ NG/PNG ,!,pos =k.1 ~pos=k.2~pos=k4 1 ~ PNG k-2.1Betriebe PR/AEP ~NPRin ~5tuttgart ,I, pos =k.2.1.1.1 Spos=k.2.12'1F igure  6+pos (x) -iIf the last two integers shall  be omitted, wewrite +pos(X\]-2etc.
If an integer, say k, shall be appended jtimes, we write+pos(X)'k jNow we are ready to give the product ions neededfor the structure of fig.
5, provided withattr ibutes and semantic functions.N ?
Betr iebi f  symb(+pos(N)- l )E{NG,PNG} Asymb((+pos(N)-2) .2 .1)=NG ^((symb(%pos(N) .
l )e{Monat, Jahr)} A3j>O: cat(va lue((+pos(N)-2) .2 .
l .
j  )=KONST ^sort (va lue((+pos(N)-2) .2 .1 .
j ) )=INT)  v(3j>O: symb((+pos(N)-2) .2 .
l .
j )E{N,NPR} ^cat (value ( (+pos (N) -2) ?
2.1 .j) ) =TERM ^cat (value ( +pos (N) ?
i ) ) =LTERM Asort (value (+pos (N) ?
1 ) )=sort (value ( (+pos (N) -2) ?
2.1 ?
j))) )then +val(N) =else if sor t (va lue( (+pos(N) - l ) .2 .1) )=INDUSTRIE- -  then if 39>0: symb((+pos(N) - l ) .2 J .
l )=PNGsort(value((+pos(N)- l ) .2 J .
l ) )=ORTthen +val(N) = \[LAMBDA X.BETR\[BETRIEBvalue((+pos(N)- l ) .2.1)value((+pos(N)- l ) .2 J .
l )?.BETR\]\]del((+pos(N)-1) .2.1)del( (+pos(N)- l ) .2 J .
l )else +val(N) = \[LAMBDA X.BETR\[BETRIEBvalue((+pos(N)-1) .2.1)x.oRT X.B~TR\]\]del((+pos(N)- l ) ,2.1)else if 3j>O: symb((+pos(N) - l ) ,2 J , l )=PNGsort(value((+pos(N)- l ) ,2 J , l ) )=ORTthen +val(N) = \[LAMBDA X.BETR\[BETRIEBX.
INDUSTRIEvalue((+pos(N)- l )o2J , l )X.BETR\]Idel( (+pos(N)- l ) ,2\ ] , l )else +val(N) = \[LAMBDA X.BETR\[BETRIEBX.
INDUSTRIE X.ORTX.BETR\]\]+tree(N) = {(+pos(N),N,+val(N)) ,(+pos(Betr ieb) ,Betr ieb,~)}+pos(Betrieb) = +pos(N).lThe f irst part  of the express ion needed to de-termine the value of +val(N) comes from the TR-rule for N, the second part  from the TR-rule forBetr ieb (plant).For the symbol NG there is a TR-rule too.
Weomit it here, because it does not apply to ourexample.
Therefore we deal wi th the product ionNG ?
N in such a way, as if there were no TR-rule for NG.--402--NG ?Ni_~ value (+poe (N)) = ~0then +val (NG) =else +val (NG) = +val (N)+tree(NS) = { (+pos(NG),NG,+vai(NG)) } U +tree(N)+tree(N) = +tree(NG)+poe(N) = +pos(NG) ,iPRAEP ?
inif symb(+pos(PRAEP)- l )  = PNGthen if Hj#nth (4-poe (PRAEP)) :symb((+pos(PRAEP)- l ) .
j  e{N,NPR} Asot t (value ( ( +pos (PRAEP) - 1 ) ?
j ) ) =ORTthen +val (PRAEP) = \[LAMBDA X.ORT\[ INvalue ( (+poe (PRAEP) -i ) ?
j )X.ORT\]\]de i ( ( +pos (PRAEP) - i ) ?
j )else if 3j#nth (+pos (PRAEP)) :sort (value ((+pos (PRAEP) "i ) .j ) )g_ INTthen +val (PRAEP) = \[LAMBDA X. INT\[ INTEMPvalue ( (+poe (PRAEP) -i ) ?
j )x. IN~\] \]del ( (+poe (PRAEP) -i ) .j)else if ~j>O: symb((+po.s(PRAEP)-2)?
23.1) = NGsort (value ( ( +poe (PRAEP)-2).2J.
i)) _~ INTthen +val (PRAEP) = \[LAMBDA X, INT\[INTEMP value ( (+poe (PRAEP)-2) ,2J*l) X. INT\] \]del ((+pos (PRAEP)-2) .23. i)else +val (PRAEP) =else +val (PRAgP) = 0~+tree (PRAEP) = { (+poe (PRAEP) ,PRAEP, +val (PRAEP)) ,(+poe (in) ,in,00) }+poe (in) : +poe (PRAEP) 'INPR ?
Stuttgart+val (NPR) = STUTTGART+tree (NPR) = { (+poe (NPR) ,NPR, +val (NPR)) ,(+poe (Stuttgart) , Stuttgart,  0~) }+poe (Stuttgart) = +poe (NPR) .IPNG ?
PRAEP NPRif ~j>o: symb(+pos(PNG) .j) = Ncat(value(+pos(PNG).
j ) )  ~ KONSTthen if 3i>O: symb (+poe (PNG) ?i) E{DET,QDET,WDET,NEGDET, ZAHL }cat (value (+poe (PNG) ?
i) ) = QUANTthen if cat(+val(PRAEP)) = LTERMthen +val (PNG) = \[value (%poe (PNG) .i)+val (PRAEP) \]del (+poe (PNG) ?
i)del (+poe (PRAEP))else +vai(PNG) = \[value(+pos(PNG).
i)value (+poe (PNG) .j ) \]del (+poe (PNG) .i)del (+poe (PNG) .j)else if cat(+val  (PRAEP)) = LTERMthen +val (PNG) = \[EIN +val (PRAEP) \]del (+poe (PRAEP))else +val (PNG) = \[EIN value (+poe (PNG)"j)\]del (+poe (PNG) .j )else if +val (PRAEP) = ~0then +val (PNG) = +val (NPR)else +val (PNG) = +val (PRAEP)+tree (PNG) = { (+poe (PNG) ,PNG, +val (PNG)) }U +tree(PRAEP) U +tree(NPR)+tree (PRAEP) = +tree (PNG)%tree(NPR) = +tree(PNG)%poe (PRAEP) = +poe (PNG) .i+poe (NPR) = +poe (PNG) .2NG/PNG ?
PNGif value (+poe (PNG)) = ~0then +val (NG/PNG) = 00else +val (NG/PNG) = +val (PNG)+tree(NG/PNO) = {(+pos(NS/PNS) ,NG/PNG,+val (NG/PNG)) } U +tree (PNG)+tree(PNG) = +tree(NG/PNG)+poe (PNG) = +poe (NG/PNG) ?
1NG/PNG 1 ?
NG NG/PNG~if value (+poe (NG)) =then +val (NG/PNG i) = +val (NG/PNG 2)else if value (+poe (NG/PNGs)) = 0~then +val (NG/PNG 1) = +val (NG)else +val (NG/PNG 1) = (+val (NG) ,+val (NG/PNG~))+tree (NG/PNG I ) = {(+poe (NG/PNG 1 ) ,NG/PNG,+val (NG/PNG 1))} U +tree(NG)U +tree (NG/PNG 2)+tree(NG) = +tree(NG/PNG 1)+tree (NG/PNG2) = +tree (NG/PNG I)+pos(NG) = +pos(NG/PNG 1).I+poe (NG/PNGe) = +poe (NG/PNG 1) .2With these product ions we obta in immediately thevalue of the +tree-attr ibute for each node ofthe structure of fig.
5 or 6, when we postponethe evaluat ion of the +val-attr ibute.
The valueis{ (k,NG/PNG, +val (NG/PNG)) , (k*l ,NG, +val (NG)) ,(k.l *i ,N, +val (N)) , (k.l .i .l, Betriebe,00) , (k.2,NG/PNG, +val (NG/PNG)) , (k.2.1 ,PNG, +val (PNG)) ,(k.2.1.1,PRAEP,+Vai(PRAEP)) ,  (k.2.1.1.l , in,~),(k.2?i?2,NPR,+vai(NPR)),  (k.2.l.2.l,Stuttgart,~)}The product ion NPR + Stuttgart  y ields+val (NPR) = STUTTGARTWe can subst i tute this value in %tree or regard"+val (NPR)" as a pointer  to this value.
Now wetry to determine +val (PRAEP) from the product ionPRAEP ?
in.
F irst  we havesymb(+pos(PRAEP)- l )  = symb(k.2.1?l  - i~= svmb(k.2.1) = PNGThat is, the f irst condit ion holds.
Nextnth (+poe (PRAEP)) = itherefore j>l.
Assume j=2.
Thensymb((+pos(PRAEP)- l ) .
j )  = symb((k.2.1.1 - I).2)= symb(k.2.1.2) = NPR--403--Furthersort(value((+pos(PRAEP)-l).2))= sort(value(k.2.1.2)) = sort(STUTTGART)= ORTThe second condition holds too, thus we get+vai(PRAEP) = \[LAMBDA X.ORT\[IN STUTTGART X.ORT\]\]Within the production PNG ?
PRAEP NPR the firstcondition needed to determine +vai(PNG) does nothold, so we get%vai(PNG) = +val(PRAEP)If we assume these values to be substituted in+tree, we now have the intermediate result{(k,NG/PNG,+vai(NG/PNG)), (k*l,NG,+val(NG)),(k.lol,N,+val(N)), (kolol.l,Betriebe,~),(k.2,NG/PNG,+vai(NG/PNG)), (k.2.i,PNG,~LAMBDA X.ORT\[IN STUTTGART X.ORT\]\]), (k.2?l?l,PRAEP, LLAMBDA X.ORT\[IN STUTTGART X.ORT\]\]),(k*2.1.1-l,in,~), (k.2.1?2,NPR,~), (k?2*1.2.i,Stuttgart,e)}It is left to the raeder to compute the finalresult applying the remainding productions.ConclusionWe have il lustrated how an attribute grammar canbe produced from the networks and TR-rules usedwithin PLIDIS, which has the same expressivepower as the underlying networks and rules.
Theadvantages of the ATN-grammars for the parsingof natural language sentences are well known.Above all they are an elegant tool to writegrammars especially suited for linguists.
TheeTR-rules have advantages similar to these.
Surelythey are easier to write than the somewhat cum-bersome expressions for determining attributevalues, particularly those for the ?val-attri-bute.
In the TR-rules, however, attempt is madeto describe and deal with all possible occurren-ces of a symbol.
With the attributed productionstbis is not necessary, since for a single pro-duction some of the cases which stem from thepossible occurrences of one or more symbols canbe omitted a priori.
For example, in the pro-duction PNG + PRAEP NPR the whole first part fordetermining +vai(PNG) can be omitted, becausethe first condition does not hold for this pro-duction.
In a similar way we can omit some partin the production N ?
Betrieb.
Further improve-ments can be made by changing the productionsthemselves, e. g. by partly eliminating thosesymbols which denote word classes.
Performingall possible improvements certainly leads to anattribute grammar which yields translations ofsentences in a rather efficient way.
On thebasis of this grammar we can detect circulari-ties which can occur in the translation processby means of well defined algorithms (cf .
\[Bo76\]).\[Ba 78\]\[BW 78\]\[Bo 76\]\[Dz 7s\]\ [~ 6s \]\ [m 71\]\[KL 79 \]\[Wo 70 \]\[We 73 \]\ [~ 79 \]\[Zi 77 \]ReferencesM.
Bates, The theory and practice ofaugmented transition network grammarsin: L. Bolc (ed.
), Natural languagecommunication with computersSpringer Lecture Notes in ComputerScience, 63, 191-259, Berlin 1978G.L.
Berry-Rogghe/H.
Wulz, An overviewof PLIDIS, a problem solving informationsystem with German as query languagein: L. Bolc (ed.
), Natural languagecommunication with computersSpringer Lecture Notes in ComputerScience, 63, 87-132, Berlin 1978G.V.
Bochmann, Semantic evaluation fromleft to rightin: CACM 19(2), 1976, 55-62W.
Dilger/G.
Zifonun, The predicate cal-culus-language KS as query languagein: H. Gallaire/J.
Minker (eds.
), Logicand data basesPlenum Press New York, 1978, 377-408D.E.
Knuth, Semantics of context-freelanguagesin: Math.
Systems Th.
2, 1968, 127-145and Math.
Systems Th.
5, 1971, 95-96D.E.
Knuth, Examples of formal semanticsin: E. Engeler (ed.
), Symposium on se-mantics of algorithmic languagesSpringer Lecture Notes in Mathematics,188, 212-235, Berlin 1971M.
Kolvenbach/A.
L6tscher/H-D.
Lutz(eds.)
KOnstliche Intelligenz und nat~r-fiche SpracheForschungsberichte des Institute f0rdeutsche Sprache, 42,G.
Narr-Verlag Tfibingen, 1979W.A.
Woods, Transition network grammarsfor natural language analysisin: CACM 13, 1970, 59~-606W.A.
Woods, An experimental parsing sy-stem for transition network grammarsin: R. Rustin (ed.
), Natural languageprocessingAlgorithmic Press New York, 1973, 112-154H.
Wulz, Formalismen einer Ubersetzungs-grammatikForschungsberichte des Institute ffirdeutsche Sprache, 46G.
Narr-Verlag Tfibingen, 1979G.
Zifonun, Die Konstruktsprache KSin: K. Heger/J.
PetSfi (eds.
), Kasus-theorie, Klassifikation, semantischeInterpretationPapiere zur Textl inguistik ii, Hamburg1977--404--
