Mul t i l i ngua l i ty  in a Text  Generat ion  SystemFor Three  Slavic LanguagesGeert-Jan Kruijff a, Elke Teich t', John Bateman ~, Ivana Kruijit;Korbayovfi",Hana Skoumalovg ~,Serge Sharoff 'l, Lena Sokolova d, Tony Hartley ~,Kamenka Staykova/, Ji~'~ Hana"?Charles University, Prague; ~University of the Saarland; ~University of Bremen;aRRIAI, Moscow; ?University of Brighton; /IIT, BAS, Sofiahttp://www.itri.brighton.ac.uk/projects/agile/AbstractThis paper describes a lnultilingual text generationsystem in the domain of CAD/CAM software in--structions tbr Bulgarian, Czech and l:\[ussian.
Start-ing from a language-independent semantic represen-tation, the system drafts natural, continuous textas typically found in software inammls.
The coremodules for strategic and tactical gene,'ation are im-plemented using the KPML platform for linguisticresource development and generation.
Prominentcharacteristics of the approach implemented a.re atreatment of multilinguality that makes maximal useof the cominonalities between languages while alsoaccounting for their differences and a common repre-sentational strategy for both text planning and sen-tence generation.1 In t roduct ionThis paper describes the Agile system I tbr themultilingual generation of instructional texts asfound in soft;ware user-manuals in Bulgarian,Czech and Russian.
The current prototype fo-cuses on the automatic drafting of CAD/CAMsoftware documentation; routine passages asfound in the AutoCAD user-manual have beentaken as target texts.
The application sce-nario of the Agile system is as follows.
First,a user constructs, with the help of a GUI,language-independent task models that spec-ify the contents of the documentation to begenerated.
The user additionally specifies thelanguage (currently Bulgarian, Czech or Rus-sian) and the register of the text to be gen-erated.
The Agile system then produces con-tinuous instructional texts realizing the speci-fied content and conforming to the style of soft-ware user-manuals.
The texts produced are1EU Inco-Copernicus project PL961004: 'AutomaticGeneration of Instructional Texts in the Languages ofEastern Europe'intended to serve as drafts for final revision;this ~drafting' scenario is therefbre analogous tothat first explored within the Drafter project.Within the Agile project, however, we have ex-plored a more thoroughly nmltilingual architec-ture, making substantial use of existing linguis-tic resources and components.The design of the Agile system overall re, stson the following three assumI)tions.First, the input of the system should be spec-ified irrespective of any particular output lan-guage.
This means that the user must be able toexpress the content that she wants the texts toconvey, irrespective of what natural language(s)she masters and in what language(s) the out-put text shouM be realized.
Such language-independent content specification can take theform of some knowledge representation pertain-ing to the application domain.Second, the texts generated as the outtmt ofthe system should be well-formulated with re-spect to the expectations of natiw.
?
speakers ofeach particular language covered by the system.Since differences among languages may appearat any level, language-sensitive d cisions aboutthe realization of the specified content must bepossible throughout he generation process.And third, the notion of multilinguality em-ployed in the system should be recursive, inthe sense that the modules responsible tbr thegeneration should themselves be multilingual.The text generation tasks which are commonto the languages under consideration should bepertbrmed only once.
Ideally, there should beone process of generation yielding output inmultiple languages rather than a sequence ofmonolingual processes.
This view of 'intrin-sic multilinguality' builds on the approach setout in Bateman et al (1999).
Each module ofthe system is fnlly multilingual in that it simul-474taneously enables both integration of linguisticresources, defining commonalities bel;ween lan-guages, and resource integrity, in |;bat the in-dividuality of each of the language-speeitic re-sources of a multilingnM ensemble is always pre-served.We consider these assuml)l;ions an(l the viewof multilinguality entailed by |;hem to be cru-cial for the design of efli;ctive multilingual textgeneration systems.
The results so far a(:hicvedby the Agile system SUl)port this and also ofl'era ~soli(l experiential basis tbr the develot)mcnt offllrther multilingnal generation systems.The overall operation of 1;t1(; Agile sysl;em isas tbllows.
Al/tcr the us(u' has Sl)ecilied someinl;en(led text (;OlltenI; (described in Section 2)via the Agile GUI, the system i)ro(:eeds to gen-eral;e the texts required.
To do this, a textt)lammr (Section 3) first assigns parts of the,task model to text elements and arranges l;h(;min a hierarchical fashion a text t)lan.
Then, asentence plammr organizes I;he content of thetext elements into sentence-sized elml~ks andere~,tes the corresponding input fin' l;he tacti-ca,1 generator, expressed in standard sentencel)lamfing language (SPI,) lbrmulae.
Finally, 1;11(;tactical g(meral;or generates t;he linguistic real-izations corresponding 1;o these Sl)l~s the text(Sect;ion 4).
In the stage of the l)rojccI; rt}l)orte(lhere, we, conceal;rated i)arl;icularly on \])roccdu-ral texts.
These otlhr sl;el)-by-st;e t) des(:rit)t;ionsof how to perlbrm domain tasks using the givensoftware tools.
A simplified version of one suchprocedural text is given (tbr English) in Fig-ure 1.
This architectm:e mirrors the referencearchitecture for generation diseusse(t in I/,eiter8z Dale (1.997).
The modules of the system are1)ipelined so that a continuous text is generatedrealizing the intended meaning of the inlmt se-mantic representation without backtracking orrevision.Several important properties have ('haracter-ized the method of development leading to theAgile system.
These are to a large extent re-sponsible for the eflhetiveness of the system.These include:Re-use  and  adaptat ion  o f  ava i lab le  re-sources .
We have re-used snt)stantial bodicsof e, xisting linguistic resources at all levels rel-evant for the system; this t)laye(l a (:rueial rolein achieving the Sol)histieatcd generation capa-7b d~nw a polylincFirst start the PLINE command using one of these meth-ods:Windows From the Polylinc tlyout on the, l)raw tool~lmr, choose Polylinc.DOS and UNIX  lqom the Draw menu, choose Poly-line.1.. Spccit~y the start point of the polyline.2.
S1)ecil~y tim next point of the 1)olylinc.3.
Press ll,cturn t;o end the polyline.Figure l: Example "To draw a polyline"bilities now displayed by the system in each ofits languages of expertise prior to the projectt\]m'l.
'e were 11o substantial ~mtomatic generationsystenls fi)r any of the languages covered.
Thecore modules for strategic and ta(:ti('al gener-ation were all imt)lemcnted using the Kernel-Penman Multilingual system (KPML: ef Bate-man et al, \]999) a Common l,isp base(t gram-mar development environment, in addition,we adopted the Pemnan Upt)er Model as usedwithin Pemnan/KPMl~ as the basis tbr ourlinguistic semantics; a more rcstri(:ted domainmodel (DM) rclewmt o the CAD/CAM-domainwas &',lined as a st)e('ialization of l;he UM con-(:epts.
The I)M was iuspired by the domainme(tel of the Drafter l)rojet:t, but l)res(ml;s ag(m(',ralizati()n ()f the latter in that it allows foreml)(;d(ling t:asks and illsLrut'|;ions t:o any arlfi-l;rm:y re(:ursive depth (i.e., more complex l;cxt;plans).
Ah'eady existing lexical resom:ces andmorphological modules availabh; to the 1)ro.j(',ctwere re-used tbr Bulgarian, Czech and l~.ussian:the Czech and Bulgarian components were mo(t-ules written in C (e.g., IIaji(: L; Hla(lk~, 1997,tbr Czech) that were interfimed with KPMI, us-ing a standard set of API-methods (of.
Bate-man & Sharoff, 1998).
Finally, because nogrammars uitable for generation in Bulgarian,Czech and l/.ussia,n existed, a grammar tbr En-glish (NIGEL: Mann & Matthiessen, 1985) wasre-used to lmild them; tbr the theoretical basisof this technique see Teich (1995).Combinat ion  o f  two  methods  o f  resourcesdeve lopment .
Two methods  were com-bined to enable us to develop basic general-language grammars and sublanguage grammarsfin: CAD/CAM instructional texts at; |;11(; sametime.
One nmthod is the system-oriented oneaimed at lmildiug a computational resource475with a view of the whole language system: thisis a method strongly supported by the KPMLdevelopment environment.
The other methodis instance-oriented, and is guided by a detailedregister analysis.
The latter method was partic-ularly important given the Agile goal of beingable to generate texts belonging to rather di-verse text types- -  e.g., impersonal vs. personal;procedural, flmetional descriptions, overviewsetc.Cross-linguistic resource-sharing.
A cross-linguistic approach to linguistic specificationsand implementation was taken by maximizingresource sharing, i.e.
taking into account sim-ilarities and differences among the treated lan-guages o that development tasks have been dis-tributed across different languages and re-usedwherever possible.2 Language- independent  ContentSpecif icat ionsThe content constructed by a user via the Ag-ile GUI is specified in terms of Assertion-bozesor A-boxes.
These A-boxes are considered tobe entirely neutral with respect o the languagethat will be used to express the A-box's con-tent.
Thus individual A-boxes can be used forgenerating multiple languages.
A-boxes spec-i(y content by instantiating concepts from ~,heDM or UM, and placing these concepts in rela-tion to one another by means of configurationalconcepts.
The configurational concepts defineadnfissible ways in which content can be struc-tured.
Figure 2 gives the configurational con-cepts distinguished within Agile.Procedure A procedure has three slots:(i) GOAL (obligatory,filled by a USER-AcTION),(ii) METIIODS (optional, filled by a METHOD-LIsT),(iii) SIDE-EPFECT (optional, filled by a USER-EVENT).Method A method has three slots:(i) CONSTRAINT (optionM, filled by an OPERATING-SYSTEM),(ii) PaEeONDITION (optional, filled by a PROCE-DURE),(iii) SUUSTEPS (obligatory, filled by a PI~OCEDUI/E-LIST).Method-List A METIIOD-LIST is a list of h/IETIIOD'S.Procedure-List A PROCEI)URE-LIST is a list ofPROCEDURE:S.Figure 2: Configurational conceptsConfigurational concepts are devoid of actualcontent.
Tile content is provided by inst, antia-tions of concepts that represent various user ac-tions, interface events, and interface modalitiesand functions.
Taken together, these instanti-ations provide the basic propositional contenttbr instructional texts and are taken as inputtbr the text planning process.3 Strategic Generat ion: FromContent  Specif icat ions to SentencePlansTo realize an A-box as a text, we go through suc-cessive stages of text planning, sentence plan-ning, and lexico-grammatical generation (cfalso Reiter & Dale, 1997).
At each stage thereis an increase in sensitivity to, or dependencyon, the target language in which output willbe generated.
Although the text planner itselfis language-independent, the text; plamfing re-sources may (lifter fl'om language to languageas much as is required.
This is exactly analo-gous to the situation we find within the individ-ual language grammars as represented withinKPML: we therefore represent the text planningresources in the same fashion.
For the text typeand languages of concern here, however, w~ria-lion across languages at the text planning stageturned out to be minimal.The organization of an A-box is used to guidethe text planning process.
Itere, we draw a dis-tinction between text structure elements (TSEs)as the elements from which a (task-oriented)text, is built ut), and text templates', which con-dition the way TSEs are to be realized linguis-tically.
We locus on the relation between con-cepts on the one hand, and TSEs on the other.We are specifically interested in the configura-tional concepts that are used to configure thecontent specified in an A-box because we wantto maintain a close connection between how thecontent can be defined in an A-box and howthat content is to be spelled out in text.3.1 Structuring and StylingA text structure element is a predefined com-ponent that needs to be filled by one or morespecific parts of the user's content definition.Using the reader-oriented terminology commonin technical authoring guides, we distinguisha small (recursively defined) set of text TSEs;these are listed in Figure 3.476Task-Docmnent  A TASK-\])OCUMFNT has tWO slots:(i) TASK-TFI'I,E (ol)ligatory),(ii) TASK-INSTI{U(ITIONS (obligatory), being a listof" at least one ~\[NSTRUCTION.Instruction An INSTRUCTION has three slots:(i) TASKS (obligatory), being a list of at least oneTASK~(ii) CONSTRAINT (optional),(iii) Pm,ZCONDITION (optional).Task  A TASK has two slots:(i) INSTRUCTIONS (ol)tional),(ii) SII)I';-EI,'I"I,:C'I' (ol)tional).Figure 3: Text Structure Elements (TSEs)The TSEs are placed in correspondence withthe configurational concet)ts of the DM (cf.
Fig-ure 2); this enat)les us to lmild a text stru('turel;hat folh)ws the structuring of the content in anA-1)ox (cf.
Figure 4).Orthogonal to the notion of text structure l-ement is the notion of text temt)late.
WhereasTSEs capture what needs to be realized, thetext template (:al)tures how that content is to1)e realized.
Thus, a feint)late defines a stylefor expressing the content.
Am we discuss be-low, we define text templates in terms of con-straints on the realization of si)e(:iti(" (in(tivid-ual) TSEs.
D)r examt)le, whereas in Bulgarianand Czech headings (to which the '\]'ASK-TITLEelement corresponds: of.
Figure 4) are usuallyrealized as nominal groups, in the Russian Au-toCAD ulallnal headings are realized as nonii-nile purpose clauses as they are ill English.3.2 Tex~ P lann ing  g~ Sentence  P lann ingThe major component of the text pbmner isfi)rnmd by a systemic network fi)r text struc-turing; this network, called the text structur-ing region, defines an additional level of linguis-tic resources for the level of genre.
This regionconstructs text structures in a way that is verysimilar to the way in which the systemic net-works of the grammars of the tactical genera-|or build up grammatical structures.
In fact,by using KPML to implement his means fortext structuring, the interaction between globallevel text generation (strategic generation) andlexico-grammatical expression (tactical genera-tion) is greatly facilitated.
Moreover, this al)-t)roach has the advantage |;tint constraints onoutput realization can 1)e easily accmnulatedand propagated: for example, the text plan-ner can iml)ose constraints on the output lexico-grammatical realization of particular text t)lanelements, such am the realization of text head-ings by a nominalization ill Czech and Bulgar-|an or by an infinite purpose clause in Rus-sian.
This is one contribution to overcoming thenotorious generation gap prol)leln caused whena text planning module lacks control over theline-grained istinctions that m'e available in agrmmnar.
Ill our case, both text plamfing andsentence planning are integrated into one andthe same system and are distinguished by strat-ification.TASK-TITLE ~-} GOAl, of topmost  PROCEDURETASK-INSTRUCTIONS ~-} METIIODS of PROCEDUI/ESll)E-EIq,'ECT ~ SIDhl-EFFI~CT of PROCEDUII.I\]TASK /-~ GOAL of PROCEI)IHtI,;(-JONSTRA1NT <-} CONSTRAINT of ~41,VI'IIO1)PRECONI)ITION ~ PIH?COND1TION of ~,4ETI1OI)1NSTIIUCTI(IN-TAsKS 1--} SUBSTH)S of a METIIODINST1HJCTION +5 MI,TI'IIODFigure 4: Mapping TSEs and configurationalconcepts defined in the DMFollowing on from the orthogomflity of textt/;mplates and text structure elements, the textstructuring region consists of two parts.
One1)arl; deals wil;h interpreting the A-box in termsof TSEs: traversing l;he network of this part ofthe region produces a text structure for the A-b/lx contbrufing to the definitions above.
Thesecond part of the region imposes constraintson the realization of the TSEs introduced bythe first part.
Divers(; constraints can be ira-posed depending on the user's choice of style,e.g., personal (featuring ppredominantly imper-atives) vs. impersonal (tbaturing indicatives).Tile result of text plmming is a text plan.This can be thought of as a hierarchical struc-ture (built by TSEs) with lilts of A-box contentat; its leaves together with additional constraintsimposed by the text planning process: e.g., thatthe Title segment of the document should not berealized as a full (:lause but; rather as a nominalphrase or a lmrt)osive det)endent clause.
Thetext plan may also include constraints on pre-ferred layout of the docmnent elements: thisilflbrmation is passed on via HTML annotations.The sentence plmmer then takes this text planas intmt, and creates SPL tbrmulae to express477the content identified by the text plan's leaves.The resulting SPLs can also group one or moreleaves together (aggregation) det)ending on de-cisions taken by the text planner concerning dis-course relations.
Furthennore, constraints onrealization that were introduced by the text-planner are also included into the SPLs at thisstage.Of particular interest multilingually is theway concepts may require different kinds of re-alizations ill different languages.
For example,languages need not of course realize conceptsas single words: in Czech the concept Mcn,tgets realized as "menu" but the interface modal-ity Dialogboz is realized as a multiword expres-sion "dialogovd okno" (whose compofients i.e.,an adjective and a nominal head may undergovarious grammatical operations independently).The Agile system sentence plammr handles uchcases by inserting SPL fbrms corresponding tothe literal semantics of the complex expressionsrequired; these are then expressed via the tac-tical generator in the usual way.
The result-ing SPL formulas thus represent the language-specitic semantics of the sentences to be gener-ated.
Otherwise, if a concept maps to a singleword, the sentence planner leaves the fnrtherspecification of how the concept should be re-alized to the lexico-grammar nd its concept-to-word mapI)ings.
More extensive diflb.rencesbetween languages are handled by conditional-izing the text and sentence planner resourcesfltrther according to language.4 Tactical Generat ion:  FromSentence P lans  to SentencesThe tactical generation component hat colt-structs sentences (and other grammatical units)fl'om the SPL tbrmulae specified in the textplan relies on linguistic resources tbr Bulgarian,Czech and Russian.
The necessary grammarsand lexicons have been constrncted employingthe methods described in Section 1.
As ,totedthere, the crucial characteristic of this modelof nmltilingual representation is that it allowstbr the representation f both, commonalities anddifferences between languages, as required tocover the observable ontrastive-linguistic phe-nomena.
This can be applied even among typo-logically rather distant languages.We first illustrate this with respect o someof the contrastive-linguistic t)henomena that arecovered by this model employing exami)les ti'omEnglish, Bulgarian, Czech and Russian.
Wethen show the organization of the lexicons andbriefly describe lexical dloice.4.1 Semantic and grammaticalcross-linguistic variationOne.
of the tenets of our model of cross-linguisticvariation is that languages have a rather highdegree of similarity semantically attd tend todiffer syntactically.
We can thus expect o haveidentical SPL expressions for Bulgarian, Czechand Russian in many cases, although these maybe realized by diverging syntactic structures.However, we also allow for the case in whichthere is no commonality at; this level and eventhe SPL expressions diverge.
2 Example 1 illus-trates the latter case (high semantic divergence,plus grammatical divergence), and example 2the former (semantic ommonality, plus gram-matical divergence).Example 1: English and Russian spa-tial PPs .
The major lexico-grammatical d i fference l)etween English and Russian preposi-tional phrases is that the relation expressed bythe PP is realized by the choice of the prepo-sition in English, whereas in Russian, it; is inaddition realized by case-government.
In theare.a of spatial PPs, the choice of a particularpreI)osition in English corresl)onds to a distinc-tion in the dimensionality of the object that re-alizes the range of the relation expressed by thePP.
For both PPs expressing a location and PPsexpressing movement, English distinguishes be-tween three-dimensional objects (in, into), one-or-two-dimensional objects (on, onto) and zero-dimensional objects (at, to).In Russian, in contrast, zero-or-three dimen-sional objects (preposition: v) are opposedto one-or-two-dimensional objects (preposition:ha).
A fnrther difference between the expres-sion of static location vs. movement is expressedby case selection: na/v+locative case expressesstatic location, v/na+accusative case expressesinovement (entering or reaching an object) andthe preposition k+dative case expresses move-inent towards an object (,lot quite reaching or2This distinguishes our approach fl'om interlingua-based systems, which typically require a common seman-tic (or conceptual) input.478entering it).
In the {-onverse relation, motionaway from an object, s is sele, eted tbr move-ment from within an oh.joel;, and ot fbr move-men| away from the vicinity of an ot).jeet.
Her(;,both prel)ositions govern genitive case.
The di-mensionality of the object is only relevant forthe distinction between v/na and s/ot, 1)ut notfor h. Since the concel)tualizations of spatial re-lations are ditf'erent across \]'3nglish and Russian,the input SPL expressions diverge, as shown inFigure 5); rather than using domain model con-cepts, these SPL ext)ressions restrict hemselvesto Ut)pe, r Model concepts in order to highlightthe cross-linguistic contrast.
This examl)le illus-trates well how it is (}ften ne{:e, ssary t{} 'semanti-{:ize,' eve, nts differently in (tilt'ere|d; languages inorder 1;o achieve the most natural results.
Not;{;that Cze, ch is here very similar to l/nssian.a.
SPL Russian(example:name DO-Textl-Ku:targetform "Pomestite fragment v bufer.
":logicalform(s / dispositive-material-action:lex pomestitj:speech-act-id command:actee (a / object :lex fragment):destination (d / THREE-D-0BJECT:lex bufer)))1}.
SPL Rn: English(example:name D0-Textl-En:targetform "Put the selection on the clipboard.
":iogicalform(s / dispositive-material-action:lex put:speech-act-id command:actee (a / object :lex selection):destination (d / ONE-0R-TW0-D-0BJECT:lex clipboard)))Figure 5: SPI, ext}ressionsExample 2: English, Bulgar ian and Czechheaders in CAD/CAM texts.
Grammaticalullits (1) (4) below show all ex~?tIllt, e of ,:r,,ss-linguistic commonality at the level of sen|anti{:int}ut and divergence at the le, vel of grammar.These units all time|ion as selfsutficient Task-titles tbr the deseril}tions of particular actionsthat can be t)erformed with the given s{}t'tware.
(1) En: T{} draw a polyline(2) BU: qepTaene na IlOJII4MI4IIFIHDrawing- of polylineqNDEFNOMINAL(3) Cz: Kreslenl kf'ivkydrawing-NOMINAL \]ine-GEN(d) \]/,ll: LIwo6I,I Hal)I4COBaTI, IIO,KHJIIIIIHIOin-order draw-INF l)olyline-AcCThere are two major dit  re,,,ces (:,) (4)that need to 1)e accounte, d for: (i) they exhibitdivergent grammatieal  ranks in that (1) and(4) are clauses (uontinite), while (2) and (3) arenomil,al groul,s (nominalizations); and ( i i )theyshow divergent syntact ic realizations: (2)and (3) ditl'er in that in Bulgarian, wlfich doesnot have (:as(',, the relation 1)etween the syntactichead Met)q_'aelte (ch, crtacnc) and the modifier lie-:mamma (polilinia) is (;xt)ressed by a t)re, positionna (ha), whereas in Cze, ch, which has cast, thisrelation is expressed by genitive case, (k?ivky).\])espite these (litferen(:es, only the first diver-gen(:e has any (;onsequen(:{;s for the S\])L ext)res-sions rcquir(;d; I;hc l)asie semantic ommona\]-ity among (1)(4)  is 1)reserve, d. This is shownin Figm:e 6 t)y me, ans of the standard linguis-tic conditionalization 1)rovided 1)y KPML l'or alllevels of linguistic des(:ription.
The COll(tition-alization shows that both the English (1.)
andthe Russian (4) ar(' nontinite clauses while, the\]hdgarian (2) and the Czech (3) are nominM-izations.
These S\])l, ext)ressions also show theuse of (lom~dn ('onc(;1)ts as i)rodu('e(l by the texttfl~mner rathe, r than Ut)lmr model concepts as inthe SPLs in Figure, 5.
(example:name DO-Textl:logicalform(s / DM::draw:en :ru :PROPOSAL-Q & PROPOSAL:bu :cz :EXIST-SPEECHACT-Q & NOSPEECHACT:actee (d / DM::polyline)))Figure 6: Multilingual SPL e, xpression tbr theheader examlflesThe second differen('e is handled by the gener-ation grmmnars internally.
Here, Bulgarian andCzech share the basic tractional-grammaticaldescription of t)ostmotlifie, rs tbr nomilmlizati(ms(Figm:e 7).
The ditl'erence in structure only479shows in syntagmatic realization and is separatefrom the functional description: For Bulgarian,the postmodifier marker Ha (ha: %f') is inserted,and tbr Czech, the nominal group realizing thePostmodifier is attr ibuted genitive ease.
a(gate:name MEDIUM-QUALIFIER:inputs processual-mediated:outputs((i.0 medium-qualifier(:bu :cz preselect Medium nominal-group)(:cz preselect Medium noun-gen-case)(:bu insert Mediumqualifiermarker)(:bu lexify Mediumqualifiermarker na))):region QUALIFICATION)Figure 7: Shared system tbr Bulgarian andCzech4.2 Lexical choice and lexiconsThe lexical items tbr each language are selectedfrom the lexicon via the domain model.
A DMconcept is annotated with one or more lexicalitems from each language.
If there is more thanone item per language, the choice is constrainedby features imposed by the gralnmar.For example the concept DN::draw is anno-tated with two lexical items which are the im-perfective and perfective forms of the verb drawin Czech, Bulgarian and Russian.
If the gram-mar selects imperfective aspect, tim first is cho-sen; if the grammar selects perfective aspect,the second is chosen.
This mechanism is usedalso fbr the choice between a verb and its nom-inalization, among others.
With the help of thelexicon, the inflectional properties collected tbra particular lexical item during generation aretranslated into a format suitable tbr externalmorphological modules, which are then called.The result of the external module, the inflectedtbrm, is passed back to the KPML system andinserted into the grammatical structure.5 Eva luat ion  and Conc lus ionsA first round of evaluation has been carriedout on the Agile prototype.
This directly as-sessed the ability of users to control multilin-3This description is also valid for Russian, which has anominal group structure similar to Czech.
The 13ulgarianone is more like English.gual generation in tile three languages, as wellas the design and robustness of the system eom-1}onents.
Groups of users were given a brieftraining period and then asked to constructA-boxes expressing iven content.
Texts werecross-generated: i.e., the languages were w~riedacross the A-boxes independently of the nativelanguages of the subjects who created them.
Er-rors were then classified and recommendationsfor the next and final Agile prototype collected.The generated texts were then evaluated by ex-pert technical authors.
They were generallyjudged to be of a broadly similar quality tothe texts originating from manuals, and bothkinds of texts received similar criticism.
Themain source of criticism and errors was the de-sign of the GUI which is now being improvedfor the final prototype.
The overall design ofthe system has theretbre shown itself to offer anetfective approach tbr multilingual generation.We are now extending the system to cover abroader ange of text types as well as the furthergrammatical and semantic variation required bythe evaluators as well as by the additional texttypes.Re ferencesBateman, J.
A., Matthiessen, C. M. I. M., & Zeng, L.(1999).
Multilingual natural anguage generationfor multilingual software: a flmctional inguisticapproach.
Applied Artificial hdelligencc, 13(6),607-639.Bateman, J.
A.
& Sharoff, S. (1998).
Mult, ilingualgrammars and multilingual lexicons for nmltilin-gual text; generation.
In Mnltilinguality in the Icz-icon II, ECAI'98 Workshop 13, (pp.
1-8).Hajie, J.
8; Hladk?, B.
(1997).
Probabilistic andrule-based tagger of an inflective language acomparison.
In Proceedings of ANLP'97, (pp.111-118).Mmm, W. C. & Matthiessen, C. M. I. M. (1985).Demonstration of the Nigel text generation com-puter progrmn.
In J. D. Benson 8: W. S.
Greaves(Eds.
), Systemic Perspectives on Discourse, Vol-ume 1 (pp.
50-83).
Ablex.Reiter, E. & Dale, R. (1997).
Building applied natu-ral language generation systems.
Journal of Nat-ural Language Engineering, 3, 57-87.Tcich, E. (1995).
Towards a methodology for theconstruction of multilingual resources tbr multi-lingual text generation.
In Proceedings of the I J-CAI'95 workshop on multilingual generation, (pp.136-148).480
