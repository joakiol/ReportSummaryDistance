A Textua l  p rocessor  to  hand le  AT IS  quer iesDouglas O'ShaughnessyINRS-TelecommunicationsUniversity of Quebec3 Place du CommerceNuns Island, Quebec, Canada H3E 1H6ABSTRACTThis paper describes the initial development of a natural anguagetext processor, as the first step in an INRS dialogue-by-voice system.The eventual system will accept natural, spontaneous speech from usersand produce responses from the databases in the form of syntheticspeech.
This paper reports results in processing the textual versionof ATIS (Air Travel Information System) queries.
The current system(programmed in C) accepts as input the cleaned-up text (SNOR) ver-sion of the spoken queries, and produces the desired Official AirlineGuide (OAG) information as output.
It uses only the words in the in-put text, and not any punctuation marks, on the assumption that suchmarks are difficult to obtain directly from speech input.
Based on thetraining text data, the system correctly interprets a large majority ofthe textual queries.INTRODUCTIONSpeech recognition systems have made significant progressin recent years toward the goal of correctly interpretingcontinuously-spoken utterances.
However, substantial restric-tions are usually imposed upon the speaker, to guarantee success.Typically, one must either pause after each word, restrict one'schoice of words to a small vocabulary, and/or train the systemto adapt to one's voice.
In many systems, it is not feasible toinsist on vocabulary restrictions, nor can the system always betrained ahead of time to a user's voice.
Many applications overthe telephone to serve the general public will be of this lattertype~ Furthermore, most users do not like altering their speak-ing style, and especially not speaking in isolated-word formant.Thus most practical applications of the future will have to bespeaker-independent (i.e., trained ahead of time by other speak-ers), without major restrictions in vocabulary, and be able toaccept normal, spontaneous speech.In particular, one major application is allowing the generalpublic to do transactions directly with computer databases (in-cluding over the telephone).
As an example of this type of interac-tion, we are currently examining a system to permit direct accessfor a user to air travel information.
A user can pose natural ques-tions to the database and receive answers just as a travel agentdoes.
The database is that of the Official Airline Guide (OAG).To simplify the task slightly, we use a subset of the flights in theOAG: only those for airports at nine major US cities (Atlanta,Boston, Baltimore, Denver, Dallas, Oakland, Philadelphia, Pitts-burgh, and San Francisco).
Otherwise, the entire OAG databaseis used.In the future, we will investigate actual voice dialogues be-tween a user and the database, but for now the subject of thisstudy is limited to the analysis of individual queries by users.
Wewish to design an automatic system to correctly respond to theuser with the desired OAG information.
As a first step towardthis goal, the current study is further limited to the analysis oftextual versions of the user's utterances, rather than the speechitself.
Thus we assume perfect operation of an initial speech rec-ognizer, which would accept he spontaneous queries of a user andoutput the word sequence corresponding to the speech.
Such wordsequences can have grammatical mistakes and repeated words, asoften occur in natural speech.
Our textual processor must han-dle such deviations from normal written text that occur withspontaneous speech.
In particular, this means that one cannotrely directly on standard English text processors, which presumegrammatical input text.TEXT PROCESSING FOR OAGQUERIESThe task of natural anguage processing (including deviationsas found in spontaneous speech) is difficult (e.g., witness the dif-ficulty of automatic machine translation of natural languages).However, we have simplified the task here by assuming that theuser is querying the OAG database.
Thus we have a good idea ofthe type of questions that will usually be asked, and of the typ-ical subjects of those questions.
We do not, however, know theformat that any individual user may employ.
Furthermore, achuser is free to use one's own style of speaking and one's own choiceof words.
We staxt out with a vocabulary that includes all thewords (including names) in the OAG database, and extend thatvocabulary to include words discovered uring training sessionswith trial users.
While one could theoretically access a dictionaryof over 100,000 words (as might be found in a large English dic-tionary, augmented by the names found in the OAG database),such an approach is probably inefficient for this OAG application(especially if such a large vocabulary had to be searched in a fullspeech recognition task).
Thus we have chosen to limit ourselvesto a dictionary of about 700 words (with separate ntries for partsof contractions, e.g., 're, 'll).
We also employ a list of 47 commonword suffixes (e.g., -s, -ed); unrecognized words with such endingshave corresponding final letters removed before trying the dictio-nary again.
For example, the word ~cities' is not in the dictionary;so the final -s is removed (and the 'ie' changed to 'y') to locate'city' in the lexicon (the plural nature of the located noun is also116noted).When a word outside this vocabulary is employed, it does notdirectly affect the text analysis.
(From context, we can usuallydetermine the syntactic ategory of such a word, but not its se-mantic content.)
We assume that such words are not critical forthe OAG queries here (empirically this has been generally true; al-though future training data will likely discover some words whichbelong in the vocabulary because their presence affects the queryresponse).A standard parser for English (if one can be said to exist tohandle all of natural English) was not used for this OAG applica-tion for two reasons: 1) a significant number (perhaps 10-15 %)of the sentences are not grammatical (which would cause ordinaryparsers to have errors), and 2) the limited nature of the task doesnot require a full English parser.
In particular, the query systemneeds only to extract certain critical information from the textqueries, and can largely ignore other extraneous information inthe text input.
For example, the most common query in the train-ing data appears to be asking about flights (e.g., the user specifiesdeparture and destination cities, with optional timing constraintsand/or factors dealing with meals and service class, and wishesto receive details about flights that meet these requirements).
Insuch a scenario, the system must determine the identities of thedeparture and destination cities and properly extract other infor-mation relevant o selecting the desired flights from among thehundreds in the database.Extraneous information in such sentences can be in manyforms.
Idioms, for example, are common in spontaneous speech,but contain little information relevant to help the system to givethe correct answer (e.g., "hello," "all right," "excuse me," "thankyou").
One could list all known idioms in the dictionary (to berecognized and ignored when found); however, our approach wasto use a relatively constrained dictionary of 700 words and simplyignore words that were not found in the dictionary.D ISCOVERING THE NATURE OF  THE DES IREDINFORMATIONOne key aspect of the system's task is to identify what type ofinformation the user wants.
For example, does the user indicate adesire for a listing of flights, fares, available meals, stopover cities,explanations, etc.?
Is the user's request in the form of a questionor a statement?
Does the user want a list of information, or a sim-ple yes-or-no answer?
We follow the convention that appears tobe the case in the training examples, in that we give a list of infor-mation in virtually all cases.
The assumption is that, even whenasking a yes/no question, the user will be better informed if hereceives more information than actually requested.
For example,in response to "Are there any flights to Pittsburgh?," instead ofsimply responding "yes," we list the appropriate flights.
When aperson says "Can you show me...?," "Do you know...?," or "Don'tyou have a ...?," he really does not want only a yes-or-no answer.Thus our system identifies the desired information and lists it,rather than giving a yes/no answer.
This also avoids the problemof necessarily determining whether the query is a question or astatement.
Usually this latter fact can be discovered by the ex-istence of a reversal of the initial words in the utterance (for ayes-no question), or the presence of a Wh-word (e.g., what, when,how) at the start.
We cannot simply look at the sentence-finalpunctuation, because the query text has no punctuation marks(only words).We employ heuristics to determine the subject of the request(i.e., the desired information).
Keywords are used to discoverthe subject, and the first such keyword in each query is usuallyassumed to be the one asked about (ensuing keywords are thenassumed to be used to qualify the request).
The major keywordsinclude: flight, fare, time, airport, city, class, code, cost, capacity,distance, reservation, book, ground, date, day, restriction, define,describe, explain, abbreviation.
For example, keywords uch asmean(ing), explain, abbreviation, represent, and stand for signalthat an explanation is desired.In sentences starting with "What is X...?"
or "Show me X...,"the choice of subject arrives early in the sentence and is obvious.In other sentences, the topic can arrive late (e.g., "All right now,can you please show me all the available flights...?").
Sentencesstarting with "Which X..." or "How (long, far, big, much,...)..."also lead to an obvious topic choice.
Those beginning directlywith a noun (e.g., "Cost of...") are interpreted as having an im-plied "Show me the" preceding.
Sentences starting with a prepo-sition, on the other hand, are more difficult to analyze as to topic(e.g., "On the flights to Atlanta are meals served?"
requests mealinformation, not a general flight listing); in such cases, the nounin the prepositional phrase is treated as qualifying information.F ILL ING SLOTS IN  THE QUAL IFY ING INFOR-MAT IONMost tables in the OAG database contain columns of infor-mation organized by type (e.g., codes, flight numbers, companynames, days, classes, etc.
), and each row is an entry relating typ-ically a code (number or letter sequence) to relevant informationdescribing a flight, a fare, an aircraft, etc.
Most requests arefilled by listing information from lines in a table in the database.The subject of the request specifies which table to use.
To selectwhich lines to list, we must extract relevant qualifying informa-tion from the input text (e.g., if 'flights' is the subject, qualifyingdata may be the departure and/or destination cities and may con-cern time of travel).
After the query subject is established earlyin each query sentence, nsuing words form phrases and clausesthat fill slots in the qualifying information.
These ensuing wordsmay form prepositional phrases or relative clauses; no major dis-tinction or classification as to phrase or clause function is neededhere, only identification as to what information is contained inthe phrases and clauses.F l ight  tab leIt is a simple task to identify city names in a textual query,but more difficult to determine whether a city is the departure,stopover, or destination point.
Many requests are straightfor-ward, however (e.g., "...from X to Y...").
Keywords preced-ing a city or airport name usually identify a city's role: de-parture (from, out of, leav(ing), depart(ing)), destination (to,land(ing), arriv(ing)), or stopover (connecting at, stop(ping) at,via, through).
Lacking such keywords (e.g., "the Atlanta Bostonflight"), we assume that the first city is the departing one andthe second is the landing one.
If only one city is named with-out keywords, its role must be gleaned from other parts of thequery text.
(Repeated information is ignored; e.g., "..from Dal-las to Baltimore leaving Dallas..") The keywords above set flagsto look for a matching city (e.g., when "to" is encountered, the117destination flag is set; upon finding an ensuing city name, thatflag is turned off and the destination city slot is filled).
Interven-ing words such as "the airport at" do not affect the flag.
If thesentence nds without a match and the query subject is a city orairport (e.g., "what cities does United fly to?
"), the system willlook under the corresponding column in the flight table.When the user specifies an airline name, it is easily identi-fied, with the possible exception of companies whose names areuttered as a sequence of letters (e.g.
US, TWA).
The latter casecan cause confusion because user requests often contain letter se-quences that refer to other tables or to items other than airlinecompanies.
For example, the user may be spelling out the codename for a column in a table, the code name of an aircraft orairport, or the code for a service class.A i rc ra f t  tab leAs a second table example, the aircraft table is usually ac-cessed via a query about an aircraft model number (e.g., "whatis a 737," "describe a D8S"), but it may also be queried in termsof its column entries (e.g., "what airplane is the fastest," whichplane has the longest range").
Each column is labeled with anoun heading, to which relevant adjectives are associated (e.g.,the weight column is associated in the system to the descriptorsheavy and light), which allows comparative r quests between air-craft.
Where the OAG model number differs from the company'spublic model number (e.g., a DC10 is officially a 'D10'), the sys-tem notes this as a special case.SEQUENCES OF LETTERSA two-letter code followed immediately by a digit sequence istested to be a possible airline name + flight number, by looking forthat entry in the flight table.
A three-letter code invokes a searchof the airport table, for a possible airport code name; a four-letter sequence calls for a possible city code.
A letter sequencecontaining a slash ( ' / ' )  invokes a look at the restriction table.Since the input text is all in capital letters, the distinctionbetween the letter 'A' (as part of a code name) and the article 'a'can lead to ambiguities.
For example, 'WHAT IS A D EIGHTS?'
requests an entry in the aircraft table corresponding to thecode 'D8S.'
However, there conceivably could be a code elsewherein the OAG database of the form 'AD8S.'
The system looks firstto match the longer letter (and digit) sequence; if no match islocated, it strips off the initial 'A' and tries again.Users may utter a code name of two or more letters as a singleword.
Such pronounceable code names are included in the systemdictionary.
Confusions can arise when such words also have othermeanings.
For example, in "WHAT DOES AS MEAN (IN THEAIRLINE TABLE)?," if the user does not specify the airline ta-ble (where "AS" means Alaska Airlines), the system might notunderstand that "AS" is a code (and not a conjunction).
Giventhe frequency of ungrammatical queries in the training data, thisis not unreasonable.
However, the system looks for the subjectof the query when it sees the word "mean(ing)" in the context"what does X mean" or "what is the meaning of (the) X.
"NUMBERSNumbers in the input text can refer to dates, times, prices,groups of people, flight numbers, flight codes, fare codes, aircraftcodes, etc.
The system uses context o correctly interpret digitsequences as numbers.
For example, ordinal numbers (except for'first' - which is often associated with 'first class') are usuallyassociated with dates (similarly for cardinal numbers adjacent toa month name); a number followed by 'a m' or 'pm'  is also easy tointerpret as a time.
Numbers preceded by an article (e.g., 'a 737')are tested to see if they match a model number for an aircraft.More interesting are cases of numbers run together; e.g., "Is thedeparture time for two thirteen four twenty?"
(flight 213 leavingat 4:20?
).The system assumes that numbers are spoken following cer-tain syntactic rules.
In particular, people say times as hour +minutes (e.g., 11:40 is 'eleven forty', and not 'one thousand onehundred forty' or any other possibility).
Digits are converted intoa full number form (e.g., 'sixteen eight twenty' =16820), includingtime of day (e.g., 'seven o'clock' = 700); thus someone using mili-tary time (e.g., 'eighteen hundred hours' = 1800) will be properlyinterpreted.Faced with a number of several digits (e.g., a flight numberor code), people usually pronounce it digit-by-digit.
For 3- or 4-digit numbers, however, the pronunciation is often grouped intodigit pairs (e.g., 'flight twenty three forty two' = 2342).
Lastly,there is the question of interpeting times as AM or PM; whennot explicitly specified, the system assumes flights at reasonablehours (i.e., no departures or landings between 11 pm and 6 am)(e.g., 'twelve o'clock' means 12:00 and not midnight).If a digit sequence is preceded by the words 'flight (code)' or'fare (code),' the identification of the sequence is obvious.
Oth-erwise, a six-digit sequence starting with '1' is assumed to be aflight code, and a seven-digit one starting with '7' to be a farecode.
The sequence 'nineteen inety-X' after a word sequencecontaining a month is interpreted as a year.The preferred times of flights can be specified as: 1) 'afterX' and/or 'before Y,' 2) 'between X and Y,' or 3) 'around Z.
'Alternatively, the user may specify vague times with terms suchas morning, evening, and night.A number between about 80 and 1000 is assumed to be a fareif followed by the word 'dollars,' adjacent o the word(s) 'fare(of),' or even followed by the word 'flight.
'SPECIAL REQUESTSOccasionally, the user wishes to view the desired informationin a specific fashion, e.g., flights ordered by departure time, orfares in order of increasing price.
This is determined by the key-words 'sort(ed)' or '(in) order(ed)' plus 'by X' or 'de/increasingX' (where X is price, weight, etc.
), or 'alphabetically.
'Mathematical operations are sometimes requested: "the dif-ference between fares class Y and F," "the difference in time be-tween Atlanta and Dallas."
The keywords difference, sum, andaverage invoke the corresponding mathematical operations usingvalues extracted from the tables for the coordinated items men-tioned immediately after the keywords (e.g., "the average fare forclasses Y and F ' ) .118COORDINAT IONCoordination in general is a difficult computational linguisticproblem.
The system attempts to group words and phrases onas local as basis as possible.
Thus, the word and (or or) will linkadjacent words to form a single unit if the words are from thesame syntactic lass (e.g., "between Dallas and Baltimore", "faresfor taxis and limousines").
If necessary, larger units are groupednext (e.g., "Delta 402 and United 567"); finally the conjunctionis treated as separating clauses if foUowed by a verb (e.g., "... andlist the...").
A local coordination is verified, if possible, throughthe appearance of a plural classifying word just before or afterthe coordinated units (e.g., "flights thirty four and ninety three,""the Y and F classes").The coordination routine normally links at the most local level(e.g., "flights from Oakland or Dallas to Atlanta" will group thefirst two cities as departure sites).
However, if an inconsistencyarrives immediately afterward (e.g., an attempt o fill a slot al-ready filled), the routine will attempt o link larger units (e.g.,"flights from Boston to Pittsburgh and Dallas to Atlanta" wouldnormally link Pittsburgh and Dallas as destination cities, but the"to Atlanta" words are inconsistent with that interpretation; sothe coordination routine will group the first two cities togetherand the last two cities together, giving two listings as output.The conjunctions and and but invoke a logical 'and' (intersec-tion) when linking separate qualifying information (e.g., "leavingBoston and landing at Atlanta"), whereas or invokes a logical 'or'(union) (e.g., "arriving at or before five o'clock").
On the otherhand, when the words immediately following an and relate to asubject opic (e.g., "show the flights and fares..."), then the topicis augmented to deal with both items (e.g., list both flight andfare information).
Similarly, when the words after an and attemptto fill qualifying information slots already filled, the system pro-duces an output using the information up to the and, and thencontinues further using the new qualifying information (e.g., inthe 4-city example above, flights would be listed first for the firsttwo cities, then for the next two).COMPARISONSome of the queries request a comparison of numbers (e.g.,"list flights under three hundred ollars," "which airline has themost flights").
When a comparison keyword is located (e.g., un-der, more, less, last, earliest, next), the direction of the compar-ison (more vs. less) is noted, and the ensuing noun describes theitem being measured (e.g., cost, number of flights, time of flight,etc.).
In the case of more or less, the noun after the ensuing thanis used for comparison to the subject of the query.WORDS TO IGNOREMany words are effectively ignored during the processing.
Forexample, some and all (as in "show me some/all ...') have norelevance, since the system shows all possibilities in any case.Similarly, expressions such as "please, .... OK," and "I'm sorry"(while useful in a polite, user-friendly interface) are ignored here.Also, some users have a habit of saying letters followed by "asin X" (e.g., "class Q as in queen").
This brings words (e.g.,'queen') into the dialogue that are invariably outside the systemvocabulary.
When the system sees LETTER + "as in", it ignoresthe "as in X"-phrase.Since the system does not attempt o make a complete parsefor the text input, it can handle word repetitions by speakers (asfound with interruptions and hesitation pauses).
While immedi-ate word repetitions are ignored (on the assumption of possiblehesitations), when the repetition is a digit, the full resulting num-ber is first tried in the table look-up.
For example, in "twelvetwelve ninety," the number is assumed to be 121290; if no matchis found in the tables, then the number 1290 is assumed.DISCUSSION OF RESULTSThe system was officially tested on February 6, 1991, with theresults that 54 queries were correctly answered and 94 were not.At the time, the system was not set up to give a "no answer" forcases that it did not feel confident.
The relatively poor perfor-mance can be largely explained by the fact that the system wasprematurely tested, without having been properly debugged.
Asof March 6, most of the bugs had been removed and the systemwas tested again on the same sentence queries, with the resultsthat 110 were answered correctly, with 19 false responses andtwo "no answers."
This second testing was done with the benefitof having examined the test data, to correct the program, bothfrom the point of view of system bugs and inadequate coverage.The majority of the improvement was simply due to eliminatingsystem bugs.
A large majority of the remaining incorrect per-formance can also be readily eliminated with a little more effort.Thus, the approach described in this paper is certainly capable ofhandling queries typical of the ATIS data in the range exceeding90%.We examine now where the revised (debugged) system doeswell and not so well, and point out where the recent improve-ment is due to rule modification (to better cover more types ofqueries, as revealed by certain queries in the February 1991 testset) as opposed to simple system debugging.
Since the systemignores words that it does not recognize, it continues to makea mistake on sentence cj0011sx, where "from Dallas Love Field"is interpreted as simply "from Dallas."
Sentences ci00hlsx andci00clsx (noting December 14th as "121490") are now covered,due to a rule addition permitting dates in pure digit form (thistype of date representation was new in the test data).
Sentencecp00plsx ("..earliest wide-body flight...") is now easily handled,with the addition of a rule testing for the first flight of the day(if "earliest" or "first" appears just before the word "flight"), aswell as the last one (keywords = "last," "latest").Looking at sentences which caused the most problems in theofficial February 1991 results (e.g., those for which at most twoof the eight sites who submitted results were correct), we cansee examples of where our system can correctly handle difficultqueries.
It is our system's ability to ignore irrelevant words andnot require a full parse that allows it to accept syntactic andsemantic structures that have not been seen in the training data.In sentence ci00klsx ("Can you please tell me what time zoneDallas would be on thank you"), both the initial five words andfinal five words are irrelevant to the message and are ignored byour system, which seizes upon the initial, subject keywords timezone and ensuing location name Dallas to produce the correctanswer.
The preposition on at the end of the sentence can causeproblems for parsers that insist on accounting for every word andwhich involve a semantic module (for which a city should not be"on" a time zone).
Similar comments hold for the final preposition119to in sentence cl00wlsx ("Please show all cities that Delta airlinesflies to"), whereas our system sees cities as the subject keywordand Delta as the only other relevant information.In sentence ce00plsx ("How long does it take to drive from theairport to downtown Atlanta"), the subject keyword is how long,does it take to is ignored, drive specifies ground transportation,and the remaining words fill in the to - from slots.
By ignoringdistracting words such as menu and seat (in sentence ch00klsx- "...menu of departures..."; in sentence cl00dlsx - "how manypersons does a 757 seat"), our system avoids mistaking the subjectof some queries.
Similar comments hold for the word major insentence cj00ilsx ("closest major airport to San Francisco").Our system correctly handles even most cases of mentioningof locations outside of the 11 cities of the database (although thecase of "Love Field" above shows its limitations).
In sentencecj0081sx ("...with a stop in Las Vegas"), the system looks for astopover location after the keywords top in; finding words therewhich are not in the dictionary, the system assumes a locationoutside the database.In sentence cp0021sx ("Does American flight 1010 leaving at1303 have any stops enroute"), the initial keyword does cues ayes-no question; flight is not taken as the subject because numberand digits ensue immediately; instead, stops is taken as crucialinformation and the potentially confusing word enroute (whichmay not have appeared in earlier training data) is ignored.
In thestilted sentence cp00flsx ("How many engines does a D 10 equip-ment have"), the subject is identified by the first three words,the letter/number sequence D10 is noted as a model number, andequipment is treated as superfluous data.There are cases of ATIS queries in which a full parser can beuseful, but there are many other cases such as these above wherenot performing a full parse and ignoring superfluous words canaccomplish the task as well with less effort.DIFFERENCES BETWEEN TEXT ANDSPEECH PARSERSIn recent years, there has been considerable work on parsingof general text in the context of natural language analysis \[1\].A parser in a speech recognition context, however, encountersproblems that a text parser does not have \[2\].
For example, indetermining syntactic structure, a text parser has access to punc-tuation (e.g., quotation marks, parentheses), capitalization, andother phrase-offsetting devices (e.g., italics, underlining).
Majorpunctuation marks (periods, exclamation and question marks)denote the ends of sentences, and others (colons and semicolons)mark the ends of major clauses; a text parser can thus easily de-termine major syntax boundaries and need only operate on setsof words between such markers to parse each set into a logicalclause or sentence.
For a speech parser, on the other hand, grosssegmentation cues may take the (unreliable) form of pauses (e.g.,speakers often pause at major syntactic boundaries - but not con-sistently - and hesitation pauses can cause significant difficulties).Swings in vocal fundamental frequency which are often correlatedwith syntactic boundaries \[3\] also furnish (at best) unreliable in-dicators for a parser to use.
In text, the appearance of capitalletters (except, of course, at the start of a sentence) indicates aproper name (and thus usually a noun); such a fact can help a textparser distinguish such words which may alternatively (withoutcapitalization) be used as other parts-of-speech.
A speech parserhas no access to such information found readily in texts.In the context of data entry via voice, one could envision re-quiring a user to pronounce aloud markers uch as capitalizationand punctuation.
However, this forces a departure from natu-ral speaking style (and slows the rate of data entry) and so isnot preferred in most applications.
In the application exploredin this paper - an isolated-word system - only the actual wordswere pronounced (as in speaking naturally, except of course forthe brief pause required after each word).
In isolated-word sys-tems, no durational information (i.e., from pauses or from wordlengths), however unreliable, can be exploited to determine thesyntactic function of individual words.ACKNOWLEDGMENTSThis work was supported by the Networks of Centers of Ex-cellence program of the Canadian government.REFERENCES\[1\] Dowty, Kattunen, & Zwicky, eds.
Natural Language Parsing (Cam-bridge University Press, Cambridge, UK), 1985.\[2\] Bates, M. "The Use of Syntax in a Speech Understanding System,"IEEE Transactions ASSP, vol.
ASSP-23:lI2-117, 1975.\[3\] O'Shaughnessy, D. "Linguistic Features in Fundamental FrequencyPatterns," Journal of Phonetics, vol.
7:119-145, 1979.120
