A Dialog Control  A lgor i thm and Its PerformanceRonn ie  W.  Smi th*Dept.
of Computer  ScienceDuke Universt iyDurham,  NC 27706rws@cs.duke.eduD.
Richard  H ippDept.
of Computer  ScienceDuke Universt iyDurham,  NC 27706drh@cs.duke.eduA lan  W.  B ie rmannDept.
of Computer  ScienceDuke Universt iyDurham,  NC 27706awb@cs.duke.eduAbst rac tA pragmatic architecture for voice dialog ma-chines aimed at the equipment repair problemhas been implemented which exhibits a num-ber of behaviors required for efficient human-machine dialog.
These behaviors include:(1) problem solving to achieve a targetgoal,(2) the ability to carry out subdialogs toachieve appropriate subgoals and topass control arbitrarily from one sub-dialog to another,(3) the use of a user model to enable use-ful verbal exchanges and to inhibit un-necessary ones,(4) the ability to change initiative fromstrongly computer controlled tostrongly user controlled or somewherein between, and(5) the ability to use context dependentexpectations to correct speech recog-nition and track user movement onew subdialogs.A description of the implemented dialog controlalgorithm is given; an example shows the fun-damental mechanisms for achieving the listedbehaviors.
The system implementation is de-scribed, and results from its performance in 141problem solving sessions are given.1 A Vo ice - In teract ive  D ia log  Mach ineA limited vocabulary voice dialog system designed to aida user in the repair of electronic ircuits has been con-structed in our laboratory.
The system contains a modelof the device to be repaired, debugging and repair proce-dures, voice recognition and sentence processing mech-anisms, a user model, language generation capabilities,and a dialog control system which orchestrates the be-haviors of the various parts.
This paper describes the*This research was supported by National Science Foun-dation Grant Number NSF-IRI-88-03802 and by DukeUniversity.dialog control algorithm and the performance of the to-tal system in aiding a series of subjects in the repair ofan electronic ircuit.2 Target  Behav iorsThe purpose of the dialog control algorithm is to directthe activities of the many parts of the system to obtainefficient human-machine dialog.
Specifically, it is aimedat achieving the following behaviors.Convergence to a goal.
Efficient dialog requires thateach participant understand the purpose of the interac-tion and have the necessary prerequisites to cooperatein its achievement.
This is the intentional structure of\[Grosz and Sidner, 1986\], the goal-oriented mechanismthat gives direction to the interaction.
The primary re-quired facilities are a problem solver that can deducethe necessary action sequences and a set of subsystemscapable of carrying out those sequences.Subdialogs and effective movement between them.
Ef-ficient human dialog is usually segmented into utter-ance sequences, ubdialogs, that are individually aimedat achieving relevant subgoals (\[Grosz, 1978\], \[Linde andGoguen, 1978\], \[Polanyi and Scha, 1983\], and \[Reichman,1985\]).
These are called "segments" by \[Grosz and Sid-ner, 1986J and constitute the linguistic structure definedin their paper.
The global goal is approached by a seriesof attempts at subgoals each of which involves a set ofinteractions, the subdialogs.An aggressive strategy for global success is to choosethe most likely subgoals needed for success and carry outtheir associated subdialogs.
As the system proceeds ona given subdialog, it should always be ready to abruptlydrop it if some other subdialog suddenly seems more ap-propriate.
This leads to the fragmented style that socommonly appears in efficient human communication.A subdialog is opened which leads to another, then an-other, then a jump to a previously opened subdialog,and so forth, in an unpredictable order until the neces-sary subgoals have been solved for an overall success.Accounting for user knowledge and abilities.
Cooper-ative problem solving involves maintaining a dynamicprofile of user knowledge, termed a user model.
Thisconcept is described for example in \[Kobsa nd Wahlster,1988\] and \[Kobsa nd Wahlster, 1989\], \[Chin, 1989\], \[Co-hen and Jones, 1989\], \[Finin, 1989\], \[Lehman and Car-bonell, 1989\], \[Morik, 1989\], and \[Paris, 1988\].
The user9model specifies information eeded for efficient interac-tion with the conversational partner.
Its purpose is toindicate what needs to be said to the user to enable theuser to function effectively.
It also indicates what shouldbe omitted because of existing user knowledge.Because considerable information is exchanged uringthe dialog, the user model changes continuously.
Men-tioned facts are stored in the model as known to theuser and are not repeated.
Previously unmentioned in-formation may be assumed to be unknown and may beexplained as needed.
Questions from the user may indi-cate lack of knowledge and result in the removal of itemsfrom the user model.Change of initiative.
A real possibility in a coopera-tive interaction is that the user's problem solving ability,either on a given subgoal or on the global task, may ex-ceed that of the machine.
When this occurs, an efficientinteraction requires that the machine yield control sothat the more competent partner can lead the way tothe fastest possible solution.
Thus, the machine must beable to carry out its own problem solving process and di-rect the actions to task completion or yield to the user'scontrol and respond cooperatively to his or her requests.This is a mixed-initiative dialog as studied by \[Kitanoand Van Ess-Dykema, 1991\], \[Novick, 1988\], \[Whittakerand Stenton, 1988\], and \[Walker and Whittaker, 1990\].As a pragmatic issue, we have found that at least fourinitiative modes are useful:(1) directive - The computer has complete dialogcontrol.
It recommends a subgoal for comple-tion and will use whatever dialog is necessaryto obtain the needed item of knowledge relatedto the subgoal.
(2) suggestive - The computer still has dialog con-trol, but not as strongly.
The computer willmake suggestions about the subgoal to performnext, but it is also willing to change the di-rection of the dialog according to stated userpreferences.
(3) declarative - The user has dialog control, butthe computer is free to mention relevant,though not required, facts as a response to theuser's statements.
(4) passive - The user has complete dialog control.The computer esponds directly to user ques-tions and passively acknowledges user state-ments without recommending a subgoal as thenext course of action.Expectation of user input.
Since all interactions occurin the context of a current subdialog, the user's inputis far more predictable than would be indicated by ageneral grammar for English.
In fact, the current subdi-alog specifies the focus of the interaction, the set of allobjects and actions that are locally appropriate.
This isthe attentional structure described by \[Grosz and Sidner,1986\] and its most important function in our system isto predict the meaning structures the user is likely tocommunicate in a response.
For illustration, the open-ing of a chassis cover plate will often evoke commentsabout the objects behind the cover; the measurement ofa voltage is likely to include references to a voltmeter,leads, voltage range, and the locations of measurementpoints.The subdialog structure thus provides a set of ex-pected utterances at each point in the conversation andthese have two important roles:(1) The expected utterances provide strong guid-ance for the speech recognition system so thaterror correction can be maximized.
Whereambiguity arises, recognition can be biasedin the direction of meaningful statements inthe current context.
Earlier researchers whohave investigated this insight are \[Erman etal., 1980\], \[Walker, 1978\], \[Fink and Biermann,1986\], \[Mudler and Paulus, 1988\], \[Carbonelland Pierrel, 1988\], \[Young et al, 1989\], and\[Young and Proctor, 1989\].
(2) The expected utterances from subdialogs otherthan the current one can be used to indicatethat one of those others is being invoked.
Thus,expectations are one of the primary mecha-nisms needed for tracking the conversation asit jumps from subdialog to subdialog.
This isknown elsewhere as the plan recognition prob-lem and it has received much attention in re-cent years.
See, for example, \[Allen, 1983\], \[Lit-man and Allen, 1987\], \[Pollack, 1986\], and \[Car-berry, 1990\].Systems capable of all of the above behaviors are rareas has been observed by \[Allen et al, 1989\]: "no oneknows how to fit all of the pieces together."
One of thecontributions of the current work is to present an archi-tecture that can provide them all in the limited domairof electric circuit repair.
\[Allen et al, 1989\] describetheir own architecture which concentrates on represen-tations for subdialog mechanisms and their interactiom,with sentence level processing.
Our work differs fro~theirs on many dimensions including our emphasis oRachieving mixed-initiative, real time, voice interactiv~dialog which utilizes a user model.3 The  Zero  Leve l  Mode lThe system implemented in our laboratory (describedin great detail in \[Smith, 1991\]) achieves the above b?~haviors ufficiently to enable efficient human-machine di.alogs in the electric ircuit repair environment.
The com.plexity of the system prevents its complete descriptiorhere.
However, a zero level model has been devised folpedagogical purposes which illustrates its principles o:operation.
This model mimicks the mechanism of th~dialog machine while omitting the huge array of detail.,necessary to make a real system work.
A later sectiotin this paper describes the actual implementation an?some of its major modules.The zero level model is the recursive subroutine ZmodSubdialog shown in figure 1.
This routine is entered witla single argument, a goal to be proven, and its actiontare to carry out a Prolog-style proof of the goal.
A sid~effect of the proof may be a resort to voice interaction~with the user to supply necessary missing axioms, h10Recursive suh~ialog routine (enter with a goal to prove)ZmodSubdialog(Goal)Create sul~ialog data structuresWhile there are rules available which may achieve GoalGrab next available rule R from knowledge; unify with GoalIf R trivially satisfies Goal, return with successIf R is vocalize(X) thenExecute verbal output X (mode)Record expectationReceive response (mode)Record implicit and explicit meanings for responseTransfer control depending on which expected response was receivedSuccessful response: Return with successNegative response: No actionConfused response: Modify rule for clarification; prioritize rule for executionInterrupt: Match response to expected response of another subdialog;go to that subdialog (mode)If R is a general rule thenStore its antecedentsWhile there are more antecedents to process DoGrab the next one and enter ZmodSuh~ialog with itIf the ZmodSubdialog exits with failure then terminate processing on rule RIf all antecedents of R succeed, return wit h successNOTE: SUCCESSFUL COMPLETION OF THIS ROUTINE DOES NOT NECESSARILY MEAN TRANSFER OF CONTROLTO THE CALLING ROUTINE.
CONTROL PASSES TO THE SUBDIALOGUE SELECTED BY THE DIALOG CONTROLLER.Figure 1: Zero Level Modelfact, the only voice interactions the system undertakesare those called for by the theorem proving machinery.The ZmodSubdialog routine has a unique capabil-ity needed for proper modeling of subdialog behaviors.Specifically, its actions may be suspended at any timeso that control may be passed to another subdialog,another instantiation of ZmodSubdialog that is aimedat achieving another goal.
However, control may at alater time return to the current instantiation to continueits execution.
In fact, a typical computation involvesa set of ZmodSubdialog instantiations all advanced tosome point in the proofs of their respective goals; con-trol passes back and forth between them looking for themost likely chances of success until, finally, enough goalsare proven to complete the global proof.The algorithm becomes understandable if an exampleis followed through in full detail.
Assume that the fol-lowing database of Prolog-like rules are contained in thesystem knowledge base.General Debugging Rulesset(knob,Y) <-- find(knob), adjust(knob,Y)General Dialog RulesY <-- usercan(Y), vocalize(Y)vocalize(X)User Model Rulesfind(knob)usercan(adjust (knob,X))Further assume that ZmodSubdialog is entered withargument Goal = set(knob,10).
Then in Prolog fashion,the routine grabs the rule R:set(knob,Y) ~-- find(knob),adjust(knob,Y),and attempts to prove set(knob,10).
The algorithm of-fers three choices depending on whether R is trivial (asingle predicate which is not vocalize(X)), tt is vocal-ize(X), or R is a rule with antecedents a is the case here.Thus, in this case the third alternative is followed, andthe two antecedents are queued for sequential execution(find(knob) and adjust(knob,10)).
Then the first an-tecedent is selected and ZmodSubdialog is entered withargument Goal = find(knob).The new subdialog to achieve find(knob) is short, how-ever, since the user model indicates the user alreadyknows how to find the knob because find(knob) ex-ists as an available rule.
In fact, ZmodSubdialog findsfind(knob) in the rule base, enters the first choice (triv-ial) and returns with success.
If find(knob) had not beenfound in the user model, the system might have engagedin dialog to achieve this goal.
The subdialog controlmechanism is not obligated to pass control back to thecalling routine, but in this example we will assume thatit does.Satisfactory proof of find(knob) means that the nextantecedent at this level, adjust(knob,10), can be at-tempted, and ZmodSubdialog is entered with this goal.Here, our model selects R = Y ~-- usercan(Y), vocal-ize(Y), unifying Y with adjust(knob,lO).
Then a deepercall to ZmodSubdialog finds usercan(adjust(knob,X)) in11the user model which means control passes to the an-tecedent vocalize(adjust(knob,10)).
This yields anotherentry to ZmodSubdialog and a selection of the secondbranch.
Here the system executes a voice output tosatisfy vocalize(adjust(knob,10)): "Set the knob to onezero.
"The handling of the goal find(knob) illustrates howthe user model can act to satisfy the theorem provingprocess and prevent he enunciation of unneeded infor-mation.
As the theorem proving process proceeds, thefact that a user knows something is represented in theknowledge base as an achieved goal.
Theorem provingwill encounter this and proceed without voice interac-tion.
In the example, the model already indicates thatthe user knows how to find the knob so no voice interac-tion is needed for this goal.The handling of the goal adjust(knob,10) illustrateshow the user model supports the theorem proving pro-cess by enabling voice dialog when it is needed.
Thisgoal could not be proven by application of rules availablein the database and the proof was blocked from furtherprogress.
In our terminology, there was a "missing ax-iom" for the proof.
So the system must either give up onthis proof or try to fill in the missing axiom by resortingto voice dialog.
In the current case, voice dialog was en-abled by the user model fact usercan(adjust(knob,X)).This fact opens the way for a query to the user.
If thequery is positively answered, then the missing axiom ismade available.The role of the user model is thus to supply or fail tosupply axioms at the bottom of the proof tree.
It bothinhibits extraneous verbalism and enables interactionsnecessary to prove the theorem.Returning to the example computation of ZmodSub-dialog, a voice output has just been given, and the sys-tem then records, for this output, the set of expectedresp  oases :user (adjust (knob, I0) )assertion(knob,position, I0)trivialrssponse (affirmation)trivialresponse (negat ire)query(location(knob) )query (color (knob))Expected responses are compiled from the domainknowledge base and from the dialog controller knowl-edge base.The user's response is then matched (unified) againstthe expected meanings and subsequent actions dependon which meaning fits best.
Four different ypes of ac-tions may occur at this point.
(1) The user might respond with some paraphraseof "I set the knob to one zero," or "Okay",which would be interpreted as successful re-sponses.
The routine ZmodSubdialog would re-turn with success.
(2) The user might also answer "No" yielding afailure and another cycle around the theoremproving loop looking for an applicable rule.
(3) The user might respond with "What color isthe knob?"
indicating, there may be a chancefor a success here if there is further dialog.In fact, our system handles such a need forclarification by dynamically modifying the ruleand reexecuting with a newly required clarifi-cation subdialog.
Here the rule set(knob,10)find(knob), adjust(knob,10) becomes mod-ified to set(knob,10) ~-- find(knob), vocal-ize(knob,white), adjust(knob,10).
Reexecutionwill then yield an explanation of the knob colorfollowed by the previous request reenunciated:"Set the knob to one zero.
"(4) The user might respond with an utterance thatmatches no local expectation.
Here the sys-tem examines expectations of other subdialogsand searches for an acceptable match.
If oneis found, control will pass to that subdialog.For example, if the response is, "The LED isflashing seven," and if this is an appropriateresponse in some other subdialog, control willpass to it.The control of initiative in ZmodSubdialog is handledby special processing at the steps marked "mode."
Thus,in strongly directive mode, verbal outputs will be verypositively stated, responses will be expected to be obedi-ent, and interrupts to other subdialogs will be restricted.In less demanding modes, outputs will be weaker ormerely suggestive, a wider range of responses will be al-lowed, and transitions to other subdialogs will be morefreely permitted.
In the most passive mode, there arefew outputs except answers to questions, and an inter-rupt to any subdialog is acceptable.A very important part of the dialog system is the do-main processor, the application dependent portion ofthe system.
It receives all information related to thecurrent problem and suggests debugging steps to carrythe process further.
We model calls to this processorwith the rule: debug(X)  ~-- (debuggingstep(X))* .
Thisrule is called upon to debug device X with the predi-cate debug(X) and its effect is to specify a sequence otdebugging steps which will be specified dynamically asthe problem unfolds and which will lead to repair of thedevice.4 The  Implementat ion4.1 An Integrated ArchitectureThe implemented system is based on a computationalmodel for dialog processing presented in \[Smith, 1991\].The model is applicable to the general class of task-oriented ialogs, dialogs where the computer is assistin~the user in completing a task as the dialog ensues.
Thederived implementation consists of the following mod-ules:dialog controller - This is the supervisor of thedialog processing system.
It provides the sub-dialog processing highlighted in the zero levelmodel.
In addition, it provides the complex al-gorithm required to properly handle arbitraryclarification subdialogs and interrupts as wellas provide the dialog expectations needed to12assist with input interpretation.
It also main-tains all dialog information shared by the othermodules and controls their activation.domain processor- As previously mentioned,it provides uggestions about debugging stepsto pursue.
In our system the domain proces-sor assists users in circuit repair.
It receivesuser-supplied domain information from the di-alog controller and returns suggested ebug-ging subgoals to the controller for considera-tion.
The subgoal selection process weighs thelevel of expected usefulness of a subgoal withthe number of times the subgoal has been previ-ously selected.
Consequently, the module mayrecommend challenging previously reported in-formation if no noticeable progress in the taskis being made.
In this manner, the module andsystem can recover from erroneous inputs.
Ifthe dialog system is to be used to repair otherdevices, this is the module that needs to be re-placed.knowledge This is the repository of in-formation about task-oriented dialogs includ-ing: (1) rules for proving completion of goals;(2) user model information including a set ofrules for inferring user model information fromuser input; (3) rules for determining when aclarification subdialog should be initiated; and(4) rules for defining the expectations for theuser's response as a function of the type of goalbeing attempted.
Note that the predefined in-formation of this module is easily modified with-out requiring changes to the dialog controller.theorem prover - This provides the general rea-soning capability of the system.
In order toallow the dialog controller to control the poten-tially arbitrary movement among subdialogs,the theorem prover has been made interruptibleand put under the supervision of the dialog con-troller.
Consequently, the theorem prover canmaintain a set of partially completed proofs,and can activate different proofs as instructedby the dialog controller.
It can also dynami-cally modify the proof structure, a key featurefor handling clarification subdialogs.
Foremost,the theorem prover is able to suspend itselfwhen it encounters a missing axiom, permit-ting natural anguage interaction to assist inaxiom acquisition.
This contrasts with tradi-tional theorem proving approaches (e.g.
Pro-log) which simply engage in backtracking whena missing axiom is encountered.linguistic interface - This consists of the gen-eration and recognition modules.
They use in-formation on context and expectation as pro-vided by the dialog controller.
The linguisticgenerator was developed by Robin Gambill.
Ituses a rule-driven approach that takes as inputan utterance specification which encapsulatesthe desired meaning and produces as output anEnglish string that is sent to a text-to-speechconverter for enunciation.
Various approachesto generation have been described in \[Danlos,1987\], \[Hovy, 1988\], \[Jacobs, 1987\], \[McKeown,1985\], and \[Patten, 1988\].
The recognitionmodule was designed to be able to recover fromungrammatical inputs.
It will be described ingreater detail below.4.2 M in imum distance parsingA challenging design problem in any natural anguagesystem is the development of a parser which will trans-late the lattice of words output by the speech recognizerinto a phrase of some synthetic language (Prolog in ourinstance) which encapsulates the meaning of what wasoriginally spoken.
The design difficulty is exacerbatedby the fact that due to speech recognition errors, theword lattice output by the speech recognizer is proba-bly different from what the user spoke, and the fact thatusers will sometimes speak with a word order or sen-tence construction which the designers of the parser'sgrammar did not forsee.
(These, and other problemsassociated with robust parsing of speech are further de-scribed in \[Eastman and McLean, 1981\], \[Hayes et aL,1986\], and \[Young et al, 1989\].)
In our system, pars-ing is accomplished using a minimum-distance parsingalgorithm, similar to algorithms described in \[Aho andPeterson, 1972\], \[Lyon, 1974\], and \[Levinson, 1985\], butextended to accept a lattice as input, instead of a simpleword list, and also extended to simultaneously performsyntax-directed translation \[Aho and Ullman, 1969\] intothe target language.
Minimum-distance parsing findsstrings in a given context-free language which can beconverted to a string of the input lattice with a mini-mum number of weighted insertions and deletions.
Whentwo or more strings are equidistant from the input, dia-log expectation is used to break the tie.
The minimum-distance parsing algorithm isvery robust - it always findsat least one parse - but it is also computationally expen-sive.
Our algorithm is faster than previously reportedparsing algorithms of the same generality, but it still re-quired careful hand-crafting and optimization on a fastmachine in order to provide real-time response.
It shouldalso be noted that our recognition system is capable ofselective verification of meaning.
This is highlighted inthe following sample dialogs.5 Sample  D ia logsFigure 2 shows two dialogs obtained from actual usageof the system.
These dialogs can be seen in \[Hipp andSmith, 1991\] that is part of the video presentation ofthe conference.
The words in parentheses found besidecertain user statements are the words actually providedby the speech recognizer.
Where the discrepancy be-tween the output of the speech recognizer and the wordsproduced by the user is insignificant, hey have beenomitted.The first dialog is an entire dialog conducted in declar-ative mode.
Particular points to notice from this user-controlled ialog are:13Dialog 1 - Declarative Mode (C denotes the computer, U the user, and R the recognizer)1.
C:2.
U:3.
C:4 U:S C:678910.
U:11.
C:This is the circuit fix it shop.
Hoe may I help you?I want to fix this rs111.I am famil iar with that circuit.
The LED is supposed to be displaying alternatelyf lashing one and seven.The LED is displaying an alternately f lashing one and the top corner of a seven.There is supposed to be a wire between connector nine nine and connector one zero zero.U: It is there.C: There is supposed to be a wire between connector nine nine and connector one zero two.U: There is no wire on connector one zero four.
(R: stays know wire i connector one zero for)C: There is supposed to be a wire between connector one zero four and connector one zero two.\[User adds wire and verif ies the circuit is repaired, a three step process.\]The circuit is working.Glad to have been of assistance.
Good-bye.Dialog 2 - Directive Mode excerpt (begins just after computer describes what circuit does)8.
U:9.
C:I0: U:11.
C:12.
U:13.
C:14.
U:15.
C:16.
U:17 C:18 U:19 C:20 U:21 C:22 U:23 C:The LED is displaying nothing.What is the switch at when the LED is off?The switch is down.Put the switch up.Done.Put the knob to one zero.Which knob7Near the top boundary and in the center is a green region.right of this green region is the control knob.The knob is at one zero.What is the LED displaying?The LED is displaying a one and seven at the same time.Put the knob to zero.Done.What is the LED displaying?The same thing.
(R: the same same)Did you mean to say the LED is displaying the same thing?Now, in  the  midd le24.
U :  Yes.\[Eventually, a missing wire is detected and added, and the computer explicit ly guidesthe user through the verif ication process.
The entire dialog lasts 51 utterances.\]Figure 2: Sample Dialogs(1) Successful processing of anaphoric reference atutterance 6.
(2) Successful shifts to user-initiated subdialogs atutterances 8 and 10.
(3) Successful recovery from speech recognition er-rors at utterance 8.The second dialog is an excerpt from a dialog con-ducted in directive mode (strongly computer-controlleddialog).
The total dialog lasted 51 utterances in contrastto the 11 utterance declarative mode dialog.
Particularpoints to notice from this excerpt include:(1) Computer esponses which are more directedand forceful in content han in dialog 1.
(2) Successful handling of a clarification subdialog(utterances 13-16).
(3) Successful verification of the implicit meaningof a user utterance in the presence of speechrecognition errors in utterance 22.
In contrastwith utterance 8 of diMog 1, the system decidedan explicit verification subdialog was requiredto ascertain the meaning of the user's utter-ante.6 Experimental ResultsThe system has been implemented on a Sun 4 worksta-tion with the majority of the code written in QuintusProlog 1, and the parser in C. Speech recognition is per-formed by a Verbex 6000 running on an IBM PC andspeech production is performed by a DECtalk 2 DTCO1text-to-speech converter.
The users are restricted to a125 word vocabulary in the connected speech system.1Quintus Prolog is a trademark of Quintus Computer Sys-tems, Incorporated2DECtalk is a trademark of Digital EquipmentCorporation.14The implemented domain processor has been loaded witha model for a particular experimental circuit assembledon a Radio Shack 160-in-One Electronic Project Kit.After testing system prototypes with a few volunteers,eight subjects used the system during the formal exper-imental phase.
After a warmup session where the sub-ject trained on the speech recognizer and practiced us-ing the system, each subject participated in two sessionswhere up to ten problems were attempted.
The systemran in declarative mode (user-controlled dialogs) duringone session and in directive mode (strongly computer-controlled dialog) in the other session.
Subjects at-tempted a total of 141 dialogs of which 118 or 84% werecompleted successfully.
3 Subjects poke a total of 2840user utterances, with 81.5% correctly interpreted by thesystem although only 50.0% were correctly recognizedword for word by the speech recognizer.
The averagespeech rate was 2.8 sentences per minute, and the aver-age task completion times for successful dialogs were 4.5and 8.5 minutes, respectively, for declarative and direc-tive modes.
The average number of user utterances persuccessful dialog was 10.7 in declarative mode and 27.6 indirective mode.
A detailed escription of the experimentand results is given in \[Smith, 1991\].
The substantiallyshorter completion times for users in declarative modecan be attributed to the fact that the subjects learnedmany of the debugging procedures during the experimentand did not need the detailed escriptions given in thedirective mode.7 SummaryA voice interactive dialog architecture has been devel-oped which achieves imultaneously a variety of behav-iors believed to be necessary for efficient human-machinedialog.
Goal oriented behavior is supplied by the theo-rem proving paradigm.
Subdialogs and movement be-tween them is implemented with an interruptible theo-rem prover that maintains a set of partially completedproofs and can work on the most appropriate one atany given time.
A user model is provided by a contin-uously changing set of rules that are referenced in thetheorem proving process either to enable or inhibit voicedialog.
Mixed initiative is made possible by variabletypes of processing by the output and input routinesand by restricting or releasing the ability to interrupt oa new subdialog.
Expectation is associated with indi-vidual subdialogs, is compiled from domain and dialoginformation related to each specific output, and is usedto improve voice recognition and enable movement be-tween subdialogs.~Of the 23 dialogs which were not completed, 22 were ter-minated prematurely due to excessive time being spent onthe dialog.
Misunderstandings due to misrecognition werethe cause in 13 of these failures.
Misunderstandings due toinadequate grammar coverage occurred in 3 of the failures.In 4 of the failures the subject misconnected a wire.
In onefailure there was confusion by the subject about when thecircuit was working, and in another failure there were prob-lems with the system software.
A hardware failure causedtermination of the final dialog.References\[Aho and Peterson, 1972\] Alfred V. Aho and Thomas G.Peterson.
A minimum distance rror-correcting parserfor context-free languages.
SIAM Journal on Compu-tation, 1(4):305-312, 1972.\[Aho and Ullman, 1969\] A. V. Aho and J. D. Ullman.Properties of syntax directed translations.
Journal ofComputer and System Sciences, 3(3):319-334, 1969.\[Allen et al, 1989\] J. Allen, S. Guez, L. Hoebel,E.
Hinkelman, K. Jackson, A. Kyburg, and D. Traum.The discourse system project.
Technical Report 317,University of Rochester, November 1989.\[Allen, 1983\] J.F.
Allen.
Recognizing intentions fromnatural anguage utterances.
In M. Brady and R.C.Berwick, editors, Computational Models of Discourse,pages 107-166.
MIT Press, Cambridge, Mass., 1983.\[Carberry, 1990\] S. Carberry.
Plan Recognition in Natu-ral Language Dialogue.
MIT Press, Cambridge, Mass.,1990.\[Carbonell and Pierrel, 1988\] N. Carbonell and J.M.Pierrel.
Task-oriented dialogue processing in human-computer voice communication.
In H. Niemann,M.
Lang, and G. Sagerer, editors, Recent Advancesin Speech Understanding and Dialog Systems, pages491-496.
Springer-Verlag, New York, 1988.\[Chin, 1989\] D.N.
Chin.
KNOME: Modeling what theuser knows in UC.
In A. Kobsa and W. Wahlster,editors, User Models in Dialog Systems, pages 74-107.Springer-Verlag, New York, 1989.\[Cohen and Jones, 1989\] R. Cohen and M. Jones.
In-corporating user models into expert systems for ed-ucational diagnosis.
In A. Kobsa and W. Wahlster,editors, User Models in Dialog Systems, pages 313-333.
Springer-Verlag, New York, 1989.\[Danlos, 1987\] L. Danlos.
The Linguistic Basis of TextGeneration.
Cambridge University Press, New York,1987.\[Eastman and McLean, 1981\] C. M. Eastman and D. S.McLean.
On the need for parsing ill-formed in-put.
American Journal of Computational Linguistics,7(4):257, 1981.\[Erman et al, 1980\] L.D.
Erman, F. Hayes-Roth, V.R.Lesser, and D.R.
Reddy.
The Hearsay-II speech-understanding system: Integrating knowledge to re-solve uncertainty.
ACM Computing Surveys, pages213-253, June 1980.\[Finin, 1989\] T.W.
Finin.
GUMS: A general user model-ing shell.
In A. Kobsa and W. Wahlster, editors, UserModels in Dialog Systems, pages 411-430.
Springer-Verlag, New York, 1989.\[Fink and Biermann, 1986\] P.E.
Fink and A.W.
Bier-mann.
The correction of ill-formed input usinghistory-based xpectation with applications to speechunderstanding.
Computational Linguistics, 12(1):13-36, 1986.15\[Grosz and Sidner, 1986\] B.J.
Grosz and C.L.
Sidner.Attentions, intentions, and the structure of discourse.Computational Linguistics, 12(3):175-204, 1986.\[Grosz, 1978\] B.J.
Grosz.
Discourse analysis.
InD.E.
Walker, editor, Understanding Spoken Language,pages 235-268.
North-Holland, New York, 1978.\[Hayes et ai., 1986\] Philip J. Hayes, Alexander GHauptmann, Jaime G. Carbonell, and Masaru Tomita.Parsing spoken language: A semantic aseframe ap-proach.
In COLING-86: Proceedings of the llth In-ternational Conference on Computational Linguistics,pages 587-592, Bonn, August 1986.\[Hipp and Smith, 1991\] D. R. Hipp and R. W. Smith.A demonstration f the "circuit fix-it shoppe'.
A 12minute videotape available from the authors at DukeUniversity, Durham, NC 27706, August 1991.\[Hovy, 1988\] E.H. Hovy.
Generating Natural Languageunder Pragmatic Constraints.
Lawrence Erlbaum As-sociates, Hillsdale, N J, 1988.\[Jacobs, 1987\] P.S.
Jacobs.
KING: a knowledge-intensive natural language generator.
In Gerard Kem-pen, editor, Natural Language Generation, pages 219-230.
Martinus Nijhoff Publishers, Boston, 1987.\[Kitano and Van Ess-Dykema, 1991\] H. Kitano andC.
Van Ess-Dykema.
Toward a plan-based under-standing model for mixed-initiative dialogues.
In Pro-ceedings of the 29th Annual Meeting of the Associationfor Computational Linguistics, pages 25-32, 1991.\[Kobsa nd Wahlster, 1988\] A. Kobsa and W. Wahlster,editors.
Special Issue on User Modeling.
MIT Press,Cambridge, Mass., September 1988.
A special issue ofComputational Lingusitics.\[Kobsa nd Wahlster, 1989\] A. Kobsa and W. Wahlster,editors.
User Models in Dialog Systems.
Springer-Verlag, New York, 1989.\[Lehman and Carbonell, 1989\] J.F.
Lehman and J.G.Carbonell.
Learning the user's language: A step to-wards automated creation of user models.
In A. Kobsaand W. Wahlster, editors, User Models in DialogSystems, pages 163-194.
Springer-Verlag, New York,1989.\[Levinson, 1985\] Stephen E. Levinson.
Structural meth-ods in automatic speech recognition.
Proceeding of theIEEE, 73(11):1625-1650, 1985.\[Linde and Goguen, 1978\] C. Linde and J. Goguen.Structure of planning discourse.
J Social Biol.
Struct.,1:219-251, 1978.\[Litman and Allen, 1987\] D.J.
Litman and J.F.
Allen.
Aplan recognition model for subdialogues in conversa-tions.
Cognitive Science, 11(2):163-200, 1987.\[Lyon, 1974\] Gordon Lyon.
Syntax-directed least errorsanalysis for context-free languages.
Communcationsof the ACM, 17(1):3-14, 1974.\[McKeown, 1985\] K.R.
MeKeown.
Text Generation.Cambridge University Press, New York, 1985.\[Morik, 1989\] K. Morik.
User models and conversationa ~settings: Modeling the user's wants.
In A. Kobsa andW.
Wahlster, editors, User Models in Dialog Systemspages 364-385.
Springer-Verlag, New York, 1989.\[Mudler and Paulus, 1988\] J. Mudler and E. PaulusExpectation-based speech recognition.
In H. NiemannM.
Lang, and G. Sagerer, editors, Recent Advances i~Speech Understanding and Dialog Systems, pages 473-477.
Springer-Verlag, New York, 1988.\[Novick, 1988\] D.G.
Novick.
Control of Mixed-InitiatiwDiscourse Through Meta-Locutionary Acts: A Cornputational Model.
PhD thesis, University of Oregon1988.\[Paris, 1988\] C.L.
Paris.
Tailoring object descriptions t?a user's level of expertise.
Computational Linguistic~14(3):64-78, 1988.\[Patten, 1988\] T. Patten.
Systemic Text Generation aProblem Solving.
Cambridge University Press, NevYork, 1988.\[Polanyi and Scha, 1983\] L. Polanyi and It.
Scha.
O\]the recursive structure of discourse.
In K. Ehlich amH.
van Riemsdijk, editors, Connectedness in SentenceDiscourse and Text, pages 141-178.
Tilburg University, 1983.\[Pollack, 1986\] M.E.
Pollack.
A model of plan inferenc,that distinguishes between the beliefs of actors an,observers.
In Proceedings of the 24th Annual Mee1ing of the Association for Computational Linguistic,.pages 207-214, 1986.\[Reichman, 1985\] R. Reichman.
Getting Computers tTalk Like You and Me.
MIT Press, Cambridge, Mass1985.\[Smith, 1991\] R.W.
Smith.
A Computational Model cExpectation-Driven Mixed-Initiative Dialog Proces,ing.
PhD thesis, Duke University, 1991.\[Walker and Whittaker, 1990\] M. Walker and S. Whittaker.
Mixed initiative in dialogue: An investigatiointo discourse segmentation.
I  Proceedings ofthe 28tAnnual Meeting of the Association for Computation4Linguistics, pages 70-78, 1990.\[Walker, 1978\] D.E.
Walker, editor.
Understanding Sp~ken Language.
North-Holland, New York, 1978.\[Whittaker and Stenton, 1988\] S. Whittaker andP.
Stenton.
Cues and control in expert-client dislogues.
In Proceedings of the 26th Annual Meeting tthe Association for Computational Linguistics, pag~123-130, 1988.\[Young and Proctor, 1989\] S.J.
Young and C.E.
Pro~tor.
The design and implementation f dialogue coitrol in voice operated atabase inquiry systems.
Conpurer Speech and Language, 3:329-353, 1989.\[Young et al, 1989\] S.R.
Young, A.G. Hauptman\]W.H.
Ward, E.T.
Smith, and P. Werner.
High lev,knowledge sources in usable speech recognition sy~tems.
Communications of the ACM, pages 183-19,August 1989.16
