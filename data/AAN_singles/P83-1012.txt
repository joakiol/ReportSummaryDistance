AN OVERVIEW OF THE NIGEL TEXT GENERATION GRAMMARWilliam C. MannUSC/Information Sciences institute4676 Admiralty Way # 1101Marina del Rey, CA 90291AbstractResearch on the text generation task has led tocreation of a large systemic grammar of English, Nigel,which is embedded in a computer program.
Thegrammar and the systemic framework have beenextended by addition of a semantic stratum.
Thegrammar generates sentences and other units underseveral kinds of experimental control.This paper describes augmentations of variousprecedents in the systemic framework.
The emphasisis on developments which control the text to fulfill apurpose, and on characteristics which make Nigelrelatively easy to embed in a larger experimentalprogram.1 A Grammar  for  Text  Generat ion  - TheChallengeAmong the various uses for grammars, text generation atfirst seems to be relatively new.
The organizing goal of textgeneration, as a research task, is to describe how texts can becreated in fulfillment of text needs.
2Such a description must relate texts to needs, and so mustcontain a functional account of the use and nature of language, avery old goal.
Computational text generation research should beseen as simply a particular way to pursue that goal.As part of a text generation research project, a grammar ofEnglish has been created and embodied in a computer program.This grammar and program, called Nigel, is intended as acomponent of a larger program called Penman.
This paperintroduces Nigel, with just enough detail about Penman to showNigel's potential use in a text generation system.IThis research was Supported by the Air Force Office of Scientific Researchcontract NO.
F49620.79-C-0181.
The views and conclusions contained =n thisdocument are those of the author and should not be interpreted as necessarilyrepresenting the Official polic=es or endorsements, either expressed or implied, ofthe Air Force Office Of S(;ientific Research of the U.S. Government.2A text need is the earliest recognition on the part of the speaker that the=mmeciiate situation is orle in which he would like to produce speech.
In this reportwe will alternate freely between the terms speaker, writer and author, betweenhearer and reader, and between speech and text This is s=mpty partialaccommodation of preva=ling jargon; no differences are intended.1.1 The Text Generat ion  Task as a St imulus for GrammarDesignText generation seeks to characterize the use of naturallanguages by developing processes (computer programs) whichcan create appropriate, fluent text on demand.
A representativeresearch goal would oe to create a program which could write atext that serves as a commentary on a game transcript, making theeventsof the game understandable.
3The guiding aims in the ongoing des=gn of the Penman textgeneration program are as follows:1.
To learn, in a more specific way than has prewouslybeen achieved, how appropriate text can be createdin response to text needs.2.
To identify the dominant characteristics which make atext appropriate for meeting its need.3.
To develop a demonstral~le capacity to create textswhich meet some identifiable practical class of textneeds.Seeking to fill these goals, several different grammaticalframeworks were considered.
The systemic framework waschosen, and it has proven to be an entirely agreeable choice.Although it is relatively unfamiliar to many American researchers.it has a long history of use in work on concerns which are centraltO text generation.
It was used by Winograd in the SHRDLUsystem, and more extensively by others since \[Winograd 72.
Davey79, McKeown 82.
McDonald 80\].
A recent state of the art surveyidentifies the systemic framework as one of a small number oflinguistic frameworks which are likely to be the basis forsignificant ext generation programs in th~s decade {Mann 82a}.One of the principal advantages of the systemic frameworkiS its strong emphasis on "functional" explanations ofgrammatical phenomena.
Each distinct kind of grammatical entityiS associated with an expression of what it does for the speaker.so that the grammar indicates not only what is possible but why itwould be used.
Another is its emphasis on principled, iustifieddescriptions of the choices which the grammar offers, i.e.
all of itsoptionality.
Both of these emphases support text generationprogramming significantly.
For these and other reasons thesystemic framework waS Chosen for Nigel.Basic references on the systemic framework include:\[Berry 75, Berry 77, Halliday 76a, Halliday 76b, Hudson3This was accomplished in work Py Anthony Davey \[Davey 79\]; \[McKeown 821 isa comoaraOle more recent study it} whlcR the generated text clescrioed structuraland definitional aspects of a data base.7976, Hatliday 81, de Joia 80, Fawcett 80\].
41.2 Design Goals for the GrammarThree kinds of goals have guided the work of creatingNiget.1.To specify in total detail how the systemicframework can generate syntactic units, using thecomputer as the medium of experimentation.2.
To develop a grammar of English which is a goodrepresentative of the systemic framework and usefulfor demonstrating text generation on a particular task.3.
To specify how the grammar can be regulatedeffectively by the prevai l ing text need in itsgeneration activity.Nigel is intended to serve not only as a part of the Penmansystem, but also eventually as a portable generational grammar, acomponent of future research systems investigating, anddeveloping text generation.Each of the three goals above has led to a different kind ofactivity in developing Nigel and a different kind of specification inthe resulting program, as described below.
The three designgoals have not all been met.
and the work continues.1.
Work on the first goal, specifying the framework, isessentially finished (see section 2.1).
The lnterlispprogram is stable and reliable for its developers.2.
Very substantial progress has been made on creatingthe grammar of English; although the existinggrammar is apparently adequate for some textgeneration tasks, some additions are planned.3.
Progress on the third goal, although gratifying, isseriously incomplete.
We have a notation and adesign method for relating the grammar to prevailingtext needs, and there are worked out examples whichillustrate the methods the demonstration ~aper in\[Mann 83\](see section 2.3.
)2 A Grammar for Text Generation - TheDes ign2.1 Overv iew of Nigel's DesignThe creation of the Nigel program has requiredevolutionary rather than radical revisions in systemic notation,largely in the direction of making well-precedented ideas moreexplicit or detailed.
Systemic notation deals principally with threekinds of entities: 1} systems, 2) realizations of systemic choices(including function structures), and 3) lexical items.
These threeaccount for most of the notational devices, and the Nigel programhas separate parts for each.4This work would not have been possible wtthout he active palliclpatlon ofChristian MattNessen, and the participation and past contributions of MichaelHalliday and other system=c=sts.Comparing the systemic functional approach to astructural approach such as context-free grammar, ATNs ortransformational grammar, the differences in style (and theireffects on the programmed result) are profound.
Although it is notpossible to compare the approaches in depth here, we noteseveral differences of interest to people more familiar withstructural approaches:?
Systems, which are most like structural rules, do notspecify the order of constituents.
Instead they areused to specify sets of features to be possessed bythe grammatical construction as a whole.2.
The grammar typically pursues several independentlines of reasoning (or specification) whose results arethen combined.
This is particularly difficult to do in astructurally oriented grammar, which ordinarilyexpresses the state of development of a unit in termsof categories of constituents.3.
In the systemic framework, all variability of thestructure of the result, and hence all grammaticalcontrol, is in one kind of construct, the system.
Inother frameworks there is often variability from severalsources: optional rules, disjunctive options withinrules, optional constituents, order of application andso forth.
For generation these would have to becoordinated by methods which lie outside of thegrammar, but in the systemic grammar thecoordination problem does not exist.2.1 .1 Systems and GatesEach system contains a set of alternatives?
symbols calledgrammat ica l  features.
When a system is entered, exactly oneof its grammatical features must be chosen.
Each system also hasan input expression, which encodes the conditions under whichthe system is entered 5 Outing the generation, the Dr0gram keepstrack of the selection expression, the set of features which havebeen chosen up to that point.
Based on the selection expression.the program invokes the realization operations which areassociated with each feature chosen.In addition to the systems there are Gates.
A gate can bethought of as an input expression which activates a particulargrammatical feature, without choice.
6 These grammatical featuresare used just as those chosen in systems.
Gates are most oftenused to perform realization in response to a collection of features.
75Input expressions are BooLean expressions of features, without negation, ~.e.they are composed entirely of feature names, together with And.
Or and0arentheses.
(See the figures in the demonstration paper tn IMann 8.3} forexamples.
)6See the figure entitled Transitivity I =n \[Mann 83} for examDles and furtherdiscussion of the roles of gates.7Bach realization ot~erat=on is associated with just one feature, there are norealizat?on operations which depend on more than one feature, and no rulescorresponding to Hudson's function reah;'ation rules.
The gates facihtateelimiqating this category of rules, with a net effect that the notation is morehomogeneous.802.1.2 Realization OperatorsThere are three groups of realization operators: those thatbuild structure (in terms of grammatical functions), those thatconstrain order, and those that associate features withgrammatical functions.1.
The realization operators which build structure areInsert, Conflate, and Expand.
By repeated use ofthe structure building functions, the grammar is ableto construct sets of function bUndles, also calledfundles.
None of them are new to the systemicframework.2.
Realization operators which constrain order arePartition, Order, OrderAtFront and OrderAtEnd.Partition constrains one function (hence one fundle)to be realized to the left of another, but does notconstrain them to be adjacent.
Order constrains justas Partition does, and in addition constrains the two tObe realized adjacently.
OrderAtFront constrains afunction to be realized as the leftmost among thedaughters of its mother, and OrderAtEndsymmetrically as rightmost.
Of these, only Partition isnew to the systemic framework.3.
Some operators associate features with functions.They are Preselect, which associates a grammaticalfeature with a function (and hence with its fundle);Classify, which associates a lexical feature with afunction: OutClassify, which associates a lexicalfeature with a function in a preventive way; andLexify, which forces a particular lexical item to beused to realize a function.
Of these, OutClassify andLexi~ are new, taking up roles previously filled byClassify.
OutClaasify restricts the realization of afunction (and hence fundle) to be a lexical item whichdoes not bear the named feature.
This is useful forcontrolling items in exception categories (e.g.reflexives) in a localized, manageable way.
Lexifyallows the grammar to force selection of a particularitem without having a special lexical feature for thatpurpose.In addition to these realization operators, there =s a set ofDefault Function Order Lists.
These are lists of functionswhich will be ordered in particular ways by Nigel.
provided that thefunctions on the lists occur in the structure, and that therealization operators have not already ordered those functions.
Alarge proportion of the constraint of order is performed throughthe use of these lists.The realization operations of the systemic frameworK,especially those having to do with order, have not been specifiedso explicitly before.2.1.3 The LexiconThe lexicon is defined as a set of arbitrary symbols, calledword names, such as "budten", associated wtth symbols calledspellings, the lexical items as they appear in text.
In order tokeep Nigel simple during its early development, there is no formalprovision for morphology or for relations between items whicharise from the same root.Each word name has an associated set of lexicalfeatures.Lexify selects items by word name; Classify andOutClassify operate on sets of items in terms of the lexicatfeatures.2.2 The Grammar  and Lexicon of EnglishNigel's grammar is partly based on published sources, andis partly new.
It has all been expressed in a single homogeneousnotation, with consistent naming conventions and much care toavoid reusing names where identity is not intended.
The grammaris organized as a single network, whose one entry point is used forgenerating every kind of unit.
8Nigers lexicon is designed for test purposes rather than forcoverage of any particular generation task.
It currently recogmzes130 texical features, and it has about 2000 texical items in about580 distinct categories (combinations of features).2.3 Choosers  - The Grammar 's  Semant icsThe most novel part of Nigel is the semantics of :Regrammar.
One of the goals identified above was to "s~ecify '~owthe grammar can be regulated effectively by the prevailing textneed."
Just as the grammar and the resuiting text are ooth very,complex, so is the text need.
In fact.
grammar and text complexityactually reflect the prior complexity of the text nee~ ',vh~c~ ~averise to the text.
The grammar must respond selectwely to thoseelements of the need which are represente~ by the omt Demggenerated at the moment.Except for lexical choice, all variability in Nigers generatedresult comes from variability of choice in the grammar.Generating an appropriate s\[ructure consists entirely in makingthe choices in each system appropriately.
The semantics of thegrammar must therefore be a semantics of cno~ces in theindividual systems; the choices must be made in each systemaccording to the appropriate lements of the prevailing need.In Nigel this semantic control is localized ',o the systemsthemselves.
For each system, a procedure is defined ,.vh~ch candeclare the appropriate choice in the system.
When the system isentered, the procedure is followed to discover the appropriatechoice.
Such a procedure is called a chooser (or "choiceexpert".)
The chooser is the semantic account of the system, medescription of the circumstances under wnpch each choice isapprooriate.To specify the semantics of the choices, we needed anotation for the choosers as procedures.
This paper describesthat notation briefly and informally.
Its use is exemplified in theNigel demonstration \[Mann C:x3j and developed in more detail ~nanother report \[Mann 82b\].To gain access to the details of the need.
the choosersmust in some sense ask questions about particular entities.
Forexample, to decide between the grammatical features Singularand Plural in creating a NominalGroup.
the Number chooser (the8At the end of 1982.
N,gel contained about 220 systems, with all ot thenecessary realizations speclfiecL tt ts thus the largest systemic grammar in a singlenotation, and possibly the largest grammar of a natural language in any of thefunctional linguJstic traditions.
Nigel ~S ~rogrammed in INTEF:tLISP81chooser for the Number system, where these features are theoptions) must be able to ask whether a particular entity (alreadyidentified elsewhere as the entity the NominalGroup represents) isunitary or multiple.
That knowledge resides outside of Niget, in theenvironment.The environment is regarded informally as beingcomposed of three disjoint regions:1.
The Knowledge Base, consisting of informationwhich existed prior to the text need;2.
The Text Plan, consisting of information which wascreated in response to the text need, but before thegrammar was entered;3.
The Text Services, consisting of information whichis available on demand, without anticipation.Choosers must have access to a stock of symbolsrepresenting entities in the environment.
Such symbols are calledhubs.
In the cOurse of generation, hubs are associated withgrammatical functions; the associations are kept in a FunctionAssociation Table, which is used to reaccess information in theenvironment.
For example, in choosing pronouns the chooserswill ask Questions about the multiplicity of an entity which isassociated with the THING function in the Function Associat=onTable.
Later they may ask about the gender of the same entity.again accessing it through its association with THING.
This use ofgrammatical functions is an extension of prewous uses.Consequently, relations between referring phrases and theconcepts being referred to are captured in the FunctionAssociation Table.
For example, the function representing theNominalGroup as a whole is associated with the hub whictlrepresents the thing being referred to in the environment.Similarly for possessive determiners, the grammatical function forthe determiner is associated with the hub for the possessor.It is convenient o define choosers in such a way that theyhave the form of a tree.
For any particular case, a single path ofoperations is traversed.
Choosers are defined principally in termsof the following Operations:1.
Ask presents an inquiry to the environment.
Theinquiry has a fixed predetermined set of possibleresponses, each corresponding to a branch of thepath in the chooser,2.
Identi fy ~resents an inquiry to the environment.
Theset of responses is open-ended.
The response is putin the Function Association Table.
associated with agrammatical function which is given (in addition to theinquiry) as a parameter tO the Identify operator.
93.
Choose declares a choice,4.
CopyHub transfers an association of a hub from onegrammatical function tO another.
1?9See the demonstration paper in \[Mann 8,3} for an explanation and example ofits use10There are three athers whtCh have some linguistic slgnihcance: Pledge,TermPle~:lge, and Cho~ceError.
These are necessary but do not Play a central rote,They are named here lust to indicate that he chooser notation ~s very s=m~le.Choosers obtain information about the immediatecircumstances in which they are generating by presentinginquir ies to the environment.
Presenting inquiries, and receivingreplies constitute the only way in which the grammar and itsenvironment interact.An inquiry consists of an inquiry operator and asequence of inquiry parameters.
Each inquiry parameter is agrammatical function, and it represents (via the FunctionAssociation Table) the entities in the environment which thegrammar is inquiring about.
The operators are defined in such away that they have both formal and informal modes of expression.Informally.
each inquiry is a predefined question, in English, whichrepresents the issue that the inquiry is intended to resolve for anychooser that uses it.
Formally.
the inquiry shows how systemicchoices depend on facts about particular grammatical functions,and in particular restricts the account of a particular choice to beresponsive to a well-constrained, well-identified collection of facts.Both the informal English form of the inquiry and thecorresponding formal expression are regarded as parts of thesemantic theory expressed by the choosers which use the inquiry.The entire collection of inquiries for a grammar ~s a definition ofthe semantic scope to which the grammar is responsive at its \[evetof delicacy.Figure 1 shows the chooser for the ProcessType system.whose grammat=cal feature alternatives are Relational, Mental,Verbal and Material.Notice that in the ProcessType chooser, although there areonly four possible choices, there are five paths through thechooser from the starting point at the too, because Mentalprocesses can be identified in two different ways: those whichrepresent states of affairs and those which do not.
The number oftermination points of a chooser often exceeds the number ofchoices available.Table 1 shows the English forms of the Questions beingasked in the ProceasType chooser.
(A word ~n all cap.tats namesa grammatical function which is a oarameter of the inquiry,)Table 1: English Forms of the tncluiry Operators for theProcessType ChooserStaticConditionQ Does the process PROCESS represent a staticcondition or state of being?VerbalProcessQ Does the process PROCESS representsymbolic communication of a Kind which couldhave an addressee?MentalProoessQ Is PROCESS a process of comprehension.recognition, belief, perception, deduction,remembering, evaluation or mental reaction?The sequence of incluiries which the choosers present tothe environment, together with its responses, creates a dialogue.The unit generated can thus be seen as being formed out of anegotiation between the choosers and the environment.
This is aparticularly instructive way to view the grammar and its semantics,since it identifies clearly what assumptions are being made andwhat dependencies there are between the unit and theenvironment's representation of the text need.
(This is the kind ofdialogue represented in the demonstration paper in \[Mann 83\].)82??
(Static Condition 0 P ~/ \?
: : MatedalFigure 1 : The Chooser of the ProcessType systemThe grammar performs the final steps in the generationprocess.
It must complete the surface form of the text, but there isa great deal of preparation necessary before it is appropriate forthe grammar tO start its work.
Penman's design calls for manykinds of activities under the umbrella of "text planning" to providethe necessary support.
Work on Nigel is proceeding in parallelwith other work intended to create text planning processes.3 The Knowledge Representation of theEnvironmentNigel does not presume that any particular form Ofknowledge representation prevails in the environment.
Theconceptual content of the environment is represented in theFunction Association Table only by single, arbitrary,undecomposable symbols, received from the environment; theinterface is designed so that environmentally structuredresponses do not occur.
There is thus no way for Nigel to tellwhether the environment's representation is, for example, a formof predicate calculus or a frame-based notation.Instead, the environment must be able to respond toincluiries, which requires that the inquiry operators be~mplemented.
It must be able to answer inquiries aboutmultiplicity, gender, time, and so forth, by whatever means areappropriate to the actual environment.AS a result, Nigel is largely independent of theenvironment's notation.
It does not need to know how to search,and so it is insulated from changes .in representation.
We expectthat Nigel will be transferable from one application to another withrelatively little change, and will not embody covert knowledgeabout particular epresentation techniques.4 Nigel's Syntactic DiversityThis section provides a set of samples of Niget's syntacticdiversity: aJl of the sentence and clause structures in the Abstractof this paper are within Nigers syntactic scope.Following a frequent practice in systemic linguistics(introduced by Halliday), the grammar provides for three relativelyindependent kinds of specification of each syntactic unit: theIdeational or logical content, the Interpersonal content (attitudesand relations between the speaker and the unit generated) and theTextual content.
Provisions for textual control are well elaborated,and so contribute significantly to Nigel's ability to control the flowof the reader's attention and fit sentences into larger un=ts of text.5 Uses for NigelThe activity of defining Nigel, especially its semantic parts.is productive in its own right, since it creates interestingdescriotions and proposals about the nature of English and ti~emeaning of syntactic alternatives, as well as new notaticnaldevices, t~ But given Niget as a program, contaimng a fullcomplement of choosers, inquiry operators and related entities,new possibilities for investigation also arise.Nigel provides the first substantial opportunity to testsystemic grammars to find out whether they produce unintendedcombinations of functions, structures or uses of lex~cal items.Similarly, it can test for contradictions.
Again.
Nigel provides thefirst substantial opportunity for such a test.
And such a test isnecessary, since there appears to be a natural tendency to writegrammars with excessive homogeneity, not allowing for possibleexception cases.
A systemic functional account can also be111t tS our intention eventually to make Nigel avaJlal~le for teaching, research,development and computational application83tested in Niget by attempting to replicate part=cular natural texts--avery revealing kind of experimentation.
Since Nigel provides aconsistent notation and has been tested extensively, it also hassome advantages for educational and linguistic research uses.On another scale, the whole project can be regarded as asingle experiment, a test of the functionalism of the systemicframework, and of its identification of the functions of English.In artificial intelligence, there is a need for priorities andguidance in the design of new knowledge representationnotations.
The inquiry operators of Nigel are a particularlyinteresting proposal as a set of distinctions already embodied in amature, evolved knowledge notation, English, and encodable inother knowledge notations as well.
To take just a few examplesamong many, the inquiry operators suggest that a notation forknowledge should be able to represent objects and actions, andshould be able to distinguish between definite existence,hypothetical existence, conjectural existence and non.existenceof actions, These are presently rather high expectations forartificial intelligence knowledge representations.6 SummaryAs part of an effort to define a text generation process, aprogrammed systemic grammar called Nigel has been created.Systemic notation, a grammar of English, a semantic notationwhich extends systemic notation, and a semantics for English areall included as distinct parts of Nigel.
When Nigel has beencompleted it will be useful as a research tool in artificialintelligence and linguistics, and as a component in systems whichgenerate text.References\[Berry 75\] Berry, M., Introduction to Systemic Linguistics:Structures and Systems, B. T. Batsford, Ltd., London, 1975.\[Berry 77\] Ber~, M., Introduction to Systemic Lingusstics; Levelsand Links, 8.
T. Batsford, Ltd.. London, 1977.\[Davey 79\] Davey, A., Discourse Production, Edinburgh UniversityPress, Edinburgh.
1979.\[de Joia 80\] de JoJa.
A.. and A. Stenton, Terms in SystemicLinguistics, Batsford Academic and Educational.
Ltd.,London, 1980.\[Fawcett 80\] Fawcett, R. P., Exeter Lmgusstic Studies Volume 3:Cognitive Linguistics and Social Interaction, Julius GroosVerlag Heidelberg and Exeter University, 1980.\[Halliday 76a\] Halliday, M. A. K.. and R. Hasan, Cohesion inEnglish, Longman, London, t976.
English Language Series.Title No.
9.\[Halliday 76b\] Halliday, M. A. K., System and Function inLanguage, Oxford University Press, London, 1976.\[Halliday 81\] Halliday, M.A.K., and J. R. Martin (eds.
), Readings inSystemic Linguisfics, Batsford, London, 1981.\[Hudson 76\] Hudson, FI.
A., Arguments for aNon.Transformational Grammar, University of Chicago Press,Chicago, 1976.\[Mann 82a\] Mann, W. C., et.
al., "Text Generation," AmericanJournal of Computational Linguistics 8,  (2), April-June 1982,62-69.\[Mann 82b\] Mann, W. C., The Anatomy of a Systemic Choice,USC/Information Sciences Institute, Marina del Rey, CA,RR.82-104, October 1982.\[Mann 8,3} Mann, W. C., and C. M. I. M. Matthiessen, "Ademonstration of the Niget text generation computerprogram," in Nigeh A Systemic Grammar for Text Generation.USC/Information Sciences Instrtute, RR.83-105, February1983.
This paper will also appear in a forthcoming volume ofthe Advances in Discourse Processes Ser~es, R. Freedle led.
):Systemic Perspectives on Discourse: Selected TheoreticalPapers from the 9th International Systemic Workst~op to bepublished by Ablex.\[McDonald 80} McDonald, D. D., Natural Language Rroctuction asa Process of Decision.Making Under Constraints,Ph.D.
thesis, Massachusetts Institute of Technology, Dept.
ofElectricial Engineering and Computer Science, 1980.
Toappear as a technical report from the MIT ArtificialIntelligence Laboratory.\[McKeown 82\] McKeown.
K.R., Generating Natural LanguageText in Response to Questions at:out Dataoase Structure.Ph.O.
thesis, University of Pennsylvania.
1982.\[Winograd 72\] Winograd.
T.. Understanding Natural Language.Academic Press, Edinburgh.
1972.84
