FAQ Mining via List DetectionYu-Sheng Lai1,2, Kuao-Ann Fung1, and Chung-Hsien Wu11Dept.
of Computer Science & Information Engineering, National Cheng Kung University,1, Ta-Hsueh Rd., Tainan, Taiwan 701, R.O.C.2Advanced Technology Center,Computer & Communication Research Laboratories/Industrial Technology Research Institute,E000, 195-11, Sec.
4, Chung Hsing Rd.
Chutung, Hsinchu, Taiwan 310, R.O.C.laiys@itri.org.tw, p7689151@dec4000.cc.ncku.edu.tw, chwu@csie.ncku.edu.twAbstractThis paper presents an approach to FAQmining via a list detection algorithm.
Listdetection is very important for datacollection since list has been widely used forrepresenting data and information on theWeb.
By analyzing the rendering of FAQson the Web, we found a fact that all FAQsare always fully/partially represented in alist-like form.
There are two ways to authora list on the Web.
One is to use somespecific tags, e.g.
<li> tag for HTML.
Thelists authored in this way can be easilydetected by parsing those special tags.Another way uses other tags instead of thespecial tags.
Unfortunately, many lists areauthored in the second way.
To detect lists,therefore, we present an algorithm, which isindependent of Web languages.
Bycombining the algorithm with some domainknowledge, we detect and collect FAQsfrom the Web.
The mining task achieved aperformance of 72.54% recall and 80.16%precision rates.IntroductionThe World Wide Web has become a fertile area,storing a vast amount of data and information.One of them we are interested is the FrequentlyAsked Questions (FAQs).
For customer services,message providing, etc., many Websites havecreated and maintained their own FAQs.A large collection of FAQs is very useful formany research areas in natural languageprocessing.
Especially in question answering, itexemplifies many questions and their answers.
Itis also a database for the applications of FAQretrieval, e.g.
AskJeeves (www.ask.com), .faqfinder (members.tripod.com/~FAQ_Home/), andFAQFinder (www1.ics.uci.edu/~burke/faqfinder/).By analysing the rendering of FAQs on theWeb, we divide them into 6 types according to 2viewpoints.
Among these types, we found a factthat all FAQs are always fully/partiallyrepresented in the form of list as well as muchuseful information.There are two ways to represent a list in aWeb Page.
One is to use some specific tags, e.g.<li> tag for HTML.
Another one is to use othertags.
The lists authored in the first way can beeasily detected by parsing those specific tags.However, most of FAQs are authored in thesecond way.
Therefore, this paper presents analgorithm for detecting lists in Web Pages.
Then,we verify each detected list whether itdetermines a set of FAQs or parts of it by someconstraints of domain knowledge.1 Web FAQsAn FAQ file is a file gathering a set ofquestion-answer pairs, QA-pairs for short, withan identical topic together.
A Website maycontain FAQ files with one or more topics.
TheFAQ files authored in Web Pages are calledWeb FAQs.
In the following we will exploreWeb FAQs from three aspects : (1) Weblanguages used for authoring Web FAQs, (2)taxonomy of Web FAQs and (3) domainknowledge.1.1 Web LanguagesWeb languages are the languages developed andused for authoring Web Pages.
A popular Weblanguage ?
SGML (Standard GeneralizedMarkup Language) [ISO 8879, Goldfarb 1990]is a metalanguage developed for tagging text.
Itprovides the rules for defining a markuplanguage based on tags.
For example, the mostpopular markup language used for the Web,HTML, is an instance of SGML.
For simplicityand clearness, all examples in this paper will beauthored in HTML [Raggett et al 1998].Besides, an available metalanguage for SemanticWeb, XML (eXtensible Markup Language)[Bray et al 2000], is also a subset of SGML.A European alternative to SGML is the ODA(Office Document Architecture) that is also astandard [ISO 8613].
However, it is not usedvery frequently nowadays.Fig.
1 shows the taxonomy of SGML-basedWeb languages [Baeza-Yates and Ribeiro-Neto1999].
Under the definition of SGML, eachinstance of SGML describes a text by using thetext itself and tags.
Our approach is available forthe Web Pages authored by SGML-based Weblanguages [Francis et al 1999, Pemberton et al2000, Raggett et al 1998].SGMLXMLSMILMathMLRDFXHTMLHTMLHyTimeTEI LiteMetalanguagesLanguagesDynamicHTMLFig.
1 Taxonomy of SGML-based Weblanguages.1.2 Taxonomy of Web FAQsIdentifying the types of Web FAQs is conduciveto tracing QA-pairs within a Website.
Weclassify Web FAQs according to the twoviewpoints : (A) the relational position betweena question and its answer and (B) the types ofthe hyperlinks from the questions to the answers.From the viewpoint of the relational position,Web FAQs can be divided into the followingtwo types:Type A.1 Side-by-Side QA-pairs ?
In anFAQ file, every question is immediatelyfollowed by its answer.
Generally speaking, thistype of questions equip no hyperlinks for theiranswers due to their closely relational position.The whole FAQ file looks like a list of QA-pairs.An example of this type is shown in Fig.
2.Fig.
2 An example of the FAQ file consisting ofside-by-side QA-pairs.Fig.
3 An example of the FAQ file consisting ofhyperlinked QA-pairs.Type A.2 Hyperlinked QA-pairs ?
Inan FAQ file, all questions are organized as a list,but the answers do not follow their questionsimmediately.
For users?
convenience, in thistype of FAQs, every question always have ahyperlink to the position of its answer, in whichthe hyperlink may direct to a positioninside/outside the listing page containing thequestion list.
Thus users can find the answers bysimply clicking the hyperlinks.
An example ofthis type is shown in Fig.
3.From the viewpoint of the hyperlinks, we divideWeb FAQs into the following four types:Type B.1 Without Hyperlinks ?
Thequestions have no hyperlinks to their answers.
Inview of humanity design, it reasonably impliesthat the questions must be followed by theiranswers.
In other words, this type is equivalentto Type A.1.Type B.2 With Inside Hyperlinks ?
In anFAQ file, every question has an inside hyperlinkto its answer.
When a question has the hyperlinkin the form of <A HREF=?#label-name?>, itsanswer must be the content of an <ANAME=?label-name?> tag, i.e.
enclosed by tagpair <A NAME=?label-name?>... </A>.Type B.3 With Single-Page OutsideHyperlinks ?
For a list of questions, allhyperlinks to their answers direct to a singleoutside page.
The directed page usually containsa list of QA-pairs like Type A.1.
That is, areplica of the questions also appears in thedirected page, but probably in different forms.Type B.4 With Multi-Page OutsideHyperlinks ?
For a list of questions, each oftheir answers is directed by a hyperlink to anoutside page.
The directed page usually containsa QA-pair alone, as shown in Fig.
3.By the above analysis, we can locate ananswer according to its question and theinformation attached.
An important discoveryand fact is that at least a portion of a Web FAQ,namely questions or QA-pairs, is always in theform of list.
The ?list?
indicates that therendering looks like a list, but it does not mean itshould be authored in some specific tags forauthoring lists, such as <li> tag.
This paperemphasizes the detection of visually list-likesegments.1.3 Domain KnowledgeExcept for Web FAQs, some undesirablesegments could be rendered as lists, such as thecategories of portal sites, product categories, etc.To prevent the redundant segments from beingextracted, we exploit some domain knowledgeas follows:(1) Chinese linguists traditionally dividequestions into four types of interrogativeforms: question-word, disjunctive, tag, andparticle questions [Li and Thompson 1981].By identifying the interrogative types forall questions in the possible FAQ files [Laiand Wu 2000], we can obtain a ratio ofquestions in the possible FAQ files.
Wedecide it is an FAQ file if the ratio isgreater than a threshold.
(2) In practice, an exceptional type ?declarative questions is possibly appear.
Itoccupied around 18% in a collection of18034 QA-pairs.
A punctuation mark ?question mark ends some of them.Question mark is useful for identifyingquestions.
Besides, some prefix terms,such as ?Q,?
and ??
?, are also available.To achieve better accuracy, some otherdomain knowledge is needed, but is not theemphasis of this paper.2 List DetectionThis section introduces how to detect lists fromWeb Pages.
We will first define severalimportant terms for our approach.
Then, we willdescribe the approach to list detection via amarkup language independent algorithm.2.1 Terms for Our ApproachIn the following we will introduce severalimportant terms we defined for our approach,including tag-content pair string, regulartag-content string, tag string, di-tag, andmarkup parse tree.?
Tag-Content pair StringWithout losing the correctness of rendering,each markup language document can betransformed into a list of tag-content pairs,TC-pairs for short, and the content is allowedbeing empty.
Fig.
4 shows the partial sourcecode of a markup language document extractedfrom http://www.infovalue.com/tw/faq_qvs.htm.Fig.
5 lists an example source codetransformed from the source code in Fig.
4.
InFig.
5, there is a TC-pair in line 50, in which itstag is <FONT SIZE=2> and its content is ??????????.
Besides, line 46 (empty tag)and line 47 (start tag) list two TC-pairs withempty content.<LI><A HREF=?http://www.infovalue.com/tw/faq_qvs.htm#Q1?><FONT FACE=?Arial, Helvetica, Sans-serif?SIZE=2>1.InfoValue</FONT><FONT SIZE=2>???????
?</FONT></A><LI><A HREF=?http://www.infovalue.com/tw/faq_qvs.htm#Q2?><FONT FACE=?Arial, Helvetica, Sans-serif?SIZE=2>2.InfoValue</FONT><FONT SIZE=2>???????</FONT></A><LI>???Fig.
4 Partial source code from an examplemarkup language document.46 <LI>47 <A HREF=?http://www.infovalue.com/tw/faq_qvs.htm#Q1?>48 <FONT FACE=?Arial, Helvetica, Sans-serif?SIZE=2>1.InfoValue49 </FONT>50 <FONT SIZE=2>???????
?51 </FONT>52 </A>53 <LI>54 <A HREF=?http://www.infovalue.com/tw/faq_qvs.htm#Q2?>55 <FONT FACE=?Arial, Helvetica, Sans-serif?SIZE=2>2.InfoValue56 </FONT>57 <FONT SIZE=2>??????
?58 </FONT>59 </A>60 <LI>???Fig.
5 The source code in the form of TC-pairstransformed from Fig.
4.
The italics indicate theelement names and the bolded words are thecontents.?
Regular TC-pair StringTo precisely detect the position of a list in amarkup language document, we define a RegularTC-pair String (RTCS) to be a string of TC-pairsthat meets the regular constraint: ?All the tags inthe Regular TC-pair String must be properlynested and an end tag closes all omitted starttags up to the matching start tag.?
The term?regular?
comes from ?regular expressions?formalism stated in Automata Theory [Hopcroftand Ullman 1979].
Meeting the regularconstraint implies that:Lemma 1.
An RTCS must start with astart-tag and end at an end-tag, in which theend-tag need not match the start tag.Lemma 2.
In an RTCS, all the unclosed tagsbefore the content of a TC-pair influence therendering of the content.The regular language RL , which generates a setof RTCSs, can be described by regularexpressions as follows:*{ | ( ), , , }R RL x x ay a a a y L?= = + ??
?% %  (1)where ?
denotes a finite set of symbols, i.e.TC-pairs in this paper,  and a  are symbolsina %?
, in which  denotes a TC-pair consistingof a start or empty tag and a content, notated asa( , )i ica t= , and  denotes a TC-pair consistingof an end tag corresponding to a ?s and acontent, notated asa%( ,a t )i jc= %% , and ?
denotesa null and stands for that  is a TC-pair withan empty tag or  is omitted.aa%By Lemma 1, an RTCS may contain one ormore sub-RTCSs.
Therefore an elementaryRTCS is well-defined as an RTCS that iswrapped in a start-tag and its matching end-tag,in which the start-tag and its matching end-tag iscalled a representative of the elementary RTCS.That is, the final tag must be an end-tag andmatch the first tag, or the matching end-tag ofthe first tag is omitted if the final tag does notmatch the first tag.
A single empty tag can beregarded as an elementary RTCS.di-tagdi-tagWhile authoring Web Pages, one mayintentionally/unintentionally ommit some tags.By Lemma 2, the ommited tags can be identifiedand recovered.?
Tag String and Di-tagFor a TC-pair string, after removing theircontent parts, the remainders are called tagstring.
For two consecutive tags, i.e.
a tag stringconsisting of two tags, we refer to it as di-tag.?
Markup Parse TreeThe two arrowed regions in Fig.
5, lines 46~52and lines 53~59, are two RTCSs.
There are twodifferences between them.
(1) Their values ofthe HREF attributes in the two <A> tags (lines47 and 54) are different.
Since the two valuesare hyperlinks to their corresponding answers,they are certainly different.
(2) Their individualcontents (the bolded texts) represent twodifferent questions.
Except for the differences,the other portions of these two strings areidentical.However, not all lists are so regular especiallyin those containing answers.
Every two answersin an FAQ file are not only different in theaspects of the textual content but also in otheraspects, such as the style, the font, etc., whichrelate to the interpretation of markups.
Forexample, Fig.
6 shows the rendering of twoQA-pairs corresponding to the two answersauthored by the source code in Fig.
5.Comparing the two QA-pairs in Fig.
6, they areapparently dissimilar in the number of theparagraphs, the styles, and the fonts.
Their ownsource codes are almost incomparable.As mentioned before, there are alwayshyperlinks between the question list and theircorresponding answers for Type A.2.
No doubt,the answers can be detected by the hyperlinks.However, there are no such relationships forType A.1.
To solve this problem, we propose atree-matching-based method.
Summarily, twosegments of markups to be compared are firstparsed into two parse trees, called markup parsetrees (MPTs).Transforming an RTCS into an MPT isdescribed more detailly below.
(1) For an RTCS, it is transformed into a tagstring by purging the content from eachTC-pair, in which the tag string is stillregular since this transformation does notchange its structure.
It is also nested.
(2) According to the nested structure of the tagstring, we construct a parse tree, namely theMPT.
The construction obeys the followingprinciples :i.
An MPT owns a unique vertex, calledroot, which virtually stands for thewhole tag string.ii.
Each sub-tree in an MPT is constructedfrom an elementary RTCS and therepresentative of the elementary RTCSlabels the root of the sub-tree.iii.
Each external vertex is constructed froman elementary RTCS consisting of eitherone pair of matching tags or a singleempty tag.iv.
Suppose one pair of matching tagswraps another, its corresponding vertexis an ancestor of another.v.
Suppose two pairs of matching tags areside by side, their corresponding verticesare siblings in a fixed order.vi.
A sub-tree of an MPT is still an MPT.2.2 What is a list?Before introducing how to detect lists, let us findout what a list is.
Visually, a list consists of twokinds of components, items and intervals.
Eachtwo consecutive items are separated by aninterval.
Our key idea is to detect the intervalsand then compare the consecutive itemsseparated by the intervals.
If we can find asequence of similar items separated with thesame interval, it is a list, in which the items areactually RTCSs.Fig.
6 The rendering of the QA-pairsrespectively corresponding to the questionsembedded in Fig.
5.RootHR P P PA FONT FONT FONTBIBIFONT FONT FONTFONT FONT A FONTFONTFig.
7 An MPT constructed from the first RTCS,i.e.
the part in the first block, in Fig.
6.RootHR P P PA FONT FONT FONTBIBIFONT FONT FONTFONT A FONTFONTBIULFig.
8 An MPT constructed from the secondRTCS, i.e.
the part in the second block, in Fig.
6.2.3 Measurement of the Similarity between twoRTCSsFor the term ?similar?
mentioned above, weneed a measurement for computing thesimilarity between two RTCSs.
We can measuretheir similarity by comparing their own MPTseven though their RTCSs cannot be compareddirectly.
Figs.
7 and 8 illustrate two similarMPTs that are transformed from two RTCSs ofthe rendering shown in Fig.
6, namely the twoblocks.For each two MPTs  and T , we measuretheir similarity as follows:1T 2(2)( )( ) ( )( ) ( )( ) ( )1 21 21 21 21 20,  if1,  if , and,both  and  are single-vertex trees1 , ,  elsewiseMPTn n sub MPTroot T root Troot T root TSim T TT TSim T T?
?
????
=?= ???
+ ?
?
?where  returns the root tag of an MPT, ()rootn?
denotes a relational weight of a parent to itschildren at level , and  is afunction of estimating the similarity between thetwo MPTs based on their sub-trees?
similarities,which is defined as follows:n ()sub MPTSim ?1 2 , ,1( , ) max ( , ( ))ATAsub MPT MPT A k A kg kBTSim T T Sim T g TT?
== ?
(3)where  is one of the two MPTs  and Tsuch that it subsums fewer sub-trees,AT 1T 2BT  isanother one, and g  denotes a one-to-onefunction from  to AT BT .2.4 List Detection AlgorithmThe algorithm for detecting lists from ahypertext is briefly described as follows:Step 1.
Transform the hypertext into an RTCS.Step 2.
Transform the RTCS into a tag string.Step 3.
Find all the di-tags in the form ofend-start tags.
The positions the di-tagslocated are possible intervals.
Forexample, Fig.
5 shows two identicaldi-tags at lines 52-53 and 59-60.
In thiscase, they are intervals.Step 4.
Cluster all the di-tags.
That is, theidentical di-tags with different positionsare clustered together.Step 5.
For each cluster, sort its di-tags.
Thus,the TC-pair string between each twodi-tags in a cluster is a possible item.Step 6.
Find all possible lists in each cluster byconcatenating the consecutive itemswhose similarities are greater than athreshold.
Note that the items to beconcatenated must be RTCSs.Step 7.
Some of the possible lists maybeoverlap.
For a group of overlapped lists,we choose the one with the highestcumulative similarity as an output.This algorithm is able to detect listsembedded in the documents authored in markuplanguages.
It utilizes the characteristic of theitems in a list being structurally similar.
It isindependent of the tags specifically used forauthoring lists.
That is, it is markup languageindependent.3 Experimental ResultsA Spider [Cho et al 1998, Introna andNissenbaum 2000] was constructed toautomatically collect 14 categories of Websites.Each category contains 100 Websites.
14 people,who did not take part in the core task, wereasked to label the Websites.
For each Website,they manually label the number of the FAQ filesand their located pages.
After removing theWebsites authored in the languages other thanTraditional Chinese, 30,007 pages in 901Websites are retained, in which there are 293FAQ files in 76 Websites.Table 1 Experimental results of FAQ miningfrom 9 categories of Websites consisting of30,007 pages in 901 Websites.Categories FAQ FilesTrueMiningFalseMiningRecallRate (%)PrecisionRate (%)Medium 22 12 13 54.55 48.00Leisure 6 4 0 66.67 100.00Region 8 3 1 37.50 75.00Society 22 16 21 72.73 43.24Politics 32 29 9 90.63 76.32Science 30 15 5 50.00 75.00Computer 76 72 1 94.74 98.63Network 38 35 0 92.11 100.00Medicine 50 20 1 40.00 95.24Total 284 206 51 72.54 80.16Table 1 shows the experimental results, inwhich we remove 5 categories with fewer FAQfiles.
We evaluate the performance in recall rate,precision rate, and accuracy rate.
Summarily, thesystem achieved 72.54% recall rate and 80.16%precision rate.
Since most of the Websitescontain no FAQ files, the average accuracy is99.42%.
It means almost all the redundant listscan be discarded correctly.By error analysis, several main errors are asfollows:(1) Many news articles are entitled ininciting questions.
It makes some falsemining.
(2) Some Websites place FAQ files nearbyin one page.
The nearby FAQ files arerecognized as one FAQ file.
(3) The Spider missed scratching somepages containing FAQ files.ConclusionList is an efficient way to represent information.Many kinds of lists are widely used on theInternet, especially for those we are interested ?FAQ.
By analysing the Web FAQs, we found afact that FAQs are always fully/partiallyauthored in the form of list.
This paper presentsan algorithm to detect lists embedded in WebPages.
The algorithm is independent of the tagsspecifically used for authoring lists.
That is, it ismarkup language independent.
By combiningthe algorithm with some constraints of domainknowledge, we can automatically detect andcollect FAQs from the Web.
The mining taskachieved a performance of 72.54% recall rateand 80.16% precision rate.AcknowledgementsThis paper is a partial result of ProjectA311XS1211 conducted by ITRI undersponsorship of the Ministry of Economic Affairs,R.O.C.ReferencesBaeza-Yates R. and Ribeiro-Neto B.
(1999)Modern Information Retrieval, 1st ed., New York:ACM Press, chap.
6, pp.
149-162.Bray T., Paoli J., Sperberg-McQueen C. M. andMaler E. (2000)  eXtensible Markup Language(XML) 1.0 (Second Edition), W3CRecommendation.Cho J., Garcia-Molina H. and Page L. (1998)Efficient Crawling through URL ordering, In Proc.7th Intl.
World Wide Web Conference (WWW 98),Brisbane, Australia, April 14-18, pp.
161-172.Francis B., Homer A. and Ullman C. (1999)  IE 5Dynamic HTML Programmer?s Reference, 1st ed.,Wrox Press Ltd.Goldfarb C. (1990)  The SGML Handbook, OxfordUniversity Press, Oxford.Hopcroft J. E. and Ullman J. D. (1979)  Introductionto Automata Theory, Languages, and Computation,Addison-Wesley Publishing Company, chap.
6, pp.13-54.Introna L. and Nissenbaum H. (2000)  Defining theWeb: The Politics of Search Engines, Computer,vol.
33, pp.
54-62.ISO 8613 (1989)  Office Document Architecture(ODA) and Interchange Format.ISO 8879 (1986)  Information Processing ?
Textand Office Systems ?
Standard GeneralizedMarkup Language (SGML).Lai Y. S. and Wu C. H. (2000)  Intention Extractionand Semantic Matching for Internet FAQ RetrievalUsing Spoken Language Query, In Proc.
6th Intl.Conference on Spoken Language Processing.Li C. N. and Thompson S. A.
(1981)  MandarinChinese: A Functional Reference Grammar,University of California Press, pp.
520-563.Pemberton S., Altheim M., Austin D., Boumphrey F.,Burger J., Donoho A. W., Dooley S., Hofrichter K.,Hoschka P., Ishikawa M., Kate W. ten, King P.,Klante P., Matsui S., McCarron S., Navarro A.,Nies Z., Raggett D., Schmitz P., SchnitzenbaumerS., Stark P., Wilson C., Wugofski T. and ZigmondD.
(2000)  XHTMLTM 1.0: The ExtensibleHyperText Markup Language, W3CRecommendation.Raggett D., Hors A. L. and Jacobs I.
(1998)  HTML4.0 Specification, W3C Recommendation, pp.24-26, April 1998.
