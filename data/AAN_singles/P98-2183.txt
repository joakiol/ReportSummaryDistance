A Descriptive Characterization of Tree-Adjoining Languages(Project Note)James RogersDept.
of Computer ScienceUniv.
of Central Florida, Orlando, FL, USAAbst rac tSince the early Sixties and Seventies it has beenknown that the regular and context-free lan-guages are characterized by definability in themonadic second-order theory of certain struc-tures.
More recently, these descriptive charac-terizations have been used to obtain complex-ity results for constraint- and principle-basedtheories of syntax and to provide a uniformmodel-theoretic framework for exploring the re-lationship between theories expressed in dis-parate formal terms.
These results have beenlimited, to an extent, by the lack of descrip-tive characterizations of language classes be-yond the context-free.
Recently, we have shownthat tree-adjoining languages (in a mildly gener-alized form) can be characterized by recognitionby automata operating on three-dimensionaltree manifolds, a three-dimensional analog oftrees.
In this paper, we exploit these automata-theoretic results to obtain a characterizationof the tree-adjoining languages by definabilityin the monadic second-order theory of thesethree-dimensional tree manifolds.
This not onlyopens the way to extending the tools of model-theoretic syntax to the level of TALs, but pro-vides a highly flexible mechanism for definingTAGs in terms of logical constraints.1 In t roduct ionIn the early Sixties Biichi (1960) and El-got (1961) established that a set of strings wasregular iff it was definable in the weak monadicsecond-order theory of the natural numberswith successor (wS1S).
In the early Seventiesan extension to the context-free languages wasobtained by Thatcher and Wright (1968) andDoner (1970) who established that the CFLswere all and only the sets of strings forming theyield of sets of finite trees definable in the weakmonadic second-order theory of multiple succes-sors (wSnS).
These descriptive characterizationshave natural application to constraint- andprinciple-based theories of syntax.
We have em-ployed them in exploring the language-theoreticcomplexity of theories in GB (Rogers, 1994;Rogers, 1997b) and GPSG (Rogers, 1997a) andhave used these model-theoretic interpretationsas a uniform framework in which to comparethese formalisms (Rogers, 1996).
They havealso provided a foundation for an approachto principle-based parsing via compilation intotree-automata (Morawietz and Cornell, 1997).Outside the realm of Computational Linguis-tics, these results have been employed in the-orem proving with applications to program andhardware verification (Henriksen et al, 1995;Biehl et al, 1996; Kelb et al, 1997).
Thescope of each of these applications is limited,to some extent, by the fact that there are nosuch descriptive characterizations of classes oflanguages beyond the context-free.
As a result,there has been considerable interest in extend-ing the basic results (MSnnich, 1997; Volger,1997) but, prior to the work reported here, theproposed extensions have not preserved the sim-plicity of the original results.Recently, in (Rogers, 1997c), we introduceda class of labeled three-dimensional tree-likestructures (three-dimensional tree manifolds--3-TM) which serve simultaneously as thederived and derivation structures of TreeAdjoining-Grammars (TAGs) in exactly thesame way that labeled trees can serve as bothderived and derivation structures for CFGs.
Wedefined a class of automata over these struc-tures that are a generalization of tree-automata(which are, in turn, an analogous generalizationof ordinary finite-state automata over strings)and showed that the class of tree manifolds rec-1117ognized by these automata re exactly the classof tree manifolds generated by TAGs if one re-laxes the usual requirement that the labels ofthe root and foot of an auxiliary tree and thelabel of the node at which it adjoins all be iden-tical.Thus there are analogous classes of automataat the level of labeled three-dimensional treemanifolds, the level of labeled trees and at thelevel of strings (which can be understood astwo- and one-dimensional tree manifolds) whichrecognize sets of structures that yield, respec-tively, the TALs, the CFLs, and the regularlanguages.
Furthermore, the nature of the gen-eralization between each level and the next issimple enough that many results lift directlyfrom one level to the next.
In particular, weget that the recognizable sets at each level areclosed under union, intersection, relative com-plement, projection, cylindrification, and de-terminization and that emptiness of the rec-ognizable sets is decidable.
These are exactlythe properties one needs to establish that rec-ognizability by the automata over a class ofstructures characterizes satisfiability of monadicsecond-order formulae in the language appropri-ate for that class.
Thus, just as the proofs of clo-sure properties lift directly from one level to thenext, Doner's and Thatcher and Wright's proofsthat the recognizable sets of trees are char-acterized by definability in wSnS lift directlyto a proof that the recognizable sets of three-dimensional tree manifolds are characterized bydefinability in their weak monadic second-ordertheory (which we will refer to as wSnT3).In this paper we carry out this program.
Inthe next section we introduce 3-TMs, our uni-form notion of automaton over tree manifoldsof arbitrary (finite) dimension and indicate thenature of the dimension-independent proofs ofclosure properties.
In Section 3 we introducewSnT3, the weak monadic second-order theoryof n-branching 3-TM, and sketch the proof thatthe sets definable in wSnT3 are exactly thoserecognizable by 3-TM automata.
This, whencoupled with the characterization f TALs inRogers (1997c), gives us our descriptive char-acterization of TALs: a set of strings is gener-ated by a TAG (modulo the generalization ofRogers (1997c)) iff it is the (string) yield of aset of 3-TM definable in wSnT3.
Finally, in Sec-tion 4 we look at how working in wSnT3 allows apotentially more transparent means of definingTALs and, in particular, a simplified treatmentof constraints on modifiers in TAGs.
Due to thelimited length of this note, many of the detailsare omitted.
The reader is directed to (Rogers,1998) for a more complete treatment.2 T ree  Man i fo lds  and  AutomataTree manifolds are a generalization to arbi-trary dimensions of Gorn's tree domains (Gorn,1967).
A tree domain is a set of node addressdrawn from N* (that is, a set of strings of nat-ural numbers) in which c is the address of theroot and the children of a node at address w oc-cur at addresses w0, w l , .
.
.
,  in left-to-right or-der.
To be well formed, a tree domain mustbe downward closed wrt to domination, whichcorresponds to being prefix closed, and left sib-ling closed in the sense that if wi occurs thenso does wj for all j < i.
In generalizing these,we can define a one-dimensional analog as stringdomains: downward closed sets of natural num-bers interpreted as string addresses.
From thispoint of view, the address of a node in a treedomain can be understood as the sequence ofstring addresses one follows in tracing the pathfrom the root to that node.
If we represent Nin unary (with n represented as 1 n) then thedownward closure property of string domainsbecomes a form of prefix closure analogous todownward closure wrt domination in tree do-mains, tree domains become sequences of se-quences of 'l's, and the left-closure property oftree domains becomes a prefix closure propertyfor the embedded sequences.Raising this to higher dimensions, we obtain,next, a class of structures in which each nodeexpands into a (possibly empty) tree.
A, three-dimensional tree manifold (3-TM), then, is setof sequences of tree addresses (that is, addressesof nodes in tree domains) tracing the paths fromthe root of one of these structures to each ofthe nodes in it.
Again this must be downwardclosed wrt domination in the third dimension,equivalently wrt prefix, the sets of tree addresseslabeling the children of any node must be down-ward closed wrt domination in the second di-mension (again wrt to prefix), and the sets ofstring addresses labeling the children of anynode in any of these trees must be downward1118closed wrt domination in the first dimension(left-of, and, yet again, prefix).Thus 3-TM, treedomains (2-TM), and string domains (1-TM)can be defined uniformly as dth-order sequencesof ' l 's which are hereditarily prefix closed.
Wewill denote the set of all 3-TM as T d. For anyalphabet E, a E-labeled d-dimensional tree man-ifold is a pair (T, r) where T is a d-TM andr : T ~ E is an assignment of labels in E tothe nodes in T. We will denote the set of allE-labeled d-TM as T d.Mimicking the development of tree manifolds,we can define automata over labeled 3-TM as ageneralization of automata over labeled tree do-mains which, in turn, can be understood as ananalogous generalization of ordinary finite-stateautomata over strings (labeled string domains).A d-TM automaton with state set Q and alpha-bet E is a finite set:J:\[d _C \]\[\] ?
Q x ~Q-1.The interpretation of a tuple (a, q, 7) E A d isthat if a node of a d-TM is labeled a and Tencodes the assignment of states to its children,then that node may be assigned state q.
A runof an d-TM automaton A on a E-labeled d-TM7 = (T, r) is an assignment r : T -+ Q of statesin Q to nodes in T in which each assignmentis licensed by A.
If we let Q0 c Q be any setof accepting states, then the set of (finite) E-labeled d-TM recognized by A, relative to Q0,is that set for which there is a run of A thatassigns the root a state in Q0.
A set of d-TMis recognizable iff it is A(Qo) for some d-TMautomaton ,4 and set of accepting states Q0.The strength of the uniform definition of d-TM automata is that many, even most, proper-ties of the sets they recognize can be proveduniformly--independently of their dimension.It is easy to see that in the typical "cross-product" construction of the proof of closureunder intersection, for instance, the dimension-ality of the TMs is a parameter that determinesthe type of the objects being manipulated butdoes not affect the manner of their manipula-tion.
Uniform proofs can be obtained for clo-sure of recognizable sets under determinization(in a bottom-up sense), projection, cylindrifica-tion, Boolean operations and for decidability ofemptiness.3 wSnT3We are now in a position to build relationalstructures on d-dimensional tree manifolds.
LetT d be the complete n-branching d-TM--that inwhich every point has a child structure that hasdepth n in all its (d -  1) dimensions.
Let-\]-3 def 3 = (Tn, '~I, '~2, '~3>where, for all x,y 6 T 3, x "~i y iff x is the im-mediate predecessor of y in the ith -dimension.The weak monadic second-order language ofT 3 includes constants for each of the relations(we let them stand for themselves), the usuallogical connectives, quantifiers and groupingsymbols, and two countably infinite sets of vari-ables, one ranging over individuals (for whichwe employ lowercase) and one ranging over fi-nite subsets (for which we employ uppercase).If ~o(xl,..., xn, X1 , .
.
.
,  Am) is a formula of thislanguage with free variables among the xi andXj, then we will assert hat it is satisfied in T 3by an assignment s (mapping the 'xi's to in-dividuals and 'Xj's to finite subsets) with thenotation T 3 ~ ~ Is\].
The set of all sentencesof this language that are satisfied by T~ is theweak monadic second-order theory of T 3, de-noted wSnT3.A set T of E-labeled 3-TM is definable inwSnT3 iff there is a formula ~r(XT, Xa)aez,with free variables among XT (interpreted asthe domain of a tree) and Xa for each a E E(interpreted as the set of a-labeled points in T),such that(T,~) E T -~ '.-T\[ b T,X  {p I = a}\].It should be reasonably easy to see that anyrecognizable set can be defined by encoding thelocal TM of an accepting automaton in formu-lae in which the labels and states occur as freevariables and then requiring every node to sat-isfy one of those formulae.
One then requiresthe root to be labeled with an accepting stateand "hides" the states by existentially bindingthem.The proof that every set of trees definable inwSnT3 is recognizable, while a little more in-volved, is just a lift of the proofs of Doner andThatcher and Wright.The initial step is to showthat every formula in the language of wSnT31119can be reduced to equivalent formulae in whichonly set variables occur and which employ onlythe predicates X C_ Y (with the obvious inter-pretation) and X '~i Y (satisfied iff X and Yare both singleton and the sole element of Xstands in the appropriate relation to the soleelement of Y).
It is easy to construct 3-TM au-tomata (over the alphabet 9~({X, Y}), where \[Pdenotes power set) which accept rees encodingsatisfying assignments for these atomic formu-lae.
The extension to arbitrary formulae (overthese atomic formulae) can then be carried outby induction on the structure of the formulaeusing the closure properties of the recognizablesets.4 Def in ing  TALs  in wSnT3The signature of wSnT3 is inconvenient for ex-pressing linguistic constraints.
In particular,one of the strengths of the model-theoretic ap-proach is the ability to define long-distance r -lationships without having to explicitly encodethem in the labels of the intervening nodes.We can extend the immediate predecessor re-lations to relations corresponding to (proper)above (within the 3-TM), domination (within atree), and precedence (within a set of siblings)using:def  X T~ i y *.
.. x ~ y A (3X) \ [X(x )  A X(y )A(Vz ) \ [X (z )  ~ (z ~ y V (3 !z ' ) \ [X (z ' )  A z "~i z' \]) \] \] .Which simply asserts that there is a sequenceof (at least two) points linearly ordered by '~i inwhich x precedes y.To extend these through the entire structurewe have to address the fact that the two dimen-sional yield of a 3-TM is not well defined--thereis nothing that determines which leaf of the treeexpanding a node dominates the subtree rootedat that node.
To resolve this, we extend ourstructures to include a set H picking out exactlyone head in each set of siblings, with the "foot"of a tree being that leaf reached from the rootby a path of all heads.
Given H, it is possible to+ + define '~2 and '~1, variations of dominance andprecedence 1 that are inherited by substructuresin the appropriate way.
At the same time, it isconvenient to include the labels explicitly in thestructures.
A headed E-labeled 3-TM, then, is1Of course <3 + is just ~3.a structure:(T, <i, ~i, <~+, H, Pa) l<_i<a, ~g,where T is a rooted, connected subset of T 3 forsome n.With this signature it is easy to define theset of 3-TM that captures a TAG in the sensethat their 2-dimensional yields--the set of max-imal points wrt ,~+, ordered by 4 + and ,~+--formthe set of trees derived by the TAG.
Note thatobligatory (OA) and null (NA) adjoining con-straints translate to a requirement that a nodebe (non-)maximal wrt ,~+.
In our automata-theoretic interpretation of TAGs selective ad-joining (SA) constraints are encoded in thestates.
Here we can express them directly: aconstraint specifying the modifier trees whichmay adjoin to an N node, for instance, can bestated as a condition on the label of the rootnode of trees immediately below N nodes.In general, of course, SA constraints dependnot only on the attributes (the label) of a node,but also on the elementary tree in which it oc-curs and its position in that tree.
Both of theseconditions are actually expressions of the localcontext of the node.
Here, again, we can ex-press such conditions directly--in terms of therelevant elements of the node's neighborhood.At least in some cases this seems likely to allowfor a more general expression of the constraints,abstracting away from the irrelevant details ofthe context.Finally, there are circumstances in which theprimitive locality of SA constraints in TAGsis inconvenient.
Schabes and Shieber (1994),for instance, suggest allowing multiple adjunc-tions of modifier trees to the same node onthe grounds that selectional constraints hold be-tween the modified node and each of its modi-fiers but, if only a single adjunction may occurat the modified node, only the first tree thatis adjoined will actually be local to that node.They point out that, while it is possible to passthese constraints through the tree by encodingthem in the labels of the intervening nodes, sucha solution can have wide ranging effects on theoverall grammar.
As we noted above, the ex-pression of such non-local constraints i one ofthe strengths of the model-theoretic approach.We can state them in a purely natural way--asa simple restriction on the types of the modifier1120trees which can occur below (in the ,~+ sense)the modified node.5 Conc lus ionWe have obtained a descriptive characterizationof the TALs via a generalization f existing char-acterizations ofthe CFLs and regular languages.These results extend the scope of the model-theoretic tools for obtaining language-theoreticcomplexity results for constraint- and principle-based theories of syntax to the TALs and, carry-ing the generalization to arbitrary dimensions,should extend it to cover a wide range of mildlycontext-sensitive language classes.
Moreover,the generalization is natural enough that theresults it provides should easily integrate withexisting results employing the model-theoreticframework to illuminate relationships betweentheories.
Finally, we believe that this character-ization provides an approach to defining TALsin a highly flexible and theoretically naturalway.Re ferencesM.
Biehl, N. Klarlund, and T. Rauhe.
1996.Algorithms for guided tree automata.
InWIA '96, LNCS 1260, London, Ontario.J.
R. Biichi.
1960.
Weak second-order arith-metic and finite automata.
Zeitschrift fiirmathematische Logik und Grundlagen derMathematik, 6:66-92.John Doner.
1970.
Tree acceptors and some oftheir applications.
Journal of Computer andSystem Sciences, 4:406-451.Calvin C. Elgot.
1961.
Decision problems of fi-nite automata design and related arithmetics.Transactions of the American MathematicalSociety, 98:21-51.Saul Gorn.
1967.
Explicit definitions and lin-guistic dominoes.
In Systems and ComputerScience, Proceedings o.f the Conference heldat Univ.
of Western Ontario, 1965.
Univ.
ofToronto Press.J.
G. Henriksen, J. Jensen, M. Jorgensen,N.
Klarlund, R. Paige, T. Rauhe, andA.
Sandhol.
1995.
MONA: Monadic second-order logic in practice.
In TACAS '95, LNCS1019, Aarhus, Denmark.P.
Kelb, T. Margaria, M. Mendler, and C. Gsot-tberger.
1997.
MOSEL: A flexible toolset formonadic second-order logic.
In TACAS '97,LNCS 1217, Enschede, The Netherlands.Uwe MSnnich.
1997.
Adjunction as substitu-tion: An algebraic formulation of regular,context-free and tree adjoining languages.
InFormal Grammar, Aix-en-Provence, Ft.Frank Morawietz and Tom Cornell.
1997.
Rep-resenting constraints with automata.
In Pro-ceedings of the 35th Annual Meeting of theA CL, pages 468-475, Madrid, Spain.James Rogers.
1994.
Studies in the Logic ofTrees with Applications to Grammar For-malisms.
Ph.D. thesis, Department of Com-puter and Information Sciences, University ofDelaware.James Rogers.
1996.
A model-theoretic frame-work for theories of syntax.
In Proceedings ofthe 3~th Annual Meeting of the ACL, pages10-16, Santa Cruz, CA.James Rogers.
1997a.
"Grammarless" phrasestructure grammar.
Linguistics and Philoso-phy, 20:721-746.James Rogers.
1997b.
On descriptive complex-ity, language complexity, and GB.
In Spec-ifying Syntactic Structures, pages 157-184.CSLI Publications.James Rogers.
1997c.
A unified notion of de-rived and derivation structures in TAG.
InProceedings of the Fifth Meeting on Mathe-matics of Language MOL5 '97, Saarbriicken,FRG.James Rogers.
1998.
A descriptive character-ization of tree-adjoining languages.
Techni-cal Report CS-TR-98-01, Univ.
of CentralFlorida.
Also available from the CMP-LGrepository as paper number cmp-lg/9805008.Yves Schabes and Stuart M. Shieber.
1994.An alternative conception of tree-adjoiningderivation.
Computational Linguistics,20(1):91-124.J.
W. Thatcher and J.
B. Wright.
1968.
Gen-eralized finite automata theory with an ap-plication to a decision problem of second-order logic.
Mathematical Systems Theory,2(1):57-81.Hugo Volger.
1997.
Principle languages andprinciple based parsing.
Technical Report 82,SFB 340, Univ.
of Tfibingen.1121
