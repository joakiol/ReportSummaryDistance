The Role of Underlying Structure in Text GenerationRobert Alan GranvilleBBN Systems and Technologies Corporation33 Moulton StreetCambridge, Massachusetts 02138AbstractWhile a coherent organization is necessary for the genera-tion of a multisentential paragraph, this organization itselfconveys information, such as what knowledge is primaryand what is secondary, and which of the various possiblerelationships between the pieces of knowledge the speakerwishes to make explicit.
The organization of the messageis an integral part of the message.
Given this, it is wrong toassign the task of text structuring to any component otherthan the one that desires to convey the message in the firstplace.
This paper describes George, a proposed systemthat organizes its text before the task of generation is be-gun.
Particular attention is given to a new knowledge baseparadigm called functional hierarchy, which is designed tofacilitate xplanation generation, and how it can be usedto build Rhetorical Structure Theory representations thatspecify text organization before actual generation is begun.IntroductionIt is a well known fact that just as we can't string togethera collection of words in an arbitrary order and achieve awell-formed sentence, we can't string sentences together inan arbitrary fashion and achieve a meaningful paragraph.The underlying structure of text and how this contributesto coherence is the subject of active research, most notablyby Hovy \[I-Iov88\].
However this research seems to ignorethat different organizations of sentences yield paragraphswith different meanings, that the structure of a paragraphis an integral part of what the paragraph conveys.
Giventhis, it is wrong to assign the task of text structuring to anycomponent other than the one that desires to convey themessage in the first place.This paper describes George, a proposed system thatorganizes its text before the task of generation is begun.George is an extension of the MACH-HI intelligent tutor-ing system \[KGM90\] that uses the expert system knowl-edge base to choose the appropriate underlying text struc-ture along with the knowledge to be presented in the text,rather than have the text generator try to build the un-derlying structure when presented with only the pieces ofknowledge to be conveyed.After a brief review of Hovy's approach toward textstructuring in the next section, we explore the role of textstructure and how it affects the total message being con-veyed in the third section.
The fourth section describesGeorge, paying particular attention to the intelligent tutor-ing system knowledge base and its unique organization i toa functional hierarchy, a new knowledge base paradigm de-signed to facilitate xplanation generation.
The fifth sectiondiscusses how we can use the functional hierarchy knowl-edge base to help direct he selection of the message struc-ture, using examples from MACH-HI which demonstrateagain why this selection process must occur before gen-eration.
We conclude this section with a brief discussionof some of the open issues to be resolved as part of thisresearch effort.Hovy's ApproachIn \[Hov88\] Hovy correctly states that arbitrary orderingsof facts will not lead to satisfactory text.
The problem ashe sees it then is to determine which orderings will leadto acceptable t xt, and with his text structuring system heattempts to address this problem.Hovy takes his input to be an unordered set of chunksof knowledge of equal weight (importance) generated byan expert system.
Since an arbitrary ordering won't work,and there are far too many possible combinations for anexhaustive search (n!
for n sentences), the structure mustsomehow be built, and this building must be guided by thesentences themselves.Hovy uses Rhetorical Structure Theory \[MT87\], or RST,as the basis for his structure.
RST is a formalism for spec-ifying the relationships between pieces of text.
Hovy's textstructuring system builds a communicative plan using RSTrelations as its operators.
The constraints of the RST rela-tions become the operator preconditions, and the effect orgoal fields of the relations become the effects of the opera-tots.
These operators are used in a standard plan generationsystem with the resulting plan being an RST structure repre-senting the organization of a coherent paragraph conveyingall the input facts.105St ructure  as MessageAn underlying assumption i Hovy's approach is that theexpert system intends merely to convey a set of facts or"chunks of knowledge".
This is an overly simplifying as-sumption.
A coherent paragraph communicates more thanthe simple chunk.~ of knowledge stated in its sentences.
Italso communicates the relationships between these chunks,the very relationships RST represents.
When a speaker hasa communicative goal, the goal is not to present a set offacts in any coherent fashion, but rather to present them inan organization that conveys in addition to the facts howthe speaker perceives them to be related.
The underlyingstructure of the message is as much a part of the messageas is the contents of the message.Consider the following two example paragraphs:\[1\] You must start the ignition by turning the car key.Otherwise you don't start the motor, and can't drivethe car.\[2\] You must turn the car key.
Otherwise you can'tdrive the car since you didn't start the motor by start-ing the ignition.Paragraphs I l l  and \[2\] contain the same four simple facts,but they use different organizations and have different ef-fects.
One difference is the points each paragraph empha-sizes.
In \[A\], starting the ignition is most central, withstarting the motor as the second most important clause.In contrast, \[B\] emphasizes turning the car key strongest,followed next by being able to drive the car.
Another dif-ference is that Paragraph A\] explicitly shows a relationshipbetween starting the ignition and turning the car key, whileno such relationship s stated in Paragraph B.
Even thoughthe two paragraphs contain exactly the same four simplefacts, the messages the convey are not equivalent.Now let us return to Hovy, and consider his example in\[I-Iov88\] of a coherent paragraph with the RST structureshown in Figure 1:(1) The system asks the user to tell it the character-istic of the program to be enhanced.
(2) Then thesystem applies transformations to the program.
(3) Inparticular, the system scans the program (4)/n orderto foul opportunities to apply transformations to theprogram.
(5) Then the system resolves conflicts.
(6) Itcon~rms the enhancement with the user.
(7) Finally,It performs the enhancement.He contrasts this with the following, which presents thesame information, he says, but in an incoherent fashion:(!)
The system performs the enhancement.
(2) Beforethat, the system resolves conflicts.
(3) First, the sys-tem asks the user to tell it the characteristic of theprogram to be enhanced.
(4) The system applies thetransformations to the program.
(5) It confirms the en-hancement with the user.
(6) It scans the program (7)in order to find opportunities to apply transformationsto the program.But we can, of course, find an RST for this second para-graph, as in Figure 2, so the problem with this example isnot that it doesn't have an underlying structure.
Rather, theunderlying structure doesn't represent the relationships be-tween the facts as we know them to be.
These facts simplydo not make sense as seven unrelated steps performed inthe order presented in this paragraph.
That is, part of thecomplete message (it's organization) is incorrect.An  A l te rnat ive  ApproachRather than attempt to build an appropriate RST that will fitisolated, unstructured input from an expert system, Georgetakes both the facts to be presented and the relational struc-ture of these facts as its input.
This is possible because inthe case of MACH-III the knowledge base of the expertsystem component is organized as a functional hierarchy.Functional  H ierarchyFunctional Hierarchy is a new paradigm for organizing ex-pert system knowledge bases, based on the procedural ab-straction principles of Liskov and Guttag \[LG86\].
Func-tional hierarchy differs greatly from production rules (thecustomary basis of an expert system) in that functional hi-erarchy rules define the actions a system can take, ratherthan the conditions under which actions may take place.The concept of "action" is expanded to include all actionsthe system takes, including control decisions, rather thanjust changes to the database, thereby eliminating the needfor a separate control structure.
These rules are arrangedinto a hierarchy, where the action of a rule is defined as acombination of other actions.There are several advantages to using a functional hier-archy over a production rule system.
All the benefits thataccrue from the use of procedural bstraction are manifest:?
easier to understand?
easier to write?
easier to maintain and modifyAll the knowledge in the system can be explicitly rep-resented in the system since there is no need for externalmechanisms ( uch as conflict resolution procedures) whereknowledge can be hidden.
This allows enhanced expla-nation capabilities.
Finally, the knowledge can be easilyorganized into a desirable framework.Functional hierarchy was used very successfully inMACH-III (Maintenance Aid Computer for HAWK - In-telligent Institutional Instructor), an intelligent simulationand tutoring system to help train novice mechanics to trou-bleshoot he HAWK HIPIR radar (ANPQ-57) developedby BBN Systems and Technologies Corporation for theArmy Research Institute.
The system is currently beingused as part of the curriculum of the US Army's trainingschool.
For a complete description of MAC'H-HI and theuse of functional hierarchy, see \[KGM90\], \[KGM89\], and\[MTG89\].An  example from the functional hierarchy used inMACH-III (called the troubleshooting tree) is shown in1062 3-76 7Figure I: RST for Hovy's Coherent Paragraph6 7Figure 2: RST for Hovy's Incoherent Paragraph,~CHS~LOI\[ C~LOPOW~ \[ CHZCKLOPL~ I CABLEW1 ~1 I P~2as I CHECKRF I SIGNAL INPUT I ws INOT BF.~Go'r-CK PUJG I I CH~:XPWGWl P12J3 I \[ Wl  P19J2Figure 3: I..O Fault Example107Figure 3.
The root node of this tree, labelled LO LAMP,defines how to determine why the IX) Lamp is lit, indicatinga "local oscillator fault.
In other words, this node defineshow to isolate an LO problem.
According to the tree, isolat-ing the LO fault is done by checking for an LO malfunction(the left child of the LO LAMP node), and checking to seeif the LO function is being monitored correctly (the rightchild of the LO LAMP node).
It is important to note thatat this root node neither subaction is defined.
That is, therule defined by this node contains calls to the procedures tocheck for an LO malfunction and to check to see if the LOfunction is being monitored correctly, but does not containdefinitions for these procedures.Continuing our example, checking for an LO malfunction(the MALFUNCTIONING LO node in the tree) consistsof checking LO inputs (the left child) and checking the LOitself (the right child).
Since checking individual devices,such as the LO, is a primitive action in the MACH-IIIsimulation that needs no further definition, the CHECKLO node has no children.
The CHECK LO INPUTSnode, defining how to check LO inputs, has three children,and so checking LO inputs consists of three steps: checkingthe LO power cable Wl, checking the LO plug P12J3, andchecking the RF signal input cable W6.
Since these actionsare again primitive in the simulation, they need no furtherdefinition, and their corresponding odes have no children.It should he noted that from a strictly functional pointof view the intermediate rules are not necessary.
We couldhave simply defined the action of isolating an LO fault asperforming the seven primitive actions, resulting in the treein Figure 4, and the resulting system would still be able tocorrectly solve the problem.
However, the system wouldnot be able to explain why these steps were being taken.
Incontrast, he system of Figure 3 knows, for example, thatchecking LO plug P12J3 is necessary to determine whetherthe LO inputs are functioning properly, which in turn musthe known to determine whether the local oscillator is mal-functioning.
The point is that the functional hierarchy con-cisely specifies the knowledge the system explicitly has inits knowledge base, and exactly how the pieces of knowl-edge are interrelated.
Thus the hierarchy defines the levelof explanation of which the system is capable.Explanations from a Functional HierarchySince the troubleshooting expert system knowledge baseis organized as a tree, troubleshooting the radar consistsof moving correctly through that tree from node to node.This simplifies the task of evaluating the appropriatenessof a student's actions, since each action she takes "moves"the student from one node (the current node) to another.Each move can be one of four types.
The simplest caseis when the node moved to represents an action alreadydone.
(In the troubleshooting procedures for the HAWK,there is never any need to repeat steps.)
The next case iswhen the node moved to is a child of the current node, inwhich case the system judges the action as good.
The thirdcase is when the action moves the student to a node thatis not a descendant of the current node, but is part of thetroubleshooting tree for the current problem.
The systemevaluates such moves to be skipping around from task totask before they are completed.
The final case is when thenode isn't in the current problem's troubleshooting tree, andthe system determines that the action is inappropriate forthe problem at hand.The current MACH-m system takes these evaluationscoupled with the knowledge of the nodes involved to cre-ate messages in English for the student using a schemebased on templates with slots.
Each of the four cases hastemplates with slots to be filled by information containedin the nodes, such as which components of the radar are in-volved and what tests are performed on them by the actionrepresented.For example, the following is a typical message actuallygenerated by MACH-III to report an action judged to be"skipping around":Checking the W4 Pl P2J3 is a reasonable step sinceit is part of checking RCVR RF inputs.
However.
thisleaves investigating whether noise is being introducedduring modulation unaone.If the student asks for more information, the system gen-erates the following:Checking the W4 Pl P2J5 is part of checking RCVRRF inputs, which is part of investigating whetherfeedthrough is not being correctly removed, which ispart of considering the RCVR Noise Lamp.
On theother hand, investigating whether noise is being intro-duced uring modulation consists of checking the SpinMotor power input, the W2, checking the NutatingScanner Assembly, and checking the Scan DriverAssembly.
Therefore, checking the W4 P1 P2J5 isnot part of investigating whether noise is being intro-duced during modulation.Investigating whether noise is being introduced ur-ing modulation isn't finished yet since checking theScan Driver Assembly, which is part of investigatingwhether noise is being introduced uring modulation,isn't done.Functional Hierarchy with RSTGeorge is an extension of MACH-III that dynamically gen-erates the critiques for the expert roubleshooting system.Instead of using the knowledge resident in the nodes ofthe troubleshooting tree to instantiate slots in a prewrittentemplate, the system organizes this knowledge into an RSTstructure representing those relationships of the facts thetroubleshooter wishes to convey.
The instantiated struc-tures are then traversed in left to right order to build in-put messages for the Mumble-86 text generation system\[MMA*87\].Preliminary research as shown that subtle differences inwhat is being stressed in a text, what is made secondary,and what is being assumed can be manifested by variationsin the underlying RST representation.
By definition, the108O-I\[O~ PLtg~ Cte3K I c, Ec~,o~-q i  ~ .c~PU~l  ee~ I c~-r_c~pu.~Figure 4: LO Fault Revisitednuclei of an RST structure are more central to the text thanare the satellites.
Additionally, the relationships explicitlyrepresented in the structure are conveyed in the text (ei-ther explicitly or through the use of "clue words"), whilerelationships not represented are left tacit.As an example, consider the ten paragraphs shown inFigure 5.
Paragraphs B through J are variations of anactual text produced by MACH-IH, Paragraph A.
All tenparagraphs contain the same "chunks" of knowledge, buteach presents this knowledge differently.
The main thrustof Paragraph A is that you should execute a Lamp Testin order to know whether the BITE Test indications arecorrect.
The synopsis of Paragraph B is that if you don'tpush the Lamp Test Switch, you won't know how to pro-ceed.
The other two facts are merely used to support hiscontention.These two paragraphs also express different relationshipsbetween the four facts.
In Paragraph A, we are told explic-itly that a Lamp Test is executed by pushing the Lamp TestSwitch.
In contrast, Paragraph B has no direct relation be-tween executing a Lamp Test and pushing the Lamp TestSwitch.
Figures 6 and 7 show the differing RST struc-tures for these two paragraphs.
(Note that we have notlabelled the relationships in these two figures for clarity'ssake, since for this example we have only discussed the ex-istence or nonexistence of relationships, and not what thoserelationships are.
)With ten different ways of stating the same four facts (byno means an exhaustive list), each of which presents themin a different light, and each of which makes explicit andtacit different relationships between these facts, it would beimpossible for a text generating system to determine whichwas the "best" variation given only the four facts.
Con-sequently, the component that decides these four facts arethe correct ones to present must also be the component thatdecides what is the primary information, what is the sec-ondary or supporting information, and what relationshipsbetween these pieces of information must be stated.
Thatis, this component must also decide the underlying RSTstructure for itself.Geor8e is capable of deciding the RST structures for itstext through fairly straightforward mechanisms.
It followsfrom the particular functional hierarchy knowledge base inthe troubleshooting expert system, there are basically fourtypes of messages that have to be communicated, and se-lection among these four types is dictated by the functionalhierarchy and the student's position in this structure.
Theninstead of choosing from among a relatively small set oftemplates with slots instantlated by the appropriate trou-bleshooting tree nodes as was done in MACH-III, we canchoose from among a relatively small set of RST structures(essentially the RST structures for the templates) with thesame troubleshooting tree nodes providing the pieces ofknowledge the RST structures are organizing.
This givesthe resulting system veater flexibility in generation overthe template and slot generator of MACH-III, where indi-vidual paragraphs (the granularity of the MACH-III tem-plates) read well enough, but multiparagraph texts (as weresometimes required) were predictably poor since each para-graph was generated in isolation.There are of course two important issues that remain tobe discussed, because they remain to be resolved.
Thefirst issue concerns the choice of a specific RST for a mes-sage.
While the MACH-III functional hierarchy contributesa great deal to the selection process, it is by itself not suf-ficient.
While some relationships and emphases can be de-termined from the contents of the message, there are manysubtle variations, uch as those shown in the paragraphs ofFigure 5, which make the selection of an RST harder.
Ex-actly how changes in the RST affect the resulting surfacestructure and what influences contribute to decisions aboutthese changes remain open problems.The second issue is the problem of mulfiparagraph text.Our experience with MACH-III showed us that there ismore to multiparagraph text than stringing together iso-lated well-formed paragraphs, not surprising since the sameis true of multisentential paragraphs and multiword sen-tences.
The underlying structure of the entire text, depict-ing interparagraph relationships and emphases, must alsobe determined for successful generation.
Fortunately, RSTis capable of representing interparagraph structure as wellas intraparagraph structure, giving us the framework forexploring how paragraph structure and total text structureinteract and how these structures affect he surface text.109A.
(2) ~t_ecufing a Lamp Test by (1) pushing the Lamp Test Switch should be the first thingyou should do.
(3) Otherwise you have no way of knowing whether the BITE Testindications are cocrect, (4) and thus no way of knowing how to proceed.B.
(1) Pushing the Lmnp Test Switch should be the first thing you should do.
(4) Otherwiseyou have no way of knowing how to proceed.
(3) since you didn't determine whether theBITE Test indications are correct (2) by executing ?
lamp Test.C.
(1) Pushing the Lamp Test Switch should be the first thing you should do.
(2) Otherwiseyou dou't execute a Lamp Test, (3) which means you have no way of knowing whethex theBITE Test indications are ourrect, (4) and thus no way of knowing how to proceed.D,(1) Pushing the Lamp Test Switch (2) in m'der to execute ?
Lamp Test should be the firstthing you should do.
(3) Otherwise you have no way of knowing whether the BITE Testindications are correct.
(4) md thus no way of knowing how to prococd.E.
(1) Pushing the launp Test Switch should be the in'st thing you should do.
(2) Otherwiseyou don't execute a Lamp Test.
(4) which means you have no way of knowing how to~oceed.
(3) since you have no way of knowing whether the BITE Test indications arecorrect.F .
(2) Executing ?
Lamp Test (1) by pushing the lamp Test Switch should be the first thingyou should do.
(4) Otherwise you have no way of knowing how to proceed.
(3)since youhave no way of knowins whether the BITE Test indications are correct.G.
(1) Pushing the Lamp Test Switch (2) in arder to execute ?
Lamp Test should be the firstthing you should do.
(4) Otherwise you have no way of knowing how to proceed.
(3) sinceyou have no way of knowing whether the BITE Test indications are correct.H.
(1) Pushing the Lamp Test Switch should be the first thins you should do.
(2) Otherwiseyou don't execute ?
Lamp Test (3) in order to determine whether the BITE Test indicationsare correct, (4) stud thus you have no way of knowing how to proceed.I .
(1) Pushing the Lamp Test Switch should be the f irst thing you should do.
(3) Otherwiseyou have no way of knowing whether the BITE Test indications are co~ect (2) since youdidn't execute a Lamp Test, (4) and thus you have no way of knowin S how to proceed.J .
(1) Pushing the Lamp Test Switch should be the first thins you should do.
(4) Otherwiseyou have no way of knowing how to proceed.
(2) since you don't execute ?
Lamp Test (3) inorder to determine whether the BITE Test indications arc correct.F igure  5 :10  Paragraph Var iat ions1 22 1F igure  6: RST  for  Paragraph Ai i 03 2Figure 7: RST for Paragraph BCondusionsWhile a coherent organization is necessary for the genera-tion of a multisentential paragraph, this organization itselfconveys information, such as what knowledge is primaryand what is secondary, and which of the various possiblerelationships between the pieces of knowledge the speakerwishes to make explicit.
The organization of the messageis an integral part of the message, Given this, it is wrong toassign the task of text structuring to any component otherthan the one that desires to convey the message in the firstplace.George is a proposed extension of MACH-III that ac-cepts this fact.
Use of the functional hierarchy trou-bleshooting tree developed for MACH-RI directs the choiceof the correct RST structure from a small set of ~ idates ,with information resident in appropriate troubleshootingtree nodes instantiating the structure.
This instantiated RSTstructure can then be used to build an input message for theMUMBLE-86 generator.
Thus text generation i  George ismore flexible than in MACH-IIL and better flowing text isproduced.There are still several important issues to be resolved,most notably how the selection of a message's underlyingstructure is controlled and how multiparagraph texts canbe properly organized and how this organization affects thefinal text.
The combined use of functional hierarchy andRST as described in this paper gives a solid framework inwhich these issues can be explored.AcknowledgementsThanks to David McDonald, without whose encouragementand timely reviews of drafts this paper would never havebeen written.tHov88\]\[KGM89\]\[KGM90\]\[LG86\]\[MMA*87\]\[MT87\]\[MTG89\]ReferencesEduard H. Hovy.
Planning coherent multisen-tential text.
In Proceedings of the 26th AnnualMeeting of the Association for ComputationalLinguistics, 1988.Laura C. Kurland, Robert Granville, and DawnMacLaughlin.
HAWK MACH-III Explanationsof the Receiver Troubleshooting Tree.
Techni.cal Report, BBN Systems and TechnologiesCorporation, 1989.Laura C. Kurland, Robert Alan Granville, andDawn M. MacLaughlin.
Design, Developmentand Implementation of an Intelligent Tutor-ing System (ITS) for Training Radar Mechan-ics to Troubleshoot.
In Journal of Machine-Mediated Learning, Taylor & Francis, NewYork, 1990. in publication.Barbara Liskov and John Guttag.
Abstrac-tion and Specification in Program Develop-ment.
MIT Press, Cambridge, Massachusetts,1986.Marie W. Meteer, David D. McDonald,Scott D. Anderson, David Forster, Linda S.Gay, Alison K. Huettner, and Penelope Si-bun.
Mumble-86: Design and Implementation.Technical Report COINS Technical Report 87-87, University of Massachusetts at Amherst,Amherst, Massachusetts, 1987.William C. Mann and Sandra A. Thompson.Rhetorical Structure Theory: A Theory of TextOrganization.
Technical Report ISI/RS-87-190, Information Sciences Institute, Marinadel Re),, California, 1987.Dawn MacLaughlin, Yvette Tenney, andRobert Granville.
HAWK MACH-III Expiana-tions of the Transmitter Troubleshooting Tree.Technical Report, BBN Systems and Tech-nologies Corporation, 1989.i i i
