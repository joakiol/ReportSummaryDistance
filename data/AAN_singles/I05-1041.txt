R. Dale et al (Eds.
): IJCNLP 2005, LNAI 3651, pp.
462 ?
473, 2005.?
Springer-Verlag Berlin Heidelberg 2005Improving Statistical Word Alignment with EnsembleMethodsHua Wu and Haifeng WangToshiba (China) Research and Development Center, 5/F., Tower W2, Oriental Plaza,No.1, East Chang An Ave., Dong Cheng District, Beijing, 100738, China{wuhua, wanghaifeng}@rdc.toshiba.com.cnAbstract.
This paper proposes an approach to improve statistical word align-ment with ensemble methods.
Two ensemble methods are investigated: baggingand cross-validation committees.
On these two methods, both weighted votingand unweighted voting are compared under the word alignment task.
In addi-tion, we analyze the effect of different sizes of training sets on the baggingmethod.
Experimental results indicate that both bagging and cross-validationcommittees improve the word alignment results regardless of weighted votingor unweighted voting.
Weighted voting performs consistently better than un-weighted voting on different sizes of training sets.1   IntroductionBilingual word alignment is first introduced as an intermediate result in statisticalmachine translation (SMT) [3].
Besides being used in SMT, it is also used in transla-tion lexicon building [9], transfer rule learning [10], example-based machine transla-tion [14], etc.
In previous alignment methods, some researchers employed statisticalword alignment models to build alignment links [3], [4], [8], [11], [16].
Some re-searchers used similarity and association measures to build alignment links [1], [15].One issue about word alignment is how to improve the performance of a wordaligner when the training data are fixed.
One possible solution is to use ensemblemethods [5], [6].
The ensemble methods were proposed to improve the performanceof classifiers.
An ensemble of classifiers is a set of classifiers whose individual deci-sions are combined in some way (weighted or unweighted voting) to classify newexamples.
Many methods for constructing ensembles have been developed [5].
Onekind of methods is to resample the training examples.
These methods include bagging[2], cross-validation committees [12] and boosting [7].
The two former methods gen-erate the classifiers in parallel while boosting generates the classifiers sequentially.
Inaddition, boosting changes the weights of the training instance that is provided asinput to each inducer based on the previously built classifiers.In this paper, we propose an approach to improve word alignment with ensemblemethods.
Although word alignment is not a classification problem, we can still builddifferent word aligners by resampling the training data.
If these aligners performaccurately and diversely on the corpus [6], they can be employed to improve the wordalignment results.
Here, we investigate two ensemble methods: bagging andImproving Statistical Word Alignment with Ensemble Methods 463cross-validation committees.
For both of the ensemble methods, we employ weightedand unweighted voting to build different ensembles.
Experimental results indicate thatboth bagging and cross-validation committees improve the word alignment results.The weighted ensembles perform much better than the unweighted ensembles accord-ing to our word alignment results.
In addition, we analyze the effect of different sizesof training data on the bagging algorithm.
Experimental results also show that theweighted bagging ensembles perform consistently better than the unweighted baggingensembles on different sizes of training sets.The remainder of the paper is organized as follows.
Section 2 describes statisticalword alignment.
Section 3 describes the bagging algorithm.
Section 4 describes thecross-validation committees.
Section 5 describes how to calculate the weights usedfor voting.
Section 6 presents the evaluation results.
Section 7 discusses why the en-semble methods used in this paper are effective for the word alignment task.
The lastsection concludes this paper and presents the future work.2   Statistical Word AlignmentIn this paper, we use the IBM model 4 as our statistical word alignment model [3].This model only allows word to word and multi-word to word alignments.
Thus, somemulti-word units cannot be correctly aligned.
In order to tackle this problem, we per-form word alignment in two directions (source to target and target to source) as de-scribed in [11].
In this paper, we call these two aligners bi-directional aligners.1 Thus,for each sentence pair, we can get two alignment results.
We use 1S  and 2S  to repre-sent the bi-directional alignment sets.
For alignment links in both sets, we use i forsource words and j for target words.
}}0  ,|{|),{(1 ?=== jjjj aaiiAjAS  (1)}}0  ,|{|),{(2 ?=== jjii aiajAAiS  (2)Where, aj represents the index position of the source word aligned to the target wordin position j.
For example, if a target word in position j is connected to a source wordin position i, then aj=i.
If a target word in position j is connected to source words inpositions i1 and i2, then Aj={i1,i2}.
We name an element in the alignment set analignment link.23   BaggingThe bagging algorithm (derived from bootstrap aggregating) votes classifiers gener-ated by different bootstrap replicates [2].
A bootstrap replicate is generated by uni-formly sampling m instances from the training set with replacement.
In general, T1The GIZA++ toolkit is used to perform statistical alignment.
It is located athttp://www.fjoch.com/GIZA++.html.2Our definition of alignment link is different from that in [11].
In [11], alignment links areclassified into possible links and sure links.
In our paper, both one-to-one and non one-to-onelinks are taken as sure links.464 H. Wu and H. Wangbootstrap replicates are built in the sampling process.
And T  different classifiers arebuilt based on the bootstrap replicates.
A final classifier is built from these T  sub-classifiers using weighted voting or unweighted voting.
The original unweightedbagging algorithm is shown in Figure 1.Input:  a training set }} ..., ,1{),,{( mixyS ii ?=an induction algorithm ?
(1) For Tj    to1=  {(2) jS = bootstrap replicate of S  by sampling m  items from S  with replace-ment(3) )( jj SC ?=(4) }(5) Create a final classifier with majority voting:?
?=jjYyyxCxC )),((maxarg)(* ?Where, 1),( =yx?
if yx = ; else 0),( =yx?
.Output: Classifier *CFig.
1.
The Unweighted Bagging Algorithm3.1   Bagging the Statistical Word AlignerIn this section, we apply the technique of bagging to word alignment, the detailedalgorithm is shown in Figure 2.
In the algorithm, we first resample the training datato train the word aligners.
We choose to resample the training set in the sameway as the original bagging algorithm.
With these different bootstrap repli-cates, we build the different word aligners.
As described in Section 2, we per-form word alignment in two directions to improve multiword alignment.
Thus, oneach bootstrap replicate, we train a word aligner in the source to target direction andanother word aligner in the target to source direction, which is described in b) ofstep (1).After building the different word aligners, we combine or aggregate the align-ments generated by the individual alignment models to create the final alignments foreach sentence pair.
In this paper, the final alignment link for each word is chosen byperforming a majority voting on the alignments provided by each instance of themodel.
The majority voting can be weighted or unweighted.
For weighted voting, theweights of word alignment links produced by the bi-directional word aligners aretrained from the training data, which will be further described in section 5.
For un-weighted voting, the best alignment link for a specific word or unit is voted by morethan half of the word aligners in the ensemble.
For those words that have no majoritychoice, the system simply does not align them.Improving Statistical Word Alignment with Ensemble Methods 465Input: a training set }}...1{),,{( mixyS ii ?=a word alignment model M(1) For Tj    to1=a) jS = bootstrap replicate of S  by sampling m  items from S  with re-placementb) Train the bi-directional alignment models stjM  and tsjM  with thebootstrap replicate jS(2) For Nk    to1=  (N is the number of sentence pairs)For each word s :a) For weighted voting?
+=jtsjstjjttksMtksMtsWksM ))),,(()),,(((*),(maxarg),(* ?
?t is the word or phrase in the target sentence;),( tsW j is the weight for the alignment link )  ,( ts  produced by thealigner stjM  or tsjM ;1),( =yx?
if yx = ; else 0),( =yx?
.b) For unweighted voting?=>+=TjtsjstjTtnttksMtksMksM12)(:* ))),,(()),,(((maxarg),( ?
?where, n(t)= ?=+Tjtsjstj tksMtksM1))),,(()),,((( ?
?Output: The final word alignment resultsFig.
2.
The Bagging Algorithm for Word Alignment4   Cross-Validation CommitteeThe difference between bagging and cross-validation committees lies in the way toresample the training set.
The cross-validation committees construct the training setsby leaving out disjoint subsets of the training data.
For example, the training set canbe randomly and evenly divided into N disjoint subsets.
Then N overlapping trainingsets can be constructed by dropping out a different one of these N subsets.
This pro-cedure is the same as the one to construct training sets for N-fold cross-validation.Thus, ensembles constructed in this way are called cross-validation committees.For word alignment, we also divide the training set into N even parts and build Noverlapping training sets.
With the N sets, we build N alignment models as described466 H. Wu and H. Wangabove.
Since the training sets are different, the word alignment results may be differ-ent for individual words.
Using the same majority voting as described in Figure 2, weget the final word alignment results.5   Weight CalculationIn this paper, we compare both weighted voting and unweighted voting under ourword alignment task.
The algorithm in Figure 2 shows that the weights are relatedwith the specific word alignment links and the specific word aligner.
We calculate theweights based on the word alignment results on the training data.As described in Section 3.1, on each bootstrap replicate j, we train a word alignerstjM  in the source to target direction and a word aligner tsjM  in the target to sourcedirection.
That is to say, we obtain two different word alignment sets  stjS  and tsjS  foreach of the bootstrap replicate.
For each word alignment link )  ,( ts  produced by stjMor tsjM ,  we calculate its weight as shown in (3).
This weight measures the associationof the source part and the target part in an alignment link.
This measure is like theDice Coefficient.
Smadja et al [13] showed that the Dice Coefficient is a good indica-tor of translation association.??
+=''),'()',(),(*2),(stitscounttscounttscounttsW  (3)Where, ),( tscount  is the occurring frequency of the alignment link tsjstj SSts ??)
,( .6   Experiments6.1   Training and Testing SetWe perform experiments on a sentence aligned English-Chinese bilingual corpus ingeneral domain.
There are about 320,000 bilingual sentence pairs in the corpus, fromwhich, we randomly select 1,000 sentence pairs as testing data.
The remainder is usedas training data.
In the sentence pairs, the average length of the English sentences is13.6 words while the average length of the Chinese sentences is 14.2 words.The Chinese sentences in both the training set and the testing set are automaticallysegmented into words.
The segmentation errors in the testing set are post-corrected.The testing set is manually annotated.
It has totally 8,651 alignment links.
Amongthem, 866 alignment links include multiword units, which accounts for about 10% ofthe total links.6.2   Evaluation MetricsWe use the same evaluation metrics as in [17].
If we use GS  to represent the set ofalignment links identified by the proposed methods and RS  to denote the referenceImproving Statistical Word Alignment with Ensemble Methods 467alignment set, the methods to calculate the precision, recall, f-measure, and alignmenterror rate (AER) are shown in Equation (4), (5), (6), and (7).
In addition, t-test is usedfor testing statistical significance.
From the evaluation metrics, it can be seen that thehigher the f-measure is, the lower the alignment error rate is.
Thus, we will only showprecision, recall and AER scores in the experimental results.|S||SS|GRG ?=precision(4)|S||SS|RRG ?=recall(5)||||||*2RGRGSSSSfmeasure+?=  (6)fmeasureSSSSAERRGRG?=+?
?= 1||||||*21  (7)6.3   Evaluation Results for BaggingFor the bagging method, we use ten word aligners trained on five different bootstrapreplicates.
Among them, five aligners are trained in the source to target direction.
Theother five aligners are trained in the target to source direction.
The bagging methodwill be compared with a baseline method using the entire training data.
For this base-line method, we also train bi-directional models.
Based on the alignment results onthe entire training data, we calculate the alignment weights for the two word alignersas described in Section 5.The results using weighted voting are shown in Table 1.
The number in brackets ofthe first column describes the number of word aligners used in the ensembles.
Forexample, in the ensemble ?bagging (4)?, two word aligners are trained in the source totarget direction and the other two are trained in the target to source direction.From the results, it can be seen that the bagging methods obtain significantly betterresults than the baseline.
The best ensemble achieves an error rate reduction of 7.34%as compared with the baseline.
The results show that increasing the number of wordaligner does not greatly reduce the word alignment error rate.
The reduction is evensmaller when the number increases from 8 to 10.Table 1.
Weighted Bagging ResultsMethod Precision Recall AERBagging (4) 0.8035 0.7898 0.2034Bagging (6) 0.8048 0.7922 0.2015Bagging (8) 0.8061 0.7948 0.1996Bagging (10) 0.8064 0.7948 0.1994Baseline  0.7870 0.7826 0.2152468 H. Wu and H. WangIn order to further analyze the effect of the weights on the word alignment results,we also use unweighted voting in the ensembles.
The results are shown in Table 2.The baseline method also trains bi-directional aligners with the entire training data.The final word alignment results are obtained by taking an unweighted voting on thetwo alignment results produced by the bi-directional aligners.
That is the same as thatby taking the intersection of the two word alignment results.Table 2.
Unweighted Bagging ResultsMethod Precision Recall AERBagging (4) 0.9230 0.6073 0.2674Bagging (6) 0.9181 0.6200 0.2598Bagging (8) 0.9167 0.6307 0.2527Bagging (10) 0.9132 0.6347 0.2511Baseline  0.9294 0.5756 0.2810Increasing the number of word aligners in the ensembles, the unweighted baggingmethod does not greatly reduce AER.
However, the ensembles obtain much lowererror rate as compared with the baseline.
The best ensemble achieves a relative errorrate reduction of 10.64%, indicating a significant improvement.
From the experimen-tal results, we find that there are no multiword alignment links selected in the ensem-bles.
This is because unweighted voting in this paper requires more than half of theword aligners in the ensembles to vote for the same link.
Thus, there should be bi-directional word aligners voting for the target algnment link.
The intersection of bi-directional word alignment results produced by the IBM models only creates singleword alignments.
It can also be seen from the Equations (1) and (2) in Section 2.Comparing the results obtained using weighted voting in Table 1 and those ob-tained using unweighted voting in Table 2, we find that (1) the weighted baggingmethods are much better than the unweighted bagging methods; (2) the ensemblesusing unweighted voting obtain higher precision but lower recall than those usingweighted voting.
For example, the weighted voting ?bagging (10)?
achieves a relativeerror rate reduction of 20.59% as compared with the corresponding unweighted vot-ing.
This indicates that the method used to calculate voting weights described in sec-tion 5 is very effective.6.4   Evaluation Results for Cross-Validation CommitteesFor the cross-validation committees, we divide the entire training data into five dis-joint subsets.
For each bootstrap replicate, we leave one out.
Thus, each replicateincludes 80% sentence pairs of the full training data.
For each replicate, we train bi-directional word alignment models.
Thus, we totally obtain ten individual word align-ers.
The baseline is the same as shown in Table 1.
The results obtained usingweighted voting are shown in Table 3.
The number in the brackets of the first columndescribes the number of word aligners used in the ensembles.Improving Statistical Word Alignment with Ensemble Methods 469Table 3.
Evaluation Results for Weighted Cross-Validation CommitteesMethod Precision Recall AERValidation (4) 0.8059 0.7913 0.2015Validation (6) 0.8070 0.7928 0.2002Validation (8) 0.8063 0.7933 0.2002Validation (10) 0.8068 0.7947 0.1993Baseline  0.7870 0.7826 0.2152From the results, it can be seen that the cross-validation committees perform betterthan the baseline.
The best ensemble ?validation (10)?
achieves an error rate reductionof 7.39% as compared with the baseline, indicating a significant improvement.
Theresults also show that increasing the number of word aligner does not greatly reducethe word alignment error rate.As described in section 6.3, we also use unweighted voting for the cross-validationcommittees.
The results are shown in Table 4.
The baseline is the same as describedin Table 2.Table 4.
Evaluation Results for Unweighted Cross-Validation CommitteesMethod Precision Recall AERValidation (4) 0.9199 0.5943 0.2779Validation (6) 0.9174 0.6124 0.2655Validation (8) 0.9154 0.6196 0.2610Validation (10) 0.9127 0.6245 0.2584Baseline  0.9294 0.5756 0.2810From the results, it can be seen that increasing the number of word aligners in theensembles, the alignment error rate is reduced.
The best ensemble achieves a relativeerror rate reduction of 8.04% as compared with the baseline, indicating a significantimprovement.
Comparing the results in Table 3 and Table 4, we find that theweighted methods are also much better than the unweighted ones.
For example, theweighted method ?Validation (10)?
achieves an error rate reduction of 22.87% ascompared with the corresponding unweighted method.6.5   Bagging vs. Cross-Validation CommitteesAccording to the evaluation results, bagging and cross-validation committees achievecomparable results.
In order to further compare bagging and cross-validation commit-tees, we classify the alignment links in the weighted ensembles into two classes: sin-gle word alignment links (SWA) and multiword alignment links (MWA).
SWA linksonly include one-to-one alignments.
MWA links refer to those including multiwordunits in the source language or/and in the target language.
The SWA and MWA forthe bagging ensembles are shown in Table 5 and Table 6.
The SWA and MWA forthe cross-validation committees are shown in Table 7 and Table 8.
The AERs of thebaselines for SWA and MWA are 0.1531 and 0.8469, respectively.470 H. Wu and H. WangTable 5.
Single Word Alignment Results for the Weighted Bagging MethodsMethod Precision Recall AERBagging (4) 0.8263 0.8829 0.1463Bagging (6) 0.8270 0.8845 0.1452Bagging (8) 0.8270 0.8877 0.1437Bagging (10) 0.8265 0.8876 0.1440Table 6.
Multiword Alignment Results for the Weighted Bagging MethodsMethod Precision Recall AERBagging (4) 0.4278 0.1815 0.7451Bagging (6) 0.4432 0.1896 0.7344Bagging (8) 0.4540 0.1884 0.7336Bagging (10) 0.4620 0.1896 0.7311Table 7.
Single Word Alignment Results for Weighted Cross-Validation CommitteesMethod Precision Recall AERValidation (4) 0.8282 0.8833 0.1452Validation (6) 0.8285 0.8847 0.1443Validation (8) 0.8275 0.8851 0.1447Validation (10) 0.8277 0.8867 0.1438Table 8.
Multiword Alignment Results for Weighted Cross-Validation CommitteesMethod Precision Recall AERValidation (4) 0.4447 0.1908 0.7330Validation (6) 0.4538 0.1931 0.7291Validation (8) 0.4578 0.1942 0.7273Validation (10) 0.4603 0.1942 0.7268From the results, it can be seen that the single word alignment results are much bet-ter than the multiword alignment results for both of the two methods.
This indicatesthat it is more difficult to align the multiword units than to align single words.Comparing the bagging methods and validation committees, we find that these twomethods obtain comparable results on both the single word alignment links and mul-tiword alignment links.
This indicates that the different resampling methods in thesetwo ensemble methods do not much affect the results on our word alignment task.6.6   Different Sizes of Training DataIn this section, we investigate the effect of the size of training data on the ensemblemethods.
Since the difference between bagging and cross-validation committees isvery small, we only investigate the effect on the bagging ensembles.Improving Statistical Word Alignment with Ensemble Methods 471We randomly select training data from the original training set described in Section6.1 to construct different training sets.
We construct three training sets, which include1/4, 1/2 and 3/4 of sentence pairs of the original training set, respectively.For each of the training set, we obtain five bootstrap replicates and train ten wordaligners.
The results of ensembles consisting of ten word aligners are shown in Table9 and Table 10.
Table 9 and Table 10 show the weighted and unweighted baggingresults, respectively.
The methods to construct the baselines for different training setsin Table 9 and Table 10 are the same as those in Table 1 and Table 2, respectively.For convenience, we also list the results using the original training set in the tables.The first column describes the size of the training sets used for the ensembles.
Thelast column presents the relative error rate reduction (RERR) of the ensembles ascompared with the corresponding baselines.
From the results, it can be seen that bothweighted and unweighted bagging ensembles are effective to improve word alignmentresults.
The weighted ensembles perform consistently better than the unweigted en-sembles on different sizes of training sets.Table 9.
Weighted Bagging Results on Different Sizes of Training SetsData Precision Recall AER Baseline (AER) RERR1/4 0.7684 0.7517 0.2316 0.2464 6.00%1/2 0.7977 0.7775 0.2125 0.2293 7.33%3/4 0.8023 0.7869 0.2055 0.2184 5.89%All 0.8064 0.7948 0.1994 0.2152 7.34%Table 10.
Unweighted Bagging Results on Different Sizes of Training SetsData Precision Recall AER Baseline (AER) RERR1/4 0.8960 0.6033 0.2789 0.3310 15.72%1/2 0.9077 0.6158 0.2662 0.3050 12.72%3/4 0.9140 0.6270 0.2562 0.2943 12.95%All 0.9132 0.6347 0.2511 0.2810 10.64%7   DiscussionBoth bagging and cross-validation committees utilize multiple classifiers to makedifferent assumptions about the learning system.
Bagging requires that the learningsystem should not be stable, so that small changes to the training set would lead todifferent classifiers.
Breiman [2] also noted that poor predicators could be trans-formed into worse ones by bagging.In this paper, the learning system is the word alignment model described in Section2.
The classifiers refer to the different word aligners trained on different bootstrapreplicates.
In our experiments, although word alignment models do not belong tounstable learning systems, bagging obtains better results on all of the datasets.
This is472 H. Wu and H. Wangbecause the training data is insufficient or subject to data sparseness problem.
Thus,changing the training data or resampling the training data causes the alternation of thetrained parameters of the alignment model.
The word aligners trained on a differentbootstrap replicate produce different word alignment links for individual words.
Us-ing majority voting, the ensembles can improve the alignment precision and recall,resulting in lower alignment error rates.The experiments also show that weighted voting is better than unweighted voting.The advantage of weighted voting is that it can select the good word alignment linkeven if only one aligner votes for it in the ensembles.
This is because the selectedalignment link gets much higher weight than the other links.8   Conclusion and Future WorkTwo ensemble methods are employed in this paper to improve word alignment re-sults: bagging and cross-validation committees.
Both of these two methods obtainbetter results than the original word aligner without increasing any training data.
Inthis paper, we use two different voting methods: weighted voting and unweightedvoting.
Experimental results show that the weighted bagging method and weightedcross-validation committees achieve an error rate reduction of 7.34% and 7.39% re-spectively, as compared with the original word aligner.
Results also show thatweighted voting is much better than unweighted voting on the word alignment task.Unweighted voting obtains higher precision but lower recall than weighted voting.
Inaddition, the weighted voting used in this paper obtains multiword alignment linkswhile the unweighted voting cannot.We also compare the two ensemble methods on the same training data and testingdata.
Bagging and cross-validation committees obtain comparable results on bothsingle word alignment links and multiword alignment links.
This indicates that thedifferent resampling methods in these two ensemble methods do not much affect theresults under our word alignment task.We also investigate the bagging method on different sizes of training sets.
The re-sults show that both weighted voting and unweighted voting are effective to improveword alignment results.
Weighted voting performs consistently better than unweigtedvoting on different sizes of training sets.In future work, we will investigate more ensemble methods on the word alignmenttask such as the boosting algorithm.
In addition, we will do more research on theweighting schemes in voting.References1.
Ahrenberg, L., Merkel, M., Andersson, M.: A Simple Hybrid Aligner for Generating Lexi-cal Correspondences in Parallel Texts.
In Proc.
of the 36th Annual Meeting of the Associa-tion for Computational Linguistics and the 17th Int.
Conf.
on Computational Linguistics(ACL/COLING-1998), 29-352.
Breiman, L.: Bagging Predicators.
Machine Learning (1996), 24(1): 123-1403.
Brown, P. F., Pietra, S. D., Pietra, V. D., Mercer, R.: The Mathematics of Statistical Ma-chine Translation: Parameter Estimation.
Computational Linguistics (1993), 19(2): 263-311Improving Statistical Word Alignment with Ensemble Methods 4734.
Cherry, C., Lin, D.: A Probability Model to Improve Word Alignment.
In Proc.
of the 41stAnnual Meeting of the Association for Computational Linguistics (ACL-2003), pp.
88-955.
Dietterich, T.: Machine Learning Research: Four Current Directions.
AI Magazine (1997),18 (4): 97-1366.
Dietterich, T.: Ensemble Methods in Machine Learning.
In Proc.
of the First Int.
Work-shop on Multiple Classifier Systems (2000), 1-157.
Freund, Y., Schapire, R.: Experiments with a new boosting algorithm.
In Machine Learn-ing: Proc.
of the Thirteenth International Conference (1996), 148-1568.
Matusov, E., Zens, R., Ney H.: Symmetric Word Alignments for Statistical MachineTranslation.
In Proc.
of the 20th Int.
Conf.
on Computational Linguistics (COLING-2004),219-2259.
Melamed, I. D.: Automatic Construction of Clean Broad-Coverage Translation Lexicons.In Proc.
of the 2nd Conf.
of the Association for Machine Translation in the Americas(AMTA-1996), 125-13410.
Menezes, A., Richardson, S.D.
: A Best-first Alignment Algorithm for Automatic Extrac-tion of Transfer Mappings from Bilingual Corpora.
In Proc.
of the ACL 2001 Workshopon Data-Driven Methods in Machine Translation (2001), 39-4611.
Och, F. J., Ney, H.: Improved Statistical Alignment Models.
In Proc.
of the 38th AnnualMeeting of the Association for Computational Linguistics (ACL-2000), 440-44712.
Parmanto, B., Munro, P., Doyle, H.: Improving Committee Diagnosis with ResamplingTechniques.
In Touretzky, D., Mozer, M., Hasselmo, M. (Ed..): Advances in Neural In-formation Processing Systems (1996), Vol.
8,  882-88813.
Smadja, F. A., McKeown, K. R., Hatzivassiloglou, V.: Translating Collocationsfor Bilingual Lexicons: a Statistical Approach.
Computational Linguistics (1996),22 (1):1-3814.
Somers, H.: Review Article: Example-Based Machine Translation.
Machine Translation(1999), 14: 113-15715.
Tufis, D., Barbu, M.: Lexical Token Alignment: Experiments, Results and Application.
InProc.
of the 3rd Int.
Conf.
on Language Resources and Evaluation (LREC-2002), 458-46516.
Wu, D.: Stochastic Inversion Transduction Grammars and Bilingual Parsing of ParallelCorpora.
Computational Linguistics (1997), 23(3): 377-40317.
Wu, H., Wang, H.: Improving Domain-Specific Word Alignment with a General BilingualCorpus.
In Frederking R., Taylor, K.
(Eds.
): Machine Translation: From Real Users to Re-search: 6th Conf.
of the Association for Machine Translation in the Americas (AMTA-2004), 262-271
