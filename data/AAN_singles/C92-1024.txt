CHART PARSING LAMBEK GRAMMARS:MODAL EXTENSIONS AND INCREMENTALITYMark  Hepp leCambridge University Computer Laboratory, Cambridge, UK.Abst ractThis paper I describes a method for chart parsing Lam-bek grammars.
The method is of particular interestin two regards.
Firstly, it allows efficient processing ofgrammars which use necessity operators, mr extensionproposed for handling locality phenomena.
Secondly,the method is easily adapted to allow incremental pro-ceasing of Lambek grammars,  a possibility that hashitherto been unavailable.IntroductionCategorial Grammars (CGs) consist of two compo-nents: (i) a lexicon, which assigns syntactic types(plus an associated meaning) to words, (ii) a calculuswhich determines the set of admitted type combina-tions.
The set of types (T) is defined recursivety interms of a set of basic types (To) and a set of op-erators ({\ , /} for standard bidirectional CG), as thesmallest set such that (i) To C T, (ii) /f x,y E T,then x\y, x /y  E T. 2 Intuitively, lexical types specifysubcategorisation requirements of words, and require-ments on constituent order.
We here address a partic-ular flexible CG, the (product-free) Lambek calculus(L: Lambek, 1958).
The rules below provide a nat-ural deduction formulation of L (Morrill et al 1990;Barry et al 1991), where dots above a type representa proof of that type.
Proofs proceed from a numberof initial assumptions, consisting of individual types,some of which may be "discharged" as the proof isconstructed.
Eact~ type in a proof is associated witha lambda expression, corresponding to its meaning.The elimination ru le/E states that proofs of A/B andB may be combined to construct a proof of A. Theintroduction rule /l indicates that we may dischargean assumption B within a proof of A to construct aproof of A/B (square brackets indicating the assump-tion's discharge).
There is a side condition on the in-troduction rules, reflecting the ordering significance ofthe directional sloshes.
For /1 (resp.
\1), the assump-t I am grateful to Esther KSnig for discussion of the paper.The work was done under a grant to the Cambridge Univer-";ty Computer Laboratory, "Unification.based models of lexical?ccvu and incremental interpretation", SPG 893168.~ln this notation, x/y and x\y are both functions from yinto x.
A convention of left association is used, Bo that, e.g.
((t~np)/pp)/np may be written s\np/pp/np.tion discharged must be the rightmost (resp.
leftmost)undischarged assumption in the proof.
Eliminationand introduction inferences correspond semanticallyto steps of functional application and abstraction, re-spectively.Hypothesis rule:Elimination rules:Introduction rules:A:xi i i :A/B:/ B:x B:x A\B:/-/E - - .
\ EA:/x A:/x.
.
.
\[B:x\] i \[B:x\]i .
: .A:/ A:\]A/B:)tx.\]'/li A\B:),x.____.....~\ I iEach proof demonstrates the po6sibility of combin-ing the types of its undischarged assumptions, in theirgiven order, to yield the type at the bottom of theproof.
The following proof of "simple forward compo-sition" illustrates the approach.a/b:= b/c:~ \[c:zli-/Eb:(~#/Ea/c:)~z.
(x yz).
)/liFollowing Prawitz (1965), a normal form (NF)for proofs can be defined using the following mean-ing preserving contraction rule and its mirror imagedual with \ in place o f / ,  which, under a version ofthe Curry-Howard correspondence b tween proofs andlambda terms, are analogous to tile/~-contraction rule((,~x.P)Q t> P\[Q/z\]) for lambda expressions.
': "\[B\]~ !.
.
.B  A : t> : - - / l  iA/B B A- - .
/ EAUnder this system, every L proof has an equivalent'fl-NF' proof.
Such fl-NF proofs have a straight-forward structural characterisation, that their mainbranch (the unique path from the proof's end-type toan assumption, that includes no types forming the ar-gument for an elimination step) consists of a sequenceof (> 0) eliminations followed by a sequence of (> 0)introductions.ACq'ES Dl!
COLING-92, NANTES, 23-28 ho~r 1992 1 3 4 Paoc.
oF COLING-92, NANTES, AUG. 23-28, 1992The main approach for parsing L ha:~ been sequeu~calculus theorem proving.
3 Used naiwdy, this ap-proach is inefficient due to 'spurious ambiguity', i.e.the existence of multiple equivalent proofs tor combi-nations.
K6nig (1989) and llepple (1990u) develop asolution to this problem baaed on detining a NF for se-quent proofs.
These NF systems as yet cover only thebasic calculus, and do not extend to various additionsproposed to overcome the basic system's shortcomingsms a grammatical framework.Some importance has been attached to the proper-ties of flexible CGs in respect of incremental process.ing.
These grammars typically allow sentences to begiven analyses which are either fully or prinmrily left>branching, in which many sentenceinitiat ~ubstringsare interpretable constituents, providing for process-ing in which the interl)retation of a sentence is gener-ated 'on-line' as the sentence ix presented, lncremen-tality is characteristic of hmnan sentence processing,and might also allow more efficient machine processingof language, by allowing early filtering of semanticallyimplausible analyses.
It ix notable, however, that usmethods have yet been proposed tbr incremental pars-ing of Lambek grammars.
In what tbllows, 1 d~seribea chart method for L and then show how it may bcmodified to allow both inclusion of an operator \[3, usedfor handling locality constraints, and also to allow in-cremental parsing of L.Chart Parsing Lambek GrammarsStandard chart *nethods are inadequate lot L becauseproving that some combination of types is possiblemay involve 'hypothetical reasoning', i.e.
using addi-tional assumptions over and above just the types tttatare being combined.
For example, the above proof ofa /b ,b /c  ::~ a/c requires an additional assumption c,subsequently discharged.
Standard chart parsing in-volves ordering the edges tbr lexical categories alonga single dimension, and then adding edges for con.stituents that span wider substretches of this dimen-sion as constituents are combined.
Tim problem fi3rL is that there is no place in this set up for addi-tional hypothetical eleme*lts.
Placing edges tot themanywhere on the single dimension of a normal chartwould simply be incorrect.K6nig (1990, 1991), in the only previous chartmethod for L, handles this probhun by placing hyt ,othetical elements on separate, independently ordered'minicharts', which are created ('emitted') in rc~aponueto the presence of edges ttmt bear 'higher order' functor types (i.e.
seeking argunlents having fimctionaltypes), which may require 'hylmtheticul reasoning' inthe derivation of their argmnent.
Minicharts may '~tt-taeh' themselves into other charts (including otherminicharts) at points where combinations are po~i.ble, so that 'chains of attachment'  may arise.
Somc3 Spa?
:e limits preclude diac~msion f I~cei*t proof *~t work.fairly complicated I)ook-keeping is required to keeptrack of ~:'hat has combined with what as a basin forensuring correct 'discharge' of hypothetical elements.This information ix encoded into edgc~4 by replacingthe simple indices (or vertices) of standard charts with'complex in(liccs'.
Unfortunately, the complexity ofthin method precludes a proper exposition here.
How-ever, somc (lifl~rcnc~ between K6nig's method andthe method to be proposed will hc mentioned at theend of the next section.A New Chart ApproachI next present a new chart parsing method for L. Itsmost striking diflbrence to tim standard approach isthat there ix typically more than one ordering overn-ing the association of edges in a chart.
These orderingsintersect and overlap, making a chart a 'nmltidimen-sioual object'.
A uecond difl~rence in that the basicunit we adopt ior ~q,ecifying the orderings of the chartis pr*ntilivc iuteroals, rather than point-like vertices,wi~ere the relative order of the primitive intervals thatmake up an ordering must be explicitly defined.
Thespan of edg?
'~ is specilicd cxtcnsionally tm tim concate-nated sum of some number of primitive intervals.
Themethod i, pcfliaps most easily explained by example.'
lb parse the coml)ina~ion x/y, y/z, z =~- x, we re-quire a three clement ordering orde~cing (a .b .
e) (a band c being primitive interwdu).
Tim three types givethree edg(.~, each having thrc~: fields: (i) the edge'sspun (her,, a primitive mtervat), (ii) its type (iii) thetypc~8 'meaning' (here ~ m,ique constant).\[~t, :~/y, ?1\]\[b, y /z ,  ~s2Zl\ [c ,  z, t3JEdg~ are combined uodvr the lollowing chart rules,corre~po,diag to our elimination ru\]c~:i f  I t ,  :~/'/, A\] ema I:j, Y, B\]aud i~a ~itboid(i. j )i~ \[i, Y, B\] and \[j, %\Y, A\]~a~d isa uubord (i. j )~hon \[i.j, X, (AB)\]The ruh~4 a\[luw two edges with appropriate typesto combine provided tilat the concatenation of theirspans is n gubstrhlg of uome defined ordering (a testmade by the predicate iua ~ubord), Given theserul~, our chart will expt~nd to include the follow-ing two edges.
The l)reaeuce of atL edge with type xthat ~l)anu the full width ol- the ningle defined orderingshow~ that x/y, y/z, z -~ x can be derived.\ [b .c ,  y, (%2 %3):I\ [a .b .~,  x, ( t l  (t.9.
t3 ) ) \ ]ACfES DE COLING-92, NANTI!S, 23-28 AO{;f 1992 I 3 5 P~o(:.
oF C()\[,ING-92, NAN I'ES, AUG. 23-28, 1992emit(?H,T,_\] ) :i f  T = I / (Y \B I /F1  .
.
.
.
\Bn/Fm),then (add_edges: \[il,Bl,vl\] .
.
.
.
.
.
\[in,Bn,vn\], \[jm,Fm,~n\] .
.
.
.
.
.
\[ji,Fl,wl\]add_condltion:if ordering(P.H.~.R) and non_empty(G) then ordering(il... in.~.jm..,j l)add_condition: if \[(il...in.K.jm...jl),Y,S\] and isa_subord(H.K)then \[K, (Y\B1/FI .... \Bn/Fm), (wa@vn@ .... .
l@vl@S)\])elsei f  T = X\CY\BI/FI .
.
.
.
\Bn/Fla),then (add edgoJ:  \ [ i l ,B l ,v l \ ] ,  .
.
.
.
.
\ [ in ,Bn ,vn \ ] ,  \[ Jm,Fn,tm\] .
.
.
.
.
.
\ [ j i , F l ,u l \ ]add_cond i t ion :i f  o rder ing(P .~.H.R)  and non_empty(~) then  order ingCt l .
.
.
in .~.
jm.
.
.
j l )add_condition: if \[(il...in.K.jm...jl),Y,S\] and isa_subord(H.K)then \[K, (Y\BI/FI .... \Bn/Fm), (~a@vn@ .... .
i@vl@S)\])Figure 1: The EMIT procedureOur next example x / (y \p /q) ,  y /z \p ,  z/q =~ x re-quires 'hypothetical reasoning' in its derivation, whichis made possible by the pr~ence of the higher-orderfunctor x/(y\p/q).
In the natural deduction ap-proach, deriving the functor's argument y \p /q  mightinvolve introduction inference steps which dischargeadditional assumptions p and q occurring peripher-ally within the relevant subproof.
To chart parse thesame example, we require firstly the following threeedges and require a three element ordering:o rder ing  (a.  b. c)\ [a ,  x / (y \p /q ) ,  t l \ ]\[b, y /z \p ,  t2 \ ]\ [c ,  z /q ,  t3 \ ]As in KSnig's approach, an 'emit'  step is performedon the edge which bears a higher-order type, givingvarious additions to the chart needed to allow for hy-pothetical reasoning.
Firstly, this gives two new edges,which are assigned new primitive intervals:\[d, p, e l l\[e, q, v2\]Some new orderings must be defined to allow theseedges to combine.
Since the higher-order func-tor is forward directional, possible arguments forit must occupy non-empty intervals It such thati sa_subord(a .H) .
Hypothetical reasoning with thetwo new edges is useful only in so far as it contributesto deriving edges that occupy these spans.
Hence,the required new orderings are (d .H .e)  such thati sa_subord(a .H) .
Such new orderings are most con-veniently created by including the following conditionon ordcrings.i f  o rder ing(P .a .Q .R)  and non_empty(Q)~hen ordering(d.Q, e)In general, such conditions may fire after tile emit stepthat creates the condition, when other new orderingsare created that include the emitting edge's pan.
Theabove condition causes new orderings (d .b .e )  and(d.  b. c. e) to be defined, allowing combinations thatyield the following edges:\ [d .b ,  y /z ,  ( t2  v l ) \ ]I t .e ,  z ,  (t3 v2)\]\ [ 'd .b .c .o ,  y,  ( ( t2  v l )Ct3  v2) ) \ ]The final thing created by the emit process is thefollowing condition on edges (where I@B representstambda bstraction over I in B):i f  Cd.O.e, y,  S\] and i sa_subord(a .O)then \[0, y \p /q ,  v2@vl@S\]This condition has the effect that whenever an edge ofa certain form is added to tile chart, another edge ofa related form is also added.
The condition completesthe process of hypothetical reasoning, by syntacticallyand semantically abstracting over the hypothetical e -ements ('discharging' them) to derive the function re-quired as argument by the higher order functor.
Notethat, since the intervals d and a arc unique to thetwo edges created in the emit process, any edge span-ning an interval (d. 13. e) must have involved these twoedges in its derivation.
The condition 'fires' on theabove edge spanning (d .b .c .e )  to give the first oftile following edges, which by combination gives thesecond.
This final edge demonstrates the derivabilityof original goal combination.\ [b .c ,  y \p /q ,  v2@vl@((t2 v l ) ( t3  v2) ) \ ] .\ [a .b .c ,  x, ( t l  v2@vl@((t2 v:t ) ( t3 v2) ) ) \ ] .We have now seen all the basic ingredients re-quired for handling hypothetical reasoning in thenew approach.
Figure 1. shows a general (if stillsomewhat informal) statement of the emit procedurewhich is called on every edge added to the chart,but which only has an effect when an edge bearsa higher-order type.
The specific consequences de-pend on the functor's directionality.
The notation(Y\B1/F1 .
.
.
.
\Bn/Fm) stands for a functional type re-quiring n backward directional arguments BI .
.
.
.
BnAcrEs DE COLING-92, NAN'fE,% 23-28 AO{~ 1992 1 3 6 PROC.
OF COLING-92, NANr~S, Auo.
23-28, 1992and m forward directional arguments F1 .
.
.
.
Fin in anyorder.
4 In each ease, the procedure simply adds anedge for each required hypothetical element, a condi-tion on orders (to create all required new orderings),and a condition on edges, which fires to produce anedge for the result of hypothetical reasoning, shouldit succeed.
Note that edges produced by such condi~tions are there only to be argument to some higherorder functor, and allowing them combine with otheredges as funclov wmdd be unnecessary work.
I assumethat such edges are marked, and that some mechanismoperates to block such combinations, sA slightly modified emit procedure is required to al-low for deriving overall combinations that have a func-tional result type.
I will not give a full statement ofthis procedure, but merely illustrate it.
For example,in proving a combination F :?, y\p/q,  where an order-ing Q had been defined for the edges of the types F,emitting the result type y \p /q  would give only a singlenew ordering (not a condition on orderings), a condi-tion on edges, and two new edges for the hypotheticalelements as follows:order ing  (a. Q. b)i~ \ [a .Q.b,  y,  S\]then \[~, y \p /q ,  v2@(vl@S)\]Fa, p, e l iI'b, q, v2\]That completes description of the new chart metimdfor L. A few final comments.
Although the methodhas been described for proving type combinations, itcan also be used for parsing word strings, since lexi-cal ambiguity presents no problems.
Note that defin-ing a new ordering may enable certain combinationsof edges already present in the chart that were notpreviously allowed, tlowever, simply checking for alledge combinations that the new ordering allows willresult in many previous combinations being redone,since new orderings always share some suborderingswith previously defined orderings.
One way to avoidthis problem is to only check for corr~binations allowedby substrings of the new ordering that were not pre-viously suborderings.Concerning the soundness of this method, note thatchart derivations can be easily translated into (cor-rect) natural deduction proofs, given a knowledge of4This notsttion il rather clumsy in that it anpears to mug-Kent the prettence of at lemU otie forward and one backwarddirectional rguinent and also a relative ordering of these argu~meats, wiles tteither of these impllcationa is intended.
A similarpoint can be made about abstraction8 in the schematic semall-tics m~lvna .
.
.
.
wtlvllS, whose order and number will iu factmitTor that of the corresponding syntactic arguments.
A moresatisfactory statement ofthe emit procedure could be made re-cursively, but tiffs would take up too nmch space.5An alternative would be not entering 6uclt edgea t all, butinstead have a condition on edges that creates tat edge for therestllt of combining the emitt ing higher-order functor with itsimplicit ly derived argtulteltt, directly.which edges gave rise to which others, i.e.
with bi-nary edge combinations corresponding to eliminationinferences, and with the creation of an edge by a con-dition on edges corresponding to some sequence of in-troduction inferences.
In fact, chart derivations alltranslate to fl-NF proofs, i.e.
with introductions al-ways made after any eliminations on tile main branchof any subproof.
This observation provides at least artinformal indication of the completeness of the method,since ttle mechanisms described should allow for chartderivations corresponding to all possible/~-NF proofsof a given combination, which (as we noted earlier)are fully representative.Another issue is whether the method is minintal intile sense of allowing only tt single chaxt derivationfor each reading of a combination.
This is not Bo,given that distinct but equivalent fl-NF proofs of acombination axe possible, due to a second source ofequivalence for proofs analogous to y-equivalence oflambda expressions (i.e.
that f "= Ax.f~:).
For exani-pie, the combination a/(b/c), b/c ==~ a has two fl-NFproofs, one involving 'unnece~axy' hypothetical rea~soning.
However, having equivalent edges representedon the chart, and the undesirable consequences forsubsequence derivations, can be avoided by a simpleidentity check on edge addition, provided that themeaning terms of edges produced by conditions onedges are subject o rt-normalisation.I will finish with some comparisons of the methodto that of kSnig (1990, 1991).
The importance ofKSnig's method tm precursor for the new method can-not be overstated, tlowever, the new approach is, I be-lieve, conceptually much simpler than KSnig's.
Thisis largely due to the use of 'conditions on edges' in thenew approach to handle discharge of hypothetical e e-ments, which allows edges to be much simpler objectsthan in KSnig's approach, where edges instead have toencode the potentially complex information requiredto allow proper discharge in their 'complex indices'.The complex nature of KSnig's edges considerably ob-scures the nature of parsing as being simply reasoningabout sequences of types, and also makes it difficultto see how the method might be adapted to allow forextensions of L involving additional operators, evenones that have straightforward sequent rules.A second ifference of the new method is that order-ings that govern the association of edges are explicitlydefined.
There is a sense m which the multiple inter-secting orderings of the new approach can be seen toexpress the dimensions of the search space addressedin sequent calculus theorem proving, although collaps-ing together the parts of that search space that havecommon structure, ht K6nig's method, although theelements that belong together in a miniehart are rel-atively ordered, tt~e attachment of one minichaxt oanother is allowed wherever elevant edges can com-bine (although subject o some constraints preventinginfinite looping).
This means that elements may beAc~:s DE COLING-92, NANTES, 23-28 AO~' 1992 1 3 7 PROC.
OV COLlNG-92, NAIVFES, AUG. 23-28, 1992combined that  would not be in sequent calculus theo-rem proving or in the new chart method.
The conse-quences of this difference for the relative complexityof the two chart methods is at present unknown.Parsing Modal ExtensionsVarious extensions of the basic Lambek calculus havebeen proposed to overcome some of its limitations as ngrammatical  pproach.
Morrill (1989, 1990) suggestsa unary operator o,  for handling locality constraintson binding and reflexivisation.
This has the followinginference rules, which make it behave somewhat likenecessity in the modal logic $4:OA A where every undischarged- -OE  ~OI  assumption is a O-typeA OAI will try to briefly suggest how o may help in han-dling locality constraints.
Boundaries arise where lex-ieal functors seek a modal argument, i.e.
are of theform x/\[:ly, the presence of the o making the argu-ment phrase potentially a bounded domain.
In ad-dition, all lexical types are of the form Ox, i.e.
havea single o as their outermost operator, which allowsthem to appear embedded within modal domains (c.f.the D!
rule's requirement of O-ed assumptions).
Forexample, a lexica\] NP might be \[\]np, a transitiveverb El(s\np/np), and a sentence-complement verblike believes type O(s\np/Os).
In a standard flexi-ble CG treatment, extraction is handled by functionalabstraction over the position of the missing (i.e.
ex-tracted) element.
The type of the abstracted elementis determined by the type of the higher order lexicaltype that requires this abstraction, e.g.
the relativepronoun type rel/(s/np) abstracts over np.
Note thatthis relative pronoun type cannot extract out of anembedded modal domain, because it abstracts over abare (i.e.
non-modal) np, whose presence would blockO1 rule's use in deriving the overall modal constituent.However, a relative pronoun rel/(s/\[\]np), which ab-stracts over a modal type Drip, can extract out of anembedded modal domain.Including this operator presents considerable prob-lems for efficient processing.
Firstly, it excludes theuse of the NF systems devised for the calculus (KSnig,1989; Hepple, 1990a).
As noted above~ spurious ambi-guity makes ordinary (i.e.
non-normal form) sequenttheorem proving of L inefficient.
This problem isgreatly increased by inclusion of O, largely due to non-determinism for use of the OE rule.
66 Conaldrr asequent S= Ox !
,l:\]x:h..., nXn ::~ x0, where ther~l~ted amquent S s ~ Xl,X2,... ,xn ~ x0 is a theorem.
Non-determinism for use of \[\[\]L\] means that there are n{ differentpaths of inference from S to S t, so that there are at least n!proofs of S for each proof of S I.
In fact, interaction of\[OLl withother inference ruler means that there is typically many moreproofs than this.The new chart method is fairly easily adapted toallow for o, avoiding the non-determinism problem ofthe sequent system, so that parsing examples with \[\]is typically only slightly slower than parsing relatedexamples without any Os.
Firstly, it is crucial that wecan always identify tbe parent edge(s) for some edge(i.e.
the immediate dge(s) from which it is derived),and thereby an edge's more distant ancestors.
I ig-nore here the precise details of how this is done.
Thefollowing chart rule serves in place of the bE rule:i f  \[ i ,  ~ I .
i \ ]  then  \ [ i ,  X, A\]For tile combination x/my, O(y/z), Oz =~ x, we wouldrequire the following ordering and first three edges.The next three edges then result from the operationof chart rules:o rder ing(a ,  b. c)\ [a ,  x /~y ,  t l \ ]\[b, \[\](y/z), t2\]\ [e .
\ [ \ ] z ,  13\ ]\[b, y /z ,  t2 \ ]\ [e,  z ,  13\]\ [ (b .e ) ,  y,  (12 13)\]To allow completion, we must extend the emit proce-dure to also take action in cases where the type of anadded edge seeks a modal argument.
For the case athand, the emit procedure would create a condition onedges as follows:if \[H, y, S\] and isa_aubord(a.H)and eheck_modal_hietory(\[H, y, S\])then \[H, \ [ \ ]y ,  S\]The procedure check_modal_h is tory  used by thiscondition checks the edge's 'history' to see if it has ap-propriate ancestors to license the O-introduction step.Recall that the D!
rule requires that the undischargedassumptions of the proof to which it applies are all O-types.
The corresponding requirement for the chartsystem is that the edge must have ancestors with ~-types that together span the full width of the edge'sspan H (i.e.
there must be a subset of the edge's an-cestor edges that have \[:l-types, and whose spans con-catenate to give H).
The edge \ [ (b .c ) ,  y,  (12 13)\]satisfies this requirement, and so the condition willfire, allowing the parse to proceed to successful com-pletion, as follows:\ [ (b .c ) ,  \[.\]y, (12 13)\]\ [ (a .b .c ) ,  x, ( t l  ( t2 13) ) \ ]More complicated cases arise when an emitted func-tor seeks an argument type that is both functional andmodal.
As suggested above, a satisfactory statementof the emit process is best given recursively, but thereis not sufficient space here.
Hopefully, an example willadequately illustrate the method.
Consider what is re-quired in emitting an edge \ [a ,  w / ( \ [ \ ]  (x \y ) / z ) ,  t l \ ] ,whose type seeks an argument (O(x\y)/z,  i.e.
a func-tion to a modal form of a further functional type.
Asbefore, emitting creates two new edges and a singlecondition on orderings:ACRES DE cOLING-92, NANTES, :23-28 AOI~T 1992 1 3 8 PROC.
oF COLING-92, NANTES, Auo.
23-28.
1992\[i, y, vl\]\[j, z ,  vt\]if ordering(P.a.q.K) and non_empty(q)then ordering(i.Q, j)However, recursive decomposition of tile type((i3(x\y)/z) gives rise to three separate conditions Oiledges (which reflect the three aspects of the descrip-tion of this type as a 'function to a modal form of afurther functional type'):if \[(i.H.j), x, S\] and isa_subord(a.H)then \[(H.j), x\y, vI@S\]if \[H.j, xky, S\] and isa_subord(a.B)and cheek_modal_history(\[H.j, x \y ,  S\])then \ [H .
j ,  \ [ \ ] (X \y ) ,  S\]if \[H.j, ~(x\y), S\] and isa_snbord(a.H)then \[H, \[\](x\y)/z, v2@S\]These three conditions 'chain' together to create dgeswith the type required by tbe emitted functor.
Ofcourse in practice, the.three conditions could be col-lapsed into a single condition, and such a move seemssensible from the viewlmint of efficiency.I nc rementa l  Pars ingDespite considerable interest in the theoretical pos-sibility of incremental processing using the Lambekcalculus, no incremental parsing methods have asyet been proposed.
Indeed, most Lambek parsingwork has been based around sequent heorem proving,which might be viewed as antithetical to incrementalprocessing since it fundamentally involves reasoningabout complete sequences of types.
In fact it is fairlyeasy to modify the chart method to a|low some extentof incremental processing, i.e.
so that scanning left-to-right through an input string (or type sequence), thechart will contain edges assigning types to substringsthat would not otherwise receive types (luring parsing,including some for initial substrings of the input.The modification of the chart method involves al-lowing an additional extent of hypothetical reasoningover that so far allowed, so that edges for hypothet-ical types are added not only for higher-order func-tors, but also for first-order functors.
This is alloweby a new procedure mit*, described below, emit*is called on every edge added to the chart, but onlyhas an effect if the edge's type is functional, creatinga new edge for a hypothetical type corresponding tothe function's first argmnent, as well as a condition onorderings and one on edges.
The condition on order-ings creates new orderings allowing the hypotheticaledge to cmubine with its 'emitter' ,  and tile result ofthat combination to he combined with filrther edges.
(The requirement J \= i .K prevents the condition in-correctly reapplying to its own output.)
Note that thenew edge's interval is peripheral i l the new orderingsthat are defined since it is only in peripheral positionthat the new hypothesis cau be discharged (hence, wehave (G. H. i )  in the condition of tile first case ratherthan (0.
H. i .
J )) .
Such discharge is made by the newcondition on edges.emit*(  \[I1 ,T,_\]  ) :i~ T = X/Ythen add_edge: \[i, Y, v\]add_condit ion :if ordering(G.H,J) and J \= i.Kthen ordering(G.H, i)add eondit ion :if \[(q.i) ,Z,S\] and non_empty(q)then \[Q,Z/Y,v@S\]elseif T = X\Ythen add edge: \[i, Y, v\]add_ ?ondit ion:if ordering(G.H.J) and G \= K.ithen ordering(i.H.
J)add_eondit ion:if \[(i.~) ,Z,S\] and non_empty(q)then \[q,zkY,v@S\]Let us look at some examples (where we limit our at-tention to just edges relevant to the discussion).
Con-sider parsing the type sequence (x/y, y/z, z).
Sincethe method should not depend on the parser know-ing the length of the input sequence in advauce, anordering will be defined with each scanning step thatcovers just tile material so far scanned, and which ex-tends tile ordering of the previous scanning step byone.
After scanning the first two types of the input,the chart will include at least tile following two edgesand ordering:ordering (a.b)\[a, x /y ,  ill\[b, y /z ,  t t \ ]Applying emit* to the second edge (ignoring the firstedge here) yields the following edge and conditions:\[i, z, v\]if ordering(G.b.J) and J \= i.Kthen orderiug(G .b.
i)if \[(Q.i),T,S\] and non empty(q)then \[q,T/z, v@S\]The condition on orderings will fire ou the ordering(a .b )  to produce a new ordering (a .b .
i ) ,  which per-mits the first two of the following edges to be built,the third being generated from the second by the con-dition on edges.
The type x/z this edge assigns to theinitial substring (x/y, y/z) of the input (correspond-ing to the composition of the two functions) would nothave been created during parsing with other Lambekparsing methods.\ [ (b. i ) ,  y, (t2 v)\]\[(a.b.i), x, (tl (t2 v))\]\ [ (a .b ) ,  x /z ,  ve(tl ( t2  v) ) \ ]Acll~s OE COL1NG-92, NAN-I?S.
23-28 Aot~'r 1992 1 3 9 Paoc.
ov COL1NG-92, NANTES, AU(i.
23-28, 1992As a second example, consider the stage of hav-ing scanned the first two types of the input sequence(y, x \y/z ,  z).
Scanning yields the following orderingand the first two edges.
Applying emit* to the secondedge yields the third edge, and two conditions:order ing (a. b)Ca, x/y,  i l l\[b, y/z, t2\]r i ,  z, v2if ordering(G.b.J) and J \= i,Kthen ordering(G.b, i)if \[(G.i),T,SJ and non_empty(Q)then \[Q,T/z,v@SJThe ordering condition gives the following new order-ing, allowing creation of the subsequent ew edges.
Asbefore, the last edge assigns a type to the combinationof the first two input types which would not otherwisebe expected uring parsing.o rder ing(a .b ,  i)\ [ (b .
i ) ,  x \y ,  ( t2 v)\]\ [ (a .b .
i ) ,  x, ( ( t2  v) t l ) \ ]\[(a.b), x/z, v@((t2 v) t l ) \ ]Although the method allows for a considerable de-gree of inerementality, some conceivable incrementalconstituents will not be created that would be in pars-ing with alternative categorial frameworks.
For exam-ple, rules of type raising and composition i Combina-tory Catcgorial Grammar (Steedman, 1987; Szabolcsi,1987) would allow incremental combination of typesvp/s, np ::~ vp/(s\np), not allowed by the present ap-proach.
The modified chart method instead allowsfor the construction of incremental constituents in amanner that most closely relates to tim notion of de-pendency constituency argued for by Barry & Pick-ering (1990) (see also Hepple, 1991), although sincethe modified parser is still a complete parser for Lit cannot be viewed as implementing a notion of de-pendency constituency.
7 Finally, it should be notedthat the additional hypothetical reasoning allowed byemit* and combinations involving additional 'incre-mental constituents' result in many 'spurious' analy-ses, so that the incremental chart method is in generalslower than the non-incremental chart method.Conc lus ionI have presented a chart parsing method for the Lam-bek calculus, which I would argue has several advan-tages over that of KSnig (1990, 1991).
Firstly, I be-lieve that it is considerably conceptually clearer thanKSnig's method, and more straightforwardly reflectsintuitions about the nature of hypothetical reasoning:'However, some version of a chart parser that used only thekind of hypothetical reasoning allowed by the emit* procedure,and not that of the emit procedure, might well implement anotion of dependency onstituency.in proving L combinations.
Secondly, the relativelystraightforward nature of the system with respect oreasoning about sequences of types should, I believe,make it easier to adapt the method to allow for addi-tional type-forming operators over those already pro-vided in the (product-free) Lambek calculus, partic-ularly where operators have fairly straightforward se-quent rules.
We have seen how the method can beextended to allow for Morrill's Eloperator.
We havealso seen how the method may be modified to allowincremental parsing of Lambek grammars.ReferencesBarry, G., Hepple, M., Leslie, N. and Morrill, G.
1991.
'Proof Figures and StructurM Operators for Catego-rial Grammar', Proc.
of EACL-5..Barry, G. and Morrill, G. 1990.
(Eds).
Studies inCalegorial Grammar.
Edinburgh Working Papers inCognitive Science, Volume 5.
Centre for CognitiveScience, University of Edinburgh.Barry, G. and Piekering, M. 1990.
'Dependency andConstituency in Categorial Grammar', in Barry andMorrill, 1990.Hepple, M. 1990a.
'Normal form theorem proving forthe Lambek calculus', Prec.
of COLING-90.Hepple, M. 1990b.
The Grammar and Processingof Order and Dependency: A Categorial Approach.Ph.D.
dissertation, Centre for Cognitive Science,University of Edinburgh.Hepple, M. 1991.
'Efficient Incremental Processingwith Categorial Grammar', Proc.
of ACL-eT.KSnig, E. 1989, 'Parsing as natural deduction', Proc.of ACL-25.KSnig, E. 1990, 'The complexity of parsing with ex-tended categorial grammars', Proc.
of COLING-90.KSnig, E. 1991, 'Parsing categorial grammar.
'DYANA, deliverable R1.2.C.Lambek, J.
1958.
'The mathematics of sentence struc-ture.'
American Mathematical Monthly 65.
154-170.Morrill~ G. 1989.
'Intensionality, boundedneas~ andmodal logic.'
Research Paper EUCCS/RP-32, Cen-tre for Cognitive Science, University of Edinburgh.Morrill, G. 1990.
'Intensionality and Boundedness',Linguistics and Philosophy, 13.Morrill, G., Leslie, N., Hepple, M. and Barry, G.
1990.
'Categorial Deductions and Structural Operations',in Barry and Morrill, 1990.Prawitz, D. 1965.
Natural Deduction: a Proof Theo-retical Study, Almqvist and Wiksell, Uppsala.Steedman, Mark.
1987.
'Combinatory Grammars andParasitic Gaps', NLLT, 5:3.Szabolcsi, A.
1987 'On Combinatory Categorial gram-mar', Proc.
of the Symposium on Logic and Lan-guage, Debrecen, Akaddmiai KiadS, Budapest.Acres DE COLING-92, NANTES, 23-28 aotrr 1992 1 4 O PROC.
OF COLING-92, NANTES, AUG. 23-28, 1992
