Three Formal Extensions to Primitive Optimality TheoryDanie l  M .
A lb roLinguistics Department ,  UCLA3125 Campbel l  HallLos Angeles, CA 90095-1543, USAalbro?humnet, ucla.
eduAbst rac tThis paper proposes an expansion of set of prim-itive constraints available within the PrimitiveOptimality Theory framework (Eisner, 1997a).This expansion consists of the addition of anew family of constraints--existential implica-tional constraints, which allow the specificationof faithfulness constraints that can be satis-fied at a distance--and the definition of twoways to combine simple constraints into com:plex constraints, that is, constraint disjunction(Crowhurst and Hewitt, 1995) and local con-straint conjunction (Smolensky, 1995).1 In t roduct ionPrimitive Optimality Theory (OTP) (Eisner,1997a), and extensions to it (e.g., Albro (1998)),can be useful as a formal system in which phono-logical analyses can be implemented and evalu-ated.
However, for certain types of constraints,translation into the primitives of OTP (Eisner(1997b)) can only be accomplished by adding tothe grammar a number of ad hoc phonologicaltiers.
Because these tiers serve no phonologicalpurpose other than to allow calculation of theconstraints without adding new primitives, andbecause the addition of phonological tiers to anOTP grammar can have a dramatic negative im-pact on the efficiency of OTP implementations 1,it is preferable to avoid the addition of ad hoctiers by adding new primitives to the system.This paper looks at three types of constraintsemployed throughout the Optimality Theoreticliterature that cannot be translated in to the1The computation time for an Optimality Theoreticderivation within the implementation of Albro (1998)increases exponentially with the number of tiers.
Thesame is true for the implementation described in Eisner(1997a), although a proposal is given there for a methodthat might improve the situation.primitives of OTP without reference to ad hoctiers, and proposes a formalization of these con-straints that is compatible with the finite statemodel described in Eisner (1997a) and Albro(1998).
These are constraints of existential im-plication (that is, of faithfulness without the re-quirement of alignment), constraint disjunction,and local constraint conjunction.2 Ex is tent ia l  Imp l i ca t ion2.1 Mot ivat ionOWP as described in Eisner (1997a) providessome support for correspondence constraints(input-output only).
These may be defined bymeans of implication constraints of the formP --4 P or P --+ P, which can be inter-preted as requiring, in the first case, that eachsurface constituent representing property P bealigned with an underlying constituent repre-senting that property, and in the second casethat every underlying constituent representingproperty P be aligned with a surface con-stituent representing that property.
Constraintsof this type may be employed to require corre-spondence between the underlying representa-tion and the surface representation where corre-sponding constituents must be aligned with oneanother.
However, natural anguages also seemto follow weaker constraints requiring only thatfor each underlying constituent there be a corre-sponding surface constituent, regardless of theposition of that constituent relative to its po-sition in the underlying representation.
For ex-ample, in Sanskrit roots with at least two voicedstops, where the root ends in a voiced aspiratedstop, the underlying aspiration of the root-finalstop can be realized upon that stop in the sur-face representation only when the root is fol-lowed by a suffix beginning with a vocoid or anasal (data from Whitney (1889)):21/da,9a/ reach to \[dagfli~janti\] (Fut.
)/bud~/  know, wake \[bod~i\] (Aor.
)/dab~/  harm \[dab~ati\] (Pres.
)Otherwise, the aspiration is realized on the pre-ceding stop:/dag~/  reach to \[d~ak\] (root noun)/buda/  know, wake \[baut\] (root noun)/dab~/  harm \[dfiap\] (root noun)In these forms it is clear that  aspiration is be-ing preserved, but that it is surfacing in a po-sition that  cannot overlap with the underlyingform.
Another example is the Bantu languageChizigula (Kenstowicz and Kisseberth, 1988),in which roots with underlying high vowels ap-pear on the surface with a single high tone inthe penult imate syllable of the word, where thissyllable could belong to a suffix.
Additionally, ifa prefix with an underlying high tone is prefixedto a root with no underlying high tone, the hightone of the prefix appears in the penult imatesyllable of the resulting word.
The existence ofa high tone in the underlying form implies theexistence of a high tone in the surface form, butthe position where that high tone occurs in theunderlying form has nothing to do with wherethe tone appears on the surface.2.2 Formal i za t ionExistential implication constraints can be usedto drive correspondence ffects such as theabove.
These constraints take the form "If Xappears within domain D, then Y must ap-pear within D as well."
Using the terms ofOTP, this family of constraints can be writtenas a'l A .
.
.A  am ~ /31 V ...V/3n/9,1 A .
.
.A  9,p-Here each a'i or /3j is a constituent interior oredge, one of tier, \]tier, or \[tier, where tier rep-resents a constituent ype, and each 9,k mustbe a constituent interior (tier).
The constraintrepresented by this notation outputs a violationfor each domain 9,, where 9' represents the in-tersection of the domains 9,k, in which the timeslice represented by the oq occurs, but no/3j oc-curs.
Using the FST notation of Eisner (1997a),the implementation for this constraint would bethe following FST:\[/0 N/0X/0where X represents ".E*-((in or begin all 7k) -(in all 7k))," N represents "((in all 7k) A -~(inall ai) A -~(in some/3j))," B represents "((in all9,k) A (in some/3j))," A represents "((in all 7k) A(in all cq) A -~(in some/3j))," \[ represents "((inor begin all 9,k) - (in all 9,k))," and \] represents"((in or end all 9,k) - (in all 9,k))."
That  is,the machine moves from state S to state 1 ifthe domain 9, is entered.
It moves from thereback to state S if the end of the domain appearsbefore cv does, or if any/3 appears.
If a appears,the machine moves from state 1 to state 2.
Fromstate 2, if/3 appears, the machine returns tothe start state without outputt ing a violation,but if the end of the domain appears withoutany/3 having appeared, the machine outputs  aviolation.3 Const ra in t  D is junct ionCrowhurst and Hewitt (1995) cite a numberof instances in which it appears that  multiplesimple constraints must be combined via dis-junction (there called conjunction) into com-plex constraints.
Here a simple constraint isa function that takes an input, surface pair asits input and returns true if a particular dis-allowed phonological structure or lack of corre-spondence is present in the pair, otherwise false.A constraint disjunction would thus be a func-tion that  returns the disjunction of the outputsof its component constraints.
Thus a constraintdefined by disjunction of component constraintsoutputs a violation whenever any one of its com-ponents does.Formalization of constraint disjunction re-quires reference only to intersection of weightedfinite state machines.
Specifically, if constraintCx is defined as a weighted finite state ma-chine T1 = (~E1, ~2,Qi, F1,81, Ex), where E1 is22the alphabet of labels, E2 is the alphabet ofweights, drawn from the natural numbers, Q1is the set of states of the machine, F1 C Q1 isthe final states, Sl is the start state, and E1 CQ1 ?
Y.q ?
Z,2 ?
Q1 is the set of edges, and con-straint C2 is another weighted eterministic fi-nite state machine T2 -- (~1, ~2, Q2, F2, s2, E2),then the disjunction of the two constraints maybe defined as follows:T = (~1, ~2, Q1 ?
Q2, F1 ?
F2, (81,82), E>,((q1,1, q2,1>, a, n, (ql,2, q2,2)> 6 E iff(ql,1, a l ,  nl ,ql ,2> E E iA(q2,1, a2, n2, q2,2) E E2Aa ---- a I N a2An = (nl v n2)A possible notation for the disjunction of twoconstraints C1 and C2 is C1 v C2, for example"(yce --+ vce) V (cont --+ cont)".A similar concept is that of mutually un-ranked primitive constraints.
For any given in-put, a complex constraint defined as a groupof mutually unranked primitive constraints re-turns the sum of the violations that the primi-tive constraints returned.
Although it has beenargued that the formal power provided by allow-ing new constraints to be defined by groupingmutually unranked primitive constraints i toogreat, constraints so defined are fairly prevalentin the literature.
For example, Steriade (1996)makes use of a constraint Parad igm Unifor-mi ty  (PU)  Stress which requires that all fea-tures within stressed syllables in-one memberof a paradigm must be preserved in the cor-responding syllable of other members of thatparadigm.
PU Stress is equivalent o a setof mutually unranked paradigm uniformity con-straints for all phonological features.
The em-pirical prediction of PU  Stress is that changesin any one feature are as important as changesin any other.
If PU  Stress were instead tobe considered a block of ranked constraints forthe individual features, the prediction would bethat in the comparison between one candidatein which the top-ranked feature is identical be-tween stressed syllables of the paradigm mem-bers, but all other features are different, andanother candidate in which only a lower-rankedfeature is different, the first candidate wouldprevail.
The data seems to bear out the predic-tion of the definition using mutually unrankedconstraints.
Another possible definition of PUStress would be to make use of constraint dis-junction.
In this definition, all features wouldbe equally important, but the number of non-identical features would not matter--candidatesdiffering in three features would be equal to can-didates differing in one feature.
Once again, thedefinition using mutually unranked constraintsseems better borne out by the data.Leaving aside constraints such as PU Stress,we will see that complex constraints defined ascombinations of mutually unranked constraintsare useful as inputs to local constraint conjunc-tions.
The formal definition of a complex con-straint in terms of mutually unranked subcon-straints is identical to the definition of a con-straint disjunction, except that the weight n ofa new edge is defined as the sum of the weightsof the input edges nl and n2 rather than thedisjunction:T = (El, E:, Q1 ?
Q2, F1 ?
F2, (sl, s2), E),((q1,1, q2,1), a, n, (ql,2, q2.2)) E E iff(ql,1,al, nl, ql,2) E E1A(q2,1, a2, n2, q:,2) E E2Aa 1 N a2 ---- aAA possible notation for a complex constraintC combining mutually unranked constraints C1and C2 is C1 + C2, for example "(vce ~ vce) +(cont ~ cont)".4 Loca l  Const ra in t  Con junct ionSmolensky (1995) and Kirchner (1996) proposea different method for combining constraints:local conjunction.
A local conjunction of con-straints is defined as a constraint hat outputsa violation for each domain of a specified typein which all of the component constraints areviolated.
A constraint may be locally conjoinedwith itself, in which case the resulting conjunc-tion outputs a violation whenever there are twoviolations of the component constraint withinthe specified omain.
The conjunction of a con-straint C1 with itself within a domain 7 may benotated "A(C1)/7.
"The following algorithm computes the localconjunction of constraint C1, where C1 is rep-resented by the weighted finite state machineT1 = (El, 22, Q1, Sl, F1, El), with itself within23a domain 7 defined as the intersection of thedomains '71 A .
.
.
A 'Tn:1.
Weaken C1 to a new constraint C1 ~ suchthat for any utterance to which C1 assignsa non-zero number n of violations, C1' as-signs n - 1 violations.
This may be accom-plished as follows:(a) Copy T1 as T~, renumbering the statesof T2 so that there is no ambiguity.
(b) Combine T1 and T2 into T =(E1,E2, Q1uQ2,sl,FiUF2, E= E1U(c) For each edge (qi, a, w, qj) E El, wherew > 0, modify the edge to (qi, a, w-1, s~}, where s2 is the state correspond-ing to the start state of T~.
T repre-sents constraint C1'.2.
Define a finite state machine M as follows:+G-G\[G\[.where G\[ represents the beginning of do-main '7, G\[ represents anything other thanG\[, -4-6 represents the interior of the do-main, \]G represents a boundary betweentwo '7 domains, and \]G represents he endof the '7 domain.The machine M will be used to limit theevaluation of constraint C1 ~ to the domain'7.
To accomplish this, we need to definethe behavior at the edges of the '7 domain.Outside the '7 domain, violations of C1 ~ willhave no effect.
At the left edge of the 3'domain, violations that do not involve theleft.
edge of constituents will have no effect.At the right edge of the '7 domain, viola-tions that do not involve the right edge ofconstituents will have no effect.
The finalweighted finite state machine L represent-ing the local conjunction of C1 with itselfis produced by intersecting M with T, withthe following modifications made to the in-tersection algorithm.
Edges from T thatare intersected with the edge G\[, or edgesfrom T that are intersected with the edgeG\[ and contain no reference to a left edge,or edges from T that are intersected withthe edge \]G and contain no reference to aright edge, are assigned a weight of 0, andif their destination within T was state s2,their destination in T is treated as havingbeen Sl.
This has the effect of limiting theconstraint violations of C1 ~ to the domain7.
Edges from T that are intersected withedge IG keep their original weight, but aretreated as though their destination withinT was sl.
This has the effect of resettingC1 ~ to zero violations at the beginning of a'7 domain immediately following another.The constraint A(C1)/7 produced by the abovealgorithm outputs a violation for every viola-tion of C1 after the first within domain '7.
ThusA(C1)/7 penalizes two or more violations of C1within '7, but does not penalize single violationsof C1.For example, the constraint A_kA is repre-sented as the following weighted finite state ma-chine:\]lA/1The result of the above algorithm is the follow-ing machine:IWd/0While this algorithm does not allow defini-tion of local conjunction of different constraints,24it can be given nearly equivalent power by ap-plying it to the output of complex constraintsformed from mutually unranked subconstraints.ReferencesDaniel M. Albro.
1998.
Evaluation, implemen-tation, and extension of Primitive OptimalityTheory.
Master's thesis, UCLA.Megan Crowhurst and Mark Hewitt.
1995.Conjunctive constraints and templates in Op-timality Theory.
Ms.Jason Eisner.
1997a.
Efficient generation inprimitive Optimality Theory.
In Proceedingsof the A CL.Jason Eisner.
1997b.
What constraints shouldOT allow?
Handout for talk at LSA,Chicago, January.Michael Kenstowicz and Charles Kisseberth.1988.
Chizigula tonology--the word and be-yond.
Ms.Robert Kirchner.
1996.
Synchronic hain shiftsin optimality theory.
Linguistic Inquiry.Paul Smolensky.
1995.
On the internal struc-ture of the constraint component Con of UG.Handout of talk given at UCLA, April.Donca Steriade.
1996.
Paradigm uniformityand the phonetics-phonology boundary.
In5th Conference in Laboratory Phonology,Evanston, Illinois.W.
D. Whitney.
1889.
Sanskrit grammar.
Har-vard University Press, Cambridge.25
