Inheritance and the CCG LexiconMark McConvilleInstitute for Communicating and Collaborative SystemsSchool of InformaticsUniversity of Edinburgh2 Buccleuch Place, Edinburgh, EH8 9LW, ScotlandMark.McConville@ed.ac.ukAbstractI propose a uniform approach to the elim-ination of redundancy in CCG lexicons,where grammars incorporate inheritancehierarchies of lexical types, defined overa simple, feature-based category descrip-tion language.
The resulting formalism ispartially ?constraint-based?, in that the cat-egory notation is interpreted against an un-derlying set of tree-like feature structures.I argue that this version of CCG subsumesa number of other proposed category no-tations devised to allow for the construc-tion of more efficient lexicons.
The for-malism retains desirable properties suchas tractability and strong competence, andprovides a way of approaching the prob-lem of how to generalise CCG lexiconswhich have been automatically inducedfrom treebanks.1 The CCG formalismIn its most basic conception, a CCG over alpha-bet ?
of terminal symbols is an ordered triple?A,S, L?, where A is an alphabet of saturated cat-egory symbols, S is a distinguished element of A,and L is a lexicon, i.e.
a mapping from ?
to cate-gories over A.
The set of categories over alphabetA is the closure of A under the binary infix con-nectives / and \ and the associated ?modalities?
ofBaldridge (2002).
For example, assuming the sat-urated category symbols ?S?
and ?NP?, here is asimple CCG lexicon (modalities omitted):John ` NP(1)Mary ` NPloves ` (S\NP)/NPThe combinatory projection of a CCG lexicon isits closure under a finite set of resource-sensitivecombinatory operations such as forward applica-tion (2), backward application (3), forward typeraising (4), and forward composition (5):X/Y Y ?
X(2)Y X\Y ?
X(3)X ?
Y/(Y \X)(4)X/Y Y/Z ?
X/Z(5)CCG ?A,S, L?
over alphabet ?
generates strings ?
??
just in case ?s, S?
is in the combinatoryprojection of lexicon L. The derivation in Figure1 shows that CCG (1) generates the sentence Johnloves Mary, assuming that ?S?
is the distinguishedsymbol, and where >T, >B and > denote in-stances of forward raising, forward compositionand forward application respectively:John loves MaryNP (S\NP)/NP NP>TS/(S\NP)>BS/NP>SFigure 1: A CCG derivation2 Lexical redundancy in CCGCCG has many advantages both as a theory ofhuman linguistic competence and as a tool forpractical natural language processing applications(Steedman, 2000).
However, in many cases de-velopment has been hindered by the absence ofan agreed uniform approach to eliminating redun-dancy in CCG lexicons.
This poses a particularproblem for a radically lexicalised formalism suchas CCG, where it is customary to handle bounded1dependency constructions such as case, agreementand binding by means of multiple lexical cate-gory assignments.
Take for example, the languageschematised in Table 1.
This fragment of English,though small, exemplifies certain non-trivial as-pects of case and number agreement:John Johnhe loves methe girl yougirls himI usyou love themwe the girlthey girlsgirls girlsTable 1: A fragment of EnglishThe simplest CCG lexicon for this fragment is pre-sented in Table 2:John ` NPsgsbj, NPobjgirl ` Nsgs ` Npl\Nsg, NPplsbj\Nsg, NPobj\Nsgthe ` NPsgsbj/Nsg, NPobj/Nsg,NPplsbj/Npl, NPobj/NplI,we, they ` NPplsbjme, us, them, him ` NPobjyou ` NPplsbj, NPobjhe ` NPsgsbjlove ` (S\NPplsbj)/NPobjs ` ((S\NPsgsbj)/NPobj)\((S\NPplsbj)/NPobj)Table 2: A CCG lexiconThis lexicon exhibits a number of multiple cate-gory assignments: (a) the proper noun John andthe second person pronoun you are each assignedto two categories, one for each case distinction;(b) the plural suffix -s is assigned to three cate-gories, depending on both the case and ?bar level?of the resulting nominal; and (c) the definite arti-cle the is assigned to four categories, one for eachcombination of case and number agreement dis-tinctions.
Since in each of these three cases thereis no pretheoretical ambiguity involved, it is clearthat this lexicon violates the following efficiency-motivated ideal on human language lexicons, inthe Chomskyan sense of locus of non-systematicinformation:ideal of functionality a lexicon is ideally a func-tion from morphemes to category labels, modulogenuine ambiguityAnother efficiency-motivated ideal which theCCG lexicon in Table 2 can be argued to violateis the following:ideal of atomicity a lexicon is a mapping frommorphemes ideally to atomic category labelsIn the above example, the transitive verb love ismapped to the decidedly non-atomic category la-bel (S\NPplsbj)/NPobj.
Lexicons which violate thecriteria of functionality and atomicity are not justinefficient in terms of storage space and develop-ment time.
They also fail to capture linguisticallysignificant generalisations about the behaviour ofthe relevant words or morphemes.The functionality and atomicity of a CCG lexi-con can be easily quantified.
The functionality ra-tio of the lexicon in Table 2, with 22 lexical entriesfor 14 distinct morphemes, is 2214 = 1.6.
The atom-icity ratio is calculated by dividing the number ofsaturated category symbol-tokens by the numberof lexical entries, i.e.
3622 = 1.6.Various, more or less ad hoc generalisations ofthe basic CCG category notation have been pro-posed with a view to eliminating these kinds oflexical redundancy.
One area of interest has in-volved the nature of the saturated category sym-bols themselves.
Bozsahin (2002) presents a ver-sion of CCG where saturated category symbolsare modified by unary modalities annotated withmorphosyntactic features.
The features are them-selves ordered according to a language-particularjoin semi-lattice.
This technique, along with theinsistence that lexicons of agglutinating languagesare necessarily morphemic, allows generalisationsinvolving the morphological structure of nounsand verbs in Turkish to be captured in an elegant,non-redundant format.
Erkan (2003) generalisesthis approach, modelling saturated category labelsas typed feature structures, constrained by under-specified feature structure descriptions in the usualmanner.Hoffman (1995) resolves other violations of theideal of functionality in CCG lexicons for lan-guages with ?local scrambling?
constructions bymeans of ?multiset?
notation for unsaturated cat-egories, where scope and direction of argumentscan be underspecified.
For example, a multisetcategory label like S{\NPsbj, \NPobj} is to be un-derstood as incorporating both (S\NPsbj)\NPobjand (S\NPobj)\NPsbj.Computational implementations of the CCGformalism, including successive versions of the2Grok/OpenCCG system1, have generally dealtwith violations of the ideal of atomicity by allow-ing for the definition of macro-style abbreviationsfor unsaturated categories, e.g.
using the macro?TV?
as an abbreviation for (S\NPsbj)/NPobj.One final point of note involves the project re-ported in Beavers (2004), who implements CCGwithin the LKB system, i.e.
as an application ofthe Typed Feature Structure Grammar formalismof Copestake (2002), with the full apparatus of un-restricted typed feature structures, default inheri-tance hierarchies, and lexical rules.3 Type-hierarchical CCGOne of the aims of the project reported here hasbeen to take a bottom-up approach to the prob-lem of redundancy in CCG lexicons, adding justenough formal machinery to allow the relevantgeneralisations to be formulated, whilst retaining arestrictive theory of human linguistic competencewhich satisfies the ?strong competence?
require-ment, i.e.
the competence grammar and the pro-cessing grammar are identical.I start with a generalisation of the CCG for-malism where the alphabet of saturated categorysymbols is organised into a ?type hierarchy?
inthe sense of Carpenter (1992), i.e.
a weak order?A,vA?, where A is an alphabet of types, vA isthe ?subsumption?
ordering on A (with a least ele-ment), and every subset of A with an upper boundhas a least upper bound.
An example type hi-erarchy is in Figure 2, where for example types?Nomsg?
and ?NP?
are compatible since they havea non-empty set of upper bounds, the least upperbound (or ?unifier?)
being ?NPsg?.NPsgsbj NPplsbj NPsgobj NPplobjQQQQQQPPPPPPNPsbj NPobj NPsg NPpl Nsg Npl## LL HHHHPPPPPPP  PPPPPHHHH  NP Nomsg Nompl N   @@ PPPPPPNomS!!!!
PPPPtopFigure 2: Type hierarchy of saturated categoriesA type-hierarchical CCG (T-CCG) over alpha-bet ?
is an ordered 4-tuple ?A,vA, S, L?, where1http://openccg.sourceforge.net?A,vA?
is a type hierarchy of saturated categorysymbols, S is a distinguished element of A, andlexicon L is a mapping from ?
to categories overA.
Given an appropriate vA-compatibility rela-tion on the categories over A, the combinatoryprojection of T-CCG ?A,vA, S, L?
can again bedefined as the closure of L under the CCG com-binatory operations, assuming that variable Y inthe type raising rule (4) is restricted to maximallyspecified categories.The T-CCG lexicon in Table 3, in tandem withthe type hierarchy in Figure 2, generates the frag-ment of English in Table 1:John ` NPsggirl ` Nsgs ` Nompl\Nsgthe ` NPsg/Nsg, NPpl/NplI,we, they ` NPplsbjme, us, them ` NPplobjyou ` NPplhe ` NPsgsbjhim ` NPsgobjlove ` (S\NPplsbj)/NPobjs ` ((S\NPsgsbj)/NPobj)\((S\NPplsbj)/NPobj)Table 3: A T-CCG lexiconUsing this lexicon, the sentence girls love John isderived as in Figure 3:girl s love JohnNsg Nompl\Nsg (S\NPplsbj)/NPobj NPsg<Nompl>TS/(S\Nompl)>BS/NPobj>SFigure 3: A T-CCG derivationThe T-CCG lexicon in Table 3 comes closer to sat-isfying the ideal of functionality than does the lex-icon in Table 2.
While the latter has a functionalityratio of 1.6, the former?s is 1614 = 1.1.This improved functionality ratio results fromthe underspecification of saturated category sym-bols inherent in the subsumption relation.
For ex-ample, whereas the proper noun John is assignedto two distinct categories in the lexicon in Table2, in the T-CCG lexicon it is assigned to a sin-gle non-maximal type ?NPsg?
which subsumes thetwo maximal types ?NPsgsbj?
and ?NPsgobj?.
In other3words, the phenomenon of case syncretism in En-glish proper nouns is captured by having a generalsingular noun phrase type, which subsumes a plu-rality of case distinctions.The T-CCG formalism is equivalent to the ?mor-phosyntactic CCG?
formalism of Bozsahin (2002),where features are ordered in a join semi-lattice.Any generalisation which can be expressed in amorphosyntactic CCG can also be expressed in aT-CCG, since any lattice of morphosyntactic fea-tures can be converted into a type hierarchy.
Inaddition, T-CCG is equivalent to the formalismdescribed in Erkan (2003), where saturated cat-egories are modelled as typed feature structures.Any lexicon from either of these formalisms canbe translated into a T-CCG lexicon whose func-tionality ratio is either equivalent or lower.4 Inheritance-driven CCGA second generalisation of the CCG formalism in-volves adding a second alphabet of non-terminals,in this case a set of ?lexical types?.
The lexicaltypes are organised into an ?inheritance hierarchy?,constrained by expressions of a simple feature-based category description language, inspired byprevious attempts to integrate categorial grammarsand unification-based grammars, e.g.
Uszkoreit(1986) and Zeevat et al (1987).4.1 Simple category descriptionsThe set of simple category descriptions over al-phabet A of saturated category symbols is definedas the smallest set ?
such that:1.
A ?
?2.
for all ?
?
{f, b}, (SLASH ?)
?
?3.
for all ?
?
?, (ARG ?)
?
?4.
for all ?
?
?, (RES ?)
?
?Note that category descriptions may be infinitelyembedded, in which case they are considered tobe right-associative, e.g.
RES ARG RES SLASH f.A simple category description like (SLASH f) or(SLASH b) denotes the set of all expressions whichseek their argument to the right/left.
A descriptionof the form (ARG ?)
denotes the set of expressionswhich take an argument of category ?, and onelike (RES ?)
denotes the set of expressions whichcombine with an argument to yield an expressionof category ?.Complex category descriptions are simply setsof simple category descriptions, where the as-sumed semantics is simply that of conjunction.4.2 Lexical inheritance hierarchiesLexical inheritance hierarchies (Flickinger, 1987)are type hierarchies where each type is associatedwith a set of expressions drawn from some cate-gory description language ?.
Formally, they areordered triples ?B,vB, b?, where ?B,vB?
is atype hierarchy, and b is a function fromB to ?(?
).An example lexical inheritance hierarchy overthe set of category descriptions over the alpha-bet of saturated category symbols in Table 2 ispresented in Figure 4.
The intuition underlyingthese (monotonic) inheritance hierarchies is thatinstances of a type must satisfy all the constraintsassociated with that type, as well as all the con-straints it inherits from its supertypes.verbplRES ARG Nompl verbsgRES ARG NomsgdetsgARG NomsgRES NomsgdetplARG NomplRES NomplBBBBsuffixsgARG verbplRES verbsgsuffixplARG NsgRES NomplCCCCverbSLASH fARG NPobjRES SLASH bRES ARG NPsbjRES RES SdetSLASH fARG NRES NPsuffixSLASH bHHHHHHtopFigure 4: A lexical inheritance hierarchyThis example hierarchy is a single inheritance hi-erarchy, since every lexical type has no more thanone immediate supertype.
However, multiple in-heritance hierarchies are also allowed, where agiven type can inherit constraints from two super-types, neither of which subsumes the other.4.3 I-CCGsAn inheritance-driven CCG (I-CCG) over alpha-bet ?
is an ordered 7-tuple ?A,vA, B,vB, b,S, L?, where ?A,vA?
is a type hierarchy of sat-urated category symbols, ?B,vB, b?
is an inheri-tance hierarchy of lexical types over the set of cat-egory descriptions overA?B, S is a distinguishedsymbol inA, and lexicon L is a function from ?
toA ?
B.
Given an appropriate vA,B-compatibilityrelation on the categories overA?B, the combina-tory projection of I-CCG ?A,vA, B,vB, b, S, L?can again be defined as the closure of L under the4CCG combinatory operations.The I-CCG lexicon in Table 4, along with thetype hierarchy of saturated category symbols inFigure 2 and the inheritance hierarchy of lexicaltypes in Figure 4, generates the fragment of En-glish in Table 1.
Using this lexicon, the sentenceJohn ` NPsggirl ` Nsgs ` suffixthe ` detI,we, they ` NPplsbjme, us, them ` NPplobjyou ` NPplhe ` NPsgsbjhim ` NPsgobjlove ` verbplTable 4: An I-CCG lexicongirls love John is derived as in Figure 5, wherederivational steps involve ?cache-ing out?
sets ofconstraints from lexical types.girl s love JohnNsg suffix verbpl NPsgSLASH b RES ARG Nomplsuffixpl verbARG Nsg SLASH fRES Nompl ARG NPobj< RES SLASH bNompl RES ARG NPsbj>T RES RES SRES SSLASH fARG RES SARG ARG NomplARG SLASH b>BRES SARG NPobjSLASH f>SFigure 5: An I-CCG derivationThis derivation relies on a version of the CCGcombinatory rules defined in terms of the I-CCGcategory description language.
For example, for-ward application is expressed as follows ?
for allcompex category descriptions ?
and ?
such that(SLASH b) 6?
?, and {?
| (ARG ?)
?
?}
?
?
iscompatible, the following is a valid inference:?
?>{?
| (RES ?)
?
?
}The functionality ratio of the I-CCG lexicon in Ta-ble 4 is 1414 = 1 and the atomicity ratio is 1414 = 1.In other words, the lexicon is maximally non-redundant, since all the linguistically significantgeneralisations are encodable within the lexical in-heritance hierarchy.The optimal atomicity ratio of the I-CCG lexi-con is a direct result of the introduction of lexicaltypes.
In the T-CCG lexicon in Table 3, the transi-tive verb love was assigned to a non-atomically la-belled category (S\NPplsbj)/NPobj.
In the I-CCG?sinheritance hierarchy in Figure 4, there is a lexicaltype ?verbpl?
which inherits six constraints whoseconjunction picks out exactly the same category.It is with this atomic label that the verb is pairedin the I-CCG lexicon in Table 4.The lexical inheritance hierarchy also has a roleto play in constructing lexicons with optimal func-tionality ratios.
The T-CCG lexicon in Table 3assigned the definite article to two distinct cate-gories, one for each grammatical number distinc-tion.
The I-CCG utilises the disjunction inherentin inheritance hierarchies to give each of these acommon supertype ?det?, which is associated withthe properties all determiners share.Finally, the I-CCG formalism can be arguedto subsume the multiset category notation ofHoffman (1995), in the sense that every mul-tiset CCG lexicon can be converted into an I-CCG lexicon with an equivalent or better func-tionality ratio.
Recall that Hoffman uses gener-alised category notation like S{\NPsbj, \NPobj}to subsume two standard CCG category labels(S\NPsbj)\NPobj and (S\NPobj)\NPsbj.
Again itshould be clear that this is just another way ofrepresenting disjunction in a categorial lexicon,and can be straightforwardly converted into a lexi-cal inheritance hierarchy over I-CCG category de-scriptions.5 Semantics of the category notationIn the categorial grammar tradition initiated byLambek (1958), the standard way of providing asemantics for category notation defines the deno-tation of a category description as a set of stringsof terminal symbols.
Thus, assuming an alphabet?
and a denotation function [[.
.
.]]
from the sat-urated category symbols to ?(?
), the denotata ofunsaturated category descriptions can be definedas follows, assuming that the underlying logic issimply that of string concatenation:[[?/?]]
= {s | ?s?
?
[[?
]], ss?
?
[[?]]}(6)[[?\?]]
= {s | ?s?
?
[[?
]], s?s ?
[[?
]]}This suggests an obvious way of interpreting theI-CCG category notation defined above.
Let?s5start by assuming that, given some I-CCG ?A,vA,B,vB, b, S, L?
over alphabet ?, there is a deno-tation function [[.
.
.]]
from the maximal types inthe hierarchy of saturated categories ?A,vA?
to?(?).
For all non-maximal saturated categorysymbols ?
in A, the denotation of ?
is then theset of all strings in any of ?
?s subcategories, i.e.[[?]]
= ??vA?[[?]].
The denotata of the simplecategory descriptions can be defined by universalquantification over the set of simple category de-scriptions ?:?
[[SLASH f]] = ??,???[[?/?]]?
[[SLASH b]] = ??,???[[?\?]]?
[[ARG ?]]
= ????[[?/?]]
?
[[?\?]]?
[[RES ?]]
= ????[[?/?]]
?
[[?\?
]]This just leaves the simple descrip-tions which consist of a type in thelexical inheritance hierarchy ?B,vB,b?.
If we define the constraint set of somelexical type ?
?
B as the set ?
of all categorydescriptions either associated with or inheritedby ?, then the denotation of ?
is defined as????[[?
]].Unfortunately, this approach to interpreting I-CCG category descriptions is insufficient, sincethe logic underlying CCG is not simply the logicof string concatenation, i.e.
CCG allows a limiteddegree of permutation by dint of the crossed com-position and substitution operations.
In fact, thereappears to be no categorial type logic, in the senseof Moortgat (1997), for which the CCG combi-natory operations provide a sound and completederivation system, even in the resource-sensitivesystem of Baldridge (2002).
An alternative ap-proach involves interpreting I-CCG category de-scriptions against totally well-typed, sort-resolvedfeature structures, as in the HPSG formalism ofPollard and Sag (1994).Given some type hierarchy ?A,vA?
of saturatedcategory symbols and some lexical inheritance hi-erarchy ?B,vB, b?, we define a class of ?categorymodels?, i.e.
binary trees where every leaf nodecarries a maximal saturated category symbol in A,every non-leaf node carries a directional slash, andevery branch is labelled as either a ?result?
or an?argument?.
In addition, nodes are optionally la-belled with maximal lexical types from B. Notethat since only maximal types are permitted in amodel, they are by definition sort-resolved.
As-suming the hierarchies in Tables 2 and 4, an ex-ample category model is given in Figure 6, wherearcs by convention point downwards:S  RNPplsbj@@A\RNPsgobjQQQ A/ : verbplFigure 6: A category modelGiven some inheritance hierarchy ?B,vB, b?
oflexical types, not all category models whose nodesare labelled with maximal types from B are ?well-typed?.
In fact, this property is restricted to thosemodels where, if node n carries lexical type ?,then every category description in the constraintset of ?
is satisfied from n. Note that the rootof the model in Figure 6 carries the lexical type?verbpl?.
Since all six constraints inherited by thistype in Figure 4 are satisfied from the root, andsince no other lexical types appear in the model,we can state that the model is well-typed.In sum, given an appropriate satisfaction rela-tion between well-typed category models and I-CCG category descriptions, along with a definitionof the CCG combinatory operations in terms ofcategory models, it is possible to provide a formalinterpretation of the language of I-CCG categorydescriptions, in the same way as unification-basedformalisms like HPSG ground attribute-value no-tation in terms of underlying totally well-typed,sort-resolved feature structure models.
Such a se-mantics is necessary in order to prove the correct-ness of eventual I-CCG implementations.6 Extending the description languageThe I-CCG formalism described here involves ageneralisation of the CCG category notation to in-corporate the concept of lexical inheritance.
Theprimary motivation for this concerns the ideal ofnon-redundant encoding of lexical information inhuman language grammars, so that all kinds of lin-guistically significant generalisation can be cap-tured somewhere in the grammar.
In order to fulfilthis goal, the simple category description languagedefined above will need to be extended somewhat.For example, imagine that we want to specify the6set of all expressions which take an NPobj argu-ment, but not necessarily as their first argument,i.e.
the set of all ?transitive?
expressions:ARG NPobj(7)?
RES ARG NPobj?
RES RES ARG NPobj?
.
.
.It should be clear that this category is not finitelyspecifiable using the I-CCG category notation.One way to allow such generalisations to bemade involves incorporating the ?
modal itera-tion operator used in Propositional Dynamic Logic(Harel, 1984) to denote an unbounded numberof arc traversals in a Kripke structure.
In otherwords, category description (RES* ?)
is satisfiedfrom node n in a model just in case some finite se-quence of result arcs leads from n to a node where?
is satisfied.
In this way, the set of expressionstaking an NPobj argument is specified by means ofthe category description RES* ARG NPobj.7 Computational aspectsAt least as far as the I-CCG category notation de-fined in section 4.1 is concerned, it is a straight-forward task to take the standard CKY approachto parsing with CCGs (Steedman, 2000), and gen-eralise it to take a functional, atomic I-CCG lex-icon and ?cache out?
the inherited constraints on-line.
As long as the inheritance hierarchy is non-recursive and can thus be theoretically cached outinto a finite lexicon, the parsing problem remainsworst-case polynomial.In addition, the I-CCG formalism satisfiesthe ?strong competence?
requirement of Bresnan(1982), according to which the grammar used byor implicit in the human sentence processor isthe competence grammar itself.
In other words,although the result of cache-ing out particularlycommon lexical entries will undoubtedly be partof a statistically optimised parser, it is not essen-tial to the tractability of the formalism.One obvious practical problem for which thework reported here provides at least the germ ofa solution involves the question of how to gener-alise CCG lexicons which have been automaticallyinduced from treebanks (Hockenmaier, 2003).
Totake a concrete example, Cakici (2005) induces awide coverage CCG lexicon from a 6000 sentencedependency treebank of Turkish.
Since Turkish isa pro-drop language, every transitive verb belongsto both categories (S\NPsbj)\NPobj and S\NPobj.However, data sparsity means that the automati-cally induced lexicon assigns only a small minor-ity of transitive verbs to both classes.
One possi-ble way of resolving this problem would involvetranslating the automatically induced lexicon intosets of fully specified I-CCG category descrip-tions, generating an inheritance hierarchy of lex-ical types from this lexicon (Sporleder, 2004), andapplying some more precise version of the follow-ing heuristic: if a critical mass of words in the au-tomatically induced lexicon belong to both CCGcategories X and Y , then in the derived I-CCGlexicon assign all words belonging to either X orY to the lexical type which functions as the great-est lower bound of X and Y in the lexical inheri-tance hierarchy.8 AcknowledgementsThe author is indebted to the following people forproviding feedback on various drafts of this paper:Mark Steedman, Cem Bozsahin, Jason Baldridge,and three anonymous EACL reviewers.ReferencesBaldridge, J.
(2002).
Lexically Specified Deriva-tional Control in Combinatory CategorialGrammar.
PhD thesis, University of Edinburgh.Beavers, J.
(2004).
Type-inheritance Combina-tory Categorial Grammar.
In Proceedings ofthe 20th International Conference on Compu-tational Linguistics, University of Geneva.Bozsahin, C. (2002).
The combinatory morphemiclexicon.
Computational Linguistics, 28(2):145?186.Bresnan, J., editor (1982).
The Mental Represen-tation of Grammatical Relations.
MIT Press,Cambridge MA.Cakici, R. (2005).
Automatic induction of a CCGgrammar for Turkish.
In Proceedings of the Stu-dent Research Workshop, 43rd Annual Meetingof the Association for Computational Linguis-tics, University of Michigan, pages 73?78.Carpenter, B.
(1992).
The Logic of Typed Fea-ture Structures.
Cambridge Tracts in Theoret-ical Computer Science.
Cambridge UniversityPress.Copestake, A.
(2002).
Implementing Typed Fea-ture Structure Grammars.
CSLI Publications,Stanford CA.7Erkan, G. (2003).
A Type System for Combina-tory Categorial Grammar.
Master?s thesis, Mid-dle East Technical University, Ankara.Flickinger, D. P. (1987).
Lexical Rules in the Hi-erarchical Lexicon.
PhD thesis, Stanford Uni-versity.Harel, D. (1984).
Dynamic logic.
In Gabbay, D.and Guenthner, F., editors, Handbook of Philo-sophical Logic, Volume 2, pages 497?604.
Rei-del, Dordrecht.Hockenmaier, J.
(2003).
Data and Models forStatistical Parsing with Combinatory Catego-rial Grammar.
PhD thesis, University of Ed-inburgh.Hoffman, B.
(1995).
The Computational Analy-sis of the Syntax and Interpretation of ?Free?Word Order in Turkish.
PhD thesis, Universityof Pennsylvania.Lambek, J.
(1958).
The Mathematics of SentenceStructure.
American Mathematical Monthly,65:154?170.Moortgat, M. (1997).
Categorial type logics.
Invan Benthem, J. and ter Meulen, A., editors,Handbook of Logic and Language, pages 93?177.
North Holland, Amsterdam, NL.Pollard, C. J. and Sag, I.
A.
(1994).
Head-DrivenPhrase Structure Grammar.
The University ofChicago Press.Sporleder, C. (2004).
Discovering Lexical Gener-alisations: A Supervised Machine Learning Ap-proach to Inheritance Hierarchy Construction.PhD thesis, University of Edinburgh.Steedman, M. (2000).
The Syntactic Process.
MITPress, Cambridge MA.Uszkoreit, H. (1986).
Categorial UnificationGrammars.
In Proceedings of the 11th Inter-national Conference on Computational Linguis-tics, Bonn, pages 187?194.Zeevat, H., Klein, E., and Calder, J.
(1987).
Uni-fication Categorial Grammar.
In Haddock, N.,Klein, E., and Morrill, G., editors, CategorialGrammar, Unification Grammar and Parsing,Working Papers in Cognitive Science.
Centrefor Cognitive Science, University of Edinburgh.8
