The computational complexity ofsentence derivation in functional unification grammarGraeme RitchieDepartment of Artificial IntelligenceUniversity of EdinburghEdinburgh EHI IHNAbstractFunctional unification (FU) grammar is a generallinguistic formalism based on the merging offeature-sets.
An informal outline is given of howthe definition of derivation within FU grammar can beused to represent the satisfiabil ity of an arbitrarylogical formula in conjunctive normal form.
Thissuggests that the generation of a structure from anarbitrary FU g~ammar is NP-hard, which is anundesirably high level of computational complexity.I.
Functional Unification GrammarThere is not space here to give a fulldefinition of FU grammar (see Kay (1979, 1984, 1985),Ritchie(1984)); the aim is rather to outline how theproblem of satisfiabil ity of a propositional logicexpression in conjunctive normal form (CNF) can beexpressed as a derivation in FU grammar, therebysuggesting that the derivation question in FU grammaris "NP-hard" (Garey and Johnson (1979)).
0nly thoseaspects of FU grammar which are relevant to thesketch of the proof will be outlined.
The argumenthere is wholly independent of the generative powerdiscussion in Ritchie(1984).Functional unification (FU) grammar is agrammatical formalism which allows descriptions oflinguistic structures to be expressed as functionaldescriptions (FDs), which are sets of "features"\[attribute-value pairs), and grammatical derivationis expressed in terms of these structures.
Within alevel of an FD, each feature-name can appear onlyonce; i.e.
no feature can appear with two differentvalues.
Constituent structure within FDs isindicated as follows.
In an FD E, any feature Fwhose feature-name is listed in the value of thePATTERN feature at the same level of nesting within Eis a constituent.
Feature-values written in angle-brackets (e.g.
<DEFINITE>I are not simple data-values, but are pointers to other positions withinthe structure.
These "paths" indicate a structuralposition that can be found by starting at theoutermost level of nesting and tracing feature-namesinward along the path.An FD El is said to be an extension of anotherFD E2 if there is a sub-structure of El which isisomorphic to EY, including identity of feature-n~nesand all feature-values.
In determining if El is anextension of E2, the comparison process must start atthe outermost level.An FU grammar can be thought of as a set of FDs, eachone describing a possible shape for a constituent inthe language.
A FD F is well-formed with respect tothe grammar G if there is an FD E in G such that F isan extension of E, and every constituent of F (seeabove) is well-formed with respect to G. Anarbitrary FD can be used as the initial structure inderiving a fuller FD.
Suppose G is a FU grammar, FIand F2 are PDs.
Then FI derives F2 using grammar G ifF2 is well-formed with respect to G, and F2 is anextension of FI.In the textual representation of an FU grammar,it is normal to represent several similar FDs bywriting just one FD containing disjunctive lists ofthe possible variations between braces (curlybrackets).
This is an abbreviation for the full setof basic FDs, each corresponding to choosing one itemfrom each disjunctive list.2.
Representing CNF expressionsIn representing CNF-satisfiability as FU grammarderivation, we will divide the information containedin the CNF expression between two structures - an FD(which will act as the initial functional descriptionfor the derivation) and an FU grammar (with respectto which the derivation is defined).
The formerencodes, in a very direct way, the structure of theCNF expression, whereas the latter is of a verygeneral form which varies only in size laccording tothe number of propositional symbols and number ofconjuncts in the CNF expression).Suppose the CNF expression has n propositionalsymbols PI,..Pn, and k conj uncts.
The FUrepresentation will involve the feature-nm~es "CAT","PATTERN", "PI ", .... "Pn" , "NOT-PI ", ..... ,"NOT-Pn" ,"CI", "CY",..."Ck", with the feature-values CNF-EXPRESSION, CONJUNCT,TRUE, FALSE, NONE and the k-tuple \[CI .... Ck).
A conjunct of the CNF expressionwhich mentions the literals All\], AI2 \] ....
Aim 1explicitly but omits A(m+1\] ..... A\[Yn) teach A\[ \]ibeing either an atomic proposition or a negatedatomic proposition) will be represented by an FD ofthe general form given in (I\].\[CAT = CONJUNCT (I)AI  =<A\[YJ>Ai~)'~ <A(m)>Aim+t1 = NONEA\[m+2) = NONENONE\]The whole CNF expression will be represented by an FDof the general form in (2), where each of the featurevalues for the Ci are representations of theindividual conjuncts as described in (I).584\[ CAT = CNF-EXPRESSION \[2)CI = ?
......C2 = .
......,,o?.,..
?.Ck = ?
......\]The FU grammar wil l  eontaln two FDs.
The firstof these wil l  be an FD represent ing the overal l  formof any CNF expression with n symbols and k conjuncts,including a set of d is junct ive l ists represent ing allpossible choices of truth-values for theproposit ional  var iables involved; this wil l  be of thegeneral  form in \[3\].\[ CAT = CNF-EXPRESSION (3)PATTERN = \[C1 C2 .
.
.
.
.
.
Ck\]\[P1 = TRIJENOT-PI = FALSE\]\[PI = FALSENOT-PI ~.
TRUE\]\[P2 ~ TRUENOT-P2 = FALSE\]\[P2 ~ FALSENOT-P2.
,  TRUE\]\[Pn : TRUENOT-Pn = FALSE\]\[Pn = FALSENOT-Pn = TRUE\]}\]The FU grammar also contains a FD which contains adis junct ion l ist ing all the possible proposit ionall i terals l inked to "TRUE", as in \[4\].\[CAT = CONJUNCT (4)TRUEJNOT-P1 = TRUE 1NOT-P2 " TRUEJt \]The FD that should be the outcome of the der ivat ionprocess is one which has truth-values expl ic i t lymarked in for some of the l iterals, in such a waythat consistent ass ignments are given to aproposit ional  symbol and its negation, and eachconjunct contains \[at least\] one l i teral  feature withTRUE as its value.
For example, the der ivat ion of anFD from the init ial FD and grammar represent ing theCNF expression(PI v~P2\ ]  A P3could result  in an FD as in (5\].\[ CAT = CNF-EXPRESSION \[5)PATTERN ~ \[CI C2\]PI = TRUENOT-PI ~ FALSEP2 = FALSENOT-P2 ~ TRUEP3 = TRUENOT-P3 ~ FALSECI = \[ CAT = CONJUNCTPI = <PI>NOT-PI = NONEP2 = NONENOT-P2 = <NOT-P2>P3 = NONENOT-P3 = NONE \]C2 = \[ CAT = CONJUNCTPI = NONENOT-PI = NONEP2 = NONENOT-P2 = NONEP3 = <P3>NOT-P3 ~ NONE\] \]It is s t ra ight forward to check that this is der ivablefrom the or iginal  CNF FD; i.e.
this FD is anextension of the FD l lke \[2\].
and this FD is well-formed w.r.t, a CNF FU grammar like \[3\] and (4)\[since each of its const i tuents  is the extension ofsome FD in that grammar\].3.
Outl ine of proofIn order to prove that FU der ivat ion is NP-hard,we have to establ ish that the problem of whether aCNF express ion is sat is f iab le can be reduced by apolynomial - t lme algorithm to the problem of whetheran FD can be the basis of a successful  der ivat ionwith respect to a grammar.
(It is not necessary toestabl ish the reverse reduct ion - it is not asymmetr ical  relat ionship).
Thus the fo l lowing mustbe establ ished:I. there is a polynomial  time a lgor i thm whichconverts any CNF expression into therepresentat ion out l ined above (\[I\], (2\], \[3\],\[4)\]2. the CNF expression is sat is f iab le if and only ifthe FD produced by this a lgor i thm leads to asuccessful  der ivat ion w.r.t, the grammarconstructed by the algorithm.It should be intuit ively p lausib le that a polynomialt ime algor i thm exists for the conversion, as the FUrepresentat ion is so direct ly related to the CNFformula.
\[The use of d is junct ions in the grammar isre levant here, s ince the expanded form of the grammarwould have an exponent ia l  number of entries).The central result (sat is f iabi l i ty  iffder ivabi l i ty)  can be proved separately in the twodirections:sat ls f lab i l l ty  ~> derivabi l i ty.If a CNF expression Q is satisf iable, an FD canbe created as in \[6\], such that, for all i in therange I to n:585(a\] Xi, Yi are in ITRUE, FALSE}(b)  x i  : J= Yiand fo r  each  j in  the  range  1 to  k:(a) if a literal A appears in the jth conjunct of Q,then the feature named A in the FD labelled Cjhas the value <A>.\[b) if a literal A does not appear in the jthconjunct of Q, then the feature named A in thejth FD has the value NONE.
(c) there is at least one feature value Z(j,i) orW(j,i) which is of the form <A> where thefeature-value labelled A at the outer level isTRUE.
(i.e.
either Z\[j,i) is <Pi> and Xi isTRUE, or W\[j,i) is <NOT-Pi> and Yi is TRUE.\[ CAT = CNF-EXPRESSION \[6)PATTERN = \[C1 .
.
Ck\]PI = XINOT-PI = YI~ X nNOT-Pn = YnCI = \[ CAT = CONJUNCTP1 = Z(1 ,1 )NOT-PI - W\[1,1)P2 : z (1 ,~)NOT-P2 = w(1 ,2 )?
.
.
.
.
.
.
.
?
.
, ,Ck = \[ CAT : CONJUNCTP~ - ZIk,1)NOT-P1 = W(k,1)pn ' i  Z (k ,n )NOT-Pn - W(k ,n ) \ ]\]This is an extension of the original CNF FD(cf.
(I),(2)), and is well-formed w.r.t, the FUgrammar for CNF expressions I\[3),(4)).
Hence thereis a derivation from the CNF FD and CNF grammar as in\[I), \[2), (3) and (4).derivability => satisflabilityIf the FD as in (2) above can lead to asuccessful derivation w.r.t, the grammar containing\[3) and \[4) above, there must be an FD F such that Fis an extension of both (2) and some FD in thegrammar.
Since \[2) contains the feature \[CAT = CNF-EXPRESSION\], the only grammar FD of which F couldalso be an extension is one of those represented in(3), containing \[CAT = CNF-EXPRESSION\] together withfeatures denoting a consistent assignment of truth-values to the Pi (i.e.
an FD formed by selectingfeatures from the disjunctive representation in (3 ) )Thus F must contain sub-structures llke (2) and (3)at its outermost level, including the PATTERN =\[CI...Ck\] feature.
Since F is well-formed w.r.t, thegrammar, each constituent of F must be well-formedw.r.t, the grammar.
F's constituents are exactly thevalues of the features Ci (as in (I)), so for each ofthese FDs there must be an FD in the grammar of whichthe constituent FD is an extension.
Since the586constituent FDs all include the feature CATCONJUNCT, the only grammar FDs pertinent are thosewhich contain CAT CONJUNCT and a single featurerepresenting an assignment of TRUE to a particularliteral (i.e.
FDs from (4)).
The constituent can bean extension of such a grammar FD only if it alsocontains the same feature with the feature-value TRUE(since all llterals appear in (I), either with NONEor TRUE I.
This will be possible only if la) thecorresponding literal appeared in that conjunct inthe CNF expression \[b) the path given in (I) linksthe feature to a TRUE value at the outer-level.Since the outer level's features represent aconsistent truth-value assignment, it follows thatthe structure of F imposed by the derivation demandsthat there exist a truth-assignment which satisfieseach conjunct.4.
Some consequences of this demonstrationBerwick\[1982) provides a similarly semi-formalproof of the NP-hardness of parsing with respect tolexical-functional grammar, a formalism with manysimilarities to FU grammar, although his proof isradically different from the scheme presented herefor FU grammar.
Berwick gives an explanation of whycomputational complexity is relevant to linguistictheory, and why NP-hardness is an undesirableproperty for a linguistic computation.
The fact thatderivation in FU grammar is computationally complexis particularly worrying, since it suggests that theobvious generation algorithm outlined in Kay's papersis also NP-hard, even though FU grammar was intendedas a computationally useful formalism.
The idea thatsentence generation (production) is NP-hard isperhaps surprising parsing has always been viewedas a non-determlnistic search process, which mightwell have exponential complexity for certain types ofgrammar, but computational linguists have probablyviewed sentence generation as a slightly moredeterministic process.ReferencesBerwick,R.C.
(1982\] Computational Complexity andLexlcal Functional Grammar.
Pp.97-I09, AJCL 8, No.3-4.Garey,M.R.
and Johnson,D.S.
(1979) Computers andIntractability a guide to the theory of NP-completeness.
San Francisco : Freeman.Kay,M.
(1979) Functional Grammar.
Proceedings of FifthAnnual Meeting of the Berkeley Linguistics Society?Berkeley,CA : U.C.
Berkeley.Kay,M.\[1984) Functional Unification Grammar AFormalism for Machine Translation.
Pp.75-78 inProceedings of COLING-84, Stanford University.
(Available from the Association for ComputationalLinguistics).Kay,M.
(1985) Parsing with Functional UnificationGrammar.
In "Natural Language Parsing", ed.D.R.Dowty, A.Zwicky and L.Karttunen.
Cambridge :Cambridge University Press.Ritchle,G.D.
(1984) Simulating a Turing machine usingfunctional unification grammar.
Pp.127-136 inProceedings of ECAI-84, Pisa.
