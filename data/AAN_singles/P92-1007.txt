A Funct iona l  Approach  to Generat ion  w i th  TAG 1Kath leen  F. McCoy,  K. V i jay -Shanker ,  & Gi joo YangDepar tment  of Computer  and In fo rmat ion  SciencesUnivers i ty  of DelawareNewark,  Delaware 19716, USAemail: mccoy@udel.edu, vijay@udel.eduAbst rac tIt has been hypothesized that Tree AdjoiningGrammar (TAG) is particularly well suited forsentence generation.
It is unclear, however, how asentence generation system based on TAG shouldchoose among the syntactic possibilities madeavailable in the grammar.
In this paper we con-sider the question of what needs to be done togenerate with TAGs and explain a generation sys-tem that provides the necessary features.
Thisapproach is compared with other TAG-based gen-eration systems.
Particular attention is given toMumble-86 which, like our system, makes syntac-tic choice on sophisticated functional grounds.1 Int roduct ionJoshi (1987) described the relevance of TreeAdjoining Grammar (TAG) (Joshi, 1985; Sch-abes, Abeille &5 Joshi, 1988) to Natural LanguageGeneration.
In particular, he pointed out howthe unique factoring of recursion and dependen-cies provided by TAG made it particularly appro-priate to derive sentence structures from an inputprovided by a text planning component.
Of par-ticular importance is the fact that (all) syntacticdependencies and function argument structure arelocalizest in TAG trees.Shieber and Schabes (1991) discuss usingSynchronous TAG for generation.
SynchronousTAG provides a formal foundation to make ex-plicit the relationship between elementary syntac-tic structures and their corresponding semanticcounterparts, both expressed as elementary TAGtrees.
This relationship is made explicit by pairingthe elementary trees in the syntactic and logicalform languages, and associating the correspond-ing nodes.
Shieber and Schabes (1990) describe ageneration algorithm which "parses" an input log-ical form string recording the adjoining and sub-stitution operations necessary to build the stringfrom its elementary components.
The correspond-ing syntactic structure is then generated by doing1 This work is supported ill part by Grant #H133E80015from the National hlstitute on Disability and Rehabilita-tion Research.
Support was also provided by the NemoursFotmdation.
We would like to thank John Hughes for Irismany conunents and discussions concerning this work.the same.
set of operations (in reverse. )
on the cor-responding elementary structures m the grammardescribing the natural anguage.Note that the generation methodology pro-posed for synchronous TAG (and the hypotheti-cal generator alluded to in (Joshi, 1987)) takesas input the logical form semantic representationand produces a syntactic representation f a natu-ral language sentence which captures that logicalform.
While the correspondence b tween logicalform and the natural language syntactic form iscertainly an important and necessary componentof any sentence generation system, it is unclearhow finer distinctions can be made in this frame-work.
That is, synchronous TAG does not addressthe question of which syntactic rendition of a par-ticular logical form is most appropriate in a givencircumstance.
This aspect is particularly crucialfrom the point of view of generation.
A full-blowngeneration system based on TAG must choose be-tween various renditions of a given logical form onwell-motivated grounds.Mumble-86 (McDonald & Pustejovsky,1985; Meteer et al, 1987) is a sentence genera-tor based on TAG that is able to take more thanjust the logical form representation i to account.Mumble-86 is one of the foremost sentence gener-ation systems and it (or its predecessors) has beenused as the sentence generation components of anumber of natural language generation projects(e.g., (McDonald, 1983; McCoy, 1989; Conklin &McDonald, 1982; Woolf& McDonald, 1984; Rubi-noff, 1986)).
After briefly describing the method-ology in Mumble-86, we will point out some prob-lematic aspects of its design.
We will then describeour architecture which is based on interfacing TAGwith a rich functional theory provided by func-tional systemic grammar (Halliday, 1970; Halli-day, 1985; Fawcett, 1980; Hudson, 1981).
2 We payparticular attention to those aspects which distin-guish our generator f om Mumble-86.2 Mumble-86Mumble-86 generates from a specificationof what is to be said in the form of an "L-Spec"2The particular suitability of TAG as a grammatical for-realism to be used in conjtmction with a systemic granunaris discussed in (McCoy, Vijay-Shalrker & Yang, 1990).44t(Linguistic Specification).
An L-Spec captures thecontent of what is to be generated along with thegoals and rhetorical force to be achieved.
Whilethe form of the L-Spec is dependent on the partic-ular application, for the purposes of this discus-sion we can think of it as a set of logical formexpressions that describe the content to be ex-pressed.
Mumble-86 uses a dictionary-like mecha-nism to transform a piece of the L-Spec into an el-ementary TAG tree which realizes that piece.
Thetranslation process itself (performed in the dictio-nary) may be influenced by contextual factors (in-cluding pragmatic factors which are recorded as aside-effect of grammar outines), and by the goalsrecorded in the L-Spec itself.
It is in this way thatthe system can make fine-grained ecisions con-cerning one realization over another.Once a TAG tree is chosen to realize the ini-tial subpiece, that structure is traversed in a leftto right fashion.
Grammar outines are run dur-ing this traversal to ensure grammaticality (e.g.,subject-verb agreement) and to record contextualinformation to be used in the translation of theremaining pieces of the L-Spec.
In addition to thegrammar routines, as the initial tree is traversed ateach place where new information could be addedinto the evolving surface structure (called attach-ment points), the remaining L-Spec is consulted tosee if it contains an item whose realization couldbe adjoined or substituted at that position.In order for this methodology to work,(McDonald & Pustejovsky, 1985) point out thatthey have to make some strong assumptions aboutthe logical form input to their generator.
Noticethat the methodology described always starts gen-erating from an initial tree and other auxiliary orinitial trees are adjoined or substituted into thatinitial structure.
3 As a result, in generating anembedded sentence, the generator must start withthe innermost clause in order to ensure that thefirst tree chosen is an initial (and not an auxiliary)tree.
Consider, for example, the generation of thesentence "Who did you think hit John".
Mumble-86 must start generating from the clause "Whohit John" which is (roughly) captured in the treeshown in Figure 4.
This surface structure wouldthen be traversed.
At the point labeled fr-node (anattachment point) the auxiliary tree representing"you think" in Figure 2 would be adjoined in.Notice, however, that if Mumble-86 mustwork from the inner-most clause out, then the ini-tial L-Spec must be in a particular form which isnot consistent with the "logician's usual represen-3An initial tree is a minimal non-recursive structure inTAG, wlfile an auxiliary tree is a minimal recursive struc-ture.
Thus, an auxiliary tree is characterized as having aleaf node (wlfich is termed the foot node) which has thesame label as the root node.
The tree in Figure 2 is anauxiliary tree.
The adjoining operation essential ly insertsan auxiliary tree into another tree.
For instance, the tree inFigure 5 is the result of adjoining the auxiliary tree shownin Figure 2 into the ilfitial tree shown in Figure 4 at thenode labeled It-node.tation of sentential complement verbs as higheroperators" (McDonald & Pustejovsky, 1985)\[p.101\] (also noted by (Shieber & Schabes, 1991)).Instead Mumble-86 requires an alternative logi-cal form representation which amounts to break-ing the more traditional ogical form into smallerpieces which reference each other.
Mumble-86must be told which of these pieces is the embeddedpiece that the processing should start with.
4Notice that this architecture is particularlyproblematic for certain kinds of verbs that take in-direct questions.
For instance, it would precludethe proper generation of sentences involving "won-der" (as in "I wonder who hit John").
Verbs whichrequire the question to remain embedded are prob-lematic for Mumble-86 since the main verb (won-der) would not be available when its inclusion inthe surface structure needs to be determined.
~An additional requirement on the logicalform input to the generator is that the lambdaexpression (representing a wh-question) and theexpression containing the matrix trace be presentin a single layer of specification.
This, they claim,is necessary to generate an appropriate sentenceform without the necessity of looking arbitrarilydeep into the representation.
This would meanthat for sentences uch as "Who do you think hitJohn", the lambda expression would have to comewith the "hit John" part of the input.
We willshow that our system does not place either of theserestrictions on the logical form input and yet isable to generate the appropriate sentence withoutlooking arbitrarily deep into the input specifica-tion.One can notice a few features of the sys-tem just described.
First, because the dictionarytranslation process is context sensitive, the gener-ation methodology is able to take more than justlogical form into account.
Note, however, that it isunclear what the theory is behind the realizationsmade.
In addition, these decisions are encodedprocedurally thus the theory is rather difficult toabstract.It is also the case that Mumble-86 makesno distinction between decisions that are madefor functional reasons and those that are made forsyntactic reasons.
Both kinds of information mustbe recorded (procedurally) in grammar routines othat they can be taken into account during subse-quent translations.
While the fact that the gram-mar is procedurally encoded and that functional4 The task of ordering the elements of logical fonn is con-sidered by Mumble-86 to be part of a component wlfich isalso responsible for ensuring that what is given to mmnbleis actual ly expressible in the language (e.g., Engl ish).
Tiffscomponent  is described in (Meteer, 1991).~Tlfis is because the logical form for an embedded ques-tion and a non-embedded question camlot be distinguishedin the kind of input required by Mmnble-86 mid the mainverb (wonder) is not able to pass a~ly information down tothe embedded clause since it is realized after the embeddedclause.49and syntactic decisions are mixed does not affectthe power of the generator, we argue that it doesmake development and maintenance of the systemrather difficult.
Functional decisions (e.g., that aparticular item should be made prominent) andsyntactic decisions (e.g., number agreement) relyon two different bodies of work which should beable to evolve independently of each other.
Thereis no separation of these two different influences inMumble-86.The generation process in Mumble-86 issyntax driven.
From the input L-Spec an initialelementary) TAG tree is chosen.
This structures then traversed and grammar outines are initi-ated.
At each possible attachment point duringthe traversal, the semantic structure (L-Spec) isconsulted to see if it contains an item whose real-ization could be adjoined or substituted at thatposition.
Thus the syntactic surface structuredrives the processing.As a side effect of the above processingstrategy, Mumble-86 creates a strictly left-to-rightrealization of surface structure.
While this side-effect is deliberate for reasons of psychological va-lidity, this can be problematic for generating someconnectives (as is pointed out in (MeKeown & E1-hadad, 1991)).
This is because Mumble-86 doesnot have access to the content of the items beingconjoined at the time the connective is generated.In the remainder of this paper we describea sentence generation system which we have de-veloped.
In some ways it is similar to Mumble-86,but there are several major  differences:?
The realization of the input in our sys-tem is based on systemic functional inguis-tics (Halliday, 1970; Halliday, 1985; Fawcett,1980; Hudson, 1981).
This is a linguistic the-ory which states that a generated sentenceis obtained as a result of a series of func-tional choices which are made in a parallelfashion along several different functional do-mains.
The choices are represented as a seriesof networks with traversal of the networks de-pendent on the given input along with severalknowledge sources which encode informationabout how various concepts can be linguisti-cally realized.
The bulk of the work in sys-temic linguistics has been devoted to describ-ing what/how functional choice affects urfaceform.
We adopt this work from systemic lin-guistics, but unlike other implementations, weuse a formal syntactic framework (TAG) toexpress the syntactic constraints.?
Our method is not syntax directed, but fol-lows a functional decomposition called for bythe systemic grammar.?
There is a clear separation between the func-tional and the syntactic aspects of sentencegeneration which actually allows these two as-pects of generation to be developed indepen-dently.?
We do not place any constraints on the logicalform input.
Our methodology calls for noth-ing different from what is required for a stan-dard systemic grammar (whose input is basedon a typical logical form representation).?
The methodology which we describe allowssentence generation to proceed in a seman-tic head-driven fashion (Shieber, Van Noord,Pereira ~ Moore, 1990).
This is the caseeven for the embedded sentences discussedearlier which had to be worked "inside out"in Mumble-86.3 Generator  Arch i tec tureThere are many different ways of imple-menting a TAG-based generator.
We consider theprinciples that we take to be common to any TAGgenerator and indicate how these principles haveinfluenced our architecture.
We present variousaspects of our architecture and contrast hem withchoices that have been made in Mumble-86 andSynchronous TAG.
Our approach is motivated byarguments presented in (McCoy, Vijay-ShankerYang, i990), but the details of the processing pre-sented there have changed significantly.
Our basicprocessing strategy is detailed in (Yang, McCoy& Vijay-Shanker, 1991); the work presented hereis an extension of that strategy.In order for a TAG generator to be ro-bust, it must have a methodology for decipher-ing the input and associating various pieces of theinput with TAG trees.
In Mumble-86 this is ac-complished through dictionary look-up along withquerying the input at various points during thesurface structure traversal.
In contrast, we use asystemic grammar traversal for this purpose.
In aTAG, each elementary tree lexicalizes a predicateand contains unexpanded nodes for the requiredarguments.
Thus any TAG based generation sys-tem should incorporate the notions of semantichead-driven generation.
Our approach, based onsystemic grammars, does this because the func-tional decomposition that results from traversal ofa systemic grammar at a single rank identifies thehead and establishes necessary argumentsl Thusit perfectly matches the information captured inan elementary TAG tree.Once the input has been deciphered, a TAGgenerator must use this to select a tree.
Giventhat a systemic grammar is being used in our case,we must have a method for associating TAG treeswith the network traversal.
The traversal of a sys-temic grammar at a single rank establishes a set offunctional choices that can be used to select a TAGtree.
The selection process in any TAG-based gen-erator can be considered as providing a classifi-cation of TAG trees on functional grounds.
Wemake this explicit by providing a network (calledthe TAG network) 6 which is traversed to select aTAG tree.
The network itself can be thought of as6 hi fact we view a systemic network in a similar fashion50s - act : wh - quest ionwh-  it : nltense : pastproc : " th ink"actor :  n2 : \ [ "you" \ ]I proc : "hit"tense : pastphen : actee : n3 =actor Tt 1 f "john" \] type : person \] id : quest JFigure 1.
Input for Who did yon think hit JohnRegion r l :i "~  f r -node!
!VIthink n la decision tree whose choice points are functionalfeatures chosen in the systemic network traversal.So far we have identified how the head canbe lexicalized and placed in an appropriate treewith respect to its arguments.
This is accom-plished by a traversal of a systemic network at onerank followed by a TAG network traversal basedon the functional choices made.
Of course, the ar-guments themselves must also be realized.
Thisis accomplished by a recursive network (systemicfollowed by TAG) traversal (focused on the pieceof input associated with the particular argumentbeing realized).
The recursive network traversalswill also result in the realization of a TAG tree.We record information collected during a single(rank) network traversal in a data structure calleda region.
Thus, an initial region will be createdand will record all features necessary for the se-lection of a tree realizing the head and argumentplacement.
The selected tree (and other struc-tures discussed below) will be recorded in the re-gion.
Each argument will itself be realized in asubregion which will be associated with the recur-sire network traversal spawned by the piece of in-put associated with that argument.
Thus we haveseparate regions for each independent piece of in-put.
This is in contrast o Mumble-86's use of theevolving surface structure in which all grammati-cal information is recorded.Once all arguments have been realized as el-ementary trees in the individual regions, the treesselected in the individual regions must be com-bined with the tree in the initial region.
For thiswe use the standard TAG operations of adjoiningand substitution.Essentially, our generation methodologyconsists of two phases:1.
The descent process - where a systemic net-work traversal is used to collect a set of fea-tures which are used to select a TAG tree thatrealizes the head and into which the argu-ments can be fit.
The traversal is also respon-as a classification of all fmlct ional  choices expressible in alanguage.Figure 2.
Initial tree selected in region rlsible for spawning the creation of subregionsin which the arguments (and modifiers) arerealized.2.
The ascent process - where the trees cre-ated in the individual subregions are com-bined with the tree in the mother region re-suiting in the final realization of the whole.In our system the systemic network traver-sal basically replaces the dictionary look-up phasefound in Mumble-867 which translates the inputL-Spec into surface structure.
In addition, our sys-tem does not walk a surface structure (i.e., the ac-tual tree chosen).
In Mumble-86 the surface struc-ture walk spawned grammar outines and causedadditional pieces of the L-Spec to be translatedinto surface structure.
Our methodology relies onthe systemic network traversal to spawn realiza-tions of the decomposed subpieces.
The syntac-tic aspects of the grammar outines are now in-corporated into our TAG network and grammar.Thus our methodology keeps a clearer separationbetween functional and syntactic aspects of thegeneration process.The processing in our system will be ex-plained with an example.
Consider the simplifiedinput given in Figure 1. s See (Yang, McCoy &Vijay-Shanker, 1991) for a more detailed descrip-tion of the processing.
; 'The systenxic g rammar  also replaces the grammar  ou-t ines of Mmnble-86 responsible for recording contextual  in-format ion for subsequent  t rans lat ions.
In addit ion, the partof the dict ionary look-up concerned with syntactic realiza-tion (i.e., the actual  tree chosen) is handled by our TAGcomponent .STiffs input  is simplif ied in that  it is basically a s tandardlogical form input  with lexicM i tems specified.
In generalthe input  is a set of features wlffch drive the traversal  ofthe ftmctional  systemic networks.51Region r2:I~P ~ if-nodeyouFigure 3.
Tree selected in Actor region r23.1 The  Descent  ProcessThe input given (along with other knowl-edge sources traditionally associated with a sys-temic network) will be used to drive the traversalof a functional systemic network.
The purposeof this traversal is two fold: (1) to identify thehead/argument structure of the sentence to be re-alized, and (2) to identify a set of functional fea-tures which can be used to choose a tree which ap-propriately realizes the head/argument structure.Traditionally a systemic network consists ofa number of networks of functional choices whichare traversed in parallel.
Each network considerschoices along one functional domain.
One suchnetwork is the mood network which is responsiblefor, among other things, determining what kind ofspeech act should be generated for the top-levelelement.
This network must notice, for example,that the speech-act specified is wh-questioning,but that the item being questioned is not one ofthe arguments to the top level process.
Thus astandard eclarative form should be chosen for therealization of this top level element.Standard implementations of systemicgrammar (Davey, 1978; Mann & Matthiessen,1985; Patten, 1988; Fawcett, 1990), upon traversalof the mood network to this point, would evalu-ate a set of realization operations which manipu-late an eventual surface string.
For instance, uponidentifying that a declarative form is needed, thesubject would be ordered before the finite.
We ar-gue in (McCoy, Vijay-Shanker & Yang, 1990) thatit is more practical to replace the use of such re-alization operators with a more formal grammat-ical system (and that the use of such a systemis perfectly consistent with the tenets of systemiclinguistics).
Thus during the network traversal,our system simply collects the chosen features andthese are used to drive the traversal of a TAG net-work whose traversal results in the selection of atree.At the same time the mood network is tra-versed, so would be other networks.
The transitiv-ity network is concerned with identifying the headargument structure of the item being realized.
InRegion r3:VHiwho;S  I| ,!!
$uS t?i : ;I ' I~,~yr-nodeiShit INIjohnFigure 4.
Tree selected in Phenomenon region r3this case, it would consider the fact that the itemto be realized has a "process" which is mental.This identification results in the expectation oftwo arguments - an actor (doing the mental pro-cess) and a phenomenon (that thing the process isabout).
Each of these identified arguments mustbe realized individually.
This is accomplished viathe pveselect operation2 This operation causesa recursive network traversal (whose results arerecorded in a subregion) to be done focused onthe input for the identified sub-element.The features collected uring the functionalsystemic network traversal are used to drive thetraversal of the TAG network which results in theselection of a tree realizing the indicated features.Features such as that the process is mental andthat the speech act is declarative would cause theselection of a tree for the mother region such asthe tree in Figure 2.Similar processing would then take placein the two subregions, each eventually resulting inthe trees such as those shown in Figures 3 and 4.3.2 The Ascent ProcessIn a TAG generator, after the input hasbeen decomposed and elementary trees associatedwith each subpiece of the input, the chosen treesmust be put together.
Therefore, every TAG gen-erator must provide a means to determine where9 From the realization operations used in systemic grmn-mars (particularly Nigel), we need only the preselect andthe conflate operations because all structure building op-erations are incorporated into TAG.
The conflation oper-ation is used to map functional features (e.g., agent, phe-nomenon) into granunatical  functions (e.g., subject,  com-plement).
Note that  in the networks from systemic gram-mars, we take ouly the functional part  and thus avoid hav-ing choice points that exist for purely syntactic reasons.52Region rl:S~ Sz ~AUX Swho Idid ~Pyou think hit JohnFigure 5: Final tree: Who did you think hit John?the substitution or adjunction must take place.
Inorder to do this, with each tree there must bea mapping of grammatical functions to nodes inthe tree.
In our case, we associate a mappingtable with each tree.
For instance, the mappingtable associated with the tree shown in Figure 2would indicate that the phenomenon (which wouldhave been conflated with complement) is associ-ated with the node labeled nl in the tree.
Inthe simplest case the tree which realizes the phe-nomenon would be substituted at the node labelednl in the tree in the mother egion.A data structure similar to a mapping tableis used by the other TAG generators as well.
Insynchronous TAG the mapping table correspondsto the explicit node for node mapping between el-ementary logical form and syntactic trees.
Themapping table in Mumble-86 is implicit in theschemas which create the surface structure tree(during the dictionary look-up phase) since theyplace L-spec elements in the appropriate place inthe surface structure they create.A more complex case arises when an argu-ment node is a footnode of an auxiliary tree.
Sup-pose an auxiliary tree, fl, was chosen in a regionand a tree, 7, was chosen in a subregion to real-ize the argument specified by the footnode of ft.Rather than substituting 7 in/3, fl is adjoined intoa node in 7- This node is the node in 7 that headsthe subtree realizing the function specified for thesubregion.
For this reason, each tree in a regionalso has associated with it a pointer we call an fr-node which points to the node heading this subtree(functional root).
In Regions rl and r2 the func-tional root is also the root of the tree.
Notice inRegion r3 that the functional root is the embed-ded S node.
This fr-node is chosen because thetree chosen in the region is a wh-question tree dueto the fact that (according to the input) the phe-nomenon is being questioned.
There is nothing inthe phenomenon itself, however, that specifies thatNP' I i S !triedIt%?
- PRO to winFigure 6.
Standard tree for "John tried to win"its speech-act should be wh-questioning.
Thus theportion of the tree under the embedded S nodecaptures the predicate argument structure whichrealizes the phenomenon as is specified in the in-put.
If it were the case that the phenomenon wasspecified to be a wh-question (as in "Mary won-dered who hit John") then the root node would bechosen as the fr-node.
The fr-node comes into playwhen the trees in the individual regions are com-bined via adjunction during the ascent process.Other TAG generators have analogues toour fr-node.
In synchronous TAG it is implicit inthe mapping between the nodes in the two kinds oftrees.
In Mumble-86, it is the attachment pointson surface structure.
The point is that if treesmight be adjoined into, any TAG generator mustspecify where adjoining might take place and thisspecification depends (at least in part) on the func-tional content hat the tree is intended to capture.Going back to our example, in combiningtrees in the subregions with the tree chosen in theinitial region r l ,  the agent ree would be combinedwith the tree in region r l  using straight substitu-tion.
The location of the substitution would bedetermined by the address given for the agent inthe mapping table for the tree in region rl.The mapping table also indicates that thephenomenon should be placed at nl  in the treein Figure 2.
Notice, however, that nl is the footnode.
This is an indication to the processor thatthe final tree in region r l  should result from ad-joining the tree in r l  into the tree in the subregionr3 (Figure 4).
The place of adjoining is specifiedby the fr-node in the phenomenon tree in regionr3.
The result of this adjoining is shown in Fig-ure 5. l?1?The detai ls of how the AUX is inserted can be found in53region r_l:entry-pointfunctional I syntacticfeatures features) ~'aversal ofthe l~  traversal of thefunctionalnetwork ~ TAG, network \], :.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
_ ,  .
.
.
.
.
.
.
.
.
.ubregion r__2: '..I i Ifunctional network TAG networkFigure 7: Flow of Information in Processing Model4 Pass ing  FeaturesSo far we have established that any TAG-based generator, once an elementary tree has beenchosen, would need to realize the arguments of thepredicate by recursively calling the same proce-dure.
The resulting trees chosen would be com-bined with the original elementary tree at the ap-propriate place by substitution and adjunction.
Inthis recursive process, we have indicated the needfor only functional information to be passed downfrom the mother region to the subregions (at thevery least, in the form of the functional input asso-ciated with the piece being realized in the region).We now consider an example where syntactic in-formation must be passed down as well.Consider the generation of a sentence suchas "John tried to win".
The standard structure forthis sentence is given in Figure 6.
The problem isthat in TAG this tree must be derived from thecombination of two separate sentential trees: oneheaded by the verb "tried" and the other by theverb "win".
However we must capture the con-straint that the subject of the "win" tree is John(which is the same as the subject of the "tried"(Yang, 1991).
It is inserted in the region rl as a result ofa feature disparity on the nodes of the tree resulting fromthe adjoining operation just described.
The same disparitywould not occur in indirect questions (e.g., "I wonder whokit Jolm" ).tree) but that it is realized only as a (null) pro.Note that this constraint cannot be localized inTAG but cuts across two elementary trees.While generating this sentence, when wechoose the "tried" tree in the mother region, wemust pass down the information that among thetrees associated with win, the one with "pro" inthe subject position must be chosen.
Notice thatthis is a purely syntactic onstraint based on thechoice of the verb "try".
The choosing of this treehas ramifications on both the functional networktraversal (since the agent of "win" should not beexpanded) and the TAG network traversal.In addition, any syntactic onstraint that isplaced on the arguments (perhaps by the choice ofthe head) must be passed down to the subregionto influence the realization of the arguments.
Ingeneral, the passed down features may influenceeither the functional or the TAG network traver-sal (see Figure 7).
Such passing of syntactic andfunctional features must occur in any TAG gener-ator where the realization of the head is done priorto the realization of its arguments.5 Conc lus ionsIn this paper we started with consideringthe principles underlying the design of any TAG-based generator.
We have shown how these princi-ples have been incorporated in our generation sys-tem and have compared it with other TAG-basedgenerators.The architecture of our generation systemincorporates both functional aspects of generationand syntactic aspects.
Each of these aspects ishandled separately, by two different formalismswhich are uniquely combined in our architecture.The result is a sentence generation system whichhas the advantage of incorporating two bodies ofknowledge into one system.
Our system has sev-eral advantages over Mumble-86.
In addition tothe use of systemic grammar as a theory for real-ization and a function (rather than syntactic) di-rected generation process, we have shown that ourmethodology does not place any special require-ments on the input logical form.
Our methodologycan proceed in a head-driven manner using notionssuch as the mapping table and the functional rootto decide how trees should be combined.
Thesenotions allow fine distinctions in form which arenot possible in Mumble-86.
In addition, our sys-tem separates functional from syntactic decisionsthus allowing these two bodies to be expanded in-dependently.A prototype of our system has been imple-mented in Lucid Common Lisp on a Sun Worksta-tion.
Details of the implementation can be foundin (Yang, 1991).Re ferencesConklin, E. & McDonald, D. (1982).
Salience:The key to the selection problem in natu-ral language generation.
In Proceedings of54the 20th Annual Meeting, (pp.
129-135).,Toronto, Canada.
Association for Computa-tional Linguistics.Davey, A.
(1978).
Discourse Production.
Edin-burgh: Edinburgh University Press.Fawcett, R. (1980).
Cognitive linguistics and socialinteraction.
Heidelberg: Julius Groos VerlagHeidelberg and Exeter University.Fawcett, R. P. (1990).
The communal project: twoyears old and going well.
Network, (13).Halliday, M. A. K. (1970).
Language struc-ture and language function.
In J.
Lyons(Ed.
), New Horizons in Linguistics.
Har-mondsworth, England: Penguins Books.Halliday, M. A. K. (1985).
An introduction tofunctional grammar.
London England: Ed-ward Arnold.Hudson, R. A.
(1981).
Systemic generative gram-mar.
In M. A. K. Halliday & J. R. Mar-tin (Eds.
), Readings in Systemic Linguistics.North Pomfret, Vermont: Batsford.Joshi, A. K. (1985).
How much context-sensitivityis necessary for characterizing structural de-scriptions : Tree adjoining grammar.
InD.
Dowty, L. Karttunen, & A. Zwicky (Eds.
),Natural Language Processing : Theoreti-cal, Computational and Psychological Per-spectives.
New York: Cambridge UniversityPress.Joshi, A. K. (1987).
The relevance of tree ad-joining grammar to generation.
In G. Kem-pen (Ed.
), Natural Language Generation:New Results in Artificial Intelligence, Psy-chology, and Linguistics (pp.
233-252).
Dor-drecht/Boston: Martinus Nijhoff Publishers(Kluwer Academic Publishers).Mann, W. & Matthiessen, C. (1985).
Nigel: Asystemic grammar for text generation.
InO.
Freedle (Ed.
), Systemic Perspectives onDiscourse.
N J: Norwood.McCoy, K. F. (1989).
Generating context sen-sitive responses to object-related misconcep-tions.
Artificial Intelligence, 41, 157-195.McCoy, K. F., Vijay-Shanker, K., & Yang, G.(1990).
Using tree adjoining rammars in thesystemic framework.
In Proceedings of 5 thInternational Workshop on Natural LanguageGeneration., Dawson, PA.McDonald, D. (1983).
Dependency directed con-trol: Its implications for natural languagegeneration.
In N. Cercone (Ed.
), Computa-tional Linguistics (pp.
111-130).
PergamonPress.McDonald, D. & Pustejovsky, J. D. (1985).
Tagsas a formalism for generation.
In Proceedingsof the 23rd Annual Meeting, Chicago, IL.
As-sociation for Computational Linguistics.McKeown, K. R. & Elhadad, M. (1991).
Acontrastive valuation of functional unifica-tion grammar for surface language gener-ation: A case study in choice of connec-tives.
In C. Paris, W. Swartout, ~c W.
Mann(Eds.
), Natural Language Generation in Ar-tificial Intelligence and Linguistics (pp.
351-396).
Boston/Dordrecht/London: KluwerAcademic Publishers.Meteer, M. (1991).
Bridging the 'generation gap'.Computational Intelligence, 7(4).Meteer et al, M. (1987).
Mumble-86: Design andimplementation.
COINS Tech Report 87-87a,University of Massachusetts.Patten, T. (1988).
Systemic Text Generationas Problem Solving.
Cambridge: CambridgeUniversity Press.Rubinoff, R. (1986).
Adapting mumble: Expe-rience with natural anguage generation.
InProceedings of the 1986 National Conferenceon Artificial Intelligence, (pp.
1063-1068).,Philadelphia, Pa. AAAI.Schabes, Y., Abeille, A., & Joshi, A.
(1988).
Pars-ing strategies with 'lexicalized' grammars:Application to tree adjoining grammars.
InProceedings of COLING' 88, Budapest, Hun-gary.Shieber, S. M. & Schabes, Y.
(1991).
Gener-ation and synchronous tree-adjoining gram-mars.
Computational Intelligence, 7(4).Shieber, S. M., Van Noord, G., Pereira, F.,& Moore, R. C. (1990).
Semantic-head-driven generation.
Computational Linguis-tics, 16(1).Woolf, B.
& McDonald, D. (1984).
Context-dependent transitions in tutoring discourse.In Proceedings of the 1984 National Confer-ence on Artificial Intelligence, Washington,D.C.
AAAI.Yang, G. (1991).
An Integrated Approach to Gen-eration Using Systemic Grammars and TreeAdjoining Grammars.
PhD thesis, Universityof Delaware.Yang, G., McCoy, K. F., & Vijay-Shanker, K.(1991).
From functional specification to syn-tactic structures: Systemic grammar and treeadjoining grammar.
Computational Intelli-gence, 7(4).55
