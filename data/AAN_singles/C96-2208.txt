The Automatic  Extraction of Open Compounds from TextCorporaVirach Sornlert lamvanich and Hozumi  TanakaDepar tment  of Computer  Science, Tokyo  Ins t i tu te  of  Techno logy2-12-1, ( )okayama,  Meguro -ku ,  ~t~okyo, .
Japan 152{virach,  t anaka}0cs ,  t i tech ,  ac.
jpAbstractThis paper describes a new methodfor extracting open compounds (unin-terrupted sequences of words) from textcorpora of languages, such as Thai,Japanese and Korea that exhibit unex-plicit word segmentation.
Without ap-plying word segmentation techniques tothe inputted plain text, we generate n-gram data from it.
We then count the oc-currence of each string and sort them inalphabetical order.
It is significant hatthe frequency of occurrence of stringsde, creases when the window size of ob-servation is extended.
From the statis-tical point of view, a word is a stringwith a fixed pattern that is used repeat-edly, meaning that it; shouht occur witha higher frequency than a string that isnot a word.
We observe the variationof frequency of the sorted n-gram dataand extract the strings that experience asignificant (:hange in frequency of oc(:ur-rence when their length is extended.
Weapply this occurrence test to both theright and left hand sides of all stringsto ensure the accurate detection of bothboundaries of the string.
The methodreturned satisfying results regardless ofthe size of the input file.1 Int roduct ionThis paper discusses a method automatic extrac-tion of candidates for open compound registra-tion.
An open compound refers to an uninter-rupted sequence of words, generally functioningas a single constituent (Smadja and McKcown ,1990).
We propose a new method of extractionfor languages which haw~ no specific use of punc-tuation to signify word boundaries.
Our methodis applied to n-gram text data using statistical ob-servation of the change of frequency of occurrencewhen the window size of string observation is ex-tended (character) cluster-wise.
We generate bothrightward and the leftward sorted n-gram data,then determine the left and right boundaries of astring using the methods of competitive ,selectionand unified selection.
In this paper, we examinethe result of applying our medlod to Thai tex~ cor-pora and also introduce conventional Thai spellingrules to avoid e, xtracting invalid strings.Previous work (Nagao et al, 1994:) has shownall effective way of constructing a sorted file fortile efficient calculation of n-gram data.
However asurprisely large numbe, r of invMid strings were alsoextracted.
Subsequent work, (Ikehara et al, 1995)has extended the sorted file to avoid repeating thecounting of substrings contained in strings alreadycounted.
This meant the extraction of only thelongest strings in the order of frequency of occur-rence.
The result of extraction was improved asa result, but the deterinination of longest stringsis always made consecutively from left to right.
Ifan erroneous tring is extracte, d its error directlypropagates through the, rest of input.
It is possiblethat a string with an invalid starting pattern willbe extracted because a string too long in characterlength has been extracted previously.In the following sections, we firstly describe thenecessity for making this statistical ol)servad(mfor extracting open comtlounds from Thai textcorpora.
Then, the methodology of data preparwtion and open compound extraction is explained,Finally, we discuss the result of an experiment onboth large and small test corpora to investigatethe effectiveness of our method.2 Prob lem Descr ipt ionIt is a non-trivial task to identify a word ill thetext of a language which has no specific punctua-tion to mark word boundaries.
Up to the present,lexicographers' efforts have been inhibited by in-sufficient corpora and limited computational fa-cilities.
Almost all lexicon knowledge bases havebeen created with reliance oll human intuition.
\]\]1recent years, a large amount of text corpora haw',become available, and it is now becoming possibleto conduct more rigorous experiments on text cor-pora.
We address the following problems in such1143a way that they are able to be solved by the wayof statistical' methods.1.
There is no good evidence to support theitemization of a word in a dictionary.
Intraditional dictionary making, lexicographershave had to rely on citations collected by hu-man readers from limited text corpora.
Morerare words rather than common words arefound even in standard dictionaries (Churchand Hanks , 1990).
This is the problem inmaking a lexical entry list in dictionary con-struction.2.
It is hard to decide where to segment a stringinto its component words.
It is also hardto enumerate words from a text, though itis reported that the accuracy of recent wordsegmentation methods using a dictionary andheuristic methods is higher than 95% in caseof Thai (Virach , 1993).
The accuracy de-pends mostly on word entries in the dictio-nary, and the priority for selecting betweencandidate words when there is more than onesolution for word segmentation.
This is theproblem in assigning priority information forselection.3 Word  Ext rac t ion  f rom TextCorporaWe used a window size of 4 to 32 for n-gramdata accumulation.
The value is arbitrary butthis range has proven sufficient to avoid collect-ing illegible strings.3.1 AlgorithmDefine that,\]a I is the number of clusters ~in the string 'a',n(a)  is the number of occurrences of the string~&', &udn(a+l )  is the number of occurrences of thestring 'a' with one additional cluster added.As the length of a string increases the numberof occurrences of that string will decrease.
There-fore,+ 1) < (1)For the string 'a', n(a+l)  decreases ignificantlyfrom n(a) when 'a' is a frequently used string incontrast o 'a+l ' .
From this, it can be seen that'a' is a rigid expression of an open compound whenit satisfies the condition'n(a + 1) << n(a).
(2)In such a case, 'a' is considered a rigid expressionthat is used frequently in the text, and 'a+l '  isjust a string that occurs in limited contexts.1The smallest stand-alone character unit as by thespelling rules.Since we count the occurrence of strings gener-ated from an arbitrary position in tile text, withonly the above observation, only the right end po-sition of a string can be assumed to determined arigid expression.
To identify the correct startingposition of a string, we apply the same observationto the leftward extension of a string.
Therefore,we have to include the direction to the string ob-servation.Further define that,+a  is the right observation of the string 'a',and-a is the left observation of the string 'a'.Then,n ( - t -a+l )  is the number of occurrences of thestring 'a' with one cluster added to its right,andn( -a+l )  is the number of occurrences of thestring 'a' with one cluster added to its left.Following the same reasoning as above, we willobtain,n(+a + 1) < n(a), and (3)+ 1) < (4)A string 'a' is a rigid expression if it satisfies thefollowing conditions,n(+a + 1) << n(a), and (5)n ( -a  + 1) << n(a).
(6)3.2 Data preparationFollowing are the steps for creating n-gram textdata according to the fundamental features ofThai text corpora.
The results are shown in Ta-ble 1 and Table 2.
In each table, "n" is the numberof occurrences and "d" is the difference in occur-rence with the next string.1.
Tokenize the text at locations of spaces, tabsand newline characters.2.
Produce n-gram strings following Thaispelling rules.
Only strings that have possi-ble boundaries are generated, and their oc-currence counted.
For example, shifting astring from 'a+6'  to 'a+7'  in the Table 1,the string at 'a+7'  is '~z~t~f f .~ '  andnot ' f l~g~|~'l .
l f l l~l\] ,  despite the first char-acter after 'a+6'  being '~'.
According too/the Thai spelling rules, the character ' ' cannever stand by itself.
It needs both of an ini-tial consonant and a final consonant.
We callthis three character unit a cluster.3.
Create both rightward (Table 1) and leftward(Table 2) sorted strings.
The frequency ofeach string is the same but the strings arelexically reversed and ordered based on thisreversed state.11444.
Calculate the diiference between the occur-renee of adjoining strings ill the sorted lists.Let {t(a) be the difference wdue of the string'a', thend(~) = ~(~) - n(~ + n .
(7)The difference w~lue (d) is generated sepa-rately for the rightward and legward sortedstring ta.bles.The occurrences (n) ill both Tal}le 1 an{l Table 2apparently SUl}port the conditions (3) all{\[ (4).Strin----~g- Rightward sorted string \ [ - -n -~d- -a u~.
\[ 5Ta- 68a+l  tl~UTl~ \] 445 (}Ia+2 i~a~l~\] I 445 0a+3 i~z~aa I 445 42a+4 II i g TI ~i l,~il I 1303 0a+5 ~ig~l i f l l l  } 303 22a-k6 ill g~ll l,~tll~a I 281 0a+7 ~l~a~l~aa~Igaffa I 281 274a+8 ,~uu,aa,~affa6~ I 7 0Sorted String Table 1: Exami)le of a Rightward'Pable-b-b+l  I-b+2 I-b+3 I-1}+4 I-b+5 I-b+6 I-b+7 ILeftward sorted string -7\].r2 - -o l172 0172 421130121I\].21.
7114 107t"7 01Table 2: Example of a Leftward Sorted String Ta-ble3.3 Ext rac t ion3.3 .1  Compet i t i ve  select ionAccording to condition (5) the string %' ( a~ un )in Table 3 is considered an open compound be-cause the difference of betweml n(a) and n(a+l)is as high as 450.
However, 'a~u~l' is an illegiblestring and cannot be used on as indivi{lual basisin general text.
Observing tile same string :a' inTable 1, the difference between n(a) and n(a+l)is only 68.
It is not comparably high enough tobe selected.
Therefore, we have to determine theminimum wflue of the difference when there ismore than one branch extended from a string.. .
.
.
.
.
.
.String_ Rightward sorted string 1 _ {ta a~gw 51~ 45{\]/Table 3: A Further Example of the Count of a\]lightwm'd Sorted String Tal)le3.3 .2  Unif ied select ionin Figure 1, we ob-tain the string '~o~ ~ ~1~ a , ln l~a~'  1)y observingthe significant change in d just before the nextstring '~l~u~l~:l.l~l?~i~a{fi' The string couldbe wrongly selected if we do not observe its be-haviour ill the leftward sorted string table, todetermine tit(', correct left boundary.
Thus, we(}bserve tile count of string '~itlSg~l~\],ltll~li~,~'when it is extended leftward, as shown ill Figure 2.0 20 40 60 80 100 120 140 160 180Figure 1: Rightward Sorted Strings Starting froman Arbitrary String0 20 40 60~ | 4\] 1114~ II 488 1013 120 140 160 180Figm'e 2: Leftward Sorted Strings Starting fl'oman Arbitrary StringBy unifying the results of both methods ofthe observation, we iinally obtain tile word11454 Experimental ResultsWe have applied our method to an actual Thaitext corpora without word segmentation pre-processing.4.1 Natura l  language dataWe selected 'Thai Revenue Code (1995)', as largeas 705,513 bytes, and 'Convention for Avoidanceof Double Taxation between Thailand and Japan',which has a smaller size of 40,401 bytes.
The pur-pose is to show that our method is effective re-gardless of the size of the data file.4.2 Resu l ts  o f  ext ract iongo~g0~o13_I~ Word E~ Fixed ?
String| Expression Illegible100%8O%60%48%20%0%100 90 80 70 60 50 40 30 20 10Theshold level of the value of Difference (O)Figure 3: Result of Extraction of 'Thai RevenueCode (705,513 bytes)'100%,~ (\]0%L60% -4o~-20%~L0%3OI l a Word \[\] Find Expressian ?lllegble Strinq20 10 8 B 4Threshold level of the value of Difference (D)Figure 4: Result of Extraction of 'Convention forThai land-Japan (40,401 bytes)'The results of extraction examined in both largeand small file sizes are very satisfactory.
Very fewillegible strings are extracted though the thresh-old of the difference value is set to be as low as10 in Figure 3, and 4 in Figure 4.
The suitablevalue of the threshold of difference varies with thesize of text corpus file.
To obtain more mean-ingful strings fl'om a large file, we have to set arelatively high threshold of extraction.
One of theadvantages of our method is that there is an inher-ent trade~off between the quantity and the qualityof the extracted strings.
In the case of Figure 3,to limit the amount of illegible strings to not ex-ceed 15% of the total extracted strings, we setthe threshold to 30.
As a result, we obtained 154words, 114 fixed expressions and only 46 illegiblestrings.
Furthermore, we found that of the 154words appearing in the text, there were 84 wordsthat were not found in a standard Thai dictionary.5 ConclusionThis paper has shown an algorithm for data prepa-ration and open compound extraction.
The corn-petitive selection and unified selection of rightwardand leftward sorted strings play an important rolein improving accuracy of the extraction.
In the ex-periment, we applied Thai spelling rules to restrictthe search path for string counts.
Some types ofspelling irregularities can be excluded by this pro-cess.
By adjusting the value of threshold, we canextract suitable entries for open compound regis-tration regardless of the size of the input file.
Fur-thermore, our method has ensured the extractionof new words from the text file of the languagethat has no explicit word boundary, such as Thai.Re ferencesChurch, K. W. and Hanks, P. 1990.
Word Asso-ciation Norms, MutuM Information, and Lexicog-raphy.
Computational Linguistics, Vol.16, No.l,pages 22-29.Ikehara, S., Shirai S. and Kawaoka, T. 1995.
Auto-matic Extraction of Uninterrupted Collocations byn-gram Statistics.
Proceedings of The first AnnualMeeting of The Association for Natural LanguageProcessing, pages 313-316 (in Japanese).Nagao, M. and Mori, S. 1994.
A New Method ofN-gram Statistics for Large Number of n and Auto-matic Extraction of Words and Phrases h'om LargeText Data of Japanese.
Proceedings of COLING 9It,Vol.1, pages 611-615.Smadja~ F. A. and McKeown, K. R. 1990.
Auto-maritally Extracting and Representing Collocationsfor Language Generation.
Proceedings of ACL-90,pages 252-259.Sornlertlamvanich, Virach.
1993.
Word Segmenta-tion for Thai in Machine Translation System.
Ma-chine Translation, National Electronics and Com-puter Technology Center, (in Thai).1146
