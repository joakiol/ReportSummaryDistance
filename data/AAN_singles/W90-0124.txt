Real-Time Generation fromSystemic GrammarsTerry Patten* and Daniel S. Stoops *'~The Department of Computer and Information ScienceThe Ohio State University2036 Neff Ave.
Mall, Columbus, Ohio 43210t AT&T Bell Laboratories6200 E. Broad St., Columbus, Ohio 43213AbstractWe present wo compilation techniques that, whencombined, enable text to be generated fromsystemic grammars in real-time.
The firsttechnique involves representing systemic grammarsas C++ class hierarchies--this allows theinheritance in the classification hierarchies to becomputed automatically by the C++ compiler atcompile-time.
The second technique foUows fromthe stratified/renlizational nature of systemicdescription that results in a mapping from semantic/contextual features to the grammar--such amapping means that detailed grammatical featurescan be inferred directly, without a top-downtraversal of the systemic lassification hierarchies.When the mapping provides the leaf nodes of aninstantiation of the grammar (as might be expectedin routine generation), no traversal of the grammaris necessary whatsoever, since all the realizationinformation from higher-level nodes has beeninherited by the leaf nodes at compile-time.
Insuch cases the text can be output in less than asecond even on relatively slow wolkstatinns; on a22 MIPS machine the run-time is too small tomeasure.We have developed a framework for real-time sentencegeneration that we hope to deploy in future work on real-time applications.
Our emphasis has been on thecompilation of linguistic inference.
We would like to beable to perform generation in real-time even whenmaking adjustments for the occupation of the user, thespeed of the output device (short texts for slow devices),whether or not the situation is an emergency, whether thetext is spoken or written, and other situational factors thatmay influence linguistic decisions.
A prototypeimplementation of our framework generates ituation-adjusted clauses in less than a second on relatively slowworkstations, and is too fast to measure on a 22 MIPSmachine.
The computational slxategy behind thisframework is twofold: First, we have developed anobject-oriented approach to implementing systemicgrammars where much of the grammatical processing isdone automatically atcompile-time by the C++ compiler.Second, we take advantage of stored (compiled)associations between situations and linguistic choices.Furthermore, there is an interesting synergisticrelationship between these two compilation techniques.We will first present our object-orientedimplementation of systemic grammar, and provide anexample of the grammatical processing.
An outline ofour approach to storing situation-to-language ssociationswill then be provided.
Illustrative xamples will then beused to clarify these two ideas.
We will then discuss therelationship between these two computational techniques,and compare our framework to other approaches togeneration.
Finally, some conclusions will be drawn.An implementation of linguistic classificationHalliday's theory of Systemic Grammar (for a goodintroduction see Winograd Chapter 6) is unusual in thatthe primary descriptive mechanism is classification.
Theclassification hierarchies that appear in the linguisticliterature are directly analogous to those found in biology(for instance).183While finguistic las-sification alone may bean interesting theoreti-cal exercise, for anypractical propose thegrammar must relatethese classes to linguis-tic structures.
Just asbiological classes canbe related to biologicalproperties (e.g.
mam-mals have hair), lin-guistic classes can berelated to structuralproperties (e.g.
declar-ative clauses have sub-jects that precede theverb carrying thetense).
Economy of de-scription is achieved ineach case because instances of a class are not only attrib-uted the properties of that class, but also inherit he prop-erties of all its ancestor classes.
In the case of language,these properties are expressed as constraints on thestructure of the clause, noun phrase, prepositional phraseor whatever is being classified.
These constraints arecalled realization rules and typically refer to whichconstituents must appear, the order in which theconstituents appear, and so on.The importance of classification hierarchies insystemic grammar led us to consider object-orientedprogramming as an implementation strategy (for a gooddiscussion of some object-oriented approaches to repre-senting linguistic knowledge, as well as adescription of an object-oriented im-plementation f segment grammar, see \]De Smedt 90).
We have chosen to ex-  I plore this idea using C++.
The proto- type implementation is calledSLANG++ (a C++ version of the |Systemic Linguistic Approach to I Natural-lan-guage DECLARATIVEGeneration).C++ has twoadvantages: ofprimary impor-tance for thiswork is that allinheritance--includingmultiple inheritance--is IParentSChildren ~ indicativeRealization rules:computed at compile-time; an added benefitis that C++ provides alow-overhead run-timeenvkonment.
The ob-jects that we are con-cerned with are clauses,noun phrases and so on,and each of these cate-gories has a correspond-ing classification hierar-chy.
Systemicgrammar's classifica-tion hierarchies are rep-resented straightfor-wardly as hierarchies ofC++ classes.
The real-ization rules associatedwith each of the system-ic classes are represent-ed in a procedural form to facilitate the inheritance andconstruction of the appropriate English structures.
Afterthe grammar has been compiled, a leaf node in thehierarchy contains a body of code that specifies theconstruction of English structures according to all therealization roles associated with it and its ancestors.
Aswe will see below, this inheritance can help to avoidtraversing the grammar at run-time.There are several steps involved in translating asystemic grammar into C++.
Systemic linguists use agraphical notation that is impractical to use as input, andputting the grammar on-line is an important first step inthe translation process.
To this end we have usedmINTERROGATIVEParents ~ indicativeChildren yes/nowh-Realization rules:I a. usBFINITEParents \ [ \ [~  clauseChildren k3_\] indicativeimperativeINDICATIVEParents ~ finiteChildren \[gL..J de clarafiy~i n te r rogat iveFigure 2.
Simpfified Hypercard representationHypercard TM to create a tool that al-lows a systemic grammar to be en-tered, browsed, and modified.
Thecard for each grammatical class showsthe name, parents, children, and real-ization rules.
Using a mouse to selectparents and children, or using the key-board to type class names, allows theuser to move throughthe grammar to quick-ly find desired infor-mation.
Entering anew class typically in-volves adding a childto an existing card,moving to the newcard and entering the relevant infor-mation.
The tool will not allow the184creation of invalid hierarchies.The Hypercard representation f the systemic grammaris then translated, by a simple program, into C++ code.The hierarchies that were represented as links betweenparent cards and child cards are translated into a C++class definition hierarchy.
The (possibly multiple)inheritance in the grammar is all automatically compiledby C++ before the generation system is given any input.This means that the class description for declarative (forinstance) will contain all the realization rules fromindicative,finite and clause as well.Since inheritance is computed at compile-time, morework expressed in terms of inheritance means greaterrun-time fficiency.
If we have a text planner--or someother higher-level mechanism--that could select he leafnodes of the classification hierarchy, then most of thegrammatical processing could be done throughinheritance.
That is, most of the choices in the grammarwould be determined by the inheritance, and would nothave to be made explicitly at run-time.
The problem isthat the leaf nodes represent he most detailed andesoteric grammatical classes, which (as Hovy 1985,argues) should not have to he known by the higher level.In the next section we will show that this problem can besolved through the use of knowledge that associatessituation classes with grammatical c asses.
There is noreason that such coarse-grained, compiled knowledgeshould not associate situations with detailed grammaticalclasses or even leaf nodes.
In these cases thecomputational benefits of compiled inheritance areremarkable.Guidance from the SituationOur primary goal is to achieve the flexibilityof natural-language even in applicationswhere language must be processed in realtime.
In particular, we are interested in caseswhere language processing is routine, ratherthan the difficult special cases.
McDonald,Meteer and Pustejovsky (1987) analyze theissue of efficiency in natural-languagegeneration.
They observe that:"The greater the familiarity a speaker haswith a situation, the more likely he is tohave modeled it in terms of a relativelysmall number of situational elementswhich can have been already associatedwith linguistic counterparts, makingpossible the highly efficient 'select andexecute' style of generation" (p. 173).We are attempting to address the problem of how thesesituation-to-language associations can be stored andaccessed in an efficient manner.Halliday (1973, 1978) shows that the situation orcontext (including, to some extent, the information thespeaker wishes to convey) can also be described usingclassification hierarchies.
He gives an interesting theoryof situation-todanguage ssociations in his writings on"register," and some of these ideas have been discussedin the computational literature (e.g.
Patten 1988a, 1988b;Bateman and Paris 1989).
For our present purposes,however, it is sufficient to observe that detailedhierarchical classification schemes can be developed forsituations.
We represent hese Hallidayan situationhierarchies using object-oriented representations inexactly the same manner as we represent the grammar.Situation classes in the hierarchy can be associated withsome number of nodes in the grammatical hierarchy.Preferably these grammatical c asses wiU be near thebottom of the hierarchy--ideally leaf nodes---becausethis will minimize the number of decisions that need tobe made at run-time.
The grammatical ssociations areprope~es of the situation classes, and are inherited atcompile-time in exactly the same way as the realizationrules in the grammar.Thus, when a situation class is instantiated, thegrammatical classes associated with it are theninstantiated.
The compile-time inheritance in thegrammar ensures that all the relevant realization rules arealready contained in the grammatical nodes--thegrammar does not have to be traversed to locaterealization rules of the ancestors.
But the compile-timeinheritance also avoids traversal of the situationalhierarchy by passing associations down the hierarchy.l i!
ii i ili ii ii i iii iiii ii !i!ii !iiiiii  ii !iiiii  !
!iii  i iiiiiiiii!
iiiiii  ii          i   i !
!i   i Z!i ?185The result is a simple and efficient ransduction fromsituation and meaning to English structures.ExamplesThe run-time operation of SLANG++ is best illustratedthrough examples.
Our first example illustrates theprocessing of the grammar.
Here we assume that theinput to the system is a set of situational classes.
That is,we assume the existence of a text planner thatcan pass sets of situational classes to oursystem--these examples are merely intended toillustrate our approach to realization.
Suppose(following an example from Halliday 1978) thesituation at hand involves a mother and child athome, and the child is misbehaving.
The motherwants to control the behavior of the child bythreatening to deprive the child of dessert.Given the situation hierarchy in Figure 4, oneinput to SLANG++ is the class deprivation (ormore precisely threat-of-deprivaaon).Several other situation classes will be input aswell (indicating that hey are at home and so on),but these are handled in exactly the same way asdeprivation.
Once deprivation has been chosen,the situation-to-language knowledge indicatesthat the instantiation of several grammaticalclasses is in order.
The grammatical classesassociated with deprivation includedeclarative, benefactive, and negative.
Again,just looking at one of these will suffice.
Therepresentation f the class declarative containsnot only its own realization rules (to have thesubject of the clause precede the finite verb),but also all the realization rules of all itsancestors (indicative, finite and clause) thatwere inherited at compile-time.
Processingthese realization roles to build syntacticstructures is deterministic and inexpensive(see Patten 1988a, for a detailed escription ofthis type of realization).
Other realizationrules are similarly inferred from other inputsituational classes.
Thus, in very few steps,and without any expensive search, SLANG++computes syntactic structures (or at leaststructural constraints) from situational classestoward the generation of the appropriate hreat(e.g.
I am not giving you a dessert).A second example will illustrate anotherimportant aspect of our approach---compile-time inheritance in the situation hierarchy.Sothcott (1985) describes a system that produces impleplans for building a house, does some text planning, thenprovides input to a sentence generator.
Suppose the inputis in the form of situational classes describing thebuilding action and the role of the action in theconstruction process: Does it enable other actions?
Is itenabled by the previous actions?
Other relevant choicesmight include whether or not the addressee is the oneresponsible for this action.
A simple hierarchy for this::!i; i':: ii!
ili iil;::iii:~!::iiiiiii~!i!!
:::/:iiiiiii~!iiiiiii:: !~!i~i~i~i~i~:~,~:~!;~:~!~:iiiiiii~:i~:;~:ii~i~iiii~iii!..~f~`~:~..:..~iii~!~i~!i~:~::~::i::i~i::i::i::~::i::ii~::i!i/.!!!iiiiiiiiii!ii!ii!
!i!i~ ~!i ii!ii!iii!iiiiiiiiliiii!iiiii!ii!/iiiii!ilili!iiiiiiiii~iiiii?!
iii !
: : i:i: ~iiii!ii~i!i::::ii:ili~i:\[~ii~ili~iii!
i  ~i!i iiii:il !~:i!
:: iii::i:iiiiiiiiiii: ii: i ii liiiii !il: iiiiiiiiiiii i  iiiiiiiiiiii iiiiiii iiiiii:iii   @i  ii ili!i iii !iii  li ii!iiii!
l :i:i.iii iiiii iiii !iii iiii!iiii iiiiiiii liii !iiiiiiiii !!!!
:iiiiiiiiii :!ii iiii :!iii!ii!iiiii:ii!:!:!
: :  !i  !!
ii!
i !
~i\]iiii a~t~iii!iii!i::ii!!
!ii!ilili186type of situation is shown in Figure 5.
Suppose we wantto describe the step of sanding the floors, which has twopreconditions--the carpentry and painting must both becompleted.
Also, suppose we are relating the plan to theperson responsible for sanding and painting.
Thefollowing text is generated using a clause for each action:"If the carpentry has been finished and you've done thepainting, then you can sand the floors.
"The generation is well illustrated by the processingrequited for the first clause.
Since the carpentry is thefirst enabling action, the situational c ass first-enabling isinput.
Since the addressee is not responsible for thecarpentry, the situational class not-addressee-builder isinput (the situation requires addressee-builder fo theother two clauses, resulting in the second-personsubjects).
The first step in the generation process is toinstanfiate these situational classes.
The point ofprocessing the situation hierarchy is to determine thegrammatical classes associated with either the inputsituation classes or their ancestors.
But the associationsof a node's ancestors are all inherited by that node atcompile-time.
So, in the case where leaf situationalclasses are input, we are left with the much simplerproblem of determining the grammatical classesassociated with the input classes.
If we consider the caseof first-enabling, we see that it has inherited anassociation with the grammatical c ass present from itsancestor enabling, and the class perfective from itsancestor non-enabled.
The tense of the clause istherefore immediately constrained to be present perfect.Other situational classes are instanfiated resulting infurther grammatical choices (including the grammaticalclass declarative discussed above) that are processed inthe manner described in the previous example.
Thus, thesituation hierarchy benefits from compile-timeinheritance just as the grammar does.DiscussionThis approach to generation consists largely of followingexplicit pointers into the hierarchies and collecting sets ofrealization rules (that have been assembled at compiletime) along the way.
Two types of expensive search areavoided: first, the associative knowledge avoidssearching for the grammatical c a~sses needed to satisfysituational requirements; second, the compile-timeinheritance avoids traversing the grammar in search ofancestors and their realization rules.
The result is anextremely efficient yet remarkably simple framework thatfollows naturally from combining Halliday's stratifiedclassification with object-oriented programming.There is an interesting synergistic relationship betweenthe situation-linguistic associations and the compile-timeinheritance.
On one hand, if no associational knowledgewere available, then there would be no legitimate way toaccess nodes near the bottom of the hierarchy, andinheritance would not be a viable operation.
On the otherhand, ff there were no compile-time inheritance, theneither a large portion of the grammar would have to bebuilt into the associational knowledge, or an expensivegrammar traversal would have to be performed at run-time.
With both techniques working together, we achievereal-time performance while maintaining the desiredmodularity.Our emphasis on knowledge that links situations tolanguage has resulted in SLANG++ having much incommon with the MUMBLE generator of McDonald etal.---each involves mapping from generator input topreprocessed finguisfic knowledge, and each avoids anexpficit raversal of the grammar.
Indeed, although weuse systemic grammar to represent linguistic knowledge,our system has more in common with MUMBLE than itdoes with other systemic generators uch as Penman(Mann & Matthiessen 1983) and Proteus (Davey 1978).SLANG++ makes an important contribution toMUMBLE-style generation by demonstrating thatsystemic grammar can be processed in this fashion, andthat the classificatory nature of systemic grammaractually enhances this approach if used in conjunctionwith compile-time inheritance.Thus far we have only considered the case where thecoarse-grained situation-to-language knowledge guidesthe generation.
In practice, generation will consist of acombination of coarse-grained and fine-grainedinference, with more coarse-grained inference in morefamiliar situations.
"When a situation is relatively unfamiliar, its patternof elements will tend not to have any direct mappingto natural, preconstructed structures.
When thisoccurs, the mapping will have to be done at a finergrain, i.e.
using the more abstract text properties fromwlfich preconstructed schema are built, and theprocess will necessarily require more effort"(McDonald et al, p. 173).An important aspect of our object-orientedimplementation is that although grammatical informationis inherited through the grammar, the inhentedinformation is only copied to lower nodes in thehierarchy--the information still resides in the higher-level objects and can be accessed there at run time ifnecessary.
If a sentence is only partially specified bysituation-to-language knowledge, then fine-grained187linguistic knowledge must be invoked for the unresolvedbranches of the hierarchy.
Decision specialists can beused to access the necessary information and make achoice.
This technique is used in the Penman system(e.g.
Mann 1985; Mann & Matthiessen 1983) as theprimary strategy for processing systemic grammars.
Ourapproach using inheritance and situation-linguisticassociations improves efficiency in cases where theseassociations are available, but will not hamper fine-grained reasoning when it is necessary.
It shouldtherefore be possible to combine both kinds of reasoning(each of which has now been tested on large systemicgrammars) to produce a system that is both efficient androbust.ConclusionWe believe that the approach to natural-languagegeneration that we have described here is of significantpractical importance.
Our C++ implementation ofsystemic grammar esults in remarkable fficiency andsimplicity.
Even linguistically-sophisticated xt that istailored to the specific user and context can be generatedin real-time, as demonstrated byour implementation.
Incases where situation-to-language knowledge completelydetermines the text, we can generate appropriatesentences from a large systemic grammar in an amount oftime that is too small to measure.
This opens the door fornatural-language generation in a wide range of time-critical applications.
In cases where the situation-to-language knowledge does not completely determine thetext, this knowledge can still make a significantcontribution, with existing techniques for top-downhierarchy traversal able to do any remaining work.
Webelieve that this surprisingly natural marriage ofprogramming-language technology and linguistic theoryprovides apromising framework for application-orientedprocessing of natural language.ReferencesBateman, J.
A., C. L. Paris, Phrasing a text in terms theuser can understand.
In Proceedings of the EleventhInternational Joint Conference on ArtificialIntelligence, 1989, pp.
1511-1517.Davey, A. Discourse Production.
Edinburgh: EdinburghUniversity Press, 1978.De Smedt, K. Incremental sentence generation.Technical Report 90-01, Nijmegen Institute forCognition Research and Information Technology,1990.Halliday, M. A. K., Language as Social Semiotic.London: Edward Arnold, 1978.Halliday, M. A. K., Explorations in the Functions ofLanguage.
London: Edward Arnold, 1973.Hovy, E. Integrating text planning and production ingeneration.
In Proceedings of the Ninth InternationalJoint Conference on Artificial Intelligence, 1985, pp.848--851.Kempen, G.
(ed.
), Natural Language Generation.Dordrecht: Nijhoff, 1987.Mann, W. C., The anatomy of a systemic choice.
InDiscourse Processes 8, 1985, pp.
53-74.Mann, W., C. Matthiessen, Nigel: a systemic grammarfor text generation.
ISI/RR-83-105, 1983.McDonald, D., M. Meteer (Vaughan), J. Pustejovsky,Factors Contributing to Efficiency in NaturalLanguage Generation.
In G. Kempen (ed.)
op.
cit.,1987, pp.
159-181.Patten, T., Systemic Text Generation as Problem Solving.New York: Cambridge University Press, 1988a.Patten, T., Compiling the interface between text planningand realization.
In Proceedings of the AAAIWorkshop on Text Planning and Realization.
1988b,pp.
45-54.Patten, T., G. Ritchie, A Formal Model of SystemicGrammar.
In G. Kempen (ed.)
op.
cit., 1987, pp.279-299.Sothcott, C., EXPLAN: a system for describing plans inEnglish.
M.Sc.
dissertation, Dept.
of ArtificialIntelfigence, Univeristy of Edinburgh, 1985.Winograd, T., Language as a Cognitive Process, Vol.
1.Reading, Mass.
: Addison-Wesley, 1983, Chapter 6.Hypercard is a trademark of Apple ComputerIncorporated.188
